issue_num,datetime,body,login,close_date
3476,2017-03-02 12:26:26,,Danter7,2017-03-02 15:35:59
3476,2017-03-02 12:32:29,"Thanks for your contribution @Danter7 
I'll merge this, but you'll also have to bump the `blueimp-load-image ` optional dependency to version `2.12.2`, else there won't be a separate `scale` module.",blueimp,2017-03-02 15:35:59
3475,2017-02-24 11:33:51,"The moving of scaling into a separate module in blueimp-load-image (https://github.com/blueimp/JavaScript-Load-Image/commit/cad8a5af578969681d9ce5261db53650204cce86) seems to break scaled uploads:

> TypeError: t.scale is not a function. (In 't.scale(a,i)', 't.scale' is undefined)

This pegs that dependency at a lower version so things continue to work until it's fixed.

(you don't seem to have a bug tracker? So not sure where to report the issue for JavaScript-Load-Image)",autopulated,2017-02-24 13:15:39
3475,2017-02-24 13:15:39,"Thanks for your contribution @autopulated 

That was actually an issue in [JavaScript Load Image](https://github.com/blueimp/JavaScript-Load-Image/commit/57e634af79738c46b25df71a12282763721a072c)  and has been fixed with version `v2.12.2`.

Regarding the closed issue tracker:
This was a deliberate decision as the number of support requests drowned out any deliberate issue reports and made maintaining this project a full-time project.
Pull requests still allow constructive contributions like yours, so I prefer this approach.",blueimp,2017-02-24 13:15:39
3475,2017-02-24 18:15:57,"OK, thanks! Can't blame you for that.",autopulated,2017-02-24 13:15:39
3474,2017-02-09 16:39:09,as `$.parseJSON`  is deprecated in jQuery 3.x,evil-shrike,2017-02-09 17:22:47
3474,2017-02-09 17:29:21,"Thanks for your contribution, @evil-shrike.
To not break compatibility with old browsers (supported by older jQuery Versions), I've added a change that only uses `JSON.parse` if it's available, else `jQuery.parseJSON`.",blueimp,2017-02-09 17:22:47
3473,2017-01-29 15:56:44,"I would like to add increment number concatenated with file name, to extract and use that variable for inserting other array variables in the database.This I will use it for the array position. I have exhausted all my resource and cannot do it.

I someone can help me I will appreciate a lot.",chrbono,2017-02-02 20:29:12
3473,2017-02-02 20:29:12,"Please do not misuse the pull request feature.
For support, please see here:
https://github.com/blueimp/jQuery-File-Upload#support",blueimp,2017-02-02 20:29:12
3472,2017-01-27 11:46:55, Updates Docs adds more hints for server setup in htaccess file,flobee,2017-02-02 20:28:26
3472,2017-01-29 13:02:36,"Hi if you want new Coding Style (CS) you may check this commit which is not in this pull request: 
https://github.com/flobee/jquery-file-upload/commit/be620e9f4333f2225bcf4318af2ca6db89fdf0cf",flobee,2017-02-02 20:28:26
3472,2017-02-02 20:28:26,"Thanks for your pull request @flobee.
Unfortunately I don't see the benefit of those contributions.
Maybe this would be better suited in a fork?
If there's an exact topic that this set of changes is about, I'll gladly add it to the Wiki. ",blueimp,2017-02-02 20:28:26
3472,2017-02-03 17:11:48,"Hi, the pull request shows changes for this:
https://github.com/blueimp/jQuery-File-Upload/pull/3472/commits/8d8b42bb8084982b2070a0d5a6fd657b6bca08ff
If this is not a benifit people maybe get lost :-/

All other listed here are not included. I'm not often send pull request, so maybe misunderstanding.
I forked already your project but will leave it as good as i can as is :-) Except coding style. This was a must have for me.",flobee,2017-02-02 20:28:26
3472,2017-02-06 10:31:53,"You can keep the coding style or any other aspect in your fork whichever way you want. :)

I've added a note about the Apache Headers module to .htaccess file here: https://github.com/blueimp/jQuery-File-Upload/commit/fa04f7b0f8e04a15e397a6797c14a491c5d07fa4

As a recommendation, if you want maintainers to include your pull requests it's better to keep them atomic, with one set of focused changes.",blueimp,2017-02-02 20:28:26
3471,2017-01-23 13:22:20,"I'm not sure if this should fit in the master branch or in one of the wiki pages, but it is a useful function I think.

I'm also not sure if this is the way to go, yet. Any help would be appreciated, as I'm trying to learn the structure of this module. I used to do python, so the javascript syntax is quite new to me and I might be wrong.",gabn88,2017-02-02 19:37:12
3471,2017-02-02 19:37:11,"Thanks @gabn88 
This is better suited for the Wiki, so I've added it to the list of forks here:
https://github.com/blueimp/jQuery-File-Upload/wiki#forks",blueimp,2017-02-02 19:37:12
3470,2017-01-13 15:06:53,"The fileupload submit process uses promises internally. This promise chain is not exposed in the public API and the developer has to use event subscription to know when an upload has succeeded or failed.

In order to simplify the async handling of the submit() response I expose the result of applyOnQueue as a $q promise.

This way a developer can write fileupload.submit().then(...) as an alternative way to handle the response. In our particular solution this reduces quite a bit the amount of state we have to maintain in and leverages the fileupload API to the angular $q service.",rlucha,2017-01-13 16:36:10
3470,2017-01-13 16:36:04,"Thanks for your contribution, @rlucha!",blueimp,2017-01-13 16:36:10
3469,2017-01-09 04:55:34,Signed-off-by: Randy Barlow <randy@electronsweatshop.com>,bowlofeggs,2017-01-13 16:32:22
3469,2017-01-13 16:32:18,Thanks!,blueimp,2017-01-13 16:32:22
3468,2017-01-09 04:50:46,Signed-off-by: Randy Barlow <randy@electronsweatshop.com>,bowlofeggs,2017-01-13 16:30:55
3468,2017-01-13 16:30:51,Thanks @bowlofeggs ,blueimp,2017-01-13 16:30:55
3467,2017-01-07 14:44:34,"Occurs Character error with file name with accent, example:
São Paulo => SÃ£o Paulo.
Only in Windows file system.
There is a option to change UTF-8 to Windows 1252 ?",saulodecarlo,2017-01-13 15:57:10
3467,2017-01-13 15:57:10,"Please do not misuse the pull request feature for support requests.

Please also see https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#is-there-a-problem-uploading-files-with-non-ascii-characters-php-windows-server for an answer to your question.",blueimp,2017-01-13 15:57:10
3466,2016-12-22 11:10:24,"Hi !


for example I try to change with this :

<S_CODE_TOKEN>
My goal is to change the directory destination to and other directory but It does not work by setting option in UploadHandler juste with upload
(I've created the directory)
I've tried just do rename files to upload It still does not work

When I try to upload I've got this error : 
Internal Server Error (500)

Thx for advance,

Regards,",DigitalCoder,2016-12-23 10:27:43
3466,2016-12-23 10:27:43,"To find the root cause for your error, please have a look at your server logs for this 500 error, they will likely explain the issue.

Also, please do not misuse the pull request feature for support requests.

This project is actively maintained, but there is no official support channel.
If you have a question that another developer might help you with, please post to [Stack Overflow](http://stackoverflow.com/) and tag your question with blueimp jquery file upload.",blueimp,2016-12-23 10:27:43
3465,2016-12-20 02:36:09,"Fixed path jquery-ui/ui/widget.
jquery-ui : 1.12.1
",exabugs,2016-12-20 12:20:56
3465,2016-12-20 12:21:03,Thanks @exabugs !,blueimp,2016-12-20 12:20:56
3464,2016-11-19 17:04:36,"This only applies to users with javascript disabled as the styling is otherwise overwritten by bootstrap.

200px size was introduced in 76ca40b044b7660f17a77ff82f7fcf14b51878a8 which mentions #2635 but the issue appears to be no longer available so I don't know what the point of the incredibly large size was.

For reference, this is how the demo looks with JS disabled:

![screenshot from 2016-11-19 17-57-47](https://cloud.githubusercontent.com/assets/719105/20457038/7ac6daa2-ae82-11e6-9578-4a1ebcbda760.png)
",tribut,2016-11-20 14:52:50
3464,2016-11-20 14:54:10,"Thanks @tribut.
There's a separate file where I fixed this issue.
",blueimp,2016-11-20 14:52:50
3463,2016-11-15 13:03:17,Please review the guidelines for contributing to this repository.,umeshkrishna,2016-11-15 13:04:16
3463,2016-11-15 13:03:29,"Please review the guidelines for contributing to this repository.
",umeshkrishna,2016-11-15 13:04:16
3462,2016-11-06 18:57:19,"Added backend restrictions on number of file uploads allowed in single request.

when singleFileUploads: false

> User can override number of maximum files on client side. So a server check is required.

For solving the purpose and adding more reliability added a server side check which can be bundled with front end checks, and if front end checks fail or user tries to fiddle the javascript to bypass the checks, backend check can still serve the purpose.",saurabh-sharma,2016-11-07 14:06:18
3462,2016-11-06 19:05:19,"Error message updated for `'max_files_upload_allowed' => 'Maximum number of file uploads exceeded'`
",saurabh-sharma,2016-11-07 14:06:18
3462,2016-11-07 14:06:18,"Thanks for your contribution, @saurabh-sharma 

Unfortunately, I don't think this is a good approach, as you only limit the number of parts in the multipart POST message, which doesn't have any perceivable benefit.
Users can still send an arbitrary number of files by sending multiple POST requests for example.
Without any user identification, it will not be possible to limit the number of files uploaded.

If you need to limit the number of files users can upload, you can already do this with the current version of the PHP library.
By making use of the options `user_dirs` and `max_number_of_files` you can effectively limit the number of files an individual user can upload.
",blueimp,2016-11-07 14:06:18
3462,2016-11-07 17:09:57,"Thanks for the reply @blueimp 

I am not talking about the max number of files that can be uploaded in a directory, but I did mean about enforcing 1 file limit per upload, which can't be trusted from the client side! User can just fiddle the script and just skip the single file upload limit.

I agree with you on this one:

> Users can still send an arbitrary number of files by sending multiple POST requests for example.
> Without any user identification, it will not be possible to limit the number of files uploaded.
> 
> If you need to limit the number of files users can upload, you can already do this with the current version of the PHP library.

User can upload any no. of files (which can be restricted with the way you mentioned in above comment)

#3462 just adds an option for single file upload (I know it can be restricted from the front end using this process https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#how-to-limit-the-file-selection-so-users-can-only-select-one-file) to be restricted from backend as well.

And trust me, the front end option mentioned in the link above does not work with drag and drops at all.

And apart from all this, can you just enable the `issues` options for this repo? There's another serious vulnerability (And I want to emphasise on vulnerability) which needs attention.
",saurabh-sharma,2016-11-07 14:06:18
3462,2016-11-07 17:17:48,"I understand that your pull request adds a restriction to limit the number of files handled in a single request. I simply see no benefit in doing so.
e.g. to limit request size, it's much better to use server settings, e.g. in Nginx or Apache, before it's handled by PHP and already consumes processing cycles.

If you found a serious vulnerability, you can either contact me in private via https://blueimp.net/ (my name is linked with my email address), or you can open another pull request with a fix, which is preferred.

I will not reenable the issues tracker for the simple reason that people misused it as a support request forum. With a project that popular, it became a full-time job to attend to the issues so I deliberately chose to disable it.
I do not provide any support for this project anymore as stated in the [README](https://github.com/blueimp/jQuery-File-Upload#support).
",blueimp,2016-11-07 14:06:18
3461,2016-11-04 16:19:16,"Sorry if this the wrong place to post.  In using the basic-plus demo code, I was having an issue with the `fail` callback option getting triggered, in spite of a successful upload, displaying

> File upload failed.

  After some digging I found the php handler was not sending back an `error`.  Adding `$file->error = $error;` before validation in `handle_file_upload()` seems to have solved my problem.",CQPosts,2016-11-05 13:01:49
3461,2016-11-05 12:55:42,"How the hell i can  upload a photo just by giving him the image url  with this great script ? I searched over web about this and after  a week i give up, really  no solution about ? 
",madeureka,2016-11-05 13:01:49
3461,2016-11-05 13:01:49,"@CQPosts @madeureka 
Please do not misuse the pull request features.

And please understand that I do not offer any support for this project anymore:
https://github.com/blueimp/jQuery-File-Upload#support
",blueimp,2016-11-05 13:01:49
3461,2016-11-15 13:06:21,"thanks
",umeshkrishna,2016-11-05 13:01:49
3459,2016-10-25 21:02:38,"This PR builds upon https://github.com/blueimp/jQuery-File-Upload/pull/3446. I think all the major CommonJS situations are covered.
",niksy,2016-10-26 12:15:28
3459,2016-10-26 12:15:32,"Thanks @niksy !
",blueimp,2016-10-26 12:15:28
3458,2016-10-18 05:23:31,"I am jquery file upload in my site https://www.carsangrah.com/sell-my-used-car/
this form is not getting submitted unless i upload a file.
Please let me know the solution.
Thanks
",hemantprakash123,2016-10-18 08:23:59
3458,2016-10-18 08:23:59,"jQuery File Upload is not a generic form uploader and will not upload form data without a file.

P.S.:
Please do not misuse the pull request feature.

If you have a question that another developer might help you with, please post to [Stack Overflow](http://stackoverflow.com/questions/tagged/blueimp+jquery+file-upload) and tag your question with `blueimp jquery file upload`.
",blueimp,2016-10-18 08:23:59
3457,2016-10-15 07:30:34,"Currently, file uploader leaves the event handlers active when ""destroy"" option is called. This leads to various errors in scenarios when file uploader object is created/destroyed on the fly. This commit fixes this bug by hooking the ""destroy"" option with the jQuery UI widget dismantling process.
",AllSeeingEye,2016-10-17 08:18:22
3457,2016-10-17 08:18:28,"Thanks, @AllSeeingEye !
",blueimp,2016-10-17 08:18:22
3456,2016-09-05 10:10:21,"Added ability:
- to randomise final uploaded filenames 
- specify whether file extension is used or not on the randomised filename

Modified the code - http://stackoverflow.com/a/26101744/1337766 to better suit my needs
",timwiel,2016-10-02 17:29:25
3456,2016-09-07 09:39:46,"Additional considerations:

Filesystem limitations:
http://serverfault.com/questions/95444/storing-a-million-images-in-the-filesystem/95454#95454

Security:
https://www.reddit.com/r/PHP/comments/2dn8t3/file_uploading_best_practices_and_handling_in_php/cjr89eu
",richard512,2016-10-02 17:29:25
3456,2016-10-02 17:29:25,"Thanks for your contribution, @timwiel 
I've added your repository to the wiki (under forks).

I hope it's fine for you that I prefer your work as a fork, as I don't see an imminent need to add the randomised file names feature to the master branch.

I'm only maintaining this project and will not develop it any further.
This is especially true regarding the server-side code, which originally was only meant as a simple demonstration (see e.g. the [first version](https://github.com/blueimp/jQuery-File-Upload/blob/9b22fc143f5f25c00fdf7ef177db0a99e7133378/example/upload.php) ).

Thanks a lot though!
",blueimp,2016-10-02 17:29:25
3455,2016-09-03 18:57:27,"Gives a more easily understandable error message when there's a file permission problem
",richard512,2016-10-02 17:14:45
3455,2016-09-03 19:04:50,"**Most likely fix** for these errors, for an Apache server running Linux:

<S_CODE_TOKEN>
",richard512,2016-10-02 17:14:45
3455,2016-09-03 20:39:48,"Just added the ability to detect mime types and to create thumbnails for uploaded videos.
",richard512,2016-10-02 17:14:45
3455,2016-10-02 17:14:45,"Thanks a lot for your contribution, @richard512 

Those are all nice features and I've added your repository to the [wiki](https://github.com/blueimp/jQuery-File-Upload/wiki) (under forks).

I hope it's fine for you that I prefer your work as a fork, as I want to keep my maintainer workload small and adding video thumbnail support would open up another swath of potential issues.

Thanks a lot though!
",blueimp,2016-10-02 17:14:45
3455,2017-02-09 03:56:20,upload to upload video file getting error :  Empty file upload result,myselfgaurav,2016-10-02 17:14:45
3455,2017-02-09 06:11:43,"myselfgaurav: My first guesses would be that either there aren't proper file permissions in the upload dir or the uploaded file is bigger than what the server is configured to allow. What does it do when you try to upload other, smaller files?",richard512,2016-10-02 17:14:45
3455,2017-02-09 20:50:19,"thanks i checked my server upload max file size if 150 mb , i was uploading file of 600 mb , but i think data is sent in chuk format so upload should work , do i have to do some setting to enable file chunking please guide",myselfgaurav,2016-10-02 17:14:45
3455,2017-02-10 13:37:44,"that'll do it. and, yeah, it should be able read in the chunks.

if not, you can try something like

http://stackoverflow.com/questions/7853467/uploading-a-file-in-chunks-using-html5

or

https://github.com/sthielen/BigUpload

If you end up using an alternative script that works very well for you, please let me know. i'd be interested to hear.",richard512,2016-10-02 17:14:45
3454,2016-07-05 18:22:25,"I ran into an issue importing the jQuery UI Widget module while using the requirejs optimizer. Currently the module is required as 'jqery.ui.widget', this caused the requirejs optimizer to fail. Even with the name mapped to the path for my jquery-ui library it still failed due to relative includes inside the widget module then not being found.

The jQuery UI site (https://learn.jquery.com/jquery-ui/environments/amd/) uses jquery-ui/<modulename> for their imports - changing to this made the problem go away. 
",headlessme,2016-07-31 20:04:27
3454,2016-07-31 20:04:34,"Thanks, @headlessme!
",blueimp,2016-07-31 20:04:27
3453,2016-06-28 09:15:52,"Hi,

in fileupload-ui.js is a require('tmpl'), but this must be 'blueimp-tmpl' , else it won't work for browserify since the package name tmpl doesn't exists.
",timmetj,2016-07-31 19:50:48
3453,2016-07-31 19:51:09,"Thanks for your contribution and sorry for the late reply, @timmetj 
",blueimp,2016-07-31 19:50:48
3452,2016-06-15 07:49:12,"many app framework have this xsrf token protected for post/put/patch/delete action, like Laravel,

Now angularjs will automatically set the X-XSRF-TOKEN based on XSRF-TOKEN cookie value, so I created this patch that jQuery-File-Upload can also have this header set on each request, 

It's a extremely simple solution, I home you can have this in official codes.

Thanks
",steve3d,2016-06-15 08:02:50
3452,2016-06-15 08:02:50,"Thanks for your contribution, @steve3d 
However, there's absolutely no need to include the code snippet you added inside of this library.
Simply add it into a new file and include it in your HTML documents.
",blueimp,2016-06-15 08:02:50
3452,2016-06-15 08:25:06,"sorry, but I don't think include this in other scripts will make this easy, 
xsrf-token will change every 900 seconds or less, laravel will set the new token value in cookie whenever it changes, so I can not set this header in some fixed documents or scripts, it must be refreshed on every request, 

So is there another way to intercept the _beforeSend event?
",steve3d,2016-06-15 08:02:50
3452,2016-06-15 08:34:21,"ok, got it.
",steve3d,2016-06-15 08:02:50
3452,2016-06-15 08:36:14,"Yes, for changing XSRF tokens, you will need to set this either in your response handlers, or in a handler before each request.

However this also doesn't need to be part of this library, since you could for e.g. make use of https://api.jquery.com/ajaxSend/

In any case, you will need the token for other requests than just file upload requests, so adding this here only will not be sufficient.
",blueimp,2016-06-15 08:02:50
3452,2016-06-15 08:38:52,"If there's really no other way for you to implement this, please have a look at the available callback options:
https://github.com/blueimp/jQuery-File-Upload/wiki/Options#callback-options
",blueimp,2016-06-15 08:02:50
3452,2016-06-15 08:55:03,"just tried with event fileuploadsend, and fileuploadstart, in both event , there is no way to get the jqXHR object, and use $.ajaxSetup({ headers: ...}) in those event will have no effect, 

I'm using angularjs, the event system in angular can not make sure these callbacks are called before the actual request, so it seems there is really no way to add this header with angularjs' event system.
",steve3d,2016-06-15 08:02:50
3452,2016-06-15 09:03:01,"also tried this in my angularjs controller

<S_CODE_TOKEN>

still not working
",steve3d,2016-06-15 08:02:50
3452,2016-06-15 09:24:58,"In the `fileuploadsend` callback, the second argument is the `options` object that is handed over to `$.ajax`. You can override any ajax option there, e.g.:

<S_CODE_TOKEN>

I still recommend you to make use of `$.ajaxSend`. However you don't call `$.ajaxSetup` in there, but make use of the jqxhr argument passed to the handler function, e.g.:

<S_CODE_TOKEN>
",blueimp,2016-06-15 08:02:50
3451,2016-06-11 07:12:29,"… PHP 7.1
",remicollet,2016-06-11 14:09:28
3451,2016-06-11 07:26:42,"FYI:

<S_CODE_TOKEN>
",remicollet,2016-06-11 14:09:28
3451,2016-06-11 14:09:30,"Thanks, @remicollet 
",blueimp,2016-06-11 14:09:28
3450,2016-06-07 15:12:40,"We see that in IE when you build the target string, the host is with the port, :80, in our case:

loc = $('').prop('href', options.postMessage)[0],
target = loc.protocol + '//' + loc.host

And when you check if target is equal to e.origin, this condition is never true and postmessage never returns to other side.
",david-ogalego,2016-06-11 15:40:09
3450,2016-06-11 14:21:03,"And no comments? or solutions?
",david-ogalego,2016-06-11 15:40:09
3450,2016-06-11 14:22:44,"Sorry, this must have been a mistake, I don't even remember closing this.
",blueimp,2016-06-11 15:40:09
3450,2016-06-11 14:24:56,"what do you think about this problem and our solution? we don't know if we have something wrong or there is a problem with IE.
",david-ogalego,2016-06-11 15:40:09
3450,2016-06-11 14:27:07,"I'm looking at it right now.

Regarding the accidental closing:
It is never my intention to close pull requests without a comment. I'm wondering if this was a bug as I merged this pull request at the same time: https://github.com/blueimp/jQuery-File-Upload/pull/3451
",blueimp,2016-06-11 15:40:09
3450,2016-06-11 14:32:08,"Ok. We are using your component in our project and we would like to have the official :) 
",david-ogalego,2016-06-11 15:40:09
3450,2016-06-11 15:03:09,"OK, I could reproduce the behaviour when inferring the `host` property from a link element in IE, like it is done in the postMessage script.
Interestingly, IE doesn't show the same behaviour if you simply access `window.location.host`.

<S_CODE_TOKEN>

The solution here is to fix that part, rather than changing the origin check.
",blueimp,2016-06-11 15:40:09
3450,2016-06-11 15:41:07,"I've released a fix. Please let me know if this works for you.
",blueimp,2016-06-11 15:40:09
3450,2016-06-14 08:16:50,"Yes! It is working for us, thank you.
",david-ogalego,2016-06-11 15:40:09
3450,2016-06-14 08:45:53,"Great! :)
",blueimp,2016-06-11 15:40:09
3449,2016-06-07 10:38:35,"This provides to the user the reason why a preview cannot be displayed. Just a bit more friendly. I created it as a separate property for backwards compatibility but I think it could also just use the share the property `file.preview`.
",akvadrako,2016-06-08 11:58:06
3449,2016-06-08 11:58:06,"Thanks for your contribution, @akvadrako.
I prefer to let the UI code handle the display of error messages and don't see a necessary need to explain the lack of video preview.
Thanks for your understanding.
",blueimp,2016-06-08 11:58:06
3448,2016-06-06 16:18:18,"Hello, could you tell me, if there is any option to limit uploads to only one file?

Regards!
",CNK001,2016-06-06 16:20:56
3448,2016-06-06 16:20:56,"Please have a look at the [extensive documentation](https://github.com/blueimp/jQuery-File-Upload/wiki) and please do not misuse the pull request feature.
",blueimp,2016-06-06 16:20:56
3447,2016-06-03 08:03:14,,ZHANGYUHE,2016-06-03 08:03:34
3446,2016-05-27 10:17:39,"This makes some of the node.js style imports more like the AMD ones. This makes it easier to use with webpack. It's still not totally seamless since I still need this special configuration:

<S_CODE_TOKEN>

but otherwise just these lines are now enough:

<S_CODE_TOKEN>

It would make my life easier to get this applied upstream. Also, if you would be open to avoiding that imports hack, we could probably do it by separating the AMD and node.js package formats the same way jQuery does.
",akvadrako,2016-10-02 17:20:52
3446,2016-05-27 12:19:28,"Thanks for your contribution, @akvadrako.

I've added some comments to the updated files.

Could you elaborate on separating the AMD and node.js package formats jQuery-style?
",blueimp,2016-10-02 17:20:52
3446,2016-06-07 09:40:41,"The way jQuery itself handles the AMD/node.js confusion, is first checking for `module` then exporting AMD modules too, if possible. Some pseudo-code:

<S_CODE_TOKEN>

This way it should work out of the box in webpack, which defines both `define` and `module`.
",akvadrako,2016-10-02 17:20:52
3446,2016-06-08 12:06:38,"I would be fine with the the change to check for `module` and `module.exports`.
Feel free to include it in this pull request, if you like.
",blueimp,2016-10-02 17:20:52
3446,2016-06-30 14:32:13,"Would love to see this merged also.

@akvadrako couple of notes:
- Since you’re referencing `angular` and `blueimp-load-image`, I suppose those should be defined as `dependencies` of this project?
- Why do you explictly reference `blueimpl-load-image/js/load-image` instead of `blueimp-load-image`? That package already exports module which can be consumed?
",niksy,2016-10-02 17:20:52
3446,2016-08-29 10:59:22,"@akvadrako are you still working on this?
If there's no reply to my requested changes I'll close this in the next couple of days.
",blueimp,2016-10-02 17:20:52
3446,2016-09-07 10:46:04,"+1 I'm also having issues using this with webpack. Would love to see this merged.
",kostyay,2016-10-02 17:20:52
3446,2016-10-02 17:20:52,"Closing this as there has been no reply regarding the outstanding issues.
If anyone else wants to make a clean pull request for the import paths, please provide a new pull request.
",blueimp,2016-10-02 17:20:52
3445,2016-05-23 11:42:05,"Default is `public`, but following psr2 is better to specify.
`private` methods should be `protected` instead so that problems can be avoided when subclassing.
",mcdado,2016-05-23 13:11:36
3445,2016-05-23 13:11:42,"Thanks @mcdado 
",blueimp,2016-05-23 13:11:36
3444,2016-05-19 19:43:07,"I experienced concat problem with this console error like this

`Uncaugth TypeError: (intermadiate value)(intermadiate value)(...) is not a function`
",orhanveli,2016-05-20 09:53:58
3444,2016-05-20 09:54:00,"Thanks @orhanveli.
",blueimp,2016-05-20 09:53:58
3443,2016-05-18 12:26:40,"Hi!

I think that this is a bug:
EX:
In Chrome 50, when you select a file with 3MB , the jQuery-File-Upload change the image to 256KB:
you can see this in the Demo:
https://blueimp.github.io/jQuery-File-Upload/

The file is change before upload and the size is always 1080px height.

In Chrome 40-49 the image has the same size that original in the HardDrive. 

RenderPCI
",renderpci,2016-05-18 12:31:37
3443,2016-05-18 12:31:37,"Please do not misuse the pull request functionality.
Your pull request simply contains the changes between the `master` and `gh-pages` branch, which are purposefully not merged into `master`.

The ""bug"" you are talking about is not just completely unrelated, but it's also not a bug, but a feature.
The demo simply does client-side resizing.

This is only enabled on the demo based on the demo domain, so it will not affect a default setup.
",blueimp,2016-05-18 12:31:37
3442,2016-05-15 09:11:53,"Updated ""README.md"" file.
",geekrypter,2016-05-16 15:43:58
3442,2016-05-16 15:43:58,"Sorry, but a title and description of ""Updated README.md"" with a couple of superfluous changes is not enough reason for me to accept your pull request.
",blueimp,2016-05-16 15:43:58
3441,2016-05-11 23:56:11,,noelcosgrave,2016-05-12 06:36:41
3441,2016-05-12 06:36:41,"Please have a look here:
https://www.google.com/search?q=protocol+relative+url
",blueimp,2016-05-12 06:36:41
3441,2016-05-12 22:00:43,"Forgot about scheme-relative URLs. My apologies.
",noelcosgrave,2016-05-12 06:36:41
3441,2016-05-13 07:19:31,"No worries, thanks for understanding. :)
",blueimp,2016-05-12 06:36:41
3440,2016-05-01 14:07:58,,georgemillo,2016-05-01 18:32:46
3440,2016-05-01 18:32:48,"Thanks, @georgemillo!
",blueimp,2016-05-01 18:32:46
3439,2016-04-28 17:13:19,"When uploading images, along with the given versions it also saves the original image file. If the option `save_original` is set to `false` the original image will be deleted. Default is `true`
",hashmode,2016-04-29 12:23:40
3439,2016-04-29 12:23:40,"Thanks for your contribution, @hashmode.
However, this option is unnecessary, as it's already possible to keep modified versions only, as the original itself is listed in the image versions:
https://github.com/blueimp/jQuery-File-Upload/blob/master/server/php/UploadHandler.php#L133
",blueimp,2016-04-29 12:23:40
3439,2016-04-29 14:07:45,"@blueimp , thanks for the reply. I had seen that part, and I anticipated that if I skip the empty version - the original will not be saved. So, e.g. if we have these options

<S_CODE_TOKEN>

I thought it would create only these 2 files: `upload_dir/small/image.jpg` and `upload_dir/large/image.jpg`. However I end up having one more `upload_dir/image.jpg` file - which is the original. I also tried to make the empty `''` version as one of my files by having

<S_CODE_TOKEN>

However, though it crops the main image by `800x800` as provided, but it exists as `upload_dir/image.jpg` and NOT as `upload_dir/large/image.jpg`. And one more thing: in response object for the last case I see only `smallUrl => 'upload_dir/small/image.jpg'` - I mean the large image's url is not provided.

So, my initial goal is to have e.g. 2 image versions with given dimensions in their corresponding folders - and no original image. Am I missing something ?

Thanks
",hashmode,2016-04-29 12:23:40
3439,2016-04-29 14:27:00,"Here you are:

<S_CODE_TOKEN>
",blueimp,2016-04-29 12:23:40
3439,2016-04-29 15:16:47,"got it, thanks a lot )
",hashmode,2016-04-29 12:23:40
3438,2016-04-16 21:08:46,"Hi team,

excellent script and great work!!! I am trying to assign an action to the ""cancel"" button once a photo is selected (the one that appears in the preview section). I added an ID to this button, but still cant trigger it on event. I added another class to it, still not able. This action, works...but for the main button that appears initially: 
    $('button.cancel').click(function (e) {
        .... code here
    });

Can you please point out how I can assign an action on click for the preview panel ""cancel"" button?

thanks in advance

best regards
",Foundas,2016-04-19 15:27:23
3438,2016-04-19 15:27:23,"Please do not misuse the pull request feature for support requests:
https://github.com/blueimp/jQuery-File-Upload#support

That being said, the default demo included in the repo does already provide working cancel buttons.
",blueimp,2016-04-19 15:27:23
3437,2016-04-11 20:57:33,"Works with any locale config
You can try this uploading a file starts with ""µ"" letter 
",TeLiXj,2016-04-11 21:51:30
3437,2016-04-11 21:52:15,"Thanks, @TeLiXj!
",blueimp,2016-04-11 21:51:30
3436,2016-04-06 11:33:48,"""use strict"";(function(){if(window.TradingView&&window.TradingView.host&&!window.TradingView.reoloadTvjs){return}var TradingView={host:window.location.host.match(/eotpro.com|mrn.eotpro.net|tradingview.com|pyrrosinvestment.com/i)==null?""https://dwq4do82y8xi7.cloudfront.net"":""https://www.tradingview.com"",ideasHost:""https://www.tradingview.com"",chatHost:""https://www.tradingview.com"",gEl:function(id){return document.getElementById(id)},gId:function(){return""tradingview_""+((1+Math.random())_1048576|0).toString(16).substring(1)},onready:function(callback){if(window.addEventListener){window.addEventListener(""DOMContentLoaded"",callback,false)}else{window.attachEvent(""onload"",callback)}},css:function(css_content){var head=document.getElementsByTagName(""head"")[0];var style=document.createElement(""style"");var rules;style.type=""text/css"";if(style.styleSheet){style.styleSheet.cssText=css_content}else{rules=document.createTextNode(css_content);style.appendChild(rules)}head.appendChild(style)},bindEvent:function(o,ev,fn){if(o.addEventListener){o.addEventListener(ev,fn,false)}else if(o.attachEvent){o.attachEvent(""on""+ev,fn)}},unbindEvent:function(o,ev,fn){if(o.removeEventListener){o.removeEventListener(ev,fn,false)}else if(o.detachEvent){o.detachEvent(""on""+ev,fn)}},cloneSimpleObject:function(obj){if(null==obj||""object""!=typeof obj)return obj;var copy=obj.constructor();for(var attr in obj){if(obj.hasOwnProperty(attr)){copy[attr]=obj[attr]}}return copy},isArray:function(obj){return Object.prototype.toString.call(obj)===""[object Array]""},generateUtmForUrlParams:function(){return""utmsource=""+encodeURI(window.location.hostname)+""&utmmedium=""+encodeURI(window.location.host+window.location.pathname)},WidgetAbstract:function(){},MiniWidget:function(options){this.id=TradingView.gId();this.options={whitelabel:options.whitelabel||"""",width:TradingView.WidgetAbstract.prototype.fixSize(options.width)||300,height:TradingView.WidgetAbstract.prototype.fixSize(options.height)||400,symbols:options.symbols,tabs:options.tabs||"""",symbols_description:options.symbols_description||"""",customer:options.customer||"""",container:options.container_id||"""",large_chart_url:options.large_chart_url||"""",gridLineColor:options.gridLineColor||"""",fontColor:options.fontColor||"""",underLineColor:options.underLineColor||"""",trendLineColor:options.trendLineColor||"""",timeAxisBackgroundColor:options.timeAxisBackgroundColor||"""",activeTickerBackgroundColor:options.activeTickerBackgroundColor||"""",noGraph:options.noGraph||false,locale:options.locale,styleTickerActiveBg:options.styleTickerActiveBg||"""",styleTabActiveBorderColor:options.styleTabActiveBorderColor||"""",styleTickerBodyFontSize:options.styleTickerBodyFontSize||"""",styleTickerBodyFontWeight:options.styleTickerBodyFontWeight||"""",styleTickerHeadFontSize:options.styleTickerHeadFontSize||"""",styleTickerHeadFontWeight:options.styleTickerHeadFontWeight||"""",styleTickerChangeDownColor:options.styleTickerChangeDownColor||"""",styleTickerChangeUpColor:options.styleTickerChangeUpColor||"""",styleTickerLastDownBg:options.styleTickerLastDownBg||"""",styleTickerLastUpBg:options.styleTickerLastUpBg||"""",styleTickerSymbolColor:options.styleTickerSymbolColor||"""",styleTickerSymbolHoverTextDecoration:options.styleTickerSymbolHoverTextDecoration||"""",styleTickerActiveSymbolTextDecoration:options.styleTickerActiveSymbolTextDecoration||"""",styleTabsActiveBorderColor:options.styleTabsActiveBorderColor||"""",styleTabsNoBorder:options.styleTabsNoBorder||"""",styleWidgetNoBorder:options.styleWidgetNoBorder||""""};this.createWidget()},MediumWidget:function(options){this.id=TradingView.gId();this.options={container:options.container_id||"""",width:TradingView.WidgetAbstract.prototype.fixSize(options.width)||"""",height:TradingView.WidgetAbstract.prototype.fixSize(options.height)||"""",symbols:options.symbols,symbols_description:options.symbols_description||"""",large_chart_url:options.large_chart_url||"""",customer:options.customer||"""",gridLineColor:options.gridLineColor||"""",fontColor:options.fontColor||"""",underLineColor:options.underLineColor||"""",trendLineColor:options.trendLineColor||"""",timeAxisBackgroundColor:options.timeAxisBackgroundColor||"""",chartOnly:!!options.chartOnly,locale:options.locale,tradeItWidget:options.tradeItWidget};this.createWidget()},widget:function(options){this.id=TradingView.gId();var _url_params=TradingView.getUrlParams();var _symbol=options.tvwidgetsymbol||_url_params.tvwidgetsymbol||_url_params.symbol||options.symbol||""FX:SPX500"";var _logo=options.logo||"""";if(_logo.src){_logo=_logo.src}if(_logo){_logo.replace("".png"","""")}this.options={whitelabel:options.whitelabel||"""",width:options.width||800,height:options.height||500,symbol:_symbol,interval:options.interval||""1"",timezone:options.timezone||"""",autosize:options.autosize,hide_top_toolbar:options.hide_top_toolbar,hide_side_toolbar:options.hide_side_toolbar,allow_symbol_change:options.allow_symbol_change,save_image:options.save_image!==undefined?options.save_image:true,container:options.container_id||"""",toolbar_bg:options.toolbar_bg||""f4f7f9"",watchlist:options.watchlist||[],editablewatchlist:!!options.editablewatchlist,studies:options.studies||[],theme:options.theme||"""",style:options.style||"""",extended_hours:options.extended_hours===undefined?undefined:+options.extended_hours,eotprobtn:!!options.eotprobtn,details:!!options.details,news:!!options.news,calendar:!!options.calendar,hotlist:!!options.hotlist,hideideas:!!options.hideideas,hideideasbutton:!!options.hideideasbutton,widgetbar_width:+options.widgetbar_width||undefined,withdateranges:options.withdateranges||"""",customer:options.customer||_logo||"""",venue:options.venue,symbology:options.symbology,logo:_logo,show_popup_button:!!options.show_popup_button,popup_height:options.popup_height||"""",popup_width:options.popup_width||"""",studies_overrides:options.studies_overrides,overrides:options.overrides,enabled_features:options.enabled_features,disabled_features:options.disabled_features,publish_source:options.publish_source||"""",enable_publishing:options.enable_publishing,idea_url:options.idea_url,whotrades:options.whotrades||undefined,tradeItWidget:options.tradeItWidget,locale:options.locale,referral_id:options.referral_id,no_referral_id:options.no_referral_id,ref_landing_page:options.ref_landing_page};if(options.cme){this.options.customer=""cme""}if(options.news&&options.news.length){this.options.news_vendors=[];for(var i=0;i<options.news.length;i++){switch(options.news[i]){case""headlines"":case""stocktwits"":this.options.news_vendors.push(options.news[i])}}if(!this.options.news_vendors){delete this.options.news_vendors}}if(isFinite(options.widgetbar_width)&&options.widgetbar_width>0){this.options.widgetbar_width=options.widgetbar_width}this._ready_handlers=[];this.create()},chart:function(options){this.id=TradingView.gId();this.is_fullscreen=false;this.options={width:options.width||640,height:options.height||500,container:options.container_id||"""",realtime:options.realtime,chart:options.chart,locale:options.locale};this._ready_handlers=[];this.create()},WidgetPopup:function(options){this.id=TradingView.gId();this.options={callback:typeof options.callback===""function""?options.callback:function(){},width:options.width||800,height:options.height||600,symbol:options.symbol,interval:options.interval||""1"",toolbar_bg:options.toolbar_bg||""f4f7f9"",theme:options.theme||"""",hide_side_toolbar:!!options.hide_side_toolbar,locale:options.locale};this.create()},IdeasStreamWidget:function(options){this.id=TradingView.gId();this.options={container:options.container_id||"""",width:options.width||486,height:options.height||670,symbol:options.symbol||"""",username:options.username||"""",mode:options.mode||"""",userProfileUrl:options.userProfileUrl||"""",ideaUrl:options.ideaUrl||"""",publishSource:options.publishSource||"""",sort:options.sort||""trending"",stream:options.stream,interval:options.interval,time:options.time,waitSymbol:options.waitSymbol,hideDescription:options.hideDescription,startingCount:options.startingCount,bgColor:options.bgColor||"""",headerColor:options.headerColor||"""",borderColor:options.borderColor||"""",locale:options.locale};this._ready_handlers=[];this.createWidget(options)},IdeaWidget:function(options){this.id=TradingView.gId();this.options={container:options.container_id||"""",width:options.width||486,height:options.height||670,idea:options.idea||"""",userProfileUrl:options.userProfileUrl||"""",chartUrl:options.chartUrl||"""",whotrades:options.whotrades||undefined,locale:options.locale};this.createWidget(options)},ChatWidgetEmbed:function(options){this.id=TradingView.gId();this.options={container:options.container_id||"""",width:options.width||400,height:options.height||500,room:options.room||"""",whotrades:options.whotrades||undefined,locale:options.locale};this.createWidget(options)},UserInfoWidget:function(options){this.options={container:options.container_id||"""",width:options.width||1040,height:options.height||340,username:options.username||"""",locale:options.locale};this.createWidget(options)},QuotesProvider:function(options){var id=TradingView.gId();var options={container:options.container_id,symbols:options.symbols||[]};var widget_url=TradingView.host+""/embed-quotes-provider/?""+TradingView.generateUtmForUrlParams();var widget_html=""<iframe""+' id=""'+id+'""'+' src=""'+widget_url+'""'+' width=""0"" height=""0""'+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>';var iframe;var postMessage;addWidget(widget_html,options.container);iframe=TradingView.gEl(id);postMessage=TradingView.postMessageWrapper(iframe.contentWindow,id);TradingView.bindEvent(iframe,""load"",function(){options.symbols.forEach(resolveSymbol)});function resolveSymbol(symbolObj){var symbol=symbolObj.symbol;var success=symbolObj.success;var error=symbolObj.error;if(!symbol||!(success&&error))return;postMessage.post(iframe.contentWindow,""resolveSymbol"",{symbol:symbol});if(success){postMessage.on(""success""+symbol,function(data){success(data)})}if(error){postMessage.on(""error""+symbol,function(data){error(data)})}}}};TradingView.DependenciesManager=function(){};TradingView.DependenciesManager.prototype.scripts={};TradingView.DependenciesManager.prototype._loaded=function(script){for(var i in this.scripts[script].callbacks){this.scripts[script].callbacks[i]()}this.scripts[script].status=true;this.scripts[script].callbacks={}};TradingView.DependenciesManager.prototype.depends=function(scripts,cbid,cb){for(var i=0;i<scripts.length;i++){if(this.scripts[scripts[i]]&&this.scripts[scripts[i]].status===true){cb()}else if(this.scripts[scripts[i]]&&this.scripts[scripts[i]].status===false){this.scripts[scripts[i]].callbacks[cbid]=cb}else{this.scripts[scripts[i]]={status:false,script:document.createElement(""script""),callbacks:{}};this.scripts[scripts[i]].callbacks[cbid]=cb;this.scripts[scripts[i]].script.onload=this._loaded.bind(this,scripts[i]);this.scripts[scripts[i]].script.src=TradingView.host+scripts[i];document.body.appendChild(this.scripts[scripts[i]].script)}}};TradingView.dependenciesManager=new TradingView.DependenciesManager;TradingView.WidgetAbstract.prototype={fixSize:function(size){return/^[0-9]+(.|,[0-9])_$/.test(size)?size+""px"":size},width:function(){if(this.options.autosize){return""100%""}return TradingView.WidgetAbstract.prototype.fixSize(this.options.width)},height:function(){if(this.options.autosize){return""100%""}return TradingView.WidgetAbstract.prototype.fixSize(this.options.height)},addWrapperFrame:function(widgetCode,logoCode,widgetBgColor){var height=TradingView.WidgetAbstract.prototype.height.call(this);var width=TradingView.WidgetAbstract.prototype.width.call(this);var widgetBgColor=widgetBgColor||""transparent"";return'<div id=""'+this.id+'-wrapper"" style=""'+""position: relative;""+""box-sizing: content-box;""+""width: ""+width+"";""+""height: ""+height+"";""+""margin: 0 !important;""+""padding: 0 !important;""+""font-family:Arial,sans-serif;""+'"">'+'<div style=""'+""width: ""+width+"";""+""height: ""+height+"";""+""background: ""+widgetBgColor+"";""+""padding: 0 !important;""+'"">'+widgetCode+""</div>""+(logoCode||"""")+""</div>""},addFooterLogo:function(widgetCode,options){var greyText=(options||{}).greyText||""powered by"";var linkText=(options||{}).linkText||""arpicks.blogspot.com"";var href=(options||{}).href||""https://www.tradingview.com/"";return TradingView.WidgetAbstract.prototype.addWrapperFrame.call(this,widgetCode,'<div style=""'+""position:absolute;""+""display: block;""+""box-sizing: content-box;""+""height: 24px;""+""width: ""+TradingView.WidgetAbstract.prototype.width.call(this)+"";""+""bottom: 0;""+""left: 0;""+""margin: 0;""+""padding: 0;""+""font-family: Arial,sans-serif;""+'"">'+'<div style=""'+""display: block;""+""margin: 0 1px 1px 1px;""+""line-height: 7px;""+""box-sizing: content-box;""+""height: 11px;""+""padding: 6px 10px;""+""text-align: right;""+""background: #fff;""+'"">'+""<a""+' href=""'+href+""?""+TradingView.generateUtmForUrlParams()+'""'+' target=""_blank""'+' style=""'+""color: #0099d4;""+""text-decoration: none;""+""font-size: 11px;""+'""'+"">""+'<span style=""'+""color: #b4b4b4;""+""font-size: 11px;""+'"">'+greyText+""</span> ""+linkText+""</a>""+""</div>""+""</div>"",""#fff"")}};function numberToPx(value){return""""+value+""px""}var tradeItPub=""publisherdefault"";TradingView.TradeItWidget=function(container,options){this.options=options||{};this.injectStyles();this.wrapper=this.createWrapper(container)};TradingView.TradeItWidget.prototype={injectStyles:function(){if(!window.__tvtradeitstylesinjected){var css="".tradeit-button-buy, .tradeit-button-sell { ""+""width: auto !important; ""+""float: none !important; ""+""padding: 5px 7px !important; ""+""border-radius: 0 !important; ""+""line-height: 15px !important; ""+""} ""+"".tradeit-button-buy:active { background-color: #0da24d !important; } ""+"".tradeit-button-sell:active { background-color: #ed1b24 !important; } ""+"".tradeit-button-buy { margin-right: 5px !important; } ""+""tradeit { font-size: 13px !important; padding: 0 !important; } ""+""tradeit:after { display: none; } ""+"".tradeit-offscreen { position: absolute; top: -300px; }"";var head=document.head||document.getElementsByTagName(""head"")[0];var style=document.createElement(""style"");style.type=""text/css"";if(style.styleSheet){style.styleSheet.cssText=css}else{style.appendChild(document.createTextNode(css))}head.appendChild(style);window.__tvtradeitstylesinjected=true}},initExternalCode:function(){if(this.inited){return}window.tradeitPub=tradeItPub;var newScript=document.createElement(""script"");var body=document.getElementsByTagName(""body"")[0];var scripts=body.getElementsByTagName(""script"");for(var i=0;i<scripts.length;i++){var script=scripts[i];if(script.src&&script.src.indexOf(""tradingticket.com"")>=0){try{body.removeChild(script)}catch(e){}}}newScript.src=""https://www.tradingticket.com/widget/scripts/tradeit-inject.js?pub=""+tradeItPub;body.appendChild(newScript);this.inited=true},createWrapper:function(container){var wrapper=document.createElement(""div"");wrapper.style.width=numberToPx(105);wrapper.style.position=""absolute"";wrapper.style.top=""top""in this.options?numberToPx(this.options.top):""0"";if(""left""in this.options){wrapper.style.left=numberToPx(this.options.left)}else{wrapper.style.right=""right""in this.options?numberToPx(this.options.right):""0""}if(!this.options.ignoreContainerPosition){container.style.position=""relative""}container.appendChild(wrapper);return wrapper},setPosition:function(position){if(!this.wrapper||!position){return}[""top"",""bottom"",""left"",""right""].forEach(function(propName){if(propName in position){this.wrapper.style[propName]=numberToPx(position[propName])}},this)},setSymbol:function(symbol){if(!this.inited){this.symbol=symbol.trim();this.initExternalCode();var tradeit=document.createElement(""tradeit"");tradeit.setAttribute(""widget"",""buy-sell-stacked"");tradeit.setAttribute(""stock-symbol"",this.symbol);this.wrapper.appendChild(tradeit)}else if(this.symbol!=symbol){if(symbol==null){this.wrapper.display=""none"";return}this.symbol=symbol.trim();this.wrapper.display=""block"";var tradeit=this.wrapper.childNodes[0];tradeit.setAttribute(""stock-symbol"",this.symbol)}}};TradingView.UserInfoWidget.prototype={createWidget:function(){var widget_html=this.widgetCode();addWidget(widget_html,this.options.container)},widgetCode:function(){var query=TradingView.createUrlParams({username:this.options.username,locale:this.options.locale});var utm=""&""+TradingView.generateUtmForUrlParams();var widget_url=TradingView.ideasHost+""/user-info-widget/?""+query+utm;return""<iframe""+' src=""'+widget_url+'""'+(this.options.width?' width=""'+this.options.width+'""':"""")+(this.options.height?' height=""'+this.options.height+'""':"""")+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>'}};TradingView.ChatWidgetEmbed.prototype={createWidget:function(){var widget_code=this.widgetCode();widget_code=TradingView.WidgetAbstract.prototype.addFooterLogo.call(this,widget_code);addWidget(widget_code,this.options.container)},widgetCode:function(){var room=this.options.room?""#""+encodeURIComponent(this.options.room):"""";var query=TradingView.createUrlParams({whotrades:this.options.whotrades,locale:this.options.locale});var widget_url=TradingView.chatHost+""/chatwidgetembed/?""+query+room;return""<iframe""+' src=""'+widget_url+'""'+(this.options.width?' width=""'+this.options.width+'""':"""")+(this.options.height?' height=""'+this.options.height+'""':"""")+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>'}};TradingView.IdeaWidget.prototype={createWidget:function(){var widget_html=this.widgetCode();addWidget(widget_html,this.options.container);var self=this;var c=TradingView.gEl(this.id);this.postMessage=TradingView.postMessageWrapper(c.contentWindow,this.id);this.postMessage.on(""resize"",function(data){if(data.id==self.id){c.style.height=data.height+""px""}},true)},widgetCode:function(){var query=TradingView.createUrlParams({id:this.id,width:this.options.width,height:this.options.height,idea:this.options.idea,profile_url:this.options.userProfileUrl,chart_url:this.options.chartUrl,whotrades:this.options.whotrades,locale:this.options.locale});var utm=""&""+TradingView.generateUtmForUrlParams();var widget_url=TradingView.ideasHost+""/idea-popup/?""+query+utm;return'<iframe id=""'+this.id+'""'+' src=""'+widget_url+'""'+' width=""'+this.options.width+'""'+(this.options.height?' height=""'+this.options.height+'""':"""")+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>'},getSymbol:function(callback){this.postMessage.on(""symbolInfo"",callback)}};TradingView.IdeasStreamWidget.prototype={createWidget:function(){var widget_html=this.widgetCode();addWidget(widget_html,this.options.container);var self=this;var c=TradingView.gEl(this.id);this.postMessage=TradingView.postMessageWrapper(c.contentWindow,this.id);TradingView.bindEvent(c,""load"",function(){self._ready=true;for(var i=self._ready_handlers.length;i--;){self._ready_handlers[i].call(self)}});self.postMessage.on(""resize"",function(data){if(data.id==self.id){var minHeight=450;var height=Math.max(data.height,minHeight);c.style.height=height+""px""}},true)},widgetCode:function(){var options=this.options;var query=TradingView.createUrlParams({id:this.id,width:options.width,height:options.height,symbol:options.symbol,username:options.username,mode:options.mode,profile_url:options.userProfileUrl,idea_url:options.ideaUrl,publish_source:options.publishSource,sort:options.sort,stream:options.stream,interval:options.interval,time:options.time,wait_symbol:options.waitSymbol,request_host:TradingView.ideasHost,hide_desc:options.hideDescription,s_count:options.startingCount,bg_color:options.bgColor,h_color:options.headerColor,borderColor:options.borderColor,locale:options.locale});var widget_url=TradingView.host+""/ideaswidgetembed/?""+query;return'<iframe id=""'+this.id+'""'+' src=""'+widget_url+'""'+' width=""'+options.width+'""'+(options.height?' height=""'+options.height+'""':"""")+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>'},setSymbol:function(symbol){var c=TradingView.gEl(this.id);this.postMessage.post(c.contentWindow,""setSymbol"",symbol)},ready:function(callback){if(this._ready){callback.call(this)}else{this._ready_handlers.push(callback)}}};TradingView.MiniWidget.prototype={createWidget:function(){var widget_code=this.widgetCode();var options=this.options;var withWrapper=false;if(!options.noLogoOverlay&&!options.whitelabel){withWrapper=true;widget_code=TradingView.WidgetAbstract.prototype.addFooterLogo.call(this,widget_code,{greyText:""Quotes by"",linkText:""TradingView""})}addWidget(widget_code,options.container)},widgetCode:function(){var symbols="""";var tabs="""";var symbols_description="""";var site_path=""/miniwidgetembed/"";var width=this.options.width?""&width=""+encodeURIComponent(this.options.width):"""";var height=this.options.height?""&height=""+encodeURIComponent(this.options.height):"""";var no_graph=this.options.noGraph?""&noGraph=""+encodeURIComponent(this.options.noGraph):"""";var tradeit=this.options.tradeItWidget?""&tradeit=1"":"""";var locale=this.options.locale?""&locale=""+encodeURIComponent(this.options.locale):"""";var whitelabel=this.options.whitelabel?""&whitelabel=1"":"""";var utm=""&""+TradingView.generateUtmForUrlParams();var plain_params_list=[""large_chart_url"",""gridLineColor"",""fontColor"",""underLineColor"",""trendLineColor"",""activeTickerBackgroundColor"",""timeAxisBackgroundColor"",""locale"",""styleTickerActiveBg"",""styleTabActiveBorderColor"",""styleTickerBodyFontSize"",""styleTickerBodyFontWeight"",""styleTickerHeadFontSize"",""styleTickerHeadFontWeight"",""styleTickerChangeDownColor"",""styleTickerChangeUpColor"",""styleTickerLastDownBg"",""styleTickerLastUpBg"",""styleTickerSymbolColor"",""styleTickerSymbolHoverTextDecoration"",""styleTickerActiveSymbolTextDecoration"",""styleTabsActiveBorderColor"",""styleTabsNoBorder"",""styleWidgetNoBorder""];var plain_params="""";for(var i=plain_params_list.length-1;i>=0;i--){var param_name=plain_params_list[i];var param_value=this.options[param_name];plain_params+=param_value?""&""+param_name+""=""+encodeURIComponent(param_value):""""}var prepareSymbols=function(symbols){var _symbols=[];for(var i=0;i<symbols.length;i++){var _s=symbols[i];if(TradingView.isArray(_s)){var customSymbolName=encodeURIComponent(_s[0]);var trueSymbolName=encodeURIComponent(_s[1]);_symbols.push(customSymbolName);symbols_description+=""&""+customSymbolName+""=""+trueSymbolName}else if(typeof _s===""string""){_symbols.push(encodeURIComponent(_s))}}return _symbols.join("","")};if(this.options.tabs){for(var i=0,tl=this.options.tabs.length;i<tl;i++){var tab=this.options.tabs[i];if(this.options.symbols[tab]){symbols+=(symbols?""&"":"""")+encodeURIComponent(tab)+""=""+prepareSymbols(this.options.symbols[tab])}}tabs=""&tabs=""+encodeURIComponent(this.options.tabs.join("",""))}else{if(this.options.symbols){symbols=""symbols=""+prepareSymbols(this.options.symbols)}}if(this.options.symbols_description){for(var key in this.options.symbols_description){symbols_description+=""&""+encodeURIComponent(key)+""=""+encodeURIComponent(this.options.symbols_description[key])}}if(this.options.customer){site_path=""/""+this.options.customer+site_path}var widget_url=TradingView.host+site_path+""?""+symbols+tabs+symbols_description+plain_params+width+height+no_graph+tradeit+locale+whitelabel+utm;return'<iframe id=""'+this.id+'""'+' src=""'+widget_url+'""'+' width=""'+this.options.width+'""'+(this.options.height?' height=""'+this.options.height+'""':"""")+' frameborder=""0""'+' allowTransparency=""true""'+' scrolling=""no""'+' style=""margin: 0 !important; padding: 0 !important;""'+""></iframe>""},remove:function(){var widget=TradingView.gEl(""tradingview_widget"");widget.parentNode.removeChild(widget)}};TradingView.MediumWidget.prototype={createWidget:function(){var widget_code=this.widgetCode();var withWrapper=false;if(!this.options.noLogoOverlay){withWrapper=true;widget_code=TradingView.WidgetAbstract.prototype.addFooterLogo.call(this,widget_code,{greyText:""Quotes by"",linkText:""TradingView""})}addWidget(widget_code,this.options.container);if(this.options.tradeItWidget){this.postMessage=TradingView.postMessageWrapper(TradingView.gEl(this.id).contentWindow,this.id);var noTabs=this.options.symbols.length<2;var chartOnly=this.options.chartOnly;var options={};if(noTabs){options.top=20}else{options.top=48}if(chartOnly){options.right=10}else{options.left=130}if(noTabs&&chartOnly){options.top=10}if(!noTabs&&chartOnly){options.top=1}var id=this.options.container;if(withWrapper){id=this.id+""-wrapper""}var tradeItWidget=new TradingView.TradeItWidget(TradingView.gEl(id),options);this.postMessage.on(""mediumWidgetSymbolChange"",function(symbolPositionObject){tradeItWidget.setPosition(symbolPositionObject.position);tradeItWidget.setSymbol(symbolPositionObject.symbol)})}},widgetCode:function(){var symbols_description="""";var symbols=""symbols=""+prepareSymbols(this.options.symbols);var width=""&width=""+encodeURIComponent(this.options.width);var height=""&height=""+encodeURIComponent(this.options.height);var utm=""&""+TradingView.generateUtmForUrlParams();var tradeit=this.options.tradeItWidget?""&tradeit=1"":"""";function prepareSymbols(symbols){var _symbols=[];for(var i=0;i<symbols.length;i++){var _s=symbols[i];if(TradingView.isArray(_s)){var customSymbolName=encodeURIComponent(_s[0]);var trueSymbolName=encodeURIComponent(_s[1]);_symbols.push(customSymbolName);symbols_description+=""&""+customSymbolName+""=""+trueSymbolName}else if(typeof _s===""string""){_symbols.push(encodeURIComponent(_s))}}return _symbols.join("","")}var plain_params_list=[""gridLineColor"",""fontColor"",""underLineColor"",""trendLineColor"",""activeTickerBackgroundColor"",""timeAxisBackgroundColor"",""locale""];var plain_params="""";for(var i=plain_params_list.length-1;i>=0;i--){var param_name=plain_params_list[i];var param_value=this.options[param_name];plain_params+=param_value?""&""+param_name+""=""+encodeURIComponent(param_value):""""}var chart_only=this.options.chartOnly?""&chartOnly=1"":"""";var site_path=""/mediumwidgetembed/"";if(this.options.customer){site_path=""/""+this.options.customer+site_path}var widget_url=TradingView.host+site_path+""?""+symbols+symbols_description+plain_params+chart_only+width+height+utm+tradeit;return'<iframe id=""'+this.id+'""'+' src=""'+widget_url+'""'+' style=""'+""margin: 0 !important; ""+""padding: 0 !important; ""+(this.options.width?""width: ""+this.options.width+""; "":"""")+(this.options.height?""height: ""+this.options.height+"";"":"""")+'""'+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>'},remove:function(){var widget=TradingView.gEl(""tradingview_widget"");widget.parentNode.removeChild(widget)}};TradingView.widget.prototype={create:function(){var widget_html=this.render();var self=this;var c;if(!this.options.noLogoOverlay){widget_html=TradingView.WidgetAbstract.prototype.addWrapperFrame.call(this,widget_html)}addWidget(widget_html,this.options.container);c=TradingView.gEl(this.id);this.postMessage=TradingView.postMessageWrapper(c.contentWindow,this.id);TradingView.bindEvent(c,""load"",function(){self.postMessage.get(""widgetReady"",{},function(){var i;self._ready=true;for(i=self._ready_handlers.length;i--;){self._ready_handlers[i].call(self)}})});if(this.options.tradeItWidget){var container=TradingView.gEl(this.options.container);var options={};if(!container){container=document;options.ignoreContainerPosition=true}var shift=34;var tradeItWidget=new TradingView.TradeItWidget(container,{left:0});self.postMessage.on(""buttonsPositionSet"",function(position){tradeItWidget.setPosition(position)});self.postMessage.on(""symbolChange"",function(symbol){tradeItWidget.setSymbol(symbol)})}self.postMessage.on(""logoCreated"",function(data){if(data.left&&data.bottom&&data.width&&data.height&&data.href){if(self._logoOverlay){self._logoOverlay.parentNode.removeChild(self._logoOverlay);delete self._logoOverlay}var a=document.createElement(""a"");if(data.text){a.innerHTML=data.text;a.style.color=""transparent""}a.style.position=""absolute"";a.style.display=""inline-block"";a.style.left=data.left;a.style.bottom=data.bottom;a.style.width=data.width;a.style.height=data.height;a.style.backgroundColor=""transparent"";a.href=data.href;a.setAttribute(""target"",""_blank"");self._logoOverlay=a;TradingView.gEl(self.id+""-wrapper"").appendChild(a)}});self.postMessage.on(""setLogoOverlayVisibility"",function(data){if(self._logoOverlay&&data&&typeof data.visible==""boolean""){self._logoOverlay.style.display=data.visible?""inline-block"":""none""}});self.postMessage.on(""openChartInPopup"",function(data){var urlOptions=TradingView.cloneSimpleObject(self.options);var chartProps=[""symbol"",""interval""];for(var i=chartProps.length-1;i>=0;i--){var name=chartProps[i];var value=data[name];if(value){urlOptions[name]=value}}urlOptions.show_popup_button=false;var width=self.options.popup_width||900;var height=self.options.popup_height||600;var left=(screen.width-width)/2;var top=(screen.height-height)/2;window.open(self.generateUrl(urlOptions),""_blank"",""resizable=yes, top=""+top+"", left=""+left+"", width=""+width+"", height=""+height)})},ready:function(callback){if(this._ready){callback.call(this)}else{this._ready_handlers.push(callback)}},render:function(){var url=this.generateUrl();return'<iframe id=""'+this.id+'""'+' src=""'+url+'""'+(this.options.autosize?' style=""width: 100%; height: 100%; margin: 0 !important; padding: 0 !important;""':' width=""'+this.options.width+'""'+' height=""'+this.options.height+'""')+' frameborder=""0"" allowTransparency=""true"" scrolling=""no"" allowfullscreen></iframe>'},generateUrl:function(options){var options=options||this.options;var site_path;if(options.customer===""cme""){site_path=""/cmewidgetembed/""}else if(options.customer){site_path=""/""+options.customer+""/widgetembed/""}else{site_path=""/widgetembed/""}function arg(name,content,argNameOverride){argNameOverride=argNameOverride||name;return options[name]?""&""+argNameOverride+""=""+content:""""}function jsonArg(name,content,defaultValue){defaultValue=defaultValue||{};return""&""+name+""=""+(options[name]?encodeURIComponent(JSON.stringify(content)):encodeURIComponent(JSON.stringify(defaultValue)))}var host=options.enable_publishing?TradingView.ideasHost:TradingView.host;var url=host+site_path+""?symbol=""+encodeURIComponent(options.symbol)+""&interval=""+encodeURIComponent(options.interval)+(options.whitelabel?""&whitelabel=1"":"""")+(options.hide_top_toolbar?""&hidetoptoolbar=1"":"""")+(typeof options.hide_side_toolbar===""undefined""?"""":""&hidesidetoolbar=""+(options.hide_side_toolbar?""1"":""0""))+(typeof options.allow_symbol_change===""undefined""?"""":""&symboledit=""+(options.allow_symbol_change?""1"":""0""))+(!options.save_image?""&saveimage=0"":"""")+""&toolbarbg=""+options.toolbar_bg.replace(""#"","""")+(options.watchlist&&options.watchlist.length&&options.watchlist.join?""&watchlist=""+encodeURIComponent(options.watchlist.join("""")):"""")+arg(""editablewatchlist"",""1"")+arg(""details"",""1"")+arg(""calendar"",""1"")+arg(""hotlist"",""1"")+arg(""news"",""1"")+(options.news_vendors?""&newsvendors=""+encodeURIComponent(options.news_vendors.join("""")):"""")+(options.studies?""&studies=""+encodeURIComponent(options.studies.join("""")):"""")+arg(""widgetbar_width"",options.widgetbar_width,""widgetbarwidth"")+arg(""hideideas"",""1"")+arg(""theme"",encodeURIComponent(options.theme))+arg(""style"",encodeURIComponent(options.style))+(options.extended_hours===undefined?"""":""&extended_hours=""+options.extended_hours)+arg(""timezone"",encodeURIComponent(options.timezone))+arg(""eotprobtn"",""1"")+arg(""hideideasbutton"",""1"")+arg(""withdateranges"",""1"")+arg(""show_popup_button"",""1"",""showpopupbutton"")+jsonArg(""studies_overrides"",options.studies_overrides,{})+jsonArg(""overrides"",options.overrides,{})+jsonArg(""enabled_features"",options.enabled_features,[])+jsonArg(""disabled_features"",options.disabled_features,[])+(options.show_popup_button?""&showpopupbutton=1"":"""")+(options.publish_source?""&publishsource=""+encodeURIComponent(options.publish_source):"""")+(options.enable_publishing?""&enablepublishing=""+encodeURIComponent(options.enable_publishing):"""")+(options.idea_url?""&idea_url=""+encodeURIComponent(options.idea_url):"""")+(options.venue?""&venue=""+encodeURIComponent(options.venue):"""")+(options.symbology?""&symbology=""+encodeURIComponent(options.symbology):"""")+(options.whotrades?""&whotrades=""+encodeURIComponent(options.whotrades):"""")+(options.tradeItWidget?""&tradeit=1"":"""")+(options.locale?""&locale=""+options.locale:"""")+(options.referral_id?""&referral_id=""+options.referral_id:"""")+(options.no_referral_id?""&no_referral_id=1"":"""")+(options.ref_landing_page?""&ref_landing_page=""+options.ref_landing_page:"""")+""&""+TradingView.generateUtmForUrlParams();
return url},image:function(callback){this.postMessage.get(""imageURL"",{},function(id){var link=TradingView.host+""/x/""+id+""/"";callback(link)})},subscribeToQuote:function(callback){var c=TradingView.gEl(this.id);this.postMessage.post(c.contentWindow,""quoteSubscribe"");this.postMessage.on(""quoteUpdate"",callback)},saveChart:function(callback){this.postMessage.get(""chartID"",{},callback)},getSymbolInfo:function(callback){this.postMessage.get(""symbolInfo"",{},callback)},remove:function(){var widget=TradingView.gEl(this.id);widget.parentNode.removeChild(widget)},reload:function(){var widget=TradingView.gEl(this.id);var parent=widget.parentNode;parent.removeChild(widget);parent.innerHTML=this.render()}};TradingView.chart.prototype={create:function(){var chart_html=this.render();var self=this;var a;var c;var f;if(!TradingView.chartCssAttached){TradingView.css(this.renderCss());TradingView.chartCssAttached=true}addWidget(chart_html,this.options.container);c=TradingView.gEl(this.id);a=TradingView.gEl(this.id+""_actions"");f=TradingView.gEl(this.id+""_fullscreen"");TradingView.bindEvent(c,""load"",function(){var i;a.style.display=""block"";self._ready=true;for(i=self._ready_handlers.length;i--;){self._ready_handlers[i].call(self)}});TradingView.bindEvent(f,""click"",function(){self.toggleFullscreen()});TradingView.onready(function(){var rf=false;if(document.querySelector&&document.querySelector('a[href$=""/v/'+self.options.chart+'/""]')){rf=true}if(!rf){var anchors=document.getElementsByTagName(""a"");var re_short=new RegExp(""/v/""+self.options.chart+""/$"");var re_full=new RegExp(""/chart/([0-9a-zA-Z:+_-/()]+)/""+self.options.chart);var re_script=new RegExp(""/script/""+self.options.chart);for(var i=0;i<anchors.length;i++){if(re_short.test(anchors[i].href)||re_full.test(anchors[i].href)){rf=true;break}}}if(rf){c.src+=""#nolinks"";c.name=""nolinks""}});this.postMessage=TradingView.postMessageWrapper(c.contentWindow,this.id)},ready:TradingView.widget.prototype.ready,renderCss:function(){var url=TradingView.host;return"".tradingview-widget {position: relative;}.tradingview-widget .chart-actions-float {display: none; position: absolute; z-index: 5; top: 0; right: 0; background: #fff; border: 1px solid #bfbfbf; border-radius: 0 3px 0 3px; padding: 3px 3px 3px 3px; height: 23px;}.tradingview-widget .chart-actions-float .tradingview-button {font-weight: normal; font-size: 11px; padding: 3px 5px;}.tradingview-widget .chart-actions-float .status-picture {margin: 4px 1px 0 3px; border: none !important; padding: 0 !important; background: none !important;}.tradingview-widget .chart-status-picture {position: absolute; z-index: 50;}.tradingview-widget .icon {display: inline-block; background: url('""+url+""/static/images/icons.png') 0 0 no-repeat; position: relative;}.tradingview-widget .icon-action-realtime{background-position: -120px -80px; width: 15px; height: 15px; left: -1px; vertical-align: top;}.tradingview-widget .icon-action-zoom{background-position: -100px -80px; width: 15px; height: 15px; left: -1px; vertical-align: top;}.tradingview-widget .exit-fullscreen {z-index: 16; position: fixed; top: -1px; left: 50%; display: none; opacity: 0.6; background: #f9f9f9; color: #848487; border-radius: 0 0 3px 3px; border: 1px solid #b2b5b8; font-size: 11px; width: 116px; font-weight: bold; padding: 2px 4px; cursor: default; margin: 0 0 0 -62px;}.tradingview-widget .exit-fullscreen:hover {opacity: 1;}.tradingview-widget .tradingview-button {padding: 6px 10px 5px; height: 15px; display: inline-block; vertical-align: top; text-decoration: none !important;color: #6f7073; cursor: pointer;border: 1px solid #b2b5b8; font: bold 12px Calibri, Arial; background: url('""+url+""/static/images/button-bg.png') 0 0 repeat-x; border-radius: 3px; -moz-border-radius: 3px; -webkit-user-select: none;-moz-user-select: none;-o-user-select: none;user-select: none; box-sizing: content-box; -moz-box-sizing: content-box; -webkit-box-sizing: content-box;}.tradingview-widget .tradingview-button:hover, ._tv-button:active {background-position: 0 -26px; color: #68696b;}""},render:function(){var url=TradingView.host;var queryString=""?method=script""+(this.options.locale?""&locale=""+encodeURIComponent(this.options.locale):"""");return'<div class=""tradingview-widget"" style=""width: '+this.options.width+""px; height: ""+this.options.height+'px;"">'+'<div id=""'+this.id+'_actions"" class=""chart-actions-float"">'+'<a id=""'+this.id+'_fullscreen"" class=""tradingview-button""><span class=""icon icon-action-zoom""></span> Full Screen</a> '+'<a id=""'+this.id+'_live"" class=""tradingview-button"" target=""_blank"" href=""https://www.tradingview.com/chart/?clone='+this.options.chart+'"">'+'<span class=""icon icon-action-realtime""></span> Make It Live'+""</a> ""+""</div>""+'<iframe id=""'+this.id+'""'+' src=""'+url+""/embed/""+this.options.chart+""/""+queryString+""&""+TradingView.generateUtmForUrlParams()+'""'+' width=""'+this.options.width+'""'+' height=""'+this.options.height+'""'+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>'+""</div>""},windowSize:function(){var w=0;var h=0;if(document.documentElement&&(document.documentElement.clientWidth||document.documentElement.clientHeight)){w=document.documentElement.clientWidth;h=document.documentElement.clientHeight}else if(typeof window.innerWidth==""number""){w=window.innerWidth;h=window.innerHeight}else if(document.body&&(document.body.clientWidth||document.body.clientHeight)){w=document.body.clientWidth;h=document.body.clientHeight}return{width:w,height:h}},toggleFullscreen:function(){var frame=TradingView.gEl(this.id);var actions=TradingView.gEl(this.id+""_actions"");var ws=this.windowSize();if(this.is_fullscreen){frame.style.position=""static"";frame.style.width=this.options.width+""px"";frame.style.height=this.options.height+""px"";frame.style.zIndex=""auto"";frame.style.backgroundColor=""transparent"";actions.style.position=""absolute"";actions.style.zIndex=""auto"";TradingView.unbindEvent(document,""keydown"",this.getKeyHandler())}else{frame.style.position=""fixed"";frame.style.width=ws.width+""px"";frame.style.height=ws.height+""px"";frame.style.left=""0px"";frame.style.top=""0px"";frame.style.zIndex=""1000000"";frame.style.backgroundColor=""#fff"";actions.style.position=""fixed"";actions.style.zIndex=""1000001"";TradingView.bindEvent(document,""keydown"",this.getKeyHandler())}this.is_fullscreen=!this.is_fullscreen},getKeyHandler:function(){var that=this;if(!this.keyHandler){this.keyHandler=function(e){if(e.keyCode==27){that.toggleFullscreen()}}}return this.keyHandler},getSymbolInfo:function(callback){this.postMessage.get(""symbolInfo"",{},callback)}};TradingView.showSignIn=function(options,callback){TradingView.dependenciesManager.depends([""/static/js/external/spin.min.js""],""authWidget"",function(){var shadowBox=document.createElement(""div"");var spinnerContainer=document.createElement(""div"");shadowBox.appendChild(spinnerContainer);new Spinner({lines:17,length:0,width:3,radius:20,corners:1,color:""#00A2E2"",opacity:.3,direction:1,speed:1.5,trail:60,fps:20,shadow:false,hwaccel:false,top:""50%"",left:""50%"",zIndex:""auto""}).spin(spinnerContainer);shadowBox.style.cssText=""position: fixed;""+""left: 0;""+""top: 0;""+""width: 100%;""+""height: 100%;""+""background: rgba(0, 0, 0, 0.5);""+""z-index: 120;""+""-webkit-transform: translate3d(0, 0, 0);"";shadowBox.addEventListener(""click"",function(){document.body.removeChild(shadowBox)});document.body.appendChild(shadowBox);var id=TradingView.gId();var query=TradingView.createUrlParams({id:id,utmSourceOverride:options.utmSourceOverride});var widget_url=TradingView.ideasHost+""/authwidget/?""+query;var iframeOptions={width:""470px"",height:""650px""};var widget_html='<iframe id=""'+id+'""'+' src=""'+widget_url+'""'+' width=""'+iframeOptions.width+'""'+(iframeOptions.height?' height=""'+iframeOptions.height+'""':"""")+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>';var container=document.createElement(""div"");container.innerHTML=widget_html;container.style.cssText=""position: absolute;""+""left: 50%;""+""top: 50%;""+""margin-top: -325px;""+""margin-left: -235px;"";shadowBox.appendChild(container);var c=TradingView.gEl(id);var postMessage=TradingView.postMessageWrapper(c.contentWindow,id);var onClose=function(data){if(data.id==id){document.body.removeChild(shadowBox);if(data.user){callback(data.user)}postMessage.off(""close"",onClose)}};postMessage.on(""close"",onClose,true);postMessage.on(""widgetLoad"",function(){spinnerContainer.style.display=""none""})})};TradingView.isSignedIn=function(options,callback){var id=TradingView.gId();var query=TradingView.createUrlParams({id:id});var widget_url=TradingView.ideasHost+""/isauthwidget/?""+query;var widget_html='<iframe id=""'+id+'""'+' src=""'+widget_url+'""'+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>';var container=document.createElement(""div"");container.innerHTML=widget_html;document.body.appendChild(container);var c=TradingView.gEl(id);var postMessage=TradingView.postMessageWrapper(c.contentWindow,id);var onClose=function(data){if(data.id==id){document.body.removeChild(container);callback(data.user);postMessage.off(""close"",onClose)}};postMessage.on(""close"",onClose,true)};TradingView.onLoginStateChange=function(options,callback){var id=TradingView.gId();var query=TradingView.createUrlParams({id:id});var widget_url=TradingView.ideasHost+""/loginstatewidget/?""+query;var widget_html='<iframe id=""'+id+'""'+' src=""'+widget_url+'""'+' frameborder=""0"" allowTransparency=""true"" scrolling=""no""></iframe>';var container=document.createElement(""div"");container.innerHTML=widget_html;document.body.appendChild(container);var c=TradingView.gEl(id);var postMessage=TradingView.postMessageWrapper(c.contentWindow,id);var onLoginStateChange=function(data){if(data.id==id){callback(data.user)}};postMessage.on(""loginStateChange"",onLoginStateChange,true)};TradingView.postMessageWrapper=function(){var get_handlers={};var on_handlers={};var client_targets={};var on_target;var call_id=0;var post_id=0;var provider_id=""TradingView"";if(window.addEventListener){window.addEventListener(""message"",function(e){var msg;try{msg=JSON.parse(e.data)}catch(error){return}if(!msg.provider||msg.provider!=provider_id){return}if(msg.type==""get""){if(!on_handlers[msg.name]){return}on_handlers[msg.name].forEach(function(on_handler){if(typeof on_handler===""function""){on_handler.call(msg,msg.data,function(result){var reply={id:msg.id,type:""on"",name:msg.name,client_id:msg.client_id,data:result,provider:provider_id};on_target.postMessage(JSON.stringify(reply),""_"")})}})}else if(msg.type==""on""){if(get_handlers[msg.client_id]&&get_handlers[msg.client_id][msg.id]){get_handlers[msg.client_id][msg.id].call(msg,msg.data);delete get_handlers[msg.client_id][msg.id]}}else if(msg.type==""post""){if(!on_handlers[msg.name]){return}on_handlers[msg.name].forEach(function(on_handler){if(typeof on_handler===""function""){on_handler.call(msg,msg.data,function(){})}})}})}return function(target,client_id){get_handlers[client_id]={};client_targets[client_id]=target;on_target=target;return{on:function(name,callback,keepPrevious){if(!on_handlers[name]||!keepPrevious){on_handlers[name]=[]}on_handlers[name].push(callback)},off:function(name,callback){if(!on_handlers[name]){return false}var index=on_handlers[name].indexOf(callback);if(index>-1){on_handlers[name].splice(index,1)}},get:function(name,data,callback){var msg={id:call_id++,type:""get"",name:name,client_id:client_id,data:data,provider:provider_id};get_handlers[client_id][msg.id]=callback;client_targets[client_id].postMessage(JSON.stringify(msg),""_"")},post:function(target,name,data){var msg={id:post_id++,type:""post"",name:name,data:data,provider:provider_id};if(target&&typeof target.postMessage===""function""){target.postMessage(JSON.stringify(msg),""_"")}}}}}();TradingView.getUrlParams=function(){var pl=/+/g;var search=/([^&=]+)=?([^&]*)/g;var query=window.location.search.substring(1);var match=search.exec(query);var decode=function(s){return decodeURIComponent(s.replace(pl,"" ""))};var result={};while(match){result[decode(match[1])]=decode(match[2]);match=search.exec(query)}return result};TradingView.createUrlParams=function(data){var result=[];for(var d in data){if(data.hasOwnProperty(d)&&data[d]!=null){result.push(encodeURIComponent(d)+""=""+encodeURIComponent(data[d]))}}return result.join(""&"")};TradingView.WidgetPopup.prototype={create:function(){var self=this;var width=this.options.width||900;var height=this.options.height||600;var left=(screen.width-width)/2;var top=(screen.height-height)/2;var url=TradingView.host+""/widgetpopup/""+""?symbol=""+encodeURIComponent(this.options.symbol)+""&interval=""+encodeURIComponent(this.options.interval)+""&toolbarbg=""+this.options.toolbar_bg.replace(""#"","""")+(this.options.theme?""&theme=""+encodeURIComponent(this.options.theme):"""")+""&hidesidetoolbar=""+(this.options.hide_side_toolbar?""1"":""0"")+(this.options.locale?""&locale=""+encodeURIComponent(this.options.locale):"""")+""&""+TradingView.generateUtmForUrlParams();this.popupWindow=window.open(url,"""",""resizable=yes,directories=no,location=no,toolbar=no,menubar=no,scrollbars=yes, top=""+top+"", left=""+left+"", width=""+width+"", height=""+height);this.postMessage=TradingView.postMessageWrapper(this.popupWindow,this.id);this.postMessage.on(""pushChartId"",function(data){var chartID=data;self.onPushChartId(chartID)});if(typeof this.popupWindow===""function""){this.popupWindow.focus()}},onPushChartId:function(chartID){var self=this;self.options.callback(chartID);this.popupWindow.close()}};var addWidget=function(widgetHtml,containerId){var container=TradingView.gEl(containerId);if(container){container.innerHTML=widgetHtml}else{document.write(widgetHtml)}};if(window.TradingView&&jQuery){jQuery.extend(window.TradingView,TradingView)}else{window.TradingView=TradingView}})();
",shriramraja04,2016-04-19 09:46:30
3435,2016-04-05 06:03:46,".pipe() was deprecated in jQuery 1.8.
",mattiasw,2016-04-11 17:40:48
3435,2016-04-11 17:41:04,"Thanks, @mattiasw!
",blueimp,2016-04-11 17:40:48
3434,2016-03-25 09:40:05,"The main problem to handle large files is 32 bit architecture. And the file uploader fails even while chunked upload due to problem to get and handle file size properly. I had intention to solve the problem for chunked upload. I have described the problems I have faced and solutions below:

№1 - Problem
It is known PHP unable to define correct filesize by native **filesize()** function for files over 2GB on 32-bit systems. As I have discovered, this problem may also occurs on some 64-bit systems: http://stackoverflow.com/questions/24252849/php-x64-still-returns-wrong-filesize

№1 - Solution
We are able to get correct file size as a string. Unfortunately there is no native function in PHP, but there are few tricks which represented in **real_filesize()** method. It is based on the project https://github.com/jkuchar/BigFileTools by Jan Kuchar and calculates file size using fseek($fp, 0, SEEK_END) and ftell() for 64-bit and CURL for 32-bit platforms. Yes, it is REQUIRED you have CURL lib installed for 32-bit to get correct file size. I have also found some solution based on exec() / shell_exec(), so the method could be extended in future.

№2 - Problem
PHP allows to compare correctly ""bigint"" in string representation, but we are not able to perform math operations upon such strings. For the uploader needs it is required to subtract 1 byte in ""generate_response()"" method to create correct range for chunked upload.

№2 - Solution
I have modified ""generate_response()"" method. If you PHP is compiled with GMP or BCMath extension, the range will be calculated with one of them. But these extensions are NOT mandatory, because I have implemented a workaround that covers the case to subtract 1 byte of  ""bigint"" string.

**To recap:**
- should work fine on 64-bit platforms
- required CURL lib installer to handle 32-bit platforms
- GMP or BCMath ext is recommended but not mandatory

I have tested my solution on 32-bit Windows platform and I would be glad if you also perform some tests to ensure if my solution is viable for other cases. Thank you for the great file uploader!
",servocoder,2016-10-02 17:19:51
3434,2016-04-11 21:48:43,"Thanks for your contribution, @servocoder.

Am I correct in the assumption that this issue mainly affects 32bit Windows servers?

And could you confirm that, instead of using the curl workaround, the following function (cop+pasted from a php.net comment) will also fix the issue on those platforms?

<S_CODE_TOKEN>

Taken from http://php.net/manual/en/function.filesize.php#115792
",blueimp,2016-10-02 17:19:51
3434,2016-04-12 07:38:52,"This should affect all 32bit platforms, if any besides Windows. In my case I have 64-bit Windows on my localhost, but 32-bit PHP installed, and I face the same issue, because native 64-bit integers require 64-bit hardware AND the 64-bit version of PHP. In any other case you will face the problem with uploading files > 2GB (perhaps >4GB owing to `fix_integer_overflow()` method implemented).

As for the `my_filesize` function you have shared: it uses fseek() and ftell() trick, but this solution can handle files up to 4GB only. I have just checked this function and can confidently confirm that it fails for files over 4GB. The fseek / ftell problem was also mentioned at stackoverflow, you can find it following the links I gave in my initial comment.

https://github.com/jkuchar/BigFileTools project utilizes not only CURL workaround. It's looking for available driver (CURL / COM / Exec, etc.), and uses it to get correct filesize. To not include all the library I implemented **real_filesize()** method which contains solutions from CurlDriver and NativeSeekDriver of BigFileTools. Thats why I mentioned that list of workarounds could be extended, but the current solution of my PR works great on my localhost system with files over 4GB.

Please, test it on all platforms that are available for you.
",servocoder,2016-10-02 17:19:51
3434,2016-04-19 16:33:48,"Thanks for the explanations.
I have some minor comments on the code, but when the mentioned issues are fixed, I'll merge it.
",blueimp,2016-10-02 17:19:51
3434,2016-05-07 16:50:02,"Regarding to your notes:

> Can you confirm that with this change, the later comparison checks are still testing numbers against each other?

Yes, I have tested it on both Linux and Windows for chunked and regular uploads and it works well.

> With the added code, this whole block should be moved to separate method.

I agree, I have a lack of time currently, but I will try to make some refactoring soon.
",servocoder,2016-10-02 17:19:51
3434,2016-05-09 00:52:42,"Alright, just drop a note here when you've updated the code.
",blueimp,2016-10-02 17:19:51
3434,2016-08-29 10:59:46,"@servocoder Are you still working on this?
",blueimp,2016-10-02 17:19:51
3434,2016-10-02 17:19:51,"Closing this as there has been no reply in over a month.
Feel free to reopen with updated code and replies to the outstanding open questions.
",blueimp,2016-10-02 17:19:51
3433,2016-02-26 11:15:26,"It did already for me once before I noticed what the issue was, if the invisible file chooser isn't big enough then clicking on the formatted button might not do anything (depending on browser, e.g. happens on IE<10 if I remember correctly).
",Herst,2016-02-26 11:16:42
3433,2016-02-26 11:16:51,"Thanks @Herst !
",blueimp,2016-02-26 11:16:42
3432,2016-02-24 11:24:47,"The latest release of blueimp-load-image does not provide the module load-image-ios anymore
",rhymes,2016-02-24 16:37:43
3432,2016-02-24 16:38:00,"Thanks @rhymes!
",blueimp,2016-02-24 16:37:43
3431,2016-02-16 20:01:41,,ThomasLandauer,2016-02-24 18:44:18
3431,2016-02-24 18:44:24,"Thanks @ThomasLandauer!
",blueimp,2016-02-24 18:44:18
3430,2016-02-05 06:50:11,"to make it work with browserify, module ""load-image"" does not exist
",ningliu,2016-02-24 18:40:42
3430,2016-02-24 18:40:20,"Thanks for the contribution, @ningliu.
",blueimp,2016-02-24 18:40:42
3429,2016-01-17 09:41:37,"Example, how to integrate Cropper plugin for upload files.
No need for extra data or operations to send to server. Result from Cropper is added as new Blob file to upload plugin.
",jansarmir,2016-02-24 18:36:37
3429,2016-01-28 22:48:38,"Hello, I've a mistake...
doesn't work whit IE9, i don´t know if there are config problem or code issue, can you say me how configure this plugin?
",4lexandra,2016-02-24 18:36:37
3429,2016-01-31 01:00:55,"I add it here, because you cannot add issue(why?)
I tested the resizing client side and have a color bug on the saved image using google chrome after upload. 
This image is originally  grey
![aaronss_ny-lights-1](https://cloud.githubusercontent.com/assets/4851086/12699521/57733b6e-c7be-11e5-96af-03a203369f94.jpg)
",studio42,2016-02-24 18:36:37
3429,2016-02-24 18:36:37,"Thanks for your contribution, but cropping images goes beyond the file upload functionality I want to demo in this project.

As a side note, the JavaScript Load Image library is demoed with the [JCrop plugin](https://github.com/tapmodo/Jcrop).
",blueimp,2016-02-24 18:36:37
3428,2015-11-29 00:41:39,"advanced acceptFileTypes n singleFileUploads
",cybermerlin,2016-02-24 18:29:21
3428,2016-02-24 18:29:21,"Sorry, but this pull request does not give any clear indication what ""advanced"" functionality it is implementing.
There are also unrelated changes like file urls and localization.
Thanks for your understanding that this cannot be merged.
",blueimp,2016-02-24 18:29:21
3428,2016-05-26 09:32:40,"no problems
not my difficulties
",cybermerlin,2016-02-24 18:29:21
3427,2015-11-19 00:37:19,"A funcional implementation for .NET
",fpaganini,2015-11-24 23:18:43
3426,2015-11-18 10:32:57,"function get_config_bytes($val) did not calculate correctly the post_max_size from INI if specified using the K, M or G-suffix.
",zenlord,2016-02-24 18:27:18
3426,2016-01-31 00:40:29,"Are you sure, it's bad calculated ?
Case have no break in the code, so i mean that at end the result is correct and don't need your changes
",studio42,2016-02-24 18:27:18
3426,2016-01-31 10:45:40,"You are right. My bad. Do I have to withdraw my pull request? Or can you just close it?
",zenlord,2016-02-24 18:27:18
3426,2016-01-31 16:18:47,"Hi,
I think it's not important, because this is not merged.
",studio42,2016-02-24 18:27:18
3426,2016-02-24 18:27:18,"You're free to close your own pull requests if they are obsolete. :)
",blueimp,2016-02-24 18:27:18
3425,2015-11-11 21:13:30,"now options.formData can work directly on the object
",lukatendai,2016-02-24 18:26:07
3425,2016-02-24 18:26:07,"Thanks for the contribution.
However this would be a breaking change for anybody overriding the function.
If you want to address the options from within the `formData` function, you can still do so via the `this` property, as `formData` is called via `options.formData()`.
",blueimp,2016-02-24 18:26:07
3424,2015-11-07 03:23:23,"Hi,

Could you please review this pull request? It is a feature extends progress event add server consume time estimation. I write a [blog post](http://atealxt.github.io/2015/11/03/file-upload-server-progress-estimation.html) with several anime may help on understand it.

About JSHint there is just one warning related to my change - ""setTimeout/clearTimeout"". I searched on web if js code is in browser that's ok.
About QUnit I run locally seems all fine, all my changes are extend progress event to trigger more times.

Let me know what you think, if it looks good we may add this to the wiki.

Thanks!
",atealxt,2016-02-24 18:58:30
3424,2016-02-24 18:58:30,"Hi @atealxt, thanks for your contribution.

I read your blog post and I think that's a very interesting approach to the problem.
I think a more fitting description would be ""server processing estimate"", as it's the processing on the server (or servers) that we don't get additional progress events on.

The server processing of images is the reason I usually display an animated progress bar, as this way the user still has an indication that something is going on.

I think your approach is interesting and valid as well, so I've added a link to your blog post to the [wiki](https://github.com/blueimp/jQuery-File-Upload/wiki#customization-how-tos).

Since not all implementations will have this processing time, I prefer not to include those changes in the master though.
Thanks for your understanding!
",blueimp,2016-02-24 18:58:30
3423,2015-10-30 14:40:01,"Fixed incorrect conversion from byte to mb to gb.
",ToreOlavKristiansen,2015-10-31 13:16:57
3423,2015-10-30 15:50:30,"I strongly discourage this, because it promotes the usage of wrong prefixes.

A Kilobyte is not 1024 Bytes!
Kilo, Mega and so on are SI prefixes and **always** correspond to a power of 10.

If anything, it should be changed to the appropriate binary prefixes [as standardised by the ISO/IEC](https://en.wikipedia.org/wiki/Binary_prefix#Adoption_by_IEC.2C_NIST_and_ISO): KiB, MiB, GiB, ...
",patlkli,2015-10-31 13:16:57
3423,2015-10-30 16:02:33,"End users don't know KiB, MiB and GiB. They do know KB, MB and GB. They expect to see the same values displayed in the upload UI as on their client, be it Windows Explorer, Outlook or other.
",ToreOlavKristiansen,2015-10-31 13:16:57
3423,2015-10-30 16:17:48,"Microsoft is the only one who ignores international standards and does whatever they want. 
Most third-party software and all unixoid systems, be it Linux or OSX, use appripriate units.

I don't approve of making something intentionally wrong. 
",patlkli,2015-10-31 13:16:57
3423,2015-10-31 03:27:13,":-1:  @ToreOlavKristiansen I would rather suggest an enhancement, where the developer can configure the active prefix by choosing between ""decimal"" and ""binary"".
https://en.wikipedia.org/wiki/Binary_prefix
https://en.wikipedia.org/wiki/Metric_prefix#Decimal_prefix
",websafe,2015-10-31 13:16:57
3423,2015-10-31 12:29:53,"I was thinking the same. I implemented it and committed it to the branch. I am new to github. Looks like I need to close this one an create a new pull request.
",ToreOlavKristiansen,2015-10-31 13:16:57
3423,2015-10-31 12:45:03,"Sorry about that, got the new commit onto this pull-request now.
",ToreOlavKristiansen,2015-10-31 13:16:57
3423,2015-10-31 12:49:32,"@ToreOlavKristiansen I still think that this is wrong. It should use the IEC units with powers of 1024 and the SI prefixes with powers of 1000.

If you like to have the same number values as the Windows Explorer, _please_ use the correct units.
I would rather explain to curious end-users why there's an extra ""i"" in the unit than make false claims about internationally standardized units.
",patlkli,2015-10-31 13:16:57
3423,2015-10-31 13:16:57,"Thanks for your contribution everyone.

This discussion comes up regularly and there are multiple closed pull requests (and issue posts when they were still open) to change it.

That's why there's a FAQ entry explaining why the decimal prefixes and metric values are in fact correct and following the International Standard of Units:
https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-does-the-plugin-display-1000-bytes-as-1-kb-and-1000000-bytes-as-1-mb

If you really need the binary prefixes, it is very easy to create your own plugin extension and override the `_formatFileSize` function:
https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions
",blueimp,2015-10-31 13:16:57
3422,2015-10-26 10:25:58,"Added option 'input_stream'
",istem,2016-02-24 18:15:22
3422,2016-02-24 18:15:24,"Thanks for your contribution, @istem and sorry for the late reaction.
",blueimp,2016-02-24 18:15:22
3421,2015-10-13 12:05:26,"This PR more like feature request instead of concrete implementation.

Currently angular module add `queue` variable to scope. It does not useful for single file uploads, better add possibility choose scope variable name and assign first file from queue when file input doesn't supports multiple files selection. Also it would be nice add possibility add more than one file input to the form and store them into separate models. See code example below

<S_CODE_TOKEN>

Current code implementation is not ready and just concept.
",Koc,2016-02-24 18:14:03
3421,2016-02-24 18:14:03,"If you want a bidirectional binding between the file upload queue and a parent scope model, I think the best practice in Angular 1 would be to set up a bidirectional binding with a custom directive defining an isolated scope with specified bindings:

<S_CODE_TOKEN>

https://docs.angularjs.org/api/ng/service/$compile#directive-definition-object
",blueimp,2016-02-24 18:14:03
3420,2015-10-01 23:48:36,"Hello, as the title says you should change the filter that converts bytes to [GB,MB,KB] for this:

<S_CODE_TOKEN>

Not only for the name and prefix provider to filter, only for the way it converts the bytes to [GB,MB,KB] in an exact way. An example:

I have a file that it's size is `263192576` in bytes. According the way you do it, the result of it is: `263.19 MB` but if you divide `263192576` with `1024` that means `1KB = 1024 bytes` and then divide it again with `1024` that means `1MB = 1024` the real result is: `251 MB` not `263.19 MB`.

Thanks for reading this **long** request, but I really appreciate this fixe would be implement it here.
",sant123,2016-02-24 17:57:01
3420,2016-02-24 17:57:01,"Sorry for the late reply, but please have a look here:
https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-does-the-plugin-display-1000-bytes-as-1-kb-and-1000000-bytes-as-1-mb
",blueimp,2016-02-24 17:57:01
3419,2015-09-29 01:38:16,"I spent a little too much time trying to figure out why the files were failing to upload even though they were making it to the server. I didn't see anything in the error that stood out to me, it was actually under data.errorThrown. 

![image](https://cloud.githubusercontent.com/assets/2099769/10153300/16721be0-6629-11e5-9c02-813fb2d50c1d.png)

It could be re-worked but for the time being a note on the front page would be nice :)
",matthewrhoden1,2016-02-24 17:51:29
3419,2016-02-24 17:54:21,"Thanks and sorry for the late reaction.
",blueimp,2016-02-24 17:51:29
3418,2015-09-10 15:14:26,"Callback after file is sucessfully uploaded
handle_image_file function with file path in object instead of a new argument
Added a little bit of lisibility on handle_file_upload function

Example with callback :

$upload_handler = new UploadHandler(null, true, null, function (&$file) {
   // Possible values
   // $file->path;
   // $file->name;
   // $file->size;
   // $file->type;
   // $file->url;
   // $file->error;
});
",jeff1326,2015-09-13 11:20:43
3418,2015-09-13 11:20:43,"Thanks for your contribution, @jeff1326.

Unfortunately at the moment I will only merge new features that cannot be handled without this change.

Although your callback functionality would certainly be useful, this could also be handled with the current version.
You could e.g. override the `handle_file_upload` method in a subclass and call the original method in the subclass method. 

In my opinion, the file path shouldn't be a property of the file object, as it's not metadata related to the file itself, but only useful for operations on server-side.
",blueimp,2015-09-13 11:20:43
3417,2015-08-28 16:01:40,"If the fileInput has keyboard focus before it is detached, document focus will be lost. To avoid this change in context, restore focus to the inputClone.
",majornista,2015-08-28 20:37:19
3417,2015-08-28 20:37:41,"Thanks for the contribution, @majornista!
",blueimp,2015-08-28 20:37:19
3416,2015-08-21 07:59:11,"…gress' error, added a safe $apply method

In our experience it only happend in that case. However it may be necessary in the future to use the safeApply in other places.
",fabiogermann,2015-08-25 15:47:44
3416,2015-08-25 15:49:09,"Thanks again for your contribution, @fabiogermann.
With the latest stable AngularJS version it seems the progress apply isn't even necessary so I removed that callback.
",blueimp,2015-08-25 15:47:44
3415,2015-08-20 13:45:43,"This is to enable uploading to services that don't accept `Content-Disposition` headers. Dropbox's API won't accept multipart uploads or the `Content-Disposition` header. 

If you have a way that I can test this drop me a message.

Thanks,
Donal.
",4ver,2015-08-20 14:04:07
3415,2015-08-20 14:04:07,"Thanks for your contribution, @4ver.

It's already possible to adjust the headers and remove the Content-Disposition field before the request is sent with a `fileuploadsend` event handler, as explained in https://github.com/blueimp/jQuery-File-Upload/pull/1933#issuecomment-1131018 and https://github.com/blueimp/jQuery-File-Upload/pull/3374#issuecomment-67707616.

I admit it's not the most user-friendly option to remove default headers via a callback, but it allows for a cleaner code-base and more flexibility.
",blueimp,2015-08-20 14:04:07
3415,2015-08-20 15:56:51,"That's a much nicer solution alright. Thanks for the quick response and sorry for not properly searching out the solution :dancer: 
",4ver,2015-08-20 14:04:07
3415,2015-08-20 15:58:56,"Thanks for your understanding and no worries, I don't expect people to go through closed pull requests anyway.
",blueimp,2015-08-20 14:04:07
3414,2015-08-10 14:16:56,"…and improve responsiveness when uploading a lot of files.
When uploading a lot of file $apply uses a lot of ressources (the more files - the more it is called).
Therefore using $asyncApply will allow the UI to refresh and improve responsiveness.
",fabiogermann,2015-08-10 19:12:49
3414,2015-08-10 19:25:50,"Thanks, @fabiogermann!
",blueimp,2015-08-10 19:12:49
3413,2015-08-06 15:54:07,"appengine.Context is deprecated since last commit.
",gotsunami,2015-08-08 00:47:03
3413,2015-08-08 00:56:43,"Thanks! :+1: 
",blueimp,2015-08-08 00:47:03
3412,2015-08-05 15:36:36,"Needed for bower validation: https://github.com/bower/json/blob/master/lib/json.js#L108
",TrueDrago,2015-08-05 16:25:39
3412,2015-08-05 16:28:12,"Thanks for your contribution, @TrueDrago.
I created a separate fix, as the bower-json validation also had issues with the multiple CSS and JS files listed in the `main` property.
",blueimp,2015-08-05 16:25:39
3411,2015-07-30 07:02:19,"It is important. Excuse me, but I made a mistake. You need a replacement function but not the merged. Now I use it in my project. it works
",xozoti,2015-07-30 08:13:32
3411,2015-07-30 08:13:32,"Like I said in your previous two pull requests (#3410 and #3409):
With your changes it won't be possible to disable settings in nested arrays.

As an example, if you want to disable thumbnail creation, you need to be able to completely override the `image_versions` setting and not merge it recursively.

There is certainly no requirement to be able to merge options recursively, as you can simply copy the existing `image_versions` settings and extend them to your needs if this is your use case.
",blueimp,2015-07-30 08:13:32
3410,2015-07-29 14:20:03,"the options presented in the form of a multidimensional array of arrays, and simple addition leads to loss of default settings such as thumbnails
",xozoti,2015-07-29 14:21:38
3410,2015-07-29 14:21:38,"Thanks for your contribution.
Like I said in your previous pull request (#3409):
This behaviour is by design, as else you wouldn't be able to disable settings in nested arrays
",blueimp,2015-07-29 14:21:38
3409,2015-07-29 14:11:00,"the options presented in the form of a multidimensional array of arrays, and simple addition leads to loss of default settings such as thumbnails
",xozoti,2015-07-29 14:15:44
3409,2015-07-29 14:17:06,"Thanks for your contribution.
However this behaviour is by design, as else you wouldn't be able to disable settings in nested arrays.
",blueimp,2015-07-29 14:15:44
3408,2015-07-27 23:03:42,"With the medium size set to resize images on upload, replacing `>` with `\>` forces imagemagick to resize both dimensions to fit within the max height and width.
",stefancrain,2015-07-28 14:24:36
3408,2015-07-28 13:49:24,"Sorry but I don't see why the backslash character should be needed here, as the argument is already enclosed by single quotes due to the `escapeshellarg` command.

Did this command not work in your setup as is?
",blueimp,2015-07-28 14:24:36
3408,2015-07-28 14:24:22,"Sorry, my pull request was misguided. 
I was trying to prevent the enlargement of small images that I was seeing locally, but that seems to have been an issue with my sizes. In [the docs](http://www.imagemagick.org/Usage/resize/#shrink) it looked like the `\>` was needed, I see that you've correctly escaped the string in your script. 
",stefancrain,2015-07-28 14:24:36
3408,2015-07-28 14:25:10,"Alright, thanks for the quick reply!
",blueimp,2015-07-28 14:24:36
3407,2015-07-24 13:56:03,"`license` field should contain String or Array of Strings. See: http://bower.io/docs/creating-packages/

Current format doesn't work with libraries that inspect and generate information about all the libraries used in the project (e.g. `grunt-license-bower`).
",mkotsur,2015-07-24 17:04:12
3407,2015-07-24 17:04:12,"Thanks for the heads up, I've updated the license information in both bower.json and package.json.
",blueimp,2015-07-24 17:04:12
3406,2015-07-08 10:33:11,"1. [There's a bug in your code](http://jsfiddle.net/nkovacs/4cqo9u2q/) I'd like to report. I can't.
2. [Your wiki](https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions) links to issues that are no longer accessible.
",nkovacs,2015-07-08 12:46:31
3406,2015-07-08 13:00:10,"I disabled the Issues tracker as the maintenance overhead to differentiate between valid bug reports and support requests became a full-time job.

In my experience, the pull request feature encourages users to contribute and allows me to maintain this project without the maintenance overhead.
I also provide a publicly available email address on my homepage which can be used for bug reports.
",blueimp,2015-07-08 12:46:31
3406,2015-07-08 16:07:48,"@blueimp I really need your help. I tried looking for solution everywhere but could not find anything. May be you can help. It may be very basic but it is just not working for me.

I implemented database implementation of blueim/jQuery-file-upload. Everything is working fine but the problem is, the form shows all uploaded files. I want it to show only that images which are related to a particular post, tried different solution but it is just not working for me.

I think related code changes might be in this function

<S_CODE_TOKEN>

I tried to change the select query just so it can pull one particular image but it is not working for me. Can you please help or guide me in the right direction? Thanks
",hammadkhan,2015-07-08 12:46:31
3405,2015-07-03 22:00:22,"If I do `npm install blueimp-file-upload-jquery-ui --save` and try to require your package in Webpack, I get the error:

<S_CODE_TOKEN>

The pull request fixes my problem, but I don't know if AMD requirejs will work. My current stack is `npm 2.10.1`, `node v0.12.4` and `""webpack"": ""^1.9.11""`.
",palcu,2015-07-05 19:11:44
3405,2015-07-05 19:11:35,"I think originally I intended `jquery.ui.widget` to be a named module, as other jQuery projects might potentially include it as well.

That's also why there's an npm package of the same name, that I admittedly didn't maintain for a long time:
https://www.npmjs.com/package/jquery.ui.widget

RequireJS should definitely work as well with the updated path, as that's how the local scripts are included in the other JS files.

Thanks for your contribution, @palcu!
",blueimp,2015-07-05 19:11:44
3405,2015-07-07 08:23:52,"It's doesn't works! Look at requirejs documentation: http://requirejs.org/docs/api.html#jsfiles 

The base path of a file inclusion is the location of the original 'data-main' script. So using ./vendor/... make it relative to 'data-main' script, not 'your script' (jquery.fileupload.js).

In my case it brokes totally my requirejs loading.
No workaround possible, your path is hardcoded.

Please revert.

FYI: it brokes indirectly the https://github.com/cloudinary/cloudinary_js plugin, based on this repo 
",dbrugne,2015-07-05 19:11:44
3405,2015-07-07 08:30:51,"Thanks for the report, @dbrugne.
I've released a new version reverting the change.

Sorry @palcu, I should have tested my assumptions regarding RequireJS.
We'll have to find another workaround for the issue with WebPack.
",blueimp,2015-07-05 19:11:44
3405,2015-07-07 08:42:46,"Great! It builds now, thanks.
",dbrugne,2015-07-05 19:11:44
3405,2015-07-10 22:01:56,"@palcu @blueimp simple workaround for WebPack is to disable AMD:

https://www.npmjs.com/package/imports-loader#disable-amd
",evoyy,2015-07-05 19:11:44
3405,2016-04-26 08:38:30,"The same `Module not found: Error: Cannot resolve module 'jquery.ui.widget'` error is happening to me when using webpack. When I add `jquery.ui.widget` to my dependencies in `package.json`, it works. `jquery.ui.widget`'s `package.json` only misses `""main"": ""jquery.ui.widget.js""` to make it work.

@blueimp Shouldn't `jquery.ui.widget` be part of the plugin's dependencies in `package.json`?
",orthes,2015-07-05 19:11:44
3405,2016-04-26 13:09:09,"@orthes:
Technically yes, `jquery.ui.widget` is a dependency.

However, the jQuery UI project does not use NPM as a package manager, so there was never an official version of `jquery.ui.widget` available.
The [one on NPM](https://www.npmjs.com/package/jquery.ui.widget) was actually published by myself and is unmaintained.

The official version of `jquery.ui.widget` also didn't support AMD originally, which is why a version with AMD support was shipped as part of this repository instead.
",blueimp,2015-07-05 19:11:44
3404,2015-06-24 00:25:42,"Hi,

I use this ""plugin"" for my websites, and sometimes I need to add a watermark to the uploaded images.

Just want to know if you thought someday about add it ?
I had make some changes and it almost working pretty well, so just want to share it with you and ask for your help to make it better.

My proposed code is this:

<S_CODE_TOKEN>

Thank you so much for everything you do,

Best regards!
",tons,2015-06-28 12:35:55
3404,2015-06-28 12:35:55,"@tons:
Thanks for your contribution.
While I won't include this feature in the master branch, I think it could be a good addition to the Wiki.
I've re-enabled public write access so feel free to add a tutorial page.

@atfc2015:
Sorry but I don't provide any private services for my open source projects at the moment.
",blueimp,2015-06-28 12:35:55
3404,2016-11-11 10:32:04,"+1
",amastaneh,2015-06-28 12:35:55
3403,2015-06-22 10:01:23,"Without Bootstrap, jQuery File Upload allows clicks not only on the upload button, but around it. See the concerned area in the screenshot below:

![screen shot 2015-06-22 at 11 46 24](https://cloud.githubusercontent.com/assets/42327/8279465/28de9caa-18d5-11e5-8238-259f4a736fa6.png)

With Bootstrap, this is not an issue as `.btn` is marked as `display: inline-block`. This fixes the issue for everybody using jQuery File Upload without Bootstrap.
",pquentin,2015-06-28 12:38:56
3403,2015-06-28 12:39:11,"Thanks @pquentin !
",blueimp,2015-06-28 12:38:56
3402,2015-06-22 08:25:17,"new ui design
",mufti1927,2015-06-22 08:52:27
3402,2015-06-22 08:52:27,"That's the lamest ""hacking"" attempt I've ever seen.
",blueimp,2015-06-22 08:52:27
3401,2015-06-11 06:31:46,"Changed atomar to atomic in line 13.
",devonharvey,2015-06-11 21:51:21
3401,2015-06-11 21:51:25,"Thanks!
",blueimp,2015-06-11 21:51:21
3400,2015-06-10 22:23:05,"Per bower/bower.json-spec@a325da3
",kkirsche,2015-06-11 21:52:55
3400,2015-06-11 21:52:55,"Thanks for your contribution.
However, since this is simply ignored by bower and might be used in the future, I'll rather keep it in the file.
",blueimp,2015-06-11 21:52:55
3400,2015-06-11 23:41:11,"Disagree with you considering bower hasn't had any real advancement and they are considering moving to NPM. bower/bower#1520 I think that's a very bad decision personally.
",kkirsche,2015-06-11 21:52:55
3400,2015-06-12 00:31:54,"Also their maintainer says they probably won't ever use it: http://stackoverflow.com/questions/24844901/bowers-bower-json-file-version-property
",kkirsche,2015-06-11 21:52:55
3400,2015-06-12 00:42:24,"Sorry but I simply don't see a reason to remove the version information since it does work perfectly fine as it is.
It would be highly unlikely for the bower maintainers to throw a bug if the version field is present.
",blueimp,2015-06-11 21:52:55
3399,2015-06-01 13:26:30,"A timeout (e.g. set globally to work around certain Google Chrome bugs) would otherwise break file uploads lasting longer than the set value.
",Herst,2015-06-01 14:34:55
3399,2015-06-01 13:41:29,"Thanks for your contribution.
However if a timeout is set globally, this usually means there is a reason why requests should time out after the set time. And if file uploads are to be handled differently, I think it's better to explicitly set this in the fileupload initialization, than to set it globally, which might lead to surprises.
",blueimp,2015-06-01 14:34:55
3399,2015-06-01 14:21:00,"Well, normally someone might set the timeout and just have the response time in mind but for timeout the request time counts as well, in this case the length of the whole upload. In my case it was unexpected and I see no reason why anyone would ever want to have a timeout on an upload request.

> there is a reason why requests should time out after the set time

Yes, like I wrote in the commit description there are certain Chrome bugs: 
http://stackoverflow.com/q/21063909
",Herst,2015-06-01 14:34:55
3399,2015-06-01 14:34:51,"That is a valid argument. I've reconsidered and the surprise of not following the global timeout setting is a lesser concern, so I'll merge it. Thanks for your patience!
",blueimp,2015-06-01 14:34:55
3399,2015-06-01 14:54:55,"Great, thank you. Also worth mentioning [in the wiki](/blueimp/jQuery-File-Upload/wiki/Options) (which I can't edit in this repo BTW).
",Herst,2015-06-01 14:34:55
3399,2015-06-01 15:03:33,"Done. Wiki editing is disabled as it was too much of a hassle to revert spam changes.
",blueimp,2015-06-01 14:34:55
3398,2015-05-27 03:06:34,,ramswaroop,2015-05-27 12:59:04
3398,2015-05-27 12:59:04,"Sorry but I don't plan on adding any official support channel, please see here:
https://github.com/blueimp/jQuery-File-Upload#support
",blueimp,2015-05-27 12:59:04
3397,2015-05-21 03:58:34,"Text on the upload button is unreadable in Firefox because it is misaligned vertically. Removing the explicit font-size fixes the issue.
",invisibleroads,2015-05-27 13:00:22
3397,2015-05-21 09:53:25,"Unfortunately the explicit (large) font-size is required to fully cover the underlying button for varying font sizes and differing language settings (see https://github.com/blueimp/jQuery-File-Upload/wiki/Style-Guide).

In my tests with the latest Firefox version I could not reproduce the issue with Firefox.
Could you provide steps to reproduce (Firefox version, language setting, OS, etc.)?
",blueimp,2015-05-27 13:00:22
3397,2015-05-21 15:15:37,"Firefox version = 38.0
Language setting = US/EN
OS = Fedora 20 & Mac OS X

The button looks like the image below.

![screenshot - 05212015 - 11 10 21 am](https://cloud.githubusercontent.com/assets/266668/7751881/4e5e340c-ffaa-11e4-98a3-6fcecaa1927d.png)
",invisibleroads,2015-05-27 13:00:22
3397,2015-05-21 16:25:09,"Sorry but this is not reproducible for me with Firefox 38.0.1 on OSX with en_US language setting on the demo.

Just to clarify, do you encounter this issue on the demo?
And if yes, do you have any content-changing extensions installed?
",blueimp,2015-05-27 13:00:22
3397,2015-05-27 13:00:22,"I guess this issue was implementation specific and not a general problem of the styles, so I'll close it.
",blueimp,2015-05-27 13:00:22
3397,2015-05-27 13:22:57,"I see your demo page is not working too with large image. It's not show preview image with large image. https://blueimp.github.io/jQuery-File-Upload/. I know demo only accept small image <1mb. But preview image not working with large file. It is a error? http://stackoverflow.com/questions/30483496/preview-image-not-working-with-large-image-blueimp-jquery-file-upload
",hippobpinh1,2015-05-27 13:00:22
3397,2015-05-27 13:54:01,"@hippobpinh1:
Please do not spam the pull request comments.

Please read this on your support options:
https://github.com/blueimp/jQuery-File-Upload#support

I'll answer you this one time, but again, please stop spamming (as I've had to delete three of your other misplaced comments). Check out this option, it defines the max file size of images to load for the preview feature:
https://github.com/blueimp/jQuery-File-Upload/wiki/Options#loadimagemaxfilesize
",blueimp,2015-05-27 13:00:22
3397,2015-05-27 14:03:18,"@blueimp  i'm sorry i think my post it's not submit. Thank you very much @blueimp :). Now I very very happy when you answer my question.Its working now. I like youuuuuuuuuuuuuuuuu.
",hippobpinh1,2015-05-27 13:00:22
3397,2015-05-29 03:59:59,"Sorry, I didn't get a chance to do the required tests because of other work. I'll get back to your questions toward the end of June once my schedule clears.
",invisibleroads,2015-05-27 13:00:22
3397,2015-05-29 07:27:04,"OK, no worries, feel free to reopen then.
",blueimp,2015-05-27 13:00:22
3396,2015-05-14 19:38:20,"The existing regex did not account for file names containing multiple periods ("".""), so a file named <code>abc.123.[xxx]</code> was being converted to <code>abc.[yyy]</code> (expected file name was <code>abc.123.[yyy]</code> in this case).

Here's a fiddle to illustrate: https://jsfiddle.net/guag/sj9a8Lwx/
",guag,2015-05-18 07:50:50
3396,2015-05-18 07:51:06,"Thanks @guag!
",blueimp,2015-05-18 07:50:50
3395,2015-05-13 07:02:43,"Added number of loaded bytes at a time. It is useful for calculating the number of bytes loaded in several fileupload.
",PsiXdev,2015-05-13 15:30:11
3395,2015-05-13 15:30:11,"At the moment I don't think this is needed in the master, as it's possible to retrieve that value by making the calculation without internal changes, but thanks for the contribution.
",blueimp,2015-05-13 15:30:11
3395,2015-05-13 15:56:53,"But how to determine which file created event ""progress"", in which this value might be useful? The problem with a unique identification files. Besides, to keep for each file, the previous value of ""loaded"" to calculate ""loadedAtTime"", is not desirable. Sorry for bad English.
",PsiXdev,2015-05-13 15:30:11
3395,2015-05-13 16:01:12,"If you are interested, I can describe a situation in which I could not do without ""loadedAtTime"". More precisely, a different decision was bad.
",PsiXdev,2015-05-13 15:30:11
3395,2015-05-13 16:12:04,"Each file has its own progress event (depending on if you do single file request uploads, which is the default).

I'm sure your addition is helpful for your use case and keeping the loaded property is not ideal.
I simply follow my own rule not to add too much functionality into the master branch, actually I think it's already quite feature bloated.
If demand for your functionality is high, I might still incorporate it at some point.
",blueimp,2015-05-13 15:30:11
3395,2015-05-13 16:27:35,"Good.. 

""Each file has its own progress event (depending on if you do single file request uploads, which is the default).""

But how to I can find out, which file caused this event, in the event handler ""progress""? Because names can be the same.
",PsiXdev,2015-05-13 15:30:11
3395,2015-05-13 17:00:31,"In the progress event handler, the `data.files` array will only include the related files for this progress event.
",blueimp,2015-05-13 15:30:11
3394,2015-03-25 16:46:58,"Hello and thx for your work.

There is a dangerous bug when you add this code : 

https://github.com/blueimp/jQuery-File-Upload/wiki/Upload-multiple-resolutions-of-one-image-with-multiple-resize-options . 

... on Basic Plus UI or others exemples pages.

Form accept all file type after add this, having course : acceptFileTypes: /(.|\/)(gif|jpe?g|png)$/i

...
Thx, sorry for my english...
",vincenzo34,2015-04-24 11:22:41
3394,2015-04-24 11:22:41,"Client-side accept file-type settings only help the user, they are NOT a security feature, as validation has always to be done on the server-side.

Also, please don't misuse the pull request feature.
",blueimp,2015-04-24 11:22:41
3393,2015-03-08 21:38:01,,taylorking,2015-04-24 11:19:59
3392,2015-03-08 02:39:02,"Create a bitcoin donation address!!
",taylorking,2015-05-20 13:16:51
3392,2015-04-26 15:38:04,"As far as I can see this pull request only places a place holder. I guess it's the authors own responsibility to choose their Bitcoin address and if they wish to receive donations or not. Maybe this should be an issue instead of a pull request?
",miohtama,2015-05-20 13:16:51
3392,2015-05-20 12:21:38,"@miohtama Seems to be that adding new issue is similar with pull request here.
Do they have any issue tracker page?
",itsazzad,2015-05-20 13:16:51
3392,2015-05-20 13:16:51,"Sorry, but I've decided that I won't accept donations of any kind anymore.

@itsazzad:
Please see https://github.com/blueimp/jQuery-File-Upload#support
",blueimp,2015-05-20 13:16:51
3391,2015-02-26 18:44:46,"Currently, fileupload only works either a) when the file is selected, or b) manually via API. However, often we want to submit the form via Ajax. There are complications here - for example, we want to allow for optional file entry, where the form is still submitted even if no file is selected. The only current way around that is a complex and non-DRY method where we copy all the Ajax settings we passed into the fileupload plugin and have a separate submit listener that replicates the functionality only if no file has been selected.

This change adds a `useSubmit` option. In this case, selecting a file won't fire the send method; instead, it is _always_ fired when the form is submitted, regardless of whether a file has been added or not. All existing callbacks should still work exactly as expected, including `_onAdd`.
",dorner,2015-04-24 11:16:02
3391,2015-04-24 11:16:02,"I understand your use case, however at the moment I'm still reluctant to add such a feature.
The intention of this plugin is solely to upload files.
The option to add form data is an addition, but not it's focus.
Making it able to submit form data opens it up for many other use cases and at the moment I don't want to support this feature.
",blueimp,2015-04-24 11:16:02
3390,2015-02-14 23:24:05,"<S_CODE_TOKEN>

or better option will be clone?

<S_CODE_TOKEN>

the same problem has gd
",DarekTw,2015-04-24 11:11:34
3390,2015-04-24 11:11:31,"Thanks!
",blueimp,2015-04-24 11:11:34
3389,2015-02-02 08:30:26,"A nicer package manager: http://spmjs.io
Documentation: http://spmjs.io/documentation

http://spmjs.io/package/blueimp-file-upload

---

It is a browser-side package manager popular in China, suppling a complete lifecycle managment of package via [spm](https://github.com/spmjs/spm/tree/master).

> If you need ownership of blueimp-file-upload in spmjs, I would like to add it for your account after signing in http://spmjs.io.

spmjs/spm#781
",afc163,2015-02-05 07:38:48
3389,2015-02-05 07:38:47,"Sorry, at the moment I'm not interesting in adding support for another package manager.
",blueimp,2015-02-05 07:38:48
3389,2015-02-05 07:44:52,"OK... :crying_cat_face: 
",afc163,2015-02-05 07:38:48
3388,2015-01-26 08:26:41,"...ntains whitespace

<S_CODE_TOKEN>
",twlz0ne,2015-02-05 07:45:22
3388,2015-02-05 07:47:26,"Thanks for your contribution, @twlz0ne 
",blueimp,2015-02-05 07:45:22
3387,2015-01-19 21:53:00,"How to implement in laravel 4?
",adw-cr,2015-02-05 07:39:07
3387,2015-01-19 22:08:45,"I'd merge master a few more times
",comentarinformal,2015-02-05 07:39:07
3387,2015-02-05 07:39:07,"Please don't misuse the pull request feature.
",blueimp,2015-02-05 07:39:07
3386,2015-01-08 02:03:30,"you can use this function to grab images by url and store it. You just need to invoke the `importFromUrl` with an url or set of urls and that's it :)
",AndrewEastwood,2015-01-12 20:29:23
3386,2015-01-12 20:29:23,"Thanks for your contribution.
However at the moment I won't include this functionality, as I think it's rather out of scope of this project.
",blueimp,2015-01-12 20:29:23
3386,2015-01-12 20:36:43,"omg
",AndrewEastwood,2015-01-12 20:29:23
3386,2015-01-12 20:41:42,"No need to freak out, you know you can always continue to maintain your code in your own fork.
",blueimp,2015-01-12 20:29:23
3386,2015-01-12 20:44:35,"that's true, but what's going on with the current?
",AndrewEastwood,2015-01-12 20:29:23
3386,2015-01-12 20:48:59,"Are you referring to the security patch?

This refers to this patch here:
https://github.com/blueimp/jQuery-File-Upload/commit/5ee639504cb144aba4d04c9379fa670ed4ff8c44

Please also refer to my comment here:
https://github.com/blueimp/jQuery-File-Upload/pull/3381#issuecomment-69641256
",blueimp,2015-01-12 20:29:23
3386,2015-01-12 23:29:38,"that's cool, I mean the security, but I didn't get how does it relate to this patch
",AndrewEastwood,2015-01-12 20:29:23
3385,2015-01-06 15:17:03,"After try to integrate to Mysql, I receive ::

SyntaxError: Unexpected end of input

Anyone can help me?
",maramej,2015-01-12 20:24:25
3385,2015-01-07 13:39:15,"This isnt a jQuery File upload issue, Your likely missing a closing brace somewhere. Post the issue on stackoverflow
",exussum12,2015-01-12 20:24:25
3385,2015-01-07 16:46:51,"Someone can have Query file Upload with Mysql Download?
",maramej,2015-01-12 20:24:25
3385,2015-01-12 20:24:25,"Please don't misuse the pull request feature.
",blueimp,2015-01-12 20:24:25
3384,2015-01-05 14:04:29,"A comparison between maxFileSize and the actual file size was in the wrong direction
",hyde1,2015-01-05 16:05:51
3384,2015-01-05 16:05:50,"The original code is correct, your code would prevent loading files lower than the `loadImageMaxFileSize` setting.
",blueimp,2015-01-05 16:05:51
3384,2015-01-05 18:05:57,"Indeed, I read too fast. Wired because this update is fixing an issue I have, where the files are not being resized before the upload...
",hyde1,2015-01-05 16:05:51
3383,2015-01-04 17:20:50,"https://github.com/blueimp/jQuery-File-Upload/pull/3370 introduced support for commonjs/browserify.
Unfortunately the entry point file ""jquery.fileupload.js"" was left untouched so it is still impossible to use this plugin with browserify.
This PR fixes that.

Thank you for your hard work!
",luis-almeida,2015-01-04 20:11:02
3383,2015-01-04 17:45:35,"If you fix the indentation in **jquery.fileupload.js** and add `+CommonJS` to the **jquery.ui.widget.js** version (`v1.11.1+CommonJS`), I'll merge it gladly.
",blueimp,2015-01-04 20:11:02
3383,2015-01-04 20:09:47,"Thanks for the speedy reply.

I followed your feedback and amended my commit.
Let me know if I missed something.
",luis-almeida,2015-01-04 20:11:02
3383,2015-01-04 20:11:47,"Thanks!
",blueimp,2015-01-04 20:11:02
3383,2015-01-04 20:40:21,"Thanks to you!
Looking forward to the next tag.
",luis-almeida,2015-01-04 20:11:02
3383,2015-01-04 20:41:34,"If you can confirm it now suffices all the browserify requirements, I'll add a tag and release a patch version right away.
",blueimp,2015-01-04 20:11:02
3383,2015-01-04 23:31:27,":+1: - I can confirm 3075f884dc24c10d966884fd24bf28ee9487e68c is ""browserifiable"".

Pointed `blueimp-file-upload` to `git://github.com/blueimp/jQuery-File-Upload#3075f884dc24c10d966884fd24bf28ee9487e68c`, installed and worked as expected.
",luis-almeida,2015-01-04 20:11:02
3383,2015-01-04 23:39:06,"Done! 
https://github.com/blueimp/jQuery-File-Upload/releases/tag/9.9.1

Thanks again for your contribution!
",blueimp,2015-01-04 20:11:02
3382,2015-01-02 12:12:16,"When EXIF data is present, and we are auto rotating the image by
default, the min and max dimension checks should be on the rotated version not
the uploaded version
",exussum12,2015-01-12 20:25:54
3381,2014-12-29 13:26:53,,ivankravchenko,2015-01-12 20:34:38
3381,2015-01-01 17:06:29,"Thanks for your contribution, @ivankravchenko.

However, the existing `ForceType` directive already prevents execution of any script files (PHP, Perl, Python, Ruby, etc.):
https://github.com/blueimp/jQuery-File-Upload/blob/master/server/php/files/.htaccess#L4

See also:
https://github.com/blueimp/jQuery-File-Upload/wiki/Security#php
",blueimp,2015-01-12 20:34:38
3381,2015-01-01 17:25:08,"I see. But particularly on environment I deployed an app, PHP files are uploaded, then downloaded with octet-stream mime-type, as expected. But contents of this downloaded file – result of executet PHP code inside (just phpinfo). In short – PHP code executed and passed with octet-stream mime-type.
",ivankravchenko,2015-01-12 20:34:38
3381,2015-01-01 17:48:15,"OK, that is interesting.
Could you provide some information on the environment (server version, etc.) and maybe try to find out why the ForceType directive doesn't prevent script execution in this context?
",blueimp,2015-01-12 20:34:38
3381,2015-01-01 17:52:04,"I've added the `SetHandler None` directive, which should prevent any script execution in the case the `ForceType` directive does not do this already.
Please let me know if this applies to your environment.

The reason why I didn't include your changes instead is that I think a blacklist approach such as removing specific handler is always inferior to a whitelist approach, as there might be other script handlers (Python, Ruby, etc.).
",blueimp,2015-01-12 20:34:38
3381,2015-01-08 15:27:38,"Hi,
saw a site defaced via this yesterday, should be (under a mod_suexec environment)
SetHandler default-handler
",jm-hi-heg,2015-01-12 20:34:38
3381,2015-01-09 23:00:50,"Can you provide information if `SetHandler default-handler` prevents any script execution that `SetHandler None` doesn't do already?
",blueimp,2015-01-12 20:34:38
3381,2015-01-12 09:08:06,"Absolutely.
In this environment, ""SetHandler None"" has no effect, the php is executed (the output is disposition: download, application/octet-stream) whereas with ""SetHandler default-handler"" the uninterpreted file is downloaded.
I'll email you some links
",jm-hi-heg,2015-01-12 20:34:38
3381,2015-01-12 20:37:47,"Thanks @jm-hi-heg.
Shows to serve that everyone needs to test security measures against their own setup.
In my Apache+PHP setups, the ForceType directive already prevented script execution, so I was not aware of the critical security issue in other environments.
Hopefully, `SetHandler default-handler` will work for all other setups.
",blueimp,2015-01-12 20:34:38
3379,2014-12-19 22:04:02,"Hello friends!

I ran into a problem with the data object not having the form attribute.  This was caused by three different event handlers constructing the data object differently.

The bad behavior can be seen here in this fiddle: http://jsfiddle.net/spy8d6n0/2/  Clicking the input button and adding a file will have the correct form attribute, but drag and dropping a file will not.

This pull request ensures that the data object's construction is the same no matter what event triggers a file to be added.
",nerdyworm,2014-12-19 22:10:06
3379,2014-12-19 22:10:06,"Many apologies... this does not actually fix the issue I was having.  Going to close this until I can figure get a proper fix.  There seems to be an issue with the event.target.form when dropping.  Sorry.
",nerdyworm,2014-12-19 22:10:06
3378,2014-12-15 10:19:33,"In the post() method, if the `$upload` variable is null (`$_FILES[$this->options['param_name']]` does not exist), the old code will still try to handle the upload as if `$_FILES` were a one-dimensional array.
The solution is to split the initial condition:

Original code:

<S_CODE_TOKEN>

New code:

<S_CODE_TOKEN>
",zoliszabo,2014-12-19 22:23:56
3378,2014-12-19 22:24:36,"Thanks for your contribution, @Aszze!
",blueimp,2014-12-19 22:23:56
3377,2014-12-13 13:19:32,"i try change value ""Chunk file"" in class's php and change value limit file size of file javascript.However, not working.

pls check my question. wish reveice your answer
tks
",lovegameisme,2014-12-19 22:26:42
3377,2014-12-19 22:26:42,"Please do not misuse the pull request feature.
",blueimp,2014-12-19 22:26:42
3376,2014-12-08 20:46:13,"This is just a suggestion. I would've instead filed an issue about this part of the README being wrong, but the whole problem is that that's currently impossible :laughing: 
",cvrebert,2014-12-08 21:09:28
3376,2014-12-08 20:52:08,"If you change ""Feature requests"" to ""new features"" I'll merge it. :)
",blueimp,2014-12-08 21:09:28
3376,2014-12-08 20:57:49,"Changed.
Sad to hear that you had to disable the issue tracker. Too many dumb questions?
",cvrebert,2014-12-08 21:09:28
3376,2014-12-08 21:09:25,"Thanks!

Well, I wouldn't say the questions were dumb, but there were a lot of users asking for support (despite there being a user support forum as well) and it just wasted too much of my time.
I find pull requests a good filter for people who actually want to contribute and it allows me to maintain my open source projects without making it a daily task.
",blueimp,2014-12-08 21:09:28
3375,2014-12-08 20:36:40,"Per http://getbootstrap.com/about/#brand
",cvrebert,2014-12-08 20:38:35
3375,2014-12-08 20:39:25,"Thanks.
",cvrebert,2014-12-08 20:38:35
3374,2014-12-07 17:48:04,"> Added option setContentDisposition, can be used to prevent setting a Content-Disposition header which might be disallowed on some server-side handlers.

So a few months ago, I ran into some issues trying to implement PUT uploads on Vimeo using jQuery File Upload. It looks like the `Content-Disposition` header, which is set on non-multipart uploads, is actually disallowed by Vimeo.

> [Error] XMLHttpRequest cannot load https://1511632926.cloud.vimeo.com/upload?[...]. Request header field Content-Disposition is not allowed by Access-Control-Allow-Headers. (90, line 0)

Here is a post on Stack Overflow where I explained how I ""fixed"" the issue : http://stackoverflow.com/questions/26222413/vimeo-api-streaming-upload-using-http-put-and-blueimps-jquery-fileupload
I thought it would be best to have a clean way to disable this feature, so I added an option `setContentDisposition`, it is set to `true` by default which preserves the original behaviour.
",paulgv,2014-12-19 22:35:10
3374,2014-12-19 22:35:10,"Thanks for your contribution, @paulgv.
It is possible to override any header in the `fileuploadsend` callback, by modifying the `data.headers` map.
Therefore I don't see a pressing need to add another option.
",blueimp,2014-12-19 22:35:10
3374,2014-12-19 22:41:06,"Oh ok thanks ! I wasn't aware of that.
Cheers !
",paulgv,2014-12-19 22:35:10
3374,2015-03-05 18:46:35,"Probably not the best place to ask, but I stumbled upon this repository and this issue while searching for a way to do PUT uploads on Vimeo (and don't have enough reputation to comment on stack overflow), so, I was wondering if you would be able to share a more complete version of your code that you got working.
",no2pixel,2014-12-19 22:35:10
3374,2015-03-16 22:04:54,"@egojab Sorry for the delay, I just noticed your post ! I edited my question on Stack Overflow with some more information, I hope it helps ;)
",paulgv,2014-12-19 22:35:10
3373,2014-12-05 06:51:36,,masud-technope,2014-12-05 06:55:07
3372,2014-11-29 11:14:51,,xshared,2014-11-29 12:09:36
3371,2014-11-28 13:40:49,"Could you please update _initDataAttributes method to avoid memory leaks in jquery cache
",dimamarksman,2014-11-29 12:12:23
3370,2014-11-24 15:42:51,,nervo,2015-01-01 18:22:44
3370,2014-12-09 07:19:19,"+
",Blaze34,2015-01-01 18:22:44
3370,2014-12-27 03:42:55,"Yes, please :+1:  . Just banged my head around for like 2 hours thinking why ""module not found errors"" kept popping up. A quick inspection in the `package.json` file and the lack of a `main` finally showed me where the problem was.
",Dudemullet,2015-01-01 18:22:44
3370,2014-12-27 08:59:39,"@blueimp here is a chance to make a beautiful xmas gift :)
",nervo,2015-01-01 18:22:44
3370,2014-12-30 10:03:16,":+1: 
",koistya,2015-01-01 18:22:44
3369,2014-11-19 16:55:16,"Hello,

I have a dedicated server or I put your script to work with but I got an error for the upload limit I correct in php.ini.
But after that I got another error ""File Upload Aborded"" then I is not done nothing.
Do you have a solution please.
",liberodark,2014-11-19 20:13:21
3369,2014-11-19 20:13:21,"Sorry but this is not the place for support requests.
",blueimp,2014-11-19 20:13:21
3369,2014-11-26 16:52:38,"Hi
The jQuery-file-upload (basic and basic +) functionality used to work nicely with IE8. But its not working now. Could you please fix the issue

Thanks...
",getshawkat,2014-11-19 20:13:21
3369,2014-12-05 23:05:22,"The 9.8.4 version does not work while other scripts works fine I can not upload anything!
",liberodark,2014-11-19 20:13:21
3367,2014-11-12 12:44:32,"added special methods to check query params, this would be useful for extending UploadHandler and overriding only basic methods, which does not include any logic. 

this would facilitate frameworks integration where $_GET is usually retrieved using specific framework methods
",luciantugui,2015-01-01 18:20:21
3366,2014-11-08 17:08:10,"Especially when uploading large files with big chunks the bitrate
display and the remaining time display become bumpy. This happens
when an onProgress event is fired while a bigger chunk is processed
at the server as the throughput may be very low at this moment.

Signed-off-by: Peter Lieven pl@kamp.de
",plieven,2014-12-19 22:45:11
3366,2014-12-19 22:45:11,"Thanks for your contribution, @plieven and sorry for my late reply.
For the moment I've decided that the decision of calculating and displaying the average bitrate instead can be done by a consumer of the API and doesn't require an update of the core library.
",blueimp,2014-12-19 22:45:11
3365,2014-10-30 15:17:18,,AndreSchwarzer,2014-11-01 14:33:09
3364,2014-10-18 07:14:58,"- Replace all ""array_key_exists()"" with ""isset()""
",aswinlutchanah,2014-10-18 11:44:48
3364,2014-10-18 11:45:53,"I couldn't merge your changes since your pull request contained many unrelated changes.
However I've applied your suggestion, thanks. :+1: 
",blueimp,2014-10-18 11:44:48
3364,2014-10-18 12:07:24,"Great :)
I would like to contribute more to this project :)
",aswinlutchanah,2014-10-18 11:44:48
3363,2014-10-17 23:23:01,"- Replace all ""intval()"" with (int)
",aswinlutchanah,2014-10-18 11:54:02
3362,2014-10-12 23:33:19,"This lets responses to be modified before output.
",AndrewEastwood,2014-10-13 19:31:34
3362,2014-10-13 19:31:54,"Thanks for your contribution, @AndrewEastwood :+1: 
",blueimp,2014-10-13 19:31:34
3362,2014-10-18 12:18:43,"You can now use the public generate_response function to get the proper headers automatically:
https://github.com/blueimp/jQuery-File-Upload/commit/62cd2f84d68dfbcb247ff374ae727ed4a42de49d
",blueimp,2014-10-13 19:31:34
3361,2014-10-09 13:38:32,"We are implementing the plugin in an angular application environment and we don't understand something. If we use the autoUpload feature, the plugin call start and stop multiple times. If we don't use that option and trigger it with a button, start and stop callbacks are only called once. Why the use of this option change the behavior like that? It's a problem for us because the progressall callback don't represent the real status of the global upload.
",Tushazk,2014-10-09 13:41:09
3361,2014-10-09 13:41:09,"Please don't misuse the pull request feature for support requests.

You might get support on the user forum:
https://groups.google.com/d/forum/jquery-fileupload
",blueimp,2014-10-09 13:41:09
3360,2014-10-04 10:00:31,"not realy a pull request.. dont know how to pull a request on a wiki page..

Please update the Wiki for different template engine.
see https://github.com/pYr0x/jQuery-File-Upload/wiki/Template-Engine

click event for delete breaks if delete-class would not in <button>
",pYr0x,2014-10-04 13:54:45
3360,2014-10-04 13:54:45,"I'm not sure what you want me to add to the wiki page.
The delete class is present in the alternative template engine example.
The UI version of course interacts with the template.
I don't know if it makes sense to add notes about each class being used in the UI version.
Anyway, if you give me a concrete sample of text you would like to see, please post a comment here.
",blueimp,2014-10-04 13:54:45
3360,2014-10-05 11:36:05,"the samplecode at your wiki is wrong and would not work.

<S_CODE_TOKEN>

have to rewrite in

<S_CODE_TOKEN>

otherwise this code would not work if you click on the button
https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload-ui.js#L621 
",pYr0x,2014-10-04 13:54:45
3360,2014-10-05 16:12:14,"Thanks, updated:
https://github.com/blueimp/jQuery-File-Upload/wiki/Template-Engine
",blueimp,2014-10-04 13:54:45
3359,2014-09-26 20:41:41,,naderchehab,2014-09-26 21:03:38
3358,2014-09-23 06:44:30,"Hey guys,

i build myself a solution for duplicate files/filenames on the server.
Works pretty well atm on my machine, maybe have a look at it.

<S_CODE_TOKEN>
",DeveloperKid,2014-09-26 19:02:05
3358,2014-09-26 19:02:05,"Thanks for the contribution, @DeveloperKid.
While I usually don't add additional server-side upload handlers, if you provide a link (the github project page?) I can add it to the Wiki.
",blueimp,2014-09-26 19:02:05
3357,2014-09-18 22:48:24,,rtfpessoa,2014-09-18 22:50:32
3356,2014-09-17 15:52:26,"I just want to propose to not have this activated per default. It led to some pretty nasty behaviour in combination with other form elements.

Here's the scenario:

We have a page where there are other (text-) input elements besides the fileupload.
Our users copy textual data from Excel to these text inputs. Excel automagically creates images of the copied cells in the clipboard.

So every time someone pastes s.th. from Excel, the image in the form on that page, gets overwritten with an image of the copied content.
",axelerator,2014-09-18 10:41:16
3356,2014-09-18 10:42:32,"Thanks for the suggestion.
I disabled it by default with a slightly different implementation and correct documentation.
",blueimp,2014-09-18 10:41:16
3350,2014-09-13 16:29:49,,PeterDaveHello,2014-09-13 21:00:34
3350,2014-09-13 21:00:59,"Thanks, wasn't aware that GitHub pages now support SSL.
",blueimp,2014-09-13 21:00:34
3350,2014-09-14 03:19:13,"No problem.
",PeterDaveHello,2014-09-13 21:00:34
3331,2014-09-01 13:29:40,"Prevent default also on ""dragenter"" event so it can work with IE10+

Change tested (and working) on:
     IE10 (doesn't work with IE9 and lower)
     Chrome 36.0.1985.143 m
     Firefox 31.
",darknessm0404,2014-09-01 20:25:40
3331,2014-09-01 21:01:35,"Thanks for your contribution, @darknessm0404!
",blueimp,2014-09-01 20:25:40
3328,2014-08-29 23:54:17,"Added antivirus scan for the uploaded file, using clamscan and the exec function.
",dokinoki,2014-08-30 09:48:40
3328,2014-08-30 09:48:40,"Thanks for your contribution, @dokinoki.
At the moment I would prefer if you could add your code and setup and usage examples to the Wiki.
",blueimp,2014-08-30 09:48:40
3326,2014-08-28 14:22:14,"This prevents 'Undefined index' notices from being generated.
",rvavruch,2014-08-29 21:16:08
3326,2014-08-29 21:16:13,"Thanks!
",blueimp,2014-08-29 21:16:08
3325,2014-08-28 13:22:00,"i want to resize images of a uploaded image into 3 different size those resizing of image i want to do it in backend, how  could i achieve this, or is there some other alternate to my requirment ++
",pitambar,2014-08-29 21:15:33
3325,2014-08-29 21:15:33,"Please see #2190
",blueimp,2014-08-29 21:15:33
3323,2014-08-28 11:16:43,"Fix for #3322

Request -- (https) --> Balancer -- (http) --> Worker

Then the following isn't available with the worker: $_SERVER['HTTPS'] == 'on'
So.. delete link will be always http, you also have to check: $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https'
",DerDu,2014-08-29 21:14:38
3323,2014-08-29 21:14:38,"Sorry, saw your pull request after I added the fix for #3322.
",blueimp,2014-08-29 21:14:38
3323,2014-09-01 07:29:01,"Don't worry. All that matters is that it's fixed. ;o)
",DerDu,2014-08-29 21:14:38
3298,2014-08-13 08:22:12,"Introduce a new callback for the ui version which is triggered when the addition of a files fails.
It is useful in combination with the validate plugin to have more control over the ui when the validation fails
",tkleinhakisa,2014-08-16 10:56:42
3298,2014-08-16 10:56:42,"Thanks for your contribution.
However this callback is unnecessary, as you already have the processing callbacks, which trigger in exactly those situations:
https://github.com/blueimp/jQuery-File-Upload/wiki/Options#processing-callback-options
",blueimp,2014-08-16 10:56:42
3298,2014-08-18 12:05:28,"Thanks you, i missed this one ....
",tkleinhakisa,2014-08-16 10:56:42
3296,2014-08-12 23:00:55,"error message is not pointer.
fix bug
",ateliee,2014-08-12 23:27:28
3296,2014-08-12 23:27:28,"Please see my comment here:
https://github.com/blueimp/jQuery-File-Upload/pull/3296/files#r16149844
",blueimp,2014-08-12 23:27:28
3291,2014-08-08 13:17:18,"This patch adds a parameter `X-Requested-With=IFrame` to file uploads via the iframe transport.

The patch is taken from the jquery-fileupload-rails gem, which uses the header to detect iframe transport uploads in server middleware. Having this upstream would allow to separate the rails middleware from the js library which would make upgrading the assets much easier.
",felixbuenemann,2014-08-08 20:55:06
3291,2014-08-08 20:55:06,"Thanks for your contribution.
However, it's already possible to distinguish XHR and Iframe based uploads based on the standard HTTP Accept header field, as explained here:
https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation
",blueimp,2014-08-08 20:55:06
3281,2014-08-06 10:46:45,"on Firefox when tabbing (keyboard user) onto the file-input-button the text on the button disappear. 
change the font-size to 20px fixe the issue and still behaves the same on other browser
NOTE: Tabbing + enter on IE does not open the explorer window
",cbauden,2014-08-07 21:06:26
3281,2014-08-07 21:06:26,"Thanks for your contribution.
Unfortunately, the hight font-size was required to fix #2635.
It's also a safe-guard to make sure the invisible input field covers larger buttons.
",blueimp,2014-08-07 21:06:26
3258,2014-07-21 00:40:35,"Currently the `fail` option sets `file.error = true` when an unknown error occurs (eg: restart the web server during upload) so it is not possible to change or translate the error message, and in any case true was not a very good error message :)
",tkleinhakisa,2014-07-21 18:54:56
3258,2014-07-21 19:03:30,"Thanks for your contribution, @tkleinhakisa ! :+1: 
",blueimp,2014-07-21 18:54:56
3253,2014-07-18 21:27:07,".toDataUrl always return png on Android, and file.type="""". To convert
the resized canvas to jpeg, we use JpegEncoder.

More info on :
http://ghinda.net/jpeg-blob-ajax-android/

With my other pull request pending on DarrenInWood/Jquery-File-Upload (still to migrate in separate files), it is now possible to resize and post images on Android 4+
",chandon,2015-04-24 11:09:38
3253,2015-04-24 11:09:38,"Please see my comment here: https://github.com/blueimp/jQuery-File-Upload/pull/3052#issuecomment-95897618
",blueimp,2015-04-24 11:09:38
3248,2014-07-15 00:14:37,"Fixed bites properly
",pure4499,2014-07-15 21:43:46
3248,2014-07-15 21:43:46,"Please see
https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-does-the-plugin-display-1000-bytes-as-1-kb-and-1000000-bytes-as-1-mb
",blueimp,2014-07-15 21:43:46
3240,2014-07-08 19:48:00,"Store the new cloned file input in the data as ""replacedFileInput""

Test for it with

<S_CODE_TOKEN>

I propose this because I am using the file upload for global uploads and for uploads in different areas. I wanted to be able to trace back which input was used and where it was used. But since the original is the one referenced in the data, it is no longer in the document.
",dariusj18,2014-07-15 22:20:09
3240,2014-07-15 21:09:20,"Thanks for another contribution, but you can already access the replaced file input via the options API:

<S_CODE_TOKEN>
",blueimp,2014-07-15 22:20:09
3240,2014-07-15 21:37:50,"That gets the array of fileInputs in the options, whereas the replacedFileInput would be used to get the specific input element that was replaced for events.
",dariusj18,2014-07-15 22:20:09
3240,2014-07-15 22:18:45,"That is indeed true, thanks for the heads up.
",blueimp,2014-07-15 22:20:09
3240,2014-07-15 22:27:55,"I've released a new version including your changes, but renamed the property to `fileInputClone`.
Thanks for your contribution!
",blueimp,2014-07-15 22:20:09
3239,2014-07-08 14:01:16,"I am trying to use the processQueue to modify the URL parameter. This is not possible with the data object passed, the originalData object needs to be used.

For example, in my process function I have an AJAX call which gets the endpoint based on the selected file. It then manipulates the data object like so.

<S_CODE_TOKEN>

It works if I run this code in the ""add"" callback, however the processQueue seems to be the more correct way to accomplish this.
",dariusj18,2014-07-15 21:02:15
3239,2014-07-15 21:02:15,"The solution to share data between the main callbacks (add, send, etc.) and the processing callbacks is to use an object as property of the `data` argument, as the copied `data` argument available in the processing callbacks is a shallow copy.

e.g.:

<S_CODE_TOKEN>
",blueimp,2014-07-15 21:02:15
3239,2014-07-15 21:35:24,"I am using the process action to manipulate the data, so I don't think the shallow copy is enough.

This is the part where I add the process action.

<S_CODE_TOKEN>

Here's the function

<S_CODE_TOKEN>

I am manipulating the original data object inside of the process action to mutate the upload command.
",dariusj18,2014-07-15 21:02:15
3239,2014-07-15 22:08:29,"You can access any properties inside of the `data.shared` object from all the callbacks, so my suggestion includes storing the properties you want to share inside of this object.
",blueimp,2014-07-15 21:02:15
3232,2014-07-05 15:57:04,"修改PHP处理文件类中，对于文件名为中文时，上传失败的bug（将文件名用MD5加密）。
",xuanskyer,2014-07-05 16:57:44
3232,2014-07-05 16:57:44,"Problems with Unicode filenames outside of the ASCII range are a known problem on Windows PHP server platforms:
https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#is-there-a-problem-uploading-files-with-non-ascii-characters-php-windows-server
",blueimp,2014-07-05 16:57:44
3226,2014-07-02 15:53:07,"I've resolved Issue #3181. Hopefully you can merge with master!
Let me know if you desire any changes in style or anything.

Thanks!
",allisonshaw,2014-07-02 20:40:27
3226,2014-07-02 20:45:29,"Thank you very much for your contribution! :+1: 
",blueimp,2014-07-02 20:40:27
3224,2014-07-02 08:40:50,,MichalRadwantzor,2014-07-02 20:35:23
3224,2014-07-02 20:35:22,"Sorry, but there are too many issues with your code to be eligible for a merge:
- Please don't remove documentation from the README.
- Please don't change the project links.
- Please don't modify the demo HTML unless necessary for a bugfix or new feature.
- Please don't add 3rd party scripts like Google Analytics and Adsense.

However I appreciate the fact that most code was in it's own plugin extension file.

If you want your code to be merged, please also add a description, make sure JSHint passes and if possible add QUnit tests.

Thanks for your understanding.

Please feel also free to maintain your fork in your own repository.
",blueimp,2014-07-02 20:35:23
3193,2014-06-09 18:32:52,"The jqXHR object contained in the promise is overwritten by a promise object lacking an abort method via chaining `_onSend().then`.

Instead, jqXHR should be retained as a jqXHR even though the promise methods can be attached to it.

Try using:

<S_CODE_TOKEN>

to get an error that the `abort` method does not exist in this context.
",ajcrites,2014-07-02 20:02:01
3193,2014-06-29 18:36:40,"The abort method is in fact exposed a few lines above the lines you referenced:
https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload.js#L1386

Your code change will actually render the `send` method useless as the send will never happen.

There's even a unit test for this functionality which pass with all supported browsers:
https://github.com/blueimp/jQuery-File-Upload/blob/master/test/test.js#L1077
",blueimp,2014-07-02 20:02:01
3193,2014-07-01 13:59:50,"I've created an example case for this bug as well as the solution:

http://jsfiddle.net/Mpamq/
http://jsfiddle.net/Mpamq/1/

When `.abort` is called, you will get `undefined is not a function` from line 1389 when it tries to call `jqXHR.abort()` on the promise (which is _not_ a jqXHR). https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload.js#L1389

I can't create a qunit test for this since it requires adding files manually because of line https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload.js#L1380

<S_CODE_TOKEN>

and if there are no files added the condition on https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload.js#L1399 (`if (!files.length) {`) fails so the `jqXHR` does not get inappropriately set.

I'm also not sure what you mean about the `send` method not happening.  All of the unit tests pass with my code changes and I've also used my own changes with file uploading and it is working (and the aborting is also working).

Let me know if I can add more to the issue to clarify.
",ajcrites,2014-07-02 20:02:01
3193,2014-07-02 20:17:08,"I apologise, I think I went over your pull request too fast and only saw that line 1404 was removed in the diff, not the new version of this line.

Your code is in fact totally valid and the correct solution for this issue.

Sorry again, my only excuse is that I'm struggling to keep up with all the mails and notifications I get for my open source projects. :/
",blueimp,2014-07-02 20:02:01
3169,2014-05-26 04:39:43,"If the server does not support imageMagik, there will be no thumbnailUrl.
A workaround is to use file.url.

<S_CODE_TOKEN>
",truongminh,2014-05-26 22:03:10
3169,2014-05-26 22:03:10,"Thanks for your contribution, @truongminh.
However this would always download the complete source file in the client-browser, which can be several megabytes for each image, just for the preview thumbnail.
Therefore I don't recommend this change.
Also, ImageMagick is not required, the PHP version for example also supports the GD library:
https://github.com/blueimp/jQuery-File-Upload/blob/master/server/php/UploadHandler.php#L99
",blueimp,2014-05-26 22:03:10
3144,2014-05-14 16:43:55,"Fixes issues where a user might use this UploadHandler within a PHP
namespace.

Fix minor capitalization errors that will cause imagick to fail when run
on *nix box, where those names are case sensitive.

Add a check that the uploaded file is in fact an image before trying to
extract its image size, which would cause an error otherwise.
",jamesvl,2014-05-14 21:38:35
3144,2014-05-14 21:41:12,"Thanks for your contribution, @jamesvl !
I was long reluctant to add namespace support since it's only supported since PHP 5.3.
But your code is clean and people can still use older releases if needed.
",blueimp,2014-05-14 21:38:35
3144,2014-05-14 21:48:49,"No problem - thanks for merging it in!

And while it doesn't add its own use of namespaces (hey - 5.3 is end of life'd anyway), at least it doesn't conflict with other code that _is_ designed to use them.

Next step might be to make this module installable via PHP's Composer; but since it's just one file, I've been fine manually adding it to my project.

And thanks for all your good work on this! Love it.
",jamesvl,2014-05-14 21:38:35
3144,2014-05-14 22:05:22,"Composer support has been requested several times.
So far I've rejected it, as I don't want to support yet another package manager.

Originally the PHP upload handler was just meant as an extremely simple demo:
https://github.com/blueimp/jQuery-File-Upload/blob/9b22fc143f5f25c00fdf7ef177db0a99e7133378/example/upload.php

On the other hand, I wouldn't mind if the composer file would be maintained in a fork.
",blueimp,2014-05-14 21:38:35
3127,2014-05-02 08:48:49,"This helps validation work more accurate. I don't know why but data.files[data.index].size is always greater then data.originalFiles[data.index].size so the validation get incorrect. I set the maxFilesize = 5MB and try to upload a 4.5MB file but it didn't work. Then I finally figured it out: the retrieved file size become 7MB !
Thanks for making such awesome plugin.
",mrhieu,2014-05-02 09:31:09
3127,2014-05-02 09:32:07,"Sorry my bad. Options ""imageQuality: 1"" make data.files[data.index].size get bigger. Just remove that line and everything is now OK.
",mrhieu,2014-05-02 09:31:09
3098,2014-04-17 16:26:48,"Encapsulated the html stuff into a directive to be able to have multiple uploaders on one site and minimize the needed html code.
",DominicBoettger,2014-04-17 20:48:59
3098,2014-04-17 20:48:59,"This is an interesting addition, but I want to keep the file structure for each demo as simple as possible (meaning one HTML file only).
However other users might be interested in your fork, so please feel free to add a link to it to the this project wiki homepage.
",blueimp,2014-04-17 20:48:59
3097,2014-04-17 16:25:10,"Change bower.json to include all dependencies.
Changed paths for the components. Changed the server to be able to be able to ship the html/js/css contents via http.
",DominicBoettger,2014-04-17 20:46:27
3097,2014-04-17 20:46:26,"Thanks for your contribution, Dominic.
Unfortunately, I cannot include your additions, as the demo for this project is the gh-pages branch, which is basically a clone of the master repository.
This means that the external URLs are used on purpose.
Sorry about that!
",blueimp,2014-04-17 20:46:27
3052,2014-03-25 21:08:58,"Adds feature detection for Android 4, forces this browser to use regular associative array instead of FormData, then adds an ajaxTransport to assemble the form POST manually.
",DarrenInwood,2015-04-24 11:09:18
3052,2014-03-29 20:03:41,"Thanks for your contribution, Darren.
I have the following suggestions:
Could you move the part starting at line 1433 here:
https://github.com/blueimp/jQuery-File-Upload/pull/3052/files#diff-39a834a672a00c7e950ff109bc4342d6R1433
And put it into an individual transport file, analogue to the iframe or postmessage transport files.
Also please make sure this works with other server-side upload handlers than PHP, thanks!
",blueimp,2015-04-24 11:09:18
3052,2014-04-02 20:01:01,"Please feel free to rearrange and test as you see fit!  I just needed a fork with chunked uploading on Android 4 for a project, it would be great if you could work this into the main repo.

The stringified form POST is adapted straight out of an MDN article, so I would be very surprised if there are any issues with other server tech, but definitely you would want to test with the supplied server tech at least.

There are some coupling issues with moving the transport to another file; the logic that gets the browser to use a {} instead of a FormData object depends on the transport being available.
",DarrenInwood,2015-04-24 11:09:18
3052,2014-04-04 19:49:52,"OK, I'll keep this open then, as att the moment I don't have much time to make the necessary changes myself.
Anyway thanks again for your contribution!
",blueimp,2015-04-24 11:09:18
3052,2014-07-18 21:30:36,"There was a problem with formData (it's not possible to iterate through a formData object). My pull request on DarrenInwood/Master solves the problem (still to merge at this time)

With the #3253 pull request ""Android 4+ bug : use of JpegEncoder"", it's now possible to resize/upload images from the default Android 4x browser
",chandon,2015-04-24 11:09:18
3052,2015-04-24 11:09:18,"Given that this has been open for over a year and not been cleaned up, I'll close it for now.
I think doing client-side JPEG encoding is also not ideal.
I'll reconsider options to add Android support with a clean and updated pull request though.
",blueimp,2015-04-24 11:09:18
3052,2015-04-24 11:24:55,"After one year, still buggy, although there is a solution.
",chandon,2015-04-24 11:09:18
3026,2014-03-12 15:14:41,"Hello Sebastian,
First off, thanks for making this neat plugin!
Based on my Googling, there seem to be differing approaches in how people use your plugin to upload during form submits instead of automatically. So I have added an example of how I got it working and hopefully it will help others too.
Regards,
Pauline
",paulinetheitgirl,2014-03-13 23:22:44
3026,2014-03-13 22:33:51,"Hi Pauline,
thanks for your contribution.
At the moment I don't plan on extending the demo samples, but you can of course provide them on your fork.
Kind regards,
Sebastian
",blueimp,2014-03-13 23:22:44
3025,2014-03-11 10:41:11,,igaster,2014-03-13 22:25:40
3025,2014-03-13 22:25:40,"Thanks for your contribution.
However the script was written to support PHP versions below PHP 5.3, which introduced namespaces support.
",blueimp,2014-03-13 22:25:40
3020,2014-03-10 11:00:32,"fixes #2998
",nkovacs,2014-03-10 19:05:22
3020,2014-03-10 19:05:22,"Thanks for your contribution.
However I don't think it's a good idea to allow aborting an upload inside of the `chunkdone` event handler.
Like I said in my comment https://github.com/blueimp/jQuery-File-Upload/issues/2998#issuecomment-36781783, it is possible to abort an upload inside of the `chunksend` event handler.
",blueimp,2014-03-10 19:05:22
3020,2014-03-10 20:58:47,"It's possible, but it's inconvenient. Why do you think it's a bad idea?
",nkovacs,2014-03-10 19:05:22
3020,2014-03-10 21:04:39,"As it would make the API inconsistent in my opinion.
e.g. a `done` event should not be associated with a `fail`, which is triggered in your example code.
However I understand your concerns and maybe other users will find your fork very helpful.
It's also possible I change my mind at a later date, but at the moment I prefer it as is.
",blueimp,2014-03-10 19:05:22
3009,2014-03-07 03:55:37,"// Line 124: 
that._trigger('customnperror', e, data);

/**
In this plugin we can set various conditions/restrictions on file upload (e.g. acceptFileTypes, maxFileSize, maxNumberOfFiles, etc..)
Whenever a file is added, an event is fired ""fileuploadadd"" and once the file is added successfully another event is fired ""fileuploadadded"".
However, when a file is added and it fails one of these condition/restriction (e.g. user tries to upload 2GB file, or text file instead of an image), there is no way find out programatically that this has occurred.
While uploading a file if an error occurs then I have added a code to throw custom error named ""adderror"", so that we can bind this event and track errors.
**/
",nisP,2014-03-07 19:31:13
3009,2014-03-07 19:31:13,"Validation is built on top of the fileupload processing plugin and therefore will trigger `processfail` events for failed validations.
Please watch #2606 for documentation on the process queue.
",blueimp,2014-03-07 19:31:13
3007,2014-03-06 23:45:13,"The issue appears when using `processQueue` to upload multiple image resolutions.
When using `imageCrop` option, the image are just scaled, not cropped.

<S_CODE_TOKEN>

That's because JavaScript-Load-Image is using `crop` option and jQuery-File-Upload is sending `imageCrop` option instead.
",smilton,2014-03-07 19:33:39
3007,2014-03-07 19:33:39,"The option passed to JavaScript Load Image is `crop`, as `imageCrop` is simply a prefixed version:
https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload-image.js#L66
",blueimp,2014-03-07 19:33:39
2993,2014-03-03 10:56:33,"Added image file original dimensions info
",tot-ra,2014-03-03 19:36:11
2993,2014-03-03 19:36:11,"Thanks for your contribution, however I don't see a pressing need to include this in the master branch.
",blueimp,2014-03-03 19:36:11
2988,2014-02-28 01:52:10,"This totalSize attribute helps comparing later if the current file chunk is the last one.
So if we need to insert the file record in a database, we do it only once, at the last chunk burst.
",giovanichaves,2014-02-28 04:04:50
2988,2014-02-28 04:04:49,"Thanks for your contribution. However, the total file size is already known on client-side and therefore not required to be sent from server-side.
",blueimp,2014-02-28 04:04:50
2988,2014-02-28 04:15:35,"Sorry but maybe you underestimated the proposal. It isn't supposed to be sent back to the browser.
You can capture the generate_response() output array and then use it in your platform's script to detect the last chunk and i.e. create a database record before json_encode() it back to the browser.
",giovanichaves,2014-02-28 04:04:50
2988,2014-02-28 04:35:10,"For such a use case I would recommend to override the `handle_file_upload` method (and call its super method to retain functionality) to get access to the `content_range` variable.
",blueimp,2014-02-28 04:04:50
2988,2014-02-28 07:07:54,"thanks

On Fri, Feb 28, 2014 at 11:35 AM, Sebastian Tschan <notifications@github.com

> wrote:
> 
> For such a use case I would recommend to override the handle_file_uploadmethod and call its super method to get access to the
> content_range variable.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/2988#issuecomment-36321261
> .

## 

bismillah
",faruqi,2014-02-28 04:04:50
2977,2014-02-24 09:28:15,"The ui plugin calculated filesizes based on bits ( 1000 in a Kb ) instead of bytes ( 1024 in a Kb ).

This fixes that.
",JaapMoolenaar,2014-02-24 18:17:01
2977,2014-02-24 18:17:01,"Please see https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#wiki-why-does-the-plugin-display-1000-bytes-as-1-kb-and-1000000-bytes-as-1-mb
",blueimp,2014-02-24 18:17:01
2952,2014-02-15 16:53:04,"FIX get_image_size() with some IM version which outputs a different format string
",spidgorny,2014-02-25 01:31:46
2952,2014-02-17 02:17:16,"Could you reference official examples that document that different output format string?
I could only find the official doc here:
http://www.imagemagick.org/script/identify.php
",blueimp,2014-02-25 01:31:46
2952,2014-02-24 22:08:56,"Unfortunately not. That's just what I get from the ImageMagick installed on
my host for my images.
As you can see the resolution parameter is coming at a different index.
I've fixed it in my code, ignore it if you don't like it.
Thanks.

Slawa Pidgorny.

---

Time tracking and invoicing:
http://rechnung-plus.de/

Need a new web-site?
http://sigayeva.com/

Making appointments online:
http://appointment.at/

On 17 February 2014 03:17, Sebastian Tschan notifications@github.comwrote:

> Could you reference official examples that document that different output
> format string?
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/2952#issuecomment-35224091
> .
",spidgorny,2014-02-25 01:31:46
2952,2014-02-25 01:31:46,"OK, I'll close it for now, with the option of inclusion later on.
",blueimp,2014-02-25 01:31:46
2941,2014-02-12 15:34:59,"Pull request to fix #2940 for your convenience
",rikkertkoppes,2014-02-12 19:54:01
2941,2014-02-12 20:16:18,"Thanks for your contribution.

There was one regression in your code with HTML data-attributes, as the test didn't account for the key names to be in camelCase.
My last commit 0f386a914c31373244095dd236c471ae516da55e fixes this.

By the way the regression showed up in the unit tests, which should be always run before committing new code (although I've neglected that myself once).
",blueimp,2014-02-12 19:54:01
2928,2014-02-05 14:26:17,"In the context of a Firefox add on, window.Blob.prototype is undefined,
probably for security reasons. Instead of accessing it directly, we construct
an instance of Blob and use its function definition.
",etruong42,2014-02-05 14:26:43
2928,2014-02-05 14:26:43,"Whoops, wrong repo. Sorry.
",etruong42,2014-02-05 14:26:43
2926,2014-02-05 03:06:31,"Firefox add ons do not have window.Blob.prototype defined. To capture
such scenarios, we fallback to a new instance of Blob when
Blob.prototype is undefined.
",etruong42,2014-02-05 03:51:06
2926,2014-02-05 03:51:06,"Thanks for your contribution, @etruong42 
I don't plan on supporting Firefox add-ons as clients, so at the moment won't incorporate any specific  code for this platform.
However I'm interested what your use case for this addition is?
",blueimp,2014-02-05 03:51:06
2926,2014-02-05 12:25:02,"@blueimp The use case is loading the jQuery File Upload plugin from a Firefox add on. And in that case, `window.Blob.prototype` is undefined, which I suspect is for security reasons.

Even if you weren't hoping to officially support Firefox add ons, I thought that this patch would be a net win for cases where the environment, for whatever reason, has `window.Blob` defined but not `window.Blob.prototype`; and in that case, the JavaScript application crashes unless we wrap the plugin in a `try...catch`.
",etruong42,2014-02-05 03:51:06
2926,2014-02-05 14:30:08,"Could you try adding the following line before including the File Upload libraries in your add-on code?

<S_CODE_TOKEN>
",blueimp,2014-02-05 03:51:06
2926,2014-02-06 13:22:52,"I think that works, but I'm worried about writing a property to a natively provided object.
",etruong42,2014-02-05 03:51:06
2926,2014-02-06 16:29:18,"Well don't be worried!
Providing polyfills is a common thing in JavaScript environments.
e.g. it's what is done in the JS canvas-to-Blob polyfill here:
https://github.com/blueimp/JavaScript-Canvas-to-Blob
",blueimp,2014-02-05 03:51:06
2926,2014-02-06 16:48:22,"All right. Thank you so much for maintaining this plugin! It's a pleasure to use.
",etruong42,2014-02-05 03:51:06
2908,2014-01-28 14:15:09,"to fix this incorrect work
https://github.com/blueimp/jQuery-File-Upload/issues/2906
",EndyKaufman,2014-01-28 19:15:12
2908,2014-01-28 19:15:12,"If you want to disable paste support, simply set the `pasteZone` option to `null`:
https://github.com/blueimp/jQuery-File-Upload/wiki/Options#wiki-pastezone

Please don't open pull requests with unclear commit messages which only disable existing functionality and don't add anything of value.

But thanks for trying to contribute.
",blueimp,2014-01-28 19:15:12
2889,2014-01-19 00:37:38,"I have a common use case in which I am only letting the user upload one image file and I am showing a preview with the `fileUploadPreview` angular directive.

If the user selects a good image file, it appears in the DOM, but then if the user changes the file to a text file, for example, which has no preview, the directive needs to clear out the preview element because otherwise it will still contain the (stale) preview from the original image file.
",danxshap,2014-01-19 16:38:05
2889,2014-01-19 16:38:35,"Thanks for your contribution!
",blueimp,2014-01-19 16:38:05
2859,2014-01-08 02:24:09,"Added possibility to inform user about failed deletes.

to be used with:
$('#fileupload').on('fileuploaddestroyfailed', function (e, data) {/\* ... */})
",jbirkholz,2014-01-08 19:06:03
2859,2014-01-08 19:07:50,"Thank for your contribution. :+1: 
",blueimp,2014-01-08 19:06:03
2847,2014-01-02 13:21:34,"Some of the error messages were in functions, Move them all into the error variable 
",exussum12,2014-01-03 15:55:33
2847,2014-01-03 15:55:49,"Thanks for your contribution. :+1: 
",blueimp,2014-01-03 15:55:33
2842,2013-12-31 01:55:12,"When the script experience an error dealing with the uploaded image file (scaling, etc) it should be able to clean out before exiting, that is, unlinking the file to save space.
",nawar,2013-12-31 20:26:09
2842,2013-12-31 20:26:09,"Thanks for your contribution.
However it might be undesired behavior to simply delete all image files for which scaled versions couldn't be created, so I won't incorporate this code into the master branch.
",blueimp,2013-12-31 20:26:09
2836,2013-12-26 12:44:51,"After I have migrated to latest AngularJS version 1.2.6 the FileDestroyController don't update after file object proccessed by the jquery.fileupload-angular.js ( create objects: file.url, file.$cancel, etc). To resume, the file var was changed just one time when the controllers were loaded.

After some tests I pretty sure its about the new way how isolate scope and interpolation priorities works now. To solve it I just put a $watch to check all changes on $scope.file object.

More info may you can se at: http://docs.angularjs.org/guide/migration

If you have another way please let me know to update my codes its just one way to solve this minor issue.

Thanks.
",LeonanCarvalho,2013-12-26 21:44:18
2836,2013-12-26 21:44:18,"Sorry, but I couldn't reproduce any issues with the FileDestroyController in my tests with the AngularJS demo.
The default handleResponse code replaces the files in the list, causing the controller to be reinitialized:
https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload-angular.js#L78

This can probably be handled better but works for the demo and is also not in the library, therefore can be easily replaced.

Anyway thanks for your contribution!
",blueimp,2013-12-26 21:44:18
2819,2013-12-16 21:48:09,"The html was invalid in two ways:

1) unclosed elements.  For example,
   <link rel=""stylesheet"" ... >
   is now
   <link rel=""stylesheet"" ... />

2) empty attributes.  For example
   <input ... multiple ... />
   is now
   <input ... multiple="""" ... />
",rpsde,2013-12-17 09:10:45
2819,2013-12-17 09:10:45,"HTML5 doesn't require self-closing tags:
http://stackoverflow.com/a/3558200/644048

The demo validates therefore without any errors:
http://validator.w3.org/check?uri=http%3A%2F%2Fblueimp.github.io%2FjQuery-File-Upload%2F
",blueimp,2013-12-17 09:10:45
2819,2013-12-17 14:51:08,"Yes, I see that you are correct.

Unfortunately for me I'm using Java Server Faces which requires the source
files to be valid xhtml,  So I needed to make those changes to get the page
to render in JSF.  It may not be possible to make html5 and xhtml happy at
the same time.

On Tue, Dec 17, 2013 at 4:11 AM, Sebastian Tschan
notifications@github.comwrote:

> HTML5 doesn't require self-closing tags:
> http://stackoverflow.com/a/3558200/644048
> 
> The demo validates therefore without any errors:
> 
> http://validator.w3.org/check?uri=http%3A%2F%2Fblueimp.github.io%2FjQuery-File-Upload%2F
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/2819#issuecomment-30735794
> .
",rpsde,2013-12-17 09:10:45
2819,2013-12-17 14:52:25,"No worries, jQuery File Upload works with HTML5 and XHTML, doesn't matter.
",blueimp,2013-12-17 09:10:45
2817,2013-12-16 12:25:43,"Added a second event to be triggered in the _onDone handler if this was the last file that has finished uploading.
This should complement the 'progressall' event in the _onProgress handler.
",cerlestes,2013-12-17 11:55:38
2817,2013-12-17 11:55:38,"Please have a look at the **stop** event:
https://github.com/blueimp/jQuery-File-Upload/wiki/Options#stop
",blueimp,2013-12-17 11:55:38
2817,2013-12-17 12:10:41,"Ugh, sorry... totally missed the 'global' keyword there. Thanks for your time!
",cerlestes,2013-12-17 11:55:38
2788,2013-12-05 09:47:14,"Use the file signature where available rather than the file name. Sometimes images can be displayed with the wrong extension and may go unnoticed such as a jpg renamed to a gif or vise versa 

This PR allows the image to resize these misnamed files. 
",exussum12,2013-12-05 15:18:51
2787,2013-12-04 18:26:43,"Apply option limitMultiFileUploads even when limitMultiFileUploadSize is defined.
Ensure neither limit is exceeded when uploading.

Use option paramName if it is a string. No longer assume it is an array.
",dougdomeny,2013-12-05 14:39:17
2771,2013-11-27 17:19:50,"It resolve problem of 'garbage' filenames at saving of files with
non-latin, unicode names (i.e. in cyrillic) on Win-hosts.
Also field 'origName' (original filename sent from client) for JSON
response are added.
option: 'transliterate_names' (false by deafult)
",andrewks777,2013-11-28 17:00:30
2771,2013-11-28 17:00:30,"Thanks, @andrewks777 , for your contribution.
Although I do think that transliteration can be a useful feature, I believe that there must be better solutions on a windows host to keep the original filename.

Please see the FAQ entry here:
https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#is-there-a-problem-uploading-files-with-non-ascii-characters-php-windows-server
",blueimp,2013-11-28 17:00:30
2769,2013-11-26 17:32:10,"In the case where the host browser cannot deduce the file type, the default value of the content-type should be application/octet-stream, otherwise the request may end up with an invalid Content-Type header.
",francoisjacques,2013-11-27 08:21:27
2759,2013-11-22 23:51:33,"This fix allows to change single fileUpload attributes (such as url)
",prettynatty,2013-11-25 14:27:15
2759,2013-11-25 14:27:15,"Thanks for your contribution.
However, for performance reasons, the watch expression here doesn't use a deep watch on purpose.
I might add this as an option though.
",blueimp,2013-11-25 14:27:15
2757,2013-11-22 06:13:29,"I think this is a good enhancement because during submission, I don't want visitors clicking on the file input control again and beginning a new upload. The easiest way to do that is to disable the control; however, the hidden form submission that takes place in iframe-transport will ignore the disabled file input control.

This change temporarily re-enables the appended file inputs, submits the form, then re-disables the ones that were disabled previously. See #2655.
",nathan-alden,2013-11-22 08:41:22
2757,2013-11-22 08:41:22,"Thanks for your contribution.
However, I think it is a better approach to disable the form controls after submission, if necessary, which avoids any issues with the iframe transport.
",blueimp,2013-11-22 08:41:22
2757,2013-11-22 14:12:19,"After submission means after calling `data.submit()`.
There's currently no event triggered directly after submit, might be a worthy addition.
",blueimp,2013-11-22 08:41:22
2757,2013-11-22 14:18:21,"Whoops, I deleted my previous comment by accident. :-X

My goal (and maybe that of the person who posted #2655) is to disable the file input control for the duration of the process, no matter how many file inputs are involved, enabling it only when the entire process is complete. Most of file-upload's callbacks deal with the processing of a single file rather than a single action. To the user, it's a single action--they click a button, add multiple files and click OK. They don't care that behind the scenes there are several potentially asynchronous processes going on.

Originally, I was hopeful there was a set of events that would support the user's perceived workflow of this being a single action. Unfortunately it appears that most of the callbacks you provide deal with file-by-file events; I was unable to find a ""global"" start and end callback.

Adding code into iframe-transport was just a hack to get around the immediate issue. Were I to spend any additional effort on this, I would add global start and finish events to better handle the user's perceptions. In addition I would leave in the iframe-transport code I submitted in my pull request.

Anyway, thanks for providing a great library. I'm just trying to help make it even greater. :) :+1:
",nathan-alden,2013-11-22 08:41:22
2757,2013-11-22 14:25:18,"No worries, I appreciate any input.
I'm usually very conservative regarding code changes to core parts of the code, as I want this project to stay as stable as possible and I don't want to add too many features, would even say it is already kind of too big and could benefit from more modularization.

One of the core concepts of this plugin is its asynchronism, e.g.:
- Each file upload is asynchronous by itself.
- There are global start and stop events, but it's possible to start additional uploads or cancel running ones at any time.

If you have a use case of handling a single file upload, I suggest to only use the core plugin and not the UI version.
This way you can initiate the upload via `data.submit()` and e.g. disable the file input afterwards.
",blueimp,2013-11-22 08:41:22
2757,2013-11-22 14:53:46,"Good to know, as  I'm already using just the core (jquery.file-upload.js and jquery.iframe-transport.js only). I appreciate your perspective on adding features. :)

iframe-transport handling disabled inputs isn't really the issue. I could always add a `visibility: none` style to the input control for the duration of the activity. The real problem is detecting the duration of that activity. With only file-centric callbacks and not process-centric callbacks, I have been unable to find a good way to do this. One thing I could try is:
1. Set a `visibility: none` style on the file input
2. Set a variable equal to the number of files to be uploaded just before they are uploaded (if I can get this number)
3. In the `done` and `fail` callbacks, decrement this variable
4. When the variable is reduced to 0, remove the `visibility` style

You can see, though, how much hackery is required on my part to make up for the lack of a couple of global start and stop events. I believe you use some kind of in-memory queue to track these uploads. Are there any events I can hook into there that you think would be appropriate for this workflow?
",nathan-alden,2013-11-22 08:41:22
2749,2013-11-19 17:15:29,"hi
help me 

how to add button default image : example

https://www.youtube.com/watch?v=x-GLQ6z1QhA

thnks you :)

http://wordpress.org/plugins/jquery-html5-file-upload/
",unesxavi,2013-11-20 08:55:58
2749,2013-11-20 08:55:57,"Please don't misuse the pull request tracker.
The Wordpress plugin you linked to is a 3rd party product and no official blueimp product.
Please contact the author of that plugin instead.
",blueimp,2013-11-20 08:55:58
2749,2013-11-20 10:39:25,"hi
help me

how to add button default image : example

https://www.youtube.com/watch?v=x-GLQ6z1QhA

thnks you :)

http://blueimp.github.io/jQuery-File-Upload/
",unesxavi,2013-11-20 08:55:58
2749,2013-11-20 11:33:06,"link your reponse :+1: 

https://github.com/blueimp/jQuery-File-Upload/issues/751

that's my problem
",unesxavi,2013-11-20 08:55:58
2740,2013-11-15 03:13:29,"...and the upload file size limit

If your upload limit is say 1MB and you have 100 files of 20Kb you could set the limitMultiFileUploads to 50 to minimize requests. However is there is one 30kb file the batch containing that group will fail. So I coded an uploadSizeLimitMultiFileUploads option that will calculate the max number of files that fit in one request based on a set upload size. I added a 512 bytes overhead for each file for the calculations to be on the safe side. Hope you find these useful, it is very useful if you want to upload 1000s of small files. Thanks

Signed-off-by: Maarten Ottens m@maartenottens.com
",ottens,2013-11-15 12:23:32
2740,2013-11-15 13:22:28,"Thanks for your contribution, @ottens.
I've released a new version based on your pull request (slightly refactored and with a unit test added).
",blueimp,2013-11-15 12:23:32
2740,2013-11-15 13:47:24,"Thanks, glad I could contribute.
",ottens,2013-11-15 12:23:32
2740,2013-12-03 18:15:01,"@ottens, thanks for adding the limitMultiFileUploadSize option. I needed it too and the solution I came up with was not as elegant.
",dougdomeny,2013-11-15 12:23:32
2735,2013-11-13 17:29:50,"The reference to the jquery-ui widget was not loading, so I updated the path to the location of the file included in this repo.
",styson,2013-11-13 19:26:35
2735,2013-11-13 19:26:35,"Thanks for your contribution.
However, the dependency definition as _jquery.ui.widget_ is following a recommended approach and allows to to load it via require.js path configuration.
See the following blog post for an in-depth explanation:
http://gregfranko.com/blog/registering-the-jqueryui-widget-factory-as-an-amd-module/
",blueimp,2013-11-13 19:26:35
2722,2013-11-06 15:38:33,"Discovered while profiling (using Chrome) that the file.size property is expensive. This code change optimizes performance by only accessing the 'size' property once and only if needed.
",dougdomeny,2013-11-06 15:57:55
2722,2013-11-06 16:00:06,"Thanks @dougdomeny, performance improvements are always very welcome! :)
",blueimp,2013-11-06 15:57:55
2715,2013-11-03 23:20:56,"Hi,

I'm implementing the uploader in my AngularJS app and came into tiny problem where I define all the uploader's options in the template:

<S_CODE_TOKEN>

Obviously, the `acceptFileTypes` option defined like this is not a valid `RegExp` object - Angular actually throws an error:

<S_CODE_TOKEN>

I know that I could define the options hash in the controller (like the demo does), but I wanted to keep the controller as small as possible.

Therefore I've made a tiny tweak that allows the `acceptFileTypes` option to be a string that will get converted into `RegExp` object (if it's not empty), so then I can use it like:

<S_CODE_TOKEN>
",michaldudek,2013-11-05 10:02:35
2715,2013-11-05 10:02:35,"Thanks for your contribution, however this change is not necessary, as you can already define all options (including regular expressions) in the template via data attributes, like this:

<S_CODE_TOKEN>
",blueimp,2013-11-05 10:02:35
2715,2013-11-05 10:30:26,"Ah, didn't know that ;) Thanks for that info.
",michaldudek,2013-11-05 10:02:35
2713,2013-11-03 11:07:01,,Corex95,2013-11-05 09:46:24
2713,2013-11-05 09:46:24,"Reported as spam.
",blueimp,2013-11-05 09:46:24
2712,2013-11-03 10:41:26,,Corex95,2013-11-05 09:46:03
2712,2013-11-05 09:46:03,"Reported as spam.
",blueimp,2013-11-05 09:46:03
2704,2013-10-30 15:19:55,"Added support for other data types then xxx/json(text/plain and text/html), fixes issues with IE prior to 10.

please refer to:
https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation

Some prefer to set the data type to text\plain, and some to text\html to prevent from IE to try and save application\json data that outputs into the iframe.
This patch supports both cases.
",BeOleg,2013-10-31 01:02:14
2704,2013-10-31 01:02:14,"Thanks for your contribution.
However, your fix is not necessary if your server returns text/plain for JSON responses.
You can keep the client-side dataType option as ""json"" without any issues.

Also, it's possible to simply parse the results in the done handler without Angular having to guess the returned content-type, if your server returns HTML instead of JSON, which would be rather unusual for an AngularJS application.
",blueimp,2013-10-31 01:02:14
2704,2013-10-31 08:44:04,"I don't think that you are correct, since when returning nested JSON objects from the server, and trying to access them in the done \ fail callbacks, the result is undefined for instance:

<S_CODE_TOKEN>

You should try it yourself.
",BeOleg,2013-10-31 01:02:14
2704,2013-10-31 15:07:50,"Of course I tested it before I posted my comment.
Starting from the original repository, that's what I did as a test setup:
- Change the server upload handler to always return content-type text/plain.
- Change the client-side code to always use the IframeTransport (`forceIframeTransport: true`).
- Add a `$scope.$on('fileuploaddone', function (e, data) {console.log(data.result});` handler and check the result.

And it worked as expected.
",blueimp,2013-10-31 01:02:14
2701,2013-10-30 09:23:02,"Original code is not respecting `$scope` hierarchy - it creates `queue` property even if that property is defined in parent `$scope`. That way it is impossible to manipulate `queue` in parent code (controller or directive) that controls `<file-upload>` directive.

If anything is unclear, I can provide live demo.
",srigi,2013-10-31 00:48:03
2701,2013-10-31 00:48:03,"Your commit doesn't change anything, as the original line already respects any existing queue on the $scope:

<S_CODE_TOKEN>
",blueimp,2013-10-31 00:48:03
2701,2013-11-05 08:30:21,"You're wrong, your code is not respecting prototypal inheritance of scopes in Angular. Let me show you that on screenshots of debugging.

If I define `queue` on `$scope` of Controller, that property is created on that `$scope`:

<S_CODE_TOKEN>

![controller scope](http://img.srigi.sk/jq-file-upload-pr2701/scopeController1.png)

But your code creates new `queue` property shadowing that from Controller
![directive scope](http://img.srigi.sk/jq-file-upload-pr2701/scopeDirective1.png)

Once I add image to uploader, that is inserted to the queue of Directive, not Controller!
![controller scope](http://img.srigi.sk/jq-file-upload-pr2701/scopeController2.png)
![directive scope](http://img.srigi.sk/jq-file-upload-pr2701/scopeDirective2.png)

So, from Controller I'm unable to manipulate `queue`. And now my PR.
Inicialization:
![controller scope](http://img.srigi.sk/jq-file-upload-pr2701/scopeController3.png)
![directive scope](http://img.srigi.sk/jq-file-upload-pr2701/scopeDirective3.png)

You can clearly see, that `queue` is not created on scope of Directive.
Addding file to uploader:
![controller scope](http://img.srigi.sk/jq-file-upload-pr2701/scopeController4.png)
![directive scope](http://img.srigi.sk/jq-file-upload-pr2701/scopeDirective4.png)

As you can see, file is inserted to the `queue` of the Controller. So if I have for example method for clearing queue in my Controller, your code is doing nothing, and my is working as expected.

<S_CODE_TOKEN>

If you're still not convinced I can provide live demo later.
",srigi,2013-10-31 00:48:03
2701,2013-11-05 10:52:46,"Nope, still not convinced.
Nice use of Chrome AngularJS Batarang screenshots though.

Just to assure you that I'm not ignoring your efforts, I just retested setting a queue on the scope from a controller higher up and it worked as expected.
Don't know what's wrong on your setup though.

Anyway, just a little JavaScript coding advice:
JavaScript allows you to do this (which is used to set the queue in the original code):

<S_CODE_TOKEN>

This will not change the original $scope.queue unless it's a _falsy_ value, which includes `undefined`.
",blueimp,2013-10-31 00:48:03
2701,2014-01-05 04:53:20,"+1
Hi I think this can occur if you assign the $scope.queue variable in a deferred way eg via a $http.get 
Initially I had within my controller as per the example app.js.  But to display the initial file list, I changed to
$scope.queue = [];
    $http.get($scope.options.url)
         .then(function(response) {
            $scope.loadingFiles = false;
            if (response.data.files) {
                _.each(response.data.files, function(f){ $scope.queue.push(f); } );
            }
         },
         function() {
            $scope.loadingFiles = false;
         }
    );
",bryanrscott,2013-10-31 00:48:03
2701,2014-02-17 17:19:39,"I'm seeing this exact same issue, but was able to solve it.

Here is the scenario (code examples reduced for brevity):

I have a ""parent"" controller declared using ui-router like so

<S_CODE_TOKEN>

In my controller I have:

<S_CODE_TOKEN>

In my view I have the form similar to the demo:

The `$scope.queue` variable within the fileupload directive appears as empty when loading the page even thou the `$http.get` function actually sets it. I believe this is because it's not inherited form the parent controller.

**NOTE:** _notice that there is no controller declaration in the form tag; the controller is supposed to be declared for the whole view in the ui-router setup._

<S_CODE_TOKEN>

I saw the same behavior as @srigi where the parent scope is not being inherited
![reports-2-2](https://f.cloud.github.com/assets/6163102/2187433/40922648-97f6-11e3-8eec-bbed535cb06b.png)
![reports-5](https://f.cloud.github.com/assets/6163102/2187435/4306e88c-97f6-11e3-9823-01e6b5217d02.png)

.

The way I fixed this is by implicitly telling the form which controller to use:

<S_CODE_TOKEN>

When I do this, the scope is inherited correctly

![reports-4](https://f.cloud.github.com/assets/6163102/2187469/bdcd41ce-97f6-11e3-9d7e-a051a4fc05dc.png)

![reports-6](https://f.cloud.github.com/assets/6163102/2187472/c0cbba0e-97f6-11e3-8382-cc33d66ce5d6.png)

maybe this sheds a bit more light on the subject.
",hectorvs-gxg,2013-10-31 00:48:03
2693,2013-10-29 05:40:07,"i use this change to allow the upload of original selected image
",xchwarze,2013-10-31 00:35:49
2693,2013-10-31 00:35:49,"Thanks for your contribution, but this only changes a preference name.
",blueimp,2013-10-31 00:35:49
2684,2013-10-25 09:40:41,"I've reviewed my approach from the last PR, I hope this is more appropriate. It allows for the application to track its own retry state and not lose an entire upload in the case of a single chunk failing.
",wadtech,2013-10-25 15:16:15
2684,2013-10-25 15:16:15,"Very persistent, that's good, haha! :+1: 

What I meant in my previous comment to your first PR is, that I would handle this in a chunkfail handler outside of the core plugin code.
I think there should be the possibility to handle failures on a case by case basis, as it might not be desired to always retry uploads.

Anyway, I'm sure some people will appreciate your implementation, so feel free to add a link to your repository to the Wiki.
",blueimp,2013-10-25 15:16:15
2684,2013-11-04 09:38:01,"Thanks for the feedback and for your hard work, I'll add a link to the wiki.
",wadtech,2013-10-25 15:16:15
2679,2013-10-23 07:27:04,"...before failing the file in progress.

This small patch allows you to specify maxRetries in the options object which will retry a chunk (PUT) request that many times before causing the entire upload to fail.

In our use-case it adds resilience to uploads where the receiving server may restart services less-than-gracefully, but is useful in the case of a poor network connection combined with a small chunk size.

It obviously only affects chunked uploads.
",wadtech,2013-10-24 04:15:25
2679,2013-10-24 04:15:25,"Thanks for your contribution.
However, I think the retry handling code should be handled in chunkfail listeners, not in the chunked upload code itself. Also, if the upload failed, it should reject the deferred.
A last minor glitch is that I prefer code to pass JSLint validation, although one of these days I probably switch to JSHint.
",blueimp,2013-10-24 04:15:25
2652,2013-10-09 15:24:49,"Not sure if you have an alternate thought on how to solve this problem, but the change is simple enough that kicking it off with a pull request makes sense to me.

**Inspiration:**

In my org, we're planning to ship with [Content Security Policy](https://developer.mozilla.org/en-US/docs/Security/CSP/Introducing_Content_Security_Policy) enabled.

This poses a minor problem with the iframe transport, which uses `src=""javascript:false;""`, leading to the following error (in Firefox, Chrome gives a similar error):

`Content Security Policy: Directive inline script base restriction violated`

**Proposed Solution:**

Allow the user of the iframe transport to configure the iframe's src attribute.  Default to the old behavior, `javascript:false;`.

In my org, all the browsers we plan on supporting handle `about:blank`, so we could go with that, fixing the issue and preventing any error from getting logged.
",ghost,2013-10-09 21:40:34
2652,2013-10-09 22:08:30,"Thanks for your contribution! :+1: 
I've refactored your code changes slightly and renamed the new option to **initialIframeSrc**:
https://github.com/blueimp/jQuery-File-Upload/wiki/Options#initialiframesrc
",blueimp,2013-10-09 21:40:34
2646,2013-10-08 16:31:59,"On line 721, added ELSE statement to handle unsupported file extensions. ( those extensions not listed on the inline_file_types property )
",chongkan,2013-10-08 16:35:54
2646,2013-10-08 16:35:54,"You are closing two brackets but opening only one.
Also, it's unwanted behavior to delete non-inline files, this is not the purpose of the inline_file_types option.
",blueimp,2013-10-08 16:35:54
2646,2013-10-08 17:39:20,"1- I'm not closing 2 brackets, I only closed the ones I opened. Please look more carefully. 
2- Okay, it may not be the purpose of the inline_file_types, we may need a different name for the argument but still, what is the ""desired behavior"" for unwanted files? 
",chongkan,2013-10-08 16:35:54
2646,2013-10-08 17:42:14,"<S_CODE_TOKEN>
",blueimp,2013-10-08 16:35:54
2644,2013-10-08 07:23:26,"Display in error messages values of parameters that are validate.
",unkn0wn404,2013-10-08 16:07:04
2644,2013-10-08 16:07:04,"Thanks for your contribution.
However, there are several issues with your code:
- You are reverting commit 6ba55a8fbc3642909bbe5600b747f5b206931255 which is required to override integer based array indices in the error messages for extendability.
- Your coding style is a little bit inconsistent, with spaces lacking after commas and wrong indenting in one line.
- The error messages should be written in proper english.

Apart from those issues, it's a good contribution and I might merge it when the outstanding issues are fixed.
",blueimp,2013-10-08 16:07:04
2632,2013-10-01 15:18:28,,vkhramtsov,2013-10-01 15:19:18
2632,2013-10-01 15:20:21,"Sorry, it was a mistake
",vkhramtsov,2013-10-01 15:19:18
2607,2013-09-23 14:38:20,"Please merge this request to allow using your library with composer dependency manager (http://getcomposer.org/).
Additionally please register at  https://packagist.org/ and submit your library via https://packagist.org/packages/submit. It will allow to keep your package up-to-date in Packagist.
It would be great if you could add a tag to this repo after merging (it will be marked as a stable release on Packagist).
",vkhramtsov,2013-09-26 00:52:16
2607,2013-09-26 00:52:15,"At the moment I don't have any plans to support more package managers, especially not for the server-side implementations, which I still consider just as demos.

However, feel free to maintain the composer package in your fork.
Thanks for your contribution.
",blueimp,2013-09-26 00:52:16
2607,2013-10-01 06:44:45,"@blueimp We plan to use jQuery-File-Upload via composer package manager not for server side implementation, but for client-side one. That's how we can keep your plugin as an external dependency and have an up-to-date version of the plugin.
Proposed PR does not require updating `composer.json` after each release. Composer will handle it automatically. All you need is to register at https://packagist.org/ and add a service hook to the Github.
Thanks in advance
",maxromanovsky,2013-09-26 00:52:16
2607,2013-10-01 13:28:08,"I suggest you consider using [bower](http://bower.io/) or [npm](https://npmjs.org/) for client-side package management.
",blueimp,2013-09-26 00:52:16
2585,2013-09-11 08:00:49,,denis-sokolov,2013-09-11 14:13:18
2585,2013-09-11 14:13:18,"Thanks for your contribution, @denis-sokolov.

Unfortunately, I won't merge your code for the following reasons:
- The code in your new if block is meaningless, as toUpperCase doesn't affect the value of the string itself, but returns the new value:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase
- method should not be used as name for an input field, as it collides with the method property of the form.
  If you really need to set it, you should define the type.
  Although it would help to check for a valid string here, I think this is unnecessary clutter, as it should only fail in rare edge cases and can easily be remedied by setting the type explicitly.
",blueimp,2013-09-11 14:13:18
2585,2013-09-11 15:15:45,"The fact that I didn't assign the value to the variable is just a stupid oversight. :)
But thanks for kindly explaining it.

As for your decision to not fix the issue, may I carefully suggest you review it once more?
There is nothing in the spec that disallows such a name.
In fact, the [spec clearly states](http://developers.whatwg.org/association-of-controls-and-forms.html#attr-fe-name):

> Any non-empty value for name is allowed [..]

I find it quite likely that such a ubiqutous name as `method` might be used by other developers.
The error that is currently thrown is highly unusual and comes from inside of your upload library.
Do you think that preventing such a possible issue is not useful at all, @blueimp?
",denis-sokolov,2013-09-11 14:13:18
2585,2013-09-11 17:12:21,"OK, agreed, I've added a type check. Thanks again for your contribution.
",blueimp,2013-09-11 14:13:18
2574,2013-09-05 08:34:14,,fabianp,2013-09-05 19:16:56
2574,2013-09-05 19:16:55,"https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-is-the-protocol-http-missing-from-the-script-references-in-the-html-source-code
",blueimp,2013-09-05 19:16:56
2553,2013-08-30 08:01:21,"Fix: merge setting from user to default ones when executing processQueue
",duylam,2013-09-02 19:18:58
2553,2013-08-30 19:30:39,"Thanks for your contribution.
However I fail to see what you code addition achieves what is not already possible by defining data.processQueue?
",blueimp,2013-09-02 19:18:58
2553,2013-09-02 15:20:54,"Hi Tschan,

What my code does is to transfer options from fileupload() to plugins.
Especially, I want to  resize image before uploading to server but the
plugin fileupload-image always uses default value for options maxWidth and
maxHeight while i defined when initilizing

On Saturday, August 31, 2013, Sebastian Tschan wrote:

> Thanks for your contribution.
> However I fail to see what you code addition achieves what is not already
> possible by defining data.processQueue?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/2553#issuecomment-23584262
> .

## 

Sent from Gmail Mobile
",duylam,2013-09-02 19:18:58
2553,2013-09-02 19:18:58,"The image resizing options require a prefix, but you are already able to override them on fileupload initialization or using the option API call:

<S_CODE_TOKEN>
",blueimp,2013-09-02 19:18:58
2553,2013-09-04 16:22:01,"The options imageMaxWidth, imageMaxHeight, maxWidth, maxHeight doesn't work (I already set disableImageResize = false), I debug in Google Chrome and see that fileupload-image only uses default values. I'm not sure how it does in your environment but I think this is a bug
",duylam,2013-09-02 19:18:58
2553,2013-09-04 16:31:41,"Please go to the demo here:
http://blueimp.github.io/jQuery-File-Upload/
The server-side is currently unavailable, but it doesn't matter for this test.

Open Chrome's developer console and execute the following line:

<S_CODE_TOKEN>

Then select an image file (without EXIF thumbnail) and you will see the preview image is only 10 pixels wide.
",blueimp,2013-09-02 19:18:58
2553,2013-09-07 19:07:06,"Look like there is a undocumented note in demo, I use imageMaxWidth when
initializing the widget plugin but it doesn't work while in demo you set it
after initialized. It's ok if you think it's not a bug, thank for your
patient

On Wed, Sep 4, 2013 at 11:32 PM, Sebastian Tschan
notifications@github.comwrote:

> Please go to the demo here:
> http://blueimp.github.io/jQuery-File-Upload/
> The server-side is currently unavailable, but it doesn't matter for this
> test.
> 
> Open Chrome's developer console and execute the following line:
> 
> $('#fileupload').fileupload('option', 'imageMaxWidth', 10);
> 
> Then select an image file (without EXIF thumbnail) and you will see the
> preview image is only 10 pixels wide.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/2553#issuecomment-23803799
> .

## 

Thanks,
Duy Lam
",duylam,2013-09-02 19:18:58
2553,2013-09-07 20:11:24,"The demo is an exact copy of the master repository.
I can assure you that initialising the image scaling options should work on every setup.
If you want, we can try to find out why it doesn' work on your setup.
",blueimp,2013-09-02 19:18:58
2553,2013-09-09 03:33:57,"Great. I will make a demo code for you sometime next week

On Sun, Sep 8, 2013 at 3:11 AM, Sebastian Tschan
notifications@github.comwrote:

> The demo is an exact copy of the master repository.
> I can assure you that initialising the image scaling options should work
> on every setup.
> If you want, we can try to find out why it doesn' work on your setup.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/2553#issuecomment-24008742
> .

## 

Thanks,
Duy Lam
",duylam,2013-09-02 19:18:58
2550,2013-08-29 15:41:45,"If someone passes a ""headers"" options to fileupload(), this object get overwritten across multiple files upload because the same object is being re-used.
",rslinckx,2013-08-29 18:03:38
2550,2013-08-29 18:09:31,"Thanks for your contribution. :+1: 

btw. the OR-condition was not necessary as jQuery ignores all non-objects for the second argument.
",blueimp,2013-08-29 18:03:38
2533,2013-08-23 20:54:52,"There is already event onDragOver which makes possibility to style dropzone while dragging, but there is not event to remove that style if drag is cancelled. This is an update which adds event onDragLeave for that purpose.
",piotrmocko,2013-08-23 21:57:20
2533,2013-08-23 21:57:20,"Please have a look here:
https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-does-the-plugin-only-provide-a-dragover-event-not-other-drag-related-events

See also #836
",blueimp,2013-08-23 21:57:20
2533,2013-08-24 05:45:04,"I have checked your docs but I have missed that. Thank you. It is working as expected.
",piotrmocko,2013-08-23 21:57:20
2533,2013-08-24 17:48:10,"No worries, I've only added the FAQ entry after your issue post.
",blueimp,2013-08-23 21:57:20
2501,2013-08-07 23:54:35,"_(apologies in advance, this is my very first pull request)_

If numberOfFiles === 0,  then the ""maxNumberOfFiles"" validation check
never fails, even if data.files.length exceeds the max (because 0 is
'falsy', the rest of the expression evaluates to false).   My proposed
fix is to  check the type of numberOfFiles.
",nobodyman,2013-08-08 00:18:22
2501,2013-08-08 16:25:32,"Ah, good catch.  I hadn't considered the effect of not using the UI plugin.  Many thanks, Sebastian.  --Jim deVos
",nobodyman,2013-08-08 00:18:22
2501,2013-08-08 16:28:28,"You're welcome and thanks again for pointing me to this issue. :)
",blueimp,2013-08-08 00:18:22
2500,2013-08-07 17:11:57,"Fix the file size formatting functions ,  The differs significantly from real its value in large files when 1000 used for KB size
",mkoosej,2013-08-07 17:34:02
2500,2013-08-07 17:34:01,"Please have a look here:
https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-does-the-plugin-display-1000-bytes-as-1-kb-and-1000000-bytes-as-1-mb
",blueimp,2013-08-07 17:34:02
2498,2013-08-07 10:57:50,"This way iframe-transport can be always included Instead of conditionally
",luigiberrettini,2013-08-07 13:39:40
2498,2013-08-07 13:39:40,"The Iframe Transport is only used when the dataType is set to `iframe json`, for example.
It can already be included without any side effects for all browsers.
Your code change would break the forceIframeTransport option, as it would prevent any browser with support for XHR file uploads to include the code.
",blueimp,2013-08-07 13:39:40
2463,2013-07-25 13:56:29,"Do not rely on the $$phase variable anymore.

Since fileUpload is created as a provider, the $timeout service has to be invoked via angular.injector.

Fix for this issue:
https://github.com/blueimp/jQuery-File-Upload/issues/2453
",gaelduplessix,2013-07-25 14:04:57
2463,2013-07-25 14:09:08,"Thanks a lot! :)
",blueimp,2013-07-25 14:04:57
2463,2013-09-04 16:39:05,"Still getting this issue even after the fix, with the updated source:

Error: $digest already in progress
    at Error (<anonymous>)
    at g (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:84:377)
    at Object.e.$apply (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:88:437)
    at e (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:95:38)
    at p (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:98:123)
    at XMLHttpRequest.t.onreadystatechange (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:99:259)
    at http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:99:323
    at n (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:95:492)
    at l (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:94:218)
    at Function.l.(anonymous function) (http://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js:96:405) 
",BeOleg,2013-07-25 14:04:57
2452,2013-07-22 21:52:41,"Line 949. By doing this, it'll be easier for server-side processing, ie, for saving the files info into database. Now we can do:
<?php
$upload_handler = new UploadHandler();
foreach( $upload_handler->files as $f) {
   // save to DB $f->url, $f->name, etc...
}
?>
",kidino,2013-07-22 22:55:23
2452,2013-07-22 22:55:23,"If you need access to the files array of each POST request, I suggest you override the post method:

<S_CODE_TOKEN>
",blueimp,2013-07-22 22:55:23
2450,2013-07-22 16:45:17,"When I try to upload multipart mixed (JSON + files), I have this error : NS_ERROR_CANNOT_CONVERT_DATA.

After investigation, I found that the problem came from the data submition when field.value is an array.
",anfleurance,2013-07-22 22:44:13
2450,2013-07-22 22:44:13,"Encoding all form values with encodeURI will likely break any server-side applications which do not expect encoded values. Also, the browser should already take care of encoding those values for the chosen transport.

Since you get this problem on IE8 / FF9-10, I guess it has to do with the Iframe Transport, which uses simple hidden input fields for the formData, which probably don't support setting their values to an Array object.

So I suggest it's up to the developer who sets the formData object to make sure the values can be submitted with a standard HTML form (which is used by the Iframe Transport).

This information is probably very useful for the Wiki, generally documentation and known issues about the IFrame Transport would be a welcome addition. I'll write if myself if I find the time.
",blueimp,2013-07-22 22:44:13
2442,2013-07-18 10:14:11,"the patch is basically for line 161. The other lines must have had trailing spaces.
",jesucarr,2013-07-18 17:16:34
2442,2013-07-18 17:20:32,"Thanks for your contribution, @jesucarr ! :)
",blueimp,2013-07-18 17:16:34
2414,2013-07-08 12:42:33,,thomas-netlor,2013-07-08 22:19:56
2414,2013-07-08 22:21:57,"Thanks for your contribution.
However I think it's not a good idea to conditionally add a security feature.
In my opinion it's better the application fails so the developer knows that something is missing (i.e. the header module) or he has to find another way to secure the application.
",blueimp,2013-07-08 22:19:56
2368,2013-06-15 20:48:16,,Snuffaluffagus,2013-06-16 06:22:38
2368,2013-06-16 06:22:38,"Please see #2366.
",blueimp,2013-06-16 06:22:38
2367,2013-06-15 20:47:41,,Snuffaluffagus,2013-06-16 06:22:23
2367,2013-06-16 06:22:23,"Please see #2366.
",blueimp,2013-06-16 06:22:23
2365,2013-06-15 11:32:43,,MasterXX,2013-06-15 18:04:13
2365,2013-06-15 18:04:13,"Thanks for your contribution.

Please add a page to the [Wiki](https://github.com/blueimp/jQuery-File-Upload/wiki) explaining how to integrate your design.
",blueimp,2013-06-15 18:04:13
2365,2013-06-15 18:07:24,"Read reaction here: http://pastebin.com/qn0HhQvE
",MasterXX,2013-06-15 18:04:13
2354,2013-06-13 14:15:21,"This PR adds the `blueimp` namespace to the AngularJS directives as recommended by the AngularJS team to avoid naming conflicts with other third party directives (especially names like `progress` and `preview`).

The changes only impact the code related to AngularJS and the corresponding example has also been updated and tested locally.

Example:
`<div data-progress>` is now refactored to `<div data-blueimp-progress>`
`<div data-preview>` is now refactored to `<div data-blueimp-preview>`
",jvandemo,2013-06-13 18:32:54
2354,2013-06-13 16:37:24,"The original reason why I didn't put a namespace in front of the directives is that I think it will clutter the templates too much, especially when using the ""data-"" prefix as well (which are admittedly only necessary for HTML validation).

So my suggestion now is, instead of using vendor namespaces like ""blueimp"", to use module feature namespaces.
That is, the fileupload (or file-upload for consistency with the Controller and Provider names) directive would keep it's name, without any additional prefix.
The idea is that it is unlikely that a project would include more than one module which provides file upload functionality.
The other directives, like progress and preview would then get ""file-upload-"" as namespace prefix.

What do you think?
",blueimp,2013-06-13 18:32:54
2354,2013-06-13 16:53:37,"I understand your worry about the cluttering but I personally think the benefit is greater than the downside.

So my personal suggestion would be to keep the `blueimp` in there and use `blueimp-file-upload' for the following reasons:

**Clarity**
Reading the template will make it unambiguously clear that it is related to your component(s)

**Modularity**
It allows you to bundle a parent `blueimp` module later on if you ever decide to add more components e.g. suppose you decide to write a `blueimp.fileParser` module with it's own directives, then you could create a parent `blueimp` module that contains both modules and has the `blueimp` prefix for each tag:

<S_CODE_TOKEN>

Someone could then simply use the `blueimp` module and benefit from all the directives of both modules.

So to keep things clear and open for the future, I would use `blueimp-file-upload` if I were you...
",jvandemo,2013-06-13 18:32:54
2354,2013-06-13 17:02:24,"OK, but with the namespace being file-upload, could you live with that?
",blueimp,2013-06-13 18:32:54
2354,2013-06-13 18:32:54,"OK, I've decided to go along with the feature namespace ""file-upload-"" instead of the vendor namespace ""blueimp-"" for the directives.
The module itself is still namespaces as blueimp.fileupload.

I've also kept the directive definitions themselves deliberately simple, so it is relatively easy to replace them with namespaced versions.
",blueimp,2013-06-13 18:32:54
2354,2013-06-13 19:29:00,"Ok, do you want me to make the changes or will you implement them yourself? Thanks!
",jvandemo,2013-06-13 18:32:54
2354,2013-06-13 19:31:01,"I already pushed them. Thanks for your understanding.
",blueimp,2013-06-13 18:32:54
2354,2013-06-13 20:32:54,"No, thank you for sharing your awesome work! Much appreciated!
",jvandemo,2013-06-13 18:32:54
2351,2013-06-12 20:10:47,,martco,2013-06-12 20:48:42
2339,2013-06-10 00:07:09,"basic-plusForm.html adds 'form' fields to the upload request; main-plusForm.go saves the form in the datastore and the file in the blobstore.

(great work blueimp!)
",ghost,2013-06-12 00:23:46
2339,2013-06-12 00:23:46,"Thanks for your contribution.
However at the moment I don't plan to incorporate additional examples into the main repository branch.
But if you like, you could add a page to the Wiki with documentation about your implementation (the wiki is user editable).
",blueimp,2013-06-12 00:23:46
2328,2013-06-02 08:13:04,,itaykinnrot,2013-06-05 17:22:56
2328,2013-06-05 17:25:47,"Thanks for your contribution.

Although I really appreciate it, there were some key parts lacking:
- Browser capability tests, e.g. for createObjectUrl.
- Proper JSLint validation
- Proper comments.

I've decided to add my own implementations of preview plugins for both video and audio.
",blueimp,2013-06-05 17:22:56
2321,2013-05-31 10:47:40,,thanpolas,2013-05-31 16:18:07
2286,2013-05-17 22:38:02,,jls2933,2013-05-18 01:06:46
2286,2013-05-18 01:08:50,"Thanks for your contribution.
However your patch was incomplete, as there are some workarounds needed to make XML responses work cross-browser with the iframe transport.
Also, you added the converter as ""iframe script"", which is already used for the script converter.
Anyway, the implementation I added should do the trick.
",blueimp,2013-05-18 01:06:46
2286,2013-05-18 10:15:56,"Oh yes, sorry. I had done almost same corrections last night but i didn't published them before i leave.
Thank you ! :)
",jls2933,2013-05-18 01:06:46
2270,2013-05-13 17:31:01,"This new overridable option method allows server responses to be
refactored into a compatible files array.
",david-hollifield,2013-05-13 21:26:03
2263,2013-05-11 14:57:18,"dragleave is also one of the parts of File API
",kritik,2013-05-13 20:35:10
2263,2013-05-13 20:35:10,"Please see #563 and #836.
",blueimp,2013-05-13 20:35:10
2263,2013-05-14 04:56:35,"and if so many people a trying to pull this request, then maybe it's more obvious that fileuploader could handle dragleave?
",kritik,2013-05-13 20:35:10
2263,2013-05-14 13:16:45,"I don't doubt that it's useful for some users, however it's simply not a necessary feature.
Also, there are more drag events which could be supported, but adding them all would just increase the code size without adding any real benefit:
https://developer.mozilla.org/en-US/docs/DragDrop/Drag_and_Drop#events

Anyway, you could add your own plugin extension to add dragleave handling to the plugin:
https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions
",blueimp,2013-05-13 20:35:10
2263,2013-05-14 13:23:47,"oh, I see that they can be added. I'll add a comment into wiki that user should handle those actions on his own ;)
",kritik,2013-05-13 20:35:10
2257,2013-05-08 11:32:01,"`memory_limit` being set too low was causing my uploads to fail silently
",mattpotts,2013-05-08 11:56:02
2257,2013-05-08 11:56:02,"Thanks for your contribution.
But I think this is rather something for the FAQ, then a default option.
",blueimp,2013-05-08 11:56:02
2253,2013-05-03 06:40:49,,codler,2013-05-03 22:46:04
2229,2013-04-23 20:57:20,"Fix for issue #2227. 
",naftulikay,2013-04-25 09:56:59
2229,2013-04-25 09:56:59,"The Content-Length header should be set automatically by the browser, at least it does so in my tests.
",blueimp,2013-04-25 09:56:59
2228,2013-04-23 18:47:25,"Fix for issue #2227. Sends a `Content-Length` header with PUT requests and sends a `Content-Length` header in each multipart file part.
",naftulikay,2013-04-23 19:19:57
2193,2013-04-05 14:26:00,"Instead of failing an upload with a cryptic error (""JSON unexpected end of data"" or something similar), we can display a more informative message to the user, and an even more informative one in the logs.
",lmartelli,2013-04-08 20:34:06
2193,2013-04-08 20:37:58,"Thanks! :)
",blueimp,2013-04-08 20:34:06
2193,2013-04-08 21:17:00,"For your notice, I had to fix uploading non-image files with this commit:
58c037b7e7471caa769b950fc53755f4eb2a0837
",blueimp,2013-04-08 20:34:06
2187,2013-04-04 08:09:26,"Adding ""cropped"" => true allow to crop your resized image keeping ratio.
",vinzcelavi,2013-04-04 18:48:20
2187,2013-04-04 10:18:34,"Hi thats a good suggestion, but why not just add this crop option to all images ? So that it doesnt need to be a square ? My use case was that i had varying image dimensions and i needed to crop to 1024x680 etc etc... so my function is like this (can be square or notlike in my case:

<S_CODE_TOKEN>

Now my image versions look like this:

<S_CODE_TOKEN>

Sorry for the copy paste, hope this helps
",bgillieron,2013-04-04 18:48:20
2187,2013-04-04 10:28:47,"It seems to be exactly the same thing... My changes can do square thumbnails or not.
In my case I have 220x120 pixels thumbnails cropped, not necessary square.

You must be mistaken.
",vinzcelavi,2013-04-04 18:48:20
2187,2013-04-04 10:49:30,"oh ok, I guess if the end result is the same then all ok. I must have gotten confused with your naming conventions in the code without actually looking if it could apply to all images (oops):

<S_CODE_TOKEN>
",bgillieron,2013-04-04 18:48:20
2187,2013-04-04 11:11:39,"Yes, it's my bad. Not the appropriate var name, you are alright.
",vinzcelavi,2013-04-04 18:48:20
2187,2013-04-04 18:49:28,"Thanks for your contribution.
However I've decided to add my own version of the crop option, which needs somewhat less code.
",blueimp,2013-04-04 18:48:20
2187,2013-04-04 22:04:29,"Ok no problem!
",vinzcelavi,2013-04-04 18:48:20
2184,2013-04-03 18:01:26,"I needed file progress support for IE 7, 8, and 9, so I added an ""apc"" option. When the user has apc enabled and the upload falls back to the iframe mode (< IE9), apc will kick in and update the progress.
- This should not affect modern browsers in any way.
- This can't give a full upload progress indicator so the main progress bar is using the current file's progress.

Not sure if you want to merge this feature or not. I can keep it in a separate fork and maintain it if necessary.
",teynon,2013-04-03 18:31:26
2184,2013-04-03 18:31:26,"Looks very interesting!

At this point I won't merge it, however it's still possible I might do so at a later stage.
In any way I would be grateful if you could maintain it in your fork.

Also, feel free to add some information and a link to your project here:
https://github.com/blueimp/jQuery-File-Upload/wiki/PHP-Session-Upload-Progress

Some suggestions:
- Instead of adding your changes to the basic plugin file, I would rather create a plugin that extends the basic version, similar to the File Processing plugin.
  A rather short guide on how to write plugin extensions can be found here:
  https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions
- Instead of creating a separate _onAPCProgress method, I would try to use the existing _onProgress method and just pass the APC response parameters to it.
- It is not necessary to clear the timeout on each done, fail and always callbacks, since _onAlways is always called when either of _onDone or _onFail callbacks is called.

Best regards and thanks for your contribution. :)
",blueimp,2013-04-03 18:31:26
2184,2013-04-03 19:14:19,"Thanks, I pulled all those changes out and created a -apc plugin. Much better. (Plus no conflicts for merge.) I'll keep it separate, but up to date with your repository for now.
",teynon,2013-04-03 18:31:26
2184,2013-04-03 20:40:01,"Thanks a lot, as well for your Wiki update. :+1: 
",blueimp,2013-04-03 18:31:26
2182,2013-04-03 13:22:50,"I found a need for `dragleave` event. I know it can be handled outside of the lib, but for the sake of  completeness since we have `dragover` and `drop`, I thought it might as well include `dragleave`.
",bojand,2013-04-03 14:55:10
2182,2013-04-03 14:55:09,"First, thanks for your contribution.

However, if you really want the complete set of drag&drop events, you'll have to support the list here:
https://developer.mozilla.org/en-US/docs/DragDrop/Drag_and_Drop#events

Since it is easy to add drag&drop listeners with jQuery alone and only dragover and drop are required by the fileupload functionality itself, I chose not to add any additional listeners.
If you can provide a use case that proves it would be a welcome feature, I'll consider it.
",blueimp,2013-04-03 14:55:10
2169,2013-03-26 16:19:42,"When a user has a lot of files they want to delete, they might check them all and click delete. The delete function will start an ajax request and remove the item from the list. This is misleading, since the ajax request may or may not have completed.

This problem is made worse by browsers limiting the maximum number of simultaneous ajax requests. If I select 10 files and click delete, the files will disappear, representing to me that they are gone. However, if I leave the page immediately following and come back, there will still be four files that didn't complete the ajax request because of the built in browser restrictions.

This commit moves the file inside of the ajax.done function so that it isn't removed until the actual request has been completed.

P.S. First pull / fork ever with github. If I should do something different or better, let me know.
",teynon,2013-03-27 15:01:11
2168,2013-03-26 16:16:14,"...ilable in all modern browsers, with backwards compatable option for IE < 9

http://jsperf.com/js-timestamp-retrieval-options

https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now
https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTime
![Screen shot 2013-03-26 at 12 20 10 PM](https://f.cloud.github.com/assets/467885/303926/1b8d9aca-9631-11e2-831a-48cc3b8635a8.png)
",cflynn07,2013-03-27 14:50:57
2164,2013-03-25 10:02:10,"This option enable php server to generate a random filename.
",mos12,2013-03-27 15:14:02
2164,2013-03-27 15:14:01,"Sorry, but this feature can easily be added by overriding the get_file_name method in a subclass of the UploadHandler.
",blueimp,2013-03-27 15:14:02
2164,2013-05-01 12:09:50,"I like the feature but think the implementation could use some more work. 

@blueimp, I feel like I'll break chunked uploads if I overload `get_file_name` because I can't clearly make out what `get_unique_filename` is doing. Have you got any advice on how to easily allow random filenames? Much appreciated
",ncatanchin,2013-03-27 15:14:02
2164,2013-05-01 13:26:44,"If you want random filenames and chunked uploads, I suggest you store the generated filename in the session.
",blueimp,2013-03-27 15:14:02
2146,2013-03-18 15:32:43,"Saw several requests on reloading the whole list without the page without an answer how to do it. As I had the same issue I added this. It works but I'm just a JS beginner.
Would be nice if someone could review this if it is valid and makes sense.
",steros,2013-03-18 15:40:25
2146,2013-03-18 15:40:25,"Sorry, but from what I can see, to create your reload method you simply copied a part of the done callback and replaced the append call with a line that completely replaces the contents of the file container.
To achieve that, you could simply .empty() the files container and then call the done callback with your parameters, without having to copy so much code.
",blueimp,2013-03-18 15:40:25
2143,2013-03-16 10:56:09,,ramonafortson,2013-03-16 18:12:54
2095,2013-02-19 03:52:27,"Update jQuery URL address, origin address can not load jQuery.
",ikbear,2013-02-20 03:07:13
2095,2013-02-20 03:07:13,"See https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions

#514
",ikbear,2013-02-20 03:07:13
2094,2013-02-18 18:33:28,"The text for handling errors like file exceeding maxFileSize where harcoded in the JS and it can't be changed.

Now, when you initialize the fileupload, you can provide a custom message for each restriction.

E.g.

<S_CODE_TOKEN>

If you want more customization, the errors can also be functions that receives the file that triggered the error and the options of the fileupload

<S_CODE_TOKEN>

You can personalize `maxFileSizeError`, `minFileSizeError` and `acceptFileTypesError`, but is trivial to add more messages.

If you don't provide a custom message error, the error messages are the plain old messages (""File is too big"", ""File is too small"" and ""Filetype not allowed"")
",cibernox,2013-03-03 12:13:45
2094,2013-02-18 18:45:42,"If this pull request is merged, i'll update the wiki pages with the new options
",cibernox,2013-03-03 12:13:45
2094,2013-03-03 12:13:45,"To customize the error messages, no changes to the JS files are necessary.

I suggest wrapping the file.error output in the templates with a call to your global translation function (e.g. gettext or messageformat):

<S_CODE_TOKEN>
",blueimp,2013-03-03 12:13:45
2094,2013-03-03 20:15:28,"But that approach, just pass the default error message to a translate function that search for an alternative text, does not allow to easily get the file and the jquery uploader options to create more customizable error messages.
See the second example.
And since you still can set a simple string or just rely in the usual default message, I don't see any downside in add a couple options.
",cibernox,2013-03-03 12:13:45
2094,2013-03-03 20:50:41,"You have access to both the file and the uploader options in the templates and can pass them as parameters:

<S_CODE_TOKEN>
",blueimp,2013-03-03 12:13:45
2094,2013-03-03 22:35:43,"I've never used a translate function, but you said that it is suposed to be a global function. So, that global function needs to know how to handle the given parameters for every translation in your application. That's a lot of variability. Some translations will need no parameters, other may need a lot.

I know is possible, but seems overcomplicated. I'll search for information about this way of manage translations.

Thanks
",cibernox,2013-03-03 12:13:45
2094,2013-03-03 22:40:17,"Your translate function doesn't necessarily have to be global, it could also be a property of the File Upload options object.
It only needs to be accessible in the template scripts, that is all.

If you want a personal recommendation, I suggest using messageformat, a very flexible translation framework:
https://github.com/SlexAxton/messageformat.js
",blueimp,2013-03-03 12:13:45
2094,2013-04-21 05:25:33,"I was able to customize the default error message by modifying  the jquery.fileupload-jui.js to use HTML5 data attributes for the messages.  I don't know if people would be interested in seeing what I did.  If so I can create  pull request.  here is snippet of the code 

<S_CODE_TOKEN>
",malplayer,2013-03-03 12:13:45
2094,2014-01-16 12:52:19,"Oh it's a pitty blueimp, that you did not include such a useful and flexible code. I was also looking for it (working for a magento project). Now I had to manually include the changes made by cibernox because I need it. 

I dont want to use a new translation framework for this great fileupload solution. Thanks for this great solution! But I really dont like translation frameworks that base on a default language without using variables. Just one example:

If you hard-code the following ""translation"" for a company slogan everywhere:
""we have the best things""

Now the company changes the slogan to ""We are the best"". You now really want to replace ALL occurences of ""we have the best things"" with ""We are the best""? Or just change the translation for ""we have the best things"" in ""We are the best""? Would be really confusing. No that doesnt make sense in my opionion. Why not just use a variable like ""label.slogan"" which wont change at all. Then you dont have to touch your code and just change in your variable files the translation for ""label.slogan"".

I have the same problem (translation concept - dont see any opportunity) with magento. There the translation is done the same way. Hopefully they change it in v2.

Edit: OK I have to take back my critic. Seems that this is now included in jquery.fileupload-validate.js
messages: {
                maxNumberOfFiles: 'Maximum number of files exceeded',
                acceptFileTypes: 'File type not allowed',
                maxFileSize: 'File is too large',
                minFileSize: 'File is too small'
            }
",silence-cube,2013-03-03 12:13:45
2094,2014-01-16 16:07:15,"@silence-cube:
Yes, localization has been incorporated into the basic plugin, albeit with a slightly different approach as what @cibernox originally suggested in his pull request.
It's even possible to override the translation function to provide your own translation framework:
https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload.js#L144
",blueimp,2013-03-03 12:13:45
2094,2015-12-29 17:29:03,"@blueimp do you mean https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload.js#L176?

I am wondering how to use the `i18n` function with the second parameter `context`. Can you give a simple example?
",dzhuang,2013-03-03 12:13:45
2082,2013-02-12 08:54:13,"Currently chunked uploading is not passing the updated options to `_onDone`, which causes the test at the beginning to fail (because `options.loaded` and `options.total` are missing), which then causes an extra progress event to be sent with `loaded` == `total * 2`.

By passing the updated options to `_onDone`, everything works as expected.
",aparajita,2013-03-03 11:53:12
2082,2013-02-15 19:33:30,"I was seeing this error as well (200% progress). This fix seems to work.
",rabink,2013-03-03 11:53:12
2082,2013-03-03 11:54:01,"Thanks for your contribution.
Sorry for not merging your code, but there was a simpler fix by just testing for options.uploadedBytes.
",blueimp,2013-03-03 11:53:12
2082,2013-03-03 15:15:04,"No need to apologize, you know the code a little better than me!
",aparajita,2013-03-03 11:53:12
2082,2013-03-03 15:15:55,"Thanks! :)
",blueimp,2013-03-03 11:53:12
2068,2013-02-06 02:28:57,"Just one comment, but it can be usefull...
",commanddotcom,2013-03-03 11:23:35
2068,2013-03-03 11:23:35,"Thanks for your contribution,
however in my tests there are no problems with any Unicode characters.
This issue might be apparent on Windows servers only, but I would rather use utf8decode instead of urlencode.
",blueimp,2013-03-03 11:23:35
2031,2013-01-22 23:00:57,"In jQuery 1.9, jQuery.fn.serializeArray was changed to adhere more to the HTML5 spec. However, once these changes were made, file inputs began to be included. The result is that this adds an extra file parameter to all S3 payloads in jQuery-File-Upload, causing a 400. For other uploads, this may not be big deal, but given S3's strict parameter validation, S3 uploads are not possible without this fix. 

Related on the forums:
https://groups.google.com/forum/#!topic/jquery-fileupload/r0aEXHk22xQ
https://groups.google.com/forum/#!topic/jquery-fileupload/cDc5yTrclkk

Opened jQuery ticket (jQuery will ignore file inputs in 1.9.1):
http://bugs.jquery.com/ticket/13306

Test case:
http://jsbin.com/orurap/1/ (open a console to see the difference between 1.8 and 1.9 serializeArray)
",timmywil,2013-01-23 10:56:05
2031,2013-01-23 11:04:39,"Thanks, Timmy! :+1: 
",blueimp,2013-01-23 10:56:05
2002,2013-01-12 01:01:35,"Since [PHP-BUG] #53180 post_max_size can be set to 0 (for unlimited POSTs)

http://svn.php.net/viewvc/?view=revision&revision=304958
",mattclegg,2013-01-13 20:28:38
1972,2012-12-29 11:23:04,"Having this field in the add callback data allows the client to do something special when an iframe transport is being used such as show a spinner instead of a progress bar.
",pmckinnon,2012-12-29 11:45:46
1972,2012-12-29 11:23:48,"I couldn't find anyway to detect this from the current data object, but it might be there somewhere.

Alternatively, you might want this to be abstracted into something like data.supportsProgress

Thanks!
",pmckinnon,2012-12-29 11:45:46
1972,2012-12-29 11:45:46,"You can detect it globally. With the default options, checking **$.support.xhrFormDataFileUpload** is enough (which is simply a check for **window.FormData**:

<S_CODE_TOKEN>

if you want to take the options into account, you could simply copy the **isXHRUpload** method body:

<S_CODE_TOKEN>
",blueimp,2012-12-29 11:45:46
1972,2012-12-29 12:16:45,"Yeah, I had copied the fileupload implementation originally, but it feels a little off because the client code has to know a fair amount of inside info about why iframe transport would be used.
",pmckinnon,2012-12-29 11:45:46
1971,2012-12-29 10:38:08,"When the iframe transport is used for a cross-origin upload, the iframe response body canot be accessed from javascript.
",pmckinnon,2012-12-29 10:52:34
1971,2012-12-29 11:01:20,"Thanks for your contribution, this change definitely makes sense.
",blueimp,2012-12-29 10:52:34
1939,2012-12-16 12:35:36,"Also keeps parallel requests to the server at bay thus saving server resources.
The approach taken here is not 100 percent reliable but reduces
out of order uploads a lot.

See also https://groups.google.com/forum/#!searchin/jquery-fileupload/appengine/jquery-fileupload/osntyW7yDLg/jRtduHTHw6UJ

I'm not sure if 500 ms delay per upload is the right time - maybe this should be configurable?
I'm seeing the out of order upload behaviour with a `submit` AJAX hook on AppEngine - so this might be the reason I see out of order uploads.

Whatever I think wiring the click() events not to fast is a good thing.
",mdornseif,2012-12-16 13:01:56
1939,2012-12-16 13:01:56,"Thanks for your contribution, @mdornseif .
However, I don't think this is the best approach for this issue.

To limit parallel requests to the server, you can make use of the built-in option **limitConcurrentUploads** and set it to the desired number of parallel requests.

To make sure the uploads are done in order, you can set the built-in option **sequentialUploads** to _true_.
",blueimp,2012-12-16 13:01:56
1933,2012-12-12 20:16:27,"I tried to use your plugin with a project which backend is based on Parse ( https://parse.com ). They support file uploads using their REST API via POST, but they don't support multipart. 

They don't support the 'Content-Disposition' header either, and it was automatically added when multipart option was set to false. This commit solves that problem, being able to choose whether we want to use the 'Content-Disposition' header or not, when multipart option is set to false.
",MiguelCarranza,2012-12-12 21:23:40
1933,2012-12-12 21:23:40,"Thanks for your contribution, @MiguelCarranza .
However, there is no need for another option, as you can adjust the headers via the **send** callback:

<S_CODE_TOKEN>
",blueimp,2012-12-12 21:23:40
1933,2012-12-12 22:04:45,"Yes, that will definitely work but I thought it was a better idea to have it configurable rather than adding the header and deleting it afterwards. But I'll do it that way to be able to upgrade in the future. Thanks!
",MiguelCarranza,2012-12-12 21:23:40
1933,2013-03-06 17:38:11,"Thanks for this, helped me out!
",nagiek,2012-12-12 21:23:40
1933,2013-09-19 06:16:57,"@MiguelCarranza Could you share the code you used to integrate with parse.com?
",torlanco,2012-12-12 21:23:40
1933,2013-09-19 16:53:56,"Sure thing. I hope this helps

<S_CODE_TOKEN>
",MiguelCarranza,2012-12-12 21:23:40
1930,2012-12-12 05:02:11,,egawahyu,2012-12-12 08:36:21
1919,2012-12-07 15:38:43,"Hi, not much of a contribution, sorry for that. We got a lot of complaints from safari users recently not being able to submit more then one picture at a time.

Turned out to be a ""bug"" in Safari: Safari on IOS6 is caching post requests. This fix worked for us, but it is a revolting hack in the URL to which we're submitting. Spent a lot of hours on this one.

Reproduce:

Safari, latest OSX, using either:

<S_CODE_TOKEN>

or piece-by-piece uploading.

Thank you very much for releasing and improving your software!
It is in use by millions of people in belgium!
",mvhenten,2012-12-09 22:45:44
1919,2012-12-09 22:45:44,"Thanks for your contribution, @mvhenten.
I'm aware of this bug in mobile Safari, however there is a server-side solution which doesn't require any client-side hacks:
Sending the following header (whcih is included in the provided server-side upload handlers) prevents this issue:

<S_CODE_TOKEN>
",blueimp,2012-12-09 22:45:44
1919,2012-12-09 22:53:40,"Hi, thanks. We basically serve that header for all appropriate GET's but
never for POST ( since of course spec says POST must never be cached )
We have a mostly custom implementation/backend ( Perl based ) so I never
looked at the backend code.
Wish I had tough, this has cost me a lot of hours debugging. Will see if we
can set the header, it's a nicer hack :0)

On Sun, Dec 9, 2012 at 11:45 PM, Sebastian Tschan
notifications@github.comwrote:

> Thanks for your contribution, @mvhenten https://github.com/mvhenten.
> I'm aware of this bug in mobile Safari, however there is a server-side
> solution which doesn't require any client-side hacks:
> Sending the following header (whcih is included in the provided
> server-side upload handlers) prevents this issue:
> 
> Cache-Control: no-cache
> 
>  —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/1919#issuecomment-11177314.
",mvhenten,2012-12-09 22:45:44
1897,2012-11-28 09:45:54,"This enables dragging and dropping of hyperlinks and plain text to input fields inside the file upload area. Default action over `input` and `textarea` elements is only prevented when `event.dataTransfer` contains files.

How to test/reproduce:
- drag and drop hyperlink from e.g. browser address bar to a text input inside droppable area (say, I have a chat input with file upload functionality)

Current master behavior: Nothing happens.
Expected behavior: Input contains the dragged hyperlink as text.
",lautis,2012-11-28 10:33:55
1885,2012-11-22 12:26:30,"This allows extended classes to handle files after being uploaded. An example use case is when files need to be zipped, or metadata inserted into a database.
",pedrofaustino,2012-11-22 15:01:07
1885,2012-11-22 15:01:07,"This is already possible with the existing code base:

<S_CODE_TOKEN>

The same applies for the _get_ and _delete_ methods.
",blueimp,2012-11-22 15:01:07
1884,2012-11-22 12:13:00,"When uploading multiple files on Internet Explorer 9, the extended progress bar is updated only after each file has been uploaded. I've add bitrate reports of 0.23242[...] bit/s.

With this pull request I'm making sure that we have the same number of decimals for all bitrate formats.

Thanks for reviewing.
",pedrofaustino,2012-11-22 15:04:24
1875,2012-11-20 10:42:05,"PHP changes. Cleans up filename, removing spaces etc.
",seandelaney,2012-11-20 11:27:26
1875,2012-11-20 11:27:26,"There is already a method in place which cleans up filenames, but preserves them as much in their original form as possible without compromising security: [trim_file_name](https://github.com/blueimp/jQuery-File-Upload/blob/master/server/php/UploadHandler.php#L421).

If you want to adjust the filenames further, you should rather override this method.
",blueimp,2012-11-20 11:27:26
1875,2012-11-20 11:30:29,"That's strange as I tested a few images with spaces before forking and the filename was not changed. Space was kept.
",seandelaney,2012-11-20 11:27:26
1875,2012-11-20 11:32:06,"Spaces are kept intact inside of the filename. There is no inherent reason to replace spaces in filenames, as long as you properly URL-encode your links.
",blueimp,2012-11-20 11:27:26
1865,2012-11-17 10:40:45,"Prevent headers and response to be sent to soon, let the framework
handle the response.
I send the header and response at the end fo the initialize method for
backward compatibility
",mylen,2012-11-17 20:47:46
1865,2012-11-17 20:47:45,"Thanks for your contribution, @amelard.

However, it was already possible to delay the printing of the result content.
If you override the initialize method, you can call the public **get**, **post** and **delete** methods with _false_ as first parameter, to prevent printing the result (or sending any headers). Those methods return the unencoded result content.

You can then make use of the **generate_response** method to print the result and the headers:

<S_CODE_TOKEN>

With the latest commit (a706781bd6b4abd8c0be36c356c99169d76ba758) I've also wrapped the **header**, **echo** and **readfile** calls in object methods which allows extending classes to handle the response.

The $index variable you removed for the validation method might be used if someone wants to validate differently depending on the index of the uploaded file, although this is admittedly unlikely.
",blueimp,2012-11-17 20:47:46
1865,2012-11-17 21:07:21,"That's great's news thank you very much for adding the wrappers!

I'm trying to wrap your code in a symfony2 bundle without touching your
code but I need to have a sr0 name ie UploadHandler.php do you mind
changing the name of the file or adding a symlink?
Le 17 nov. 2012 21:47, ""Sebastian Tschan"" notifications@github.com a
écrit :

> Thanks for your contribution, @amelard https://github.com/amelard.
> 
> However, it was already possible to delay the printing of the result
> content.
> If you override the initialize method, you can call the public _get_, *
> post\* and _delete_ methods with _false_ as first parameter, to prevent
> printing the result (or sending any headers). Those methods return the
> unencoded result content.
> 
> You can then make use of the _generate_response_ method to print the
> result and the headers:
> 
> <?phprequire('upload.class.php');
> class CustomUploadHandler extends UploadHandler {
>     protected function initialize() {
>         switch ($_SERVER['REQUEST_METHOD']) {
>             // ...
>             case 'POST':
>                 $content = $this->post(false);
>                 // Do something with the $content object
>                 // and then print it to the output stream:
>                 $this->generate_response($content);
>                 break;
>             // ...
>         }
>     }}
> $upload_handler = new CustomUploadHandler();
> 
> With the latest commit (a706781https://github.com/blueimp/jQuery-File-Upload/commit/a706781bd6b4abd8c0be36c356c99169d76ba758)
> I've also wrapped the _header_, _echo_ and _readfile_ calls in object
> methods which allows extending classes to handle the response.
> 
> The $index variable you removed for the validation method might be used if
> someone wants to validate differently depending on the index of the
> uploaded file, although this is admittedly unlikely.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/1865#issuecomment-10478733.
",mylen,2012-11-17 20:47:46
1865,2012-11-17 21:15:24,"Changing the name would pose backwards compatibility problems for other users, sorry.
",blueimp,2012-11-17 20:47:46
1865,2012-11-17 21:19:00,"Oh it's too bad I'm going to have to maintain a fork... may be someday you
'll go sr0 !

thank's anyway: your library rule!
Le 17 nov. 2012 22:15, ""Sebastian Tschan"" notifications@github.com a
écrit :

> Changing the name would pose backwards compatibility problems for other
> users, sorry.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/1865#issuecomment-10478987.
",mylen,2012-11-17 20:47:46
1865,2012-11-17 21:22:33,"Actually, now that I think about it, I can simply rename it to UploadHandler.php.
Of course users need to update their include statements, but that shouldn't pose a problem.
",blueimp,2012-11-17 20:47:46
1865,2012-11-17 21:31:52,"While you are it you could add the composer.yml file and tag your
development branch when you update the jquery that would be sweet  :0)

And most of all Thank's Sebastian! Let me know if you come to Paris someday
I'll have to offer you a drink!!
 Le 17 nov. 2012 22:22, ""Sebastian Tschan"" notifications@github.com a
écrit :

> Actually, now that I think about it, I can simply rename it to
> UploadHandler.php.
> Of course users need to update their include statements, but that
> shouldn't pose a problem.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/1865#issuecomment-10479057.
",mylen,2012-11-17 20:47:46
1865,2012-11-17 21:38:04,"Composer.json sorry I'm using my mobile phone and watching rugby!!
Le 17 nov. 2012 22:31, ""Alexandre Melard"" alexandre.melard@gmail.com a
écrit :

> While you are it you could add the composer.yml file and tag your
> development branch when you update the jquery that would be sweet  :0)
> 
> And most of all Thank's Sebastian! Let me know if you come to Paris
> someday I'll have to offer you a drink!!
>  Le 17 nov. 2012 22:22, ""Sebastian Tschan"" notifications@github.com a
> écrit :
> 
> > Actually, now that I think about it, I can simply rename it to
> > UploadHandler.php.
> > Of course users need to update their include statements, but that
> > shouldn't pose a problem.
> > 
> > —
> > Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/1865#issuecomment-10479057.
",mylen,2012-11-17 20:47:46
1865,2012-11-17 21:38:26,"I'm reluctant to add more another package information file, since there are so many package managers.
But I definitely plan on tagging releases, it's the longest outstanding issue:
https://github.com/blueimp/jQuery-File-Upload/issues/227

Thanks, I've been to Paris once, but I'll definitely visit again someday. :)
",blueimp,2012-11-17 20:47:46
1865,2012-11-17 22:07:22,"I've just discovered your header and content wrapper and I feel my contribution was rather childish :-/ 
I'm new to github and open source contribution and I'm glad I stepped in, I'm going to learn a lot :+1: 
",mylen,2012-11-17 20:47:46
1865,2012-11-17 22:08:40,"No worries, I'm still learning, too. ;)
",blueimp,2012-11-17 20:47:46
1865,2012-11-17 22:21:00,"By the way, do you mind if I'm using blueimp/jquery-file-upload as composer
name in packagist when I distribute the source?
I'm going to add a cron job that merge your uploads on my server and push
tags whenever there is a change... So you can get a packagist repo with all
your deliveries and people can use github fork if they are willing to get a
persistent tag

On 17 November 2012 23:08, Sebastian Tschan notifications@github.comwrote:

> No worries, I'm still learning, too. ;)
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/1865#issuecomment-10479564.
",mylen,2012-11-17 20:47:46
1865,2012-11-17 22:32:44,"If you are keeping the source code unmodified, I don't mind.
Generally the official name should only be used for the official code.
",blueimp,2012-11-17 20:47:46
1865,2012-11-17 22:35:37,"Sure, I'm not going to touch the code without going through PR from another
branch, that's why I'm bothering you ;o) (And I'm lazy of course)

On 17 November 2012 23:32, Sebastian Tschan notifications@github.comwrote:

> If you are keeping the source code unmodified, I don't mind.
> Generally the official name should only be used for the official code.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/blueimp/jQuery-File-Upload/pull/1865#issuecomment-10479831.
",mylen,2012-11-17 20:47:46
1865,2012-11-17 22:37:24,"An important trait for a programmer. ;)
",blueimp,2012-11-17 20:47:46
1858,2012-11-14 18:06:27,"I've modified the `initialize` function to call the `request_completed` function with the result of a request.

I'll use this to perform some actions after POSTed files have been saved to disk. Example: when users POST more than 1 file per request, compress those files into a zip file, delete the POSTed files and modify the `$info` variable with just one file/URL.

Thanks
",pedrofaustino,2012-11-14 18:09:27
1858,2012-11-14 18:09:27,"Sorry, I've just realized I need to call `request_completed` inside the `post` function. Closing and opening a new pull request.
",pedrofaustino,2012-11-14 18:09:27
1847,2012-11-12 01:43:11,"Implements solution proposed in #1846
",jwcobb,2012-11-12 14:26:05
1847,2012-11-12 01:44:14,"My apologies for accidentally including my other fixes in this. I forgot I had merged them in to my own master.
",jwcobb,2012-11-12 14:26:05
1847,2012-11-12 14:26:05,"I couldn't merge this pull request due to the other changes.
However I've credited you in the commit that incorporates your changes: b9728e3c6a70f09d7d0df8f1a4e419f2fb0ea09b
",blueimp,2012-11-12 14:26:05
1845,2012-11-12 00:10:36,,jwcobb,2012-11-12 08:42:54
1843,2012-11-12 00:04:24,"The form action was being overriden in `main.js`. This actually gets it from the form allowing for changing it in the form as described in the documentation.
",jwcobb,2012-11-12 08:31:05
1843,2012-11-12 08:31:05,"Please see my comment here:
https://github.com/blueimp/jQuery-File-Upload/issues/1841#issuecomment-10280001
",blueimp,2012-11-12 08:31:05
1820,2012-10-31 21:04:27,"split() is deprecated in php 5.3 and throws an E_Deprecated warning when running strict that breaks the chunked uploads.  Switching to preg_split() fixes the issue.
",blented,2012-11-01 12:05:02
1820,2012-11-01 12:09:30,"Thanks! :)
",blueimp,2012-11-01 12:05:02
1813,2012-10-30 15:19:42,"Styling checkbox'es. 

Screenshot: ![click here](http://img844.imageshack.us/img844/8527/screenshotstylingcheckb.png)
",loostro,2012-11-01 11:40:03
1813,2012-11-01 11:40:03,"Thanks for your contribution.
However I prefer to follow Bootstrap's guidelines, which doesn't style checkboxes by default.
",blueimp,2012-11-01 11:40:03
1808,2012-10-25 16:07:08,"Changing options merge to array_merge in order to have full control when passing options array.

https://github.com/blueimp/jQuery-File-Upload/issues/1807
",sieppl,2012-10-27 03:30:46
1796,2012-10-23 01:24:49,"fix delete function,
although file deleted correctly,
but php server couldn't response correct status
because variable $info in delete function is not defined 
",ardianys,2012-10-23 06:00:44
1789,2012-10-21 12:24:36,"Added missing http: to the jQuery script tag
",shamanime,2012-10-22 04:41:13
1789,2012-10-22 04:41:13,"### Why is the protocol (""http:"") missing from the script references in the HTML source code?

This is called a [protocol relative url](//www.google.com/search?q=protocol+relative+URL) and a perfectly valid way to define a resource, relative to the current URL protocol.  
This ensures that the referenced scripts are loaded via the same protocol as the current page, which avoids security notifications when loading resources via unencrypted HTTP on a page loaded via HTTPS.

However, it also requires that the current protocol is either ""http:"" or ""https:"" and will not work on a ""file:"" url.

https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions
",blueimp,2012-10-22 04:41:13
1785,2012-10-19 12:42:27,"Fix a mini graphical bug visible under Chrome 22 (and may be other versions) where the ""Delete"" button and the check box were not on the same line for already uploaded files.
",PixEye,2012-10-20 02:36:18
1785,2012-10-20 02:37:46,"Thanks! :)
",blueimp,2012-10-20 02:36:18
1781,2012-10-18 07:49:22,"Additional check to help some customers who are on Safari 4.
",gselva,2012-10-18 09:01:53
1740,2012-10-02 11:06:26,"Based on the CSS spec., they should be separated by white spaces.
",JosephKu,2012-10-02 13:28:06
1721,2012-09-26 09:24:18,"Hello Sebastian,
Thank you for your awesome work on jQuery-File-Upload.
I did a commit yesterday on my clone. Here is an explanation.
As the PHP function fileSize() returns a signed 32bits int, it cannot return something bigger than 2GB.
My patch checks if this function returns a negative value and correct it if necessary.
The value is then transform from an int to a float.
NB: I'm new to git & English is not my natural language. This is my first pull request.
## Regards,

Julien.
",PixEye,2012-09-26 12:11:11
1721,2012-09-26 09:27:57,"Note: I replaced few tabs by spaces & /tmp/uploads/ refers to my local configuration.
",PixEye,2012-09-26 12:11:11
1721,2012-09-26 12:11:10,"Thanks for your report and fix, Julien.
I couldn't merge your pull request, but I've just pushed a new commit which is based on your changes:
https://github.com/blueimp/jQuery-File-Upload/commit/8ac51b46f064fa89bba9484a6993e73ae03a8a5f
",blueimp,2012-09-26 12:11:11
1721,2012-09-26 12:42:12,"Thank you.
",PixEye,2012-09-26 12:11:11
1681,2012-09-14 13:23:32,,elnur,2012-09-14 20:47:17
1681,2012-09-14 20:47:17,"Thanks for your contribution.

However, although it may seem useful to get bugfix releases for jQuery automatically, there is a significant advantage of using the specific 1.8.1 version over the generic 1.8 and that is the Expires header:

<S_CODE_TOKEN>

vs.

<S_CODE_TOKEN>

A one-year-Expires-header is a significant advantage over a one-hour-Expires-header.
",blueimp,2012-09-14 20:47:17
1634,2012-08-29 23:19:55,"In the new jQuery 1.8 the 'input:file' kind of selectors are deprecated, so it caused bugs.

http://bugs.jquery.com/ticket/9400
",ftufek,2012-08-30 01:48:55
1618,2012-08-24 01:58:44,"This would prevent users with the bugged Chrome versions from being able to select files using the file input widget. Using drag-n-drop still worked fine.

Ref: http://code.google.com/p/chromium/issues/detail?id=138987
",gboudreau,2012-08-26 10:16:36
1618,2012-08-24 02:28:50,"I cannot reproduce any problems with the file upload widget on Google Chrome.
I've created a simple test case here:
http://jsfiddle.net/fyW5y/

I could reproduce a problem with Chrome's onchange event, however on my test system (Chrome 21 on OS X 10.8), webkitEntries seemed to be undefined, not the length of the property set to 0.
The File Upload widget already checks for that.
",blueimp,2012-08-26 10:16:36
1618,2012-08-24 02:30:57,"I'm using Chrome 22.0.1229.12. The bug is probably a recent regression in chromium. As such, it might not be worth it for you to merge this, since they should fix it before releasing the next stable. But then, I'd guess many developers might be using Chrome dev or beta versions, which do or can contain that bug.
",gboudreau,2012-08-26 10:16:36
1618,2012-08-24 02:33:40,"I see. OK, I'll leave the pull request open for now.
",blueimp,2012-08-26 10:16:36
1573,2012-08-12 01:38:54,"Sebastian,

Thanks for jQuery-File-Upload. I've written a pyramid server side implementation and packaged it up in a demo form.

I think this provides a useful reference for those writing in pyramid and using jQuery-File-Upload.

I'm happy to make improvements here if you'd like.

Cheers,

Daniel Black
",grooverdan,2012-08-14 05:02:50
1573,2012-08-14 05:02:50,"Thanks very much for your contribution, Daniel. :)

Currently, I only plan to incorporate implementations into the official jQuery File Upload branch that I'm willing to support myself.

However, it would be nice if you could support your fork and add a link to the list of server-side implementations:
https://github.com/blueimp/jQuery-File-Upload/wiki
",blueimp,2012-08-14 05:02:50
1573,2012-08-15 01:12:59,"> Currently, I only plan to incorporate implementations into the official jQuery File Upload branch that I'm willing to 
> support myself.

Thought this would be the case.

> However, it would be nice if you could support your fork and add a link to the list of server-side implementations:
> https://github.com/blueimp/jQuery-File-Upload/wiki

Will do.

Thanks for the javascript front end and reference implementations/ documents. That made it pretty easy.
",grooverdan,2012-08-14 05:02:50
1521,2012-07-30 02:59:49,"request didn't reach the server, 
Chrome ignored the fact it's a DELETE request and since the image was cached returned the cached image bytes instead of deleting it
I tried to do data.cache = false, but for some reason it didn't work as expected... (I guess it works only with GET requests)
the following is the quickest and dirtiest solution I found, but it will happen to anyone using Chrome and caching those images... 
One of the most elusive bugs I ever encountered :) 
",eranation,2012-08-08 00:25:53
1521,2012-07-30 09:06:41,"I'm aware of this issue and even posted a bug report to the Chrome issue tracker:
http://code.google.com/p/chromium/issues/detail?id=136320

You might want to star this issue and add your voice so the Chrome developers will fix it sooner than later.

So far I'm reluctant to incorporate a workaround for something that should be fixed in Chrome.
",blueimp,2012-08-08 00:25:53
1521,2012-07-30 15:37:25,"did that + HN post, maybe someone will care :)
http://news.ycombinator.com/item?id=4312761

Edit: 

From 2 stars to 34, isn't HN community great? 
On Mon, Jul 30, 2012 at 5:06 AM, Sebastian Tschan <
reply@reply.github.com

> wrote:
> 
> I'm aware of this issue and even posted a bug report to the Chrome issue
> tracker:
> http://code.google.com/p/chromium/issues/detail?id=136320
> 
> You might want to star this issue and add your voice so the Chrome
> developers will fix it sooner than later.
> 
> So far I'm reluctant to incorporate a workaround for something that should
> be fixed in Chrome.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> 
> https://github.com/blueimp/jQuery-File-Upload/pull/1521#issuecomment-7363543
",eranation,2012-08-08 00:25:53
1521,2012-07-30 23:06:05,"Well we got their attention after my HN post :) 

But they can't seem to be able to reproduce...

http://code.google.com/p/chromium/issues/detail?id=136320#c9
",eranation,2012-08-08 00:25:53
1521,2012-08-08 00:25:53,"Closing this, since it will be fixed in Chrome:
http://code.google.com/p/chromium/issues/detail?id=136320#c21
",blueimp,2012-08-08 00:25:53
1448,2012-07-07 02:45:30,"Hi!

I am migrationBot!

Did you know that `path.{exists,existsSync}` was moved to `fs.{exists,existsSync}`,  and that `tty.setRawMode(mode)` was moved to `tty.ReadStream#setRawMode()` (i.e. `process.stdin.setRawMode()`)  in node v0.8.0? Read more @[API changes between v0.6 and v0.8](https://github.com/joyent/node/wiki/API-changes-between-v0.6-and-v0.8) 

I automatically made some changes I think will help you migrate your codebase to node v0.8.0, please review these changes and merge them if you feel they are useful, If they are not you can ignore this Pull Request.

Have a Nice Day!

--[migrationBot](https://github.com/blakmatrix/node-migrator-bot)
",node-migrator-bot,2012-07-09 09:51:40
1448,2012-07-09 09:51:40,"This automatic migration might be more useful if it retained compatibility with previous node versions.
See for example http://coderwall.com/p/ua4s-q
",blueimp,2012-07-09 09:51:40
1441,2012-07-05 07:38:01,"path to py script
",GamesDev,2012-07-06 11:28:55
1441,2012-07-06 11:28:55,"Thanks for your contribution, but your fix is incorrect, as **main.app** is indeed the correct way to refer to the WSGI Application:
https://developers.google.com/appengine/docs/python/python27/migrate27#wsgi
",blueimp,2012-07-06 11:28:55
1435,2012-07-04 19:03:37,"Added a rejectFileTypes config option as I felt an allow-all-except rather than deny-all-except would be useful, this allows you to do:

<S_CODE_TOKEN>

And so on and so forth...
",lkinsella,2012-07-06 11:43:34
1435,2012-07-06 11:43:34,"Thanks for your contribution, Lloyd.
However, on server-side, you should never use a blacklist approach to limit allowed filetypes, for security reasons.
And I believe the client-side should simply reflect the server-side in this, so I don't see a good use for a client-side blacklisting of filetypes.
",blueimp,2012-07-06 11:43:34
1409,2012-06-24 17:45:27,"The Default upload.class.php doesn't work for me and returns 
`Missing argument 6 for UploadHandler::handle_file_upload() on line 400` when uploading a file in Chrome.
",Marmelatze,2012-06-24 17:48:07
1409,2012-06-24 17:50:30,"Thanks. :)
",blueimp,2012-06-24 17:48:07
1390,2012-06-16 12:33:38,"I've had to change _initEventHandlers function in jquery.fileupload-ui.js to make use of .on click handler binder instead of .delegate. The later is causing problems in some plugin ui usage scenarios with jQ 1.7.2.
",maxpavlov,2012-07-02 10:37:30
1390,2012-06-16 15:10:18,"First, thanks for our contribution.

Unfortunately, I cannot simply pull this change, since the ""on"" function is only available since jQuery 1.7 and this plugin officially supports jQuery 1.6.

Could you report in detail what are the issues with ""delegate"" and maybe provide a [JSFiddle](http://jsfiddle.net/) example?
",blueimp,2012-07-02 10:37:30
1390,2012-06-18 08:45:55,"The problem occurs when trying to bind .delete handlers after manually retrieving files from a previous upload sessions, and placing their ""download templates"" into the .files container on an initially hidden div. I will post a demo online shortly. But that also surprised me that .delegate didn't work, whereas .on work fine. 
",maxpavlov,2012-07-02 10:37:30
1390,2012-07-02 10:37:30,"I'm closing this pull request, since you didn't provide a means for me to reproduce the issues.
Also, moving to **on** instead of **delegate** would lose support for jQuery 1.6, as I wrote before.

Please feel free to submit another pull request if you can tackle the problem while still providing support for jQuery 1.6.
Please always make it possible to reproduce the problem, e.g. via [JSFiddle](http://jsfiddle.net/).
",blueimp,2012-07-02 10:37:30
1321,2012-05-25 13:00:43,"Made the progressbars more accessible by adding the attributes role=""progressbar"", aria-valuemin=""0"" and aria-valuemax=""100"" in the example, and dynamically updating the attributes aria-valuenow and aria-valuetext from jquery.fileupload-ui.js.
",josteinaj,2012-05-26 16:59:59
1321,2012-05-26 19:07:05,"Thanks for your contribution!
I just committed a refactored version of your code:
https://github.com/blueimp/jQuery-File-Upload/commit/6cd1ed072f4005105c9b71a25e58c9ce7867e8c3 
",blueimp,2012-05-26 16:59:59
1321,2012-05-26 19:32:32,"Great! Good to know I can use your master branch to keep the script up to date :). Nice refactoring, one comment though:

index.html line 97: I omitted aria-valuenow because the value is initially indeterminate (no biggie though, doesn't affect the library itself, just the example):

""The author SHOULD supply values for aria-valuenow, aria-valuemin, and aria-valuemax, unless the value is indeterminate, in which case the author SHOULD omit the aria-valuenow attribute."" [1]

[1] http://www.w3.org/TR/wai-aria/roles#progressbar
",josteinaj,2012-05-26 16:59:59
1321,2012-05-26 20:42:22,"Thanks for the heads up.
I've removed aria-valuenow from the global progress bar.
I've also removed aria-valuetext, since according to the specification, this doesn't seem necessary.
",blueimp,2012-05-26 16:59:59
1315,2012-05-23 15:24:27,,synchrone,2012-05-24 11:21:23
1315,2012-05-24 11:21:23,"Thanks for your contribution, Alexander.
However progress reporting like this is specific to a server-side implementation, which is the reason I won't include it in the master repository, as I want to keep it server-side agnostic.
However, you're invited to add information to your implementation to the project Wiki, I'm sure others could benefit from your work:
https://github.com/blueimp/jQuery-File-Upload/wiki
",blueimp,2012-05-24 11:21:23
1313,2012-05-22 13:24:25,"...mp/jQuery-File-Upload/issues/1312
",besstiolle,2012-05-22 13:26:25
1313,2012-05-22 13:34:39,"Thank you for your contribution, besstiolle. :)
",blueimp,2012-05-22 13:26:25
1313,2012-05-22 13:41:49,"it's the least I can do to thank you for your great work ;)
",besstiolle,2012-05-22 13:26:25
1308,2012-05-19 04:18:05,"This is a translation of the PHP handler to C#.  I've tried to maintain similar names and structure so that future maintenance will be easier.
",swhitley,2012-05-19 10:46:43
1308,2012-05-19 10:46:43,"Thank you very much for your contribution, Shannon.
I prefer only adding code to the master repository that i'm willing to maintain myself.
However, I've added your repository to the list of .NET implementations on the Wiki homepage:
https://github.com/blueimp/jQuery-File-Upload/wiki
",blueimp,2012-05-19 10:46:43
1308,2012-05-19 21:25:28,"Thanks! And thank you for your great plugin.  

You know, I missed the fact that other people had made server contributions.  I'd like to suggest that you add a readme document under /servers that details other contributions -- for people who don't read all the wiki docs (like me).
",swhitley,2012-05-19 10:46:43
1211,2012-04-17 19:50:28,"file.slice has a different signature (file, start, length) compared to file.mozSlice and file.webkitSlice (file, start, end).  Thus chunked uploads is broken for browsers (e.g. Firefox 4) that use file.slice.
",wcheng,2012-04-18 09:35:08
1211,2012-04-18 09:35:08,"Actually, the official implementation of slice uses the same signature as mozSlice and webkitSlice:

<S_CODE_TOKEN>

http://www.w3.org/TR/FileAPI/#dfn-Blob

But it's true that the implementation in Firefox 4 (as well as Opera 11 and the Webkit version of that time) used length as the second argument to the Blob.slice method, which is now considered incorrect, as it differed from the signature for String.slice and Array.slice:
https://developer.mozilla.org/en/DOM/Blob#Notes_on_the_slice()_implementations

Since Firefox 4 is unsupported and to retain compatibility with future browser builds with the (now) correct slice implementation, I'm using the official signature, but check for the availability of webkitSlice and mozSlice first (which as well use the official signature).

It's a little mess created by the browser vendors, but I believe my approach is so far most suitable for the current situation, as chunked uploads work as expected in the stable versions of both Google Chrome and Mozilla Firefox.
",blueimp,2012-04-18 09:35:08
1192,2012-04-13 22:55:06,"Hey

I've started using your plugin, however I needed the dragleave event. I'm doing animations when using dragover however I needed to remove those animations when I wasn't dropping the files.
",emroot,2012-04-14 10:36:51
1192,2012-04-14 10:36:51,"Thanks for your contribution, Emre.
However, I'll not merge this code change into the master branch, as binding to the dragleave event is not necessary for the plugin functionality itself and can be easily achieved with a simple bind on the dropzone element:

<S_CODE_TOKEN>
",blueimp,2012-04-14 10:36:51
1152,2012-04-02 20:06:56,"Prevent javascript crash for php return error

when we have activated the orient_image and the file uploaded is not the expected one.
",naxhh,2012-04-03 09:11:37
1152,2012-04-03 09:42:03,"Thanks for your contribution! :)
",blueimp,2012-04-03 09:11:37
1127,2012-03-24 17:15:49,"I needed a confirm dialog to prompt the user prior to deleting any images/files once they had been uploaded.  Seeing as I modified your code to add it, I thought I'd send over the changes in case you want to include it in the master.

Cheers
Dave
",fullybaked,2012-03-24 22:18:12
1127,2012-03-24 22:18:12,"Thanks for your contribution, Dave.
However I don't plan to incorporate a confirmation dialog at the moment.
In a full blown application, I would probably rather implement an Undo operation.
",blueimp,2012-03-24 22:18:12
1127,2012-08-02 22:03:03,"seriously?   Confirmation dialog seems like a must on destructive operations. At the very least there should be a beforeDestroy callback that could cancel the delete by returning false.
",dgm,2012-03-24 22:18:12
1127,2012-08-09 11:16:54,"You can simply override the **destroy** callback, as it is done in the plugin extension guide:
https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions
Adding your own confirmation dialog is trivial.
Like I said, in a full-blown application, I would prefer an undo operation.
",blueimp,2012-03-24 22:18:12
1127,2012-10-31 16:40:52,"@blueimp - This seems like a good option.  If people don't want to do use it they don't have to put the data-confirm attribute on the link tag, and then they never see the confirmations.  I personally am having difficulty implementing the example you linked to in above.
",batter,2012-03-24 22:18:12
1127,2012-11-09 17:38:59,"I tried the demo you linked to, and it creates a recursive infinite loop.  I'm still pretty new with overriding functionality like this, but I'm researching it now. I thought you might like to know.

Thanks for the excellent plugin!
",Rykus0,2012-03-24 22:18:12
1115,2012-03-21 16:34:57,"Hiya, great work on the plugin!

I've added a start on an asp.net server side example.

The upload part works, the re-dislpay does not yet, but it should be a good start for anyone using the plugin in .NET

I'm counting this as being under the same license as the original source.

Yours

Tim 
",timabell,2012-03-22 05:52:09
1115,2012-03-22 05:52:09,"Thanks very much for your contribution, Tim.
I highly encourage forking this project to add additional server-side implementations.
However, I only plan to incorporate server-side implementations into the master branch that I'm willing to support myself.

I've added your project repository to the list of ASP.NET implementations on the wiki here:
https://github.com/blueimp/jQuery-File-Upload/wiki
",blueimp,2012-03-22 05:52:09
1115,2012-03-22 14:06:57,"Thanks for looking, I'd completely missed that section on the wiki (doh!), oh well lesson learned. I've added a bit more detail to that section to help people like me choose between the various contributions. They are all good and have all taken different approaches.

I would like to respectfully ask you if you would think about pulling in useful examples that you don't necessarily wish to support directly. I respect your choice and understand why you've made it, but it might help us .net people out if you should decide to pull in a good example. My guess is that if there is no negative impact on the code you personally support then there is no downside to this decision, and if someone spots a bug or isn't happy with the .net back-end you could redirect them to the original author. I recommend having a listen to Linus's google talk http://www.youtube.com/watch?v=4XpnKHJAok8 (around 25mins+ or better still the whole thing) for some extra background on my thinking.

All the best, and just trying to help out. Tim
",timabell,2012-03-22 05:52:09
1115,2012-03-22 18:42:37,"The downside for me is that when I include code in the repository I have the obligation to keep it up to date.
Even if I just merge upstream patches I should at least test it myself but although C# is an interesting language I don't have a .NET development environment setup on my machine (.NET doesn't support OSX).

I didn't watch the YouTube video, but I really like Git and one of its best features is that it is decentralized.
So in my opinion there is nothing speaking against different server implementations being maintained by different developers in different repositories.

But I might also change my mind one day and incorporate yours or another ASP.NET solution into the master branch.
Just now, I choose not to, simply for keeping my workload for maintaining this project as low as possible (and it's already way too high).
",blueimp,2012-03-22 05:52:09
1115,2012-03-23 08:53:05,"Cool :-) thanks for the info
",timabell,2012-03-22 05:52:09
1102,2012-03-17 01:06:33,"Opera < 9.6 iframe sometimes (always?) triggers premature
onload event right after submit before response was received

This commit should fix it, tested on Opera Linux 9.27 and Opera Linux 9.52
",mpokrywka,2012-03-17 04:42:56
1102,2012-03-17 04:42:56,"Thanks for your contribution, mpokrywka.
I noticed there are also other issues with older Opera versions, e.g. the file input selection button doesn't cover the whole ""Add files"" button area.
I'm sure your code fixes the issue with older Opera versions, but it might also have side effects on other browsers.
Since I don't support Opera versions before v.10 I will not merge your code at the moment.
",blueimp,2012-03-17 04:42:56
1086,2012-03-08 12:06:34,"Requirejs treats module names with file extension as full file paths and try to download ./jquery.fileupload-ip.js which isn’t what we need becase it’s path relative to current page, not jquery.fileupload-ui.js file.
",sapegin,2012-03-08 17:29:36
1086,2012-03-08 17:30:09,"Thanks for your contribution, Artem. :)
",blueimp,2012-03-08 17:29:36
942,2012-01-15 23:41:51,"I edited the files to bring AMD support to the module. If you don't know about AMD, jquery >1.7 is using it and it is growing really fast. There is a lot of lecture on the web about it.

Regarding the edits I made to your code, it consists in wrapping the files into a define() method if the app use AMD and fall back to globals otherwise. You can read about it here: https://github.com/umdjs/umd

I didn't touch anything else in your code and I did a quick test with an app using AMD and one not and everything seems to work just fine.
",karellm,2012-01-16 01:44:22
942,2012-01-16 03:02:23,"Thanks for your contribution, Karel! :)
I've committed an updated version which includes a refactored version of your AMD support implementation.
I've also added AMD support to the other plugin files of the repository.
",blueimp,2012-01-16 01:44:22
942,2012-01-16 03:10:16,"Indeed I missed quite some files :)
Thanks for the quick merge!
",karellm,2012-01-16 01:44:22
942,2012-03-02 02:47:43,"AMD is cool, loving it and using it everyday but I don't think you should use it to require jquery.ui.widget and others. Those are not exactly dependencies but more ""requirements"", also you shouldn't ask for specific folder structure.
",ZeeAgency,2012-01-16 01:44:22
942,2012-03-02 03:34:30,"What would your recommendation be?

The docs on requirejs.org recommend to reference the dependencies by path names and using anonymous modules instead of named modules:
http://requirejs.org/docs/start.html#add
http://requirejs.org/docs/whyamd.html#namedmodules

If you require for example jquery.fileupload-ui.js it depends on jquery.fileupload-ip.js, which in turn depends on jquery.fileupload.js which definitely depends on the jQuery widget factory, as it doesn't work without it.
The plugin also ships with an AMDified version of the widget factory.

If I implement support for AMD loaders, I want to implement it in a way that works by just requiring one script (jquery.fileupload-ui.js) which should load **all** the dependencies, including the widget factory.

jQuery itself is a bit of a special case, as it's usually not loaded via AMD, even when AMD is used for other scripts.
That's why it's the only script that is loaded as named module, to allow passing jQuery as **$** parameter to the plugin scripts.

Anyway, if you have any recommendation for improvements, I'd like to hear about them. :)
",blueimp,2012-01-16 01:44:22
942,2012-03-02 04:04:07,"Actually, I had issues specifically with loading vendor/query.ui.widget as I don't want it to be there (got an existing folder structure I really care about).

It seems like the paths configuration doesn't work with this [kind of relative path](https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload.js#L21).

Turns out I don't know if it's a bug, a feature from require.js or just me doing something wrong, missing something from the doc. I'll ask @jrburke about this one.

Here's a gist with the confs I tried : https://gist.github.com/1955536

I agree about jQuery, special case but I also saw some bugs with this one... 
",ZeeAgency,2012-01-16 01:44:22
942,2012-03-02 04:18:37,"Hmm, might be that scripts included via subfolders shouldn't use the **./** at the front, but it's a valid path and it worked in my tests with requirejs.
Thanks for looking into this and please let me know when you get more information.
",blueimp,2012-01-16 01:44:22
942,2012-03-02 19:00:53,"For external dependencies, like jquery.ui.widget, those should be specified just as 'jquery.ui.widget', and only code that is considered part of this package should use relative IDs, the ones that start with './'.

This allows better cross sharing of those common external dependencies. For instance, if I also have another lib that depends on jquery.ui.widget, if that lib used something like './external/jquery.ui.widget', that would result in two copies of jquery.ui.widget getting loaded.

By using 'jquery.ui.widget', it means that the project that uses both libs can create a path config to the right copy to use for jquery.ui.widget, as it likely has its own copy anyway, maybe even the whole jQuery UI lib.

Also, relative IDs are mapped relative to the reference ID, not their path, so if I use this paths config:

<S_CODE_TOKEN>

Then for jquery.fileupload.js, its ID is 'jquery.fileupload', and its relative dependency './jquery.iframe-transport', is resolved relative to 'jquery.fileupload', so the final absolute ID is 'jquery.iframe-transport', which is looked up in baseUrl + 'jquery.iframe-transport' + '.js'. For that to work, either include a map for 'jquery.iframe-transport':

<S_CODE_TOKEN>

or ask consumers of your library to just map the whole JS file as a ""package name"":

<S_CODE_TOKEN>

then consumers of the lib would ask for 'fileupload/jquery.fileupload' as the dependency name.

Or, if the libraries in the JS file are really useful just as standalone libraries on their own, ask developers to just place them all in the baseUrl of the user's project. In that case, then I would not use relative IDs for dependencies for the files in the js dir.
",jrburke,2012-01-16 01:44:22
942,2012-03-03 02:32:23,"Thanks for the clarifications, James. :)
",blueimp,2012-01-16 01:44:22
906,2011-12-29 12:07:03,"First of all - awesome work. One of the best written libraries I've ever seen. Thank you.

If the image is 90, 180, or 270 degrees left, this data is stored with most JPGs as meta data. This is how operating systems and other image viewers can properly flip the image for you when viewing it.

This patch reads this metadata and orients the image properly. Includes a new image called orient_image, set to true by default (perhaps it should be off by default?)
",gorillamania,2011-12-29 14:13:19
906,2011-12-29 15:22:39,"Thanks for your contribution Nick!
I've incorporated your addition with some minor cleanups in my latest commit:
https://github.com/blueimp/jQuery-File-Upload/commit/97b2823a262cba4358de36c7c6235f95e1a8c75d
",blueimp,2011-12-29 14:13:19
833,2011-12-02 08:49:57,"The javascript was not loaded on the sample page.
",Krizzzn,2011-12-02 09:08:00
833,2011-12-02 09:08:00,"Please see https://www.google.com/search?q=protocol+relative+URL

I've also added an entry to the [FAQ](https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions).

If the referenced script files did not load, I guess you probably opened the example HTML page via ""file:"" URL instead of ""http:"" or ""https:"".
",blueimp,2011-12-02 09:08:00
787,2011-11-14 22:20:23,"As Crockford [says](http://javascript.crockford.com/code.html#line length):

> When a statement will not fit on a single line, it may be necessary to break it. Place the break after an operator, ideally after a comma. A break after an operator decreases the likelihood that a copy-paste error will be masked by semicolon insertion.
",christianvuerings,2011-11-15 05:40:58
772,2011-11-08 16:22:18,,nexeck,2011-11-08 16:33:02
772,2011-11-08 16:33:02,"Please see https://www.google.com/search?q=protocol+relative+URL
",blueimp,2011-11-08 16:33:02
761,2011-11-06 07:25:06,"The jqXHR objects returned by data.submit() did not contain the abort function and thus could not be cancelled (Chrome 17.0.928.0 dev-m). This commit changes the variable assignment syntax slightly to ensure that the object is initialized properly.
",jtuulos,2011-11-08 18:36:10
761,2011-11-08 18:31:27,"I could reproduce the problem when using jQuery 1.7 and tracked it down to a bug in the implementation of jqXHR.always().

I've submitted a ticket to the jQuery bug tracker:
http://bugs.jquery.com/ticket/10723

But I will also incorporate your fix into the current version of the plugin.
Thanks for your contribution!
",blueimp,2011-11-08 18:36:10
761,2011-11-08 21:18:02,"Ok, sorry, I forgot to mention that I was using jQuery 1.7. Thanks for taking a closer look at the issue!
",jtuulos,2011-11-08 18:36:10
761,2011-11-08 21:20:46,"Unfortunately, this fix changes the callback invocation order when used with the sequentialUploads or limitConcurrentUploads options.
But I'm working on a different workaround that I'll push soon.
",blueimp,2011-11-08 18:36:10
733,2011-10-27 00:44:26,"Firstly, thanks for this plugin, it helps a lot.
Updated the _formatFileSize method during my usage to make it more flexible.

Could you review it and check whether it is acceptable?
Thanks.
",vincentcn,2011-10-27 05:32:40
733,2011-10-27 05:32:40,"Hi Vinson Xue,
thanks for your contribution, but I've decided to not incorporate your changes for now.

The platform identifier, although possibly the only clue in this case, is not reliable to detect the file size units formatting.
e.g. Ubuntu Linux also makes use of the base-10 formatting: https://wiki.ubuntu.com/UnitsPolicy
It's just not possible to determine by feature detection which platform uses which formatting method.

I've explained my reasons to use the base-10 system here:
https://github.com/blueimp/jQuery-File-Upload/issues/497
Although I must admit that ""KB"" (despite ""MB"" and ""GB"") is not part of any proposal, but I think it's just most natural for users to display it that way.

Regarding handling filesizes sent as String instead of an Integer, I don't see any reason why the server-side application shouldn't be able to properly use an Integer for the JSON output.

All in all, the decision to implement the _formatFileSize method this way is also a matter of personal preference as I like to keep it simple, while acknowledging that there are some requirements to display it differently.
For example, some might prefer to display a translated version of KB etc., like ""KO"" for the french translation ""Kilo Octect"", or displaying KB in front of the number for right-to-left (RTL) languages.

Please have a look at the [developer guide](https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions) for an explanation on how to override the method for your own implementation.
",blueimp,2011-10-27 05:32:40
733,2011-10-27 06:16:27,"That is fine. In fact, I have created my own widget by extending blueimpUIX.fileupload. Just send this request to check whether it can help others.

Thanks.
",vincentcn,2011-10-27 05:32:40
709,2011-10-17 08:26:58,"I did a port of the backend upload.php script to Python. It is based on the web2py framework. 

We are currently using it for GlobaLeaks.
",hellais,2011-10-17 08:40:45
709,2011-10-17 08:40:45,"Thanks for your contribution Arturo.
I've added a link to your project to the jQuery File Upload wiki homepage (""web2py (Python framework) port""):
https://github.com/blueimp/jQuery-File-Upload/wiki
Feel free to add a better description or additional pages as documentation for your port.

At the moment I don't plan to integrate additional server-side implementations into the project repository itself, as this would also add the burden of keeping them up-to-date.
But I would appreciate if you could keep your fork in sync with the master repository.
Thanks again!
",blueimp,2011-10-17 08:40:45
709,2011-10-17 08:42:45,"Ok, sure. I am using this as part of an open source project called GlobaLeaks http://github.com/globaleaks/globaleaks/. I will do my best to keep also my repo up to synch.
",hellais,2011-10-17 08:40:45
709,2011-10-17 08:45:18,"Thanks for using it in your GlobaLeaks project. It sounds definitely interesting. :)
",blueimp,2011-10-17 08:40:45
684,2011-10-06 14:32:59,"Hi,

I've added a confirm dialog for the delete button.
I wanted to make this optional, but this.options is not available in the eventHandler methods and I've found no other way to include this, so this is more like a feature request.

Best regards,
schmunk
",schmunk42,2011-10-06 14:43:32
684,2011-10-06 14:43:32,"Thanks for your contribution, Tobias (schmunk).
I don't plan to include a confirmation dialog for now.
I also want to keep any language specific strings out of the JS code.

However, it is possible to access the fileupload options inside of the __deleteHandler_ as shown here:
https://github.com/blueimp/jQuery-File-Upload/blob/master/jquery.fileupload-ui.js#L494
",blueimp,2011-10-06 14:43:32
684,2011-10-06 15:19:36,"Thanks for your feedback, I'll check the options thing.
Do you have message files for translations?
Would you add it if it's optional?

Do you have another preferred way on how you'd implement this, like overwriting the _deleteHandler?
",schmunk42,2011-10-06 14:43:32
684,2011-10-06 16:05:01,"All the language specific strings are part of the [HTML file](https://github.com/blueimp/jQuery-File-Upload/blob/master/example/index.html).

The recommended way to extend the jQuery File Upload plugin is by using the extension mechanism of the [jQuery UI Widget Factory](http://docs.jquery.com/UI_Developer_Guide#The_widget_factory).
This allows to override default Options (including callback methods) as well as methods of the File Upload widget class:
https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions

Although this is a lot more work, I would rather implement an Undo functionality than confirmation dialogs.
",blueimp,2011-10-06 14:43:32
684,2012-01-30 23:29:47,"Just in case anybody wants a solution that doesn't require a modification to jquery-fileupload-ui.js -- put this into your application.js, or wherever your file upload initialization code exists, after the File Upload is initialized (written for jQuery File Upload 6.0.2 against jQuery 1.7.2):

<S_CODE_TOKEN>
",jeremyZX,2011-10-06 14:43:32
684,2012-01-31 10:18:41,"Looks nice, thanks!
",schmunk42,2011-10-06 14:43:32
579,2011-08-31 20:46:18,"Update max number of files when removing a file without specifying a url.
",patrickreiner,2011-09-01 10:25:01
542,2011-08-11 21:26:46,"Firefox 3.6 was setting the src attribute of the preview image to false, which caused it to issue a GET request to '/false' resulting in a 404.
",bubish,2011-08-12 05:53:03
542,2011-08-12 05:53:03,"Thanks for the report bubish.
I could not merge your fix due to two issues:
- In your fix, the callback is not called when __createObjectURL_ doesn't return an URL.
- Your code doesn't pass [JSLint](http://jslint.com/) due to it's formatting.

Therefore, I've added [my own commit to fix the issue](https://github.com/blueimp/jQuery-File-Upload/commit/b364e0da6223f1914483eea5b5259938e54ab47c).
",blueimp,2011-08-12 05:53:03
441,2011-06-27 15:43:07,"Related to my original issue: 

[Permission denied error when uploading to another site via an iframe (IE8)](https://github.com/blueimp/jQuery-File-Upload/pull/435)

`iframe.contents()` appears not to be enough to raise an exception in FF.  An error will be raised when the code eventually calls text() to get whatever the response was.  Explicitly calling `iframe.text()` will raise the permissions error.

Also, the response I'm sending to jquery-file-upload is either JSON or an empty response.  As such, `iframe.text()` raises an error on line 139 or jquery.iframe.js.

Please let me know your thoughts, and I'll upload the wiki for sending documents direct to S3.
",gammons,2011-06-29 04:40:20
441,2011-06-29 04:40:20,"Grant, thanks again for your report.
I've commited an update to the Iframe Transport plugin that unifies the response for cross-domain iframe uploads as _undefined_: https://github.com/blueimp/jQuery-File-Upload/commit/046dd900823d9261838216f552f30a20fa70b350
Using any of the converter methods (iframe to text, iframe to json, etc.) will now properly throw a parsererror on all browsers and result in the plugin calling the _fail_ callback instead of the _done_ callback.
If you want to avoid the parsererror, you can set the _dataType_ option to null.
",blueimp,2011-06-29 04:40:20
435,2011-06-24 20:25:07,"IE is giving me a ""permission denied"" error when attempting to use jquery file upload to upload to another domain.  This was not an issue with v4.

The crux of the issue is this:  http://stackoverflow.com/questions/1886547/access-is-denied-javascript-error-when-trying-to-access-the-document-object-of

My fix worked for me, however I need your input for the following reasons:
1.  The test suite did not work for me.  It died after test #12, Callbacks: send (0, 1, 1).  It just seems to hang.  This is the case even if I revert my changes.  So please run your test suite against my change.
2.  I don't have enough insider knowledge to know if my fix will break other things.  Please review.

Thanks!
",gammons,2011-06-25 08:41:19
435,2011-06-25 08:41:19,"Thanks for your issue report and contribution.
I couldn't accept your pull request as your code change would break accessing the response content for same-domain requests using the Iframe Transport.
However, I added a try/catch block around the content document access call for the iframe, which catches the cross-domain exception thrown by IE:
https://github.com/blueimp/jQuery-File-Upload/commit/d5bc1e830f97406d336bf886662f10018d9d723a

Regarding the unit tests, they should all complete 100% on all browsers.
But so far no cross-domain test has been added.
If you adjust the url of the test form to point to a different domain, Firefox will stop on test 12 (Callbacks: send), as the OPTIONS request sent by Firefox on cross-domain requests will result in an error.
IE will run through, but fail on the sequential uploads tests as it cannot handle cross-domain XHR requests (jQuery will report ""No Transport"").
Anyway, the tests have not been built for cross-domain runs, but such tests might be explicitly added sometime in the future.
",blueimp,2011-06-25 08:41:19
435,2011-06-26 14:50:53,"Thanks for the quick response and fix!
",gammons,2011-06-25 08:41:19
362,2011-06-02 13:41:55,"Here is my answer to Issue #358.  I didn't see an easier way to access the form from the delete handler context.  I also see that you removed the ""var fu"" reference I was mimicking - I hope you're not offended.
",displague,2011-06-02 16:01:12
362,2011-06-02 16:01:12,"Thanks for your contribution.
However I have to reject this pull request, as I think that using the same form data for the file upload and for the deletion request as well is somewhat of an edge case.
DELETE HTTP requests also usually don't have any body part and some server-side frameworks ignore request bodies for DELETE requests.

The UI version of the plugin is supposed to be extended as it is more of an example implementation and will not suit every need. There is also a tutorial in the Wiki that shows how to add additional parameters to the deletion url, which is somewhat similar to your needs:
https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions
",blueimp,2011-06-02 16:01:12
362,2011-06-02 17:28:18,"Thanks for the reply.  I realize that this could complicate/break existing users of delete that do not expect formData to be included.
I saw this as a gray area in the docs (if you can consider uploads and deletes to be part of the same bag).

When I saw the name ""processData"" I thought this may have been a flag to enable the behavior I was looking for.  A suitably named flag could be used to send formData with deletes.
",displague,2011-06-02 16:01:12
362,2011-06-02 18:17:59,"processData is a jQuery AJAX flag that's set to false by the plugin so jQuery doesn't try to process the constructed multipart file upload data.
",blueimp,2011-06-02 16:01:12
300,2011-05-20 21:41:55,"That may close the issue 299
",aurium,2011-06-05 19:33:54
300,2011-05-21 03:57:38,"Can you provide a test case or implementation example?
",blueimp,2011-06-05 19:33:54
300,2011-05-23 00:17:04,"Yes, sure!
I will try to do this it soon.
",aurium,2011-06-05 19:33:54
300,2011-05-30 16:32:01,"Aurélio, did you find the time to provide an example implementation?
I mean, you must have code that needs your addition somewhere, or not?
I will gladly add any improvements, but I need to be able to test it before I include it.
",blueimp,2011-06-05 19:33:54
148,2011-04-06 14:14:47,"I've added CSRF (cross-site request forgery token) support, as I needed it for a rails app which uses the  Devise user authentication library.

Looks for a CSRF meta tag on the page, and if found adds a X-CSRF-Token header to the request.

An alternate implementation would be to add an option to either set the csrf token manually, or just one that allows adding arbitrary headers.  If you'd prefer I can work something like one of those up.

Thanks for your great work on the library, it's making file uploads much easier for me!
",nathanstitt,2011-04-06 15:07:09
148,2011-04-06 15:07:09,"Thanks for your contribution, but it's already possible to add arbitrary request headers using the _requestHeaders_ option.  
This feature was already added about one month ago, but unfortunately I didn't add any documentation.  
I've now added a section to the [Options documentation](https://github.com/blueimp/jQuery-File-Upload/wiki/Options) (search for ""requestHeaders"" on the page).
I also just [commited an update](https://github.com/blueimp/jQuery-File-Upload/commit/41c2ed81d43f3d42159d1fc4e122aca4870ee3ff) so this option accepts an Array of Objects with name and value attributes, or a simple Object.
",blueimp,2011-04-06 15:07:09
148,2011-04-06 15:29:43,"Sorry, I didn't think to look in the code to see if you'd added something for that, just did a quick docs scan.  I'll just use that option then.

Thanks again!
",nathanstitt,2011-04-06 15:07:09
148,2011-04-06 15:33:30,"Nah, it's my fault, should have documented it along with adding the feature.  
Thanks for using the plugin. :)
",blueimp,2011-04-06 15:07:09
148,2012-02-29 22:32:37,"Hi there,

I just took a look at those links and can't seem to find the requestHeader options. Have they been moved?
",twig,2011-04-06 15:07:09
148,2012-03-01 02:16:37,"Since version 5, the plugin accepts all [$.ajax](http://api.jquery.com/jQuery.ajax/) parameters as part of its options object.
You can therefore just make use of the **headers** option to set additional request headers.

However please note that the Iframe Transport (required by IE and Opera) doesn't support setting request headers.
To implement cross-browser CSRF protection, I would recommend making use of URL parameters, as shown here for the destroy callback:
https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions
",blueimp,2011-04-06 15:07:09
148,2012-03-05 22:17:05,"Thanks for that!
",twig,2011-04-06 15:07:09
148,2012-05-18 08:51:51,"Using the headers option like this:

<S_CODE_TOKEN>

Seems to do the trick for file uploads, however the header is not attached in the destroy action (when clicking the delete button). It seems that the _getAJAXSettings() method is not invoked inside the destroy() handler. @blueimp ?
",etdsoft,2011-04-06 15:07:09
148,2012-05-18 09:06:55,"That's because deleting files is not part of the core plugin, it's only part of the UI version.
However you can add the header easily by overriding the [destroy](https://github.com/blueimp/jQuery-File-Upload/blob/master/js/jquery.fileupload-ui.js#L272) callback option:

<S_CODE_TOKEN>
",blueimp,2011-04-06 15:07:09
148,2012-05-18 09:22:28,"Thanks, this did the trick. However, I had to slightly amend the last line based on the [Plugin extensions](https://github.com/blueimp/jQuery-File-Upload/wiki/Plugin-extensions) example to include a .options.:

<S_CODE_TOKEN>
",etdsoft,2011-04-06 15:07:09
148,2012-05-18 09:26:03,"You're totally right, the "".options"" was missing - I was typing it out of memory, my mistake. :D
",blueimp,2011-04-06 15:07:09
148,2013-04-09 19:59:27,"There is the possibility of putting an ajax call inside the method?

$('#fileupload').fileupload({
        destroy: function (e, data) {

<S_CODE_TOKEN>

when I do that then he give the following error

TypeError: that is undefined
[Parar neste erro]  

that._adjustMaxNumberOfFiles(1);
",jonasrn,2011-04-06 15:07:09
148,2013-05-02 17:43:57,"@blueimp Could you provide an example of how to implement your suggestion for using URL parameters for iframe upload?  Finding it difficult to adapt your example of extending options for Delete.  Much appreciated.
",jedierikb,2011-04-06 15:07:09
148,2013-05-03 08:32:24,"You can use formData to send CSRF tokens:
https://github.com/blueimp/jQuery-File-Upload/wiki/How-to-submit-additional-form-data
",blueimp,2011-04-06 15:07:09
148,2013-10-25 14:56:01,"Hey, 

I am using codeigniter CSRF and I am unable to send the token. Can you please tell me how can I do it.
",junaidatique,2011-04-06 15:07:09
148,2015-12-02 18:07:17,"I might be stupid, but when I do this:

<S_CODE_TOKEN>

the deletion is working, but it is not removed from the page. $.blueimpUI is not defined for me.
",gabn88,2011-04-06 15:07:09
137,2011-03-30 15:58:54,"to implement the faq #1   Does the plugin have to be called on a form tag?
in initUploadForm()
if the container is not a form, nor contains a form, use it
",mbrowniebytes,2011-04-03 08:57:54
137,2011-04-03 08:57:54,"I've commited a new version that allows using a file input field without a surrounding form, but I've implemented it slightly different than your suggestion. But thanks for the request.
",blueimp,2011-04-03 08:57:54
115,2011-03-11 18:29:51,"So IE doesn't yet support drag-and-drop, but if options.dragDropSupport == true, then IE will throw an error (on dataTransfer.effectAllowed = 'copy';) if you try to drag anything into it. 

This commit fixes IE and preserves expected drag-and-drop action in IE by opening the file (hence, moving e.preventDefault into the dataTransfer.files check).
",samuelclay,2011-03-12 18:03:58
115,2011-03-12 10:07:19,"Thanks! :)
",blueimp,2011-03-12 18:03:58
60,2011-02-13 05:09:58,"I was doing sequential uploads (https://github.com/blueimp/jQuery-File-Upload/wiki/Sequential-Uploads) and wanted to change the URL after every upload (to add the newest CouchDB document revision). This allows me to pass in {url: URLWithNewRevision} to the queued upload function when it gets called.
",maxogden,2011-02-13 13:22:41
60,2011-02-13 05:22:41,"Please have a look at the documentation for [initUpload](https://github.com/blueimp/jQuery-File-Upload/wiki/Options) or the [Google App Engine example](https://github.com/blueimp/jQuery-File-Upload/wiki/Google-App-Engine).
There is no need for callBack arguments, as the settings object - called _handler_ on the documentation for _initUpload_ - is passed by reference to _initUpload_, allowing you to adjust the URL by assigning it to _handler.url_.
As the settings object is cloned on each upload, there is also no danger of conflicts between different uploads or to loose the original settings.
",blueimp,2011-02-13 13:22:41
60,2011-02-13 06:42:57,"In [the sequential uploads example](https://github.com/blueimp/jQuery-File-Upload/wiki/Sequential-Uploads) you queue up download callbacks using the following code:

<S_CODE_TOKEN>

When the callback is later called (in the above example its the line containing `next();`) it is using the settings as they existed at the time that the upload callback was created. 

In other words, if I set `handler.url = ""my new url""` in the `onComplete` callback between uploads, it doesn't change the url for the existing queued up upload callbacks... they still use the original url. That is why I made the patch.
",maxogden,2011-02-13 13:22:41
60,2011-02-13 10:39:05,"Here you have a modified version of the Sequential Upload example that let's you change the URL for the next upload depending on the response of the last upload, without the need for the patch:

<S_CODE_TOKEN>
",blueimp,2011-02-13 13:22:41
50,2011-02-07 20:58:23,,deepthawtz,2011-02-08 20:01:58
50,2011-02-07 20:59:39,"also, the README was written in markdown but in a .txt file, github parses markdown so I changed the file to .md
",deepthawtz,2011-02-08 20:01:58
50,2011-02-08 20:01:58,"Sorry, but I won't pull in your suggested changes.

I'm aware of GitHub parsing markdown, but I chose the _.txt_ format by purpose:
It's a better format for distribution in a non-markdown aware context, e.g. from time to time I put a release on the jQuery plugin page. If the package is downloaded the README.txt file can be easily opened with a text editor by double-click while _.md_ fies might not be associated with the default OS text editor.
The markdown formatted README definitely looks better on GitHub, but the plain text version is readable enough in my opinion and the hyperlinks are also clickable.

The example code inside of the README might be helpful for some users, but the example code is right there in the ""example"" folder and the documentation links point to setup instructions as well.
In my opinion it doesn't add enough value as the code is rather lengthy and would add another place that needs updating.
However, sometime in the future I plan to add a more complete example that will probably need only one or two lines to setup and that would be some nice code for the README.
",blueimp,2011-02-08 20:01:58
43,2011-02-03 00:06:56,"S3 is picky about the file being the last value in the request. If it's not the last value, it'll reply with a ""400 Bad Request"".

I simply tweaked `legacyUploadFormDataInit` to insert them before `fileInput` instead of appending to `uploadForm`.
",lmarburger,2011-02-03 10:44:32
43,2011-02-03 02:47:16,"Thanks!
",blueimp,2011-02-03 10:44:32
