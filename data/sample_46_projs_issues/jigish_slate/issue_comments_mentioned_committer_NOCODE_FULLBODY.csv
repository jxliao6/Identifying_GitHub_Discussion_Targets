issue_num,datetime,body,login,mention_login
437,2015-06-02 23:05:31,"@jigish
- +1 for the Yosemite+ requirement.
- Is your upcoming rewrite in Swift?
- Are you going to use the `JSContext` class instead of a hidden WebView?
- You might wanna ask for some volunteer contributors who can help clean up the Github Issues that have accumulated and maybe help with the readme.
",sdegutis,jigish
437,2015-06-02 23:07:32,"@jigish Also, feel free to use https://github.com/sdegutis/WindowManager as a baseline for your rewrite if you choose Swift.
",sdegutis,jigish
437,2015-06-03 00:52:16,"@jigish Also, one approach that might be worth considering is to use Lua instead of JS. Lua is very similar to JS semantically, but much easier to integrate with than JSContext. Plus, Apple's rules around converting structures to/from JS are not super well defined, and there are times it will do a different thing than expected. Plus, the ObjC API for it does not integrate with Swift classes, you have to write NSObject-based classes with them. Since Lua has a C API, I wrote a Swift wrapper as https://github.com/sdegutis/lua4swift which you can use if you want. Just throwing it out there as a possibility.
",sdegutis,jigish
437,2015-06-04 01:41:31,"@jigish I'm happy to continue maintaining this version of Slate, so however you want to handle the rewrite, whether in this repo or in a separate repo, it doesn't really matter to me. :smiley:
",mattr-,jigish
437,2015-06-04 01:43:50,"@jigish If you do end up using the separate repo, I think it makes sense for me to have access to this repo. Another option is to create an organization and move this repo and the new repo for Slate2 into repos under the organization. I know GitHub support is generally happy to do those sorts of things for us.
",mattr-,jigish
437,2015-06-05 15:04:48,"@sdegutis If you (or anyone) is wanting to go the Lua route, I would recommend just checking out [Hammerspoon](http://www.hammerspoon.org/) and building from there. I've actually already started a pseudo slate rewrite (similar config principles) and would be happy to work with you in going that route. Lmk if your interested and I can push up my project to GitHub.

:+1: @jigish for resurfacing. Looking forward to the rewrite.
",rjhilgefort,jigish
437,2015-08-16 20:54:25,"hey @jigish 

I have no issues or feature/improvement suggestions for Slate, and that has been the case for the past 3 years or so. Just wanted to to thank you for this amazing work that has become such an important part of my workflow.

Nice to hear that you've managed to find a healthy life/work balance and are willing to return to the oss community. Take as much time as you need ;)
",arturhoo,jigish
437,2015-12-15 12:38:25,"@sdegutis the link to https://github.com/sdegutis/WindowManager seems broken. Is it moved?

@jigish were izz the goodies ;-) aka slate2 located?
",clemens-tolboom,jigish
437,2016-01-04 14:18:01,"Via https://github.com/sdegutis/mjolnir I ended up choosing https://github.com/Hammerspoon/hammerspoon as my replacement for slate.

@jigish thanks for the past years
",clemens-tolboom,jigish
409,2014-07-03 08:13:37,"@trishume Thanks a lot!
",p0deje,trishume
409,2014-07-18 20:32:22,"@trishume It may also be helpful to explain which PRs you did _not_ merge and why not.
",sdegutis,trishume
335,2013-08-31 17:13:51,"@SethMilliken thanks.. already was aware of the default `Ctrl-F3` binding, but... that solution ends up being a bit awkward.

I would have to `Ctrl-F3` -> `Home` -> `Right Arrow` (x # of times) to simulate a `Cmd-1`, `Cmd-2`, etc type of binding like `Snap` has.

I was hoping that there might be a way to actually invoke an item at a position in the dock.  I'm not an OSX guy, but I assume there must be a way to invoke items in the dock by an index.

One other note -- the `Snap` binding has a behavior that changes.  If the dock app is not running, it starts.  If the dock app is not the current app, it becomes current.  If it is the current app, then it is hidden.  The `focus` behavior of Slate is a little different in that it will always focus the app regardless of whether it's current or not.

It would be interesting to have an easy way to get at dock items by index directly.
",Iristyle,SethMilliken
262,2013-03-08 15:09:13,"@SethMilliken: Agree with you for the most part. However, KeyRemap4MacBook requires admin privileges only once, during installation. So as far as inconvenience goes (ignoring security aspects), its hardly an issue. Also, it might be worth investigating if admin privileges are required specifically for the Fn functionality (though I have a hunch it they would be, as well).
Using modal-key is a great option, I agree. I did not know about it, so thanks! But its not as seamless as an action that did not require switch modes etc.
Regarding using KeyRemap with Slate: Not a bad idea (I had thought earlier of doing that myself), but it still requires hotkeys to first be created using Slate, and mapping other (Fn-based) ones to those using KeyRemap. And these Slate hotkeys could still conflict/potentially conflict with other hotkeys, unless one choses really random/weird combinations that are unlikely to be used by the system/other app... but that's far from an ideal solution as far as I am concerned.

Having said that, I agree that you make useful points. If gigish/anyone else authorized to do so feels that the issue should be closed, they can go ahead and do that.
",himanshu0,SethMilliken
242,2013-03-09 11:47:01,"@jigish I've just noticed that my .slate.js doesn't load at all, or at least bindings don't work and S.log doesn't either. Could you look at it and tell me if there's something wrong? It used to work last week or so..
https://github.com/deiga/dotfiles/blob/master/slate.js
",deiga,jigish
193,2012-12-28 06:52:36,"@josh-  I like this a lot, but in order to maintain configurability, do you think you could divorce this from the original background rounded rect? I'd like to keep the option for both.
",jigish,josh-
193,2012-12-28 08:54:52,"@jigish Yup, that sounds like an even better idea. Should I add a new `config` directive?

Also, assuming someone configured Slate to draw the rounded rect behind the icon (as it is in the current shipping version) should a shadow/background be applied to the text? (Thinking of ways to improve readability).
",josh-,jigish
191,2012-12-28 08:59:11,"@jigish Sounds good mate, have a great vacation. I'll also see if I can get SL going in a VM or something in the next couple of days to try this out.
",josh-,jigish
189,2012-12-28 06:54:48,"@josh- is correct. Using the default `.slate` file you'll lose a lot of those bindings. If you want to remove them or change them copying the `default.slate` to `~/.slate` is the way to go. You can then mess with the bindings yourself and update them to whatever you want.
",jigish,josh-
165,2012-12-13 09:41:57,"@jigish  Still didn't achieve what I wanted. After trying some options in `undoOps`, I found something weird happening. 
1. When `chain` is removed from `undoOps`, the following 'chained' command does not save snapshot at all:
   `bind f:ctrl;alt;cmd     chain move screenOriginX;screenOriginY screenSizeX;screenSizeY | undo`
2. However, normal `move` options do save snapshot:
   `bind f:shift;ctrl;alt;cmd     move screenOriginX;screenOriginY screenSizeX;screenSizeY`

Tried this with 'move only'(`undoOps move`) and 'everything except chain'(`undoOps activate-snapshot,grid,layout,move,resize,sequence,shell`).
Adding `chain` results in saving the snapshot, but fails to activate it -- perhaps due to what you said, as it saves another snapshot.

From the observation, my guess is that
_undoOps without chain_ makes it **fail early** when `chain` is seen, preventing the inner `move` save snapshots..? 
I've tested it by reading the `Application Support/com.slate.Slate/snapshots` file.

.. or maybe I've made some stupid mistake somewhere in the config file.. 
",jangxyz,jigish
156,2012-11-29 22:55:40,"@jigish Sorry for the delay in responding here. Your initial comment about the syntax has now caused the shortcut to be recognized, but now the fn modifier is ignored completely. This is not just with arrow keys for me.
",michaelmior,jigish
153,2013-01-30 13:58:18,"@jigish So, is there a permanent JavaScript scope that stays alive between calls to the shortcuts then?
",eproxus,jigish
145,2012-11-17 20:25:19,"very interesting idea. i like it. +1 to @trishume though. But instead of changing that method what would be even better is if you could use `ShellUtils` from 9c0906b41b2ccc2fcec6feb1456af3e2ad83b87a to call the script. If you can't use it, then adding a method to `ShellUtils` that serves your purpose and using it would be better. thanks!
",jigish,trishume
140,2014-07-22 21:55:57,"@jigish You might find [this function](https://github.com/sdegutis/hydra/blob/fb4ef150f827a5a78fa0b9ba7f75ac4e43d54860/Hydra/API/application.m#L154-L170) helpful in implementing this feature, if you're comfortable with using private APIs. Otherwise, [this public function](https://developer.apple.com/library/mac/documentation/ApplicationServices/Reference/AXUIElement_header_reference/Reference/reference.html#//apple_ref/c/func/AXUIElementSetMessagingTimeout) might be another way to go.
",sdegutis,jigish
121,2013-10-02 19:27:19,"Thanks to direction from @SethMilliken (and the work by @jigish of course!) this config works for me:


",dreki,jigish
121,2013-10-02 19:27:19,"Thanks to direction from @SethMilliken (and the work by @jigish of course!) this config works for me:


",dreki,SethMilliken
103,2012-10-03 21:40:08,"Thanks @paddykontschak - For the record, I neither deny nor acknowledge the existence of this torrent.

@jigish But suppose hypothetically that I got Xcode 4.2 via some means and then tried to build the project again. I'd, uh, _probably_ get errors like the following:

.../slate/Slate/SlateAppDelegate.m:36:13: error: existing ivar 'currentHintOperation' for unsafe_unretained property 'currentHintOperation' must be __unsafe_unretained [4]

Any idea what that means? Is there some setting I'm missing somewhere?
",mohanzhang,jigish
100,2012-10-08 18:47:16,"This is perfect.  Thanks @jigish, top notch.
",robacarp,jigish
100,2012-10-08 19:21:41,"@jigish This is a great addition. Any chance of allowing the modal key to include modifiers? (I'm currently using e.g. `Command-Control-w` mapped to `f17` with KeyRemap4MacBook in order to work around this, so not a huge deal for me, but I'm sure others would appreciate it).
",SethMilliken,jigish
93,2012-10-05 01:19:10,"So, [determining the OS version](http://cocoadev.com/wiki/DeterminingOSVersion) on OS X is a pretty horrible hack, and I've found that one can simply use Applescript from within Cocoa to enable ""Access for assistive devices"", meaning that the user doesn't have to leave Slate. What do you think about that?

And I also agree with @trishume - so far I haven't had a single issue on Mountain Lion and it's working fantastically :)
",josh-,trishume
93,2012-10-06 22:00:33,"@josh- I like the idea of using Applescript from within Cocoa. Would make the process a lot easier than having to close Slate, open preferences, enable access, etc.
",jigish,josh-
93,2012-10-07 06:39:07,"@jigish Exactly, that's what I currently believe the best solution to be. Are you happy with [246eb6b](https://github.com/josh-/slate/commit/246eb6b3fea2920225488a6bcd5a47ed4bd1fd44) and [400138e](https://github.com/josh-/slate/commit/400138eb2a3af8506c8bf447b69073036ca0cdbb)?

Also, [as noted](https://github.com/jigish/slate/pull/115#issuecomment-9192928) by @SethMilliken, this merge would conflict with #115.
",josh-,jigish
91,2012-11-17 20:00:10,"+1 for Ruby. Slate is already the best thing ever (thank you @jigish!) but Ruby integration would combine the two best things ever for maximum bestness.

Although using Lua would make me just as happy and would be 10000x times easier to implement. Ruby will not be easy to embed until mruby comes out. Lua is probably a better solution but Ruby would be super cool.
",trishume,jigish
91,2012-11-24 02:55:16,"@mgax out of curiosity, I've started to do the lua version here: https://github.com/qmx/slate/tree/lua_support, using cocoapods to manage the dependency
",qmx,mgax
91,2012-11-27 23:05:41,"couple of thoughts (mainly so I don't forget myself):
1. if we're going to embed ruby/python/lua I'd like to do it right. e.g. you should be able to run the if/else _while_ the binding is activated. So you could use the current values of the window/screen/etc to change what you want to do with the particular binding in real-time. Like what @v-yarotsky commented.
2. I do _not_ want to shell out to achieve this. that would have horrible performance. As such I need a language with an interpreter that I can bind directly into objective-c. For example: what @mgax has done in his python branch.

I'm going to try to look into this today/tomorrow most likely and hopefully come out with a decision on the language to use going forward. Right now Python/Lua seem like the easiest to embed. Though I personally prefer Ruby so if I can find a good way to embed it I'll probably try that.

Also, if I do this, I'm going to try to revamp the documentation/wiki as part of the process since most of the syntax will change as a result.

And finally, I will obviously keep backwards compatibility with the current config syntax.
",jigish,mgax
91,2012-11-30 22:33:15,"It is awesome that @mgax has something working. I think it would be better if the scripting did not require direct interfacing with the objc api.

Maybe if something was passed into the functions like a `currentWindow` parameter and a `slate` object. The objects passed in would have simpler methods in the style of the language being used. The `currentWindow` object encapsulates operations on the focused window and the `slate` object allows the script to do things like query all the windows and show window hints.

Which would make your python example look more like this:



Or in Lua:


",trishume,mgax
91,2012-12-03 21:32:24,"@mgax suggested another option: Javascript. No additional Framework needed, all built in if you use WebViews. Plus the added benefit that it is pretty widely known/used.
",jigish,mgax
91,2012-12-03 21:35:51,"@jigish is there any API for using the JS engine without a webview? It would be rather hacky to have an invisible webview floating around at all times.
",trishume,jigish
91,2012-12-03 22:19:41,"@trishume unfortunately there is not. Though it does seem hacky it is the ""accepted"" way to run JS in objective c lol. Whatever that means :). There is the side benefit of maintaining a persistent context. For example you could save a JS variable in one binding to be used in another that is activated later (I'd use node.js style closures and proper exporting to make sure things don't get crazy). Also from what I remember the memory footprint isn't that bad though I'll make sure to test thoroughly. Also it will be running on the very mature safari JS engine and will benefit from any updates Apple makes to it.

All of this is still not enough to definitely say JS is the way to go, just food for thought :)
",jigish,trishume
91,2012-12-04 00:29:36,"One language-neutral and important point to discuss is how to link the scripting language. I can think of three options:
1. Make the entire config file a DSL of that language, maintain backward compatibility with old config files. Like:




1. Use a separate file and bind functions from that file like @mgax did with python.
2. Have a custom command that uses an inline script. Like this:



**What do people think? I am personally in favor of the DSL approach.**
",trishume,mgax
91,2012-12-04 01:04:39,"@jigish why?


",qmx,jigish
91,2012-12-04 06:56:24,"+1 on the DSL approach. It could call out to external code if you really want to, so you get the benefit of the separate-file approach. And we can write a conversion script to upgrade people's config files. For Python there is the decorator syntax:



@trishume i think http://will.thimbleby.net/script/ describes a nice approach to call into Objective-C from JS.
",mgax,trishume
91,2012-12-04 22:45:59,"Hmmmm, I have to figure out how to link to MacRuby, I'm going to try including the framework from the MacRuby distribution, I really don't want to have to compile it.

I might just fiddle with @mgax's python branch or @qmx's lua branch.

I've looked at the Slate code and in most cases the current operation objects can be used unmodified. The only problem is the move, hint and grid operations rely on ExpressionPoint objects, either the DSL library can create dummy expressionpoint objects of some subclass or the code can be modified to not rely on ExpressionPoint objects.
",trishume,mgax
91,2012-12-08 13:31:59,"I'm not sure about that, people seem to like the idea of a DSL and that is one of Ruby's specialties. I am currently working on implementing a DSL in MacRuby, which shouldn't be too hard. Embedding the MacRuby framework isn't that bad.

Looking back at comments, 4 people (myself included) seem to favor Ruby if it is possible, 2 people favor Python and 2 people favor Lua. If I interpret people's comments right.

I suggest that we build some prototypes and decide which one we like best, I'm building a MacRuby prototype, @mgax may want to build a prototype of a Python DSL and I'm not sure if anyone would be interested in doing other languages.
",trishume,mgax
91,2013-01-19 23:01:53,"@mgax - Nice! I was planning on hacking on slate a bunch this weekend, would love to pull this into to mainline so I can implement some of the stuff I was thinking about as well. Couple things I wanted to do:
- instead of `'l:cmd,ctrl,alt'` as a parameter, I'd like to start deconstructing the slate syntax so it would be more like `slate.bind('l', ['cmd', 'ctrl', 'alt'], function() { slate.resize(10, 0) }, true);`. I feel like doing this will make adding more complex features easier in the future. We'd keep support for the original syntax of course, but some of the new complex features would be only accessible if you use the javascript syntax.
- implement a bunch of variables in the slate object for use within the callback like current window stuff, current screen stuff, current screen configuration stuff, etc.
",jigish,mgax
91,2013-01-20 00:01:11,"@mgax that is awesome! Right now it is kind of inefficient and ugly since it creates a new operation from a string every time you call one of the methods.

I think a DSL would need a refactoring of the way some operations work and other DSL methods could directly call AccessibilityWrapper methods.
",trishume,mgax
91,2013-01-20 00:23:47,"Yes, I agree with @trishume - it would be nice to have a `slate.operation()` function that creates an operation for use in later bindings. that way you don't have to keep creating new ones later. also, the ability to specify a function as an argument (say the `x` value) to an operation will allow you to create a dynamic operation that can change based on the context without having to create a brand new operation.

now I'm getting super juiced about this. please excuse me while I hack away.
",jigish,trishume
91,2013-01-20 01:11:23,"@mgax - I hope you don't mind me merging your javascript branch to master and hacking on it. I have tons of time today and would love to get a lot of this squared away before a push a new version :)
",jigish,mgax
91,2013-01-20 08:15:17,"@jigish Go ahead and merge it, that was the point :) I was also thinking about pulling in Underscore.

Instantiating an Operation for every callback is not ideal, but we can worry about performance later, once we figure out what's possible with scripting, and where it's going.

I actually prefer string key definitions, they are shorter and more expressive, reminiscent of CSS selectors. The whole binding syntax is inspired by Backbone [event delegation](http://backbonejs.org/#View-delegateEvents) for views.

What sort of extra bindings do you have in mind? Here's one possible approach: Keep a simple API for JavaScript, basically a thin wrapper around `RegisterEventHotKey` and `activateBinding:isRepeat:`, and implement more complex constructs in JavaScript, where it's easier to experiment.
",mgax,jigish
91,2013-01-20 16:02:43,"@trishume Yes, that's precisely the idea, but the Slate bindings implementation doesn't make it easy. I have an idea how to make it work though. Also you need a working `setTimeout` implementation, but that should be no problem.
",mgax,trishume
91,2013-01-21 07:10:37,"ok just pushed my changes. theres a ton of stuff there. here is what is left to make this fully functional (so you only need the `.slate.js`):
- include @mgax's stuff to expose current window info, screen info, and other things
- add the other directives (`config`, `layout`, `default`, `source`)
- verify/add support for modal keys and implement modal toggle

some additional ideas/notes:
- `config` locally. i.e. setting a config for a particular binding and not for others
- `loop` operation. only available from js. will execute the given operation or function for every window (you'll be able to get the current window info from the function). should probably add an option to only loop through windows in the current app.
- `layout` should really be easier in js than it currently is in the default syntax. I'll try to clean it up when I implement it in js. Ideally, you should be able to call non-movement operations from within the layout (for example `hide`) without jumping through hoops and the various options should be easier to specify.
- `source` should be able to source both normal `.slate` files and `.slate.js` files.

I'm going to start with `config` since it should be really simple.
",jigish,mgax
91,2013-01-24 23:08:08,"@mzbik Infinite loops should not force a restart, all you have to do is force quit slate, the OS will not hang.

Adding a time limit stops cool behaviors like waiting for the user to press additional keys and things like that.

Also, awesome work @jigish and @mgax, I had hoped to contribute with MacRuby but the stupid GC incompatibility thwarted me :(
",trishume,mgax
91,2013-01-24 23:08:08,"@mzbik Infinite loops should not force a restart, all you have to do is force quit slate, the OS will not hang.

Adding a time limit stops cool behaviors like waiting for the user to press additional keys and things like that.

Also, awesome work @jigish and @mgax, I had hoped to contribute with MacRuby but the stupid GC incompatibility thwarted me :(
",trishume,jigish
91,2013-08-07 21:44:17,"@mgax, @mgax, @jigish, @trishume, @wez:

I just looked at the scripting-language discussion above, and I have some information that may help.

Recently I wrote my own window manager called AppGrid that was along the lines of Spectacle.app but with slightly different actions. Then I wanted to see if I can add scripting to it, so I copied Slate's approach of embedding JS. (However I used JSCocoa which wraps JavaScriptCore directly rather than going through a WebView.) And I renamed the app to [Zephyros](https://github.com/sdegutis/zephyros).

This worked fine, but I wanted to try adding Ruby too. I looked into MacRuby, and as noted above, realized that it only works in GC-enabled apps, and my app used ARC. And RubyCocoa was deprecated. So I just compiled Ruby 2.0 and embedded it directly. It was easy enough to do, took just one weekend.

But then I wanted to embed Python. And Lua. And F-Script, and Nu. But I realized this wouldn't scale, because the executable was getting really big. And I wanted to script it in Go and Rust and Elixir, but you can't embed these into an ObjC app. So I concluded that embedding was the wrong approach if my goal was to extend it via more than one language.

So I came up with what I think is a good compromise. The app acts like a server, listening on a local unix socket, and scripts are written as clients that connect and send messages and receive responses. The protocol is a simple JSON protocol that mimics ObjC method calls, so you would send Zephyros `[message_id_1, my_window_id, ""title""]` and it would send back `[message_id_1, ""Terminal.app - bash""]` for example. Here's some [more details about it](https://github.com/sdegutis/zephyros/blob/master/Docs/TCP.md).

The performance doesn't suffer from this approach. Even on my slower Mac, it performs just as good as it did when it was embedded. The overhead of using unix sockets and parsing JSON doesn't seem to be much higher than the overhead of translating JS <-> ObjC using a WebView. But admittedly you'd have two processes running instead of just one. However that may be a pro rather than a con, depending on how you look at it.

What do you think of taking this approach in Slate.app? It might involve a little internal refactoring, but I think allowing Slate to be scripted in many languages would be really cool.
",sdegutis,mgax
91,2013-08-07 21:44:17,"@mgax, @mgax, @jigish, @trishume, @wez:

I just looked at the scripting-language discussion above, and I have some information that may help.

Recently I wrote my own window manager called AppGrid that was along the lines of Spectacle.app but with slightly different actions. Then I wanted to see if I can add scripting to it, so I copied Slate's approach of embedding JS. (However I used JSCocoa which wraps JavaScriptCore directly rather than going through a WebView.) And I renamed the app to [Zephyros](https://github.com/sdegutis/zephyros).

This worked fine, but I wanted to try adding Ruby too. I looked into MacRuby, and as noted above, realized that it only works in GC-enabled apps, and my app used ARC. And RubyCocoa was deprecated. So I just compiled Ruby 2.0 and embedded it directly. It was easy enough to do, took just one weekend.

But then I wanted to embed Python. And Lua. And F-Script, and Nu. But I realized this wouldn't scale, because the executable was getting really big. And I wanted to script it in Go and Rust and Elixir, but you can't embed these into an ObjC app. So I concluded that embedding was the wrong approach if my goal was to extend it via more than one language.

So I came up with what I think is a good compromise. The app acts like a server, listening on a local unix socket, and scripts are written as clients that connect and send messages and receive responses. The protocol is a simple JSON protocol that mimics ObjC method calls, so you would send Zephyros `[message_id_1, my_window_id, ""title""]` and it would send back `[message_id_1, ""Terminal.app - bash""]` for example. Here's some [more details about it](https://github.com/sdegutis/zephyros/blob/master/Docs/TCP.md).

The performance doesn't suffer from this approach. Even on my slower Mac, it performs just as good as it did when it was embedded. The overhead of using unix sockets and parsing JSON doesn't seem to be much higher than the overhead of translating JS <-> ObjC using a WebView. But admittedly you'd have two processes running instead of just one. However that may be a pro rather than a con, depending on how you look at it.

What do you think of taking this approach in Slate.app? It might involve a little internal refactoring, but I think allowing Slate to be scripted in many languages would be really cool.
",sdegutis,jigish
91,2013-08-07 21:44:17,"@mgax, @mgax, @jigish, @trishume, @wez:

I just looked at the scripting-language discussion above, and I have some information that may help.

Recently I wrote my own window manager called AppGrid that was along the lines of Spectacle.app but with slightly different actions. Then I wanted to see if I can add scripting to it, so I copied Slate's approach of embedding JS. (However I used JSCocoa which wraps JavaScriptCore directly rather than going through a WebView.) And I renamed the app to [Zephyros](https://github.com/sdegutis/zephyros).

This worked fine, but I wanted to try adding Ruby too. I looked into MacRuby, and as noted above, realized that it only works in GC-enabled apps, and my app used ARC. And RubyCocoa was deprecated. So I just compiled Ruby 2.0 and embedded it directly. It was easy enough to do, took just one weekend.

But then I wanted to embed Python. And Lua. And F-Script, and Nu. But I realized this wouldn't scale, because the executable was getting really big. And I wanted to script it in Go and Rust and Elixir, but you can't embed these into an ObjC app. So I concluded that embedding was the wrong approach if my goal was to extend it via more than one language.

So I came up with what I think is a good compromise. The app acts like a server, listening on a local unix socket, and scripts are written as clients that connect and send messages and receive responses. The protocol is a simple JSON protocol that mimics ObjC method calls, so you would send Zephyros `[message_id_1, my_window_id, ""title""]` and it would send back `[message_id_1, ""Terminal.app - bash""]` for example. Here's some [more details about it](https://github.com/sdegutis/zephyros/blob/master/Docs/TCP.md).

The performance doesn't suffer from this approach. Even on my slower Mac, it performs just as good as it did when it was embedded. The overhead of using unix sockets and parsing JSON doesn't seem to be much higher than the overhead of translating JS <-> ObjC using a WebView. But admittedly you'd have two processes running instead of just one. However that may be a pro rather than a con, depending on how you look at it.

What do you think of taking this approach in Slate.app? It might involve a little internal refactoring, but I think allowing Slate to be scripted in many languages would be really cool.
",sdegutis,trishume
83,2012-09-07 21:16:01,"Thanks @jigish! Issue resolved. I failed step 1. :D

Appears to be working ok on Mountain Lion. I'll play with it a bit more and let you know how things go.
",simpleshadow,jigish
78,2013-06-12 01:09:21,"`osxmonad` relies on private APIs, which it sounds like @jigish wants to avoid. I've been working on an xmonad-style tiling window manager for OS X (similar to `osxmonad`, but in Objective-C instead of Haskell, you can find it [here](https://github.com/ianyh/Amethyst) if you're curious). I figured out a way to move windows between spaces and have a writeup on how it works [here](http://ianyh.github.io/blog/2013/06/05/accessibility/), which might be of interest here.
",ianyh,jigish
78,2015-05-25 16:55:05,"@jigish Hey, it's been a while, what's the current status of this issue?
",alexilyaev,jigish
77,2013-12-12 15:42:01,"I don't usually recommend downloading executables from strangers (including myself), but if you can't wait, I've added a compiled version of my fix [here](https://github.com/jpsim/slate/releases/tag/v0.0.0).

I'd also like to know what @jigish thinks of this approach and why it hasn't received his attention yet :smile:.
",jpsim,jigish
33,2012-07-03 23:22:30,"@jigish Looking forward to it, thanks for the great work :)
",dcai,jigish
445,2015-03-14 18:17:56,":+1:, ping @jigish 
",nylen,jigish
445,2015-12-04 17:29:39,"+1 @jigish :)
",mrooney,jigish
445,2016-11-17 23:39:31,"@jigish any chance of a merge of this super simple documentation PR? I think it would really help others still get benefit from your hard work!
",mrooney,jigish
437,2014-12-17 07:08:11,"_Edit_

According to the non response of jigish, here is a fork that seems a better choice
# [mattr-/slate](https://github.com/mattr-/slate)

---

Hi @jigish,

First of all thanks for your awesome work. I thank you in my head each time I'm triggering my layout adjustment command :)
I've tried every window manager I've found for OS X & the one you did is still the best we can find these days. JavaScript configuration file is just the icing on the cake !

According to your GitHub activity I understand that you are pretty busy with other stuff in your life than this application (& that's a good thing for you). However I saw over there so many issues & pull requests that I'm wondering about the evolution of this app. I don't like to see apps I like & use to start going down because the maintainer is a busy man (I am a busy man too, we all are & that's good for our lifes).

So what about to cherry pick some people to give them write access in this repos? It can be a good thing to keep the project up to date with the OS & community needs.
I know this idea seems crazy, but I really think this can be a good thing for your project. You can keep an eye over there & give your opinion (I am sure you still are interested by the project).
You can also just say ""yes please do that"" or ""no I don't want that for this app"". You can still be the leader of course.

Please think about this idea :)
",MoOx,jigish
437,2014-12-17 23:49:01,"I'd like to be a contributor if possible.

@mattr- the advantage of keeping the repo here is that there are so many people following it and it has many issues already submitted. Hopefully @jigish will allow several of us write access to the repo so your fork can be merged back here.
",asethwright,jigish
437,2014-12-18 00:29:08,"Having access to this repo would be ideal, but the emails I've sent to @jigish have gone unreplied to, so I started my own fork. :sob:
",mattr-,jigish
437,2014-12-22 18:53:18,"That's a shame @jigish just ignore all messages. Not a cool way to behave :(
",MoOx,jigish
409,2014-07-02 16:52:10,"This PR is an amalgamation of the merging of many of the good pull requests that have been submitted but not merged. I've compiled and tested them and they all work together.

Anyone who wants an app package with all these changes can download one here (not signed sorry):
http://thume.net/downloads/Slate.zip

@jigish if you don't want to look at individual PRs you can just merge this one.

Creators of PRs in this one: @josh- @napcae @jpsim @mattr- @wincent @georg
",trishume,josh-
409,2014-07-02 16:52:10,"This PR is an amalgamation of the merging of many of the good pull requests that have been submitted but not merged. I've compiled and tested them and they all work together.

Anyone who wants an app package with all these changes can download one here (not signed sorry):
http://thume.net/downloads/Slate.zip

@jigish if you don't want to look at individual PRs you can just merge this one.

Creators of PRs in this one: @josh- @napcae @jpsim @mattr- @wincent @georg
",trishume,jigish
387,2014-07-18 20:30:38,"@jigish @wincent When implementing this feature, this code may be of help: https://github.com/sdegutis/hydra/blob/b20be10f649f4d1c2c7785a00b0602afec14c801/Hydra/API/application.m#L193-L194
",sdegutis,jigish
387,2014-07-19 21:17:51,"It was implemented in the pull request 4 months ago.

On Friday, July 18, 2014, Steven Degutis notifications@github.com wrote:

> @jigish https://github.com/jigish @wincent https://github.com/wincent
> When implementing this feature, this code may be of help:
> https://github.com/sdegutis/hydra/blob/b20be10f649f4d1c2c7785a00b0602afec14c801/Hydra/API/application.m#L193-L194
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/jigish/slate/pull/387#issuecomment-49476308.
",wincent,jigish
371,2014-04-16 16:09:26,"Hi @jigish, could you please take a look at this to see if it's merge-worthy? Thanks!
",jpsim,jigish
371,2014-12-16 14:30:38,"Come on @jigish, this is a great feature! :)
",hector,jigish
344,2013-10-02 18:09:26,"Bump @jigish 
",philc,jigish
338,2013-09-06 16:18:48,"I'm definitely interested in finding a better way to do this.

@philc 
I currently do this by walking all windows of an application looking for a matching title.
I ended up writing a [runOrRaise](https://github.com/legumbre/dotslatejs/blob/master/slate.js#L39-L93) command which takes an application name and a lambda as a filter and focus only windows matching that filter.
So something like `runOrRaise(""Emacs"", function (w) { return w.title() == ""foo.org""; })` would focus the Emacs frame currently displaying the `foo.org` buffer. 

This is not the best solution but it seems to work pretty well, maybe someone else can use it and improve it, so there.

@jigish 
Thanks for Slate, it's wonderful!
",legumbre,jigish
304,2015-02-25 09:10:08,"@jigish's project appears to be dead. Please report this on the most active fork:

https://github.com/mattr-/slate
",blag,jigish
193,2012-12-28 02:45:18,"As noted by @slavick in #183, the window hints are currently quite difficult to read when drawn on lighter icons.

This change draws the transparent rounded rect infront of the icon, instead of behind it.

Some screenshots:
![MacVim](https://f.cloud.github.com/assets/712727/33511/facc3b5e-5097-11e2-8bf4-eb017b167e9a.png) ![TextEdit](https://f.cloud.github.com/assets/712727/33512/faf9a440-5097-11e2-95f0-d0ad6ee2c364.png) ![Xcode](https://f.cloud.github.com/assets/712727/33513/fb268974-5097-11e2-8212-b3c6a2d5da74.png)

I'd like to get @trishume's thoughts on this too - since he was originally the one who [implimented icons in window hints](https://github.com/jigish/slate/commit/fb74fd139dbb156c104936231becda28ea41bf8a).

Also, some constants might need their name changed to reflect the updated position of the rounded rect.
",josh-,trishume
183,2012-12-28 06:57:42,"I like @josh-'s fix for this. We'll have the option to add a rounded rect under the letter once I merge that in.
",jigish,josh-
164,2012-11-27 23:12:55,"@kvs - good shit. I'll add this to the read me today.
",jigish,kvs
160,2012-11-28 00:40:46,"Also, @trishume has written an awesome post about getting started with slate here: http://thume.ca/howto/2012/11/19/using-slate/
",jigish,trishume
143,2012-11-17 18:34:00,"Odd that @jigish even asked for this but there has been no word from him on this pull request.
",trishume,jigish
128,2012-10-09 18:30:51,"FYI, @jigish discusses adding an operation for running shell commands [here](https://github.com/jigish/slate/issues/78#issuecomment-9121185) and [here](https://github.com/jigish/slate/issues/85).
",SethMilliken,jigish
93,2012-10-07 06:39:07,"@jigish Exactly, that's what I currently believe the best solution to be. Are you happy with [246eb6b](https://github.com/josh-/slate/commit/246eb6b3fea2920225488a6bcd5a47ed4bd1fd44) and [400138e](https://github.com/josh-/slate/commit/400138eb2a3af8506c8bf447b69073036ca0cdbb)?

Also, [as noted](https://github.com/jigish/slate/pull/115#issuecomment-9192928) by @SethMilliken, this merge would conflict with #115.
",josh-,SethMilliken
