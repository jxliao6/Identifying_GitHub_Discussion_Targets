issue_num,datetime,body,login,close_date
887,2017-03-28 00:27:59,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary

In similar fashion to `--query`, use `--index` to specify which line to initially place the cursor on (after `--query` has been applied if provided). This, together with `--sync` will be especially useful in implementations such as `:BLines` as you could start the cursor on the line you're on. It would also enable resuming fuzzy sessions (the user could cache the lines in a temp file when it makes sense to do so - very useful for resuming `:Ag` searches where you left them).

",nkgm,
886,2017-03-27 21:04:15,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

Hey,

I am looking for whether or not fzf has a similar option to the one in CtrlP named ""by_filename"". When activated, this options allows the user to first type the filename (the most instantaneous thing that comes to mind,) and if that is not enough, type a `;` and type things relevant to the path (the second thing that comes to mind, the seggregating factor between multiple filenames.)

Is that already present in fzf? If not, is this something that could be considered? This option feels very instinctive to me and I am surprised I did not find anything on the matter before. Maybe I used the wrong search terms?

Cheers!
",mqnfred,
886,2017-03-28 04:03:47,"First note that fzf is a general-purpose text filter and does not know if the input is a list of file paths, so there's no specialized handling for specific type of input.

There are several approaches I can suggest
1. `fzf --tiebreak=end`
    fzf prioritizes matches that are close to the end, so it's likely that you'll see matches in file names are ranked higher.
2. `fzf --delimiter / --nth -1,..`
    These options tell fzf to first search within the last token (`-1`) separated by delimiter `/`, which should be the file name, and if no match is found, search the whole line (`..`)
3. If you know the extension of the file you can use the information to greatly narrow down the result, e.g. `.md$ readme`.",junegunn,
885,2017-03-26 13:09:19,"This displays the buffer(s) in this case, which is useful when FZF got
stuck, and you have to manually remove the buffer.",blueyed,2017-03-27 04:41:40
885,2017-03-27 04:41:51,Thanks!,junegunn,2017-03-27 04:41:40
884,2017-03-26 06:09:19,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

When using fzf with --height option, fzf is slow to start up. This issue is not occurring with termite.

alacritty config: default
fzf version: 0.16.6

It takes a noticeable ~1 second for fzf --height 40% to start up.",wooken,
884,2017-03-27 04:37:15,"Hmm, my guess is that the terminal emulator is not reporting the cursor position promptly. Do you see immediate result when you do `echo -e '\x1b[6n'`?

(reference: https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes)",junegunn,
884,2017-03-27 06:04:29,"<S_CODE_TOKEN>

The sequence activates reverse-i-search for some reason. Is this expected?",wooken,
884,2017-03-27 06:17:15,"No, that's strange. Can you post the output of `bindkey`? And please check if you have the same issue on bash.",junegunn,
884,2017-03-27 07:01:15,"Here is the output for bindkey:
<S_CODE_TOKEN>

I tried using bash and I am still getting the same ~1 second load time when compared to zsh/bash in termite.
I removed my zprezto config and had zshrc with only the single line that fzf requires to run. It didn't seem to help.",wooken,
884,2017-03-27 07:26:14,"I see, thanks for the information. I'll have to try alacritty myself.",junegunn,
883,2017-03-24 07:19:56,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [x] Windows
    - [x] Windows Subsystem for Linux
    - [x] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

Add argument to select the specific line if there is any. For example --line=""previous_selection""

Use case: loop in script with `fzf`:
- start `fzf`, select or move cursor to something, exit from `fzf`
- process selected entry
- start `fzf` with the same startup options

Right now cursor at the first line.
Expected that cursor will be at last selected position.
This will be useful in huge amount of fzf scripts with **while** or **for** blocks
It will allow to process flawlessly list of fzf entries one by one.



",ezh,2017-03-27 19:18:07
883,2017-03-24 15:50:20,"Hi, this was discussed in the past but I can't find the specific issue. Actually desigining the feature is not so trivial.
- fzf run asynchronously, i.e. it starts the finder before input stream is complete. We can't tell when the designated line will come, or will ever appear. To avoid confusion fzf will have to block until the line appears or the stream is closed.
- If the line doesn't appear on page 1, fzf will have to start with non-zero scroll offset. It can be really confusing to the users as we don't have scroll indicator (scrollbar).
- The idea expands. Should we also allow multiple pre-selections for `--multi` option? Should we allow regular expressions for pre-selecting? Yes, a few users may find these features useful, but adding more options will make fzf more complex and make it harder for me to maintain. I'd really like to avoid adding new features.

Having said that, I believe there are a couple of different approaches you might want to consider instead
- Using `execute` or `execute-silent` bindings will solve your problem nicely if you don't have to refresh the list every time. fzf uses `$SHELL` to start the command specified in `execute` body, so you can export shell functions and use it from there.
- If you do have to refresh the list, then the script starting fzf can reorder the input so that the previous selection comes first.


",junegunn,2017-03-27 19:18:07
883,2017-03-25 22:53:28,"This is my use case https://github.com/ezh/fzf-ls

I am sure that there are a lot of complex cases that hard to implement.

It is possible to make it a little, step by step.

For example as first step, select if possible after timeout only if text is already visible.

Since there will be improvements in future, the parameter may be complex:
`--line=""timeout_ms,selection text""`

If you decide that this is out of scope, please close this thread.",ezh,2017-03-27 19:18:07
883,2017-03-26 06:55:28,"I think that my feature request is incorrect.
The proposal is
* to save fzf state to properties file at exit (option --save state.conf)
  as the first step content with property of selected names
* to load fzf state after a while from properties file (option --load timeout_ms,state.conf)
  the state is restored as much as possible

This allows to serialize more parameters in the future.
This allows to prepare complex state by external tool and initialize fzf with precise control.

",ezh,2017-03-27 19:18:07
883,2017-03-27 16:12:27,"Thanks for the clarification. The idea is intriguing, but it will certainly bring up many subtle design choices we'll have to make along the way and it seems inevitable that we'll end up with a pack of new options only for very advanced, exceptional use cases. The question is if it's worth it.

But after looking at your project, I think what you really need is `execute` action I suggested above. Please experiment with it first and let me know of the features you can't implement with it. You also might want to consider using `--no-clear` option to avoid flickering of the screen between fzf sessions (just don't forget to `tput rmcup` when you're done).",junegunn,2017-03-27 19:18:07
883,2017-03-27 19:18:07,"Thank you for suggestion and hints. Anyway serialization of state is useful for some cases but I understand risks of API overload. This only your decision.

Quality is much better than quantity.",ezh,2017-03-27 19:18:07
882,2017-03-24 05:41:30,"This PR starts allows the vim plugin to work for Neovim in Windows by starting a new and separate terminal via cmd.exe and the start command. This is a workaround for the missing `:terminal` support.

I used jobstart() and on_exit to mimic s:execute() for Vim in Windows.

Tested only in Windows 8.1 and a recent March build of Neovim for Windows.",janlazo,
882,2017-03-24 15:15:25,"Thanks. As far as I know, Windows support of Neovim is experimental and is not officially announced yet. I'm not quite sure if I want to add code for it at this point.

> I used jobstart() and on_exit to mimic s:execute() for Vim in Windows.

So Neovim for Windows will not have `:terminal`? Then can't we just unset `use_term` and use the same code for ordinary Vim on Windows? Any reason `s:execute` can't run on Neovim?",junegunn,
882,2017-03-24 15:16:33,"> So Neovim for Windows will not have :terminal ?

It's planned, and was working at one point, but no timeframe on it.",justinmk,
882,2017-03-25 01:03:28,"`:!some_shell_command`  is non-interactive and is shellescaped by Neovim. `:!fzf` works but the UI is frozen and the user cannot see fzf running. Shellquoting in Windows is not resolved yet and `system()` is non-interactive. `jobstart(['executable', 'args', ...], callback_dict)` is the only choice left to run a separate process and terminal for fzf and get around the shellquoting issue. Doing this does not freeze the Neovim UI so putting the jobstart in `s:execute()` would return an empty array. If we move the new code in `s:execute()`, would this break any assumptions in the code meant for ordinary Vim?

Nightly builds of Neovim for Windows include nvim-qt for a GUI because there's no TUI officially available yet so we can limit the scope of the new code for Neovim GUIs in Windows only.",janlazo,
882,2017-03-25 21:03:06,"TUI is ""sort of working"" in neovim, and the related PR will be merged soon.",justinmk,
882,2017-03-26 01:59:04,"`:FZF C:/Program\ Files\ (x86)\` fails in Neovim for Windows. Paths with no spaces work. Toggling `shellslash` changes some slashes but the result is the same. Moving the code to `s:execute()` has no effect.

Full command:
`fzf  --multi  --prompt 'C:/Program Files (x86)/'  --expect=ctrl-v,ctrl-x,ctrl-t --no-height > C:/Users/JANEDM~1/AppData/Local/Temp/nvimzOaZXl/0`

Does https://github.com/neovim/neovim/pull/6359 fix this issue?",janlazo,
882,2017-03-26 09:15:20,"@junegunn How far can I go for handling the filepaths on Windows?
I need to add `fzf#fnamemodify()` and `fzf#getcwd()` for `s:shortpath()` since `shellslash` affects both the shellquoting (which depends on the slash) and the filepath slashes (forward or back). I'll need to use batch file because backslashes are shellescaped via double-quotes which breaks `:!` in Vim.

I'm defaulting to `set noshellslash`  with backslash filepaths for Vim.
Paths with spaces still break on Neovim though.

@justinmk I'm using this build currently. Should I get the latest?
`nvim --version`
NVIM v0.2.0-828-g11b08bb0
Build type: Release
Compilation: C:/msys64/mingw64/bin/gcc.exe -Wconversion -O2 -DNDEBUG -DDISABLE_LOG -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -D__USE_MINGW_ANSI_STDIO -D_WIN32_WINNT=0x0600 -Wvla -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -DHAVE_CONFIG_H -IC:/projects/neovim/build/config -IC:/projects/neovim/src -IC:/projects/neovim/.deps/usr/include -IC:/projects/neovim/.deps/usr/include -IC:/projects/neovim/.deps/usr/include -IC:/msys64/mingw64/include -IC:/msys64/mingw64/include -IC:/projects/neovim/build/src/nvim/auto -IC:/projects/neovim/build/include
Compiled by appveyor@APPVYR-WIN
",janlazo,
882,2017-03-26 11:07:50,@janlazo try https://github.com/neovim/neovim/pull/6359 or just wait for it to be merged.,justinmk,
882,2017-03-26 14:06:58,"`set noshellslash` should cause shellescape() to double-quote but it always single-quotes in Neovim.
`fzf --prompt 'C:\Program Files (x86)\'` fails on cmd but works on powershell. Tradeof is the startup of the new powershell process.
Using the batchfile didn't matter because the prompt issue is on cmd.
",janlazo,
882,2017-03-26 23:08:36,"I used powershell in this commit, https://github.com/janlazo/fzf/commit/7a752fbb0371cdcd13ae2c952c910611c4c7cba6, to get around the single-quote escaping. I passed `-NoProfile` to speed up startup time similar to `vim -u NONE`.
`:FZF path_with_spaces` work on that commit for Neovim on Windows.",janlazo,
882,2017-03-28 01:57:52,"@junegunn This PR has a mixture of commits meant for Vim but is compatible with Neovim via powershell. I can make a separate PR for using backslashes in Windows filepaths such that, with `set noshellslash`, the finalized command passed to `:!` should  use backslash for all filepaths.",janlazo,
882,2017-03-28 02:47:07,"Thanks for your work @janlazo. To be honest, it's a little hard for me to follow this thread; what are the exact problems we are trying to solve? What are the steps to reproduce each problem and how do we validate the correctness of the fixes? Are we talking about Vim, Neovim, or both? Is this the right time for us to make changes for unannounced Neovim? Is it okay for us to proceed with the Neovim issues mentioned above unresolved? Do we have to fix the code for `:FZF` command? Because then we also have to fix some commands in fzf.vim repository.

So basically what I'm saying is that I'd like to see this PR broken down into smaller ones each tackling a single problem.",junegunn,
881,2017-03-22 19:58:40,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [x] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [x] fish

The first item in the result is prefixed by some weird characters 

<S_CODE_TOKEN>

![](https://www.dropbox.com/s/bn1dzowj9bnx0m1/Screenshot%202017-03-22%2020.36.05.png?dl=1)

fzf version 0.16.6
tmux 2.3

This only happens in tmux. I have tried both `fzf` and `fzf-tmux` commands",deepredsky,2017-03-24 15:22:37
881,2017-03-23 03:33:23,"I'm not familiar with that `CursorShape=0`. Is it from your configuration?
Also, what is the value of `$TERM`? Does it start with `screen-`?",junegunn,2017-03-24 15:22:37
881,2017-03-23 22:44:50,"Dunno where the CursorShape is coming from. i also tried with clean install of tmux with no custom config but got same result

<S_CODE_TOKEN>",deepredsky,2017-03-24 15:22:37
881,2017-03-24 01:02:29,"This looks related: https://www.iterm2.com/documentation-escape-codes.html
Any idea?",junegunn,2017-03-24 15:22:37
881,2017-03-24 15:22:37,I looked into this issue a bit more and i m convinced this is not related to fzf but its due to iTerm setting up CursorShape when starting the tmux server. If I start a clean tmux session from another emulator like terminal or alacrity the issue does not appear (which i can use as as workaround as well). The escape codes link is probably a clue to fix it but not something i was able to do. Thank for looking into this issue though.,deepredsky,2017-03-24 15:22:37
881,2017-03-24 16:05:37,"I use iterm2 but I don't have the issue. Please let me know if you find out more about the issue, thanks.",junegunn,2017-03-24 15:22:37
880,2017-03-22 17:24:13,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I'm trying to asynchronously feed data into fzf via a named pipe.

However, it drills down to two options which don't fully work:

`tail -f /tmp/my_fifo | fzf` - This works, allowing me to incrementally input data into the fifo that appear on fzf, but after choosing the result, I must force close the `tail` command, which makes this method inviable for use within vim.
`fzf < /tmp/my_fifo` - This reads the first occurrence of data and immediately closes the fd.

Are there other options for reading data from a named pipe?",hkupty,2017-03-22 18:13:05
880,2017-03-22 18:06:38,"<S_CODE_TOKEN>

Makes sense?",junegunn,2017-03-22 18:13:05
880,2017-03-22 18:13:37,"Works!

Cheers",hkupty,2017-03-22 18:13:05
879,2017-03-22 15:07:58,"Hi I am running into an error when trying to use fzf in tmux+vim on an ssh session on a remote linux vm.

From within vim, I get the error:

<S_CODE_TOKEN>
I have mapped

<S_CODE_TOKEN>

In my vimrc, which might be pertinent, but it works locally (OSX) and I get the same error running `:Files` directly. Happens in and outside of tmux.

Please lmk if you have any advice here, happy to look into this myself if you can point me to a place to start or an existing issue.

Love the program it's really improved my workflow dramatically working within a large tree. Thanks!

<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [x] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

",jfo,2017-03-22 18:29:44
879,2017-03-22 18:09:04,"First make sure that the command shown in the error message works correctly on your shell, you can start from there. I mean this one:

<S_CODE_TOKEN>",junegunn,2017-03-22 18:29:44
879,2017-03-22 18:27:15,"aha

<S_CODE_TOKEN>",jfo,2017-03-22 18:29:44
879,2017-03-22 18:29:44,"You know what, 

I have an outdated binary on my vm.

Updating that fixed it, thanks! I just overlooked it when updating the plugin.",jfo,2017-03-22 18:29:44
879,2017-03-23 03:36:56,"Yeah, so it's probably a good idea to run the install script whenever the repo is updated.

<S_CODE_TOKEN>",junegunn,2017-03-22 18:29:44
878,2017-03-21 14:11:45,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

When running the following command

<S_CODE_TOKEN>

from a zsh shell within a neovim terminal buffer, nothing happens until I subsequently press any two keys in succession, at which point the fzf window shows up as normal.  This doesn't occur without `--height`, or when using `fzf-tmux`.",pokey,2017-03-21 14:32:55
878,2017-03-21 14:23:25,same as https://github.com/junegunn/fzf/issues/809#issuecomment-273226434,justinmk,2017-03-21 14:32:55
877,2017-03-20 15:52:39,"In my previous pull request I made a mistake as discussed here: https://github.com/junegunn/fzf/pull/870
This is now the correct version where the colon is in front of the hyphen.",S4mw1s3,2017-03-20 16:06:14
877,2017-03-20 16:06:27,Thanks!,junegunn,2017-03-20 16:06:14
876,2017-03-20 10:26:15,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [x] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [x] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

This ""base"" scenario works fine:

I run
<S_CODE_TOKEN>`

choose ""two"" and ""three""

<S_CODE_TOKEN>`

hit ""Enter"", and I get:

<S_CODE_TOKEN>`

[All good here]

----

Is there a way to change the options so I will get output with a different delimiter than space between the chosen items?

e.g

<S_CODE_TOKEN>` 

or a 'newline'

<S_CODE_TOKEN>`

Thanks!",eyalev,2017-03-20 17:05:14
876,2017-03-20 17:05:14,"I don't think it's necessary, you can process the list in the execute command. For example,

<S_CODE_TOKEN>

If the command feels too complicated and unreadable, you should probably create an external script file.

<S_CODE_TOKEN>",junegunn,2017-03-20 17:05:14
875,2017-03-19 17:58:36,"Hello,

> :cherry_blossom: A command-line fuzzy finder written in Go 

""commande-line"" is not clear enough. Screencast looks like it is a tool for vim to quickly find a file based on a part of filename. Is it only that? Is there an independent command-line interface?

""fuzzy finder"" is not clear enough. What's a fuzzy finder? (Of course I can Google for that and I have, but your project deserves at least a few more words.)

How does it get its data? Where does it store it? Does it analyze file content? Text formats only? Can it index removable storage and put the information on the storage, rather than in user home dir? Is the data updated real time or only on command?

Adding this kind of information to the main README.md would sure be helpful to visitors to understand what the project is and is not.  Thanks!
",fidergo-stephane-gourichon,
875,2017-03-20 17:06:44,"Thanks, I'll think about it when I get some time, and of course, a pull request is welcome.",junegunn,
874,2017-03-16 17:36:57,"I read this article about zsh: http://code.joejag.com/2014/why-zsh.html and loved the part about completing command line flags (the section titled ""What was that switch?""). 
I'm using bash, and after seeing what you did with `kill` completion, was wondering if it is possible to implement command flag completion on bash using fzf. 
Feel free to close if this is not possible or you cannot provide any pointers.
Thanks in advance!!",petobens,2017-03-19 10:31:41
874,2017-03-19 10:31:41,"Yeah, it's possible but you would have to implement completion for each command with the complete knowledge of its flags. You may get some ideas in the following links

- https://github.com/junegunn/fzf/wiki/Examples-(completion)
- https://github.com/junegunn/fzf/issues/760
 ",junegunn,2017-03-19 10:31:41
873,2017-03-14 20:45:36,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

Would it be possible to add an option to sort the input dynamically?

I'm using this to get all files of my notes folder sorted by modified date:

<S_CODE_TOKEN>

This gives me a list like:
<S_CODE_TOKEN>

Which is fine except that because of `| sort` fzf has to wait for the process to complete before it receives any data. If it could sort the input data itself it could start displaying the results immediately.",laktak,2017-03-19 10:28:57
873,2017-03-19 10:28:57,"No, it's not something I would add to fzf. As you can see in `man sort`, sorting is not trivial and I don't think it's a good idea to try to reimplement the process in fzf. And as soon as you type in a query string to fzf, fzf will sort the matched items by the relevance score, so I don't see much value in having another way of sorting the input.",junegunn,2017-03-19 10:28:57
872,2017-03-13 13:36:19,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

For some reason, `cd <tab>` is not auto-complete for me. I am running on a linux terminal X11-forwarded to a Windows machine.

fzf version is `0.16.6`.

I have narrowed down the problem to these lines in `shell/completion.bash`:
<S_CODE_TOKEN>

Commenting them out gives me back the regular tab autocompletion behavior.

Please let me know if there's some way I could debug this further.
",tnguyen14,
872,2017-03-13 19:05:19,You should `cd **<tab>` I guess? As `**` being two literal * symbols.,dqgthb,
872,2017-03-13 22:01:43,I'm not sure what you mean. `cd foo<tab>` should match any file/ directory that starts with `foo`.,tnguyen14,
872,2017-03-14 00:06:35,"Oh sorry, I guess I now understand what you meant. You are saying that the normal, default bash behavior of autocompletion does not work after installing FZF, right? That sounds strange. Is that only for `cd`, or for others as well such as `vim foo<tab>`?",dqgthb,
872,2017-03-14 01:47:04,@dqgthb  yes that's exactly what I meant. It is very strange to me too.,tnguyen14,
872,2017-03-20 17:12:15,"- > Is that only for cd, or for others as well such as vim foo<tab>?
- What's the output of `complete | grep cd$`?",junegunn,
872,2017-03-20 19:30:33,"It is for others as well, not just `cd`.

And the output for `complete | grep cd$` is
<S_CODE_TOKEN>",tnguyen14,
872,2017-03-23 03:42:27,"Hmm, it looks different than mine:

<S_CODE_TOKEN>

Not sure why, bash version?",junegunn,
872,2017-03-23 15:33:47,Hmm yeah I'm not sure - the one I have is bash version `4.3.42(1)`,tnguyen14,
872,2017-03-24 01:03:26,What happens when you directly paste the command (`complete -o nospace -o plusdirs -F _fzf_dir_completion cd`) on your shell? Still no `plusdirs`?,junegunn,
872,2017-03-27 19:17:36,"Sorry for the slow response. I needed to wait and try it on the work
terminal where this is happening.

If I paste the command on the shell directly, tab completion for `cd` works
again.

On Mar 23, 2017 9:03 PM, ""Junegunn Choi"" <notifications@github.com> wrote:

> What happens when you directly paste the command (complete -o nospace -o
> plusdirs -F _fzf_dir_completion cd) on your shell? Still no plusdirs?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/junegunn/fzf/issues/872#issuecomment-288904726>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABk3c7hcp8LvibxL758a1TdCvN82lBPjks5roxZggaJpZM4MbQjW>
> .
>
",tnguyen14,
872,2017-03-28 02:49:22,Then it's likely that you have some other plugin or configuration that are interfering with completion. Can you check if you can still reproduce the problem with a vanilla bashrc that only loads fzf and nothing else?,junegunn,
871,2017-03-10 14:14:32,This change makes the install scripts work on non GNU tar systems as well (which at least includes FreeBSD).,reezer,2017-03-10 14:22:38
871,2017-03-10 14:22:44,"Thanks!

EDIT: Sorry I made a typo while changing the commit message :(",junegunn,2017-03-10 14:22:38
871,2017-03-10 14:29:35,"Hehe, no worries. Thanks for accepting so quickly. :)",reezer,2017-03-10 14:22:38
870,2017-03-07 10:34:55,"Without this patch, IPv6 addresses are not parsed completely in the ssh known_hosts file.
Signed-off-by: Sam Van Den Berge <sam@drgt.net>",S4mw1s3,2017-03-07 13:56:41
870,2017-03-07 13:56:55,"Merged, thanks.",junegunn,2017-03-07 13:56:41
870,2017-03-20 15:22:15,"@junegunn I'm affraid I made a mistake. With this commit, I broke support for hostnames containing a hyphen (e.g. my-host-name). This is because for the grep command, in bracket expressions, the hyphen acts as a range expression, unless it's located as the last character where it's interpreted as a literal.
So, for this patch to be correct, the colon should be placed in front of the hyphen. What do you suggest I should do?",S4mw1s3,2017-03-07 13:56:41
870,2017-03-20 15:32:38,"> So, for this patch to be correct, the colon should be placed in front of the hyphen. 

That will do. Will you send me a new pull request for the master branch? I just realized that I made a mistake of merging this only to devel branch instead of master.",junegunn,2017-03-07 13:56:41
869,2017-03-05 18:07:00,"FYI, 

I maintain chocolatey package and it will keep all versions, with up to few hours latency after you release on Github:

https://chocolatey.org/packages/fzf

The update is automated and the report is available here: https://gist.github.com/majkinetor/a700c70b8847b29ebb1c918d47ee4eb1

Windows users can install fzf now with: `cinst fzf` or `cinst fzf --version x.y.z`.

The binaries are embedded in the package and will always work regarding the github status.

Cheers, and thanks for the great tool.",majkinetor,2017-03-07 14:03:48
869,2017-03-07 13:57:32,"Thanks for letting me know, I'll add the link to the README page.",junegunn,2017-03-07 14:03:48
868,2017-03-04 23:34:49,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

has command tab completion for fish been considered? e.g.  `git co<tab>`",cvogt,
868,2017-03-05 12:39:10,"No, I don't use fish, so patches are welcome. Note that we don't support `git co<tab>` even in bash and zsh.",junegunn,
867,2017-03-02 21:54:44,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [x] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [x] CentOS7
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish


I have a multiline prompt in zsh and recently updated fzf (I don't know the previous version I was on unforutnately). I've found that now when I hit CTRL-T in my prompt to bring up the search window then ESC out of it, the previous line in my prompt gets erased. See https://imgur.com/a/TJyep

I just tested making my prompt a single line and the issue doesn't persist. See https://imgur.com/a/9UDtj


",paymog,2017-03-03 03:07:51
867,2017-03-03 00:06:56,"Can you share the source code for your prompt so I can test with it?
Because I can't reproduce with this simple multi-line prompt.

<S_CODE_TOKEN>",junegunn,2017-03-03 03:07:51
867,2017-03-03 01:30:41,"Here's a copy of my prompt: http://pastebin.com/9EG9aCWx

It's a shittily modified version of https://github.com/sorin-ionescu/prezto/blob/master/modules/prompt/functions/prompt_sorin_setup

Thanks for following up on this!",paymog,2017-03-03 03:07:51
867,2017-03-03 03:07:51,"Well, I tried your config (which required me to install prezto as well), but it seems like it has issues not only with fzf but also with other command-line completions. For example, simply doing `vim <tab>` or `ls <tab>` causes the problem you described. I think you should fix the issue first. Let me know if you still have problems with fzf bindings even after that.",junegunn,2017-03-03 03:07:51
867,2017-03-03 18:32:12,"Interesting, that doesn't happen for me.
![ls not broken](https://cloud.githubusercontent.com/assets/1986950/23563699/a3986a60-fffc-11e6-9449-6730f68c23ae.gif)


",paymog,2017-03-03 03:07:51
867,2017-03-03 18:39:07,"Oh, nevermind. I was able to repro with `ls` too. ",paymog,2017-03-03 03:07:51
866,2017-03-02 04:07:59,"<!-- Check all that apply [x] -->
- Category
    - [X ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ X] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ X] bash
    - [ ] zsh
    - [ ] fish

I want to create a short cut for editing all java files , *.java  from my root folder.
Is there any way I can list like

vi **.java <tab>

or  do I need special coding / script for this ?

",sivaswami,2017-03-02 17:32:51
866,2017-03-02 17:32:51,"The current implementation of fuzzy completion provided in this repository only supports `**` at the end of the pattern. So you can do `vim .java**<tab>` (or `vim ~/my-project/.java**<tab>`). fzf will start with `.java` as the default query, and you can type in the rest of the pattern [after a space](https://github.com/junegunn/fzf#search-syntax)

`> .java foobar`.",junegunn,2017-03-02 17:32:51
865,2017-03-01 22:42:53,"- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [x] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [x] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [x] fish

The shell script bindings use find. For large filesets this takes an appreciable time, and given find's nature this is probably unavoidable. I've tested against mlocate/slocate /file/path and see that fzf finishes almost instantly. Would you be open to providing a environmental variable to control what utility does the underlying searching for the built shell bindings?

",fourjay,2017-03-02 03:55:15
865,2017-03-02 03:55:15,"We already have configuration variables.

https://github.com/junegunn/fzf#key-bindings-for-command-line",junegunn,2017-03-02 03:55:15
864,2017-03-01 17:23:27,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
--> It doesn't look like --hidden is working for me. Even running `fzf --help` doesn't show a --hidden flag existing. Why then does the README say that --hidden is a thing that works? Is there anything I'm missing, or does --hidden just not work?",IQubic,2017-03-02 03:56:22
864,2017-03-02 03:56:22,I believe you misread the documentation.,junegunn,2017-03-02 03:56:22
863,2017-02-28 03:29:36,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

I'm having trouble using the query option as part of my default options. I have

<S_CODE_TOKEN>

When I use `^T`, this works fine. However, it does not work from fzf completion; that is the query group is not already present when completion begins. I've tried various things with quoting, `FZF_COMPLETION_OPTS`, etc. Interestingly the `-e` option does seem to be working.

",quicknir,2017-02-28 04:22:31
863,2017-02-28 04:22:31,"Because fuzzy completion overrides `--query` option to start fzf with an initial query. e.g. `vim /bin/sh**<tab>` will start fzf in `/bin` directory with the initial query `sh`. So unfortunately, you can't use it with your `--query`.

Fundamentally, I don't think it's a good idea to put `--query` in your `FZF_DEFAULT_OPTS` since fzf is not just for filtering files, but for any list of things. The static query doesn't makes sense in different contexts.",junegunn,2017-02-28 04:22:31
863,2017-02-28 04:39:50,"Yes, I thought some more about this after. The problem I was trying to solve was to have a convenient way to have hidden excluded by default, yet easily reachable. Filtering out hidden files in the initial command makes it impossible to see them later so it's not a solution. I still think that starting with a query group to exclude hidden files is one of the better solutions, at least without requiring changes on your end (or at least, so I thought). Maybe there could be an env variable that concatenates onto query, for path searches from auto completion? This doesn't seem so unreasonable, imho, anyone who ever has any reason to make query a default option for C-t searches, will be surprised that when paths are searched due to completion, things are not consistent.",quicknir,2017-02-28 04:22:31
862,2017-02-27 08:53:50,"<!-- Check all that apply [x] -->
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

After inspecting Wiki and a bit of googling, I've combined a script for `fzf` for navigating directories, which:

  - either presents `fzf` with a list of parent directories *and their surroundings* all the way up till the root
  - or the list of nested directories
  - or a combined list of these two

Now, what do I mean by *surroundings*? Imagine the following structure:

    ~/
     | -- Applications
     |----ABC.app
     |------Contents
     |----XYZ.app
     |------Bin
     |----MyTestSuite
     |------Dir1
     |------Dir2
     |------Dir3
     |--------YouAreHere

Then, navigating parent directories will usually only let you choose from `Dir3`, `MyTestSuite`, `Applications`, `/`. However, I find myself usually seeking to change to some nearby directory. Thus, this script will present you with the following choices: `Dir3`, `Dir2`, `Dir1`, `MyTestSuite`, `XYZ.app`, `ABC.app`, `Applications`, `/`.

Now, it's definitely not some rocket science task, and I'm sure everyone interested already has something like this. Therefore (and since I myself am not a programmer by all means), I'd very grateful for possible advices, corrections or optimizations (it's kinda slow on large lists).

Here it goes (requires `realpath` or [similar](http://stackoverflow.com/a/3572105/1068046)):

    fdz() {
        # Define variables
        local declare parent_dirs=()
        # Defne helpers
        get_parent_dirs() {
            # if an argument provided to this function is not a directory the function was called from...
            if [[ ""${1}"" != $PWD ]]
            then
                # ...but is a directory and not a file...
                if [[ -d ""${1}"" ]]
                then
                    # ...store it to the resulting array
                    parent_dirs+=(""$1"")
                    # now, if an argument provided to this function is not a root directory...
                    if [[ ""${1}"" != '/' ]]
                    then
                        # ...then explore its content one by one
                        # (both normal and ""hidden"" files)
                        for the_subdir in $(find -L ""${1}"" -type d -maxdepth 1 -not \( -name .git -prune \))
                        do
                            # and if the content in question is a directory...
                            if [[ -d ""${the_subdir}"" ]]
                            then
                                # ...and it wasn't already stored...
                                if ! [[ "" ${parent_dirs[*]} "" =~ ""${the_subdir}"" ]]
                                then
                                    # ...store it to the resulting array, too
                                    parent_dirs+=(""$the_subdir"")
                                fi
                            fi
                        done
                    fi
                else
                    return # does it happen at all?
                fi
            fi
            # if the argument provied to this function is a root directory already
            if [[ ""${1}"" == '/' ]]
            then
                # then stop and print out the resulting array
                for the_dir in ""${parent_dirs[@]}""
                do
                    echo $the_dir
                done
                # otherwise use recursion to dive deeper
                # (dirname <DIR> returns the parent directory)
            else
                get_parent_dirs $(dirname ""$1"")
            fi
        }
        # Define main
        if [ ""$1"" == ""--all"" ]
        # if asked for directories in both diretions...
        then
            # define variables
            local declare all_sub_dirs=()
            # find all nested subdirectories
            while read sub_dir
            do
                abs_sub_dir=""${sub_dir/./$PWD}""
                all_sub_dirs+=(""$abs_sub_dir"")
            done < <(find -L . -type d -not \( -name .git -prune \))
            # request all parent directories
            all_parent_dirs=($(get_parent_dirs $(realpath ""$PWD"")))
            # join these two arrays
            both_ends=(""${all_sub_dirs[@]}"" ""${all_parent_dirs[@]}"")
            # run fzf
            local DIR=$(for i in ""${both_ends[@]}""; do echo $i; done | fzf --exact --preview ""tree -C {} | head -200"")
            cd ""$DIR""
        # if asked only for nested directories
        elif [ ""$1"" == ""--down"" ]
        then
            # define variables
            local declare all_sub_dirs=()
            # find all nested subdirectories
            while read sub_dir
            do
                abs_sub_dir=""${sub_dir/./$PWD}""
                all_sub_dirs+=(""$abs_sub_dir"")
            done < <(find -L . -type d -not \( -name .git -prune \))
            # join these two arrays
            # run fzf
            local DIR=$(for i in ""${all_sub_dirs[@]}""; do echo $i; done | fzf --exact --preview ""tree -C {} | head -200"")
            cd ""$DIR""
        # if asked only for parent directories
        else
            # request all parent directories
            all_parent_dirs=($(get_parent_dirs $(realpath ""$PWD"")))
            # run fzf
            local DIR=$(for i in ""${all_parent_dirs[@]}""; do echo $i; done | fzf --exact --preview ""tree -C {} | head -200"")
            cd ""$DIR""
        fi
    }",dsjkvf,2017-03-01 14:19:21
862,2017-02-27 08:56:52,"(On a side note, could someone please explain, why I have to declare a var **before** the subfunction this var will only be used in? I'd expected to declare it inside, why this is wrong?)",dsjkvf,2017-03-01 14:19:21
862,2017-03-01 14:19:21,"Interesting idea. Here's my take. 

<S_CODE_TOKEN>

(I think `--tiebreak=end` works better in this case than the default `--tiebreak=length`)",junegunn,2017-03-01 14:19:21
861,2017-02-27 06:03:34,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

More of a question than anything; How do you custom the color of the part of the UI that appears brown here?

<img width=""647"" alt=""screen shot 2017-02-26 at 10 00 40 pm"" src=""https://cloud.githubusercontent.com/assets/1645881/23350406/26aadd66-fc6f-11e6-9c60-b6f8452136e8.png"">

I've been through all of the documentation on editing the colors used, and was able to get all the rest of it to match my color scheme. However, none of them seem to adjust that part.  For what it's worth, I looked through the source code as much as I could, but didn't have much luck working it out for myself.
",alexlafroscia,2017-02-27 18:40:24
861,2017-02-27 09:04:10,"That grey line is the statusline of fzf buffer in Neovim. It's currently customizable via User autocmd.
See here: https://github.com/junegunn/fzf.vim#status-line-neovim

If you only need to change the colors, you can assign colors to fzf{1,2,3} highlight groups like so:

<S_CODE_TOKEN>

https://github.com/junegunn/fzf.vim/pull/254",junegunn,2017-02-27 18:40:24
861,2017-02-27 18:40:24,"Excellent! That worked, thanks so much!",alexlafroscia,2017-02-27 18:40:24
860,2017-02-26 19:24:10,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [x] fish

Mac OS X Version: 10.11.6 (El Capitan)
Fish Version: 2.5.0
fzf Version: 0.16.5
iTerm2 Version: 3.0.14
`TERM=xterm-256color`

When I run the `fzf` command to search for files, I always get `?[?1h?=` added to the front of the first result.

For example, when I run `fzf` in my fish configuration folder I get something like this:
<S_CODE_TOKEN>

If I run `bash` from `fish`, I still get the `?[?1h?=` prefixed to the first result.

If I change my shell over to `bash` using `chsh -s /bin/bash`, then the first result is correct and does not have the prefix.
",KibaFox,2017-02-28 14:05:45
860,2017-02-27 04:19:34,"Hmm, that's strange. Is `?[?1h?=` cleared when you press CTRL-L, or move the cursor up and down?",junegunn,2017-02-28 14:05:45
860,2017-02-27 13:21:07,"Yeah. I'm perplexed at where this is coming from...

Pressing `Ctrl+L` and moving the cursor up and down (using the arrow keys) does not clear the `?[?1h?=`.",KibaFox,2017-02-28 14:05:45
860,2017-02-27 13:46:09,"I noticed that if I change my shell over to `bash` using `chsh -s /bin/bash` and run `fish` from `bash` I don't get the `?[?1h?=` prefix.

Could Mac OS be doing something to login shells?  I diffed the environments in `bash` and in `fish` and nothing really stood out. 

For reference, here's how I installed `fish` on the Macbook Pro:

1. Install via `brew install fish`
2. Add `/usr/local/bin/fish` to `/etc/shells`
3. Run `chsh -s /usr/local/bin/fish`",KibaFox,2017-02-28 14:05:45
860,2017-02-28 04:29:32,"Hmm, I followed the steps, but I can't reproduce the problem.",junegunn,2017-02-28 14:05:45
860,2017-02-28 14:05:45,"This must be an issue with my system then.  I'm going to go ahead and close the issue, but I'll report back if I find a solution.  Thank you for trying to reproduce this, @junegunn!",KibaFox,2017-02-28 14:05:45
860,2017-02-28 14:45:46,"Ah!  I figured out what was causing the issue.

I had put in a fix, copied from a [discussion on the issue](https://github.com/fish-shell/fish-shell/issues/2139#issuecomment-137228149), to get the delete key to work when using the suckless terminal (st).  Taking this fix out solves the problem.

Here is the culprit found in my [dotfiles/fish/config.fish](https://github.com/KibaFox/dotfiles/blob/06c5119966b8e40a70461b1ffb14956280e951e9/fish/config.fish):
<S_CODE_TOKEN>",KibaFox,2017-02-28 14:05:45
859,2017-02-26 14:50:36,"<!-- Check all that apply [x] -->
- Category
    - [x] Etc.
- OS
    - [x] Linux
- Shell
    - [x] zsh

It is popular for zsh configs (e.g. by the wildly used https://grml.org/zsh/) to have an immutable `~/.zshrc` and a `~/.zshrc.local` that contains local modifications over what is provided e.g. by grml's config.

By default fzf's setup adds `[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh` to `.zshrc`, I'm suggesting that we might want to add it to `.zshrc.local` if it exists.",nh2,2017-02-26 16:26:52
859,2017-02-26 16:26:52,"Thanks for the suggestion. While I like the idea, I'm not sure if we should do so. Because the existence of the file does not guarantee that it's actually loaded by zshrc. fzf has been around for a few years by now, so I'm also a bit concerned about the confusion the sudden change might bring.

The install script asks if it should update shell configuration files, and it provides `--no-update-rc` option so one can write `./install --all --no-update-rc` (the order matters). So the users who want the line in different files can put it manually in whichever file they prefer, and I think it suffices for now.",junegunn,2017-02-26 16:26:52
858,2017-02-26 10:23:56,"Zsh is very customisable and some of the customisations will break the
completion function.  Restore the state to its default for the duration
of the function.",pjcj,2017-03-01 07:07:24
858,2017-02-26 14:53:48,"Thanks, looks good to me. Can you give me a set of options that breaks the function as an example? I would like to reproduce the problem locally, and confirm that the patch fixes the issue.",junegunn,2017-03-01 07:07:24
858,2017-02-26 15:04:48,"I wish I knew that off-hand.  I'll look round for some likely candidates, but my .zshrc is quite well customised by now...",pjcj,2017-03-01 07:07:24
858,2017-02-26 15:19:40,I have found the culprit in my case: setopt posix_builtins,pjcj,2017-03-01 07:07:24
858,2017-02-26 16:09:23,"I tested with this extremely minimal zshrc

<S_CODE_TOKEN>

but fuzzy-completion seems to work just fine. `vim ~/**<tab>`, `cd **<tab>`, etc. Am I missing something?",junegunn,2017-03-01 07:07:24
858,2017-02-26 16:56:31,"Ah, it needs a couple of options.  Try this:

<S_CODE_TOKEN>

",pjcj,2017-03-01 07:07:24
858,2017-02-26 17:22:52,"Oh yeah, now I can reproduce. Looks like `CTRL-R` also seems to break with those options. Should we do the same for fzf-history-widget as well?",junegunn,2017-03-01 07:07:24
858,2017-02-26 17:57:32,"Ah, yes, fzf-history-widget needs it too.  And it probably makes sense to do the same for fzf-cd-widget and fzf-file-widget too, even though they work with this particular configuration, as they may well break with some other configuration, or if they get changed.",pjcj,2017-03-01 07:07:24
858,2017-02-27 17:13:51,"So, what do you think?

<S_CODE_TOKEN>

(Reference: http://zsh.sourceforge.net/Guide/zshguide02.html)",junegunn,2017-03-01 07:07:24
858,2017-02-27 19:25:48,That looks good to me (although I haven't run it). The -L option to emulate is certainly the right way to go.,pjcj,2017-03-01 07:07:24
858,2017-03-01 07:05:10,"Alright, let's push the fix and see if anyone complains.",junegunn,2017-03-01 07:07:24
857,2017-02-25 10:30:30,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.


Prebuilt binaries for armhf / aarch64 on linux?

",dopykuh,2017-02-25 20:20:10
857,2017-02-25 14:23:50,"I'm not familiar with that platform. Does arm8 binary work there? I'm building it with `GOOS=linux GOARCH=arm64`.

https://github.com/junegunn/fzf-bin/releases/download/0.16.5/fzf-0.16.5-linux_arm8.tgz",junegunn,2017-02-25 20:20:10
857,2017-02-25 14:25:20,"I'll try it on my odroid and pine64 later ;)

Am 25.02.2017 15:23 schrieb ""Junegunn Choi"" <notifications@github.com>:

> I'm not familiar with that platform. Does arm8 binary work there? I'm
> building it with GOOS=linux GOARCH=arm64.
>
> https://github.com/junegunn/fzf-bin/releases/download/0.
> 16.5/fzf-0.16.5-linux_arm8.tgz
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/junegunn/fzf/issues/857#issuecomment-282487008>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AGdkWJYTIMjaaBHL_IApZNgdlS3sOdDoks5rgDl5gaJpZM4ML-Ym>
> .
>
",dopykuh,2017-02-25 20:20:10
857,2017-02-25 20:19:25,"Odroid seems to be a armv7l, so this works fine ;)",dopykuh,2017-02-25 20:20:10
856,2017-02-24 15:24:02,"<!-- Check all that apply [x] -->
- Category
    - [x ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

1. I find in your gif at homepage , your fzf window is at the bottom of the screen, but when i set height=40%, my fzf window is just under cursor line, in the middle of the screen. how to make it like your gif?

2. I think only set FZF_DEFAULT_OPTS is enough, both FZF_CTRL_T_OPTS and FZF_CTRL_R_OPTS should use it by default, unless I set them explicitly. BTW, maybe a bug, my FZF_CTRL_T_OPTS is the same as FZF_DEFAULT_OPTS, but the input line of ctrl-t  is at the top but I do not set --reverse.

3. The default prompt and pointer icon is '>', it's not nice. i have already reset the prompt to '▸' but there is no --pointer option to reset it. Please think about to add --pointer in fzf and fzf.vim. Oh, i can not understand the fzf.vim status line config example int fzf.vim homepage.

4. Neovim has a buildin terminal emulator, so a neovim GUI app, for instance, neovim-dot-app works with fzf.vim very well with out any terminal support. I hope users of fzf know it.  When i launch the fzf in vim, the only way to quit fzf is press :q if i do not select any line to open. Is there a way to press only one key to quit fzf window in vim, like press esc in terminal?

5. to be confirm, fzf use unix find by default, and you recommend to use ag, so fzf will respect the .agignore file of ag ? Is this the only way to config fzf ignore patterns?


",FinallyFinancialFreedom,2017-02-25 15:22:48
856,2017-02-25 15:22:48,"1. It's using `fzf-tmux` script. It was primarily used before we added `--height` option.
2. FZF_DEFAULT_OPTS always applies. FZF_CTRL_{T,R}_OPTS allow you to further customize the options. Since the addition of `--height`, we set `--reverse` by default to CTRL-T and ALT-C, as top-down layout looks better in non-full screen mode. You can add `--no-reverse` to FZF_DEFAULT_OPTS to override it.
3. I'll think about it. But I'm basically reluctant to add more options for tweaking minor UI elements at the moment to avoid proliferation of non-essential options that will inevitably make fzf more complex in the long run. You can find my previous comment on that matter [here](https://github.com/junegunn/fzf/issues/692#issuecomment-251436739). fzf is an open-source project, you can always change things and build it yourself.
4. You mean in Neovim? ESC works as expected. You probably have mapped ESC to something using `tnoremap`. Or you can simply hit CTRL-C instead.
5. No. ag, rg, ... whatever works best for you.",junegunn,2017-02-25 15:22:48
856,2017-02-25 15:59:39,"thank you for reply, and your amazing fzf and fzf.vim, and i just notice that the vim-plug is created by you too after i used it for months. How great you are in vim world!
You are right to focus your precious time on the essential functions. Although I pay more attention on UI, I don't like too many customise options. Anyway a default beautiful UI is attractive. I'm sure spacemacs gains a lot of users through it's nice UI.
",FinallyFinancialFreedom,2017-02-25 15:22:48
855,2017-02-24 11:55:57,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I'm using this ctrlp plugin https://github.com/sergei-dyshel/vim-abbrev-matcher, it's really nice. For example an input like `'cp '/xyz '/test/` in fzf can be written there like this `cp/xyz/test/` which is 5 characters less and that's a lot for an abbrev matcher. I was thinking maybe we can have the same here in fzf maybe as an optional alternative.",sassanh,2017-02-24 18:46:07
855,2017-02-24 18:46:07,"I'm not interested in adding more modes to keep it simple. In fact, I don't think another mode is needed in this case. fzf already has a sophisticated ranking algorithm so just type in `cp/xyz/test` (or just `cpxyztest`) and you'll most likely get the result you want as the top match.

See https://github.com/junegunn/fzf/blob/master/src/algo/algo.go for the details.",junegunn,2017-02-24 18:46:07
855,2017-02-24 18:54:10,"Is it possible to apply a custom calibration for this ranking algorithm for end user?
This is the problem in details:

I have lots of curl requests copied from chrome (long curl requests) in my fish history. When I press `c-r` and search for a specific curl request, when I type `curl` it brings results with `curl` highlighted, when I type the hostname for example or some parameter in the curl request I'm searching for (whatever except the first word in the history items which is curl) fzf brings results that 2 out of 14 have that exact word highlighted (which aren't top results) and others have the letters of that word shuffled in the whole item. It'd be nice if we could have it bring results that have the exact word with higher rank.",sassanh,2017-02-24 18:46:07
855,2017-02-24 18:55:46,"Have you read this part?

https://github.com/junegunn/fzf#key-bindings-for-command-line",junegunn,2017-02-24 18:46:07
855,2017-02-24 18:58:33,"Oh sorry, it works perfectly after pressing `c-r` again.",sassanh,2017-02-24 18:46:07
855,2017-02-24 19:02:55,"Yeah, I have noticed that many users are unfortunately unaware of it. So I've been thinking if it would be better to add something like `--header ""Press CTRL-R to toggle sort""` to avoid confusion. But that can be annoying to the users who already know that.

Anyway, to enable sort by default, you can add `--sort` to `$FZF_CTRL_R_OPTS`.",junegunn,2017-02-24 18:46:07
855,2017-02-24 19:07:26,"Yeah I was reading this conversation: https://github.com/junegunn/fzf/commit/a57b375b413e12b01e648d4fcaf91e29a53ae75d

In fzf-vim we have `Press CTRL-S to toggle sort`. I never expected sort to mean ""sort by relevance to input"" here. Maybe you can show a message only when the user hasn't use this feature yet.",sassanh,2017-02-24 18:46:07
855,2017-03-04 18:41:24,"Well, I just decided to enable it by default.",junegunn,2017-02-24 18:46:07
854,2017-02-24 11:50:47,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

It'd be great if we could bind ` to some action. Some people map ` to `<esc>` in vim and it'd be nice if we could have same binding in fzf.
",sassanh,2017-02-24 18:31:47
854,2017-02-24 18:31:47,"<S_CODE_TOKEN>

See `man fzf` for more info.",junegunn,2017-02-24 18:31:47
854,2017-02-24 18:37:05,"I read about bind, I should've provide more context: while `set -x FZF_DEFAULT_OPTS '--bind shift-tab:down,tab:up,q:abort'` works ``set -x FZF_DEFAULT_OPTS --bind shift-tab:down,tab:up,`:abort' `` doesn't work.",sassanh,2017-02-24 18:31:47
854,2017-02-24 18:38:56,Note that I wrapped the expression with single quotes.,junegunn,2017-02-24 18:31:47
854,2017-02-24 18:41:56,"Try this:

<S_CODE_TOKEN>",junegunn,2017-02-24 18:31:47
854,2017-02-24 18:43:06,"Thanks, escaping `` ` `` fixed it.",sassanh,2017-02-24 18:31:47
853,2017-02-24 06:11:58,"so, ctrl-t will list all files and direcotries. can you detect it automatically ? i mean, when cd ctrl-t, it only list directories like `cd $(find . -type d |fzf)` while vi ctrl-t, it only list files. Maybe vi a directory is useful sometimes. 
",FinallyFinancialFreedom,2017-02-25 15:05:24
853,2017-02-25 15:05:24,"It's not possible on bash. For that purpose, you are supposed to use fuzzy completion `cd **<tab>`. If you use zsh, see https://github.com/junegunn/fzf/wiki/Configuring-fuzzy-completion#zsh",junegunn,2017-02-25 15:05:24
852,2017-02-24 01:33:25,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [x] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

May I know to perform case insensitive search in fzf?

",hezjing,2017-02-24 19:11:35
852,2017-02-24 07:20:20,It looks like typing the pattern in lowercase will search files in case insensitive mode. Typing the pattern in uppercase will search files in case sensitive mode?,hezjing,2017-02-24 19:11:35
852,2017-02-24 09:12:06,`fzf -i` to force case-insensitive search. Default is smart-case match where the search will be case-sensitive if you use at least one uppercase letter your pattern and case-insensitive otherwise. Take a look at `fzf --help` for all options you can give to FZF.,mbudde,2017-02-24 19:11:35
851,2017-02-21 08:06:31,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

The key bindings are not available until I manually execute `fzf_key_bindings` in the shell.

I did the following according to the install guide

<S_CODE_TOKEN>

However somehow fish does not auto execute the key bindings.

In my desperation I also tried to add the following to my `.config/fish/config.fish`

<S_CODE_TOKEN>

But that didn't help either.

Fish Version 2.5.0
fzf Version 0.16.5

",rburgst,
851,2017-02-22 03:27:53,"install script does two things for fish:
- Create symlink `~/.config/fish/functions/fzf_key_bindings.fish`
- Append `fzf_key_bindings` to `~/.config/fish/functions/fish_user_key_bindings.fish`

Check if both files exist and there's `fzf_key_bindings` in fish_user_key_bindings.fish.",junegunn,
851,2017-02-22 04:34:56,"The files exist and have the expected contents. However calling fzf_key_bindings inside the functions file does not seem to have any effect. As stated earlier in my desperation I have created a Config.fish file and added fzf_key_bindings call there too but that doesn't seem to do anything. 

I am using oh-my-fish. Not sure if that has anything to do with it. Also note that I didn't have a fish_user_key_bindings.fish file before. So it only has this one entry. ",rburgst,
851,2017-02-22 05:43:16,"Hmm, I see. I don't use fish so I don't know much about it. I also have no experience with oh-my-fish. All I can confirm is that it works as expected on my machine with vanilla fish 2.5.0. You might want to reach out to more experienced fish users especially the ones who use oh-my-fish.",junegunn,
851,2017-02-23 06:44:30,"Hi. I have same issue as @rburgst. Don't know what happed (maybe something broke after updating Fedora). 

<S_CODE_TOKEN>

[Here is some info ](https://gist.github.com/jmayday/09962fb456d415976d03e29310ee514b)about my last update. 

Unfortunately I can't undo this update because I didn't have _keepcache_ turned on in DNF and one of the packages is gone from repo. ",jmayday,
851,2017-03-03 11:55:18,@rburgst could you pls repost on omf github? https://github.com/oh-my-fish/oh-my-fish/issues,jmayday,
851,2017-03-17 10:39:10,"I think this is a bug with how fzf writes to `fish_user_key_bindings.fish`. I fixed it by updating it to be within a function like so:

<S_CODE_TOKEN>

fish 2.5.0, omf 5, fzf 0.16.6",cmrn,
851,2017-03-19 07:00:35,@cmrn this works! Thanks a lot!,rburgst,
851,2017-03-19 10:09:32,"So what do you suggest? It's not going to be trivial for the install script to inject the line if `fish_user_key_bindings` function already exists. I don't know fish, and it's probably not a conventional way to write `fish_user_key_bindings.fish`, but it works anyway if OMF is not used. Can OMF come up with a workaround? Patches are welcome.",junegunn,
850,2017-02-20 09:31:31,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I noticed that an explanation in README.md:

> If you don't want to exclude hidden files, use the following command:
> export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g """"'

For the `--ignore .git` part, if I understand correctly, ag will ignore .git by default and `--hidden` will not change that behavior, so I was wondering why this part is there.

By the way, you did a good job, which is exactly what I want :)
",ikariwing,2017-02-21 04:21:48
850,2017-02-21 01:08:31,"Hi, if I'm not mistaken, we need to explicitly exclude `.git` when using `--hidden` option.

See https://github.com/ggreer/the_silver_searcher/issues/790",junegunn,2017-02-21 04:21:48
850,2017-02-21 03:35:26,"I am not sure whether it's a back-compatibility issue of ag,
however on my machine, 
`--unrestricted` reveals the .git, 
while `--hidden`  don't.

My ag version:
<S_CODE_TOKEN>

Feel free to close this issue if you want, since it seems that no harm.
고맙습니다",ikariwing,2017-02-21 04:21:48
850,2017-02-21 04:21:48,"I just updated ag to the latest, but I'm still seeing .git directory with `--hidden` as follows:

<S_CODE_TOKEN>

I'm not sure why you're getting different results, but anyway, we'll have to keep it.

ありがとうございます :)",junegunn,2017-02-21 04:21:48
850,2017-02-22 03:51:02,"Hi, sorry to mislead you :$
I found the different result on my machine was due to my .agignore setting, which already includes .git/.hg/.svn .
So we do need the `--ignore .git` as you said.

And I might also mislead you about my nationality since my GitHub name is Japanese-like. Actually, I am a completely Taiwanese ;-)

謝謝！

",ikariwing,2017-02-21 04:21:48
850,2017-02-22 03:54:31,"@ikariwing Whoops, my bad, thanks for the clarification :)",junegunn,2017-02-21 04:21:48
849,2017-02-19 22:46:07,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi there,

I am running **fzf: stable 0.16.5**  installed using Homebrew. Go version is 1.8

<S_CODE_TOKEN>

<S_CODE_TOKEN>

and got the following error when hitting a search (ctrl-R)

<S_CODE_TOKEN>

Interestingly running FZF search from Vim works perfectly fine. 


",alotofnoodles,2017-02-23 13:54:20
849,2017-02-20 01:11:24,"I can't reproduce. Do you have an anti-virus software running?

- https://github.com/golang/go/issues/8801
- https://github.com/golang/go/issues/16730",junegunn,2017-02-23 13:54:20
849,2017-02-20 05:21:11,"I'm having the same issues since I did a `PlugUpdate`. I've looked into the posted links and it's not clear what the solution would be.

Previous versions of fzf (perhaps it's `go` version-related) didn't have this issue. I've had this company laptop with AV software for almost a year and I just ran into this issue today.",hahuang65,2017-02-23 13:54:20
849,2017-02-20 05:54:03,"Hmm, interesting. I'll see if it's possible to avoid the issue. For the time being, use 0.16.4 binary built with Go 1.7.",junegunn,2017-02-23 13:54:20
849,2017-02-20 06:12:07,"Yeah thanks, also, just as a note, the last version I had in my `~/.fzf/bin` was 0.16.2, so I'm unsure if 0.16.3 or 0.16.4 would have worked for me. I can test those for you if you'd like.

Currently, I just symlinked my 0.16.2 as `fzf` in the same folder and it's working again.",hahuang65,2017-02-23 13:54:20
849,2017-02-20 23:32:23,@hahuang65 I can confirm that reverting to 0.16.4 works for me.,alotofnoodles,2017-02-23 13:54:20
849,2017-02-22 03:44:23,"I'm not yet sure if there is something I can do to avoid the problem, or we have no way but to hope that it's fixed in Go or in your anti-virus software. But anyway, since there's no way I can reproduce the problem on my environment, I need your assistance to find the solution.

1. Install Go. `brew install go` should suffice.
2. Clone fzf repo if you haven't already.
3. `make install` inside `src` directory, and see if the resulting binary `bin/fzf` works correctly.",junegunn,2017-02-23 13:54:20
849,2017-02-22 04:01:52,"Here we go... it didn't compile:

<S_CODE_TOKEN>",hahuang65,2017-02-23 13:54:20
849,2017-02-22 04:13:27,"Hmm, let's see if adding `-linkmode=external` (as suggested in the linked issue) helps. Can you update Makefile as follows and try again?

<S_CODE_TOKEN>",junegunn,2017-02-23 13:54:20
849,2017-02-22 04:18:21,"`make install` output:

<S_CODE_TOKEN>",hahuang65,2017-02-23 13:54:20
849,2017-02-22 04:23:01,"Hmm, so it doesn't help :(

There are two things suggested in the above issue

1. `-linkmode=external`
2.  Check if there's DYLD variables (`env | grep DYLD`) and unset them, most notably `DYLD_INSERT_LIBRARIES`
",junegunn,2017-02-23 13:54:20
849,2017-02-22 04:30:01,"Yeah, there's no `DYLD_*` variables set unfortunately...
",hahuang65,2017-02-23 13:54:20
849,2017-02-22 05:26:58,"Okay, let's simplify the whole thing a bit, do you see the same error when you do `go get github.com/mattn/go-isatty`? Then we can be sure that the problem is not specific to fzf. Another thing you can check is to install Go 1.7.x and see if the command works with that version. If it turned out to be a problem of Go 1.8 then you can report the problem to Go team.",junegunn,2017-02-23 13:54:20
849,2017-02-22 12:47:35,"It seems that this is not FZF related problem, but Go 1.8 . Running `go get github.com/mattn/go-isatty` throws the same error. It turns out that some people are running the same AntiVirus that I am running now -> Cylance

https://github.com/golang/go/issues/18171",alotofnoodles,2017-02-23 13:54:20
849,2017-02-22 15:22:46,"I see, thanks for the update. Looks like there's not much I can do at the moment. I don't want to rebuild the binaries using Go 1.7 since I noticed that fzf binary built with Go 1.8 is roughly 5~7% faster than the one built with 1.7.",junegunn,2017-02-23 13:54:20
849,2017-02-22 23:16:44,Thanks for troubleshooting @junegunn. I am reverting back to Go 1.7 until I figure out how to by pass the Cylance AV. Will post the update once I have the solution,alotofnoodles,2017-02-23 13:54:20
849,2017-02-22 23:19:06,"Yeah, thank you @junegunn for taking the time to troubleshoot. I really appreciate your help and LOVE a TON of your projects :), Keep up the good work.

@alotofnoodles Cylance blows. I have it for work too :p",hahuang65,2017-02-23 13:54:20
849,2017-02-23 00:33:59,"So I managed to solve this problem by asking the IT support (Cylance is centrally controlled) to change the Cylance policy to (MAC - BG). 

@hahuang65 It's time to buy coffees for the support guys ☕️ ",alotofnoodles,2017-02-23 13:54:20
849,2017-02-23 13:54:20,"Thanks for the info, glad to hear that you sorted it out. I updated the title so that it's easier to find for the users who run into the same issue.",junegunn,2017-02-23 13:54:20
849,2017-03-05 17:56:33,@alotofnoodles can you provide more details what policy had to get changed? I am running into a similar issue,udangel-r7,2017-02-23 13:54:20
849,2017-03-05 23:27:02,"@udangel-r7, our support team changed the policy to (MAC - BG). Hope this helps.

![cylance_causes__fatal_error__runtime__bsdthread_register_error__ _issue__849_ _junegunn_fzf](https://cloud.githubusercontent.com/assets/432081/23592590/5e2a31b8-0257-11e7-80c0-f78c63288bc5.jpg)
",alotofnoodles,2017-02-23 13:54:20
848,2017-02-19 14:10:25,"I find it useful to inject a specific prefix when pressing ""Ctrl-T"" on files.
I made the default value `$EDITOR`, which means that by default ""Ctrl-T"" will return the selection, prefixed by the users editor.",odedlaz,2017-02-19 14:18:32
848,2017-02-19 14:18:32,"Thanks, but I have no plan to change the way the key bindings work. It's been really painful for me to make sure that they work consistently across three different shells (bash, zsh, and fish), and any new options will make the maintenance even more difficult.

I believe you'll be able to implement the suggested behavior by defining another widget that is built upon fzf-file-widget.",junegunn,2017-02-19 14:18:32
847,2017-02-18 07:16:44,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [x] Windows
    - [ ] Windows Subsystem for Linux
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish
    - [x] cmd

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I tried to use `fzf` and `fzf.vim` with `FZF_DEFAULT_COMMAND` on Windows. When running `:Files` a `cmd` window pops up with some welcome text for `cmd` on it but no result.
After some digging into the `fzf.vim` I found the plugin executes the `FZF_DEFAULT_COMMAND` in the temporary file (.tmp) with `cmd`, which leads to the welcome text in the output but not to actually execute the command.

With `cmd /c` being able to execute the command in a batch file, I tried to make a work-around:
<S_CODE_TOKEN>

And it requires the `FZF_DEFAULT_COMMAND` starts with '@' to leave out the command line in the list of result.",wontoncc,2017-02-18 09:18:24
847,2017-02-18 09:19:14,"Thank you, I applied your patch. Please let me know if you see any other issues.",junegunn,2017-02-18 09:18:24
847,2017-02-18 09:21:03,"> And it requires the FZF_DEFAULT_COMMAND starts with '@' to leave out the command line in the list of result.

Do you think we should prepend `@` to the command automatically?

",junegunn,2017-02-18 09:18:24
847,2017-02-18 11:49:24,"My bad, that should be implemented in the patch.
To achieve that might involve adding `@` to every line of the commands. Better add `@echo off` to the head of the temporary file in my opinion.

<S_CODE_TOKEN>

EDIT: forgot to check the platform.",wontoncc,2017-02-18 09:18:24
847,2017-02-18 13:00:43,"I see, thanks for the update. Fixed in 	c2db67c.",junegunn,2017-02-18 09:18:24
846,2017-02-17 21:04:51,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Getting errors after running the command for key bindings:

<S_CODE_TOKEN>

I run the command ` /usr/local/opt/fzf/install`, answer yes to all the questions, no errors. I restart the shell, the key bindings work, but first thing that gets printed are the errors above.
",skamsie,2017-02-18 04:59:24
846,2017-02-18 04:59:24,"Looks like your zsh config is loading ~/.bashrc, which is not syntactically compatible. I recommend that you don't do that, but it you insist, you can edit the line in .bashrc so that it's not loaded under zsh.

<S_CODE_TOKEN>",junegunn,2017-02-18 04:59:24
846,2017-02-19 17:04:58,"Yes, it looks like I was sourcing `.bashrc` in my `.bash_profile` which was then sourced in `.zshrc`. A big mess indeed. Thank you for your help.",skamsie,2017-02-18 04:59:24
845,2017-02-17 06:12:39,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Allow me to explain!

In normal FZF mode, you have a list of files starting from the bottom going upwards. Tab goes in a downwards motion, meaning that you will always have to go up and down (2 actions per file) to select files.

In reverse order, tab continues to go downwards direction – but now in the same direction as the files – which has the nice side effect of being able to select the first few files with just one key stroke per file rather than two.

My suggestion would be to change Tab to go in the opposite direction for normal (non-`reverse`) mode to save on keypresses.

It's a small optimization that some people may disagree with, just thought I'd suggest it and see what you think!


Now that I have that out of the way, I just want to say I'm a huge fan of this project! I use this application countless times a day and it has a huge impact on my happiness when developing! Thank you for creating such a great product!",berfarah,2017-02-17 08:57:24
845,2017-02-17 08:57:24,"> meaning that you will always have to go up and down (2 actions per file) to select files.

Shift-tab moves the cursor upward.

> My suggestion would be to change Tab to go in the opposite direction for normal (non-reverse) mode to save on keypresses.

You can use `--bind` option to map tab and shift-tab to `toggle-out` and `toggle-in` respectively instead of `toggle+down` and `toggle+up` like so:

<S_CODE_TOKEN>

The names of these actions are a bit obscure, they're named as such as they move cursor ""outwards"" and ""inwards"".

So why aren't they the default? First, because of backward compatibility, and second, I'm not sure that they are the better default for everyone. For me, I prefer that I can consistently move the cursor upwards with shift-tab and downwards with tab regardless of the layout.

> Thank you for creating such a great product!

Thanks :)",junegunn,2017-02-17 08:57:24
845,2017-02-17 16:44:02,"Thanks for taking the time to answer my question. Completely understand that it's not better for everyone and there are issues with backwards compatibility - and with keybindings available for this I'm happy either way.

I just realized that the reason I didn't discover `shift-tab` is because of a neovim issue where it isn't passed to the terminal correctly (which is slotted to be fixed in the next release). Hope this little tidbit of information can help other users.",berfarah,2017-02-17 08:57:24
845,2017-02-18 04:42:25,"> shift-tab is because a neovim issue where it isn't passed to the terminal correctly

Oh, I see. I also noticed that before. Thanks for the clarification.",junegunn,2017-02-17 08:57:24
844,2017-02-15 15:09:58,,Ambrevar,2017-02-16 08:18:01
844,2017-02-15 15:11:12,"`cut` is faster and more readable than `sed`.
It is also more consistent with #779.
I can't remember why I forgot to apply the changes to the rest of the functions in #779.",Ambrevar,2017-02-16 08:18:01
844,2017-02-16 08:18:10,Thanks!,junegunn,2017-02-16 08:18:01
843,2017-02-14 10:59:07,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [] Vim
    - [] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
I consider your [tmux example](https://github.com/junegunn/fzf/wiki/examples#tmux) very useful. But imagine a situation when there are ssh sessions in all the panes in the tmux window. I want to switch to another session, but I have to get to the local shell (find it in another window or create a new pane), and then call `fs`. Is it possible to bypass this limitation somehow? Ideally with a tmux binding, that will start session name completion or something like that, what do you think?",yevhen-m,
843,2017-02-14 13:39:17,"Hi, actually most of the snippets in the wiki page are not mine. I haven't really used fs so far. I'll try it when I get some time.",junegunn,
842,2017-02-14 00:41:39,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [x ] fzf-tmux script
    - [x ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...

-->

When using the functions shown here: https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236
while having the following in my ~/.inputrc file:
set editing-mode vi
set keymap vi-command

Tmux fails to open the pane automatically until I press enter
",faruzzy,2017-02-14 14:19:16
842,2017-02-14 14:19:15,"The snippets are written for non-vi mode. If you use vi mode, you'll have to slightly change it.

You might want to take a look at https://github.com/junegunn/fzf/blob/master/shell/key-bindings.bash to see how it's done.",junegunn,2017-02-14 14:19:16
841,2017-02-13 14:14:26,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

",derwiath,2017-02-13 14:14:33
840,2017-02-08 06:15:17,fixes #839,DanielFGray,2017-02-09 05:05:03
840,2017-02-09 05:05:11,"Merged, thanks!",junegunn,2017-02-09 05:05:03
839,2017-02-08 06:13:19,"- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

this is particularly annoying with `chpwd()` hooks like running `ls` automatically

I double-checked to see if this happens in bash but it didn't seem so (although I did notice it writes `__fzf_cd__` to the prompt? seems annoying...)",DanielFGray,2017-02-09 05:05:03
839,2017-02-08 12:51:44,"Thanks, let's fix it, I left a comment on your PR.",junegunn,2017-02-09 05:05:03
838,2017-02-08 05:26:14,,amosbird,
838,2017-02-08 05:48:21,"Have you taken a look at #433? We already handle zoomed panes.

(By the way, I just noticed a bug with the logic handling `-l` `-u` on zoomed panes. Let me push the fix for it.)",junegunn,
838,2017-02-08 06:05:10,"well, it seems not working on my env. `fzf-tmux` just deletes all the panes when finished.",amosbird,
838,2017-02-08 06:05:59,Can you check if 1ba7acf4bd4314f299b57cea73cbd376bde5aba3 helps?,junegunn,
838,2017-02-08 06:14:17,"no, it doesn't help.",amosbird,
838,2017-02-08 06:16:13,"I'm using latest tmux, configuration is in https://github.com/amosbird/tmuxconfig",amosbird,
837,2017-02-08 04:46:46,"<!-- Check all that apply [x] -->
- Category
    - [ x ] fzf binary
    - [ x ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ x ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ x ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

HI,

After installing fzf on an Ubuntu 16.04 AWS instance, when I type sudo su, it launches $(fzf)

I have to hit escape and it brings me to my root prompt. I am then stuck with fzf running and I can not use the command prompt until hitting ctrl + z.

I would like to access root shell using sudo su and not have it trigger fzf. Checked previous issues and could not find an occurrence of this.

Any thoughts are much appreciated.

[sudo su command invoking fzf.mov.zip](https://github.com/junegunn/fzf/files/759738/sudo.su.command.invoking.fzf.mov.zip)
",jaymem,2017-02-25 17:59:29
837,2017-02-08 04:50:07,"I'm certain that this is a configuration issue, and I can't really help you with that. Closely examine your configuration files to find out what's going on.",junegunn,2017-02-25 17:59:29
837,2017-02-08 05:17:19,"Thank you for your response.

What config files would I look at? It is definitely not .bashrc or the usual suspects. These have been closely vetted. 

Since this is a post fzf install issue, could fzf have modified a config file or create one?",jaymem,2017-02-25 17:59:29
837,2017-02-08 05:38:53,"Here is a list of all my configs, I have gone through the usuals and nothing to indicate a replacement of sudo su to sudo $(fzf)

Any idea which config could be the culprit?

![2017-02-07](https://cloud.githubusercontent.com/assets/8275312/22724837/f52de968-ed96-11e6-81ad-33fbbf04454c.png)
",jaymem,2017-02-25 17:59:29
837,2017-02-08 05:45:50,"> could fzf have modified a config file or create one?

It (optionally) adds a line to your .bashrc for sourcing ~/.fzf.bash, that's all.

> Any idea which config could be the culprit?

Not sure. grep for `fzf`.",junegunn,2017-02-25 17:59:29
837,2017-02-25 17:59:29,"I'm closing this, as I'm pretty certain that it's not an issue of fzf itself.",junegunn,2017-02-25 17:59:29
836,2017-02-06 22:08:56,"
![image](https://cloud.githubusercontent.com/assets/287744/22668469/ae7987ec-ec75-11e6-84c5-8578a876ea6a.png)
",prabirshrestha,2017-02-07 05:42:08
836,2017-02-07 05:42:17,Thanks!,junegunn,2017-02-07 05:42:08
835,2017-02-06 19:19:20,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [x] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x ] bash
    - [ ] zsh
    - [ ] fish

![image](https://cloud.githubusercontent.com/assets/2774449/22662459/00a972ec-ec5e-11e6-8389-e5664b769f6c.png)

This is the output of `:Tags`
I ran `:PluginUpdate` via vundle to get the latest version of FZF and this still happens.

Actually, maybe this issue is better suited to go under https://github.com/junegunn/fzf.vim. Let me know if I should move it there.",alxyang,2017-02-07 06:57:14
835,2017-02-07 05:44:12,"Looks like a configuration issue. Check if you can still reproduce the problem with a minimal vimrc

<S_CODE_TOKEN>",junegunn,2017-02-07 06:57:14
835,2017-02-07 06:57:14,Running with minimal vimrc did indeed solve the problem.  I then noticed in my vundle entries  I was only updating fzf.vim and I didn't have an entry for fzf.  Adding fzf and updating it fixed the problem.  Thanks!,alxyang,2017-02-07 06:57:14
834,2017-02-06 14:44:27,"The tar.gz for the [latest release](https://github.com/junegunn/fzf/releases/tag/0.16.4) does not contain a directory, e.g. `fzf-16.0.4`, but instead contains the binary only, `fzf`. All previous released tar's contain a directory which contains the binary.

I wanted to know if this was a mistake or this is how the releases will be from now on, I can update my build tool accordingly.

Many thanks.   



",krisleech,2017-02-06 15:27:27
834,2017-02-06 15:27:27,I believe you're talking about the file name of the binary in the tarball. It's an intended change. I decided that it would be easier for the users. Makefile and install script were updated accordingly. See https://github.com/junegunn/fzf/commit/ee5aeb8,junegunn,2017-02-06 15:27:27
834,2017-02-17 09:39:13,Thanks for the explanation. I'll update my Ansible task.,krisleech,2017-02-06 15:27:27
833,2017-02-06 13:48:01,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [x] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
I enjoy your fzf git snippets a lot and use them very often. But now I'd like to change them, so they use `fzf` instead of `fzf-tmux`.
For instance, I have a snippet to select changed files:
<S_CODE_TOKEN>
But when I change `fzf-tmux` to `fzf`, then it stops working. Selected file names are not inserted on the line. Can you tell me what's wrong, or provide a correct way to do this? So I can change all other snippets as well.
",yevhen-m,2017-02-06 15:43:32
833,2017-02-06 15:43:32,"You probably need `zle redisplay` or `zle reset-prompt`.

See the updated code and the related discussion here:
https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236",junegunn,2017-02-06 15:43:32
833,2017-02-06 16:36:04,@junegunn thanks a lot. Perfect as always.,yevhen-m,2017-02-06 15:43:32
832,2017-02-06 09:50:47,"- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

I've installed *fzf* via usual vim installation ie. `Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }`, but after updating it today when I invoked it by pressing Ctrl+R, it responded with an error - 

<S_CODE_TOKEN>

Did I miss something?",agauniyal,2017-02-06 11:03:46
832,2017-02-06 10:05:09,`fzf --version` should return 0.16.0 or above. Check the output of `which fzf`. My guess is that it is pointing to a different version of fzf.,junegunn,2017-02-06 11:03:46
832,2017-02-06 10:28:09,"yes, but I don't know how any of this happened after the update -

<S_CODE_TOKEN>
should I delete the directory and reupdate it?",agauniyal,2017-02-06 11:03:46
832,2017-02-06 10:29:53,No just rerun the install script and see if it helps.,junegunn,2017-02-06 11:03:46
832,2017-02-06 11:03:46,"Yup it works now -

<S_CODE_TOKEN>

Still not sure how that happened though..",agauniyal,2017-02-06 11:03:46
832,2017-02-06 11:55:56,"Yeah, that's weird. I think I'm going to remove the old Ruby version for good to avoid further confusion.",junegunn,2017-02-06 11:03:46
831,2017-02-04 15:16:27,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [X] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

i want to use muti select in fzf but when i run this command : 

`echo -e ""Back\n$(dpkg -l | grep ""^ii"" | awk '{print $2}')"" | fzf -m --print0 --prompt=""Select Package to Remove :>: "" --reverse  --color=16`

the command work fine but the output is freak : 

`firefoxthunar`

but it should be look like that 

`firefox thunar`

if anyone know that solution help me thnx :1st_place_medal: 
",zakariaGatter,2017-02-06 16:05:01
831,2017-02-06 16:05:01,I don't think you want to use `--print0` here. Use something like `tr` to replace new lines into spaces.,junegunn,2017-02-06 16:05:01
830,2017-02-03 23:56:20,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    **- [X ] Completion**
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    **- [X ] Linux**
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    **- [X ] zsh**
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
I get this error on my Linux every time i try to do autocomplete. e.g cd and then press Tab.
fzf-completion:18: unrecognized modifier

I try many things, upgrading to the latest zsh doesn't help.

The only thing is I can disable it in .fzf.zsh by removing this line.
[[ $- == *i* ]] && source ""/local/home/kurniak/.fzf/shell/completion.zsh"" 2> /dev/null

Otherwise I cannot use autocomplete at all.

Hopefully there is a way to enable this in my unix box.

Thanks
",kkurni,2017-02-09 16:51:26
830,2017-02-04 01:20:08,"What's your exact zsh version?

I would first see if it's possible to reproduce the problem even with a minimal zshrc.",junegunn,2017-02-09 16:51:26
830,2017-02-04 02:07:38,"here is the version.
zsh 4.3.10 (x86_64-redhat-linux-gnu)

I tried to upgrade it with zsh 5.3 for linux, but it still does not work.

Thanks",kkurni,2017-02-09 16:51:26
830,2017-02-04 11:46:22,"We don't support that version of zsh (#665 #733) which was released in 2012.

I haven't experienced the problem with zsh 5 or above. Works fine with zsh 5.3.",junegunn,2017-02-09 16:51:26
829,2017-01-31 15:42:13,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting


- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I normally run fzf inside tmux. I just check and I think that the process that runs is fzf and not fzf-tmux. The problem I have is that sometimes, after running fzf and selecting a line (or not selecting anything) I get the following output:

 `$(__fzf_history__)` 

What is quite annoying is that I don't know how to recover from this. Ctrl-Z or Ctrl-C don't do anything. The only solution has been to shutdown the tmux session.

I wonder if there is something that I could do to recover when this happens. ",fidelram,
829,2017-01-31 16:13:51,"I'm not sure what's happening there, but the latest version of fzf prefers to use `--height` option over fzf-tmux, so it's going to be a non-issue (if you don't insist on using fzf-tmux). You might want to consider upgrading fzf first.",junegunn,
828,2017-01-31 14:13:42,"This can be useful to add the current command name to the statusline,
like this:

<S_CODE_TOKEN>",kassio,2017-01-31 16:06:53
828,2017-01-31 14:48:53,"Thanks for the suggestion. I see your point, but calling `fzf#wrap` does not necessarily mean that the user will call `fzf#run` immediately with the result. It's designed to be a pure function that should not affect the global state. Also, the variable you suggested only makes sense in Neovim and we don't want to unnecessarily expose it in ordinary Vim.

So here's the idea. Let's make the dictionary returned from `fzf#wrap` contain the optional name argument, and expose the dictionary as a buffer-local variable called `b:fzf`.

<S_CODE_TOKEN>

And you can use it like follows:

<S_CODE_TOKEN>

",junegunn,2017-01-31 16:06:53
828,2017-01-31 14:56:04,Suggested changed done. 😄 ,kassio,2017-01-31 16:06:53
828,2017-01-31 16:07:02,"Merged, thanks.",junegunn,2017-01-31 16:06:53
827,2017-01-31 08:04:26,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh/iterm2
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi,
I'v tried implementing the mac vim solution for iterm2 v3.
I'v created the script `~/.vim/In_a_new_term_function.vim` made it executable.

Also amended the following to .vimrc :
<S_CODE_TOKEN>

When I type ctrl-t in mccvim I get the following error :
<S_CODE_TOKEN>

It works great on the command line and when running vim from iterm.

Any ideas as to what the problem is?

/Stephen.
",maitriyogin,2017-02-06 16:06:04
827,2017-01-31 08:46:32,"Try the following instead and see if it helps

<S_CODE_TOKEN>

it's a shell script, so `.vim` is not the right extension, but anyway.",junegunn,2017-02-06 16:06:04
826,2017-01-30 15:39:04,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [X] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [X] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [X] zsh
    - [ ] fish

Hello
I've updated to 0.16.3 and I have weird completion issues now. It happens only in iterm2 not in terminal. It seems that text inserted are not display and the refresh behavior is strange. Is there someone who have the same issue? I'm using fzf since a year and have this issue with the update (don't remember which version I had before).

![jan-30-2017 16-34-59](https://cloud.githubusercontent.com/assets/8417720/22429199/13835fc6-e70a-11e6-9671-e40ef5059762.gif)



",benoittgt,2017-01-30 16:03:35
826,2017-01-30 16:03:35,"My bad. It's related to terminal type.

![capture d ecran 2017-01-30 a 17 02 55](https://cloud.githubusercontent.com/assets/8417720/22430262/f8f963d6-e70d-11e6-9e43-31c426dd00cd.png)

Be sure to have settings like this.

It's fixed. Thanks a lot for fzf.",benoittgt,2017-01-30 16:03:35
826,2017-01-31 00:47:21,"No problem, thanks.",junegunn,2017-01-30 16:03:35
825,2017-01-27 17:03:25,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

Hi, is there a reason why `ctrl-space` bindings are not supported? Currently if try 
<S_CODE_TOKEN>
I get `__fzf_history__ unsupported key: ctrl-space`. Thanks in advance!

",petobens,2017-01-29 17:07:22
825,2017-01-27 17:44:48,"I was not sure if ctrl-space is universally supported by various terminal emulators. 

Excerpt from https://en.wikipedia.org/wiki/Control_character#How_control_characters_map_to_keyboards:

> The NULL character (code 0) is represented by Ctrl-@, ""@"" being the code immediately before ""A"" in the ASCII character set. For convenience, a lot of terminals accept Ctrl-Space as an alias for Ctrl-@.

But if it's supported by most of the popular terminal emulators, we can consider adding it to fzf.",junegunn,2017-01-29 17:07:22
825,2017-01-28 02:12:20,Seems to work for me. Thank you!,petobens,2017-01-29 17:07:22
825,2017-01-28 02:41:06,"Thanks for the confirmation, 0.16.3 will be released in a few days.",junegunn,2017-01-29 17:07:22
824,2017-01-27 09:25:02,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

It would be a cool feature to be able to select a line number when you search. I use fzf with bash history and sometimes it seems easier to just remember the line number and type for example 2006.

",schef,2017-01-28 02:38:31
824,2017-01-27 15:34:45,"I think you can number bash history lines before streaming them to fzf, then you can filter by them.",balta2ar,2017-01-28 02:38:31
824,2017-01-28 02:38:31,"bash prepends line numbers to history by default, doesn't it? Anyway, I guess you want fzf to prepend line numbers to any type of input. It is possible, but we can already do manually.

<S_CODE_TOKEN>

It's infinitely more flexible than fzf doing it automatically; think about the formatting of the line numbers, colors, padding, justification, etc. I'll close the issue, but thanks for the suggestion.",junegunn,2017-01-28 02:38:31
824,2017-01-28 02:40:08,"FYI, you might want to check out jump action as well.

<S_CODE_TOKEN>",junegunn,2017-01-28 02:38:31
823,2017-01-27 08:02:50,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary

Currently fzf switches to the alternate screen before running an external command via execute action. But this switching is not desirable for a short-lived process whose output we are not interested in as it causes unnecessary flickering of the screen.

Add `execute-silent` action for the use case.

<S_CODE_TOKEN>

A caveat is that we can't see if the process is properly executed. If the process takes relatively long to finish, it will appear that fzf is not responding. We could simply run the command in the background using go routine, but then we can't safely combine it with the actions that terminate fzf immediately.

<S_CODE_TOKEN>

So for now, let's just make fzf run it in the foreground.",junegunn,2017-01-29 17:07:22
822,2017-01-25 23:12:55,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish
- Version
   - [x] 0.16.2

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hey! :smile:

Just an uninteresting issue: I have [noticed](https://gist.github.com/D630/6f95439237e9000480ce286d8c1d47f4#command-line-options), that the following options are documented in the man page, but not listed via `--help`:

<S_CODE_TOKEN>

",D630,2017-01-26 02:54:37
822,2017-01-26 02:36:15,"Hi, thanks for the great summary.

- `--black` was added to workaround [the display issue in msys2](https://github.com/junegunn/fzf/issues/18#issuecomment-36785131) before fzf was rewritten in Go. Since the current version of fzf does not run in msys2 or cygwin, and moreover we now have a more flexible way to set the background color (`--color bg:0`), the option is no longer needed. It is still there not to break backward compatibility, but we'll eventually remove it in the end.
- Another option we may deprecate in the future is `--toggle-sort`, in favor of `--bind KEY:toggle-sort`.
- `--print0` and `--read0` are excluded in the `--help` on purpose, because I was not completely sure about the benefits. You can find the reasoning behind the decision in https://github.com/junegunn/fzf/issues/660
",junegunn,2017-01-26 02:54:37
822,2017-01-26 02:39:10,Let me add `--print0` and `--read0` to `--help`.,junegunn,2017-01-26 02:54:37
821,2017-01-23 23:38:31,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
After update I got this issue:
![image](https://cloud.githubusercontent.com/assets/10185058/22227671/196aab36-e1d5-11e6-900a-c1bdd8953db0.png)
When I start to type, input line disappears and I land on the first matching tag. When I 'backspace', input line is back, but tags in fzf buffer are scrambled and redrawn when I go up with `<c-k>`.

Normal behaviour is this:
![image](https://cloud.githubusercontent.com/assets/10185058/22227710/3f51b416-e1d5-11e6-9dc0-8c66b354e007.png)

",yevhen-m,2017-01-26 02:54:37
821,2017-01-24 01:51:52,Any clue why it's happening? I can't reproduce locally.,junegunn,2017-01-26 02:54:37
821,2017-01-24 09:24:30,I have the same problem with `:Tags` on my mac. Strange that only `:Tags` command misbehaves.,yevhen-m,2017-01-26 02:54:37
821,2017-01-24 09:38:45,"I use `enew` layout in neovim. If I change it to `new`, then there is no problem BUT only if I use `:Tags` in the window with no vertical splits. If I open a vertical split  and use `:Tags` in the right vertical split, then problem is still present.",yevhen-m,2017-01-26 02:54:37
821,2017-01-24 16:16:39,"I still can't reproduce even with `let g:fzf_layout = { 'window': 'enew' }`.

Can you check if you still have the issue with this minimal configuration?

<S_CODE_TOKEN>",junegunn,2017-01-26 02:54:37
821,2017-01-24 16:28:05,"If I add `let g:fzf_layout = { 'window': 'enew' }` to your minimal config, then issue is present. As I can see, default layout is not affected.",yevhen-m,2017-01-26 02:54:37
821,2017-01-24 17:36:00,"Confirmed that the problem is caused by the way fzf handles tab characters. fzf has to recalculate the width of each line after trimming it.

<S_CODE_TOKEN>",junegunn,2017-01-26 02:54:37
821,2017-01-26 09:24:02,@junegunn thanks. Waiting for fzf 0.16.3.,yevhen-m,2017-01-26 02:54:37
820,2017-01-23 12:58:51,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.

One great use I have of fzf is to change buffers in the kakoune text editor. I am using a `--preview` command that sets the buffer immediately, which works as a nice preview. So, I do not use the stdout of this command which renders the preview window unecessary. The problem is that there does not seem to be any way to get rid of the preview window when using the preview command. This is a feature I would like to see in fzf.
",danr,2017-01-23 15:43:08
820,2017-01-23 13:23:55,"I see, it makes sense and it's something we can do relatively easily.

Since `--preview-window` already takes `hidden` flag (dormant), introducing another keyword for this invisible window will cause confusion. So let's use `--preview-window` option with size 0 (position doesn't matter) for this.",junegunn,2017-01-23 15:43:08
820,2017-01-23 16:00:39,"@danr May I ask you to record a gif or something similar to show how it looks like? I'm interested, maybe I would do the same.",balta2ar,2017-01-23 15:43:08
820,2017-01-24 09:11:52,"@junegunn thanks for the quick fix and for your efforts in making fzf!

@balta2ar I recorded a video and put it here: https://vimeo.com/200792397",danr,2017-01-23 15:43:08
820,2017-01-27 08:55:45,@danr Thanks for the interesting video. Inspired me to come up with #823.,junegunn,2017-01-23 15:43:08
819,2017-01-23 10:15:03,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
version: `0.16.1`

When fzf is invoked it does not clean the lines before to populate them. Thus if there is already something drown under the current line fzf will overlap it.

You can reproduce it with the following steps:
<S_CODE_TOKEN>
If you have autocompletion enabled you should see something like
![fzf_comple_pre](https://cloud.githubusercontent.com/assets/4229536/22199800/bdc05038-e15c-11e6-8de7-2bd825d8e247.png)

Then you invoke fzf:
<S_CODE_TOKEN>
![fzf_comple_post](https://cloud.githubusercontent.com/assets/4229536/22199831/d7a022a8-e15c-11e6-817c-6153d21b999f.png)


",ael-code,2017-01-23 15:50:35
819,2017-01-23 12:35:53,"I believe it's fixed in devel branch. The fix will be included in the next version.
Can you check if the alpha binary in the link below doesn't have the issue?

https://github.com/junegunn/fzf-bin/releases/alpha",junegunn,2017-01-23 15:50:35
819,2017-01-23 15:50:35,Fixed in 0.16.2.,junegunn,2017-01-23 15:50:35
819,2017-01-23 16:29:48,"> I believe it's fixed in devel branch. The fix will be included in the next version.
> Can you check if the alpha binary in the link below doesn't have the issue?
> 
> https://github.com/junegunn/fzf-bin/releases/alpha

I confirm that the bug has been fixed in the alpha release",ael-code,2017-01-23 15:50:35
819,2017-01-23 16:34:39,"Yeah, and 0.16.2 is out.",junegunn,2017-01-23 15:50:35
818,2017-01-22 05:13:24,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary

## Benefits 

### Cross-compilation
With no ncurses dependency, cross-compilation becomes trivial and we can provide binaries for different OSs and platforms (freebsd, openbsd, arm*). Makefile and install script should be updated accordingly.

- Close #465
- Close #497 
- Close #685

### Official support for 24-bit colors

<img width=""1280"" alt=""screen shot 2017-01-22 at 2 32 59 pm"" src=""https://cloud.githubusercontent.com/assets/700826/22180330/72f48b8e-e0b0-11e6-9cfa-5c0890010be5.png"">

- Close #789 
- Close #357

## Trying it out

Alpha binaries will be uploaded to https://github.com/junegunn/fzf-bin/releases/alpha",junegunn,2017-01-23 15:43:08
818,2017-01-22 16:21:11,"Could you please demonstrate examples where 24bit color support is really helpful? I don't think I've ever used it, so maybe others could point out the benefits so that I could make my console experience better. Thanks.",balta2ar,2017-01-23 15:43:08
818,2017-01-23 06:56:27,"It's mostly about the looks (https://github.com/junegunn/fzf.vim/issues/294). Some people would use it to display images in the preview window (#738), but most terminal emulators (and fzf) are not really optimized for that use case, so it's not something I'd recommend at the moment.",junegunn,2017-01-23 15:43:08
818,2017-01-25 06:30:11,"![2017-01-24-22 29 40](https://cloud.githubusercontent.com/assets/4206232/22280307/a2c5895a-e284-11e6-8e6f-9ac4896494c7.png)

Thank you! This works flawlessly.",sliceofcode,2017-01-23 15:43:08
818,2017-01-25 07:34:14,Good to hear that. Let me know if you run into any issues with the new version (a bug fix release is planned in the next few days).,junegunn,2017-01-23 15:43:08
817,2017-01-20 01:23:58,"it's a bit of a hack, but it should work. or at least, it works on my machine..",DanielFGray,2017-01-20 04:41:06
817,2017-01-20 04:12:00,"I am curious, isn't it cleaner and faster to set in your environment `FZF_CTRL_T_COMMAND='ag -l -g """"'`

There are plenty of other tools besides `ag` that fully support `~/.gitignore` and other exclude files, for instance look at `sk` or `ack`. Implementing this inside the fzf distribution seems unnecessary.

",acornejo,2017-01-20 04:41:06
817,2017-01-20 04:37:24,"Well sure, you could rely on external tools for that, but this would work with just plain `find`..

But I understand if you'd prefer not to merge this. Actually I really should've `test`ed to see if the file exists before trying to parse it...",DanielFGray,2017-01-20 04:41:06
817,2017-01-20 04:41:06,Oh I just realized this isn't in a feature patch.. going to re-submit.,DanielFGray,2017-01-20 04:41:06
817,2017-01-20 04:45:04,"I am not the maintainer of this repo, I am just one of many greatful users ;), so please disregard my comments, I was just curious as to why one would want to parse ignore files with shellscripts when there are alternatives out there.",acornejo,2017-01-20 04:41:06
817,2017-01-20 04:52:17,"My reasoning was that while it may not be as fast as other alternatives, it's still pretty darn fast. And if you have another tool you'd prefer, you can use that, and if it's not available, with this, `find` will use your `~/.ignore`.",DanielFGray,2017-01-20 04:41:06
817,2017-01-20 05:22:24,"Hi, thanks for the suggestion, but I'm pretty much with @acornejo on this, for a number of reasons.

1. We'll have to implement the logic for 3 different shells (bash, zsh, and fish) and I'll have to maintain the code forever. Supporting 3 shells has been the number one pain point for me, because all I use and know well is bash. Let's delegate the role to the tools that are obviously better at it (unix philosophy) and keep it simple.
2. I know `.gitignore`, but `.ignore` is new to me. But I'll just assume that it's similar to `.gitignore`. The complexity of `.gitignore` is monstrous (see `man gitignore`). It is obvious that the suggested solution won't be able to fully address the specification and it is not clear to the user what is supported and what is not. This can lead to unnecessary confusions.
",junegunn,2017-01-20 04:41:06
816,2017-01-20 01:03:06,"These days I use fzf for everything (almost use it more than bash ;) ).

When writing long fzf scripts I have often wanted an execute-once command, which allows me to setup a key binding that will execute a given command and then exit fzf.

There are lots of examples where this is useful, but here is the most recent use case I had:

I am listing a lot of folders, where the user can select to which want to jump (i.e. like fcd or whatever), and if the user presses Ctrl-X I want fzf to copy the selected directory to the clipboard and exit. I can almost achieve this with --header 'Ctrl-X to copy' --bind 'ctrl-x:execute:echo {} | pbcopy', with the caveat that this will not cause fzf to exit, which is very annoying.

Thoughts?

PS: The new feature of fzf which makes it render nicely without tmux is AMAZING btw, I have wanted this for a long time.",acornejo,2017-01-23 15:43:08
816,2017-01-20 02:02:24,"Normally I would suggest using `--expect` (you aware of it?), but I can relate since I have this:

<S_CODE_TOKEN>

I can see the appeal, no need for external scripting to handle `--expect`, and we can directly use the result of tokenization (`echo -n {2..}`).

However, I'm still left with a question if it's a right thing to do because fzf is a filter. Say that we implement `fork` action so I can write

<S_CODE_TOKEN>

The problem is that now fzf becomes a completely different process producing different output that the script invoking it is not prepared for.",junegunn,2017-01-23 15:43:08
816,2017-01-20 02:58:03,"Thanks for bringing up `--expect` I have used it in the past but grepping through my dotfiles it seems I am not using it anymore, and I agree I can definitely handle my usecase  (at the expense of more complexity when handling the output of fzf).

I see your point about how implementing an fzf `fork` would be hard to do while mantaining sane behavior. However, I was trying to suggest something more similar to `execve` than `fork`.

Specifically, currently if I do `key:execute:cmd` then whenever I press `key` fzf will execute `cmd`, and when `cmd` completes fzf will render again. I was proposing adding `key:execute-and-quit:cmd` so that if I press `key` then fzf would execute cmd, so that when cmd finishes we also leave fzf and return at the shell prompt.

While hypothetically you could implement this using execve to replace the fzf process with the cmd process, perhaps it is simpler to implement by just having fzf execute cmd and exit when cmd returns.

What do you think? I hope I didn't miss the point you were describing.",acornejo,2017-01-23 15:43:08
816,2017-01-20 03:08:31,"Understood.

> perhaps it is simpler to implement by just having fzf execute cmd and exit when cmd returns.

Yeah, it should be simpler. Leads to another question: should fzf print the focused entry on exit or not? I mean, is it `execute-and-abort`, or `execute-and-accept`? What do you have in mind?",junegunn,2017-01-23 15:43:08
816,2017-01-20 04:08:00,"To be honest initially I thought `execute-and-abort`, but now that you brought it up it seems obvious that `execute-and-accept` would be a lot more useful, especially given that one could easily achieve the effect of `execute-and-abort` by doing `fzf >/dev/null`.

If this is a feature you would contemplate adding to `fzf` but you are short on time I would be happy to contribute a PR to it.",acornejo,2017-01-23 15:43:08
816,2017-01-20 05:32:29,"`execute-and-abort` and `execute-and-accept` both can make sense in `FZF_CTRL_R_OPTS` example depending on what I want. `abort` version can modify the behavior, and `accept` version can ""inject"" extra behavior without having to edit the original script.

Note that we also have `execute-multi`, so if we decided to support both options, we'll have to add 4 new actions in total. `execute{,-multi}-and-{accept,abort}`. I'm a little worried that this might quickly become unwieldy. Maybe it's a good idea to allow chaining/combining actions? e.g. `toggle-up` can be expressed as `toggle+up`. So we can do `execute(...)+abort`, but this can't be applied to  the special form `execute:...`.



",junegunn,2017-01-23 15:43:08
816,2017-01-20 16:23:26,"Being able to chain multiple actions per binding is definitely a much more powerful idiom, I'll leave it up to you to evaluate how much more complicated this would be to implement.

The caveats about not being able to chain actions when using `execute:` doesn't seem like a bad thing, since that form already has caveats (can only be used on the very last comma separated key binding), and by design using that form will always introduce limitations since it essentially means you can't continue parsing the string once you reach that point.",acornejo,2017-01-23 15:43:08
815,2017-01-19 23:48:27,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [X] Etc.
- OS
    - [ ] Linux
    - [X] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
I'm having an issue with [ `fo` in this Example diff](https://github.com/junegunn/fzf/wiki/Examples/_compare/71ef8907a8a81f2223d51c149c975105187a3048...535eff6eb1b0600f4954d491625426691a9d056f).

Hitting Enter (instead of `ctrl-o`, `ctrl-e`) doesn't seem to work for me. From examining `$out`, I've noticed that newline isn't in `${out[0]}`. My understanding of the correct behavior would be that `${out[0]}` is whatever key was pressed (blank for Enter, `ctrl-o` otherwise), followed by lines containing each of the selected results from fzf.

My guess is that when we starting wrapping the `$(fzf)` into an array (`($(fzf))`), the shell automatically dropped the blank line as the zero-eth character. Here's a demonstration:
<S_CODE_TOKEN>

When debugging this, I found out that bash 0-indexes their arrays while zsh 1-indexes them. This would also not make this example work, as I would expect `key=${out[1]}` in zsh. 

The prior version of this example [keeps `$out` as a string](https://github.com/junegunn/fzf/wiki/Examples/_compare/30cc2f41f2357cb9577d803dee3242d0335e6679...61fddc19c5ab9d374dd4246c15e6aedccf807ced) and uses `head`/`tail` to filter out the key/files. Though this isn't as syntactically pretty, it wouldn't introduce incompatibilities between bash/zsh (this project officially seems to support both), and it wouldn't run into this blank-line-array issue.

Let me know if you are able to reproduce the bug or if you see something that might be wrong with my setup.",matthewgrossman,2017-01-20 01:32:39
815,2017-01-20 01:32:39,"Thanks, you correctly spotted out a bash/zsh compatibility issue in the example. I agree with your suggestion and I just reverted the diff.

The write permission to the wiki page is publicly open, and I haven't thoroughly verified the changes people have made. I'm a bash user so I have made mistakes of not testing on zsh, and on the flip side, I guess there should be some examples that aren't carefully tested on bash. However, splitting the page into two (or three) seems like an overkill as it's just a set of examples to show how one can use fzf. I'll go over the examples when I get some time and remove the ones that are too complex and have compatibility issues.",junegunn,2017-01-20 01:32:39
815,2017-01-20 06:34:13,"Great, sounds like a excellent solution. I use bash or zsh depending on context, so I run into these issues pretty quickly. If I get a chance I'll try to go through some of the examples and update / make them as generic as possible.",matthewgrossman,2017-01-20 01:32:39
814,2017-01-19 17:51:51,"- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

Steps to reproduce:

1. Run Vim
2. Create some mapping for `:FZF` command with `<silent>` option, e.g. `:nnoremap <silent> <Leader>f :FZF<CR>`
3. Issue any message with sufficient length, e.g. `:echo ""fzfrockzzzzzzzzzz""`
4. Press `<Leader>f` to run FZF

Expected: FZF starts and fully overwrites the message with file list. Alternatively, it keeps the message and shows the file list under it.
Observed: FZF overwrites the message only partially, leaving some characters from message on the screen.

![fzf](https://cloud.githubusercontent.com/assets/1043953/22118217/19f21b5c-dea1-11e6-808e-1de0eaae6636.png)

Here `Setup.hs` is the first file in list and `zzzzzzz` is what left from the message line.

The strange thing is that this happens only with `<silent>` option. Non-silent mapping works well.",toiffel,2017-01-21 18:05:05
814,2017-01-21 18:09:20,"Added `tput el` to clear the last line before starting fzf as the workaround for now. I'll make the next version of fzf do it natively, so that it is no longer needed.",junegunn,2017-01-21 18:05:05
813,2017-01-19 15:59:07,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [x] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Dear @junegunn, I found recently that fzf started behaving very slowly. I was receiving lag of multiple seconds for each keypress, while fuzzy searching my shell history. I tracked this issue to the following config from my .zshrc

<S_CODE_TOKEN>

Removing this line of code solves the problem for me. 

I don't use iTerm2 shell integration, so I don't need it and I stopped my investigation here. I figured I would submit an issue to document my findings, in case others are running into this issue as well.

Regards, thanks for fzf, I use it daily!
sheldon",sheldond,
813,2017-01-20 01:45:24,"Hi, thanks for the heads up. I don't know about the script, but I'll look into it when I get a chance.",junegunn,
812,2017-01-19 14:14:15,"This fixes pre-populating the query value from the typed command so far,
which broke in 208d4f2.",jamesoff,2017-01-20 19:20:16
812,2017-01-20 01:46:14,Are you sure that it's broken? It works for me.,junegunn,2017-01-20 19:20:16
812,2017-01-20 08:59:53,"Double-checked; without the fix, it breaks with a trailing space but is ok otherwise.

I tend to type ""ssh "" and then hit Ctrl-R :)

I see the test for test_ctrl_r is failing, but I don't immediately see in the output why :(",jamesoff,2017-01-20 19:20:16
812,2017-01-20 09:14:03,"> it breaks with a trailing space

I see, that was the information I needed :)

Test cases sometimes fail on Travis CI due to timeout issues, I'll restart the build and see if it helps.",junegunn,2017-01-20 19:20:16
812,2017-01-20 16:52:26,"It is a genuine failure. When you press CTRL-R on empty command-line, you get `''` in fzf prompt.

The code not working when your command-line ends with a space turned out to be a bug of shellwords library fzf depends on. I'll fix it and include the patch in the next fzf release. But until then, a workaround would be to add `''` at the end.

<S_CODE_TOKEN>

It does help, right?",junegunn,2017-01-20 19:20:16
812,2017-01-20 19:24:38,"Hi, I was able to workaround the issue by reordering the options. Thanks for the report and the fix.",junegunn,2017-01-20 19:20:16
811,2017-01-18 17:54:32,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [X] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [X] bash
    - [ ] zsh
    - [ ] fish

I upgraded to the lastest fzf version 0.16.1 and found the default height changed in normal bash shell (not inside tmux).

Can I change it back to normal full terminal(screen) mode?

",markwu,2017-01-19 02:06:00
811,2017-01-19 02:06:00,"Add `--no-height --no-reverse` to your `$FZF_DEFAULT_OPTS`. Or you can add it to each per-binding configuration, such as `$FZF_CTRL_T_OPTS`.",junegunn,2017-01-19 02:06:00
811,2017-01-19 09:01:29,"Updated the wiki page with the info:

https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#changing-the-layout",junegunn,2017-01-19 02:06:00
811,2017-01-21 12:00:01,"@junegunn Sorry, I don't quite understand this decision. You recently hardcoded `--height` into ctrl-r, effectively forcing users who have never used it to add another option `--no-height` to cancel it. Why didn't you just add `--height` to your own FZF_DEFAULT_OPTS? Also, what's the point of `--no-height` if you can simply omit `--height`? (except when you can't where `--height` is hardcoded). This war of options got so complicated and frustrating...

Another confusion is that `--height` seems to erase screen content. This is very confusing when cursor is at the bottom of the screen. Here I demonstrated it with and without `--height`: https://asciinema.org/a/bmfcztbpzod891qindyfppz3e. Is this a bug? Do you want me to create an issue on that?",balta2ar,2017-01-19 02:06:00
811,2017-01-21 12:40:23,"@balta2ar Your argument assumes that full screen mode is the better default, but that is subjective. There are users including myself (see the links below), who prefer this new `--height` layout over the obtrusive full screen layout or tmux layout that causes undesirable side effects such as unzooming a zoomed pane. And I'm choosing what I think is the best as the default, just like I decided to make the new matching algorithm as the default when it was introduced a few months ago. You may not agree with the decision, but on the flip side, there can be users who would wonder why full screen mode is still the default layout for fzf when `--height` is available. I'm sorry to hear that you don't like the new default, but I like it a lot (if I don't like it, why would I spend my time and energy implementing it?), and any decision I make can't satisfy every different taste at the same time.

> Another confusion is that --height seems to erase screen content. 

fzf prints new lines to make space for the finder. Screen content is not erased but is put in the scrollback buffer. I don't know if it's possible to ""un-scroll"" the screen.
 
---
- https://github.com/junegunn/fzf/issues/816
- https://gitter.im/junegunn/fzf
- http://junegunn.kr/2017/01/fzf-height/",junegunn,2017-01-19 02:06:00
811,2017-01-21 16:32:26,"@junegunn Sorry if my previous comment sounded like a rant or a complaint. I didn't mean to. I understand that you spend a lot of your own time on this for free and you don't own anything to anybody.

To be more constructive, let me ask it this way. What if instead of hard coding, you put `--height` into CTRL_R_OPTS by default (if it's not set by a user)? In this case 1. height would be default as you like 2. I could override CTRL_R_OPTS to cancel height effect. yes I can do it now using no-height,  but 3. You would not need no-height option anymore: it potentially saves your time maintaining the code — less options, the better. What do you think?

As for un-scrolling, I think it's reasonable to expect that fzf without height (fullscreen) and fzf with height=100% behave exactly the same. As of now their effect is different. I'm not using height so it's not bothering me, but it still looks inconsistent and other users may ask the same question.

EDIT: Judging by your last comment at gitter you didn't know they have different behavior. Please consider this ""unscrolling"" feature before throwing off old renderer.

> Once we're confident with this new renderer, I'll completely replace ncurses renderer with it (basically --no-height becomes --height 100%)

EDIT2: Apparently, there is a reason to have `--no-height`, and the reason is that it uses a different renderer. This makes suggestion in my second paragraph pretty much useless.",balta2ar,2017-01-19 02:06:00
811,2017-01-21 20:11:27,"@balta2ar 

> yes I can do it now using no-height, but 3. You would not need no-height option anymore

No, I don't think it's a good idea. Just wanted to change the background color, `export FZF_CTRL_R_OPTS='--color ""bg:#123123""'` and you have fzf running in full screen mode? It's a surprising change of behavior that you didn't ask for.

> Apparently, there is a reason to have --no-height, and the reason is that it uses a different renderer.

Correct. But it's a leaky abstraction, things should be cleared up in the future.

I have plans for improving `--height 100%` or something like `--height 999999` using alternate screen just like ncurses, so no scrolling. The obvious next step is to remove ncurses renderer completely; true-color support, easier build steps, less compatibility headaches.",junegunn,2017-01-19 02:06:00
811,2017-01-23 05:44:43,"@junegunn 

Thanks, I try your suggestions, it works.",markwu,2017-01-19 02:06:00
810,2017-01-18 16:40:39,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [x] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--

Describe your problem or suggestion from here ...
-->
Running FZF in a plain xterm with bash works like a charm but running it in tmux is very slow. For instance, I am in my homefolder and do `ls tmp/**<Tab>` which brings up FZF. After selecting an entry, is is there instantly. The same in tmux takes about 2 seconds.
",Jeansen,2017-01-19 22:45:35
810,2017-01-19 02:07:29,Are you running the latest version of fzf?,junegunn,2017-01-19 22:45:35
810,2017-01-19 22:45:19,"I just ran an update (did that a couple days ago, also). Anyway, I seemed to have been one version behind. With the latest version it works! Sorry, for not having checked beforehand.",Jeansen,2017-01-19 22:45:35
810,2017-01-20 03:48:04,Good to hear that the update helped. But it's not that the root cause of the problem is fixed but the problem's just avoided by the new version not using tmux by default. I think you will still have the same issue when running fzf-tmux script.,junegunn,2017-01-19 22:45:35
810,2017-01-23 21:11:28,"Thank""s for the hint! Well, for now I am not using fzf-tmux script explicitly. But I guess soon I will want to use it with the power of tmux panes. Any way I can help?",Jeansen,2017-01-19 22:45:35
810,2017-01-24 01:14:12,"Nah, It's okay. Lately I'm also using `--height` instead of fzf-tmux in most cases. I guess it's probably something to do with your tmux setup.",junegunn,2017-01-19 22:45:35
809,2017-01-17 15:26:44,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash 4.4.5
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
When pressing Ctrl-R or Ctrl-T in the Neovim `:terminal` I have to press two keys (doesn't seem to matter which) before fzf appears. For Ctrl-R it shows `` `__fzf_history__` `` in the terminal, while for Ctrl-T the current line is cleared and nothing is shown. Running `__fzf_history__` and `fzf-file-widget` manually has the same behavior. Everything works fine outside Neovim.

I have tried to demonstrate the issue in the following recording: https://asciinema.org/a/9iaer5356x9sct6gyj533lsom

I'm using FZF commit 8ac37d59278209a7aec536f319c26109ef6704eb.
",mbudde,
809,2017-01-17 16:49:32,"Hi, thanks for the report. It's a known issue of Neovim terminal. See https://github.com/neovim/neovim/issues/4151

Until the issue is fixed (or fzf finds another way to find cursor position), you'll have to disable `--height` option in Neovim terminal.

<S_CODE_TOKEN>

I'll leave this issue open so that the other Neovim users can see.

/cc @justinmk ",junegunn,
808,2017-01-16 22:50:35,"- Category
    - [X] Key bindings
- Shell
    - [X] bash

fzf is an awesome replacement for the default reverse-i-search (Ctrl + r).
It would be even better if it did only show unique lines (in case `HISTCONTROL` doesn't include `erasedups`).",leonklingele,2017-01-16 22:59:41
808,2017-01-16 22:59:41,"Sorry, duplicate of so many other issues (oh, the irony).
See #600",leonklingele,2017-01-16 22:59:41
808,2017-01-16 23:33:46,BTW: Here's my solution: https://gist.github.com/leonklingele/6b00a43311cffab1e90bbd68c9784cbd,leonklingele,2017-01-16 22:59:41
807,2017-01-16 21:20:15,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [x] Key bindings
- OS
    - [x] Mac OS X
- Shell
    - [x] zsh

I have `--reverse` in my [`FZF_DEFAULT_OPTS`](https://github.com/ahmedelgabri/dotfiles/blob/1d0fa0ce0fe40a7ed9022b2380799e171b368afc/zsh/.zshenv#L35) but `CTRL_R` doesn't respect this anymore in the latest release. `CTRL_T` picks it up though

",ahmedelgabri,2017-01-17 08:52:40
807,2017-01-17 01:27:00,"The code: https://github.com/junegunn/fzf/blob/0.16.1/shell/key-bindings.bash#L59

I decided to override `--reverse` in `$FZF_DEFAULT_OPTS` by setting `--no-reverse` after it as it seemed more fitting for the use case. But as you can see, you can re-override the config using `$FZF_CTRL_R_OPTS`.

(Nevermind the extra `--reverse` before `$FZF_DEFAULT_OPTS`, it was an oversight.)",junegunn,2017-01-17 08:52:40
807,2017-01-17 07:56:47,"> I decided to override --reverse in $FZF_DEFAULT_OPTS by setting --no-reverse after it as it seemed more fitting for the use case.

But it just makes `$FZF_DEFAULT_OPTS` more confusing. Because people (or at least myself) will assume that `$FZF_DEFAULT_OPTS` will affect every `fzf` action. But applying it to some commands only is not really consistent IMO. ",ahmedelgabri,2017-01-17 08:52:40
807,2017-01-17 08:27:37,"I can see that it can be controversial or confusing, but let me explain. Defaults are just defaults and it should be possible to override some of the options. For example, imagine that you have `--multi` in `$FZF_DEFAULT_OPTS`, should we still allow multiple selections in CTRL-R? It will break the function processing the output which expects just a single line from fzf. Likewise, one can have `--preview 'cat {}'` in `$FZF_DEFAULT_OPTS`, but fzf may be not filtering files but a list of processes, host names, etc.

> But applying it to some commands only is not really consistent IMO.

To be clear, `$FZF_DEFAULT_OPTS` is applied to every fzf process, it's that we can override *a subset of the options* by explicitly stating it as the arguments to fzf.

<S_CODE_TOKEN>

Anyway, back to the subject, the case of `--reverse` option is not equivalent to the examples I gave above, in that it does not affect the correctness, but only affects the presentation style, which should be probably, primarily decided by the user?",junegunn,2017-01-17 08:52:40
807,2017-01-17 08:52:40,"> To be clear, `$FZF_DEFAULT_OPTS` is applied to every fzf process, it's that we can override a subset of the options by explicitly stating it as the arguments to fzf.
>
> <S_CODE_TOKEN>

I understand, but this doesn't work with `$FZF_CTRL_R_OPTS` for example, which breaks the predictability of the settings. For something like `--multi` I understand that it can break some commands, maybe docs to indicate which flags are allowed in `$FZF_DEFAULT_OPTS`?

> Anyway, back to the subject, the case of --reverse option is not equivalent to the examples I gave above, in that it does not affect the correctness, but only affects the presentation style, which should be probably, primarily decided by the user?

Totally agree, it's just that I expect that when I override it in `$FZF_DEFAULT_OPTS` that it will work as expected. For example my preference is to use `--reverse` as a default but now I need to add it in multiple places. Which feels a bit odd IMO.

My main issue is already fixed & I understand why, so I'll close this.

Just to be clear, I'm not complaining or anything. I do appreciate your work & thanks for the great tools 😊",ahmedelgabri,2017-01-17 08:52:40
807,2017-01-17 09:06:45,"> I understand, but this doesn't work with $FZF_CTRL_R_OPTS for example, which breaks the predictability of the settings.

Agreed, we should carefully order the options so that it makes most sense. To summarize:

1. `$FZF_DEFAULT_OPTS`
    - Options that are context-free (regardless of the type of the entities).
    - Mostly options that determine presentation style.
2. `$FZF_[BINDING_NAME]_OPTS`
    - Per-binding overrides. e.g. Have `--reverse` in `$FZF_DEFAULT_OPTS`, and `--no-reverse` only in `$FZF_CTRL_R_OPTS`
3.  Options that can affect the correctness should come last

And now I agree that it is more straightforward that we don't override `--reverse` in CTRL-R.",junegunn,2017-01-17 08:52:40
807,2017-01-17 09:10:35,"Updated, thanks for the comments.",junegunn,2017-01-17 08:52:40
806,2017-01-16 06:20:03,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

vim:
<S_CODE_TOKEN>
<img width=""1279"" alt=""2017-01-16 2 11 16"" src=""https://cloud.githubusercontent.com/assets/8850248/21972637/da6dbf2a-dbf5-11e6-97f1-545708a9a97a.png"">

neovim:
<img width=""1274"" alt=""2017-01-16 2 10 43"" src=""https://cloud.githubusercontent.com/assets/8850248/21972650/e9fa52aa-dbf5-11e6-82d2-2b9cc8f00531.png"">

I notice that you have just released a new version and I also update to the latest, does it caused by the new release? Is there any notes for this release?

",liuchengxu,2017-01-16 06:25:05
806,2017-01-16 06:22:41,Rerun the install script (~/.fzf/install) to download the latest binary.,junegunn,2017-01-16 06:25:05
806,2017-01-16 06:25:05,Thanks!,liuchengxu,2017-01-16 06:25:05
806,2017-01-25 15:59:47,"I hit this same wall while using `fzf` in `nvim` inside `iTerm`. What's weird is that it works most of the time, but it fails about 3/10 times.",juandazapata,2017-01-16 06:25:05
806,2017-01-26 02:12:35,You can check if the command printed in the error message works outside of nvim.,junegunn,2017-01-16 06:25:05
806,2017-01-27 16:50:09,"I'm also getting this random segfaults errors while in the terminal (outside vim)

<S_CODE_TOKEN>",juandazapata,2017-01-16 06:25:05
806,2017-01-27 17:14:27,"Please post the full command you executed.

- Do you still see the same problem if you replace `fzf-tmux` to `fzf`?
- Which version of fzf are you running?",junegunn,2017-01-16 06:25:05
806,2017-01-30 04:12:56,"~~I'm getting the original issue in vim. I've re-run the installation command to download the latest binary like you mentioned.~~

I had updated the binary in my global installation of fzf, but not the one in `~/.vim/plugged/fzf`. Updating there fixed this issue.",tupton,2017-01-16 06:25:05
806,2017-02-27 19:52:56,I completely uninstalled `fzf` and installed the latest version and the problem went away. It's been working perfectly for the last 2 weeks. 🎉 ,juandazapata,2017-01-16 06:25:05
805,2017-01-16 03:00:13,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

",junegunn,2017-01-16 03:31:50
804,2017-01-14 17:30:11,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

Related to #802, it would be useful to have a tiebreak option that prefers a shorter filepath (i.e. the match with the least number of path separators). I can of course do things like:

<S_CODE_TOKEN>

but will need to do this for every source (I'm using Neovim).

Thoughts?",myitcv,2017-01-15 08:20:52
804,2017-01-15 08:20:52,"Thanks for the suggestion, but for now, I don't want to make the search/sort depend on the context to keep things simple. And I've had mixed feelings about `--tiebreak` option in general since 0.15.0 where we introduced sophisticated matching/sorting algorithm, which made `--tiebreak` much less important. I may retire the option in the future to make fzf simpler.",junegunn,2017-01-15 08:20:52
804,2017-01-15 08:41:03,Understood and thanks for the response; I have a work-around (as shown above) for now in any case.,myitcv,2017-01-15 08:20:52
803,2017-01-14 11:25:23,"Later versions of Vim/Nvim handle `:edit <dir>` inside try-catch.

https://github.com/vim/vim/commit/e13b9afe1283f5ae43232b5992372a0eb570666c
https://github.com/vim/vim/pull/1375",justinmk,2017-01-14 11:55:30
803,2017-01-14 11:56:20,"Cool, thanks!",junegunn,2017-01-14 11:55:30
802,2017-01-14 07:38:42,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

I can see the [actions supported for key bindings](https://github.com/junegunn/fzf/blob/a71c47140575b324afeb054a4fbc0e3fa505d4d0/man/man1/fzf.1#L420-L465) but I can't find actions that allow manipulation of what is probably the most common input to fzf and that is file paths.

In my case (which happens to be invoking from Neovim but that's not the critical factor here) I use the `--query` option to start the finder with the provided query. In my case that's a filepath, specifically the equivalent of (in pseudo code, mixing Go and Vimscript) `filepath.Rel($CWD, ""%:h"")`. This means my results are constrained to the directory containing the current file. 

What I would like is an action that then allows me to set the query string to the result of `filepath.Dir(queryString)`.

Is there a way of doing this? 

Using `unix-word-rubout` feels like the wrong solution, not least because it would require configuration, but also because it isn't platform-aware. `filepath.Dir` is platform-aware.. so an action-equivalent would be great.",myitcv,2017-01-15 17:43:58
802,2017-01-15 05:50:07,"I'm not sure if I understood your intention correctly, but is this what you're looking for?

<S_CODE_TOKEN>",junegunn,2017-01-15 17:43:58
802,2017-01-15 06:54:56,"@junegunn apologies for not being clear on what I was asking for. 

Let's take the following example:

<S_CODE_TOKEN>

which gives us the following (ignore the comment, it's just so that I can refer to steps):

<S_CODE_TOKEN>

(with the cursor at the position shown by the caret)

For me the default mapping for the action `backward-kill-word` is `alt-bs`. If we `backward-kill-word` once we are left with:

<S_CODE_TOKEN>

If we `backward-kill-word` again we are however left with:

<S_CODE_TOKEN>

`backward-kill-word` isn't really what I'm trying to do here; I'm trying to make the query string equal to the value of [`filepath.Dir(currentQueryString) + string(os.PathSeparator)`](https://godoc.org/path/filepath#Dir) in Go terms (there are of course edge cases, but you get the idea) which would have instead have left us with:

<S_CODE_TOKEN>

So what I'm asking is whether it would be possible to introduce an action (to which I can then add a key binding) that makes this possible.

Does that help to clarify?

---

**Update 1** couple of points made clearer
**Update 2** `kill-word` corrected to `backward-kill-word`",myitcv,2017-01-15 17:43:58
802,2017-01-15 07:14:03,Updated [my previous comment](https://github.com/junegunn/fzf/issues/802#issuecomment-272677847) to make a couple of points clearer.,myitcv,2017-01-15 17:43:58
802,2017-01-15 07:32:42,"To be clear, it's `backward-kill-word` (which is mapped to alt-backspace) not `kill-word`, right?

Since `backward-kill-word` suffices for me and fzf is a general purpose filter (though you're probably correct that it's most frequently used with files) I'm not really inclined to add an action specialized for file search. When you get `src/github.`, you can just hit `alt-backspace` one more time. Does it really bother you much? That's what we do on our shells.

The same also applies to backward-word and forward-word. So if we're really going to do this, for completeness's sake, we would have to add 3 actions in total (EDIT: there's also kill-word, so 4). Also we would have to allow customizing path separator, since theoretically, one can be filtering a list of files from another platform.
",junegunn,2017-01-15 17:43:58
802,2017-01-15 08:04:57,"> To be clear, it's `backward-kill-word` (which is mapped to `alt-backspace`) not `kill-word`, right?

Correct, fixed in my comment above.

> I'm not really inclined to add an action specialized for file search. 

Totally understand your point of view. These actions would, however, be additions to the action API:

<S_CODE_TOKEN>

I've proposed a prefix here which would help to separate them from the existing actions, and used the term 'element' from the [`path/filepath`](https://godoc.org/path/filepath) godocs. 

The actions would be extremely well-defined, have a clear and simple implementation and so to my mind would add real value for what we both agree is the most common use case for `fzf`

> When you get src/github., you can just hit alt-backspace one more time. Does it really bother you much? That's what we do on our shells.

... and I'm not happy about it in `bash` either 😄 . The issue is that I know I'm dealing with a filepath; I know I'm trying to backward-kill the last element of that filepath. I don't want to have to visually inspect the last element of the filepath to see how many non-wrod characters are in that element so that I can compensate my number of key presses. It seems that within `fzf` we're not forced to maintain an API that is a subset/superset of various shells' actions, so we have some flexibility in what we do.

> Also we would have to allow customizing path separator, since theoretically, one can be filtering a list of files from another platform.

I would argue (based on a gut feel) this is an _extremely_ rare use case and certainly not one to consider at this point in time.",myitcv,2017-01-15 17:43:58
802,2017-01-15 08:08:42,Maybe it's simpler to add a single option (like `--file-word`) that overrides the behaviors of 4 existing options? ,junegunn,2017-01-15 17:43:58
802,2017-01-15 08:51:54,"> Maybe it's simpler to add a single option (like `--file-word`) that overrides the behaviors of 4 existing options?

That's certainly another option (if we are 🚲 shedding on the name I would prefer `--filepath-word`, it's more consistent with the Go `path/filepath` language). This approach raises a couple of questions for me:

* by doing this we rule out people using both behaviours, i.e. in an input where they want to erase either a word or a filepath element and bind keys accordingly; I don't think they need to be mutually exclusive because, as you point out, inputs aren't guaranteed to be so
* how much more complex does this makes the documentation?

<S_CODE_TOKEN>

Are there other parts of documentation that would need changing?

Adding to the API we at least avoid both aforementioned problems.",myitcv,2017-01-15 17:43:58
802,2017-01-15 09:11:27,"The name doesn't have to be consistent with the naming convention of Go. The language fzf is written in doesn't matter to the users. I prefer shorter names. The definition of ""path separator"" should be clear to the users, I don't think we need to mention godoc.org for describing such a well known, language-agnostic concept. I would just say ""Make word-wise movements and actions respect path separators"".

> we rule out people using both behaviours

I doubt that there will be a significant number of users who would try to find 4 more key chords they can bind to those 4 new options. You know, there actually aren't too many free key chords available for binding. And to be honest, it's hard for me to see the benefit of the option, as I rarely type in more than 5-6 characters to fzf prompt and I don't spend more than several seconds inside fzf finder most of the time. And I haven't used `--query` in such a way.

Having said that, it was trivial to implement the option, but I haven't decided if it's essential to fzf, can you share your script that you're implementing using `--query`?",junegunn,2017-01-15 17:43:58
802,2017-01-15 10:12:20,"> The name doesn't have to be consistent with the naming convention of Go

True, I was only advocating using similar/the same language in order to keep things simple, and in the case a phrase/term is not clear there's a pre-existing reference we can point people at for a precise, cross-platform definition.

> I doubt that there will be a significant number of users who would try to find 4 more key chords they can bind to those 4 new options. 

This is a good point.

> And I haven't used --query in such a way.

> Having said that, it was trivial to implement the option, but I haven't decided if it's essential to fzf, can you share your script that you're implementing using --query?

Here are the relevant bits (I've borrowed heavily from your excellent scripts); note this will only likely work on Unix systems:

<S_CODE_TOKEN>

I then trigger this with the binding:

<S_CODE_TOKEN>

Additionally I have the following environment variable set:

<S_CODE_TOKEN>

The idea is that, regardless of whether I'm in a git tree or not, `--query` is pre-populated to the directory of the file in the current window, relative to either its git root or the CWD of the neovim process. I find that more often than not I want to work with a file in the same directory (package), hence why this pre-population of `--query` is so useful. Less often I want to expand the search by going up a directory, hence why I need the equivalent of `filepath-backward-kill-element`",myitcv,2017-01-15 17:43:58
802,2017-01-15 10:42:47,"I see, thanks for the comment. That looks useful. On the second thought, I agree that `--filepath-word` is a better name.",junegunn,2017-01-15 17:43:58
802,2017-01-15 11:26:48,"Ok great.

Just to emphasise one important point here (apologies if this is already clear). Notice the trailing separator on the query string I start with: `""src/github.com/a/""`, but also the progression of values after `filepath-backward-kill-element` (using my terminology for clarity's sake) also have a trailing separator:

<S_CODE_TOKEN>

Reason being this disambiguates from any sibling directories of the new query string that may start with the same prefix, and guarantees that any further typing will match under the directory and not on the name of a sibling. By way of an example:

<S_CODE_TOKEN>

Then compare:

<S_CODE_TOKEN>

with:

<S_CODE_TOKEN>


",myitcv,2017-01-15 17:43:58
802,2017-01-15 11:48:38,"Yeah, the above implementation already handles that, just like the default backward-kill-word leaves the trailing white spaces.",junegunn,2017-01-15 17:43:58
802,2017-01-15 11:51:38,"👍 

Just seen the commit you've pushed up... I'm happy to help try this out: just let me know when I can switch to the `devel` branch",myitcv,2017-01-15 17:43:58
802,2017-01-15 17:47:33,Everything merged to master :),junegunn,2017-01-15 17:43:58
802,2017-01-15 18:09:09,@junegunn - brilliant. Working like a dream; thank you!,myitcv,2017-01-15 17:43:58
801,2017-01-12 21:29:37,"- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [x] Mac OS X
  - [x] Windows
  - [x] Windows Subsystem for Linux
  - [x] Etc.
- Shell
  - [x] bash
  - [x] zsh
  - [x] fish

Configure the repo so that the fzf binary can be installed in the usual way all other Go programs are, i.e. using `go get github.com/junegunn/fzf`.",nomad-software,2017-01-13 13:11:32
801,2017-01-13 13:11:32,It's already possible. `go get -u github.com/junegunn/fzf/src/fzf`,junegunn,2017-01-13 13:11:32
801,2017-01-13 13:46:45,<S_CODE_TOKEN>,nomad-software,2017-01-13 13:11:32
801,2017-01-13 14:14:01,You can't install ncurses using go get.,junegunn,2017-01-13 13:11:32
800,2017-01-12 17:41:55,"- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [?] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [ ] fish

I'm using 0.15.9.

When I run `vim term**<tab>`, I get entries in .hg and folders that are in `.hgignore`.  When I run fzf by itself, those ignored files are ignored given that `FZF_DEFAULT_COMMAND='ag -g """"'.  Seems as though the completion code uses find and doesn't utilize the FZF_DEFAULT_COMMAND environment variable, but I'd like it to.  Please advise.",cskeeters,2017-01-13 18:12:56
800,2017-01-13 18:12:56,"Because fuzzy completion for files can't use a single fixed command as it has to address base directory found in the completion prefix. So we use a function instead.

See https://github.com/junegunn/fzf#settings",junegunn,2017-01-13 18:12:56
800,2017-01-13 22:09:14,"Sorry, I missed that piece of the README.  That code meets my need.  Thanks!

I did some examination to see if `FZF_DEFAULT_COMMAND` could affect both `fzf` (used in stand alone mode) and for `**` completion.  I haven't given it much thought to other use cases, so it may not be worth implementing.  Still seemed worth posting, so I'll just through this out there.

If I'm understanding the issue, `FZF_DEFAULT_COMMAND` doesn't support allowing a directory to be substituted into the command, like `{}` in `find -exec` or `xargs -I {}`.  You have written a method `_fzf_compgen_path` that can be easily overridden to enable `$1` (the completion prefix directory) to be used in a custom command like `ag -g """" ""$1""`.

FZF_DEFAULT_COMMAND can be used and take advantage of the `$1` completion prefix if _fzf_compgen_path is defined as follows:

<S_CODE_TOKEN>

Then if `${FZF_BASE:-.}` can be used in FZF_DEFAULT_COMMAND to specify where the completion prefix directory goes in the custom command.

<S_CODE_TOKEN>

This shouldn't be limiting since `FZF_BASE` can be omitted from `FZF_DEFAULT_COMMAND` without issue.  Also, `fzf` can still be run as is in stand alone mode since an undefined FZF_BASE result in the default of `.`, or the current working directory.",cskeeters,2017-01-13 18:12:56
799,2017-01-10 22:50:39,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
Setting the environment variable `FZF_COMPLETION_OPT` to
<S_CODE_TOKEN>
leads to a fzf crash when `**` is expanded with `<Tab>`.
",IngoHeimbach,2017-01-13 17:37:51
799,2017-01-13 17:37:51,"Thanks for the report. The fix is pushed to devel branch. The branch will be merged to master in a few days.

However, setting `--preview` option in FZF_COMPLETION_OPTS may not be a good idea as completion works not only with files but with other types, any types of entities.",junegunn,2017-01-13 17:37:51
798,2017-01-10 04:35:29,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I was looking at the fzf shell function examples on this page:
https://github.com/junegunn/fzf/wiki/examples

I was trying to use the fdr() function:

    # fdr - cd to selected parent directory
    fdr() {
      local declare dirs=()
      get_parent_dirs() {
        if [[ -d ""${1}"" ]]; then dirs+=(""$1""); else return; fi
        if [[ ""${1}"" == '/' ]]; then
          for _dir in ""${dirs[@]}""; do echo $_dir; done
        else
          get_parent_dirs $(dirname ""$1"")
        fi
      }
      local DIR=$(get_parent_dirs $(realpath ""${1:-$(pwd)}"") | fzf-tmux --tac)
      cd ""$DIR""
    }

For some reason, this function freezes on `GNU bash, version 4.4.5(1)-release (x86_64-apple-darwin16.3.0)` installed through homebrew. It freezes on the fzf display - it shows the list of parent directories, but I can't type to search or ctrl+c to exit.

I narrowed it down and found out it was freezing on the line

    local DIR=$(get_parent_dirs $(realpath ""${1:-$(pwd)}"") | fzf-tmux --tac)

With some more testing, I simplified it and it still froze on

    echo $(echo $(realpath ""$(pwd)"") | fzf)

This would be an invalid command but it also freezes on

    $($(realpath ""$(pwd)"") | fzf)

Here's a gif of the problem:

<img src='http://i.imgur.com/xm615x4.gif' title='fzf issue' width='' alt='fzf issue' />

Once I get into the fzf screen, I can't ctrl+c, ctrl+z, type anything to search, or move up and down (if it had results). I have to kill the terminal tab to stop it.

Things that cause it **not** to freeze:

- Removing the outer `$()`
- Changing `fzf` to `cat`
- changing `$(pwd)` to `$PWD`
- changing `realpath` to `echo`

Things that still make it freeze:

- Change realpath to ls
- Change $(pwd) to $(echo $PWD)

It doesn't seem to freeze on the on the bash version that comes preinstalled on OS X `GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin16)`

It also doesn't freeze on the preinstalled zsh and ksh on OS X

zsh

    zsh 5.2 (x86_64-apple-darwin16.0)

ksh

    sh (AT&T Research) 93u+ 2012-08-01

I also compiled `bash 4.4.5(1)-release` on my own and it also freezes along with the homebrew one.

I'm not sure if this is a bash or fzf problem and I'm not sure what else I can do to debug.",dosentmatter,2017-01-10 17:17:28
798,2017-01-10 15:06:26,Thanks for the report. I can reproduce the problem on my machine as well. I'll look into it when I get some time.,junegunn,2017-01-10 17:17:28
798,2017-01-10 17:17:28,"Okay, I pushed the fix to devel branch. It will be included in the next release. The patch does not entirely fix the problem (the source of error is probably in bash), but it simply makes fzf quit when `/dev/tty` is hosed for some reason.

Thanks again for the detailed report!",junegunn,2017-01-10 17:17:28
798,2017-01-10 23:35:59,No problem. Thanks!,dosentmatter,2017-01-10 17:17:28
797,2017-01-09 14:38:42,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

-->

Fzf works perfectly in bash. I've setup using vim-plug as described here: https://github.com/junegunn/fzf.vim#installation, but nothing seems to happen when typing any of the commands.

For example, typing "":Files"" or "":FZF"" will do nothing, no errors, no indication of anything happening, However, I do have to type ""ctrl-c"" to return to normal mode. Would greatly appreciate any help, thanks!

",asilvadesigns,2017-01-12 18:15:23
797,2017-01-09 16:10:27,"Hmm, I'm not sure but it could be an issue of fzf-tmux script.
- Do you use tmux? 
- Does `:FZF!` work (command with exclamation mark)?",junegunn,2017-01-12 18:15:23
797,2017-01-09 16:50:25,"I had tmux installed, so I uninstalled and no changes.
`:FZF!` doesn't register anything.

I noticed this within bash, typing `FZF` does nothing, and typing `ctrl-c` exits the apparent operation. Again no errors or indication of problem.

However, in bash, using `ctrl-T`,  `ctrl-R`, or any of the hotkey commands works.
",asilvadesigns,2017-01-12 18:15:23
797,2017-01-09 17:01:03,"I see, which version of Vim do you have? (`:version`)",junegunn,2017-01-12 18:15:23
797,2017-01-09 17:07:45,"Here ya go:

<S_CODE_TOKEN>",asilvadesigns,2017-01-12 18:15:23
797,2017-01-09 17:19:45,"Ah, so it's Gvim. fzf is a command-line program so it works best with terminal Vim. On GVim, it has to start a terminal emulator window (xterm by default), and I'm not sure if you'll like the experience.

Probably `xterm` is not properly set up on your system. Try typing in `xterm` on shell.",junegunn,2017-01-12 18:15:23
797,2017-01-09 17:29:16,"ooh : ), no worries, I'd love to try it out.
yea definitely not setup properly, `xterm` does nothing, same as previous behavior, hangs until `ctrl-c`. I suppose I'll have to install that..",asilvadesigns,2017-01-12 18:15:23
797,2017-01-11 18:31:08,"so, that didn't work, that's fine. I've got it setup in terminal vim, and have this mapping in place: `nnoremap <c-p> :FZF<cr>` which does this, it doesn't load any results.
![screen shot 2017-01-11 at 1 24 32 pm](https://cloud.githubusercontent.com/assets/7071307/21861084/58926a02-d801-11e6-9cbe-27f007000db7.png)
also.. discovered an interesting issue which might reveal the real problem. In terminal, I can hit `ctrl-t` and fzf works perfectly, or any other shortcut and perfect. Typing in FZF, does this, same as the above, no results:
![screen shot 2017-01-11 at 1 24 32 pm](https://cloud.githubusercontent.com/assets/7071307/21861260/1d8ca516-d802-11e6-898a-6e257e82768d.png)


",asilvadesigns,2017-01-12 18:15:23
797,2017-01-12 04:08:18,Do you have set `$FZF_DEFAULT_COMMAND`?,junegunn,2017-01-12 18:15:23
797,2017-01-12 14:44:27,"It was not, I did `export FZF_DEFAULT_COMMAND='ag -g """"'`.
`printenv` shows it now. But still same result, `ctrl-t` and `ctrl-r` work beautifully, but `fzf` nothing. What command does `ctrl-t` call, maybe I can use that as default?

",asilvadesigns,2017-01-12 18:15:23
797,2017-01-12 16:53:10,"I didn't mean to suggest that you should set the variable. The problem is usually caused by an invalid command in it so I was trying to see if it was the case.

So if you set `export FZF_DEFAULT_COMMAND='seq 1000'`, do you see the numbers as expected?",junegunn,2017-01-12 18:15:23
797,2017-01-12 16:55:06,"Anyway the default command fzf uses when `$FZF_DEFAULT_COMMAND` is unset is

<S_CODE_TOKEN>

Does this command work correctly in your shell?",junegunn,2017-01-12 18:15:23
797,2017-01-12 17:12:07,"gotcha, when I set `export FZF_DEFAULT_COMMAND='seq 1000'`, check `printenv`, and do `fzf`, I see this:
![screen shot 2017-01-12 at 12 08 20 pm](https://cloud.githubusercontent.com/assets/7071307/21899873/e395fae2-d8bf-11e6-81cc-d5572ad2eb2c.png)

The command mentioned above, this one
`find . -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null | sed s/^..//`
works.
",asilvadesigns,2017-01-12 18:15:23
797,2017-01-12 17:14:13,"That's odd. What's in your `$SHELL`? Does `$SHELL -c ""seq 1000""` work?",junegunn,2017-01-12 18:15:23
797,2017-01-12 17:35:39,"You are awesome. I had a bad shell setup, `$SHELL` revealed bad install of bash, I must have caused it a while ago when I was messing with zsh and bash configs.

I reinstalled bash with homeberw and now works perfectly, thanks man!!!",asilvadesigns,2017-01-12 18:15:23
796,2017-01-09 02:58:25,"- Category
    - [ ] fzf binary
    - [x] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

Steps to reproduce:

1. Run fzf-tmux inside tmux
2. Kill appeared pane with running fzf (by default C-b x)

Expected: tmux pane is closed and fzf-tmux exits with code 130
Observed: tmux pane is closed but fzf-tmux hangs until I press Ctrl+C

After some debugging I figured out that fzf-tmux freezes on the very last line:
<S_CODE_TOKEN>

The script running inside tmux pane is generated on the fly with the following line:
<S_CODE_TOKEN>

Normally it runs fzf and then writes its exit code into `$fifo3`. After that fzf-tmux reads exit code from `$fifo3` and correctly terminates. But when user kills tmux pane, the entire script is aborted. As a result, `$fifo3` is never written and fzf-tmux stucks when trying to read exit code from `$fifo3`.

I've tried to fix the issue using `trap` to handle `SIGHUP` signal from tmux but unfortunately had no luck. The annoying thing is that Vim freezes too when killing tmux pane with fzf, or complains that fzf is already running with my asynchronous patch.",toiffel,
796,2017-01-10 02:16:41,"Thanks, I can confirm. But I can't seem to think of an easy way to solve this :(",junegunn,
795,2017-01-08 19:33:30,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Completion using ** does not work. 

.fzf.bash and the rest is getting sourced by my .bashrc. I verified that by including simple echo statements into .fzf.bash and .fzf/shell/completion.bash.

Manually sourcing .fzf.bash works. Sourcing it in my .profile does work but it shouldn't be there.

I am on the latest version of fzf fd137a9e875ba1fd9feed4903e102951f8098c33. It is installed by vim using vim-plug.

I found a related issue here: https://github.com/junegunn/fzf/issues/783 but the issue persists for me even when not loading git-completion. 


",Kareeeeem,2017-01-08 19:41:18
795,2017-01-08 19:41:02,"This ALWAYS happens to me.

right after I post this I figure out the problem.

for some reason 
<S_CODE_TOKEN>
was in my .profile instead of .bashrc. My profile sources bashrc and then sources completion ruining any type of completion sourced before it.

Now that bash_completion is sourced before any other type of completion in my bashrc it's all good.",Kareeeeem,2017-01-08 19:41:18
794,2017-01-07 17:30:55,"The biggest change is the addition of `--height` option (#782). Key bindings, fuzzy completion, and Vim plugin will use it instead of fzf-tmux by default.

- [x] `--height` (#782)
    - [ ] Make it work on Neovim terminal (blocker: https://github.com/neovim/neovim/issues/4151)
- [x] `--normalize` (#790)
- [x] 24-bit color support (#789) (TBD)
    - Can we completely remove ncurses renderer? No, we can't use the new renderer under Neovim terminal. We're going to keep the ncurses renderer for the time being.
- [ ] Cygwin support via `--height`. Is it possible?
    - Unfortunately, no. Although cygwin exposes `/dev/tty`, a compiled Go program does not see the abstraction. I also tried using [tcell library](https://github.com/gdamore/tcell/blob/master/console_win.go) to access native Windows API, but failed to make it work on Cygwin.",junegunn,2017-01-15 17:43:57
793,2017-01-06 22:21:03,"!!! DRAFT !!!

Similarly to Alt-c (*cd into directory*), Alt-o command opens up the FZF
file selector view and invokes the default associated application with
the selected file.

Current implementation is based on Alt-c functionality. It is tested on
freedesktop compliant linux system (Ubuntu 16.04) and opens the selected
entry with `xdg-open`. It implements configuration parameters of
FZF_ALT_O_OPTIONS and FZF_ALT_O_COMMAND.

TODOs:
* `/usr/bin/xdg-open` is hard-coded. Other platforms need different
  configuration
* automatic testing stub is empty.",kmARC,2017-01-07 13:13:11
793,2017-01-07 13:13:11,"Thanks for the suggestion. But I'm not interested in adding more key bindings to this repository to avoid increased maintenance burden. It has been already painful for me to make sure that those 3 key bindings work without issues across different environments. i.e. {CTRL-T, CTRL-R, ALT-C} x {bash3,bash3/vi,bash4,bash4/vi,zsh,fish,fish/vi} x {macOS, Linux}. Adding another key binding also means that we have to add one or two more configuration variables that has to be tested, documented, and maintained. I'd like to only focus on improving the core fzf binary. Extra key bindings and applications can be published on the wiki page, or in a blog post, or even provided as third-party projects.",junegunn,2017-01-07 13:13:11
793,2017-01-07 14:21:39,"Ah okay. Then I'll prepare an entry for the [Examples wiki page](https://github.com/junegunn/fzf/wiki/Examples), how about that?",kmARC,2017-01-07 13:13:11
793,2017-01-07 15:23:18,"Sure, the write permission to the wiki page is open to anyone.",junegunn,2017-01-07 13:13:11
792,2017-01-06 04:56:49,"Hi @junegunn,

This is a PR for accompanying issue #775. I've tried to make it the least invasive as possible. Basically it just adds a separate code path `s:execute_tmux_async` to run fzf-tmux asynchronously if Vim8 jobs or Neovim are available. `s:execute_tmux_async` is closely modeled after `s:execute_tmux` and `s:execute_term`.

Please check the commit message for more details.

Tested on both Linux and Mac using Vim 8.0.0086 and Neovim 0.1.7.",toiffel,2017-01-19 18:04:25
792,2017-01-07 16:34:49,"By the way, I'm working on non-fullscreen renderer (#782). When this lands, we can use it on Vim to display fzf in non-fullscreen mode without using tmux as follows:

<img width=""1280"" alt=""screen shot 2017-01-08 at 1 29 40 am"" src=""https://cloud.githubusercontent.com/assets/700826/21743296/82529d10-d542-11e6-8153-911c031c8c59.png"">

Then we probably don't need this extra code branch.",junegunn,2017-01-19 18:04:25
792,2017-01-09 03:12:01,"This non-fullscreen renderer looks awesome! :+1: I'll definitely give it a try later.

Anyway, I believe my PR won't harm as long as you keep maintaining tmux support in Vim plugin.",toiffel,2017-01-19 18:04:25
792,2017-01-09 16:21:30,"> I'll definitely give it a try later.

Please do. It's a non-trivial change and feedbacks are welcome. You can check out devel branch and run the install script to download the alpha binary.

> I believe my PR won't harm as long as you keep maintaining tmux support in Vim plugin.

Yeah, `--height` can only cover `down` layout. fzf-tmux is still needed for `up`/`left`/`right` options, though they are rarely used in practice. I'm a little concerned that we may have a bit too many ways to start fzf within Vim.",junegunn,2017-01-19 18:04:25
792,2017-01-19 18:04:25,"Tried the latest 0.16.1 on Linux/Mac and it works smoothly w/ or w/out tmux. I don't need to run fzf in tmux pane anymore. Thank you for the great job!

Created a minor issue #814. It can be easily fixed by using non-silent mapping but it could be a potential bug.

I think this PR can be closed now.",toiffel,2017-01-19 18:04:25
792,2017-01-20 01:44:08,Glad that you like the new option. Thanks for taking your time into this!,junegunn,2017-01-19 18:04:25
791,2017-01-05 10:43:07,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
What's the purpose of `known_hosts` in `_fzf_complete_ssh()`? 

When I use this completion func, I get hosts and a bunch of lines from `known_hosts`, that ruin all the beautiful picture.

By the way, telnet version does not use `known_hosts` and just outputs hosts.
",yevhen-m,2017-01-07 13:47:45
791,2017-01-07 01:33:36,I'm not sure what you mean. I like that it shows hostnames that I have ever connected to.,junegunn,2017-01-07 13:47:45
791,2017-01-07 10:20:01,I don't have hostnames in `known_hosts`.  I get `|1|...=|....=` useless entries from it into completion candidates.,yevhen-m,2017-01-07 13:47:45
791,2017-01-07 13:49:22,"Turned out we needed to filter out some entries in the file (reference: SSH_KNOWN_HOSTS FILE FORMAT section in `man sshd`). Let me know if you still see issues. Thanks.

",junegunn,2017-01-07 13:47:45
791,2017-01-07 13:54:43,"@junegunn now completions are fixed, but I get this after `**<tab>`
<S_CODE_TOKEN>",yevhen-m,2017-01-07 13:47:45
791,2017-01-07 15:22:21,"Hmm, I can't reproduce. Any idea why it is happening?",junegunn,2017-01-07 13:47:45
790,2017-01-05 02:16:58,"<!-- Check all that apply [x] -->
- Category:
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [x] matching algorithms
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

    > $ fzf --version
    > 0.15.9

I use `fzf` on my music collection. If I type `antonio jobim so danco samba` the top choice ends up being

<S_CODE_TOKEN>

Whereas it seems to me that this should be the one:

<S_CODE_TOKEN>",elvis-sik,2017-01-13 18:16:54
790,2017-01-05 02:37:40,Makes sense. I'll pay special attention to this because Jobim is great.,junegunn,2017-01-13 18:16:54
790,2017-01-13 18:16:54,"Fixed in devel branch (`--normalize` option) I'm planning to release a new version in a few days, but feel free to test the devel branch (check out the branch and run install script to download the binary) and let me know of any issues you notice. Thanks.",junegunn,2017-01-13 18:16:54
790,2017-01-15 04:23:20,I changed my mind. Normalization is enabled by default and one has to pass `--literal` to disable it.,junegunn,2017-01-13 18:16:54
789,2017-01-05 01:23:25,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [x] Windows
    - [x] Windows Subsystem for Linux
    - [x] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [x] fish

Would allow fzf.vim to properly display gui vim colorschemes.
",nhooyr,2017-01-23 16:49:23
789,2017-01-07 17:35:40,"This won't happen soon as ncurses does not support true colors. However, once #782 is merged, and the new renderer (which happens to support true colors) turns out to be stable and performant, we can consider replacing ncurses completely.",junegunn,2017-01-23 16:49:23
789,2017-01-09 17:23:21,"Experimental support for 24-bit colors in `--color` option is in https://github.com/junegunn/fzf/commit/ae274158de38181bca27f2ce54c8b4fc0b688eff. However, I'm running into https://github.com/neovim/neovim/issues/4151 when trying to start fzf with `--height` option within Neovim terminal. So I can't make Neovim plugin use the option at the moment.",junegunn,2017-01-23 16:49:23
789,2017-02-03 15:19:47,"So should this just work? Or is there something that needs to be done to enable true color for fzf? Because for me the colors look a bit off, even though I'm using true color.",ismay,2017-01-23 16:49:23
789,2017-02-03 17:02:15,"
1. Set up your vim or neovim to use true colors (`set termguicolors`).
2. Define `g:fzf_colors` to tell fzf to extract colors from the current color scheme. See https://github.com/junegunn/fzf/wiki/Configuring-Vim-plugin for an example

Related: https://github.com/junegunn/fzf/issues/818",junegunn,2017-01-23 16:49:23
789,2017-02-04 13:09:39,"Sorry, didn't mean in vim. What I meant is if I'm running a terminal emulator that supports true color and has it enabled correctly, will fzf automatically run in true color as well (in the terminal, not vim), or do I need to do anything extra to enable it for fzf?

But that might be a stupid question. ",ismay,2017-01-23 16:49:23
789,2017-02-04 13:26:56,"Yep. Colors are customizable via `--color`.

<S_CODE_TOKEN>",junegunn,2017-01-23 16:49:23
789,2017-02-04 13:46:10,"Cool, thanks!",ismay,2017-01-23 16:49:23
788,2017-01-04 14:08:53,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [x] Mac OS X
    - [x] Windows
    - [x] Windows Subsystem for Linux
    - [x] Etc.
- Shell
    - [x] bash
    - [x] zsh
    - [x] fish

When using fzf -m one can select multiple entries and they'll be passed as \n separated list as the output, however, the preview box can only access information to the current active entry rather than the full list of selected items using the {} placeholder.
Ideally there should be separate placeholder in the expression string that gives access to the full list of selected items, in the same format as they'd be passed normally to the output (\n separated strings)
",BrainDamage,2017-01-29 17:07:21
787,2017-01-04 01:49:07,"PR for the commit https://github.com/janlazo/fzf/commit/4572bdcf7d710d8dcc4460319c0ac0f0a1878216, referenced in #786, for the gui launcher on Windows

Tested on GVim 8 and Windows 8.1",janlazo,2017-01-04 05:07:02
787,2017-01-04 05:07:09,Thanks!,junegunn,2017-01-04 05:07:02
786,2017-01-01 04:58:54,"This is an update on my previous PR for Vim plugin on Windows #785.
This PR enables terminal Vim and Gvim to run fzf on filepaths with spaces.
It uses `noshellslash` on both `s:cmd()` and `fzf#run()`  for strict filename expansion on both.
It ensures that shellescape() works as expected for fzf.
For the launcher, the fzf command is double-quoted for cmd.exe. 

Tested on Windows 8.1, (g)vim 8, and Con Emu + Powershell (to run terminal vim).",janlazo,2017-01-01 17:20:01
786,2017-01-01 07:33:41,"Thanks for the follow-up. Can you elaborate on the reasoning behind the changes?

A few questions:

- You added `set shellslash` in the previous PR, but changed it to `noshellslash` here. Can you tell me why?
- Does `let escaped = '""'.(escaped).'""'` work when `escaped` contains double-quote characters?
- Do we need temporary switching of `shellslash` in `s:cmd` when it's already handled in `fzf#run()`?

It would be much helpful if you can give some examples, such as steps to verify the correctness of the implementation. Thanks.",junegunn,2017-01-01 17:20:01
786,2017-01-01 15:07:31,"We need `noshellslash` in `s:cmd` and `fzf#run` for consistency on shell escaping.
I use `shellslash` in my vim config so `shellescape()` behaved the same in `fzf#run` and `s:cmd()` but 
`noshellslash` is default even on Windows Vim.
Having temporary switches of `shellslash`  in `s:cmd` and `fzf#run` guarantees the behaviour.

Examples (with `set shellslash` in user config, not fzf vim plugin):
- `C:/ ` (working directory)
   - [X] FZF
   - [X] FZF Program\ Files/
   - [ ] FZF 'Program\ Files/'
   - [ ] FZF ""Program\ Files/""
- `C:/ Program\ Files/` (working directory)
   - [X] FZF
   - [X] FZF C:/Program\ Files/
   - [ ] FZF 'C:/Program\ Files/'
   - [ ] FZF ""C:/Program\ Files/""

`noshellslash` forces double-quoting shell arguments such that cmd.exe can read it
**In this PR, If `escaped` contains double-quote characters, the command breaks.**
Double-quoted shell arguments have to escaped by wrapping them in **single-quotes**
but the command to pass to cmd.exe has to be double-quoted.
The Windows launcher for fzf is 'cmd.exe /C %s'
The string specifier does not have to wrapped in double-quotes because it can work without it.

Examples:
- `C:/ ` (working directory)
  - [X] `cmd /C fzf`
  - [X] `cmd /C cmd /C cmd /C fzf`
  - [ ] `cmd /C 'fzf'`
  - [X] `cmd /C ""fzf""`
  - [ ] `cmd /C ""'fzf'""`
  - [X] `cmd /C ""cmd /C fzf""`
  - [X] `cmd /C ""cmd /C fzf --prompt '""C:/Program\ Files/""'`
  - [X] `cmd /C ""cmd /C fzf --prompt '""C:\Program Files\""'`
  
",janlazo,2017-01-01 17:20:01
786,2017-01-01 16:52:21,"Thanks for the explanation. Hmm, so whenever we use `shellescape` function to build command-line options for fzf, we have to guarantee that `shellslash` is unset, so that single-quotes are not used as they are not compatible with `cmd.exe`, right?

`:FZF` is just one command built with `fzf#run`. It's a bummer that one should be aware of the above fact whenever writing a function or a command based on `fzf#run`. I think it makes sense that we provide a helper function `fzf#shellescape` that can be used instead. Let me look into it.",junegunn,2017-01-01 17:20:01
786,2017-01-01 17:21:08,Squashed and merged your commits and slightly updated in 6c0fd7f. Let me know if you see any issues. Thanks.,junegunn,2017-01-01 17:20:01
786,2017-01-01 19:55:28,"cmd.exe internally uses single-quotes to escape commands so we have to resort to double-quotes
and escape the double-quotes if necessary.
<S_CODE_TOKEN>
Commit https://github.com/junegunn/fzf/commit/6c0fd7f9ca663f2057a114f1aa86bfe5f6a78c68 works for me on terminal Vim and GVim.
The last issue remaining for Windows filepaths w/ brackets such as `C:\Program Files(x86)`.
Terminal Vim is fine but GVim is not because of the `escaped` string to pass to the launcher.",janlazo,2017-01-01 17:20:01
786,2017-01-02 15:31:47,"I see, would it help to create a temporary batch file that contains the command and use it to avoid escaping issue?",junegunn,2017-01-01 17:20:01
786,2017-01-03 04:50:15,"Yes, but it's overkill for simple operations.

Instead, we can exploit a Windows behaviour shared by cmd.exe and powershell.exe so we don't have to run another process. Running either them outside of a terminal causes Windows to make a new terminal for them. Since launcher and the shell are both cmd.exe, we can do one of the following for `s:execute()`:

1. add another if condition on s:execute() to check if running on Windows Vim.
    if running Windows Vim, then `let command = escaped`
2. if running Windows GVim, then `let s:launcher = ""%s""` and do not modify `escaped` (remove elseif block)

Option 1 works for me in Gvim but Option 2 is more explicit and maintains the printf() usage for launchers.",janlazo,2017-01-01 17:20:01
786,2017-01-03 05:53:17,Code for Option 2 in Commit https://github.com/janlazo/fzf/commit/4572bdcf7d710d8dcc4460319c0ac0f0a1878216,janlazo,2017-01-01 17:20:01
786,2017-01-03 17:07:17,"@janlazo Thanks, the code looks good to me. Please send me a pull request.",junegunn,2017-01-01 17:20:01
785,2016-12-31 17:47:47,"When running Vim on Windows,
- use cmd.exe as launcher and shell
- enable shellslash within s:cmd()
- don't escape ' ' and '\\' for paths",janlazo,2017-01-01 02:48:16
785,2016-12-31 18:48:57,"Thanks. Let me review the commit. By the way, we don't use `l:` prefix for local variables. Can you remove the prefixes for consistency?",junegunn,2017-01-01 02:48:16
785,2016-12-31 18:51:38,"I haven't tried running Vim plugin for fzf on Windows (I personally don't use Windows), and never expected it to work correctly. Can you share your overall experience?",junegunn,2017-01-01 02:48:16
785,2016-12-31 19:43:22,"With this PR, it works on file paths if without spaces or not network drives (it breaks on `C:\` ).
It works fine if running fzf, via the Vim plugin, within the home directory (because of `~` expansion).
`:FZF` redraws the entire screen for cmd.exe to run fzf and it behaves as expected when selecting files/directories (even with spaces) to open.

To run terminal Vim, I use ConEmu with Powershell (to minimize file path issues).
I used cmd.exe in the PR because Powershell has long startup time.",janlazo,2017-01-01 02:48:16
785,2016-12-31 19:53:12,"For now, in this PR, `FZF` and `FZF!` commands behave the same on terminal Vim in Windows because I did not set the geometry for cmd.exe similar to the xterm_launcher.",janlazo,2017-01-01 02:48:16
785,2017-01-01 02:48:43,"Thanks for the explanation. Merged, thanks!",junegunn,2017-01-01 02:48:16
784,2016-12-30 16:21:00,,amosbird,2017-01-16 02:58:14
784,2016-12-30 16:30:44,"Thanks for the suggestion. Are ctrl-v and alt-v standard bindings in Emacs? If it's not the case, I don't want to provide those bindings by default. Instead, we add those actions, and let the users set up their own bindings using `--bind`.",junegunn,2017-01-16 02:58:14
784,2016-12-30 16:32:25,It's the default binding in emacs.,amosbird,2017-01-16 02:58:14
784,2016-12-30 16:40:16,"Half-page or whole-page? If those keys are for whole-page movement in Emacs, there's no reason we should bind them differently in fzf.",junegunn,2017-01-16 02:58:14
784,2016-12-30 16:47:37,"Oh, I remapped them a long time ago and it becomes my builtin default 😆 . My bad.",amosbird,2017-01-16 02:58:14
784,2016-12-31 04:42:00,"I see, then we can provide unbound `half-page-up` and `half-page-down` actions and let the users bind those actions to the keys of their choices via `$FZF_DEFAULT_OPTS`.",junegunn,2017-01-16 02:58:14
784,2017-01-08 10:06:34,updated.,amosbird,2017-01-16 02:58:14
784,2017-01-15 17:46:36,"Oops, I forgot to include this in the new release. I'll make sure it's included in the next version. Sorry for the delay.",junegunn,2017-01-16 02:58:14
784,2017-01-16 03:32:57,Released 0.16.1 with your patch. Thanks.,junegunn,2017-01-16 02:58:14
783,2016-12-29 16:03:42,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

fzf version:
<S_CODE_TOKEN>

tmux $TERM setting:
<S_CODE_TOKEN>

If I source git-completion, then the tab completion with '**' to trigger fzf file search doesn't work, but the git completions do work.

If I then source ~/.fzf.bash, then the '**' trigger for fzf file search works, but the git completions do not work.

I can toggle back and forth reproducing the same conditions.

Both fzf and git installed by homebrew.

<S_CODE_TOKEN>

Contents of ~/.fzf.bash
<S_CODE_TOKEN>
",brailsmt,2016-12-30 15:31:46
783,2016-12-29 16:57:59,"Thanks for the report. Can you check unsetting `_fzf_completion_loaded` fixes the issue? Like follows:

<S_CODE_TOKEN>

I'm not suggesting that you should do this, just trying to check if it's related to the problem.

IIRC, I added `_fzf_completion_loaded` to avoid re-evaluation of some not-so-trivial expressions, but I don't think it makes a significant difference, so I can consider removing it.",junegunn,2016-12-30 15:31:46
783,2016-12-29 17:25:34,"<S_CODE_TOKEN>

The '**' also worked correctly.  So this appears to alleviate whatever is going on.",brailsmt,2016-12-30 15:31:46
783,2016-12-30 15:32:11,Thanks for the confirmation. I just pushed the fix.,junegunn,2016-12-30 15:31:46
783,2016-12-30 16:06:41,Thank you for the quick response and fix!,brailsmt,2016-12-30 15:31:46
782,2016-12-29 14:39:36,"- Category
    - [x] fzf binary

## Summary

Add `--height HEIGHT[%]` option to display fzf window below the cursor instead of opening it in fullscreen using ncurses or tcell.

## Why?

fzf-tmux provides flexible, non-fullscreen layouts, but it requires tmux and the experience can be suboptimal on large screens, where the tmux pane serving fzf can be far away from the cursor.

## A few things to note

- Supports preview window and mouse.
- 24-bit colors. We're not constrained by the limitation of ncurses.
- Requires `/dev/tty`, `stty`, and `tput`.
- Not sure about Windows.

The new option can be applied to the key bindings and fuzzy completion with the following environment variables.

<S_CODE_TOKEN>

Or it can be globally applied via `$FZF_DEFAULT_OPTS`:

<S_CODE_TOKEN>

## Sample images

<img width=""1280"" alt=""fzf-height"" src=""https://cloud.githubusercontent.com/assets/700826/21546093/db47a20a-ce1f-11e6-92b1-bed3710dd616.png"">

<img width=""1280"" alt=""fzf-height-ctrl-r"" src=""https://cloud.githubusercontent.com/assets/700826/21546110/ec17df64-ce1f-11e6-813f-69edcfa5b202.png"">

<img width=""1280"" alt=""fzf-height-24bit"" src=""https://cloud.githubusercontent.com/assets/700826/21546114/f307352c-ce1f-11e6-95e7-c11cbe6dbeb7.png"">

## Issues

- Windows support
- Manual handling of escape sequences might bring back #661",junegunn,2017-01-15 17:44:09
782,2017-01-16 06:07:32,"I am using the latest version of fzf installed with homebrew, and it complains about 

unknown option: --height

I guess the binary is not up to date but this option is already added to the zsh binding file.

I think we should check the version in the zsh to avoid this problem (e.g. only add --height when the fzf version is newer than x.y.z)?",paulhybryant,2017-01-15 17:44:09
782,2017-01-16 06:09:08,@paulhybryant Rerun the install script to download the binary.,junegunn,2017-01-15 17:44:09
782,2017-01-16 06:14:05,"Thanks @junegunn for the quick reply. Not sure which install script you are referring to.

What I did is 
brew reinstall fzf

and the error is still there.
fzf --version shows 0.15.9",paulhybryant,2017-01-15 17:44:09
782,2017-01-16 06:17:37,"Looks like you're using the binary from homebrew, but scripts from manually cloned repo. If you installed fzf via homebrew, you should also use the scripts from the homebrew installation.

Anyway, I just opened a pull request on Homebrew, so the new version should be available shortly.

https://github.com/Homebrew/homebrew-core/pull/8955",junegunn,2017-01-15 17:44:09
782,2017-01-19 14:17:04,"Running `brew upgrade` after @junegunn's change got merged helped me with this, gj!",cbrwizard,2017-01-15 17:44:09
781,2016-12-29 08:06:44,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

Would you @junegunn like to make the <kbd>-L</kbd> as the default option of `find` at [src/constants_unix.go#L7](https://github.com/junegunn/fzf/blob/master/src/constants_unix.go#L7), so that fzf could list files within a unix symbolic link dir.

While the find command could be override by the `FZF_DEFAULT_COMMAND` environment, it will be of great convenience to make <kbd>-L</kbd> as default.

Thanks :smile: 


",lvht,2017-01-16 03:31:50
781,2016-12-29 09:07:40,"Sure, that makes sense. Thanks for the suggestion.",junegunn,2017-01-16 03:31:50
780,2016-12-29 01:20:56,"- Category
    - [X] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [X] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [X] fish

I added this to my `config.fish`:

<S_CODE_TOKEN>

When I try to use `fzf` the options appear to be ignored. If I manually add the args I get this:

<S_CODE_TOKEN>

It looks like this might be from ""options.go"" which looks for ""--preview="" but not ""--preview"". I'm not sure if that's related or helpful. ¯\\\_(ツ)\_/¯

If I manually type of that same bit (i.e. `fzf --preview ""begin....`) it works.

I'm running 0.15.9.

Thanks for fzf, it's great!",AaronLasseigne,2016-12-29 06:59:12
780,2016-12-29 06:59:12,"1. You need to export the variable (`-x`)
2. `eval ""fzf $FZF_DEFAULT_OPTS""`",junegunn,2016-12-29 06:59:12
779,2016-12-23 17:58:48,"This removes the need for the 'sed' call. Faster, cleaner.",Ambrevar,2016-12-24 03:53:08
779,2016-12-24 03:53:13,"Merged, thanks!",junegunn,2016-12-24 03:53:08
778,2016-12-23 07:29:09,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
Scrolling down with mouse wheel/touchoad does not work. Regardless of terminal emulator and use of tmux 
",Chrysostomus,
778,2016-12-23 17:03:14,Works for me. Please mark the check boxes.,junegunn,
778,2016-12-23 17:38:15,"I did already,  but they don't seem to be sticking. 

It is on manjaro linux, fzf-git from aur. Happens regardless of the shell or terminal emulator. ",Chrysostomus,
778,2016-12-30 15:34:20,I have no experience with Manjaro linux so I don't think I can be of help here. Let's hope someone with Manjaro experience chimes in.,junegunn,
778,2016-12-30 16:02:37,"I'm afraid that is me, since I was one to include in the repos from aur... 

This is the PKGBUILD of the package :
https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=fzf-git

Could this be an issue with ncurses? ",Chrysostomus,
778,2016-12-30 16:26:18,"Does mouse work in other terminal programs that support it, like tmux and vim?",junegunn,
778,2016-12-30 16:45:44,It does. ,Chrysostomus,
777,2016-12-21 16:44:51,"Hello: 
   I've being use it for a while and I like it. It's fast and works very well in neovim.
I'm wondering if you can add frequency support, with most used items at top.

Thanks in advance.",co-dh,2016-12-23 17:25:03
777,2016-12-23 17:25:03,"It's beyond the scope of the project. Some pointers:

- https://github.com/rupa/z
- https://github.com/clvv/fasd
- https://github.com/junegunn/fzf/wiki/Examples#z",junegunn,2016-12-23 17:25:03
776,2016-12-18 17:44:15,"With a `bufhidden=wipe` buffer (e.g. vim-startify) the buffer would not
exist anymore, resulting in an error.",blueyed,2016-12-18 17:51:19
776,2016-12-18 17:51:28,Makes sense. Thanks.,junegunn,2016-12-18 17:51:19
775,2016-12-17 09:57:50,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

Steps to reproduce:

1. Run Vim inside tmux
2. Run FZF
3. Switch back to Vim pane
4. Type any characters

Expected: Vim consumes typed characters as usual
Observed: Vim is blocked and typed characters are echoed on the screen until FZF is closed

![fzf](https://cloud.githubusercontent.com/assets/1043953/21285819/7a6e8b76-c46d-11e6-9523-8d8b069f10d1.png)

This issue per se is not so important but it causes another bugs: https://github.com/junegunn/fzf/issues/434, https://github.com/tmux-plugins/vim-tmux-focus-events/issues/2. With `set -g focus-events on` tmux sends FocusIn/FocusOut escape sequences (`<Esc>[I` and `<Esc>[O`) to Vim instance. But since Vim is blocked by FZF, these escape sequences are echoed on the screen as `^[[I` and `^[[O`.

By default, Neovim doesn't have such issues because FZF is running asynchronously in separate terminal. But in Vim FZF is invoked with blocking system() call.

https://github.com/junegunn/fzf/blob/master/plugin/fzf.vim#L395

Would it be possible to have the same asynchronous FZF behavior in Vim as well, e.g. by using Vim 8 job API?",toiffel,2017-01-19 18:05:10
775,2016-12-17 10:07:31,"I'm not sure if I want to rewrite Vim plugin to work in asynchronous manner, as it complicates the implementation without obvious benefit (and also because I don't use the tmux plugin). Have you tried the workaround suggested in https://github.com/tmux-plugins/vim-tmux-focus-events/issues/2#issuecomment-87863831?",junegunn,2017-01-19 18:05:10
775,2016-12-17 10:45:24,"Yes, I've tried this workaround but unfortunately it doesn't work for me. Once I open FZF, leftover characters begin to appear.

Another affected plugin is https://github.com/christoomey/vim-tmux-navigator. Again, navigation works fine until I open FZF. While it's opened, I can't switch from Vim to other panes using vim-tmux-navigator because Vim is blocked.

I could give async FZF invocation a try using Neovim implementation as an example. At first glance, it doesn't seem to be so hard. Can you please point me out any clues/caveats here?",toiffel,2017-01-19 18:05:10
774,2016-12-15 19:47:15,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [x] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Arch Linux leaves $MANPATH unset by default, so that `manpath` can find the man pages. Setting $MANPATH in the install script breaks bash completion, because $MANPATH just becomes `:${fzf_base}/man`. To fix this, I did:
<S_CODE_TOKEN>
&hellip;which is picked up by `manpath`. Now all that's needed is for the install script to have an option not to set $MANPATH.

I could submit a pull request, if you want.",mklein994,2016-12-17 02:21:15
774,2016-12-17 02:19:52,"Thanks for the report. I just realized that we don't even need to do anything, as man can figure out which path to look at if `fzf/bin` is inside $PATH.

> man looks at the PATH variable and adds the corresponding directories to the manual page file search path.

Even without $MANPATH, I can see that man succeeds to find the man page for fzf (`man -d fzf`).

<S_CODE_TOKEN>",junegunn,2016-12-17 02:21:15
774,2016-12-17 02:21:52,"Updated install script to generate fzf.{bash,zsh} without MANPATH update. Let me know if you still see any issues. Thanks!",junegunn,2016-12-17 02:21:15
773,2016-12-15 18:20:10,"- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

The example [pass] using the experimental API [_fzf_complete] doesn't work. It allows single autocompletion with fzf, but then falls back to the default autocompletion permanently. 

The reason for this behavior is the shell/completion.bash script that tries to source the script that's currently running not itself. The following patch fixes the problem:

<S_CODE_TOKEN>

However, it's not a pretty solution. I think fzf could set it's root directory as a hardcoded variable during installation. Or append env variable FZF_ROOT_DIR to .bashrc. 
",Mike-Now,
773,2016-12-17 01:57:55,"Hi, the example works fine for me. I'm not sure if I understood your description of the problem. Can you provide the exact steps to reproduce it? Or it just doesn't work for you?",junegunn,
773,2016-12-18 14:44:23,"In my dotfiles I source a file with completions like so:
`
source ~/.bash/completions
`
The example from wiki doesn't work when completions are sourced as a separate file from .bashrc.
It does work when the code is directly in the .bashrc.

The information that the completion function that uses `_fzf_complete` API should be in the file that eventually sources `~/.fzf.bash` could be added to the wiki.",Mike-Now,
772,2016-12-15 04:40:53,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
- OS
    - [x] Linux
- Shell
    - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

When calling fzf from a fish function that has some termination code, killing the terminal will reparent fzf and create a CPU hog. Very annoying :(
The bug is described extensively here: https://github.com/fish-shell/fish-shell/issues/3644.

According to some fish developers, all sides are to blame: fzf seems to ignore EOF when it reads from TTY. I haven't checked this for myself, but there might be something to investigate at least. Can you confirm?
",Ambrevar,2017-01-16 09:48:24
772,2017-01-16 09:48:24,"After further investigation (see the fish issue linked above), it seems that fzf is not involved here, but rather ncurses+glibc. The `--height option` makes this somewhat obsolete anyways. Closing.",Ambrevar,2017-01-16 09:48:24
772,2017-01-16 14:38:18,"Alright, thanks for the investigation.",junegunn,2017-01-16 09:48:24
771,2016-12-14 11:28:59,"This helps differentiating folders from files.

Besdies, writing a folder with an appended slash on the commandline is
usually what the user wants: the user can keep on completing/fzf-ing, it
saves one key stroke.",Ambrevar,2016-12-24 09:47:09
771,2016-12-15 16:59:48,"Thanks, but the failing test cases are actually failing (`ruby test/test_go.rb --name test_ctrl_t_unicode`). Looks like the new command changes the order of the output which makes `sed 1d` delete the wrong line.

<S_CODE_TOKEN>
",junegunn,2016-12-24 09:47:09
771,2016-12-16 05:09:35,"Same behaviour with GNU find. Bummer!

From my understanding, `find` is supposed to perform a breadth-first-search (unless the `-depth` flag is used) following the filesystem structure. From run to run it should be the consistent, independently of the output formatting. So the root should always be the first result when we print folders. I am not sure what is happening here, I may have misunderstood something. Let's investigate.",Ambrevar,2016-12-24 09:47:09
771,2016-12-16 05:24:37," OK, got it, that was quite obvious actually: I'm using the `+` argument, which means ""all folders"" here. So no folder (only files) gets printed till the search finishes, at which point the folder list gets passed to `printf`.

Easy fix: use `;` instead. This will spawn one printf per folder, maybe costly.
Other fix: filter out the root in the first place, so that the `sed` call isn't needed anymore.",Ambrevar,2016-12-24 09:47:09
771,2016-12-16 05:40:56,I believe I've fixed the issue with `-mindepth 1`.,Ambrevar,2016-12-24 09:47:09
771,2016-12-17 01:19:15,"Thanks for looking into it.

> So no folder (only files) gets printed till the search finishes

Hmm, I'm not sure if I like that aspect. I sometimes use CTRL-T just to see the structure of a repository and directories not showing up at the right place but at the end of the list doesn't feel ideal.

<img width=""1280"" alt=""screen shot 2016-12-17 at 10 08 44 am"" src=""https://cloud.githubusercontent.com/assets/700826/21283152/24f9001c-c441-11e6-98f2-014e00d6fd9d.png"">

In the above image, I prefer the output on the left. Alas, it would have been much simpler if macOS find supported `-printf`. If there's no simple way to have the right ordering, I would just suggest `-printf` option on the wiki page rather than changing the default.

By the way, `-mindepth 1` is nice whether or not we apply printf.",junegunn,2016-12-24 09:47:09
771,2016-12-21 06:08:01,"Absolutely.

Last question, benchmarking one: would executing a `printf` per folder be too costly? (The system command) I tend to think so. If not, that would be a solution.

Also keep in mind that the output order of `find` is not supposed to be reliable. That you get what you expect in the above picture is mostly because this is the most practical way to ""find"" on that filesystem. Some filesystems might return very different results. But I agree, it is _generally_ more intuitive that way than leaving the folder to the end.

Let me know about the benchmark. Either way, I'll submit the `-mindepth 1` patch.",Ambrevar,2016-12-24 09:47:09
771,2016-12-22 09:07:53,"Further thoughts: this whole issue could be superseded by an optional coloring feature akin to `ls` or `ranger`: each line would be colored according to which regexp it matches or something like that.

Folders would need a trailing slash for that to work though.
",Ambrevar,2016-12-24 09:47:09
771,2016-12-23 17:21:12,"Hmm, not looking good. It shouldn't be the default.

<S_CODE_TOKEN>",junegunn,2016-12-24 09:47:09
771,2016-12-23 18:00:03,I've PRed the `-mindepth` fix: #779. Feel free to close this PR when you've added the `printf` trick to the wiki.,Ambrevar,2016-12-24 09:47:09
771,2016-12-24 09:47:05,"Thanks. Hmm, the default CTRL-T command is quite lengthy, it doesn't feel so elegant to have to write down such a long, multi-line command just for a little tweak. As you have mentioned, it would be nice if there's a simpler tool that can be used as an alternative, with ANSI colors based on file extension, `/` for directories, etc. I'll update the wiki page when I find one.",junegunn,2016-12-24 09:47:09
770,2016-12-14 00:32:07,"<!-- Check all that apply [x] -->
- Category
    - [X] fzf binary
    - [ ] fzf-tmux script
    - [X] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [X] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [X] fish

All the bindings work as expected apart from Ctrl-T for file search which wraps the result in quotation marks.

I tried to add the ""-e"" flag to __fzfcmd.fish in .config/fish/functions but this did not help. Any ideas? Because the wrapping quotations are breaking the whole key bindings for me.

I installed fzf via homebrew and the fish fzf plugin using fisherman.",localhostport80,2017-02-09 16:52:20
770,2016-12-30 15:39:43,"As far as I know, it only wraps when the selected entry contains spaces or characters that need to be escaped. Are you saying that it wraps unconditionally?",junegunn,2017-02-09 16:52:20
769,2016-12-13 18:32:36,"- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

After invoking `:FZF` in neovim on ubuntu server, pressing enter on any file gives:

`E118: Too many arguments for function: 4`

This does not happen on my Arch Linux machine and as far as I can tell, I've copied the necessary configuration files over. I just set up this Ubuntu 16.04 VM yesterday so all packages are at the most recent on those repos.

",RatanRSur,2016-12-14 03:51:55
769,2016-12-13 19:59:37,"Are you using the latest version of fzf?
It seems that this problem is already solved https://github.com/junegunn/fzf/issues/765#issuecomment-266629073",deathmaz,2016-12-14 03:51:55
768,2016-12-13 12:15:17,"This is the case for very recent Neovim builds, but works with older versions
as well.

---

Explanation: https://github.com/neovim/neovim/wiki/Following-HEAD#20161212

Closes #765.",mhinz,2016-12-13 16:56:53
768,2016-12-13 16:57:00,Thanks!,junegunn,2016-12-13 16:56:53
767,2016-12-13 07:45:18,"This would help differentiating folders from files.

Besdies, writing a folder with an appended slash on the commandline is usually what the user wants: the user can keep on completing/fzf-ing, it saves one key stroke :)

Implementation is easy: replace `-o -type d -print` with `-o -type d -printf '%p/\n`.
",Ambrevar,2016-12-14 11:29:14
767,2016-12-13 16:55:17,"Makes sense, but the sad truth is find command of macOS does not support `-printf` :/",junegunn,2016-12-14 11:29:14
767,2016-12-13 17:14:07,"What about this then:

<S_CODE_TOKEN>

The `+` will make sure to spawn only one `printf`, so this shouldn't be any slower.
",Ambrevar,2016-12-14 11:29:14
767,2016-12-14 05:55:34,"Great, I like it 👍
You want to make a pull request? Or I can do that.",junegunn,2016-12-14 11:29:14
767,2016-12-14 06:16:12,"I can make a PR, but this will conflict with #759 . You should merge that one first.",Ambrevar,2016-12-14 11:29:14
767,2016-12-14 11:29:11,Done.,Ambrevar,2016-12-14 11:29:14
766,2016-12-13 07:04:42,What about adding the `select-1` and `exit-0` to the existing widget?,Ambrevar,2016-12-13 16:53:54
766,2016-12-13 16:49:28,"I can definitely see the appeal, but it can be confusing to the new users. I think it's enough that we suggest some good examples of `FZF_XXX_OPTS` in the wiki page.",junegunn,2016-12-13 16:53:54
766,2016-12-13 16:53:54,"Added a section to the page:

https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#using---select-1-andor---exit-0

Thanks for the nice suggestion.",junegunn,2016-12-13 16:53:54
765,2016-12-12 22:37:30,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [X ] Neovim
    - [ ] Etc.
- OS
    - [ X] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [X ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Just upgraded to newest version of neovim. Now when I reload and open fzf, I am getting error about unsupported key: options

Thoughts?


![image](https://cloud.githubusercontent.com/assets/655716/21119634/7b2a618c-c091-11e6-8617-5e80b3b27cd7.png)

",jrock2004,2016-12-13 16:56:53
765,2016-12-13 03:29:10,"This should fix it:

<S_CODE_TOKEN>",mhinz,2016-12-13 16:56:53
765,2016-12-13 03:39:14,"Thanks @mhinz, but I'm still seeing errors with the patch :/",junegunn,2016-12-13 16:56:53
765,2016-12-13 13:09:19,`on_exit()` needs 3 arguments.,justinmk,2016-12-13 16:56:53
765,2016-12-13 14:49:00,I'm seeing the same errors with latest HEAD neovim and fzf,gavsim,2016-12-13 16:56:53
765,2017-01-24 18:04:16,"@justinmk is right, adding a param to `on_exit` fixes things

<S_CODE_TOKEN>",supermarin,2016-12-13 16:56:53
764,2016-12-10 19:17:32,"I wish I could write `ivy` counsel mode for `fzf` in emacs, because term support in emacs is horroble so everything is messed up in output. Is there any way to run fzf as a daemon and send commands to it, so it will give away list of founds in some kind of format?
Or maybe you know other projects that make workaround for that, I saw you made vim plugin for fzf, I know nothing aboud VimL, can you explain please how it works there, you dumping output to some temporary file?
",sandric,2017-01-26 09:44:05
764,2016-12-11 12:22:05,"To answer the question, no. Have you checked https://github.com/bling/fzf.el ?",junegunn,2017-01-26 09:44:05
764,2016-12-11 16:49:47,"Yes, I'm actually used it, but soon my own config overgrowth this wrapper, so I wrote my own wrapper for it. I was thinking about using the same way as ivy uses ag command with wrapper but haven't succeed - I know little about shell programming, but suggest its because ag prints strictly to console while fzf have much more complicated rendering logic.",sandric,2017-01-26 09:44:05
764,2017-01-26 17:33:42,+1 to this. Decoupling the search/sorting from the UI frontend would let this be useable on Emacs. fzf.el isn't great since it has to use the term support.,jojojames,2017-01-26 09:44:05
763,2016-12-09 10:50:50,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I have a number of branches from an SVN repository checked out. Sometimes I need to compare files from different versions, but frustratingly `fzf` reindexes every time when I use the Ctrl+T shortcut. I may also be doing something wrong here, but I've tried searching zsh/fzf caching/indexing but have found nothing.",madstanners,2016-12-10 03:41:42
763,2016-12-10 03:41:15,"fzf is a filter (think of it as an interactive version of grep) and is not responsible for indexing the file system. It's beyond the scope of this project. For CTRL-T, it simply reads the output of the command specified in `FZF_CTRL_T_COMMAND` which defaults to [a find command](https://github.com/junegunn/fzf/blob/16b5902aa278639fd99be89abe8ac50eb49b34aa/shell/key-bindings.zsh#L7-L10).

Set `FZF_CTRL_T_COMMAND` to a smarter command that caches the result.",junegunn,2016-12-10 03:41:42
762,2016-12-08 19:02:11,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

In fish, when I install fzf it doesn't automatically enable the key bindings. Each time I start a new shell I have to run `fzf_key_bindings` in order to register them. Not sure if this is an issue with fish or fzf, but any idea what the solution is? `fzf_key_bindings` is in my `~/.config/fish/functions/fish_user_key_bindings.fish` script, so not sure what's going on.
",kyleholzinger,2016-12-08 19:07:11
762,2016-12-08 19:07:11,"Nvm, I'm a dumb dumb. Defined the function `fish_user_key_bindings` elsewhere so it was calling the wrong one.",kyleholzinger,2016-12-08 19:07:11
762,2017-01-14 21:08:55,I have a similar problem. What solution did you find?,HolyGrace,2016-12-08 19:07:11
762,2017-01-14 21:34:21,I deleted my definition of `fish_user_key_bindings` lol @HolyGrace ,kyleholzinger,2016-12-08 19:07:11
761,2016-12-08 01:40:13,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

When I try to run :FZF in vim in either iterm2 or terminal, it opens the window, however it shows 0 files, when there are files. Running fzf in those same terminals, outside if vim works fine. I can't seem to find a solution for this. I use same setup on my arch linux desktop and it works fine. ",brentluna,2016-12-26 03:53:33
761,2016-12-08 13:30:35,Can you present a minimal Vim configuration file that can be used to reproduce the problem?,junegunn,2016-12-26 03:53:33
761,2016-12-08 17:11:47,"I ended up fixing it, by deleting my .vim folder and reinstalling everything. I was syncing the .vim folder via github, so maybe something was installed OS specific and caused an issue? Anyways, I added .vim to my .gitignore, so hopefully won't be an issue again. ",brentluna,2016-12-26 03:53:33
760,2016-12-07 10:56:45,"It would be great to have fzf completion for docker. For example `docker run **<TAB>` – fzf prompt populated from `docker images` command, `docker exec **<TAB>` analogously to previous case but with content from `docker ps`, etc. There are more command that could be completed (like `docker save`, `docker kill` and more), but I would like to know if you are interested in adding such functionality to fzf in first place. Thanks.",fenuks,2016-12-08 13:38:08
760,2016-12-08 13:37:07,"Thanks for the suggestion, but I'm not interested in extending the scope of the shell extension included in this repository not to increase maintenance burden.

Extra completion functions can go to the wiki page or can be provided as separate, third-party repositories.

Please refer to https://github.com/junegunn/fzf/wiki/Examples-(completion) for custom completion functions.",junegunn,2016-12-08 13:38:08
760,2017-02-09 13:32:56,"@fenuks I made a small example working with Docker and fzf:

<S_CODE_TOKEN>

Basically you can completion with this commands:
<S_CODE_TOKEN>

Those are the ones I use every day, you can add more.
Hope you find it useful.",calbertts,2016-12-08 13:38:08
759,2016-12-05 12:31:42,"Replace the ""temp file"" workaround with the ""read"" function: it's
simpler and faster.

Use proper escaping, remove the custom function.

The ""file"" widget uses last token as root for the ""find"" command.
This replaces the equivalent of '**' completion in bash/zsh.
The ""$cwd"" non-expanded variable can be used in FZF_CTRL_T_COMMAND to
set the root.

This closes #443, #484, #486 and #747.
",Ambrevar,2016-12-14 06:37:27
759,2016-12-05 13:02:06,"CTRL_T test is failing. Could it come from that my patch uses the last token as root folder for find?
I've made this change to fill the lack of support for '**'.
",Ambrevar,2016-12-14 06:37:27
759,2016-12-05 16:06:40,Thanks for the follow-up. I'll review the code and get back to you.,junegunn,2016-12-14 06:37:27
759,2016-12-08 04:06:51,"The test passes locally, but I noticed that I had to upgrade my fish (from 2.2.0 to 2.4.0) to make it work. Its probably related. Let me check.

UPDATE:

Hmm, no. That was not the case. fish 2.4.0 is installed on Travis CI environment.

<S_CODE_TOKEN>",junegunn,2016-12-14 06:37:27
759,2016-12-08 04:17:25,"The test passed on the second run. Sorry for the confusion. Some test cases are based on timeout so they are known to be flaky on Travis CI environment.

Can you respond to the comment I left above? I'll merge this after we address the issue. Thanks.",junegunn,2016-12-14 06:37:27
759,2016-12-10 06:21:43,"Agreed. I've rebased the change accordingly.
Thanks for the feedback!",Ambrevar,2016-12-14 06:37:27
759,2016-12-10 06:29:59,"Talking tests, I'm having a hard time running them / understanding them. A few questions:

- Would the timeout thing be an issue on a very slow computer?
- Is there any documentation? Might be a stupid question, but I don't know Ruby at all.
- Any plan for a full switch to Go? That might simplify the whole suite.
",Ambrevar,2016-12-14 06:37:27
759,2016-12-10 07:16:52,"> Would the timeout thing be an issue on a very slow computer?

The test script sends keystrokes to a tmux pane running fzf and waits for the expected output to appear on the pane. So yeah, it's possible. There can be other factors that might be causing flakiness of the tests. I've been trying to make the tests more robust (e.g. making sure that the driver sends keystrokes when the target pane is ready), and they almost always work fine on my machine, but I'm still seeing some issues on Travis CI from time to time. Interestingly, most failures come from the test cases for fish, so I vaguely suspected that it's partly related to the way fish behaves, like unreliable consumption of keystrokes. Maybe or maybe not.

> Is there any documentation? 

Briefly described in https://github.com/junegunn/fzf/tree/master/src#test, but `ruby test/test_go.rb`is all you need to know to run the suite (for a single test `ruby test/test_go.rb --name test_ctrl_t`). Make sure to run it while you're on tmux.

> Any plan for a full switch to Go? That might simplify the whole suite.

Go tends to be much more verbose than Ruby, so I don't want to bother rewriting the existing test cases in Go.


Anyway, thanks for the update. A minor issue I see is that if I press CTRL-T after a path ending with `/`, the entries in the list have double slashes.

<S_CODE_TOKEN>

Do you think it makes sense that we trim the extra slashes? (FYI https://github.com/junegunn/fzf/blob/16b5902aa278639fd99be89abe8ac50eb49b34aa/shell/completion.bash#L134)",junegunn,2016-12-14 06:37:27
759,2016-12-10 07:19:12,Actually I've noticed that the `sed` suggestion is implemented in zsh/bash as a `cut -b3-` which spawns one more process compared to the `sed` solution. I'll fix that for all implementations at once.,Ambrevar,2016-12-14 06:37:27
759,2016-12-10 07:22:22,"Regarding the double-slash issue, I cannot reproduce... ? Let me investigate.",Ambrevar,2016-12-14 06:37:27
759,2016-12-10 07:24:52,"<img width=""682"" alt=""screen shot 2016-12-10 at 4 24 25 pm"" src=""https://cloud.githubusercontent.com/assets/700826/21071953/285ebba8-bef5-11e6-8420-fb47d8ad80ec.png"">

This is what it looks like.",junegunn,2016-12-14 06:37:27
759,2016-12-10 07:46:32,"I'm going to revert the `sed` change: the leading `./` should remain to let the user know which root was used in `find`. If the root is not a 1 letter folder, its name gets trimmed. I'll add a comment to make this clear.",Ambrevar,2016-12-14 06:37:27
759,2016-12-10 07:58:45,Still can't reproduce the double-slash issue after investigation. What's in your CTRL_T_COMMAND?,Ambrevar,2016-12-14 06:37:27
759,2016-12-10 08:21:49,"> What's in your CTRL_T_COMMAND?

It's not set.

> the leading ./ should remain to let the user know which root was used in find. If the root is not a 1 letter folder, its name gets trimmed. 

Hmm, I don't understand the problem you describe. The updated sed command only removes leading `./` not anything else.
",junegunn,2016-12-14 06:37:27
759,2016-12-10 09:58:45,"Sorry, I mixed up my own words.

1. The `sed` command is correct. I was wondering if it would not be confusing, but after second thought, I think it yields the better output.

2. `./` is cut with `cut -b3-` in other widgets and in bash/zsh. When piped over a `sed`, it spawns an additional process that could have been spared. I suggest we replace all the `sed 1d | cut -b3-` with `sed '1d; s#^\./##'`. Can do it later though.
",Ambrevar,2016-12-14 06:37:27
759,2016-12-12 11:07:21,"I've just pushed the changes and updated README+comments.
",Ambrevar,2016-12-14 06:37:27
759,2016-12-12 11:25:11,"FYI, I realized that GNU find automatically removes the trailing slash if there is only one, not if there is more than 1. So `find shell//` would result in duplicated slashes as well.",Ambrevar,2016-12-14 06:37:27
759,2016-12-14 06:38:13,"Merged, thanks for your patience and persistence!",junegunn,2016-12-14 06:37:27
759,2017-01-03 13:30:30,"hmm, does this PR achieve what #484 needs? I'm trying to use `fish/z` plus `fzf` via fuzzy completion triggering. I still can't see a way to do it.",amosbird,2016-12-14 06:37:27
759,2017-01-03 15:44:51,"Not sure I quite understand your scenario.
Say you want to list files under foo/bar, just press the file-widget binding after you've written `foo/bar`. Note that the directory at point _must_ exist.",Ambrevar,2016-12-14 06:37:27
759,2017-01-03 16:15:08,"well, this isn't about file-widget IMO. Say I want to invoke `fzf` like this `kill <Tab>`",amosbird,2016-12-14 06:37:27
759,2017-01-03 16:20:49,"That's command completion, not file completion, or is it?
You'll find a completion widget here:
https://github.com/junegunn/fzf/wiki/Examples-(fish)

It works well except for variable expansion and a few other edge cases. That's a fish bug that will hopefully get fixed one day.
https://github.com/fish-shell/fish-shell/issues/3469",Ambrevar,2016-12-14 06:37:27
759,2017-01-03 16:36:15,"cool, thank you.",amosbird,2016-12-14 06:37:27
759,2017-02-14 16:45:55,"Using the typed path as a root for a Ctrl-T search is really a great feature.
Would it be possible to have the very same feature for the cd-widget i.e. if I type `./foo/` and then alt-c, I would fzf folders `./foo/*`?",hrouault,2016-12-14 06:37:27
759,2017-02-15 14:39:42,I like the idea. I'll submit a PR.,Ambrevar,2016-12-14 06:37:27
759,2017-02-16 08:32:17,"Thinking about it, what would be the use case?
Does it allow anything more than

    $ ./foo/<ENTER>
    $ <ALT-C>

?",Ambrevar,2016-12-14 06:37:27
759,2017-02-16 14:16:16,"It is often that I need to complete arguments that I know are folders. Then, I do not want to change to that folder.",hrouault,2016-12-14 06:37:27
759,2017-02-16 14:33:11,"Alt-C is bound to fzf-cd-widget: it is meant for changing directory, not completing them. I think your suggestion would deviate too much from the original intention.

You can easily implement that yourself in your configuration:
- Copy `fzf-file-widget` to a `file-folder-widget` in your fish configuration.
- Modify the new widget to keep folders only.
- Bind the widget to your favorite shortcut.
",Ambrevar,2016-12-14 06:37:27
759,2017-02-16 14:36:04,It makes sense. Thank you.,hrouault,2016-12-14 06:37:27
758,2016-12-05 11:53:06,"Linux, bash

Provide optional flag for `install` script, so all the defaults would be selected. This way it'd be easier to install it by custom scripts that shouldn't depend on user interaction.
",laur89,2016-12-05 12:17:18
758,2016-12-05 12:14:58,"Already possible. To answer ""yes"" to all prompts:

    yes | ~/.fzf/install

or to answer ""no"" to all prompts:

    yes n | ~/.fzf/install",justinmk,2016-12-05 12:17:18
758,2016-12-05 12:17:18,So that's what `yes` is for. Cheers.,laur89,2016-12-05 12:17:18
758,2016-12-05 12:52:23,"Thanks @justinmk.

You also can use `./install --all`.

<S_CODE_TOKEN>

`./install --bin` is another useful option for those who don't want the extra stuff.",junegunn,2016-12-05 12:17:18
757,2016-12-03 19:52:02,"This modifies the bash fzf bindings so that the C-r binding remebers the
text previously typed into the prompt. This should close #731 and #432.",acornejo,2016-12-04 20:40:14
756,2016-12-03 06:13:19,"fzf performs line wrap on long lines on its preview window. Sometimes this is not desirable, while I can try to fix this using cut and other bash utilities, it makes all the scripts unnecessarily complicated.

It would be great if fzf supported an option to truncate long lines on the preview window.",acornejo,2016-12-04 17:15:36
756,2016-12-03 16:18:45,"> to fix this using cut and other bash utilities

Usually I would suggest the approach but I can understand the pain in this case. It's not easy to know the exact width of the preview window from the script. I think we can consider extending `--preview-window` to take `:nowrap` (or `:truncate`) suffix. `--preview-window right:60%:nowrap`.",junegunn,2016-12-04 17:15:36
756,2016-12-03 17:44:23,"Thanks. nowrap option sounds good. I would actually even consider doing the opposite, i.e. make nowrap the default and add a wrap behavior. I am willing to bet most people that use fzf are looking at source code, and for source code preview line wrapping is almost always NOT what you want.

Do you want a PR for this feature, or do you already have an idea of how to implement this.",acornejo,2016-12-04 17:15:36
756,2016-12-04 08:53:19,I'll look into it when I get some time. Thanks. I'll also think about changing the default.,junegunn,2016-12-04 17:15:36
756,2016-12-04 17:24:42,"Pushed to master. Now, one has to add `[:]wrap` to `--preview-window` to make fzf wrap long lines in the preview window (e.g. `--preview-window down:wrap`, `--preview-window wrap`, etc). Let me know if you see any issues with the change.

Hmm, I need to fix linux build.",junegunn,2016-12-04 17:15:36
756,2017-01-20 14:40:55,I'm using the current version of fzf and on Linux lines are still wrapped in the preview window. Is that a known issue?,IngoHeimbach,2016-12-04 17:15:36
756,2017-01-20 16:12:40,"defintely not a known issue: preview wrap works well and is even enabled by default.

I just confirmed it by running the following:

<S_CODE_TOKEN>

Please try running `fzf --version` to confirm you are indeed running the latest. Also try the example I pasted and see if you see a single line in the preview window or multiple lines.

If your problem indeed persist, I would suggest checking the COLUMNS and LINES environment variable, as well as reporting the terminal emulator that you are using.",acornejo,2016-12-04 17:15:36
756,2017-01-20 16:24:34,"Sorry, my fault, I was running fzf 0.15.9. On my system, fzf is updated by my vim plugin manager and since I made some changes to `shell/key-bindings.zsh` the plugin manager was not able to pull the latest release. On 0.16.1 nowrap works without any problems, thanks!",IngoHeimbach,2016-12-04 17:15:36
755,2016-12-02 08:29:28,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->


- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

It would be really cool if the fzf completion fzf-file-widget could take the current word at the cursor as a path for where __fsel should operate. That means essentially to root the find operation not in cwd, but in the path of choice.

That way I could do like:
  <S_CODE_TOKEN> less /usr/local/share/doc/ CTRL-T { fzf starts listing files down in /usr/local/share/doc/ } 
  
",quite,2016-12-02 16:17:09
755,2016-12-02 15:50:25,"You can do that with fuzzy completion: `less /usr/local/share/doc/**<tab>`. And since you use zsh, you can configure CTRL-T as the completion trigger key. See https://github.com/junegunn/fzf/wiki/Configuring-fuzzy-completion#zsh",junegunn,2016-12-02 16:17:09
754,2016-12-02 06:37:24,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

In Vim, my fzf prompt looks like this:

<img width=""722"" alt=""screen shot 2016-12-01 at 11 30 17 pm"" src=""https://cloud.githubusercontent.com/assets/110935/20825076/dcb9b428-b81e-11e6-8915-ba9ed94394f0.png"">

In the fish shell, however, it looks like this:

<img width=""712"" alt=""screen shot 2016-12-01 at 11 35 51 pm"" src=""https://cloud.githubusercontent.com/assets/110935/20825092/fe28379c-b81e-11e6-9dd4-a05a40b6502f.png"">

What have I done to mess up my prompt in Vim?

Thanks for any help – I love FZF!",kendagriff,2016-12-14 14:06:26
754,2016-12-02 16:23:06,"> What have I done to mess up my prompt in Vim?

It's intentional.`:FZF` (or `:Files` command from fzf.vim project) can be started with an optional path argument (e.g. `:FZF ~/Downloads`) and the files are listed relative to the directory, so the prompt shows which directory fzf is currently looking at. I personally like it better than just `>` because it gives the context of the search. The prompt of FZF command is not currently configurable, but that of (almost equivalent) Files command (from fzf.vim) can be redefined using `fzf#vim#files` function.

I just updated the Vim plugin to further shorten the path in the prompt. `/U/k/...` will be shown as `~/...`. ",junegunn,2016-12-14 14:06:26
754,2016-12-02 16:27:40,"K, thanks, glad to hear it's set up correctly.

Admittedly, I liked it better as it was. When I'm in Vim, I'm already aware of the parent search directory, and prefer less noise.",kendagriff,2016-12-14 14:06:26
754,2016-12-14 13:36:53,"@junegunn I'm not sure how to redefine `fzf#vim#files` as it calls `s:fzf`.

I too would love to see a cleaner interface. Replacing the vim prompt with a single character (e.g. `/`) would be a great option to have. The ability to remove the red pointer and grey line on the left side, and  the file count (`202/202`) would also nice.

Aesthetics complaints aside though, fzf is really impressive!",net,2016-12-14 14:06:26
754,2016-12-14 14:06:26,"Since the original question is answered, I'll close the issue.

@net Using it, not redefining it like so:

<S_CODE_TOKEN>

I'll think about your suggestions, but note that I've been conservative on adding more options. I'll link my previous comment on that issue here: https://github.com/junegunn/fzf/issues/692",junegunn,2016-12-14 14:06:26
754,2016-12-15 04:32:47,"@junegunn I understand your concerns, but Vim is by nature highly customizable. It should follow that its plugins be the same. My Vim, as is many other's, is set up to have a specific look. Fzf.vim is the best fuzzy finder available, but its visual complexity clashes with my Vim's style.

I know that fzf is not just a Vim plugin; the same argument follows for bash/zsh. I have no doubts that more visual customization options would be greatly welcome and widely used by many—if not most—of fzf's users.",net,2016-12-14 14:06:26
754,2016-12-15 05:33:06,@net you can customize the colors -- make them the same as your background color and they're essentially hidden,davidosomething,2016-12-14 14:06:26
754,2016-12-15 05:39:00,"@davidosomething I tried that with no success. I was able to hide the grey background highlight and line by enabling `--color 16`, but I have been unsuccessful in hiding the red `>`. Even so, the file list would then appear arbitrarily indented, which is not ideal.",net,2016-12-14 14:06:26
754,2016-12-15 12:13:28,"> Vim is by nature highly customizable

Well, I don't agree that it is so regarding its presentation style. What else can you do except the colors and the status line? You can't change the tilde characters beyond the end of a file, you can't change the margin between the line numbers and the text area, you can't change the height of the statusline and the tabline, you can't change the width of sign column, no configurable margins and paddings, to name a few.

Anyway for now, you might want to try the following options.

<S_CODE_TOKEN>",junegunn,2016-12-14 14:06:26
754,2016-12-15 13:07:24,"That worked pretty well, thanks! It's not perfect, since my terminal is slightly transparent, but it's good enough.

I guess you're right about Vim. I never wanted to changes those things, so I never knew you couldn't. I made assumptions from the variety of plugins available.

Thanks again for the help! 😄",net,2016-12-14 14:06:26
753,2016-12-01 23:41:43,"Navigate straight into next directory with ALT-SHIFT-C. No need for <S_CODE_TOKEN> anymore!
  
Note that it also contains ALT bindkey fixes (inclduing ALT-C)  to support OSX",yannvr,2016-12-02 03:47:56
753,2016-12-02 03:47:56,"Thanks, but I decided not to add more key bindings to this repo due to maintenance burden. If I decided to add a key binding, I have to make sure that the same key works consistently across all three supported shells (bash, zsh, and fish) and then add more configuration variables for the new key binding, such as `$FZF_ALT_C1_OPTS`, `$FZF_ALT_C1_COMMAND` also with test cases for different set of options. That's already a lot of work and once added, there's no going back. I'll have to maintain those new features forever unless we decide to break backward compatibility at some point.

You know that you can simply set up `$FZF_ALT_C_COMMAND` to customize the default behavior of ALT-C, right? Well, the obvious downside of the approach is that you can't easily switch between the two behaviors.

So you can define a wrapper widget that reuses the code of fzf-cd-widget.

<S_CODE_TOKEN>

Regarding `bindkey 'ç' fzf-cd-widget` thing, many users including myself configure iterm2 to make option key send escape sequence. See https://www.iterm2.com/faq.html",junegunn,2016-12-02 03:47:56
752,2016-12-01 22:15:32,"- Category
    - [x] Key bindings
    - [x] Completion

- OS
    - [x] Linux
    - [x] Mac OS X
- Shell
    - [x] zsh

Is there a way to limit fzf-cd-widget to a depth of 1? 
like so: <S_CODE_TOKEN>

That would be very useful to navigate.
Thanks!",yannvr,2016-12-01 23:43:53
752,2016-12-01 22:31:09,"ok I made a new widget to be in <S_CODE_TOKEN>

I think it's a useful feature, do you want me to make a PR?

<S_CODE_TOKEN> ",yannvr,2016-12-01 23:43:53
752,2016-12-01 23:43:53,I've created a PR for the ALT-SHIFT-C key binding for ZSH https://github.com/junegunn/fzf/pull/753,yannvr,2016-12-01 23:43:53
751,2016-11-30 04:46:05,"- Category
    - [X] fzf binary
- OS
    - [X] Linux
- Shell
    - [X] bash

I've used `fzf` and `fzf.vim` and they are great! `Ag` command in `fzf.vim` will allows us to:

1. `:Ag <pattern>` will return the search result and pipe it to `fzf`
2. `fzf` will allows us to narrow down the above result to get what we want.

However, in `ag`'s case, more often, we may want to change the `<pattern>` dynamically instead of changing the query to narrow down the result of a specific `<pattern>`. I'll give an image as example of this:

![interactive mode example](https://cloud.githubusercontent.com/assets/1527040/16977634/e03c9484-4e89-11e6-8255-69394964cb90.gif)

[skim](https://github.com/lotabout/skim) is a rust version of fzf, which provides an ""interactive"" mode to dynamically invoke the commands.

I understand the role of `fzf` is a general purpose ""filter"", and the above feature may be far from what `fzf` tries to be. Though as an end-user, I'd really like `fzf` to have this feature. Please consider about it, thanks!",lotabout,2017-01-17 17:07:28
751,2016-12-01 17:22:05,"I don't have enough time these days, so I can't make any promises, but I'll think about it.

Anyway, here are some concerns that come to my mind.

- Rebuilding the input list from scratch can feel clunky. The list will be cleared, cursor will always be brought down to the bottom of the screen, tab-selected entries will be lost. And depending on the command used, there can be noticeable initial delay which will make the user wait until the first entry from the new command pops up. 
- So restarting ag command every time you press a key can be an overkill, especially when the selectivity of the initial query is good. Isn't it silly to restart ag command when there are only a handful of matches?. It may suffice to rebuild the list only when some key is pressed such as `CTRL-R` (r for refresh). Like, you press that key only when there are too many matches and fzf filtering can't keep up. Note that it is possible to implement the idea externally using `--expect` and `--print-query` options, though it requires closing the current fzf window and opening a new one. So the experience will not be as nice, but in that way, we can keep the simplicity of fzf.
- Search syntax of fzf is not compatible with the regex used by ag command. Passing fzf query directly to ag command may or may not make sense. Such as `!test 'run`. Also fzf takes fuzzy terms but ag does not.
",junegunn,2017-01-17 17:07:28
751,2017-01-17 17:07:28,"Since I don't have answers to the above questions, I'll close the issue for now.

Actually, it's a bit hard for me to see the point of the example. If we restart ag on every change of the query string, fzf no longer works as a filter, but simply becomes a selector interface for external process, which is not the problem fzf was designed to solve. It would make more sense if we restart the ag process not on every update of query, but on an explicit request. But in that case, we can already implement the feature using `--expect` as I mentioned above.",junegunn,2017-01-17 17:07:28
750,2016-11-29 19:55:23,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [X] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [X] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

fzf binary does work on windows but seems like fzf.vim doesn't work at all.

Managed to grab a screenshot when running `:Files` and seems like it is trying to execute `sh` instead of `cmd`.

![image](https://cloud.githubusercontent.com/assets/287744/20726431/687f5a4a-b62a-11e6-80e3-e05e85a2e167.png)
",prabirshrestha,2017-01-17 17:09:04
750,2016-12-01 16:47:40,Thanks for letting me know. Would you be interested in fixing this? I personally don't use Windows so I can't find enough time to look into the issues on the platform.,junegunn,2017-01-17 17:09:04
750,2016-12-01 22:29:44,I could give it a shot in few days but I'm definitely not a viml expert.,prabirshrestha,2017-01-17 17:09:04
750,2017-01-17 17:09:04,Check out #785 and #787. ,junegunn,2017-01-17 17:09:04
750,2017-01-17 19:41:35,"`:Files` seems to work in both gvim and terminal vim on windows. `:Colors` and `:Filetypes` seem to work on in terminal vim and not in gvim.

Terminal vim shows fzf inline, Would it be possible to do the same for gvim too?
",prabirshrestha,2017-01-17 17:09:04
750,2017-01-18 03:08:15,"> :Colors and :Filetypes seem to work on in terminal vim and not in gvim.

Yeah, I don't think most commands in fzf.vim except for the basic Files/FZF should work on Windows. And since I don't use Windows, we need someone else dedicated to work on Windows compatibility to push things forward.

> Terminal vim shows fzf inline, Would it be possible to do the same for gvim too?

Don't think it's possible on gvim, since fzf is a command-line program that runs in a terminal emulator. A GUI version of Neovim can do it using its embedded terminal emulator, but I'm not sure about its Windows support.
",junegunn,2017-01-17 17:09:04
750,2017-01-25 05:01:45,"Would removing the double quotes on `s:fzf_exec()` fix the issue for `:Colors` and `:Filetypes`?
It may interfere with cmd.exe because of escaping issues.

Both commands work for me regardless of the double quotes but I'm using Vim 8.0.69 on Windows.
I tested on the latest commits for fzf and fzf.vim

Can you post the finalized command passed to the shell (cmd.exe) when running any of the commands from fzf.vim?",janlazo,2017-01-17 17:09:04
750,2017-01-25 05:43:52,">  A GUI version of Neovim can do it using its embedded terminal emulator, but I'm not sure about its Windows support.

:terminal is not supported yet in NyaoVim and Neovim-qt and `!fzf` doesn't start a new terminal.
`!start fzf` works though but passing the output to temporary file is another issue.
You can cheat on NyaoVim by using Node.js (because of Electron frontend) but I haven't tested it with the fzf plugin in this repository.",janlazo,2017-01-17 17:09:04
750,2017-02-07 00:50:29,I got `:Colors` and `:Filetypes` working in windows. Sent the PR https://github.com/junegunn/fzf/pull/836,prabirshrestha,2017-01-17 17:09:04
749,2016-11-29 19:45:26,"I'd like the ability to specify a custom history command to be able to use something like:
`fc -l 1 | grep ${(q)LBUFFER}`

to limit the results to history that exactly matches the full text entered on the command line.",ahal,
749,2016-12-01 16:40:52,Can you check failing test cases?,junegunn,
749,2017-01-20 22:24:02,"I rebased and updated the test, is there anything else I need to do before this can land?",ahal,
749,2017-01-21 02:23:52,"Thanks, but before we decide to add a new option, have you checked the comments in https://github.com/junegunn/fzf/issues/672? I've noticed that many users don't know that sorting is disabled by default and can be turned on, and exact matching can be used instead. Please check if the suggestions given in the comments addresses your use case.

The main reason I'm reluctant to add an option for tweaking the command for CTRL-R, is that the script processing the output of the fzf command expects the output to conform to a certain format, 
- in bash, each line should start with an index number, then the full command without anything else
- in zsh, each line should start with an index number, the rest doesn't matter
- in fish, each line should be the full command

So if a user uses any command that doesn't produce lines in those exact formats, the binding will not work. And it's the confusion I'd certainly like to avoid as the maintainer of the project. Also, once we make this option available, it's public, and we can't change or improve the binding (e.g. better formatting, extra info) without breaking some user's configuration.",junegunn,
749,2017-01-23 14:30:33,"No, `--exact` doesn't quite do what I'm looking for, though it comes close. I'd like to force the input text to be an exact match, while keeping fuzzy search enabled for everything typed after that point. For example, say my history is:

<S_CODE_TOKEN>

Now if I type `cd <ctrl-r>`, I would expect only the first two entries to appear in the list, but the third does as well because there is a fuzzy match for `cd`. I want an exact match on `cd`, but then still have the ability to fuzzy match the rest of the command.

This contrived example doesn't do a good job showing why this behaviour is so useful, but when your history has *many* commands in it that are hundreds of characters long, the probability of there being a fuzzy match for a given command (especially short ones that can be spelt in hexadecimal like `cd`), is very high. I find when I type `cd <ctrl-r>` my search list is dominated by vcs commands with commit hashes in them.

I think your concerns about CTRL_R_COMMAND are reasonable, and I could just re-define the ctrl-r keybinding to my own custom function, but I believe this behaviour is actually quite useful and worth trying to upstream somehow. Maybe there's another way to achieve it that doesn't use a custom CTRL_R_COMMAND.",ahal,
749,2017-01-23 14:58:45,"Yeah, I can definitely see the point.

Have you tried enabling sort by default? i.e. `export FZF_CTRL_R_OPTS=""--sort""`",junegunn,
749,2017-01-23 15:10:50,"Yeah, `--sort` improves things but it's still not perfect. The real world example it falls apart on for me is:

<S_CODE_TOKEN>

I want to fuzzy search only through the `mach try` commands, and `--sort` won't give `1` precedence over `2`. (For context, mach is a command dispatch binary used at mozilla, and try is the name of a repository). I'm probably an edge case here, so if you think `--exact` and `--sort` are good enough for most people and want to close this, I can live with re-defining `<ctrl-r>`.",ahal,
749,2017-01-23 15:12:24,"For the record, as a user redefining `CTRL_R_COMMAND`, I would have no expectation of the main project maintaining backwards compatibility with my weird and custom workflow.",ahal,
749,2017-01-23 15:20:05,"> 1    mach try foobar
> 2    mach decision --project=try

In this particular case, `machtry` (without space) will give you better result, because of the smaller gap between the words. When you search with `mach try`, fzf will search for the words individually, so it does not consider the gap.

Anyway, I'm not against the idea of having `FZF_CTRL_R_COMMAND` per se, but I'd like to delay the addition until the inconsistency between the shells is ironed out.",junegunn,
749,2017-01-23 15:23:53,"That's fair, I'll re-bind `ctrl-r` in the meantime.",ahal,
749,2017-01-23 15:24:46,"Okay, if you don't mind, I'll leave this open.",junegunn,
748,2016-11-29 15:11:33,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [X] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

This is just a suggestion. I think it'd be nice to be able to use the `Space` key to abort, but still keep what was written by the user. That way, a user could assign `Space` instead of Ctrl+T and have the fuzzy search start immediately.

For example, something like `ls[space]-l[space]dir/file` would trigger fzf on the first space, but hitting it again would go back to the command line keeping `ls -l` and hitting space again would start fzf again, only this time the user could actually search for the file.

Sorry, I'm not sure I explained it clearly.

I've tried to make the change by myself with no luck (I'm more of a Perl developer these days).
",codezapper,
747,2016-11-29 12:22:08,"The fish functions needed a good revamp. Here it is.

Use seperate files to auto-load functions (more idiomatic in fish).

Remove default bindings. Since they conflict with fish bindings it is
more work for the user to restore them.

Replace the ""temp file"" workaround with the ""read"" function: it's
simpler and faster.

Use proper escaping, remove the custom function.

The ""file"" widget uses last token as root for the ""find"" command.
This replaces the equivalent of '**' completion in bash/zsh.
The ""$cwd"" non-expanded variable can be used in FZF_CTRL_T_COMMAND to
set the root.

This closes #443, #484 and #486.
",Ambrevar,2016-12-05 12:32:12
747,2016-11-29 15:03:04,"Thanks, but test cases are failing. Probably because you removed the default bindings? Improving the existing scripts is okay, but I don't think changing the code structure just to make it more idiomatic justifies breaking backward compatibility for the users.

Have you taken a look at projects like https://github.com/fisherman/fzf? The default key bindings provided here can be easily opted-out by saying no to the question `Do you want to enable key bindings? ([y]/n)`. And one can choose to use any third-party implementation instead.",junegunn,2016-12-05 12:32:12
747,2016-11-29 15:35:02,"Tests are failing indeed, I was aware of that, now let's discuss! :)

I do consider backward compatibility very seriously, but is backward compatibility _of the shell functions_ essential?

I've changed the following things that might break backward compatibility:

- Removing the key bindings: I believe it to be a sane behaviour, bindings should belong to the user dotfiles.

- Renaming the functions: not necessary _per se_, but since those functions cannot be invoked without a bindings, I thought that would make more sense, while limiting the infestation of ""fzf-*"" widgets in the global namespace.

- Splitting the file into one-function-per-file: actually, this should not break backward compatibility since the functions should be autoloaded by fish if installed properly (which is the whole point).

The `fish` functions have been in a poor shape for a while: as it is now, the way fzf is meant to be loaded by fish just feels broken. Breaking the broken is acceptable in my opinion.

If you are still relunctant to accept some of those 3 changes, I'll re-submit accordingly.
",Ambrevar,2016-12-05 12:32:12
747,2016-11-29 15:37:22,"`fisherman` is not a solution to the binding problem, it is just merely a workaround.
I believe this should be fixed upstream, i.e. on fzf.
",Ambrevar,2016-12-05 12:32:12
747,2016-11-29 17:59:56,"Thanks for sharing your thoughts. But there are points that I don't quite agree with.

> but is backward compatibility of the shell functions essential?

Yes, they are a part of the project so why should they be any different?

> bindings should belong to the user dotfiles.

I don't disagree. But by that logic, don't we have to consistently remove the default bindings from bash and zsh extensions as well? But it's a drastic change I can't make at this point. Like I said above, key bindings are opt-in features. If you don't like the settings, answer no to the installer question, and use your own bindings. And if the user explicitly said yes to the question, we should enable them, or what's the point of it?

> limiting the infestation of ""fzf-*"" widgets in the global namespace.

The names are exposed on purpose and have been a part of the public interface of the project. The names are carefully chosen to be consistent across all three shells as much as possible. One can use those ""public"" functions to set up alternative bindings, or to extend the functionality.

- https://github.com/junegunn/fzf/issues/546#issuecomment-213891483
- https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#directly-executing-the-command-ctrl-x-ctrl-r

> Splitting the file into one-function-per-file

I like that key binding implementation for each shell is contained in a single file: key-bindings.{bash,zsh,fish}. Easier to browse, easier to install/uninstall. Taking advantage of autoloading of fish is of course nice and probably more idiomatic, but the practical benefit of it is questionable (load time? the difference should be hardly noticeable), so I'm leaning towards the consistency/tidiness in the project layout.

> the way fzf is meant to be loaded by fish just feels broken

""Feels broken"" does not mean it's broken. For many users who have no issue with the current implementation and have no interest in implementation details, your change simply fixes what's not broken, and breaks what has been working fine for the past couple of years with no good reason without a single word of caution. One day they'll suddenly realize that the feature they have been using for years no longer works after an update, and have to figure out what happened and how to make it work again by themselves with no friendly documentation. I honestly don't see the point of all the trouble. If the user does care about the idiomatic implementation and do not like the default version, one can always choose more sophisticated, better structured third-party implementation. I don't see a problem with that.

> fisherman is not a solution to the binding problem, it is just merely a workaround. I believe this should be fixed upstream

Well, I see it differently. I see the key bindings this repository provides as a reference implementation, a starter-kit for the users who don't have enough knowledge, time, or passion to set up their own bindings. That's what I've been telling people on the issue tracker. Those key bindings are after all glorified personal configurations. They are meant to be forked and adapted to different tastes and needs. I'm not going to try to make them one-size-fits-all solutions.

So my suggestion is that we simply improve the existing functions (e.g. `read` instead of using temp files) without changing file structure, function names, and default bindings. If you don't agree with the direction, your time is better spent working on third-party implementations.",junegunn,2016-12-05 12:32:12
747,2016-11-30 05:03:26,"> Yes, they are a part of the project so why should they be any different?

You see the API as the whole package, user configuration included. To me the API is just fzf, not the config, which is why I think it's no big deal to change them.

Other programs who make use of fzf (Vim, Emacs, etc.) do not rely on the shell functions. (Or do they? I might be wrong here.)

I look at the project as a several distinct bricks (in the ""Unix"" sense), you look at it more as a bundle, this is where our views differ.

Beside `fzf` is in version 0.x, isn't the right moment to make API changes?

> don't we have to consistently remove the default bindings from bash and zsh extensions as well?

Absolutely :)

> I like that key binding implementation for each shell is contained in a single file: key-bindings.{bash,zsh,fish}. Easier to browse, easier to install/uninstall. Taking advantage of autoloading of fish is of course nice and probably more idiomatic, but the practical benefit of it is questionable (load time? the difference should be hardly noticeable), so I'm leaning towards the consistency/tidiness in the project layout.

You are talking installation details here. ""Easy to browse / install"" is the packager's concern only (or the users who install it manually).

The file split does not impact the API: when the packager updates the package, or when the user installs fzf manually, the changes are made at install time: it does not impact the user configuration.

The practical benefit is more than that: from a fish user point of view, fzf is an extension that is configured / loaded in some expected way: it's not, and it is actually a bit tricky to get it right.

The current loading process:

- Source `key-bindings.fish`. At this point, no `fzf`-widget is loaded. Maybe confusing?
- Run `fzf_key_bindings` from `fish_user_key_bindings` or else it won't work.
This both loads the functions and sets the bindings.
- Optional: change the bindings.

The idiomatic process:

- Set the bindings from `fish_user_key_bindings`.

In the idiomatic process, `fzf` widgets are automatically made public.

> Well, I see it differently. I see the key bindings this repository provides as a reference implementation, a starter-kit for the users who don't have enough knowledge, time, or passion to set up their own bindings.

I am of the opinion that users using fzf are power-users and can update their configuration following upstream changes.

And of course we can document the changes!

Talking documentation, if you insist on keeping the fish functions as it is, then we should document the configuration process as it is not trivial (as I detailed it above).

> That's what I've been telling people on the issue tracker. Those key bindings are after all glorified personal configurations. They are meant to be forked and adapted to different tastes and needs. I'm not going to try to make them one-size-fits-all solutions.

Isn't it a bit drastic to fork fzf just to change the default bindings? This is my whole point: making fzf a bit more universal.

> So my suggestion is that we simply improve the existing functions (e.g. read instead of using temp files) without changing file structure, function names, and default bindings.

I'll re-submit the changes then.",Ambrevar,2016-12-05 12:32:12
747,2016-12-05 12:32:12,See #759.,Ambrevar,2016-12-05 12:32:12
747,2016-12-10 07:20:49,"Sorry for not responding quickly to your comment. I've been pretty busy lately and it's hard for me to digest more information about the tools that I don't actively use. Anyway, you should probably know better about fish than me, so I'll revisit this when I get some time.",junegunn,2016-12-05 12:32:12
746,2016-11-28 19:24:03,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
Will there be a precompiled binary release for 0.15.9?  I see that the latest available one on junegunn/fzf-bin/releases is 0.15.8.
",chdiza,2016-11-29 01:57:54
746,2016-11-29 01:57:54,"It was already there, but I forgot to make a separate commit for 0.15.9 so it was listed below 0.15.8. I updated the tag and force-pushed to fix the order. Thanks.

https://github.com/junegunn/fzf-bin/releases",junegunn,2016-11-29 01:57:54
745,2016-11-27 09:20:00,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi, `--toggle-sort` is being used in [fzf_history](https://github.com/junegunn/fzf/blob/master/shell/key-bindings.bash#L54) but `fzf --help` doesn't mention what it does.

In fzf_history, why have `+s` followed by `--toggle-sort`?

Also, can you please explain what `-n` does with an example?

",kshenoy,2016-11-28 03:26:32
745,2016-11-27 09:54:15,"Have you looked at `man fzf`? More information can be found in the man page. `--toggle-sort` is kind of deprecated (no plan to remove it though) as it's equivalent to `--bind KEYNAME:toggle-sort`. We disable sorting with `+s` (`--no-sort`) by default to display the commands in chronological order. But sorting can be dynamically enabled by the key specified in `--toggle-sort`.

`-n 2..` (ignoring index number) allows you to perform prefix match on the command for example `^git`.",junegunn,2016-11-28 03:26:32
745,2016-11-28 02:06:13,"> Have you looked at man fzf?

No, I didn't even know a man page existed. Thanks for letting me know. That helps but just raises more questions for eg. this bit here: `-n2..,..`. The man page says `-n2..` will restrict the search scope to the 2nd to the last field but then there's also `,..` after that increasing the search scope to all fields. Either I'm not following what it does exactly or that seems redundant.

Also, the only thing in there is this line `toggle-sort is equivalent to --toggle-sort`. It doesn't mention how sorting works. I tried using `C-r` but that doesn't seem to do anything. Here's an example of the before and after pressing it:

Before:
![before-1](https://cloud.githubusercontent.com/assets/1559554/20654169/ec327352-b4d3-11e6-869f-04b6cbb739ac.png)

After:
![after-1](https://cloud.githubusercontent.com/assets/1559554/20654178/04ccda7e-b4d4-11e6-9994-1836cc325030.png)

As you can see the order of the command history hasn't changed.",kshenoy,2016-11-28 03:26:32
745,2016-11-28 02:22:29,"Each comma-separated search scope is tried in order. So fzf first checks if the query matches in `2..` scope, if not, then it searches the whole scope `..`.

- `^sudo` won't match without `2..`
- `2su` won't match without `..`
- `^20` is also valid

See the point?

> As you can see the order of the command history hasn't changed.

Try it after typing in some query string. Regarding the ranking algorithm, see https://github.com/junegunn/fzf/blob/0.15.9/src/algo/algo.go#L39",junegunn,2016-11-28 03:26:32
745,2016-11-28 03:26:32,"Ah, I see. Thanks a lot for answering all my questions.",kshenoy,2016-11-28 03:26:32
744,2016-11-26 08:18:38,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [X] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I just tried out fzf today (I like the idea!), however when hitting `^T` in zsh I get the fzf view but with an empty result (0/0). Invoking `$> fzf` directly works as expected. I reinstalled (several times) with  `git clone` and `install`, and also by the fzf package on ArchLinux. I get the same issues on a Debian system. Could you tell me what I'm doing wrong or how can I debug this problem?",sdaschner,2017-01-18 16:26:45
744,2016-11-26 12:40:48,"CTRL-T by default uses the following command to populate the list. Does it work?

<S_CODE_TOKEN>",junegunn,2017-01-18 16:26:45
744,2016-11-26 22:58:13,No that's just an empty output in zsh.,sdaschner,2017-01-18 16:26:45
744,2016-11-27 05:47:30,"It is a valid command on zsh (works fine for me), so you'll have to figure out why the command does not give you proper result.",junegunn,2017-01-18 16:26:45
743,2016-11-24 17:09:58,"I would like to leverage the power of fzf for my own go program.
i.e. I want the user to be able to use fzf to select from a list.

Currently I'm using tui.Menu for this purpose

<S_CODE_TOKEN>

From looking around the FZF code, I can't figure out if this is doable, or if such a thing would require changes to the FZF code.

In the case of the latter, I'm willing to make those changes myself and PR them, if you can provide some pointers :)",lucymhdavies,2016-11-26 03:11:37
743,2016-11-25 05:12:49,fzf is not designed to be used as an embeddable library. But you can shell out and run it as an external process. Take a look at this post: http://junegunn.kr/2016/02/using-fzf-in-your-program/,junegunn,2016-11-26 03:11:37
743,2016-11-25 09:59:03,"Thanks.

It's not ideal, but it'll work well enough.
It does mean my app will need to install fzf (but I can get around that limitation by using fzf in a docker container).

I'll see what I can come up with :)",lucymhdavies,2016-11-26 03:11:37
742,2016-11-23 12:47:26,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I tried to install fzf on my RaspberryPi (Debian based OS), after installation, when I launch fzf it complains ""curses gem is not installed..."", I actually installed it as suggested `gem install curses` and `gem list` showed `curses (1.0.2)`. also `gem which curses` showed `/usr/lib/ruby/1.8/arm-linux-eabihf/curses.so`. I don't know what was wrong.",j5shi,2017-01-26 09:43:27
742,2016-11-23 13:36:10,What is the output of `uname -sm` command? curses gem requirement is for the legacy Ruby version which is only selected by the install script as the last resort when all the other options are not available. Can you post the full output of the install script?,junegunn,2017-01-26 09:43:27
742,2016-11-23 15:14:47,"Here's what I got:
`> uname -sm`
`Linux raspberrypi 4.1.7-v7+ #817 SMP PREEMPT Sat Sep 19 15:32:00 BST 2015 armv7l GNU/Linux`",j5shi,2017-01-26 09:43:27
742,2016-11-23 15:22:29,"Take a look at: https://github.com/junegunn/fzf/issues/685

According to the comment, you should be able to build fzf from source on Raspberry Pi if Go is installed.",junegunn,2017-01-26 09:43:27
742,2017-01-17 17:10:15,"Try this:

1. Install go
2. Clone fzf repo
3. cd src && TAGS=tcell make install
    - Build with tcell not to require ncurses",junegunn,2017-01-26 09:43:27
742,2017-01-26 09:43:27,I'll close this as fzf now provides ARM binaries.,junegunn,2017-01-26 09:43:27
741,2016-11-22 00:43:29,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

Previously I had `<f2>` bound to `:Buffers` in fzf.vim
Since `<f2>` triggers `^[OQ^C`, it technically hits `<esc>` and can close the FZF `:term` on its own (`<f2>` to open, `<f2>` or `<esc>` to close)

Now in 0.15.8 the function keys are not read the same, and even `--bind=f2:abort` does not work in an `fzf#run()` options.
How can I bind `<f2>` (and f3,f4,etc) to close fzf.vim `:term`s?",davidosomething,2016-11-23 15:19:57
741,2016-11-22 03:28:29,"Since 0.15.8, fzf relies on ncurses to interpret escape sequences for function keys. And it works as expected on terminal: `fzf --bind f2:abort`. So the problem you have seems to be an issue of Neovim terminal. Maybe this? https://github.com/neovim/neovim/issues/4343",junegunn,2016-11-23 15:19:57
741,2016-11-22 04:56:39,"Yes, it's a neovim terminal only issue -- that might be related",davidosomething,2016-11-23 15:19:57
741,2016-11-23 13:38:44,"Looks like there's ongoing work on fixing the issue: https://github.com/neovim/neovim/pull/5014

Until it's fixed in neovim, a workaround would be to remap function keys to another key chords that fzf understands.

<S_CODE_TOKEN>",junegunn,2016-11-23 15:19:57
741,2016-11-23 15:19:57,"that works for me, thanks for solution!",davidosomething,2016-11-23 15:19:57
740,2016-11-21 09:37:04,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Steps to reproduce:
1. using vim to open a file find by fzf CTRL-T.
2. suspend the vim by CTRL-Z
3. stty echo was diabled

stty result after CTRL-Z
<S_CODE_TOKEN>

my origin stty
<S_CODE_TOKEN>
Command `less` got this problem too.
",zxdvd,
740,2016-11-23 03:41:24,I can't reproduce whether I'm on tmux or not. The output of `stty` stays the same.,junegunn,
740,2016-11-23 12:30:49,"It seems there is something wrong with tmux.
I can reproduce it on both osx and debian with tmux. But it works well without tmux.",zxdvd,
739,2016-11-20 22:46:47,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ x] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x ] Mac OS X Sierra
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x ] bash
    - [ ] zsh
    - [ ] fish

I get this error while trying to open .haml files

""app/views/blogs/show.haml"" 9L, 211C                                                                                                                                                                                                        

Error detected while processing function <SNR>64_cmd[10]..fzf#run[46]..<SNR>64_callback:                                                                                                                                                    

line   33:                                                                                                                                                                                                                                 Vim(syntax):E484: Can't open file syntax/ruby.vim


<!--
",staycreativedesign,2016-11-21 03:03:33
739,2016-11-21 01:20:57,"Seems unrelated to fzf. You don't see the error when you open the file not using fzf?
i.e. `:e app/views/blogs/show.haml`",junegunn,2016-11-21 03:03:33
739,2016-11-21 03:03:58,Yes for some reason my ruby.vim got erased ... :) Btw great job on fzf!!,staycreativedesign,2016-11-21 03:03:33
738,2016-11-17 18:14:47,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [x] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

The --preview is a very nice feature. I wanted to take it further and display images (mostly small png icons). I found termpix. Here's a link to my fork (with the fixed alpha blending) https://github.com/fimkap/termpix. Now that the latest neovim supports true color in terminal emulation I thought that fzf preview will display images well. I use something like this:
let g:fzf_files_options =
  \ '--preview ""(termpix --height '.&lines.' --true-color {} || cat {}) 2> /dev/null ""'
But the images don't display well. If I use only ANSI colors - still there are some issues. I saw some discussions over other preview tools and thought that the issues can be caused by not using stdout as tty. I have created a file with the output of termpix and just cat it from the preview options and it worked. However, when I did:
--preview ""(~/termpix.sh 50 {} || cat {}) 2> /dev/null | head -'.&lines.'""'
with the termpix.sh
termpix --width $1 --true-color $2 > /tmp/termpixdump
cat /tmp/termpixdump
hoping to solve the issue, it didn't work. I use iTerm2 with true color support.
",fimkap,2016-11-26 02:42:18
738,2016-11-18 00:33:43,"Correction: true color images do not work at all in the preview (although they work in neovim's terminal emulation).
",fimkap,2016-11-26 02:42:18
738,2016-11-19 14:01:24,"fzf currently does not support 24-bit colors due to the limitation of ncurses. But we now have an alternative implementation based on tcell and tcell supports 24-bit colors so it might be possible in the future. But since I noticed some issues with tcell, such as poor rendering performance, I currently don't have a plan to switch to it.
",junegunn,2016-11-26 02:42:18
738,2016-11-19 18:42:56,"I understand this issue with ncurses. But 256 color mode doesn't work well either. The behaviour looks a bit strange to me. Only the first image open in the preview works correctly. If you scroll (Ctrl-k) - all other images are not displayed well. But if you return to the first file, it is ok.
 In order to exclude issues with running termpix in the context of fzf preview, I used a temporary file with the subsequent cat.
'--preview ""((termpix --width 50 {} > /tmp/termpixdump && cat /tmp/termpixdump) || cat {}) 2> /dev/null ""'
Then, to be sure that the preview can display image well and I can scroll, I used a hardcoded 'cat /tmp/termpixdump' so it is called for every file. It works!
The last test I did was to prepare 5 files each being the output of termpix (256 colors). Then I used that:
\ '--preview ""(cat {}) 2> /dev/null ""'
just to cat this in preview. Again, the first file works and all the others don't. It looks like this:
<img width=""1332"" alt=""screenshot 2016-11-19 19 23 07"" src=""https://cloud.githubusercontent.com/assets/2026502/20457629/91b10cbc-ae8f-11e6-91d0-fe5f8750b5c6.png"">

And the next that isn't working, like this:
<img width=""1279"" alt=""screenshot 2016-11-19 19 23 30"" src=""https://cloud.githubusercontent.com/assets/2026502/20457639/bb30893c-ae8f-11e6-82c8-8ed4f0e9d893.png"">

I know that all files are valid output (if I change the order of them, the one that wasn't displayed well will be ok in case it is the first one).
",fimkap,2016-11-26 02:42:18
738,2016-11-19 18:45:05,"See https://github.com/junegunn/fzf/issues/357. Probably a limitation of ncurses 5. Try building fzf with 6 and see if it helps.
",junegunn,2016-11-26 02:42:18
738,2016-11-23 04:38:06,"I was able to fix the issue by building fzf with ncurses 6.

![screen shot 2016-11-23 at 1 16 39 pm](https://cloud.githubusercontent.com/assets/700826/20551223/161a984e-b181-11e6-80b7-2c3ffc831599.png)

With the patch:

<S_CODE_TOKEN>

Unfortunately macOS comes with ncurses 5 and does not support statically linked binaries, one has to install ncurses 6.

<S_CODE_TOKEN>",junegunn,2016-11-26 02:42:18
738,2016-11-23 13:06:49,"Great! Thanks. I'll check that. Regarding the tcell branch, I just wanted to see how it handles 24 bit color and checked it out and built with install, but wasn't able to tell the difference from ncurses. Any changes needed to use tcell?",fimkap,2016-11-26 02:42:18
738,2016-11-23 13:28:08,Building fzf with tcell does not make it support 24-bit colors. ANSI processor of fzf needs to be updated to be able to parse 24-bit ANSI escape sequences in the input.,junegunn,2016-11-26 02:42:18
738,2016-11-24 17:37:50,"It works! I have built fzf with ncurses 6 and the patch as you suggested and 256-color mode works great.
In parallel, I am working on a small utility (in Swift) to display images (transparent background, always on-top, no focus transfer). I am trying to use it as external program for the fzf preview. While testing from the terminal - it works. But trying to run it in the background with & - doesn't work in the fzf preview context. I saw some similar issues with the background job but it didn't help me. So what's the correct way to run a background job in the fzf preview?
The sample command:
ls | ~/dev/fzf/bin/fzf --preview '~/Prevu.app/Contents/MacOS/Prevu {} & 2> /dev/null'",fimkap,2016-11-26 02:42:18
738,2016-11-25 07:56:17,"Opening a mac app from `--preview` seems to work for me. Check whether if other apps are working correctly or not.

By the way, I was able to make fzf support 24-bit colors when built with tcell.

![screen shot 2016-11-25 at 4 50 45 pm](https://cloud.githubusercontent.com/assets/700826/20618012/f0a20006-b32f-11e6-9e6d-4b45ea4e6396.png)

I'll push the code later in the day, so you can try it.",junegunn,2016-11-26 02:42:18
738,2016-11-25 13:33:45,"Great news about 24-bit colors! Thank you! Regarding opening a mac program, you probably use 'open' command with the app bundle. As I see it, 'open' is a launcher that takes care of putting the process into the background. I was trying to launch the executable directly avoiding the overhead. But of course, using 'open' would be an option. 
The problem with the background job is easily shown with:
ls | ~/dev/fzf/bin/fzf --preview 'sleep 3 & echo {} 2> /dev/null'
You can see that echoing is delayed for 3 seconds. Probably, '&' is being escaped.",fimkap,2016-11-26 02:42:18
738,2016-11-26 02:59:54,"Updated the ANSI processor and build instructions, see:
https://github.com/junegunn/fzf/blob/master/src/README.md#build

Regarding the shelling out issue, I think it's because fzf is listening to the standard output of the child processes until their completion. I'll see if there's anything we can do about it. But anyway, using `open` or `nohup` should be considered for now.",junegunn,2016-11-26 02:42:18
738,2016-11-26 03:08:28,"Oh, I can make fzf get the result immediately by detaching STDOUT and STDERR by redirecting them to /dev/null.

<S_CODE_TOKEN>",junegunn,2016-11-26 02:42:18
737,2016-11-15 08:54:07,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [x] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Windows Subsystem for Linux
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

Thanks for writing fzf, and I apologize in advance if this is already answered somewhere. I have recently started using fzf, and one thing I wish is that the score for ""full matches"" would be higher than the score for fuzzy matches.

Let me explain with an example - in my shell, I hit ctrl+r and see:

<img width=""487"" alt=""screen shot 2016-11-15 at 12 48 42 am"" src=""https://cloud.githubusercontent.com/assets/47771/20298929/53ae3f5e-aacd-11e6-93ab-e7d28a237ab5.png"">

Awesome, so I type in ""amend"" and I get this:

<img width=""335"" alt=""screen shot 2016-11-15 at 12 49 44 am"" src=""https://cloud.githubusercontent.com/assets/47771/20298948/74593e84-aacd-11e6-9a9a-ce12e674e15a.png"">

In this case, it's awesome that fzf found most of the letters in the gradle command I had recently used, but I really wanted 1689 in this case, `git commit --amend`, without the extra keystroke. This is just one case that I've ran into, but I've ran into similar other cases in the past few days when using fzf as ctrl+r for my shell.

Is it possible to score exact matches higher than partial matches (if not, may you consider it a feature request?)

Thanks!",ahmedre,2016-11-15 09:01:36
737,2016-11-15 09:01:35,"i missed #638 - i'll take a look at that and the source and will reopen if i can't figure this out - thanks again!

update: i just needed:
`export FZF_DEFAULT_OPTS=""-e""`

sorry for the trouble and thanks for the awesome app!
",ahmedre,2016-11-15 09:01:36
737,2016-11-15 09:11:04,"Hmm, no I don't think it's the right solution to your problem. See: https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#ctrl-r
",junegunn,2016-11-15 09:01:36
737,2016-11-15 09:16:53,"thank you!
",ahmedre,2016-11-15 09:01:36
736,2016-11-14 00:46:38,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [ ] Mac OS X
    - [x] Windows
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi, I am really new to bash shell and vim. I am running on a windows subsystem linux. I installed fzf and everything worked as expected. However, when I tried to use ctrl + t or alt + c in the terminal it gives me an empty list, Like below. My ctrl + r works fine though. Any suggestion on the issue? Thanks.
![image](https://cloud.githubusercontent.com/assets/23441543/20250208/803ab7d2-aa46-11e6-96aa-2a0cf90b2394.png)
![image](https://cloud.githubusercontent.com/assets/23441543/20250219/ac674a82-aa46-11e6-9d81-547e5796da85.png)
",SoukyuuKa,2016-11-15 16:07:05
736,2016-11-14 16:45:39,"Hmm, you're right. I'm seeing the same issue. The problem seems to be that the underlying find command fails on WSL with this message: `find: Cannot read mounted file system list`. I have no idea what this means and how to fix it yet but it is easily reproducible with the following command:

<S_CODE_TOKEN>

Do you see the same error?
",junegunn,2016-11-15 16:07:05
736,2016-11-14 19:33:25,"You are right. It didn't read any file system list.
![image](https://cloud.githubusercontent.com/assets/23441543/20279420/7513c2ac-aae3-11e6-88a0-ce816b9c9d22.png)
I found that fzf command alone works fine and will list all the files in the current directory. Except I can't append the file name after my command. Maybe you can come up with a work around?
![image](https://cloud.githubusercontent.com/assets/23441543/20279568/f9433742-aae3-11e6-9b9a-80a3f5f74255.png)
",SoukyuuKa,2016-11-15 16:07:05
736,2016-11-15 14:34:06,"`sudo ln -s /proc/self/mounts /etc/mtab` fixes the issue for me. Can you try it?

Reference: https://github.com/Microsoft/BashOnWindows/issues/150
",junegunn,2016-11-15 16:07:05
736,2016-11-15 15:57:27,"Wow it works perfectly now. Thank you very much. And FZF is truly an amazing plugin.
",SoukyuuKa,2016-11-15 16:07:05
735,2016-11-13 11:41:45,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [ ] Linux
    - [x] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [ ] bash
    - [x] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

### Symptom
Extra characters `(B` are shown when I use fzf to filter the results of ripgrep with colored output. 

### How to reproduce
Run `rg --vimgrep --color=always -i lorem | fzf --ansi`
I have attached the output piped to fzf [here](https://github.com/junegunn/fzf/files/587717/ansi.txt).

### Result
![result](https://cloud.githubusercontent.com/assets/7343721/20245286/40b16418-a9e1-11e6-8276-53c906ee3274.png)
",midchildan,2016-11-13 17:15:36
735,2016-11-13 11:45:00,"I did a `git bisect`, and it seems that commit 06a6ad8 is causing this problem.
",midchildan,2016-11-13 17:15:36
735,2016-11-13 12:55:14,"Thanks for looking into it. I have a good understanding of what's going on here. The ANSI processor of fzf only tries to process/strip out known ANSI sequences,  such as`\e[<COLOR/ATTR>m`, `^O`, and `^N`. But the output of ripgrep contains ANSI sequences that are not known to fzf, in this case, `\e(B`.

A quick googling reveals that it's a VT-100 code (http://www.comptechdoc.org/os/linux/howlinuxworks/linux_hlvt100.html), and I can update fzf to address that particular sequence, but obviously there are other code sequences of different lengths that fzf should process or ignore. Unfortunately I don't have a comprehensive list of such sequences, but I'll see what I can do.
",junegunn,2016-11-13 17:15:36
735,2016-11-13 16:19:58,"Hmm, comprehensive handling of escape sequences seems to require a non-trivial amount of work.

Excerpts from iTerm2:
- https://github.com/gnachman/iTerm2/blob/60e16c10c9e1acd18c6e683685356b0d4842d123/sources/VT100ControlParser.m#L62
- https://github.com/gnachman/iTerm2/blob/60e16c10c9e1acd18c6e683685356b0d4842d123/sources/VT100CSIParser.m#L382
- https://github.com/gnachman/iTerm2/blob/60e16c10c9e1acd18c6e683685356b0d4842d123/sources/VT100OtherParser.m#L28
- https://github.com/gnachman/iTerm2/blob/60e16c10c9e1acd18c6e683685356b0d4842d123/sources/VT100AnsiParser.m#L18
",junegunn,2016-11-13 17:15:36
735,2016-11-13 16:24:41,"- http://ascii-table.com/ansi-escape-sequences.php
- http://ascii-table.com/ansi-escape-sequences-vt-100.php
",junegunn,2016-11-13 17:15:36
735,2016-11-13 17:16:11,"Just pushed the fix. I'll release the new version in a few days. Thanks for the report.
",junegunn,2016-11-13 17:15:36
734,2016-11-10 14:58:55,"- Category
    - [x] fzf binary
    - [x] fzf built from source under mingw64
- OS
    - [x] Windows
- Shell
    - [x] bash

I get the following output in MINGW64:
$ fzf
character set not supported

It seems to work as expected in windows command prompt, both the premade binary and the one i built in mingw.

I couldn't find the string in the source, but it seems to be in the binary, so I'm guessing there's some included module that has issues. I tried to grep under /mingw64/lib/go and share/go, but couldn't find it.

Sorry to offer you such an unhelpful bug report.",anormann,2017-01-17 17:10:46
734,2016-11-12 05:37:23,"As far as I know, tcell library which fzf depends on does not support cygwin/msys.

https://github.com/gdamore/tcell#windows

You might want to consult with the author of tcell to see if there's any workaround.

/cc @kelleyma49
",junegunn,2017-01-17 17:10:46
734,2017-02-23 08:18:20,"Through winpty I was able to get fzf working. 

However I can't get it to work using tmux though",Swoorup,2017-01-17 17:10:46
733,2016-11-09 23:08:21,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [X] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [X] Linux
    - [] Mac OS X
    - [] Windows
    - [ ] Etc.
- Shell
    - [ ] bash
    - [X] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Older versions of FZF allowed using the ctrl-r mapping without a query. The newest iteration gives the following error:

<S_CODE_TOKEN>

I've traced it to commit 95b34de. 

Was this intentional? ",bturrubiates,2016-11-12 05:38:33
733,2016-11-10 01:35:01,"No, I can't reproduce on my machine. Which version of zsh do you have?
",junegunn,2016-11-12 05:38:33
733,2016-11-10 01:49:11,"> No, I can't reproduce on my machine. Which version of zsh do you have?

<S_CODE_TOKEN>
",bturrubiates,2016-11-12 05:38:33
733,2016-11-10 01:58:50,"Hmm, 4.3.10 is way too old, it was released in 2012 which was much before fzf came into being. Please consider upgrading your zsh.
",junegunn,2016-11-12 05:38:33
733,2016-11-10 06:54:28,"> Hmm, 4.3.10 is way too old, it was released in 2012 which was much before fzf came into being. Please consider upgrading your zsh.

Unfortunately, it seems that 4.3.10 is the newest available on RHEL 6.5. I'll find myself a workaround. 
",bturrubiates,2016-11-12 05:38:33
732,2016-11-08 23:33:51,"<!-- Check all that apply [x] -->
- Category
    - [x] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

fzf version: `0.15.6`

Piping the file in this gist causes a panic.
https://gist.github.com/anonymous/9ea47070a093c04a38911957a01705c5

    cat /file/from/gist | fzf  --header-lines=1

Without `--header-lines=1`, no panic.

<S_CODE_TOKEN>",justinmk,2016-11-09 03:06:28
732,2016-11-09 03:05:11,"You have `--no-color` or equivalent in your $FZF_DEFAULT_OPTS, right?
",junegunn,2016-11-09 03:06:28
732,2016-11-09 03:13:24,"Should be fixed now. I'll release a new version shortly. Thanks for the report.
",junegunn,2016-11-09 03:06:28
731,2016-11-08 17:13:29,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [x] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [x] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [x] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I use hh and find it very useful to start the history search with the word that I typed before pressing `Ctrl+R`.

The hh command is defined as follows:
<S_CODE_TOKEN>

I could do the same way with fzf overwriting the binding, but I would like to know if it is possible to get at this result using only the settings, without the need to override the binding.",thiagotalma,
731,2016-11-11 08:27:30,"> if it is possible to get at this result using only the settings

Not currently. There is an open issue for the functionality: #432. Note that it is already implemented on zsh, but I was unable to find a clean solution for bash, especially while keeping bash 3 compatibility.
",junegunn,
730,2016-11-08 14:43:02,,laur89,2016-11-08 15:06:42
730,2016-11-08 15:06:58,"Merged, thanks!
",junegunn,2016-11-08 15:06:42
729,2016-11-07 15:44:21,"![screen_shot_2016-11-07_at_13_42_43](https://cloud.githubusercontent.com/assets/101501/20063994/3e08413c-a4f0-11e6-8412-dd2d69a376ad.png)

I've tried to use `g:fzf_colors`but did not have any effect.",rainerborene,2016-11-09 13:24:48
729,2016-11-08 17:13:58,"Looks like you should have posted this in fzf.vim repo. Anyway,
- Do you have the latest version of fzf.vim?
- Which color scheme do you use? Does changing color scheme help?
",junegunn,2016-11-09 13:24:48
729,2016-11-08 21:26:49,"I'm running the latest version of fzf.vim.  If I change the colorscheme to darkblue I can see the buffer number in a different color... I've tried to change every color option and still not working.  I'm using the base16-twilight color scheme.

<S_CODE_TOKEN>

![screen shot 2016-11-08 at 19 24 32](https://cloud.githubusercontent.com/assets/101501/20117753/0f53e374-a5e9-11e6-8880-080fc903d4a3.png)
",rainerborene,2016-11-09 13:24:48
729,2016-11-09 04:13:27,"The color is unrelated to `g:fzf_colors`. What's the output of `:hi number`?
",junegunn,2016-11-09 13:24:48
729,2016-11-09 13:24:48,"`:hi Number ctermfg=14` solved this issue. tnks
",rainerborene,2016-11-09 13:24:48
728,2016-11-02 18:18:13,"<!-- Check all that apply [x] -->
- Category
    - [X] fzf binary
    - [X] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [ ] Etc.
- OS
    - [X] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [X] bash
    - [ ] zsh
    - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I wish to increase the fzf history size from 1000 to something bigger. The command `fzf --history-size=N` does not seem to work for any N. I have tried a few numbers ranging from 100 to 10000. Is this really a problem or am I doing something incorrectly?",kaatish,2016-11-04 00:59:48
728,2016-11-03 09:59:00,"`--history-size=N` should work with any N. If it doesn't, it's a bug. I just tested with some values, and it seems to work as expected. Have you tested with small values?
",junegunn,2016-11-04 00:59:48
728,2016-11-03 20:44:09,"Yes I have. I have attached a video [here](https://youtu.be/3n0ysuDdYps) which might explain what is going on. In the video I am pressing Ctrl-R and scrolling up as much as I can.
",kaatish,2016-11-04 00:59:48
728,2016-11-04 00:59:48,"Oh, that's bash history and unrelated to `--history` or `--history-size` of fzf.

See http://superuser.com/questions/137438/how-to-unlimited-bash-shell-history
",junegunn,2016-11-04 00:59:48
727,2016-10-31 13:38:23,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [X] Etc.
- OS
    - [X] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
    - [ ] bash
    - [X] zsh
    - [ ] fish


Doing a ctrl-r history search
![screen](http://i.imgur.com/KiYehtW.png) 

Is it reasonable to find that git command on 10400 instead of the sort on 10392 ?
Just checking, I'll close it out if that is obvious to you, I don't understand the algo well enough.

Thanks!
",chrisamow,2016-10-31 14:22:33
727,2016-10-31 14:04:16,"I believe your outcome is expected because the history search by default orders the lines by the number on the left, i.e. how recent the commands were executed.

You can sort the results by pressing `ctrl-r` a second time, or [see here](https://github.com/junegunn/fzf/issues/526) for modifying the default behaviour.
",mjwestcott,2016-10-31 14:22:33
727,2016-10-31 14:22:33,"understood - thank you sir
",chrisamow,2016-10-31 14:22:33
727,2016-10-31 15:31:16,"You might want to take a look at https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings
",junegunn,2016-10-31 14:22:33
726,2016-10-31 09:02:06,"<!-- Check all that apply [x] -->
- Category
    - [ ] fzf binary
    - [ ] fzf-tmux script
    - [ ] Key bindings
    - [ ] Completion
    - [ ] Vim
    - [ ] Neovim
    - [x] Etc.

Hi,

I think you should mention in the README that `$ man fzf` gives more documentation and examples.

For some reason I only thought about checking it out recently, and I wish I did it sooner.
",eyalev,2016-10-31 15:39:14
726,2016-10-31 15:39:38,"Thanks, I just updated the page.
",junegunn,2016-10-31 15:39:14
725,2016-10-29 19:47:53,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

First, thanks for this great tool. It's really handy. Here's a new feature proposal. I even include a draft implementation.

Scenario: I'm in my home directory (`~`). I'm looking for a file `foobar.txt` that I want to copy. So I go `cp <ctrl-t>foobar`... but it's not working because my home directory contains too many files and `find` is too slow listing them all. I know the file is somewhere in `~/projects/`. I wish I could type `cp projects/<ctrl-t>foobar` and `fzf` would start looking for the file from `~/projects/` rather than from `~`.

This may not seem so useful in this trivial example. One could simply `cd projects/` first, but imagine you're in a middle of a long command and need to specify a file parameter.

Anyway, I've been missing this feature so I hacked it together. The implementation is pretty lame (I'm not a shell programmer), but it seems to be working. All that's needed is modify the `__fsel` function. If you like the idea, feel free to use any of my code:
https://bitbucket.org/janpom/.dotfiles/src/8835152582ebcf0ad266448904587b87e8abf6ae/dotfiles/fzf.custom.zsh 
",janpom,2016-10-30 09:34:20
725,2016-10-30 03:08:03,"Thanks. Have you considered using fuzzy completion instead for that purpose?

<S_CODE_TOKEN>

You might want to take a look at https://github.com/junegunn/fzf/wiki/Fuzzy-completion#zsh if you don't like having to type in `**`.
",junegunn,2016-10-30 09:34:20
725,2016-10-30 07:40:46,"Looks like I'm reinventing the wheel here. I didn't realize the `**<tab>` worked that way. The documentation sounded like it would substitute the pattern with the best match. I should have tested that. My bad.

I guess I still prefer `ctrl-t` to `**<tab>`. The fuzzy completion tip works for me. Thanks for the link! I can now remove the hack from my dot file.

Thanks for the quick response!
",janpom,2016-10-30 09:34:20
725,2016-10-30 09:34:30,"No problem.
",junegunn,2016-10-30 09:34:20
724,2016-10-29 11:15:06,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [x] Etc.
- OS
  - [ ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [x] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

The wiki contains some fantastic examples, but many (all?) don't work under Fish. Would it be a good idea to have a fish-specific examples page?

I currently have two such examples in my dotfiles:
https://github.com/shkm/dotfiles/blob/master/.config/fish/functions/fco.fish
https://github.com/shkm/dotfiles/blob/master/.config/fish/functions/fssh.fish
",shkm,2016-10-30 03:18:16
724,2016-10-30 03:18:16,"Makes sense. I added the page for fish shell. Feel free to update it.

https://github.com/junegunn/fzf/wiki/Examples-(fish)
",junegunn,2016-10-30 03:18:16
723,2016-10-28 20:34:08,"- Category
  - [x] fzf binary

The selected result should highlight the entire line, not only the text.
",andreypopp,
723,2016-12-13 23:54:31,:+1:,vaz,
722,2016-10-27 18:03:53,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<S_CODE_TOKEN>

when the preview pane is toggled the header info disappears
",DanielFGray,2016-10-27 18:14:00
722,2016-10-27 18:15:17,"Good catch, thanks. Fixed it.

(A workaround for the old binaries is to hit CTRL-L to redraw the screen.)
",junegunn,2016-10-27 18:14:00
721,2016-10-26 21:37:13,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [x] Neovim
  - [x] Etc.
- OS
  - [x] Linux
  - [x] Mac OS X
  - [x] Windows
  - [x] Etc.
- Shell
  - [x] bash
  - [x] zsh
  - [x] fish

Currently if you have a project with git submodules, fzf will only list files of the root project.
Submodules could easily be read from the `.gitmodules` file in the project root.

Implementing this in fzf could make sense because you could traverse faster than doing a bunch of piped unix commands to get the file list.
",supermarin,2016-10-27 02:58:50
721,2016-10-27 02:58:50,"fzf is just a unix filter like grep and it's not really responsible traversing the file system. By default, it uses [find command](https://github.com/junegunn/fzf/blob/0.15.5/src/constants.go#L18) to populate the list if not provided via standard input, but you can change it by setting `FZF_DEFAULT_COMMAND`.
",junegunn,2016-10-27 02:58:50
720,2016-10-26 05:35:19,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux (Ubuntu 16.04.1)
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Installing `golang-1.6 libncurses5-dev libncursesw5-dev` on Ubuntu, then using

<S_CODE_TOKEN>

produces an `fzf` binary without Unicode support: all Unicode characters in the fzf UI are mangled instead of displayed correctly.

I managed to get a working binary after building with

<S_CODE_TOKEN>
",ivan,2016-10-26 05:48:02
720,2016-10-26 05:43:46,"I didn't change it to `ncursesw` because it doesn't exist on macOS and I build linux binaries with static tag. So try this instead:

<S_CODE_TOKEN>
",junegunn,2016-10-26 05:48:02
720,2016-10-26 05:48:02,"Ah, great, thank you.

This might be worth mentioning in `src/README.md`, or spitting out some kind of warning, or just refusing to compile without Unicode support.  It's kind of tricky to track down the cause.  Anyway, thanks for fzf, I like it a lot.
",ivan,2016-10-26 05:48:02
720,2016-10-26 14:36:46,"Yeah thanks, I'll probably have to refactor build tags once termbox build(#714)  is merged.
",junegunn,2016-10-26 05:48:02
719,2016-10-26 02:17:13,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
## About sort problem in search results
### search sample is here:

<S_CODE_TOKEN>
### expected

> file `.vim-plugin.vim` should be top

<S_CODE_TOKEN>
",liangguohuan,2016-10-26 02:26:02
719,2016-10-26 02:26:02,"It's expected. fzf prefers characters at the beginnings of the words.

<S_CODE_TOKEN>

Refer to the following links:
- https://github.com/junegunn/fzf/issues/638
- https://github.com/junegunn/fzf/blob/master/src/algo/algo.go#L39
",junegunn,2016-10-26 02:26:02
718,2016-10-25 21:57:17,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [ ] fish

@junegunn: Would you be open to my adding fzf to the [PPA](https://help.launchpad.net/Packaging/PPA/InstallingSoftware) so that I can use `apt-get install` from Ubuntu?
",rmharrison,
718,2016-10-26 14:51:32,"I have no good understanding of PPA, but it sounds like it's ""personal"" and thus non-official. Does making one require my permission or intervention?
",junegunn,
718,2017-01-22 15:20:37,+1,kutsan,
717,2016-10-25 21:40:01,"Currently `fzf` only accepts input from `STDIN` I think it would be great to allow input via a flag like `--cmd`, and also provide an action to reload it.

For example,

<S_CODE_TOKEN>
",rainerborene,2016-10-26 01:26:09
717,2016-10-25 21:43:28,"You can overwrite the command by defining the environment variable `FZF_DEFAULT_COMMAND`.  Reload would be the only thing currently missing?
",kelleyma49,2016-10-26 01:26:09
717,2016-10-25 22:50:42,"`FZF_DEFAULT_COMMAND` should do the job. `reload` action it's the only thing missing.
",rainerborene,2016-10-26 01:26:09
717,2016-10-26 01:26:09,"When the list is reset, fzf has to reset everything inside the finder, cache, cursor position, and multiple selections. So you don't gain much compared to just restarting fzf like so:

<S_CODE_TOKEN>

I don't think the benefit justifies the added complexity and the cost of synchronizing threads, so this is not something I'm interested in. Anyway, thanks for the suggestion.
",junegunn,2016-10-26 01:26:09
716,2016-10-24 21:31:24,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [X] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [X] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [X] bash
  - [ ] zsh
  - [ ] fish

I did 

<S_CODE_TOKEN>

and then it works great in that window. If I reopen it thought, when I press `CTRL + R` it just puts 

<S_CODE_TOKEN>

as my terminal. If I press `Enter` it works and brings up a list, but I select one I get:

<S_CODE_TOKEN>

The same thing happens for `CTRL + T`.

If I type `source ~/.bashrc` in that same window, now everything works again. Is something you are doing expecting me to `source` bashrc instead of just doing whatever bash normally does?
",ptarjan,
716,2016-10-25 04:18:54,"> If I type source ~/.bashrc in that same window, now everything works again. Is something you are doing expecting me to source bashrc instead of just doing whatever bash normally does?

No. If you start a new shell, `~/.bashrc` is automatically loaded, so you don't have to do it manually. Close your terminal emulator completely and restart it and see if it helps.
",junegunn,
716,2016-10-25 13:20:03,"On OSX you typically need to source ~/.bashrc from ~/.bash_profile

http://apple.stackexchange.com/a/13019
http://hayne.net/MacDev/Notes/unixFAQ.html#shellStartup
",mjwestcott,
716,2016-10-25 18:03:41,"@junegunn yes, that is exactly what is broken. The latter part of my report has 

> If I reopen it thought...

so opening a new terminal is where fzf isn't working.

@mjwestcott I do have that:

<S_CODE_TOKEN>
",ptarjan,
716,2016-10-26 02:20:32,"What I don't understand about your initial report is

> and then it works great in that window.

It shouldn't, because the code is not yet loaded on the shell. Maybe you missed the step where you `source`d the file? Anyway, I think some other stuff in your configuration files is interfering with fzf key bindings. Can you post the output of `bind -p`? You should be able to find the following entries:

<S_CODE_TOKEN>
",junegunn,
716,2016-12-13 19:49:25,"BASH on OSX Sierra (10.12) does not appear to source `~/.bashrc` on startup. I can confirm that adding `source ~/.bashrc` to `~/.bash_profile` resolves this issue.  This could be fixed by either modifying the install script to put `[ -f ~/.fzf.bash ] && source ~/.fzf.bash` in `~/.bash_profile` instead on OSX, or updating the post-install instructions to instruct the user to source the `~/.bashrc` file in their `~/.bash_profile` if it isn't already.",paulbersch,
716,2017-01-05 14:12:26,"I have a similar problem when activating vim mode in .inputrc

<S_CODE_TOKEN>

CTRL + R just opens 

`__fzf_history__` on the command line

Without vim mode the tmux pane opens but

`__fzf_history__`is still shown. 

Also bind -p doesn't return:

<S_CODE_TOKEN>

(also on bash & mac)",MuschPusch,
716,2017-01-07 01:36:38,"@MuschPusch I'm not sure what's going on there. It seems like the bindings from fzf are overridden. Is there any `set` command after the line that loads fzf script?

Excerpt from https://github.com/junegunn/fzf#key-bindings-for-command-line

> If you use vi mode on bash, you need to add `set -o vi` before `source ~/.fzf.bash` in your .bashrc, so that it correctly sets up key bindings for vi mode.

Does this help?",junegunn,
716,2017-01-09 14:46:49,"i source it as last file in my .bash_profile, so no it should be the last one",MuschPusch,
716,2017-02-12 16:08:43,"Last line in `~/.bashrc` is
<S_CODE_TOKEN>

`Ctrl`+`R` returns
<S_CODE_TOKEN>
and
<S_CODE_TOKEN>
and the suggestion to `set -o vi` does not work -- in addition it breaks the shell's ""normal"" behaviour, ie going back in history with the page up/down keys.

Sourcing manually `~/.bashrc` makes the shortcut to work!",NikosAlexandris,
715,2016-10-24 15:00:52,"- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

I'm trying to enable fzf for all users on Linux. 
I've put the the configuration statements into the /etc/bashrc (or /etc/bashrc.local depending on the Linux flavor). Everything works fine except bash completion with **.- 

Any idea what could cause this to not work properly?
",kohlerm,2016-12-09 10:46:53
715,2016-10-25 04:22:09,"I have no idea. I just did a quick test of loading completion.bash file from another user, and it worked fine. Could it be a permission problem?
",junegunn,2016-12-09 10:46:53
715,2016-10-25 09:20:26,"Sourcing the same file from a users shell works. I""m guessing somehow fzf believes it was already loaded. 
Here is a trace (working):
bbbbash.21+ declare -f _fzf_compgen_path
bbbbash.30+ declare -f _fzf_compgen_dir
bbbbash.256+ complete -o default -F _fzf_opts_completion fzf
bbbbash.258+ d_cmds='cd pushd rmdir'
bbbbash.267+ a_cmds='
  awk cat diff diff3
  emacs emacsclient ex file ftp g++ gcc gvim head hg java
  javac ld less more mvim nvim patch perl python ruby
  sed sftp sort source tail tee uniq vi view vim wc xdg-open
  basename bunzip2 bzip2 chmod chown curl cp dirname du
  find git grep gunzip gzip hg jar
  ln ls mv open rm rsync scp
  svn tar unzip zip'
bbbbash.268+ x_cmds='kill ssh telnet unset unalias export'
bbbbash.269+ echo XXXXX
bbbbbash.273+ complete
bbbbbash.273+ command grep '-F'
bbbbbash.273+ grep '-F'
bbbbbash.273+ command grep -v _fzf_
bbbbbash.273+ grep -v _fzf_
bbbbbash.274+ _fzf_orig_completion_filter
bbbbbash.41+ sed 's/^(._-F) *([^ ]_).\* ([^ ]*)$/export _fzf_orig_completion_\3=""\1 %s \3 #\2"";/'
bbbbbash.42+ awk -F= '{gsub(/[^A-Za-z0-9_= ;]/, ""_"", $1); print $1""=""$2}'
bbbbbbash.274+ sed 's/ /|/g'
bbbbbbash.274+ echo cd pushd rmdir awk cat diff diff3 emacs emacsclient ex file ftp g++ gcc gvim head hg java javac ld less more mvim nvim patch perl python ruby sed sftp sort source tail tee uniq vi view vim wc xdg-open basename bunzip2 bzip2 chmod chown curl cp dirname du find git grep gunzip gzip hg jar ln ls mv open rm rsync scp svn tar unzip zip kill ssh telnet unset unalias export
bbbbbbash.274+ sed 's/+/\+/g'
bbbbbash.274+ command grep -E ' (cd|pushd|rmdir|awk|cat|diff|diff3|emacs|emacsclient|ex|file|ftp|g++|gcc|gvim|head|hg|java|javac|ld|less|more|mvim|nvim|patch|perl|python|ruby|sed|sftp|sort|source|tail|tee|uniq|vi|view|vim|wc|xdg-open|basename|bunzip2|bzip2|chmod|chown|curl|cp|dirname|du|find|git|grep|gunzip|gzip|hg|jar|ln|ls|mv|open|rm|rsync|scp|svn|tar|unzip|zip|kill|ssh|telnet|unset|unalias|export)$'
bbbbbash.274+ grep -E ' (cd|pushd|rmdir|awk|cat|diff|diff3|emacs|emacsclient|ex|file|ftp|g++|gcc|gvim|head|hg|java|javac|ld|less|more|mvim|nvim|patch|perl|python|ruby|sed|sftp|sort|source|tail|tee|uniq|vi|view|vim|wc|xdg-open|basename|bunzip2|bzip2|chmod|chown|curl|cp|dirname|du|find|git|grep|gunzip|gzip|hg|jar|ln|ls|mv|open|rm|rsync|scp|svn|tar|unzip|zip|kill|ssh|telnet|unset|unalias|export)$'
bbbbash.273+ eval export '_fzf_orig_completion_sed=""complete' -F %s sed '#_longopt"";' export '_fzf_orig_completion_ld=""complete' -F %s ld '#_longopt"";' export '_fzf_orig_completion_grep=""complete' -F %s grep '#_longopt"";' export '_fzf_orig_completion_mv=""complete' -F %s mv '#_longopt"";' export '_fzf_orig_completion_ftp=""complete' -F %s ftp '#_known_hosts"";' export '_fzf_orig_completion_bunzip2=""complete' -F %s bunzip2 '#_filedir_xspec"";' export '_fzf_orig_completion_tail=""complete' -F %s tail '#_longopt"";' export '_fzf_orig_completion_awk=""complete' -F %s awk '#_longopt"";' export '_fzf_orig_completion_cp=""complete' -F %s cp '#_longopt"";' export '_fzf_orig_completion_ln=""complete' -F %s ln '#_longopt"";' export '_fzf_orig_completion_view=""complete' -F %s view '#_filedir_xspec"";' export '_fzf_orig_completion_vi=""complete' -F %s vi '#_filedir_xspec"";' export '_fzf_orig_completion_gvim=""complete' -F %s gvim '#_filedir_xspec"";' export '_fzf_orig_completion_git=""complete' -o bashdefault -o default -o nospace -F %s git '#__git_wrap__git_main"";' export '_fzf_orig_completion_rmdir=""complete' -F %s rmdir '#_longopt"";' export '_fzf_orig_completion_emacs=""complete' -F %s emacs '#_filedir_xspec"";' export '_fzf_orig_completion_less=""complete' -F %s less '#_longopt"";' export '_fzf_orig_completion_sort=""complete' -F %s sort '#_longopt"";' export '_fzf_orig_completion_unzip=""complete' -F %s unzip '#_filedir_xspec"";' export '_fzf_orig_completion_wc=""complete' -F %s wc '#_longopt"";' export '_fzf_orig_completion_head=""complete' -F %s head '#_longopt"";' export '_fzf_orig_completion_ls=""complete' -F %s ls '#_longopt"";' export '_fzf_orig_completion_telnet=""complete' -F %s telnet '#_known_hosts"";' export '_fzf_orig_completion_du=""complete' -F %s du '#_longopt"";' export '_fzf_orig_completion_gunzip=""complete' -F %s gunzip '#_filedir_xspec"";' export '_fzf_orig_completion_rm=""complete' -F %s rm '#_longopt"";' export '_fzf_orig_completion_vim=""complete' -F %s vim '#_filedir_xspec"";' export '_fzf_orig_completion_cat=""complete' -F %s cat '#_longopt"";' export '_fzf_orig_completion_diff=""complete' -F %s diff '#_longopt"";' export '_fzf_orig_completion_cd=""complete' -o nospace -F %s cd '#_cd"";' export '_fzf_orig_completion_tee=""complete' -F %s tee '#_longopt"";' export '_fzf_orig_completion_uniq=""complete' -F %s uniq '#_longopt"";'
bbbbbash.273+ export '_fzf_orig_completion_sed=complete -F %s sed #_longopt'
bbbbbash.273+ _fzf_orig_completion_sed='complete -F %s sed #_longopt'
bbbbbash.273+ export '_fzf_orig_completion_ld=complete -F %s ld #_longopt'
bbbbbash.273+ _fzf_orig_completion_ld='complete -F %s ld #_longopt'
bbbbbash.273+ export '_fzf_orig_completion_grep=complete -F %s grep #_longopt'
bbbbbash.273+ _fzf_orig_completion_grep='complete -F %s grep #_longopt'
bbbbbash.273+ export '_fzf_orig_completion_mv=complete -F %s mv #_longopt'
bbbbbash.273+ _fzf_orig_completion_mv='complete -F %s mv #_longopt'
bbbbbash.273+ export '_fzf_orig_completion_ftp=complete -F %s ftp #_known_hosts'
bbbbbash.273+ _fzf_orig_completion_ftp='complete -F %s ftp #_known_hosts'
bbbbbash.273+ export '_fzf_orig_completion_bunzip2=complete -F %s bunzip2 #_filedir_xspec'
bbbbbash.273+ _fzf_orig_completion_bunzip2='complete -F %s bunzip2 #_filedir_xspec'
bbbbbash.273+ export '_fzf_orig_completion_tail=complete -F %s tail #_longopt'
bbbbbash.273+ _fzf_orig_completion_tail='complete -F %s tail #_longopt'
bbbbbash.273+ export '_fzf_orig_completion_awk=complete -F %s awk #_longopt'
bbbbbash.273+ _fzf_orig_completion_awk='complete -F %s awk #_longopt'
bbbbbash.273+ export '_fzf_orig_completion_cp=complete -F %s cp #_longopt'
bbbbbash.273+ _fzf_orig_completion_cp='complete -F %s cp #_longopt'
bbbbbash.273+ export '_fzf_orig_completion_ln=complete -F %s ln #_longopt'
bbbbbash.273+ _fzf_orig_completion_ln='complete -F %s ln #_longopt'

when it's loaded from the central /etc/bashrc I get this trace (not working):

bbash.21+ declare -f _fzf_compgen_path
bbash.30+ declare -f _fzf_compgen_dir
bbash.256+ complete -o default -F _fzf_opts_completion fzf
bbash.258+ d_cmds='cd pushd rmdir'
bbash.267+ a_cmds='
  awk cat diff diff3
  emacs emacsclient ex file ftp g++ gcc gvim head hg java
  javac ld less more mvim nvim patch perl python ruby
  sed sftp sort source tail tee uniq vi view vim wc xdg-open
  basename bunzip2 bzip2 chmod chown curl cp dirname du
  find git grep gunzip gzip hg jar
  ln ls mv open rm rsync scp
  svn tar unzip zip'
bbash.268+ x_cmds='kill ssh telnet unset unalias export'
bbash.269+ echo XXXXX
bbbash.273+ complete
bbbash.273+ command grep '-F'
bbbash.273+ grep '-F'
bbbash.273+ command grep -v _fzf_
bbbash.273+ grep -v _fzf_
bbbash.274+ _fzf_orig_completion_filter
bbbash.41+ sed 's/^(._-F) *([^ ]_).\* ([^ ]*)$/export _fzf_orig_completion_\3=""\1 %s \3 #\2"";/'
bbbash.42+ awk -F= '{gsub(/[^A-Za-z0-9_= ;]/, ""_"", $1); print $1""=""$2}'
bbbbash.274+ echo cd pushd rmdir awk cat diff diff3 emacs emacsclient ex file ftp g++ gcc gvim head hg java javac ld less more mvim nvim patch perl python ruby sed sftp sort source tail tee uniq vi view vim wc xdg-open basename bunzip2 bzip2 chmod chown curl cp dirname du find git grep gunzip gzip hg jar ln ls mv open rm rsync scp svn tar unzip zip kill ssh telnet unset unalias export
bbbbash.274+ sed 's/ /|/g'
bbbbash.274+ sed 's/+/\+/g'
bbbash.274+ command grep -E ' (cd|pushd|rmdir|awk|cat|diff|diff3|emacs|emacsclient|ex|file|ftp|g++|gcc|gvim|head|hg|java|javac|ld|less|more|mvim|nvim|patch|perl|python|ruby|sed|sftp|sort|source|tail|tee|uniq|vi|view|vim|wc|xdg-open|basename|bunzip2|bzip2|chmod|chown|curl|cp|dirname|du|find|git|grep|gunzip|gzip|hg|jar|ln|ls|mv|open|rm|rsync|scp|svn|tar|unzip|zip|kill|ssh|telnet|unset|unalias|export)$'
bbbash.274+ grep -E ' (cd|pushd|rmdir|awk|cat|diff|diff3|emacs|emacsclient|ex|file|ftp|g++|gcc|gvim|head|hg|java|javac|ld|less|more|mvim|nvim|patch|perl|python|ruby|sed|sftp|sort|source|tail|tee|uniq|vi|view|vim|wc|xdg-open|basename|bunzip2|bzip2|chmod|chown|curl|cp|dirname|du|find|git|grep|gunzip|gzip|hg|jar|ln|ls|mv|open|rm|rsync|scp|svn|tar|unzip|zip|kill|ssh|telnet|unset|unalias|export)$'
bbash.273+ eval
bbash.274+ export _fzf_completion_loaded=0.15.2
bbash.274+ _fzf_completion_loaded=0.15.2
bbash.276+ type _completion_loader

There is also a hardcoded version number in the code , not sure whether that is intended :
#Preserve existing completion
if [ ""$_fzf_completion_loaded"" != '0.11.3' ]; then
  # Really wish I could use associative array but OSX comes with bash 3.2 :(
  eval $(complete | command grep '-F' | command grep -v _fzf_ |
    command grep -E "" ($(echo $d_cmds $a_cmds $x_cmds | sed 's/ /|/g' | sed 's/+/\+/g'))$"" | _fzf_orig_completion_filter)
  export _fzf_completion_loaded=0.11.3
fi
",kohlerm,2016-12-09 10:46:53
715,2016-10-25 15:38:58,"> There is also a hardcoded version number in the code , not sure whether that is intended

Yeah, it's intended. I update the number only when the completion code breaks backward compatibility. By the way, where does this line `bbash.274+ export _fzf_completion_loaded=0.15.2` come from? This repository doesn't have it.

<S_CODE_TOKEN>
",junegunn,2016-12-09 10:46:53
715,2016-10-25 20:06:47,"Sorry my mistake, fiddled around with the script. Re-installed, here is the output:
bbbbash.21+ declare -f _fzf_compgen_path
bbbbash.30+ declare -f _fzf_compgen_dir
bbbbash.256+ complete -o default -F _fzf_opts_completion fzf
bbbbash.258+ d_cmds='cd pushd rmdir'
bbbbash.267+ a_cmds='
  awk cat diff diff3
  emacs emacsclient ex file ftp g++ gcc gvim head hg java
  javac ld less more mvim nvim patch perl python ruby
  sed sftp sort source tail tee uniq vi view vim wc xdg-open
  basename bunzip2 bzip2 chmod chown curl cp dirname du
  find git grep gunzip gzip hg jar
  ln ls mv open rm rsync scp
  svn tar unzip zip'
bbbbash.268+ x_cmds='kill ssh telnet unset unalias export'
bbbbash.271+ '[' 0.11.3 '!=' 0.11.3 ']'
bbbbash.278+ type _completion_loader
bbbbash.279+ _fzf_completion_loader=1
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc awk _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=awk
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_awk
bbbbash.288+ orig='complete -F %s awk #_longopt'
bbbbash.289+ '[' -n 'complete -F %s awk #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s awk #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion awk #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion awk
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc cat _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=cat
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_cat
bbbbash.288+ orig='complete -F %s cat #_longopt'
bbbbash.289+ '[' -n 'complete -F %s cat #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s cat #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion cat #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion cat
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc diff _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=diff
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_diff
bbbbash.288+ orig='complete -F %s diff #_longopt'
bbbbash.289+ '[' -n 'complete -F %s diff #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s diff #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion diff #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion diff
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc diff3 _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=diff3
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_diff3
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault diff3
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc emacs _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=emacs
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_emacs
bbbbash.288+ orig='complete -F %s emacs #_filedir_xspec'
bbbbash.289+ '[' -n 'complete -F %s emacs #_filedir_xspec' ']'
bbbbash.290+ printf -v def 'complete -F %s emacs #_filedir_xspec' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion emacs #_filedir_xspec'
bbbbbash.291+ complete -F _fzf_path_completion emacs
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc emacsclient _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=emacsclient
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_emacsclient
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault emacsclient
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc ex _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=ex
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_ex
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault ex
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc file _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=file
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_file
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault file
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc ftp _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=ftp
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_ftp
bbbbash.288+ orig='complete -F %s ftp #_known_hosts'
bbbbash.289+ '[' -n 'complete -F %s ftp #_known_hosts' ']'
bbbbash.290+ printf -v def 'complete -F %s ftp #_known_hosts' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion ftp #_known_hosts'
bbbbbash.291+ complete -F _fzf_path_completion ftp
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc g++ _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=g++
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_g__
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault g++
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc gcc _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=gcc
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_gcc
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault gcc
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc gvim _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=gvim
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_gvim
bbbbash.288+ orig='complete -F %s gvim #_filedir_xspec'
bbbbash.289+ '[' -n 'complete -F %s gvim #_filedir_xspec' ']'
bbbbash.290+ printf -v def 'complete -F %s gvim #_filedir_xspec' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion gvim #_filedir_xspec'
bbbbbash.291+ complete -F _fzf_path_completion gvim
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc head _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=head
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_head
bbbbash.288+ orig='complete -F %s head #_longopt'
bbbbash.289+ '[' -n 'complete -F %s head #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s head #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion head #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion head
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc hg _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=hg
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_hg
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault hg
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc java _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=java
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_java
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault java
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc javac _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=javac
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_javac
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault javac
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc ld _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=ld
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_ld
bbbbash.288+ orig='complete -F %s ld #_longopt'
bbbbash.289+ '[' -n 'complete -F %s ld #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s ld #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion ld #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion ld
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc less _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=less
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_less
bbbbash.288+ orig='complete -F %s less #_longopt'
bbbbash.289+ '[' -n 'complete -F %s less #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s less #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion less #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion less
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc more _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=more
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_more
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault more
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc mvim _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=mvim
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_mvim
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault mvim
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc nvim _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=nvim
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_nvim
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault nvim
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc patch _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=patch
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_patch
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault patch
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc perl _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=perl
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_perl
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault perl
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc python _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=python
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_python
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault python
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc ruby _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=ruby
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_ruby
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault ruby
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc sed _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=sed
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_sed
bbbbash.288+ orig='complete -F %s sed #_longopt'
bbbbash.289+ '[' -n 'complete -F %s sed #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s sed #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion sed #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion sed
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc sftp _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=sftp
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_sftp
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault sftp
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc sort _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=sort
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_sort
bbbbash.288+ orig='complete -F %s sort #_longopt'
bbbbash.289+ '[' -n 'complete -F %s sort #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s sort #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion sort #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion sort
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc source _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=source
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_source
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault source
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc tail _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=tail
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_tail
bbbbash.288+ orig='complete -F %s tail #_longopt'
bbbbash.289+ '[' -n 'complete -F %s tail #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s tail #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion tail #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion tail
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc tee _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=tee
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_tee
bbbbash.288+ orig='complete -F %s tee #_longopt'
bbbbash.289+ '[' -n 'complete -F %s tee #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s tee #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion tee #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion tee
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc uniq _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=uniq
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_uniq
bbbbash.288+ orig='complete -F %s uniq #_longopt'
bbbbash.289+ '[' -n 'complete -F %s uniq #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s uniq #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion uniq #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion uniq
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc vi _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=vi
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_vi
bbbbash.288+ orig='complete -F %s vi #_filedir_xspec'
bbbbash.289+ '[' -n 'complete -F %s vi #_filedir_xspec' ']'
bbbbash.290+ printf -v def 'complete -F %s vi #_filedir_xspec' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion vi #_filedir_xspec'
bbbbbash.291+ complete -F _fzf_path_completion vi
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc view _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=view
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_view
bbbbash.288+ orig='complete -F %s view #_filedir_xspec'
bbbbash.289+ '[' -n 'complete -F %s view #_filedir_xspec' ']'
bbbbash.290+ printf -v def 'complete -F %s view #_filedir_xspec' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion view #_filedir_xspec'
bbbbbash.291+ complete -F _fzf_path_completion view
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc vim _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=vim
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_vim
bbbbash.288+ orig='complete -F %s vim #_filedir_xspec'
bbbbash.289+ '[' -n 'complete -F %s vim #_filedir_xspec' ']'
bbbbash.290+ printf -v def 'complete -F %s vim #_filedir_xspec' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion vim #_filedir_xspec'
bbbbbash.291+ complete -F _fzf_path_completion vim
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc wc _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=wc
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_wc
bbbbash.288+ orig='complete -F %s wc #_longopt'
bbbbash.289+ '[' -n 'complete -F %s wc #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s wc #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion wc #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion wc
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc xdg-open _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=xdg-open
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_xdg_open
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault xdg-open
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc basename _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=basename
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_basename
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault basename
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc bunzip2 _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=bunzip2
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_bunzip2
bbbbash.288+ orig='complete -F %s bunzip2 #_filedir_xspec'
bbbbash.289+ '[' -n 'complete -F %s bunzip2 #_filedir_xspec' ']'
bbbbash.290+ printf -v def 'complete -F %s bunzip2 #_filedir_xspec' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion bunzip2 #_filedir_xspec'
bbbbbash.291+ complete -F _fzf_path_completion bunzip2
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc bzip2 _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=bzip2
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_bzip2
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault bzip2
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc chmod _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=chmod
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_chmod
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault chmod
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc chown _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=chown
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_chown
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault chown
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc curl _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=curl
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_curl
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault curl
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc cp _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=cp
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_cp
bbbbash.288+ orig='complete -F %s cp #_longopt'
bbbbash.289+ '[' -n 'complete -F %s cp #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s cp #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion cp #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion cp
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc dirname _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=dirname
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_dirname
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault dirname
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc du _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=du
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_du
bbbbash.288+ orig='complete -F %s du #_longopt'
bbbbash.289+ '[' -n 'complete -F %s du #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s du #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion du #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion du
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc find _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=find
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_find
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault find
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc git _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=git
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_git
bbbbash.288+ orig='complete -o bashdefault -o default -o nospace -F %s git #__git_wrap__git_main'
bbbbash.289+ '[' -n 'complete -o bashdefault -o default -o nospace -F %s git #__git_wrap__git_main' ']'
bbbbash.290+ printf -v def 'complete -o bashdefault -o default -o nospace -F %s git #__git_wrap__git_main' _fzf_path_completion
bbbbash.291+ eval 'complete -o bashdefault -o default -o nospace -F _fzf_path_completion git #__git_wrap__git_main'
bbbbbash.291+ complete -o bashdefault -o default -o nospace -F _fzf_path_completion git
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc grep _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=grep
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_grep
bbbbash.288+ orig='complete -F %s grep #_longopt'
bbbbash.289+ '[' -n 'complete -F %s grep #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s grep #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion grep #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion grep
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc gunzip _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=gunzip
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_gunzip
bbbbash.288+ orig='complete -F %s gunzip #_filedir_xspec'
bbbbash.289+ '[' -n 'complete -F %s gunzip #_filedir_xspec' ']'
bbbbash.290+ printf -v def 'complete -F %s gunzip #_filedir_xspec' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion gunzip #_filedir_xspec'
bbbbbash.291+ complete -F _fzf_path_completion gunzip
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc gzip _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=gzip
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_gzip
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault gzip
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc hg _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=hg
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_hg
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault hg
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc jar _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=jar
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_jar
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault jar
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc ln _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=ln
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_ln
bbbbash.288+ orig='complete -F %s ln #_longopt'
bbbbash.289+ '[' -n 'complete -F %s ln #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s ln #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion ln #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion ln
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc ls _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=ls
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_ls
bbbbash.288+ orig='complete -F %s ls #_longopt'
bbbbash.289+ '[' -n 'complete -F %s ls #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s ls #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion ls #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion ls
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc mv _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=mv
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_mv
bbbbash.288+ orig='complete -F %s mv #_longopt'
bbbbash.289+ '[' -n 'complete -F %s mv #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s mv #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion mv #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion mv
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc open _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=open
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_open
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault open
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc rm _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=rm
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_rm
bbbbash.288+ orig='complete -F %s rm #_longopt'
bbbbash.289+ '[' -n 'complete -F %s rm #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s rm #_longopt' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion rm #_longopt'
bbbbbash.291+ complete -F _fzf_path_completion rm
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc rsync _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=rsync
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_rsync
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault rsync
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc scp _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=scp
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_scp
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault scp
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc svn _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=svn
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_svn
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault svn
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc tar _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=tar
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_tar
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault tar
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc unzip _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=unzip
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_unzip
bbbbash.288+ orig='complete -F %s unzip #_filedir_xspec'
bbbbash.289+ '[' -n 'complete -F %s unzip #_filedir_xspec' ']'
bbbbash.290+ printf -v def 'complete -F %s unzip #_filedir_xspec' _fzf_path_completion
bbbbash.291+ eval 'complete -F _fzf_path_completion unzip #_filedir_xspec'
bbbbbash.291+ complete -F _fzf_path_completion unzip
bbbbash.298+ for cmd in '$a_cmds'
bbbbash.299+ _fzf_defc zip _fzf_path_completion '-o default -o bashdefault'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=zip
bbbbash.285+ func=_fzf_path_completion
bbbbash.286+ opts='-o default -o bashdefault'
bbbbash.287+ orig_var=_fzf_orig_completion_zip
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_path_completion -o default -o bashdefault zip
bbbbash.303+ for cmd in '$d_cmds'
bbbbash.304+ _fzf_defc cd _fzf_dir_completion '-o nospace -o plusdirs'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=cd
bbbbash.285+ func=_fzf_dir_completion
bbbbash.286+ opts='-o nospace -o plusdirs'
bbbbash.287+ orig_var=_fzf_orig_completion_cd
bbbbash.288+ orig='complete -o nospace -F %s cd #_cd'
bbbbash.289+ '[' -n 'complete -o nospace -F %s cd #_cd' ']'
bbbbash.290+ printf -v def 'complete -o nospace -F %s cd #_cd' _fzf_dir_completion
bbbbash.291+ eval 'complete -o nospace -F _fzf_dir_completion cd #_cd'
bbbbbash.291+ complete -o nospace -F _fzf_dir_completion cd
bbbbash.303+ for cmd in '$d_cmds'
bbbbash.304+ _fzf_defc pushd _fzf_dir_completion '-o nospace -o plusdirs'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=pushd
bbbbash.285+ func=_fzf_dir_completion
bbbbash.286+ opts='-o nospace -o plusdirs'
bbbbash.287+ orig_var=_fzf_orig_completion_pushd
bbbbash.288+ orig=
bbbbash.289+ '[' -n '' ']'
bbbbash.293+ complete -F _fzf_dir_completion -o nospace -o plusdirs pushd
bbbbash.303+ for cmd in '$d_cmds'
bbbbash.304+ _fzf_defc rmdir _fzf_dir_completion '-o nospace -o plusdirs'
bbbbash.283+ local cmd func opts orig_var orig def
bbbbash.284+ cmd=rmdir
bbbbash.285+ func=_fzf_dir_completion
bbbbash.286+ opts='-o nospace -o plusdirs'
bbbbash.287+ orig_var=_fzf_orig_completion_rmdir
bbbbash.288+ orig='complete -F %s rmdir #_longopt'
bbbbash.289+ '[' -n 'complete -F %s rmdir #_longopt' ']'
bbbbash.290+ printf -v def 'complete -F %s rmdir #_longopt' _fzf_dir_completion
bbbbash.291+ eval 'complete -F _fzf_dir_completion rmdir #_longopt'
bbbbbash.291+ complete -F _fzf_dir_completion rmdir
bbbbash.307+ unset _fzf_defc
bbbbash.310+ complete -F _fzf_complete_kill -o nospace -o default -o bashdefault kill
bbbbash.313+ complete -F _fzf_complete_ssh -o default -o bashdefault ssh
bbbbash.314+ complete -F _fzf_complete_telnet -o default -o bashdefault telnet
bbbbash.317+ complete -F _fzf_complete_unset -o default -o bashdefault unset
bbbbash.318+ complete -F _fzf_complete_export -o default -o bashdefault export
bbbbash.319+ complete -F _fzf_complete_unalias -o default -o bashdefault unalias
bbbbash.321+ unset cmd d_cmds a_cmds x_cmds
bbbash.112+ '[' -d /usr/share/fzf/ ']'
bbbash.112+ source /usr/share/fzf/shell/key-bindings.bash
bbbbash.14+ [[ himxBH =~ i ]]
bbbbash.67+ '[' 4 -gt 3 ']'
bbbbash.67+ __use_bind_x=1
bbbbash.68+ __fzf_use_tmux__
bbbbash.64+ '[' -n '' ']'
bbbbash.68+ **use_tmux=0
bbbbash.70+ [[ ! -o vi ]]
bbbbash.72+ bind '""\er"": redraw-current-line'
bbbbash.73+ bind '""\e^"": history-expand-line'
bbbbash.76+ '[' 1 -eq 1 ']'
bbbbash.77+ bind -x '""\C-t"": ""fzf-file-widget""'
bbbbash.85+ bind '""\C-r"": "" \C-e\C-u`__fzf_history**`\e\C-e\e^\er""'
bbbbash.88+ bind '""\ec"": "" \C-e\C-u`**fzf_cd**`\e\C-e\er\C-m""'
b
",kohlerm,2016-12-09 10:46:53
715,2016-12-09 10:46:53,"Solved it!
The problem was that sourcing fzf from /etc/bashrc or ls /etc/bash.bashrc.local (depening on the Linux flavor) is too late in the process. 
I solved the issue by linking /usr/share/fzf/shell/completion.bash  to  /etc/bash_completion.d/fzf_completion.bash
e.g.
sudo ln -s /usr/share/fzf/shell/completion.bash  /etc/bash_completion.d/fzf_completion.bash

",kohlerm,2016-12-09 10:46:53
714,2016-10-24 14:37:03,"Here are my initial changes.  

Note that preview windows works on MacOS termbox version, and seems to work under Windows 10.  
",kelleyma49,2016-11-06 17:41:55
714,2016-10-30 05:23:06,"It's not yet finished, right?

Here are a few issues I have noticed
- Colors look slightly different. Looks like ANSI color codes are shifted by 1.
- Preview window does not render text with ANSI colors
- Preview window does not wrap lines
- Process terminated on mouse scroll

<img width=""1280"" alt=""screen shot 2016-10-30 at 2 16 18 pm"" src=""https://cloud.githubusercontent.com/assets/700826/19834659/44a284ca-9eac-11e6-9af8-e05e05cabb01.png"">
<img width=""1280"" alt=""screen shot 2016-10-30 at 2 17 54 pm"" src=""https://cloud.githubusercontent.com/assets/700826/19834660/44a9c0f0-9eac-11e6-841b-71a828fe66b8.png"">
",junegunn,2016-11-06 17:41:55
714,2016-10-31 03:47:14,"@junegunn - regarding the issues that you mentioned:
1. I will look into this 
2. can you give me a test case for this?
3. should be fixed in my latest commit
4. there's a bug in mouse scrolling in termbox-go (see mentioned issue in my latest source code commit).  I disabled mouse input for now as this terminates fzf and I can't find an easy workaround.

Other than that it seems to be working fine for me, though I haven't stress tested all of fzf's functionality.
",kelleyma49,2016-11-06 17:41:55
714,2016-10-31 06:14:16,"Correction: ""Preview window does not render text with ANSI colors **correctly**""

Anyway, the content in the preview window looks still broken after the fix, in a different way.

I'm using `highlight` program to generated syntax-highlighted text. In case you don't have access to the program, I uploaded the files so you can test with them. 

https://gist.githubusercontent.com/junegunn/fb0b084d0718a2f27793d7982f983e10/raw/131e64c7386f4d67285b6c884883fad263b6dbb3/algo.txt

https://gist.githubusercontent.com/junegunn/fb0b084d0718a2f27793d7982f983e10/raw/131e64c7386f4d67285b6c884883fad263b6dbb3/gistfile1.txt

<img width=""1280"" alt=""screen shot 2016-10-31 at 3 07 27 pm"" src=""https://cloud.githubusercontent.com/assets/700826/19845651/19b903da-9f7c-11e6-9af1-2e6368d16dab.png"">

<img width=""1280"" alt=""screen shot 2016-10-31 at 3 07 32 pm"" src=""https://cloud.githubusercontent.com/assets/700826/19845655/234c777e-9f7c-11e6-93e3-3c4b10081aa3.png"">

Long lines are not wrapped. 

(`fzf --preview 'cat algo.txt' --preview-window right:10`)

<img width=""1280"" alt=""screen shot 2016-10-31 at 3 09 51 pm"" src=""https://cloud.githubusercontent.com/assets/700826/19845657/2a624eda-9f7c-11e6-9be2-ea8894a8b8b8.png"">
",junegunn,2016-11-06 17:41:55
714,2016-10-31 06:22:39,"FYI, the difference between `Print` and `Fill` are as follows:
- `Print` is used to print a single line string in the candidate list. If strips non-printable characters (`r < 32`)
- `Fill` was introduced for preview window. It does not strip non-printable characters. Note that ncurses automatically handles line-wraps.
- `Fill` returns false if the cursor goes beyond the screen, so there's no point of calling it again. We use this information to stop rendering the preview window earlier.
",junegunn,2016-11-06 17:41:55
714,2016-10-31 15:34:54,"Thanks for the explanation - ncurses documentation is as detailed as I'd like. :)

I'll look at this tonight, thanks for the test case.
",kelleyma49,2016-11-06 17:41:55
714,2016-11-04 07:05:27,"It took me longer than expected, but the main reason was my switch from termbox to tcell.  Termbox had the fast scrolling bug with the mouse, and I noticed a similar bug with arrow key scrolling.  Tcell seems to have none of these issues.

I've tested these commits under Mac and Windows.
",kelleyma49,2016-11-06 17:41:55
714,2016-11-04 07:13:54,"Hm, I'm not sure why this is failing (https://travis-ci.org/junegunn/fzf/builds/173177038)...
",kelleyma49,2016-11-06 17:41:55
714,2016-11-04 08:00:18,"Great job, thanks! I'll review the code later in the day.

> I'm not sure why this is failing

There is a U+FEFF (ZERO WIDTH NO-BREAK SPACE) character at the start of tcell.go

<S_CODE_TOKEN>

I could compile the code after removing it.
",junegunn,2016-11-06 17:41:55
714,2016-11-04 15:51:31,"Good find!  I've submitted a fix.  

One small bug under Windows: double click doesn't work (works on MacOS).
",kelleyma49,2016-11-06 17:41:55
714,2016-11-04 15:56:12,"Thanks, is it something you're going to fix? Let me know when you're done. I'll finish up the work and merge.
",junegunn,2016-11-06 17:41:55
714,2016-11-05 07:22:01,"Does this mean that this would work in cygwin, msys2 and both on neovim and vim as plugin?
",Swoorup,2016-11-06 17:41:55
714,2016-11-05 12:51:55,"Proabably Not. See Windows at https://github.com/gdamore/tcell/blob/master/README.md
",EdVanDance,2016-11-06 17:41:55
714,2016-11-05 18:11:04,"I've disabled single and double click for mouse as I believe this is not an issue with our code.  cmd.exe and conemu.exe consume these events for text selection, which means that single and double click don't really work under Windows.  I've verified this is an issue in the mouse tcell tester, so this isn't an issue with the fzf code.  Mouse scrolling seems to work without a problem, so I left that in.

I ran into another bug which you might be able to help me debug.  DOS doesn't like single quotes, so I changed the quoteEntry function to use double quotes instead:

<S_CODE_TOKEN>

This almost works, except the double quotes at the head and tail of the string get escaped, and I can't track down where this is happening.

Here's my example command:

`.\fzf.exe --preview-window right:70 --preview ""echo {} ""`

And here's what gets printed:

`\""C:\go\src\github.com\kelleyma49\fzf\src\fzf\fzf.exe\""`

How do I stop fzf from escaping the double quotes?
",kelleyma49,2016-11-06 17:41:55
714,2016-11-05 18:12:06,"I think you can merge this after the quoting issue is fixed (and after your final cleanup pass.)
",kelleyma49,2016-11-06 17:41:55
714,2016-11-05 21:47:16,"Here's an appveyor.xml CI script to get the termbox branch of fzf built and tested:

<S_CODE_TOKEN>
",kelleyma49,2016-11-06 17:41:55
714,2016-11-06 17:41:30,"Thanks for your efforts, it's really appreciated. I squashed your commits into one and fixed some minor issues I noticed including the quoting issue you mentioned (it seems to work now, but I'm not perfectly sure about it yet). The changes are pushed to [tcell branch](https://github.com/junegunn/fzf/commits/tcell). The acceptance tests are ~~passing locally~~ (EDIT: no they're not), but for some reason, I'm having a hard time making them pass on Travis CI environment. I'll merge the branch to master once it's fixed. Thanks again!

EDIT: Okay, I just noticed there are some more issues to be fixed.
",junegunn,2016-11-06 17:41:55
714,2016-11-07 16:38:43,"Thanks June.  I'm looking forward to seeing this merged.

One issue I noticed is that, on Windows, the outputted string in the placeholder string is missing all '\'.  I tried the change below and the '\'s will appear:

<S_CODE_TOKEN>

EDIT: it looks like `strconv.Quote()` should replace the internal double quotes correctly - see https://play.golang.org/p/HY4s2os3Yo.
",kelleyma49,2016-11-06 17:41:55
714,2016-11-07 17:17:24,"Thank you, I applied your fix. Here is the updated list of issues I fixed in the tcell branch.
- Fix display of CJK wide characters
- Fix horizontal offset of header lines
- Add support for keys with ALT modifier, shift-tab, page-up and down
- Fix util.ExecCommand to properly parse command-line arguments
- Fix redraw on resize
- Implement Pause/Resume for execute action
- Remove runtime check of GOOS
- Change exit status to 2 when tcell failed to start
- TBD: Travis CI build for tcell renderer
  - Pending. tcell cannot reliably ingest keys from tmux send-keys

I was unaware of tcell before, but it looks very promising. It's actively developed and already supports 24-bit colors unlike ncurses. But unfortunately, I couldn't find a way to make the existing test cases based on `tmux send-keys` pass reliably with the tcell version. Another minor issue I noticed with tcell is that go-runewidth which tcell depends on does not cover every wide character. I should probably revisit tcell in the future, but for now we're going to stick with ncurses for non-windows binaries.
",junegunn,2016-11-06 17:41:55
714,2016-11-08 16:52:35,"@kelleyma49 Released 0.15.6 and prebuilt binaries for Windows are up!
https://github.com/junegunn/fzf-bin/releases

Thanks again.
",junegunn,2016-11-06 17:41:55
714,2016-11-11 09:48:08,"First, thanks for this awesome piece on windows :+1:

For me it works as expected within cmd.exe, but fails with ""character set not supported"" in ConEmu. Any idea what the problem might be here?

<S_CODE_TOKEN>
",EdVanDance,2016-11-06 17:41:55
714,2016-11-11 17:36:55,"@EdVanDance - it works for me under ConEmu.  What are your ConEmu settings?
",kelleyma49,2016-11-06 17:41:55
714,2016-11-13 20:25:36,"@kelleyma49 Sorry for responding late, didn't have access to a windows box.

You're right, it actually works with vanilla ConEmu, I was using [cmder](http://cmder.net/) and there it failed.
",EdVanDance,2016-11-06 17:41:55
714,2016-11-17 16:02:52,"@kelleyma49 I think I found the problem. Cmder is setting TERM=cygwin for git for windows, that's not supported by tcell.

See https://github.com/cmderdev/cmder/issues/1083.

**Edit:**
Just running ""set TERM=xterm"" does not help. You would have to change the vendor/init.bat to set TERM=xterm instead of TERM=cygwin.
",EdVanDance,2016-11-06 17:41:55
713,2016-10-23 12:28:57,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

First of all, thank you, fzf as fast as helpful, but sometimes there is an unexpected behavior when I do file searching (see images). This trouble occurs when you're working with namespaces. The problem is that fzf respect more directory names instead of filename. I think, it's not what user is expected. The proposition is to pay more attention to filename. I understand that fzf is abstract tool and doesn't work only with files so I propose to add third algorithm version (--algo=v3). It also saves backward compatibility.

![1](https://cloud.githubusercontent.com/assets/1643621/19625865/1b88231c-992d-11e6-8949-374f6de33ad2.png)
![2](https://cloud.githubusercontent.com/assets/1643621/19625864/1b7087de-992d-11e6-91d0-1f657f8e77c2.png)
",damage220,2016-10-23 13:11:55
713,2016-10-23 12:53:11,"You'll get better result with `--tiebreak=end` or `--tiebreak=end,length`.

FYI, fzf used to evaluate `end` part using the absolute distance from the end of the string. I realized that it can yield unintuitive results so I changed it in https://github.com/junegunn/fzf/commit/0541c0dbcf96ff40bd80cb8359191dc0fa01d83d. The fix will be included in the next version that I'm going to release tonight.
",junegunn,2016-10-23 13:11:55
713,2016-10-23 13:11:55,"`--tiebreak=end,length` is exactly what I was looking for. Thanks both for this and my previous issue.
",damage220,2016-10-23 13:11:55
712,2016-10-21 07:18:51,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

It seems that there is no opportunity to set fg color without bg. I want to set fg to 109 and don't change bg (because I use hex value in my gnome-terminal). When I do this, bg is set to 0 (which is a little bit lighter than terminal bg). When I've set bg to -1, fg is restored to white. So the proposition is to implement this feature. It would be also nice if there is more freedom in configuring highlighting, e.g. style (bold, underline) or different groups for left bar and selected item.

I used this command:
`.fzf/bin/fzf --color=fg:109,bg:-1`
",damage220,2016-10-21 10:36:18
712,2016-10-21 08:31:20,"I think I did so because I noticed that it was impossible to set foreground color alone. It could be a limitation or a bug of ncurses, but I'm not sure.

<S_CODE_TOKEN>

Compile it (`gcc foo.c -lncurses`) and run it with different arguments (`./a.out -1`, `./a.out 0`, `./a.out 1`). The foreground color is not correctly set if bg is -1 (default color).

Need further investigation.
",junegunn,2016-10-21 10:36:18
712,2016-10-21 08:40:58,"I think I can fix this by assigning an extra color pair instead of using 0. I'll let you know of the progress.
",junegunn,2016-10-21 10:36:18
712,2016-10-21 10:39:09,"Pushed the fix. Let me know if you see any issues. The patch will be included in the next version which I'm going to release pretty soon.

> It would be also nice if there is more freedom in configuring highlighting, e.g. style (bold, underline) or different groups for left bar and selected item.

It requires revising the syntax for color specification. Not now, but maybe in the future. 
",junegunn,2016-10-21 10:36:18
712,2016-10-22 18:12:55,"I don't see any changes.

`git clone git@github.com:junegunn/fzf.git .fzf`
`.fzf/install --bin`

What did I do wrong?
",damage220,2016-10-21 10:36:18
712,2016-10-22 19:58:58,"Nothing. I haven't released a new binary. Until then you have to build from source.
",junegunn,2016-10-21 10:36:18
712,2016-10-23 13:13:13,"I just released 0.15.5, please try again.
",junegunn,2016-10-21 10:36:18
712,2016-10-23 13:19:35,"No issues were found. I appreciate your effort.
",damage220,2016-10-21 10:36:18
712,2016-11-13 03:43:36,"Hello @junegunn! Thank you very much for developing `fzf` and `fzf.vim`! I use both the program and the Vim plugin on a very regular basis. Your work is very much appreciate by me.

I know that this issue is now closed. But, I noticed that you wrote ""It requires revising the syntax for color specification. Not now, but maybe in the future."" and I wanted to chime in to say that I would really appreciate the addition of this feature. Right now, when I use `fzf` I notice that it always highlights the current line in a bold font.

While I agree that this is a suitable approach, I find the transition from a normal font, to a bold one, and then back to a normal font (as I am, say, going up and down a list of files) to be slightly jarring. Is there a current way to highlight the current line without using the bold font? Or, is this what you were referencing in the aforementioned quote when you said that you would revise the color specification in the future?
",gkapfham,2016-10-21 10:36:18
712,2016-11-13 11:33:43,"@gkapfham I'm not sure. I've expressed my reluctance to add more options for styling visual elements a few times in the past (https://github.com/junegunn/fzf/issues/692). For now, consider compiling fzf from source. The following patch will do.

<S_CODE_TOKEN>
",junegunn,2016-10-21 10:36:18
712,2016-11-14 21:34:07,"Hello @junegunn. Again, thanks for developing fzf and thanks for sharing the patch with me. I will consider compiling from source in the future. For now, I will accept the bold font. If you ever decide to implement some of the requested styling features, then let us know. Overall, I really appreciate your effort in creating this very useful program!
",gkapfham,2016-10-21 10:36:18
712,2016-11-19 14:26:31,"@gkapfham `--no-bold` option is added in 0.15.8. You can add it to your `$FZF_DEFAULT_OPTS`.
",junegunn,2016-10-21 10:36:18
712,2016-12-27 21:22:41,"Hello @junegunn! Please accept my apology for the delay in my reply on this issue. Again, thanks so much for all of your hard work on this plugin! I was delighted to see that you added the `--no-bold` option and I have added it to my `$FZF_DEFAULT_OPTS` so that it is the default when I am using `fzf` in Vim, NeoVim, and in my terminal. Again, your addition of this option is greatly appreciated!",gkapfham,2016-10-21 10:36:18
711,2016-10-21 04:23:43,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

The `fzf#wrap()` function provided in this repo currently ignores the `g:fzf_colors` setting in Vim. :see_no_evil:

To see a demonstration, run the following commands in either Vim or NeoVim :two_hearts: (they are both affected):

<S_CODE_TOKEN>

Notice that `:Files` honors the `g:fzf_colors` setting whereas the call to `fzf#wrap()` ignores it. :scream_cat:

Thanks for your consideration.
",sunaku,2016-10-21 16:14:33
711,2016-10-21 08:26:15,"Yeah, that's still only in fzf.vim. Perhaps because I'm not perfectly confident about the feature yet especially due to the new trend of using GUI color schemes in terminal Vim when fzf is unable to display true colors due to ncurses limitation. I'll look into this after #712.
",junegunn,2016-10-21 16:14:33
711,2016-10-21 16:18:05,"I just copy-pasted the code from fzf.vim project. Will remove it there once I release a new version of fzf.
",junegunn,2016-10-21 16:14:33
711,2016-10-21 18:13:33,":+1: It works! :joy_cat: Thanks! :bowing_man: 
",sunaku,2016-10-21 16:14:33
710,2016-10-20 09:48:11,"Hi!

Is it somehow possible to use fzf instead of menu-complete i.e. fuzzy find in completions?

For example, you type git a, then hit <Tab> and get the following behaviour

<S_CODE_TOKEN>
",arkrost,
709,2016-10-20 00:05:17,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [x ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [ x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

After updating to macOS Sierra (though I'm not 100% sure that it directly caused this issue), FZF occasionally panics with no apparent rhyme or reason. Some very brief error messages pop up that I managed to screenshot, and you can find them attached.

![screen shot 2016-10-19 at 4 52 01 pm 3](https://cloud.githubusercontent.com/assets/4794994/19541818/2a7d80ea-961e-11e6-9b2b-547fba5e5fbe.png)
![screen shot 2016-10-19 at 5 00 39 pm 3](https://cloud.githubusercontent.com/assets/4794994/19541819/2a933520-961e-11e6-9e8f-f9b8e7a8b563.png)

Looked around a bit and didn't see anyone experiencing anything similar. Thanks for any help you can give!
",aaparella,2016-10-20 02:44:34
709,2016-10-20 02:15:58,"Strange, which version of fzf are you running? If it's not 0.15.4, can you git-pull the repo and rerun the install script to download the latest?
",junegunn,2016-10-20 02:44:34
709,2016-10-20 02:23:12,"Updated it before making the issue, currently using 0.15.4.

Also updated my version of fzf.vim, did not fix the problem.
",aaparella,2016-10-20 02:44:34
709,2016-10-20 02:27:21,"Is it reproducible in the shell as well? Using simple `fzf` command. If so, I'd like to know see the input list, that is, the output of `find . -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null | sed s/^..//` (or that of $FZF_DEFAULT_COMMAND if you have defined it)
",junegunn,2016-10-20 02:44:34
709,2016-10-20 02:29:32,"Or can you post the output of `fzf -f . 2>&1`?
",junegunn,2016-10-20 02:44:34
709,2016-10-20 02:34:34,"I can't seem to reproduce this using just fzf from the shell (zsh, if that's relevant).
",aaparella,2016-10-20 02:44:34
709,2016-10-20 02:44:34,"I removed and reinstalled the FZF vim plugin, and I can't recreate the issue anymore. Will re-open this issue if the problem arises again, thanks for your help!
",aaparella,2016-10-20 02:44:34
709,2016-10-20 02:46:23,"Huh, strange. Glad to hear that it's fixed anyway. If you run into the problem again, please let me know of the following details.
- Does fzf fail immediately, or fail after you type in some string?
- Do you have $FZF_DEFAULT_OPTS or $FZF_DEFAULT_COMMAND?
- Is it reproducible randomly or constantly? I'm trying to see if the failure is related to the input list.

Thanks!
",junegunn,2016-10-20 02:44:34
709,2016-10-20 03:05:31,"I will definitely report if I encounter it again. For the record:
- It failed mid-search, but not after a specific number or sequence of characters
- I do not have either variable set
- It was fairly consistent, but not 100% constant
",aaparella,2016-10-20 02:44:34
709,2016-10-20 03:22:36,"Thanks, I can't be sure but that could be related to #666, and probably your vim was not picking up the latest version of fzf.
",junegunn,2016-10-20 02:44:34
709,2016-10-29 10:23:16,"im getting the panic regularly in the command line, after upgrade to sierra. i updated fzf, still i get the panic. deleted the vim plugin, still get the panic.  i can reproduce just by typing fzf.
![screenshot_1207](https://cloud.githubusercontent.com/assets/1531433/19828849/2d63ae68-9e1d-11e6-974d-f8747286d938.jpg). I wish to reinstall to see if it fixes the issue. How can i uninstall so i can reinstall?
",pixelstorm,2016-10-20 02:44:34
709,2016-10-29 10:29:24,"@pixelstorm  How did you ""update fzf""? The error message shows that you're running an old version of fzf. Follow the instruction in https://github.com/junegunn/fzf#upgrading-fzf. If the problem still persists, check if you're looking at the right binary by `which fzf`.
",junegunn,2016-10-20 02:44:34
709,2016-10-29 11:12:14,"thanks for responding so quickly. i use the git for install

~: cd ~/.fzf && git pull && ./install
Already up-to-date.
Downloading bin/fzf ...
- Already exists
- Checking fzf executable ... 0.15.5
  Do you want to enable fuzzy auto-completion? ([y]/n) y
  Do you want to enable key bindings? ([y]/n) y

Generate ~/.fzf.bash ... OK
Generate ~/.fzf.zsh ... OK

Do you want to update your shell configuration files? ([y]/n) y

Update /Users/pixelstorm/.bashrc:
- [ -f ~/.fzf.bash ] && source ~/.fzf.bash
  - Already exists: line #4 

Update /Users/pixelstorm/.zshrc:
- [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
  - Already exists: line #4 

Finished. Restart your shell or reload config file.
   source ~/.bashrc  # bash
   source ~/.zshrc   # zsh

Use uninstall script to remove fzf.

For more information, see: https://github.com/junegunn/fzf

i get this when i do ~/.fzf: which fzf
/usr/local/bin/fzf

errors still happening.
",pixelstorm,2016-10-20 02:44:34
709,2016-10-29 11:14:18,"`which fzf` should point to `~/.fzf/bin/fzf`. Looks like you installed fzf using homebrew. Try `brew uninstall fzf`.
",junegunn,2016-10-20 02:44:34
709,2016-10-29 11:20:06,"confused i am

~/.fzf: brew uninstall fzf
/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require': cannot load such file -- mach (LoadError)
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in`require'
    from /usr/local/Library/Homebrew/extend/pathname.rb:2:in `<top (required)>'
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in`require'
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'
    from /usr/local/Library/Homebrew/global.rb:3:in`<top (required)>'
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in`require'
    from /usr/local/Library/brew.rb:15:in `<main>'
~/.fzf: fzf
~/.fzf: sudo brew uninstall fzf
Password:
/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in`require': cannot load such file -- mach (LoadError)
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'
    from /usr/local/Library/Homebrew/extend/pathname.rb:2:in`<top (required)>'
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in`require'
    from /usr/local/Library/Homebrew/global.rb:3:in `<top (required)>'
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in`require'
    from /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require'
    from /usr/local/Library/brew.rb:15:in`<main>'
",pixelstorm,2016-10-20 02:44:34
709,2016-10-30 00:26:15,"its working solid as a rock now. i had to update homebrew to fix error above. thanks for your help.
",pixelstorm,2016-10-20 02:44:34
708,2016-10-19 20:48:02,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

After typing ""foo bar fie ^R bar ^B"", regular bash leaves the cursor right before ""bar"". Is there a way fzf could do something similar, e.g. on exiting with RET, leave the cursor on/by the last word typed in?
",unhammer,2016-10-21 16:50:44
708,2016-10-20 02:24:02,"Hi, it's currently not possible, because 1. fzf does not return the position of the cursor, 2. and the scriptability of bash is pretty limited. And it may not make much sense since by default the order of typed words are not respected in the matches (see https://github.com/junegunn/fzf#search-syntax), for example you can type in `clone git` to match `git clone`. `clonegit` however will not match `git clone`.
",junegunn,2016-10-21 16:50:44
708,2016-10-20 07:16:28,"> 1. fzf does not return the position of the cursor

I don't see why you would need the position of that cursor? 

> by default the order of typed words are not respected in the matches

I know, that's why I specified ""the last word typed in"" :) So if I type ""clone git"", and the match is ""git clone ~/foo"", then after I hit RET, the command line looks like
`$ |git clone ~/foo`. If I instead typed ""git clone"", then after I hit RET, the command line looks like `$ git |clone ~/foo`. If the last word has a `!` before it, I just get the old end-of-the-line behaviour.
",unhammer,2016-10-21 16:50:44
708,2016-10-20 07:48:06,"Oh I see. However I don't think it's trivial to implement that in bash without extra assistance from fzf. For example, let's say we have the following command

<S_CODE_TOKEN>

and we type in `gte`. fzf has a sophisticated scoring criteria and it matches like follows

<S_CODE_TOKEN>

while there can be different ways to align the chars with lower scores like so

<S_CODE_TOKEN>

The bash script cannot determine where to put the cursor unless 1. fzf returns the positions of the matching substring for each term, or 2. bash implements scoring algorithm which is obviously a no-go.
",junegunn,2016-10-21 16:50:44
708,2016-10-20 08:33:20,"Hm, so I'd expect the cursor to be before ""github"" in the first, and before ""git"" in the second. 

But looking `key-bindings.bash`, I can't even figure out how I'd move the cursor N characters, where N is dynamic, along the line using `bind`. I'm starting to suspect bash/readline is too limited to do that :-/
EDIT: of course it is _possible_, for twisted minds, but the code is not pretty (cf. https://github.com/unhammer/fzf/commit/beeb7191531306dfa3cd5918141519c92c7851f0)
",unhammer,2016-10-21 16:50:44
708,2016-10-21 16:50:44,"I tried your patch, but I'm seeing some issues.

<S_CODE_TOKEN>

Anyway, I see what you're trying to do here. It's clever, but `i-search` only looks for an exact occurrence of the query, so it won't work nicely with fuzzy search terms. It would make sense to provide `--exact --no-extended` options for that approach to work better.

Like I mentioned above, for us to properly implement this functionality, we'll have to extend fzf to return the positions of the matched substrings. Which is not impossible of course, but it wouldn't be as simple as I'd like it to be. Should we print the positions of all characters, or just the start and end offsets of the matched substrings? Should we print the offsets along with the matched line in a single line, or as separate lines? If former, which delimiter should we use? Should we take the delimiter as an option? Can we reuse `--delimiter`? If latter, what should we do with the inverse terms (`!...`)? Questions follow. It's a rabbit hole I don't want to go down.

I agree that the suggested behavior is desirable, but for now we don't seem to have good options. Anyway thanks for looking into it.
",junegunn,2016-10-21 16:50:44
707,2016-10-19 11:38:36,"- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

kill <TAB> should show /proc/<pid>/comm, at least where it differs from the first arg of /proc/<pid>/cmdline.

If you `exec -a fakename bash -l`, then /proc/<pid>/comm is ""bash"", while /proc/<pid>/cmdline is ""fakename -l"". It'd be nice if the kill completion could show both (at least where they differ), e.g. 

<S_CODE_TOKEN>
",unhammer,
707,2017-02-06 04:24:23,"+1, and sorting by process time can further distinguish those pids.",amosbird,
707,2017-02-06 16:03:04,"Patches are welcome, please make sure that the code works in both macOS and linux.",junegunn,
706,2016-10-18 21:40:42,"More of a question than a bug, but just curious as to why the `fzf` script is not in `/bin`? It's not possible  to call it directly via `$PATH` without having the `install` and `uninstall` scripts being added, too...
",zhimsel,2016-10-18 21:47:23
706,2016-10-18 21:47:23,"Nevermind, it's the legacy version
",zhimsel,2016-10-18 21:47:23
705,2016-10-18 08:03:08,"- Category
  - [x] fzf binary
  - [x] Etc.
- OS
  - [x] Mac OS X
- Shell
  - [x] bash
  - [x] zsh
  - [x] fish

Hi!

I'm mainly using fzf on my mac and installed it with `homebrew`. After upgrading, I run `/usr/local/opt/fzf/install`. But the install script always generates files for all shells, so I need to do a manual clean-up every time I update fzf... Is it feasible to ask for which shells it should install itself?
",ffittschen,
705,2016-10-19 15:41:47,"Probably. What is your main shell? The install script does 4 things:
1. Add fzf/bin directory to $PATH
2. Add man page directory to $MANPATH
3. Set up fuzzy completion
4. Set up key bindings (CTRL-T, CTRL-R, and ALT-C)

The first two things are already handled by homebrew, the latter two are just two lines loading script files from fzf. For bash, this is it:

<S_CODE_TOKEN>

So you can consider manually adding those lines to your .bashrc (or equivalent lines to .zshrc) if you don't like the clutter install script creates.
",junegunn,
704,2016-10-15 19:19:12,"This branch is not ready yet, but wanted to open the PR to get some comments.

There are two main problems.

1: The MaxY from curses doesn't work as I expected (i.e. it doesn't return the terminal height).
2. Even when using margin, it seems fzf clears the entire screen

I can think of a few solutions for (1), but I don't know what to do about (2).
",acornejo,2016-10-16 17:41:06
704,2016-10-16 17:41:06,"Read a bit about ncurses. There is no easy fix for (2) since there seems to be no portable way of querying the current state (i.e. characters displayed) on a terminal.

Without (2) I am not sure this PR makes sense (i.e. what use is auto-margin?). Closing.
",acornejo,2016-10-16 17:41:06
703,2016-10-13 21:21:26,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [x] Mac OS X **Maybe, havne't yet tried it on my mac**
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

I currently have a setup which colors all the columns from 101 onwards:
`let &l:colorcolumn=join(range(101, 999), ',')`

For some reason, this does not work on buffers opened through fzf and I have to source my init.vim manually. Any ideas why this might be happening?
",RatanRSur,2016-10-14 04:13:44
703,2016-10-14 04:13:44,"`&l:colorcolumn` is local to buffer, remove `l:` part.
",junegunn,2016-10-14 04:13:44
702,2016-10-13 00:08:40,"- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

I'm attempting to use command-line keybindings (CTRL-R, CTRL-T, ALT-C), and it produces

<S_CODE_TOKEN>

tmux is installed, but not currently running. Loading tmux and using the keybindings works.
",chaucerbao,2016-10-13 01:43:11
702,2016-10-13 01:32:10,"got the same error, seems to be introduced recently
quickfix: `cd ~/.fzf && git checkout 0.15.4`
",matzebond,2016-10-13 01:43:11
702,2016-10-13 01:43:51,"Sorry for the troubles. Can you check if the latest commit fixes the issue?
",junegunn,2016-10-13 01:43:11
702,2016-10-13 01:47:30,"Works like a charm. Keep up the great work :+1:
",matzebond,2016-10-13 01:43:11
702,2016-10-13 01:58:40,"It was my oversight, thanks for the feedbacks.
",junegunn,2016-10-13 01:43:11
701,2016-10-12 18:32:53,"I'm using macOS, but I've installed gnu coreutils from homebrew. By default, in order to avoid conflicts with system utils, they are prefixed with a `g`, eg. `ls` is installed as `gls` and so on.

There is a zsh module (from prezto) that wraps these utils in functions so that I can use them without the prefix in interactive shells. For example:

<S_CODE_TOKEN>

And so on.

This PR fixes some issues I encountered with this setup. In particular `[` and `cat`. I've also tested these changes on 'vanilla' zsh (using system utils, no gnu-coreutils) and nothing breaks.
### Bug from first commit:

Autocomplete with `**<tab>` would print an error like:

<S_CODE_TOKEN>

From the bsd man page for `test`. I assume this is the same for gnu-test.

<S_CODE_TOKEN>
### To reproduce the bug from the second commit:

I tested by starting a clean zsh session with `ZDOTDIR=/dev/null zsh`

<S_CODE_TOKEN>
",nthapaliya,2016-10-14 01:00:58
701,2016-10-13 04:04:00,"I see, thanks. What do you think about the following? Smaller diff.

<S_CODE_TOKEN>
",junegunn,2016-10-14 01:00:58
701,2016-10-13 15:43:51,"Yeah, yours is better. I'll make the change.
",nthapaliya,2016-10-14 01:00:58
701,2016-10-13 16:22:49,"OK, I've updated the commits.
",nthapaliya,2016-10-14 01:00:58
701,2016-10-14 01:01:07,"Merged, thanks!
",junegunn,2016-10-14 01:00:58
700,2016-10-11 20:49:10,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I love the fzf command line interface, and the interface for doing searches and selecting results, but I really don't like traditional fuzzy searches that search whole paths at once.  I have my own custom search algorithm that I've written in Vimscript, Ruby and Elixir, and in the past patched into searching tools like ctrlp or selecta.  Unfortunately, I don't know Go, and can't figure it out enough to patch in my own algorithm into the algo.go file for fzf.  

I will try an learn Go if that's my only option, but what I'm wondering about is if there could be some way to specify an external command for actually doing the matching.  I might not be the only person that is interested in custom searching algorithms.  

This would also maybe make fzf more versatile and easier to experiment with, because you could work on matching separately from the interface.

I'm a novice when it comes to writing cli scrips, but maybe the external script could take entries in through standard input and then a special line would indicate a pattern, and the script would write out the entries with their scores?

---

For those that are curious, my custom fuzzy algorithm for searching through file paths is to break the pattern into ""parts"", and then each pattern part (split by `,`) must individually match a path part (split by `/`), with the last pattern part having to match the file name.  So, for files like so:
1. `path/to/file.txt`
2. `path/to/other/file.txt`
3. `path/with/file/folder.txt`
4. `some/other/name.txt`

So, for the following patterns
- `file` would _only_ match the first two paths, not the 3rd one.
- `other` wouldn't match any path
- `other,txt` would match paths 2 and 4.
- `path,o` would match the 3rd path.

This makes it very easy to get exactly the file you want, by specifying a character from a couple directories and then a couple characters from the file name, and I find it matches the way I think bout the filesystem better than fuzzy searching across the whole path.

(or if someone could help me figure out how to make this work in Go, I'd be excited about that too!)
",bentomas,2016-10-12 16:36:59
700,2016-10-12 10:02:33,"Hi, pluggable algorithm may sound intriguing, but an arbitrary algorithm is not likely to be fully compatible with the existing search options of fzf and the extra layer will certainly add complexity and performance overhead. It's not something I'm interested in at the moment.

How long have you been using fzf? And I'd like to hear about real-world examples where fzf doesn't perform well. In my opinion, fzf performs much better than the alternatives you listed above in terms of the performance and the quality of the result (the latter especially since 0.15.0). So the specialized algorithm you needed with the other fuzzy finders may no longer be necessary with fzf if you become more familiar with the way fzf works (e.g. its [search syntax](https://github.com/junegunn/fzf#search-syntax), its [sorting criteria](https://github.com/junegunn/fzf/blob/0.15.4/src/algo/algo.go#L39-L40) that allows acronym search, and the options for limiting the search scope like `--nth` and `--delimiter`).

<S_CODE_TOKEN>
",junegunn,2016-10-12 16:36:59
700,2016-10-12 16:36:59,"Yeah, I honestly figured that would be the answer.  Making the algorithm customizable would certainly take some work.  It was mostly wishful thinking.  And I appreciate that performance is such an important concern and think you've written an amazing tool!

Seriously, don't let me understate that: I think fzf is _amazing_, and will continue to use it over the previous tools I used.  So in the rest of this comment as I outline why I'm not 100% happy with the search algorithm, I'm still happier with fzf than anything else!

Yeah, I familiarized myself with the search syntax options, but to be blunt, when it comes to finding files I have no interest in using them.  For me the utility of a tool like this is that I get it set up with a key combination, and it works so fast, that I never have to _think_ about that I want: I just type characters from the file name (and maybe a few of the directories).  And having to use special syntax (and special characters are harder to reach on the keyboard) is an extra mental step I'm not going to do.

However, would I use the search syntax options when looking through log files or for other searches? You bet!

Now, fzf is a general purpose tool, and it isn't specifically for finding files, so I think the current algorithm is fantastic for searching arbitrary lines of text, but I guess for me, I don't think about searching for files as lines of text like this:

<S_CODE_TOKEN>

I think about searching for files as navigating a tree like this where each file or directory is a node on that tree:

<S_CODE_TOKEN>

And for me, a search where I specify when I want to cross node boundaries with a comma, and _I have to find a match in the node that is ultimately chosen_ is much more intuitive.  

That's my biggest complaint about fzf for _finding files_ right now: it will often return results where the match doesn't happen anywhere in file name or directory name.  

(Yes, I can use `--nth` and `--delimiter` to specifically target just the last field, and split fields by `/`, but then I have to run a different fzf command if I want to look at both the last field AND the second to last field.  And I can't target the first field AND the last field)

To give you a bit of a contrived example that you'll be able to reproduce on your own system, if I run `fzf` in the project directory for fzf, and search for `fzf`, this is the output:

<img width=""892"" alt=""screen shot 2016-10-12 at 09 58 01"" src=""https://cloud.githubusercontent.com/assets/49276/19317492/688fa99c-9062-11e6-9ed8-e999f78ac3f0.png"">

If you look at that output, you'll see that the first 6 results are files or directories where the name contains fzf. Perfect!

Now, if I go up 1 directory and do the same thing, run the `fzf` command and search for `fzf`, this is the result:

<img width=""892"" alt=""screen shot 2016-10-12 at 10 01 08"" src=""https://cloud.githubusercontent.com/assets/49276/19318480/25f76daa-9066-11e6-8049-197af8222281.png"">

In this case, only 2 of those 6 files are now visible, as the it's prioritizing the `fzf` project directory over files containing `fzf`.  Personally, I think the results got _worse_ when I went up a directory, whereas with my preferred algorithm the results stay the same because it is thinking about nodes on the tree. If I wanted to see a list of results contained in a node with my algorithm, I'd do `fzf,`.

This isn't a hypothetical problem for me, my work project directory has quite a few directories whose names match files I want to find.  So I end up having to repeat the name.   

But who knows, maybe I'll get used to fzf's behavior, especially since I don't know Go at all.  But I'm still convinced that for _finding files_ my custom algorithm is a more intuitive approach.

But like I said, fzf rocks! Thanks!
",bentomas,2016-10-12 16:36:59
700,2016-10-12 17:21:47,"Yo, thanks for the detailed explanation. That was quite some food for thought. Like you said, fzf is a general purpose tool that is supposed to work okay with any type of data and I'm currently focusing on that aspect. But yeah, obviously file search is the number one use case of fzf and it would be nice if we could somehow make fzf better at that without hurting its simplicity. I appreciate your feedback.

In this particular case, you might want to test `fzf --tiebreak=end` which will prioritize matches that are closer to the end of the string. It simply calculates the distance from the end, so the list may look a bit disordered if you don't look closely. Maybe we should consider the relative position of the pattern rather than the absolute distance from the end. Something to think about.
",junegunn,2016-10-12 16:36:59
699,2016-10-11 17:28:23,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [x] Neovim
  - [ ] Etc.

fzf-tmux script and vim/nvim plugin should not split the window if it's too small.
Closes https://github.com/junegunn/fzf.vim/issues/214

fzf-tmux already refuses to use tmux pane if the height of the terminal window is less than 16, but it has two problems:
- It is still okay to split the window vertically (`-l` or `-r`)
- Vim plugin doesn't work in that case as it uses `system()` instead of `:!`

<S_CODE_TOKEN>
- Hard coded limit 15 and 40
",junegunn,2016-10-12 14:10:35
698,2016-10-11 15:42:55,,Ambrevar,2016-10-11 16:54:51
698,2016-10-11 16:54:58,"Looks good, thanks!
",junegunn,2016-10-11 16:54:51
697,2016-10-08 21:38:13,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

Similar request to #481, which permitted the use of `$SHELL` instead of `sh`. However, commands that go through `fzf#run` are still [hardcoded to use `sh`](https://github.com/junegunn/fzf/blob/01b88539ba912da4f49cfba48e2a736c04ec6006/plugin/fzf.vim#L214). Can that function use `$SHELL` instead? To pick up environment variables, aliases, etc.

I encountered this trying to use junegunn/fzf.vim#36. Its `fzf#vim#grep` runs its grep command via `fzf#run`.
",john-kurkowski,
697,2016-10-10 16:57:15,"We had issues using `system()` function with fish or tcsh and that's why we set `&shell` to `sh`. See:
- https://github.com/junegunn/fzf/issues/204
- https://github.com/junegunn/vim-plug/issues/159

Looks like fish no longer has the issue, but I'm still not sure if it's safe to remove the hard-coded `sh` (e.g. tcsh). Until we can be sure that we no longer need it, you can pass something like `zsh -c 'your-command'` as a workaround.
",junegunn,
696,2016-10-06 20:45:31,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

Having switched to fzf, and coming from the normal Bash backwards history search, it’d be great, if selecting the item from the fzf list, would execute it right away, so I only have to hit return once.
",paulmenzel,2016-10-08 18:57:37
696,2016-10-08 18:57:37,"Duplicate of #477. The issue is left open as we haven't found a way to allow the user to dynamically choose which action to perform, edit or execute, on bash. If you unconditionllay want to execute the command, you can simply append `\C-m`  to the key binding.

<S_CODE_TOKEN>

Alternatively, you can define an extra key binding for that leaving the default one unchanged.

<S_CODE_TOKEN>
",junegunn,2016-10-08 18:57:37
695,2016-10-06 19:04:38,"Otherwise you end up with things like the following being issued to stderr:

<S_CODE_TOKEN>
",matthewfranglen,2016-10-07 15:46:37
695,2016-10-07 15:46:37,"Actually I like the progress report. It is especially nice for users with slow internet connection. If you don't want it, you can redirect stderr to /dev/null.
",junegunn,2016-10-07 15:46:37
694,2016-10-04 14:01:10,"- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.

given the list 
  constant 1 2 3
  constant a b c

If the the query is set to 'constant a' , 'constant 1 2 3' should also be in the list, albeit with a much lower rank, otherwise it feels much less fuzzy than it could be and puts the burden on the user rather than on the program.
",nkh,
694,2016-10-04 16:24:18,"When you type in `constant a`, it's a conjunctive query of `constant` and `a`. `constant` of course matches `constant`, and `a` matches `a` in `*a* b c` or in `const*a*nt`. So `constant a` matches both `constant 1 2 3` and `constant a b c` and `constant a b c` will be ranked higher as `a` matches at the start of a word. Having said that, I'm not sure if I follow your suggestion. Can you elaborate?
",junegunn,
694,2016-10-04 23:04:29,"I'd like to see 'constant or a' which would rank lower than 'constant and a'

here is the use case, no it's not just for the fun of it

I'd like to replace bash history search with fzf, it just makes more sense to have more visual feedback than one line. Bash's search suck BIG TIME because it doesn't really care for what's on the line. I'd like the history search  with fzf to take that into account. I'm working on that.

Here is the ""problem"", I start typing: command this that; at this point I remember that I did something like that ""still in my history"" ago; if I hit ^R only the lines matching ""command and this and that"" will match.

IMHO, fuzzy is better whe it's ored than when it is anded. it makes it applicable to a whole bunch of problems. 
",nkh,
693,2016-10-04 10:54:07,"- Shell
  - [x ] bash
  - [ ] zsh
  - [ ] fish

https://github.com/junegunn/fzf/wiki/Examples

search for 're-wrote the script above'

I cleaned up the original script but left it in the wiki as I did not write it.  you may want to keep only one of them
",nkh,2016-10-04 15:14:40
693,2016-10-04 15:14:37,"Thanks. I haven't paid enough attention to the scripts posted there, but now I'll have to review them. And maybe remove the ones that do not work out of the box, and the ones that seem too verbose or complex.
",junegunn,2016-10-04 15:14:40
692,2016-10-04 08:38:22,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

There's an option to customise the prompt character, but the same character is used to highlight the selected result. It would be great to have an option to customise that character as well, to use something like `→` or `⇢` etc.

Here's a little example:

<S_CODE_TOKEN>

I think this is where it's hardcoded:

https://github.com/junegunn/fzf/blob/master/src/terminal.go#L629
https://github.com/junegunn/fzf/blob/master/src/terminal.go#L636

If this would be a valid option to add then I could try and send a pull request?
",wayneashleyberry,2016-10-04 16:16:47
692,2016-10-04 16:16:47,"The idea was suggested in the past, but I declined. And I'm still not sure if I want this.

The problem is not that it's hard to implement – it's quite the opposite as you might have guessed – but that I do not want fzf to end up with a bunch of options for tweaking minor UI elements. Imagine, `--inline-info-separator`, `--info-format`, `--gutter-width`, `--border-style`, `--preview-padding`, the list goes on, and there's no reason that we should offer one but not the other. I don't think I want to go that direction.

One can argue that we already have `--prompt` in that family, but the way I see it is that the main purpose of `--prompt` is to indicate the context of the search (e.g. `fzf --prompt $(pwd)/`). So it's not just for changing the style of an element.

I may revisit the idea later, but for now I'll close this as wontfix. Thanks for the suggestion.
",junegunn,2016-10-04 16:16:47
692,2016-10-04 16:42:04,"Fair point, I completely understand your viewpoint @junegunn - thank you for explaining and thank you for an incredible tool!
",wayneashleyberry,2016-10-04 16:16:47
692,2016-10-04 16:45:59,"No problem, thanks for understanding.
",junegunn,2016-10-04 16:16:47
691,2016-10-04 02:01:22,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hello, first I would like to thank you for your work.

Unfortunately, I am having a bit of a problem. When I first attempted to install fzf, I received an error saying that Ruby was not installed so I installed it (Ruby version 2.3.1) and Curses (version 1.0.2) and then attempted to use the function below which I obtained from https://github.com/paulirish/dotfiles/blob/master/.functions that starts at line 34.

<S_CODE_TOKEN>

Upon execution I receive the error that --ansi is an illegal option.

![screenshot from 2016-10-03 21-22-32](https://cloud.githubusercontent.com/assets/5957886/19059671/b595fa5c-89af-11e6-9243-b248b4677aec.jpg)

![screenshot from 2016-10-03 21-12-51](https://cloud.githubusercontent.com/assets/5957886/19059612/2b32dac4-89af-11e6-8687-a69c9685a7c9.jpg)

Steps I have tried to rectify the problem:
- Update fzf repo with and without the depth option.
- Downgrade Ruby from 2.3.1 to a 1.9.3 build.
- Uninstall Ruby and Curses and install Go and attempt to build from source with instructions from here https://github.com/junegunn/fzf/issues/300#issuecomment-124995968 .
- Have both Ruby and Go installed and run the install script.

Curiously, the binaries that are generated appear to be labeled properly but the --version output is incorrect as shown below. I am not sure this is related or not.

![screenshot from 2016-10-03 21-36-47](https://cloud.githubusercontent.com/assets/5957886/19060006/65f9893e-89b2-11e6-9808-8a50bb487dc1.jpg)
![screenshot from 2016-10-03 21-45-02](https://cloud.githubusercontent.com/assets/5957886/19060048/c1b797fc-89b2-11e6-8932-3ed9c4bf81fb.jpg)

Lastly, the fzf-tmux command is not working either.

My current system is running Ubuntu 16.04 and this is a fresh install from earlier today. I have made some configuration changes but I am unsure if any of those changes could have this effect on fzf's functionality. I have probably botched something but, for the life of me, I cannot figure out what I am doing incorrectly. I am happy to provide any documentation that you may need and I would appreciate any help you can provide.
",effohenteee,2016-10-04 04:06:43
691,2016-10-04 02:17:45,"You don't need to care about the Ruby version, it's no longer maintained.

> When I first attempted to install fzf, I received an error saying that Ruby was not installed so I installed it

Can you post the log message? I wonder how you ended up with this. The install script should not say anything about Ruby on Linux.

Take the following steps.
1. Check the output of `which fzf`. And $PATH should contain `~/.fzf/bin`, not `~/.fzf`
2. Forget about Ruby or Go, let's just reinstall fzf as follows
   
   <S_CODE_TOKEN>
3. Your .bashrc should be now updated. Reload it: `source ~/.bashrc`
4. See if `which fzf` is pointing to `~/.fzf/bin/fzf`. No? Examine your $PATH variable.
",junegunn,2016-10-04 04:06:43
691,2016-10-04 03:07:33,"Thank you for the quick reply! All is working now after your suggestion #1.

The log said that fzf was already found in path and <code>which fzf</code> returned <code>~/bin/fzf</code>
![screenshot from 2016-10-03 22-48-45](https://cloud.githubusercontent.com/assets/5957886/19061077/a3c84652-89bb-11e6-8239-076236af1164.png)

I deleted <code>~/bin/fzf</code> and reinstalled using your instructions. <code>~/.fzf/bin</code> is in the path now everything is working beautifully.

![screenshot from 2016-10-03 22-56-34](https://cloud.githubusercontent.com/assets/5957886/19061210/bc065a50-89bc-11e6-83a2-dfdf0e7b07d3.png)

I am not sure how that file ended up there, definitely user error though. I will look into that but for now the version is showing properly and everything is working great.  Thank you very much for your help.
",effohenteee,2016-10-04 04:06:43
691,2016-10-04 04:06:43,"No problem.
",junegunn,2016-10-04 04:06:43
690,2016-10-04 00:09:47,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [x ] Etc.
- OS
  - [ ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x ] bash
  - [ ] zsh
  - [ ] fish

in https://github.com/junegunn/fzf/wiki/Examples#with-write-to-terminal-capabilities, function writecmd is written in Perl. It can be written in a much cleaner way and even better if it is acceptable to have two functions. 'writecmd' and 'runcmd', can be written as below.

<S_CODE_TOKEN>
",nkh,2016-10-04 07:39:23
690,2016-10-04 04:59:40,"Hi, I didn't add/test the example. If you think you can improve it, feel free to update it. Thanks.
",junegunn,2016-10-04 07:39:23
690,2016-10-04 07:39:22,"example updated
",nkh,2016-10-04 07:39:23
690,2016-10-04 16:26:19,"Thanks.
",junegunn,2016-10-04 07:39:23
689,2016-10-02 15:37:03,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ x] Linux
  - [ x] Mac OS X
  - [ x] Windows
  - [ x] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [ ] fish

submitting a new issue seems overkill when one only as a configuration question

other users may be able to answer the questions too
",nkh,2016-10-03 04:45:09
689,2016-10-03 04:45:09,"I don't use IRC, but there is a gitter chat room: https://gitter.im/junegunn/fzf
",junegunn,2016-10-03 04:45:09
688,2016-10-02 15:27:18,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

I propose option -M which, as option m, allows the selection of multiple items, the difference is that -M takes the maximum number of items that can be selected.  of course -m option is good too. 
",nkh,
687,2016-10-02 15:23:25,"<!-- Check all that apply [x] -->
- Category
  - [ x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

if multiple sections are made and the search is changed, the selected entries may be removed from the display making it unnecessarily complicated to deselect entries. with the proposed option, the selection are always visible. if the entry id deselected and it doesn't match the search, the entry is removed from the list.
",nkh,
686,2016-10-02 14:59:57,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x ] bash
  - [ ] zsh
  - [ ] fish

When a margin is given as a parameter, do not erase the current background completely, instead allow the user to give a border width which should be erased (some color option maybe?)

In some situations I like to give a border to the fzf command, but it erases the background completely, I find it a bit much more ergonomic to keep the current display.  
",nkh,2016-10-02 15:30:39
686,2016-10-02 15:30:39,"Unfortunately this is not possible since fzf is an ncurses application. Some users even suggested creating a stripped-down version that does not depend on ncurses sacrificing fancy features like preview, margin, mouse, execute, etc that are non-trivial to implement without ncurses. But it's not my priority as I'm always on tmux and I'm really happy with fzf-tmux script for its versatility. e.g. `fzf-tmux -l30`, `fzf-tmux -u40%`.

[![](http://junegunn.kr/images/fzf-git-gh.png)](http://junegunn.kr/2016/07/fzf-git/)
",junegunn,2016-10-02 15:30:39
686,2016-10-02 15:39:21,"What about taking a screen shot of the current window, drawing it in the
ncurses application, drawing over it?

That should work in tmux too.

On Sun, Oct 2, 2016 at 5:30 PM, Junegunn Choi notifications@github.com
wrote:

> Unfortunately this is not possible since fzf is an ncurses application.
> Some users even suggested creating a stripped-down version that does not
> depend on ncurses sacrificing fancy features like preview, margin, mouse,
> execute, etc that are non-trivial to implement without ncurses. But it's
> not my priority as I'm always on tmux and I'm really happy with fzf-tmux
> script for its versatility. e.g. fzf-tmux -l30, fzf-tmux -u40%.
> 
> http://junegunn.kr/2016/07/fzf-git/
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/junegunn/fzf/issues/686#issuecomment-250977051, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AACxYY-qSwzWNvcccpQDM2K4n_-5I8yUks5qv84jgaJpZM4KMB4C
> .
",nkh,2016-10-02 15:30:39
686,2016-10-04 16:29:55,"I don't think it's possible.
",junegunn,2016-10-02 15:30:39
686,2016-10-04 23:12:13,"taking a text screenshot is possible in screen (built in) and in tmux (via plugin), I wrote a text screencast tool, I'll look in it.

Of course this complexity should no go into fzf but if it would take a file containing the screenshot and display it as background, that would go a long way. 
",nkh,2016-10-02 15:30:39
685,2016-10-01 15:12:47,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
- OS
  - [x] Linux

It would be great to have binary release for linux arm.

I have Raspberry Pi 2 with OSMC installed (Debian 8.6).

<S_CODE_TOKEN>

Current android_arm7 binary doesn't work: 

<S_CODE_TOKEN>

I can build fzf with git clone && ./install. Resulting binary working great:

<S_CODE_TOKEN>
",knopki,2017-01-23 15:51:03
685,2016-10-01 16:51:30,"Ping @acornejo
",junegunn,2017-01-23 15:51:03
685,2016-10-14 16:15:05,"Sorry for the late reply. This is easily fixed. The root problem is that android uses a non standard libc (and lacks glibc).

Thus, we need two arm builds, one for vanilla arm Linux like Raspbian, and another for Android arm linux. I'll see if I can fiddle with the docker files over the weekend to get another arm build.
",acornejo,2017-01-23 15:51:03
685,2016-10-14 16:19:20,"Forgot to mention, this bug seems a duplicate of #465.
",acornejo,2017-01-23 15:51:03
685,2017-01-22 09:37:22,"Hi, can you guys check if the arm7 alpha binary on the below link works on the platform?

https://github.com/junegunn/fzf-bin/releases/alpha",junegunn,2017-01-23 15:51:03
685,2017-01-23 15:51:03,https://github.com/junegunn/fzf-bin/releases/0.16.2,junegunn,2017-01-23 15:51:03
685,2017-01-23 23:00:20,arm7 binary works on rpi2 (armv7l) without any problems. Thank you! :+1:,knopki,2017-01-23 15:51:03
684,2016-09-29 12:37:19,"- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

![peek 2016-09-29 14-24](https://cloud.githubusercontent.com/assets/45409/18953997/4ee26f22-8651-11e6-9800-15c7ff6313de.gif)

full command line:

<S_CODE_TOKEN>

text from the demonstration of the problem:
- Hi, thanks again for fzf
- There is, I believe, a problem with how the ANSI color codes are handled
  
  This is even clearer the coloring is done by different tools
- Command line is: data_generator | coloring |  fzf fzf_options
  
  fzf option: --read0 --no--sort -m --ansi --preview-window down:50% --no-hscroll 
              -d'DESCRIPTION|LONG_DESCRIPTION' --with-nth 1 --nth 1..3
                  --preview ""echo {} | coloring "" 
                  --bind ""ctrl-v:execute(printf {} | coloring""

where coloring is done by either 'colout' or code that I wrote which is much faster
- colout @ https://github.com/nojhan/colout
  
  options: '(NAME)_(LONG_)_(DESCRIPTION)*' red,blue
  
  the delimiter, 'DESCRIPTION', is visible (should it?)
  
  the preview shows the data I input colorized properly
- with color_pipe @ http://paste.debian.net/plain/843744
  
  options: color_pipe  NAME red '(LONG_)*DESCRIPTION' bright_blue
  
  the delimiter is NOT visible, except when the line is selected
  
  the preview does not shows the data I input colorized properly, but the OK when executed
  in the external viewer 
",nkh,2017-02-09 16:50:40
684,2016-09-29 16:58:30,"I have no idea what `ra` is, so please post the raw output on gist so I can test with it.

I added `--delimiter` and `--with-nth` option with tabular text input in mind. To keep the table aligned after the transformation, we have to keep the trailing delimiter.

<S_CODE_TOKEN>

Since you seem to be using `--read0` in this case, have you considered using `--delimiter ""\n""` instead?
",junegunn,2017-02-09 16:50:40
684,2016-09-29 17:13:55,"ra is just an application generating lines, it doesn't matter which one is used. cat a file, or anything that makes sense to you. I can, if you want, send a snippet of text but, again, any text will do.

There are two problems
    -display colors being changed
            I hope the above input about what 'ra' does make it clear what problem I encounter

<S_CODE_TOKEN>

I do understand that you did not have free text in mind, maybe a note with these examples in the doc (if I haven't missed htat), would help other users. I certainly would like to see free text supported, I think it add a great dimension to fzf
",nkh,2017-02-09 16:50:40
684,2016-09-29 17:24:55,"> There are two problems -display colors being changed

I need the raw output including ANSI escape sequences to reproduce the problem and fix it. It would be much easier for me if you can just post the output on gist than I try to install and use those programs I have no experience with.

> the delimiter being showed

`--delimiter ""\n""` should work in this case, I suppose?
",junegunn,2017-02-09 16:50:40
684,2016-09-29 17:41:41,"Having said that, I also had a case where I didn't want the delimiters to be shown, and I used non-breaking space (`echo -e ""foo\xc2\xa0bar""`) as the delimiter.
",junegunn,2017-02-09 16:50:40
684,2016-09-29 18:18:56,"https://gist.github.com/anonymous/e871debce720b8f8ef170c9298b7011b

all contain a \0 
",nkh,2017-02-09 16:50:40
684,2016-10-01 02:41:17,"<S_CODE_TOKEN>

The only difference I notice is the boldness of the text, which is correct according to the raw input (`\e[1;31m` vs. `\e[31m`). Is there any other problem you notice?

And like I said above, `\n` seems like a better delimiter here if you want to hide the delimiter.

<S_CODE_TOKEN>
",junegunn,2017-02-09 16:50:40
683,2016-09-28 09:34:30,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

user data starts at a separator, defined as an option, this allows the user to squeeze in some user data

this reduces clutter when the data is not a file  name but the file name is needed for further processing

the user data is not displayed by fzf but it is returned in the output

print ""1 :magic: user data 1\n2 :magic: user data 2"" | fzf -user_delimiter ':magic:' | further_processing
",nkh,2016-09-29 16:41:32
683,2016-09-28 09:39:34,"You might want to use the combination of `--with-nth` and `--delimiter`.
",junegunn,2016-09-29 16:41:32
683,2016-09-28 13:07:17,"base on my understanding I tried:
-d'DESCRIPTION|LONG_DESCRIPTION' --with-nth 1 --nth '1..3'

the output is limited to the first field but the delimiter is displayed!

I still need the search all the fields, that doesn't work with the options above, only the first field is searched. I may have misunderstood how to use --nth
",nkh,2016-09-29 16:41:32
683,2016-09-29 16:41:32,"> I still need the search all the fields

`--with-nth` transforms the input and thus limits the search scope. It would be extremely confusing if fzf searches invisible part of the line. Let me close this issue as you opened a new one.
",junegunn,2016-09-29 16:41:32
683,2016-09-29 17:05:54,"I think the new issue is orthogonal to this one and  related to display not search

And I meant to search in text that is not visible. 

I have though about turning the text black on black as a workaround.
",nkh,2016-09-29 16:41:32
683,2016-09-29 17:09:21,"I understood, but I have no plan to change the current behavior. I see what you're trying to do though. You have a very unusual use case, most users don't try to use fzf with multi-line entries.
",junegunn,2016-09-29 16:41:32
683,2016-09-29 17:15:17,"then I'll work around it or maybe a patch when I get time to learn so go :)
",nkh,2016-09-29 16:41:32
682,2016-09-28 09:13:56,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x ] bash
  - [ ] zsh
  - [ ] fish

IE: the comma in the command are not accepted

--bind ""ctrl-m:execute(printf {} | colout '(NAME)_(DESCRIPTION)_(LONG_)_(DEFINED_AT)_' 'red,blue,blue,blue')""
unknown action: execute(printf {} | colout '(NAME)_(DESCRIPTION)_(LONG_)_(DEFINED_AT)_' 'red

IE: $ must be backslashes even when in single quotes in --preview
--preview ""perl -e '\$ARGV[0] =~ />>> (.*)$/ ; print \$1' {} "" 
",nkh,2016-09-29 16:41:59
682,2016-09-28 09:31:41,"Option parser of fzf uses a simplistic regex to parse key binding expressions. In this case it got confused by the closing parens in the command. We could make the parser more robust, but I don't think it's possible to perfect it so fzf provides workarounds. See ""KEY BINDINGS"" section of the man page.

You probably want to use `execute:...` syntax.

<S_CODE_TOKEN>
",junegunn,2016-09-29 16:41:59
682,2016-09-28 09:38:30,"As for the second example, I'm not sure what the problem is?

<S_CODE_TOKEN>

But things are already hairy with escaping backslashes, I suggest using an external script or function.

<S_CODE_TOKEN>
",junegunn,2016-09-29 16:41:59
681,2016-09-28 09:06:52,"Dear all, 

Can someone please explain to me why I use garbled (doubled) text when using `Ctrl+r` in Bash, select an entry and then press `Return`?

Thankfully,

-Robert

![fzf](https://cloud.githubusercontent.com/assets/170947/18907356/a707b676-856b-11e6-843b-303b28a20954.gif)
",orschiro,
681,2016-09-28 09:22:29,"Please fill in [issue template](https://raw.githubusercontent.com/junegunn/fzf/master/.github/ISSUE_TEMPLATE.md) when you create an issue. Did you check everything on the template?
",junegunn,
681,2016-09-28 11:01:58,"Dear @junegunn,

Please see below.

<S_CODE_TOKEN>
",orschiro,
681,2016-10-03 16:23:28,"Which linux distro are you running? What is the version of bash? I couldn't reproduce the problem with LXTerminal or gnome-terminal on Ubuntu 14.04.
",junegunn,
681,2016-10-04 06:49:42,"Dear @junegunn,

I am running Ubuntu Unity 16.04, Bash 4.3.46(1) and GNOME Terminal 3.18.3. 

-Robert
",orschiro,
680,2016-09-28 08:55:00,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x ] bash
  - [ ] zsh
  - [ ] fish

this forces one to re-color the selection which is not always possible as the information about  what should be colored may be lost in a long chain of pipes 

I believe this should be an option as getting the string stripped has many use cases
",nkh,
679,2016-09-28 08:30:14,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

This allows the preview to highlight the searched strings
",nkh,2016-10-03 15:12:13
679,2016-09-29 16:31:44,"I'll think about it. I also thought about passing tokenized parts instead of the entire line using some expressions like `{1}`, `{2}`. But adding more special syntaxes can cause conflicts, so I'm being prudent.
",junegunn,2016-10-03 15:12:13
679,2016-09-29 17:02:48,"That would be fine, although better names would be welcome; {query} ...
",nkh,2016-10-03 15:12:13
678,2016-09-27 23:43:35,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
    - [ ] Mac OS X
    - [ ] Windows
    - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

say the search is 'abc'; fzf shows me a subset of the entries.
if I change the search to 'abc | 123', thus expanding the subset, the display is redrawn and what was the current entry, also still valid, can be moved away from the display.

keep the current entry current if possible, if not, the closest entry to the current entry
",nkh,2016-09-28 16:30:12
678,2016-09-28 16:30:12,"The new matches for 123 can have better scores than the matches for abc and therefore can come before them.

<S_CODE_TOKEN>

I believe the current behavior makes good sense, and I don't want to make it more complex. For example, you can move your cursor to the front and edit the first term to narrow down or broaden the result set, then what should happen? It's ambiguous. Let's just keep it stateless as it is.
",junegunn,2016-09-28 16:30:12
678,2016-09-28 17:12:52,"can you please explain how two  plain strings can get different scores?
",nkh,2016-09-28 16:30:12
678,2016-09-28 17:39:22,"You can find the description here: https://github.com/junegunn/fzf/blob/0.15.2/src/algo/algo.go#L39
",junegunn,2016-09-28 16:30:12
677,2016-09-27 22:43:27,"- Category
  - [x] fzf binary
- OS
  - [x] Linux
- Shell
  - [x] zsh

For instance if I run `fzf --preview='sleep 2; echo ""foo""' --bind='?:toggle-preview'` and I hold `?` it eventually crashes and prints junk to the terminal, sometimes immediately, sometimes after several seconds...

I think this happens when the preview function doesn't finish? But that's just a guess.

I'm not sure how helpful it will be but here's a `strace`: http://sprunge.us/YHQX
",DanielFGray,2016-09-28 17:53:16
677,2016-09-28 17:54:01,"Nice find. Thanks for the report. I believe the above commit should fix the problem. I'll release the version shortly.
",junegunn,2016-09-28 17:53:16
676,2016-09-27 13:03:13,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x ] bash
  - [ ] zsh
  - [ ] fish

preview is indeed very practical in many cases but when the file name is very long, it is hidden by the preview pane. an ""online"" key shortcut to switch the pane on/off would greatly help
",nkh,2016-09-27 23:36:58
676,2016-09-27 22:29:51,"I think `--bind='F2:toggle-preview'` is what you're looking for.
You can of course substitute `F2` for whatever key (or key combo) you like.

`toggle-preview` is listed under ACTIONS in the KEY BINDINGS section of the man page.
",DanielFGray,2016-09-27 23:36:58
676,2016-09-27 23:36:58,"Works like a charm. Thank you.
",nkh,2016-09-27 23:36:58
675,2016-09-27 09:01:43,"- Category
  - [x ] fzf binary

Allows searching blocks of text with embedded \n
",nkh,2016-09-28 08:22:46
675,2016-09-27 23:08:27,"having looked at the close issues, I notice that other have requested this and I saw why I would probabhaly not implemented.

A related feature could be to work on the input line up to a separator, defined as an option, this allows the user to squeeze in some user data

print ""1 :magic: user data 1\n2 :magic: user data 2"" | fzf -user_delimiter ':magic:' | further_processing
",nkh,2016-09-28 08:22:46
675,2016-09-28 02:20:41,"Have you tried these? https://github.com/junegunn/fzf/blob/master/man/man1/fzf.1#L287-L292

(related #660)
",junegunn,2016-09-28 08:22:46
675,2016-09-28 08:22:36,"No I haven't, till now, because they weren't in the man page of the version I run. --read0 does work with my version and that makes things _much_ easier. 

Thank you.
",nkh,2016-09-28 08:22:46
674,2016-09-27 08:52:35,"- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x ] bash
  - [ ] zsh
  - [ ] fish

$ ansi_colors
$ ansi_colors | fzf --ansi

only some of the ansi code are rendered properly

<S_CODE_TOKEN>
",nkh,2016-10-03 05:43:39
674,2016-09-28 01:15:20,"This seems like a terminal issue to me, using `urxvt` this works just fine for me.
",DanielFGray,2016-10-03 05:43:39
674,2016-09-28 02:46:10,"Thanks for the script. It's a known issue that fzf does not support all ANSI attributes. I'll see what I can do when I get some time. Please note that some attributes cannot be displayed correctly due to the limitation of ncurses, for example, italics. The recent version of ncurses seems to support it, but upgrading ncurses dependency may have compatibility issues on older linux distros. I'll also have to look into that.
",junegunn,2016-10-03 05:43:39
674,2016-09-28 07:19:14,"Thank you for your quick answer. I have no real problems with this, it's just what I used to test it when I saw the functionality.

Nifty little app, using it more and more, Thank you.
",nkh,2016-10-03 05:43:39
673,2016-09-27 07:45:28,"When we press CTRL-R to search from history using fsf, it scrolls the history from top to bottom.
When the history size is large,(e.g. > 100,000) it is annoying since the scroll occurs each time we hit CTRL-R.
To avoid it, we should append `-r` to `fc` command so that it shows the history in reverse order, and remove `--tac` from `fzf`.
",pjmtdw,2016-09-28 01:13:48
673,2016-09-28 01:13:48,"sorry it does not pass the test. I should close it until I find the reason.
",pjmtdw,2016-09-28 01:13:48
673,2016-09-28 02:19:01,"No problem. I really like what you did here. Maybe the option requires a certain version of zsh that is not available on Travis CI? I'll also take a look later in the day.
",junegunn,2016-09-28 01:13:48
673,2016-09-28 16:34:43,"The tests pass locally on my machine with zsh 5.2. Travis CI env has zsh 4.3.17 which is way too old. And in my opinion it makes not much sense to try to support it. I'll see if I can install a newer version of zsh there.
",junegunn,2016-09-28 01:13:48
672,2016-09-26 12:43:04,"<!-- Check all that apply [x] -->
- Category
  - [x] Key bindings
- OS
  - [x] Linux
- Shell
  - [x] bash
    <!--
    ### Before submitting
- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi! As much as I adore fzf's ctrl+R behaviour, sometimes it gives too many results and requires more effort to get to the needed command than the original ctrl+R of bash.

I ended up binding fzf's ctrl+R to ctrl+F instead (by modifying key-bindings.bash) and use original ctrl+R and fzf's search interchangeably now. 

What do you think, 
1) is it possible to make this keybinding easily configurable
or maybe
2) just setting it to ctrl+F by default can be discussed?
",jimmytheneutrino,2016-10-05 17:07:19
672,2016-09-26 12:57:26,"A few things you might want to consider first:
1. Sorting is by default disabled. You can enable it by pressing CTRL-R again.
2. If you want to enable sorting by default, set `export FZF_CTRL_R_OPTS='--sort'`
3. Prefix each search term with `'` (single-quote) to turn it into an exact (not fuzzy) term.
4. Or you can even add `--exact` to FZF_CTRL_R_OPTS as well. Then prefixing a term with `'` will make it fuzzy term.

Although fzf does not provide an option to customize the key, you can access the definition with `bind -s`, so you can use the information to customize the binding.

<S_CODE_TOKEN>
",junegunn,2016-10-05 17:07:19
672,2016-10-05 13:31:42,"Thanks! 

It seems --exact does work pretty much like default ctrl+r behaviour.

1)
One more thing though.
Bash's reverse-search-history immediately invokes the command on enter. 
Fzf copies the command to the command line instead. 
Is it configurable too?

2) 
I think it is worth putting such a snippet (with binding customization) in the readme.
",jimmytheneutrino,2016-10-05 17:07:19
672,2016-10-05 17:07:19,"1) There's an open issue for that: #477. I have a solution for zsh (enter / ctrl-x), but not for bash. If you think you can hack it up let me know.

2) Agreed. I'll add a page to the wiki when I get some time.
",junegunn,2016-10-05 17:07:19
671,2016-09-25 09:08:25,"<S_CODE_TOKEN>
",junegunn,2016-09-25 09:12:00
670,2016-09-24 19:41:57,"Fix #668

Handle uppercase letters in program names. This also deals with `-` and
`.`, both of which are quite common in program names, e.g., `xdg-open`
and `foo.sh`.
",maverickwoo,2016-09-24 20:15:24
670,2016-09-24 20:15:30,"Thank you!
",junegunn,2016-09-24 20:15:24
670,2016-09-24 20:33:28,"No problem. I really like fzf. My thanks to you!
",maverickwoo,2016-09-24 20:15:24
669,2016-09-24 16:29:30,"Suggested by @DanielFGray in the Gitter channel. I realized that it's actually easy to implement it.
1. Make the window scrollable with mouse scroll
2. Add bindable actions: `preview-up`, `preview-down`, `preview-page-up`, `preview-page-down`
",junegunn,2016-09-24 17:02:14
669,2016-09-24 18:34:21,"Hi @junegunn, when i'm trying this example:
`fzf --preview 'highlight -O ansi {}' --bind alt-j:preview-down,alt-k:preview-up`
i'm getting this:
`unknown action: preview-down`
Am i doing something wrong?

I'm using Linux with zsh 5.2 and tmux 2.2.
Thank you for your work!
",deathmaz,2016-09-24 17:02:14
669,2016-09-24 18:45:05,"Did you build fzf from source? Prebuilt binaries are uploaded only when I release a new version.
",junegunn,2016-09-24 17:02:14
669,2016-09-24 18:47:26,"Try `make install` inside `src` directory.
",junegunn,2016-09-24 17:02:14
669,2016-09-24 18:55:49,"> Did you build fzf from source? Prebuilt binaries are uploaded only when I release a new version.

Sorry, didn't know about this.

> Try make install inside src directory.

Thank you for this, preview scrolling works really great!
",deathmaz,2016-09-24 17:02:14
669,2016-09-24 19:15:00,"No problem, thanks for testing it. I just added `preview-page-up` and `preview-page-down` as well (8c8b5b3).
",junegunn,2016-09-24 17:02:14
669,2016-09-24 19:17:41,"Great, thank you!
",deathmaz,2016-09-24 17:02:14
668,2016-09-24 05:24:33,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I am on the latest master 7fa5e6c. On a fresh terminal, I type `emacsclient ~/a` and press tab. Then `-bash: _fzf_orig_completion_g++: bad substitution` will be displayed, giving this terminal screen:

<S_CODE_TOKEN>

At this point if I press tab again, then the normal completion will continue and this error will not happen a second time in the same shell session.

I believe it has to do with lines 280 and 281 of `completion.bash`:

<S_CODE_TOKEN>

According to the bash 4 manual (I am on `4.4.0(1)-release`), a name is:

> A word consisting only of alphanumeric characters and underscores, and beginning with an alphabetic character or an underscore.

I guess that means `_fzf_orig_completion_g++` is indeed not a name?
",maverickwoo,2016-09-24 20:15:24
668,2016-09-24 13:20:06,"Hi, thanks for the report. Can you check if this patch helps?

<S_CODE_TOKEN>
",junegunn,2016-09-24 20:15:24
668,2017-01-11 05:50:44,"Same issue with my bash.

Error Prints:
---
<S_CODE_TOKEN>

Bash Version:
---
<S_CODE_TOKEN>

FZF version
---
<S_CODE_TOKEN>
",j5shi,2016-09-24 20:15:24
668,2017-01-11 06:08:13,"@j5shi The support for Cygwin was discontinued since 0.9.0 due to the portability issue of ncurses library. But I'm working on a new renderer that does not depend on ncurses (#782), and it might be possible that we can make the latest fzf work on Cygwin again (#794). I'll let you know if it works out.",junegunn,2016-09-24 20:15:24
668,2017-01-11 06:39:07,Sounds exciting! Thanks!,j5shi,2016-09-24 20:15:24
668,2017-02-15 14:25:23,"Had same issue (on Cygwin) with xdg-open.
Here's what I have now that fixes it:
<S_CODE_TOKEN>
There probably would be other possible situations like this, this should be made more robust, with all special chars replaced with something (preferrably something unique).",gene-pavlovsky,2016-09-24 20:15:24
667,2016-09-21 10:47:40,"- Category
  - Key bindings
- OS
  - Linux
- Shell
  - bash

fzf ver _7fa5e6c_

Whenever I select an item with fzf while multiple keybindings have been defined with `--expect`, the default (ie no binding) selection stops working, as fzf thinks that one of the bindings were used.

Modified one of the fzf examples. Run it in any git projects and simply press `return` instead of using the bindings. For me, `ctrl-m` is always registered.

<S_CODE_TOKEN>
",laur89,2016-09-21 13:50:25
667,2016-09-21 13:12:06,"""return"" and ""enter"" are just synonyms for ""ctrl-m"", we can't differentiate between them in terminal.

See: http://superuser.com/questions/595340/what-do-ctrl-j-ctrl-m-and-ctrl-i-mean-in-microsoft-notepad
",junegunn,2016-09-21 13:50:25
667,2016-09-21 13:50:25,"Would have never guessed.
",laur89,2016-09-21 13:50:25
666,2016-09-20 12:01:01,"- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

This happened by searching for a pattern, and then moving in the list. I don't remember whether I was at a specific place in the list.
",edi9999,2016-09-20 16:18:45
666,2016-09-20 12:11:58,"Here's a way to reproduce the issue : 

`v=""$(yes 'a' | head -n 33000 | tr -d '\n')foobar""; echo ""$v"" | fzf`, and then, search for foobar in the search bar.
",edi9999,2016-09-20 16:18:45
666,2016-09-20 16:01:27,"Sorry about that, let me fix it.
",junegunn,2016-09-20 16:18:45
666,2016-09-20 16:33:34,"0.15.1 is up. Thanks for the report.
",junegunn,2016-09-20 16:18:45
666,2016-09-20 16:55:02,"No problem! Thanks a lot :-). 
",edi9999,2016-09-20 16:18:45
665,2016-09-20 03:11:43,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [X] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [X] zsh
  - [ ] fish

<!--
### Before submitting
- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->I cd to a directory with a few files and then ""ll ma**"" and hit tab.  Then I get the error in the subject line.  I use fzf on most of my machines, but this one is a limited shell access on a shared host for one of my websites (arvixe)  The install seemed to go ok, and oddly it seems to work from vim - but not from zsh.
",chrisamow,2016-09-20 17:14:03
665,2016-09-20 03:42:10,"Which version of zsh are you running? Check if the following code works there.

<S_CODE_TOKEN>
",junegunn,2016-09-20 17:14:03
665,2016-09-20 04:13:25,"Interesting...!

➜  ~  ★ zsh
--version  
[0] 0:11:13
zsh 4.3.11 (x86_64-redhat-linux-gnu)
➜  ~  ★
FOO=""BARBAZ""  
[0] 0:11:17
➜  ~  ★ echo
${FOO:0:-2}  
[0] 0:11:49
zsh: invalid length: -2
➜  ~  ★ #
BARB                                                                      [1]
0:11:56

On 09/19/2016 10:42 PM, Junegunn Choi wrote:

> Which version of zsh are you running? Check if the following code
> works there.
> 
> FOO=""BARBAZ""
> echo ${FOO:0:-2}
> 
> # BARB
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/junegunn/fzf/issues/665#issuecomment-248193447,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AFjOQYFAIqHrz42-l2fP6IWZ9S7X2BPXks5qr1YXgaJpZM4KBLhN.

## 

chris@amow.com                         PRIVACY, spread the word
public_key: http://amow.com/chris.txt
fingerprint: C242 719D 3252 6309 F5F5  0CC4 EC6B F58D BC2D 2A8A
",chrisamow,2016-09-20 17:14:03
665,2016-09-20 17:14:03,"Yeah, I haven't tested the code with the older versions of zsh. If you're interested in making it work with older versions, please feel free to send me a pull request. Thanks.
",junegunn,2016-09-20 17:14:03
665,2016-09-20 23:19:27,"Ok, I think that version of zsh was before 2012 (!) so I'll probably just update it.  Thank you sir!
",chrisamow,2016-09-20 17:14:03
664,2016-09-16 13:44:43,"Dear all, 

I must admit that I not fully understand your documentation. 

Thus please bear with me that I am asking my question here. 

Originally I am coming from [this conversation on AskUbuntu](http://askubuntu.com/questions/825625/how-can-i-extend-the-tab-key-auto-completion-in-the-terminal-to-text-in-the-midd). 

There I was recommended to take a look at [this](http://superuser.com/questions/561451/is-there-a-shell-which-supports-fuzzy-completion-as-in-sublime-text/607338#607338) conversation which mentions fzf as a potential solution to my original question. 

Thus I would like to re-ask:

Can I use fzf to achieve the type of auto-completion originally asked on AskUbuntu in Bash?

Thankfully,

-Robert
",orschiro,2016-09-25 08:03:05
664,2016-09-18 16:44:11,"Can you clarify which part of the documentation you don't understand?
- https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh
- https://github.com/junegunn/fzf/wiki/Examples-(completion)

> Can I use fzf to achieve the type of auto-completion originally asked on AskUbuntu in Bash?

I believe so, but you might want to try out [the solution](http://superuser.com/questions/561451/is-there-a-shell-which-supports-fuzzy-completion-as-in-sublime-text/607338#607338) suggested in the answer first.
",junegunn,2016-09-25 08:03:05
664,2016-09-25 06:29:27,"Dear @junegunn,

Thanks for your resources!

After having watched [this](https://www.youtube.com/watch?v=AX3u10bruOI) video I finally understood what to do. 
1. I installed fzf using the Git method
2. I type in `up`, press `Ctrl+t` and search for `192`
3. I confirm with `Return`
4. The absolute path to the file containing `192` is being inserted after the `up`. 

This is wonderful! :-)

-Robert
",orschiro,2016-09-25 08:03:05
664,2016-09-25 08:03:05,"Yeah, and you can do something like `up ~/**<TAB>` (fuzzy completion).
",junegunn,2016-09-25 08:03:05
664,2016-09-25 08:12:14,"@junegunn,

`up ~/**<TAB>` doesn't work for me in Bash. 

-Robert
",orschiro,2016-09-25 08:03:05
664,2016-09-25 08:35:55,"@orschiro Oh you're right, fuzzy completion in bash only works with a hard-coded set of commands. `vim ~/**<TAB>` will work. See #536 for the details.
",junegunn,2016-09-25 08:03:05
664,2016-09-25 09:51:17,"I see, thank you @junegunn!

-Robert
",orschiro,2016-09-25 08:03:05
663,2016-09-15 17:58:49,"Added a binding for searching from your home independently of your current directory. Change was tested on bash and zsh. Was not made for the .fish file. 

Readme was not properly updated.
",m2march,2016-09-15 19:17:52
663,2016-09-15 19:17:52,"Thanks for your effort, but I decided long ago not to add more shell stuff to this repository (there has not been a new shell key binding since March 2014). I believe you can define it on your shell configuration files.
",junegunn,2016-09-15 19:17:52
663,2016-09-15 19:28:50,"Yes. I have, just thought I'd share in case it was of interest.

Thanks for reading.

Best regards,
March

On Thu, Sep 15, 2016 at 4:17 PM Junegunn Choi notifications@github.com
wrote:

> Thanks for your effort, but I decided long ago not to add more shell stuff
> to this repository (there has not been a new shell key binding since March
> 2014). I believe you can define it on your shell configuration files.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/junegunn/fzf/pull/663#issuecomment-247424924, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAsyiouFwckWEoy59i5TGTP8osrNDqokks5qqZnkgaJpZM4J-KM8
> .
",m2march,2016-09-15 19:17:52
662,2016-09-15 17:33:05,"Is there an easy way to configure `fzf` to work inside the NodeJS repl? (or even the coffee-script repl?)
",aleclarson,2016-09-28 02:56:03
662,2016-09-16 05:15:18,"I'm not a node.js guy, so I haven't tried it, but I did that with Ruby and Clojure REPL, so I suppose it should be possible in a similar way. See http://junegunn.kr/2016/02/using-fzf-in-your-program/
",junegunn,2016-09-28 02:56:03
662,2016-09-27 21:05:04,"here's how I interact with `fzf` in node

<S_CODE_TOKEN>
",kswilster,2016-09-28 02:56:03
662,2016-09-28 02:56:03,"@kswilster Thanks!
",junegunn,2016-09-28 02:56:03
661,2016-09-15 11:27:46,"Like the title says, the up down scrolling is not working.
When I press Ctrl+R to call out fzf, I cant select commands using up and down keys.
Fzf will exit and show ""[A"" on the shell for ""up"" key and ""[B"" for down key.
",ldzhjn,2016-11-07 18:08:05
661,2016-09-15 18:39:45,"I haven't had a chance to try WSL yet. Maybe the terminal emulator is sending difference character sequences on arrow keys. I'll take a look at it when I get a chance. Until then, you can use CTRL-J/K or CTRL-N/P combos instead.
",junegunn,2016-11-07 18:08:05
661,2016-10-31 20:27:46,"The work around works. Hope you get some time to investigate 
",jrock2004,2016-11-07 18:08:05
661,2016-11-09 13:56:36,"Have you tried it? It should be fixed now.
",junegunn,2016-11-07 18:08:05
661,2016-11-09 14:59:28,"I can use ctrl j/k only
",jrock2004,2016-11-07 18:08:05
661,2016-11-09 15:03:10,"Even with the latest version? I myself confirmed that the issue was
resolved in 0.15.6.
- junegunn
",junegunn,2016-11-07 18:08:05
661,2016-11-09 18:42:23,"You are right. It works, but sometimes when I press up It will type an A or if I press down it types a B. Should I open a new issue for this?
",jrock2004,2016-11-07 18:08:05
661,2016-11-10 01:37:08,"Hmm, I thought 100ms delay was enough, and I was no longer able to reproduce the problem after applying the delay. You might want to experiment with different values of `retries` that I added in d206949f6258db36060af3e84fdae15cb7b9a45c. FYI, I tested on ConEmu.
",junegunn,2016-11-07 18:08:05
661,2016-11-10 01:39:40,"Or I just need to slow down. lol
",jrock2004,2016-11-07 18:08:05
661,2016-11-16 15:50:57,"Hmm, I'm seeing the same issue occasionally. Unfortunately I haven't found a proper fix to the problem. One thing to note is that the problem is not reproducible if you're on tmux.
",junegunn,2016-11-07 18:08:05
661,2016-11-19 13:48:24,"The problem will be properly fixed in 0.15.8.

https://github.com/junegunn/fzf/commit/8c661d4e8c8a4b643155aa46481ac92f6ebf75b9
",junegunn,2016-11-07 18:08:05
660,2016-09-14 12:35:33,"Currently it's not possible to pipe null-terminated `find` results into `fzf`. Perhaps add an option to define the delimiter, so this would be possible:

<S_CODE_TOKEN>
",laur89,2016-09-15 07:48:00
660,2016-09-14 12:55:56,"There is an undocumented `--read0` option you can use, but there's no promise the option will be available in the future releases. I decided to leave it as undocumented because
- the interface of fzf is not suitable for multi-line entries
- the output will be ambiguous when `--multi` is set unless we also add `--print0`

See https://github.com/junegunn/fzf/commit/8270f7f0cadf14c76feaadfb4068ccdf599a25e8

Is there any reason you have to use `-print0`? Because of multi-line entries?
",junegunn,2016-09-15 07:48:00
660,2016-09-14 13:49:11,"I've come to understand using null-terminated input/output is de facto data standard for foolproof parsing. Never come across a filename that incorporates newlines, but all the custom find wrappers I'm using and now am in process of integrating with fzf output `\0`-terminated list, and other functions that use this wrapper already assume to consume it.

Changing my wrappers to produce & consume newline-delimited data would be trivial, but because of the mentioned understanding I feel like `\0`-terminated feed would be more.. i dunno, standard?

But yeah, displaying a single item spanning over multiple lines in fzf is a pickle alright.
Not a nice solution, but perhaps display it in a single line, but add `\n` in the name for displaying purpose?
",laur89,2016-09-15 07:48:00
660,2016-09-14 15:52:35,"Come to think about it, it makes sense for fzf to have `--print0` though I can't think of a valid use case of `--read0`

<S_CODE_TOKEN>
",junegunn,2016-09-15 07:48:00
660,2016-09-14 18:29:11,"fzf is already displaying files with newlines correctly, if `--read0` is provided.

<S_CODE_TOKEN>

and compare

<S_CODE_TOKEN>

vs

<S_CODE_TOKEN>

We could abuse `xargs` to remove the newline in fzf like this:

<S_CODE_TOKEN>

(without the `-0` flag!) between find and fzf pipes, but you'd end up with a space between `foo` and `bar` in fzf. Not too bad, but still inferior to the `-read0` option.

Your proposed solution, if I understand correctly would be this:

<S_CODE_TOKEN>

Potential bug?

Anyway, I'm happy with the `--read0`. How likely you are to remove that option?
",laur89,2016-09-15 07:48:00
660,2016-09-15 02:41:17,"> Your proposed solution

Nah, it's not a solution to your problem. I wanted to present a case where `--print0` would be useful, that is passing file names with spaces (not newlines) to xargs for further processing.

<S_CODE_TOKEN>

So I mean, although I still don't see a practical value in `--read0` since I've never needed to pass items with newlines characters, `--print0` has a valid use case (chaining with xargs).

> How likely you are to remove that option?

Not likely. The new line character is not correctly displayed on the screen and simply ignored, I'll have to mend it somehow in the future if I'm going to keep the option.
",junegunn,2016-09-15 07:48:00
660,2016-09-15 07:48:00,"> The new line character is not correctly displayed on the screen and simply ignored, I'll have to mend it somehow in the future if I'm going to keep the option.

But isn't it good that it's ignored? Following the example I gave in the previous post, the newline containing `foo\nbar` would appear in `fzf --read0` as `foobar` on a single line, which imo is as good as it gets.

I'm going to hope that the option is kept in, and start using it. Fzf really is an awesome tool, thanks again.
",laur89,2016-09-15 07:48:00
660,2016-09-15 18:15:32,"> But isn't it good that it's ignored?

Then there is no way to tell the difference between `foobar` and `foo\nbar`, or even `f\no\no\nb\na\nr` so I think there should be an indicator of the presence of a newline character.
",junegunn,2016-09-15 07:48:00
660,2016-09-16 08:13:14,"Fair enough. Perhaps add differently colored `\n` as a placeholder?
",laur89,2016-09-15 07:48:00
660,2016-09-18 17:02:02,"> Perhaps add differently colored \n as a placeholder?

Yeah, that's what I have in mind. But it's not on my priority as it's unlikely that one will use fzf with multi-line entries. Anyway, I just released a new version of fzf, with `--read0` and `--print0`.
",junegunn,2016-09-15 07:48:00
660,2016-09-19 22:26:14,"> just released a new version of fzf, with --read0 and --print0

Boom. Seriously, fzf is the next best thing since sliced internet.
",laur89,2016-09-15 07:48:00
659,2016-09-13 15:33:33,"I've seen a few feature requests closed because you don't want to support endless features when they can be built on top of `fzf`. That's reasonable, so I'm asking this as a bit of a general question rather than submitting a PR.

Examples:
- `fzf` is slow on large directory structures

There are all kinds of things you could do to mitigate this and e.g. #578 was closed. But you could also support a maximum depth in the default `find` command.
- `fzf` doesn't support ""frecent"" or ""favourite"" directories

Likewise, many suggestions for combining with `fasd` or `j`/`z`. But you could also inject something like `FZF_EXTRA_DIRECTORIES` into the default find command.

The motivation for supporting a couple of things like this natively would be:
- simplicity of setup for users of common features
- avoid soft-forking the default command (can continue to take improvements/compatibility changes to it in future, whereas setting e.g. `FZF_ALT_C_COMMAND` yourself sort of forks you from the defaults.

Can submit PRs if you are open to such things.
",sambrightman,2016-09-14 12:44:57
659,2016-09-13 15:53:11,"I see where you're coming from, but don't quite agree. All the reasons for rejecting such PRs are imo completely justified, for the same reasons you just gave.

It's just not worth it complicating a nice program that does one thing really good, with countless other options.

While using/setting up fasd et al do require extra effort, users still end up with far superior configuration. The setup isn't difficult per se, it just takes some additional time.

The fact that fzf adheres to the [unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy) makes it extremely usable by writing your own logic in shell functions and binding them up with fzf. That sort of extra functionality simply belongs outside the scope of fzf.
",laur89,2016-09-14 12:44:57
659,2016-09-14 07:14:10,"I understand. I would add though that composability is a key part of that philosophy. I'm particularly not keen on the soft-fork issue, which is more like overriding inheritance than composition. Is the currently a way to achieve such things as the second part with overriding the whole `FZF_ALT_C_COMMAND`? 

Relative complexity in the examples of integrating with other tools could be a sign that composability is not optimal as well. Replacing `cd` with `pushd` then needs to also replace the entire key binding/`__fzfcd__` function. I see the generic version of default functionality as ""find dirs starting from some roots, apply some filtering, print the selected one as the input to another command"". The root dirs, filters and command are the potential modification points. However, I can certainly see that you might not want to be generic, and just make the statement ""the default functionality is exactly the function provided and no more"".
",sambrightman,2016-09-14 12:44:57
659,2016-09-14 12:44:57,"Please don't forget to fill in [the form](https://github.com/junegunn/fzf/blob/master/.github/ISSUE_TEMPLATE.md) when you create an issue to avoid confusion. I thought you were talking about extending fzf binary beyond `FZF_DEFAULT_OPTS` and `FZF_DEFAULT_COMMAND`, which direction I and @laur89 don't agree with. But reading your second comment, I realized that you were actually talking about the key bindings for bash/zsh/fish. Unix philosophy and composability are the concepts that apply to fzf, the program, but not necessarily to those extra key bindings. They are fully-implemented features or applications, rather than composable building blocks.

Basically, the extra shell stuff this repository provides is optional and is not the core part of the project. I see it as a reference implementation, an example of what one can build with fzf and it's not something you have to use. We provide a few basic ways to configure their behavior, and probably that's good enough for many users, but no more than that. If you want to further customize the behavior, it's better, much more flexible and probably easier that you just write your own version.

I'm not interested in extending the extra shell stuff in this repository because of relatively high maintenance burden. We can even consider extracting them out as a separate repository, and there have been some attempts (e.g. https://github.com/atweiden/fzf-extras) but I'm keeping them for backward compatibility, for the users who expect them to be readily available when they clone the repository.
",junegunn,2016-09-14 12:44:57
659,2016-09-14 16:58:04,"Clear, thanks. It was a general question about project policy, so the form didn't seem appropriate (other than ticking everything). In the end it is indeed mostly about default behaviour and therefore the bindings.
",sambrightman,2016-09-14 12:44:57
658,2016-09-13 10:55:20,"What does it do?
",laur89,2016-09-13 17:56:54
658,2016-09-13 16:55:02,"`+` prefix is the convention used to represent the opposite of an option. So `+m` is the opposite of `-m` (or `--multi`) and can also be written as `--no-multi`. The same goes for `+e`, `+x`, and `+i`.

Although I skipped to mention in the manpage, every long option has `--no-xxx` counterpart that negates the option.

`-m` is not enabled by default so you probably don't need to use `+m` ever. The only reason I used `+m` in some scripts is to make sure to turn `-m` off in case it's enabled in `FZF_DEFAULT_OPTS`.
",junegunn,2016-09-13 17:56:54
658,2016-09-13 17:56:54,"Wasn't aware of this convention. TIL.
",laur89,2016-09-13 17:56:54
657,2016-09-10 19:41:08,,ishanray,2016-09-11 03:13:40
657,2016-09-11 03:14:35,"Thanks. FYI, I'm working on a major overhaul of algo.go. See #638.
",junegunn,2016-09-11 03:13:40
656,2016-09-08 21:30:07,"<!-- Check all that apply [x] -->
- Category
  - [X] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [X] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [X] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [X] bash
  - [ ] zsh
  - [ ] fish

<!--


Describe your problem or suggestion from here ...
-->

**fzf vesion 0.13.5**
**not using tmux**

fzf process ran interminably and memory consumption increased to 8GB and continued to rise until FZF find killed by user.  The command I ran was `vim ~/** <tab>`

The results are shown in these screenshots

![at 2016-09-08 14 11 58]  **\- fzf is consuming 3.9GB out of 20GB of ram** (https://cloud.githubusercontent.com/assets/1812219/18367423/ddd9aaf2-75cf-11e6-822e-17fa5d781928.png)

![at 2016-09-08 14 12 52] - **fzf memory consumption keeps growing.**(https://cloud.githubusercontent.com/assets/1812219/18367463/1e324d8e-75d0-11e6-8215-fa402b440c4f.png)

![2016-09-08 14 14 03] - had to `<ctrl-c>` out of fzf because it was never ending & memory consumption increased without bound.(https://cloud.githubusercontent.com/assets/1812219/18367502/55977b00-75d0-11e6-82f8-6b3e14895a60.png)

I think it has to do with the `-L` passed to find. It is going into a circular reference.  
",jonpolak,
656,2016-09-11 03:11:50,"Hi, can you provide the steps to reproduce the problem? I couldn't reproduce with the following script.

<S_CODE_TOKEN>
",junegunn,
656,2016-09-14 20:45:05,"The output of find -L  -- a short sample appended below:

<S_CODE_TOKEN>

continues forever ... and it feeds it to fzf. So the error isn't in fzf it's in find. 
",jonpolak,
656,2016-09-14 21:18:38,"Here's [the first 412kB of output](http://pastebin.com/Yjn3jEZN). I let it run for a few seconds and I had about 140M of text output. The issue is this program PlayOnLinux that makes `find -L` go into an infinite loop. 
",jonpolak,
656,2016-09-18 16:36:30,"You can customize the command used to workaround the issue. See: https://github.com/junegunn/fzf#settings

I'm not sure about removing `-L` from the default command though, I personally like/need the option. Is there any way to avoid the issue without removing `-L`?
",junegunn,
655,2016-09-07 13:07:01,"- OS
  - Linux (debian testing)
- Shell
  - bash [4.3.46(1)-release (x86_64-pc-linux-gnu)]
- fzf ver `1c81a58`

Setting shell to vi mode prohibits `C+R` & `A+C` bindings to execute; instead, this is in command line:

<S_CODE_TOKEN>

Only when `enter` is pressed, then fzf launches as expected. Note that `C+T` expands immediately.

Reproduce:
- add `set editing-mode vi` to ~/.inputrc

Edit: I read everything, but it just now clicked:

> If you use vi mode on bash, you need to add set -o vi before source ~/.fzf.bash in your .bashrc, so that it correctly sets up key bindings for vi mode.

So this option probably can't be set via `.inputrc`, correct?
",laur89,2016-09-08 13:19:23
655,2016-09-08 13:19:23,"Yup, can't set vi mode in .inputrc either.
",laur89,2016-09-08 13:19:23
655,2016-09-09 07:48:53,"We haven't found a nice solution to this; see #39.
",junegunn,2016-09-08 13:19:23
655,2016-09-11 22:09:15,"Nah, it's not too bad requirement to simply add the option to bashrc before fzf is sourced. I simply didn't connect the dots that the caveat applied to vimrc as well. Perhaps mention it in the readme?
",laur89,2016-09-08 13:19:23
654,2016-09-06 18:05:50,"Fixes #643
Doesn't break #648 

Note that this will break if the socket filename contains any commas, but in my testing, tmux completely stopped functioning when I put a comma in the socket filename.
",qiemem,2016-09-07 12:36:32
654,2016-09-07 12:36:49,"Great, thanks!
",junegunn,2016-09-07 12:36:32
653,2016-09-05 22:55:12,"<!-- Check all that apply [x] -->
- Category
  - [] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

In linux console mode, alt-c works. 

In X windows and xterm, alt-c doesn't work, prints weired character,  but esc-c works. 

So it must be X windows doing something strange but I am not sure how alt-c is interpreted..
",githubfun,2016-09-24 04:10:32
653,2016-09-22 11:00:56,"Hi @githubfun , what exactly do you mean by X windows ? Is this some kind of terminal ?

I just tested on my `xterm`, and `alt-c` seems to be working well.
",edi9999,2016-09-24 04:10:32
653,2016-09-22 23:13:36,"Hi @edi9999 
when I boot linux I get into linux console, there alt-c works. Then I run startx to get in to X windows environment, in which alt-c does not work in xterm or urxvt, however esc-c works. I use debian testing and icewm as windows manager. Thanks!
",githubfun,2016-09-24 04:10:32
653,2016-09-23 12:45:14,"Do other bindings like Alt+b work ? 

`Alt+b` means go back one word in readline
",edi9999,2016-09-24 04:10:32
653,2016-09-23 12:46:16,"What does `bind -lp` show ?
",edi9999,2016-09-24 04:10:32
653,2016-09-24 04:10:32,"I don't think it's an issue of fzf, you'll have to figure out how to make your terminal emulator interpret alt-something as esc-something. We experienced a very similar issue with iTerm2, and it provides an option for that. https://github.com/junegunn/fzf/issues/164
",junegunn,2016-09-24 04:10:32
652,2016-09-05 12:59:33,":)
",zfogg,2016-09-18 17:04:13
652,2016-09-05 13:42:52,"this fixes $MANPATH on my OS X (10.11.6) machine for homebrew's fzf

<S_CODE_TOKEN>

potentially useful debug info:

<S_CODE_TOKEN>

while installing to `$fzf_base/`, do any systems install to `./man/` vs `./share/man/`?
i could add an `if 'OS_X'` check in there, if so
",zfogg,2016-09-18 17:04:13
652,2016-09-05 17:20:00,"Thanks for looking into it. The path is invalid only when you installed fzf using Homebrew, otherwise (git clone) the path is correct. And in that case we don't have to add it to MANPATH as Homebrew creates symlinks to those files inside `/usr/local/share/man/man1` which is already in MANPATH. So I would say that the current code is correct in that it does not update MANPATH when the directory is not found.
",junegunn,2016-09-18 17:04:13
651,2016-09-05 12:56:46,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X (OS X 10.11.6)
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi there! First of all, fzg is AMAZING thank you for such a great tool.

Problem: When I try to do a reverse history lookup, I get the following error message( control + r ):

<S_CODE_TOKEN>

I installed fzf the recommended way, with the following options:

<S_CODE_TOKEN>

I'm using tmux `2.2` and bash `4.3.46(1)-release`, both installed with homebrew.

Also this is the sha of the fzf repo currently:

<S_CODE_TOKEN>

Please let me know if there is any more info I can provide? Thanks in advance!
",bossjones,2016-09-19 04:08:56
651,2016-09-05 17:12:27,"Strange, I've never experienced the problem. Can you post your bashrc?
",junegunn,2016-09-19 04:08:56
651,2016-09-05 17:17:58,"Thanks for the quick reply!

Sure! Currently not using my `.bashrc` but I am using my `.bash_profile`. Also might be important, i'm using https://github.com/Bash-it/bash-it as well:

<S_CODE_TOKEN>
",bossjones,2016-09-19 04:08:56
651,2016-09-05 17:27:41,"Thanks for the follow up. Since your file sources several external files, it's hard to tell where the problem lies with what's given. Can you try commenting out every line in the file except the last line (`[[ -f ~/.fzf.bash ]] && source ~/.fzf.bash`) and see if you still have the issue?
",junegunn,2016-09-19 04:08:56
651,2016-09-05 17:37:59,"Great suggestion, Soon as I commented everything out and reloaded, `fzf` worked! So now i'm thinking it could either be something funky i'm doing in another one of those files i'm `sourcing` or maybe I enabled a plugin in `bash-it` that doesn't play nice. 

I'll figure out what the culprit is just for historical purposes ( In case someone else is in the same boat as me ), but we can consider this git issue solved, thank you for your help!!
",bossjones,2016-09-19 04:08:56
651,2016-09-05 17:39:38,"Thanks, let me know if you find the culprit. I could probably make the code more robust so it works with whatever config that interferes with it.
",junegunn,2016-09-19 04:08:56
651,2016-09-05 18:10:59,"Okay I figured it out, you won't believe what it is. Seems as though it is a combination of `bash-it` and iTerm3's `shell integration` script.

The sha of `bash-it` i'm on just in case that matters:

<S_CODE_TOKEN>

I was able to figure things out because I have another laptop that has almost the exact same config, but fzf actually worked on there. Digging through my `.bash_profile` I noticed 1 line in particular was missing before I called `source $BASH_IT/bash_it.sh`:

<S_CODE_TOKEN>

The contents of that script is:

<S_CODE_TOKEN>

I didn't dig enough into the code to see why the combination of the two did that, but that's the culprit! For now I just copied the file over, did `chmod +x ${HOME}/.iterm2_shell_integration.bash` and boom, good to go. Thanks again man!!!

EDIT:

Oh and the full error again, also while looking at what the function is doing:

<S_CODE_TOKEN>
",bossjones,2016-09-19 04:08:56
650,2016-09-05 11:35:58,"- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

Steps to repro:
1. Have a folder `test` with a `.gitignore` claiming to ignore folders `build and .tox`
2. Have `FZF_DEFAULT_COMMAND` be `ag -g """"` so that `.gitignore` is considered
3. `ag -g """"` works: n folder `test`, `ag -g """" | fzf` ignores `build` and `.tox`. Same if called from another folder.
4. Problems:
- Press `Ctrl+T` -> tmux split contains `build` but not `.tox`
- Do `vim **<TAB><TAB>` -> tmux split contains `build` and `.tox`

Confusion

Thank you for such an amazing tool!
",xoliver,2016-09-07 11:53:17
650,2016-09-06 18:01:55,"For various reasons, CTRL-T and fuzzy completion require separate configuration.
- Set up `$FZF_CTRL_T_COMMAND` for CTRL-T
- See https://github.com/junegunn/fzf#settings for customizing fuzzy completion
",junegunn,2016-09-07 11:53:17
650,2016-09-07 11:53:17,"That works perfectly, and I should have spotted that in the README, my bad. Thanks for the reply!
",xoliver,2016-09-07 11:53:17
649,2016-09-04 09:01:47,"<!-- Check all that apply [x] -->
- Category
  - [ x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ x ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [ x ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ x ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Trying to use [ccat](https://github.com/jingweno/ccat) instead of coderew, highlighting does not work. My options example:

<S_CODE_TOKEN>
",aliev,2016-09-04 12:07:29
649,2016-09-04 11:52:20,"Try `--color=always` option. Without the option, ccat will not print ANSI color codes when stdout is not a tty device.
",junegunn,2016-09-04 12:07:29
649,2016-09-04 12:00:48,"@junegunn thank you it works!
",aliev,2016-09-04 12:07:29
648,2016-08-31 03:31:24,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Latest version doesn't work for me if I set tmux with -L option, ex: tmux -L tmux-test-session, when I press ctrl+r, fzf doens't showing up. Fzf working fine without -L option.

any help?
",febrianrendak,2016-08-31 15:40:23
648,2016-08-31 05:22:51,"Thanks for the report. This was caused by #646 which I just reverted. Please update and let me know how it goes.
",junegunn,2016-08-31 15:40:23
648,2016-08-31 13:45:28,"Thanks, working like charm.
",febrianrendak,2016-08-31 15:40:23
648,2016-08-31 15:40:23,"Sorry for the trouble. Thanks.
",junegunn,2016-08-31 15:40:23
647,2016-08-31 01:08:46,"<!-- Check all that apply [x] -->
- Category
  - [ x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ x] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

line 112: /home/myhome/.fzf/bin/fzf: cannot execute binary file
",sivaswami,2017-01-26 09:44:34
647,2016-09-07 04:41:13,"I have no experience on that platform. What does `uname -a` say? And can you try setting up Go development environment and building fzf from source? i.e. `go get -u github.com/junegunn/fzf/src/fzf`
",junegunn,2017-01-26 09:44:34
646,2016-08-28 21:59:33,"Fixes #643.

Uses the suggestion from https://github.com/tmux/tmux/issues/521#issuecomment-243000022
",qiemem,2016-08-29 03:47:43
646,2016-08-29 03:48:14,"Merged, thanks!
",junegunn,2016-08-29 03:47:43
645,2016-08-28 18:45:38,"The command substitution and following word splitting to determine the default
zle widget for ^I formerly only works if the IFS parameter contains a space. Now
it specifically splits at spaces, regardless of IFS.
",ckafi,2016-08-29 03:47:14
645,2016-08-29 03:47:17,"Thanks!
",junegunn,2016-08-29 03:47:14
644,2016-08-28 03:35:24,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

I have a bash function that displays cheat sheet for all matching files for partial file names in my cheat sheets dir. Fzf helps to find the cheat, but to view the documentation, completed file names doesn't work. 
",QiangF,2016-08-31 05:48:25
644,2016-08-28 16:51:17,"I'm not sure if I follow you, can you share your script? Preferably with some screenshots. Anyway you can bind `print-query` action to a key like so:

<S_CODE_TOKEN>
",junegunn,2016-08-31 05:48:25
644,2016-08-31 05:48:25,"Thank you for the tip! 
The link to the cheats script I am using
is (https://github.com/lucaswerkmeister/cheats). By default if
you type a cheat command, like ""cheat chown"", it will list all
available cheats begin with that string, if you have two
cheats: ""chown a"",""chown b"", then it will print the doc string of
all matching cheats. I think fzf can be used to show the
matching cheats dynamically and I want the ability to view the
doc string if I want.
",QiangF,2016-08-31 05:48:25
644,2016-08-31 16:50:02,"I see, you might also want to check out `--preview` option in that case.

<S_CODE_TOKEN>
",junegunn,2016-08-31 05:48:25
643,2016-08-25 22:27:00,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

To reproduce:
1. Open two terminals (I just use two iTerm windows).
2. Terminal 1> Run `tmux`. Note the session-id.
3. Terminal 1> Run tmux command `new-window` (or the corresponding hot-key).
4. Terminal 2> Run `tmux new-session -t <session-id>`. This makes the new session share windows with the session open in terminal 1.
5. Terminal 2> Run `fzf` (or anything that invokes `fzf`).

Result: The fzf split will open in terminal 1 (which is on window 2). It should open in terminal 2 on window 1.

![image](https://cloud.githubusercontent.com/assets/28215/17987927/8c1842ec-6ae8-11e6-98ee-21cc60332aa1.png)

I've reproduced this in both iTerm 2 and the built-in OS X Terminal. `$TERM` is set to `screen-256color`.
",qiemem,2016-09-07 12:36:32
643,2016-08-28 13:36:26,"Thanks, I can reproduce the problem. Is there a way to find the session ID of the current session? Then we can pass it to `split-window` command used in fzf-tmux. `tmux display-message -p '#S'` doesn't seem to return what I want. 😕 
",junegunn,2016-09-07 12:36:32
643,2016-08-28 15:14:56,"Thanks for looking this! It does like like `tmux display-message -p '#S'` has the exactly analogous behavior. It seems likely that this is a tmux bug.

Regardless, this is the best I could come up with, though it's kind of gross:

<S_CODE_TOKEN>

`#{session_activity}` will always give the current time when run in the current session. Thus, we can grab the current session from `list-session` by grabbing the one with the current time. This can fail if the user switches tmux sessions really fast, so I put a session group comparison in there as well. It can still fail if the user rapidly switches between two group sessions. I couldn't trigger  with alt-tabbing unless I had commands in both sessions loaded up beforehand, and even then, it was hard.
",qiemem,2016-09-07 12:36:32
643,2016-08-28 15:34:18,"Reported to tmux: https://github.com/tmux/tmux/issues/521
",qiemem,2016-09-07 12:36:32
643,2016-08-28 16:45:36,"Thanks. I realized that we can just use window id instead, so:

<S_CODE_TOKEN>

What do you think?
",junegunn,2016-09-07 12:36:32
643,2016-08-28 17:28:37,"Unfortunately, I think it gets the window id wrong as well:

![image](https://cloud.githubusercontent.com/assets/28215/18035374/b4a899a8-6d1a-11e6-8fd4-ea194831cfd1.png)

So running `split-window -t $(tmux display-message -p '#I')` splits the wrong window.

![image](https://cloud.githubusercontent.com/assets/28215/18035392/04cdd830-6d1b-11e6-971d-a7f0888a1044.png)
",qiemem,2016-09-07 12:36:32
643,2016-08-28 21:45:50,"Ah, so the tmux developer responded saying that this is due to the fact that tmux will use the session specified in `TMUX` if available. To get around this, you can just unset `TMUX` for the command:

![image](https://cloud.githubusercontent.com/assets/28215/18036960/69db089c-6d3e-11e6-92cc-1e6cc3e95283.png)

So, prefixing the split window with `TMUX=""""` should do the trick.
",qiemem,2016-09-07 12:36:32
643,2016-08-31 05:23:45,"@qiemem Hi, unfortunately the fix for this caused #648, and I had to revert the commit.
",junegunn,2016-09-07 12:36:32
643,2016-09-06 18:06:19,"Sorry about that! Just opened a PR that should fix this issue without breaking anything socket related.
",qiemem,2016-09-07 12:36:32
642,2016-08-25 07:14:25,"This is a small patch to restore window sizes in vim (and neovim) after fzf is closed. The code was largely taken from CtrlP: https://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp.vim#L305-L307

I believe that this resolves junegunn/fzf.vim#42 and #520
",joshuarubin,2016-08-28 10:19:46
642,2016-08-28 10:19:46,"Nice patch, thanks! Merged in f025602841384fb10cc80d37492ec44c2b872860.

Note that I made a few changes to the commit:
- Reuse `s:getpos()` function
- Also check the screen with
- The workaround for https://github.com/kien/ctrlp.vim/issues/302 no longer seems necessary so I removed it.
",junegunn,2016-08-28 10:19:46
641,2016-08-25 07:05:18,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

I am using the following scripts from wiki. ftags for tmux and :Tags for neovim.
Issue with :Tags
1. It's really fast but it does not display the corresponding filepath for the tag
",sreeram-boyapati,2016-09-19 04:08:40
641,2016-08-28 09:50:36,"- I don't see why you're getting permission denied.
- The wiki page is for showcasing how one can build things with fzf, and I'd like to keep the examples simple without too much sophistication. You might want to try out `:Tags` command provided by [fzf.vim project](https://github.com/junegunn/fzf.vim).
",junegunn,2016-09-19 04:08:40
640,2016-08-22 21:01:31,"I've started using PowerShell, but am missing fzf. It'd be great to have PowerShell hooked up to fzf. In particular, ctrl-r.
",tomfitzhenry,2016-11-20 14:05:54
640,2016-08-22 21:05:21,"My attempt so far:

<S_CODE_TOKEN>

There's a bug though: when I hit Ctrl-r, fzf is executing (according to `ps`), but I cannot see fzf's curses interface. I wonder if this is a limitation of PowerShell's PSReadline?
",tomfitzhenry,2016-11-20 14:05:54
640,2016-08-23 10:55:55,"This https://github.com/junegunn/fzf/blob/master/src/README.md#system-requirements says Windows is not supported.
",balta2ar,2016-11-20 14:05:54
640,2016-08-23 11:41:19,"I'm using PowerShell on OSX, sorry, I should have mentioned.

OSX 10.11.6
fzf 0.13.2
",tomfitzhenry,2016-11-20 14:05:54
640,2016-08-23 15:27:04,"@balta2ar Turned out that fzf can now work on Windows with its new linux subsystem. See https://github.com/junegunn/fzf.vim/issues/186

@tomfitzhenry Hi, unfortunately I have zero experience in PowerShell, so I can't really help you with this. Please let me know if you find the solution.
",junegunn,2016-11-20 14:05:54
640,2016-11-17 20:09:42,"Seems like this is now supported by https://github.com/kelleyma49/PSFzf
",prabirshrestha,2016-11-20 14:05:54
640,2016-11-20 14:05:54,"@prabirshrestha Thanks. I'll mention the project somewhere on the wiki.
",junegunn,2016-11-20 14:05:54
639,2016-08-21 15:09:16,"I have a few doubts and suggestions related to how the `--bind execute` works:
- Do subshells work? I want do something like `fzf --bind ""enter:execute(xdg-open $(dirname {}))""`
- fzf tries to run the process from the current shell so when the process is executed fzf window hides and waits for the process to close. Can this be overridden somehow? I want the process to just launch and not affect fzf.
- Category
  - [x] fzf binary
  - [x] fzf-tmux script
  - [x] Key bindings
- OS
  - [x] Linux
- Shell
  - [x] zsh
",dufferzafar,2016-09-29 16:26:53
639,2016-08-22 03:38:10,"Did you try appending `&` to the command? e.g. `fzf --bind 'enter:execute(sleep 100 &)'`
",junegunn,2016-09-29 16:26:53
639,2016-09-29 15:00:56,"That does work for the background part, but what about the subshell thing? 

This works: `fzf --bind ""enter:execute(xdg-open {})""`
but this doesn't: `fzf --bind ""enter:execute(xdg-open $(dirname {}))""`
",dufferzafar,2016-09-29 16:26:53
639,2016-09-29 16:26:39,"Use single-quotes around it. $(...) is expanded before it's passed to fzf.
",junegunn,2016-09-29 16:26:53
639,2016-09-29 17:13:21,"Oh. Thanks. That worked!

`fzf --bind 'enter:execute(xdg-open ""$(dirname {})"")'`
",dufferzafar,2016-09-29 16:26:53
638,2016-08-19 18:08:13,"There is a long-standing FIXME entry in the code

https://github.com/junegunn/fzf/blob/f8fdf9618adf831b614a9b69e90eca53b9e37a28/src/algo/algo.go#L115

<S_CODE_TOKEN>

That is fzf stops immediately when the first match is found. This gives nice O(n) time complexity but it's not guaranteed to find the best match as shown in the above example. Most users use fzf for finding files, and it's more likely what they're looking for is at the latter part of the string, and we're missing the opportunity to give proper scores to better matches.

Algorithms that find globally best match are known to have O(nm) time complexity where n is the length of the string and m is the length of the pattern. Though it's definitely more involved than the current method, it's not so bad considering that m is expected to be small in this application. Since fzf query responses almost instantly for usual input sizes (a few hundreds of ks), it may make sense to put more effort to give better results.

_Clarification_: We can still get the best match in O(n) time unless we change our definition of ""best""; the substring with the shortest length. Instead of breaking out of the loop as soon as we find the first match, we just keep scanning till the end of the string. O(nm) algorithms are needed only if we want to introduce more sophisticated scoring mechanism.
",junegunn,2016-09-18 16:56:23
638,2016-08-20 20:53:28,"I once hacked a small and [simple source](https://github.com/balta2ar/deoplete-rt/blob/331199fba8314d1e4a3538b22e82a94911dff1ad/rplugin/python3/deoplete/sources/request_tracker.py#L48) for [deoplete](https://github.com/Shougo/deoplete.nvim). Due to my exotic requirements, I had to filter results by my own. I think I had the same challenge there: I wanted shortest matches to be displayed first. I didn't code the algorithm myself, I rather used this library: https://bitbucket.org/mrabarnett/mrab-regex.
Specifically, this construction (quote from the docs): `(?:foo){i} match ""foo"", permitting insertions`.
This gave me the best results, now the completer puts first exactly those items which I expect. I'm not sure about the complexity of the underlying algorithm, but considering it gives very nice results, it may be worth taking a look at.

As for the current matching algorithm in fzf, I may be biased, I'm more than happy with it.
",balta2ar,2016-09-18 16:56:23
638,2016-08-31 11:21:19,"FYI: https://github.com/jhawthorn/fzy/blob/master/ALGORITHM.md
Used by: https://github.com/cloudhead/neovim-fuzzy

With my love to fzf, people say sad things :(

>  If fzy supports streaming I can finally move away from fzf. (https://github.com/jhawthorn/fzy/issues/17)
> I'd like to try out fzy as a replacement with fzf for my workflows because of the better ranking (https://github.com/jhawthorn/fzy/issues/22)

reddit discussion: https://www.reddit.com/r/neovim/comments/4zly16/neovimfuzzy_proper_fzf_integration_for_neovim_not/
",balta2ar,2016-09-18 16:56:23
638,2016-08-31 16:27:02,"@balta2ar Hey, thanks for the pointers. If they don't need the features and stability of fzf and prefer the result of fzy, well I guess, why not? I can't help but think that they will reconsider if they better understand the power of extended-search mode and smart-case search, but I don't really have to win the internet, so yeah.

What's clear though is that it would be much easier for fzf to steal good stuff from fzy than the other way around :)

fzy does implement interesting scoring mechanism compared to the other fuzzy finders e.g. selecta, pick, etc. And I can surely understand that some users prefer the way it works, especially when they want to search with acronyms. However, it's hard to argue that it gives the best result in all cases, for example consider the following input:
- such_a_great_day
- good/bad/worse/worst/ridiculous/pleasant/audition/triangle
- grim/worst/ridiculous/pleasant/eater/triangle

Suppose I want to search for ""great"", and since it's a fuzzy finder, I type in ""grat"", ""grt"" or ""gret"" instead of ""great"", and here are the results from fzy:

<S_CODE_TOKEN>

All three queries give different results, and they are not giving the best result _for my intention_, which is obviously ""such_a_great_day"". If the patterns I typed in were acronyms, then it's probable that fzy is giving the right answer, but it's not. Since it cannot read my mind (""is it an acronym or a fuzzy word?""), it simply guesses using arbitrarily chosen coefficients. The strategy may give the best of both worlds, or may not. It depends.

fzf, on the other hand, gives the consistent results for all three queries. One can argue that the scoring mechanism of fzf is too simplistic, but at least it's consistent and easier to understand. And I can almost always get the right answer with extended-search mode and smart-case search. Oh, I have another idea. How about ""smarter-case search"", where uppercase letters not only match themselves but also lowercase letters at word boundaries? We can use it to _explicitly_ tell fzf to perform acronym search.

Having said all that, I do see the value of more sophisticated scoring mechanisms. Actually I implemented a prototype of Smith-Waterman algorithm on fzf just after I created this issue and was thinking of adding an option to choose it over the current algorithm (e.g. `--algo=sw` or `--algo=classic`, ...) It works, but I'm not confident about the result yet and haven't had time to clean things up and decide how to reconcile the new mechanism with the existing infrastructure, such as extended-search mode and `--tiebreak`.
",junegunn,2016-09-18 16:56:23
638,2016-08-31 18:09:12,"> they will reconsider if they better understand the power of extended-search mode and smart-case search

I used to run fzf with extended search, but then I found myself typing `'` way too often, so I switched to exact mode. I think I need to give fuzzy search and smart case search another try.

While we are on this page, is it possible to override `FZF_DEFAULT_OPTS=-e` with `fzf +e`? If so, it's not immediately clear from this help line: https://github.com/junegunn/fzf/blob/master/src/options.go#L21. Maybe mention ""+e"" in parenthesis?

> How about ""smarter-case search"", where uppercase letters not only match themselves but also lowercase letters at word boundaries?

I think something similar is implemented in YouCompleteMe. If your request is ""gbo"", then string ""def GetBudgetObject(args"" will be prioritised. Some ideas about that are discussed here: https://github.com/Valloric/YouCompleteMe/issues/1757. When I was still using YCM, this strategy worked well for code completion, I noticed it to be helpful many times. Now I'm on deoplete and I'm not sure whether such strategy is there or not. Besides, fzf is not code completion tool. I can't tell in advance whether it's worthwhile or not without using it for a while in practice.

> was thinking of adding an option to choose it over the current algorithm

Yes, I had this in my mind as well. Frankly speaking, I was also thinking about a shared library of such algorithms (instead of projects' ""stealing"" algorithms from each other), where any project could just reuse them as needed. But that obviously requires more effort. And I'm probably way too optimistic to consider it.
",balta2ar,2016-09-18 16:56:23
638,2016-09-06 08:42:02,">  was thinking of adding an option to choose it over the current algorithm (e.g. --algo=sw or --algo=classic, ...) 

I would love to see that implemented. I really like fzf from a usability standpoint but sometimes the program matches a blatantly wrong result. 

For example, my main use of fzf is to `cd` into folders. I have a folder called `Documents/elm` and I want to cd into it by typing `docelm`. However, as can be seen in [this](http://imgur.com/Sg2c1uq) screenshot, fzf scores a really long path that contains all those letters instead. of the short `Documents/elm` which im looking for. For my usecase, an algorithm which priorotises more matches per length would be more usefull. 
",TheZoq2,2016-09-18 16:56:23
638,2016-09-06 09:14:03,"My experience is similar to the one of @TheZoq2. Basically I switched to exact mode because it gives the same results in less keystrokes. Yes, fuzzy search can give the same result, but in that case I usually have to type more.
",balta2ar,2016-09-18 16:56:23
638,2016-09-06 09:50:52,"@junegunn I have been using **FZF** for everything since its creation. I still use it for a lot. However, currently I prefer **fzy** for finding files. This is due to the fact that, when I open a file I usually (90% of the times) know where it is. Typing some of the first letters of the path to takes me to it.

Knowing that you have already stated that

> What's clear though is that it would be much easier for fzf to steal good stuff from fzy than the other way around :)

Can we have both of the scoring methods and make it changeable through an argument `--sorter : sorter_type`. This way everybody will be happy :)
",khalidchawtany,2016-09-18 16:56:23
638,2016-09-06 10:59:29,"I agree with the sentiments expressed above. fzf is still my favoured tool. Its only weakness is the scoring algorithm.

@junegunn is right that there's no universally acknowledged solution to the scoring problem. My own use of fuzzy finding is based largely on word prefixes. So if the file I'm looking for is:

/Users/mattwestcott/repos/python/trains/models.py

I'm very likely to choose a pattern like

pytrains
pytramod
repotrmod

That is, I naturally go for consecutive characters following word boundaries. I'm not likely to choose 

postrans
wetepo

or some other misspelling that is technically a subsequence. 

My view is that fzf doesn't support this usage well enough. @TheZoq2 seems to use it the same way.

For some background: a few months ago I [proposed](https://github.com/mjwestcott/fzf/commit/60c9d849f2c7056e3ea26cbb67896e1bf4b0df1b) a scoring algorithm that emphasises word boundaries and, in particular, gave a penalty to characters of the pattern that matched far from the start of the word.

This led to the current scoring system (via [this commit](https://github.com/junegunn/fzf/commit/2f6d23b91e845f53e746e7cf74477a735ec88a85)) which was adapted to be more conservative. If I understand correctly, it gives a bonus if the first character of the pattern matches the start of a word, but doesn't penalise patterns that match in the middle or the end of a word. The total match length is the dominant feature of the algorithm.

I understand @junegunn's desire to keep it simple and choose a solution that everyone can understand. But perhaps, as others have suggested, we can start with a more sophisticated solution as an optional flag. The approach of fzy is certainly interesting and in my limited testing I like its results.
",mjwestcott,2016-09-18 16:56:23
638,2016-09-06 17:41:11,"Thanks for the suggestions. It's over 2AM here in Seoul, I'll take a closer look at your comments later.

Anyway as you guys really seem interested in the direction, I uploaded the alpha binaries with Smith-Waterman algorithm I mentioned above.

https://github.com/junegunn/fzf-bin/releases/tag/alpha

Try it and let me know how it goes for you, but don't expect it to be stable :) I've been pretty busy lately and haven't found time to really clean things up. I'll probably have more time next week, and hopefully wrap this up.

Also note that fzf is still a fuzzy finder even if we do this, not ""acronym finder"" so it will not rank `a______________/b______________/c______________/d______________/e______________/` higher over `axcxe` on `ace`. But it may prefer `a_______/c_______/e_______/`. So that's the hard part, finding ""the right"" threshold that tends to give better answers in ""most"" cases. The decision should be made not arbitrarily but based on empirical study and statistics such as median length of words found in file names, etc.
",junegunn,2016-09-18 16:56:23
638,2016-09-06 18:48:48,"I did some small tests with that alpha build and it seems to work just fine for my use case. It feels a bit slower though, especially for really large sets of files.
",TheZoq2,2016-09-18 16:56:23
638,2016-09-07 12:45:35,"@TheZoq2 Thanks for the feedback. I just updated the binaries with some optimizations, should be noticeably faster. I believe there is more room for improvement but nevertheless the new algorithm will be slower no matter what because what we're doing here is putting more effort to get better results. i.e. go over all occurrences of the pattern instead of stopping immediately after finding the first one.
",junegunn,2016-09-18 16:56:23
638,2016-09-07 12:58:01,"Thanks @junegunn. Based on a few hours' use, the alpha version is awesome. Even before your optimisations, I found it usable on 1-2 million filenames. The results are definitely worth the cost.

I'll be interested to check out your implementation.

Also, highlighting only the characters that match is a big improvement.
",mjwestcott,2016-09-18 16:56:23
638,2016-09-07 15:08:01,"I really enjoy using this new feature. 👍 
Please can we have a way to toggle the sorting algorithm (maybe using a flag)?
",khalidchawtany,2016-09-18 16:56:23
638,2016-09-07 15:55:57,"Work's great!
",deathmaz,2016-09-18 16:56:23
638,2016-09-07 21:33:30,"I tried the latest alpha and it feels really good. It's still a bit slow when I run `find ~ | fzf...` but for my usecase of looking for only directories instead of files it feels instant. 

A flag to select algorithm would defenitivley be usefull since it's obviously a bit slower but it works great for me.
",TheZoq2,2016-09-18 16:56:23
638,2016-09-08 12:31:49,"Not really related to the ranking, but what I really love about `'` is that it reverses the meaning depending on the mode. If you're in exact mode, `'substring` becomes a fuzzy pattern, and vice versa. Awesome!
",balta2ar,2016-09-18 16:56:23
638,2016-09-11 17:45:09,"To be clear, this issue deals with two orthogonal concerns.
1. Scoring criteria. The way we estimate the relevancy of the match. With the suggested scheme, the match length is no longer the dominant factor. Change of scoring criteria doesn't affect the performance of fzf. What is difficult is to come up with an objective model to evaluate the effectiveness of the criteria. It is especially hard because the effectiveness usually depends on the context and fzf is a general-purpose filter that can be used with any type of entities.
2. Finding the best occurrence of the pattern within a match. Instead of stopping immediately after finding the first occurrence, we examine the entire line to find the best one among all occurrences. In this case the performance overhead is unfortunately inevitable.

### Performance

I tried really hard to squeeze the last drop of performance out of the new code with inelegant hacks like manually inlining function calls, reusing memory slices, etc, but the performance overhead becomes quite noticeable once the number of lines in the input exceeds a few hundreds of thousands.

There are a few factors that affect the overhead. Most notably, the length of the pattern string and the selectivity of the query and they are usually correlated to some degree in practice. i.e. the longer the query, the better the selectivity. The selectivity matters because the overhead only applies to the matching items.

For a query with extremely bad selectivity (say `.///` for `locate /` output), the new algorithm is over twice as slow as before.

But for a query with pretty good selectivity, the overhead is dwarfed by the other parts of the processing and I could still get better performance than 0.13.3 which was before some optimizations made in #637.

### Options

Two concerns, four possible configurations.
- `--sort-by=score|matchlen`
- `--algo=v1|v2`

I don't feel strongly about `--sort-by` or any advanced configuration parameters for scoring criteria. I'd like to keep things simple and try to focus on improving the default.

I was also hoping to replace the current algorithm with the new one and be done with it without extra `--algo`, once there is a general consensus that the quality of the result is worth the cost and the performance overhead becomes insignificant. But the latter is not the case and I can imagine that there are cases where performance does matter, for example `locate / | fzf`. So we have no choice but to add `--algo`? Or maybe I'm worrying too much? Should I just ship it and decide after hearing what users say? Maybe there are few users who actually use fzf with millions of lines.
",junegunn,2016-09-18 16:56:23
638,2016-09-11 18:07:35,"I'd definitely would like fzf to keep the good old exact early-exit matching algorithm as you've just described my frequent use case: `locate /` and my locate has 4.1M entries.

As for the old version of fuzzy matching, I step aside as I couldn't get used to it — exact matching has always worked better for me. So I'm not sure I personally need the old fuzzy version.

In vim, though, I think it would be nice to have an option to override shell's `FZF_DEFAULT_OPTIONS` because I hope to start using this smarter algorithm and I would like to enable it in vim settings explicitly (but to have it off for the rest of the system). I couldn't find an option to do that in fzf.vim's docs. Is it there?
",balta2ar,2016-09-18 16:56:23
638,2016-09-12 01:59:36,"@balta2ar 

> I'd definitely would like fzf to keep the good old exact early-exit matching algorithm as you've just described my frequent use case: locate / and my locate has 4.1M entries.

Since you use exact matcher, I suggest that you directly pass the pattern to locate command (`locate foobar`) to lighten the load of fzf. The performance overhead we're discussing here mainly applies to fuzzy matcher. I also updated the exact matcher alongside to find the best occurrence with higher score, but the overhead is hardly significant in that case.

And yes, Vim allows you to override environment variables in vimrc. `let $FZF_DEFAULT_OPTS = '...'`
",junegunn,2016-09-18 16:56:23
638,2016-09-13 11:17:52,"I would say that leaving the old algorithm as an option is a good idea since the new one is a bit slower for large files. 
",TheZoq2,2016-09-18 16:56:23
638,2016-09-18 16:56:23,"I just released 0.15.0 with `--algo=[v1|v2]` option where v2 is the default. You can use `v1` if the performance is unacceptable. Please try it and let me know of any problems – bugs, non-intuitive result, etc – you run into.

The details of the new algorithm can be found here:
https://github.com/junegunn/fzf/blob/0.15.0/src/algo/algo.go
",junegunn,2016-09-18 16:56:23
637,2016-08-16 18:29:53,"I'm working on a set of micro-optimizations to further reduce the memory footprint and improve the overall query performance and the result so far looks promising.
- Memory footprint
  - 0.13.4: 43% of that of 0.13.3
  - WIP: 34% of that of 0.13.3
- Query response time (`head -$LINES $INPUT | fzf -f $QUERY > head -50`, extremely low selectivity)
  ![perf-noopts](https://cloud.githubusercontent.com/assets/700826/17710869/3bfa4a0e-642a-11e6-88cb-3594d3638799.png)
- The new Go 1.7 also gives free performance improvement (around 3~5%) 
",junegunn,2016-08-20 19:41:22
637,2016-08-17 09:25:33,"This is great! You know, being a huge fan of fzf, I check the repo almost every day to see whether there are new commits or anything. If it's not too much of a hassle for you, may I ask you to push your progress into a pull request as you develop, for visibility? I'd be happy to see how the code evolves as you make those changes.

Here is another idea. How about adding benchmarking tests that set certain bottom line CPU- and memory-wise in a number of different use cases? You're obviously doing that manually, but I'm talking about something automatic, some performance regression tests (probably go supports that out-of-the-box?). This will also be easier for contributors to make sure their changes do not degrade the performance.
",balta2ar,2016-08-20 19:41:22
637,2016-08-17 16:19:05,"I'm currently in the process of experimenting with different ideas. Some turned out to be great, some not so great, or even flawed. So it's a bit early to commit and push to master, which I try to keep stable if possible as some users prefer to build from the latest master. But I'll try to push changes that I can be comfortable with.

A couple days ago I wrote a script that measures the query performance and the memory consumption of the latest releases and creates chart images (the one you see above). The script currently is not portable, I'd like to clean it up and include it in the repo when time allows. Ideally, test for performance regression can be run on Travis CI, but it'll probably yield many false positives.
",junegunn,2016-08-20 19:41:22
637,2016-08-19 19:27:18,"As of f8fdf9618adf831b614a9b69e90eca53b9e37a28,

Memory:
![mem-baseline](https://cloud.githubusercontent.com/assets/700826/17821762/4e62ad1a-668e-11e6-9a39-b6ca2e0d4e9e.png)

Response time:
![perf-baseline](https://cloud.githubusercontent.com/assets/700826/17821763/4e69b934-668e-11e6-9dd9-1448b80a8053.png)
",junegunn,2016-08-20 19:41:22
637,2016-08-19 21:39:34,"Looks great! Could you describe what is ""after-search"" and ""before-search""? Also, having ticks on Y axis would be nice.
",balta2ar,2016-08-20 19:41:22
637,2016-08-20 03:43:44,"Resident memory size just after fzf finishied consuming the input (`fzf < data` where data is the output from `find /` command so every line starts with `/`), and the memory size after search for `/` is finished. fzf used to hold the list of matches using the Item struct, but I realized that it's a huge waste of memory and introduced more compact Result struct for that purpose.

I intentionally removed the y axis to focus on the relative change in values as the absolute values can vary depending on the input data, and the performance of the system. But yeah, I guess it's fine to have it.
",junegunn,2016-08-20 19:41:22
637,2016-08-20 07:06:57,"Removing Y axis makes it unclear because the observer does not know what's the value at the start of the Y axis. A good practice is to set it to zero, but I've seen plots where Y axis starts far from zero showing only a small part of Y: https://en.wikipedia.org/wiki/Misleading_graph#Truncated_graph. On the other hand, as far as you have logarithmic X axis, Y could also easily be logarithmic, and it would make a huge difference. It doesn't look like it's the case here though, but again, omitting labels may be misleading.

As for optimizations, I've been thinking about ring buffer for input data. I'm not sure that memory allocations are still noticeable in comparison to overall code performance, but here is the idea: we allocate a fixed size array (say, 32Mb) for the input. We read stdin line by line directly into that buffer, hopefully avoiding memory allocations and creation of new slices for each line of the input. Two indices are tracked: one for the writer, one for the reader — matcher in this case. Unfortunately, it is only applicable for the filtering mode where we don't store the input. I don't think it's viable for the interactive mode. Anyway, does this make any sense?
",balta2ar,2016-08-20 19:41:22
637,2016-08-20 19:41:22,"We already don't keep the result in memory in that case, i.e. when both `--filter` and `--no-sort` are set, also `--no-tac`. It's an unusual case though. Thanks for your feedback.

Anyway, I think we have made a good progress here that I can close this issue for now. I'll probably release a new binary at this point and will work on #638 that is focused on the quality of the result rather than the performance.
",junegunn,2016-08-20 19:41:22
636,2016-08-11 14:22:52,"In my bashrc , I do : 

`FZF_DEFAULT_OPTS=""--bind '?:toggle-preview' --preview 'less <<< {}' --preview-window 'up:50%:hidden""`

(and others, since I find that I don't use preview-window that often, but might want to use it sometimes).

However, after sourcing this, I would like to force fzf to show the preview-window by default. 

So I do: 

`fzf --preview-window 'right:70%'` but the first hidden property is ignored (eg the preview window is hidden by default).

They are imo two ways of fixing this : 
1. The explicit way  : `fzf --preview-window 'right:70%:visible'` will override a previous hidden (but if no hidden nor visible is given, the preview-window is visible)
2. The implicit way : `fzf --preview-window 'right:70%'` should completely remove a previous :hidden property.

In this particular case, I'm not sure which way I prefer.
",edi9999,2016-08-11 16:17:50
636,2016-08-11 14:38:55,"Here's a patch if you decide for ""2.""

<S_CODE_TOKEN>
",edi9999,2016-08-11 16:17:50
636,2016-08-11 16:14:05,"Thanks for the report. Lingering hidden property is not what I intended, it's just a bug. I'll apply your patch.
",junegunn,2016-08-11 16:17:50
636,2016-08-11 16:24:33,"Ok, thanks !
",edi9999,2016-08-11 16:17:50
635,2016-08-09 18:37:49,"Hello! First of all, I've said it before and I can't help but say it again: thank you for the great piece of software!

We all know that fzf is amazingly fast already. However, maybe there is still space left for optimization?
Below I'm bringing your attention to two approaches that may work out well.
### 1. Suffix array

This approach is algorithmic. A lot of information can be found on the Internet, but I personally was introduced to suffix arrays in this course: https://www.coursera.org/learn/algorithms-on-strings

Here is another interesting article that demonstrates how to use suffix arrays in go. Luckily, they are implemented in the standard library! This one is definitely worth reading:
http://eli.thegreenplace.net/2016/suffix-arrays-in-the-go-standard-library/

From what I understand, in this approach it's time-consuming to prepare the data before the first use. Also, the benefits reveal themselves when data gets larger. Considering this, maybe suffix arrays could be used when two conditions hold: 1. in interactive mode 2. when input data is larger than a certain threshold. An as example, I can say that filtering my locate database is... well, not blazingly fast.
### 2. SSE2/SSE4.2

The idea is to perform comparison of multiple DWORDs at once by using xmm registers. This approach is more hardcore, to my opinion, it's technically more difficult and limited in its possible use cases due to variations in current implementation of NaiveMatch (by variations I mean `forward` argument, but maybe it's not an issue).

Some articles to whet you appetite:
http://0x80.pl/articles/sse4_substring_locate.html
http://www.codeproject.com/Articles/383185/SSE-accelerated-case-insensitive-substring-search
https://www.strchr.com/strcmp_and_strlen_using_sse_4.2
https://mischasan.wordpress.com/2011/07/16/convergence-sse2-and-strstr/

Some more papers. Hopefully, they go into more details:
http://www.dmi.unict.it/~faro/papers/conference/faro32.pdf
http://arxiv.org/pdf/1209.6449.pdf
http://www.joics.com/publishedpapers/2013_10_18_5867_5880.pdf
http://www2.compute.dtu.dk/~phbi/files/publications/2011opsmC.pdf

And some implementations in the wild:
https://github.com/lattera/glibc/blob/a2f34833b1042d5d8eeb263b4cf4caaea138c4ad/sysdeps/x86_64/multiarch/strcmp-sse42.S
http://opensource.apple.com/source/Libc/Libc-498.1.1/i386/string/strlen.s
### Conclusion

I've marked the issue with [research] because I don't think there is an urgent need to make things even faster here. This is rather for our own education and fun. And discussion, of course! Maybe you or some other contributor find these ideas worthwhile and applicable to fzf. I'd love to hear what you think about this, @junegunn!

감사합니다. Thank you!
",balta2ar,
635,2016-08-10 16:13:50,"Thanks, I'll take a look when I get some time.

By the way, a few days ago I did some profiling with large input and noticed that a significant amount of time is spent allocating memory for rune arrays necessary to handle Unicode characters. I'm planning to see if there's room for improvement there first.
",junegunn,
635,2016-08-11 07:33:14,"I can also note that `--ansi` option contributes non-negligible amount to execution time.
",balta2ar,
635,2016-08-11 16:24:24,"That's right. It's partly due to non-stellar performance of Go regex engine. `--nth` and `--with-nth` are also performance killers that you don't want to use with large input, which is understandable to some degree as they necessitate extra processing.
",junegunn,
635,2016-08-13 17:31:07,"Speaking of performance, an interesting way to look at pprof results are flamegraphs:
![torch](https://cloud.githubusercontent.com/assets/340676/17644641/253ba018-619d-11e6-9fa9-fe103bf83413.png)
",balta2ar,
635,2016-09-24 13:32:04,"Here is an interesting write up by the author of [ripgrep](https://github.com/BurntSushi/ripgrep) — grep tool written in Rust. The author claims that this tool is faster than any other grep out there: http://blog.burntsushi.net/ripgrep/
Besides of being technically detailed in the benchmark section, I think special interest deserves [Teddy](https://github.com/rust-lang-nursery/regex/blob/3de8c44f5357d5b582a80b7282480e38e8b7d50d/src/simd_accel/teddy128.rs) algorithm: 

> Teddy is a simd accelerated multiple substring matching algorithm

And Intel's RegExp library: https://github.com/01org/hyperscan

Hacker news discussion: https://news.ycombinator.com/item?id=12564442
Reddit: https://www.reddit.com/r/programming/comments/544hos/ripgrep_is_faster_than_grep_ag_git_grep_ucg_pt/
",balta2ar,
635,2016-09-24 14:08:34,"Thanks for the links. I believe there's a difference between fzf and the grep family, that is, the size of haystack is usually much smaller in fzf, because fzf searches for a pattern in each line, while grep searches for the pattern in _each file_ which can be huge. So we should lower our expectation on the speed-up from the algorithms used in grep-like tools. And that's why I first focused on optimizing the code that wraps around the search in #637, and we got nice improvement.

You still using `--exact` as the default? Exact match I believe is quite fast since #637.  I even updated it to [search for the occurrence with the highest score](https://github.com/junegunn/fzf/blob/7fa5e6c86184b3127f64ce0f7a45b945df077e77/src/algo/algo.go#L567-L570) in 0.15 but it's still fast.

Regarding fuzzy matcher, there have been a lot of work in accelerating Smith-Waterman algorithm with SIMD instructions (some of them are [patented](https://www.google.com/patents/US20080250016)):

https://en.wikipedia.org/wiki/Smith%E2%80%93Waterman_algorithm#Accelerated_versions

Not sure if those approaches can be applied to fzf because of the customizations made in fzf that makes it harder to parallelize operations.
",junegunn,
635,2016-09-24 14:42:53,"> You still using --exact as the default?

I'm using exact search in a shell with z, for command history search (Ctrl-r) and for locate filtering (as you suggested, now I pass some initial filter to locate, and then filter with fzf, e.g. `locate machine F`, where `F=| fzf`). For all those cases exact search usually narrows down the results better for me. Or maybe it's just an old habit.

In vimrc, however, I switch to extended search mode and `--algo=v2` explicitly as you suggested. In nvim I mostly search for files with fzf and the new algo=v2 is really comfortable for me. Being slightly disappointed by the low speed of Unite's grep (and while waiting for Denite to be ready), I've found myself using fzf + ag (maybe I should try ripgrep, but ag itself is fast enough for my code base) in nvim as well. On top of that, sometimes I use `:Tags`, `:Lines` and `:BLines`.

Generally, I'm very happy with both exact and new fuzzy v2 modes in fzf. They both have found their uses in my workflows.
",balta2ar,
635,2016-09-24 15:09:26,"Whatever works best for you. Thanks for the feedback.

Although I also use Ag command from fzf.vim project, quite regularly, the approach has more to be desired as we can't use fzf like native quickfix list. Haven't tried it but I've heard good things about https://github.com/mhinz/vim-grepper.
",junegunn,
634,2016-08-06 11:01:58,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I can't find any dot files as .vimrc, .bashrc. Is it supported?

![2016-08-06-175459_1920x1080_scrot](https://cloud.githubusercontent.com/assets/1486790/17456372/c85f2a4c-5bff-11e6-90d9-06886059153d.png)
",NgaNguyenDuy,2016-08-06 17:50:35
634,2016-08-06 17:50:35,"The default commands fzf uses do not include hidden files. If you want hidden files in the list, you have to define your own `$FZF_DEFAULT_COMMAND` or `$FZF_CTRL_T_COMMAND` depending on the context.

For example:

<S_CODE_TOKEN>
",junegunn,2016-08-06 17:50:35
634,2016-08-16 04:07:53,"When I try `export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g """"'` fzf stops working in bash shell and lists no files at all (not only dot files, but nothing at all) but it works as expected in vim. I modified the default command and tried `export FZF_DEFAULT_COMMAND=""find . -path '*/\.*' -type d -prune -o -type f -print -o -type l -print 2> /dev/null | sed s/^..//""` and fzf worked as expected both in bash and in vim. I guess this is related to how `ag` generates its output?
",nimamo,2016-08-06 17:50:35
634,2016-08-16 04:12:05,"@nimamo Have you checked the command itself (`ag --hidden --ignore .git -g """"`) works in bash?
",junegunn,2016-08-06 17:50:35
634,2016-08-16 04:14:17,"@junegunn Yes and it works as expected.
",nimamo,2016-08-06 17:50:35
634,2016-08-16 07:49:50,"@nimamo How about `ag --hidden --ignore .git -g """" | cat`? If it fails, upgrade ag.
",junegunn,2016-08-06 17:50:35
634,2016-08-16 12:00:06,"@junegunn This command works. I tried the same procedure ( `export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g """"'` ) on a different Linux installation and it just worked fine. This doesn't seem to be a bug in fzf, yet seeing different results from `fzf` in bash and `:FZF` in Vim is worth noticing.
",nimamo,2016-08-06 17:50:35
634,2016-08-16 12:52:40,"@nimamo Please make sure you have the latest version of ag installed. Probably related: #573
",junegunn,2016-08-06 17:50:35
633,2016-08-01 01:23:06,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

hi, `source ~/.fzf.zsh` must added into `.zshrc` file?
 i added this in `.zshrc.local`. but key bindings no effect.
",gatspy,2016-09-19 04:09:15
633,2016-08-01 01:28:37,"Given that the key bindings are not reset in your configuration file, the location/position shouldn't matter. Check the output of `bindkey | grep fzf`.
",junegunn,2016-09-19 04:09:15
633,2016-08-09 15:32:36,"I have them all

<S_CODE_TOKEN>

but bindings for git do nothing.
Update, they kick me out of the shell.
",yevhen-m,2016-09-19 04:09:15
633,2016-08-09 15:46:39,"Update.
Conflicted with zshell `git` plugin. After I removed it, everything works smooth.
",yevhen-m,2016-09-19 04:09:15
633,2016-08-10 16:41:19,"@yevhen-m You got the ""bindings for git"" from [this post](http://junegunn.kr/2016/07/fzf-git/), right? They are not from this repository.
",junegunn,2016-09-19 04:09:15
633,2016-08-11 10:10:33,"@junegunn that's right.
",yevhen-m,2016-09-19 04:09:15
632,2016-07-29 12:22:50,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [X] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [X] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [X] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi! First of all, thank you for the awesome project! 

I tried just the `fzf`, and tried it together with `fzf.vim`, but both ways it take too long to close on neovim(OSX, zsh).
",kassio,2016-08-02 16:26:46
632,2016-07-30 08:05:13,"You're most likely running into this issue: https://github.com/neovim/neovim/issues/4487

Try the workaround suggested in the link (`let g:airline#extensions#branch#enabled = 0`) and see if it helps.
",junegunn,2016-08-02 16:26:46
632,2016-07-30 15:20:50,"It's possible this is fixed on Neovim master. What version are you using?
",justinmk,2016-08-02 16:26:46
632,2016-08-02 08:27:20,"@justinmk still slow on:

<S_CODE_TOKEN>
",kassio,2016-08-02 16:26:46
632,2016-08-02 08:28:30,"@junegunn the workaround seems to improve a little bit, but still way slow compared with vim.
",kassio,2016-08-02 16:26:46
632,2016-08-02 08:29:22,"I added this:

<S_CODE_TOKEN>

And with a double `<esc>` it close as fast as in vim. 
",kassio,2016-08-02 16:26:46
632,2016-08-02 16:15:28,"~~That just means your `ttimeoutlen` is too long. Try `set ttimeoutlen=10`.~~ Or use something other than `<esc>` to close FZF, it seems like you have mapped something to `<esc>foo`.
",justinmk,2016-08-02 16:26:46
632,2016-08-02 16:18:30,"my `ttimeoutlen` is `-1`. But I tried set it to `10` and didn't change the result. 😢 
",kassio,2016-08-02 16:26:46
632,2016-08-02 16:21:20,"What does `:tmap <esc>` say?
",justinmk,2016-08-02 16:26:46
632,2016-08-02 16:22:25,"Good point! It's: `<Esc><Esc>  * <C-\><C-N>`
",kassio,2016-08-02 16:26:46
632,2016-08-02 16:25:53,"And you are trying to close with a single `<Esc>`? Then nvim waits N seconds for the mapping to complete. 

You could do this instead:

<S_CODE_TOKEN>

The `<nowait>` means this mapping will not wait.
",justinmk,2016-08-02 16:26:46
632,2016-08-02 16:26:46,"@justinmk great TIL! Thank you for the help!
",kassio,2016-08-02 16:26:46
631,2016-07-29 11:37:49,"How can I donate money to this project?

Thanks :)
",eyalev,2016-07-30 08:04:00
631,2016-07-30 08:04:00,"Thanks. You can donate via PayPal on [this page](http://junegunn.kr/projects/), but hey, just knowing that you like this project so much that you even consider donation is rewarding enough for me at the moment :)
",junegunn,2016-07-30 08:04:00
631,2016-08-10 15:08:31,"Just did my first donation that is recurrent monthly , your software is really great !
",edi9999,2016-07-30 08:04:00
631,2016-08-10 15:55:26,"@edi9999 Thanks Edgar, I really appreciate it!

@eyalev Thank you!
",junegunn,2016-07-30 08:04:00
631,2016-08-11 07:36:36,"Welcome!

I hope a day will come and you could work on open source exclusively (if that's something you want :)

And I should add that `fzf` is one of the most productivity boosting programs I use. Thank you.
",eyalev,2016-07-30 08:04:00
631,2016-08-11 09:06:09,"> I hope a day will come and you could work on open source exclusively (if that's something you want :)

I would definitely back you a bit if you decided to do that :-)
You're one of the person I know that communicates very clearly, always taking the time to express your intent and know when to accept/decline features.
",edi9999,2016-07-30 08:04:00
630,2016-07-28 13:03:10,"`termopen` no longer accepts a `name` option, instead we should suffix the
command with `;#NAME`.
",kassio,2016-07-30 10:05:43
630,2016-07-28 17:01:58,"Thanks, but does `bufexists('term://*FZF')` really work? I just realized that `:help bufexists` states that ""If the {expr} argument is a string it must match a buffer name exactly."" and there's no mention of wildcard expansion. Do we need something like `len(filter(range(1, bufnr('$')), 'bufname(v:val) =~# ""#FZF""'))`?
",junegunn,2016-07-30 10:05:43
630,2016-07-29 10:08:21,"@junegunn You're right, I just replaced the `bufexists` for the `filter`.
",kassio,2016-07-30 10:05:43
630,2016-07-30 10:05:49,"Merged, thanks!
",junegunn,2016-07-30 10:05:43
630,2016-07-31 23:57:36,"I am following **HEAD** in both **neovim** and **FZF** and this breaks **FZF** in **neovim**. The first time I run `:FZF` inside **neovim**, everything is smooth. However, after that, I get `FZF is already running!` error message.

neovim version:  NVIM v0.1.5-659-gaf95037
FZF version:        0.13.3

If I revert to the commit before this everything is working again.
",khalidchawtany,2016-07-30 10:05:43
630,2016-08-01 00:51:45,"@khalidchawtany That's strange. I tested with the latest nvim (v0.1.5-826-g56f1780) before merging this. Can you check if the problem is still reproducible with this minimal vimrc? https://gist.github.com/junegunn/6936bf79fedd3a079aeb1dd2f3c81ef5
",junegunn,2016-07-30 10:05:43
630,2016-08-01 10:02:51,"You are right, something is wrong with my setup. Your minimal vimrc has no problems. Thanks.

# Update:

Opps, I was wrong
With your minimal vimrc, if I use `:FZF<cr>` everything is OK. However, using `:FZF!<cr>` has the same issue. (at least for me)

After running `:FZF!<cr>`, I can see the **fzf** buffer is still preserved in `:ls!` list.
",khalidchawtany,2016-07-30 10:05:43
630,2016-08-01 17:26:05,"@khalidchawtany Thanks for the investigation. I just pushed the fix to the problem.
",junegunn,2016-07-30 10:05:43
629,2016-07-26 01:03:32,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

How to remove the history, where is the history file?

I try to remove the .zsh_history , but now works
",TangMonk,2016-07-26 01:10:08
628,2016-07-26 00:11:56,"<!-- Check all that apply [x] -->
- Category
  - [x] Completion
- OS
  - [x] Mac OS X
- Shell
  - [x] zsh

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

`export FZF_COMPLETION_TRIGGER='  '` does not work. I would like to just be able to double-space, then <tab>, and get completion.
",jedahan,
628,2016-07-27 04:22:32,"It's currently not supported. The code was not written with such triggers in mind. I can imagine we can extend zsh completion to support it, but it may not be possible for bash. For now, you can try a different approach: https://github.com/junegunn/fzf/wiki/Fuzzy-completion
",junegunn,
627,2016-07-25 14:55:20,"Related: #624 

Consider adding a helper function to decorate the dictionary argument to `fzf#run` function so that it understands the following options used in fzf.vim project:
- `g:fzf_layout`
- `g:fzf_action` (For opening files. Only when neither `sink` nor `sink*` is specified)
- `g:fzf_history_dir`

It will make it easier to write fzf-based vim plugins without fzf.vim dependency.

<S_CODE_TOKEN>

Issues:
- `fzf#wrap` returns the transformed dictionary, which may not be used immediately. But the sink function it attaches to the dictionary has to use the snapshot of `g:fzf_action` at that point.
  - Fixed by including the reference to `g:fzf_action` (assuming that it's immutable) in the returned dictionary.
",junegunn,2016-07-25 17:37:48
626,2016-07-20 10:19:36,"- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

I set `setopt HIST_FIND_NO_DUPS` and expect, that my Ctrl+R search history filtered without dups. I don't want to use option HIST_IGNORE_ALL_DUPS cause my history must be full and with dups, and only in search term I don't want to see duplicates.
",vaxXxa,
626,2016-07-20 14:47:05,"Any idea how we can implement it?

Related: https://github.com/zsh-users/zaw/issues/71
",junegunn,
626,2016-07-22 14:02:40,"I have replaced __fzf_history in .fzf-key-bindings.bash with the following : 

<S_CODE_TOKEN>

You will need nauniq (which you can find here : https://metacpan.org/release/App-nauniq)
",edi9999,
626,2016-07-22 14:03:30,"But I wouldn't put this in the main repository
",edi9999,
626,2016-07-31 09:10:21,"@vaxXxa @junegunn @edi9999 Is this helpful http://unix.stackexchange.com/a/84838/44493?

The idea is to add numbers as the first column, sort & uniq by the second column (actual history lines), sort again by the first column (original indices) and remove indices. Only standard tools are used.
",balta2ar,
626,2016-07-31 17:26:49,"@balta2ar Thanks. But since the command history can be huge depending on the configuration I'm a bit concerned about the performance. Since fzf command for ctrl-r binding uses `--tac` option, the input stream should finish very quickly. Any delay will be noticeable and hurt the usability.
",junegunn,
626,2016-08-01 07:37:39,"I also thought that using sort could make the command much slower since sort is O(n \* log(n)): 

However, with 25k lines of history, the command still takes less than 10ms : 

<S_CODE_TOKEN>
",edi9999,
626,2016-08-01 08:05:39,"I have around 12K and it's rather fast:

<S_CODE_TOKEN>
",balta2ar,
626,2016-08-02 06:50:23,"@edi9999 @balta2ar Interesting results, thanks! With my 37K history, it takes 26ms to deduplicate using the approach. Interestingly, alternative solutions using awk or perl turned out to be slower although they can immediately start printing the lines before processing the entire list. However, this advantage does not hold in this case, as the users will most likely want the tail of the list.

<S_CODE_TOKEN>

26ms for 37k means that it will take many more lines to reach 100ms which I believe is still reasonable. If we are concerned about the user seeing the incomplete input stream, we can consider applying `--sync` option to block the UI until the stream is complete.

I'm more inclined to make this behavior the default. You might have noticed that I'm not a big fan of adding more configuration knobs, I think it's our responsibility to find and present the good defaults than to lazily pass the buck to the users.
",junegunn,
626,2016-08-02 07:05:10,"> I'm more inclined to make this behavior the default. 

Do you mean for all shells ? I think this is a good idea.
",edi9999,
626,2016-08-02 09:51:31,"In fact, I just chimed in because I saw a solution for the sorting issue. My use case is not similar to the one of the issue starter. I use `hist_ignore_all_dups` and I'm ok with that, I don't need dups in my history, so I don't want fzf to waste time removing dups when there aren't any. Considering this, I'd vote against adding an extra delay, even such a small one.

Maybe it's better to sleep on it and wait if more users come with the same request? And for now, suggest a script in the Wiki section so that users can still customize the behavior?
",balta2ar,
626,2016-08-02 13:46:53,"@balta2ar Good point, we don't want to pay the cost if the list already without duplicates.

Anyway, I noticed an issue with the suggested approach. It prints the first occurrence of a duplicate command but what we want to see is the last occurrence of it. Using `tac` and enabling stable sort seems to solve the issue, but it adds extra overhead to the processing. On OS X, `tac` is not available by default. We can use `tail -r` instead but it's more expensive.

<S_CODE_TOKEN>
",junegunn,
626,2016-10-27 21:11:44,"@balta2ar Have full history is really helpful, if you want to see step-by-step commands history. For example, you compiled and configured something and want to see again, how you did that.
",vaxXxa,
626,2016-10-28 08:45:09,"@vaxXxa Good point, actually, that might useful. However, there has to be some substring in all of the commands that you want to find in the history. Otherwise, they fill be filtered out by fzf. But yes, I see your point.
",balta2ar,
625,2016-07-19 20:11:37,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
",jasonmay,2016-07-20 04:20:43
625,2016-07-20 04:20:43,"Hi, `FZF!` (bang version) will open fzf in fullscreen. You might want to try out [fzf.vim project](https://github.com/junegunn/fzf.vim) which understands `g:fzf_layout` which is much more flexible than `FZF_TMUX` and `FZF_TMUX_HEIGHT`.
",junegunn,2016-07-20 04:20:43
625,2016-07-20 04:26:30,"Maybe it's time I should bring some good stuff from fzf.vim. I'll let you know if things change.
",junegunn,2016-07-20 04:20:43
624,2016-07-19 15:57:21,"Let **FZF** to remember our most recently used file list like **CtrlPMRU**.  So we can use the **FZF** to replace the **CtrlP** plugin.

All recently used file path will be save an global list variable called `g:fzf_mru_file_list`. And the member of `g:fzf_mru_file_list` will be concatenate by `;` to generate an string, which will be stored in to the `g:FZF_MRU_FILE_LIST` variable. 

Thanks to Vim's **viminfo** and NeoVim's **shada**, the `g:FZF_MRU_FILE_LIST` will be save to and restore from the disk **automatically**. So there is no need to make another file to store the list.

**CtrlP** is awesome, but **FZF** is more better.
",lvht,2016-07-20 02:08:47
624,2016-07-19 17:16:38,"Thank you, but we don't add features to the Vim plugin in this repository. It is supposed to provide only the basic `fzf#run()` function. Instead, we add stuff to [fzf.vim](https://github.com/junegunn/fzf) project, but I'm not sure if I want to put MRU feature in there either as the required bookeeping tends to be a bit too involved for my taste.

There is [fzf-filemru](https://github.com/tweekmonster/fzf-filemru) plugin you might want to check out. I haven't tried it myself, but I believe @tweekmonster can tell you more about it. Maybe he's also interested in taking a look at your implementation.
",junegunn,2016-07-20 02:08:47
624,2016-07-19 20:18:47,"Thanks for the plug :)  While it would be nice to have the MRU built into fzf.vim, I've come to see @junegunn's perspective.  fzf.vim makes use of FZF's and Vim's builtin features, but doesn't add anything beyond that.  Building in MRU would require more than a few options and a separate script since opinions on what an MRU is varies.

fzf-filemru is easy enough to maintain separately as long as it's possible to grab a reference to fzf.vim's `s:common_sink`.
",tweekmonster,2016-07-20 02:08:47
624,2016-07-19 21:38:22,"Hello @tweekmonster . There is no need to make a `$XDG_CACHE_HOME/fzf_filemru` file to store the MRU file list. The viminfo or shada is just enough.
",lvht,2016-07-20 02:08:47
624,2016-07-19 21:54:56,"@junegunn What I want to do is just make the FZF to replace the original CtrlP out of box. As @tweekmonster say,

>  fzf.vim makes use of FZF's and Vim's builtin features, but doesn't add anything beyond that. 

What fzf.vim can do is just make Vim's builtin features more easy. But it is just for @junegunn personal use.

The FZF is an awesome cli tool which should deserve to be used in more and more other tool, eg Vim, Emacs, and so on. Maybe the FZF repository should be split into to parts like 
1. fzf-cli which only contains the binary's `go` code
2. fzf-vim which contains the VimL required for vim integration
3. fzf-emacs for emacs
4. more ...

And I use Homebrew to install the fzf binary, and use Vim-Plug to install [fzf](https://github.com/junegunn/fzf) again. For vim, what I only need is the https://github.com/junegunn/fzf/blob/master/plugin/fzf.vim. However, I have to download all other `*.go` file.

So the current situation is a dilemma.
- The fzf.vim file FZF stocked does not support functions other `fzf#run()` to minimize burden.
- The fzf.vim plugin is just a **personal** @junegunn  simple wrapper of some Vim's builtin function.
",lvht,2016-07-20 02:08:47
624,2016-07-19 22:33:00,"Finally, I make an new repo [fzf-mru](https://github.com/lvht/fzf-mru). FYI @tweekmonster https://github.com/lvht/fzf-mru#story .

If you @tweekmonster would like to accept a PR like fzf-mru, I am happy to do it.

Good luck.
",lvht,2016-07-20 02:08:47
624,2016-07-19 23:18:24,"> There is no need to make a $XDG_CACHE_HOME/fzf_filemru file to store the MRU file list. The viminfo or shada is just enough.

I don't understand why you wouldn't want MRU data stored in a separate file.  IMO, using viminfo/shada is not safe for state information.  First, it could be considered unexpected behavior if you change the settings.  Second, if the user limits the size of entries, your data might not persist.

I consider the data in viminfo/shada critical to my work.  I personally wouldn't want a plugin to alter the settings.
",tweekmonster,2016-07-20 02:08:47
624,2016-07-20 02:08:47,"@tweekmonster 

> fzf-filemru is easy enough to maintain separately as long as it's possible to grab a reference to fzf.vim's s:common_sink.

Do you want me to make it public? I can surely consider that.

@lvht 

> However, I have to download all other *.go file.

Homebrew package of fzf contains fzf.vim, so you can do this:

<S_CODE_TOKEN>

I recently [updated the installation instructions](https://github.com/junegunn/fzf.vim/commit/cd94fca6ce608c0f66086a393b53e56f33b27f28) to mention the above.

> fzf-emacs for emacs

https://github.com/bling/fzf.el

> What fzf.vim can do is just make Vim's builtin features more easy. But it is just for @junegunn personal use.

That was the original intention as I know it becomes more and more difficult to satisfy different needs as the feature set grows, and fzf.vim is a plugin that does maybe too many different things. But I'm aware that there are a lot of users actively using it, so I probably won't break things.

There are many [CtrlP extensions](https://github.com/search?utf8=%E2%9C%93&q=ctrlp) out there that provide extra features. I prefer the approach over having an inflexible, monolithic plugin and we can do the same for fzf, like you guys did.

Feel free to add your projects to [the wiki page](https://github.com/junegunn/fzf/wiki/Related-projects). I'm going to close this as wontfix. Thanks.
",junegunn,2016-07-20 02:08:47
624,2016-07-20 02:32:10,"> Do you want me to make it public? I can surely consider that.

Only if you think it'll solve other issues.  I think it works fine as-is.  Maybe it'd be better if the caller's `*sink` was wrapped and if it returned `1`, run `s:common_sink`.

FWIW, I considered `fzf.vim` to be a very functional showcase.  I would expect public utility APIs to be in `fzf`'s script.
",tweekmonster,2016-07-20 02:08:47
624,2016-07-20 04:23:02,"> I would expect public utility APIs to be in fzf's script.

Good point. You don't want your fzf-based vim plugin to depend on both fzf and fzf.vim.
",junegunn,2016-07-20 02:08:47
624,2017-02-26 01:34:04,"i thought the :History command does the mru work, is it different?",FinallyFinancialFreedom,2016-07-20 02:08:47
624,2017-02-26 01:53:42,"@FinallyFinancialFreedom `:History` uses `v:oldfiles` and current buffers to give you a list.  The order isn't exactly based on how recently you used the file.  With FZF you can filter the list pretty easily to find the file you want.  With an MRU, you can do it in fewer keystrokes if you have a lot of similarly named files since the results are sorted based on how recent and frequently you used the file.",tweekmonster,2016-07-20 02:08:47
624,2017-02-26 01:59:56,"well, thank you for explaining, i'll look into it",FinallyFinancialFreedom,2016-07-20 02:08:47
623,2016-07-18 05:10:13,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [*] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [*] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [*] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

https://github.com/junegunn/fzf/wiki/Examples

My ag version is 0.19.2, it's does not have option name `--nonumbers`
should it be `--no-numbers`?
",good5dog5,2016-07-18 05:24:47
623,2016-07-18 05:24:47,"Hi, in the latest version `--nonumbers` is the correct name. See: https://github.com/ggreer/the_silver_searcher/commit/528b2669c53896b59efcea8d6242ce9f4de4b8cf

You might want to upgrade your ag, it's two years behind. And FYI, the write permission to the wiki page is open to public and I don't audit the snippets users post there. So maybe there can be some broken examples. Feel free to ping me if you find any errors, thanks!
",junegunn,2016-07-18 05:24:47
622,2016-07-13 06:10:43,"I have a simple function:

<S_CODE_TOKEN>

When I call it on a tag that has 3 matches, the window looks like this:

<S_CODE_TOKEN>

The third match is pushed out of the window because of the header line.

<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
",mrbiggfoot,2016-07-14 04:36:10
622,2016-07-13 16:11:11,"You can scroll past the screen boundary. In `3/3`, the first 3 is the number of matches - since the query is empty all lines match - and the second 3 is the total number of lines. Likewise, `seq 100000 | fzf` will display `100000/100000`. Maybe you want to increase the height of the split by increasing the value of `down` property?
",junegunn,2016-07-14 04:36:10
622,2016-07-14 04:18:57,"@junegunn I understand that I can scroll down. The thing is - even if I set ""down"" to ""~90%"", nothing changes. What happens is - the window height is automatically calculated based on the number of matches. But the calculated window height does not take the ""--header"" line into account, so the last match gets pushed out of the window no matter what ""~X%"" is set in ""down"". The auto-calculated window height should be incremented by 1 if ""--header"" is specified (but stay within the ""~X%"" bounds of course).
",mrbiggfoot,2016-07-14 04:36:10
622,2016-07-14 04:20:30,"In other words - on small number of matches, where all of them can fit in the window, one last match is not shown because of the header line.
",mrbiggfoot,2016-07-14 04:36:10
622,2016-07-14 04:34:10,"Oh I see. Technically, header string can contains any number of new line characters so just incrementing the height by 1 is not enough, but I don't think we can/should implement proper option parser in the Vimscript, so it's probably the most practical solution. (e.g. Without a proper parser, it can be easily tricked by something like `--query ""--header foo""`)
",junegunn,2016-07-14 04:36:10
622,2016-07-14 04:37:35,"Fixed it. Tested with:

<S_CODE_TOKEN>

Thanks for the report.
",junegunn,2016-07-14 04:36:10
622,2016-07-14 11:11:45,"Thanks @junegunn, your work is much appreciated!
",mrbiggfoot,2016-07-14 04:36:10
621,2016-07-13 03:16:13,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Using `kill -9`, for example, after I've selected the commands I want from `fzf` by htting tab on each, when I hit enter, my terminal responds with a bell and `fzf` closes without outputting any of my selections. Is it enter that I should be pressing, or is it a different key that closes fzf and inputs my selections? 
",domi91c,2016-07-14 01:22:22
621,2016-07-13 04:29:57,"It should work. I'm not sure what's going on. Can you share the recording of the situation using https://asciinema.org/ ?
",junegunn,2016-07-14 01:22:22
621,2016-07-13 23:37:10,"Sorry, I didn't run `/usr/local/opt/fzf/install`. It's working fine now, you can close this. Awesome plugin by the way, thanks for your work.
",domi91c,2016-07-14 01:22:22
620,2016-07-12 22:06:07,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Sorry if I missed a piece of information, this is the first time I submit an issue..
I get the following error when running :FZF in vim
![image](https://cloud.githubusercontent.com/assets/766723/16785271/05ba8a02-4842-11e6-85cd-3706ac23e000.png)
",faruzzy,2016-07-13 04:15:37
620,2016-07-13 04:21:54,"The code failed to handle multi-line FZF_DEFAULT_COMMAND. Should be fixed now though I'll see if there's a better way to handle this. Thanks for the report.
",junegunn,2016-07-13 04:15:37
620,2016-07-13 16:12:08,"Thanks for looking into this! 
",faruzzy,2016-07-13 04:15:37
619,2016-07-12 20:24:25,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

When `--inline-info` is passed, no spinner is shown.  I'm not sure if this is a bug, or intentional, or whether it's too expensive to keep redrawing a spinner on the same line as the query input.
",chdiza,2016-07-13 04:24:44
619,2016-07-13 04:24:44,"It's intentional. But if you look closely, the color of `<` after the query changes when the input stream is closed. e.g. `sleep 1 | fzf --inline-info`
",junegunn,2016-07-13 04:24:44
618,2016-07-12 14:28:05,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [*] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [*] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [*] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

tmux version 2.1
fzf 0.12.1 (installed by brew)
When input /usr/local/bin/fzf-tmux nothing happened.

I also tried fzf 0.13.2 , it works well.
",wa9035148,2016-07-14 16:22:35
618,2016-07-12 16:37:56,"I primarily use OS X, and I'm pretty certain that I had no issue when I released 0.12.1. But anyway, since you said 0.13.2 works fine, it's time for `brew update && brew reinstall fzf`.

https://github.com/Homebrew/homebrew-core/blob/master/Formula/fzf.rb#L6
",junegunn,2016-07-14 16:22:35
617,2016-07-09 17:57:21,"<!-- Check all that apply [x] -->
- Category
  - [ x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

This problem occurs for commit 6081eac58a0c1fe7cf920dc41d7d6ec07293b0ee

 $ ~/.fzf/install 
Downloading bin/fzf ...
- Creating symlink: bin/fzf-0.13.2-darwin_amd64 -> bin/fzf
- Checking fzf executable ... Error: 
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  100   604    0   604    0     0   1315      0 --:--:-- --:--:-- --:--:--  1363
  100  913k  100  913k    0     0   262k      0  0:00:03  0:00:03 --:--:--  427k
- Creating symlink: bin/fzf-0.13.2-darwin_amd64 -> bin/fzf
- Checking fzf executable ... Error: 
- Invalid binary !!!

$ ~/.fzf/bin/fzf-0.13.2-darwin_amd64
Illegal instruction: 4

$ uname -a
Darwin picard.local 11.4.2 Darwin Kernel Version 11.4.2: Thu Aug 23 16:25:48 PDT 2012; root:xnu-1699.32.7~1/RELEASE_X86_64 x86_64
",srasku,2016-07-15 15:37:58
617,2016-07-10 02:29:20,"Can you build the binary with `go get -u github.com/junegunn/fzf/src/fzf` on Lion? If that's possible, I'll update the install script to try building it if the downloaded binary does not work on the system.
",junegunn,2016-07-15 15:37:58
616,2016-07-09 14:52:42,"The command `tmux send-keys` is really not intended for text I don't believe. Instead, we should use a buffer. The buffer can be deleted right after it's used.

This solves the problem of if you select a filename with ctrl+t that has unicode characters in them. I noticed this when selecting song files that were in different languages. The output was corrupted, and could not be used in commands.

This should fix the problem, and I do not believe this problem is anywhere else in the code.

Actually I'm not sure why ctrl+t needs a special function like this in bash only, but I haven't looked at the other shells' implementations to see how it works for them.

(Also I am working on a keybindings port to mksh, if you are interested in merging that as well.)
",seanlaguna,2016-07-10 03:29:32
616,2016-07-09 18:04:48,"Are you using some terminal encoding other than utf8?
",justinmk,2016-07-10 03:29:32
616,2016-07-09 18:08:59,"Nope, using utf-8. Note that this only affects control+t in bash and tmux mode. Such text displays correctly in my terminal using any other textual program, and displays correctly in many graphical programs that are sensitive to locale settings.
",seanlaguna,2016-07-10 03:29:32
616,2016-07-09 18:26:11,"Just double-checked, this issue persists for gnome-terminal, xfce4-terminal, and st, all of which are using utf-8.
",seanlaguna,2016-07-10 03:29:32
616,2016-07-10 03:23:34,"Thanks, I've noticed this recently with the latest versions of tmux. I'll merge your commit with updated test code.
",junegunn,2016-07-10 03:29:32
616,2016-07-10 03:31:31,"Awesome, thanks!

Any comments on why the script is needed for bash? Why can't we just use pipes to fzf or fzf-tmux when doing the ctrl+t command implementation?

Also, are you interested in mksh? Problem with any korn shell is there's no inline command expansion -- i.e., the return key _must be pressed_ and a command _must be entered into the prompt_ in order for anything to happen*. We still use bind, but bind enters an enter/return in order to execute the necessary command. I have ctrl+r, ctrl+t, and alt+c working, and I'm working on porting over as much as possible from complete as well. (But, korn shell command line completion is very weak, so it will not be possible to support it all). The ways to get these commands working properly are extremely hackish, but they will work identically to the other shells' versions except for entering a single command into the terminal of the name

<S_CODE_TOKEN>

or whatever. (Note the leading space -- mksh _unconditionally_ doesn't save to history if there is a leading space in a command).

There are also some extra environment variables that are set; this is unaviodable.

If this is the kind of thing that could feasibly be merged I would work to make it as clean and standardized as possible, so let me know when you have the chance.

\* I lied a little bit. There are some predefined commands you can bind to keys, but they are very limited, and they definitely cannot execute arbitrary mksh code.
",seanlaguna,2016-07-10 03:29:32
616,2016-07-10 03:32:29,"Merged, thanks.

> Actually I'm not sure why ctrl+t needs a special function like this in bash only

zsh and fish use `fzf-tmux` script which greatly simplifies the implementation. However in bash, invoking `fzf-tmux` requires `shell-expand-line` which expands aliases on the command line, e.g. `ls` becomes `ls -G` immediately when you press CTRL-T.
",junegunn,2016-07-10 03:29:32
616,2016-07-10 03:34:47,"Argh, alias expansion... that'll do it...

If korn shell had $() expansion it would be my perfect shell.
",seanlaguna,2016-07-10 03:29:32
616,2016-07-10 03:36:43,"> are you interested in mksh?

Hmm, I'm a bit concerned that I'll have difficulty maintaining the code as I have no experience or knowledge on mksh. For now, let's keep it as a separate repository and maybe add a link to it on the README page?
",junegunn,2016-07-10 03:29:32
616,2016-07-10 03:38:22,"That would be awesome! I'd love to see people stress-test it, but for now I've done a decent amount of comparing the output with bash version and it looks to behave the same way. It's hard, though, because of differences with the history file/recall in bash/mksh, they inherently do not behave the same way.
",seanlaguna,2016-07-10 03:29:32
616,2016-07-10 03:39:25,"Nice, ping me when your repository is ready, I'll update the doc.
",junegunn,2016-07-10 03:29:32
616,2016-07-10 06:09:07,"Hmm, I noticed an issue with the change. Older tmux releases do not support named paste buffers and `tmux setb -b fzf ""something""` gives `buffer invalid` error. That's why the tests are failing on Travis CI environment where tmux 1.9 is installed. I do not wish to revert the change, but I do wish to support older tmux versions as well. I'll see what I can do.
",junegunn,2016-07-10 03:29:32
615,2016-07-06 22:06:39,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

when I ctrl-t I get 

> __fsel:setopt:5: no such option: pipefail

but it doesn't seem to affect usage. 
",githubfun,2016-07-11 08:48:00
615,2016-07-07 01:04:19,"What is your `zsh --version`?
",junegunn,2016-07-11 08:48:00
615,2016-07-07 04:20:37,"it is the default zsh on centos 7. Now I realize it might be too old. 

<S_CODE_TOKEN>
",githubfun,2016-07-11 08:48:00
615,2016-07-07 04:38:44,"Yeah, I can reproduce the problem on 5.0.2. I'll see if there's an easy workaround when I get some time.
",junegunn,2016-07-11 08:48:00
615,2016-07-11 08:06:42,"I have the same version of zsh and following error: `fzf-history-widget:setopt:2: no such option: pipefail`
",vexelenn,2016-07-11 08:48:00
615,2016-07-11 08:46:12,"`pipefail` was introduced in #601, but it's fine to ignore the error. I'll update the code shortly.

/cc @blueyed 
",junegunn,2016-07-11 08:48:00
614,2016-07-06 16:06:53,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [x] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I have the following bindings in tmux:

<S_CODE_TOKEN>

And these in vim:

<S_CODE_TOKEN>

When I open fzf in vim or just in a shell in tmux, the priority for CTRL-J/K is given to the pane switching. Is there some way for me to override this if fzf is open? CTRL-J/K works great if I'm not in a tmux session.
",adamyonk,2016-07-07 03:59:48
614,2016-07-06 17:19:16,"You might want to take a look at #582 (unfortunately the PR was reverted).
",junegunn,2016-07-07 03:59:48
614,2016-07-06 18:06:52,"That helps, thank you! This fixes the tmux part (checks for vim OR fzf):

<S_CODE_TOKEN>

It's still not working in vim, I'll keep tweaking it and report back.
",adamyonk,2016-07-07 03:59:48
614,2016-07-07 03:59:48,"I was able to get it working with this: https://github.com/junegunn/fzf/pull/582#issuecomment-230929094
",adamyonk,2016-07-07 03:59:48
613,2016-07-06 13:34:05,"Changed the test to `[[ -o vi ]]` since true=0. Now in vi mode, it returns 0 and jumps to the `else` block like we want.
",tdy,2016-07-07 00:11:45
613,2016-07-06 16:57:54,"Exit status 0 evaluates to true in shell. Are you sure you're not confused?
",junegunn,2016-07-07 00:11:45
613,2016-07-06 19:00:24,"Ah sorry you're right. I confused myself and didn't test it thoroughly enough.

It seems my issue was actually due to enabling vi mode with `set editing-mode vi` in .inputrc, which isn't detected by a `-o vi` test. I guess it requires an explicit `set -o vi`, so I added it to .bashrc and now it's working on my end.

I'm not sure if there's a way to test for both settings, but in any case this patch is wrong. Sorry!
",tdy,2016-07-07 00:11:45
613,2016-07-07 00:11:45,"We haven't found the silver bullet. See #39. Please let me know if you discover a better way to handle this. Thanks.
",junegunn,2016-07-07 00:11:45
612,2016-07-05 15:35:11,"https://www.reddit.com/r/vim/comments/4rbf76/help_with_fzf_changing_directory/

Steps to reproduce
- `cd /tmp`
- `:pwd`
- `:FZF ~`
- Press `CTRL-T` to open file in a different window
- `:pwd` (ok)
- `gT`
- `:pwd` (in `~`)
",junegunn,2016-07-06 04:31:24
612,2016-07-05 15:36:46,"Related: https://github.com/junegunn/fzf.vim/issues/147
",junegunn,2016-07-06 04:31:24
611,2016-07-05 09:03:21,"`completion.zsh` is currently meant to be sourced (since it sets up a keybinding). However, this will cause aliases to be expanded inside functions defined therein. E.g., `rm` might be aliased to always query, or to refuse deletion. Generally, shell library code should ignore aliases to ensure the desired effects apply.

I’m not sure how this could be achieved best. Disabling alias expansion temporarily and re-enabling it would be a hassle. As would be prefixing each external command with the `command` premodifier.

My guess is that the best practice here is to define things so they can be autoloaded, since Zsh has `autoload -U`, which inhibits alias expansion and is generally used when enabling library code.
",eigengrau,2016-07-06 16:59:53
611,2016-07-05 09:42:01,"Making the completion widget an autoloaded function wasn’t too hard. Though I’m not so sure now if this is the best way. While it does inhibit alias expansion, for things like `rm`, it’s just as likely that the user redefined them using functions (for argument parsing). However, what I’ve seen a bunch of times is that one hardcodes the absolute path when external commands are used. Maybe that’s a better way?
",eigengrau,2016-07-06 16:59:53
611,2016-07-05 09:49:35,"Silly me. I just now realized you were already escaping some external commands in the script so as not to expand aliases. It’s just that some instances aren’t escaped yet, and sadly this won’t stop triggering user-defined functions.
",eigengrau,2016-07-06 16:59:53
611,2016-07-05 13:14:55,"Thanks.

> It’s just that some instances aren’t escaped yet

Yeah, we should fix them, should I just go ahead? Let me know if you have better ideas. The `autoload` thing you suggested, I'm not really familiar with the concept (I'm a bash user). Please note that I'm not looking for significant changes to the shell stuff at this stage. The code basically serves as a reference implementation, and it's meant to be forked/customized to different needs.
",junegunn,2016-07-06 16:59:53
611,2016-07-06 07:31:04,"> Yeah, we should fix them, should I just go ahead? Let me know if you have better ideas.

Yeah, go ahead as you see fit. Autoloading isn’t a better option, since it doesn’t inhibit function calls either. However, if you don’t find it too ugly, you might want to write `command find` instead of `\find`. This will inhibit both alias expansion _and_ shell function lookup. Maybe Zsh has some magics too solve this problem in a nicer-looking way, but unfortunately I couldn’t find them.

Anyway, thanks for making fzf!
",eigengrau,2016-07-06 16:59:53
611,2016-07-06 09:58:57,"> you might want to write command find instead of \find. This will inhibit both alias expansion and shell function lookup

Good point, I wasn't aware of it. I will do it later in the day.
",junegunn,2016-07-06 16:59:53
611,2016-07-06 17:03:04,"Updated the code. Some commands like sed are still used without `command` prefix, but those are the commands that I don't think we should worry too much about.
",junegunn,2016-07-06 16:59:53
610,2016-07-04 10:21:18,"zle automatically calls zle-line-init when it starts to read a new line. Many
Zsh setups use this hook to set the terminal into application mode, since this
will then allow defining keybinds based on the $terminfo variable (the escape
codes in said variable are only valid in application mode).

However, fzf resets the terminal into raw mode, rendering $terminfo values
invalid once the widget has finished. Accordingly, keyboard bindings defined
via $terminfo won’t work anymore.

This fixes the issue by calling zle-line-init when widgets finish. Care is taken
to not call this widget when it is undefined.

Fixes #279
",eigengrau,2016-07-05 12:50:43
610,2016-07-05 02:35:03,"Do we also need this in completion.zsh?
",junegunn,2016-07-05 12:50:43
610,2016-07-05 06:53:40,"Good catch. I wasn’t even aware of completion.zsh, since the Archlinux package currently installs it into the wrong location (I’ve filed a bug for this). Since the keybinding there also launches fzf, we’ll need to fix up the terminal mode there, too. Hold on, I’ll amend this commit.
",eigengrau,2016-07-05 12:50:43
610,2016-07-05 12:51:26,"I could confirm that this fixes the issue with the config you provided. Merged, thanks!
",junegunn,2016-07-05 12:50:43
609,2016-07-04 10:17:16,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [x] Key bindings
  - [x] Completion
- OS
  - [x] Linux
- Shell
  - [x] bash

Using `Ctrl-r` on my Bash I run correctly fzf and hitting `Return` I get the history command selected on my bash prompt. But to run that command I have to hit `Return` again.

So, is there a way to let fzf running directly the command chosen, instead of completing the bash prompt? Maybe with a `Shift+Return` or something?
",caneta,2016-07-04 15:21:28
609,2016-07-04 15:16:53,"Duplicate of https://github.com/junegunn/fzf/issues/477
",edi9999,2016-07-04 15:21:28
609,2016-07-04 15:21:28,"Ok, at least I'm not alone requesting this feature! :-D
",caneta,2016-07-04 15:21:28
609,2016-07-04 18:30:56,"Right, see https://github.com/junegunn/fzf/issues/477#issuecomment-230338992
",junegunn,2016-07-04 15:21:28
608,2016-07-04 03:55:34,"On the append_line method, when trying to discover if the pattern exists
or not the `grep -nF ""$pat"" ""$file""` fails and the installation exits
due to the `set -e`.
",hposca,2016-07-04 04:00:38
608,2016-07-04 04:01:24,"Ah, thanks. My bad. I fixed it by unsetting pipefail.
",junegunn,2016-07-04 04:00:38
607,2016-07-01 22:00:03,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

By default zsh arrays start at 1, while in ksh, bash and other shells it starts at 0. Zsh provides an option to make arrays behave differently called ksh_arrays, unfortunately if a user enables this option the fzf bindings have conflicts.

The fix is simple, add the `noksh_arrays` localoption inside `fzf-completion()` in `completion.zsh`
",acornejo,2016-07-14 16:26:39
607,2016-07-02 10:44:39,"Thanks for the heads up. So this is all we need?

<S_CODE_TOKEN>
",junegunn,2016-07-14 16:26:39
607,2016-07-14 16:27:28,"Fixed, thanks!
",junegunn,2016-07-14 16:26:39
606,2016-06-25 16:26:19,"- Category
  - [x] fzf binary

Hi, it'd be great to have a ""typeahead"" action so we can
bind a key (say, Tab), to change the contents of the input
to the selected entry (if any).

Use case:

I have a script which lists some items and pipes to fzf.
I'd like to pass additional text the recieving end which
called fzf with `--print-query` so it gets the additional
argument. It'd be great for UX if user can complete the
input from the entry list and type only the additional data
instead of copying from the item list to input box manually
and typing the additional data.

I'd have gone as far as suggesting to bind this to `Tab` by
default but it seems it is pre-occupied :)

Here is a patch to implement this:

<S_CODE_TOKEN>
",awalgarg,2016-06-26 16:14:29
606,2016-06-26 16:14:29,"Thanks for the suggestion. But after some consideration, I decided that I don't want the option in fzf.

> It'd be great for UX if user can complete the input from the entry list and type only the additional data

I'm not sure about this. I don't see why we have to use fzf to take the extra data for the found match. It's not how fzf was designed to be used. First you type in the initial query string to find the match, and you get what you want highlighted. But then if you type in the additional data for the match, the query changes accordingly, and you no longer see the same result, which I believe can be quite confusing. The confusion is unavoidable since the input prompt of fzf is strictly for narrowing down the candidates.

Another subtle problem with the approach is that fzf does not take the query string literally unless extended-search mode is turned off, so it is not always guaranteed that you will still see the item at the head of the list after you replace the query string to it (e.g. `echo 'if !cond' | fzf -q 'if !cond'`). And for the sake of simplicity, I'm not considering the addition of escaping syntaxes.

Although fzf provides a rich feature set that allows more sophisticated use cases, fundamentally, it's still an interactive unix filter. I believe you can find a more _orthodox_ solution to the problem. For example, you may use `--expect` option to set up an alternative accept key that can be used to optionally start an extra prompt for the extra data.

<S_CODE_TOKEN>
",junegunn,2016-06-26 16:14:29
606,2016-06-26 16:19:11,"> For example, you may use `--expect` option to set up an alternative accept key that can be used to optionally start an extra prompt for the extra data.

Indeed, that better serves the use case. Thanks for the pointer!
",awalgarg,2016-06-26 16:14:29
606,2016-08-10 06:16:39,"Hi.

Sorry for bumping this again, but I have run into another use-case where this could be helpful. The list of entries piped to fzf are of the form:

<S_CODE_TOKEN>

So basically lots of repetition in the first column(s) and then some more columns. It would be cool if we can just do this:

<S_CODE_TOKEN>

Do you think there is a better way to do this with current fzf feature set? If not, would you reconsider the originally proposed extension to fzf?
",awalgarg,2016-06-26 16:14:29
606,2016-08-10 16:02:38,"How about just typing in `fc`? That's what I'd do. Or to be more precise, `f ^c` with `--nth ..,2..` option. It's hard to evaluate the usefulness of the feature with the synthetic input you provided above. fzf is a line-oriented Unix filter and I believe it is most natural to use it with flat list of things presented as lines.
",junegunn,2016-06-26 16:14:29
605,2016-06-24 16:54:29,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [x] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

When I try to install from git according to readme, I get an error during `install` script:

<S_CODE_TOKEN>
",jan-warchol,2016-07-03 16:42:23
605,2016-06-24 17:14:26,"Looks like something's wrong with your installation of curl. The below command is used to download the binary, which for some reason fails on your system.

<S_CODE_TOKEN>

I'm sure you'll be able to find the solution after some Googling.
Anyway, can you try this command instead? Does it work?

<S_CODE_TOKEN>
",junegunn,2016-07-03 16:42:23
605,2016-06-24 18:41:58,"Yes, wget works.
",jan-warchol,2016-07-03 16:42:23
605,2016-06-24 18:57:44,"For what it's worth, copying certificates from one directory to another (as described in [this SO question](http://stackoverflow.com/a/30154802/2058424)) fixed curl for me.
",jan-warchol,2016-07-03 16:42:23
605,2016-07-03 16:47:28,"Thanks!
",jan-warchol,2016-07-03 16:42:23
605,2016-07-03 17:12:38,"No problem, thanks.
",junegunn,2016-07-03 16:42:23
604,2016-06-23 10:31:38,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi!
I've adapted the `fe` zsh function to open files in vim even if they don't exist. To do that, I grab the query string entered to find files. Of course, I have to enter the full path in the querystring in order to be able to create the folder hierarchy if it doesn't exist...
I was wondering if there's a way to autocomplete the path in the querystring using tabs or any other key mapping (I've removed `Tab` key map in my setup), as if I were in the shell.

Thanks for the help!
",Ferdev,2016-06-23 15:26:31
604,2016-06-23 15:26:31,"Thanks for the suggestion, but I don't think we should implement auto-completion on fzf. We'll at best end up reinventing a star-shaped wheel that doesn't shine. I would just terminate fzf (`ctrl-c` or `esc` or whatever) and use the proper auto-completion of the shell.

> I have to enter the full path in the querystring in order to be able to create the folder hierarchy if it doesn't exist

fzf is a fuzzy finder where we type in ""fuzzy"" queries to find the matches. Typing in an accurate file path on fzf doesn't feel like the most straightforward approach.

> To do that, I grab the query string entered to find files.

You're using `--print-query` option, right? I think it would be possible to write a zsh widget, which puts the query string on the command-line, so you can continue with the auto-completion of your shell. There are some options that you might want to take a look at; `--expect`, `print-query` action for `--bind`, etc.
",junegunn,2016-06-23 15:26:31
603,2016-06-20 06:38:08,"- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

With the following minimal `.vimrc`

<S_CODE_TOKEN>

Then
- opening an empty file
- hit i to go to insert mode
- hit C-x C-f to fzf-complete the file
- choose the first file (mine is called `_vimperatorrc`)
- This strangely inserts (`_vimperatorrca`) 

There's an additional `a` character at the end.

I'm running one of the latest nvim version (NVIM v0.1.5-280-g176f223)

I will also try to investigate
",edi9999,2016-06-20 07:10:25
603,2016-06-20 06:39:17,"This doesn't happen If I remove the line

<S_CODE_TOKEN>
",edi9999,2016-06-20 07:10:25
603,2016-06-20 07:10:19,"Moved to https://github.com/junegunn/fzf.vim/issues/165
",edi9999,2016-06-20 07:10:25
602,2016-06-17 14:42:03,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

---

Hi,

Is there any chance of making it possible to open files in Vim by specifying line (and maybe column) number?

For example, to suggest `some_spec.rb` file if I type `some_spec.rb:30` and open it in line `30`.
",exAspArk,2016-06-18 14:58:50
602,2016-06-18 14:58:49,"So we have `some_spec.rb` in the list and you type in `smspcrb:30` and enter to match the file and open it in Vim? I don't think it's possible since the moment you type `:30` fzf will no longer match the file. And as fzf is just a Unix filter that does not know the context, I can't think of a good way to allow it. I would simply type in `30G` once the file is open.

By the way, if you use fzf in Vim, you might also want to checkout [fzf.vim](https://github.com/junegunn/fzf.vim) project.
",junegunn,2016-06-18 14:58:50
602,2016-06-22 15:52:37,"Or you could add a --bind with `:` to open a new fzf instance that lets you choose the line number
",edi9999,2016-06-18 14:58:50
601,2016-06-15 23:06:36,"This allows to have a custom widget like the following, which would
additionally accept the line, but only in case of entries being
selected:

<S_CODE_TOKEN>

With this `<C-a>t` will launch fzf, and simulate the pressing of ""Enter""
afterwards.
",blueyed,2016-06-18 14:17:10
601,2016-06-16 15:33:59,"Looks good. Should we do the same to history widget?
",junegunn,2016-06-18 14:17:10
601,2016-06-16 18:19:54,"Added it for all widgets, but not tested.
",blueyed,2016-06-18 14:17:10
601,2016-06-18 14:17:17,"Merged, thanks.
",junegunn,2016-06-18 14:17:10
600,2016-06-15 07:56:19,"<!-- Check all that apply [x] -->
- Category
  - [X] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- Shell
  - [ ] bash
  - [X] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I would like to know if it's possible to limit the duplication in fzf specially in the shell history command? Or maybe I'm do it it wrong?

![capture d ecran 2016-06-15 a 09 40 39](https://cloud.githubusercontent.com/assets/8417720/16072095/58fe0392-32df-11e6-8f68-3cf9acb4f720.png)
",benoittgt,2016-06-15 15:43:15
600,2016-06-15 15:43:15,"Hi, this is one of the recurring questions. Please see #49, #88, #492. Thanks.
",junegunn,2016-06-15 15:43:15
600,2016-06-16 08:14:05,"Thanks @junegunn and sorry for the duplicate
",benoittgt,2016-06-15 15:43:15
600,2016-06-20 13:00:20,"For other people encoutering this issue, here is the changes I've made to remove duplicates : 

<S_CODE_TOKEN>
__fzf_history__() {
  local line
  countskip=""$(history | tail -n 1 | grep -E '^[0-9]+' -o | wc -c)""
  countskip=""$(( countskip + 1 ))""
  line=$(
    HISTTIMEFORMAT= history |
    grep '.\{1,79\}' |
    sed 's/ *$//g' |
    tac |
    nauniq --skip-chars=""$countskip"" |
    tac |
    $(__fzfcmd) +s --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r |
    \grep '^ *[0-9]') && sed 's/ *\([0-9]*\)\** .*/!\1/' <<< ""$line""
}<S_CODE_TOKEN>```
",edi9999,2016-06-15 15:43:15
599,2016-06-14 16:01:01,"- Category
  - [X] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [X] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [X] fish

My fish history contains commands that span multiple lines e.g.:

<S_CODE_TOKEN>

However, fzf (specifically when using ctrl-r, but probably elsewhere as well) treats the command above as it was two separate commands.

I have only tried this with fish on Linux, but it probably applies to other shells too.
",rocketraman,2016-06-14 16:08:12
599,2016-06-14 16:02:40,"Using fish 2.3.0, fzf 0.13.1.
",rocketraman,2016-06-14 16:08:12
599,2016-06-14 16:07:20,"Yeah, it's a known issue only for fish (#436). There is an incomplete patch (#440) for that, but the contributor has been inactive for months, so you can take over the work if you're familiar with fish scripting.
",junegunn,2016-06-14 16:08:12
598,2016-06-14 12:33:49,"fzf currently processes the entire text before displaying the first page on the preview window. If the text contains many ANSI escape codes, the UI can easily become unresponsive. Fix.
",junegunn,2016-06-14 12:56:16
597,2016-06-13 08:49:05,"- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [x] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

Use case:

<S_CODE_TOKEN>

My setting for both `$FZF_CTRL_T_COMMAND` and `$FZF_DEFAULT_COMMAND`:  

<S_CODE_TOKEN>
",letientai299,2016-06-13 09:58:25
597,2016-06-13 09:38:46,"See
- https://github.com/junegunn/fzf#settings
- https://github.com/junegunn/fzf/blob/master/shell/completion.bash#L13
- https://github.com/junegunn/fzf/blob/master/shell/completion.zsh#L13

So why is it different? Because in fuzzy completion we have to take the prefix into account unlike in `FZF_CTRL_T_COMMAND` and `FZF_DEFAULT_COMMAND`. Take `vim ~jg/**` for example, we can't just start `ag --path-to-agignore ~/.agignore -g """"` and pass `~jg/` as the default query. The command should handle the prefix, so we use functions.
",junegunn,2016-06-13 09:58:25
597,2016-06-13 09:58:25,"Thanks, I will try to customize the 2 functions. 
",letientai299,2016-06-13 09:58:25
596,2016-06-12 11:02:05,"- Category
  - [x] fzf binary
  - [x] Neovim
- OS
  - [x] Mac OS X
- Shell
  - [x] zsh

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Is there is a way to have different options for <kbd>CTRL</kbd>+<kbd>R</kbd> and <kbd>CTRL</kbd>+<kbd>T</kbd>?

For example I want <kbd>CTRL</kbd>+<kbd>T</kbd> to always show preview `--preview` but I don't want this with <kbd>CTRL</kbd>+<kbd>R</kbd>?

currently this is my options

<S_CODE_TOKEN>
",ahmedelgabri,2016-06-12 11:48:35
596,2016-06-12 11:46:41,"I don't think one should put `--preview` in `FZF_DEFAULT_OPTS` as it only makes sense for a specific type of input. Anyway, I'll add `FZF_CTRL_T_OPTS` and `FZF_ALT_C_OPTS` so you can customize the options.
",junegunn,2016-06-12 11:48:35
596,2016-06-12 12:48:09,"Thanks @junegunn 
",ahmedelgabri,2016-06-12 11:48:35
596,2016-06-12 13:41:07,"One last question, will the `--preview` flag work in neovim using `fzf.vim`? because it doesn't work if I do this

<S_CODE_TOKEN>

it returns this error 
<img width=""418"" alt=""screen shot 2016-06-12 at 15 40 00"" src=""https://cloud.githubusercontent.com/assets/63876/15991468/fb793f16-30b3-11e6-8e37-316dd6e90e05.png"">

But it works if I have `--preview ""pygmentize -g {}"" --color light --bind ?:toggle-preview` as part of `FZF_DEFAULT_OPTS`
",ahmedelgabri,2016-06-12 11:48:35
596,2016-06-12 14:41:23,"The first argument to the function is the base directory to start search. The options dictionary should be the second.
",junegunn,2016-06-12 11:48:35
596,2016-06-12 14:46:34,"What if I want to keep everything as it is but just use different options? Do I need to duplicate the logic [here](https://github.com/junegunn/fzf.vim/blob/master/autoload/fzf/vim.vim#L190-L204)?
",ahmedelgabri,2016-06-12 11:48:35
596,2016-06-12 14:51:55,"No, the option in the dictionary you pass as the second argument will be appended to the default set of options.
",junegunn,2016-06-12 11:48:35
596,2016-06-12 14:58:23,"Also note that the default Files command takes an optional directory argument which to me is quite useful, you may not want to lose the functionality. Refer to [the definition of the command](https://github.com/junegunn/fzf.vim/blob/7c58cb98e92c6a324589ebc38ccb5e8594580884/plugin/fzf.vim#L41).
",junegunn,2016-06-12 11:48:35
596,2016-06-12 15:09:53,"Thanks for pointing this out. My solution was actually about only passing the `cwd` to `Files` something like this but I think this will break the optional argument.

<S_CODE_TOKEN>
",ahmedelgabri,2016-06-12 11:48:35
596,2016-06-12 15:55:30,"If you see the definition of the original command, you'll realize that you only need to pass an empty string (`<q-args>` is empty when no argument is given) to start search from the current directory.

And `substitute(system(""echo $FZF_CTRL_T_OPTS""), '\n\+$', '', '')` is a very long version of `$FZF_CTRL_T_OPTS`. Vim knows about env vars.
",junegunn,2016-06-12 11:48:35
596,2016-06-12 16:00:06,"Awesome, thanks!
",ahmedelgabri,2016-06-12 11:48:35
596,2016-06-14 19:24:57,"Everything is working fine except that when I define a custom `Files` command like above the colors of `fzf.vim` are missed up, any idea why? commenting it out returns everything as normal.

<S_CODE_TOKEN>
",ahmedelgabri,2016-06-12 11:48:35
596,2016-06-15 15:44:48,"Hmm, I don't see the problem, please create a separate issue on fzf.vim project with a screenshot of the problem you're experiencing.
",junegunn,2016-06-12 11:48:35
595,2016-06-11 22:32:38,"I spent the past few hours doing a bit of yak shaving on speeding up my `zsh` startup time and discovered that one of the biggest bottlenecks was this chunk of code in `shell/completion.zsh`! 😮 

The slowdown is a result of launching the `grep` and `awk` programs to set the `fzf_default_completion` environment variable. I rewrote the code to use only zsh built-ins and got a reasonable speedup! Here are the results:

<S_CODE_TOKEN>

[Here is a gist of the script I used](https://gist.github.com/anonymous/3ecef48effacc72f205ed40a58b3112d) to profile the control (i.e. `junegunn master`) vs the experiment (i.e. this PR).

FYI: here are the 25 slowest lines evaluated via `source ~/.fzf.zsh` on `junegunn master` in descending order. Times are in milliseconds here, not microseconds.

<S_CODE_TOKEN>

This PR speeds up the slowest line by about 4x, knocking it down to just under 1ms on average on my machine.
",aykamko,2016-06-12 02:56:49
595,2016-06-12 02:56:52,"👍 
",junegunn,2016-06-12 02:56:49
594,2016-06-10 20:38:15,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [x ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Running zsh with latest fzf and fzf zsh key bindings.
On command line, typing ^T launches fzf, but pasting anything (""text"", say) into the running fzf session prepends ""0~"" and appends ""1~"" to the pasted text (""0~text1~"", now).  This obviously causes fzf to fail to find any matching files.
This does not happen when running fzf as normal, when NOT as part of a keybinding.
The old (ruby) version of fzf also worked fine when run as part of a zsh keybinding.
This seems to be independent of terminal (tried xterm and gnome-terminal) and $TERM (tried xterm, xterm-256color, and screen).
I am not running tmux.
",stephentalley,2016-06-11 03:15:37
594,2016-06-11 02:46:36,"It's called brackted paste mode.

https://cirw.in/blog/bracketed-paste

I'll see if it makes sense to ignore those chars in fzf.
",junegunn,2016-06-11 03:15:37
594,2016-06-11 03:16:31,"Fixed in b8737b7. The change will be included in the next version, which I hope to release in a few days.
",junegunn,2016-06-11 03:15:37
594,2016-06-11 03:18:05,"Perfect, thanks!
",stephentalley,2016-06-11 03:15:37
593,2016-06-10 07:05:26,,edi9999,2016-06-10 13:58:58
593,2016-06-10 13:59:04,"Thanks.
",junegunn,2016-06-10 13:58:58
592,2016-06-09 13:22:13,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

I would really like to change symbol used for cursor (`>`) via command line option. Is that possible?
",roboslone,2016-06-09 16:41:21
592,2016-06-09 16:41:21,"`fzf --prompt ""foobar ""` will do.
",junegunn,2016-06-09 16:41:21
592,2016-06-10 17:24:26,"Nope, I didn't mean prompt, I meant cursor:

<S_CODE_TOKEN>
",roboslone,2016-06-09 16:41:21
592,2016-07-08 14:14:01,"Ping...
",roboslone,2016-06-09 16:41:21
592,2016-07-08 14:33:04,"Sorry, I decided not to add more options for customizing UI elements for the moment. Because if I start accepting such requests, we'll end up with so many insignificant options that few users actually use. If you really want to change it, consider building your own binary.
",junegunn,2016-06-09 16:41:21
591,2016-06-09 09:49:03,,edi9999,2016-06-10 07:06:05
591,2016-06-09 16:50:50,"Thanks. To address the issues in the comments, I suggest the following:

<S_CODE_TOKEN>
",junegunn,2016-06-10 07:06:05
591,2016-06-10 07:05:59,"Done in https://github.com/junegunn/fzf/pull/593
",edi9999,2016-06-10 07:06:05
590,2016-06-07 15:25:18,"In `execute` action, fzf replaces `{}` to the double-quoted string of the current line. However, it seems that there are cases where we need to escape other shell expressions as well.

<S_CODE_TOKEN>

But the escaping rule depends on the current `$SHELL`

<S_CODE_TOKEN>
",junegunn,2016-06-07 15:54:43
590,2016-06-07 15:46:20,"Using single-quoted string fixes the issue:

<S_CODE_TOKEN>
",junegunn,2016-06-07 15:54:43
590,2016-06-07 16:43:56,"The problem with the change is that it breaks the following case.

<S_CODE_TOKEN>

It can be fixed by not quoting `{}`

<S_CODE_TOKEN>
",junegunn,2016-06-07 15:54:43
589,2016-06-06 09:19:09,"- [x] fzf-tmux script
- [x] Windows
- [x] fish

The whole mintty freezes when pressing Ctrl + T. The fzf pane shows up and disappear before that.
",Neo-Wang,
589,2016-06-06 17:09:03,"Hi, sorry to say this but I'm planning to stop supporting Windows environment since the latest version of fzf does not compile on Windows. What you have there is the old Ruby version which hasn't been updated for a year an a half. The maintainer of the Cygwin package of fzf (ruby) showed his interest to take over the maintenance of the Ruby version. See https://github.com/me-and/Cygwin-fzf/issues/2
",junegunn,
589,2016-06-06 18:03:58,">  latest version of fzf does not compile on Windows.

Why is that? I had hoped that the internals of fzf could be modularized so that other applications could use it for filtering. 

I vaguely recall the idea of fzf as a library being discussed, but can't find it on the issue tracker, and don't recall the conclusion.
",justinmk,
589,2016-06-07 03:42:24,"@justinmk  Because of ncurses and some other unixy stuff. #147 has been open for a while, but nobody has presented a complete solution to the problem. I'm probably not going to spend my time on Windows support (I don't even have a Windows PC) or extracting non-UI part as a library because I don't need it. He that would eat the fruit must climb the tree.
",junegunn,
589,2016-06-07 04:02:30,"I suppose I am asking only that #147 be kept open. I have not really looked closely, but my guess (please correct) is that the work to be done is mostly mechanical, not requiring any risky refactoring. 

Do any specific cases come to mind where you believe it would be difficult to provide a ""bare bones"" (i.e., no highlight, no cursor placement--only a list of sorted items) result? 

My thoughts are: 
- The key parts of fzf are the asynchronous collection and on-the-fly matching. 
- Inputs:
  1. Stream of lines 
  2. Stream of user keystrokes
- Output:
  1. Sorted list of lines

The multi-selection, key bindings, etc., seem like things that can overlayed by a host application.

If I'm missing a key detail I would appreciate any corrections. Is there some other comparable cross-platform option?
",justinmk,
589,2016-06-07 04:32:40,"By ""library"", do you mean a real library that you can link to your program, or (still) a standalone executable that provides some kind of barebone mode (or maybe a socket server?)

Stripping out visual elements will not be difficult (`terminal.go` does the UI), but the asynchronous nature of fzf may not fit well with the classic request-response model.
",junegunn,
589,2016-06-07 04:38:13,"> a standalone executable that provides some kind of barebone mode (or maybe a socket server?)

Yes, that. 

> but the asynchronous nature of fzf may not fit well with the classic request-response model.

I'm thinking more of an embedded fzf (similar to `nvim --embed`) which the parent process communicates with via stdin/stdout. 
",justinmk,
588,2016-06-04 21:51:09,"Gives possibility to specify where column with jump labels will be put.

![screenshot from 2016-06-05 00 15 28](https://cloud.githubusercontent.com/assets/4105701/15802287/cd5f89b8-2ab5-11e6-8aea-52cd48c43060.png)
`fzf --jump-render left`

![screenshot from 2016-06-05 00 13 08](https://cloud.githubusercontent.com/assets/4105701/15802272/70bdb540-2ab5-11e6-873c-33c0ab57a494.png)
`fzf --jump-render right`

![screenshot from 2016-06-05 00 10 23](https://cloud.githubusercontent.com/assets/4105701/15802278/8a522ce8-2ab5-11e6-9429-e7c83c06b7be.png)
`fzf --jump-render left,right`
",mhrebenyuk,2016-06-05 02:32:57
588,2016-06-04 22:01:45,"The next option should be `--jump-the-shark`
",justinmk,2016-06-05 02:32:57
588,2016-06-05 02:32:57,"Although I added jump action, I still don't find myself really using it so I'm not interested in pushing the idea even further at the moment. If this new option is crucial to you, I suggest that you use your fork. Thanks.
",junegunn,2016-06-05 02:32:57
588,2016-06-05 11:19:25,"That's fine. Thanks for all your great stuff and hard work you do.
",mhrebenyuk,2016-06-05 02:32:57
587,2016-06-04 08:05:10,"Something like:

<S_CODE_TOKEN>

<img width=""1280"" alt=""head"" src=""https://cloud.githubusercontent.com/assets/700826/15798496/a2599866-2a75-11e6-8ffa-ba5b8127e068.png"">

With some ANSI colors:

<S_CODE_TOKEN>

<img width=""1280"" alt=""pygmentize"" src=""https://cloud.githubusercontent.com/assets/700826/15798500/b71f0c9a-2a75-11e6-9f2f-a6572fdc69b4.png"">

TBD:
- Yes or no
- Layout: top/bottom/left/right(/hidden), size
",junegunn,2016-06-11 17:21:13
587,2016-06-04 14:28:20,"yes;
Layout - right side 70 or 80%
",deathmaz,2016-06-11 17:21:13
587,2016-06-06 17:20:57,"I have a working implementation of this with customizable layout, e.g. `left:30%`, but I haven't written any script using it yet. If anyone has a cool idea that can be realized with this, I'd like to hear about it.
",junegunn,2016-06-11 17:21:13
587,2016-06-07 09:30:19,"Suggestion:
An improved version of shell history search where the selected command is fully displayed along with context. As a first step the context can include commands that were typed before and after. Later it would be also nice to add the output of that command.
That would also provide a nice solution to multi line commands, a feature that was requested (for example in #461).

Not sure how cool, but definitely helpful for me personally.
",infokiller,2016-06-11 17:21:13
587,2016-06-07 09:31:46,"Also, the file preview you demonstrated might be useful with `fzf-vim`:
- Search for a line and show the context of that line
- Search for buffers and preview their content

Etc.
",infokiller,2016-06-11 17:21:13
587,2016-06-07 15:40:00,"@infokiller Thanks for the input. I tried to apply it to the shell history search as you suggested, but then I quickly ran into #590.
",junegunn,2016-06-11 17:21:13
587,2016-06-07 15:56:01,"Thanks @junegunn! 
fzf is already great, and this feature sounds awesome.
",infokiller,2016-06-11 17:21:13
587,2016-06-07 16:33:37,"Seems nice. Two different layouts.

<S_CODE_TOKEN>

<img width=""1280"" alt=""screen shot 2016-06-08 at 1 03 59 am"" src=""https://cloud.githubusercontent.com/assets/700826/15865240/043d5ba2-2d15-11e6-8f6c-59ee848d8e73.png"">

<S_CODE_TOKEN>

<img width=""1280"" alt=""screen shot 2016-06-08 at 1 05 36 am"" src=""https://cloud.githubusercontent.com/assets/700826/15865301/2fde2d36-2d15-11e6-81a1-49f0f8242369.png"">
",junegunn,2016-06-11 17:21:13
587,2016-06-07 16:39:16,"Cool!
Is it possible to get the selected line number in the `preview` command?
That way it would be possible to unambiguously show the context of the command (+-N lines).
",infokiller,2016-06-11 17:21:13
587,2016-06-07 16:47:05,"Hmm, not sure about that. In bash the command is just a long string and ncurses window (of fixed size) wraps the line and it finally tells me to stop putting more text on overflow.
",junegunn,2016-06-11 17:21:13
587,2016-06-07 18:39:28,"This is great :+1:. 
I have always wanted to be able to see past the screen without horizontally scrolling, which is not possible in the first place.

Update:
Please provide a shortcut to toggle it on/off right from fzf. Then I will be able to turn it off by default and turn it on, only in those cases where I want to see past what is displayed on the screen.
",khalidchawtany,2016-06-11 17:21:13
587,2016-06-08 12:56:17,"@junegunn 
I'm not really familiar with ncurses, so I'm not sure I'm following.
Given the line number of the selected line, wouldn't it be possible to grab +-N lines (for example using `head` and `tail`) and send it for display to the ncurses window?
What is the interface to the ncurses window? is it just a string that is passed?
",infokiller,2016-06-11 17:21:13
587,2016-06-08 16:17:48,"@infokiller Oh, I thought you were still talking about command history. And yes, that would be possible.

@khalidchawtany That's two more options, on by default or off by default, and the bindable action for toggling preview window. And soon we're going to hear from someone who wants the window to be hidden when the focus is moved, now we have three :) I'll think about it.
",junegunn,2016-06-11 17:21:13
587,2016-06-08 16:22:43,"@junegunn Just to clarify, my intention is to show in the preview window something similar to what you would get using grep's `-C` option.
For example, let's say I want to display 1 line of context. Furthermore, let's say I have these lines in my shell history:

<S_CODE_TOKEN>

Then, if I type 4 in the fzf prompt I want the preview window to show:

<S_CODE_TOKEN>
",infokiller,2016-06-11 17:21:13
587,2016-06-08 16:35:00,"@infokiller Yeah, sure. If it's possible with shell scripting, it can be done. Anyway what I want to stress is that I'm not going to consider dynamic resizing of the preview window at this stage.
",junegunn,2016-06-11 17:21:13
587,2016-06-08 16:39:35,"That's more than fair.
Really looking forward to an fzf release with this feature!
",infokiller,2016-06-11 17:21:13
587,2016-06-08 16:42:38,"@khalidchawtany I was able to implement toggling without too much effort, it's going in.

<S_CODE_TOKEN>

Still we need a way to specify if we want the preview window from the beginning or not (and _optionally_ if we want to automatically hide it when you move your cursor or type in characters). Something like `up:10:hidden` comes to my mind, but I'm not sure yet.
",junegunn,2016-06-11 17:21:13
587,2016-06-08 18:50:16,"@junegunn :+1:  At least the toggle binding is so much lovely to have. Even if there is no default on/off part.

I know for sure that others will request the on/off part so much, that you will not be able to resist :stuck_out_tongue_winking_eye: 
",khalidchawtany,2016-06-11 17:21:13
587,2016-06-09 17:01:37,"A simple but nice use case.

<S_CODE_TOKEN>

<img width=""640"" alt=""screen shot 2016-06-10 at 1 59 55 am"" src=""https://cloud.githubusercontent.com/assets/700826/15938688/3762d944-2eaf-11e6-8ace-18f826cf6eda.png"">
",junegunn,2016-06-11 17:21:13
587,2016-06-13 19:08:09,"@junegunn is there anyway to use a vim function for the `--preview` command?
",khalidchawtany,2016-06-11 17:21:13
587,2016-06-14 08:20:17,"@junegunn Can this functionality be used to display one-line hg log/git log on the left side, and corresponding changeset diff on the right side? If so, could you please demonstrate a simple example of that?
",balta2ar,2016-06-11 17:21:13
587,2016-06-14 12:36:29,"@khalidchawtany I can't imagine a straightforward way to do that. Let me know if you find one.

@balta2ar It's not _simple_, but:

<S_CODE_TOKEN>

`head -$LINES` part is necessary due to #598 which I'm going to fix shortly.

EDIT: Fixed in 0.13.1.
",junegunn,2016-06-11 17:21:13
587,2016-06-16 07:51:36,"@junegunn Thanks! I'm using this feature and I like it!

> Still we need a way to specify if we want the preview window from the beginning or not

Yes, that would be awesome. I miss that.

There is an issue, though. I'm using diff-so-fancy, and it probably detects terminal width upon execution to calculate the length of the horizontal bar. Unfortunately, with fzf it thinks that the horizontal space is wider than it actually is:

![](http://scrin.org/i/16/06/tmpyiblgoru0es.png)

Notice long white horizontal lines. They should not wrap the window. Like this:
![](http://scrin.org/i/16/06/tmp5ifnoxeshns.png)

Could fzf fix that?
",balta2ar,2016-06-11 17:21:13
587,2016-06-16 08:02:24,"Guys, can someone help me, i have the latest version of fzf on my laptop, but when i'm trying to use this example 

<S_CODE_TOKEN>

i'm getting this error
`unknown option: --preview`
",deathmaz,2016-06-11 17:21:13
587,2016-06-16 11:01:33,"@deathmaz I think that the version used when you use --preview is not the latest.
",khalidchawtany,2016-06-11 17:21:13
587,2016-06-16 11:11:42,"Maybe i'm doing something wrong, so here my terminal session:
https://asciinema.org/a/512wy7k30engo7w5yzzivj51z
",deathmaz,2016-06-11 17:21:13
587,2016-06-16 12:43:26,"@balta2ar 

> Yes, that would be awesome. I miss that.

We already have `:hidden` suffix. e.g. `--preview-window right:hidden`, `--preview-window up:30%:hidden`

> Unfortunately, with fzf it thinks that the horizontal space is wider than it actually is:

Overriding `$COLUMNS` seems to work: `COLUMNS=30 diff-so-fancy`
",junegunn,2016-06-11 17:21:13
587,2016-06-16 12:45:04,"@deathmaz Check `which fzf`, it's probably pointing to an older binary in another location.
",junegunn,2016-06-11 17:21:13
587,2016-06-16 12:46:23,"`which fzf` returns `/usr/bin/fzf`
",deathmaz,2016-06-11 17:21:13
587,2016-06-16 12:47:50,"@deathmaz Yeah, that's not the place `install` script downloads fzf binary.
",junegunn,2016-06-11 17:21:13
587,2016-06-16 12:48:23,"ok, what should i do to correct this?
",deathmaz,2016-06-11 17:21:13
587,2016-06-16 12:50:23,"@deathmaz 
Your issue is not related to this issue. 
Please move the discussion to another issue.
",infokiller,2016-06-11 17:21:13
587,2016-06-16 12:57:03,"> We already have :hidden suffix. e.g. --preview-window right:hidden, --preview-window up:30%:hidden

Thanks, I didn't notice that!

> Overriding $COLUMNS seems to work: COLUMNS=30 diff-so-fancy

Yes, it is indeed working. But isn't it right for fzf itself to override it as long as it's limiting available space anyway? Otherwise in preview commands I will need to write something like this:

<S_CODE_TOKEN>

Plus, fzf should know how much space there is left when I specify margin or size in %, for example.
",balta2ar,2016-06-11 17:21:13
587,2016-06-16 13:14:11,"@balta2ar Hmm, I don't want to do that. `$LINES` and `$COLUMNS` are not guaranteed to work on different shells. As far as I know, shells like fish or tcsh do not use them. And even on bash or zsh, some programs directly refer to `/dev/tty` to find the screen size instead of relying on those variables. It's an incomplete solution that can cause extra confusion. I'll just leave it up to the users.
",junegunn,2016-06-11 17:21:13
587,2016-06-16 13:34:23,"@junegunn okay, fair enough.

In that case I have another question. Is there a way to minimize wasted screen space? I know this is about aesthetics and is of course arguable, but I'd like to remove certain characters from the output. Look at the partial output near the preview window delimiter:

<S_CODE_TOKEN>

Here we have:
1. Two characters `..` for ellipses
2. One character for space
3. One character for pipe
4. One character for space

Can I get rid of `..` and spaces and leave only vertical bar? I also would like to remove horizontal lines at the top and at the bottom and a vertical line on the right.
",balta2ar,2016-06-11 17:21:13
587,2016-06-16 14:04:40,"Sorry, but no plan to add more options. Complexity control. As the name
implies the purpose of `--preview` is to present simple preview inside fzf
(in fshow example you can hit enter key to see the full content on vim).
It's not an attempt to turn fzf into a fully-customizable TUI framework.
- junegunn
",junegunn,2016-06-11 17:21:13
587,2016-06-18 16:10:32,"For those who have tried `pygmentize`, take a look at [coderay](https://github.com/rubychan/coderay), it's considerably faster.
",junegunn,2016-06-11 17:21:13
587,2016-11-14 12:59:52,"@balta2ar, the way `diff-so-fancy` dresses up the git output also breaks when you resize your shell window. I patched `diff-so-fancy`:

<S_CODE_TOKEN>
",suweller,2016-06-11 17:21:13
586,2016-06-03 00:42:10,"- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [x] fish

I'm running `tmux 2.0`, `fish 2.3.0` on ubuntu 15.04, 

fzf-tmux doesn't open the pane.

https://gfycat.com/ElasticIdolizedChupacabra

If I revert f074709, it works again.

The weird part is that tmux doesn't have any issues with `printf '\033]2;fzf\033\\';` on its own.
",davidmh,2016-06-03 03:02:59
586,2016-06-03 01:07:34,"@akashin Any idea?
",junegunn,2016-06-03 03:02:59
586,2016-06-03 02:56:32,"Same issue, running Ubuntu 16.04, tmux 2.1-3build1, fish 2.2.0-676-g6a16bdb-1~wily
",liyinsg,2016-06-03 03:02:59
586,2016-06-03 03:03:47,"@akashin I'm going to have to revert the change until the issue is resolved.
",junegunn,2016-06-03 03:02:59
586,2016-06-03 06:24:37,"Sure, I'll take some time to investigate the issue.

UPD: I'm using Ubuntu 12.04.5, tmux 2.2, zsh 4.3.17. Everything over ssh.
",akashin,2016-06-03 03:02:59
585,2016-06-02 21:54:17,"When using `-d`/`--delimiter` with `--with-nth`

<S_CODE_TOKEN>

produces

<S_CODE_TOKEN>

in the filter. I would expect to just see `foo bar`. I'm not sure if this is intentional, but I can't help think it isn't, unless there's something I'm missing..

<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
",DanielFGray,2016-06-03 04:45:39
585,2016-06-03 04:45:37,"It is intentional. It makes good sense for tab-separated data, comma-separated data, or input that is aligned by multiple spaces.

<S_CODE_TOKEN>

I once used U+2007 when I didn't want the delimiters to be shown but couldn't use space as the delimiter.
",junegunn,2016-06-03 04:45:39
584,2016-06-01 23:09:31,,jimbocoder,2016-06-02 13:00:09
584,2016-06-02 13:00:09,"Merged in b8a3ba16a256e6c83abc709828e65368163e3b9e. I also updated zsh completion. Thanks!
",junegunn,2016-06-02 13:00:09
583,2016-06-01 05:26:45,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Vim is unable to load fzf if fzf directory's path has spaces in it.

I managed to fixed it by making this change in `fzf/plugin/fzf.vim`:

`let s:fzf_go = expand('<sfile>:h:h').'/bin/fzf'`
to
`let s:fzf_go = ""expand('<sfile>:h:h')"".'/bin/fzf'`

Because I don't really know vim language so I don't make a pull request.
But it would be nice if this gets fixed.
",mrleolink,2016-06-03 03:10:19
583,2016-06-03 03:10:33,"Fixed it, thanks for the report.
",junegunn,2016-06-03 03:10:19
582,2016-05-31 19:23:09,"Hello!
I'm having the following problem while using fzf with custom tmux keybindings required to work with vim-tmux-navigator:
I use C-h/j/k/l shortcut to navigate between vim and tmux splits, but the same shortcuts are used to iterate over lists in fzf split. vim-tmux-navigator basically solves the problem of shortcuts clash between tmux and vim using _if-shell_ statement inside tmux config that detects the current command of the pane and sends appropriate commands to current pane.
The same solution would apply to fzf if only there were a way to detect that current split is running fzf. Currently it's impossible because there is no identity of fzf in the tmux pane - the active command is bash.
This commit changes the tmux pane title to ""fzf"" which allows to differentiate it in tmux if-shell command.
",akashin,2016-06-01 08:07:07
582,2016-06-01 03:54:52,"Since you use C-h/j/k/l to navigate between splits, don't you want to use different set of keys for moving cursor up and down in fzf? <kbd>CTRL-N</kbd> and <kbd>CTRL-P</kbd> are idential to <kbd>CTRL-J</kbd> and <kbd>CTRL-K</kbd> by default, so you can use them instead, and you can further customize keys using `--bind` option.

Having said that, if you still think it makes sense to change the title of the pane, please update the commit to use `;` between the commands instead of `&&` just for consistency.
",junegunn,2016-06-01 08:07:07
582,2016-06-01 07:17:27,"In this particular case I would like to avoid learning new shortcuts just because
a) Jumping out of the fzf split is not the reasonable workflow for me
b) I don't use <kbd>CTRL-N</kbd> and <kbd>CTRL-P</kbd> anywhere
c) This is an easy fix that doesn't introduce any other inconsistencies for others
",akashin,2016-06-01 08:07:07
582,2016-06-01 08:06:49,"Okay, fair enough. Not using <kbd>CTRL-N/P</kbd> part was a bit surprising to me though as they're universal; shell, vim, emacs, any apps using readline.
",junegunn,2016-06-01 08:07:07
582,2016-06-01 08:07:12,"Merged, thanks!
",junegunn,2016-06-01 08:07:07
582,2016-06-10 07:58:17,"@junegunn Thanks for merging this. @akashin Now that FZF opens a new split with the ""fzf"" pane title, do I have to update my .tmux.conf to have a flag called $is_fzf (or similar) to conditionally send the ""send-keys""/""select-pane"" command? Further, what would that look like? Sorry for my inexperience with Tmux (I am trying to learn!) 
",kieran-bamforth,2016-06-01 08:07:07
582,2016-06-10 13:59:56,"@kieran-bamforth Unfortunately this was reverted due to #586.
",junegunn,2016-06-01 08:07:07
582,2016-06-10 14:42:25,"@kieran-bamforth yes, you're right. You can find my tmux.conf here: https://github.com/akashin/dotfiles/blob/master/tmux/tmux.conf.symlink#L72

I'm still going to investigate the problem that appeared for some other shells, hopefully on this weekend.
",akashin,2016-06-01 08:07:07
582,2016-07-06 22:20:37,"@akashin `#T` is showing just `localhost` for me if I open fzf from vim and run `:run-shell 'echo ""#T""'`. Did you ever figure this out?
",adamyonk,2016-06-01 08:07:07
582,2016-07-06 22:41:13,"This seems to be working for me:

<S_CODE_TOKEN>

I needed to check pane_current_command AND pane_start_command for fzf.
",adamyonk,2016-06-01 08:07:07
582,2016-07-08 08:37:20,"I didn't know that there is ""pane_start_command"" available. Unfortunately for me without the PR it shows ""env TERM=screen-256color"" when I invoke fzf.
With the PR I get ""printf '\033]2;fzf\033\';' env..."" in pane_start_command.

With this PR #T shows fzf as expected when I invoke fzf-tmux.
I print #T in tmux status pane with 

<S_CODE_TOKEN>
",akashin,2016-06-01 08:07:07
582,2016-07-08 08:41:01,"Actually I was seeing only part of #{pane_start_command}.
After adding

<S_CODE_TOKEN>

I indeed got

<S_CODE_TOKEN>

which contains fzf as a substring. So this is a possible workaround without my PR.
",akashin,2016-06-01 08:07:07
582,2017-02-28 23:40:27,pane_start_command and pane_current_command no longer contain anything relating to fzf. Is there another workaround?,mark-westerhof,2016-06-01 08:07:07
581,2016-05-28 08:45:18,"There is currently a [bug in Neovim](https://github.com/neovim/neovim/issues/4487) where opening a terminal buffer
by exec'ing a command that has a pipe in it causes the buffer to be
blank until `<ESC>` is pressed. While not strictly an issue with fzf, it
affects users like me who use a custom `FZF_DEFAULT_COMMAND`.

This change makes fzf prefer tmux over Neovim for launching a fzf split.
It's reasonable to assume that if a Neovim user under tmux either
- Doesn't care about the type of split, or
- Prefers tmux panes to nvim embedded terminals, as panes the main
  purpose of tmux.

Thus, this change works around the Neovim issue in a non-temporary,
non-hacky way; looks like a win-win.
",jez,2016-05-30 22:50:01
581,2016-05-28 16:16:40,"I also have `FZF_DEFAULT_COMMAND` but I don't have any issues on nvim 0.1.5. Can you check if you can still reproduce the problem with [this minimal Vim config](https://gist.githubusercontent.com/junegunn/6936bf79fedd3a079aeb1dd2f3c81ef5/raw/vimrc)?

And also, last time I checked, using tmux pane for fzf in neovim had issues with upper pane not displaying correctly.
",junegunn,2016-05-30 22:50:01
581,2016-05-28 17:03:16,"I must have misunderstood https://github.com/neovim/neovim/issues/4487. If it is still an issue as described, would like to know.
",justinmk,2016-05-30 22:50:01
581,2016-05-29 06:26:46,"Hm. Well, I didn't realize that you had to explicitly pass `--HEAD` to brew to get the head version of Neovim (it used to be implicit). I upgraded from 0.1.4 to 0.1.5-dev with my personal config and it behaves no differently.

I then tried it with the minimal vimrc (for posterity's sake, I had forgotten at first that for Neovim it's ~/.config/nvim/init.vim, not ~/.vimrc).

On neovim #4487, they linked to Shougo/unite.vim#1121, where one of the suggestions was to disable vim-airline. Doing so fixed the issue.

Any ideas why this would be the case? I'm going to poke around a bit, but I can't see how vim-airline comes into play here o.o
",jez,2016-05-30 22:50:01
581,2016-05-29 07:03:29,"So this is the same case as https://github.com/junegunn/fzf.vim/issues/84 / https://github.com/junegunn/fzf/issues/556#issuecomment-214444885 .

~~Correct me if I'm wrong, but pipes don't seem to be a factor.~~ 

updated https://github.com/neovim/neovim/issues/4487 with observations.
",justinmk,2016-05-30 22:50:01
581,2016-05-30 22:50:01,"Since it seems like this isn't the preferred solution, and because the conversation has been moved to the Neovim tracker, I'm going to close this.

For people finding this from web search results, see the Neovim issue linked above for workarounds.
",jez,2016-05-30 22:50:01
581,2016-05-31 02:10:39,"There can be a few reasons one might want to use tmux instead of neovim terminal (not messing up vim splits (#520) is one) and we can consider providing an option to prefer tmux, but making it the default feels a bit radical. Neovim terminal allows us to use fzf in GUI nvim without an external terminal emulator window (once GUI nvim is stable, I haven't tried it) and one might prefer its ""more integrated"" look-and-feel.
",junegunn,2016-05-30 22:50:01
581,2016-05-31 02:13:43,"Yep, I agree. Though, if they were using a GUI nvim, they probably wouldn't
be using tmux. One point you brought up earlier is that tmux scrolls the
page up, but a :term split doesn't.

On Mon, May 30, 2016 at 7:10 PM Junegunn Choi notifications@github.com
wrote:

> There can be a few reasons one might want to use tmux instead of neovim
> terminal (not messing up vim splits (#520
> https://github.com/junegunn/fzf/issues/520) is one) and we can consider
> providing an option to prefer tmux, but making it the default feels a bit
> radical. Neovim terminal allows us to use fzf in GUI nvim without an
> external terminal emulator window (once GUI nvim is stable, I haven't tried
> it) and one might prefer its ""more integrated"" look-and-feel.
> 
> —
> You are receiving this because you modified the open/close state.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/junegunn/fzf/pull/581#issuecomment-222577649, or mute
> the thread
> https://github.com/notifications/unsubscribe/AFSaVABqZqzMxvFtvadKL-IGaKgr-KDlks5qG5ikgaJpZM4IpB6S
> .
",jez,2016-05-30 22:50:01
581,2016-06-08 07:34:30,"> we can consider providing an option to prefer tmux,

I would use such an option :-)
",edi9999,2016-05-30 22:50:01
581,2016-06-08 08:08:35,"> > we can consider providing an option to prefer tmux,
> 
> I would use such an option :-)

I'd encourage you to implement it! You can look at this PR to basically see which code you'd need to touch :P Shouldn't be more than a handful of lines.
",jez,2016-05-30 22:50:01
581,2016-06-09 09:49:24,"Done : https://github.com/junegunn/fzf/pull/591
",edi9999,2016-05-30 22:50:01
580,2016-05-28 07:05:52,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

There is a delay when accessing history with `C-r`, if `set blink-matching-paren on` is in .inputrc.
The reason seems to be the parentheses in the bound command: `bind '""\C-r"": "" \C-e\C-u$(__fzf_history__)\e\C-e\e^\er""'`.

I have tried to resolve it using `bind -x` (to execute the command silently so there are no parentheses to match), but the errors I get then is beyond my readline and bash level.
",ptzz,2016-05-28 17:12:03
580,2016-05-28 16:24:01,"Thanks for the report. Hmm, an easy fix would be to change the command substitutions to use backticks instead of `$(...)`. What do you think? Interestingly the change is not needed for `vi`-mode where `blink-matching-paren` doesn't seem to work.

<S_CODE_TOKEN>
",junegunn,2016-05-28 17:12:03
580,2016-05-28 16:34:43,"Didn't think about that, brilliant fix!  👍
",ptzz,2016-05-28 17:12:03
580,2016-05-28 17:12:34,"Pushed the fix. We'll see if there's any side effects.
",junegunn,2016-05-28 17:12:03
579,2016-05-24 18:13:02,"- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

Repro steps:
1. open up a zsh shell
2. type: (echo hello; echo world;)
3. hit ctrl-R to bring up fzf and select the most recent entry

outcome:

fzf-history-widget:2: bad pattern: (echo

This issue happens whenever there are parenthesis in the command line.
",acornejo,2016-05-25 15:52:52
579,2016-05-24 19:49:04,"I tried to reproduce the issue but everything works just fine, without ""bad pattern"" thing
",deathmaz,2016-05-25 15:52:52
579,2016-05-24 20:31:49,"@deathmaz could you provide the output of the following command: `echo $ZSH_VERSION`

in my case it is 5.0.5. Also I've reproduced this issue both inside and outside tmux.
",acornejo,2016-05-25 15:52:52
579,2016-05-24 20:34:16,"Also in case it matters (I don't think it does), here are the relevant FZF settings in my environment:

<S_CODE_TOKEN>
",acornejo,2016-05-25 15:52:52
579,2016-05-24 20:40:34,"@deathmaz 

I am actually now very curious about what zsh version you are using, I just managed to get a very succint reproduction step:

<S_CODE_TOKEN>

This is essentially the snippet executed by the fzf-history-widget, with the exception that I am not display your history but instead simulating a history with a single item, the `(echo hello;)` command.
",acornejo,2016-05-25 15:52:52
579,2016-05-24 20:43:53,"found the problem, its the glob_subst option.

@deathmaz 

Do this first `setopt glob_subst`

Now use the fzf history widget with a command with parenthesis and you should see the same problem.
",acornejo,2016-05-25 15:52:52
579,2016-05-25 07:12:05,"@acornejo my zsh version is 5.2 and yes, after `setopt glob_subst` i can reproduce the issue
",deathmaz,2016-05-25 15:52:52
579,2016-05-25 15:53:08,"Thanks for the report. Fixed it!
",junegunn,2016-05-25 15:52:52
578,2016-05-23 17:23:19,"On my old Macbook Pro, searching for a simple name directly in the current directory is unusably slow if the current directory has a lot of descendents.

Example: I open fzf in my home dir and type `dot`. There is a folder in my home dir called `dotfiles`. Because fzf (seemingly) searches in alphabetical order, and searches through the whole directory tree of each directory before continuing with the next entry, it has to search 70000 files before it finally finds my `dotfiles` dir. It can take minutes.
This seems to be mostly because it's searching all the `node_modules` in all the projects in my `code` dir, and through every descendent of my `AndroidStudioProjects` dir, both of which alphabetically come before `dotfiles`.

I propose an optimization for a common use case: Add the direct descendents of the current directory to the list _before_ iterating through every directory tree. This would make it almost instant.
(I would argue this should be the strategy throughout the tree actually. ""Closer"" descendents should always be added before ""further"" ones.)

I am using the fish shell but I've tried it from bash too; no difference. As would be expected because it's not a shell integration issue.
",caesar,2016-05-23 18:13:34
578,2016-05-23 17:34:54,"fzf does not implement directory traversal, it simply spawns `find` process with certain options for that when stdin is not fed.

Have you tried [this](https://github.com/junegunn/fzf#respecting-gitignore-hgignore-and-svnignore)? ag respects `.gitignore` and `node_modules` will not be listed as the directory is usually specified in `.gitignore`.
",junegunn,2016-05-23 18:13:34
578,2016-05-23 18:04:21,"@junegunn, interesting. I have set it to use `ag` and it does indeed seem to run faster, however, now Ctrl-T doesn't include directories anymore.
Is there a solution? So far as I can see `ag` can't search for directory names, so I'm guessing not.
",caesar,2016-05-23 18:13:34
578,2016-05-23 18:13:34,"I wrote a simple script that can be used to extend the output of ag.

https://github.com/junegunn/dotfiles/commit/6661555889bb9c02c0bd7fc24a3473e6688ef5cf
",junegunn,2016-05-23 18:13:34
578,2016-05-23 18:45:44,"@junegunn, that's great! Only problem I see is that it doesn't include empty dirs. That would require a different approach. But it's really helpful nonetheless, thanks.

A few thoughts:
- would it make sense to include that in `fzf` by default, or as an option?
- maybe it would be good to have two shortcuts, one for directories (use whatever mechanism Alt+C uses) and one for files?
- maybe `fzf` could automatically use `ag` if it is available?

Sorry for the false bug report. :-)

Off topic, but since I'm talking to you.... is there any reason the autocompletion (`**`) doesn't work in Fish? Is it just that nobody's written the code, or is there a reason it wouldn't work?
(I'm new to Fish, and honestly I'm seeing so many incompatibility issues I'm considering moving to ZSH, but I'm going to stick with it a few weeks and see how I feel then. Change is always hard and Fish has a lot of nice features...)
",caesar,2016-05-23 18:13:34
578,2016-05-24 01:35:03,"> it doesn't include empty dirs

True, good point.

About your questions: No, I see fzf as a simple unix filter, just like grep, a tool you can build stuff with it, and I don't want to extend the scope of this repository any further. The more this repository tries to provide, the more time I'll be wasting dealing with someone else's issues. Some user may not have Ruby, some user may prefer pt over ag, some user may want to have caching mechanism, and the list goes on. I'll just leave such decisions up to the users. Providing more key bindings other than the ones that we have now is also not what I'm planning to do. Dealing with the endless issues of three different shells has been a big pain point for me as the maintainer of the project, especially considering that what I only use is bash. Users are encouraged to implement their own key bindings.

> is there any reason the autocompletion (**) doesn't work in Fish? Is it just that nobody's written the code, or is there a reason it wouldn't work?

The former.
",junegunn,2016-05-23 18:13:34
577,2016-05-23 10:49:23,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<img width=""1436"" alt=""Long commands aren't horizontally scrollable"" src=""https://cloud.githubusercontent.com/assets/15904246/15468445/323b4e0a-20dc-11e6-9991-74becdc6d1b9.png"">

I can't seem to be able to scroll horizontally along any results that are longer that my terminal screen. The example image above shows many different `curl` requests that _look_ the same, but in fact point to different URLs so it's impossible to know which one I want.
",BBCMarkMcDonnell,2016-05-23 16:59:18
577,2016-05-23 15:48:07,"If you start matching on the right, (in your example, by typing ""component""), you can view more (but there is no way to bind a key to scroll to the right for you)
",edi9999,2016-05-23 16:59:18
577,2016-05-23 16:59:18,"@edi9999 Thanks for chiming in.

> If you start matching on the right, (in your example, by typing ""component""), you can view more

Yes that's what I would do. A large `--hscroll-off` value in `$FZF_CTRL_R_OPTS` can definitely help (the default is 10).

But anyway I don't have a great answer to this. Adding support for manual horizontal scrolling is the last thing I want to do as getting it right and implementing a clean, straightforward interface is not going to be trivial (manual scroll vs. auto scroll, short item vs. long item)

When the above trick doesn't work you, you might want to fall back to the original ""reverse-search-history"" that can display the command in multiple lines by binding it to a different key sequence (e.g. `bind '""\C-x\C-r"": reverse-search-history'`), or simply use <kbd>CTRL-P</kbd> or <kbd>CTRL-N</kbd> to browse the recent entries on bash.

Closing as ""wontfix"" (at least for the moment). Thanks.
",junegunn,2016-05-23 16:59:18
577,2016-05-24 11:00:42,"No problem. Thanks for the feedback everyone :-)
",Integralist,2016-05-23 16:59:18
577,2016-06-14 17:22:14,"With the latest fzf, we have these options:

<S_CODE_TOKEN>
",junegunn,2016-05-23 16:59:18
576,2016-05-22 11:38:31,"- Category
  - [x] Neovim
- OS
  - [x] Mac OS X
- Shell
  - [x] zsh

I'd like to add this `tnoremap <esc>      <c-\><c-n>` to my `.vimrc` but the problem is that it breaks the <kbd>ESC</kbd> with fzf. So is there is any way I can check if the terminal buffer is related to fzf or not and then decide to apply this key binding to it or not?
",ahmedelgabri,2016-05-22 14:25:05
576,2016-05-22 14:25:05,"<S_CODE_TOKEN>

FYI, you can use <kbd>CTRL-C</kbd> instead of <kbd>ESC</kbd> to close fzf.
",junegunn,2016-05-22 14:25:05
576,2016-05-22 14:28:48,"@junegunn Thanks!

I know about <kbd>CTRL+C</kbd> but it's just that my brain is programmed to use <kbd>ESC</kbd> for exit while <kbd>CTRL+C</kbd> is for killing processes :)
",ahmedelgabri,2016-05-22 14:25:05
576,2016-11-17 07:48:06,"For the record, I just came with this solution:

<S_CODE_TOKEN>

Note that `tunmap` does not work. I also have to use the double wildcard in `*fzf*`.

In any case, junegunn's solution is better tmo.
",xeyownt,2016-05-22 14:25:05
575,2016-05-19 18:11:28,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

So not sure if it's possible to do this already, but it's something I'd like to be able to do with fzf.

For instance I'd like to use fzf to add files with `git add`. I know I can do `git add $(fzf)` but that's going to get all files. I'd like to be able to take the output of `git status --porcelain` and map that to information that actually gets selected.

So I'd like to be able to pass data such as this to fzf:

<S_CODE_TOKEN>

Where fzf would display the content to the left of the `:`, but return the content to the right of the `:`.

That way I can write a function to simply create the above data structure, pass it to fzf and get the expected result.

I may be overthinking this, or not articulating myself well.. But let me know if you have any suggestions on how to accomplish this, or if you think it'd be a good addition to fzf.
",marcaddeo,2016-05-20 01:14:23
575,2016-05-20 01:14:23,"You can post-process the output like you normally do in shell scripts; `sed`, `awk`, `cut`, `perl`, or whatever.

<S_CODE_TOKEN>

So I don't think what you asked is necessary in this case, but there's `--with-nth` option you can use for that purpose.

Anyway, I find it much more useful to have key bindings for selecting git objects. 

http://stackoverflow.com/questions/36513310/how-to-get-a-gits-branch-with-fuzzy-finder/37007733#37007733

The examples are for bash, but I believe you can easily tweak them for zsh.
",junegunn,2016-05-20 01:14:23
574,2016-05-16 07:19:10,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [x] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

When `fzf` run with no parameters, it displays all files.
It would be useful to add an option to narrow down this input just to **folders**, so something like [z](https://github.com/rupa/z) could be easily implemented on top (without building a database).
",vors,2016-05-16 15:27:36
574,2016-05-16 15:27:36,"fzf is a filter, so you can feed anything into it or you can customize the default command via `$FZF_DEFAULT_COMMAND`. Please refer to
- https://github.com/junegunn/fzf#usage
- https://github.com/junegunn/fzf#respecting-gitignore-hgignore-and-svnignore
",junegunn,2016-05-16 15:27:36
573,2016-05-12 12:45:50,"- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

I have followed along with the tutorial to use `ag` instead of `find` for completions. However, I am getting an error when directly copy-pasting the `_fzf_compgen_path()` function from the docs.

> ERR: Error fstat()ing stdin

Now, I know this error is from `ag` but I'm not quite sure why it is getting there. If I were to run the command directly: `ag -g """" ./src` (for example) I get a list of files. I've tried going through the completion.zsh file to understand what's going on but I'm lost. Isn't this (_fzf_compgen_path) the command that is called directly with the user input? Does anybody know why I would be seeing this error. 
",adam-beck,2016-05-12 15:58:55
573,2016-05-12 14:00:19,"<S_CODE_TOKEN>

So you mean this doesn't work? It works for me.
",junegunn,2016-05-12 15:58:55
573,2016-05-12 14:04:02,"Yea that exact line doesn't seem to work. I'm wondering if I have a plugin or something that is interfering. Not sure how to debug that, though. 
",adam-beck,2016-05-12 15:58:55
573,2016-05-12 14:06:09,"Since I'm inexperienced, here are the last few lines of my `~/.zshrc`:

<S_CODE_TOKEN>

Am I missing something else?
",adam-beck,2016-05-12 15:58:55
573,2016-05-12 14:23:09,"Interestingly, I'm also getting this using the `Ctrl-t`.
",adam-beck,2016-05-12 15:58:55
573,2016-05-12 15:30:35,"Hmm, is it still reproducible even when you trim down your .zshrc to contain only those lines?
",junegunn,2016-05-12 15:58:55
573,2016-05-12 15:42:06,"Commented out everything but those lines and I'm getting the exact same error. Current versions:
- Ubuntu 14.04
- zsh 5.0.2 (x86_64-pc-linux-gnu)
- tmux 2.2
",adam-beck,2016-05-12 15:58:55
573,2016-05-12 15:48:43,"Strange. I can't reproduce. I have zsh 5.2 on OS X.
`ag --version`? If you're running an old version, please upgrade ag and see if the problem persists.
",junegunn,2016-05-12 15:58:55
573,2016-05-12 15:58:55,"I apologize. I just installed `ag` yesterday via apt. I didn't realize I was so many versions behind. I was on `0.19` but after installing from source I'm at `0.31.0` and things seem to be working now. Thank you for your time and for such an awesome tool!
",adam-beck,2016-05-12 15:58:55
572,2016-05-11 13:01:02,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I'm running `fzf-tmux` by tmux itself (as part of tmux plugin). I worked nicely for me, until  [this change](https://github.com/junegunn/fzf/commit/c727ba1d992acfb175adb273a89729d3df2fd9b0#commitcomment-17433314). 
Commands run by tmux with `run-shell` have env `TMUX` defined but not `TMUX_PANE`. After change `$TMUX` -> `$TMUX_PANE` the script naturally to run `fzf` not inside tmux pane and of course fails. 

Can this be fixed?
",sergei-dyshel,2016-05-11 13:09:22
572,2016-05-11 13:06:32,"Okay.
",junegunn,2016-05-11 13:09:22
572,2016-05-11 13:09:21,"Fixed in 66f86e18700f08daa20404d212021da412800d53. Wrong issue reference :(
",junegunn,2016-05-11 13:09:22
571,2016-05-10 20:24:35,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Is there a current way to directly accept the current input as-is?  This would let `fzf` be used in situations where the user wishes to enter something not necessarily in the choice list.

The example I used when I implemented this in [pick](https://github.com/thoughtbot/pick/pull/61) was the following:

<S_CODE_TOKEN>

Thus in addition to checking out an already-cloned branch, users could also checkout a specific commit.  In my case I have a [git cd alias](https://github.com/rosshadden/dotfiles/blob/3d737d5082c4273c00aa1aa32688fc1cffdfcbba/src/.gitconfig#L90), which will check out the branch if it exists or create/checkout if it does not.  Thus I can (using `pick` until I figure out how to do it with `fzf`) create new branches from the input as well.
",rosshadden,2016-05-12 15:51:30
571,2016-05-11 04:13:12,"`git branch | cut -c 3- | fzf --print-query | tail -1` can be used in that context though not completely equivalent. There is currently no bindable action that only prints the query. 
",junegunn,2016-05-12 15:51:30
571,2016-05-11 09:10:53,"> There is currently no bindable action that only prints the query.

I think it would make sense to have one :-)
",edi9999,2016-05-12 15:51:30
571,2016-05-12 04:31:56,"Yeah, I'm also going to make `alt-enter` and `alt-space` valid key names.
",junegunn,2016-05-12 15:51:30
571,2016-05-12 04:40:00,"Cool! `alt-enter` is what I made perform this behavior in `pick`, so anyone else coming to `fzf` from that like I did will be used to it.
",rosshadden,2016-05-12 15:51:30
570,2016-05-09 20:31:36,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I use [termite](https://github.com/thestinger/termite) as my terminal, and my `$TERM` environment variable is set to `xterm-termite`.  Termite definitely supports 256 colors, and true color as well.  I don't think `fzf` should look for the presence of `256` in `$TERM`.

I don't know what the best solution is, but based on [the terminfo file](https://github.com/thestinger/termite/blob/master/termite.terminfo#L12) I see the line `colors#256`... Maybe we can look in the terminfo files?

As a fallback, or even the final solution, I think we should add a `--256` option to complement the `--no-256` one, which would force 256 colors.  This would of course be the least amount of work and should probably happen regardless of if we come up with a more robust solution.

Thoughts?
",rosshadden,2016-05-10 16:07:20
570,2016-05-10 03:20:30,"I don't like relying on the value of `$TERM` but I'm not aware of a better method. Digging up a terminfo file seems like a bit of a hassle. And can we be sure that the location of the file is consistent across different OSes and distros? 

Regarding your suggestion of `--256`, does `fzf --color=dark` work?
",junegunn,2016-05-10 16:07:20
570,2016-05-10 03:31:33,"Oh, we can use `tput colors`!  You're already using `tput` so this isn't even introducing another dependency.

In my terminal it returns `256`.  On terminals that don't support 256 colors it will return `8`, and I dunno what it would return if only one color is supported but I would imagine `1`.
",rosshadden,2016-05-10 16:07:20
570,2016-05-10 03:40:44,"Spawning an external commands invariably adds some overhead to the startup time, it's not going to be huge of course, but I'd really like to avoid that. I wonder how other programs detect 256-color capability, e.g. `t_Co` of vim
",junegunn,2016-05-10 16:07:20
570,2016-05-10 03:51:02,"Okay, I found that we can find the info with `tigetnum(""colors"")`. It has to be called after ncurses initialization, so the option parser should defer its processing until then.
",junegunn,2016-05-10 16:07:20
570,2016-05-10 14:45:59,"I have seen `tput colors` used by a lot of terminal apps, like [ranger](https://github.com/hut/ranger/blob/master/ranger/data/scope.sh#L94), but if you think `tigetnum` is best, I trust your judgement.  You clearly know a lot more about TUI performance optimization than I do :smile: 
",rosshadden,2016-05-10 16:07:20
570,2016-05-10 15:47:24,"For SSH and TMUX, at least, `$TERM` is a stronger hint than the state of terminfo on the remote server.

This road ends up very similar to the history of user-agent sniffing in web browsers. FZF is not the only application you'll be fighting if you refuse to put ""256"" in your `$TERM`.
",justinmk,2016-05-10 16:07:20
570,2016-05-10 16:14:07,"@rosshadden Updated the code to use tigetnum call. Will be included in the next release. Or you can easily build the latest binary with `go get github.com/junegunn/fzf/src/fzf` if you have Go.

@justinmk Thanks for chiming in. This is a new territory for me. The return value of `tigetnum(""colors"")` of ncurses seems to depend on the value of `$TERM` (e.g. `TERM=screen fzf` / `TERM=screen-256color fzf`), so I guess it's okay?
",junegunn,2016-05-10 16:07:20
570,2016-05-10 19:12:06,"@junegunn Your change works perfectly.  Thank you!

@justinmk Your argument works even better against what you said.  Looking in `$TERM` for the presence of `256` is exactly the same in many ways as user-agent sniffing.  Looking at `tput colors` and `tigetnum('colors')` (which return numbers like 1, 8, 256, or greater) are more along the lines of feature testing, which is less hacky and more future-proof.  I think we may be saying the same thing, here, but ultimately being smart about the checks we make is a good practice, and I think you can probably agree that @junegunn's solution is indeed smart.

Also `fzf` is awesome!
",rosshadden,2016-05-10 16:07:20
570,2016-05-10 19:39:02,"@rosshadden I am not advocating for or against any specific approach. Invariably a basket of heuristics is required if you really want to support most terminals, because users and distros misconfigure their terminals _and terminfo dbs_ in numerous fun ways. There's no such thing as a reliable ""feature test"" for all terminals in use.

It's possible that ncurses `tigetnum()` is already doing the heuristics, which would be great.
",justinmk,2016-05-10 16:07:20
569,2016-05-08 18:08:53,"Fixes #124.

PR provides an alternative to navigation of candidates.

Instead of pressing consecutively a key for `up` and `down` action to iterate candidates, you can now pick any candidate by hit `quickmatch` (new action in --bind) toggle key and a label appeared on screen next to the candidate of choice.
In other words it's O(1) for any candidate on screen:

![gifrecord_2016-05-08_191443](https://cloud.githubusercontent.com/assets/4105701/15099482/dc155b48-155e-11e6-8538-f088de72d8be.gif)
![gifrecord_2016-05-08_193943](https://cloud.githubusercontent.com/assets/4105701/15099481/dc1415a8-155e-11e6-810c-c31255b25d1c.gif)

How to enable
- bind an easy-reached key to `quickmatch` action 
- provide set of labels you want to pick up from. optional

`export FZF_DEFAULT_OPTS=""--bind \':quickmatch --quickmatch-labels=bgtasdfqwerzxcvhjklmnyuop12345,.""`
",mhrebenyuk,2016-05-17 17:10:33
569,2016-05-09 17:31:34,"This pretty much defeats the purpose of a fuzzy-finder.
",justinmk,2016-05-17 17:10:33
569,2016-05-09 19:23:29,"Not really. This rather defeats navigating of narrowed list of candidates. 
If your eyes already spotted the right candidate on the screen 
you don't need to waste further your time with:
- narrowing down it more
- or picking it by `up`, `up`, `up`, `Enter`

Just press two keys to select it instead. (`quickmatch` trigger + a letter) 
No `Enter`, no `ctrl-p`/`ctrl-n` workflow anymore.

Maybe it's just me, but it's much convenient to use home row keys for picking up.
Finally, it doesn't replace anything but provides additional way of selecting a candidate.
",mhrebenyuk,2016-05-17 17:10:33
569,2016-05-10 03:34:49,"I'm assuming this PR is a proof of concept prototype to open up a discussion as it lacks new test cases and documentation. I also noticed a couple of bugs in your implementation and there are some points I'd do slightly differently both implementation-wise and interface-wise, don't quite like the name ""quickmatch"" in the first place.

I rejected the idea the last time since I felt it was not really needed. It's probably a matter of personal preference so I'm not trying to make a point. I'm just providing another perspective.

Most of the time, I don't move my cursor upwards at all. I don't even try to browse the screen to find the item of my interest. My focus is pinned on the first few lines, and I type in the query until the one ends up in there. I prefer this way since there isn't any mental context switches in the process. Type in the query until one match is left, enter, it's simple. The process usually does not take more than a couple seconds for me. Now compare that to
- Look through the whole screen to find the right one that I'm trying to pick
- Decide whether if I'm going to use `ctrl-p` (`ctrl-k`) or to use this new feature
- Press the key to enable the new feature
- Check the label for the line that I should press
  - Make sure to press the right key, as there's no turning back when you mess up

(Also this can't be used when you want to multi-select (`--multi`) items.)

So basically I'm not convinced that fzf needs this. But like I said it's a matter of personal preference and I can see some would find it useful and of course I have zero evidence to prove objective superiority or inferiority of one method over the other. And you have made a good point that the new feature is only complementary and does not require a huge change to the code base.

We're in no rush. I'll sleep over it for a few days and give you feedbacks.
",junegunn,2016-05-17 17:10:33
569,2016-05-10 04:50:33,"> Press the key to enable the new feature

An alternative to consider: instead of a ""label selection mode"", _always_ show the labels, and treat label-selection as a ""special query"" (like the `'` modifier), so that labels can be used to narrow results. Say that `,` is the ""label pseudo-query"" prefix, then given a result list:

<S_CODE_TOKEN>

Appending `,c` to the query narrows the results to a single item:

<S_CODE_TOKEN>

That avoids the ""no turning back"" problem, and achieves some UI consistency (query-driven, no new ""modes"").
",justinmk,2016-05-17 17:10:33
569,2016-05-10 22:27:52,"> I'm assuming this PR is a proof of concept prototype to open up a discussion as it lacks new test cases and documentation.

Correct. I'll add/correct what are left if PR will be accepted otherwise it's suits my needs.

> Most of the time, I don't move my cursor upwards at all. I don't even try to browse the screen to find the item of my interest. My focus is pinned on the first few lines, and I type in the query until the one ends up in there. I prefer this way since there isn't any mental context switches in the process. Type in the query until one match is left, enter, it's simple. 

And what if one did not end up? Or ended up wrong one? 
Then you should `backspace` couple of times to correct your query.

 Sometimes, I found myself in situation when I don't know exactly what I looking for. So I can't just type till it yields the only one candidate. Instead I type a little waiting for result to come up then type again then `enter` or `ctrl-p`, `ctrl-p` depending on where I ended up.

Imagine, you want to peek into css file in a web project. What you vaguely remember is that it's something related to main styles. So you type `main css$` and wait a bit to results show up then you can found that `main.css` is scattered across `exploded/`, `src/`, `core/`,  `html/` etc. Starting from this point you can either narrow down it further by struggling to exclude some uninterested paths or nail it with `quickmatch` to pick what you see.

Also it would be useful with any sort of a short list. When you know your choice will be already present on screen in recent entries even without narrowing. Bcommits, oldfiles, mru, recent shell commands, tmux windows/session, vim buffers come to mind. There it competes with `ctrl-p`. 

Remember in all possible cases what you're needed is just to type two easy-reached keys usually from home row. Two keys to rule them all. That's it.
",mhrebenyuk,2016-05-17 17:10:33
569,2016-05-10 22:43:34,"""No turning back"" is not the problem if you're touch typing. That I believe most of vim/cli users are.
If you aren't than `quickmatch` makes no sense.

The key point is the feature let you select what you want in speedy and convenient way when you really need it.
",mhrebenyuk,2016-05-17 17:10:33
569,2016-05-11 04:09:11,"> And what if one did not end up? Or ended up wrong one? 
> Then you should backspace couple of times to correct your query.

Naturally, yes. I don't see how the new feature is different in that regard except for very small input that fits in one screen. Anyway the point is that the whole process is strictly ""query-driven"" as @justinmk pointed out.

> ""No turning back"" is not the problem if you're touch typing.

Touch typing does not completely prevent typos. But that was not my point anyway, we can be looking at the two far ends of the screen.

<img width=""1440"" alt=""hadoop"" src=""https://cloud.githubusercontent.com/assets/700826/15169037/01121278-1772-11e6-8142-e4e26e5002f0.png"">

I guess you see my point. It's easy to get confused while moving one's focus from the far right to the far left.

And as I mentioned earlier, the method cannot be used when we want to select multiple items with tab and shift-tab since it exits immediately. One thing we can consider is to make it only jump to the target. So that 1. we can check if the cursor is positioned on the right item, 2. and we're given a choice to either press tab or enter. The obvious downside is that it requires an extra keystroke.
",junegunn,2016-05-17 17:10:33
569,2016-05-11 22:41:11,"> I guess you see my point. It's easy to get confused while moving one's focus from the far right to the far left.

Of course it's not a holy grail but a triggered feature you can summon when you need it.

> One thing we can consider is to make it only jump to the target. So that 1. we can check if the cursor is positioned on the right item, 2. and we're given a choice to either press tab or enter. The obvious downside is that it requires an extra keystroke.

It feels like a bit of overingeneering. I'd rather go with simplicity and unobtrusiveness of take&exit (trigger + home row key) over bloating it with support of mulitselect (separation of concerns). Anyway multiselect is not what it made for. Finally we can consider one in future iterations if it will be requested. 
",mhrebenyuk,2016-05-17 17:10:33
569,2016-05-11 22:56:09,"I forgot to mention that in current implementation it actually toggle. (Maybe it's not obvious looking at provided screencasts and description)

if you triggered it and then change your mind you can un-toggle it and continue playing around with your query.
",mhrebenyuk,2016-05-17 17:10:33
569,2016-05-11 22:59:38,"The UX described in https://github.com/junegunn/fzf/pull/569#issuecomment-218058526 could support multiselect by allowing multiple labels to be specified after the pseudo-query modifier. 

E.g. given the pseudo-query `,ac` instead of narrowing, it would highlight the corresponding items:

<S_CODE_TOKEN>
",justinmk,2016-05-17 17:10:33
569,2016-05-12 17:59:45,"@mhrebenyuk Well, speaking of ""separation of concern"", I would argue that the alternative approach suggested above provides exactly that by just being another way of moving your cursor instead of being a new mode of operation that is a combination of two actions (move + accept). It blends well with the rest of the interface.
- `CTRL-P` / `CTRL-K` / Mouse wheel-up
  - Move cursor up
- `CTRL-N` / `CTRL-J` / Mouse wheel-down
  - Move cursor down
- `PgUp`
  - Move cursor up by a page
- `PgDn`
  - Move cursor down by a page
- `<trigger key><label>` / Mouse-click
  - Move cursor to the designated position

It acts like `<line no>G` movement of Vim. It allows you to move around the screen and do whatever you want to do. It doesn't suffer the aforementioned ""no turning back"" problem. In my opininon, combining it with `accept` action should be considered as the next step that builds upon this new ""movement"". And I'm not against the direction per se.

> Anyway multiselect is not what it made for.

We're discussing pros and cons of different approaches and trying to come up with a better, more flexible solution. I shared my concerns about your proposal and you agreed that it has limitations. I hope you don't dismiss suggestions to tackle those very problems saying that they are overengineered, overbloated or not on the point because they don't meet your specific requirement or you don't care about the problems. fzf is a hugely popular tool that is used by many users with different preferences. We don't add new features without careful consideration beforehand. Like I said, we're in no rush. We're still in the process of brainstorming. You can always use your fork until we reach the conclusion (or after that).

@justinmk Interesting idea. It's a bit unclear though what should happen when you press enter after `,ac`, or tab when multi-select is not enabled. Another concern is that as it's a part of the query and we can type in more characters, the mappings between the labels and the items will change (`foo ,ac` -> `foo ,ac bar`) and then `a` and `c` may no longer point the items we want.
",junegunn,2016-05-17 17:10:33
569,2016-05-12 23:14:49,"> instead of a ""label selection mode"", always show the labels, and treat label-selection as a ""special query"" 

Permanently shown labels are kind of distraction.

As the last argument for original implementation, I'd like to remember that fzf is based on premise of being as effective as possible with the less time is spent on fzf the better it is.

From that perspective it's difficult to compete with `<trigger> + <label>` approach. As it operates in constant time and requires only two key to be pressed.

Compare that to other suggestions where you have to hit at least extra `Enter` to finish.
",mhrebenyuk,2016-05-17 17:10:33
569,2016-05-18 07:21:43,"Hi @junegunn, first of all thank you very much for your work, can't imagine my life without fzf.
Can you please explain how this feature can be used?
",deathmaz,2016-05-17 17:10:33
569,2016-05-18 07:49:43,"Maybe it's worth updating the docs and adding demo gifs as well.
",balta2ar,2016-05-17 17:10:33
569,2016-05-18 13:29:27,"@deathmaz The feature will be included in the next version (0.12.2) and the man page will be updated accordingly at that point to avoid confusion. The specification is not final until then. Anyway if you build the binary from the source, you can bind a key to `jump` or `jump-accept` action.

<S_CODE_TOKEN>

<img width=""570"" alt=""screen shot 2016-05-19 at 12 48 01 am"" src=""https://cloud.githubusercontent.com/assets/700826/15365522/7994366a-1d5b-11e6-804b-b5d1b4456d50.png"">
",junegunn,2016-05-17 17:10:33
569,2016-05-18 13:31:45,"Thank you very much!
",deathmaz,2016-05-17 17:10:33
569,2016-05-18 19:42:47,"The striping is a nice touch. And the non-chorded activation with `;` feels nice.
",justinmk,2016-05-17 17:10:33
569,2016-05-18 23:25:03,"Any chance to combine `jump` with `jump-accept`?

For example, if a bind key for `jump` is the same as for `jump-accept` (i.e. `fzf --bind ';:jump,;:jump-accept'`) then start selection in single mode (like in suggested implementation), otherwise go with  multiselect and jump-accept.

If fzf is not intended to be used in multiselect mode that will save one keystroke to be pressed.
",mhrebenyuk,2016-05-17 17:10:33
569,2016-05-19 01:47:53,"I can understand the motivation but that breaks the contract where the last binding for a key overrides the earlier bindings. It's not a dynamic change of behavior while fzf is running so I guess it's better to leave it up to the caller to choose the right set of options.

<S_CODE_TOKEN>
",junegunn,2016-05-17 17:10:33
568,2016-05-08 08:28:59,"- Category
  - [x] fzf binary
- OS
  - [x] Mac OS X
- Shell
  - [x] zsh

![fzf_color_issue](https://cloud.githubusercontent.com/assets/16207504/15096778/33fa6532-1542-11e6-91d9-37ce2a23eb33.png)

I'm using iTerm2 (2.9) with white background colorscheme.
And `$TERM` is set to `screen-256color`

It shows something weird color like screenshot.
Tried `--no-256` option, but same result :(
",aseom,2016-05-08 12:45:02
568,2016-05-08 12:26:36,"Not sure what you find strange? Those are the default colors chosen to look good on terminals with dark background. Since you're on a light background, you might want to try `--color=light` option (put it in your `FZF_DEFAULT_OPTS`). Or you can even customize the colors. See https://github.com/junegunn/fzf/wiki/Color-schemes
",junegunn,2016-05-08 12:45:02
568,2016-05-08 12:43:13,"Oh... i see.
I read whole readme but didn't know about that until now.
Sorry... ㅎ
",aseom,2016-05-08 12:45:02
568,2016-05-08 13:56:33,"No problem. You'll find more info on the man page (`man fzf`).
",junegunn,2016-05-08 12:45:02
567,2016-05-05 20:58:05,"- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

For some reason my fzf-keybindings stop working in the shell at some point. Of course, I have no idea until I try using one, and then I just get a bell. I don't know what to do to troubleshoot this, but I run the normal fzf-bindings.zsh and fzf-completions.zsh, though come to think of it I don't actually use the completions...

Anyway, when I run `bindkey |grep fzf` while fzf is working, I get the result you would expect: 

<S_CODE_TOKEN>

But then it stops working, and the same command, in the same zsh session, returns no hits.

I also use other plugins, but they shouldn't matter, since the loading happens at launch, and everything works fine until it doesn't. 
Anyway. The full list of my zplug packages is at the end. 
# FZF vars:

<S_CODE_TOKEN>
# zplug packages:

<S_CODE_TOKEN>

Looking for help in debugging this. I don't expect it to be a problem in fzf itself, but in my setup. The problem is my ZSH dotfiles are kind of sprawling, and I have no idea how to look for the problem...
",tofagerl,2016-05-12 19:52:31
567,2016-05-08 16:31:54,"> But then it stops working, and the same command, in the same zsh session, returns no hits.

So what are those keys mapped to? I mean, what do you see on `bindkey | grep '""^[RT]""'`?
",junegunn,2016-05-12 19:52:31
567,2016-05-08 21:31:38,"Nothing. Unmapped. At least as far as I remember. I'll have a look the next time it happens.
",tofagerl,2016-05-12 19:52:31
567,2016-05-08 21:36:13,"By the way, when I press alt-c I only get subfolders from my working directory to choose from. Any way to make it search from / instead?
",tofagerl,2016-05-12 19:52:31
567,2016-05-08 21:38:58,"<S_CODE_TOKEN>

Alt-C I can't grep for, but it looks empty from the full listing.
Ctrl-G, for FZF-mapper, becomes send-break.

I assume these are all ZSH's default functions for those keybindings...
",tofagerl,2016-05-12 19:52:31
567,2016-05-10 03:11:25,"Probably one of your zsh plugins is restoring the default key bindings at some point. You'll have to figure out which one is doing that.
",junegunn,2016-05-12 19:52:31
567,2016-05-10 10:01:14,"Any idea what kind of syntax I should be looking for with ack or ag? Bindkey isn't returning anything interesting...
",tofagerl,2016-05-12 19:52:31
567,2016-05-10 15:50:16,"You're asking a bash user here :)

`bindkey -d` and `bindkey -e` are something I would look for.
",junegunn,2016-05-12 19:52:31
567,2016-05-10 16:29:40,"_Sharp intake of breath_
Dude... You should really try it...

Although if I were to start from scratch I might try Fish instead, my ZSH settings are a mess, and ZSH makes it quite easy to get into such a mess...
",tofagerl,2016-05-12 19:52:31
567,2016-05-12 19:52:31,"OK, after two days I'm ready to pronounce oz/safe-paste as the guilty plugin. It plays fast and dirty with bindkey.
",tofagerl,2016-05-12 19:52:31
566,2016-05-05 08:10:46,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ ] zsh
  - [x] fish

Trying to follow this guide: https://github.com/junegunn/fzf#respecting-gitignore-hgignore-and-svnignore

So I have the following code in my `config.fish`:

<S_CODE_TOKEN>

When I use fzf in vim this is not applying and searches like normal, I have talked to some of `fish` developers and they suggested it would be to talk to you as they weren't entirely sure of what to set up.
",CrashyBang,2016-05-09 00:56:54
566,2016-05-05 10:18:35,"For some reason, the variable is not exported to vim I guess? Not really familiar with fish. What does `:echo $FZF_DEFAULT_COMMAND` say?
",junegunn,2016-05-09 00:56:54
566,2016-05-05 20:40:14,"It gives the right command? 

<S_CODE_TOKEN>
",CrashyBang,2016-05-09 00:56:54
566,2016-05-08 16:34:54,"Is that a correct ag command? If I run it on shell, I get the following error:

<S_CODE_TOKEN>
",junegunn,2016-05-09 00:56:54
566,2016-05-08 21:19:20,"If I run it without the `""""` it works like so: `ag -g -i --depth -1` sorry I was going off `ag -g """"`.

If i run `ag -g -i --depth -1` outside of neovim it works well, if inside it only gives a few results.

Cheers.
",CrashyBang,2016-05-09 00:56:54
566,2016-05-08 21:32:15,"Okay I figured it out a bit more it was the order I was adding the params if I run like this:

<S_CODE_TOKEN>

Where SEARCH-TERM is the string I want to search, if I run this from outside neovim it works well, however if I run this using the `$FZF_DEFAULT_COMMAND` I get the following error:

<S_CODE_TOKEN>

Is this because of how `$FZF_DEFAULT_COMMAND` is used?

Cheers.
",CrashyBang,2016-05-09 00:56:54
566,2016-05-09 00:56:54,"I am an idiot... got it working with `ag --ignore-case --depth -1 -g """"` once again I am sorry but hopefully this helps anyone with Fish.
",CrashyBang,2016-05-09 00:56:54
565,2016-05-05 00:38:35,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I've looked at the output, and it seems that it goes digging in my `~/.wine/` directory and finds a file system loop, and says there are too many levels of symbolic links.

I don't really need to have `.wine/` included in the fzf search. How would I exclude it or fix the loop?
",krompus,2016-05-08 16:36:06
565,2016-05-05 10:25:22,"You can set up `FZF_CTRL_T_COMMAND` as suggested [here](https://github.com/junegunn/fzf#key-bindings-for-command-line). But CTRL-T by default does not include hidden files and directories so `.wine` showing up is strange.
",junegunn,2016-05-08 16:36:06
565,2016-05-05 16:10:15,"Ah, I must have configured it to include hidden files; it was a while ago, and I don't remember how I did this. I actually don't mind (perhaps I'd prefer) including hidden files.

Anyways, for now, how would I make sure that it's not including hidden files?

Maybe it's this section in `key-binding.zsh` that I should modify?

<S_CODE_TOKEN>

It seems it might be `FZF_DEFAULT_COMMAND` actually. I'm looking into it.

EDIT: Oh wait. I think I remember now. I searched around for fzf settings because I actually _wanted_ to see hidden files before. I had found this. https://gist.github.com/claytron/d057345985ef29bd40d6

<S_CODE_TOKEN>

...and I found that I had put these values were in my `.fzf.sh` and `.zsh.sh` too. When I comment them out, it still searches hidden files, and `.fzf.sh` isn't even sourced in my shell.

Sorry for the trouble. If I can't get this to work, I might just try uninstalling and reinstalling. I want to be sure that I've wiped everything though, as I think there might be some config files hanging around that I'm unaware of.
",krompus,2016-05-08 16:36:06
565,2016-05-05 19:05:39,"Update:

I uninstalled fzf and the fzf vim plugin, checked that it wasn't working anymore, checked that there were no stray config files, then reinstalled as per the README.

It's still searching hidden files. There must be a config setting somewhere that I missed. I'm not sure where this would be. :/

I executed `printenv` and found `FZF_DEFAULT_OPTS=--extended --multi --inline-info --prompt=""fzf> ""`. Maybe this is the problem? How would I change that?
",krompus,2016-05-08 16:36:06
565,2016-05-05 20:43:50,"And another update:

<S_CODE_TOKEN>

Now `fzf` works as intended for the current terminal session, but `<C-t>` is still searching hidden files. When I open a new terminal, `fzf` searches for hidden files again.

I've checked in `/etc/profile`, `/etc/zsh/zprofile` and `/etc/environment`, and there are no references to `fzf`.
",krompus,2016-05-08 16:36:06
565,2016-05-06 02:41:38,"You should be looking at FZF_CTRL_T_COMMAND instead.
",junegunn,2016-05-08 16:36:06
565,2016-05-06 02:46:54,"Well, it does the same thing when I execute `fzf` from `~/`. When I `unset FZF_DEFAULT_COMMAND` in the shell, `fzf` works normally, but `C-t` is still searching hidden files, so I figured it was both.

What should `FZF_CTRL_T_COMMAND` be by default, and where should I set it? it's not in `env`.
",krompus,2016-05-08 16:36:06
565,2016-05-06 02:56:38,"You pasted the code in the above comment that refers to the variable and its default value.

https://github.com/junegunn/fzf/issues/565#issuecomment-217197399

You might want to check if the variable is correct at the spot.
",junegunn,2016-05-08 16:36:06
565,2016-05-06 03:08:07,"Ah, so that is the default value? I'm not sure what would be overriding it.

I'm also not sure what you mean by ""check if the variable is correct at the spot""?
",krompus,2016-05-08 16:36:06
565,2016-05-06 03:15:08,"I mean like basic printf debugging. You can add an echo statement and see
the value of it there, right?
- junegunn
",junegunn,2016-05-08 16:36:06
565,2016-05-06 14:30:11,"I don't know how I would begin debugging fzf with printf.

I'm really sorry for my incompetence. :/
",krompus,2016-05-08 16:36:06
565,2016-05-08 02:18:45,"Temporarily add an echo statement to `__fsel` function you mentioned above

<S_CODE_TOKEN>

Reload the file and hit CTRL-T to see the current value of `$FZF_CTRL_T_COMMAND` at the context. Check if the value is empty.
",junegunn,2016-05-08 16:36:06
565,2016-05-08 16:18:02,"Thanks! Yep, it's empty.

Actually, I think that I just needed to restart my machine, because it's fixed now; no more hidden files. I guess that somehow there was a value that I had deleted but was still loaded in the environment.

Thanks you so much for your help, and for this amazing program! :)
",krompus,2016-05-08 16:36:06
565,2016-05-08 16:36:06,"Good to hear that the problem's gone. Yeah, it must have been a lingering env var from somewhere.
",junegunn,2016-05-08 16:36:06
564,2016-05-04 20:46:14,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

fzf is working well but I have tried to put this function in my .zshrc
`j() {
  local dir
  dir=""$(fasd -Rdl ""$1"" | fzf -1 -0 --no-sort +m)"" && cd ""${dir}"" || return 1
}`
When I invoke, it shows all the matches available but typing to find a file does not act on the list. Am I doing something wrong?
",pdoak,2016-05-05 16:46:54
564,2016-05-05 10:44:19,"It works for me fine. Can you post the screenshot or an [asciinema](https://asciinema.org/) recording of the situation?
",junegunn,2016-05-05 16:46:54
564,2016-05-05 13:03:52,"The recording is here: https://asciinema.org/a/8lft84bfutz4nne962fkao551
",pdoak,2016-05-05 16:46:54
564,2016-05-05 15:34:45,"Yo, that doesn't look like fzf at all. Make sure j is pointing to the right function. You can check the output of `type j`.
",junegunn,2016-05-05 16:46:54
564,2016-05-05 15:48:03,"Thanks, it was pointing to another alias. I have changed the function name and it now works.
",pdoak,2016-05-05 16:46:54
563,2016-05-04 12:19:44,"- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

With the following command : 

<S_CODE_TOKEN>
# What I get : I see

<S_CODE_TOKEN>

after 1 second
# What I expect :

See `foo` immediately, then bar after one second.

The -1 should only tell that if the incoming pipe is finished and contains only one element, fzf should exit and output that line. 

What do you think ?
",edi9999,2016-05-04 17:39:06
563,2016-05-04 17:39:06,"More precisely, `-1` is the option that tells fzf not to start the interactive ncurses finder when there's only one possible match and just stop there. It makes more sense when `-q` option is also specified.

<S_CODE_TOKEN>

The option was added for scripting purposes where you don't want to start interactive finder unless it's necessary. If we start ncurses finder with when the option is set, there are a few problems:
- User can change the query, so the condition dynamically changes. Should we just cancel out the option, or should we still stop fzf when there's only one match for the updated query? It can be confusing.
- Finder pops up and closes immediately in many cases, screen unnecessarily flickers.

So what you described above is the expected behavior of the option.
",junegunn,2016-05-04 17:39:06
563,2016-05-04 18:06:38,"Ok, so I guess I will remove that option from my .bashrc :-)
",edi9999,2016-05-04 17:39:06
562,2016-05-03 03:54:16,"- also disable sort
",h221baker,2016-05-03 03:56:38
561,2016-05-01 10:54:34,"#560
",pmazurek,2016-05-02 15:08:11
561,2016-05-02 15:03:45,"Thanks. However, the key bindings and the fuzzy completion are optional and one can use fzf binary alone without installing them. The binary only knows FZF_DEFAULT_OPTS and FZF_DEFAULT_COMMAND so we should not add the other ones to `--help` output.

The README page is also organized as such; fzf binary, key bindings, and fuzzy completion. And each section describes a subset of the variables that are relevant to the topic.

I noticed that `FZF_ALT_C_COMMAND` is missing on the page. I'll add it to the document.
",junegunn,2016-05-02 15:08:11
560,2016-05-01 09:42:25,"Documentation according environment variables is incomplete, both in readme and in --help. Took me a while to try and come up with my own way of cd'ing to a folder using fzf, and only when I got everything ready and wanted to customize the keybindings, I realized that you, in fact, can override the alt+c default command, because the variable is buried there, somewhere in the code.

Lets update it. Will save someone's time in future.
",pmazurek,2016-05-02 15:08:03
559,2016-04-26 21:26:27,"When using a tab for `fzf_layout`, I've ended up in the wrong window,
which was caused by the `wincmd p` being executed since the previous and
final tab page numbers where the same.

This patch fixes it by using a window-local variable to mark the
originating window.

> let g:fzf_layout = { 'window': 'execute (tabpagenr()-1).""tabnew""' }

This somehow assumes that there's (mostly) a single fzf instance running at the same time.
The approach could be extended to not use a global mark (name), but use fzf's instance id/pid there.
It could then even be made to look at all windows (across all tabs) for the originating one.
",blueyed,
559,2016-04-27 11:40:01,"The build failure seems to be unrelated?!
",blueyed,
559,2016-04-27 12:10:32,"Yeah, don't worry about it. Some test cases are flaky on travis CI.

Can we just do this? Maybe I wasn't thinking straight.

<S_CODE_TOKEN>
",junegunn,
559,2016-04-27 16:03:39,"Actually, I noticed a couple more issues with `enew` as `fzf_layout` (`let g:fzf_layout = { 'window': 'enew' }`).
1. CTRL-C leaves `[Process exited 130]` message on screen
2. Enter on empty result (some bogus query) gives `Can't re-enter normal mode from terminal mode`

I'm a bit surprised by the second one because I didn't experience it in the past. We have to use `:b #` instead of `execute ""normal! \<c-^>""` though they are [not completely equivalent](https://github.com/junegunn/fzf/commit/355d004895eb8cb7e6ca7f8cf0b095f381d6e41b#commitcomment-11794616).

<S_CODE_TOKEN>
",junegunn,
559,2016-04-27 16:17:53,"Geez, I found another issue with `enew`, pressing CTRL-X, CTRL-V, CTRL-T does not clean up the terminal buffer. Sorry, but I think I'm going to apply my patch first to address these issues. Let me know if you still have the problem and think it needs more improvements.
",junegunn,
559,2016-04-27 16:29:06,"> Enter on empty result (some bogus query) gives Can't re-enter normal mode from terminal mode

This was a cheesy fix to avoid worse problems (segfaults, loops). Hopefully we can find a more elegant approach in the future.
",justinmk,
559,2016-04-27 16:39:40,"@justinmk Ah okay, noted. Thanks.
",junegunn,
559,2016-04-28 18:46:50,"@junegunn 
The problem with (re)storing tab/window numbers is that they are not bound to the actual tab/window.

Feel free to apply your patch first though.
",blueyed,
559,2016-04-29 02:46:56,"@blueyed Yes, the assumption here is that it's unlikely that a user opens more than one fzf buffer at a time, which I believe is a reasonable one and it simplifies the implementation.
",junegunn,
559,2016-04-29 03:17:32,"Would https://github.com/vim/vim/commit/86edef664efccbfe685906c854b9cdd04e56f2d5 help solve this more elegantly/robustly? (That patch is not merged into neovim yet)
",justinmk,
559,2016-04-30 04:15:35,"Yeah, probably, ~~but I don't want to tell the users to install the bleeding edge Vim~~.
EDIT: Oh right, it only applies to Neovim, then we can consider that.
",junegunn,
559,2016-05-06 10:18:49,"> I don't want to tell the users to install the bleeding edge Vim.

No need: I wrote [a `win_id` function family shim](https://github.com/kopischke/vim-stay/blob/release/1.4.0/autoload/stay/win.vim) for the upcoming _vim-stay_ release that should work with all versions of Vim 7. Might be overkill for this usage case, but I felt I would be remiss in not mentioning it.
",kopischke,
559,2016-06-01 13:47:53,"@kopischke 
Very interesting.  I think it would be useful for other plugins as well, and could therefore become a separate lib?!
",blueyed,
559,2016-06-01 14:05:20,"@blueyed that is the idea once I get my plugin updates out of the door.
",kopischke,
558,2016-04-26 20:49:28,"Fixes #547.

I've modified the ruby version of the script to treat `-e` option same as the Go version. There was an issue with caching so I had to do a change about that. Details in the commit log.
",gene-pavlovsky,2016-05-18 17:03:52
557,2016-04-25 15:59:44,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I don't use ag, `ctrl` + `t` doesn't seem working for me. For example:

If I do `rm` then `ctrl` + `t`, nothing happens. 
",yifanchen,2016-04-26 01:13:49
557,2016-04-25 16:53:46,"What does `bindkey | grep fzf` say?
",junegunn,2016-04-26 01:13:49
557,2016-04-25 17:41:27,"Nothing.
",yifanchen,2016-04-26 01:13:49
557,2016-04-25 17:51:33,"How did you install fzf? Did you follow the instruction given in README page?
",junegunn,2016-04-26 01:13:49
557,2016-04-25 17:57:53,"yes, I installed both fzf, and fzf vim, they all working by typing `fzf` and `:FZF` or `:FZF ~`. But `ctrl` + `t` doesn't work.
",yifanchen,2016-04-26 01:13:49
557,2016-04-25 18:05:42,"Please be more specific. Did you run the install script? Do you have a line that loads ~/.fzf.zsh in your .zshrc? Did you reload .zshrc or restart zsh after installation?
",junegunn,2016-04-26 01:13:49
557,2016-04-26 01:12:12,"I just did again, and removed `FZF_CTRL_T_COMMAND=""seq 100""` form `.zshrc`. Then it worked. Nice. Thanks man.

Btw, can I set my default open directory to somewhere? 
",yifanchen,2016-04-26 01:13:49
557,2016-04-26 01:21:29,"> Btw, can I set my default open directory to somewhere?

Not sure what you mean by that. Try configuring `FZF_CTRL_T_COMMAND` as you like.
",junegunn,2016-04-26 01:13:49
557,2016-04-26 02:12:56,"Sorry, I should've been more clear.

When I run `fzf`, the default directory starts where I am at. But, I sometimes want to search files that are two levels before. e.g. `../../tt.js`. In this case, I would like to have a fixed directory, no matter where I am at, my fazz search starts from that fixed directory.
",yifanchen,2016-04-26 01:13:49
557,2016-04-26 04:17:23,"See:
- https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh
- https://github.com/junegunn/fzf/wiki/Fuzzy-completion#zsh
",junegunn,2016-04-26 01:13:49
557,2016-04-26 05:13:15,"Cool, thanks man. 
",yifanchen,2016-04-26 01:13:49
556,2016-04-25 03:57:14,"- Category
  - [x] Neovim
- OS
  - [x] Mac OS X
- Shell
  - [x] bash

<S_CODE_TOKEN>

In Neovim, when I run `:FZF` in a directory with a git repo, with the default command as shown above, the terminal buffer freezes until I switch to a different tmux window and switch back.

The issue also appears to be present without Neovim being in tmux.

After some testing, it seems that 095f31b is the cause of the issue.
",sbdchd,2016-04-25 16:44:23
556,2016-04-25 09:16:42,"I don't have the problem. Please check if the problem is reproducible with the following configuration

<S_CODE_TOKEN>
",junegunn,2016-04-25 16:44:23
556,2016-04-25 16:44:23,"I am not sure why, but after removing vim-airline, the problem seems to be resolved.

Thanks for the help.
",sbdchd,2016-04-25 16:44:23
556,2016-04-25 16:51:22,"Related: https://github.com/junegunn/fzf.vim/issues/84

I believe it's a bug of neovim.
",junegunn,2016-04-25 16:44:23
556,2016-04-25 17:00:19,"See https://github.com/junegunn/fzf.vim/issues/84#issuecomment-182404906. This bug probably is in Vim, but it doesn't happen there because tmux is used instead.
",justinmk,2016-04-25 16:44:23
556,2016-04-25 17:07:49,"@justinmk Thanks for chiming in. But no, it's not reproducible on original Vim. The bang versions of the commands such as `:FZF!` do not use tmux and they are still fine.

You can use this config to reproduce the problem:

<S_CODE_TOKEN>
",junegunn,2016-04-25 16:44:23
556,2016-04-25 17:22:16,"@junegunn Thanks for the repro! I just tried that vimrc with `NVIM v0.1.5-24-gef205c3` and didn't find much lag using `:FZF!` (with 57562 results) compared to Vim 7.4.52. (ubuntu 32-bit, ssh to VM from mintty, tmux 1.8)

> The bang versions of the commands such as :FZF! do not use tmux and they are still fine.

I didn't mean to imply that tmux is the differentiating factor--rather a blocking `system()` call (which [prevents statusline updates](https://github.com/junegunn/fzf.vim/issues/84#issuecomment-182417756)).

In Neovim, `:FZF!` still runs a `:term` buffer, so again it's non-blocking and we haven't made an apples-to-apples comparison vs. Vim. (Admittedly, this is impossible at the moment because `:!` and `system()` in nvim do not support interactive processes)
",justinmk,2016-04-25 16:44:23
556,2016-04-25 17:29:36,"Hey @justinmk, did you run it on a git repo? It only happens when the current directory is inside a git repo.
",junegunn,2016-04-25 16:44:23
556,2016-04-25 17:31:06,"Ugh, only when you're at the root of a repo.
",junegunn,2016-04-25 16:44:23
556,2016-04-25 17:57:54,"At the root of a non-trivial git repo it definitely takes a few seconds for FZF to show up. Without airline it is instantaneous. 
",justinmk,2016-04-25 16:44:23
556,2016-04-25 18:07:22,"In my case, it hangs indefinitely until I hit ESC.
",junegunn,2016-04-25 16:44:23
555,2016-04-24 18:34:24,"<!-- Check all that apply [x] -->
- Category
  - [X] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [X] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [X] bash
  - [ ] zsh
  - [ ] fish

I'd like to see the Makefile improved to support i686. On my Gentoo system, I get an error:

<S_CODE_TOKEN>

I'm not sure about my machine type. It's a remote VPS (by RapidVPS), running on OpenVZ, as far as I know.
`uname -m` returns `i686`, but from `/proc/cpuinfo`: `model name : Intel(R) Xeon(R) CPU E5530 @ 2.40GHz`

I googled `Xeon E5530` and it's a 64-bit CPU. But maybe that is IA64, not x86-64? Either way, when I build the source manually, both executables have identical description and look like 32-bit:

<S_CODE_TOKEN>

Both of them run fine. Btw in my case each file is a whopping 3.1 Mb, `strip`-ping them reduces size to 2.1 Mb - still big, but better. Does it make sense to `strip` in the Makefile?
",gene-pavlovsky,2016-04-25 16:42:29
555,2016-04-25 13:03:15,"Thanks to @andjscott, the [fzf ebuild for Gentoo Linux](https://github.com/andjscott/overlays/issues/2) now builds the Go version, works on both 32-bit and 64-bit machine.
",gene-pavlovsky,2016-04-25 16:42:29
555,2016-04-25 13:12:03,"As I mentioned earlier, the Makefile is for building official binaries, 32-bit and 64-bit with ncurses statically linked. It's not necessary if you simply want to build a binary for your system.

> executables have identical description and look like 32-bit

You can install 32-bit OS on 64-bit machine, but not the other way around. Cross compilation in Go is done by setting `GOARCH` env variable. If you look at the Makefile, you'll notice `GOARCH=386` in `fzf/$(BINARY32)` target, but no `GOARCH` is set for `fzf/$(BINARY64)`, which is so because we _know_ that we're on a 64-bit OS (`ifneq ($(shell uname -m),x86_64) ...`), and that's why you ended up with two 32-bit binaries. Add `GOARCH=amd64` to 64-bit binary target and see if you can properly build both binaries. If it works, we can remove the precondition. But even if it doesn't we can still consider slightly modifying the Makefile so that it builds 32-binary only on a 32-bit OS.

Go binaries are known to be big. This simple program makes a 2MB binary.

<S_CODE_TOKEN>

We can cut down the size of the binary with ~~`-ldflags '-s -w'`~~`-ldflags '-w'`. I just haven't paid attention to the size as a few megabytes don't matter much in most modern systems. I'll consider that in the future releases. I remember there were some issues with stripping Go binary in the past, but it's probably fixed by now.

EDIT: https://github.com/golang/go/issues/11622#issuecomment-119263915
",junegunn,2016-04-25 16:42:29
555,2016-04-25 14:09:30,"How about changing the Makefile to build bin/fzf for the native architecture by default and making the cross compiling target a separate task? 
",andyjscott,2016-04-25 16:42:29
555,2016-04-25 15:08:02,"I don't want to change it too much. Looks like all you need is `make install`, so how about this?

<S_CODE_TOKEN>
",junegunn,2016-04-25 16:42:29
555,2016-04-25 16:21:33,"Building only one version, appropriate for ARCH, sounds reasonable to me.
I didn't succeed building with GOARCH=amd64.
Try 1:

<S_CODE_TOKEN>

Try 2 (`CGO_ENABLED=1`, I have no idea what I'm doing):

<S_CODE_TOKEN>

I think you're right and my VPS hosting provider runs 32-bit OS on a system with 64-bit-capable CPUs. So I give up on trying to build a 64-bit executable :)

The `ldflags '-w'` option result in 2.3 Mb binary vs 3.1 Mb without ldflags. Either version is 2.1 Mb after `strip`. Is compiling static binaries are common feature of Go compiler? It hardly makes sense if building a binary for your own system, is it trivial to add an option to `go` so it will compile a dynamically linked binary?
",gene-pavlovsky,2016-04-25 16:42:29
555,2016-04-25 16:42:29,"Stripping Go binary seems to have issues;
- https://github.com/golang/go/issues/11622#issuecomment-119263915
- https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=717172

Not sure if it's fixed or not, but I don't think it's worth the trouble.

The official linux binaries I make via `make linux` are ""partially static"", only ncurses is statically linked. Static linking of ncurses is enabled only when you explicitly pass `TAGS=static` (see Makefile and curses.go). So what you built on your system with `make` or `make install` is a dynamic binary. And no, it's not possible to make Go binary smaller than that as far as I know.

I'm going to apply the patch I mentioned above and be done with this for now. I'll consider applying `-ldflags ""-w""` for the next releases.
",junegunn,2016-04-25 16:42:29
555,2016-04-25 16:44:14,"All right JG, thanks for your work, and sorry to take so much of your time! Kamsahamida!
",gene-pavlovsky,2016-04-25 16:42:29
554,2016-04-24 18:25:28,"The `Build on $(UNAME_M) is not supported, yet` message was referencing an undefined UNAME_M. Fixed that.

Still I'm thinking is there sense to keep this warning? Apparently it builds just fine on my i686 system. So why should the Makefile be disabled forcefully?
",gene-pavlovsky,2016-04-25 14:04:29
554,2016-04-25 14:05:12,"Thanks, I answered to your questions in #555.
",junegunn,2016-04-25 14:04:29
553,2016-04-24 15:20:46,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Auto completion doesn't work for both vi and cd.

`cd **<tab>`, then this shows up:

<img width=""1058"" alt=""screen shot 2016-04-25 at 12 14 39 am"" src=""https://cloud.githubusercontent.com/assets/991367/14768345/a64213d8-0a7a-11e6-8586-e86d9198d102.png"">

And if I quit that screen by ESC, this message shows up:

`cd **(eval):1: _fzf_compgen_dir: function definition file not found`

I'm using newest version from github, I just pulled fzf repo (fzf executable ... 0.12.0)
Reinstall via `install` will `--all` doesn't help.
",mrleolink,2016-04-25 10:28:18
553,2016-04-24 16:16:32,"I don't use zsh, so I don't know if I can help. Google points me to this page you might want to take a look:
http://stackoverflow.com/questions/10585002/zsh-complains-about-rvm-rvm-cleanse-variables-function-definition-file-not-fo
",junegunn,2016-04-25 10:28:18
553,2016-04-25 10:28:04,"wow it works, thank you!!!
",mrleolink,2016-04-25 10:28:18
552,2016-04-23 11:20:06,"- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [x] Neovim
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
- Shell
  - [ ] bash
  - [ ] zsh
  - [x] fish

I am using neovim (using vim however would not make a difference) and fish shell. I have the following configuration:

<S_CODE_TOKEN>

The problem is when running fzf within neovim/vim (or the shell) there is a startup penalty because of the shell:

<S_CODE_TOKEN>

This is not a huge difference, but I would to be able to set a different shell for fzf for performance reasons. When using fzf.vim this small startup penalty does make a bit of a difference. I found [this commit](https://github.com/junegunn/fzf/commit/e95d82748fc8fe5a05d93b30388ba37adb7dbac8), which make fzf use the default shell. Would it be possible to change the used shell just for fzf?
",dalizard,2016-04-24 09:02:17
552,2016-04-23 18:09:20,"`$FZF_DEFAULT_COMMAND` is only used in `:FZF` command (or in `:Files` command) where we don't explicitly specify the source. Please let me know if the following patch helps in your case.

<S_CODE_TOKEN>
",junegunn,2016-04-24 09:02:17
552,2016-04-24 09:05:33,"Tested with a bogus $SHELL (`sleep 1; sh ""$@""`) and it helps.
",junegunn,2016-04-24 09:02:17
551,2016-04-23 05:30:52,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

When I use the completion in shell, the completed Chinese characters are not decoded, here is the screenshot:
<img width=""185"" alt=""screen shot 2016-04-23 at 13 24 17"" src=""https://cloud.githubusercontent.com/assets/899899/14759468/1cace644-0957-11e6-8cee-92b123eb9c8a.png"">
",whenov,2016-04-24 16:09:07
551,2016-04-23 18:15:57,"Yeah, they are not correctly displayed, but they are equivalent to the original characters, right?
",junegunn,2016-04-24 16:09:07
551,2016-04-24 03:28:50,"They are part of the encoding of the original characters:
<img width=""332"" alt=""screen shot 2016-04-24 at 11 27 59"" src=""https://cloud.githubusercontent.com/assets/899899/14765328/abd04916-0a0f-11e6-82ef-4ef6a3969da6.png"">
",whenov,2016-04-24 16:09:07
551,2016-04-24 03:36:42,"I'm a little surprised why you have never encountered this problem...
<img width=""124"" alt=""screen shot 2016-04-24 at 11 33 30"" src=""https://cloud.githubusercontent.com/assets/899899/14765364/bc1a216a-0a10-11e6-946c-74fb800545ef.png"">
",whenov,2016-04-24 16:09:07
551,2016-04-24 03:54:26,"I'm aware of the issue. But although the characters are not displayed as expected, they do point to the original characters, so at least it doesn't break the workflow.

<S_CODE_TOKEN>
",junegunn,2016-04-24 16:09:07
551,2016-04-24 04:15:07,"My case:

<S_CODE_TOKEN>
",whenov,2016-04-24 16:09:07
551,2016-04-24 05:19:50,"Hmm, found that it works on bash, but not on zsh (I use bash).
`printf %q 테스트` on zsh seems to give the wrong output for unicode characters. Any suggestions?
",junegunn,2016-04-24 16:09:07
551,2016-04-24 12:43:36,"In my experiment, both bash and zsh can't handle CJK characters correctly when executing `printf %q`.

I suggest to put the filename in single quotes after escaping the single quotes themselves in filename.
",whenov,2016-04-24 16:09:07
551,2016-04-24 16:05:53,"Using `${(q)VAR}` instead of `printf %q` fixes the issue. I'll push a fix shortly.
",junegunn,2016-04-24 16:09:07
551,2016-04-24 16:08:00,"Fixed in 988c9bd9be48b487bccca2d1d90d67c341c3bbf3. Thanks.
",junegunn,2016-04-24 16:09:07
551,2016-04-25 03:15:40,"You rock!
",whenov,2016-04-24 16:09:07
550,2016-04-23 00:49:41,"Faster startup. Use internal bash globbing instead of external grep binary (adapted from Gentoo's `/etc/bash/bashrc` TERM checking). Insignificant on Linux, but on Cygwin this cuts startup time by 40 ms on my Core i7 laptop.
",gene-pavlovsky,2016-04-23 02:35:27
550,2016-04-23 02:35:31,"Thanks.
",junegunn,2016-04-23 02:35:27
550,2016-04-23 21:08:41,"Thank you! I can't believe even one fork takes so long on Cygwin...
",gene-pavlovsky,2016-04-23 02:35:27
549,2016-04-23 00:13:12,"Fixes #548. Avoid using a subshell in _fzf_defc().
Please also take a look and answer my comment in the last paragraph of #548 
",gene-pavlovsky,2016-04-23 02:36:50
549,2016-04-23 02:39:46,"Good one.
",junegunn,2016-04-23 02:36:50
549,2016-04-23 21:05:10,"Thanks
",gene-pavlovsky,2016-04-23 02:36:50
548,2016-04-23 00:11:46,"- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [X] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [ ] Mac OS X
  - [X] Windows (Cygwin)
  - [ ] Etc.
- Shell
  - [X] bash
  - [ ] zsh
  - [ ] fish

On my Cygwin system, enabling the completion file (which adds `**` handling) really slows down bash startup. The completion script takes 0.5 s to execute (on Core i7!). I've done some digging and traced the problem down to one line - https://github.com/junegunn/fzf/blob/master/shell/completion.bash#L282
Specifically, in `eval ""$(printf ""$orig"" ""$func"")""` the `$()` command substitution creates a subshell (I guess?), I've replaced this call with `time echo ""$(printf ""$orig"" ""$func"")""` and each call to printf takes 0.012 ms, since there are many commands in a loop that call this function, total time is over 0.4 s on my laptop. I guess this is due to `fork` on Cygwin being so slow - on Linux `completion.bash` executes very quickly.

By the way, while I was inserting debugging `echo` into completion.bash, I've noticed the entire file is sourced every time a completion is invoked for a command it was not invoked before (again, producing a significant slowdown on Cygwin). E.g., I put `echo Adding FZF completions` just before the _fzf_defc invokations. When I run bash, I can see that message as bash_completion initializes. When I type `scp` and press Tab twice, I can see that message appear again! How does it work? I couldn't find the code which sources the script itself again.
",gene-pavlovsky,2016-04-23 02:36:50
548,2016-04-23 02:39:20,"Hmm, not sure, you on tmux? If so, do you still have the issue when you set `FZF_TMUX` to `0`?

By the way, I'm not sure if we can continue supporting cygwin, since the go version does not compile on it.
",junegunn,2016-04-23 02:36:50
548,2016-04-23 21:06:31,"Not using tmux (although I want to start using it). Wonder if there is a way to get a ""stack trace"" about who called whom.
Does Cygwin have the `go` compiler?
",gene-pavlovsky,2016-04-23 02:36:50
547,2016-04-22 22:57:08,"- Category
  - [X] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [X] Linux (fzf 0.12.0 on Gentoo)
  - [ ] Mac OS X
  - [X] Windows (fzf 0.11.4 on Cygwin)
  - [ ] Etc.
- Shell
  - [X] bash
  - [ ] zsh
  - [ ] fish

The fzf manpage says: _If you don't prefer fuzzy matching and do not wish to ""quote"" (prefixing with ') every word, start fzf with -e or --exact option. Note that  when  --exact  is
set, '-prefix ""unquotes"" the term._

In reality, in exact match mode `'` doesn't ""unquote"" the term. E.g. I cat bash's README file into `fzf -e`, searching for `Unix` I can find one line that mentions _Unix_, searching for `Unx` - no matches (as expected), searching for `'Unx` - still no matches (I expected `'` to make the match fuzzy). I want to have exact matching by default, but maybe sometimes fuzzy would be useful, because of this bug I have to either use `-x` option or live without fuzzy matching.
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-22 23:04:32,"Actually, with `-e` option none of the special characters `^`, `$`, `|` seem to work. Everything seems to be matched literally.
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-23 02:50:11,"fzf was started as a Ruby script but it was completely rewritten in Go in early 2015. Since the go version does not compile on Cywgin, we have no choice but to use the Ruby version, but I no longer update it. It does not have the new features (I just made sure that it simply ignore the new flags) and some options are not compatible with the latest Go version. So we should leave the Ruby version out of the discussion.

Anyway, there's indeed a bug in the latest version, which I noticed just a few days ago :) The caching mechanism of partial result is broken in some cases. I'll try to fix it in a couple days and let you know of the progress.
",junegunn,2016-04-24 16:14:46
547,2016-04-23 21:19:42,"Oh, I see. Didn't notice that. It looks like cygwin package keeps updating the shell scripts but not the ruby script (whose version is much older than the package version).
What is missing for compiling the `Go` version on Cygwin, the `Go` compiler is not available there?
Btw, how do I build the source on a Linux system? I want to help update the [Gentoo fzf ebuild](https://github.com/andjscott/overlays/issues/2), apparently it also uses the old ruby version.
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-23 21:39:20,"I managed to build it, after I removed these lines from `Makefile`:

<S_CODE_TOKEN>

My `uname -m` returns i686 (btw `UNAME_M` is not set in your Makefile). Why is this `ifneq` there?
Binaries are 3.1 Mb in size, 2.1 Mb after running `strip fzf-linux_amd64`. Is that right?
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-24 03:57:54,"The Makefile is for building both 32-bit and 64-bit binaries on 64-bit machine. I use it to build official binaries, but you don't have to use it. The easiest way to build fzf on your system is to set up Go development environment (i.e. `$GOPATH`) and `go get github.com/junegunn/fzf/src/fzf` and it will put the built binary in `$GOPATH/bin`.
",junegunn,2016-04-24 16:14:46
547,2016-04-24 04:00:26,"> It looks like cygwin package keeps updating the shell scripts but not the ruby script (whose version is much older than the package version)

Yeah, and labeling it as 0.12.0 is horribly misleading :(
",junegunn,2016-04-24 16:14:46
547,2016-04-24 10:12:24,"Thanks for build instructions.
Does `go get` download the precompiled binaries that you made?
On my Gentoo VPS `uname -m` reports `i686`, but the CPU is actually 64-bit, is that not what it should report? Why do you need the `ifneq ($(shell uname -m),x86_64)` conditional in your Makefile? Will it fail to build if compiled on a 32-bit system?

> Yeah, and labeling it as 0.12.0 is horribly misleading :(

I agree. It could be avoided if the new version was renamed to `fzf2` or `gofzf` (for example), or the old version was renamed to `fzf-old`.
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-24 16:14:46,"> Does go get download the precompiled binaries that you made?

No it builds the binary on your system. My binaries are downloaded via install script for those who don't want to setup Go dev env. So basically that's all you need. 

> Why do you need the ifneq ($(shell uname -m),x86_64) conditional in your Makefile?

I remember there were some cross compilation issues, i.e. building 64-bit binary from 32-bit env didn't work. Maybe I did something wrong, but I didn't look further as I build binaries on 64-bit Darwin.

Anyway, the initial issue you reported (invalid caching) is now fixed and will be included in 0.12.1.
",junegunn,2016-04-24 16:14:46
547,2016-04-24 17:56:16,"Thanks. All right, cheers.
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-26 20:39:44,"JuneGunn, by the way, does the `-e` option imply `-x` automatically, or not? In the ruby version it does, but I'm not sure about the current version. If it does as well, perhaps the manpage should mention that.
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-26 20:50:25,"You said you don't plan to support the Ruby version, but would you be willing to accept this patch? It makes the `-e` option usable, which is the only way Cygwin users can get this at the moment.
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-26 20:56:55,"I was also thinking it's quite wrong the Cygwin package advertises fzf version as 0.11.4, and most of all includes the manpage which doesn't quite match the `fzf --help` output. I suppose I should complain to Cygwin's mailing list, but on the other hand just keeping the legacy ruby script in the repository like this invites that kind of mistake on the part of package builders. Maybe create a subdir `legacy`, put the ruby `fzf` there, along with the most appropriate manpage from an old commit, and mention about this whole Ruby->Go history in the README / install instructions?
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-04-27 17:09:21,"The Go version has diverged from its predecessor quite a lot. `-e` being orthogonal with `-x` is one thing, `-x` being the default is another. You can see the history [here](https://github.com/junegunn/fzf/blob/master/CHANGELOG.md).

The version number of the Ruby script is 0.8.9 but the latest version of fzf is 0.12.1. So basically they are different versions with different promises. I don't think it's appropriate that we transplant a subset of the accumulated changes to the legacy version while still calling it 0.8.9.

> it's quite wrong the Cygwin package advertises fzf version as 0.11.4

I agree. And I suppose the package is a collection of shell extensions and the vim plugin? So far, I have tried to make them work with the legacy Ruby version, just by making it not complaining about the new option flags, but I'm not sure if I can keep doing it.

> just keeping the legacy ruby script in the repository like this invites that kind of mistake on the part of package builders

I've been thinking about removing it from this repo. The thing is, I don't use it anymore, and I don't think I can pay enough attention to it. So what I suggest is that you or the maintainer of the cygwin package (@me-and according to #410) create a separate repository that is for the package, Ruby version with custom patches (such as #558) and the correct man page for the version, etc.

But the best thing that can happen is that we finally build Go version on Windows (#147).
I don't use Windows, but have [heard that it's improving](https://channel9.msdn.com/Blogs/Seth-Juarez/Windows-Subsystem-for-Linux-Architectural-Overview), free lunch coming?
",junegunn,2016-04-24 16:14:46
547,2016-04-27 17:43:39,"I think your points are completely reasonable, I'll get in touch with @me-and.
Actually there are many subpackages, basically every piece is a separate package. One is fzf and fzf-tmux, others are the shell completion scripts etc. Not sure about vim plugin since I don't use vim.
I've read about WSL just recently, it's quite suprising move from Microsoft (but I keep thinking - where's the catch? - since TANSTAAFL).
To be honest, I miss the days I was exclusively on a Linux desktop (Gentoo), recently I've made a decision to switch back in the midterm future, at most next time I buy a new laptop (which I do every ~4-5 years).
",gene-pavlovsky,2016-04-24 16:14:46
547,2016-05-04 10:37:24,"Hello! Cygwin maintainer here! @gene-pavlovsky pointed me at this thread over in me-and/Cygwin-fzf#2.

So far, I've just been naively packaging up latest fzf release for Cygwin every so often; there've been changes that look like they're relevant to Cygwin, in things like the Tmux script, and I've not been thinking too hard about things like whether the version numbers are actually appropriate.

Now I'm actually thinking about what's appropriate, I think the sensible thing to do is to officially fork fzf into a fully supported Ruby-based project and an exclusively Go-based project, with separate releases and presumably different names, rather than having the Ruby code languishing unmaintained here. Does that seem sensible to you?

If so, I've started with the very basics of ripping out the Go code to form a Ruby-based project over at [me-and/fzf:ruby](https://github.com/me-and/fzf/tree/ruby), and I suspect the sensible next step is for the Ruby code to be officially removed from this repository, possibly with a pointer in the README or similar to the Ruby fork.
",me-and,2016-04-24 16:14:46
547,2016-05-04 17:35:30,"@me-and Sounds good. I'll remove Ruby script from this repo and update the install script to point to the fork on unsupported platforms (or simply on Cygwin). I think I'll have time for that early next week. By the way, I think you can still use many test cases from `test/test_go.rb`, but how you're going to test the Ruby version is up to you.
",junegunn,2016-04-24 16:14:46
547,2016-05-11 00:25:46,"@me-and I've submitted my PR wrt this issue as well as manpage corrections to your repo.
",gene-pavlovsky,2016-04-24 16:14:46
546,2016-04-21 20:04:30,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Two out of three of `fzf`’s key bindings conflict with OS X features:
- `Ctrl-T` clobbers the “transpose” function of the Cocoa text system ordinarily bound to that key; too useful a feature to simply lose for `fzf` usage. 
- `Alt-C` does not work at all, as Alt+letter combinations insert special characters (“ç” on a German keyboard); disabling that is not even an option for anybody writing in a language other than English on OS X.

Providing either a way to configure these bindings (not just opt out on install – the hotkeys **are** useful after all), or saner defaults on OS X would be much appreciated.
",kopischke,2016-04-24 05:12:06
546,2016-04-22 01:55:51,"Technically CTRL-T is not an OS X feature, but a default key binding of bash that is mapped to ""transpose-chars"" (see `bind -p` to confirm). I was well aware of the feature but as I hardly used it – and I figure not many others use it judging from the fact you're the first one to mention it – I decided to override the key. But I guess that it makes sense to provide an option or suggest a way to configure the key without too much hassle.

Excerpt from https://www.iterm2.com/faq.html:

> Q: How do I make the option/alt key act like Meta or send escape codes?
> 
> A: Go to Preferences->Profiles tab. Select your profile on the left, and then open the Keyboard tab. At the bottom is a set of buttons that lets you select the behavior of the Option key. For most users, Esc+ will be the best choice.

I use `Esc+` setting as suggested above so it works for me, but since you said it's not an option, `ESC-C` should do the trick. If you weren't aware of this, I can say you are missing out. `ALT-B` (backward-word), `ALT-F` (forward-word), `ALT-Backspace` (backward-kill-word), `ALT-D` (kill-word), and `ALT-.` (insert-last-argument) are just indispensable. Likewise, they are available to you via `ESC-B`, `ESC-F`, etc. Note that iTerm allows you to choose the option for left option key and right option key separately, so it's something you can consider.
",junegunn,2016-04-24 05:12:06
546,2016-04-22 06:12:16,"Well, if we want to get all technical, these are Emacs-style readline bindings, but the Cocoa text system makes a slightly modified subset of them available in all Cocoa text fields (no Meta combinations, but `Ctrl-W` is backward-kill-word, for instance), which is where I first encountered `Ctrl-T`. For me, that one has become essential, and having to decide between it and _fzf_’s hotkey functionality is a rather unpleasant dilemma. Thanks in advance for looking into a solution for that.

As to the meta key configuration, I’m not using iTerm (and don’t intend to – there are only so many configuration time sinks I am willing to invest into ;)), but I think Terminal.app allows for usage of Escape as Meta too. Thanks for the hint!
",kopischke,2016-04-24 05:12:06
546,2016-04-22 06:44:20,"You use bash so you currently can do this:

<S_CODE_TOKEN>
",junegunn,2016-04-24 05:12:06
546,2016-04-22 08:21:07,"Yeah, I can hack my way around this (in fact, the first thing I did before posting this issue was looking into [key-bindings.bash](https://github.com/junegunn/fzf/blob/master/shell/key-bindings.bash)), but this is both brittle (it depends on internal implementation details) and non-portable (I’ll have to redo it should I switch shells, say to `zsh`), hence me posting this issue.

I’m wondering if a possible way to address this might be introducing an intermediary binding (e.g. `C-xC-t`) which could be unconditionally rebound by the user with a more straightforward `bind` command than what we have now. The current default bindings could still be installed, but opting out and re-configuring would be a much mot painless process. I could submit a PR if you are willing to entertain this?
",kopischke,2016-04-24 05:12:06
546,2016-04-22 09:12:52,"Interesting idea but the suggested approach does not completely solve the problem of portability you mentioned. bash, zsh, and fish all use different syntaxes for binding keys. Changing the binding is much more pleasant on zsh:

<S_CODE_TOKEN>

on bash 4 (I'm stuck with bash 3)

<S_CODE_TOKEN>

and on fish

<S_CODE_TOKEN>

Looking at the above snippets, it looks like what we can do is to use the consistent name `fzf-file-widget` (no underscore prefix, already known by zsh users so we should be using this) across all three shells. Explicit names are better than some obscure key bindings that we hope no one uses.
",junegunn,2016-04-24 05:12:06
546,2016-04-22 09:36:52,"> Looking at the above snippets, it looks like what we can do is to use the consistent name `fzf-file-widget` (no underscore prefix, already known by zsh users so we should be using this) across all three shells. Explicit names are better than some obscure key bindings that we hope no one uses.

Sounds good; I’ll take straightforward, stable configurability over portability if I have to choose. 
",kopischke,2016-04-24 05:12:06
546,2016-04-24 05:12:06,"Updated the code. Now on bash 4+ you can

<S_CODE_TOKEN>

However, unfortunately, CTRL-R and ALT-C are left untouched for the following reasons
- CTRL-R: Couldn't find a way to trigger `history-expand-line`
- ALT-C: The prompt is not updated when we change the directory within the function

I'll close the issue for now as we still have workarounds. But pull requests are appreciated.
",junegunn,2016-04-24 05:12:06
545,2016-04-21 11:40:11,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
- OS
  - [x] Linux
- Shell
  - [x] gtkdialog
  - [x] bash

HI, I'm scripting fzf from a [gtkdialog](https://github.com/01micko/gtkdialog) program. Unfortunately, gtkdialog's parser trips over standard shell input redirection characters, so I need an alternate way to specify the input file. Would you please add a command-line option to specify the input file? I know I could use a `cat` pipe as a work-around, but I don't want to fork an extra process just for that, because fzf is executed repeatedly in a tight loop.

Put it another way:
Syntax that breaks gtkdialog's parser (its fault but I can't control it): `fzf -f $term < input-file` 
request for enhancement: `fzf -f $term --input-file input-file`

Thank you for considering my request.
",step-,2016-04-21 15:57:11
545,2016-04-21 15:57:09,"<S_CODE_TOKEN>

So there is some overhead, but it's so small that I don't think you need to worry about it. I'm pretty sure you won't notice the difference of 0.1ms.
",junegunn,2016-04-21 15:57:11
545,2016-04-21 19:57:00,"OK, thanks.
",step-,2016-04-21 15:57:11
544,2016-04-21 03:30:54,"<!-- Check all that apply [x] -->
- Category
  - [x] Buffers
  - [x] Neovim
- OS
  - [x] Mac OS X
- Shell
  - [x] zsh

I am using Neovim on MacOS and have the latest FZF managed by `vim-plug` as described in the wiki along with the code for `<leader><cr>` to accent buffers list. Every time I press `<leader><cr>` the new split opens and I have to go there and press `Ctrl-C` to break something or the list of recent files won't appear.

Please advise how I can provide more information. Thank you.
",firedev,2016-04-21 05:02:15
544,2016-04-21 04:56:57,"Do you think it's related to https://github.com/junegunn/fzf.vim/issues/84?
",junegunn,2016-04-21 05:02:15
544,2016-04-21 05:02:15,"Indeed, setting `let g:airline#extensions#branch#enabled = 0` fixed it. Guess I'll close this issue in favor of the one you've linked to.
",firedev,2016-04-21 05:02:15
544,2016-04-21 05:04:52,"Yeah, it's probably a bug of neovim and not something I can fix. 
",junegunn,2016-04-21 05:02:15
543,2016-04-18 06:20:45,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
1. file list caching
   It seems that fzf load file list every time from scratch.
   Ctrl-t in my home directory, there are almost 2M files and it takes almost 2 minutes.
   I hope file list caching will be added.
2. filter or exclude pattern
   When I am in my home directory, I rarely want to search files in Applications/ or Library/.
   How about reading exclude pattern in fzf conf file something like this?
   
   <S_CODE_TOKEN>
3. Ctrl-t like Ctrl-r
   I think this is a natural usage, but it won't work that I expected.
   
   <S_CODE_TOKEN>
   
   I expected that fzf would show files under some/parent/dir/ or its descendant dirs.
   Furthermore, It would be very handy if fzf supports auto-completion like this:
   
   <S_CODE_TOKEN>
",dongminkim,2016-04-18 13:31:09
543,2016-04-18 06:32:16,"1. caching was already discussed in previous issues, it's outside the scope of fzf which is just a filter, not a source and not a source management system.
2. FZF_DEFAULT_OPTS and other env vars exist for that purpose. Use your normal shell rc or vimrc.
",justinmk,2016-04-18 13:31:09
543,2016-04-18 07:16:27,"@justinmk With 1. and 2., what I am trying to tell you is **how to speed up loading file list with exclude pattern**, not **how to filter out some exclude pattern within file list**.
I have checked the fzf man page, but I can't find how I can set the exclude pattern.
Please tell me what I have misunderstood.
",dongminkim,2016-04-18 13:31:09
543,2016-04-18 09:55:07,"I totally agree with you on 3. I've always missed that and it felt very natural to have such a behavior. Maybe it could be made configurable (something you can turn off).
",balta2ar,2016-04-18 13:31:09
543,2016-04-18 13:31:09,"Thanks for the suggestion.

Regarding point 1 and 2, let me put it this way: fzf can be thought of as _an interactive version of grep_. Does grep cache the input? No. And grep does know the meaning of the text it's processing. It's designed to ""not care"" about the context. The same can be said about fzf.

<S_CODE_TOKEN>

You see, fzf cannot decide whether if it makes sense to cache the input, or if some extra pre-filtering is appropriate or not. It all depends on the context but fzf is designed to be a context-free filter just like grep. So in that sense, it's beyond the scope of this project.

What you can do instead is to write a script that caches the output of find and use it as the input to fzf. The users should know better about their systems and their needs.

<S_CODE_TOKEN>

(There's also `$FZF_CTRL_T_COMMAND`.)

Many users including myself use `ag` as their `FZF_DEFAULT_COMMAND`:

<S_CODE_TOKEN>

ag also allows you to extend its filtering rule with .agignore file, so you might want to check it out.

https://github.com/ggreer/the_silver_searcher/wiki/Advanced-Usage

The behavior you described in point 3 is available via fuzzy completion (`vim some/parent/dir/**<tab>`) and if you use zsh, you can configure CTRL-T to act as the dedicated key for fuzzy completion. You can find the details [in this page](https://github.com/junegunn/fzf/wiki/Fuzzy-completion).

> $ vi s/p/d/<Ctrl-t>

I'm not against the idea as long as we can have the same behavior both on bash and zsh (I myself am a bash user). Pull requests are appreciated.
",junegunn,2016-04-18 13:31:09
543,2016-04-18 13:38:25,"> The behavior you described in point 3 is available via fuzzy completion (vim some/parent/dir/**<tab>)

Wow, didn't know that! That helps a lot, thank you!
",balta2ar,2016-04-18 13:31:09
543,2016-04-18 13:57:09,"@junegunn Thank you for your kind reply.

I agree with the point that fzf binary should remain in the same scope with grep.
But grep doesn't do key binding such as Ctrl-t or Ctrl-r.
I thought the functionalities could be added as shell integration extensions.

I have switched from bash into zsh, and I realized how handy tab completions are.
I think `vi s/p/d/<Ctrl-t>` is much cooler than `vi some/parent/dir/**<tab>`.

Anyway, I'll try more configurations that you suggested.
And thank you for fzf.
",dongminkim,2016-04-18 13:31:09
543,2016-04-18 14:14:43,"@dongminkim Yeah I see your point, but the way I see it, they are optional and not the core part of the project. They are there to give you the idea of how fzf can be used to extend the functionality of shell and to get you started with fzf, but I don't plan to add more to them.
",junegunn,2016-04-18 13:31:09
542,2016-04-15 13:05:55,"When I press 'Enter' on a file in the list it does not open but the name and path is printed in the terminal. I'm running fzf by typing `fzf` and hitting enter. Ideally I'd like to open text files in neovim.

<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
",alistaircolling,2016-04-15 13:45:46
542,2016-04-15 13:26:05,"fzf is designed to be a 'Unix filter' meaning it reads from stdin and prints to stdout. If no stdin pipe is provided, it lists files from the current directory as a useful default.

To specialise the behaviour, you can write a short shell script or alias. For example:

`alias v='nvim $(fzf)'`

See the 'Usage' section of the README and the wiki for many more interesting examples.
",mjwestcott,2016-04-15 13:45:46
542,2016-04-15 13:45:45,"@mjwestcott Thanks :)
",junegunn,2016-04-15 13:45:46
542,2016-04-15 14:11:48,"Thanks @mjwestcott @junegunn Apologies for clogging up the issues, will check the 'Usage' section.
",alistaircolling,2016-04-15 13:45:46
541,2016-04-13 17:06:51,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
",junegunn,2016-04-13 19:19:34
540,2016-04-12 21:25:49,"Summary:
Fix from: https://adamheins.com/blog/fzf-vi-mode-and-fixing-delays
(Thanks, @adamheins!)
The basic problem is that
fzf presses <Esc> to enter vi-movement-mode
(as opposed to insert mode)
and then presses a bunch of keys to set up the buffer.
But the <Esc> keypress is also the prefix for a bunch of other commands,
so Bash will dutifully wait an excruciating half-second
before actually executing this command.
Instead, we bind <C-a>, which is unused by default,
to be another way to enter vi-movement-mode;
this binding is unambiguous, so fzf can use it without delay.

This change was made by just `:s/\\e/\\C-a/gc` in the relevant section,
after adding the actual binding and comment at the top.
",wchargin,2016-04-15 00:15:12
540,2016-04-13 01:11:31,"Interesting, thank you. Looks like it only happens with bash 4+. How about if we choose a more obscure key that is less likely to be used by the users, such as `\C-x\C-a` or something? I'm saying this because there can be users who mapped `\C-a` to something else.

And `bind '""\C-ac"":` seems like a mistake, right?
",junegunn,2016-04-15 00:15:12
540,2016-04-13 12:46:15,"Yep, good call on both. (I didn't know `<Esc>c` would `cd`—nice!)
",wchargin,2016-04-15 00:15:12
540,2016-04-13 12:50:29,"Actually, I'm not sure what the line `bind -m vi-command '""\ec"": ""i\ec""'` is supposed to do. Is it supposed to let you use `<Esc>c` when you're not in insert mode? This doesn't work for me even before this patch (on `origin/master` 935e986be5fe3d6c9ca6fa578d836500a3b31525).
",wchargin,2016-04-15 00:15:12
540,2016-04-13 17:14:26,"> Is it supposed to let you use `<Esc>c` when you're not in insert mode? 

Yes.

> This doesn't work for me even before this patch

Interesting. CTRL-R and CTRL-T work as expected but not ALT-C. Do you have any clue?
(I don't use vi mode on bash)
",junegunn,2016-04-15 00:15:12
540,2016-04-13 18:48:28,"Nope, I don't know; I've never touched `bind` before. I do note that inlining it, as follows, works:

<S_CODE_TOKEN>

(Note that I removed the extra `\C-x\C-a` at the beginning of the mapping.)

So my guess was that it was a non-recursive mapping, but that doesn't appear to be the case: I ran

<S_CODE_TOKEN>

and then pressing `<C-i>` in normal mode did cause the characters to be inserted.

If you're comfortable with the patch in the first snippet, I'll push it.
",wchargin,2016-04-15 00:15:12
540,2016-04-13 18:48:55,"(Could you reproduce, by the way, on master?)
",wchargin,2016-04-15 00:15:12
540,2016-04-13 19:04:11,"Yeah, that works :)
",junegunn,2016-04-15 00:15:12
540,2016-04-14 17:21:49,"Okay, I went ahead and squashed down the commits to two (one for each fix).
",wchargin,2016-04-15 00:15:12
540,2016-04-15 00:15:50,"Merged, thanks!
",junegunn,2016-04-15 00:15:12
539,2016-04-12 20:46:03,"Is it possible to use fzf_action() to override the <ENTER> key in VIM?
",ghost,2016-04-13 16:32:34
539,2016-04-13 01:13:02,"I'm not sure if I follow. Please be more specific with some examples.
",junegunn,2016-04-13 16:32:34
539,2016-04-13 13:18:24,"I would like to open files in a new tab when using FZF commands in VIM instead of opening in a new buffer.

This is what the CTRL+T key does. I know I can use fzf#run() with the 'sink' options but I'd like to over ride the default behavior in all uses.
",ghost,2016-04-13 16:32:34
539,2016-04-13 15:49:49,"Why not add `nnoremap <C-P> :call fzf#run({ 'sink': 'tabe' })<CR>` in your vimrc? (Replace `<C-P>` with whatever your current hotkey is.) What do you mean by override in ""all uses""?

(Or do you always invoke fzf via `:FZF<CR>`?)
",wchargin,2016-04-13 16:32:34
539,2016-04-13 16:08:00,"@WChargin I did and it work. And I would like to reproduce that behavior when using junegunn/fzf.vim plugin, for all commands.

If I can use fzf_action, to override the <ENTER> key, no added config would be required.

I'm just asking if it's currently possible. I can still use CTRL+T, which is fine.
",ghost,2016-04-13 16:32:34
539,2016-04-13 16:32:34,"You can try something like `let g:fzf_action = { 'enter': 'tabedit' }`.
Though I (and many other Vim users) don't recommend using tabs for everything.

http://stackoverflow.com/questions/26708822/why-do-vim-experts-prefer-buffers-over-tabs
",junegunn,2016-04-13 16:32:34
539,2016-04-13 17:45:14,"Thank you very much. This is exactly what I was looking for.

And thanks for sharing the advice on buffers. I've read the whole thing and will use them instead of tabs. I was missing the <pre>:set hidden</pre>
",ghost,2016-04-13 16:32:34
538,2016-04-07 11:57:59,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

Hello! Completion for `hg up` in Ubuntu 12.04 is broken: branches are not listed. I decided to override it with fzf completion as follows:

<S_CODE_TOKEN>

That's just an ugly copy-paste from `kill` implementation in `~/.fzf/shell/completion.zsh`. But then I found new way to write custom completions (and using `**<Tab>`) here: https://github.com/junegunn/fzf/wiki/Examples-%28completion%29.

However, I only want to override `hg up` subcommand. Here is the code which I tried and which does not work (completion is not triggered):

<S_CODE_TOKEN>

How do I override commands that contain spaces within that new framework?
Thank you!
",balta2ar,2016-04-11 08:21:25
538,2016-04-10 12:36:31,"`$@` contains the prefix, you can examine its content to conditionally run `_fzf_complete` or fall back to `zle expand-or-complete` (or `zle ${fzf_default_completion:-expand-or-complete}`). Does this answer your question?
",junegunn,2016-04-11 08:21:25
538,2016-04-11 08:21:25,"Yes, thank you! For those who might encounter this issue later, here is what I ended up with:

<S_CODE_TOKEN>
",balta2ar,2016-04-11 08:21:25
538,2016-04-11 16:47:09,"Guess we don't actually need the `eval`, right?
",junegunn,2016-04-11 08:21:25
538,2016-04-11 17:18:46,"Looks as if we don't (I tried without it and it worked), but I took it from fzf source code and left as is. So blame is on you :stuck_out_tongue_winking_eye: 
",balta2ar,2016-04-11 08:21:25
538,2016-04-11 17:20:12,"By the way, do you think it's a good idea to put an example like this into the wiki? I read the wiki and I still had questions how to do that.
",balta2ar,2016-04-11 08:21:25
538,2016-04-11 17:34:58,"Yeah, it's something I noticed while looking at the source code and I wanted to get your confirmation. Putting it on wiki, maybe, but it doesn't work the same on bash, no zle. But we could at least mention about `$@`.
",junegunn,2016-04-11 08:21:25
537,2016-04-05 13:12:24,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

My .zshrc file sources a virtualenvwrapper.sh file to set up some environment variables. When updating FZF (from vim, using vim-plug), the following line is added to my virtualenvwrapper.sh file:

`[ -f ~/.fzf.bash ] && source ~/.fzf.bash`

This causes the following errors to appear when opening a new shell.

<S_CODE_TOKEN>

I temporarily solve this after upgrades by deleting the .fzf.bash file.

Thanks.
",mdsn,2016-04-05 15:15:29
537,2016-04-05 13:23:47,"You can tell the install script (the one used in _do_ block of `Plug` statement for fzf) not to touch your configuration files.

<S_CODE_TOKEN>

> the following line is added to my virtualenvwrapper.sh file

Is this true? The script [adds the line to `.zshrc` or `.bashrc`](https://github.com/junegunn/fzf/blob/master/install#L369-L370). I don't know how it ended up in there. Can you look into it?
",junegunn,2016-04-05 15:15:29
537,2016-04-05 15:15:29,"This was my mistake. I forgot my .bashrc is a link to the other file.
Using the relevant option to install solves the issue.

Thank you
",mdsn,2016-04-05 15:15:29
536,2016-04-01 03:01:08,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [X] Key bindings
  - [X] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [X] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [X] bash
  - [ ] zsh
  - [ ] fish

I can very easily run 
`$vim ** [tab]`
and fzf fuzzy search works as expected.

I would like to however set this up with my default editor (sublime)
currently doing:
`$sublime ** [tab]`
does nothing
",oscarmorrison,2016-04-01 03:12:00
536,2016-04-01 03:12:00,"Bash requires you to set up completion function for each command. And the list of commands that we apply fuzzy completion is currently [hard-coded](https://github.com/junegunn/fzf/blob/0.11.4/shell/completion.bash#L252-L259) :confused: 

But you can manually set up completion for extra commands. Add the following after `source ~/.fzf.bash` line in your .bashrc:

<S_CODE_TOKEN>
",junegunn,2016-04-01 03:12:00
536,2016-04-01 03:25:29,"Thanks so much @junegunn for the excellent and timely response 
",oscarmorrison,2016-04-01 03:12:00
535,2016-03-31 23:08:02,,mjwestcott,2016-04-01 00:05:33
535,2016-04-01 00:05:52,"Thanks, some tests are flaky on travis.
",junegunn,2016-04-01 00:05:33
534,2016-03-31 00:46:10,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [x] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I would think that FZF would allow the PCRE word boundary `\b` but searching for `test\b` doesn't work. I would love if this feature could be added since I'm using this to search for tags and want to search something like: `^test\b` using fzf.vim :Tags ex command

I tried using `--nth=1` and just doing `^test$` which worked, but then I can't further limit the result set in any of the other fields.
",MichaelMackus,2016-03-31 03:59:35
534,2016-03-31 03:59:35,"> but then I can't further limit the result set in any of the other fields.

`--nth` option can take multiple ranges, so you can do something like `--nth=1,2..` or `--nth=1,..` which will help in this case. I'll consider applying the option to `:Tags` command.

Regarding `\b`, I'm not thinking of adding more operators to the current search syntax to keep things simple and easy. Instead, I'll experiment with the scoring function so that it prefers matches on word boundary.
",junegunn,2016-03-31 03:59:35
534,2016-03-31 16:31:18,"@junegunn thanks... I'd just like to match the tag exactly. Unfortunately, `--nth=1,..` doesn't quite help since there's still no way to match on the full exact tag (from what I can tell at least).

Makes sense you don't want to overcomplicate things, though. So far, my current approach is working better than standard vim `C-]` at least. If anybody is interested, here's my function:

<S_CODE_TOKEN>
",MichaelMackus,2016-03-31 03:59:35
533,2016-03-30 20:43:16,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->
",sb-lock,2016-04-15 13:46:21
533,2016-03-30 20:48:50,"the bash keybindings were influenced by emacs keybindings. 

I can tell you use vim, that's fine, but it's pretty frustrating for a long time bash and emacs user that installing fzf (as with cygwin) changes LONGstanding standard keybindings in a way that is not at all compatible.

has any thought been given to trying to be more emacs compatible rather than just breaking everything?
",sb-lock,2016-04-15 13:46:21
533,2016-03-31 00:20:30,"I use emacs key bindings on bash and I don't see what you mean by breaking ""everything"". Please be more specific.
",junegunn,2016-04-15 13:46:21
533,2016-03-31 00:22:50,"And those 3 key bindings are optional.The install script asks you if you want them or not.
",junegunn,2016-04-15 13:46:21
532,2016-03-29 21:18:49,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [x] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [x] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [x] zsh
  - [ ] fish

Continued from junegunn/fzf.vim/issues/105
",zhimsel,2016-03-30 18:15:57
532,2016-03-30 03:58:27,"Please provide the exact steps to reproduce the problem. I can't reproduce with the following steps.

<S_CODE_TOKEN>
",junegunn,2016-03-30 18:15:57
532,2016-03-30 15:44:33,"I cannot reproduce with that minimal config either. (FYI, nvim complains that `plug` is not valid, which it's not since it hasn't been installed).

I'll try to programmatically narrow down the source, and write out the exact steps.
",zhimsel,2016-03-30 18:15:57
532,2016-03-30 16:09:41,"> FYI, nvim complains that plug is not valid

I assumed that you have plug.vim in your autoload directory (that's what most people do).

Anyway looks like you'll have to find the culprit in your config.
",junegunn,2016-03-30 18:15:57
532,2016-03-30 16:11:42,"> I assumed that you have plug.vim in your autoload directory (that's what most people do).

Ah, no, I call it manually since I manage it externally via git submodules (soon to be subtrees).

https://github.com/zhimsel/dotfiles/tree/master/vim
",zhimsel,2016-03-30 18:15:57
532,2016-03-30 17:22:58,"Okay, it only seems to happen when there are multiple splits open of the same buffer. So that's another step to narrow down. So, what I have so far:
- Happens in neovim only. vim does not produce.
- Does not matter if `fzf.vim` is sourced or not (i.e. happens with both `:Lines` and `:FZF`)
- FZF-relevant config: 

<S_CODE_TOKEN>

Steps to reproduce:
1. Open neovim, and create three splits for the same buffer
2. Call FZF, and close it (either select a file, or hit escape)
3. Focus then moves to the leftmost split for the buffer you were just in
4. Change the leftmost split to a different buffer
5. Repeat above, and it goes to the middle split (ignoring the other buffer)

See the video below:
![animation](https://s3.amazonaws.com/zhimsel-public/fzf_issue_532.gif)
",zhimsel,2016-03-30 18:15:57
532,2016-03-30 17:29:09,"Is it reproducible with the minimal config above?
",junegunn,2016-03-30 18:15:57
532,2016-03-30 18:09:38,"No, it's not. Which means it's likely a config/plugin conflict. I'm working on narrow it down.
",zhimsel,2016-03-30 18:15:57
532,2016-03-30 18:15:57,"Narrowed it down to kopischke/vim-stay... Thanks for your help! :)
",zhimsel,2016-03-30 18:15:57
531,2016-03-29 09:55:44,"as $subject. keep bash files since it's almost preloaded everywhere.
",adam8157,2016-03-29 13:31:09
531,2016-03-29 12:48:34,"it is recommended not to use which. You should rather use `command -v` (See http://mywiki.wooledge.org/BashFAQ/081 )

Like so : 

<S_CODE_TOKEN>
",netei,2016-03-29 13:31:09
531,2016-03-29 13:05:41,"Thanks for the suggestion, I'll update the code myself to keep the style consistent across the file.

@netei Didn't know that. Thanks for the info.
",junegunn,2016-03-29 13:31:09
531,2016-03-29 13:32:45,"Fixed it. Let me know if you see any issues, thanks.
",junegunn,2016-03-29 13:31:09
531,2016-03-29 13:42:44,"Cool. Better to fix uninstall script too, thanks.
",adam8157,2016-03-29 13:31:09
530,2016-03-28 22:10:52,"- Category
  - [x] fzf binary
  - [x] fzf-tmux script ???
  - [x] Key bindings
- OS
  - [x] Mac OS X
- Shell
  - [x] zsh

When using fzf in iTerm2 with tmux, the ctrl-r keybinding brings up fzf in a new pane on the last opened tab. 

Not sure if it's relevant or not, but I have the following iTerm2 configuration:
""Send text at start: `tmux -CC attach -t base || tmux -CC new -s base`""

I'll admit that my tmux knowledge is fairly limited, so it's very possible I'm abusing something :)
",loeschg,2016-04-24 09:17:57
530,2016-04-24 09:17:57,"I'm pretty sure there's something wrong with your configuration. CTRL-R binding uses `fzf-tmux` to split the pane and it's just `tmux split-window`, and I can't reproduce the problem in any way.
",junegunn,2016-04-24 09:17:57
529,2016-03-28 12:49:48,"Based on previous pull requests, it seems that you appreciate these sort of corrections.

""The following"" is treated as either singular or plural. See [here](http://www.oxforddictionaries.com/definition/english/following), section 'noun', number 2.
",mjwestcott,2016-03-28 14:21:14
529,2016-03-28 14:21:23,"Merged, thank you!
",junegunn,2016-03-28 14:21:14
528,2016-03-24 23:08:51,"<!-- Check all that apply [x] -->
- Category
  - [ ] fzf binary
  - [x] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Replacing for example all fzf with selecta and commenting last line, makes it work without a hitch with selecta (well exit code doesn't get catched when commenting out the last line, not that well versed in bash scripting to figure it out, though). This script is quite useful and could be generalized to user defined command.
",mtglsk,2016-03-25 04:19:41
528,2016-03-25 04:19:41,"Yeah I guess. But I don't think we need to provide a generalized version of it in this repository. It's an open source script after all, one can freely take the idea and build something out of it.
",junegunn,2016-03-25 04:19:41
527,2016-03-23 07:34:46,"<!-- Check all that apply [x] -->
- Category
  - [ x] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ ] bash
  - [ x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

I really want to pass in the flag of +x, such that fzf only matches words, and not the fuzzy aspect of it.  So when I type, for example, the word ""source"", I should only see that word.

However, I tried putting the line of export FZF_DEFAULT_OPTS=""+x --inline-info"" into my .zshrc and even the .fzf.zsh and it did not work.  Any ideas as to what I'm doign wrong?
",esn89,2016-03-23 09:25:40
527,2016-03-23 07:39:28,"@What you're looking for is `-e` (or `--exact`) and not `+x`, right?

<S_CODE_TOKEN>
",junegunn,2016-03-23 09:25:40
527,2016-03-23 08:48:22,"Aah, you're right.  My bad.

When I pass it in, do I have to put the +x as well to turn off extended AND add -e?
Or just the -e?
",esn89,2016-03-23 09:25:40
527,2016-03-23 09:25:40,"It's your choice. Extended-search mode is pretty simple and useful.
https://github.com/junegunn/fzf#search-syntax
",junegunn,2016-03-23 09:25:40
526,2016-03-22 03:38:42,"I think the current default for CTRL-R (which is unsorted) is fairly useless for any complex history. I would like an option to start in sorted mode by default. This should be easy enough to implement across all shells.
",svenstaro,2016-03-22 18:00:34
526,2016-03-22 16:17:11,"If it's the same of my own customization - you can roll it your own :) 
1. Go to FZF home directory (In terminal go to ~/.fzf/ folder)
2. Edit using your favourite editor (e.g nano ~/.fzf/shell/key-bindings.zsh )
3. Remove the +s from command line binding for CTRL-R
4. To support auto-update - Create a new branch && Commit the changes 
",ofirnk,2016-03-22 18:00:34
526,2016-03-22 17:27:52,"You know you can already enable sort by hitting <kbd>CTRL</kbd><kbd>R</kbd> again, but you still want to start it with sort enabled, right?

I think we can consider adding `$FZF_CTRL_R_OPTS` which can be used to override the default set of options (e.g. `FZF_CTRL_R_OPTS='--sort'`). It's simple and not so invasive.

<S_CODE_TOKEN>
",junegunn,2016-03-22 18:00:34
526,2016-03-22 17:46:56,"The proposed changes would be marvelous, @junegunn 
",svenstaro,2016-03-22 18:00:34
525,2016-03-18 06:59:05,"<!-- Check all that apply [x] -->
- Category
  - [x ] fzf binary
  - [ ] fzf-tmux script
  - [ ] Key bindings
  - [x ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [ ] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...

-->

Is it possible to use fzf to select one of the open windows? Instead of using ALT-TAB to switch between windows, it will be done via a fuzzy search of window titles of all open windows.
",mkpaul,2016-03-20 05:51:26
525,2016-03-19 03:00:41,"I don't use Linux desktop environment, so there's not much I can help with, but if you have a command that returns the list of open windows, and a command for selecting one, it should be possible.
",junegunn,2016-03-20 05:51:26
525,2016-03-19 05:48:38,"[Rofi](https://davedavenport.github.io/rofi/) does this.
",george-b,2016-03-20 05:51:26
525,2016-03-19 11:11:07,"Have a look at this [list](https://github.com/D630/doc/wiki/Apps%3A-X11-tools). See also this [dir](https://github.com/D630/dotfiles/tree/master/xorg/local/bin) and pick up some line, if you like to.
",D630,2016-03-20 05:51:26
525,2016-03-20 05:51:26,"@george-b @D630 Cool, thanks for the info.
",junegunn,2016-03-20 05:51:26
525,2016-03-20 08:48:03,"Thanks for the inputs. @george-b @junegunn @D630 
I knew about Rofi and wmctrl, but i don't have root permission to install it in the system. So started looking for other options. 
",mkpaul,2016-03-20 05:51:26
525,2016-11-21 23:48:51,"This might not do mkpaul any good, but might save someone else some time...
  
<S_CODE_TOKEN>
  
![screencapture](https://chrisamow.github.io/images/screen_fzf_winact.gif)",chrisamow,2016-03-20 05:51:26
524,2016-03-15 10:37:55,"- Category
  - [ ] fzf binary
  - [x] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [x] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [ ] zsh
  - [ ] fish

`tmux -V` : 1.6

If I hit `C-R` Inside tmux, I get the following error : 

It seems that the `-q` option to didn't exist on that version.

> The -q flag suppresses errors about unknown or ambiguous options

The following patch adds compatibility for C-r on tmux 1.6

<S_CODE_TOKEN>

Do you mind integrating this ?
",netei,2016-03-15 11:35:32
524,2016-03-15 11:32:26,"The patch looks simple, so why not.
",junegunn,2016-03-15 11:35:32
524,2016-03-15 11:35:37,"Thanks.
",junegunn,2016-03-15 11:35:32
523,2016-03-13 10:43:59,"<!-- Check all that apply [x] -->
- Category
  - [ x] fzf binary
  - [ ] Key bindings
  - [ ] Completion
  - [x ] Vim
  - [ ] Neovim
  - [ x] Etc.
- OS
  - [x ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [ x] bash
  - [x ] zsh
  - [ ] fish

instead of Russian letters appear strange symbols ( [http://imgur.com/tWBquyr] )
![fzf-rus](https://cloud.githubusercontent.com/assets/3872485/13730778/635a7186-e96a-11e5-9b79-fa38ae47545c.png)
",D1mon,2016-03-15 11:29:56
523,2016-03-13 16:13:21,"fzf supports UTF-8 characters, so this works:

<S_CODE_TOKEN>

<img width=""442"" alt=""screen shot 2016-03-14 at 1 11 48 am"" src=""https://cloud.githubusercontent.com/assets/700826/13729836/d8ea44a0-e981-11e5-87a5-ad99a0f604a2.png"">

Are you running the latest version of fzf?
",junegunn,2016-03-15 11:29:56
523,2016-03-13 19:16:40,"yes. 0.11.4
echo ""АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"" | fzf
result: ![fzf-rus1](https://cloud.githubusercontent.com/assets/3872485/13730774/35d6f64e-e96a-11e5-9e2b-085147fc07c9.png)
",D1mon,2016-03-15 11:29:56
523,2016-03-14 00:10:04,"1. Did you download the binary using install script, or did you build it yourself?
2. What is the value of `$LANG`?
",junegunn,2016-03-15 11:29:56
523,2016-03-14 16:21:31,"1. Using git (recommended)
2. ru_RU.UTF-8
",D1mon,2016-03-15 11:29:56
523,2016-03-15 02:01:08,"Try this:

<S_CODE_TOKEN>
",junegunn,2016-03-15 11:29:56
523,2016-03-15 08:03:09,"did not help
",D1mon,2016-03-15 11:29:56
523,2016-03-15 11:05:09,"Output of `uname -sm`?
32-bit binaries can have the problem as they are currently not statically linked to libncursesw. But I can fix that.
",junegunn,2016-03-15 11:29:56
523,2016-03-15 11:10:44,"> Linux i686
",D1mon,2016-03-15 11:29:56
523,2016-03-15 11:24:04,"Okay that confirms the problem. I rebuilt the binary and uploaded it. Delete the current binary and rerun the install script and see if it helps.

<S_CODE_TOKEN>
",junegunn,2016-03-15 11:29:56
523,2016-03-15 11:29:56,"Works!!! Thanks!
",D1mon,2016-03-15 11:29:56
522,2016-03-13 09:31:54,"<!-- Check all that apply [x] -->
- Category
  - [x] fzf binary
  - [ ] Key bindings
  - [ ] Completion
  - [ ] Vim
  - [ ] Neovim
  - [ ] Etc.
- OS
  - [ ] Linux
  - [ ] Mac OS X
  - [ ] Windows
  - [ ] Etc.
- Shell
  - [x] bash
  - [x] zsh
  - [ ] fish

<!--
### Before submitting

- Make sure that you have the latest version of fzf
- If you use tmux, make sure $TERM is set to screen or screen-256color
- For more Vim stuff, check out https://github.com/junegunn/fzf.vim

Describe your problem or suggestion from here ...
-->

Hi, I'm getting a 2-second initial delay when invoking `fzf`. However, I won't see this delay if I do `ag -g """" | fzf`. Any idea why this would happen? It seems very strange to me because I have `export FZF_DEFAULT_COMMAND='ag -g """"'` set.

My current hacky workaround in shell is to alias `fzf` to `ag -g """" | fzf`. But this doesn't propagate to `vim` / `nvim`

Let me know if there is any profiling I should do. Thanks!
",felixlaumon,2016-03-15 01:59:52
522,2016-03-13 16:16:30,"- Do you see the delay when you unset `FZF_DEFAULT_COMMAND`?
- Do you still see the delay with `export FZF_DEFAULT_COMMAND='echo hello'`?
- What is the output of `echo $SHELL`?
- What happens when you do `$SHELL -c 'ag -g """"'`?
",junegunn,2016-03-15 01:59:52
522,2016-03-14 14:43:30,"For some reason, the delay seems to have gone away in my terminal today. I didn't do any restart or update at all.

I am using `zsh` (`echo $SHELL` -> `/usr/bin/zsh`) and I can see the same delay when using `$SHELL -c 'ag -g """"'`. It's probably because I have a bunch of plugins to load in from `zgen`.

I did have `set shell=/bin/sh` but neovim seems to call out `zsh` anyway. My current workaround is `let $SHELL='/bin/sh'`. I am using `fzf.vim` BTW.

Anyway it doesn't seem to be a `fzf` issue, so please feel free to close this out. Thanks for the help!
",felixlaumon,2016-03-15 01:59:52
522,2016-03-15 01:59:52,"Yeah, fzf internally uses `$SHELL` since #481. See https://github.com/junegunn/fzf/issues/481#issuecomment-180738655.

Since `$SHELL -c COMMAND` does not load .bashrc or .zshrc, a noticeable delay is usually not expected. You might want to figure out what's causing the delay first.
",junegunn,2016-03-15 01:59:52
522,2016-03-15 02:11:56,"> $SHELL -c COMMAND does not load .bashrc or .zshrc

That's good to know. Thanks for the help again!
",felixlaumon,2016-03-15 01:59:52
521,2016-03-03 21:59:19,"It would be nice if the fish scripts to load the bindings check for the existence of fzf, and if it doesn't exist, not change them.  right now if fzf isn't installed, I get errors if I try to do ctrl+R for instance.

I would say this should be behavior with bash and zsh as well

either `fzf_key_bindings.fish` should check or the insert into `fish_user_key_bindings.fish`. I'm thinking the former is the cleaner way.
",danielb2,2016-03-06 20:41:12
521,2016-03-03 22:09:22,"So in the case of `fzf_key_bindings.fish`

A simple:

<S_CODE_TOKEN>

would do. For example
",danielb2,2016-03-06 20:41:12
521,2016-03-06 05:06:56,"I find the error message `fzf executable not found` in that case very clear. Is it because you want to use the same configuration files on a different machine where you can't install fzf for some reason?
",junegunn,2016-03-06 20:41:12
521,2016-03-06 20:39:26,"that's it
",danielb2,2016-03-06 20:41:12
521,2016-03-06 20:41:12,"<S_CODE_TOKEN>

i just did this instead for myself
",danielb2,2016-03-06 20:41:12
520,2016-03-03 13:30:56,"I've noticed that using FZF commands in NeoVim will mess with the window layout after being closed, especially if there's a location list / quickfix window involved (at the bottom).

Given a window layout of:

<S_CODE_TOKEN>

After opening FZF:

<S_CODE_TOKEN>

After closing FZF:

<S_CODE_TOKEN>

I've tried this with just `nvim -u vimrc.minimal`.

It gets worse on a second invocation, probably because of the `winfixheight` setting of quickfix/location list windows.

It would be nice, if fzf would restore the window layout from before it was invoked.
",blueyed,2016-08-28 10:18:36
520,2016-03-03 13:45:55,"Very similar to https://github.com/junegunn/fzf.vim/issues/42
",netei,2016-08-28 10:18:36
520,2016-03-03 14:07:02,"There is an issue I'm Neovim repo for augmenting window API to support this. Though I guess mkview could be abused somehow...
",justinmk,2016-08-28 10:18:36
520,2016-03-03 20:48:36,"Yeah, this is an issue with vim plugins that create temporary splits.
- `botright 10new`
- `botright new`
- `close`

Unfortunately I can't think of a simple solution to this problem. Suggestions are welcome.
",junegunn,2016-08-28 10:18:36
520,2016-03-03 21:18:05,"Is there a reason `exe (tabpagenr()-1).'tabedit|term ...'` is not the default? That would preserve layout. It also wasn't obvious how to switch to this mode using `g:fzf_layout`. (Note that I suggest `(tabpagenr()-1)` so that closing the tabpage automatically returns to the previous tab without any hassle. vim-fugitive uses this approach for `cvc`.)

IMO https://github.com/neovim/neovim/issues/3933 is the general solution to this problem.
",justinmk,2016-08-28 10:18:36
520,2016-03-03 23:18:07,"@justinmk 
What are you using for `g:fzf_layout` exactly?  I've found `let g:fzf_layout = {}` in your vimrc?! (makes it really not obvious then)
It seems to be a good workaround for now - also providing more space.. ;)
",blueyed,2016-08-28 10:18:36
520,2016-03-03 23:37:07,"@blueyed `let g:fzf_layout = {}` makes fzf use a tab instead of a split (had to dig around the code; not documented). However, it opens in the next tab slot instead of the previous, so it doesn't return to the original tabpage on cancel.
",justinmk,2016-08-28 10:18:36
520,2016-03-04 06:34:38,"Note that `g:fzf_layout` is only used by the commands in fzf.vim project.

https://github.com/junegunn/fzf.vim/blob/master/plugin/fzf.vim#L27-L31

This map is eventually passed to `fzf#run()` function, and it is supposed to contain [down/up/left/right or window attribute](https://github.com/junegunn/fzf#fzfrunoptions). `window` attribute, which only works in neovim unlike the others, holds the ex command to create the terminal window. So what @justinmk suggested above can be done like follows:

<S_CODE_TOKEN>

(There was a bug though, see 3073ca3.)
",junegunn,2016-08-28 10:18:36
520,2016-03-06 04:59:49,"Related: https://github.com/junegunn/fzf/commit/f704b94603f386c7b6458ba358816f52bbad2b36
",junegunn,2016-08-28 10:18:36
520,2016-04-20 10:08:25,"Should the above solution load the searched for and selected file in the split you executed it from?
",CrashyBang,2016-08-28 10:18:36
520,2016-04-26 21:28:26,"@CrashyBang 
You are probably hitting #559 there (`wincmd p` messes things up).
Would be great if you could try #559 and provide feedback there.
",blueyed,2016-08-28 10:18:36
520,2016-05-13 13:43:56,"As a workaround, we could tell users to use tmux instead of terminal mode even inside neovim. I would like to test that, but I don't think that there is an option to force fzf to use tmux inside neovim. Is they one ?
",edi9999,2016-08-28 10:18:36
520,2016-05-24 20:47:09,"@edi9999 I would just note that the terminal mode of neovim and freedom from tmux is one of the main reasons for me using neovim instead of vim.
",azag0,2016-08-28 10:18:36
520,2016-05-24 21:04:20,"~~This commit to Vim (from today) may fix the window layout issue:~~ https://github.com/vim/vim/commit/991dea3ab185fb35e577ab0bdfd443cd4b43ccc6

edit: oops, that's for status height. never mind...
",justinmk,2016-08-28 10:18:36
520,2016-06-17 07:32:37,"You can now prefer to use tmux with the following option : 

`let g:fzf_prefer_tmux = 1`
",edi9999,2016-08-28 10:18:36
520,2016-09-20 22:59:35,"I recently discovered the VimL function `winrestcmd()` which gives an ex command that can be executed to restore window layout for the current tabpage. 

<S_CODE_TOKEN>

There are some limitations (e.g. it won't work if new splits are opened) but I think this would solve the common case. `winrestcmd()` works well for a [""zoom"" mapping](https://github.com/justinmk/config/blob/master/.config/nvim/init.vim#L1013-L1035) I recently hacked up.
",justinmk,2016-08-28 10:18:36
520,2016-09-20 23:01:37,"Derp, I just noticed that https://github.com/junegunn/fzf/commit/f025602841384fb10cc80d37492ec44c2b872860 uses `winrestcmd()`.
",justinmk,2016-08-28 10:18:36
520,2016-09-21 04:08:55,"@justinmk 

> Derp, I just noticed that f025602 uses winrestcmd().

It's a shame that we didn't know about it when the great ctrlp has been using it for like 5 years :)

Incidentally, I also have a zoom mapping. It uses `:tab split`, like Goyo.

<S_CODE_TOKEN>
",junegunn,2016-08-28 10:18:36
519,2016-03-03 07:43:56,"<S_CODE_TOKEN>

typing blah followed by ctrl+r results in the string as in the example above.

<S_CODE_TOKEN>
",danielb2,
519,2016-03-03 19:36:19,"Works for me on OS X and Linux. I don't use fish so my fish config is clean. Maybe you have some config that conflicts with it? How about the other key bindings, ctrl-t and alt-c, do they work?
",junegunn,
519,2016-03-03 20:19:30,"Yeah, looks like tat must be it. I deleted a bunch of my stuff and it seems to work. Thanks. I'll try to figure out the conflicts and reopen if it's an issue on this end
",danielb2,
519,2016-03-03 21:37:20,"OK, FYI, it has issues with my PAGER setting...

`set -gx PAGER ""col -b | vim -R -c 'runtime! macros/less.vim | set ft=man | set nolist' -""`

That's unfortunate because having the PAGER set elsewhere like this is very useful for me (man pages etc)

Is fzf really using the PAGER setting here to do something special?
",danielb2,
518,2016-03-02 17:37:57,"I have a strange issue with combined history text: https://imgur.com/a/XP0Cx

In the screenshots you can see there's some nonsensical commands, and pressing the up arrow clears that line... but this is a very strange issue that keeps happening. Is there a way to fix this?
",landaire,2016-03-02 17:47:35
518,2016-03-02 17:47:35,"Invalid $TERM. See https://github.com/junegunn/fzf#rendering-issues
Also https://github.com/tmux/tmux/blob/master/FAQ#L3-L13
",junegunn,2016-03-02 17:47:35
518,2016-03-02 18:03:25,"Whelp, guess I need to read better. Thanks, I think that fixed it. I had it set to `xterm-256color`.
",landaire,2016-03-02 17:47:35
517,2016-03-02 15:07:57,"### junegunn/fzf now has a Chat Room on Gitter

@junegunn has just created a chat room. You can visit it here: [https://gitter.im/junegunn/fzf](https://gitter.im/junegunn/fzf?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:

[![Gitter](https://badges.gitter.im/junegunn/fzf.svg)](https://gitter.im/junegunn/fzf?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

If my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.
",gitter-badger,2016-03-02 15:08:24
516,2016-03-02 12:17:15,"The fzf completion code is a fairly significant chunk of bash, so I ran it through [shellcheck](https://github.com/koalaman/shellcheck) out of curiosity.

It often spots a lot of non-issues, but there's a few that should probably be addressed.

<S_CODE_TOKEN>
",Jonty,2016-03-02 15:00:09
516,2016-03-02 14:07:30,"Thanks, I'll take a look.
",junegunn,2016-03-02 15:00:09
516,2016-03-02 15:02:13,"Most of the warnings were false positives. But I noticed using `read` instead of `read -r` actually had issues with file paths containing backslashes. Fixed it. Thanks!
",junegunn,2016-03-02 15:00:09
516,2016-10-19 11:56:35,"Note there are some issues in the install script too:

<S_CODE_TOKEN>

(You can run it on http://www.shellcheck.net/ )
",unhammer,2016-03-02 15:00:09
515,2016-03-01 23:57:58,"I think it would be really cool if there was perhaps a Gitter channel, or maybe something else entirely, where other people could share their fzf scripts. Of course there's the wiki here but that doesn't seem ideal for sharing a large script, especially if there are multiple files.

Thoughts?
",DanielFGray,2016-06-01 05:29:58
515,2016-03-02 15:09:11,"I'm not sure if it's going to work out, but anyway created it: https://gitter.im/junegunn/fzf
",junegunn,2016-06-01 05:29:58
514,2016-03-01 15:44:39,"I'm using code sample to switch buffer. It works fine on vim. But not working on neovim.

The switch buffer terminal just got freeze. Sometimes it show the buffer list, when I randomly press the button (like up then right), but other times it just freeze. 

I have read issue #21, #426 and #216 but still not understand it. Any clue?

For reference, here is what I have on my config:

<S_CODE_TOKEN>

And my full config file https://gist.github.com/rahmatawaludin/89521671393a640d187f
",rawaludin,2016-03-01 15:50:08
514,2016-03-01 15:50:08,"Never mind. I try junegunn/fzf.vim and the buffer list work well.. :+1: 
",rawaludin,2016-03-01 15:50:08
513,2016-03-01 14:47:00,"Whenever you search for a string and it is not visible, the view scrolls to the right.

The problem is that the string is at the right of the screen, so you don't see what is after that string in your entries.

For example : 

<S_CODE_TOKEN>

And then search for ""foobar"". 

![fzf_right_search](https://cloud.githubusercontent.com/assets/13066384/13430307/ccd53f42-dfc4-11e5-8878-6c5660511e84.PNG)

I propose to automatically center the screen when the part of the matched string is not in the base screen.

What do you think ?
",netei,2016-03-01 18:16:57
513,2016-03-01 17:09:01,"Yeah, it's something I have also wanted from time to time. Center alignment feels a bit too radical, I would rather implement something like `&sidescrolloff` in Vim.

<S_CODE_TOKEN>
",junegunn,2016-03-01 18:16:57
513,2016-03-01 17:25:14,"Like in Vim, setting `sideScrollOff` to a very large value will cause the text to be displayed on the center of the screen, which means it makes sense to make it configurable.
",junegunn,2016-03-01 18:16:57
513,2016-03-01 18:17:29,"Added `--hscroll-off` option. Default is 10. Try it and let me know what you think!
",junegunn,2016-03-01 18:16:57
513,2016-03-02 08:08:34,"Works well ! Thanks !
",netei,2016-03-01 18:16:57
512,2016-02-28 03:49:24,"Was unsure how to title this.. but here's the issue I have:

<S_CODE_TOKEN>

works as expected. And so does

<S_CODE_TOKEN>

However, combining the two:

<S_CODE_TOKEN>

breaks the output, and prints the first column from `apt-cache show` rather than the selection from fzf. I'm honestly not sure if this is an issue with the shell or fzf, but is there a fix for this? I can do for example

<S_CODE_TOKEN>

but this then breaks reading input to `apt install` when asked `Do you want to continue? [Y/n]`.
",DanielFGray,2016-03-01 23:41:59
512,2016-02-28 06:06:29,"Hmm, this is an interesting problem with `execute` that I have overlooked.

<S_CODE_TOKEN>

Pressing <kbd>x</kbd><kbd>x</kbd><kbd>x</kbd><kbd>x</kbd><kbd>up</kbd><kbd>enter</kbd> will give:

<S_CODE_TOKEN>

Because the output of each `execute` invocation is also passed to awk. If you only want the selection from fzf, you'll need to filter the output yourself. I can imagine a few ways to do it, but since you're already using awk, `END` block will do the trick.

<S_CODE_TOKEN>

Does this answer your question?
",junegunn,2016-03-01 23:41:59
512,2016-03-01 05:30:29,"> Does this answer your question?

To be honest, not really :disappointed:

I have a script that's basically a fancier version of `apt-cache search '' | fzf --multi | awk '{print $1}' | xargs -I% sudo apt install %` [1] and I would really love to add the `--bind..apt-cache show..` functionality to it, but as far as I can tell it seems like I can't..

Unless you can think of a way to have `awk` distinguish the output from `fzf --multi` rather than `less`..

[1] full script is [here](https://gist.github.com/DanielFGray/c23ecf3c2e2bfd59abea/), if you like. It also tries to work with Arch (and the AUR) and colorize the package list..
",DanielFGray,2016-03-01 23:41:59
512,2016-03-01 07:24:58,"I don't think there's something fzf can do in that case. You'll have to find a way not to use stdout. I didn't read your script, but maybe you can use stderr instead?

<S_CODE_TOKEN>
",junegunn,2016-03-01 23:41:59
512,2016-03-01 08:01:48,"@DanielFGray You could do the following :

Sorry this isn't what you expect, I've made a mistake.

<S_CODE_TOKEN>
",netei,2016-03-01 23:41:59
512,2016-03-01 08:25:45,"The real problem is that you can't both have interactive commands inside the --bind, and redirect the output of fzf (because the interactive commands are then also redirected to the output of fzf).

You could do the following 

<S_CODE_TOKEN>

The killall part is a big hack, I don't know exactly how I could close fzf in that case.

An other option is to use tmux, and to run the interactive commands in an other pane
",netei,2016-03-01 23:41:59
512,2016-03-01 08:39:49,"I think we can use alternate screen here:

<S_CODE_TOKEN>

(I wasn't familiar with the concept, it was suggested by @D630 in #495)
",junegunn,2016-03-01 23:41:59
512,2016-03-01 23:38:58,"`apt-cache search '' | sort | fzf  --bind ""Ctrl-X:execute: tput smcup; apt-cache show \$(awk '{print $1}' <<< {}) | less; tput rmcup""  --multi | awk '{print $1}'`

doesn't seem to help much, unless I'm doing that wrong.. the other approach I had was 

`fzf --multi --bind ""ctrl-x:execute:apt-cache show \$(awk '{print \$1}' <<< {}) | less"" --bind ""return:execute: sudo apt-get install \$(awk '{print \$1}' <<< {})"" < <(apt-cache search '')`

but then apt-get aborts as soon as it prompts `Do you want to continue? [Y/n]`.. I could force the install with `apt-get -y install` but that's not ideal at all

I suppose I could fiddle with the `--expect` switch in fzf, but I was hoping to avoid re-building the list each time.. though I guess at this point it might be the only solution.

Looking for `$TMUX` and running the install in another pane, might not be a bad idea either, I'll give that a go, thanks @netei  
",DanielFGray,2016-03-01 23:41:59
512,2016-03-02 07:54:50,"@DanielFGray Can you also try the following one?

<S_CODE_TOKEN>
",D630,2016-03-01 23:41:59
512,2016-03-02 09:33:09,"What is this sorcery???

The parameter expansions I understand (and don't know why I didn't consider before), but I'm so confused on what about this makes it work
",DanielFGray,2016-03-01 23:41:59
512,2016-03-02 15:55:48,"The sorcery is `</dev/tty` :)

By the way, you can put your bash code in a function atttributed as an export:

<S_CODE_TOKEN>

And then:

<S_CODE_TOKEN>
",D630,2016-03-01 23:41:59
511,2016-02-26 14:02:32,"Hi,

Using the latest version from git here.
I started fzf and `Ctrl-c`ed it and the exit status (`echo $?`) was 130 not 1 as stated in the manual page

Cheers
",kurkale6ka,2016-02-26 14:38:16
511,2016-02-26 14:21:54,"Oh, 130 is right, but I forgot to update the man page.

https://github.com/junegunn/fzf/blob/0.11.3/src/constants.go#L53-L56
",junegunn,2016-02-26 14:38:16
510,2016-02-26 02:17:46,"Installed both fzf and fzf.vim on a friend's device using vim-plug. fzf is not able to find any files. The list of files is always 0/0. Tried from both shell and vim, same result. Tried different directories, same result.

Opening Tags from inside vim works. It shows the list of tags from ctags file and I'm able to search through them.

What can be wrong here?
",ronakg,2016-02-26 19:37:23
510,2016-02-26 05:08:32,"When `$FZF_DEFAULT_COMMAND` is not set, fzf uses find command (and sed) to list the files. Check if this command works as expected:

<S_CODE_TOKEN>
",junegunn,2016-02-26 19:37:23
510,2016-02-26 05:26:35,"`FZF_DEFAULT_COMMAND` is set in bashrc like following.

`export FZF_DEFAULT_COMMAND='if [ -f cscope.files ]; then cat cscope.files; else find ./ -type f ; fi'
`

I tried your command too, it works. 

Is there any debugging that can be enabled to collect more information?
",ronakg,2016-02-26 19:37:23
510,2016-02-26 05:28:42,"So, does it work when you unset the variable?
Also check if `$SHELL -c ""$FZF_DEFAULT_COMMAND""` works.
",junegunn,2016-02-26 19:37:23
510,2016-02-26 19:37:23,"Turns out `$SHELL` was defined to `/bin/csh` instead of `/bin/bash`. I fixed that and everything's working fine.

Thanks.
",ronakg,2016-02-26 19:37:23
510,2017-03-11 00:03:14,"Just wanted to stop by to say the `$SHELL -c ""$FZF_DEFAULT_COMMAND""` helped me debug this as well. My FZF_DEFAULT_COMMAND was set up to use [ripgrep](https://github.com/BurntSushi/ripgrep) but I was passing in an invalid argument.

My FZF_DEFAULT_COMMAND was set up as:

`export FZF_DEFAULT_COMMAND='rg --files --hidden --smartcase --follow --glob ""!.git/*""'`

Which produced this following error:

    error: Found argument '--smartcase' which wasn't expected, or isn't valid in this context
	    Did you mean --smart-case?

Changing it to use the correct `--smart-case` argument fixed the issue.",LeonardMH,2016-02-26 19:37:23
509,2016-02-24 21:04:17,"I hope this hasn't been discussed previously. There seem to be all the adequate and required files to provide a Debian package for your great tool. Are you considering providing an official deb (or rpm, or both) package ? Thanks !
",eplanet,
509,2016-02-25 14:32:57,"Why not, I guess, but I have no prior experience on that. If anyone's interested in contributing, I would be happy to help.
",junegunn,
509,2016-02-25 21:17:03,"I'm indeed interested for contributing to such a cool task. I actually happen to already have packaged fzf for private usage. Even though it is not yet compliant with all the Debian rules (that I'm aware of), I sure would love to become an official maintainer.
I'll keep you in touch with the proceedings.
There's an ITP (Intent To Package) for fzf that was filed in april 2015 : [#783307](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=783307), I'll get in touch with the guy to dig further.
",eplanet,
509,2016-03-22 03:36:16,"In case this is of interest, there is an official [Arch Linux](https://www.archlinux.org/packages/community/i686/fzf/) that you might be able to copy from.
",svenstaro,
509,2016-03-22 06:36:14,"Very interesting. I'll definitely have a look at this package. Arch Linux is always ahead... :-)

By the way there has been no activity on the debian mailing list since last month.
",eplanet,
509,2017-01-21 21:30:52,Any news about a debian package?,rumpelsepp,
509,2017-01-21 21:41:18,"No news I'm afraid. It was a bit of a pain to get help, and unfortunately I gave up since the tool needs to interact with user home and bashrc, which is, afaik, forbidden by debian packaging rules. I cannot make progress without help from Debian maintainers. I'll ask for help at FOSDEM!

If you got skills in that field, I'm still interested!",eplanet,
509,2017-01-22 04:37:31,"Packaging on any platform will be easier once I drop ncurses dependency. If everything goes okay, it will be done in the very next version.",junegunn,
508,2016-02-23 11:06:53,"Hi, I currently have an issue preventing `fzf` to read my history:

<S_CODE_TOKEN>

I might add I'm within a tmux sessions. For now I didn't try to reboot or detach the session.
",fpietka,2016-02-23 15:47:19
508,2016-02-23 15:47:19,"It's irrelevant to fzf. Check the output of `lsof` and clean up processes with many open files. Or simply reboot.
",junegunn,2016-02-23 15:47:19
508,2016-02-23 20:13:27,"I'll give more information here, just in case someone step on it.

lsof isn't alarming, also I can still open many files, create new tabs on chrome, all that without any problem.
So I tried something. `__fzf_history` is using `__fzf_cmd` which is giving me `fzf-tmux -d40%` (I may add I got the same outside of a tmux session).
So I tried executing the following:
`history | fzf-tmux -d40% +s --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r`
It gave me the error within the tmux session, but outside of tmux it is working fine.

Then I tried the following which is working fine, even inside a tmux session:
`history | fzf +s --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r`

So I tried to open new panes, and in fact I had just one pane left to create until tmux gave me the `too many files open` error itself.

I currently have 38 windows in tmux. It seems like a lot, but also isn't that much.
Anyway I'll keep investigating on this tmux issue.

Thanks for your time.
",fpietka,2016-02-23 15:47:19
507,2016-02-23 10:16:32,"I've read through this https://github.com/junegunn/fzf/wiki/Configuring-FZF-command-(vim) and https://github.com/junegunn/fzf/wiki/Examples-(vim). My goal was to show fzf in bottom of my vim screen (not fullscreen). Here is my setup:

<S_CODE_TOKEN>

fzf always come in fullscreen. Is there any step I miss?
",rawaludin,2016-02-23 15:45:01
507,2016-02-23 15:45:01,"You have to be on tmux, or use neovim for that. fzf is an ncurses program and basically runs in fullscreen. 
",junegunn,2016-02-23 15:45:01
506,2016-02-23 05:53:46,"Fixes ""E706: Variable type mismatch for: ret"" when an exception is caught.
",justinmk,2016-02-23 06:39:53
506,2016-02-23 06:00:31,"CI error seems unrelated:

<S_CODE_TOKEN>
",justinmk,2016-02-23 06:39:53
506,2016-02-23 06:40:43,"Thanks. Some tests are flaky on Travis Ci.
",junegunn,2016-02-23 06:39:53
505,2016-02-23 03:47:07,"Hi,

I've gotten shell support for fish, without the need for a temp directory. My code is here:
https://github.com/jethrokuan/fzf

If someone could look through, I could merge this upstream here.
",jethrokuan,2016-02-24 02:29:29
505,2016-02-23 06:37:17,":+1: Sweet, thanks @jethrokuan
",ghost,2016-02-24 02:29:29
505,2016-02-23 16:19:46,"Similar to #486?
",junegunn,2016-02-24 02:29:29
505,2016-02-23 16:35:50,"@junegunn actually, yes. The PR should work. I also have #477 implemented, but it should go in line with zsh or bash.
",jethrokuan,2016-02-24 02:29:29
505,2016-02-23 17:02:22,"#486 doesn't seem to support multiselect for Ctrl-t.
",jethrokuan,2016-02-24 02:29:29
505,2016-02-23 22:52:29,"I missed #486. @hauleth would you mind having a look at @jethrokuan PR too? It doesn't matter which one gets merged in the end, but it would be sweet if fish users had a more positive experience with this tool out of the box without having to resort to [""plugins""](https://github.com/gretel/pkg-fzf), etc.
",ghost,2016-02-24 02:29:29
505,2016-02-24 02:21:05,"@hauleth I was mistaken. No need to read into an array. #486 is good to go.
",jethrokuan,2016-02-24 02:29:29
505,2016-02-24 02:29:29,"I think we can close this for now, sorry for the noise. missed #486 as well when I did this
",jethrokuan,2016-02-24 02:29:29
505,2016-02-24 02:34:28,"No problem, thank you for your contribution. I was waiting for the answers to my questions in the PR.
",junegunn,2016-02-24 02:29:29
504,2016-02-22 12:07:19,"Is there a way to see timestamps in the history list?

Currently I'm on Ubuntu with oh-my-zsh.
I can see history timestamps with (e.g):

 `$ fc -li -5`

<S_CODE_TOKEN>

Is there a way to get similar output in `fzf`?

Thanks
",eyalev,2016-02-22 19:19:38
504,2016-02-22 19:19:38,"Currently, the command is [hard-coded](https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh#L39-L49), and you'll have to put a modified version of `fzf-history-widget` in your zsh configuration (of course after `source ~/.fzf.zsh`). I'll think about ways to make it configurable without having to duplicate the whole function, but it's tricky since the format affects the implementation.
",junegunn,2016-02-22 19:19:38
503,2016-02-21 18:41:27,"Is there a way to disable the mouse for the fzf finder? I would like to be able to highlight/copy commands from the finder without having to make a selection first.
",yhshin11,2016-02-22 03:48:35
503,2016-02-22 03:48:35,"`--no-mouse`. Add it to `$FZF_DEFAULT_OPTS` if you want it to be the default.
",junegunn,2016-02-22 03:48:35
503,2016-02-22 04:06:41,"Awesome. Thanks!
",yhshin11,2016-02-22 03:48:35
502,2016-02-21 15:56:07,"I could assign to `<leader>p`, but sometimes after selecting file and press `Enter` or `ESC`, weird error show up like this:

![screen shot 2016-02-21 at 10 45 22 pm](https://cloud.githubusercontent.com/assets/1274849/13203579/26a4df56-d8ee-11e5-9ed5-f1009888ef01.png)

<S_CODE_TOKEN>

*if I press `Enter` and this error show up, the file won't open.

What should I do to fix this? Thanks.

P.S: I'm using vim 7.4 and my `<leader>` key is space
",rawaludin,2016-02-23 04:39:23
502,2016-02-22 03:54:08,"I can't investigate the problem if you just describe the condition as ""sometimes"".
Can you provide more information about your configuration and the steps to reproduce the problem?
",junegunn,2016-02-23 04:39:23
502,2016-02-23 03:26:49,"You can close this issue for now. I'll make another issue when I'm able to write steps to reproduce the problem. For now, this just come randomly. For your reference, here is my vimrc https://gist.github.com/rahmatawaludin/313474de5532b68ba25d
",rawaludin,2016-02-23 04:39:23
502,2016-02-23 04:39:23,"Consider adding `set hidden` to your config and see if it helps.

As a side note, you can remove this line as it's automatically done in `plug#end()`.

https://gist.github.com/rahmatawaludin/313474de5532b68ba25d#file-vimrc-L11

Removing it will make your vim start faster.
",junegunn,2016-02-23 04:39:23
502,2016-04-06 21:01:06,"@rahmatawaludin  I'm hitting this problem as well since recent update.
It happens pretty often on random files, don't have repro yet.
Have you figured out a way to workaround it?

Thanks
",undefinedbehavior,2016-02-23 04:39:23
501,2016-02-19 17:22:49,"Before:
![before](https://cloud.githubusercontent.com/assets/717109/13183154/1f1a72f2-d73e-11e5-9383-ae40a6442b87.png)

After:
![after](https://cloud.githubusercontent.com/assets/717109/13183155/1f1b0b90-d73e-11e5-8195-245c12a172b8.png)
",noscript,2016-02-20 00:38:23
501,2016-02-19 22:59:29,"Apparently Travis is experiencing some issues with file system write permissions.

<S_CODE_TOKEN>

I tried to revert the commit and it fails as well. Would you please try to trigger Travis manually?
",noscript,2016-02-20 00:38:23
501,2016-02-20 00:38:23,"Thanks, but I actually like the numbers. See #237. It's a preference thing, so I can understand that you feel otherwise, but there's little reason to suddenly change it after two years. You'll have to override the function in your own configuration.
",junegunn,2016-02-20 00:38:23
501,2016-02-20 00:43:18,"Also note that your version does not handle multi-line commands in history.
",junegunn,2016-02-20 00:38:23
500,2016-02-19 04:12:50,"https://github.com/blog/2111-issue-and-pull-request-templates
https://help.github.com/articles/creating-an-issue-template-for-your-repository/
",junegunn,2016-03-06 02:24:13
499,2016-02-19 04:12:19,"https://help.github.com/articles/creating-an-issue-template-for-your-repository/
",junegunn,2016-02-20 11:18:30
499,2016-02-20 11:10:26,"Duplicate of #500 :)
",nedbat,2016-02-20 11:18:30
499,2016-02-20 11:18:30,"Duh.
",junegunn,2016-02-20 11:18:30
498,2016-02-18 20:06:26,"I'm using the [select buffer](https://github.com/junegunn/fzf/wiki/Examples-%28vim%29#select-buffer) and [narrow ag results](https://github.com/junegunn/fzf/wiki/Examples-%28vim%29#narrow-ag-results-within-vim) code snippets from the wiki. These worked great in nvim up till about a week ago, when I noticed the fzf terminal buffer would open without displaying anything.

Some observations:
- Terminal split opens at the correct size based on the amount of lines that _should_ be displayed.
- About 75% of the time, an extra key press will fix the issue. After this point, fzf works normally until the next time it's opened.
- The other 25% of the time, nvim stays unresponsive after repeated key presses, eventually responding after a 5-10s delay.

I'm currently using NeoVim v0.1.3-128-gf887037. But I rebuild from source every morning.

Happy to provide more debugging info as needed.
",adambiggs,2016-02-22 20:07:26
498,2016-02-19 03:48:10,"Sounds like a regression of Neovim, unless they made some breaking changes. Do you have the same issue when running `:Buffers` and `:Ag` commands from [fzf.vim project](https://github.com/junegunn/fzf.vim)?
",junegunn,2016-02-22 20:07:26
498,2016-02-19 04:08:09,"I just tried the ""select buffer"" example on `NVIM v0.1.3-130-g91254bd` (latest), with 413 buffers in `:ls`, and it works fine. @adambiggs Would you be willing to bisect to find the exact commit of Neovim that causes the issue?
",justinmk,2016-02-22 20:07:26
498,2016-02-22 20:07:23,"Strange... Installing fzf.vim seems to have fixed the issue, even for the previously broken wiki examples. Not sure what caused the original issue, but I'm back in business now.

Thanks for the fzf.vim link @junegunn, I didn't even know about that project!
",adambiggs,2016-02-22 20:07:26
497,2016-02-18 19:44:54,"Added a build target for OpenBSD, and an additional test to avoid make error because `uname -m` returns `amd64` and not `x86_64` under OpenBSD (and build works on `i386` too).
",anaseto,2017-01-23 15:43:08
497,2016-02-18 19:52:14,"There is a failing test on OpenBSD, though. It seems to happen because of a difference of behavior in OpenBSD when accessing files with bad permissions, but I'm not sure about it.

<S_CODE_TOKEN>
",anaseto,2017-01-23 15:43:08
497,2016-02-19 03:56:43,"Thanks. Shouldn't we be changing `GOOS` on OpenBSD instead of adding a new target?
",junegunn,2017-01-23 15:43:08
497,2016-02-19 08:05:33,"Cross-compilation didn't work for me with go on OpenBSD failing with a `go build runtime: openbsd/386 must be bootstrapped using make.bash`. I don't know much about `go`, but it seems that `OpenBSD` version doesn't come with cross-compilation capabilities out of the box (so I needed to compile directly for a i386 machine). And the `build` target depends on `test`, but this was blocking because of one failing test on OpenBSD.
",anaseto,2017-01-23 15:43:08
497,2016-02-20 04:38:19,"I would like to properly fix the issues and release the binaries instead of just adding a target. I'll take a look when I get some time. For now, if you have Go installed on your system, you can simply do `go get github.com/junegunn/fzf/src/fzf`.
",junegunn,2017-01-23 15:43:08
497,2016-02-20 09:16:54,"Fine, thanks. About cross-compiling issues, from what I have read, it
seems due to the fact that I have only go 1.4.2, and some work to get
cross-compilation working seems necesary. I will retry this when I
update to go 1.5 which improves on that.

## 

Yon
",anaseto,2017-01-23 15:43:08
497,2016-10-17 23:16:13,"@anaseto do you plan on submitting this as a port?
",yunake,2017-01-23 15:43:08
497,2016-10-18 06:48:56,"Oh, I haven't really thought about that, I'm not very knowledgeable
about ports and just running -release, but if there's anything I can do
to help, I'll be glad to do it.

And you are certainly right that this would be a better fit for a port
patch. Though, it there is some special support for go code in the ports
makefiles, the patch would be perhaps unnecessary. And as junegunn
pointed out, it can be installed with ""go get"", and as it does not have
any dependencies (outside the standard library), a ""go install"" just
after download in the fzf/src/fzf directory would do the job too and
simplify the process.
",anaseto,2017-01-23 15:43:08
497,2016-10-18 09:48:02,"I don't think there's any special support for Go in ports — at least there
wasn't last time I checked. `go install` is a perfectly valid installation
method for me, I'm not a ports purist, thank you!
",yunake,2017-01-23 15:43:08
496,2016-02-16 09:31:10,"Fixes the following error:

<S_CODE_TOKEN>

While not all distributions ship Go 1.4 (Debian 8, Ubuntu 15.04) yet, this negligible fix makes it possible to build against 1.3.
",noscript,2016-02-16 09:48:39
496,2016-02-16 09:48:48,"I won't be testing the latest source against older versions of Go, so there's no guarantee of backward compatibility in the future. But since this looks harmless and simple, I'll merge it for now. Thanks. 
",junegunn,2016-02-16 09:48:39
495,2016-02-16 02:00:00,"Hi,

How can I use fzf on my terminal's ""alternate screen""?
",D630,2016-06-23 17:03:09
495,2016-02-16 03:48:20,"Sorry, I never use it and have no idea what should be done.
",junegunn,2016-06-23 17:03:09
495,2016-02-16 16:15:46,"Seems to be a curses termcap initialization thing. Less has its -X option to use it, I guess:

<S_CODE_TOKEN>
",D630,2016-06-23 17:03:09
494,2016-02-16 00:42:47,"When trying to invoke any of the completions that are using `_fzf_complete` (e.g. `unset **<TAB>`) the shell locks up. zsh 5.2 on OS X, both zsh and fzf installed with homebrew.

At first I thought it was caused by my local config, but I can trigger the same behaviour by running:

<S_CODE_TOKEN>

Rolling back the changes to zsh version of `_fzf_complete` made in https://github.com/junegunn/fzf/commit/82067463b8263692147d80b6fc909f1d98693d88 (i.e. bringing back `_fzf_feed_fifo`) seems to fix the issue, so I think it might have something to do with the way zsh is passing stdin to command substitution, making `$(cat ...)` block while it's waiting for input. 

I've tried changing `_fzf_complete` to accept the process substitution temporary file directly as an argument, instead of expecting it to be redirected to stdin, which makes it possible to pass it to the subshell:

<S_CODE_TOKEN>

This seems to fix the issue, but breaks compatibility with any existing custom completion functions.
",allait,2016-02-16 03:32:15
494,2016-02-16 03:31:28,"Thank you very much for looking into this. This is my mistake, I should have checked if it worked when it's not using tmux pane (`FZF_TMUX=0`). Like you said, we're going to have to restore the use of fifo, and though I like your suggestion, but I'd rather not break backward compatibility.
",junegunn,2016-02-16 03:32:15
494,2016-02-16 03:33:30,"Pushed the fix and an accompanying test case. Thanks!
",junegunn,2016-02-16 03:32:15
493,2016-02-15 11:58:10,"I don't know why, but fzf takes several seconds to find files in my Rails project's `spec/` folder.

Everything else (models, controllers etc.) works flawlessly. As far as i can see it, this is not related to my project size, since i have the same problem with small apps or fresh Rails installations.

Is there some kind of path or file configuration i'm missing? :sweat_smile: 
",aleks,2016-02-17 11:43:39
493,2016-02-15 15:20:59,"Please provide more information about your environment (OS, shell, relevant config) and the steps to reproduce the issue. fzf doesn't know or care what `spec` is, so it shouldn't behave differently.
",junegunn,2016-02-17 11:43:39
493,2016-02-15 15:48:02,"Thanks for your quick response!

I looked further into this and found out, that if i rename `spec` to `_spec` (so it is above all other directories, based on the a-z sorting), fzf will find it faster. So it seems, like this is just an issue, because fzf will search form top to bottom through the files in my current directory.

My setup: Mac OS X (on an SSD), iTerm2 (same problem with standard Terminal) and zsh. I don't run any other ""file based"" services, that could interfere with fzf.
",aleks,2016-02-17 11:43:39
493,2016-02-15 19:40:18,"<S_CODE_TOKEN>

This is the command fzf internally uses to list the files when no input is fed, check if it runs smoothly. Also try something like `find . | fzf`.
",junegunn,2016-02-17 11:43:39
493,2016-02-17 11:43:39,"I fiddled around with the two commands (added directory excludes and so on), but no differnece. I guess this is a problem with my machine.

I'll close the issue, thanks! :)
",aleks,2016-02-17 11:43:39
493,2016-02-17 12:24:36,"Maybe you have a directory that has lots of files in them, and that would explain why it takes a long time for `find` to find those files ? 

Some kind of /log directory or anything else ? Does the problem appear if you rename `spec` to something like `spuc` ?
",netei,2016-02-17 11:43:39
493,2016-12-08 08:06:36,"Having the same issue, I guess this is no bug, just a configuration issue.",hendricius,2016-02-17 11:43:39
493,2016-12-08 10:03:50,You probably have `$FZF_DEFAULT_COMMAND` set to a command that respects .gitignore.,junegunn,2016-02-17 11:43:39
492,2016-02-14 14:33:55,"From https://github.com/junegunn/fzf.vim/issues/33#issuecomment-167243756:

It might be good to have an option for `fzf` to ignore duplicates (without the list required to be sorted)?!

While the issue itself has been fixed (by not having dupes in the input anymore, which was caused by another plugin), I still think that such an option would be useful to have with `fzf` (e.g. for  https://github.com/junegunn/fzf/issues/49 and whenever you cannot influence the input really).

(There's no default tool for that (`sort -u` changes the order, `uniq` needs it to be sorted), but you could use a awk script like this: https://www.gnu.org/software/gawk/manual/html_node/History-Sorting.html.)

The option should be able to either only keep the first or last occurrence of a duplicated entry.
",blueyed,2016-02-14 15:22:26
492,2016-02-14 15:22:26,"Thanks for the suggestion but I don't think we should as fzf tries to follow the unix philosophy. I know there's no default unix tool for that – which is unfortunate but quite understandable at the same time considering the memory requirement – but it's easy to preprocess the input. The awk example you mentioned should work and this one is in Ruby:

<S_CODE_TOKEN>

> whenever you cannot influence the input really

There really aren't many cases where you can't preprocess the input. The code for `CTRL-R` is just about ten lines or so, so it's feasible to have a modified version of it in one's config file.

> The option should be able to either only keep the first or last occurrence of a duplicated entry.

We already have two options to provide, keep first and keep last. And in case of `CTRL-R`, fzf should ignore the numeric index of each entry so we need yet another option (`--filter-dupe-with-nth=2..`?). Builtin processor will never be as flexible as the external ones, and I'd like fzf to focus on something we can't do with pre- and post-processors.
",junegunn,2016-02-14 15:22:26
492,2016-02-15 08:43:35,"> Builtin processor will never be as flexible as the external ones, and I'd like fzf to focus on something we can't do with pre- and post-processors.

+1 

I personally use (nauniq)[https://github.com/perlancar/perl-App-nauniq/blob/master/bin/nauniq] for removing duplicates
",netei,2016-02-14 15:22:26
492,2016-06-11 15:57:10,"@netei @junegunn is there an example of how to remove duplicates for ctrl-r with fzf? I've seen a couple open issues about it and it'd be a nice thing to have.
",aaronjensen,2016-02-14 15:22:26
491,2016-02-12 13:41:44,"I have created my own log viewer using fzf (which is a really great tool for this job).

However, I have one single issue : I'm using `--tac` to have the latest log line at the bottom, and it creates the problem that the logs ""automatically scroll down"", which is something that is not always wanted.

You can get an idea of what I'm talking about by running 

`while true; do  echo ""$RANDOM"" ; sleep 0.03; done | fzf --tac`

 which will show that the results are automatically scrolling down.

If we had an action that would be 'toggle-auto-scroll', I could bind that action to a key so that users can stop fzf to scroll. 

What do you think of that idea ? Or do you have any other idea that could help me give a solution to my problem ?
",netei,2016-02-17 09:02:50
491,2016-02-12 15:56:26,"`--reverse` option was the first thing that came to my mind, but looks like you do need a way to ""pause"" and ""resume"" to stream, right? Hmm, it's complicated. Technically, when `--tac` is set, fzf does not ""auto-scroll"" the list, but the new entries from the input stream are prepended to the list. So the cursor position and the screen offset stay the same, but it looks like the input stream is flowing through the screen. We'll have to adjust the cursor position and the screen offset dynamically as the list grows, to give the illusion that the stream is ""paused"". I'll see if it can be done without too much effort.
",junegunn,2016-02-17 09:02:50
491,2016-02-12 16:08:17,"> but looks like you do need a way to ""pause"" and ""resume"" to stream, right?

Exactly

>  I'll see if it can be done without too much effort.

Great, thanks for looking into it !
",netei,2016-02-17 09:02:50
491,2016-02-12 16:21:02,"Okay, it wasn't too hard. This is basically it.

https://gist.github.com/junegunn/b047f0b98b794769592e
- Do you think `toggle-flow` is the right name? It is only used when `--tac` is set.
- We need a way to show if the stream is ""paused"" or not. The above patch simply appends `/F` to the info line if the stream is ""flowing"", like we append `/S` when `toggle-sort` is used. Any suggestions?
",junegunn,2016-02-17 09:02:50
491,2016-02-12 17:47:42,"I like the name of `toggle-flow`.

`toggle-*` is already the ""standard"" for fzf

Other nouns that came into my head : 
- `toggle-follow` like tail --follow (known as -f)
- `toggle-stream` but I don't like it that much and have never seen that

`/F` makes perfect sense since `/S` is the first letter uppercased of `sort` , and `/F` of `follow`

I like `follow` because that's what I'm used to with tail, however `flow` is ok too.
",edi9999,2016-02-17 09:02:50
491,2016-02-12 18:10:19,":+1: to `toggle-follow`. Maybe ""flow"" could be confused with the concept of terminal ""reflow"".
",justinmk,2016-02-17 09:02:50
491,2016-02-13 04:06:03,"`toggle-follow` sounds good. Thanks.
",junegunn,2016-02-17 09:02:50
491,2016-02-15 08:21:41,"I've tested it and I'm not sure that this option is clear enough right now to be implemented.

The problem is that whenever you start searching, the option will not have any more effect (eg the entries are still flowing).

I think maybe I should be implementing this outside of fzf (by stopping the stream from the source)
",netei,2016-02-17 09:02:50
491,2016-02-15 21:01:36,"> The problem is that whenever you start searching, the option will not have any more effect (eg the entries are still flowing).

You mean until the screen is completely filled? It's not something we can't fix. The updated patch in the gist will make the stream stop in that case as well.
",junegunn,2016-02-17 09:02:50
491,2016-02-17 08:17:08,"Your updated diff indeed kind of corrects that problem.

But the issue is that when I start filtering my logs, if I make a typo and no lines of the input match (for example if I type `conusmer` instead of `consumer`), even after correcting the error, I only got one line.

What I really want is a way to say : ""I'm not interested in new lines, and I would like to be able to see all logs until the line that I'm currently seeing, and be able to filter down those lines and only those""

I could do that with `bind`, by opening a sub-fzf, like this : 

`loggetter | tee foo | fzf --bind ""f1:execute(fzf < foo)""`

This way, whenever I press `F1`, A fzf will open with all logs up to until I've pressed `F1`, and newer logs won't appear anymore.

I really think that I should be implementing this on my side.

If we had to implement it inside fzf, I think it would make more sense (for my use case), to not change indexes manually, but rather have some sort of `queuedLines` where we would push stdin once we have toggled follow to off. If we then toggle follow on, the `lines` and `queuedLines` would be merged into `lines`.
",netei,2016-02-17 09:02:50
491,2016-02-17 09:02:50,"> I only got one line.

Yeah, that's because I removed [offset adjustment](https://gist.github.com/junegunn/b047f0b98b794769592e#file-toggle-flow-patch-L683-L687) to address the issue raised in your previous comment. I can see that it can be very confusing.

> lines and queuedLines would be merged

The patch becomes non-trivial then. I'll just mark this issue ""wontfix"" and only apply the refactoring made in the patch.
",junegunn,2016-02-17 09:02:50
491,2016-02-17 12:27:28,"`loggetter | tee foo | fzf --bind ""f1:execute(fzf < foo)""` really works well for my usecase, so thanks anyway for taking the time.
",netei,2016-02-17 09:02:50
491,2016-02-17 12:48:38,"That's clever.
",junegunn,2016-02-17 09:02:50
490,2016-02-12 03:04:05,"This one may be a bug with readline/bash itself, but I noticed after using fzf keybindings, which make use of redraw-current-line, that my prompt doubled up a lot.

You can reproduce this without fzf, with just bash by doing this:

<S_CODE_TOKEN>

Your prompt should now show

<S_CODE_TOKEN>

After pushing ESC-r a few times (or meta-r), then it shows

<S_CODE_TOKEN>

This is showing that the first line is overlapping with the last line. I say last, as you could set it to PS1=""first\nsecond\nthird"" and you get

<S_CODE_TOKEN>

Let me know if I should just file this with bash/readline directly, or whether you want it here to find a way around it?

Cheers,

Hugh
",hughdavenport,
490,2016-02-12 03:45:47,"Interesting. Thanks for the heads up. Do you think we can find a workaround?
",junegunn,
490,2016-02-12 03:55:40,"Haha, I'm googling this as we speak. I don't really want to go back to a single line prompt after getting used to my multi line one for so long... Though the extra new lines (my first line of my PS1 is just a blank) do take up a lot of vertical space.

Will let you know if I find a workaround, otherwise probably need to send this to bash/readline.

Not sure if similar behaviour happens on the other shells.

Cheers,

Hugh
",hughdavenport,
490,2016-02-12 06:00:28,"Sent this to bash:

<S_CODE_TOKEN>
",hughdavenport,
490,2016-02-12 07:12:11,"Nice :+1:
",junegunn,
490,2016-02-15 17:31:21,"Possibly related: using C-R in bash when _not_ on the first (visible) line and pushing Esc right after that causes the bash prompt to repaint one line up, and leave an artifact on the bottom line.

<S_CODE_TOKEN>

(bash version 4.3.42, libreadline5 5.2)
",himdel,
490,2016-02-15 21:05:42,"Got a reply from chat (bug maintainer).

<S_CODE_TOKEN>

I replied:

<S_CODE_TOKEN>

@himdel hmm, I don't see that on same version when I use unmodified fzf bindings. I get the $(**fzf_history**) line removed and stay on the same line. Was that when you just did a brand new shell and pushed enter once then ctrl-r then esc? Or would you need more to reproduce it?

Cheers,

Hugh
",hughdavenport,
490,2016-02-15 21:24:14,"Chets reply:

<S_CODE_TOKEN>

So this is something that will come eventually. I haven't figured out a workaround short of patching bash sadly...
",hughdavenport,
490,2016-02-16 12:29:07,"@hughdavenport yes, I open a brand new bash, push enter, push ctrl+r, push escape .. and I get that output.

In case it's locale-dependent, I use `en_US.UTF-8`, and my terminal is `rxvt-unicode`. But trying different terminals, it seems `xterm` and `lxterm` are not affected, but `aterm` and `rxvt-unicode` are.
",himdel,
489,2016-02-12 02:31:49,"Hey,

This PR is a set of fixes to make this act more like bash does for CTRL-R mode. I start by adding variable names to all the readline commands, just to make it easier to read. Then I set some directional keybindings while in CTRL-R mode, and then also allow CTRL-g to abort unchanged. This changed the way the history replacement worked, and now uses $READLINE_LINE instead of shell expansion of $(**fzf_history**). Finally I added the CTRL-o mode, which lets you cycle through a bunch of commands. This also required overloading the up and down keys.

See commit messages for further details of each thing. Let me know if there is anything you would like me to change.

Cheers,

Hugh
",hughdavenport,
489,2016-02-12 02:36:50,"I've noticed for the ctrl-o mode, ctrl-c doesn't stop it, and I can't seem to catch that binding...

edit: it is under stty as intr. I should also note that ctrl-o is actually bound to discard in stty on mac os x.
",hughdavenport,
489,2016-02-12 02:54:07,"Fixed the CTRL-c by adding a trap, see latest commit.
",hughdavenport,
489,2016-02-12 03:43:48,"Thanks, I'll review the changes thoroughly when I get some time.

Some questions:
- Can we do the same for zsh and fish?
- Can we add test cases for the new behaviors?
- Looks like you're replacing `CTRL-R` binding which used to toggle sort. Even if we can't apply all the changes here to zsh and fish, this should at least be consistently applied, and It should be properly documented. 
- I do not wish to lose `toggle-sort` as I use it quite often. We should consider assigning another key for that, e.g. TAB.
",junegunn,
489,2016-02-12 03:53:40,"Hey,
1. Yep, same for zsh and fish should be possible, though I am not as experienced in what features they have, so any patches I would do would be limited to just the variable names.
2. Sure thing, can you point me to some example test cases and I'll make some for the new stuff.
3. and 4. Yep, I would agree with consistency, which is why I replaced the CTRL-R to be consistent with what bash users would expect. I didn't realise at the time that this also broke consistency with the other shells. I would agree that another consistent keybinding should be used for that, and TAB could be the winner. It looks like it just aborts the search in normal bash, so shouldn't be getting in the way of other users habits (as it isn't documented to do so in bash/readline). Speaking of documentation, I agree, I can push another patch once we agree on what keybinding should be used for search.

Thanks for the quick response. Take your time reviewing, took me around a day to write and test so it is a bit complex!

Cheers,

Hugh
",hughdavenport,
489,2016-02-12 04:57:35,"To run tests, you need Ruby and you have to be on tmux:

<S_CODE_TOKEN>

I just noticed that [`test_ctrl_r`](https://github.com/junegunn/fzf/blob/master/test/test_go.rb#L1222-L1238) currently does not cover `toggle-sort` (that's why this PR passed Travis CI). Test cases under `TestShell` are shared among bash, zsh, and fish. A bash-only test should be added under `TestBash`.
",junegunn,
489,2016-02-12 04:59:14,"Cool, will do that this weekend hopefully :)
",hughdavenport,
489,2016-02-12 16:40:02,"I applied your patch and noticed that it has some issues on bash 3. Unfortunately, the current OS X ships with bash 3 even to this day, and we're forced to stick with that version :(
If your patch requires bash 4, I can't merge it. Please check before putting more effort into this PR. Not that it's impossible to upgrade bash on OS X, but I really don't want to require that when installing fzf. Maybe we'll have to maintain an optional, separate repository that only provides shell extensions that are more advanced than the ones in the main repo for the time being.
",junegunn,
489,2016-02-13 03:01:10,"Hmm ok, will see what happens on bash 3 and get that working as well.
",hughdavenport,
489,2016-11-30 18:07:30,"Well of those of us bash users, I think the sum of non-OS X + those on OS X who update their bash are more than those OS X bashers who stay on bash 3 (which avid terminal user does that?). Just food for though.

Alternatively this (and related ""advanced bash bindings"" could be a non-default `advanced-bindings.bash` that gets sourced if we have bash >= 4. By the way fzf bash keybindings have been broken on my linux box (with modern bash) since forever ;)",antoniomo,
489,2016-12-01 16:49:39,"@antoniomo 

> By the way fzf bash keybindings have been broken on my linux box (with modern bash) since forever

Do you know why?",junegunn,
489,2016-12-02 07:48:51,"Hi! Sorry my comment was so unhelpful. This fixed it: https://github.com/junegunn/fzf/issues/668
However I wasn't aware because I haven't upgraded in a while (precisely because I had some customization on that file), sorry. All good now!",antoniomo,
488,2016-02-11 22:50:23,"If you do `man fzf > /dev/null`, you'll get the following output

`R' is a string (producing the registered sign), not a macro.`
`R' is a string (producing the registered sign), not a macro.`
`R' is a string (producing the registered sign), not a macro.`
`R' is a string (producing the registered sign), not a macro.`
`R' is a string (producing the registered sign), not a macro.`
`R' is a string (producing the registered sign), not a macro.`

Removing these `.R` macros has no effect on the rendering of the page but
gets rid of the error.
",nhooyr,2016-02-12 04:29:39
488,2016-02-12 03:47:33,"Thanks, I didn't know that. However, AFAICT, the line does affect the rendering of the page. I used it to add an empty line. Maybe there's a proper way to do that?
",junegunn,2016-02-12 04:29:39
488,2016-02-12 04:03:35,"@junegunn yup, you're right. never mind. I just googled the error, found some RHEL bug report about how its useless.

Anyways an empty line seems to work fine but I don't know if its the proper way.
",nhooyr,2016-02-12 04:29:39
488,2016-02-12 04:29:46,"Merged, thanks.
",junegunn,2016-02-12 04:29:39
487,2016-02-11 22:45:21,"Say, I want to ignore most available keys in fzf without writing `bind=key:ignore` many times. In this case, it would be nice to have an option, which ""flushes"" all bindings by preventing fzf's initialization of its default key bindings  
",D630,2016-06-23 16:58:49
487,2016-02-12 03:36:45,"I see, but can you tell me why you want to do that? The default bindings are mostly basic readline stuff, and I don't see why you want to clear them.
",junegunn,2016-06-23 16:58:49
487,2016-02-12 13:10:41,"An example is [this script](https://github.com/D630/fzf-fs/tree/0.2.3) and this [function](https://github.com/D630/fzf-fs/blob/0.2.3/fzf-fs#L1540) resp.

If you consider it to be needless, no problem :)
",D630,2016-06-23 16:58:49
487,2016-02-12 15:42:36,"Whoa, that is impressive but to be honest looks a bit too radical to my taste. Are you sure fzf is the right tool for what you're trying to achieve here? You're transforming it into something else.
",junegunn,2016-06-23 16:58:49
487,2016-02-12 16:54:09,"Hehe, it's just a while loop + many env vars + ls + fzf with different options in different functions. That is, fzf-fs is a simple connection of different fzfs, not a transformation, I guess. Stupid shell scripting! :)
",D630,2016-06-23 16:58:49
487,2016-02-13 07:34:57,"https://github.com/D630/fzf-fs/blob/0.2.3/fzf-fs#L1505-L1525

You're effectively disabling the core function of fzf by remapping every possible key stroke – let's put aside the fact that unicode characters are not covered this way – so what we're left with is a really simple ncurses-based line selector, which is not what fzf, ""fuzzy finder"", was designed to be. It's a very interesting application, but I'm not sure if we should add more options for the case. I'll think about it.
",junegunn,2016-06-23 16:58:49
487,2016-06-23 16:58:49,"Closing as wontfix.
",junegunn,2016-06-23 16:58:49
486,2016-02-10 14:25:16,"It now uses `read` instead of temporary files.
",hauleth,2016-12-14 06:41:48
486,2016-02-10 15:19:03,"Tests on Travis has been flaky lately, let's see if we can go green with a few retries.
",junegunn,2016-12-14 06:41:48
486,2016-02-10 15:26:28,"There's a failing test case. Check if `ruby test/test_go.rb` on tmux passes with your patch.

<S_CODE_TOKEN>

Questions:
- Fish version requirement? Does the new code run on slightly older versions of fish?
- Your patch removes [a recent fix](https://github.com/junegunn/fzf/commit/23244bb41087f4f833c33219bba7a7213710ab20) that is supposed to reduce the probability of intermittent errors on CTRL-T. It's a voodoo hack that I don't fully understand, but it did seem to help. Can you check if the new code doesn't suffer the problem?
",junegunn,2016-12-14 06:41:48
486,2016-02-24 02:36:05,"> **@junegunn**: Does the new code run on slightly older versions of fish?

 No. The new code uses the read builtin `-a` option which is only available in fish ^2.2.0. Still, you should merge as soon as tests pass since fish users are rarely locked to a particular version anyway.

Source
- https://fishshell.com/release_notes.html
- https://github.com/kballard/fish-shell/commit/973dd6ffbdc189f22b634de0d684e92a9c160c9d
",ghost,2016-12-14 06:41:48
486,2016-02-24 03:15:55,"@bucaran 

> fish users are rarely locked to a particular version anyway

You're probably right. But does using temp files really affect the user experience? I know the new method is cleaner and theoretically more efficient, but if it doesn't make a noticeable difference from the user's point of view, I'm not sure if it's a good call to ignore some users who have to run older versions of fish.
",junegunn,2016-12-14 06:41:48
486,2016-02-24 03:23:13,"Just my opinion as I don't have any data to backup my claim. I am sure a solution without temp files will be faster, especially in machines that do not have flash storage.

Different from other shells, fish is rarely or _never_ installed by default anywhere, so users are never constrained to use an outdated version. In other words, it is very likely folks still using fish 2.1.2 (the one before 2.2.0) simply forgot or didn't realize there was a new version.

FWIW, if users with an older fish suddenly run into problems because their `fzf` breaks, assuming this PR gets merged, then we can recommend they upgrade fish, which helps the fish community move forward as `2.2.0` introduced several features which are difficult or impossible to replicate with `2.1.2`.
",ghost,2016-12-14 06:41:48
486,2016-02-24 03:37:30,">  I am sure a solution without temp files will be faster, especially in machines that do not have flash storage.

Actually I'm not sure about that since Kernel does not flush to disk immediately.

> so users are never constrained to use an outdated version.

`apt-get` on ubuntu installs an old fish. But I know there's an easy workaround (PPA) so I guess the point is moot. How about if we print out a warning message when `key-bindings.fish` is loaded but the version requirement is not met? So that the users know what's going on.
",junegunn,2016-12-14 06:41:48
486,2016-02-24 03:52:17,"> How about if we print out a warning message when key-bindings.fish is loaded but the version requirement is not met?

Can be done. Right there in `key-bindings.fish` actually. 

<S_CODE_TOKEN>
",ghost,2016-12-14 06:41:48
486,2016-02-24 03:59:59,"Yeah, we should use a better operator than `!=` though. And the message should make it clear about the version requirement, e.g. `fzf: fish 2.2.0 or above is required`.
",junegunn,2016-12-14 06:41:48
486,2016-02-24 04:18:05,"@junegunn We can write just a slightly more complex check, but anything more complex than this would involve forking `perl` or `awk`, which we want to avoid since `key_bindings` are loaded the start of the shell.

<S_CODE_TOKEN>

No need to worry about versions prior to 2.0 since I don't even know how to get one and if the ""$version"" is not a number, but a commit-ish string, the user is using their own build, probably > 2.2.0 anyway.
",ghost,2016-12-14 06:41:48
486,2016-02-24 15:24:47,"I just found an edge case where files with `&` in their name don't get escaped properly. Perhaps the fish way is to use quotes to prevent these issues in the first place. Thoughts? @bucaran 
",jethrokuan,2016-12-14 06:41:48
486,2016-02-25 00:12:13,"@jethrokuan Can you provide a reproducible code snippet?
",ghost,2016-12-14 06:41:48
486,2016-02-25 04:35:08,"@bucaran : `touch ""1 & 2.md""`

Ctrl-t -> select ""1 & 2.md"" ->  `~/Source  1\ &\ 2.md`

The `&` is not escaped
",jethrokuan,2016-12-14 06:41:48
486,2016-10-19 11:07:54,"There is no need for using `read -a`: it is actually not what you want. A `while read` loop will do the job.

Is there any plan regarding the fish binding overhaul?
I've rewritten all of them to get rid of the TMP file, escape characters properly and improve on the code a bit, let me know if I should push my changes.
",Ambrevar,2016-12-14 06:41:48
486,2016-12-14 06:41:48,Closed via #759,junegunn,2016-12-14 06:41:48
485,2016-02-10 13:04:01,"When I call `fzf-tmux` there is strange first line input:

<S_CODE_TOKEN>

Any idea what can be wrong? I can live with that, but it is kind of irritating.
",hauleth,2016-02-10 18:13:20
485,2016-02-10 13:12:42,"I never had the problem. Please provide the exact steps to reproduce the issue.
",junegunn,2016-02-10 18:13:20
485,2016-02-10 14:24:09,"I am not sure what is the issue. My TMux version is `tmux 2.1`.

It seems that this is issue with `fzf-tmux` itself as `ag --nocolor -g """" | fzf-tmux` works correctly.
",hauleth,2016-02-10 18:13:20
485,2016-02-10 15:42:37,"I also use tmux 2.1 and standalone `fzf-tmux` works nicely. Do you have `FZF_DEFAULT_COMMAND` set? What about `FZF_DEFAULT_COMMAND= fzf-tmux`, or `FZF_DEFAULT_COMMAND=""seq 100"" fzf-tmux`?
",junegunn,2016-02-10 18:13:20
485,2016-02-10 17:33:51,"All of them returns that strange line. What can be seen is that only first entry is mangled. What is stranger currently it returns valid entry when select the mangled one, so:

<S_CODE_TOKEN>

I am using Fish 2.2.0 with TMux 2.1.
",hauleth,2016-02-10 18:13:20
485,2016-02-10 18:07:43,"It seems that `fzf` is also affected.
",hauleth,2016-02-10 18:13:20
485,2016-02-10 18:13:20,"Seems that this is problem with base16 thoughtbot/vim-rspec#91.

Closing as non related.
",hauleth,2016-02-10 18:13:20
485,2016-02-10 18:20:43,"This solves problem: chriskempson/base16-shell#48
",hauleth,2016-02-10 18:13:20
484,2016-02-07 02:05:59,"I noticed that `**` completion triggers don't work in `fish`. Would be awesome if they did!
",nh2,2016-12-14 06:42:37
484,2016-02-07 02:12:41,"Yes, fuzzy completion is only supported for bash and zsh.

https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh

Unfortunately I'm not a fish expert and don't know to how to implement fuzzy completion on it. Let me know if you're interested in contributing.
",junegunn,2016-12-14 06:42:37
484,2016-02-10 14:32:00,"AFAIK it is not possible now. Actually it would be better to open issue in fish-shell/fish-shell to allow external completion tool, so `cmd <TAB><TAB>` would open `fzf` instead of built in fuzzy-finder.
",hauleth,2016-12-14 06:42:37
484,2016-03-19 08:15:27,"This isn't available in the Fish core yet, but there is now a third-party script plugin that enables writing these types of completions called [`expand`](https://github.com/oh-my-fish/plugin-expand) (shameless plug, I wrote it). If you're looking for fancier fzf integration for Fish, likely a plugin could be written for it.
",sagebind,2016-12-14 06:42:37
484,2016-12-14 06:42:37,Closed via #759.,junegunn,2016-12-14 06:42:37
483,2016-02-04 08:26:31,"Whenever I run some program (which I can't share) and pipe it's output to fzf like this : 

`program | FZF_DEFAULT_OPTS=""-1 --margin 5%,5%"" fzf`

I get the following display error : 

![fzf_bug](https://cloud.githubusercontent.com/assets/13066384/12809575/82d379b2-cb20-11e5-8367-05cddf416a28.PNG)

What I then type is completely out of sync with the results shown : 

![fzf_bug_out_of_sync](https://cloud.githubusercontent.com/assets/13066384/12809607/bcfd1bde-cb20-11e5-8c56-fa8d4200d170.PNG)

I have tried to record the output of program to be able to share with you how it doesn't work, but so far, I wasn't able to capture the output of that program so that I can share it to you (because they must be some kind of ""invisible"" escape sequences for it ) . Here is a stackoverflow post of my attempts to capture that output : http://stackoverflow.com/questions/35181950/record-replay-stdout-including-escapes-timing?noredirect=1#comment58081761_35181950

Note that the error doesn't appear when I run 

`program | FZF_DEFAULT_OPTS=""--margin 5%,5%"" fzf`

so it has something to do with the -1 option.

Without the --margin option, the error still occurs, but it is easier to share that the cursor is completely out of sync whenever there is a margin.

I'm running this in tmux.

Whenever running the same outside of tmux, the bug occurs, but the cursor is moved on the bottom right of the screen instead of on the bottom left.

Any ideas ?
",netei,2017-01-17 17:11:38
483,2016-02-04 08:55:04,"Is it okay to make fzf wait until the ""program"" finishes? If so, does `--sync` option help?
",junegunn,2017-01-17 17:11:38
483,2016-02-04 09:14:34,"In this particular case, it is ok for me to use `--sync`, and I've tested and the problem doesn't occur when using 

`FZF_DEFAULT_OPTS=""-1 --margin 5%,5% --sync"" fzf`

I just wanted to send you this issue in case they is something special with `-1` that could explain this.
",netei,2017-01-17 17:11:38
483,2016-02-04 09:48:55,"`-1` delays the initialization of the screen until it is confirmed that there are more than 1 matches, so maybe the terminal is getting partial escape sequences before fzf starts? If that's the case, <kbd>CTRL-L</kbd> should correctly refresh the screen. Does it help?

By the way, is there any reason you set `FZF_DEFAULT_OPTS` here? You can simply `fzf -1 --margin 5%,5% --sync` .You probably should know this but..
",junegunn,2017-01-17 17:11:38
483,2016-02-04 10:19:18,"Strangely, C-L doesn't do anything (but it usually works when writing to stderr). 

Here's the output after pressing C-L

![ctrr-l](https://cloud.githubusercontent.com/assets/13066384/12812077/dfe89028-cb30-11e5-90d4-eb2c81df4e8a.PNG)

> By the way, is there any reason you set FZF_DEFAULT_OPTS here? You can simply fzf -1 --margin 5%,5% --sync .You probably should know this but..

Yes, I know that, I wanted to make it explicit that I don't have anything else in my `FZF_DEFAULT_OPTS`. I could have done `FZF_DEFAULT_OPTS="""" fzf -1 --margin 5%,5%`  too
",netei,2017-01-17 17:11:38
483,2016-02-04 10:22:13,"> Yes, I know that, I wanted to make it explicit that I don't have anything else in my FZF_DEFAULT_OPTS.

:+1: 

Is there any way I can locally reproduce the problem?
",junegunn,2017-01-17 17:11:38
483,2016-02-04 14:11:44,"Here's a way to reproduce with nodejs (the bug appears with v0.12.7 and v5.5.0)

test.js

<S_CODE_TOKEN>

Then do `npm install yeoman-generator yeoman-test bluebird ramda`

You also need mocha , install it with `npm install -g mocha`

Then run : `mocha test.js --reporter json-stream |  fzf -1 --margin 5%,5%`
",netei,2017-01-17 17:11:38
483,2016-02-04 15:40:19,"<img width=""1280"" alt=""screen shot 2016-02-05 at 12 39 21 am"" src=""https://cloud.githubusercontent.com/assets/700826/12820100/f1fd9806-cba0-11e5-9d3f-7706b030fa08.png"">

Hmm, it doesn't seem to be reproducible.
",junegunn,2017-01-17 17:11:38
483,2016-02-05 07:03:17,"Hi, I can reproduce on a completely different computer, tough, the bug isn't visible : the cursor was placed at the correct position, but the filtering didn't work : 

![selection_032](https://cloud.githubusercontent.com/assets/2071336/12839976/c40f7ed0-cbde-11e5-9cdf-f6951293aa80.png)

I will try to set up a dockerfile to test this.
",edi9999,2017-01-17 17:11:38
483,2016-02-05 07:46:49,"Okay, I don't have problem with filtering. I'm planning on releasing 0.11.3 within a few days, and I hope we get the idea of what's going on with this soon.
",junegunn,2017-01-17 17:11:38
483,2016-02-06 12:13:48,"Hi again,

here's a Dockerrepository that reproduces the issue : 

https://github.com/edi9999/testfzf

I've added instructions on how to reproduce in the [readme](https://github.com/edi9999/testfzf/blob/master/readme.md)

Strangely, they are some rendering issues no matter what the input is (even with `printf ""foo\nbar\n"" | fzf` ). But the filter is ""out of sync"" with the matches only with the input from `mocha`.

I've set TERM=screen
",edi9999,2017-01-17 17:11:38
483,2016-02-06 16:33:29,"Thanks, but for some reason, it doesn't work for me.

<S_CODE_TOKEN>

I also see `bash: /go/fzf/shell/key-bindings.bash: No such file or directory` on `docker run ...`. Is it expected?
",junegunn,2017-01-17 17:11:38
483,2016-02-06 16:39:45,"Indeed, the node_modues I commited were incorrect, try again now please 
",edi9999,2017-01-17 17:11:38
483,2016-02-06 16:42:51,"I don't understand, it works now . So confused as to where this problem could come from
",edi9999,2017-01-17 17:11:38
483,2016-02-06 17:00:07,"Hmm, `git pull`ed, but seeing the same error.
",junegunn,2017-01-17 17:11:38
483,2017-01-17 17:12:00,Let me know if it occurs again.,junegunn,2017-01-17 17:11:38
483,2017-01-17 17:13:25,Sure !,edi9999,2017-01-17 17:11:38
482,2016-02-02 00:08:51,"Hi,

How can I kill fzf in tty A from tty B without making tty A unusable after killing and leaving?

<S_CODE_TOKEN>
",D630,2016-02-02 19:49:41
482,2016-02-02 03:12:51,"fzf handles SIGINT, so `kill -2` will trigger clean exit.

(FYI, `reset` command restores the terminal state)
",junegunn,2016-02-02 19:49:41
482,2016-02-02 08:52:40,"The next version will handle SIGTERM as well :)
",junegunn,2016-02-02 19:49:41
481,2016-02-01 23:40:35,"Hey!

It would be nice, if we could specify the shell in `execute()` via an environment variable (`FZF_SHELL || SHELL`).  

For example, it would be easier to use functions, when sh is not my interactive shell like on Debian (dash and bash resp.):

<S_CODE_TOKEN>
",D630,2016-02-02 19:46:16
481,2016-02-02 03:20:35,"I like the idea. It would be better if we don't have to introduce another env var and just rely on `$SHELL`. But it only points to the default shell, and does not change when you switch between different shells. Do you think using `$SHELL` is enough for the purpose?

<S_CODE_TOKEN>
",junegunn,2016-02-02 19:46:16
481,2016-02-02 11:29:57,"I think using SHELL is enough, people should be using the default shell feature if they really intend to use a particular shell.
",netei,2016-02-02 19:46:16
481,2016-02-02 19:22:35,"@netei Thanks for the feedback. I just realized that we can still override `SHELL` if we want to, so no need for `FZF_SHELL`

<S_CODE_TOKEN>
",junegunn,2016-02-02 19:46:16
481,2016-02-02 19:48:58,"Pushed the update. Let me know if there's a better approach though.
The change will be included in the next version which I'm thinking of releasing this weekend.
I appreciate your suggestions.
",junegunn,2016-02-02 19:46:16
481,2016-02-03 00:18:03,"Ok, thanks :)
",D630,2016-02-02 19:46:16
481,2016-02-06 11:11:30,"Will FZF_DEFAULT_COMMAND follow SHELL as well?
",D630,2016-02-02 19:46:16
481,2016-02-06 15:38:54,"@D630 Good point. We should change that too, right?
",junegunn,2016-02-02 19:46:16
481,2016-02-06 20:18:23,"We should ;)

Thank you!
",D630,2016-02-02 19:46:16
481,2016-02-07 02:05:16,"Released 0.11.3 with the change. Thanks.
",junegunn,2016-02-02 19:46:16
481,2016-02-08 08:09:48,"> @D630 Good point. We should change that too, right?

Yes, I think it should follow it too :-). Thanks for the new release !
",netei,2016-02-02 19:46:16
480,2016-01-30 21:04:13,"Hi! so first of all this could be ( almost 90% sure ) my fault but I can't find where this is breaking.

I'm using oh-my-zsh with various plugins enabled, I've already tried this without any plugins and it still breaks, I don't have any other issue with any other command that i've found other than `git`

it breaks when doing `git <command> <TAB>` or `git <TAB>` it opens a fzf search that keeps looping with 0/0 matches, it's also impossible to close.

https://youtu.be/tzD2urWE-n4

I've tried installing it through brew and manually, I've tried disabling keybindings and fuzzy search.

Other than that fzf is perfect and I'm in love with it.
",EduardoRT,2016-02-02 21:36:11
480,2016-01-31 01:25:06,"Please share your configuration file. It would be easier for me to look through if you could strip it down to the core.

And a few things to check:
- `bindkey ""^I""`
- `bindkey | grep fzf`
- `echo $fzf_default_completion`

> it's also impossible to close.

You mean, CTRL-C doesn't work?

> I've tried disabling keybindings and fuzzy search

If you disable keybindings and fuzzy completion, there is no way fzf can start on tab key. Have you made sure that you restarted the shell?
",junegunn,2016-02-02 21:36:11
480,2016-01-31 04:13:21,"Thanks for the prompt response @junegunn, 

I haven't done any heavy modifications to any of my configs to be honest but here they are.

zshrc: 
http://sprunge.us/VGMf

this is the file that gets sourced:
http://sprunge.us/DPdG

and this is my oh-my-zshrc:
http://sprunge.us/DGAV

> You mean, CTRL-C doesn't work?

Yeah, CTRL-C does nothing, CTRL-Z doesn't send the job to the background, I have to kill my terminal or tmux panel.

> bindkey ""^I""
> bindkey | grep fzf
> echo $fzf_default_completion

I'm sorry but what should I do whit this?

> If you disable keybindings and fuzzy completion, there is no way fzf can start on tab key. Have you made sure that you restarted the shell?

Yep, just tried it again, sourced and killed my terminal to be sure and it still does it ( I uninstalled it, closed my term and then reinstalled it again ).

Thanks again!
",EduardoRT,2016-02-02 21:36:11
480,2016-01-31 04:49:51,"I want you to show me the output of those commands.

> Yep, just tried it again, sourced and killed my terminal to be sure and it still does it ( I uninstalled it, closed my term and then reinstalled it again ).

You know that it does not make sense, right? Because if you disable key bindings and fuzzy completion (by saying no to the prompt during install script), `~/.fzf.zsh` only touches your `$PATH` and `$MANPATH`. There must be some conflicting settings in your .zshrc. Try starting from a clean zshrc.
",junegunn,2016-02-02 21:36:11
480,2016-01-31 05:08:33,"Alright so,

`bindkey ""^I""` returns : `""^I"" fzf-completion`

`bindkey | grep fzf` returns:

<S_CODE_TOKEN>

and `echo $fzf_default_completion` returns:
`expand-or-complete`

I know it doesn't make sense but it is doing so, I'm pretty sure it's my fault though,

Here's the video.
https://www.youtube.com/watch?v=SXrZwAnJP40

If I remove `source ~/.oh-my-zsh/oh-my-zsh.sh` from my .zshrc it stops breaking, weird thing is I haven't done anything to my oh-my-zsh.sh directly, I've just activated plugins but It doesn't matter If I deactivate them it still wont work.

thanks for the help.
",EduardoRT,2016-02-02 21:36:11
480,2016-01-31 05:49:06,"> bindkey ""^I"" returns : ""^I"" fzf-completion

It means that the fuzzy completion from fzf is currently enabled.
1. Please run the install script again, opt-out fuzzy completion (press n), and restart the shell and check the output of the commands again. In this step, I'd like to make sure that fuzzy completion is not enabled as expected.
2. Rerun the install script, say yes to fuzzy completion. Check if `ls **<tab>` brings fzf completion and it works. If it shows the same symptom as `git`, please share your full configuration file.
",junegunn,2016-02-02 21:36:11
480,2016-01-31 05:54:58,"I just checked your video. You have to **restart** (close the terminal) the shell after opting-out fuzzy completion, simplying re-sourcing zshrc won't do, since fuzzy completion is already set up and the updated `.fzf.zsh` won't touch it.
",junegunn,2016-02-02 21:36:11
480,2016-01-31 06:02:52,"Tried with closing instead of sourcing between every step and it still autocompletes me with <TAB> but just with the git command :/
",EduardoRT,2016-02-02 21:36:11
480,2016-01-31 06:20:45,"I cannot reproduce with this .zshrc. Please try it.

<S_CODE_TOKEN>
",junegunn,2016-02-02 21:36:11
480,2016-01-31 15:13:30,"@junegunn thank you very much! I found the culprit with your config, it seems that oh-my-zsh's [common-aliases](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#common-aliases) breaks it, just removing that specific plugin fixes everything, I'm really sorry, I thought that I tried that correctly but it seems I removed my plugins wrong before.

Thanks a lot! 
",EduardoRT,2016-02-02 21:36:11
480,2016-02-03 03:42:30,"I'll check if the problem is reproducible with the plugin you mentioned, and see if there's something I can do about it.
",junegunn,2016-02-02 21:36:11
480,2016-02-03 04:09:08,"<S_CODE_TOKEN>

This still works. Maybe it's some combinations of plugins that cause the problem, but I don't know.
",junegunn,2016-02-02 21:36:11
479,2016-01-27 14:50:23,"The content in ""fzf"" widget becomes disordered after typing some characters. Please see the screen recording: https://dl.dropboxusercontent.com/u/12474941/fzf_disorder.mp4

I experience this when using fzf inside tmux.
",demon386,2016-01-27 15:04:04
479,2016-01-27 15:04:04,"duplicated with https://github.com/junegunn/fzf/issues/77
",demon386,2016-01-27 15:04:04
478,2016-01-26 22:45:12,"So, when in `viins` mode in Zsh, I use the following map:

<S_CODE_TOKEN>

(I chose `;` because it's right above `.` and `/`, so my finger's already usually down there when typing paths; and it's senseless to want to normal-complete immediately after a semicolon.)

Now, I _want_ to do this:

<S_CODE_TOKEN>

That is, I want `esc-;` to function about the same way as `;-tab` (with, of course, the benefit of being able to preform other movements before initiating completion.)

Unfortunately, `$FZF_COMPLETION_TRIGGER` is checked, even when the zsh-widget is invoked in `vicmd` mode; so I'd _still_ have to insert a `;` into the string before the completion-point when invoking `vicmd`-`;`.

Could I get the _meat_ of `fzf-completion` extracted to a different widget that _doesn't_ check `$FZF_COMPLETION_TRIGGER`, like `fzf-complete` or `fzf-directly-complete` or something? This would allow for the following:

<S_CODE_TOKEN>
",ELLIOTTCABLE,2016-02-03 06:24:43
478,2016-01-27 03:55:03,"I'm not sure if I understood your intention correctly largely because I don't use zsh. Is it possible to define your own function that temporarily swaps FZF_COMPLETION_TRIGGER around fzf-completion?

<S_CODE_TOKEN>

Incidentally, some users prefer having a dedicated fzf completion key:
https://github.com/junegunn/fzf/wiki/Fuzzy-completion#zsh
",junegunn,2016-02-03 06:24:43
478,2016-02-03 06:21:49,"This seems to work well.

<S_CODE_TOKEN>
",junegunn,2016-02-03 06:24:43
477,2016-01-25 07:37:03,"Firs congratulations for make it to ArchLinux Community repo and second, I know I see that answer, but I did not make a mark (so mad at myself). How to make **_ctrl-r**_ commandline output without option to edit command and just directly start command.
Thank you and all the best, Boris
",Zaplanincan,
477,2016-01-25 16:21:10,"Haha thanks but I have no idea what's going on with ArchLinux stuff.

Anyway the feature you asked is not implemented. It would be ideal if we could ""choose"" if we want to edit the line or not, like pressing CTRL-X instead of Enter will fire the command immediately. This should be possible in zsh using `--expect ctrl-x` option, but I don't think the same can be easily done on bash.
",junegunn,
477,2016-02-02 18:33:59,"I would love this feature as well - if ctrl-x isn't bound to anything i also think that's an appropriate shortcut. I'll try my hand at adding this.
",naphthalene,
477,2016-07-04 18:30:32,"For zsh, this is what we can do:

<S_CODE_TOKEN>

but I couldn't find a solution for bash.
",junegunn,
476,2016-01-24 17:51:05,"At the moment :Ag command ignores own ag switches.
It would be nice, if it will be possible to pass --css switch for example in order to narrow search in css files only, like this:
`:Ag --css pattern`
",vbauerster,2016-01-24 19:47:19
476,2016-01-24 17:54:28,"Sorry, close this post, as it is addressed to vim pulgin
",vbauerster,2016-01-24 19:47:19
476,2016-01-25 04:11:18,"See the discussion in https://github.com/junegunn/fzf.vim/issues/51. So the options are to use the `:Ag` command as it is, or to define your own command using `fzf#vim#ag(query, ag_options, options)` function. I hope to find a cleaner (and easier) solution.
",junegunn,2016-01-24 19:47:19
475,2016-01-23 07:10:16,"I use ZSH, but fzf appended a line only to bashrc.
",trusktr,2016-01-23 07:20:28
475,2016-01-23 07:20:28,"Nevermind, for some reason I didn't see it, but now I do.
",trusktr,2016-01-23 07:20:28
475,2016-01-23 07:22:29,"The install script updates .bashrc, .zshrc, and fish configuration regardless of the current shell. If you don't like the behavior you can only download the binary with `--bin` option and do the rest manually, or use `--no-update-rc` option.
",junegunn,2016-01-23 07:20:28
474,2016-01-20 19:50:40,"I've been experimenting with your MRU examples for vim. Is there a way to sort the MRU files by how recently they were opened? Or is that information simply not available in vim? Would a plugin like [neomru](https://github.com/Shougo/neomru.vim) help any in this case? I've noticed that both CtrlP and Unite seem to be able to create a MRU list sorted correctly. 

The use case here is that I want to be able to switch back quickly to the previously viewed buffer (without having to type most of the filename).
",mattsawyer77,2016-01-21 05:18:56
474,2016-01-21 04:21:23,"> Or is that information simply not available in vim? 

As far as I know, `v:oldfiles` is all we have. MRU plugins you mentioned manually do the bookkeeping.
- https://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp/mrufiles.vim#L133-L139
- https://github.com/Shougo/neomru.vim/blob/master/plugin/neomru.vim#L46-L49

.. which is not what I'm interested in doing. If might be possible though that we can use the information from those plugins, with their API or exposed global variables.

> The use case here is that I want to be able to switch back quickly to the previously viewed buffer

Are you aware of <kbd>CTRL-6</kbd> (`:help CTRL-6`)? <kbd>CTRL-O</kbd> is also nice.
",junegunn,2016-01-21 05:18:56
474,2016-01-21 05:18:56,"thanks for the info @junegunn ! I was unaware of CTRL-6 and CTRL-O -- those should come in handy. And for now CtrlP's MRU works fine. Just thought if there was a way to do everything with FZF, it might be nice.
",mattsawyer77,2016-01-21 05:18:56
474,2016-01-21 05:39:51,"<kbd>CTRL-6</kbd> is simply indispensable :)
",junegunn,2016-01-21 05:18:56
474,2016-03-06 08:17:48,"nice `CTRL-6`! maybe a shared MRU repo as plugin?
",vito-c,2016-01-21 05:18:56
474,2016-03-06 22:53:17,"I made my own script to track the MRU for fzf.vim sometime last year and didn't think to make it public.  I've been using the `FilesMru` command as a replacement for ctrl-p and the MRU tracking I added to it has been working pretty well.

Here it is if any of you are interested: https://github.com/tweekmonster/fzf-filemru
",tweekmonster,2016-01-21 05:18:56
473,2016-01-19 04:21:35,"Hey, fzf rocks, big fan :)

In the bash completion, when you get halfway through a path and decide to fuzzy-complete it, you can use **<Tab> to open fzf on the rest of the path.

Is it possible to enable Ctrl+T to do that too? Currently it starts a new completion 'session' from the cwd.
",d-lord,2016-01-19 14:34:38
473,2016-01-19 14:34:38,"Unfortunately, I don't think it's possible on bash. It's possible [on zsh](https://github.com/junegunn/fzf/wiki/Fuzzy-completion#zsh) but on bash what we can do with ordinary key bindings is very limited so we have to override the one and only completion system. Therefore if we set `FZF_COMPLETION_TRIGGER` to an empty string and bind `CTRL-T` to `complete`, normal tab completion will always start fzf since tab is also mapped to `complete`, which is definitely not what you'd want.
",junegunn,2016-01-19 14:34:38
472,2016-01-15 00:41:38,"I use fzf map as <c-p> to quickly switch between buffers. One thing that is annoying is that even already open buffers are being re-opened, and the cursor line is back to 1.

I could probably workaround it with saving and restoring position in file like http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session , but I wonder if it could be improved in FZF itself. It could detect if the buffer is already open and switch to it, instead of reopening the file. 
",dpc,2016-01-15 04:41:48
472,2016-01-15 01:32:20,"Use `set nostartofline` option in vim/neovim. 
",justinmk,2016-01-15 04:41:48
472,2016-01-15 04:41:48,"This solves my problem, thank you!
",dpc,2016-01-15 04:41:48
471,2016-01-14 23:26:04,"Works for me in Vim, but fails in Neovim.

<S_CODE_TOKEN>
",dpc,2016-01-15 00:49:49
471,2016-01-14 23:57:05,"If `termopen` isn't available you must have a very old (more than 1 year) version of Neovim. What does `:version` say?
",justinmk,2016-01-15 00:49:49
471,2016-01-15 00:42:07,"<S_CODE_TOKEN>
",dpc,2016-01-15 00:49:49
471,2016-01-15 00:49:49,"Updated, works now. Thank you for you help!
",dpc,2016-01-15 00:49:49
470,2016-01-14 20:06:18,"I've been doing work lately with some Vim and NeoVim-related items in preparation to finish the last few things to get NeoVim working on Solaris and its derivatives.

With a couple minor changes to the install script, I can make fzf install cleanly on Solaris.  If you're interested, I can make a PR with the changes and provide binaries for releases; maybe they could end up at https://github.com/junegunn/fzf-bin/releases/download/0.11.1/fzf-0.11.1-sunos_i86pc.tgz or something similar.

There are a number of people who are interested in using NeoVim on Solaris, and I'm sure some of them would also like to use FZF (a couple of tweaks also need to happen with Ruby to get the fallback version working, so nothing actually works out of the box on Solaris right now)

I'd be glad to build binaries and keep everything up to date and working on this platform.  For that matter, it would probably also be worth building FreeBSD binaries (and it'd also probably be very easy), and I could take care of that as well.

Let me know if you're interested!

![OpenIndiana](http://i.imgur.com/6O8FCzW.jpg)
",DominoTree,2016-12-10 01:11:22
470,2016-01-15 02:22:29,"Thanks. I should be able to build the binaries locally. Can't ask you every time I want to release a new version :) I'm currently using docker to spin up linux vm and build linux binaries on it. `make all linux android` is the command. If you could extend the build script, I'd happy to build and upload the binaries. 
",junegunn,2016-12-10 01:11:22
470,2016-01-15 06:49:00,"I can do that, Go is pretty friendly about cross-compiling
",DominoTree,2016-12-10 01:11:22
470,2016-01-15 07:01:52,"Cool. I've been using docker and vm because of the numerous issues with ncurses and cgo.
",junegunn,2016-12-10 01:11:22
470,2016-02-20 17:48:46,"I'd love to see FeeBSD binaries, or even just some documentation on how to compile myself without all the Docker stuff as you can't run FreeBSD in Docker unless you are already on a FreeBSD host.  The project doesn't seem to follow the usual conventions so it's not obvious to me, although I'm also a Go n00b.
",rosstimson,2016-12-10 01:11:22
470,2016-02-21 09:49:37,"The prebuilt binaries are provided not to require Go development environment. If you do have Go installed on your system, `go get github.com/junegunn/fzf/src/fzf` will build the binary for you. Maybe I should add this workaround to `install` script. Having said that, I'd also like to provide binaries for more platforms, but it should be easy for me to build the set of binaries locally.
",junegunn,2016-12-10 01:11:22
470,2016-02-21 11:58:47,"@junegunn  Awesome, that worked a treat!  I'd tried a bunch of ways such as copying the `fzf/src` contents into appropriate place in GOPATH and then `go build`.

Binaries would be great but I'm very pleased I now have FZF on my FreeBSD laptop.
",rosstimson,2016-12-10 01:11:22
469,2016-01-08 20:51:28,"Currently, when invoking `:FZF` while `set spell` is enabled in nvim, the buffer contents are spellchecked. This causes distracting underlines to appear in the paths.
",euclio,2016-01-09 03:08:37
469,2016-01-09 03:10:44,"Thanks. That makes more sense. I didn't realize it due to [the code](https://github.com/junegunn/fzf.vim/blob/b97a6393ff53acd6145185a400cf6aa44d525ecc/plugin/fzf.vim#L104) in fzf.vim project.
",junegunn,2016-01-09 03:08:37
468,2016-01-08 05:27:10,"Keybindings work with the default mode in fish, but not with the vi mode. 
However I can use keybindings with vi mode after I executed function `fzf_key_bindings` in fish shell. If I open another shell, I need to do it again. 
I tried adding `fzf_key_bindings` in the `config.fish`, so this function can execute automatically when I startup fish, but the keybindings still does not work. 
",explosic4,
468,2016-01-08 05:37:05,"Hi, vi mode was added to fish pretty recently, right? Unfortunately I personally don't use fish and don't have enough experience or knowledge on fish. Looking for contribution.
",junegunn,
468,2016-01-08 12:45:20,"It looks like that in vi mode the keybindings  in file `fzf_key_bindings.fish` will be overwritten by vi mode keybindings or just make no effect, I am not sure. Anyway I can use keybindings by executing `fzf_key_bindings` in fish shell after launching it. 
",explosic4,
468,2016-01-09 03:11:58,"Can you share your configuration file?
",junegunn,
468,2016-01-09 06:00:14,"<S_CODE_TOKEN>

I use [fisherman](https://github.com/fisherman/fisherman)  ( quite like [oh-my-fish](https://github.com/oh-my-fish/oh-my-fish) ) to manage the plugins for fish, i only installed [theme-agnoster](https://github.com/oh-my-fish/theme-agnoster), [fasd](https://github.com/oh-my-fish/plugin-fasd) and [pkg-fasd](https://github.com/gretel/pkg-fzf)
",explosic4,
468,2016-01-09 16:42:57,"Related: https://github.com/fish-shell/fish-shell/issues/2254

So probably this will be fixed in the next release of fish. The comments in the issue imply that the user key bindings should be written with both emacs and vi mode in mind. But fortunately fzf key bindings already work just as expected in both modes.
",junegunn,
468,2016-01-12 18:02:16,"From my quick investigation it seems that setting vi mode is really one command:

(from my `~/.config/fish/config.fish`):

<S_CODE_TOKEN>

Fisherman probably does it somewhere internally.

That call is changing the function that is going to be called to set keybindings. It was previously `fish_user_key_bindings` and FZF installed it's bind hook in `~/.config/fish/functions/fish_user_key_bindings.fish`, but it's now going to be ignored and `fish_vi_key_bindings` function will be evaluated instead. You can't just override the function file, as this will break vi key binding setup .

As a workaround I've moved the bindings into `~/.config/fish/functions/fish_prompt.fish`. It can be outside of the `function fish_prompt` and still works, so will be evaluated once, I believe.

I'm doing some personal trickery (haven't used fzf install script), so just for reference I have appened:

<S_CODE_TOKEN>

to `~/.config/fish/functions/fish_prompt.fish`

I guess the reason why:

<S_CODE_TOKEN>

inside `~/.config/fish/config.fish` is not working, is because fish first reads config.fish, and then evaluates `fish_user_key_bindings` or `fish_vi_key_bindings`, overriding wht fzf_key_bindings did.
",dpc,
468,2016-03-28 04:01:56,"I found a simple solution, which seems to me like the proper way to configure using both the fzf keybindings and fish vi keybindings. I added `fish_vi_key_bindings` to the file `~/.config/fish/functions/fish_user_key_bindings.fish`, before the `fzf_key_bindings` line. My file looks like this:

<S_CODE_TOKEN>

Note that I only tested this on fish 2.2.0.

I think this is not an fzf issue—just a quirk of how configuration works in fish. I suggest adding a note  in the `README` file in the Tips section mentioning this and close the issue.
",riclima,
468,2017-01-07 16:54:33,@riclima In fish 2.4.0 this workaround doesn't seem to work. I can confirm the issue.,tiberiuichim,
467,2016-01-06 22:04:18,"I really like fzf's interactive shell history (^R) support. However, it'd be even better if there was a way to automatically invoke the selected command, rather than pressing Enter again to confirm once fzf closes. Is this possible?

Apologies if this is documented somewhere, I couldn't find it.
",af,2016-01-07 18:50:55
467,2016-01-07 15:31:07,"No, currently there's no option for that. But you can easily extend the behavior. For example on zsh,

<S_CODE_TOKEN>

And on bash

<S_CODE_TOKEN>
",junegunn,2016-01-07 18:50:55
467,2016-01-07 18:50:55,"That works, thank you!
",af,2016-01-07 18:50:55
466,2016-01-06 11:50:28,"Context:

From a normal user zsh shell, run `sudo -E /usr/bin/env zsh`.
Then `^R` doesn't work because `fzf-tmux` freezes. I could make it work by setting: `FZF_TMUX=0`

Note: the problem isn't present if switching to root by doing: `su -`
",kurkale6ka,2016-01-06 15:34:22
466,2016-01-06 15:09:33,"Nice find. This is not specific to zsh. fzf-tmux doesn't run in such situation. I'll see what I can do.
",junegunn,2016-01-06 15:34:22
466,2016-01-06 15:34:39,"Should be fixed now. Can you update and check if it works for you?
",junegunn,2016-01-06 15:34:22
466,2016-01-06 15:42:16,"It works yes. Thanks!
",kurkale6ka,2016-01-06 15:34:22
466,2016-01-06 15:44:04,"Thanks. Maybe someone would argue that the fifos should not be made writable by others. But I don't see a better option.
",junegunn,2016-01-06 15:34:22
465,2016-01-04 15:38:27,"Just got a new tablet and realized how convenient it would be to be able to just download the fzf binary instead of installing from source.

Could it be added it to the releases?
",acornejo,2017-01-26 09:45:35
465,2016-01-04 17:13:58,"Hi, I just uploaded the binary [here](https://github.com/junegunn/fzf-bin/releases). Do you think we should also update install script for the platform?
",junegunn,2017-01-26 09:45:35
465,2016-01-06 04:15:13,"I think addling it to the install script would be incredibly useful. I think more and more folks are trying to use tablets as a dev environment, and having fzf available is a big productivity bonus.

There are a few details that need to worked out. Namely, android doesn't ship use gnulibc, but its own implementation of libc (known as bionic). There are two camps for running a terminal on android, on the one hand, there is termux (https://github.com/termux/termux-packages), and on the other there is gnuroot (https://github.com/corbinlc/gnuroot). The first one compiles all packages against the builtin/included bionic, which usually requires patching packages to get them to build (for instance, ncurses will not build unpatched against bionic). The second one first builds and android gnulibc, and then just uses the standard packages (i.e. you can install full blown debian or redhat chroot on your android device).

The Dockerfile I contributed uses the native libc provided by android (bionic), but for completness we should also provide a build that use the gnulibc, since there are  plenty of users of both approaches.

The next detail would be a way to detect weather the android system is using bionic or gnulibc. Something like this should work (may not be the actual string, but something along those lines).

<S_CODE_TOKEN>

When I get some time I'll contribute another PR to add a build of fzf that uses gnulibc, and perhaps even some changes to the install script. Thoughts?
",acornejo,2017-01-26 09:45:35
465,2016-01-06 04:22:05,"Sounds great.
",junegunn,2017-01-26 09:45:35
465,2016-01-11 01:28:01,"On a related note: A fzf package was just added to Termux, which can be installed with `apt install fzf`. This one is custom to Termux (linking against both the Android bionic libc and the Termux libncurses) so doesn't change the need of a general solution discussed here, but I thought I would give a heads up if anyone is interested!
",fornwall,2017-01-26 09:45:35
464,2016-01-04 00:54:51,"Is there any solution for it?
",SharkIng,2016-01-04 04:05:37
464,2016-01-04 04:05:37,"I don't think it's related to fzf. Google will probably give you some pointers.
",junegunn,2016-01-04 04:05:37
464,2016-10-15 00:53:45,"@SharkIng 
I had the same problem and I found I define a function which is the example from the fzf project.
 v() {
    # local file
    # file=""$(fasd -Rfl ""$1"" | fzf -1 -0 --no-sort +m)"" && vi ""${file}"" || return 1
 }

And I also have an alias defined as
alias v=""fasd -e vim""
which is an example from the fasd project.

The problem was solved by removing either of them.
I guess the same name caused some recursive calls which run out of the process resource.
",raphaelfeng,2016-01-04 04:05:37
463,2016-01-03 22:35:42,,tkrugg,2016-01-04 09:17:53
463,2016-01-04 04:02:33,"No, it's not currently supported.

I suggest instead getting used to readline keybindings <kbd>ALT-B</kbd><kbd>'</kbd><kbd>ALT-F</kbd> (or <kbd>CTRL-A</kbd><kbd>'</kbd><kbd>CTRL-E</kbd>) to quickly prepend `'` to the search term.
",junegunn,2016-01-04 09:17:53
462,2016-01-02 05:14:48,"After cloning the git manually or with vim-plug and running `~/.fzf/install`, I get the following error:

<S_CODE_TOKEN>
",ghost,2016-01-02 06:16:43
462,2016-01-02 05:41:10,"@idurandiaz something wrong with your OS root certificates, or curl config/build. Not related to fzf.
",justinmk,2016-01-02 06:16:43
462,2016-01-02 06:08:47,"@justinmk Any idea how to solve that?
",ghost,2016-01-02 06:16:43
462,2016-01-02 06:16:42,"Only Google knows :)
As @justinmk said, it's not a problem of fzf itself, please let us know if you find a solution. Thanks.
",junegunn,2016-01-02 06:16:43
462,2016-01-02 12:47:42,"Found a solution in this link: http://askubuntu.com/questions/342484/etc-pki-tls-certs-ca-bundle-crt-not-found

However for me it was enough to just add `sudo` to `~/.fzf/install` (and restart terminal). Thanks.
",ghost,2016-01-02 06:16:43
461,2015-12-29 16:17:30,"My most common usecase for fzf is search through my history, which often contains very long commands. When the terminal window is too narrow for the full command line, it is trimmed. Is it possible to wrap instead? ideally, I'd be able to specify the maximum number of lines that are used for the wrapping. This way I can make sure that extremely long items don't take all the screen, but also that I can see more of every item.

Thanks!
",infokiller,2015-12-29 16:26:01
461,2015-12-29 16:26:01,"Hi, thanks for the suggestion. It's currently not possible and unfortunately, implementing it is not at all trivial. See the previous (related) discussion here: https://github.com/junegunn/fzf/issues/154#issuecomment-84503814. I'm closing this not because this is a bad idea, but I can't see myself implementing it in a foreseeable future.
",junegunn,2015-12-29 16:26:01
461,2015-12-29 16:53:12,"Thanks a lot for your quick response!
",infokiller,2015-12-29 16:26:01
461,2016-04-12 17:34:33,"I'd use this too, if you or anyone else gets around to implementing it. But yeah, if it's complicated, maybe not worth the time currently.
",gatoatigrado,2015-12-29 16:26:01
460,2015-12-29 13:43:35,"Hi, I'm having an error when I attempt to use fzf running tmux. The issue happens when after invoking fzf via autocompletion (vim **) or CTRL-R binding I select a file option or just ESC to exit, fzf crashes and tmux exits. I can see in my command line a msg like: `-bash: wait_for: No record of process xxxx`. What's interesting is that this does not happen if I just use CTRL-T binding. And it doesn't happen at all if not running tmux. Not sure really if this is on tmux or fzf.

My env:
OSX El Capitan
iTerm2 Build 2.1.4
tmux 2.2 (with no specific config)
$TERM=xterm-256color

I'm also using powerline (python) (only active for VIM)
Note: I installed fzf from git repo, then I changed my mind and re-installed it using brew (I uninstalled it first though)

Thanks
",m1ch3lp3r3z,2015-12-29 18:46:57
460,2015-12-29 16:00:13,"I don't have the problem on El Capitan + iterm2 2.1.4 + tmux 2.1. Not sure if it's related to the problem you described, but for one thing, `xterm-256color` is not allowed on tmux.

Excerpt from: https://github.com/tmux/tmux/blob/master/FAQ

<S_CODE_TOKEN>

See: https://github.com/junegunn/fzf/issues?utf8=%E2%9C%93&q=xterm-256color+

First check if changing it to `screen-256color` helps.

Also note that fzf on Homebrew is a couple months behind the master, but I don't think there was a critical bug fix during the time.
",junegunn,2015-12-29 18:46:57
460,2015-12-29 17:32:59,"Thanks, sorry for the obvious mistake, however I switched TERM to screen-256color, but it didn't solve the problem, my VIM now looks ugly though.
Also I updated fzf to <HEAD> version, it didn't work either, however it solved a problem I had before with paths including spaces where fzf was doing double escaping (`\\\`), and that's great!. Thanks.
I tried moving the tmux invoking up in my .bash_profile before everything else, the only difference now is that when it crashes the whole iTerm tab goes away.

Probably this is something related to my current config (although I'm setting up a new El Capitan installation from scratch), I haven't used tmux before so I guess I don't need it, main reason I was using it was to avoid fzf from opening ""fullscreen"". If there is not other obvious thing I can try I guess I can close the ticket. Thank you.
",m1ch3lp3r3z,2015-12-29 18:46:57
460,2015-12-29 18:44:25,"Definitely something with my terminal configuration, not related with fzf. This is breaking my terminal from the very beginning:

##### .bash_profile

export ""TERM=screen-256color""
exec tmux

Thanks. Closing this.
",m1ch3lp3r3z,2015-12-29 18:46:57
460,2015-12-29 18:50:30,"@junegunn in tmux 2.1 (https://github.com/tmux/tmux/commit/7382ba82c5b366be84ca55c7842426bcf3d1f521) $TERM inside tmux can be `tmux` or `tmux-256color`.
",atweiden,2015-12-29 18:46:57
460,2015-12-30 02:00:50,"@atweiden Oh, thanks. I think I'm going to stick to `screen-256color` for a while due to compatibility issue as I frequently ssh to many old servers.
",junegunn,2015-12-29 18:46:57
459,2015-12-29 04:42:12,"Would it be possible to allow for `fzf` to autoselect a single search result interactively?

For example:
`echo -e ""This\nis\n\a\ntest"" | fzf --query=a -1`
will autoselect ""a""

What I would like is something more along the lines of:
`echo -e ""This\nis\na\ntest"" | fzf -1`
and after entering ""a"", `fzf` would autoselect the result without the need to hit enter
",octotep,2016-01-01 17:53:55
459,2015-12-29 06:08:06,"`--select-1` can be used without `--query` as follows:

<S_CODE_TOKEN>

However, it does not auto-select a match while interactively narrowing down the list. It is by design, and I don't think I prefer the suggested behavior as it can be confusing especially when you accidentally type in a wrong character. You don't get a chance to correct the query and you never know if you selected the right entry or not. But maybe that's just me, and I don't know whether if it's a common requirement as you're the first one to have suggested it.
",junegunn,2016-01-01 17:53:55
459,2016-01-01 16:34:22,"Sorry for the late reply. After some thought, I agree with you. It seems like it would introduce a very confusing behavior for end users, and I'm not sure how valuable interactive autoselect would be in the end.
Feel free to close this issue if you think it's appropriate
",octotep,2016-01-01 17:53:55
459,2016-01-01 17:53:55,"Thanks for the feedback. Let me mark this issue `wontfix`.
",junegunn,2016-01-01 17:53:55
458,2015-12-28 20:20:39,"Should fix `ls /**` for both bash (tested) and zsh (not tested)

While testing I also noticed `ls dir**` is broken if both `dir` and `dirAbc` exist in your cwd (dirAbc[/*] not listed).

I'll have a look at it tomorrow, if not I'll create an issue.
",frizinak,2015-12-28 23:22:52
458,2015-12-28 23:28:46,"Merged, thanks. `ls dir**` only showing the contents inside `dir` when `dir` is a directory is the intended behavior (e.g. `ls ~USERNAME**`), but you raised an interesting point with it.
",junegunn,2015-12-28 23:22:52
457,2015-12-27 19:23:22,"Not fixed for zsh, as it's such a trivial fix (and zsh scares me)

`ls .**` and `ls ..**` will respectively include `.` and `..`.  
but it seems pretty non-unixy to specifically exclude em.
",frizinak,2015-12-28 15:31:15
457,2015-12-28 03:41:03,"Thanks, but `ls **<tab>` gives me something like this:

![2015-12-28 12 37 14](https://cloud.githubusercontent.com/assets/700826/12013708/c6b6a214-ad5f-11e5-95b5-adc2aebce998.png)

Also `../**<tab>` gives items with `..//` prefix which I don't think is pretty.
Let me take a stab at it myself later in the day, I also want to add some accompanying test cases.
",junegunn,2015-12-28 15:31:15
457,2015-12-28 09:24:22,"Hmm weird, I don't have the extra `/`.

<S_CODE_TOKEN>

`$dir` is
- empty when `ls **<T>`
- Downloads when `ls Downloads**<T>`
- Downloads/ when `ls Downloads/games**<T>`
- .. when `ls ..**`
- ../ when ls `../**`

When any of those are passed to `find -L` I get no leading or double slashes.
",frizinak,2015-12-28 15:31:15
457,2015-12-28 14:46:02,"I think it's specific to OS X. I also don't see extra trailing slashes on Ubuntu. However your patch has a side effect of including the target directory itself, which leads to an empty entry when `$dir` is empty.
I'm working on a separate patch that is based on your idea and it will handle the original issues of missing hidden files without changing other behavior. The patch will also cover zsh.
",junegunn,2015-12-28 15:31:15
457,2015-12-28 15:31:15,"Fixed in e1dd798. Thanks.
",junegunn,2015-12-28 15:31:15
456,2015-12-25 20:35:43,"Assuming you have at least one dotfile in your homedir:

1: No hidden files

<S_CODE_TOKEN>

2: Leading `./` and hidden files

<S_CODE_TOKEN>

There is a `./` safeguard ( `[ ""$dir"" = './' ] && dir=''` ) which obviously doesn't catch `.**<TAB>`.

To fix both issues I'd suggest adding three envs (FZF_COMP_PATH_COMMAND, FZF_COMP_DIR_COMMAND and FZF_COMP_FILE_COMMAND) to allow the same flexibility FZF_DEFAULT_COMMAND gives us.
(using ag or locate instead of find)

or

Adding these 3 options to fzf itself while also adding the above env vars but removing the need to pipe anything to it.

or

just fixing case 1 by not using `""$dir""*` and stripping the leading './'
",frizinak,2015-12-28 15:29:46
456,2015-12-27 15:49:17,"Thanks for the suggestions.

I really am not considering adding more env vars. We already have too many of them, and I think we are at the point where adding more variables is not the answer to all kinds of customization needs. We should draw the line somewhere and tell the users to use their own forks of the script.

Anyway, the behavior you observed is clearly not consistent and needs to be fixed. Probably we should remove `*` suffix as you mentioned. That's what we did in 53d5d9d1624d23175eca4c1e1bd93bbbb7b41b0c. I'll look into it when I get some time.
",junegunn,2015-12-28 15:29:46
456,2015-12-27 19:40:38,"Although I agree adding env vars isn't the most elegant solution, they do allow us to quickly customize fzf's input (e.g. excluding files/dirs, using locate or ag instead of find).  
Maintaining a fork and regularly merging with the upstream repo seems even less elegant.

Anyhoo created #457, which should resolve this issue.
",frizinak,2015-12-28 15:29:46
456,2015-12-27 23:19:59,"It's been a while I haven't updated the scripts except for minor fixes for corner cases. If it works for you and you don't have an issue, you don't have to follow the upstream though I do understand your point of view. It's tempting to fix the current issues with seemingly innocuous small patches, however as the maintainer of the project, I should maintain a long term perspective and be cautious of any changes that might make the project bigger which make it less simpler and less flexible in the long term. Also note that the suggested options should handle a directory argument unlike the ones we already have and we'll have to explain the difference to the users. Anyway thanks for the PR!
",junegunn,2015-12-28 15:29:46
456,2015-12-28 16:08:04,"works, tyvm!
",frizinak,2015-12-28 15:29:46
455,2015-12-25 20:08:54,"FZF_DEFAULT_OPTS are lost when CTRL+T invokes `__fzf_select__` in a new tmux window.
",frizinak,2015-12-27 15:09:22
455,2015-12-27 15:09:29,"Thanks!
",junegunn,2015-12-27 15:09:22
454,2015-12-24 05:22:19,"Hello,

Thanks for fzf. Love it a lot!

I'm just curios, is it possible to get yank history in vim similar to `:Buffers` command (e.g. `:Yank`)?
",anvaka,2015-12-28 15:40:30
454,2015-12-24 12:23:58,"Hi, looks like [the issue tracker of fzf.vim](https://github.com/junegunn/fzf.vim/issues) is a better place for this discussion, right? Anyway I don't think yank history of vim is directly available via API. Correct me if I'm wrong. There is a plugin called yankring that keeps track of the history but I don't use it and haven't looked at the code. Maybe it's possible to make `fzf#run` function access the data structure of yankring.
",junegunn,2015-12-28 15:40:30
454,2015-12-24 13:17:48,"Maybe a :Registers command would be useful, but I don't think that I would be using it.
",netei,2015-12-28 15:40:30
454,2015-12-24 22:28:26,"@junegunn thanks! I didn't realize fzf.vim is a separate repository. Please feel free to resolve it here. 

@netei thanks for point to :Registers; Looks like it's not as capable as `yankring`/`Unite history/yank`, but could work as a simple alternative.
",anvaka,2015-12-28 15:40:30
453,2015-12-21 17:43:19,"How can i prevent that fzf open files inside neotree buffer?
I am always do that,  find files when neotree buffer is on focus :(

![fzf](https://cloud.githubusercontent.com/assets/675604/11937133/891f0592-a7f9-11e5-8dd3-24aaa7da93e0.gif)

thanks
",heliohead,2015-12-22 23:08:33
453,2015-12-22 15:31:52,"Hmm, you'll probably have to use a custom mapping that moves the focus if the cursor is on that window. You mean nerdtree, right? Something like this:

<S_CODE_TOKEN>
",junegunn,2015-12-22 23:08:33
453,2015-12-22 23:08:33,"OH Yeah, i mean nerdtree, neotree is a emacs thing :p,
This map works like a charm :) 🏅 🎖
Thank you so much! and also thanks for the great job of your plugins and themes i love it 💫 🤘👍 .

Closing issue in 4...3...2...
",heliohead,2015-12-22 23:08:33
453,2016-04-22 15:34:49,"Sorry, your command doesn't work for me.
I'm using newest version of both NerdTree and FZF, this problem still happens...

`nnoremap <silent> <expr> <Leader><Leader> (expand('%') =~ 'NERD_tree' ? ""\<c-w>\<c-w>"" : '')."":FZF\<cr>""`
",mrleolink,2015-12-22 23:08:33
453,2016-04-22 18:20:12,"@mrleolink [Works for me](https://github.com/junegunn/dotfiles/blob/5f67503bbf463dd163226e83df4026da6f5f8925/vimrc#L1673).  It's probably something in your configuration; some plugin or your own autocmd. Disable everything but fzf and nertree and see if the problem persists.
",junegunn,2015-12-22 23:08:33
453,2016-04-23 03:52:50,"@junegunn Ok, so I tried to disable everything but the problem still persists.

I'm using neovim, this is my `init.vim`

<S_CODE_TOKEN>

As you can see, I'm using pathogen to load nerdtree. I don't have anything else in my `bundle` folder.
",mrleolink,2015-12-22 23:08:33
453,2016-04-23 05:01:57,"I suspect you don't fully understand the lines. The suggested line is a mapping of its own and not a global configuration so it does not affect `<c-p>` binding you have above.  Change `<leader><leader>` to `<c-p>`.
",junegunn,2015-12-22 23:08:33
453,2016-04-23 05:20:54,"It works!!!
Thank you 👍 
",mrleolink,2015-12-22 23:08:33
452,2015-12-18 04:51:25,"Say you do `ctrl-t` and get this:

<S_CODE_TOKEN>

Now to select `foo.bar`, `foo.bar.baz`, `foo.bar.baz.qux` you would need 3 `up`s to go up to `foo.bar.baz.qux`, 3 `tab`s to select all three, then `enter`. Or if you're a bit indecisive about which files to choose at the beginning: `up`, `tab`, `up`, `up`, `tab`, `up`, `up`, `tab`, `enter`.

Wouldn't it make more sense if it's just: `up`, `tab`, `tab`, `tab`, `enter`?
Basically, since the cursor starts at the bottom of the list, it's just more natural for it to go up as a default direction.
",chaoren,2016-06-23 17:20:43
452,2015-12-18 04:53:49,"Ah, I just noticed `ctrl-tab` does this. But I think `tab` (default movement) should go up, and `ctrl-tab` the other way around. Even in your demo gif, you do up selections.
",chaoren,2016-06-23 17:20:43
452,2015-12-18 05:22:36,"Yeah, when I first implemented multi-selection [two years ago](https://github.com/junegunn/fzf/commit/ddf6e5ef1e55ae29cce1ab13c509581cb04c36a8) when fzf was still in Ruby, I thought it would be more conventional that `tab` brings your cursor down, and ever since then, I've kept it that way not to break backward-compatibility. And it's true that I'm almost always using `shift-tab`, unless `--reverse` is set. Maybe it's finally time for a change? Making `tab` move cursor away from the prompt, `shift-tab` the opposite. Is it better? Can it be confusing when we use `--reverse`? I wonder what others think.

Until I decide to change the default and release the next version, you can change the default with `--bind` option in `$FZF_DEFAULT_OPTS`.
",junegunn,2016-06-23 17:20:43
452,2015-12-18 05:46:19,"Yeah, I think more opinions would be nice.
I also think that consecutive `ctrl-tab`s should cancel out consecutive `tab`s. My hypothesis is that this would be a more useful purpose.

Currently, if we have this:

<S_CODE_TOKEN>

After `tab`, `tab`, `tab`, `ctrl-tab`, `ctrl-tab`, `ctrl-tab` it would become:

<S_CODE_TOKEN>

Again, more opinions would be nice.
",chaoren,2016-06-23 17:20:43
452,2016-01-13 17:41:06,"I'm going to add `toggle-in` and `toggle-out` actions in the next release. See the above commit for the details.

Your suggestion on cancelling out consecutive tabs is interesting and will be useful in that particular case. But I feel that it's going to be confusing in some other cases, so I'd like to just keep it simple.
",junegunn,2016-06-23 17:20:43
452,2016-06-23 17:20:43,"Closing due to lack of community interest.
",junegunn,2016-06-23 17:20:43
452,2016-11-14 15:59:16,"I bound this manually, as I found myself always hitting `<tab><ctrl-p><ctrl-p>` (because `<shift-tab>` doesn't seem to work in neovim for some reason).

I'm not sure if it should be default, but I am really glad you have the extensible binding system to facilitate such changes in user-land.
",rosshadden,2016-06-23 17:20:43
451,2015-12-17 20:12:56,"Is there a way for FZF to close/override the empty buffer when opening splits in Vim?

For example, I open up Vim and start with an empty buffer. Then, I use FZF to select 2 files and open them in splits (CTRL-X or CTRL-V). I end up with 3 buffers: empty buffer, file-1, file-2. I would like to only see the 2 files I selected.
",chaucerbao,2015-12-18 03:20:53
451,2015-12-18 03:21:46,"Thanks for the suggestion. I like the idea and updated the vim plugin. I also updated commands in [fzf.vim](https://github.com/junegunn/fzf.vim) project.
",junegunn,2015-12-18 03:20:53
450,2015-12-17 03:14:14,"I've been a long time user of fzf (great project!), and I've tried debugging this issue multiple times to no avail. I've created an asciicast that demonstrates the bug, but it goes by kind of quickly. Here's the gist of it:
- I launch tmux in a project folder
- I launch fzf in a tmux split using the keybindings
- I type `bvh` and scroll through the results
  - note how there are some artifacts at the top that aren't part of the results
  - note how there the second option doesn't draw correctly until highlighted
- I repeat the process with `vec`
  - this time all the results are reachable, but most still don't draw correctly
- Finally for reference, I quit tmux and note that it's back to normal; everything reflows correctly.

[![asciicast](https://asciinema.org/a/6c8a3prm51fr8yrv5b5wuxlp8.png)](https://asciinema.org/a/6c8a3prm51fr8yrv5b5wuxlp8)

I'm using
- fzf 0.11.1
- zsh
- tmux 2.0
- iTerm2
- OS X

I thought for a long time that it might have been because I have a custom terminal info file that defines `xterm-256color-italic` for italics in the terminal, but I can reproduce it by completely disabling this and just using `xterm-256color`.
",jez,2015-12-19 16:49:11
450,2015-12-17 03:26:28,"No, you shouldn't be using `xterm-*`. See #176.
",junegunn,2015-12-19 16:49:11
449,2015-12-15 08:29:37,"Grep has this option : 

> -n, --line-number
>        Prefix each line of output with the 1-based line number  within  its  input  file.   (-n  is
>        specified by POSIX.)

This is useful when you would like to know the line the user selected, for example if multiple lines have the same content but the position in the file matters (which could be useful for a log searcher I am writing).
",netei,2015-12-15 09:04:47
449,2015-12-15 08:35:41,"http://superuser.com/questions/10201/how-can-i-prepend-a-line-number-and-tab-to-each-line-of-a-text-file

Does this help?
",junegunn,2015-12-15 09:04:47
449,2015-12-15 09:04:47,"Indeed, that does the trick combined with --delimiter and --nth
",netei,2015-12-15 09:04:47
448,2015-12-12 22:28:55,"Using the following options with zsh crashes:

 thread #1: tid = 0x44f9d9, 0x00007fff9cf00154 libsystem_c.dylib`wmemcmp + 14, queue = 'com.apple.main-thread', stop rea
son = EXC_BAD_ACCESS (code=1, address=0x0)
    frame #0: 0x00007fff9cf00154 libsystem_c.dylib`wmemcmp + 14
libsystem_c.dylib`wmemcmp:

<S_CODE_TOKEN>
",fishman,2016-06-23 17:04:38
448,2015-12-23 14:42:48,"Thanks for the report, but with the above snippet in my .zshrc, I can't reproduce the issue on my machine with zsh 5.0.8 (x86_64-apple-darwin15.0). Consider reinstalling or upgrading your zsh.
",junegunn,2016-06-23 17:04:38
447,2015-12-11 07:23:38,"I just installed this on my server via ssh and got this error when I pressed `CTRL+R`:

<S_CODE_TOKEN>
",sbrl,2017-01-19 21:25:51
447,2015-12-11 07:38:44,"Can you tell me more about your server?
",junegunn,2017-01-19 21:25:51
447,2015-12-11 07:43:28,"It's a Classic VPS from OVH. I'm running Ubuntu 15.10, with a uname of

Linux starbeamrainbowlabs.com 2.6.32-042stab111.12 #1 SMP Thu Sep 17 
11:38:20 MSK 2015 x86_64 x86_64 x86_64 GNU/Linux

I connect to it via SSH - I do have access to it's console, but that 
uses the web interface and it's kinda ugly - I much prefer SSH. I can't 
change my kernel, interestingly enough - OVH update it automagically for 
me. Other than that, I have full root access and can do what ever I want.

I have a single virtual core running at 2GHz I think, 1GB or RAM, and 
10GB of hard drive space.

On 11/12/15 07:38, Junegunn Choi wrote:

> Can you tell me more about your server?
> 
> —
> Reply to this email directly or view it on GitHub 
> https://github.com/junegunn/fzf/issues/447#issuecomment-163866119.
",sbrl,2017-01-19 21:25:51
447,2015-12-11 08:16:07,"- Do you have no problem opening other TUI programs, like vim, top, etc?
- Do you use `ssh` command to connect? Then try using `-t` option which forces pseudo-terminal allocation.
",junegunn,2017-01-19 21:25:51
447,2015-12-11 08:27:45,"- Nope, I don't have problems using vim and top.
- Yes, I do use ssh to connect on Linux. I also use PuTTY when I'm at
  university, but I am not in a position to test that. I've tested it
  with -t, but that doesn't help.

Here's an extract from htop: http://i.imgur.com/5eaR1xB.png

Edit: Image disappeared for some reason.
",sbrl,2017-01-19 21:25:51
447,2015-12-11 08:36:23,"Interesting.
- Is ruby available on the server? If so, can you check the output of `ruby -rio/console -e'p IO::console'`?
- And `cat /proc/tty/drivers`
",junegunn,2017-01-19 21:25:51
447,2015-12-11 08:44:06,"Here's an extract from my terminal:

<S_CODE_TOKEN>
",sbrl,2017-01-19 21:25:51
447,2015-12-12 16:52:47,"What is the output of `tty` command?

(We can find the file name of the terminal with the command. However, we _can't_ use the output instead of hard-coded `/dev/tty` since fzf is usually used as a filter where stdin is not the terminal)
",junegunn,2017-01-19 21:25:51
447,2015-12-12 19:01:15,"Right, I _think_ I understand. Here's  the output of the `tty` command:

<S_CODE_TOKEN>
",sbrl,2017-01-19 21:25:51
447,2015-12-13 15:39:18,"Wish I could help, but I can't simulate such environment neither on linux nor on osx where `/dev/tty` is unavailable but `tty` command succeeds.

When I connect to a remote host via ssh with `-T` option which disables pseudo-terminal allocation, `/dev/tty` becomes unavailable and fzf fails with the same error you reported, but `tty` command as well fails and vim or top do not work smoothly as expected.

<S_CODE_TOKEN>
",junegunn,2017-01-19 21:25:51
447,2015-12-13 16:36:24,"Is there anything I can do to help?
",sbrl,2017-01-19 21:25:51
447,2015-12-13 17:18:48,"Hmm, can you try connecting to the server with `-tt` option, e.g. `ssh -tt ...`, or maybe even `-ttt` though I'm not sure if it makes any difference, but some people suggested using `-ttt`, so.

Excerpt from the man page:

<S_CODE_TOKEN>
",junegunn,2017-01-19 21:25:51
447,2015-12-14 06:45:00,"@junegunn Nope, no luck with `-ttt`. I still get `/dev/pty/0`. Here's the output from the above commands again whilst logged in with `-ttt`:

<S_CODE_TOKEN>

I could perhaps create you a limited temporary account on my server if you are unable to replicate a suitable testing environment.

A bit more information about my server: It's virtualized using OpenVZ, and I'm using the latest RHEL kernel to my knowledge.
",sbrl,2017-01-19 21:25:51
447,2015-12-14 12:28:54,"I've just tried PuTTY, but I still get pty/0.
",sbrl,2017-01-19 21:25:51
447,2015-12-14 12:42:30,"Another update:

I've taken a look at the code, and think the problem lies in src/curses.go on line 259 (I haven't learnt go though). The code makes the assumption that `/dev/tty` is available, when in reality it isn't always. Perhaps a better approach would be this:
- Run the `tty` command. If it succeeds, then try opening the path that it returns.
- If it fails, try opening `/dev/tty`.
- If that fails, panic.

That would catch every possible scenario.
",sbrl,2017-01-19 21:25:51
447,2015-12-14 14:00:56,"> I still get /dev/pty/0

The output itself is not invalid. The absence of `/dev/tty` and other terminal programs still working nevertheless is the situation I've never experienced and fzf is not the only program that assumes the existence of `/dev/tty`. e.g. https://gitlab.com/procps-ng/procps/blob/master/ps/global.c#L136

I briefly mentioned about the approach you suggested in [the previous comment](https://github.com/junegunn/fzf/issues/447#issuecomment-164167780). STDIN to fzf is usually not terminal (e.g. `history | fzf`) so tty command will fail and will not give the file name we can use (`history | tty` fails).

> I could perhaps create you a limited temporary account on my server if you are unable to replicate a suitable testing environment.

Probably this is the only way I can take a look at the problem, though I'm not sure if I'll be able to find the solution. It would be much better if you could create a Dockerfile that can be used to create a virtual machine with the same environment locally.
",junegunn,2017-01-19 21:25:51
447,2015-12-14 19:14:12,"Docker file? How do I do that? I haven't encountered docker before.
",sbrl,2017-01-19 21:25:51
447,2016-02-07 01:54:57,"I haven't been able to find a way not to rely on `/dev/tty` for getting key presses when stdin is redirected. `/dev/tty` is a [standard](https://www.kernel.org/doc/Documentation/devices.txt) linux device name and the absence of it usually means non-interactive terminal. Any help is appreciated.
",junegunn,2017-01-19 21:25:51
447,2016-02-07 09:04:00,"@junegunn If I open `/dev/tty` on my laptop with `cat`, anything I type into it get's echoed back as expected. If I do the same on the server, I get a permission denied.

If, however, I run the `tty` command, on the server it returns `/dev/pty/0`, and on my laptop it returns `/dev/pty/4`. Opening them both with `cat` on their respective machines works like a charm.

Would it be possible to try opening `/dev/tty`, and if that fails run the `tty` command to determine the terminal to try next?
",sbrl,2017-01-19 21:25:51
447,2016-02-07 13:29:53,"No, like I said above, `tty` command is not the answer. We normally use fzf with stdin redirection, e.g. `history | fzf`. And what do we get when we do `history | tty`? `not a tty` error.

By the way, I have never seen `/dev/tty` missing on interactive shell on Linux servers. RHEL, Centos, Ubuntu, Nixos, Arch linux, NixOS, never had the problem. Have you tried contacting OVH about it?
",junegunn,2017-01-19 21:25:51
447,2016-02-08 06:59:37,"@junegunn Ah I see. That _is_ a problem. I have just tried contacting OVH and pointed them towards this bug - hopefully I'll get a response in a day or two.

Here's the message I sent:

> Hello,
> I have recently been taking a look at some software that I wanted to install on my VPS, but the software in question is unable to open /dev/tty, and the developer has advised me  to contact you.
> 
> Here's a link to the issue with the software in question: https://github.com/junegunn/fzf/issues/447
",sbrl,2017-01-19 21:25:51
447,2017-01-17 17:13:16,Did you get any response?,junegunn,2017-01-19 21:25:51
447,2017-01-19 21:25:48,"@junegunn Thanks for reminding me to update this issue! I think I did, yeah, but it boiled down to the virtualisation tool they used for the 2014 range of VPSes. I'm renting a different (much better!) server now, so it should work. I'll check it out :D",sbrl,2017-01-19 21:25:51
446,2015-12-11 03:21:58,"- Don't assume ~/.fzf.bash exists.
- Source the current script for `__fzf_select__`.
- Forward `$PATH`.
- Dynamically select which `__fzf_select__` to use.
",chaoren,2015-12-12 16:11:02
446,2015-12-11 04:40:29,"Thanks! I see no problem with the first commit. But the second one seems to change the behavior of the key bindings when used with tmux.
1. I see an extra space is appended before the cursor as soon as I press CTRL-T
2. The selected items are appended at the end of the command-line regardless of the cursor position.
   - Note that inserting at any position is currently [not implemented in vi-mode](https://github.com/junegunn/fzf/blob/0.11.1/shell/key-bindings.bash#L78)
",junegunn,2015-12-12 16:11:02
446,2015-12-11 05:38:08,"Oh whoops. I thought those macros were the same. Is there a reason you're not using bind -x? Seems like it would make everything much easier.
",chaoren,2015-12-12 16:11:02
446,2015-12-11 05:54:24,"I'll see if I can rewrite the other two with bind -x as well.
",chaoren,2015-12-12 16:11:02
446,2015-12-11 07:13:49,"Ugh, sorry, that change breaks non-tmux CTRL-T.
",chaoren,2015-12-12 16:11:02
446,2015-12-11 07:23:44,"No hurries :) Thanks for looking into this.
",junegunn,2015-12-12 16:11:02
446,2015-12-11 08:37:23,"Okay, now the changes are strictly limited to tmux.
",chaoren,2015-12-12 16:11:02
446,2015-12-11 16:12:47,"Hmm, for some reason, now bash redraws the same line when I press CTRL-T.

<img width=""682"" alt=""screen shot 2015-12-12 at 1 10 56 am"" src=""https://cloud.githubusercontent.com/assets/700826/11748774/48504172-a06d-11e5-90b1-2e642d439205.png"">

Actually this problem is not new to me. I don't remember exactly, but maybe it was the reason I decided not to use `bind -x`, but I'm not sure.
",junegunn,2015-12-12 16:11:02
446,2015-12-11 16:34:48,"Weird. I'm not seeing that either with or without the tmux pane.
<img width=""731"" alt=""screen shot 2015-12-11 at 08 33 14"" src=""https://cloud.githubusercontent.com/assets/10055601/11749334/ecd8ee2e-9fe1-11e5-9813-b4002f2c4d80.png"">
What version of bash are you using?
",chaoren,2015-12-12 16:11:02
446,2015-12-11 16:46:41,"Oh right, it's only reproducible on bash 3.2, the system default bash on OS X (`/bin/bash`). I installed bash 4 using Homebrew and it doesn't have the problem.

I believe many OSX users are still using bash 3, and I do not want to force them to switch their default shells. How about if we keep the legacy implementation without `-x` as well and choose it depending on `$BASH_VERSION`? Maybe we can remove the part when OS X finally updates its default bash version.
",junegunn,2015-12-12 16:11:02
446,2015-12-11 16:58:03,"OSX may be stuck on bash 3 for a long time, because of GPL v3.
",justinmk,2015-12-12 16:11:02
446,2015-12-11 16:59:44,"@justinmk Ha, didn't know that! :bulb: 
",junegunn,2015-12-12 16:11:02
446,2015-12-12 16:11:25,"@chaoren Works perfectly. Thanks!
",junegunn,2015-12-12 16:11:02
445,2015-12-10 22:17:25,"I decided to try out fzf today and installed it on my MacBook Pro (OS X 10.10.5) though brew (fzf version 0.10.9). The interface itself seems very response. If I hit alt-c I get a very usable fuzzy finding interface, but once I've selected the file itself the `cd` takes a couple of seconds on average and sometimes can take several seconds. I tried starting zsh without any of my configuration and I don't have any configuration in bash but both are still very slow once the file has been selected. This also seems to happen to a lesser extent in the text replace widget too (ctrl-t). The GIFs in the README seem to show much better performance after selection of the file than I'm experiencing. I thought it may have been fixed in a newer version so I installed from Git and I'm experiencing the same behavior.

The system itself is mostly idle so I don't think this should be happening, but I haven't seen any other issues about this so maybe it's unique to something on my system. I'm not exactly sure how to start debugging this, but I can reproduce it without any configuration. 

Other than this :+1: 

edit: I should also mention, this doesn't seem to happen if I run `fzf` directly and the reverse search functionality also doesn't seem affected. 
",bturrubiates,2015-12-10 22:33:26
445,2015-12-10 22:33:26,"Oh, my fault. Figured it out, I didn't realize that `fzf` was trying to search through an NFS share I had mounted. 
",bturrubiates,2015-12-10 22:33:26
445,2015-12-11 01:13:32,"Alright, note that you can change the command fzf uses for those key bindings with `FZF_CTRL_T_COMMAND` and `FZF_ALT_C_COMMAND`.
",junegunn,2015-12-10 22:33:26
444,2015-12-10 11:50:21,"When using fzf-history command with `<Ctrl>-R`, I sometimes search for small commands like `og ls` (a custom command I have created).

However, since the ""words"" are very short, Typing `og` and `ls` won't be filtering the history sufficiently, and some non-relevant commands are showing up. I then have to manually move up and down in fzf to select the command.

It would be great to be able to include a space in a search query, by for example escaping the space, eg writing : 

`og\ ls`

which would take ""og ls"" as one single search query, instead of searching for `og` and `ls` separately`

I have `--exact` in my `FZF_DEFAULT_OPTS`, but I think that feature would be useful whatever your config is
",netei,
444,2015-12-10 14:27:48,"Then the question is how we are going to match literal `\`. And I really don't want to introduce something like `\\` for that. I'm okay with fzf not covering 100% of cases if it makes it simpler.

So, the options are:
- `CTRL-R` to toggle sort. Does it help?
- `--no-extended` (or `+x`) in `$FZF_DEFAULT_OPTS`. I know it's not ideal, even we make it possible to apply it only on `CTRL-R`
- `--no-exact` and `ogls` instead of `og ls` (and also with `CTRL-R`)
",junegunn,
444,2015-12-15 08:26:51,"- `CTRL-R` doesnt help that much because the words I search for are so short that the matches are not 
- I use extended mode a lot, so I wouldn't change it in the config, maybe it would be great to be able to change it at runtime, but I already know that you don't want to introduce that for now
- I've switched to exact mode because it is what works best for me when I have an input with long characters (my history) and because they were to many bad matches without it

The problem could also occur with all other characters that have specific meaning (`'` , `^`, `$` , `|`)
",netei,
444,2016-01-04 04:18:44,"> The problem could also occur with all other characters that have specific meaning (' , ^, $ , |)

True, but the issues with those chars are limited as they are interpreted as such only when they appear at certain positions, i.e. `'` and `^` at the beginning of the search term, `$` at the end, and `|` should appear alone with surrounding spaces.

Dynamic switching of search mode is somewhat tricky as it involves
- Cache invalidation, one of the hardest problems in computer science :)
- Introducing visual cues of the current mode
  - like `toggle-sort` appending `/S` to the info line
",junegunn,
443,2015-12-10 04:09:29,,leiserfg,2016-12-14 06:37:27
443,2015-12-10 14:15:20,"Thanks. We have to make the following prefixes work correctly with ctrl-r:
- `echo $PATH`
- `echo $(`
- `echo 'foo`
- `echo ""foo`
- `echo -e ""foo\nbar""`
- `echo -e ""foo\rbar""`
",junegunn,2016-12-14 06:37:27
443,2015-12-10 15:55:05,"Last commit works with substitutions but not with quotes (it's look like commandline parse before return and therefore remove the quotes ) so if you type `echo ""foo`  ctrl+r the query will be `echo foo`.
",leiserfg,2016-12-14 06:37:27
443,2015-12-10 16:17:14,"It's failing because  I remove the temporal dir on the script but not on the installer. Later I'll write a way to use multilines completions with ctrl+r. Now it's time for me to lunch :D 
",leiserfg,2016-12-14 06:37:27
443,2015-12-10 16:44:36,"No hurries :)
",junegunn,2016-12-14 06:37:27
443,2016-05-06 10:06:40,"Heck of a lunch pause. Snark apart, how is the status on this?
",kopischke,2016-12-14 06:37:27
442,2015-12-10 00:40:15,"A very recent commit seems to cause an error with `**` tab completion:

<S_CODE_TOKEN>

It also breaks fzf.vim features when a pane is zoomed in a multi-pane tmux window (e.g. `:Files`). The features don't break in unzoomed panes in multi-pane windows, or in single-pane windows.

Tested on Arch with rebuilt 0.11.1 release.
",atweiden,2015-12-10 04:29:46
442,2015-12-10 02:24:23,"Hi, thanks for the report. Yes, we did update the script so that fzf-tmux can still split the screen even if the pane is zoomed (see #433), but I can't seem to reproduce the problem you described. Can you check what's going on with `#!/bin/bash -x`?

/cc @pokey
",junegunn,2015-12-10 04:29:46
442,2015-12-10 04:20:32,"After adding `-x` to the fzf-tmux executable, I'm not able to get a debug message. When the error occurs, I can either hit <kbd>Enter</kbd> to do `vim file**`, <kbd>Ctrl-C</kbd> to cancel, or <kbd>Tab</kbd> a few more times to get a regular readline tab completion.

The command `fzf-tmux -d 40%` works fine on the console:

<S_CODE_TOKEN>
",atweiden,2015-12-10 04:29:46
442,2015-12-10 04:29:46,"I had forgotten to diff my fzf-tmux executable (the one included in the 0.11.1 release), with git HEAD. For Arch users, this is resolved with [fzf-git](https://aur.archlinux.org/packages/fzf-git/) until the next point release.
",atweiden,2015-12-10 04:29:46
442,2015-12-10 14:08:01,"A fresh clone of this repo gives fzf-tmux with correct execute permission.
",junegunn,2015-12-10 04:29:46
441,2015-12-09 16:36:01,"Hello,

It would be nice to have the option to tweak the keybindings in `fzf.{bash,zsh}` as well as the default options (I like reverse and more colors). I copied and modified it, but then I can't benefit from future improvements in the functions. 

Also, is there a documentation on how to do custom color scheme with `--color`?
",guiniol,2016-06-23 17:05:58
441,2015-12-10 14:18:02,"> tweak the keybindings

You'll be able to override the key bindings only without changing the implementation with `bind` command on bash, and `bindkey` on zsh after sourcing `~/.fzf.*` in your configuration file. I know it's not the most easiest thing to do, but I don't think I want to add more configuration variables at this point.

> the default options

Have you tried setting up `$FZF_DEFAULT_OPTS`?

<S_CODE_TOKEN>

> Also, is there a documentation on how to do custom color scheme with --color?

See `man fzf` for the details. Also check out [the wiki page](https://github.com/junegunn/fzf/wiki/Color-schemes).
",junegunn,2016-06-23 17:05:58
441,2015-12-10 15:15:39,"> You'll be able to override the key bindings only without changing the implementation with bind command on bash, and bindkey on zsh after sourcing `~/.fzf.*` in your configuration file. I know it's not the most easiest thing to do, but I don't think I want to add more configuration variables at this point.

That would be fine by me, but since the keybindings are explicitely defined in `~/.fzf.*`, previous keybindings set in another place are removed. Also, if I change the history widget keybinding, then the sort toggle is not changed. Maybe a solution would be to have variables like `$FZF_DEFAULT_OPTS` for the keybindings? Then again, maybe it's only me.

> Have you tried setting up `$FZF_DEFAULT_OPTS`?

I tried, but it didn't change anything so I figured it wasn't for the functions with keybindings. I must have done something wrong and will try again.

> See man `fzf` for the details. Also check out [the wiki page](https://github.com/junegunn/fzf/wiki/Color-schemes)

I missed that page... sorry
",guiniol,2016-06-23 17:05:58
441,2016-06-23 17:05:58,"We now have more options for those key bindings:

https://github.com/junegunn/fzf#key-bindings-for-command-line
",junegunn,2016-06-23 17:05:58
441,2016-06-23 17:20:29,"Nice. I'll try that as soon as I can.
Thanks a lot.
",guiniol,2016-06-23 17:05:58
440,2015-12-09 14:01:37,"https://github.com/junegunn/fzf/issues/436

Todo:
- [ ] Don't hardcode `~/.config/fish/fish_history`
",tomfitzhenry,
440,2015-12-09 14:04:28,"I'm beginning to think the poor multiline handling is a bug against fish's `history`, and that we shouldn't work around it in `fzf`. I'll raise this in `fish`.
",tomfitzhenry,
440,2015-12-09 15:46:27,"Thanks for looking into this. Note that `tac` is not available on OS X and `tail -r` can be used instead.

EDIT: Oh, okay, you're not using `tac` command here :)
",junegunn,
440,2015-12-09 16:19:40,"fish_history can   be on ~/.local/share/fish/fish_history too.
Look at 
https://github.com/fish-shell/fish-shell/commit/2971887bbdd34813c86bd3e2f1959e4f608eb4f0
",leiserfg,
439,2015-12-09 01:36:35,"I think this method of checking whether we're in a tmux session is more robust.  Using `$TMUX_PANE` doesn't work when I do something like `bind-key t run -b foo`, where `foo` is a script that uses `fzf-tmux`.
",pokey,2015-12-09 03:43:42
439,2015-12-09 03:43:48,"Merged, thanks!
",junegunn,2015-12-09 03:43:42
439,2015-12-09 05:32:03,"You're welcome!
On Tue, Dec 8, 2015 at 7:43 PM Junegunn Choi notifications@github.com
wrote:

> Merged, thanks!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/pull/439#issuecomment-163095775.
",pokey,2015-12-09 03:43:42
438,2015-12-08 19:25:14,"I know this is probably not the right place to ask but anyway: Why not include the two functions FZFTags, FZFTagsBuffer here:
https://www.reddit.com/r/vim/comments/3f0zbg/psa_if_youre_using_ctrlp_use_this_maintained_fork/

by default in FZF? I guess it would make sense as it is useful and a lot of people are coming fromctrlp
",solars,2015-12-09 03:46:10
438,2015-12-09 03:46:10,"Thanks for the suggestion but as [noted on the README page](https://github.com/junegunn/fzf#usage-as-vim-plugin), this repository only provides the basic Vim integration. You can check out [fzf.vim](https://github.com/junegunn/fzf.vim) project.
",junegunn,2015-12-09 03:46:10
437,2015-12-08 10:03:16,"- uname:
  `Linux 4.2.5-1-ARCH #1 SMP PREEMPT Tue Oct 27 08:13:28 CET 2015 x86_64 GNU/Linux`
- zsh --version
  `zsh 5.2 (x86_64-unknown-linux-gnu)`

Since e99731ea852d1faac5390594cd980708edf826cf the ALT-C find shortcut is broken for me. I can get it back to work if I revert `shell/key-bindings.zsh` to the it's parent commit with:

<S_CODE_TOKEN>
",rhabbachi,2016-01-01 18:47:48
437,2015-12-08 10:07:32,"Thanks for the report. Since it's not reproducible for me, I need your assistance to examine the problem. I assume some of your zsh configuration is not compatible with the change. Any idea? Can you try again with an empty zsh configuration? Nothing but fzf.
",junegunn,2016-01-01 18:47:48
437,2015-12-08 10:20:20,"@junegunn Yeah I will try to do that.
Meanwhile if I execute only the find command in a prompt I get an error message:

<S_CODE_TOKEN>
",rhabbachi,2016-01-01 18:47:48
437,2015-12-09 03:50:12,"You have to replace `\\` with `\` if you want to execute the command directly without eval.

<S_CODE_TOKEN>
",junegunn,2016-01-01 18:47:48
437,2016-01-01 18:47:47,"Thank you @junegunn. After a while I couldn't reproduce the issue. Closing.
",rhabbachi,2016-01-01 18:47:48
436,2015-12-08 00:27:29,"## Steps to reproduce:

First execute a multiline command, e.g.

<S_CODE_TOKEN>

Then try to retrieve that: ^r echo
## Expected:

fzf to return...

<S_CODE_TOKEN>
## Actual:

fzf returns...
`echo $i`
",tomfitzhenry,
436,2015-12-08 00:29:43,"This works fine in bash (related: https://github.com/junegunn/fzf/issues/146 ) and zsh (related: https://github.com/junegunn/fzf/issues/142 ).
",tomfitzhenry,
436,2015-12-08 00:44:02,"The problem is that fzf's fish plugin uses `history` (see https://github.com/junegunn/fzf/blob/a1db64e7b1588bc44dccd3b3895a075977f70ce4/shell/key-bindings.fish#L29 ) will print multiline commands as multiple separate commands, e.g.

<S_CODE_TOKEN>
",tomfitzhenry,
436,2015-12-08 01:21:01,"Thanks for the report, but unfortunately I don't know how to fix this, I don't use fish, so.. Got any idea?
",junegunn,
436,2015-12-08 12:27:52,"`cat ~/.config/fish/fish_history | grep '^- cmd' | cut -d ' ' -f 3-` could be used as an alternative to `history`, but it is hacky.

This returns a string with escaped newline characters in, e.g
`for i in 1 2 3 \n echo $i \n end`
I need to find a way to un-escape those escaped newline charcaters, so it appears as:

<S_CODE_TOKEN>
",tomfitzhenry,
436,2015-12-09 01:59:29,"For un-escape just use printf.
",leiserfg,
436,2015-12-09 20:13:22,"In fish the $history var holds all the the commands as an array. It could be used to solve it without hack the history file. 
",leiserfg,
436,2016-02-10 14:28:46,"The best way to deal with that would be adding `-0` flag to Fish `history` that would split history entries using `\0` instead of newline.
",hauleth,
435,2015-12-07 21:40:21,"In zsh under tmux, if I have a partial command typed like `foo $(bar` and I try to use `C-R` to search command history, fzf attempts to evaluate the subshell rather than passing the literal command string through. Because the subshell interpolation is unclosed, it then hangs. I have to kill the fzf-tmux process from another shell.

I can verify this because `C-R` on `foo $(echo bar)` gets sent through to fzf as `foo bar`.
",ggilder,2015-12-08 02:09:37
435,2015-12-08 01:08:24,"I believe I fixed the issue a while ago; see #404. Are you running the latest version?
",junegunn,2015-12-08 02:09:37
435,2015-12-08 02:05:22,"I just tried updating (to 0.10.9) and the problem still occurs unfortunately :cry: 
",ggilder,2015-12-08 02:09:37
435,2015-12-08 02:06:13,"Oh, I see that commit is probably not released yet. Let me try on master
",ggilder,2015-12-08 02:09:37
435,2015-12-08 02:09:37,"Yup, works fine on master. By the way should some version of 0.11.x be released on Homebrew?
",ggilder,2015-12-08 02:09:37
435,2015-12-08 02:19:52,"Yeah, I don't use homebrew to install fzf so it was not my priority, and I was hoping someone sends a PR for the new tag to Homebrew; as in https://github.com/Homebrew/homebrew/pull/45720
",junegunn,2015-12-08 02:09:37
434,2015-12-07 09:55:47,"if tmux option is enabled:

`set -g focus-events on`

(This option is required for [vim-tmux-focus-events](https://github.com/tmux-plugins/vim-tmux-focus-events) plugin)

fzf adds characters to vim when I run fzf

![](https://habrastorage.org/files/3e9/30c/6c7/3e930c6c70b1439eb788290462aa27f2.png)

maybe this is not issue, but it would be interesting to find a solution to so solve this problem.

I tried to add settings

<S_CODE_TOKEN>

but it did not help.

*\* UPD *\* my shortcut to run Files command

<S_CODE_TOKEN>

Thanks!
",aliev,2016-06-23 17:08:10
434,2015-12-07 16:13:02,"Thanks for the report. I added `set -g focus-events on` to my [tmux.conf](https://github.com/junegunn/dotfiles/blob/master/tmux.conf) (I still don't know what the option is for though), reloaded the config, but I can't seem to reproduce the issue you reported.
",junegunn,2016-06-23 17:08:10
434,2015-12-07 18:00:52,"@junegunn

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

very usable.

I think same issue https://github.com/tmux-plugins/vim-tmux-focus-events/issues/2
",aliev,2016-06-23 17:08:10
434,2016-06-23 17:08:10,"https://github.com/tmux-plugins/vim-tmux-focus-events/issues/2#issuecomment-87863831
",junegunn,2016-06-23 17:08:10
433,2015-12-06 21:58:08,"Here's a slightly hacky approach to supporting zoomed windows:
1. Create temporary window and move the zoomed pane to the tmp window
2. Do the normal fzf-tmux thing
3. Move the zoomed pane back to the original window, kill the tmp window, and re-zoom

It's a bit fragile, for a couple reasons:
- If the user starts moving around windows while fzf-tmux is open they'll notice that something is odd
- If the user tries to select one of the hidden panes while fzf-tmux is open they'll notice that they are not there

I generally don't do much tmuxing around while fzf is open, though, so this seems good enough for my workflow.  Btw, the approach of creating a tmp window is based on this stack overflow answer:

http://superuser.com/a/357799
",pokey,2015-12-08 01:56:06
433,2015-12-06 22:00:10,"Also, for cross-reference this is an alternate fix to issues #196 and #303
",pokey,2015-12-08 01:56:06
433,2015-12-07 16:06:02,"Thanks, it's a clever hack and I like it.

Just a couple minor suggestions:

<S_CODE_TOKEN>

So what do you think? If you think they're okay, please update your commit.

(I wonder why the test is failing though, I'll look into it)
",junegunn,2015-12-08 01:56:06
433,2015-12-08 01:13:23,"Nice I like the indicator :smile:.  Strange that it's now passing the tests...
",pokey,2015-12-08 01:56:06
433,2015-12-08 01:23:44,"Thanks, one last request: we no longer use `s:tmux_not_zoomed` function in the vim plugin. So can you remove the function and squash the commits into one?
",junegunn,2015-12-08 01:56:06
433,2015-12-08 01:29:22,"Yes, I had noticed that; wasn't sure if you wanted to keep it around for
potential future use.  Will remove and squash commits

On Mon, Dec 7, 2015 at 5:23 PM Junegunn Choi notifications@github.com
wrote:

> Thanks, one last request: we no longer use s:tmux_not_zoomed function in
> the vim plugin. So can you remove the function and squash the commits into
> one?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/pull/433#issuecomment-162725741.
",pokey,2015-12-08 01:56:06
433,2015-12-08 01:56:12,"Thanks :+1: 
",junegunn,2015-12-08 01:56:06
433,2015-12-08 01:59:15,"Of course!  Amazing tool, so happy to be able to help in some way :smile:
",pokey,2015-12-08 01:56:06
432,2015-12-03 15:31:19,"It's my implementation  on fish

<S_CODE_TOKEN>
",leiserfg,
432,2015-12-03 15:45:36,"So you're suggesting we make the behavior consistent across all three shells, right? Unfortunately I haven't been able to find a way to achieve that in bash. 
",junegunn,
432,2015-12-03 16:01:10,"I applied your patch like follows

<S_CODE_TOKEN>

But I'm getting 

<S_CODE_TOKEN>

Maybe I did something wrong, I don't know fish too well.
",junegunn,
432,2015-12-03 16:28:40,"If you are using a fish <= fish2.2.0 (not an development version like me) you have not the string builtin yet (sorry) so you can replace it:

<S_CODE_TOKEN>

with:

<S_CODE_TOKEN>
",leiserfg,
432,2015-12-09 15:51:22,"I noticed the patch doesn't work with non-trivial string on the command prompt.

e.g. `seq 10 | wc -l<CTRL-R>` or `echo $PATH<CTRL-R>`
",junegunn,
432,2015-12-10 01:41:38,"It looks as  you are using too much evals, I'll rewrite the fish scripts removing some of them (maybe all) and do a pull request. 
",leiserfg,
431,2015-12-01 10:56:42,"Add option for use Ctrl+J as Enter like in shell
",averrin,2015-12-01 12:43:49
431,2015-12-01 12:43:49,"`--bind ctrl-j:accept`
",junegunn,2015-12-01 12:43:49
431,2015-12-01 13:46:28,"Thank!!!
",averrin,2015-12-01 12:43:49
430,2015-11-28 21:43:55,"If I saw that correctly you forked the dependencies only to control the changes to them. I am working on a package for Gentoo Linux and that means I need to package your forks as well. Which means I add packages that are only reasonable for the fzf package.
Before doing that I would like to ask you whether you are open to putting them in vendor directory, which seems to be the way the go community is heading https://golang.org/s/go15vendor.
",Tranquility,2015-12-04 08:51:13
430,2015-11-29 04:44:18,"> only to control the changes to them

Yes, and to make sure that my build always succeeds even if the authors of the dependent libraries suddenly decide to put them down, which is extremely unlikely, but you see the point.

Anyway, I haven't migrated to Go 1.5 yet because there is no compelling reason to do so, but I'm open to the suggested change. I'll take a look at it when I get some time, or you can send me a PR.
",junegunn,2015-12-04 08:51:13
430,2015-11-30 09:59:34,"I'm going for vendoring + forks.
",junegunn,2015-12-04 08:51:13
430,2015-12-04 07:19:19,"Are you happy with the change? Actually I'm not so happy with it since it causes vim-plug to clone both submodules when most users don't really need them.
",junegunn,2015-12-04 08:51:13
430,2015-12-04 07:29:11,"+1 @junegunn , it makes more sense to me that the dependencies are in other repos, so that you keep only **your** source code in the repository.
",netei,2015-12-04 08:51:13
430,2015-12-04 08:17:34,"Sorry for not getting back to you earlier. Thanks for working on this. I was happy with the change, it was working nicely.

I see two ways how I can finish the package now:
1. You use your forks only as backup and import the upstream repo.  That would be nice because I can add the upstream repo to the package tree which might be useful for other packages. I don't know how much overhead that would be to you.
2. I add the forks to the Gentoo package tree. 
",Tranquility,2015-12-04 08:51:13
430,2015-12-04 08:36:21,"There is a third one:

You could move the go source into its own repository. 
",Tranquility,2015-12-04 08:51:13
430,2015-12-04 08:51:13,"Hi, sorry for reverting the change. But please understand that for me providing better experience to the users directly cloning this repo is more important that making it easier for you to package it. I'm mostly content with the status quo (moving out source codes will not make much difference) and see no good reason to abruptly change the structure at the moment.
",junegunn,2015-12-04 08:51:13
429,2015-11-24 08:04:55,"<S_CODE_TOKEN>

simple but powerful for me :smile: 
",xieyunzi,2015-11-28 03:10:52
429,2015-11-28 03:10:52,"Good stuff, thanks :)
It's worth noting that there is a [vim plugin](https://github.com/bogado/file-line) that should make the processing slightly simpler.
",junegunn,2015-11-28 03:10:52
428,2015-11-23 04:43:10,"Maybe someone want to use fzf plugin in oh-my-zsh plugin style.
So I created a [fzf-zsh](https://github.com/Treri/fzf-zsh) plugin for my own use.

But I think if fzf itself support oh-my-zsh plugin, it would be better. So I opened the PR.

The user can clone fzf repo to oh-my-zsh/custom/plugins and execute
`oh-my-zsh/custom/plugins/fzf/install --bin`, then add fzf to zsh `plugins` list

In my zshrc, I found  fzf autocompletion is broken with zsh-autosuggestion plugin,
so I only enabled fzf keybindings.

If the user didn't use zsh-autosuggestion, he can enable fzf autocompletion manually.
",Treri,2015-11-27 17:47:57
428,2015-11-27 17:47:57,"Thanks for the suggestion. But I'd rather not add dependencies to the external projects. (And please note that I use neither zsh nor oh-my-zsh)
",junegunn,2015-11-27 17:47:57
428,2015-11-28 01:25:57,"Thanks.

Maybe I should put these configs in my fzf-zsh repo😊
",Treri,2015-11-27 17:47:57
428,2015-11-28 01:55:47,"Thanks for understanding :)
",junegunn,2015-11-27 17:47:57
427,2015-11-21 14:02:01,"Probably a very stupid question.

I would like to change the color theme and add more keybindings.

However, I can't find in the manpage which config-file I should have to change colors and keybindings.

Excuse me for my ignorance.
",sirlnx,2015-11-27 17:32:00
427,2015-11-27 17:32:00,"There is no config file. Colors and key bindings are configured using `--color` and `--bind` options respectively and you can put them in `$FZF_DEFAULT_OPTS` env variable.

e.g.

<S_CODE_TOKEN>
",junegunn,2015-11-27 17:32:00
426,2015-11-19 07:53:52,"I use fzf for almost everything these days. I recently tried out neovim, and realized fzf doesn't work in some settings.

Sometimes I chain two FZF's, first I select from one list of items, then based on that selection, I then present a second list of items. In these cases, the second selection is NOT in insert mode when using neovim, which cause all my keystrokes to be interpreted by neovim instead of FZF. Here is the smallest example I could come up with that reproduces the behavior (in reality I am doing more complicated things, but the issue is the same):

<S_CODE_TOKEN>

this command will first display a list of directories in the home folder, and then (once a directory is selected) it will present a second FZF with all files in that directory. The example doesn't matter, what matters is that this works well in vim, but in neovim the second FZF is not receiving the keystrokes (I have to press i to go to insert mode).
",acornejo,
426,2015-11-19 09:13:25,"This could be related to https://github.com/junegunn/fzf.vim/issues/21. 
I think the issue is: switching from a terminal buffer to another terminal buffer, the second cannot perform ""startinsert"" successfully.
",khalidchawtany,
426,2015-11-19 16:50:51,"@acornejo Not sure why (internal) `startinsert` doesn't work, but looks like we can workaround the issue with a `feedkeys` call.

<S_CODE_TOKEN>

@khalidchawtany The same thing can be done in your case as well. Try changing `startinsert` to `call feedkeys('i')`.
",junegunn,
426,2015-11-19 16:55:04,"@junegunn yup, I can confirm this fixes the issue for me (makes sense, I was working around it by pressing i, so might as well have vim emualte that key press).

Right now I amended my scripts by sprinkling the following in the right places:

<S_CODE_TOKEN>

that being said, it would be wonderful if this fix was in fzf itself, so that user scripts don't have to care weather they are running in nvim or in plain old vim.
",acornejo,
426,2015-11-19 16:59:55,"> it would be wonderful if this fix was in fzf itself

But I'm not sure `startinsert` not working is the expected behavior. If it turns out to be a bug and neovim fixes it, we'll then have an extraneous `i`.

@tarruda Do you know why the code in the OP doesn't work as expected on neovim?
",junegunn,
426,2015-11-19 17:02:21,"good point, i missed that. don't know what startinsert is, but given the name i would certainly expect it to start insertion mode ;) so maybe I should file this issue in the neovim repo. i'll wait for @tarruda to reply
",acornejo,
426,2015-11-19 17:43:31,"https://github.com/junegunn/fzf/blob/0.11.0/plugin/fzf.vim#L359-L361

`startinsert` followed by `termopen()` is supposed to start insert mode in the term buffer. It works when `fzf#run()` is directly called, but it doesn't when we chain another `fzf#run` in the sink function as you reported. @khalidchawtany also reported a similar issue that can be concentrated as follows.

<S_CODE_TOKEN>

`startinsert` works in vim, but not on nvim.
",junegunn,
426,2015-12-05 20:39:50,"> @tarruda Do you know why the code in the OP doesn't work as expected on neovim?

I have an idea of what might be causing this: The `on_exit` callback is called while nvim is still in terminal mode, and due to the way `startinsert` is implemented(global flag, no way to queue `startinsert` commands) it doesn't work as expected when called outside normal mode. Unfortunately I can't think of a better way to work around this other than `feedkeys('i')`, but the `startinsert` implementation might be fixed later to allow this kind of use case.
",tarruda,
425,2015-11-18 21:47:04,"Not sure about the punctuation, but it should be consistent - so otherwise remove them from where they are already.
",blueyed,2015-11-19 00:59:14
425,2015-11-19 00:59:54,"Thanks, I put periods only on options with more than one sentences. Fixed the exceptions in ruby file and the go source.
",junegunn,2015-11-19 00:59:14
424,2015-11-18 19:28:36,"My `~/.bashrc` is a symlink so that I can easily manage my dotfiles. Installation of fzf replaced my symlinked bashrc with an actual file.

---

Replication:
- Use a symlinked bashrc (or zshrc)
- Install fzf
",brookskindle,2015-11-19 00:06:56
424,2015-11-19 00:06:56,"*embarrassed* This was a my bad.
Apparently my `.bashrc` was not symlinked as I thought it was and this is a non-issue.
",brookskindle,2015-11-19 00:06:56
423,2015-11-18 15:10:28,"This also fixes the completion causing a bell / flickering in case
""shwordsplit"" was not set, because then the function would return false.
",blueyed,2015-11-18 15:54:42
423,2015-11-18 15:55:00,"This is nice, thanks! 
",junegunn,2015-11-18 15:54:42
422,2015-11-18 03:35:38,"[ftpane() function](https://github.com/junegunn/fzf/wiki/Examples#tmux) work well, but when you combine it with [`split window`](https://github.com/junegunn/fzf/wiki/Examples-%28tmux%29), the output list will include a redundant pane which will be closed when `ftpane()` return,

I made a small modification, pass environment variable to indicate if we should ignore the pane or not.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",JeffChien,2015-11-18 04:53:18
422,2015-11-18 04:53:18,"Thanks, that makes good sense, and you know what, I was already using [the modified version](https://github.com/junegunn/dotfiles/blob/master/bashrc#L351-L369) myself. I'll update the wiki page.
",junegunn,2015-11-18 04:53:18
421,2015-11-17 17:51:50,,blueyed,2015-11-17 18:32:39
421,2015-11-17 18:32:43,"Thanks.
",junegunn,2015-11-17 18:32:39
420,2015-11-16 13:11:31,"Apologies if I'm just missing a configuration option.

When I use the suggested `fe()` function to find a file for editing, fzf uses my default command (Ag) and filters results that takes into account my `.gitignore` and `.agignore`. However, when I type `vim <C-t>` and launch fzf, the results set is very large, and isn't using those filters.

Is there a way to take advantage of my ignore files via Ag when I launch argument completion?
",geoffharcourt,2015-11-16 14:03:38
420,2015-11-16 14:03:38,"https://github.com/junegunn/fzf#key-bindings-for-command-line

For <kbd>ctrl-t</kbd>, there's separate `FZF_CTRL_T_COMMAND`. Note that the default command for <kbd>ctrl-t</kbd> lists both files and directories while your ag command will only list files. I once wrote [a small wrapper script](https://github.com/junegunn/agl) to address the issue.
",junegunn,2015-11-16 14:03:38
420,2015-11-16 14:04:20,"Thanks very much for the explanation!
",geoffharcourt,2015-11-16 14:03:38
419,2015-11-13 18:26:43,"Further discussion of misfiled issue at https://github.com/junegunn/fzf.vim/issues/41, related to #275. The solution described in #275 does not work for me; I'm not sure if the way NeoVim works has changed since then, or if there was additional configuration I'm missing.

I'm using NeoVim, and I want FZF to replace the content of the current split with the selector, then open the selected file in the current split. Here's what I have now:

<S_CODE_TOKEN>

This opens the selector in the current split, but when the file is selected, FZF closes the split and the file is opened in the next available split. Is there a way to prevent FZF from closing the current split?
",jamesgecko,2015-12-01 22:08:23
419,2015-11-14 03:10:10,"It works fine for me.
1. Make sure to use the latest nvim release: 0.1.0
2. Try disabling every other plugin you use and see if the problem still persists
",junegunn,2015-12-01 22:08:23
419,2015-11-18 16:41:40,"I'm using `NVIM 0.1.0 (compiled Nov  2 2015 11:53:27)` from the homebrew repo.

I've disabled every other plugin but fzf, and the behavior is identical.
",jamesgecko,2015-12-01 22:08:23
419,2015-11-18 16:46:04,"Anything suspicious in your config? You can try without any other config like follows.

<S_CODE_TOKEN>
",junegunn,2015-12-01 22:08:23
419,2015-11-18 17:42:08,"I use pathogen, so I put the following into `~/miniconfig` and ran `nvim -u ~/miniconfig`

<S_CODE_TOKEN>

No plugins loaded except for fzf, same behavior. FZF is version 0.10.9.

There is an error I've neglected to mention that happens if there's only one pane open:

<S_CODE_TOKEN>
",jamesgecko,2015-12-01 22:08:23
419,2015-11-18 18:11:00,"Still can't reproduce from my side and no error. Please test again with the following config.

<S_CODE_TOKEN>
",junegunn,2015-12-01 22:08:23
419,2015-12-01 19:33:40,"Upgraded to FZF 0.11.1 and rebuilt my entire config using vim-plug. Somewhere in there it started working properly.
",jamesgecko,2015-12-01 22:08:23
419,2015-12-01 22:08:22,"Okay. Closing the issue.
",junegunn,2015-12-01 22:08:23
418,2015-11-12 08:15:03,"I'd like to use Alt-C to change the directory. However, it always rescans the directory trees and that takes quite a long time in that my wanted directory isn't included.

Using locate | fzf is much faster. So, would it be possible to speed up the process (i.e. using locate as stdin, using a scan cache file or something) or am I doing something wrong?
",dploeger,2015-11-12 08:54:11
418,2015-11-12 08:54:11,"It's the default behavior. I [recently updated the code](#408) to use `$FZF_ALT_C_COMMAND` if defined, so you can now customize `ALT-C` with it.
",junegunn,2015-11-12 08:54:11
417,2015-11-11 17:05:20,"Typing `emacs **<TAB>` fires off `fzf` as expected but `emacsclient **<TAB>` does not.

This is in bash and I just started using `fzf` so if this is PEBCAK, please excuse and feel free to tell me to go away.
",squatched,2015-11-12 04:54:06
417,2015-11-11 17:30:04,"See #386. bash sucks. :hankey: 
",junegunn,2015-11-12 04:54:06
417,2015-11-11 17:31:12,"Maybe we should add the command to the default list? What do you think?
",junegunn,2015-11-12 04:54:06
417,2015-11-11 18:40:17,"Yeah, default command list makes sense for that since you've already got `emacs` there.

I have two additional suggestions (and first chance I get, if someone hasn't gotten to any of these already I'll submit a pull request):
1 - In the `README.md`, call out in the ""Fuzzy completion for bash and zsh"" that all commands will not work due to bash's functionality.
2 - Provide a means of extending those lists via environment variables.

Thanks for a fantastic tool, I look forward to finding new ways it can help my daily command line usage!
",squatched,2015-11-12 04:54:06
417,2015-11-12 04:55:23,"Thanks for the suggestion. I updated the command list and added the description to the README page though I decided not to add more env vars.
",junegunn,2015-11-12 04:54:06
417,2015-11-12 05:06:06,"Sounds good! Keep up the good work!

On Wed, Nov 11, 2015, 20:55 Junegunn Choi notifications@github.com wrote:

> Thanks for the suggestion. I updated the command list and added the
> description to the README page though I decided not to add more env vars.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/issues/417#issuecomment-155997884.
",squatched,2015-11-12 04:54:06
416,2015-11-10 22:31:21,"It would be nice to have possibility updating fzf prompt with text provided as a result of invoking execute(..).
It can be used for refreshing/updating candidates depending on logic in execute
",mhrebenyuk,2015-11-11 15:33:57
416,2015-11-11 15:33:57,"> It can be used for refreshing/updating candidates depending on logic in execute

I think it's beyond the scope of the feature. `execute` was designed for quickly previewing things. Heavyweight operations like changing the options or the source should be done by the shell script that wraps around fzf. `--expect` is especially useful for such purposes. You'll be able to find some good examples in [the wiki page](https://github.com/junegunn/fzf/wiki/Examples).

I'll close the issue for now. But feel free to leave some comments if you have any other suggestion or ideas.
",junegunn,2015-11-11 15:33:57
415,2015-11-09 16:14:11,"I've used fzf for some time and it has worked fine in macvim gui mode -- popping up an xterm window.  It also works in both vim and neovim's command-line interface.

But in the past couple of weeks it's stopped working at all in macvim gui.  No xterm window ever pops up and it appears that macvim simply hangs until I hit ctrl-C.

It still works fine in nvim and vim command lines.
",jsholmes,2015-11-10 14:26:15
415,2015-11-09 16:37:02,"Did you upgrade to El Capitan? Check if the commands like `xcalc` works.
",junegunn,2015-11-10 14:26:15
415,2015-11-09 16:40:10,"I did upgrade.
xcalc does work.
",jsholmes,2015-11-10 14:26:15
415,2015-11-09 16:44:19,"I also tried working around this using applescript and iterm2, which would be fine, except for:
1) iterm's applescript interface has changed significantly in recent versions (2.9+  see https://iterm2.com/applescript.html)
2) I tried fixing the applescript, but I don't know applescript really and it doesn't quite work.  here's what I tried:

<S_CODE_TOKEN>

This pops up an iterm window with fzf in it, but:
1) this window loses focus and the old macvim window reacitvates
2) even if i switch focus back to this window and then select a file, the file doesn't open and macvim never seems to be told about this selection.
",jsholmes,2015-11-10 14:26:15
415,2015-11-09 16:59:11,"I'm currently on a macbook that's still running yosemite, and xterm works just fine. I'll see if it works in el capitan later.

I'm also not really familiar with applescript, the code snippet was originally provided by @gleachkr
",junegunn,2015-11-10 14:26:15
415,2015-11-10 02:16:08,"Works for me on El Capitan. Not sure what went wrong in your case. Does `:!xterm -e bash -ci fzf` on macvim work?
",junegunn,2015-11-10 14:26:15
415,2015-11-10 14:26:15,"When I try to start xterm from a terminal, it seems to start, but I think it's displaying offscreen somewhere.  Perhaps this is because I have multiple monitors?  So I think everything is actually working, but the xterm is just offscreen.

I'll just use Ctrl-P for now in the macvim gui until xterm is fixed.  Oh well.
",jsholmes,2015-11-10 14:26:15
415,2016-05-20 01:57:34,"I'm quite confused about this.  I am migrating myself from ""vim"" on the console to ""mac_vim"", but amazingly the ""fzf"" does work in the console but refuses to work in ""mac_vim"".

I have tried `:!xterm -e bash -ci fzf` but it simply returns:

`/bin/bash: xterm: command not found

shell returned 127

Press ENTER or type command to continue
`

No matter if it's ""vim"" in the console or macvim. However if I press ""ctrl+p"" which is mapped to this:

`map <C-p> :FZF<CR>`

and in the console works perfectly however when I press `ctrl + p` in the macvim I get this error:

`Error running xterm -T ""[fzf]"" -bg ""\#1c1b1a"" -fg ""\#f8f6f2"" -geometry 156x22+0+23 -e bash -ic '/Users/felix/.fzf/bin/fzf --expect=ctrl-v,ctrl-x,ctrl-m,ctrl
-t > /var/folders/bv/y3h3jym557gccm9v1p2hnk2r0000gn/T/vr06YuC/52'&& osascript -e ""tell application \""MacVim\"" to activate""`

If you want to take a peek into my just follow this link [.vimrc](https://github.com/felixcuello/vim/blob/master/.vimrc) 

Any help will be really appreciated. Thanks!
",felixcuello,2015-11-10 14:26:15
415,2016-05-20 04:20:39,"@felixcuello 

<S_CODE_TOKEN>

meaning that you have to install xterm.

https://www.xquartz.org/

But you can use another terminal emulator instead; e.g. [iterm2](https://github.com/junegunn/fzf/wiki/On-MacVim-with-iTerm2).

Having said that, I'm not sure if you'll like the experience of fzf on macvim. fzf is a command-line program that requires a terminal emulator and macvim isn't one, so we can run it inside macvim window.
",junegunn,2015-11-10 14:26:15
414,2015-11-08 16:05:11,"In case the user has set $ZDOTDIR, the .zshrc loaded by zsh is not in $HOME, fzf ""./install --key-bindings"" creates one in $HOME but it is never loaded.
",teto,2015-11-08 16:49:20
414,2015-11-08 16:49:28,"Thanks for the report. Should be fixed now.
",junegunn,2015-11-08 16:49:20
413,2015-11-06 16:11:25,"As far as I know it can only act on highlighted entry.
",qoxxxx,2015-11-09 17:05:41
413,2015-11-06 16:16:25,"Yes, so what do you have in mind?
",junegunn,2015-11-09 17:05:41
413,2015-11-06 16:22:18,"Well, something like
- Search files with fzf
- Select some
- Use key to execute a script that take all those files in argument (gnome-open ...) 
",qoxxxx,2015-11-09 17:05:41
413,2015-11-06 16:36:58,"And you don't want to close the fzf process while doing it, right? Cause if it doesn't matter you can easily do that with the script around fzf.

To support that we'll need a separate action, because we don't want to lose the current behavior. (e.g. previewing a single entry on the cursor using execute binding and select it) I'll think about it.
",junegunn,2015-11-09 17:05:41
413,2015-11-06 16:51:58,"Closing the process, sure, but above all, it's about choosing what action to do while in fzf. 
Would be interesting to me to be able to launch fzf with multiple actions set, search, and then choose (keybinding) which one to execute. 
It would allow me to launch (almost) always the same fzf command for multiple purposes. 
I understand if that's not how fzf is intended to be used.
",qoxxxx,2015-11-09 17:05:41
413,2015-11-06 16:56:05,"Well then, have you considered using `--expect` option? e.g. https://github.com/junegunn/fzf/wiki/Examples#opening-files
",junegunn,2015-11-09 17:05:41
413,2015-11-06 17:27:52,"I didn't. I will now. Thanks ! And sorry for not seeing it before.
I still don't think the ""action on selected entries"" feature would be useless but it's up to you as I will be satisfied enough with the above example.
",qoxxxx,2015-11-09 17:05:41
413,2016-06-05 14:48:11,"I've just successfully utilized the execute-multi action. Could you tell me if there is a length limitation
for {} placeholder? It does not seem to cope with veeery looong lists.
(thanks for fzf, it's just great)
",tagwint,2015-11-09 17:05:41
413,2016-06-05 16:10:15,"@tagwint How long? It's probably the limitation of your shell (""argument list too long"").
",junegunn,2015-11-09 17:05:41
413,2016-06-05 17:24:14,"I thought that direction too, the problem is i cannot see the error message, even if I redirect the stderr
It probably depends on the total size of what {} contains. I experimented with the output of find command
the lines were of different length, but by redirecting output (printf ""%s\n"" {} > /somefile ) I could estimate 
that the limit is around 140Kbytes. I will check if shell limitation is similar to that or not.
BTW, is there a way to know the number of selected lines w/o leaving fzf, to prevent passing long arg to the execute-multi ?
",tagwint,2015-11-09 17:05:41
413,2016-06-05 18:32:47,"By more precise check, I've run into 128K limit which seems to be hard-coded MAX_ARG_STRLEN kernel parameter. Unlike the MAX_ARG paramter which can be extended in system by increasing stack size, the MAX_ARG_STRLEN cannot. I tried to increase the system stack and that did not help since {} is seemingly  interpreted as a single argument not as a numbers of arguments.
",tagwint,2015-11-09 17:05:41
413,2016-06-06 00:52:08,"> is there a way to know the number of selected lines

fzf shows the info right above your prompt: e.g. `109389/109389 (5)` Or, are you referring to something else? To be honest, I'd never imagined that someone would hit that limit, what are you using `execute-multi` for?
",junegunn,2015-11-09 17:05:41
413,2016-06-06 10:12:30,"Оf course it does show the number. I asked about how to know the number inside the script that calls fzf before it exits.  In other words the number of items in  {}  when it is in execute-multi context.
I use execute muti to handle list of files from find output from remote hosts. I select files on remote hosts using dynamic criteria on their name/location (that's where fzf is the king) -
after selection i can do some action on the found files - zip, transfer, compare, delete etc. It is much handier not to leave fzf and use execute-multi. 
",tagwint,2015-11-09 17:05:41
413,2016-06-06 11:56:21,"Hmm, no. And I can't help but feel that it's beyond the scope of fzf. fzf starts child processes using [`$SHELL`, `-c`, `COMMAND`] internally, so maybe it's possible to somehow _abuse_ the fact. i.e. overriding `$SHELL`.
",junegunn,2015-11-09 17:05:41
413,2016-06-06 13:47:46,"Ok I see the reasoning, will think of how to handle that. 
Thank you for clarifying the points.
",tagwint,2015-11-09 17:05:41
412,2015-11-06 16:00:48,"Maybe I missed something..

For example, make fzf return both jpgs and gifs :

<S_CODE_TOKEN>
",qoxxxx,2015-11-09 17:05:41
412,2015-11-06 16:09:01,"It's currently not supported.
",junegunn,2015-11-09 17:05:41
412,2015-11-09 17:24:08,"It's now available on 0.11.0.

<S_CODE_TOKEN>
",junegunn,2015-11-09 17:05:41
411,2015-11-06 14:56:32,"Is they any particular reason that you have chosen not to use readline ?

Wouldn't it remove lots of code on your side that you have to maintain, and at the same time give full readline capacity ?

I guess one problem is to integrate readline inside ncurses, here's an example of that in C, https://github.com/ulfalizer/readline-and-ncurses , I don't know if it is a hacky solution or if that technique could also be used from inside fzf.
",netei,2015-11-06 15:22:18
411,2015-11-06 15:22:18,"Thanks for the info. I had no experience using readline on ncurses and didn't know if it was possible, so that's why. Still we don't know if they work together flawlessly. I could've looked into it, but since now we have every relevant readline binding working fine (is there anything you miss? Full read-line support, such as reverse-search, rather seems like overkill to me), so there's little reason for me to take time to switch. But if someone sends me a PR that replaces the current implementation with readline, I wouldn't refuse merging it.
",junegunn,2015-11-06 15:22:18
411,2015-11-06 15:54:16,"Ok, I'm not missing anything in particular from readline for now.

I think it might be beneficial to use readline (less code, less maintenance, less documentation), but I also see that it represents some amount of work.
",netei,2015-11-06 15:22:18
410,2015-11-06 14:53:07,"fzf is now available via Cygwin's installer/package manager, so add
instructions for installing fzf using that route to README.md.
",me-and,2015-11-06 16:25:58
410,2015-11-06 15:25:30,"So you (or the maintainer of the package) succeeded to build Go binary for cygwin? I was trying to do it but have never been successful. Can you share how it is done?
",junegunn,2015-11-06 16:25:58
410,2015-11-06 15:44:54,"Me – I'm the maintainer of the package – although it's using the Ruby scripts rather than the Go binary, sadly. I'd been using fzf on Cygwin for a while, and since I'm already a Cygwin package maintainer (Git), I figured I'd add this to my remit to make it a little easier for others to use too.

The packaging details, if you're interested, are all over at https://github.com/me-and/Cygwin-fzf.
",me-and,2015-11-06 16:25:58
410,2015-11-06 16:06:24,"Ah, that's unfortunate. To be honest, I wouldn't recommend using the Ruby version anymore since it's no longer updated and lacks too many new features that the Go version has. So I don't want to give the impression that I ""officially"" support Cygwin platform by mentioning it on the README page because it's not. Even if we mention Cygwin I'd like to make it clear that the new version is not available on it and instead of giving the full details, simply point to the wiki page for Cygwin.
",junegunn,2015-11-06 16:25:58
410,2015-11-06 16:13:53,"Okay, that makes sense. I've already mentioned the Cygwin installer on the wiki page.

As I understand it, Cygwin will still benefit from the changes made to the supporting scripts, such as the changes to the Bash completion script in 0.10.9, or are those changes wholly dependent on new features in the Go version?
",me-and,2015-11-06 16:25:58
410,2015-11-06 16:15:16,"More directly related to the pull request: do you want a new PR that just says ""there's a Cygwin package, but it's using the legacy Ruby code and not officially supported"", or would you prefer to continue not mentioning it at all?
",me-and,2015-11-06 16:25:58
410,2015-11-06 16:25:58,"Some new features are already being used by those scripts, but I've been trying to keep the ruby version still usable by [doing this](https://github.com/junegunn/fzf/blob/master/fzf#L209-L214). I don't think it's sustainable.

I'd rather not put it on the README page at the moment. So I'll close the PR. But feel free to update the wiki page as you wish.

Note that I'm still very interested in providing Go binaries for windows and cygwin, but I don't own a Windows machine and I don't think I have enough experience or knowledge on that platform. I've been waiting for some help (#147), but had no luck so far.
",junegunn,2015-11-06 16:25:58
409,2015-11-06 13:27:48,"Allow `**<tab>` completion for Neovim command.
",freitass,2015-11-06 15:23:30
409,2015-11-06 15:23:38,"Thanks.
",junegunn,2015-11-06 15:23:30
408,2015-11-06 12:07:46,"Is there a reason there is `FZF_CTRL_T_COMMAND` to configure ctrl-t but no `FZF_META_C_COMMAND` to do the same for alt-c?
I'm using zsh, I don't know if its the same with other shells.
I'd prefer to use something faster than find, but currently I have to recreate the cd widget altogether.
",Eisfreak7,2015-11-07 12:36:55
408,2015-11-06 12:11:17,"It was introduced here : https://github.com/junegunn/fzf/issues/280#issuecomment-115305279
",netei,2015-11-07 12:36:55
408,2015-11-06 15:33:38,"Because there was no request for it and I'm lazy :) Updating support for bash, zsh, and fish is quite tedious so it's not something I'd like to do often. And I'm reluctant to add yet another variable when there's not much demand for it.

> I'd prefer to use something faster than find

Care to share good alternatives?

> currently I have to recreate the cd widget altogether

It isn't too bad, right? That's the ultimate way of customizing the behavior and I don't think it's a bad practice at all especially when there's been little update in the provided key bindings.
",junegunn,2015-11-07 12:36:55
408,2015-11-07 12:36:55,"I'd try locate (although that obviously wouldnt be as current as find).

Ah okay I can understand that. Redefining the widget isn't too bad a solution, I just thought since there exists a variable for ctrl-t it might just be an oversight that there is no such thing for meta-c.

Thanks for the explanation
",Eisfreak7,2015-11-07 12:36:55
408,2015-11-07 15:13:40,"Okay, I added `$FZF_ALT_C_COMMAND` for completeness' sake.
",junegunn,2015-11-07 12:36:55
408,2015-11-08 10:18:01,"Thank you
",Eisfreak7,2015-11-07 12:36:55
407,2015-11-05 16:40:49,"Would be great, just to have go dep.

Great tool, btw.
",zbindenren,2015-11-06 10:09:21
407,2015-11-05 23:56:01,"Can you elaborate a little more? This repo still contains the ancient Ruby implemetation, but it does not demand curses gem if your system can run one of the go binaries. The reason I haven't removed the old version yet is that we currently can build binaries only for linux and os x thus  have to fall back to the ruby version on other systems (e.g. cygwin)
",junegunn,2015-11-06 10:09:21
407,2015-11-06 10:09:21,"Saw too late that it is not necessary for linux.

Closing issue.
",zbindenren,2015-11-06 10:09:21
406,2015-11-04 19:44:03,"I've updated my `FZF_DEFAULT_COMMAND='ag -g """"'` in order to respect `.gitignore`.  It works fine using `CTRL-T`, but if I use `**<TAB>` completion, I still see `node_modules`.  How do I use `ag -g """"` with `FZF_COMPLETION_TRIGGER`?
",thomcom,2015-11-05 23:40:44
406,2015-11-05 04:02:49,"Unfortunately it's not configurable at the moment. `ag -g """"` is not an ideal command since it does not list the names of directories. If you see [the source code of fuzzy completion](https://github.com/junegunn/fzf/tree/master/shell), you'll notice that the command used is context-dependent (e.g. `rmdir **` will only give the list of directories). And I haven't decided how to make them configurable. Currently you'll have to copy and edit the code directly.
",junegunn,2015-11-05 23:40:44
406,2015-11-05 22:25:55,"Ok, thanks!  That explained it clearly enough that it was easy to add locally.  I see why you haven't decided how to configure it yet!  :)
",thomcom,2015-11-05 23:40:44
406,2015-11-05 23:40:44,"Alright, I'll close this for now.
",junegunn,2015-11-05 23:40:44
406,2016-10-21 01:31:30,"I just encountered this issue too. Would be nice to have a solution. Using `fzf` to navigate from high-level folders (e.g. `/projects`) is nifty but unusable without ignoring git ignored files. Maybe this should be opened and closed only once an interface for configuration has been designed?

Most of all though thanks for `fzf`!!
",jasonkuhrt,2015-11-05 23:40:44
406,2016-10-21 02:16:41,"@jasonkuhrt This is an old issue. See https://github.com/junegunn/fzf#settings
",junegunn,2015-11-05 23:40:44
405,2015-11-04 16:02:08,"Rather than just dropping this on the wiki I just wanted to post this first as I'm sure it's pretty ugly.

This works out how may rows the terminal has and which row you are on. It then starts fzf on the current row and displays the possible completion options above or below depending on which has the most space. I find this makes the invocation of fzf less jarring in some ways.

Any and all feedback appreciated!

<S_CODE_TOKEN>
",george-b,2016-10-17 00:25:22
405,2015-11-05 03:00:29,"Amazing, I never thought this would be possible. This is definitely going to be useful when not on tmux. With a few improvements we can even consider adding it to `bin` directory of the repo. I'll try it for a while and give you some feedback. Thanks.
",junegunn,2016-10-17 00:25:22
405,2015-11-05 13:04:54,"I got the desire of this sort of layout having played with [selecta](https://github.com/garybernhardt/selecta). It has some rendering issues which seem to be addressed in a rust clone [heatseaker](https://github.com/rschmitt/heatseeker) which I've stumbled across today. Not sure if you've thought about this kind of interface for fzf? Just an off-hand comment, I appreciate it's not very useful without patches. 
",george-b,2016-10-17 00:25:22
405,2015-11-05 15:52:35,"Oh yeah, I'm aware of those projects. Unlike fzf, they use low-level ANSI codes to control the screen instead of depending on ncurses. The approach has the benefit of not having to use fullscreen, which I think is really nice. However, it seems much less stable than rock-solid ncurses, and cannot reliably support various key bindings and mouse like fzf does (yes I do use mouse on fzf sometimes!). And since tmux integration, I'm more or less content with the way fzf works.

I suggest a few changes to the script:
- `start_row=$(expr $lines - $row)` without `+ 1` seems to work better for me
- `fzf` should take the command-line arguments
  - But we should override `--reverse` and `--margin`, so I think it's better to directly pass those options to fzf instead of setting `FZF_DEFAULT_OPTS`
- It seems `$row` never reaches `$lines`, so we always have at least one empty line when the script is started with the cursor at the bottom of the screen which is most of the time. So I think it's reasonable to adjust the margin for that case.

<S_CODE_TOKEN>

And I like the script so far, it looks pretty clever, though I'm almost always on tmux so I'm not so sure if I'm going to use it often. Do you think it makes sense to include the script in the official repo?
",junegunn,2016-10-17 00:25:22
405,2015-11-05 16:42:02,"Thanks for the insight! I agree with all your points.

> Do you think it makes sense to include the script in the official repo?

Originally I was intending to just put this on the wiki, I _think_ this should be fairly portable so I guess it's not harmful to have it in the main repo. If it does go into the repo maybe the `getpos` function should be simplified to just return the row number? I left the column stuff in just in-case I wanted to use it later.
",george-b,2016-10-17 00:25:22
405,2015-11-05 16:47:37,"@george-b What's your termial? I have tested it in `st`, with no luck ...

By the way: You can calculate in POSIX shell without subshells using arithmetic expansion like `$(( x + y ))`. In bash you can also use `let` or `(( x=y+z ))` ( or: `typeset -i x=y+z ; x=x+=i`)
",D630,2016-10-17 00:25:22
405,2015-11-05 16:54:10,"@D630 Guilty confession I'm in PuTTY most of the time these days, thanks for the arithmetic tip. I'll have to spin up a VM and do some testing with `st` and other terminals.
",george-b,2016-10-17 00:25:22
405,2015-11-05 17:53:24,"@D630 have you tried with modification @junegunn suggested? In my initial testing I realized my original example does not work if `FZF_DEFAULT_OPTS` is unset. This works for me in `st` and `gnome terminal` on a Fedora 23 VM.
",george-b,2016-10-17 00:25:22
405,2015-11-05 18:58:52,"@george-b Ja, works.

https://gist.github.com/D630/ff2a40ca5a3288b08a7d
",D630,2016-10-17 00:25:22
405,2015-11-05 23:48:42,"@george-b How about sending me a pull request? We can continue the discussion there. By the way, I have absolutely no idea how we should call the script ;)

I think we can even consider using it in the default key bindings and fuzzy completion when not on tmux.
",junegunn,2016-10-17 00:25:22
405,2016-10-15 18:26:36,"AFAIK ncurses still clears the whole screen even when starting using a margin right?
",acornejo,2016-10-17 00:25:22
405,2016-10-15 18:29:17,"PS: I ask because I was preparing a pull-request which added an ""auto-margin"" option which retrieved the current cursor position and then computed the margin accordingly. However, after all the ioctls where done I realized that margin doesn't really prevent fzf from clearing the entire screen.
",acornejo,2016-10-17 00:25:22
405,2016-10-16 14:36:26,"> AFAIK ncurses still clears the whole screen even when starting using a margin right?

@acornejo Yeah, that is basically how ncurses works.
",junegunn,2016-10-17 00:25:22
405,2016-10-16 17:43:49,"Tks @junegunn, just closed the PR. If clearing the screen is unavoidable I don't see how starting from the current row is a desirable feature (if someone sees value on it, let me know since I had the code to add this to the fzf binary instead of doing it through shell scripts).
",acornejo,2016-10-17 00:25:22
405,2016-10-16 19:10:39,"Woah totally forgot about this! I'm actually not using fzf much these days, @junegunn should this be closed?
",george-b,2016-10-17 00:25:22
405,2016-10-17 00:25:22,"@acornejo I think the benefit is that we don't have to move our focus when fzf is started in full screen mode. But yeah, the usefulness of it is quite limited.

@george-b I'll close it. Thanks.
",junegunn,2016-10-17 00:25:22
404,2015-11-04 14:09:37,"<S_CODE_TOKEN>
",junegunn,2015-11-09 03:06:18
403,2015-11-04 01:54:42,"In the case that fzf-tmux returns a user-selected result but with a
non-zero exit status (for reasons I haven't figured out quite yet) this
allows CTRL-R to continue working as expected.

Addresses #203 (Tranquility's comment)
",JackDanger,2015-11-05 23:38:36
403,2015-11-04 02:22:29,"Thanks, but the suggested change is identical to #242. I'd like to know why you get non-zero exit status in the first place before merging it. I can't reproduce on my side. Does it always happen or just occasionally happen? Do you still have the problem if your .zshrc is minimal? Can you check which causes the problem? @lyeoh [mentioned that](https://github.com/junegunn/fzf/pull/242#issuecomment-129700522) git_prompt_short_sha was the problem.

/cc @robinro 
",junegunn,2015-11-05 23:38:36
403,2015-11-04 06:12:12,"@junegunn @JackDanger 
I spend quite some time back in #242 to look for the reason but couldn't find it. It happened only occasionally and seemed to only happen after some usage of the shell (maybe history size is important? For me this is quite large often and I also increased the limits).

Nevertheless I would recommend to merge the pull request. For me it fixed the problem, apparently also for @JackDanger and there is **no** downside. It only expliciity takes care of non-zero return code, which the original version ignores. Also I find the split-up `if` a bit more readable.

@junegunn knowing the reason for the non-zero return code would certainly be interesting for fzf. Maybe one can add a debug-section that checks for the return code and then saves out some more details about what happened in fzf before returning to zsh.
",robinro,2015-11-05 23:38:36
403,2015-11-04 06:37:13,"What irks me is that doing so simply hides the fundamental problem that can be or should be fixed in the first place and deprives us of a chance to get a better understanding of the situation. I'm not particularly against having various workarounds and hacks for issues that are out of my control, but not without proper understanding of the problem.
",junegunn,2015-11-05 23:38:36
403,2015-11-04 06:45:37,"@junegunn if the problem can not be found within a certain time/effort, still the workaround should be included. Fixing the original problem would be nicer, but not fixing a bug for a long time that keeps many people from using the tool is not reasonable.
",robinro,2015-11-05 23:38:36
403,2015-11-04 07:25:19,"@robinro I installed oh-my-zsh (since I couldn't reproduce with vanilla zsh) and noticed that zsh occasionally fails to update the prompt even when fzf-tmux properly completes (logged exit status and observed no anomaly there, always 0). I applied the patch, but the problem still persists. I don't think this is a proper fix to the problem.

@JackDanger Can you try logging the exit status? I don't understand how fzf-tmux exits with non-zero code (unless the selection is empty). If it does, it's a bug of fzf or fzf-tmux. We should fix the problem there, instead of trying to workaround it here.
",junegunn,2015-11-05 23:38:36
403,2015-11-04 08:00:45,"@junegunn Thanks for looking into this. For me the patch resolved the problem, but I'll also look into logging the return code and collecting more info what's going on. I will only be able to do this towards the end of next week.
",robinro,2015-11-05 23:38:36
403,2015-11-04 13:39:46,"One correction to my previous comment: I can't reproduce the problem with or without the patch. I was misguided because I was doing this:
- `CTRL-R`
- Select history entry X (OK)
- Delete the entry with `CTRL-U`
- `CTRL-R`
- Select Y (OK)
- Delete the entry with `CTRL-U`
- `CTRL-R`
- Reselect X
- Since I previously edited (deleted) the entry X, my prompt is not updated.

Anyway, here's what I did:

<S_CODE_TOKEN>

and I `tail -f /tmp/x` in another tmux pane to see what's going on. I never was able to see `else` in the file unless I interrupted fzf with CTRL-C.
",junegunn,2015-11-05 23:38:36
403,2015-11-05 00:07:13,">  Can you try logging the exit status?

@junegunn It was `128`. I didn't get any more info about it than that but, like other folks here, I've noticed that the behavior is different depending on if my current working directory is a git repo. So there's something about ZSH + my `$PS1` and the git functions that are causing fzf to exit uncleanly. I'll be damned if I could figure out what, exactly was doing it though.
",JackDanger,2015-11-05 23:38:36
403,2015-11-05 03:56:24,"@JackDanger Can you share your `$PS1` and the functions used in it? I'll try to reproduce the problem from my machine with it.

fzf never exits with `128`, so if that was the case, it was probably caused by some code in `fzf-tmux` script. It would be really helpful if you could put `#!/bin/bash -x` on the top of the script and check what's going on when that happens.
",junegunn,2015-11-05 23:38:36
403,2015-11-05 04:23:35,"@junegunn Here's what I've got, I'll try to include as much as possible:

I've changed the key binding function to include some debug output:

<S_CODE_TOKEN>

And, with `bash -x` set as the shebang on fzf-tmux, I open a new tmux pane:

<S_CODE_TOKEN>

The PS1 seems to work fine and the only real function call in the PS1 string has as it's last value an `echo` so nothing seems fishy to me.

Now I `CTRL-R` and I get a hell of a lot of output in the current tmux pane as a new fzf-tmux pane opens below:

<S_CODE_TOKEN>

I select one of the simple options in the fzf-tmux pane and hit enter and the fzf-tmux pane closes and the following is written to the main pane:

<S_CODE_TOKEN>

Those last two lines (`last exit: 128` and `__fzfcmd: fzf-tmux -d40%`) are debug output from `fzf-history-widget`. If I remove the two echo commands from `fzf-history-widget` then I get nothing at all in my current shell line.

Interestingly, if I just run this in my terminal the exit code is fine:

<S_CODE_TOKEN>

Any ideas?
",JackDanger,2015-11-05 23:38:36
403,2015-11-05 04:25:59,"Oh, I really should mention that if I'm in a git repo that this behavior does _not_ occur. The exit status of  `( $(fc -l 1 | $(__fzfcmd) ... )` is 0 and my selection is written to the prompt. Weird, right?
",JackDanger,2015-11-05 23:38:36
403,2015-11-05 04:30:57,"@JackDanger Thanks for looking into it. It looks like that `rm -f` in `cleanup()` failed with exit status 128. Is your `rm` an alias of something? What does `type rm` say?

And can you check adding `set +e` to `cleanup()` as follows fixes the issue?

<S_CODE_TOKEN>
",junegunn,2015-11-05 23:38:36
403,2015-11-05 04:36:15,"Sadly,

<S_CODE_TOKEN>

I added `-e` and got this:

<S_CODE_TOKEN>

No luck so far.
",JackDanger,2015-11-05 23:38:36
403,2015-11-05 04:37:00,"I added explicit checking of `rm`'s return value:

<S_CODE_TOKEN>

looked okay:

<S_CODE_TOKEN>

I'll keep investigating, would love some pointers for where else to look.
",JackDanger,2015-11-05 23:38:36
403,2015-11-05 04:41:02,"@JackDanger Thank you. So the whole log says that fzf-tmux correctly finished with `0` as expected. We'll have to find where that 128 comes from. Hmm. Can you check again with a very simple `$PS1`? Such as `PS1=""> ""`.
",junegunn,2015-11-05 23:38:36
403,2015-11-05 07:33:11,"@JackDanger Found it. Changing `return` in `git_prompt_info` to `return 0` fixes the issue.

So for some reason, the exit status from `PS1` is affecting the return code of command substitution. Extremely strange. Not sure if it's a bug or an expected behavior, but finally I'm willing to apply the patch.
",junegunn,2015-11-05 23:38:36
403,2015-11-05 07:51:40,"@JackDanger Can you rebase your commit?
",junegunn,2015-11-05 23:38:36
403,2015-11-05 18:08:09,"@junegunn Nice sleuthing! Sorry I couldn't find it myself, I got a little lost in all the moving pieces here. I've rebased and edited my comment to let the next person know why this might be necessary and what kinds of situations can cause this. Thank you!
",JackDanger,2015-11-05 23:38:36
403,2015-11-05 23:39:02,"Merged, thanks!
",junegunn,2015-11-05 23:38:36
403,2015-11-12 09:45:59,"thanks @junegunn @JackDanger for this fix! :+1: 
",robinro,2015-11-05 23:38:36
402,2015-11-03 17:01:29,"with the following vimrc : 

<S_CODE_TOKEN>

then run `:J` , select the only line.

I would expect that the folder would be opened `/tmp`, but is is not, strangely.

It works fine from vim with `:e /tmp` 

Reproduced on both neovim 0.1 and vim 7.4
",netei,2015-11-04 02:53:19
402,2015-11-03 17:15:21,"Huh, interesting.
It can be reduced to `:try | e /tmp | endtry` not bringing up netrw.
I'm not yet sure what's going on.
",junegunn,2015-11-04 02:53:19
402,2015-11-03 17:53:45,"Same issue as https://github.com/junegunn/fzf.vim/commit/2977f08e8f1aa7476b53ea76f33178b36f8ec113 I presume.
",justinmk,2015-11-04 02:53:19
402,2015-11-03 17:57:50,"@justinmk Ah yes, thanks. It just slipped out of my mind. So is this behavior a bug or is it expected?
",junegunn,2015-11-04 02:53:19
402,2015-11-04 02:45:35,"Related: https://groups.google.com/d/msg/vim_use/EeQM4EWP7IY/yFrhedMDWCAJ
",junegunn,2015-11-04 02:53:19
402,2015-11-04 02:53:19,"So, it doesn't seem like something we can do about right now.
Anyway, an easy workaround here is to use `Explore` as the sink.
",junegunn,2015-11-04 02:53:19
402,2016-02-15 09:24:58,"I'm running fzf (0.11.3) and seeing this problem still in Neovim (0.1.2).

**Neovim version:**

<S_CODE_TOKEN>

**FZF command in Vim:**

<S_CODE_TOKEN>

The above mapping fail to browse the selected directory. Manually calling `doautocmd BufEnter` after selection works. If I change sink to `:Explore` instead it also works.

Any ideas why this still is an issue? Thought #371 would solve it?

/cc @justinmk
",KevinSjoberg,2015-11-04 02:53:19
402,2016-02-15 09:46:23,"It happens in Vim too, no?
",justinmk,2015-11-04 02:53:19
402,2016-02-15 12:01:42,"@justinmk I'm currently just running Neovim, but I can certainly check if I can reproduce this within Vim as well.
",KevinSjoberg,2015-11-04 02:53:19
402,2016-02-15 14:55:24,"I don't think you need to check. Just wanted to clarify.
",justinmk,2015-11-04 02:53:19
402,2016-02-15 15:05:11,"@KevinSjoberg I think you're confused. I didn't fix the issue, because I can't.

> Thought #371 would solve it?

No, it fixes the sink function of `:FZF` command, not `fzf#run` function. `fzf#run` is not only for opening files – e.g. colorschemes, commands, word/line completion, etc – so it doesn't make sense to trigger `BufEnter` unconditionally.
",junegunn,2015-11-04 02:53:19
402,2016-02-16 07:55:28,"@junegunn I understand. So the current status of this issue is that it's not possible to fix?
",KevinSjoberg,2015-11-04 02:53:19
402,2016-02-16 08:05:33,"@KevinSjoberg It's up to each sink implementation to handle that.
",junegunn,2015-11-04 02:53:19
402,2016-02-16 09:01:43,"I see, thanks for clarifying. :+1: 
",KevinSjoberg,2015-11-04 02:53:19
401,2015-11-03 08:12:43,"and if you do that, you get the fzf way of selecting a file, and when you press enter you open that file with vim. so basically add the file you found as the last arg of the command afterwards.
also check here https://getpicka.com/guide#install-cli

<S_CODE_TOKEN>
",pvinis,2015-11-03 13:18:54
401,2015-11-03 13:18:54,"Isn't it something you can easily do with shell script?

<S_CODE_TOKEN>

Though you'll have to adjust the source according to the command as different commands expect different things (`cd` expects directories not files).

And the last example doesn't even need any scripting:

<S_CODE_TOKEN>
",junegunn,2015-11-03 13:18:54
400,2015-11-03 04:50:08,"[Extended-search mode](https://github.com/junegunn/fzf#search-syntax) was added 2 years ago but is not enabled by default to this day which is a shame because it's just so good. I've always told people to put `-x` to their `$FZF_DEFAULT_OPTS`, but I'm afraid there are still a lot of users missing it out.

Therefore, I propose that we make it default. One should be able to disable it with `--no-extended` or `+x`.

Also, regarding `--extended-exact`, one might argue that ""exactness"" should be orthogonal to ""extendedness"". So I suggest the following changes:
- Replace `--extended-exact` (`-e`) with `--exact` (`-e`)
  - Since extended-search mode is now enabled by default. Using `-e` will have the same effect as before unless the user explicitly set `--no-extended`.
  - Leave `--extended-exact` for backward compatibility. It'll be the combination of `--extended` and `--exact`.
",junegunn,2015-11-03 14:13:09
400,2015-11-03 08:03:30,"Agree
",netei,2015-11-03 14:13:09
400,2015-11-03 17:30:42,"Thanks @junegunn I've been using fzf for quite a while and did not know about this :sob: 
",rgrinberg,2015-11-03 14:13:09
400,2015-11-03 18:01:06,"@rgrinberg You'll like it :) Maybe I should rename the title of the section on the README page so that it's more prominent.
",junegunn,2015-11-03 14:13:09
399,2015-10-31 11:05:48,"In fzf, if a line(a file name for example) is very long, it will be showed with ellipsis. Is there a way to see the rest of the content?

<img width=""406"" alt=""very long name"" src=""https://cloud.githubusercontent.com/assets/1527040/10863239/f76a6548-8001-11e5-968f-c4453c068631.png"">

<img width=""407"" alt=""ellipsis"" src=""https://cloud.githubusercontent.com/assets/1527040/10863240/fdf56f5c-8001-11e5-8c68-de5aa47c7585.png"">
",lotabout,2015-10-31 18:55:35
399,2015-10-31 18:55:35,"Horizontal scrolling will occur if the end of the matched substring goes beyond the screen boundary. For example, if you type `oooooooo.....` or `.txt`, you'll notice fzf shows the end of the match by scrolling the entry. However, there's no manual way to scroll the entry horizontally.

It's really awkward, so I don't recommend, but one might consider doing something like `fzf --bind 'ctrl-p:execute(echo {} 1>&2; sleep 1)'`.
",junegunn,2015-10-31 18:55:35
398,2015-10-30 00:43:14,"### Use Case

I've got a `$FZF_DEFAULT_COMMAND` which lists a small set of files which are actively being modified in my changelist and then starts a much longer listing of the project repository.
### Observed Behavior

I believe as a result of calling `defer listCommand.Wait()` FZF does not finish accepting my completion until after that command has returned.
### Desired Behavior

After I hit enter the completion should be accepted immediately and the command called to list files should be terminated.
",meboyce,2015-10-30 01:55:36
398,2015-10-30 01:02:09,"I don't think it is something that should be handled by fzf. What is your `$FZF_DEFAULT_COMMAND`? The program should terminate itself on SIGPIPE. You see, `find` or `ag` don't suffer the problem and stop immediately.

<S_CODE_TOKEN>

`sleep` on the other hand, does not print to stdout, thus unaware if the pipe is closed.

<S_CODE_TOKEN>

The following will terminate after 5 seconds with `Broken pipe` error.

<S_CODE_TOKEN>

The same applies to other standard filters, e.g. `head -1`
",junegunn,2015-10-30 01:55:36
398,2015-10-30 01:55:36,"It's a bash script wrapping an internal utility which doesn't seem to handle SIGPIPE appropriately...

In my script I'm now using:

<S_CODE_TOKEN>

which seems to have fixed it for me, thanks for the help :)
",meboyce,2015-10-30 01:55:36
397,2015-10-28 02:14:06,"Hi,

Is there a way to force FZF to open a tmux split in Neovim? I have mapped exit from terminal to `<esc><esc>` plus Neovim changes the size of buffes every time which is pretty annoying.

So I think I'd rather have it in Tmux as it was in Vim, but I can't seem to find a way to do it. Thanks.
",firedev,2015-10-30 15:19:17
397,2015-10-28 02:17:39,"> I have mapped exit from terminal to <esc><esc>

You could do a buffer-local `:tnoremap` mapping for fzf, I think, which maps a single `<esc>` to quit fzf.

@junegunn It might be a good idea to `setf fzf` in the Neovim terminal buffer so that users can do customization (or is there some equivalent event already?).

> Neovim changes the size of buffes every time

It changes them permanently, or only while fzf is showing? 
",justinmk,2015-10-30 15:19:17
397,2015-10-28 02:21:27,"Thanks @justinmk , any details on how to do the local terminal mapping? I would need some help here.

Each time FZF opens it shifts horizontal splits up. so after a while if I have quickfix and whatnot my work buffer shrinks up to a single line, then I do 'Ctrl-W-o` and start over.
",firedev,2015-10-30 15:19:17
397,2015-10-28 02:39:19,"@firedev If the `setf fzf` suggestion is accepted the configuration would look like this:

<S_CODE_TOKEN>

> if I have quickfix and whatnot my work buffer shrinks up to a single line,

You're right, I never noticed that because I usually don't have more than 1 horizontal split (and I am not fastidious about windows staying the same size, I slap them around as needed). Looks like this is another case for providing an API to [save the window layout](https://github.com/neovim/neovim/issues/2006).
",justinmk,2015-10-30 15:19:17
397,2015-10-28 02:46:19,"@justinmk Thanks, however it looks like there is no FileType fzf. It opens a new terminal window and filetype is empty for it.
",firedev,2015-10-30 15:19:17
397,2015-10-28 04:12:22,"For some reason, neovim pane becomes blank while I'm running `:call system('echo hello | fzf-tmux')`, and `:!fzf` doesn't work on neovim. `:!fzf-tmux` might work, but it doesn't work nicely on ordinary vim. So terminal is the only sane option.

`setf fzf` sounds nice. Currently fzf.vim project sets statusline on `TermOpen`.  See: https://github.com/junegunn/fzf.vim/blob/master/plugin/fzf.vim#L104
",junegunn,2015-10-30 15:19:17
397,2015-10-28 13:48:52,"@junegunn system() cannot run interactive commands in Neovim.
",justinmk,2015-10-30 15:19:17
397,2015-10-28 16:07:09,"@justinmk Yeah, but fzf-tmux opens a new pane and all the interactivity will happen there.
",junegunn,2015-10-30 15:19:17
397,2015-10-30 15:19:17,"https://github.com/junegunn/fzf/commit/5769d3867dcb6a7b79549da7d3269140c1fc3332
",junegunn,2015-10-30 15:19:17
397,2015-10-31 05:19:58,"Sorry guys, I can't seem to make it work. I mean any commands I add are just being typed into FZF prompt. I press `<esc>` then it waits a second and types whatever is after `<esc>` straight to FZF.
",firedev,2015-10-30 15:19:17
397,2015-10-31 07:13:07,"@firedev I verified that this works:

<S_CODE_TOKEN>
- `<nowait>` will ignore all other `<esc>`-prefixed mappings while you are in ""fzf mode""
- `<c-g>` is one of way exiting fzf, another way would be `<c-c>` and maybe others.
",justinmk,2015-10-30 15:19:17
397,2015-10-31 14:16:09,"Thank you! Feels great so far.
",firedev,2015-10-30 15:19:17
396,2015-10-27 08:04:10,"Why not allow numbers as well as letters for ctrl and alt bindings?
",ggVGc,2015-10-27 13:33:53
396,2015-10-27 08:41:30,"AFAIK standard terminal emulators don't support them except for a few.
",junegunn,2015-10-27 13:33:53
396,2015-10-27 13:33:53,"http://stackoverflow.com/questions/15849537/vimrc-mapping-for-control-key-not-working
",junegunn,2015-10-27 13:33:53
395,2015-10-23 14:00:57,"It would be useful to be able to pass a list of strings that should be selected when launching fzf.
And, related, to pass a string on which the cursor should start. I am currently building https://github.com/ggVGc/fzf_browser and with these options the UI could behave much nicer. 
",ggVGc,
395,2015-10-23 20:37:00,"I also thought about those stuff, but I felt that maybe I was trying to squeeze too much out of fzf, beyond what it's supposed to do, unnecessarily making it more complex.

> pass a list of strings that should be selected

It's doable. But I thought it can be very confusing if one of the ""pre-selected"" items is not listed on the initial page.

> to pass a string on which the cursor should start

It's not as trivial as it seems since fzf works asynchronously. And I suppose you'll end up even wanting to preserve the scrolling offset of the window as well (well, I did). Maybe you could take advantage of `execute` action somehow [in some cases](https://gist.github.com/junegunn/f4fca918e937e6bf5bad#gistcomment-1603538).

I'm not going to rush into a decision, rather I'll leave this issue open and see how the idea develops.
",junegunn,
395,2015-10-27 08:02:43,"Yeah, I understand there are some implementation design concerns with both of these, but I'm not sure it would be making ""fzf unnecessarily too complex"". I think it's more an ideological concern than a technical one(which is fine, fzf is your creation and should follow your ideas).
It's a great tool by itself, but even with current configuration options, also shines as a UI for other more complex applications. Writing `fzf_browser` around fzf was great, but as I mentioned would be even better with these two additions.
But maybe it's me thinking about fzf in a different light than you. In my opinion ""bloat"" is when you add things to your software that could as well have been implemented outside of it, or in an alternative way. When it comes to these two options, I don't see a way to work around it really.
So, if fzf wants to be a powerful building block within larger applications, I do think things like these options have a place.
Regarding implementation concerns I think it's not a big issue if pre-selected entries are off screen, since this can already happen during normal usage

And regarding the cursor position, I think a simple enough and intuitive implementation is:
- While loading,  if the passed string(upon which the cursor should be) is not in the list, then just stay at top. When it shows up, move the cursor to it.
- If the user has moved the cursor at all, or entered any text, cancel(i.e don't put the cursor on the selected string, even if it shows up) 

All these two things add is the ability to restore state upon re-launching fzf, not really introducing any new behaviour as far as I see. The main use case in my opinion is that the user has already built the state previously, so it shouldn't be surprising.
",ggVGc,
395,2015-10-27 08:39:02,"Well, I said ""more complex"" not ""too complex"", so there's difference in nuance :)

> So, if fzf wants to be a powerful building block within larger applications

Yeah, that's the point I'm not sure about. I'm also not sure if there's a strong demand to use fzf for such purposes. You know, I can't be super motivated to spend my time to implement and maintain esoteric features that only a handful of users will ever use. A broad feature set can intimidate most average users who only need small subsets of it and it usually makes the project less flexible to future changes (if we want to keep backward compatibility).

> And regarding the cursor position, I think a simple enough and intuitive implementation is:

I personally don't like the suggestions. It's very annoying and confusing for me when my user interface is interfered by some unknown force asynchronously. I would rather block the interface until the item appears.

What I meant by scroll offset is that, if the list spans multiple pages, the item can appear on any position on the screen depending on how much you scrolled the list. So that's another missing piece of information when restoring the session.
",junegunn,
394,2015-10-23 08:32:13,"<S_CODE_TOKEN>

I was asked if i want to add completion or key-binding support. I answered `n`, but `~/.fzf.bash` and `~/.fzf.zsh` is still generated, and append line to my .zshrc

<S_CODE_TOKEN>
",Treri,2015-10-23 08:43:49
394,2015-10-23 08:45:47,"Fixed `--bin` option, thanks for the report.

> and append line to my .zshrc

For that, you should pass `--no-update-rc` option. Even if you answer `n` to both questions, installer will try to update rc files to inject fzf/bin directory to $PATH.
",junegunn,2015-10-23 08:43:49
394,2015-10-23 08:50:36,"Thanks for your amazinnnnng quickly answer and fix. :+1: 👍
",Treri,2015-10-23 08:43:49
393,2015-10-23 08:11:44,"with the following `.nvimrc`

<S_CODE_TOKEN>

`FZF_DEFAULT_OPTS=""--multi --bind 'f4:toggle-all,ctrl-o:toggle-all'"" nvim`

Do : 

`:FZF` 

`ctrl-o` works to toggle-all, but `f4` doesn't

`f4` works correctly from withih `vim` with the same vimrc

`FZF_DEFAULT_OPTS=""--multi --bind 'f4:toggle-all,ctrl-o:toggle-all'"" vim`

I guess it is a problem in upstream @tarruda
",netei,2015-10-24 04:51:56
393,2015-10-24 04:51:56,"Thanks for the heads up, but this issue is not specific to fzf. So I suggest that you discuss it on the nvim issue tracker. An easier way to reproduce (without fzf):
- Start nvim
- <kbd>F1</kbd> should bring up help window
- `:term`
- Start nvim inside the term window
- <kbd>F1</kbd> does not work there
",junegunn,2015-10-24 04:51:56
393,2015-10-26 08:26:27,"Ok, I've opened https://github.com/neovim/neovim/issues/3497 for this
",netei,2015-10-24 04:51:56
392,2015-10-22 21:59:37,"Disclaimer, this is more of an installation configuration request.

Recently started using `fzf` and I'm really liking it! However, I've got one issue with the installation process: auto appending to .bashrc

In my case, I have my own set of bash configuration files where I store all the aliases, path additions, general configuration and etc. These files a organized in a particular matter and within a `~/.bash` directory. The only thing my bashrc files does is determine if the shell is interactive then `source` all my configuration files in `~/.bash`.

Therefore the line that the installation process adds is in the ""wrong"" place :frowning:  (for me anyway). I'd rather just add it myself if the correct file where I want it! 

So I propose that there be some sort of choice or configuration as part of the install process. Maybe something like this:

<S_CODE_TOKEN>

Maybe a flag or something in the install process would be better (since by default I imagine most people would just say `y` to that question anyway).

Let me know your thoughts
",wspurgin,2015-10-23 06:04:40
392,2015-10-23 01:14:34,"Adding another y/n prompt as you suggested is the most straightforward way to address the requirement, however since the install script is usually run after a git pull, it can be problematic to the users who have lines like follows in their scripts.
- `yes n | ./install`
- `(echo y; echo n) | ./install`

So it's probably safer to add flags, I'll think about it and let you know.
",junegunn,2015-10-23 06:04:40
392,2015-10-23 01:28:13,":+1: Awesome thanks
",wspurgin,2015-10-23 06:04:40
392,2015-10-23 06:07:58,"Added flags as follows:

<S_CODE_TOKEN>

In your case,  `./install --all --no-update-rc` should do the trick.
",junegunn,2015-10-23 06:04:40
392,2015-10-23 14:40:52,":+1: Much appreciated.
",wspurgin,2015-10-23 06:04:40
391,2015-10-22 12:59:38,"`printf ""$(tput setaf 2)foo$(tput sgr0)bar\nbar\n""`

echoes

**foo**bar  
bar

while `printf ""$(tput setaf 2)foo$(tput sgr0)bar\nbar\n"" | fzf --ansi`

echoes

**foo**^Obar
bar         

I've replaced what is placed in green by **bold** because that's the only way to format on github.

I have the latest fzf version, 0.10.8
",netei,2015-10-22 16:12:43
391,2015-10-22 13:03:25,"It works fine if using `$(tput setaf 7)` (for white)
",netei,2015-10-22 16:12:43
391,2015-10-22 15:24:27,"Thanks, I'll fix it.
",junegunn,2015-10-22 16:12:43
391,2015-10-22 15:35:36,"Hmm, it turned out that it's an issue of how ncurses prints non-printable characters.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",junegunn,2015-10-22 16:12:43
391,2015-10-22 16:13:23,"I'm not 100% sure if it's the correct approach, but simply ignoring non-printable characters fixes the issue.
",junegunn,2015-10-22 16:12:43
391,2015-10-23 06:25:51,"Great, Thanks !
",netei,2015-10-22 16:12:43
391,2016-10-29 12:57:32,"This issue still happens if the command passed to the `--preview` option uses `tput sgr0` somewhere in it's output.

I investigated what was being printed and found this snippet in the manual page of terminfo:

<S_CODE_TOKEN>

Since `sgr0` turns off these attributes, it will output `^O` for the last parameter, which is encoded in it's octal form, unlike the other espace sequences. Indeed, it can be removed from a string like this:

`tr -d '\017' <<< ""$string""`

I have no idea why this particular escape sequence isn't handled properly, but maybe these findings can help you with dealing with this problem.
",nevesnunes,2015-10-22 16:12:43
391,2016-10-30 02:37:59,"@nevesnunes Thanks for the info. The ANSI procesor of fzf only handles sequences that start with `\E`, so `^O` and `^N` are left untouched. I'll remove them from preview output.
",junegunn,2015-10-22 16:12:43
390,2015-10-21 20:24:58,"It doesn't happen without powerline, and I have it for both my bash and tmux.
Also I'm on OSX.

This is a weird problem that occurs when doing the following:
- being on a tmux session
- ctrl+t to find a file name
- vim my_file
- ctrl+z to put vim in background

After that point, I have to do a `reset` to have my prompt back.
",fpietka,2016-06-23 17:01:18
390,2015-10-22 10:47:38,"Hmm, I don't use powerline so I'm not sure if I can help. How about the other key bindings (ctrl-r, alt-c) ? Do they work fine?
",junegunn,2016-06-23 17:01:18
390,2015-10-22 12:34:49,"ctrl-r does the same, alt-c doesn't seem to work for me (it outputs `ç`, so not related to fzf).
It is working fine with powerline outside of tmux though...
",fpietka,2016-06-23 17:01:18
390,2015-10-22 12:48:48,"> it outputs ç, so not related to fzf

http://superuser.com/questions/496090/how-to-use-alt-commands-in-a-terminal-on-os-x

> ctrl-r does the same

So then I suppose `fzf-tmux` script also has the issue, can you check? If it does, I'm not sure if the problem is something I can fix from my side.
",junegunn,2016-06-23 17:01:18
390,2015-10-22 13:30:44,"When I'm in my tmux session it launches `fzf-tmux`, so I guess it is strictly related to it. I can't reproduce launching manually `fzf` (also it doesn't insert result in my prompt then).
",fpietka,2016-06-23 17:01:18
390,2015-10-22 15:23:56,"I know, but I was trying to make sure that it's reproducible even when you manually run `fzf-tmux`, so that we don't have to look at the source code of key bindings.
",junegunn,2016-06-23 17:01:18
389,2015-10-21 07:41:11,"For some use cases, it might be helpful if the user could type in a search string that has zero results, hit Enter, and have fzf return the search string (with exit status 0 or 1, whichever makes more sense to you). The specific use case I have in mind is a Notational Velocity-style interface where the user can either find an existing note or create a new one with a given title.
",rf-,2015-10-21 08:36:08
389,2015-10-21 08:35:31,"Have you checked `fzf --print-query`? The flag makes fzf always print the query as the first line of the output so I'd say it's more consistent and easier to reason about. (You can check the number of lines in the output)
",junegunn,2015-10-21 08:36:08
389,2015-10-21 08:36:08,"Argh, thanks. Missed it somehow.
",rf-,2015-10-21 08:36:08
388,2015-10-20 14:14:32,"I tried to install via `brew reinstall --HEAD fzf`.
Here is the error message I got.

<S_CODE_TOKEN>
",collegeimprovements,2015-10-21 20:51:08
388,2015-10-20 15:28:04,"Unable to reproduce the problem on Yosemite. I'll try it on El capitan tomorrow.
",junegunn,2015-10-21 20:51:08
388,2015-10-21 04:24:23,"Also works fine on El capitan.
",junegunn,2015-10-21 20:51:08
388,2015-10-21 08:06:27,"I'll try it again today and hopefully it may work fine :)
",collegeimprovements,2015-10-21 20:51:08
388,2015-10-21 20:51:08,"It got installed properly. Thanks :) I'm able to go up-down with C-j and C-k is it an undocumented feature ?
",collegeimprovements,2015-10-21 20:51:08
388,2015-10-21 23:43:59,"It's on README.
https://github.com/junegunn/fzf#using-the-finder
",junegunn,2015-10-21 20:51:08
387,2015-10-20 13:14:37,"Hi,
I just decided to finally start using fuzzy finders, so far, it seems cool for me, especially with yor fzf :+1: 

But I hit following issue with `--tac` switch:
when searching through resonably big input (eg 200k+ lines) with --tac option, some time at begining is 'wasted' for constantly refreshing terminal window (actually I can typing query during this, but it is quite distracting).
The problem (obviously) don't appear without tac.
I also use `--cycle --no-sort` during my experiments.

My scenario was to search through all lines in source files.
What I would expect to see instead is static preview of some (even random) block of lines.
What do you think about it?
",Komosa,2015-10-20 15:03:49
387,2015-10-20 13:50:55,"`fzf --tac --sync` can be helpful if the input stream finishes quickly.
",junegunn,2015-10-20 15:03:49
387,2015-10-20 14:00:58,"Other than that, it's a matter of how you prepare the input (no `--tac`).
",junegunn,2015-10-20 15:03:49
387,2015-10-20 14:51:25,"Actually i use `ack .` to just print all lines of all files recursively.
",Komosa,2015-10-20 15:03:49
387,2015-10-20 15:03:49,"Anyway, it's not something fzf can do for you. You'll have to write a script that prepares the input.

<S_CODE_TOKEN>
",junegunn,2015-10-20 15:03:49
387,2015-10-20 15:11:53,"Unfortunately, in the way you described, I can't do anything until all data is prepared...
",Komosa,2015-10-20 15:03:49
387,2015-10-20 15:20:24,"I see, but I'm not sure why you want to use `--tac` for that command. If the bottom-up layout is the issue you can consider using `--reverse`.

> What I would expect to see instead is static preview of some (even random) block of lines.

This is a very vague description of the desired behavior that I can't consider adding to fzf. I don't think there's any filter that does something like that.
",junegunn,2015-10-20 15:03:49
387,2015-10-20 15:44:29,"Thanks!
Reverse looks great. Can I additionaly move prompt to the bottom?
",Komosa,2015-10-20 15:03:49
387,2015-10-20 16:08:09,"No, it's not supported. Simply moving the cursor to the bottom will make a huge blank space in the center of the screen as you narrow down the list and I don't like it. We could try to pull down the result but it's more complex to implement and may not look very natural, so I'm not considering implementing it.
",junegunn,2015-10-20 15:03:49
387,2015-10-28 09:52:55,"Your other suggestion seems good, (and natural for me). I will try to implement it and maybe sent pull request.
",Komosa,2015-10-20 15:03:49
386,2015-10-20 10:35:24,"(Ubuntu, Bash)

xdg-open dir/**<tab>

Doesn't go into fzf and instead completes first file name in directory.
",tom-adsfund,2015-10-20 14:32:49
386,2015-10-20 13:56:46,"Unfortunately due to the limitation of bash completion, the list of supported commands is hard-coded.

https://github.com/junegunn/fzf/blob/0.10.8/shell/completion.bash#L241-L252

I'll consider adding `xdg-open` to the list. In the mean time, you can add something like this to your bashrc.

<S_CODE_TOKEN>
",junegunn,2015-10-20 14:32:49
386,2015-10-20 14:32:46,"OK, thanks for the info. And great tool! I've been hoping for something just like this for a long time. Thanks very much.
",tom-adsfund,2015-10-20 14:32:49
385,2015-10-18 20:48:59,"Why are `unset`, `export`, `unalias`, `ssh`, `telnet`, and `cd` all configured to do special-case completion on the otherwise-general `**` suffix … but `kill` is configured to complete on a simple `⇥`, without any `**`? Is there a rationale behind this, or was it an accident?
",ELLIOTTCABLE,
385,2015-10-19 01:31:31,"Both, I guess. I initially thought that I was never going to use the default shell completion for kill command, so I made the decision which I kind of regret now. But I haven't tried to rectify the inconsistency not to break backward compatibility. Note that kill completion still uses the default completion if there's prefix (e.g. `kill -9 $(cat <TAB>`), so it's probably okay in most situations, but I should probably make it consistent with the other ones.
",junegunn,
385,2015-10-19 18:46:43,"Glad to hear you're aware. It doesn't bother me at all; if you need to keep it for backwards-compat, that's fine.
",ELLIOTTCABLE,
385,2017-02-04 17:15:19,"I was going to raise this as a question too. Luckily it is pretty trivial to get the same behaviour for ssh as it is with kill. It makes sense to me to not have to ad the ** to get the auto completion. I would definitely +1 for making this the default behaviour. 

<S_CODE_TOKEN>",bag-man,
384,2015-10-18 20:31:15,"So, I figure this is a long-shot, reading through a few other issues from this project; but I _also_ saw that nobody (as far as I could find) had opened an issue asking for this, specifically.

So: as a feature-request, I'd _really_ like to see a ‘vim-mode’; with some of vim's most basic line-editing keybinds set, and implemented such that `esc` kicks the user into a pared-down version of command-mode. This is how my Zsh is configured to operate (and damn-near every other CLI program I use); and this was the _first feature_ I searched for when comparing the various interactive finder-filter programs / implementations out there.

(I understand that this is a lot of work, and may be outside the scope of this project … but it seemed worth asking for.) <3
",ELLIOTTCABLE,2015-10-19 01:20:42
384,2015-10-19 01:20:42,"Thanks for the suggestion but the answer is no.
- My fzf session usually doesn't last longer than 5 seconds. I just type in a few characters and press enter. Mode switching is clearly an overkill for fzf.
- I use vim, and I can confidently say that I'm not bad at it. But I don't use vi/vim-mode on command line, not just because the implementation is always somewhat incomplete, but also because I'm much more productive with the default Readline key bindings (and [I'm not the only one](https://www.reddit.com/r/vim/comments/267vrv/i_am_tim_pope_crafter_of_plugins_ama/chopa7v)). The most useful ones are all available on fzf.
- As you mentioned, implementing and maintaining it requires an enormous amount of effort and it introduces huge complexity to the project. It's not a good use of my (or anyone's) time.
",junegunn,2015-10-19 01:20:42
384,2015-10-19 01:22:40,"<3
",ELLIOTTCABLE,2015-10-19 01:20:42
383,2015-10-18 01:13:09,"How to ignore some dirs? Likes `node_modules` in Node.js project.
",fundon,2015-10-18 07:59:07
383,2015-10-18 07:59:07,"Filtering irrelevant entries is not a responsibility of fzf since fzf is just a dumb filter and does not know the context. You can use something like `ag` for that.

See https://github.com/junegunn/fzf#respecting-gitignore-hgignore-and-svnignore
",junegunn,2015-10-18 07:59:07
383,2016-12-13 22:36:20,"@junegunn Regarding the `.gitignore` settings you mention above... where I do I set/run the commands you list?

<S_CODE_TOKEN>",jdsimcoe,2015-10-18 07:59:07
383,2016-12-14 05:54:05,"@jdsimcoe Set up FZF_DEFAULT_COMMAND in your shell configuration file (e.g. .bashrc, .zshrc, etc.)",junegunn,2015-10-18 07:59:07
383,2016-12-14 06:08:15,@junegunn Did that and it worked. Thanks!,jdsimcoe,2015-10-18 07:59:07
383,2017-01-22 14:35:34,How not responsible? Is that really hard to implement?,kutsan,2015-10-18 07:59:07
383,2017-02-07 14:23:01,"You can also just use :GFiles instead of :Files, seeing as node_modules is usually in the .gitingore file. This is in case you are using it in vim.

<S_CODE_TOKEN>",samiralajmovic,2015-10-18 07:59:07
382,2015-10-16 11:30:09,"is there such a functionality?
",pvinis,2015-10-16 14:44:15
382,2015-10-16 14:44:15,"This is one way to do it.

<S_CODE_TOKEN>

If you want fzf to match on the filename (-1) first, but still look at the entire string (..), you can do this:

<S_CODE_TOKEN>

Variations:

<S_CODE_TOKEN>
",junegunn,2015-10-16 14:44:15
381,2015-10-14 11:13:52,"The new widget uses the already typed path as a root directory for the file search. It's not enabled by default.
",Vifon,2015-10-14 14:01:39
381,2015-10-14 14:01:39,"Thanks, but this should instead be on the wiki page. I would like the behaviors of the three key bindings consistent across bash, zsh, and fish, and I decided not to add more shell stuff to this repo. Maintenance burden is just too much for me. By the way the widget doesn't seem to handle multiple selections.
",junegunn,2015-10-14 14:01:39
381,2015-10-14 16:54:57,"I understand.

Yes, I've missed the multiple selection handling. I've managed to fix it but I needed to change some of your functions. Does it still make sense to add it to the wiki?
",Vifon,2015-10-14 14:01:39
381,2015-10-14 17:07:32,"Thanks for understanding. I want to keep the core simple and small.

> but I needed to change some of your functions

I see, but I think you can still make it work without the code in this repo, make it self-contained, although it can cause some code duplication. It's up to you to put it on the wiki page or not.
",junegunn,2015-10-14 14:01:39
381,2015-10-14 17:11:50,"Ok. I'll clean it up a bit and then add to the wiki.
",Vifon,2015-10-14 14:01:39
381,2015-10-14 17:18:20,"Currently we don't have a dedicated page for custom key bindings. Consider creating `Examples (key bindings)` page.
",junegunn,2015-10-14 14:01:39
380,2015-10-13 16:45:31,"closes issue #377
",acornejo,2015-11-19 18:28:41
380,2015-10-13 17:18:08,"Great, I'll test it tomorrow. A few comments.
- Other dockerfiles use Go 1.4.2. Let's use the same version here.
- Is it possible to add makefile target so I can build android binary with `make android` a la `make linux`?
- If it's possible, I can upload the binaries to https://github.com/junegunn/fzf-bin/releases. Then we can update install script to download it on android platforms.
",junegunn,2015-11-19 18:28:41
380,2015-10-13 17:30:39,"All your comments make sense, I may be using an older go version only because I started off an old branch where I copied one of the older dockerfiles as a starting point.

If we bump versions of go, then the sed patch I have there to remove pthread constants may no longer be necessary since that has been fixed upstream for some time now. It may also be that the stdin/stderr hacks in go have been cleaned up (not too hopeful on that).

We can certainly add make targets for android and upload binaries.
",acornejo,2015-11-19 18:28:41
380,2015-10-14 04:51:19,"The build was successful with [your instruction](https://github.com/junegunn/fzf/issues/377#issuecomment-147773338) (although I had to remove `=` from https://github.com/junegunn/fzf/pull/380/files#diff-1011bc30beb7b7f9636f1e96746c44deR25 as I was using an old version of Docker), but how am I going to check if the binary actually works without an android tablet? Any idea? I need to be able to check if it works if I'm going to release official android binaries.

> If we bump versions of go, then the sed patch I have there to remove pthread constants may no longer be necessary since that has been fixed upstream for some time now. It may also be that the stdin/stderr hacks in go have been cleaned up (not too hopeful on that).

You can try Go 1.5 instead of 1.4.x for android build if it helps.
",junegunn,2015-11-19 18:28:41
380,2015-10-14 15:43:52,"Cool. Thanks for testing this.

I tested the build with 1.4.2 (to be consistent with the other dockerfiles) and it worked; however all the patches are still necessary. If we go to 1.5 we can definitely remove at least one of the patches, maybe more. It is up to you to decide if we want to give it a shot, or stick with 1.4.2 for consistency with the other builds.

I just pushed an update to the branch with the changes to use 1.4.2, and to add the android targets to the makefile (they are like the centos target which drop you in a shell ready to type the build commands, if we want to automate the bit which actually calls the go compiler inside the container, then we will need to either a .sh script or make some rather intrusive changes to the Makefile).

I also changed the = line in the Dockerfile.

As for testing, there are several alternatives. The cleaner I think is to setup a testing environment inside the same container that we are building.

I have no experience with the ""go test"" framework though. What I can do is provide you a way for running arm binaries inside the docker container, so if that if that is sufficient to run the tests, then we can make it work, I think at the very least it would allow us to run test_go.rb, but not sure how go handles testing cross compiled things (if at all).

I have another idea which might make ""go test"" work. It involves emulating an arm architecture so that the go compiler is compiling from arm to arm (i.e. not cross compilation), I have something like that half working for another project, so if I make more progress on that front we can go in that direction. The downside is that compilation will be slower (obviously), and the Dockerfile will be a lot more complex.
",acornejo,2015-11-19 18:28:41
380,2015-10-14 16:21:32,"`go test` runs simple unit tests that do not involve ncurses, so I wouldn't worry too much about it. The real ""acceptance tests"" are done by `test_go.rb` which simulates user interaction with tmux send-keys. But I think it's probably good enough that they are tested on OS X or Linux (travis-ci). I'll merge this after a few things ironed out.

> It involves emulating an arm architecture so that the go compiler is compiling from arm to arm

That's what I initially thought you were going to do, then I realized the new dockerfile is based on ubuntu image, but I'm totally okay with it. It works and you say it's simpler.

But we now seem to have a little inconsistency in the naming of makefile targets;
- `make centos`
  - starts centos shell
- `make arch`
  - starts arch linux shell
- `make ubuntu`
  - starts ubuntu shell
- `make linux`
  - **builds** linux binary
- `make android`
  - starts ubuntu shell for building android binaries

You see the point? Maybe we should have `make ubuntu-android` for shell and `make android` for build. What do you think?
",junegunn,2015-11-19 18:28:41
380,2015-10-17 21:24:27,"I went on a little tangent and tried to see if I could get fzf to build inside a virutalized rootfs hosted with qemu-arm. Turns out the qemu ARM emulation doesn't implement the VFPv3 floating point hardware, which then prevents the go compiler from being able to run inside qemu to provide an android arm binary.

On to the current pull-request, I have made the suggested changes, renaming android to ubuntu-android and adding a new android target that actually produces the binaries. I had to tweak the makefile a bit more than I would have wanted, but couldn't keep using the old targets in there since you can't build 32 and 64 bit binaries for arm7 (arm7 is 32 bits, no 64 bit support).

Updated branch, let me know if we want to make any further changes to get this upstream.
",acornejo,2015-11-19 18:28:41
380,2015-11-19 18:28:48,"Merged, thanks!
",junegunn,2015-11-19 18:28:41
379,2015-10-12 16:35:56,"I looked, and it doesn't look like there is anyway to resume an old query (specifically in VIM).

This could easily be implemented as a cli switch IMO:

<S_CODE_TOKEN>

Similar to the Unite.vim implementation. 

Any ideas/alternatives are welcome. 
",MichaelMackus,2015-10-12 17:15:08
379,2015-10-12 17:13:43,"So you mean you want to use the same query again? fzf basically does not have persistent state unless you use `--history` option to save the history. There are several ways to achieve what you want:
1. Use `--history` option (e.g. add it to `$FZF_DEFAULT_OPTS`). Start fzf and press CTRL-P (mapped to `previous-history` action when `--history` is set)
2. If you want to avoid pressing CTRL-P, you can read the last line of the saved history file and use `--query` option to start fzf with the previous query
3. Instead of using `--history`, you can use `--print-query` option to get the query on exit and restart fzf with `--query` option.

So it's possible. Maybe it's not as easy as unite.vim? But I have no desire to compete with that :) Note that I try not to add any more command-line switches at this point unless absolutely necessary since I think fzf already has too many options.
",junegunn,2015-10-12 17:15:08
379,2015-10-12 17:15:05,"Thanks! That should work perfectly :D 

Didn't know about the `--history` option
",MichaelMackus,2015-10-12 17:15:08
378,2015-10-12 12:20:32,"Is it possible to toggle the sort using some key bindings? this seems especially useful for command history, as sometimes I'd like to keep the chronological order in the results and sometimes not.
",infokiller,2015-10-12 15:57:30
378,2015-10-12 15:57:30,"Yes. See `--bind` section of the man page. e.g. `fzf --bind ctrl-s:toggle-sort`
",junegunn,2015-10-12 15:57:30
377,2015-10-12 07:29:10,"I am happy fzf user in linux and os x. Today I tried to install it inside my android tablet (inside a terminal prompt provided by termux) and realized there is no linux armv71 version. Given that go supports cross compiling to other architectures, perhaps we could fzf here too?
",acornejo,2015-11-30 01:37:40
377,2015-10-12 16:04:00,"Unfortunately, ncurses makes cross compilation impossible (or at least non-trival). I haven't been successful so instead I'm currently building [linux binaries using VM](https://github.com/junegunn/fzf/blob/0.10.8/src/Makefile#L80-L82) on OS X.

I have no experience or knowledge on the android platform you mentioned, but I suppose it's possible in a similar manner given that ncurses is available there.
",junegunn,2015-11-30 01:37:40
377,2015-10-12 16:15:50,"Ahh, of course, for some reason I thought fzf was pure go, but it does make sense that it links to ncurses for term stuff.

Given that you are already using docker, I'll look into creating a Dockerfile that builds fzf from source. I already have a Dockerfile to build other ncurses based android programs, so I just need to figure out how to get ncurses to link statically in android. I'll try to work on this latter and put up a pull-request for adding a Dockerfile.android
",acornejo,2015-11-30 01:37:40
377,2015-10-12 16:16:41,"Sound good!
",junegunn,2015-11-30 01:37:40
377,2015-10-13 06:30:05,"ok, so i've made some progress on the dockerfile and building the cross compiler toolchain for android inside. However, I am getting the following error (looking for ideas):

curses/curses.go: In function 'swapOutput':
curses/curses.go:9:10: error: lvalue required as left operand of assignment
   stdout = stderr;
          ^
curses/curses.go:10:10: error: lvalue required as left operand of assignment
   stderr = temp;

Error seems pretty clear, the android C compiler doesn't like writing to stdout and stderr; presumably because they are defined as const. Can we do without this?
",acornejo,2015-11-30 01:37:40
377,2015-10-13 07:44:34,"Yo, I think you're looking at an old revision.
",junegunn,2015-11-30 01:37:40
377,2015-10-13 16:15:59,"Ok, just to give some updates. I got that older revision to compile by removing the swapOutput function (probably it broke functionality, but I just wanted it to see if that would work). After compiling I copied the binary over to my android device and tested it, and it worked!!

Next I saw your message and tried to compile the latest version. Here I am facing a slightly different problem, the error I get is:

/tmp/go-build054928491/github.com/junegunn/fzf/src/curses/_obj/_cgo_main.o:_cgo_main.c:_cgohack_stdin: error: undefined reference to 'stdin'
/tmp/go-build054928491/github.com/junegunn/fzf/src/curses/_obj/_cgo_main.o:_cgo_main.c:_cgohack_stderr: error: undefined reference to 'stderr'

The fact that the word ""hack"" is in there makes me uneasy, since it seams the golang folks knew they were doing something nasty with stdin and stderr, and the android NDK doesn't like it. Not sure what to try out next, let me know if you have any ideas, I'll post an updated when I manage to get past this.

PS: The docker image is ready and works well, it seems clear now that the pull-request will also need to add a couple of lines to the curses.go file to change the CFLAGS and LDFLAGS for android. Good news is that go supports switching those flags based on the GOOS environment variable, so we can keep the android settings in the master branch without changing the flags for other OS'es.
",acornejo,2015-11-30 01:37:40
377,2015-10-13 16:46:31,"ok, got it to build.

turns out that if you use C.{stdin,stdout,stderr} then those things have to be resolved at compile time, and if you instead refer to them inside a C function, they are resolved at runtime.

I compiled using that trick and not only it compiled, but the binary worked beautifully on my tablet.

Also, here is the script I was using to build inside the container: (the -pie ld flags are necessary for the binary to work on android 5+)

<S_CODE_TOKEN>
",acornejo,2015-11-30 01:37:40
377,2015-11-30 01:37:40,"Closing as we now can build android binaries thanks to your effort. Let me know if you think it makes sense to extend the install script as well.
",junegunn,2015-11-30 01:37:40
376,2015-10-12 05:34:24,"It seems that the binary version of fzf (https://github.com/junegunn/fzf-bin/releases) has some issues when handling CJK characters.

In a directory containig filenames with CJK characters, the binary version of fzf lists them as garbled text:

<S_CODE_TOKEN>

However, with fzf compiled from source code, it works fine:

<S_CODE_TOKEN>

I am using fzf version 0.10.8. All my locales (system, enviroment variables, termianl, etc) are `en_US.UTF-8`.
",wzyboy,2015-10-12 07:02:17
376,2015-10-12 05:35:55,"Ah, forgot to mention, the binary version I tested is `fzf-0.10.8-linux_amd64.tgz`.
",wzyboy,2015-10-12 07:02:17
376,2015-10-12 07:04:07,"Ah, thanks for the report. I should probably release a new version, but I simply replaced the linux binaries on GitHub. Please check if the problem's resolved.
",junegunn,2015-10-12 07:02:17
376,2015-10-12 07:06:13,"Affirmative. Problem's resovled. :+1: 
",wzyboy,2015-10-12 07:02:17
376,2015-10-12 07:28:26,"Thanks!
",junegunn,2015-10-12 07:02:17
375,2015-10-11 13:31:48,"Hi, thanks for your great work. I have found a little bug in fzf's bash completion scripts.

When using bash completion for `git` subcommands like `git commit`, `git reset` et cetra, fzf will somehow add an extra space to the end of the line.

For example, in a bash session without `source`ing `completion.bash`, when I type `git com` followed by Tab, I get `git commit` with one single space in the end of the line.

However, after `source`ing `completion.bash`, when I type `git com` followed by Tab, I get `git commit` with two spaces in the end of the line.

This, in most cases, will not pose a problem. It will break some completions in some cases though. When I type `git commit --fix` followed by Tab, instead of getting `git commit --fixup=` without any trailing space, I get `git commit --fixup=` with a trailing space. Thus I cannot use further completion like `--fixup=HEAD` without deleting the trailing space first.
",wzyboy,2015-10-11 14:43:04
375,2015-10-11 14:12:38,"![out-o3-c8](https://cloud.githubusercontent.com/assets/459384/10417202/1f6239ce-7065-11e5-820d-239d40c21926.gif)

I managed to make an ugly gif screencast for the bug.
",wzyboy,2015-10-11 14:43:04
375,2015-10-11 14:40:28,"Thanks for reporting. This is actually a duplicate of #288. Unfortunately I haven't been able to find a simple solution to the problem.
",junegunn,2015-10-11 14:43:04
375,2015-10-11 14:43:04,"I searched the issue tracker before reporting this, but did not find that one :-(

Sorry for duplicate reporting, I will subscribe to that issue instead :-)
",wzyboy,2015-10-11 14:43:04
375,2015-10-11 14:52:40,"No problem, I changed the title of the issue so that it's easier for others to find.
",junegunn,2015-10-11 14:43:04
374,2015-10-10 03:45:04,"You can start a never-ending fzf browser with the following command.

<S_CODE_TOKEN>

However, this closes as usual when you double-click an item as the action is only mapped to `enter` key.
",junegunn,2015-10-12 17:37:21
374,2015-10-12 17:37:21,"<S_CODE_TOKEN>

What if we want double-click to behave the same as enter?

<S_CODE_TOKEN>

No magic.
",junegunn,2015-10-12 17:37:21
374,2015-10-13 07:27:41,"> No magic.

Great !
",netei,2015-10-12 17:37:21
373,2015-10-10 00:21:05,"Trying to install `fzf-0.10.8` gives the following error:

<S_CODE_TOKEN>

I downloaded the file manually and verified that the file exists, but trying to execute it gives the same error. The releases page says that the 64-bit binary is statically linked, but when I run `file` it appears to be dynamically linked:

<S_CODE_TOKEN>

Installing using `fzf-0.10.5` (ie. prior to [this change in 0.10.6](https://github.com/junegunn/fzf/commit/d980e00961e64c12c28fe6adb209a6c0a652efd1#diff-19ad89bc3e3c9d7ef68b89523eff1987L83)) works just fine (it downloads the static binary).

Note: I don't even know what a static or dynamically linked binary is, so I really don't know what's going on here - just trying to provide what information I can.
",mayhewluke,2017-01-18 16:28:43
373,2015-10-10 03:39:11,"Linux 64-bit binary is now [""partially static""](https://github.com/junegunn/fzf/commit/6bc3fe6e67e1a9f6d80d47c03dc6f4f3f4453380).
- Does the binary work? You mean simply running `./fzf-0.10.8-linux_amd64` gives ""No such file or directory"" error? That's strange.
- What is the output of `ldd fzf-0.10.8-linux_amd64`?
",junegunn,2017-01-18 16:28:43
373,2015-10-10 05:26:49,"<S_CODE_TOKEN>

I'm using NixOS 15.09, which I've found tends to be a lot more barebones than the other distros I've tried, so perhaps I'm missing something that I should have installed?
",mayhewluke,2017-01-18 16:28:43
373,2015-10-10 07:54:12,"That is the strangest error message I've seen in a while. I have no experience with NixOS, but I'll see if I can set up a VM and test it when I get some time.
",junegunn,2017-01-18 16:28:43
373,2015-10-11 15:40:41,"Thanks! Let me know if there's anything else I can do to help :)
",mayhewluke,2017-01-18 16:28:43
373,2015-10-11 16:36:52,"I can reproduce the problem on a NixOS VM.
A quick googling directed me to this link:
http://unix.stackexchange.com/questions/91577/cannot-execute-binary-in-nixos-no-such-file-or-directory

> You can't usually run binary files in NixOS, they will either need some environment variables set or to be patched with patchElf.

... what?

Looks like NixOS is radically different from other distros and so there's not much I can help. I'll leave this up to someone familiar to NixOS.
",junegunn,2017-01-18 16:28:43
373,2015-10-24 12:23:15,"I just encountered the same problem. NixOS does not have a traditional /lib folder, so it doesn't find the correct linker path. PatchELF fixes this.

<S_CODE_TOKEN>

Still not sure if this is the best way. We should probably make use of NixOS' own build system - fzf is packaged in nixpkgs, but currently does not automate the whole shell install.
",xconstruct,2017-01-18 16:28:43
373,2015-10-25 18:38:45,"@xconstruct Thanks for the tip. Do you think it makes sense for fzf installer to do it automatically on NixOS (at least for those who don't want/need to use nixpkgs) ?
",junegunn,2017-01-18 16:28:43
373,2015-10-25 20:10:44,"Looks like `patchelf` is missing on a clean install, so people would have to install it, too. And NixOS unique architecture basically forces everyone to use the Nix package manager - it is expected that every binary from the internet will break sooner or later.

I'd suggest:
1. Folks on NixOS have to install fzf via package manager beforehand (e.g. `nix-env -iA nixos.fzf`)
2. The installer checks for an existing fzf (should be in `$PATH` by then) and then continues with the shell setup.

Maybe the installer can also execute step 1. It doesn't need root privileges and would install fzf into the users current profile, not system wide. Though I myself would still like to see a way to skip the download and just do the shell install - this may also be useful in later nixpkgs install automation.
",xconstruct,2017-01-18 16:28:43
373,2015-10-26 01:53:59,"Thanks for the feedback. Yes, it makes sense to skip downloading if the right version is found on path.
",junegunn,2017-01-18 16:28:43
373,2015-10-29 09:51:28,"I've had the same problem on NixOS. ended up installing it from nixpkgs (nixos package repository). and I think this is the way it should be done in NixOS. 
you need to add keybindings/completions manually though. (it's possible to expose them in some `zsh/site-functions` or bash directory from fzf derivation)
",wedens,2017-01-18 16:28:43
373,2015-11-09 23:00:10,"I see this same error on Ubuntu 14.04! It has been driving me absolutely bonkers.

<S_CODE_TOKEN>
",tupton,2017-01-18 16:28:43
373,2015-11-10 05:59:07,"Anyone else having this problem on Ubuntu 14? I tested fzf 0.11.0 on Ubuntu 14.04 and had no issues.
",junegunn,2017-01-18 16:28:43
373,2015-11-10 19:34:23,"I wonder if the fact that this is a VPS on Linode has anything to do with this? I wouldn't have thought so, but I'm running out of reasons this could be happening or other things to look into.
",tupton,2017-01-18 16:28:43
373,2015-11-11 04:26:55,"I don't know. If you have Go development environment, i.e. installed Go, try building the binary from source with `go get github.com/junegunn/fzf/src/fzf`.
",junegunn,2017-01-18 16:28:43
373,2015-11-11 04:58:27,"<S_CODE_TOKEN>
",tupton,2017-01-18 16:28:43
373,2015-11-11 05:16:23,"Hmm, did you try [`patchelf`](https://github.com/junegunn/fzf/issues/373#issuecomment-150803995) suggested above? (The actual path to ld-linux should differ though)
",junegunn,2017-01-18 16:28:43
373,2015-11-11 05:46:13,"<S_CODE_TOKEN>

Thanks for taking a look at this. I admit I am in way over my head here. I'm not exactly sure what `patchelf` even does, but I understand it was a shot in the dark.

Is the fact that I can't build the binary on this machine related to this issue?
",tupton,2017-01-18 16:28:43
373,2015-11-11 05:52:42,"No idea, I should be able to reproduce the problem for proper investigation.
But wait, `i386`? You might want to check if [the 32-bit binary works](https://github.com/junegunn/fzf-bin/releases/download/0.11.0/fzf-0.11.0-linux_386.tgz). And what does `uname -a` say?
",junegunn,2017-01-18 16:28:43
373,2015-11-11 18:23:37,"> But wait, i386?

Yeah, that is super weird. But:

<S_CODE_TOKEN>

I have no idea why I would need a 32-bit binary...

I eventually got it working by:
- Cloning the repo into `~/.fzf`
- Manually downloading the 32-bit binary to `bin/`
- Manually creating the `bin/fzf` symlink
- Running `~/.fzf/install` from `~` (because `.` is in my `$PATH` and `~/.fzf` has a file called `fzf`)

<S_CODE_TOKEN>
",tupton,2017-01-18 16:28:43
373,2015-11-12 04:44:03,"@tupton Hmm, I wonder if there's a better way to determine the right binary than uname. Anyway I added `--32` and `--64` options to install script. So you can use it.
",junegunn,2017-01-18 16:28:43
373,2015-11-12 17:26:29,"Thanks so much for taking the time to look at and help me out with this crazy issue.

I have no idea why my VM needs 32-bit binaries. I do have a _ton_ of i386-architecture packages installed, which seems related, but that's definitely not your or `fzf`'s problem.

Thanks again.
",tupton,2017-01-18 16:28:43
372,2015-10-09 20:50:50,"Hi,
I'm using a hacked up fzf fork that I modified to run always as an interactive console. I run it in a window forever, based on an index I choose.
Upon selection, it will execute an OS 'open' command and it will _not_ exit.
Do you think such a thing will be useful for fzf itself as a CLI option?

Thanks!
",jondot,2015-10-10 14:04:24
372,2015-10-09 21:21:54,"What is the purpose? What is the advantage of being always-open (and needing to focus that window) vs. being always-available (invoked at any time, from anywhere).
",justinmk,2015-10-10 14:04:24
372,2015-10-10 00:00:06,"Think of how Spotlight search works. For my use case, I:
- Use the same index all the time
- Don't mind having a dedicated terminal window just for this
- Perform action when accepting a result, which is mostly the OS 'open'
- I'd like to go back and do the same thing quickly
",jondot,2015-10-10 14:04:24
372,2015-10-10 03:25:38,"Hi, have you checked ""execute"" action? I think it's equivalent to what you're describing.

`fzf --bind ""enter:execute(open {})""`

I use it to implement a commit browser function as follows:

<S_CODE_TOKEN>
",junegunn,2015-10-10 14:04:24
372,2015-10-10 13:53:54,"Yes! amazing stuff, thanks!
I didn't see this behavior while going over the source, is there a chance you can point me to it? just for learning purposes
Thanks

EDIT: found it thanks again!
",jondot,2015-10-10 14:04:24
371,2015-10-09 01:35:29,"Attempting to edit a directory in a `try` block in Vim silently fails to trigger the autocommands used by file browsers (netrw, vimfiler, probably others). Adding a BufEnter autocommand after the edit command if the item was a directory allows netrw to work instead of opening a blank buffer.
",wilywampa,2015-10-09 03:36:09
371,2015-10-09 03:05:42,"Thanks, I didn't know that because the default command does not list directories.
Anyway, can you add `exists('#BufEnter')` to the condition? It can give error message: `No matching autocommands`. (e.g. `vim -Nu NONE`)
",junegunn,2015-10-09 03:36:09
371,2015-10-09 03:17:49,"Thanks for the quick response, could you squash the commits?
",junegunn,2015-10-09 03:36:09
371,2015-10-09 03:36:13,"Thanks :+1: 
",junegunn,2015-10-09 03:36:09
370,2015-10-08 21:08:21,"`:Map` (`:FzfMap` for me) command fails. When I run the command manually in the shell, it reports a panic:

<S_CODE_TOKEN>

Temporary file which contains the mappings is here: https://gist.github.com/c2065edaab6df6a19e2e
",justinmk,2015-10-09 03:18:09
370,2015-10-09 02:58:18,"Thanks. Confirmed, will fix it soon.

<S_CODE_TOKEN>

(I suppose you have `--no-color` in your $FZF_DEFAULT_OPTS?)
",junegunn,2015-10-09 03:18:09
370,2015-10-09 03:43:36,"Should be fixed in fzf 0.10.8. Thanks!
",junegunn,2015-10-09 03:18:09
369,2015-10-06 20:30:20,"As in #368, this is a clone of a feature existing in CtrlP. Imagine I'm working on a project with this structure:

├── .git
├── module1
│   ├── bang
├── module2
│   ├── boom
└── module3
    └── twang

If I am editing `module3/twang`, and I use FZF, I cannot see any files outside of `module3/`. CtrlP will traverse up the directory tree until it finds a `.git`, `.svn`, `.hv`, etc. folder. This means that any project that is under version control can easily be traversed using only this one navigation tool. Would it be possible to add something similar to FZF? If not in the standard options, perhaps with some additional configuration by the users?
",natemara,2015-10-07 07:21:39
369,2015-10-06 23:17:21,"Are you using `autochdir`? If so I suggest not doing that, it's a legacy option that should not be used.
",justinmk,2015-10-07 07:21:39
369,2015-10-07 01:40:01,"Something like this?

<S_CODE_TOKEN>
- `FZF` -> `Files` if you have fzf.vim project
- Using VCS-specific commands to find the root should give more accurate results
  - e.g. `git rev-parse --show-toplevel`
- You can consider using the low-level `fzf#run()` directly if you need more control
",junegunn,2015-10-07 07:21:39
369,2015-10-07 06:46:04,"Thanks guys.

Closed #369

On Wed, Oct 7, 2015 at 3:40 AM Junegunn Choi notifications@github.com
wrote:

> Something like this?
> 
> function! s:find_root()
>   for vcs in ['.git', '.svn', '.hg']
>     let dir = finddir(vcs.'/..', ';')
>     if !empty(dir)
>       execute 'FZF' dir
>       return
>     endif
>   endfor
>   FZFendfunction
> command! FZFR call s:find_root()
> - FZF -> Files if you have fzf.vim project
> - Using VCS-specific commands to find the root should give more
>   accurate results
>   - e.g. git rev-parse --show-toplevel
> - You can consider using the low-level fzf#run() directly if you need
>   more control
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/issues/369#issuecomment-146053423.
",natemara,2015-10-07 07:21:39
368,2015-10-06 20:10:58,"I really enjoy using FZF. It is blazingly fast, even faster than CtrlP paired with Ag. It would be nice if we could duplicate CtrlP's ability to list out the open buffers and search through them fuzzily. I am talking about CtrlP's `:CtrlPBuffer` command. It is very useful for working with large projects and having lots of files open at once.
",natemara,2015-10-07 01:41:10
368,2015-10-06 20:41:39,"I think there is already such a functionality. look at `Buffers` command [here](https://github.com/junegunn/fzf.vim), it is provided by **fzf.vim**.
",khalidchawtany,2015-10-07 01:41:10
368,2015-10-07 01:41:10,"@khalidchawtany Thanks.

Yes, check out https://github.com/junegunn/fzf.vim
",junegunn,2015-10-07 01:41:10
368,2015-10-07 06:44:34,"Wow, this provides significantly more functionality than the main project
docs are letting on. Thank you.

On Wed, Oct 7, 2015 at 3:41 AM Junegunn Choi notifications@github.com
wrote:

> Closed #368 https://github.com/junegunn/fzf/issues/368.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/issues/368#event-428651000.
",natemara,2015-10-07 01:41:10
367,2015-10-06 09:45:33,"Hello,

Great utility, many thanks for developing it! Is it possible to use the install script just for downloading new versions of fzf? I maintain my dotfiles on my own and I don't like fzf to do unattended modifications on them.
",jokogr,2015-10-06 09:53:31
367,2015-10-06 09:53:07,"Undocumented, but it's there: `./install --bin`
",junegunn,2015-10-06 09:53:31
367,2015-10-06 09:57:55,"I modified the title so it's easier for the other users to find. Thanks.
",junegunn,2015-10-06 09:53:31
367,2015-10-06 10:11:09,"Great, didn't know that. Always had to undo the changes of the install script by hand before when updating a version
",netei,2015-10-06 09:53:31
366,2015-10-02 20:41:40,"I'd like to implement slightly modified fuzzy search which matches only beginning of words and not anywhere inside the word. For example: `ab` would match `alpha_beta` but won't match `alpha_andbeta` (because `b` doesn't start the word). This feature is usually not implemented in today's ""fuzzy"" searches but is, IMHO, very useful because it filters results much better.

How hard would be to add this to FZF? Where should I start looking? 
",sergei-dyshel,2015-10-30 07:37:31
366,2015-10-29 22:12:49,"Strange, after changing `FuzzyMatch` in `src/algo/algo.go` to behave as I proposed, the console utility still matches anywhere in the string. How could that be?

When I press a key which adds new letter to the pattern, is `FuzzyMatch` called to filter list of candidates or they're filtered somehow else? 

See e12a470d9e28100162f4d864777140aaa60c4d4d.
",sergei-dyshel,2015-10-30 07:37:31
366,2015-10-29 23:51:11,"`FuzzyMatch` is the right function. Given that your implementation is correct, it should work.
",junegunn,2015-10-30 07:37:31
366,2015-10-30 06:39:10,"The problem was that you use absolute `github.com/junegunn/...` paths in import directives. I had to change these to my repo so that correct `algo.go` is picked.
",sergei-dyshel,2015-10-30 07:37:31
366,2015-10-30 07:37:31,"Yes, it's a well known problem in go import paths, google it and you'll find what people are doing to deal with the issue.

Anyway, I'm going to close the issue since I'm not planning to add it to fzf. It's an interesting idea that has some potential, but most of the time, I do want to match letters that are not at the beginning of a word. For example, for `sergei-dyshel`, it's more natural and straightforward for me to just start typing `sergdy` than to think about the exact initials beforehand. And when I need more precise matching, extended-search mode (`-x`) works extremely well for me. Also, there are more details to consider if we want to properly support the feature. e.g. unicode characters, how to define word boundaries, what about uppercase letters, what if someone wants to customize it, how to toggle between the mode and the ordinary matcher, etc. 
",junegunn,2015-10-30 07:37:31
366,2015-10-31 18:10:01,"That's is the point! `sergdy` is abbreviation for `sergei-dyshel` ( `-` is considered word separator) as well as `sd` and `s-d`. That's how most of the people most of the time search files, identifiers - they see them as sequence of short words so they start to type first letters of words and expect to see words starting with these letters.

Personally, I'm using _fzf_ exclusively for history matching in _zsh_, since I'm working 9 hours a day in Linux terminal and I use multi-line commands frequently (thanks to your tool, it made a revolution in my workflow :smile: ). So, if I want to repeat `sudo pkill qemu` command, I'd type `spq` but ""traditional"" fuzzy matcher will suggest me half of my 10,000 lines of history which contain these letters _anywhere_ in the line. With abbreviation search, I can get to this command much faster.

Anyway,  I do realize that there is much more work to do in order make this feature properly and integrate with _fzf_. But if people will demand it, I'd like to contribute!
",sergei-dyshel,2015-10-30 07:37:31
366,2015-10-31 18:42:41,"I see. Reverse history search is an exceptional case since sorting is disabled by default (ctrl-r needed to enable). Considering sorting, the reason we type in `ser` instead of just `s` is that it gives higher priority to the ""better"" matches. We don't always know the exact initials of the words. Let's assume that we do know that the entry we want starts with `sergei` but we do not remember the initials of the words that follow. So we need to see what are the options. Simply typing in `s` is unlikely to bring the entries of our interest to the front. So we type in additional letters, `serg`, then we'll likely to see `serg-c`, `sergei-dyshel`, `sergei-e...`, etc. Aha, `dyshel` is what we want! So we type in `d` to further narrow down the candidates.

So my point is that even though the idea makes sense in some cases, it is definitely not a panacea, and we need a way to use the original matcher as well. One idea might be to add a special syntax to the extended-search mode, but we have to be careful not to make things complex.
",junegunn,2015-10-30 07:37:31
366,2015-10-31 20:27:35,"We'll work it out! :smile:

In the meantime, I've just released my first [VIM plugin](https://github.com/sergei-dyshel/vim-abbrev-matcher) which implements my idea for CtrlP and Unite - two popular fuzzy finders.  There, in GVim world where FZF is unfortunately not available,  all irrelevant candidates just make things so slow, so I had to propose something. Let's see what people think of it!
",sergei-dyshel,2015-10-30 07:37:31
365,2015-10-02 15:32:03,"Probably not a bug, but I find I find this behaviour strange and would like to have an explanation. Why are the results sorted like this for this input?
![image](https://cloud.githubusercontent.com/assets/207377/10250509/79e8d2b8-692b-11e5-994c-40a26a57a4cd.png)
",ggVGc,2015-10-02 16:31:31
365,2015-10-02 16:31:31,"Both have the matched substring of the same length (`Player` and `player`), so they're tied. fzf then compares the whole lengths of the items, the first one is shorter so it comes first. If those lengths are again the same, the items are listed in FIFO manner. In SQL-like term, it's `order by len(substring) asc, len(item) asc, index asc`. You can change the rule by setting `--tiebreak` option. See the man page for the details.
",junegunn,2015-10-02 16:31:31
364,2015-10-01 19:19:40,"Fixes #363.

Manual testing suggests that the changes work with bash as well as zsh.
",halostatue,2015-10-02 02:02:19
364,2015-10-02 02:02:34,"For some reason, I can't reproduce the problem on my El Capitan (removed zsh from homebrew and rebooted but still can't, must be missing something) but your patch looks harmless anyway so I'll just merge it. Thanks!
",junegunn,2015-10-02 02:02:19
363,2015-10-01 19:18:45,"fzf integration with zsh no longer works after having upgraded to Mac OS X 10.11.

I’m getting:

<S_CODE_TOKEN>

The error is correct—/usr/lib/zsh/5.0.8/zsh/pcre.so does not exist. If I enable ~/.brew/bin/zsh as a valid shell, it all works because pcre.so is included.
",halostatue,2015-10-02 02:02:19
362,2015-09-30 12:56:07,"fuzzy search for the the standard unix password manager (password entries). http://www.passwordstore.org/

<S_CODE_TOKEN>

Usage:

<S_CODE_TOKEN>
",d4ndo,2015-10-02 14:52:49
362,2015-09-30 14:38:17,"Hi, actually I'm not familiar with this pass. Since it's hard for me to maintain a feature that I do not know well, I'm going to need some time to learn the utility. Anyway, here are a few comments.
- Doesn't seem to work on my OS X, I'm getting
  - `sed: illegal option -- r`
  - `find: -printf: unknown primary or operator`
- `$pwdir` should be local
- It would be nice to make ""the standard unix password manager"" in the README file link to the project homepage since not everyone knows what it is
- Do you think it's possible to add a test case for the feature?
- Please squash the commits into one.
",junegunn,2015-10-02 14:52:49
362,2015-09-30 15:23:31,"I dont use OS X. This makes it hard for me to debug. I assume that OSX uses BSD unix commands.

The ""printf"" option of `find` is only supported by the GNU `find` command. see my first commit message:

https://github.com/d4ndo/fzf/commit/7e090295ae53515a572af6904d13e7b53b8fa56c

I guess i can fix that. Also the `sed` command. By using just (GNU and BSD) compatible options.
",d4ndo,2015-10-02 14:52:49
362,2015-09-30 15:43:22,"> I dont use OS X. 

I can help you with that, once I get to know better about pass. By the way, I'd like to know if this pass is a popular utility and it will be actively maintained in the future, what do you think? I'm concerned about feature bloat and don't want to expand fzf for tools that are not used by many.
",junegunn,2015-10-02 14:52:49
362,2015-09-30 15:56:42,"I don't think that this should go inside the fzf repository, but rather in the wiki as a sample.
",netei,2015-10-02 14:52:49
362,2015-09-30 16:04:08,"Though I applaud the general idea, calling pass ""the standard unix password manager"" is premature since it is not included by default in any distro I am aware of.
",justinmk,2015-10-02 14:52:49
362,2015-09-30 22:30:22,"It is the only password manager project that has understood the unix philosophy so far. So it is de facto the `standard unix password manager`. It has potential and it will be the only password manager that will be compatible to fzf in the near future. To a lot of nerds, there is no alternative to this.

`pass` and `fzf` would just go well together.

The alternative would be some modification of pass, so it would output some raw text format. 
1 ) It could be called like this:

`pass --raw | fzf`

2 ) or some shell function:

<S_CODE_TOKEN>

3) However, this is somewhat the best solution, in my opinion:

`pass **<TAB>`

The maintenance should be negligible. I hope. 

I will fix it anyway. Maybe you can use it as example @ wiki.
",d4ndo,2015-10-02 14:52:49
362,2015-10-02 09:15:36,"Tested it on FreeBSD. Does it work on OS X ?
",d4ndo,2015-10-02 14:52:49
362,2015-10-02 09:57:14,"I upgraded to El Capitan today, and Homebrew now fails to compile pass :hankey: 
I'll test it on another macbook later in the day.

I also don't think it's appropriate to call it ""the standard unix password manager"". With the labelling I was tricked into believing that it was some kind of a 30-year-old unix command that I shamefully did not know about, but it was not. ""`Fuzzy completion for [pass command](link)`"" should be sufficient.
",junegunn,2015-10-02 14:52:49
362,2015-10-02 14:44:30,"Yes, it does work, thanks.

However, I'm not sure if I'm going to merge this. This is a small, simple addition and it's indeed a useful feature. But we can't endlessly add things just because they're useful and we have to draw the line somewhere to keep the repository maintainable in the long run. As you might have noticed, I haven't added any extra shell/vim features to this repository for quite a while. Actually I'm leaning towards the opposite, I want to make it smaller.

Take a look at [fzf.vim](https://github.com/junegunn/fzf.vim) project or the wiki pages. Instead of adding more stuff to this central repository, force-feeding them to every user, we're adding/posting features there only for the users who actually want them. Basically I think we should do the same for fuzzy completion. The problem is however, there is currently no easy, straightforward, and consistent way to add custom completion functions. Once we make it more extensible and come up with nicer API for creating custom fuzzy completion, we can share more useful stuff on a new wiki page.
",junegunn,2015-10-02 14:52:49
362,2015-10-02 14:52:49,"No problem. 
It is no easy task to keep the source code lean and simple.

Thanks for testing. 
",d4ndo,2015-10-02 14:52:49
362,2015-10-02 15:04:54,"Thanks for understanding and I appreciate your effort. I'll try to come up with a better way to organize/extend completion functions and let you know of the progress.
",junegunn,2015-10-02 14:52:49
361,2015-09-30 03:36:08,"The SwapExists dialog prevents multiple files from being opening if the
dialog occurs before all files are opened. Opening the files is more
important than showing the dialog, so choose ""readonly"" automatically
and continue opening files.

This problem exists in neovim and Vim 7.3. Not sure about others. To test, choose multiple files in the `:FZF` prompt; if a swap-exists dialog appears before all files are opened, those remaining files will not be opened.
",justinmk,2015-09-30 07:16:19
361,2015-09-30 04:59:18,"Thanks, makes good sense.
How about if we do this only when multiple files are selected?

(I need to apply this patch to fzf.vim project as well.)
",junegunn,2015-09-30 07:16:19
361,2015-09-30 05:20:02,">  only when multiple files are selected?

Is that a matter of checking the length of `a:lines`? 

I would lean towards it being consistent in both cases--otherwise users will be confused that the dialog sometimes appears and sometimes doesn't, when using FZF.
",justinmk,2015-09-30 07:16:19
361,2015-09-30 05:54:53,"Yeah I see your point and I also don't like the inconsistency. But what I'm thinking is that considering that `:FZF` is _mostly_ (no proof) used to open a single file (and I believe that many users aren't even aware that it can select multiple entries especially since it requires extra `-m` option), it makes sense to make it consistent with the default behavior of Vim just in that case even if it means introducing some inconsistency.
",junegunn,2015-09-30 07:16:19
361,2015-09-30 05:58:47,":+1: 
",justinmk,2015-09-30 07:16:19
361,2015-09-30 06:21:55,"Alright, could you update your commit? Simply surrounding autocmd with `if len(a:lines) > 1` statement will do.
",junegunn,2015-09-30 07:16:19
361,2015-09-30 07:16:28,"Merged, thanks.
",junegunn,2015-09-30 07:16:19
360,2015-09-27 06:57:50,,jebaum,2015-09-27 07:27:33
360,2015-09-27 07:01:45,"I'm guessing using `index()` to check two values at once is a style preference, I tend to prefer things as straightforward as possible but I can switch it back to your way if you want
",jebaum,2015-09-27 07:27:33
359,2015-09-27 06:10:40,"I'm attempting to create a fzf.vim function which will either load a session (managed by https://github.com/manuel-colmenero/vim-simple-session) or create a new one. vim-simple-session contains a function called `s:SwitchSession` which, given a string, will switch to a session if it exists or create a new one by that name if it doesn't. I would expect the below code to work, but from what I can tell due to the commented out `echom` lines, the sink isn't getting called in the case that the exit status of fzf is 1 (a query was entered but there was no match). So the function works for switching to an existing session, but not for creating a new one.

related: https://github.com/junegunn/fzf/issues/345

<S_CODE_TOKEN>
",jebaum,2015-09-27 07:28:48
359,2015-09-27 06:23:02,"problem is around line 238 of fzf.vim where it checks `v:shell_error`. not sure what the proper behavior should be. I don't see why an exit status of 1 shouldn't continue on to call the callback function, but the comment there makes it pretty explicit so I'm guessing you have a reason. perhaps a new option should be added in the dictionary you can pass to `fzf#run()` to determine how exit status 1 should be handled?
",jebaum,2015-09-27 07:28:48
359,2015-09-27 06:26:37,"actually after a little more investigation this definitely seems like a bug. when calling the tmux or neovim execute funcions (`s:execute_tmux`, `s:execute_term`), if fzf exits with status 1 it still calls the sink function. so my code from my original comment works fine if you open fzf in a tmux pane or a neovim `:term`. it's just the case of vim with fzf not in tmux where the behavior is different.

I'm gonna send a PR in a few minutes to make the vanilla vim behavior the same as neovim and tmux.
",jebaum,2015-09-27 07:28:48
359,2015-09-27 06:42:01,"Cool, thanks. Exit status of 1 was a recent change, and I think I forgot to update the vim plugin accordingly.
",junegunn,2015-09-27 07:28:48
359,2015-09-27 06:43:31,"So it should be:
- 0 or 1 -> sink
- 130 -> cancel, ignore
- rest -> error message
",junegunn,2015-09-27 07:28:48
359,2015-09-27 06:56:20,"Hmm, looks like tmux and term version also need update.
",junegunn,2015-09-27 07:28:48
359,2015-09-27 06:56:50,"I just finished updating `s:execute()`, I'm happy to do those too but I'm not sure what you're referring to since they work fine for me
",jebaum,2015-09-27 07:28:48
359,2015-09-27 06:57:48,"There are some corner cases, please send me the PR, I'll do the rest.
",junegunn,2015-09-27 07:28:48
359,2015-09-27 07:28:48,"Merged your fix and updated the other ones too. Thanks!
",junegunn,2015-09-27 07:28:48
358,2015-09-24 14:16:43,"Here I wrote an util with fzf for quick access emacs(daemon mode) opening buffers.

https://github.com/dingmingxin/fzf-emacsbuffers
",dingmingxin,2015-09-24 14:56:22
358,2015-09-24 14:56:22,"Hi, that's nice. Feel free to add you project to the wiki page. Also, you might want to check out [fzf.el](https://github.com/bling/fzf.el) which integrates fzf with emacs. Thanks.
",junegunn,2015-09-24 14:56:22
357,2015-09-24 14:14:21,"![2015-09-24 11 13 51](https://cloud.githubusercontent.com/assets/700826/10075679/f76521c6-6311-11e5-812c-beadbebc7f84.png)

such sorry.
very much apologize.
",junegunn,2016-11-26 02:42:18
357,2015-09-24 14:30:40,":+1: 
",justinmk,2016-11-26 02:42:18
357,2015-09-24 14:58:32,"http://invisible-island.net/ncurses/ncurses.faq.html#xterm_16MegaColors

> Using the ncurses 5 ABI, you have available 16 colors, or 256 pairs of colors. Using the ncurses 6 ABI, you would have 256 colors, or 32767 pairs (the limit for a signed 16-bit number).
",junegunn,2016-11-26 02:42:18
356,2015-09-24 13:07:08,"I have installed fzf with the provided `install` script.

As soon as I execute fzf, I get the following error:

<S_CODE_TOKEN>

Am I doing something wrong?
",gregmuellegger,2015-09-24 13:40:33
356,2015-09-24 13:09:15,"Probably the same as https://github.com/junegunn/fzf/issues/350#issuecomment-141404185
",netei,2015-09-24 13:40:33
356,2015-09-24 13:12:49,"@netei Thanks.

@gregmuellegger Please update the repository to the latest and rerun the install script.
",junegunn,2015-09-24 13:40:33
356,2015-09-24 13:40:33,"I would have sweared that I used the latest master, but actually it solved the problem. Seems that I were on an old commit.

Thanks so much for the quick turnaround!
",gregmuellegger,2015-09-24 13:40:33
355,2015-09-24 08:20:52,"My script is  

<S_CODE_TOKEN>

I'd like to be able to abort the fzf command after the execute has been done. Is it possible ?

I've tried `--bind='ctrl-t:execute(tmux kill-session -t {})'),abort` but that doesn't work
",netei,2015-09-24 15:13:03
355,2015-09-24 10:32:21,"How about using `--expect=ctrl-t` instead? There was a similar request: https://github.com/junegunn/fzf/issues/340
",junegunn,2015-09-24 15:13:03
355,2015-09-24 12:40:08,"Strangely if I do that, and quit with enter, the session variable contains a `\n` at the beginning of the element.

<S_CODE_TOKEN>

If I look at /tmp/session, it contains a ""\n"" when I have the `--expect=ctrl-t` and exit fzf with enter, but I don't have a ""\n"" if I remove the `--expect=ctrl-t`
",netei,2015-09-24 15:13:03
355,2015-09-24 12:43:07,"It seems that it is the expected behaviour of --expect 

> --expect=KEY[,..]
>        Comma-separated list of keys that can be used to complete fzf in  addition  to  the  default
>        enter  key. When this option is set, fzf will print the name of the key pressed as the first
>        line of its output (or as the second line if --print-query is also used). The line  will  be
>        empty if fzf is completed with the default enter key.
>        e.g. fzf --expect=ctrl-v,ctrl-t,alt-s,f1,f2,~,@
",netei,2015-09-24 15:13:03
355,2015-09-24 13:07:25,"I finally achieved what I want : 

<S_CODE_TOKEN>
",netei,2015-09-24 15:13:03
355,2015-09-24 13:10:54,"Hmm, you don't want/need `execute` in this case:

<S_CODE_TOKEN>

You see the point?
",junegunn,2015-09-24 15:13:03
355,2015-09-24 15:13:01,"Ok, I've removed ctrl-t from my binding.

Thanks for the tip
",netei,2015-09-24 15:13:03
354,2015-09-23 22:48:43,"<S_CODE_TOKEN>

It says “Added” even though there was an error. `man test` points to using `[ -w ~/.zshrc ]` to check if it's writable. I'll try submit a PR if I have time.
",twe4ked,2015-09-24 02:02:01
354,2015-09-24 01:23:33,"Good catch, thanks!
",junegunn,2015-09-24 02:02:01
354,2015-09-24 02:02:35,"Should be fixed now. install script will simply terminate on the error.
",junegunn,2015-09-24 02:02:01
354,2015-09-24 03:16:53,":+1:
",twe4ked,2015-09-24 02:02:01
353,2015-09-22 15:54:21,"I also use the Vim-Filer plugin to browse a source tree (nerdtree like behavior). However, it does not work if the `autochdir` option is set. Are there any known workarounds for this issue? 
",ianks,2015-09-23 14:44:01
353,2015-09-22 16:11:29,"`:FZF` command does unset `autochdir` when opening files but it _restores_ the original value immediately. So what exactly is the problem?
",junegunn,2015-09-23 14:44:01
353,2015-09-23 14:43:59,"<S_CODE_TOKEN>

This is the error message I get from vim-filer.

Here are the conditions which make this error display:

<S_CODE_TOKEN>

EDIT: Update, it was not FZF that caused this condition. I grepped my plugin dir for any references to autochdir and fzf was the only plugin that used that code. However, apparently neovim has set autochdir somehow, but vim does not. Sorry for the confusion.
",ianks,2015-09-23 14:44:01
353,2015-09-23 14:46:24,"Neovim does not set autochdir. What does `:verbose set autochdir?` report?
",justinmk,2015-09-23 14:44:01
353,2015-09-23 14:57:25,"@justinmk It reports `autochdir`

For some reason, everything works fine on Vim, but not Neovim.
",ianks,2015-09-23 14:44:01
353,2015-09-23 15:05:48,"That doesn't make sense. The vim-filer code you mentioned applies to Vim and Neovim: https://github.com/Shougo/vimfiler.vim/blob/b1e5417b1ad351a69dd66027c8b521fe83246634/autoload/vimfiler/init.vim#L373

Are you intentionally setting the option in your n/vimrc, or not?
",justinmk,2015-09-23 14:44:01
353,2015-09-23 16:26:10,"No I am not @justinmk. It appears nowhere in my code (confirmed by grepping).
",ianks,2015-09-23 14:44:01
353,2015-09-23 16:33:20,"@ianks Did you also grep for `acd` (the short version of `autochdir`)?
",justinmk,2015-09-23 14:44:01
353,2015-09-28 13:05:55,"@ianks @justinmk I see the same problem with the latest neovim-git -- it reports autochdir to be set, although it is not. I must manually run `set noautochdir` before using vim-filer every time, no matter what is in my `.nvimrc`.
",saulhoward,2015-09-23 14:44:01
352,2015-09-21 21:05:39,"I use vertical splits a lot. FZF is one of the primary methods I use to open files. Unfortunately, on Neovim, if I have a vertical split, FZF always opens the file in the right-most split regardless of which split I have in focus at the time.

This isn't true for regular Vim. It might be because Neovim opens up a new terminal split for FZF, and it's somehow screwing with it.
",borring,2015-09-25 04:34:45
352,2015-09-22 01:23:45,"Looks like a duplicate of #348 which I couldn't reproduce.
I guess @azure-satellite knows what should be done.
",junegunn,2015-09-25 04:34:45
352,2015-09-22 17:03:42,"In my case it was an autocommand for `BufEnter` in my `.vimrc` which was screwing up stuff. I don't know if this would be true for @borring 
",azure-satellite,2015-09-25 04:34:45
352,2015-09-22 18:02:40,"Indeed, it was a BufEnter in my case as well.

I had a BufEnter command automatically set the buffer to `buftype=nofile` if no file is open. It also automatically sets `filetype=markdown`

This is because most of the time, when I fire up vim, it's to use for scratch work anyway. I bisected my vimrc and it turns out, it was the `filetype=markdown` that caused the problem. I confirmed it by commenting out the single line.

Replacing BufEnter with BufWinEnter also fixes the issue.
",borring,2015-09-25 04:34:45
352,2015-09-22 20:13:05,"@borring if this didn't happen in vim perhaps we should investigate further and file a bug with neovim?
",azure-satellite,2015-09-25 04:34:45
352,2015-09-22 20:48:23,"Please first verify on a _recent_ version of Vim. 
",justinmk,2015-09-25 04:34:45
352,2015-09-24 05:33:40,"I tested with Vim 7.4.827 and it worked as it should. I'm thinking it's because FZF uses the new terminal buffer on Neovim. I reduced my vimrc down to just the relevant bits.

<S_CODE_TOKEN>

I found that there are several fixes:
Remove one of these:
- `set filetype=markdown`
- FastFold plugin

or

Change `BufEnter` to `BufWinEnter`
",borring,2015-09-25 04:34:45
352,2015-09-25 02:04:59,"I confirmed that the problem is reproducible with the older versions of Neovim, but not anymore with the latest version with the recent fixes. Please rebuild neovim and try again.
",junegunn,2015-09-25 04:34:45
352,2015-09-25 03:56:03,"I'm using the latest Neovim from git and still seeing the problem.

Are these the steps you took?
1. Save the nvimrc from this issue
2. nvim -u problem_vimrc
3. :vsplit (not `:vnew` or `:new`)
4. :FZF (open some file)
",borring,2015-09-25 04:34:45
352,2015-09-25 04:34:45,"Ah, sorry I was somehow confused, it's reproducible on the recent build.

However, after a quick look at this FastFold plugin, I now don't think that the problem is something fzf can, or should handle. When the term buffer is closed, fzf uses `wincmd p` to go back to the previous window (note that you can freely move around the windows even after fzf is started), but the FastFold plugin triggered by your `set filetype=markdown` gets in the way, messes up the `p` window. So I would say the problem is in the way FastFold operates, and `BufWinEnter` should be the best way to avoid the problem.
",junegunn,2015-09-25 04:34:45
351,2015-09-20 06:45:00,"If I checkout the repo and build the source from my working directory there is no excuse for the makefile and other related scripts to make a bunch of requests to download files out of a hard coded github path to the upstream repo. The files are sitting there local to my working directory and I may have modifications I want them to use. Changing the source code locally and recompiling only to find that it's using source code from the upstream github repo is disturbing to say the least.
",alerque,2015-09-21 08:01:05
351,2015-09-20 07:02:49,"See:
- http://golang.org/doc/code.html#Organization
- https://golang.org/cmd/go/#hdr-Relative_import_paths
  - `To avoid ambiguity, Go programs cannot use relative import paths within a work space.`
",junegunn,2015-09-21 08:01:05
351,2015-09-21 06:45:34,"I'm not very familiar with Go as a language but I believe you are reading the documentation wrong. Higher up on the page it states:

> The toolchain supports relative import paths as a shortcut in two ways.

Then it goes on to detail those two ways. Those ways cover what needs to be fixed in this project.

The line you quoted is not related to the issue I am raising here. I am not asking for relative paths _within a workspace_, I am suggesting that paths be relative _to_ the current workspace. They can be full/absolute paths relative to the workspace root as required by that documentation, but they should not include an absolute path to an online copy of the repository when referencing from inside that repository.
",alerque,2015-09-21 08:01:05
351,2015-09-21 08:01:05,"Nah, you're still not getting the point. Try to familiarize yourself with how usual Go projects are laid out first. By ""workspace"", they mean $GOPATH which holds all the go projects that can point to each other, not just the current repository, which is clearly stated in the first link I gave you.

> Those ways cover what needs to be fixed in this project.

No.
1. `can be used as a shorthand on the command line.` - Not relevant
2. `compiling a Go program not in a work space`, `such programs cannot be installed with ""go install""`

Using relative import path is strongly discouraged and it breaks go toolchain. Like it or not, it's Go.

Check out some other go projects:
- https://github.com/docker/docker
- https://github.com/pingcap/tidb
- https://github.com/spf13/hugo
",junegunn,2015-09-21 08:01:05
350,2015-09-18 08:53:52,"Hello!

I noticed today that fzf stopped working on my Archlinux install.
Looks like ncurses got upgraded and `libncursesw.so.5` is not available anymore.

I recompiled **FZF** to confirm that this was the problem.

Here's `ldd` output for packaged binary

<S_CODE_TOKEN>

And here's `ldd` output for self-compiled binary:

<S_CODE_TOKEN>

I think that fzf may benefit from shipping arch-specific binary or pointing in docs that it requires compilation on latest archlinux. 

Or maybe it might perform/suggest compilation in `install` script ? 

If you need any help/testing with this please let me know.
",kowalskey,2015-09-19 15:28:49
350,2015-09-18 09:39:44,"Can you try `git pull` and rerun the install script? It will download static binary if the default one does not work.

Related: https://github.com/junegunn/fzf/commit/1de4cc3ba862ace3f78db395a2bd1dfa21e4798e
",junegunn,2015-09-19 15:28:49
350,2015-09-18 09:42:03,"I have also problem on arch linux today after pulling latest from master. 

I manually compiled fzf and that binary works. 

Using the linked one:
./fzf-0.10.5-linux_amd64: error while loading shared libraries: libncursesw.so.5: cannot open shared object file: No such file or directory

Using the static binary:

<S_CODE_TOKEN>
",jonaz,2015-09-19 15:28:49
350,2015-09-18 09:48:28,"@jonaz ~~Please rerun the install script and see if it helps.~~ Oops. Sorry, I'll have to look into it. Hmm.
",junegunn,2015-09-19 15:28:49
350,2015-09-18 09:49:38,"@junegunn i just manually compiled fzf and that binary works. I already tried removing ~/.fzf and cloing and running ./install again without success. 

Check my last comment above. I saw different errors when using your static and linked binary. 
",jonaz,2015-09-19 15:28:49
350,2015-09-18 10:04:31,"@kowalskey reported that the static binary works on his machine.

https://github.com/junegunn/fzf/commit/1de4cc3ba862ace3f78db395a2bd1dfa21e4798e#commitcomment-13306953

I wonder what makes the difference.
",junegunn,2015-09-19 15:28:49
350,2015-09-18 10:17:28,"> Assertion `cnt < (sizeof (_nl_value_type_LC_COLLATE) / sizeof (_nl_value_type_LC_COLLATE[0]))' failed.

@jonaz I'm not sure but assertion above may suggest some locale problems.
 please check your locale settings 
for reference here are my LC_*:

<S_CODE_TOKEN>

I removed binaries and called install once again:

<S_CODE_TOKEN>
",kowalskey,2015-09-19 15:28:49
350,2015-09-18 10:18:54,"after unsetting LC_COLLATE I reproduced problem:

<S_CODE_TOKEN>

So this is triggered by `LC_COLLATE` being unset or otherwise unavailable.
",kowalskey,2015-09-19 15:28:49
350,2015-09-18 10:23:38,"@kowalskey Thanks for the investigation! I'll see what I can do.
",junegunn,2015-09-19 15:28:49
350,2015-09-18 10:33:28,"This is my LOCALE/LC/LANG:

$ env | egrep LC|LOCALE|LANG
LANG=en_US.UTF-8
",jonaz,2015-09-19 15:28:49
350,2015-09-18 10:36:54,"@jonaz I could also reproduce the problem:
- With $LANG set, the static binary crashes
- Without $LANG, it works: `LANG= fzf`

I'm trying to find the right solution to the problem.
",junegunn,2015-09-19 15:28:49
350,2015-09-18 10:55:01,"Possibly related: https://github.com/rstudio/rmarkdown/issues/498
Could be an issue of Arch, but I'm not sure.
",junegunn,2015-09-19 15:28:49
350,2015-09-18 12:20:21,"It seems to be issue with Archlinux. There are some topics on forums, however AFAIK no practical (working) solutions are present. 
Some people reported successes with their solutions, however I was unable to confirm that.

Few topics I encountered are:
- https://bbs.archlinux.org/viewtopic.php?id=200860
- https://bbs.archlinux.org/viewtopic.php?id=200845

I tested a little and noticed that when `LANG` is set to locale generated by `locale-gen` fzf crashes.
To be more specific:
- If `LANG` is set to empty or  meaningless value e.g `LANG=foo` - fzf works
- If generated locales are deleted (`/usr/lib/locale/locale-archive` is not present) - fzf works
- If `LANG` is set to locale generate by `locale-gen` and locale is present in ``/usr/lib/locale/locale-archive` - fzf crashes

at least this is what I observe on my system.

I'll try to find some other packages which are affected by this and if there aren't any bugs at http://bugs.archlinux.org regarding glibc / locale problems - I'll report one and leave URL here for reference.
",kowalskey,2015-09-19 15:28:49
350,2015-09-18 17:55:21,"Aaand I think I pinpointed what is the problem.

both me and @jonaz  use statically compiled binary which is probably compiled against older glibc version.
In glibc 2.22 locale format changed a bit.

So upgrading to glibc 2.22 on arch will automatically call `locale-gen` and thus update locales.
And because fzf is probably compiled against older version  (@junegunn  can probably confirm that)  it will fail when trying to load file saved in newer format.

I think that static recompilation against newer glibc will fix that problem on Arch. Or at least it should help to confirm whether this is a problem.
",kowalskey,2015-09-19 15:28:49
350,2015-09-19 01:10:18,"@kowalskey Awesome, thanks for looking into it. I was unsuccessful to build static binary on Arch, so currently I'm building it on Ubuntu. (I got the impression that Arch community was against this notion of static linking in general: https://www.archlinux.org/todo/remove-static-libraries/)

<S_CODE_TOKEN>

So we can either:
1. Find a way to build static binaries on Arch
2. or to upgrade Ubuntu and see if it helps
",junegunn,2015-09-19 15:28:49
350,2015-09-19 01:47:47,"Okay, I was able to build a static binary on Arch by building ncurses6 and gpm from source (and with `LDFLAGS := --ldflags '-extldflags ""-static -ldl -lgpm""'`), and the resulting binary doesn't suffer the problem, however it does not work on Ubuntu. Maybe it's okay since the non-static version works there, but we need to check how it works on other platforms as well.

Related: https://github.com/junegunn/fzf/issues/322
",junegunn,2015-09-19 15:28:49
350,2015-09-19 09:40:24,"I think I got this. Statically linking only ncurses seems to fix the compatibility issue. I'll release 0.10.6 binaries with the change and let you know. Thank you very much for your help.
",junegunn,2015-09-19 15:28:49
350,2015-09-19 13:20:31,"Just released 0.10.6. Please update the git repo and re-run the install script. The problem should be gone now. Thanks.

<S_CODE_TOKEN>
",junegunn,2015-09-19 15:28:49
350,2015-09-19 13:28:51,"Hmm, realized that the new binary does not run on old linux boxes (RHEL5) so I reverted the update.
",junegunn,2015-09-19 15:28:49
350,2015-09-19 15:28:49,"Phew, I changed the makefile to build the binary on Centos 6 which has old glibc 2.12, and finally it works fine on Ubuntu 14, Centos 6, RHEL 5, RHEL 6, and the latest Arch linux.
",junegunn,2015-09-19 15:28:49
350,2015-09-19 16:04:50,"Great job, thanks!
",kowalskey,2015-09-19 15:28:49
350,2015-09-20 01:58:37,"On Arch x86_64, I had to change line 8 of `curses.go`

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

to get it to compile. Otherwise, the build halts with the following.

<S_CODE_TOKEN>
",lyeoh,2015-09-19 15:28:49
350,2015-09-20 04:02:29,"@lyeoh Yeah, that's because on Arch, libraries are not shipped with static libraries (`.a`). You'll have to manually compile and install ncurses and gpm to build with the directives. Leaving only `-lncurses` will build a binary that dynamically links to ncurses, it'll work fine on the machine but it will not run on system with ncurses 5. I decided to build the official binary on Centos 6 as noted above to make it compatible on most systems.
",junegunn,2015-09-19 15:28:49
350,2015-09-20 06:29:14,"If you want to compile a static binary release that's fine for those that want it, but the source code repository should be setup to compile for their host systems. Most of us compiling from the source are going to want to run on the system it was compiled for. A statically linked build could be a build time option but it should not be the default.
",alerque,2015-09-19 15:28:49
350,2015-09-20 06:36:54,"@alerque Yeah I see the point, please send me a PR, so I can still build statically compiled binary with `make linux` and you can build dynamic binary without having to edit the source, then we'll all be happy :)
",junegunn,2015-09-19 15:28:49
349,2015-09-17 08:36:36,"I have [a tool](https://github.com/greg0ire/switch), that, among other things changes the history file when I switch from a project to another, using the `zsh` built in `fc -p`. When I do that, <kbd>Ctrl</kbd>+<kbd>R</kbd> does not work until I start a new terminal. Can this be fixed ? If not, how can I restart / reload fzf ?
",greg0ire,2015-09-17 14:06:19
349,2015-09-17 14:01:27,"Hi, I use bash and I'm not familiar with `fc -p` from zsh. Can you provide a simple steps to reproduce the problem on vanilla zsh?
",junegunn,2015-09-17 14:06:19
349,2015-09-17 14:06:19,"I tried but I can't… guess there must be something else in my tool that is reponsible for this bug. I'll reopen this if I find, sorry for the noise.
",greg0ire,2015-09-17 14:06:19
349,2015-09-17 14:13:34,"No problem.
",junegunn,2015-09-17 14:06:19
348,2015-09-16 15:52:52,"When the fzf terminal window is closed, it always reuses the bottom right window, not the last one.
",azure-satellite,2015-09-16 19:44:07
348,2015-09-16 16:21:00,"Not reproducible for me. You might want to try again with a minimal vimrc with no other plugins or sophisticated configs.
",junegunn,2015-09-16 19:44:07
348,2015-09-16 16:23:13,"@azure-satellite can you also try the neovim/neovim#3309 branch with your current config? That PR fixes some problems with `termopen()` and could fix yours too.
",tarruda,2015-09-16 19:44:07
348,2015-09-16 19:43:24,"Sorry yeah @tarruda @junegunn it was my config
",azure-satellite,2015-09-16 19:44:07
347,2015-09-15 14:02:05,"Hi. Is it possible to use the functionality of fzf directly inside my Go code, instead of running fzf externally and capturing its output?
",siadat,2015-09-15 14:53:40
347,2015-09-15 14:53:40,"No. The code was written with the assumption that it will run as a short-lived standalone process, so there is no well-defined public API and there are stateful singletons that are not designed to be reused multiple times. It would be of course possible if we do some work, but I personally don't need it and want to keep fzf simple so it's not my priority.
",junegunn,2015-09-15 14:53:40
347,2015-09-15 15:01:17,"@junegunn Thanks for the clarification!
",siadat,2015-09-15 14:53:40
346,2015-09-15 06:37:08,"<S_CODE_TOKEN>

They're basically the same, but I think it's more common to want to use `--header`. 
",junegunn,2015-09-15 10:05:17
345,2015-09-14 22:25:04,"I have written a [Tmux session finder](https://github.com/siadat/session-finder). It uses fzf to search for sessions and switch to them. If no session is found it will create a new session and uses the fzf query to name it.

At the moment, the exit status is 0. I use `--print-query`, if the output of fzf is 2 lines then a match has been found (the query and the result), if the output is 1 line then no match has been found (only the query).

I thought it would be a good idea if fzf returns a non-zero status when user enters a query and presses Enter, but no match is found. Status 1 is used for Ctrl-c interrupts, maybe we could use status 2 to indicate that no match has been found.

I would be glad to submit a patch for this. Let me know what you think.
",siadat,2015-09-15 04:22:55
345,2015-09-15 01:23:51,"I like the idea of exit status 2. As you might have already guessed, the reason I made fzf exit with status zero in such case was to make it possible to tell if it was aborted or not. Exit status 2 still allows us to tell the difference and make it easier to write small scripts like `val=$(fzf) && vim ""$val""` as we don't have to worry about getting an empty value. Technically, we are breaking backward compatibility here, but I think this is the right direction. The patch should be trivial so I'll do it myself later in the day.
- Interactive mode
- Filtering mode (`--filter`)
- Should `--exit-0` also exit with the code?
- Test cases
",junegunn,2015-09-15 04:22:55
345,2015-09-15 01:25:27,"I just checked the exit codes from `grep`, and realized that it exits with 1 when no match is found, and 2 on invalid options. Maybe we should follow the convention.
",junegunn,2015-09-15 04:22:55
345,2015-09-15 04:25:37,"Pushed the fix. I'll release the next version in a couple of weeks. Let me know if you have further comments. Thanks.
",junegunn,2015-09-15 04:22:55
345,2015-09-15 06:31:43,"Thank you @junegunn!
",siadat,2015-09-15 04:22:55
345,2015-09-18 01:03:35,"Hmm, I think we also should be able to differentiate between interrupt and error. Not sure which code should be used, but anything other than 2 will do at the moment.
",junegunn,2015-09-15 04:22:55
345,2015-09-18 09:20:35,"I haven't run into a situation where it would be necessary yet, but that would be nice. Perhaps it could be used for debugging scripts that set fzf flags dynamically.
",siadat,2015-09-15 04:22:55
344,2015-09-12 02:12:51,"In the following case:

<S_CODE_TOKEN>

fzf matches `foob` instead of `fb` since it scans forward and stops right after the first match is found. Although it would be very expensive to try to find the best match in any position in the input, it seems to make good sense just to scan backwards when `--tiebreak=end` is set.

We may even consider adding an option so that one can choose the direction of the scan: e.g. `forward`, `backward`, `both`. But this is optional.
",junegunn,2015-09-12 03:54:11
344,2015-09-12 02:15:46,"`echo -e ""foobar fb\nfubar"" | fzf -q fb`

![2015-09-12 11 15 08](https://cloud.githubusercontent.com/assets/700826/9829461/8f870eb0-593f-11e5-8883-3f692edc6ebb.png)

`echo -e ""foobar fb\nfubar"" | fzf -q fb --tiebreak=end`

![2015-09-12 11 15 14](https://cloud.githubusercontent.com/assets/700826/9829462/94d04206-593f-11e5-9a47-a59ecb233c7d.png)
",junegunn,2015-09-12 03:54:11
343,2015-09-07 00:41:37,"Hi,

It seems that having ` sign in command line hangs tmux window after pressing `Ctrl-R`.

Works in plain shell though.
",firedev,2015-09-07 09:42:11
343,2015-09-07 09:42:27,"Thanks for the report. Should be fixed now.
",junegunn,2015-09-07 09:42:11
342,2015-09-05 11:53:17,"The nice xterm customizations added in #212 are partly broken since commit 8fb31e1.

If you run `:FZF<cr>`, the xterm window opens as expected, with correct size, position and title, but the background color and text color are missing. Instead of getting the same colors as my colorscheme in vim I get xterm’s default colors. I suspect this has to do with there being a `#` in the hex color codes, but it might be a red herring.
",lydell,2015-09-05 12:39:20
342,2015-09-05 12:40:02,"Ah, thanks for the report. Please update and try again.
",junegunn,2015-09-05 12:39:20
342,2015-09-05 12:44:17,"Splendid! Thanks for the extremely quick fix.
",lydell,2015-09-05 12:39:20
341,2015-09-02 19:38:43,"It'd be great to expose the default command so you could define a default command that falls back to it easily:

<S_CODE_TOKEN>

Or maybe even better: make it so that if the default command fails (has a non-zero exit status) it falls back to the initial default command?

The impetus behind this is so that if the default command changes (e.g. #310), we don't have to update our custom default commands.
",tupton,2015-09-03 01:55:06
341,2015-09-03 01:45:43,"Thanks for the suggestion, but I'm not sure if it's really needed considering that the default command almost never changes. The only change in almost two years is the one you linked above, and even the change is not necessary if you don't have files in the current directory that start with dash. It's just a simple find command anyway and there's no reason to strictly follow it.

If we are going to do it, there are some things to consider.

> `export FZF_DEFAULT_COMMAND=""git ls-tree -r --name-only HEAD || $FZF_INITIAL_COMMAND""`
1. This means that `$FZF_INITIAL_COMMAND` must be defined before `$FZF_DEFAULT_COMMAND`. Which can be confusing to the users. One more thing to learn.
2. `fzf.bash`, `fzf.zsh`, and `fzf.fish` will have to include the code for defining the variable. Then we have duplicates in the code base. One in go source, one for bash and zsh, and another for fish.
3. Instead, it is conceivable that we tell the user to define `$FZF_DEFAULT_COMMAND` with single-quotes and let fzf inject the variable. But that can also be a source of confusion. ""Why is $FZF_INITIAL_COMMAND not working?"" ""Oh, you should have used single-quotes."" Believe me, things like this happen quite often.
",junegunn,2015-09-03 01:55:06
341,2015-09-03 01:49:06,"Another thing, the default command is `find . -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null | sed s/^..//` and you need `eval`.

<S_CODE_TOKEN>
",junegunn,2015-09-03 01:55:06
341,2015-09-03 01:55:06,"You had me at ""the only change in almost two years"". :)

Thanks for the detailed description of what's going on here. I agree that a command that almost never changes is not worth all this hassle for, and your explanation of that hassle is clear to understand.

Thanks for taking a look!
",tupton,2015-09-03 01:55:06
340,2015-09-01 18:28:20,"Currently, as far as I understand it's only possible to map a key to one command at a time. For my current use case, I need to do an `execute` followed by an `abort` from one keypress. Is this currently possible?
",ggVGc,2015-09-01 19:25:48
340,2015-09-01 19:13:41,"Nope.

>  I need to do an execute followed by an abort

It's not what `execute` action is for. It's for executing some command **without leaving** fzf interface.
Any particular reason you don't want to do in the way we normally do with fzf?

<S_CODE_TOKEN>
",junegunn,2015-09-01 19:25:48
340,2015-09-01 19:16:04,"Well, actually the use case is that I need to exit fzf knowing which key was used to exit. So, actually what I am looking for is an `exit_with_output` or similar action. But sequence chaining would be useful anyway, I think.
",ggVGc,2015-09-01 19:25:48
340,2015-09-01 19:18:49,"> which key was used to exit

Have you tried `--expect` option?

> But sequence chaining would be useful anyway

And it complicates the code :)
",junegunn,2015-09-01 19:25:48
340,2015-09-01 19:25:48,"Thanks, that's what I actually needed! :)
",ggVGc,2015-09-01 19:25:48
339,2015-08-31 18:19:35,"Some fzf command-line options would be really handy to be able to change at run-time, using some key binding.  The pager, 'less', has that ability for many of of its options, at least the ones that make sense to change in the middle of a session.  For example, I could start fzf and find out I have thousands of lines to select from, and only then do I realize that maybe I should have specified --extended so that I could use the more powerful expressions to winnow the results.  As fast as fzf is, I would rather change behavior right then, without leaving fzf.  Just about anything that controls search behavior might be appropriate to change on the fly.

-- Guy Shaw
",Guy-Shaw,2015-11-30 01:40:40
339,2015-09-01 02:10:21,"Why don't you just always use `--extended` mode? I personally don't see any reason not to use it :)
So I have this line in my .bashrc:

<S_CODE_TOKEN>
",junegunn,2015-11-30 01:40:40
339,2015-09-01 07:52:56,"Thanks, I think I will do that.
But that would lead one to wonder why it is an option, at all.

The option, '--extended', was offered merely as an example.
Another would be case-sensitive vs case-insensitive match.
I may realize, once I see what comes up on my screen, that I really could use case-insensitive matching.  But, no.  I didn't think of it, ahead of time.  Is there a notation, such as '(i:)' as in perl regular expressions to govern case-sensitivity per search?  It does not look like it.  Is there a way to toggle that option on the fly, even if it is for all matches?  It doesn't look like it.  So, either I run fzf, again, or I live with the options I got.  fzf is fast, but nothing is that fast.
",Guy-Shaw,2015-11-30 01:40:40
339,2015-09-01 08:45:38,"> But that would lead one to wonder why it is an option, at all

The option was added after the initial version of fzf was released. I just didn't want to break backward-compatibility, though I also believe it makes sense to make it a default.

Regarding case-sensitivity, fzf by default performs ""smartcase"" matching (inspired by ""smartcase"" option of vim). If a search term contains an uppercase character, it will become a case-sensitive term, if it doesn't, case-insensitive. This term-wise case-sensitivity of course works best when `--extended` is set. (e.g. `foo Bar` matches `Bar FOO`, but not `bar FOO`)
",junegunn,2015-11-30 01:40:40
339,2015-11-30 01:40:40,"Note that `--extended` became the default since 0.10.9 :)
I'm closing this as I don't think it's crucial to support dynamic change of options at the moment.
",junegunn,2015-11-30 01:40:40
338,2015-08-31 15:04:04,"When in ""extended"" mode, it is possible to match a word exactly by prefixing it with `'`

After using fzf for a while, I found out that I want to exactly match more often then I want to fuzzy match.

That's why I'd like to switch to ""extended-exact"" mode in my $FZF_DEFAULT_OPTS.

However, what is keeping me from doing it is that it's not possible to fuzzy match one word when you are in ""extended-exact"" mode.

So what I propose is that it could be possible to fuzzymatch a word in ""extended-exact"" mode by prefixing it with `'` (basically `'` would just mean toggle the ""mode"" from fuzzy to exact for the next word)
",netei,2015-09-12 03:54:11
338,2015-08-31 15:34:53,"We could do that, though I do not like changing the meaning of `'` prefix, which currently only means ""quote"".

But if you find yourself needing to quote search terms that often (well I don't), it is probably a sign that the ranking algorithm of fzf is suboptimal and we may find room for improvement if we examine the cases. Can you give me some real-life examples where fuzzy matching doesn't work very well?
",junegunn,2015-09-12 03:54:11
338,2015-09-01 10:12:17,"I will try making attention about exactly what I type in fzf and see if they are specific cases where that happens
",netei,2015-09-12 03:54:11
338,2015-09-01 16:32:45,"Maybe the problem is not in the ranking algorithm but in fzf skipping to the next item as soon as it finds the first match, instead of finding ""the best"" match (of course for performance considerations)

![2015-09-02 1 30 20](https://cloud.githubusercontent.com/assets/700826/9610077/39777620-5112-11e5-9dbd-4269be510529.png)
",junegunn,2015-09-12 03:54:11
338,2015-09-12 02:47:23,"I decided to make `'` unquote the term in the mode. Will be included in the next release. I considered other chars like `~` for unquoting, but `'` still seems to be a better fit considering that it rarely appears at the front of the line.
",junegunn,2015-09-12 03:54:11
337,2015-08-31 14:15:54,"Haven't found an option for it.  Maybe I'm missing something?
",wavded,2015-08-31 14:29:57
337,2015-08-31 14:18:43,"<S_CODE_TOKEN>

makes sense?

EDIT: oops, typo.
",junegunn,2015-08-31 14:29:57
337,2015-08-31 14:27:49,"Thanks for the quick response, I am currently using:

<S_CODE_TOKEN>

In my `.nvimrc`, how would I also incorporate that?
",wavded,2015-08-31 14:29:57
337,2015-08-31 14:29:57,"No idea, `man ag` :)
",junegunn,2015-08-31 14:29:57
337,2015-08-31 14:30:45,"Got it.  Needed to add the `--hidden` flag.
",wavded,2015-08-31 14:29:57
337,2015-08-31 14:33:47,"That allowed searching on .git as well.  So this was the final command I ended up using for future reference:

<S_CODE_TOKEN>
",wavded,2015-08-31 14:29:57
337,2015-08-31 14:38:09,"My 2 cents : you don't need `-l` if you already have `-g`
",netei,2015-08-31 14:29:57
337,2015-08-31 14:41:30,"@netei that works, thanks for the tip.
",wavded,2015-08-31 14:29:57
336,2015-08-29 18:10:23,"Fix fish commands to stream data to fzf, and don't wait.
",fazibear,2015-08-30 12:21:13
336,2015-08-29 18:55:31,"Thanks. It looks like I fixed the issue in https://github.com/junegunn/fzf/commit/305ec3b3ce16141ecac0b8657ad00b371fc7a133, but accidentally reintroduced the problem in 938151a834c1858ffdd6091cbcb42688a3784b6b. So we only need to fix CTRL-T, CTRL-R and ALT-C don't have the problem. Can you to update and force-push the commit?
",junegunn,2015-08-30 12:21:13
336,2015-08-29 19:34:23,"Double quotes fixed. I changed all 3 function to make all evals consistance.
",fazibear,2015-08-30 12:21:13
336,2015-08-30 02:14:38,"Thanks, but what I meant is that we should only fix CTRL-T, and not the other ones. Changing the code that doesn't have the problem makes it harder to understand what the problem was and what our workaround was in retrospect. And please squash the commits.
",junegunn,2015-08-30 12:21:13
336,2015-08-30 12:06:13,"Done.
",fazibear,2015-08-30 12:21:13
336,2015-08-30 12:21:25,"Thank you!
",junegunn,2015-08-30 12:21:13
335,2015-08-28 14:38:11,"I could've swore this was working a couple days ago but when I open FZF in Neovim I can no longer press ESC to have FZF close. Now it just puts the Neovim terminal buffer into normal mode. Ctrl-Q/C still works as long as the terminal buffer is in insert mode.

Neovim
NVIM 0.0.0-alpha+201508280302 (compiled Aug 28 2015 10:22:02)
Commit: 82296510879d6e18036ba45447d348bba41be52e

FZF 0.10.3
",brandoniffert,2015-08-28 14:43:59
335,2015-08-28 14:43:59,"I think you should post this on the neovim's issue tracker instead.
",junegunn,2015-08-28 14:43:59
334,2015-08-28 14:20:16,"<S_CODE_TOKEN>

Here is an excerpt of my .bashrc:

<S_CODE_TOKEN>

which at the end gives me the following : 

<S_CODE_TOKEN>

However, when I do `f2` on the text `ls 'test'` (basically anything containing a single quote), the real thing that is echoed is `ls test` (without the double quotes).

Any ideas why this is happening ?
",netei,2015-08-28 14:24:30
334,2015-08-28 14:22:13,"According to the man page:

> {} is the placeholder for the double-quoted string of the current line.

So try it again without the quotes.
",junegunn,2015-08-28 14:24:30
334,2015-08-28 14:24:14,"Oh thanks, my error. It works now !
",netei,2015-08-28 14:24:30
333,2015-08-28 12:20:23,"I just installed the latest version of [Babun](http://babun.github.io/), and then installed the latest version of fzf by cloning from Git. I then re-opened the Babun terminal window.

When I press `Ctrl-R`, I get:

<S_CODE_TOKEN>

Apparently, `@tty` is never set, and fzf doesn't check that.

Not sure if it's a Babun issue or fzf, but perhaps there's an easy fix.
",slhck,2015-08-28 12:29:35
333,2015-08-28 12:29:35,"I'm sorry but Windows support is now discontinued. I tried to build the new Go version on Windows platform, but hasn't been successful. I'm looking for some help in that. #147
",junegunn,2015-08-28 12:29:35
333,2015-08-28 12:30:44,"Ah, I see. Too bad, but thanks for the quick reply!
",slhck,2015-08-28 12:29:35
332,2015-08-28 08:01:12,"I updated all vim my plugins this morning, and now I'm getting:

`Unknown function: fzf#run`
",craigp,2015-08-28 12:00:46
332,2015-08-28 08:51:55,"Show me your vimrc
",junegunn,2015-08-28 12:00:46
332,2015-08-28 11:58:22,"this is the relevant section .. pretty sure i copied it straight out of the examples:

<S_CODE_TOKEN>
",craigp,2015-08-28 12:00:46
332,2015-08-28 12:00:12,"Nevermind, I figure it out ... messed up my vim-plug config, it wasn't loading until I'd used `:FZF`

Sorry for the trouble, and thanks for all the great plugins :)
",craigp,2015-08-28 12:00:46
331,2015-08-27 11:49:04,"Nothing happens at all.
I have latest fzf, vim, macvim and no strange stuff in .bashrc like the gentelman with zsh had.
Looking at fzf.vim, might be related to the fact that there is no xterm in newer osx...
",letit-bee,2015-08-27 13:58:16
331,2015-08-27 12:54:28,"Yep, install XQuartz solves the issue, though it looks like a completely separate window that can even be alt-tabbed to separately. Is  this how it's supposed to work?
",letit-bee,2015-08-27 13:58:16
331,2015-08-27 13:58:16,"Yes, it's the best we can do with GVim. fzf is a command-line program that runs on a _terminal_, so there's no way to start it without a terminal emulator. A GUI-version of neovim, once released, will be able to embed fzf inside Vim split.
",junegunn,2015-08-27 13:58:16
330,2015-08-26 22:58:58,"also `:vs **<tab>` or `:sp **<tab>` freeze vim, but can be unfreezed by pressing ctrl-c 3 times. Vim is running in tmux, and fzf working fine with bash shell.
",dmerc,2015-08-27 01:20:12
330,2015-08-27 01:20:12,"fzf does not provide `**<tab>` completion on vim.
",junegunn,2015-08-27 01:20:12
329,2015-08-26 14:14:46,"![2015-08-26 11 14 00](https://cloud.githubusercontent.com/assets/700826/9495769/2cfebaee-4c48-11e5-8763-9d88a10acda0.png)
",junegunn,2015-08-26 14:58:27
328,2015-08-26 11:29:43,"When I type ""cd "" and press tab i get:

fzf-completion:15: parse error: condition expected: =
fzf-completion:19: parse error: condition expected: =

I just did a pull in "".fzf"" directory and my version is 8fb31e1b4d25ef20d039e919e8d7712d2ad6a96c

I'm on OSX 10.10.3
",slonka,2015-09-02 09:08:36
328,2015-08-26 11:30:49,"Which shell?
",junegunn,2015-09-02 09:08:36
328,2015-08-26 11:52:48,"zsh
",slonka,2015-09-02 09:08:36
328,2015-08-26 14:06:04,"Can't reproduce on my machine, are you running the latest zsh?
",junegunn,2015-09-02 09:08:36
328,2015-08-26 14:23:41,"zsh --version  
zsh 5.0.8 (x86_64-apple-darwin14.4.0)

oh-my-zsh: 192de6bcffb0294e19f4203f6f7dc1a7f3e427be
",slonka,2015-09-02 09:08:36
328,2015-08-26 15:03:12,"Hmm, I also have the exact same version of zsh. Since I use bash, my zshrc is pretty minimal and the problem is not reproducible with it.

<S_CODE_TOKEN>

Do you have any clue what might cause this? It's probably something in your config.
",junegunn,2015-09-02 09:08:36
328,2015-08-31 02:21:28,"I had the same problem. The problem arose because of `setopt shwordsplit` in my .zshrc. After I deleted that option, the problem's gone. I think fzf should handle it when zsh using `setopt shwordsplit` option.
",danieljl,2015-09-02 09:08:36
328,2015-08-31 03:20:51,"@danieljl Thanks for the hint. I'll give a look.
",junegunn,2015-09-02 09:08:36
328,2015-08-31 15:51:46,"@danieljl The reported error is not reproducible for me but I have a different problem when `shwordsplit` is set: `vim **<TAB>` expands to `vimREADME.md`. So I fixed it anyway.

@slonka Please update and see if your problem is resolved.
",junegunn,2015-09-02 09:08:36
328,2015-08-31 16:42:05,"@junegunn The problem is not resolved. My config (I replaced my home path with ~):

<S_CODE_TOKEN>
",slonka,2015-09-02 09:08:36
328,2015-08-31 17:29:22,"@slonka Did you find out which line causes the problem?
",junegunn,2015-09-02 09:08:36
328,2015-09-01 11:52:27,"@junegunn I don't know how to do that. If you post a link how to debug this I will try.
",slonka,2015-09-02 09:08:36
328,2015-09-01 16:20:40,"@slonka Nothing fancy, incrementally commenting out lines until it works :)
",junegunn,2015-09-02 09:08:36
328,2015-09-01 16:22:30,"@slonka I even tried your zshrc and the problem is not reproducible.
",junegunn,2015-09-02 09:08:36
328,2015-09-01 17:27:42,"Isn't there a more sophisticated way? If it's hard to reproduce I don't want to spend 4 hours on that.
",slonka,2015-09-02 09:08:36
328,2015-09-01 17:44:31,"Since you're the only one having the problem, it's pretty likely that something's wrong with your env. If you are not willing to provide enough information, there's nothing I can do.
",junegunn,2015-09-02 09:08:36
328,2015-09-02 09:08:36,"After today's oh-my-zsh update the error is gone.
",slonka,2015-09-02 09:08:36
327,2015-08-26 01:47:28,"Sometimes I get E315 error when I use `:FZF -m -x` to open a quick fix window to search file. I also install the fzf.vim so I use <c-t> to open files in new tab. I try to reproduce with the following steps:
1. search files using fzf and use <c-t> to open each file into new tab
2. switch to any one of the new tabs
3. use fzf to search file again, but use _enter_ to open the file (in the attach image, I opened `Button.js`) in the current tab
4. _Part of_ the `Button.js` are shown in the screen, and the content of the step 2 are also in the screen (previous file block).
5. There're also an error code: `E315: ml_get: invalid lnum: 21`.

![fzf](https://cloud.githubusercontent.com/assets/1477617/9483862/5d6f9584-4bd7-11e5-9ff9-6dacd761edaf.jpg)

Is there any idea to fix the problems? Thanks.
",ycavatars,2015-08-26 02:04:04
327,2015-08-26 02:04:04,"It's a known bug of neovim, see https://github.com/junegunn/fzf/labels/neovim
",junegunn,2015-08-26 02:04:04
327,2015-08-26 02:23:45,"thanks for the quick reply :)
",ycavatars,2015-08-26 02:04:04
326,2015-08-24 13:02:13,"Added a small note about ignoring your `.gitignore` using fzf.
Not initially clear that you need to add that to your shells rc files
",mhartington,2015-08-24 15:23:56
326,2015-08-24 15:23:56,"Thanks, but I believe the current documentation already covers that. See: https://github.com/junegunn/fzf/blame/master/README.md#L284-L285. And the variables are mentioned in [the usage section](https://github.com/junegunn/fzf#usage) and in `--help` output as well so it's really hard to miss. FYI, you can define `FZF_DEFAULT_COMMAND` or `FZF_DEFAULT_OPTS` in your .vimrc instead if you want to; e.g. `let $FZF_DEFAULT_COMMAND = 'find .'`.
",junegunn,2015-08-24 15:23:56
326,2015-08-24 15:26:33,"Ahh, alright, my mistake. Sorry for the noise. 
",mhartington,2015-08-24 15:23:56
326,2015-08-24 15:30:26,"No problem. Thanks.
",junegunn,2015-08-24 15:23:56
325,2015-08-23 19:38:05,"Using Ag it's self or ag with ctrl-p, I'm able to ignore the directories that are listed in my `.gitignore`. This is infact default for Ag, but for some reason, FZF with ag isn't doing the same.

https://github.com/mhartington/dotfiles/blob/master/nvimrc#L368

<S_CODE_TOKEN>

Any idea whats up? 
By the way, love the plugin, so fast! 
",mhartington,2015-08-24 01:05:52
325,2015-08-23 23:41:36,"Does `ag --nogroup --column --nocolor QUERY` give you the expected result? Then I don't see how your `Ag` command can go wrong.

FYI, you might also want to check out fzf.vim repository that I recently started working on; https://github.com/junegunn/fzf.vim
",junegunn,2015-08-24 01:05:52
325,2015-08-24 00:10:43,"Hmm, I thought I had copied that down, but it appears to work when I use your plugin. Thanks a lot!

One last question if you don't mind, is there any way to make the default `:FZF` function respect your git ignore as well?
",mhartington,2015-08-24 01:05:52
325,2015-08-24 01:05:52,"It looks like you misunderstood the `Ag` example. The `Ag` command you copied from the wiki is not just for listing files, but for searching for the given text in the files a la `grep`. And having the above `Ag` command in your .vimrc obviously does not affect `:FZF` command.

The answer to your question is on the README page. See https://github.com/junegunn/fzf#respecting-gitignore-hgignore-and-svnignore
",junegunn,2015-08-24 01:05:52
325,2015-08-24 01:43:01,"Ahh alright, I wasn't aware that the shell command and options would also be used in vim. Thanks for pointing that out. 
",mhartington,2015-08-24 01:05:52
324,2015-08-22 09:36:42,"Hi! This is my first experience with FZF and I known it because I'm migrating my [dotfiles](https://github.com/gianarb/dotfiles/pull/5) to neovim. I'm working to use this tool with neovim but it doesn't work.

I installed it with Plug.

<S_CODE_TOKEN>

> https://github.com/gianarb/dotfiles/blob/feature/neovim-migration/nvimrc#L12-L13

In vim after `:FZF` I search the file and I press `ENTER` but won't open nothing.

Into the terminal the problem is in this screenshot.
![zfzissue](https://cloud.githubusercontent.com/assets/1630267/9423381/e453f072-48c1-11e5-9dfe-6e7e20638e2e.png)
After `ENTER` it prints the path of searched file.

Thanks for your feedback! :)
",gianarb,2015-08-22 09:55:17
324,2015-08-22 09:51:13,"Cannot reproduce with your nvimrc. `:FZF` works just fine. The terminal emulator of neovim is known to have issues; see https://github.com/junegunn/fzf/labels/neovim. Maybe you're running into the problem and upgrading neovim to the latest might help, but I'm not sure.

> Into the terminal the problem is in this screenshot.
> After ENTER it prints the path of searched file.

It's the expected behavior. fzf is just a filter, like grep, it doesn't take any action instead it just prints the selected lines.
",junegunn,2015-08-22 09:55:17
324,2015-08-22 09:55:16,"Perfetct! :) THanks for your feedback! I close this issue :)
",gianarb,2015-08-22 09:55:17
324,2015-08-22 09:55:37,"So upgrading neovim solved the issue?
",junegunn,2015-08-22 09:55:17
324,2015-08-22 09:58:22,"I installed neovim from github repo yesterday.. There are 5 new commits I'm compiling them :)
",gianarb,2015-08-22 09:55:17
324,2015-08-22 10:00:47,"Hmm, I have much older version of neovim than you, so I don't think those 5 commits will solve the problem. You might want to check if the `:FZF` command (and the other commands from `fzf.vim` repo) work on plain Vim.
",junegunn,2015-08-22 09:55:17
324,2015-08-22 10:03:23,"mmm this is magic.. but into the last 5 commits of neovim there is the resolution of my problem o.O..

It works! o.O
",gianarb,2015-08-22 09:55:17
324,2015-08-22 10:04:28,"Ha!
/cc @tarruda @justinmk 
",junegunn,2015-08-22 09:55:17
324,2015-08-22 14:13:35,"This bug was introduced and fixed yesterday, you got unlucky and cloned between the bug/fix :smile: 
",tarruda,2015-08-22 09:55:17
324,2015-08-22 16:30:40,"I'm very lucky!
",gianarb,2015-08-22 09:55:17
323,2015-08-21 11:08:06,"Hi June,

I've written quite a few scripts that use fzf, and I often use the --expect and --bind options. As much as I try and use mnemonics it's often hard to remember them all. Is it possible to add an --info option, so that I could write notes to myself that would appear after the numbers in the info bar?

Thanks for fzf, it's awesome!
",supercrabtree,2015-08-21 14:08:03
323,2015-08-21 11:24:21,"You might want to check out `--header-lines` and `--header-file` (they are mutually exclusive).
See #296.
",junegunn,2015-08-21 14:08:03
323,2015-08-21 14:08:03,"Worked perfectly, thanks :)
",supercrabtree,2015-08-21 14:08:03
322,2015-08-18 11:36:21,"Trying to install fzf I get this error:

Downloading bin/fzf ...
- Creating symlink: bin/fzf-0.10.3-linux_amd64 -> bin/fzf
- Checking fzf executable ... /home/swimmer/.fzf/bin/fzf: error while loading shared libraries: libncursesw.so.5: cannot open shared object file: No such file or directory != 0.10.3
- Creating symlink: bin/fzf-0.10.3-linux_amd64 -> bin/fzf
- Checking fzf executable ... /home/swimmer/.fzf/bin/fzf: error while loading shared libraries: libncursesw.so.5: cannot open shared object file: No such file or directory != 0.10.3
- Invalid binary !!!

That happens on a Gentoo system with only ncurses-6.0 installed ...
",wimstefan,2015-08-27 13:51:12
322,2015-08-18 13:25:02,"Thanks for the report, I'll see what I can do.

Since I don't have experience with Gentoo; Is it possible to install ncurses5 as well on the system? Can it be easily done?
",junegunn,2015-08-27 13:51:12
322,2015-08-18 13:35:36,"As far as I'm aware and capable to try out I'm afraid it's not possible.
The developers are aware of the problems having only ncurses6 installed on a system:
https://bugs.gentoo.org/show_bug.cgi?id=558052
",wimstefan,2015-08-27 13:51:12
322,2015-08-19 15:33:18,"JFYI: the problem seems to be limited to the amd63 platform ... out of curiosity I ran the install script on my laptop which is still on the x86 platform (but with only ncurses6) installed and it competed the install without problems B-)

Downloading bin/fzf ...
- Creating symlink: bin/fzf-0.10.3-linux_386 -> bin/fzf
- Checking fzf executable ... 0.10.3
",wimstefan,2015-08-27 13:51:12
322,2015-08-19 15:42:02,"Thanks for the info. I'm mostly on OSX and haven't been able to find Gentoo system to try things out. I was trying to find a docker image for it so I can locally boot up the environment. FYI, I'm building the linux binaries on Arch VM set up with docker; https://github.com/junegunn/fzf/blob/master/src/Dockerfile.arch
",junegunn,2015-08-27 13:51:12
322,2015-08-26 18:32:48,"@wimstefan Hey, can you check if this statically-linked binary works on the platform?

https://github.com/junegunn/fzf-bin/releases/download/0.10.4/fzf-0.10.4-linux_amd64-static.tgz

If it works, I'm going to update the install script to download it when the dynamic one fails.
",junegunn,2015-08-27 13:51:12
322,2015-08-27 12:09:53,"Hi junnegun, I finally had a chance to test it and it works! 
Sorry for coming back late :-/
",wimstefan,2015-08-27 13:51:12
322,2015-08-27 13:52:05,"No problem. Thanks for the confirmation. I updated the install script to download the static binary when the dynamic one doesn't run.
",junegunn,2015-08-27 13:51:12
321,2015-08-17 09:03:33,"(apologies if this isn't issue worthy- wasn't sure where to put this suggestion)

A lot of mac users out there might not know about being able to pipe `mdfind` into fzf.

It's the cmdline version of spotlight search, and is much faster than `find`, more up to date than `locate`.

maybe it would be good to add a blurb into the main README.md file mentioning this?

Here's an example of how I use it in my bashrc file for finding arbitrary folders.

<S_CODE_TOKEN>

https://github.com/stevenqzhang/dotfiles/blob/master/.bashrc#L1
",stevenqzhang,2015-08-17 09:13:22
321,2015-08-17 09:13:22,"Hi, thanks for the suggestion.

> A lot of mac users out there might not know about being able to pipe mdfind into fzf.

Yeah, I didn't know about it either :) I'm not getting any result from `mdfind` though, probably because I disabled spotlight search altogether. You're welcome to add the example to [the wiki page](https://github.com/junegunn/fzf/wiki/Examples). It's open to anyone to edit.

Minor nitpicks:
- `local DIR`
- `$(...)` instead of backticks
",junegunn,2015-08-17 09:13:22
320,2015-08-14 03:13:38,"hi, I add the `list of buffer` example (https://github.com/junegunn/fzf/blob/master/README.md#examples-1) to my `nvimrc`. I found that when I can't use `ctrl-t` to open the selected file in a new tab. Do I miss something? I use `neovim` on mac yosemite. Thanks.
",ycavatars,2015-08-14 17:20:07
320,2015-08-14 04:20:39,"No, you're not missing anything. As you can see, the code does not say anything about `ctrl-t`. Since fzf is a general-purpose filter, such key bindings should be handled by the outer script. The following example shows how you can make fzf **expect** custom key bindings with `--expect` option.

https://github.com/junegunn/fzf/wiki/Examples-(vim)#narrow-ag-results-within-vim

I'm considering releasing a set of commands based on fzf as an external plugin for those who are not familiar with vimscript. I'll leave a comment here when it's done, you might want to take a look.
",junegunn,2015-08-14 17:20:07
320,2015-08-14 06:41:34,"Really thanks! The examples will be very useful, especially for vim beginners. I have only use vim for two days :) Thanks for your help
",ycavatars,2015-08-14 17:20:07
320,2015-08-14 17:20:07,"https://github.com/junegunn/fzf.vim is now on github. It provides `:Buffers` command that supports `ctrl-t` key binding you were looking for.
",junegunn,2015-08-14 17:20:07
319,2015-08-14 02:42:46,"Great tool first! Love it.

I want to use `cc` as `cd **Tab`, and search for a folder. And as soon as I hit ""Enter"", I can go into the folder directly instead of completing `cd <fildername>` first, and press another ""Enter"" to cd that folder. 

Is it possible to do? 
",zhangchiqing,2015-08-14 04:12:42
319,2015-08-14 04:12:42,"You can try something like this:

<S_CODE_TOKEN>
",junegunn,2015-08-14 04:12:42
319,2015-08-14 14:31:35,"Awesome! Thanks @junegunn 
",zhangchiqing,2015-08-14 04:12:42
318,2015-08-10 14:35:56,"I have installed fzf for my gvim. Wenn I try "":FZF"" a terminal window is opened in my home directory, but nothing else happens.

I am sure I am doing something wrong or that I have a strange configuration, but I probably need some help figuring out what's wrong.
",v76591wC,2015-08-16 01:35:13
318,2015-08-10 14:58:26,"Hi, I need more info.
1. OS
2. Shell
3. Vim version
4. `fzf --version`
5. Does `:call fzf#run({'source': 'seq 100'})` work? If not, does it work on terminal vim?
",junegunn,2015-08-16 01:35:13
318,2015-08-11 08:13:48,"1. Debian oldstable
2. This is, where it gets interesting. Company policy prohibits me changing shell directly, so I have ""zsh && exit"" in my bashrc. So I would say: zsh within bash
3. VIM - Vi IMproved 7.3 (Included patches: 1-547)
4. 0.10.0
5. It does not. In terminal vim everything works as expected.

I just tried something that is quite interesting:
When I use :FZF in gvim and it opens xterm, I can get to fzf by pressing ctrl+c and ctrl+d. ctrl+d directly won't work.

EDIT:: This Indeed seems to be the problem. Commenting the zsh line in bashrc -> FZF works.

I guess the problem is on my side. I can probably work around it if I move the zsh line to bash_profile.
",v76591wC,2015-08-16 01:35:13
318,2015-08-16 01:35:13,"Alright, the default launcher function for GVim currently [sets `-i` flag](https://github.com/junegunn/fzf/blob/master/plugin/fzf.vim#L200) when starting xterm with bash which causes .bashrc to be loaded, and that line you have in there obviously is causing the problem.  (I believe `bash -ci vim` doesn't work as well due to the same issue, right?)

I tried removing `-i` flag, but it causes visual glitches in xterm window, so I'll have to keep it. Consider writing your own launcher function if you have to keep that line.
",junegunn,2015-08-16 01:35:13
317,2015-08-10 02:25:37,"#315

<S_CODE_TOKEN>
",junegunn,2015-08-10 15:22:26
317,2015-08-10 15:11:37,"## Test script

<S_CODE_TOKEN>

## Result

<S_CODE_TOKEN>
",junegunn,2015-08-10 15:22:26
316,2015-08-09 13:09:45,"I have installed FZF and everything works, except the [Fuzzy cmdline completion](https://github.com/junegunn/fzf/wiki/Examples-%28vim%29#fuzzy-cmdline-completion) example. Whenever, the shortcut is pressed the following errrors are produced:

<S_CODE_TOKEN>

I have tried with a **minimal nvimrc**, and the same problem occurs.
",khalidchawtany,2015-08-09 13:55:36
316,2015-08-09 13:40:20,"I didn't write the part and I haven't tried if it works. Someone added it to the wiki page before I reorganized the pages. I think I'm going to remove it as it seems too complicated for an example.
",junegunn,2015-08-09 13:55:36
316,2015-08-09 13:55:36,"Removed it, thanks.
",junegunn,2015-08-09 13:55:36
315,2015-08-09 10:17:13,"<S_CODE_TOKEN>

This ignores a very common occurrence where an identical tag is defined in multiple files. 

It will be better to allow narrowing down the raw tags input viz. ""search model account"" to find the search tag in account model, and execute the ex command in the tag file once the user has narrowed down the selection.

<S_CODE_TOKEN>

This ignores the vim tag features(tag stack, jumping back and forth...). I tried using `ts /pattern` as source and `[count]tag /pattern` as sink where count is extracted from `ts /pattern` but [count] was different between `ts` and `tag`.
",rahulkmr,2015-08-09 13:53:35
315,2015-08-09 13:53:35,"Hi, thanks for the suggestion. I added a more [advanced version of the command](https://github.com/junegunn/fzf/wiki/Examples-%28vim%29#jump-to-tags). (Extra care was taken not to fail on tags containing tab characters. Also take a look at `BTags`) I didn't remove the original one since the purpose of the page is to suggest simple and concise examples rather than to provide sophisticated implementations.
",junegunn,2015-08-09 13:53:35
315,2015-08-09 18:48:45,"Thanks for including the alternate implementation and fixing my sink implementation.

<S_CODE_TOKEN>

awk seems to run noticeably faster than this on large tags files(about 200k tags). I thought it's probably because yours is forking a extra process(grep), but removing that didn't give me a significant speed-up. That's weird because awk is doing extra things and cat is just catting. I didn't delve more into it.

<S_CODE_TOKEN>

Also, I have to double escape ! or it kept getting replaced with `clear 2> /dev/null`. I am not sure if it's me or something in your code.

<S_CODE_TOKEN>

While this presents a cleaner selection interface, this takes away filtering on filename which I personally use a lot - ""search model account""(`def search` in `app/models/account.rb`)

<S_CODE_TOKEN>

I personally don't use `excmd=number`. I regenerate my tags from commit hooks and my tags are out of date a lot of times. Search patterns work better than numbers for me(except for same tag repeated in a file).

The BTags implementation is nice. Most of the times for the same buffer, I simply search or do a ctrl-], but the tag selection interface is nice to have for large files with a lot of common base words.
",rahulkmr,2015-08-09 13:53:35
315,2015-08-10 02:22:43,"Thanks for the feedback.

I realized that what is slow is not `grep` or `cat`, but `--with-nth` option of fzf. It relies on the regex engine of Go, which is darn slow. I'll address the issue in the next version. (We should use regex engine only when needed. We clearly don't need it when `--delimiter` is  `\t`)

> this takes away filtering on filename which I personally use a lot

Fair enough. Since the code there is just an example, I believe the users will adjust the snippet to match their preferences.

> Search patterns work better than numbers for me

Good point. I liked `--excmd` because it makes the code simpler, no special handling of tab characters, no `nomagic` switch, but I agree that `--excmd=pattern` is a better choice when creating permanent tag files. I updated the snippet.

> Most of the times for the same buffer, I simply search or do a ctrl-]

Me neither. To be honest, I don't really use either `Tags` or `BTags` and I prefer cscope.
",junegunn,2015-08-09 13:53:35
314,2015-08-07 15:45:27,"I'm using iTerm2 with tmux integration (so every tmux window is an iTerm2 tab). When I open FZF, the new tmux pane doesn't have focus by default. I have to change focus to the fzf pane to be able to type my query.

Is there a way to disable the fzf-tmux script? I don't mind the full screen fzf window that appears outside tmux.
",ronakg,2015-08-07 16:26:28
314,2015-08-07 16:02:12,"In vim?
",junegunn,2015-08-07 16:26:28
314,2015-08-07 16:10:00,"In bash. All the fzf commands result in a new tmux pane, which isn't working that well with iterm2 tmux integration. So I'd like to use default fzf instead of fzf-tmux. 
",ronakg,2015-08-07 16:26:28
314,2015-08-07 16:13:22,"> All the fzf commands

I guess you mean key bindings and fuzzy completion, right? Then try `export FZF_TMUX=0` as described in https://github.com/junegunn/fzf#key-bindings-for-command-line.
",junegunn,2015-08-07 16:26:28
314,2015-08-07 16:24:49,"Okay, that worked for bash. Inside Vim, it's still opening the fzf window in a tmux pane.

FZF_TMUX setting doesn't apply to vim?
",ronakg,2015-08-07 16:26:28
314,2015-08-07 16:26:28,"See https://github.com/junegunn/fzf#fzf

<S_CODE_TOKEN>
",junegunn,2015-08-07 16:26:28
314,2015-08-07 16:49:17,"Thanks. I'm now using `FZF!` in my key-binding to open fzf window.
",ronakg,2015-08-07 16:26:28
314,2015-08-07 18:45:49,"Need some more help!

`cnoreabbrev FZF FZF!` isn't working (still opens a tmux pane instead of bang window) when I'm calling any of the fzf functions like `fzf#run()` for going through open buffers.

I've added `nnoremap <leader>f :FZF! -x<CR>` to my vimrc for invoking fzf.
",ronakg,2015-08-07 16:26:28
314,2015-08-07 18:58:24,"They're unrelated. (`:help cnoreabbrev`)

FZF[!] is a command that is based on `fzf#run()`. And `fzf#run()` does not open tmux pane by default unless you pass some options. Please read through the manual page.
",junegunn,2015-08-07 16:26:28
313,2015-08-06 23:39:55,"I've mapped 'enter' when using fzf to opening in a new tab rather than opening in the current pane. This seems to cause some of the symptoms of #206. When removing this custom config, everything seems to work as intended (showing #206 seems to be getting better?). Opening tabs seems to still induce this problem, with the config off, the config seems to make it more pronounced? It all seems very flakey, but I think this config will help you reproduce the problem more(?) accurately
1. When opening a new file (pressing enter to open a new tab), the mode changes to 'TERMINAL' and waits there with the file open.
2. When pressing any key, the newly opened tab will crash, and bring you back to the old tab.

Here is the configuration I used to make this behavior happen, see the line starting with 'ctrl-m':

<S_CODE_TOKEN>

@tarruda this issue was indeed a different issue from #206, as this occurs almost all the time for me even with python off.
",jgkamat,2015-09-18 21:38:46
313,2015-08-22 05:35:03,"I figured out a little bit of more information, this happens when the tab is created at the right end (where there are no other tabs). Inserting tabs in the middle (between two other tabs) seems to be ok.

The program only crashes occasionally when opening tabs on the right however, (and never? when inserted in the middle)
",jgkamat,2015-09-18 21:38:46
313,2015-09-15 14:05:55,"After trying a build from neovim/neovim#3309 this issue is no longer present:

> 1. When opening a new file (pressing enter to open a new tab), the mode changes to 'TERMINAL' and waits there with the file open.
> 2. When pressing any key, the newly opened tab will crash, and bring you back to the old tab.

In rare cases this message is shown when opening files from fzf by pressing `Enter`:

<S_CODE_TOKEN>

Sometimes after 2-5 attempts file opens correctly.
",zenbro,2015-09-18 21:38:46
313,2015-09-15 15:59:55,"> In rare cases this message is shown when opening files from fzf by pressing Enter:

I'm looking into this
",tarruda,2015-09-18 21:38:46
313,2015-09-15 16:29:45,"Thanks for your hard work @tarruda!
",zenbro,2015-09-18 21:38:46
313,2015-09-16 14:38:09,"@zenbro can you give neovim/neovim#3309 another shot?
",tarruda,2015-09-18 21:38:46
313,2015-09-16 15:30:10,"@tarruda
Build from tarruda/neovim@c0f4b56c9f80678f4c37f658db40ffdbd61b7e76

This issue is returned:

> 1. When opening a new file (pressing enter to open a new tab), the mode changes to 'TERMINAL' and waits there with the file open.
> 2. When pressing any key, the newly opened tab will crash, and bring you back to the old tab.

This issue is no longer present:

> In rare cases this message is shown when opening files from fzf by pressing Enter: [Program exited, press any key to close]
",zenbro,2015-09-18 21:38:46
313,2015-09-16 20:55:06,"@zenbro / @jgkamat can you two send me the vimrc that causes the tabedit/crash bug? I'm unable to reproduce with my current config.
",tarruda,2015-09-18 21:38:46
313,2015-09-16 22:06:13,"[This is my current vimrc](https://github.com/jgkamat/dotfiles/blob/master/vim/.vimrc), its failing on the current distrubted nvim. I haven't been able to build nvim properly for some reason, but I'll figure out what I'm doing wrong and let you know if I can still reproduce this...
",jgkamat,2015-09-18 21:38:46
313,2015-09-17 09:10:39,"[My vimrc](https://github.com/zenbro/dotfiles/blob/master/.nvimrc)
I try to minimize it for testing purpose as I get more time.
",zenbro,2015-09-18 21:38:46
313,2015-09-17 09:26:15,"I found plugin that cause this problem - [vim-airline](https://github.com/bling/vim-airline).
Here is minimal vimrc version:

<S_CODE_TOKEN>
",zenbro,2015-09-18 21:38:46
313,2015-09-17 13:10:12,"Same problem with [lightline.vim](https://github.com/itchyny/lightline.vim):

<S_CODE_TOKEN>
",zenbro,2015-09-18 21:38:46
313,2015-09-17 13:45:35,"Huh, I never suspected airline, nice job!
",jgkamat,2015-09-18 21:38:46
313,2015-09-17 17:04:07,"Actually I can reproduce the problem with different plugins but not with your example vimrc.
So I don't think it's related to airline or lightline.
",choco,2015-09-18 21:38:46
313,2015-09-17 18:03:18,"I'm only able to reproduce this with airline on (I haven't tried light-line). 
",jgkamat,2015-09-18 21:38:46
313,2015-09-18 03:12:15,"@zenbro / @jgkamat I still can't reproduce it with #3309 after a few tries. Does the crash happen consistently? I used this vimrc:

<S_CODE_TOKEN>

And then followed these steps:
- execute build/bin/nvim (from nvim source root)
- type `:FZF<cr>`
- select a file(eg: README.md)
- press enter
- the file opens normally in a new tab.

Can you give some more detailed steps on how I can reproduce with the above vimrc? Also, can you paste the output of `nvim --version`?
",tarruda,2015-09-18 21:38:46
313,2015-09-18 05:12:18,"Oh, sorry for not making this clear, disabling airline fixed the issue for me on a stock nvim. After building your branch, I can't seem to reproduce it anymore (even with arline)! :+1:  (however, I've seen this problem **on the stock nvim** only after opening a couple of files). I'll let you know if I see any issues with the new build as I continue using it a bit more.

Just in case you need it, here is my nvim --version on the one I built!

<S_CODE_TOKEN>
",jgkamat,2015-09-18 21:38:46
313,2015-09-18 05:12:36,"@tarruda 

<S_CODE_TOKEN>

With this vimrc:

<S_CODE_TOKEN>

**Note:** there is no `g:fzf_action` overriding, only default behavior. Should I create new issue for this?

Steps:
1. execute nvim
2. cd into neovim source root
3. press `<space><space>`, type something, press `enter`
4. Repeat step 3 few times.
",zenbro,2015-09-18 21:38:46
313,2015-09-18 16:44:22,"@zenbro now I can reproduce, will investigate and push a fix #3309
",tarruda,2015-09-18 21:38:46
313,2015-09-18 16:51:55,"@zenbro can you try neovim/neovim#3309 again?
",tarruda,2015-09-18 21:38:46
313,2015-09-18 17:14:23,"@tarruda
With neovim:

<S_CODE_TOKEN>

I can no longer reproduce this problem. Thank you so much! :smiley:
",zenbro,2015-09-18 21:38:46
313,2015-09-18 18:15:13,"neovim/neovim#3309 is merged, @jgkamat can you confirm the problem is fixed(on neovim master) and if so close the issue?
",tarruda,2015-09-18 21:38:46
313,2015-09-18 21:38:46,"It looks good to me! Thanks so much for all your help! :tada: :smile: 
",jgkamat,2015-09-18 21:38:46
312,2015-08-06 20:53:00,"This is probably a configuration issue, but when I use fzf in vim everything works perfectly until I find the entry I want to open and press ctrl-T to open it in a new tab. Nothing happens (no visible errors). If I press enter the file opens in the current window as expected.

I'm using vim inside tmux on a remote host, so there may be a conflict here. I've heard of fzf-tmux but I have no idea how to tell if I am or should be using it; I just let the fzf installer set things up.

Fzf was installed a couple days ago. Is it a bug or config issue?
",buchuki,2015-08-07 18:54:15
312,2015-08-07 01:16:55,"Have you checked #273?

`fzf` and its vim wrapper `fzf#run()` do not know what to do on CTRL-T and CTRL-X and such keys are not bound to any action by default. The reason `:FZF` command can take those keys is that it was implemented to [pass `--expect` option](https://github.com/junegunn/fzf/blob/0.10.2/plugin/fzf.vim#L384) to fzf. You can find more examples on `--expect` on the wiki page.
e.g. https://github.com/junegunn/fzf/wiki/Examples-(vim)#narrow-ag-results-within-vim
",junegunn,2015-08-07 18:54:15
312,2015-08-07 18:17:15,"Ah, I wasn't specific enough; I am actually using :FZF but not getting the ctrl-T, etc behavior. I haven't defined my own function. How can I debug why :FZF isn't behaving as expected?
",buchuki,2015-08-07 18:54:15
312,2015-08-07 18:31:03,"`fzf --version` ?
",junegunn,2015-08-07 18:54:15
312,2015-08-07 18:32:19,"It's ancient! I thought I had pulled from master:

fzf 0.8.9 (Dec 24, 2014)
",buchuki,2015-08-07 18:54:15
312,2015-08-07 18:37:19,"ok, I ran ./install again and it still hasn't updated; it looks like it's downloading the executable instead of using the one from master that I have pulled in. How best to live dangerously?
",buchuki,2015-08-07 18:54:15
312,2015-08-07 18:40:57,"What does the install script say? Please attach the full log.
",junegunn,2015-08-07 18:54:15
312,2015-08-07 18:44:40,"Thanks for the quick responses.

I've solved the issue; the script was not able to escape from my proxy; for some reason it wasn't honouring the https_proxy env variables I had exported from my shell. I exported them inside the install script and it worked correctly.

Dunno if you want to make the script more robust against proxies, but one thing you could do is fail explicitly if it can't download the new version for any reason. It went on to show me the rest of the install procedure and I missed the fact the download had failed.
",buchuki,2015-08-07 18:54:15
312,2015-08-07 18:48:52,"Yeah, that's a good point, there's really no reason to fall back to the old Ruby version when the binary is available for the platform.
",junegunn,2015-08-07 18:54:15
311,2015-08-05 13:45:03,"The line which is added to the ~/.bashrc needs a newline before it.

Otherwise (in my case) the last line of my ~/.bashrc file looked as follows:
`esac[ -f ~/.fzf.bash ] && source ~/.fzf.bash`

And as a result, fzf did not work at all.
(tested on elementary os)
",paul-alkhimov,2015-08-05 14:50:59
311,2015-08-05 14:52:29,"Hi, thanks for the report. Looks like your .bashrc didn't have the new line character at the end, which is quite unconventional for the OSs that fzf supports. Excerpt from a [stackoverflow thread](http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline):

> Because that’s how the POSIX standard defines a line:
> 
> 3.206 Line
> A sequence of zero or more non- <newline> characters plus a terminating <newline> character.

And therefore, your text editor will automatically add a new line to a text file unless you explicitly tell it not to do so. For example, in Vim we can say `set binary noeol` to remove the new line at the end, but I don't quite see the point of saying that .bashrc is a binary file.

Maybe the lack of the ending new line of your ~/.bashrc has something with elementary OS, but I'm not at all familiar with it, so I'm not sure.

Having said that, I updated the installer to add an extra new line, so that it doesn't corrupt the file even when it does not end with a new line like in your case. Thanks.
",junegunn,2015-08-05 14:50:59
310,2015-08-01 06:41:34,"When I use fzf (ruby script and go version) anywhere except for my home directory, I get the desired behavior (list of files, responsive filter as I type, etc.)

However for my home directory `/Users/gregory.nisbet` and only my home directory, fzf immediately shows 0/0 files and never updates.

I figured it out. I had a folder named `-r` I was using to test an unrelated shell script and that interfered with
`find * -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null`.
I recommend replacing it with
`find . -path './.*' -prune -o -path '*/.*' -prune -o -type f -print -o -type l -print 2> /dev/null | sed 's/^..//'`
or something similar which preserves the behavior (no hidden files or ugly leading ""./"") but handles files with leading dashes.
",gregory-nisbet,2015-08-01 12:51:21
310,2015-08-01 08:11:47,"Ah, thanks for the report and the investigation. I'll try to come up with a better default command and apply it to the next release of fzf. Until then, you can override it with `$FZF_DEFAULT_COMMAND`.
",junegunn,2015-08-01 12:51:21
310,2015-08-02 15:59:48,"Fixed in 0.10.2. Thanks.
",junegunn,2015-08-01 12:51:21
309,2015-07-30 17:54:37,"I had to do this in my config.fish to get it working:

<S_CODE_TOKEN>
",benekastah,2015-07-30 18:13:08
309,2015-07-30 17:57:53,"Isn't the [path added](https://github.com/junegunn/fzf/blob/master/install#L220-L221) to `$fish_user_paths`?
",junegunn,2015-07-30 18:13:08
309,2015-07-30 17:59:07,"Yes, it is.

**Edit**: Here is what I get when I don't modify my config.fish file as I said above (when pressing CTRL-r):

<S_CODE_TOKEN>
",benekastah,2015-07-30 18:13:08
309,2015-07-30 18:02:07,"Hmm, then why setting PATH is required? I never had to do that.

https://github.com/fish-shell/fish-shell/issues/527
",junegunn,2015-07-30 18:13:08
309,2015-07-30 18:13:08,"Ah, figured it out. I was resetting `PATH` in ~/.config.fish instead of building on it. I don't remember why I needed to do that in the past, but I don't think I need to anymore so problem solved.
",benekastah,2015-07-30 18:13:08
309,2015-07-30 18:14:13,"Okay, thanks for quick response.
",junegunn,2015-07-30 18:13:08
309,2015-07-30 18:15:23,"You too!
",benekastah,2015-07-30 18:13:08
308,2015-07-30 10:34:52,"Hi, I had a weird problem with the ctrl-T bash binding in os x and terminal.app (there was ~1s delay between pressing the key and fzf having appeared), so I wrote myself my own bindings using the `$READLINE_LINE` variable. Looking at the original, I think this is a simpler approach, so I thought I would share it here.

<S_CODE_TOKEN>
",azag0,2015-08-06 03:15:36
308,2015-07-30 15:09:49,"Hi, thanks for the tip. I didn't know about `$READLINE_LINE/POINT` and they seem to allow much more elegant solution to the problem. However, the code doesn't seem to work reliably on OS X for some reason. I'll look into it when I get some time. 
",junegunn,2015-08-06 03:15:36
308,2015-07-30 20:08:40,"This appears to be bash version issue, I guess. I have a recent (Homebrew) bash (4.3), OS X ships with 3.2 (2007) which does not have the `READLINE_*` variables. So I guess if you want to support the default OS X bash, you need to stick to the current solution.
",azag0,2015-08-06 03:15:36
308,2015-08-05 06:45:46,"I think it is more reasonable to stay with the more compatible version (the existing one), even if it is much more complicated. 
",edi9999,2015-08-06 03:15:36
308,2015-08-05 09:04:46,"@edi9999 Agreed. I wonder which part of the current implementation caused the delay @azag0 experienced.
",junegunn,2015-08-06 03:15:36
308,2015-08-05 10:02:03,"@junegunn If someone submits a similar issue, feel free to ping me, I can look into it. Until then, I'll stick to my own key bindings. I guess you can close this.
",azag0,2015-08-06 03:15:36
307,2015-07-28 15:12:34,"Is it possible to make **FZF** finder insert the selected file's **path** instead of opening it in **vim/neovim**.

If it is already implemented could you point me to the right place as I could not find it anywhere :)

Thanks
",khalidchawtany,2015-07-28 19:02:16
307,2015-07-28 17:10:44,"It should be possible. All you need to know is [`fzf#run` function](https://github.com/junegunn/fzf#fzfrunoptions) (and some knowledge on vimscript of course). The purpose of this project is not to deliver concrete implementation of specific features, but to provide building blocks that can be used to implement those ideas. You might want to take a look at the examples here: https://github.com/junegunn/fzf/wiki/Examples-(vim)
",junegunn,2015-07-28 19:02:16
307,2015-07-28 19:02:16,"Thanks for such a great tool :+1:  You are awesome :)
",khalidchawtany,2015-07-28 19:02:16
306,2015-07-28 11:20:04,"Hi, There is a feature in Ctrl-P where it finds the git root if the current file is in a git directory. I tried to emulate this behavior using this function:

<S_CODE_TOKEN>

While this correctly brings up the finder, selecting a file opens a new file (in the current directory) instead of in it's own directory.

Am I understanding FZF wrong? Is the vim function doing something wrong (I have limited knowledge of vimscript). Can someone please explain the problem? I am happy to submit a patch if I understand what's going on.

Thanks.
",akhilsbehl,2015-07-29 06:59:45
306,2015-07-28 14:18:45,"For me, the code you posted seems to work as expected. I have no problem opening a file inside a git repo regardless of where I am. Maybe some other config or plugins in your .vimrc are getting in the way?
",junegunn,2015-07-29 06:59:45
306,2015-07-28 14:50:49,"@akhilsbehl What's the value of 

<S_CODE_TOKEN>
",justinmk,2015-07-29 06:59:45
306,2015-07-29 05:59:07,"@Junegunn: Let me try to provide a replicable example of provide some
pictures to explain the problem.
@Justin: autpchdir is set.

## 

ASB (akhilsbehl.github.io)

_'Personally, I am always ready to learn, although I do not always like
being taught_...', Churchill.

On Tue, Jul 28, 2015 at 8:20 PM, Justin M. Keyes notifications@github.com
wrote:

> @akhilsbehl https://github.com/akhilsbehl What's the value of
> 
> :set autochdir?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/issues/306#issuecomment-125635737.
",akhilsbehl,2015-07-29 06:59:45
306,2015-07-29 06:59:45,"Hi, I can confirm that this is not a problem with FZF. Just tried this behavior with a clean vimrc with only FZF installed and it works fine. So, will close this issue.

But does anyone have a clue what may be interfering so I can get correct behavior?

Thanks.
",akhilsbehl,2015-07-29 06:59:45
306,2015-07-29 07:04:14,"Just realized, this problem only happens if vim is running inside tmux.
",akhilsbehl,2015-07-29 06:59:45
306,2015-07-29 07:12:04,"So it's basically a configuration issue, but we can take this as a chance to make fzf more robust.

> But does anyone have a clue what may be interfering so I can get correct behavior?

Well, there's no easy way. You may need to start with only a small part of your vimrc (with `finish`), and incrementally extend the region until the problem is reproducible.
",junegunn,2015-07-29 06:59:45
306,2015-07-29 07:14:44,"For now I can get the correct behavior if I use `:FZF!` instead of `:FZF` since that avoids tmux splits. I do however get this warning everytime in vim:

<S_CODE_TOKEN>

Does anyone else see this?

I will try to debug this (since I will really like this working, but that will take some time). Thanks for all help.
",akhilsbehl,2015-07-29 06:59:45
306,2015-07-29 08:09:31,"Hey, sorry, turns out this is an FZF problem. The problem was not solved because of the clean vimrc but because I had added `'cd'. gitdir` to the `FuzzyFind()` function.

I have a question: does the plugin work by opening a buffer and pasting the contents of the actual file into that buffer? Because if so, I think that is the part where the problem lies.

Also, I think the fact that tmux can't seem to find the file and the W13 above are related to each other. I am not going to reopen this since I can not give you a reproducible example. But it will probably help if you can give a high-level overview of how the vim plugin works.

Thanks. 
",akhilsbehl,2015-07-29 06:59:45
306,2015-07-29 08:37:23,"> I have a question: does the plugin work by opening a buffer and pasting the contents of the actual file into that buffer? Because if so, I think that is the part where the problem lies.

Nope.

As @justinmk mentioned, I think `autochdir` can be the culprit. Can you try again with the option unset and see if the problem still persists?

I actually found an issue with `autochdir` when selecting multiple files. When multiple files are selected, `fzf#run()` will open files one by one, but the directory is changed after the first file is open, so the rest of the files are not properly open.
",junegunn,2015-07-29 06:59:45
306,2015-07-29 08:42:08,"Busy with something just now. Will get back to you after testing.

Thanks.
",akhilsbehl,2015-07-29 06:59:45
306,2015-07-29 08:59:20,"I pushed the fix to the problem I mentioned above. It will temporarily disable &autochdir when opening multiple files. The fix only applies to `:FZF` command, not `fzf#run()`.
",junegunn,2015-07-29 06:59:45
306,2015-07-29 09:25:21,"I can confirm that this solved my problem too. :) Any reason we should not do this for `fzf#run` too?
",akhilsbehl,2015-07-29 06:59:45
306,2015-07-29 09:52:40,"Because `fzf#run` does not know the context of the call and to disable the setting is beyond the scope of its responsibility. I mean, we cannot assume that the caller is using `fzf#run` for opening files. Something like `:call fzf#run({'source': range(100), 'sink': 'echom'})` is totally valid. I know that most users will be using `fzf#run` for opening files and it probably wouldn't hurt to apply the fix to `fzf#run` as well, but in principle, it's not pertinent to what `fzf#run` is supposed to do.
",junegunn,2015-07-29 06:59:45
306,2016-07-20 09:14:23,":GitFIles will fail to get the correct pwd for opening file when `set autochdir`
",maple-leaf,2015-07-29 06:59:45
306,2016-07-20 16:55:56,"@maple-leaf I can't reproduce the problem. Please create a new issue on fzf.vim project (not here) if you still have the issues with the latest versions of fzf and fzf.vim.
",junegunn,2015-07-29 06:59:45
305,2015-07-28 03:34:12,"Here's the error message:

<S_CODE_TOKEN>
",mclearc,2015-07-28 05:10:45
305,2015-07-28 03:34:34,"Here's my [tmux.conf](https://github.com/mclearc/dotfiles/blob/master/tmux.conf)
",mclearc,2015-07-28 05:10:45
305,2015-07-28 05:02:48,"Thanks for the report. Can you check if the following patch to fzf-tmux helps?

<S_CODE_TOKEN>
",junegunn,2015-07-28 05:10:45
305,2015-07-28 05:10:45,"Nice fix! That seems to have done the trick. Thanks again!
",mclearc,2015-07-28 05:10:45
305,2015-07-28 05:14:19,"Great, thanks for your assistance, I'll push the fix to master.
",junegunn,2015-07-28 05:10:45
305,2015-07-28 05:40:35,"Updated fzf-tmux to inherit the TERM value of the hosting shell and also updated fzf to gracefully stop on invalid $TERM. If you used Homebrew to install fzf, you can `brew reinstall fzf --HEAD`.
",junegunn,2015-07-28 05:10:45
304,2015-07-27 19:53:18,"I am using fzf with zsh when I press `Control-R` and start typing a command not seen previously and press Enter then entire input (typed so far) is wiped out and I am taken to zsh prompt with nothing typed.

It kinda slows down the workflow and I am wondering if I am missing something obvious.
",gnufied,2015-08-06 16:44:34
304,2015-07-28 02:55:51,"It's possible to implement the behavior you want with `--print-query` option. However, I'm not sure pasting the typed query onto the command-line is the ""right"" behavior since fzf is a ""fuzzy finder"" where users do not type in the exact command. For example one might type `gtcln` to search for `git clone ...`, and it doesn't really make sense to put `gtcln` onto your command-line when the match is not found.

What I suggest is that you type in a prefix to the command to your command-line first, then press `CTRL-R` to start fzf, if you find a match press enter, or if you can't, terminate the finder with `CTRL-C` or `ESC`.
",junegunn,2015-08-06 16:44:34
303,2015-07-27 15:06:21,"Steps:
- Open tmux with multiple pane
- Open vim in one of the panes
- Zoom the pane (ctrl+b z)
- call fzf#run in vim => the tmux is unzoomed.

Maybe fzf should detect if tmux is in zoomed mode and use the current pane for fzf instead of creating a new one.
",trungphan,2015-07-27 15:30:51
303,2015-07-27 15:17:21,"That is actually a very nice idea.
",junegunn,2015-07-27 15:30:51
303,2015-07-27 15:24:50,"Patch pushed to master. I also applied the same trick to `fzf-tmux` script. Thanks.
",junegunn,2015-07-27 15:30:51
303,2015-07-27 15:34:49,"Oops, I was in a haste and forgot that the result of `s:tmux_enabled()` is cached. Pushed another commit.
",junegunn,2015-07-27 15:30:51
303,2015-07-29 04:53:15,"Perfect. Thanks
",trungphan,2015-07-27 15:30:51
302,2015-07-27 12:01:30,"Right now in my mru list i see often NERD_tree_1. How to ignore these buffer name?

<S_CODE_TOKEN>
",regedarek,2015-07-27 14:43:56
302,2015-07-27 14:43:56,"I think `filter(copy(v:oldfiles), 'v:val !~ ""NERD_tree""')` should do. But you might want to write an external sink function if you want to fine-tune the list.
",junegunn,2015-07-27 14:43:56
301,2015-07-27 11:23:32,"This is my fzf configuration: https://github.com/regedarek/fzf-configuration/blob/master/plugin/fzf-configuration.vim

<S_CODE_TOKEN>

I open a file then I call `:FZFMru`. And at the bottom of my list I don't see my last opened file.
It appears when I restart vim and call `:FZFMru`

Is there a chance to change that behaviour?
",regedarek,2015-07-28 08:42:55
301,2015-07-27 12:15:06,"Probably you should add this to your .vimrc :  

<S_CODE_TOKEN>

> 1. The viminfo file : _viminfo_ _viminfo-file_ _E136_
>    _E575_ _E576_ _E577_
> 
> If you exit Vim and later start it again, you would normally lose a lot of
> information.  The viminfo file can be used to remember that information, which
> enables you to continue where you left off.
> 
> This is introduced in section |21.3| of the user manual.
> 
> The viminfo file is used to store:
> - The command line history.
> - The search string history.
> - The input-line history.
> - Contents of non-empty registers.
> - Marks for several files.
> - File marks, pointing to locations in files.
> - Last search/substitute pattern (for 'n' and '&').
> - The buffer list.
> - Global variables.
> 
> The viminfo file is not supported when the |+viminfo| feature has been
> disabled at compile time.
",netei,2015-07-28 08:42:55
301,2015-07-27 13:32:30,"Unhappily adding viminfo does not help. Maybe these is related to neovim which I am using?

This is my nvimrc: https://github.com/regedarek/dotfiles/blob/master/nvimrc 

viminfo is stored in .nviminfo file.
",regedarek,2015-07-28 08:42:55
301,2015-07-27 14:40:28,"According to `:help v:oldfiles`, it is the expected behavior of `v:oldfiles`:

> v:oldfiles    List of file names that is loaded from the |viminfo| file **on startup**.

So you'll have to merge `v:oldfiles` with the list of open buffers using some vimscript.

https://github.com/junegunn/fzf/wiki/Examples-(vim)#select-buffer
",junegunn,2015-07-28 08:42:55
301,2015-07-27 22:46:24,"Right now I am using FZFMru as here:

<S_CODE_TOKEN>

I tried to add there also buffers:

<S_CODE_TOKEN>

but without success, there is some string/list problem.
",regedarek,2015-07-28 08:42:55
301,2015-07-28 06:01:23,"<S_CODE_TOKEN>
",junegunn,2015-07-28 08:42:55
301,2015-07-28 08:04:32,"Thanks a lot, that is exactly what I expected.
",regedarek,2015-07-28 08:42:55
300,2015-07-26 09:40:52,"Hello.
I'm new in go language. I want built rpm package of fzf (and possible propogate it into Fedora).

But can't find instruction how to do not download binaries (what by default) and build from source go-version (ruby version marked a deprecated in source header).

So far I on just start:

<S_CODE_TOKEN>

Could you please provide detailed instruction or enhance makefile to do so straight forward?

With best wishes, Pavel Alexeev.
",Hubbitus,2015-07-26 14:19:17
300,2015-07-26 14:19:17,"Set up Go development environment with proper $GOPATH and just type in `go get github.com/junegunn/fzf/src/fzf` which will clone the repository inside $GOPATH and build fzf executable. From then on, Makefile in the cloned repository will work as expected.

> Could you please provide detailed instruction or enhance makefile to do so straight forward?

I do not guarantee that the latest code on the master branch is stable or backward-compatible, so building fzf from source is not recommended unless you know exactly what you're doing, which is, however, not the case for most users. So I have no plan to make it more accessible at the moment.
",junegunn,2015-07-26 14:19:17
300,2015-07-26 14:54:18,"Auto cloning repository is not the option because build on farm happened without network support and source tarball should be verified for reproducible build.

Ok, thanks for the answer. Now I then will try percol which have similar functionality and use standard python build system.
",Hubbitus,2015-07-26 14:19:17
299,2015-07-26 05:50:56,"Add margin option to give [Goyo](https://github.com/junegunn/goyo.vim)-like look.

<S_CODE_TOKEN>
",junegunn,2015-07-26 14:02:20
299,2015-07-26 15:12:15,"Great !
",edi9999,2015-07-26 14:02:20
298,2015-07-25 06:47:55,"I've followed the Readme instructions of [Respecting ignore files](https://github.com/junegunn/fzf#respecting-gitignore-hgignore-and-svnignore) and setup these env variables:

<S_CODE_TOKEN>

Now when I run `fzf` in a git directory, it works correctly, and respects .gitignore etc.

But when I run fzf by a completion trigger (like `subl **<TAB>`) it shows ALL the files (even those that should've been ignored.)

If that wasn't weird enough, when I use the `Ctrl + T` binding it shows NO files.

I can't figure out the reason of this behavior. I am using zsh 5.0.2 on Ubuntu 14.04.
",dufferzafar,2015-07-26 14:23:27
298,2015-07-25 16:39:50,"The both variables do not apply to fuzzy completion. Fuzzy completion is a bit more complicated in the sense that it has to work differently depending on the context. For example, when you do `cd **<TAB>`, you probably don't want to use `ag` since it only shows the names of the files, not directories. The same can be said for `rmdir **<TAB>`, `export **<TAB>`, `ssh **<TAB>`, `unalias **<TAB>`, etc. Selectively applying `FZF_DEFAULT_COMMAND` to a subset of cases seems like an incomplete and a bit crude solution, but at the same time we do not wish to introduce a whole new bunch of variables. _So it is recommended that you simply manage your own fork of `completion.zsh` if you need customization._

Regarding the problem of CTRL-T, I just tested it on Ubuntu 14 VM and ran into the same problem. I realized that the ag from apt-get is just too old (0.19.2). I built the latest ag from the source (0.30.0) and then it started working.
",junegunn,2015-07-26 14:23:27
298,2015-07-25 16:58:32,"Thanks a lot for a detailed response, and actually explaining how things work. I'll look into the `completion.zsh` file and building ag from source. 
",dufferzafar,2015-07-26 14:23:27
297,2015-07-25 04:12:40,"### New features
- Added options for sticky header
  - `--header-file`
  - `--header-lines`
- Added `--margin` option
- Added `cancel` action which clears the input or closes the finder when the
  input is already empty
  - e.g. `export FZF_DEFAULT_OPTS=""--bind esc:cancel""`
- Added `delete-char/eof` action to differentiate `CTRL-D` and `DEL`
### Minor improvements/fixes
- Fixed to allow binding colon and comma keys
- Fixed ANSI processor to handle color regions spanning multiple lines
",junegunn,2015-07-26 15:15:22
297,2015-07-26 15:15:22,"phew.
",junegunn,2015-07-26 15:15:22
297,2015-07-26 19:47:21,"Great work !
",edi9999,2015-07-26 15:15:22
297,2015-07-26 23:58:19,"Thanks, please let me know if you find any regression.
",junegunn,2015-07-26 15:15:22
296,2015-07-21 15:46:13,"This is an experimental feature only available on master. The decision is not final.

<S_CODE_TOKEN>

![2015-07-22 12 45 13](https://cloud.githubusercontent.com/assets/700826/8805193/f2e2363c-300a-11e5-9ee5-33e757e2b190.png)
",junegunn,2015-07-22 13:38:34
296,2015-07-21 16:28:11,"`--header-file` is useful if you want to display free-form information about the context while `--header-lines` should be more suitable for tabular data.
",junegunn,2015-07-22 13:38:34
295,2015-07-21 00:28:28,"On my zsh 4 machine, this line:

  tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))}

in "".fzf/shell/completion.zsh"" gives this error on tab completion attempts:

rlpowell@shell01> ls /
fzf-completion:17: unrecognized modifier

I changed the : to :- ; no idea if that's a good fix, but it shut the error up.
",rlpowell,2015-07-21 12:22:42
295,2015-07-21 12:22:42,"Thanks for the suggestion, but it's not a valid fix.

<S_CODE_TOKEN>

And sorry but I don't think I can afford time to make the code compatible with old versions of zsh (same goes to those of fish) especially considering that zsh 5 has been around for 3 years by now. If you can't upgrade for some reason, install script will allow you to disable fuzzy completion.
",junegunn,2015-07-21 12:22:42
294,2015-07-19 20:54:33,"This would allow fzf to process data-sets of the form:

<S_CODE_TOKEN>

fzf would present the list of values to the user, and allow the user to do fuzzy finding on this list. The output of fzf would be the key(s) of the corresponding selected values.

This would be particularly useful to handle tags inside vim, but there might be other legitimate use cases.
",acornejo,2015-07-20 02:40:44
294,2015-07-20 01:02:10,"What you have in mind (and more) is already possible with `--with-nth`, `--delimiter`, and a post-processor. See the man page for the details.

<S_CODE_TOKEN>
",junegunn,2015-07-20 02:40:44
294,2015-07-20 02:40:19,"great! closing this issue!

I had seen the man page, but somehow the description led me to believe this wasn't what I wanted (somehow `Transform each item using index expressions within finder` didn't quite explain to me that this would only print certain fields.. make sense now though).
",acornejo,2015-07-20 02:40:44
293,2015-07-17 15:33:03,"Hi, me again...

I have noticed that the `execute()` action in `--bind` behaves differently than the other actions:

<S_CODE_TOKEN>

`execute()` will only be applied if there is some input. Can we bring them into line?
",D630,2015-07-19 09:17:45
293,2015-07-17 17:49:30,"> execute() will only be applied if there is some input

It's intentional. It doesn't make sense to execute something ""for nothing"". If we allow that, we'll have to check if `{}` is empty or not, more precisely, we'll even need a way to know if it's an empty string, or if the cursor isn't pointing to any. Simple things like `fzf --bind 'enter:execute(vim {})'` will become more complicated, and the benefit is not clear to me.
",junegunn,2015-07-19 09:17:45
293,2015-07-18 10:05:35,"Ok, no problem.

This question came into my mind, because I had been trying to use keybinds without parsing `--expect` output. Something like this:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",D630,2015-07-19 09:17:45
293,2015-07-19 09:17:45,"Yeah, I also replaced some uses of `--expect` with it, but it's clearly not for everything.
",junegunn,2015-07-19 09:17:45
292,2015-07-15 17:37:11,"Hey :smile:

How can I set the colon as key inside `--bind`?

<S_CODE_TOKEN>
",D630,2015-07-16 12:26:47
292,2015-07-15 17:48:22,"Ha, good question. You can't! :hankey: 
The current option parser blindly applies split function with colons and commas as delimiters, so they're ""lost in translation"". An easy fix that comes to my mind is to assign special key names for colon and comma so one can write: `--bind colon:forward-char,comma:backward-char`. What do you think?
",junegunn,2015-07-16 12:26:47
292,2015-07-15 18:21:41,":+1: 
",D630,2015-07-16 12:26:47
292,2015-07-16 12:29:24,"I just fixed the parser code to handle `:` and `,` correctly.
`fzf --bind='::forward-char,,:backward-char'` will work just fine.
",junegunn,2015-07-16 12:26:47
291,2015-07-14 12:49:16,"As a user, I'd like to have completion for the fzf options, but it seems currently bundled with the options where fzf taps into the shell completion.

Would it be possible to separate them?
",jdevera,2015-07-26 14:23:08
291,2015-07-14 15:04:51,"Hi, so what you suggest is that we split the file into two, like `completion.bash` and `fzf-completion.bash`? There's absolutely no technical problem with doing that, but:
- For the change to be complete, we'll have to change the install script so that the users can selectively opt-in during installation. But I don't want to do it since it can annoy users who have something like this in their init scripts: `(echo n; echo y) | ~/.fzf/install`
- Honestly, I haven't really paid too much attention to ""fzf option"" completion. Firstly because I don't think fzf has too many number of options which necessitates interactive help. Compare the number of options of fzf with those of `ag`, `find`, `rsync`, etc. And we, or at least I, do not use fzf directly that often, but instead use a script, function, or some vim script that encompasses it. Considering that, I don't see much benefit to it, rather I think introducing another file can be confusing to the ordinary users who never are interested in reading the code.
- And also, we don't have option completion for zsh and fish.
",junegunn,2015-07-26 14:23:08
291,2015-07-27 08:06:08,"Sorry I did not answer before. I meant to say that I'm okay then with not adding this. After all, I can always extract it from what is already published. Luckily, I use bash, so concerns about fish and zsh.
",jdevera,2015-07-26 14:23:08
290,2015-07-14 12:43:13,"I think there is a mismatch between the supporting scripts and the binary.

I just installed on a fresh box and it seems the binary does not have the required option.

Is there a simple way to fix?
",jdevera,2015-07-14 12:45:53
290,2015-07-14 12:45:53,"Sorry my bad, I had a old copy in the path!
",jdevera,2015-07-14 12:45:53
289,2015-07-14 06:09:50,"Be default `fzf` exits on pressing escape. But I think it may be better if we can clear the input field on escape and exit only if the field is empty. So in general pressing escape twice will close fzf no matter what and pressing once will clear the field.
",JikkuJose,2015-07-23 12:09:56
289,2015-07-14 07:19:11,"> But I think it may be better if we can clear the input field on escape and exit only if the field is empty.

Thanks for the suggestion. I don't think there can be a general consensus on how it should behave. Some people will find the suggested behavior more confusing. I could add a `--bind`able action for that (e.g. something like `abort-if-empty`) so one can customize the behavior of `ESC`, but since I personally prefer `CTRL-C` over `ESC` and very accustomed to using `CTRL-U`, I'm not sure if I'm going to do it.
",junegunn,2015-07-23 12:09:56
289,2015-07-14 08:26:27,"Understandable; its okay if you can't. I have been using CTRL-U so far, but was feeling weird ever since I enabled Vi mode everywhere. Anyways, thanks for your time.
",JikkuJose,2015-07-23 12:09:56
289,2015-07-14 15:09:46,"I see, I'll think about adding the action.
",junegunn,2015-07-23 12:09:56
289,2015-07-14 15:48:05,"Its okay, if there isn't anyone else who feels that way. I somehow felt
this may get enough interest.

On 14 July 2015 at 20:39, Junegunn Choi notifications@github.com wrote:

> I see, I'll think about adding the action.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/issues/289#issuecomment-121277011.
",JikkuJose,2015-07-23 12:09:56
289,2015-07-14 16:43:39,"Using ctrl-c to too quit fzf so I agree with junegun
",edi9999,2015-07-23 12:09:56
289,2015-07-22 14:30:52,"Added `eof` action for `--bind`. You can bind `esc` to `eof` as follows.

<S_CODE_TOKEN>

Incidentally, there's an open issue with the original EOF key, CTRL-D. It's currently bound to `delete-char` action which was named after `bind -p` output of bash. On bash, CTRL-D is bound to `delete-char` but it acts as EOF when the prompt line is empty. `delete-char` action of fzf was implemented to imitate the behavior so it's effectively `delete-char` **or** `eof`. The problem is that `del` key is also bound to the action, so pressing `del` key on an empty fzf prompt will cause fzf to close. And we need a need way to differentiate the two.

EDIT: Fixed in 13e040baee77d75736f9fbb53f269d5ddc97efb9
",junegunn,2015-07-23 12:09:56
289,2015-07-23 04:47:11,"This is not there in release yet right? I can't be using `brew upgrade` to get this but have to pull the repo manually?
",JikkuJose,2015-07-23 12:09:56
289,2015-07-23 04:51:54,"@JikkuJose Yes, it's not yet released. If you use homebrew, you can pass `--HEAD` option to build fzf from the latest source.

<S_CODE_TOKEN>
",junegunn,2015-07-23 12:09:56
289,2015-07-23 05:09:12,"Oh cool, thanks! I didn't know about this.
",JikkuJose,2015-07-23 12:09:56
289,2015-07-23 05:13:42,"Oh cool, thanks! I didn't know about this.

Just to confirm: You haven't added the functionality to clear if Esc is pressed when the field isn't empty right?
",JikkuJose,2015-07-23 12:09:56
289,2015-07-23 05:16:29,"> if we can clear the input field on escape and exit only if the field is empty.

Oh, I completely missed the first part of your request. Then we'll have to rename the action, but I can't seem to think of a good, orthodox name for it, hmm.
",junegunn,2015-07-23 12:09:56
289,2015-07-23 12:09:56,"As far as I know, there's no equivalent action in bash, and I just decided to name it `cancel` which seems to make sense in the context as it ""cancels"" the input and then ""cancels"" the finder.

Please rebuild fzf and try this one instead:

<S_CODE_TOKEN>
",junegunn,2015-07-23 12:09:56
288,2015-07-13 20:44:15,"## Issue

In the command line, when I source the completion, it will make tabbing produce a space character.

If I type:

<S_CODE_TOKEN>

I will get

<S_CODE_TOKEN>

If there is a directory called ""folder"" and I type:

<S_CODE_TOKEN>

I will get

<S_CODE_TOKEN>

And cannot continue to tab for files in that folder because there is now a space separator there.
## Info
- fzf is installed via brew, installed HEAD today.
- OS X 10.10.4
- `git version 2.3.2 (Apple Git-55)` or `git version 2.4.5`

These are the other completes I am currently sourcing:

<S_CODE_TOKEN>
",tonglil,2015-10-12 02:41:28
288,2015-07-14 07:35:07,"Thanks for the report. It's a compatibility issue with git completion. I'll see what I can do, but it may not be possible to fix it, in which case you'll have choose between the two. (install script will let you opt-out fuzzy completion)

For me `git add [2 space characters here]` is reproducible, but `git add folder/[space character here]` is not. No space is attached after the trailing slash.
",junegunn,2015-10-12 02:41:28
288,2015-07-25 04:37:41,"The fuzzy completion from fzf falls back to the original completion function that was defined on the command when the trigger sequence is not found. This works fine for most cases:

<S_CODE_TOKEN>

However, this trick doesn't work for git completion as they are defined with `-o nospace` option:

<S_CODE_TOKEN>

It might be possible, though it feels like a very over-engineered solution, that we remember all the previous options and dynamically restore the options using `compopt` when fzf has to fall back to the original. However, it looks like `compopt` is not available on OS X.
",junegunn,2015-10-12 02:41:28
288,2015-08-05 19:00:36,"You are right, the case you are unable to reproduce I think may come from a different type. If I can reproduce, I will update.

The thing is, the fuzzy completion (`vi FILE**`) is actually the thing I want the most when using fzf :p
",tonglil,2015-10-12 02:41:28
288,2015-09-29 17:44:31,"Would be really good to get that fixed, is there a customized solution/hack that I can apply locally?
",konradreiche,2015-10-12 02:41:28
288,2015-09-30 02:24:09,"@platzhirsch

> For me `git add [2 space characters here]` is reproducible, but `git add folder/[space character here]` is not. No space is attached after the trailing slash.

Which problem are you having? The former (2 spaces) can be annoying but benign as it does not break the workflow, but the latter can be really problematic but I was unable to reproduce it.

I'm currently not aware of any workaround.
",junegunn,2015-10-12 02:41:28
288,2015-09-30 08:38:57,"Only the former one. I am not using fzf in conjunction with git completion. Is there a way to deactivate it for git?
",konradreiche,2015-10-12 02:41:28
288,2015-09-30 08:46:53,"In that case, you can simply source `git-completion.bash` after `.fzf.bash`.
",junegunn,2015-10-12 02:41:28
288,2015-10-11 15:28:33,"Hey guys, please check if the latest commit fixes the issue. Make sure to reload your whole .bashrc, not just ~/.fzf.bash.
",junegunn,2015-10-12 02:41:28
288,2015-10-11 16:52:35,"@junegunn Nice! I tried the latest commit and trailing space no longer appears! :+1: 
",wzyboy,2015-10-12 02:41:28
288,2015-11-09 19:50:17,"Just wanted to say thank you @junegunn!
",tonglil,2015-10-12 02:41:28
287,2015-07-11 21:56:08,"Customizing shell keybindings should be easier/better documented. The fzf-based histroy search in zsh is quite nice, but sometimes I'd prefer to just have zsh's less obtrusive history search. It'd be nice if I could rebind the fzf-based history search to `^E` or something, have leave `^R` as-is (I'm sure this is possible if I fiddle with the `.fzf.zsh` file, but I'm not sure how).
",alecbenzer,2015-07-12 03:28:19
287,2015-07-12 03:28:19,"Adding something like this to your .zshrc will do:

<S_CODE_TOKEN>

Now if you look at [shell/key-bindings.zsh](https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh), you'll notice that it's pretty short and straightforward. (And it can be even shorter if we didn't allow customizing the behavior with env variables.) So I would tell the users to write their own based on the ""example implementation"", instead of me adding a bunch of env variables trying to make every aspect configurable.
",junegunn,2015-07-12 03:28:19
287,2015-07-12 22:07:49,"Thanks, that's helpful. I think just adding a line like that to the wiki showing the relevant shell function names and examples of remapping them would be nice.
",alecbenzer,2015-07-12 03:28:19
287,2015-07-13 06:55:06,"Good point, I'll think about it.
",junegunn,2015-07-12 03:28:19
286,2015-07-07 15:05:05,"Using bash with either `set +o histexpand` or `set +H` to turn off csh style history substitution, fzf no longer expands the returned history item since b4a05ff. This is the same issue as with zsh in #214. Possibly a similar fix could be made by testing for `H` in the bash variable `$-`, something like:

<S_CODE_TOKEN>

assuming `shopt -u nocaseglob`
",jpcirrus,2015-07-12 15:39:53
286,2015-07-07 17:03:52,"Thanks for the report. For zsh (#214), the code was later updated again to use `vi-fetch-history` instead of temporarily setting the option (see #272). I wonder if a similar trick is available for bash.
",junegunn,2015-07-12 15:39:53
286,2015-07-08 07:39:43,"`vi-fetch-history` is available in bash's readline, but in quick testing I couldn't get it to accept the history number as an argument. Interactively, with `set -o vi`, entering command mode, the history number and then `G` (it's default key-binding) it works.
",jpcirrus,2015-07-12 15:39:53
286,2015-07-08 13:28:48,"Hmm, that's unfortunate. Then I currently have no idea how we should restore the setting since in order to do that, we'll have to invoke another `shell-expand-line` which will cause unwanted expansion of the pasted command (e.g. `echo $PATH`)

We could fall back to the old method used before b4a05ff27ed8b1371dc3745ce02f48430345761b only when `histexpand` is not set, but then we'll not be able to handle multi-line commands.
",junegunn,2015-07-12 15:39:53
286,2015-07-09 14:31:12,"I'll have another look at trying to get `vi-fetch-history` working over the weekend when I have some time. Will come back with the result.
",jpcirrus,2015-07-12 15:39:53
286,2015-07-12 09:23:29,"I haven't been able to get `vi-fetch-history` to work in emacs mode, nor been able to set`histexpand`  without polluting the environment, so I think your suggestion when `histexpand` is not set to revert back to the behaviour prior to b4a05ff is the way to go, as at least recalling single-line history commands will work, which doesn't currently.
",jpcirrus,2015-07-12 15:39:53
286,2015-07-12 12:45:13,"Okay, thanks for looking into it. So what do you think about the following? Seems to do the trick.

<S_CODE_TOKEN>
",junegunn,2015-07-12 15:39:53
286,2015-07-12 14:55:19,"In `$-` lowercase ""h"" could be present for `hashall` so we need to make the pattern match case sensitive. We can either put the function body in a subshell with the 2 required shell options so we don't pollute the environment, or we could save their status, change to what we require, and restore at the end of the function.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I confirm that both work for various combinations of `hashall` and `histexpand`.
",jpcirrus,2015-07-12 15:39:53
286,2015-07-12 15:15:05,"Great point, thanks! I never knew about `nocasematch` nor `nocaseglob` :(
By the way, is `nocaseglob` required in this case?
",junegunn,2015-07-12 15:39:53
286,2015-07-12 15:17:56,"Nevermind, you're right that the both need to be unset.
",junegunn,2015-07-12 15:39:53
286,2015-07-12 15:39:53,"I applied your patch and pushed to master. Thanks. Although we can't still handle multi-line commands properly, I'm going to close the issue as it seems unlikely to me that we'll find the perfect solution in a near future.

(I'm not quite sure yet why travis build is failing but it's unrelated to the change)
",junegunn,2015-07-12 15:39:53
285,2015-07-04 00:16:41,"Hi!
There is a problem with a `g++` Bash autocompletion:
`g++`<kbd>space</kbd><kbd>tab</kbd> causes `g++ bash: warning: programmable_completion: g++: possible retry loop`

How to reproduce:
Ubuntu 14.04
Bash-4.3
bash-completion-2.1
`source ~/.fzf.bash` after `source /usr/share/bash-completion/bash_completion` in `~/.bashrc`

See http://unix.stackexchange.com/q/213432/120177
",evverx,2015-07-04 02:24:08
285,2015-07-04 01:29:09,"Hi, thanks for looking into this. Can you squash the commits into one? Meanwhile, I'll set up ubuntu 14 environment and make sure that your fix solves the issue.
",junegunn,2015-07-04 02:24:08
285,2015-07-04 01:35:07,"Done.
@junegunn , thanks for the useful tool!
",evverx,2015-07-04 02:24:08
285,2015-07-04 02:23:57,"Downloading the vagrant box for trusty is taking forever, so I'm just going to merge as I don't see any issue with your fix. (So the problem was `sed` replacing `g++` to `g__`, right?) Thanks!
",junegunn,2015-07-04 02:24:08
285,2015-07-04 02:36:22,"Yes, you are right. `cmd` in `_fzf_handle_dynamic_completion` for `g++` was `g__`. `complete | grep '\-F.* g__` found nothing.
",evverx,2015-07-04 02:24:08
285,2015-07-04 02:41:41,":+1: 
",junegunn,2015-07-04 02:24:08
284,2015-06-30 08:03:12,"fuzzy search can sometimes be too easy-going and cannot filter out unwanted results, especially when the input set is large, of course we don't want extract match either because it is too strict in most cases. 
I suggest having a mode that is somewhere between fuzzy search and normal search, which will match whole words in fuzzy style:

For e.g.
`cat dog` will keep `cat and dog` but remove `can go with dog`

What do you think?
",naviehuynh,2015-06-30 09:33:32
284,2015-06-30 09:33:32,"For that purpose, I use [extended-search mode](https://github.com/junegunn/fzf#extended-search-mode) which allows me to selectively enable exact match by quoting search terms. e.g. `'cat dog`: exact match for `cat` and fuzzy match for `dog`. It's pretty good, you'll like it when you get used to it. (Try using it with `ALT-B`) I also suggest that you enable it by default with `export FZF_DEFAULT_OPTS='--extended'`.
",junegunn,2015-06-30 09:33:32
283,2015-06-29 18:18:18,"I have this function for my statusline

<S_CODE_TOKEN>

when I run `:FZF -m` I get these errors

<S_CODE_TOKEN>

How can I fix this?
",ahmedelgabri,2015-06-30 00:05:09
283,2015-06-29 20:24:52,"It's because `mode()` is returning `t` (for `:term` mode, which is used by FZF), but your `g:currentmode` variable seems surprised by this :)

Using `get(g:currentmode, mode(), '')` instead of `g:currentmode[mode()]` is one way to avoid the error.
",justinmk,2015-06-30 00:05:09
283,2015-06-30 00:05:09,"Thanks, @justinmk!
",junegunn,2015-06-30 00:05:09
283,2015-06-30 00:32:18,"Thanks @justinmk 
",ahmedelgabri,2015-06-30 00:05:09
282,2015-06-29 12:34:28,"Some developers use a `~/.bash_profile` instead of a `~/.bashrc`. I think `fzf` should only append to the non-empty file so that the installation works automatically without manual changes needed.
",blakejennings,2015-06-29 13:03:13
282,2015-06-29 13:03:13,"Thanks for the suggestion, but I'm going to keep it simple and leave it as it is. It's a common practice to source .bashrc from .bash_profile.

http://superuser.com/questions/789448/choosing-between-bashrc-profile-bash-profile-etc

> ~/.bash_profile should be super-simple and just load .profile and .bashrc (in that order)

http://superuser.com/questions/183870/difference-between-bashrc-and-bash-profile

> ~/.bashrc is the place to put stuff that applies only to bash itself, such as alias and function definitions, shell options, and prompt settings. (You could also put key bindings there, but for bash they normally go into ~/.inputrc.)

http://mywiki.wooledge.org/DotFiles

> You should therefore always have source ~/.bashrc at the end of your .bash_profile in order to force it to be read by a login shell.
> Why is .bashrc a separate file from .bash_profile, then? There are a couple reasons. The first is performance -- when machines were extremely slow compared to today's workstations, processing the commands in .profile or .bash_profile could take quite a long time, especially on machines where a lot of the work had to be done by external commands (before Korn/Bash shells). So the difficult initial set-up commands, which create environment variables that can be passed down to child processes, are put in .bash_profile. The transient settings and aliases/functions which are not inherited are put in .bashrc so that they can be re-read by every subshell.
",junegunn,2015-06-29 13:03:13
281,2015-06-27 03:17:52,"In Neovim, calling `fzf#run()` with the `'up'` or `'left'` options results in the terminal window not closing when fzf exits (either by accepting an item or hitting ESC). Using `'down'` or `'right'` instead works as expected.

I can reproduce the issue using [this example from the wiki](https://github.com/junegunn/fzf/wiki/Examples-%28vim%29#select-buffer) by changing `'down'` to either `'up'` or `'left'`.

https://github.com/junegunn/fzf/commit/355d004895eb8cb7e6ca7f8cf0b095f381d6e41b looks like it could be the culprit.
",noahfrederick,2015-06-27 05:24:28
281,2015-06-27 05:25:11,"Thanks for the report. I believe the above commit should fix the problem. Let me know if you see any issues.
",junegunn,2015-06-27 05:24:28
281,2015-06-27 12:46:05,"Confirmed fixed. Thanks.
",noahfrederick,2015-06-27 05:24:28
280,2015-06-25 08:44:19,"I have set FZF_DEFAULT_COMMAND to ag:

<S_CODE_TOKEN>

And it works as expected when I use the `fzf` command in itself, however if I try to use the (bash) shortcut, CTRL-T, I still see entries that should not be there, eg. files that have been .gitignored.

I looked into the source, and it seems that in `key-bindings.bash`, CTRL-T is bound to the function `__fzf_select__` which has a `find -L ...` hardcoded in it, and it never looks at the FZF_DEFAULT_COMMAND variable.

Is this intentional?
",WishCow,2015-06-25 10:04:58
280,2015-06-25 09:55:31,"I have the same behavior with zsh. Didn't find the time to create an issue. :expressionless: 
",casimir,2015-06-25 10:04:58
280,2015-06-25 10:04:58,"Closing as a duplicate of #40.
",junegunn,2015-06-25 10:04:58
280,2015-06-25 10:08:25,"In short, we need another variable only for ctrl-t.
",junegunn,2015-06-25 10:04:58
280,2015-06-25 16:05:58,"Added `$FZF_CTRL_T_COMMAND` for the purpose.
",junegunn,2015-06-25 10:04:58
280,2015-06-25 20:56:15,"Really ? I don't like having too many config items everywhere, and specifying an env variable specific to one shortcut sounds overkill to me. If somebody wants to change the args of the ctrl-t command, maybe the best would be to just edit the command in the directory itself (or even better, not put the key bindings in the git repository, but rather in the wiki, and people could put those in their bashrc , zshrc and edit them themselves
",edi9999,2015-06-25 10:04:58
280,2015-06-26 01:16:06,"@edi9999 I see your concern, and that's what I would usually tell the users. But we can't ignore that many of the users simply do not want to go that far and `FZF_CTRL_T_COMMAND` seems like an okay compromise to me.

> not put the key bindings in the git repository

You know the install script allows you to opt-out the default key bindings. So it's already an option.
",junegunn,2015-06-25 10:04:58
280,2015-06-26 07:46:09,"Ok, i didn't understand that this was written inside the shell/ code, I thought it would be somewhere in the go code.

That way, concerns are separated and I think it's OK like this
",edi9999,2015-06-25 10:04:58
279,2015-06-24 08:58:05,"Like the title says, <kbd>HOME</kbd> and <kbd>END</kbd> keys stop working for me after I've started and exited `fzf`. 

This only happens for one command, though, so after I abort or perform the command, <kbd>HOME</kbd> and <kbd>END</kbd> start working again.

I'm on Ubuntu 14.10 with fzf 0.9.13. This happens for me in the terminals Sakura, and Gnome terminal, but _not_ in Terminator.
",strokirk,2016-07-05 12:50:43
279,2015-06-25 16:15:12,"I don't have a linux desktop environment so I can't be of help on this matter at the moment. Maybe if you could provide a Vagrantfile or something for the environment, that would be helpful. Anyway I wonder if other users also experience the problem.
",junegunn,2016-07-05 12:50:43
279,2015-06-25 20:52:10,"Nope, never seen anything like this
",edi9999,2016-07-05 12:50:43
279,2015-07-02 13:15:08,"Some additional clarification: I'm using Zsh, and <kbd>HOME</kbd> produces `\eOH` before invoking `fzf`, and `\e[H` afterwards. I just tested in Bash, and I can't reproduce the error there. Might be something in my Zsh config.
",strokirk,2016-07-05 12:50:43
279,2016-04-05 12:27:02,"I am having the same issue but I'm running fzf on OS X (10.11.4) under iTerm (2/3 tried both). I'm also running zsh.
",jfchevrette,2016-07-05 12:50:43
279,2016-05-04 07:59:01,"I have a probably related issue: `HOME`, `END` and all the `F*` keys do not work and insert a `~` instead. The problem doesn't persist after exiting fzf though. I'm using zsh and urxvt.
",guiniol,2016-07-05 12:50:43
279,2016-05-04 17:43:42,"Hmm, I still can find a way to reproduce the problem. Note that it's normal that the function keys from F5 give `~` as they are currently not supported. And as a workaround you can use CTRL-A and CTRL-E instead of HOME and END.
",junegunn,2016-07-05 12:50:43
279,2016-05-04 18:00:41,"Ok. So `HOME` and `END` are supposed to be supported?
",guiniol,2016-07-05 12:50:43
279,2016-05-05 10:22:45,"Yeah, I use OS X and they work in iTerm2, Terminal.app and Neovim terminal buffer. But I just confirmed that they don't work correctly in urxvt as you reported. I'll look into it when I get some time, but I don't use urxvt, so any help is appreciated. A quick googling points me to the following link, might be relevant:
https://wiki.archlinux.org/index.php/Home_and_End_keys_not_working#URxvt.2FRxvt
",junegunn,2016-07-05 12:50:43
279,2016-05-05 16:13:57,"@junegunn Thanks for the link. This fixed it. Not sure why I've never seen that in any other application though ^^. Sorry for the noise.
",guiniol,2016-07-05 12:50:43
279,2016-06-29 20:04:41,"Quick update: the fix @junegunn gave me made `HOME` and `END` work in `fzf` but now they don't work in `neovim`.
I added a comment at the end of this issue: neovim/neovim#4308

Basically, if I add to Xdefaults:

<S_CODE_TOKEN>

then `HOME` and `END` work in fzf but not in neovim, and if I remove that, it works in neovim but not in fzf. In both cases, both neovim and fzf work in tmux.
So I'm at a loss as to how to debug that. Any tips would be appreciated.
",guiniol,2016-07-05 12:50:43
279,2016-06-29 20:37:20,"@guiniol Did you also do the terminfo steps at  https://wiki.archlinux.org/index.php/Home_and_End_keys_not_working#URxvt.2FRxvt ?

If Xdefaults is sending sequences that don't match terminfo, neovim (and other apps that respect terminfo) won't interpret them correctly.
",justinmk,2016-07-05 12:50:43
279,2016-06-29 21:26:02,"That fixed it, thanks.
I don't understand why urxvt would do something so not default, and how this issue has never arisen in all the years I've been using it.
",guiniol,2016-07-05 12:50:43
279,2016-06-29 22:13:31,"Reading https://github.com/junegunn/fzf/blob/3e1d6a7bcf2a47a494d602389fda415d8fad8e03/src/curses/curses.go#L495 it seems that fzf is not reading the terminfo and assuming the values for the various escape codes. It would be better to read these values from the terminfo. I have no idea if that's a lot of work, or if there is a library or anything. If this issue is still there when I get around to it, I'll take a look.
",guiniol,2016-07-05 12:50:43
279,2016-07-04 09:35:55,"This issue seems to arise because, after using the fzf Zsh widget, the terminal will not be in application mode anymore. As a result, escape sequences got from terminfo won’t be valid anymore, and Home/End will cease to function for folks who bound these keys using `${terminfo[khome]}`.

I don’t know why exactly the widgets switch away from application mode. Either something in the widget processing will cause `zle-line-finish` to be called (which switches off application mode in my setup), or curses does this (which seems probable).

Since the fzf widgets alter the terminal settings (by calling a curses application), one would probably expect that they restore the original terminal state; so, a fix for this issue would probably go there. I’m not sure which way to go about it best, though. Some options:
- switch back into application mode at the end of each widget unconditionally - this resolves this issue for me, but I’m not sure if there are any drawbacks for folks who don’t switch their terminal into application mode in their setup
- detect whether the terminal is in application mode and restore it conditionally
",eigengrau,2016-07-05 12:50:43
279,2016-07-04 10:26:04,"I went for a slightly different solution. Since I couldn’t find a way to query whether we are currently in application mode (so that it can be conditionally restored), we simply run the special hook `zle-line-init` once the widgets are finished. In setups using this hook to set the terminal into application mode, this will do the right thing and fix the issue.
",eigengrau,2016-07-05 12:50:43
279,2016-07-04 18:03:57,"@eigengrau Great, thanks for the patch! Seems to make sense. Can you post a simple configuration file or script that reproduces the problem we're discussing here? I'd like to locally reproduce the problem on my vanilla zsh and confirm that the patch fixes the issue before merging it.
",junegunn,2016-07-05 12:50:43
279,2016-07-04 19:18:02,"> I'd like to locally reproduce the problem on my vanilla zsh and confirm that the patch fixes the issue before merging it.

Sure. Actually I made a reproducer config while researching the cause. It’s on my work machine; I’ll shoot you a gist tomorrow.
",eigengrau,2016-07-05 12:50:43
279,2016-07-05 07:01:13,"So here’s the [gist](https://gist.github.com/eigengrau/daa093252cd75ea07deeffd33ca8a260).
",eigengrau,2016-07-05 12:50:43
278,2015-06-21 19:48:20,"I have looked on how to run the tests.  It is not obvious to me.
It would be good to have a few lines in the docs to help people contribute.
",mcprentiss,2015-06-25 16:11:03
278,2015-06-25 16:11:03,"Good point. I'll consider providing the instruction.
1. `make test` inside `src` directory for running unit tests
2. `ruby test/test_go.rb` for running integration tests

You can also refer to `.travis.yml` file.

By the way, I'm not looking for active contribution as I'm thinking of freezing the feature set for the time being.
",junegunn,2015-06-25 16:11:03
277,2015-06-21 16:17:44,"https://github.com/junegunn/fzf#settings

I could not get the `export FZF_COMPLETION_OPTS=""-m -x` as stated in the link above to work. However setting the `export FZF_DEFAULT_OPT=""-m -x""` as stated in the man page worked. 
",Lompik,2015-06-21 16:30:38
277,2015-06-21 16:24:24,"Well, it works for me. `FZF_COMPLETION_OPTS` only applies to auto-completion (`**<tab>`) and `FZF_DEFAULT_OPTS` applies globally.
",junegunn,2015-06-21 16:30:38
277,2015-06-21 16:30:38,"I think you're misguided since `FZF_DEFAULT_OPTS` is not explicitly mentioned on the README page, I'll consider adding it to the page. Thanks.
",junegunn,2015-06-21 16:30:38
277,2015-06-21 16:37:20,"Exactly what happend. Thanks.
",Lompik,2015-06-21 16:30:38
276,2015-06-21 13:42:24,"Hi,

I just open-sourced a very small CLI because I liked the idea of [fpp](https://github.com/facebook/PathPicker) but didn't like that I was forced to use their picker.

The CLI extracts filepaths from stdin, so that you can write:

`git status | pe | fzf` to select between files that are in your staged area for example (but it would work with any command of course).

Here's a link to my project : https://github.com/edi9999/path-extractor
",edi9999,2015-06-21 14:43:47
276,2015-06-21 14:43:47,"That looks pretty neat, thanks for sharing. There was [a discussion on posting a list of related project](https://github.com/junegunn/fzf/pull/268) in the wiki page. I'll add path-extractor as well when I get to do that.
",junegunn,2015-06-21 14:43:47
275,2015-06-21 07:38:16,"Hi,

I'm trying to switch from Unite to FZF in neovim but I would like to have the FZF search window to be specific to the split from which I executed it. When it's opened as a separate split on the bottom it doesn't reflect which split it will affect once you select a file.

Is this doable?

I've been trying to achieve this by commenting `call s:split(a:dict)` in `s:execute_term()` and fiddle with the `fzf.on_exit()` function but I've encountered a number of issues:
1. `Can only call this function in an unmodified buffer.`
2. `E315: ml_get: invalid lnum: 778`
3. The term windows opening in all splits containing the same buffer.
4. Once selected file is open any action closes the split.

So yeah, I suck at vimscript and I have no idea how to get this working. Any suggestions?
",PonderingGrower,2015-06-21 08:43:48
275,2015-06-21 08:23:20,"You might want to fiddle with `window` option of `fzf#run`. (https://github.com/junegunn/fzf#fzfrunoptions)

e.g. `call fzf#run({'sink': 'e', 'window': 'rightbelow new'})`
",junegunn,2015-06-21 08:43:48
275,2015-06-21 08:42:32,"Thanks! Looks like `'window': 'enew'` does what I want. Thanks man!
",PonderingGrower,2015-06-21 08:43:48
275,2015-06-21 08:43:48,"No problem.
",junegunn,2015-06-21 08:43:48
274,2015-06-21 07:16:57,"Hi,

It looks to me like FZF is the best fuzzy search option for neovim at the moment. And I do use it for all of my file searching, but one of the main things I loved about Unite is the fact that I could combine multiple sources.

To be exact I would combine open buffers, mru files, and current project root search (or if no such root exists then the home dir).

I'm not very well versed in vimscript so I tried and failed to do this. How would I go about combining these three sources in one FZF search in neovim?
",PonderingGrower,2015-06-21 13:08:35
274,2015-06-21 07:38:45,"You can do it in vimscript or you could do it in bash (redirect 3 streams to 1) if you are more comfortable with that. Interleaving 3 streams into 1 stream in vimscript would be less convenient than bash, though it is definitely possible using job control (`:help jobstart()`).

Note that unite's source composition did not interleave streams, it just concatenated them (and it was quite slow, though I never tried vimproc). If you want to do that with fzf, you could, but fzf would not be able to seach the last stream until the previous 2 streams were completed.

> It looks to me like FZF is the best fuzzy search option for neovim at the moment.

That's a curious statement to me. Is there a _better_ fuzzy search option anywhere else? Even Eclipse/Resharper fuzzy-searches are not as powerful as fzf. emacs flx and Vim ctrlp are not worth mentioning...
",justinmk,2015-06-21 13:08:35
274,2015-06-21 07:49:41,"> fzf would not be able to seach the last stream until the previous 2 streams were completed.

That's fine since the first two streams would be just open buffers and most recently opened files, so the lists shouldn't be very big.

So what you are saying is that in the `source` section of the dict passed onto `fzf#run()` I should combine for example two commands to get all their outputs in fzf like so:

<S_CODE_TOKEN>

Does that make sense?
",PonderingGrower,2015-06-21 13:08:35
274,2015-06-21 07:55:10,"> So what you are saying is that in the source section of the dict passed onto fzf#run() I should combine for example two commands to get all their outputs in fzf like so:

Yes, that's the idea. 

Note that fzf runs in a fully-interactive `:term` buffer, which will inherit all functions/settings/etc from your `.bashrc` (or .zshrc or whatever). So you could do all of this in a shell function instead of inlining it in vimscript...
",justinmk,2015-06-21 13:08:35
274,2015-06-21 08:15:17,"I think you do need to know some vimscript to achieve it :) `source` parameter of `fzf#run` can be an external command (string type), or a vimscript list. Since the latter cannot be asynchronously streamed into fzf, you might want to stick to the former. So what you need here is a vimscript function that writes the list of open buffers and stuff into a temporary file, and executes `fzf#run` with the source command that concatenates the temp file and ag output.
",junegunn,2015-06-21 13:08:35
274,2015-06-21 08:36:41,"I don't think implementing it somewhere in my zsh configuration would work since the sources I want to add are vim specific, which are opened buffers and recently opened files.

And thanks junegunn for that tip. I wasn't aware you could pass just a command directly. I'll try that out.

I definitely have to work on my vimscript knowledge. I guess this is kinda off topic but is [Larn Vimscript the Hard Way](http://learnvimscriptthehardway.stevelosh.com/) a good source or do you have any other recommendations?
",PonderingGrower,2015-06-21 13:08:35
274,2015-06-21 09:17:20,"Okay, so I've built this:

<S_CODE_TOKEN>

And I'm getting the old files together with the result from `ag`, but when I select a file for some reason I lose all my vim windows and it gets opened in the main and only window. Also, the moment I do ANY action the window goes back to the previously opened buffer. I'm pretty confused.

Here's a recording:

[![asciicast](https://asciinema.org/a/1qpmg3hukq7atbcen9rhd2lez.png)](https://asciinema.org/a/1qpmg3hukq7atbcen9rhd2lez)
",PonderingGrower,2015-06-21 13:08:35
274,2015-06-21 09:20:51,"Also, if I open a completely new neovim and I use `FZFMix` from above I get

<S_CODE_TOKEN>
",PonderingGrower,2015-06-21 13:08:35
274,2015-06-21 12:41:59,"@PonderingGrower Hmm, `fzf#run` was not written to handle `{'window': 'enew'}` correctly. I'll push a fix shortly and let you know.

<S_CODE_TOKEN>
",junegunn,2015-06-21 13:08:35
274,2015-06-21 12:51:28,"@PonderingGrower I have tested `:call fzf#run({'window': 'tabe', 'sink': 'e'})` works as expected in the following cases:
- `nvim`
  - Select file
  - Abort finder
  - Press enter with no match (empty output)
- `nvim +'set nobuflisted'`
  - Select file
  - Abort finder
  - Press enter with no match (empty output)
- `nvim SOMEFILE`
  - Select file
  - Abort finder
  - Press enter with no match (empty output)
- `nvim +'wincmd v|wincmd w'`
  - Select file
    - A short flash of `[Program exited, press any key to close]` is shown
  - Abort finder
  - Press enter with no match (empty output)
",junegunn,2015-06-21 13:08:35
274,2015-06-21 13:05:50,"Looks like it seems to work in all the cases I tested. Awesome! Thanks a bunch.

The only weird thing I've noticed is that with `enew` I can notice for a second or less the `[Program exited, press any key to close]` after I select a file to open. It's not a problem, just something I noticed.
",PonderingGrower,2015-06-21 13:08:35
274,2015-06-21 13:08:35,"Yeah, it's something I also noticed in some cases (see the above comment). Anyway, as it looks like now you have the idea how things can be done, I'll close the issue. Let me know if you run into a bug of vim/nvim plugin.
",junegunn,2015-06-21 13:08:35
274,2015-06-21 13:09:08,"Thanks man, you rock!
",PonderingGrower,2015-06-21 13:08:35
273,2015-06-21 05:43:27,"Using the fzf Vim plugin, `:FZF` command works as expected. But when `:call fzf#run()` is used, `ctrl-v` and friends are ignored. Using `<enter>` to select an item _does_ work, and `ctrl-g` escapes/cancels.

Steps to reproduce:

<S_CODE_TOKEN>
",justinmk,2015-06-21 08:11:48
273,2015-06-21 08:00:55,"Actually, that's how it works. See #187.
Those key bindings of `:FZF` command are implemented with `--expect` option. `source` for `fzf#run` can be any list of stuff (e.g. names of color schemes), so such key bindings don't always make sense.
",junegunn,2015-06-21 08:11:48
273,2015-06-21 08:02:43,"Also #239.
",junegunn,2015-06-21 08:11:48
273,2015-06-21 08:11:48,"Oh, got it. Thanks!
",justinmk,2015-06-21 08:11:48
272,2015-06-20 22:59:26,"In addition to being simpler and not relying on zsh options, it allows subsequent up/down history or accept-line-and-down-history widgets to work.

I also replaced your pipeline for extracting the number with what I think is simpler: assign the output to an array and then take the first element.

Furthermore, The cd widget didn't work in my configuration because of two aliases I have defined:
  alias find='noglob find'
  alias command='command '
The later enables alias expansion after command. It'd be better to use zsh's autoloadable functions: put the functions each in their own file, .fzf.zsh would then need to add that directory to fpath:
  fpath+=( $fzf_base/shell/fpath )
and autoload them with the -U option to disable alias expansion:
  autoload -Uz fzf-history-widget fzf-file-widget fzf-cd-widget __fzfcmd __fsel
",okapia,2015-06-21 07:57:14
272,2015-06-21 07:57:17,"Very nice, thanks!
",junegunn,2015-06-21 07:57:14
271,2015-06-19 01:22:17,"Hello,

I've started using fzf today in vim and added this function to my .bashrc. Which will pass all files as an argument to a command like vlc.

open() { fzf -m -e | xargs -d'\n' -r ""$@"" ; }

I was hoping to replace a python script I wrote to search and select mp3's from my music collection but the mp3's are sorted by how long the title is not alpha numerically?

Here's a screenshot to better explain what I mean. On the right is a ls directory listing. On the left is fzf run without any arguments in the same directory. When I type ""a"" the result should be sorted similar to the output of ls.

http://i.imgur.com/lYNADdV.png

This isn't a problem when your selecting a single file but it is when -m is used to open something like a audio book or music album everything is out of order.

Apologies if I've missing something obvious but I couldn't see any way of manipulating the sort order in the documentation beyond not doing any sorting.
",Fixles,2015-06-21 14:47:28
271,2015-06-19 01:37:42,"Heres a more practical example. This is a vim course I downloaded from youtube to watch offline. I'd like to select the first couple in the series to pass to vlc but again they are sorted by file length.

http://i.imgur.com/Tk0H8Ki.png
",Fixles,2015-06-21 14:47:28
271,2015-06-19 01:52:27,"fzf does not know the meaning of the input. It can be a list of files or processes or any list of things. So as being a general-purpose filter, fzf by default sorts the list 
1. first by the length of the matched substring,
2. then by the length of the line,
3. finally by the index number of the line (FIFO)

There are a couple of strategies you can take.
1. Presort the result and disable sort completely. 
   
   <S_CODE_TOKEN>
2. Use `--tiebreak` option to adjust the sorting criteria. See the man page for the details.
   
   <S_CODE_TOKEN>
",junegunn,2015-06-21 14:47:28
271,2015-06-19 02:51:13,"Make sure that you're running the proper go version of fzf. The outdated ruby version does not implement `--tiebreak`.
",junegunn,2015-06-21 14:47:28
271,2015-06-19 10:03:59,"Thanks using sort works perfectly it hadn't occurred to me. Actually I missed there was a go version I just copied the ruby script into my $HOME/bin/

I just grabbed the pre-release version --bind toggle-all is a great new feature!
",Fixles,2015-06-21 14:47:28
271,2015-06-21 14:47:28,"0.10.0 is out.
",junegunn,2015-06-21 14:47:28
270,2015-06-18 19:23:05,"It would be nice if fzf had a way to omit repeated lines.

I typically run fzf with this pattern:

<S_CODE_TOKEN>

where:
- cmd1 and cmd2 return the same results, mostly.
- cmd1 is fast but unreliable (results may be out of date).
- cmd2 is slow but reliable (results are always current).

This allows me to get fast matches that are probably good, while slower ones that are definitely good trickle in.

Unfortunately this leaves me with a lot of duplicated lines in fzf.

For example, I'd like for:

<S_CODE_TOKEN>

...to only display ""hello"" once.

A -u/--unique option would be nice.

Apologies if there's already a way to do this and I've overlooked it.

Thanks!
",stephentalley,2015-06-19 01:12:17
270,2015-06-19 01:12:17,"Thanks for the suggestion, but it's not the responsibility of fzf and should be done by a separate filter. Trying to implement such behavior in fzf is non-trivial and it's not in accordance to the unix philosophy.

We both know `uniq` doesn't work here as it is for sorted input, and I don't know if there's a pre-existing unix filter for the purpose, but it's trivial to write one using any scripting language. For example, with Ruby,

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",junegunn,2015-06-19 01:12:17
270,2015-06-19 15:42:30,"Thanks, that's a fair assessment.
",stephentalley,2015-06-19 01:12:17
270,2015-06-21 15:32:06,"Great to see that you don't accept too many features so that the thing doesn't get too complicated to maintain (I guess it's already quite big)
",edi9999,2015-06-19 01:12:17
270,2017-03-09 22:33:49,"I understand why you can't use `uniq` to solve the original problem, but I solved a similar problem using `uniq` and thought I could share my solution with you people. I use `fzf`'s `ctrl-r` command a lot to, for instance, obsessively issue the command to update my vim plugins, as you can see in the image below.

![image](https://cloud.githubusercontent.com/assets/2940362/23773386/fb1ed450-04ec-11e7-941f-c42ce2a0070e.png)

I didn't want to see repeated commands anymore, and changing the definition of `ctrl-r` in `key-bindings.bash` solves this issue. The only change is on the line `HISTTIMEFORMAT= history |`, which becomes `HISTTIMEFORMAT= history | sort -k 2 | uniq -f 1 |`. I copy the new version below:

<S_CODE_TOKEN>",rafaeln,2015-06-19 01:12:17
270,2017-03-10 22:29:23,"There also is nauniq (it is non adjacent uniq, eg it can uniq without the input being sorted).

I use it like this : https://github.com/junegunn/fzf/issues/600#issuecomment-227135066",edi9999,2015-06-19 01:12:17
269,2015-06-18 18:33:43,"How can I manage this setting with Neobundle ? Is there any way for this to handle the following setting via NeoBundle ?

<S_CODE_TOKEN>
",collegeimprovements,2015-06-19 03:30:23
269,2015-06-19 00:00:52,"I don't use NeoBundle so I have no idea. But it should be definitely possible. I believe the manual page of it should have enough information for you.
",junegunn,2015-06-19 03:30:23
269,2015-06-19 00:13:04,"Thanks. I'll find it out.
I have one more question. Can we toggle(enable/disable) fzf from zsh?
Sometimes I find zsh-tab-completion more intuitive. Is there anyway to do so ?
",collegeimprovements,2015-06-19 03:30:23
269,2015-06-19 00:59:39,"What do you mean? fzf does not override tab completion.
",junegunn,2015-06-19 03:30:23
269,2015-06-19 01:43:54,"No. No. 
fzf is working as expected and it's super awesome. I'm just wondering if there is a way to disable it and reenable it with some command!
",collegeimprovements,2015-06-19 03:30:23
269,2015-06-19 03:30:23,"You mean you want to toggle between the default tab completion of zsh and fuzzy completion of fzf that doesn't require trigger sequence (`**`) ? I haven't tried, but I don't think it'd be impossible. But I think it's better to just assign a dedicated key for fuzzy completion (w/o trigger sequence) as described in the following link.
https://github.com/junegunn/fzf/wiki/Fuzzy-completion#dedicated-completion-key
",junegunn,2015-06-19 03:30:23
269,2015-06-19 05:31:12,"Thanks :)
",collegeimprovements,2015-06-19 03:30:23
268,2015-06-17 10:44:10,"I think it's worth sharing knowledge about alternative implementations, similar solutions. This is basically a copy-paste from [percol's README](https://github.com/mooz/percol#related-projects).
",balta2ar,2015-06-17 11:11:53
268,2015-06-17 11:11:53,"Thanks but I think we should put this on a wiki page instead, so that anyone can edit. Besides these alternative projects that are similar to fzf, there are also projects that tackle a subset of problems with different approaches (e.g. pathpicker), and there are projects that depend on fzf. It would be nice to list them on a single wiki page.
",junegunn,2015-06-17 11:11:53
268,2015-06-17 11:37:37,"How about moving it to the wiki but adding a link to it in Related projects section of the README? Like you did in Examples section. After all, it's convenient to have links to other parts of the project in the README.
",balta2ar,2015-06-17 11:11:53
268,2015-06-17 12:53:30,"That's okay, but I don't want to talk about other projects in the README page, especially the ones that are not directly related to fzf, it feels too ""meta"".
",junegunn,2015-06-17 11:11:53
267,2015-06-16 10:01:31,"Hi Junegunn,
thanks again for this great tool.

I just want to share use case that I find extremely useful for me: I use fzf for shell bookmarks. I was looking for shell bookmarking tool for long time and I wasn't satisfied by all of the existing solutions I've found, so after I've came across your fzf, I've got simple yet useful idea: why not just to keep bookmark paths in single file, feed that file to fzf and cd to directory that has been selected. It looks like this:

![cdg demo](http://dmitryfrank.com/_media/articles/cdg_recorded.gif)

If you probably like to put some use cases on readme, here is a short article: [Fuzzy bookmarks for your shell](http://dmitryfrank.com/articles/shell_shortcuts). Maybe it's even worth to add special section to readme, like ""use cases"", and fill it with links to some articles? At least, I have another use case, which I plan to write about as well: I use fzf for GUI applications via xterm, I love that. Fzf is such a flexible tool! Thanks.
",dimonomid,2015-06-16 14:30:39
267,2015-06-16 10:13:51,"You might want to look at [z](https://github.com/rupa/z). After I followed advice from [wiki](https://github.com/junegunn/fzf/wiki/Examples) and integrated z with fzf, I can jump into directories almost immediately, plus I don't have to do manual bookkeeping, all the visited paths are saved and are easily filtered out if necessary.
",balta2ar,2015-06-16 14:30:39
267,2015-06-16 10:30:44,"Thanks, I will look into it. As to auto-saved visited paths, it sounds useful but it is separate feature, and it's not mutually exclusive with bookmarks. Personally I'd like to keep my manually-maintained bookmarks list anyway, to make it clear and concise.
",dimonomid,2015-06-16 14:30:39
267,2015-06-16 12:53:00,"I had exactly the same idea! :) Fzf is great to navigate bookmarks! I uploaded my script [here](https://github.com/uvaes/fzf-marks), which just needs to be source from bashrc or zshrc. It's really simple, but super useful. Gif for demo:

![](https://raw.github.com/uvaes/fuzzy-zsh-marks/demo/demo.gif)

Actually, I am waiting for the release of fzf that will add the ""execute"" functionality, which will allow marks to be deleted and jumped to from the same fzf window. Then, only 2 commands will really be necessary: one to list, jump and delete marks, and another one to create a new mark.

Finally, along with the README or the wiki, a good place for such a code could be atweiden/fzf-extras or D630/fzf-contrib. 
",urbainvaes,2015-06-16 14:30:39
267,2015-06-16 14:29:59,"@dimonomid Thanks, I'm glad to hear that you find fzf useful :)
You're welcome to add the link to the article to the wiki page. And like @balta2ar suggested, I also recommend z. I use it all the time, it's especially awesome when integrated with fzf. Haha.

@uvaes That looks pretty handy, thanks for sharing. As for the release of the new version, I'm trying to take some time to test the new features since I've grown tired of finding out obvious bugs just after releasing a new version :tada: :frowning: :weary: You can download prerelease binaries from [here](https://github.com/junegunn/fzf-bin/releases) if you feel like trying out new features in advance.
",junegunn,2015-06-16 14:30:39
267,2015-06-16 14:39:10,"Thanks for the link! I'll try the new feature and let you know if I find any bug. :-)
",urbainvaes,2015-06-16 14:30:39
266,2015-06-16 07:56:36,"Hi! 

First, thank you for this program, it work really well! I was wondering if there was an option to go from the last match to the fist one and conversely? (a kind of circular list, to have a behaviour similar to vim autocompletion).  I noticed that CtrlP does not have that feature either, but I do think that it would be useful in some situations. Any thoughts?
",urbainvaes,2015-06-16 14:17:01
266,2015-06-16 14:14:45,"Thanks for the suggestion. I'm a bit worried about feature-bloat these days, too many options already, but I can see the appeal and it's kind of trivial to implement, so I'll add `--cycle` option.
",junegunn,2015-06-16 14:17:01
266,2015-06-17 10:40:23,"Awesome! That was fast! 
",urbainvaes,2015-06-16 14:17:01
265,2015-06-13 18:31:34,"- Add `execute(...)` action for `--bind` option
- `{}` as the placeholder for the double-quoted string of the current item

<S_CODE_TOKEN>
",junegunn,2015-06-21 14:46:51
265,2015-06-13 19:07:36,"Hey, this would be a super neat feature! Do you need help with this or do you have it implemented already?
",tiziano88,2015-06-21 14:46:51
265,2015-06-13 19:22:03,"I already have prototype implementation, but there are still a few things to be sorted out.
- I'm not yet sure if `execute(...)` is the most pleasing syntax I can imagine :)
- What to do with `--multi`
  - Ignore `--multi` and just run the command for the current line only (I'm leaning towards this)
  - Execute the command multiple times for each selected line
  - Execute the command once with the selected lines concatenated (seems too complicated. separator?)
- The syntax works well for the simple commands like the ones shown above, but it gets nasty when the user becomes too ambitious; commands with nested parens, unbalanced parens, commas, new lines ...
  - Just declare that as the limitation of the option and tell the users to write a wrapper script instead;
    - e.g. `execute(do-something.sh {})`
",junegunn,2015-06-21 14:46:51
265,2015-06-13 20:15:50,"Escaping issue can be greatly simplified if we allow various sets of characters to surround command (a la `:s` of vim) 
- `execute(...)`
- `execute[...]`
- `execute/.../`
- `execute:...:`
- `execute;...;`
- `execute@...@`
- `execute~...~`
- `execute%...%`
- `execute?...?`
",junegunn,2015-06-21 14:46:51
265,2015-06-14 00:14:35,"Good questions; here are my personal thoughts:
- What to do with `--multi`: just run the command for the current line only. For me the main use case of this feature is being in fzf in order to select one or more entries, and having to quickly do something different on one of the entries (e.g. delete history entry, look at the content of a file, etc.); if I am halfway a long multi-entry selection, I would definitely expect the ""side action"" to only apply to the element under the cursor. To be clear: this considers such actions ""secondary"" compared to the ""primary"" action which is the final output of fzf, and as such only the ""primary"" action can be affected by the `--multi` modifier.
- Escaping: I don't have a good answer for this, but I think it would be easier to solve if key bindings must be specified as distinct arguments, e.g. `fzf --bind=ctrl-j:accept --bind=ctrl-k:kill-line --bind='ctrl-d:exec rm {}'` (which I believe could only possibly work here because you are parsing the arguments by hand, since otherwise normally only the last flag would be considered by the standard `flag` package -- but I may be wrong); this way you would basically just rely on normal shell string escaping and consume everything up to the end of the argument itself, and don't have to worry about inventing a new parallel syntax for sub-escaping.
",tiziano88,2015-06-21 14:46:51
265,2015-06-14 03:26:29,"Thanks for the comment. I agree with what you said about `--multi` and this being ""secondary"" action.

>  I think it would be easier to solve if key bindings must be specified as distinct arguments

Yeah, it'll definitely make things much simpler, and I do hate having to come up with an arbitrary syntax, but I also don't like breaking backward compatibility and such limitation of the option may not look consistent with the other options that take comma-separated values.

I think I'm going to push the feature as described above as an experimental feature until I tag the next version. You can try it and give me some feedback. Thanks.
",junegunn,2015-06-21 14:46:51
265,2015-06-14 16:03:47,"A git commit browser:

<S_CODE_TOKEN>
",junegunn,2015-06-21 14:46:51
265,2015-06-14 20:02:46,"Note that you do not necessarily have to break backwards compatibility: AFAICT your option parser already supports both comma-separated options in the same argument (e.g. `fzf --bind=X,Y`) as well as multiple distinct argument for the same option (e.g. `fzf --bind=X --bind=Y`). My suggestion would be to enforce that each exec command needs to be specified in its own argument, and that the command to be executed extends until the end of the argument itself (following existing and well-known shell escaping rules). So for instance you could have `fzf --bind=X,Y --bind='exec Z'`, but not `fzf --bind=X,Y,exec Z` (which would produce an error instead). Note that backwards compatibility is preserved this way, and it would not be too hard to implement given that your option parser is already quite sophisticated (it would be much harder to do with the standard flag package alone).
",tiziano88,2015-06-21 14:46:51
265,2015-06-15 10:47:04,"So it's not backward incompatible in the sense that it doesn't break any existing configuration since `execute` action is not publicly announced yet. I see your point. My viewpoint is that it's _kind of_ backward incompatible since it changes the definition of `--bind` from
- comma-separated list of key:actions pairs
- to comma-separated list of key:actions pairs except for `execute` action which you have to write separately

So the users have to learn about the exception. `execute(...)` notation on the other hand is consistent and does not change the definition of `--bind`, but conversely, users have to learn about that syntax and its alternative notations for avoiding parse errors. In either way, no free lunch. But I'm leaning towards the latter since it feels more consistent especially if, although unlikely, we are going to add more actions with arguments in the future.
",junegunn,2015-06-21 14:46:51
265,2015-06-15 12:32:27,"AFAICT the definition of `--bind` already supports both modes (comma-separated vs. separate args); if you wanted, you could gradually change the API to only support the latter, starting with `--bind` which should have to be on its own, and later on with other options too. The transition should not be too painful as long as you print a meaningful error message saying to separate the options in distinct arguments I think.
Also note that rolling your own escaping function may get really messy if shell variable substitution is added to the mix, e.g. `fzf --bind=""ctrl-m:execute/somethingsomething$VAR/""` and `$VAR` contains `/`.
",tiziano88,2015-06-21 14:46:51
265,2015-06-15 13:00:33,"> Also note that rolling your own escaping function may get really messy if shell variable substitution is added to the mix, e.g. fzf --bind=""ctrl-m:execute/somethingsomething$VAR/"" and $VAR contains /.

Yes, that's a valid point, but if the variable is exported, we can use single quotes since fzf internally executes the command with `sh -c`, so `VAR=""..."" fzf --bind='ctrl-m:execute/somethingsomething$VAR/'` will work regardless of the value of the variable. And if the expression gets really complicated we should probably tell the users to write an external script.

As I mentioned in the earlier comment, another point I like about parens notation is that it allows me to extend the existing actions to have optional arguments in a concise and consistent manner. For example, I prefer `--bind ctrl-j:accept,ctrl-f:page-down(3),ctrl-b:page-up(3)` over `--bind ctrl-j:accept,ctrl-f:page-down:3 --bind ctrl-b:page-up:3`
",junegunn,2015-06-21 14:46:51
265,2015-06-15 13:11:48,"We can also consider providing both methods, 1. concise parens notation, 2. and an alternative notation with which you don't have to worry about parse errors, something like `--bind ctrl-m:execute=COMMAND`
",junegunn,2015-06-21 14:46:51
265,2015-06-15 14:27:32,"Now this **also** works:

<S_CODE_TOKEN>
",junegunn,2015-06-21 14:46:51
265,2015-06-17 09:00:31,"Speaking of `--multi`, here is my thought. You can add `execute-cursor` (or `execute-cursor-line`) action/binding to execute action on the current line only, and `execute-selected` action to execute the action on all the selected/marked lines. This way you leave it up to the user to decide which execute to use.

Another side and off-topic note, or rather a humble request is to keep the number of features in this wonderful piece of software under control. I really appreciate your work here and I absolutely can't live without fzf on a daily basis by now but at the same time I really don't want fzf to become too bloated and complicated. Thanks for the understanding.
",balta2ar,2015-06-21 14:46:51
265,2015-06-17 09:34:07,"@balta2ar Thanks for your feedback. It's ironic that you're requesting (_or simply mentioning_) another feature and at the same time expressing your concern on feature bloat :) But I also feel the same. Actually to my usual standard, fzf is already bloated. I'm thinking about hiding some exotic features from the `--help` output, having them only on man page, so that fzf feels simpler and friendlier to average users.

Regarding your idea on `execute-cursor`, it still leaves us with the question whether we should _also_ support executing the command once for all selected items, e.g. `cat {} > concatenated`. Then why not `cat {2} {1} > {&}`, it's a rabbit hole of never-ending requirements. We should probably just keep it simple and not support it.
",junegunn,2015-06-21 14:46:51
265,2015-06-17 10:02:10,"@junegunn I completely agree, this looks like the case where one can argue on the color of bike shed until the end of times. What comes into my mind is `man find`, specifically `-exec` option which supports both exec per one result and exec once with all results.
",balta2ar,2015-06-21 14:46:51
264,2015-06-13 13:36:59,"To avoid conflict with other neoterm plugins that manage terminals,
prefer named terminals.
",kassio,2015-06-13 15:11:10
264,2015-06-13 14:16:22,"Also remove unnecessary `bd!`.

Instead of use a non-documented behaviour of `:file` command, with named terminal buffers, the `bd!` used to delete the FZF buffer after it's closed will not be required anymore.
",kassio,2015-06-13 15:11:10
264,2015-06-13 14:42:45,"Thanks, but with the patch the name of the buffer is shown with `term://` prefix instead of simple `[FZF]` and I don't think I like it.
![2015-06-13 11 30 17](https://cloud.githubusercontent.com/assets/700826/8144665/56282526-1224-11e5-8657-9a35747c212f.png)
Is there a way to fix this?

> Instead of use a non-documented behaviour of :file command, with named terminal buffers, the bd! used to delete the FZF buffer after it's closed will not be required anymore.

I'm not sure if I follow you here. I'm using `:file` command to change the name of the buffer (`:help :file_f`) and I do not understand how giving `name` to the terminal buffer can be a fix to the problem of superfluous use of `bd!`. @justinmk mentioned that it's a known issue of neovim: see https://github.com/junegunn/fzf/commit/34e5e2dd8200fc2cf4b298cd2d5583f2875c7a70#comments
",junegunn,2015-06-13 15:11:10
264,2015-06-13 14:48:33,"Terminal buffer that is not named `term://...` seems like a bad idea. At least, autocmds looking for `term://` won't work. Not sure of any other specific problems, yet. I advocated for making terminal buffer names readonly.
",justinmk,2015-06-13 15:11:10
264,2015-06-13 15:00:10,"My bad about `:file_f` I have not found the documentation. :blush:

@justinmk just explained for me about the `term://...`, thank you. :smile: 

About the `bd!`, the `name` thing fixes it because `:file` creates another buffer, from `:h :file_f`:

> If the buffer did have a name, that name becomes the |alternate-file| name.  An unlisted buffer is created to hold the old name

So, with `:file [FZF]`, actually you have 2 buffers (one named as `term://...` and named as `[FZF]`), this is why you were needing the `bd!`:

![nvim 2015-06-13 11-54-10](https://cloud.githubusercontent.com/assets/120483/8144761/426bb874-11c3-11e5-93da-0753f7b4a961.png)
",kassio,2015-06-13 15:11:10
264,2015-06-13 15:04:14,"About the visual name, you could add to your plugin something like:

<S_CODE_TOKEN>

And you would have:
![nvim 2015-06-13 12-03-49](https://cloud.githubusercontent.com/assets/120483/8144804/4ae66eb2-11c4-11e5-86b5-99bd407eb578.png)
",kassio,2015-06-13 15:11:10
264,2015-06-13 15:11:13,"@kassio Thanks for the explanation. So, `term://` prefix is the convention that we are going to have to follow, whether I like it or not. Overriding `&statusline` can be an option but people using fancy statusline plugins will not appreciate it. Anyway, I'll merge the PR, thanks!.
",junegunn,2015-06-13 15:11:10
264,2015-06-13 16:08:03,"So far this seems to have fixed the problem I mentioned in another issue where the file is opened in a `[Program exited, press any key to close]` state. I _think_ this makes sense--the `:file [FZF]` command must have triggered something that interally looked like a `:term foo` command. Though the inconsistency is a concern, using `:file` to rename buffers has some weird edge cases in my experience.
",justinmk,2015-06-13 15:11:10
263,2015-06-12 23:05:01,"When I use FZF to open a file in NeoVim, there's a little X/9000 file scanning progress indicator at the bottom of the pane. It counts up very quickly whenever I open the pane, always completes before I can finish typing, and is kind of distracting. I'm certain I wouldn't care if I never saw it again.

Is there a way to disable it?
",jamesgecko,2015-06-13 01:14:03
263,2015-06-13 00:56:55,"> progress indicator at the bottom of the pane

Spinner at the bottem left, right? You could try dimming it down with `--color=spinner:<256 color ansi code>` option, see the man page for the details.

e.g. `(for i in $(seq 1000); do echo $i; sleep 0.1; done) | fzf --color=spinner:233`
",junegunn,2015-06-13 01:14:03
263,2015-06-13 01:13:45,"Excellent. I set the environment variable `FZF_DEFAULT_OPTS` to `--color=spinner:233,info:233`, and everything is gravy. Thank you!
",jamesgecko,2015-06-13 01:14:03
262,2015-06-12 08:36:31,"Just installed the developer beta and fzf is always empty:

<S_CODE_TOKEN>
",firedev,2015-06-12 10:02:25
262,2015-06-12 10:02:25,"Sorry, I have probably messed something up with folders and paths. It is working fine.
",firedev,2015-06-12 10:02:25
262,2015-10-07 17:09:12,"@firedev How did you fix this? Im having the same thing happening.
",seanwash,2015-06-12 10:02:25
262,2015-10-07 17:13:01,"@seanwash 
Do you have $FZF_DEFAULT_COMMAND set?
Do you still get empty list on `ls | fzf`?
",junegunn,2015-06-12 10:02:25
262,2015-10-07 17:16:12,"@junegunn So things seem to be working fine when outside of vim, but inside vim it's an empty list. However, :Tags works just fine. I have another laptop running with fzf + fzf.vim just fine so it's probably a config issue.
",seanwash,2015-06-12 10:02:25
262,2015-10-07 17:18:16,"@seanwash Make sure [this command](https://github.com/seanwash/dotfiles/blob/master/vimrc#L161) works fine. On my other laptop I think I had to reinstall ag after el capitan upgrade.
",junegunn,2015-06-12 10:02:25
262,2015-10-07 17:20:11,"@junegunn That was it. AG wasn't installed on this machine -____- sorry to waste your time! I'm really loving FZF and spreading the word as much as I can!
",seanwash,2015-06-12 10:02:25
262,2015-10-07 17:21:45,"@seanwash No problem!
",junegunn,2015-06-12 10:02:25
261,2015-06-10 01:01:34,"It will be great if fzf could support multiple keys per an action for the bind option.

For example, 
fzf --bind=ctrl-j:accept,ctrl-m:accept,ctrl-k:kill-line
",mhrebenyuk,2015-06-10 12:29:15
261,2015-06-10 01:21:44,"It's already possible. And in this particular case, CTRL-M is mapped to ""accept"" by default, so just by `fzf --bind=ctrl-j:accept,ctrl-k:kill-line` both keys work.
",junegunn,2015-06-10 12:29:15
260,2015-06-09 18:44:06,"Is there a way to set space for keybinding via FZF_DEFAULT_OPTS variable? I tried this in my fish config:
`set -x FZF_DEFAULT_OPTS '--bind ctrl-a:abort, :accept'` and `set -x FZF_DEFAULT_OPTS '--bind ctrl-a:abort,Space:accept'` but it gives me an error.

P.S. I saw code for this and looks like its not hard to be added. Will this pr be appreciated?
",sandric,2015-06-09 18:48:57
260,2015-06-09 18:47:15,"Escaping the space works for me (at least on bash):

<S_CODE_TOKEN>
",junegunn,2015-06-09 18:48:57
260,2015-06-09 18:48:57,"Oh, I forgot trying with escaping, silly me). thx them.
",sandric,2015-06-09 18:48:57
259,2015-06-09 16:12:56,"when in tmux, `fzf-history-widget` doesn't seems to be collecting history commands from .zsh_history, and I can't reproduce on my mac book.
# to reproduce

<S_CODE_TOKEN>

here's inside tmux, or byobu:
(deleted the screenshot)

and here's outside tmux:
![cursor_and__mosh__timfeirg_10-6-10-13___](https://cloud.githubusercontent.com/assets/4319104/8063159/dbfae156-0f05-11e5-9097-5262089d54d7.gif)
",timfeirg,2015-06-11 11:36:18
259,2015-06-09 16:14:53,"CTRL-R simply reads the output of `fc -l 1`. What do you get when you run the command?
",junegunn,2015-06-11 11:36:18
259,2015-06-09 16:17:39,"thanks for the quick response, @junegunn I get the same output from terminal and within tumx
looks like when in tmux, the candidates beyond 1862 were somehow truncated or hidden
",timfeirg,2015-06-11 11:36:18
259,2015-06-09 16:21:42,"That's weird. Can you compare the following two commands?
- `fc -l 1 | fzf --tac`
- `fc -l 1 | fzf-tmux --tac`
",junegunn,2015-06-11 11:36:18
259,2015-06-09 16:26:07,"# within tmux

`fc -l 1 | fzf --tac` list all candidates, everything, 1969 results in total
`fc -l 1 | fzf-tmux --tac` has only 1861 results

# outside tmux

two commands has the exact same output
",timfeirg,2015-06-11 11:36:18
259,2015-06-09 16:30:06,"Thanks. `fzf-tmux` was designed to work just the same as `fzf` when not on tmux, so you don't need to test it w/o tmux.

So for some reason, `fzf-tmux` is not receiving the entire input stream. Do you experience similar problem with other commands as well? Such as `seq 1000000 | fzf-tmux`
",junegunn,2015-06-11 11:36:18
259,2015-06-09 16:33:57,"Just to be sure. Do you have enough free space on your root partition?
",junegunn,2015-06-11 11:36:18
259,2015-06-09 16:37:50,"`seq 1000000 | fzf-tmux` shows 1000000/1000000 results, no truncation.
I think I have enough free space, `df -h` says the following:

<S_CODE_TOKEN>
",timfeirg,2015-06-11 11:36:18
259,2015-06-09 16:44:13,"Hmm, so then it's not about the size of the input and I'm clueless.
When you repeat `fc -l 1 | fzf-tmux --tac`, does it always show the exact 1861 results? Is there anything suspicious with the item 1862 or 1863?
",junegunn,2015-06-11 11:36:18
259,2015-06-09 16:50:58,"so I went into tmux:
1. I ran `fc -l 1 | fzf-tmux --tac`, fzf shows 1862 results, they were just some commands I executed earlier today, but I won't be able to match the most recent ones.
2. I `echo`ed a few more garbages, and then `fc -l 1 | fzf-tmux --tac`, the results list were the same 1862 candidates.
3. I exit tmux and look for command near 1862, I can't decide which command is suspicious, they were just some commands formed by ascii characters.
",timfeirg,2015-06-11 11:36:18
259,2015-06-09 17:23:41,"I can't even reproduce this issue on a different ubuntu 14.04 server using the same version of fzf, it should be something wrong with that specific machine, I'll try to recall if I did something special on my problematic server today during sleep.
",timfeirg,2015-06-11 11:36:18
259,2015-06-11 11:36:18,"I really can't decide what's wrong with that server and how to reproduce anywhere else, so I changed `fzf-tmux` to `fzf` just to be able to continue use `fzf`, it's such a marvelous good tool and I absolutely can't live without it.

If there's anything I can do to continue troubleshooting this issue, please let me know, closing this issue for now.
",timfeirg,2015-06-11 11:36:18
259,2015-06-11 17:57:15,"I see, thanks. Note that the key bindings will not use fzf-tmux when `$FZF_TMUX` is set to `0`.
https://github.com/junegunn/fzf#key-bindings-for-command-line
",junegunn,2015-06-11 11:36:18
258,2015-06-09 14:15:27,"- [x] Changelog
- [x] Update man page
  - ~~`--null`~~
  - `--history`
  - `--history-max`
  - `--cycle`
  - More actions for `--bind`
    - `ignore`, `select-all`, `deselect-all`, `toggle-all`, `previous-history`, `next-history`, `execute`
  - Key synonyms for `--bind` and `--toggle-sort` (not `--expect`)
- [x] Release binaries
- [x] Update install script
- [x] Homebrew (optional)
",junegunn,2015-06-21 16:21:35
258,2015-06-25 20:59:10,"Great ! Congrats on the new release. 
",edi9999,2015-06-21 16:21:35
258,2015-06-26 01:09:25,"Thanks :)
",junegunn,2015-06-21 16:21:35
257,2015-06-08 15:49:57,"It would be great to have an action to select all currently matching results. That action could be bound to some key. And in case you need to select all the results you can just hit one key instead of tabbing one by one the entire list.

Didn't find this feature in docs. Did I miss something?
",lompy,2015-06-09 14:45:00
257,2015-06-09 14:49:11,"Thanks for the suggestion. Added three actions for `--bind`: select-all / deselect-all / toggle-all, which are unbound by default. So now you can write something like this:

<S_CODE_TOKEN>

(or you could put it in your `$FZF_DEFAULT_OPTS`)
I'll update the man page as well when I release 0.9.14.
",junegunn,2015-06-09 14:45:00
257,2015-06-09 15:41:45,"Wow, superfast response! Thanks for great work. Finally can get rid of Unite.vim for `global find -> narrow results -> replace in narrowed` with awesome `Ag` function example.
",lompy,2015-06-09 14:45:00
257,2015-06-18 18:16:46,"Hi, I cloned the git repo today but none of this shortcuts do anything? I pasted the command exactly as you entered. I tried it in a few different terminals but just acts as if I'd just typed fzf -m?

fzf -m --bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all
",Fixles,2015-06-09 14:45:00
257,2015-06-18 23:58:37,"@Fixles I haven't officially released the new version with this feature. You can download the prerelease binary or build from source if it's urgent but I'm planning to release 0.10.0 this weekend.
",junegunn,2015-06-09 14:45:00
257,2015-06-19 01:11:12,"haha ok thanks I can wait a couple of days :)
",Fixles,2015-06-09 14:45:00
256,2015-06-08 06:43:44,"Simplified reader and added a configurable delimiter. Added ""--null"" option to interface.

Not sure I added the help line in the right place. Feel free to fix it yourself.
",dullgiulio,2015-06-08 14:29:53
256,2015-06-08 07:45:22,"Aha, so `ReadString` doesn't suffer the problem of fixed buffer size of 64kb, right? That's nice. Thanks. I'll have to add a test case and update man page before merging it.
",junegunn,2015-06-08 14:29:53
256,2015-06-08 08:12:59,"AFAIK the 64k problem is only in the Scanner. See: http://golang.org/src/bufio/bufio.go#L358 for ReadString implementation. It's similar to what you did.

I also fixed the spacing and period and that made the build fail?
",dullgiulio,2015-06-08 14:29:53
256,2015-06-08 08:28:18,"Probably not. Travis CI build has been flaky due to its reliance on timeouts and tmux send-keys.

EDIT: retried and passed.
",junegunn,2015-06-08 14:29:53
256,2015-06-08 08:29:45,"By the way, can you squash the commits into one? I'll do the rest of the job later in the day or tomorrow.
",junegunn,2015-06-08 14:29:53
256,2015-06-08 12:04:13,"Squashed. Let me know if you need anything more here.
",dullgiulio,2015-06-08 14:29:53
256,2015-06-08 14:30:42,"Merged to master, thanks!
I'll update the man page when I release the next version.
",junegunn,2015-06-08 14:29:53
255,2015-06-08 06:40:02,"Simplified reader and added a configurable delimiter. Added ""--null"" option to interface.

Not sure I added the help line in the right place. Feel free to fix it yourself.
",dullgiulio,2015-06-08 06:41:58
255,2015-06-08 06:41:58,"Committed with wrong identity, will retry.
",dullgiulio,2015-06-08 06:41:58
254,2015-06-08 04:57:02,"Hi,

is there something like a style file where I can change all the fuzzy completions to look the same.
I've setup a few shortcut commands, using fzf-tmux with a few options and I would like the fuzzy completion to behave just like them.

How can I do this?

Thanks a lot.
",m42e,2015-06-08 07:14:41
254,2015-06-08 05:03:26,"`$FZF_DEFAULT_OPTS`. Does this answer your question?
",junegunn,2015-06-08 07:14:41
254,2015-06-08 05:16:31,"theoretically yes, but somehow is seems not to work as expected.

I've set the following options:

<S_CODE_TOKEN>

but it still behaves as before
",m42e,2015-06-08 07:14:41
254,2015-06-08 05:20:25,"May this issue be related to the setup I use?
Cygwin with tmux on Windows.
",m42e,2015-06-08 07:14:41
254,2015-06-08 05:41:40,"- This is a basic question, but did you `export` the variable?
- You may need to restart tmux session after adding the variable to your .bashrc or .zshrc
- Unfortunately, `-h 20%` is an option to `fzf-tmux` script and you can't put it in `$FZF_DEFAULT_OPTS`
  - I would simply define a custom shell function or alias which appends it to `fzf-tmux` like so
  
  <S_CODE_TOKEN>
- (Alas, you're on Windows. Then you're running the old Ruby version instead of the new Go version.)
",junegunn,2015-06-08 07:14:41
254,2015-06-08 07:14:41,"Ok, thanks a lot. It worked after restarting everything. Thanks for your patience and quick response.
",m42e,2015-06-08 07:14:41
253,2015-06-07 16:39:33,"Hi,
thanks for this great tool. I find the shell `ctrl-t` (recursive dir search) invaluable when working on a new project.

However, I'm finding the history search feature hard to get used to so I'd like to selectively disable that one for now. To do that I opened `/usr/local/Cellar/fzf/HEAD/shell/key-bindings.bash` and commented out the line that starts with `bind '""\C-r""`.

Is there a cleaner way to do this?
Thanks!

Here's the usage and configuration details:
- using fzf from shell only, bash 4.3
- OS X 10.10.3
- installed via `brew reinstall --HEAD fzf`
",bruno-,2015-06-14 15:26:11
253,2015-06-07 17:04:04,"How about rebinding the key to the original function after the script is sourced?

<S_CODE_TOKEN>

By the way, it's interesting to hear that you find ctrl-t more useful than ctrl-r. To me it's the opposite.
",junegunn,2015-06-14 15:26:11
253,2015-06-15 11:31:56,"Sorry for not responding to this earlier (while you were super quick to reply).

> How about rebinding the key to the original function after the script is sourced?

This seems a little bit dirty: overriding the override just to get the default back. But it's good to know I'm not missing something.

I guess this customization is a pretty rare request so I guess closing the issue is ok.
",bruno-,2015-06-14 15:26:11
252,2015-06-06 19:31:53,"Assigning to stdin, stdout and stderr is not portable. They're specified
to be macros, and for example musl will not allow such code to be
compiled.

Use dup2 instead.
",dominikh,2015-06-07 05:31:44
252,2015-06-07 02:58:23,"Thanks, then can we use [syscall.Dup2](https://golang.org/pkg/syscall/#Dup2) instead?
",junegunn,2015-06-07 05:31:44
252,2015-06-07 03:18:34,"You tell me. You authored b277f5ae6fe9b263410945796263aa52d95d4ab5 which switched from using syscall.Dup2 to writing a C function instead and I couldn't quite figure out why.
",dominikh,2015-06-07 05:31:44
252,2015-06-07 03:35:38,"Ha, true. I vaguely remembered that I had issues with `syscall.Dup2` (which is probably equivalent to raw `dup2`) but I completely forgot that I actually reverted it in the commit history. I'm noticing that the 32-bit binary built with `dup2` (your patch) on OS X does not run as expected from time to time not showing the list from the default command correctly.
",junegunn,2015-06-07 05:31:44
252,2015-06-07 03:57:55,"Unfortunately I don't have access to OS X and can't debug this issue, although I'm a bit surprised that it only happens from time to time.

How about using newterm instead of initscr? newterm allows one to choose the output and input FILE*, so instead of swapping stdout and stderr, one could simply pass stderr in.
",dominikh,2015-06-07 05:31:44
252,2015-06-07 04:52:48,"I don't have experience with newterm so I can't really say, but I have no objection replacing initscr with newterm if it solves the issue with no side effect.

By the way, actually I don't worry too much about the portability of the source code since fzf is basically distributed as compiled binaries and I build linux binaries with the environment set up with [the attached Dockerfile](https://github.com/junegunn/fzf/blob/master/src/Dockerfile.arch).
",junegunn,2015-06-07 05:31:44
252,2015-06-07 05:00:47,"> By the way, actually I don't worry too much about the portability of the source code since fzf is basically distributed as compiled binaries

No Linux distribution out there will use your binaries, they will compile from source. And some distributions don't use glibc. In fact, that's how I noticed the issue in the first place, becaue fzf wouldn't build for the musl variant of Void Linux.

Using newterm has one ""drawback"". It returns a screen object, which theoretically needs to be freed, to reclaim memory. If you intend the curses package to be used multiple times over the lifetime of the application, Init would have to return a value that tracks the screen, so we can free it later. If the package is only used in the context of ""run it once, let the process exit"", then we don't need to free the screen and can keep the current API. Would you prefer a more robust design or not changing the API?
",dominikh,2015-06-07 05:31:44
252,2015-06-07 05:14:55,"Users can still follow the official instruction and download the binaries by running the install script. Packages from various linux distros are not my concern as I don't use or maintain them :) But the case of void linux sounds like a valid reason to address this.

What do you mean by changing the API, which one? Can you elaborate?
",junegunn,2015-06-07 05:31:44
252,2015-06-07 05:22:42,"> What do you mean by changing the API, which one?

Maybe you meant adding a function to curses package to close the screen object? Fine with me. But it's true that it's unnecessary as fzf is just a standalone program.

By the way, I just realized that the issue with `dup2` I mentioned above is reproducible with 64-bit binary as well.
",junegunn,2015-06-07 05:31:44
252,2015-06-07 05:24:27,"Actually, it probably doesn't matter.

The point was that newterm returns a screen object we need to remember and later free, that is `curses.Close` needs to call `delscreen(obj)`. But I see now that `curses` acts as a singleton already, with a lot of global state (such as `_in`), so I guess you're not concerned with concurrent use of the package and we can just track the screen that way? Then this would be the new patch:

<S_CODE_TOKEN>

If you're happy with that, I'll update the PR.
",dominikh,2015-06-07 05:31:44
252,2015-06-07 05:26:21,"I see. The new patch looks good.
",junegunn,2015-06-07 05:31:44
252,2015-06-07 05:31:17,"I pushed the new version of the patch.
",dominikh,2015-06-07 05:31:44
252,2015-06-07 05:32:23,"Merged, thanks! I wish I'd knew about `newterm` before :)
",junegunn,2015-06-07 05:31:44
252,2015-06-07 05:33:29,"Thanks for merging.
",dominikh,2015-06-07 05:31:44
252,2015-06-07 05:35:28,"No problem. I've always wanted to get rid of the hackery.
",junegunn,2015-06-07 05:31:44
251,2015-06-05 20:53:33,"Is there a feature to navigate through the strings I have just used for my previous search?
",leoi11,2015-06-06 01:52:33
251,2015-06-06 01:52:33,"Nope. Please see #249.
",junegunn,2015-06-06 01:52:33
251,2015-06-13 15:51:41,"Added `--history` option, see the commit message for the details.
",junegunn,2015-06-06 01:52:33
250,2015-06-05 14:42:49,"Maybe add a configuration variable to allow this, which I don't know if it's even possible. This should not be the default.

I think it would be nice to open fzf prompt as soon as I start typing, without having to press ctrl-r. Related SO post (by me): http://stackoverflow.com/questions/30666458/how-to-run-a-function-on-first-keystroke-in-bash-zsh.
",taromero,2016-06-23 16:57:15
250,2015-06-05 15:50:42,"I don't know if it's possible nor have I tried to do it. By the way, in your SO post;

> Specifically I want to run the fzf-tmux function, for which I currently need to press ctrl-r to trigger it.

It's not an accurate description of fzf-tmux.
",junegunn,2016-06-23 16:57:15
250,2015-06-05 16:21:38,"@junegunn thanks, I've just made a s/fzf-tmux/fzf.
",taromero,2016-06-23 16:57:15
249,2015-06-03 15:03:54,"I became quite used to nagivating through my recent search terms when I used CtrlP + Ack/Ag. Is this possible in FZF as well?

Thanks!
",padde,2015-06-13 15:48:48
249,2015-06-03 23:46:58,"No, fzf does not externally store the history of search terms. I'd never really thought about the idea, but I can see how it can be useful in some cases. I'll consider adding the feature in the future releases. We'll have to rebind the keys to make it available then since ctrl-p and ctrl-n are already synonyms to down and up.

<S_CODE_TOKEN>
",junegunn,2015-06-13 15:48:48
249,2015-06-04 11:05:21,"Thanks for your response. I see, so fzf is really lightweight on the Vim side and handles input etc itself? As a heavy Vim user it would be perfect to be able to remap keys via Vim configuration, but I guess that is not an option, right?
",padde,2015-06-13 15:48:48
249,2015-06-04 11:22:04,"Maybe I'm stating the obvious again but you know fzf is not a native vim plugin but a command-line program that happens to ship with a simple vim wrapper. You can set up `$FZF_DEFAULT_OPTS` in your vimrc, but I don't see why one would do that, when one can put it in bashrc or zshrc and consistently use it on your shell and on vim running on it.
",junegunn,2015-06-13 15:48:48
249,2015-06-04 11:23:32,"I see, thanks for your explanation!
",padde,2015-06-13 15:48:48
249,2015-06-13 15:50:41,"I just added `--history HISTORY_FILE_PATH` option. See the commit message for the details. It will be available on 0.9.14, or you can just build the binary from the source now. Thanks for your suggestion!
",junegunn,2015-06-13 15:48:48
249,2015-06-18 13:54:49,"@junegunn thank you! :heart: 
",padde,2015-06-13 15:48:48
249,2015-10-05 14:26:10,"Is it possible to cycle through history with Alt-N, Alt-P in order to keep current Ctrl-N Ctrl-P bindings?
",lompy,2015-06-13 15:48:48
249,2015-10-05 14:29:59,"@lompy Have you tried `--bind alt-n:next-history,alt-p:previous-history`?
",junegunn,2015-06-13 15:48:48
249,2015-10-05 14:37:38,"Yes, should've tried before ask. Thanks!
",lompy,2015-06-13 15:48:48
249,2015-10-05 15:34:03,"Actually no. With this setting a'm losing Ctrl-N Ctrl-P bindings to select match, as they also get bind to history cycling. A'm using Ubuntu with gnome-terminal.
",lompy,2015-06-13 15:48:48
249,2015-10-05 15:37:55,"Hmm, you're right. You have to ""re""-override the keys:

<S_CODE_TOKEN>
",junegunn,2015-06-13 15:48:48
249,2015-10-05 15:40:34,"Yes, tried rebind too. Didn't work for me.
",lompy,2015-06-13 15:48:48
249,2015-10-05 15:44:27,"Works for me.
",junegunn,2015-06-13 15:48:48
249,2015-10-05 15:47:47,"Ok. I will try to figure out what messes with key bindings in my setup.
",lompy,2015-06-13 15:48:48
248,2015-06-02 16:11:38,"<S_CODE_TOKEN>

`bufio.Scanner` has a hard-coded buffer size of 64kb (http://golang.org/pkg/bufio/)
",junegunn,2015-06-02 17:15:13
247,2015-06-01 18:49:55,"Like in Sublime Text. This will be super useful. Especially in (neo)vim.
",langolf,2015-06-02 01:12:03
247,2015-06-02 01:12:03,"I don't use sublime so I'm not sure what exactly you mean, maybe something like this?

https://github.com/dyng/ctrlsf.vim

Anyway, I believe the feature you suggested is beyond the scope of this repository which only provides basic building blocks for more complex features. fzf is a dumb unix filter and vim plugin for it is just a simple wrapper.
",junegunn,2015-06-02 01:12:03
247,2015-06-03 10:42:43,"I think what OP means is to be able to see the file corresponding to the line that is `highlighted` by fzf on the vim window when typing (eg you don't have to press enter to see that buffer, it automatically shows you the file as you type). 

Is they a way to access to the currently highlighted line inside fzf before fzf exits ?
",edi9999,2015-06-02 01:12:03
247,2015-06-03 10:48:47,"Let's not forget that fzf is just a unix filter, an extended version of `grep`. fzf does not know at all if the input is a list of files or processes or urls or whatever.

Having said that, it might be possible with Neovim once it becomes stable. Partly related: https://github.com/junegunn/fzf/issues/216
",junegunn,2015-06-02 01:12:03
247,2015-06-04 16:58:55,"i think this use case does not belong in fzf, but it would be lovely if there were a standardized way to integrate previewing into fzf. for instance i am currently writing https://github.com/dnhgff/vache, which would be even more amazing if it could preview the documentation you are selecting as you filter

maybe fzf can write information about current selection to a standard file and external processes can simply monitor that file for changes and update their own preview ui however they would like
",itcowed,2015-06-02 01:12:03
247,2015-06-04 17:48:10,"@dnhgff 

> maybe fzf can write information about current selection to a standard file and external processes can simply monitor that file for changes and update their own preview ui however they would like

Even if it does, a vim plugin cannot take advantage of it as vim is inherently single-threaded. But as I mentioned above, I believe it's theoretically possible for Neovim to monitor the content of its `:terminal` buffer where fzf runs and trigger some action accordingly, like opening the file on a split for preview or resizing the terminal buffer.
",junegunn,2015-06-02 01:12:03
247,2016-06-30 06:01:07,"This is now (partly) possible with `--preview` option.
",junegunn,2015-06-02 01:12:03
246,2015-06-01 18:38:08,"Hey @junegunn, I'm a big fan of fzf, I was wondering how you recommend using brew's fzf with vim-plug?
",estk,2015-06-02 00:58:06
246,2015-06-02 00:58:06,"I don't recommend using homebrew if your primary use of fzf is on vim. You can tell vim-plug to load homebrew-installed fzf like follows,

<S_CODE_TOKEN>

but then vim-plug does not know how to install/update fzf.

So I'd just let vim-plug install/update/load fzf as follows

<S_CODE_TOKEN>

And you can change the directory with `dir` option.

<S_CODE_TOKEN>
",junegunn,2015-06-02 00:58:06
245,2015-05-30 05:15:35,"![red](https://cloud.githubusercontent.com/assets/700826/7895679/1ad280ba-06d6-11e5-80a8-1fef0857e8e3.png)

<S_CODE_TOKEN>
",junegunn,2015-06-02 17:15:33
245,2015-06-03 10:45:15,"Great :-)
",edi9999,2015-06-02 17:15:33
244,2015-05-29 14:22:29,"I'm trying to get this work: `alias -g F=""| fzf""`

`ps aux F`

However, `fzf` won't start until I hit `^C`.

`alias -g P=""| peco""` works fine.

<S_CODE_TOKEN>

Any ideas?
",raine,2015-05-30 09:27:24
244,2015-05-29 15:34:41,"I'm pretty sure that i have F aliased to | fzf on my machine (using zsh)

Can you list your existing aliases ? 
",edi9999,2015-05-30 09:27:24
244,2015-05-30 03:27:52,"Works for me too.
",junegunn,2015-05-30 09:27:24
244,2015-05-30 09:13:32,"I removed stuff from my zshrc until it started working and it seems the reason is

<S_CODE_TOKEN>

For some reason it breaks any global alias to `""| fzf""`.
",raine,2015-05-30 09:27:24
244,2015-05-30 09:27:24,"Okay, then it's not an issue of fzf. I'll close this.
",junegunn,2015-05-30 09:27:24
243,2015-05-27 14:25:37,"I'm new vim user. I've read the wiki. But, still can't understand how to setup fzf.

What I want to accomplish is similiar to Sublime goto symbol. Refer to http://www.sublimetext.com on slide 5.

Basically, when I start typing filename and use `@` it show function name and I could quickly jump there.

If I just type `@`, it will show all method in current file (or list of heading if its markdown file). Actually, for this I could use https://github.com/tacahiroy/ctrlp-funky

But, looking at fzf performance. I think it will be better implemented using fzf.

Is anyone know how to setup this?

Thanks.. :)
",rawaludin,2015-05-29 05:34:49
243,2015-05-28 02:50:54,"Generate tags using ctags. Then pipe the tags to fzf. 
",justinmk,2015-05-29 05:34:49
243,2015-05-28 03:21:39,"I have created ctags using https://github.com/xolox/vim-easytags. It created a `tags` file on save.

Then I use FZFTags like this example https://github.com/junegunn/fzf/wiki/Examples-(vim)#jump-to-tags

But, It won't showing what I expect.
",rawaludin,2015-05-29 05:34:49
243,2015-05-28 03:31:34,"ctrlp-funky [uses regular expressions for every file type](https://github.com/tacahiroy/ctrlp-funky/tree/master/autoload/ctrlp/funky/ft) it supports, I don't think I quite like the approach. I'd rather use ctags as @justinmk suggested. But for listing functions and stuff in a single file (that's what ctrlp-funky does, right?), performance hardly matters, so fzf won't give you much benefit.

> But, It won't showing what I expect.

You mean it doesn't work? Or you mean it's not equivalent to ctrlp-funky? `:FZFTags` is just a small example that works, and it would require some effort to make it fancier.
",junegunn,2015-05-29 05:34:49
243,2015-05-28 03:47:37,"Thanks for your response @junegunn :)
Yes, i just use your sample `:FZFTags` as is. I'm new to Vim. 
The https://github.com/xolox/vim-easytags plugin allow me to create tag on read and save a file. Here is my conf:

<S_CODE_TOKEN>

But, FZFTags seem to show all my tag. Not limit it to current active file

What I want to have is like this:
![a](https://cloud.githubusercontent.com/assets/1274849/7852392/01ba6e18-0527-11e5-9869-16f0ae049b74.png)

Where I can easily jump to the method. This also allow me to filter the method like this:
![a1](https://cloud.githubusercontent.com/assets/1274849/7852395/09dc02e6-0527-11e5-9c27-8a59f9f8dde2.png)

As a new user in Vim world, I still can't modify your sample `:FZFTags`. Maybe I need to learn some vim scripting to modify your script..
",rawaludin,2015-05-29 05:34:49
243,2015-05-28 03:51:51,"Anyway, here is what I try to achieve.

Goto symbol in current file:
![screen shot 2015-05-28 at 10 49 29 am](https://cloud.githubusercontent.com/assets/1274849/7852408/5811439a-0527-11e5-93ec-ae3ba9d79c27.png)

Goto symbol on fuzzy search to other file:
![screen shot 2015-05-28 at 10 48 53 am](https://cloud.githubusercontent.com/assets/1274849/7852420/6de02466-0527-11e5-9f6d-2bd997a59cce.png)
",rawaludin,2015-05-29 05:34:49
243,2015-05-28 03:53:17,"What does `:echo tagfiles()` say?
",junegunn,2015-05-29 05:34:49
243,2015-05-28 03:56:25,"`[app/controllers/admin/tags', 'app/tags', 'tags', '/User/rahmatawaludin/tags', '/Users/rahmatawaludin/.vimtags']`

The current folder is `app/controller/admin`.
",rawaludin,2015-05-29 05:34:49
243,2015-05-28 03:59:44,"Then changing `join(tagfiles())` to `tagfiles[0]` will do, I think.
",junegunn,2015-05-29 05:34:49
243,2015-05-28 04:12:36,"Yes it show all tags in current file (I modify it to `tagfiles()[0]`). Its shown like this:
![screen shot 2015-05-28 at 11 09 24 am](https://cloud.githubusercontent.com/assets/1274849/7852594/2a45034a-052a-11e5-9230-941b2aa836f3.png)

Is possible to limit it only show functions? I've used https://github.com/majutsushi/tagbar, it could do this:
![screen shot 2015-05-28 at 11 08 50 am](https://cloud.githubusercontent.com/assets/1274849/7852600/50c1e40c-052a-11e5-94d1-11d829105114.png)

I've check it Vim script, maybe because my lack vim scripting skill, can'f find any clue..
",rawaludin,2015-05-29 05:34:49
243,2015-05-28 04:14:29,"Here is another of its feature:
![screen shot 2015-05-28 at 11 13 54 am](https://cloud.githubusercontent.com/assets/1274849/7852624/af6b6ece-052a-11e5-8e3a-e3a8e4110584.png)
",rawaludin,2015-05-29 05:34:49
243,2015-05-28 04:18:57,"I don't think it's related to vimscript skill. You should figure out the format of the tags file and preprocess the content using grep or sed.
",junegunn,2015-05-29 05:34:49
243,2015-05-28 04:20:06,"ah.. ok. I'll learn some format of tags file..
",rawaludin,2015-05-29 05:34:49
243,2015-05-28 04:29:22,"The code for tagbar would be a good place to look for clues...
",justinmk,2015-05-29 05:34:49
243,2015-05-28 04:30:52,"I'm reading this https://github.com/majutsushi/tagbar/blob/master/syntax/tagbar.vim

<S_CODE_TOKEN>

Still learning how to implement the pattern to grep. In this script:

<S_CODE_TOKEN>
",rawaludin,2015-05-29 05:34:49
243,2015-05-29 05:34:47,"You can refer to http://ctags.sourceforge.net/FORMAT
And this should probably work:

<S_CODE_TOKEN>

I suggest that you take some time to learn the basics of unix commands. What you can do with fzf is extremely limited if you don't know how to compose tools.
",junegunn,2015-05-29 05:34:49
243,2015-05-29 09:19:15,"Here's what I use to filter for tags in the current file only:

<S_CODE_TOKEN>
",edi9999,2015-05-29 05:34:49
243,2015-07-13 17:24:18,"I've noticed a bug in this feature, at least if I use the source described in the examples, namely:

<S_CODE_TOKEN>

Suppose my tag files contain multiple classes, and several of them define a method named ""X"". Then if I use the above command to jump to the definition of the method X of the current file, it will instead jump to the definition of the method X of ""some file"" (probably the first one, but not the current file).

I presume this is because the tag sink receives only the name of the method, but the remaining information of the tag files is lost. Ideas on how to fix this?
",acornejo,2015-05-29 05:34:49
243,2015-07-20 02:42:36,"Just to chime in here. It turns out fzf can handle this perfectly by removing the `sed` and `uniq` parts of the pipe and feeding the entire line to fzf, using the `--with-nth=1` to avoid cluttering the fuzy finder. This can be paired with a custom sink function which uses the `ex` command specified on the selected tag to jump to the right location.
",acornejo,2015-05-29 05:34:49
243,2015-07-22 11:18:34,"@junegunn 

I found a small solution (taken from CtrlPBufTag) without creating tagfile (works with current buffer):

<S_CODE_TOKEN>

But go to line I can't realize. maybe you have a solution? (it would be great to display the expression type too like in ctlp). For example:

JSONField | 32 | class

Example usage:

<S_CODE_TOKEN>

![fzf-ctags](https://dl.dropboxusercontent.com/u/5837324/fzfctag.png)

Thanks!
",aliev,2015-05-29 05:34:49
243,2015-07-22 13:28:07,"@aliev 

Here be dragons!

<S_CODE_TOKEN>
",junegunn,2015-05-29 05:34:49
243,2015-07-22 18:04:36,"@junegunn wow! thanks!!!! :)
",aliev,2015-05-29 05:34:49
243,2015-07-22 18:20:43,"For posterity, here is my own solution:

<S_CODE_TOKEN>
",acornejo,2015-05-29 05:34:49
243,2015-07-22 19:31:22,"Awesome job indeed ! I tried to implement it myself but wasn't very successful
",edi9999,2015-05-29 05:34:49
243,2015-07-30 17:08:19,"I realized that `--excmd=pattern` requires `nomagic` and tab character inside the pattern makes it harder to correctly parse the output. `--excmd=number` makes it much simpler. See the updated snippet here:

https://github.com/junegunn/fzf/wiki/Examples-(vim)#jump-to-tags-in-the-current-buffer
",junegunn,2015-05-29 05:34:49
243,2015-09-20 14:20:02,"the _jump to tags in the current buffer_ example is relatively slow then the equivalence in Ctrlp. [Ctrlp BufferTag](https://github.com/kien/ctrlp.vim/blob/master/autoload/ctrlp/buffertag.vim) plugin popup the list instantly while your example above has 1 to 2 seconds delay before the list pops up. I'm not sure if the delay is caused by ctags or somewhat, but the ctrlp plugin also uses ctags. Any idea?
",liujoey,2015-05-29 05:34:49
243,2015-09-20 14:31:35,"@liujoey I've never noticed any delay. One possibility is that you mapped it to some key chord, and there's another mapping with the same prefix and Vim is waiting until it can be sure of your intention. Anyway, check out http://github.com/junegunn/fzf.vim which has a better implementation of the command.
",junegunn,2015-05-29 05:34:49
243,2015-09-22 02:33:30,"thanks. This is great and I wasn't aware that there is a separated plugin for vim. Will check it out tomorrow. Thank you.
",liujoey,2015-05-29 05:34:49
243,2016-02-09 03:03:36,"Would love to see this packaged up in a plugin/wiki - a fzf-goto would be awesome to have, without deciphering this whole thread.
",breerly,2015-05-29 05:34:49
243,2016-02-09 04:30:28,"@breerly Have a look at [fzf.vim project](https://github.com/junegunn/fzf.vim).
",junegunn,2015-05-29 05:34:49
242,2015-05-26 10:46:19,"fixes #241 and the followup of #203 
When looking for the bug I found that whenever CTRL-R is broken, it never entered the `if selected=...`
This change fixes that and covers all cases I could think of. 
",robinro,2015-11-06 00:58:04
242,2015-05-26 14:57:12,"Thanks, but can you explain how this slight adjustment of the code fixes the issue? I don't see anything wrong with the current code (and I can't reproduce the problem in the first place). Is this a known issue of zsh? By the way, you have to change `[ -n $selected ]` to `[ -n ""$selected"" ]`or it will always evaluate to true even when it's empty.

/cc @Tranquility
",junegunn,2015-11-06 00:58:04
242,2015-05-26 15:34:58,"Which version of zsh and tmux are you running? Do you have any zsh plugin that might affect the behavior of fzf?
",junegunn,2015-11-06 00:58:04
242,2015-05-26 20:00:49,"I have a non-trivial zsh setup and didn't have time to test this bug in more detail.
Sourcing the original keybinding didn't fix the bug. Sourcing the modified one did.

The patch corresponds to the change that came out of 5 mins playing around with the zsh-function bound to CTRL-R. I overlooked the missing "", so if your right, the fix is equivalent to removing the outer if. The if for `num` should be enough anyway.

I'll let you know if the bug shows up again when I have more time to spend investigating it.
",robinro,2015-11-06 00:58:04
242,2015-05-26 23:42:47,"The outer if allows you to early-exit the code when fzf is terminated with ctrl-c or esc, but as you mentioned the end result is the same with or without it. But anyway I don't think the code is flawed in itself, and if it somehow causes the problem, then it is likely an issue of zsh (or tmux) and that's why I asked you about the zsh/tmux version you have. I'm not against having workarounds in the code for external/environmental issues, but in this case we seem to have little understanding of the exact situation.
",junegunn,2015-11-06 00:58:04
242,2015-08-11 04:37:40,"I had the same problem and found it was due to git_prompt_short_sha() in my prompt, defined in `oh-my-zsh/lib/git.zsh`. It somehow breaks fzf whenever the pwd is not in a git repo. Simply defining a new function

<S_CODE_TOKEN>

fixed it for me.

Further, using `set -A selected ...` in place of `selected=( ... )` also fixed it independently.
",lyeoh,2015-11-06 00:58:04
242,2015-08-11 08:29:36,"@lyeoh thanks for the suggestion
I also have git_prompt_short_sha defined via oh-my-zsh, so this seems plausible. My issue is, that I'm not able to get the issue reproducibly, inside or outside of repositories. Nevertheless it appeared less often recently and if your suggestion fixes it for you it should be included in my opinion.
",robinro,2015-11-06 00:58:04
242,2015-08-28 15:54:51,"This fix seems to only select the second change in the list? No matter what item I select in the list I always get the same entry unless I change

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

or some other number.

I have a similar situation where I have a function that adds some git information to my prompt and when I remove it the tmux script works however I tried putting command in front as suggested by @lyeoh and it still seems to fail. 
",ajorgensen,2015-11-06 00:58:04
241,2015-05-26 10:43:34,"For me ctrl-r stops working after a couple of uses. This sounds a lot like the bug mentioned after the patch in #203 
",robinro,2015-11-06 00:58:10
240,2015-05-26 06:29:39,"I found the following piece of code for integration fzf and Ag:

function! s:escape(path)
  return substitute(a:path, ' ', '\ ', 'g')
endfunction

function! AgHandler(line)
  let parts = split(a:line, ':')
  let [fn, lno] = parts[0 : 1]
  execute 'e '. s:escape(fn)
  execute lno
  normal! zz
endfunction

command! -nargs=+ Ag call fzf#run({
  \ 'source': 'ag ""<args>""',
  \ 'sink': function('AgHandler'),
  \ 'options': '+m',
  \ 'tmux_height': '40%'
\ })

is it possible to search on the current buffer too?

for example :Ag % search_string

thanks!
",aliev,2015-05-26 17:29:15
240,2015-05-26 08:41:51,"You might want to check out the recent version of the code here:
https://github.com/junegunn/fzf/wiki/Examples-(vim)#narrow-ag-results-within-vim

> is it possible to search on the current buffer too?

Check out the FZFLines example in the wiki page and see if you can adapt it to your needs.
https://github.com/junegunn/fzf/wiki/Examples-(vim)#search-lines-in-all-open-vim-buffers
",junegunn,2015-05-26 17:29:15
240,2015-05-26 08:46:35,"@junegunn thank you very much! one more question: how to implement search for tags, without the tags file as in ctlpbuftag? for example: https://coderwall.com/p/x39gbg/use-ctrlp-s-ctrlpbuftag-to-quickly-jump-to-methods
",aliev,2015-05-26 17:29:15
240,2015-05-26 09:37:34,"Looks like ctrlp.vim generates tags itself though I haven't checked the source. I just updated FZFTags example in the wiki page to generate tags file with simple `ctags -R` command. Maybe it's too simple, but you get the idea, you can use it as the starting point.

https://github.com/junegunn/fzf/wiki/Examples-(vim)#jump-to-tags
",junegunn,2015-05-26 17:29:15
240,2015-06-21 12:27:08,"@junegunn Hey, thanks for the awesome project. I copied the https://github.com/junegunn/fzf/wiki/Examples-(vim)#narrow-ag-results-within-vim (AG results in vim) in my vimrc and 
I tried `:Ag my_pattern` in my directory, the tmux window quickly opens(the pattern has results) and closes down, before I could look through the files. 

The other functions like `FZFMru`, `FZFTags`, `FZFTagFile`, `FZFLines`, just works, wondering what I did wrong, can you please help? 
",vysakh0,2015-05-26 17:29:15
240,2015-06-21 12:43:24,"@vysakh0 Which version do you have? `fzf --version`
",junegunn,2015-05-26 17:29:15
240,2015-06-21 14:56:46,"@junegunn Just updated fzf, it works :) Thanks :+1: 
",vysakh0,2015-05-26 17:29:15
240,2015-06-21 15:24:16,"@junegunn I've another question, hope you won't mind. In Vim, 
- I did `:Ag mypattern`, it returned 4 results, 
- I chose the first result, and fzf window (tmux split) closes, 
- I've to do `:Ag mypattern` again to see the other results. 

Question: How to close the split window(fzf results) only on pressing escape, not on any selection of results? 
",vysakh0,2015-05-26 17:29:15
240,2015-06-21 15:30:43,"I think you could use the new `execute` action (See #265)

However I don't know exactly how to implement it wit vimscript
",edi9999,2015-05-26 17:29:15
240,2015-06-21 15:52:56,"@vysakh0 It's one of the things that bother me, but there's no good solution to it. Since fzf is not a native vim plugin, the level of integration can be suboptimal. If the repository isn't too big so that asynchronous search is not really necessary, it's better to just use `&grepprg`.

<S_CODE_TOKEN>
",junegunn,2015-05-26 17:29:15
240,2015-07-09 02:42:33,"@vysakh0 I updated the ag example to use `--multi` and `--bind ctrl-a:select-all`, so now you can select multiple items (with tab/shift-tab and ctrl-a) and list them in quickfix window. Hope it helps.

https://github.com/junegunn/fzf/wiki/Examples-(vim)#narrow-ag-results-within-vim
",junegunn,2015-05-26 17:29:15
240,2015-07-09 17:37:22,"@junegunn :dancers: thank you :+1: 
",vysakh0,2015-05-26 17:29:15
240,2015-07-10 08:31:26,":+1: 
",sangwook,2015-05-26 17:29:15
239,2015-05-18 13:26:23,"Hi!

I'm using `fzf#run` in my .vimrc because I want to have the tmux split at the top.

<S_CODE_TOKEN>

When using `:FZF` I can use `CTRL-V, CTRL-X` to open splits, but it does not work with `fzf#run`.

Can I get this functionality somehow? Can I pass the `up` option to `:FZF` instead?
",Linuus,2015-06-08 14:39:18
239,2015-05-18 13:40:03,"> Can I pass the up option to :FZF instead?

No, you'll have to create your own `:FZF` command. You can refer to the [existing implementation](https://github.com/junegunn/fzf/blob/master/plugin/fzf.vim#L345-375)—there isn't much to it.
",noahfrederick,2015-06-08 14:39:18
239,2015-05-18 14:38:57,"@noahfrederick Thanks.

@Linuus Yes, I want you to see `:FZF` just as an example implementation using `fzf#run()`. You'll have to write your own command. I know it can be frustrating if you don't know Vimscript well, but it'll pay off in the long run and give you the ultimate flexibility. 

`:FZF` looks at a few global variables that we can omit here. So this will do the trick.

<S_CODE_TOKEN>

Hmm, but I just noted that `up` doesn't work nicely with horizontal splits.
",junegunn,2015-06-08 14:39:18
239,2015-05-18 15:16:03,"@noahfrederick @junegunn Thank you both! I just tried what @junegunn posted and it seems to work great. Yes, I'm not very good at vimscript but I agree this is more flexible :) 
",Linuus,2015-06-08 14:39:18
238,2015-05-17 18:58:16,"any thoughts on adding pageup/pagedown bindings, perhaps with Ctrl-D/Ctrl-U as in vim?

this would be particularly useful to me when using fzf to page through ag results. Using the fuzzy completion I can easily/quickly narrow the results to get all matchines in a file.

However, it is sometimes the case that I still have a lot more results in a single file than I can fit in a single screen, and I have to press Ctrl-J/Ctrl-K repeatedly just to browse through all of them looking for the right match.

PS: I should have mentioned that my keyboard doesn't have pageup/pagedn keys.
",acornejo,2015-05-21 15:17:30
238,2015-05-18 01:46:30,"Yeah, I sometimes miss that too. But key bindings in fzf are set to be readline-compatible and `ctrl-d` and `ctrl-u` conflict with `delete-char` and `unix-line-discard` respectively. Also some users might prefer `ctrl-b` and `ctrl-f` pair. So if we're going to do this, we'll have to provide an option to ""rebind"" any keys and that would require some work.
",junegunn,2015-05-21 15:17:30
238,2015-05-18 03:03:44,"What syntax did you have un mind for rebinding?

Perhaps something like '--rebind ctrl-d=pageup'.

In addition to ctrl-? it would have to support alt-?  modifiers too, but what about ctrl-shift-? or other non typing keys like pause, esc, etc? Or even other modifier keys like cmd and super.

A basic version of the above with only ctrl-[a-z] and alt-[a-z] support seems feasible to do without too many changes, but supporting arbitrary bindings might require more work (haven't looked at the keyboard/terminal handling of fzf in detail to see if it already maps all modifiers).
",acornejo,2015-05-21 15:17:30
238,2015-05-18 03:20:40,"I haven't given enough thought about it yet. I was vaguely thinking about [naming every available action](https://github.com/junegunn/fzf/issues/223#issuecomment-98543849) like in the output of `bind -p` of bash (or `bindkey` from zsh), so it can be something like follows:

`--bindkey ctrl-a:beginning-of-line,ctrl-k:kill-line`

> In addition to ctrl-? it would have to support alt-? modifiers too, but what about ctrl-shift-? or other non typing keys like pause, esc, etc? Or even other modifier keys like cmd and super.

I'll limit the options to the ones allowed for `--expect`: `ctrl-[a-z], alt-[a-z], f[1-4], or any single character`.
",junegunn,2015-05-21 15:17:30
238,2015-05-18 03:27:27,"Absolutely, I meant to exemplify a stringified action with the pageup in my example, although now i realize it could be interpreted as a key too.

Rebinding single typable characters (I.e. [a-z]) seems of very limited use since it interferes with typing/fuzzy-finding, but I guess there is no harm in letting users shoot themselves in the foot.

Are you interested in a pull-request for this feature or is this something you would rather do yourself?
",acornejo,2015-05-21 15:17:30
238,2015-05-18 03:36:33,"You in a hurry? I'd like to take some time and mull over the details of how it should be.
",junegunn,2015-05-21 15:17:30
238,2015-05-18 03:39:09,"Nope, not at all. I just like fzf enough that I am happy to devote some time of my own to making a bit better. I'll wait for you to take a stab at it then. Thanks ;)
",acornejo,2015-05-21 15:17:30
238,2015-05-21 15:17:30,"Hey, `--bind` option is added to 0.9.12.

<S_CODE_TOKEN>
",junegunn,2015-05-21 15:17:30
238,2015-05-21 15:21:47,"Thank you!!!! I'll try it out, this is exactly what I needed.

Btw, I was just thinking about the bindings the other day, and realized a solution to having ctrl-d delete AND pagedown, would be to introduce modes as in vim. Thoughts? 
",acornejo,2015-05-21 15:17:30
238,2015-05-21 15:24:21,"> would be to introduce modes as in vim. Thoughts?

Nope, sorry :) Feels like an overkill for such a short-lived process.
",junegunn,2015-05-21 15:17:30
237,2015-05-16 10:09:46,"Is there a reason someone would want to match the line number from history when using **fzf** with `ctrl-r`? Currently, if i use **fzf** with `ctrl-r` (in **zsh**) and type, for example, `123`, the returned list includes the item number 123 from the history, and may also include the item 12, or 192, containing `3`, etc. I wouldn't need them in the list, personally.
",alexeymuranov,2015-05-16 14:41:34
237,2015-05-16 14:41:34,"https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh#L39

Changing `-n2..,..` to `-n2..` will do. There is no variable to customize the behavior so you'll have to edit the source directly or manage your own version. The reason it is so is that it's not practical to make every aspect of the code configurable so I want the users to see the code as a reference implementation that they can refer to when they want to write their own key bindings. Thanks.
",junegunn,2015-05-16 14:41:34
237,2015-05-16 18:13:09,"Thanks for the explanation.  However, IMO, a sensible default would be not to match the history line number.
",alexeymuranov,2015-05-16 14:41:34
237,2015-05-16 18:32:06,"Okay, but I actually type in the index number to pinpoint the item when there are many very similar entries in the list. I find it especially helpful when in `--extended` search mode, where I can first type in a part of the command, then append a number to greatly narrow down the list. e.g. `git 55`
",junegunn,2015-05-16 14:41:34
236,2015-05-14 10:45:34,"To reproduce:
- type `vim`
- trigger fzf expansion (I have this mapped to <kbd>Ctrl</kbd>+<kbd>P</kbd>)
- hit <kbd>Ctrl</kbd>+<kbd>C</kbd>
- the cursor is now moved to the beginning of the line rather than after the text entered earlier
",tiziano88,2015-05-20 07:19:09
236,2015-05-14 13:50:29,"Hmm, not reproducible for me.
",junegunn,2015-05-20 07:19:09
236,2015-05-20 07:09:55,"@junegunn I can reproduce, `ls **<tab>` then `Ctrl + C` and it will be in column 0 with `ls **` in prompt.
",pigmej,2015-05-20 07:19:09
236,2015-05-20 07:17:46,"@pigmej @tiziano88 Aha, I was unable to reproduce it because I was on tmux, but I can see the prompt garbled when not on tmux. Actually the cursor is not moved to column 0, it just looks like so because `zle redisplay` is skipped. I'll fix it.
",junegunn,2015-05-20 07:19:09
236,2015-05-20 07:19:18,"Should be fixed now. Thanks.
",junegunn,2015-05-20 07:19:09
235,2015-05-14 05:17:28,"This is a feature request. I'd like to have an interactive filter. It would return the current listing on return. Love the tool.
",cdosborn,2015-05-14 05:24:24
235,2015-05-14 05:24:24,"I didn't see the multi-select feature
",cdosborn,2015-05-14 05:24:24
234,2015-05-13 13:57:39,"Hi @junegunn :night_with_stars: ,

I just run into this error today while trying to run `FZF` command on `MacVim`. Here is the error msg :dizzy_face: 

> Error running xterm -T [fzf] -bg ""#141414"" -fg ""#E6E1DC"" -geometry 183x25+0+0 -e bash -ic '/Users/babygau/.fzf/bin/fzf --expected=ctrl-v,ctrl-x,ctrl-m,ctrl-t > /var/folders/kh/hrlrq3cx6fg5kvb1tft8jm900000gn/T/vMy8R1Z/2

Note that, Vim Terminal has no issue at all
",babygau,2015-05-13 15:15:04
234,2015-05-13 14:29:01,"- Does this work on command line?

<S_CODE_TOKEN>
- Can you check if it works when there's no other plugins and settings?

<S_CODE_TOKEN>
- This is not relevant to your issue, but I just updated the vim plugin so that MacVim window is refocused when fzf is closed. So, please update.
",junegunn,2015-05-13 15:15:04
234,2015-05-13 14:49:18,"Thanks @junegunn for your quick reply. My feedback as follows:

> Does this work on command line?

I don't understand what you mean here. If I run `fzf` on terminal, it works. If I run your mentioned script, it says `zsh: command not found: xterm`

> Can you check if it works when there's no other plugins and settings?

It didn't work, I still suffer from the same error :disappointed:

> This is not relevant to your issue, but I just updated the vim plugin so that MacVim window is refocused when fzf is closed. So, please update

With new update, the nagging error has gone, but the plugin is defective. There no pop-up windows for `FZF` 
",babygau,2015-05-13 15:15:04
234,2015-05-13 14:54:14,"> zsh: command not found: xterm

Well, that's the reason. You need to install http://xquartz.macosforge.org/landing/

> With new update, the nagging error has gone, but the plugin is defective. There no pop-up windows for FZF

The update wasn't meant to fix your problem. I just wanted to let you know of it.
",junegunn,2015-05-13 15:15:04
234,2015-05-13 15:15:04,"> Well, that's the reason. You need to install http://xquartz.macosforge.org/landing/

Your suggestion is spot on. I can run `fzf` on `MacVim` now :+1: 

> The update wasn't meant to fix your problem. I just wanted to let you know of it.

Yeah, I also just wanted to let you know anyway :grinning: 

Many thanks @junegunn, cheers :100: 
",babygau,2015-05-13 15:15:04
234,2015-05-13 15:17:22,"Great. Maybe I'll have to mention this requirement somewhere. Thanks.
",junegunn,2015-05-13 15:15:04
234,2015-05-13 15:18:04,"Thank you too :smile: 
",babygau,2015-05-13 15:15:04
234,2015-05-13 15:28:59,"@junegunn 
This could not be an issue, but is there anyway to change cursor background in `fzf`, currently the cursor background is `white` and it looks like a `block cursor`. I just want to turn off cursor highlight so it will look like a `vertical bar cursor`. 
",babygau,2015-05-13 15:15:04
234,2015-05-13 15:37:46,"I don't know. fzf is an ncurses program and I haven't checked if it's possible to customize cursor display on ncurses.
",junegunn,2015-05-13 15:15:04
234,2015-05-13 16:11:32,"Thanks @junegunn,

I found a way to fix it

<S_CODE_TOKEN>

And the background disappeared though I lost the vertical bar cursor.
",babygau,2015-05-13 15:15:04
233,2015-05-11 05:44:40,"Without the quote `""`, the grep will output unwanted results.
For example, in `~/.fzf`:

<S_CODE_TOKEN>
",lazywei,2015-05-11 08:00:29
233,2015-05-11 06:16:58,"Hmm, it works fine on my zsh.

<S_CODE_TOKEN>

Do you know why `^` works differently on your machine? I agree that quoting the pattern is probably a safer choice, but I'd like to know what's really going on. And please update the bash version as well.

EDIT: `setopt extendedglob` was the cause.
",junegunn,2015-05-11 08:00:29
233,2015-05-11 08:18:26,"Fixed in c14aa99. I fixed it myself to update bash code as well. Thanks for the patch!
",junegunn,2015-05-11 08:00:29
233,2015-05-11 08:32:31,"No problem. Thanks for doing that :+1: 
",lazywei,2015-05-11 08:00:29
232,2015-05-10 23:41:40,"This allows for the use case I mentioned in #230 by setting the following env variables:

<S_CODE_TOKEN>

I'm not super happy about the name of `FZF_COMPLETION_KEY`, please do let me know if you have any suggestions, or feel free to go ahead and rename it after merging,
",tiziano88,2015-05-11 04:10:41
232,2015-05-11 02:16:23,"Thanks, I like the idea in general but I don't like that `FZF_COMPLETION_KEY` is zsh only and there's no easy way to apply it on bash in a consistent way. (Note that bind key expression for tab on bash is `""\C-i""` and not `^I`)

So instead of introducing the variable, here's what I would suggest to the users:

<S_CODE_TOKEN>

which I think is clear and not unduly verbose.

By the way, it looks like your PR doesn't seem to handle the prefix-less cases correctly. e.g. `vim <CTRL-P>` / `vim foobar <CTRL-P>`. Can you look into it?
",junegunn,2015-05-11 04:10:41
232,2015-05-11 04:10:41,"Hey, I cherry-picked your commits and fixed the issue with no prefix. So no `FZF_COMPLETION_KEY`, and you'll have to use `bindkey` as described above. What do you think about renaming `fzf-zsh-completion` to `fzf-completion`? `zsh` in the name sounds redundant. Hmm.
",junegunn,2015-05-11 04:10:41
232,2015-05-11 04:12:47,"Okay, renamed it. So it becomes

<S_CODE_TOKEN>
",junegunn,2015-05-11 04:10:41
232,2015-05-11 08:17:31,"Sounds good, thanks for merging.
",tiziano88,2015-05-11 04:10:41
232,2015-05-11 08:23:19,"By the way, you don't use `CTRL-P` on shell? I tried the above for a while and I quickly realized that I was missing the old `CTRL-P`. Anyway, due to the change now we can close #165 which is yet an incomplete effort to extend `CTRL-T`.
",junegunn,2015-05-11 04:10:41
232,2015-05-11 09:26:49,"Did you mean if I use the default `CTRL-P` behaviour in zsh (which AFAICT does nothing useful for me out of the box), or whether I use the `CTRL-P` plugin (or something else)? Anyway, in short, I didn't use `CTRL-P` for anything so far, that's why I wanted to bind it to fzf.
",tiziano88,2015-05-11 04:10:41
232,2015-05-11 09:49:59,"Oh, I see. `CTRL-P` is `previous-history` on bash and I always use it. I didn't know it was unbound by default on zsh. I was just thinking that we should suggest the empty-trigger method above as a way to enhance `CTRL-T` binding fzf provides.
",junegunn,2015-05-11 04:10:41
232,2015-05-11 09:56:54,"TBH I must say in general I don't see the advantage of having to explicitly type a trigger and pressing <kbd>TAB</kbd> as opposed to using a dedicated keybinding. In my case, I think I basically get the `CTRL-T` behaviour for free.
",tiziano88,2015-05-11 04:10:41
232,2015-05-11 13:15:21,"Well, I agree with that. The thing is, writing context-aware key bindings in bash is almost impossible and I had to take advantage of its completion system to implement fuzzy completion. So I was forced to use the `TAB` key, and the trigger sequence to denote the intention of fuzzy completion was necessary. However in zsh, we are not limited to using `TAB` key and the trigger sequence is no longer necessary. I just translated the bash version to zsh for consistency's sake. But considering that no one really switches between zsh and bash, the point is a little moot. Maybe we can rethink the interface for zsh later, but since there's a way to customize the key binding, it's not urgent. By the way in the latest revision `$fzf_default_completion` is set when `completion.zsh` is loaded (it remembers the function that TAB was originally bound to), so I recommend that you use it like follows.

<S_CODE_TOKEN>
",junegunn,2015-05-11 04:10:41
231,2015-05-09 19:16:28,"at least my version of head wants -n1 to only display the first line
",robinro,2015-05-09 19:50:28
231,2015-05-09 19:50:41,"Thanks!
",junegunn,2015-05-09 19:50:28
231,2015-05-09 19:53:12,"Related: http://www.spinics.net/lists/crypto/msg03235.html
",junegunn,2015-05-09 19:50:28
231,2015-05-10 08:43:28,"I have to thank! fzf looks pretty awesome. Coming from command-t in vim I started to use fzf in the shell and it looks pretty good so far (as long as it doesn't break ctrl-r :smile:  )
",robinro,2015-05-09 19:50:28
230,2015-05-09 17:25:43,"Bugs:
- [x] `~USERNAME**<TAB>`
- [x] `~INVALID_USERNAME**<TAB>`
  - nonomatch
- [x] Fall back to default completion
  - Need to see what is currently mapped to `^I`. it may not be `expand-or-complete`
  - `bindkey '^I' | awk '{print $2}'`
- [x] `foo\ bar**<TAB>`
- [x] `setopt vi` resets TAB binding from fzf
  - I can't think of any way to handle this. We'll just have to tell the users about it.
  - https://github.com/junegunn/fzf/wiki/Fuzzy-completion

Enhancements:
- [x] Empty trigger sequence #232
- [x] Custom bindkey #232

<S_CODE_TOKEN>
",junegunn,2015-05-11 16:52:58
230,2015-05-10 23:16:20,"Thanks for all this @junegunn ! Also I think we should add support for configuring a different bound key and having no trigger at all. Specifically, the use case I'd like to support is: start writing a path name, use tab completion as usual up to a certain point, and then use a different shortcut (e.g. <kbd>CTRL</kbd>+<kbd>P</kbd>) to trigger fzf from that point on (without ever typing a specific trigger).
",tiziano88,2015-05-11 16:52:58
229,2015-05-08 15:30:45,,sullyj3,2015-05-08 15:36:52
229,2015-05-08 15:36:57,"Thanks!
",junegunn,2015-05-08 15:36:52
229,2015-05-08 16:06:27,"No problem!
",sullyj3,2015-05-08 15:36:52
228,2015-05-08 06:53:46,"I think it would be good to configure the hosts completion (telnet/ssh) to ignore null hosts (`0.0.0.0`) from `/etc/hosts`, in case people are using them for ad blocking.  I can't see any reason why anyone would use this for anything else and would want them to work in a tool like `fzf`.

Obviously this doesn't apply to `127.0.0.1` since that one actually has lots of valid business cases :)

Sorry for not doing a pull request but I'm lazy to clone just for this.

So I'm suggesting:

`shell/completion.bash:`

<S_CODE_TOKEN>
",lucianf,2015-05-08 09:17:28
228,2015-05-08 09:17:36,"Thanks for the suggestion.
",junegunn,2015-05-08 09:17:28
227,2015-05-07 19:30:47,"Similar to https://github.com/junegunn/fzf/blob/master/shell/completion.bash ... but for zsh!
",tiziano88,2015-05-09 11:25:55
227,2015-05-09 11:25:55,"So, it's done. I'm not a zsh user and I don't know much about it. I only tested these with vanilla zsh. Let me know if you see any issues.

![zsh-fuzzy-completion](https://cloud.githubusercontent.com/assets/700826/7550146/a5e599da-f691-11e4-85a5-02e14c2f1b44.png)
",junegunn,2015-05-09 11:25:55
227,2015-05-09 12:05:31,"Wow that's awesome, I didn't expect you to implement it this quickly! I was actually going to do it myself (I should probably have mentioned that in my original message), but at this point I'll take a look at your version and possibly contribute to it. Thanks a lot!
",tiziano88,2015-05-09 11:25:55
227,2015-05-09 12:12:28,"I pushed a few more commits after closing the issue. Please make sure that you have the latest revision. Thanks!
",junegunn,2015-05-09 11:25:55
227,2015-05-09 13:48:01,"I can't seem to be able to use it yet, as *\* expands to recursive file glob in my configuration, which I also thought is the default (see http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing ). I'll see if there is a way of disabling that (as I would much prefer trigger fzf rather than recursive globbing in general.
",tiziano88,2015-05-09 11:25:55
227,2015-05-09 13:50:35,"Never mind, found the culprit! I had `setopt extended_glob` in my .zshrc, removing that also disabled recursive globbing with **.
",tiziano88,2015-05-09 11:25:55
227,2015-05-09 13:53:30,"Hmm, did it fix the problem? It doesn't seem to matter on my zsh. By the way, did you re-run the install script? Previously `~/.fzf.zsh` was generated with no auto-completion support.
",junegunn,2015-05-09 11:25:55
227,2015-05-09 13:56:58,"I was sourcing `completion.zsh` directly, so I guess re-running the install script is not needed. Anyway you are right, even re-enabling `extended_glob` now does not seem to break fzf any more, so they may not be actually interfering after all... Failing everything else, changing the completion trigger to something other than *\* seems to solve the issue in any case.
",tiziano88,2015-05-09 11:25:55
227,2015-05-09 13:59:14,"Interesting, could you post the output of `setopt`? I'd like to compare it with mine.
",junegunn,2015-05-09 11:25:55
227,2015-05-09 15:29:48,"Sure, here it is:

<S_CODE_TOKEN>

To clarify: it seems that the state of `extendedglob` does not actually affect fzf autocompletion; although I guess the interaction may be subtler than just enabling or disabling the option -- for instance it may only happen when  `extendedglob` is enabled before or after sourcing `completion.zsh`. I'll try some more combinations and report here if I find out anything useful.
",tiziano88,2015-05-09 11:25:55
227,2015-05-09 16:39:40,"Looks like `setopt vi` is the cause of the problem. It resets CTRL-I (tab) binding.

<S_CODE_TOKEN>

So if you source completion.zsh _after_ `setopt vi`, it'll work fine. But it would be better if we could find a more robust way (that doesn't have to override TAB) to handle this.
",junegunn,2015-05-09 11:25:55
227,2015-05-09 16:46:46,"FYI, vi-mode of bash also has a similar problem.
https://github.com/junegunn/fzf#key-bindings-for-command-line
",junegunn,2015-05-09 11:25:55
227,2015-05-14 09:58:29,"After updating to 34e5e2d my zsh completion broke:

<S_CODE_TOKEN>

What additional info can I provide to track the problem?

EDIT: Looks like a conflict with https://github.com/tarruda/zsh-autosuggestions.

I install autosuggestions like this in the end of my zshrc:

<S_CODE_TOKEN>
",balta2ar,2015-05-09 11:25:55
227,2015-05-14 13:48:01,"@balta2ar I have no experience with it. Have you tried swapping the load order of the two?
",junegunn,2015-05-09 11:25:55
227,2015-05-15 10:19:51,"@junegunn Hm, unexpectedly, putting `source ~/.fzf.zsh` after autosuggestions seems to have solved the problem. I'd give it a longer try, though, before concluding it works 100%.
",balta2ar,2015-05-09 11:25:55
227,2015-05-15 11:47:10,"Okay, a problem found. Autosuggestions show the rest of the line in gray, but to turn suggestion into flesh you have options: I usually use Alt-f, Right arrow or Tab. The latter one is the one which does show that error message.
",balta2ar,2015-05-09 11:25:55
227,2015-05-15 13:43:27,"@balta2ar The zsh completion of fzf binds tab key to its completion widget which falls back to the previous widget that was mapped to TAB key. Probably the autosuggest plugin was not written to be compatible with such behavior. Can you look into the issue? I'm not a zsh user and I don't feel like looking into a zsh plugin that I'll never use. Or you can just disable fzf completion (say no to the install script) or bind it to a different key. See: https://github.com/junegunn/fzf/wiki/Fuzzy-completion#dedicated-completion-key
",junegunn,2015-05-09 11:25:55
227,2015-05-15 14:28:32,"@junegunn Thanks, I'll probably stick with disabling autocompletion for a while. Unfortunately, I have zero knowledge of how zsh plugins work, but I'll add problem investigation to my TODO list. Autosuggestions is a nice plugin but as it was mentioned many times in its issues, it requires someone with time and energy to fix all its problems.

Also, could you please expand that Wiki page to describe what value fzf zsh completion adds (maybe more pictures, GIFs or other visual demos of the awesomeness it brings)? Sorry if I sound stupid but I don't quite understand what I am missing here.
",balta2ar,2015-05-09 11:25:55
227,2015-05-15 14:38:43,"@balta2ar What it does is described on the README page.
https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh
You can disable it if you don't find it very useful, there's nothing wrong with that and I have no intention to persuade one to use it.
",junegunn,2015-05-09 11:25:55
227,2016-01-04 02:39:33,"IS this issue solved? @balta2ar ?
",SharkIng,2015-05-09 11:25:55
227,2016-03-31 15:40:38,"> No such widget `autosuggest-fzf-completion-orig'

Probably it is related to https://github.com/zsh-users/zsh-autosuggestions/issues/108 and https://github.com/zsh-users/zsh-autosuggestions/issues/116. Just try to update https://github.com/zsh-users/zsh-autosuggestions. And replace in your `zshrc` file:

<S_CODE_TOKEN>

with:

<S_CODE_TOKEN>

It helped me.
",exAspArk,2015-05-09 11:25:55
227,2016-04-14 14:03:13,"@SharkIng I disabled autosuggestions and get used to living without them.
",balta2ar,2015-05-09 11:25:55
226,2015-05-05 16:19:37,"Fish was hanging up on ctrl_t binding for fish. Not sure why ,but it was the 2>/dev/null that was doing it. Removed it and it works perfectly 
",tactualjota,2015-05-15 21:48:34
226,2015-05-05 16:25:20,"I can't reproduce. Which version of fish are you running? And not suppressing stderr messages from find command can cause visual glitches on fzf. (e.g. trying to traverse directories that you don't have permission for.)
",junegunn,2015-05-15 21:48:34
226,2015-05-05 16:29:30,"I’m using fish, version 2.0.0, it comes with ubuntu 14.04 LTS.

You’re absolutely right, we shouldn’t just keep stderr around, but 
on my machine it hangs the eval (__fzfcmd) -m. History | eval works 
perfectly.

How can I help you with this issue? It may very well be something 
outside fzf!

-Jota

On Tue, 5 May, 2015 at 12:25 PM, Junegunn Choi 
notifications@github.com wrote:

> I can't reproduce. Which version of fish are you running? And not 
> suppressing stderr messages from find command can cause visual 
> glitches on fzf. (e.g. trying to traverse directories that you don't 
> have permission for.)
> 
> —
> Reply to this email directly or view it on GitHub.
",tactualjota,2015-05-15 21:48:34
226,2015-05-05 17:18:02,"Okay, it looks like a bug of fish 2.0. I don't see the problem on fish 2.1.2, but I can reproduce it on fish 2.0.0 and confirmed that your workaround helps. (Also noticed that alt-c has the same issue)

Normally I would just tell the users to upgrade fish and move on but as it's the default version on the latest Ubuntu LTS, I'll probably have to address the issue somehow :(

I'll see what I can do when I get some time.
",junegunn,2015-05-15 21:48:34
226,2015-05-05 17:33:57,"I confirmed that upgrading fish to 2.1.2 on Ubuntu fixes the issue.

https://launchpad.net/~fish-shell/+archive/ubuntu/release-2

<S_CODE_TOKEN>

If we can't come up with a simple workaround, I'll just mention the version requirement on the README page or on the wiki.
",junegunn,2015-05-15 21:48:34
226,2015-05-16 01:01:03,"So there's no good workaround to the problem? I've also tried a few different methods to no avail.
",junegunn,2015-05-15 21:48:34
226,2015-05-16 01:06:56,"This would be a temporary change, that would have to be reset on fish 
2.1.1. I'd rather have good code (i.e: no hacks) and just let fish 
update itself eventually.

Also, when updating fish I ran into a lot of issues. Commands wouldn't 
load, etc. I eventually had to reset my fish installation (and 
configuration files) etc. I've since been running fzf on osx and ubuntu 
without any troubles.

So, given that there is no clear solution and I ended up running into 
more troubles, I've closed the pull request.

---

I'm not trying to replace the find with locate to speed control-T :) If 
I get something working you'll get another pull request one of these days.

Thanks for your efforts. I really like fzf. If you ever need any fish 
shell testing, please let me know.

-Jota

Junegunn Choi wrote:

> So there's no good workaround to the problem? I've also tried a few
> different methods to no avail.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/pull/226#issuecomment-102557652.
",tactualjota,2015-05-15 21:48:34
226,2015-05-16 01:10:01,"Thanks, I completely agree with what you said about hackless code.
",junegunn,2015-05-15 21:48:34
226,2015-05-31 11:01:12,"well, I'm not sure if this is the same issue, but I think I can reproduce on 2.1.2 - just input random characters as command and hit `ctrl-t`, it hangs for a little time mb 3 seconds. Found it through trying it with `ll` command, which behaves similary, which is even more strange..
",sandric,2015-05-15 21:48:34
226,2015-05-31 13:37:35,"well, I need to correct - I don't really know what is the problem, and try to explain:
After typing ctrl-t to open fzf, it hangs up from time to time. It is even look like that its based on how often and how quick I try to open fzf. Really strange bug, and I don't know how to reproduce - I just tried to add `pkill -9 fzf` at beginning of `function __fzf_ctrl_t`, because as I get, when it hangs, process remain in memory, and after terminal 'hang out', `ps -aux | grep fzf` gives me

<S_CODE_TOKEN>

And the number of those hanged out processes equal to times it hanged out.
But this doesn't help..
",sandric,2015-05-15 21:48:34
226,2015-05-31 14:10:39,"@sandric If you're running the latest version of fzf and fish, it's probably an issue of fish. The code for fish support here is [pretty minimal](https://github.com/junegunn/fzf/blob/master/shell/key-bindings.fish), so I don't think there's something terribly wrong with it. Consider reporting the issue to fish guys.
",junegunn,2015-05-15 21:48:34
226,2015-05-31 14:14:49,"ok, thx.
",sandric,2015-05-15 21:48:34
226,2015-05-31 15:22:20,"Btw. I've tried on my machines. Random typing, then ctrl-t. Can't 
reproduce.

I would worry too much. Doesn't seem like a reproducible bug.
-Jota

sandric wrote:

> ok, thx.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/pull/226#issuecomment-107192667.
",tactualjota,2015-05-15 21:48:34
225,2015-05-04 23:03:46,"FZF seems to have some problem if started from startify windows. In particular the split opened by FZF doesn't close when selecting a file and the opened closes as soon as I type something.
Here's simple nvimrc to reproduce

<S_CODE_TOKEN>
### Steps:
1. open nvim without argument
2. in startify window call fzf `:FZF`
3. select a file to open and press enter
4. fzf split isn't closed and file split closes as soon as you press a key
",choco,2015-05-13 17:20:59
225,2015-05-13 15:03:08,"@cHoco,

I suffered from the same issue. `fzf` default `enter` seems to act weird not only with `startify` plugin but with `fzf` itself in `neovim`. My only possibble workaround is to minimize the accident of typing `enter` out of habit by forcing `enter` to open new tab instead of new buffer windows.

<S_CODE_TOKEN>

Hope this help
",babygau,2015-05-13 17:20:59
225,2015-05-13 17:20:59,"I didn't pay attention to this issue at first as I thought it was also caused by a bug of Neovim but it wasn't. Please update and let me know if it doesn't work as expected.
",junegunn,2015-05-13 17:20:59
225,2015-05-13 17:50:02,"Now it almost works! The only difference left now is in vim after opening a file che Startify buffer is closed, instead in neovim the startify buffer is closed but replaced by an empty buffer.
",choco,2015-05-13 17:20:59
225,2015-05-14 04:31:55,"@cHoco Hmm, can you update and try it again?
",junegunn,2015-05-13 17:20:59
225,2015-05-14 06:31:53,"@junegunn 

I just checked. The problem has been fixed. kudos @junegunn :tada: 

Now there's only one nagging #206 left that causing misbehaving `default enter` key in `fzf`. Hope you and @tarruda could fix it one day :sparkles: 
",babygau,2015-05-13 17:20:59
224,2015-05-03 16:48:30,"I would love an option to have the cursor under control at the start of `fzf`. Something like: Move the cursor to index/line number x; move cursor to the top or the bottom. Perhaps this is possible via the Emacs style keybindings, in which case it could be something like `--execute-key-at-start=`.
",D630,2015-05-03 20:57:21
224,2015-05-03 17:04:30,"Yeah, I also considered this, but the problem is that fzf interface is asynchronous. Let's suppose you want to start fzf with its (vertical) cursor on the 10th item, but fzf reads the input stream asynchronously, so it's possible that there aren't 10 items when fzf is started.

<S_CODE_TOKEN>

Maybe we could reduce the complexity by implicitly applying `--sync` option when this is used.
",junegunn,2015-05-03 20:57:21
224,2015-05-03 17:37:29,"And this will naturally lead to another options like `--print-line-number`, `--start-at-index`, or `--start-at-string`, etc. I know you need these stuff for building fzf-fs, which is by far the most sophisticated project based on fzf, and I think it's awesome and very creative, but we can't expand the feature set of fzf endlessly and should draw the line at some point. Maybe what you're trying to accomplish is simply beyond the scope of fzf.
",junegunn,2015-05-03 20:57:21
224,2015-05-03 20:57:21,"Ok,  I see. And yes, it seems to be a bottomless pit...
",D630,2015-05-03 20:57:21
223,2015-05-03 16:47:46,"Could somebody please list all accessible keybindings in `fzf` and give an overview of their mappings?
",D630,2015-05-13 14:43:41
223,2015-05-03 17:00:22,"https://github.com/junegunn/fzf/blob/master/src/terminal.go#L612-L740

Most of the emacs style keybindings I use are implemented in fzf, although CTRL-J and CTRL-K are shadowed by up and down motion. Do you see anything missing?
",junegunn,2015-05-13 14:43:41
223,2015-05-03 20:59:32,"Ah, ok. 

I have identified these ones:

| Key | Function | expect |
| --- | --- | --- |
| AltB | backward-word (r) | alt-b |
| AltF | forward-word (r) | alt-f |
| BTab | if multi: toggle, up-line | ? |
| CtrlA | beginning-of-line (r) | ctrl-a |
| CtrlB | backward-char (r) | ctrl-b |
| CtrlC | quit | ctrl-c |
| CtrlD | delete-char (r) && end-of-file (r)/quit | ctrl-d |
| CtrlE | end-of-line (r) | ctrl-e |
| CtrlF | forward-char (r) | ctrl-f |
| CtrlG | quit | ctrl-c |
| CtrlJ | down-line | ctrl-j |
| CtrlK | up-line | ctrl-k |
| CtrlL | redraw | ctrl-l |
| CtrlM | accept-line (r) | ctrl-m |
| CtrlN | down-line | ctrl-n |
| CtrlP | up-line | ctrl-p |
| CtrlQ | quit | ctrl-c |
| CtrlU | unix-line-discard (r) | ctrl-u |
| CtrlW | unix-word-rubout (r) | ctrl-w |
| CtrlY | yank (r) | ctrl-y |
| ESC | quit | na |
| PgDn | down-page | na |
| PgUp | up-page | na |
| Tab | if multi: toggle, down-line | ctrl-i |

And these here not:

| Del | delete-char (r) | ctrl-h (?) |
AltD
AltBS
CtrlH
Rune
",D630,2015-05-13 14:43:41
223,2015-05-03 21:01:26,"And the kill ring has only one index, I guess (?)
",D630,2015-05-13 14:43:41
223,2015-05-04 04:20:55,"Thanks for the summary.

| Key | Function (`bind -p` output) |
| --- | --- |
| AltD | kill-word |
| AltBS | backward-kill-word |
| CtrlH | backward-delete-char (equivalent to BS) |

(""Rune"" in the switch statement is not the name of a key but denoting a normal character)

As you have noticed, currently not all keys can be used with `--expect` option. Maybe I'll try to cover more on the next release.

> And the kill ring has only one index, I guess (?)

Correct. I thought it would be an overkill to implement full readline compatibility, and I still think so.
",junegunn,2015-05-13 14:43:41
223,2015-05-08 13:20:24,"Ok. cool
",D630,2015-05-13 14:43:41
223,2015-05-19 20:39:30,"@junegunn is there any easy way to have `Ctrl+K` not for ""up"" action but for `kill-line` (emacs function name) ?
",pigmej,2015-05-13 14:43:41
223,2015-05-19 23:50:22,"@pigmej Not currently. It will be possible when #238 is sorted out. By the way, do you frequently need `ctrl-k`? For me `ctrl-u` and `ctrl-w` almost always suffice.
",junegunn,2015-05-13 14:43:41
223,2015-05-21 15:19:45,"@pigmej `--bind` option is now added to 0.9.12. You can use it like follows:

<S_CODE_TOKEN>
",junegunn,2015-05-13 14:43:41
223,2015-05-21 15:51:44,"@junegunn cool,

About your last question, it seems that I use `crtl+k` more than I even expected ;-) Usually for delete to the end of the line.
",pigmej,2015-05-13 14:43:41
222,2015-05-02 15:11:51,"Is it possible to insert an enter key stroke after fzf returns with a single candidate in bash completion?
I am thinking about the case where the completed word is the last word on a command line, such that the next ting the user will do is to accept and execute the command by pressing enter.

Usually in bash completion when you press tab and there is only a single candidate, it will insert the candidate directly as replacement for the current word on the command line. Then, if this is the last possible word on the command line, you would press enter to accept. It is ok and correct to have to confirm with pressing the enter key in this case. 

However, when I use fzf to select a candidate, I first press enter first to select the candidate in fzf, but when returning to the command line, I have to press enter again to execute the command. It feels like I have to accept the same candidate twice.. And it is distracting my workflow..

I am not say that this should be the general behavior; only if the completed word is last on the line, there should be an option to have the command be exectued immediately by pressing enter in fzf..

Any thoughts about this issue?
",hakonhagland,2016-10-08 18:58:14
222,2015-05-02 15:27:07,"Hmm, I don't think the behavior is generally desirable. Take this for example: you want to copy/move several files from different directories to some destination path.
- `mv ~/aaa/**<TAB>`
- `mv ~/aaa/foo/bar/baz ~/bbb/**<TAB>`
- `mv ~/aaa/foo/bar/baz ~/bbb/hello/world`
- `mv ~/aaa/foo/bar/baz ~/bbb/hello/world ~/trash<Enter>`

It's simply not possible to tell if the completed word will be the last argument to the command.
But nothing stops you from customizing/extending the completion code to your liking if you really want, though I'm not sure if it's possible in bash to feed an enter key after completion.
",junegunn,2016-10-08 18:58:14
222,2015-05-02 15:54:48,"Yes I agree that in the general case it not possible and not desirable. But if we consider specific cases, for example if I make my own command and would try to use fzf for command line completion. Then I would have full controll over what is the expected arguments, and whether the completed word will be the last one, when I am calling fzf.. 

So we are looking for a way to feed an enter key into Bash command from a Bash completion function..
",hakonhagland,2016-10-08 18:58:14
222,2015-05-02 16:02:56,"Yes, and maybe we could apply `--expect` option to take another key for telling bash to feed an extra enter key. (if that's possible)
",junegunn,2016-10-08 18:58:14
222,2015-05-02 20:46:04,"seems like running 

<S_CODE_TOKEN>

after fzf returns, is working.. I will do some more testing.
",hakonhagland,2016-10-08 18:58:14
222,2015-12-02 21:53:56,"+1 would be great to have alternate key that I can press that would paste selection followed by newline to shell
",pokey,2016-10-08 18:58:14
222,2015-12-04 13:13:37,"If you just wish fzf to execute the selected command immediately, how about writing a shell script along the lines of dmenu_run? Something along the lines of

#!/bin/sh
sh -c $(ls --color=never -1 --file-type /usr/bin | fzf)

Or another script for opening files:
#!/bin/sh
xdg-open $(fzf)
",Chrysostomus,2016-10-08 18:58:14
222,2016-10-07 21:08:45,"This may not be explicitly related to bash completion, but considering this is the only link that comes up when searching for fzf + automatic carriage return and related, quick reminder to others that you can add a \C-m to the end of your key-bindings to automatically hit enter

Eg:

<S_CODE_TOKEN>

Remember, there are two sections with these bindings defined (depending on whether you use set -o vi).
",ConSeannery,2016-10-08 18:58:14
222,2016-10-08 05:34:09,"@ConSeannery The problem with the approach is that you can no longer edit the command. On zsh it's possible to use `--expect` option to allow the user to dynamically decide which action to take, i.e. `enter` to edit, `ctrl-x` to directly execute (See #477). Unfortunately I couldn't find a way to do the same on bash. One workaround is to add another key binding such as `ctrl-x ctrl-r` to use your suggestion.

<S_CODE_TOKEN>
",junegunn,2016-10-08 18:58:14
221,2015-05-02 06:40:39,"when I try to open a second file the buffer is closed

video: https://dl.dropboxusercontent.com/u/5837324/fzf-neovim-issue.mov
",aliev,2015-05-02 15:07:55
221,2015-05-02 09:50:20,"Similar problem here, but it's not _every_ second file. It's only happens about 1/2 the time, and I can't figure out what the conditions are. Once it fails it fails for the same file all the time. Quite often if I try opening in a tab instead of a split it will open. When that fails if I start a new buffer with `:tabnew` before running FZF it and it will open in that fine. Once it does open I can also go back to to the previous tab and open it fine in that. Also I don't see the error message you're seeing and can't figure out how to get more verbose information about what's going on. I think some message is being thrown or some input being waited for, but I can't see it.
",alerque,2015-05-02 15:07:55
221,2015-05-02 10:01:35,"This looks like a duplicate of #206.
",alerque,2015-05-02 15:07:55
221,2015-05-02 13:54:52,"@alerque 

> I think some message is being thrown or some input being waited for, but I can't see it.

sorry. I see the following kind error

[Program exited, press any key to close]
",aliev,2015-05-02 15:07:55
221,2015-05-02 15:07:55,"Thanks for the report. But we already know that the terminal feature of Neovim is unstable at the moment and fails in some different ways, so there's no need to create more issues. Closing as duplicate.
",junegunn,2015-05-02 15:07:55
220,2015-04-28 14:39:04,"Hi!

I just updated fzf from vim, using vim-plug and got this error:

<S_CODE_TOKEN>

Is this a known issue?
",Linuus,2015-04-28 14:50:23
220,2015-04-28 14:49:28,"Ah, yes, the type of the variable was recently changed. vim-plug reloads the plugin file after update, and in your case the variable was already defined as another type in the session, thus the error. It's a one-time error. But I'll make sure that the other users will not run into it. Thanks.
",junegunn,2015-04-28 14:50:23
220,2015-04-28 14:51:08,"Cool, thanks!
",Linuus,2015-04-28 14:50:23
219,2015-04-28 13:40:08,"fzf already returns the command itself, deleting it and using history expansion seems silly. this is much simpler.
",DanielFGray,2015-04-28 13:48:31
219,2015-04-28 13:48:31,"Thanks, but please see #142, #214
",junegunn,2015-04-28 13:48:31
218,2015-04-28 11:57:03,"Hi there,

Trying to [customize this](https://github.com/junegunn/fzf/blob/master/shell/key-bindings.fish#L35) so that Alt-c starts searching through directories relative to ~ rather than the current directory. Not quite sure how to go about it though... 

Any advice? Thank you!
",ezuk,2015-04-29 14:01:03
218,2015-04-29 14:01:03,"Start from replacing `find .` with `find ~`, the rest is basic shell scripting.
",junegunn,2015-04-29 14:01:03
217,2015-04-27 14:39:45,"Hi,

How about an option to invert the selection, when using fzf with `--multi` interactively?

<S_CODE_TOKEN>

Otherwise one need to workaround it with something like:

<S_CODE_TOKEN>
",D630,2015-04-29 14:19:08
217,2015-04-27 16:07:33,"Like `-v` option of grep? (which should apply even when `--no-multi`)
",junegunn,2015-04-29 14:19:08
217,2015-04-27 16:44:17,"Ja, that would be great! And it could be indicated with a less-than sign (<)...
",D630,2015-04-29 14:19:08
217,2015-04-29 14:19:08,"I've given some thought about it but realized that it's not as trivial as I first imagined and considering the added complexity I think I'm gonna pass on this.
- Given the asynchronous nature of fzf interface, we can finish fzf well before the input stream is complete. (e.g. `locate / | fzf`) The additional code for waiting for its completion is required.
- And then how should the result be sorted? Or should we not sort the result? It's not really straightforward. The new option doesn't seem to play nicely with ranking algorithm.
- `--select-1` and `--exit-0` become very unintuitive and confusing.
- `--filter` will require different code path depending on the option. Sorting is also an issue here.
",junegunn,2015-04-29 14:19:08
217,2015-04-29 17:52:59,"Ok. Thanks
",D630,2015-04-29 14:19:08
216,2015-04-25 09:53:11,"You said in this https://github.com/junegunn/fzf/issues/137#issuecomment-91735586 it might be possible to write an autocmd. I would try to implement this but have no idea how the autocmd could work.
",Tranquility,
216,2015-04-25 14:48:35,"This is what I've tried:

<S_CODE_TOKEN>
- It looks like there's no autocmd fired when the content of the terminal buffer is updated (none of TextChanged, TextChangedI, CursorMoved, CursorMovedI, InsertCharPre works), so I tried with `on_stdout` callback of `termopen()`. I noticed that no data is passed to the callback (`a:000` is an empty array). Is this normal?
- The layout of fzf can differ depending on `--reverse` and `--inline-info` option, so I explicitly disabled them. (While doing this, I realized that `--inline-info` was not immediately displayed on terminal resize, https://github.com/junegunn/fzf/commit/5d9107fd15a5bca3973f8206884ddfa66d47b923 is the fix)
- If you run the above code, you'll notice that the resize does not immediately happen. I could fix it by doing `redraw!` twice after `resize`, but then we see awful flickering of the screen.

@tarruda Is using `on_stdout` a right approach?
",junegunn,
216,2015-04-25 15:59:23,"Thanks for working on this! 
",Tranquility,
216,2015-06-04 19:15:19,"@tarruda could you take a look at this?
",Tranquility,
216,2015-11-23 22:55:42,"sorry I had missed this

> @tarruda Is using on_stdout a right approach?

If I understood correctly, you want the terminal window to have the same height as the number of available lines, right?  If so, then yes, you need to listen for stdout  events. 

I see that your comment is from April. Since that time, the internal architecture of how nvim handles asynchronous events changed dramatically, can you try it again and see if it works?
",tarruda,
216,2015-11-25 13:09:40,"@tarruda thanks for your reply. It does kind of work but there is a problem. 
I created a minimal patch to show the probem:

<S_CODE_TOKEN>

The echo now always shows the state of the line before the ui updated not after. So the on_change is triggered after I press a button but before the interface updates.
",Tranquility,
216,2015-11-29 01:09:51,"@Tranquility Now I see the real issue: nvim does not update the terminal buffer as soon as it receives data. Here's a high-level overview of how it works:
- Nvim receives data from the pty
- Data is fed to libvterm, which immediately updates its internal screen
- At most 10ms later, nvim updates the terminal buffer to reflect libvterm internal screen.

In other words, nvim updates the buffer at most once each 10 milliseconds. This is done because updating buffers is more expensive than simply updating a virtual screen, and if we updated the buffer every time data is received, there could be serious performance problems with programs that send large bursts of output(It is not a premature optimization, I actually noticed these problems while working on neovim/neovim#2076).

A relatively simple workaround is to expose a separate API for accessing libvterm screen state directly. This would allow @junegunn patch to be adapted to use this API to get the number of matches instead of `getline(line('$') - 1)`.
",tarruda,
215,2015-04-24 00:57:12,"On OS X in fish and bash, invoking fzf-tmux directly or through other commands/shell key bindings results in the following:
- An empty tmux pane appears momentarily and then disappears
- The shell does not accept any input until fzf-tmux is killed with `C-c`.

_This only happens when `FZF_DEFAULT_OPTS` is set (to anything)._ To reproduce in fish:

<S_CODE_TOKEN>
# Environment

fzf version:

<S_CODE_TOKEN>

bash version:

<S_CODE_TOKEN>

tmux version:

<S_CODE_TOKEN>
",noahfrederick,2015-04-24 03:55:50
215,2015-04-24 03:12:54,"Can't reproduce. Can you check what's going on by replacing the she-bang line to `#!/bin/bash -x`?
",junegunn,2015-04-24 03:55:50
215,2015-04-24 03:45:05,"Here's the output up until it gets stuck:

<S_CODE_TOKEN>

I think I see the (fish-specific) problem. In the argument to `split-window`: `FZF_DEFAULT_OPTS=--reverse bash /tmp/fzf-args-9528` is not valid fish syntax. It could be changed to `env FZF_DEFAULT_OPTS=--reverse bash /tmp/fzf-args-9528`.

I was mistakenly under the impression that I tried the script under bash, but I was presumably still getting a fish shell when tmux created the new pane.
",noahfrederick,2015-04-24 03:55:50
215,2015-04-24 03:53:23,"Oh I see. Then we can simply prepend `env` as it works on other shells as well.
",junegunn,2015-04-24 03:55:50
215,2015-04-24 03:56:30,"Updated. Let me know if you still see the problem.
",junegunn,2015-04-24 03:55:50
215,2015-04-24 03:58:04,"> Then we can simply prepend env as it works on other shells as well.

Yeah, confirmed this fixes it for me.
",noahfrederick,2015-04-24 03:55:50
214,2015-04-23 13:07:40,"Hi, I have `setopt no_bang_hist` in zsh and when I use the <Ctrl-R> command key, fzf tries to use the !expansion form, which obviously does not work.
",chrisbra,2015-04-23 13:31:33
214,2015-04-23 13:11:33,"Do you think it's possible to temporarily change ""no_bang_hist""? Is there an easy solution? I'm a bash user and have no clue. Hmm.
",junegunn,2015-04-23 13:31:33
214,2015-04-23 13:24:46,"That would be fine for me. 
",chrisbra,2015-04-23 13:31:33
214,2015-04-23 13:28:28,"<S_CODE_TOKEN>

This seems to work.
",junegunn,2015-04-23 13:31:33
214,2015-04-23 13:31:48,"Great and so fast!
",chrisbra,2015-04-23 13:31:33
214,2015-04-23 13:31:56,"Okay, I just pushed a fix. Let me know if you see any issues. Thanks!
",junegunn,2015-04-23 13:31:33
213,2015-04-23 08:30:19,"Regular vim gives me this, then opens the file but the view is all messed up.

<S_CODE_TOKEN>

Neovim on the other hand explodes

![](http://s3.brnbw.com/Screen-Shot-2015-04-23-10-23-56.png)
",mikker,2015-04-23 11:25:20
213,2015-04-23 10:34:16,"The above two commits should fix the issues on Vim. I couldn't, however, reproduce the issue on Neovim in the first place, so I'm not sure if it helps or not. Could you update and try again?
",junegunn,2015-04-23 11:25:20
213,2015-04-23 11:25:14,"Whatever it was it seems resolved in both vim and neovim. You're the best :pray: 
",mikker,2015-04-23 11:25:20
212,2015-04-22 18:41:37,"The following comes from my .vimrc and it works well for me. Note that I had never used xterm before installing fzf—I even didn’t know that it was installed on my system! So there is a risk that the following might conflict with a user’s xterm configuration. I don’t know.

<S_CODE_TOKEN>
- Sets the title to “fzf” instead of “bash”.
- Uses the same background and foreground colors as your vim theme. (Default for me was black text on white background.)
- Uses the same font family and font size as is used in vim. (On my system, by default xterm tries to load some non-existing font and falls back on a super ugly one, and the default font size is a bit too small to be useful.)

Even better, if this could be interpolated before each run we’d get a nice placement of it too (and if you change theme or font during the session that will be reflected as well):

<S_CODE_TOKEN>

Do you think any of this could be used by default in fzf? Since it is all very general and just mimics the user’s own vim customizations I think it could work out.

If not, I’d like to ask for support to pass a function to fzf to produce the launcher command. Then I’ll also add this to the wiki.

Edit: Here’s a more readable version:

<S_CODE_TOKEN>
",lydell,2015-04-24 03:48:53
212,2015-04-23 03:43:25,"Thanks, that looks pretty cool. Actually since I'm always on terminal, I haven't been able to pay enough attention to this ""launcher"" thing.

I tried your solution on MacVim and noticed that I had to change it a little to extract the right font size as on MacVim `getfontname()` returns something like `Menlo Regular:h11`. So I had to split it with `[: ]` and strip `h` from the last part. And even when the number is correctly extracted, the font on xterm looks larger than that on MacVim. I don't know why but since I don't use GVim, I didn't further look into it :)

Although I like what you did here, providing the right default that works on different platforms is a hard thing to do, so I think we should just allow function references as `launcher` option and put you solution on the wiki page.

However, there's an annoying issue with Funcrefs as `g:fzf_launcher`.

<S_CODE_TOKEN>

And we get `E704: Funcref variable name must start with a capital: g:fzf_launcher`. So we may have to add another variable `g:Fzf_launcher`. (We can pass a funcref directly to `fzf#run()` function as in `call fzf#run({'launcher': function('Foo')})`, but then we'll have to pass it to every call to `fzf#run()`.) I'll let you know of the progress.

By the way, did you find a way to refocus Vim window after fzf is closed? On OS X, it is [possible with AppleScript](https://github.com/junegunn/fzf/wiki/On-MacVim-with-iTerm2) (a nice trick by @gleachkr), but I'm not sure if there's a similar trick that works on different platforms.
",junegunn,2015-04-24 03:48:53
212,2015-04-23 13:34:29,"You can use `g:Fzf_launcher` now.
",junegunn,2015-04-24 03:48:53
212,2015-04-23 18:33:58,"> I had to change it a little to extract the right font size as on MacVim getfontname() returns something like Menlo Regular:h11. So I had to split it with [: ] and strip h from the last part.

`:help getfontname()` says that the function in question returns the font used by the `hl-Normal` highlighting group. `:help highlight-font` tells that this is platform dependent and that it is potentially very difficult to parse on X11.

Moreover, it seems like as long as I include `-fa ""$x""` where `$x` is anything but the empty string, the system default monospace font is used, which is also the font I use in gvim. So that just happened to work for me.

There is also an `-fn` switch that seems to accept the name of a font family, but no matter what I pass in xterm always that it could not be found.

> And even when the number is correctly extracted, the font on xterm looks larger than that on MacVim.

`-fs 10` seems to work as expected for me though: A lower number makes the text smaller, and a larger number makes it bigger. `-fs 10` makes it exactly the same size as in gvim. Don’t know why it didn’t work for you.

> Although I like what you did here, providing the right default that works on different platforms is a hard thing to do, so I think we should just allow function references as launcher option and put you solution on the wiki page.

Yes, your tests in MacVim and the start of this comment clearly shows that—at least for the font stuff. But what about the `-T fzf`, the colors and the sizing?
- `-T fzf` seems harmless, and actually helps when you have many terminal windows open.
- Colors + sizing makes it feel like fzf was opened in a split at the top of vim, which many have requested.

In other words, I propose the following as a default `g:Fzf_launcher`:

<S_CODE_TOKEN>

When we have settled on this I’ll look into adding tips to the wiki.

> By the way, did you find a way to refocus Vim window after fzf is closed?

On Ubuntu and Trisquel gvim is refocused automatically by default when fzf is closed.

> You can use g:Fzf_launcher now.

Great! Thanks!
",lydell,2015-04-24 03:48:53
212,2015-04-24 03:48:52,"I updated the default launcher as you proposed. Thanks!
",junegunn,2015-04-24 03:48:53
211,2015-04-22 18:09:14,"I have the following alias `fzf='fzf --no-color'`.

When I run `$ fzf` no problems. However, when i try `$ ssh**<Tab>` I get colored results (my alias is ignored). I'm looking through `fzf/shell/completion.bash` to figure out what might be the cause. I thought I might be able to get a faster answer here.

**Note:** I edited my config so that a different file other than my ~/.bashrc would be sourced. However, it doesn't seem to be relevant because I'm getting the completion.
",cdosborn,2015-04-23 00:11:11
211,2015-04-22 18:28:52,"I realized I didn't read far enough into the instructions.
`export FZF_COMPLETION_OPTS='--no-color'` worked for me.

Would the project be interested in a pull request, s.t. these settings only have to be defined in one place? Right now an alias has to be set for fzf, along with the env. vars.
",cdosborn,2015-04-23 00:11:11
211,2015-04-22 18:48:13,"> Right now an alias has to be set for fzf

You don't need an alias to provide default options. That's what `FZF_COMPLETION_OPTS` is for—unless I've misunderstood your use case.
",noahfrederick,2015-04-23 00:11:11
211,2015-04-22 20:59:30,"If I don't set the alias, then `$ fzf` displays with color. i.e.

<S_CODE_TOKEN>
",cdosborn,2015-04-23 00:11:11
211,2015-04-22 21:07:01,"I confused `FZF_COMPLETION_OPTS` with `FZF_DEFAULT_OPTS`. The latter is what I was thinking of. I don't know what `FZF_COMPLETION_OPTS` is.
",noahfrederick,2015-04-23 00:11:11
211,2015-04-22 21:09:25,"Okay, thanks. That works.
",cdosborn,2015-04-23 00:11:11
211,2015-04-23 00:11:11,"`FZF_DEFAULT_OPTS` is built in to the binary (you can see it on `--help`) and applied regardless of the context. `FZF_COMPLETION_OPTS` is an extra set of options that is applied _in addition to_ `FZF_DEFAULT_OPTS` for those who want to use different options just during bash completion.
",junegunn,2015-04-23 00:11:11
210,2015-04-22 06:05:54,"I have few files ignored in `.agignore`. These files are correctly ignored when I run `ag -l -g """" | fz`.  

But this does not work when I run `Ctrl-T`. I checked 

<S_CODE_TOKEN>

ag --v: ag version 0.15pre
fzf --version: 0.9.10

(In this gif, I'm searching for tmp directory which does not appear as expected first time but not when run with Ctrl-T)

![ezgif com-video-to-gif 1](https://cloud.githubusercontent.com/assets/1475197/7268451/409ceaa4-e8e7-11e4-8c0c-005a82db68e8.gif)

Please, help me where I'm wrong. 
",vysakh0,2015-04-22 07:16:52
210,2015-04-22 07:16:52,"This is essentially the same question as #40 and I haven't decided how it should be handled. `CTRL-T` does not see `FZF_DEFAULT_COMMAND` and as you can see in my comments in the issue, I'm not sure if it should. (If you use `ag` for `CTRL-T`, it will not list directories) So currently there's no way to customize the behaviors of the key bindings and you'll have to write your own version based on the default implementation.

Closing as duplicate of #40. Thanks.
",junegunn,2015-04-22 07:16:52
209,2015-04-21 13:07:39,"<S_CODE_TOKEN>
- Backspace
- D
",junegunn,2015-04-21 13:10:27
208,2015-04-21 09:16:24,"If my list is:

<S_CODE_TOKEN>

then the query `'foo 'Bar` will not match, but I would expect it to match (because I see the first word `foo` as being case insensitive). 

I think that it would probably require lots of work to do it, so I don't think the issue will be adressed, but maybe It's not that difficult.
",edi9999,2015-04-21 13:18:16
208,2015-04-21 10:12:44,"Well, that makes perfect sense. It's actually one of things that I forgot to address when I rewrote fzf in Go :)
",junegunn,2015-04-21 13:18:16
208,2015-04-21 14:38:56,"Fixed in master. I'll release fzf 0.9.11 after a couple more fixes/improvements.
",junegunn,2015-04-21 13:18:16
208,2015-04-21 15:54:47,"Awesome. Thanks
",edi9999,2015-04-21 13:18:16
207,2015-04-20 20:49:52,"Using the latest fzf and NeoVim, sometimes `:FZF` causes NeoVim to crash with the following error:

<S_CODE_TOKEN>

Happy to provide more info if you have any debugging steps you'd like me to follow.
",adambiggs,2015-09-20 09:13:36
207,2015-04-20 21:56:28,"segfaults in nvim are always a bug in nvim. If you could provide a stacktrace to the Neovim issue tracker, it's often straightforward to fix, and much appreciated.

https://github.com/neovim/neovim/wiki/Development-tips#core-dumps
",justinmk,2015-09-20 09:13:36
207,2015-04-21 20:18:59,"Hmm, so far I can't seem to reproduce this anymore... I'll report back if it shows up again.
",adambiggs,2015-09-20 09:13:36
207,2015-04-21 22:56:12,"I just ran into this again. Seems like it happened when I invoked `:FZF` and then quickly started typing search terms. Here's the backtrace I got from the core dump:

<S_CODE_TOKEN>
",adambiggs,2015-09-20 09:13:36
207,2015-05-15 17:37:47,"@tarruda I just rebuild NeoVim today and I now get the above segfault every time I invoke `:FZF`... Unfortunately I might have to switch back to CtrlP or Unite for now :cry: 
",adambiggs,2015-09-20 09:13:36
207,2015-05-16 00:33:18,"@adambiggs Can you provide a backtrace of the crashed program?

> @tarruda I just rebuild NeoVim today and I now get the above segfault every time I invoke :FZF... Unfortunately I might have to switch back to CtrlP or Unite for now :cry:

I know this is inconvenient and I'm doing my best to fix some infrastructure problems(neovim/neovim#2371) which I believe will make many parts of nvim more stable, including the builtin terminal emulator
",tarruda,2015-09-20 09:13:36
207,2015-05-16 00:58:22,"@adambiggs And you're running the latest version of the plugin? I'm curious if the `redraw!` workaround affects the symptom.
",junegunn,2015-09-20 09:13:36
207,2015-05-19 15:16:07,"@tarruda the backtrace looked the same as [the one I posted earlier](https://github.com/junegunn/fzf/issues/207#issuecomment-94966323).

@junegunn I was running the latest version of NeoVim & FZF when I posted.

Let me know if there's any other debugging steps that would be helpful.
",adambiggs,2015-09-20 09:13:36
207,2015-05-20 01:49:52,"> @tarruda the backtrace looked the same as the one I posted earlier.

That backtrace only has one frame, even when the stack is smashed there usually is some ?? entries. Can you show the full backtrace?
",tarruda,2015-09-20 09:13:36
207,2015-05-20 17:12:12,"Sorry, this is my first experience generating a backtrace like this...

I followed the [instructions](https://github.com/neovim/neovim/wiki/Development-tips#core-dumps) posted by @justinmk, but I had to modify the command slightly to get it to work... Maybe I screwed something up in the process.

I found that after running `ulimit -c unlimited`, the core dump showed up at `/cores/core.1234`, so I used the following to get a backtrace:

<S_CODE_TOKEN>

FYI I'm on OSX 10.10.3 running NeoVim in Tmux 2.0.
",adambiggs,2015-09-20 09:13:36
207,2015-07-22 12:22:33,"@adambiggs I expirienced the same issue and I think I solved it (hasn't crashed in 30 minutes) by updating libtermkey-bzr and libvterm-bzr. Maybe this helps.
",rtwo,2015-09-20 09:13:36
207,2015-07-28 16:35:50,"@rtwo how did you update those dependencies? I have NeoVim installed in OSX via Homebrew.
",adambiggs,2015-09-20 09:13:36
207,2015-08-03 17:37:59,"@adambiggs no Idea on how to do it with homebrew, but it also didn't really fix the issue for me anyway.
",rtwo,2015-09-20 09:13:36
207,2015-08-05 00:25:25,"FWIW, I've updated those dependencies as well as Neovim itself, and the crashes have gone away for me. I'm running on Linux though so things may be different.
",nathan-hoad,2015-09-20 09:13:36
207,2015-08-13 23:02:01,"I'm able to pretty consistently produce a segfault and core dump in neovim + fzf with the following steps:

`nvim somefile.txt  # only seems to happen if I open a file, just running`nvim`and never opening a file I can't reproduce`

`:FZF<CR>`

at some point, either while fzf is still gathering candidates or after it's finished (doesn't seem to matter), type `C-c` to try to close the FZF window. seg fault + core dump happens > 25% of the time.

opening more than one file, and using some of the fancier fzf mappings (e.g., the ""search lines in all open vim buffers"" map from the fzf wiki) seem to reproduce the problem more frequently than just using `:FZF`, but the result is the same.

fzf 0.10.3
fzf plugin as of `8156e98`
nvim built from commit `a94a681` (includes the big merge from earlier today related to os_breakcheck)

neovim #2371 mentions the regexp engine, which seems to be the code ultimately causing the segfault here, I didn't look into it much though.

<S_CODE_TOKEN>
",jebaum,2015-09-20 09:13:36
207,2015-08-14 11:06:00,"@jebaum can you provide the file you opened to reproduce this issue?
",tarruda,2015-09-20 09:13:36
207,2015-08-14 17:00:53,"@tarruda https://gist.github.com/jebaum/46abc71bb25d5f1fd444

You must be onto something, I wasn't able to reproduce with a few random other files I tried. Running `:FZFLines` from the fzf wiki and then `C-c` with the two files in the gist I can produce a segfault pretty reliably.
",jebaum,2015-09-20 09:13:36
207,2015-08-14 17:27:56,"Must be a specific regex pattern that is triggering the bug. 
",justinmk,2015-09-20 09:13:36
207,2015-08-18 19:33:37,"In case this is of any use, here's a crash report i found in the OSX Console.app:

<S_CODE_TOKEN>
",adambiggs,2015-09-20 09:13:36
207,2015-08-18 23:49:25,"See also https://github.com/neovim/neovim/issues/3150 
",justinmk,2015-09-20 09:13:36
207,2015-09-10 06:21:18,"@tarruda I can no longer reproduce this issue with the steps I outlined above, using the files above, with latest master (https://github.com/neovim/neovim/commit/2bc1d7d0db6bdc29976dab03624fcb6d8a90094d). Nearest I can tell, fzf in neovim terminal mode works flawlessly now.
",jebaum,2015-09-20 09:13:36
207,2015-09-10 07:37:14,"@jebaum @tarruda Unfortunately, it is not yet _flawless_. I found another issue where nvim hangs forever saturating a CPU core. The problem is always reproducible. See https://github.com/junegunn/fzf.vim/issues/8
",junegunn,2015-09-20 09:13:36
207,2015-09-12 09:16:24,"I can still reproduce it almost 100% of the times with a debug build (with the release build usually it just doesn't open the file, in fact I suppose this issue and https://github.com/junegunn/fzf/issues/206 are the same one). Also it seems to not be related to https://github.com/neovim/neovim/issues/3150 since the latest fixes by @tarruda in the commit https://github.com/tarruda/neovim/commit/9ce5dbe15be2351e58740d455879fbf555cbc5a9 don't fix it for me. 
@jebaum Would you mind trying with a debug build and see if you can still reproduce it?

Here's my symbolicated backtrace:

<S_CODE_TOKEN>
",choco,2015-09-20 09:13:36
207,2015-09-20 08:55:51,"@cHoco can you verify this again on latest nvim master?
",tarruda,2015-09-20 09:13:36
207,2015-09-20 09:03:04,"@tarruda sorry for not reporting back before! I just wanted to try for a couple of days and be sure that this was gone for good :) Worked flawlessly with pretty intensive use since the last fix! Thank you again for you work!
",choco,2015-09-20 09:13:36
207,2015-09-20 09:13:36,"@cHoco thanks
",tarruda,2015-09-20 09:13:36
207,2015-09-24 18:16:58,"Haven't seen this error for a few days now. Thanks again @tarruda!
",adambiggs,2015-09-20 09:13:36
206,2015-04-20 17:50:43,"Sometimes when I `:FZF`, select a file, and then press `<Enter>`, NeoVim becomes unresponsive.

When this happens, pressing `<Enter>` a couple more times brings up the following:

<S_CODE_TOKEN>

Interestingly, opening the same file in a split (via `<C-v>`) seems to work, although nothing happens until I press `<Enter>` one extra time... i.e. `<C-v>` _nothing happens_ `<Enter>` _buffer opens as expected_.

Quitting & relaunching NeoVim seems to make the problem go away for a while, so it's difficult to reproduce.
",adambiggs,2015-09-20 08:14:29
206,2015-04-21 00:09:50,"Thanks. This also looks like a neovim issue. /cc @tarruda
",junegunn,2015-09-20 08:14:29
206,2015-04-21 02:03:24,"@junegunn can you assign this and any other neovim-related issues to me?
",tarruda,2015-09-20 08:14:29
206,2015-04-21 02:44:10,"@tarruda Okay, I'll (temporarily) add you as a collaborator. Just a second.
",junegunn,2015-09-20 08:14:29
206,2015-04-21 03:44:40,"> @tarruda Okay, I'll (temporarily) add you as a collaborator. Just a second.

Thank you, I find easier to keep track of issues if they are assigned to me. I will address them ASAP.
",tarruda,2015-09-20 08:14:29
206,2015-04-21 06:10:16,"Thanks once again @tarruda!
",adambiggs,2015-09-20 08:14:29
206,2015-04-22 16:37:03,"Something similar seems to be happening to me, but I don't see any errors in `:messages`, making it a little hard to debug.
",shkm,2015-09-20 08:14:29
206,2015-04-23 09:17:42,"I'm observing this as well. Usually on second attempt it works. I failed to reproduce this behaviour intentionally so I didn't raise an issue.
",pavel-popov,2015-09-20 08:14:29
206,2015-05-01 08:39:44,"Same issue for me 

E315: ml_get: invalid lnum: 58
E315: ml_get: invalid lnum: 58
E315: ml_get: invalid lnum: 58
E315: ml_get: invalid lnum: 58
E315: ml_get: invalid lnum: 58
E315: ml_get: invalid lnum: 58
E315: ml_get: invalid lnum: 58
E315: ml_get: invalid lnum: 58
E315: ml_get: invalid lnum: 58
",edi9999,2015-09-20 08:14:29
206,2015-05-01 20:50:09,"I have the same issue, but I don't get any errors only  `[Program exited, press any key to close]` 
after selecting the file I want to edit. Also it happens for every file for me, making fzf unusable for me in neovim :( Strangely if I select the file with CTRL-V it works as expected
",choco,2015-09-20 08:14:29
206,2015-05-02 05:06:25,"@tarruda I'm having issues similar to @cHoco as well.

If I search for and select a file while I already have another file open in the current buffer, I get `[Program exited, press any key to close]`. However, if the current buffer is empty, :FZF works as expected.
",kennethlee,2015-09-20 08:14:29
206,2015-05-02 10:04:58,"Having the some issue here, but unlike @kennethlee my case isn't quite as cut and dry. It works in an empty buffer, but _sometimes_ works even if the buffer has a file open and as @adambiggs noted _sometimes_ will be fixed by requesting a split or tab, but not always. It is only consistent as long as I keep trying to open the same file, but as soon as I open it in a clean buffer and close it, I can open it in the dirty buffer that originally failed.
",alerque,2015-09-20 08:14:29
206,2015-05-04 17:50:34,"I'm experiencing this, too. I find that opening in a split works, but hitting Enter will actually sometimes result in inserting `[Program exited, press any key to close]` in the file around the 3rd line, then **truncating the file!** >_< Just one more reason to love git. :) 
",justinforce,2015-09-20 08:14:29
206,2015-05-23 13:26:54,"For me it is pretty easy to see when the issue happens because it stays in terminal mode after switching to the new buffer. Leaving terminal mode with esc-esc breaks the new buffer with the same issues as justinforce. Reloading with e! % or going back with g- works. Using normal undo doesn't because of the screwed up linenumbers.

Any other button closes the new buffer for me. That buffer doesn't appear on the buffer or jumplist afterwards. Happens when using fzf from empty or loaded buffers seamingly at random.
",Tarmean,2015-09-20 08:14:29
206,2015-05-28 14:21:22,"Guys, @junegunn, @tarruda 

This seems to be fixed properly. Now I can open every files with ""Enter"" key. Could anyone confirm this so that we could close this issue? Because I updated both `neovim` and `fzf` so I don't know which one fixed the bug. 

Here is my `fzf` config that allows me to use <C-P> to activate `fzf` window and open new buffer window with `Enter` key

<S_CODE_TOKEN>

Here is my OSX 10.10.3 config

<S_CODE_TOKEN>
",babygau,2015-09-20 08:14:29
206,2015-05-28 15:41:25,"Happy to hear it! I went back to vim for the time-being, but FZF breaks zoom in it (as it opens a Tmux pane instead of a Neovim terminal). Will try tomorrow!
",shkm,2015-09-20 08:14:29
206,2015-05-28 17:50:56,"Nope, definitely still happening for me when doing two searches in succession.

Tested it roughly ten seconds after updating neovim and pulling/installing fzf so I am pretty sure that it was the newest versions for each.
",Tarmean,2015-09-20 08:14:29
206,2015-05-28 17:58:32,"There are some open issues about Neovim terminal emulator integration with FZF. Today I have updated both Neovim and FZF and none of them appear to be happening anymore. I use neovim from the custom Ubuntu ppa.
",cartolari,2015-09-20 08:14:29
206,2015-05-28 19:00:57,"Another data point: I updated Neovim and FZF to HEAD and I'm no longer experiencing this. 

To update Neovim and FZF, I did this:

<S_CODE_TOKEN>

This is the output of checking the versions of both:

<S_CODE_TOKEN>

I'm installing FZF/Neovim via Homebrew on Mac OS X 10.10.3.
",justinforce,2015-09-20 08:14:29
206,2015-05-28 20:36:19,"@Tarmean what were the precise steps you took to update neovim?
",justinmk,2015-09-20 08:14:29
206,2015-05-29 07:13:12,"Same as @Tarmean for me. 

The plugin works for the first 2/3 files, after that, the file doesn't change (but I get no error message), sometimes when I press enter twice, the error message:

<S_CODE_TOKEN>

appears again

My .nvimrc is quite empty :

<S_CODE_TOKEN>

To update neovim, I use the `add-apt-repository ppa:neovim-ppa/unstable -y`

and an `apt-get update`

Here is the result of 

<S_CODE_TOKEN>

I also have the latest versions of fzf, which I pulled and then run the `./install` script.
",edi9999,2015-09-20 08:14:29
206,2015-05-29 12:56:41,"Well, I'm not sure about Linux bcoz OSX running OK with me
",babygau,2015-09-20 08:14:29
206,2015-05-29 13:34:55,"Latest versions of Neovim and FZF, still having issues. OS X.
",shkm,2015-09-20 08:14:29
206,2015-05-30 18:20:21,"I used apt-get to update it from neovim-ppa/unstable and removed/reinstalled it once since for another reason. So reasonably certain it doesn't have to do with the install. This is on linux mint btw.

I updated fzf by pulling/installing again.
",Tarmean,2015-09-20 08:14:29
206,2015-05-31 15:18:26,"So it's weird then,
@Tarmean, could you try to upgrade python neovim too? by running `pip install --upgrade neovim`. 
I don't know what's wrong but mine is working OK.
",babygau,2015-09-20 08:14:29
206,2015-05-31 16:35:22,"Just guessing, but latest master may help with this issue. https://github.com/neovim/neovim/commit/deb65188ac25e4d941b0304464befb8bd9d07c3b
",justinmk,2015-09-20 08:14:29
206,2015-06-28 17:07:26,"Definitely still happening for me, I tried updating python as well. I'm running the latest fzf and the latest neovim in the ubuntu ppa. If it matters, I'm not getting the error messages anymore, the opened window/split just crashes. (Maybe this is a separate issue?)
",jgkamat,2015-09-20 08:14:29
206,2015-06-29 06:48:31,"@jgkamat Same here. Error situation has changed a little but it's still bombing out.
",alerque,2015-09-20 08:14:29
206,2015-06-30 11:28:16,"I have tried to reproduce this now with no success. Opened files in empty or filled buffer, in splits, and it always worked. Is anyone experiencing this on master? (more precisely @fa13cc61c)
",tarruda,2015-09-20 08:14:29
206,2015-06-30 14:33:32,"@tarruda I've been on fa13cc6 most of the day and have seen this at least 20 times. Per usual it doesn't happen every time but failure rate is over 50%. I've been doing mostly `:edit <path>` from nvim this afternoon just to avoid the pain of having it bomb.
",alerque,2015-09-20 08:14:29
206,2015-06-30 14:44:20,"Still happens from time to time to me. I can't talk for the others, but it usually happens with really small files.
EDIT: actually I can reproduce it right now almost 100% but doing this
1. Create empty file `touch test` 
2. Open neovim `nvim`
3. Launch fzf `:FZF`
4. Select the test file and press enter key `test<CR>`
5. The file is opened but press any key and the file is closed 
",choco,2015-09-20 08:14:29
206,2015-06-30 14:58:31,"For me those steps don't work :cry: 
When I try disabling all my plugins except for fzf, everything works as expected, but I cant seem to pin the problem down to a single plugin. It seems more like its related to the slowdown accompanying some plugins? I'm not sure about this, but I have a hunch that it's related to performance somehow. Does anyone have any tips for debugging which plugins could be causing this? 
",jgkamat,2015-09-20 08:14:29
206,2015-06-30 15:53:57,"Yeah, I can confirm that without plugins it works. But i tried to identify the one causing the problem and wasn't able to. It seems to depend on the number of plugins, not the plugins per se. And since it doesn't happen all the time with any file I suppose it must be some kind of race condition.
",choco,2015-09-20 08:14:29
206,2015-06-30 16:13:55,"@cHoco / @jgkamat / @alerque 

Do you use any python plugins? If so, does the problem still happens when you disable python?(add `let g:loaded_python_provider = 1` to the top of your vimrc)
",tarruda,2015-09-20 08:14:29
206,2015-06-30 16:26:59,"Yes I use some python plugins (YCM being the most ""expensive"" one). Disabling python seems to ""fix"" it for me. I've been trying for a solid 5 minutes to open various files and I wasn't able to trigger the bug. 
",choco,2015-09-20 08:14:29
206,2015-06-30 16:27:04,"@tarruda I do use python plugins. I just disabled that as you suggested and in a quick test opening a couple dozen files in hasn't failed once. `nvim`+`fzf` haven't been this nice to me in months.
",alerque,2015-09-20 08:14:29
206,2015-06-30 16:51:20,"I don't think I have any python plugins (I got no errors when adding that line), and adding that line seemed to improve things slightly, but i'm not sure about that. :disappointed: 
",jgkamat,2015-09-20 08:14:29
206,2015-06-30 17:01:12,"> I don't think I have any python plugins (I got no errors when adding that line), and adding that line seemed to improve things slightly, but i'm not sure about that. :disappointed:

did you manage to reproduce the bug after adding that line?

FWIW, I don't think this is related to python provider, but a long-existing nvim issue which I have been working to fix for the past couple of months:  neovim/neovim#2371. The fact that disabling python makes it harder to reproduce is just a consequence of how nvim processes asynchronous messages.
",tarruda,2015-09-20 08:14:29
206,2015-06-30 17:05:29,"Yes I did, sorry for not making that clear before. Maybe I'm seeing a different issue from @alerque and @cHoco?
",jgkamat,2015-09-20 08:14:29
206,2015-06-30 17:07:53,"Your first comment:

>  I'm not getting the error messages anymore, the opened window/split just crashes. (Maybe this is a separate issue?

Leads me to believe that it's a separate issue.
",tarruda,2015-09-20 08:14:29
206,2015-07-16 02:30:46,"Just a little update on my situation: I went back to Neovim today (updated) and everything seems fine. Great work, folks.
",shkm,2015-09-20 08:14:29
206,2015-07-16 03:28:58,"Sadly I'm still running into this. Much less often with python shut off, but we aren't out of tho woods yet.
",alerque,2015-09-20 08:14:29
206,2015-07-28 14:38:55,"I have the same issue. Here is my stackoverflow question: http://stackoverflow.com/questions/31671376/why-fzf-does-not-work-when-i-open-it-from-vim-intro
",regedarek,2015-09-20 08:14:29
206,2015-09-08 13:28:30,"I am getting this issue with HTML files.  The issue pops up for me when I have a buffer open and try to open a second for the first time.  Once I open a second buffer manually (`:e`) then all the commands and `:FZF` functionality works fine for the remainder of the session.
",stevendlander,2015-09-20 08:14:29
206,2015-09-18 19:00:12,"can you all check if the bug is still present on master(https://github.com/neovim/neovim/commit/e80d7c0df7ec6e88a964e58d86a70c8f980e4cc1)?
",tarruda,2015-09-20 08:14:29
206,2015-09-20 00:28:42,"@tarruda Looks good on my end; I haven't experienced any issues thus far. Thanks! :+1:
",kennethlee,2015-09-20 08:14:29
206,2015-09-20 08:09:01,"Yes, it seems to work correctly now
",edi9999,2015-09-20 08:14:29
206,2015-09-20 08:14:29,"If anyone still experiences this I will reopen
",tarruda,2015-09-20 08:14:29
206,2015-09-21 16:50:01,"Looks good on my end, thank you!
",stevendlander,2015-09-20 08:14:29
205,2015-04-20 17:15:20,"To reproduce:

<S_CODE_TOKEN>

The buffer containing the selected file disappears.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",atn34,2015-09-22 08:24:44
205,2015-04-20 23:57:11,"Sounds like a neovim issue. Is the problem similar to the one described here?
https://github.com/junegunn/fzf/issues/137#issuecomment-91604555
People have noticed some glitches in neovim terminal when using it with fzf and we'll have to wait until it becomes more stable.
",junegunn,2015-09-22 08:24:44
205,2015-04-21 00:20:44,"Yup looks similar, especially the 'If I press any key in this state, the
tab will close' bit, (but in my case it's a buffer). Waiting until neovim's
terminal feature is more stable sounds good to me.

On Mon, Apr 20, 2015 at 4:57 PM, Junegunn Choi notifications@github.com
wrote:

> Sounds like a neovim issue. Is the problem similar to the one described
> here?
> #137 (comment)
> https://github.com/junegunn/fzf/issues/137#issuecomment-91604555
> People have noticed some glitches in neovim terminal when using it with
> fzf and we'll have to wait until it becomes more stable.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/issues/205#issuecomment-94595640.
",atn34,2015-09-22 08:24:44
205,2015-04-25 16:03:59,"I've been having the same problem for the last week, which also seems to be related to #206. I noticed that opening in a new tab or split seems to always work, while opening in the current window will sometimes show the file and then drop it when a key is pressed, or will show `ml_get` error messages.

My temporary fix has been to use a sink that opens the file or buffer in a new split and then makes that the only split:

<S_CODE_TOKEN>
",jason0x43,2015-09-22 08:24:44
205,2015-04-25 17:19:42,"Of course, my suggestion above would need some modification if you generally work with multiple splits, but I don't.
",jason0x43,2015-09-22 08:24:44
205,2015-04-25 17:22:38,"This is a bit more split-friendly:

<S_CODE_TOKEN>
",jason0x43,2015-09-22 08:24:44
205,2015-05-08 04:57:35,"Is there a way to not run FZF through :terminal?
",Randuin,2015-09-22 08:24:44
205,2015-05-08 09:26:14,"@Randuin No. fzf (or any other interactive program) doesn't work correctly on Neovim without `:terminal`, so it doesn't really make sense to allow it. See #137.
",junegunn,2015-09-22 08:24:44
205,2015-05-13 05:37:18,"So right now I am having an issue that I _think_ is represented by this issue but I think it requires a fix on the neovim side?

The steps to reproduce are 
1. `:FZF`
2. Choose a file
3. `:vsp`
4. `:FZF`
5. Choose another file in the new split
6: The file opens but you still get `--TERMINAL--` at the bottom and if you do anything the file goes away

Is this the issue that I need to wait for neovim to fix?
",Randuin,2015-09-22 08:24:44
205,2015-05-13 16:59:10,"> Is this the issue that I need to wait for neovim to fix?

Yup.
",junegunn,2015-09-22 08:24:44
205,2015-05-13 17:23:48,"Hey guys, could you update the vim plugin and test if the situation is improved? I simply [added a `redraw!`](https://github.com/junegunn/fzf/blob/master/plugin/fzf.vim#L296) and it seems to help a lot.
",junegunn,2015-09-22 08:24:44
205,2015-05-13 17:38:16,"It helped, but there's still some cases where it closes the target window erronoeously.
",justinmk,2015-09-22 08:24:44
205,2015-05-14 04:36:52,"Seems to fix it for all my usage! Will report back if I run into anything else
",Randuin,2015-09-22 08:24:44
205,2015-05-28 15:43:11,"It seems to be fixed for me.
",jason0x43,2015-09-22 08:24:44
205,2015-09-22 05:24:12,"can't reproduce anymore, this can probably be closed
",jebaum,2015-09-22 08:24:44
205,2015-09-22 05:26:00,"@junegunn The [redraw!](https://github.com/junegunn/fzf/issues/205#issuecomment-101751888) should not be needed anymore.
",justinmk,2015-09-22 08:24:44
205,2015-09-22 07:38:21,"https://github.com/junegunn/fzf/commit/aec48f159b66c0ef3be643741a2cbe99b512aa26
",junegunn,2015-09-22 08:24:44
204,2015-04-20 05:47:06,"Hi junegunn,

I have just upgraded fzf to the latest commit, and it is broken with error:

<S_CODE_TOKEN>

It worked fine before.

Thanks.
",phongnh,2015-04-20 14:58:08
204,2015-04-20 05:59:29,"Thanks for the report. I changed the script to use `bash` instead of `sh`. Can you update and test it?
",junegunn,2015-04-20 14:58:08
204,2015-04-20 06:10:56,"Hi junegunn,

The problem is still there. It seems that you need to escape $ at $(cat ...), change it to \$(cat ...)

![screen shot 2015-04-20 at 1 08 08 pm](https://cloud.githubusercontent.com/assets/438791/7224592/85705196-e75e-11e4-83d6-52a5a0895aa6.png)
",phongnh,2015-04-20 14:58:08
204,2015-04-20 06:23:27,"Ha, you're right. Fixed it. Thanks!
",junegunn,2015-04-20 14:58:08
204,2015-04-20 06:40:48,"Thank you.
",phongnh,2015-04-20 14:58:08
204,2015-04-20 07:23:58,"I'm sorry, but I'll have to revert the previous commit, as it makes `fzf-tmux` fail on Vim. I'll look into it later in the day.

<S_CODE_TOKEN>
",junegunn,2015-04-20 14:58:08
204,2015-04-20 07:34:53,"Yes. I just realized that broken too. Now I sticked with 0.9.10 tag, this is the last commit fzf-tmux work in both vim and shell. 

Thanks.
",phongnh,2015-04-20 14:58:08
204,2015-04-20 13:45:22,"Could you test again? I've confirmed that the above commit fixes the problem when fish is the default shell (at least on OS X).
",junegunn,2015-04-20 14:58:08
204,2015-04-20 14:58:08,"It works like a charm. Thank you.
",phongnh,2015-04-20 14:58:08
203,2015-04-20 02:13:59,"Hi there, is there a way (other than editing/overriding the function) to force fzf-tmux to be used when executing command history (CTRL+R) behaviors?

Thanks.
",megalithic,2015-04-21 16:46:49
203,2015-04-20 02:36:18,"Unfortunately, no. But it's one of the things I've been meaning to address. We currently have `$FZF_TMUX` and `$FZF_TMUX_HEIGHT`, but they only affect `CTRL-T`. I think we should instead make separate vars for each key binding. Also, `CTRL-T` was implemented before `fzf-tmux` was added so it does not leverage the script.
",junegunn,2015-04-21 16:46:49
203,2015-04-21 16:00:05,"I applied fzf-tmux to CTRL-R and ALT-C, so that all three key bindings now use tmux pane when available. I didn't try to add FZF_XXX_TMUX / FZF_XXX_TMUX_HEIGHT pairs for each one of them as it feels like having too many configuration knobs.
",junegunn,2015-04-21 16:46:49
203,2015-04-21 16:00:58,"Thanks tons June, i'll give it a try here shortly.
",megalithic,2015-04-21 16:46:49
203,2015-04-25 20:38:04,"The change broke CTRL-R for me. After using it a few times it stops working. When I hit ENTER the prompt is still empty and it no longer gets the text. 

After restarting the terminal it works a few times but the problem always comes back.

I am using zsh. Do you need any other information to find the bug?
",Tranquility,2015-04-21 16:46:49
203,2015-04-26 00:28:29,"@Tranquility Can't reproduce. So you mean that tmux split correctly appears and you can select an item there, but the selected one does not update command line, right? And how many is ""a few times""?  Did you try re-sourcing `~/.fzf.zsh` when that happens?
",junegunn,2015-04-21 16:46:49
203,2015-04-26 13:16:57,"> So you mean that tmux split correctly appears and you can select an item there, but the selected one does not update command line, right?

Exactly!

> And how many is ""a few times""?

I can't reproduce it reliably. Sometime it's two sometimes it's twenty. Sometimes it starts to work again after a few times. Sometimes it doesn't (or maybe I did not try enough times).

> Did you try re-sourcing ~/.fzf.zsh when that happens?

Yes, I doesn't help.

I changed the fzfcmd to back from fzf-tmux to fzf for now.
",Tranquility,2015-04-21 16:46:49
203,2015-04-26 13:26:01,"@Tranquility I can't reproduce no matter how many times I try. I'm a bash user and there's nothing in my .zshrc. Maybe fzf conflicts with other parts of your zsh config.
",junegunn,2015-04-21 16:46:49
202,2015-04-19 06:55:11,"Personally I find that I almost never look at the line containing the number of items fzf is searching and the number currently matched (and occasionally the spinner), especially when I'm using fzf with vim/nvim. It would be nice to be able to optionally disable printing this and save a line, which on smaller screens can make a difference. Could an option like `--no-info` be implemented?
",jebaum,2015-04-21 14:51:09
202,2015-04-19 07:30:00,"Thanks for the suggestion. But I don't think saving a line would make a big difference and would rather not add yet another option which I don't think will be widely popular. You can easily increase the height of `:FZF` split with `g:fzf_height` (default: `40%`) or you can just use `:FZF!` on smaller screens. Also, since the info line shows the number of selected items when `--multi` option is set or if sorting is enabled when `--toggle-sort` option is used, it can be confusing to completely hide it. Instead I tried placing the numbers after the query on the last line, but I didn't like how it moves along as I type in more characters.
",junegunn,2015-04-21 14:51:09
202,2015-04-21 14:51:50,"Added `--inline-info` option, will be released with 0.9.11.
",junegunn,2015-04-21 14:51:09
202,2015-04-21 14:59:03,"<S_CODE_TOKEN>
",junegunn,2015-04-21 14:51:09
202,2015-04-21 17:22:13,"@junegunn 
Just chiming in to say I like the new `--inline-info` UI a lot.
",noahfrederick,2015-04-21 14:51:09
202,2015-04-21 17:29:49,"agreed, @junegunn has an impressive history of listening to suggestions and improving them. great work as always
",jebaum,2015-04-21 14:51:09
202,2015-04-22 02:49:36,"Thanks, I wasn't perfectly sure if it looks okay (colors, separator, ...). Glad to hear that you like it.
",junegunn,2015-04-21 14:51:09
201,2015-04-19 06:40:48,"Hello,
First of all, thanks for the awesome utility, `fzf`.

I have an issue while using it with tmux, and I believe that perhaps **`tmux`**, not `fzf`, is responsible for the problem; however, as I think this situation might happen to a couple of `fzf` users and similar issues have been never reported to the best of my knowledge, I am going to open a question or issue.

Please take a look at the following animated screenshot:

![](http://i.imgur.com/IJRHFiY.gif)
- When inside a tmux session, `fzf-tmux` (or other hot-keys) will trigger a tmux pane is spawned, at the bottom of current window.
- Once the `fzf` pane is closed, the previous tmux pane to which `fzf`'s result is passed **would have a weird scroll position**, which is quite annoying; specifically,
  - The absolute position of cursor (that user can see) is changed.
  - The contents (scrollback) before the `clear` command is (unwantedly) shown. (this is known to take place even when resize happens)

However, it seems that this does not happen in your [animated screenshot](https://raw.github.com/junegunn/i/master/fzf.gif) at README.

I can reproduce a similar behavior even when I do not use `fzf`, i.e. closing a splitted pane in tmux would always make the top pane messed. This might be an evidence that this is a tmux problem.

I can reproduce this in all of combinations I could have;
- `bash`, `zsh`
- `TERM` being `screen-256color`, `xterm`, `xterm-256color`, etc.
- my `tmux` is currently 1.9a, but reproducible as well in 1.8, 2.0 (snapshot)
- Terminal emulator: iTerm2 and the OS X default Terminal.app

How are you using `fzf-tmux`? I see no differences on dotfiles or tmux configurations between us.
Does it ever happen to anyone other than me?

Thanks!
",wookayin,2016-09-15 19:55:02
201,2015-04-19 07:03:14,"Hi, thanks for the report. Actually I experience the same problem. Yeah, it looks like tmux _pulls down_ the content of the above pane when the one below it is closed. (Note that `fzf-tmux -l` and `fzf-tmux -r` don't have the issue.) The reason the demo on the README page doesn't have the problem is that it was performed on a new tmux window with empty scrollback buffer. Like you said, I guess it's the way tmux operates, yet I haven't checked if it's a known issue or if there's a workaround to it.
",junegunn,2016-09-15 19:55:02
201,2015-04-19 07:10:17,"Thanks for the immediate feedback. 

I think I need to delve into the issue in company with tmux developer groups, or I will try to find any possible workaround. I will let you know once I come up with any progress.
",wookayin,2016-09-15 19:55:02
201,2015-04-19 07:23:14,"Thanks.
",junegunn,2016-09-15 19:55:02
201,2015-05-21 00:11:55,"Also have the same issue, which when opening and closing multiple panes regularly ends up to be kind of a bummer. @wookayin Did you end up finding any workaround? Thanks.
",nunoh,2016-09-15 19:55:02
201,2015-08-01 16:40:03,"Hey @wookayin, did you ever find a workaround? I just started using fzf and this is a minor annoyance.
",brandoniffert,2016-09-15 19:55:02
201,2015-08-19 07:29:54,"Unfortunately, I do not have any workaround as of now :disappointed: 

To the best of my knowledge, after looking into the source code of `tmux` for a moment, I believe that `tmux` is not responsible for the issue. When closing a pane or resizing happens, `tmux` just adjusts the size and offset of each remaining pane while not being aware of scroll positions. The similar phenomenon happens even out of tmux; whenever a single terminal changed its size (e.g. by magnifying the window size of iTerm2 or PuTTY) its scrollback appears.

I suspect that to address this issue, one might utilize some control sequences in `xterm` related to cursor manipulation. However, my clumsy attempt was not successful.
",wookayin,2016-09-15 19:55:02
201,2015-12-14 01:41:30,"You can work around this with

<S_CODE_TOKEN>
",chaoren,2016-09-15 19:55:02
201,2016-02-05 22:31:19,"Thanks for that workaround @chaoren !
",alcuadrado,2016-09-15 19:55:02
201,2016-09-15 19:31:34,"The issue should now be fixed in tmux: https://github.com/tmux/tmux/commit/2627ab322e0e8dffbf86b1c2eb969139a8062174. I think this can be closed.
",chaoren,2016-09-15 19:55:02
201,2016-09-15 19:55:02,"@chaoren Just tried the latest build (`brew reinstall tmux --HEAD`) and it works just as expected. Great job!
",junegunn,2016-09-15 19:55:02
201,2016-09-16 04:04:17,"@chaoren Thanks for letting us know! Then we just need a latest version of tmux :)

Tmux 2.3 includes this.
",wookayin,2016-09-15 19:55:02
200,2015-04-18 06:51:50,"<S_CODE_TOKEN>
",junegunn,2015-04-18 07:25:08
199,2015-04-18 05:43:15,"I am writing a python script and I used Jedi. So when the auto completion is triggered, I see a huge list of possible autocompletions. Can fzf vim plugin help me fuzzy search / select through that huge list ?
",mayuroks,2015-04-21 16:47:18
199,2015-04-18 06:28:59,"Yes it's possible, though I'm not sure if it's better than using YCM or neocomplete (I don't have enough experience with either).

The following example will give you the idea.

<S_CODE_TOKEN>

(~~I just realized that `a:query` cannot contain `""` even in escaped form due to a bug/limitation in `fzf-tmux` script.~~ EDIT: Fixed it)
",junegunn,2015-04-21 16:47:18
198,2015-04-17 17:46:38,"The default color scheme for 256-color terminal may not be easy to read on light background depending on the color scheme. I'll add a color scheme for light background.

<S_CODE_TOKEN>

![2015-04-18 2 40 46](https://cloud.githubusercontent.com/assets/700826/7207526/fd303160-e574-11e4-909d-a000bc0b8623.png)
![2015-04-18 2 39 53](https://cloud.githubusercontent.com/assets/700826/7207527/fd57266c-e574-11e4-8553-0db7e2ffd516.png)
![2015-04-18 2 41 02](https://cloud.githubusercontent.com/assets/700826/7207528/fd6bd530-e574-11e4-9f24-8be3bf37e3d6.png)
",junegunn,2015-04-18 01:48:30
197,2015-04-17 07:03:28,"Hi,

when using neovim inside a zsh session (not tmux), I always get the following error when running FZF:

<S_CODE_TOKEN>

This doesn't happen if I'm inside a tmux session
",edi9999,2015-09-20 09:19:03
197,2015-04-17 13:31:10,"Please report to Neovim
",justinmk,2015-09-20 09:19:03
197,2015-04-18 04:02:35,"Yep, it's definitely a neovim issue, though I can't reproduce.

<S_CODE_TOKEN>
",junegunn,2015-09-20 09:19:03
197,2015-05-11 10:07:46,"Hey @junegunn && @tarruda ,

after upgrading to the latest version of fzf on my second computer (which was not affected by this bug for now), I encountered the same issue again.

I suspect the issue comes from fzf rather than neovim, because both had the latest version of neovim, but different versions of fzf until today.

So after finding out that the version 0.9.7 worked well, I started a git bisect to find out where the problem comes from.

<S_CODE_TOKEN>

Here are the versions I use:

<S_CODE_TOKEN>

I also use zsh, but I can reproduce the issue even without using zsh and without using tmux (just running neovim from a shell)

Hope that helps to find the origin of the bug
",edi9999,2015-09-20 09:19:03
197,2015-05-11 10:29:30,"> I suspect the issue comes from fzf rather than neovim

No, it's strictly Neovim's issue. What's crashing is the terminal emulator of Neovim, not fzf. It may be possible that some changes made in fzf somehow made its host more susceptible to crash, but that doesn't mean fzf is doing something wrong.
",junegunn,2015-09-20 09:19:03
197,2015-05-11 18:18:14,"Ok I think I understand it now : the new :terminal is not yet bug free so that's why that commit which uses it makes nvim crash.
",edi9999,2015-09-20 09:19:03
197,2015-05-12 15:34:04,"For those who are encountering the same issue, you can ""fix"" it by running :

<S_CODE_TOKEN>

68503d3 being the commit that introduces the new term usage
",edi9999,2015-09-20 09:19:03
197,2015-05-12 15:57:24,"Personally, I don't think we should chekcout to use old version of fzf.vim. Also, as @junegunn said, this is not the issue in fzf but in neovim. The correctly way to solve this is waiting neovim for fixing the bug.
That being said, I found there is a way to by pass this .. you can just use `<C-v>` to open a splitted window, and then close the other windows by `<C-w> o`.
",lazywei,2015-09-20 09:19:03
197,2015-05-14 20:10:27,"Using C-v + C-w o seems a bit complicated, so I'm sticking with the old vim version for now, but will be happy to upgrade once the nvim bug has dissapeared
",edi9999,2015-09-20 09:19:03
197,2015-05-15 01:30:04,"@edi9999 @lazywei Try updating the vim plugin to the latest and see if it helps. I added a `redraw!` hoping that it would help avoid some race conditions and it does seem to help. It probably [isn't a perfect solution](https://github.com/junegunn/fzf/issues/205#issuecomment-101755075) to the problem, but I haven't run into an issue yet and it feels pretty usable.
",junegunn,2015-09-20 09:19:03
197,2015-05-15 03:34:02,"it works like a charm!! :+1: 
",lazywei,2015-09-20 09:19:03
197,2015-05-15 10:16:04,"It solves most of the problems for me, however, if I start neovim in a folder, than run fzf, the file will not open. 

Eg:

<S_CODE_TOKEN>

I'm using NerdTree but I don't think it has any impact
",edi9999,2015-09-20 09:19:03
197,2015-07-21 10:44:51,"Perhaps wierdly, it always crashes / closes the buffer when I am editing Haskell files, but works flawlessly in markdown files.
",forbesmyester,2015-09-20 09:19:03
197,2015-09-08 16:50:47,"@forbesmyester @edi9999 @lazywei Is this still happening on latest Neovim?
",justinmk,2015-09-20 09:19:03
197,2015-09-08 16:56:53,"I have not updated my neovim but FZF has (probably) been updated. I can no longer replicate it. Sorry for not being able to give a definitive answer.
",forbesmyester,2015-09-20 09:19:03
197,2015-09-19 10:01:17,"I think the problem is gone for me now
",edi9999,2015-09-20 09:19:03
196,2015-04-16 07:56:08,"Assuming I have a multi-pane window and vim is zoomed, executing FZF takes the window out of zoom.

Is this fixable? Perhaps via a tmux config change, if nothing else?

Thanks!
",shkm,2015-04-16 12:39:12
196,2015-04-16 12:40:36,"I don't think it's possible. You'll notice that a zoomed pane shrinks when you `tmux split`. You can try Neovim where fzf uses native vim splits instead of tmux panes.
",junegunn,2015-04-16 12:39:12
196,2015-04-16 13:45:34,"Yeah, thanks for responding.

I closed the issue because I realised that this just works in NeoVim :-). Unfortunately I'm having other issues with NeoVim, but I'll try to get around them because I really love FZF and the whole zoom-breaking thing is killing me right now.
",shkm,2015-04-16 12:39:12
196,2015-10-28 12:37:13,"This seems to have been fixed recently...

(probably in commit [9f953fc9440a6df9dcfc177555e0b4dd7444fd0a](https://github.com/junegunn/fzf/commit/9f953fc9440a6df9dcfc177555e0b4dd7444fd0a))
",DestyNova,2015-04-16 12:39:12
196,2015-10-28 16:28:20,"Yeah, kind of. Now it does not split the window if it's zoomed, that's the best we can do.
",junegunn,2015-04-16 12:39:12
196,2015-10-28 16:41:52,"It's much better this way! :+1: 
",DestyNova,2015-04-16 12:39:12
195,2015-04-16 06:34:51,"Hy Junegunn,

:FZF stopped quitting by ESC, only C-c is available to exit. ESC now turns it into Normal mode.

Is this intended behavior?

Environment: latest nvim and fzf, OS X Mavericks.
",pavel-popov,2015-04-16 18:12:33
195,2015-04-16 06:39:13,"If it's intended behavior, then the problem is the following: If I do ESC and :q in FZF buffer then on next run :FZF will say that it's already running (works as designed here). As I also use it as buffer switcher it's frustrating.  The only way remaining is manual buffer switching.
",pavel-popov,2015-04-16 18:12:33
195,2015-04-16 12:46:13,"No, in my case, fzf split is closed when I press ESC key. I tested with nothing but fzf.

<S_CODE_TOKEN>
",junegunn,2015-04-16 18:12:33
195,2015-04-16 12:57:26,"Ok, I'll recheck it. Thanks.
",pavel-popov,2015-04-16 18:12:33
195,2015-04-16 18:12:33,"I found what caused the problem, I added

<S_CODE_TOKEN>

to escape from Terminal nvimrc.

Sorry for interrupting.
",pavel-popov,2015-04-16 18:12:33
194,2015-04-16 05:32:02,"It's hard to tell if sort is current enabled or disabled when `--toggle-sort` is used.
",junegunn,2015-04-16 13:40:02
193,2015-04-16 02:06:54,"- `--no-hscroll`
",junegunn,2015-04-16 13:40:02
192,2015-04-15 19:50:19,"Hi,

I'm using neovim (NVIM 0.0.0-alpha (compiled Apr 15 2015 06:36:24), from Ubuntu PPA ). When I try to open a file using :FZF with the enter key, the first file open right. But when I try to open other files in the same way (:FZF and enter key) it doesn't work, and shows this message:

[Program exited, press any key to close]

 if I use the Ctrl-V it opens all right. The fzf version is the last one from github. I tried with this simple .nvimrc:

   call plug#begin('~/.nvim/plugged')
   Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes | ./install' }
   call plug#end()

But in vim, using the same .vimrc, same fzf version, it works all right.

Thanks!
",tfmoraes,2015-04-16 01:11:59
192,2015-04-16 00:48:33,"Hi, thanks for the report.
I also noticed that the problem randomly occurs, must be some kind of a race condition in Neovim. I [reported the problem](https://github.com/junegunn/fzf/issues/137#issuecomment-91604555) to @tarruda, and [he replied](https://github.com/junegunn/fzf/issues/137#issuecomment-93317025) that he'll be fixing the problem.
",junegunn,2015-04-16 01:11:59
192,2015-04-16 01:11:45,"Thanks! I'll close this issue.
",tfmoraes,2015-04-16 01:11:59
191,2015-04-15 16:29:18,"fzf lists the matches using the following sort criteria:
1. First by the sum of the lengths of matched substrings (plural because of extended-search mode)
2. Then by the length of the line
3. Lastly by line index (line number)

From my experience, this default scheme works pretty well for most of the cases, especially for files. I know there can be a wide variety of different needs but it is practically impossible to meet every requirement, and no, I'm not going to invent a DSL for unlimited customization. However, I think it's still desirable that we provide a small room for customization in sort criteria if it doesn't bring too much complication.

<S_CODE_TOKEN>

Unwanted side effects:
- Complication (also from the user's perspective)
- Increased memory footprint and performance overhead
",junegunn,2015-04-16 13:40:02
191,2015-04-15 17:11:07,"Another idea:

It could take in a executable/function name that is passed the query string and matching line (and possibly other information like match lengths) and returns a key. This would allow total customization while keeping fzf itself as simple as possible.

This is probably prohibitively slow, of course, since it would have to call out to an external process on every line. Something like that would be pretty neat though.
",qiemem,2015-04-16 13:40:02
191,2015-04-16 00:57:21,"@qiemem That's an interesting idea, thanks, and yeah, it's true that it'll be prohibitively slow. It should allow total customization, but at the same time, it'll be be much harder to use for ordinary users.

I'm leaning towards adding `--tiebreak` option. Simpler and does the job. Also no increase in memory footprint or sorting cost.
",junegunn,2015-04-16 13:40:02
191,2015-04-16 05:58:58,"- `--tiebreak`
  - `length` - Good default when the meaning of the input is not known
    - Luckily, works great for file paths.
      - e.g. With the presence of temporary suffixes to path elements such as `.bak`, `.org`, `.tmp`.
  - `begin` - Nice for columnar input. e.g. Chrome [history](http://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/) / [bookmark](http://junegunn.kr/2015/04/browsing-chrome-bookmarks-with-fzf/). Title of the page and URL.
  - `end` - Useful when searching for file names. File name > Dir name
  - `index` - Command history. The recency of the command is more important than the length of it.
",junegunn,2015-04-16 13:40:02
190,2015-04-15 08:54:25,"Hi, I'm not sure if this is a bug in fzf or tmux. I got the ""broken"" list when using fzf under tmux.
Everything just works fine when outside tmux.
Thanks.
![image](https://cloud.githubusercontent.com/assets/2840571/7155270/ee8001ea-e38f-11e4-8c6f-5989b14ebfd1.png)
",lazywei,2015-04-15 10:30:11
190,2015-04-15 09:52:28,"I had the same issue.

The problem is easily solved : See https://github.com/junegunn/fzf#rendering-issues

Specifically: If you're on screen or tmux, $TERM should be either screen or screen-256color
",edi9999,2015-04-15 10:30:11
190,2015-04-15 10:06:44,"Yeah, I'm pretty sure that this is a duplicate of #176.
",junegunn,2015-04-15 10:30:11
190,2015-04-15 10:16:17,"Okay, thank you both. I'll check it out!

-- Chih-Wei
Sent from Mailbox

On Wed, Apr 15, 2015 at 6:06 PM, Junegunn Choi notifications@github.com
wrote:

> ## Yeah, I'm pretty sure that this is a duplicate of #176.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/junegunn/fzf/issues/190#issuecomment-93301284
",lazywei,2015-04-15 10:30:11
189,2015-04-15 08:18:43,"Here are ways to use other characters in vim for tmux splitting.
",rlpowell,2015-04-15 13:49:55
189,2015-04-15 08:39:45,"I am almost totally certain that my changes didn't cause that build failure, as the build failure is about Go or something and I only touched the vim plugin.
",rlpowell,2015-04-15 13:49:55
189,2015-04-15 10:12:45,"Hi, thanks for suggestion.

> my changed didn't cause that build failure

I know, don't worry about that.

I have to mention that I'm not sure if I want to put configuration variables all over the code for different customization needs, when the entire definition of `:FZF` spans only 20~30 lines. Users with different tastes can easily copy the code onto their .vimrc and change it to their liking with no restriction. The added bonus is that by doing so, they'll learn how to use `fzf#run()` function. (Actually I even want to remove the pre-existing config knobs and simplify the code and the documentation. For example, `g:fzf_tmux_height` has now become an invalid name since Neovim terminal integration.)

Having said that, there are some points I don't agree with your implementation. I think the code should be more generic. For example, what if a user wants to have two separate keys for opening file on the left and on the right? We don't want to add more configuration variables.

Other minor points that don't match my personal taste :)
- Commit message
- Excessive margins around `|`
- Lines well over 80 column-limit
- Invalid description on README (`--extend`?)

I'll write my own version of the code tonight and let you know.
",junegunn,2015-04-15 13:49:55
189,2015-04-15 11:34:54,"On Wed, Apr 15, 2015 at 03:12:47AM -0700, Junegunn Choi wrote:

> Hi, thanks for suggestion.
> 
> > my changed didn't cause that build failure
> 
> I know, don't worry about that.
> 
> I have to mention that I'm not sure if I want to put configuration
> variables all over the code for different customization needs,
> when the entire definition of `:FZF` spans only 20~30 lines. Users
> with different tastes can easily copy the code onto their .vimrc
> and change it to their liking with no restriction. The added bonus
> is that by doing so, they'll learn how to use `fzf#run()`
> function. (Actually I even want to remove the pre-existing config
> knobs and simplify the code and the documentation. For example,
> `g:fzf_tmux_height` has now become an invalid name since Neovim
> terminal integration.)

The flip side of that, though, is that users lose access to any
good changes you implement that they might have wanted, unless they
specifically make a point to compare their code to yours on
occassion.

> Having said that, there are some points I don't agree with your
> implementation.

It's my first vimscript.  :D

> I think the code should be more generic. For example, what if a
> user wants to have two separate keys for opening file on the left
> and on the right?

Fair point.

> Other minor points that don't match my personal taste :)
> - Commit message
> - Excessive margins around `|`
> - Lines well over 80 column-limit
> - Invalid description on README (`--extend`?)
> 
> I'll write my own version of the code tonight and let you know.

Sure.

## 

http://intelligence.org/ :  Our last, best hope for a fantastic future.
.i ko na cpedu lo nu stidi vau loi jbopre .i dafsku lu na go'i li'u .e
lu go'i li'u .i ji'a go'i lu na'e go'i li'u .e lu go'i na'i li'u .e
lu no'e go'i li'u .e lu to'e go'i li'u .e lu lo mamta be do cu sofybakni li'u
",rlpowell,2015-04-15 13:49:55
189,2015-04-15 13:56:04,"Okay, now you can use `g:fzf_action` to set up key bindings. See: https://github.com/junegunn/fzf/wiki/Examples-(vim) Thanks!
",junegunn,2015-04-15 13:49:55
189,2015-04-15 14:05:20,"By the way, binding ALT-? (which is essentially ESC + ?) doesn't work on Neovim, and it's a known issue.

https://github.com/neovim/neovim/issues/2269
",junegunn,2015-04-15 13:49:55
189,2015-04-15 14:16:06,"Works for me (cb7bb70c4902a38165e3d1cb3158704dbac228c4):

<S_CODE_TOKEN>

edit: oops, I see you meant in `:terminal`. Ignore me
",justinmk,2015-04-15 13:49:55
189,2015-04-15 15:26:12,"Oh that's _way_ better.  Thank you!

On Wed, Apr 15, 2015 at 06:56:06AM -0700, Junegunn Choi wrote:

> Okay, now you can use `g:fzf_action` to set up key bindings. See: https://github.com/junegunn/fzf/wiki/Examples-(vim) Thanks!
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/junegunn/fzf/pull/189#issuecomment-93410654

## 

http://intelligence.org/ :  Our last, best hope for a fantastic future.
.i ko na cpedu lo nu stidi vau loi jbopre .i dafsku lu na go'i li'u .e
lu go'i li'u .i ji'a go'i lu na'e go'i li'u .e lu go'i na'i li'u .e
lu no'e go'i li'u .e lu to'e go'i li'u .e lu lo mamta be do cu sofybakni li'u
",rlpowell,2015-04-15 13:49:55
189,2015-04-15 15:38:47,"> The added bonus is that by doing so, they'll learn how to use fzf#run() function.

Completely agree with this, I would like to **have** to put the fzf#run in my .vimrc, so that I can see what exactly is run by FZF and hack on it if you want
",edi9999,2015-04-15 13:49:55
188,2015-04-14 00:12:37,"Problem: `yes n | ./install` should answer ""n"" to every prompt, but instead it answers ""n"" to the first question, and the next question is getting some non-printable input which `ask()` interprets as ""y"". This means that shell keybindings are always installed. 

Solution: omit `-n 1` for non-interactive shells.
",justinmk,2015-04-14 01:13:52
188,2015-04-14 00:15:54,"~~Ack, this has a bug.~~
",justinmk,2015-04-14 01:13:52
188,2015-04-14 00:42:35,"Ok, tested this in interactive and non-interactive mode, answering ""y"" and ""n"". No bugs now.
",justinmk,2015-04-14 01:13:52
188,2015-04-14 01:14:04,"Good catch, thanks!
",junegunn,2015-04-14 01:13:52
187,2015-04-13 20:47:32,"HI Junegunn,

I'm trying to use `fzf` to replace `ctrl.p`, but when I implemented custom searches (within git project, mru, buffers) using `fzf#run` I'm unable to use `CTRL-S/V/T` shortcuts.

Here is the excerpt from my `.vimrc` (buffers and mru are from fzf wiki)

<S_CODE_TOKEN>

How to set the shortcuts?

And what about space after 'e' in the middle of the script (highlighted)?
",pavel-popov,2015-04-14 17:11:28
187,2015-04-14 01:31:51,"Hi, there is no default key binding. `:FZF` command uses [`--expect` option](https://github.com/junegunn/fzf/issues/163) so that fzf can finish on those keys. See the implementation of it [here](https://github.com/junegunn/fzf/blob/master/plugin/fzf.vim#L311-L338).

So the vim plugin for fzf only provides a primitive building block `fzf#run()` for more sophisticated features. This gives you greater flexibility, but it also means that you'll have to write some Vimscript. You might want to check out some third-party projects: https://github.com/search?utf8=%E2%9C%93&q=fzf+vim

> And what about space after 'e' in the middle of the script (highlighted)?

Not required. Maybe an outdated example.

EDIT: I simplified the code a bit after posting the answer.
",junegunn,2015-04-14 17:11:28
186,2015-04-13 20:37:22,"Hi Junegunn,

I found that `fzf` works strange with cyrillic.

This example works as expected:

<S_CODE_TOKEN>

![screen shot 2015-04-13 at 23 32 39](https://cloud.githubusercontent.com/assets/480160/7124916/7e650762-e235-11e4-933e-6f8a5a98ff77.png)
![screen shot 2015-04-13 at 23 32 24](https://cloud.githubusercontent.com/assets/480160/7124918/7e6cd9ec-e235-11e4-84de-cb917c7e16a9.png)

But this one (""row"" translated to Russian ""строка"") behaves differently (it fails to find capital letters):

<S_CODE_TOKEN>

![screen shot 2015-04-13 at 23 34 37](https://cloud.githubusercontent.com/assets/480160/7124954/ba49afb2-e235-11e4-8b1d-d9bf97ab3e82.png)
![screen shot 2015-04-13 at 23 33 07](https://cloud.githubusercontent.com/assets/480160/7124917/7e69108c-e235-11e4-93a0-27f650fedfb5.png)

Environment: OS X Mavericks, zsh/bash, fzf 0.9.7, LANG=""ru_RU.UTF-8"".
",pavel-popov,2015-04-14 17:10:09
186,2015-04-14 02:47:33,"Thanks for the report. The cause of the problem is that fzf uses `strings.ToLower()` function to make the query lowercase, but it does not use it and instead manually processes english alphabets only during search for much better performance. I'll see what I can do.
",junegunn,2015-04-14 17:10:09
186,2015-04-14 05:07:14,"Maybe then do also string.ToLower() to a search string? Now fzf lose some results :-(.
",pavel-popov,2015-04-14 17:10:09
186,2015-04-14 05:11:45,"Well, just fixing it is trivial. But in order to fix it without performance regression, I'll have to evaluate several options. I'll let you know of the progress.
",junegunn,2015-04-14 17:10:09
186,2015-04-14 05:16:19,"Ok, thank you! `fzf` rocks!
",pavel-popov,2015-04-14 17:10:09
186,2015-04-14 14:24:54,"Hey, I fixed the bug and released 0.9.8. Performance overhead of the fix is around 5%, but it won't be really noticeable. (e.g. +0.3 second for filtering 3 million lines. Of course, correctness is much more important than minor slowdown.)
",junegunn,2015-04-14 17:10:09
186,2015-04-14 17:33:08,"I checked version 0.9.8. Everything works just fine! Thanks for blazingly fast fix.
",pavel-popov,2015-04-14 17:10:09
185,2015-04-13 09:21:14,"I've managed to consistently recreate a problem I've been having with fzf in OSX.

$ fzf --version
0.9.4
$ uname -a
Darwin 14.1.0 Darwin Kernel Version 14.1.0: Thu Feb 26 19:26:47 PST 2015; root:xnu-2782.10.73~1/RELEASE_X86_64 x86_64

If I open a terminal window and run (at a minimum) $(fzf) then close the terminal window (Terminal.app) I notice fzf doesn't exit and uses increasingly more and more memory (regularly like so http://i.imgur.com/syEIYXu.png).

Not sure how to debug this any further for you.  If I just kill the login shell from another terminal the problem doesn't occur, it seems to be limited to closing Terminal.app.
",jotham,2015-04-14 14:22:16
185,2015-04-13 09:52:40,"Thanks for the report. That's strange. I'm not sure but it can be a bug of Terminal.app. If you try `$(sleep 10000)` and close the window, you'll notice that `sleep` process is not correctly terminated. :confused: 
",junegunn,2015-04-14 14:22:16
185,2015-04-14 12:35:56,"Not sure this provides any more help.

If I fashion the following script:

<S_CODE_TOKEN>

Then in /tmp/traps I get a SIGHUP when I close the Terminal.app window, and as expected ""sleep 10000"" is still running as a process.

If I swap $(sleep 10000) with $(fzf) then fzf exits correctly.

Following that, I've created a simple bash script only containing $(fzf) and it exits cleanly as well.

My initial use of fzf was in a bash function, which I guess runs in the bash child of the login shell process. 

<S_CODE_TOKEN>

Where as my test scripts are running in a bash child of the bash child of the login process.

<S_CODE_TOKEN>

So, I'm not sure why this is happening. It may not have anything to do with fzf.  For now I've wrapped my bash functions bodies in () to create another sub-shell and it seems to work without leaving an orphaned fzf process.

<S_CODE_TOKEN>

Anyway, sorry for the rambling response.  Hopefully this is helpful.
",jotham,2015-04-14 14:22:16
185,2015-04-14 14:24:38,"Thanks for the detailed report. I noticed that fzf goes into an infinite loop when that happens. Fixed the problem and released 0.9.8.
",junegunn,2015-04-14 14:22:16
184,2015-04-13 08:02:27,"fzf version 0.8.9 (Dec 24, 2014)

Pressed Insert key. Crashed not so gently to terminal.

<S_CODE_TOKEN>
",Hunter-Github,2015-04-13 10:00:41
184,2015-04-13 08:44:07,"Hi, thanks for the report, but I currently do not maintain the legacy Ruby version (< 0.9). Is there a reason you have to use the old version? Windows?
",junegunn,2015-04-13 10:00:41
184,2015-04-13 09:24:30,"ruby 2.2.1p85 (2015-02-26 revision 49769) [i686-linux]

Actually, can choose any ruby, am running rvm.
",Hunter-Github,2015-04-13 10:00:41
184,2015-04-13 09:29:33,"No, I meant fzf version, not Ruby version. fzf was completely rewritten in Go earlier this year, and no longer requires Ruby. See: https://github.com/junegunn/fzf/blob/master/src/README.md
",junegunn,2015-04-13 10:00:41
184,2015-04-13 09:37:56,"Ok. Seems like i686 isn't supported, either. Thanks anyway.
",Hunter-Github,2015-04-13 10:00:41
184,2015-04-13 09:40:12,"No, they are supported.
https://github.com/junegunn/fzf/blob/master/install#L76-L79

What is the output of `uname -sm` on your machine?
",junegunn,2015-04-13 10:00:41
184,2015-04-13 09:48:25,"Linux i686. I compiled the binary by tweaking the Makefile:

<S_CODE_TOKEN>

and eliding other lines dealing with 64-bit arch.
",Hunter-Github,2015-04-13 10:00:41
184,2015-04-13 09:58:49,"Hey, did you read the installation guide? If you use the attached install script it will download the right binary for your platform, or, as mentioned there, you can download a prebuilt binary (linux_386) from here: https://github.com/junegunn/fzf-bin/releases
",junegunn,2015-04-13 10:00:41
184,2015-04-13 10:00:41,"I prefer to build executables from the source, BTW thanks for the great utility.
",Hunter-Github,2015-04-13 10:00:41
184,2015-04-13 10:24:45,"I see, thanks.
",junegunn,2015-04-13 10:00:41
183,2015-04-11 17:31:54,"#180 only fixes invocations of `:FZF`. This simply moves the check to `fzf#run()` so that it works with all invocations of fzf.
",qiemem,2015-04-11 17:45:14
183,2015-04-11 17:40:16,"Thank you! I commented on the code. Could you change them and force-push to the branch?
",junegunn,2015-04-11 17:45:14
183,2015-04-11 17:43:39,"Ah woops, changed before I saw the force-push comment. Just a moment.
",qiemem,2015-04-11 17:45:14
183,2015-04-11 17:44:55,"Done!
",qiemem,2015-04-11 17:45:14
183,2015-04-11 17:45:19,"Thanks! :+1: 
",junegunn,2015-04-11 17:45:14
182,2015-04-11 15:55:40,"Splitting this from #181 

> fzf is a command line filter that can be used with anything, so it doesn't have the notion of ignored files and folders.
> 
> <S_CODE_TOKEN>
> 
> When the input is not specified (fzf w/o STDIN pipe), it will use find command as the default input. You can set $FZF_DEFAULT_OPTS environment variable to a command that lists the files as you like.

Sorry my knowledge is limited, how can I supply a list of ignored patterns for FZF?
",firedev,2015-04-11 16:01:32
182,2015-04-11 16:01:32,"It's not the responsibility of fzf. You have to feed the right input to fzf, and for vim plugin, setting up `$FZF_DEFAULT_COMMAND` will do. You can set it to some command or your own script that lists the files under the current directory.
Please refer to: https://github.com/junegunn/fzf#respecting-gitignore-hgignore-and-svnignore
",junegunn,2015-04-11 16:01:32
182,2015-04-11 16:06:07,"Note that you can also set the environment variable inside vim:

<S_CODE_TOKEN>
",junegunn,2015-04-11 16:01:32
182,2016-07-21 22:45:44,"For googlers - you can also add `--skip-vcs-ignores` to use `.agignore` but not `.gitignore`. This allowed me to also search in my vendor folder but ignore code coverage files, generated documentation, etc.
",mikedfunk,2015-04-11 16:01:32
181,2015-04-11 15:43:13,"Hi,

I tried to add fzf to vim via Vim Plug as described, but only `:FZF!` works. 

`:FZF` simply does nothing (I am using tmux), neither are [Open in splits](https://github.com/junegunn/fzf/wiki/Examples-%28vim%29#open-files-in-splits) mappings.

What am I doing wrong?

Also on a side note, I couldn't find a way to supply a list of ignored files and folders. Is there a way to ignore certain patterns? 

Thanks.
",firedev,2015-04-11 17:26:24
181,2015-04-11 15:44:59,"Does `fzf-tmux` or `fzf` command work on your shell?
",junegunn,2015-04-11 17:26:24
181,2015-04-11 15:48:21,"> Also on a side note, I couldn't find a way to supply a list of ignored files and folders. Is there a way to ignore certain patterns?

fzf is a command line filter that can be used with anything, so it doesn't have the notion of ignored files and folders.

<S_CODE_TOKEN>

When the input is not specified (`fzf` w/o STDIN pipe), it will use `find` command as the default input. You can set `$FZF_DEFAULT_OPTS` environment variable to a command that lists the files as you like.
",junegunn,2015-04-11 17:26:24
181,2015-04-11 15:49:34,"Yes both `fzf` and `fzf-tmux` work, and `:FZF!` works fine. I have copied the whole FZF part of [your config](https://github.com/junegunn/dotfiles/blob/da378217ad008d422bc5b577802cad237a2930e1/vimrc#L1196-L1198) but no shortcuts do anything.
",firedev,2015-04-11 17:26:24
181,2015-04-11 15:51:31,"Hmm looks like they do work when not in tmux session. If that helps.
",firedev,2015-04-11 17:26:24
181,2015-04-11 15:53:43,"Can you try `:call system('seq 100 | fzf-tmux')` in vim on tmux session. Does it open a tmux pane below?

By the way, ""Open in splits"" mappings in the wiki page are no longer needed as `:FZF` can now do it with `CTRL-X/V/T`.
",junegunn,2015-04-11 17:26:24
181,2015-04-11 16:30:02,"`:call system('seq 100 | fzf-tmux')` does nothing
",firedev,2015-04-11 17:26:24
181,2015-04-11 16:35:07,"How about
- `:echo system('which fzf')`
- `:echo system('which fzf-tmux')`
",junegunn,2015-04-11 17:26:24
181,2015-04-11 16:38:27,"Hmm... both not found.
",firedev,2015-04-11 17:26:24
181,2015-04-11 16:40:29,"Okay, create a new tmux window (which will load ~/.bashrc or ~/.zshrc), open vim there and try again.
",junegunn,2015-04-11 17:26:24
181,2015-04-11 16:45:21,"I have added '/Users/me/.fzf/bin' to '~/.zshenv', that made it work. I guess it is better to install FZF with Homebrew rather than vim plugin, is it?
",firedev,2015-04-11 17:26:24
181,2015-04-11 16:56:14,"> I have added '/Users/me/.fzf/bin' to '~/.zshenv', that made it work

No don't do that. The install script will download fzf binary and inject code to your ~/.zshrc that extends your `$PATH`, so manual update of your env files is not required. The reason `:FZF!` worked and `:FZF` didn't is that `fzf-tmux` script expects `fzf` to be in `$PATH`, but it wasn't as the updated ~/.zshrc was not yet loaded on the tmux window you're running vim. As I mentioned earlier, if you open another window, the shell will have `fzf` and `fzf-tmux` in $PATH. So vim started in the window should run without a problem. I know this can be confusing, so I'll push a commit that makes fzf-tmux try to use fzf binary in the same directory if it's not found in `$PATH`.
",junegunn,2015-04-11 17:26:24
181,2015-04-11 16:59:01,"> I guess it is better to install FZF with Homebrew rather than vim plugin, is it?

No, not necessarily. I use vim-plug to manage fzf.
",junegunn,2015-04-11 17:26:24
181,2015-04-11 16:59:13,"I opened a new Terminal window, killed tmux server and everything. It just didn't work until I've changed `.zshenv`
",firedev,2015-04-11 17:26:24
181,2015-04-11 17:00:15,"Do you see `[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh` in your .zshrc?
",junegunn,2015-04-11 17:26:24
181,2015-04-11 17:02:13,"You said:

> Yes both fzf and fzf-tmux work

But you also said:

> Hmm... both not found.

when I asked you about `:echo system('which fzf')`. I'm not sure what's going on.
",junegunn,2015-04-11 17:26:24
181,2015-04-11 17:22:13,"`[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh` in `.zshrc` - yes.

But as far as I know vim uses different shell that bypasses `.zshrc` or something. That's why I keep a duplicate of `$PATH` in `.zshenv`.

`fzf` and `fzf-tmux` did work from terminal, just not from Vim, adding `PATH` to `.zshenv` fixed that. 
",firedev,2015-04-11 17:26:24
181,2015-04-11 17:26:24,"> fzf and fzf-tmux did work from terminal, just not from Vim, adding path to .zshenv fixed that.

If they work from terminal, and you started Vim from that shell, they should also work in Vim which is a subprocess of the shell. You can see that `$PATH` is `export`ed inside `~/.fzf.zsh`.

Anyway, with the previous commit, now both `:FZF` and `:FZF!` should run on a shell where fzf is not (yet) in `$PATH`. Thanks for the report.
",junegunn,2015-04-11 17:26:24
180,2015-04-10 20:27:18,"Hi, Junegunn!

Prior to this change, you'd get a longer error message if you did:

<S_CODE_TOKEN>

The main problem being that `:file [FZF]` can be used only once. This commit uses that to its advantage and just adds a simple `bufexists('[FZF]')` check (and a warning message, that you can remove if you want).

Probably easier than using an ugly `s:is_active` variable. :)
",mhinz,2015-04-11 00:16:44
180,2015-04-11 00:16:54,"Merged, thanks!
",junegunn,2015-04-11 00:16:44
179,2015-04-09 07:41:52,"When I use the Ctrl-R keyboard shortcut, and search for `ssh`, I get the following results:

<S_CODE_TOKEN>

the order of the results is not optimal, because `ssh site@site` is probably what I want.

Is they anyway to get exact matches first ?

I know exact match exists, but what I would like to have is something that would intelligently get exact matches first, and then the fuzzy matches.

I think they are two ways to implement this:
1. Make exact matches come up first
2. Prioritize the matches that have the lowest number of chunks. If they is equality, prioritize according to the shortest match.

Also: Is they a keyboard shortcut to switch from normal mode to exact-match mode from within fzf ?
",edi9999,2015-04-10 07:49:25
179,2015-04-09 08:49:09,"As mentioned in the [README page](https://github.com/junegunn/fzf#key-bindings-for-command-line), sorting is disabled by default for CTRL-R because chronological ordering is important for command history. You can toggle sorting by pressing CTRL-R again and you'll notice that exact/closer matches appear first.
",junegunn,2015-04-10 07:49:25
179,2015-04-09 16:18:42,"You can also edit the `fzf-history-widget()` in `~/.fzf.zsh` and add `-x` to the fzf command. Now you can search for exact matches by prepending your search string with `'` (f.ex. `'ssh`).

Also have a look at the discussion in #178.
",Ram-Z,2015-04-10 07:49:25
179,2015-04-09 16:26:04,"> You can also edit the fzf-history-widget() in ~/.fzf.zsh and add -x to the fzf command.

I recommend setting up `$FZF_DEFAULT_OPTS` (e.g. `export FZF_DEFAULT_OPTS='-x'`) instead of editing the source directly.

@Ram-Z Please note that the latest `install` script no longer generates `~/.fzf.{zsh,bash}` with full definitions. Those files now simply load files in `~/.fzf/shell/`.
",junegunn,2015-04-10 07:49:25
179,2015-04-10 07:00:45,"I found https://github.com/junegunn/fzf/issues/111 which already gave me the idea of using `export FZF_DEFAULT_OPTS='-x'`

I've used it since yesterday and it seems a good solution. 

Out of curiosity, what other fzf related config do you use @junegunn on your machine ?
",edi9999,2015-04-10 07:49:25
179,2015-04-10 07:49:21,"You can check out my dotfiles repo on github. I'm still experimenting with stuff, and I recently managed to integrate Chrome browsing history and bookmarks with fzf.

Anyway, I believe I answered your initial question with 1. quoting in extended-search mode 2. and the recent addition of `--toggle-sort=ctrl-r` (see #173). I'm closing this. Thanks.
",junegunn,2015-04-10 07:49:25
178,2015-04-08 15:29:26,"i.e. a mode where

<S_CODE_TOKEN>

would  not match `foo bar`, because the fuzy find would cross a space.
",Ram-Z,2016-06-23 16:49:10
178,2015-04-08 15:53:26,"I'm not convinced we need it. Can you give me a realistic example for which you want the option?
- Both `foobar` and `foo bar` match, but `foobar` will be given higher rank and appear before the latter. I mean it's already easier to pick that one, so why we would need another option? Maybe because you want to use `fzf` as a non-interactive filter?
- You might also want to consider `--extended-exact` (or `-e`)
- If the maximum number of fields on each line is known in advance, we can consider using `--nth` option
  - e.g. `fzf -n1,2,3 -f ""oobar""`
",junegunn,2016-06-23 16:49:10
178,2015-04-09 13:31:25,"I thought of this when it took me more effort than expected when searching through my zsh history (`^R`). I usually know what command I'm looking for, so will search for that first. I also know more or less how the words are separated, so putting an explicit space between words helps filtering lots of stuff.

The history search uses the `--no-sort` option, therefore ignores the rank. I tried it with the rank, but it just felt wrong to have the history not sorted in chronological order.

My initial example was also incomplete. If there is a space in the search string it should be respected, i.e.

<S_CODE_TOKEN>

should not match, as you are explicitly searching for two words. One containing `oo` and the second `bar`.

Even better would be to be able to select the 'hard' separators, then for instance if you're searching through a long list of long paths and set the separator to `/`, you could search for `/a/b/abc` and be sure that you would only see paths that have an `a` in the first folder, a `b` in the second, and abc in the rest of the path.
",Ram-Z,2016-06-23 16:49:10
178,2015-04-09 13:36:06,"> The history search uses the --no-sort option, therefore ignores the rank. I tried it with the rank, but it just felt wrong to have the history not sorted in chronological order.

By the way, have you tried the updated version of `CTRL-R` (with `--toggle-sort=ctrl-r`)? You can now toggle sort with `CTRL-R` key as mentioned in [the README page](https://github.com/junegunn/fzf#key-bindings-for-command-line).
",junegunn,2016-06-23 16:49:10
178,2015-04-09 13:49:00,"> Even better would be to be able to select the 'hard' separators, then for instance if you're searching through a long list of long paths and set the separator to /, you could search for /a/b/abc and be sure that you would only see paths that have an a in the first folder, a b in the second, and abc in the rest of the path.

I see what you mean, but it sounds too specific, and I'm going to have a hard time explaining it to an ordinary user of fzf :) And technically, it's how fzf currently works when `--sort` is turned on, as fzf prefers the items with shorter matched substrings.
",junegunn,2016-06-23 16:49:10
178,2015-04-09 14:03:49,"I'll have to admit that I like the idea of hard separators. Especially in `^R` I've been in that situation many times.

The chronological ordering is very useful there, but it allows a lot of noise (very long matches) that I need to skip over manually most of the times.
",wellle,2016-06-23 16:49:10
178,2015-04-09 14:23:47,"@wellle @Ram-Z 
So if I understood correctly, `aa/bb/cc` effectively translates to `a[^/]*?a[^/]*?/b[^/]*?b[^/]*?/c[^/]*?c[^/]*?`, and `aaa/bbb/ccc` matches the pattern but `aaa/bbb/xxx/ccc` does not. Is it correct? Or am I missing something? If that's the case, it might be useful if the input only consists of paths, but I don't think it's ideal for command history. For example, consider input string:

<S_CODE_TOKEN>

and you type in `cpaa/bb/cc` but it doesn't match because of `hello/world` before `aaa/`, and you're obliged to include `h/` to the pattern.

EDIT: `/` instead of `h/`, but you get the point. It can be confusing when there are multiple path arguments to the command. e.g. `mv a/b c/d/e /x/y/z`
",junegunn,2016-06-23 16:49:10
178,2015-04-09 15:05:12,"Yeah I see your point. Maybe `'oobar` in `--extended` search mode is the better solution here. Because that way you can mark explicitly which parts of your query should fuzzy over spaces and what shouldn't.
",wellle,2016-06-23 16:49:10
178,2015-04-09 16:10:18,"> So if I understood correctly, `aa/bb/cc` effectively translates to `a[^/]*?a[^/]*?/b[^/]*?b[^/]*?/c[^/]*?c[^/]*?,` and `aaa/bbb/ccc` matches the pattern but `aaa/bbb/xxx/ccc` does not. Is it correct?

Not quite, when a `/` appears in the search, it means that the part before and the part after must have at least one `/` between them. And the separator is not allowed if it wasn't explicitly added to the search pattern.

Rather something like `a[^/]*?a.*?/.*?b[^/]*?b.*?/.*?c[^/]*?c`. So for the string `aaa/bbb/xxx/ccc`

<S_CODE_TOKEN>

> If that's the case, it might be useful if the input only consists of paths, but I don't think it's ideal for command history.

Indeed, if the hard separator is a `/` it makes only sense for paths, i.e. <kbd>Alt+C</kbd>.

For command history, hard separators on `space` makes a lot more sense than on `/`. `cp aa/bb/cc` would match `cp hello/world aaa/bbb/ccc` but not `cat p aaa/bbb/ccc` because `c` and `p` are separated by a space.

> Yeah I see your point. Maybe `'oobar` in `--extended` search mode is the better solution here. Because that way you can mark explicitly which parts of your query should fuzzy over spaces and what shouldn't.

The problem here is that it doesn't fuzzy anymore, i.e. `'obr` would not match `foobar`
",Ram-Z,2016-06-23 16:49:10
178,2015-04-09 16:39:52,"I see. It makes sense. But I must say it's a bit hard to follow at first. The problem with the suggested approach is that when space is used as a hard separator, it is no longer compatible with the current extended-search mode, where spaces are used to separate multiple search terms. Which means in order to implement the scheme, we cannot augment the preexisting modes with the concept of hard separator but instead have to add another mode, so we end up with 4 different search modes, and I'd really like to avoid that.

I suggest that you try `CTRL-R` for enabling sort (it was added recently) and ""quoting"" in extended-search mode for a while. I'm sure they will help you a lot in most of the cases. I'll leave this issue open. Feel free to share more of your ideas. Thanks.
",junegunn,2016-06-23 16:49:10
178,2015-04-10 14:55:44,"Indeed, it's not compatible with extended-search mode. I think it could be an extension of the normal search mode though, it could even be integrate it into the main search loop [algo.go#L34](https://github.com/junegunn/fzf/blob/master/src/algo/algo.go#L34) I believe.

Another approach would be to consider each string separated by a hard separator as a different pattern to search, with the restriction that the matched string does not contain the hard separator. I this case the order is not respected anymore. `aa/bb` would match `AAa/BaB` aswell as `BaB/AAa` but not `ba/aba`. It's still not compatible with extended-search when the hard separator is a space though.

> I suggest that you try <kbd>CTRL-R</kbd> for enabling sort (it was added recently) and ""quoting"" in extended-search mode for a while. I'm sure they will help you a lot in most of the cases.

I have for the past few days, it works somewhat better than with `--no-sort`, but tends to fetch similar commands from far back in the past which might have a better rank but have no relations to what I'm currently doing. So I still need to type more than I think should be necessary. I'll try it for a bit longer though, maybe I'll get accustomed to it.
",Ram-Z,2016-06-23 16:49:10
177,2015-04-03 18:27:44,"In vim `:FZF` and `:FZF ~` will all work fine but `:FZF app/models` shows nothing
Some other odd notes. If I try `:FZF! app/models` that works, but only once, any subsequent attempts will also show nothing
",Randuin,2015-04-04 00:21:28
177,2015-04-04 00:22:55,"Ouch! Thanks for the report. I realized that it didn't work with relative paths. Fixed it. Let me know if you still see any issues.
",junegunn,2015-04-04 00:21:28
177,2015-04-04 02:21:28,"It works on first go now :+1: But after I use it once, it changes the directory to that relative path and any subsequent runs will use that. This wasn't the behavior before as far as I remember. Is there a way to get it to not change?
",Randuin,2015-04-04 00:21:28
177,2015-04-04 02:46:17,"It is not supposed to work that way. So you mean `:pwd` is changed after `:FZF RELPATH`?
",junegunn,2015-04-04 00:21:28
177,2015-04-04 02:50:07,"Yes
",Randuin,2015-04-04 00:21:28
177,2015-04-04 02:57:21,"Strange, it's handled in the code and I can't seem to reproduce the case. I just pushed another commit that may or may not fix your problem. Please update and let me know of the exact scenario that I can follow to reproduce the problem.
",junegunn,2015-04-04 00:21:28
177,2015-04-04 04:29:55,"That worked! Thanks so much!
",Randuin,2015-04-04 00:21:28
177,2015-04-04 04:43:45,"Great. Thanks!
Now I see that the previous code had a bug. It didn't restore the current path when FZF is started w/o tmux and user interrupted the process (ESC or CTRL-C). I should really be adding proper test cases for vim plugin.
",junegunn,2015-04-04 00:21:28
176,2015-04-03 14:30:00,"Hi,
Using `fzf-tmux`, I often end up with some ""ghost results"" in the pane. The screenshot below explains it all: I only have a single result, nonetheless, the 4 row on top of the pane are visible but not accessible (and only match a previous state of the query).

![screen shot 2015-04-03 at 16 07 07](https://cloud.githubusercontent.com/assets/657654/6983471/88767e76-da1e-11e4-8148-a28e3dde1a9d.png)

In this particular case, I was `Ctrl-T`'ing.

To be honest, I don't know whether this one is on iTerm2, tmux or fzf.

Some version info:
iTerm2: Build 2.0.0.20141103
tmux: 1.9a
fzf: 0.9.7
",xcambar,2015-04-03 14:44:27
176,2015-04-03 14:33:39,"What is your `$TERM`? It should be either `screen` or `screen-256color` on tmux.
See: https://github.com/junegunn/fzf#rendering-issues

Excerpt from: http://tmux.cvs.sourceforge.net/viewvc/tmux/tmux/FAQ

<S_CODE_TOKEN>
",junegunn,2015-04-03 14:44:27
176,2015-04-03 14:40:08,"<S_CODE_TOKEN>

Here's the contents of the terminfo definition:

<S_CODE_TOKEN>

So it's basically a `xterm-256color`.

But I'm using `+2` as a default option.
",xcambar,2015-04-03 14:44:27
176,2015-04-03 14:44:27,"Yeah, it's not allowed on tmux. There was a similar inquiry recently. See here:
https://github.com/junegunn/fzf/issues/77#issuecomment-84417580
",junegunn,2015-04-03 14:44:27
176,2015-04-03 14:53:25,"Fixed $TERM to be `screen-256color-italic`, as per @alexpearce's blog post (https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/)

Works like a charm.
",xcambar,2015-04-03 14:44:27
176,2015-04-03 14:54:00,"Congrats! :+1: 
",junegunn,2015-04-03 14:44:27
176,2016-02-25 17:38:37,"@xcambar I use a custom term type and have run into this issue with multiple apps. A nice easy fix is to simply setup an alias in your shell to set the term to whatever that program expects... as a one off. This has been working great for me so far:

<S_CODE_TOKEN>

I'm using zsh, but should work wherever.
",adambair,2015-04-03 14:44:27
175,2015-03-31 18:10:21,"It's kind of a edge case. I'm using the homebrew version of fzf (which is an _old_ version):

<S_CODE_TOKEN>

Here is the thing, I use config files from the repo directly with `bundle https://github.com/junegunn/fzf shell`. When using ^R I have this message `unknown option: --toggle-sort=ctrl-r`. This option seems to have been introduced with #173.

The best solution for me would be to update the homebrew package. Have you some workflow to update homebrew version? Note that I have the same problem with the [aur package](https://aur.archlinux.org/packages/fzf/) on Archlinux.

I would be glad to help if you need, I have become quite dependant to fzf.
",casimir,2015-04-02 16:22:31
175,2015-04-01 00:44:50,"I'm planning to release a new homebrew version when #137 is closed because I do not want to push another patch version later (0.9.7-1) just because of the change in the vim plugin part of the repo. But it's getting delayed as with the progress of neovim itself. Is there any reason you need to separately use binary from homebrew, and extension code from the tip of the repo? I can't always guarantee that they are compatible across commit history.
",junegunn,2015-04-02 16:22:31
175,2015-04-01 12:48:47,"Okay, I'll push a new version, but I'll enable `--HEAD` option as well so that the users can install the latest version using Homebrew.

<S_CODE_TOKEN>
",junegunn,2015-04-02 16:22:31
175,2015-04-01 13:00:21,"https://github.com/Homebrew/homebrew/pull/38270
",junegunn,2015-04-02 16:22:31
175,2015-04-01 13:02:48,"Maybe this is a perversion of using tools working in the ""all on Github today"" way (antigen, vim-plug, ...) I'm using several machines and OSes daily so I try to keep my `.zshrc` as small as possible, counting on internet for the rest. Since a lot of projects I use keep the _master_ branch usable it works quite well.

Is the Go version in the same state? I systematically have Go set up on my machine so has a workaround I use `go get github.com/junegunn/fzf/src/fzf`. It seems to work well.

By curiosity why don't you want to release several patches? Some automated systems just used git tags (releases if you ""talk Github"").

Last thing thank you very much for vim-plug and fzf. It just work and that's a breeze after spending so much time searching for THE tool, but finding only incomplete or buggy ones.
",casimir,2015-04-02 16:22:31
175,2015-04-01 13:09:55,"Hum too late... Thank you though! I'm still interested if you have some minutes to answer my questions in the previous comment. If not feel free to close this issue :-)
",casimir,2015-04-02 16:22:31
175,2015-04-01 15:19:58,"> Is the Go version in the same state?

I had to keep the master branch stable when fzf was developed in Ruby. But now fzf is mainly in Go and distributed as a compiled binary, I don't have to. And that is kind of relieving to me. But I still do not push an incomplete or unstable set of commits to the master branch at least not intentionally. However, there's no guarantee at all on the backward compatibility of a new experimental feature pushed to master until it's officially released. I may decide to change its specification, or even decide not to have it.

> I use go get github.com/junegunn/fzf/src/fzf. It seems to work well.

Once the above PR to Homebrew is merged, `brew reinstall fzf --HEAD` will build a new binary from the latest source. No need to set up Go environment.

> By curiosity why don't you want to release several patches?

Well, it's basically a personal preference and there are some practical reasons as well. I do not prefer softwares that release new versions _too often_. For a user, updates can be bothersome. And although frequent releases can be a sign of active development, on the other hand, it can give the impression that the software is unstable and has to be fixed constantly (right or wrong).

Sending pull request to Homebrew is the extra work that I have to do, that I don't like to do. And there is [code in install script for fish](https://github.com/junegunn/fzf/blob/master/install#L212) that I'm particularly concerned about that prepends the path of fzf to a persistent global variable. It's okay when the user manually cloned fzf repository to a fixed path (e.g. `~/.fzf`) But different versions of fzf installed with Homebrew will have different paths, and if a fish user keeps running the install script every time fzf is updated, the variable will have paths that are no longer used. There should be a better way to handle this, but I know little about fish and do not care much about it, I didn't look further into it. Once the PR is merged, I'll update the README to promote the use of `--HEAD` option so that the path is fixed to `/usr/local/Cellar/fzf/HEAD`.

> Last thing thank you very much for vim-plug and fzf.

Thanks :) I'll let you know when the new version is ready on Homebrew.
",junegunn,2015-04-02 16:22:31
175,2015-04-01 22:24:14,"Interesting answers thanks.

About your `$PATH` problem, just a quick thinking without looking at the script, what you see in a lot of packages for UNIX are symbolic links, they have less side effect than changing `$PATH`. Most homebrew packages use this to put binaries in the system wide bin directory ([e.g. for Go](https://github.com/Homebrew/homebrew/blob/master/Library/Formula/go.rb#L89)). On most Linux distributions it is used to handle several version of libraries or runtimes (Java is a good example) without bothering the user.

So summarized symbolic links are nice for 2 things:
- handling several version transparently without `$PATH` modification: `/usr/bin/fzf -> /usr/local/Cellar/fzf/0.9.1/bin/fzf` vs `/usr/bin/fzf -> /usr/local/Cellar/fzf/0.10.0/bin/fzf`
- simplify versionning: `/usr/lib/libc.so -> /usr/lib/libc.6.so -> /usr/lib/libc.6.17.so`

Everyday example (for me at least), in a shell `gcc` resolves to the most up-to-date version and `gcc-4.8` resolves to the 4.8 version. Both are in fact symbolic links in `/usr/bin`.

If you want more details I'd glad to help you.
",casimir,2015-04-02 16:22:31
175,2015-04-01 23:08:45,"I don't want to require root previlege and touch system-wide bin directories when installing fzf. So that's why it was designed to modify the user's `$PATH`.
",junegunn,2015-04-02 16:22:31
175,2015-04-02 16:23:16,"The PR is now merged and I updated the README page accordingly.
",junegunn,2015-04-02 16:22:31
175,2015-04-03 11:17:20,"It works perfectly now. Just one last thing before I stop annoying you, with a normal homebrew install /usr/local/bin is owned by the user so you don't actually need root privileges. Anyway thank you for your time.
",casimir,2015-04-02 16:22:31
175,2015-04-03 13:10:25,"Yeah, I know, but you do need root privilege when you first install homebrew itself. :) Well, talking about root privilege on OS X is pointless anyway as Macs are usually personal computers.
",junegunn,2015-04-02 16:22:31
174,2015-03-31 16:55:36,"Hey! I'm a big vim/tmux/zsh user, and I have a custom tmux config setup that lets me switch between tmux panes using CTRL + HJKL movements. 

So I'd like to remap the CTRL-HJKL bindings for fzf to use something different... Is this possible? I tried looking here:

https://github.com/junegunn/fzf#using-the-finder

and editing the following file:

 ~/.fzf/shell/key-bindings.zsh   

but couldn't see a way to do it... thanks!
",bradparks,2015-03-31 17:21:50
174,2015-03-31 17:07:24,"Nope, remapping of keys are not supported at the moment.

By the way, if I understood you correctly, you have CTRL + HJKL bindings on your tmux config, and they should shadow the same key bindings from fzf. Then what exactly is your problem and what do you want to achieve? If being unable to use CTRL-JK from fzf is the problem, you can use CTRL-NP or arrow keys instead, and backspace is equivalent to CTRL-H. CTRL-L redraws fzf screen, but it's undocumented and rarely needed.
",junegunn,2015-03-31 17:21:50
174,2015-03-31 17:21:50,"hey.... i was hoping to be able to switch them to more VIM like keystrokes if possible... Since using CTRL-JK clashes with my current tmux config. Maybe ALT-JK was what I was hoping, but no worries...  I'll just use CTRL-NP instead.... much appreciated! and fzf seems awesome so far, so thanks for the great work!
",bradparks,2015-03-31 17:21:50
174,2015-03-31 17:30:16,"I see, maybe I'll consider allowing remapping of the keys in the future, but most of the keys (except for CTRL-JK!) are strictly based on the default readline keybindings, so it's not really urgent I guess. And hey, one can say that CTRL-NP are equally as vim-like as JK (they're for auto-completion) :sunglasses: 
",junegunn,2015-03-31 17:21:50
174,2015-05-21 15:22:22,"It's now possible in 0.9.12 with `--bind` option:

<S_CODE_TOKEN>
",junegunn,2015-03-31 17:21:50
174,2015-05-21 15:42:54,"cool... thanks... definitely a nice feature.... much appreciated!
",bradparks,2015-03-31 17:21:50
173,2015-03-31 05:24:29,"`--no-sort` option makes sense when the original order of the input is important. Command history (`CTRL-R`), [commit history](http://junegunn.kr/2015/03/browsing-git-commits-with-fzf/), and pre-sorted list from [z](github.com/rupa/z) or [fasd](https://github.com/clvv/fasd) are good examples. However, even in those cases, sometimes you do want the output to be properly sorted. So I want to have a way to enable sort after fzf is started, yet I do not wish to pick a default key for doing that. So what I suggest is to add `--toggle-sort=KEY` option that allows the user to choose a key for toggling sort.

<S_CODE_TOKEN>
",junegunn,2015-03-31 13:07:45
172,2015-03-31 05:15:24,"For consistency, fzf should print an empty line even when it's finished without starting the interactive finder if `--expect` option is set.
",junegunn,2015-03-31 13:06:19
171,2015-03-30 21:16:57,"Turns out fish key bindings support different modes, so that adding the functionality was a matter of binding the given shortcuts also to the insert mode.
",oschrenk,2015-04-25 17:17:46
171,2015-03-31 01:05:38,"Hi, thanks. Looks like Fish 2.2.0 is not yet officially released, and the code causes errors on Fish 2.1.2, which I have. (See: https://travis-ci.org/junegunn/fzf/builds/56479126#L1387-L1487) Can you make the code conditionally executed only on Fish 2.2.0 or above? Or maybe we can simply suppress the error messages.
",junegunn,2015-04-25 17:17:46
171,2015-03-31 21:37:07,"That makes sense. Will do.
",oschrenk,2015-04-25 17:17:46
171,2015-04-25 11:12:59,"Wrapped the mode bindings in an `if bind -M insert > /dev/null 2>&1` which should do the trick and push forced the changes.
",oschrenk,2015-04-25 17:17:46
171,2015-04-25 17:14:52,"Removed comment. 
",oschrenk,2015-04-25 17:17:46
171,2015-04-25 17:17:52,"Thank you!
",junegunn,2015-04-25 17:17:46
170,2015-03-30 09:58:31,"Following up on https://github.com/junegunn/fzf/issues/168,
this PR fixes the snippet using `git ls-tree`

`find` had an incorrect syntax.
",xcambar,2015-03-30 12:45:06
170,2015-03-30 10:05:58,"It works as expected on OS X and Linux, what problem did you have?
",junegunn,2015-03-30 12:45:06
170,2015-03-30 12:18:07,"After more digging, it seems to be the same issue that appeared in https://github.com/junegunn/fzf/pull/97.

My `find` is aliased to `noglob find`, which leads to the following error:

<S_CODE_TOKEN>

I've updated the PR accordingly
",xcambar,2015-03-30 12:45:06
170,2015-03-30 12:45:06,"Still doesn't work. I'll come back with something more solid.
",xcambar,2015-03-30 12:45:06
170,2015-03-30 12:45:43,"@xcambar you way want to have `unsetopt NOMATCH` in your zshrc somewhere. This results as the `*` getting past to find as is rather than zsh throwing an error about it not matching a glob.
",george-b,2015-03-30 12:45:06
170,2015-03-30 12:48:34,"@george-b Works perfectly, thanks.
",xcambar,2015-03-30 12:45:06
169,2015-03-30 05:45:04,"This is using Ubuntu 14.04, fzf installed from commit 8a4db3c, and fish version 2.1.1, installed using the instructions in the README.

For some reason, starting fzf with CTRL+T or ALT+C is extremely slow (>30s), where typing `fzf` in manually starts it almost immediately.

Is there anything I can provide to help debug this?
",bright-star,2015-04-22 05:33:11
169,2015-03-30 10:18:52,"Unfortunately, I don't use fish and I know very little about fish so I'm not sure if I can fix the problem. I could use some help.
",junegunn,2015-04-22 05:33:11
169,2015-04-22 05:35:08,"For some reason, fish buffers the entire list when a function is used as the input:

<S_CODE_TOKEN>

I was able to remove the buffering delay by inlining the subroutines.
",junegunn,2015-04-22 05:33:11
169,2015-04-22 23:45:08,"Tested working on my side also. Thanks.
",bright-star,2015-04-22 05:33:11
168,2015-03-29 22:01:13,"Hi,
I can't have the tip about using `git ls-tree` (https://github.com/junegunn/fzf#git-ls-tree-for-fast-traversal) to work. I'm afraid it's outdated since `fzf` has been rewritten in Go.

Honestly, my only clue here is the `declare -f fzf` statement, which, according to SO, outputs the contents of a function. But as `fzf` is a binary executable, it doesn't realy make sense to me...

Correct me if I'm wrong, and if I am, I would nonetheless appreciate some help on getting the snippet to work under zsh 5.0.7.

Thanks for the project and the others, they're great!
",xcambar,2015-03-30 01:15:10
168,2015-03-30 01:16:58,"You're right, it was an outdated snippet, thanks for letting me know :)
I replaced the snippet with an equivalent `$FZF_DEFAULT_COMMAND`.
",junegunn,2015-03-30 01:15:10
167,2015-03-29 01:34:35,"Since the last update `FZF ~` isn't working for me. It just tells me that my home directory is an ""unknown option"". Is it possible a typo got inserted somewhere?
",mclearc,2015-03-29 02:14:24
167,2015-03-29 02:15:44,"Ha, you're right. Thanks for the report. It's fixed in the last commit.
",junegunn,2015-03-29 02:14:24
167,2015-04-17 16:54:02,"@mclearc was this report only related to vim?

I just checked out  fzf today (cloned the repo) and used this command; but fzf will tell me the same as you. (I use zsh)

 % fzf ~
unknown option: /home/heinrich
",Shurakai,2015-03-29 02:14:24
167,2015-04-17 16:56:25,"fzf does not take any arguments unlike `:FZF` on Vim. See `fzf --help` or `man fzf`.
",junegunn,2015-03-29 02:14:24
167,2015-04-17 17:10:01,"@Shurakai - I think this was a bug in FZF vim. With the current commit it works both in vim (nvim) and zsh for me. 
",mclearc,2015-03-29 02:14:24
166,2015-03-28 07:20:50,"I'm starting to use some of the vim examples in the wiki in my workflow. This is probably a dumb question, but does anyone know why FZFTag isn't working for me?

OS: OSX Yosemite 10.9.5
Vim 7.3 that came with installed.
Shell: fish, version 2.1.1-1205-gdd595dd

I'm assuming I just type :FZFTag, and it should bring up a list of functions from my tags file. The error I'm seeing instead is:

awk: syntax error at source line 1
 context is
    clear 2> >>>  /dev/null/^ <<< clear 2> /dev/null/ { print \$1 }
awk: bailing out at source line 1

I don't think it's because vim version is too old, since I see a similar issue on Ubuntu where I'm running a more current version of vim.

Thanks!
",LmtEdition,2015-03-28 19:03:11
166,2015-03-28 19:00:46,"Yeah, it didn't work for me either. Now here's the working version.

<S_CODE_TOKEN>

Thanks for the report!
",junegunn,2015-03-28 19:03:11
165,2015-03-27 21:05:32,"So:

<S_CODE_TOKEN>

Will do fzf search from within /etc instead of ~. But:

<S_CODE_TOKEN>

Note the space - will still do fzf from within ~.
",quodlibetor,2015-05-11 08:25:57
165,2015-03-28 00:45:58,"Thanks, makes sense. I don't like zsh version deviates from bash and fish versions, but what can we do? 

However, there are some issues in your patch.
- Non-tmux version is not updated accordingly
- Does not use 2-space indentation
- No test cases
- Does not work if the prefix does not have trailing slash
  - `ls ~<CTRL-T>`
  - `ls ~USERNAME<CTRL-T>`
  - `ls PATH<CTRL-T>`
- Your code looks at RBUFFER as well, which is nice, but does not yield the correct result.
  - `ls PA<CTRL-T>TH`

I can understand some of these issues are not easy to address at the moment as the current version uses `tmux send-key`. We probably should replace the use of `send-key` with the new `fzf-tmux` script, not just in zsh, but also in bash and fish.
",junegunn,2015-05-11 08:25:57
165,2015-03-28 15:23:12,"Thanks for looking at this! I admit I only checked what I actually use, but I agree with all your critiques.

I don't know anything about bash and fish completion, although I'm willing to try.

I can add test cases for all the issues you brought up, making them work.
",quodlibetor,2015-05-11 08:25:57
165,2015-03-28 16:13:36,"Another point we have to consider is that `--multi` option is enabled for CTRL-T, so we are allowed to choose multiple entries. The code should attach the prefix to every item selected except the first one which already has the prefix.

> I don't know anything about bash and fish completion, although I'm willing to try.

I don't think it's really possible with bash (there's no such thing as `$LBUFFER`), but it's okay since bash has fuzzy completion that can be used instead (`ls PATH/**<TAB>`). I don't know nor care much about fish. Honestly I'm a bit tired with dealing with non-standard behaviors of it. You can try if you want, but it's okay to skip it.

> I can add test cases for all the issues you brought up, making them work.

Thanks. Let's first try to fix the issues I mentioned here, then I'll tell you how to write test cases or I can just do it myself.
",junegunn,2015-05-11 08:25:57
165,2015-03-28 16:28:41,"Sounds great!
",quodlibetor,2015-05-11 08:25:57
165,2015-05-11 08:25:57,"Hi, this PR is superseded by the new zsh completion with empty trigger sequence support. See #232. Thanks.

<S_CODE_TOKEN>
",junegunn,2015-05-11 08:25:57
164,2015-03-27 14:17:36,"Using OSX Yosemite in bash with vim mode, `Alt-C` just prints out `ç`.

`CTRL-T` & `CTRL-R` work perfectly.

Thanks for a great tool and really awaiting the neovim support!
",simonweil,2015-03-28 20:12:06
164,2015-03-27 14:46:39,"If you use iterm2, try this (excerpt from https://iterm2.com/faq.html)

> Q: How do I make the option/alt key act like Meta or send escape codes?
> 
> A: Go to Preferences->Profiles tab. Select your profile on the left, and then open the Keyboard tab. At the bottom is a set of buttons that lets you select the behavior of the Option key. For most users, Esc+ will be the best choice.
",junegunn,2015-03-28 20:12:06
164,2015-03-27 16:39:51,"It's important to note that if you have a GB keyboard; this will stop you being able to use the `#` character with `alt+3` in iTerm. If you want to do this, you'll need to change your keyboard to Australian, which is exactly the same except `£` and `#` are swapped.
",johnhamelink,2015-03-28 20:12:06
164,2015-03-28 20:11:52,"Works great, thanks!
Maybe add this info to the readme?
",simonweil,2015-03-28 20:12:06
164,2016-04-27 08:49:00,"Note that you don't necessarily need to change the behavior of the `Alt` key if you use it to type special characters. You may just use `Esc+C` instead of `Alt-C` to do fzf's fuzzy directory change.
",varepsilon,2015-03-28 20:12:06
163,2015-03-27 12:12:13,"There has been demands for custom key mappings inside fzf (#139, #96, #61) mostly for better integration with Vim. So here's a simple idea that might meet such requirements.

Let's say we add an option that takes a comma-separated list of key chords, such as `ctrl-v`, `ctrl-t`, or `alt-a`. I can't think of a good name for this imaginary option, but let's call it `--select-with` for now.

<S_CODE_TOKEN>

Then fzf will allow me to select the item with any of the given key chords in addition to the default enter key. But in this case, fzf will print the name of the key chord used as the first line of the output.

<S_CODE_TOKEN>

Now we know which key was pressed, and our script can use the information to decide what to do next.

There are some questions to be answered:
1. What should be the name of the option?
   - `--select-with`
   - `--select-key`
   - `--selector`
   - `--expect`
   - `--using`
   - `--with`
   - `--via`
   - `--on`
2. Should we allow enter key by default? Or should we demand that the user specify enter key (or ctrl-m) as well? (e.g. `--select-with=alt-t,enter`)
   - I don't think it makes a lot of sense to disable enter key
3. When this option is used with `--print-query`, which should be printed first, query or the key pressed?
   - You type in the query, then press the key chord, so query should be printed first
",junegunn,2015-03-28 18:29:35
163,2015-03-28 18:29:35,"Added `--expect` option in 0.9.6.
",junegunn,2015-03-28 18:29:35
163,2015-03-28 19:20:46,"I updated to 0.9.6 but get `unknown option: --expect`. The vim plugin also fails.
",Tranquility,2015-03-28 18:29:35
163,2015-03-28 19:21:42,"@Tranquility Did you rerun the install script? It'll download the new binary.
",junegunn,2015-03-28 18:29:35
163,2015-03-28 19:23:59,"Hmm, maybe I should check if the version is >= 0.9.6 from inside vim plugin.
",junegunn,2015-03-28 18:29:35
163,2015-03-28 19:24:49,"`fzf --version` tells me that I am at 0.9.6.
",Tranquility,2015-03-28 18:29:35
163,2015-03-28 19:25:52,"@Tranquility What's the output of `:!fzf --version` from inside vim?
",junegunn,2015-03-28 18:29:35
163,2015-03-28 19:28:55,"It is not related to vim. Version 0.9.6 does not contain the option, even `fzf --help` does not list it.
",Tranquility,2015-03-28 18:29:35
163,2015-03-28 19:30:51,"That's super strange. I have tested it both on OS X and Linux. Can you show me the md5 hash of the binary installed?
",junegunn,2015-03-28 18:29:35
163,2015-03-28 19:36:47,"Oh, I am sorry, I found the problem. I built it from source yesterday. So the version from by $GOPATH was used which already had the new version number. After I removed the file it uses the correct binary.
",Tranquility,2015-03-28 18:29:35
163,2015-03-28 19:38:04,"Ah, I see. No problem :) Try CTRL-T/X/V from `:FZF` command.
",junegunn,2015-03-28 18:29:35
163,2015-03-28 19:38:58,"It's awesome!
",Tranquility,2015-03-28 18:29:35
163,2015-03-28 19:47:47,"Cool, thanks!
",junegunn,2015-03-28 18:29:35
163,2015-03-29 02:29:14,"FYI, there was a bug in the new vim plugin :pensive: (#167) Please update again.
",junegunn,2015-03-28 18:29:35
162,2015-03-27 02:39:30,"See: http://unix.stackexchange.com/questions/45190/grep-color-adds-ansi-code-esck-this-can-change-displayed-text

I'll make a quick patch and update the binary with `0.9.5-p1`.
",junegunn,2015-03-27 03:35:16
161,2015-03-27 01:27:33,"Hi,
Thank you for this great work!
I used ""Unite file_rec/async"" in neovim to find files before.
After I found fzf, this is now my favorite. It is super fast.

Could I know how to let fzf follow the symbolic links?
I checked the man page and command help and did not find any information about that.
",roycyt,2015-04-14 17:16:50
161,2015-03-27 04:14:08,"Hi, fzf currently does not work on neovim, I'll probably be working on neovim support during the weekend (see #137).

Having said that,
- fzf works as a unix filter, like grep, so you have to feed some input into it. e.g. `seq 10000 | fzf`
- But since most people use fzf with the list of files, I made fzf to spawn its own `find` process when input is not explicitly given.
  - The hard-coded default command is `find * -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null`
- You can override the default command with `$FZF_DEFAULT_COMMAND`

<S_CODE_TOKEN>
- And `:FZF` command of Vim plugin is built upon this behavior. You can make it follow symlinks by setting FZF_DEFAULT_COMMAND to the command that works that way.
- Or you can define your own command with `fzf#run()` function as described in the readme page. (see https://github.com/junegunn/fzf#usage-as-vim-plugin for details)
",junegunn,2015-04-14 17:16:50
161,2015-04-14 17:16:50,"Try this (added `-L`):

<S_CODE_TOKEN>
",junegunn,2015-04-14 17:16:50
160,2015-03-26 23:34:14,"I'm using the vi bindings in fish, mostly via fzf-tmux. The key bindings only work in normal mode. Is it possible to allow them also in insert mode thus saving me a few keystrokes?
",oschrenk,2015-03-27 06:07:28
160,2015-03-27 04:03:56,"Hi, actually I'm not really familiar with fish and didn't even know that fish has vi mode. Feel free to send me a pull request for that.
",junegunn,2015-03-27 06:07:28
160,2015-03-27 05:51:28,"Will try, but can't promise.
",oschrenk,2015-03-27 06:07:28
160,2015-03-27 06:07:28,"No pressure. FYI, vi mode on bash has the same problem. I'll close the issue for now. Thanks!
",junegunn,2015-03-27 06:07:28
159,2015-03-26 22:33:16,"In a directory, I'm doing something like `ag mysearchstring | fzf`
Is it possible to bind a shortcut to open vim at the line number of the result ?
",naseer,2015-03-27 16:06:04
159,2015-03-27 03:59:26,"Yes we have the filename and the line number, it's trivial to write a shell script for that

<S_CODE_TOKEN>

By the way, I tried to enable colored output with `ag --nogroup --color ""$@"" | fzf --ansi`, but realized the current version of fzf does not correctly remove some ANSI escape sequences. This will be fixed in the next release. (#162)
",junegunn,2015-03-27 16:06:04
159,2015-03-27 10:33:50,"@naseer sorry for offtopic, but if you use ag, you might also want to try `pt` (the platinum searcher). On some inputs it's even faster than ag (however lacks few options).
",balta2ar,2015-03-27 16:06:04
159,2015-03-27 15:55:49,"@junegunn - thanks, works like a charm, although I renamed it to agv in my bashrc :)
Now all it needs is to go to the next result from within vim - if it's possible :)

@balta2ar thanks for the `pt` tip - It does seem slightly faster
",naseer,2015-03-27 16:06:04
159,2015-03-28 18:28:38,"@naseer fzf 0.9.6 is released with the fix. Now you can have properly colored output with `ag --nogroup --color ""$@"" | fzf --ansi`.
",junegunn,2015-03-27 16:06:04
159,2015-11-10 07:42:56,"For **zsh** people

<S_CODE_TOKEN>

Or if you use [bogado/fileline](https://github.com/bogado/file-line)

<S_CODE_TOKEN>

Note: _zsh_ does not split by whitespace and array index is 1-based by default.
",ldong,2015-03-27 16:06:04
158,2015-03-26 20:29:56,,mrap,2015-03-27 00:14:02
158,2015-03-27 00:14:24,"Merged, thanks!
",junegunn,2015-03-27 00:14:02
157,2015-03-25 10:39:26,"Extended-search mode is very useful (enough so that is should probably be added to the default `.fzf.zsh`), but I totally forgot that the explanation of the syntax is in https://github.com/junegunn/fzf today, while searching for how to make matches exact. 

Could the extended-search syntax be added to the `--help` flag, or a `man` page? I do like very much that the help text currently fits in one screen, so perhaps it could be printed with `--help-extended`, or something like that.
",strokirk,2015-03-27 12:41:30
157,2015-03-25 15:56:35,"Thanks for the suggestion. I agree that the instruction should be accessible from the command-line in some way. Now as fzf is distributed as a compiled binary, I probably shouldn't release a new version just to update `--help` message, and also I feel the same about what you said about the length of help message. So, I like the idea of providing man page though I have no experience with man pages. I'll see what I can do.
",junegunn,2015-03-27 12:41:30
157,2015-03-25 18:13:22,"I added a basic man page. The updated install script will generate `.fzf.{bash,zsh}` that will extend `$MANPATH` so that `man fzf` is available without root privilege. Please try it and let me know what you think.
",junegunn,2015-03-27 12:41:30
157,2015-03-30 10:48:39,"Yes, this seems to work perfectly!
",strokirk,2015-03-27 12:41:30
156,2015-03-24 13:15:47,"Since fzf is now very fast, I started using it to draw items from locate output. I find it a little overwhelming to type `locate / F` each time, so I've added fzf-locate-widget similar to fzf-history-widget and I've bound it to 'ALT-C'. The change is pretty simple, could you consider including it into default (zsh only)?

<S_CODE_TOKEN>
",balta2ar,2015-03-24 15:26:48
156,2015-03-24 15:26:48,"Thanks for the suggestion and I like it. But I'm not sure if I want to expand the set of default keybindings as making sure those work as expected on various platforms (and fixing them) has been a bit stressful for me. And if I'm going to add it, I want to make it available on all three shells (bash, zsh, fish) not to surprise the users. Another point to consider is that locate database is not available by default on OS X.

So for now, I'll just keep the default set small. But feel free to add your code to [the wiki page](https://github.com/junegunn/fzf/wiki/Examples) (write permission is open to anyone), or discuss it with @D630 who took the initiative of maintaining [fzf-contrib](https://github.com/D630/fzf-contrib) repository.
",junegunn,2015-03-24 15:26:48
156,2015-03-24 15:28:22,"By the way, I also have a locate key binding in my tmux configuration.

<S_CODE_TOKEN>
",junegunn,2015-03-24 15:26:48
156,2015-03-24 16:22:20,"Thank you! I've added the recipe to the wiki page. I'll also try to use your tmux alias along with my version to see which works better for me.
",balta2ar,2015-03-24 15:26:48
156,2015-03-24 17:03:14,"Thanks. Your version is better that it uses $LBUFFER as the initial query. But I'm a bash user, so :)
",junegunn,2015-03-24 15:26:48
155,2015-03-22 16:14:41,,junegunn,2015-03-22 16:24:39
155,2015-03-22 16:29:26,"This is a quick fix to 0.9.5, and since 0.9.5 was released just a few hours ago, I'll just update the binaries. I don't want to release yet another version just because of this.
",junegunn,2015-03-22 16:24:39
154,2015-03-22 00:21:45,"I think it can be helpful if there's a way to specify an escape sequence that represents a newline but which does not separate the text into different options. 

I can get 90% of the way there (by defining the escape sequence myself and splicing it in before and replacing the output with newlines), but I need support inside fzf to show the entry as a multiple line entry with the whole thing being one item. 

But as a workaround having a big ugly placeholder escape code that I can see inside the menu is still more or less usable.

(Example use case -- I want to use fzf with my shell history, and the shell history can contain multi line commands that would be cool if I can reproduce faithfully, rather than what `fc -l 1` does which is just print `\n` for them)
",unphased,2015-03-22 05:36:25
154,2015-03-22 02:46:25,"Related: #121 

Thanks for the suggestion but it's non-trivial to implement multi-line entry display and it will make many parts of the code much more complex. Think about how we should handle long-line truncation and horizontal scroll, multi-part highlighting in extended-search mode possibly spanning multiple lines, page scroll, terminal resize, mouse clicks, ANSI color highlighting, etc. I have very limited time to work on fzf, so I can't say anything about it right now.
",junegunn,2015-03-22 05:36:25
154,2015-03-22 05:36:25,"Yep, and I definitely can't fault you for making the decision originally (or even now) to say that newline is the de facto standard delimiter.

My workaround works fine... I will close since you left #121 open.
",unphased,2015-03-22 05:36:25
153,2015-03-22 00:10:32,"I feel dumb for writing dumb questions like this, but I really can't figure out what these options are, and they are littered all over the helper shell scripts and examples here. It's not listed in the `--help` text. What does `+m` do? 
",unphased,2015-03-22 05:26:49
153,2015-03-22 00:12:18,"I think perhaps `+m` is `do not allow multi select`? I figured omitting `-m` would accomplish that, though, but I think I understand that it is to override the FZF_DEFAULT_OPTS setting `-m`.

Now I am stumped by the `-n, --nth=N[,..]` option. 

I got as far as to understand that `2..` is being used to indicate that the value to be used for search scope is the second field onward (which makes sense since we want to skip the first field in output of `fc -l`), but why the trailing `,..`?
",unphased,2015-03-22 05:26:49
153,2015-03-22 01:33:01,"> I think perhaps +m is do not allow multi select? I figured omitting -m would accomplish that, though, but I think I understand that it is to override the FZF_DEFAULT_OPTS setting -m.

Correct! It's a shared convention of some unix tools to unset an option (`-` prefix for setting, `+` for unsetting, and `--no-LONGOPT`) so it's not explicitly documented. And you're right that its purpose is to explicitly override possible `-m` in FZF_DEFAULT_OPTS.

> but why the trailing ,..?

To allow search against the first field as well. Sometimes there are many similar entries in history, and you want you pinpoint one using its index number. Then you might ask why we use `--nth` option in the first place. The reason is to allow some flexibility in `--extended` search mode. If you have `--extended` or `--extended-exact` in FZF_DEFAULT_OPTS, then you can use patterns like `^git` or `pull$`. So for example, let's say we have this in our history:

<S_CODE_TOKEN>

Having both `2..` and `..` allows me to do both `^78` (`..`) and `^git` (`2..`). Make sense?

EDIT: some typos.
",junegunn,2015-03-22 05:26:49
153,2015-03-22 05:26:49,"@junegunn Makes sense! :+1: Thanks for taking the time to clarify. Awesome
",unphased,2015-03-22 05:26:49
153,2015-04-23 04:38:59,"Can I put even more fields to the -n option? like `-n2..,4..,..`

I have a special history logger for my z shell and it stores many fields (timestamp, command, working dir of command, terminal environment name (whether i'm on my mac or putty, in the VM, over SSH, inside tmux), which of /dev/ttyX) so i figured it would be neat if I could have it let me use those anchors like `^git` and `^Thu Apr 23`... 

I mean i guess it is practically moot since i have so much raw information presented to fzf that I can just keep typing to narrow it down. 
",unphased,2015-03-22 05:26:49
153,2015-04-23 04:49:44,"> Can I put even more fields to the -n option? like -n2..,4..,..

Yes you can, there's no limit to the number of field expressions.
But the search will be proportionally slow.
",junegunn,2015-03-22 05:26:49
152,2015-03-21 18:45:59,"I am wondering if there is some bad interaction with my tmux config or if this is expected behavior. When I use a bare shell and use the Ctrl+T binding, `fzf` is insanely fast, and it's perfect. When I am in tmux, it splits and starts working just as fast, but when I select anything, it will take about 2 seconds before the item I selected actually gets entered into the command line. 

I think I can workaround it by disabling fzf-tmux but maybe there is something for me to fix here.
",unphased,2015-03-21 19:07:08
152,2015-03-21 19:07:08,"I can't reproduce this so I guess I should close it. 

I should also mention that this is on OS X (on a system that's been upgraded from Mountain Lion to Mavericks to Yosemite so it's probably got decent cruft buildup).

What I also did was I added `TERM=screen-256color` to all the `fzf` calls made in `~/.fzf.zsh`. May have had something to do with it, but doubtful on that.
",unphased,2015-03-21 19:07:08
152,2015-03-22 02:32:02,"I'm mainly on OSX with tmux but haven't experienced the problem. Anyway thanks for the report.
",junegunn,2015-03-21 19:07:08
152,2015-03-22 05:27:45,"I have seen it a few more times but it's mostly a rare occurrence. Might be some kind of interaction with tmux. I will be back if I can gain any more insight into this. Hopefully I will be using fzf a lot more in the future because it's a lot better than my system I've used for years which is `hist | less` (hist is my own python script that prettifies my custom zsh history logger) then typing regexes into less. The really cool thing is how fzf can replace less and other programs in a lot of situations.
",unphased,2015-03-21 19:07:08
152,2015-04-23 05:04:57,"I upgraded fzf on OSX (which means my $TERM override got blown away) which brought back the intermittent tmux freezing issue. it always comes back but it might freeze for 4 seconds before the tmux pane becomes responsive again. It isn't tmux itself freezing. It's definitely the longest delay when I use the Alt+C (for fzf-chdir'ing). 

Using top/htop/activity monitor didn't lead anywhere, it's not CPU load... it does allow me to verify that it is not the `find` command that is still running. 

Also this simply does not happen on Linux
",unphased,2015-03-21 19:07:08
152,2015-04-23 05:08:42,"I don't think TERM is the reason of the delay. By the way, you have to use `screen` or `screen-256color` on tmux. Always, not just for fzf. 

Excerpt from: http://tmux.cvs.sourceforge.net/viewvc/tmux/tmux/FAQ

<S_CODE_TOKEN>
",junegunn,2015-03-21 19:07:08
152,2015-04-23 05:14:45,"Okay, I'll deal with that, but yes i dont believe that is related to this issue. 

Dug a little more, with `pstree`: 

During fzf Alt+C run: 

<S_CODE_TOKEN>

Seems fine. 

Just after, during the strange pause, to see what the hell is running inside the same terminal, which is 79934:

<S_CODE_TOKEN>

Ok that is pretty screwed up. Something being run by git (which is run by zsh for the RPROMPT prompt on the right side of my zsh shell)
",unphased,2015-03-21 19:07:08
151,2015-03-19 10:57:08,"I can remove unnecessary copy of pointers when query is empty.
",junegunn,2015-03-19 11:03:27
151,2015-03-19 11:03:18,"<S_CODE_TOKEN>
",junegunn,2015-03-19 11:03:27
150,2015-03-19 04:08:50,"(Previously: #148)

Interpret ANSI color codes from the input.
### Why?

Because... colors.
#### Use cases
- https://github.com/D630/fzf-fs
- https://github.com/peco/peco/issues/188
### How does it look like?
#### `CLICOLOR_FORCE=1 ls -al | fzf`

![fzf-ls](https://cloud.githubusercontent.com/assets/700826/6714463/bae03e64-cddb-11e4-9be1-92a237140d78.png)
#### `CLICOLOR_FORCE=1 ls -al | fzf --ansi`

![fzf-ansi-ls](https://cloud.githubusercontent.com/assets/700826/6714465/bae23afc-cddb-11e4-802e-67795caf821a.png)
#### `screenshotTable.sh | fzf --ansi`

![screenshot-table](https://cloud.githubusercontent.com/assets/700826/6714464/bae0daa4-cddb-11e4-9630-0cb7157d8498.png)
### Then, why hesitate?
- Code complexity
- Performance overhead in reader (_how much?_)
- Increased memory footprint for large input (> 1M items)
- A typical command-line program suppresses ANSI color codes when its output is redirected
  - Must explicitly enable colors.
    - OSX: `CLICOLOR_FORCE=1 ls -al`
    - Linux: `ls --color=always -al`
- :sleepy: 
### TBD
- Should fzf remove ANSI codes from its output?
  - Probably. It might make it less flexible, but more convenient/suitable for most cases.
",junegunn,2015-03-19 11:09:22
150,2015-03-19 04:14:22,"## Simple benchmark

### Reader performance

No noticeable difference when `--ansi` option is not used (good!). Using `--ansi` makes reader about 4-times slower, but it's unrealistic to have 3.5M-line input with ansi colors anyway, so I think it's okay.

<S_CODE_TOKEN>

### Memory footprint

Memory footprint is increased by about 10% even when `--ansi` option is not used, this is due to the additional field in Item struct.

<S_CODE_TOKEN>
",junegunn,2015-03-19 11:09:22
150,2015-03-19 11:09:22,"Wow, thanks to d94dfe08, the initial memory footprint is now 751MB w/o `--ansi` and 1319MB with `--ansi`. This no longer seems like an issue.
",junegunn,2015-03-19 11:09:22
150,2015-03-24 12:26:26,"![fshow](https://cloud.githubusercontent.com/assets/700826/6801581/6265b4ae-d26c-11e4-87de-5421a1be8f31.gif)

<S_CODE_TOKEN>
",junegunn,2015-03-19 11:09:22
150,2015-04-23 04:43:32,"This is amazing, could you comment on how I could get this working? 
",unphased,2015-03-19 11:09:22
150,2015-04-23 04:52:51,"The most recent version of `fshow` can be found [here](https://github.com/junegunn/dotfiles/blob/c6959cd4f/bashrc#L283-L303).

Just put it in your .bashrc/.zshrc and type in `fshow` in a git repository.

Also see: http://junegunn.kr/2015/03/browsing-git-commits-with-fzf/
",junegunn,2015-03-19 11:09:22
150,2015-07-27 10:06:12,"Is there a plan to enable this in the ruby version? I'm stuck to Cygwin and cannot get the go version running anyhow.
",m42e,2015-03-19 11:09:22
150,2015-07-27 10:33:23,"No, the required code change is non-trivial, and I no longer maintain the ruby version. I wonder if it's possible to build the go version on Cygwin. If someone could help me on Windows (or cygwin) support, that'd be super.
",junegunn,2015-03-19 11:09:22
149,2015-03-19 04:04:54,"<S_CODE_TOKEN>
",junegunn,2015-03-19 09:21:42
148,2015-03-18 17:05:10,"Interpret ANSI color codes from the input.
### Why?

Because... colors.
#### Use cases
- https://github.com/D630/fzf-fs
- https://github.com/peco/peco/issues/188
### How does it look like?
#### `CLICOLOR_FORCE=1 ls -al | fzf`

![fzf-ls](https://cloud.githubusercontent.com/assets/700826/6714463/bae03e64-cddb-11e4-9be1-92a237140d78.png)
#### `CLICOLOR_FORCE=1 ls -al | fzf --ansi`

![fzf-ansi-ls](https://cloud.githubusercontent.com/assets/700826/6714465/bae23afc-cddb-11e4-802e-67795caf821a.png)
#### `screenshotTable.sh | fzf --ansi`

![screenshot-table](https://cloud.githubusercontent.com/assets/700826/6714464/bae0daa4-cddb-11e4-9630-0cb7157d8498.png)
### Then, why hesitate?
- Code complexity
- Performance overhead in reader (_how much?_)
- Increased memory footprint for large input (> 1M items)
- A typical command-line program suppresses ANSI color codes when its output is redirected
  - Must explicitly enable colors.
    - OSX: `CLICOLOR_FORCE=1 ls -al`
    - Linux: `ls --color=always -al`
- :sleepy: 
### TBD
- Should fzf remove ANSI codes from its output?
  - Probably. It might make it less flexible, but more convenient/suitable for most cases.
",junegunn,2015-03-19 04:07:58
148,2015-03-18 18:45:41,"+1
",D630,2015-03-19 04:07:58
148,2015-03-19 04:07:58,"I'll continue development on `devel` branch instead of feature-branches. I'll recreate another issue with the same content.
",junegunn,2015-03-19 04:07:58
147,2015-03-18 16:30:46,"### Why?

:open_mouth: 
### Parts that are not Windows-friendly
- ncurses
  - alternatives: termbox, pdcurses
  - Last time I checked, termbox wasn't as stable/feature-complete/performant as ncurses
- `#include <unistd.h>`
  - `isatty`
  - Actually I tried https://github.com/andrew-d/go-termutil before cgo. Didn't work on linux.
  - alternative: https://github.com/mattn/go-isatty
- Default command using `find`
  - Disallow stdin as tty?
- Use of `sh -c` to start default command set by `$FZF_DEFAULT_COMMAND`
  - Should work on cygwin or msys, but on Windows prompt?
- Build automation
",junegunn,2016-11-08 16:57:32
147,2015-03-19 17:44:21,"appveyor can be used for the builds. You'd have to install Go manually though.
",untitaker,2016-11-08 16:57:32
147,2015-03-20 02:45:54,"@untitaker Thanks, I'll look into it.
",junegunn,2016-11-08 16:57:32
147,2015-03-22 03:07:16,"I managed to [compile ncurses on Windows using mingw-w64](http://sourceforge.net/p/mingw-w64/wiki2/NCurses/) on msys, but that alone didn't help much. It looks like there are many more issues to be handled :confused: Since I don't think I'll be able to find enough time to continue working on Windows support, I'll just leave this issue open.

Please let me know if anyone's interested in contributing.
",junegunn,2016-11-08 16:57:32
147,2016-02-26 18:37:45,"Currently I'm trying to get through this problem but there's so many hard-coded `junegunn/fzf` URL in the codes. I just forked this project and I'm replacing all those `junegunn/fzf` to mine. Is there any good way to handle these URLs nicely?
",simnalamburt,2016-11-08 16:57:32
147,2016-02-26 19:09:56,"I somehow built the fzf but I recieved below:

<S_CODE_TOKEN>

###### Reference
- https://github.com/simnalamburt/fzf-mingw-w64
",simnalamburt,2016-11-08 16:57:32
147,2016-02-27 02:56:41,"@simnalamburt Unfortunately, that is how go projects are laid out.
- http://golang.org/doc/code.html#Organization
- https://golang.org/cmd/go/#hdr-Relative_import_paths
  - `To avoid ambiguity, Go programs cannot use relative import paths within a work space.`
- e.g. https://github.com/docker/docker

I myself am not sure which would be the best way to handle this. You might want to take a look at the answers here:
http://stackoverflow.com/questions/14323872/using-forked-package-import-in-go
",junegunn,2016-11-08 16:57:32
147,2016-04-18 07:32:32,"no idea if this is helpful, but just in case: [https://github.com/gdamore/tcell](https://github.com/gdamore/tcell) is a go alternative to termbox, seems like a new project
",jmlucjav,2016-11-08 16:57:32
147,2016-08-23 16:39:57,"https://github.com/junegunn/fzf.vim/issues/186

@jfun reported that fzf runs on linux subsystem of Windows 10. I haven't had a chance to try it, but it sounds promising.
",junegunn,2016-11-08 16:57:32
147,2016-09-12 16:35:36,"WSL is only limited to windows 10 though. :(
",Swoorup,2016-11-08 16:57:32
147,2016-10-22 06:14:31,"I have an alpha version of fzf for Windows available here: https://github.com/kelleyma49/fzf/tree/WindowsTermbox .  Make sure to checkout the WindowsTermbox branch.  

![fzfwindows](https://cloud.githubusercontent.com/assets/2152684/19617377/f488cdd8-97e3-11e6-8b23-f312f69d1e52.gif)

This version uses [termbox-go](https://github.com/nsf/termbox-go) instead of ncurses, and it doesn't need cygwin.  Run `go build`  in `fzf\src\fzf`, which should build a .exe that you can play with.
",kelleyma49,2016-11-08 16:57:32
147,2016-10-22 09:20:41,"@kelleyma49 Thank you for you awesome work! This is exactly what I was looking for.

@junegunn How do you think of this branch? Is it seems to be able to be merged?
",simnalamburt,2016-11-08 16:57:32
147,2016-10-22 11:57:45,"@kelleyma49 Awesome. This is a game changer for me on Windows, hope to see it incorporated!
",gaving,2016-11-08 16:57:32
147,2016-10-22 13:20:03,"@kelleyma49 Is curses needed on any platform, with that branch? Why not use termbox for all platforms?
",justinmk,2016-11-08 16:57:32
147,2016-10-22 20:36:03,"@simnalamburt It looks promising but it isn't ready to be merged. Some features are commented out. I see it more as a proof-of-concept implementation as for now. But if you just need the basic features, this might be already usable.

@kelleyma49 Cool, thanks! Did you have any issues while porting the code to termbox? I considered using termbox before I started on rewriting fzf in Go (late 2014), but it lacked some features fzf needed such as the support for 256 color terminal and mouse. I guess things have changed over the time? (https://github.com/nsf/termbox/releases)

If we can implement everything ncurses provides using termbox, it does make sense to migrate to termbox completely like @justinmk suggested. But I wouldn't go that far at this stage. If it ain't broke, why fix it? I have much trust in battle-tested ncurses and I expect things to be less stable with its much younger alternative.

Implementation-wise, I think we should do some refactoring of extracting non-portable parts of the code first, to minimize code duplication I see in your branch. Then we can rebase your work on it. Also I would make it possible to build fzf with termbox even on non-Windows platform using build tags. I'll let you know of the progress.
",junegunn,2016-11-08 16:57:32
147,2016-10-23 17:20:06,"@junegunn - I agree, it isn't ready to be merged.  It's not feature parity yet (for example, preview window doesn't work.)  

You've abstracted the curses enough that I don't think it would be a problem to keep ncurses and the termbox-go implementations around until you're satisfied that termbox-go (or another solution) matches the features and performance of the ncurses.  Let me cleanup the code and test some more before I attempt a pull request. 
",kelleyma49,2016-11-08 16:57:32
147,2016-10-24 00:12:57,"@kelleyma49 I noticed that your branch is behind a few versions (0.15.1 vs 0.15.5) and doesn't compile on non-Windows platform, and I felt there's more code we can refactor out. So I did some base work last night to make it easier to add termbox support. I'll push it to a new branch and request that you rebase your work on it.
",junegunn,2016-11-08 16:57:32
147,2016-10-24 01:00:19,"@kelleyma49 Please take a look at: https://github.com/junegunn/fzf/commits/termbox. It will build with termbox on Windows or when `termbox` tag is provided (`TAGS=termbox make` or `go build -tags termbox`). Termbox build compiles but it doesn't draw anything on the screen yet. I believe now you'll just have to fill in empty functions in tui/termbox.go

(`GOOS=windows make` also works.)
",junegunn,2016-11-08 16:57:32
147,2016-10-24 14:38:02,"Thanks @junegunn .  I submitted a pull request to you: https://github.com/junegunn/fzf/pull/714
",kelleyma49,2016-11-08 16:57:32
147,2016-10-24 16:15:55,"And the crowd cheers in support :dancing_men: 
",Swoorup,2016-11-08 16:57:32
147,2016-11-08 16:57:32,"Windows binaries are now available. Thanks @kelleyma49.

https://github.com/junegunn/fzf-bin/releases

Unfortunately fzf still doesn't run on cygwin or msys since neither termbox nor tcell supports the platform.
- https://github.com/nsf/termbox-go/issues/66
- https://github.com/gdamore/tcell#windows
",junegunn,2016-11-08 16:57:32
147,2016-11-17 16:30:43,"If you use PowerShell, feel free to try out my module that wraps fzf: https://github.com/kelleyma49/PSFzf.
",kelleyma49,2016-11-08 16:57:32
146,2015-03-13 15:39:35,"<S_CODE_TOKEN>
",junegunn,2015-05-13 10:13:41
146,2015-03-22 05:58:24,"This works for me:

<S_CODE_TOKEN>

and `-m` in 

<S_CODE_TOKEN>
",D630,2015-05-13 10:13:41
146,2015-03-22 06:20:39,"> and `-m`

So you mean, selecting both lines in fzf? I don't think it's a good solution to the problem, as there's no guarantee that both lines appear on the finder with some query string, not to mention that it's not straightforward for users to use.
",junegunn,2015-05-13 10:13:41
145,2015-03-13 04:09:06,"- Use symlinks instead of generating the full content
- Update fish_user_paths
",junegunn,2015-03-13 08:44:44
144,2015-03-12 14:19:57,"Very often I reuse parts of commit messages from previous commands (history) in command line. zsh-autosuggestions helps me with that. For example, I type `hg ci` and it suggests `hg ci -m ""RT123456 Some previous commit message""`. However, sometimes it doesn't suggest the right thing. That's when I press `Ctrl-R`.

I thought that when my command line already contains `hg ci` and I press `Ctrl-R` to search in the history, it would be handy to use what I've already typed as initial search pattern to avoid typing it again.

I have a feeling this might be useful. Do you think you could add an option to enable such behavior? I'm using zsh. Thank you.
",balta2ar,2015-03-12 16:37:28
144,2015-03-12 14:33:39,"I think that should be doable by using the `--query` flag.
",wellle,2015-03-12 16:37:28
144,2015-03-12 15:37:44,"I like the idea, though I think it will be only possible on zsh, or maybe fish.. but I'm not really into that and growing weary of dealing with its non-standard stuff.

I'll look into it when I get some time. (I'm a bash user and honestly not really familiar with zsh stuff) Feel free to send me a PR if you feel like it.
",junegunn,2015-03-12 16:37:28
144,2015-03-12 16:16:59,"<S_CODE_TOKEN>

Does this work? I tried to fix #142 as well.
",junegunn,2015-03-12 16:37:28
144,2015-03-12 16:37:28,"Committed the code. Please [upgrade fzf](https://github.com/junegunn/fzf#upgrading-fzf) and let me know if you see any issue.
",junegunn,2015-03-12 16:37:28
144,2015-03-12 16:38:00,"Yes, it's awesome! Thank you very much! I'll start using it right away.
",balta2ar,2015-03-12 16:37:28
143,2015-03-12 08:51:34,"Opening in a tmux pane doesn't work well: `Ctrl-T` opens in a pane, but always runs from home directory, while `Alt-C` and `Ctrl-R` do not open in a new pane and run fullscreen (from correct directory). Under tmux + vim `:FZF` does not give any response, but at least the fullscreen bang version works.
",dmos62,2015-03-13 14:39:00
143,2015-03-12 10:54:50,"Thanks for the report. I'm not sure when I'll be able to work on Cygwin. But I'll try to look into it soon. In the meantime, `export FZF_TMUX=0` not to use tmux pane on CTRL-T.
",junegunn,2015-03-13 14:39:00
143,2015-03-13 14:08:10,"I think I fixed the problem. Please update (git pull and rerun the install script) and let me know how it goes.
",junegunn,2015-03-13 14:39:00
143,2015-03-13 14:34:41,"Yes you have. Thank you. As far as I can tell everything works like it should.
",dmos62,2015-03-13 14:39:00
142,2015-03-11 16:40:49,"For example,

<S_CODE_TOKEN>

`fzf` (by using `C-r` in ZSH) gave me

<S_CODE_TOKEN>

which doesn't work like the normal `C-r` .

Any ideas?
",xuchunyang,2015-03-12 16:33:17
142,2015-03-12 15:40:46,"Hmm, thanks for the report. bash version also seems to have problem with multi-line commands.
",junegunn,2015-03-12 16:33:17
142,2015-03-12 16:34:13,"Should be fixed now. Please [upgrade fzf](https://github.com/junegunn/fzf#upgrading-fzf) and let me know if you see any issue. Thanks.
",junegunn,2015-03-12 16:33:17
142,2015-03-12 16:38:54,"It works now. Thanks for your work. @junegunn 
",xuchunyang,2015-03-12 16:33:17
141,2015-03-11 07:12:06,"`~/.fzf/fzf` is not automatically added to PATH. `~/.fzf/fzf-tmux` is added, and the appended line in .zshrc sources `~/.fzf.zsh`, however none of the functionality works complaining command not found.
",dmos62,2015-03-12 09:27:18
141,2015-03-11 08:17:59,"`~/.fzf/fzf` is the legacy ruby version that is no longer used unless your platform does not support the new go version which is placed inside `~/.fzf/bin` by the install script. Can you post the output of the install script?
",junegunn,2015-03-12 09:27:18
141,2015-03-11 16:30:29,"`~/.fzf/bin/fzf` is downloaded by the install script? Some incompatibility with Cygwin maybe? I do not receive any errors or warnings:

<S_CODE_TOKEN>
",dmos62,2015-03-12 09:27:18
141,2015-03-12 01:08:05,"Ah, you're on cygwin. I haven't been able to test fzf on cygwin lately.
The go versions are [only supported on OS X and Linux](https://github.com/junegunn/fzf-bin/releases/tag/0.9.4), so the install script will choose to use the legacy Ruby version in your case (note that some new features are not available), but there was a bug in the install script. Update the repository and try again.
",junegunn,2015-03-12 09:27:18
141,2015-03-12 08:51:52,"The ruby `fzf` installed properly now, thanks. Unfortunately, opening in a tmux pane doesn't work well: `Ctrl-T` opens in a pane, but always runs from home directory, while `Alt-C` and `Ctrl-R` do not open in a new pane and run fullscreen (from correct directory). Under tmux + vim `:FZF` does not give any response, but at least the fullscreen bang version works. I'll open a new issue.
",dmos62,2015-03-12 09:27:18
140,2015-03-10 12:10:05,"Wheh pressing CTRL-R I get illegal option: --tac

Not sure what have changed since it used to work

Thanks
",narkisr,2015-03-10 12:13:27
140,2015-03-10 12:13:27,"Ok, iv edited .fzf.zsh and it seems to have solved it (removed the options)
",narkisr,2015-03-10 12:13:27
140,2015-03-10 12:14:01,"Yeah, there was [a backward incompatible change in 0.9.4](http://junegunn.kr/2015/03/fzf-0.9.4/). Update the repo and re-run the install script and you'll be fine.

By the way, how did you install fzf and what does `fzf --version` say? (I'm trying to see whether if you're using the new Go version or the legacy Ruby version.)
",junegunn,2015-03-10 12:13:27
140,2015-03-10 12:18:05,"fzf 0.8.9 (Dec 24, 2014)

I did a pull but didn't run install yet ill do that now

Thanks
",narkisr,2015-03-10 12:13:27
140,2015-03-10 12:31:11,"Ah I see, you're using the old version. The Go version (from 0.9.0) is much faster.
",junegunn,2015-03-10 12:13:27
140,2015-03-10 12:33:03,"Odd because I cloned it not too long ago (about a week), I don't know how I got the older version in the first place

Thanks
",narkisr,2015-03-10 12:13:27
139,2015-03-09 00:32:44,"In the vim plugin is it possible to map commands like Ctrl-p? For example C-x for open the selected line in a horizontal split or C-v for a vertical split?
Just for example, the shortcuts  could not be the same.  
",cartolari,2015-03-09 03:14:12
139,2015-03-09 03:14:12,"I hope it was possible, but no. See #61. This is a price to pay for fzf being a general-purpose filter rather than a plugin for a certain platform.
",junegunn,2015-03-09 03:14:12
139,2015-03-28 18:30:36,"ctrlp-compatible key bindings are now implemented in the new version.
",junegunn,2015-03-09 03:14:12
138,2015-03-08 17:53:54,,junegunn,2015-03-09 14:28:53
138,2015-05-26 10:08:01,"is opening fzf on any position only possible with tmux?
I'd like to use it in my vim integration but can't figure out how to have the query prompt on top instead of at the bottom...is this possible?
",marcmo,2015-03-09 14:28:53
138,2015-05-26 10:18:19,"Hmm, did you try `--reverse` option? (it's not related to this PR)
",junegunn,2015-03-09 14:28:53
138,2015-05-26 10:27:58,"thanks @junegunn !! all I needed!
fzf is such a great idea! love it! slowly I migrate more and more functionality that I used unite for...it's insanely fast!
",marcmo,2015-03-09 14:28:53
137,2015-03-07 15:50:04,"https://github.com/neovim/neovim/issues/1477

:confused: 

Vim plugin of fzf relies on `:!` for running fzf when not on tmux, and Neovim currently does not (and probably will not) support running interactive programs using `:!`.
",junegunn,2015-04-14 17:12:18
137,2015-03-07 16:17:16,"Related: https://github.com/neovim/neovim/pull/2076
",wellle,2015-04-14 17:12:18
137,2015-03-07 17:15:50,"@wellle Yeah, I'm looking forward to that, but I still wish they don't cripple `:!`.
",junegunn,2015-04-14 17:12:18
137,2015-03-07 17:27:12,"As far as I know @tarruda just decided not to fix `:!` in the mentioned PR. I am sure he will fix it afterwards.
",Tranquility,2015-04-14 17:12:18
137,2015-03-07 17:35:31,"@Tranquility I'm getting the impression that they are adding `:terminal` command to compensate for not fixing `:!`. We'll see. I hope it's fixed. People have always been using `:!` for running external interactive programs in fullscreen mode, ranger, mutt, elinks, to name a few.
",junegunn,2015-04-14 17:12:18
137,2015-03-07 21:36:10,"> @Tranquility I'm getting the impression that they are adding :terminal command to compensate for not fixing :!. We'll see. I hope it's fixed. People have always been using :! for running external interactive programs in fullscreen mode, ranger, mutt, elinks, to name a few.

It is not just an impression. It is the way it will works. They have changed the way `:!` works because it would be incompatible with msgpack-rpc UI. So when you will call an external command with`:!` that require to be attached to a tty then the new terminal buffer will be spawned with the command inside.
",vheon,2015-04-14 17:12:18
137,2015-03-07 22:21:05,"> @Tranquility I'm getting the impression that they are adding :terminal command to compensate for not fixing :!

Actually, the main goal of new terminal facility is to embed and control interactive programs using vimscript. Today I pushed a commit that puts all the logic in the `openterminal` function which returns a job id. That means you can use `jobsend` and `JobActivity` to automate interactive programs in a expect-like fashion(It should be easy to parse gdb output to jump windows to file/lines when a breakpoint is hit, for example).

I may be wrong(because I havent looked into the source code) but I assume plugins like fzf or [selecta](https://github.com/garybernhardt/selecta) only work with vim because they run with inherited stderr connected to a pty, and if so they don't even work in GUI vim. It is more of an accident than a feature, one that can be compared to [this one](https://github.com/neovim/neovim/issues/2088)

> As far as I know @tarruda just decided not to fix :! in the mentioned PR. I am sure he will fix it afterwards.

`:!` can be reimplemented on top of this new terminal facility, but I'm still thinking if its worth the trouble. Consider these facts:
- plugin authors can very easily work around `:!` limitations with `:terminal` or `openterminal()`
- pipes cover most use cases 
- pipes are faster
- pipes are portable to windows(which we don't support yet but hopefully that will change in the following weeks)

Lets elaborate on the first point: While adapting `:!` to open a terminal window would require some hackish changes to Neovim source code(which would only there for the sake of a few plugins), plugin authors can very easily adapt their code for Neovim. For example, fugitive could change `:!git add -p`(as reported by @Tranquility) to `sp | term git add -p` when running under neovim. It would probably be easy to integrate selecta and fzf with neovim using `openterminal`

But the last point is the most important: `:terminal` will be supported on windows via [winpty](https://github.com/rprichard/winpty), but it would be very expensive to use it in every call to `:!` and `system` since it relies on spawing hidden console windows and polling to emulate the pty interface. Imagine doing that just for reading a command stdout.
",tarruda,2015-04-14 17:12:18
137,2015-03-08 00:36:55,"@tarruda fzf redirects ncurses output to stderr, and prints the list of selected items to stdout. It's using `:!` because there's no other way. In case of fzf, `:terminal` is a big plus since it's using some serious hacks to open it in on a new tmux pane (similarly to dispatch.vim by tpope) not to take up the entire screen, or on an external terminal emulator when on gvim. So there's no reason for fzf to want `:!` once `:terminal` is implemented. Rather than plugins, I was more referring to the way people have casually used `:!` for the previous years, using it to open TUI programs (e.g. `:!mutt`, `:!elinks`) in fullscreen mode with full control over TTY.
",junegunn,2015-04-14 17:12:18
137,2015-03-08 00:55:28,"> @tarruda fzf redirects ncurses output to stderr, and prints the list of selected items to stdout. It's using :! because there's no other way. In case of fzf, :terminal is a big plus since it's using some serious hacks to open it in on a new tmux pane (similarly to dispatch.vim by tpope) not to take up the entire screen, or on an external terminal emulator when on gvim. So there's no reason for fzf to want :! once :terminal is implemented. Rather than plugins, I was more referring to the way people have casually used :! for the previous years, using it to open TUI programs (e.g. mutt, elinks) in fullscreen mode with full control over TTY.

Glad to know `:terminal` will be useful for running fzf with neovim.

Right now its not possible to redirect stdout to a pipe and stream data separately from ncurses output, but that is clearly useful and something I can add later. For now you might be able to handle the problem with `mkfifo`, manual shell redirection and `cat` spawned as a parallel job.
",tarruda,2015-04-14 17:12:18
137,2015-03-09 17:00:18,"I'll wait until `:terminal` is ready.

I updated the vim plugin with the new `up` / `down` / `left` / `right` options to replace `tmux_height` and `tmux_width`. I removed `tmux_` prefix because I'm going to use native Vim splits instead of tmux panes on Neovim when `:terminal` is ready.
",junegunn,2015-04-14 17:12:18
137,2015-03-10 04:40:31,"If fzf adds support to its vim plugin for opening in nvim `:terminal`, is it also possible that it'll add some keymaps? I.e. in CtrlP, you `C-t` on selected file(s) to open in tabs, `C-s` in splits, `C-v` in vertical splits, etc. Or would it stay the same as it is currently, with having to decide when you call `fzf#run()` how you want the files opened? I can see the argument against adding keymaps to fzf, since it's supposed to just be a filter of stdin, but the behavior of CtrlP in terms of choosing how to open files feels much more natural - I don't have to decide how I want files opened before I've decided which files I'm opening.

Would be nice to completely replace CtrlP with fzf, although of course that would all involve work on neovim not fzf
",jebaum,2015-04-14 17:12:18
137,2015-03-10 04:47:44,"@jebaum 

> If fzf adds support to its vim plugin for opening in nvim :terminal, is it also possible that it'll add some keymaps?

Hmm, I don't know. Maybe `tnoremap` will allow us to do that?
",junegunn,2015-04-14 17:12:18
137,2015-03-10 05:06:56,"Oh good point, I think that should be possible. I will definitely look forward to playing with that. Certainly belongs in vim rather than fzf too
",jebaum,2015-04-14 17:12:18
137,2015-03-26 03:08:53,"https://github.com/neovim/neovim/pull/2076 is now merged, and fzf works surprisingly well inside term buffer. :tada: The only thing that does not work is shift-click or shift-scroll for selecting multiple items when `--multi` option is given.
",junegunn,2015-04-14 17:12:18
137,2015-03-26 03:43:08,"![nvim-fzf-prototype](https://cloud.githubusercontent.com/assets/700826/6840060/8e5c742c-d3b5-11e4-883f-ab44022fc0eb.gif)

Issues:
- Shift-TAB / shift-click / shift-scroll not working
- Need to avoid `[Program exited, press any key to close]` prompt
- Need to change the name of the buffer
- Need autocmd for program exit
",junegunn,2015-04-14 17:12:18
137,2015-03-26 09:04:59,"@junegunn I suggest waiting for neovim/neovim#2247(which will me merged until tomorrow) before merging this change
",tarruda,2015-04-14 17:12:18
137,2015-03-26 09:12:49,"@tarruda Thanks for the heads up, it's nowhere near complete anyway :)
",junegunn,2015-04-14 17:12:18
137,2015-03-28 18:34:03,"@jebaum In the meanwhile, ctrlp-compatible key bindings (CTRL-T/X/V) for `:FZF` are now implemented using `--expect` option of 0.9.6.
",junegunn,2015-04-14 17:12:18
137,2015-03-29 10:35:27,"I really like that way of doing it, very unobtrusive, although wouldn't your original `tnoremap` idea still work as well?

I think there's still some support needed from neovim so that the stdout of fzf can be used to open a file, unless I'm missing something. Then the next step would be making lists of other type of data inside neovim available to send to fzf (or any other external program), like the list of currently opened buffers, contents of the quickfix/location list, command history, etc. One thing that unite.vim has that's particularly handy sometimes is its `line` source, which can list all the lines in every open buffer (`:Unite line:buffers`) , and selecting a line jumps to it.

anyway, this was just brainstorming about the various ways I'd like to use fzf with neovim :terminal mode, maybe you've already thought of all of them.
",jebaum,2015-04-14 17:12:18
137,2015-03-29 10:52:40,"> I think there's still some support needed from neovim so that the stdout of fzf can be used to open a file, unless I'm missing something. 

I  considered adding a `termopen` option to redirect stdout or stdin to pipes, so another data channel that doesn't affect the terminal window can be used for communication between the program and Neovim. The only reason I didn't do it yet is because I want job control to be as cross platform as possible, and I don't know if this behavior will be portable to windows.

For now here's a couple of options:
- Use `$NVIM_LISTEN_ADDRESS` to open a connection to Neovim and tell it to open the file
- Use a named pipe and job control to receive information about which file should be opened.

I think the second approach is simpler because it wont require modifying `fzf` to connect with Neovim. Here's a possible way to do it: `:term mkfifo fzf-data && fzf > fzf-data`(assuming fzf uses stderr to communicate with the terminal) and open the pipe using `cat` or a similar program: `call jobstart(['cat', 'fzf-data'], ...)`

One thing I will add to Neovim in the next days is a `TermClose` autocmd, so you can use it to automatically close the terminal window once the fzf exits
",tarruda,2015-04-14 17:12:18
137,2015-03-29 12:11:01,"@jebaum 

> I really like that way of doing it, very unobtrusive, although wouldn't your original tnoremap idea still work as well?

Neovim is not my primary editor (yet), and I'm always on tmux, so I currently have no issue running fzf on vim and now I can even have custom key bindings with `--expect` option. We can still use `tnoremap` instead on Neovim, but I don't see the point. There's no reason to implement two different ways to do the same thing. The neovim version of fzf plugin should only differ in the way it launches fzf, the rest of the code does not need to be changed.

> I think there's still some support needed from neovim

Not much. Have you tried the examples on [the wiki page](https://github.com/junegunn/fzf/wiki/Examples-%28vim%29)? I'm using fzf on vim to [open files](https://github.com/junegunn/dotfiles/blob/8318f4c/vimrc#L1322-L1325), [switch buffers](https://github.com/junegunn/dotfiles/blob/8318f4c/vimrc#L1340-L1359), [select color scheme](https://github.com/junegunn/dotfiles/blob/8318f4c/vimrc#L1327-L1338), or [go to a line in any open buffer](https://github.com/junegunn/dotfiles/blob/8318f4c/vimrc#L1382-L1405) (I think this is equivalent to the line source of unite you mentioned) using horizontal/vertical tmux panes. No need to complicate, simple uses of temporary files should suffice in most of the cases. The only thing that I need at the moment is `TermClose` autocmd @tarruda mentioned.
",junegunn,2015-04-14 17:12:18
137,2015-03-29 12:37:31,"@jebaum note that you can add your own custom mappings for fzf with something like this:

<S_CODE_TOKEN>
",tarruda,2015-04-14 17:12:18
137,2015-04-10 04:58:54,"@tarruda Hi, are you still planning to add `TermClose`? For this to work, I need a way to either
- synchronously and exclusively run fzf
- or get notified when the process is complete so I can take the next step.
",junegunn,2015-04-14 17:12:18
137,2015-04-10 07:51:53,"@junegunn Yes I will add `TermClose`. I'm just waiting a few days for the community to give more feedback on the terminal emulator before I start fixing bugs and enhancing it.

But there's a temporary workaround you can use to get an exit notification: Just spawn the terminal with [`termopen`](http://neovim.org/doc/user/eval.html#termopen%28%29) which is similar to `jobstart`. Here's a little snippet to get you started:

<S_CODE_TOKEN>

Note that the `feedkeys` hack is required because nvim will crash if you call `bd!` directly while the terminal is focused(it's on my list of fixes :smile:). Also, the `enew` is required because `termopen` will use the current buffer to spawn the terminal(this is done so terminals are restored by scripts created with `:mksession`)

If you'd rather wait for `TermClose` I might add it this weekend.
",tarruda,2015-04-14 17:12:18
137,2015-04-10 07:59:09,"@tarruda Good to know, thanks! I think I'm going to wait for TermClose.
",junegunn,2015-04-14 17:12:18
137,2015-04-10 08:08:30,"@junegunn Actually the crash I mentioned earlier is gone, thanks to @splinterofchaos. The following should also work:

<S_CODE_TOKEN>
",tarruda,2015-04-14 17:12:18
137,2015-04-10 08:12:52,"@tarruda Ah, okay. Then I'll try to implement using the above approach.
",junegunn,2015-04-14 17:12:18
137,2015-04-10 14:53:51,"![nvim-fzf](https://cloud.githubusercontent.com/assets/700826/7089995/eceb1864-dfda-11e4-91c5-6ff5e5289bbf.gif)

Pushed the update. Please test it if anyone's interested. I tried to make neovim version as close to the original as possible.

A few points to mention:
- Since `fzf#run()` call is asynchnous on Neovim, we can't make it return the list of the selected items as before. Instead I added `sink*` option which is a funcref to the callback function that takes the list.
- Added `window` option just for Neovim. It's the command used to open fzf window.
  - e.g. `vertical aboveleft 20new`
- When none of `up`/`down`/`left`/`right`/`window` option is given, fzf will start on `tabnew` to mimic fullscreen behavior on Vim.

Issues:
- When I open a file with fzf, sometimes I'm left with the file with its content modified to `[Program exited, press any key to close]`. Not really sure why.
- `Shift-tab` for selecting multiple items does not work (/cc @tarruda)
  - `nnoremap <s-tab> :echom reltime()[1]<cr>` works on Neovim. But it doesn't work on Neovim opened inside `:term`
- I'm doing `:file [FZF]` to change the name of the terminal buffer displayed on the statusline. Doing so unnecessarily increases bufnr by 2 whenever I open fzf. Maybe there's a better way to handle this?
",junegunn,2015-04-14 17:12:18
137,2015-04-10 15:29:03,"I already replaced ctrlp by fzf and couldn't be happier

> Since fzf#run() call is asynchnous on Neovim, we can't make it return the list of the selected items as before. Instead I added sink\* option which is a funcref to the callback function that takes the list

Currently `jobwait` is broken, but maybe it can be used to implement a synchronous version later.

> When I open a file with fzf, sometimes I'm left with the file with its content modified to [Program exited, press any key to close]. Not really sure why.

Are you saying that the terminal buffer is shown instead of the file? Any hints on how to reproduce?

> Shift-tab for selecting multiple items does not work (/cc @tarruda)
> nnoremap <s-tab> :echom reltime()[1]<cr> works on Neovim. But it doesn't work on Neovim opened inside :term

It seems shift-tab is not forwarded by `:term` correctly. I will investigate(added a note to neovim/neovim#2277)
",tarruda,2015-04-14 17:12:18
137,2015-04-10 15:52:03,"> Are you saying that the terminal buffer is shown instead of the file? Any hints on how to reproduce?

@tarruda Yes, just `[Program exited, press any key to close]` message and nothing else. I checked the undo list of the buffer and it was clear. I ran into it only a few times, and I haven't found a reliable way to reproduce the case. I'll let you know if I figure it out.
",junegunn,2015-04-14 17:12:18
137,2015-04-10 16:12:04,"![exit-buffer](https://cloud.githubusercontent.com/assets/700826/7091645/36b19eae-dfe6-11e4-9349-8d3e193ffb10.png)

@tarruda This is how it looks like. If I press any key in this state, the tab is immediately closed. But if I press `<C-\><C-n>` to escape the terminal, I'm left with the buffer on the tab and it's `&modified` but with no undo list. I still am not sure how to reliably reproduce it, but it seems to happen only when I open the file in a new tab with `<CTRL-T>` key binding of `:FZF` command.

I use this mapping:

<S_CODE_TOKEN>
1. `<space><space>` to start fzf
2. type in some pattern
3. press CTRL-T
4. All three steps are done very quickly. Repeat.
",junegunn,2015-04-14 17:12:18
137,2015-04-10 16:13:26,"I've had this happen too. Start nvim in a sufficiently large file like (from nvim's source dir) `src/nvim/eval.c`. Then run `:FZF` to open a sufficiently small file, like `BACKERS.md`. The screen will be blank. (May have to try more than once.) Scrolling with the mouse to the top line will reveal that the second like has `[Program exited, press any key to close]` and the file should be truncated, but pressing enter instead will flash the file on screen then return to the previous file.

I think this happens because the terminal program closes and somehow the current buffer begins filling with the new file, but the current buffer still thinks it has a terminal. It soon realizes the program has exited and acts as if the new file is a terminal.
",splinterofchaos,2015-04-14 17:12:18
137,2015-04-10 16:47:31,"@junegunn @tarruda awesome work guys! FZF in NeoVim is blazing fast!
",adambiggs,2015-04-14 17:12:18
137,2015-04-10 18:57:43,"Really nice! :+1: 

Can you think of any way to adjust the buffer size with the number of hits?
",Tranquility,2015-04-14 17:12:18
137,2015-04-11 01:16:09,"@adambiggs Thanks!

@Tranquility I also thought about that. We probably could use some autocmd to monitor the number in the buffer and resize it accordingly.
",junegunn,2015-04-14 17:12:18
137,2015-04-11 01:50:40,"This has been working great.

With `:set cmdheight=2` the following text is shown in the command-line area when fzf is open:

<S_CODE_TOKEN>

It might be nice to clear that message on the first line, since it represents visual clutter and provides no useful information in this context.
",noahfrederick,2015-04-14 17:12:18
137,2015-04-11 02:19:49,"@noahfrederick Fixed it, thanks for the suggestion!
",junegunn,2015-04-14 17:12:18
137,2015-04-11 12:51:43,"<S_CODE_TOKEN>

Screen gets garbled and cmdheight increases +1.
",mtglsk,2015-04-14 17:12:18
137,2015-04-11 14:56:16,"@mtglsk It's reproducible even without fzf plugin.

<S_CODE_TOKEN>
",junegunn,2015-04-14 17:12:18
137,2015-04-11 15:12:49,"Ok, i opened a bug on neovim.
",mtglsk,2015-04-14 17:12:18
137,2015-04-11 15:17:12,"@mtglsk Um, it's also reproducible on Vim.
",junegunn,2015-04-14 17:12:18
137,2015-04-14 18:08:19,"Been watching this thread, and think I am definitely missing something.

I've reinstalled both fzf and neovim from HEAD and am getting the following:

![screen shot 2015-04-14 at 2 07 34 pm](https://cloud.githubusercontent.com/assets/487333/7143850/b2f8b0f8-e2af-11e4-9b91-bf9f9212302a.png)

---

**UPDATE:**

Damn, spoke too soon. Forgot to update the vim plugin. After running a `:PlugUpdate` things are working like a champ. Thanks!
",tamagokun,2015-04-14 17:12:18
137,2015-04-15 01:52:36,"@tamagokun Alright, make sure to run the install script after update so that it downloads the latest Go binary for your platform. Or you can just set up a post-update hook and forget about it.

<S_CODE_TOKEN>

---

I think it's possible that a user not having read the installation guide will try to install fzf just like any other vim plugin (e.g. `Plugin 'junegunn/fzf'`), and end up using the outdated Ruby version. It's still several times faster than the alternatives, but it's also several times slower than the Go version. Hmm. :confused:  
",junegunn,2015-04-14 17:12:18
137,2015-04-15 10:43:12,"Just wanted to let you guys know that I'm aware that there are still problems with Neovim/fzf integration, but it's Neovim bugs which I will fix as soon as I have time.
",tarruda,2015-04-14 17:12:18
137,2015-04-15 11:28:50,"@junegunn for what it's worth, I was reinstalling fzf using Homebrew (`brew reinstall --HEAD fzf`) and forgot that I also needed to update the vim plugin.
",tamagokun,2015-04-14 17:12:18
137,2015-04-15 11:47:07,"@tarruda Thanks!

@tamagokun In that case, you don't need to separately install/update vim plugin, as it's already included in Homebrew package and updated when you `reinstall`. You can remove `Plug` line from your .vimrc, add `set rtp+=/usr/local/Cellar/fzf/HEAD` and you're set.
",junegunn,2015-04-14 17:12:18
137,2015-04-15 11:48:02,"@junegunn aha! Of course. Thanks!
",tamagokun,2015-04-14 17:12:18
137,2016-02-26 00:04:18,"> are you still planning to add TermClose? For this to work, I need a way to either

@junegunn Not sure if you still need it, but `TermClose` was added some time ago, and I noticed fzf doesn't seem to be using it.
",justinmk,2015-04-14 17:12:18
137,2016-02-26 00:15:52,"@justinmk No, I was just unaware of `on_exit` callback when I asked for it.
",junegunn,2015-04-14 17:12:18
136,2015-03-06 09:59:04,"... and clean up the documentation
",junegunn,2015-03-07 01:01:23
136,2015-03-06 20:21:11,"Maybe it's better to use tmux terminology and talk about tmux panes instead of splits?
",Tranquility,2015-03-07 01:01:23
136,2015-03-06 23:58:53,"@Tranquility Good point. I'm too used to Vim terminology. I'll update the doc.
",junegunn,2015-03-07 01:01:23
135,2015-03-03 21:21:36,"The fzf-completion.bash adds completion to many standard directory commands including cd. But the completion behaves like files: it adds a space instead of a /, which prevent me from keeping tab complete a long path.

The fix is easy: add -o plusdirs for the complete commands for directory commands.
",vexplore,2015-03-04 03:59:31
135,2015-03-04 03:51:28,"Good point. I'll see what I can do.
",junegunn,2015-03-04 03:59:31
135,2015-03-04 04:41:36,"Should be fixed now. Let me know if it doesn't work as expected. Thanks.
",junegunn,2015-03-04 03:59:31
134,2015-03-01 02:36:09,,junegunn,2015-03-01 03:35:08
133,2015-02-27 21:56:03,"There is a bug in the way `__fcd` is currently implemented.

To observe the problem, simply run on your shell `$(__fcd $HOME)`.

_Expected behavior:_ You are displayed a list of directories inside `$HOME` and can use `fzf` to select one of them.
_Observed behavior:_ You get a truncated list of directories, and on selection `fzf` fails to change folder (since the paths are truncated).

This bug was caused due to a naive use of cut to remove the ""./"" prefix from folders. However, this prefix is absent if using absolute paths.

I replaced the use of cut by `sed`, this also has the side benefit of require less pipes, since `sed` was already being used to remove the first line (and `sed` allows you to chain several operations in the same call).

In this commit I also made allowed other `fzf` commands, such as `__fsel`, receive the starting path as a parameter (as `__fcd` already did) using the current directory as the default when nothing else is specified.

Another change which I was tempted to make, was to add a global variable `FZF_DEFAULT_STARTPATH` that allows the users to specify in which directory they want to start fcd or fsel by default, allowing them to specify something else other than the current directory (aka "".""). For instance, in my own use case I have the default be $HOME/src, since I rarely want to use fzf outside that. I thought I should get some feedback before creating that pull-request.
",acornejo,2015-02-28 01:23:22
133,2015-02-28 01:21:44,"Thanks for your suggestion. But those `__fxx`s are not supposed to be used directly but only by the supplied key bindings, hence the prefix `__` denoting that they are not the part of public interface. The README page also does not mention they are provided by default, see https://github.com/junegunn/fzf#installation. There's nothing wrong with your patch, and it's nice that it shortens the command pipeline, but I don't want to give the wrong impression that they can be used directly for other purposes (e.g. `${1:-.}`), because they are not meant to be.
",junegunn,2015-02-28 01:23:22
133,2015-02-28 01:36:57,"By the way, I'm trying to refrain from updating those key binding codes until #83 is done. It has been really annoying to _manually_ test all three shells after every update.
",junegunn,2015-02-28 01:23:22
133,2015-02-28 01:45:11,":(

It was worth a shot, I wanted to avoid having to maintain my own changes just for that micro ""feature"", but I understand your decision.
",acornejo,2015-02-28 01:23:22
132,2015-02-26 16:35:33,"`--filter` doesn't have to block until the input is complete if `--no-sort` (and `--no-tac` on 0.9.4)
",junegunn,2015-03-01 10:37:38
131,2015-02-19 04:38:47,"### Suggested `--tac` / `--no-sort` combination

<S_CODE_TOKEN>
",junegunn,2015-03-01 10:37:54
131,2015-02-19 08:21:48,"The options are already confusing. `fzf -f ''` and `fzf +s -f ''` give the same result, while the display orders of both cases are the opposite (without `-f` option). Maybe I shouldn't have made `--no-sort` reverse the display order. Two separate concerns, not sorting the result and displaying the items in the reverse order, are intermingled with no good reason. In that regard, `--reverse` was also a bad choice of a name that now I can't take back.
",junegunn,2015-03-01 10:37:54
131,2015-02-26 16:38:39,"https://github.com/junegunn/fzf/commit/c1aa5c5f3380315621d30d99b258667775b0fad3
",junegunn,2015-03-01 10:37:54
130,2015-02-18 18:03:57,"I'm very happy with your plugin, is it possible to add the same functionality which is described under https://github.com/clvv/fasd - so when I press `d` it will show me the entries of my most typed in commands?

Thanks for the awesome work that went into this plugin.
",wikimatze,2015-02-19 02:40:12
130,2015-02-18 18:38:46,"Hi, I'm not sure what your request is.

Is it
1. Integration with fasd
2. or, is it writing a _fasd-like_ feature using fzf?

> it will show me the entries of my most typed in commands

This also confuses me a little, as fasd does not seem to have an option to show the _most used command_, but only files and directories.

If what you want is some kind of shell function for launching fzf finder for most used commands, I can think of something like the following.

<S_CODE_TOKEN>

But note that this only considers the number of occurrences and not the recency of the commands.
",junegunn,2015-02-19 02:40:12
130,2015-02-18 20:15:39,"It is point 2. writing a fasd-like feature using fzf. So I want to have the recency of mos visited directories. Here is a small example. If I type in `d` I get:

<S_CODE_TOKEN>

When I type in `d conf<Tab>` I get the first match `/home/wm/git-repositories/vim-webdevicons` (7.96539), then `/home/wm/.vim/plugged/vim-webdevicons` (2), then `/home/wm/git-repositories/padrinorb-website/contribute` (1), and finally `/home/wm/.config` (1).

Bests

Matthias
",wikimatze,2015-02-19 02:40:12
130,2015-02-19 02:40:12,"I see. But fzf is just a simple filter, like grep, that you can use it to build larger concepts. Implementing fasd-like ""frecency"" concept is I believe beyond the scope of this project. But I'd love to hear about it when someone comes up with such a solution which utilizes fzf.

Extending (not replacing) fasd with fzf seems like a better solution to me.

<S_CODE_TOKEN>

Thanks!
",junegunn,2015-02-19 02:40:12
130,2015-02-19 07:07:10,"Agree, I will try your solution.
",wikimatze,2015-02-19 02:40:12
130,2015-02-19 08:10:24,"Okay, also check out z-integration section in wiki.
https://github.com/junegunn/fzf/wiki/Examples#z
",junegunn,2015-02-19 02:40:12
130,2015-02-20 21:08:47,"Works very nice, thanks for it. Maybe it's better to put this command as well in the README.
",wikimatze,2015-02-19 02:40:12
130,2015-02-21 02:59:34,"We have migrated most of the examples on the README page to the wiki pages. Please note that anyone can edit those pages. If you come up with a useful one that you want to share with the others, feel free to update the page. Thanks.
",junegunn,2015-02-19 02:40:12
129,2015-02-17 13:03:05,"I just realised you have rewritten fzf in go. I'd like to update to the latest in master, but following instructions to set up a go dev environment and so on did not take me anywhere.

I don't write go, but I'm happy to build the tool every time, rather than using the precompiled binary you provide.

I got stuck with what to set as the value of my `GOPATH`. `$HOME/.fzf` does not work.
",jdevera,2015-02-28 18:14:30
129,2015-02-17 15:10:29,"Have you tried `go get github.com/junegunn/fzf/src/fzf`?
It will clone the repository in your `$GOPATH/src/github.com/fzf`.
You can then run the install script in the directory or you may make a symlink to it in your home directory.
",junegunn,2015-02-28 18:14:30
128,2015-02-14 16:45:52,"In node projects it'd be nice to be able to not search in the `node_modules` folder =)
",KaoruDev,2015-02-17 15:27:54
128,2015-02-17 15:27:54,"When fzf is started w/o STDIN pipe, the default command it uses is `find * -path '*/\.*' -prune -o -type f -print -o -type l -print 2> /dev/null`. You can try setting up `FZF_DEFAULT_COMMAND` environment variable to override the default.
",junegunn,2015-02-17 15:27:54
128,2015-11-02 19:29:11,"Although I'm pretty sure it's obvious for others by now, `fzf` does [respect](https://github.com/junegunn/fzf#respecting-gitignore-hgignore-and-svnignore) `.gitignore` et. al which should solve this problem. 
<3 this tool btw @junegunn.
",shri3k,2015-02-17 15:27:54
127,2015-02-13 08:23:16,"I just stumbled on this project. Its amazing!

I briefly explored the code base, and I can't figure out what is going in ruby. There seems to be a full ruby implementation at the root of the project directory.

On the other hand, inside the src directory there is what looks to be like a complete go implementation. I would expect the go version to be a lot faster, so then I don't understand why the ruby thing is still there.

Browsing through the install script it seems like the ruby version is only there for the special case when there is no binary distribution for your platform, but then why keep it in the repository (is it still being updated and developed together with the newer go version, or has it been replaced/deprecated in favor of go?)
",acornejo,2015-02-13 08:52:30
127,2015-02-13 08:52:30,"fzf has been around for more than a year as a ruby script, it was recently rewritten in go.
See: https://github.com/junegunn/fzf/blob/master/src/README.md

I'm not going to further develop the Ruby version, but I'll just leave it there for backward compatibility. If I remove the file from the repo, users on the systems where Go version doesn't run (e.g. Centos/RHEL 5.7) will immediately run into trouble when they update the repository. Note that [the recommended way of installing fzf](https://github.com/junegunn/fzf#installation) has been to clone the repository and to run the install script though you can choose to just download Go binary or Ruby script. If one simply follows the instruction, the install script will try its best to choose the right version for the system.
",junegunn,2015-02-13 08:52:30
127,2015-02-14 06:49:14,"Thanks for the prompt answer. it makes sense, too bad ruby can't be compiled to put it also in the release section (or maybe it could go there, even in source form, and be fetched via curl/wget as the go binaries)

Been using fzf for the last day, and I love it. Thanks for sharing it!
",acornejo,2015-02-13 08:52:30
126,2015-02-12 22:38:07,"I've just added an example of using fzf to search tmux panes to the wiki and thought this would open as a PR or issue but was surprised to find the edit automatically accepted. Not sure what the guide lines are for contributing so I thought I'd open an issue to check.

Example of tmux pane selection;  

<S_CODE_TOKEN>
",george-b,2015-02-13 02:22:30
126,2015-02-13 02:22:30,"Thanks, it looks really useful! Yes, anyone can edit wiki without restriction.
I tested your example on bash, and I had to change a line to make it work on my bash.
See: https://github.com/junegunn/fzf/wiki/Examples/_compare/993a79e%5E...993a79e
",junegunn,2015-02-13 02:22:30
126,2015-02-13 02:27:38,"Since I use 1 as the base index, I can set up the following key binding.

<S_CODE_TOKEN>

Thanks!
",junegunn,2015-02-13 02:22:30
126,2015-02-13 02:35:49,"Ah I hadn't tested bash, thanks for making the correction for this to be more generic.
",george-b,2015-02-13 02:22:30
125,2015-02-09 23:38:35,"Hello,
first thanks for this wonderful and useful utility.

Would it be possible to add a way to go up the parent directory ? It would be especially useful when selecting a file via the Ctrl-T shortcut.

Thanks
",olethanh,2015-02-10 00:48:30
125,2015-02-10 00:48:30,"fzf is just a unix filter (like grep) that does not know the meaning of the items that it processes, so it's not possible to change the source dynamically. If you're on bash you can try using fuzzy completion although it won't be as easy as just hitting `CTRL-T`.

<S_CODE_TOKEN>
",junegunn,2015-02-10 00:48:30
124,2015-02-09 23:34:10,"Quick-match is powerful feature of Unite.vim. 

Basically it let you pick the candidate in narrowed list by entering quick-match mode and pressing one of home-row key (like easy-motion). To get the idea  please see this [pic](https://cloud.githubusercontent.com/assets/2410802/5996634/93c357ea-aaad-11e4-86a4-1e0f8515e0bb.png). 
It is blazingly quick compare to other ways of chosing the candidate.
",mhrebenyuk,2015-02-10 00:39:54
124,2015-02-10 00:39:54,"Thanks for the suggestion. But I don't like the extra complexity it adds. Users have to learn about the mode and how to properly use it. Maybe it's just me, but I usually don't spend more than a couple of seconds on fzf and most of the time, I can easily narrow down the list and get what I want just by typing in a few more characters (especially with extended-search mode) without actually _reading_ the list. I don't deny that some users might find it useful, but extra features always have their cost, and in this case I'd like to keep it simple. Thanks!
",junegunn,2015-02-10 00:39:54
123,2015-01-29 08:38:21,"PS1 trick doesn't seem to work.
",junegunn,2015-01-29 08:44:11
122,2015-01-24 17:19:34,"When using the widget in ""/"", it would descend into 'dev/'.
Using '*' for the starting path would do so also with the new '-fstype'
excludes.

The drawback / change now is that the './' prefix is being added, which
I don't mind.  This could be fixed by throwing in some `cut -b3-` into
the pipe.
",blueyed,2015-01-25 02:20:20
122,2015-01-24 18:06:29,"Please ignore Travis failure. I momentarily gave up making it work.
",junegunn,2015-01-25 02:20:20
122,2015-01-24 20:09:08,"> Please ignore Travis failure

Heh.. :) - I was just wondering.
",blueyed,2015-01-25 02:20:20
122,2015-01-24 20:10:12,"Feel free to squash-merge the commits, or tell me to rebase the PR.
",blueyed,2015-01-25 02:20:20
122,2015-01-25 02:02:48,"Doh, one thing I noticed is that `find .` includes `.` itself, so fzf gives an empty entry.

<S_CODE_TOKEN>

We could append `grep -v ^$`, but I wonder if there's a better way. Except for that, the change looks good to me. Could you fix the issue above and squash the commits into one?
",junegunn,2015-01-25 02:20:20
122,2015-01-25 02:11:53,"Fish should be fixed now, and I've added `sed 1d` to remove the first entry.
",blueyed,2015-01-25 02:20:20
122,2015-01-25 02:20:28,"Merged. Thanks!
",junegunn,2015-01-25 02:20:20
121,2015-01-24 15:59:07,"This would be useful with `find`'s `-print0`.
",blueyed,2015-06-08 14:29:53
121,2015-01-24 17:56:52,"Could you explain why we would need it?
",junegunn,2015-06-08 14:29:53
121,2015-01-24 18:00:37,"It would be useful for the `cd` widget to handle directories with newlines for example.
",blueyed,2015-06-08 14:29:53
121,2015-01-24 18:02:50,"Whoa, do you really have directories with newlines?
",junegunn,2015-06-08 14:29:53
121,2015-01-24 20:11:29,"No.. :)

But it's good practice to use `find .. -print0` anyway.
",blueyed,2015-06-08 14:29:53
120,2015-01-18 22:10:02,"Might I recommend moving the install code into the binary itself (other than the bits that download the binary) and making the whole thing go gettable for those with Go already installed.

<S_CODE_TOKEN>

Actually this already works for building the binary with the current repo format:

<S_CODE_TOKEN>

People who don't have go can still use the included install script, that will just download the binary then use it to to install the source scripts.

People who don't have git can just download the correct binary directly rather than checkout the tarball of the repo.
",dcbishop,2015-02-28 18:15:58
120,2015-01-19 01:56:20,"Thanks, it's a very interesting idea. But I have mixed feelings about it.
1. I don't think Go is the right tool for doing what the current install script does. We could try to embed the script as a raw string, or to make fzf download the script from GitHub, but I don't want to rewrite the script in pure Go.
2. If you look at the commit history, you'll realize that the auxiliary scripts (install, fzf-completion.bash) have been updated far more often than fzf itself. So if we embed them in the binary we may have to provide compiled binaries for every small changes in them for the users without Go.
3. I'm not sure if I want to recommend using `go get` to build the latest version from the tip of the repo though I know it's a common convention. It forces me to keep the master branch always stable. It's not impossible of course, it's exactly what I've done so far with the Ruby version, but I personally believe it's a better practice to use tagged releases.
",junegunn,2015-02-28 18:15:58
119,2015-01-18 05:22:29,"Gosh I love this plugin! Thanks a lot =)

This is not that bothersome since I can just alias `fzf` to `fzf -m`, but I was wondering if there's any reason to expose the non-multi version as an option in the first place. Just a nit.
",chenglou,2015-01-18 05:37:52
119,2015-01-18 05:25:57,"Thanks. A good example is when selecting a previous command from the command history (e.g. `CTRL-R` set up by the installer). If you really prefer the option, I recommend that you include it in `$FZF_DEFAULT_OPTS` variable instead of aliasing the command.

<S_CODE_TOKEN>
",junegunn,2015-01-18 05:37:52
119,2015-01-18 05:37:52,"Makes sense.
",chenglou,2015-01-18 05:37:52
118,2015-01-18 02:41:33,"not sure how to describe this but seems like fzf has issues to tabs/spaces inside text files or it does something to change the output?

how do you fix that? I try on other programs like ""percol"" and it came out fine as you can see from the picture.

See the **green line**
http://i.imgur.com/U1Y9BGO.jpg

<S_CODE_TOKEN>
",gotbletu,2015-01-19 02:15:34
118,2015-01-18 03:39:33,"fzf does not do any processing on tab characters, and ncurses sets a tab stop every 8 columns by default. I once considered making it configurable, but discarded the idea because of compatibility issues (It didn't run on old linux distros; https://github.com/junegunn/fzf/commit/3ed86445)

<S_CODE_TOKEN>

I've just downloaded peco and it looks like it enforces 4-character tab stops.

<S_CODE_TOKEN>

Because of the aforementioned compatibility issue, ~~I probably won't make tab width configurable.~~ (okay, now I know it's possible by setting `TABSIZE` variable) Maybe you could try to use a preprocessor which aligns the columns, like follows?

https://gist.github.com/junegunn/b3386e912ee9229824ef

<S_CODE_TOKEN>
",junegunn,2015-01-19 02:15:34
118,2015-01-18 03:44:08,"Is the program in the first image Vim? On Vim, you can change tab stops using `:set ts=8`, try some different values and you'll get a better idea of what's going on.
",junegunn,2015-01-19 02:15:34
118,2015-01-18 03:52:41,"peco manually sets tab stops by 4 columns:
https://github.com/peco/peco/blob/74e0e70/layout.go#L69-L75

For future reference (for me),

conditional compilation based on the version of ncurses:
https://gitorious.org/tig/mainline/commit/3ff7fff834173c6d01f04feef6403c6b0a724ebf

TABSIZE:
https://gitorious.org/tig/mainline/commit/32751def0d3db091d8a2bc46774ae9eaec5b031d
",junegunn,2015-01-19 02:15:34
118,2015-01-18 04:17:55,"I tried different tabstop numbers in vim, doesnt seem to do anything to fix it. Still output not aligned like the original text file.

have not used peco, but i was using percol
https://github.com/mooz/percol
",gotbletu,2015-01-19 02:15:34
118,2015-01-18 04:21:23,"Ah sorry my bad, peco is a Go-implementation of percol. Percol also seems to use 8-col tab size like fzf

<S_CODE_TOKEN>

Could you post the text file on gist or somewhere?
",junegunn,2015-01-19 02:15:34
118,2015-01-18 04:31:38,"text for my bookmarks

http://slexy.org/raw/s20mjCmaRz
",gotbletu,2015-01-19 02:15:34
118,2015-01-18 04:55:37,"Thanks, now I see the reason. It's because of 2-column indentation of fzf interferes with tab stops (note that percol does not have left-side indentation).

The default fzf with 2-space indentation:

![with-indent](https://cloud.githubusercontent.com/assets/700826/5791403/89fdea96-9f17-11e4-85a1-e4ebd8665f93.png)

Modified version of fzf w/o indentation:

![wo-indent](https://cloud.githubusercontent.com/assets/700826/5791405/a15083d4-9f17-11e4-95da-0425a3c83a2f.png)

Using the aforementioned [align script](https://gist.github.com/junegunn/b3386e912ee9229824ef):

<S_CODE_TOKEN>

![aligned](https://cloud.githubusercontent.com/assets/700826/5791414/06976bb8-9f18-11e4-82c0-5a5e2c42591c.png)

Maybe I could add an option to remove 2-space indentation on the left. What do you think?
",junegunn,2015-01-19 02:15:34
118,2015-01-18 05:08:29,"seems like the ""Modified version of fzf w/o indentation"" looks best. Yea maybe just add extra flag to fix it; lols fzf -notabdeath -e
",gotbletu,2015-01-19 02:15:34
118,2015-01-18 05:15:14,"The left gutter is important when using `--multi` option where you can select multiple items. If I'd want to remove the gutter, I have to come up with a way to indicate whether an item is selected or not. I'll think about it.
",junegunn,2015-01-19 02:15:34
118,2015-01-18 08:05:42,"Instead of adding a new option or finding a way to customize ncurses, I decided to manually process tab characters. Here's what it looks like:

![0 9 2-dev](https://cloud.githubusercontent.com/assets/700826/5791791/f07f86fa-9f33-11e4-9f29-f078ebde65b3.png)

I'll be releasing 0.9.2 in a week or two, until then, you can download 0.9.2-dev binary with the change from the following link:
https://github.com/junegunn/fzf-bin/releases/tag/0.9.2-dev
",junegunn,2015-01-19 02:15:34
118,2015-01-19 02:15:34,"Thanks, works fine & looks pretty now =)
",gotbletu,2015-01-19 02:15:34
118,2015-01-24 06:06:35,"I've just released 0.9.2 with a few more fixes:
https://github.com/junegunn/fzf-bin/releases/tag/0.9.2
",junegunn,2015-01-19 02:15:34
117,2015-01-16 20:03:46,"With tmux-based test cases
",junegunn,2015-01-17 01:55:05
116,2015-01-03 15:44:59,"![fzf-in-go](https://cloud.githubusercontent.com/assets/700826/5725028/028ea834-9b93-11e4-9198-43088c3f295d.gif)

Good to Go? :santa: 

<S_CODE_TOKEN>

Binaries: https://github.com/junegunn/fzf-bin/releases
",junegunn,2015-01-12 17:40:48
116,2015-01-05 02:43:40,"Very excited about this! Any plans for a windows build (http://www.appveyor.com seems popular)?
",justinmk,2015-01-12 17:40:48
116,2015-01-05 03:06:41,"@justinmk There are some hurdles for supporting Windows. fzf depends on ncurses which is as far as I know not available on Windows platform. Fortunately, there is a cross-platform alternative to ncurses called [termbox](https://github.com/nsf/termbox-go), but it lacks some features fzf needs, such as proper mouse support and escape key sequences (for alt-something). Those features are not really crucial to fzf, so given that we can live without them on Windows, it's doable. But I don't have a Windows PC for the development, so I could use some help.
",junegunn,2015-01-12 17:40:48
116,2015-01-14 18:33:14,"> There are some hurdles for supporting Windows. fzf depends on ncurses

Would it be possible to decouple the UI from the fuzzy matching engine? Then something like unite.vim could use fzf as a backend, and it would just decorate fzf's output. That's really what I'm interested in--using fzf as a cross-platform component shipped with Neovim.
",justinmk,2015-01-12 17:40:48
116,2015-01-14 20:42:30,"It should be possible. The core components, Reader, Matcher and Terminal, are already decoupled from each other.
",junegunn,2015-01-12 17:40:48
115,2015-01-02 06:25:40,"When the curses gem is not installed and the session is running inside
tmux the user will see a flash of an opened and closed tmux pane but
will not have a chance to read the error message.
",JackDanger,2015-01-02 06:28:33
115,2015-01-02 06:32:30,"Thanks!

FYI, I've been rewriting fzf in Go during the last few days. It will be ready to ship soon and we won't have to worry about this anymore then.
",junegunn,2015-01-02 06:28:33
115,2015-01-02 10:46:33,"Oh that's great news! I'm doing a lot of Go development myself. Maybe I'll become a contributor :wink:
",wellle,2015-01-02 06:28:33
115,2015-01-02 14:37:07,"@wellle Thanks :) This is my first experience in Go. I hope you can help me stabilize the new version. I decided to spend a few days in the holiday season to do this to learn the language. After years of playing with higher level languages like Ruby or Clojure, writing Go didn't feel so smooth. But it's still much better than writing some C++ code, and Go seems to be the right balance between developer happiness/productivity and performance.
",junegunn,2015-01-02 06:28:33
115,2015-01-02 19:19:06,"> Oh that's great news! I'm doing a lot of Go development myself. Maybe I'll become a contributor :wink:

Ha! I've been doing mostly Go these days too. Count me in.
",JackDanger,2015-01-02 06:28:33
115,2015-01-09 03:32:12,"@wellle @JackDanger You guys interested in trying/testing the Go version? I think it's getting pretty close to being stable and I wish to merge it to master soon, but I'm not yet confident enough. You can check out `go` branch and rerun the install script. I'd appreciate any feedback.
",junegunn,2015-01-02 06:28:33
115,2015-01-09 04:59:44,"@junegunn I've just replaced the Ruby version with the Go version on my laptop (OS X) and it's fantastic. Almost indistinguishable except it indexes extremely large directories about twice as fast as the Ruby one. Feels shippable to me.
",JackDanger,2015-01-02 06:28:33
115,2015-01-09 06:06:30,"I've been using the go version for several days, I've noticed no issues and it is significantly faster. Great work!

A friend of mine attempted to use it on arch linux and received this error:
`fzf: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory`

It works just fine on arch for me, but I think that's because steam+video games I have installed include libtinfo. The `ncurses` package on arch (https://www.archlinux.org/packages/core/i686/ncurses/) doesn't have libtinfo.

Edit: removed steam and the libtinfo files it installed and the go version still works fine for me
",jebaum,2015-01-02 06:28:33
115,2015-01-09 07:03:02,"@JackDanger Thanks for checking out!

@jebaum Right, I experienced the same issue when running a binary that was built on ubuntu on arch linux. So I updated the build script to build the binaries on arch linux (https://github.com/junegunn/fzf/blob/go/src/Makefile#L48) and confirmed that the issue is gone. Tell your friend to update the repo, delete the binary, and rerun the install script. I'll be constantly updating the binaries on https://github.com/junegunn/fzf-bin/releases/tag/0.9.0 until it's officially released.
",junegunn,2015-01-02 06:28:33
115,2015-01-12 17:43:14,"Go version is merged to master. You have to delete the binary (0.9.0) before rerunning the install script. There have been many bug fixes and performance improvements.
",junegunn,2015-01-02 06:28:33
114,2014-12-29 10:00:57,,PeterDaveHello,2015-03-01 10:34:06
114,2015-01-01 06:47:22,"Thanks. But since the size of the repository is still relatively small, less than 500KB, the benefit is not significant. And a quick Google search shows people having various kinds of issues with this, so I'm not going to merge it at the moment. But I'll leave this PR open for future consideration.

References:
- https://github.com/bower/bower/issues/217
- https://github.com/gmarik/Vundle.vim/issues/28
- http://git.661346.n2.nabble.com/BUG-shallow-clones-over-http-td7581458.html
",junegunn,2015-03-01 10:34:06
114,2015-01-01 06:51:29,"Okay, I think the issues you mentioned are in different situation, if we just want to setup from the latest commit, there is no problem, but you are right, the benefit is not significant, haha ...
",PeterDaveHello,2015-03-01 10:34:06
114,2015-01-01 06:55:30,"> if we just want to setup from the latest commit, there is no problem

Probably. I honestly don't know. I haven't looked carefully into those issues, so maybe I'm just being too cautious.
",junegunn,2015-03-01 10:34:06
114,2015-01-01 21:19:54,"Interesting, I wasn't aware of any problems with this. Reading the links, seems the problems occur if `git:` is not used as the protocol.
",justinmk,2015-03-01 10:34:06
114,2015-01-02 05:12:35,"@justinmk Maybe it's a bug from older versions of git? Haven't had time to really look into. Homebrew and NeoBundle also stopped supporting shallow clones for some reasons.
- https://github.com/Homebrew/homebrew/commit/8a1c2ec
- https://github.com/Shougo/neobundle.vim/issues/81

EDIT: They're actually related to `git fetch` instead of `git clone`, so they could be unrelated.
",junegunn,2015-03-01 10:34:06
114,2015-01-02 05:53:09,"Note that the neobundle thread also shows `https:` being used. The suggestion that `git:` is more efficient is a good reason to use it anyway.
",justinmk,2015-03-01 10:34:06
114,2015-01-02 06:06:54,"GitHub recommends using `https`:
https://help.github.com/articles/which-remote-url-should-i-use/

I agree with the point that `https` is more universal. At my workplace, servers are behind the firewalls so `https` through proxy is the only option there.
",junegunn,2015-03-01 10:34:06
113,2014-12-28 15:11:16,"They boot faster and since we don't use root we can use them.
",thedrow,2014-12-28 16:03:04
113,2014-12-28 16:03:08,"Thanks.

Reference: http://docs.travis-ci.com/user/workers/container-based-infrastructure/
",junegunn,2014-12-28 16:03:04
112,2014-12-23 10:37:00,"1. `<ALT-F>` behaviour is inconsistent with one in bash and zsh (readline?). The cursor should go to the first letter of the next word. In fzf implementation it is stopped at the word separator. `<ALT-B>` behaviour is correct.
2. Word separator problem. Say, if you have `aaa-bbb=ccc_ddd<CURSOR>`, you need to press `<ALT-BS>` four times (bash, zsh) to delete the whole line while fzf implementation deletes it in one stroke. This is confusing.
",balta2ar,2014-12-24 04:30:27
112,2014-12-23 14:40:14,"> 1. `<ALT-F>` behaviour is inconsistent with one in bash and zsh (readline?). The cursor should go to the first letter of the next word. In fzf implementation it is stopped at the word separator. <ALT-B> behaviour is correct.

Are you sure about this? I don't think this is true, at least on bash. I've tested on OS X and Linux and `<ALT-F>` on bash stops at one character beyond the end of the current word just like fzf.
",junegunn,2014-12-24 04:30:27
112,2014-12-23 14:47:00,"@junegunn You are right, in bash it works just like fzf. I must have compared it with zsh where it works as I described originally.
",balta2ar,2014-12-24 04:30:27
112,2014-12-23 16:44:38,"> forward-word (M-f)
>   Move forward to the end of the next word. Words are composed of letters and digits.

(http://cnswww.cns.cwru.edu/php/chet/readline/readline.html#IDX46)
1. So the current implementation of ALT-F follows GNU Readline standard, I'm not going to change it.
2. Since it is stated that `""Words are composed of letters and digits""`, we can improve word-motions by simply ignoring non-word/digit characters. (Technically, a correct implementation is only possible with the Unicode support of Ruby 1.9 or above. Ruby 1.8 will fail to account for Unicode characters) By the way, if we fix this, `ALT-BS` and `CTRL-W` are no more equivalent.
",junegunn,2014-12-24 04:30:27
112,2014-12-24 04:30:27,"@balta2ar Fixed in ec040d8 with a test case. Let me know if you see a problem, thanks!
",junegunn,2014-12-24 04:30:27
111,2014-12-22 06:09:46,"Both the normal fuzzy mode and the two extended modes are very useful for certain cases. However, it is not always clear which mode is the most fitting one for the current search. It would therefore be great if it were possible to switch between the different modes on the fly with a keybinding, and a visual indicator of which mode is currently active. Thanks!
",majutsushi,2015-06-10 18:03:52
111,2014-12-22 08:34:21,"Thanks for the suggestion.

Personally, I exclusively use extended-search mode (`FZF_DEFAULT_OPTS=""-x""`) because feature-wise, it's a superset of the other two modes. Often times, I start fzf, type in some characters, and realize I need exact-match to narrow down the candidates. In that case, I can simply prepend `'` (quote) to the beginning of the input to turn it into an exact-match term.
- `foobar<CTRL-A>'<CTRL-E>` (`<ALT-B>` and `<ALT-F>` are also very useful)

Introducing a key to switch modes will save a couple of keystrokes here, but the above method has worked pretty well for me. How about you try it for a while and tell me if you'd still want the switch feature?
",junegunn,2015-06-10 18:03:52
111,2014-12-22 11:37:21,"I second that request, I also find fuzzy search too broad sometimes. @junegunn Thanks for reminding about exact search using quote, I will give it a try. At the first glance I see weird behavior: I'm using zsh and I see different search results when 1) I press `<CTRL-R>` and search with exact match 2) when I run `history 0 | fzf -x`. Though I have added `FZF_DEFAULT_OPTS=""-x""` to my `~/.zshrc`.

Is `FZF_DEFAULT_OPTS` option used when history widget is triggered [here](https://github.com/junegunn/fzf/blob/master/install#L226)?
",balta2ar,2015-06-10 18:03:52
111,2014-12-22 12:24:06,"@balta2ar Yes, did you export the variable? `export FZF_DEFAULT_OPTS=""-x""`
",junegunn,2015-06-10 18:03:52
111,2014-12-22 12:33:02,"@junegunn oops, my bad! Now it works, thank you! Personally I was thinking about toggling three search modes: exact, regexp and fuzzy. However this extended mode can cover pretty much of my use cases (if not all of them).

This is probably for another issue but I miss `<ALT-BACKSPACE>` and `<ALT-D>` shortcuts to delete previous/next word correspondingly. It would be great to support them.
",balta2ar,2015-06-10 18:03:52
111,2014-12-23 01:14:42,"@balta2ar Okay, I'll add those keys and let you know. Is `<ALT-BS>` equivalent to `<CTRL-W>`?
",junegunn,2015-06-10 18:03:52
111,2014-12-23 02:22:04,"I actually though about the quote functionality, but I wasn't sure whether it would be convenient enough if there is more than one search term. But I just had another idea: If you use the ""exact"" extended mode, the quote character serves no longer any purpose. So would it be possible to reverse its behaviour and make it use fuzzy searching for the ""quoted"" term? That way the quote essentially becomes a toggle dependent on the base mode.
",majutsushi,2015-06-10 18:03:52
111,2014-12-23 02:57:26,"@majutsushi 

> but I wasn't sure whether it would be convenient enough if there is more than one search term

Fair enough. But for me navigating between terms hasn't been a problem thanks to `<ALT-B>` and `<ALT-F>`, your mileage may vary though. Also, using quotes has the added benefit of allowing me to mix fuzzy terms and exact terms.

> So would it be possible to reverse its behaviour and make it use fuzzy searching for the ""quoted"" term?

It's possible and I thought about it too. But currently in `--extended-exact` mode, `'` can be used to match literal `'` characters, so I'm not sure if it's a good call to do so. And as the current documentation describes the mode as follows:

> If you don't need fuzzy matching and do not wish to ""quote"" every word, start fzf with `-e` or `--extended-exact` option.

leaving the mode as it is seems to better serve its original intention (and it's simpler). But I'm flexible on this.
",junegunn,2015-06-10 18:03:52
111,2014-12-23 03:25:58,"@balta2ar Updated!
",junegunn,2015-06-10 18:03:52
111,2014-12-23 09:27:18,"@junegunn Thank you! Yes, `<ALT-BS>` and `<CTRL-W>` are the same.

Two things I noticed, though. `<ALT-F>` behaviour is inconsistent with one in bash and zsh (readline?). The cursor should go to the first letter of the next word. In your implementation it is stopped at the word separator. `<ALT-B>` behaviour is correct.

And second, which I don't really know how to make fully compliant, is what to consider a word separator. Say, if you have `aaa-bbb=ccc_ddd<CURSOR>`, you need to press `<ALT-BS>` four times (bash, zsh) to delete the whole line while your implementation deletes it in one stroke (this, however, can be tuned in zsh as it has WORDCHARS variable). This is confusing.
",balta2ar,2015-06-10 18:03:52
111,2014-12-23 09:55:17,"@balta2ar Oh yes, I'm aware of the difference but haven't really felt the need to fix it. Perfect readline compatibility would be nice of course, but for fzf, where you never stay more than a few seconds, current implementation suffices. But feel free to create an issue for it, I'll look into it when I get some time.
",junegunn,2015-06-10 18:03:52
111,2015-04-03 00:49:27,"Related: https://github.com/junegunn/fzf/issues/173
",junegunn,2015-06-10 18:03:52
111,2015-06-10 18:03:52,"I've decided not to do this. Mostly because I haven't felt the need for it so far and it requires non-trivial changes in code, such as cache invalidation, visual indication of the current mode, etc. Thanks.
",junegunn,2015-06-10 18:03:52
110,2014-12-21 16:30:48,"Works fine inside bash, but hangs inside neovim.
",ironfish,2014-12-21 21:36:23
110,2014-12-21 16:35:24,"Does fzf require tmux when using as a vim plugin?
",ironfish,2014-12-21 21:36:23
110,2014-12-21 17:07:06,"> Does fzf require tmux when using as a vim plugin?

No, tmux allows fzf to run in a split pane instead of taking up the entire screen. So tmux gives better experience, but it's not required to run fzf inside vim.

> Does FZF support neovim?

Hmm, let me put it this way; ""Does neovim support fzf?""
Neovim is not my primary editor yet so I haven't noticed so far, but it looks like fzf doesn't run properly on neovim w/o tmux. It works fine on vim w/ or w/o tmux.
- Vim w/ tmux (ok)
- Vim w/o tmux (ok)
- Neovim w/ tmux (ok)
- Neovvim w/o tmux (not ok)

Neovim is supposed to be compatible with vim in most use cases, so I can say it's an issue of neovim.
",junegunn,2014-12-21 21:36:23
110,2014-12-21 19:44:37,"> Hmm, let me put it this way; ""Does neovim support fzf?""

Good point, `tmux` solved the problem!!

I must say **wow**, `fzf` is blazingly fast!
",ironfish,2014-12-21 21:36:23
109,2014-12-11 19:40:36,"fishshell's history command outputs the command in first to last order, meaning the oldest command gets printed to screen last. When we pipe this to fzf it means that of the commands matching the search string, the command that we used last (and I think the one we are most likely go be wanting to use again) is at the top of the list, meaning we need to type more characters to narrow down the search or use the arrow keys before selecting it. 

tac simply reverses the out put of the history command. 

This brings it in to line with bash and zsh's ordering.
",brettanomyces,2014-12-13 02:10:29
109,2014-12-12 01:02:41,"Thanks, you're right. Unfortunately, OS X does not have `tac`, so we need to find a different way to reverse the order. By the way, your commit is based on an old revision so it can't be automatically merged. Please rebase your change on top of the current master.
",junegunn,2014-12-13 02:10:29
109,2014-12-12 02:05:36,"I don't know any standard tool for reversing lines that is part of both GNU and OSX. I guess you'll have to conditionally use either `tac` or `tail -r`. :\
",mhinz,2014-12-13 02:10:29
109,2014-12-12 02:21:51,"further complicated by the fact that GNU tail has no -r option

https://www.gnu.org/software/coreutils/manual/coreutils.html#tail-invocation
",brettanomyces,2014-12-13 02:10:29
109,2014-12-12 04:48:08,"@brettanomyces Simply reset the changes and force-push the new commit:

<S_CODE_TOKEN>
",junegunn,2014-12-13 02:10:29
109,2014-12-12 04:49:00,"By the way, I'm seeing trailing whitespaces at line 306 and 297 :)
",junegunn,2014-12-13 02:10:29
109,2014-12-12 07:20:39,"Just FYI, I stumbled upon this: implementing `tac` using `sed`
https://www.gnu.org/software/sed/manual/sed.html#tac
(I'm not saying we should use sed :smirk:)
",junegunn,2014-12-13 02:10:29
109,2014-12-13 02:12:39,"Merged, thanks!
",junegunn,2014-12-13 02:10:29
108,2014-12-05 22:10:27,"Current folder not searched. Only subfolders are searched
",sivaswami,2015-01-15 04:09:12
108,2014-12-06 01:59:10,"Please provide the following information
- OS version
- Shell version
- Ruby version
- Steps to reproduce
",junegunn,2015-01-15 04:09:12
107,2014-12-02 23:57:48,"The git completion provided by `bash-completion` on is broken when fzf's completion is used (regardless of order, since the bash-completion completions are loaded dynamically).

I solved it by removing 'git' from `a_cmds`.

It also strikes me that maybe manually loading bash-completions git completion after fzf is run would solve this issue.
",beaugunderson,2014-12-04 16:20:51
107,2014-12-03 01:14:10,"Hmm, I addressed the issue in the past and confirmed that it fixed the problem then: 13cd4ed5469d782fa3a6ca674f46621b836d8da8
Please make sure that fzf's completion is loaded _after_ bash-completion, the order matters here.
So, which version of Ubuntu are you running?
",junegunn,2014-12-04 16:20:51
107,2014-12-03 01:17:11,"Ah, nevermind, I can reproduce the problem. I'll see what I can do when I get time.
",junegunn,2014-12-04 16:20:51
107,2014-12-04 15:27:33,"Fixed in the previous commit, it works for me. Could you update and test it? Make sure .fzf.bash is sourced after bash-completion.
",junegunn,2014-12-04 16:20:51
107,2014-12-04 15:59:12,"@junegunn Thanks! Working for me now. :+1:
",beaugunderson,2014-12-04 16:20:51
106,2014-11-30 20:02:56,,jagajaga,2014-12-01 09:19:33
106,2014-12-01 00:17:00,"Just wondering, did you actually run into a problem because of the line? I'm aware that using `env` is usually considered to be a better practice but for basic executables like bash the point is a little moot, and it has been pointed out there are also downsides of using it (e.g. http://unix.stackexchange.com/questions/29608/why-is-it-better-to-use-usr-bin-env-name-instead-of-path-to-name-as-my/29620#29620)

If you did have a problem, it's a good reason to change the shebang line, but if that's not the case, I'd like to hear more about your thoughts and experience on this matter.
",junegunn,2014-12-01 09:19:33
106,2014-12-01 00:51:56,"Just a reminder: I haven't actually tried it, but fzf should work on BSDs, too. Most of these ship csh/tcsh/ksh as standard shells, and bash is not available per default. BSDs usually install to `/usr/local/bin`, so at least on these systems (probably a rather small part of the users but still..) such shebangs would theoretically fail.

(I'll try it for real in the next days.)
",mhinz,2014-12-01 09:19:33
106,2014-12-01 01:31:57,"@mhinz Since the role of the install script is to set up bash and zsh functions and extensions, there's no point of running it on the systems without those shells. In that case, we should be able to run fzf as a Ruby script by manually putting it in a `$PATH` directory, but no extra goodies. Having said that, I have to mention that I have no experience in systems other than Linux and OSX.
",junegunn,2014-12-01 09:19:33
106,2014-12-01 08:47:03,"I'm using nixos, that's why I did it. Actually I had to patch a lot.
Maybe later I will finish patching to get it works on my machine and create the new PR.
",jagajaga,2014-12-01 09:19:33
106,2014-12-01 09:21:09,"Okay I see, NixOS and BSD not having `/bin/bash` seems like a good enough reason to merge this.
",junegunn,2014-12-01 09:19:33
106,2014-12-01 12:59:36,"@mhinz Looks like I misunderstood the point of your comment. Sorry about that.
",junegunn,2014-12-01 09:19:33
105,2014-11-21 12:06:21,"Things like `ag bundle` throw this error:

<S_CODE_TOKEN>

But `ag foo` does not. I also cannot open man pages, but I can run the base command and get the ""What manual page do you want?"" message. This also breaks Vim integration.

I can run fzf on the command line and use C-t, but the Vim plugin flashes up and vanishes with zero results. All vim-plug updates fail too because of the error I mentioned above. If I remove the source line for `~/.fzf.bash` from `~/.bashrc` everything works fine, but I don't get completions.

Is there anyway I can provide you with some more debug information? Please ask away, the tool is excellent, it just doesn't work for me right now.

Bash version: 4.3.30(1)-release (x86_64-apple-darwin13.4.0)

Running in iTerm2 on a Mac through tmux and without tmux, same result.
",Olical,2015-02-28 18:14:09
105,2014-11-21 12:23:33,"After executing the `uninstall` script to strip out all bindings and completions, the `fzf` command works fine and so does Vim. So it's something to do with autocomplete or the key bindings.
",Olical,2015-02-28 18:14:09
105,2014-11-21 14:56:26,"I'm on OSX and I was using system-default bash which is `GNU bash, version 3.2.53(1)-release (x86_64-apple-darwin14)`. So I installed a newer version using Homebrew, `GNU bash, version 4.3.30(1)-release (x86_64-apple-darwin14.0.0)`, but I can't reproduce the problem you mentioned. It is possible that the shell extension of fzf conflicts with other settings in your bashrc or something. Could you try again in a new shell that is started with an empty .bashrc?
",junegunn,2015-02-28 18:14:09
105,2014-11-21 15:07:32,"I tried it with a completely empty bashrc. Initially everything looked good, Vim and shell completed names, but `man brew` caused the error again. I'm on OSX too with the latest brew version of bash.

<S_CODE_TOKEN>

Yes, there isn't actually a brew man page, but that should make a difference. And my `~/.bashrc` only contains this.

<S_CODE_TOKEN>

It's very odd. I though it might be down to terminal too, but I've tried the default Mac application and iTerm2, both have the same result. I don't know what other information I can give you, it's obviously some kind of edge case, I wish I knew what though. I'll report back if I find anything.
",Olical,2015-02-28 18:14:09
105,2014-11-21 15:08:43,"`man ls` also fails... that's odd. It thinks I have no man entries whatsoever. (only when `~/.fzf.bash` sourced)
",Olical,2015-02-28 18:14:09
105,2014-11-21 15:24:55,"Removing line 7 or `~/.fzf.bash` (`export -f fzf > /dev/null`) stops the errors. And everything still seems to work! Very odd!
",Olical,2015-02-28 18:14:09
105,2014-11-21 15:35:24,"Ah hah! https://kb.brightcomputing.com/faq/index.php?action=artikel&cat=2&id=239&artlang=en

> The patching of BASH due to the shellshock vulnerability has introduced some changes with respect to the function definition syntax in exported functions
",Olical,2015-02-28 18:14:09
105,2014-11-21 15:51:54,"Swapping line 7 of `~/.fzf.bash` to this seems to fix everything. And `type fzf` still reports it as a function.

<S_CODE_TOKEN>
",Olical,2015-02-28 18:14:09
105,2014-11-22 03:27:54,"Thanks for the investigation! I'll have to look further into the consequences of shellshock patch.

Regarding the point of changing `export` to `declare`, without `export`, things like `bash -c fzf` or `tmux split-window fzf` will not work anymore. (`bash -ci fzf` will work by the way as it will reload .bashrc) So not to break backward compatibility, I would like to look for a workaround for the problem first.
",junegunn,2015-02-28 18:14:09
105,2014-11-22 03:50:42,"Just curious, what does `curl https://shellshocker.net/shellshock_test.sh | bash` say?
My default bash on Mavericks (`/bin/bash`) and homebrew-bash (`/usr/local/bin/bash`) show no vulnerability.
",junegunn,2015-02-28 18:14:09
105,2014-11-22 04:09:37,"Could you follow this code and let me know of the output?

<S_CODE_TOKEN>

Do you run into anything suspicious while following the above scenario?
",junegunn,2015-02-28 18:14:09
105,2014-11-22 09:05:21,"> My default bash on Mavericks (/bin/bash) and homebrew-bash (/usr/local/bin/bash) show no vulnerability.

Same here.

> Do you run into anything suspicious while following the above scenario?

Works for me, but then again I can't reproduce the problem in the first place.

All tested with the latest bash from brew.
",mhinz,2015-02-28 18:14:09
104,2014-11-03 15:04:21,"As suggested in #102.
",junegunn,2014-11-04 14:30:11
103,2014-10-27 16:48:22,"[bpkg](https://github.com/bpkg/bpkg) is a package manager for bash.
It can be really useful if fzf would be installed using it instead of git,
",thedrow,2015-01-15 04:08:55
103,2014-10-27 18:44:01,"+1
",jwerle,2015-01-15 04:08:55
103,2014-10-28 01:15:18,"Thanks, I'm not familiar with bpkg, I'll take a look.
Given the following facts, we have to assess if bpkg can be a good fit for fzf.
1. fzf is a Ruby script
2. In order to fix the Ruby version used, instead of directly using the script, the install script creates bash/zsh/fish function with the hard-coded path to the Ruby executable. The definition for the function should be loaded when bash starts
3. I find myself using the key bindings generated by install script (CTRL-T, CTRL-R, ALT-C) far more often than fzf function itself. They also should be loaded when bash starts.
4. The same applies to fuzzy completion for bash
5. fzf comes with its own Vim plugin
",junegunn,2015-01-15 04:08:55
103,2014-10-28 08:25:51,"The vim plugin should be installable using [Vundle](https://github.com/gmarik/Vundle.vim) because that's what the cool kids use to manage vim plugins.
fzf can also be installed with a gem package though I feel that it is less appropriate since fzf is mostly a bash tool. It can go either way.
",thedrow,2015-01-15 04:08:55
103,2014-10-28 09:28:48,"fzf as a Vim plugin is [already installable](https://github.com/junegunn/fzf#install-as-vim-plugin) with various Vim plugin managers. I find [vim-plug](github.com/junegunn/vim-plug) a much better fit than Vundle since you can make the install script executed from inside Vim whenever the repository is found to have been updated. Actually this is what I have in my .vimrc to install fzf:

<S_CODE_TOKEN>

> fzf can also be installed with a gem package

fzf is on Rubygems, but I stopped pushing news versions there a while ago. Distributing a command-line utility on Rubygems is not really a good idea. Many Ruby users switch between multiple versions of Ruby using RVM or rbenv, so they have to install fzf for every Ruby version on their system, and it is simply not possible for JRuby. And of course, the extra package - key bindings and fuzzy completion - can't be distributed as a Ruby gem.

And fzf is even [on Homebrew](https://github.com/Homebrew/homebrew/blob/c4be49a169e25707388513740729c5ecf4901fea/Library/Formula/fzf.rb), but you still have to run the install script to set up the extra goodies, so I don't see much benefit in that. (`git clone` vs. `brew install`)
",junegunn,2015-01-15 04:08:55
102,2014-10-24 09:09:34,"## The request

I would like to somehow be able to dissociate what is shown to what is returned. For example, the output of `git --no-pager log --format=oneline --abbrev-commit -n 5` in this repository

<S_CODE_TOKEN>

I'd like to be able to show only the commit messages, without the sha, but at the same time, when I choose one, I want the sha to be in the output. So fzf would show me this:

<S_CODE_TOKEN>

And when I choose the last one, I get this, the full line:

<S_CODE_TOKEN>
## Possible interface

The interface could, for example, be similar to that for limiting the search scope. Only in this case we either choose what to hide, or what to show.
",jdevera,2014-11-04 14:31:11
102,2014-10-24 15:56:44,"Thanks, it's an interesting idea. I can imagine something like: `--show-nth=2,1,4..`

Implementing it, however, could be non-trivial as doing so will make match highlighting (bright green) much more complex, especially in extended-search mode where there can be more than one matched substrings for each item. Maybe we should consider disabling the highlighting when `--show-nth` option is used.
",junegunn,2014-11-04 14:31:11
102,2014-10-31 17:51:45,"![show-nth](https://cloud.githubusercontent.com/assets/700826/4865742/2c405d8c-6126-11e4-860a-d2fac3bd0cf1.gif)

Implementing the feature is not really hard if we simply decide not to highlight the matched substrings. However, I'm not really sure if I like the feature as it can be pretty confusing when the query matches the hidden parts of the string as shown above (especially without substring highlighting).
",junegunn,2014-11-04 14:31:11
102,2014-10-31 20:51:33,"At least in my use case, I didn't need to match in the fields that were not visible, I only needed them to appear in the output in the end. If this was the case, I guess it would not be so confusing any more.
",jdevera,2014-11-04 14:31:11
102,2014-11-01 01:20:09,"Okay, I see. So we transform the original string and match against it, but return the unmodified string. That makes sense.
",junegunn,2014-11-04 14:31:11
102,2014-11-01 06:00:54,"Pushed to `add-with-nth` branch. Please test it and let me know if it meets your expectation.
In your case,  `--with-nth=2..` should do.
",junegunn,2014-11-04 14:31:11
102,2014-11-03 07:26:35,"Hey, that was fast! Thanks.

I tried this `--with-nth=2..` and it worked as expected. However, when I did `--with-nth=1`, I was shown only the first column, as expected, but then the output contained only this, rather than the full string.
",jdevera,2014-11-04 14:31:11
102,2014-11-03 08:20:44,"Hmm, are you sure? I can't reproduce:

<S_CODE_TOKEN>
",junegunn,2014-11-04 14:31:11
102,2014-11-03 09:14:20,"When I use that command, it also works for me:

<S_CODE_TOKEN>

In fact, I have reduced it to this:

<S_CODE_TOKEN>

However, it doesn't seem to be a problem in the manual selection in all cases, since:

<S_CODE_TOKEN>
",jdevera,2014-11-04 14:31:11
102,2014-11-03 09:16:05,"Furthermore, in all the manual selection cases above, if I type nothing, just select the only one match, then it shows `hello`. But if I type something like an `h`, then it returns `hello world`

Also tried this:

<S_CODE_TOKEN>

Again, if I don't type anything, but just use arrow keys to select one match, then I get only the visible part. If I filter by typing something, then I get the full string.
",jdevera,2014-11-04 14:31:11
102,2014-11-03 09:34:15,"Maybe it's a bug I already fixed in the branch, I force-pushed a couple of times.
The HEAD should be db37e675756ef51b623326d54c29a86e98781544, if it isn't, please force-pull and check.
",junegunn,2014-11-04 14:31:11
102,2014-11-03 12:26:03,"<S_CODE_TOKEN>

Could it be related to?:

<S_CODE_TOKEN>
",jdevera,2014-11-04 14:31:11
102,2014-11-03 13:59:26,"Aha, yes, it looks like it's only reproducible on old Rubies, I'll take a look.
",junegunn,2014-11-04 14:31:11
102,2014-11-03 15:03:24,"Please pull again and test it. (I'm dealing with the dark side of Ruby :/)
",junegunn,2014-11-04 14:31:11
102,2014-11-03 22:29:18,"Works like a charm! Thank you so much!
",jdevera,2014-11-04 14:31:11
102,2014-11-04 14:31:11,"Alright, it's finally merged to master. I just needed to write test cases for the problems we ran into.
Thanks for your feedback!
",junegunn,2014-11-04 14:31:11
102,2014-11-05 07:36:11,"I just noticed that if I set the delimiter to something like `' | '` (one of my use cases) and do `--with-nth=2..` I get lines starting with the delimiter. That was unexpected. I would expect this to eat up this initial delimiter. Shall I create a new issue for it?
",jdevera,2014-11-04 14:31:11
102,2014-11-05 07:40:43,"Sorry, my bad, I did not realise that I had to regex-escape the expression passed to `-d`.
",jdevera,2014-11-04 14:31:11
102,2014-11-05 07:45:06,"It's worth noting that the value of `--nth` is applied after the cutting from `--with-nth` has been applied.
",jdevera,2014-11-04 14:31:11
102,2014-11-05 15:23:14,"Ah yes, the help entry could use some clarification. But I felt that it's the only sane way to do it. Imagine the confusion when we do it the other way round, especially in extended-search mode.
",junegunn,2014-11-04 14:31:11
102,2016-06-06 18:40:05,"There's always someone who likes the opposite :)
I mean - to show N fields but only pass one (some) of them (specified by -nth ) to the output.
A kind of -xnth, which would not only specify  the fields to make selection on, but also forced to only take those fields from selection. 
Generalizing the idea, inside an item line i'd like to distinguish fields i can make filtering on from the  fields that are accepted e.g.

John  23 single baseball
Bob 29 married guitar
Suzi 22 single cooking
Mary 30 single baseball
Dan 44 single guitar

I would like select all singles who like baseball but only printout their name and age.
Perhaps there's a way to achieve that w/o implementing a new -xntht option? 
I could not manage that using --with-nth and -nth - they seem to contradict for use case like that
",tagwint,2014-11-04 14:31:11
102,2016-06-07 03:27:48,"@tagwint 

> Perhaps there's a way to achieve that w/o implementing a new -xntht option? 

You can post-process the output. e.g. awk, sed.
",junegunn,2014-11-04 14:31:11
102,2016-06-07 07:19:10,"Sure I can, and I also can chain fzf calls. There's nearly always more than one way of doing things :)
",tagwint,2014-11-04 14:31:11
102,2016-06-07 07:46:30,"@tagwint Yes, and so there's no point of adding the option. It's not like `--nth` or `--with-nth` which cannot be done with pre or post processors.
",junegunn,2014-11-04 14:31:11
101,2014-10-20 15:00:03,"> Use CTRL-J and CTRL-K (or CTRL-N and CTRL-P) to change the selection

I have recently started the habit of using `<C-j>` instead of Enter. It would be nice if it worked in fzf, too.

Can this be configured?
",blueyed,2014-10-20 15:07:49
101,2014-10-20 15:02:10,"`<C-m>` should also work as Enter (it's actually the same on most keyboards). So you might want to get into that habit instead.
",wellle,2014-10-20 15:07:49
101,2014-10-20 15:07:49,"@wellle 
I see - of course, thanks!
",blueyed,2014-10-20 15:07:49
101,2014-10-20 15:53:37,"Thanks @wellle :)
@blueyed I noticed [peco](https://github.com/peco/peco) (which is not precisely a fuzzy finder though) allows remapping of keys, you might want to check it out.
",junegunn,2014-10-20 15:07:49
101,2014-10-20 16:26:48,"Thanks.

peco appears to be similar to [tmenu](https://github.com/dhamidi/tmenu), which I've seen today.

The keybinding is not really an issue, I could always edit the source to change it.. :)
",blueyed,2014-10-20 15:07:49
101,2015-05-21 15:20:56,"<S_CODE_TOKEN>

:)
",junegunn,2014-10-20 15:07:49
100,2014-10-16 13:34:40,"When using fzf, I do not have git completition from `source /usr/local/bin/git-completion.bash` (I'm on bash).

A kind-of workaround is to put the `source ...git-completition.bash` line _below_ the fzf line in the bashrc, but somehow I do not have completition for branch names then, only for commands, so

`git checko<tab>` compeletes to `git checkout` but `git checkout d<tab>` does not complete to `git checkout develop` (the ""develop"" branch is the only branch with leading ""d"", so it _should_ work, of course).
",matthiasbeyer,2014-10-16 15:52:43
100,2014-10-16 13:50:31,"I just noticed: The completition works perfectly, _except_ for the self-written aliases. I have an git alias:

<S_CODE_TOKEN>

Where the branch gets not completed. I don't know whether this is my fault or not, but maybe you can investigate?
",matthiasbeyer,2014-10-16 15:52:43
100,2014-10-16 15:45:19,"1. If you `source` git-completion.sh after fzf completion, it will simply override the completion defined by fzf.  Then fuzzy completion (`**`) will not work, but the git completion should work without a problem.
2. If fzf completion is loaded after git-completion, fzf completion will respect the previously defined git completion and try to fall back to it when the string before the cursor does not end with `**`. I tested it on OSX and confirmed that it works as expected. I also had no problem with aliases (`git puff <tab><tab>` gave me remote name and branch name in turn)

Please make sure your problem is reproducible with fzf, and not so without fzf. If you still can get it working, try editing `fzf-completion.bash` file and removing `git` command from [this line](https://github.com/junegunn/fzf/blob/master/fzf-completion.bash#L196).
",junegunn,2014-10-16 15:52:43
100,2014-10-16 15:52:43,"This was my fault, everything works as expected now.
",matthiasbeyer,2014-10-16 15:52:43
99,2014-10-13 21:44:04,"Hey all,

I'm just wondering if anyone out there knows how to setup or has a specific configurations. I'd like to use FZF in vim with options to open a file in a new tab.

I currently do this by opening a new tab with vim -- ""tabedit"" and then running ""FZF"". I feel like these should be combined somehow.

Thanks for any help.
",mgruesbeck,2014-10-14 19:05:46
99,2014-10-14 01:50:15,"Hi, unfortunately the command used to open selected files is [hard-coded to `e`](https://github.com/junegunn/fzf/blob/d1387bf512c1ffee64140e07f95a82e78873ffc3/plugin/fzf.vim#L242) and currently there's no option to customize it. For the time being, you can try to override the FZF command using `fzf#run` function like follows:

<S_CODE_TOKEN>
",junegunn,2014-10-14 19:05:46
99,2014-10-14 19:05:46,"Hey junegunn,

Thanks for your time and your solution. I typically open files in new tabs so this might work great as a default override. 

Also, I love your plugin. Awesome work! I'll close out this issue.
",mgruesbeck,2014-10-14 19:05:46
99,2014-10-15 04:29:17,"Thanks :)

The following is a more precise version that supports bang version of the command (`:FZF!`) which does not use tmux split.

<S_CODE_TOKEN>

(Notice that the emptiness check of `<q-args>` from the previous code is removed. I updated the plugin to ignore empty `dir` option 6fd6fff3a65ec23cfd84d347d77648fde2b24ee9)
",junegunn,2014-10-14 19:05:46
98,2014-10-11 15:29:19,"fzf is mostly used for searching in the history of commands. If I am searching for a command but it is not in the history, no results will be found. I need to close fuzzy finder and then type again the command.

A very nice enhancement would be to run the command typed if the history did not match anything. Do you think such a feature would be useful? Is it hard to implement?

Thank you for developing this tool :P
",andreicristianpetcu,2015-01-15 04:07:30
98,2014-10-11 15:49:33,"If you know some shell-scripting, you can implement it using `--print-query` option of fzf:

<S_CODE_TOKEN>

We might decide to change the current behavior of `CTRL-R` key binding to use the option, but since fzf does fuzzy search by default, I don't think many people type in a precise command string as the query, so it may not make sense to paste the input onto the command line. (For example, if I'm looking for `git clone xxx`, I would type in `gitclnxx` instead of the exact prefix of the command)
",junegunn,2015-01-15 04:07:30
97,2014-09-18 04:14:28,"The biggest change is that I converted `grep` to `\grep`. I noticed that trying to open a bash shell hung forever b/c I had aliased grep to have some flags I use often and this broke fzf when sourcing. Strangely enough, this didn't affect zsh though. I also modified the install script to make sure that `~/.fzf.${shell}` exists before sourcing which also means the uninstall script no longer needs to remove those lines. I version control my dotfiles which are on numerous machines, some without fzf. I figured other people may do the same. Also some users may prefer `.` as opposed to `source` so I modified `append_line` to optionally just check for `~/.fzf.${shell}` instead of `source ~/.fzf.${shell}`.
",mjwhitta,2014-09-18 10:22:40
97,2014-09-18 05:32:04,"Checking for the existence of the files was proposed before (https://github.com/junegunn/fzf/pull/56), but I rejected the pull request because that could result in two lines in the rc files. But it looks like you managed to circumvent the problem by changing the check condition. I'll test it by tonight and merge, thanks!
",junegunn,2014-09-18 10:22:40
97,2014-09-18 10:23:41,"Merged, but I reverted the commented-out `remove_line` call based on the following reasoning.
1. The lines will not cause errors thanks to the check, but still, they're garbage. Uninstall script should do its best to clean up the stuff implanted by the installer.
2. If the user installed fzf before your commit, the updated uninstall script will not remove the existing line without the check.

I changed uninstall script to remove both `[ -f ~/.fzf.${shell} ] && source ~/.fzf.${shell}` and `source ~/.fzf.${shell}` from the files.

Thanks!
",junegunn,2014-09-18 10:22:40
97,2014-09-18 11:40:44,"I'm not sure what I was thinking last night. You are right, the uninstall script should definitely remove as much as possible. I never intend to run the uninstaller myself so regardless this won't create unwanted changes in my dotfile repo.

That being said, if users replaced `source` with `.` your uninstall script will still miss it. You may be able to just remove lines with `~/.fzf.${shell}` but if the user manually wrapped with an if statement, you may have abandoned `fi`'s you would need to look for. 

Maybe it's best to assume, if the user modified the lines you added, it's safe to leave them. Not saying any of this needs addressed, just something to think about.

Side-note: Every time I find a useful tool on Reddit and make a couple ""enhancements"", I go to make a pull-request and find out it's another of your tools!
",mjwhitta,2014-09-18 10:22:40
97,2014-09-18 12:01:05,"> Maybe it's best to assume, if the user modified the lines you added, it's safe to leave them. Not saying any of this needs addressed, just something to think about.

I agree. Removing lines from the user's files is a very dangerous operation and therefore uninstall script should be made conservative and should not automatically remove lines that were not added by the install script. So currently, the uninstall script will ask for the user's permission when if sees the line that contains the search string, but is not exactly the same as the string.

<S_CODE_TOKEN>

> Side-note: Every time I find a useful tool on Reddit and make a couple ""enhancements"", I go to make a pull-request and find out it's another of your tools!

Thanks! :smiley: 
",junegunn,2014-09-18 10:22:40
96,2014-09-14 11:52:45,"Is there any way to open a file in a split? I am using that feature a lot. It currently prevents me from switching to fzf inside of vim.
",Tranquility,2015-02-28 18:13:59
96,2014-09-14 12:01:20,"You can do it with [`fzf#run()` function](https://github.com/junegunn/fzf#fzfrunoptions). These are the mappings I use to open files in horizontal and vertical splits

<S_CODE_TOKEN>
",junegunn,2015-02-28 18:13:59
96,2014-09-14 12:08:34,"Thanks for the very fast reply. But I would like to choose when I open the file instead of the finder. It sounds more convenient to me to open it with the same keybinding everytime and it consumes bindings because it is global. 
",Tranquility,2015-02-28 18:13:59
96,2014-09-14 12:11:08,"But maybe I just need to get familiar with your way. I think fzf is amazing. It is really fast and seems to have the best ranking algorithm.
",Tranquility,2015-02-28 18:13:59
96,2014-09-14 12:12:32,"Ah, I see. So it's the duplicate of #61. Then I don't think it's possible as fzf is just an external script that doesn't know about the intention of the caller.
",junegunn,2015-02-28 18:13:59
95,2014-08-30 13:07:04,"Fixes #94 
I am not sure about making this the default. Should we introduce an option somewhere to enable/disable this feature? 
",Neki,2014-08-30 13:33:21
95,2014-08-30 13:33:25,"Looks good to me, thanks!
",junegunn,2014-08-30 13:33:21
94,2014-08-30 12:32:45,"Hi,

I installed fzf using the provided install script (I run bash inside a tmux session on Ubuntu if that matters). The autocompletion does not display symbolic links when asking for completion to the `cd` command.

<S_CODE_TOKEN>

As an aside, an option to resolve symbolic links would be a nice feature.

Thanks for this great tool!
",Neki,2014-08-30 13:33:21
93,2014-08-28 14:34:46,"Given the following file tree:

<S_CODE_TOKEN>

When I search for `myfolder`, then I would expect to get `~/my_folder/foo` as the primary result.

However, fzf shows me the (more complicate) match `~/Development/daemon/node_modules/forever-monitor/node_modules/broadway/node_modules/nconf/node_modules/optimist/node_modules/wordwrap/example/center.js`.

Is this desired behaviour, and if so, can someone explain why?
",bsingr,2014-08-29 13:19:36
93,2014-08-28 15:20:12,"Could be a duplicate of #10. How many files are there?
",junegunn,2014-08-29 13:19:36
93,2014-08-28 15:26:46,"Please note that `FZF_DEFAULT_SORT` is deprecated in favor of `FZF_DEFAULT_OPTS`.

e.g. `FZF_DEFAULT_OPTS=""--sort 10000""`
",junegunn,2014-08-29 13:19:36
93,2014-08-29 13:19:36,"Thanks, works perfectly with increase max.
",bsingr,2014-08-29 13:19:36
92,2014-08-21 17:32:29,"I had to move the configuration into the generated config files instead
of where one would normally put it (e.g. ~/.bashrc). This is to properly
support tmux, since when using tmux a new shell is spawned that may not
be configured the same way.

I was unable to figure out how to make this work for fish. For some
reason the new shell in the tmux pane does not get variables set with
`set -x` (I tried placing them as the first lines of `fzf_key_bindings`).
",eventualbuddha,2015-03-01 10:37:18
92,2014-08-21 18:09:54,"Hi, thanks for the pull request.
I'd like to discuss a couple issues regarding this before merging it.

1.
Have you checked [the previous discussion](https://github.com/junegunn/fzf/issues/40) on the use of FZF_DEFAULT_COMMAND for CTRL-T?

> I agree that making the command configurable is preferable, but should we use the same FZF_DEFAULT_COMMAND for CTRL-T as well? Should we introduce another env variable?
> ...
> Simply put, the problem is the inconsistency between fzf command and CTRL-T key binding:
> 
> fzf w/o FZF_DEFAULT_COMMAND: list of files
> CTRL-T: list of files and directories

As I stated in the linked issue, I'm not sure if it's appropriate that we apply FZF_DEFAULT_COMMAND in the context of CTRL-T. If we set it to something like `ag`, then we won't be able to use CTRL-T for commands like `cd`, `rmdir` which expect directories as their arguments. I think it would be better to have a separate variable like `FZF_CTRL_T_COMMAND` that is only used for the key binding. What do you think?

2.

> This is to properly support tmux, since when using tmux a new shell is spawned that may not be configured the same way.

True, but if the user puts the variable in his .bashrc or .zshrc and restarts tmux after reloading it in the parent shell, then it will be visible by CTRL-T splits. Since generated scripts can be overwritten if the install script is executed again, the user can inadvertently lose the changes he made to the script. So it might not be the best place to put custom settings. How about we simply state in the documentation (or print a message on installation) that a restart of tmux is required for the setting to take effect in CTRL-T splits?
",junegunn,2015-03-01 10:37:18
92,2014-08-22 17:20:14,"I hadn't seen the previous discussion, but I definitely should have looked for that before digging into this. Thanks for pointing it out. I'm inclined toward your suggestion of having a `FZF_CTRL_T_COMMAND`, though I don't like that the name includes the default key binding.

The whole tmux shell spawning this is unnecessary, as you pointed out. I had been testing by spawning new shells _within_ tmux, but I hadn't restarted tmux. So most of this PR is not terribly useful. If you like the idea of having a separate environment variable I can alter this PR to use that. What do you think of the name, though?
",eventualbuddha,2015-03-01 10:37:18
92,2014-08-22 18:04:43,"I'm okay with the name of this new variable. The default key binding of CTRL-T is hard-coded in the generated script and currently there's no way to change the key without touching the script. And if the user is really determined to modify the content of the file, what stops him from changing the command as well? There's little reason to use the variable in that case. So I think it's acceptable to use a name that contains CTRL-T. Most of the users of fzf don't even care about the script, and for them, the name with CTRL-T should be easier to understand. Let me know if you have different opinion.

> If you like the idea of having a separate environment variable I can alter this PR to use that.

:+1: 
",junegunn,2015-03-01 10:37:18
92,2016-04-22 05:18:05,"Nice plugin, I love it. 

And I am still looking for an answer for this question. Does this mean CTRL-T doesn't work? If it doesn't, how come it still shows in README.md?

I am on zsh, and I don't use ag. 
",yifanchen,2015-03-01 10:37:18
92,2016-04-22 06:46:51,"You're looking at an ancient issue. FZF_CTRL_T_COMMAND works.

<S_CODE_TOKEN>
",junegunn,2015-03-01 10:37:18
92,2016-04-22 06:58:42,"Doesn't work, instead, it threw me an error sound.
",yifanchen,2015-03-01 10:37:18
92,2016-04-22 07:01:44,"@yifanchen Okay, then please create a separate issue with the information of your environment and a minimal shell configuration that can be used to reproduce the problem. (No other shell plugins and stuff that might get in the way) 
",junegunn,2015-03-01 10:37:18
92,2016-04-22 17:26:04,"@junegunn sorry, I was wrong. Actually nothing happens when I `ctrl - t`. 

For example: If I do `rm` then `ctrl - t`. Nothing happens. 
",yifanchen,2015-03-01 10:37:18
92,2016-04-22 18:14:26,"@yifanchen Please create a new issue and provide information about your environment.
",junegunn,2015-03-01 10:37:18
92,2016-04-22 23:53:40,"Will do :).
",yifanchen,2015-03-01 10:37:18
92,2016-04-23 02:38:14,"Quick question. Is there any way to set a default opening directory? 
",yifanchen,2015-03-01 10:37:18
91,2014-08-16 09:05:04,"When using the ctrg+r shortcut i get this error after a while:
The fzf file list shows up correctly and the error happens imideately when i start typing (no matter what char).

/usr/bin/fzf:1108:in `index': invalid byte sequence in UTF-8 (ArgumentError))
        from /usr/bin/fzf:1108:in`tokenize'
        from /usr/bin/fzf:1127:in `do_match'
        from /usr/bin/fzf:1188:in`block in match'
        from /usr/bin/fzf:1186:in `map'
        from /usr/bin/fzf:1186:in`match'
        from /usr/bin/fzf:662:in `block (2 levels) in start_search'
        from /usr/bin/fzf:652:in`each'
        from /usr/bin/fzf:652:in `block in start_search'

I say ""after a while"" because it worked at first but not anymore.
Any idea what is going on?

This only happens when i use ctrg+r, the fh bash function fors fine.

I am using bash on archlinux with ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux].
",sxe,2014-08-16 11:24:26
91,2014-08-16 10:55:00,"Thanks for the report. Could you update and try again?
",junegunn,2014-08-16 11:24:26
91,2014-08-16 11:10:16,"That was quick, great job, it works. Thx
",sxe,2014-08-16 11:24:26
91,2014-08-16 11:24:26,"No problem, thank you!
",junegunn,2014-08-16 11:24:26
90,2014-08-14 05:40:33,"When reverse searching in zsh (and probably bash) with a large history (40k+), fzf is quite sluggish. I narrowed this slowness down to the `-n` option. I started to go through the code to see if I could fix it but I gave up after I couldn't get a pry debugger session going.

Anyways, I don't care to address commands by number (as typing a 5 digit number isn't very efficient) so I made fzf's reverse search faster by remove the `-n` call. I didn't make a PR for this as I know you really like addressing commands by number but I thought it'd be good to open an issue to address/document this sluggishness.

Here's my solution to the problem: https://github.com/ericboehs/dotfiles/commit/5f6510 (`-e` being another of my preferences as long `curl` calls commonly come up first rather than the much shorter command I'm usually looking for). It strips out the number column from `fc -l 1` alleviating the need to use `-n`.

I know 40k may seem like a large list but this is the result of programming on the same machine every day for 10+ months. I also don't dedup my history so I can perform statistical analysis on which commands I run most often. I'm also adding `| awk ' !x[$0]++'` to my [fzf config](https://github.com/ericboehs/dotfiles/commit/abed0592) to make the list unique without sorting it.
",ericboehs,2015-01-15 04:13:14
90,2014-08-14 14:29:41,"Yeah, the current use of `-n` option (`-n..,1,2..`) will make fzf roughly 2~3 times slower than without it. Simply because it has to search thrice for each line, first the entire line (`..`), then the index (`1`), and lastly the part without the index (`2..`). This allows anchors like `^` and `$` in extended-search mode to work for all three cases. But it seems like an overkill, `-n2..,1` will be good enough for the most of the cases, and will be much faster. I'll consider changing it.

`| awk ' !x[$0]++'` could be a nice addition to the current implementation (it has to use `$2` though). Thanks for the tip!
",junegunn,2015-01-15 04:13:14
90,2014-08-14 14:52:15,"I'm playing with the `awk` trick you mentioned, but found an issue with it. It leaves only the eldest entry from each set of duplicates, but I think a typical user will want the newest entry instead especially one has a long list of history.

For example, if we have the following list

<S_CODE_TOKEN>

the `awk` command will remove the most recent use of `cat` and `ls`. I believe this can be very confusing to the users as they can't see the command they just typed from the list.
",junegunn,2015-01-15 04:13:14
90,2014-08-14 16:10:24,"Changing the option from `-n..,1,2..` to `-n2..,1` does make it faster by 25%, but it's still much slower than the case without the option. I'll see if there's room for improvement.
",junegunn,2015-01-15 04:13:14
90,2014-08-14 18:08:19,"I pushed a commit that improves the performance of `--nth` option. The overhead is still noticeable but it's ~~much~~ better than it used to be.
",junegunn,2015-01-15 04:13:14
90,2014-08-14 19:22:28,"_(Please ignore the previous benchmark results I attached.)_

It looks like it's almost impossible to make `--nth` option fast enough, as the use of it requires tokenization of every line. The last two commits tried to fix some inefficiencies of it, but the overhead is still significant for 50K lines of history.

<S_CODE_TOKEN>
",junegunn,2015-01-15 04:13:14
90,2015-01-15 04:13:14,"Closing as fzf has become significantly faster now.
",junegunn,2015-01-15 04:13:14
89,2014-08-11 12:30:26,"Hi, 

just installed this today, and not sure if it is a general issue or not, but FYI I had to use dos2unix or install would fail:

<S_CODE_TOKEN>
",jmlucjav,2014-08-17 17:58:52
89,2014-08-11 13:38:28,"First I have to mention I have almost zero experience or knowledge on Cygwin :)

fzf was written in unix environment, and naturally it's in unix file format. You used `git clone` command to download fzf, right? Then, it looks like git cloned the source in dos format. If I recall correctly, when I installed git on Windows, it asked me whether it should convert the source to dos format or not. Do you remember how you installed git?
",junegunn,2014-08-17 17:58:52
89,2014-08-11 15:18:46,"thanks for replying. I tried installing as I saw it said it was supported in cygwin.

I installed it with git, msysGit. I already had an issue right after installing...it had installed it at
C:\cygdrive\c\home...
instead of C:\home...
so I just moved the folder to the right place. 
Not sure if this was expected or not, and if that was the root of the issue I reported here. Anyway, after using dos2unix things still dont work:

<S_CODE_TOKEN>

unfortunately I have little konwledge of cygwin internals too, so not sure what is really the issue here...
",jmlucjav,2014-08-17 17:58:52
89,2014-08-11 15:33:54,"Last time I checked it worked on Cygwin and msys2 (see https://github.com/junegunn/fzf/issues/18)
First of all, you should not have needed dox2unix. Could you try the second method in the README page that does not use git?

<S_CODE_TOKEN>
",junegunn,2014-08-17 17:58:52
89,2014-08-11 19:20:36,"ok, I installed via the second method, and this time installation worked fine, so maybe recommend second method for cygwin users in the README (just in case?).

But, when running fzf, still not working for me, maybe this problem is contrained to my host...
I have installed a windows native ruby, not ruby inside cygwin, not sure if that could be the issue?

<S_CODE_TOKEN>
",jmlucjav,2014-08-17 17:58:52
89,2014-08-11 21:31:52,"ok, it seems indeed using native windows ruby with cygwin is the issue:
- http://stackoverflow.com/questions/3831131/rubygems-cygwin-posix-path-not-found-by-ruby-exe
- http://blog.mmediasys.com/2008/10/27/handy-tip-dont-mix-one-click-installer-with-cygwin/
- http://www.question-defense.com/2009/03/27/rubyexe-no-such-file-or-directory-cygdrivecrubybingem-loaderror

so not sure if anything can be done or the answer is just 'use cygwin's ruby' but then what about other programs that need native ruby? 
",jmlucjav,2014-08-17 17:58:52
89,2014-08-12 03:35:36,"Having succeeded with the second method proves that your git installation automatically converts files to dos format. I don't use Windows as development environment, so I'm not sure if it's conventional for Windows users. But I agree that it would be helpful to mention it.

> so not sure if anything can be done or the answer is just 'use cygwin's ruby' but then what about other programs that need native ruby?

The install script will setup fzf function with hard-coded path to the Ruby, e.g.

<S_CODE_TOKEN>

You can modify the path in the function if you'd like to user other Ruby as your system default. I'll create a wiki page for cygwin users.
",junegunn,2014-08-17 17:58:52
89,2014-08-12 11:42:25,"the path in .fzf.zsh looks ok:

<S_CODE_TOKEN>

so I guess at this point this is not much a fzf issue but a 'use native Ruby within cygwin' issue. If someone with greater knowledge of cygwin internals encounters the same issue maybe they can shed some light.

thanks
",jmlucjav,2014-08-17 17:58:52
89,2014-08-17 17:58:52,"I created a wiki page here: https://github.com/junegunn/fzf/wiki/Issues-with-Cygwin
Feel free to update it if you happen to achieve a better understanding of the issue.
I'm closing this issue. Thanks.
",junegunn,2014-08-17 17:58:52
88,2014-08-10 19:40:32,"I normally have used ctrl+r and hit it a few times to get the right command pre-fzf, which worked fine, and now with fzf, I can use my arrow keys to scroll the results, but I have _many_ more to scroll than before. I don't see any value in presenting numerous duplicate results here, and zsh's default ctrl+r behavior doesn't do this.
",bnovc,2014-08-14 02:57:28
88,2014-08-11 01:40:04,"How about adding `setopt hist_ignore_dups` to your zshrc?

(See the previous discussion here: https://github.com/junegunn/fzf/issues/49)
",junegunn,2014-08-14 02:57:28
88,2014-08-13 21:15:52,"+1 cool, thank you!
",andreicristianpetcu,2014-08-14 02:57:28
88,2014-08-13 23:01:17,"@junegunn : that did not change the behavior. I still see duplicates.
",bnovc,2014-08-14 02:57:28
88,2014-08-14 00:49:56,"@bnovc It works for me, see:

<S_CODE_TOKEN>
",junegunn,2014-08-14 02:57:28
88,2014-08-14 01:50:51,"Ah, I didn't realize it would not collapse old commands. This is probably fine then. 

Thank you 

Sent from my iPhone

> On Aug 13, 2014, at 5:49 PM, Junegunn Choi notifications@github.com wrote:
> 
> @bnovc It works for me, see:
> 
> jg% fc -l 1
>     1  fc -l 1
> jg% echo 'hello'
> hello
> jg% echo 'hello'
> hello
> jg% echo 'hello'
> hello
> jg% fc -l 1
>     1  fc -l 1
>     2  echo 'hello'
>     3  echo 'hello'
>     4  echo 'hello'
> jg% setopt hist_ignore_dups
> jg% echo 'world'
> world
> jg% echo 'world'
> world
> jg% echo 'world'
> world
> jg% fc -l 1
>     1  fc -l 1
>     2  echo 'hello'
>     3  echo 'hello'
>     4  echo 'hello'
>     5  fc -l 1
>     6  setopt hist_ignore_dups
>     7  echo 'world'
> jg%
> —
> Reply to this email directly or view it on GitHub.
",bnovc,2014-08-14 02:57:28
88,2014-08-14 02:57:28,"Okay, I'm closing this issue.
",junegunn,2014-08-14 02:57:28
87,2014-08-06 17:39:23,"Do you have any recommendations for making this work for the vim plugin? fzf respects my .gitignore, except when using fzf within vim. Maybe I'm doing a thing wrong, though?

<S_CODE_TOKEN>
",shmup,2014-08-07 18:25:42
87,2014-08-07 17:32:36,"Hmm, looks like $FZF_DEFAULT_COMMAND is not propagated when using tmux splits. When I add `export FZF_DEFAULT_COMMAND='echo hello'` to my .bashrc, it works as expected on `:FZF!`, but not on `:FZF`. I'll see what I can do.
",junegunn,2014-08-07 18:25:42
87,2014-08-07 17:45:00,"I'm not sure if we're looking at the same problem though, but I updated the Vim plugin to push the vars to tmux split. Could you update and try it?
",junegunn,2014-08-07 18:25:42
87,2014-08-07 18:02:48,"It looks like this introduced a new issue that I'm not wrapping my head around quite yet. Here is all I can show you for the time being:

![image](https://cloud.githubusercontent.com/assets/118710/3846482/066cf9c8-1e5d-11e4-8a76-bd8d06b9ee03.png)
",shmup,2014-08-07 18:25:42
87,2014-08-07 18:04:03,":astonished:

Looks like I have to escape double-quotes, just a sec.
",junegunn,2014-08-07 18:25:42
87,2014-08-07 18:22:56,"Should work now. Sorry for the trouble.
",junegunn,2014-08-07 18:25:42
87,2014-08-07 18:25:42,"Hey, stop your apologizing and thanks for the awesome work. I use so many things that you develop.

:balloon: works great. cheers!
",shmup,2014-08-07 18:25:42
87,2014-08-07 18:31:52,":+1: 
",junegunn,2014-08-07 18:25:42
86,2014-08-04 16:33:34,"[antigen](https://github.com/zsh-users/antigen) is a plugin manager for zsh that facilitates keeping external plugins up to date easily (similar to vundle).  Would be great to have this installable/updatable via antigen so it could be maintained up to date painlessly!
",leonardt,2014-08-04 16:34:52
86,2014-08-04 16:34:52,"Just realized this wouldn't make sense with the scope of ruby extensions, better to target brew and other package managers.
",leonardt,2014-08-04 16:34:52
86,2014-08-04 16:54:28,"https://github.com/Homebrew/homebrew/blob/master/Library/Formula/fzf.rb

:smiley: 

However, I don't see a clear benefit of using homebrew since it is still recommended to run the install script.
",junegunn,2014-08-04 16:34:52
86,2014-08-04 17:13:42,"Sweet, personally it helps to be able to update all my packages by running a `brew update` or something similar, instead of having to `git pull; ./install.sh` in a bunch of git repos.  Purely convenience
",leonardt,2014-08-04 16:34:52
86,2014-08-05 03:21:47,"Fair enough. Notice that I haven't released a new version for a while, so there are a few fixes that haven't gotten into homebrew.
",junegunn,2014-08-04 16:34:52
85,2014-08-02 08:44:54,"As @junegunn suggests in #84, let discuss more detail about how to organize useful snippets for users.
A `fzf-contrib` would be great. Any other thought?
",lazywei,2016-06-23 16:48:58
85,2014-08-02 09:28:49,"Thanks. Currently I only have a very cursory idea of how it should be done. But here are some things we have to think through.

### Project structure

bash, zsh, and fish all have different syntaxes, and we have to partition the snippets, either by using directories for each shell,

<S_CODE_TOKEN>

or by using different extensions

<S_CODE_TOKEN>

We already have bash completion in this repository, but we could put more completion functions in contrib repo as well.

### Naming convention

Each snippet should be given a unique, unchanging name. We should have some kind of consistent naming convention for each snippet.

### Renaming

But the user may not like the convention so I think we should provide some helper function for loading the snippets and renaming them as desired

<S_CODE_TOKEN>

### Documentation

It would be cool if we could see the list of the snippets and the description of each directly from shell (like a man page maybe?)

<S_CODE_TOKEN>
",junegunn,2016-06-23 16:48:58
85,2014-08-02 17:14:55,"As for project structure, I would prefer the latter one as it is more clear to me.
As for naming convention, could you give a more specific description?
I like the idea of `fzf-contrib-load` and `fzf-contrib-help`.
",lazywei,2016-06-23 16:48:58
85,2014-08-02 17:40:46,"I haven't really given thought about the naming convention, but I'm just stating that we need one.
Well, take a look at the functions in the wiki page. Some start with `f`-prefix, some don't. And they usually have very short names, which is convenient if you're the author of the function who knows exactly what it does, but it's really hard for somebody else to see what it is for just by looking at the names. (fe, fs, fd, cdf, fbr, ...). One approach we can take is to give them long, explicit names, and let the user loads them with short aliases.

<S_CODE_TOKEN>
",junegunn,2016-06-23 16:48:58
85,2014-08-02 17:52:54,"Hmm.. I feel that too.
In addition, I think the names should be somehow ""exclusive"" to prevent collision. With that in mind, I think `f`-prefix is good.
I think making explicit names and leave the alias or mapping to users is good!
",lazywei,2016-06-23 16:48:58
85,2014-08-30 08:49:25,"I started a repo at [fzf-contrib](https://github.com/lazywei/fzf-contrib).

Since some shell scripts are the same in bash and zsh, how should we organize such snippets? For example

<S_CODE_TOKEN>

can be used in both zsh and bash. Then where should we place it? Or should we add a `common/` folder under the `shell/` to keep these shared snippets?
",lazywei,2016-06-23 16:48:58
85,2014-08-30 13:43:48,"Thanks for taking the initiative.
You could use a symlink in that case, but I'm not sure if it's the best way to do it. Well, since you're the maintainer of the project, it's totally up to you to decide how to organize stuff. You don't even need to follow the ideas I mentioned in the above comment :) Just let me know when you think the project is ready for release. We could mention it on the README page or on Wiki.
",junegunn,2016-06-23 16:48:58
85,2015-02-13 23:36:01,"Would a github organization perhaps be an option? Something like this tmux organization https://github.com/tmux-plugins for example.

This would allow for separate repos which is useful for things like vim plugin managers. I've created a [repo](https://github.com/george-b/vim-fzf) which is essentially a mirror of the vim plugin in this repo with some minor additions purely to better integrate with my dotfiles.
",george-b,2016-06-23 16:48:58
85,2015-02-14 01:23:56,"@george-b I'd thought about it. But felt that it would not be very useful to many, as everyone has different tastes and needs. So we would have to provide stuff that can be heavily customized, but then again, most of the stuff have only a few lines of code, so doing so can be an overkill or too much work at the same time. So, I'm currently okay with the current way of sharing examples on the wiki page. I have a feeling though, that the page is getting too long. We may need to split the page into sub pages.
",junegunn,2016-06-23 16:48:58
85,2015-02-14 03:25:18,"@junegunn I suppose the vim plugin is the only complex thing, as you say the other snippets are fairly simple.
:+1: for breaking up the wiki though.
",george-b,2016-06-23 16:48:58
85,2015-02-14 03:56:54,"@george-b @junegunn 

Sorry I totally forgot this issue ...

I'm somehow against placing snippets in wiki as it's not easy to maintain them (without version control, and modification management). Either placing them into fzf repo, or using `fzf-contrib` to contain them would be better, IMHO.

By the way, @george-b , if you'd like to, maybe I can add you as fzf-contrib's collaborator, and then we can transfer the snippets to that repo?

Thanks.
",lazywei,2016-06-23 16:48:58
85,2015-02-14 04:32:10,"@lazywei @george-b I see it differently now. For me, they are just examples to give the idea of what can be done with fzf, so I don't think strict version management is really required. I want the users of fzf to creatively come up with their own solutions to their problems on their environment after skimming through the examples, instead of just picking up random stuff without fully understanding them. In the sense, I think wiki pages, blog posts or [video screencasts](https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD) should suffice. Anyway, that's just my idea.
",junegunn,2016-06-23 16:48:58
85,2015-02-15 22:06:20,"Hey, if someone is still interested in ""organizing"" code snippets around fzf, have a look at [this](https://github.com/D630/fzf-contrib). It's simply a first draft (or something like that). Feel free to fork and modify it to your needs.
",D630,2016-06-23 16:48:58
85,2015-08-01 12:06:02,"@D360, thanks for the initiative. I like the way ctrlp snippets do things. If you want to filter on registers you can install the plugin  'ctrlp-register' and then add it to the list of authorized ctrlp plugins. IMO the contrib folder could split the snippets into several repositores ""fzf-registers.vim"", ""fzf-marks.vim"" what do you think ?
",teto,2016-06-23 16:48:58
84,2014-08-02 07:04:37,"I tried to follow https://github.com/junegunn/fzf/wiki/examples#z to integrate with z.

But after I add

<S_CODE_TOKEN>

to `.zshrc`

iTerm2 crashes as soon as I launch it.

![image](https://cloud.githubusercontent.com/assets/2840571/3787365/41faed86-1a13-11e4-80f9-949d6dc5dd8a.png)
",lazywei,2014-08-02 08:42:28
84,2014-08-02 08:31:30,"/cc @thomasf

Actually I was doubtful that adding a function could crash zsh. So I installed z and added the function and voila!

<S_CODE_TOKEN>

Looks like a bug of zsh, I could workaround the problem by unaliasing `z` just before the definition:

<S_CODE_TOKEN>

I'll update the wiki page.
",junegunn,2014-08-02 08:42:28
84,2014-08-02 08:34:30,"Thanks, that works!

By the way, I think we should collect those examples and snippets in wiki page into a folder or something. So we can use git to track them, fork them, and contribute to them much easier.
If you agree with it, I surely can help with that.

Also, thanks for such amazing tools. Make my life easier :-)
",lazywei,2014-08-02 08:42:28
84,2014-08-02 08:42:28,"Thanks :)

Yeah, that's nice idea. Maybe instead of using Wiki, we could create another repo called `fzf-contrib` or something and put each example in the wiki into as a file so that it can be sourced by the user. If you're further interested in the discussion of the idea, please create an issue for it.
",junegunn,2014-08-02 08:42:28
84,2014-08-02 09:59:32,"I am using bash so I would not know about any zsh incompatibilities. sorry.
",thomasf,2014-08-02 08:42:28
84,2014-08-02 10:05:30,"@thomasf No problem, it's clearly a bug of zsh and we found the workaround :smiley: Thanks for the contribution!
",junegunn,2014-08-02 08:42:28
83,2014-07-25 04:11:38,"- Key bindings
  - [x] bash
  - [x] zsh
  - [x] fish
- Auto completion
  - [x] bash - file
  - [x] bash - dir
  - [x] bash - process
  - bash - host (TBD)

Is there any tool that can be used to test _interactive_ shell scripts?

Assuming there isn't one already:
- Using tmux seems like a nice idea
  - Send keystrokes to the split pane
  - Monitor the content of the split pane and act accordingly
",junegunn,2015-03-01 10:37:34
82,2014-07-24 15:34:15,"`~/.fzf/install` creates amongst others:

<S_CODE_TOKEN>

To speed up `__fsel()` we should use Process Substitution and avoid a needless subshell like that:

<S_CODE_TOKEN>

When we do not need declarations in `__fcd()`, we could simplify it with:

<S_CODE_TOKEN>
",D630,2014-07-24 18:32:43
82,2014-07-24 16:54:20,"Hi, thanks for the tips.

Maybe using process substitution is a better practice, but I'm doubtful that it will make a noticeable difference in performance. If you have some data that backs up the point, please let me know. Anyway, I have a question on your version of `__fsel`. I noticed that you added `-r` option to `read` command. What is it for? Could you give me an example for which the option is required? 

`__fcd` was written in two parts because we can terminate fzf without selecting an item by pressing CTRL-C or ESC and I didn't want to execute `printf` part in that case.
",junegunn,2014-07-24 18:32:43
82,2014-07-24 18:31:58,"Yes, without these modifications there is no end of the world; I just wanted to mention it. It attracted my attention as I was reinstalling `fzf` because of some changes in my ruby packages.

I always use `read` with option `-r` to have a clean input (on the recommendation of [Bash-Hackers Wiki](http://wiki.bash-hackers.org/commands/builtin/read#read_without_-r) and [Greg's Wiki](http://mywiki.wooledge.org/BashFAQ/001)). The best practice may be:

<S_CODE_TOKEN>
",D630,2014-07-24 18:32:43
82,2014-07-24 19:09:31,"In my `.fzf.bash` I will use it without a loop and `read`:

<S_CODE_TOKEN>
",D630,2014-07-24 18:32:43
82,2014-07-25 01:06:14,"I like the simplicity of the method, but it doesn't work well with file paths that contain spaces. We could surround the command substitution with double-quotes to avoid the issue, but then it will not correctly handle multiple selections.

I'm not at all against rewriting stuff in a better, more efficient way. But unfortunately we don't have a complete test scenario, and I can't be certain that a change will not break anything. So please understand that I have to be conservative and cautious in maintaining the code.
",junegunn,2014-07-24 18:32:43
82,2014-07-26 19:11:12,"Ja, I understand that, and you are doing a good job :+1: 
",D630,2014-07-24 18:32:43
81,2014-07-20 18:59:05,"Is it possible to open a grep result directly in Vim ? I know of using it directly like: ag foo | fzf

Is it possible to 'sink' it to Vim - do we have an option already for that ?  :FZF something ? 

Below discussion here greps a file but its for a buffer and it scans each line , what I am looking for is a grep tool . My idea is to execute ag/ack {string}  | fzf and open in the Vim recognizing the Line Nr and the Buffer Name  . I am working on a solution using something similar but wondering if anyone has done that already ?

Source :  http://www.reddit.com/r/vim/comments/28eh6k/fzf_vim_tmux/

function! BufGet()
  return map(getline(1, '$'), ""printf('%5d  %s', v:key + 1, v:val)"")
endfunction

function! LineOpen(e)
  execute 'normal! '. matchstr(a:e, '[0-9]+'). 'G'
endfunction

nnoremap <silent> <Leader>f :call fzf#run({
\   'source':      BufGet(),
\   'sink':        function('LineOpen'),
\   'options':     '+m',
\   'tmux_height': '40%'
\ })<CR>
",nishantvarma,2014-07-21 12:22:33
81,2014-07-21 03:46:45,"<S_CODE_TOKEN>

(I'm sorry about the name :smirk:)
",junegunn,2014-07-21 12:22:33
81,2014-07-21 12:22:33,"Thanks , name is fine :)  Will share my FZF specific vimrc GIST for Vimmers later !  Cheers
",nishantvarma,2014-07-21 12:22:33
81,2017-02-02 02:06:18,"@junegunn I've just found this and it is super useful! However when I run it fzf always opens up in a full screen pane and the configs I've set for it don't apply. Here is my config: 

<S_CODE_TOKEN>

Any idea's how I can get it to maintain the 20% split?

Unrelated question, but I might as well ask here. If I set the layout to top, left or right I get a full screen panel as well. I'd love to be able to set it to top and still see the code.

Thanks",bag-man,2014-07-21 12:22:33
81,2017-02-02 02:11:44,"@bag-man `fzf#wrap` will take care of it.

<S_CODE_TOKEN>

See https://github.com/junegunn/fzf#fzfwrap",junegunn,2014-07-21 12:22:33
81,2017-02-02 03:01:51,"Nice one thanks, Although I should add I just found this excellent article: https://medium.com/@crashybang/supercharge-vim-with-fzf-and-ripgrep-d4661fc853d2#.xgkib3w5f

Which gives an even nicer solution:

<S_CODE_TOKEN>",bag-man,2014-07-21 12:22:33
80,2014-07-18 04:11:50,"I added key code mappings for control + left arrow (^[[1;5D) and control + right arrow (^[[1;5C) and assigned them to move the cursor back or forward by one word.
",wilywampa,2014-07-18 04:20:42
80,2014-07-18 04:20:48,"Merged, thanks!
",junegunn,2014-07-18 04:20:42
79,2014-07-17 10:04:42,"If I install fzf with completions I get access to the double-asterisk completion but no 'regular' completion.

For example, `ssh **<tab>` gives me the fzf output, but `ssh <tab>` only gives me a regular ls of the working directory. Should I instead be seeing fzf springing into action?

At the moment I'm using fzf without completion because it's quicker for me just to use regular completion, but it would be nice to have access to the double-asterisk completion as well.

(bash 4.3.18)
",kuremu,2014-07-18 03:15:43
79,2014-07-17 15:27:59,"Are you running Ubuntu? I experienced the same issue on Ubuntu and updated the source with a workaround. Please update and check if it helps.
",junegunn,2014-07-18 03:15:43
79,2014-07-18 03:13:57,"I'm running on both Ubuntu and Snow Leopard.

The latest pull seems to have resolved the issue on both - `ssh **<tab>` gives me fzf output `ssh <tab>` gives me the expected bash completion. Excellent!
",kuremu,2014-07-18 03:15:43
78,2014-07-16 14:06:32,"Hi,

Thanks for this great tool, it's one of the few I use frequently for some time now.
What would be very cool for me is to give more weight/importance to the most-selected history entries. 
It should not be too difficult to do it, but it probably would be much faster for you to do it, than for me, since you already know the code.
The good thing is that you don't have to make this weight (the count of recent selections) persistent across sessions. For the first implementation, you might lose the weight when the shell is closed, and it would still be a very good improvement over the current code.

I'm not sure if it's clear what I'd like to see, so let me know if you would like some clarifications.
",sshtmc,2015-01-15 04:14:09
78,2014-07-16 14:13:40,"Are you referring to the core fzf script, or some shell script around it?
The fzf script is just a filter so it's ignorant of the context or the intention of the user.
",junegunn,2015-01-15 04:14:09
78,2014-07-16 15:38:17,"Well, I believe I referred to the core fzf script. Let me try to give an example of what I'd like to have, and you decide where the new code would best fit.

I run
$ ls -l
10 times (in different directories), and then I run some text processing, eg.
$ cat a.txt
$ less a.txt
now, when I press ""CTRL+R"", to run ls -l again, I have to type in a big chunk of the 'ls -l' command to get it to be selected. Try the commands above to see what I'm talking about.
However, since I ran 'ls -l' really often, it's very likely that I will run it again. So:
1) ls -l should be the first command to be offered when I press CTRL+R, since it is _the_ most frequently used command
2) even if it is not the most frequently used command in recent time (eg I used grep more often), it should definitely pop up as soon as I type in 'l' (L), or possibly 'ls', since neither 'l' nor 'ls' overlap with grep.

In other words, infrequent commands should not be offered as the first choice. If I want to re-run the last command, I can simply press 'up' on my keyboard to recall the last command(s), right?
",sshtmc,2015-01-15 04:14:09
78,2014-07-16 16:13:35,"(Actually I have `export HISTCONTROL=ignoreboth:erasedups` in my .bashrc, so I don't have duplicates in history)

So you're primarily interested in tuning the behavior of CTRL-R key binding. And you want to sort the result based on the number of occurrences in the given list, right?

As I mentioned in my previous comment, the core fzf script is context-free. It just reads lines from STDIN. So for example, `cat poem | fzf` and `ls | fzf` are completely different contexts, but fzf doesn't know.

Since we cannot be sure that your requirement in this case that the item with more number of occurrences should be ranked higher can be generally applicable to most use cases, I think it should be done outside the core script.
1. Write a script that sorts the history list according to the number of occurrences in the descending order
2. Feed the result into fzf
3. Disable sorting at fzf side with `--no-sort` (or `+s`) option
",junegunn,2015-01-15 04:14:09
78,2014-12-08 09:49:47,"Hmm, so I have been going through the code a bit, to understand how fzf works, and I realized that the actual problem is the regular expression that fzf uses to find matches.

Why is it a problem? Well, because it does not support sorting by the size of the match, or at least not by default.
In other words, if I type in 4 characters, fzf should first offer me all entries that have _the same_ 4 characters _in the same order_ and _continuous_. After that, other entries, that have 1 character difference should be offered. After that, entries with 2 char difference, and after that 3, etc.

Right now, as I see it, there is no support for this. If this functionality was there, it would have been less of an issue that I do not have entries sorted by my preference.

I like fzf, and I still use it daily, but this 'feature' is really annonying.
Do you think it's possible to implement such framework? E.g. Kupfer has good support for this, but it's a GUI app https://engla.github.io/kupfer/
",sshtmc,2015-01-15 04:14:09
78,2014-12-08 10:06:17,"You can find the sort criteria of fzf here: https://github.com/junegunn/fzf/blob/d89c9e/fzf#L327-L342
1. First, by the length of the matched substring (or the sum of the lengths when in extended-search mode)
2. Then by the length of the line
3. And then by the lexicographic order

So, I'm not sure if I understood you correctly, it looks like you want stable-sort right?
1. First, by the length of the matched substring (or the sum of the lengths when in extended-search mode)
2. Then by the given order of the line

A concrete example would be really helpful.
",junegunn,2015-01-15 04:14:09
78,2014-12-08 10:49:03,"I can't be more specific than this (already provided above):

$ ls -l
$ cat a.txt
$ less a.txt
[CTRL+R] ls

This offers me as the 'best match' the last entry, ie 'less a.txt'.
Do you get a different suggestion? I am running zsh, not bash.
",sshtmc,2015-01-15 04:14:09
78,2014-12-08 11:07:42,"How about this?

<S_CODE_TOKEN>
",junegunn,2015-01-15 04:14:09
78,2014-12-08 11:10:38,"The reason `CTRL-R` picked `less a.txt` is not because it's the best match, but because `CTRL-R` by default does not sort the result. You'll notice that `CTRL-R` binding defined in `~/.fzf.zsh` is using `+s` option (a.k.a. `--no-sort`) Remove the option from the file then fzf will sort the result.
",junegunn,2015-01-15 04:14:09
78,2014-12-08 12:55:00,"Hmmm.... you are right, fzf now does sort the results.
However, it does not sort well, at least not on my machine.
The 'ls' command is still not picked as default. Even worse, in my 100k-entry history, 'ls -l' went even further away from the 'best' suggestion. 
No wonder the sorting is not enabled by default. :)

I'm not saying that sorting is an easy problem, but it's certainly a very important one.
Many search engines existed before Google, but Google won because it:
1. had a lot of data
2. has the best algorithms to sort potential results.

In my zsh history I now fulfil the 1st requirement, but not the 2nd. :)

Could sorting be separated into a plug-in module, so that we could play with it?
",sshtmc,2015-01-15 04:14:09
78,2014-12-08 13:10:53,"Are you aware of `--sort=N` option? It's mentioned in the README page and `--help`. fzf will refuse to sort the result if the total number of items exceeds N, which is by default 1000. Since you have 100k items, you have to set it to be larger than that. But then fzf will not work as snappy as you might like it to be.
",junegunn,2015-01-15 04:14:09
78,2014-12-08 13:14:31,"Related: #93, #10
",junegunn,2015-01-15 04:14:09
78,2015-01-15 04:14:09,"Please note that the new go version sorts the result regardless of the number of matches. `--sort=N` number is silently ignored.
",junegunn,2015-01-15 04:14:09
77,2014-07-10 02:11:52,"I tried fzf today on a PC running mintty/Cygwin and on my laptop running iTerm2/OS X and had the same problem both places. The results that come up as I'm typing are corrupted until I scroll through them or type Ctrl-L. This happens in tmux if I run fzf using the Ctrl-R key binding or if I run fzf just as 'fzf' from the command line. It does NOT happen when I invoke it with the Ctrl-T key binding (which opens up a new tmux pane). It also does not happen if I run fzf outside of tmux. I tried it with my .tmux.conf completely blank and that didn't help.

On my laptop I am running zsh 5.0.5, tmux 1.9a (I also tried a newer dev build of tmux, same results), and ruby 2.0.0p451.

Any ideas?

Here's what it looks like before/after redrawing with Ctrl-L:

![screen shot 2014-07-09 at 7 05 00 pm](https://cloud.githubusercontent.com/assets/4472522/3533660/c94e4a98-07d6-11e4-9264-dabc0c8ec372.png)
![screen shot 2014-07-09 at 7 05 10 pm](https://cloud.githubusercontent.com/assets/4472522/3533663/ce8b5eec-07d6-11e4-8050-ecc194df33d0.png)
",wilywampa,2014-07-10 02:35:53
77,2014-07-10 02:22:55,"I suppose your $TERM is set to `xterm-256color`, right?
Try again after setting it to `screen-256color` as described [here](https://github.com/junegunn/fzf#rendering-issues).
",junegunn,2014-07-10 02:35:53
77,2014-07-10 02:35:53,"Sorry, I should've read that. Thanks!
",wilywampa,2014-07-10 02:35:53
77,2014-07-10 03:27:42,"No problem. `xterm-256color` inside tmux is known to cause some visual glitches on other curses applications as well, such as Vim.
",junegunn,2014-07-10 02:35:53
77,2015-03-21 18:43:54,"Any idea how I should address this issue? I need to use `xterm-256color-italic` to get italics in vim (for comments). So I want to override my `$TERM` only when fzf is in use.

I find that `TERM=screen-256color fzf` works wonderfully when I run it in the shell, so I'll  just need to find out how to get it to do that with the key binds. 
",unphased,2014-07-10 02:35:53
77,2015-03-22 02:34:31,"@unphased Have you tried the method on the following page?
https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
",junegunn,2014-07-10 02:35:53
77,2015-03-22 05:32:37,"I have not seen such a recommendation to make a screen-256color-italic terminfo (probably because I set up my italic term prior to May 2014), but it seems very straightforward to do so. Do you think this will also fix the tmux rendering problem? 

My workaround is pretty simple and seems to be working for now -- I just edited the `~/.fzf.zsh` and all its calls to `fzf` to `TERM=screen-256color fzf`. 

Also, on Linux everything seems to render fine with `xterm-256color-italic`.
",unphased,2014-07-10 02:35:53
77,2015-03-22 06:11:43,"@unphased I haven't tried the solution nor italics on terminal so I don't know, but probably. It looks like you won't have to edit ~/.fzf.zsh or Vim plugin if it works. Can you try it and let me know how it goes?
",junegunn,2014-07-10 02:35:53
77,2015-03-22 17:51:14,"I would love to try it.. but I think i've spent way too much time (all of Saturday!) reorganizing and rewriting things for my environment, and I have to work on something else today. 

Do you know if it is something that tmux does that specifically requires the `$TERM` to start with `screen` that addresses the issue?

I still have to keep my own unique `~/.fzf.zsh` because I don't use `fc -l 1` for the history list, i use my own python script for it. This way, it loads all my 50K and growing history entries from disk for browsing with fzf without having zsh load all of them every time I start zsh, saving memory and time. 
",unphased,2014-07-10 02:35:53
77,2015-03-22 18:01:28,"@unphased 

> Do you know if it is something that tmux does that specifically requires the $TERM to start with screen that addresses the issue?

Well, see here: http://tmux.cvs.sourceforge.net/viewvc/tmux/tmux/FAQ

<S_CODE_TOKEN>
",junegunn,2014-07-10 02:35:53
76,2014-07-07 08:11:56,"I have a script that gives me a list of issues to work on, and I wanted to use fzf to choose one. The script uses unicode arrows to denote priority, and these are not shown correctly in fzf.

Input:

<S_CODE_TOKEN>

What fzf renders:

<S_CODE_TOKEN>
",jdevera,2014-07-07 10:56:24
76,2014-07-07 08:32:14,"I guess you're running Ruby 1.8, right?
UTF-8 characters are not correctly displayed on Ruby 1.8 as noted in https://github.com/junegunn/fzf#rendering-issues, and there's not much I can do about it.
",junegunn,2014-07-07 10:56:24
76,2014-07-07 10:56:24,"Unfortunately, yes. Thanks for the quick reply.
",jdevera,2014-07-07 10:56:24
75,2014-07-04 18:05:53,"Fixes (at least partially) #72
",junegunn,2014-07-04 18:06:10
74,2014-07-03 10:37:15,"Is it possible to open the completion list directly in (G|Mac)Vim window like in CtrlP?
",rizo,2014-07-03 13:00:32
74,2014-07-03 13:00:30,"Nope. The best we can do is to start fzf in an external terminal emulator like iTerm2 or xterm.
",junegunn,2014-07-03 13:00:32
73,2014-07-02 12:20:07,"When using i.e. HISTTIMEFORMAT the timestamps are recorded for every command. It would be really nice if there was an option to display them on the right hand side.
",rojaro,2014-07-04 12:04:50
73,2014-07-02 16:33:04,"Hi, actually I also use HISTTIMEFORMAT and quite like it. But it's not easy to come up with a certain format that can be unanimously agreed upon by the users of fzf, so the decision was made simply not to use the option. The code below is the default version excerpted from the generated ~/.fzf.bash:

<S_CODE_TOKEN>

As you can see it empties `HISTTIMEFORMAT` to guarantee the same behavior.

I suggest that you override the default key binding, by editing `~/.fzf.bash` or adding a line to your `.bashrc`, it's quite straightforward to customize it.

An example:

<S_CODE_TOKEN>
",junegunn,2014-07-04 12:04:50
73,2014-07-04 12:04:50,"Awesome! Just what i wanted ... now i just need to figure out how to get the date on the right hand side ... :+1:

Edit: also, this also prepends the date on the shell when selecting a command from history, but i am sure i can fix that tonight ...
",rojaro,2014-07-04 12:04:50
72,2014-07-01 09:08:34,"Whichever of these two that gets sourced _first_ stops working. If `.fzf.bash` is first, the `vim ~/**<TAB>` stuff will stop working, and if the other way around `git <TAB>` will stop working.

**.bash_profile**

<S_CODE_TOKEN>
",renstrom,2014-07-14 12:58:04
72,2014-07-01 10:23:26,"Nice find. It's a tricky situation. Both scripts are overriding previously defined completions. I'll see if I could make fzf-completion script behave in a more civilized manner.
",junegunn,2014-07-14 12:58:04
72,2014-07-04 18:08:31,"Hey, I've updated fzf completion to fail back to the original completion function when trigger sequence is not found. Please update and check if it helps the situation. Of course this only works when `.fzf.bash` is sourced after `/etc/bash_completion`.
",junegunn,2014-07-14 12:58:04
72,2014-07-14 12:58:04,"I believe this is fixed in the recent version. Please reopen the issue if you still see the problem.
",junegunn,2014-07-14 12:58:04
71,2014-06-30 16:22:38,,junegunn,2014-06-30 16:23:07
70,2014-06-28 22:26:45,"I would like to use `fzf` as a kind of ""selection menu"", in that way `dmenu` may be used. Therefore, it would be nice, if `fzf` had:
- a modifiable prompt
-  an option to print the query respectively the literal string to stdout, when `fzf` has not matched anything 
",D630,2014-07-04 07:46:32
70,2014-06-29 06:02:49,"> a modifiable prompt

So fzf currently prints `>` as the prompt, you mean you want to change it to an arbitrary string? Would it be enough even if it can't be changed during the run?

> an option to print the query respectively the literal string to stdout, when fzf has not matched anything

I can imagine something like `--print-query` option, which makes fzf _always_ print the query as the first line of its output. What do you think?
",junegunn,2014-07-04 07:46:32
70,2014-06-29 18:47:46,"It would be nice, if there were an option to pass some infomation into `fzf` (using the prompt or a status line). `dmenu` has the option `-p`:

<S_CODE_TOKEN>

I can imagine a situation, when I want to browse parts of my file system (the prompt would show me the current directory without using `pwd` every time). For example like this:

<S_CODE_TOKEN>
",D630,2014-07-04 07:46:32
70,2014-06-29 18:50:00,"An option to print the input field to stdout, when it is a non-matching query, would be nice. I can imagine a better `urlview`:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I would do then:
- select ""https://github.com/junegunn/dotfiles""
- copy it to the input field
- modify it to ""https://github.com/junegunn/fzf""
- enter it and print it to stdout
- open it in the webbrowser
",D630,2014-07-04 07:46:32
70,2014-06-30 02:58:22,"These are really creative applications of fzf, thanks for sharing it. :+1: 

> An option to print the input field to stdout, when it is a non-matching query, would be nice.

As I mentioned in the previous comment, I'd prefer to have an option that prints the query regardless of whether the match was found or not for consistency.

<S_CODE_TOKEN>

What do you think?
",junegunn,2014-07-04 07:46:32
70,2014-06-30 03:28:16,"I've added `--prompt` and `--print-query` option to fzf and pushed to [issue-70 branch](https://github.com/junegunn/fzf/tree/issue-70). Could you try it and check if it can satisfy your needs?
",junegunn,2014-07-04 07:46:32
70,2014-06-30 12:52:21,"Very very nice, and thank you a lot! Both options work fine for me.

For future releases I suggest a better tolerance of handling the input field and of its interaction with the selection line.

I have fit the scipts from above into right position and pushed them:

https://gist.github.com/D630/311f92b18b321b9833e0

https://gist.github.com/D630/1ee7225abe5ff69f44a3

Cheers!
",D630,2014-07-04 07:46:32
70,2014-06-30 15:46:57,"Great, I'll merge it into master.

> For future releases I suggest a better tolerance of handling the input field and of its interaction with the selection line.

Could you be more specific? I'm interested in hearing about the problem you're having with fzf. Thanks.
",junegunn,2014-07-04 07:46:32
70,2014-07-04 06:57:01,"I think about  tab completion of the selection line in the input field.
",D630,2014-07-04 07:46:32
70,2014-07-04 07:46:32,"I see. I don't think the concept of tab completion goes nicely with _fuzzy_ finder, but I'll think about it. Anyway the options are now merged to master and I'm closing this issue. Thanks.
",junegunn,2014-07-04 07:46:32
69,2014-06-27 03:24:09,"Closes #68.
",junegunn,2014-06-27 04:32:04
68,2014-06-25 07:31:40,"If the search provides more results than fit in one screen, I am unable to scroll outside of the ones that are currently showing.
",jdevera,2014-06-27 04:32:04
68,2014-06-25 08:36:29,"I confirm that it would be very useful sometimes to scroll the list.
",dimonomid,2014-06-27 04:32:04
68,2014-06-26 03:55:30,"Thanks for the suggestion. I've started working on it on [scrollable branch](https://github.com/junegunn/fzf/tree/scrollable). You can check it out now if you want. I'm not quite confident about the implementation yet, but it will be merged to master in a few days.
",junegunn,2014-06-27 04:32:04
68,2014-06-26 12:25:22,"Can't really comment on the implementation, but I tried it today and it's quite usable :)

The icing on the cake would be to be able to quickly go to top and bottom, maybe with the home and end keys.
",jdevera,2014-06-27 04:32:04
68,2014-06-26 14:13:21,"Thanks! Let me know if you run into any issue. Home key and end key are already taken for moving cursor to the front and to the end of the query, but PgUp and PgDn will allow you to move up and down quickly. And mouse click and wheel also work.
",junegunn,2014-06-27 04:32:04
68,2014-06-27 04:33:25,"Merged to master. Let me know if you see any issue. Thanks!
",junegunn,2014-06-27 04:32:04
67,2014-06-24 06:57:46,"The script should now be much more resilient and less brittle.

Major changes include:
- User stronger quoting. Either shellquote or quote everthing (escaping quotes)
- Drop temporary files in favor of a wrapper (similar to xargs)
- Redirect stderr with ^
- Line breaks for readability
- General best practices
",neersighted,2014-07-06 12:23:53
67,2014-06-24 06:57:58,":shipit:  @junegunn
",neersighted,2014-07-06 12:23:53
67,2014-06-24 08:43:16,"Thank you! I really appreciate your effort.
I'm testing it, but unfortunately I'm running into several issues.

##### CTRL-T doesn't work correctly

For some reason, CTRL-T doesn't work correctly both on OSX and Ubuntu 14. It gives only a subset of the entire list (69k/245k), or even hangs the terminal, see the following gif. The bash version works without a problem.

![fishy](https://cloud.githubusercontent.com/assets/700826/3368919/19821a98-fb7b-11e3-972e-1ea7cb6d0521.gif)

##### CTRL-R breaks if the command includes `'` (single-quote)

<S_CODE_TOKEN>

If the selected command includes a single single-quote, it fails with the following message:

<S_CODE_TOKEN>
- `echo ""what's' up""`
  - In this case, single-quotes are removed
- `echo ""what's up; what's up""`
  - This gives error, and invalid command pasted on to the command-line

##### ""Fixes #60""

Technically, this doesn't completely fix #60. The [problem of `ls | fzf` not working](https://github.com/junegunn/fzf/issues/60#issuecomment-46531505) does not involve key bindings, so this pull request cannot address the issue. It's obviously due to a bug of fish, and the only cure I've found so far is to remove `~/.config/fish/functions/fzf.fish` and put fzf in a bin directory.
",junegunn,2014-07-06 12:23:53
67,2014-06-24 15:01:22,"Hmm, that explains why I fixed #60... As part of my tweaking I put it in my `$PATH`. As for the other issues, yeah, the quote one is an easy fix. Not sure why CTRL-T isn't working for you, as it's fine on my end.
",neersighted,2014-07-06 12:23:53
67,2014-06-24 15:47:08,"Have you tried CTRL-T on a directory with a very large number of subdirectories and files, like `/`?
For me it's reproducible on both OSX and Ubuntu Linux (VM), so I don't think it's because of some erroneous config.
",junegunn,2014-07-06 12:23:53
67,2014-06-24 16:08:26,"@junegunn All the outstanding issues should be fixed. I am using lots of `\` to escape quotes now, and I forgot to add `-print`(s) to `__fzf_select`.
",neersighted,2014-07-06 12:23:53
67,2014-06-24 16:19:49,"Thanks for the quick fix. I currently don't have access to Ubuntu VM right now, I'll test it on it tomorrow and let you know. I can confirm that CTRL-T issue is fixed on OSX. But I see a couple more issues.
1. CTRL-T: Multiple selections (tab / shift-tab) are not correctly handled. Should be delimited with spaces.
2. CTRL-R: `echo ""that's why \$PATH""` loses backslash.

EDIT: typo
",junegunn,2014-07-06 12:23:53
67,2014-06-24 16:26:06,"Thanks for all the fast feedback and pointing out corner cases! I'll see what I can do about CTRL-T and multiple selections (had no idea what  the behavior was supposed to be), and the CTRL-R issue is just a quick `sed` fix.

Cheers!
",neersighted,2014-07-06 12:23:53
67,2014-06-24 16:43:09,"I just found one more issue. But this one is actually my fault. Apologies. It was already present before your pull request.

<S_CODE_TOKEN>

:dizzy_face: 

ALT-C handles it correctly, but CTRL-T fails to escape those characters. On bash and zsh `printf ""%q "" ""$item""` handled all these cases, but I couldn't find the equivalent one on fish.
",junegunn,2014-07-06 12:23:53
67,2014-06-24 16:55:38,"Quick thought: `bash -c` (very dirty hack) will let you use the shell quoting functionality.
",neersighted,2014-07-06 12:23:53
67,2014-06-24 23:55:06,"Got the last batch of issues, including the `asdf "" asdf` one fixed. A little less portable since I shell out to bash, but it gets the job done. I'm looking for a better solution.
",neersighted,2014-07-06 12:23:53
67,2014-06-25 00:30:44,":+1:
I'll let you know after some tests. Thanks.
",junegunn,2014-07-06 12:23:53
67,2014-06-25 03:23:19,"- OSX (iTerm2)
  - CTRL-T w/o tmux: :ok_hand: 
  - CTRL-T with tmux: the split window is not closed
- Ubuntu 14 (default terminal emulator & xterm)
  - CTRL-T w/o tmux: Hangs
  - CTRL-T with tmux: the split window is not closed

![ctrl-t](https://cloud.githubusercontent.com/assets/700826/3381190/d52d9d98-fc17-11e3-8ed7-b4b3ad6df0bc.gif)

One more thing I noticed is that your implementation of CTRL-T prepends space to each item (`<space>item1<space>item2<cursor>`), while zsh and bash version appends (`item1<space>item2<space><cursor>`). Could you make it consistent with the other implementations?
",junegunn,2014-07-06 12:23:53
67,2014-06-25 04:46:29,"The splits hanging was me forgetting to remove a debugging statement (a `cat` to keep the split open so I could read any output). As for the hanging, it must be related to #60. I'm looking into it more.
",neersighted,2014-07-06 12:23:53
67,2014-06-25 05:04:04,"I can rebase this all, if you'd like, by the way.
",neersighted,2014-07-06 12:23:53
67,2014-06-25 05:31:01,"Yes, that'd be nice :smiley: 
",junegunn,2014-07-06 12:23:53
67,2014-06-25 05:43:29,"Rebased.
",neersighted,2014-07-06 12:23:53
67,2014-06-26 04:06:59,"Thank you!

### CTRL-T
- OSX (iTerm2)
  - CTRL-T w/o tmux: :ok_hand: 
  - CTRL-T with tmux: :ok_hand: 
- Ubuntu 14 (default terminal emulator & xterm)
  - CTRL-T w/o tmux: _Hangs_
  - CTRL-T with tmux: :ok_hand: 

Is the hanging reproducible on your environment?

### Issues resolved
- [x] Appending spaces
- [x] Escaping in CTRL-R
- [x] `asdf "" asdf` in CTRL-T
- [x] `asdf ( asdf` in CTRL-T
- [x] `asdf [ asdf` in CTRL-T
- [x] `asdf < asdf` in CTRL-T
- [x] `asdf [ asdf` in CTRL-T

### Issues open
- [ ] `asdf ' asdf` in CTRL-T
  - This is not append to the command-line

### New issue

And here's another corner case:

<S_CODE_TOKEN>
",junegunn,2014-07-06 12:23:53
67,2014-06-26 04:55:21,"I'm running Arch, and I can't reproduce the hanging. I tried in a Ubuntu VM and can't get it to show up there. Can you spin up a fresh box with Vagrant and see if it still hangs?
",neersighted,2014-07-06 12:23:53
67,2014-06-26 04:58:22,"Okay, could you give me a Vagrantfile?
",junegunn,2014-07-06 12:23:53
67,2014-06-26 05:01:10,"By the way, did you test it on Ubuntu server via ssh connection or on Ubuntu desktop?
",junegunn,2014-07-06 12:23:53
67,2014-06-26 05:05:29,"Ubuntu server...

I just use this box (https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box) with fish installed to test. All you need to do is `vagrant init` and then `vagrant up` it.
",neersighted,2014-07-06 12:23:53
67,2014-06-26 05:14:17,"Okay, I'll give it a go.
",junegunn,2014-07-06 12:23:53
67,2014-06-26 07:12:19,"No luck. One thing I noticed is that CTRL-R works fine, while CTRL-T and ALT-C hang. The difference seemed to be that for CTRL-T and ALT-C, fzf is invoked within a function (`__fzf_select`), so what I tried is to split __fzf_select into two before and after fzf invocation and pull fzf out from the function as follows

<S_CODE_TOKEN>

Then it started to work. Strangely it takes a few seconds before fzf is visible on screen when CTRL-T is pressed from `/` directory with many entries (yet another oddity of :fish: I guess), but beside that, it works.
",junegunn,2014-07-06 12:23:53
67,2014-06-26 16:51:33,"It seems fzf really dislikes being invoked in a function. I'll do something along the lines of what you did here.
",neersighted,2014-07-06 12:23:53
67,2014-07-06 12:23:53,"I appreciate your effort, but as your patch is being delayed and turned out to have its own issues, I ended up changing the current implementation myself, which solved most of the known issues.

I still don't like the use of temporary files though (blame :fish:), but it looks simpler than your implementation.
",junegunn,2014-07-06 12:23:53
67,2014-07-06 15:08:55,"That's fine, I got busy with life. Glad to help.
",neersighted,2014-07-06 12:23:53
66,2014-06-23 15:14:50,"fzf does not currently define vi-command mode mappings. This is particularly annoying for <C-r>, which opens bash's old-fashioned recursive history search.

This patch adds vi-command mode mappings that simply drop back into vi-insert mode (""i"") and then trigger the primary mapping.
",patspam,2014-06-23 15:18:09
66,2014-06-23 15:18:41,"Merged, thank you!
",junegunn,2014-06-23 15:18:09
65,2014-06-22 20:29:02,"Howdy,

This is a really neat project. I thought it might be helpful to add some information about how to get it running with MacVim and iTerm2, for users as inept as myself. The following script is, so far, a passible stand-in for ""xterm -e"". You just need to add it to your Vim's PATH as an executable titled, for example, ""In_a_new_term_function"" and let g:fzf_launcher = ""In_a_new_term_function %s""

<S_CODE_TOKEN>
",gleachkr,2014-06-23 14:34:07
65,2014-06-23 01:33:59,"This is really cool thanks! Works like a charm.
Could you create a new wiki page for this? I'd love to add it to the README.
",junegunn,2014-06-23 14:34:07
65,2014-06-23 06:18:40,"Sure, I'd be happy to.
",gleachkr,2014-06-23 14:34:07
65,2014-06-23 07:37:54,"Thank you! I'll update the README page.
",junegunn,2014-06-23 14:34:07
65,2014-06-23 14:34:07,"Hey, I've added the link to the wiki page. Thanks a lot!
Would it be possible to customize the size of the iTerm2 window?
(I really don't know applescript)
",junegunn,2014-06-23 14:34:07
65,2014-06-23 19:55:56,"Yep,  to control the size you just need to insert the lines

<S_CODE_TOKEN>

for some numbers C,R after `set myterm to (make new terminal)`. You can also control the position of the window by setting its bounds, but this creates some flicker---the window pops into existence in one place and is abruptly repositioned.
",gleachkr,2014-06-23 14:34:07
65,2014-06-25 01:09:30,"Thanks, it works flawlessly! And thanks for updating the wiki page :smiley: 
",junegunn,2014-06-23 14:34:07
65,2015-07-06 00:50:52,"@junegunn I have the (apple) script named `fzf_launch` on Vim's PATH and I can see it by typing `:set runtimepath?`.  Apple script works fine when I invoke it manually but I'm unable to make it work with `let g:fzf_launcher`
Getting `Error running fzf_launch '/Users/cabhishek/.fzf/bin/fzf --expect ctrl-v,ctrl-x,ctrl-m,ctrl-t'` when I type `:FZF` in Vim. I'm missing something ?
",cabhishek,2014-06-23 14:34:07
65,2015-07-06 02:46:41,"@cabhishek The script should be in your shell's `$PATH`, not Vim's `runtimepath`. Or you can just specify the full path to the script in `launcher` option.
",junegunn,2014-06-23 14:34:07
65,2015-07-06 15:59:30,"@junegunn Thanks worked. 
",cabhishek,2014-06-23 14:34:07
65,2017-01-22 16:11:07,"Error detected while processing function <SNR>122_cmd[10]..fzf#run[63]..<SNR>122_execute:
line   12:
E767: Too many arguments to printf() ",quaritexa,2014-06-23 14:34:07
64,2014-06-20 22:09:29,"It looks like I'm hit with this bug: https://bugzilla.redhat.com/show_bug.cgi?id=526366

This only happens inside tmux for some reason. After running fzf a few times, it would hang the next time I start it up. strace shows that it's gpm related. I have to manually restart gpm to make it work. This effectively prevents me from using it at work, which is a shame because I love this tool so much. :(

Anyway, let me know if you happen to possess some wizardry to make this work. If not, thanks for the great plugin and I'll still continue to use it on my Macbook.
",terryma,2014-09-13 00:10:03
64,2014-06-21 01:26:35,"Thanks for the report. That's unfortunate. I haven't run into this issue yet. Can I ask you a few questions? I'd like to reproduce it here.
- Does it still happen when tmux splits are disabled (`FZF_TMUX=0 source ~/.fzf.bash`)?
- Which distro are you using?
- ruby / tmux version
",junegunn,2014-09-13 00:10:03
64,2014-06-23 17:01:12,"- Yes it still happens when splits are disabled
- RHEL 5.4 Tikanga (I know, I blame work)
- ruby 2.1.0p0 installed via rbenv / tmux-1.9a

Thanks for looking into this. I'm afraid this is an issue with gdm and
there isn't much fzf can do, but I remain hopeful.

On Fri, Jun 20, 2014 at 6:26 PM, Junegunn Choi notifications@github.com
wrote:

> Thanks for the report. That's unfortunate. I haven't run into this issue
> yet. Can I ask you a few questions? I'd like to reproduce it here.
> - Does it still happen when tmux splits are disabled (FZF_TMUX=0
>   source ~/.fzf.bash)?
> - Which distro are you using?
> - ruby / tmux version
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/issues/64#issuecomment-46740950.
",terryma,2014-09-13 00:10:03
64,2014-06-24 05:44:25,"> RHEL 5.4 Tikanga

:dizzy_face: 

So it's GPM-related. Could you try disabling mouse input with `--no-mouse` option? If it solves the problem, you might want to put it in your `$FZF_DEFAULT_OPTS`.
",junegunn,2014-09-13 00:10:03
64,2014-08-31 16:43:20,"@terryma Any progress on this? I'd like to know if `--no-mouse` solves the issue.
",junegunn,2014-09-13 00:10:03
64,2014-09-13 00:10:03,"Wow that worked! I'm glad I checked back on the thread. Thanks!!
",terryma,2014-09-13 00:10:03
63,2014-06-20 16:47:17,,sencer,2014-07-15 03:13:51
63,2014-06-21 01:14:43,"Hi, I like the idea since we don't yet have fuzzy completion for zsh (in bash, we can `vim ~/**<TAB>`), but the second commit doesn't work on OSX. `find` command on OSX requires a path:

<S_CODE_TOKEN>

The easiest way to fix it without code duplication it is to change `[[ ! -d $dir ]] && dir=""""` to `[[ ! -d $dir ]] && dir="".""`, but I prefer the output of `find *`.

Also, I see a couple of other issues:
- Doesn't work if the command line is empty
- When CTRL-T was invoked with a directory name and fzf is terminated (CTRL-C), the name disappears from the command-line
",junegunn,2014-07-15 03:13:51
63,2014-06-21 04:12:32,"They should be fixed now --there is a room for improvement in the last commit certainly, however.
",sencer,2014-07-15 03:13:51
63,2014-06-21 06:16:52,"Thanks for the fix, but I still have some issues.
1. `ls ~/github<CTRL-T>` then `<CTRL-C>` leaves `ls  \~/github/` on the command line
2. Similarly, when command line is empty, `<CTRL-T><CTRL-C>` gives `''`. This also happens when tmux split is used.
3. The current implementation doesn't support tmux split, right? I'm a little bit worried that this inconsistency might confuse users. What do you think?
4. `ALT-C` is still broken
",junegunn,2014-07-15 03:13:51
63,2014-06-21 08:04:47,">  I'm a little bit worried that this inconsistency might confuse users.

This also applies to the users of bash and fish as well. How about we present your _enhanced_ key binding in a separate wiki page so that a user can copy the code, and keep the behavior of the default one simple and consistent? What do you think?
",junegunn,2014-07-15 03:13:51
63,2014-06-22 19:20:19,"You could do that. Actually, speaking about ""unix philosophy"", I feel like fzf should just be an executable sitting in somewhere in the path, and all those additional shell settings etc should go into a wiki.
",sencer,2014-07-15 03:13:51
63,2014-06-23 02:18:01,"> I feel like fzf should just be an executable sitting in somewhere in the path, and all those additional shell settings etc should go into a wiki.

I agree with this sentiment. Yet it's already possible for one to just download fzf script and put it in a bin path. The main reason I decided to create an install script is this: Most Ruby users have multiple versions of Ruby installed on their system using rvm or rbenv, and frequently switch between them. And you don't want to accidentally start fzf with JRuby or Rubinius. So that's why I came up with the idea of defining a shell function of the same name with the hardcoded-path to seemingly the most appropriate Ruby binary. The other stuff, key bindings and fuzzy completion, followed after that and you can still opt-out during the installation process, and I don't plan to extend these extra stuff anymore.

As for your enhanced key binding, let's put it in a new wiki page. Free free to create the page when you're done with your implementation.

The other commit (https://github.com/sencer/fzf/commit/e9748fe5ddced792963dd540482646ae44282255) still can be merged. Could you clean up the commits and leave this one only so I can merge?
",junegunn,2014-07-15 03:13:51
63,2014-07-15 03:13:51,"I merged your first commit. Thanks.
",junegunn,2014-07-15 03:13:51
62,2014-06-20 06:12:48,"It would be awesome if fzf would be able to fuzzy find directories as well by providing an additional option on the command line.  I'd use it to quickly navigate to a subdirectory.
",jceb,2014-06-20 06:16:29
62,2014-06-20 06:16:29,"Just found out how to specify a different find command.  Thanks!
",jceb,2014-06-20 06:16:29
62,2014-06-20 08:11:31,"Yup, the installer even sets up `ALT-C` key binding for that.
",junegunn,2014-06-20 06:16:29
62,2016-11-16 13:01:25,"Firstly, thanks so much for this bit of code.

Is there a different option for mac? 

When I press `ALT-C` I get `ç`
",timothyylim,2014-06-20 06:16:29
62,2016-11-16 15:44:31,"@timothyylim If you use iterm2, take a look at https://www.iterm2.com/faq.html

> Q: How do I make the option/alt key act like Meta or send escape codes?
> 
> A: Go to Preferences->Profiles tab. Select your profile on the left, and then open the Keyboard tab. At the bottom is a set of buttons that lets you select the behavior of the Option key. For most users, Esc+ will be the best choice.
",junegunn,2014-06-20 06:16:29
62,2016-11-17 12:51:24,"You are a boss. 
",timothyylim,2014-06-20 06:16:29
61,2014-06-19 18:42:31,"The only thing really stopping me from replacing ctrlp entirely with fzf is support for `<C-V>` to vsplit, `<C-S>` to hsplit, `<C-T>` to open in a new tab, etc.
",glittershark,2014-07-14 12:58:54
61,2014-06-20 04:19:28,"Unfortunately it is not possible. The Vim plugin simply executes fzf and takes the result. It cannot modify the behavior of fzf itself.

Although this is not exactly what you want, you can define key bindings for opening files in new splits or tabs.

<S_CODE_TOKEN>
",junegunn,2014-07-14 12:58:54
60,2014-06-19 01:01:01,"<S_CODE_TOKEN>

http://www.reddit.com/r/vim/comments/28eh6k/fzf_vim_tmux/ciavblg
",junegunn,2014-07-13 17:26:22
60,2014-06-19 07:32:47,"Hmm, even a very simple `ls | fzf` doesn't work reliably on fish on Ubuntu 14.

<S_CODE_TOKEN>
",junegunn,2014-07-13 17:26:22
60,2014-06-23 04:07:12,"I am also having this issue...
",neersighted,2014-07-13 17:26:22
60,2014-06-23 04:12:23,"Yup, It seems to be caused by a bug or limitation of fish on Linux, unlike `ls | fzf`, `ls | ruby ~/.fzf/fzf` works fine. I'm looking for a workaround.
",junegunn,2014-07-13 17:26:22
60,2014-06-23 04:28:07,"I'm working on making fzf_key_bindings.fish suck less for my dotfiles, (no offense, it's just not good fish :stuck_out_tongue_closed_eyes:) and you're welcome to my changes when I finish.

Also, seems to be working for me when I set TMPDIR. I fix this in my changes, among other issues.

The changed code will be in [neersighted/dotfiles](/neersighted/dotfiles).
",neersighted,2014-07-13 17:26:22
60,2014-06-23 04:37:36,"Sounds great, actually I was secretly hoping for some help :)
It would be even better if TMPDIR is not required all. Please let me know of the progress, thanks!
",junegunn,2014-07-13 17:26:22
60,2014-06-23 04:56:26,"Does fzf not block in pipes? I seem to be having some trouble with a cd from stdin function, debugging shows that the function is being called before fzf writes to stdout.
",neersighted,2014-07-13 17:26:22
60,2014-06-23 05:09:22,"I think it's related to this issue: see http://stackoverflow.com/questions/22729298/fish-command-substitution-issue-with-interactive-command
",junegunn,2014-07-13 17:26:22
60,2014-06-23 07:07:36,"Done! See the refactored code at https://github.com/neersighted/dotfiles/blob/master/config/fish/functions/fzf_key_bindings.fish
",neersighted,2014-07-13 17:26:22
60,2014-06-23 07:35:51,"Awesome! I'll test it tonight. You interested in sending a pull request?

And, have you found a way to circumvent the aforementioned problem (https://github.com/junegunn/fzf/issues/60#issuecomment-46531505)? It happens on Ubuntu, but not on OSX.
",junegunn,2014-07-13 17:26:22
60,2014-06-24 04:52:52,"I can pull it out into a pull request or you can just copy the file from my repo. It seems to fix this issue for me.
",neersighted,2014-07-13 17:26:22
60,2014-06-24 06:21:54,"Either way is fine for me. Just felt like I should ask you first :)
",junegunn,2014-07-13 17:26:22
60,2014-06-25 04:53:24,"Ah, my `ls` is long by default. If I define fzf as a function and pipe `dir`, or `command ls` into it, it hangs. However, I think this is a fzf issue with one line of input, as the output of `ls`/`dir` is only one line long and space delimited. I do not have the same issue with find.
",neersighted,2014-07-13 17:26:22
59,2014-06-19 00:14:49,"Thanks for building fzf! Everything's working fine, but I'm wondering what might be a good way to toggle fzf open and closed using just <Ctrl-R>. Is there a hook for fzf to see if it's currently open where I could then just hit <Ctrl-R> again to close it instead of reaching up for <Esc>?
",brandonpittman,2014-06-24 05:24:35
59,2014-06-19 01:05:39,"Sorry but I don't understand your question, could you be more specific?

> ... a good way to toggle fzf open and closed using just . 

It seems like the sentence is truncated. 
",junegunn,2014-06-24 05:24:35
59,2014-06-19 02:45:24,"Sorry, Markdown killed my message. Should have read like this:

Thanks for building fzf! Everything's working fine, but I'm wondering what might be a good way to toggle fzf open and closed using just `<Ctrl-R>`. Is there a hook for fzf to see if it's currently open where I could then just hit `<Ctrl-R>` again to close it instead of reaching up for `<Esc>`?
",brandonpittman,2014-06-24 05:24:35
59,2014-06-19 02:47:16,"I also mapped `<C-f>` to run `:FZF<CR>` in Vim. I'd love to be able to toggle it there as well. Any way to do that?
",brandonpittman,2014-06-24 05:24:35
59,2014-06-19 03:01:18,"Okay, I see. But currently it's not possible to setup a custom key binding inside fzf. (And `<C-F>` is already taken for `forward-char`)

`<Esc>` is too far away I agree. You can use `<CTRL-C>`, `<CTRL-G>`, or `<CTRL-Q>` instead, does this help?
",junegunn,2014-06-24 05:24:35
59,2014-06-19 03:39:56,"I'll try those instead. Thanks!

> On 2014/06/19, at 12:01, Junegunn Choi notifications@github.com wrote:
> 
> Okay, I see. But currently it's not possible to setup a custom key binding inside fzf. (And <C-F> is already taken for forward-char)
> 
> <Esc> is too far away I agree. You can use <CTRL-C>, <CTRL-G>, or <CTRL-Q> instead, does this help?
> 
> \
> Reply to this email directly or view it on GitHub.
",brandonpittman,2014-06-24 05:24:35
59,2014-06-24 04:54:02,"I recommend remapping `<Caps_Lock>` to `<Esc>` myself.
",neersighted,2014-06-24 05:24:35
59,2014-06-24 05:24:35,"@neersighted I mapped ""jk"" to <Esc>.
",brandonpittman,2014-06-24 05:24:35
58,2014-06-18 07:09:02,"I use rbenv and installed 2.1.0 without curses gem.
When I installed fzf, it detected system ruby and installed well but it's not work because shebang of fzf file(`#!/usr/bin/env ruby`) point to rbenv's ruby, so it couldn't load curses gem.
",Ephemera,2014-06-18 08:16:00
58,2014-06-18 07:39:58,"Hi, did you use the install script? In order to avoid headaches with rvm or rbenv, it defines `fzf` function in `~/.fzf.bash` or `~/.fzf.zsh` with hard-coded path to the Ruby it found as follows.

<S_CODE_TOKEN>

What is the output of `type fzf`?
",junegunn,2014-06-18 08:16:00
58,2014-06-18 08:04:49,"I didn't catch above code. Actually I use `.profile` and didn't use `.bashrc`. It's problem.
After add to `.profile`, it works well.

Anyway, thanks for a great tool!
",Ephemera,2014-06-18 08:16:00
58,2014-06-18 08:16:00,"Yeah, all those [.bashrc, .bash_profile, .profile, ...](http://stackoverflow.com/questions/415403/whats-the-difference-between-bashrc-bash-profile-and-environment), they always confuse me :/
Maybe I should've put the code in .bash_profile instead of .bashrc, but I guess it's too late to change the decision. Anyway feel free to let me know if you have any suggestion, thanks!
",junegunn,2014-06-18 08:16:00
57,2014-06-18 03:34:12,"in a shell function, and one might have an conflicting alias for find.
",sencer,2014-06-18 15:37:36
57,2014-06-18 04:12:11,"Hi, thanks for the fix. There are a few requests I'd like to make.
1. Your commit comments out `--user-install` paramater to gem command. Please remove it from the commit. (It was intentionally added to avoid requiring root privilege)
2. The main Ruby scripts also [embeds find command](https://github.com/junegunn/fzf/blob/master/fzf#L556). Could you update your commit and change it as well?
3. Please make the commit message short. The detailed description can come after a blank line. e.g.

<S_CODE_TOKEN>
",junegunn,2014-06-18 15:37:36
57,2014-06-18 04:21:45,"I did. Although I am not sure if one needs to prefix `find` with `command` in the ruby code. Does the `IO.popen(""find * -path '*/\\.*' -prune -o -type f -print -o -type l -print 2> /dev/null"")` line executes the find command in a shell instance?

`--user-install` was an accident. But perhaps it can try installing to root dir, and fall back to `--user-install` for people like me.
",sencer,2014-06-18 15:37:36
57,2014-06-18 04:28:33,"Thank you. But you should change the commit message. It was from a previous commit and I put it just as an example for you. I'm sorry if my message was not clear.

> Does the IO.popen(""find \* -path '_/\._' -prune -o -type f -print -o -type l -print 2> /dev/null"") line executes the find command in a shell instance?

You're right, I was misguided. Could you revert the change? Sorry for the trouble!
",junegunn,2014-06-18 15:37:36
57,2014-06-18 15:36:26,"Done. I apparently even didn't read the commit message :) Sorry.
",sencer,2014-06-18 15:37:36
57,2014-06-18 15:37:45,"Merged. Thank you very much!
",junegunn,2014-06-18 15:37:36
56,2014-06-17 23:31:43,"Adding a check to make sure the script exists before sourcing it, useful if you have the same shell rc file in different places where fzf may or may not be installed.
",mattbailey,2014-06-18 01:49:47
56,2014-06-18 01:49:47,"Thanks, I like the idea, but unfortunately, this change will affect the common workflow of updating fzf so I can't merge it.

Whenever fzf is updated, I do `git pull` and re-run the install script, so that I have the newer versions of `~/.fzf.bash` and `~/.fzf.zsh`. RC files are left untouched, since they already include ""source"" lines. But if I apply this patch, I will end up with two lines:

<S_CODE_TOKEN>

because the latter is not found in the current rc file.

You can still manually apply the change to your `.fzf.bash/zsh` files. Then the install script will not touch it again as it sees the lines containing `source ~/.fzf.bash/zsh`.
",junegunn,2014-06-18 01:49:47
56,2014-06-19 02:50:55,"Ah, I see. Well, if I have time, I might try another patch that would cover updating. Thanks!
",mattbailey,2014-06-18 01:49:47
55,2014-06-13 06:22:10,"Searches like `^git checkout` aren't possible because fzf is matching on the first characters of the return of `fc -l 1` which are the commands id (e.g. `21453 git checkout why-is-this-branch-name-so-long`). Using `fc -ln 1` drops the number prefix and eliminates the need for `sed` here. Adding `-e` allows for extend matching (regex).
",ericboehs,2014-06-13 15:37:51
55,2014-06-13 07:52:45,"Thanks for the suggestion.

Using `-n` option to `fc` was suggested a couple of times, but I rejected to accept it as I find the numeric index useful especially when the command history is filled with very similar entries. For example, if we have 

<S_CODE_TOKEN>

then I can just type in the number looking at the list and it is easier in this case.

But I also understand your concern, being able to use anchors only on the command part would surely be useful. So we have two different, conflicting needs that currently can't be easily reconciled and I'm not sure which one to choose.

One idea that comes to mind is to add support for word-boundary anchor (`\b` in PCRE), so we can write `\bgit` (though not as precise as `^git`). Hmm but no, I'd refrain from doing so in order to keep things simple.

Although I'm not going to merge this pull request now for the described reason (by the way it's missing the equivalent changes for bash and fish), you can still edit the generated `.fzf.zsh` file to your taste or override `fzf-history-widget` in your .zshrc.
",junegunn,2014-06-13 15:37:51
55,2014-06-13 08:10:54,"And I don't think we have to add `-e` option, as the user can choose to use it (or `-x` instead of it) by adding it to `$FZF_DEFAULT_OPTS` variable.
",junegunn,2014-06-13 15:37:51
55,2014-06-13 14:24:58,"I'm currently experimenting with the solution that extends `--nth` (or `-n`) option.

`--nth` option is used to limit the search scope, for example if we do `fc -l 1 | fzf --nth=1`, the query will only match the index part. I'm trying to extend the option to take ranges.

Given the following lines

<S_CODE_TOKEN>

`fzf -e --nth=..,1,2..` will first match against the whole string (`..`), then only the index part (`1`), and finally the substring without the index (`2..`). So we can select the second one with `^git 4$`.
",junegunn,2014-06-13 15:37:51
55,2014-06-13 15:37:51,"I've implemented the above scheme and applied nth option to the install script. If you have `-e` (no fuzzy matching) or `-x` (fuzzy matching) in your $FZF_DEFAULT_OPTS, you'll be able to match `^git`. Thank you for your suggestion. I'm closing this pull request.
",junegunn,2014-06-13 15:37:51
55,2014-06-13 19:44:19,"Great turn around! Thanks for this. :)
",ericboehs,2014-06-13 15:37:51
55,2014-06-13 19:51:10,"Just tried it out. :+1: works exactly how I'd expect.
",ericboehs,2014-06-13 15:37:51
55,2014-06-13 23:49:58,"Great to hear that, thanks!
",junegunn,2014-06-13 15:37:51
54,2014-06-12 10:41:51,"I decided to write a small function to select tmux sessions by fuzzy name. I added the result to the Wiki: https://github.com/junegunn/fzf/wiki/examples#tmux

If you think it is useful enough to be included in the Readme, just let me know. I would create a pull request.

Also let me know if you disagree with the implementation of `fs`.

Feel free to just close this issue no further action is required.
",wellle,2014-06-12 14:12:33
54,2014-06-12 12:45:54,"Wow, this is really nice, thanks. No objection at all.

As we now have duplicate examples in README and the wiki page, I'm thinking of removing the sophisticated ones from the README page instead of adding more, leaving only a few basic examples, like `fe`, `fd`, `fh` and `fkill`. What do you think?

There's one thing I'd like to share with you. I was inspired by your tmux-complete plugin, and [wrote a key binding for bash](https://github.com/junegunn/dotfiles/blob/master/bashrc#L241-L258) which starts fzf with words/lines found in tmux panes, and puts the selected one onto the command line.

Initially I used [the modified version of the script from your plugin](https://github.com/junegunn/dotfiles/blob/master/bin/tmuxwords.sh), but ended up writing [a clone in Ruby](https://github.com/junegunn/dotfiles/blob/master/bin/tmuxwords.rb) to meet my needs. Thought you might find it interesting.
",junegunn,2014-06-12 14:12:33
54,2014-06-12 14:12:33,"> leaving only a few basic examples, like fe, fd, fh and fkill. What do you think?

Sounds like a great idea to keep the Readme clean. :+1:

> Thought you might find it interesting.

That is indeed very interesting. I actually got the idea for [tmux-complete.vim](https://github.com/wellle/tmux-complete.vim) from an [old blog post](http://blog.plenz.com/2012-01/zsh-complete-words-from-tmux-pane.html) describing how to complete tmux words in zsh. Now we've gone full circle and you brought the tmux word completion back to the shell while adding fuzzy matching.

I will definitely give it a try!
",wellle,2014-06-12 14:12:33
53,2014-06-12 09:28:15,"Hello, 

I'm trying to use fzf in the GUI 2-panel file manager (double commander), it would be extermely useful.

First question: how to open xterm (or probably other terminal emulator?) with fzf opened?

I tried:  `xterm -e /usr/bin/ruby /path/to/fzf` , but xterm window is opened and immediately closed, I can't read anything even if it writes something. Just in case, I tried `xterm -e aptitude` , it worked (xterm window is opened with aptitude), but with fzf it doesn't work.

Just by chance, I tried redirect output to the file: `xterm -e /usr/bin/ruby /path/to/fzf > /tmp/my_tmp_log`, the file /tmp/my_tmp_log is not created at all (I definitely have permissions to do that, so it's not up to permissions)

Second question: how to make it actually return a value? If I execute `xterm -e /usr/bin/ruby /path/to/fzf` from the already-opened terminal, new xterm window is successfully opened with fzf in it, I can select file, but after that, nothing is returned. So, how to return value?

Thanks!
",dimonomid,2014-06-13 09:28:23
53,2014-06-12 12:27:11,"> First question: how to open xterm (or probably other terminal emulator?) with fzf opened?

I'm mostly on OSX and have almost no experience with Linux desktop. So I'm not sure if I can answer the question. I have a linux VM though, I'll take a look when I have time.

> `xterm -e /usr/bin/ruby /path/to/fzf > /tmp/my_tmp_log`, the file /tmp/my_tmp_log is not created at all

It's strange that the file is not created, does `xterm -e ruby -e sleep` work?

And I think you have to quote the entire command after `-e`

<S_CODE_TOKEN>

`xterm -e 'fzf > /tmp/found'` works for me.

> Second question: how to make it actually return a value?

I've never used `xterm` command in this way, but I don't think it returns a value. fzf simply prints the selected item inside the window and when the window is closed, it is lost. So you have to direct the output to a temporary file to use it.

<S_CODE_TOKEN>
",junegunn,2014-06-13 09:28:23
53,2014-06-13 09:28:23,"Thank you very much, it started working when I put my entire command into quotes. Thanks for all the hints and for fzf! =)
",dimonomid,2014-06-13 09:28:23
53,2014-06-13 14:18:18,"No problem. Using xterm to start fzf from GUI seems like a sweet idea that I'd never imagined. I'd love to see your workflow using that some time.
",junegunn,2014-06-13 09:28:23
52,2014-06-10 22:58:19,"https://raw.githubusercontent.com/junegunn/i/master/fzf-commandt-ctrlp-unite.gif

I read the page and found unite.vim cache performance was too bad.
But I have improved file_rec/async performance in unite.vim.

I want to re-test for the files.
",Shougo,2014-06-15 03:34:43
52,2014-06-11 01:28:37,"Hi, Shougo.

I didn't particularly prepare the files for the test. It was run in a directory where I put all the random git repositories so I don't have the exact snapshot of it at the time of the writing. But if I recall correctly, the directory contained more than 150 git repositories, with over 150K files in total. Actually I don't think the content of the directory matters, if you have that many number of files, the result should be similar.

To be more specific, the test was run on my Macbook Pro which has 4-cores and an SSD drive. And the four plugins were run simultaneously using synchronized tmux split-panes, so one can say it was not a perfectly fair test for Command-T which can use multiple cores.

I'm glad to hear that you improved the performance of Unite and I'm willing to help you with your progress. If you want me to run the test again, let me know. :smiley: 
",junegunn,2014-06-15 03:34:43
52,2014-06-11 19:24:33,"Thank you!

> I'm glad to hear that you improved the performance of Unite and I'm willing to help you with your progress. If you want me to run the test again, let me know.

Can you test it again?  Latest unite.vim and vimproc are needed.

I measured your previous test.

fzf: 4.9[s]
Command-T: 7.0[s]
ctrlp: 35.5[s]
unite.vim: Over 240[s]
",Shougo,2014-06-15 03:34:43
52,2014-06-12 12:04:53,"![showdown](https://cloud.githubusercontent.com/assets/700826/3257174/f187ce88-f225-11e3-8ba1-6f0a2d93797a.gif)

I can clearly see that the scan performance of Unite.vim has been significantly improved. In this case, Unite.vim was lucky that the match popped up in an earlier batch. But the entire scan still took longer than ctrlp.

One thing I noticed though is that Unite.vim found smaller number of files around 100k, as opposed to 120k from fzf or ctrlp. FYI, the default command fzf uses is given as follows:

<S_CODE_TOKEN>
",junegunn,2014-06-15 03:34:43
52,2014-06-15 03:34:43,"I hope that answered your question. FYI, I updated the blog post and added the link to this issue.
",junegunn,2014-06-15 03:34:43
52,2014-06-15 09:46:35,"> I updated the blog post

Where can I find that blog post?
",wellle,2014-06-15 03:34:43
52,2014-06-15 09:54:36,"This one: http://junegunn.kr/2014/04/fzf+vim+tmux/
",junegunn,2014-06-15 03:34:43
52,2014-06-15 10:06:59,"Good read! You might want to link that in the Readme :+1:
",wellle,2014-06-15 03:34:43
52,2014-06-15 10:32:58,"Thanks. It already is there :)
",junegunn,2014-06-15 03:34:43
52,2014-06-15 10:37:45,"Oh, now I see it, nevermind then :)
",wellle,2014-06-15 03:34:43
52,2014-06-15 15:12:12,"Thank you so much!

> I can clearly see that the scan performance of Unite.vim has been significantly improved. In this case, Unite.vim was lucky that the match popped up in an earlier batch. But the entire scan still took longer than ctrlp.

Oh, unite.vim is slower than ctrlp...
But I think your unite.vim configuration is not full power.
1. Can you enable if_lua in your Vim?  unite.vim is optimized for if_lua environment.
2. Can you install ag command?  Ag is faster than find.
3. Can you use `:Unite file_rec/async -sync`?  It blocks Vim, but it is faster.
4. If it is git repository, ""file_rec/git"" is faster than ""file_rec/async""

> One thing I noticed though is that Unite.vim found smaller number of files around 100k, as opposed to 120k from fzf or ctrlp. FYI, the default command fzf uses is given as follows:

unite.vim ignores the files matched by `g:unite_source_rec_ignore_pattern` automatically.
",Shougo,2014-06-15 03:34:43
52,2014-06-17 03:36:14,"> Can you install ag command? Ag is faster than find.

Actually as far as I know, this is not true. For just blindly traversing the directories find is much faster. ag is slower (and useful) because it does more work than find, like filtering patterns in .gitignore, etc. And more importantly, other plugins as well can be configured to use ag.

> If it is git repository, ""file_rec/git"" is faster than ""file_rec/async""

I assume that it uses `git ls-files`, right? Yes, it is faster that plain find, but other plugins can also benefit from the command. And the test directory was not a single git repository, but a collection of over 100 git repos.

> unite.vim ignores the files matched by g:unite_source_rec_ignore_pattern automatically.

It was undefined and not used in the test.

---

So I'm rerunning the test with lua enabled, but contrary to my expectation, it doesn't seem to make a lot of difference. Maybe there's something wrong with my configuration? This is all I have.

<S_CODE_TOKEN>

And by the way, do you have your own benchmark result?
",junegunn,2014-06-15 03:34:43
52,2014-06-17 10:03:14,"> Actually as far as I know, this is not true. For just blindly traversing the directories find is much faster. ag is slower (and useful) because it does more work than find, like filtering patterns in .gitignore, etc. And more importantly, other plugins as well can be configured to use ag.

OK, but I tested it.  Ag is faster than find.  Why?

> It was undefined and not used in the test.

It is set automatically by unite.vim.  To disable it, you must set it to """".  But it does not ignore "".git"" directories.

<S_CODE_TOKEN>

> So I'm rerunning the test with lua enabled, but contrary to my expectation, it doesn't seem to make a lot of difference. Maybe there's something wrong with my configuration? This is all I have.

Is it `:Unite file_rec/async -sync`?

> And by the way, do you have your own benchmark result?

Unfortunatelly, no...
",Shougo,2014-06-15 03:34:43
52,2014-06-17 10:12:57,"> OK, but I tested it. Ag is faster than find. Why?

Hmm, this is what I got:

<S_CODE_TOKEN>

> It is set automatically by unite.vim. To disable it, you must set it to """".

Okay. I see. I'll set it on the next run.

> Is it :Unite file_rec/async -sync?

I've tried the option, but I haven't yet found time to precisely measure and compare the results. I'll let you know, hopefully in a couple of days.
",junegunn,2014-06-15 03:34:43
52,2014-06-17 10:34:56,"<S_CODE_TOKEN>

It is my result.  Thanks.  I will improve it.
",Shougo,2014-06-15 03:34:43
52,2014-06-17 11:00:08,"I improved ""file_rec/async"" source.  Can you test it?

> So I'm rerunning the test with lua enabled, but contrary to my expectation, it doesn't seem to make a lot of difference. Maybe there's something wrong with my configuration? This is all I have.

I think this configuraton is better for performance.

<S_CODE_TOKEN>

It is maximum performance.  I gave up.
",Shougo,2014-06-15 03:34:43
52,2014-06-17 12:31:29,"Okay, I'll rerun the test with the configuration tomorrow or the day after tomorrow and let you know. But  you don't need to wait for my result, the test is very simple you can easily do a similar one and the result probably won't contradict mine.
",junegunn,2014-06-15 03:34:43
52,2014-06-17 12:32:26,"Thank you!
",Shougo,2014-06-15 03:34:43
52,2014-06-18 03:23:20,"Command-T has some benchmarks to test the speed of the matcher (unlike what you're measuring here, which is scanning speed).

Would be interesting to test the other matchers against this:

https://github.com/wincent/Command-T/blob/master/bin/benchmarks/matcher.rb
",wincent,2014-06-15 03:34:43
52,2014-06-18 04:24:06,"@wincent 

Thanks! I'm interested in both scanning performance and matcher performance (although fzf itself doesn't scan but simply delegate), and ultimately the integrated user experience as a whole. Unfortunately these concerns are not clearly separated in this thread.

My conclusion so far is this: Regarding the matcher performance Command-T is the fastest, but since it blocks until the list ready, it is possible that asynchronous fzf finishes before Command-T as shown in the GIF. I know that Command-T caches the list, so it's pretty likely that it will outperform fzf in the subsequent tests, and as this observation is not stated in the article I understand that you might find it a bit unfair in the sense. :)
",junegunn,2014-06-15 03:34:43
52,2014-06-18 11:02:39,"@Shougo @junegunn  A better idea, can I use fzf with unite? Then, I can combine both of them, and get super power.
",markwu,2014-06-15 03:34:43
52,2014-06-18 12:15:56,"No.  Because, fzf has original interactive UI and requires Terminal emulator.
If fzf works like find, git ls-files, ag, unite may use faf.
",Shougo,2014-06-15 03:34:43
52,2014-06-19 02:20:13,"I see, too bad.
",markwu,2014-06-15 03:34:43
52,2014-06-19 03:18:58,"@Shougo Hey Shougo, I was trying to test again but I ran into this error, any idea?

<S_CODE_TOKEN>

FYI `vim --version` shows:

<S_CODE_TOKEN>
",junegunn,2014-06-15 03:34:43
52,2014-06-19 03:54:20,"I reverted Unite.vim as suggested in https://github.com/Shougo/unite.vim/pull/627#issuecomment-46519407.

So here is the new GIF (sorry the demo is a bit silly):

![showdown-20140619](https://cloud.githubusercontent.com/assets/700826/3323559/233cbcba-f765-11e3-8dd5-b42d9928858d.gif)

Configuration used:

<S_CODE_TOKEN>
",junegunn,2014-06-15 03:34:43
52,2014-06-19 05:08:18,"Great gif. I'm still puzzled at how FZF can scan the file-system so fast. I get that it's doing it async and starting to populate the results before its finished scanning, but still, eyeballing it, it looks like it takes about 2 seconds to scan about 130k files (compared to Command-T, which looks to take about 5 seconds, even though it's using the relatively quick `find`-based scanner).

I haven't looked at the source yet, but it's odd that Ruby appears to scanning faster than `find` (which is written in C).
",wincent,2014-06-15 03:34:43
52,2014-06-19 05:22:32,"@wincent No, fzf doesn't scan. It simply [delegates to find command](https://github.com/junegunn/fzf/blob/master/fzf#L556).

<S_CODE_TOKEN>
",junegunn,2014-06-15 03:34:43
52,2014-06-19 05:35:43,"I guess the difference is that Command-T is calling back into Vim for each path in order to exclude files matched by the `'wildignore'` pattern:

https://github.com/wincent/Command-T/blob/master/ruby/command-t/scanner/file_scanner/find_file_scanner.rb#L63

...which itself calls...

https://github.com/wincent/Command-T/blob/master/ruby/command-t/scanner/file_scanner.rb#L72-77

The Watchman scanner doesn't do this, so is much faster. But now I'm tempted to make a `FastFindFileScanner` that does the faster, but less correct, thing. (Benchmarks, eh...)
",wincent,2014-06-15 03:34:43
52,2014-06-19 05:56:39,"@wincent Ah yes, that should be the reason for the difference. fzf obviously does not do it. I guess it would be much faster if you could translate `wildignore` into arguments to `find` command instead of calling Vim function every time.
",junegunn,2014-06-15 03:34:43
52,2014-06-20 09:24:31,"@junegunn Thanks.  I fixed the error.

> So here is the new GIF (sorry the demo is a bit silly):

Thanks.  I will improve unite.vim performance.
",Shougo,2014-06-15 03:34:43
52,2015-10-01 10:39:31,"@Shougo Whats the latest update? Is unite.vim using fzf for best performance or staying with Ag? Thank you in advance.
",ldong,2014-06-15 03:34:43
52,2015-10-01 10:55:33,"@ldong I don't think you see the point. You're comparing apples and oranges.
",junegunn,2014-06-15 03:34:43
52,2015-10-01 11:11:05,"@junegunn Okay, I should really be comparing fzf with percol.
I was confused, and thought fzf was another alternative implementation of searching utility. Now, I see `fzf` is an interface for command line interactions, pick/open files, not a search engine like ag or find.

Was @Shougo just looking for optimizing `unite.vim`'s caching algorithm from `fzf` from this thread? 
",ldong,2014-06-15 03:34:43
51,2014-06-06 10:03:19,"Playing around with command lines which have non ascii characters. At some point Ctrl-r started throwing the following.

I would have sent you my history output, but there's too much sensitive data there...

Here's part of the command line which is related to the issue. However, I was playing with it for several hours before it started to cause issues, so I'm not sure that this is the origin of the issue.

`select Hráč Protihráč, sum(Zabití) Zabití, sum(Smrtí) Smrtí`

This is the exception:

<S_CODE_TOKEN>
",harelba,2014-07-14 13:05:38
51,2014-06-06 10:44:03,"Hi, thanks for the report. Looking the the call stack, it seems that you're not running the latest revision. Could you update and check if it still fails? I can't reproduce the problem with the following command:

<S_CODE_TOKEN>

And which version of Ruby are your running?
",junegunn,2014-07-14 13:05:38
51,2014-06-06 14:25:03,"Installed newest version, still happens. like i sai, the example above did not immediately break Ctrl-r, it's just the only non-ascii data i've actually wrote in the terminal.

<S_CODE_TOKEN>

ruby version:
`ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux]`
",harelba,2014-07-14 13:05:38
51,2014-06-06 16:26:11,"Thanks for the info. The exception was thrown inside `trim` method which is only called when the length of an item is wider than the screen width. And the failing regex match was made to determine the width of a character. I've just updated the code to ignore the error and simply assume that the width is 1. So it's not the ultimate fix to the underlying problem, but I think it's harmless.

Could you update and test again? Should work fine.
",junegunn,2014-07-14 13:05:38
51,2014-07-14 13:05:38,"I believe this has been fixed. Please reopen if you see this problem again. Thanks.
",junegunn,2014-07-14 13:05:38
50,2014-06-02 10:51:02,"How to reproduce:
1. Enable this options in ~/.zshrc: extended_history, inc_append_history, share_history
2. Restart shell
3. Open two tabs (shells)
4. Type 'echo 123' in first shell
5. Press Ctrl+R in second shell: 'echo 123' **is not** in history
6. Type 'history' in second shell: 'echo 123' **is** in history
7. Repeat 5th step: _magically_ 'echo 123' is in history this time

I expect fzf to show me full history every time I press Ctrl+R.
Guess the thing is that fzf doesn't reread ~/.zsh_history until 'history' is executed.

**UPD:** Maybe this is not fzf bug, because if I disable Ctrl+R hotkey in fzf zsh behaves the same way. But anyway, it would be great, if fzf could fix that.
",roboslone,2014-06-04 07:31:36
50,2014-06-02 15:35:23,"Thanks.
It's obviously zsh's problem. And it looks like we don't need `history` command.

1, 2, 3, 4, 5 as you described
6. _Just press enter_
7. CTRL+R, and you'll see the updated list

Seems like command history seen inside a widget is not immediately updated until you start a new prompt by pressing enter. Are you aware of any way to fix the behavior?
",junegunn,2014-06-04 07:31:36
50,2014-06-04 07:31:36,"Not yet. But I'll be sure to submit this to  zsh developers.
Thanks.
",roboslone,2014-06-04 07:31:36
50,2014-06-04 07:43:15,"@junegunn, almost forgot :) Is there any way to show more than just 30 last commands in Ctrl+R menu? Didn't find any way to change this behaviour.
",roboslone,2014-06-04 07:31:36
50,2014-06-04 09:13:48,"Hmm, fzf should show unlimited number of commands. (See https://github.com/junegunn/fzf/blob/master/install#L219)

Please update the repository and re-run the install script.
",junegunn,2014-06-04 07:31:36
50,2014-06-04 09:21:51,"Yeah, that's fc thing, I guess. Still can't view more than last 30 lines :(
BTW, fc has -n option, which could omit `| sed ""s/ *[0-9*]* *//""`. Line numbers may be useful, but with `inc_history_append` there're also asterisks after some line numbers which ends up in something like that - `* ls ./`.
",roboslone,2014-06-04 07:31:36
50,2014-06-04 13:51:03,"What is the output of `fc -l 1 | wc -l`? AFAIK, `fc -l 1` command should report all the commands in the history so if it returns 30, you should check your shell configuration.

Removing command index was [discussed before](https://github.com/junegunn/fzf/pull/19#issuecomment-36012599), but I find it useful and won't remove it. And the sed command already removes the asterisk as well (`[0-9*]*`).
",junegunn,2014-06-04 07:31:36
50,2014-06-04 17:32:39,"`fc -l 1` prints 28-29 lines. And my ~/.zsh_history contains 130 lines at the moment.
",roboslone,2014-06-04 07:31:36
50,2014-06-04 17:53:26,"Hmm. How about `'history' 1 | wc -l`?
",junegunn,2014-06-04 07:31:36
50,2014-06-04 17:55:16,"Same.
",roboslone,2014-06-04 07:31:36
50,2014-06-04 17:57:00,"Okay, then there's nothing fzf or .fzf.zsh can do. You should figure out why those commands are giving you only 30 commands.
",junegunn,2014-06-04 07:31:36
50,2014-06-04 17:59:14,"Do you have `$HISTSIZE` set?

See ""2.5.4: Setting up history "" section in http://zsh.sourceforge.net/Guide/zshguide02.html
",junegunn,2014-06-04 07:31:36
50,2014-06-05 13:02:06,"Yep, zsh support answered me with that:

> This has already been reported and a patch can be found in the article
> zsh-workers/32682 ( http://www.zsh.org/mla/workers/2014/msg00470.html )
> 
> It was an intentional change to fix a different problem (elapsed time
> accuracy) but we underestimated the importance for some users of having
> the immediate file update.

Haven't tried this yet, though.
",roboslone,2014-06-04 07:31:36
49,2014-05-29 23:31:07,"Command history contains plenty of duplicates usually, and these are just noise. Would be nice to have them removed from the list.
",elado,2014-07-04 06:36:52
49,2014-05-29 23:37:53,"On bash, I can prevent duplicates in the history by setting HISTCONTROL as follows:

<S_CODE_TOKEN>

For zsh the equivalent seems to be HIST_IGNORE_ALL_DUPS:
See http://zsh.sourceforge.net/Doc/Release/Options.html
",junegunn,2014-07-04 06:36:52
49,2014-07-03 13:13:46,"I have `ignoredups` in my `.bashrc`, why is `erasedups` necessary in addition?
",jean,2014-07-04 06:36:52
49,2014-07-03 13:50:17,"@jean This might answer your question: http://askubuntu.com/questions/15926/how-to-avoid-duplicate-entries-in-bash-history
",junegunn,2014-07-04 06:36:52
49,2014-07-03 14:45:46,"Even after that it won't be perfect, at least in old bash 3.x. People make elaborate PSCMD to deal with it, or just live with it :)
",justinmk,2014-07-04 06:36:52
49,2014-07-04 06:03:07,"Ah, now I get it. `ignoredups` prevents cluttering history with runs of the same command, but keeps invocations interleaved with other commands, so that the history reads sensibly. I often copy and edit history to document what I did, so this is helpful (and holes in history caused by deleting previous invocations would be harmful). 

I would argue that it does not make sense for `fzf` to go and gather identical commands sprinkled here and there in the history, because it doesn't show you command context (next/previous commands). It should either show only the most recent match, or at least collapse runs of identical matches.
",jean,2014-07-04 06:36:52
49,2014-07-04 06:36:52,"Yeah, I agree. The decision should be up to the individual user.

And for your information, the default CTRL-R key binding uses `+s` (or `--no-sort`) option to keep the order of commands intact and the recent version of fzf allows you to scroll through the result beyond the scope of the screen, so it's pretty nice to browse the history with it.

I'm closing this issue.
",junegunn,2014-07-04 06:36:52
48,2014-05-29 01:40:35,"![screen shot 2014-05-28 at 6 38 10 pm](https://cloud.githubusercontent.com/assets/51488/3113196/044efb0e-e6d2-11e3-823b-97e800036acb.png)

When I hit return, it shows

![screen shot 2014-05-28 at 6 39 16 pm](https://cloud.githubusercontent.com/assets/51488/3113198/1b5f8552-e6d2-11e3-9079-12fb60b15afc.png)

with the number, which shouldn't be there.
",elado,2014-05-29 02:23:45
48,2014-05-29 02:21:49,"Thanks for the report, it was recently broken. Could you update and check if it's resolved?
",junegunn,2014-05-29 02:23:45
48,2014-05-29 02:23:45,"Just did a git pull and reinstalled and it worked. Thanks! Awesome plugin.
",elado,2014-05-29 02:23:45
48,2014-05-29 02:40:12,"Alright, thanks!
",junegunn,2014-05-29 02:23:45
47,2014-05-28 15:17:55,"removed tailing substitution causing all trailing space to be removed when extendedglob is set.
",cskeeters,2014-05-28 15:20:08
47,2014-05-28 15:20:15,"Thank you! :+1: 
",junegunn,2014-05-28 15:20:08
46,2014-05-26 07:46:55,"- Add ability to run install without any prompts using `fzf_quiet_install` env var.
- Update sed regex to strip `*` from history lines when using `tmux` and `fc`
  e.g. when using tmux and fc in different windows can cause output such as:
  
  > 632\* vim ~/.tmux.conf
  > 633 tmux -2 a
  > 635\* git diff
  > 636\* git commit -a
",takac,2014-05-26 07:59:56
46,2014-05-26 07:55:36,"Hi, thanks for the pull request.

> Add ability to run install without any prompts using fzf_quiet_install env var.

I thought about this once, but as `yes | ./install` works well I don't think it's necessary.
Could you amend the commit to remove the part and force-push the updated version?
",junegunn,2014-05-26 07:59:56
46,2014-05-26 07:58:28,"Yeah I guess that's an easier approach. Fixed.
",takac,2014-05-26 07:59:56
46,2014-05-26 08:00:03,"Merged. Thanks!
",junegunn,2014-05-26 07:59:56
45,2014-05-21 14:32:22,"Add --ignore flag for ignoring matches

Its probably not the best impl, but its a start. I would write some tests but I have no idea how to run the tests as I have never used ruby before! If you can get me going I will happily write some tests.
",takac,2015-03-01 10:34:26
45,2014-05-21 14:59:19,"Hi, thanks for the pull request. But sorry, I'm not going to add the option since I don't think it's the responsibility of fzf. And we will quickly realize that a single regular expression is not sufficient in many cases. (See https://github.com/github/gitignore)

fzf was designed to compose with other tools and delegate and outsource as much as possible. The right, recommended way to achieve this is to use simple `grep -v` or tools that respect .gitignore such as [ag](https://github.com/ggreer/the_silver_searcher).
",junegunn,2015-03-01 10:34:26
45,2014-05-21 15:27:24,"I agree with you that in many cases that it is not sufficient, however there are huge number of cases where it is sufficient. fzf is a fuzzy finder which means it should be dealing with all the pattern matching  and I believe that having an ignore pattern is part of that. 

All other major fuzzy finders have this feature:
- [vim-FuzzyFinder](http://www.vim.org/scripts/script.php?script_id=1984) has many ignore options.
- [ctrlp](https://github.com/kien/ctrlp.vim) uses Vim's `wildignore` and supports its own ignore patterns.
- [Command-T](https://github.com/wincent/Command-T) also uses `wildignore` and its own patterns.

I can't find any popular fuzzy finders that don't support this option.

Other pattern matching programs such as `ack` and `ag` support the `--ignore` option and `grep` has `--exclude`. `ag` and `ack` only support single patterns and it is still extremely useful.

fzf is really missing a core feature without this option.
",takac,2015-03-01 10:34:26
45,2014-05-21 15:45:48,"The fuzzy finders you listed are Vim plugins for opening files while fzf is a command-line filter which follows Unix philosophy.

> Other pattern matching programs such as ack and ag support the --ignore option and grep has --exclude. ag and ack only support single patterns and it is still extremely useful.

Actually that's my point. We can combine fzf with those tools that are obviously better at doing those kind of filtering. Why should we reinvent the wheel?

<S_CODE_TOKEN>

These are much flexible and powerful than filtering with a single regular expression. If you think the commands are too lengthy, you can always define aliases, shell functions or $FZF_DEFAULT_COMMAND to meet your needs.
",junegunn,2015-03-01 10:34:26
45,2014-05-27 17:04:29,"Does anyone know of a program that filters paths based on ._ignore files?  I'd love to have a unix, do one thing well-style program that would filter incoming paths based on any ._ignore files so that a command like this could be used.

<S_CODE_TOKEN>
",cskeeters,2015-03-01 10:34:26
45,2014-05-28 00:33:20,"That's a great idea, but I'm not aware of any tool does that. Although it looks like a very elegant solution, I can easily imagine that it would be non-trivial to write such a tool without hugh performance penalty because of many subtle issues (nested gitignore files, submodules, symlinks, ...) 
",junegunn,2015-03-01 10:34:26
45,2014-06-02 11:04:30,"@cskeeters , `grep -v` ?
",roboslone,2015-03-01 10:34:26
45,2014-06-02 15:18:33,"@RoboSloNE Actually it's not that simple. Ignore patterns are not known at the beginning of the traversal. They have to be discovered on the fly.
",junegunn,2015-03-01 10:34:26
45,2014-08-06 15:18:09,"One option for filtering files would be to use Steve Losh's friendly-find (ffind) instead of find.  It ignores files in .hg .git and .svn plus ignores files that match patterns in .gitignore, .hgignore, and it's own .ffignore.

@junegunn do you have any experience using these two tools together?
",cskeeters,2015-03-01 10:34:26
45,2014-08-06 16:58:40,"@cskeeters Thanks. Yes, I discovered the tool a while ago, but unfortunately the performance was not satisfactory as it's written in Python. And its implementation of .gitignore filtering was inaccurate when I checked. (ag is also shipped with an incomplete implementation of the filtering, but it's much faster than ffind. However, ag is not really a tool for listing, and its output does not include directories.)

Actually it got me started on a fast alternative in a complied language, which delegates the filtering to libgit2 not to reinvent the wheel. But the project is on hold due to some bugs in libgit2 :/
",junegunn,2015-03-01 10:34:26
44,2014-05-20 12:18:38,,aboettger,2014-05-20 16:17:26
44,2014-05-20 12:54:16,"Thanks, I like the idea but it doesn't work on OSX and ends up destroying my .bashrc and .zshrc.

<S_CODE_TOKEN>
",junegunn,2014-05-20 16:17:26
44,2014-05-20 13:11:00,"I have tested it only on Linux.
",aboettger,2014-05-20 16:17:26
44,2014-05-20 13:12:34,"Okay, the problem seems to be that my .bashrc had more than one line that matched the pattern, and awk and the proceeding mv was not chained with `&&`. We should be careful when removing stuff, so I think it would be better to add user confirmation for each line to be deleted. And, as you can see, rmdir of OSX does not support `--ignore-fail-on-non-empty` option. If you like to address these issues, feel free to force-push the changes. It's also okay if you can't find time to do so.
",junegunn,2014-05-20 16:17:26
44,2014-05-20 14:08:35,"Supports OSX the parameter -m for grep?
",aboettger,2014-05-20 16:17:26
44,2014-05-20 14:13:15,"> Supports OSX the parameter -m for grep?

Yes this only shows four matches on OSX:

<S_CODE_TOKEN>
",wellle,2014-05-20 16:17:26
44,2014-05-20 14:41:45,"Can I use ""ls -A""?
",aboettger,2014-05-20 16:17:26
44,2014-05-20 14:57:58,"> Can I use ""ls -A""?

Yes.
",wellle,2014-05-20 16:17:26
44,2014-05-20 15:03:48,"@wellle Thanks man!

@aboettger Don't feel pressured to make it perfect, especially if you don't have access to OSX. Just force-push the updated version, then I'll do the rest :)
",junegunn,2014-05-20 16:17:26
44,2014-05-20 15:08:27,"I pushed my latest version.
",aboettger,2014-05-20 16:17:26
44,2014-05-20 16:20:30,"Merged. I updated the script to handle symlinked files. Thanks!
",junegunn,2014-05-20 16:17:26
43,2014-05-16 02:07:22,"Hello,

I really really love your tool except one thing it is written in ruby ;-), however, I'm fine with this. I'm working to integrate your engine to work with dmenu & i3 wm window switcher.

In i3 WM, I hit alt-d it show list of window for choose to focus which powered by dmenu (see https://github.com/ziberna/i3-py/blob/master/examples/winmenu.py) I want to do similar things with fzf.

One thing that I don't like dmenu is that it doesn't support fuzzy matching. I also don't prefer to install too many fuzzy engine on my machine.

Currently, I have slmenu, dmenu, ctrlp, and fzf. As I know you tool, I want to eliminate other tools to use one only.

PS: it work be really nice if your such tool can be written in C so the performance will be improved a lot. I don't aware if there such tools written in C

 Thanks
Tai
",jkoz,2015-02-28 18:14:45
43,2014-05-16 03:22:10,"Thanks. Glad to hear that you like fzf.

I don't have experience with dmenu or i3wm, so I'm not sure if I can really help. But fzf is just a Unix filter. If you can grab a list of things and have a command or script to process the selected one, there's nothing stopping you. Key binding examples can be found in the generated `~/.fzf.{bash,zsh,fish}`. Ping me if you need any help in doing that. Love to hear how it worked out for you.

fzf is already pretty fast for like 100k items, so rewriting it in C I believe is a premature optimization. And honestly I don't think I can ever afford time to do so :)

FYI: I already replaced ctrlp with fzf
",junegunn,2015-02-28 18:14:45
43,2014-05-16 04:13:43,"Thank for quick response, I manage integrate i3 shortcut with your tools. Instead of using dmenu, I launch urxvt -s zsh -c""~/.i3/winmenu.py"". In winmenu.py i call:

<S_CODE_TOKEN>

The only thing is to layout the urxvt on the top of window.

Thanks
",jkoz,2015-02-28 18:14:45
43,2015-10-29 02:00:38,"Hi @jkoz , given that `fzf` is a clear unix filter, would not it also be possible to get filter the list, rather than also introducing change to the interface? I liked the one-line interface `dmenu` provided, and am thinking maybe we could put `fzf` just after `dmenu` to further filter the results?
",hyiltiz,2015-02-28 18:14:45
43,2015-10-29 02:15:18,"Im not really get what you means. Is it better if you provide a clear example of your command. Agree that one line interface is pretty neat, but it does not support fuzzy logic which is what i want.

Just want to let you guy know that I currently use xdotool and sxhkdrc to layout terminal on the top of window, it seem a little bit hard code but it works

> > > grep dm ~/.config/sxhkd/sxhkdrc
> > >     st -c Fzf -e sh -c ""xdotool search 'Fzf' windowsize 100% 50% windowmove 0 20; dm fm""

dm is my fzf script which can found it my repos
",jkoz,2015-02-28 18:14:45
42,2014-05-08 13:47:48,"When I use `fzf` to find processes to `kill`, as I type there are residual processes not cleared by Curses. To remedy that I have added:

<S_CODE_TOKEN>

in function `update_list` at the start of the `render do` loop.

Great app btw, loving it :)
",chutsu,2014-05-08 14:14:22
42,2014-05-08 13:51:25,"Thanks. I guess it has to do with your $TERM. ([possibly related](https://github.com/junegunn/fzf/issues/18))

What is your $TERM? If you're on tmux, it has to be `screen` or `screen-256color` and not `xterm*`
",junegunn,2014-05-08 14:14:22
42,2014-05-08 14:14:22,"Yep that solved the problem, thanks :)
",chutsu,2014-05-08 14:14:22
41,2014-05-03 19:46:13,"If I type ""cat <Ctrl-T>"" and select a really long file name, and it wraps to the second line, then the \C-x\C-r is not sufficient to redraw the line, there is still some artifacts. It looks vaguely like:

$ ls the/really/long/
file.txt really/long

There ""really/long"" is repeated again after ""file.txt"", even though the cursor is in the right spot (at the end of the line, after ""file.txt "").

I noticed that deleting a character causes the terminal to redraw the end of the line, so I added a dummy ""\exa "" at the end of the existing vi-mode incantation to delete/re-add the trailing space:

bind '""\C-t"": ""\e$a \eddi$(__fsel)\C-x\C-e\e0Px$a \C-x\C-r\exa ""'

This fixes the wrapping artifact issue.

Note that I tried putting the \C-x\C-r before the ""a "", thinking that redrawing the line, then appending the space after that might work, but it did not. It seems doing the delete is what kicks in the ""clear the rest of the line"" behavior that's needed to clear the wrapping artifact.
",stephenh,2014-05-04 02:29:08
41,2014-05-04 02:29:29,"Thanks, I applied your patch to the installer.
",junegunn,2014-05-04 02:29:08
41,2014-05-05 04:04:50,"Thanks!
",stephenh,2014-05-04 02:29:08
40,2014-05-03 19:41:01,"It's hard-coded to use find, which surprised me because I'd set FZF_DEFAULT_COMMAND=ag -l -p """" and couldn't figure out why ""cat <Ctrl-T>"" was still including my .gitignore'd files. I assume this is not intentional?
",stephenh,2015-06-25 16:05:13
40,2014-05-04 02:04:00,"`ag -l -g """"` only returns the list of files, not including directories. That was the main reason why CTRL-T was coded to use find command. So this leaves me with a question. I agree that making the command configurable is preferable, but should we use the same FZF_DEFAULT_COMMAND for CTRL-T as well? Should we introduce another env variable? At first I assumed that a user would edit fzf.bash or zsh file after the installation (e.g. use different key binding, CTRL-XT instead of CTRL-T, etc.), but I guess very few actually do that. What do you think we should do about this?
",junegunn,2015-06-25 16:05:13
40,2014-05-04 03:27:39,"Simply put, the problem is the inconsistency between `fzf` command and `CTRL-T` key binding:
- fzf w/o FZF_DEFAULT_COMMAND: list of files
- CTRL-T: list of files and directories
",junegunn,2015-06-25 16:05:13
40,2014-05-05 04:04:28,"> At first I assumed that a user would edit fzf.bash or zsh file after the installation

Yes, this is what I ended up doing. :-)

That said, you're right, after filing this issue I realized that ag only lists files, and not directories. That doesn't seem ideal.

Here is an issue for adding that to ag:

https://github.com/ggreer/the_silver_searcher/issues/215

But the ag issue tracker is pretty full, so I don't get the impression it will be implemented anytime soon.

Perhaps the easiest thing for now would be to explicitly document that FZF_DEFAULT_COMMAND only applies to explicit fzf invocations, and not to Ctrl-T, due to this ag issue.

That is too bad though, as ag respecting .gitignore/etc. is awfully useful.
",stephenh,2015-06-25 16:05:13
40,2014-05-06 06:39:53,"I've checked other similar projects, ack and pt, but they all show the same behavior, which is quite understandable since their main responsibility is to search for pattern in file contents and not to display the list of files and directories. I actually found something relevant called [friendly-find](https://github.com/sjl/friendly-find/) but unfortunately it seems to be much slower than vanilla find. I'll let you know if I find a better alternative.

And I updated the doc to encourage customization of the generated scripts.
",junegunn,2015-06-25 16:05:13
40,2014-05-18 16:13:33,"You might want to check out [this small wrapper script I wrote](https://github.com/junegunn/agl/blob/master/agl) which extends the output of `ag -g """"` to print the directories as well. The overhead is negligible.
",junegunn,2015-06-25 16:05:13
40,2015-06-30 03:15:54,"It'd be awesome if you added documentation for this variable at https://github.com/junegunn/fzf/blob/master/README.md#respecting-gitignore-hgignore-and-svnignore

Didn't realize this was a feature until I found this issue.
",jez,2015-06-25 16:05:13
40,2015-06-30 04:15:56,"@jez Will do, thanks.
",junegunn,2015-06-25 16:05:13
39,2014-05-03 19:36:00,"In my .inputrc, I use ""set editing-mode vi"". Because this puts readline into vi-mode everywhere, I don't have a ""set -o vi"" in my .bashrc file, which AFAIK is for making ""only bash"" (and not other readline-using programs) use vi bindings.

Without ""set -o vi"", when .bashrc sourced .fzf.bash, the set -o | grep vi check returned empty, looking like vi mode was not setup, and so the non-vi key bindings where set.

However, after .bashrc was evaluated, my .inputrc settings took affect, and if I manually run ""set -o | grep vi"" in a terminal, then it does actually report as on.

Basically, AFAIK, .fzf.bash is running before .inputrc, so doesn't see the ""set editing-mode vi"" flag.

After struggling quite awhile with trying to figure out why Ctrl-T was doing bizarre things, I finally put ""set -o vi"" into my .bashrc, and now things work much better.

A hint in the docs might help future users avoid this confusion. I can add something to the readme if you like, unless it's terribly obvious that anyone using ""set editing-mode vi"" would of course also have ""set -o vi"" set. (Obviously it was not obvious to me.)
",stephenh,
39,2014-05-04 01:55:11,"Ah, you're perfectly right, thanks for raising the issue. I was a bit worried about this too, but I haven't found a solution yet. I particularly don't like the fact that even if you have `set -o vi` in your .bashrc, if it comes after `source ~/.fzf.bash`, the key bindings will not be correctly set. Mentioning this quirkiness in the documentation would be helpful of course, and we should probably do so, but it would be better if we could fix the problem. Do you know of a better way to handle this?
",junegunn,
39,2014-05-04 03:54:27,"I've just updated [the key bindings section](https://github.com/junegunn/fzf#key-bindings-for-command-line) of the README page. But I'm still interested in a real solution :)
",junegunn,
39,2014-05-05 03:53:15,"Hi Junegunn,

Thanks for updating the readme...good call about the ""set -o vi"" being before the source also being a gotcha.

I don't have any good ideas for a real solution.

Perhaps fzf could wait until it was invoked to detect vi mode? I vaguely recall seeing some arcane binding setup on Stackoverflow where invoking one binding would, via a bash function, conditionally setup/""bind"" the next binding, and then itself automatically invoke that next binding.

I think the con was that it ""burned"" a binding, in that you had to use two (or three?) bindings to accomplish it. Plus it was fairly complex anyway.
",stephenh,
39,2014-05-05 18:19:44,"Thanks for the reply. I googled a bit and I guess you're referring to this, right?
http://stackoverflow.com/questions/8366450/complex-keybinding-in-bash

I roughly tested the approach as follows:

<S_CODE_TOKEN>

So it re-binds `C-x + C-t` to the right version depending on the current setting. It functionally works but when the rebind function is executed via `C-x + C-f` as an intermediate step, I see a line feed. I don't know if it's possible to suppress this unwanted line feed, but if it's not, we can't employ this approach.

If you don't mind, I'll keep this issue open until we find a clean solution to the problem.
",junegunn,
39,2014-05-05 20:28:24,"Hi Junegunn,

Yes, that was the article...nice find! Sorry for not including the link, I was on my other machine.

That is odd about the new line; I don't have any good ideas. I'll try it out later when I have some time.

Until then I agree leaving the issue open sounds like a good idea.

Thanks for the great support on these issues; I only just came across fzf but I think I will quickly be very addicted to it. It's a great idea.
",stephenh,
38,2014-04-03 11:31:53,"In a [recent discussion about Zed](https://news.ycombinator.com/item?id=7515147) the [topic of fuzzy matching came up](https://news.ycombinator.com/item?id=7515979) and I liked the idea of using multiple patterns separated by space.

> In Komodo, space is treated as a logical AND, which you can use to more effectively search the above.

I imagine it like this: I have entered the search term `foobar` and it's currently matching hundreds of lines beginning with `foo` and ending with `bar`. To match the single line `foo/gunn/bar` I would just append to `foobar gunn` instead of having to remove `bar`.

Makes sense?
",wellle,2014-04-03 13:41:53
38,2014-04-03 13:40:34,"I believe we already have the option: check out [extended search mode](https://github.com/junegunn/fzf#extended-search-mode). I was [hesitant to implement the feature at first](https://github.com/junegunn/fzf/issues/1), but now it's on my $FZF_DEFAULT_OPTS.
",junegunn,2014-04-03 13:41:53
38,2014-04-03 13:41:53,"Oh you are right. Sorry for the noise :)
",wellle,2014-04-03 13:41:53
38,2014-04-03 13:45:30,"No problem :)
",junegunn,2014-04-03 13:41:53
37,2014-04-03 11:13:26,"As discussed previously in #19.
",wellle,2014-04-03 14:14:28
37,2014-04-03 13:33:02,"Thanks, but unfortunately it doesn't seem to work on bash.
",junegunn,2014-04-03 14:14:28
37,2014-04-03 13:40:09,"I found a more direct way for zsh:

<S_CODE_TOKEN>

Do you think we find a way that works for both or do we need some sort of switch?
",wellle,2014-04-03 14:14:28
37,2014-04-03 13:54:17,"Hmm `history 1` gives only one row on bash. I think it should work on both platform. (FYI, I use bash. :smirk:) But it doesn't really have to be perfect since it's just an example of how one can use fzf to build stuff and the installer already sets up CTRL-R. 
",junegunn,2014-04-03 14:14:28
37,2014-04-03 13:58:32,"How about this fallback?

<S_CODE_TOKEN>
",wellle,2014-04-03 14:14:28
37,2014-04-03 14:06:56,"Okay, looks good to me.
",junegunn,2014-04-03 14:14:28
37,2014-04-03 14:13:15,"Updated the pull request.
",wellle,2014-04-03 14:14:28
37,2014-04-03 14:14:34,"Thank you!
",junegunn,2014-04-03 14:14:28
36,2014-04-01 17:17:25,"Issue 27 (https://github.com/junegunn/fzf/issues/27) requested a --select-single
 option to fzf to automatically select a match if there is only one.

While a workaround was provided, I think this is a common enough use case with a complex enough workaround to merit addition of the actual option.

I am using the fq1() workaround heavily, both in the shell but also in vimscript.  Having to duplicate this in two places makes me wish I could just simplify both cases to a single --select-single argument.

Besides improving usability, not having to invoke fzf twice (as the workaround does) would preclude having to move large result sets around in memory and across processes, and save a second invocation of the fzf process.  That could have a noticeable performance/memory improvement in some cases.

It may make sense to combine this with a --select-zero option to exit if no matches are found.
",stephentalley,2014-04-05 03:57:19
36,2014-04-02 00:34:28,"I've given some thought about it over time, and have come to agree with the need for the option. You have nicely summarized the reasoning behind this.  I'll keep you updated on the progress.
",junegunn,2014-04-05 03:57:19
36,2014-04-02 12:49:03,"Okay, now we have `--select-1` and `--exit-0` option (or `-1` and `-0` respectively).
I've also updated [`fe` example](https://github.com/junegunn/fzf#useful-examples) on the README page.
Could you update fzf and check if it works for you? Let me know if you see any problem.

(/cc @wellle)
",junegunn,2014-04-05 03:57:19
36,2014-04-02 12:51:03,":+1: Looks great. I will upgrade soon.
",wellle,2014-04-05 03:57:19
36,2014-04-02 15:26:39,"Wow, thanks for the quick response, Junegunn!

A few suggestions:
- -1 should probably work regardless of whether --query is passed.  That
  will allow the user to automatically select the only choice if
  $FZF_DEFAULT_COMMAND produces only one item.
- -0 should probably also work regardless of whether --query is passed.
  This will allow the user to avoid having to quit out of a useless fzf
  session if no results were produced by $FZF_DEFAULT_COMMAND.
- Consider returning 0 when exiting with the -0 option (it currently
  exits with 1) to distinguish it from the case where there were several
  matches, but the user pressed CTRL-C/ESC to exit the finder (which also
  exits with 1).

Thanks again, this is a great utility!

Steve

On Wed, Apr 2, 2014 at 8:51 AM, Christian Wellenbrock <
notifications@github.com> wrote:

> [image: :+1:] Looks great. I will upgrade soon.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/junegunn/fzf/issues/36#issuecomment-39325787
> .
",stephentalley,2014-04-05 03:57:19
36,2014-04-02 16:08:34,"Ah, those are great suggestions. I've changed their behavior as suggested. Thanks!
",junegunn,2014-04-05 03:57:19
36,2014-04-02 16:53:50,"Fantastic!  Thanks again for putting together such a useful utility!

On Wed, Apr 2, 2014 at 12:08 PM, Junegunn Choi notifications@github.comwrote:

> Ah, those are great suggestions. I've changed their behavior as suggested.
> Thanks!
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/junegunn/fzf/issues/36#issuecomment-39349413
> .
",stephentalley,2014-04-05 03:57:19
36,2014-04-05 07:40:55,"Works great!
",wellle,2014-04-05 03:57:19
35,2014-04-01 08:58:16,,junegunn,2014-04-01 08:58:19
34,2014-03-31 23:21:28,"When I press control-T in tmux, the pane does not split and fzf does not run successfully. Pressing control-T for the first time has the equivalent result of pressing return at a blank zsh prompt (i.e. nothing happens, except a clean prompt); afterwards, pressing control-T has no visible effect.

If I set FZF_TMUX = 0 (to disable to pane split), then fzf works as intended.

I am using tmux 1.9a (tmux -V) and zsh 5.0.5 with oh-my-zsh.
",legendre6891,2014-04-01 12:42:06
34,2014-04-01 01:23:24,"Thanks for the report, but I couldn't reproduce the problem. (I just installed oh-my-zsh, without any customization)

![fzf-tmux-zsh](https://cloud.githubusercontent.com/assets/700826/2574785/74fb4336-b93b-11e3-90ff-7ecc1c3fdef9.gif)

Could you check if it works on bash?
",junegunn,2014-04-01 12:42:06
34,2014-04-01 06:03:17,"Thanks for the reply. Unfortunately, it does not work on bash either (same effect). 

I tried again on zsh, this time holding control-T down. I see that a split is indeed created, with the content ""zsh:4: command not found: fzf"". It flashes for a second then the split closes.

I am on linux, if this helps.
",legendre6891,2014-04-01 12:42:06
34,2014-04-01 08:29:56,"Confirmed, reproducible on Linux. I'll come up with a fix today. Thanks.
",junegunn,2014-04-01 12:42:06
34,2014-04-01 09:00:30,"Please update and rerun install script, and let me know if it still doesn't work.
",junegunn,2014-04-01 12:42:06
34,2014-04-01 10:32:02,"It should be fixed now, but I think there's more room for improvement, so I'm gonna leave this open until I feel confident about the implementation.
",junegunn,2014-04-01 12:42:06
34,2014-04-01 12:45:31,"Finally looks good to me. Let me know if you have any problem.
",junegunn,2014-04-01 12:42:06
34,2014-04-01 15:42:31,"You're definitely fast! :+1: 
",dm,2014-04-01 12:42:06
34,2014-04-01 16:05:02,"@dm Thanks! But I should've done some more testing before releasing the code. :relieved: Sorry for the confusion!
",junegunn,2014-04-01 12:42:06
34,2014-04-01 16:53:05,"Works great! Thanks a lot :+1:.
",legendre6891,2014-04-01 12:42:06
34,2015-07-27 17:08:18,"I'm seeing this issue with tmux 2.0, on OS X Yosemite, zsh 5.0.8, and the most recent update to fzf. When I `export FZF_TMUX=0` things work. And fzf works normally outside of tmux.  
",mclearc,2014-04-01 12:42:06
34,2015-07-27 17:20:37,"@mclearc This issue is very old and probably not related to the problem you're having. Please file a new one if you think it's a bug of fzf.
",junegunn,2014-04-01 12:42:06
34,2015-07-27 17:22:52,"@mclearc FYI, I can't reproduce the problem with Yosemite + zsh 5.0.8 + tmux 2.0.
",junegunn,2014-04-01 12:42:06
34,2015-07-27 17:45:05,"Thanks.  Since the screen flashes open and closed so quickly I can't tell what else might be the problem. Will open a new bug report if I get any new info.
",mclearc,2014-04-01 12:42:06
34,2015-07-27 17:48:47,"Hmm, it looks like `fzf-tmux` script is not working correctly on your env.
",junegunn,2014-04-01 12:42:06
34,2015-07-27 17:58:38,"Exactly. I can run fzf but not fzf-tmux. Any ideas as to what might be the cause? Thanks too for your impressively quick responses!
",mclearc,2014-04-01 12:42:06
34,2015-07-28 02:26:50,"Inject a little sleep to [the line 126 of fzf-tmux script](https://github.com/junegunn/fzf/blob/master/bin/fzf-tmux#L126) like follows, so you can see what was the problem.

<S_CODE_TOKEN>
",junegunn,2014-04-01 12:42:06
34,2015-07-28 03:15:17,"Thanks for that. This is what I get when I sleep the line:

<S_CODE_TOKEN>

Unfortunately, I don't know GO and don't know what to make of this. Any ideas?
",mclearc,2014-04-01 12:42:06
34,2015-07-28 03:29:34,"Hmm, this is new to me. Something went wrong during ncurses initialization. Can you create a separate issue for this? And please share your tmux.conf.
",junegunn,2014-04-01 12:42:06
34,2015-07-28 03:30:23,"You got it. See https://github.com/junegunn/fzf/issues/305
",mclearc,2014-04-01 12:42:06
33,2014-03-31 01:10:34,"Regardless of on whatever shell it may be, fzf is installable simply by placing fzf in a directory included in `$PATH`. However, the install script generates an optimal function wrapper for fzf and defines some useful key bindings. It would be nice if it supports fish as well.
",junegunn,2014-05-02 02:30:42
33,2014-03-31 09:02:30,"I tried to implement fzf support for fish some days ago, but unfortunately I'm running into a fish issue that does not yet have a solution. Details are below:

My message on the fish mailing list: http://sourceforge.net/p/fish/mailman/message/32161318/
The issue on github: https://github.com/fish-shell/fish-shell/issues/1362

Author of fish shell even haven't answered yet does it agree it's a fish bug, or not.
",dimonomid,2014-05-02 02:30:42
33,2014-03-31 09:31:04,"@dimonomid Thanks! In fact, I've never used fish shell, so I hoped for some help in this. So, as far as I understand, the problem is that fish shell currently does not allow reading from STDIN in command substitution, right? If that's the limitation of fish shell, we're out of luck.

But fortunately, I think there's still something we can do. I don't know if you have noticed but I've recently implemented tmux-integration for `CTRL-T` keybinding, which splits the window and starts fzf there, and sends output back to the original pane as you can see in the following gif.

![fzf-tmux](https://cloud.githubusercontent.com/assets/700826/2565494/5accd42e-b8b5-11e3-8edc-451a3dcfd628.gif)

This scheme might allow us to implement the feature without using command substitution. Basic idea is to save the result of fzf into a temporary file, then use the content of the file with `tmux send-keys` command.

It will be only available in a tmux session, but still it's better than nothing. If you're interested in contributing on this, I'd be grateful.
",junegunn,2014-05-02 02:30:42
33,2014-05-02 02:30:42,"Implemented in 7d15071 (doesn't require tmux).
",junegunn,2014-05-02 02:30:42
33,2016-01-28 22:08:03,"In case other Fish users read this, here is an alternative:

<S_CODE_TOKEN>

That's good when the result is one line. For multiple selections, `fzf -m`, the best solution so far is the one @junegunn posted using a temp file.
",da99,2014-05-02 02:30:42
32,2014-03-30 03:23:49,"### Summary

`--nth` and `--delimiter` option can be used to limit the search scope to the N-th token of each item.

<S_CODE_TOKEN>
### Tokenization

When `--delimiter` option is not given, tokenization follows the way awk does it by default.
- Fields are separated by runs of whitespace. Leading and trailing whitespace are ignored.

http://www.gnu.org/software/gawk/manual/html_node/Field-Splitting-Summary.html#Field-Splitting-Summary
### Negative indexing

`--nth` can take a negative integer. In this case search scope is limited to be the ""N-th to the last"" token.

<S_CODE_TOKEN>
",junegunn,2014-03-30 06:19:05
31,2014-03-29 08:57:49,"traversing e.g large git repositories with find is suboptimal, so it would be nice if fzf had to option to automatically use the fastest method available.
Something like this seems to work ~ an order of magnitude faster for me:

<S_CODE_TOKEN>
",badeip,2014-05-02 03:59:22
31,2014-03-29 09:44:07,"Thanks. It's a great point. Maybe I could update the install script to generate another function that works like your example, then naming it to something like `fzf+`. I'll think about it.

By the way you don't need to set FZF_DEFAULT_COMMAND in this case, you can just use pipe.

<S_CODE_TOKEN>
",junegunn,2014-05-02 03:59:22
31,2014-03-29 14:18:42,"Ah my bad, please ignore my comment on your example, now I see why you didn't use pipe in the example. :smile: 
",junegunn,2014-05-02 03:59:22
31,2014-05-02 03:59:22,"Updated Tips section of the README page with your method of using git ls-tree. I thought about making it an option, but decided not to do so because I think it's beyond the scope of fzf to determine the ""best"" or ""fastest"" method.
",junegunn,2014-05-02 03:59:22
31,2014-07-20 13:20:57,"I just wrote a dirty hack for making Vim find the correct project folder i.e .git :
Is there a neater way to do this ?

function! FZFExecute()
    let directory = system(""git rev-parse --show-toplevel"")
    if !v:shell_error
        :call fzf#run({'sink':'e','dir':directory})
    else
        :FZF
    endif
endfunction
",nishantvarma,2014-05-02 03:59:22
31,2014-07-20 15:37:31,"Looks good to me.

Regards,

Petter

On Sunday, July 20, 2014, nishantvarma notifications@github.com wrote:

> I just wrote a dirty hack for making Vim find the correct project folder
> i.e .git :
> Is there a neater way to do this ?
> 
> function! FZFExecute()
> let directory = system(""git rev-parse --show-toplevel"")
> if !v:shell_error
> :call fzf#run({'sink':'e','dir':directory})
> else
> :FZF
> endif
> endfunction
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/junegunn/fzf/issues/31#issuecomment-49546202.
",badeip,2014-05-02 03:59:22
31,2014-07-20 16:34:09,"@nishantvarma Looks good to me too. I don't think it's a dirty hack. Since you're searching inside a git repository, you can take advantage of `git ls-files` command as follows:

<S_CODE_TOKEN>
",junegunn,2014-05-02 03:59:22
31,2014-07-21 08:29:53,"Ok . Thanks :)
",nishantvarma,2014-05-02 03:59:22
30,2014-03-28 06:32:18,,junegunn,2014-03-28 06:32:23
29,2014-03-19 23:10:47,"Btw `fco` and `fbr` are great additions!
",wellle,2014-03-20 01:33:47
29,2014-03-20 01:33:53,"Ah right, thanks!
",junegunn,2014-03-20 01:33:47
29,2014-03-20 01:39:37,"I also added `--reverse` option to the example. Makes more sense to me.
",junegunn,2014-03-20 01:33:47
28,2014-03-19 12:16:15,"I accidentally added a `.DS_Store` file in #26. This pull request removes that file and ensures that it won't appear again. Apologies.
",wellle,2014-03-19 12:19:28
28,2014-03-19 12:19:41,"Whoa, I didn't see that either! :laughing: 
Thanks for quickly fixing it!
",junegunn,2014-03-19 12:19:28
28,2014-03-19 12:20:35,":wink: 
",wellle,2014-03-19 12:19:28
27,2014-03-19 11:41:24,"When providing a `--query=foo` parameter it could be useful to select the only match immediately when there is only one. When there are multiple matches the selection happens as usual.

Could look like this:

<S_CODE_TOKEN>

This is related to #26.
",wellle,2014-03-19 13:30:52
27,2014-03-19 12:29:41,"I see. It could be useful. One fact that we have to consider is that fzf doesn't block user input while it's receiving lines from stdin. So for example,

<S_CODE_TOKEN>

fzf will first match `hello`, then after 1 second, it will match `world` as well.
It's possible to defer selecting the only match until fzf completely consumed the source, but during the period the user can type in more characters, which I think can lead to some confusion.

Hmm, I might make fzf block only when the option is given. What do you think?
",junegunn,2014-03-19 13:30:52
27,2014-03-19 12:35:00,"That sounds very reasonable.

I'm not sure if this makes matters worse, but you could stop blocking when you find the second match. Because at that point it's clear that it won't be the only match. Also typing more characters in between could just reset that option.

But all of this is highly optional. In the use case I had in mind there aren't too many files, so blocking would be no issue there.
",wellle,2014-03-19 13:30:52
27,2014-03-19 13:11:35,"Those are indeed good ideas.

By the way, I have given some thought, and it seems like we can implement the feature with some shell scripting using `--filter` option.

<S_CODE_TOKEN>

This is not as compact or easy as the suggested option, however I usually try to take the minimalist approach and tend to not add features that can be accomplished otherwise. So do you still feel this option should be implemented? I'm open to your opinion.
",junegunn,2014-03-19 13:30:52
27,2014-03-19 13:30:52,"Oh that's amazing! This is what I am using now:

<S_CODE_TOKEN>

I am pleased with this and agree that there is no need to bake it into fzf. You might want to mention that function in the Readme as I believe it's very useful.

Thank you!
",wellle,2014-03-19 13:30:52
27,2014-03-19 13:44:38,"Okay, I'm glad you like it, thanks!
",junegunn,2014-03-19 13:30:52
27,2014-03-19 14:07:45,"A slight improvement to the function: Exit when there's no match

<S_CODE_TOKEN>
",junegunn,2014-03-19 13:30:52
27,2014-03-19 14:52:27,":+1:
",wellle,2014-03-19 13:30:52
26,2014-03-19 11:35:53,"I'm using this function myself to edit fuzzy found files, similar to the `vimf` function in the Readme:

<S_CODE_TOKEN>

I added the `--query=$1` parameter so I can use `ze foobar`. That way I can repeat that command with `^P` or `^R` and won't have to type the pattern again.

I thought this might be useful for others too, so I added it to your `vimf` function.

Usage:

<S_CODE_TOKEN>
",wellle,2014-03-19 12:09:52
26,2014-03-19 12:10:01,"That's nice. Thanks.
",junegunn,2014-03-19 12:09:52
25,2014-03-15 13:22:39,"Added the command cdf, which allows searching for a file, and then automatically performing a cd into the file's folder.

You're welcome to pull it if you see it as useful.
",harelba,2014-05-02 02:59:09
25,2014-03-15 15:27:14,"Hi, thanks for the pull request! It surely seems to be a useful function. However as you may have noticed, the install script currently does not add any function to shell configuration other than the default 3 key bindings (CTRL-T, CTRL-R and ALT-C). So at this point it's kind of strange to add just this one alone. I'll consider including it later when I decided to extend the install script to add functions as well. Thanks.
",junegunn,2014-05-02 02:59:09
25,2014-03-16 19:46:59,"Hi, thanks for that useful feature! Since it is not pulled to main repo yet, I've copied cdf function to my local setup, it works great. Just one note: in my opinion it's better to allow cdf command without argument, like that:

<S_CODE_TOKEN>
",dimonomid,2014-05-02 02:59:09
25,2014-03-17 13:07:32,"I totally agree. adding it to my own function...
",harelba,2014-05-02 02:59:09
25,2014-05-02 08:41:45,"Maybe rename to `fdf` and add it to the `Useful examples` sections in the Readme?
",wellle,2014-05-02 02:59:09
25,2014-05-02 09:14:40,"Maybe. But I think we have to determine whether to add more stuff into the examples section or to keep it simple and let the readers be creative and come up with their own routines based on the approaches conveyed in it. I don't deny that the suggested cdf function is useful, actually it's quite good, but I believe a reader with basic knowledge of shell scripting can easily write such a function by oneself, so maybe there's not much value in giving it as a yet another example. The example part isn't too long yet, so adding one more function wouldn't really hurt for now, but at some point we have to decide. Maybe we could create an external, third-party repository that is a collection of installable functions.
",junegunn,2014-05-02 02:59:09
25,2014-05-02 10:22:06,"I guess I'm thinking too much. I thought about extracting the examples section into script files like `fzf-functions.bash/zsh/fish` so that the user can simply source it, but everyone has different taste and needs (`cdf` over `fdf`, `svn` over `git` or whatever), so I'm not sure if it's really the right thing to do.
",junegunn,2014-05-02 02:59:09
25,2014-05-02 10:32:12,"I agree with your reasoning. Another idea could be to use a wiki page for that.

https://github.com/junegunn/fzf/wiki
",wellle,2014-05-02 02:59:09
25,2014-05-02 10:37:07,"for what is worth, :+1: on extracting the shell functions. I didn't have to think about it much, but it seems to me like the default bash/zsh/fish functions in `./install` are some kind of code smell.
In other words `fzf`'s job is what it does right now, not installing shell completion functions (for example I use my own bash completion).
That doesn't mean that those _contrib_ functions cannot live in this repo, just that the boundaries must be clear.
just my 2 cents.
",grota,2014-05-02 02:59:09
25,2014-05-02 14:06:53,"@wellle Yep, I should definitely consider moving a good part of the section to the wiki. Too bad there's no way to give people write access to it though.

@grota I generally agree with your sentiment. I must admit that the install script has become quite messy and convoluted. One excuse is that you can still choose not to install key bindings and completion functions during the installation. I liked that CTRL-T binding so much that I couldn't resist including it in the installation process, maybe I shouldn't have done that. But what can we do now? :relieved: Well then if we put aside the key bindings and fuzzy completion, you might wonder why it sets up `fzf` function, when you can simply put the `fzf` script in a bin directory. There's a good reason for doing that. Most Ruby users have multiple versions of Ruby installed using RVM or rbenv, and frequently switch between them. And you don't want to start fzf with JRuby or Rubinius. So the fzf function effectively locks the version of Ruby. And additionally, it passes `--disable-gems` option for Ruby 1.9 ~ 2.0, which helps reducing the startup time. Anyway, if you have any suggestion on the project layout or anything, feel free to create an issue and let me know. Thanks.
",junegunn,2014-05-02 02:59:09
25,2014-05-02 14:13:39,"@junegunn Everybody already has write access. I just changed the main page: https://github.com/junegunn/fzf/wiki

Edit: Removed the change again.
",wellle,2014-05-02 02:59:09
25,2014-05-02 14:18:14,"@wellle Whoa, I didn't know that!
",junegunn,2014-05-02 02:59:09
25,2014-05-02 14:35:40,"@wellle Wiki indeed seems like a much better place for sharing examples: https://github.com/junegunn/fzf/wiki/examples
",junegunn,2014-05-02 02:59:09
25,2014-05-02 14:41:16,"Looks great! Don't forget to link from the Readme to the Wiki page.
",wellle,2014-05-02 02:59:09
25,2014-05-02 14:51:46,"@wellle Updated. Thanks!

@harelba, @dimonomid: I added cdf function to [the examples page](https://github.com/junegunn/fzf/wiki/examples#changing-directory) with a few fixes.
- You shouldn't be able to choose multiple items so I changed `-m` to `+m`
- No reason to not sort the result, so I removed `+s`
- `-q """"` is equivalent to not passing the option at all, so checking `$1` is not required.
",junegunn,2014-05-02 02:59:09
24,2014-03-04 10:51:15,"The behaviour in Sublime-Text, CtrlP etc. fuzzy-finders defaults to treating space-seperated chunks as exact-search patterns. If I have a directory structure like so for example

<S_CODE_TOKEN>

I would like to be able to enter `pro asd make` in order to get to the 2 files. In extended mode however, I need to quote the chunks individually:

![search_with_apostrophes](https://f.cloud.github.com/assets/53246/2320187/5596caf4-a38a-11e3-8e99-458f098130d3.JPG)
(desired behaviour, but typing apostophes is annoying)

![search_without_apostrophes](https://f.cloud.github.com/assets/53246/2320196/69654772-a38a-11e3-92c8-b1490482f3e8.JPG)
(no apostrophes lead to undesired behaviour)

Would it be possible to make the default behaviour in extended mode look for exact matches? Baring that, maybe a different mode `-X`, which has that behaviour?
",muellerj,2014-03-04 12:36:31
24,2014-03-04 11:58:49,"Okay, seems like a nice idea. (Let's keep it simple and not introduce ""un-quoting"" operator :smiley:)
But it should definitely be another mode. We should not break backward compatibility.
I'll let you know when it's done.
",junegunn,2014-03-04 12:36:31
24,2014-03-04 12:36:31,"Now you can use the new `-e` (or `--extended-exact`) option.
Let me know if you run into any problem. Thanks.
",junegunn,2014-03-04 12:36:31
24,2014-03-04 12:54:24,"Works like a charm - Thanks :thumbsup: 
",muellerj,2014-03-04 12:36:31
23,2014-03-04 10:17:04,"First of all: I love it. Much faster than CtrlP etc. when run from my home directory. 

I'm wondering, how other people narrow down their search. I currently use stuff like 

<S_CODE_TOKEN>

and 

<S_CODE_TOKEN>

to exclude files and dirs, which i will never want to access (`.git` directories come to mind immedately). 

Would it be possible to add support for some kind of `.fzfignore` files, which could be used to exclude certain directories and/or files right away? I'm imagining having a global `~/.fzfignore` and then project-specific ones down the directory-tree much like git.
",muellerj,2014-03-04 12:33:20
23,2014-03-04 11:50:16,"Thanks for the suggestion. That wouldn't be impossible. But since fzf is a generic unix filter that [can be used with any list](https://github.com/junegunn/fzf#useful-examples) (command history, processes, git branches, etc.) a single global ignore-list may not make sense. I think following the unix philosophy and composing simple commands as you did is a superior approach than extending fzf itself.

Oh, and you should prefer `-prune` option instead of greps for performance benefits.

<S_CODE_TOKEN>
",junegunn,2014-03-04 12:33:20
23,2014-03-04 12:33:20,"Ok, thanks for the clarification. I will try and modify the commands, `fzf` is calling to generate the initial list. I'm closing this issue.
",muellerj,2014-03-04 12:33:20
22,2014-03-04 01:34:07,"Currently, CTRL-T and CTRL-R won't work when vi-mode is enabled.
### vi-mode

<S_CODE_TOKEN>
### CTRL-T

<S_CODE_TOKEN>
### CTRL-R

<S_CODE_TOKEN>
",junegunn,2014-03-04 09:54:43
21,2014-02-27 12:25:51,"It'd be a good idea to be able to use `TAB` to hit a command (instead of just `ENTER` as it is now). That's for example on the command line history search.
",chochkov,2014-02-27 17:12:36
21,2014-02-27 14:09:07,"Hmm, I'm not sure if I understood you correctly.
Do you mean that you want to hit TAB instead of ENTER to select the item on the cursor?
If that's the case, unfortunately TAB and shift-TAB are already assigned for choosing multiple items
when fzf is started with `-m` option.

See: https://github.com/junegunn/fzf#key-binding
",junegunn,2014-02-27 17:12:36
21,2014-02-27 17:06:41,"That's what i mean - it's a shame that the TAB is taken as well as `CTRL-j` which would be what I'd use on zsh before fzf. Going to ENTER for selecting is is to me a bit exhausting.
",chochkov,2014-02-27 17:12:36
21,2014-02-27 17:10:20,"Hmm, I've never felt that way. But anyway, you still have `CTRL-M`. Does that work for you?
",junegunn,2014-02-27 17:12:36
21,2014-02-27 17:12:36,"`CTRL-m` works, thank you 
",chochkov,2014-02-27 17:12:36
21,2014-02-27 17:16:25,"Okay, thanks!
",junegunn,2014-02-27 17:12:36
20,2014-02-26 09:57:52,"As discussed in #19.
",wellle,2014-02-26 10:03:01
20,2014-02-26 10:03:15,"Thanks for the quick fix! :+1: 
",junegunn,2014-02-26 10:03:01
19,2014-02-25 13:07:42,"When I execute `history` in Zsh I see only the 16 most recent commands. Fuzzy finding on them doesn't make much sense. Adding `-$HISTSIZE` shows all commands from the history that are saved.

Also adding `-n` removes the command index, so the `sed` command can be removed.
",wellle,2014-02-25 14:41:54
19,2014-02-25 14:32:47,"Hey, thanks for the patch! I didn't know that history command of zsh truncates the list by default.
But could you restore the numeric index part?
I find it quite useful when the list is filled with many similar items.
",junegunn,2014-02-25 14:41:54
19,2014-02-25 14:41:30,"Done.
",wellle,2014-02-25 14:41:54
19,2014-02-25 14:42:05,"Thank you.
",junegunn,2014-02-25 14:41:54
19,2014-02-25 14:42:13,":+1:
",wellle,2014-02-25 14:41:54
19,2014-02-26 02:47:51,"@wellle I've just realized that this change doesn't work on [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh),
where `history` is an alias to `fc -l 1`.
Although I'm not particularly fond of oh-my-zsh, it has such a large user base,
so I've made a slight adjustment to the command.
",junegunn,2014-02-25 14:41:54
19,2014-02-26 09:35:59,"Oh that's an important point! Looking at it again, instead of `'history' -$HISTSIZE` we could also use one of these:
1. `'history' 1`
2. `fc -l 1`

Both should work and seem simpler than what we have right now. Let me know if you want me to implement either of these.
",wellle,2014-02-25 14:41:54
19,2014-02-26 09:47:03,"Okay, looks good to me. I'm fine with either one. Feel free to open another PR. Thanks.
",junegunn,2014-02-25 14:41:54
19,2014-06-19 02:03:15,"FWIW, you could use 'command history' to skip any aliases.
",blueyed,2014-02-25 14:41:54
19,2014-06-19 02:15:52,"@blueyed Thanks. There was [a recent pull request](https://github.com/sencer/fzf/commit/3827a1b09e1ae79b6ca79c5ae131f7e966226033) which applied that method.
",junegunn,2014-02-25 14:41:54
18,2014-02-19 16:57:18,"I'm getting some weird graphical issues when using fzf in a tmux session. I don't have any problems when using it outside of tmux. I'm on OS X using zsh in iTerm2.

![fzf](https://f.cloud.github.com/assets/1226972/2209067/dab00b0a-9986-11e3-8bd7-c74dde512543.gif)
",athaeryn,2014-04-05 03:58:17
18,2014-02-20 00:18:57,"Thanks for the report. I'm aware of the issue. It only seems to happen when $TERM is set to 256-color, such as `xterm-256color`. The problem goes away if I strip out the trailing `-256color` when running fzf, but then fzf will use the default terminal colors (which is not necessarily a bad thing though). I'll try to look for a workaround. If I can't find one, I should probably update the install script to generate `~/.fzf.zsh` that overrides $TERM variable when running fzf inside tmux.
",junegunn,2014-04-05 03:58:17
18,2014-02-20 01:14:39,"Hmm, further investigation shows that the problem appears even when $TERM is set to `xterm`. But I see no problem when it's set to `screen` or `screen-256color`. (The latter, however, does not display 256-colors which seems to be the limitation of Ruby curses library)
",junegunn,2014-04-05 03:58:17
18,2014-02-20 01:20:03,"http://www.economyofeffort.com/2013/08/03/zsh-tmux-vim-and-256-color-madness/
FYI: the above article suggests that you should use `screen-256color` instead of `xterm-256color`.
",junegunn,2014-04-05 03:58:17
18,2014-02-20 04:40:54,"Could you update fzf, set $TERM to `screen-256color` and test it again?
",junegunn,2014-04-05 03:58:17
18,2014-03-04 09:05:43,"I had the same problem and updated $TERM to screen-256color in my tmux.conf. (`set -g default-terminal ""screen-256color""`). Confirmed that this fixed it.

However, I do remember that I specifically set $TERM to xterm-256color because I had some issue with using my mouse in vim running in tmux on iterm2. I'll follow up on this thread if I come across the issue I had again, but the change looks like it fixed it.

Thanks for the great tool! I rely on ctrlp so much in vim that I know I'll be using this heavily.
",drn,2014-04-05 03:58:17
18,2014-03-04 09:50:08,"@darrenli Hey, thanks for letting me know! I also run vim with tmux on iTerm2 where TERM is set to `screen-256color`, and haven't run into any problem with mouse.

@athaeryn Any progress?
",junegunn,2014-04-05 03:58:17
18,2014-03-05 19:48:51,"I have the same problem on [msys2](http://sourceforge.net/projects/msys2) which uses mintty--and I'm _not_ running tmux. 

<S_CODE_TOKEN>

I tried the following:

<S_CODE_TOKEN>

I also tried that in my `~/.profile` and restarting mintty. No effect. 

msys2 is still kind of new, so maybe it's not worth worrying about, but I'd be interested to know any other way of forcing 16 colors.
",justinmk,2014-04-05 03:58:17
18,2014-03-06 01:25:05,"@justinmk Okay, I'll see what I can do. In the meantime, what is the default value of TERM on it when you don't explicitly set it? I don't think you should set TERM to screen or screen-256color unless you're using tmux or screen.
",junegunn,2014-04-05 03:58:17
18,2014-03-06 01:31:57,"> what is the default value of TERM on it when you don't explicitly set it

By default:

<S_CODE_TOKEN>

> I don't think you should set TERM to screen or screen-256color unless you're using tmux or screen.

Yeah, I was just experimenting with the suggestions in this thread.
",justinmk,2014-04-05 03:58:17
18,2014-03-06 03:31:55,"@justinmk Currently fzf simply decides to use 256-color [when the value of $TERM includes ""256""](https://github.com/junegunn/fzf/blob/master/fzf#L521). Could you try again with $TERM set to `xterm`? (And yeah, I should probably add another option to force using 16-color regardless of $TERM)
",junegunn,2014-04-05 03:58:17
18,2014-03-08 01:09:13,"@justinmk Yesterday I had a chance to work on fzf on Windows 7. Fixed up some issues with escape key sequences there. But other than that, it seemed to work fine on putty and Cygwin terminal with both `xterm` and `xterm-256color`.
",junegunn,2014-04-05 03:58:17
18,2014-03-08 01:28:37,"Ok, then it's just something wrong with msys2's mintty, or something. `export TERM=xterm` does force 16 colors, but the ""blackout"" effect still occurs for partial higlights (except the highest-ranked match, ie the last line). Thanks!
",justinmk,2014-04-05 03:58:17
18,2014-03-08 01:36:35,"And the new `--no-256` option also correctly forces 16 colors. In case it helps, here's a screenshot of what I'm seeing:

<S_CODE_TOKEN>

![msys2_mintty_blackout](https://f.cloud.github.com/assets/1359421/2364121/7694f5d0-a661-11e3-8b59-dd7ec38894c7.png)

The last line highights nicely, but the others do not. Any chance it would be possible for `--no-256` to use the same mechanism (colors...?) to highlight the lower-ranked matches?

Probably msys2 is just broken in some way, but I'm not above limping along with the bare minimum if I can. The search works flawlessly, after all :)
",justinmk,2014-04-05 03:58:17
18,2014-03-08 19:16:04,"@justinmk Phew, the new `--black` option will fix the problem (no need for `--no-256`). See the commit message for the details.
",junegunn,2014-04-05 03:58:17
18,2014-03-12 15:46:56,"Works beautifully with `--black` option:

![2014-03-12 11-45-48](https://f.cloud.github.com/assets/1359421/2399305/71d19d2e-a9fd-11e3-8411-0b9cff6c910c.png)

Thanks!
",justinmk,2014-04-05 03:58:17
17,2014-01-29 17:52:23,,junegunn,2014-01-30 15:37:01
16,2014-01-22 10:36:36,"There're escape sequences for arrow keys:
up - ""\027[A""
down - ""\027[B""
left - ""\027[D""
right - ""\027[C""

Why don't use them to navigate in result list? I, personally, find it much better then ^K / ^J - one less key to press.
",roboslone,2014-05-26 06:30:21
16,2014-01-22 11:42:15,"Actually, arrow keys are already supported. It works as expected on my Macbook. Did you try it?
",junegunn,2014-05-26 06:30:21
16,2014-01-26 18:22:25,"I got MacBook Air with OS X 10.9.1. When I hit arrow key in interactive shell A/B/D/C is being printed instead of navigation functions.
",roboslone,2014-05-26 06:30:21
16,2014-01-27 01:34:08,"That's strange. Which terminal emulator do you use?
I've tested those keys on the followings and had no problem.
- Terminal.app on OSX
- iTerm2 on OSX
- urvxt on OSX
- putty on Windows 7
",junegunn,2014-05-26 06:30:21
16,2014-01-27 20:05:19,"I use iTerm2, this [build](https://github.com/stayradiated/iTerm2).
",roboslone,2014-05-26 06:30:21
16,2014-01-29 16:11:15,"I've tested with the version from the link, but it seems to work just fine. It's really hard to fix the problem when I can't reproduce it :confused: 

I'm working on experimental mouse-support on another branch, `mouse`, which by the way employs a different method to accept user input. So if you have time, check out the branch, and see if it helps.

---

EDIT: mouse branch has been merged to master and deleted
",junegunn,2014-05-26 06:30:21
16,2014-01-31 14:17:06,"I have experienced the same issue last night but haven't been able to reproduce it since it occurred. At the time I was in a tmux session and the command I ran was `gvim --remote `fzf``.

Some System info
- urvxt while in a tmux session
- Arch 3.12.9-1 (as of last night)
- on commit 3723829
",Taar,2014-05-26 06:30:21
16,2014-02-01 01:12:03,"@Taar Thanks for the report. So it's not easily reproducible. :confused: Could you please update fzf to the latest revision (which adds support for mouse input) and see if the problem is reproducible? As I've mentioned in the earlier comment, the new version uses a different method for taking user input, so I'm curious if it has any effect on this problem.
",junegunn,2014-05-26 06:30:21
16,2014-02-01 01:40:48,"@junegunn updated. I'll let you know if it happens again :)
",Taar,2014-05-26 06:30:21
16,2014-02-01 09:26:33,"Yeah! It's gone!
Latest update (commit #eca0a99fb4) fixed it somehow.
",roboslone,2014-05-26 06:30:21
16,2014-05-12 13:47:09,"Whoops, I got this bug again on latest commit (db5818248338f8d03ec991ff2fa89feb613e160c), it appears in history search (Ctrl+R), but not in usual `fzf` call. Shell is zsh, Mac OS X 10.9.2, iTerm2 (Build 1.0.0.20140507-nightly). Instead of navigation functions arrows give me symbols A, B, C and D.
",roboslone,2014-05-26 06:30:21
16,2014-05-12 14:59:06,"I don't think fzf should behave differently whether it's used in history search or not. Could you try different terminal emulator, like the default Terminal.app?

Actually I reverted the change (which introduced the use of `Curses.getch`) that initially fixed the problem for you, because I found out later that it had made the rendering really unstable. However, since then I made some effort to make such keys with escape sequences work correctly on most terminal emulators. I personally had no issue so far, possibly because I almost never use arrow keys (I find CTRL-B/F/J/K much easier to reach), but yeah I suppose it's not perfect. Unfortunately I'm not aware of a better way to handle that.

Anyway the change was made 2 months ago, when was the last time you updated fzf?
",junegunn,2014-05-26 06:30:21
16,2014-05-13 14:48:41,"I installed latest fzf on a new macbook a day ago.
Have the same behaviour in Terminal.app :(
",roboslone,2014-05-26 06:30:21
16,2014-05-14 01:15:48,"It's really strange, I use two macbooks regularly (air and pro). And I have no problem on iTerm2, Terminal.app and even on urxvt. Let's check a couple of things.
1. Do you use an external keyboard? (I don't, so.. )
2. Does it happen even when you're on tmux?
",junegunn,2014-05-26 06:30:21
16,2014-05-19 08:55:19,"1. No, built-in keyboard.
2. I don't use tmux :(
",roboslone,2014-05-26 06:30:21
16,2014-05-19 12:31:22,"I would to file another report related to the arrow keys:

First some info: I'm using the most recent github version of fzf on zsh-5.0.0.

Whenever I execute a zsh widget involving fzf for the first time in a new terminal window, the arrow keys do not work. Instead of going up an down, the letters A and B (respectively) are inserted.
- If I quit fzf (CTRL-C) and re-execute the widget, the arrow keys work as expected. This behaviour is shared among all widgets, i.e. after the first widget has been closed, the arrow keys work in all subsequently opened widgets. If two widgets are opened in parallel (meaning the first is not closed before the second was opened,) the problem persists in both instances of the widget.
- I can enter any commands prior to calling the widget and the widget will still suffer from the arrow key problem.
- I can manually execute the command which is used internally by the widget and the arrow keys will work. Closing this ""non-widget"" version of the command DOES NOT fix the problem. A subsequently opened widget-version of the command will still not be able to use the arrow keys properly.

I have observed this bug in `xfce4-terminal` and `uxterm`.
",elemakil,2014-05-26 06:30:21
16,2014-05-20 04:49:12,"@RoboSloNE I tested again on my coworker's new macbook, but it worked fine. So it's three macbooks. It would be really helpful if you could try on another macbook and let me know of the result. If the problem is not reproducible there, you can further investigate what's causing the issue, configuration differences, etc.

@elemakil Thanks. Yes, I can reproduce the problem on a Ubuntu desktop. I'm not an expert of zsh, but I'll see what I can do. Could be a bug of zsh. In the meantime, you can always use CTRL-J(N)/K(P)/B/F instead :)
",junegunn,2014-05-26 06:30:21
16,2014-05-20 17:53:05,"Wow, @elemakil is totally right! Didn't notice that.
",roboslone,2014-05-26 06:30:21
16,2014-05-21 01:25:55,"@elemakil I have just pushed a commit that seemingly fixes the problem. Strangely, the escape sequences of arrow keys in that case are prefixed by 27-79 instead of 27-91. Please update fzf and try again.

@RoboSloNE I don't know if it applies to your case, but could you check if it helps?
",junegunn,2014-05-26 06:30:21
16,2014-05-21 14:12:55,"@junegunn Splendid! It's now working as expected. Thanks for the swift response and fix!
",elemakil,2014-05-26 06:30:21
16,2014-05-26 06:30:21,"@junegunn, works fine, thank you!
",roboslone,2014-05-26 06:30:21
16,2014-05-26 07:10:38,"@elemakil @RoboSloNE Great. I still don't understand why we're getting different escape sequences. But I found an article and it shows that the problem is not new at least for OSX.

http://www.uponmyshoulder.com/blog/2010/os-x-10-6-3-broke-ncurses/
",junegunn,2014-05-26 06:30:21
15,2014-01-22 10:24:48,"It would be **extremely useful**, if fzf could return plain text after running a query. I think one could use this in third-party apps to provide fuzzy search inside them.
",roboslone,2014-02-05 13:41:10
15,2014-01-22 12:55:45,"So you mean, it just prints out all the matched items without starting interactive curses-based finder, right?
",junegunn,2014-02-05 13:41:10
15,2014-01-26 18:21:14,"Yeah, just that :)
",roboslone,2014-02-05 13:41:10
15,2014-01-27 01:59:24,"Okay, I'll think about it. Thanks.
",junegunn,2014-02-05 13:41:10
15,2014-01-27 20:05:53,"Thank you :)
",roboslone,2014-02-05 13:41:10
15,2014-02-01 17:02:20,"Okay now we have `-f` (or `--filter`) option which takes a string argument just like `-q`. Having another option other than `-q` seems a bit redundant, but I left `-q` option as it is not to break backward-compatibility (it is mainly used in fuzzy-completion code for bash). Please update and let me know what you think.
",junegunn,2014-02-05 13:41:10
15,2014-02-05 13:41:10,"Thanks, that's exactly what I meant.
",roboslone,2014-02-05 13:41:10
14,2013-12-25 15:35:32,"https://bugs.ruby-lang.org/issues/8584

:astonished:
",junegunn,2013-12-25 16:07:30
13,2013-12-22 10:47:19,"The entries of ~/.ssh/config are not accessible.
",thomasf,2013-12-23 14:18:48
13,2013-12-22 11:58:16,"I've made a slight change to the completion code so that it includes entries in ~/.ssh/config and /etc/ssh/ssh_config as well. But not sure if it completely solves your problem. What do you think?

I've just looked at the bash completion code for ssh command from Ubuntu and found that it's quite complex. Maybe I should make fuzzy-completion optional by requiring trigger sequence.
",junegunn,2013-12-23 14:18:48
13,2013-12-23 11:20:22,"Yeah it does very many things, I think trigger sequence might be better not to shadow the other things like path completion
",thomasf,2013-12-23 14:18:48
13,2013-12-23 14:15:33,"I guess you're right.
",junegunn,2013-12-23 14:18:48
13,2013-12-23 14:18:48,"Okay, updated. Now host name completion is only activated when trigger sequence (`**`) is found.
Please let me know if you have a problem. Thanks.
",junegunn,2013-12-23 14:18:48
12,2013-12-20 04:39:20,"It would great to have an option similar to `smartcase` in vim: automatically turn on case sensitivity if the pattern contains upper case characters, otherwise keep it case-insensitive. Thanks again! :)
",beloglazov,2013-12-20 06:32:56
12,2013-12-20 05:10:16,"Great idea. I'll let you know when it's done.
",junegunn,2013-12-20 06:32:56
12,2013-12-20 06:32:56,"Alright, it's done. Smart-case match is the new default.
I added `-i` option as well for those who still want case-insensitive match.
",junegunn,2013-12-20 06:32:56
12,2013-12-20 07:55:05,"Wow, you are fast, thanks!
",beloglazov,2013-12-20 06:32:56
12,2013-12-20 08:08:46,"No problem, thanks for the suggestion!
",junegunn,2013-12-20 06:32:56
11,2013-12-20 04:27:47,"Hi and thanks for the awesome tool!

Would it be possible to add a CTRL-Q key binding for quitting the finder? 

Best regards,
Anton
",beloglazov,2013-12-20 05:06:36
11,2013-12-20 05:01:08,"Okay, I guess it wouldn't hurt.
",junegunn,2013-12-20 05:06:36
11,2013-12-20 05:06:36,"Added CTRL-Q. Now we have CTRL-C, CTRL-G, CTRL-Q, and ESC keys that terminate the finder :laughing:
Thanks.
",junegunn,2013-12-20 05:06:36
11,2013-12-20 05:34:47,"Great, thanks a lot! :)
",beloglazov,2013-12-20 05:06:36
10,2013-12-18 20:42:02,"The algorithm sorting the matches should give priority to better matches.

Example: In a repo of mine, searching for ""login"" finds a lot of things, selecting 

<S_CODE_TOKEN>

instead of

<S_CODE_TOKEN>

which is obviously a better match.
",fisadev,2013-12-20 17:06:57
10,2013-12-18 21:05:13,"You could try `fzf -x` (extended mode) and then input `'login` (notice the apostrophe at the beginning that indicates ""non-fuzzy match"".
",justinmk,2013-12-20 17:06:57
10,2013-12-18 21:13:37,"It will work for that specific example, but it won't in many others where
the input is partially present on some of the entries. Still chooses other
entries, not evaluating how ""similar"" they are to the search text.
And that solution doesn't work for zsh or bash integration (ctrl-r, ctrl-t,
...), where fzf is called not by the user, but a function.

Improving the priorization will make it work better in all scenarios, it's
something CtrlP and Command-T already do, is common behaviour in any fuzzy
search mechanism.

I would implement it myself, but my ruby-fu isn't good enough to modify
your code :)

2013/12/18 justinmk notifications@github.com

> You could try fzf -x (extended mode) and then input 'login (notice the
> apostrophe at the beginning that indicates ""non-fuzzy match"".
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/junegunn/fzf/issues/10#issuecomment-30880600
> .

## 

fisa  -  Juan Pedro Fisanotti
",fisadev,2013-12-20 17:06:57
10,2013-12-19 00:07:44,"Hi, fzf does prioritize the candidates, first by the length of the matched substring, then by the length of the whole string. Thus, `login` comes before `loogin` or `login.sh`. However it only does so when the number of the candidates is less than the limit which is by default 1000, in order to avoid the cost of sorting a large list and limit the response time of the query.

This limit can be adjusted with `-s` option, or with the environment variable `FZF_DEFAULT_SORT` (the latter is actually undocumented though)
",junegunn,2013-12-20 17:06:57
10,2013-12-20 17:06:57,"Then the problem was the number of files on the folder I was using it (17.000).
Tried setting FZF_DEFAULT_SORT to 100000, it worked like a charm, and with no noticeable difference in response times.
Thanks for your help! and for the project :)
",fisadev,2013-12-20 17:06:57
9,2013-12-08 18:23:30,"Not sure if this is by design (I know extended-mode isn't supposed to be a full regex matcher), but thought I'd report it.

If `foo` is a directory in the current directory, try `fzf -x` with the following inputs:
- `^foo` returns all results starting with `foo`, including the `foo` directory
- `foo$` returns nothing
- `foo/$` returns nothing
- `^foo$` returns nothing

Try `find ${1:-*} 2> /dev/null | fzf -x` (which I use to include hidden files/directories, not sure if there's a better way):
- `foo$` returns all results ending with `foo`, including the `foo` directory
- `^foo` returns all results starting with `foo`, including the `foo` directory
- `^foo$` returns nothing

I finally got around to installing fzf yesterday, and I must say it is an extremely thoughtfully-designed and pleasant experience. Nice work!
",justinmk,2013-12-15 03:53:23
9,2013-12-08 18:59:56,"derp, may I ask what `${1:-*}` is doing actually? I can't figure out how to get it to include hidden files the current directory. Is it a subshell? A glob? An awk expression? I'm having a hard time googling it. Thanks very much.
",justinmk,2013-12-15 03:53:23
9,2013-12-09 01:50:03,"Hi, thanks for your interest in fzf.

> If `foo` is a directory in the current directory, try `fzf -x` with the following inputs

Without stdin pipe, fzf command will use find command to populate the list of files and symlinks under the current directory, excluding hidden files and directories. (The actual command can be seen here: https://github.com/junegunn/fzf/blob/master/fzf#L496) The list will not contain the names of the subdirectories.

> `^foo` returns all results starting with foo, including the foo directory

Therefore, this is not something we can expect, you shouldn't be able to match `foo` directory itself. Could you check again?

> Try `find ${1:-*} 2> /dev/null | fzf -x`
> `^foo$ returns nothing`

You're right, currently fzf will look for items that start with `foo$`, I'll fix this behavior.

> derp, may I ask what `${1:-*}` is doing actually?

`$1` is the first argument to the function, and `${1:-*}` evaluates to `*` if the argument is empty (or not given)

Take the following example:

<S_CODE_TOKEN>
- `do_fzf` evaluates to
  - `find * 2> /dev/null | fzf -x`
- `do_fzf .`
  - `find . 2> /dev/null | fzf -x`

The difference is that `*` will not match hidden files and directories that are direct children of the current directory. Usually I work in the root directory of a git repository, so `*` is a concise way to ignore `.git` directory. (The command in https://github.com/junegunn/fzf/blob/master/fzf#L496 is the correct way to ignore all the hidden files, but a bit lengthy)

Hmm, it seems there is a confusing example on the README page, I'll update the documentation as well.
",junegunn,2013-12-15 03:53:23
9,2013-12-09 06:16:41,"`^xxx$` has been fixed. Thanks for the report :)

> I can't figure out how to get it to include hidden files the current directory.
1. All the files and directories (and symlinks): `find .`
2. Exclude .git directories: `find . -name .git -prune -o -print`
3. Only directories (excluding .git): `find . -name .git -prune -o -type d -print`

So basically, you don't need `${1:-*}` or `${1:-.}` if you're only interested in the current directory.
I wrote `${1:-*}` [in the examples](https://github.com/junegunn/fzf#useful-bash-examples) to allow something like `fd ~/github` in addition to simple `fd`
",junegunn,2013-12-15 03:53:23
9,2013-12-15 03:53:23,"> you shouldn't be able to match `foo` directory itself. Could you check again?

Maybe I wasn't clear: foo is _in_ the current directory. It is not itself the current directory.

> `${1:-*}` evaluates to `*`

Thanks, I should have realized that since it is inside a function definition :sleeping: 

> All the files and directories (and symlinks): `find .`

Yeah, the readme example got me and I wasn't thinking carefully. Thanks! Here's what I'm using now:

<S_CODE_TOKEN>

`f()` fuzzy-searches everything except `.git`, and it trims the initial `./` prepended by `find .`, so the output is formatted nicer (which makes searching with `fzf -x` nicer). 
",justinmk,2013-12-15 03:53:23
9,2013-12-15 08:50:21,"Hey, thanks for the feedback!

> Maybe I wasn't clear: foo is in the current directory. It is not itself the current directory.

No I don't think there was a misunderstanding. The default find command does not print directories:

<S_CODE_TOKEN>

As you can see, it only prints regular files and symlinks. Try

<S_CODE_TOKEN>

and you'll see that `directory` is not in the list.
So I couldn't understand how you could match `foo` directory in the first place.

Regarding your bash functions, I think `sed 's@^..\(.*\)$@\1@'` can be written concisely as `sed s/..//` :smiley:
",junegunn,2013-12-15 03:53:23
9,2013-12-16 05:24:29,"> The default find command does not print directories:
> find \* -path '_/\._' -prune -o -type f -print -o -type l -print

I see, you mean the default `fzf` find call. I thought you mean plain old `find`. I guess my original report was wrong in that regard.

> sed 's@^..(.*)$@\1@' can be written concisely as sed s/..//

Much better, thanks!
",justinmk,2013-12-15 03:53:23
8,2013-12-04 20:39:32,"In the virtual console, the match is invisible (black FG, black BG). As the match gets larger, it becomes impossible to determine which file is which.
",PythonNut,2013-12-05 03:23:00
8,2013-12-05 02:22:17,"Hmm, sorry I don't know what virtual console is, and I could use some more info.
- Which version of Ruby are you running? It is reported that some people have had issues on Ruby 1.8 though I couldn't reproduce the problem.
- Which part of the screen exactly is invisible? Matched terms or selected item?
- A screenshot will be really helpful to diagnose the problem.

Thanks.
",junegunn,2013-12-05 03:23:00
8,2013-12-05 02:55:41,"like TTYs, ctrl+alt+f1 etc

The matched term is the same as the background on Ruby 2.0.0 but it works as expected on a terminal emulator in X.
",mackal,2013-12-05 03:23:00
8,2013-12-05 03:19:18,"@PythonNut @mackal Hey guys, could you please check if it's fixed with the above commit? Works for me here.
",junegunn,2013-12-05 03:23:00
8,2013-12-05 03:23:00,"Works perfectly! Thanks!
",PythonNut,2013-12-05 03:23:00
8,2013-12-05 03:35:55,"Okay, thanks for the report!
",junegunn,2013-12-05 03:23:00
7,2013-11-20 10:14:46,"For stronger compatibility with my emacs hands :)  

Great work btw!
",thomasf,2013-11-20 12:23:07
7,2013-11-20 12:23:07,"Sure.
",junegunn,2013-11-20 12:23:07
6,2013-11-19 16:44:00,,junegunn,2013-11-19 16:44:30
5,2013-11-10 17:32:04,"- new fzf-cd-widget for running cd
- fzf-file-widget now properly escapes the special characters and supports
  multi-selection
- fzf-history-widget replaces the current line instead of appending to it
",Vifon,2013-11-11 00:11:29
5,2013-11-11 00:11:18,"Looks good, thanks! I really appreciate your help in improving the documentation.
",junegunn,2013-11-11 00:11:29
5,2013-11-11 00:19:42,"You're welcome. I've been writing some zle widgets recently, so it's not a big deal. ;)
",Vifon,2013-11-11 00:11:29
4,2013-11-10 14:31:45,,Vifon,2013-11-10 14:34:21
4,2013-11-10 14:34:34,"Thanks a lot!
",junegunn,2013-11-10 14:34:21
3,2013-11-09 17:47:34,,junegunn,2013-11-09 18:59:00
2,2013-11-06 06:28:57,"When invoking fzf with zsh, the first time you select a file and hit enter the selection seems to be ignored, and you have to do it again, then it behaves as expected. Works perfectly in bash.
",jebaum,2013-11-06 07:12:56
2,2013-11-06 06:44:55,"Hmm, I can't reproduce the problem. Tested it on zsh 5.0.2 (x86_64-apple-darwin13.0)
FYI, my .zshrc is empty as I don't use zsh.
",junegunn,2013-11-06 07:12:56
2,2013-11-06 07:12:56,"Woops, my mistake, it only occurs when using oh-my-zsh. I'm gonna try to figure out exactly what it is, obviously not the fault of your script. Sorry for the false issue
",jebaum,2013-11-06 07:12:56
2,2013-11-06 07:20:59,"For the record, this function that's in a file getting sourced is causing the problem:

function title {
  if [[ ""$DISABLE_AUTO_TITLE"" == ""true"" ]] || [[ ""$EMACS"" == _term_ ]]; then
    return
  fi
  if [[ ""$TERM"" == screen\* ]]; then
    print -Pn ""\ek$1:q\e\"" #set screen hardstatus, usually truncated at 20 chars
  elif [[ ""$TERM"" == xterm\* ]] || [[ $TERM == rxvt\* ]] || [[ $TERM == ansi ]] || [[ ""$TERM_PROGRAM"" == ""iTerm.app"" ]]; then
    print -Pn ""\e]2;$2:q\a"" #set window name
    print -Pn ""\e]1;$1:q\a"" #set icon (=tab) name (will override window name on broken terminal)
  fi
}

Specifically the `print -Pn ""\e]2;$2:q\a""` line. I have no idea why
",jebaum,2013-11-06 07:12:56
2,2013-11-06 07:26:03,"No problem. Please let me know if you find out the cause, maybe I could mention it in the README page. Thanks.
",junegunn,2013-11-06 07:12:56
2,2013-11-06 07:29:22,"Oh, thanks. Did you find a workaround? I'll try to look into it, but I'm completely ignorant on zsh or oh-my-zsh.
",junegunn,2013-11-06 07:12:56
2,2013-11-06 11:44:59,"Did you use backticks to execute fzf?

I can see the problem you mentioned when I use backticks as follows.

<S_CODE_TOKEN>

However, the following works fine.

<S_CODE_TOKEN>
",junegunn,2013-11-06 07:12:56
2,2013-11-06 15:34:22,"Yep, I was using backticks and it works fine with $(), thanks!
Do you happen to know why? I can't find any documentation on the difference between the two
",jebaum,2013-11-06 07:12:56
2,2013-11-07 01:10:53,"Honestly I have no idea at all.
I've never used zsh/oh-my-zsh seriously before and trying with $() instead of backticks was just a lucky guess.
As far as I know, at least on bash, $() and backticks are equivalent except that $() can be nested,
and I don't think it should be any different on zsh.
I guess it's a bug of oh-my-zsh, but I'm not sure if I'm going to look into it since I myself don't use it.
",junegunn,2013-11-06 07:12:56
1,2013-11-05 22:19:25,"It would be very handy if fzf could perform keywords matching separated by a space "" "".

For example, if we look for  match of candidates that meet both conditions ""foo"" and ""bar"":

foo bar 

You can also specify negative conditions with an exclamation mark ""!"". This matches candidates that meet ""foo"" but do not meet ""bar"":

foo !bar
",mhrebenyuk,2013-11-16 16:52:25
1,2013-11-06 12:18:01,"Hi, thanks for the suggestion.

It surely is a nice-to-have feature, but I usually take the minimalist approach and do not try to add a feature which is not necessary in order to keep the implementation simple.
1. We can just write `foobar` or `barfoo`. Of course it does not match `foo-bar` and `bar-foo` at the same time, or `foboar`, but I personally haven't felt the need for being able to do so especially when working with a list of files. So I'm not sure. Can you give me an example where this feature would be a great benefit?
2. The user will not be able to match literal space character, so we should introduce a command-line option to enable or disable this feature. Alternatively, maybe we could allow user to split the query with TAB key or something.
3. Regarding `!`, I'm reluctant to introduce a custom syntax which can add complexity. I want fzf to be instantly obvious to anyone so that it does not need any more explanation. Also, as the case of space, the user will not be able to match `!` character in this case.
4. FYI, fzf caches the intermediate results to speed up the search and improve the user experience. (e.g. `appl` -> `apple`, or `pple` -> `apple`, etc.) The code is going to be much more complex if we allow multiple matchers. So I'm a bit worried about that.

So the answer is not yes or no at this point. I'll think about it. Thanks.
",junegunn,2013-11-16 16:52:25
1,2013-11-07 20:43:06,"Thanks for your explanations. 

Actually the idea was borrowed from extensively using of [zaw](https://github.com/zsh-users/zaw) with extended-search enabled. 
If you are interested you can read about it by clicking on the link above and scrolling to the bottom of page.

Anyway, thanks for great command line booster!
",mhrebenyuk,2013-11-16 16:52:25
1,2013-11-08 01:52:32,"zaw looks interesting, thanks for the link!

I'm currently trying out zaw. One thing I noticed is that it does not support fuzzy-matching (I can't type in `ape` to find `apple`), and it seems to me that one of the benefits of its extended-search mode is that it can be used to complement this limitation (`ap e` will match `apple`).

Having an advanced, extended search mode on fzf would be nice, but because of the inherent difference between fzf and zaw, we may have to come up an implementation that better suits fzf, rather than just following the way of zaw.
",junegunn,2013-11-16 16:52:25
1,2013-11-10 11:25:20,"> I'm currently trying out zaw.

You may take a look on zaw in action from this [blog entry](http://blog.patshead.com/2013/04/more-powerful-zsh-history-search-using-zaw.html). 

> One thing I noticed is that it does not support fuzzy-matching

Yes, it filters entries in its own way by tokens provided on its prompt. And it is very handy indeed.
For example, if you look for xml file but you are not sure what exactly one, you can just start from:

   `xml$`

After that entries would be filtered to match only xml files. At this point you recalled that it has ""party"" in its path/name so you type:

`par`

As entries are further narrowing down on your screen, you would see from the result that the file is actually related to identity provider configuration, thus you type:

`idp`  

Finally the whole query would look `xml$ par idp`  for getting

 `.../.../.../idp-shibboleth/.../.../relaying-parties.xml`   

In other words your filter query develops with developing (clerifying) your thoughts in your head. In this approach order of query keywords doesn't matter, whereas in fuzzy-matcher it does. (You can't just type `xmlparidp` and get the same result).

I believe it would be great to have this power by providing 'keywords' mode to fzf. 
Let give end user right to choose what better suits its workflow. 
",mhrebenyuk,2013-11-16 16:52:25
1,2013-11-10 14:26:44,"Thanks for the detailed explanation. The usage pattern you mentioned makes perfect sense.
At the same time, it highlights the contrast between the keyword mode and the current behavior of fzf
and leaves me with some questions.
- Should fzf try to replace zaw? Why not use both? (Of course one can't use zaw if not on zsh though.)
- Does it make sense to have a non-fuzzy-finding method in fzf which stands for ""fuzzy finder""?
- If we've decided to implement one, why should we support only `^` and `$`, instead of full regular expression? Wouldn't it be better to be able to write something like `(ya?ml|xml)$ [0-9]+`?

I don't have answers to these questions yet.
Maybe I need more time (or more experience with the tool) to be able to evaluate the options.
",junegunn,2013-11-16 16:52:25
1,2013-11-10 15:20:38,"> Should fzf try to replace zaw? Why not use both? (Of course one can't use zaw if not on zsh though.)

Zaw's killer feature -- matching by multiple keywords without order --- was main reason for me switching to zsh.
Though I personally using it only as better alternative for incremental history search and that's speed up my work enormously. Having the feature in fzf would mean free of choice to use it: no matter whatever a shell you use and a workflow you are stick with, you always have 'universal filter tool' -- fzf -- that suits your particular needs.

> Does it make sense to have a non-fuzzy-finding method in fzf which stands for ""fuzzy finder""?

Don't see any problem with that. Of course it's up to you to take the final decision.

> If we've decided to implement one, why should we support only ^ and $, instead of full regular expression? Wouldn't it be better to be able to write something like (ya?ml|xml)$ [0-9]+?

From my perspective full regex would be overhead. Because fzf is not sed. We run fzf to be more productive thus spend as less time on it as possible. And leave it as soon as our find query is matched.  
",mhrebenyuk,2013-11-16 16:52:25
1,2013-11-10 15:58:03,"At this point, I think allowing out-of-order matching of patterns could be a nice add-on to fzf, but I'm not so sure about supporting `^` or `$`, since they invalidate the basic premise of fzf, fuzzy matching.

So for example, if we look for an item that includes apple, banana, and orange, but not sure about the ordering between them, we may type in something like `aple ornge bnna`, which is an OOO fuzzy matching. I'm not against having such feature, although increased complexity in implementation is still a concern.
",junegunn,2013-11-16 16:52:25
1,2013-11-10 16:23:59,"An idea:
- Treat tokens without `^` or `$` as fuzzy matching patterns
- If a token starts with `^` or ends with `$`, it is matched as it is.
",junegunn,2013-11-16 16:52:25
1,2013-11-11 08:37:30,"Or add option `+t, --tokens` that mimics zaw's search engine.
",mhrebenyuk,2013-11-16 16:52:25
1,2013-11-11 09:49:58,"Oh, I don't mean to make the scheme I mentioned above the default behavior of fzf, it will have to be explicitly enabled by the user with a command-line option. In my opinion, the proposed scheme is an improvement over zaw's method as it allows fuzzy matching.
",junegunn,2013-11-16 16:52:25
1,2013-11-15 17:33:29,"Check out https://github.com/junegunn/fzf#extended-search-mode

It's not exactly same as the extended-search mode of zaw, as it uses fuzzy matcher by default as mentioned in the previous comment, unless a word starts with a single quote. I haven't given enough thought about this new syntax so I'm not confident about it, but it looks okay to me at the moment. (FYI it was borrowed from the similar one from Clojure syntax)
",junegunn,2013-11-16 16:52:25
