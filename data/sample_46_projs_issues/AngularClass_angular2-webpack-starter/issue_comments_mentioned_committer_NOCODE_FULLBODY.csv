issue_num,datetime,body,login,mention_login
1541,2017-02-22 10:13:59,"@shlomiassaf Thanks, that's a good point to start with.",daominhsangvn,shlomiassaf
1541,2017-02-23 02:03:03,"ok Thanks @shlomiassaf for the point. I resolved this issue by exclude the angular2-perfect-scrollbar from ExtractTextPlugin and use css-loader combine with to-string-loader for angular2-perfect-scrollbar.

I'm not sure why the ExtractTextPlugin cannot find the css file of angular2-perfect-scrollbar but this is just work around.

Anyway, problem solved. Closed!",daominhsangvn,shlomiassaf
1536,2017-02-16 22:23:51,"Thanks @shlomiassaf 
I just found this out today in a post on StackOverflow:

> Note: As of Angular CLI 1.0.0-beta.28 (released February 1st, 2017), --aot is on by default if --prod is specified.

Using `npm run build:aot:prod`, and stripping out some stuff from this starter project to make it comparable to a normal clean angular project, actually produced a smaller vendor file: 312KB with this vs 352KB",antriver,shlomiassaf
1531,2017-02-16 21:17:13,@skriems is right.,shlomiassaf,skriems
1520,2017-02-13 16:48:42,@shlomiassaf Thank you so what you are saying is that on a large application main will be larger ? This could be my problem then since the app is rather large,pavillet,shlomiassaf
1490,2017-02-08 06:12:11,@colinskow run typescript compiler without webpack and you'll get it.,pleerock,colinskow
1490,2017-02-08 08:26:05,"@shlomiassaf , no, it is configured. I'm talking about using typescript compiler without anything else (webpack, ngc, etc.). There are nothing in tsconfig that indicates to skip `main.browser.aot.ts` file (solution may be to exclude `main.browser.aot.ts` from default tsc compilation). Checkout this repo from scratch, don't use webpack or ngc, just use tsc and you'll see typescript compiler error.",pleerock,shlomiassaf
1483,2017-02-08 00:33:54,"@shlomiassaf wow, thank you for this simple solution! I'll give it a shot and report back with my results.

I hacked at this for a few hours the other day but was unable to figure out the problem.",DBosley,shlomiassaf
1468,2017-02-09 13:56:10,"@JoniJnm I made a PR about this. I took your idea about separate the options for the Webpack. Also, the configuration it's being setting with the `env` variable. (I try the NPM script config, but Webpack does not get along with this, see: webpack/webpack#4221). 

Still a WIP, but if you can try it and test it, would be nice. Also, if you think the workflow can be improve, please, say so. (Really, help...)",michaeljota,JoniJnm
1459,2017-02-06 12:27:55,"@shlomiassaf 
Thanks for your fast answer and your good job.
Problem was with NgcWebpackPlugin in default webpack.common.js:

After removing 'resourceOverride' dynamic creating work good with AOT compiling even with JitCompilerFactory.

As we understood this option do not remove from components source of HTML templates and JIT compiler can read and compile these templates.

So repeat. How is actually it works:
1. If components was compiled by AOT.
2. Some dynamic component wants to use one or more AOT components.
3. Shall JIT compiler recompile all component (templates, styles) used by dynamic component?
It means that we shall save all source html and styles after AOT compilation for JIT compiler.
Also we shall include JIT compiler to our project.
As result we will have: additional size of JIT compiler + all sources of components. 

Thanks a lot.",KhanaevRoman,shlomiassaf
1458,2017-02-07 11:21:07,"@dherges not sure if there will be another file, see s-panferov/awesome-typescript-loader#364",shlomiassaf,dherges
1458,2017-02-07 12:39:24,"@shlomiassaf I don't get it. Right now, we have two files in this repo:

``tsconfig.json`` for tests
``tsconfig.webpack.json`` for webpack build

my suggestion is to add another one:

``tsconfig.jit.json`` for JiT compiler builds

plus, we could rename ``tsconfig.webpack.json`` to ``tsconfig.aot.json`` to make it clear, that this one is used for AoT compiler builds.
",dherges,shlomiassaf
1458,2017-02-07 20:36:09,"@dherges The tradeoff is clear, the balance is not.

The current status is that:
  - AOT compilation in angular is not that trivial, lot's of factors people don't realise.
  - Running unit tests with Karma requires a completely unique configuration
 
Add to that HMR, unique loaders, special production settings, linting etc.. 
The end result is a complicated process, to complicated if you ask me.

I help a lot of friends with setups, its a real blocker for most and this is why the angular-cli is a must, and I hope it will allow the freedom we get here, one day.

To sum up, factoring all of the above I think we should avoid spreading as much as possible.
",shlomiassaf,dherges
1457,2017-02-03 12:02:47,"@shlomiassaf, could we use ExtractTextPlugin to bundle all of the Component css as a separate css bundle loaded via link tag? Aside from one less network request, is there a benefit to having it all be part of the main js bundle? Or at least, could this be done for Dev builds to benefit from faster CSS reloads?",bmayen,shlomiassaf
1457,2017-02-03 12:52:20,"@shlomiassaf,  Thanks for the reply!

Actually, my css are all global instead of in angular `@Component`

So in my case, is it possible to reload without refreshing the page?
",gudh,shlomiassaf
1433,2017-02-03 15:22:54,"@seiyria We do linting in the CI before moving to production. Or, in any case, before you go in production, you should have the CI tasks running. Thus, I see it as only helpful to have it running in dev, when debugging in the browser or console.",katallaxie,seiyria
1416,2017-01-25 16:21:27,"@gdi2290  yea, works fine for development, but what's about production? Should I ask all my users to click this checkbox? I thought that what for build:prod needs, to add hash and clear cache",Viktor-Bredihin,gdi2290
1416,2017-01-25 16:33:02,"@katallaxie ""the hash is only changed, as the content changes"" - what content? I have changed html + component's logic, but polyfills still has the same hash",Viktor-Bredihin,katallaxie
1416,2017-01-25 17:14:36,"@katallaxie ok, but it's not solving my problem. The problem is that I have cache issues, chunk hash updates, but polyfills loads old versions",Viktor-Bredihin,katallaxie
1416,2017-01-25 17:56:28,"@katallaxie It works! Thank you, very appreciate your help. But you just removed this plugin and it works too, so what's better?",Viktor-Bredihin,katallaxie
1416,2017-01-25 18:04:18,@katallaxie cool thanks man!,Viktor-Bredihin,katallaxie
1416,2017-02-13 15:03:37,"@katallaxie, @Viktor-Bredihin, as I understand we should use md5-hash plugin  with webpack-inline-manifest plugin to exclude runtime info about mapping into separate script and inject it into html via html-webpack-plugin. What problems md5-hash plugin has? Without md5-hash, hash of polyfills file will be changed and we'll need to upload it every time, so anyway, we need to use md5-hash or HashedModuleIdsPlugin, if the previous really has problems...",makdv,katallaxie
1411,2017-01-24 21:44:52,"Hi, @d3viant0ne thanks for your help. Here is my tsconfig.json file


",doorman02,d3viant0ne
1408,2017-01-24 03:19:17,@d3viant0ne  Thanks So to use aot we have to put all our templates in the ts file and also the styles.,MangeshPimpalkar,d3viant0ne
1408,2017-01-24 03:43:51,@d3viant0ne Sorry the version i am using is 2.4.3.I updated the ticket.,MangeshPimpalkar,d3viant0ne
1407,2017-01-23 23:08:35,"@gilhanan I'm using sass resource loader, it's great.

The problem is that it does not play nicely with relative imports.
It requires you to add **ALL** virtual SCSS files into the resource array in the webpack plugin configuration which is something that adds a lot of noise to the starter.  
I can live with that... but most devs won't know about it so they will just add `@imports` to the `_variable` file... we'll end up supporting sass resource loader.

About the commit

```
This is getting too lengthy, we need to move it to an object based loader configuration.
It adds to my comment above, consider the need for multiple SCSS variable files... 

This is a common thing, you usually divide these files to categories.
",shlomiassaf,gilhanan
1407,2017-01-25 14:49:11,"@shlomiassaf Thanks for the feedback, I made another commit for changing the loader property to object based configuration.

About the PR, the meaning of `_variables.scss` is to declaring variables, so it don't have side effect and users can override variables which declared before in theirs styles, so it's just advantage. And to prevent confusing I think a good comment will clarify it.",gilhanan,shlomiassaf
1398,2017-01-21 03:03:54,"@d3viant0ne  That's because of the order of the loaders.

It is fixed in a previous PR (#1387) that introduced 2.0.0... if 1387 is accepted and this is rebased it should work.",shlomiassaf,d3viant0ne
1394,2017-01-19 23:12:57,Thanks @jamesanglin ,d3viant0ne,jamesanglin
1387,2017-01-22 14:12:53,"@d3viant0ne, last commit reasoning

The definition of the `*.ts` loader is getting more complex.
We need AOT compliance so we use `angular2-template-loader`
We need lazy loading so we use `ng-router-loader`
And of course, we need to compile TS to JS, `awesome-typescript-loader`

We can't explain all that in the configuration file but we can use Webpack 2 new loader syntax and use objects instead of literal string to configure the loaders.",shlomiassaf,d3viant0ne
1387,2017-01-22 16:50:33,"@d3viant0ne Please review https://github.com/AngularClass/angular2-webpack-starter/wiki/Routing-and-Lazy-loading-@NgModules

Comments are welcome",shlomiassaf,d3viant0ne
1387,2017-01-23 21:51:32,"@shlomiassaf I made some documentation on lazy loading here:
https://github.com/AngularClass/angular2-webpack-starter/pull/1378/files#diff-04c6e90faac2675aa89e2176d2eec7d8R251

You could probably take the first part of that.",colinskow,shlomiassaf
1382,2017-01-23 21:21:59,"@gdi2290 @d3viant0ne @colinskow 

We need to decide on this one, if we won't upgrade we will soon start to see issues flying around....",shlomiassaf,d3viant0ne
1382,2017-01-23 21:21:59,"@gdi2290 @d3viant0ne @colinskow 

We need to decide on this one, if we won't upgrade we will soon start to see issues flying around....",shlomiassaf,colinskow
1382,2017-01-23 21:39:35,"Let's ditch Node 5... It was never LTS and was a short-lived version. Our dependencies don't support it anymore, so why should we?

1) Update the docs stating Node 6 LTS is the minimum
2) Remove Node 4 altogether from Travis, and replace Node 5 as the allowed failure

If @d3viant0ne agrees let's pull the trigger.",colinskow,d3viant0ne
1382,2017-01-24 21:49:35,"@shlomiassaf you can require the version 
`var version = require('@angular/compiler-cli/package.json').version`
 and require the correct file for each version to support any version",gdi2290,shlomiassaf
1382,2017-01-31 21:09:56,"@gdi2290 I don't follow...

We need to decide on this, `ngc-webpack` 1.2 has some bug fixes and ability to pass emitted files (assets) back to webpack (`file-loader`)... so we need to upgrade.",shlomiassaf,gdi2290
1378,2017-02-07 22:27:33,"@colinskow This introduces a lot of pitfalls.

The main one is the need to specify all of your lazy modules in a special file.
It makes lazy loading difficult more than it already is... lazy loading should be part of the route definition flow without extra requirements... 
This alone is a blocker for me...

Also, the final tsconfig is not known to the user, very blurry...

I think it will create more confusion, we better wait for s-panferov/awesome-typescript-loader#364
",shlomiassaf,colinskow
1378,2017-02-07 22:43:53,"@shlomiassaf 

There are two ways TypeScript can work with lazy loaded modules:
1) Compile every single file in the project
2) Compile entry files, plus declared lazy loaded modules

If you want to avoid compiling everything, then there is no way around declaring lazy loaded modules. Remember when we used to have to declare vendor libraries?

The way around this would be to write a script that parses the dependency tree and detects lazy loaded modules on its own. But that's a lot of work for very little productivity gain in my eyes.",colinskow,shlomiassaf
1378,2017-02-07 23:19:56,"@colinskow I'm not sure you are right, if this is the case lazy routes would never have worked and this is exactly why `ng-router-loader` exists.

Although `ng-router-loader` kicks in after `awesome-typescript-loader` finished TS to JS conversion it still adds a reference to a file (which is TS).
Webpack will load this file and send it through TS loader chain.

So anyway, the files goes through TS compilation hence TS type checking.

If `awesome-typescript-loader` will typecheck everything in the path of the entryPoint we're good.",shlomiassaf,colinskow
1377,2017-01-16 05:38:22,"Hi @colinskow , yeah upgrading to latest node solve this issue, moreover, how can I get help related to unit tests setup as I am facing some issue like while running test command I got errors like ""Cannot find the name 'describe'.""  and also some global variables from custom typing.",yvChauhan,colinskow
1371,2017-01-14 06:30:24,I've got some work to do so I won't be watching github issues. If anyone still has an issue with this after picking up the changes from @colinskow - Ping me directly in the AngularClass slack channel.,d3viant0ne,colinskow
1371,2017-01-19 11:07:45,"Just to update, I've just downloaded the latest clone and getting the same error as mentioned here and in #1372  

The change from @colinskow is already merged in and I've already tried the fix from @matb - but neither seem to make the difference.

I'm on OS X 10.12.2, running: Node Version 5.0.0 and NPM 3.3.6

@d3viant0ne - I'll ping you at Slack, as requested. Thanks for any help.",pauldcollins,d3viant0ne
1371,2017-01-19 11:07:45,"Just to update, I've just downloaded the latest clone and getting the same error as mentioned here and in #1372  

The change from @colinskow is already merged in and I've already tried the fix from @matb - but neither seem to make the difference.

I'm on OS X 10.12.2, running: Node Version 5.0.0 and NPM 3.3.6

@d3viant0ne - I'll ping you at Slack, as requested. Thanks for any help.",pauldcollins,colinskow
1370,2017-01-13 11:58:30,"@d3viant0ne 
Yes compodoc is at the beginning, with some features which needs to be enhanced.
The target release 0.1.0 will add the last missing features for a matured tool.
I will update this discussion when it will be ready.",vogloblinsky,d3viant0ne
1366,2017-01-15 20:15:29,"@colinskow  had another look at this and even with ""compiled"" excluded in tsconfig.webpack.json at-loader still reports errors in the compiled folder when running dev server. This is because main.browser.aot.ts is still being included from src dir. Modifying tsconfig.webpack.json to the following seems to fix the issue, and AoT still works fine as main.browser.aot.ts explicitly listed as entry point in webpack config

Is it worth putting in a pull request for this? I am happy to just make this change locally and you can close this issue if not.",glendaviesnz,colinskow
1364,2017-01-13 03:07:29,"@colinskow May as well roll this into the webpack config rework and make it a configurable option for the user.

I'll rework them later this evening",d3viant0ne,colinskow
1364,2017-01-13 06:10:36,@d3viant0ne definitely add `ignored: /node_modules/` since that will definitely improve performance on lower end systems for everyone.,colinskow,d3viant0ne
1358,2017-01-09 21:35:28,"@shlomiassaf that's impressive! You took what I did to a higher level. Obviously it's better to handle the DLL build inside a Webpack plugin rather than the npm scripts.

Just a couple small points:
1) Add a `clean:dll` NPM script, and also add the `dll` folder to the `clean` script.
2) You should think about unit testing the logic of your package (outside the Webpack build)

The bottom line is that DLLs make dev builds run a lot faster, once the DLLs are built. This is a good merge as long as it doesn't have unexpected side effects or break existing builds that otherwise work.",colinskow,shlomiassaf
1358,2017-01-10 07:34:47,"@colinskow Once the config file is part of the repo it doesn't matter, you have to change the code.

I agree that splitting into a different file has logic to it but I also don't like to many configuration files... so my thought was lets make it super light, nothing fancy and if the user wants a more advanced config he can do it. In 99% of the use cases the common config is sufficient.

The config file for the DLL has nothing to it, it's based on the common... so, IMO, no need to have another config file.

As for unit tests, agreed, but as you can see from my post, I asked for help on that :)

I'll post a clean script later.
",shlomiassaf,colinskow
1358,2017-01-10 18:52:08,"@shlomiassaf - I am personally leaning towards just doing it here if you are up for it. If you don't have the time, I can PR the changes into this branch on your fork and we can land it all at once that way.

Either way it goes, any time we can limit the number of major changes the users have to contend with, the better imo.",d3viant0ne,shlomiassaf
1358,2017-01-10 19:02:59,"@d3viant0ne I'm not sure I will get to it today so feel free to do whatever :)

BTW, I fixed the bug.",shlomiassaf,d3viant0ne
1358,2017-01-11 16:29:11,"@shlomiassaf, can you clarify something for me? I've pulled these changes into our build system which is based off of this starter. What I'm seeing is a vendor.dll.js and vendor.bundle.js, both of which contain all of the angular libs. Should there even be a vendor.bundle.js anymore? ",bmayen,shlomiassaf
1353,2017-01-11 17:45:34,"@colinskow , still same issue i run all command provided by you, however, while running e2e i am facing same issue as mentioned by  @Redigast13 ",yvChauhan,colinskow
1352,2017-01-07 14:46:47,"@colinskow for the sake of maintainability I would fork the repo. I also have my very own for Electron support. I think this needs special care, the same way as you want to support NativeScript and other special ends like ReactNative + Angular 2 etc.",katallaxie,colinskow
1352,2017-01-07 19:39:38,"@katallaxie would you please give me a link to your Electron repo, this could save me a lot of work if you've done it.",colinskow,katallaxie
1352,2017-01-15 19:13:26,"@colinskow Yes I am glad to help with it.

Let me have your repo link and I will keep track of it and help when possible.

You can use my code where you need, no problem at all. Also, if you would like to implement your improvements in my repo that would be awesome.",JonnyBGod,colinskow
1352,2017-01-26 16:29:12,"@colinskow Cool that was fast. Will test it soon.

Quick remarks from my very quick look at it:

1. I think electron.main should be on a dedicated folder in root. This is because you potentially want to extend electron main capabilities and have multiple files for it.

2. I don't think NGRX fits this starter. That is why I created an advanced starter. NGRX is just too complex for most devs starting with angular2.

Would you be willing to implement your electron improvements in my [advanced starter](https://github.com/JonnyBGod/angular2-webpack-advance-starter)?",JonnyBGod,colinskow
1347,2017-01-06 22:16:04,"I am pretty sure the stance on autoprefixer in the past was if people want to use it, they can add it but @gdi2290 didn't want it in the starter as it adds more complexity for limited usefulness.

Personally I agree with @colinskow in regards to this being a starting point and thus we really only want to include things that are of benefit to everyone using the starter to build upon.",d3viant0ne,colinskow
1347,2017-01-07 06:17:04,"@shlomiassaf just to be clear the case for the DLLs pull request is that it cuts dev build time in half, which leads to dramatic productivity gains -- especially when repeatedly testing small changes in code or debugging. It's a money maker for the companies who will use this starter.

The DLLs are setup so they are totally transparent to the user, who gets automatic immediate productivity gains as soon as we test and merge the PR. It's not going to scare new people away since they don't need to get into technical details (which is just one plugin added to the dev build chain). It also shouldn't break any existing builds.",colinskow,shlomiassaf
1347,2017-01-07 10:10:01,"@shlomiassaf I could live with Autoprefixer + PostCSS, rather then SCSS 🤕 . There are many projects that use different CSS preprocessors. However, there are litte differences as to what is need in the postprocessing, which is minifcation, inlining, and compatibility.",katallaxie,shlomiassaf
1344,2017-01-06 07:15:47,@gdi2290 Can you confirm if assets are being copied to dist?,JonnyBGod,gdi2290
1343,2017-01-06 18:46:55,"@maxisam - Given we are not actually using `paths` anywhere, would you please update this to pull both `paths` & `baseUrl` from all the typescript configuration files?",d3viant0ne,maxisam
1341,2017-01-06 15:51:09,"No, it doesn't. You are never going to see a real time savings in the starter or most of the applications built on top of it less the very largest applications. But hey, the masses just had to have the next hot buzz word, regardless of their understanding of it's benefits and @colinskow was kind enough to provide.",d3viant0ne,colinskow
1335,2017-01-05 16:45:06,"@d3viant0ne 👍 Upgrade is seriously beyond what this starter wants to achieve. Also, it seems that in most cases it would be more beneficial, if we would provide something like `angular2-recipes` in which we provide some patterns and examples.",katallaxie,d3viant0ne
1335,2017-01-05 21:00:04,"> any number of angular 1.x versions is a rabbit hole...

@d3viant0ne On same page here, maybe we can pick latest version and just keep it limited to that.

> It would add a bunch of bloat for the remainder of the community who won't ever use it.

I guess this is where opt in/out can be considered? If still complicated, maybe we can resort to `angular2-recipes` as @katallaxie said.

> Too many ngUpgrade quirks to not purpose build a solution.

Agreed. Easy or Hard, I guess we would still need a support of some sort in form of build solution or receipes considering ngUpgrade is a de-facto solution for upgrading. 

Also, it's fine if we agree that it's something out of the scope for this starter. 

What I was wondering is, we have [NG6-starter](https://github.com/AngularClass/NG6-starter) for NG1.x apps and this starter for NG2+ apps, it would be great if we have a build solution (or even receipes) that connects these 2 starters.",osdevisnot,katallaxie
1335,2017-01-05 21:00:04,"> any number of angular 1.x versions is a rabbit hole...

@d3viant0ne On same page here, maybe we can pick latest version and just keep it limited to that.

> It would add a bunch of bloat for the remainder of the community who won't ever use it.

I guess this is where opt in/out can be considered? If still complicated, maybe we can resort to `angular2-recipes` as @katallaxie said.

> Too many ngUpgrade quirks to not purpose build a solution.

Agreed. Easy or Hard, I guess we would still need a support of some sort in form of build solution or receipes considering ngUpgrade is a de-facto solution for upgrading. 

Also, it's fine if we agree that it's something out of the scope for this starter. 

What I was wondering is, we have [NG6-starter](https://github.com/AngularClass/NG6-starter) for NG1.x apps and this starter for NG2+ apps, it would be great if we have a build solution (or even receipes) that connects these 2 starters.",osdevisnot,d3viant0ne
1333,2017-01-06 05:11:56,Awesome. Thank you @colinskow. I'm closing this PR in favor of #1341. Do we have numbers on savings in dev build time? I mean build times before and after introducing DLL plugins?,osdevisnot,colinskow
1331,2017-01-07 15:15:19,"@colinskow thank u, it's working :)",Ks89,colinskow
1330,2017-01-04 00:50:50,"@colinskow We need to be very careful with DLL's.

It's a feature worth having for large scale projects but it will require a big refactor...

We need to figure how how can we do it so people will opt-in and not get it by default...

The other starter with DLL's is super complicated with one huge config that is very hard to understand...

There's a balance...",shlomiassaf,colinskow
1330,2017-01-04 10:29:02,"> In short, yes we will add DLL support in the future but as stated above we will have to rewrite most of the webpack configs to provide the proper development experience 

Wait what @d3viant0ne? https://github.com/AngularClass/angular2-webpack-starter/tree/v6 

I'm honestly confused by this repo. The V6 branch is based on https://github.com/qdouble/angular-webpack2-starter which is at the moment one of the best starters when you want both AOT and DLLs. V6 was more tidy though, cleaned up, a little better file structure, typescript used in configs etc. a pretty good start, and the best thing was that it was using using @ngtools/webpack, so it was less hacky than qdouble's starter. There were couple of issues(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-257735362) mostly with @ngtools/webpack, which kinda blocked it, most of them are now resolved though.

So what's the problem with going forward with that branch and finish it? Sometimes I feel like AngularClass's members never talk to each other, let alone to the community when it comes to plans or organization. I'd be more than willing to help finish it, if I at least knew what your plans are, what you feel is wrong with it or whatever, asked twice(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-267594608 & https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-269942568) didn't get any answer. 

@katallaxie @gdi2290 @shlomiassaf @colinskow 

// edit

Found this https://github.com/katallaxie/angular2-preboot which looks like updated version of the V6 branch. So what exactly is the problem here?",fxck,d3viant0ne
1330,2017-01-04 10:29:02,"> In short, yes we will add DLL support in the future but as stated above we will have to rewrite most of the webpack configs to provide the proper development experience 

Wait what @d3viant0ne? https://github.com/AngularClass/angular2-webpack-starter/tree/v6 

I'm honestly confused by this repo. The V6 branch is based on https://github.com/qdouble/angular-webpack2-starter which is at the moment one of the best starters when you want both AOT and DLLs. V6 was more tidy though, cleaned up, a little better file structure, typescript used in configs etc. a pretty good start, and the best thing was that it was using using @ngtools/webpack, so it was less hacky than qdouble's starter. There were couple of issues(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-257735362) mostly with @ngtools/webpack, which kinda blocked it, most of them are now resolved though.

So what's the problem with going forward with that branch and finish it? Sometimes I feel like AngularClass's members never talk to each other, let alone to the community when it comes to plans or organization. I'd be more than willing to help finish it, if I at least knew what your plans are, what you feel is wrong with it or whatever, asked twice(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-267594608 & https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-269942568) didn't get any answer. 

@katallaxie @gdi2290 @shlomiassaf @colinskow 

// edit

Found this https://github.com/katallaxie/angular2-preboot which looks like updated version of the V6 branch. So what exactly is the problem here?",fxck,colinskow
1330,2017-01-04 10:29:02,"> In short, yes we will add DLL support in the future but as stated above we will have to rewrite most of the webpack configs to provide the proper development experience 

Wait what @d3viant0ne? https://github.com/AngularClass/angular2-webpack-starter/tree/v6 

I'm honestly confused by this repo. The V6 branch is based on https://github.com/qdouble/angular-webpack2-starter which is at the moment one of the best starters when you want both AOT and DLLs. V6 was more tidy though, cleaned up, a little better file structure, typescript used in configs etc. a pretty good start, and the best thing was that it was using using @ngtools/webpack, so it was less hacky than qdouble's starter. There were couple of issues(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-257735362) mostly with @ngtools/webpack, which kinda blocked it, most of them are now resolved though.

So what's the problem with going forward with that branch and finish it? Sometimes I feel like AngularClass's members never talk to each other, let alone to the community when it comes to plans or organization. I'd be more than willing to help finish it, if I at least knew what your plans are, what you feel is wrong with it or whatever, asked twice(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-267594608 & https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-269942568) didn't get any answer. 

@katallaxie @gdi2290 @shlomiassaf @colinskow 

// edit

Found this https://github.com/katallaxie/angular2-preboot which looks like updated version of the V6 branch. So what exactly is the problem here?",fxck,shlomiassaf
1330,2017-01-04 11:59:57,"@katallaxie what I think you should do is organize effort with the other team members and collaborators(some of which apparently don't even know that branch exits) to get it to master, as it's clearly superior to what's currently on master. Perhaps even create an issue for the community feedback about (env)configs, naming conventions etc. Me having played around with it a bit(even though it was months ago and I'd have to refresh my memory) would probably have couple of things to say.",fxck,katallaxie
1321,2017-01-04 01:04:16,"I'm all for supporting emerging libs & @shlomiassaf has other libs that are well maintained, his modal lib being the longest running iirc.

As far as this particular library, I'm going to carve out some time in the morning to add it to a branch of an existing production application before actually reviewing. I like the idea and this certainly does solve an existing problem but It's one thing to be of use in a starter and something else entirely in a large production application.

In short, I'm okay with this pending how it performs in a non-trivial setting.",d3viant0ne,shlomiassaf
1321,2017-01-04 01:22:20,"It's running in a production app at work.

I only built it because the angular-router-loader isn't really webpack friendly...

It just don't work with AOT...

Just look at the genDir defined in common, totally out of sync with the genDir in tscofig.

compiled/src/app VS compiled

Since it works you can rest assure something else won't once you get to different directory levels.

This is just the smallest problem... 

Im fine with reviewing it, I actually prefer to get feedback...  but angular-router-loader is far behind and doesn't really work in real world.. so we better of with this one

Sent from my iPhone

> On Jan 4, 2017, at 3:04 AM, Joshua Wiens <notifications@github.com> wrote:
> 
> I'm all for supporting emerging libs & @shlomiassaf has other libs that are well maintained, his modal lib being the longest running iirc.
> 
> As far as this particular library, I'm going to carve out some time in the morning to add it to a branch of an existing production application before actually reviewing. I like the idea and this certainly does solve an existing problem but It's one thing to be of use in a starter and something else entirely in a large production application.
> 
> In short, I'm okay with this pending how it performs in a non-trivial setting.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
",shlomiassaf,shlomiassaf
1321,2017-01-05 03:42:51,"@d3viant0ne @gdi2290 @colinskow I'v added some nested & multiple router samples ...

The `+detail` module loads async and then has an aux route to another async loaded module (`+child-detail`)

Also added the `barrel` module to show multiple async routes working...
The `+barrel` module loads async and then has an aux route to another async loaded module (`+barrel-detail`)

The barrel might be too much, take a loot.",shlomiassaf,d3viant0ne
1321,2017-01-05 03:42:51,"@d3viant0ne @gdi2290 @colinskow I'v added some nested & multiple router samples ...

The `+detail` module loads async and then has an aux route to another async loaded module (`+child-detail`)

Also added the `barrel` module to show multiple async routes working...
The `+barrel` module loads async and then has an aux route to another async loaded module (`+barrel-detail`)

The barrel might be too much, take a loot.",shlomiassaf,colinskow
1321,2017-01-05 21:58:39,"@shlomiassaf - I spun up a Windows VM, it works fine.",d3viant0ne,shlomiassaf
1321,2017-01-19 19:58:56,"@shlomiassaf I have 500+ lazy routes in my app and I have strange issues - it compiles fine, however when I run the project half of modules cannot be found (runtime error),.

Here is how one of not working routes file look like:



These routes are inside lazily loaded module.

All modules have correct paths and exist in their directories.
However when I run and navigate throw them I have runtime error looks like this:

`Cannot find module 'modules/content-modules/photo/component/page/photo-list-shared-page/PhotoListSharedPageModule'.`

Again, its runtime error, non compilation/webpack level.

Some of these submodules are working, some of them are not. If I change order of routes in this list, some of them may work, some may broke.

Here is dist output:



As you can see some of modules are resolved, some of them are not.

Everything works with previous `'angular-router-loader?loader=system&genDir=compiled/src/app&aot=' + AOT` setting.

I can show you this issue in my project via call if you want.",pleerock,shlomiassaf
1321,2017-01-19 21:07:12,"@pleerock please follow the advice from @d3viant0ne and open in the `ng-router-loader` repository.

While you do that please make sure to reference to a GitHub project which I can clone and reproduce myself.

It's doesn't have to be 500+, just something that shows the same error.

Some rule must apply here, on top of my head I can think of 5 different reasons, so I need something to debug.

I will put in effort to solve this for you but you need to help me with reproduction.
",shlomiassaf,d3viant0ne
1321,2017-01-20 20:57:38,"@pglazkov @pleerock   

  - What node version are you using?

  - Are you using windows?

I tried with 1000 ngModules and couldn't reproduce it...

@pglazkov I saw that your application (with reference to this issue) is actually using the same setup as the starter... 

So the integration tests in Travis for this repository should fail from time to time....
@d3viant0ne is this the case?

I'm really trying to get to the bottom of this...",shlomiassaf,d3viant0ne
1321,2017-01-21 01:07:02,@shlomiassaf - I wonder if we are running into some sort of resource contention / race condition issue,d3viant0ne,shlomiassaf
1321,2017-01-21 03:47:27,"@d3viant0ne The problem described by @pglazkov @pleerock fit's an issue that might happen with the older implementation (non AST).

The old process used regex with replace to transform the code.
On a module, if multiple lazy routes were set the old process had to take each and replace it.
Before replacing we need to resolve the actual file, this is an async process.
So since each ""replace"" is **async** I had to store the whole module code in memory and each replace that returned did the actual replace on that in memory ""source"".

The problem described above shows that some lazy paths were not replaced, which might indicate some race condition but I couldn't reproduce it, I tried 2000 lazy modules, no luck.

What's more confusing is that **async** is not a parallel, every instruction runs alone in the vm so I don't really understand what happened there.

My best guess is that it happens on win machines.

Anyways, I decided to refactor and use AST which is more accurate. I also made sure all changes happens sync.

You can take a look in [this branch](https://github.com/shlomiassaf/angular2-webpack-starter/tree/ng-router-loader-2000-lazy-modules), 2000 lazy modules, works for me.
It won't work on aot... see last issue why I think it doesnt work.",shlomiassaf,d3viant0ne
1321,2017-01-21 04:02:33,"@shlomiassaf I was not happening only on windows machines. I have been having theses errors from time to time. No pattern that I can see just some random modules lost during compile time. It happens in production, dev, aot.

Most times work fine, some time fails, re run and its ok...
Working with macOS, node 6.

Will keep an eye with the 2.1.0 and will let you know if problem persists. Advise to leave the issue open for a week or so as this is really random.",JonnyBGod,shlomiassaf
1321,2017-01-21 10:30:22,"thanks @JonnyBGod, @shlomiassaf looks like its working now",pleerock,shlomiassaf
1321,2017-01-21 14:51:59,"@shlomiassaf Sorry for a late reply. Here are the answers to your questions:

- Node Version: 6.9.4
- Yes, I'm using Windows

I would be glad to help with reproducing the issue, but, as I said before, I couldn't find any ways to reproduce it consistently. Indeed, it looks like some kind of race condition. 

I will try 2.1.0 for a few days and will let you know if it fixes the problem. ",pglazkov,shlomiassaf
1321,2017-01-21 15:08:33,"@shlomiassaf As for why the integration tests in Travis for this repository don't fail from time to time, maybe that's because the e2e tests don't cover the lazy routes? 
As far as I can see, the e2e test just checks some stuff on the home page, but when the lazy routes are not compiled correctly the home page still loads and works fine, but there are runtime JS errors when routes are being pre-loaded. ",pglazkov,shlomiassaf
1321,2017-01-23 22:24:20,@shlomiassaf All good for me until now. Apparently it is fixed.,JonnyBGod,shlomiassaf
1310,2016-12-30 09:43:54,"@shlomiassaf  : You are correct, this happens also in my case, the scss files are being loaded directly through the component's styleUrls. 

An Idea would be to configure the `test: /\.scss$/` rule to work with `""extract-text-webpack-plugin"": ""^2.0.0-beta.4"",` so we can extract css files into the components' dirs and change our `templateUrl` reference to point to this? 



",feddyups,shlomiassaf
1307,2016-12-28 22:54:59,"@gdi2290 Your fault.

 got me excited about AOT then my SCSS -> postCSS chain wouldn't work... ",shlomiassaf,gdi2290
1307,2016-12-28 23:08:37,@shlomiassaf any idea why there is a ci error?,gdi2290,shlomiassaf
1307,2016-12-28 23:11:44,"@gdi2290 Something in node 5...



i'll check in my local setup, I have v5",shlomiassaf,gdi2290
1307,2016-12-28 23:22:39,"@gdi2290 ok, my bad...

I forgot to `require('reflect-metadata');`, it's in 6 not in 5
Will fix and post.",shlomiassaf,gdi2290
1307,2017-02-15 13:22:58,"@shlomiassaf this is awesome, thx a lot",tsm91,shlomiassaf
1305,2016-12-29 02:46:04,It is fine that this is closed.  I thought you should be warned that this behavior does exist for some particular configurations.  Which configurations... who knows. ^_^  Cheers my friend @katallaxie ,ZenSoftware,katallaxie
1304,2016-12-28 23:41:56,"@colinskow I used a different take on this.

I used a convention to identify global SCSS files: `some-style.global.scss`

Then a loader:


> The component SCSS loader must also `exclude: [/\.global\.scss$/],`

Now all `*.global.scss` files are set in the head.

This is of course not a separate file for styles but it differentiates between global and component local styles.


Now, for having styles in a separate file, this is something I think the developer should decide.

I think we should put the extract plugin to target 1 file, all other files the dev wants to include he should import from that main (and not from JS code).

If he imports from JS code it goes to the head.

**My reasoning about this is that if all styles are in 1 directory it's far more logical to import them all from one file inside that directory, similar to an `index`file in a package/module/barrel.**

I see this directory as the `theme` for the app, plus it's more aligned with SASS `@import`s...

I have a problem with style imports scattered around the project, it's hard tracking their order and that's important for CSS.",shlomiassaf,colinskow
1304,2017-01-04 00:43:25,"@d3viant0ne it doesn't appear we have any disagreements with this PR. @shlomiassaf suggests using the naming convention `*.global.scss` for external stylesheets, but I believe this is not necessary with everything in the `src/styles` directory.

I suggest we merge this so I can start working on other enhancements like DLLs without having to rebase.",colinskow,shlomiassaf
1304,2017-01-04 01:16:53,"1.) Rebase it.

2.) As far as conventions go, they are much like words in scrabble. `Common Use`

In this case, I think it would be best to not enforce conventions on people. If a developer wants to do something like @shlomiassaf is suggesting, they can extend the project as they see fit.

The most common way I have seen / used in regards to scss and 3rd party styles would be to use `@import` in something like `main.scss / styles.scss` at the root of a project or styles directory.

Keep it simple & let the developer make his / her own decisions on conventions.",d3viant0ne,shlomiassaf
1303,2017-01-03 21:57:14,"same question for recent v5.2.0 Release.
@colinskow you referenced comment [#696](https://github.com/AngularClass/angular2-webpack-starter/issues/696#issuecomment-226442566), but in there's also use of non existing vendor.ts.

Is there any current, v5.2.0 compatible guide to easily integrate jquery+bootstrap (3.3.7 or 4) into this Seed? ",basst314,colinskow
1303,2017-01-31 18:50:38,"@colinskow so we juste have to install bootstrap and jquery and the js files for both will automatically be included? As stated by @blackholegalaxy Angular-CLI provide simple styles and script part in angular-cli.json which is somehow translated in webpack instruction.

I'm quite surprised angular class started doesn't provide such a simple way to include external css and js. The same question as bootstrap and jquery could apply to bootstrap-select module for example or font-awesome.",psaussure,colinskow
1300,2016-12-27 03:31:01,"@stevenjob / @colinskow - I'll merge yours as it is, then Steven can rebase & rename the component as discussed above.",d3viant0ne,stevenjob
1300,2016-12-27 03:31:01,"@stevenjob / @colinskow - I'll merge yours as it is, then Steven can rebase & rename the component as discussed above.",d3viant0ne,colinskow
1299,2016-12-25 03:27:53,"@colinskow - See #1241

This is not something that should be on by default but opt in should a developer choose or need to push production sourcemaps.",d3viant0ne,colinskow
1298,2016-12-25 03:29:13,"@colinskow - I'll take a look at this in the morning.

//cc @gdi2290 @katallaxie should also take a look",d3viant0ne,colinskow
1298,2016-12-25 06:14:55,"@d3viant0ne `tsconfig.webpack.json` is correctly named. This is used by `awesome-typescript-loader` to run dev, production, and aot builds. It uses the es2015 module format in order to enable tree shaking.

Karma and other node libraries can't deal with es2015 modules and must use commonjs. That is why I forked the file. One for Webpack's internal use. The other for everything else.",colinskow,d3viant0ne
1298,2016-12-27 03:13:25,"@katallaxie - AOT should not be the default for `prod` for exactly what @colinskow stated, it breaks things. After a developer has his application running stable on AoT, he or she can default it to AoT in their project. We should be enabling features in a starter, not mandating them.

Given the commitment required to create a large application published AoT, this is a feature that should be off by default & opt in or it's going to break every production build this starter backs when they pick up the changes.",d3viant0ne,colinskow
1298,2016-12-27 10:07:27,"@colinskow I get your point. Though, I believe it should be considered best practice to have AoT and deviate from that. So, if you have an application, that for what ever reasons, doesn't work with AoT then you can disable it. But I would see it the other way around. As regarding to `@ngtools/webpack`, I had doubts some months ago, that's why it wasn't in the `aot` branch. Though, I see it as the tool of choice in the long run. You have less boilerplate code, better integration with what Webpack does and better code quality.",katallaxie,colinskow
1298,2016-12-27 10:13:07,"@d3viant0ne Because we had some deps fixed, we should take care of them now. We should also update `webpack` to `2.2.0-rc.2` and `webpack-dev-server` to `2.2.0-rc.0`. As for the bundle analysis.",katallaxie,d3viant0ne
1297,2016-12-29 02:07:03,"@sshev @d3viant0ne This is a tricky one... any clues?
",shlomiassaf,sshev
1249,2016-12-12 03:40:48,"In addition to @d3viant0ne 's [commit](https://github.com/AngularClass/angular2-webpack-starter/commit/6193e308f29c82f3cbda4395f487a111a10f7e48#diff-b9cfc7f2cdf78a7f4b91a753d10865a2) of 9-Dec, I had to set `""@angular/forms"": ""2.2.1""` (use to be `^2.2.1`, which brought me `v2.3.0`). As I forked `angular2-webpack-starter` before [that commit](https://github.com/AngularClass/angular2-webpack-starter/commit/306672798cf5865037ccba37ac7aa4feb89c2110#diff-b9cfc7f2cdf78a7f4b91a753d10865a2) of 23-Nov, it was `^2.2.1` just for the `@angular/forms`.

So my full fix was:

1. Modified `package.json` to set:

- `""typescript"": ""2.1.1""` (use to be `^2.0.6`, which brought me `v2.1.4`)
- `""@angular/forms"": ""2.2.1""` (use to be `^2.2.1`, which brought me `v2.3.0`, when other `@angular/` were `2.2.1`). As an alternative, you can make them all `^2.2.1` and it will work again as all `@angular/` versions will be aligned.

2. Deleted corresponding folders in `node_modules` and ran `npm install`. For some reason, running `npm install` straight away didn't work (something was cached?).

",AKlaus,d3viant0ne
1248,2016-12-09 16:14:43,"@naivefun - There are quite a few ways to implement cache busting. I personally roll with something like this but I also have a moderately complex caching setup between my app, docker containers & nginx.



Point being, this is one of those things that is really dependent on exactly what you are trying to achieve and how you are setup. Any way it goes, you will need `WebpackMd5Hash` as @karolmie1  mentioned.

It's also worth noting that what I run in production isn't based off the starter, so just grabbing that snippet isn't going to work ( just an example ).

I highly suggest reading https://webpack.js.org/guides/caching/ more than once and then start hacking on your project. Caching is one of those things you can get ""kind of right"" and end up with weird results.  

You are going to want to understand your own caching implementation completely as it pertains to your app & the deployment stack it is running on. Docs + Trial and error is the best way to get there imo.",d3viant0ne,karolmie1
1236,2016-12-05 04:47:06,Thanks @brandonroberts ,d3viant0ne,brandonroberts
1232,2016-12-09 12:35:00,"@karolmie1 
Yes, that's what I want to implement as a solution.

@romelgomez 
I don't use Material but Materialize with [angular2-materialize](https://github.com/InfomediaLtd/angular2-materialize). On the other hand, I will use the solution for Font Awesome, thanks.",NatsuOnFire,karolmie1
1226,2016-11-30 21:21:09,"@katallaxie - The yarn.lock was removed by @gdi2290. The ignore for yarn is also at his request.

It has also been removed from the travis build. There is no need for yarn in the base seed, if people want to use it in their personal projects adding it is simple.",d3viant0ne,katallaxie
1226,2016-12-01 07:23:39,"@d3viant0ne Yeah It is really bad idea. yarn.lock is like one of the most important reasons to use yarn. 
I very often had this problem - I've downloaded old repo from github and I started to fire it up, but I couldn't manage to get it working, because author used older version of npm packages and the project won't compile anymore. (this also happend to me on material2 branch here if I remember correctly)

yarn.lock is essential to not allow this to happen.

It may make pull requests and diffs ugly though.
Worry not, there is better solution than to remove it altogeter!

.gitattributes:
yarn.lock -diff

yarn.lock will be treated as binary from now on, won't be shown in difs and counted in lines changed if you care about such statistics. ",karolmie1,d3viant0ne
1226,2016-12-01 07:30:25,"@d3viant0ne yep! you can remove it, but you should not `.gitignore` it, as people really use it in their projects.",katallaxie,d3viant0ne
1226,2016-12-01 07:32:20,"@katallaxie I will create a pull request with .gitattributes solution in a moment, you can check if you like it.

Damn, it works in local console, but it does not work on github, and there is no way to make it work :( ",karolmie1,katallaxie
1220,2016-11-29 08:09:35,"Thank you @diegochavez!  

I already know about this solution. I was just asking myself if there is a way to only include the ""bootstrap.min.css"" because I just use bootstrap grid structure and other css classes. I don`t really need bootstrap.min.js or even jQuery, which increase the size of my application.",jScope,diegochavez
1207,2016-11-25 09:43:42,"@d3viant0ne Yes the documentation is good so far, but small complete working examples are helping more than the documentation. The documentation is cool to get a more specific overview and you can extend the simple example with some more configuration.

Or Examples for some ng2 specific problems like TemplateUrls (I try to get this working since two days now and I can't get it to work) or how to compile TypeScript, ....",squadwuschel,d3viant0ne
1203,2016-11-25 02:01:05,"@tieppt @d3viant0ne   Yes,it's CORS.I want to send a cross-domain request.Is there a place to configure the proxy?Like [this](https://vuejs-templates.github.io/webpack/proxy.html)",mlyknown,d3viant0ne
1199,2016-11-23 18:39:31,"@maxx0r  @d3viant0ne
Angular Material integration is quite straight forward.

Saying that, if you are using bootstrap loader and saas loader like, it's very easy to include material scss.

in **.bootstraprc** add the below line.

`appStyles: PATH_TO_YOUR_APPLICATION_SCSS`

and in your **APPLICATION_SCSS** add the material theme imports. You can use any theme here.

`@import '~@angular/material/core/theming/prebuilt/pink-bluegrey.scss';`

But I am wondering, is there any way to choose the themes dynamically?",Abhijith-Nagaraja,d3viant0ne
1199,2016-11-28 17:29:08,"@d3viant0ne I would also rather have this as a wiki article, having to pull master in every couple of weeks is tedious and error prone and all of the content that is in the branch can be contained in an article instead. @gdi2290 if you don't have objections I'm gonna go ahead with this.",ebeal,d3viant0ne
1199,2016-11-28 19:25:18,@ebeal - Pull the trigger. Maintaining that branch given how little effort is actually needed to enable Material2 is just silly.,d3viant0ne,ebeal
1199,2017-01-25 21:35:45,"@katallaxie because of this you just lost a developer, I've migrated to react :) if starter takes so much time to start, and don't have even integrated materials, and instructions are insanely complicated (i've got a lot of issues with it), I decided to move somewhere else. Have fun to ignore simplicity.",holms,katallaxie
1198,2016-11-23 22:26:59,"@Spittal I did check the  [postcss-loader](https://github.com/postcss/postcss-loader) github page before, but I put the **postcss.config.js** in the config folder. So that's why it didn't work.",DanielYKPan,Spittal
1188,2016-11-21 21:41:13,@gdi2290 - I'll see to this after work,d3viant0ne,gdi2290
1188,2016-11-22 19:51:24,"As a temporary work around, lock `istanbul-instrumenter-loader` to `0.2.0` until I can get a fix for this landed in master.

//cc @Nocomm  @rgeraldporter @M1strall @centigrade-thomas-becker @adonespitogo @alvipeo ",d3viant0ne,centigrade-thomas-becker
1188,2016-11-22 20:32:19,@d3viant0ne thanks for looking into it,gdi2290,d3viant0ne
1188,2016-11-24 07:38:51,"@centigrade-thomas-becker - I've evidently deviated too far from the starter where that change was effective. Working this issue again against current master.
",d3viant0ne,centigrade-thomas-becker
1188,2016-12-11 12:46:59,"@d3viant0ne I would **reopen** this ticket since the problem is not solved, it's just a workaround.

Its a good reminder for upgrading when possible.

Your call.",shlomiassaf,d3viant0ne
1179,2016-11-20 19:11:47,"can one you @NatsuOnFire @opporancisis update the rest of the readme etc to reflect the changes? (it doesn't have to be all of them. I'll merge anything that's correct) thanks!
",gdi2290,opporancisis
1177,2016-11-25 08:32:57,Thanks @clementprevot ,d3viant0ne,clementprevot
1174,2016-11-15 08:34:25,"@gdi2290 Thanks! 
",cappelleMedia,gdi2290
1169,2016-11-20 14:10:20,"Hi @katallaxie! Not sure what you mean about v6. The v6 branch has the same AppState in AppComponent as the master branch. So do you normally just make a new file for store to bring in ngrx/store and then a new file for actionCreators? Will this still work fine with the Hot Module Replacement? Thanks. :)
",JimTheMan,katallaxie
1156,2016-11-06 14:49:23,"@Andrey-Pavlov I´m currentry struggling to do this right... Can you please share some guidance?
",kjartanvalur,Andrey-Pavlov
1156,2016-11-07 04:08:05,"@Andrey-Pavlov thank you so much for doing the leg-work on this.

Updating `webpack.common.js`'s `LoaderOptionsPlugin` was ineffective for me, I also had to update `webpack.dev.js`'s `LoaderOptionsPlugin` for dev, and I'm assuming the prod config as well.
",sky-coding,Andrey-Pavlov
1156,2016-11-07 14:49:00,"Well done @Andrey-Pavlov 👍 
",kjartanvalur,Andrey-Pavlov
1156,2016-11-11 14:58:10,"I've managed to get rid of the issue by following @Andrey-Pavlov steps, but when using the `npm run server:dev` command I get: (sorry for the long dump)



Any clues? I'm so lost!
",byhoratiss,Andrey-Pavlov
1156,2017-02-06 12:39:52,"I fixed it for my setup with @vadhavkar‘s [comment](https://github.com/AngularClass/angular2-webpack-starter/issues/1156#issuecomment-273676734) and changed @Andrey-Pavlov‘s [example](https://github.com/AngularClass/angular2-webpack-starter/issues/1156#issuecomment-258688658). I added **-loader** to all **exports** like this:

    new webpack.ProvidePlugin({
        $: ""jquery"",
        jQuery: ""jquery"",
        ""window.jQuery"": ""jquery"",
        Tether: ""tether"",
        ""window.Tether"": ""tether"",
        Tooltip: ""exports-loader?Tooltip!bootstrap/js/dist/tooltip"",
        Alert: ""exports-loader?Alert!bootstrap/js/dist/alert"",
        Button: ""exports-loader?Button!bootstrap/js/dist/button"",
        Carousel: ""exports-loader?Carousel!bootstrap/js/dist/carousel"",
        Collapse: ""exports-loader?Collapse!bootstrap/js/dist/collapse"",
        Dropdown: ""exports-loader?Dropdown!bootstrap/js/dist/dropdown"",
        Modal: ""exports-loader?Modal!bootstrap/js/dist/modal"",
        Popover: ""exports-loader?Popover!bootstrap/js/dist/popover"",
        Scrollspy: ""exports-loader?Scrollspy!bootstrap/js/dist/scrollspy"",
        Tab: ""exports-loader?Tab!bootstrap/js/dist/tab"",
        Util: ""exports-loader?Util!bootstrap/js/dist/util""
    })",DerZyklop,Andrey-Pavlov
1155,2016-11-07 07:54:48,"@katallaxie I have checked this again after your changes but error is still coming so i have made pull request #1158 to solve it.
",ranakrunal9,katallaxie
1154,2016-11-05 20:49:08,"@katallaxie Great tip.  Commenting out `.catch(err => console.error(err));` from `main.browser.ts` surfaced the original errors in their full glory.  I think this change should be included in v5 and v6.  Many people are using this starter project.  Unhelpful error messages make people think Angular 2 is to blame, which it is not.
",baloodevil,katallaxie
1148,2016-11-03 08:24:40,"@d3viant0ne Ah, I see. Thanks for the reply back. Awesome boilerplate btw 
",laumair,d3viant0ne
1143,2016-11-04 09:16:43,"ok thanks @katallaxie 
",kjartanvalur,katallaxie
1139,2016-10-29 17:36:35,"@d3viant0ne Awesome - thanks, that has fixed it. Although not working for .svg? I tried changing to:



but that didn't work. How shoudl I fix that?
",georgeedwards,d3viant0ne
1137,2016-10-30 09:00:39,"There is nothing about this in console, project starts success without any error.
I used the navbar component of Bootstrap 4, the items of nav's menu display well, but when collapsible button appeared there is no icon in the button, there is only a button frame display in the collapsible area. When I clicked it can slide down the hidden menu.
And the navbar's 'float-lg-right' class not worked either.
Thanks. @d3viant0ne 
",hllinc,d3viant0ne
1137,2016-10-30 09:50:52,"Oh, no!!!!
I used the wrong version of bootstrap 4.
The api document of bootstrap is v4-5, but the version I installed was v4-2. 
I can't find the api doc of v4-2 in bootstrap official website.
Finally I changed the version to v3.3.7 and solved it .
Thank to @d3viant0ne again.
",hllinc,d3viant0ne
1135,2016-10-28 01:23:37,"@d3viant0ne i swiched to node@v6.4.0 but still not work 
",bigggge,d3viant0ne
1134,2016-11-20 10:15:18,"@katallaxie thanks, but what about shrinkwrap? It does not work for npm@3.
",aleksfes,katallaxie
1133,2016-11-21 08:22:51,"@katallaxie, maybe I didn't explain the issue properly. Indeed, polyfills content isn't changed in this case. But reference map is changed. And this map happens to be stored inside polyfills file with current webpack configuration. 
Anyway, I don't expect this to be fixed as part of starter project. This is a webpack-related bug. To be precise it is webpack-md5-hash bug (erm0l0v/webpack-md5-hash#7). 
To overcome the issue I decided to use [hash] instead of [chunkhash] for webpack output. Obviously it will force clients to invalidate each module after application release/build. But it is better than not invalidating content at all and it is temporary solution while the bug isn't fixed.
",ilyahumbar,katallaxie
1129,2016-10-25 23:28:59,"@gdi2290 👍 is included. We should also use it in `.travis.yml` https://yarnpkg.com/en/docs/install-ci#travis-tab
",katallaxie,gdi2290
1129,2016-10-25 23:39:17,"@gdi2290 #1130 
",katallaxie,gdi2290
1129,2016-10-29 23:13:51,"@gdi2290 @katallaxie - Can we close this one, looks like we are all yarned up :)
",d3viant0ne,gdi2290
1129,2016-10-29 23:13:51,"@gdi2290 @katallaxie - Can we close this one, looks like we are all yarned up :)
",d3viant0ne,katallaxie
1122,2016-12-28 01:17:54,@shlomiassaf  I'm having issues with importing global styles into the vendor bundle,davidalee,shlomiassaf
1122,2016-12-28 01:27:58,"Vendor bundle was removed... 

Sent from my iPhone

> On Dec 28, 2016, at 3:17 AM, David A. Lee <notifications@github.com> wrote:
> 
> @shlomiassaf I'm having issues with importing global styles into the vendor bundle
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
",shlomiassaf,shlomiassaf
1122,2016-12-28 17:24:11,Unit test definitely shouldn't be dependent on style sheets any more than they should depend on data. @colinskow is correct in his test implementation.,d3viant0ne,colinskow
1121,2016-10-27 15:47:41,"Hey @d3viant0ne , I actually did realize that! I also realized after writing what
I should mention it, but was caught up at the time :) 

That being said, would you be interested in open sourcing the your personal repo that has ngrx and scss. I would be more than interested in maintaining. Regardless, I am going to go ahead and create a ngrx/scss version of this repo. Thank you. 

On Oct 27, 2016 1:16 AM, ""Joshua Wiens"" notifications@github.com wrote:

> @CharlieGreenman https://github.com/CharlieGreenman I wasn't
> necessarily suggesting you contribute to a different repo.
> 
> To be clear, I was suggesting you create a fork of this repo and modify it
> to run ngrx as an example / base seed for those that want to get into redux.
> 
> Nathan's advanced seed is great but it's based on SystemJS, if you want to
> use Webpack ( my personal choice ) that is going to be a big change. I've
> looked at the angular-webpack2-starter it's solid work but imho it's a
> bit cluttered for my taste.
> 
> In the end I personally forked this repo & added ngrx, scss & material2
> and it's maintained independently at this point.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/AngularClass/angular2-webpack-starter/issues/1121#issuecomment-256548555,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AIJP7RAUNlpJ4JA559DVTlsnQMJs3HIkks5q4DOrgaJpZM4KeB-8
> .
",CharlieGreenman,d3viant0ne
1118,2016-11-21 20:02:51,"@gilhanan Yes, I did.",rafaelss95,gilhanan
1118,2016-11-21 20:12:42,"Thank you all guys, I copied  the fonts as @RaphaelYan said and now it's working.

      new CopyWebpackPlugin([
        { from: 'src/assets', to: 'assets' },
        { from: 'src/meta'},
        {
          from: 'node_modules/font-awesome/css/font-awesome.min.css',
          to: 'assets/font-awesome/css/font-awesome.min.css'
        },
        {
          from: 'node_modules/font-awesome/fonts',
          to: 'assets/font-awesome/fonts'
        }
      ]),",rafaelss95,RaphaelYan
1114,2017-01-12 18:52:30,"@d3viant0ne true, I'm just desperate for answers!",sachanacar,d3viant0ne
1114,2017-01-12 19:06:08,"@d3viant0ne thanks, I'll try to convince the team!",sachanacar,d3viant0ne
1111,2016-10-20 11:09:26,"@d3viant0ne Awesome, thanks, let me know how it goes.
",jakub2,d3viant0ne
1111,2016-10-24 02:46:16,"yo @d3viant0ne any update on this?
",gdi2290,d3viant0ne
1111,2016-10-24 07:39:25,"@gdi2290 - The issue @jakub2 & @adstep are seeing, I can't reproduce. 
On a fresh install of Windows 10 running a fresh install on Node v6.9.1, everything works fine.

The error that @jakub2 mentions tries to install `execSync`, fails & then falls back to win32 `Will try to use win32 extension`

The seed itself installs, compiles & functions as expected.

![screen shot 2016-10-24 at 4 35 06 am](https://cloud.githubusercontent.com/assets/8420490/19640658/5c3feaea-99a3-11e6-98c1-064582fb4144.png)
",d3viant0ne,gdi2290
1105,2016-10-16 21:02:24,"I can do that. I guess that it's better that it's clear where the rules come from, if there are coming from external plugin. 

@katallaxie I'll try to explain myself with a use case: If someone want to add another set of linting rules from other source, says `tslint-eslint-rules`, those rules would be grouped in a external file, ex: `eslint.tslint.json`, in the `config/tslint/` foler, and just extends those set of rules. With this everybody know where exactly the rules are coming from and where to ask if some rule it's being misused or something.
",michaeljota,katallaxie
1105,2016-10-17 12:49:51,"I see your point. I have a question then, should the recommended rules still explicitly be available or should they be extended?

@katallaxie  I have not update this, as I want to know the above information. But I think, you already had update partially this. 
",michaeljota,katallaxie
1104,2016-10-27 01:18:44,"Agree with @katallaxie - This doesn't belong in a `starter` repo. Electron, although something I really like is situational at best. This is a great idea but just not something that belongs in this repo.

My suggestion would be to go the route that @NathanWalker with https://github.com/NathanWalker/angular-seed-advanced

Fork the starter, make your additions & squash them into a single commit to make it easier to pick up changes from upstream and once it's in good shape, I'm sure @gdi2290 wouldn't have an issue with adding a link to the README.md to make it easier to find your version of the `advanced starter`
",d3viant0ne,katallaxie
1092,2016-10-17 16:02:30,"@katallaxie thanks for the update, and removing shrinkwrap as per that commit you referenced should definitely fix the version change. But maybe a little too quick to close the issue. There seems to be nothing in that commit that fixes the issue described in the original post by @bfwg?
",russelltrafford,katallaxie
1091,2016-10-15 08:53:28,"@dherges Some of the things suggested in style guides etc. are just taste.
",katallaxie,dherges
1082,2016-10-04 03:29:48,"Thanks for your answer @dweitz43. What's the branch specifically for material integration?
",rafaelss95,dweitz43
1082,2016-10-27 01:55:28,"Closing this one. The material2 branch, although out of date is sufficient to add material2 to the advanced seed as is @dweitz43's fork.
",d3viant0ne,dweitz43
1059,2016-10-27 01:23:42,"As @dweitz43 pointed out, material2 branch needs work before any versions are updated. 

I'm going to nuke the branch, recreate it & then add Material2 as a single commit in a way that makes the maintenance a bit less cumbersome.
",d3viant0ne,dweitz43
1049,2016-09-26 09:36:33,"@harunurhan you remove @types/corejs,will lead to WebStrom display error.because i use webstrom
",Loongle,harunurhan
993,2016-10-19 14:29:55,"@Simon-Briggs Regarding the changes you suggest, could you clarify exactly where the files are that are supposed to be changed?
Thanks!
",Mellbourn,Simon-Briggs
993,2016-10-21 17:12:12,"@Simon-Briggs I'm using Angular-CLI, so there is no config folder.
",Mellbourn,Simon-Briggs
993,2016-10-26 15:16:32,"@Simon-Briggs Not sure what I'm doing wrong, but by adding your solution to my webpack.common.js, so I have:



I still get:



When running my tests...
",georgeedwards,Simon-Briggs
993,2017-01-18 17:56:23,@d3viant0ne how is this no longer relevant? I'll be honest I'm not using angular2-webpack-starter but I am seeing this error and the plugin solution has worked well for me (though it seemed like a hack). Is this resolved in a better way now? I just pulled all the latest modules from npm.,adam-beck,d3viant0ne
993,2017-03-17 08:01:34,"@d3viant0ne This seems still relevant. I'm getting this now, and its over 6 months since reported.
This issue is caused by webpack being unhappy with dynamic imports. The Webpack team states that this is by design:
https://github.com/webpack/webpack-dev-server/issues/212#issuecomment-242449586

Are the dynamic `System.import` calls (as called out above on lines 45 and 57) absolutely necessary? Having to shut off a highly recommended piece of webpack feels hacky. I know this is an issue not related to angular, but given that angular and webpack are so closely tied to each other I'd expect them to play nice.",dudewad,d3viant0ne
992,2016-11-14 12:44:36,"As @Andrey-Pavlov said, it's a bug in TSLint, it had been reported. However, it only will be fixed in 4.0. So you can update using `npm install tslint@next` or remove the rule, cause the 3.x branch won't get the fix for this. 

My recommendation, if you use TypeScript 2.0.x you should upgrade, cause the 4.0 it's being update to this compiler. 
",michaeljota,Andrey-Pavlov
981,2016-10-27 01:31:12,"I agree with @katallaxie, this is something that should be documented and not added.
",d3viant0ne,katallaxie
981,2016-10-31 17:45:23,"@d3viant0ne Pat actually wanted this one in the Starter, see here: https://github.com/AngularClass/angular2-webpack-starter/issues/975
",MarkPieszak,d3viant0ne
968,2016-09-11 08:38:29,"@gdi2290 is that tool a surprise? Are we expecting an announcement like Angular 2 Team does? :)

Really looking forward for DLL usage with webpack because one of [my project](https://github.com/asadsahi/AspNetCoreSpa) rebuilds in roughly 150-250 ms compared to angular2-webpack-starter takes roughly 1-1.5 seconds on same machine. That project uses DLL concept from webpack to skip vendor files. Credit to @SteveSandersonMS 's generator what this project is based on.
",asadsahi,gdi2290
968,2016-09-23 16:55:36,"@gdi2290 could you reply to this https://github.com/AngularClass/angular2-webpack-starter/issues/968#issuecomment-246180363 please? What's the current situation with this repo now that angular2 is out? Are you busy preparing for conferences or something? Could we do something to help coordinate effort of updating and tidying up this repo? I know it interests a lot of people. :)

Thank you.

cc @DzmitryShylovich 
",fxck,gdi2290
968,2016-09-30 18:49:15,"Hello? @katallaxie @gdi2290 
",fxck,gdi2290
968,2016-09-30 18:49:15,"Hello? @katallaxie @gdi2290 
",fxck,katallaxie
967,2016-09-08 18:02:20,"That does make sense, instead of depending on that loader is best to rely on SystemJS to polyfill the `System.import` that JS is supposed to have in the future, basically getting ready for the future hoping some day we could drop the SystemJS library used to polyfill the import.

@katallaxie Is that right?
",luchillo17,katallaxie
944,2016-09-01 17:40:08,"@katallaxie there always seems to be a problem with `DedupePlugin`. I would leave a comment saying it doesn't work atm otherwise developers would be confused if they uncomment it
",gdi2290,katallaxie
938,2016-10-19 17:01:44,"Hi @gdi2290  - I also pre-ordered the Master Bundle. Any rough estimate when any of the courses will be available?
",yshterev,gdi2290
937,2016-08-31 13:28:45,"@katallaxie thank you!

The problem with the react-native-renderer approach ist, that we lose the advantage of webpack. I really like this repository as a boilerplate for angular2 apps.
",smith64fx,katallaxie
937,2016-09-01 18:35:54,"@katallaxie thx for your second proposal. but isn't there anything to consider when using webpack?
",smith64fx,katallaxie
927,2016-08-30 07:24:08,"@katallaxie i tryed,it work!
but how to set dom class for jquery dynamic added dom?
",keyiis,katallaxie
927,2016-09-08 22:00:13,"@katallaxie thx so much 💃 
",smith64fx,katallaxie
926,2016-09-09 05:55:42,"@gdi2290 well, there are lots of us...
",alvipeo,gdi2290
924,2016-08-29 19:22:18,"@katallaxie That would be great but I'll get
`Cannot find module ""~bootstrap/scss/bootstrap-grid.scss""`

EDIT: y I know its offtopic but I'm looking for some best practice scenario with this repo. Thought mixins would get injected automatically if we need them
",regenrek,katallaxie
924,2016-08-29 19:40:15,"@katallaxie yes. tried to include it in the home.component.ts. Works so far.

home.style.scss
`@import ""~bootstrap/scss/bootstrap-grid.scss"";`
",regenrek,katallaxie
915,2016-08-29 05:50:38,"@gdi2290 thanks a lot!
",dweitz43,gdi2290
912,2016-08-27 18:49:28,"@dweitz43 thank you i'll try your repo for now.
",kodeine,dweitz43
912,2016-08-27 19:13:52,"@dweitz43 your branch run without errors so far =)
btw do you know any material2 form app or something i can quickly use to make a signup form?
",kodeine,dweitz43
912,2016-09-21 06:21:21,"@dweitz43 thanks a lot for all your efforts! much appreciated!
",kodeine,dweitz43
910,2016-10-30 09:45:34,"What's missing @katallaxie ?
",fxck,katallaxie
910,2016-10-31 11:18:11,"There's a problem with those DLLs @katallaxie, when you have a vendor script that extends something like rxjs Subject(like @ngrx/store), and you don't put it inside the ""rxjs"" dll array, none of the added operators are gonna work on it. Perhaps it's just a naming / documentation problem though.  
",fxck,katallaxie
889,2016-08-26 20:26:32,"@StefH it is just the code in the [app.routes.ts](https://github.com/AngularClass/angular2-webpack-starter/blob/817ea488f6edb7f271728487d873dead72efd8b8/src/app/app.routes.ts) file

@gdi2290 Your updated fork fixed the problem. Thanks.
",IAMtheIAM,gdi2290
889,2016-08-26 20:26:32,"@StefH it is just the code in the [app.routes.ts](https://github.com/AngularClass/angular2-webpack-starter/blob/817ea488f6edb7f271728487d873dead72efd8b8/src/app/app.routes.ts) file

@gdi2290 Your updated fork fixed the problem. Thanks.
",IAMtheIAM,StefH
887,2016-11-09 14:41:38,"@gilhanan See my post above. You just require() them as I have shown in your vendors.ts file, then in your index.html you add the vendors.ts script as a normal `<script src=""vendors.ts"" type=""text/javascript"">` tag before the closing </body> tag. 
",IAMtheIAM,gilhanan
887,2017-03-10 13:53:33,@StefH did you manage to integrate with PrimeNG?,evgd,StefH
885,2016-10-19 18:25:19,"@katallaxie Thanks, are you going to merge this with master or just leave the aot part in a separate branch?
",itrethan,katallaxie
885,2016-10-25 05:28:33,"@Spittal ngtools/webpack is already there, you can find it in package.json and webpack.config.ts.

What I was pointing out is whether ngc is still relevant, since the npm script ""aot"" is not called before ""build:aot""
",unsafecode,Spittal
885,2016-10-25 09:03:35,"@katallaxie No worries - was just curious to understand whether it was still meaningful, or not.
",unsafecode,katallaxie
885,2016-10-25 13:02:55,"@katallaxie The problem with ngc is it cannot work easily work w/ Sass/Less and pre/post processing steps for HTML templates. AFAIK, it only works if all imported files are already on the filesystem when it runs, which is terribly against what webpack tries to do.
",unsafecode,katallaxie
885,2016-11-01 10:51:14,"any progress @katallaxie @unsafecode  ?
",kjartanvalur,katallaxie
885,2016-11-01 18:30:28,"@katallaxie That would be ideal for me, I am really interested in merging v6 into my production apps that use postcss to process styles, which currently isn't support by ngc.
",Spittal,katallaxie
885,2016-11-01 18:59:07,"@katallaxie can you use @ngtools and merge v6
",gdi2290,katallaxie
885,2016-11-01 21:14:14,"@gdi2290 @Spittal @qdouble @unsafecode working on `@ngtools/webpack`. I have pushed some things, more work to do. But help is always welcome.
",katallaxie,gdi2290
885,2016-11-01 21:14:14,"@gdi2290 @Spittal @qdouble @unsafecode working on `@ngtools/webpack`. I have pushed some things, more work to do. But help is always welcome.
",katallaxie,Spittal
885,2016-11-02 00:02:12,"@katallaxie some game breakers for me are
1) ViewEncapsulation.None or Emulated break the build or cause styles not to import properly: 
https://github.com/angular/angular-cli/issues/2584

2) Nested types are often not properly resolved
It's related to this TS bug https://github.com/Microsoft/TypeScript/issues/9944, however if I use my starter where I compile and build as two different processes, the bug doesn't occur

3) It strips custom decorators: https://github.com/angular/angular-cli/issues/2799

Once those 3 issues are solved, I'll switch over to it, but for now it seems like a bigger hassle to use it rather than just using the scripts to process it as separate tasks. 
",qdouble,katallaxie
885,2016-12-16 13:32:08,"@katallaxie @d3viant0ne https://github.com/angular/angular-cli/pull/3583 and https://github.com/angular/angular-cli/issues/2584 is fixed as well, so I guess v6 should be more or less ready now?",fxck,katallaxie
885,2016-12-16 13:32:08,"@katallaxie @d3viant0ne https://github.com/angular/angular-cli/pull/3583 and https://github.com/angular/angular-cli/issues/2584 is fixed as well, so I guess v6 should be more or less ready now?",fxck,d3viant0ne
885,2016-12-28 00:19:13,"@colinskow @d3viant0ne 
Did you get SCSS to compile with it?

From what I see no /:

Let me know if you don't I have a solution I'm running with.",shlomiassaf,d3viant0ne
885,2016-12-28 00:19:13,"@colinskow @d3viant0ne 
Did you get SCSS to compile with it?

From what I see no /:

Let me know if you don't I have a solution I'm running with.",shlomiassaf,colinskow
885,2016-12-28 22:11:30,"@colinskow That's not only for SCSS, that's for all resource.

CSS, LESS, SCSS or whatever, they don't go through the loader chain. 

Development output might not be the same as AOT.

I will post a PR soon with suggestion.",shlomiassaf,colinskow
885,2017-01-02 08:01:35,"Is there any issue for that V6 branch? While AOT is a nice step forwards, this starter is still obsolete without DLLs and other stuff.

@katallaxie @gdi2290 @d3viant0ne ?",fxck,gdi2290
885,2017-01-02 08:01:35,"Is there any issue for that V6 branch? While AOT is a nice step forwards, this starter is still obsolete without DLLs and other stuff.

@katallaxie @gdi2290 @d3viant0ne ?",fxck,katallaxie
885,2017-01-02 08:01:35,"Is there any issue for that V6 branch? While AOT is a nice step forwards, this starter is still obsolete without DLLs and other stuff.

@katallaxie @gdi2290 @d3viant0ne ?",fxck,d3viant0ne
885,2017-01-06 21:29:17,"@d3viant0ne say what, I'm not sure what the earlier version of that comment was, but I've long since had to move to @qdouble's starter, so I doubt I was threatening **_I_** was gonna go anywhere.

I've been advocating this starter over others for a long time and was closely following the V6 branch(which was blocked by ngtools issues at the time) which I found superior to what I'm using(as it's based on what I'm using). As soon as all the issues I knew about were resolved, I [tried](https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-267594608) getting a status update on it, didn't get any answer and instead this issue, which was the only [issue V6 was discussed at](https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-255840442), as far as I know anyway, was closed, which was what prompted my last comment, asking for whether there was, or was going to be another issue created for the V6 branch. I didn't get any reply, which is why I wrote [this](https://github.com/AngularClass/angular2-webpack-starter/issues/1330#issuecomment-270340310).

So how about you cut me a slack, I didn't mean anything offensive in the slightest sense, I'm all up for helping finish that branch but without ever getting an answer about your plans going forward, it's kind of hard.


..and yes, what is currently on master is indeed obsolete, especially at the time I wrote that comment, compared to your V6 branch. At DLLs and the way and the language configs are written in, for example. And I have no idea why should I be sending PRs while you already have a a branch with all the `other stuff` I'm talking about.",fxck,d3viant0ne
885,2017-01-07 06:47:37,@shlomiassaf cutting development build time in half with no other side effects is good for everyone.,colinskow,shlomiassaf
885,2017-01-07 07:21:12,"@shlomiassaf geez, DLLs are not even the point. The point was that there is a branch of **_THIS_** repo that already has both AOT and DLLs, is utilising @ngtools/webpack, is written a way more modern way, with all the configs being typesafe and written in typescript and all the while @AngularClass [team members](https://github.com/AngularClass/angular2-webpack-starter/issues/1330#issuecomment-270270806) and collaborators are being completely oblivious to the fact. I honestly couldn't care less, as I had to move to qdouble's starter couple of months ago because I simply couldn't proceed without AOT, but it seems like a wasted chance, time and effort to abandon that branch, unless there are reasons for it, which is what I kept asking for.",fxck,shlomiassaf
877,2016-08-22 12:26:20,"@gdi2290 what's the ETA on the move?
",fristys,gdi2290
867,2016-09-01 00:14:36,"@orizens can you make a PR explaining this for users who have problems with @types
",gdi2290,orizens
867,2016-09-01 07:01:57,"@gdi2290 sure. 
should I add it to Readme.md?
",orizens,gdi2290
845,2016-08-23 06:56:39,"@jiverson ok,Your operation is feasible.Problem has been solved.
",Loongle,jiverson
843,2016-08-10 06:48:23,"when rc5 will be updated in this project? @gdi2290   thank you
",syoubaku,gdi2290
843,2016-08-11 09:12:21,"@gdi2290 the seed repo uses webpack 2, is it planned to update this starter repo to webpak 2 as well?
",snird,gdi2290
843,2016-08-13 19:13:42,"@alvipeo , this is an open source project, given to everyone here for free. No one has to ""prove"" anything to you, and there is a way to ask questions nicely.

That said, the tone here is really harsh for some reason, so I just want to say thank you to @gdi2290 and everyone else at ""angular class"" for the awesome work here.
",snird,gdi2290
843,2016-08-14 00:03:29,"@gdi2290 I agree. I've read everything I could on NgModule and I have a strong feeling we anticipate some big changes in this area ;) It's not polished least to say.
",alvipeo,gdi2290
843,2016-08-16 14:17:26,"I have a feeling @gdi2290 is waiting for rc.6 because he knows about some breaking changes we don't... or he could just be busy with actual work. 😊 Either way I'm hesitant to update my apps until I see how's rc.5 handled in this repo. 
",fxck,gdi2290
843,2016-08-22 06:46:12,"@gdi2290 I'm confused, are you not going to update this repo yourself? Are you waiting for something, or you want to leave it to the community? I mean there seem to be quite a few changes in the angular2-seed repo, not only rc5 and webpack2, is that the go-to starter repo from now on?
",fxck,gdi2290
843,2016-08-22 22:00:36,"@gdi2290 Thanks for sharing your plans, really appreciate what you and the rest of the members are doing here. You guys simplified my life a lot and I learned a lot from these repos. Keep up the good work.
",FabioAntunes,gdi2290
843,2016-08-23 01:56:30,"@gdi2290 thank you very much. I have successfully updated to RC5 .
",syoubaku,gdi2290
843,2016-08-25 18:33:40,"Great. What's next now @gdi2290? I wonder whether I should wait for that DLL stuff before I start refactoring everything..
",fxck,gdi2290
843,2016-08-26 00:08:01,"@gdi2290 great advanced work!

I wonder if DLL's can be later on used for lazy routes/modules.
In big apps it might be useful.
",shlomiassaf,gdi2290
843,2016-09-01 21:12:37,"@gdi2290 any update on those dlls? :) 
",fxck,gdi2290
812,2016-07-26 19:01:43,"@abdulhaq-e 
thats also 2.0
",vivdkool,abdulhaq-e
812,2016-07-27 04:46:52,"@gdi2290 it solves the problem but can you please explain whats going on for my understanding.
",vivdkool,gdi2290
812,2016-08-18 00:00:13,"@gdi2290 I don't think tsconfig target pulls in typings, it's just for the compiler right? I'm not seeing this resolve the issue. Could something else be pulling type definitions? I keep running into these odd ball issues.
",borysn,gdi2290
801,2016-07-22 18:27:43,"what @abdulhaq-e said is correct. we're on ts 2.0 which can be installed via `npm run typescript@beta` that should fix your issue. feel free open another issue if you run into another one
",gdi2290,abdulhaq-e
799,2016-07-21 21:20:20,"Hi @abdulhaq-e  - that's true - but I don't even run typedoc.. and I'm getting same errors even if I uninstall typedoc..  this is so weird
",spock123,abdulhaq-e
796,2017-01-26 04:47:52,"@abdulhaq-e  how about being able to use inline sourcemaps in this case? for ""karma-remap-coverage"" reporter",bhamde,abdulhaq-e
772,2017-01-16 00:45:17,"@gdi2290 I had the same problem and i solved doing what you said. But when i am loading the page, the url automatically change to http:www.example.com/wp-content/themes/angular2-webpack-starter.

How can fix this.

Thanks :)",marsanla,gdi2290
770,2016-07-20 16:43:07,"@Martaver - Nope I am not using the HMR. I am using npm run server:dev which is actually ""webpack-dev-server --config config/webpack.dev.js --inline --progress --profile --colors --watch --display-error-details --display-cached --content-base src/"" . I am sure this is because of web pack dev server running on node but not sure what is the solution for this.
",gaurav2887,Martaver
761,2016-07-14 16:12:10,"@gdi2290 No problem, I appreciate you taking time to consider this :)

Actually, `easy-webpack` doesn't need to be used in combination with the ""magical"", external config packages that you cite above: all the configs can be inlined, it can be used as a more advanced `webpack-merge`, which as I see, you already use. 

Aurelia is recommending either RequireJS via the aurelia-cli or Webpack. JSPM is still an option, but it turned out to be just too messy at times to be used well in production.
",niieani,gdi2290
761,2016-07-14 16:51:11,"@gdi2290 I'm pretty busy ATM, but I'll add it to my backlog. :)
",niieani,gdi2290
759,2016-08-08 10:00:00,"@Martaver Did you miss svg format in your pull request ? 
",maissani,Martaver
759,2016-08-09 08:15:33,"I didn't think of it to be honest.  I can add it and send another PR easily
enough.

Any other formats you think would be good to add and handle as files?

On Mon, Aug 8, 2016 at 1:00 PM Mehdi Aïssani notifications@github.com
wrote:

> @Martaver https://github.com/Martaver Did you miss svg format in your
> pull request ?
> 
> —
> You are receiving this because you were mentioned.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/AngularClass/angular2-webpack-starter/issues/759#issuecomment-238192974,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AF1wMrDHABPuDBgw9n-jQRVBvw1568V_ks5qdv4tgaJpZM4JGHuo
> .
",Martaver,Martaver
759,2016-09-06 08:54:00,"@Martaver thx! Workaround with /full/path/file.png works!
",NagRock,Martaver
759,2016-09-20 00:18:21,"@Martaver   your workaround caused the error to go away but it did not load the background image. Any help would be appreciated.

@zxx714 this did not work
",sparachi,Martaver
759,2016-09-28 23:39:02,"@Martaver 
This worked for me when running a development build, but not a production build.
",thescientist13,Martaver
755,2016-07-05 19:38:55,"hi @gdi2290 do you have any opinion?
I appreciate thanks.
",georgi-kovachev,gdi2290
755,2016-07-05 22:19:51,"hi @gdi2290 it works and when I debug 'let result=jwt_decode(jwt)' it actually calls the function from node_modules/jwt-decode.
But I can't understand how it calls the node_modules function?
Because ""import 'jwt-decode'"" in vendor will look up custom-typings file

can you explain a little bit please?
",georgi-kovachev,gdi2290
755,2016-07-06 13:38:24,"@gdi2290 the code is working it shows the error around this code.
import \* as jwt_decode from 'jwt-decode';

[default] /home/georgismall/Project/closetbox-new-admin/src/app/app.component.ts:11:29 
    Module '""jwt-decode""' resolves to a non-module entity and cannot be imported using this construct.

But it works, any idea?
",georgi-kovachev,gdi2290
746,2016-07-02 21:27:33,"@ebeal I instaled them firstly) 
You think it will be ok to import bootstrap .css in vendors? Is it ""Best Practice""?
",AndersonDev,ebeal
746,2016-07-02 22:18:06,"@ebeal I do the steps 1 to 1 as in guide. I have Import in vendor. Tomorrow I will include min.css and all. I just want to now is it necessary to worry about that?
",AndersonDev,ebeal
740,2016-06-30 07:03:04,"@gdi2290 Hi Patrick, I did not change anything in the config, however, I managed to get it working again.
After disabling my components one by one, I found out that this particular import causes the error:
`import {Subscription} from ""rxjs/Rx"";`
Commenting this import resolves the issue. I wanted to do something like `this.subscription.unsubscribe()` on a component's `ngOnDestroy` where `this.subscription`'s type is set to 'Subscription' imported from `rxjs/Rx`.

Strange that this causes Webpack to compile into ES6 though. Worth looking into?

Update: I'm using WebStorm 2016.1 and `rxjs/Rx` is the only file WebStorm recommends me to import `Subscription` from.
",borislemke,gdi2290
738,2016-06-30 16:01:44,"@phiphou  Adding `<router-outlet>` will avoid  exception but that is something we don't expect. We want to keep it like 



So main route will have 2 children. In that case, `<router-outlet>` should be there in parent only. If we put it in ""detail.component.ts"", structure will result in something like this :



@gdi2290 Thank you. Looking forward to hear updates.
",dhrumil4u360,gdi2290
738,2016-06-30 17:05:33,"@dhrumil4u360 Sorry for the misunderstood, @gdi2290 's workaround should work. 
",phiphou,gdi2290
738,2016-07-11 09:28:45,"@gdi2290 Thank you for work around. I am able to integrate work around successfully. Looking forward to permanent fix.  May be, if possible, something in which we don't have to list all component level child routes at app.routes level. 

Thanks in advance :+1: 
",dhrumil4u360,gdi2290
733,2016-06-28 01:38:08,"@gdi2290 @sky-coding I have been working with @s-panferov in regards to catching new issues from the RC's. I haven't pulled down your changes @gdi2290 from when you added angular2-template-loader. I would also submit an issue to `awesome-typescript-loader` in regards to the `Invalid module name` error.
",TheLarkInn,gdi2290
733,2016-06-28 01:51:20,"@gdi2290  I believe version 0.17.0 of `awesome-typescript-loader` is the cause of the issue. I wouldn't think `angular2-template-loader` is involved since updating `awesome-typescript-loader` alone resolves the issue on master. There were build errors related to `angular2-template-loader` when I was fiddling with fixing f8698cf2ce16f4293987116910df6d42c8fd4f03, but I don't think they were related to the main issue here.
",sky-coding,gdi2290
729,2016-06-29 18:18:42,"@ebeal I had it working, but it was failing the ci builds when i created the pull request. upon further investigation i found that there was an existing issue where the official angular material peer dependencies for angular hadnt yet been updated to the latest RC. it looks like this issue may have been fixed a couple of days ago, so i can try it again today to see if the pr builds pass now.
",dweitz43,ebeal
725,2016-06-24 09:23:01,"@abdulhaq-e Before I submit this issue I tried the solution around `fileGlob` but with no success.
",borntorun,abdulhaq-e
717,2016-06-21 21:32:02,"@gdi2290 Works now (npm 3.8.7 on Windows)
",unsafecode,gdi2290
716,2016-06-22 03:03:26,"Yeah that fixed it, thanks for your incredible work as always @gdi2290 :+1: 
",datatypevoid,gdi2290
706,2016-07-01 21:17:23,"@gdi2290 thanks bro!
",smith64fx,gdi2290
704,2016-06-21 09:24:04,"Good job @gdi2290 :+1: 

Question about lazy loading implemenation. What is the role of provideWebpack function? Cannot find any documentation around how to implement lazy loading with new router. Can you point to any resource you come across?

Thanks
",asadsahi,gdi2290
704,2016-06-22 09:24:34,"@gdi2290 Hi, great work 👍

I saw that you added the routes using `provideRouter`...



I am wondering though how to use this for sub routes or whether it is currently possible at all as with router-deprecated the application RouteConfig could be applied via decorator to the main component and using `/...` for one route marks this route as parent for sub routes being applied to another component adding its own RouteConfig

Do you see any way to do this? Or maybe this is not intended (yet) with the new router? Can you give me some advice?

Cheers

EDIT: if someone is looking on how to implement nested routes with the new router I found this interesting article: https://coryrylan.com/blog/introduction-to-angular-2-routing
",TobiasKrogh,gdi2290
696,2016-06-27 13:49:32,"@harunurhan I didn't import anything in my .scss. The second loader `{ test: /\.(woff2?|ttf|eot|svg)$/, loader: 'url?limit=10000' }` should handle font files. Perhaps the regex is wrong?

Please try `{ test: /\.(woff|woff2|ttf|eot|svg)$/, loader: 'url?limit=10000' }`
",gearlles,harunurhan
696,2016-06-27 18:23:59,"@harunurhan Did you correctly set up the `sassLoader`? 

Here is what I use for [Foundation](http://foundation.zurb.com/sites.html), should be a solution for BootStrap too : 


",phiphou,harunurhan
696,2016-06-27 23:20:44,"@harunurhan I just tried using fonts and they work. Please check https://github.com/gearlles/angular2-webpack-starter

Looking at your stacktrace, your edited `webpack-dev-server.js`. Are you sure this is the right place?
",gearlles,harunurhan
691,2016-06-17 05:27:23,"@ebeal Thanks for the suggestion :) but I think there are some breaking changes with that version, so I'd want to defer downgrading for now.
",wizjack,ebeal
686,2016-06-14 21:06:55,"@gdi2290 with `devtool: 'source-map'` now I got error in browser console
`Failed to parse SourceMap: http://localhost:3000/main.map`

[main.map.txt](https://github.com/AngularClass/angular2-webpack-starter/files/314938/main.map.txt)

There is an opinion, that this problem caused with some localization characters in map file
",holiber,gdi2290
686,2016-06-15 11:59:13,"@gdi2290 with 'node_modules/moment' in source-map-loader excludes also no effect. Furthermore, moment definitions still present in main.map file.
",holiber,gdi2290
686,2016-06-15 22:44:33,"Yes, my browser cache was disabled. So, after few experiments I found, what it's google chrome  v51.0 problem. On chrome ""canary"" all source maps are valid. @gdi2290, thanks for your answer!
",holiber,gdi2290
679,2016-06-12 01:38:15,"@gdi2290 great, will merge.
",shlomiassaf,gdi2290
679,2016-06-12 01:47:38,"@gdi2290 whats the command for running travis again?
",shlomiassaf,gdi2290
655,2016-07-20 22:05:17,"@gdi2290 I've narrowed the issue I'm having down to using fs with this configuration. If I remove the components that use fs, I can run the unit tests with PhantomJS and in Chrome, but if fs is there I'm getting a ""module not found"" error and it refers to fs. Any insights into this? Let me know if you need more information and I can provide it.

EDIT: I'm getting the module not found error when I try to run karma. I can provide the output if necessary.
",Chadley08,gdi2290
645,2016-06-08 00:52:40,"@valorkin The implementation does use the `gh-pages` package but it wont work out of the box, it need some help getting it to actually work.

The main reason is that in github the base url is always **username**.github.io/**repo-name**. In most cases the application will not have a **repo-name** prefix, it's usually the root of the domain.

So, we have 3 different setups:  
-  Local dev server
-  Deployment in production
-  Deployment in github.

This is why we need an additional config since it a different setup.

We also need to think about the purpose of `angular2-webpack-starter`, it's a set tools aimed to making the developers life easier, not having to manually manage work flows.
Having to run `gh-pages -d dist` manually requires some previous steps, you have to run the build and if you forgot you probably just posted an older version to github, this is a common mistake that happened to me more then once :)
It get's even worse if you forgot to edit your **index.html** to support the github pages base url prefix, again happened to me more then once.
This is actually why I created this flow, then realized it can be integrated into this project.

Another thing is that you can deploy 2 (or more, custom) compilation artefacts to github, minified production build or a development build.

Also, this PR tries to keep it simple so you don't have a lot of configuration options to control the `gh-pages` package, this can be done in a later phase. I prefer a simple PR first so we can understand it.

So using the `gh-pages -d dist` approach you need to do some manual work, which is the same for every release: build and edit `index.html`, this is a prefect scenario for automation.

If you investigate the config file you will see it's basically a simple webpack plugin, I think we should first adopt the PR and then opt for a plugin after we get around most use cases and options to support.
",shlomiassaf,valorkin
645,2016-06-08 00:59:06,"The main issue here is the noise in **index.html**

Having to prefix every resource with `<%= webpackConfig.output.publicPath %>`:



Add's a lot of noise that I really don't like, and it's ""sort of"" an API change, this is why I asked @gdi2290 to ask for community help.

BTW, if a user has a public path different then `/` this is something that he needs to do anyway, hardcoding the public path is a recipe for future errors since it can't be refactored automatically.

The solution here is probably defining a static asset array with objects for every  static asset and building them when we compile index.html, something like:



This allows supporting every attribute out there.
It also doesn't break anything, if someone doesn't want github deployment support he can just hardcode his assets.

All in all, I think it's better to define static assets outside of `index.html` and keep it as clean as possible.
",shlomiassaf,gdi2290
645,2016-06-10 02:35:07,"@gdi2290 before I start, some consult.

Since a static asset file has volume I don't think it should be within the configurations themselves.

We can put it in a file, in the config directory... something like
`assets.common.json` or `assets.dev.json` etc... 

In the configs we can opt in for them if the file exists and create the html, this result's in a non breaking API modification.

Another option is to let the user set the json asset file (path) in the config's.

I like the first option better, it's convention over configuration which is less confusion.

Comments please...
",shlomiassaf,gdi2290
645,2016-06-11 02:56:14,"@gdi2290 Once #679 is merged I'll rebase this, works like a charm.
",shlomiassaf,gdi2290
645,2016-06-12 12:16:39,"@gdi2290 please have a quick final look.

I reduced code change, so only new files are added nothing in the repo (code wise) changed.
The only change in the repo is in package.json (for scripts)

Github pages output can be found here:
http://shlomiassaf.github.io/angular2-webpack-starter/
https://github.com/shlomiassaf/angular2-webpack-starter/tree/gh-pages
",shlomiassaf,gdi2290
634,2016-06-07 12:36:04,"@Foxandxss I was thinking about trying to add it there as well, but I have been a little busy at my job lately. 

Let me know if you need/want any help with that.
",dweitz43,Foxandxss
633,2016-06-04 05:34:43,"@ebeal  yes
",aaronchen2k,ebeal
622,2016-05-31 07:10:11,"@Krisa I ensured it had all 3 installed but didn't worked for me :(
",kushwahashiv,Krisa
622,2016-05-31 09:04:48,"@Krisa
Thanks for reply. I was having typings already installed on my machine.
here are my observations:
1) `--bail` removal is basically allowing build to proceed to show actual errors which I fixed.
2) Although I have following version of node - v6.2.0 and npm- v3.8.9 this should not be an issue
3) you can remove dev and ambient dependencies sections from typings.ts  as these has been replaced with `""globalDependencies""`
",kushwahashiv,Krisa
617,2016-06-21 17:02:15,"@gdi2290 I've been digging into `app-shell` the last days and i can only imagine `app-shell` as using the root component and first route as the app-shell, then setting all other routes as lazy load, however at finish loading of the first route it should trigger a fetch for each other page so that it is cached by a service worker.

How would (if possible) trigger that fetch?
",luchillo17,gdi2290
617,2016-06-22 13:37:19,"@gdi2290 I've been testing the latest master repo about the thing i told you with fetching the async routes after `app-shell` finishes loading, and it doesn't fetch the async routes.

I tested like this, i open the home route which loads by default, then in chrome dev tools i disable the network (throttling to offline mode) after giving 1 sec to the ""fetching"" to happen, then i navigate to the `About` route which should have been fetched after the `app-shell` but an error arises where the component is not loaded and navigation breaks, i try to enable network again and it doesn't try to download the `About` chunk again.

Maybe we wasn't talking the same language when i said fetching all when the `app-shell` finished loading.
",luchillo17,gdi2290
615,2016-06-14 07:56:22,"@Andrey-Pavlov There is solution thumbed up 19 days ago with diff... worked for me, essentially I had to do this



Looks like typscript compiler doesn't seem to mind json having comments in it :)
",elhigu,Andrey-Pavlov
613,2016-05-20 17:59:49,"Hey guys sorry for the lack of explanation about this. Yes the [material2 branch](https://github.com/AngularClass/angular2-webpack-starter/tree/material2) will be kept in sync with master. The idea is to keep material separate especially while it is still unstable (while still making improvements and expanding on examples on that branch). @gdi2290 will make an update to the readme about this so people can still use that version if they like.
",ebeal,gdi2290
603,2016-05-19 22:46:40,"@gdi2290 but I use `npm run server:dev:hmr` This is my config



Also I use postcss
",xgrommx,gdi2290
586,2016-05-14 07:50:08,"@gdi2290 Glad reading your last comment
",zigzag95,gdi2290
586,2016-05-17 12:39:16,"Personally the current starter as is its of no use to me as a starting point because there is just way too many stuff on it, but I do pick up on great ideas here to create my own starters or adapt my projects. So thanks @gdi2290 and all the other guys contributing for the project;)
",joaogarin,gdi2290
586,2016-05-17 12:48:45,"@gdi2290 Why don't you start an angular-cli addon using webpack now. I am sure lot of people will help to make webpack part of ng cli.
",tapas4java,gdi2290
580,2016-08-16 22:54:38,"@ebeal you've linked to a material 1 spec...does this also work in angular2-material?  Can't find
",goelinsights,ebeal
576,2016-06-12 18:23:05,"I agree this should be a main feature because the project is so awesome its a shame it doesn't ship with it as its a must have these days. I'm going to add the files @asgerjensen pasted above and see if i can get it to work. 
",joeLloyd,asgerjensen
576,2016-06-27 18:47:03,"Got this running via @asgerjensen script, however the server throws huge memory errors and crashes if you inline your scss files in the components.  Why is this so hard?  Can't wait for a documented solution.
",ivanmayes,asgerjensen
576,2016-07-16 15:42:22,"@asgerjensen Could you place your project on branch? I am trying to marge universal-starter with this project, but I am doing something wrong... :)
",maciejsobala,asgerjensen
541,2016-04-26 21:05:50,"Thank you so much @gdi2290 problem solved.
I have a noob question, how is primeng branch different from the master, is that branch have primeng integrated or it's only meant for opening primeng related issues?
",MurhafSousli,gdi2290
541,2016-06-14 03:54:04,"how to fix in webpack.dev.js file? Mine run in webpack dev enviroment and I dont know where to fix, here is my webpack.dev.js file:  http://pastie.org/10875854 @gdi2290 
",truongnmt,gdi2290
538,2016-04-24 21:18:24,"@gdi2290, can you please enable travis? it has to be done by an admin.
",mastertinner,gdi2290
538,2016-04-25 01:40:17,"@mastertinner sorry, it's on now
",gdi2290,mastertinner
537,2016-04-24 14:39:07,"thanks, @cortopy!
",mastertinner,cortopy
535,2016-04-22 20:04:39,"@gdi2290 but `rio-font.css` is already inside `/assets` directory
",MurhafSousli,gdi2290
535,2016-04-22 20:08:38,"@gdi2290 Thank you I fixed it by overriding the style with `assets/fonts`
",MurhafSousli,gdi2290
529,2016-04-27 12:41:11,"Thanks for the PR @ktong! Can you please fix it so the tests are green?
",mastertinner,ktong
511,2016-04-17 08:36:21,"@gdi2290 Thanks for your answer. 

I found the issue, I had an extension running called ""Popup Blocker Pro 1.3.5"". It is actually injecting ""script"" tags in the page, which is throwing off WebPack...
",jneveux,gdi2290
511,2016-04-17 10:43:12,"@gdi2290 I found that WebPack code is the cause: 
angular2-webpack-starter/node_modules/webpack-dev-server/client/index.js
`
var scriptElements = document.getElementsByTagName(""script"");
var scriptHost = scriptElements[scriptElements.length-1].getAttribute(""src"").replace(/\/[^\/]+$/, """");
`
(this seems pretty weak, it implies the last script tag must be `<script src=""/webpack-dev-server.js""></script>`)

The code above fails because Popup Blocker Pro adds a script tag at the end of the index page:
`<script>function inject(){function a(){function a(a){parent.postMessage({type:""blockedWindow"",args:JSON.stringify(a)},l)}function b(a){var b=a[1];return null!=b&&[""_blank"",""_parent"",""_self"",""_top""].indexOf(b)<0?b:null}function e(a,b){var c;for(c in a)try{void 0===b[c]&&(b[c]=a[c])}catch(d){}return b}var g=arguments,h=!0,j=null,k=null;if(null!=window.event&&(k=window.event.currentTarget),null==k){for(var m=g.callee;null!=m.arguments&&null!=m.arguments.callee.caller;)m=m.arguments.callee.caller;null!=m.arguments&&m.arguments.length>0&&null!=m.arguments[0].currentTarget&&
...
</script>`
",jneveux,gdi2290
505,2016-04-13 17:16:41,"@jmsegrev thanks
",gdi2290,jmsegrev
503,2016-04-13 15:51:54,"@shlomiassaf Thanks for the great fix.  This bit me just this morning.
",abierbaum,shlomiassaf
501,2016-04-12 14:16:04,"@gdi2290 Thanks for the info. I upgraded to npm 3 (v3.8.7) via `npm-windows-upgrade` (it seems to be a special package for this purpose) and ran `npm install` again (after clearing the node_modules folder and the npm cache). I don't get an error now and the demo project seems to work, but I still get a warning:
`UNMET PEER DEPENDENCY rxjs@5.0.0-beta.4`
and
`npm WARN angular2@2.0.0-beta.14 requires a peer of rxjs@5.0.0-beta.2 but none was installed.`

I would suggest to either update the guide, so people will know, that they need npm version >= 3 or update the dependencies in `package.json` as proposed (when that's the correct fix).
",MartinMa,gdi2290
494,2016-04-06 07:24:17,"@gdi2290 
yeah, now all works fine. Looks like zip version of the project updates a little bit later. Because I used zip version yesterday and there was not last changes. 
",Somiks,gdi2290
493,2016-04-04 08:58:33,"@mastertinner, one note:
trailing comma's are ( in some cases ) actually a good thing. It's better for git diffs. And they get stripped out automatically by the typescript transpiler. Better would be to put the missing trailing comma's .
",samvloeberghs,mastertinner
493,2016-04-04 10:11:19,"@samvloeberghs, thanks for your feedback! I think that's a personal choice. I personally prefer no trailing commas for better legibility but I'm also fine with having them everywhere. What's crucial to me is that we are consistent about this and enforce it using the tslint rule.
",mastertinner,samvloeberghs
493,2016-04-06 21:57:04,"@mastertinner can you rebase so I can merge?
",gdi2290,mastertinner
493,2016-04-07 18:57:55,"@mastertinner thanks!
",gdi2290,mastertinner
493,2016-04-14 06:08:44,"@gdi2290, can you please merge or let me know what you would like me to change before merging?
",mastertinner,gdi2290
484,2016-04-13 04:51:10,"@jmsegrev can you make a PR?
",gdi2290,jmsegrev
484,2016-04-13 18:30:44,"@jmsegrev thanks for looking into it. the full size of `core-js` isn't massive after testing
",gdi2290,jmsegrev
483,2016-04-24 15:40:39,"@gdi2290 :-), yes impossible to cater to everyone. Then perhaps the only thing we can do is make sure we keep the filename, custom typings come to mind, and directory structure similar so it is easier to track multiple repo at once and have an hybrid solution.
",user414,gdi2290
483,2016-04-24 19:19:26,"@gdi2290 other people would have to chip in, myself I find it works fairly well as is tracking both repository as remote. Perhaps making sure the naming is consistent, like custom-typings.d.ts in one vs typings.d.ts and the entry points are the same like app.ts in one vs main.browser.ts in the other. Since when I merge with git if the name/location is not the same it's not as smooth. Also maybe using a webpack.common that's in common with both repo might be helpful, and using helper.js in both to calculate the root in webpack. In the end I would aim for as little difference between the two repos as necessary. However, all of this is just little things. Wouldn't want to add extra work for just my own preference. While I'm at it thanks for those seeds repo. It saves quite a bit of time, especially during the development cycle where updating between alphas/betas can at time be like a mine field. 
",user414,gdi2290
472,2016-03-30 18:07:33,"@samvloeberghs nope :)
Normally path location strategy should work on IE9 if you use a polyfill like history.js
Sadly I have not experimented with it much, but if support for hash location strategy is more IE9 friendly then it's a reason to keep it.
",denissb,samvloeberghs
472,2016-03-30 20:00:52,"@samvloeberghs the bootstrap code could probably use Modernizr to detect if the history API is there or not and adapt the config based on that. IMHO IE9 shouldn't be considered anymore anyways, time to move on. Microsoft dropped support, let's not live in the past. Ask people to move to a modern Web browser :)
",dsebastien,samvloeberghs
472,2016-03-31 20:35:07,"@samvloeberghs - while IE9 without push state support might be one of the reasons, the major one I see is when you don't want to delegate handling of deep links to the front end. Example: ngnix web server is handling / while the SPA is handling /# based routes.
",denissb,samvloeberghs
456,2016-04-01 14:25:30,"@mastertinner tried to comment `'vendor': './src/vendor.ts'` in `webpack.common.js`?
",mburger81,mastertinner
456,2016-04-03 11:23:22,"Ok I use your suggestion @gdi2290 - my project based on version of angular2-webpack-starter  from near 1-3 march 2016. So I upgrade it manualy in this way:

In webpack.config.js I uncomment vendors in:



And replace line:

`new HtmlWebpackPlugin({ template: 'src/index.html', chunksSortMode: 'none' }),`
by



And replace this:



By this:



Then I replace body of helpers.js file (in the same directory than webpack.config.js in my version - but in current wersion this and other files was moved to 'config' directory) to this 
https://github.com/AngularClass/angular2-webpack-starter/blob/f26985da68c5e94742b204d682b9673ac093006b/config/helpers.js
(from commit: https://github.com/AngularClass/angular2-webpack-starter/commit/2455adc826986694574e08e5730806917872f22b )

But I change line (becouse in my version helpers.js file is in the same directory than webpack.config.js) :
`var _root = path.resolve(__dirname, '..');`
To
`var _root = path.resolve(__dirname, '.');`

And it seems that it WORKS ! :) (do I do it in proper way?)
",kamil-kielczewski,gdi2290
456,2016-04-03 11:31:30,"@gdi2290 I confirm your last update fix this issue.
",edezacas,gdi2290
456,2016-04-03 11:43:23,"Thanks, @gdi2290! That solved it.
",mastertinner,gdi2290
453,2016-03-24 22:05:51,"Hey @gdi2290 I was able to refactor using webpack merge. Tested with `npm run server` `npm run build:prod` and `npm run build:dev`. Seems to be working great.
",Spittal,gdi2290
453,2016-03-27 16:19:09,"@Spittal @gdi2290 why not `Object.assign`? im not a webpack expert, but the config is just an object

`Object.assign({}, obj1, obj2)` will create a new object

**EDIT:** anyways, wouldn't it be easier to just keep everything in one file [like this](https://github.com/tsm91/ng2-starter-kit/blob/master/config/webpack.config.js)? Also, this is 0% redundant.
",tsm91,gdi2290
453,2016-03-27 16:19:09,"@Spittal @gdi2290 why not `Object.assign`? im not a webpack expert, but the config is just an object

`Object.assign({}, obj1, obj2)` will create a new object

**EDIT:** anyways, wouldn't it be easier to just keep everything in one file [like this](https://github.com/tsm91/ng2-starter-kit/blob/master/config/webpack.config.js)? Also, this is 0% redundant.
",tsm91,Spittal
452,2016-03-27 19:10:20,"@tobek thanks, the compiler needs `zone.js.d.ts`

but, its not that easy to fix it, because if you check the current [tsconfig.json](https://github.com/AngularClass/angular2-webpack-starter/blob/master/tsconfig.json#L10) node_modules are excluded, even if you add `./node_modules/zone.js/dist/zone.js.d.ts` to `filesGlob` it won't gain any precedence over the node_modules exclusion. If you remove the node_modules exclusion you will get a bunch of duplicate identifier errors

Nevertheless `./src/custom-typings.d.ts` is not a wise decision: 
- what if in the future you will have to define several dozen of libs? 
- what if you want to define them good not just to shut the compiler up? that single file will grow very big
- what if you want to temporary load `./node_modules/zone.js/dist/zone.js.d.ts`?

I think it would be wiser to create `./manual-typings/` and place all the custom `.d.ts` file there and load this folder. This is where i added the missing `zone.js.d.ts` file. So, [something like this.](https://github.com/tsm91/ng2-starter-kit/commit/5c781dab938d53fff0d18376e582e639a026394e)
",tsm91,tobek
451,2016-03-22 07:38:46,"@gdi2290 Yesterday evening I downloaded the last version, and on last version it seams to work but I'm not realy sure. On having a empty project it works but including my app I have the same issue as discussed in #456 , and so I'm not able to test if it works realy.
",mburger81,gdi2290
436,2016-08-01 15:49:27,"Hi, @gdi2290 here is a portion of the code:

[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:6:17 
    Duplicate identifier 'ArrayLike'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:9:17 
    Duplicate identifier 'ArrayOrIterable'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:122:17 
    Duplicate identifier '_Selector'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:123:17 
    Duplicate identifier '_ValueOrSelector'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:124:17 
    Duplicate identifier '_Predicate'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:125:17 
    Duplicate identifier '_Comparer'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:126:17 
    Duplicate identifier '_Accumulator'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:129:21 
    Duplicate identifier '_FlatMapResultSelector'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.es6.d.ts:2503:23 
    Duplicate identifier 'export='.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.experimental.d.ts:423:36 
    Duplicate identifier 'export='.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.experimental.es6.d.ts:423:36 
    Duplicate identifier 'export='.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.joinpatterns.d.ts:3:18 
    Duplicate identifier 'Plan'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.joinpatterns.d.ts:143:36 
    Duplicate identifier 'export='.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.joinpatterns.es6.d.ts:3:18 
    Duplicate identifier 'Plan'.
[default] /home/vagrant/code/Application/dist/assets/node_modules/rx/ts/rx.joinpatterns.es6.d.ts:143:36 
    Duplicate identifier 'export='.

I'm using the angular2-rc4

Hope this help..
",bruno-serfe,gdi2290
436,2016-08-23 20:25:17,"@gdi2290 - I also added ""typings"" to the exclude:
**tsconfig.json:**


",michaelwalters,gdi2290
435,2016-03-30 10:46:50,"@samvloeberghs I agree, that's why I stated that this is not a clean solution but I didn't find the time to provide something yet.

Let me know if you work on this or if I can help you out.
",kschio,samvloeberghs
433,2016-03-18 08:27:27,"@gdi2290 You may want to watch progress on https://github.com/angular/angular/issues/7656 and
https://github.com/mgechev/angular2-seed/issues/648

before the attempt to update 
",jesperronn,gdi2290
423,2016-03-15 23:12:06,"@gdi2290 
node version is 4.4
",lewis617,gdi2290
423,2016-03-16 07:52:36,"@gdi2290  I try many times ,  maybe I should use ubuntu or mac  
",lewis617,gdi2290
420,2016-03-13 23:55:56,"@gdi2290  no it's for angular2, and I've tried it
https://github.com/angular/angular/blob/master/CHANGELOG.md
",MurhafSousli,gdi2290
420,2016-03-14 19:18:48,"@gdi2290 Ok.

Then we need `router-active.ts`
",sasidhar,gdi2290
420,2016-07-28 02:54:45,"@gdi2290 why it is removed? how can I set class on parent now?
",goodmind,gdi2290
412,2016-03-11 15:35:27,"Hi @samvloeberghs,

The terminology does trigger some interesting conversations.  

As you say it's a unit test but not of a service, I'm testing a unit of behaviour within my UI (port level testing).

Protractor is my mechanism for accessing the closed system to test a behaviour, and since Protractor is always labelled as an end to end testing tool, I mistakenly used the term.  

Either way, I'm after a Protractor, not Karma solution to this problem :o)

Cheers,
",daddywoodland,samvloeberghs
412,2016-03-16 16:21:45,"Thanks @samvloeberghs I'll take that into account when trying out mocking the HTTP response.  I was looking at json-server as a possible solution for mocking the API.

Regarding the reference to 'E2E', these aren't end to end tests but unit tests of the behaviour of the front end as a closed component.  I've seen it called 'port level testing', 'sociable unit tests' and 'behavioural unit testing'.  

Ultimately I need to mock any requests that move across the boundary of my component, in this case calls the the API.

If you're unfamiliar and are interested in the idea, the approach was triggered from a talk by Ian Cooper I saw a couple of years ago.  I didn't see this one at NDC 2013 but it's the same presentation I believe.

Cheers!
",daddywoodland,samvloeberghs
408,2016-03-12 10:10:12,"Nice, thanks @gdi2290!
",mastertinner,gdi2290
402,2016-03-09 18:23:06,"@dweitz43 I can agree.  Removing node_modules from the exclude does allow the build to work.  Probably not a production solution though.
",jkyoutsey,dweitz43
399,2016-03-09 10:16:49,"@gdi2290 do you have any other examples of TypeScript modules which only expose the js files? I am trying to find whether there is any kind of best practice.

@cschroeter another solution that could work would be to implicitly reference the js file in your code:


",urish,gdi2290
399,2016-03-09 10:16:49,"@gdi2290 do you have any other examples of TypeScript modules which only expose the js files? I am trying to find whether there is any kind of best practice.

@cschroeter another solution that could work would be to implicitly reference the js file in your code:


",urish,cschroeter
399,2016-03-09 10:28:24,"@urish Unfortunately this leads to `Cannot find module 'angular2-moment/TimeAgoPipe.js'.`

By the way  - using angular2-jwt also causes a module parse error. 
Maybe it is ""okay"" to include node_modules so people don't struggle with this. @gdi2290 Your thoughts on this?
",cschroeter,gdi2290
399,2016-10-19 10:38:26,"@gdi2290 could you please point to a recent version of webpack config file with the offending line? Or maybe fix the link with the version at that time? Thank you!
",BrainCrumbz,gdi2290
396,2016-03-09 01:11:40,"@gdi2290 Are you going to restore the changes involving the default webpack config file?
",sumigoma,gdi2290
389,2016-03-09 08:26:55,"@gdi2290 checking this out now. Was gonna make a pull request but only  got about half way with the exceptions that you have now listed. Seems still seems to be an issue mangling. 
",nigeman,gdi2290
385,2016-03-29 17:12:22,"@gdi2290 @valorkin Thanks. It worked.
",prayagmk,gdi2290
385,2016-03-29 17:12:22,"@gdi2290 @valorkin Thanks. It worked.
",prayagmk,valorkin
382,2016-03-08 00:11:21,"How about referring components like how we are doing with angular2 components?

To import something from angular we are using 
`import { isString } from 'angular2/src/facade/lang';`

Can we do the same for components in our application?
`import { HomeComponent } from 'angular2-webpack-starter/components/home.component';`

I tried adding `*.d.ts` in each folder, but couldn't achieve that.

@gdi2290, can you give us some directions to achieve the same?
",sasidhar,gdi2290
382,2016-03-08 01:07:22,"@gdi2290 Thanks!
",sasidhar,gdi2290
382,2017-01-12 15:21:01,"@gdi2290 
Cannot get aliases working with the current version of webpack 2.2.0-rc3. With old webpack 2.1.0-beta.22 this was working perfectly.

In large projects with variable depth paths aliases are must have, and ../../../../../ imports are just next to impossible to read. In example / toy projects this doesn't matter.",rvalimaki,gdi2290
382,2017-01-12 16:55:55,"@d3viant0ne 

Thanks, I tried also with path.resolve, but it simply refuses to work with 2.2.0-rc3 for me. 

My alias definition in webpack.common.js / resolve:



Previously I was using following, and it did work with 2.1.0-beta.22, but not with 2.2.0-rc3:


With the latter, I get only following errors 


With the former, I get the above error, and the classic TypeScript compiler error for module not found.

I'm just wondering if AOT or DLL has something to do with this.",rvalimaki,d3viant0ne
382,2017-01-13 08:39:56,"@d3viant0ne 

I know that AOT itself changes only the compiled output, but I thought that to make AOT working someone had to write a shiny new webpack loader or something that could maybe somehow affect the situation. 

I have never seen before those ""[at-loader]"" warnings and errors. Our last ""full sync"" with angular2-webpack-starter was back in 9.9.2016, so probably quite a few things have changed after that.

Ps. I did try to add following paths also to tsconfig.json and tsconfig.webpack.json, but did not work:

",rvalimaki,d3viant0ne
382,2017-01-16 14:03:26,"@shlomiassaf 

Thanks, TsConfigPathsPlugin fixes the issue with aliases / paths. 

(Now I'm facing a different issue with at-loader not accepting my dual definitions for enums like ""export enum foo {} export namespace foo { /* helper functions for foo-enum */ }, but asking about them elsewhere.)",rvalimaki,shlomiassaf
382,2017-01-17 13:18:09,"Hey guys,

Well I'm trying to figure it out for days and still got nothing.

Today I follow @shlomiassaf steps, but still the same:







Does anyone have any idea?",rochapablo,shlomiassaf
380,2016-03-09 03:07:46,"@gdi2290 Done!
",louisscruz,gdi2290
378,2016-03-04 07:59:51,"on my way :) @gdi2290
",samvloeberghs,gdi2290
378,2016-03-23 10:20:47,"@gdi2290, it still does not output the same results.

`npm run build:prod` gives errors on tslint
`npm run lint` doesn't 
",samvloeberghs,gdi2290
378,2016-03-23 12:18:53,"@samvloeberghs In my case the fix was simple. In package.json change `""lint"": ""./node_modules/.bin/tslint src/**/*.ts""` to `""lint"": ""./node_modules/.bin/tslint 'src/**/*.ts'""`. The missing quotation marks were established in [this commit](https://github.com/AngularClass/angular2-webpack-starter/commit/1563944036b4f2c80ca0ddca93487b197f7bf231) and fixed in [this commit](https://github.com/AngularClass/angular2-webpack-starter/commit/d4d2c04b6f1c1f78dc7170cd37adba70dfc2bf41).
",louisscruz,samvloeberghs
372,2016-03-09 13:12:49,"@gdi2290 Thank you for the fix! Project works after latest changes!
",alvipeo,gdi2290
372,2016-03-10 19:49:56,"@gdi2290 
I'm still getting this with node 5.7.1 ts 1.8.2 and awesome-ts-loader. Was there anything else?
",austbot,gdi2290
372,2016-03-22 15:54:11,"@hollanderbart running npm install twice works, thanks
@gdi2290 nevertheless, Rxjs beta.3 seems to work. Only IntelliJ shows me some errors with the Observable interface due to the ambient method declarations.
",broth-eu,gdi2290
364,2016-07-25 02:30:36,"Hi, @jgodi, @gdi2290  

Now i can use _AVA_ to test a file which written by _Typescript_ without via _Webpack_

For testing, we can use _ts-node_ for _AVA_, 

( _ts-node_  is a preprocessor for _AVA_ ),

then we dont need to transpile typescript via _Webpack_,

although through this way will lost powerful HMR ...
",LiTiang,gdi2290
348,2016-02-26 11:10:39,"I back this comment from @gdi2290 and wanted to make the same comment before.

Although I like the idea of configuration and the DRY principle, separating the config files gives you more flexibility and readability ( depending on the environment), with the little compromise of having to repeat yourself.  Putting too much logic in one file will also bloat it a lot ( especially when you're extending this basic setup )
",samvloeberghs,gdi2290
348,2016-02-26 17:36:11,"@Spittal great idea! can you edit this page https://github.com/AngularClass/angular2-webpack-starter/wiki/How-to-DRY-up-your-webpack-config I can also change the title or anything
",gdi2290,Spittal
329,2016-02-15 17:16:47,"@gdi2290 Yes, bringing back polyfills has fixed the Rx problem... Please note, that this issue is not about broken observables, it is about that fact going unnoticed in CI...
",saldoukhov,gdi2290
327,2016-02-12 02:55:22,"Thanks @gdi2290.

I found how to fix the problem.

Delete the Typings directory.

Run npm install.

This, of course, recreates the Typings directory correctly.
",chriscurnow,gdi2290
326,2016-02-12 07:42:36,"Hey @gdi2290 what's the actual reason for using webpack-md5-hash? To get less risk of collisions? If so, apparently it's possible to simply pass a different hashing algorithm in the output options as per the last comment there: https://webpack.github.io/docs/long-term-caching.html
",dsebastien,gdi2290
326,2016-02-12 19:22:23,"@gdi2290 Thank you! After updating md5-hash to 0.0.5 it shows me the useful error stack.
",lanocturne,gdi2290
324,2016-02-15 08:40:56,"@gdi2290 
ups, i forgot to update index.html. thanks it works
",Somiks,gdi2290
316,2016-02-10 21:25:20,"@Spittal can you update this wiki page https://github.com/AngularClass/angular2-webpack-starter/wiki/How-to-include-PostCSS on how to include PostCSS (or at least what you have already). I can try it out and see what the fix is
",gdi2290,Spittal
314,2016-02-09 14:02:41,"one way as @samvloeberghs said
or use copy webpack loader
",valorkin,samvloeberghs
314,2016-02-25 11:36:11,"@samvloeberghs - that works for me, but I'm using `html-loader?minimise=true` to load HTML files in `webpack.config.js`, instead of `raw-loader`. This strips the HTML of unnecessary characters (good!) but then Angular2's TemplateNormalizer thinks my HTML is invalid (which is incorrect).

HTML:  `<div><img src=path/to/img.png> <a href=#/page1>Link</a></div>`

Is that why you are using `raw-loader`, because of Angular2's buggy HTML parser?
",uglow,samvloeberghs
314,2016-02-25 22:31:09,"@samvloeberghs - The following strings **work**:



These strings do **not work**:



So it appears that the template parser may be looking for `"">` to determine the end of the start-tag of a HTML element. Notice that `<a class=btn href=""..."">` works, even though there are no quotes for the `class` attribute.

I've raised this question on the [Angular repo](https://github.com/angular/angular/issues/6099#issuecomment-188771286), and they suggested I raise a new issue. So I'll do that now.
",uglow,samvloeberghs
310,2016-02-25 23:01:27,"hi @gdi2290,

Installed npm 3 fix the issue. thanks
",KhoaSydney,gdi2290
309,2016-02-12 01:02:28,"@rjmreis can you make a pull-request?
",gdi2290,rjmreis
306,2016-03-13 05:15:57,"@gdi2290 Thank you
",MurhafSousli,gdi2290
295,2016-02-05 16:27:06,"@samvloeberghs I do not need a sass file in prod environment. Since I am coming from world of Gulp, still new to webpack, I am not too familiar with this use case. 

What I really want, compile `scss` into `css`, that is it, no debugging needed in prod. 

In my component source file, I have `styles: [require('./myComponent.scss')],`, in that case, in the production build, I need to compile `scss` to `css`, but component file still referencing `myComponent.scss`, that is part that I do not understand completely. 

Your approach works 100% fine in development environment, could you show me really quick on how to make it work in prod environment? Use [this test repo](https://github.com/mattma/angular2-webpack-starter)
",mattma,samvloeberghs
295,2016-02-06 07:03:04,"@samvloeberghs I tried with your solution, it did not work as expected. Some styles works like `h1[_ngcontent-hkn-3]` selector, most of them did not. I am not sure how to make it work.

@gdi2290 solutions works fine. I just want to know the details what is behind the scene. [See my previous questions](https://github.com/AngularClass/angular2-webpack-starter/issues/295#issuecomment-179642614)
",mattma,gdi2290
295,2016-02-06 07:03:04,"@samvloeberghs I tried with your solution, it did not work as expected. Some styles works like `h1[_ngcontent-hkn-3]` selector, most of them did not. I am not sure how to make it work.

@gdi2290 solutions works fine. I just want to know the details what is behind the scene. [See my previous questions](https://github.com/AngularClass/angular2-webpack-starter/issues/295#issuecomment-179642614)
",mattma,samvloeberghs
286,2016-02-01 16:43:05,"@cschroeter can you make a pull-request?
",gdi2290,cschroeter
286,2016-02-02 08:27:46,"It gets tricky if a component don't have a corresponding spec file since you include it in your Karma configuration, code get executed no matter what. 

I would suggest before executing test to run a plugin showing a warning for files not having a corresponding spec file.

@gdi2290 What is your opinion on that?
",cschroeter,gdi2290
278,2016-01-30 19:41:11,"@datatypevoid It sounds more like you've recently updated to NPM v3. Since NPM v3 creates a flat structure, it assumes certain things about the module installation layout that currently exists. If you're combining a previous NPM v2 install with v3, this is a pretty common issue I've seen pop up (because it assumes it exists at the top level from a different dependency, but NPM v2 structure was no flat so it actually doesn't exist).

Does that sound like your problem? If so, just run a re-install over the modules to make sure the structure is correct.
",blakeembrey,datatypevoid
276,2016-01-30 01:24:00,"@datatypevoid  can you update this file or pull latest changes again
https://raw.githubusercontent.com/AngularClass/angular2-webpack-starter/master/src/polyfills.ts
",gdi2290,datatypevoid
271,2016-01-29 04:15:57,"My issue is a duplicate. Visit issue #178 for more details. 

@gdi2290 i'll read more about it.
",martinoppitz,gdi2290
262,2016-01-27 21:35:41,"@mastertinner can you make a pull-request and comment about it in prod webpack configs
",gdi2290,mastertinner
262,2016-04-13 20:59:01,"The workaround suggested by @gdi2290 worked in a couple of betas, but now the mangle:false seem to be the only option (I'm using Webpack with Beta.14). Otherwise I'm getting maximum calls stack size exceeded.
",yfain,gdi2290
253,2016-01-25 04:51:22,"@gdi2290 think you very much ,it's work! would you please tell me why need use `npm update`?
",royzhao,gdi2290
253,2016-01-25 04:55:06,"@gdi2290 think you again~
",royzhao,gdi2290
243,2016-01-22 22:46:40,"@gdi2290 Got it, thank you so much.
",MurhafSousli,gdi2290
242,2016-01-22 10:25:54,"@valorkin thanks for your help.
updating my wallbay.js to



there is still errors


",pashaie,valorkin
242,2016-01-23 06:15:07,"@gdi2290 Awesome, thanks!
",ArtemGovorov,gdi2290
231,2016-01-17 21:41:19,"@blakeembrey 

> As for the additional issues, I know Angular has some binding so the global $ so you might have to do something there. If you can provide a link I can quickly review what you've done, that'll make it easier.

Indeed it does, I solved it by changing [L3200](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/jquery/jquery.d.ts#L3200) from:



to



The problem with this solution is, if `jQuery` is included as a requirements in the `typings` file then `typings install` will reset the file.
",abdulhaq-e,blakeembrey
226,2016-01-15 01:43:16,"@ApiStack so did you run into an error without these are were these mentioned as hidden modules or something?
",gdi2290,ApiStack
226,2016-01-15 02:21:17,"@gdi2290 
Just tested under OSX, the webpack runs without any error. But don't know why it fails on windows.
",lzbgt,gdi2290
226,2016-01-15 02:57:41,"@gdi2290, the vendor bundle is too big for use, any idea to make it succinct?


",lzbgt,gdi2290
222,2016-01-13 20:28:35,"@gdi2290, that line I commented once I first time ran a project :) 
Actual problem is here and there is no solution yet even from author of loader https://github.com/TypeStrong/ts-loader/issues/78#issuecomment-171078918

in older version of ts-loader 0.5.2 it took <1 sec to rebuild, in new version it takes ~5sec :( 
",panKt,gdi2290
221,2016-01-24 20:08:27,"Thanks for your reply, @gdi2290! Unfortunately that didn't help... I'm still getting `ORIGINAL EXCEPTION: TypeError: this.connection[method] is not a function` when opening the app in the browser...
",mastertinner,gdi2290
220,2016-02-29 06:55:12,"@gdi2290  Any progress on this?
",ansarizafar,gdi2290
219,2016-01-13 12:01:08,"Thank you @davidarnarsson , that works. And @abdulhaq-e I tried implementing your suggested change but it ruined my layout unfortunately. The problem now remains that both styles are being loaded on both pages.

The main problem is the background colour, which is different for both components. I have this:



but the `background-color` for each component is the same, even though I am specifying a different colour in each scss file. This is more of an issue with Angular 2 so I will go elsewhere for the answer.

Unless you know.

Thanks for your help. Mark
",mark-norgate,abdulhaq-e
218,2016-01-12 20:53:34,"thanks a lot, @gdi2290! that fixed it.
",mastertinner,gdi2290
218,2016-01-16 21:45:00,"+1 thanks @gdi2290 for the workaround
",phil-lgr,gdi2290
218,2016-01-18 22:08:42,"@gdi2290 thanks a lot! :)
",valorkin,gdi2290
213,2016-03-31 19:12:40,"@gdi2290 do you use that instead of the angular2 polyfills?
",ps2goat,gdi2290
211,2016-02-24 19:41:30,"@dweitz43 +1. me too..
",ibmsdave,dweitz43
207,2016-01-10 06:18:06,"@gdi2290 I investigated a little bit and oddly enough I don't found out how do run the tests in course of the webpack watch mode (or build in general). Thought in times were everybody in the javascript world talks about the importance of testing, it is ""best practice"" to run the tests on every code change... 
",maku,gdi2290
206,2016-01-25 02:22:44,"@samvloeberghs  nvm I got it working
",gdi2290,samvloeberghs
203,2016-01-07 08:53:26,"Thanks for updating webpack config! @gdi2290 
",cuitianze,gdi2290
199,2016-01-27 01:10:40,"@phil-lgr cheers for the note. I will discuss with @gdi2290 for inclusion into core (smiles).
",manavsehgal,gdi2290
199,2016-04-10 21:35:12,"Having done quite a bit of this lately and I would suggest going the route @gdi2290 suggested.

Fork it and create a walkthrough on how to add, material2/ng2-bootstrap/sass/whatever
Open a PR for the readme and have the repo added to a list of projects that have been extended.

It simplifies pulling in updates from the upstream repository ( this one ) and still provides value to the community using it without bloating upstream.
",d3viant0ne,gdi2290
198,2016-01-05 01:39:22,"@gdi2290 It still gives the error (only in production, not dev).

@manavsehgal when I comment out CommonsChunkPlugin for common, it just moves up to vendor to being the file that calls the same error. If I comment out the plugin for vendor it just moves up to main. 

It works without a problem in plunker, but not in production build: https://plnkr.co/edit/XBqIYu4aHyNi7TJtc5wH?p=preview

Every directive I have with an input setter breaks in production build. 
",qdouble,gdi2290
198,2016-01-05 03:04:46,"@gdi2290 The issue persists. I just did a clean install of the latest repo and the error is still there. There is still something wrong with the current build.

To reproduce error, all you have to do is...
1. Have latest repo installed.
2. Copy the template from app.ts into project app: https://plnkr.co/edit/XBqIYu4aHyNi7TJtc5wH?p=preview
3.  Copy the attributeSample.ts from above plunker and copy and import it into app.
4. Do a production build and it will compile successfully, but soon as you open up browser you will see the error


",qdouble,gdi2290
198,2016-01-07 18:59:00,"@gdi2290 thanks, it works great now :+1: 
",qdouble,gdi2290
196,2016-01-04 19:00:31,"@gdi2290 Absolutely! Don't merge (as mentioned)! However, maybe we can keep the PR open just to see if others have thoughts that may help form the standards or reach consensus?

Idk, I wish I didn't have mixed feelings about the going conventions/standards, but it seems they are amiss on conveniences and simple shorthand.
",NathanWalker,gdi2290
191,2016-01-06 11:28:32,"@blakeembrey I will give it a try. But I can only do it at next monday. 
",maku,blakeembrey
191,2016-01-11 06:47:22,"@blakeembrey With the latest angular2-webpack-starter version (after a fresh clone) the reported error is the same `typings ERR! message Missing dependency ""es6-promise"", unable to compile dependency tree`
",maku,blakeembrey
191,2016-01-12 06:41:21,"@blakeembrey After updating typings (current version is 0.6.1) I get the following:


",maku,blakeembrey
191,2016-01-15 07:49:41,"@blakeembrey Yes, I am behind a proxy.
",maku,blakeembrey
185,2016-01-22 02:54:43,"@dsebastien @gdi2290 Let us start a wiki page for documenting the naming conventions. We can use this thread to report issues or debate alternatives. 

Agree with @dsebastien that we can reference existing conventions so it is easy for folks migrating over from Angular1. 

Where missing, we can also lookup other best practices - like [API naming conventions from Apigee](https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf) could possibly help navigation / router related naming conventions.
",manavsehgal,gdi2290
185,2016-01-27 02:02:34,"I added my opinion to the wiki page you created @gdi2290 
",choopage,gdi2290
182,2015-12-28 07:11:44,"@gdi2290 Many thanks for your prompt response and action! Looking forward to pulling this change.
",manavsehgal,gdi2290
178,2015-12-24 15:43:12,"@Ludevik @gdi2290 , you can take a look at my [angular 2 starter](https://github.com/antonybudianto/angular2-starter), I already integrate it with `gulp test` task
",antonybudianto,gdi2290
178,2016-10-08 05:44:34,"@d3viant0ne sorry, can you clarify your comment?
",emilio-martinez,d3viant0ne
175,2015-12-22 17:00:59,"@blakeembrey currently tsconfig.json includes (redundand?) files that are referenced from app.ts:



app.ts:



If those are removed from tsconfig.json (meaning that the user will not end up maintaining the file most of the time), that would be fine as well.

Visual Studio Code understands tsconfig.json doesn't have ""files"" property, as said it understands all .ts (and .d.ts) files contained in the directory tree under the tsconfig file itself. Don't know about Atom.
",vivainio,blakeembrey
175,2015-12-22 17:08:57,"Yes, seems redundant to me too. But I'm not the person to fix this, just responding because I was pinged unceremoniously. @gdi2290 Fix your shit. The other option is using `exclude` and basically doing the inverse, but I prefer things to be explicit instead of implicit anyway - includes should land in `tsconfig.json` soon which will resolve this forever.

Yes, Atom and Sublime and other tooling also understands this also. But you have to exclude everything that's not meant to be included and I can tell you that's a pain sometimes and I wouldn't recommend it as the default. At a minimum, you'll have to start with `node_modules`. Also, you can't use `files` with `exclude`, which means the second some file inside of an excludes needs to be included (E.g. a module provides you an ambient declaration, such as `reflect-metadata`) you can no longer use `exclude` properly. 

Edit: Grammar.
",blakeembrey,gdi2290
162,2015-12-16 18:59:49,"Sorry @gdi2290, you're absolutely right - the latest runs perfectly, thank you!

Incidentally, doing a fresh clone and `npm install` gave me this:



I downgraded to 0.33.3 thought and it's fine... is that the correct thing to do?
",jamesthurley,gdi2290
154,2015-12-15 06:20:21,"Thanks, @gdi2290! :)
",monokrome,gdi2290
153,2015-12-14 18:18:47,"@mastertinner Try `npm install tslint`.

@Emnalyeriar @MischaZed Do a `typings install`.
",blakeembrey,mastertinner
153,2015-12-14 18:27:16,"@blakeembrey, thanks. That worked.
",mastertinner,blakeembrey
144,2015-12-10 19:20:43,"@sumigoma @gdi2290 Currently taking a look at this repo which uses it apparently with webpack: https://github.com/skolmer/react-hot-boilerplate-vscode

//Edit: Also this one: https://github.com/Microsoft/vscode-chrome-debug/issues/63
",juristr,gdi2290
141,2015-12-08 12:42:29,"Got it to work.

@valorkin I had already installed `moment` via tsd.

What I had to do was the following.

**1. Reference the `tsd.d.ts` generated by `tsd` in `src/typings/_custom.d.ts`.**



Not sure that's the right place, but it definitely worked and looks clean to me.

**2. Moving the tsd typings to `src/typings` for more consistency**

Obviously this is not needed, but I found it more intuitive to have a single app-wide `typings` folder. For doing so I added a `tsd.json` ([src here](https://github.com/juristr/angular2-webpack-starter/blob/simple-component/tsd.json)). Maybe we should include this in this starter by default? What's your view on this @gdi2290 ? or does it interfere with your plans from issue #122 ?

**3. Change the `moment` import as suggested by @valorkin**

It now looks like this:



TypeScript autocompletion now works as expected
![image](https://cloud.githubusercontent.com/assets/542458/11655886/7bf6381a-9db1-11e5-819f-bb25612da277.png)

Someone still has to explain me why I don't need any ""path"" in the import for moment while I need it for angular2. Is it 'cause `moment` is somehow ""global""?? Otherwise I'll find it out :wink: 
",juristr,valorkin
141,2015-12-08 12:53:07,"oh I see, thx a lot @valorkin.

What do u think of including by default the `tsd.json` and reference the `tsd.d.ts` directly from the `_custom.d.ts` in this seed project? Would help newbies to get started easier, don't you think? 
",juristr,valorkin
141,2015-12-08 14:56:01,"we're planning on switching to `typings` rather than `tsd` since `typings` a superior typing manager. Thanks @valorkin for answering and closing the issue :+1: 
",gdi2290,valorkin
141,2015-12-08 14:57:37,"@gdi2290 Cool, ya, that's what I was already guessing when I saw #122 . Thx for answering
",juristr,gdi2290
137,2015-12-04 11:46:08,"@chriscurnow You can get them here: https://github.com/AngularClass/angular2-examples
",SekibOmazic,chriscurnow
136,2015-12-08 21:57:09,"Still don't get it, @dotcs can you provide an example? I have a 'styles' folder under app. Something like this
app
 |-styles
  |--main.scss

After installing sass-loader and put above config code at webpack.config. I don't see main.scss gets mapped to css and be loaded in browser.
",lanocturne,dotcs
136,2016-01-02 16:26:18,"If anyone else was a little confused to what @gdi2290 suggested:


",liampmccabe,gdi2290
136,2016-02-02 18:36:50,"@gdi2290 - Is it possible to override bootstrap variables along with the implementation from your wiki?
",dvh91,gdi2290
136,2016-02-10 12:07:10,"@gdi2290 your wiki page works fine,

if you import in your sass file other css files you have the problem with the relative URLs in your CSS files. The avoid that do this

https://github.com/bholloway/resolve-url-loader#

in webpack.config.js do this



@gdi2290
I don't like at all load my scss file in top level component by styles and encapsulation. Isn't there a possibility to load the compiled CSS file in the index.html file?

thx
 Michael
",mburger81,gdi2290
136,2016-08-23 16:45:29,"@rjmarques thanks for the link
@gdi2290  - the main issue I'm struggling with is the testing. Thanks for the offer - If you don't mind that would be awesome. 
",kingsleyh,gdi2290
136,2016-09-03 16:18:54,"Thanks to @akeating and @gdi2290 for all the advice above.  Works great.

Has anyone been able to get scss files loaded this way through styleUrls to work with HMR so only the CSS gets reloaded?  (In my testing this works with scss files included at a global scope, but not with ones included with components)
",abierbaum,gdi2290
136,2016-12-18 11:45:03,"@kingsleyh , @gdi2290 have you be able fix the issue? I have exact issue with the test like you. Thanks",dinhvan5481,gdi2290
127,2015-11-09 07:14:37,"@gdi2290 Performance matters, you're absolutely right. I have had another look at the regex and found out how to tweak it. The regex does now exclude all but the `ng2-bootstrap` package. Should be fine to merge now. Please have another look at it.
",dotcs,gdi2290
127,2015-12-05 10:26:23,"@gdi2290 The strategy is now to keep examples separated, right? Shall I port this PR to the new repo that contains the examples? https://github.com/AngularClass/angular2-examples
",dotcs,gdi2290
127,2015-12-09 22:20:06,"@dotcs Thanks for the PR example. I am getting font 404 errors when applying glyph-icons:  


",lanocturne,dotcs
126,2015-11-08 18:48:37,"@dotcs is correct. If we use templateUrl provided by angular then we lose out on some of the optimizations provided by webpack. Thanks for the issue, if you have anymore questions feel free to open another one or comment here
",gdi2290,dotcs
126,2015-12-19 04:08:17,"@gdi2290 Thank you! I was using an older version of the project. After cloning the latest, a lot has changed – glad to see the new file structure. Just starred the project by the way...
",louisscruz,gdi2290
126,2016-06-13 06:25:21,"@dotcs If I use template: require('./xx.html') to utilize the webpack bundle, how can I handle the performance issue in a big project, too many templates and too big bundle file.
",richdyang,dotcs
126,2016-11-06 10:21:49,"@richdyang @gdi2290 I just made a pull request to angular2-template-loader in order to be able to use a file-loader for templates : https://github.com/TheLarkInn/angular2-template-loader/pull/39
",yjaaidi,gdi2290
125,2015-11-10 05:18:52,"Thanks @gdi2290 - a couple of notes:
- For the webpack dev server to work in webworkers you need this patch: https://github.com/webpack/webpack-dev-server/pull/309 - hopefully it will get merged into master soon
- I don't think this is a good base for production apps yet, in part because the current router doesn't work in a web worker. This is being worked on this week - https://github.com/angular/angular/issues/3563
- I'll update this branch when routing is working
",matthewdenobrega,gdi2290
119,2015-10-29 07:34:34,"@jimthedev LGTM
",SekibOmazic,jimthedev
119,2015-10-29 14:28:16,"Sounds good @gdi2290. I think all we need to do to accomplish this is to:
- [x] create a dist folder if it doesn't exist
- [x] copy the contents of public into dist
- [x] copy `__build__` into dist
- [x] add dist to .gitignore
- [x] http server should serve from dist

Does that sound right?
",jimthedev,gdi2290
119,2015-10-29 16:46:08,"@gdi2290 This is complete and I've rebased. It favors the existing index.html and uses a node script to get everything to the right locations so that dist/ is generated. Can you review again?
",jimthedev,gdi2290
119,2015-11-15 19:31:06,"@jimthedev Mostly seems to work. Got this error though


",juristr,jimthedev
113,2015-10-28 20:36:34,"@SekibOmazic The 8px offset comes from the browser's default margin of the body. If you set `body { margin: 0 }`, the problem is solved. We could fix it by removing the browser's default margin or perhaps it would be better to make use of [normalize.css](https://necolas.github.io/normalize.css/) or suchlike.
",dotcs,SekibOmazic
113,2015-10-28 21:09:32,"@dotcs Thanks. The `body { margin: 0 }` solves the problem. But I hoped it could be done without using/changing css.
",SekibOmazic,dotcs
113,2015-10-28 22:50:28,"@dotcs Sorry for bothering, but please take look at this example:

http://fiddle.jshell.net/mattpodwysocki/pfCqq/show/

It has `body {margin:0}` (loaded with bootstrap.min.css) but if you disable it and try to drag picture it works smoothly. You can even change margin to `body{margin 50px}` it still goes smoothly. 
",SekibOmazic,dotcs
107,2015-10-23 13:40:40,"@dotcs Would you like to take #108 as well?
",SekibOmazic,dotcs
107,2015-10-23 13:48:00,"LGTM

@dotcs Could you please squash the commits?
",SekibOmazic,dotcs
104,2015-10-26 23:28:17,"@dotcs Could you please rebase and resolve merge conflicts? Your PR also collides with #111 (although #111 just disables rxjs examples)
",SekibOmazic,dotcs
104,2015-10-28 07:26:05,"@SekibOmazic Done. The I have enabled the rxjs examples again. With the fixes in #107 all rxjs examples are working fine again. Please give it a try.
",dotcs,SekibOmazic
104,2015-10-28 07:39:47,"@dotcs Thanks!
",SekibOmazic,dotcs
94,2015-10-13 21:23:10,"@krigton can you submit a PR to update protractor? I think I'm going to move the testing dependencies into another branch 
",gdi2290,krigton
93,2015-10-11 08:00:32,"@gdi2290 taking in a count, how often we get broken updates from npm lately, all dependencies made immutable
Is it fine?
",valorkin,gdi2290
90,2015-10-05 18:53:02,"@gdi2290 Thanks!
",Gabriel0402,gdi2290
84,2015-10-28 19:41:30,"Have same setup as @dotcs and for me it works fine.
",SekibOmazic,dotcs
80,2015-11-06 16:37:05,"@dotcs is correct in explaining how typescript works. if you need runtime type checks then you can check out this repo made by an angular core team member
https://github.com/vsavkin/RuntimeTypeChecks
If you have any more issues feel free to open another one or comment here
",gdi2290,dotcs
55,2015-09-25 21:14:32,"Sorry @gdi2290, I think you have to reopen this issue. I have had Chrome in my setup, not phantomjs. The latter indeed makes problems. Unfortunately I have no quick solution, so we have to start over.
",dotcs,gdi2290
55,2015-09-26 12:35:30,"@dotcs what promles makes PhantomJS Unit tests run?
",tamascsaba,dotcs
53,2015-08-14 21:38:25,"@tamascsaba how is es6-shim compared to traceur-runtime? does it include more polyfills?
",gdi2290,tamascsaba
51,2017-01-12 15:38:55,"Hi @gdi2290 ,

Disclaimer : i am the maintainer of compodoc ;)

Did you think interesting switching from typedoc to [compodoc](https://github.com/compodoc/compodoc) for the generated documentation ?

Here is a test : https://compodoc.github.io/angular2-webpack-starter/

The routes page will be redesigned this week. (https://github.com/compodoc/compodoc/issues/17#issuecomment-271153786)

Regards",vogloblinsky,gdi2290
46,2015-08-01 05:45:19,"Hi @m00s, if you update the reference to `""karma-webpack"": ""Dignifiedquire/karma-webpack#29fb1d801158f29cb0eb784edff69356705a7b74""` to `""karma-webpack"": ""^1.7.0""`  in `package.json` and re-run `npm install` it should work
",adrianfalleiro,m00s
46,2015-08-01 20:03:14,"@adrianfalleiro many thanks it worked
",m00s,adrianfalleiro
40,2015-07-28 08:26:36,"@gdi2290 You mean https://github.com/ReactiveX/RxJS (which is pre-alpha)?
",SekibOmazic,gdi2290
37,2015-07-26 16:35:23,"@gsans @gdi2290 This PR https://github.com/angular-class/angular2-webpack-starter/pull/34 also updates the build/instructions to include that fix :+1: 
",NathanWalker,gdi2290
35,2015-07-20 19:00:49,"@andersbc do you think you can make a pull-request?
",gdi2290,andersbc
35,2015-07-20 19:02:31,"@andersbc You can edit it directly in browser.
",SekibOmazic,andersbc
34,2015-07-22 04:23:01,"@NathanWalker if all the warnings are gone then let's merge it after you review my comments
",gdi2290,NathanWalker
34,2015-07-22 17:50:02,"Ok @gdi2290 I have this updated per your comments, thanks!
Although no warnings appear and everything appears to be solid, I'm having an issue with webpack (I think?) on my local system. It appears the **build** folder is never created or is not served up... (not sure what that issue is, if related to changes or maybe just something on my system... have you seen this before?):
![screen shot 2015-07-22 at 10 43 31 am](https://cloud.githubusercontent.com/assets/457187/8832719/62509d20-305f-11e5-9f67-ff90b1479033.png)
",NathanWalker,gdi2290
34,2015-07-23 19:34:56,"@gdi2290 Any thoughts on the above... I'd like to see these changes go in but just want to verify things but am unable to at moment. Seems if I just run `npm start`, and I view the app at `http://localhost:8080` the `__build__` folder does load in the browser (however console shows I need the express server running). But the minute, in a seperate tab window, I run `npm run express` and then reload the app, it fails to load in the `__build__` folder, it just goes away and I get `404`'s in the browser on all the requested javascript build files. What gives?
",NathanWalker,gdi2290
34,2015-07-24 01:16:18,"@NathanWalker are you free to screenshare?
",gdi2290,NathanWalker
34,2015-07-24 03:49:49,"@gdi2290 Just got back in, thanks for reaching out. Maybe in morning?
",NathanWalker,gdi2290
34,2015-07-26 00:59:51,"@gdi2290 the solution you offered here:
https://github.com/angular-class/angular2-webpack-starter/issues/37#issuecomment-124897281
Will probably work. I'll try tonight or tomorrow sometime.
",NathanWalker,gdi2290
34,2015-07-26 16:36:46,"Ok @gdi2290 That indeed did fix it so I updated the `package.json` to include that `NODE_ENV=development` when running the sample backend api server, as well as updated the README with a line on how to run it.
",NathanWalker,gdi2290
33,2015-07-20 03:15:03,"@andersbc What happens when you use an older loader version like `npm i typescript-simple-loader@0.3.0`? The only possible commit that (I think) can be causing issues is https://github.com/blakeembrey/typescript-simple-loader/commit/db5a44edb92e7e0b3f80f50c83a1dc315267c3cc
",blakeembrey,andersbc
33,2015-07-20 11:47:09,"@blakeembrey. thanks, it wasn't that though (it didn't change anything). I think the problem comes from some npm-related fault on my part when I installed the repo. I did a completely fresh install (git clone) and the problem disappeared. **A diff between the working and failing installation pointed to some differences in node locations, so I'm going to close the issue, since it is not related to this repo.**  

For the record:
The diff between my failing install and my new fresh install came up with a difference in a config.gypi file. In the working case the 'prefix' variable had the value of ''/usr/local"". In the failing case it was ""/home/anders/.nvm/versions/node/v0.12.7"" (there were other differences in this file as well). If I recall right I followed the instructions in [this article](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-with-nvm-node-version-manager-on-a-vps) between the failing and working installation. The article shows a command that makes the currently active node version (I'm using [node version manager](https://github.com/creationix/nvm)) global to all users - my hunch is that is that that command fixed my problem. 
",andersbc,blakeembrey
33,2015-07-20 11:51:43,"@andersbc Glad you sorted it! I use `n` personally but it's the same idea. If you're working with any projects that have binaries you'll need to reinstall them when you switch versions. I usually just `rm -rf node_modules && npm i`. 
",blakeembrey,andersbc
29,2015-07-16 16:20:19,"@gdi2290 If you need any help just ping me any time. Also if you have ideas for more (useful) RxJs showcases please let me know. I'd be happy to implement them.
",SekibOmazic,gdi2290
29,2015-07-16 17:18:44,"@SekibOmazic yeah when you get a chance check out the changes I had to make https://github.com/angular-class/angular2-webpack-starter/compare/daee9539c67951baf9414d0a12ebc9d171610e62...806bfd3d746ca9dbc12cb85136034db5f2f31e67
",gdi2290,SekibOmazic
25,2015-07-03 16:52:14,"@tamascsaba yeah I'm updating it now
",gdi2290,tamascsaba
24,2015-07-05 04:43:43,"@gdi2290 Thanks Patrick. I tried it and it worked well. I have just one more question, how to run the express server along with the build and watch processes? I tried it with the following script in NPM, but it stops at express and doesn't run watch:

""myServer"": ""npm install && npm run build && npm run express && npm run watch""

Is there a way to run both of them together?
",sravikiran,gdi2290
24,2015-07-05 18:56:30,"@gdi2290 Thanks again for the response. That makes sense.
",sravikiran,gdi2290
16,2015-11-06 16:38:47,"this will be solved via @valorkin's ng2-bootstrap module which supports bootstrap versions 3 and 4
",gdi2290,valorkin
1458,2017-02-07 13:21:56,"Did you look at s-panferov/awesome-typescript-loader#364

Instead of complicating the build with another static JSON configuration file that issue offers dynamic control over the scope of the checker.

Now, it might seem simple enough to add another `tsconfig.jit.json` but the reality is that someone has to maintain it...

Every change made in one `tsconfig.XXX.json`has to be replicated into all other tsconfig files.

We already have hard time dealing with the different TEST environment setup and once in a while we discover that a feature that was added to one config was not added to another....

Not to mention we have multiple webpack configs and multiple tsconfig configs.

The goal is to consolidate the configuration and not spread it, so I don't think adding a new file is the right approach.

Again, s-panferov/awesome-typescript-loader#364 offers a good solution, a little patience and we will fix this.

Of course, I'm not calling the shots, so please lets get input from @d3viant0ne @gdi2290 @colinskow 
 ",shlomiassaf,gdi2290
1458,2017-02-07 13:21:56,"Did you look at s-panferov/awesome-typescript-loader#364

Instead of complicating the build with another static JSON configuration file that issue offers dynamic control over the scope of the checker.

Now, it might seem simple enough to add another `tsconfig.jit.json` but the reality is that someone has to maintain it...

Every change made in one `tsconfig.XXX.json`has to be replicated into all other tsconfig files.

We already have hard time dealing with the different TEST environment setup and once in a while we discover that a feature that was added to one config was not added to another....

Not to mention we have multiple webpack configs and multiple tsconfig configs.

The goal is to consolidate the configuration and not spread it, so I don't think adding a new file is the right approach.

Again, s-panferov/awesome-typescript-loader#364 offers a good solution, a little patience and we will fix this.

Of course, I'm not calling the shots, so please lets get input from @d3viant0ne @gdi2290 @colinskow 
 ",shlomiassaf,d3viant0ne
1458,2017-02-07 13:21:56,"Did you look at s-panferov/awesome-typescript-loader#364

Instead of complicating the build with another static JSON configuration file that issue offers dynamic control over the scope of the checker.

Now, it might seem simple enough to add another `tsconfig.jit.json` but the reality is that someone has to maintain it...

Every change made in one `tsconfig.XXX.json`has to be replicated into all other tsconfig files.

We already have hard time dealing with the different TEST environment setup and once in a while we discover that a feature that was added to one config was not added to another....

Not to mention we have multiple webpack configs and multiple tsconfig configs.

The goal is to consolidate the configuration and not spread it, so I don't think adding a new file is the right approach.

Again, s-panferov/awesome-typescript-loader#364 offers a good solution, a little patience and we will fix this.

Of course, I'm not calling the shots, so please lets get input from @d3viant0ne @gdi2290 @colinskow 
 ",shlomiassaf,colinskow
1451,2017-01-31 22:14:08,"@gdi2290 @d3viant0ne 

Failure is due to #1382, once we merge and rebase it should be fine (node 5)

Main changes for this version is support for `file-loader` and additional assets created by loaders (urls in css, html etc) 

This will solve  #1406 and #1428

",shlomiassaf,gdi2290
1451,2017-01-31 22:14:08,"@gdi2290 @d3viant0ne 

Failure is due to #1382, once we merge and rebase it should be fine (node 5)

Main changes for this version is support for `file-loader` and additional assets created by loaders (urls in css, html etc) 

This will solve  #1406 and #1428

",shlomiassaf,d3viant0ne
1424,2017-01-26 15:51:24,Officially out of good ideas. @shlomiassaf @katallaxie - Either of you ever mess around with pug? I know this worked at some point but i've never done anything with pug / jade ,d3viant0ne,katallaxie
1424,2017-01-26 15:51:24,Officially out of good ideas. @shlomiassaf @katallaxie - Either of you ever mess around with pug? I know this worked at some point but i've never done anything with pug / jade ,d3viant0ne,shlomiassaf
1398,2017-01-21 02:53:46,"

//cc @shlomiassaf ",d3viant0ne,shlomiassaf
1387,2017-01-18 00:03:24,"@colinskow that's actually not related.

The modules are loaded at startup due to the route strategy, this is configurable.

They are still asynchronous, they just load automatically at startup but a separate bundle is there for each module.

This update doesn't add new functionality, it's more syntax related.

End result for all async code styles (require.ensure, System.import and import()) is logically the same...

Sent from my iPhone

> On Jan 18, 2017, at 1:54 AM, Colin Skow <notifications@github.com> wrote:
> 
> colinskow
",shlomiassaf,colinskow
1387,2017-01-23 21:20:57,"@gdi2290 make a quick review on this one, it's a block for another PR and the current loader's version (2.1.0) has bug fixes and improvements that we need to push into the starter.",shlomiassaf,gdi2290
1382,2017-01-23 21:21:59,"@gdi2290 @d3viant0ne @colinskow 

We need to decide on this one, if we won't upgrade we will soon start to see issues flying around....",shlomiassaf,gdi2290
1379,2017-01-20 21:58:00,"@DanielYKPan I just simply used the html-loader instead of the raw-loader.

I started to look at https://github.com/TheLarkInn/angular2-template-loader. However, I'm not sure if that's right. There's got to be an easier way to rewrite the paths.

@d3viant0ne Can you provide any insight into this issue?",jgornick,d3viant0ne
1379,2017-01-23 15:27:19,"@DanielYKPan I've found a solution that worked for me:



That configuration will run any required HTML files through the `html-loader` (see `angular2-template-loader`). The `html-loader` requires any paths specified in `img:src` (i.e. images). Because the images are now being required into the dependency graph, we use the `file-loader` for any required `jpg|png|gif` images and write their path to `/assets/img/[name].[ext]`. Now the URLs in the HTML templates have the correct path to the image assets specified in `img:src` (e.g. `{output.publicPath}/assets/img/[name].[ext]`). 

This also plays nicely with the `CopyWebpackPlugin` found in the `webpack.common.js` configuration.

@d3viant0ne Is it worth submitting a pull request to run the HTML templates through the `html-loader`?",jgornick,d3viant0ne
1378,2017-01-16 10:18:07,"This PR improves the efficiency of the TypeScript build and resolves several issues that result from TypeScript compiling unnecessary files.

The current behavior is that on every build TypeScript compiles every single `.ts` file in the project tree. This is inefficient and can lead to issues when different files in the project require different configurations or use conflicting Typings.

The solution is to tell TypeScript specifically which entry files to compile, and it will automatically compile all their needed dependencies too. With this configuration TypeScript avoids compiling unnecessary files. `awesome-typescript-loader` doesn't seem to support passing in a configuration object, so this PR introduces a Webpack plugin which writes a temporary `tsconfig.json` file containing the correct entry files.

The only drawback is that lazy loaded modules need to be declared in `src/app/lazy-loaded.ts` or they will not get compiled. Maybe @shlomiassaf can write a script that automatically detects and adds them.

- Resolves #1366 
- Improves #1364 

Overall this PR makes builds faster, avoids some Typings conflict issues, and makes watch mode more efficient by watching only necessary files. It is also needed for my Electron branch to separately watch the main and renderer builds.",colinskow,shlomiassaf
1375,2017-01-15 00:41:21,"It appears this is intentional. Feel free to turn it back on in your builds.

[`config/webpack.prod.js#L319`](https://github.com/AngularClass/angular2-webpack-starter/blob/master/config/webpack.prod.js#L319)

Meanwhile we can discuss here which Node options should be enabled by default in this repository.

@d3viant0ne do you have an opinion?",colinskow,d3viant0ne
1371,2017-01-13 19:01:23,"So something odd going on here that needs to be figured out.

`'awesome-typescript-loader?{configFileName: ""tsconfig.webpack.json""}',` is as it should be per the `awesome-typescript-loader` api docs.

The three of you that were having issues with this.

Are these fresh clones of the repo?
What is your NodeJS Version?
What OS are you running on?

That ""workaround"" should be causing the loader to use it's default which means it's targeting `tsconfig.json` not `tsconfig.webpack.json`

//cc @colinskow ",d3viant0ne,colinskow
1370,2017-01-12 16:00:24,"@vogloblinsky Dropped a comment in another issue in regards to switching from TypeDoc to Compodoc and was kind enough to spin up a demo - https://compodoc.github.io/angular2-webpack-starter/

The options are ...

- Keep TypeDoc.
- Switch to Compodoc.
- Drop doc generation and let users add what they will.

Personally I don't run docs on my applications currently, though [Compodoc](https://github.com/compodoc/compodoc) is the first offering that has the potential to drive enough value to warrant the addition.

//cc @colinskow @katallaxie @shlomiassaf ",d3viant0ne,katallaxie
1370,2017-01-12 16:00:24,"@vogloblinsky Dropped a comment in another issue in regards to switching from TypeDoc to Compodoc and was kind enough to spin up a demo - https://compodoc.github.io/angular2-webpack-starter/

The options are ...

- Keep TypeDoc.
- Switch to Compodoc.
- Drop doc generation and let users add what they will.

Personally I don't run docs on my applications currently, though [Compodoc](https://github.com/compodoc/compodoc) is the first offering that has the potential to drive enough value to warrant the addition.

//cc @colinskow @katallaxie @shlomiassaf ",d3viant0ne,shlomiassaf
1370,2017-01-12 16:00:24,"@vogloblinsky Dropped a comment in another issue in regards to switching from TypeDoc to Compodoc and was kind enough to spin up a demo - https://compodoc.github.io/angular2-webpack-starter/

The options are ...

- Keep TypeDoc.
- Switch to Compodoc.
- Drop doc generation and let users add what they will.

Personally I don't run docs on my applications currently, though [Compodoc](https://github.com/compodoc/compodoc) is the first offering that has the potential to drive enough value to warrant the addition.

//cc @colinskow @katallaxie @shlomiassaf ",d3viant0ne,colinskow
1367,2017-01-12 23:24:25,"@katallaxie you haven't submitted a pull request for i18n yet!
https://angular.io/docs/ts/latest/cookbook/i18n.html",colinskow,katallaxie
1360,2017-01-10 20:02:20,@gdi2290 Protractor requires node 6.9.x +...,shlomiassaf,gdi2290
1358,2017-01-09 17:02:04,"@colinskow @abhishekisnot @d3viant0ne @gdi2290 

This is my take on DLL integration: Using a plugin to control the whole process.

The plugin internally injects the low level DLL plugins provided by webpack (`DllPlugin`, `DllRegerencePlugin`) into the webpack instances.

The plugin handles both the webpack instance it get's registered on and a new webpack instance it creates for bundle generation.

The sole purpose of this plugin is to detect changes to the bundle structure.

Few points:
  - The plugin is async (promises). This is for future support of webpack package resolution (currently using node). This is important since webpack can resolve from other directories other then `node_module`.

  - The plugin is ready for live re-bundling. It detects a change in the package level so it can trigger a build per bundle. This will come in handy once live re-bundling is supported.

  - No need for extra configuration, everything is in the plugin, no extra commands.  
This makes it super easy to opt-out, just remove the plugin from `plugins`

> If a package is missing the process will throw (using the current config), it will not install from `npm` or `yarn`. This is how it should be, the plugin is not responsible for fetching packages, it just bundles the existing. 

[See source code](https://github.com/shlomiassaf/webpack-dll-bundles-plugin)

Change to the repo is minimal.

### PLEASE DO NOT MERGE UNTIL DISCUSSION ENDS

I did not have time for unit tests and proper documentation, I this PR is accepted I will appreciate any help on tests, documentation and adding support to some features.

Thanks.
",shlomiassaf,gdi2290
1358,2017-01-09 17:02:04,"@colinskow @abhishekisnot @d3viant0ne @gdi2290 

This is my take on DLL integration: Using a plugin to control the whole process.

The plugin internally injects the low level DLL plugins provided by webpack (`DllPlugin`, `DllRegerencePlugin`) into the webpack instances.

The plugin handles both the webpack instance it get's registered on and a new webpack instance it creates for bundle generation.

The sole purpose of this plugin is to detect changes to the bundle structure.

Few points:
  - The plugin is async (promises). This is for future support of webpack package resolution (currently using node). This is important since webpack can resolve from other directories other then `node_module`.

  - The plugin is ready for live re-bundling. It detects a change in the package level so it can trigger a build per bundle. This will come in handy once live re-bundling is supported.

  - No need for extra configuration, everything is in the plugin, no extra commands.  
This makes it super easy to opt-out, just remove the plugin from `plugins`

> If a package is missing the process will throw (using the current config), it will not install from `npm` or `yarn`. This is how it should be, the plugin is not responsible for fetching packages, it just bundles the existing. 

[See source code](https://github.com/shlomiassaf/webpack-dll-bundles-plugin)

Change to the repo is minimal.

### PLEASE DO NOT MERGE UNTIL DISCUSSION ENDS

I did not have time for unit tests and proper documentation, I this PR is accepted I will appreciate any help on tests, documentation and adding support to some features.

Thanks.
",shlomiassaf,d3viant0ne
1358,2017-01-09 17:02:04,"@colinskow @abhishekisnot @d3viant0ne @gdi2290 

This is my take on DLL integration: Using a plugin to control the whole process.

The plugin internally injects the low level DLL plugins provided by webpack (`DllPlugin`, `DllRegerencePlugin`) into the webpack instances.

The plugin handles both the webpack instance it get's registered on and a new webpack instance it creates for bundle generation.

The sole purpose of this plugin is to detect changes to the bundle structure.

Few points:
  - The plugin is async (promises). This is for future support of webpack package resolution (currently using node). This is important since webpack can resolve from other directories other then `node_module`.

  - The plugin is ready for live re-bundling. It detects a change in the package level so it can trigger a build per bundle. This will come in handy once live re-bundling is supported.

  - No need for extra configuration, everything is in the plugin, no extra commands.  
This makes it super easy to opt-out, just remove the plugin from `plugins`

> If a package is missing the process will throw (using the current config), it will not install from `npm` or `yarn`. This is how it should be, the plugin is not responsible for fetching packages, it just bundles the existing. 

[See source code](https://github.com/shlomiassaf/webpack-dll-bundles-plugin)

Change to the repo is minimal.

### PLEASE DO NOT MERGE UNTIL DISCUSSION ENDS

I did not have time for unit tests and proper documentation, I this PR is accepted I will appreciate any help on tests, documentation and adding support to some features.

Thanks.
",shlomiassaf,colinskow
1358,2017-01-10 08:18:52,"So we're just missing feedback from @d3viant0ne.

My thinking on separating the config file is that if I want to pull the latest `webpack.dev.js` from this repo, there are less conflicts to resolve if the DLL config (which most people will customize) is in a separate file. But I'm fine with either way.",colinskow,d3viant0ne
1352,2017-01-06 23:16:03,"We have historically not been very consistent in the maintenance of feature branches and I have always been partial to the approach @mgechev took where major features were maintained in forks with a link to them added to the readme of the base.

Keeps the issues & pull requests focused a bit better imo.

Like the idea btw :)",d3viant0ne,mgechev
1352,2017-01-06 23:34:51,"Don't take my opinion as law, if @katallaxie / @gdi2290 think it's a good idea then by all means, have at it.
",d3viant0ne,gdi2290
1352,2017-01-06 23:34:51,"Don't take my opinion as law, if @katallaxie / @gdi2290 think it's a good idea then by all means, have at it.
",d3viant0ne,katallaxie
1347,2017-01-06 22:16:04,"I am pretty sure the stance on autoprefixer in the past was if people want to use it, they can add it but @gdi2290 didn't want it in the starter as it adds more complexity for limited usefulness.

Personally I agree with @colinskow in regards to this being a starting point and thus we really only want to include things that are of benefit to everyone using the starter to build upon.",d3viant0ne,gdi2290
1344,2017-01-06 06:12:10,"* **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)
Upgrade to `ngc-webpack@1.1.0`

* **Other information**:
`ngc-webpack@1.1.0` comes with 2 major improvements:

  - Run the angular complier from the `NgcWebpackPlugin`  
this makes configuration easier, removes cli steps and provides more control over the compilation

  - Remove `@Component` resources (template/styles) from the bundle.  
This is actually a great improvement to bundle size...
For each `@Component` the AOT compiler compiles it creates new representation for the templates (html, styles) of that `@Components`. It means that there is no need for the source templates, they take a lot of space... **Webpack** bundles out source files and the compiler files (`ngfactory`) so we get 2 versions of the same template/style in our bundle.  
This feature is `NormalModuleReplacementPlugin` for identified resources... the templates are replaced with empty files.

@gdi2290 @d3viant0ne please review...

Although I did full tests and double checks I suggest we wait several days for people to test this before merging.

Thanks.",shlomiassaf,gdi2290
1344,2017-01-06 06:12:10,"* **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)
Upgrade to `ngc-webpack@1.1.0`

* **Other information**:
`ngc-webpack@1.1.0` comes with 2 major improvements:

  - Run the angular complier from the `NgcWebpackPlugin`  
this makes configuration easier, removes cli steps and provides more control over the compilation

  - Remove `@Component` resources (template/styles) from the bundle.  
This is actually a great improvement to bundle size...
For each `@Component` the AOT compiler compiles it creates new representation for the templates (html, styles) of that `@Components`. It means that there is no need for the source templates, they take a lot of space... **Webpack** bundles out source files and the compiler files (`ngfactory`) so we get 2 versions of the same template/style in our bundle.  
This feature is `NormalModuleReplacementPlugin` for identified resources... the templates are replaced with empty files.

@gdi2290 @d3viant0ne please review...

Although I did full tests and double checks I suggest we wait several days for people to test this before merging.

Thanks.",shlomiassaf,d3viant0ne
1343,2017-01-06 17:05:46,"As I understand it and i'm going off docs I read quite some time ago, we only need to set `baseUrl` if we are defining `paths` which iirc is just set to an empty object.

//cc @colinskow @gdi2290 <--- Need someone more knowledgable with the inner workings of TypeScript to answer this one :)",d3viant0ne,gdi2290
1343,2017-01-06 17:05:46,"As I understand it and i'm going off docs I read quite some time ago, we only need to set `baseUrl` if we are defining `paths` which iirc is just set to an empty object.

//cc @colinskow @gdi2290 <--- Need someone more knowledgable with the inner workings of TypeScript to answer this one :)",d3viant0ne,colinskow
1341,2017-01-10 22:56:03,@shlomiassaf's implementation is better so I'm closing this ;-),colinskow,shlomiassaf
1335,2017-01-05 15:54:00,"The requirements to support any number of angular 1.x versions is a rabbit hole filled with stylistically & architecturally different upgrade applications.

- This is beyond the scope of what this was built for.
- It would add a bunch of bloat for the remainder of the community who won't ever use it.
- Too many ngUpgrade quirks to not purpose build a solution.

In short, there is no good way to take the one size fits all approach to upgrading existing 1.x applications. It's certainly possible to modify the starter to support an upgrade path, it is not on the other hand something I see as beneficial for this repo or it's consumers.

//cc @katallaxie @colinskow @gdi2290 ",d3viant0ne,gdi2290
1335,2017-01-05 15:54:00,"The requirements to support any number of angular 1.x versions is a rabbit hole filled with stylistically & architecturally different upgrade applications.

- This is beyond the scope of what this was built for.
- It would add a bunch of bloat for the remainder of the community who won't ever use it.
- Too many ngUpgrade quirks to not purpose build a solution.

In short, there is no good way to take the one size fits all approach to upgrading existing 1.x applications. It's certainly possible to modify the starter to support an upgrade path, it is not on the other hand something I see as beneficial for this repo or it's consumers.

//cc @katallaxie @colinskow @gdi2290 ",d3viant0ne,katallaxie
1335,2017-01-05 15:54:00,"The requirements to support any number of angular 1.x versions is a rabbit hole filled with stylistically & architecturally different upgrade applications.

- This is beyond the scope of what this was built for.
- It would add a bunch of bloat for the remainder of the community who won't ever use it.
- Too many ngUpgrade quirks to not purpose build a solution.

In short, there is no good way to take the one size fits all approach to upgrading existing 1.x applications. It's certainly possible to modify the starter to support an upgrade path, it is not on the other hand something I see as beneficial for this repo or it's consumers.

//cc @katallaxie @colinskow @gdi2290 ",d3viant0ne,colinskow
1333,2017-01-04 08:22:18,"* **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)
Feature


* **What is the current behavior?** (You can also link to an open issue here)
As described in #1330 


* **What is the new behavior (if this is a feature change)?**
Introduce Webpack DLL feature to speed up build times during DEV builds only.


* **Other information**:
As mentioned in the issue comments, this feature is worth having for large projects. This PR is an attempt to do this with minimal changes to common webpack config thereby trying to strike balance between huge config blocks and having to rewrite all of webpack common config.
This PR however does not address webpack blocks or ability to opt in/out.

**This PR is still WIP, please do not merge unless WIP label is removed from PR title**

**Note:** The DLLs currently do not work and needs more work. This PR is raised in an attempt to get feedback per the issues comments on #1330. Currently I see below errors on console:
![screen shot 2017-01-04 at 12 18 43 am](https://cloud.githubusercontent.com/assets/802242/21635669/c91dd3fe-d213-11e6-998b-4a7fe187a30c.png)

cc: @colinskow, @shlomiassaf, @d3viant0ne 
",osdevisnot,d3viant0ne
1333,2017-01-04 08:22:18,"* **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)
Feature


* **What is the current behavior?** (You can also link to an open issue here)
As described in #1330 


* **What is the new behavior (if this is a feature change)?**
Introduce Webpack DLL feature to speed up build times during DEV builds only.


* **Other information**:
As mentioned in the issue comments, this feature is worth having for large projects. This PR is an attempt to do this with minimal changes to common webpack config thereby trying to strike balance between huge config blocks and having to rewrite all of webpack common config.
This PR however does not address webpack blocks or ability to opt in/out.

**This PR is still WIP, please do not merge unless WIP label is removed from PR title**

**Note:** The DLLs currently do not work and needs more work. This PR is raised in an attempt to get feedback per the issues comments on #1330. Currently I see below errors on console:
![screen shot 2017-01-04 at 12 18 43 am](https://cloud.githubusercontent.com/assets/802242/21635669/c91dd3fe-d213-11e6-998b-4a7fe187a30c.png)

cc: @colinskow, @shlomiassaf, @d3viant0ne 
",osdevisnot,colinskow
1333,2017-01-04 08:22:18,"* **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)
Feature


* **What is the current behavior?** (You can also link to an open issue here)
As described in #1330 


* **What is the new behavior (if this is a feature change)?**
Introduce Webpack DLL feature to speed up build times during DEV builds only.


* **Other information**:
As mentioned in the issue comments, this feature is worth having for large projects. This PR is an attempt to do this with minimal changes to common webpack config thereby trying to strike balance between huge config blocks and having to rewrite all of webpack common config.
This PR however does not address webpack blocks or ability to opt in/out.

**This PR is still WIP, please do not merge unless WIP label is removed from PR title**

**Note:** The DLLs currently do not work and needs more work. This PR is raised in an attempt to get feedback per the issues comments on #1330. Currently I see below errors on console:
![screen shot 2017-01-04 at 12 18 43 am](https://cloud.githubusercontent.com/assets/802242/21635669/c91dd3fe-d213-11e6-998b-4a7fe187a30c.png)

cc: @colinskow, @shlomiassaf, @d3viant0ne 
",osdevisnot,shlomiassaf
1330,2017-01-04 10:29:02,"> In short, yes we will add DLL support in the future but as stated above we will have to rewrite most of the webpack configs to provide the proper development experience 

Wait what @d3viant0ne? https://github.com/AngularClass/angular2-webpack-starter/tree/v6 

I'm honestly confused by this repo. The V6 branch is based on https://github.com/qdouble/angular-webpack2-starter which is at the moment one of the best starters when you want both AOT and DLLs. V6 was more tidy though, cleaned up, a little better file structure, typescript used in configs etc. a pretty good start, and the best thing was that it was using using @ngtools/webpack, so it was less hacky than qdouble's starter. There were couple of issues(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-257735362) mostly with @ngtools/webpack, which kinda blocked it, most of them are now resolved though.

So what's the problem with going forward with that branch and finish it? Sometimes I feel like AngularClass's members never talk to each other, let alone to the community when it comes to plans or organization. I'd be more than willing to help finish it, if I at least knew what your plans are, what you feel is wrong with it or whatever, asked twice(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-267594608 & https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-269942568) didn't get any answer. 

@katallaxie @gdi2290 @shlomiassaf @colinskow 

// edit

Found this https://github.com/katallaxie/angular2-preboot which looks like updated version of the V6 branch. So what exactly is the problem here?",fxck,katallaxie
1330,2017-01-04 10:29:02,"> In short, yes we will add DLL support in the future but as stated above we will have to rewrite most of the webpack configs to provide the proper development experience 

Wait what @d3viant0ne? https://github.com/AngularClass/angular2-webpack-starter/tree/v6 

I'm honestly confused by this repo. The V6 branch is based on https://github.com/qdouble/angular-webpack2-starter which is at the moment one of the best starters when you want both AOT and DLLs. V6 was more tidy though, cleaned up, a little better file structure, typescript used in configs etc. a pretty good start, and the best thing was that it was using using @ngtools/webpack, so it was less hacky than qdouble's starter. There were couple of issues(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-257735362) mostly with @ngtools/webpack, which kinda blocked it, most of them are now resolved though.

So what's the problem with going forward with that branch and finish it? Sometimes I feel like AngularClass's members never talk to each other, let alone to the community when it comes to plans or organization. I'd be more than willing to help finish it, if I at least knew what your plans are, what you feel is wrong with it or whatever, asked twice(https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-267594608 & https://github.com/AngularClass/angular2-webpack-starter/issues/885#issuecomment-269942568) didn't get any answer. 

@katallaxie @gdi2290 @shlomiassaf @colinskow 

// edit

Found this https://github.com/katallaxie/angular2-preboot which looks like updated version of the V6 branch. So what exactly is the problem here?",fxck,gdi2290
1321,2017-01-02 01:09:14,"This PR replaces the `angular-router-loader` with the `ng-router-loader`

For more details read [here](https://github.com/shlomiassaf/ng-router-loader)

@gdi2290 ",shlomiassaf,gdi2290
1321,2017-01-05 03:42:51,"@d3viant0ne @gdi2290 @colinskow I'v added some nested & multiple router samples ...

The `+detail` module loads async and then has an aux route to another async loaded module (`+child-detail`)

Also added the `barrel` module to show multiple async routes working...
The `+barrel` module loads async and then has an aux route to another async loaded module (`+barrel-detail`)

The barrel might be too much, take a loot.",shlomiassaf,gdi2290
1309,2016-12-29 01:36:30,"* **I'm submitting a ...** bug report

* **What is the current behavior?**
When running tests while using a getter for `ModuleWithProviders` (e.g: `forRoot()`) an exception is thrown: `TypeError: Cannot convert undefined or null to object`

Running build/dev (`npm run start`) works without an error.

Reproduce:

  - Create a file `test.module.ts` in `app` folder.  

  - Paste this code:



  - Open `app.component.spec.ts` and replace the whole content with:  


> What was added:
import { CoreModule } from './test.module';  
imports: [ CoreModule.forRoot() ],


Now `npm run test` see error:


Remove `.forRoot()` -> `npm run test` -> # NO ERROR!

**Using latest master.**

@gdi2290 @d3viant0ne I have no clue...",shlomiassaf,gdi2290
1309,2016-12-29 01:36:30,"* **I'm submitting a ...** bug report

* **What is the current behavior?**
When running tests while using a getter for `ModuleWithProviders` (e.g: `forRoot()`) an exception is thrown: `TypeError: Cannot convert undefined or null to object`

Running build/dev (`npm run start`) works without an error.

Reproduce:

  - Create a file `test.module.ts` in `app` folder.  

  - Paste this code:



  - Open `app.component.spec.ts` and replace the whole content with:  


> What was added:
import { CoreModule } from './test.module';  
imports: [ CoreModule.forRoot() ],


Now `npm run test` see error:


Remove `.forRoot()` -> `npm run test` -> # NO ERROR!

**Using latest master.**

@gdi2290 @d3viant0ne I have no clue...",shlomiassaf,d3viant0ne
1307,2016-12-28 22:28:44,"Enhancing AOT support from #885 #1298  ...

@d3viant0ne @colinskow @qdouble 

**What is the current behavior?** (You can also link to an open issue here)
When using AOT compilation, `@Component` templates (HTML, CSS, SCSS, etc...) are not running through the webpack loader chain.

Development output might not be the same as AOT output.

For example, CSS that goes through `postCSS` processing (autoprefixing, etc..) will not work when AOT compiling.  

If we want to use SCSS, html transformation or any other webpack goodie we can't.


* **What is the new behavior (if this is a feature change)?**
Use  [ngc wrapper](https://github.com/shlomiassaf/ngc-webpack) to provide resourced after they have passed the webpack loader chain, based on the webpack configuration provided.

The type of resource is irrelevant, if there's a loader configuration for it it will go through it.
",shlomiassaf,d3viant0ne
1307,2016-12-28 22:28:44,"Enhancing AOT support from #885 #1298  ...

@d3viant0ne @colinskow @qdouble 

**What is the current behavior?** (You can also link to an open issue here)
When using AOT compilation, `@Component` templates (HTML, CSS, SCSS, etc...) are not running through the webpack loader chain.

Development output might not be the same as AOT output.

For example, CSS that goes through `postCSS` processing (autoprefixing, etc..) will not work when AOT compiling.  

If we want to use SCSS, html transformation or any other webpack goodie we can't.


* **What is the new behavior (if this is a feature change)?**
Use  [ngc wrapper](https://github.com/shlomiassaf/ngc-webpack) to provide resourced after they have passed the webpack loader chain, based on the webpack configuration provided.

The type of resource is irrelevant, if there's a loader configuration for it it will go through it.
",shlomiassaf,colinskow
1304,2017-01-04 00:43:25,"@d3viant0ne it doesn't appear we have any disagreements with this PR. @shlomiassaf suggests using the naming convention `*.global.scss` for external stylesheets, but I believe this is not necessary with everything in the `src/styles` directory.

I suggest we merge this so I can start working on other enhancements like DLLs without having to rebase.",colinskow,d3viant0ne
1298,2016-12-25 03:29:13,"@colinskow - I'll take a look at this in the morning.

//cc @gdi2290 @katallaxie should also take a look",d3viant0ne,gdi2290
1298,2016-12-25 03:29:13,"@colinskow - I'll take a look at this in the morning.

//cc @gdi2290 @katallaxie should also take a look",d3viant0ne,katallaxie
1298,2016-12-27 00:20:59,"@katallaxie not all Angular apps are compatible with AoT so I wouldn't want to break people's builds by setting it as default. The idea is to add features without making breaking changes.

As mentioned above @ngtools/webpack is still unstable and I wasn't able to get it to work with this repo. But when they work out the bugs it is the best way to go with Webpack.

The BundleAnalyzerPlugin adds 5.5mb to dependencies that are already 320mb+. It is very useful for ensuring that the builds contain what we expect them to contain and is optional to use via a command line flag.",colinskow,katallaxie
1298,2016-12-27 03:13:25,"@katallaxie - AOT should not be the default for `prod` for exactly what @colinskow stated, it breaks things. After a developer has his application running stable on AoT, he or she can default it to AoT in their project. We should be enabling features in a starter, not mandating them.

Given the commitment required to create a large application published AoT, this is a feature that should be off by default & opt in or it's going to break every production build this starter backs when they pick up the changes.",d3viant0ne,katallaxie
1298,2016-12-27 03:17:07,"I do on the other hand agree about @katallaxie's comment in regards to the BundleAnalyzerPlugin, It's trivial to add and would suggest this be transfered to Wiki instructions & not added to the seed directly ( it's big ).

We get basic bundle analysis via Webpack RC, if people want all the bells & whistles they can add `BundleAnalyzerPlugin` ",d3viant0ne,katallaxie
1297,2016-12-29 02:07:03,"@sshev @d3viant0ne This is a tricky one... any clues?
",shlomiassaf,d3viant0ne
1226,2016-11-30 21:21:09,"@katallaxie - The yarn.lock was removed by @gdi2290. The ignore for yarn is also at his request.

It has also been removed from the travis build. There is no need for yarn in the base seed, if people want to use it in their personal projects adding it is simple.",d3viant0ne,gdi2290
1208,2016-11-25 08:31:52,@chuyeow @jashmenn @eppsilon @diegochavez @teropa ,zenghuiLee,eppsilon
1208,2016-11-25 08:31:52,@chuyeow @jashmenn @eppsilon @diegochavez @teropa ,zenghuiLee,chuyeow
1208,2016-11-25 08:31:52,@chuyeow @jashmenn @eppsilon @diegochavez @teropa ,zenghuiLee,diegochavez
1205,2016-11-25 03:25:09,"* **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)
Workaround for bug outlined in #1188 

* **Other information**:
Further investigation required for the behavioral change between `use:` & `loader:` in `webpack.config.js`


//cc @gdi2290 @katallaxie ",d3viant0ne,gdi2290
1205,2016-11-25 03:25:09,"* **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)
Workaround for bug outlined in #1188 

* **Other information**:
Further investigation required for the behavioral change between `use:` & `loader:` in `webpack.config.js`


//cc @gdi2290 @katallaxie ",d3viant0ne,katallaxie
1199,2016-11-23 17:36:51,"@maxx0r - iirc you can't use `require` with AoT compilation. That said, I personally agree that material2 should be a Wiki article & not a branch.

//cc @gdi2290 / @katallaxie - Anyone object to creating a simple wiki article and removing the material2 branch? Getting material2 integrated into the starter isn't complicated enough to warrant maintaining the branch imo.",d3viant0ne,gdi2290
1199,2016-11-23 17:36:51,"@maxx0r - iirc you can't use `require` with AoT compilation. That said, I personally agree that material2 should be a Wiki article & not a branch.

//cc @gdi2290 / @katallaxie - Anyone object to creating a simple wiki article and removing the material2 branch? Getting material2 integrated into the starter isn't complicated enough to warrant maintaining the branch imo.",d3viant0ne,katallaxie
1199,2016-11-28 17:29:08,"@d3viant0ne I would also rather have this as a wiki article, having to pull master in every couple of weeks is tedious and error prone and all of the content that is in the branch can be contained in an article instead. @gdi2290 if you don't have objections I'm gonna go ahead with this.",ebeal,gdi2290
1188,2016-11-20 21:19:16,"I would need some help to fix this
cc @d3viant0ne @katallaxie
",gdi2290,katallaxie
1188,2016-11-20 21:19:16,"I would need some help to fix this
cc @d3viant0ne @katallaxie
",gdi2290,d3viant0ne
1175,2016-12-22 13:27:33,"I found the same issue. ""commonConfig({env: ENV}).metadata"" is always undefined.

We need to get the metadata from LoaderOptionsPlugin, this worked for me but feels like a hack.



Related issue - the options in ""LoaderOptionsPlugin"" are not merged correctly either.

@gdi2290 is this an issue wth webpack-merge then?

",echo-sean,gdi2290
1152,2016-11-04 08:56:21,"this is open @katallaxie  why did you close this buddy?
",VishalGulati,katallaxie
1122,2016-12-28 15:11:27,"For all those in this thread, the proposed solution is outline in the PR #1304 from @colinskow. If you want a say in how this is implemented, now would be the time to do so. If nobody objects, i'll be landing that by e.o.d",d3viant0ne,colinskow
1118,2016-11-21 17:37:30,@sdemurjian can you explain it? Actually I'm not able to import font-awesome.,rafaelss95,sdemurjian
1118,2017-03-13 14:45:19,"I have to laugh reading this - first @sdemurjian says ""It's as simple as adding an element ..."", then after someone else has struggled with his solution that doesn't work, and identifies all the steps required, he comes back with ""Oops, yes was missing fonts"" !!! LOL.  I think this thread proves the very point of the original issue - that it needs (better) documenting !  To be honest its a lot messier to use the module than I expected - as in a lot of additional work over and above the initial npm install.",andrewlorenz,sdemurjian
1104,2016-10-27 01:18:44,"Agree with @katallaxie - This doesn't belong in a `starter` repo. Electron, although something I really like is situational at best. This is a great idea but just not something that belongs in this repo.

My suggestion would be to go the route that @NathanWalker with https://github.com/NathanWalker/angular-seed-advanced

Fork the starter, make your additions & squash them into a single commit to make it easier to pick up changes from upstream and once it's in good shape, I'm sure @gdi2290 wouldn't have an issue with adding a link to the README.md to make it easier to find your version of the `advanced starter`
",d3viant0ne,gdi2290
1104,2016-10-27 01:18:44,"Agree with @katallaxie - This doesn't belong in a `starter` repo. Electron, although something I really like is situational at best. This is a great idea but just not something that belongs in this repo.

My suggestion would be to go the route that @NathanWalker with https://github.com/NathanWalker/angular-seed-advanced

Fork the starter, make your additions & squash them into a single commit to make it easier to pick up changes from upstream and once it's in good shape, I'm sure @gdi2290 wouldn't have an issue with adding a link to the README.md to make it easier to find your version of the `advanced starter`
",d3viant0ne,NathanWalker
1103,2016-10-14 17:21:35,"- **I'm submitting a ...** bug/question about the decisions made in the repository

The release notes for v5.0.5 are misleading. The release notes show:

>  v5.0.5 - 52b4d4e
> Title: Angular 2
> @katallaxie katallaxie released this on Sep 2 · 35 commits to master since this release
> 
> @angular/*-2.0.0

The above suggests that the latest version (5.0.5) is on Angular 2.0.0, but taking a look at the package.json file, angular is still only on RC6. A long away off 2.0.0.

Manually updating package.json to 2.0.0 or 2.1.0 has no effect due to npm shrinkwrap forcing it back down to RC6.

3 questions:
1. Can the release notes be updated to be clear that this is NOT 2.0.0, but it is RC6. Or if the chosen commit for that tag was incorrect, and it should be 2.0.0, can the tag be updated.
2. The code in master is on angular 2.0.0, but using latest master (039deb5) causes other dependancy warnings. What is the most stable 2.0.0 commit, if there is one. Is perhaps the 2.1.0 branch more stable/ready yet?
3. What are the pros/cons/reasons one would need/want to continue to use the angular class starter kit over doing webpack yourself. I like the starter kit, but having this dependancy in the middle preventing us from using the latest released version of angular is causing an issue for us. If someone could outline the pros and cons of not using the starter kit, that would be appreciated, to help decide the best course of action.

_Note: I took out all the other questions in the template bug report, as this does not apply to a specific environment, and is a question about the repo/code in general. Can provide the info if needed._
",russelltrafford,katallaxie
1089,2016-11-08 01:15:23,"@katallaxie , it looks like [this commit](https://github.com/AngularClass/angular2-webpack-starter/commit/7bfba744ebfa77c5dfb30524e639e394a1d92c0e#diff-f737fedb5357468044db2dbe98eb0218L39) moved the `metadata` property from the root of the config object into the  `HtmlWebpackPlugin` in `webpack.common.js` however other features relay on it for useful information (i.e: it's not only for the HtmlWebpackPlugin). Github pages is one but also [webpack.dev.js#23](https://github.com/AngularClass/angular2-webpack-starter/blob/master/config/webpack.dev.js#L23)  and [webpack.prod.js#27](https://github.com/AngularClass/angular2-webpack-starter/blob/master/config/webpack.prod.js#L27) assume it's there.

I will duplicate the `metadata` property in `webpack.common.js` to be both on root object and in `HtmlWebpackPlugin` for now to restore order.

However, some refactoring is needed since the logical process is wrong.
`HtmlWebpackPlugin` is set in `webpack.common.js` but a user might want to alter some values in dev/prod... 

It's not for this topic but I think common should have a pre process callback that can get the (almost) final config object and do some work such as adding plugins etc using updated/final objects.

I think an issue is needed for this, for now I will just duplicate to restore github pages functionality.
",shlomiassaf,katallaxie
1089,2016-11-08 02:31:04,"@katallaxie please review before I merge.
",shlomiassaf,katallaxie
1089,2016-11-21 23:54:39,"reminder, can I have another eye looking at this before I merge?

@katallaxie @gdi2290 

Thanks!",shlomiassaf,gdi2290
1089,2016-11-21 23:54:39,"reminder, can I have another eye looking at this before I merge?

@katallaxie @gdi2290 

Thanks!",shlomiassaf,katallaxie
1079,2016-10-07 15:26:32,"I've taken a very similar approach on my work projects. Curious what @katallaxie / @gdi2290's thoughts are on the debug workflow.
",d3viant0ne,gdi2290
1079,2016-10-07 15:26:32,"I've taken a very similar approach on my work projects. Curious what @katallaxie / @gdi2290's thoughts are on the debug workflow.
",d3viant0ne,katallaxie
1079,2017-01-09 22:14:50,"Hi,

@gdi2290 @katallaxie can you please merge this PR if it's fine for you before it diverges again?

Thank you in advance guys! And happy new year :)",yjaaidi,gdi2290
1079,2017-01-09 22:14:50,"Hi,

@gdi2290 @katallaxie can you please merge this PR if it's fine for you before it diverges again?

Thank you in advance guys! And happy new year :)",yjaaidi,katallaxie
1071,2016-09-30 05:47:35,"@gdi2290 , i am trying ng2-webpack-starter, and install @types/core-js, @types/dojo into modules files. but when run npm start, there are two Duplicate identifier 'require' errors. 

[default] E:\GitHub\angular2-webpack-starter\node_modules\@types\dojo\index.d.ts:7:18
    Duplicate identifier 'require'.
[default] E:\GitHub\angular2-webpack-starter\node_modules\@types\node\index.d.ts:73:13
    Duplicate identifier 'require'.
[default] Checking finished with 2 errors

i have put commit my test project to github(https://github.com/dyh333/ng2-arcgis-test), which is forked from angular2-webpack-starter
the tsconfig.json is [https://github.com/dyh333/ng2-arcgis-test/blob/master/tsconfig.json]()
the typings.json is [https://github.com/dyh333/ng2-arcgis-test/blob/master/typings.json]()

would you please help to see what is problem, thanks
",dyh333,gdi2290
1055,2016-10-07 15:28:47,"Agree with @katallaxie - While I docker everything under the sun, many still use vagrant or don't containerize at all. This as examples in the readme would accomplish the same thing while allowing flexibility to implement without the merge headaches as everyone's compose stack is going to vary significantly.
",d3viant0ne,katallaxie
993,2016-09-13 12:08:49,"I noticed that RC7 was released a couple of hours ago and I have upgraded to it. I now get two warnings in the console and typescript compiler.



Think once you update this project to RC7 you might get the same warnings? Any ideas how to fix this?

Edit: This is really sloppy, but to get rid of the warnings just comment out line 32 in node_modules/webpack/lib/dependencies/ContextDependencyHelpers.js until proper fix is available.

Edit2: See @Simon-Briggs answer for proper fix. 
",runtheyards,Simon-Briggs
981,2016-09-11 11:22:11,"@gdi2290 need comments
",zigzag95,gdi2290
980,2016-09-10 19:16:05,"Yes its not the right way.. and you should always host in root folder... this way you can avoid this issue...

'/' => root folder
'.' => current folder

base href=""/"" => states base folder is root .. 

or you may try changing    

baseUrl of

> const METADATA = {
>   title: 'Angular2 Webpack Starter by @gdi2290 from @AngularClass',
>   baseUrl: '/',
>   isDevServer: helpers.isWebpackDevServer()
> };

to 

>   baseUrl: '.',

 in config/webpack.common.js
",i7326,gdi2290
954,2016-09-21 08:27:55,"Given @gdi2290 is already implementing this in the Angular2 seed, would it not make more sense to simply port that over to the webpack starter. Consistency ftw :)
",d3viant0ne,gdi2290
948,2016-09-02 13:12:28,"- **I'm submitting a ...**
  [X] question about the decisions made in the repository

@katallaxie

While the enthusiasm is great, just slamming home changes without others having the opportunity to vet those changes kind of defeats the point of `community` & `code review`. 30 Commits directly to master, to include those to fix or remove features that shouldn't have landed between 27 Sept & 01 Aug.

It also means that everyone that uses the webpack-starter as a base project has to pick up those changes and merge them into what is usually a modified project, it gets tedious quickly.

I'm suggesting you start delivering changes as `complete, tested & vetted sets of work` through the standard `pull request` workflow that everyone else uses thus making the update process less labor intensive and less prone to blowing up peoples forks (which happened to me last week). 

`Landing your own code` is generally `frowned upon` and for good reason. A second ( or multiple ) sets of eyes is never, ever a bad thing.

![screen shot 2016-09-02 at 8 23 50 am](https://cloud.githubusercontent.com/assets/8420490/18205263/a9dad192-70e6-11e6-8701-664f551ede99.png)

//cc @gdi2290 
",d3viant0ne,gdi2290
948,2016-09-02 13:12:28,"- **I'm submitting a ...**
  [X] question about the decisions made in the repository

@katallaxie

While the enthusiasm is great, just slamming home changes without others having the opportunity to vet those changes kind of defeats the point of `community` & `code review`. 30 Commits directly to master, to include those to fix or remove features that shouldn't have landed between 27 Sept & 01 Aug.

It also means that everyone that uses the webpack-starter as a base project has to pick up those changes and merge them into what is usually a modified project, it gets tedious quickly.

I'm suggesting you start delivering changes as `complete, tested & vetted sets of work` through the standard `pull request` workflow that everyone else uses thus making the update process less labor intensive and less prone to blowing up peoples forks (which happened to me last week). 

`Landing your own code` is generally `frowned upon` and for good reason. A second ( or multiple ) sets of eyes is never, ever a bad thing.

![screen shot 2016-09-02 at 8 23 50 am](https://cloud.githubusercontent.com/assets/8420490/18205263/a9dad192-70e6-11e6-8701-664f551ede99.png)

//cc @gdi2290 
",d3viant0ne,katallaxie
948,2016-09-02 13:28:36,"This was in my PR https://github.com/AngularClass/angular2-webpack-starter/pull/944. Which I had @gdi2290 ask to comment on. The changes were perhaps a bit more complicated; but it was to the final removal of some APIs.
",katallaxie,gdi2290
944,2016-09-01 17:30:33,"@gdi2290 I have updated to RC6. There seems to be an issue with the `DedupePlugin`. Should we move ahead anyway? See https://github.com/angular/angular-cli/issues/1587
",katallaxie,gdi2290
942,2016-09-01 15:24:05,"this fixes #867
- **Other information**:

in response to @gdi2290 comment on #867 
",orizens,gdi2290
938,2016-08-31 19:53:20,"Hey @HansS sorry we weren't more transparent and thanks for purchasing the Master Bundle. We have the courses on a new schedule that is not reflected on the website and the order might change up a bit. This is mostly due to fit Angular 2's release which is very soon and due to the recent changes in `2.0.0-rc.5`. We thought it would be better if we recreate the courses using the new approach after Angular 2 is released. The delay of the reactive course is mostly my fault going back and forth with @Hendrixer on if we should teach our new reactive architecture that we have, or to use the [angular2-observe-decorators](https://github.com/AngularClass/angular2-observe-decorators), or to focus only on reactivity and state management (our original plan). We were also thinking about if we should teach more RxJS or move that into the Modern JavaScript course or provide that as a mini-course. We decided to stick with our original plan because the observe-decorators is teaching a new way to manage your app with my own proposed spec that might change if it's merged with the Angular codebase. Our new reactive architecture has all of the features that everyone is talking about (rxjs, redux, sagas, effects) plus a ton of features that no-one is talking about (past/present/future states, interop, priority rendering, isolated loops, hot module replacement, webworkers, universal) and would need a few more iterations to unify the whole story. A lot of sugar is needed before we release it to make the API more intuitive and will most likely be a free course.
",gdi2290,Hendrixer
925,2016-09-01 06:59:45,"@gdi2290 seems like the build fails because of a problem installing node-sass, but i dont experience this issue at all... i wonder if this can still be merged? or if i should just wait until the repo is upgraded to rc.6 now that it has been released?
",dweitz43,gdi2290
925,2016-09-02 21:12:17,"@katallaxie I avoid any modules that might cause problems when installing for example node-sass and CompressionPlugin
",gdi2290,katallaxie
915,2016-08-29 05:26:21,"@gdi2290 is there a specific reason why this cannot be merged? Am I missing something in the material integration?
",dweitz43,gdi2290
885,2016-11-01 17:03:03,"@kjartanvalur I'm effectively using [v6](https://github.com/AngularClass/angular2-webpack-starter/tree/v6) for production. I do not know what @gdi2290 plans are for further `dev`.
",katallaxie,gdi2290
812,2016-07-26 15:29:50,"Regarding 801 @abdulhaq-e i checked the typescript version in node modules is 2.0 beta 
even @gdi2290 i tried your suggestion but no luck.

i am not sure others are facing this.

Regards
",vivdkool,gdi2290
812,2016-07-26 15:29:50,"Regarding 801 @abdulhaq-e i checked the typescript version in node modules is 2.0 beta 
even @gdi2290 i tried your suggestion but no luck.

i am not sure others are facing this.

Regards
",vivdkool,abdulhaq-e
739,2016-06-29 19:24:40,"@ebeal looks like the issue was fixed in the angular2-material github repo, however i believe the packages may not have been updated in the npm registry yet. the package.json in the material2 icon tarball that is downloaded from npm still specifies 2.0.0-rc.1 as the version for the @angular/http peer dependency
",dweitz43,ebeal
691,2016-06-16 17:41:15,"cc @blakeembrey 
",gdi2290,blakeembrey
679,2016-06-11 00:18:36,"@gdi2290 please provide notes.

Structured as a plugin, allows building elements in different locations.

Do you like the naming convention?
",shlomiassaf,gdi2290
622,2016-07-23 10:19:22,"FWIW, I had the same issue and fixed it by updating to the latest version of this repo, which uses Typescript 2 and updated type definitions for various libraries (make sure to delete `node_modules/typescript` and run `npm install` again after updating.

@gdi2290 I think this issue can be closed.
",tobek,gdi2290
618,2016-07-03 17:04:15,"cc @shlomiassaf
",gdi2290,shlomiassaf
554,2016-05-02 06:16:21,"@gdi2290 what do you think of this link addition?
",blacksonic,gdi2290
518,2016-04-25 09:53:02,"@gdi2290, would you mind enabling Greenkeeper for this repo? I think it would be great to ensure that we're always up to date.
",mastertinner,gdi2290
497,2016-04-12 09:28:00,"Hi @jplo,

I can't see in the history of the app component or it's end to end test where _'Starther'_ comes from.

Expected 'Angular2 Webpack Starter by @gdi2290 from @AngularClass' to equal 'Angular2 Webpack **_Starther_** by @gdi2290 from @AngularClass'.

Did you make any changes to the test or could you try correcting it in your code as it looks ok in the repository now?
",daddywoodland,gdi2290
493,2016-04-04 08:14:56,"- **What kind of change does this PR introduce?** (Bug fix, feature, docs update, ...)
  It introduces a couple of improvements that I would do.
- **What is the current behavior?** (You can also link to an open issue here)
  There are some shortcomings in the code- and commenting structure.
- **What is the new behavior (if this is a feature change)?**
  Improved code structure and unified comments.
- **Other information**:
  @gdi2290, please give me your feedback about which changes you like and which you don't.
",mastertinner,gdi2290
456,2016-03-22 08:12:32,"I tried some things but nothing worked for me,

I commented anything from @gdi2290  experimental code then `document.addEventListener('DOMContentLoaded', () => main());` but same error

I include  code from an old commit before main.browser.ts



but it is still the same error! some ideas?
",mburger81,gdi2290
456,2016-03-22 09:02:14,"@gdi2290 
I copyied into `main.browser.ts` the old `main.ts` from version 3.0.0 and now this resolves this error. But there are several new erros like that one

![image](https://cloud.githubusercontent.com/assets/3778892/13946471/1e54816a-f015-11e5-947b-f65e740ee6ee.png)
",mburger81,gdi2290
456,2016-03-22 10:19:15,"@penmark do you have no other problems like me?
@gdi2290  I'm not able to revert to an older version, I have many more problems. Coping main.ts  resolves the issue discussed here, but then I have the problem describe two posts before, revert entire project to an known working commit opens other bugs like this:
`Uncaught TypeError: crypto.randomBytes is not a function`
before migratint to angular2-webpack-starter 4.0.0 I update my webpack und webpack-dev server and others, and probably this are not compatible with my old app.

So I don't know how to resolves the problems
",mburger81,gdi2290
456,2016-03-23 17:07:39,"@gdi2290 @edezacas 

After downloading last master and merging with our app I had no problem with CommonsChunkPlugin, so I can not say if that had resolved me something before, but I don't think so.

After merging, I had always the problems with beta.11 and ng2-bootstrap so I removed ng2-bootstrap every where from my app. After that my app works fine (with some layout and style bugs, beta11 problems?). But on creating my prodcution app I had still the same errors, see screenshot

![image](https://cloud.githubusercontent.com/assets/3778892/13993710/c2f6db3e-f121-11e5-8ab2-e32b6ca0cf7e.png)

After that I tried to set the UglifyJsPlugin in debug mode in webpack.prod.js and this resolves me the problem. JUHU
",mburger81,gdi2290
444,2016-03-20 10:49:01,"https://medium.com/@vivainio/with-latest-typescript-you-may-not-need-webpack-417d2ef0e773#.o6j5sz10o
",alvipeo,vivainio
389,2016-03-07 11:52:16,"Apologies in advance for posting an issue that could just be related to me and not the repo, but I am running out of ideas since these last few updates to this setup.

I seem to be running into this loop error when building production and running the ""prod"" server command. My app works perfectly fine when running npm run server:dev.

One thing to note that I do that maybe related is that I do the DI work around that @brandonroberts devised to expose the @canActivate Decorator with angular2  modules. my bootstrap looks like this:



This is the callstack I get:



Can anyone give me any ideas in what might be causing this? I feel it might have something to do with the html templates? I require my html files the exact same way as the example app does with:

`template: require('./main.html')`

I really do not like resorting to the issues tab in github for this kind of stuff but I want to see if anyone else is having difficulties or could point me in the correct direction?

Cheers,
Nigel
",nigeman,brandonroberts
374,2016-03-02 13:44:28,"So if you remove the --bail option, the prod build fails (but returns an exit status of 0! bad for CI), and give s you the actual lint errors in the console output.

I've raised this https://github.com/wbuchwalter/tslint-loader/issues/18 in an effort to resolve why tslint-loader is not outputting the tslint errors. Could it be a webpack issue @gdi2290  ?
",jhuntoo,gdi2290
372,2016-03-03 10:55:49,"@gdi2290 any chance you'd look into this, please? At least tell us whether this could possibly have something to do with how angular-webpack-starter is set up, or it's rather a webpack/typescript problem and we should fill issues in their respective repos..
",fxck,gdi2290
359,2016-02-26 13:44:55,"@samvloeberghs Derp...  thanks, made the fix in different branch!
",jhuntoo,samvloeberghs
325,2016-02-11 22:33:26,"can you apply these changes https://github.com/AngularClass/angular2-webpack-starter/commit/1fcdc9b3cacdbc56f0e2d02dc6bdc2c96a51bc3a
cc @blakeembrey 
",gdi2290,blakeembrey
314,2016-02-25 13:50:49,"@uglow did you try other configurations? Like for example not to strip single and/or double quotes? As far as I can tell that might be one of the most obvious reasons it's not working, but indeed it should not be as your minified HTML is valid HTML5.

Angular2 might have other requirements than the way a browser handles HTML5.

@gdi2290 what do you think? :)
",samvloeberghs,gdi2290
308,2016-02-07 23:11:36,"thanks for the feedback, @gdi2290! i changed the files accordingly.
",mastertinner,gdi2290
278,2016-01-30 01:16:04,"`npm run typings-install` uses the local version (the one installed and lives in `node_modules`) of typings so you probably need to update your global version `npm install -g typings` cc @blakeembrey 
",gdi2290,blakeembrey
261,2016-01-27 02:08:55,"@gdi2290 How did you generate the file structure tree diagram? And does it get updated to the README.md whenever there is a change made to the files / folders? 
",choopage,gdi2290
226,2016-01-15 01:33:55,"PR created: patched with full dev deps #228
@ApiStack is another account of @lzbgt
",ApiStack,ApiStack
175,2015-12-22 06:00:28,"I removed the files but now I have to exclude everything :/ I also ran into a problem with typings and protractor's ambient type definition file.

cc @blakeembrey 
what do you recommend?
",gdi2290,blakeembrey
154,2015-12-14 19:26:14,"**Thanks for your help...  followed your recommendation**

blakeembrey commented an hour ago
@mastertinner Try npm install tslint.
@Emnalyeriar @MischaZed Do a typings install.

**One error went away, and this remains**

ERROR in ./src/vendor.ts
(3,8): error TS2656: Exported external package typings file '/node_modules/reflect-metadata/reflect-metadata.d.ts' is not a module. Please contact the package author to update the package definition.
",Marco-exports,mastertinner
149,2015-12-13 19:36:35,"the name `angular2-seed` is already taken by @mgechev if you rename your repo then I can merge it
",gdi2290,mgechev
146,2015-12-11 09:27:28,"@mcha hi, of course last word is up to @gdi2290 
but ng2 community using node 4+ and npm 3+
",valorkin,gdi2290
141,2015-12-08 12:42:29,"Got it to work.

@valorkin I had already installed `moment` via tsd.

What I had to do was the following.

**1. Reference the `tsd.d.ts` generated by `tsd` in `src/typings/_custom.d.ts`.**



Not sure that's the right place, but it definitely worked and looks clean to me.

**2. Moving the tsd typings to `src/typings` for more consistency**

Obviously this is not needed, but I found it more intuitive to have a single app-wide `typings` folder. For doing so I added a `tsd.json` ([src here](https://github.com/juristr/angular2-webpack-starter/blob/simple-component/tsd.json)). Maybe we should include this in this starter by default? What's your view on this @gdi2290 ? or does it interfere with your plans from issue #122 ?

**3. Change the `moment` import as suggested by @valorkin**

It now looks like this:



TypeScript autocompletion now works as expected
![image](https://cloud.githubusercontent.com/assets/542458/11655886/7bf6381a-9db1-11e5-819f-bb25612da277.png)

Someone still has to explain me why I don't need any ""path"" in the import for moment while I need it for angular2. Is it 'cause `moment` is somehow ""global""?? Otherwise I'll find it out :wink: 
",juristr,gdi2290
141,2015-12-08 14:40:55,"this kind of decisions is more up to @gdi2290 :)
",valorkin,gdi2290
135,2015-11-25 20:24:30,"While Angular2 itself is said to support IE (9,10,11), I'm having difficulty running this project on IE. I'm getting the following errors:



It's probably an issue with es6-shim.js/webpack but I can't figure it out. I can get [ng2-play](https://github.com/pkozlowski-opensource/ng2-play) to start up fine in IE, so it must be something to do with the way this particular project is set up. Any ideas @gdi2290 ?
",sumigoma,gdi2290
127,2015-11-08 18:25:18,"This PR adds `ng2-bootstrap` (as requested in https://github.com/AngularClass/angular2-webpack-starter/pull/83). `ng2-bootstrap` provides the ng2 components, `bootstrap` is purely used for the CSS file. The latter could be replaced with a CDN version, but I prefer to be able to work offline which is why I added also the `bootstrap` dependency.

To make things work, I had to [remove the `/node_modules/` regex](https://github.com/dotcs/angular2-webpack-starter/commit/f6a520138588300f27d6b1042f3d534117c23749#diff-11e9f7f953edc64ba14b0cc350ae7b9dL131) in webpack's typescript module loader definition. I tried to only include the `ng2-bootstrap` module - without success. The regex `node_modules\/((?!(ng2-bootstrap)).)*` did not work, although it should exclude all but the `ng2-bootstrap` folder. If the exclusion of `node_modules` is necessary for any other parts of this project, we should find a way around this issue before merging.

/cc: @gdi2290 
",dotcs,gdi2290
127,2015-11-08 18:51:47,"exclusion of `node_modules` is for performance reasons. perhaps @valorkin (creator of ng2-bootstrap) can provide some insight otherwise LGTM 
",gdi2290,valorkin
118,2015-10-28 20:21:10,"@gdi2290 What is the recommended approach to use the examples? If the idea is to copy&paste the code to the `src` folder, @zarkosusnjar's PR should be accepted (and we should check all other imports in the examples, too). I thought that the main idea is to switch examples via webpack config as described in my post above. But reading example's README sounds like the recommended approach is more or less to copy&paste the code ...

We could also use webpack to resolve the examples automatically by adding the examples folder to the resolved variables like it's done [here](https://github.com/angular-class/angular2-webpack-starter/blob/master/webpack.config.js#L97) for 'rx'. Then we could always write `import {Home} from 'examples/simple-component/home/home';` regardless of where the file that needs the import is located at. It's a matter of taste, so which way do you prefer?
",dotcs,gdi2290
118,2015-10-28 23:11:18,"Switching via webpack config is my preferred solution. IMHO it's more convenient. I'd go that way.

@gdi2290 ?
",SekibOmazic,gdi2290
113,2015-10-27 21:30:14,"@gdi2290 Maybe you could help. Mouse pointer jumps 8px up and 8px left (margin of body tag) when start dragging and then moves smoothly. Any clue why?
",SekibOmazic,gdi2290
101,2015-10-19 16:22:54,"tested with 0.12
@gdi2290 works good to me :)
",valorkin,gdi2290
78,2015-09-21 06:12:38,"This is all set. /cc @gdi2290 
",jimthedev,gdi2290
49,2015-08-04 20:54:27,"@gdi2290 , with regards to our discussion on gitter, Can you help me establish the following workflow using this project structure?  

Deployment
- Deploy 1 or more bundles to CDN
- Deploy index.html and config.json to server.

Bundles are packaged dependencies:
- Typescript with classes and imports transpiled to ES5, minified and obfuscated.
- LESS with @imports transpiled to CSS and minified
- vendor minified js and css.
- images (png,gif,jpg…) minified.
- fonts and svg

Build conditional resources:
-    if(MOCKS) then load local mock service definitions (using E2E_Mock ) and json mock data files

Server configuration file (config.json)     
- Compile config.json file for target server
  - modify target service urls specific to deployment server.
    - Compile to a tmp folder for access during local testing.
    - copy to dist folder on production build.
  - how to load asynchronously outside of the bundle.

Dev Workflow:
- compile config.json to temp folder
- start webpack-dev-server
- load app in browser
- On change to ts or less files
  - Run lint on source file
  - re-transpile that file and reload into dev-server cache
  - include sourcemaps for debugging

Ready to commit:
- Run karma tests against PhantomJS with code coverage ( Istanbul? 
  - If failure use karma against chrome to debug using webstorm xdebug remote.
- run plato reports with linting for ts and less.
- Package for deployment
- run protractor tests against dist bundles

Package for Deployment:
- Build distribution bundle with cache busting and asset minification
- copy index.html to dist folder
- compile config.json for staging and production.
  - Deployment to server should use the same bundle but specific config.json.
",kburson,gdi2290
33,2015-07-20 01:04:07,"cc @blakeembrey 
",gdi2290,blakeembrey
29,2015-07-16 12:20:29,"@gdi2290 Here we go with RxJs. More examples to come.
",SekibOmazic,gdi2290
6,2015-05-18 05:22:20,"### angular-class/angular2-webpack-starter now has a Chat Room on Gitter

@gdi2290 has just created a chat room. You can visit it here: [https://gitter.im/angular-class/angular2-webpack-starter](https://gitter.im/angular-class/angular2-webpack-starter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/angular-class/angular2-webpack-starter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

If my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.
",gitter-badger,gdi2290
