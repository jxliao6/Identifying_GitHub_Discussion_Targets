issue_num,datetime,body,login,close_date
442,2017-03-27 10:09:38,">P.S. using TypeScript? [Here](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/react-motion/index.d.ts) are the React-motion TypeScript definitions!

The link of the React-motion TypeScript is missing, any ideas to solve this?",calpa,
441,2017-03-20 11:37:14,"Hi Guys,

I just play with React Motion for a while & Find it really impressive! üëç 

But there is some issue here:
I animate (scroll) a parent div with <Motion />. One of its child is main-navi, so I'd like to let it stay fixed in window after scrolling animation. But old css stylesheet without React-Motion works not any more (add css style: ""position:fixed"" after animation) 
And I figured out the fixed position of it is its parent div (which is animated with <Motion />) but not browser window anymore.

Is there some work around on this?",Gfast2,
441,2017-03-21 21:50:22,"I feel like you have a problem with your CSS rather then with
react-collapse here. Not really possible to say more at the time unless you
have minimal reproducible case in codepen/jsbin
-- 
Nik Butenko
nik@butenko.me
http://github.com/nkbt
",nkbt,
441,2017-03-22 14:42:22,"Hi nkbt, Thanks!
I'd try to make a codeopen demo later.
Right now the thing works like so:
If the value of key ""scrollup"" in redux store is -400, then add the css class `fixed`, if not, remove it. BTW, I'm using [""classNames""](https://github.com/JedWatson/classnames) to handle this.

This is the css classes that this component is using:

<S_CODE_TOKEN>
And these are functions in react component which are using it:
<S_CODE_TOKEN>
I can see the css class ""fixed"" kicked in / out in Chrome on this component. And the `postion` of class `fixed` over write the same key in `MainMenu-wrapper`.
BTW, when I set `top` of class `fixed` to a certain value (unit Pixel here). I get always a offset from its parent element but not the whole screen.

It is complacated, I think. Hopefully, I can create a codeopen to recreate this effect. ",Gfast2,
441,2017-03-22 15:07:52,"I get some feeling about this issue, There must be something I don't understand about css class `transfor`.
Here is the render function of this child component's (mainnav.js) parent function:
<S_CODE_TOKEN>
If I comment out this css action. I get the correct behavior of mainnav.js.
Er... Perhaps I've to do some research on `transform`.
If I got something useful, I write back.",Gfast2,
441,2017-03-22 15:39:44,"This [Link](http://stackoverflow.com/questions/15194313/transform3d-not-working-with-position-fixed-children) declare the Problem.
So after do the css `transform` with React-Motion. I make all transformed component have just another origin. So no wunder why the fixed component get ""un-fixed"".

So I think the Problem of this thread is turn to: 
**'how to Animate Component with React-Motion but without transform'**
",Gfast2,
441,2017-03-22 15:54:43,"I just scrolled through all demo folder, all of <Motion /> animations are actually using transform...
Now I'm thinking about init another mainnav.js as a ""sticky"" one some where on the screen.",Gfast2,
441,2017-03-22 15:59:40,"It looks like that the old good time IE11 understand my intention, but none of the modern browsers.",Gfast2,
440,2017-03-07 13:48:41,"I see that there is currently no onRest callback for StaggeredMotion... Has anyoone figured out another way to tell when the animation is complete?

Thanks!",efdor,
439,2017-03-06 11:55:55,Added controls for spring parameters in order to make the demo even more fun. Also provides users with a convenient way of exploring spring configurations for the staggered motion component.,therewillbecode,
439,2017-03-10 14:17:10,"![www gifcreator me_ldrl38](https://cloud.githubusercontent.com/assets/13610012/23798361/f13f9078-0569-11e7-9f82-249230d28550.gif)
",therewillbecode,
438,2017-03-03 16:16:49,"hello guys!

first of all, thank you for your work! amazing package!

I am looking for a way to simulate scrolling behavior by passing starting and end locations to child element. Inside of child element I update the scrollTop property of that child element to simulate scrolling effect.

<S_CODE_TOKEN>

The problem is that I cannot pass the starting point(var `START`) of the animation. Per documentation `defaultStyle` works only once and afterwords the previous interpolated value is taken as starting point. 

Could anyone suggest a workaround? Would really appreciate it.

thank you! ",petromoldovan,2017-03-18 09:25:28
438,2017-03-16 17:56:14,"I think you're thinking about this implementation slightly wrong. You should just be passing one value at which your component should be scrolling to at any given point. Your parent component should be handling the `START` vs `END` logic. It could be as simple as sending the motion component a start value, then creating a timeout to send the motion component your end value.",wgoto,2017-03-18 09:25:28
438,2017-03-17 15:49:26,"@wgoto thanks for the answer!

could you elaborate a bit on it? maybe you have some old snippets that you did already? would really appreciate it.",petromoldovan,2017-03-18 09:25:28
438,2017-03-17 17:37:25,"Look here: https://gist.github.com/sompylasar/8b787c3fcfe0e14bba869a4e9a883135#file-viewport-js-L284-L320
",sompylasar,2017-03-18 09:25:28
438,2017-03-18 09:25:00,@sompylasar thank you!,petromoldovan,2017-03-18 09:25:28
437,2017-03-03 03:25:58,"Example: http://www.webpackbin.com/N16jKp-cz

<S_CODE_TOKEN>

Workaround: put update on the end of the stack

<S_CODE_TOKEN>",alexreardon,
437,2017-03-03 03:34:19,"I am not sure if it is related, but I am also finding that the `interpolatingStyle` can pass the previous `interpolatingStyle` value when `style` is changed to a fixed value mid transition",alexreardon,
437,2017-03-03 03:46:52,"I have ended up doing something like this to get around all issues:

<S_CODE_TOKEN>",alexreardon,
437,2017-03-20 23:26:19,Not sure how to proceed on this one :),alexreardon,
437,2017-03-21 21:40:09,"Yeah setTimeout is necessary to use with onRest. I reckon this has something to do with async nature/batching of setState in React.

We can probably switch to setState(pureCallback) notation as now recommended. Hopefully it would eliminate the problem. 

You may check https://github.com/nkbt/react-motion-loop with my workaround, which is the same...",nkbt,
437,2017-03-21 21:47:09," if you check source of react-collapse@3 you will find fairly ugly but working solution with instance vars. I had to figure out when animation ends properly and comparing with end values is not the right one, since spring can go into negative values in many cases. ",nkbt,
436,2017-02-28 23:06:55,"@chenglou Thanks for making this very awesome library. I have an issue where when I draw a series of rects on a svg, the first rect is animating from the wrong position. It only happens with the first element and only when I adjust the height. I don't understand why this is occurring so any feedback or guidance would be appreciated. Thanks!

Relevant code for the rect class:

<S_CODE_TOKEN>

![screencast-2017-02-28-17-57-24](https://cloud.githubusercontent.com/assets/10728027/23438624/aec9a07a-fde0-11e6-8916-8e33fab5de4e.gif)

",LPayyapilli,
435,2017-02-27 16:16:19,Made demo variable names more descriptive,therewillbecode,2017-02-28 06:31:30
435,2017-02-28 06:30:57,Uncapitalized `mouseCircleDelta`. Thanks!,chenglou,2017-02-28 06:31:30
435,2017-02-28 10:00:30,Thanks for the great library!,therewillbecode,2017-02-28 06:31:30
434,2017-02-27 15:55:42,,therewillbecode,2017-02-27 16:16:33
433,2017-02-25 13:38:17,"Hi!

I'm facing a challenge while trying to use `react-motion`. I'm working on a photography grid and would like to use this package to have a zoom-in transition.
My `div` has an absolute position and when you click the `top` and `left` values should animate toward `0`. Unfortunately `spring(0)` returns `undefined`.

Any idea how to solve that issue?

Here's a part of my component:
<S_CODE_TOKEN>",florianpnn,2017-02-25 13:54:31
433,2017-02-25 13:54:31,Found a typo in my code and now it's working üòì ,florianpnn,2017-02-25 13:54:31
432,2017-02-20 11:18:01,,therewillbecode,2017-02-27 15:55:54
431,2017-02-14 15:27:07,"react-motion requires using `style` property on the `Motion` element. 
Due to this name selection, ESLint rule [react/forbid-component-props](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md) fails. Since this is a highly useful rule, it would be great to have a way of working with react-motion without disabling this rule.

I understand that this is impossible to change the current API without breaking existing applications. One possible workaround is adding another prop name with the same functionality (e.g. styleProps). For example:
<S_CODE_TOKEN>
Would be equivalent to
<S_CODE_TOKEN>
",eladmoshe,2017-02-14 20:43:43
431,2017-02-14 20:42:29,I think you should disable thus rule. I don't believe anyone would change component's API because of absolutely arbitrary lint rule.,nkbt,2017-02-14 20:43:43
431,2017-02-14 20:43:43,"Alternatively, wrap motion into your own component with renamed prop and use it in your project. So you will need to disable rule only in that component. ",nkbt,2017-02-14 20:43:43
430,2017-02-14 14:39:31,,codler,2017-02-28 06:28:29
430,2017-02-14 20:47:03,"Wow Flowcheck does something odd


node_modules/flow-copy-source/node_modules/kefir/dist/kefir.js.flow:25
 25:   +value?: (value: V) => void;
       ^ Unexpected token +
",nkbt,2017-02-28 06:28:29
429,2017-02-14 09:01:47,"There's only https://unpkg.com/react-motion@0.4.7/build/react-motion.js .
a minified version ( https://unpkg.com/react-motion@0.4.7/build/react-motion.min.js ) would be great.",GrafSonne,
429,2017-02-14 20:48:18,"Thanks, yeah that would make sense.",nkbt,
428,2017-02-08 15:20:54,"Hi,
 I am using Motion, spring & translate3d for something like a menubar with transform: `translate3d(${x}vw, 0vw, 0)
and x ranging from -100 to 0 etc.

Is there a workaround for this.

It works perfectly smooth on chrome though.

Thanks",beckmeindia,
428,2017-02-08 21:30:44,"As a usual suggestion - make sure your children elements are not rerendered
on every animation step. Make sure the only element rendered is the one
with style. Also check prod mode, since prop checks are very slow.
On Thu, 9 Feb 2017 at 02:21, BECK Technology Ventures <
notifications@github.com> wrote:

> Hi,
> I am using Motion, spring & translate3d for something like a menubar with
> transform: `translate3d(${x}vw, 0vw, 0)
> and x ranging from -100 to 0 etc.
>
> Is there a workaround for this.
>
> It works perfectly smooth on chrome though.
>
> Thanks
>
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/chenglou/react-motion/issues/428>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAKsoMPt4xrp_OaFsvB8aeqAoqBu20VFks5rad1XgaJpZM4L68vx>
> .
>
-- 
Nik Butenko
nik@butenko.me
http://github.com/nkbt
",nkbt,
428,2017-02-08 21:42:06,"Wow that sounds like a good idea! But I am using cubic-bezier as the transition so it is completely css based. So unfortunately can't do that, can you suggest some example that elaborates further what you are suggesting?

I have a simple menu bar which opens from left like the navbar in apps and I am using translate 3d",beckmeindia,
428,2017-02-09 21:55:39,Well this does not really matter if you use css or js. Usually the problem with perf is all about too many unnecessary renders. You can put console.log to the render method of some child component to see if it is rerendered on every animation step,nkbt,
427,2017-02-02 08:54:00,"Forgive me, since the answer to this question will be about general Javascript knowledge, but I had not run into this problem before using react-motion.

In the simplest example:

<S_CODE_TOKEN>
Which works for me, if I put _curly braces_ around the body of the callback thus:

<S_CODE_TOKEN>

I get an invariant violation. Am I misunderstanding what is happening here? If I explicitly return the element, I don't get the invariant violation, but the animation doesn't work.

Thank you for your patience, but some of the nuances of es2015 must be escaping me!",averykimball,2017-02-02 09:20:45
427,2017-02-02 09:21:12,"Never mind, I'll hit up SO.",averykimball,2017-02-02 09:20:45
427,2017-02-04 01:04:43,"@averykimball you forgot `return`. Curly braces mean that you declare function body that does not have implicit return, so you must add one.

<S_CODE_TOKEN>",nkbt,2017-02-02 09:20:45
426,2017-01-31 12:27:54,"I'm facing very bad performance when using TransiotionMotion with medium sized lists (~ 50-100). When a new item is inserted to the list, after it's rendered and has about 100 items, the animation is super slow (Chrome-Desktop). 

Works fine with smaller lists.
Here's my code: [https://gist.github.com/itaydressler/9d624de8bcee1798750aa24ad24035e2](url).",itaydressler,
426,2017-02-03 16:07:27,"Gist link is broken
",Gabrielmtn,
426,2017-02-19 09:27:17,It probably has to do with the fact you are rerendering the list every time you add an item. Consider converting each of the list elements to use [pure render mixin](https://facebook.github.io/react/docs/pure-render-mixin.html) so react doesn't rerender them,bearcott,
426,2017-02-20 14:34:19,"I'm using TransitionMotion to animate a list that could have near 100 items at a time. 
Since this is an ""autocomplete feature"", the problem is that the list changes very often, basically everytime user press a key. When many items gets deleted from the list the animations were choppy.. it felt the heaviness.

How did I solved the lag in my case?
I've set a incremental id for each items that populate the list, if it's outside a number (eg: 5 or 10), i simply don't use the spring and pass the attribute directly. Anyway, most of the times items are out of viewport (in my case  < 15 are in viewport).

<S_CODE_TOKEN>
and
<S_CODE_TOKEN>

Maybe it helps you.",zergione,
425,2017-01-30 10:13:17,Are the types available somewhere? ,itaydressler,2017-02-28 06:36:37
425,2017-02-28 06:36:37,"Sorry, fixed by #430",chenglou,2017-02-28 06:36:37
424,2017-01-26 20:08:35,"Hi,
It might be my particular use case (cant share the code unfortunately), but i can say that the children are propagated via `React.Children.map`. 
When  child is removed and react-motion attempts to lookup a style value via `this.state.lastIdealStyles[i]`, it fails. 
I've fixed this in my fork of react-motion and will gladly put in a pr, but my fix is just a bandaid as other cases could have the children being reordered. 
It would seem like a better approach would be to store the previous styles and velocities in a key store by the components key.

##### edit 

found https://github.com/chenglou/react-motion/issues/26 ",jaredbrookswhite,
424,2017-01-26 21:17:09,Looks like this need is covered by TansitionMotion including the ability to stagger animation. Just curious as to why StaggeredMotion is needed when a more predictable option is available?,jaredbrookswhite,
423,2017-01-23 01:17:48,"I have a component that renders to WebGL using virtual child components outside of the DOM reconciliation (basically a custom WebGL renderer). Is there a way that this parent component can host utilize `Motion` elements as children, and invoke the callback child function to obtain the results?",joewood,
423,2017-01-25 01:06:09,"Ended up using a huge style object with a ReactMotion element as a parent to the WebGL context. Not ideal, but maybe I'll try again when React Fibers lands and it'll be easier to write a customer renderer. ",joewood,
422,2017-01-19 22:35:09,"Would be great to have `didEnter` on `<TransitionMotion>`.
For instance if user hovers menu element to show submenu (with transition), do not react on click on this hovered element until entering transition is done, to prevent accidental submenu closing (click works with hover to toggle menu dropdown and for touch devices)",klimashkin,
422,2017-01-19 23:29:27,Although it's not baked in you can achieve this with something similar to what the UI pack does [here](https://github.com/souporserious/react-motion-ui-pack/blob/master/src/Transition.jsx#L89) then just check once your current value reaches its destination. I know that @chenglou wanted to keep the API small and light so not sure if this feature is on the roadmap.,souporserious,
422,2017-01-21 01:40:39,"@souporserious `onEnter` in react-motion-ui-pack is a callback when animation starts, in the same moment as willEnter.

`didLeave` was added in last release, would be logical to add `didEnter` as well",klimashkin,
422,2017-01-21 01:49:49,"Definitely, I'm sure a PR would be welcome then üòÄ ",souporserious,
421,2017-01-18 03:46:55,"<S_CODE_TOKEN>

Using styles is marked as invlaid when passing the array?",bradennapier,
421,2017-01-18 17:35:52,Can you provide more information on how you are trying to use React Motion? What does the array look like that you are trying to pass to `styles`?,souporserious,
421,2017-02-02 18:52:02,"I had the same issue here is my prop;
`styles={[{opacity: 0.8}]}`",Lyonsclay,
421,2017-02-02 19:01:38,"I seem to have resolved that particular error with;
`styles={[{ key: 'leave', style: {opacity: 0.8}}]}`

I realized by reading the docs I was not formatting the styles properly, but the error itself was misleading.
",Lyonsclay,
420,2017-01-13 15:53:19,"This code in `TransitionMotion` was a source of bug for us in testing. 

<S_CODE_TOKEN>

The problem is that if execution passes the conditional `if (this.unmounting)`, then executes async `defaultRaf` and after that component unmounts and after that the callback of `defaultRaf` is called, then `setState` will be called on unmounted component.

This fix solves the problem.
",alleycat-at-git,2017-03-01 20:00:47
420,2017-02-28 06:35:31,Thanks. Wouldn't the right fix be having the check in both locations? This way we bail early instead of allocating another callback.,chenglou,2017-03-01 20:00:47
420,2017-03-01 16:54:50,@chenglou Done!,alleycat-at-git,2017-03-01 20:00:47
419,2017-01-10 18:18:04,"Hi there. I wonder could I use TransitionMotion for disappearance of one route and appearance of another route one by one.
I have found excelent example for list of ellements https://github.com/mlewando/staggered-unmount-mount-react-motion by @mlewando.
I was trying to implement this but I couldn't do it,
Actually I hope to terminate position:absolute for wrapper of my routes",maximusnikulin,2017-01-14 14:43:01
419,2017-01-14 14:42:57,"I have ended up with this code, it works but I am not sure that can be usefull. So I just leave it here and close the issue =)
<S_CODE_TOKEN>

",maximusnikulin,2017-01-14 14:43:01
419,2017-01-14 15:06:21,I change some parts of code and I think it could be usefull since it is stuggered transition between routes.,maximusnikulin,2017-01-14 14:43:01
418,2017-01-03 10:42:11,"In the TransitionMotion example https://github.com/chenglou/react-motion/#transitionmotion- , both `willLeave` and `styles` prop initialization in <TransitionMotion> has `height` value as number. There is no unit of measurement. It looks `react-motion` treat it as px. Is there any possibility to choose ""em"" or other units?
",mocheng,2017-01-04 01:25:37
418,2017-01-03 16:36:15,"Yes, you can provide whatever you want. React motion just interpolates a value, so it's pretty powerful and allows for many different use cases. For example:

<S_CODE_TOKEN>",souporserious,2017-01-04 01:25:37
417,2017-01-03 02:11:04,whether support to ie?,qingfengmy,2017-01-08 01:28:36
417,2017-01-03 03:32:41,"Not sure what you mean, can you be more descriptive? IE should be supported back to IE9.",souporserious,2017-01-08 01:28:36
417,2017-01-08 01:28:36,"Should work on IE, though the library's minimal (in terms of what it handles), so whatever style onto which you're passing your interpolated values will abide by the browser's support =).

Closing this! Tell me if you got more questions.",chenglou,2017-01-08 01:28:36
416,2017-01-01 16:30:50,"I explain this thoroughly here:
https://medium.com/@saada/animating-particles-using-react-motion-dcded1895f17#.t6444ulvj",saada,
415,2016-12-30 18:55:55,"Hi,

I'm experimenting with animated transitions in React Router v4, specifically this:

https://react-router.now.sh/animated-transitions

...and I've run into a bizarre issue that I can't figure out. I've written a Stack Overflow question covering the issue, complete with code example, here:

http://stackoverflow.com/questions/41388263/nested-match-routes-with-react-router-v4-and-matchwithfade

Probably makes sense to hop over there to read the whole post, though I'll post the complete code example below. Anyway, one of the nice features of RRv4 is that you can put your `<Match />` components anywhere in your code. So, you might have a route `/one` that invokes the `<One />` component. Then you might have routes `/one/one` and `/one/two`, both of which have `<Match />` components within `<One />`. This seems like the pattern RRv4 wants you to follow, and it makes reasonable sense to me.

So using this pattern, I tried using their `<MatchWithFade/>` example from the above URL, and I ran into a very weird problem. In short, child `<Match />` components of `<MatchWithFade />` components are mounted, and then an apparently invisible instance of them is immediately unmounted. Visually, the child component is not unmounted, but if any actions are called on `componentWillUnmount()`, such as clearing out a Redux node, then obviously the UI will reflect that change.

So I guess the question is this: does this mean there's something fundamentally broken in `<TransitionMotion />`, or does this mean that the `<MatchWithFade />` pattern is fundamentally incompatible with nested route handling (if that makes sense)?

Here's the full code example. You can see the problem by toggling back and forth between the ""Two One"" and ""Two Two"" links.

Thanks!

<S_CODE_TOKEN>
",bmueller-sykes,2017-01-17 16:32:56
415,2017-01-09 19:17:18,Just a thought: have you tried changing the `key` to something unrelated to the path?,liveresume,2017-01-17 16:32:56
415,2017-01-10 16:26:41,"Hi. Thanks for the reply. I changed both places in the code that have a `key` (detailed below), and I'm seeing the same effect.

key: props.location.pathname => key: `${props.location.pathname}-mykey`

and

key={config.key} => key={ `${config.key}-mykey1`}

(not sure how to escape backticks so they actually show up)",bmueller-sykes,2017-01-17 16:32:56
415,2017-01-10 17:46:55,"Okay, I've done a little more experimenting. I changed my `Two` component into this:

<S_CODE_TOKEN>



Simply, I've added `componentWillMount()` and `componentWillUnmount()` and thrown console statements in both. I've also added a `componentWillMount()` with a console statement into the `One` component.

So now, if you swap `Two` into the code in the original post, then click `One`, then `Two`, then `Two One`, this will be the console statements:

<S_CODE_TOKEN>

The first two clicks are as expected, but the last one seems totally crazy to me. TWO mounts, even though it's already mounted, then TwoOne mounts which seems fine, but *then* TWO and TwoOne both unmount. I can't make any sense out of that, so I still don't know if there's a bug, or if react-motion and react-router v4 are fundamentally incompatible somehow.",bmueller-sykes,2017-01-17 16:32:56
415,2017-01-10 19:44:36,"My goal was to remove the dependency on pathname from your key.  It looks like the string appended wouldn't make a difference.  Try using a random number or something not dependent on pathname, just for testing. 

It really sounds like an issue with keys.  Focus there.  Try removing the react-motion code and see if it continues to occur.  If so, try posting on rrv4 issues.",liveresume,2017-01-17 16:32:56
415,2017-01-10 21:12:34,"Thanks again for the reply. I did as you suggested. In short, none of them point obviously to RRv4, but it's still unclear what the root cause is. 

First, I swapped `MatchWithFade` with `Match`--effectively removing react-motion from the picture--and everything worked properly. So I think that rules out RRv4 as the only cause of this issue.

Next, I swapped out 
`key: props.location.pathname,` 
with 
`key: `key_${Math.round(Math.random()*10000000)}` (sorry for the backtick issues)

...but that had no effect. So I don't know what this means. I don't know if there's actually a problem with either library, or whether these two libraries are just fundamentally incompatible in some way. At the danger of upsetting the Github Gods, I'll refer to this post on RRv4 issues, and see if it gets any traction there.
",bmueller-sykes,2017-01-17 16:32:56
415,2017-01-16 15:04:16,"Just to update here: I posted an issue to Github Issues on the RR repo, but they more or less ignored it, saying it was a support request rather than a bug report. They did say a new version of RRv4 is coming that contains non-trivial re-writes, so perhaps it makes sense to wait for that to be released and then retest. Unclear when they plan to release the next version.",bmueller-sykes,2017-01-17 16:32:56
415,2017-01-17 16:32:56,"@liveresume So you turned out to be right. There were a couple of issues at play. First, the `MatchWithFade` code in the example was taken verbatim from the RR folks, so I assumed it was entirely right. Second, I didn't fully comprehend the issue with keys that you were suggesting. Somebody posted a note to the SO thread that clarified things for me:

http://stackoverflow.com/questions/41388263/nested-match-routes-with-react-router-v4-and-matchwithfade

The summary is that each key has to be unique to the `Match` instance and cannot change on re-renders, which means a random number generator is no good. The guy on SO suggested using `rest.pattern` from RR, which is the part of the URL pattern that matches up to the current `Match`, which strikes me as exactly the right value to use for the key. So, sorry for the kerfuffle, and thanks for your help!",bmueller-sykes,2017-01-17 16:32:56
414,2016-12-27 10:56:27,"Hi,

How can I make my Motion component reload again once it rests? Just some hint will be fine. I want to rotate my animation not just one loop, but as long as I'd like to. Thanks a bunch!",cool88,
414,2017-01-02 21:08:32,"Check react-motion-loop
On Tue, 27 Dec 2016 at 21:56, cool88 <notifications@github.com> wrote:

> Hi,
>
> How can I make my Motion component reload again once it rests? Just some
> hint will be fine. I want to rotate my animation not just one loop, but as
> long as I'd like to. Thanks a bunch!
>
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/chenglou/react-motion/issues/414>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAKsoOXpeFIBbaf2ZAI8EEvd48ZgHwnCks5rMO7cgaJpZM4LWMsm>
> .
>
",nkbt,
413,2016-12-20 23:10:10,"Trying to have this fade out when it is unmounted. Any ideas?

<S_CODE_TOKEN>",liveresume,
413,2016-12-23 16:51:41,"Check https://github.com/chenglou/react-motion/issues/311
",emilebosch,
413,2017-01-06 19:56:52,@emilebosch I had tried a few things based on that. No luck.,liveresume,
412,2016-12-20 09:53:05,"Hi, great lib, I have been using this for a while. But now I'm facing a issue, I may miss something :)

I have to interpolate 2 properties, for example: 

<S_CODE_TOKEN>`

If I **remove y** and **add z**
<S_CODE_TOKEN>`

then when I try to get **interpolatedStyles.z** I got **NaN** :(
I noticed that on the first call of the interpolation callback rendering I still find **y** property too
I tried to give a defaultStyle that also have the updated property but I get the same result with z = NaN

Thank you for your help :)",mrasoahaingo,
412,2016-12-21 20:42:47,"Cursory glance:  Why did you go from using x to z in spring props?  Try:

<S_CODE_TOKEN>",liveresume,
411,2016-12-19 20:50:37,"Hi, 
I see that for motion 
<S_CODE_TOKEN>
Is there a way to make animation always start from default styles on subsequent render?

Use case 

Or case has pages appearing from left to right and for case when we have page 1, then page 2 and page 1 again - page 1 on 2nd appearance  starts animating from right instead of left as expected. How can we make it *always* start from left no matter what element ended with. ",dlebedynskyi,
410,2016-12-15 10:37:08,"I am not quite familiar with this library yet so apologies if I've missed something obvious.  I've been desperately trying to get this to work for some time now without luck.

I need to animate list items on enter and leave in Staggered manner. I've got a `Container` component which renders  `Item` children. The `Container` reads from state (I'm using `redux` if that helps). The item data is stored in state. I update the state in `componentWillReceiveProps`. Now, I want to animate the list items when state has changed.

From the README, I figured TransitionMotion would be the best fit as it pertains to mounting an unmounting (The `Container` is being mounted once).

<S_CODE_TOKEN>
I guess the issue is, I'm updating the state while the `TransitionMotion` is specifically for mounting/unmounting. If so, how do I achieve this? I've tried setting the `getDefaultStyles` and `willEnter` without any difference
",sanchitgn,
410,2016-12-16 03:13:51,"I tried implementing a simple example with `StaggeredMotion` where todo-items have to be animated in the todo-list. Seems like the animation is not triggered on `setState`. Is there a way to trigger animation on state change?

Maybe #343 #390 ",sanchitgn,
409,2016-12-13 02:50:48,Seems like `didLeave` has not been shipped in `0.4.6`,klimashkin,2016-12-16 00:22:27
409,2016-12-15 00:25:50,"@chenglou looks like `didLeave` wasn't shipped in `0.4.6` can you look at this and ship a new version, please?",renatoagds,2016-12-16 00:22:27
409,2016-12-16 00:22:27,Damn it. Sorry about this! Published as 0.4.7 and verified to contain the right artifacts.,chenglou,2016-12-16 00:22:27
408,2016-12-09 23:33:57,"A bug in flow (https://github.com/facebook/flow/issues/1964) prevents it checking in it's children prop has been set in jsx. You can make flow ignorant to this prop by setting it as optional.

Addresses #375",nsimonson,
408,2017-01-02 22:55:53,This solution would mislead users of react-motion. Making flow shut up does not justify changing the type definition which is currently correct. The issue has to be resolved on flow's side.,dlindenkreuz,
407,2016-12-08 07:07:00,"Hi, everyone!
I'm trying to re-create a sliding menu using React Motion. You can see my non-working example here: http://codepen.io/kirupa/pen/BQVzvQ (click on the blue circle to display the menu or to hide it)

Here is my problem. The menu should disappear when you click anywhere inside of the yellow region. A working non-ReactMotion example is here: https://www.kirupa.com/html5/examples/slidingmenu.htm

Getting back to React. For whatever reason, my event handler attached to the menu element inside the Motion tag is getting ignored. The relevant snippet looks as follows:

          <Motion style={
            {
              x: spring(this.state.visible ? 0 : -100)
            }
          }>
            {
              function({x}) {
                return (
                    <div onMouseDown={this.handleMouseDown} id=""flyoutMenu"" style={{
                      transform: ""translate3d("" + x + ""vw, "" + 15 + ""vw, 0)""
                    }}>
                      <h2><a href=""#"">Home</a></h2>
                      <h2><a href=""#"">About</a></h2>
                      <h2><a href=""#"">Contact</a></h2>
                      <h2><a href=""#"">Search</a></h2>
                    </div>
                );
              }
            }
          </Motion>

Notice the onMouseDown={this.handleMouseDown}. This is the same event attached to the blue circle that displays (and hides) the menu when you click, and that works fine.

What am I doing wrong here? This seems like I'm doing something obviously wrong, but I can't quite figure out what it is.

Thanks,
Kirupa",kirupa,
407,2016-12-09 17:36:40,"If somebody has an example where DOM events inside the Motion tag work, that might help me work backwards and see where I am making a mistake :-)

In case this helps, when I inspect the component in the DevTools, the event handler isn't even getting attached. That seems really bizarre for some reason. Could it be a scoping issue?",kirupa,
407,2016-12-10 18:27:38,"Your problem is a 'this' scoping issue.  Use var self = this; ... self.handleMouseDown. Or better yet, use a lambda function.",DetweilerRyan,
406,2016-12-07 09:15:13,"I am struggling to use any transform property in my style object. I would like to know if there is a specific notation inside react motion to support it.
here is my code:
<S_CODE_TOKEN>

Using the same thing with the left property is working fine, but the performance are too bad. So I would really like to use transform instead.
In my Dom I get the transform property rendered like this:

> transform:translate3d(-280px, 0, 0)NaNNaN;

",ticruz38,
406,2016-12-07 18:21:22,"React Motion can only interpolate a number. So instead of passing
<S_CODE_TOKEN>
you should pass
<S_CODE_TOKEN>
then in your render method you can apply it using `translate3d`. This is why the left property was working for you. Does that make sense?

I created a little [helper library](https://github.com/souporserious/react-motion-ui-pack) around TransitionMotion to help with these kinds of things if you're interested.",souporserious,
405,2016-12-03 22:32:14,"The number of elements created by `<StaggeredMotion/>` is controlled by the length of the style array passed in to the defaultStyles prop.

Unfortunately, changing the length of this array on a new render doesn't change the number of elements. It seems that this is set on the first render and can't be changed at a later time.

Is this correct or is there a workaround?",webondevices,
405,2017-02-13 17:03:11,"From the README...
<S_CODE_TOKEN>
",rgbchris,
404,2016-12-03 16:53:44,"Hi, thanks for this great lib!

Digging around https://github.com/oliviertassinari/react-swipeable-views/issues/192, It seems that the root cause of this issue is right here.

Basically, the style updated is performed ASAP outside of the React `render` transaction leading the interface in an inconsistent state:
I have created a simple reproduction test case:
http://www.webpackbin.com/E1wl7yhMz
![dec -03-2016 17-49-14](https://cloud.githubusercontent.com/assets/3165635/20860779/f17fb098-b980-11e6-9ae2-8ba2648ea7f6.gif)

As you can see with the logs:
#### Initial state

> [Log] interpolatedStyle.translate ‚Äì 200 (sandbox.webpackbin.com, line 68)
[Log] this.state.children.length ‚Äì 4 (sandbox.webpackbin.com, line 68)

#### Inconsitancy

> [Log] interpolatedStyle.translate ‚Äì **200** (sandbox.webpackbin.com, line 68)
[Log] this.state.children.length ‚Äì **3** (sandbox.webpackbin.com, line 68)

#### End state
> [Log] interpolatedStyle.translate ‚Äì 100 (sandbox.webpackbin.com, line 68)
[Log] this.state.children.length ‚Äì 3 (sandbox.webpackbin.com, line 68)

Is this expected? I'm not sure that the best work-around is.",oliviertassinari,
404,2016-12-07 10:14:17,"Maybe i'm over simplifying this problem but from looking at the example you provided:
- After the `setState` call a `render()` is initiated.
- react motion gets a new style with the value of 100 (instead of the `spring(200)`
- state has 3 children instead of 4
- react motion has to render immediately and provides the initial 200 value but with the new state of 3 children
- react motion called from an animation render (without react `render`) with the ""final"" value of this interpolation which is the immediate 100
- the last render has 100 and 3 children as expected.

So, the react initiated `render()` after the `setState()` must produce a workable component tree and probably is called from the render call itself without the wait for the animation frame that is actually performing the ""next step in the interpolation"" - in this case setting the value directly to 100. In this ""forced render"" it must use the new state of 3 children.

From [this code in `<Motion/>`](https://github.com/chenglou/react-motion/blob/bdfef4e11697cc252334ba3c2e37e9eeb061c5e4/src/Motion.js#L226-L228)

<S_CODE_TOKEN>
It's clear that the react `render()` uses the current style and not the ""destination"" style.

Of course, react-motion could be smart about it and see that `spring(200)` to `100` is a direct interpolation and perform this interpolation right there on the react `render()`. Without looking at the react motion code I would assume this would mean initiating some interpolation logic outside the RAF which could be complicated, and maybe a performance problem altogether.

I would probably look at using the `<TransitionMotion />` component which also controls the entry and leave of children - in that case the first forced render would still see 4 children although the state changed to 3. On the first animation frame, the children **and** the translate value would change to their end value in sync.

What do you think?",yoadsn,
404,2016-12-07 11:12:28,"I have created this modified example:
http://www.webpackbin.com/410YcRxXz

`<TransitionMotion/>` like to operate on the array of children - I had to hack around it so to not change the styles you applied in your example to the parent `<div/>` of the Slides. But of course this could be prettier. Point is, when `react-motion` knows that we removed Slide A - it would wait for the (instant) transition from `spring(200)` to `100` to end and then actually removing it from the rendered children list.

Here is the modified log:

<S_CODE_TOKEN>

And checking on mobile safari the flicker is not visible on the TransitionMotion rendered component.",yoadsn,
403,2016-12-01 21:14:05,"I was wondering if it was possible to add a linear motion to something that starts and ends with spring() easing.

I'm currently working on this reel spinner:
http://codepen.io/mares0909/pen/mOpWqa

What I want to achieve is spin the reel for x seconds then let the spring() take care of the slow down.",webondevices,
403,2016-12-01 23:40:00,"It is not possible with ReactMotion's spring animation.
You should look into TweenJS or Greensock instead.",nkbt,
402,2016-12-01 10:12:19,"I was wondering if it was possible to create an element dragging animation/interaction with react-motion to simulate a pinned down state with elastic boundaries.

Imagine you have an element in the middle that is pinned to a fixed position. You can start dragging it but the further away you try to drag it from the pin position the least it moves: like if it was tied to a rubber band. When you release it goes back to the pin position with the spring animation.",webondevices,2016-12-03 22:20:02
402,2016-12-01 17:06:07,"Yes, I would implement the motion you described in two parts:
1) the dragging motion when the item follows the pointer with a certain friction;
2) the release motion when it gets back;

On component mount I would store the initial coordinates of the item, and set the component state to be ""returning"" (a plain string for the current part of the animation).

On pointer down I would set the state to ""dragging"", and set the current desired coordinates to the pointer coordinates in the component state. If you'd like to animate the initial transition from the rendered coordinates to the current effective coordinates, you'd need an additional flag to fade out such animation when the dragging takes over.

On pointer move, if the state is ""dragging"", I would update the current desired coordinates with the pointer coordinates. In render, if the state is ""dragging"", the 1) would be a direct mapping of the current desired coordinates to the item coordinates with an euclidean-distance-based friction coefficient, no spring required unless you'd like to animate the initial move to the pointer coordinates.

On pointer release I would update the state to be ""returning"" and the current desired coordinates to equal the initial coordinates. In render, if state is ""returning"", the 2) would be a regular spring motion to the initial item coordinates.
",sompylasar,2016-12-03 22:20:02
402,2016-12-01 20:27:00,"Thank you @sompylasar, that's really helpful.

I managed to get most of this done:
http://codepen.io/mares0909/pen/jVYrye

The only thing I'm not sure how to implement is the euclidian distance-based friction. Would you be able to fork that pen and add it to the example? Or push me into the the right direction with that?",webondevices,2016-12-03 22:20:02
402,2016-12-02 00:17:54,"<S_CODE_TOKEN>
",sompylasar,2016-12-03 22:20:02
402,2016-12-02 00:24:39,"Yes, it works (slightly edited [my comment](https://github.com/chenglou/react-motion/issues/402#issuecomment-264336836)): http://codepen.io/anon/pen/zopWGQ",sompylasar,2016-12-03 22:20:02
402,2016-12-03 22:20:02,"@sompylasar , that is perfect, thank you!!",webondevices,2016-12-03 22:20:02
401,2016-11-26 15:59:10,"Issue - Originally on every mouse move event the reinsert function was called to reorder list item positions. 

Fix - Added an if clause to ensure that ""order"" state items are only reordered when positional changes actually occur in the DOM.
",therewillbecode,2016-12-06 08:57:49
401,2016-12-06 08:57:30,Nice! Thanks =D,chenglou,2016-12-06 08:57:49
400,2016-11-26 14:43:36,Changed variable names to more descriptive ones.,therewillbecode,2016-11-29 07:15:13
400,2016-11-29 07:15:21,"Looks good, thanks",nkbt,2016-11-29 07:15:13
399,2016-11-26 08:12:52,"Had a case where the index of each element was essential for correct visual representation. `didLeave` can be used to keep track of what elements `<TransitionMotion />` is still animating.

Can also be used as the `onRest` equivalent for `<TransitionMotion />`.",hkjorgensen,2016-12-07 09:32:59
399,2016-12-06 01:27:32,@nkbt @chenglou do one of you have time to take a look?,hkjorgensen,2016-12-07 09:32:59
399,2016-12-06 01:28:39,Will do tonight!,chenglou,2016-12-07 09:32:59
399,2016-12-06 09:03:15,"Alright, this looks good. Tbh I've forgotten a big chunk of the codebase. Since the tests pass this is non-breaking, I can merge it. But before that, are we sure about the name here? DidLeave vs onRest?",chenglou,2016-12-07 09:32:59
399,2016-12-06 09:56:16,"I like `onRest` to match the `Motion` component.

So excited for this! This will allow me to do auto height animation in the UI pack üôå ",souporserious,2016-12-07 09:32:59
399,2016-12-06 17:02:04,"`didLeave` seems to be a more appropriate name than `onRest`.  To me at least, `onRest` implies that the TransitionMotion component as a whole is no longer in motion.  While, on the other hand, `didLeave` implies that a single child has finished transitioning out of the TransitionMotion component, yet other children may still be in motion.",DetweilerRyan,2016-12-07 09:32:59
399,2016-12-06 18:36:52,"> didLeave seems to be a more appropriate name than onRest. To me at least, onRest implies that the TransitionMotion component as a whole is no longer in motion. While, on the other hand, didLeave implies that a single child has finished transitioning out of the TransitionMotion component, yet other children may still be in motion.

@DetweilerRyan, that was also what I thought when naming it 'didLeave' :-)
`onRest` would be misleading compared with `<Motion onRest />`.
Next, I would suggest/PR for a `didEnter`, and those two combined would allow for a proper onRest implementation.

@chenglou do you see `react-motion` as abandonware? I still believe it's one of the best packages for doing spring animations in React. The spring logic is solid, but there is always room for further development for the API :-)",hkjorgensen,2016-12-07 09:32:59
399,2016-12-07 09:32:52,"I'm aggressively cautious about adding API overhead. TransitionMotion's API has a bit of learning overhead already and I didn't want to add more to it. Lots of people add an animation to their project then move on, so having a stable API throughout time in a (whether I want it or not) flagship react project might be worth more than finding a neater API that breaks dependents every few months. Just doing my part of not adding churn =)

Personally, I'm overwhelmed with emails lately so even pings against me might go unnoticed. Trying to catch up though. Also I've been working on some important react-related work lately too (will be open-sourced this week. It's gonna change everything!). But I have to apologize for the codebase quality too. It's not exactly straightforward to navigate it I feel. Feel free to submit more PRs though! And ping me about them!

Thanks a lot for this PR. I'll be merging this. Do we want to make a new release?",chenglou,2016-12-07 09:32:59
399,2016-12-07 17:49:50,Yes to a new release please üôè  thanks for this @hkjorgensen!,souporserious,2016-12-07 09:32:59
399,2016-12-12 19:35:28,"@chenglou Thanks for the explanation - I still look forward to that new open source project :-)

> Thanks a lot for this PR. I'll be merging this. Do we want to make a new release?

Yes, please cut a new version. This expands the API and doesn't break anything :-)
",hkjorgensen,2016-12-07 09:32:59
399,2016-12-12 22:56:30,"Ok, published as a patch update then! Tell me if anything goes wrong, thanks.",chenglou,2016-12-07 09:32:59
398,2016-11-24 11:38:06,"Changed ""lastPressed"" variable to initialPosOfLastPressed as this variable stores the initial position of the item which was last clicked.",therewillbecode,2016-11-26 14:40:59
397,2016-11-23 10:57:51,"Changed ""delta"" to topDeltaY as variable describes the delta of y coordinated from the first list item.",therewillbecode,2016-11-26 14:41:14
397,2016-11-23 11:08:28,"Does anyone know why I am getting the following eslint error? 

/home/travis/build/chenglou/react-motion/test/index.js
 1:51  error  Unnecessary escape character: \-  no-useless-escape
",therewillbecode,2016-11-26 14:41:14
397,2016-11-23 21:21:24,"Must be updated eslint/airbnb, which started to track this thing. This is why I now always lock down all the deps and ideally use shrinkwrap. Feel free to fix that one bit and will get it in.",nkbt,2016-11-26 14:41:14
396,2016-11-23 10:55:31,"The default value is 0.01, but what are the range of values?",tarun-dugar,
395,2016-11-23 10:42:06,"Changed variable named ""mouse"" to mouseY as it only holds the single y coordinate of the mouse position.",therewillbecode,2016-11-26 14:41:22
394,2016-11-22 13:49:15,"For example, I change a cube's `x` position using `spring`, and want the `background-color` to change proportion to the percentage of animation. Is it possible?",lzl124631x,
394,2016-11-22 14:51:08,"It is possible. You can calculate the percent yourself by dividing the interpolated value for x by the destination value of x:

<S_CODE_TOKEN>",DetweilerRyan,
394,2016-11-23 02:41:50,"I've thought of your solution, but it has several problems

1. What about the start value of x? I need to store the start value of x. Things get more complicate if the start value of x is a intermediate value of last motion animation (the last motion is interrupted by this current motion) 

2. Your solution gets the `x` percentage, not the progress (or time) percentage
Assuming `props.x` being 100, start value of `x` being 0,  `x` being 50, the percent will always be `50%`, but the progress percentage might be 10%, 50%, 90%, with different `stiffness` and `damping`. 

If the wobbling is significant, your `x` percentage might be 120%, while progress percentage is always in range of [0, 1].

---

My trick is to set the a motion style `percentage: 0` and `percentage: spring(1)`, then I'll get a progress percentage.

But if I chain two animations, I have to use `percentage: spring(2)` for the second animation... because percentage is already 1 at the end of the first animation",lzl124631x,
394,2016-11-23 05:53:38,"There is no such thing as ""percentage"" of spring animation. Every single step depends on the previous one and the target value. Since target value can be changed anytime, animation is potentially indefinite and so you cannot say for sure when it is 50% or 90%.

This is one of essential differences between Spring-based animations and time-based.

I reckon you can *approximately* calculate overall duration given that target values will never change, just find a formula to use for this (having spring params, start and stop values). This can be done totally outside of ReactMotion component itself",nkbt,
394,2016-11-23 08:11:09,"@nkbt  Thanks for your advise. Actually I just want to animate color while animating offset, but React-Motion doesn't support it. So I have to use ""percentage"" to interpolate color. It would be great if React-Motion supports animating color.",lzl124631x,
394,2016-11-23 21:17:01,"@lzl124631x you can animate arbitrary numbers with react motion, and derive color from that number. Effectively:

<S_CODE_TOKEN>",nkbt,
394,2017-03-07 07:22:44,"This brings up a very valid opportunity for react motion. Indeed, you can easily spring to and from arbitrary numbers, but technically you wouldn't be able to interpolate anything that is a non number without keeping a detailed history of changes from non integer to non integer, and even then you are still a few complicated steps away from coercing that backing number into an interpolate that supports non numbers. 

That's a lot to take in and think about, but for me its becoming a large problem. If we could solve the non number interpolation problem, anything would be possible. ",tannerlinsley,
394,2017-03-07 19:46:04,"@tannerlinsley The ""non-numbers"" are effectively number-based if they can be interpolated. It's just the question of functional mapping from number to non-number, e.g. this: 
<S_CODE_TOKEN>

-----

But the notion of ""percentage of animation"", i.e. how close are you to the ""**end moment in time** of the animation"" (versus to the ""**target value** of the animation""), is not applicable to physics-based animations which `Motion` provides by default with `spring`.
",sompylasar,
394,2017-03-07 20:07:54,"@sompylasar Right. The concept is very straightforward to interpolate anything using an integer, but the architecture and current api for react-motion doesn't make this very easy to do with strings, hexColors, paths, etc. 

A good example of this is animating a string. The amount of overhead the user would have to take on to build a linear conversion scale from one string to another is massive.  Luckily, d3-interpolate can handle that for you.  

If we assume that, then the problem boils down to finding a reliable way to construct the interpolator and percentage on every value change:

<S_CODE_TOKEN>

Even though it's not natural for a physics based animation system to know of the percentage between the current and destination value, it is possible.  You need to be able to:
- On change, use react-motion to spring from `n` to `n + 1`
- Keep track of `oldValue`, `newValue`,  `oldN`, and `n`
- Update the interpolator to use `oldValue` and `newValue`
- Utilize the decimal created from `n - oldN` to be utilized as the interpolator percentage

You should check out https://github.com/chenglou/react-motion/issues/153#issuecomment-284824453.  It's a (very shrude and quick proof of concept) abstraction that does exactly this.  I would love some feedback.",tannerlinsley,
394,2017-03-07 20:13:06,"[This block](https://bl.ocks.org/herrstucki/27dc76b6f8411b4725bb) initially gave me the impression that it would be fairly easy to accomplish this, but it makes a very limiting assumption that the values you want to interpolate between are binary and that you must be explicit with both the `from` and `to`.  Still a great block, but stopped halfway to where I was hoping it would land :)",tannerlinsley,
394,2017-03-08 05:11:33,"@tannerlinsley Good job there! I meant one cannot get the time-based percentage because the time moment when physical animation ends is not known in advance, without premodeling it. The value-based percentage can definitely be obtained, that's what is in the block you've shown. And it might overshoot in case of a spring (the complex easing curves can, too, so it should be fine).",sompylasar,
393,2016-11-20 17:38:48,"I have an onboarding slideshow. Clicking a ""Continue"" button triggers a new slide to slide in from the right. The old slide will slide out to the left.

This works fine as long as I don't click faster than the animation-time. If I click faster then new slides will appear from the left instead of the right because the previous animation wasn't finished.

How can I cancel/disable this reverse-animation behavior?

Expected/desired behavior: Clicking fast will just immediately finish the previous animation and not mess with the next one.

P.S. I should add that i'm animating route transitions with TransitionMotion and can't use `onRest`",chapati23,
392,2016-11-19 00:16:40,"When used in conjunction with the material-ui library (http://www.material-ui.com/#/), the above error is generated in response to passing a single function as the `children` for any of the `Motion` components. If instead an array containing a single function is passed, then the following error is generated:

<S_CODE_TOKEN>

",johanatan,
392,2016-11-19 00:20:22,"Edit: I'm using this wrapper (which claims to do its own packaging of React for `injectTapPlugin` purposes): https://github.com/cljsjs/packages/tree/master/material-ui
& this wrapper for the wrapper: https://github.com/madvas/cljs-react-material-ui

Although I also tried this other wrapper for the wrapper (and got the same result):
https://github.com/DaveWM/reagent-material-ui
",johanatan,
392,2017-03-13 23:45:42,"Hej @johanatan How did u fix it ?, I have this similar issue",karna41317,
392,2017-03-15 02:18:44,@karna41317 I ended up having to drop this dependency and use jQuery animations instead.,johanatan,
391,2016-11-18 18:26:25,"<img width=""962"" alt=""screen shot 2016-11-18 at 1 25 20 pm"" src=""https://cloud.githubusercontent.com/assets/16503197/20441444/8bdde33a-ad92-11e6-9d22-ee6fa882395b.png"">


Can't pin down what this is or what's causing it.",SuttJ,2016-11-18 18:32:27
391,2016-11-18 18:32:27,"Solved by running the following in Terminal:

(
  export PKG=eslint-config-airbnb;
  npm info ""$PKG@latest"" peerDependencies --json | command sed 's/[{},]//g ; s/: /@/g' | xargs npm install --save-dev ""$PKG@latest""
)
",SuttJ,2016-11-18 18:32:27
390,2016-11-05 10:35:19,"[DEMO on Codepen](https://codepen.io/lzl124631x/pen/XNJrMM?editors=1010)

Expect: click the cube and it goes to right 300px and then down 300px
Actual: the cube only goes right 300px

I updated the style in function onRest and it successfully sets the style, however Motion doesn't work.

---

BTW, what is the standard way to implement a sequence of tween using react-motion? Something like [GSAP TimelineLite](http://greensock.com/timelinelite)",lzl124631x,
390,2016-11-08 02:17:52,"hi there?
",lzl124631x,
390,2016-11-08 10:15:43,"hey @lzl124631x I find that React Motion is best suited for animations that react to state changes. ie. smoothly showing or hinding a sidebar navigation, tranisitioning between views when the URL changes and similar things that are tied specifically to the state/props within a given component, where you always have the values avilable that you want to animate between.

Complex sequential stuff, where you have full control over how each animation within the sequence, is something I always rely on GSAP for. IMO it has far a superior API for that kind of stuff (Like the TimelineLite class you mention). GSAP and React Motion are two very different approaches to solving animation. I would say they are almost polar opposites. I love both of them, so this isn't trying to talk down React Motion at all, but in this particular case it seems like GSAP might be the better fit and leave you with simpler, cleaner code.
",Ahrengot,
390,2016-11-08 11:38:04,"@Ahrengot Thanks for your comments.

In the first few days with React Motion, it's cool enough to help me achieve some one-step animation during state changes. **However, as the project goes on, it's inevitable that I need to make some fancier sequence of animation**. I think other devs might stumble into the same situation.

Is it possible to give React Motion the ability to animate a sequence of tween? For example, make the `<Motion>`'s `style` attribute accept an array of sub-styles, and React Motion just animate to the first sub-style, and then the 2nd and then ... and the last. In this way a sequence of tween is achieved. What do you think?
",lzl124631x,
390,2016-11-08 12:28:20,"BTW, I'm copying the [iOS App Clear (demo video)](https://www.youtube.com/watch?v=U9FEVmkSHBo) in the purpose of learning React. In the video, swipe-to-right-to-mark-item-as-completed ([at 1:07](https://youtu.be/U9FEVmkSHBo?t=68)) requires a sequence of tween.
",lzl124631x,
390,2016-11-08 13:08:12,"Back to my original question, I think it's a bug of React Motion. Made another try. It still doesn't work [demo on codepen](http://codepen.io/lzl124631x/pen/ObVwMK?editors=1010)
",lzl124631x,
390,2016-11-08 20:27:39,"@lzl124631x you need to delay updating state with setTimeout/requestAnimationFrame.

See https://github.com/nkbt/react-motion-loop/blob/master/src/Component.js#L21-L23
",nkbt,
390,2016-11-09 02:01:05,"@nkbt Wow! Thanks! It works as long as I wrap `requestAnimationFrame` around updating state.

[Demo on CodePen](http://codepen.io/lzl124631x/pen/yVYYVa)
",lzl124631x,
390,2016-11-10 01:47:37,"@nkbt Can you kindly tell me why delaying updating state with setTimeout/requestAnimationFrame do the trick?
",lzl124631x,
390,2016-11-10 07:03:51,"Not really, maybe something to do with batch updates optimisations, but I
don't know for sure
On Thu., 10 Nov. 2016 at 12:52, 7z7 notifications@github.com wrote:

> @nkbt https://github.com/nkbt Can you kindly tell me why delaying
> updating state with setTimeout/requestAnimationFrame do the trick?
> 
> ‚Äî
> You are receiving this because you were mentioned.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/390#issuecomment-259580118,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAKsoA0Q5MDkoqnlS2kOcY689h6QANIBks5q8ne6gaJpZM4KqOdn
> .
",nkbt,
389,2016-11-04 13:25:49,"Hi there,

is there a possibility to get this webpack-module as SystemJS-module?",JKatGSD,2016-11-17 08:33:15
389,2016-11-17 08:33:15,"resolved with [webpack-system-register ](https://github.com/CanopyTax/webpack-system-register)
",JKatGSD,2016-11-17 08:33:15
388,2016-11-04 12:27:42,"In my project I need to be able to pause an animation and continue from the same point of time. I struggle to to this with `Motion` and `spring`. This looks like the 'magic buttons' that were presented at the React-Europe talk (at least I think so), but I couldn't find their source code in the demos.",leonprou,
388,2016-11-07 02:20:13,"Have you tried changing the `spring`'s `stiffness` to a lower value mid-motion? I belive that is how the desired effect of _slow motion_ came to be.
",guywald1,
388,2016-11-11 12:42:41,"Thanks! Lowering `stiffness` to zero does the job
",leonprou,
387,2016-11-01 14:11:19,"Specifically regarding the bolded part:


> defaultStyle?: PlainStyle
> 
> Optional. The PlainStyle type maps to numbers. Defaults to an object with the same 
> keys as style above, whose values are the initial numbers you're interpolating on. 
> **Note that during subsequent renders, this prop is ignored. The values will
>  interpolate from the current ones to the destination ones (specified by style)**.
> 

The way I read that, is that if defaultStyle isn't provided, the style value will animate from the existing to the new. In the context of a counter, if we have a button that adds +10 to the count, every time we click it (without defaultStyle defined) we should be animating to the new value. 0 -> 10. 10 -> 20. and so on. 

Thats not whats happening however. Removing 'defaultStyle' is completely removing the motion animation, so if Im not understanding the docs correctly, how do you do what Im trying WITHOUT keeping track of the previous value via react. If I have to keep track of it I can handle the problem, just the way I read the docs, it seemed like I didnt have to keep a reference to the previous value of the counter before the add.

And some code for reference.

<S_CODE_TOKEN>",ttaghiyev,
386,2016-10-27 07:13:14,"I'm trying to use react-motion to move a component then scale it. But the following code seems to move horizontally back before scaling, does anyone can help for this?

<S_CODE_TOKEN>
",geohuz,
386,2016-11-22 11:42:55,"show me the demo on codepen/jsfiddle?
",lzl124631x,
385,2016-10-27 05:33:24,"Currently I have some code that looks like this.

<S_CODE_TOKEN>

Of course that works but when I try to add in some react-motion to the table rows I run into issues.

Something as simple as this.

<S_CODE_TOKEN>

Does not work and will never log that state.  If I move that `TransitionMotion` outside of the material-ui table it logs it just fine.

Anyone else done this with the material-ui tables?
",nmaves,
384,2016-10-16 12:54:33,"From docs:

> precision: optional, defaults to 0.01. Specifies both the rounding of the interpolated value and the speed (internal).

I am trying to change value from `243` to `164`:

<S_CODE_TOKEN>

I inserted logging into `stepper`:

<S_CODE_TOKEN>

Result is very strange. First of all I expected interpolated value had to rounded by `1` (pixel) as documented. Second render called even if value changed less then by `1`. Am I wrong in something?

Result log:

<S_CODE_TOKEN>

Maybe related to #308
",farwayer,
383,2016-10-14 11:48:01,"Hello guys, sorry for posting again almost on the same day, but I need to clear my mind about willEnter function.

I'm trying to use the TransitionMotion example from the README:

You'll be notice that I added willEnter no the example, but when I add the element, the animation dont fire for this new element. What I'm doing wrong? Thanks 

Ps: I'm not using ES2016.

<S_CODE_TOKEN>
",gabrielalan,
383,2016-10-14 14:23:28,"~~Yes, I came up this problem too. And after I add defaultStyles, it works. I don't know why willEnter doesn't work.   Eh, well, my problem is there was no animation after first rendering, not adding. Left my words out.~~
",xialvjun,
383,2016-10-14 16:31:40,"I realize that is necessary to use spring on the styles prop, like this:

`
styles={this.state.items.map(item => ({
    key: item.key,
    style: {width: spring(item.size), height: spring(item.size)},
}))}
`

So thanks guys, I think that resolves the problem.
",gabrielalan,
383,2016-10-14 16:39:41,"Ah,  haha, -_-!  I didn't notice it....
",xialvjun,
382,2016-10-14 04:52:36,"Since react-motion can change props fluently, I think there is a tween method in it. (I didn't read the source code.) And I hope you can export it. It's a good helper function. Of course, if there is no tween method in react-motion, just close this issue.
",xialvjun,
381,2016-10-14 03:03:44,"Hey guys... first, thank you for this component and your work.

I'm struggling on trying to reproduce this behavior: http://ionicframework.com/docs/api/directive/ionNavView/  (the transition animation)

If go to another page, slideIn, but if back, slideOut...

I'm using react-router v4 and trying to work on top of the example on router site: https://react-router.now.sh/animated-transitions

But, I'm not going on the right way I think... can you give me any idea of how to do this??
",gabrielalan,
381,2016-11-04 12:40:34,"Hi,

Struggling with the same problem currently with react-native and react-router v4.
Assuming I have all my pages accessible from bottom menu (separate <Match> components), I'm trying to achieve is that the new page sliding-in from bottom, while previous one still stays in the background up to the time when the new one is fully rendered.
The example in react-router suggests to build kind of a wrapper to <Match> with a usage of ""children"" function, that actually renders all the children even if not matched, but with a flag ""matched"", which is not the case for me, because I have multiple <Match> components and want to transition between them.
Unfortunately I still didn't found a clear example of how to do this with react-router + react-motion. It seems to be easy with Navigator and Scene Configs, but I am building cross-platform app so I cannot rely on native Navigator API. Any ideas would be nice ;)
",asgvard,
381,2016-11-04 21:21:38,"Hey @asgvard, I think you can do this using TransitionMotion. 
I don't have the code right now, but I did something similar, changing a little the React Router V4 example on this page: https://react-router.now.sh/animated-transitions.

I changed opacity by transform: translated and something else I don't remember.

---

To my first problem, I solved using only Motion component and using Match (from RRouter V4) inside Match component. This way you can do something similar to the transition animation in http://ionicframework.com/docs/api/directive/ionNavView/.
",gabrielalan,
381,2016-11-06 16:25:58,"Hi @gabrielalan, thanks for your reply. I think I'm close to solving this issue using Match with ""children"" func. Assuming now I have all the pages rendered in parallel and having control of ""matched"" flag, I think it's possible to transit between them, now struggling with absolute position of all the pages (because I need them to overlap), and I still have some issues with the entering page, it ""blinking"" first during transition, and only then fully rendered. If you will find some time to share some code example of how you achieved the effect of this ionNavView using only react-router and Motion, I would really appreciate this :)
",asgvard,
381,2016-11-07 11:07:13,"@asgvard 

Well, I did this using a simple Match, with a brother Match ""extended"" (using the children function). Like this:

<S_CODE_TOKEN>

MatchSlide is this guy:

<S_CODE_TOKEN>

Other way to do this, its putting MatchSlide (or your implementation) inside the ""normal"" Match or another MatchSlide. So this way to can do ""cascade"" animation between the pages.
",gabrielalan,
381,2016-11-08 21:59:24,"@gabrielalan don't understand your solution 100%, could you elaborate? can't figure out how your component changes its behavior based on whether it's a new route or `history.back()`

this is what i got, every new component coming from the left, no matter if i go back or forward in history:

<S_CODE_TOKEN>
",chapati23,
381,2016-11-08 23:39:31,"@chapati23 the MatchSlide its using the Match component from RRouter V4, so I can use the props.matched inside with ""children"" function, to tell the Motion component if it must be Opened or Closed... Its not the best way to do this, because the MatchSlide is always rendered, unless you control it before render MatchSlide.
",gabrielalan,
380,2016-10-12 20:10:04,"I apologize if this is a duplicate question...but I could not find an answer for it.

I'm using the `<Motion />` component to animate a container of sub-components, like this:

<S_CODE_TOKEN>

But each step of the animation causes all of those sub-components to re-render.  Is there anything in the library to prevent the children from rendering while its in the process of animating? Or do I have to use `shouldComponentUpdate` on `<Component1>` to prevent the rendering? Any ideas/examples of what that might look like?

Thanks in advance for your help!
",jcarenza,
380,2016-10-17 00:51:55,"Extract component2/3 into a separate one and use sCU on component1 for
sure. In current way c2/3 are rendered not by c1 but in the parent (that
has Motion)

Usual advice - make sure you rerender only component for styling, and all
other ui components are very well cached.
On Thu., 13 Oct. 2016 at 07:10, Jon Carenza notifications@github.com
wrote:

> I apologize if this is a duplicate question...but I could not find an
> answer for it.
> 
> I'm using the <Motion /> component to animate a container of
> sub-components, like this:
> 
> <Motion style={{...}}>
>     {styles =>
>         <Component1 styleProps={styles} >
>             <Component2 />
>             <Component 3 />
>         <Component1 />
>     }
> </Motion>
> 
> But each step of the animation causes all of those sub-components to
> re-render. Is there anything in the library to prevent the children from
> rendering while its in the process of animating? Or do I have to use
> shouldComponentUpdate on <Component1> to prevent the rendering? Any
> ideas/examples of what that might look like?
> 
> Thanks in advance for your help!
> 
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/380, or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAKsoGAIx_Wck5d4MA5US7m712nkPXigks5qzT6dgaJpZM4KVKuB
> .
",nkbt,
380,2017-01-15 09:50:30,@jcarenza You can also use [ShouldNotUpdate](https://github.com/codepunkt/should-not-update) to declaratively do so.,codepunkt,
379,2016-10-11 15:44:22,"I'm trying to use the `onRest` callback on Motion, but it's never called, because `shouldStopAnimation` is always returning false, which will then call it again endlessly. I've figured out that the problem is inside `shouldStopAnimation`, because in spite saying in the comments that the `stepper` will take care of floats, that isn't the case. So `currentStyle[key] !== styleValue` will always be evaluated to true, and return false.

My current implementation is the following:

<S_CODE_TOKEN>
",devdpontes,2016-10-12 09:27:49
379,2016-10-12 09:27:49,"This was happening because I was passing in values as strings.
",devdpontes,2016-10-12 09:27:49
378,2016-10-08 10:01:26,"Hello.

If you are okay, why don't we apply [create-react-app](https://github.com/facebookincubator/create-react-app) for the demos?

We can only focus on demo code not the configurations such as `react-motion/webpack.config.js`
It will handle HMR or production build.

What happens if I applied CRA. (I tried to keep your files as exist.)
- `server.js` and `webpack.config.js` files removed
- `README.md` file updated
- Each demo have their own `package.json` file
- css files splitted from the HTML file (**NOT NECESSARY CHANGES**)

Here is related [issue](https://github.com/facebookincubator/create-react-app/issues/737)
",JisuPark,
377,2016-10-05 15:13:32,"Maybe I'm misunderstanding something but it looks broken to me. As soon as I change one value it changes for all of them so there's no real way to compare. When dragging they also all drag, but I assume that's intended behavior so you can more easily see the difference.

http://chenglou.github.io/react-motion/demos/demo5-spring-parameters-chooser/
",srcspider,
376,2016-10-05 07:35:03,"How do we do the animation again in the opposite direction once it's immediately finished? It works fine if I do this.setState({slideUp: !this.state.slideUp}); inside a click handler. It's just when setting the state in the animations rest function it doesn't work and I cannot figure out why.

i.e. slide down immediately when slideup has finished.

<S_CODE_TOKEN>
",MartinDawson,
376,2016-10-05 09:33:12,"`setTimeout(() => this.setState({slideUp: false}), 0);` in the rest callback function works...

Does anyone know why I have to use setTimeout instead of doing it instantly?
",MartinDawson,
375,2016-09-30 13:23:11,"After an update I have this issue. I check my code func children is there 

<S_CODE_TOKEN>
",codejunkienick,
375,2016-10-02 05:11:43,"@AgentME do you know what's going on here?
",chenglou,
375,2016-10-03 06:29:09,"This is https://github.com/facebook/flow/issues/1964
",AgentME,
375,2016-10-03 17:08:01,"any ideas on a workaround? the workarounds in the issue are not working for me
",kellyrmilligan,
375,2016-10-03 18:32:26,"Instead of `<Motion>...</Motion>`, you could use `<Motion children={...} />`. Yeah this issue is a bit annoying.
",AgentME,
375,2016-12-09 22:55:50,"To make `<Motion>...</Motion>` work you can make children optional.

So `MotionProps` becomes:
<S_CODE_TOKEN>

",nsimonson,
374,2016-09-29 18:07:52,"Hello - first of all, great work on `react-motion` .. seriously makes animations on the web a dream :)

I'm having trouble doing a height transition, where the on the `react-motion` side of things it appears to be working properly.. however the actual `computed` height doesn't reflect in the inline style..

Here is a video of the this happening [here](http://d.pr/v/1lzIl) where you can pretty clearly see the DOM style and inline CSS value aren't equal. 

Here is the code --

<S_CODE_TOKEN>
",hanford,2016-09-29 18:21:44
374,2016-09-29 18:21:44,"Ahh, turns out that it's because this item is a in a flexbox column layout, where sibling elements are `height: 100%` ... so it appears that the browser is trying to compensate and fit things on the DOM ü§î
",hanford,2016-09-29 18:21:44
373,2016-09-25 07:37:11,"I think git/github somehow got confused when both #361 and #371 were merged in rebase mode. Some changes in #371 were overwritten by #361. This pull request fixes that.
",AgentME,2016-09-25 08:17:30
373,2016-09-25 08:17:03,"Ah so I forgot to make you rebase #371 manually. You submitted against (then stale) master.
Thanks!
",chenglou,2016-09-25 08:17:30
373,2016-09-25 08:19:04,"Passing!
",chenglou,2016-09-25 08:17:30
372,2016-09-22 21:01:51,"I'm able to get everything to transpile without errors, using the Motion component to render a list of tiles (one of my components). 

My application works as before, there is no animation happening whatsoever. Items are removed from the list that is getting rendered via a search box.

I tried it with TransitionMotion also, and there was no animation, however the list will pause for a while before shortening/lengthening to whatever the terms were in the search box.

Motion:

<S_CODE_TOKEN>

with TransitionMotion (mostly copied from the TodoList example):

<S_CODE_TOKEN>
",leshow,2016-09-28 19:53:48
372,2016-09-28 19:53:48,"style prop was not getting passed on down properly
",leshow,2016-09-28 19:53:48
371,2016-09-21 21:08:06,"This pull request builds off of https://github.com/chenglou/react-motion/pull/361 and fixes the issues with it.

Currently, adding react-motion as a dependency to a project that uses a recent version of Flow triggers Flow errors because Flow now requires type parameters to `React.Element` (needs to be `React.Element<*>` now), and because react-motion has Flow errors that require a specific value be set for Flow's ""suppress_comment"" option.
#361 addressed the `React.Element` -> `React.Element<*>` issue, but the pull request was broken for two issues: 1) react-motion still uses Babel 5.x doesn't understand Flow's type parameter syntax, and 2) the version of eslint used didn't understand Flow type parameters either.

The first part was addressed by defining a Flow type alias for `React.Element<*>` in a Flow-comment that Babel wouldn't see. (Updating to Babel 6.x could be a good idea in the future.) The second part was addressed by updating eslint. I also updated the other eslint dependencies like ""eslint-config-airbnb"", which brought along a lot of new stricter rules. I changed a few parts of the code to pass some of the less-controversial rules, but I disabled most of the new failing rules. It might be worth re-enabling those rules and patching the code to meet them, but I don't see a need to group that into this pull request.

I removed the `//$FlowFixMe` comments so that Flow-using consumers no longer need to set the ""suppress_comment"" option. A bunch of them were only needed because `rehydrateStyles()` was incorrectly annotated as returning `Array<PlainStyle>` when it really returned `Array<TransitionPlainStyle>`. The other ones I replaced with `:any` casts which don't require configuration to work. I left some comments explaining why some were needed.

I've set the CI system to run Flow (in addition to eslint and the tests) by adding flow-bin as a devDependency, adding a script in package.json which launches it, and made .travis.yml use it.

Finally, I tweaked the build to expose react-motion's type information to Flow users that depend on react-motion. People who use Flow and depend on react-motion won't need to configure anything in order to take advantage of it. Flow will type-check the names of imports from react-motion, type-check the props passed to react-motion's components, etc. I did this by changing the prerelease script in package.json to use [flow-copy-source](https://www.npmjs.com/package/flow-copy-source) to create "".flow"" files next to all babel-compiled files in lib/. ([react-draggable-list](https://github.com/StreakYC/react-draggable-list) and [ud](https://github.com/AgentME/ud) are examples of other projects with this same setup.)
",AgentME,2016-09-25 07:20:18
371,2016-09-25 07:20:52,"@AgentME Merged, thanks! Can you check master still works?
",chenglou,2016-09-25 07:20:18
371,2016-09-25 07:27:22,"Master now has a few lint errors. Might've been caused by some newer commits not in my branch? I'll put up a pull request to fix it.
",AgentME,2016-09-25 07:20:18
371,2016-09-25 07:43:15,"@chenglou Fix is in https://github.com/chenglou/react-motion/pull/373. I think the issue had to do with #371 containing #361's commit, but because they were both done in rebase mode git didn't recognize they were the same commit and it created conflicts. #373 fixes it.
",AgentME,2016-09-25 07:20:18
371,2016-09-25 20:37:40,"@chenglou can we get a new build? Would love to pull in this change, thanks @AgentME!
",twobit,2016-09-25 07:20:18
371,2016-09-26 17:38:01,"Done! Tell me if there's anything wrong.
",chenglou,2016-09-25 07:20:18
370,2016-09-21 18:46:03,"Hey, I'm trying to basically do something like this:

http://jacobp100.github.io/state-transitions/pokemon.html

which is using the `state-transitions` library.  I'm trying to achieve this by using `react-motion` instead but it doesn't seem to have a easy way to do it?

I basically have two URLs:
- /list
- /details

and when the user clicks on an item in the list I want to ease in the details view.  How would you structure that?
",sontek,
370,2016-10-09 05:36:56,"If you are using React-Router v4, they have an example in their docs. 

https://react-router.now.sh/animated-transitions
",bottledsmoke,
369,2016-09-21 10:02:36,"Hey,

I'm still getting a mounting setstate bug which was fixed in commit https://github.com/chenglou/react-motion/commit/49ea396041b0031b95f4941cc7efce200fcca454

Inspecting my node modules, it looks as if these changes appear in src/ but not in lib/

Is there a chance this was published to npm without running prerelease?
",JEGardner,2016-09-26 17:34:45
369,2016-09-26 17:38:17,"Just published a new patch version 0.4.5. Hope this works!
",chenglou,2016-09-26 17:34:45
368,2016-09-14 01:38:52,"How long does it take to finish the spring animation?
When I want to set an animation duration, how can I do?
",wuxj2015,
368,2016-09-25 13:58:25,"React-motion does not use time based animations.

I am not an expert but if you want to influence how long an animation takes you should add Stiffness and Damping to your animations.
",Lakston,
367,2016-09-07 08:06:03,"I am unable to resolve this issue with the solution given to me. My styles object is an array of objects and i have tried replicating the same type of styles as given in the example. I am still unable to resolve the warning. 
",shruti-prasad,
367,2016-09-12 06:23:21,"Can you give a more specific example?
",chenglou,
367,2016-09-12 06:26:41,"Hi,
The styles I am providing happens to be  an array of objects. I even tried representing the styles in the same format as the example in the link that was provided as my previous solution to no avail. I still receive the same warning.

Thanks
Shruti

From: Cheng Lou [mailto:notifications@github.com]
Sent: Monday, September 12, 2016 11:53 AM
To: chenglou/react-motion react-motion@noreply.github.com
Cc: Shruti Prasad shprasad@adobe.com; Author author@noreply.github.com
Subject: Re: [chenglou/react-motion] Reopen: Warning: Failed propType: Invalid prop 'styles' supplied to 'TransitionMotion'. #359 (#367)

Can you give a more specific example?

‚Äî
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHubhttps://github.com/chenglou/react-motion/issues/367#issuecomment-246259237, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AUBEj-FUALeyux9TI2ac7bOajYQxQDMRks5qpO_egaJpZM4J2pMD.
",shruti-prasad,
367,2016-09-12 06:28:10,"TransitionMotion takes in an object, not an array. You need to turn it into an object of key => whateverValue.

Also, you're animating things that mount & unmount right?
",chenglou,
367,2016-09-12 06:42:36,"I have mapped an array of objects with a unique key to transition motion, hence it takes in an object at each iteration. I am animating things that mount and unmount.

From: Cheng Lou [mailto:notifications@github.com]
Sent: Monday, September 12, 2016 11:58 AM
To: chenglou/react-motion react-motion@noreply.github.com
Cc: Shruti Prasad shprasad@adobe.com; Author author@noreply.github.com
Subject: Re: [chenglou/react-motion] Reopen: Warning: Failed propType: Invalid prop 'styles' supplied to 'TransitionMotion'. #359 (#367)

TransitionMotion takes in an object, not an array. You need to turn it into an object of key => whateverValue.

Also, you're animating things that mount & unmount right?

‚Äî
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHubhttps://github.com/chenglou/react-motion/issues/367#issuecomment-246259845, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AUBEj2fJ1QlZ64rr8_vkUd-JrzPXMqCWks5qpPEAgaJpZM4J2pMD.
",shruti-prasad,
366,2016-09-02 16:08:56,"To avoid potential naming conflicts with npm, npmcdn.com is being renamed to unpkg.com. This is an automated pull request to update your project to use the new domain.
",npmcdn-to-unpkg-bot,2016-09-12 06:22:46
366,2016-09-12 06:22:48,"Woah! Thanks!
",chenglou,2016-09-12 06:22:46
365,2016-09-01 13:55:01,"Hello everyone. I've been playing around with `react-motion` for the last couple of days and it's been a pretty intensive relation so far üò≠ . I'd very much appreciate some guidance on when to use `Motion` vs `TransitionMotion` or why my use case, which I believe is quite common, is giving me this much struggle.

First, let me explain what I am trying to achieve. My use case is a **pane that appears from the right** with information about a point on a map that you just clicked. What I want to _conditionally_ animate is the enter animation, so that when you click on another point in the map and **the pane is already in place it won't animate from the beginning again**.

I'm new to the library and went ahead and started using `TransitionMotion` because my use case seemed to apply to the _Helps you to do mounting and unmounting animation_ premise.

I thought `onRest` would allow me to set a `shouldAnimate` flag in my component's inner state when the enter animation finishes so it happens only once, but since it is implemented in `Motion` and not in `TransitionMotion` I got kind of lost. Why is it not implemented? Is it not necessary because there is already a way to do this?

Mainly I'm wondering if I should be using `Motion` instead just because of that feature. But I'm not sure üòÅ and the difference between the two is still blurry to me. Hopefully someone can point me in the right direction.

Thanks for your time üëã
",p4bloch,
365,2016-09-05 15:36:56,"@nkbt any chances you can shed me some light here? Thanks :)
",p4bloch,
365,2016-09-06 20:23:51,"Hi, have you tried using the same key in the styles array? Because if you use the same key, TransitionMotion will asume that it is the same object, and therefore it will not animate it. If the keys are different, it will animate out the old element (which is the one that it is no longer there), and animate in the new element.

I hope this is works for you!
",demianalonso,
365,2016-09-06 20:25:37,"@demianalonso you were absolutely right. Passing the same key prevented the pane to animate multiple times. Thank you so much!!
",p4bloch,
364,2016-09-01 03:15:27,"This might be a naive question, but I usually measure my css animations in chrome devtools. However , I am hoping to integrate react-motion in my project and just wanted to see how to measure animations performance(i.e fps) 
",jasan-s,
364,2016-09-02 04:13:55,"You can use https://github.com/mrdoob/stats.js/ and wrap https://github.com/chenglou/react-motion/blob/e48fdad6d82fda32f2d4e5b3d2f295e82f6c580b/src/Motion.js#L92-L199 with it.

Also what could be a bit easier (without code rewrite), use `proxyquire` when require `react-motion/lib/Motion`. Something like:

<S_CODE_TOKEN>

PS: I did not try that yet for react-motion. Code purely out of my head here
",nkbt,
363,2016-08-30 17:47:47,"Can't figure out how to animate translateY. When replacing the value with top it works fine. 

<S_CODE_TOKEN>
",realseanp,2016-09-12 06:26:33
363,2016-09-12 06:26:33,"Check the value in the DOM. translateY, for a react style, needs to be a string, right? `{transform: 'translateY(' + config.translateY + 'px)'}`

Hope that solves it!
",chenglou,2016-09-12 06:26:33
363,2016-11-29 09:20:29,"I do have the same problem, none of the transform property are supported
<S_CODE_TOKEN>
this give me an invalid styles supplied to TransitionMotion, though it's valid react style props",ticruz38,2016-09-12 06:26:33
363,2017-02-27 13:46:13,"In case anyone else didn't really get it the first time (like me üòÑ ) you need to declare the styles explicitly inside your interpolatedStyles not in your styles object on the TransitionMotion component. Like this;

<S_CODE_TOKEN>

",mhaagens,2016-09-12 06:26:33
363,2017-02-27 14:07:38,"Sure! but still the transform property doesn't apply, I had to use a left property and positioning my element absolutely in order to get the animation I wanted...",ticruz38,2016-09-12 06:26:33
363,2017-02-27 14:12:26,"Here's how I use it for route transitions with translateX;
https://gist.github.com/mhaagens/61f88e3fbfddbe2c00708f3ebd099be4",mhaagens,2016-09-12 06:26:33
363,2017-03-11 21:35:54,"You have to use their transforms method:

[https://facebook.github.io/react-native/docs/transforms.html](https://facebook.github.io/react-native/docs/transforms.html)",eemebarbe,2016-09-12 06:26:33
362,2016-08-27 17:57:56,,amilajack,2016-08-28 01:21:44
362,2016-08-28 01:21:38,"Thanks, `jsx` highlighting seems to be ok on github, but unsupported on npm
",nkbt,2016-08-28 01:21:44
361,2016-08-22 20:43:07,"In later versions of flow, it requires that generic types have their
type parameters specified. All of the `ReactElement` declarations were
throwing an error saying these needed to be specified.

This change updates `ReactElement` to `React$Element<*>`
",bgeihsgt,2016-09-25 07:17:40
361,2016-08-23 03:22:00,"@bgeihsgt seems like it's breaking Eslint. maybe use `ReactElement<*>` instead?
",zhigang1992,2016-09-25 07:17:40
361,2016-08-23 05:43:57,"@zhigang1992 Looks like it's a parsing error with brackets. I tried `ReactElement<*>` and got the same errors. Looking around, I think you'll need to upgrade `babel-eslint` to at least version 5.0.0. That requires other upgrades too that I tried for a little bit and then gave up b/c I didn't have time to investigate and fix.
",bgeihsgt,2016-09-25 07:17:40
361,2016-09-02 15:25:58,"Any update on this? 
",jefflau,2016-09-25 07:17:40
361,2016-09-02 18:11:18,"@jefflau someone needs to upgrade babel-eslint to at least 5.0.0 which requires a cascade of other upgrades. I tried to upgrade for a little bit but didn't have the time to see it through.
",bgeihsgt,2016-09-25 07:17:40
361,2016-09-21 21:12:19,"I've created a new pull request https://github.com/chenglou/react-motion/pull/371 which extends this one and fixes the issues with it.
",AgentME,2016-09-25 07:17:40
361,2016-09-21 21:18:20,"Cool, thanks @AgentME!
",bgeihsgt,2016-09-25 07:17:40
361,2016-09-25 06:08:53,"@AgentME to be clear: if I merge this PR then merge #371, things will be fine?
",chenglou,2016-09-25 07:17:40
361,2016-09-25 07:14:03,"@chenglou Yes, that will work. (#371 actually contains the exact commit of this pull request; accepting both would be fine.)
",AgentME,2016-09-25 07:17:40
361,2016-09-25 07:18:02,"Let's try it then! Thanks @bgeihsgt and sorry for the wait!
",chenglou,2016-09-25 07:17:40
361,2016-09-27 16:34:07,"Cool! Thanks!
",bgeihsgt,2016-09-25 07:17:40
360,2016-08-14 17:00:26,"Hi, I'm using react-native 0.30 with android API 23. I have facing issue with smoothing animations. The library works very well with ReactJS in browser. But on react-native, it looks like some noticeable frame drops occurs. In other word, the animation is not very smooth as it is in browser. Am I missing something here? Is there anything need to be added to make animations smooth with react native?

I have also test it on devices to make sure that it's not my emulator causing the problem.
",shoumma,2016-08-19 21:17:13
360,2016-08-19 08:50:51,"Android probably has a rough time. Have you tried Animated on native?
Also, it helps to freeze subtrees while the animation's happening.
",chenglou,2016-08-19 21:17:13
360,2016-08-19 14:16:20,"Yes, I did get the job done with Animated library. But your library is also awesome.
",shoumma,2016-08-19 21:17:13
360,2016-08-19 21:17:13,"Thanks! =)
Well, I'll mark this as solved and close this then. Sorry for giving you a hard time with perf.
",chenglou,2016-08-19 21:17:13
359,2016-08-12 10:43:59,"I am getting the following warning while using InterpolatedStyles Warning: Failed propType: Invalid prop 'styles' supplied to 'TransitionMotion'.
",shruti-prasad,2016-08-13 04:05:24
359,2016-08-12 14:59:45,"I was getting the same until I figured out what I was doing, it needs to be an array of objects
",sanpoChew,2016-08-13 04:05:24
359,2016-08-13 04:05:24,"Yep. https://github.com/chenglou/react-motion#--styles-arraytransitionstyle--previousinterpolatedstyles-arraytransitionplainstyle--arraytransitionstyle

Sorry for the confusion!
",chenglou,2016-08-13 04:05:24
359,2016-09-07 07:09:56,"I am still getting the warning despite using an array of objects. I tried replicating the styles format as given in the example in the above link.
",shruti-prasad,2016-08-13 04:05:24
359,2017-01-24 00:23:51,"Getting this warning and I don't have any clue:
![image](https://cloud.githubusercontent.com/assets/5992964/22228756/c44c853a-e205-11e6-8766-7b67844fbe00.png)
My styles prop seems satisfy this validation https://github.com/chenglou/react-motion/blob/master/src/TransitionMotion.js#L195
",quangbuule,2016-08-13 04:05:24
359,2017-02-08 23:03:53,I am having the same problem. Did you find a fix?,cavaloni,2016-08-13 04:05:24
359,2017-03-11 12:38:12,"I fix this warning by add string to key name. eg.

<S_CODE_TOKEN>

<img width=""252"" alt=""screen shot 2560-03-11 at 7 37 40 pm"" src=""https://cloud.githubusercontent.com/assets/943742/23823301/3c265d6e-0692-11e7-9ffd-e4d520071370.png"">
",pangpond,2016-08-13 04:05:24
358,2016-08-09 04:18:36,"When a new element transitions _into_ view, it should _decelerate_ to appear settled into place. When an element transitions _out of_ view, it should _accelerate_ until it's gone. This is common animation practice, and Google has even documented it as part of their ""Motion"" section for the Material Design spec:
- https://material.google.com/motion/movement.html#movement-movement-in-out-of-screen-bounds

Spring physics work great out of the box for transitioning elements into view, or from one location to another. However it quickly becomes cumbersome to create the appearance of acceleration right up until the end of an animation using springs, as they are always trying to reach a settled state.

One workaround I see is to set the target about twice as far off-screen as usual, so the element is hidden before it decelerates. This has the disadvantage of doubling the amount of computed frames necessary and keeping DOM elements around longer. It's further complicated when multiple properties should be animated. I end up tweening from a value of 0 to 2, and just using the first half of interpolated values from 0 to 1 to map style values myself, essentially discarding the rest.

Unmounting animation support seems to be a big win these days. Given that unmounted components are leaving the view, I'd think this would be a >5% use case.
",MilllerTime,
357,2016-08-03 20:05:39,"I'm curious how maintainers would feel about adding a callback for each step (more or less calling an optional callback each time the `render` function of `Motion` is run). We use `Motion` at my work and have found ourselves in a situation where `onStep` (or something like that) would be really helpful.

Please let me know if this is something we're open to. I'd be happy to do the work myself. If it's a no go, I'm happy to fork.

Cheers!
",joshacheson,
357,2016-08-04 00:31:46,"Isn't the function you pass as a child - that kind of callback by itself?
",nkbt,
357,2016-08-04 19:54:50,"Yes, in a sense! I suppose what might be preferred is for an `onStep` function to be called _before_ the `render` function of `Motion`.

Currently I can achieve my desired effect by performing a side effect (function call) inside of `Motion`'s `children` function, i.e.:

<S_CODE_TOKEN>

however I may or may not be alone in my distaste for doing this. I suppose I'm curious whether or not

A) A callback can be offered and called (if provided) before `Motion`'s `setState` that results in a re-render (ideally called with the values that would go in to `setState`)
B) `Motion` absorbs/abstracts the impure `return` responsibility by calling the aforementioned callback during it's own `render`. Whilst potentially unideal for `Motion` itself, this would likely be preferable to `Motion`'s consumers (application developers).

Again, if I'm unique in my need / desire for this API then I can either go with the ""gross"" solution or fork `Motion`. I thought it was worth broaching the topic!
",joshacheson,
357,2016-08-05 02:46:37,"This is what we do in one place to do smooth scrolling of a component

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",nkbt,
357,2016-08-05 02:48:04,"We could easily do instead of returning `null`:

<S_CODE_TOKEN>

Can't really see the need for an extra prop....
",nkbt,
357,2016-08-05 21:14:06,"Yeah, I suppose to me it was strange to use a component in a side effectful manner like this. I totally accept, though, that it definitely works! If this is how people in general are comfortable proceeding then certainly I can accept it as well!
",joshacheson,
357,2016-08-12 12:01:37,"@nkbt hi there, I'm trying to implement smooth scroll using this technique, but I can't quite understand how do you trigger scrolling component's onScroll and put scrollTop to state without experiencing default scrolling behaviour?

e.g I have following code

<S_CODE_TOKEN>

And Area looks like this

<S_CODE_TOKEN>

Don't mind debouncing, it doesn't quite fit here, throttling would work better I guess.
What I experience, with or without debouncing or throttling, is that native scroll behaviour triggers first  thus messing up area's scrollTop.  Any help would be greatly appreciated

And thanks for this library, I love it!
",berrtech,
357,2016-08-12 13:38:41,"@berrtech You'll have to skip handling of the browser `scroll` event when animating. This is quite tricky because the user might want to scroll the opposite way, so that the ongoing scrolling animation stops. 

I've implemented a component that handles the viewport with scrolling, see below:
(gist here for discussion: https://gist.github.com/sompylasar/8b787c3fcfe0e14bba869a4e9a883135 )

_Viewport.js_

<S_CODE_TOKEN>

_./styles.scss_

<S_CODE_TOKEN>
",sompylasar,
357,2016-08-13 00:19:51,"@berrtech do not use state at all, make your side-effect work without any state updates. Keep it isolated. Then it all works. We use it exactly as I wrote in my prev 2 comments and it works great.

@sompylasar looks quite complicated =(
",nkbt,
357,2016-08-13 00:28:24,"@nkbt This may be simplified a bit if the X and Y handling is unified.

<S_CODE_TOKEN>

But the scroll handling is complex because the browser reports both user scrolling and API scrolling with the same ""scroll"" event -- these have to be distinguished.
",sompylasar,
357,2016-08-13 12:47:00,"@sompylasar it looks really complicated and fragile, I managed to tweak this to use with div container rather than window, however it skipped animation sometimes, needs more tweaking I guess.

@nkbt but how do you handle scrolling container by user? While this works when you control scrollTop from the outside, Motion doesn't know when it's animateTo value is changed by user, so, when you animate to, say, 300px, and then user scrolls down to 600px, Motion has no idea than next animation should be from 600px, it just snaps to 300px and then animates because that was previous known value.
",berrtech,
357,2016-08-13 19:26:05,"@berrtech Using window scrolling is needed for mobile devices. If you have no intention to support them, or you're making a UI with multiple scrollable containers, then yes, a div will do. But you'll have to handle the scroll event in it instead of in viewport, the same way, because it behaves the same way.
",sompylasar,
357,2016-08-13 19:28:10,"@berrtech My previous comment applies to native scroll behavior that you seem to want to use. The other way is to implement scroll behavior entirely in your program, manually handling mouse / touch / keyboard.
",sompylasar,
357,2016-09-21 18:38:02,"In [react-draggable-list](https://github.com/StreakYC/react-draggable-list), I needed to adjust the scroll position along with an animation, so I accomplished this by creating an OnUpdate component which called its callback prop every time the callback prop changed: https://github.com/StreakYC/react-draggable-list/blob/1d2917a0eb1d399883193db3b53011ed486c3ff3/src/index.js#L453.
",AgentME,
357,2016-11-02 08:24:22,"@nkbt Just to add to @berrtech 's question.  Do you have a preferred strategy for dealing with cases where the UI state gets out of sync with <Motion> between renders?  It would be nice to be able to set the starting value of the animation on any desired render after a component is mounted. 

 Is the defaultStyle prop intended to handle cases like this?  Because in my case where new scroll events are triggered by user input - setting defaultStyle to the current scroll position of the element doesn't help because Motion ignores it as mentioned in the docs.

My current non-ideal work-around is to force an extra render of Motion before the animation to ensure Motion's starting point is in sync with the UI.

<S_CODE_TOKEN>

So - it sees that an auto-scroll event has been triggered - and calls setState to set the value of motionStyle to the current scrollTop value of the element.  No animation happens because it's not using a spring.

But now that Motion has the new starting point - we still need to trigger the animation somehow.  But I've used up the props change caused by the user  click - so there is nothing to trigger the next render.  So the only thing I've been able to come up with is to use the following:

<S_CODE_TOKEN>

So - after the render to sync the UI with Motion - calling setState in componentDidUpdate with the desired spring triggers another render which does the animation.  Using the prevRenderType flag prevents an infinite regress.

This works - but setting state in componentDidUpdate is generally frowned upon.  Plus it uses up an extra render.

Would be keen to hear if anyone has come up with another solution.
",danhaggard,
357,2016-11-03 02:36:43,"I am afraid I am using similar technique in react-collapse, so no better
solution from me

On Wed., 2 Nov. 2016 at 19:24, Dan Haggard notifications@github.com wrote:

> @nkbt https://github.com/nkbt Just to add to @berrtech
> https://github.com/berrtech 's question. Do you have a preferred
> strategy for dealing with cases where the UI state gets out of sync with
> between renders? It would be nice to be able to set the starting value of
> the animation on any desired render after a component is mounted.
> 
> Is the defaultStyle prop intended to handle cases like this? Because in my
> case where new scroll events are triggered by user input - setting
> defaultStyle to the current scroll position of the element doesn't help
> because Motion ignores it as mentioned in the docs.
> 
> My current non-ideal work-around is to force an extra render of Motion
> before the animation to ensure Motion's starting point is in sync with the
> UI.
> 
> componentWillReceiveProps(nextProps) {
>   if (this.props.toggleScroll !== nextProps.toggleScroll) {
>     this.setState({
>       motionStyle: {y: this.elem.scrollTop},
>       prevRenderType: 'uiSync',
>     });
>   }
> }
> 
> So - it sees that an auto-scroll event has been triggered - and calls
> setState to set the value of motionStyle to the current scrollTop value of
> the element. No animation happens because it's not using a spring.
> 
> But now that Motion has the new starting point - we still need to trigger
> the animation somehow. But I've used up the props change caused by the user
> click - so there is nothing to trigger the next render. So the only thing
> I've been able to come up with is to use the following:
> 
> componentDidUpdate() {
>   if (this.state.prevRenderType === 'uiSync') {
>     this.setState({
>       motionStyle: {y: spring(this.props.offsetTop, this.state.springConfig)},
>       prevRenderType: 'autoScroll',
>     });
>   }
> }
> 
> So - after the render to sync the UI with Motion - calling setState in
> componentDidUpdate with the desired spring triggers another render which
> does the animation. Using the prevRenderType flag prevents an infinite
> regress.
> 
> This works - but setting state in componentDidUpdate is generally frowned
> upon. Plus it uses up an extra render.
> 
> Would be keen to hear if anyone has come up with another solution.
> 
> ‚Äî
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/357#issuecomment-257800543,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAKsoFxKaOilHMPRgDMg9ITN_M_xygSXks5q6Ei3gaJpZM4JcCql
> .
",nkbt,
357,2016-11-22 23:09:01,"If you only have one value you need to care about, we were able to fudge an `onStep` by creating a special Motion component. See it working in a live example [here](http://codepen.io/souporserious/pen/411263ee25d4136f721498627299a1ad?editors=0010).

<S_CODE_TOKEN>

",souporserious,
356,2016-08-02 02:10:58,"I've been reading as much documentation as I can find on react-motion (documentation on this seems sparse) but I'm unable to figure this one out. I found a tutorial [on medium](https://medium.com/@nashvail/a-gentle-introduction-to-react-motion-dc50dd9f2459#.eqpi2f6pp) that manages to do it, except they are using a `StaggeredMotion`, I can't find any documentation that says the same is possible with just a `Motion` component, looks like they take different props?

In the end I went with the native Web Animations api, even though it's not complete yet and I think only a few browsers support it. I'd much prefer to use react-motion but not being able to cancel and reverse an animation is really important imo. Trying to animate between pages and the user may interrupt that navigation, would rather have no animation than clunky animation.
",AlastairTaft,2016-08-02 06:30:30
356,2016-08-02 02:25:30,"You do not cancel and start, you just set new ""target"" styles and Motion will move over there.
",nkbt,2016-08-02 06:30:30
356,2016-08-02 02:26:47,"So basically half-way there you set your styles to go back to 0 or something...

Sort of:

<S_CODE_TOKEN>
",nkbt,2016-08-02 06:30:30
356,2016-08-02 02:28:36,"Oh that's really clean I like it, thanks I will give it a try
",AlastairTaft,2016-08-02 06:30:30
356,2016-08-02 02:29:13,"Does that work with the springs?

EDIT: Checked and works
",AlastairTaft,2016-08-02 06:30:30
355,2016-08-01 16:36:34,"Hello,

I'm using https://github.com/uber/react-map-gl, which in short is a fully stateless map component. On each scroll, drag, etc, it will flood you with calls to the callback indicating viewport change and you have to handle map updates yourself. That works super nicely and super smoothly. However, I sometimes need an external component to provide the map with, let's say a new centre point, and I would like to transition to it nicely (I can determine when to do it based on checks in `componentWillReceiveProps` and I can determine when to disable this functionality, by using `onRest`.

Is there a way of conditionally disabling an animation? (see below for a crap solution describing what I'm after):

<S_CODE_TOKEN>

The problem with the above is that Map gets recreated whenever I enable/disable animation. 
",kujon,2016-08-02 09:12:42
355,2016-08-01 18:14:16,"Try always rendering (returning) the map wrapped with Motion, but when no
animation required, pass your viewport styles directly to Motion, without
the spring configs that are likely created in ""createMotion"". This way
Motion will skip animating and will render the final values immediately.
Hope this helps.
",sompylasar,2016-08-02 09:12:42
355,2016-08-01 22:02:18,"I usually do something like:

<S_CODE_TOKEN>
",nkbt,2016-08-02 09:12:42
355,2016-08-02 09:12:42,"That is one brilliant solution, thx!
",kujon,2016-08-02 09:12:42
354,2016-07-30 08:14:56,"I'm sure I'm just missing something but I still haven't been able to wrap my head around using react-motion to implement a simple highlight-then-fade animation.

All I want to do is a basic highlight by animating the background color opacity from 0 to 1 when a specific prop is true and then fade the opacity back to zero after 2 seconds.  If the prop changes back to false I don't want that to affect any animation in progress.

Am I being clear enough?
",dlong500,2016-08-02 06:29:38
354,2016-07-30 12:27:37,"You can check https://github.com/nkbt/react-motion-loop
If it does not fit directly, check how it is done and modify for your case
On Sat, 30 Jul 2016 at 18:14, Davison Long notifications@github.com wrote:

> I'm sure I'm just missing something but I still haven't been able to wrap
> my head around using react-motion to implement a simple highlight-then-fade
> animation.
> 
> All I want to do is a basic highlight by animating the background color
> opacity from 0 to 1 when a specific prop is true and then fade the opacity
> back to zero after 2 seconds. If the prop changes back to false I don't
> want that to affect any animation in progress.
> 
> Am I being clear enough?
> 
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/354, or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAKsoAXpdHziDud6GNbw_LKa3ctUZrTqks5qawgBgaJpZM4JYwfA
> .
",nkbt,2016-08-02 06:29:38
354,2016-07-30 21:18:21,"Thanks for the reference--I'll have to experiment some.  I love react in general (and redux too) but I'm still frustrated that so much effort has to be put into something as simple as a highlight on change effect (aka ""yellow fade"").  This type of thing outside of React would involve just one or two lines of code.

For what it's worth I don't think I've actually seen as single react-based demo of what I'm trying to do.  The combination of animating in place components, colors with alpha channels, and chaining to fade back out seems to be harder and more difficult to animate than all the fancy animation demos out there.

Maybe it might be worth making a basic demo page with the types of basic animations used heavily in production sites to create good UX feedback?
",dlong500,2016-08-02 06:29:38
354,2016-07-30 21:24:25,"The problem really exists only when you are trying to use the wrong tool.
For disposable non-controllable throw-away animations like you are talking
about the best way is to stick to css transitions. In our projects we use
css transitions quite a lot, though they are always limited to the very
basic stuff, that we do not care of controlling at all.

As soon as we want some more time and space precision, interruptability,
animating more complex JS values - we go with react-motion. And it works
perfectly.

Choose your battles ;)

On Sun, Jul 31, 2016 at 7:18 AM Davison Long notifications@github.com
wrote:

> Thanks for the reference--I'll have to experiment some. I love react in
> general (and redux too) but I'm still frustrated that so much effort has to
> be put into something as simple as a highlight on change effect (aka
> ""yellow fade""). This type of thing outside of React would involve just one
> or two lines of code.
> 
> For what it's worth I don't think I've actually seen as single react-based
> demo of what I'm trying to do. The combination of animating in place
> components, colors with alpha channels, and chaining to fade back out seems
> to be harder and more difficult to animate than all the fancy animation
> demos out there.
> 
> Maybe it might be worth making a basic demo page with the types of basic
> animations used heavily in production sites to create good UX feedback?
> 
> ‚Äî
> You are receiving this because you commented.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/354#issuecomment-236390479,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAKsoDfQYYdDmCs6kP8ZTb2lFNha7KLvks5qa7-egaJpZM4JYwfA
> .
",nkbt,2016-08-02 06:29:38
354,2016-07-30 21:50:51,"I get what you're saying, and it also doesn't help that I'm not a full-time coder so my expertise isn't up to par with a lot of other people.  I've tried using more simplified CSS transitions with react's `CSSTransitionGroup` and still got stymied on this particular case.  However, that was some time ago and there were some serious bugs that may have since been worked out in later react versions.  It also doesn't help that `CSSTransitionGroup` is geared towards adding and removing components when I'm trying to highlight an existing component upon a prop change.

In any case, I wish I could find someone who was already doing what I'm trying to do and that might give me some clarity.  Maybe I'm making it more complicated than it needs to be...  but thanks for the feedback anyway. 
",dlong500,2016-08-02 06:29:38
354,2016-07-30 22:12:08,"Depending on what you are doing, you might not even need a CSSTransitionGroup. You can use pure css keyframes for that kind of animation! when you detect the change you can just add the class.
",dozoisch,2016-08-02 06:29:38
354,2016-07-30 22:14:33,"@dozoisch exactly, I actually meant using pure css. We never use `CSSTransitionGroup`
",nkbt,2016-08-02 06:29:38
354,2016-07-30 22:16:15,"@dlong500 check out http://www.reactiflux.com there are always heaps of people (myself included) in your timezone and you can have some real-time talk there in appropriate channel
",nkbt,2016-08-02 06:29:38
354,2016-07-31 01:37:16,"Great, thanks for all the quick feedback.  I'll experiment and look into the reactiflux community as well.  
",dlong500,2016-08-02 06:29:38
354,2016-07-31 12:33:46,"To make a wave animation, you could map a linear transition to a wave with a simple math function like a sine (`Math.sin(x)` where x transitions from 0 to 1 with react-motion). You could tweak the math function to formulate a wave you like.
",sompylasar,2016-08-02 06:29:38
354,2016-08-02 06:29:38,"So I'm closing this because it did end up being ridiculously simple to just add CSS classes on the fly (especially using the [classnames](https://github.com/JedWatson/classnames) module).

The only tricky part is that I had to add a timer and maintain some local state so that another change to the monitored prop wouldn't immediately wipe out the in-progress CSS animation.  Just in case anyone is curious, all I needed to get the affect I was looking for is something like this:

<S_CODE_TOKEN>

So thanks for pointing me in the right direction (including the bit about avoiding `CSSTransitionGroup`).  It ending up being so much easier than I ever though it would.  I don't know if anything changed since I first started using react a little over a year ago, but I somehow had the mistaken impression that the react internals would screw up CSS animations unless things were done some special ""react way"".
",dlong500,2016-08-02 06:29:38
353,2016-07-26 08:47:24,,yuheiy,2016-08-13 08:00:27
353,2016-08-13 08:00:22,"Thanks!
",chenglou,2016-08-13 08:00:27
352,2016-07-26 08:41:03,"Hey,
I found out styles object (TransitionMotion) does not support integers as a key value. I think it should.

thanks
",tomexx,
352,2016-10-08 12:29:27,"I ran into this too, but there's a reason for that.

Look at [#315](https://github.com/chenglou/react-motion/issues/315)

You can always cast to string yourself.
",moljac024,
351,2016-07-19 18:31:19,"If I have a drop zone for a <Motion /> component, and I want to trigger the drop zone's OnMouseEnter or OnMouseOver effect (let's say to change the class of the drop zone to ""dropzone-success"" or something) while dragging, is there a way to do this? I think right now, the div doesn't detect the mouse as being over it b/c it's technically over the <Motion /> component. I've been scratching my head at this one for a while, but I just can't seem to come up with a clever hack for it.
",gfantom,
351,2017-02-01 19:32:24,@gfantom did you find something for this?,buildog,
351,2017-02-02 02:33:03,"@buildog I'm not sure if I'm remembering correctly since it was so long ago, but I think this problem had something to do with the Chrome browser. I never found a fix for this problem, but what you could do is track your mouse position within the DOM within your component... but it would be annoying to code.",gfantom,
350,2016-07-13 01:08:35,"So I'm trying to create a wrapper React component around `<StaggeredMotion>` which takes in a generic array of React children.

The thing is, when I call `React.cloneElement(child, {key: i, style: interpolatedStyle})` inside of `<StaggeredMotion>` to create a cloned child with the key and style it doesn't apply the transition styles.

This does work when I wrap the child with a `div` and attach the key and style to the `div`, but I would ideally like it to not affect layout. I'm wondering why it does not work with the cloned child itself?
#### Full Code

<S_CODE_TOKEN>
",Setsun,2016-07-13 15:18:41
350,2016-07-13 15:18:41,"Hah just kidding, looks like this resolved itself...closing this.
",Setsun,2016-07-13 15:18:41
349,2016-07-05 20:53:10,"I see we can set defaultStyle but I also read this is only run once and doesn't run on re-renders. How can I have the same effect then with style?
",imdpk,
349,2016-07-05 23:18:37,"Probably do not use `defaultStyle` and change only `style` in a way you want. Animation will follow
",nkbt,
349,2016-07-06 12:14:23,"My issue is the component is being re-rendered from a higher order component. I am trying to translate to 0 from the last know DOM position.
",imdpk,
349,2016-07-06 12:19:53,"You may not then use spring() only for the first time so there is no
animation if you want to quickly restore position
On Wed, 6 Jul 2016 at 22:14, Damian Phillips-king notifications@github.com
wrote:

> My issue is the component is being re-rendered from a higher order
> component. I am trying to translate to 0 from the last know DOM position.
> 
> ‚Äî
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/349#issuecomment-230754465,
> or mute the thread
> https://github.com/notifications/unsubscribe/AAKsoEdZb8d-od5OZ2ybjCvvklqkYpZ1ks5qS5wggaJpZM4JFhS-
> .
",nkbt,
349,2016-07-06 12:23:06,"Say that again, I do not think I understand.
",imdpk,
349,2016-07-06 23:04:12,"Something like 

<S_CODE_TOKEN>
",nkbt,
348,2016-07-04 06:30:13,"Hi Guys
I am using Motion to do a simple animation of width in my web application.
I want to do a specific action once the animation has completed so I tried using onRest prop.

The issue is that onRest is called too many times. I could not find a onEnd prop like that would get called once animation has completed

Please suggest what I am missing
",samuelpaulc,
348,2016-07-04 07:24:05,"Also can I dispatch an action when animation completes like inside the onRest prop?
",samuelpaulc,
348,2016-07-04 08:41:50,"Conceptually, the animation has no end, the `onRest` callback is simply called when it is idle. If you want the callback to have an action only after the first animation is complete, you should try to do something like this:

<S_CODE_TOKEN>
",bloodyowl,
348,2016-07-04 10:38:13,"Thank you @bloodyowl for the example
In my case though after animation some dom elements may have been moved due to other dom elements becoming hidden. So I am trying to get new offsets which I will get correctly only after animation ends
So I need to know when the last onRest is called and I would really like to avoid putting a timer for the same
",samuelpaulc,
347,2016-07-02 12:40:34,"can i use Staggered motion when component mount or unmount?
",blwoosky,
347,2016-08-09 03:26:48,"[Yes you can.](https://github.com/chenglou/react-motion#--styles-arraytransitionstyle--previousinterpolatedstyles-arraytransitionplainstyle--arraytransitionstyle) `<TransitionMotion />` allows you to pass a function to the `styles` prop instead of an array, which allows staggered mounting animation.

I haven't personally tried it when unmounting multiple items simultaneously, but can't see any reason why the effect wouldn't work there also.
",MilllerTime,
346,2016-06-27 15:04:12,"I wrote a simple application that has 3 balls - the first of which is draggable, and the rest stagger-follow the first, similar to the chat-heads demo.

The app worked butter smooth on a simulator, but when I attempted to run it on my iPhone 5 the interpolation broke.

The draggable ball would move with my finger, but the rest of the heads would remain in their starting positions until after I had finished dragging - at which they all staggered-followed the leader ball.

I was using `PanResponder` to capture finger movement.
",julienvincent,
346,2016-07-06 11:25:03,"I've narrowed it down to the case of react-motion being unable to run parallel animations. [rn animated](https://facebook.github.io/react-native/docs/animated.html#parallel)
",julienvincent,
345,2016-06-27 10:54:31,"I am trying to include TransitionMotion with a staggered effect.. I am using the function format for the styles prop to have the staggered effect.. But the prevInterpolatedStyles is always giving me an empty array.. I am not sure what I've missed and can't get it to work. Have a look at the code below...

This is the one where prevInterpolatedStyles is always returning an empty array.

`<TransitionMotion 
      defaultStyles={this.state.data.map((obj,index) => ({data: obj, key: index+"""", style:{s: 0}}))}
      styles={(prevInterpolatedStyles) => {console.log(prevInterpolatedStyles); return prevInterpolatedStyles.map((_, i) => {
        return i === 0
          ? {data: _, key: i+"""", style:{s: spring(this.state.show ? 1 : 0)}}
          : {data: _, key: i+"""", style:{s: spring(this.state.show ? prevInterpolatedStyles[i - 1].style.s : 0)}}
      })}}>/* Elements to be animated */</TransitionMotion>`

This one works fine without Staggering effect.

`<TransitionMotion 
      defaultStyles={this.state.data.map((obj,index) => ({data: obj, key: index+"""", style:{s: 0}}))}
      styles={this.state.data.map((obj,index) => ({data: obj, key: index+"""", style:{s: spring(this.state.show ? 1 : 0)}}))}> /* Elements to be animated */</TransitionMotion>`

Thanks!!
",Althamash,
344,2016-06-23 00:11:11,"try it on mobile device firefox  : http://chenglou.github.io/react-motion/demos/demo2-draggable-balls/

on chrome mobile browser it is super smooth. 
",jasan-s,
344,2016-08-19 08:55:33,"Might it be the drop shadow?
",chenglou,
343,2016-06-22 09:10:37,"I'm not sure if this is a bug, but it bit me today.

In my code, a Motion onRest callback triggers a re-render of my React component, which sets new props for that Motion component, which are then ignored because the animationID has not yet been set to null [here](https://github.com/chenglou/react-motion/blob/master/src/Motion.js#L105) which means no new animation is created [here](https://github.com/chenglou/react-motion/blob/master/src/Motion.js#L214).

Expected behavior: a new animation is created, Motion works as usual.

Possible fix: call onRest after animation state has been reset.

Alternate fix: in development, React-Motion could detect it's inside an onRest callback, and print warnings if calls are made that can't be handled at that time.

There is a workaround [here](https://github.com/chenglou/react-motion/issues/224#issuecomment-218277983) using a setTimeout with 0.
",jhorneman,
343,2016-07-22 04:19:19,"If I were an owner of this repo, I'd close this in favor of #322.

It's a known issue.  I just haven't had the time to fix it.  It's a low-hanging bug though, if you wanna open a PR.  üòÉ 
",appsforartists,
343,2016-07-22 07:36:19,"Oh, sorry, I missed #322.

> On 22 Jul 2016, at 06:19, Brenton Simpson notifications@github.com wrote:
> 
> If I were an owner of this repo, I'd close this in favor of #322.
> 
> It's a known issue. I just haven't had the time to fix it. It's a low-hanging bug though, if you wanna open a PR. üòÉ
> 
> ‚Äî
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
",jhorneman,
342,2016-06-19 15:06:21,"Possible to get the final styles from param in onRest function?
[Codepen link](http://codepen.io/linken/pen/PzGJwW?editors=0010)
This codepen example, there is no real way to know if the slider ended on the left side or right side if you press the button continuously.

How about implementing into TransitionMotion and StaggeredMotion?

<S_CODE_TOKEN>

`onRests -> cb` would also be able to access styleOnRestAll in case it needs to do some stuff when a certain element animation value hits a sweet spot.

Maybe even add a new prop to the stylesObject, something like ""isAnimating"" or ""isComplete""?
",beckend,
342,2016-07-22 04:17:12,"At first blush, I'm not opposed to passing the final styles into `onRest`.  Shouldn't be too hard.  You'd probably just pass [`this.state.currentStyle` into `onRest`](https://github.com/chenglou/react-motion/blob/master/src/Motion.js#L101).

The ergonomics of the proposal for `TransitionMotion` look gross, but I haven't played with `TransitionMotion`, so I don't have much input there.
",appsforartists,
341,2016-06-15 22:25:25,"Are there any video tutorials or articles on this? It looks great, but the documentation is cryptic and the API isn't much better.

Nevertheless, I still want to learn it.
",ElegantSudo,
341,2016-06-15 23:04:39,"There are plenty of examples in the example folder. What is cryptic? Can you be more precise...
",dozoisch,
341,2016-06-18 03:04:22,"Would love to have some specific pointers on the cryptic parts of the doc!
",chenglou,
340,2016-06-12 08:17:40,"[ref](https://github.com/jquery/jquery/issues/3143)
",salzhrani,2016-06-13 23:53:52
340,2016-06-13 23:53:54,"Thanks!
",chenglou,2016-06-13 23:53:52
339,2016-06-10 15:27:08,"I was playing around react-motion in react-native. Simple animation was working fine, but when launch chrome remote debugging it no longer works. You can see in the code below I am simply change the position of the Text view and I am printing out the x value. This all works without debugging, but as soon as launch debugging ""x"" remains 0 and there is not change. 

NOTE: seeing similar issues as this react-native issue [4933](https://github.com/facebook/react-native/issues/4933)

<S_CODE_TOKEN>

react-motion version: 
""react-motion"": ""^0.4.4"",

react-native version: 
react-native-cli: 0.2.0
react-native: 0.27.1

Chrome: Version 50.0.2661.102 (64-bit)
",micahrye,
339,2016-06-18 03:11:19,"Hmm, so I guess this is a RN issue? If so, should this be closed?
",chenglou,
338,2016-06-10 13:14:20,"I ran the simple example: 

<S_CODE_TOKEN>

and I get:
`Expected a component class ,got [Object object]`

![screen shot 2016-06-10 at 7 12 47 am](https://cloud.githubusercontent.com/assets/449326/15965401/d5b7da9c-2eda-11e6-9cb7-b5b4007f868b.png)

I'm using react-native

<S_CODE_TOKEN>
",tslater,2016-06-10 13:25:16
338,2016-06-10 13:25:13,"Ok. I was not thinking. I'm new to React Native. It's just because I was using a div, which isn't a react native component. It works fine like this:

<S_CODE_TOKEN>
",tslater,2016-06-10 13:25:16
337,2016-06-08 15:27:50,"Hi,

Do you have some example to show how to do a simple fadeout / fadein when unmounting a react component and replacing it with another (different) one ?
From the demos and documentation I cannot understand how to do it, items are always similar.

Thanks !
",moimael,
337,2016-08-12 15:16:34,"@moimael you can use the RouteTransition guides, its essentially the same thing, just pass your component in as a child of RouteTransition.  The examples at https://github.com/chenglou/react-motion/issues/130 were very helpful.
",mvoloz,
336,2016-06-08 09:03:14,"Hi,
We can use [react-storybook](https://github.com/kadirahq/react-storybook/) to demonstrate some use cases for each component. I can work on this issue if you're interested. 
",pahans,
336,2016-06-18 03:06:01,"Would that be replacing the current examples or be alongside, or be somewhere else we can link to? Not too familiar with react-storybook.
",chenglou,
335,2016-06-04 13:03:10,"Since 0.4.4 flowtype complains

<S_CODE_TOKEN>
",marcelbeumer,2016-06-13 23:51:02
335,2016-06-13 23:51:04,"Thanks!
",chenglou,2016-06-13 23:51:02
334,2016-06-04 11:33:05,"Checking through the comments it looks like this works with React Native. If so does it work with the latest version ie 25+? How would I go about installing it? Thanks.

Btw the demos look amazing!
",hasen6,
334,2016-06-06 07:29:01,"@chenglou correct me if I'm wrong but this is now totally separated from `react-dom`, so you can Just Use It‚Ñ¢ :D
",bsansouci,
334,2016-06-06 07:32:41,"So just `$ npm install --save react-motion` and then `$ rnpm link` and its good to go? Then require it with `const ReactMotion = require('react-motion');`  ?
",hasen6,
334,2016-06-06 07:34:16,"Or do you mean its already installed as part of the React Native package? I couldn't see it in the node modules folder with the latest install though.
",hasen6,
334,2016-06-06 07:35:07,"You ned to install it through npm yes, and then you should be able to just `import {Motion, spring} from 'react-motion';` and get started :)
",bsansouci,
334,2016-09-06 11:25:58,"Did anybody detect such issue on Android when Motion component does transfer initial styles, but no interpolated values? 
The issue isn't reproduced on iOS

<S_CODE_TOKEN>
",pvpshoot,
333,2016-05-30 22:24:32,,stepancar,2016-06-04 03:36:25
333,2016-06-04 03:36:27,"Thanks!
",chenglou,2016-06-04 03:36:25
332,2016-05-30 15:33:58,"Hello, maybe my ask it's a nooby question, but I want to ask, how can I handle the loading of images (with promises) before the animation begins?, best regards.
",Antherkiv,
332,2016-05-30 15:44:51,"what do you mean exactly by

> how can I handle the loading of images (with promises) before the animation begins?
",bloodyowl,
332,2016-05-30 15:51:53,"I need to load the images before animation, because I need to now the heitght of component (I can't without images) then I need to do the animation after the children component got charged in the dom.
",Antherkiv,
332,2016-05-30 22:45:33,"Check how react-collapse is done, steal ideas :)
On Tue, 31 May 2016 at 01:51, Antherkiv notifications@github.com wrote:

> I need to load the images before animation, because I need to now the
> heitght of component (I can't without images) then I need to do the
> animation after the children component got charged in the dom.
> 
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/332#issuecomment-222519007,
> or mute the thread
> https://github.com/notifications/unsubscribe/AAKsoAyNQhiw7_fc7yxLhjO0oxHLIVWLks5qGwebgaJpZM4Ip42g
> .
",nkbt,
331,2016-05-29 20:22:50,"I have been actively looking for a animation pattern to get silky smooth user interfaces on mobile with React web apps. I just found out about progressive Web apps as well (very excited), Does this library take  advantage of promoting elements(will change property) , and transform & opacity changes? 
",jasan-s,
331,2016-08-19 08:55:13,"The library doesn't do anything special regarding will-change, transform and the rest. If you specify it on your inline style then it works as intended. Once we specialize for DOM we might as well go all the way and do imperative DOM manipulations to update stuff (not being sarcastic). Right now I suggest you try it on your components to see the perf.
",chenglou,
330,2016-05-28 07:53:10,"Hi I've just been messing around with this library, and tried two implementations of the same animation, and when I used transform: translate, in place of top/left, it resulted in a jankier animation. I found this surprising because from what I've read, it seems that transform should usually result in a smoother animation, for a variety of reasons. In the chrome devtools profiler, I see dropped frames in the transform version.

The only differences I see that I do differently between the two, would be instead of 

<S_CODE_TOKEN>

I'm doing 

<S_CODE_TOKEN>

The only extra work I can see would be the string templating which I also changed to string concatenation to see if that would help. If anyone could give me a better idea on why transform would be jankier than top/left, I would appreciate it.
",NgoKnows,
330,2016-06-18 03:09:45,"That's intriguing. Do you have a repro? Also, style array? 
",chenglou,
330,2016-10-12 04:08:45,"Judging by the style array, I'm guessing you're using Radium. You may be hitting performance impact from client-side autoprefixing, which is necessary on Safari/IE for `transform`. Try removing Radium, using `Object.assign({}, STYLES.miniButton, { transform: `translate(${deltaX}px, -${deltaY}px)` })`, and seeing if that fixes things.
",threehams,
329,2016-05-27 23:54:29,"When running 'bower install --save https://npmcdn.com/react-motion/bower.zip' bower shows these messages:

<S_CODE_TOKEN>

Then when visiting the URL `https://npmcdn.com/react-motion/bower.zip` I see the following:

""Server error: ENOENT: no such file or directory, lstat '/tmp/npm-http-server-react-motion@0.4.3/tmp/npm-http-server-react-motion@0.4.3/bower.zip'""
",garrettmaring,2016-05-31 05:10:28
329,2016-05-29 10:39:10,"NPMCDN has broken `bower.zip` recently: https://github.com/mjackson/npm-http-server/issues/37
",nkbt,2016-05-31 05:10:28
329,2016-05-31 05:10:28,"Fixed now.
",nkbt,2016-05-31 05:10:28
328,2016-05-24 18:49:01,"Windows 10, build 14342

<S_CODE_TOKEN>
",luisrudge,2016-05-25 03:30:56
328,2016-05-25 02:11:29,"Are you trying to use Bash under Windows? If yes, I doubt it works yet =)
",nkbt,2016-05-25 03:30:56
328,2016-05-25 02:12:12,"Ah sorry, checked the log better, seen paths with `\\`, so not. I'll have a look then.
",nkbt,2016-05-25 03:30:56
328,2016-05-25 03:30:56,"OH NOESSSSSSSSSSSSS! I had the wrong github tab opened. I'm **SO SORRY**. This error was from another project, who was linking this repo on their readme. I'm very sorry I wasted your time.
",luisrudge,2016-05-25 03:30:56
328,2016-05-25 03:57:30,"Hah, no worries, @luisrudge!
That's fine =)
",nkbt,2016-05-25 03:30:56
327,2016-05-21 15:37:25,"I've created a pulsing circle svg element using react-motion. Basically I want a circle to scale larger and fade to nothing, and repeat indefinitely. React-motion spring tends to create the reverse animation as well which I'm trying to eliminate.

I can get it to repeat indefinitely by setting `damping = 0` and I don't wan't the reverse animation to happen - that is is if the spring goes from 0 to 1, I don't want it to animate back from 1 to 0. So I've basically made a hack to invert the reverse interpolation so instead of transitioning like `0->1, 1->0, 0->1, 1->0` it does `0->1, 0->1, 0->1, 0->1`. It just figures out if the spring is transitioning up or down, and if it's transitioning down it inverts it.

It feels a bit hacky. Is there a better way to approach this? Maybe spring and react-motion isn't the best solution for this type of animation?

<S_CODE_TOKEN>
",ryanking1809,2016-05-27 07:14:59
327,2016-05-24 13:13:51,"making loop animations is something I've struggled I'd hope to see a better way to do it
",du5rte,2016-05-27 07:14:59
327,2016-05-26 15:18:56,"you can use `onRest` to know when the animation is idle, adds a bit of state ([demo](https://jsfiddle.net/bloodyowl/j9yqy9ov/)).

<S_CODE_TOKEN>
",bloodyowl,2016-05-27 07:14:59
327,2016-05-27 07:14:59,"See this simple `Motion` wrapper to do Looping and Pulsing animations (check readme/examples)
https://www.npmjs.com/package/react-motion-loop
",nkbt,2016-05-27 07:14:59
326,2016-05-19 07:05:34,"Not sure how to phrase the title, but what I'm trying to achieve is a `TransitionMotion` that fades children in and out when they are mounted. My progress can be seen here: https://github.com/titon/toolkit/blob/3.0/src/motions/Fade/Group.js It's pretty much copy and paste from examples I have found.

However, I've noticed this weird issue, where the spring objects aren't actually calculating, but string concatenating ""NaN"" over and over, and does not stop until I kill the page. This can be seen in this screenshot.

<img width=""1420"" alt=""screen shot 2016-05-18 at 23 56 56"" src=""https://cloud.githubusercontent.com/assets/143744/15385237/03e6abf6-1d55-11e6-9266-8dc33d9bbf8b.png"">

I'm having no luck figuring this out. There's been a few instance where it interpolates from 0 to 1 (I log it), but the opacity doesn't actually visually change. I just can't seem to get this to fade.
",milesj,2016-05-23 08:34:07
326,2016-05-23 08:34:07,"Your `willEnter`'s return type is wrong, see the docs [here](https://github.com/chenglou/react-motion#--willenter-stylethatentered-transitionstyle--plainstyle). It should be `{opacity: 0, scale: 0.95}` (you want the initial `scale` to be `0.95` right?)

It doesn't make sense for a `willEnter` to specify a spring config, since it's the beginning of the animation. It's the destination position that takes a spring config, aka `styles` and `willLeave`.

You're not the first one to trip on this though. This is unfortunate, and my fault for designing the API this way. I myself use Flow, so these type errors get caught fairly early on. I should consider this more.

Solved (I hope!) and closing. Thanks for the report! =]
",chenglou,2016-05-23 08:34:07
326,2016-05-23 17:22:29,"I've seen a handful of examples where `spring()` was used in `willEnter`. Was that supported at some point, or are all these examples wrong?

I'll give this a shot again and report back.
",milesj,2016-05-23 08:34:07
326,2016-05-23 17:48:34,"Those example were using the old API, whose upgrade path I've documented in the wiki. Specifically: https://github.com/chenglou/react-motion/wiki/v0.4.0-examples#motion and https://github.com/chenglou/react-motion/wiki/v0.4.0-examples/_compare/b23bda218bfc5414d2bb70c954c7ed5250e16fa2...6b4990a7adb5a28a633797f2cebc29ff3a21e363
",chenglou,2016-05-23 08:34:07
326,2016-05-23 19:48:54,"Thanks, good to know!
",milesj,2016-05-23 08:34:07
325,2016-05-17 05:00:00,"I'm getting an illegal invocation when I put slightly-modified code from `demo0-simpletransition` into my codebase.

Here's my code:

<S_CODE_TOKEN>

`show` is assigned to be either true or false in the render function, based off of a state property being != null.

Here's the full stacktrace:

<S_CODE_TOKEN>

The console.log does fire before the error occurs.

I combed through my npm dependencies, and I upgraded `babel` and `react` to match the ones in `react-motion`'s repo, but that didn't help.

Any idea? What should I investigate next?
",pconerly,
325,2016-05-17 10:53:46,"Rather than having webpack find `react-motion` in `node_modules`, I copied `react-motion/build/react-motion.js` into the my project and imported it.  That worked, but it sure doesn't feel good.

I suppose that something about my project is exposing a babel/jsx transpiling issue in react-motion?
",pconerly,
325,2016-05-23 08:37:34,"That's weird. So you've nailed it down to a transpiler issue... Which means it doesn't concern the React-motion logic right?

That stack trace is unfortunately not too useful. Do you have async stack trace turned on? Maybe that'll help.
",chenglou,
324,2016-05-10 13:41:31,"Hol√†,
I work on an responsive app and i want an animation between page only on mobile (this pages become ""widget"" on desktop).

So i use TransitionMotion to animate the mount & unmount on my component but how i can disable this animation on tablet+ ?
I can't specify mediaquery in css inline, and can't use CSS Modules with React-motion, any ideas ?
",AnTSaSk,
324,2016-05-10 16:12:45,"@AnTSaSk You can track viewport resize via raw DOM events (make it your application state, pass down via props) and compare measured dimensions against some limits (you can evaluate viewport sizes at the top level and pass down some string category of the viewport to avoid frequent re-renders).
",sompylasar,
324,2016-05-11 03:08:29,"I am going to give a talk on this issue in June on ReactSydney :)

Skipping animation could be done by not using 'spring' for one time when
screen size is changed.
On Wed, 11 May 2016 at 02:21, John Babak notifications@github.com wrote:

> @AnTSaSk https://github.com/AnTSaSk You can track viewport resize via
> raw DOM events (make it your application state, pass down via props) and
> compare measured dimensions against some limits (you can evaluate viewport
> sizes at the top level and pass down some string category of the viewport
> to avoid frequent re-renders).
> 
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/issues/324#issuecomment-218208955
",nkbt,
324,2016-05-12 12:10:37,"Hol√†,

Thanks you for your replies, but for this project we use SASS and we have breakpoints var in CSS, we don't want to duplicate this, for simple transition, CSSTransitionGroup do the job on mobile, I keep it for more complicated transitions.
",AnTSaSk,
324,2016-08-31 20:50:03,"@nkbt any resources you can share of that talk? Couldn't find anything on React Sydney's websites. Thanks :)
",p4bloch,
324,2016-08-31 21:49:00,"@p4bloch wasn't recorded that day. Quite sadly, it was one of my best talks. Now I need to give it somewhere else again :)
",nkbt,
324,2016-08-31 21:53:28,"Slides with embedded iframe demos  https://github.com/nkbt/un-responsive

https://github.com/nkbt/un-responsive-demo Demo itself

Setting up the talk things was quite difficult, but you can check the latest version of demo to see how things are implemented

Also run through slides (without live playable examples)

Ps: usual npm install/npm start
",nkbt,
324,2016-09-01 01:47:43,"@nkbt thanks a lot!!
",p4bloch,
323,2016-04-26 00:56:04,"I know we can defined `willLeave`  to animate leaving nodes in TransitionMotion.
I am just wondering, if we can add `spring` behaviors between two rendering:

For example, the first render has something like:
 `items: [{key: 'a', left: 10}, {key: 'b', left: 20}, {key: 'c', left: 30}]`
then, in the next render, the left has been changed:
 `items: [{key: 'a', left: 0}, {key: 'b', left: 10}, {key: 'c', left: 20}]`

I am wondering, how to make the nodes 'spring' ( animate to their new position ) to their next position? Is it possible to achieve in TransitionMotion?
",cht8687,
322,2016-04-25 17:16:48,"This `onRest` callback doesn't work:

<S_CODE_TOKEN>

However, this one works as expected:

<S_CODE_TOKEN>
",arcanis,
322,2016-04-25 17:22:28,"Actually the second example doesn't quite work, since the transition loses its momentum :(
",arcanis,
322,2016-04-28 05:06:17,"Ehhh, @appsforartists 
",chenglou,
322,2016-04-28 06:42:41,"Yeah.  I've noticed this too, but haven't looked too closely into a fix yet.

@chenglou, you think adding a call to `startAnimationIfNecessary` immediately after [`onRest`](https://github.com/chenglou/react-motion/blob/master/src/Motion.js#L101) would fix it?  Looks like the whole body is wrapped in `defaultRaf`, so that should put you on the next frame and kick off an animation if something changed (presuming `startAnimationIfNecessary` does what it says on the tin üòâ).
",appsforartists,
322,2016-04-28 15:03:28,"I forgot to ask this last night, but @arcanis, can you talk more about what you expected when you said ""loses its momentum""?  `onRest` should only be called when the system is at rest - that is, there is no more energy left.  If there is still momentum, `onRest` will not yet trigger. 

If you want it to be perpetually moving, perhaps you should measure if the interpolated value is within some threshold of the destination, and when it is, call `setState` to change the destination.
",appsforartists,
322,2016-04-28 15:22:18,"@appsforartists Yep, I tried to check thresholds to trigger followup animations while there was still some momentum, but unfortunately it wasn't precise enough: some animations were too fast relative to others, it caused issues with bouncing (since the threshold could be triggered multiple times), curves were messed, etc. In the end, we went with Animated, which gave us a better control over sequenced animations.
",arcanis,
322,2016-06-03 11:03:36,"Having similar problem.  Calling setState in `onRest` that affects `styles` does not work.
This is simple component which fades out old text and fade is new one.

But to make it work I have to wrap setState in `onRest` callback with `setTimeout`, otherwise new step value is ignored in `Motion`.  So basically it prevents setting new target value in `onRest` callback. Would be great if thats fixable, don't like these setTimeout workarounds.

<S_CODE_TOKEN>
",jardakotesovec,
322,2016-06-08 08:06:59,"Yeah. See https://github.com/nkbt/react-motion-loop for example
On Fri, 3 Jun 2016 at 21:03, Jarda Kotƒõ≈°ovec notifications@github.com
wrote:

> Having similar problem. Calling setState in onRest that affects styles
> does not work.
> This is simple component which fades out old text and fade is new one.
> 
> But to make it work I have to wrap setState in onRest callback to
> setTimeout, otherwise new step value is ignored in Motion. So basically
> it prevents setting new target value in onRest callback. Would be great
> if thats fixable, don't like these setTimeout workarounds.
> 
> const AnimationSwitch = React.createClass({
>     getInitialState: function () {
>         return {
>             step: 1
>         };
>     },
>     componentWillReceiveProps: function(nextProps) {
>         if (this.props.text !== nextProps.text) {
>            this.setState({
>                 text: this.props.text,
>                 step: 0
>             });
>         }
>     },
>     handleAnimationEnd: function () {
>         if (this.state.step == 0) {
>                     this.setState({
>                         step: 1
>                     });
>                 }
>           }
>     },
>     render: function () {
>         const { step } = this.state;
>         const text = step === 0 ? this.state.text : this.props.text;
>         return (
>             <Motion
>                 style={
>                     {opacity: spring(step)}
>                 }
>                 onRest={this.handleAnimationEnd}
>             >
>                 {interpolatingStyle => <span style={interpolatingStyle}>{text}</span>}
>             </Motion>
>         );
>     }
> });
> 
> ‚Äî
> You are receiving this because you are subscribed to this thread.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/322#issuecomment-223551489,
> or mute the thread
> https://github.com/notifications/unsubscribe/AAKsoBH2V_Wi9yyQQ0sGYTWH5CLNCl7Cks5qIAoJgaJpZM4IPKNw
> .
",nkbt,
322,2016-06-08 08:29:38,"@nkbt yep.. delaying setState works...   But if its possible to make it work without it I think it would be helpful, because you get kind of undefined behavior otherwise..  and it takes time to find out why..
",jardakotesovec,
322,2016-06-09 13:26:26,"I reckon you can try to do `forceUpdate()` after that. Should work too, but I haven't checked.
",nkbt,
322,2016-08-11 09:29:20,"Actually right, deferring state change `onRest` makes animations lose momentum and causes delays. It is not quite awesome in some edge cases.

Here in example I need to go from RESIZE to REST and then to STABLE state. If I do not delay REST, next animation is blocked and container is not resized. If I do, then container is resized with a slight delay, which looks a bit odd

![react-motion-loses-momentum](https://cloud.githubusercontent.com/assets/175264/17584373/86e8135a-5ff9-11e6-9f51-17230ac6bee0.gif)
",nkbt,
322,2016-11-22 11:52:01,"https://github.com/chenglou/react-motion/issues/343
https://github.com/chenglou/react-motion/issues/390

I think this bug is very common. Looking forward to fix it.",lzl124631x,
321,2016-04-15 14:40:46,"If the `key` option in `TransitionMotion` or `StaggeredMotion`'s styles prop is randomized, a memory leak will freeze the application. This is understandable, however might be a good idea to mention this in the docs
",julienvincent,2016-04-20 08:57:50
321,2016-04-20 03:42:12,"Hmm, what's the use-case for this? The `style` object should be treated as an record, not a hash map. I guess we could mention that? Most people probably use RM the way they use `style` prop in React though.
",chenglou,2016-04-20 08:57:50
321,2016-04-20 08:35:20,"For instance:

<S_CODE_TOKEN>

I'm assuming what's going on here is every time `styles` is fetched/called, it gets back an array with a different id and so so attempts to mount a new DOM node and unmount the old. Seeing as `styles` gets called multiple times - this quickly escalates and crashes the browser.

Just something I found by accident while fiddling with RM - this isn't a very serious issue at all, just thought I'd let you know.
",julienvincent,2016-04-20 08:57:50
321,2016-04-20 08:57:50,"Oh, then this respects what React does. If you generate a random `key` prop each time then your component _will_ be thrashed. In our case here we have a few edge-case usage for this semantics that I'd rather not mention. If your `key` changes then the component will unmount and that's probably what you're trying to do (I'm assuming that this `key` is transferred as the actual React `key` prop onto your component).

Thanks for clarifying this. I think this is rare enough (and sometimes has legit use-cases) not to warrant a mention in the README =].

(Closing!)
",chenglou,2016-04-20 08:57:50
320,2016-04-10 16:59:58,"This should fix #317
",martijnrusschen,2016-04-16 07:03:22
320,2016-04-16 07:03:17,"Thanks @martijnrusschen, that will do the trick =)
",nkbt,2016-04-16 07:03:22
320,2016-04-16 07:05:58,"@nkbt We should put a note to merge to the development branch. Cherry picking (?) will be hard.
",chenglou,2016-04-16 07:03:22
320,2016-04-18 10:17:17,"@nkbt @chenglou will this be released? Ta!
",troch,2016-04-16 07:03:22
320,2016-04-18 12:52:44,"I don't think I have access to publish, so waiting for @chenglou :)
On Mon, 18 Apr 2016 at 20:17, Thomas Roch notifications@github.com wrote:

> @nkbt https://github.com/nkbt @chenglou https://github.com/chenglou
> will this be released? Ta!
> 
> ‚Äî
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/pull/320#issuecomment-211313785
",nkbt,2016-04-16 07:03:22
320,2016-04-18 18:49:42,"@nkbt now you do! But gimme a sec. I wanna check if I can close a few issues first.
",chenglou,2016-04-16 07:03:22
320,2016-04-18 19:22:20,"\o/ 
",nkbt,2016-04-16 07:03:22
320,2016-04-20 13:33:57,"Thanks for releasing `0.4.3` :tada: 
",troch,2016-04-16 07:03:22
319,2016-04-09 01:12:45,"I'm adapting react-motion (stable) [demos](https://github.com/chenglou/react-motion/tree/0627243316c564f6c2f480bf615b82135f649a0a/demos)  in our very new [template app](http://template-meteor-react.meteorapp.com/showcase) (meteor-react-es6), to transform each of them in a single component (ex: `<DraggableList/>`), using [react-motion](https://www.npmjs.com/package/react-motion) npm package and `React.Component` (instead of `React.createClass`).

So it only demands a syntax adaptation, but variables still the same..

**The original file**

[demo3/](https://github.com/chenglou/react-motion/blob/0627243316c564f6c2f480bf615b82135f649a0a/demos/demo3/Demo.jsx)

**My component**

[here](https://gist.github.com/MadeInMoon/363d4a2d3eef1a73fc399eaa9dd5ce52)
(shortcut to [TransitionMotion](https://gist.github.com/MadeInMoon/363d4a2d3eef1a73fc399eaa9dd5ce52#file-react-motion-transitionmotion-jsx-L171))

**Console**

`Warning: Failed propType: Invalid prop ""defaultStyles"" of type ""object"" supplied to ""TransitionMotion"", expected an array. Check the render method of ""ListAnimated""`

`Warning: Failed propType: Invalid prop ""styles"" supplied to ""TransitionMotion"". Check the render method of ""ListAnimated""`

Error `Uncaught TypeError: defaultStyles.map is not a function`

Any idea guys??
",MadeInMoon,2016-04-19 23:26:54
319,2016-04-15 03:58:24,"@MadeInMoon, I've just double-checked 0.4.1 version locally and had no issues with current demo3. The problem is definitely somewhere in your adaptation. Could you please post your component to Codepen so we can run it?
",nkbt,2016-04-19 23:26:54
319,2016-04-15 04:01:41,"your code

<S_CODE_TOKEN>

original code

<S_CODE_TOKEN>

`getDefaultStyles` returned array of styles. `getDefaultValue` returns object. Object does not have `map` method.
",nkbt,2016-04-19 23:26:54
319,2016-04-15 09:43:09,"Problem solved.. Man, thank you so much for helping..

**The problem**
I was adapting the demo3/todo from [this commit](https://github.com/chenglou/react-motion/tree/0627243316c564f6c2f480bf615b82135f649a0a/demos), after reading that in master demo readme:

`Note: since this is the master branch, the demos might be a bit ahead of the current stable API. This commit contains the [stable demos](https://github.com/chenglou/react-motion/tree/0627243316c564f6c2f480bf615b82135f649a0a/demos).`

**Your Solution**
the demo3/todo from master  [demos](https://github.com/chenglou/react-motion/tree/master/demos)

---

**Question**

In the stable commit : 
    - demo8 :  re-adaptable in a few seconds
    - demo3 : seems to be un-usable because of object/array formats

Is it better to go in master  [demos](https://github.com/chenglou/react-motion/tree/master/demos) or [stable commit demos](https://github.com/chenglou/react-motion/tree/0627243316c564f6c2f480bf615b82135f649a0a/demos)?
",MadeInMoon,2016-04-19 23:26:54
319,2016-04-16 06:48:44,"Master of course.

Why changing demos to es6 classes?
",nkbt,2016-04-19 23:26:54
319,2016-04-16 10:14:44,"All my template app components are ES6 consts or classes. So why should stay in ES5? 
",MadeInMoon,2016-04-19 23:26:54
319,2016-04-19 23:26:54,"@MadeInMoon ah, sorry, I thought you are going to PR these changes to `react-motion`.

I am closing this for now, feel free to ping me in https://gitter.im/nkbt/help or Reactiflux if you need more help!
",nkbt,2016-04-19 23:26:54
318,2016-04-07 11:20:10,"Hi !

I was wondering if there is a good way to use React Native Animated Library with RM?

Thank you in advance !

Antoine 
",ahanriat,
318,2016-04-13 16:49:25,"+1
",DennisMG,
318,2016-04-14 09:22:06,"+1
",karthickvkumar,
318,2016-04-17 13:46:52,"+1
",danwebdev,
318,2016-04-20 03:29:18,"Not sure what you mean by that. As in, both at the same time? I presume it's because you want to use the unmounting logic or something?
",chenglou,
318,2016-04-20 10:59:04,"@chenglou, Thanks for your answer, it looks like all animations in RM are pure JS. I was looking for a way to offload those JS animation using the React Native Animated api. 
I've managed to use the willLeave, willEnter etc.. logic using `ReactTransitionGroup` and therefore Animated api üòâ 
",ahanriat,
318,2016-04-20 16:02:32,"@chenglou Thank you for answering. I was refering to these lines in your [article](https://medium.com/@chenglou/react-motion-and-animated-4b3edf671cba#.s16hya1r4)

> That being said, Animated is really good at interpolating stuff. There‚Äôs no reason for RM to keep its interpolation logic if we can defer to using Animated under the hood.
",danwebdev,
318,2016-10-30 15:47:00,"+1
JS animations with react native usually causing bad performance. 
@ahanriat, I'm not sure that ReactTransitionGroup uses Animated api.
react-motion is really great library, would really like to use it with react native without any performance issues.
",orenklein,
317,2016-04-05 23:33:38,"It's already RC2: https://facebook.github.io/react/blog/2016/03/16/react-v15-rc2.html
",sompylasar,2016-04-20 06:49:43
317,2016-04-06 00:50:30,"Should not be a problem I am pretty sure, since there are no deprecated APIs being used...

PR to peerDependencies if you are keen (well, with good amount of testing of course) and we should be good then.

<S_CODE_TOKEN>
",nkbt,2016-04-20 06:49:43
317,2016-04-06 00:52:16,"If not, I am going to update it in next days (when I will actually work on UI animation on my current project)
",nkbt,2016-04-20 06:49:43
317,2016-04-06 01:23:40,"@nkbt Thanks! For now I have to delay the upgrade to React 15.0 on my project because a lot of modules haven't updated their dependencies yet, so it would be nice if you have such opportunity with `react-motion` earlier.
",sompylasar,2016-04-20 06:49:43
317,2016-04-06 01:26:24,"@sompylasar We updated to 15-rc1 as soon as it came out. Had no issues at all. All other modules simply throw `PEERINVALID` error on npm install but work totally fine. 

I reckon it must depend on what sort of 3rd party modules you rely on, and if some declare React as `dependency` or rely on deprecated features - then üòø 
",nkbt,2016-04-20 06:49:43
317,2016-04-06 01:32:47,"@nkbt I see, well, I tend to avoid the warnings, they are there for a reason, even if they can be tolerated and everything looks fine at first sight.

I'll give it some time to settle, and get back to it, probably there will be RC3 at that moment, or even a release version -- who knows. `react-redux`, for example, has strictly specified `15.0.0-rc.1`, so I can't use the `15.0.0-rc.2` without the warning, although the latter has several major bugs fixed.
",sompylasar,2016-04-20 06:49:43
317,2016-04-06 01:56:17,"We should just PR to every lib we use hehe ;)
",nkbt,2016-04-20 06:49:43
317,2016-04-16 07:04:37,"Reopen until new version published

@chenglou can you please release new `patch` version (since it is `0.x.x` now)?
",nkbt,2016-04-20 06:49:43
317,2016-04-16 07:05:11,"Will do it this weekend. Time to come back to this.
",chenglou,2016-04-20 06:49:43
317,2016-04-19 23:28:01,"Maybe worth going full semver and publish 1.0.0? ;)
",nkbt,2016-04-20 06:49:43
317,2016-04-20 03:44:20,"1.0.0 will have to wait because I want to get static, single component unmounting in (unmount for `Motion`, which is a large use-case of people doing unmounting animation). Tracked in #311
",chenglou,2016-04-20 06:49:43
317,2016-04-20 06:49:43,"Published as v0.4.3. Also I have no idea how semver works but hey, no breaking changes!

Sorry for the long wait everyone!
",chenglou,2016-04-20 06:49:43
317,2016-04-20 07:27:55,"Awesome, thanks!
On Wed, 20 Apr 2016 at 17:26, Cheng Lou notifications@github.com wrote:

> Published as v0.4.3. Also I have no idea how semver works but hey, no
> breaking changes!
> 
> Sorry for the long wait everyone!
> 
> ‚Äî
> You are receiving this because you modified the open/close state.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/issues/317#issuecomment-212284438
",nkbt,2016-04-20 06:49:43
316,2016-04-05 12:48:37,"We are using React Bootstrap with React Motion.

When we animate the appearing of items on a Modal Component and during the animation close the modal the following message gets logged continuously into the console:

<S_CODE_TOKEN>

It appears that the Motion component still calls update state although the component is unmounted (we use React v0.14)

Before the message gets logged into the console the component unmounts, is there a possibility to stop the Motion component?

If the error message would be only once its fine, but it gets continuously logged to the console and the Motion components apparently never stops updating its state.
",Aranir,2016-08-13 08:14:30
316,2016-04-06 01:36:12,"That is and issue with Modal component. It unmounts element without waiting until animation is finished (or killing animation). Quite common issue I often run into myself.

Since even I run into that often, I could only imagine how common this issue is... Maybe it is worth adding some safeguard in ReactMotion itself. Though It is not really a fixing of root cause of the issue, but rather patching over unsafe implementations.

@chenglou any thoughts on this?
",nkbt,2016-08-13 08:14:30
316,2016-04-08 21:18:41,"@Aranir 
I had the same issue with the demo8 (draggable list) because of **event listeners** set up in componentDidMount().
I fixed that adding `removeEventListener`  in `componentWillUnmount()`

hope it can help
",MadeInMoon,2016-08-13 08:14:30
316,2016-04-13 15:06:06,"Unfortunately this doesn't resolve my issue, if the component is closed during the initial setup, where they still animate to the right position, it's not triggered by any eventlistener.
",Aranir,2016-08-13 08:14:30
316,2016-05-27 23:05:55,"I believe this should have been fixed with https://github.com/chenglou/react-motion/pull/305
",souporserious,2016-08-13 08:14:30
316,2016-08-13 08:14:30,"Closing. If this reappears, feel free to reopen!
",chenglou,2016-08-13 08:14:30
315,2016-04-04 11:43:54,"Style is requiring a string to be the key. Is this really necessary? Sounds better performance wise to be able to use numbers as well.
",martolini,2016-04-19 22:30:38
315,2016-04-19 22:30:38,"The numbers will be cast into strings anyway; I'm not too sure about the current impact of using number-casted-to-string keys in objects on modern engines. Also, see this: https://github.com/chenglou/react-motion/pull/309#issuecomment-212152473

I'll close this issue favor of keeping track of this in that PR. Might reconsider things in the future =].
Thanks!
",chenglou,2016-04-19 22:30:38
314,2016-04-01 18:17:59,"Sorry to ask this, but I noticed there are [code examples out there](https://github.com/hayeah/react-motion-TransitionSpring-demo/blob/master/app.jsx) using `TransitionSpring`, yet I don't see this defined anywhere in the code. Is it something being developed offline?
",ffxsam,2016-04-19 23:10:06
314,2016-04-19 23:10:06,"Those are old code; TransitionMotion used to be called TransitionSpring. Here are the details of the change: https://github.com/chenglou/react-motion/wiki/Full-details-0.3.0's-changes.

[Here](https://github.com/chenglou/react-motion/wiki/v0.3.0-examples/_compare/6979da87a095421ad8745193890b7729cfb3a0e3...4d1a6c1072e25ef741ade6551f31ac94d9a58f3b)'s a diff of the changes between the old version you were looking at, and the new version (which itself got a little update since then).

Have a nice day!
",chenglou,2016-04-19 23:10:06
313,2016-04-01 09:13:13,,necinc,2016-04-16 06:49:42
313,2016-04-16 06:49:49,"Thanks!
",nkbt,2016-04-16 06:49:42
312,2016-03-30 10:45:13,"Hi, maybe this answer is presented in the docs but i haven't found it. How to change velocity of the animation like in the 'React-Europe talk' with Chat Heads ?
",aspirisen,2016-04-20 05:48:57
312,2016-03-30 18:14:52,"Hi, you need to variate `stiffness` and `dumping` of spring config: http://chenglou.github.io/react-motion/demos/demo5-spring-parameters-chooser/
The higher stiffness means higher velocity.
",SleepWalker,2016-04-20 05:48:57
312,2016-03-31 14:53:10,"@SleepWalker Thanks for the answer. But I cannot find a pair of stiffness and dumping to make the animation so slow, like in the 'React-Europe talk' with Chat Heads.
",crysislinux,2016-04-20 05:48:57
312,2016-03-31 16:19:07,"What's been in the talk is the slowdown of the animation internal timer, not the change in the spring parameters. I don't see this option in the existing API. @chenglou might have an answer.
",sompylasar,2016-04-20 05:48:57
312,2016-04-20 05:48:57,"Sorry for the late reply.

@crysislinux: the slow animation stuff was for debugging and demonstration purposes; it existed as a configuration flag a while ago but I've since removed it for prod (and I hope you didn't need animations _that_ slow in your app =]). That being said, @SleepWalker's link is what I recommend people to use when they don't grasp how to adjust stiffness and damping.

In the next next release (next one is in an hour) I'll add [this](https://github.com/chenglou/react-motion/issues/265#issuecomment-184697874), which will make the situation even better.

Closing! Thanks for the question.
",chenglou,2016-04-20 05:48:57
312,2016-04-20 23:52:13,"@chenglou Any plans on adding the debug/demo slowdown functionality back? E.g. Chrome DevTools have got CSS animation slowdown control. Probably we could have some API for slowdown in react-motion? Following the animation loop architecture, this should be a deal of one 0..1 parameter.
",sompylasar,2016-04-20 05:48:57
312,2016-04-20 23:53:27,"There was #158 that tracked it. It wouldn't be too hard to add it back. No idea how the react inspector works though.
",chenglou,2016-04-20 05:48:57
312,2016-04-20 23:56:15,"It's not the React inspector, it's the browser core inspector. I doubt we can integrate with it. I just wanted to emphasize that this tool has been added to Chrome itself, so likely has a demand.

Thanks for pointing to the tracking issue!
",sompylasar,2016-04-20 05:48:57
311,2016-03-29 10:36:31,"Hello, I'm trying to get my head around this tool, it looks very promising, specially for collections of elements, but when it comes to animate a single element in & out (specially out) I can't find any example on how it should be implemented. TransitionMotion seems to be meant for with multiple items, I suppose that you can use it just with one, and provably is trivial, but I can't really make it work, does anyone can point me to a plain example with animation in & out for a single object? Thank you very much!
",xavibonell,
311,2016-03-29 18:41:36,"Hi, I can't give you a working example, but I can point you:

<S_CODE_TOKEN>

`willEnter` (component apears in DOM) and `willLeave` (component is being removed from DOM) are the functions that will get an object with fields `key`, `style`, `data` as an argument (the coresponding styles array item. that you specified in TransitionMotion).

The both functions should return new `style` key values to transition to.
There is only two differences between this functions:
1. `willEnter` must return numeric values (e.g. `{transform: 50}`) and `willLeave` must return spring values (e.g. `{transform: spring(-50, transformSpringConfig)}`.
2. `willLeave` will be called multiple times (this allows you to dynamically change spring configuration based on current style). I have not tested this thing. I always return the same value.
",SleepWalker,
311,2016-03-30 11:04:29,"Thank you for your answer @SleepWalker, but unfortunately that won't work, the whole key is in 

> isItemExists ?

, which modifies the array of elements, and tells what need to be animated and when (if I understand it right), on a single element that will initially be an empty array, and when it will be gone as well, therefore next line will break since you can't retrieve style, data, key from an empty object:

> const {key, data, style} = items[0]

I just need to animate an overlay fade in/ fade out, maybe this tool is just for complex animations, and should use another one for normal/most common ones ?

Thank you anyway for your support!
",xavibonell,
311,2016-03-30 11:15:21,"By the way my goal is something as simple as this:

<S_CODE_TOKEN>
",xavibonell,
311,2016-03-30 18:12:42,"@xavibonell and that code does not work? does it have an issue with an empty object? If so, than you can simply check for the `items` size:

<S_CODE_TOKEN>
",SleepWalker,
311,2016-03-31 11:09:03,"Hey @SleepWalker, thank you very much for your follow up! It does work, I just had to return null if the object was missing, silly me!

Anyway, I decided to do my own library to do simple object transitions for my project, this library is clearly too sophisticated for everyday animations, I'm sure that is very powerful when it comes to complex motions though.

Thank you again for your support! It really worked!
",xavibonell,
311,2016-04-20 03:44:26,"Re-opening this because I want this implemented in `Motion`.

(PR welcome, of course =])
",chenglou,
311,2016-05-09 11:16:07,"Cannot wait for this @chenglou! I've used react-motion in a project I'm working on here: http://sa.603.nu. I'm trying to fade images on load. Everything is mostly working apart from an issue where images rendered on both the mosaic and artists page flicker before the rest of the images fade in when changing pages. I believe this is because the image has already loaded on the previous page. It can be replicated by navigating to the mosaic page and then going to the artists page. Anyone have any ideas how to beat this?
",jch254,
311,2016-05-11 03:33:17,"FYI I fixed the above issue by adding a cachebreaker to my images üëç 
",jch254,
311,2016-08-30 15:55:14,"I'm also struggling to get my mind around how a basic mounting/unmounting animation can be achieved. I think a demo of a modal fading in/out would be very helpful for newcomers to this library.
",p4bloch,
311,2016-09-06 06:06:04,"Exactly @p4bloch need a simple example to do basic mounting or unmounting
",shoumma,
311,2016-09-25 15:00:16,"I also would like to see simple animation examples, the exemples from the docs are quite complicated, a simple mount, unmount example and a stagger without dynamicaly created elements (i.e stagger opacity on a title, a paragraph and an image for example) would help a lot.

I've been trying to simply animate a mount / unmount component for 6 hours now without success and can't find any demo anywhere.
",Lakston,
311,2016-09-26 06:19:07,"Tried again for a couple hours but still can't animate an item out, here is a [codepen example](https://codepen.io/Lakston/pen/rryRja)

And [another try](https://codepen.io/Lakston/pen/wzdvOV)... that just won't work... at all.

I think I'm too dumb to use this, I'll probably look into something else.
",Lakston,
311,2016-09-26 06:35:09,"@Lakston the Child needs to be kept. There's zero magic in the library; it doesn't keep an unmounted child around, dangling in the UI tree.

TransitionMotion pass you the list of currently mounted items in the parameter of the children callback. Here's a working example: https://codepen.io/anon/pen/wzdBoa?editors=0010#0

Edit: I need to put an emphasis that there's zero magic in the library, and no dirty DOM element kept around ""hopefully not too long"" while waiting for the state of your UI to re-become valid. This also means you need to keep the `TransitionMotion` wrapper around.

Try that example and ping me if you don't get it!
",chenglou,
311,2017-01-04 08:05:25,"The discussion in this issue was really useful to me today. I too would love to see single element enter and leave animations in `<Motion>` one day!

In the meantime, as I was trying to refactor some existing code it got too confusing, so I distilled it down to a very simple example that illustrates all of the possible animations: on mount (with `defaultStyles`, on transition, on exit (with `willLeave`) and on enter (with `willEnter`). I thought my example might be useful to others who use this issue/thread for reference in the future, so here it is: http://codepen.io/jebeck/pen/xgxYbm/ ",jebeck,
311,2017-01-04 08:08:56,[React Motion UI Pack](https://github.com/souporserious/react-motion-ui-pack#component-proptypesoneoftypeproptypesstring-proptypesbool-iselement) offers this as an option as well as some other common features.,souporserious,
310,2016-03-27 16:49:14,"Is there any good way to create a smooth transition when an element is reparented (which suddenly changes its base location)?

My use case is basically the same as your ""draggable list"" demo, except in my case the divs are inside table cells. When the list is reordered, I reparent the draggable `<div>` elements into a new table cell representing the new order. I do this because there are other table cells next to the draggable ones that update based on what table cells are dragged where.

When this reparenting happens, the `<div>` would naturally ""jump"" directly into its new row. I want this jump to be smooth. Say the element used to be in row 1 and now it's in row 2. To smoothly animate this, I need to suddenly subtract 100px from whatever its y transform is currently set to, and I want a smooth animation back to 0.

Any suggestions for this?
",haberman,
310,2016-03-28 03:59:00,"You should begin transitions after reparenting div.
So on first render in new parent your div should have transform with 100px substracted and than on e.g. `componentDidUpdate` you can check component's state and if it has non-zero transform, set the flag in state, that will start transition to zero.

This also can be done before reparenting. But in that case you should somehow detect animation end. This feature is not available in `react-motion` at the moment.
",SleepWalker,
310,2016-03-28 04:21:17,"I don't think what you're describing will work. If the element was already in motion when the reparenting happened, then the transition shouldn't start from `-100px`, it should maybe start from `-150px` or `-50px` (depending on where it was in the previous motion) so that the element doesn't ""jump"" when the reparenting happens.

What I need is a way to suddenly add or subtract a number from the spring's current value, but keep it animating smoothly along its current path.
",haberman,
310,2016-03-28 17:53:26,"That will work, but it depends from implementation details of your grid and UI. Here is two more alternatives:
- You should not reparent your component till animation ends :D This an opposite to what I've suggested to you in my first post.
- There is also another solution. You should set position: `absolute;top: 0;left: 0;` to all the grid items and `position:relative` to their common parent (like in draggable list or draggable balls demo). It will make transform values to be absolute and it will allow reparenting, because transform values will be relative to the parent.

All this variants should play nice with spring, because there will not be any sudden value changes. The last variant is the most flexible, but requires more coding.
",SleepWalker,
310,2016-03-28 17:59:32,"Food for thought: https://aerotwist.com/blog/flip-your-animations/
",sompylasar,
309,2016-03-27 14:07:35,"The update makes it so that a key can be set as a number on styles and defaultStyles like so:

`<TransitionMotion
    defaultStyles={[{key: 1, style: {x: 0}}]}
    styles={() => [{key: 1, style: {x: spring(10)}}]}>
</TransitionMotion>`
",superplussed,
309,2016-04-19 22:21:01,"There's actually a reason why keys are string only; see https://github.com/chenglou/react-motion/commit/c44037dea6aebd87a188eea98499a031e2d40093. I'm hesitating to allow number keys here so I'll keep the PR around. Might reconsider in the future.
",chenglou,
309,2016-04-26 00:13:14,"We can also add some specific warnings if we only allow string for keys.
I've encountered the same issue here and spent some time to figure out this.

I think this is a good PR.
",cht8687,
309,2016-05-03 15:25:50,"Alternatively why not allow both `string` and `integer` props and internally cast the key to a string?
",julienvincent,
308,2016-03-25 07:41:56,"I'm trying to do route transition using the TransitionMotion. One issue I am having is that the transition seems to end forever. By that I mean that there is a very long moment where the modal has moved up completely but stays blank because I wait until the animation is complete until rendering the content. This ensures that the modal doesn't frame.

The curves have a lot of points in their endings at very low velocity (see graph below). This takes like half of the ""animation time"". (Basically 500ms of animation and then 500 ms of being ""almost static"", but still rendering a lot...). I tried changing stiffness, damping, precision, but it seems to always give me about the same length of 950ms in my case. 

See the values near the end. Basically a lot of points are between `target` and `target - 1`, which doesn't provide much difference.

<S_CODE_TOKEN>

![image](https://cloud.githubusercontent.com/assets/4422516/14040020/2ccc0062-f220-11e5-9750-d1e310e0d899.png).

---

Is there a way I can get the current target & current val (I seem to get only currentVal in getStyles and only current Target in willLeave)? This way I could tell the current style to ""stop"" interpolating (eg: if target is 0 and we're at < 0.3, I could pass a flat 0 instead of a spring). Same for exit if I get the target & the value, then if the value is close enough I could pass a flat value instead of a spring to have it exit earlier.

By enabling early exit, I could then use the getStyle to provide a flat value since the number of elements in ""oldStyles"" when from 2 to 1 for example. Allowing for quicker ""entry"" also.

<S_CODE_TOKEN>

Or maybe is there an issue with velocity? Should it be stopping earlier? The end of the graph delta seems to be under precision of 0.01. Should I be using a much lower precision?
",dozoisch,
308,2016-03-25 09:07:14,"Alright, after trying some way higher precision values (than what I thought) for eg: `0.5`, it seems to be a lot better when interpolating big values like this. `0.01` seems good for something like 0 to 1, but seems to be a bit off for 0 to 100.  Should we reflect in the doc that bigger interpolations can afford to have way ""lower"" (eg 0.5) precision values.
",dozoisch,
308,2016-03-25 09:55:27,"Related: #235 #274 
",sompylasar,
307,2016-03-25 04:44:34,"<S_CODE_TOKEN>

Collections rehydrated through redux seem to be causing this error with the TransitionMotion component.  Strangest thing, when mapped - still causes error.  But when spliced, when not the length of the array, it seems to render properly.  Any insight here? ES6 setup. 
",foobahh,2016-03-25 23:37:06
307,2016-03-25 07:58:20,"@compoundpaths Could you also provide your piece of code that uses TransitionMotion?
And Redux does not do rehydration, it's something else in your code that does it.
",sompylasar,2016-03-25 23:37:06
307,2016-03-25 23:37:06,"@sompylasar rehydrate was a poor choice of words, meant just updating the collection.  turns out one of my collection items had an outdated key that was mucking everything up.  False alarm.

Thanks for the quick response though, closing this issue.
",foobahh,2016-03-25 23:37:06
306,2016-03-23 02:45:58,"I have a simple slide-in animation for a menu. The catch is that I need to measure the menu size to be able to animate it in.

Is there a way to make it not animate until after I have the height and `isOpen` is true for the first time?

If there isn't, maybe a prop should be added that allows me to prevent animation. Then I'd be able to set a flag in state from `componentWillReceiveProps`.

<S_CODE_TOKEN>
",brigand,2016-03-23 20:39:06
306,2016-03-23 08:29:56,"@brigand Have a look at this module: https://github.com/nkbt/react-collapse -- it does exactly what you need (measures and then animates).
",sompylasar,2016-03-23 20:39:06
306,2016-03-23 08:33:22,"It works there because it always animates from 0. In this case I need to animate from `0 - height`.
",brigand,2016-03-23 20:39:06
306,2016-03-23 08:38:21,"@brigand You could start with `visibility: hidden` and only switch to `inherit` when the height is ready. Also, the default `top` value could be very far away (like `-999999px` -- you'll never have such height of your content).
",sompylasar,2016-03-23 20:39:06
306,2016-03-23 08:49:02,"That'd only set it to be hidden for part of a frame. But along that line, I could set it to be `visibility: hidden` until the first time it's set to open. It's still going to waste a lot of performance running the animation pointlessly though. It's a good enough solution for now, thanks :-)

If I use an extreme value like that it's going to bounce around for a long time (using presets.gentle which has some bounce). That's why I figured stopping the animation, or forcing it to immediately settle, would be a decent solution. Maybe I can do that with some high value for stiffness or damping. I'll play around with it some more.
",brigand,2016-03-23 20:39:06
306,2016-03-23 09:11:46,"@brigand Measuring the height has more impact on performance than switching visibility (layout vs paint). By the way, CSS `top` also triggers layout, which is a performance impact.
https://csstriggers.com/
",sompylasar,2016-03-23 20:39:06
306,2016-03-23 09:13:12,"When you use the extreme value, you should not perform animation. First, reset the extreme value to `-height` and `visibility` to `inherit` (when the height is ready), then start the animation.
",sompylasar,2016-03-23 20:39:06
306,2016-03-23 09:17:02,"I don't know how to ""not perform animation"". If I can do that, it'd solve the issue entirely.

Also, I tried using high stiffness/damping values and react-motion went crazy, and eventually my interpolated value reached Infinity, and then NaN.
",brigand,2016-03-23 20:39:06
306,2016-03-23 17:32:57,"@brigand Put a number instead of a `spring()` in `style`, it should jump to that value immediately.
https://github.com/nkbt/react-collapse/blob/master/src/Collapse.js#L62-L65
",sompylasar,2016-03-23 20:39:06
306,2016-03-23 17:39:57,"@brigand Interesting article on animation performance [in a neighboring thread](https://github.com/chenglou/react-motion/issues/263#issuecomment-200297509): https://aerotwist.com/blog/flip-your-animations/ -- you might be interested. And another one linked from it: https://aerotwist.com/blog/pixels-are-expensive/
",sompylasar,2016-03-23 20:39:06
306,2016-03-23 20:39:06,"@sompylasar passing a value without the spring works perfectly. Thank you so much!
",brigand,2016-03-23 20:39:06
305,2016-03-22 20:02:21,"This fixes the TransitionMotion component not unmounting nicely. I am not 100% this is the right way to do this or why I am having so much trouble reproducing this using react-motion only.
",Nimaear,2016-05-11 18:32:49
305,2016-05-11 18:32:42,"Humm we definitely need to test against this. I'm also not sure this is the most ""elegant"" way to do it, but that'll do for now. We can revisit this later. Thanks!
",chenglou,2016-05-11 18:32:49
304,2016-03-20 23:25:49,"I'm trying to find a way to interpolate color, particularly fill for an SVG. I had no luck with hex codes, so I moved to a consistent rgb() value, but am finding that though the integer changes, it doesn't interpolate. What's do you recommend as best practice for animating color?

Here's a reduced test case:
http://codepen.io/sdras/pen/a25064109af93ebc8b3d17b9755583ae?editors=1010

Thanks!
Sarah
",sdras,
304,2016-03-21 03:27:54,"@sdras The color does not interpolate because `rgb()` requires integer values from `0` to `255`, but the spring is high-precision and generates decimals with floating point, for example `49.91165769112001` -- only the initial and the final states are integers (`50` and `34`), that's why the first and last colors are rendered properly.

The best practice is to make a separate spring for color, from 0 to 1, and use it as a parameter for the color interpolation.

<S_CODE_TOKEN>

For more complex color manipulation, a library such as https://www.npmjs.com/package/color might be useful.
",sompylasar,
304,2016-03-21 20:34:44,"@sdras `rgb(${Math.round(fill)}, ${Math.round(fill)}, ${Math.round(fill)})` -- but it will be difficult to see the difference between 34 and 50... try cranking one up to 255 to be sure it's working.
",PhilipDavis,
304,2016-03-22 01:45:47,"@sompylasar thanks! that makes great sense. I'll do that.

Do you think it might be good to have color interpolation, such as hex values, added as a feature? Maybe it's something I can work on to contribute.
",sdras,
304,2016-03-22 08:17:17,"@sdras I don't think there is a place for color interpolation in the `react-motion` core. Node modules should generally go Unix-way: do one thing and do it well.

It's not so hard to interpolate a composite value such as RGB color given a single `0.0 -> 1.0` parameter, _there is even a module specifically for that_ (https://github.com/miguelmota/interpolate-rgb).

Probably, there should be some short ""how-to"" on interpolation of arbitrary values, including colors, in the README of `react-motion`, with a reference to https://en.wikipedia.org/wiki/Linear_interpolation (and to other kinds of interpolation, if needed).
",sompylasar,
304,2016-03-22 08:17:55,"@chenglou, the author, might have another opinion.
",sompylasar,
304,2016-03-25 01:52:55,"@sdras you can make an own module with `react-motion` dependency. 

It is not hard to interpolate colors, but it is always good to have one stable implemented solution and use it when needed without re-implementation. So I think a module for color interpolation and something like `awesome-react-motion` page with list of all useful stuff for `react-motion` is the best solution.
",rtkhanas,
303,2016-03-20 06:36:01,"Thanks for this really cool library! I'm having a lot of fun playing with it.

Now... I'm just learning React-Motion and it's super late at night... but I'm quite sure that items added to my list are not appearing in the TrasitionMotion when I pass styles={ (prevInterpolatedStyles) => ... }

Is this by design (it appears that StaggeredMotion has the same limitation -- #284)?

I'd be willing to accept the restriction that items can't be inserted/removed until after the initial animation has completed.
",PhilipDavis,2016-03-25 03:47:27
303,2016-03-25 03:47:27,"I was doing it incorrectly.
",PhilipDavis,2016-03-25 03:47:27
302,2016-03-18 16:56:41,"It seems like the README doesn't have any definitions of ""stiffness"" or ""damping"". I also skimmed through the React Europe talk and didn't see any explanations.

Since this is a ""physics-based"" library, it would be very helpful to explain what the physics are.

There are a number of issues circling this question:
- https://github.com/chenglou/react-motion/issues/113
- https://github.com/chenglou/react-motion/issues/252
- https://github.com/chenglou/react-motion/issues/60
- https://github.com/chenglou/react-motion/issues/265#issuecomment-184697874

Some desirables:
- [ ] Explain the model: is this a linear ([Hooke's law](https://en.wikipedia.org/wiki/Hooke's_law)) spring?
- [ ] Explain the algorithm: does this do something like, say, parameterize a [step/impulse response](https://en.wikipedia.org/wiki/Step_response) function and then sample it to generate the output?

If so, some detailed information like the below image, for example, would be extremely helpful:

![wikipedia step response](https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/High_accuracy_settling_time_measurements_figure_1.png/1024px-High_accuracy_settling_time_measurements_figure_1.png)
",bright-star,
302,2016-03-18 22:26:14,"That's really helpful, @talexand! Keen to PR?
",nkbt,
302,2016-03-18 22:37:45,"I'm keen, but I'll have to sit with the source for a bit. :wink: 
",bright-star,
302,2016-04-20 02:55:46,"I'm incorporating https://github.com/chenglou/react-motion/issues/265#issuecomment-184697874 soon. Sorry about the codebase; it's trickier than it looks like, partially because it sits at the intersection of React lifecycle, async states, physics and animation coordination with StaggeredMotion and TransitionMotion. The combination of these things makes the code complex; also I partially suck at it =P.

I'd love to have this explained clearly; but we're ""competing"" against e.g. ""it's an animation that slows down and takes 2 seconds"" kind of alternative, mainstream animation API here. The more physic theory we put into the docs the more likely people will just go for a CSS ease curve.

That being said, I'd _love_ to have this documented as a dedicated wiki page; it can be very informative and interesting for some people.
",chenglou,
301,2016-03-15 19:09:53,"This is the output with node `v4.1.2`

<S_CODE_TOKEN>
",matteodem,2016-03-16 09:28:12
301,2016-03-16 05:06:18,"Hummm, why does it say react-motion@1.0.0? I'm on npm `3.5.3` and node `5.5.0` and it works fine. Though I'm not sure it's an npm/node problem.
",chenglou,2016-03-16 09:28:12
301,2016-03-16 09:28:12,"very weird, works now. Thanks for the quick answer either way
",matteodem,2016-03-16 09:28:12
300,2016-03-09 04:09:57,"Do you have any plans of supporting a TypeScript definitions file, or does one exist that is not registered on [typings](http://www.github.com/typings/typings) or not on [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)?

I found the Flow Types in [Types.js](https://github.com/chenglou/react-motion/blob/026f4d18d3246e14abbf17bef0a9eda536934193/src/Types.js).  This file is very easily converted into a TypeScript definition file, although I understand the pain of maintaining typing information in two separate places.  Maybe a tool could do this automatically.
",mjohnsonengr,2016-04-19 22:34:12
300,2016-03-09 04:49:13,"If you are keen to PR - that would be great. 

I reckon none of maintainers use TypeScript, so it would be near to impossible to validate if everything is good =)
",nkbt,2016-04-19 22:34:12
300,2016-03-09 15:33:36,"I opened a repository for this here: https://github.com/mjohnsonengr/typed-react-motion

I'll fill in the d.ts file and put it in the typings registry after work tonight.

As far as validation, I'm just going to go off of the existing stuff in Types.js with help from the documentation since there are some Flow-specific things I don't understand. The typings community encourages a test file which is just run by the compiler to make sure there are no typing errors -- I'll do one of those too.
",mjohnsonengr,2016-04-19 22:34:12
300,2016-03-09 21:18:34,"Sounds awesome, thanks, @mjohnsonengr!
",nkbt,2016-04-19 22:34:12
300,2016-03-19 02:03:21,"I wrote one a few days ago. However, I don't have a lot of experience writing d.ts files yet... so go easy if you find errors :).  https://github.com/PhilipDavis/react-redux/blob/master/typings/react-motion/react-motion.d.ts
",PhilipDavis,2016-04-19 22:34:12
300,2016-03-27 09:27:27,"+1 TypeScript Defenition would be nice
",aspirisen,2016-04-19 22:34:12
300,2016-04-04 12:54:40,"Hello, i created [defitions](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/8838) 
(shameless copy from flow Types fixed for typescript)
In the future i will add docs to props
",stepancar,2016-04-19 22:34:12
300,2016-04-08 07:05:19,"@nkbt my PR merged. Now we can use defitnitions, just call tsd

<S_CODE_TOKEN>

I think, this issue should be closed
",stepancar,2016-04-19 22:34:12
300,2016-04-19 22:34:12,"This is great =D, thanks!

I'll add a note in the README. Closing!
",chenglou,2016-04-19 22:34:12
300,2016-05-30 12:32:13,"if typings install react-motion does not work, you have to use typings install --name react-motion
",saberking,2016-04-19 22:34:12
299,2016-03-08 06:59:00,"![example](https://cloud.githubusercontent.com/assets/12532733/13594292/feeae002-e4b7-11e5-89e6-f898fcefcf57.png)

This is a simple button being animated via CSS transform. Is this normal for `Perf.printWasted()` to show this? It's about 500ms of time wasted each time the button slides.
",ffxsam,2016-03-08 08:03:14
299,2016-03-08 07:08:39,"You probably have an issue with your FloatingActionButton render method that causes a lot of expansive rerenders.
",dozoisch,2016-03-08 08:03:14
299,2016-03-08 08:03:14,"Ah yes, it's the Material UI button, not my own code. Thanks.
",ffxsam,2016-03-08 08:03:14
298,2016-03-06 00:15:11,"Fixed the curl brace spacing as requested in https://github.com/chenglou/react-motion/pull/295
",cdebotton,2016-03-07 21:59:15
298,2016-03-07 21:59:12,"Thanks! Btw in the future, you can just force commit to your previous PR, then force push to override.
",chenglou,2016-03-07 21:59:15
297,2016-03-05 02:28:26,"![licecap2](https://cloud.githubusercontent.com/assets/12532733/13545122/8d4b2bf6-e236-11e5-87c3-812d4a6b1a66.gif)

Surely I'm doing something wrong. After I click the stop button, it takes between 2-3 seconds for it to snap back in. Code below:

<S_CODE_TOKEN>

I also tried just `translateY` instead. No difference.
",ffxsam,2016-03-07 19:49:20
297,2016-03-05 02:58:11,"This is your problem `onTouchTap={this.stop.bind(this)}`
It causes full rerender of `FloatingActionButton`
",istarkov,2016-03-07 19:49:20
297,2016-03-05 07:17:14,"Simply having 'onTouchTap' causes re-renders? I don't quite understand. Maybe I shouldn't use this library to animate the button?
",ffxsam,2016-03-07 19:49:20
297,2016-03-05 08:17:42,"You create a new function object via bind each time the parent component
renders, so onTouchTap value is different from the previous one, and this
causes a re-render.

https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f
",sompylasar,2016-03-07 19:49:20
297,2016-03-07 19:49:20,"Wow. Had no idea! Thanks for pointing out that really valuable article.
",ffxsam,2016-03-07 19:49:20
296,2016-03-03 20:13:07,"I'm having some issues when trying to create a staggered animation on render.

Given this example:

<S_CODE_TOKEN>

With this code, `getStyles` will be called with `prev` set to `undefined` the first call, which seems to go against the documentation. If I change the `TransitionMotion` to a `StaggeredMotion` the `prev` value seems to get set as intended during the first call to `getStyles`.

My hunch is that the fix should be to pass the `defaultStyles` to the `styles()` call at https://github.com/chenglou/react-motion/blob/master/src/TransitionMotion.js#L219, but doing seems to badly break the tests, and I'm not familiar enough with the test suite to be confident that I'm not breaking other expected behaviour...
",frekw,2016-04-20 06:42:13
296,2016-03-20 05:30:17,"I've worked around it for now by doing:
styles={ (prevStyles) => (prevStyles || []).map((style, i) => {
// ...
}) }
",PhilipDavis,2016-04-20 06:42:13
296,2016-04-04 12:37:27,"I'm having trouble with this as well and your solutions seems a bit hacky, so I guess this is a bug?
",julienvincent,2016-04-20 06:42:13
296,2016-04-20 06:42:37,"Indeed a bug; thanks for catching it! Fixed and released as v0.4.3
",chenglou,2016-04-20 06:42:13
295,2016-03-03 12:00:48,"Flow no longer globally recognizes internal React types.
Manually import type { Element as ReactElement } to squash Flow errors.
Also ignoring the test folders via flow config, they are causing superfluous warnings.
",cdebotton,2016-03-06 00:12:38
294,2016-03-02 23:05:09,"Sometimes animations with a low frame rate seem to get stuck forever, jumping back and forth. Here's a demo case: http://bl.ocks.org/herrstucki/cf4978db089df7b25262

I traced it to this bit of code:

<S_CODE_TOKEN>

https://github.com/chenglou/react-motion/blob/master/src/TransitionMotion.js#L368-L371

When I remove it, the problem goes away. I'm not too familiar with the RM code, so I can't really say if this is an essential piece. In any case, the 10 frames heuristic seems a bit too strict (I know that 6 FPS isn't really acceptable but you don't always know the performance of the user's machine). And shouldn't the animation just resume or skip to the end instead?
",herrstucki,
294,2016-04-20 03:28:22,"The discussion was [here](https://github.com/chenglou/react-motion/issues/31#issuecomment-120202671). Would increasing that limit work out for you? Say, to 15?
",chenglou,
294,2016-04-20 07:33:03,"I don't think arbitrarily changing the limit helps. The solution may be to instead of resetting `accumulatedTime` to 0 (and thus triggering `this.startAnimationIfNecessary()`) to cap it to `msPerFrame * 10`. So:

<S_CODE_TOKEN>

But it's been a while since I reported this üòÑ . I'd have to test that assumption first.
",herrstucki,
293,2016-03-01 17:31:07,"I'm using react motion for view transitions and I'm running into problems where the styling needed for my transitions (a mix of transform and opacity) interferes with my child component styling and after the transitions there's really no use for the transitions styles anyway, so I would like to remove them after the animation has completed.

Is there a good pattern for that currently? Something simmilar to `[clearprops](http://greensock.com/docs/#/HTML5/GSAP/Plugins/CSSPlugin/)` in GSAP would be ideal. Is it possible?
",Ahrengot,
293,2016-03-01 20:59:17,"I guess you need to use `onRest()` and pass empty style object to your styled component instead of one with animated styles
",nkbt,
293,2016-03-10 00:12:59,"@nkbt it seems like onRest is only available on Motion and not TransitionMotion. Do you have any idea how that would be doable in that case? Or is it missing a pr to add the same functionality to TransitionMotion :)?
",dozoisch,
293,2016-03-22 23:42:43,":+1: I would also love to see `onRest()` available in TransitionMotion
",jagreene,
293,2016-05-26 18:31:14,"I also need onRest() in TransitionMotion. 
It would be good if we can get onRest for when each of the individual element rests
",jain-akash,
293,2016-06-01 19:33:59,"There is a bit of a deeper issue at the core of which is the fact that the callback has no idea if the elements are entering, leaving or being rendered with their final styles. My problem right now is that I'm trying to add a `position: ""absolute""` on a panel that's being faded out and there isn't a clean way to do it. It could be worked around using `onRest`, but I think a cleaner solution would be to add a key to the `{key, data, style}` object that tells us if the element is transitioning. I.e.:

<S_CODE_TOKEN>

This would enable adding transition-only styles and remove them when they're no longer needed.
",guncha,
293,2016-06-17 22:12:51,"There is an idea/hack to use indication component for onRest leaving animation:

<S_CODE_TOKEN>
",otmjka,
293,2017-02-01 19:15:13,I need the `onRest()` callback to be available with `StaggeredMotion`. Any plans on when this would be available? Or is there any way to make it happen now?,oliverox,
293,2017-03-10 17:58:54,@oliverox I haven't found a way but I also need this,mattvague,
292,2016-03-01 15:40:46,"Flow no longer globally recognizes internal React types.
Manually import type { Element as ReactElement } to squash Flow errors.
Also ignoring the test folders via flow config, they are causing superfluous warnings.
",cdebotton,2016-03-03 11:59:55
292,2016-03-03 05:03:51,"Thanks! Can you submit this against the development branch though?
",chenglou,2016-03-03 11:59:55
292,2016-03-03 12:28:48,"Absolutely, closed in favor of opening this one (https://github.com/chenglou/react-motion/pull/295)
",cdebotton,2016-03-03 11:59:55
291,2016-03-01 13:29:57,"is there a way to animate svg fill to change colors with spring?
i tried to do this but the color is only changing at the end of the spring animation and not in a smooth way. just suddenly changing from color A to color B.
",pavel1860,
291,2016-03-01 15:02:35,"Without seeing the code I'm guessing you're trying to transition between two string representations of color?

What you want to do is transition between numeric values and interpolate that into a string <S_CODE_TOKEN> javascript
`rgba(255,255,${your_value})`
```
",borkxs,
291,2016-03-01 15:32:33,"no.
`<linearGradient id={""grad""+id}x1=""0%"" y1=""0%"" x2=""0%"" y2=""100%"" >
                             <stop offset=""0%"" style={{stopColor:""rgba(255,""+g+"",0,1)"",stopOpacity:1}} />
                             <stop offset=""100%"" style={{stopColor:""rgba(255,0,0,1)"",stopOpacity:1}} />
 </linearGradient>`
where g is the the variable bound to the spring.
",pavel1860,
291,2016-03-01 15:37:14,"See also #85 and #153 (particularly @herrstucki's http://bl.ocks.org/herrstucki/27dc76b6f8411b4725bb)
",akre54,
291,2016-03-01 15:38:28,"`rgba(255, ${ parseInt(g) }, 0, 1)` should work
",bloodyowl,
290,2016-02-25 02:03:18,"In an existing app using FlowType with React components, Adding react-motion causes a bunch of flow errors that point to react-motion internals. I'm guessing this is a configuration issue on my end, but it appears to me that flow is looking at the correct `src/Types.js` file for flow types.

Let me know if there's anything more that would be helpful to reproduce.

`.flowconfig`

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",irvinebroque,2016-04-20 18:40:53
290,2016-02-26 05:26:13,"Arrrrgggghhh I do recall these errors, and I do recall solving all of them. Which version of flow are you using? 
",chenglou,2016-04-20 18:40:53
290,2016-02-26 05:46:15,"0.22, same errors on 0.21 as well.
",irvinebroque,2016-04-20 18:40:53
290,2016-02-26 06:21:15,"Eh, and I can't even get flow to recognize the types in react-motion when I created a new project just now. What incantation did you use?
",chenglou,2016-04-20 18:40:53
290,2016-03-02 14:36:49,"Here is my flow config, works fine with 0.22.0

<S_CODE_TOKEN>

I do, however, have issues with Flow 0.22.0 and React-Motion, since Flow no longer globally recognizes the ReactElement type, and it has to be imported explicitly from React. I've made a pull request here (https://github.com/chenglou/react-motion/pull/292) to correct those errors.

The ignores are relatively important, partially inspired by https://github.com/samwgoldman/issue-react-flow-setup. But ultimately, this allows us to declare Default Props, Props, and State like such:

<S_CODE_TOKEN>
",cdebotton,2016-04-20 18:40:53
290,2016-04-20 06:44:04,"@cdebotton your PR is now in v0.4.3. I'm assuming these flow problems are all fixed now? @irvinebroque what about yours?
",chenglou,2016-04-20 18:40:53
290,2016-04-20 18:40:51,"Mine are fixed! üéâ 
",irvinebroque,2016-04-20 18:40:53
290,2016-05-12 01:35:58,"I installed the latest version **0.4.3** and still got this error.

To solve it I just put this line in _.flowconfig_ file:

<S_CODE_TOKEN>

So flow detects properly the **react-motion** import bindings and don't typecheck inside the internal reaction-motion code.
",vieks,2016-04-20 18:40:53
289,2016-02-24 17:21:46,"- updated the value property name to style.
- added information about the style property
- fixes #288
",dozoisch,2016-03-03 05:04:58
289,2016-03-03 05:05:01,"Thanks!
",chenglou,2016-03-03 05:04:58
288,2016-02-23 20:46:34,"Hi,

[The doc for willLeave](https://github.com/chenglou/react-motion#--willleave-stylethatleft-transitionstyle--style)  specifies

<S_CODE_TOKEN>

Is the parameter ""value"" an outdated param? Or is that supposed to be present. Only thing I seem to get is style, where style represents the full spring

for example

<S_CODE_TOKEN>

Val represent the wanted value, not the current, and I can't seem to get the current computed val. Before we could have access to val & velocity.

If it's an outdated param, I can make a PR to update that part of the doc! Just let me know
",dozoisch,2016-03-20 16:16:53
288,2016-02-24 11:13:53,"Oops sorry, yeah it's indeed style, not value.
Please submit the PR against the development branch!
How did you access velocity before?
",chenglou,2016-03-20 16:16:53
288,2016-02-24 17:11:54,"Here is an example:

<S_CODE_TOKEN>

I don't mind that much about being able to access velocity, but being able to access the value could be useful! Though the new precision param helps.
",dozoisch,2016-03-20 16:16:53
287,2016-02-22 22:30:06,"I'm trying to animate in/out a single component when mounted, however am struggling to find a basic example that doesn't animate a list/internal state/etc.

I might be misunderstanding how react-motion works, is this possible in a simple way?

<S_CODE_TOKEN>
",boyswan,2016-02-24 21:04:02
287,2016-02-23 19:06:45,"I am using it for Route transitions, which is essentially the same thing (swapping out a single component). Here is my full RouteTransition component: 

<S_CODE_TOKEN>

It is used like this:

<S_CODE_TOKEN>
",echenley,2016-02-24 21:04:02
287,2016-02-23 20:09:31,"Hmm i've reused what you've suggested, however it doesn't seem like 'willEnter' and 'willLeave' are being triggered. The component is mounted, but no animation takes place.

<S_CODE_TOKEN>

Do you think it might have something to do with the way I'm using it?

<S_CODE_TOKEN>

Interpolated only returns the styles object, no values in there seem to change.
Thanks for your help!
",boyswan,2016-02-24 21:04:02
287,2016-02-23 20:25:06,"You are removing the Transition component when `this.state.openCard` is `false`. Try:

<S_CODE_TOKEN>
",echenley,2016-02-24 21:04:02
287,2016-02-23 20:34:12,"Still isn't working as expected!  what version of react-motion are you using?
",boyswan,2016-02-24 21:04:02
287,2016-02-24 19:52:17,"> Still isn't working as expected! what version of react-motion are you using?

*_Disclaimer: I have only begun programming a few months ago so take everything with a grain of salt.
*_
I believe TransitionMotion needs to receive dynamic changes for it to trigger. 

`{this.state.openCard ? <Transition><div>Hello There</div></Transition> : null }`
This would just render the `Transition` component and neither TransitionMotion nor it's container animates itself.  Only TransitionMotion's children are animated if they receive dynamic changes, state/props.

`<Transition>
  { this.state.openCard ? <div>Hello There</div> : null }
</Transition>`
Transition is not receiving any changes that would incur it to animate, that is because the `RouteTransition` component is the one that gets animated, not the child directly, so you have to pass dynamic data to `RouteTransition` component to get the animation to trigger.

So if you were to pass different children dynamically or a different key like `key: Date.now() + 'coerceToString'` it would trigger a render which would trigger the animation.

The way `TransitionMotion` itself works is a bit harder for me to grok since it keeps a removed child around until the component reaches the `willLeave`'s  value so I am unable to confirm the required uniqueness of `key`, whether it can be a unique but static value.

I hope someone will provide a better response as I hope to understand how `TransitionMotion` works as well.
",renren89,2016-02-24 21:04:02
287,2016-02-24 20:25:34,"@boyswan My component is guaranteed to have a child, but yours isn't.

<S_CODE_TOKEN>

You would have to do something like:

<S_CODE_TOKEN>

It's easier if you're already dealing with an array. In that case you just use `.map`:

<S_CODE_TOKEN>

Unfortunately in React, `this.props.children` can be either an array or a single element.
",echenley,2016-02-24 21:04:02
287,2016-02-24 21:04:02,"Perfect, working now! thank you both for your help
",boyswan,2016-02-24 21:04:02
287,2016-11-21 18:08:11,What is the full example? I'm strugling to piece it together from above.,Ciantic,2016-02-24 21:04:02
286,2016-02-22 18:24:53,"Is chenglou.me down? I can't seem to get to any of the demos, such as: http://chenglou.me/react-motion/demos/demo5-spring-parameters-chooser/

Thank you!
",jlevycpa,2016-02-22 21:22:22
286,2016-02-22 21:00:21,"Same problem here. :+1: 
",mathieumg,2016-02-22 21:22:22
286,2016-02-22 21:22:21,"Thanks for the warning! Fixed.
",chenglou,2016-02-22 21:22:22
286,2016-02-22 21:38:33,"Still happening for me, is it a DNS propagation thing?
",mathieumg,2016-02-22 21:22:22
286,2016-02-22 22:06:38,"I've ""fixed"" the problem by disabling my domain. That host was slightly annoying so I stopped my subscription.

The problem was I was redirecting my github pages URLs to my domain. Now they don't anymore. So the links in the demos restarted working. The link in this issue naturally doesn't because it's still directly pointing to my domain.
",chenglou,2016-02-22 21:22:22
286,2016-02-22 22:10:39,"I still get redirected to http://chenglou.me/react-motion/demos/demo3-todomvc-list-transition when trying to access http://chenglou.github.io/react-motion/demos/demo3-todomvc-list-transition for example. 
",mathieumg,2016-02-22 21:22:22
286,2016-02-22 22:11:53,"Eh, works for me... Cache?
",chenglou,2016-02-22 21:22:22
286,2016-02-22 22:15:49,"Probably DNS cache of some form, I'll wait until it fixes itself or look into it at the next React Conf break. :) Thanks for the help!
",mathieumg,2016-02-22 21:22:22
286,2016-02-28 20:37:21,"Thanks for taking care of this so quickly!
",jlevycpa,2016-02-22 21:22:22
285,2016-02-12 22:45:22,"I'm trying to use React-Motion with Redux that uses the store as a global guide for components to know whether to activate or deactivate themselves. 

I though I might use TransitionMotion as a way to define mounting and unmounting animations for components by passing in predefined arrays instead of lists of live data, like most of the examples given for TransitionMotion. 

Under this method, components aren't ever truly unmounted, instead the ""styles"" array passed to TransitionMotion is just swapped between some content and a blank array. 

However, with this method, mounting and unmounting animations fire correctly only once. Afterwards, the ""unmounted"" item remains on the DOM even after it is removed from the styles array, and the willLeave function loops infinitely. 

I think I might be fundamentally misunderstanding how the TransitionMotion component interacts with styles array objects, and how it knows whether an object is leaving or entering.

This is the relevant code: 

<S_CODE_TOKEN>
",sollipse,2016-02-22 22:26:13
285,2016-02-12 23:42:03,"I found a way around the problem, but am not quite clear why it works as it does. 

I was setting the opacity of ""willEnter"" to a spring() value. By changing this value to a number, I was able to get animations to trigger consistently. 

I think this may have something to do with willEnter and willLeave looping continuously until the element's style matches the style specified by the willEnter function. 
",sollipse,2016-02-22 22:26:13
285,2016-02-22 22:26:13,"Check the type of `willEnter` [here](https://github.com/chenglou/react-motion#--willenter-stylethatentered-transitionstyle--plainstyle). Indeed, it's asking for a plain style configuration, e.g. `{x: 10}`, rather than `{x: spring(10)}`. Otherwise it's an error. Unfortunately it can't be checked through propTypes since it's a function If you use Flow you'd have caught it though.

willEnter only triggers once. willLeave is triggered a lot of times, until the current interpolation value reaches what you specified.

Hope that helps? Feel free to keep the questions coming =).
",chenglou,2016-02-22 22:26:13
284,2016-02-12 09:23:43,"hi. I make this waterfall design template based on the react-motion (staggeredmotion). However, some how I fail to add new child to the original StaggeredMotion collection. Is this a default setting or am I making some mistakes.

The template is like this:
http://kjhuang.com/react/demo/default

The code is like this
https://github.com/hkjpotato/react-waterfall/blob/master/app/components/Main.js

Thank you!
",hkjpotato,2016-04-20 02:47:07
284,2016-02-12 17:42:54,"I am pretty sure what's the problem now. For StaggeredMotion, the styles props is a function. 
The parameters of that function has a fixed length same as the initial defaultStyles length. Even the defaultStyles array increase its length, the input array length for styles remains unchanged.
",hkjpotato,2016-04-20 02:47:07
284,2016-02-22 22:02:45,"Ah, seems like I've accidentally removed that line from the old readme. Yes, StaggeredMotion only works with fixed-length things. To have mount and unmount behaviour you'll need TransitionMotion.

I've pushed a tiny change to readme that says this. This will be auto closed upon push to master. Hope that helps!
",chenglou,2016-04-20 02:47:07
284,2016-02-23 06:19:09,"Thank you. I really like your react-motion module and I just develop a simple app based on it at http://52.24.114.125:3000/
I am not sure if I can add it to the react example demo somewhere online.
",hkjpotato,2016-04-20 02:47:07
284,2016-02-23 06:20:04,"Yes you can! https://github.com/chenglou/react-motion/wiki/Gallery-of-third-party-React-Motion-demos
",chenglou,2016-04-20 02:47:07
284,2016-02-23 06:29:08,"Thank you. Also let me know if your team or the other fb teams are looking
for UI developer cause I am going to graduate from Gatech in May. :)

2016-02-23 1:20 GMT-05:00 Cheng Lou notifications@github.com:

> Yes you can!
> https://github.com/chenglou/react-motion/wiki/Gallery-of-third-party-React-Motion-demos
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/issues/284#issuecomment-187563524
> .
",hkjpotato,2016-04-20 02:47:07
284,2016-02-23 06:30:51,":+1: 
",chenglou,2016-04-20 02:47:07
284,2016-04-20 02:47:07,"Closing this! Thanks for the question.
",chenglou,2016-04-20 02:47:07
283,2016-02-11 00:15:19,"#282, but against the right branch (`development`)
",appsforartists,2016-02-11 00:16:13
283,2016-02-11 00:16:51,":+1:
Thanks to everyone who has contributed to this! =)
",chenglou,2016-02-11 00:16:13
283,2016-02-11 02:35:08,"It's an impressively long list - way to be a good community steward! 
",appsforartists,2016-02-11 00:16:13
283,2016-02-12 00:03:15,":+1: 
",nkbt,2016-02-11 00:16:13
283,2016-02-12 00:33:30,"Wow I'm in the list!!! :-)
",istarkov,2016-02-11 00:16:13
282,2016-02-11 00:10:53,,appsforartists,2016-02-11 00:13:31
281,2016-02-10 19:13:50,,vasco3,2016-02-22 21:55:48
281,2016-02-22 21:55:48,"It's the remnant of when I started open sourcing stuff. A couple of repos I was following had HISTORY instead of CHANGELOG instead, so that's what I picked =).

Also, it sounds more newcomer-friendly. I used to go ""great length"" for newcomer-friendliness, but time and random conventions do wear you down. `source` went back to being `src` and `compiled` went back to being `dist`. Maybe I'm not idealistic enough.
",chenglou,2016-02-22 21:55:48
281,2016-02-22 21:56:30,"Interesting to know about. Thanks
",vasco3,2016-02-22 21:55:48
280,2016-02-10 16:21:36,"Usually I would do it in the `componentDidMount` method but it doesn't have access to the refs of animated elements yet. The code below should explain the problem:

<S_CODE_TOKEN>
",davej,2016-04-19 23:07:37
280,2016-02-10 18:44:32,"Also the render method of the `<Site>` component in my example above gets called hundreds of times despite the fact that nothing in that component actually needs to get re-rendered during the animation. What is the recommended approach to dealing with scenarios like this? Can I put something in `<Site>`'s `shouldComponentUpdate` to prevent this?
",davej,2016-04-19 23:07:37
280,2016-02-10 19:18:53,"It looks like #244 is what I need for my second question (directly above).
",davej,2016-04-19 23:07:37
280,2016-04-19 23:07:37,"As a follow-up to that PR's reply: [React-static-container](https://github.com/reactjs/react-static-container) should solve your problem.

As for refs, how many times is that ref assigning function called? If once, you can add it there (I'm not sure)? If many time, you can do a check whether a listener's there already.

Closing, only because I'm trying to reduce the issue count. Please, feel free to reopen this if you want to follow up =].
",chenglou,2016-04-19 23:07:37
279,2016-02-04 02:17:42,"## Next & Previous buttons for carousel!

While trying demos, thought i was missing these buttons. So, let me know if it's a good idea to have it with the demos?
## Updated Screenshoot

<img width=""252"" alt=""screen shot 2016-02-04 at 7 37 57 am"" src=""https://cloud.githubusercontent.com/assets/802163/12803735/e1e4da94-cb12-11e5-957c-6d61518b59ca.png"">
",samarpanda,2016-02-07 04:03:37
279,2016-02-05 22:45:00,"Good point =)
",chenglou,2016-02-07 04:03:37
279,2016-02-06 14:00:52,"@chenglou Are we good to merge? Let me know if we have anything else to address here?
",samarpanda,2016-02-07 04:03:37
279,2016-02-07 04:03:38,"Good to merge! Thanks.
",chenglou,2016-02-07 04:03:37
279,2016-02-07 04:05:09,"Oops, should have been merged to development instead. I'll correct that.
",chenglou,2016-02-07 04:03:37
278,2016-02-03 19:52:17,"You can check it on TodoMVC example: http://chenglou.me/react-motion/demos/demo3-todomvc-list-transition/

When animation is running it calls willLeave a lot of times - why? Isn't it just should set the end state once?
",asci,
278,2016-02-07 07:26:03,"Because it's also used as an escape hatch for those who wants to specify a willLeave configuration dynamically, e.g. through side-effects, reading into current state info, etc.

In the next version I'm thinking of exposing the option to allow you to provide an object directly (for `willEnter` and `willLeave`). Would that solve your problem?
",chenglou,
278,2017-03-23 02:15:33,Why `willLeave` called a lot of times but `willEnter` just call once? ,zjuasmn,
278,2017-03-23 02:33:42,"We call it many times in order to know what the final destination value is. That value might change dynamically at each function call.

Consider it like react's `render`; it can be called many times. You shouldn't bank on how many times it's called.",chenglou,
277,2016-02-03 18:52:48,"Is there a best practice around disabling animations if battery life is low? I was just testing my app in Safari with 5% battery on Macbook Air and animations were crawling. I suspect Safari has some aggressive battery saving techniques.
",jlc467,2016-02-05 19:03:52
277,2016-02-05 18:27:57,"not just safari, os x as a whole throttles cpus when it's low on battery (< 10% iirc)
",threepointone,2016-02-05 19:03:52
277,2016-02-05 19:03:52,"think you are right. 
Animated SVG icons ended up being the culprit, not battery life. Closing this.
",jlc467,2016-02-05 19:03:52
276,2016-02-03 18:05:19,"Wondering if its a good practice to animate all items in a slider / carousel when its outside of viewport. Especially those items / slides which are outside of viewport.
",samarpanda,2016-02-06 10:03:19
276,2016-02-04 01:29:57,"Can anyone clarify my understanding here?
",samarpanda,2016-02-06 10:03:19
276,2016-02-05 18:30:24,"The cost is basically memory - when you have a images per slides etc - even when they're offscreen, they're still uncompressed in RAM, which could be heavy.
CPU - if you have few slides, then the re-rendering cost might not be too bad, but you should keep an eye. 

thus, rendering all items definitely makes for a simpler programming model, but comes with a price. 
",threepointone,2016-02-06 10:03:19
276,2016-02-06 10:03:19,"The new gallery is a simplified version of what I had before. If you dig into past releases you'll see that there was the beginning of TransitionMotion to test some unloading + loading new images logic. I reverted back to using Motion for clarity of demo.

But yes, if it's a gallery with hundred of pictures instead of a demo, you should probably write something more sophisticated =).

[Here](https://github.com/chenglou/react-motion/blob/cc852fe787bb15a8b4a9e51538e03c57d5543d2e/demos/demo4-photo-gallery/Demo.jsx)'s the old code. Hope that helps!
",chenglou,2016-02-06 10:03:19
276,2016-02-06 14:39:10,"Thanks @threepointone & @chenglou for the explanation.

![img_20160206_194336](https://cloud.githubusercontent.com/assets/802163/12867161/30ba6288-cd0c-11e5-8c7f-c86e44e7a110.jpg)
Trying to prepare an infinite scroll of images. Loading n images at a time. Thought of having 3 states for images. So, i don't need to scroll all images at a time, rather i can animate two images. One to slideIn other to slideOut. Hope this might help, not hit the performance budget.
",samarpanda,2016-02-06 10:03:19
276,2016-02-06 23:07:22,"if you want slideIn/Out animation then TransitionMotion should do the job. Just pass the array of 3 items styles normally, and specify the willEnter/Leave functions.
",chenglou,2016-02-06 10:03:19
276,2016-02-07 03:59:19,"Thanks for the pointer, i will try using TransitionMotion.
",samarpanda,2016-02-06 10:03:19
275,2016-02-03 10:02:20,"File

<S_CODE_TOKEN>

Error message I get using flow v0.21.0 (latest verson)

<S_CODE_TOKEN>

The issue seems to be with the default parameter.
Issue goes away when I annotate `config` as such

<S_CODE_TOKEN>
",tryggvigy,2016-02-03 16:09:55
275,2016-02-03 16:09:53,"Upgrading to latest version fixed the issue.
Closing.
",tryggvigy,2016-02-03 16:09:55
274,2016-01-30 06:19:15,"Context: implementing/implemented callback for when a component finishes transitioning. We're not sure yet whether the callback will be applied on the whole component, on the a single style object, or per style value (current implantation for Motion is on the whole component/style object (same thing for Motion since a Motion component has a single style obj), so keep that in mind if you want a future-proof name for this (or not. Maybe it's better to have a specific name for our current implementation, and a different one for a different, e.g. per-value callback).

Potential names:
- `onEnd`
- `onRest`
- `onDone`
- `onStop`
- `onFinish`
- ???

Go ahead!
",chenglou,2016-04-20 06:42:13
274,2016-01-30 07:29:46,"I like `onRest` because it doesn't imply finality.  You don't know if an interactive animation/spring is ever finished, because you don't know if the user will interact with the system further; however, you can detect when the system is at rest and notify the application.

I suppose `onStop` could work also, although that implies an abruptness (perhaps that the animation was cancelled).  What we want to convey is that the current animation has completed, without saying anything more about the future state of the system.
",appsforartists,2016-04-20 06:42:13
274,2016-01-30 10:00:10,"`onFinish` from me
",nkbt,2016-04-20 06:42:13
274,2016-01-30 16:42:10,"I also like `onRest`. I second @appsforartists reasoning and conclusion.
",kottkrig,2016-04-20 06:42:13
274,2016-01-30 17:01:16,"`onRest` because of similarity with `rebound` `onSpringAtRest` https://github.com/facebook/rebound-js/blob/master/rebound.js#L730
",istarkov,2016-04-20 06:42:13
274,2016-01-30 17:46:34,"onComplete would be more consistent with other libraries. 
",bishopZ,2016-04-20 06:42:13
274,2016-01-31 01:47:43,"To elaborate why `rest` is very confusing word.

> `onRest` ~== `onSomethingLeft`. See http://underscorejs.org/#rest for example.
",nkbt,2016-04-20 06:42:13
274,2016-01-31 08:29:14,"I don't understand why you would expect it to use that sense of the word rest.  Event names are typically verbs: start, move, end, complete, click, drag, cancel; because they indicate something happening.  Rest, as a verb, means to stop moving, which is what the spring does when it triggers `onRest`.

To name an event with a noun would be a bit bizarre to begin with, but to use rest as a noun would be nonsensical: `onTheRemainingThings`.  I don't even know what that would represent.

Clearly, there's no wrong way to be confused by something and when possible we should avoid confusion.  I'm just surprised that this confuses you, and I doubt many other people will find it confusing because event names are seldom nouns.
",appsforartists,2016-04-20 06:42:13
274,2016-02-04 21:45:06,"@chenglou great to see this being added. But, before this callback mechanism makes it into the API, is there any recommendation about how to unmount a component when a transition ends, like for a page transition. Right now I'm checking for a terminal value like zero to detect when the new page has animated into place, and then not render the previous page.
",chakuo,2016-04-20 06:42:13
274,2016-02-05 18:31:51,"`onComplete`/`onFinish` doesn't make sense for react-motion, because it could be at rest multiple times during its lifetime. (for example - say you feed it a new value every second.) you'd expect it to call `onRest` every time the spring has settled down. 
",threepointone,2016-04-20 06:42:13
274,2016-02-09 10:37:17,"So I guess it is not published yet, right? I mean if `onRest` looks ok - then let it be `onRest`. I personally feel confused, but this sort of bikeshedding is not that important, really ;)
",nkbt,2016-04-20 06:42:13
274,2016-02-09 21:52:31,"I agree with onRest. I know ""rest"" can have multiple different meanings, but the fact that it comes with ""on"" seems to clear the ambiguity in my opinion.

And I'd really like to have that features because it enable nice ""optimization"" like stopping things happening before the rest (eg fetching etc) in order to have smoother transitions.
",dozoisch,2016-04-20 06:42:13
274,2016-02-18 10:05:18,"`onRest` seems to be good. It's just a meta-stable stage, right?

<S_CODE_TOKEN>
",kumarharsh,2016-04-20 06:42:13
274,2016-02-24 08:50:45,"I wouldn't suggest `onRest`.

Being in rest, is a state, not an event. Animation can be on its rest state for continuous amounts of time, but something like `onFinish` or `onDone` is like a moment.
",amir-s,2016-04-20 06:42:13
274,2016-02-24 08:55:18,"Finish and Done are also 'continuous amounts of time'. Also, onRest is not equivalent to onFinish/onDone, they are very separate things.

Although I think this discussion is become more pedantic... can we just choose one word and go ahead?
",kumarharsh,2016-04-20 06:42:13
274,2016-02-25 15:14:29,"onRest or any of the antonyms of motion (onIdle, onStagnate, onStillness, onPotentialEnergyStored) would seem to work, though rest feels the most natural/common when describing spring physics.

Pedantically, rest can describe either an event (a state change) or a state - the start of a resting period as in ""go rest"" or ""I will rest when I'm dead"", or state as in ""at rest"" or ""when I'm dead I'll be at rest"". It would of course be more natural to describe the state of ""at rest"" as simply ""resting"". But if you wanted to get (unnecessarily?) unambiguous in the API you could describe the state change with a short sentence `onStartAtRest` which you could potentially pair with `onExitAtRest`. I suppose you could do the same with `onMotionEnd` or `onMotionBegin`. And then we should color it green.
",CaptainN,2016-04-20 06:42:13
274,2016-04-20 06:43:05,"Thanks for the feedback everyone! Going with what's already there, aka `onRest`, for now =].
",chenglou,2016-04-20 06:42:13
273,2016-01-28 03:51:23,"I don't intend for this to land until after I've used it and made sure we're solving the right problem, but I'm opening this now so @chenglou can play with it (and maybe add Flow if there are places I've missed).

See also #235.
",appsforartists,2016-01-28 03:59:07
273,2016-01-28 03:59:09,"Thanks a lot!
",chenglou,2016-01-28 03:59:07
273,2016-01-28 04:00:43,"My pleasure!
",appsforartists,2016-01-28 03:59:07
273,2016-01-28 10:42:09,"super!
",threepointone,2016-01-28 03:59:07
273,2016-01-29 12:17:39,"wow! awesome!
",kumarharsh,2016-01-28 03:59:07
273,2016-02-28 07:14:51,"@appsforartists @chenglou Can this be used for `<Motion />`, `<StaggeredMotion />`, and `<TransitionMotion />`?
",leopoldjoy,2016-01-28 03:59:07
273,2016-02-28 07:15:58,"@leopoldjoy currently only implemented for Motion, which is why I waited before the imminent public release, because I wanted it on all 3 components. But after discussing with people I've noticed that they only need it for Motion?
",chenglou,2016-01-28 03:59:07
273,2016-02-28 07:34:22,"Yes, I agree that it seems like it's only really relevant to `Motion`. I was going to open a pull request for the `README.md` documentation as I found it extremely useful, would this be helpful/relevant?
",leopoldjoy,2016-01-28 03:59:07
273,2016-02-28 07:35:05,"I'll publish it officially this week or next so don't worry about it.
",chenglou,2016-01-28 03:59:07
273,2016-02-28 07:35:55,"@chenglou Ok, sounds good! Thanks for your work!
",leopoldjoy,2016-01-28 03:59:07
273,2016-03-23 10:48:48,"onRest for TransitionMotion could be also very useful.
",sunflowerdeath,2016-01-28 03:59:07
273,2016-04-08 09:59:27,"@chenglou @appsforartists Great work guys! would be awesome to have that in master at least for `<Motion>` :)
",haraldox,2016-01-28 03:59:07
273,2016-08-02 07:00:33,"Would be really useful to have this for `<StaggeredMotion />`. I'm trying to animate page navigation. Each page is made up of a handful of panels, maybe 3 or 4. When the user navigates between pages I want each panel to staggered-ly spring in. I need to know when the animation is done so that I can remove the old page component.
",AlastairTaft,2016-01-28 03:59:07
272,2016-01-27 10:42:33,"I have a regression 0.3.1 -> 0.4.1

When my Motion component is unmounted while animating, https://github.com/chenglou/react-motion/blob/master/src/Motion.js#L178 triggers setState (it wasn't the case with 0.3.1) with the infamous warning from React in dev mode.

This wouldn't be an issue in itself, but for some reason the code loops like hell, never stops, with 100% CPU and setState warnings keeping coming per the dozen.

I am confident I am in a supported common use case. I just animate a collapse component that can be removed from the DOM at any time.

How can I help?
",bbenezech,2016-02-02 14:14:34
272,2016-01-28 03:56:00,"Eh wow, really? Can you give a small repro? Because we're testing against setting state after the component's unmounted
",chenglou,2016-02-02 14:14:34
272,2016-01-28 10:39:01,"Can you show me where the test is so I can troubleshoot a bit myself?

I use a Collapse component forked from react-collapse, maybe you'll see smtg stupid:

<S_CODE_TOKEN>

What is the easiest way nowadays to build a repro online? Do we have templates?
",bbenezech,2016-02-02 14:14:34
272,2016-01-28 10:56:39,"Codepen is fine. Try this template: http://codepen.io/anon/pen/EPLyLW?editors=0010
Relevant test here: https://github.com/chenglou/react-motion/blob/ffb0628fbea1f4d83a69ea0f6ed910ee64383c76/test/Motion-test.js#L149

(I'll check into this this afternoon)
",chenglou,2016-02-02 14:14:34
272,2016-01-28 11:09:48,"- [x] You are awesome

Do not waste any of your free time on this until I find what's what with the test and come up with a repro.
I would feel stupid if I'm the culprit.
",bbenezech,2016-02-02 14:14:34
272,2016-02-02 14:14:34,"Just tried 0.4.2, no pb. 
I tried again with 0.4.1 to be sure, it failed. 
Look like we had a lucky shoot in the interval!
",bbenezech,2016-02-02 14:14:34
272,2016-02-02 22:47:05,"Weird... there's been no change to `Motion` in the latest release beside an obscure new feature.
",chenglou,2016-02-02 14:14:34
271,2016-01-27 09:08:40,"Is it possible to do hierarchical timing transitions like this?
https://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B08MbvYZK1iNTGRLb2Zud2RUNFE/animation-meaningfultransitions-hierarchicaltiming-4do_large_xhdpi.webm
",SPAHI4,
271,2016-01-28 04:53:35,"Can you please include the link to the Material spec that this demonstrates so we can know exactly what you're asking?

`StaggeredMotion` lets you start animating item n + 1 after item n has crossed a particular threshold.  That's probably what you want, but arranging the grid correctly to achieve this effect might be tricky.
",appsforartists,
271,2016-01-28 10:03:32,"I think it's from here - https://www.google.com/design/spec/animation/meaningful-transitions.html#meaningful-transitions-hierarchical-timing

I made a `Delay` helper, and wrapped each box with a `Delay` and `Motion`. worked out nicely - 

<S_CODE_TOKEN>
",threepointone,
271,2016-01-28 16:39:03,"Here's your demo as a Pen:

http://codepen.io/anon/pen/eJrKKX?editors=001

StaggeredMotion works well for that same effect.  The only potential wrinkle would be if you wanted to have row 2 start transitioning before row 1 is complete; it's doable, just more complicated.  (You could nest StaggeredMotion instances, one for the rows and one for the columns, if you knew which item would end up in each.)

With the Delay approach, it seems like bad things would happen if you received new props before the transition had finished.  One of the awesome things about ReactMotion (and by extension StaggeredMotion) is that it's reversible and cancelable by default.
",appsforartists,
271,2016-01-29 05:51:43,"yes agreed! Indeed, there's a class of animations that involve timing etc that isn't really suited for react-motion (at least directly) - these animations usually have their own state/sequencing logic. Fun to solve these on a case by case basis, but there's clearly a need for higher level constructs. I'm hoping the incoming `atRest` api makes these easier.
",threepointone,
271,2016-03-03 19:54:45,"Any way to get this to work with TransitionMotion? I have a slide system where some slides use React Motion internally, and others use a standard Transition (and mount/unmount with TransitionMotion), all driven by React Router. I'd like to simply chain from the slide's internal animation (if it has one) to the next slide (or use a default if it has none). I have everything working, except I need to delay the new slide's in transition until the parent slide's out is complete (and then in reverse the other way).

It doesn't look like there's a way to do that without an atRest API, but I'm hoping I'm wrong?
",CaptainN,
271,2016-03-03 20:06:43,"I ended up delaying the React Router change, which triggers the second animation to give the first a chance to finish. It's not the prettiest, but it'll work for now. :-)
",CaptainN,
271,2016-03-04 06:21:28,"You could use `setTimeout` if you know the approximate duration of the animation to fake `atRest`
",threepointone,
271,2016-11-29 02:30:53,"[Here](http://codepen.io/devlee/pen/qqPPjE?editors=0110) is my demo as a Pen , you can change the **`martix`** and the **`custom`** variables to view different effects.",devlee,
271,2016-11-29 02:55:41,Awesome work @devlee!!! That's super cool. I might have to try and get that in React Motion UI Pack :),souporserious,
271,2016-11-29 04:02:22,@souporserious  :) I used to make a mistake and now I have used **`scale`** instead of changing **`width`** and **`height`** ~ ,devlee,
270,2016-01-27 03:42:02,"If you try to build currently from a fresh clone, you get:

<S_CODE_TOKEN>

This fixes that by tracking an empty `lib` in git.
",appsforartists,2016-01-27 08:47:46
270,2016-01-27 04:42:02,"Why not simply `rm -rf ./lib/*`?
",nkbt,2016-01-27 08:47:46
270,2016-01-27 04:45:58,"Because when I looked at the man pages, I couldn't find the option to fail silently.  I'll simplify and push again.
",appsforartists,2016-01-27 08:47:46
270,2016-01-27 08:47:53,"Cool, thanks
",nkbt,2016-01-27 08:47:46
270,2016-01-27 21:59:06,"Hahaha `-rf`. Totally forgot that worked here.
Sorry about that. I've re-aliased `rm` to OS X `trash` so had none of these problems.

Btw this is submitted against master, which is right in this case. But for code development we should use `development` branch. Not sure how this is gonna work out, coordinating between the two. But we'll see.
",chenglou,2016-01-27 08:47:46
269,2016-01-27 03:24:46,"Superseded by #270.
",appsforartists,2016-01-27 03:29:56
268,2016-01-26 20:17:39,"Is the prop name no longer `styles`?

Additionally, I get this error:

<S_CODE_TOKEN>
",ghost,2016-01-27 01:36:51
268,2016-01-26 20:49:28,"Changing the prop name to `style` makes react-motion complain that I'm not providing anything to the `styles` prop
",ghost,2016-01-27 01:36:51
268,2016-01-26 23:44:25,"`styles` is now an array of the format:

<S_CODE_TOKEN>

From https://github.com/chenglou/react-motion/wiki/v0.4.0-examples/_compare/b23bda218bfc5414d2bb70c954c7ed5250e16fa2...6b4990a7adb5a28a633797f2cebc29ff3a21e363
",razh,2016-01-27 01:36:51
268,2016-01-27 01:36:51,"Ah! Thanks. For reference for anyone else who is upgrading: https://github.com/chenglou/react-motion/wiki#upgrading-from-03-to-040
",ghost,2016-01-27 01:36:51
267,2016-01-26 14:32:39,"demo8-draggable-list works beautifully with 4 items even on mobile devices.

However, if you increase the items to like 100, it starts lagging noticeably on desktop and pretty much on mobile.

I'm guessing sorting of a list like this is quite a common use case so I was wondering if you know of any tricks of optimising demo8-draggable-list so that it could handle more items? Or is it at all possible to do this kind of re-ordering of large lists with react-motion on a mobile device?

(maybe related to #37 ?)
",Cottin,2016-04-19 23:00:55
267,2016-01-27 03:45:33,"(Don't forget to profile on prod build. Dev build means nothing).

The problem is that the current simplistic logic of the demo updates the whole owner component (including your hundreds of other unaffected items) while dragging. The animation itself, upon release, is still 60fps.

This happens with any naive drag & drop implementation such as the one in this demo (where I aimed for ease of reading more than anything else).

The solution is most likely putting some clever `shouldComponentUpdate`. For example, have the owner track which items are likely affected, and only update those (by passing down a prop).

Most likely related: #244
",chenglou,2016-04-19 23:00:55
267,2016-01-27 15:05:17,"Thanks for response!

How do you easiest test a prod build of the demo8?

`npm run prerelease` gives a `lib` folder with library stuff (no demo stuff).
`npm run build-demos` gives a `build` folder, but which `index.html` should you use to run it if you start up a little `http-server` or similar?
",Cottin,2016-04-19 23:00:55
267,2016-01-27 20:27:34,"You can run demos as static html. No server required.
",nkbt,2016-04-19 23:00:55
267,2016-01-27 22:13:00,"Good point, tweaked the README.
",chenglou,2016-04-19 23:00:55
267,2016-02-02 10:18:51,"Thanks for README clarification!

I did a quick try to optimise the demo a bit.
Could you give any comments to what you think of my approach?
1. For simplicity I'm only animating the y positions, thus leaving out scale and shadow.
2. Create a new component `Motion2` that wrapps `Motion` and implements a stupid `shouldComponentUpdate` that only looks at the y position:

<S_CODE_TOKEN>

With this approach I could have 100 items flow pretty decently on an iPhone 6.

When you go up to 500 items it starts lagging a lot. However I did notice that it looks like the bottleneck with 500 items lies in React's reconciliation or whatever you call it because if I `return false` in `shouldComponentUpdate` for the items with an index  `> 10` it still lags.

So it looks like to just go through 500 items and call `shouldComponentUpdate` on all of them is too slow in itself in React. Note that 10 of these items gets re-rendered and 490 of them always returns false from `shouldComponentUpdate`.

Do my findings sound correct to you or am I messing something up? Could you maybe direct me to how I should continue this work? :)
",Cottin,2016-04-19 23:00:55
267,2016-04-19 23:00:54,"(Sorry for the late reply) Seems fine. Also, you can look into the convenience https://github.com/reactjs/react-static-container. It likely doesn't make your situation better, but it's there.

Closing this as this is ""solved"". Another closed issue in my misguided quest to reduce issue count =]. Feel free to keep the discussion going!
",chenglou,2016-04-19 23:00:55
267,2016-12-06 10:53:35,"@Cottin,

I was able to get okay performance with 500 items on an iPhone 6, using the technique that you've outlined above.  See [Demo](http://www.users.on.net/~mikeandgeminoz/code/react-motion-8a-listwithhandle/).

This is part of variation on the draggable list demo that I'm working on.  The variation here is that items in the list are only draggable by their drag handles (the icon with the three lines).

I don't have the code on Github yet, but you can read the source code in the browser.",brownieboy,2016-04-19 23:00:55
266,2016-01-25 02:22:53,"I installed `react-motion` via `npm install react-motion` to a test project. I copied your `demo8-draggable-list` to my test project, but there were no animations when trying to move elements. The elements would re-order instantly, and there were also no shadow and scaling animations for the demo.

When I built the pre-release version and replaced the npm-installed-version of `react-motion` with the pre-release version built from this master branch, then the demo worked perfectly with proper animations.

Could you update the main version on NPM to work with the demos?

The following code works differently between the main-npm-version and the pre-release version:

https://github.com/chenglou/react-motion/blob/master/demos/demo8-draggable-list/Demo.jsx#L76 (edited below)

<S_CODE_TOKEN>

In the pre-release version (where things are working fine):
- `console.log(shadow)` resolves to `{stiffness: 1.0, damping: 1.0, onRest: null, precision: 1.0, val: 1.0}`
- Inside the `<Motion>` tag, `{shadow}` gives a numerical value -- exactly what we expect and need for the demo to work

In the main-npm-version (this is what probably breaks the code):
- `console.log(shadow)` resolves to `{val: 1.0, config: {stiffness: 1.0, damping: 1.0}}`
- Inside the `<Motion>` tag, `{shadow}` is invalid: it is `NaN` of type `number`

^ I edited the `spring.js` to make `spring()` return a flat object like in the pre-release version (i.e. I edited the code to make `spring()` _not_ have a `config` property, and just have `stiffness` and `damping` and `onRest` on the main object itself and not nested), and it made the `NaN` error go away.

Hopefully this sheds some light on the issue? Thanks for the awesome library!
",jasonpang,2016-01-26 06:02:17
266,2016-01-25 05:12:14,"I'm iterating on the master repo and there are some breaking changes to the API. The README directs to the latest stable build's url. That one works.
",chenglou,2016-01-26 06:02:17
266,2016-01-25 19:53:25,"Were you able to get this to work, @jasonpang ? I have git@github.com:chenglou/react-motion.git#cc852fe787bb15a8b4a9e51538e03c57d5543d2e in my package.json but now I am receiving

Module not found: Error: Cannot resolve module 'react-motion' in /Users/bradgunn/code/wellpath_web/src/components
 @ ./src/components/Demo.jsx 13:19-42

As an aside though, Cheng, thank you for your library - however I do have to criticize the fact that bleeding should be a commit/branch and stable should be master. Otherwise, just trying to get these amazing demos to work. 
",notsoluckycharm,2016-01-26 06:02:17
266,2016-01-26 06:02:17,"@jasonpang @notsoluckycharm sorry for all the trouble. This has been been fixed for React-motion v0.4.1. My initial thought was to change the default displayed branch on github to point to the stable commit, and keep master bleeding edge. Would you prefer the other way around?

(Closing this issue as it's resolved. Please do continue the discussion).
",chenglou,2016-01-26 06:02:17
265,2016-01-23 22:52:49,"I just come across this library, and it would work for me if I was able to set animation duration. I have simple task, I need to rotate object, with some easing for some duration and get callback when animation is finished. I tried this Spring Parameters Chooser, but I didn't get any idea how can I figure out duration and easing from that. Probably this is wrong library to use for my purpose...
",vedmant,
265,2016-01-28 02:52:52,"+1
",alma-socar,
265,2016-01-28 03:45:01,"https://github.com/chenglou/react-motion/blob/master/README.md#faq

> ##### How do I set the duration of my animation?
> 
> Hard-coded duration goes against fluid interfaces. If your animation is interrupted mid-way, you'd get a weird completion animation if you hard-coded the time. That being said, in the demo section there's a great Spring Parameters Chooser for you to have a feel of what spring is appropriate, rather than guessing a duration in the dark.

There's https://github.com/twitter-fabric/velocity-react, which allows to you to set a duration and pass a `complete` callback: http://julian.com/research/velocity/#beginAndComplete.
",razh,
265,2016-01-28 05:54:52,"Thanks a lot! Velocity works ok, but it fires complete callback when component mounts for some reason and also it loads whole Jquery library, I found another library on top of Greensock https://github.com/azazdeaz/react-gsap-enhancer, it looks like it will works for me.
",vedmant,
265,2016-02-16 08:47:32,"I'm in the same boat... animating button positions to slide in on a menu, and it currently takes too long even with crazy spring settings. Might have to check out gsap unfortunately, thanks for the suggestion.
",timothyallan,
265,2016-02-16 14:19:15,"I wrote a little helper function once that you might find useful. It calculates stiffness and damping from the dampened frequency (w) and overshoot in fractions. Returns [stiffness, damping]. It maxes out at twice the natural frequency when overshoot goes to zero, which in practice means that overshoot of 0 gives very close to rested state after w seconds.

Default overshoot of zero will return a critically damped spring which is what you probably want in most cases. Overshoot is in fractions per half frequency, which is find intuitive. So o = 0.2, means the spring will overshoot by 20% on each pass.

Critically damped with w = 1 second returns about [158, 25] which in practice is pretty close to the default [170, 26] in the lib.

Overshoot of 1 gives 0 damping, i.e. the spring will run forever.

<S_CODE_TOKEN>
",daniel-gustafsson,
265,2016-02-16 18:40:43,"^ We should... ship this.
",chenglou,
265,2016-02-16 20:19:33,":sheep: it! or :ship: it.
",sompylasar,
265,2016-02-17 07:40:08,"If you like it, feel free to use or derive anything from it however you want :)
",daniel-gustafsson,
265,2016-04-20 05:49:52,"@daniel-gustafsson is there an equation which takes in the _actual_ duration and e.g. initial overshoot percentage, and returns stiffness and damping (assuming there's a single such value)? That'd be perfect. I'm holding off shipping your helper for now because the overhead of explaining damping frequency and overshoot, on top of the existing stiffness and damping, will likely turn away lots of people. But if there's an `f: (duration, overshootPercent) -> [stiffness, damping]` then I can deprecate the current stiffness/damping API, which will be great.
",chenglou,
265,2016-04-20 10:01:28,"Well, the duration is exact when you are using any reasonable overshoot like 5% or more (I did calculate the exact figure once but forgot what it was) and the starting velocity is zero. In this case, the time is in seconds from when you start the animation until the value passes the target the second time (the first bounce is complete).

The problem with critically damped springs is that the time to target is always infinite. It would probably be possible to add the precision into the calculation and calculate the time to onRest() this way. Not sure how complicated it would be though, and it still wouldn't be correct when adding an initial velocity.

The important thing to me was to be able to easily change the speed. So I settled for the formula above which gives kind of a ""feeling"" that 1 second critically damped spring is at rest after about 1 second, even if that time is not exact. And that you, with just one simple change can for example double the speed with 0.5 or double the time with 2.0.
",daniel-gustafsson,
265,2016-04-21 21:56:49,"I figured out a couple of equations that works fairly nicely for getting a damping and stiffness given a desired overshoot percentage, duration, and error percentage (i.e. how far from the target position can be considered ""at"" the target).

![eqn8140-3](https://cloud.githubusercontent.com/assets/7074605/14725598/d4d82c1a-07d1-11e6-992d-f7b86bbd829a.png)

![eqn8140-1](https://cloud.githubusercontent.com/assets/7074605/14725113/fdbdfbe4-07ce-11e6-8ff4-71461df56916.png)

Where:
- c is the damping
- k is the stiffness
- Œµ is the error percentage
- s is the overshoot percentage
- T is the duration

I tried a couple of approximate values on the [demo page](http://chenglou.github.io/react-motion/demos/demo5-spring-parameters-chooser/) and it seemed to work.

Basically what this does is models the amplitude change due to damping as exponential decay, which allows for us to solve for the damping given the error percentage and duration, and then finds a value for the stiffness such that at the first negative peak of the oscillation lines up with the overshoot percentage.
",reklawnos,
265,2016-04-22 02:03:13,"Uhp, I realized the above doesn't exactly work. It assumes that the peak of the overshoot occurs when the oscillation is at its first minimum peak, but that's not the case. Let me take another look.
",reklawnos,
264,2016-01-23 01:10:24,"I have a `RecentNotes` component that lists the 5 most recent notes. When I add a note, the last one is removed, and when I remove a note, another note should appear at the end of the list. I am using Redux and Redux Undo in this example. I noticed that when I undo a removal, the new element that was added will jump to the location of the removed element, instead of remaining in its correct order:

![react-motion](https://cloud.githubusercontent.com/assets/6344219/12526993/e626b10a-c139-11e5-927e-e05ebc8c8b83.gif)

In this example the `notes` prop changes from :

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>

And back to:

<S_CODE_TOKEN>

During this last step `{ obj: 6 }` jumps to the beginning of the list.

How am I able to manage the order of elements in this type of scenario? This is my full implementation:

<S_CODE_TOKEN>
",echenley,2016-01-31 04:27:34
264,2016-01-25 19:37:51,"[React Motion UI Pack](https://github.com/souporserious/react-motion-ui-pack) is able to do this sort of thing, so it must have to do with my implementation. Closing issue.
",echenley,2016-01-31 04:27:34
264,2016-01-26 21:31:20,"After further investigation, it looks like the issue still persists even using react-motion-ui-pack. I updated to the latest react-motion release (v0.4.1) and modified the code in my first comment to use the new API. Here is another gif of the issue:

![react-motion2](https://cloud.githubusercontent.com/assets/6344219/12595407/b53cf554-c440-11e5-8db1-ef031078bcc1.gif)

Strangely, if I hit undo quick enough (before the spring is completed), the last note keeps its position and everything works as intended. If the spring is allowed to complete, the last note will jump to the wrong position.

It seems to have to do when one item enters and another leaves simultaneously.
",echenley,2016-01-31 04:27:34
264,2016-01-27 02:59:37,"Humm, looks like a key issue? What's your key?
",chenglou,2016-01-31 04:27:34
264,2016-01-27 19:30:53,"Keys are unique ids which look like:

<S_CODE_TOKEN>

I am going to try to make a minimal repro of the issue. Stay tuned.
",echenley,2016-01-31 04:27:34
264,2016-01-27 20:11:22,"Here is a minimal repro: http://codepen.io/anon/pen/EPLyLW?editors=0010. You can see that if you click on any of the items, wait a sec, then click undo, the purple item loses its order in the list. If you click undo before the animation is complete, it keeps the correct order.
",echenley,2016-01-31 04:27:34
264,2016-01-30 08:12:57,"Wow, you've discovered a rare (but theoretically important!) bug in the core keys merging algorithm. That's completely my fault. Sorry for taking so long to reply to this. I've pushed a diff that'll land in the next release.

Thanks a lot!
",chenglou,2016-01-31 04:27:34
264,2016-01-31 01:34:18,":+1: Happy to help! Thanks for being so responsive!
",echenley,2016-01-31 04:27:34
264,2016-01-31 04:27:29,"No problem! Pushed as a fix in v0.4.2 just now. Small notice: I saw that in your real app you were using string key. Keep using these. I've reverted from letting anything be key, just like before.
",chenglou,2016-01-31 04:27:34
263,2016-01-20 11:00:33,"I'm struggling in a problem for a couple of days now.

I'm using redux with react-native and in my store I have a ordered array which in the UI is a list of cards.

Imagine the same scenario as this example:
http://chenglou.me/react-motion/demos/demo8-draggable-list/

But the user can choose by what he is ordering this list, so when the user change the sorting order I dispatch an action to my store which will return the new state with the ordered array and my view should animate the cards to the new order to reflect the state.

How do you guys are approaching this scenario?
",lucasfeliciano,
263,2016-01-25 09:32:04,"can you explain the usecase in a little more detail? also, is ordering via drag and drop (as in the example), or do you have a flag that chooses the sorting order? (like todomvc's 'done', 'all', etc). 
",threepointone,
263,2016-01-26 13:54:22,"@threepointone that is the point. It is not drag and drop.

I have a list of offers sorted by price, so I dispatch an action to sort this offers by shipping days so my store receive the new sorted array then I need to animate the old list to reflect the new order
",lucasfeliciano,
263,2016-01-28 07:19:24,"here's a quick example of redux+react-motion that shows a list of characters, and animates on clicking 'shuffle'/'sort'. I used a single `<Motion/>` per item for simplicity/ this usecase, though you might want to consider `<TransitionMotion/>` if you need unmounting support.

<S_CODE_TOKEN>
",threepointone,
263,2016-01-29 10:58:02,"That's a nice snippet.

But I still have to tackle one problem, since react-native do not have a zIndex parameter, the layers depend on the render order.

So when I'm sorting my list, the itens which are going to the top must be in front of the others. ( am i clear ? )

Lets suppose: I have this array

`[2,3,4,5,1]`

and then I sorted it, so in my animation the component `1` must go to the top in front of the other ones instead of behind it.

The solution that @threepointone suggested is working but I just need to find a hack for the zIndex thing.
",lucasfeliciano,
263,2016-01-31 03:28:00,"hmm well, in the above example, we use array index to specify both `top` _and_ render tree precedence; you'd instead use some other key you'd store on the array element to associate with `top` (you could create these keys this in the reducer maybe?), and then in render(), sort these children to whatever order you'd prefer (with the 'new' elements later in the render tree, etc). 
",threepointone,
263,2016-03-23 11:03:24,"The point is to render a new dom tree for having the final view of the animation. And then, animate 
effectively with transform.
It's called the FLIP technique : https://aerotwist.com/blog/flip-your-animations/
It's useful when you want to do a layout animation, by ui design, but you can't because of poor performance. So instead of doing a browser layout for each frame of the animation, the technique is to only do the layout once, and visually recreate the old view using transform, and then animate the transform to the new view, that was actually already rendered.
@joshwcomeau wrote an article with React on the subject : https://medium.com/developers-writing/animating-the-unanimatable-1346a5aab3cd

`TransitionMotion` is a good candidate to integrate those kinds of behavior. It already had dom change, and then animation append with `willEnter` and `willLeave`. It's browser layout, then animation. It's already a FLIP technique, by the way, if you only use transform for the animation.
I think the thing that missing is to animate the other items when rendering an new item. It also can be useful to had style to those items without animation and before the animation (for visually recreate old view).

So, when adding an new item on the list, the new dom trigger a browser layout, the `willEnter` create the animation for the new item, and the 'missing part' create animation for others items. For example, new item is animated using transform scale and items after the new on the list, will be animated to translate to their new position.
I think that created that missing part also resolve the principe of ordering a list based on their new location on the dom.
",Freddy03h,
262,2016-01-20 07:03:36,"`bower install --save https://npmcdn.com/react-motion/bower.zip` gives 500.
`https://npmcdn.com/react-motion/bower.zip` redirects to `https://npmcdn.com/react-motion@0.3.1/bower.zip` which gives 500
",soswow,2016-01-26 06:00:11
262,2016-01-20 07:05:06,"`bower install react-motion` worked just fine
",soswow,2016-01-26 06:00:11
262,2016-01-21 04:46:15,"The problem is that README is updated, but new version of react-motion is not published =(. So there is not bower.json inside the latest published 0.3.1 version of react motion
",nkbt,2016-01-26 06:00:11
262,2016-01-26 05:29:27,"New thing's published, but somewhere along the commits the build/ directory is gone. The new release still doesn't work with the CDN.
",chenglou,2016-01-26 06:00:11
262,2016-01-26 06:00:11,"Nvm, I failed hard trying to publish. Sorry for all the troubles; this has now been fixed for React-motion v0.4.1.
",chenglou,2016-01-26 06:00:11
262,2016-01-27 14:18:32,"Sorry for bring this up.
After run `bower install react-motion`, I just got:

<S_CODE_TOKEN>

version in `bower.json` is 0.4.1
",NdYAG,2016-01-26 06:00:11
262,2016-01-27 14:19:49,"The readme has instructions on how to install from bower. The direct `bower install react-motion` doesn't work anymore. 
",chenglou,2016-01-26 06:00:11
262,2016-01-27 14:30:29,"Oh, my bad. Thanks, chenglou!
",NdYAG,2016-01-26 06:00:11
261,2016-01-17 09:15:25,"Fixes #260

Before:

<img width=""1022"" alt=""20160117-193052"" src=""https://cloud.githubusercontent.com/assets/175264/12376705/c057a916-bd56-11e5-9d30-200bc2592f58.png"">

After:

<img width=""1065"" alt=""20160117-193014"" src=""https://cloud.githubusercontent.com/assets/175264/12376707/ceb753a8-bd56-11e5-83a2-be124d1bf78a.png"">

I also submitter a PR to override default background color, so we can make it less crazy (optionally): https://github.com/mradionov/karma-jasmine-diff-reporter/pull/8
",nkbt,2016-01-19 03:20:10
261,2016-01-17 13:18:51,"Updated, so now it looks bit better:

<img width=""997"" alt=""20160117-200000"" src=""https://cloud.githubusercontent.com/assets/175264/12377653/029cc082-bd79-11e5-9b57-d2594c29506c.png"">
",nkbt,2016-01-19 03:20:10
261,2016-01-19 03:18:40,"Ping @chenglou ok?
",nkbt,2016-01-19 03:20:10
261,2016-01-19 03:20:08,"God damn it I keep missing these pull requests!
Thanks a lot.
",chenglou,2016-01-19 03:20:10
261,2016-01-19 03:22:41,"no problem. I guess pings work =)
",nkbt,2016-01-19 03:20:10
260,2016-01-16 04:51:41,"cc @nkbt 
Not really important but if you have `[a, a]` where a is a reference, it'll mistakenly label the second as `[*RECURSION*]`, since we check the cache but never check whether that reference is embedded inside itself.
We can use a json serializer that supports recursion. I've seen at least one.
Filing this as really low-pri, also to remind us to  check if we can use a pre-made reporter now. I refuse to believe there isn't a pre-made reporter that fits our simple needs so far =).
",chenglou,2016-01-19 03:20:10
260,2016-01-16 07:03:26,"I see. As far as I know one of matchers I was checking out that time is now actually working fine (was broken). I'll give it a shot
",nkbt,2016-01-19 03:20:10
259,2016-01-15 09:26:46,"I have read in a previous post this is not a priority right now. But maybe someone can suggest me a possible solution. Thank you.

I am trying to represent an animated chart using the spring component. But would like to replay the animation at every re-rendering (when a state changes)

I am using `<Motion defaultStyle={{x: 0}} style={{x: spring(calculatedValue)}}>`
But when the calculatedValue changes the spring component goes from the last calculatedValue to the new one but i would like it to start again from the default value of 0.

Any ideas are much appreciated. Thank you!
",Phoelpis,2016-04-20 06:51:53
259,2016-01-22 21:45:22,"Simple thing would be to set the state back to the default value before changing to the new value. Probably not the most effective way though.
",davnn,2016-04-20 06:51:53
259,2016-01-25 09:38:44,"try using the `calculatedValue` as a key for the component - 

`<Motion key={calculatedValue} defaultStyle={{x: 0}} style={{x: spring(calculatedValue)}}>...`

this will make sure react drops the previous `<Motion/>`, and renders a new one  whenever `calculatedValue` changes. 
",threepointone,2016-04-20 06:51:53
259,2016-03-21 19:10:53,"thanks @threepointone your suggestion fixed my issue.
",alansouzati,2016-04-20 06:51:53
259,2016-04-20 06:51:53,"`onRest` is now in `Motion`, in the release v0.4.3 =)
",chenglou,2016-04-20 06:51:53
258,2016-01-14 18:20:47,"![](http://g.recordit.co/AMpIjygYZd.gif)

Hi @chenglou I found a possible issue with React Native. I am going to describe what the issue looks like but I don't have good insight about _why_ yet.

The setup is simple enough. Below is a render body that will create _three_ switches, each with slightly differing structure.
1. The first case where `<Touchable>` _contains_ `<Motion>`, which I thought should work (that ~exact code works on Web) did not!
2. The second case where `<Motion>` _contains_ `<Touchable>` **_does work**_!
3. The third case is what I had before I introducing animation so of course it works ...because it isn't using `<Motion>`.

The question/bug is **_why isn't the first case working**_?

<S_CODE_TOKEN>
",jasonkuhrt,2016-04-19 22:58:23
258,2016-01-14 18:28:06,"Hm! Interesting. If I use `TouchableOpacity` then everything works as expected! The problem really does seem specific to `TouchableWithoutFeedback`. Screen Recording:

![](http://g.recordit.co/6opDp9CfNe.gif)
",jasonkuhrt,2016-04-19 22:58:23
258,2016-01-26 06:26:34,"Can you try the new release? Don't think it'll fix this, but who knows.
",chenglou,2016-04-19 22:58:23
258,2016-04-19 22:58:23,"Seems like outside of the scope of React-motion now. If not, feel free to reopen!
",chenglou,2016-04-19 22:58:23
258,2016-04-20 00:09:35,"I'm no longer working at littleBits so this issue isn't really mine to dig into either anymore heh. Thanks for following up!
",jasonkuhrt,2016-04-19 22:58:23
257,2016-01-13 04:04:13,"It feels natural to return `styles.map(‚Ä¶)` from StaggeredMotion's child function.  However, if you do that you'll get bit by the frustratingly unhelpful `onlyChild` assertion.  `onlyChild` can be hard to pin down in a standard React app, but there are so many layers of abstraction/nesting in the StaggeredMotion API that where exactly onlyChild is being violated is even harder to catch.

Why can't StaggeredMotion's child return an Array?  Can we skip the `onlyChild` here?

If not, StaggeredMotion should have a `tagName` attribute that accepts an HTML tag name or a ReactComponent that it will wrap your Array in.  That would eliminate a level of nesting and make the resulting StaggeredMotion call easier to read.

If StaggeredMotion can't return an Array and you don't like that `tagName` API proposal, can we please use a more explicit error message?  For instance, ""StaggeredMotion's render function must return exactly one child, but it received an Array.  Please wrap the array in a container."" 
",appsforartists,2016-04-19 22:56:59
257,2016-01-16 08:19:28,"See #20 and #44

Tldr: there's no extra level of nesting (unless you're talking about the visual one), since we return directly the result of your children function as the return value of `render`. We also avoid the extra prop `tagName` since you return your own tag.

I wish we use enough of Flow that this would be a non-issue. Alas, we're not there yet. So yeah we should add a warning.
",chenglou,2016-04-19 22:56:59
257,2016-04-19 22:56:59,"Turned out the invariant message is plenty. It does warn against accidentally returning an array: 
<img width=""606"" alt=""screenshot 2016-04-19 15 55 44"" src=""https://cloud.githubusercontent.com/assets/1909539/14658246/31d7e234-0647-11e6-8f3c-ee51726bc08d.png"">

Closing this for now. If people keep tripping on it I'll reopen and add a custom check!
",chenglou,2016-04-19 22:56:59
256,2016-01-12 22:14:39,"Is there a simple way to specifiy that an animation keeps repeating forever (or maybe just 30 times)? I can't seem to find it in the docs.
",thunderkid,2016-04-20 06:52:11
256,2016-01-28 10:13:33,"Currently, react-motion leaves details of state management with regards to timing etc to the developer (and there are plans for an `atRest` callback). Could you share more details of your animation?  
",threepointone,2016-04-20 06:52:11
256,2016-04-20 06:52:11,"`Motion` now has `onRest`, in the release v0.4.3! Sorry for the wait.
",chenglou,2016-04-20 06:52:11
255,2016-01-11 09:09:29,"https://github.com/chenglou/react-motion/tree/master/demos/demo3-todomvc-list-transition
If the text is too long the height does not change dynamically. I'm new to this. So just submitting as a issue as oppose to fixing it
",sahanDissanayake,2016-01-16 08:29:56
255,2016-01-16 08:21:45,"That's weird, I'm testing with a long string and the height does change? Can you show a repro?
",chenglou,2016-01-16 08:29:56
255,2016-01-16 08:28:30,"<img width=""896"" alt=""screen shot 2016-01-16 at 9 27 55 pm"" src=""https://cloud.githubusercontent.com/assets/5580680/12371420/10a4a672-bc98-11e5-93a3-b5471777511f.png"">
",sahanDissanayake,2016-01-16 08:29:56
255,2016-01-16 08:29:56,"Oh sorry, that. Yes, in the spirit of keeping the demo simple I've hard-coded the height value. Otherwise height animation gets complicated. Here's an elaborate discussion on animating height: #62

I think I'm gonna close this and mark it as wontfix for this reason. I'll include a demo with variable height one day. Free feel to keep the discussion going.

Thanks for the report!
",chenglou,2016-01-16 08:29:56
254,2016-01-09 18:08:24,"Consider the following code:

<S_CODE_TOKEN>

This is a feed of posts. Posts can be deleted. When a post is deleted, I'd like for it to become transparent and collapse (e.g. animate to `{opacity: 0, height: 0px}`). How can I do this?

It seems that `<TransitionMotion/>` should be able to help here, but it seems to depend on carrying around the content of the nested element. I can't do that here, because the content of the nested elements is determined by their components.

What's the proper solution for animating transition of nested components?
",sbichenko,
254,2016-01-09 18:54:42,"I posted a simiar question earlier: https://github.com/chenglou/react-motion/issues/226

I posted the hacky way I solved the problem back then in that comment thread. Currently, I am looking into another way to solve the problem using react-motion in tandem with react-gsap or with react-addons-transition-group. 

As I understand the response to my earlier question, animating nested properties is not a priority for react-motion at this time.
",bishopZ,
254,2016-03-29 00:03:32,"@bishopZ can you give an example of how to do it in tandem with react-transition-group please?
",noushka86,
254,2016-03-29 18:20:50,"As I understand it, react-transition-group will animate nested groups of items. It did not work for my case because you must apply the same animation to each nested child element. I wanted to apply different animations to each child. It might work for someone else, but I have reverted back to the solution I posted in #226.
",bishopZ,
253,2016-01-05 21:00:03,"Apologies but I'm not sure what the best place to pose this question is.  I'm doing a little POC on using react-motion just to see how it is to animate with it and am trying to animate the background color of a div (I know I can do this many other ways but I'm just giving this a test run to see and get familiar with it).  Here is my code:

<S_CODE_TOKEN>

This code works when using the opacity variant but when i switch to backgroundColor it does not.  I'm just clicking the box to flip between the opacity (or bg color).

Am I misunderstanding the usage of react-motion, doing something wrong, or just completely off base here?  I'd love it if someone could point me in the right direction.
",reintroducing,2016-01-06 00:49:10
253,2016-01-05 23:33:59,"The springs can only interpolate number values. You can either have a separate spring for the 3 RGB channels, or if you will only have two colours you could use one spring from 0 to 1 and use a colour interpolate function

`rgb(springR, springG, springB)`

`chroma.interpolate('#ff0000', '#00ff00', backgroundColorSpring).css()`
https://github.com/gka/chroma.js/blob/master/doc/api.md
",JakeCoxon,2016-01-06 00:49:10
253,2016-01-06 00:49:10,"Thanks Jake for the explanation, makes sense and is what I suspected but it's good to get validation as its not clearly outlined anywhere that I could find. Appreciate it!
",reintroducing,2016-01-06 00:49:10
253,2016-01-06 01:30:47,"No problem. I missed the `I know I can do this many other ways` so apologies if I explained what you already knew. At least it will come up in other people's search
",JakeCoxon,2016-01-06 00:49:10
253,2016-01-06 01:32:49,"I meant along the lines of CSS or other mechanisms not react-motion :)  the more info the better for myself and future searchers.
",reintroducing,2016-01-06 00:49:10
252,2016-01-05 03:19:00,"Tracking bug for inertia.  

Ideally, a physics-based UI would allow a user to throw an item and have it come to rest by slowing over time (decay/friction).
",appsforartists,
252,2016-12-14 23:08:58,"I know this is an oldie, but any plans on this being a thing?",souporserious,
252,2016-12-15 00:44:44,I haven't been using React Motion lately.  You are certainly welcome to implement it if you are though.  üòÉ ,appsforartists,
252,2016-12-15 00:53:03,"Right on, just curious. I don't have any physics chops yet, but maybe this will be my excuse to finally learn it haha",souporserious,
251,2016-01-04 09:44:02,"Fixes #250 
",nkbt,2016-01-05 23:00:37
251,2016-01-05 16:25:57,"So what's the magic incantation to make this work upon publish?
",chenglou,2016-01-05 23:00:37
251,2016-01-05 20:37:55,"As soon as it is merged and you published new version to npm (patch would be ok I guess), you can check it with 

<S_CODE_TOKEN>

Then obviously check the `bower_components` dir to make sure `react-motion` has right files in there (as well as dependencies: react)
",nkbt,2016-01-05 23:00:37
251,2016-01-05 23:00:32,"Sounds great to me! Thanks 
",chenglou,2016-01-05 23:00:37
251,2016-01-09 11:32:31,"Publish new version on npm?
",nkbt,2016-01-05 23:00:37
251,2016-01-11 06:56:25,"Repo's currently undergoing some refactoring so I can't push yet. But we could theoretically revert to latest stable, put a new tag, then publish again... Does that even work?
",chenglou,2016-01-05 23:00:37
251,2016-01-11 10:25:47,"Yeah, why not. Works pretty well =)
",nkbt,2016-01-05 23:00:37
250,2015-12-31 03:50:06,"https://twitter.com/mjackson/status/681150523634921472
",nkbt,2016-01-05 23:00:37
250,2015-12-31 04:40:00,"Will only be supported a for a year though (https://twitter.com/mjackson/status/681615800264822784), but we're safe since RM won't be supporting bower in a year (if we still need to exist, that is!).

So yeah, let's do it!
",chenglou,2016-01-05 23:00:37
249,2015-12-31 03:32:20,"https://twitter.com/soprano/status/682402356147826688

Woohoo!

@nkbt @bsansouci 
",chenglou,2016-01-23 08:19:47
249,2015-12-31 03:48:52,"Hell yeah \m/
",nkbt,2016-01-23 08:19:47
249,2015-12-31 03:50:31,"And #250 too ;)
",nkbt,2016-01-23 08:19:47
249,2016-01-04 04:22:56,"ftw :D
",bsansouci,2016-01-23 08:19:47
249,2016-01-19 20:46:25,"https://github.com/facebook/react-native/commit/5bf1f4c05ef0f3ee1cbf6e38164d58dbeee6637d

Released as 0.18. We're good. Bye-bye extra build steps!
",chenglou,2016-01-23 08:19:47
248,2015-12-30 16:20:54,"This PR enables sequences of Motion and an onCompleted callback which fires after each one completes.

<S_CODE_TOKEN>

Please see **demos/demo9-sequence-of-animations** for a full example.
",ccoffey,
248,2015-12-30 22:07:10,"The completion callback should be per style item, otherwise it's not clear what it means when we have `{a: 10, b: 20}` as `defaultStyle` and `{a: 50, b: 50}` as `style`.
",chenglou,
248,2015-12-31 10:51:07,"So that I am clear I understood your comment, in my example above this would mean that onCompleted would fire 4 times?

For the first style in the sequence: {x: spring(400 : 0), y: 0}
1. When y reaches 0 (which is immediately because y is already at its default value)
2. When x reaches 400

For the second style in the sequence: {x: 400, y: spring(400)}
1. When x reaches 400 (which is immediately because this was the final state of x by the end of the first style)
2. When y reaches 400

Alternatively and this probably makes more sense, onCompleted should only fire for springs?

For the first style in the sequence: {x: spring(400 : 0), y: 0}
1. When x reaches 400

For the second style in the sequence: {x: 400, y: spring(400)}
1. When y reaches 400

## onCompleted & onStyleItemCompleted

I think firing onCompleted per _style item_ is useful but I think its a different use case, maybe it make sense to have two callbacks? onStyleItemCompleted and onStyleCompleted?

In my mind, if the user was to provide an array of styles for example

<S_CODE_TOKEN>

Then they are explicitly stating that they care about the transitions: defaultStyle -> {x: 400, y: 0} -> {x: 400, y: 400}

So I think it makes sense to fire an onStyleCompleted callback between each transition.

What are your thoughts on this?
",ccoffey,
248,2016-02-03 15:39:31,"I really hope this makes it into a release and look forward to hearing more :D 
",VasilyShelkov,
248,2016-03-22 01:46:54,"I look forward to this too!
",sdras,
248,2016-04-25 17:07:45,"@ccoffey @chenglou Now that `onRest` has been published, do you think it could help this PR moving forward?
",arcanis,
248,2016-08-03 00:25:22,"any update on this PR?
",uptownhr,
248,2016-11-22 11:50:12,Looking forward to sequencing in React-Motion. Are @chenglou @appsforartists still maintaining this project? Haven't seen any update for a period of time.,lzl124631x,
248,2016-11-22 20:46:17,"I'm not a maintainer - I just needed `onRest` for a prototype I was working on, so I sent a patch upstream.  You are welcome to do the same.  üòÑ ",appsforartists,
248,2016-11-24 03:26:59,"I talked to @chenglou yesterday about this PR, (and please, Cheng-Lou, let me know if I have anything wrong here I don't mean to speak for you, just want to provide some clarification for people waiting)

He mentioned that this type of sequencing might interfere with spring. Personally, in watching some of his talks, it does seem a little counter-intuitive to his wishes for the direction of the library in terms of true interruptible motion. 

There is another project that he pointed me to, however, that is structurally similar, but allows for sequencing: https://github.com/clari/react-tween

If you're interested in more detailed sequencing with extensive tooling, both GreenSock (here is a piece of an article I wrote showing how to use it in React: https://css-tricks.com/comparison-animation-technologies/#article-header-id-16 or Mo.js, (though this tool is still in beta) https://css-tricks.com/introduction-mo-js/

Anyways, I hope that info is helpful for people waiting",sdras,
247,2015-12-03 19:46:45,"Hey there, 

I have a bunch of slides: 

<S_CODE_TOKEN>

And I'd like to animate them to slide in and out (from left to right) depending on the current slide. I've tried fiddling with the basic examples, but ran into issues with too many elements being displayed at once. 

Has anyone implemented this before with divs of arbitrary heights?

Thanks!
",tnrich,
247,2015-12-03 20:07:47,"I would love to help, but you haven't said what it is exactly that is not working for you. Which example did you try? Can you post that code? Animating three divs as you suggest might look something like

<S_CODE_TOKEN>

Using this approach, once item.animating.left property is updated in the database (or model or whatever), then React-Motion will handle its movement across the screen. Hope that helps.
",bishopZ,
247,2015-12-03 20:21:35,"Hey @bishopZ thanks for the response, I'll try your solution out and give some more feedback :)
",tnrich,
246,2015-11-26 13:05:33,"After adding few `Motion` components to a project my JS timeline is full of renders even without having any animations triggered http://d.pr/i/1eaJU 

Is there a way to avoid it? Otherwise while profiling it is hard read timeline records, as well as it is consuming CPU   
",timuric,2015-11-30 09:34:26
246,2015-11-30 03:20:23,"Really? cc @bsansouci 
",chenglou,2015-11-30 09:34:26
246,2015-11-30 09:34:26,"@chenglou fortunately I can't recreate it again. I think it might have been a bug with the hot reloading. I would keep my eye one it, and will let you know if it happens again. Sorry for the false alarm.
",timuric,2015-11-30 09:34:26
245,2015-11-26 07:24:49,"When I want to accomplish a basic linear transition, I'm confused. i can only use spring effect.

Although it can be introduced to adjust the parameters of the elastic effect, but the effect is not particularly good. you will see issue like [#235](https://github.com/chenglou/react-motion/issues/235). 

And the most basic reason is that spring effect caused. can we export a linear effect? then we can do something like:

<S_CODE_TOKEN>

and we can custom Bessel curve.

<S_CODE_TOKEN>

i think that is very useful.

Welcome to discuss.
",chen844033231,2015-11-30 10:12:51
245,2015-11-30 03:22:25,"The library handle only spring effects for now because it's a sweet spot in terms of UX (interruptible animation and general feel?) and API design. There were discussions on adding normal easing curves; I'm considering them for the future.
",chenglou,2015-11-30 10:12:51
245,2015-11-30 09:55:49,"ok ,i see. but i think linear effects may be better. beause development can be based on linear effect to complete the new effect.

thx, Looking forward to the arrival of new effects.
",chen844033231,2015-11-30 10:12:51
245,2016-06-13 11:33:00,"I would also like a linear animation option.

I am creating some math animations for my students. As these math objects do not represent physical things some of my animations would look a lot better when interpolated linearly.
",brunovandamme,2015-11-30 10:12:51
245,2016-08-02 01:58:53,"+1 for **interruptible** linear transition options.

I love the idea of React-Motion that animation should be interruptible. This makes the UI more realistic and responsive. While spring effects are nice, sometimes we need to create transitions that feel ""accelerating"" (like an object accelerates from ZERO velocity and moves out of the view).

I was wondering if there is any way we could achieve such effects while keeping the interruptibility? What about a `velocity` option?
",guopengliang,2015-11-30 10:12:51
244,2015-11-25 12:23:32,"If the reason the subtree under the motion is rendered just because of the animation, stop rendering in the MotionBoundary, this significantly improves frame rate.
Added to Todo sample
",avi,
244,2015-11-30 03:24:35,"Were you looking for something like this? https://github.com/reactjs/react-static-container
",chenglou,
244,2015-11-30 04:30:17,"Not at all what I wanted.
The idea isn't that the content is static, the idea is that the content
isn't aware of the animation and thus can only be rendered when motion
renders not because of it's internal setState but because it's parent
rendered.

The content inside the MotionBoundary is alive and will render every time
the parent of the Motion renders, this only allows you to save the cost of
rendering/reconciling the inner content on each render frame, it is
especially useful when the content is a huge react component for which we
can't add shouldComponentUpdate intelligently.

On Mon, Nov 30, 2015 at 5:24 AM, Cheng Lou notifications@github.com wrote:

> Were you looking for something like this?
> https://github.com/reactjs/react-static-container
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/pull/244#issuecomment-160507123
> .
",avi,
244,2015-11-30 04:49:03,"Just to clarify, the component itself does basically the same thing as the
MotionBoundary, the interesting part of this pull request is the addition
of the second parameter to the children render callback after the current
value which lets you provide the correct value for
shouldUpdate/externalRender.

On Mon, Nov 30, 2015 at 5:24 AM, Cheng Lou notifications@github.com wrote:

> Were you looking for something like this?
> https://github.com/reactjs/react-static-container
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/pull/244#issuecomment-160507123
> .
",avi,
244,2016-01-25 21:48:02,"Hey @avi, this is cool because that should prevent nested Motions from rendering twice at every tick right? If I have a `Motion` inside another `Motion`, the inner one doesn't get rendered when the parent `Motion` gets rendered.
Would it make sense to have that on `Motion`/`TransitionMotion` directly?
",bsansouci,
244,2016-01-26 04:26:22,"Yes it would solve the double rendering and all we need to add to the components is the shouldComponentUpdate function...
",avi,
244,2016-02-02 03:00:10,"This sounds like a useful optimization.

Have you considered exposing it as a context variable and a mixin for the children?  Manually wrapping every Motion tree in a MotionBoundary and threading through the externalRender argument sounds like a lot of needless boilerplate for the primary use case.  Simply being able to mix in a MotionBoundary the same way you'd mix in PureRenderMixin would be a nicer API.
",appsforartists,
244,2016-02-02 05:01:39,"(For the record, I'm interested in this. Just haven't gotten around looking at this since I was doing the refactoring)
",chenglou,
244,2016-02-02 05:30:24,"On second thought, maybe a wrapping component is the way to go, so you can have children that don't know they are being animated.  Separation of concerns is usually a good thing.  :smiley: 
",appsforartists,
244,2016-02-02 19:38:56,"I just had an interesting conversation with @bsansouci:

We could create a `SimpleMotion` extension that handles the common case; something like this:

<S_CODE_TOKEN>

If all you are changing its x, y, rotation, and scale, it would give you a simple way to do that without having to think about child functions or external renders - it just looks like any other React component and optimizes `shouldComponentUpdate` to avoid thrashing `render`.  `Motion` et. al. would continue to exist for advanced cases.

It doesn't even have to live in react-motion; could be its own repo.

Thoughts?
",appsforartists,
244,2016-02-03 08:55:37,"@appsforartists @avi Looking more at `react-static-container` it seems like it's very close to what you're saying. Specifically looking at slide number 16/49 [here](https://speakerdeck.com/vjeux/react-rally-animated-react-performance-toolbox), we can imagine the `Motion` passing down `externalRender` to the `shouldUpdate` prop instead of, in this example, `this.state.isAnimating`.
",bsansouci,
244,2016-02-03 16:52:40,"@bsansouci Good find.  Looks like the same thing as `MotionBoundary` in the original PR, though you'd need to track `shouldUpdate` in userland without the other half of this PR that exposes it in `render`.  However, [now that we have `onRest`](https://github.com/chenglou/react-motion/pull/273), it is doable.

I'm still curious about making `isAnimating` a context variable so you can have something like `SimpleMotion` to do the fast thing by default.
",appsforartists,
244,2016-02-04 10:22:37,"I dislike limiting the power of motions to style/transform although that is indeed the most common use case, how about we add a singleLevel boolean prop which will inject the boundary into the result of the motion's children function response. This will let you use anything you want as the direct descendant of the motion without losing expressiveness and without adding cruft to the render function you supply.
",avi,
244,2016-02-04 16:10:09,"I don't think only those properties should be animatable, just that maybe there's an opportunity here to pave a cow path and make the thing most people want to do also the easiest thing to do.  Motion as it is should definitely still exist.  (Some of my favorite uses of Motion, for instance, animate a radius rather than a CSS property.)

I don't understand how `singleLevel` would work.  My understanding is that anything wrapped in a `StaticContainer` would reject updates and thus be frozen in its initial state.  Therefore, you'd have to look inside whatever `children` returns and inject a `StaticContainer` between the top-level element and its descendants.  That feels needlessly intrusive, and presumes that you are animating the wrapper component (which seems even more presumptive than saying you are animating GPU-acceleratable transform properties).

As skeptical as I am of argument sprawl, it's probably OK to add an `isAnimating` flag to the `children` signature.  However, I do wonder if there's also value in doing it in context and providing components like `MotionBoundary` or `SimpleMotion` to enable the same optimizations without making users convolute their code with more glue. 
",appsforartists,
243,2015-11-19 08:44:41,"https://npmcdn.com/react-motion/build/react-motion.js

shows

<S_CODE_TOKEN>
",colus001,2016-01-26 06:03:04
243,2015-11-19 11:11:24,"It is not yet published to npm with build folder in it =)
",nkbt,2016-01-26 06:03:04
243,2015-11-23 15:01:37,"Humm we should stop pushing readme changes to master, or put a notice, or something else. Not the first time people check master readme and get confused about unreleased stuff.
",chenglou,2016-01-26 06:03:04
243,2015-11-23 21:21:27,"Yeah, README updates should probably go in a separate PR and merged right before the next release.
",nkbt,2016-01-26 06:03:04
243,2016-01-26 06:03:04,"Related: #262 and #266.

Sorry for the delay. CDN now works for React-motion v0.4.1.
",chenglou,2016-01-26 06:03:04
242,2015-11-17 10:47:48,"Since it is not yet published, I tested on react itself and it works well.

<S_CODE_TOKEN>

So we can remove build from git :birthday: 
",nkbt,2015-11-18 05:45:00
242,2015-11-17 15:12:45,"o tldr: no more need for bower builds checked in ever, anymore? Seems like I could just press the merge button but this is too good to be true
",chenglou,2015-11-18 05:45:00
242,2015-11-17 22:43:18,"ahaha yeah, I think so.

The only downside for now - no sourcemap. Only one build file. Later I am going to publish `zip` file with all pre-compiled stuff (like, styles, multiple JS files, source-maps), bower supports zips (afaik). But the first step is this PR and it works well as for my tests.

You can try that by yourself with reactjs.

I am not sure how to test this stuff with rails-bower (or whatever those rails people use), since I do not do rails. If anyone can confirm it uses just a normal bower.json and supports plain URLs, then we are completely good ditching this awkward bower stuff.
",nkbt,2015-11-18 05:45:00
242,2015-11-18 05:44:57,"I'd like to have a magical npmcdn that also bundles the npm module into one script consumable by bower.

Or not have bower.
",chenglou,2015-11-18 05:45:00
242,2015-11-18 06:39:24,"That magic is too project-specific, I am pretty sure it is almost impossible to do properly. This is basically your webpack.prod config that does all the magic
",nkbt,2015-11-18 05:45:00
242,2015-11-18 06:47:50,"(I was half joking btw =))
",chenglou,2015-11-18 05:45:00
242,2015-11-18 11:25:29,"Some people may read the other half 

![magic](http://img.pandawhale.com/94867-magic-gif-Shia-Imgur-MAH7.gif)
",nkbt,2015-11-18 05:45:00
241,2015-11-17 01:38:14,"Hey maybe this is a stupid question but I can't find how to use react-motion using react with javascript syntax and not JSX. Any examples?? Thanks!
",zecharyah,2015-11-17 15:06:26
241,2015-11-17 08:09:30,"using [babel repl](https://babeljs.io/repl/)
this

<S_CODE_TOKEN>

becomes this

<S_CODE_TOKEN>
",salzhrani,2015-11-17 15:06:26
241,2015-11-17 15:06:26,"Yep, it's just a normal function that you pass as a child. Thanks @salzhrani!
",chenglou,2015-11-17 15:06:26
241,2015-11-17 16:32:59,"Thanks everyone.
",zecharyah,2015-11-17 15:06:26
240,2015-11-12 05:09:52,"I'm only now looking at react-motion. Despite how awesome react-motion looks, the perf implications of style-recalc are not ideal.

Do you have any thoughts on using the near-future [Web Animation APIs](http://www.w3.org/TR/web-animations/) as [seen in Chrome](https://developers.google.com/web/updates/2014/05/Web-Animations-element.animate-is-now-in-Chrome-36) under the hood to deal with realizing the react-motion animations in the DOM?

I would think the API would have to change a little bit or perhaps this would be another library that builds on react-motion. But your react-europe 2015 demos show that you could feed future states to element.animate() to do the actual DOM animation, and in theory you could cancel the animation and replace it with a new one if those precalculated future states are no longer what you predicted they would be.

Is this something that has been discussed at all? Are there reasons it wouldn't work?

Thanks for any guidance!
",hitsthings,2015-11-19 10:04:12
240,2015-11-12 07:59:43,"These articles could be interesting regarding the question and the animations as a whole:
http://marcgrabanski.com/html5-animation-api/
http://acko.net/blog/animate-your-way-to-glory/
http://acko.net/blog/animate-your-way-to-glory-pt2/
",sompylasar,2015-11-19 10:04:12
240,2015-11-14 04:47:01,"Yep, acko.net has been a great reference! We already do implement a few perf/visual optimizations such as separating the real-life clock with ideal clock. As for smoothing out arbitrary interpolations, [tween-state](https://github.com/chenglou/react-tween-state) solves this (it's the additive animation that one of the articles is talking about, and one that's implemented in iOS 7) but I'd rather just use springs because it makes other things easier too.

@hitsthings: [Here](https://medium.com/@chenglou/react-motion-and-animated-4b3edf671cba)'s the answer to your question. Hopefully we'll reach that stage where we can defer to web animation (or whatever engine it is) under the hood. In the mean time, the next goal would be to defer to actual DOM manipulation. I've been caught up with a few other features (and other stuff in general) recently so this hasn't been done yet. Also, the ""coordination"" that I'm talking about in my article, the one in RM (dependent/stagger spring, unmounting), needs a bit of API tweaking in order to work with DOM manipulations/web animation, like you said.

So: it's being discussed, not as much as some other API priorities right now but still. I'm trying to make the API as good as possible, while considering that animation perf is one of the areas where we still have to sacrifice API for speed. If you're interested in making the API totally compatible with an arbitrary implementation under the hood, check out #133 (it's slightly messy and deviates from the current implementation; again, if you're interested, give me a signal and I'll revamp it soon).

I'm leaving this open temporarily, in case you have other thoughts on this. Feel free to close it afterward because there are other issues tracking this =)
",chenglou,2015-11-19 10:04:12
240,2015-11-19 10:04:12,"I'm still wrapping my head around the proposal in #133 but it makes sense that could support a precalculating backend. I wouldn't make you go through the effort of revamping it just yet - I'm still just finding my way around and wouldn't be able to help implement it or anything.

I appreciate you taking the time to give me all the details on this. It's super helpful.

Cheers!
",hitsthings,2015-11-19 10:04:12
239,2015-11-10 19:12:27,,hoffman211,2015-11-10 20:46:59
239,2015-11-10 20:47:06,"Sweet
",nkbt,2015-11-10 20:46:59
238,2015-11-10 10:10:37,"Looks like it's better to check x with rest value, not previous.
For example if errorMargin becomes a user parameter, there will situations with small velocity and small dx values but x is far from the rest.
",istarkov,2015-11-18 23:40:12
238,2015-11-10 10:20:39,"Also looks like it's better  for spring animation (with check added above) to check velocity
`Math.abs(newV) < errorMargin` but not an acceleration `Math.abs(newV - v) < errorMargin`, and it allows to increase errorMargin. (_Look at second commit_)

(small velocity near the final point for springs means that we can stop) (it's not true for other animations kind)
",istarkov,2015-11-18 23:40:12
238,2015-11-10 10:33:23,"PS: Without ability to write custom stepper or set errorMargin as spring parameter there are a lot of small visually bad animation movements.
",istarkov,2015-11-18 23:40:12
238,2015-11-10 19:18:06,"The logic here is tricky. Does this glitch with animations whose destination is 0? What about the edge-cases of TransitionMotion where you're adding such an item, etc. (this is super vague but can you see what I mean?)
Also, how relevant is this if we implement custom error margin?
",chenglou,2015-11-18 23:40:12
238,2015-11-10 19:49:37,"1) Destination value can be zero or any other value, this part `Math.abs(newX - destX)` contains delta not destination itself so it can be any numeric value.

2) It's more easy to user think in terms like - `if velocity is small enough and distance to destination is small we can stop animation` instead of current `if acceleration is small and velocity is small we can stop animation`

3) For a big errorMargin master solution could stop animation at first step even if destination value is far far away from value because of acceleration and velocity is less then errorMargin.
Solution proposed above will not stop.

4) I've just made a search over github and fast looking into the code gives
Looks like [facebook rebound use the same approach](https://github.com/facebook/rebound-js/blob/master/rebound.js#L754) as above
Looks like [JNWSpringAnimation same approach](https://github.com/jwilling/JNWSpringAnimation/blob/master/JNWSpringAnimation.m#L263) use the same approach (be sure that proposedValue - previousValue is Velocity) or similar

5) I'm not an expert in `edge-cases of TransitionMotion` so can't say nothing about, need to read more.
",istarkov,2015-11-18 23:40:12
238,2015-11-18 23:40:09,"You know what, this is probably right. If TransitionMotion screws up after this then we should fix that instead.

Sorry for the delay! Thanks =).
",chenglou,2015-11-18 23:40:12
238,2015-11-19 00:18:11,"Thank you for this library! 
",istarkov,2015-11-18 23:40:12
237,2015-11-05 08:05:02,"I got a problem. I can not get any ref when I used react-motion component. I think it's asynchronous, is it?
",code-artisan,2015-11-06 14:03:50
237,2015-11-06 14:03:50,"String refs don't work inside callbacks: https://github.com/chenglou/react-motion#faq (last point).
Callback ref does work, and will be replacing string refs in react too. That works! =)
",chenglou,2015-11-06 14:03:50
236,2015-11-03 16:41:11,"Hi, I have a list view and a desired animation in this sequence:
1) item is delete, it fades out to 0.
2) items are rearranged, where items below the deleted item translates upwards.

How can I achieve a ""sequence"" of animations?

Thanks!
",khankuan,2015-11-25 08:35:07
236,2015-11-03 23:14:02,"It looks like a duplicate of #224 and blocked by #235
",nkbt,2015-11-25 08:35:07
236,2015-11-25 08:35:07,"Yep. Closing in favour of #224!
",chenglou,2015-11-25 08:35:07
235,2015-11-02 23:03:50,"Sort of related to #100

It is OK now to check current value if you are using default spring preset. But if I am using something like `wobbly` and animate `height`, I can easily get zero height while animation is far from being finished (then it goes to negative height, but that is a different story).

So if I think that my animation is done when height equals 0 and want to unmount element, that is not actually true and on next RAF component is shown again but with a very little height. And again and again.

![animation-end](https://cloud.githubusercontent.com/assets/175264/10896978/80f220d8-8211-11e5-8bca-e33809e44b75.gif)

I am pretty sure we had this discussion somewhere else, but could not find a separate issue for this.

I would like to see API in this way:

<S_CODE_TOKEN>

Passing another object to `render` function will not break current API, and will potentially allow us to pass more fields, not only `isFinished` but exposing some RM internal state (maybe related to #219)
",nkbt,2016-04-20 07:03:53
235,2015-11-02 23:29:38,"What's the advantage of this over adding a prop `onEnd` which would call a callback? I'm a little scared of this `isFinished` inside the render function because it sounds like you'll have to mutate some state in the parent component to register that the animation is done. Ultimately you want the parent to know that the animation is done, not necessarily the children.
",bsansouci,2016-04-20 07:03:53
235,2015-11-02 23:43:51,"Callback would work for some cases, but in my case having `isFinished` passed to render itself would work better, since I do not want to manipulate state, based on callbacks and I want only change what is rendered inside function without re-rendering whole component. I thing both should be added. Though this one probably should not be added to the main README (and added to a separate Advanced usage WIKI page)
",nkbt,2016-04-20 07:03:53
235,2015-11-03 00:07:56,"`end` callback and `isFinished` here would need to be per number btw, not per style
",chenglou,2016-04-20 07:03:53
235,2015-11-03 01:41:29,"@chenglou @nkbt The #219 velocities are a better way to go than a single `isFinished` flag. There could be a helper to which you pass the object with velocities so it calculates whether all / any / some of them have reached certain threshold.
",sompylasar,2016-04-20 07:03:53
235,2015-11-03 02:23:03,"@sompylasar I mentioned that issue in my first message =).
That could be an additional thing passed to `render` callback alongside with `isFinished` flag, which is simple and straightforward and does not require any extra logic around it.
",nkbt,2016-04-20 07:03:53
235,2015-11-03 09:01:02,"@nkbt, yes, I saw this. Just missed the ""alongside"" thing, sorry.
",sompylasar,2016-04-20 07:03:53
235,2015-11-12 19:18:30,"Is anyone working on this? We also need an end callback for our use case.
",yanivtal,2016-04-20 07:03:53
235,2015-11-12 19:23:23,"@chenglou I don't think anyone's working on it as of right now. PRs are very welcome though :D
",bsansouci,2016-04-20 07:03:53
235,2015-11-12 19:28:17,"I will be working on this.
",chenglou,2016-04-20 07:03:53
235,2015-11-13 10:06:54,"I though I will, but had a pretty crazy last month
",nkbt,2016-04-20 07:03:53
235,2015-11-18 01:35:52,"Sweet thanks Cheng! We're using this in several projects. Absolutely love it!
",yanivtal,2016-04-20 07:03:53
235,2015-11-29 19:34:51,"+1 - this would be super helpful. I use this library for animations such as animating in a modal from the bottom of the screen, and I want to animate it out then unmount it when the animation is finished, and I currently don't have any way to do that.
",clayne11,2016-04-20 07:03:53
235,2015-11-30 04:32:31,"That would be really useful! Particularly for route transition (eg: poping modal/changingfield focus when the animation finished!)
",dozoisch,2016-04-20 07:03:53
235,2015-12-02 22:15:47,":+1: Adding an 'on animation complete' callback prop would be very useful.
",ReDrUm,2016-04-20 07:03:53
235,2016-01-05 04:10:18,"Does it simplify anything to call it `onRest` instead of `onEnd/Finished`?  You don't know if it will ever animate again, just that it isn't currently moving.

I realize this is bikeshedding, but I wonder if it will avoid future confusion or edge cases to present it as a temporary stop (not necc. a permanent one).
",appsforartists,2016-04-20 07:03:53
235,2016-01-07 17:42:47,"@chenglou you asked for an example of when somebody might want to use this.  Take a look at [this API proposal](https://gist.github.com/appsforartists/b199c6d79044f8e8abaf).

There are many times that I find myself wanting to have an object spring to a user's touch, but then track it perfectly once it gets there.  In a world without an `onRest` callback, this is much more cumbersome than it should be.
",appsforartists,2016-04-20 07:03:53
235,2016-01-26 07:10:19,"@threepointone, @chenglou, and I just chatted about this for a bit.

While we see the potential usefulness of a per-value onRest (e.g. in springParams), the simple/common case is per Motion instance (you want to know when the child is completely done moving).  Perhaps Motion (and StaggeredMotion) should gain an onRest attribute for now, and we can worry about per-value onRest in the future if it becomes an acute need.  For now, you can fake it by composing Motions together.

Per-value onRest seems like a more advanced usage that would suit a timeline-based API better than what Motion currently provides.
",appsforartists,2016-04-20 07:03:53
235,2016-01-30 06:16:15,"`onRest` === `onSomethingLeft` or something. See http://underscorejs.org/#rest for example.

I don't get the naming, sorry.
",nkbt,2016-04-20 07:03:53
235,2016-01-30 06:19:21,"I personally don't mind. But I'm opening a new issue to debate about the name so that we don't diverge this one: #274
",chenglou,2016-04-20 07:03:53
235,2016-01-30 13:28:13,"It's like equilibrium, but easier to type.
http://www.ask.com/science/rest-position-wave-ec11b00c6b5ff960 
",sompylasar,2016-04-20 07:03:53
235,2016-04-20 07:03:53,"Alright so end callback is in for `Motion` (react-motion v0.4.3). If there's request for such cb for `StaggeredMotion` and `TransitionMotion` we should reopen this issue or create a new one.

Sorry for the wait everyone! And thank you again @appsforartists for actually implementing it =].
",chenglou,2016-04-20 07:03:53
235,2016-04-20 07:08:00,"Awesome, thanks!
",ReDrUm,2016-04-20 07:03:53
235,2016-09-12 19:40:56,"@chenglou any news on when/if this will be implemented in `TransitionMotion`? I think that would keep consistency in the API and allow to have an easy, clean way to use that functionality (all I tried to use this with current implementation feels hacky).

> If there's request for such cb for StaggeredMotion and TransitionMotion we should reopen this issue or create a new one.

Not sure if this is the proper way to make a formal request, but I think this could be pushed forward. Any thoughts?

Thanks!
",p4bloch,2016-04-20 07:03:53
235,2016-09-12 20:03:46,"@p4bloch Are you gonna own `TransitionMotion.@onRest`?  You should start an issue to track your progress against, and submit a PR when it's ready.  üòÉ 
",appsforartists,2016-04-20 07:03:53
235,2017-01-16 12:45:42,+1 for the need to know when animation is finished (and/or fires),SkateFreak,2016-04-20 07:03:53
235,2017-01-16 15:54:27,@SkateFreak you should be able to do this now with `didLeave` it was merged [here](https://github.com/chenglou/react-motion/pull/399) and documented [here](https://github.com/chenglou/react-motion#--didleave-stylethatleft-key-string-data-any--void).,souporserious,2016-04-20 07:03:53
234,2015-11-02 16:53:34,"out of discussions here: https://github.com/chenglou/react-motion/issues/229
",dey-dey,2015-11-06 05:26:56
234,2015-11-06 05:27:05,"Looks good, thank you!
",nkbt,2015-11-06 05:26:56
233,2015-11-02 04:35:44,"Example: http://jsbin.com/nimujewiju/1/edit?js,output

In chrome if you drag it to e.g. 50% and quickly tab to another window (tested on osx yosemite), the animation pauses and then it goes to ~100% and stays there. The problem is bad because it goes beyond the target by far. 

I imagine the solution is something like clamping the elapsed time to 50ms or so and ensuring that another update occurs if it's overshot.
",brigand,2015-11-03 06:11:08
233,2015-11-03 03:35:15,"That's... a bug? @bsansouci 
",chenglou,2015-11-03 06:11:08
233,2015-11-03 06:11:08,"Ahahaha, fuck JavaScript =)

Got it. It has nothing to do with switching tab. You forgot to use `parseInt` on `e.target.value` and RM let that pass through by doing some `+` operation on string, which results in a nonsensical value in the end. Adding `parseInt` fixes this.

That was funny. Closing! =)
",chenglou,2015-11-03 06:11:08
233,2015-11-03 09:18:24,"@chenglou Fuck the DOM (React DOM?) for returning `string` as the `value` of `input type=""range""` :see_no_evil: 
",sompylasar,2015-11-03 06:11:08
233,2015-11-03 19:08:57,"It's the DOM alright =P
",chenglou,2015-11-03 06:11:08
232,2015-10-31 02:03:30,"That probably fits nicely with #37 though the difference is whether we can warn developer of delays in  runtime. Sort of basic profiling with a recommendation to split animated container from non-animated functional children subtree if we can detect delays and huge number of re-renders.

Not quite sure how technically do that (yet), but could take similar to `react-hot-loader` approach.
",nkbt,
231,2015-10-30 16:56:55,,dey-dey,2015-10-30 19:36:50
231,2015-10-30 19:06:27,"screenshot please?
",chenglou,2015-10-30 19:36:50
231,2015-10-30 19:26:09,"<img width=""931"" alt=""skitch 2"" src=""https://cloud.githubusercontent.com/assets/796926/10855889/8529259c-7f1a-11e5-93e7-725e35748860.png"">
",dey-dey,2015-10-30 19:36:50
231,2015-10-30 19:26:50,"@chenglou  can add italics and unbold if you want, keep it minimal.
",dey-dey,2015-10-30 19:36:50
231,2015-10-30 19:36:48,"Nope, that's good enough! Thanks!
",chenglou,2015-10-30 19:36:50
230,2015-10-30 16:27:32,"`spring: number -> ?[stiffness, damping] -> ConfigurationObject`

to something like:

<S_CODE_TOKEN>

**number** - the desired value to be used
**stiffness** - this could use a more friendly definition
**damping** - as does this, see other ticket [here](https://github.com/chenglou/react-motion/issues/229)

_returns_: ConfigurationObject (include link to what this is)
",dey-dey,2015-10-30 18:02:40
230,2015-10-30 18:02:40,"seems to be under discussion here: https://github.com/chenglou/react-motion/pull/209

closing
",dey-dey,2015-10-30 18:02:40
229,2015-10-30 16:27:06,"This was a bit of an unknown for me when first trying to use it. I had wikipedia Springs to remember what damping was, which was admittedly pleasant, but not altogether friendly to most webdevs working with animations.

Is there any way we can take a stab at relating the spring from physics to animation? Maybe a helpful gif or something?

Also sidenote: `opaque configuration` is a little vague IMO?
",dey-dey,2015-11-02 16:55:01
229,2015-10-30 19:38:25,"What part of ""opaque configuration"" is vague? Genuinely asking.

And yeah, the balls grid demo was partially an attempt to illustrate stiffness and damping intuitively. I'd gladly accept some gif explanation though (while we're at it, an illustration of TransitionMotion's mechanism).
",chenglou,2015-11-02 16:55:01
229,2015-10-30 19:48:36,"@chenglou sorry not trying to be difficult. I don't know what `opaque configuration` means. As opposed to `translucent configuration`? Which is what?

Could just be `returns a configuration object`.
",dey-dey,2015-11-02 16:55:01
229,2015-10-30 19:49:43,"Oh, ""opaque"" as in ""you shouldn't peek under it and access its members because we might change its representation in the future""
",chenglou,2015-11-02 16:55:01
229,2015-10-30 20:00:25,"Ahhhhh cool, I've heard other terms for that, just not `opaque`.

Also I like the ball demo, just took a little while to understand what i was seeing. Maybe a gif quickly illustrating an intuitive difference between to settings _a la_ http://cubic-bezier.com/#.17,.67,.86,.59

I'd be happy to add that.
",dey-dey,2015-11-02 16:55:01
229,2015-10-30 20:01:00,"Yeah that'd be cool.

Got any suggestion for a better term than opaque?
",chenglou,2015-11-02 16:55:01
229,2015-10-30 20:16:53,"Well it'd be nice to make it frozen or immutable in that case, but I generally see `private` used most frequently. As in a `a configuration object with private properties`. 

That said, since what is returned is not of use at all to the developer (except maybe for introspection), perhaps just passing in a config object and then using `spring()` would make the API more friendly, but I suppose that's another thing altogether. Perhaps I'm not understanding it's use properly.
",dey-dey,2015-11-02 16:55:01
229,2015-10-30 21:08:29,"> Well it'd be nice to make it frozen or immutable in that case

Yeah I guess we could freeze in dev. Kinda expensive though.

Private sounds good.

> That said, since what is returned is not of use at all to the developer (except maybe for introspection)

Introspection is exactly why I didn't want to expose it. I might change the format in the future. But maybe I'm coding too defensively here.

> perhaps just passing in a config object and then using spring() would make the API more friendly

Not sure what's the use of `spring` if you pass the config directly then? For the record, it was indeed a plain object instead of the `spring` helper before, but that had a bit of boilerplate.
",chenglou,2015-11-02 16:55:01
229,2015-11-02 16:54:03,"here's the doc PR: https://github.com/chenglou/react-motion/pull/234

> Yeah I guess we could freeze in dev. Kinda expensive though.

True. There's other ways, but I assume this is low priority.

> Not sure what's the use of spring if you pass the config directly then.

Ya, since it's only three properties could just be `{ value: 10, spring: [100, 26] }` and then just generate the configuration object under the hood, but perhaps this is also not too important.

Thanks for the quick replies!
",dey-dey,2015-11-02 16:55:01
229,2015-11-02 16:55:01,"This can be closed now.
",dey-dey,2015-11-02 16:55:01
228,2015-10-30 16:19:02,"<S_CODE_TOKEN>

FULL STACKTRACE

<S_CODE_TOKEN>
",dey-dey,2015-10-30 16:45:42
228,2015-10-30 16:45:41,"Nvm this was my own environment issue
",dey-dey,2015-10-30 16:45:42
227,2015-10-26 05:49:21,"I keep getting the following warning
`Warning: setState(...): Cannot update during an existing state transition (such as within`render`). Render methods should be a pure function of props and state.` and usually it is `springEnd` that is calling `setState` not sure what could be causing this.
",salzhrani,2015-10-26 09:19:48
227,2015-10-26 09:11:48,"Somehow you are calling setState within a render call. It is really hard to tell without looking at your code.
",nkbt,2015-10-26 09:19:48
227,2015-10-26 09:19:48,"I thought `springEnd` was part of RM, but it is not.

thank you.
",salzhrani,2015-10-26 09:19:48
226,2015-10-26 02:17:54,"I need to pass multiple sets of styles to RM but I have had no luck getting RM to interpret either a nested object of styles or an array of style objects.

My solution is to build a key map before and after RM does the interpolation. Any chance there is a better solution here?

<S_CODE_TOKEN>

I want to pass in styles that look like either of these.

<S_CODE_TOKEN>
",bishopZ,2015-10-26 21:24:28
226,2015-10-26 04:19:47,"RM cannot work with nested styles.

you can animate one prop and calculate all others based on it.

<S_CODE_TOKEN>

And so on...
",nkbt,2015-10-26 21:24:28
225,2015-10-25 07:25:14,"[Here's a reduction](http://codepen.io/appsforartists/pen/avYZrZ?editors=001).

It looks like I got my spring numbers backwards.  With any damping above 120, it generates a bunch of asymptotically smaller numbers until it bottoms out at NaN.  

Perhaps there should be a warning for improbable (or impossible) spring values.
",appsforartists,2016-01-26 06:04:34
225,2015-10-25 11:07:13,"I guess it might be also related to #100? I mean we can get this fixed by simply having some sane precision.
",nkbt,2016-01-26 06:04:34
225,2016-01-26 06:04:34,"Fixed for v0.4.1, as `spring` now takes the unambiguous format `spring(value, {stiffness: ..., damping: ...})`.

I'll close this for now, because it seems weird constraining the physics numbers. But maybe this is the reasonable thing to do. Feel free to contest this!
",chenglou,2016-01-26 06:04:34
225,2016-01-26 07:02:00,"Nothing to contest for me.  If it's harder to accidentally transpose the values, the surface area for this issue gets a lot smaller.
",appsforartists,2016-01-26 06:04:34
224,2015-10-24 12:10:14,"Hi,

I was wondering what currently would be the best way of achieving a sequence of animations on a single element ? So essentially, a way of looping through an array of destination values (spring configs) ? 

Obviously it would be lovely if you could pass in an array of spring configs to the Motion component which would detect once one spring has finished and the next should start until it gets to the final spring config, although this just wishful thinking X) !

Great library, really like the way of thinking of animations in terms of a spring, really like where you're coming from and going with the library (react talk in summer was one of my favourites)
",VasilyShelkov,
224,2015-10-24 12:13:29,"That is pretty cool thing to have. I think this should be made by a fairly simple wrapper-component.
",nkbt,
224,2015-10-24 12:16:39,"@nkbt hmmm good point, will have a go at making a simple wrapper component (still quite new to react) to achieve this and post my results :+1: 

Although there's no way to detect whether an animation has completed unless you just check the values being passed in right?
",VasilyShelkov,
224,2015-10-24 12:17:23,":ok_hand: 
",nkbt,
224,2015-10-24 15:18:12,"It seems simple enough:

<S_CODE_TOKEN>

The missing part is how to detect when one animation ends and the other should begin ? 

UseCase for #139 ?

Any ideas how it could be possible for the time being ? 

~~There is a [mutation obeserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) but it's only compatible with newer browsers and still isn't easy to tell if something has finished changing, only that its changing...~~

~~Perhaps [animationend](http://www.w3schools.com/jsref/event_animationend.asp) is the answer ?~~

No event listener that I can find is suitable :(
",VasilyShelkov,
224,2015-10-25 10:58:35,"Usually we detect that animation is ended case by case comparing current values with end value. There is no generic solution at the moment to tell that whatever animation is there - it is ended. So yes. I guess to make a generic wrapper you need one, #139 is a blocker.
",nkbt,
224,2015-10-25 11:07:15,"This might be a noob question but there's no way of accessing the value that's being interpolated within the `<Motion>` component from a wrapper component in the master branch because it's not being exposed is there? To then potentially be able to to try and calculate the velocity ?
",VasilyShelkov,
224,2015-10-25 11:09:57,"Well... I guess, you can just get `styles` prop, and see what is being changed, so you have end values, actually. For each step. So you can track it on step-by-step basis. My previous answer is not completely correct then. #139 would simplify the implementation a lot, but it is possible to make a wrapper without it.
",nkbt,
224,2015-10-25 12:08:53,"but there's still an issue with the spring, as if you want to add a ""wobbly"" animation to the sequence, it's going to go past the end value and so you'd need to calculate the ""velocity"" to wait for it to go to 0....

So from my understanding of your answer, styles prop is directly mutated in the `<Motion>` component ?  
",VasilyShelkov,
224,2015-10-25 12:38:56,"There is no mutation, it goes through values and calls Child function When you think animation is done (to some degree of precision), just start next step.  And so on. Spring calculation does not hold start/end values, it works with intermediate values.There is no state in RM or sort of queue. Animation will just ""follow"" new values. Technically you will make animation 100->0.01->99.98->0.01->100 or something like that for wobble.
",nkbt,
224,2015-10-25 12:57:52,"Sorry I know I'm clearly missing something simple and don't understand but imagine I've got this render function which is using the `<SequentialMotion>` wrapper:

<S_CODE_TOKEN>

How do I track the values in this case `({left, top})` in the callback(for now non generically so I can get an understanding of how I'd watch the values of them) in `<SequentialMotion>`. I don't understand how I can access them from `<SequentialMotion>`.

Thanks for your patience with me by the way
",VasilyShelkov,
224,2015-10-25 20:36:33,"<S_CODE_TOKEN>

these. you have them on each step. compare with:

<S_CODE_TOKEN>

internally in SequentialMotion:

<S_CODE_TOKEN>

Don't know how internally it is implemented in SequentialMotion, so can't be more specific.

Hope this helps!
",nkbt,
224,2015-10-27 17:48:06,"Had another thought, would it not be possible to use <StaggeredMotion /> and rather than mapping the interpolated styles to a new element in the component's children every time, just loop through the interpolated styles changing the style of a single element ? 

Going to try it tonight to see if I'm understanding StaggeredMotion correctly...
",VasilyShelkov,
224,2015-10-27 19:25:50,"I recently posted a similar issue. The code sample I have shows a way to flatten a group of elements into a single object for processing by RM.
The code seems like a hack-around to me, as I would rather RM support nested property sets. It seems like support for nested property sets would resolve this issue as well.
Either way, my code sample may provide an approach to resolve this issue as it did mine.
https://github.com/chenglou/react-motion/issues/226
",bishopZ,
224,2016-05-10 20:17:20,"<S_CODE_TOKEN>

<S_CODE_TOKEN>

This one helped me. Might be useful for someone.
",stnwk,
223,2015-10-24 11:47:20,"I've just implemented one for [react-component-template](https://github.com/nkbt/react-component-template) (with @ButenkoT help)

Look at https://github.com/nkbt/react-component-template/pull/9 for some nice automation (basically installing and running everything with `npm run test:e2e` + prepush hook)

@chenglou do you want to have this sort of testing here?

PS: for each component I publish, I have example, and dev-server. So I can run it and then click through example to make sure it is not broken (at least smoketest). Then I can add more tests to make sure it actually behaves correctly. Testing is done in Chrome, so it is very close to real life.
",nkbt,2015-11-25 08:32:56
223,2015-10-24 19:26:21,"What would be an example of a concrete test for RM?
As an aside: I'm scared of selenium after using it for some other task, lol
",chenglou,2015-11-25 08:32:56
223,2015-10-24 21:10:22,"Lol. Forget about selenium, it is a middle layer. You are dealing with
nightwatch, which is pretty neat. Unless you mean something different.
Yeah, selenium itself could be flaky and hard to debug :(.

Regarding tests, firstly some smoketests, check that page loaded and there
are no js errors, so it renders at least something. Then some tests on
actual ui. Animations are hard indeed, but it is still possible to check at
least something to make sure, things are working.

I definitely do not insist on this, just made a suggestion in case you were
like ""would be nice to have some sort of e2e, but too much hassle setting
things up"" :).
",nkbt,2015-11-25 08:32:56
223,2015-10-24 21:13:51,"I see. Yeah the idea of e2e would be nice but there's indeed some overhead.

We have the basterdized `test/integration` which verifies that everything's published correctly right now. For animation, I'd rather advance the mock rAF the way it's done in animationLoop-test and components-test right now. Got burnt trying to do screenshot testing too much ([ahem](https://github.com/chenglou/node-huxley)).

I think we're fine for now. I'll leave this issue open because it's a fine idea.
",chenglou,2015-11-25 08:32:56
223,2015-10-25 10:55:13,"Sure, sounds good. Let's leave it as a backlog feature for future reference.
",nkbt,2015-11-25 08:32:56
223,2015-11-25 08:32:56,"Still remembering this, but closing it because I'm on an issue closing rampage.
",chenglou,2015-11-25 08:32:56
223,2015-11-25 09:28:46,":+1:
",nkbt,2015-11-25 08:32:56
222,2015-10-23 20:01:00,"When starting to use React-Motion it was difficult to find examples of React-motion code besides the provided examples. Hoping this list in the Readme.md will help.
",bishopZ,2015-10-27 17:39:39
222,2015-10-27 00:04:33,"Sorry for being late on this. Can you squash?
",chenglou,2015-10-27 17:39:39
222,2015-10-27 17:39:39,"Nvm I did that. Your commit is in! Thanks =)
",chenglou,2015-10-27 17:39:39
222,2015-10-27 17:44:03,"Moved to the wiki page so that everyone can edit it without submitting new PRs
",chenglou,2015-10-27 17:39:39
221,2015-10-18 15:55:20,"I have the following (simplified) structure:

<S_CODE_TOKEN>

Messages and OtherUI have two distinct stores they're listening to, so they (should) render independently of each other. OtherUI has some draggable elements using ReactMotion for smooth animation and an 'Add Message' button which adds a message to Messages using Flux pattern. It all works fine except for a case when you click the 'Add Message' button quickly after dragging something so the animation is still running. I get ""Error: Invariant Violation: Expected flush transaction's stored dirty-components length (1) to match dirty-components array length (2)""

I'm going to check it more thoroughly in a second and update/close if I find the solution but I thought I'd ask just as a sanity check - is this an expected and known behavior/limitation of React Motion? 

I'm still using v0.2.7 if that matters. 
",koko236,2015-11-25 08:37:07
221,2015-10-18 16:21:06,"Eh, that's weird and I'm not totally sure what you mean by it. That you're adding components inside messages? Yeah that shouldn't interfere.

(Also, update to 0.3.1 when you can! Just in case =P)
",chenglou,2015-11-25 08:37:07
221,2015-10-18 18:10:00,"Yeah, I'm adding `Message` components inside `Messages` comp which has common parent with the `OtherUI` component. React Motion animations run under `OtherUI` node. `OtherUI` and `Messages` listen to two separate stores. The only connections are:  
1. a single button a few levels under  `OtherUI` which calls `MessageActions.addMessage()`, which in turn informs `MessagesStore` via `EventDispatcher` and then again `Messages` component is updated by `CHANGED` event - so nothing very tight.
2. a common React comp parent - though a dumb one - no state, no updates, just a container really. 

The call stack however starts with ReactMotion loop() function which might or might not mean something:
![screen shot 2015-10-18 at 20 01 33](https://github-cloud.s3.amazonaws.com/assets/741399/10565541/393da4f0-75d3-11e5-8931-ff4fdf6c61ee.png)
",koko236,2015-11-25 08:37:07
221,2015-10-19 00:33:47,"@koko236 I have very little understanding of your structure, but it seems that the best solution would be to not apply react-motion directly to OtherUI, but make a very basic UI wrapper and apply react-motion to it. So you component that handles some actual data is not touched by RM and is totally ""cached"" by react. It also will have a huge impact on perf (in a good way).
",nkbt,2015-11-25 08:37:07
221,2015-10-19 00:35:53,"The generic rule-of-thumb for me is - if it is not animated, do not animate it. So re-render only that little animated piece and abstract all the bigger logic not related to animated part into a separate component.
",nkbt,2015-11-25 08:37:07
221,2015-10-19 00:56:16,"Well, I might be abusing the React a little bit, but I'm using it for a windows like interface (can't show it at the moment though). So all the elements under `OtherUI` have `position: absolute` which is stored in UIStore and changed according to user interactions, i.e. drag and drop. Each draggable component is wrapped in a `Spring` to achieve smooth motion. The `Messages` are virtually independent except they bouth use React to render and looking at the call stack it seems like both mutations (Motion anim and adding a `Message`) get batched together and interfere with each other somehow. 

(I'm quite new to React so the above is not a very in-depth analysis of what goes on under the hood obviously :) 

On a more general note, I spent some time wondering how to organize the data flow to avoid massive updates during dragging (ATM, the whole draggable elements tree is updated with one general UIStore `CHANGE` event), but got convinced that the virtual DOM resolution in React is fast enough and it indeed seems to be the case even without using immutables for the state. Everything worked quite allright until I mixed React Motion transitions with adding new elements. I still hope there's some weird/stupid thing I did my code that I can fix easily, but I'm still trying to narrow down the problem. 
",koko236,2015-11-25 08:37:07
221,2015-10-19 01:02:25,"@koko236 look at https://github.com/gaearon/react-dnd

Ping me in Slack (reactiflux), I can help you with your issue better there.
",nkbt,2015-11-25 08:37:07
221,2015-10-19 01:18:19,"I looked at DND (and will again for sure) but my knowlege of react was way lower at that moment and I decided to build something myself from scratch as a way of learning. Right now I don't think my problems are very much d'n'd related - anyway it's a good pointer, thanks. 

As to reactiflux - it's closed for new members now (http://www.reactiflux.com/)
",koko236,2015-11-25 08:37:07
221,2015-10-19 01:34:33,"Reactiflux is moving to Discord. Does this invitation link work? https://discordapp.com/invite/0ZcbPKXt5bYzmcI0
",chenglou,2015-11-25 08:37:07
221,2015-10-19 01:41:58,"Yes! Thanks. 
",koko236,2015-11-25 08:37:07
221,2015-10-19 02:30:58,"It might be too early to open the champagne but putting `MessagesStore` emitChange into setTimeout() with 0 delay 'solved' the problem - I was unable to break it anymore. I can imagine there is some race condition inside React. 
",koko236,2015-11-25 08:37:07
221,2015-10-19 02:47:20,"@koko236 you quickly patched the problem but did not solve the root cause. As I can see the cause is that your animation logic affects components that work with data/events (possibly re-renders them thousands of times). I strongly suggest you to remove setTimeout and figure out how to fix it without this hack =)
",nkbt,2015-11-25 08:37:07
221,2015-10-19 03:00:46,"@nkbt  I know it's just a patch and I hope it'll work cause I'm a bit time constrained right now. :) I'm wondering what the root cause might be and is it really something on my side. Truth is I should probably use raf to fire update events and not mousemoved event directly but the bug happens after the dragging has ended and it's only React Motion that modifies anything when `addMessage' is called (and that's an extremely simple operation).
",koko236,2015-11-25 08:37:07
221,2015-10-19 03:06:46,"@koko236 I'm just trying to help you to get an idea where the actual problem is. This issue has definitely nothing to do with react-motion itself, it is more about the way your code was structured, RM probably revealed that issue by constantly re-rendering things. If you are happy with a temp hack and it is a considered choice - that is totally all right.

If you wish to drill further - ping me on Discord (`@nkbt` there). And just in case add console.log into your `render` method so you can see it is actually rendered bazillion of times =)
",nkbt,2015-11-25 08:37:07
221,2015-10-19 03:19:05,"It sure as hell is. Thanks a lot, I'm switching to Discord. 
",koko236,2015-11-25 08:37:07
221,2015-11-20 22:30:03,"Hi. Is this issue resolved?
",chenglou,2015-11-25 08:37:07
221,2015-11-22 12:37:34,"Hi, it's worked around for now but I had no time to seek the root cause of the problem.
",koko236,2015-11-25 08:37:07
221,2015-11-25 08:37:07,"Alright then. Weird stuff!
Closing for now =)
",chenglou,2015-11-25 08:37:07
220,2015-10-17 13:25:54,"I can't get it fully working to animate both mounting & unmounting components staggered within TransitionMotion.

It would be awesome to have a demo because you also mentioned it in the docs under ""TransitionMotion#styles"" =)
",webyak,
220,2015-10-17 17:00:09,"Can you be more precise please? E.g. a code snippet would help =)
",chenglou,
220,2015-10-18 07:38:42,"This is the working part I got so far. But only for the staggered mounting animation. https://d.pr/v/10Gkd

<S_CODE_TOKEN>

I'm now looking to animate unmounts too. Just instead of sliding in they should slide out down.

Now when I'm going to differentiate between the leading mounting and unmounting component to do 2 independent staggered animations all within getStyles, I think this might get ugly.
Also it's strange that I'm not using `willEnter/willLeave` so far so could I be better off using `StaggeredMotion` 2 times?

As you can see I'm really unsure here, would be awesome if you could point me into the right direction! : )
",webyak,
220,2015-10-18 11:40:40,"Update: Got it working, will post the code soon!
",webyak,
220,2015-10-18 11:41:59,"@webyak would love to see it, did you end up using StaggeredMotion?
",arush,
220,2015-10-18 11:45:39,"@arush Nope, TransitionMotion üòÅ
",webyak,
220,2015-10-18 15:32:51,"This is my solution. I think it could be improved quite a lot. Do you guys have any idea on how to make this more simple?

<S_CODE_TOKEN>

Note: You probably want to animate `opacity` staggered too and change the default spring config.
",webyak,
220,2015-10-23 00:11:19,"I am having the same use case, ii want to animate the `left` and `opacity` style properties on every item in a list on mount in a staggered effect. Kind of struggling wrapping my head around it. Same as @webyak i thought using `<StaggeredMotion>` and willEnter would work but willEnter does not fire on initial mount, only when something is entering the list. Your solution looks smart @webyak but is there any way to implement this use case in the API @chenglou or am i missing something ? 
",iandoe,
220,2015-10-23 00:46:32,"@iandoe @webyak you can check sources of [react-collapse](https://www.npmjs.com/package/react-collapse), that might help.
",nkbt,
220,2016-06-13 18:52:26,"I'm running into a brick wall with this as well. Is there any existing example code for staggered animations  with `TransitionMotion`?
",tptee,
220,2016-12-27 12:43:47,"I too had this problem, but I managed to create more or less working example. You can check out the example here: https://github.com/mlewando/staggered-unmount-mount-react-motion",mlewando,
219,2015-10-15 13:29:15,"Hi Cheng
Firstly, Awesome library! I've been having a lot of fun with it the past few days :smile: 

So, I had the idea that the current velocity of a animated property is a nice value to animate specific css-properties with. However I haven't been able to acces the velocity using the current api. (Maybe, I have just overlooked something.)

So I forked react-motion and crudely exposed the velocities in StaggeredMotion's children-function as a second argument and tried driving translateZ and box-shadow with the current velocity
I'm pretty happy with the [result](https://b0513122f4e33807f0e8db82fdcbf846d3cad11e-www.googledrive.com/host/0BwUo2j-YQKKoRUNiSzhBMkFfMVE), but I feel like my approach is too difficult..

I'd love it to have your opinion on this. :)
",midgethoen,
219,2015-10-17 01:23:32,"Hey! 
This is #60. Haven't gotten around doing it yet. I want it too, so that this + gestures gives you the flick animation =)
What's your use-case of velocity in the link? Not sure I see it.
Tentative API is `<Motion velocity={currentVelocity => driveVelocity ? changeVelocity(currentVelocity) : currentVelocity} style={...} />`
",chenglou,
219,2015-10-22 06:11:03,"> This is #60.

I'm not sure #60 is the same use case as I am describing. I'm only interested in getting the current velocity, not influencing it. But ill look more closely at #60 later this week. :)

> What's your use-case of velocity in the link? Not sure I see it.

I use the velocity to drive the translateZ (and also box-shadow offset). So the faster a card moves up, the more forward it comes. And also the faster it moves down the further back it goes.  Because cards moving a greater distance also move faster, all cards naturally move past each other in the z-direction. Try hitting a bunch of keys in the demo.. 
",midgethoen,
219,2016-01-05 04:12:36,"This could also lay some useful groundwork for #252.
",appsforartists,
219,2016-10-18 18:00:02,"I'm interested in this as well. My use case is to apply some class on ""leaving"" elements, but not on ""entering"" elements. I don't need velocity specifically, but I can see it being an elegant way to get the information I want.
",apexskier,
218,2015-10-14 05:37:13,"This way, when someone `checkout` an older commit the correct, dated demo links will be shown.
",chenglou,2016-01-26 06:25:12
218,2015-10-14 07:07:41,"Ouch, accidentally clicked.
",nkbt,2016-01-26 06:25:12
218,2015-10-14 07:09:22,"Makes sense, but why would you check out older commit in the first place? Are we going LTS or something, supporting multiple API versions, etc?
",nkbt,2016-01-26 06:25:12
218,2015-10-14 13:20:07,"Makes debugger and referring much easier, that's all. Just like how I usually post the commit hash URL to a file rather than master in issues
",chenglou,2016-01-26 06:25:12
218,2016-01-26 06:25:12,"You know what, meh =).
",chenglou,2016-01-26 06:25:12
217,2015-10-13 20:46:23,"Noticed that latest NPM package release (0.3.0) contains Sublime configuration files, which seems like got there accidentally. To prevent it further, it's better to ignore those files from adding to NPM package.
",operatino,2015-10-13 21:51:28
217,2015-10-13 21:51:26,"Damn it! I thought I made sure this didn't happen again...
Thanks!
",chenglou,2015-10-13 21:51:28
216,2015-10-13 18:08:19,,ludovicofischer,2015-10-13 18:10:48
216,2015-10-13 18:10:46,":+1: 
",chenglou,2015-10-13 18:10:48
215,2015-10-12 21:32:58," Most of the changes come from the `prefer-const` rule being enabled. I removed overrides when they just repeated the airbnb configuration. Now the indent rule fails on many files in the `demos` directory. Since the code in there does some funky stuff, I decided to ignore all the `Demo.jsx` files. 
",ludovicofischer,2015-10-17 01:18:33
215,2015-10-12 21:52:57,"Seems like a big chunk of this is for `let` -> `const` for which I left a message.
What are the funky stuff in Demo.jsx?` 
",chenglou,2015-10-17 01:18:33
215,2015-10-12 22:12:11,"ESLint does not understand the indentation in the Demo files with ternary operators on multiple lines and template strings. I give you the errors for reference:

<S_CODE_TOKEN>

It might even be an ESLint regression.
",ludovicofischer,2015-10-17 01:18:33
215,2015-10-12 22:15:38,"K I can fix them separately.
",chenglou,2015-10-17 01:18:33
215,2015-10-13 04:06:46,"> It might even be an ESLint regression.

It is just because new ESLint catches more errors. I had the same on my work projects. Those are legitimate warnings.
",nkbt,2015-10-17 01:18:33
215,2015-10-17 01:18:31,"Oops, this got updated... Merging!
",chenglou,2015-10-17 01:18:33
214,2015-10-12 03:09:43,"in `lib/react-motion.js`:

<S_CODE_TOKEN>
",nkbt,2015-10-12 03:26:14
214,2015-10-12 03:13:50,"Temporary fix that worked for me:

<S_CODE_TOKEN>
",nkbt,2015-10-12 03:26:14
214,2015-10-12 03:26:43,"Sorry, that was local modification.
",nkbt,2015-10-12 03:26:14
213,2015-10-11 14:37:28,"Hi!

I recently encountered a situation where I wanted to use React Motion to animate the scroll inside an element. The element is basically a large map with an element wrapped around it that exposes only a small part of the map, and lets you scroll/pan around to explore it. So, what I wanted to do was using React Motion to animate panning/scrolling back and forth between various set points. Here's how I ended up solving it (alot of code omitted):

<S_CODE_TOKEN>

So, basically, my question is: how do I do this better/smarter with React Motion? This _works_, but I'm sure I could do this in a smarter way, because it feels like I'm just hacking McGyver style here with returning an empty div.
Ideally, I'd like to be able to use this outside of the render function all together, and just feed a function a start/end value for both x and y, and have it animate that scroll without even touching the components state.

I should also note that this is literally one of the first things I've written with React Motion (I love it btw), so I appologize if I'm missing something obvious.

Thanks in advance for any help, and thanks for React Motion in general, I'm really excited about this!
",zth,2015-11-25 08:41:39
213,2015-10-11 19:04:48,"You should probably wrap the panElement logic into a declarative wrapper:

<S_CODE_TOKEN>

In `componentDidUpdate` of ElementPan, there you set the imperative `scrollLeft` to `this.props.scrollLeft`. From the outside it still looks declarative.

After that, you can move ElementPan into Motion.

Does that work?
",chenglou,2015-11-25 08:41:39
213,2015-10-11 21:17:11,"You may also try adding debounce to onScroll (like 50ms), keep values in state, and then use Motion to move things smoothly.
",nkbt,2015-11-25 08:41:39
213,2015-11-25 08:41:39,"This should work. Closing! If you have further questions, we're all on [Discord](https://discordapp.com/invite/0ZcbPKXt5bYzmcI0) so ask there =). Thanks!
",chenglou,2015-11-25 08:41:39
212,2015-10-10 14:53:46,"I'm seeing the following error logged occasionally:

<S_CODE_TOKEN>

After looking through the code, I don't see how this would happen. Is it possible for a component to call `componentWillUnmount` before it calls `componentDidMount`? I'd prefer to understand why this is happening, but we could guard against it by doing something like:

<S_CODE_TOKEN>

Or by making sure that `stopAnimation` is always defined as a noop. If you like one of these solutions, I'd be happy to submit a PR.
",lencioni,2016-01-26 06:05:45
212,2015-10-10 18:18:37,"No that shouldn't happen, you're right.
And I don't think we should guard it like that. Better get to the root of the problem, humm...
",chenglou,2016-01-26 06:05:45
212,2015-10-10 19:59:45,"Can you provide a small repro?
",chenglou,2016-01-26 06:05:45
212,2015-10-11 00:26:22,"I immediately have 2 suggestions, but we do need some more info on how to reproduce it.
1. If there is anything async then component could be unmounted before we get to run stopAnimation.
2. We lost context somewhere along the way and `this` is not the one we expect here.

Maybe something else, but I can't see for now.
",nkbt,2016-01-26 06:05:45
212,2015-10-12 14:21:01,"A small repro would be nice. I can look into that soon, but I believe I might have some difficulty consistently reproducing it. We are seeing this error logged in Sentry, which we use for error tracking, and it doesn't seem to be happening consistently.

I can see that it is happening on line 418 of components.js, which puts it in the `TransitionMotion` component. It could be happening for other components as well (we are only otherwise using `Motion`), but I'm not seeing it logged on other lines.

I also see the following logged from Safari, which I think is the same problem:

> TypeError: 'null' is not a function (evaluating 'this.stopAnimation()')

And this has been logged on the same line in an unknown Windows browser:

> TypeError: Object expected

I also don't recall seeing anything like this logged before upgrading to 0.3.0, so perhaps there is a clue there?
",lencioni,2016-01-26 06:05:45
212,2015-11-06 19:39:01,"I haven't been able to build a small repro yet, but here's the stack trace with some context in case that helps:

<S_CODE_TOKEN>

I'm guessing probably not, since it just shows the unmounting chain.
",lencioni,2016-01-26 06:05:45
212,2015-11-06 19:58:08,"what's `this`?
",chenglou,2016-01-26 06:05:45
212,2015-11-06 21:57:39,"Unfortunately, the stack trace I sent you is just in our logs which don't have that information. I haven't been able to reproduce this in my browser yet.
",lencioni,2016-01-26 06:05:45
212,2016-01-26 06:05:45,"The newest release 0.4.1 does away with `stopAnimation`. This shouldn't happen anymore. Sorry for the wait!
",chenglou,2016-01-26 06:05:45
211,2015-10-09 13:43:24,"Updating to ESLint 1.6.0 and `eslint-airbnb-config` 0.1.0 and executing `npm run lint` gives 169 errors. Some of it are variable names that are too short,  but some others should probably be fixed.
",ludovicofischer,2015-10-17 20:57:41
211,2015-10-10 13:31:20,"I think `too short` vars are ok and we just need to override that rule to `0`
",nkbt,2015-10-17 20:57:41
211,2015-10-17 20:57:41,"Fixed by #215 
",chenglou,2015-10-17 20:57:41
210,2015-10-09 12:30:21,,nkbt,2015-10-09 12:33:23
209,2015-10-09 02:43:15,"I was having a great deal of trouble understanding the API, so I've attempted to make the type signatures much clearer in the docs. I may have got some things wrong though. I originally stuck to the Haskell-esque syntax for the type signatures, but opted to switch to TypeScript syntax because it allows you to annotate the function parameters. I hope this helps!

[Rendered](https://github.com/bjz/react-motion/blob/d072fa928baf5a5955b9ae1bc182e111377ca791/README.md)
",brendanzab,2016-01-26 06:42:09
209,2015-10-09 03:40:34,"We are now moving to Flow code annotations, so it would make much more sense to use those for docs too instead of TypeScript

See #187 
",nkbt,2016-01-26 06:42:09
209,2015-10-09 03:41:34,"In general LGTM, TS-->Flow annotations should be a quick fix
",nkbt,2016-01-26 06:42:09
209,2015-10-09 03:55:16,"Oh cool, that is most excellent. Can you gnerate docs from Flow, like with typescript?
",brendanzab,2016-01-26 06:42:09
209,2015-10-09 03:56:09,"I'll amend with the Flow syntax, but it would be even better if they were auto-generated.
",brendanzab,2016-01-26 06:42:09
209,2015-10-09 03:58:08,"I don't think there was any intention to auto-generate docs from Flow. It does not really have any context similar to what JSDoc does (via comments).
",nkbt,2016-01-26 06:42:09
209,2015-10-09 04:03:17,"Ah, that's a shame. You can get very nice dos for TypeScript with little effort using generators like [TypeDoc](http://typedoc.io/), automatically generating hotlinked type signatures.
",brendanzab,2016-01-26 06:42:09
209,2015-10-09 04:14:10,"Wasn't much of a change to use flow-style annotations. Just meant I could use `?React.Component` as opposed to `(React.Component | void)`.
",brendanzab,2016-01-26 06:42:09
209,2015-10-09 12:35:18,":+1: LGTM, @chenglou there are some noticeable text changes, do they capture everything right?
",nkbt,2016-01-26 06:42:09
209,2015-10-13 07:33:20,"Any updates on this?
",brendanzab,2016-01-26 06:42:09
209,2015-10-13 17:45:00,"(Sorry catching up to like, everything... Will check more closely tonight)
",chenglou,2016-01-26 06:42:09
209,2015-10-14 05:32:55,"We're using Flow's type syntax. Also this is getting hard to read: 
![screenshot 2015-10-14 01 27 49](https://cloud.githubusercontent.com/assets/1909539/10475598/409352ae-7213-11e5-8dd2-64ac09f2a216.png)

The vague type annotations, where it's the case, are mostly intentional. I've debated long for/against this but ultimately went with a general type + a concise description. Formalizing things like this makes everything much more rigorous but actually decreases readability imo...
",chenglou,2016-01-26 06:42:09
209,2016-01-26 06:42:09,"Hey @bjz, this is really late, but hope you like the [new docs](https://github.com/chenglou/react-motion/blob/6a7a0f3f72610c6a7fdad2920b44e728ca6e172d/README.md#api)! =) 

Proper Flow type signature, with an exposed public types file.

Sorry that this took so long. To be fair, Flow wasn't (and is still a bit buggy sometimes) ready back then either. This PR has diverged too much so I'll close it. But thanks a lot for the initiative!
",chenglou,2016-01-26 06:42:09
209,2016-01-27 05:37:54,"No worries - it looks great now!
",brendanzab,2016-01-26 06:42:09
208,2015-10-08 21:21:27,"That domain might not exist forever
",chenglou,2015-10-09 12:33:24
208,2015-10-08 22:57:29,"As everything else in the world :thought_balloon: 

_sure_
",nkbt,2015-10-09 12:33:24
207,2015-10-08 21:20:39," Small typo, quick fix! :)
",adrianleb,2015-10-08 21:21:12
207,2015-10-08 21:21:09,"Thanks!
",chenglou,2015-10-08 21:21:12
206,2015-10-08 12:04:47,"Works ok for me. If in doubts, you can always run commands one-by-one manually...
### Expanded view:

<S_CODE_TOKEN>
### Example run

<S_CODE_TOKEN>
",nkbt,2015-10-11 19:05:43
206,2015-10-11 00:45:25,"Updated PR description for future reference
",nkbt,2015-10-11 19:05:43
206,2015-10-11 19:05:41,"Awesome description =)
",chenglou,2015-10-11 19:05:43
205,2015-10-08 11:42:31,"I added react to devDependencies so when you make clean install on dev you don't have to install react separately.

Tested all demos, no issues with react@0.14
",nkbt,2015-10-08 14:09:55
204,2015-10-08 10:28:24,,oliviertassinari,2015-10-08 11:28:50
204,2015-10-08 11:28:55,"Thanks!
",nkbt,2015-10-08 11:28:50
203,2015-10-07 22:05:00,"https://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html#compiler-optimizations
",chenglou,2016-01-31 04:08:02
203,2015-10-08 11:43:53,"#205 is also needed for this. I guess so
",nkbt,2016-01-31 04:08:02
203,2015-11-25 08:49:02,"cc @bsansouci too if you're ever bored and want to add this
",chenglou,2016-01-31 04:08:02
202,2015-10-07 18:09:43,"Hello, I try to implement simple motion. I have `<div>Some text</div>` I want to fade it to `opacity: 0`, change it's content to `Some another text` and then bring it back to `opacity: 1`. And... I'm failed =| It seems to be an to complex task for current Motions. Maybe I missed something?
",ALF-er,2015-11-25 08:39:09
202,2015-10-07 18:13:27,"It's not very straightforward to assign a callback when the animation completes. This will be implemented next. After that you should be fine, right?

Currently, you can check the interpolated style object to see whether it's reached a value
",chenglou,2015-11-25 08:39:09
202,2015-10-07 18:17:02,"Yeah, some hook will solve my problem. But I think is it declarative way? Anyway this decision up on you =) You do great job!

About

>  you can check the interpolated style object to see whether it's reached a value

Yes I can, but how I can run reverse opacity-motion when it's already completed?
",ALF-er,2015-11-25 08:39:09
202,2015-10-07 18:23:41,"Set a state, and use that state to set a new destination style value
",chenglou,2015-11-25 08:39:09
202,2015-10-07 18:25:49,"Set state from `render() {}` O.o I don't get arrested for that?
",ALF-er,2015-11-25 08:39:09
202,2015-10-07 18:27:37,"They'll detain you for a few days but I promise I'll pay the fees to get you out
",chenglou,2015-11-25 08:39:09
202,2015-10-07 18:29:37,"You the best! 

Thank you for advice =)
",ALF-er,2015-11-25 08:39:09
202,2015-10-07 19:03:25,"You know... I tried to do this.setState from render() and get

<S_CODE_TOKEN>

Maybe you mean something different?
",ALF-er,2015-11-25 08:39:09
202,2015-10-09 20:10:48,"Oops sorry, dumb mistake... Yeah that's not possible.
Right now you could use StaggerMotion with an array of a single style. You have access to the previous style array in the `styles` callback.
",chenglou,2015-11-25 08:39:09
202,2015-11-25 08:39:09,"Closing in favour of #224 =)
",chenglou,2015-11-25 08:39:09
201,2015-10-07 11:38:44,"No more pre-built demos! Development works as usual, hot reloading and things...

Bonus: fixed up demo6 so it does not have any extra assets that we can pull from node_modules. Similar thing with css should be done to other demos. And when all css is abstracted we can remove `index.html` too and generate it on-the-fly with `html-webpack-plugin` instead.
",nkbt,2015-10-07 12:09:31
201,2015-10-07 11:50:31,"Actually, http://chenglou.me/react-motion/demos/demo0-simple-transition is already available since I pushed `gh-pages` from current master. But it needs some changes there after this PR is merged in.
",nkbt,2015-10-07 12:09:31
201,2015-10-07 11:51:42,"Proper local testing is blocked by #198 and #200 (you can cherry-pick or copy-paste changes from there for testing)
",nkbt,2015-10-07 12:09:31
200,2015-10-07 11:26:03,"my bad =(
",nkbt,2015-10-07 12:01:07
199,2015-10-07 11:15:35,"A little cleanup, updated with some new files

NOTE: I allowed sources to be published on NPM. So it is possible to have react-motion as part of end-project build. With all sourcemaps and so on (simply by doing `import {spring} from 'react-motion/src/react-motion'` or better using webpack module alias instead)

![20151007-221146](https://cloud.githubusercontent.com/assets/175264/10335953/b2ba2ccc-6d40-11e5-831d-27203de6ddbd.png)
",nkbt,2015-10-08 14:08:47
199,2015-10-07 22:08:46,"We'll need to allow sources to be published one day, right? Since we're adding flow and flow users probably wanna require the source version.

(@threepointone will be happy too)
",chenglou,2015-10-08 14:08:47
199,2015-10-08 07:34:56,"I vote for that day to be today ;)
",nkbt,2015-10-08 14:08:47
199,2015-10-08 07:36:51,"And yes, flow is a perfect pro-argument here too.
",nkbt,2015-10-08 14:08:47
198,2015-10-07 10:12:57,"That was quite trivial fix
",nkbt,2015-10-07 11:58:31
197,2015-10-06 20:59:07,"After  #195 webpack build is not working correctly since it puts `all.js` into `demoX` folder.
Also all links in the README are going to be broken.

Ping @stevoland, @chenglou 
",nkbt,2015-10-07 11:58:32
197,2015-10-06 23:34:17,"Ahhh I remember now!...
What's the solution? Webpack's string templates are pretty limited
",chenglou,2015-10-07 11:58:32
197,2015-10-07 00:35:04,"Manually type in new folders in config and use proper placeholders in output. I could give it a shot today, unless @stevoland wants to fix it by himself.
",nkbt,2015-10-07 11:58:32
197,2015-10-07 00:40:29,"I am going to fix it alongside with #24
",nkbt,2015-10-07 11:58:32
197,2015-10-07 07:23:11,"Whoops, sorry. Let me know if you want me to fix.

Readme links point to a previous commit so don't need changing yet.
",stevoland,2015-10-07 11:58:32
197,2015-10-07 10:12:24,"yeah, README is ok for now.
",nkbt,2015-10-07 11:58:32
196,2015-10-06 19:26:56,"Is there a way to define the threshold for when a component should unmount when using the TransitionMotion component ? 

I assume the component unmounts when all animated properties have reached their target value.

It would be great is we can specify that the component should unmount when the target value is close to being finished.

For example: When animating from opacity 1 to 0 with a threshold of `10%`, the component could unmount as soon as the opacity reaches `0.1` , instead of going all the way to 0.
",Aaike,2015-11-25 08:28:26
196,2015-10-31 12:31:25,"I reckon that might be a #100 duplicate
",nkbt,2015-11-25 08:28:26
196,2015-11-24 11:45:50,"any news about this?
",0m15,2015-11-25 08:28:26
196,2015-11-25 08:28:26,"Yes. Going in soon. Closing in favour of #100 
",chenglou,2015-11-25 08:28:26
196,2015-11-25 13:39:28,"Thanks
",0m15,2015-11-25 08:28:26
195,2015-10-06 13:44:54,"To include description as per: https://github.com/chenglou/react-motion/issues/190
",stevoland,2015-10-06 20:41:04
195,2015-10-06 20:41:07,"Thanks!
",chenglou,2015-10-06 20:41:04
195,2015-10-06 21:00:04,"There is a problem with this renaming  #197
",nkbt,2015-10-06 20:41:04
194,2015-10-06 12:36:59,"We can adjust the way it looks in `prettyMatcher.js`. Now this matcher overrides `isEqual`, but it is trivial to override others if necessary

![20151006-231447](https://cloud.githubusercontent.com/assets/175264/10308540/13fb3036-6c82-11e5-9572-805eb9582824.png)

I had to remove `nyan` reporter, since it messes up output, I tried different settings, didn't help much.

I also tried other pretty-printing solutions:
- https://www.npmjs.com/package/karma-jasmine-diff-reporter
- https://www.npmjs.com/package/jasmine-json
- and some other random suggestions from SO, aso

Either way they were all broken or not good enough, so, you know, wrote my own, `¬Ø\_(„ÉÑ)_/¬Ø`

It supports circular objects too `\m/` because one never knows...
",nkbt,2015-10-06 23:34:40
194,2015-10-06 12:37:57,"There could be some conflicts with #193
",nkbt,2015-10-06 23:34:40
194,2015-10-06 20:40:34,"yeah can you rebase please?
",chenglou,2015-10-06 23:34:40
194,2015-10-06 20:48:05,"Sure. I may later update jasmine-diff-reporter so when it is released, most of this code might be removed.
",nkbt,2015-10-06 23:34:40
194,2015-10-06 20:54:55,"Rebased, fixed conflicts
",nkbt,2015-10-06 23:34:40
194,2015-10-06 23:34:38,"So what's the story with jasmine-diff-reporter? Will it support this?
",chenglou,2015-10-06 23:34:40
194,2015-10-07 00:32:03,"@chenglou there are some conceptual issues implementing it on reporter level. Author is working on that and I will help him as much I can. So potentially if it is working well, I'll file another PR, but meanwhile current solution works pretty well.
",nkbt,2015-10-06 23:34:40
193,2015-10-06 10:18:09,"Some minor changes to npm scripts and configs so they all fully run under Windows.

![20151006-211142](https://cloud.githubusercontent.com/assets/175264/10305994/ad1937e4-6c6f-11e5-83dc-1034d146e2ac.png)

![20151006-211158](https://cloud.githubusercontent.com/assets/175264/10305996/ad1ea378-6c6f-11e5-86cb-d30133510a77.png)

![20151006-211212](https://cloud.githubusercontent.com/assets/175264/10305995/ad1cf5dc-6c6f-11e5-90ee-0240eb7aec3f.png)

![20151006-211222](https://cloud.githubusercontent.com/assets/175264/10305997/ad20ef34-6c6f-11e5-955e-73c8864c48fb.png)

![20151006-211235](https://cloud.githubusercontent.com/assets/175264/10305993/ad167d10-6c6f-11e5-88ce-7253703172e0.png)

![20151006-211510](https://cloud.githubusercontent.com/assets/175264/10305998/ad254872-6c6f-11e5-8017-b044b7139e88.png)
",nkbt,2015-10-06 20:40:16
193,2015-10-06 20:40:14,":+1:
",chenglou,2015-10-06 20:40:16
192,2015-10-06 09:36:59,"As a new user to the library and the ""modern"" javascript ecosystem, now that we have a proper [`Map`](https://babeljs.io/docs/learn-es2015/#map-set-weak-map-weak-set) in ES2015 and babel, does it make sense to use that instead of using Objects throughout the API?

For instance, in `Motion` component, `defaultStyle`/`style` could return a Map and `children` would return `Map -> ?ReactElement`

Using an Object when you meant to use a Map in Javascript has always felt unclean to me but this is my personal preference.

I don't know much about this project. So I apologize if this has been considered and rejected or its a change not worth it.
",ducky427,2015-10-07 22:14:51
192,2015-10-07 22:14:51,"For a few reasons!
1. Object super optimized and comes with the whole ecosystem of function that manipulate/transform it (e,g. lodash, and some css-in-js libraries). Splat and destructuring work on it and those are some pretty important sugar, along with a visually clean literal to begin with.
2. I'd argue it's actually a Record, which maps to an object in JS, not a Map. Theoretically, your keys are finite and each field is type checked (relevant: https://github.com/chenglou/react-motion/pull/187#discussion_r41101959)
e.g. 

<S_CODE_TOKEN>

Motion informally dictates you to keep your record fields the same from one render to another.
TransitionMotion's `styles` is actually a Map<string, style>. But at this point it's probably more pragmatic to use object all the way through (again, destructuring, etc.)

Hope that answers your question? Closing, but feel free to reply more!
",chenglou,2015-10-07 22:14:51
192,2015-10-08 08:19:57,"Thanks a lot! All valid points.
",ducky427,2015-10-07 22:14:51
191,2015-10-06 08:55:55,"PhantomJS 1.9.8 (Windows 7 0.0.0): Executed 55 of 59 (4 FAILED) (skipped 2) (0 sPhantomJS 1.9.8 (Windows 7 0.0.0): Executed 56 of 59 (4 FAILED) (skipped 2) (0 sPhantomJS 1.9.8 (Windows 7 0.0.0): Executed 57 of 59 (4 FAILED) (skipped 2) (0 sPhantomJS 1.9.8 (Windows 7 0.0.0): Executed 57 of 59 (4 FAILED) (skipped 2) (0.118 secs / 0.333 secs)

npm ERR! Windows_NT 6.1.7601
npm ERR! argv ""D:\nodejs\node.exe"" ""D:\nodejs\node_modules\npm\bin\npm-cli.js"" ""run"" ""karma""
npm ERR! node v4.0.0
npm ERR! npm  v2.14.2
npm ERR! code ELIFECYCLE
npm ERR! react-motion@0.3.0 karma: `set NODE_ENV=development && karma start ./karma.conf.js`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the react-motion@0.3.0 karma script 'set NODE_ENV=development && karma start ./karma.conf.js'.
npm ERR! This is most likely a problem with the react-motion package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     set NODE_ENV=development && karma start ./karma.conf.js
npm ERR! You can get their info via:
npm ERR!     npm owner ls react-motion
npm ERR! There is likely additional logging output above.
",zanjs,2015-10-06 20:40:17
191,2015-10-06 09:47:08,"I don't think we ever tested build/tests on Win. Though I can have a look at is since I do dev on both osx and win.
",nkbt,2015-10-06 20:40:17
191,2015-10-06 12:09:49,"See #193, that definitely fixes tests. Issue was with `NODE_ENV` not being equal to `""development""`.

I fixed all scripts (pretty minor fixes, tbh) and now it is possible to do development/testing on Windows too.
",nkbt,2015-10-06 20:40:17
190,2015-10-05 18:46:57,"Can you rename the demo directories to what each one is? It'd be great if you could label them by what they do so it's easier to tell the difference. I reference them a lot when I'm working and I usually have to cross-reference with the README.md. Small nitpick - thanks for the great library.
",jclyons,2015-10-06 20:41:16
190,2015-10-06 20:41:16,"Been on my mind for a while too. Done!
",chenglou,2015-10-06 20:41:16
189,2015-10-04 18:52:43,"With 0.2.7, I could animate an array of values like this: spring([100,300,500,600]);  The use case is for animating a set of points for an svg polygon path.

What's the best way to go about doing this with the new API?  Thanks!
",adrienhobbs,2015-11-16 18:28:59
189,2015-10-04 18:57:57,"Right, currently it's a temporary regression. You'll have to animate each value individually. The rationale is that supporting animation nested collections had a huge cost (confusions with `val` and all).

The good part is, animating an array like is mostly for what you're trying to achieve: SVG path. I was thinking of either:
1. Exposing a (mandatory) helper similar to `spring`, e.g. `springSVG([1,2,3], myConfig)`, or
2. Make some properties special, e.g. `height` will animate differently (round to integer), `transform` can take a array `{transform: [spring(10), spring(10), spring(20)]}`, svg path (what's the property? ...) can take an array.

Advantage of 2 is that it's more convenient and declarative. Disadvantage would be it's platform-dependent.
",chenglou,2015-11-16 18:28:59
189,2015-10-04 19:10:17,"Got it.  Number 1 sounds like a good solution, especially if that seems to be the most common use-case.  For transforms and such, ES6's string interpolation has made animating transforms rather quick and easy, but I definitely see the advantages of having a more versatile way of animating specific properties.
",adrienhobbs,2015-11-16 18:28:59
189,2015-10-31 12:36:23,"@adrienhobbs you can animate a single value and recalculate all others accordingly.

<S_CODE_TOKEN>
",nkbt,2015-11-16 18:28:59
189,2015-11-16 14:50:35,"For what it's worth, @nkbt solution works perfectly for my needs and has the added bonus of not adding any bloat to the library. It's beautifully simple.
",crossman,2015-11-16 18:28:59
189,2015-11-16 20:30:41,"@crossman :ok_hand: 
",nkbt,2015-11-16 18:28:59
189,2016-08-24 19:18:39,"@nkbt  really brillant idea. But one question: how do u handle transit consistence? Like from one array to another one rather than from 0 to anther ? 
",kuanslove,2015-11-16 18:28:59
189,2016-08-24 21:41:12,"@kuanslove I am not sure what you mean, can you give some code example?
",nkbt,2015-11-16 18:28:59
189,2016-08-24 21:50:15,"@nkbt  One example is to build a component which contains a `<path d="""" />`, this component has prop called `data` which accept a data array(which can be converted to path data), and when I switch to another data array, this component can interpolate between two arrays and draw the line with transition animation effect, could you show me a example of what I described?
",kuanslove,2015-11-16 18:28:59
189,2016-08-26 02:38:43,"@kuanslove I was talking more about some code example, I can kind of understand what you want, but do not have much time writing full example myself. Please, share some code and I would be able to help you with more concrete formula!

So far I cannot see the ptoblem why it does not work for your case

<S_CODE_TOKEN>

It is up to you how you do your proportional calculations in `calculatePath(value)`, considering that `value` is being smoothly changed from `0` to `1`. Pure math from here
",nkbt,2015-11-16 18:28:59
188,2015-10-04 15:59:58,"I read the changelog and it looks like there are no changes impacting the end user.
",ludovicofischer,2015-10-04 18:47:20
188,2015-10-04 18:47:18,"Thanks!
",chenglou,2015-10-04 18:47:20
187,2015-10-04 14:16:17,"As @chenglou suggested in #180 , here‚Äôs a pull request with flow checks added to just a subset of the project files. I am only checking files where Flow recognizes all language constructs. Since Flow already merged the fixes related to `const` destructuring and `export default`, it seems pointless to change the project coding style, only to go back when the next Flow version releases.

Among the project dependencies, I ignored some files because we hit https://github.com/facebook/fbjs/issues/44 with React 0.14.0-rc1; I also ignored a dummy `package.json` file used to test npmconf because flow mistakes it for the real deal.
",ludovicofischer,2015-10-09 20:08:31
187,2015-10-04 18:41:38,"Awesome!
",chenglou,2015-10-09 20:08:31
187,2015-10-05 21:06:29,"Humm, I guess it's all set?
",chenglou,2015-10-09 20:08:31
187,2015-10-08 14:10:33,"So I guess this is good to go? Beside the nits =D
",chenglou,2015-10-09 20:08:31
187,2015-10-09 13:38:12,"I have fixed the indentation issue that @nkbt highlighted and created a Style type. Now that Flow 0.17 is out we can try to check the rest of the code base. Do you want to merge this one right now or do you prefer if I try to annotate more files first?
",ludovicofischer,2015-10-09 20:08:31
187,2015-10-09 13:39:09,"Interestingly, if you update to the latest ESLint and AirBnB style guides, the `lint` npm task reports 169 errors‚Ä¶ that Flow does not care about.
",ludovicofischer,2015-10-09 20:08:31
187,2015-10-09 14:04:33,"> Do you want to merge this one right now or do you prefer if I try to annotate more files first?
> We should merge this right now. I don't understand the lint errors though. Variable names too short? Since when?
",chenglou,2015-10-09 20:08:31
187,2015-10-09 14:13:19,"You get lint errors only if you change the `eslint-config-airbnb` to `0.1.0`, so it‚Äôs not something to worry about now. I‚Äôve opened an issue to keep track of this: https://github.com/chenglou/react-motion/issues/211
",ludovicofischer,2015-10-09 20:08:31
187,2015-10-09 20:08:29,"Alright, merging! =D

Thanks a lot!
",chenglou,2015-10-09 20:08:31
187,2015-10-10 13:30:28,"Sorry for post-review, I somehow missed updates
",nkbt,2015-10-09 20:08:31
186,2015-10-04 14:09:27,"Hi,

<S_CODE_TOKEN>

What does translate to  in JSX pre-es6?
",fbm-static,2015-10-04 18:46:10
186,2015-10-04 18:46:10,"[Here's](http://babeljs.io/repl/#?experimental=false&evaluate=true&loose=false&spec=false&code=import%20%7BMotion%2C%20spring%7D%20from%20'react-motion'%3B%0A%2F%2F%20In%20your%20render...%0A%3CMotion%20defaultStyle%3D%7B%7Bx%3A%200%7D%7D%20style%3D%7B%7Bx%3A%20spring%2810%29%7D%7D%3E%0A%20%20%7Bvalue%20%3D%3E%20%3Cdiv%3E%7Bvalue.x%7D%3C%2Fdiv%3E%7D%0A%3C%2FMotion%3E) the literal transpiled version.

But in handwritten es5:

<S_CODE_TOKEN>

Hope that helps!
",chenglou,2015-10-04 18:46:10
185,2015-10-02 21:31:37,"It doesn't look like it's possible to change the amount of styles fed to a `StaggeredMotion` component.

I [modified the demo](https://github.com/twobit/react-motion/commit/231307594790c2d4ac1e90d6aa60f8ce655edb25) to grow the array of items when `enter` is clicked but `StaggeredMotion` is ignoring any additional items.
",twobit,2015-10-02 21:34:45
185,2015-10-02 21:33:51,"That's expected. Only TransitionMotion supports diffing.
",chenglou,2015-10-02 21:34:45
185,2015-10-02 21:34:16,"Ok great to know, thanks :)
",twobit,2015-10-02 21:34:45
185,2015-10-02 21:35:35,"Np. Closing this. But does it cause any inconvenience?
",chenglou,2015-10-02 21:34:45
185,2015-10-02 21:38:23,"No, I can easily convert to `TransitionMotion`
",twobit,2015-10-02 21:34:45
184,2015-10-02 15:16:38,"This will tell Travis CI how to test this project. This configuration
needs to be coupled with someone who has permissions on the GitHub repo
to enable the Travis CI webhook.

The nyan cat reporter didn't work very well in the Travis output, so I
decided to just use the default reporter for this integration.

[Closes #182]
",lencioni,2015-10-02 15:18:29
184,2015-10-02 15:32:03,"Works, thanks! =D
",chenglou,2015-10-02 15:18:29
184,2015-10-03 01:17:57,"Yeah, Nyan is not for CI =). BTW, I use and highly recommend CircleCI. Maybe not for this time, but as a side note.
",nkbt,2015-10-02 15:18:29
183,2015-10-02 14:14:59,"While fixing #180, I noticed that stripStyle() was untested, so I
decided to add a couple of basic tests here.
",lencioni,2015-10-02 14:21:07
183,2015-10-02 14:21:06,"Thanks again.
",chenglou,2015-10-02 14:21:07
182,2015-10-02 14:03:57,"For people submitting pull requests, it would be nice to have feedback on whether the tests still pass or not. Additionally, adding a build passing badge to the readme would be nice for consumers of react-motion.
",lencioni,2015-10-02 15:18:29
182,2015-10-02 14:38:04,"Up for grab!
",chenglou,2015-10-02 15:18:29
182,2015-10-02 14:57:57,"Working on it.
",lencioni,2015-10-02 15:18:29
181,2015-10-02 14:00:29,"I am upgrading from 0.2.7 to 0.3.0 and I ran into an error:

> Uncaught TypeError: Cannot read property 'config' of undefined

This happens when I am using a `TransitionMotion` with a style object
that has a key who's value is `undefined`, e.g.:

  {
    opacity: spring(0),
    extraText: undefined,
  }

To make react-motion easier to work with, I have added guards in a
number of places.

Fixes #180.
",lencioni,2015-10-02 14:12:55
181,2015-10-02 14:02:47,"These checks should be `x == null` to avoid catching 0
",chenglou,2015-10-02 14:12:55
181,2015-10-02 14:04:27,"That's a fair point. I'll update my PR shortly.
",lencioni,2015-10-02 14:12:55
181,2015-10-02 14:10:51,"New version is ready to go. After you merge I'll submit a new PR for the additional tests.
",lencioni,2015-10-02 14:12:55
181,2015-10-02 14:13:03,"Cool, done. Thanks!
",chenglou,2015-10-02 14:12:55
181,2015-10-02 14:14:13,"My pleasure.
",lencioni,2015-10-02 14:12:55
180,2015-10-02 13:25:22,"I am upgrading from 0.2.7 to 0.3.0 and I ran into an error:

> Uncaught TypeError: Cannot read property 'config' of undefined

This happens when I am using a `TransitionMotion` with a style object that has a key who's value is `undefined`, e.g.:

<S_CODE_TOKEN>

This is happening on https://github.com/chenglou/react-motion/blob/d478fe6ba1a5ba74ab364747f063e16fa8c3185f/src/updateTree.js#L38

I can side-step the issue by setting that value to something other than `undefined` or `null`, but it would be nice if I didn't have to. I believe this could be avoided by adding a couple of checks here and there, for example:

<S_CODE_TOKEN>

could be changed to

<S_CODE_TOKEN>
",lencioni,2015-10-02 14:12:55
180,2015-10-02 13:55:54,"Damn it, we need a type system...
@ludovicofischer if you want, feel free to submit small flow PRs gradually!
",chenglou,2015-10-02 14:12:55
180,2015-10-02 13:58:14,"Flow would be sweet. In the meantime, I'll submit a PR that addresses this issue.
",lencioni,2015-10-02 14:12:55
180,2015-10-02 13:58:46,"Oh it's fine, I'm working on it right now!
",chenglou,2015-10-02 14:12:55
180,2015-10-02 13:58:56,"I just need to write commit message. ;)
",lencioni,2015-10-02 14:12:55
179,2015-10-01 19:17:13,"Let's say you have a render function like this:

<S_CODE_TOKEN>

The intent is to have the component show instantaneously, but fade out.

If this component is passed `visible: false, true, false` quickly, then no animation will ever occur.

JSFiddle here:
http://jsfiddle.net/17hdch0w/
",BrennanRoberts,2016-01-26 06:05:07
179,2015-10-01 22:13:14,"Yeah that's the desired behaviour. The spring's initial value is the current value. When you quickly switch like that it attempts to go to 1 (e.g. 0.001), then quickly goes back to 0.

We don't allow overriding current value _yet_. If this is for the first render, use `defaultStyle`.
",chenglou,2016-01-26 06:05:07
179,2015-10-01 22:35:01,"Thanks for the quick response, @chenglou. Forgive me if I'm wrong, but based on your response, I think there's a chance you've misunderstood. In the example, we're attempting to skip straight to `1`; thus the omission of `spring()`.

If this truly is the desired behavior, would you agree that the docs are misleading when they say: 
""If a plain number is provided rather than a spring config, instead of giving an interpolated value in the children function param below, we'll jump straight to that number value.""

Thanks for your work on this library!
",BrennanRoberts,2016-01-26 06:05:07
179,2015-10-01 23:14:37,"Ah, that's a bug then. @bsansouci 
",chenglou,2016-01-26 06:05:07
179,2016-01-04 05:51:25,"Just a heads up, I've fixed this locally (finally...) but it was a chore. Combining the logic of spring and non-spring values for the same prop was tedious.

It works now, but I'm thinking more and more that the use-case doesn't justify it. Can you give me the concrete thing you're trying to do here? Maybe there's a better way of handling it.
",chenglou,2016-01-26 06:05:07
179,2016-01-05 01:27:22,"Sure. I've got a piece of modal ""pending"" UI that only lasts for a split-second, but that I'd like to be visible long enough to be read. Its `opacity` gets `spring(0)` when inactive and `1` when active, so that it jumps in and fades out.

I could do a near-instantaneous fade in using a spring in this case, but figured this would eventually bite others, as it contradicts the docs.
",BrennanRoberts,2016-01-26 06:05:07
179,2016-01-26 06:05:07,"Fixed in v0.4.1. Sorry for the wait!
",chenglou,2016-01-26 06:05:07
178,2015-10-01 01:53:02,"Hi,

So I am on the latest release,
    ""react-motion"": ""^0.3.0"",

However, no matter what I try I get undefined:

<S_CODE_TOKEN>

Not sure what's causing this.. any help appreciated!

Thanks
",HarrisRobin,2015-10-01 02:20:30
178,2015-10-01 02:20:30,"It works now. I believed that react-motion in my node_modules was still on 0.2.7.
",HarrisRobin,2015-10-01 02:20:30
177,2015-09-30 16:04:32,"I checked HMR, it works well. Since there is no minification, build is pretty quick (~6s initial one) with sourcemaps enabled.

<img width=""1122"" alt=""20151001-015952"" src=""https://cloud.githubusercontent.com/assets/175264/10198727/9ba312de-67e0-11e5-93bd-8a9ccf001e8b.png"">
",nkbt,2015-09-30 17:08:27
176,2015-09-30 15:39:12,"I extracted React from demos, so files are much much lighter and easier to debug

<img width=""593"" alt=""20151001-013724"" src=""https://cloud.githubusercontent.com/assets/175264/10197879/02704aa8-67dd-11e5-8454-9d2aec68e38f.png"">

Minified react is copied before build/start from node_modules. So it is always up-to-date.
",nkbt,2015-09-30 15:45:22
176,2015-09-30 15:39:59,"The only large demo is 6, since there are more large vendor modules used, I decided not to mess with them for now.
",nkbt,2015-09-30 15:45:22
176,2015-09-30 15:40:56,"demo 6 is useless right now, it's fine
",chenglou,2015-09-30 15:45:22
176,2015-09-30 15:45:13,"React is minified but https://github.com/nkbt/react-animation/blob/unminified-examples/demos/demo8/all.js#L756 isn't (I use the trick inside RM too)
This isn't a problem because I don't use it elsewhere, for now.
",chenglou,2015-09-30 15:45:22
175,2015-09-30 10:51:45,"Hi,

I'm using react motion as an embedded lib for making some POC/test (on codepen essentially).I'm importing the build/react-motion.js file which isn't containing the latest update of the API (Motions, spring...).

Is it possible to update the build on the Github repo? Ensuring an easy use of react motion with only one import?

Thanks a lot
",PBRT,2015-09-30 17:25:45
175,2015-09-30 13:13:38,"I literally pushed the new README this morning lol, you're caught between the readme update and the build/release. I'll do it soon.
",chenglou,2015-09-30 17:25:45
175,2015-09-30 13:49:24,":raised_hands: 
",iest,2015-09-30 17:25:45
175,2015-09-30 13:55:36,"I'm caught as well :curly_loop: waiting for the API update to be available from npm :)
",LoicUV,2015-09-30 17:25:45
175,2015-09-30 17:25:45,"Done!
",chenglou,2015-09-30 17:25:45
175,2015-10-01 08:51:54,":+1: 
",PBRT,2015-09-30 17:25:45
175,2015-10-01 08:54:13,"thanks :ok_hand: 
",LoicUV,2015-09-30 17:25:45
174,2015-09-29 13:01:48,"It was missing the change directory step.
It was trying to run `npm i` && `npm run dev` on parent directory.
",wyze,2015-09-29 14:08:42
174,2015-09-29 14:08:39,"Oops, thanks!
",chenglou,2015-09-29 14:08:42
173,2015-09-29 10:23:19,"Hi, when I tried to run `npm test`, it failed at first because the `jasmine-core` dependency was missing. Per karma-jasmine documentation (https://github.com/karma-runner/karma-jasmine) since 0.3.0 you need to add an explicit `jasmine-core` dependency since karma-jasmine does not pull it any more.
",ludovicofischer,2015-09-29 23:07:29
173,2015-09-29 14:08:11,"That's weird. Are you sure? I've removed node_modules and reinstalled and everything worked fine still.
",chenglou,2015-09-29 23:07:29
173,2015-09-29 17:11:30,"Hi, are you sure you don‚Äôt have a global jasmine install (maybe from the jasmine command line tool). I also started from empty `node_modules` (I had just cloned the repository) and the tests would not run because of the missing dependency.
",ludovicofischer,2015-09-29 23:07:29
173,2015-09-29 21:42:16,"jasmine core is needed, it was probably installed as peer-dep and now with npm@3 it is not.
",nkbt,2015-09-29 23:07:29
173,2015-09-29 23:07:23,"Ah. I'm still on npm 2. Thanks!
",chenglou,2015-09-29 23:07:29
172,2015-09-26 20:10:15,,chenglou,2015-11-25 08:29:24
172,2015-09-27 19:55:22,"Do you mean to just add Flow type annotations to the react-motion codebase or something more sophisticated?
",ludovicofischer,2015-11-25 08:29:24
172,2015-09-27 21:50:08,"Adding flow annotations, yes. Especially the trickier parts like passing Motion's `style` object around.
",chenglou,2015-11-25 08:29:24
172,2015-09-28 19:04:01,"I want to give Flow another chance, so I could see how it fares on this codebase. Is the codebase more or less stable?
",ludovicofischer,2015-11-25 08:29:24
172,2015-09-28 19:20:08,"Yes, but I will be in the process of moving some code around and rewriting some logic, which is exactly why I wanted this
",chenglou,2015-11-25 08:29:24
172,2015-09-28 19:20:28,"Why wasn't flow good enough for you?
",chenglou,2015-11-25 08:29:24
172,2015-09-28 19:47:06,"The first problem was that the flow server would crash because a project dependency included a malformed package.json. The error messages were cryptic and the last straw was that it did not support `let` and `const` at the time.
",ludovicofischer,2015-11-25 08:29:24
172,2015-09-28 19:48:27,"Well, RM doesn't have many dependencies and now that `let` and `const` are supported, we should be fine?
",chenglou,2015-11-25 08:29:24
172,2015-09-29 07:26:40,"Right off the bat, we‚Äôve hit this Flow bug https://github.com/facebook/flow/issues/830 with destructuring assignments with `const`, in `components.js` for example: 

<S_CODE_TOKEN>

 as well as https://github.com/facebook/flow/issues/828 in the animationLoop.js imports. We can either
1. change coding style
2. wait for the next Flow release.
",ludovicofischer,2015-11-25 08:29:24
172,2015-09-29 07:53:57,"Also flow does not accept this syntax in `animationLoop.js`, line 6:

<S_CODE_TOKEN>

I guess you‚Äôre overriding the defaults you set within the curly braces with the contents of `config`, but I can‚Äôt find a reference for this syntax either: where did you learn it?
",ludovicofischer,2015-11-25 08:29:24
172,2015-09-29 08:59:13,"Flow does not support computed propery keys either: https://github.com/facebook/flow/issues/252, which we use in `components.js`, line 373:

<S_CODE_TOKEN>
",ludovicofischer,2015-11-25 08:29:24
172,2015-09-29 10:11:28,"My work so far: https://github.com/ludovicofischer/react-motion/tree/flow
",ludovicofischer,2015-11-25 08:29:24
172,2015-09-29 14:29:46,"> I guess you‚Äôre overriding the defaults you set within the curly braces with the contents of config, but I can‚Äôt find a reference for this syntax either: where did you learn it?

It's just destructuring + default assignment

I guess we could rewrite the const bit.

For computed properties, at least `newClonedStyle[key] = enterStyle` works, right?
",chenglou,2015-11-25 08:29:24
172,2015-09-29 16:33:59,"Hey, found this issue through the link to facebook/flow#252. Wanted to add a few thoughts:
1. `const` destructuring support has landed in master
2. destructuring with defaults is definitely sorely missing, but I hope to get to it in the coming weeks
3. computed properties are tricker to grok statically, but would it satisfy your use case if the dynamic key was a single const binding? i.e., `key` in `{ [key]: value }` were declared as `const key = ""some string""`
",samwgoldman,2015-11-25 08:29:24
172,2015-09-29 17:16:24,"Wow, a flow committer! (thanks for your work on `const` and `let` BTW). 
Interestingly, I managed to replace a few of the problematic constructs and removed a lot of flow warnings, but now the tests do not pass any more because of an `undefined` property. There are some warnings about `null` and `undefined`, so let‚Äôs hope it is an error that flow _does_ catch.
",ludovicofischer,2015-11-25 08:29:24
172,2015-09-29 22:03:20,"Webstorm just landed EAP with basic Flow support. Looks like great timing http://blog.jetbrains.com/webstorm/2015/09/webstorm-11-eap-142-5255/
",nkbt,2015-11-25 08:29:24
172,2015-09-29 22:16:25,"I was half expecting some nullable stuff to get caught by Flow. Hopefully Flow's right!

@samwgoldman the `key` isn't a constant. It's passed as a parameter.
",chenglou,2015-11-25 08:29:24
172,2015-09-29 22:37:27,"If we're talking about an object-as-map types, e.g., `{ [key: any]: any }`, computed property keys should be straightforward, since Flow will not attempt to track the set of keys. Computed properties get complicated when we try to build an object type with a known set of keys, e.g., `{ foo: string, bar: number }`.

If you have an object-as-map scenario, using multiple statements to build up the object is the best workaround until we support this pattern in Flow.
",samwgoldman,2015-11-25 08:29:24
172,2015-09-29 22:59:23,"So `newClonedStyle[key] = enterStyle` right? That's fine then, thanks!
",chenglou,2015-11-25 08:29:24
172,2015-10-05 14:06:52,"@samwgoldman Are you planning a Flow release soon with the const destructuring fixes?
",ludovicofischer,2015-11-25 08:29:24
172,2015-10-13 00:18:36,"Now that Flow 0.17 has been released, we‚Äôre still hitting https://github.com/facebook/flow/issues/183 in `animationLoop.js`, also a Flow problem I did not find a previous report for https://github.com/facebook/flow/issues/940, in `react-motions.js`.
",ludovicofischer,2015-11-25 08:29:24
172,2015-11-25 08:29:23,"Good enough! We can gradually do the rest. Thanks again for the push @ludovicofischer! =)
",chenglou,2015-11-25 08:29:24
171,2015-09-26 05:19:18,"I am working on a project that heavily relies on react-motion, and wondering when the new <Motion> and spring() API would be release? A rough EST?
",ivzhao,2015-09-30 17:25:52
171,2015-09-30 17:25:52,"Done!
",chenglou,2015-09-30 17:25:52
170,2015-09-25 19:24:09,"It'd be awesome if the examples linked to from the `readme.md` were unminified so one could easily see how such examples were accomplished.
",bstro,2015-09-30 15:45:22
170,2015-09-25 19:30:16,"True. Though you should be checking the actual source in demos/

I'm a bit busy right now but this is a non-brainer. PR welcome!
",chenglou,2015-09-30 15:45:22
170,2015-09-25 19:32:53,"Eh, note that dev-specific paths (especially those in react) should be stripped for perf. Right now it's bundled within uglify. I don't know if you can take this step out of it or if there's a Babel plugin for just this  
",chenglou,2015-09-30 15:45:22
170,2015-09-30 14:41:36,"cc @nkbt @gaearon who probably knows something about this?
",chenglou,2015-09-30 15:45:22
170,2015-09-30 14:47:07,"It should be really simple to skip uglify (not sure why it was used in the first place)
",nkbt,2015-09-30 15:45:22
170,2015-09-30 14:51:42,"Give me 5 min =)
",nkbt,2015-09-30 15:45:22
169,2015-09-25 14:32:19,"Can you publish react-motion as a WebJar in org.webjars for simple inclusion in projects for JVM-based languages?
",jclyons,2015-09-25 14:36:33
169,2015-09-25 14:36:33,"Humm, frankly I have never heard of web jars before. I won't be supporting something I know I don't understand in the future, so I'll have to pass on this one, sorry.

That being said, it should be just a step in the build process (that I nonetheless am not familiar with) right? You're welcome to fork this and keep a built version for yourself =)

Sorry again!
",chenglou,2015-09-25 14:36:33
169,2015-09-25 15:30:37,"@jclyons What would it take to make publishing RM as a WebJar an optional, seamless one-command task?
",sgrove,2015-09-25 14:36:33
169,2015-09-25 17:39:40,"Typically people use Maven along with a pom.xml. So you'd have to add a pom.xml file to your directory root. It's worth looking at the WebJar repository for React itself:

https://github.com/webjars/react 

Then you'd use the Maven CLI to publish it to the WebJars repository (or another, possibly private repository.)

Another option would be to use sbt which is what I do since I'm more familiar with it than maven (I mostly work in Scala.). The sbt-web plugin for sbt mostly handles packaging the relevant assets in the correct path inside the jar artifact that gets created when you run 'sbt publish.'

I haven't explored creating WebJars with npm, and don't know if it is currently possible, but theoretically it should be possible, especially since there is a 'build-jar' module:  

https://www.npmjs.com/package/build-jar

Don't know about publishing with npm, though.
",jclyons,2015-09-25 14:36:33
169,2015-09-25 17:42:46,"The most relevant things to know are on this page:

http://www.webjars.org/contributing

It's pretty simple - the most important thing is that the assets are in the correct directory inside the WebJar: META-INF/resources/webjars/${name}/${version}. (A JAR is really just a zip with a .jar extension.)
",jclyons,2015-09-25 14:36:33
169,2015-09-26 00:42:33,"I believe this is something that should live in a separate repository/fork
",nkbt,2015-09-25 14:36:33
169,2015-09-26 00:43:10,"Oh, you said M-word here! :trollface: 
",nkbt,2015-09-25 14:36:33
169,2015-10-05 18:48:13,"Ok - since I seem to be using react-motion more and more I will perhaps be able to get to this someday soon.
",jclyons,2015-09-25 14:36:33
169,2015-10-05 21:00:40,"@jclyons :+1: 
",nkbt,2015-09-25 14:36:33
169,2015-10-14 18:46:24,"Here is a repository for the webjar: http://github.com/jaroop/react-motion-webjar 

The repository has yet to be cloned into the official webjars repository, though I have created an issue on the main webjar repository for it: https://github.com/webjars/webjars/issues/1230

For now, if people need a webjar they can clone the above repository, and run `mvn install` to package the webjar and install it into your local maven2 repository (usually in ~/.m2) . If you are using Scala or another JVM language besides Java you will probably have to make sure it can resolve the local Maven2 repository in order to add it as a dependency. For example, in sbt:

<S_CODE_TOKEN>

 The line for an sbt build configuration in a ScalaJS-enabled project would be:

<S_CODE_TOKEN>

where react-with-addons.js is included this way:

<S_CODE_TOKEN>

I'm also writing a bridge between ScalaJS React <=> React-Motion so that this component can be used in ScalaJS React projects.

Update: 

It was just accepted into the WebJars repository: https://github.com/webjars/react-motion
",jclyons,2015-09-25 14:36:33
169,2015-10-14 21:09:37,"Thank you!

> I'm also writing a bridge between ScalaJS React <=> React-Motion

This is pretty awesome!
",nkbt,2015-09-25 14:36:33
168,2015-09-25 13:13:32,"I have a use case where I need the animation to replay on rerender. Does react-motion support such thing?
The way I see it is that a Spring will hold on to the current `value`, and then spring to the new `value`, whereas I wish to replay from `defaultValue` to `endValue` again.
",nlhkh,2015-11-25 08:30:41
168,2015-09-25 13:14:55,"Not currently, since the starting position of your animation is the currently interpolated position (a good default of course).
I might expose hooks to override the current position in the future.
",chenglou,2015-11-25 08:30:41
168,2015-09-25 13:15:52,"Sounds like a good plan :+1: 
",nlhkh,2015-11-25 08:30:41
168,2015-09-27 05:59:05,"Hi, I assume this will also apply if we want to implement a looping animation, such as a loading spinner?
",rayshan,2015-11-25 08:30:41
168,2015-09-27 06:19:30,"Yeah. Though the rotational loading spinner isn't a spring.
",chenglou,2015-11-25 08:30:41
168,2015-09-27 06:22:28,"Just for fun, if you project the motion of an object on a circular path at constant speed on a diameter, that motion is of a spring. 
",nlhkh,2015-11-25 08:30:41
168,2015-09-27 06:25:24,"Isn't that just a regular sine/cosine wave? It approximates a spring of a certain configuration (and vice-versa) but isn't really one?
",chenglou,2015-11-25 08:30:41
168,2015-09-27 06:33:31,"I don't remember, but I will look it up when I have a chance. I think it represents the spring in perfect condition (swing forever). Of course in real life there will be damping effect, which you can also simulate by having the magnitude of the oscillation varies over time.
",nlhkh,2015-11-25 08:30:41
168,2015-11-25 08:30:41,"Closing this for now as it's low-pri and RM is a transition library, not an animation sequencing library. But if the API allows, we'll create something that caters to sequence/replay in the future.
",chenglou,2015-11-25 08:30:41
167,2015-09-24 16:34:58,"I have an opacity transition from 0 to 1 when I am adding an item and from 1 to 0 on item removing.

When having transition from 0 to 1, a few last animation frames are trembling near 1 (0.9981, 0.9991 and so on), which is completely unnoticeable.

The other way around has issues. When animating from 1 to 0, a few last animation frames are also trembling near 0, but it takes something like third of animation time, so I see a blank placeholder for a some time.

Is there any way I can specify a stepping precision for a TransitionSpring? 
",azproduction,2015-09-24 17:33:47
167,2015-09-24 17:33:47,"The stepping precision will be configured for you in the next next release. We'll recognize opacity and round it to the correct number of decimals (2 in this case). Closing this in favour of #100! =)
",chenglou,2015-09-24 17:33:47
167,2015-09-24 17:42:56,"Thanks!
",azproduction,2015-09-24 17:33:47
166,2015-09-24 08:32:55,"The default `config` almost fit my needs but I need to change it a little bit.
",oliviertassinari,2015-09-24 14:03:17
166,2015-09-24 08:52:51,"[170, 26]. https://github.com/chenglou/react-motion/blob/master/src/presets.js
",threepointone,2015-09-24 14:03:17
166,2015-09-24 09:00:02,"Thanks, could be great to have it in the README.
",oliviertassinari,2015-09-24 14:03:17
166,2015-09-24 14:03:17,"It's there actually: https://github.com/chenglou/react-motion#presets
=)
",chenglou,2015-09-24 14:03:17
166,2015-09-24 14:07:43,"My bad. Thanks!
",oliviertassinari,2015-09-24 14:03:17
165,2015-09-22 20:57:17,"I'm getting an error when using the RouteTransition component found here:

https://gist.github.com/maisano/8faf4bd123fa9842f4ea

When trying to access a route (react-router) which is loading data from a server via MongoDB, updateTree doesn't seem to like Mongo's ObjectID BSON type for the _id that is auto generated.

Hopefully there is a fix for this, React Motion is the best animation library :)
",boyswan,2015-09-30 17:26:39
165,2015-09-22 21:14:30,"Thanks! You mean it recurses down that data structure when it shouldn't? In that case you should cancel the recursion down that tree through the spacial config `[]`. Do you know what I'm talking about?
",chenglou,2015-09-30 17:26:39
165,2015-09-22 21:21:49,"Afraid I'm not familiar with spacial configs! But preventing it from going down the data structure makes sense 
",boyswan,2015-09-30 17:26:39
165,2015-09-22 21:24:07,"You wrap whatever you don't want RM to traverse down with `{val: yourCollection, config: []}`. So in your case, it's possible that in the upper level there was a `{val: stuffThatContainsYourCollection, config: [120, 16]}`. Once RM sees `val` without a special `config` it'll recursively animate every number in the collection.

(This behaviour is powerful, convenient but very confusing. I'm getting rid of this in the next version.)
",chenglou,2015-09-30 17:26:39
165,2015-09-22 21:51:32,"I kind of understand-ish... ? haha

So in the RouteTransition gist, this.props.children is used in getEndValue via handler. 

<S_CODE_TOKEN>

Am I right in thinking thats what I need to prevent RM from traversing down?  It's a little tricky to wrap my head around!
",boyswan,2015-09-30 17:26:39
165,2015-09-22 22:06:15,"Oh I think I understand a bit more now, I wrap my collection with the val object in order to prevent it from being 'checked' when RM gets down to it. Is that correct?
",boyswan,2015-09-30 17:26:39
165,2015-09-22 22:30:49,"Yes. Example:
`{val: {a: 1, b: [1,2]}, config: [120, 16]}` <- this animates both `a` and the items inside `b`.
So when you have e.g. `{val: {a: 1, b: mongoCollection}, config: [120, 16]}`, it animates that whole thing ""accidentally"". To cancel it out you do: `{val: {a: 1, b: {val: mongoCollection, config: []}}, config: [120, 17]}`.
",chenglou,2015-09-30 17:26:39
165,2015-09-22 22:32:10,"Over time I've found that there's not much benefit in animation a whole collection for you. I'm removing that capacity in the next version, and for the edge cases where you do actually want to animate a collection, there will be a clear, obvious API.
",chenglou,2015-09-30 17:26:39
165,2015-09-22 22:33:59,"Perfect, thanks for your help!  In the meantime i'll try to get it working, if not then i'll wait for the next version. Thanks again for RM :smile: 
",boyswan,2015-09-30 17:26:39
165,2015-09-30 17:26:39,"New API out! Should side-step your problem completely. If you have any more question on this, feel free to ask here or on Slack!
",chenglou,2015-09-30 17:26:39
164,2015-09-22 19:23:16,"Am I understanding correctly that `willEnter` should fire upon mount, and `willLeave` will begin firing upon unmount?

I'm testing `TransitionSpring`, and I cannot get either to fire. Here's a short snippet...

<S_CODE_TOKEN>

I'm debugging both the `willEnter` and `willLeave` functions, and neither get kicked off.
",kendagriff,2015-10-05 13:29:00
164,2015-09-22 19:24:52,"What does your `endValue()` look like? Don't forget that `willLeave` fires when the return value from `endValue()` is missing a key that previously existed in the previous `endValue()`. Same for `willEnter`.
",chenglou,2015-10-05 13:29:00
164,2015-09-22 19:28:35,"Ah, that must be it. I'll check that out stat. Thank you!!!
",kendagriff,2015-10-05 13:29:00
164,2015-09-22 19:29:39,"Which part of the README wasn't clear enough? I need to improve it.
",chenglou,2015-10-05 13:29:00
164,2015-09-22 19:52:11,"From my perspective ‚Äì having come from React's TransitionGroup ‚Äì it wasn't immediately clear to me that Spring was not also responsible for unmounting. After digging through Issues on the Github repo, I indirectly discovered that wasn't the case ‚Äì that the interpolations didn't simply work backwards (duh).

So, I turned to `TransitionSpring` assuming I'd find the answer. The docs dive right into an example (and a complicated one, at that) of how to use the component, but have little to say about _why_ or _what_ it's used for.

Other than that, it's a nicely done example with plenty of explanations on the handlers.
",kendagriff,2015-10-05 13:29:00
164,2015-09-22 19:53:43,"By complicated example, you mean the TodoMVC one?
",chenglou,2015-10-05 13:29:00
164,2015-09-22 20:08:47,"This part struck me as dense for a minimum viable TransitionSpring implementation. After reading it about six or seven times, it began coming together ;)

<S_CODE_TOKEN>

Thanks for opening up the docs to critique!
",kendagriff,2015-10-05 13:29:00
164,2015-10-03 21:35:09,"Hey, the API got a revamp. Can you check if the new docs are clearer now? I'll revamp the demo itself when I have the time.
",chenglou,2015-10-05 13:29:00
164,2015-10-05 13:29:00,"Yes, `TransitionMotion` is much clearer now!
",kendagriff,2015-10-05 13:29:00
163,2015-09-22 09:00:20,"why not caculate position using x = restX + maxX*sin(sqrt(k/m)+sqrt(k/m)? It only relate to t,you may not use a fixed frame time.
",jasonHzq,2015-09-23 03:15:25
163,2015-09-23 03:19:39,"Didn't have time to look at this. Why is this closed? (Also, we used some logic to make sure we loop the correct amount of times even with a fixed frame time)
",chenglou,2015-09-23 03:15:25
162,2015-09-20 13:18:21,"Testing a component that uses a Spring seems to result in Mocha (not cli but gulp-mocha) to hang / not exit correctly after running tests. I've had this before with other tests where there is a lingering callback -- like an open db connection etc. Is there anything in react-motion that would cause this? I'm using jsDom.
",alexcurtis,2015-09-20 15:34:41
162,2015-09-20 15:34:41,"Used Karma + Chrome instead of jsDom.
",alexcurtis,2015-09-20 15:34:41
161,2015-09-17 11:57:45,"I'm having a weird issue when using `TransitionSpring`, where any event handlers I setup, stop working (e.g. `onClick={this.whatEverFunction}`).

These are my components: https://gist.github.com/mrtnbroder/a21217cd9ddbae6fdfec

Notice that my `onClick={this.handleOverlayClick}` doesn't work, _UNLESS_ its transitioning(_!_), which is really weird. So lets say I trigger the modal, the transition kicks in and WHILE its transitioning, when I click on the overlay, the event fires. When the transition is over however, it stops working.

Any ideas?
",mrtnbroder,2015-11-25 08:31:09
161,2015-10-01 20:15:18,"I have possibly related problem: some components inside Spring do not re-render after .setState.
So component state is updated from an event handler but it does not trigger rendering.

Also ReactJS (0.13.3) complains about Motion:

> Warning: Don't set .props.children of the React component. Instead, specify the correct value when initially creating the element or use React.cloneElement to make a new element with updated props. The element was created by Spring.
> 
> Warning: Don't set .props.__om_init_state of the React component. Instead, specify the correct value when initially creating the element or use React.cloneElement to make a new element with updated props.
",PetrGlad,2015-11-25 08:31:09
161,2015-11-04 16:46:36,"Don't know if its the same, but on react 0.14 some handlers of mine only fire until the animation has finished + 1. This means the UI is unresponsive during the animation
",Eptis,2015-11-25 08:31:09
161,2015-11-06 05:31:56,"I have no problem with event handlers, they work pretty good while animating. I am pretty sure there is something to do with the program structure. 

See example at http://nkbt.github.io/react-collapse/example/

Or codepen http://codepen.io/nkbt/pen/MarzEg
",nkbt,2015-11-25 08:31:09
161,2015-11-06 10:39:41,"My bad, this can be closed. It was a problem with the z-index of the element, it was layed on top but was not visible.
",Eptis,2015-11-25 08:31:09
161,2015-11-25 08:31:09,":+1: 
",chenglou,2015-11-25 08:31:09
160,2015-09-16 03:16:44,"I copy the demo8 code, but he has a mistake.
Uncaught TypeError: Cannot read property 'scale' of undefined
![react-motion](https://cloud.githubusercontent.com/assets/12135227/9895644/6374a6c0-5c64-11e5-9fda-90a8b31028e7.png)
",APPLLEJN,2015-09-16 14:46:41
160,2015-09-16 03:42:01,"Hi, can you be more precise? With version of react-motion are you using? And which version of the demo code?
",chenglou,2015-09-16 14:46:41
160,2015-09-16 04:29:22,"the version is  0.2.7, is the defaultValue required? 
",APPLLEJN,2015-09-16 14:46:41
160,2015-09-16 05:55:46,"No it's not. Is it possible to see your code?
",chenglou,2015-09-16 14:46:41
160,2015-09-16 14:46:10,"thank you, I have fixed this bug...is my mistake
",APPLLEJN,2015-09-16 14:46:41
160,2015-09-16 14:46:41,":+1: 
",chenglou,2015-09-16 14:46:41
159,2015-09-15 19:34:07,"Hello
I've been trying to get started with React Motion. I'm having some issues though. I'm hoping someone in here can explain how to init react motion correctly.

I'm using webpack with babel-loader to compile my JS, and installed React and React Motion via npm. I've been trying with different init commands:

1)

<S_CODE_TOKEN>

2)

<S_CODE_TOKEN>

3)

<S_CODE_TOKEN>

All three methods declare React correctly, but Motion and spring remains ""undefined"", when trying to use og console.log them. I've tried with Spring instead of spring, but with same result.
I'm quite new to webpack and babel-loader, so my guess is, i'm mixing some syntax or other logic. However i've even tried copying init methods of some of your demos. Still same result.

I'm hoping that someone can guide me in the right direction?

Best regards
",rbsmidt,2015-09-15 19:41:43
159,2015-09-15 19:41:46,"Hey, the master's using an experimental API. I've put up a new REAME in the demos folder to clarify that. Thanks!
",chenglou,2015-09-15 19:41:43
159,2015-09-15 19:44:49,"Convenient link: https://github.com/chenglou/react-motion/tree/f53ec099dca159e23fc4ed1b656bb5555c166da1/demos

So tldr: you've probably installed 0.2.7 and are checking out github's demos
",chenglou,2015-09-15 19:41:43
159,2015-09-15 19:48:26,"Ahh that would explain! Thanks a lot for your fast reply. So just to be sure, v 0.2.7 is the latest stable release, and also the one exposed when running npm install react-motion, right?

Again thank you for assistance, i'm looking forward to get started with the lib!
",rbsmidt,2015-09-15 19:41:43
159,2015-09-15 20:01:31,"Yep =). You can check `node_modules/react-motion/package.json` to be sure.
",chenglou,2015-09-15 19:41:43
159,2015-09-30 15:44:33,"Hey, I'd love to make something similar to Demo 8 (the drag&drop list). What's the old equivalent of `scale: spring(1.1, springConfig)`?
",skosch,2015-09-15 19:41:43
159,2015-09-30 15:51:58,"New version is releasing in a couple of minutes actually.
https://github.com/chenglou/react-motion/wiki/v0.3.0-examples
",chenglou,2015-09-15 19:41:43
159,2015-09-30 15:52:32,"Sweeeet! :) 
",skosch,2015-09-15 19:41:43
159,2015-10-01 02:02:07,"(Released and forgot to ping, sry)
",chenglou,2015-09-15 19:41:43
159,2015-10-01 02:15:06,"No worries, I pulled it right away. It's working beautifully, and the example was very helpful. Thanks a ton!
",skosch,2015-09-15 19:41:43
158,2015-09-14 19:17:00,"Once it becomes extensible, we can bring the slowmo, [parameters chooser](https://cdn.rawgit.com/chenglou/react-motion/e8f42dcd9678a8cea8648a3cf4f994583a99e7f7/demos/demo5/index.html) and even onion skin into the devtools.
",chenglou,2016-04-19 22:44:10
158,2015-09-14 19:18:46,"Anywhere I can read on extensibility plans?
",gaearon,2016-04-19 22:44:10
158,2015-09-14 19:20:07,"Inside @jaredly's head maybe? =)
",chenglou,2016-04-19 22:44:10
158,2015-09-14 19:20:27,"That's what I thought!
",gaearon,2016-04-19 22:44:10
158,2015-09-15 15:23:00,"Haha sorry about that. I'll put a gist together w/ my plans. The [relay plugin PR](https://github.com/facebook/react-devtools/pull/200/files) makes some of the changes needed to have a reasonable plugin system.
My current plan is to have any plugins live inside the react-devtools repo, b/c co-versioning multiple chrome extensions sounds like a nightmare :(
",jaredly,2016-04-19 22:44:10
158,2016-04-19 22:44:10,"Man I wish I was paid to work on this. Closing for now. Will still keep this in mind!
",chenglou,2016-04-19 22:44:10
157,2015-09-14 15:14:19,"Repro: chat heads, don't move mouse. See that the heads don't animate to `250, 300` even though `defaultStyles` and `styles` are set.

Probably has something to do with the stop check (again...).

@bsansouci 
",chenglou,2016-01-26 06:04:48
157,2016-01-26 06:04:48,"Fixed in v0.4.1
",chenglou,2016-01-26 06:04:48
156,2015-09-14 02:58:01,"I attempted to refactor demo1 (chat heads) to use the new `<Motion />` component, but it looks like interpolating an array of values is no longer supported? Also, couldn't figure out how to get the previous interpolated value.
",aputinski,2015-09-14 14:53:17
156,2015-09-14 03:38:47,"That's actually what I'm doing next =). Hopefully you didn't miss the warning in the readme? I'll bold it to make sure people don't miss it.

Leaving this open until I finish the refactor!
",chenglou,2015-09-14 14:53:17
156,2015-09-14 04:53:38,"Thanks! Are you referring to using integers as the object keys? If so, I did in fact miss that part.
",aputinski,2015-09-14 14:53:17
156,2015-09-14 05:05:01,"Oh no (although I should highlight that part too...), just the warning that the repo's going through refactoring and I temporarily dropped support for the staggered springs that you wanted. I'm putting it back soon.
",chenglou,2015-09-14 14:53:17
156,2015-09-14 05:16:11,"To be more precise and for future reference: interpolating an array of styles, without accessing the previous value, won't be supported anymore. You can just create an array of `Motion` instead. Same thing.

Interpolating an array of styles, where each style depend on some other (thus requiring the access of previous style), is what I'm working on restoring right now.
",chenglou,2015-09-14 14:53:17
156,2015-09-14 06:22:12,"Update: it's back =).
",chenglou,2015-09-14 14:53:17
156,2015-09-14 14:29:33,"Thanks! Really appreciate it. This library is awesome.
",aputinski,2015-09-14 14:53:17
155,2015-09-13 21:43:54,"@nkbt 
Comparing a collection with another one is a bit tedious and looks like this currently:
![screenshot 2015-09-13 17 42 55](https://cloud.githubusercontent.com/assets/1909539/9839155/e0d2d402-5a3e-11e5-8ef8-9b812684dd36.png)
Ideally we'd have a visual diff of the collection. But I kinda don't want to lose the nyan cat (yeah really) lol, is there something we could do here?
",chenglou,2015-10-07 12:19:22
155,2015-09-13 22:14:02,"Yeah, I found it quite not fun for myself either recently but did not have a chance to look at the solution.
",nkbt,2015-10-07 12:19:22
155,2015-10-07 12:19:22,"Fixed by #194 
",nkbt,2015-10-07 12:19:22
154,2015-09-12 16:54:30,"Currently the `endValue` prop can be either an object or a function that is passed the `prevValue` and returns an object. Can `defaultValue` also have this feature? It'd be cleaner than using `setState` in my component lifecycle.
",akre54,2015-09-12 17:38:35
154,2015-09-12 17:38:35,"Unless I'm missing something, it doesn't make sense to have `defaultValue` as a function accepting `prevValue`, since there's no `prevValue`.
A bit of context: `defaultValue` used to not be there. To animate on mounting, you'd use the conditional check:

<S_CODE_TOKEN>

But this wasn't discoverable enough, and people made mistakes when they forget to do the null check, which is why I pulled out a `defaultValue` for clarity.

Back on topic: I'm not sure why you'd set your state then pass it to `defaultValue`. You should be able to compute whatever you need directly inside render.

(Closing but let's keep the discussion going.)
",chenglou,2015-09-12 17:38:35
154,2015-09-12 17:59:55,"Perhaps I'm misunderstanding prevValue then. My goal is to treat it like `componentWillUpdate` / `componentDidUpdate` operating on props. Is that the wrong way to think about this?
",akre54,2015-09-12 17:38:35
154,2015-09-12 18:01:12,"`defautValue` is only ever used at the very first render, akin to React's `defaultValue` for inputs. So it's likely not what you're imagining. What's your use-case?
",chenglou,2015-09-12 17:38:35
154,2015-09-12 18:13:42,"A line that animates when new data comes in.

http://bost.ocks.org/mike/path/

It looks like the new api for start and end value may be the right way to
go?

On Sat, Sep 12, 2015, 14:01 Cheng Lou notifications@github.com wrote:

> defautValue is only ever used at the very first render, akin to React's
> defaultValue for inputs. So it's likely not what you're imagining. What's
> your use-case?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/issues/154#issuecomment-139801210
> .
> 
> ## 

Adam K (mobile)
",akre54,2015-09-12 17:38:35
154,2015-09-12 18:15:01,"Does the shape of `endValue` changes?
",chenglou,2015-09-12 17:38:35
154,2015-09-12 18:15:36,"Shape stays the same.

On Sat, Sep 12, 2015, 14:15 Cheng Lou notifications@github.com wrote:

> Does the shape of endValue changes?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/issues/154#issuecomment-139806927
> .
> 
> ## 

Adam K (mobile)
",akre54,2015-09-12 17:38:35
153,2015-09-12 16:51:17,"I am trying to animate an SVG `path` element's `d` attribute using `d3.interpolate`. It looks like react-motion only supports numerical values at the moment, and it also looks like there isn't a way to set a custom interpolator function. Any plants to fix either of these?
",akre54,
153,2015-09-12 17:34:30,"Yep! The next next version will recognize special key names in your object, such as `height` and [insert your whatever path attribute here]. `height`, for example, will interpolate in the domain of integers since browsers round the number anyway. Got an API in mind for path?
",chenglou,
153,2015-09-12 17:44:10,"Awesome to hear! I was thinking more like an arbitrary value interpolator, so that as long as you return the values in a way your own code can use you'd be fine.

`<path>`'s [`d` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d) takes a string in the form ""M50,100..."", where the numbers are distinct values meant to be read separately. I'd like to be able to use `d3.interpolateString` to [interpolate each value piecewise](https://github.com/mbostock/d3/wiki/Transitions#d3_interpolateString). This could work similar for `12px` -> `24px` or other united strings.

Now either react-motion could [add its own interpolateString function](https://github.com/mbostock/d3/blob/v3.5.6/src/interpolate/string.js), or it could allow the interpolator to be overridden, but by default use interpolateNumber behind the scenes. My preference is towards the latter. 
",akre54,
153,2015-09-12 17:59:38,"cc @threepointone who's interested in this.
",chenglou,
153,2015-09-12 18:02:49,"I can try to whip something up on Monday if nobody gets to it before then.

Basically I'd like:

<S_CODE_TOKEN>
",akre54,
153,2015-09-14 16:08:48,"The tests on master appear to be broken, but would something like this work? 

<S_CODE_TOKEN>
",akre54,
153,2015-09-14 16:11:55,"(Tests on master should be passing btw, just checked)
",chenglou,
153,2015-09-14 16:14:38,"Ah ok, I just pulled down the latest. I'll add some tests then send a pull in a sec.

I'm having a hard time wrapping my head around the `val` and `currentStyles` parts of the API. Why not have transitions simply be generic interpolators capable of transitioning between arbitrary values?
",akre54,
153,2015-11-03 22:41:00,"@akre54 Did you manage to get custom interpolators working, or did you decide to go a different direction?
",ccblaisdell,
153,2015-11-10 09:57:30,"@akre54 as @ccblaisdell mention also keen to know if you found a solution.
",henriquea,
153,2015-11-10 13:36:18,"I started changing some things around and got into the weeds before just falling back to using d3 for child animations, which has some pretty severe drawbacks. 

We're still really interested in this (mostly for animating between reparented components), but I haven't had time in a while to look into it.
",akre54,
153,2015-11-10 13:48:29,"Thanks for the update @akre54 üëç
",henriquea,
153,2016-02-27 09:04:57,"You can use custom interpolators just fine with React Motion by treating styles _as arbitrary values_ (I'm not a fan of the term _styles_ because of this). For example: http://bl.ocks.org/herrstucki/27dc76b6f8411b4725bb. Of course it would be nice if RM would support them directly.

Also, interpolators should be specific to each style property. One interpolator per component wouldn't work. I could imagine two ways:

a) A map of interpolators:

<S_CODE_TOKEN>

b) or as part of the spring config:

<S_CODE_TOKEN>
",herrstucki,
153,2016-02-29 16:31:54,"I prefer the second way (that way it can be extracted into a wrapper function or composed).
",akre54,
153,2016-12-16 12:41:36,"Hi, any update about interpolating SVG path? Thanks a lot!",mrasoahaingo,
153,2017-03-07 00:35:54,"This would be great to have.  I think I would lean way more towards an `interpolate` key for spring options.

I would also wager that most people would love to be able to just drop in compatible interpolators as plugins at a higher level and have them work out of the box.  D3 has tons of interpolators available, we could honestly just make an i/o to utilize them.

As easy as it would be to provide the interpolator per spring config, it would be so much cooler if we were able to handle interpolators automagically. Imagine utilizing a similar algorithm as https://github.com/d3/d3-interpolate#interpolate, using d3 interpolate itself haha!

Thoughts?  This is a large weakness of React-Motion that is talked about most often.  If we could nail this, I think you could have a lot of people considering its usage in many other scenarios.",tannerlinsley,
153,2017-03-07 00:43:21,Am I right to assume that we would need to build a standardized interpolator interface to replace the operations located here: https://github.com/chenglou/react-motion/blob/master/src/Motion.js#L173?,tannerlinsley,
153,2017-03-07 19:10:51,"I was able to work up a prototype abstraction of `<Motion />` to work with d3-interpolators.  By no means is it optimized, but it's a pretty cool start.  It works by mapping non-numeric value changes to auto-incrementing integers, then it coerces those integers back to a percentage between the old and new value.  Then it applies the d3-interpolator of choice behind the scenes, defaulting to the standard auto interpolator.

I would love to get some feedback on this, as it seems like this could be a start to supporting non-numeric values.

Right now I'm using it to interpolate colors, paths, and strings in d3.

(Update to support interrupted updates)
<S_CODE_TOKEN>
![mar-07-2017 16-50-48](https://cloud.githubusercontent.com/assets/5580297/23683450/42d01d10-0356-11e7-97c3-14fe569ea523.gif)
",tannerlinsley,
153,2017-03-07 19:25:19,@tannerlinsley that looks amazing! @chenglou is that something you would accept as a start to a PR? This seems extremely powerful. I'm willing to help where I can üòÅ ,souporserious,
153,2017-03-07 23:45:02,"I've just updated my snippet above to support interrupted updates.  All this means is that it should function exactly like react motion does, it will always shift inertia towards the new value *from where the current value is* :)",tannerlinsley,
153,2017-03-14 08:33:51,"@chenglou, honestly it would be so nice to have access to the percentage from the last issued float to the destination float.  The wrapper above works pretty well for the simple `<Motion />` component, but quickly becomes unwieldy if the same concept is applied to `<TransitionMotion />`. There is so much duplicate tracking of values that it seems like a fair ask to include¬†in the core.  Really, anything that would expose more flexibility. Thoughts?",tannerlinsley,
153,2017-03-22 23:45:08,Sorry super busy right now. Leaving a comment here. Will check again next week.,chenglou,
153,2017-03-23 05:16:42,"I got really stuck working on adding interpolation to the TransitionMotion component via the wrapper before I had to dig deeper into the source. The architecture I needed to achieve this flexible interpolation took me on a journey that ended up porting as much of the animation cycle and physics stepper over to a new repo called [react-move](https://github.com/tannerlinsley/react-move).  Anyone interested can take a look at the source there.  It supports interpolating anything that d3 can handle, duration/easing motion, and staggering.  It does not yet support chain staggering (eg. the chat heads example) yet.  It also does not yet account fo velocity reversal for numbers, but should soon. @chenglou, we should chat very soon.",tannerlinsley,
152,2015-09-12 13:28:16,"To enable smooth usage of React 0.14 RC1 without NPM errors on install.
",danieldunderfelt,2015-09-12 17:39:25
152,2015-09-12 17:39:28,"Thanks!
",chenglou,2015-09-12 17:39:25
151,2015-09-11 11:49:59,"I have a TransitionSpring wrapping a list, whose elements get replaced using [redux](http://rackt.github.io/). I gave elements unique keys, and still elements only enter or leave to accommodate for a change in their numbers. That is, if there were two elements before, and now there are three, the third element will enter, but the other two will just get their contents replaced instead of the prior ones leaving and the new ones entering. This is important because I need the animation to trigger.
In chrome's inspector I can actually see the keys change (the `data-reactid` attribute in the contained `li` element) instead of the whole tag being replaced with a new one.
Also, I do get a 

> Warning: Each child in an array or iterator should have a unique ""key"" prop. Check the render method of TransitionSpring. See https://fb.me/react-warning-keys for more information.

in the console, which I don't understand, since I see the keys.

Below is the problematic render code.

<S_CODE_TOKEN>
",yotamDvir,2015-09-13 11:20:38
151,2015-09-12 06:23:05,"What does your `getEndValue` look like? Also, see here: https://github.com/chenglou/react-motion#little-extras. Don't use numbers as your keys.
",chenglou,2015-09-13 11:20:38
151,2015-09-12 08:47:00,"<S_CODE_TOKEN>

Also, I just use the `text` property for the id, which aren't numbers...
",yotamDvir,2015-09-13 11:20:38
151,2015-09-13 11:20:38,"Somehow works now. Since this post I've made a change in my app to ImmutableJS that broke some functionality, among which was changing all the element keys to `true`. After I fixed it so the id's are back to normal, the problem disappeared. Still don't know why it works though... Will update if I find out - for now I'm closing the issue.
Thanks!
",yotamDvir,2015-09-13 11:20:38
150,2015-09-10 00:10:27,"Hi!

I find the demos and their performance really promising so I'd really love to use react-motion in a project of mine, but I can't get my head around how to use it efficiently (if at all) :\

Here's my use case. I'd appreciate if you could guide me through what's behind `endValue`, `willEnter`, `willLeave` in relation to the life cycle of a component, how to think an animation with those and build it with Spring/TransitionSpring!

I have a text input. When the user enters some text, I open a panel just below the input with some search suggestions. I managed to use a `<Spring>` component to animate the apparition of the panel when a text is first entered.

What I don't get, is how I should use react-motion to animate the panel when it grows/shrinks/disappears depending on the suggestions (or absence of them) I have to present to the user?

To simplify, let's say my panel has three states: 
1. closed
2. opened with content (which is not simply a list of <li> elements)
3. opened with an error message

How can I have animated transitions (using a scaleY transform for instance) from any of these state to another one?
I can't figure out how I could use the key enters/key leaves system of the TransitionSpring...

Thanks for your help!
",olance,2015-11-25 08:27:19
150,2015-11-25 08:27:19,"Wow, this issue got completely skipped for some reason, so sorry!
To answer your question: the todo demo should help. The readme has been revamped since, too.

Closing this since this is old and I suspect you've moved on from it (sorry again for missing this issue). If not, please do check the new docs. If so, closing for now but feel free to reopen. Also, we're on [Discord](https://discordapp.com/invite/0ZcbPKXt5bYzmcI0) =)
",chenglou,2015-11-25 08:27:19
150,2015-11-25 08:38:07,"hey @chenglou thanks for replying :)
I have moved to other things indeed, but I'll be interested in learning to use react-motion anyway, so I'll have a look! Thanks!
",olance,2015-11-25 08:27:19
149,2015-09-09 03:51:36,"Hi,

Is there support for a callback after the animation is completed? Like the one provided in React-Native animation. https://facebook.github.io/react-native/docs/animations.html

Thanks!
",maicaiyao,2015-09-09 03:52:59
149,2015-09-09 03:52:59,"Not yet, merged into https://github.com/chenglou/react-motion/issues/139 =)
",chenglou,2015-09-09 03:52:59
148,2015-09-03 20:34:06,"I was working on a component that uses react-motion and noticed that it caused react to throw the setState warning when I went to a new route. I located the source of this issue in `src/components.js` in TransitionSpring's `animationRender` method. The Spring component sets `this.hasUnmounted` to `false` in `componentWillUnmount` but TransitionSpring does not. When `animationRender` checks `!this.hasUnmounted` it evaluates to true and the setState code is run causing react to throw the warning. So I added `this.hasUnmounted = true;` to `componentWillUnmount` in TransitionSpring. The warning is no longer thrown.
",wilfreddenton,2015-09-12 17:46:55
148,2015-09-04 04:56:24,"@bsansouci 
",chenglou,2015-09-12 17:46:55
148,2015-09-04 05:21:39,"Thanks! We had already fixed this but we might've overwritten that change. I think we can merge @chenglou. 
",bsansouci,2015-09-12 17:46:55
148,2015-09-06 23:18:56,"Did we ever add it for TS? A quick search though history says no. Anyway, @bsansouci can you add a test against this? I'll let you merge this before/after.
",chenglou,2015-09-12 17:46:55
148,2015-09-12 17:46:53,"Alright, merging this. @bsansouci I'll try to fix all the tests today so that you can test again this. Thanks @wilfreddenton!
",chenglou,2015-09-12 17:46:55
148,2015-09-12 20:31:51,"@chenglou no problem! Thanks for all the work you've put in on this project. It's really awesome.
",wilfreddenton,2015-09-12 17:46:55
147,2015-09-02 23:19:54,"Coming from [your example from react-tween-state](https://rawgit.com/chenglou/react-tween-state/master/examples/index.html): Could it be possible, that react-motion uses the ""Slightly smarter Destructive Transition"" by default? Is it possible to change this to the additive behaviour?

Thank you very much!
",amannn,2015-09-02 23:23:49
147,2015-09-02 23:23:49,"Nope. With a spring, you get the ""additive"" behavior for free. Actually, the additive behavior for normal easing curves is an escape hatch for those to model a spring, in the sense that you want a smooth curve where you wouldn't get one with an ordinary interrupted e.g. easein (see more explanation [here](http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/)). It also doesn't work on every curve, because math.

Try the demos in the readme and check the code: there's no setup for additive needed =).
",chenglou,2015-09-02 23:23:49
147,2015-09-03 09:59:30,"Your right, thanks for the explanation!

I experimented a bit with the first demo and found that the additive behaviour like in the react-tween-state demo is especially visible with lower dampings. E. g. a spring setup with `[10, 2]` shows a similar behaviour for the interruption (hower it overshoots quite heavily on the edges). So as you said, i guess that's just the way physics animation feels like and you don't see that deceleration in velocity when interrupting so often with most spring settings.
",amannn,2015-09-02 23:23:49
146,2015-09-02 08:18:17,"missing from #145 
",threepointone,2015-09-05 22:29:07
146,2015-09-02 08:21:35,"Does this work? Just tested locally and it still doesn't work.
",chenglou,2015-09-05 22:29:07
146,2015-09-02 09:13:34,"Works for me?
",threepointone,2015-09-05 22:29:07
146,2015-09-02 09:13:55,"What error are you still getting?
",threepointone,2015-09-05 22:29:07
146,2015-09-02 17:23:54,"Did you try a fresh npm install? I think it's eslint again

<S_CODE_TOKEN>
",chenglou,2015-09-05 22:29:07
146,2015-09-03 10:08:24,"working just fine with a fresh npm install 
",threepointone,2015-09-05 22:29:07
146,2015-09-05 22:29:05,"Humm that's weird. Switched to another laptop and now it works. Probably because of the artifacts of the `integration/` stuff which isn't tracked by this repo.
",chenglou,2015-09-05 22:29:07
145,2015-09-02 08:01:31,"fixes these lint errors, fixes #144 

<S_CODE_TOKEN>
",threepointone,2015-09-02 08:14:25
144,2015-09-02 07:37:13,"Haven't checked into it; we should make it work again.
",chenglou,2015-09-02 08:14:25
143,2015-09-01 21:44:08,,KyleAMathews,2015-09-02 22:42:52
143,2015-09-01 21:44:32,"Sorry, it should be ""unmount"".
",chenglou,2015-09-02 22:42:52
142,2015-09-01 07:22:29,"I'm still against hard-coded duration, and RM likely won't expose a spring where the user specifies one of `{stiffness, damping}`, and the spring gives the other, given a determined duration. The moment we do that, interruptible animation becomes unsolved again.

For the people who wanted to have a feel of how long a spring lasts, I've directed to https://cdn.rawgit.com/chenglou/react-motion/e8f42dcd9678a8cea8648a3cf4f994583a99e7f7/demos/demo5/index.html
There might be a potential counter-argument (though so far I haven't heard of it; but just in case...) that this is ""imprecise"". Except the duration is also most of the time very arbitrary and based on a ""feel"". At least here, it respects the laws of physics.

That being said, I might consider exposing a dev-time only util which accomplishes what I said in the first paragraph, or more (e.g. ""what's a faster spring that looks like this one?). A typical workflow would be to `console.log` the output of these... or integrate this into the new React devtools.

@threepointone 
",chenglou,2016-04-20 02:47:49
142,2015-10-28 02:18:50,"The demo is broken. It's impossible to set any reliable duration, since some easings seems to be broken. I really don't understant what you mean is wrong with animation duration. Duration is ok. 
",steida,2016-04-20 02:47:49
142,2015-10-28 02:20:16,"Seems to work fine from here. What's broken?
",chenglou,2016-04-20 02:47:49
142,2015-10-28 02:25:51,"I just set some dragger to low value, and first column is invisible a second is animating forever. Anyway, we need duration. There is nothing wrong with initial duration value.
",steida,2016-04-20 02:47:49
142,2015-10-28 02:28:54,"That's the intended behaviour of the demo. First column is invisible because it's wobbling too hard and second column too. You've probably hit a negative configuration. They're a few numbers smaller than whatever you're manipulating (likewise the following columns are a few numbers bigger than your current cell). There's no reason to hide the undefined behaviour when you set e.g. a negative damping.

Duration makes interruptible animation complicated.
",chenglou,2016-04-20 02:47:49
142,2015-10-28 02:31:14,"Why? It's just definition how long bare animation should play, and right implementation can hook on any step. 
",steida,2016-04-20 02:47:49
142,2015-10-28 02:31:43,"I am really missing point of something or idk.
",steida,2016-04-20 02:47:49
142,2015-10-28 02:33:09,"It's not about being able to hook into any step/frame. What do you do with an e.g. ease-out animation interrupted halfway? Given whatever info you currently have.
",chenglou,2016-04-20 02:47:49
142,2015-10-28 02:37:18,"Play the same animation backward.
So the same current time stamp, same easing, but opposite direction.
",steida,2016-04-20 02:47:49
142,2015-10-28 02:39:11,"It's interrupted because you want to go to a new destination. Are you saying you reverse the equation? That'll become an ease-in (sorta) and only works with ease-out in the case you're talking about.
",chenglou,2016-04-20 02:47:49
142,2015-12-27 17:32:51,"I can understand the argument, but it is still hard to estimate how `{stiffness, damping}` value would work for my own transition/animations. I think demo 5 can be much improved to visualize result if parameters can be customized with some UI provided.
",sairion,2016-04-20 02:47:49
142,2016-04-20 02:47:49,"Closing in favor of #265 (new feature coming)
",chenglou,2016-04-20 02:47:49
141,2015-08-31 04:15:34,"Tbh just want my name in this repo
",frederickfogerty,2015-08-31 04:38:16
141,2015-08-31 04:38:14,"lol
",chenglou,2015-08-31 04:38:16
141,2015-08-31 04:40:26,"![clczf7musaapc1e png_large](https://cloud.githubusercontent.com/assets/175264/9572175/34a09d72-4fee-11e5-8ff8-e2c0b398ae53.png)
",nkbt,2015-08-31 04:38:16
140,2015-08-31 01:30:20,"Is there anyway to have a timed animation? Stiffness and damping would be auto calculated based on distance / time. 
",alexreardon,2016-04-20 02:48:44
140,2015-08-31 01:33:12,"Not currently, since it's against the goal of interruptible animation. Might expose these in the future, I'll see. I'd rather people adjust the spring to achieve a good ""feel"" rather than putting a random number. Here's something that might help you find the parameters you want: https://cdn.rawgit.com/chenglou/react-motion/e8f42dcd9678a8cea8648a3cf4f994583a99e7f7/demos/demo5/index.html
",chenglou,2016-04-20 02:48:44
140,2015-08-31 02:17:58,"My current goal is to build a time lapse. I need to animate each step in full before going to the next step. Currently I am guessing based on spring and dampness; but the time for animation could be different as distances between start and finish positions can vary. Well at least that is my understanding
",alexreardon,2016-04-20 02:48:44
140,2015-08-31 02:19:01,"What kind of time lapse specifically? I'm actually planning to support sequential animation, so maybe checking the completion each time isn't even the best way to do it for you.
",chenglou,2016-04-20 02:48:44
140,2015-08-31 02:20:02,"Yep; time might not be the best way. Really I want to know when the previous animation finished: https://github.com/chenglou/react-motion/issues/139
",alexreardon,2016-04-20 02:48:44
140,2015-08-31 02:24:34,"Sequence it is then?

So there are two types of sequences here. One is pre-prop, where your prop goes to the next destination value when the current one finishes. The other is per-""set of props"", where you want all the props (each of which might have a different end time) to finish all before starting another set. Which one do you need?

@threepointone 
",chenglou,2016-04-20 02:48:44
140,2015-08-31 03:17:18,"Currently I have a control that sets the current state. I want to know when the animation finishes so that the control can tell the application that the state has changed (which would be animated to)
",alexreardon,2016-04-20 02:48:44
140,2015-08-31 03:19:41,"So I won't have a series of animations set up ready to go. Rather, I just need to know when the current animation is finished so I can update the application state. Similar outcome to chained animations though
",alexreardon,2016-04-20 02:48:44
140,2016-02-25 22:15:23,"I'm trying to figure out how to speed up animations for tests, and I'm not sure how to adjust the stiffness and damping to speed up the animation. If I have {stiffness: 300, damping: 50}, is there a simple formula I can do to make the same animation but 2x faster? I've tried arbitrarily increasing stiffness and/or damping, but I always end up with no perceptible difference, or making the animation overshoot its end horribly (and taking longer).
",AgentME,2016-04-20 02:48:44
140,2016-02-25 22:37:04,"@AgentME you can do this:

We use a requestAnimation polyfill for testing [raf](https://github.com/chrisdickinson/raf)
Raf uses set `timeout` in place of `window.requestAnimationFrame`

(Alternatively you could just replace `window.requestAnimationFrame` with `setTimeout`)

When testing you can use [sinon](https://github.com/sinonjs/sinon) to hyjack the window timers (see `sinon.useFakeTimers`). This will allow you to 'flush' the animation queue.

Example:

<S_CODE_TOKEN>
",alexreardon,2016-04-20 02:48:44
140,2016-02-25 22:39:29,"Thanks, though well really it's not just tests. I'm also still interested in knowing how to speed up an animation for an application. I have no idea how exactly I should change the numbers if I want to have the same animation style but faster. I've tried the guess-and-check method but haven't gotten anywhere good.
",AgentME,2016-04-20 02:48:44
140,2016-04-20 02:48:44,"Closing in favor of #265 (will release a new helper that allows you set the ""duration"" in a more intuitive way, even without the help of demo 5).
",chenglou,2016-04-20 02:48:44
139,2015-08-31 01:28:02,"Is there any way currently to determine when an animation is completely finished? 
",alexreardon,2015-11-25 08:21:38
139,2015-08-31 01:29:38,"Right now if you're using a non-wobbly spring, you can check for the current value passed to you by the children function. In other cases probably have the current velocity passed to you too.

I'm planning to expose such a boolean in the future.
",chenglou,2015-11-25 08:21:38
139,2015-08-31 01:38:37,"`willEnter` or `willLeave`?
",alexreardon,2015-11-25 08:21:38
139,2015-08-31 01:39:32,"Yep, check `currentSpeed`, passed at last in both callbacks.
",chenglou,2015-11-25 08:21:38
139,2015-08-31 05:20:01,"I am struggling to figure out how to use the callbacks to let my app know that the animation is finished. Would you mind posting a simple example?
",alexreardon,2015-11-25 08:21:38
139,2015-09-09 03:54:20,"As in, you can do a simple `if` check inside `willLeave` for the currentSpeed value. The structure of currentSpeed is similar to that of endValue you provided. You can console log it and check it.
It's a hacky though. I'll provide hooks in the future.
",chenglou,2015-11-25 08:21:38
139,2015-09-18 20:13:03,"@chenglou is willLeave available on a Spring? -- I couldn't see it in the source. Like you mentioned, it would be great to have a bool / callback to simplify this down.
",alexcurtis,2015-11-25 08:21:38
139,2015-09-23 22:31:30,"Nope, `willLeave` doesn't mean what you think it means in this case. There's no component leaving for  Spring.
",chenglou,2015-11-25 08:21:38
139,2015-10-22 16:24:27,"+1 for hooks.
",webyak,2015-11-25 08:21:38
139,2015-11-25 08:21:38,"Closing for #235. Will be implemented soon.
",chenglou,2015-11-25 08:21:38
138,2015-08-30 09:27:11,"In response to this issue https://github.com/chenglou/react-motion/issues/137
",souporserious,2015-08-30 19:17:56
138,2015-08-30 09:28:03,"You could use `defaultValue`
",chenglou,2015-08-30 19:17:56
138,2015-08-30 09:33:49,"Thought it would be easier like that. Want me to update it using `defaultValue`?
",souporserious,2015-08-30 19:17:56
138,2015-08-30 09:34:33,"Yeah please do. using `prevValue` with a null check isn't intuitive. Otherwise I wouldn't have exposed `defaultValue`
",chenglou,2015-08-30 19:17:56
138,2015-08-30 19:17:54,":+1:  thanks!
",chenglou,2015-08-30 19:17:56
138,2015-08-31 15:58:32,"@souporserious with this commit should demo3 now animate in the todo items when the page loads/component mounts? I cloned the repo and ran it locally to see how to get the functionality in my project, but it's not animating for me.
",wilfreddenton,2015-08-30 19:17:56
138,2015-09-01 05:41:30,"That's weird, it animates for me. Does your console say anything?
",chenglou,2015-08-30 19:17:56
138,2015-09-01 10:20:05,"Yeah works fine for me as well. You did `npm start` right?
",souporserious,2015-08-30 19:17:56
138,2015-09-01 13:29:31,"Doh! Idk why I thought the demos would come transpiled. It's working for me. Thanks. I'm curious though, is it possible to also have unmounting animations? Like if there was some boolean that mounted and unmounted the list view.
",wilfreddenton,2015-08-30 19:17:56
138,2015-09-01 17:22:27,"The demo actually does unmounting animation, when you filter through it or remove one
",chenglou,2015-08-30 19:17:56
138,2015-09-01 19:24:13,"Right, it handles the unmounting of the individual list items. I was wondering if it could handle the unmounting of the containing unordered list but I see now that it's a better idea to just remove the items instead of the whole view when I want the list to disappear. This way the mounting/unmounting is all handled by react-motion. Thanks @chenglou and @souporserious so much for taking the time to help me!
",wilfreddenton,2015-08-30 19:17:56
138,2015-09-01 19:31:14,"Right, there's no magic render-that-keeps-child. I've put this as a FAQ in the readme since it's not the first time I've encountered this question. Thanks!
",chenglou,2015-08-30 19:17:56
137,2015-08-29 14:23:12,"For example, in this [demo](https://cdn.rawgit.com/chenglou/react-motion/e8f42dcd9678a8cea8648a3cf4f994583a99e7f7/demos/demo3/index.html), is it possible to have the listview animate when it's mounted in the same way that searching ""asdf"" and then """" animates the view? This would be useful for when a listview is toggleable.
",wilfreddenton,2015-08-29 20:53:44
137,2015-08-29 20:00:04,"Total guess, but should be possible by starting with 0 items, and then adding them in after a setTimeout(fn, 0)?
",threepointone,2015-08-29 20:53:44
137,2015-08-29 20:28:47,"Yes, just provide a defaultValue and/or willEnter and then whatever you want your endValue to be. You can see a working example here: http://codepen.io/souporserious/pen/dde7064750f523bfa934da2d6e201af4?editors=001
",souporserious,2015-08-29 20:53:44
137,2015-08-29 20:53:44,"^ Yep!
",chenglou,2015-08-29 20:53:44
136,2015-08-27 16:16:58,"After having some difficulty with a dynamic list of items, I cloned the repo and edited Demo 8.

I changed `range(4)` to `range(8)` and I see the same behavior.

If you drag one of the items near the end of the list, it can only be moved to the 4th spot (not the 5th, 6th, 7th or 8th.)

Any ideas?

P.S. I would have asked in the Slack room, but I'm not sure if I need to be invited first. I just tried signing in with my existing account, but no luck.

Thanks!
",marclar,2015-08-28 06:10:33
136,2015-08-27 17:21:43,"Hey @marclar, you can sign up here http://www.reactiflux.com/ and find #react-motion in the channels list!
",johnamiahford,2015-08-28 06:10:33
136,2015-08-28 06:12:05,"Yeah the ""invite"" message is super misleading. It's nothing but a sign up page.

@marclar I've pushed a new commit that shows what you had to change: https://github.com/chenglou/react-motion/commit/4bde5cd03a2e03c299fe2d74d02b7410f6273470#diff-a5c97fa5065182ffc820c58359237cd5R60

It works now. Feel free to play around with it =). Thanks for pointing it out!
If you're wondering how this works then ask here or in Slack.
",chenglou,2015-08-28 06:10:33
135,2015-08-25 21:13:41,"I'm trying to copy [Demo 8](https://github.com/chenglou/react-motion/blob/master/demos/demo8/Demo.jsx), but my project uses coffeescript and cjsx.

I think it's close to working, but this bit in particular throws an error:

<S_CODE_TOKEN>

I'm not sure how `{items =>` functions; I'm not too familiar with ES6, but I get `items is not defined` when I run this code.

Any ideas? Thanks so much. Beautiful library, btw :)
",marclar,2015-08-25 21:24:29
135,2015-08-25 21:21:00,"That's the `children` prop which in this case accepts a callback. The ES5 version would be `<B>{function(items) {return ...}}</B>`. That syntax in CJSX should have worked?
",chenglou,2015-08-25 21:24:29
135,2015-08-25 21:24:28,"Thanks, @chenglou -- I think all I needed to do was to change

`{items =>`

to 

`{(items) =>`

I still don't have it working exactly like the demo, but now the page renders and it seems I can reorder things.

Thanks!
",marclar,2015-08-25 21:24:29
135,2015-08-25 21:25:38,"Ah that's right, CoffeeScript has mandatory parens for a single argument... Alright. We're all active on Slack so feel free to post questions there too.
",chenglou,2015-08-25 21:24:29
135,2015-08-25 21:27:23,"Cool -- thank you.
",marclar,2015-08-25 21:24:29
134,2015-08-20 18:00:09,"Hi,

First of all thanks for this great library.

as the first time using this library, the README did not help me to know how to get the Spring out of the library, it is not mentioned anywhere in the README and I think it is important as a ""Getting Started"".

The examples didn't help neither because they directly requires the Spring file (I think it should be better to extract the things from the library root).

So for now, maybe I'm wrong, but the only way to figure this out is to look at the library code.

Thanks
",gre,2015-08-21 21:48:37
134,2015-08-20 18:02:33,"It says before [this line](https://github.com/chenglou/react-motion/blob/56df77d44e490ed5d5fda678e445d6ee9f2cc3da/README.md#spring-) that the library exports `Spring`, among others.

That being said, I guess not everyone sees that. Can you remove the space between `{}`? I'll merge this after.
",chenglou,2015-08-21 21:48:37
134,2015-08-20 19:13:31,"done :)
I've used your neat library for a cool example I'm going to release soon, I'll show you ;)
",gre,2015-08-21 21:48:37
134,2015-08-21 21:48:35,"Thanks!
",chenglou,2015-08-21 21:48:37
133,2015-08-19 08:13:49,"(See ordinary spring API: #129)

One of the less mentioned but extremely powerful feature with springs is their dependency. In the old API, it looked like this:

`<Spring endValue={prevValue => ...}>{interpolated => ...}`

where `endValue` is a function that accepts the values of the previous tick. Once you get the ability to read the values from the previous tick, you also get to establish dependencies between springs, e.g. set up an array of springs, where the first one has defined end coordinates, and the second one's end coordinates is the current position of the first one, and the third one's end coordinates is the current position of the second one, etc.

This allows you to chain springs together and fulfills most of the use-cases of staggering animation, except without any hardcoded duration. The animation at the end looks natural because physics. Currently, only demo1 chat heads uses this technique. I'll code up some more examples; say, menu items flying in one after another: https://www.youtube.com/watch?v=lEiX6OTyDfk

The new API for the dependent spring is more or less the same and is consistent with #129 (again, names subject to change):

<S_CODE_TOKEN>

Note the difference: you pass down the config directly to the `ChildSpring` this time, without reading into it. This allows the `ChildSpring` to be optimized the same way the new ordinary `Spring` API would: skip render and go straight to manual DOM manipulation. `interpolatedConfigs` is a mutative collection (purely for perf of course, otherwise we'd have to re-render) of configs, each of which `ChildSpring` reads into to rAF internally.

Why `ChildSpring` instead of the same `Spring`? Because the `ChildSpring` is dumb and doesn't keep the interpolated value (the owner does); it just reads into the passed `config`. But maybe for convenience, we'll reuse `Spring` here and secretly pass a `_isControlledByOwner` flag to indicate to the `Spring` that it doesn't have to interpolate its own value.
",chenglou,2015-11-25 08:20:39
133,2015-11-25 08:20:37,"API's landed since a while now. Closing for now but will revisit in the future for reference purposes.
",chenglou,2015-11-25 08:20:39
132,2015-08-12 01:53:46,"Check `func.length`.
",chenglou,2016-01-02 09:07:24
132,2016-01-02 09:07:24,"Low pri, use types please!
",chenglou,2016-01-02 09:07:24
131,2015-08-11 18:22:50,"A know issue with [browserify-cdn](https://www.google.co.in/search?q=browserify+cdn+peerdependencies&oq=browserify+cdn+pee&aqs=chrome.0.69i59j69i57j69i60.5598j1j7&sourceid=chrome&es_sm=91&ie=UTF-8), is that it fails on peerDependencies. As such, it tries to bundle react, doesn't find it installed, and [bails with an error](https://wzrd.in/standalone/react-motion). This should fix that.
",threepointone,2015-08-11 18:24:08
130,2015-08-11 16:11:53,"Is there a way to use this with `react-router` to transition between components?

e.g. implement a page transition like http://www.semplicelabs.com/ with additional stagger on the menu items?
",codepunkt,
130,2015-08-11 17:05:00,"Something like this? https://gist.github.com/maisano/8faf4bd123fa9842f4ea
",chenglou,
130,2015-08-13 08:02:24,"I'm afraid i don't know how to use that.
Tried using it as a parent route component in `react-router@1.0.0-beta3`, didn't work too well.
",codepunkt,
130,2015-08-13 08:03:51,"@maisano care to help a bit here please?
",chenglou,
130,2015-08-13 08:14:23,"@gonsfx http://in-flux.github.io/component-router/example ?
",nkbt,
130,2015-08-13 15:18:45,"oof, i should really add some usage docs to that gist.

@gonsfx the `RouteTransition` component was written not to be a route component, but a wrapper for rendering children. e.g.:

<S_CODE_TOKEN>
",maisano,
130,2015-08-13 16:00:55,"Does that mean all children will animate in the same way? (can't have one child come in from the bottom, another from the right)
",cheapsteak,
130,2015-08-13 16:09:27,"in this implementation of `<RouteTransition>`, all children being added will animate the same. the same goes for children being removed. however, it would be pretty simple to do some path comparisons and pull from a series of preset transition values. you could also pass in the history action for a particular transition.
",maisano,
130,2015-08-14 06:13:09,"@chenglou Thanks for pointing me in the right direction
@maisano Thanks for your clarification - that works okay-ish but is a good starting point for further inquiry.

Followup questions:
- On initial load of the app, the component shown first is not transitioned in. How can i achieve that?
- The `RouteTransition` only transitions the immediate child - what if i'd like to transition multiple child elements in varying dom hierarchy depths differently - such as fading the body whilst transitioning `margin-top` on the header, `margin-bottom` on the footer and staggering transitions on the menu inside the header?
",codepunkt,
130,2015-10-05 20:12:27,"Would we able to see an example using the new api? Struggling to get my head around the changes!
",boyswan,
130,2015-10-09 19:44:11,"@boyswan not too familiar with the router. I'll defer to @maisano for this one
",chenglou,
130,2015-10-09 20:19:53,"@boyswan by new api i'm assuming you meant the new `react-motion` api. i just updated the gist to reflect those changes, though i haven't tested it. conceptually it's largely the same, though a prop's name changed and you no longer need to access the `val` key from the interpolated values.
",maisano,
130,2015-10-10 11:12:33,"Perfect, thanks for this!
",boyswan,
130,2015-10-14 02:35:21,"@maisano I seem to be having the same issue as@gonsfx where the initial route does not load...
",mattapperson,
130,2015-10-14 14:12:25,"@mattapperson the initial route doesn't load or doesn't transition? if it's the latter, i think you can get that by adding `defaultStyles`.
",maisano,
130,2015-10-14 14:25:08,"@maisano it was an issue with my styles. the absolute included in this component broke stuff
",mattapperson,
130,2015-10-14 14:53:58,"@mattapperson :+1: yea, that component is more of a demo than anything else.
",maisano,
130,2015-10-19 21:40:09,"Would the implementation change dramatically if @chenglou's example was modified to make the transition be a horizontal sliding animation instead of a fading one?
",rclai,
130,2015-11-09 14:49:41,"Hi @rclai,

Just replace the scale transfom in the render by `translateX(``${interpolated[key].x}%``)`.

And replace scale in both willEnter and willLeave methods by respectively `x: spring(-100)` and `x: spring(100)`.

That should work.
",griable,
130,2016-01-13 13:05:44,"Perhaps I'm missing something, but I'm having an issue with repeating willEnter and willLeave animations for routes. I'm assuming that because <TransitionMotion /> is retaining the keys of each route, when you visit pages the second time, the willLeave animation hook fires on willEnter. Any guidance on this would be greatly appreciated, thank you! I think this library is fantastic but this is probably the one issue keeping me from implementing it on a project. I know that I could use the route key from `react-router@2`, but I need to animate nested routes based on the path segment specifically, and it would be ideal if I could use that portion of the path.

<S_CODE_TOKEN>
",cdebotton,
130,2016-01-14 14:02:14,"@cdebotton it's hard to tell what's wrong from this‚Äìwhat's the usage look like?
",maisano,
130,2016-01-15 13:43:35,"@maisano, sure, the implementation looks like this:

<S_CODE_TOKEN>
",cdebotton,
130,2016-01-15 14:20:03,"Sorry for so many posts, but I've at least solved for when the problem happens. If I am transitioning between routes, and then click into another route, the leave animation doesn't fire on the route that is already on the DOM. I believe that this is because the key has not been removed yet from the styles configuration object.

When I wait for the transitions to complete, everything behaves as expected.

I know that I could add a counter, or a constantly changing key to the key, but that feels hacky to me.
",cdebotton,
130,2016-01-15 18:28:00,"i'm still a little unclear on what the problem you're having is, but based on animations repeating, i would guess it's because you're potentially clobbering the `pathKey` for multiple routes (e.g. you're passing in the same `pathKey` for matches at `""/foo/bar""` and `""/foo/baz""`). why split on slash and return the first element instead of the entire pathname?
",maisano,
130,2016-02-05 22:42:06,"How to get this to work with 0.4.\* ? TransitionMotion's api changed and I cannot get this example to work anymore :(
",abelovic,
130,2016-02-05 22:47:09,"@threepointone we should have one, authoritative answer on how to make RR work with RM. I myself haven't used RR so I can't answer. But this is a recurring question.

@abelovic the migration guide is [here](https://github.com/chenglou/react-motion/wiki). Maybe [this](https://github.com/chenglou/react-motion/wiki/v0.4.0-examples/_compare/b23bda218bfc5414d2bb70c954c7ed5250e16fa2...6b4990a7adb5a28a633797f2cebc29ff3a21e363) will help
",chenglou,
130,2016-02-06 05:21:16,"yes, we should have an example (indeed, we should also prep an example for their incoming v2 release). I'll start hacking on this today. 
",threepointone,
130,2016-02-09 16:38:47,"This implementation uses 0.4.2 and is used as a wrapper component which takes ‚Äì amongst other things ‚Äì Route components. 

This is just a simple example, and fades a single component in from 0.75 opacity.

Hope this helps someone.

<S_CODE_TOKEN>
",andrewgleave,
130,2016-02-11 13:57:29,"FYI, the newest example in the [Wiki Gallery](https://github.com/chenglou/react-motion/wiki/Gallery-of-third-party-React-Motion-demos) is a RM wrapper for RR.
",chenglou,
130,2016-02-12 11:20:06,"I also saw [this](https://twitter.com/nanoT1m/status/697607814978609152?lang=en) posted on twitter today: https://github.com/nanot1m/motions
",adamscybot,
130,2016-02-12 17:46:48,"@andrewgleave - thanks for this! I started doing something like this (except I used a slide transition) and it worked. After maisano released his wrapper I ended up changing to that because it is nicely abstracted

@maisano- Great wrapper!!! I only ran into one issue/improvement which I posted in your repo

Fade in/out:

Unfortunately this is one effect that doesn't look right. I have tried different stiffness/damping settings but when you transition it either moves so quick you don't notice the fade or one page starts to show through the other since it's opacity hasn't set zero yet. Ideally we would want the current route to fade out and once that is complete the new route fade in. I suspect you would need an animation end event to do this (which I believe isn't available yet)? Maybe there is another way to achieve this?

@chenglou - Obviously _incredible_ library but thanks for helping lead us to solutions on how to integrate with major third party components! Your demos are very cool but being able to use react-motion with react-router for example is a big deal. Developers finally have a well designed library to integrate advanced animations in real world apps :)

Expanding upon this concept further doing the following with react-motion would be awesome! 

https://www.google.com/design/spec/animation/meaningful-transitions.html

Although maybe this belongs in react-motion-ui-pack :)
",abelovic,
130,2016-02-29 18:24:30,"Just to note (noted it on the gist a couple of months back): this uses absolute positioning to work. If you don't have the routeTransition around the footer, it won't look correct visually as whatever you wrap the RouteTransition around will go below your footer.

Basically: don't expect to have a static header / footer, and do a fade transition on the content between the header and footer...
",reywright,
130,2017-01-09 10:18:24,Is there some way to avoid position:absolute ? Maybe we would be able to use some callback to fire when leaving finishes and run enter transition right after that?,maximusnikulin,
130,2017-01-14 15:17:38,"It's possible to make this work without position:absolute, but it not so reliable solution yet.
Maybe it will be usefull.
https://github.com/chenglou/react-motion/issues/419",maximusnikulin,
129,2015-08-11 08:35:25,"This only concerns animating a single spring for now. I need to prototype a bit more on the springs with dependencies (e.g. chat heads, where the destination of the second head is the current position of the first head) and TransitionSpring, but I think this new Spring is cool enough to stay even if the other solutions don't work out.
(props names are temporary. Not important right now)

`<Spring to={{top: 10, left: 20}}>Hi</Spring>`
That's your new basic spring. It renders to a `div` and transfers all the props. `to` is constrained to recognized CSS attributes (will provide injectable defaults for different platforms). Will intelligently _not_ interpolate non-interpolable/unrecognized attributes. A few major advantages:
- Does manual DOM manipulation under the hood and skips React's render (a-la Animated). Better perf and since this spring's a very common use-case, lots of potential perf boost here. Heck, screw all of this, let's just use Velocity.js or something under the hood =).
- Can interpolate from `height: auto;` by reaching into the DOM to set an initial value. #62
- Color interpolation (`color`, `backgroundColor`) comes for free without needing to expose a helper. Same for interpolating `""10%""` strings. #85
- Spring precision/error margin are implicitly configured; e.g. `left` will be rounded to integer and when the spring wobbling distance is around 1 px we'll stop right away because there's no point to keep going. #100. 
- Interpolating many springs: none of our business anymore. `map` through some random arrays and return your `Spring` with the desired configuration each time. This is not true for dependent springs. I'm still thinking of a clean API for that.
- No more vendor prefix, e.g. if you provide `transition`, we'll add `WebkitTransition` for you under the hood.

To configure the spring stiffness and damping:
`<Spring to={{top: config(10, 120, 17), left: 20}}>Hi</Spring>`
120 being stiffness and 17 being damping. Function params format subject to change depending on what's concise and clear. If every attribute has the same config, we could accept a `config` prop on the spring itself for convenience.
What the return value of `config(10, 120, 17)` is doesn't matter. You don't really read into the anyway. This also kills the special `config: []` to signal that you want to jump to the final value straight away. We could provide a clearer `stop(destValue)` instead. Again, name and signature subject to change.

An `initial` prop is exposed (equivalent of `defaultValue` right now).

As you can see, it's not _that_ much of a departure from the current basic Spring API: you were probably already using something similar. I'm having a bit of trouble figuring out how the perf that comes from skipping render will cooperate with dependent springs or TransitionSpring (seems like with a child-function you kind of have to re-render the wrapper every time), brainstorming welcome.
",chenglou,2015-11-25 08:20:14
129,2015-08-11 09:37:40,"top: config(10, 120, 17) looks a bit funny. Don't necessarily like the way it looks, and that the main value does gets thrown with the rest.

What about keeping the to={} always pure, and have an optional config={} that contains all the custom configs?

Something like config={{to: [120, 17] }}
",borisyankov,2015-11-25 08:20:14
129,2015-08-11 09:40:38,"It's still pure either way. And yes, I've thought about that. I'm not sure if it has a parallel with TransitionSpring (you can't provide an independent config since you don't know what the current set of keys are... there are ways around this though). I'll consider it.
",chenglou,2015-11-25 08:20:14
129,2015-08-11 09:41:41,"I meant pure in some 'new-edgy' way, not the functional programming meaning ;)
",borisyankov,2015-11-25 08:20:14
129,2015-08-11 13:25:00,"Everything seems quite reasonable as for me. I'd avoid additional function `config(x,y,z)` and just pass an array instead: `top: [10, 120, 17]`, which makes it somewhat similar to `.eslintrc`

So you have an option to do either `top: 10` or `top: [10, 120, 17]`

It is possible to configure other things in a similar fashion.
",nkbt,2015-11-25 08:20:14
129,2015-08-11 17:22:48,"I want to reserve `[10, 120, 17]` for chained animation (there, I've said it). So maybe something else instead?
",chenglou,2015-11-25 08:20:14
129,2015-08-12 08:35:56,"~~Here's the draft format for `transform`, which is probably what you'd use 50% of the time:
`<Spring to={transform: {translate3d: [10, 5, 0]}} />`
Feels much better than weird string concatenation/interpolation imo.
Alternatively:
`<Spring to={transformTranslate3d: [10, 5, 0]} />`
Doesn't exist as a css property, but hey for border and background and such, we got all the individual properties, so why not here too?~~

Edit: both of these formats won't work, as this is valid CSS:

<S_CODE_TOKEN>

So we should rather do something like this:

<S_CODE_TOKEN>

or:

<S_CODE_TOKEN>

where the functions are the helpers we expose.

Here's what they look like with a configuration:

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

or, with function:

<S_CODE_TOKEN>
",chenglou,2015-11-25 08:20:14
129,2015-08-12 09:10:39,"There's a slight problem with the new API. In the past, the event handlers could do this:

<S_CODE_TOKEN>

On click ,it'll call the handler and pass the currently interpolating value. Can't in this new model since you can't get hold of that very value.

Three solutions:
1. The primary case of this is for drag and drop. I use it in lots of demos. So we should just have better drag and drop. I haven't checked into react-dnd yet.
2. We proxy all the related events internally like so: `<div onClick={(...args) => this.props.onClick(...args, this.state.currentValue)}`, or on the Spring itself: `<Spring to={...} onClick={currValue => this.handleClick.bind(currValue)}`
3. For these cases, we still allow children function. We pass you the interpolated `to` and you can get hold of it, do something with it, then pass it along to your `div` (need to turn `transform` back into a string).

Supporting 3 means we won't be able to do the manual style setting perf optimization anymore. Back to raf + render.
",chenglou,2015-11-25 08:20:14
129,2015-08-12 09:15:43,"alternately, maybe you special case drag and drop? `<Div draggable={/* true or options object*/}/>` (inspiration from framer, really. might just be pragmatic enough, and actually achieve what the html5 draggable css spec set out to do))
",threepointone,2015-11-25 08:20:14
129,2015-08-12 09:41:29,"So you're going with option 1? In that case, we'd need to list all the common usages of getting hold of the interpolated value. I don't want to special case drag and drop then realize there this other usage I didn't think of, and then end up with either solution 2 or 3 anyways.

(Btw, just tested 2. Works)
",chenglou,2015-11-25 08:20:14
129,2015-08-12 09:45:24,"Just exploring/ giving options. But saying that the new api already looks like a special `<div/>`, and draggable has a spec of sorts. 

No 2. should happen in any case. :+1: No. 3 also should be doable as opt-in, really. 
",threepointone,2015-11-25 08:20:14
129,2015-08-14 00:50:53,"@chenglou What about controlling the precision on something that isn't pixel-based? For example, an opacity-based animation currently has that fall-off problem where react-motion takes forever to reach 0. The element is basically invisible, but it keeps animating anyway.

FWIW, awesome work though!!! This one tiny edge has been the only rough spot for me.
",jdeal,2015-11-25 08:20:14
129,2015-08-14 00:52:44,"That example of height with pixel is really just an example. Internally we'll check the property name and do the correct precision rounding. For opacity it's, say, 2 digits.
",chenglou,2015-11-25 08:20:14
129,2015-08-14 01:04:55,"Ah, cool, thanks!
",jdeal,2015-11-25 08:20:14
129,2015-08-14 09:52:31,"Looks like a very nice simple to use spring API.

May I suggest added support for choosing the element type instead of div inside the spring? Could be something like this for render():

<S_CODE_TOKEN>

And then you could optionally pass a factory like for example <Spring factory={React.DOM.tr}</Spring> if you want to say animate the background color of a tr on hover.

Custom element support would require an additional mechanism to get the ref of the actual element to animate.
",daniel-gustafsson,2015-11-25 08:20:14
129,2015-08-14 10:26:38,"I was afraid this'd come up. Yeah, it's additional API surface for not much return. `div` can substitute most element (sometimes with a bit of css) and beside e.g. tr background there's nothing much to animate for a tr anyway? I'll think about it.
",chenglou,2015-11-25 08:20:14
129,2015-08-14 10:40:55,"counter - `<Spring component={View}/>` will mean we can do react-native, -canvas, etc etc. 
",threepointone,2015-11-25 08:20:14
129,2015-08-14 12:01:52,"I of course respect if you think it is a bad idea.

I do like the power of the old spring and will miss it if it will go away entirely. Not sure if that is the intention? Maybe I should just wait and see how the new API ends up :)
",daniel-gustafsson,2015-11-25 08:20:14
129,2015-11-25 08:20:14,"API's landed since a while now. A few niceties e.g. transform shorthand might be implemented in the future. But for now we're good. Closing!
",chenglou,2015-11-25 08:20:14
128,2015-08-11 02:23:42,"Two different properties of two different elements are animated (the overlay and the modal itself)
",borisyankov,
128,2015-08-11 03:43:09,"Neat, thanks! But I'll hold off pulling this in for now. Revamping the API.
",chenglou,
128,2015-08-11 03:47:50,"@chenglou oh, again? ;)
",nkbt,
128,2015-08-11 03:48:07,"bleeding edge....
",nkbt,
128,2015-10-07 12:21:37,"@borisyankov I reckon API is done for now so you can rebase/update your example!
",nkbt,
128,2015-10-07 12:29:16,"I was thinking the same thing ;)
",borisyankov,
128,2015-10-07 12:30:18,"Wait, not yet! =P
I have a new (non-breaking) API coming up soon for the particular case of mounting and I mounting a single component. Forgot to write that down
",chenglou,
128,2015-10-07 12:32:39,"oops
",nkbt,
128,2015-10-07 12:36:31,"Ha ;)
@chenglou, when do you expect this to go in?
",borisyankov,
128,2015-10-07 12:37:43,"Will start working on it sometimes next week
",chenglou,
127,2015-08-07 21:25:59,"TransitionSpring should likely have the same fix for unmounting that Spring element has regarding state mutation.
",daniel-gustafsson,2015-08-09 07:29:52
127,2015-08-07 21:26:27,"@bsansouci 
",chenglou,2015-08-09 07:29:52
127,2015-08-08 00:06:16,"Good call! 
",bsansouci,2015-08-09 07:29:52
127,2015-08-09 07:29:55,"Everything works! Thanks a lot.
",bsansouci,2015-08-09 07:29:52
127,2015-08-13 10:34:36,"Thanks for accepting it!

I wonder though if I made a mistake with the pull request, because I can't seem to find the actual commit in this repository anywhere. It was my very first pull request so apologies if I got it wrong.
",daniel-gustafsson,2015-08-09 07:29:52
127,2015-08-13 18:08:45,"They're here alright: https://github.com/chenglou/react-motion/commit/30a780a2a4e5bb739c7c24191b268f675898c436 and https://github.com/chenglou/react-motion/commit/589ae9b3851442a165deb321a6039665a8e1672f =)
",chenglou,2015-08-09 07:29:52
126,2015-08-06 01:40:51,"Hey there :)

I‚Äôm the author of inject-loader. This PR gets react-motion off the master branch of inject-loader and onto a published version (2.0.1 to be precise), which now includes the code that necessitated using master in the past
",plasticine,2015-08-06 01:50:07
126,2015-08-06 01:50:02,"Woohoo! Thanks =)
",chenglou,2015-08-06 01:50:07
125,2015-08-05 21:41:22,"What is the recommended way to add a transition on first render with TransitionSpring?
",kristoferjoseph,2015-08-05 21:41:58
125,2015-08-05 21:41:58,"`defaultValue` does it =).
",chenglou,2015-08-05 21:41:58
125,2015-08-06 20:21:15,"nope. :(
",kristoferjoseph,2015-08-05 21:41:58
125,2015-08-06 20:47:40,"Works from here. Yu can post your code here or come to Slack Reactiflux #react-motion channel: https://reactiflux.slack.com/messages/react-motion/.
",chenglou,2015-08-05 21:41:58
124,2015-08-05 19:09:38,"Hi All, 

I want to be able to make an async call when a transition completes. 

Say for example when a react components completes the animation another component will take over the screen, but before then it will wait until the transition completes.

While I can inspect the interpolated value to reach 'endValue' and fire a call back on my own at that point, I was wondering if there is a cleaner way to do this. does the Spring component have any callbacks that I can bind to upon completing the transition?
",stephenotalora,2015-11-25 08:23:06
124,2015-08-05 19:11:19,"We don't currently expose a callback on transition end because we're afraid of abuses. What kind of async call is it in your situation? E.g. an ajax request?
",chenglou,2015-11-25 08:23:06
124,2015-08-05 19:20:59,"Thanks Cheng! I'll implement it on my end. 

but that's correct, I was thinking to make an ajax call. Say for example given the animation timeframe it has a beginning middle or end,  callbacks fire at each stage but I only register to one to make a call for the next batch of data.

Another example that came to mind could be as simple as synchronizing animations, say I have component A and component B, while component A is halfway its animation lifecycle component B starts animating (e.g. fading in etc...)
",stephenotalora,2015-11-25 08:23:06
124,2015-08-05 22:38:09,"For the first case, I'm still thinking about it. I don't think we'll be able to circumvent callbacks completely, but still thinking.

For the second case, you're talking about staggering/chained animation. Here's my default answer to it: https://github.com/chenglou/react-motion/blob/b1a7889c2a8b73a7456ccaf1973dd1b41d0fc64a/README.md#faq (first point). It's a bit opinionated right now but I do think it achieves better effect and with less hard-coded coordination. Think of it as ""component A's animation spring is dragging component B's animation"".

That being said, yes, chained animation is a real use-case, but often much less needed than people think. I will add some helpers in the future to make this possible (have some APIs in mind already), but as long as we're fine with the dependent springs in that link, chained animation is actually low-pri.
",chenglou,2015-11-25 08:23:06
124,2015-11-25 08:23:06,"Closing in favour of #235 =)
",chenglou,2015-11-25 08:23:06
124,2015-11-25 08:39:31,"Great thanks!
",stephenotalora,2015-11-25 08:23:06
123,2015-08-04 21:55:51,"This one was hard to track down. Say you have two springs one inside
the other, there's the `owner` and the `child`. They both mount, and
therefore call `startAnimation` which will register a `raf`.

The `child` steps first because it registered the `raf` callback first.
In the step it checks `noVelocity` and say in our case it's true, it'll
calls `stopAnimation`. `stopAnimation` will set `val.active = false`.
Then the `owner` steps.

We then loop through the `Spring`s, starting with the `child` and
render them. We render the `child` and check if `child.active` is true.
In our case it's not, so we don't push it in the array of future `raf`s.

We then render the `owner` which makes the `child` render and call
`startAnimation`. The call to `startAnimation` will set
`val.active = true`, but it's too late, we decided not to push that
Spring in the array of future `raf`s at the last tick of the loop.
That render is done we check the length of that array and see that it's
empty, so we stop.

The fix is to call all of the renders first, and then loop through
the `Spring`s and push in the future `raf`s array what needs to step.

This includes a test.
",bsansouci,2015-08-05 01:16:51
123,2015-08-05 01:15:55,"This is getting really heavy. I'll think about what to do with this. 
",chenglou,2015-08-05 01:16:51
122,2015-08-04 19:15:15,"via the directions on https://babeljs.io/docs/usage/browser/, copied `browser.min.js` from `babel-core` into `demos/demo6` and included it directly into the page (alternately, it could be concatenated with `all.js`, but this is simpler.) 
",threepointone,2015-08-04 19:15:53
122,2015-08-04 19:15:58,"¬Ø_(„ÉÑ)_/¬Ø 
",chenglou,2015-08-04 19:15:53
121,2015-08-04 17:13:56,"Here's a list of the added tests:
- parent kill child Spring
- TS unmount/mount correctly (and https://github.com/chenglou/react-motion/issues/77)
- init value + final value
- TS init value + final value
",bsansouci,2015-08-05 01:25:19
120,2015-08-04 13:39:00,"copied from rebound-js
",threepointone,
120,2015-08-04 19:16:52,"Are we allowed to do this? lol license
",chenglou,
120,2015-08-05 02:45:08,"there, added the license :) 
",threepointone,
120,2015-08-11 12:53:08,"Anything stopping this? Would love to use this ""officially""...
",iest,
120,2015-08-11 18:14:36,"The new API from #129 might make this obsolete. We'll automatically transition between colors. So holding this off for now.
",chenglou,
120,2015-08-12 11:19:37,":+1: 

Look forward to the new API!
",iest,
120,2016-12-03 22:35:14,"@threepointone I know this is super old, but I found someone that made a utility to help with this so I think this can be closed if you want https://github.com/germtb/color-interpolator",souporserious,
119,2015-08-04 05:27:38,"Seems like this bug was introduced [here](https://github.com/chenglou/react-motion/commit/ff5399b2cb9ba8127d6b6b4cce5d8a5c8a3f90eb).
We calculate the `frameNumber` next frames, but never update
`prevNextState` which is the state passed to `step`. So we just
calculate the same frame over and over again.

Added test to prevent this next time.
",bsansouci,2015-08-04 05:49:49
118,2015-08-04 02:52:41,"We [mutate](https://github.com/chenglou/react-motion/blob/84985fd8bc0f10d4477bbfbf5bf779dfa3be85f9/src/components.js#L48-L50) `currValue[key]` when a new element enters the scene. This could be
reflected in user land. If you push `currValue` in an array inside the
child-as-function in the `TransitionSpring`, then you'd see that element get
mutated when a new element entered the scene.
",bsansouci,2015-08-04 06:35:20
117,2015-08-04 02:09:45,"This will prevent the animationLoop to get ""out of sync"". Because the
accumulated time, and the decision to ""flush"" a frame is based off
whether the accumulated time is > 16.66666ms and we used to increment
""time"" by only 16ms, things would get a little out of sync. This would
break the consistency of the values in the tests.
",bsansouci,2015-08-04 02:10:29
116,2015-08-03 21:55:16,"See http://semver.npmjs.com/

I think it might also work for rc, but I am not sure.
",ludovicofischer,2015-08-04 05:03:50
116,2015-08-04 02:30:33,"Does this work? I believe you have to explicitly mark out each beta/rc version; not sure ^ will work. Happy if I'm wrong :)
",threepointone,2015-08-04 05:03:50
116,2015-08-04 02:54:31,"ok, semver.npmjs seems to claim it will. looks good!
",threepointone,2015-08-04 05:03:50
116,2015-08-04 05:03:52,"the more you know...
",chenglou,2015-08-04 05:03:50
115,2015-08-03 21:48:35,"The title says it all.

I also adapted the tests to use that mock `raf`. The main advantages of using a mock `raf` is that the tests become synchronous, making them much easier to reason about. They also make the whole system deterministic. This means that when we call `mockRaf.step()` 10 times with the same Spring (and same constants),  `currValue` will always take the same values in the same order.

There are two main functions that can be used:
- `mockRaf.step(ms = 16)` - will step ""time"" by one frame and by `ms` amount of milliseconds. This will call all `raf`s that were registered in the last frame.
- `mockRaf.manySteps(numberOfSteps = 1)` - will call `mockRaf.step` `numberOfSteps` times

The two other functions are the mock functions. They can be used like follow:

<S_CODE_TOKEN>
",bsansouci,2015-08-03 23:10:36
115,2015-08-03 23:10:40,"This is great
",chenglou,2015-08-03 23:10:36
114,2015-08-03 15:38:30,"Hey there,

I'm trying to understand how react-motion deals with objects and sorted keys and was hitting a bit of a roadblock. It seems react-motion depends on some combination of Babel's use of the spread operator and loose mode. Unfortunately I can't seem to maintain the expected sort order.

Here's a somewhat contrived example:

https://babeljs.io/repl/#?experimental=true&evaluate=true&loose=true&spec=false&code=let%20vals%20%3D%20{%2213%22%3A%20true%2C%20%2225%22%3A%20true}%3B%0A%0Aconst%20stiffnessAndDamping%20%3D%20[100%20%2C10]%3B%0A%0Alet%20userId%20%3D%20%2212%22%3B%0A%0A%20%20vals%20%3D%20{%0A%20%20%20%20%20%20...vals%2C%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20[userId]%3A%20{%0A%20%20%20%20%20%20%20%20%20%20height%3A%20{%20val%3A%2070%2C%20config%3A%20stiffnessAndDamping%20}%2C%0A%20%20%20%20%20%20%20%20%20%20opacity%3A%20{%20val%3A%201%2C%20config%3A%20stiffnessAndDamping%20}%2C%0A%20%20%20%20%20%20%20%20%20%20padding%3A%20{%20val%3A%2010%2C%20config%3A%20stiffnessAndDamping%20}%0A%20%20%20%20%20%20}%0A%20%20}%3B%0A%20%20%0A%20%20console.log%28vals%29%3B%0A%20%20console.log%28Object.keys%28vals%29%29%3B%0A

Based on how items are added to the object, I expect the '12' key to show up last but that doesn't seem to be the case.

I imagine I'm missing something pretty straightforward, let me know if this might be something better suited for Babel's issues. 

Thanks!
",balanceiskey,2015-08-03 16:49:02
114,2015-08-03 16:11:47,"Hey @balanceiskey! Looking at the [specs](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys) `integer` props are in ascending order but `String` props are in creation order. You can just append a letter at the front of your number and it works.
",bsansouci,2015-08-03 16:49:02
114,2015-08-03 16:32:07,"WAT. You are totally right and this is absolutely terrifying. Maybe worth noting in the docs, not sure?
",balanceiskey,2015-08-03 16:49:02
114,2015-08-03 16:48:37,"Pretty terrifying for JS, yes. Here's a good answer: http://stackoverflow.com/a/30244410/960178
Fortunately yes, you can just add a letter to your key and it'll be guaranteed creation order. React itself relies on this externally and internally, e.g. http://facebook.github.io/react/docs/create-fragment.html

Sorry for not documenting this! I'll do it now. I had the impression I've put it somewhere. Thanks for reminding.
",chenglou,2015-08-03 16:49:02
113,2015-08-02 16:31:02,"Hello,

Would it be possible to document the differences between the easing + duration and the stiffness + damping models? Is there a roughly equivalent setting to the common easing curves?
",AlexGalays,2016-04-20 02:50:36
113,2015-08-02 20:37:16,"The brief version is [here](https://github.com/chenglou/react-motion/blob/f774ae5c0a099b40229ce09754e2128fb2f5ca3f/README.md#what-does-this-library-try-to-solve). To make picking your spring constants more intuitively I've made [this](https://cdn.rawgit.com/chenglou/react-motion/c3c5403b6821b7a8954e3c379057ae7d9bbc39d5/demos/demo5/index.html). #68 also talks about it.

I'm leaving this issue open because it's a good idea to write a fuller description in the upcoming doc site =).
",chenglou,2016-04-20 02:50:36
113,2016-04-20 02:50:36,"This issue has been open for a while now. I think by now https://github.com/chenglou/react-motion/tree/089adea6d7d1b6fc6acf450eb63917f735980dc1#what-does-this-library-try-to-solve makes it clear enough why a spring is desirable. I have less time to work on an actual doc site now but the problem is comparatively small enough for me to close this issue. 

Thanks for filing it; I'll still keep this in mind. #302
",chenglou,2016-04-20 02:50:36
112,2015-08-02 05:57:44,"This will allow something like:

<S_CODE_TOKEN>

We're overloading `endValue` and stepping away from the consistency we had before with `val` and `config`. But this use case seems common enough, and explicit enough, that react-motion could handle it. There is very little confusion as to whether the `Spring` will or not interpolate the _only_ thing it's given.
",bsansouci,2015-08-02 06:56:29
112,2015-08-02 06:56:34,"Awesome.
",chenglou,2015-08-02 06:56:29
111,2015-08-02 05:03:39,"expose animationStep (but somehow privately?) so you can port this to other frameworks (deku comes to mind)
",threepointone,2016-01-26 06:43:45
111,2015-08-02 05:05:56,"This clashes with #108 which I might prioritize. `animationLoop` retains some values that we might need access to in the future. I'm sure we can still pull out big parts of this in the future, but right now I'm more concerned with enabling the rest of the APIs we're thinking about (e.g. exposing `currVelocity`) before doing the modularization.
",chenglou,2016-01-26 06:43:45
111,2016-01-26 06:43:42,"What animationStep?

=)

Thanks a lot for the PR btw. The current status is that I've rolled back the animation loop into the respective components, as I've found out that there's actually not that much to be abstracted from them. We've previously done this but this has just caused a few more layers of indirections and perf cost without the benefit of abstracting away as much code as we've hoped.

But we should try this again some day!
",chenglou,2016-01-26 06:43:45
110,2015-07-30 20:13:07,"tests pass, demos work, webpack warning has gone away. 

`import {Spring, TransitionSpring} from 'react-motion/lib/SpringNative';` should now work on react-native (once published)
",threepointone,2015-07-30 23:06:24
110,2015-07-30 20:40:52,"=D awesome

The parallel of `require('react-motion')` here is `require('react-motion/lib/SpringNative')`. I find that kinda weird. Is there some consistency we can have?
",chenglou,2015-07-30 23:06:24
110,2015-07-30 21:32:38,"Point. How about `react-motion/native`? 
",threepointone,2015-07-30 23:06:24
110,2015-07-30 21:32:59,":+1: 
(Also, `build/` still works too right)
Testing correct exports will get better soon. Sorry for the lack of polish right now.
",chenglou,2015-07-30 23:06:24
110,2015-07-30 21:39:04,"Yes, `build/` still works too. Heading to catch a flight, will catch up in a few hours. 
",threepointone,2015-07-30 23:06:24
110,2015-07-30 22:03:25,"(caught up)
",threepointone,2015-07-30 23:06:24
110,2015-07-30 23:06:22,"You're awesome. Also my water bottle spilled in my bag and ruined the notebook you gave me.
",chenglou,2015-07-30 23:06:24
110,2015-07-30 23:09:29,"niiice
",gaearon,2015-07-30 23:06:24
109,2015-07-30 05:52:58,"I started getting this warning when I require react-motion in my web project.

<S_CODE_TOKEN>
",smussell,2015-07-30 06:30:23
109,2015-07-30 05:59:59,"This warning is a known issue because of the way we do react-native compatibility, and should go away with React 0.14. It shouldn't affect your code/project though. In the meantime, add `externals : ['react-native'`] to your webpack config to suppress this warning. 
",threepointone,2015-07-30 06:30:23
109,2015-07-30 06:15:57,"It doesn't go away with react 0.14 since react-native still uses `require('react-native')`? Anyways, https://github.com/chenglou/react-motion/issues/29#issuecomment-125900800
",chenglou,2015-07-30 06:30:23
109,2015-07-30 06:30:19,"Thanks, seems like this is being tracked in #29, so I'll close this.
",smussell,2015-07-30 06:30:23
109,2015-07-30 09:50:41,"Boo, you're right :/
",threepointone,2015-07-30 06:30:23
108,2015-07-29 08:55:41,"This might be temporary as it makes the `animationLoop` impossible to
test on its own. 

The goal is to reduce the complexity of the system. It is a step towards 
implementing the prop `currVelocity` and maybe `currValue`. It also 
enables hot-reloading (as before closures where preventing hot-reloading 
to work correctly).

We're basically putting the animationLoop inside the `Spring` and
`TransitionSpring`, while keeping the separation between the
`animationLoop`, the `animationStep` and the render. We attached all the
properties that are needed for the loop onto `this`. We can't rely on
`this.setState` to set the state immediately so we save the `currValue`
into `currFrameValue` and `nextFrameValue` (the same way before we
had `animRunning[i].nextState` and `animRunning[i].prevState`).

Need to find a way to make `timeStep`, `timeScale` and `maxSteps`
configurable.
",bsansouci,2016-01-26 06:43:58
108,2016-01-26 06:43:58,"Done =).
",chenglou,2016-01-26 06:43:58
107,2015-07-29 07:06:04,"tests pass, demos work, doesn't break regular web webpack builds.

I just want my name in this repo
",threepointone,2015-07-29 09:07:29
107,2015-07-29 07:30:45,"did you check that the `build/` version also works? Script tag require with global ReactMotion
",chenglou,2015-07-29 09:07:29
107,2015-07-29 07:47:18,"yes, just tested it, works fine. for posterity's sake, this was my file 

<S_CODE_TOKEN>
",threepointone,2015-07-29 09:07:29
107,2015-07-29 09:07:27,"We should probably automate that check. Thanks!
",chenglou,2015-07-29 09:07:29
107,2015-07-29 09:09:16,"Humm webpack complains though. Is it possible to suppress the warnings? Like, extern react-native?
",chenglou,2015-07-29 09:07:29
107,2015-07-29 09:24:02,"@chenglou You can have separate export for React Native and turn components into factories. For example https://github.com/gaearon/react-redux/blob/master/src/native.js.
",gaearon,2015-07-29 09:07:29
106,2015-07-28 20:01:19,"Something like `Spring.constants`
",bsansouci,2015-07-29 05:33:47
106,2015-07-28 20:02:00,"This is already tracked in https://github.com/chenglou/react-motion/issues/68 btw
",chenglou,2015-07-29 05:33:47
105,2015-07-28 08:31:59,"This makes `willLeave` simpler and have a better default behavior. The way to
tell the `TransitionSpring` before this was to add an if statement at the top of
`willLeave` to check if `currValue` has reached the destination and that the
`currVelocity` is 0 and then returning null if yes. We now do that check
internally and do the unmounting when `currValue` is equal to the return of
`endValue` and `currVelocity` is 0.

This ""fixes"" #104 by just deprecating the API.
",bsansouci,2015-07-28 08:33:32
105,2015-07-28 08:52:28,"We'll keep `null` around internally for perf, e.g. default `willLeave` returns null to signal unmount still
",chenglou,2015-07-28 08:33:32
104,2015-07-27 04:54:08,"@bsansouci 
",chenglou,2015-07-28 08:33:49
103,2015-07-26 05:30:57,,bsansouci,2015-07-28 06:12:15
102,2015-07-26 04:56:19,"This is an attempt at making the `animationLoop` simpler to reason about.

`animationStep` is now outside either `Spring`s as a pure function with
the following signature: `(timestep, state) => newState`
- `timestep` is the timestep given by the `animationLoop`
- `state` is the cached state inside the `animationLoop`.(which won't
  be in sync if you call `setState` while the loop is running)

`subscribeAnimation` is now called `startAnimation`, and allows being
called multiple times in a row. This is so we can stop checking if the
animation was already started in the Spring. We still need to keep
`this.stopAnimation` for the sole purpose of cancelling the animation
when the Spring gets unmounted.

You can create an new instance of the `animationLoop` by calling
`configAnimation`. This takes a configuration object, making it easy
to test (by giving a different `raf`/`now`).

`startAnimation` still takes the state, a step function and a render
function.

Fix bug with `TransitionSpring`. Because the TS sets `destVal` as
`enterVals` for the first tick, we render that value twice. We render it once,
`currValue` is `enterVal` and `destVal` is `enterVal`. The next tick is faster
than 16ms, so `accumulatedTime` (which would be about -16ms from the previous
tick) is negative (-16ms + any number less than 16ms < 0). So we just render
part ways towards the `nextState`, but that's `enterVal` still. We render say
75% between `currValue` (=== `enterVal`) and `destValue` (=== `enterVal`). So we
render the same value a second time.
",bsansouci,2015-07-26 22:52:14
102,2015-07-26 22:52:11,"Feels a bit too big as a single PR. Hopefully you tested all the edge cases. Thanks!
",chenglou,2015-07-26 22:52:14
102,2015-07-27 03:28:22,"I tried to make it as small as possible, but I did change quite a bit of code. I've been testing all the edge cases that I could come up with. More concrete tests will help in the future.
",bsansouci,2015-07-26 22:52:14
101,2015-07-25 18:55:29,"<S_CODE_TOKEN>

Very handy shortcut for animating one child unmounting.

Right now, we have to use an empty `<div />` placeholder.
",chenglou,2015-07-27 00:10:01
101,2015-07-25 22:56:32,"I use this with 0.1.0. Do you mean it doesn't work anymore?
",nkbt,2015-07-27 00:10:01
101,2015-07-25 23:09:05,"Really? 0.1.0 enforced the one child return through React onlyChild. This hasn't changed.
",chenglou,2015-07-27 00:10:01
101,2015-07-26 00:40:26,"Only child works fine with null.
",nkbt,2015-07-27 00:10:01
101,2015-07-26 06:18:48,"It should throw?

<S_CODE_TOKEN>
",chenglou,2015-07-27 00:10:01
101,2015-07-26 07:28:54,"I'll doublecheck, but I am sure 0.1.0 worked well with this.
",nkbt,2015-07-27 00:10:01
101,2015-07-26 23:53:15,"Just checked, didn't work with 0.1.0 (expected behavior). Worked pre-0.1.0 naturally.
",chenglou,2015-07-27 00:10:01
100,2015-07-24 14:25:09,"In a typical use case, we're using springs to position an element on the page. Depending on units, we don't need more than a few decimal places of precision to position elements accurately. At the moment, react-motion spits out far more frames than are necessary. I'm not sure exactly how we should do this, maybe something like this:

<S_CODE_TOKEN>

Then we could only update the spring's state if `precisionFunc(endValue)` has changed
",AndrewIngram,2016-01-26 06:24:20
100,2015-07-24 18:13:29,"Does this have to be customizable? Seems like adjusting our error margin internally is good enough?

Also, we should render at least _once_ instead of just checking the error margin and decide that it's not worth moving half a pixel? You usually have the expectation that your render will be triggered (for e.g. side-effects and all) right?
",chenglou,2016-01-26 06:24:20
100,2015-07-24 20:16:05,"Good point, I was thinking in terms of significant figures or decimal places, but error margin is more universally useful. Perhaps a error margin prop that defaults to something like 0.1%? I'd argue we don't want it bigger, since different units might manifest differently, ie we can't assume pixels. In my case i'm using percentages. And browsers can do sub-pixel precision these days.
",AndrewIngram,2016-01-26 06:24:20
100,2015-07-28 05:37:28,"Percentage makes sense. But percentage relative to what? Can't be a value that might be 0.
",chenglou,2016-01-26 06:24:20
100,2015-07-28 09:32:55,"Damned mathematics... This is why I was leaning towards a custom function, because the API consumer has a better notion of what's considered a big enough change to worry about.
",AndrewIngram,2016-01-26 06:24:20
100,2015-07-29 00:31:44,"I think configurable error margin (even with a default) exposes too much API surface for the benefit it provides currently. Gotta find some other way of making this work.
",chenglou,2016-01-26 06:24:20
100,2015-10-18 15:03:21,"I don't know if this has been addressed yet but I'm quite in favor of the solution initially proposed.

IMO **user should have the control of precision grain** (e.g: integer, 2 digits, ...) because you don't know how an interpolated value is used at the end (it can be a style but it can also be displayed as a text right, or both, like in this pie chart I'm currently animating: <img height=""20"" src=""https://cloud.githubusercontent.com/assets/211411/10564584/dc596e86-75b9-11e5-829f-6aa66182374f.png""> )
",gre,2016-01-26 06:24:20
100,2015-10-19 00:45:23,"I :+1: on this too. As you can see on http://nkbt.github.io/react-collapse/example/ (try to collapse) the element is not gone for a while, though visually it is definitely gone. I'd go for `0.0` or even `0.` precision in case of collapsing. It is not that easy to control this from outside. I mean it is fairly easy, but code gets some extra unnecessary baggage.

I'd love to have sort of `height: spring(100, {precision: 0})` API here.
",nkbt,2016-01-26 06:24:20
100,2015-10-25 07:20:08,"I wrote a decorator that you can wrap around a `<Motion>`'s children to skip decimal values (presuming you are tweening from one pixel value to another:

<S_CODE_TOKEN>

I'll probably add it to [Gravel](https://github.com/appsforartists/gravel/tree/master/src) tomorrow.
",appsforartists,2016-01-26 06:24:20
100,2015-10-25 11:04:33,"@appsforartists it should be really easy to add ability to specify precision if you replace `Math.round(dict[key])`. For many cases even for height, 0.1 precision is desirable. Sometimes 0.01. Depending on the kind of animation.

Wrapper solution is pretty straightforward indeed, but it would be much nicer to have it as part of spring() config.
",nkbt,2016-01-26 06:24:20
100,2015-10-25 23:39:54,"Now published to npm:

 [`var memoizeRounded = require(""gravel"").helpers.memoizeRounded;`](https://github.com/appsforartists/gravel/blob/master/src/helpers/memoizeRounded.js)

@nkbt I added a precision argument.
",appsforartists,2016-01-26 06:24:20
100,2015-10-26 09:55:50,"So I was handling this in the child myself anyway, which for the most part was fine, but it didn't address the wasted renders of the Spring itself. There weren't any performance issues, but it did mean that when I was using React's Perf tools, the output showed those wasted renders, which somewhat obscures any other issues that might exist.
",AndrewIngram,2016-01-26 06:24:20
100,2016-01-26 06:24:20,"This has now been fixed in v0.4.1 (newest release), under `spring(value, {stiffness: ..., damping: ..., precision: 0.01})`. Sorry for the long wait.

This is the first try at this and things can be changed. The current implementation is [really simple](https://github.com/chenglou/react-motion/blob/6a7a0f3f72610c6a7fdad2920b44e728ca6e172d/src/stepper.js#L33). It checks the newly passed-in `precision` to decide whether to stop the animation. So yes, you'll have to interpolate fewer frames. The default precision has been changed from `0.001` to `0.01`.

However, I didn't round the precision for the interpolating numbers themselves. The probability that none of your style's values changed at this frame because of rounding is really small. But if you have other arguments for why the numbers should be rounded please tell!

Last thing: as you can see from the code above, we stop when both the new velocity and the distance delta is smaller than `precision`. Of course there's no reason why they should share the same precision, but this is just to ease things up for now. Maybe this should be changed.

Closing this but glad to reopen/have a new issue to discuss about this!

Sorry again for the long wait.
",chenglou,2016-01-26 06:24:20
99,2015-07-24 11:59:51,,nkbt,2015-07-24 23:25:07
99,2015-07-24 23:25:05,":+1: 
",chenglou,2015-07-24 23:25:07
98,2015-07-24 07:53:07,"In React Native, it's case sensitive, so `lodash.isPlainObject` does not work. Needs to be all lowercase. After changing that in 3 places, all works good.
",grabbou,2015-07-24 07:54:17
98,2015-07-24 07:54:17,"Ok, fixed in this commit https://github.com/chenglou/react-motion/commit/cfd2a4c7d0fd909b964d237f83f77e9bc8f6ba9b
",grabbou,2015-07-24 07:54:17
97,2015-07-23 23:04:00,"This should fix #95.
",iclanzan,2015-07-24 02:28:37
97,2015-07-23 23:05:16,"@bsansouci 
",chenglou,2015-07-24 02:28:37
97,2015-07-24 02:28:34,":+1: 
",chenglou,2015-07-24 02:28:37
96,2015-07-23 20:42:22,"Hi there!

When using react-motion in case-sensitive environments (Linux/Ubuntu), we run into an issue where node, webpack and possibly others can't properly require in the `lodash.isplainobject` module due to current spelling. Note, we've worked around this issue for now by simply aliasing inside of webpack but ideally I think we should use the true name of the module.
",balanceiskey,2015-07-23 20:46:10
96,2015-07-23 20:46:12,"Well you won't need your workaround anymore =)

Sorry about that. Had the same issue with `require('React')` too. Somehow forgot about this.
",chenglou,2015-07-23 20:46:10
96,2015-07-23 20:49:04,"Yay! Thanks for the quick merge and for this awesome library!
",balanceiskey,2015-07-23 20:46:10
95,2015-07-23 08:17:55,"cc @iclanzan because I not sure whether that's a flaw in the current implementation of animation loop of the problem of the (which would be a bigger problem).

Edit: no, I think it's just a flaw in the current implementation.
",chenglou,2015-07-24 02:28:37
95,2015-07-23 08:52:16,"There seems to be something very strange happening where the inner Spring would subscribe to the `animationLoop` but never unsubscribe.

I refactored the `animationLoop` code in my [fork](https://github.com/bsansouci/react-motion/blob/dbee34b997b68f36806b3edea8b677da82ad3311/src/animationLoop.js) and it seems to have fixed it.
",bsansouci,2015-07-24 02:28:37
95,2015-07-23 08:55:31,"Maybe because of an inner component update. Anyhow, glad your fork works. We'll release a 2.0.1 if everything goes alright.
",chenglou,2015-07-24 02:28:37
95,2015-07-23 12:52:09,"Oh, boy there‚Äôs all sorts of weird stuff happening in there when nesting because of repeated/unnecessary render calls.

Let‚Äôs say `springB` is nested inside `springA`. The animation starts, `springB` decides it needs to stop, but then in the same tick, during the render/filter phase of the animation loop (the same) props are received through the render function of `springA` registering a new subscription with the animation loop. This new subscription is lost in limbo because filtering doesn‚Äôt take into account new items added to the array. As a consequence `springB` does not animate.
",iclanzan,2015-07-24 02:28:37
95,2015-07-24 12:09:37,"At least we don't have threads in JS!
",gaearon,2015-07-24 02:28:37
95,2015-07-24 12:11:10,"yet!
....webassembly
",nkbt,2015-07-24 02:28:37
94,2015-07-22 13:37:14,,nkbt,2015-07-24 06:10:43
94,2015-07-22 17:14:41,"Ehh, does jasmine support good async testing like mocha's `done` passed into the callback? Because we're probably gonna need it.
",chenglou,2015-07-24 06:10:43
94,2015-07-22 22:03:44,"Sure, it does, but it is always better to use spies and mocked time instead.

<S_CODE_TOKEN>
",nkbt,2015-07-24 06:10:43
94,2015-07-23 06:26:03,"Cool, that's jasmine 2.0 right. It's been a while but I recall jasmine being on < 2.0 for quite a while.
Will mocked time work correctly with the new animation loop? Say, I want fine-grained simulation for when the next raf is. And I assume this works in phantom?
",chenglou,2015-07-24 06:10:43
94,2015-07-23 07:14:28,"Mocking works pretty well. Phantom, yes. I would not submit a PR that does
not work lol :)
",nkbt,2015-07-24 06:10:43
94,2015-07-24 06:10:39,":+1: 
",chenglou,2015-07-24 06:10:43
93,2015-07-22 07:50:44,"This is much handier than trying to compare final value and velocity and check if latter is now 0, etc.
",chenglou,2015-07-28 08:34:43
93,2015-07-28 08:34:43,"https://github.com/chenglou/react-motion/pull/105 fixes the case for needing that in `willLeave` (aka not needed anymore)

Won't expose some `hasArrivedAtEndValue` in `endValue` for now. I see no value.
",chenglou,2015-07-28 08:34:43
92,2015-07-21 23:00:15,,nikhilbaradwaj,2015-07-22 05:26:29
92,2015-07-22 05:27:17,"Thanks!
",chenglou,2015-07-22 05:26:29
91,2015-07-21 09:39:56,"I expect much fun to be had with cljs+motion. will try this myself, and track here (unless someone else picks it up). 
",threepointone,2015-07-28 18:10:54
91,2015-07-21 09:40:49,"(This ties into #80)
",threepointone,2015-07-28 18:10:54
91,2015-07-21 19:55:08,"I'd loooove to see this work <3
",bsansouci,2015-07-28 18:10:54
91,2015-07-28 18:10:48,"Talked on slack, will let @threepointone work on this in a fork since this isn't high pri
",chenglou,2015-07-28 18:10:54
90,2015-07-21 04:23:12,"This is just a reminder for the upcoming refactoring/release. We're currently not calling `setState` anywhere.

We should make sure that nothing is triggering renders other than the animation loop to avoid unnecessary renders. We could either never call `setState`, or add an extra property to all calls to `stateState`. Something like `this.setState({...state, shouldRender: false})`. And have `shouldComponentUpdate` return `newState.shouldRender`.
",bsansouci,2016-01-26 06:07:29
90,2015-07-27 19:15:31,"Won't people hit subtle bugs with this?

The function-as-child render delegate pattern provides a similar textual cue as the standard element-as-child pattern, the difference is the owner. When combined with arrow functions, I might be using `this.props` inside the render-function-passed-as-a-child to `<Spring>`, so it gives the illusion that `<Spring>` isn't the owner.

So for me, this means that anytime the function-as-child render delegate pattern is used, the component should always return `true` from its `shouldComponentUpdate()`.
",ericf,2016-01-26 06:07:29
90,2015-07-28 00:43:11,"You're right, re-reading this I realize it's wrong. Also after playing around with the `animationLoop` I understand why we need to cache the state. We might need a special `animation.setState` to tell the animationLoop that the state updated. This might be required if we ever add `currValue` or `currVelocity` as a prop.
",bsansouci,2016-01-26 06:07:29
90,2016-01-26 06:07:29,"Fixed in v0.4.1. Feel free to (fail to) try to reproduce this! =).
",chenglou,2016-01-26 06:07:29
89,2015-07-21 02:50:07,"Radium's a project for inlining styles with react. When I use the @Radium decorator I get the following Javascript error from the Spring's render method.

<S_CODE_TOKEN>

in the following code

<S_CODE_TOKEN>

React-motion works without Radium and Radium works without react-motion. Here's my render method:

<S_CODE_TOKEN>

Any thoughts?
",yanivtal,2015-07-21 19:14:26
89,2015-07-21 03:12:03,"Do you have a reproducible example somewhere? Maybe your code is compiled in some awkward way so it is not a function anymore that is passed to Spring... 
Check your actual built bundle first
",nkbt,2015-07-21 19:14:26
89,2015-07-21 03:57:27,"This is the expected behavior. You're asked to provide a single child as a return value to `Spring`'s children prop. Radium does something funny with the children?
",chenglou,2015-07-21 19:14:26
89,2015-07-21 04:54:56,"can you show the radium integration too? we should come up with a generic solution/workaround to avoid this problem with components that rewrite children. 
",threepointone,2015-07-21 19:14:26
89,2015-07-21 15:42:22,"Where do you post fiddles with react 0.13 and react-motion?

The Radium integration is simply achieved with a decorator:

<S_CODE_TOKEN>

You take styles like:

<S_CODE_TOKEN>

and then pass in an array of styles to a component. In the example I showed I had:

<S_CODE_TOKEN>

where styles.img is the style object and this.imgStyle(val) returns a style object using Spring's val. Both of these are plain style objects and should be concatenated by Radium.

You can see from my example that I do have a single function as the child of the Spring.. Any help would be appreciated.
",yanivtal,2015-07-21 19:14:26
89,2015-07-21 17:34:59,"This seems more like an issue with the way radium rewrites a render tree. I'll have a look sometime this week, but could you file an issue on the radium repo as well?
",threepointone,2015-07-21 19:14:26
89,2015-07-21 18:56:38,"Just did. He says it's fixed on master. Thanks! I'm fine closing this ticket or you could use this to track implementing a generic solution to working with components that rewrite children.
",yanivtal,2015-07-21 19:14:26
89,2015-07-21 19:14:26,"The `children.only` pattern is/will be used but lots of libraries in conjunction with propTypes. Rewriting it and breaking the contact isn't something we should handle imo. So closing this because it's not react-motion specific and we don't wanna handle these =).
",chenglou,2015-07-21 19:14:26
89,2015-07-22 04:06:13,"I had a look at the radium tracker, and it seems like their fix is to ignore components with fn-children o_O. unfortunate result of the way it works internally, so there's not much we can do anyway. @yanivtal, as a quick workaround for your case, I'd recommend using something simpler like css classes / plain objects for the components you're animating. 
",threepointone,2015-07-21 19:14:26
89,2015-07-23 04:21:16,"@threepointone That's what I'm thinking. I don't really need radium for that. Thanks. You're quick with it!
",yanivtal,2015-07-21 19:14:26
88,2015-07-20 23:40:40,"If you do a call to `this.setState` inside say `componentWillReceiveProps` of the `TransitionSpring`, `animationLoop` won't see the new state. This is because `animationLoop` caches the state while it's running (see [here](https://github.com/chenglou/react-motion/blob/ba77a1a0991a501ccb3676e8bbd0a5d59338f2a0/src/animationLoop.js#L102), it uses `subscriber.value`, which is a reference to this.state and which will never any setState updates). I think it's something that should be documented somewhere, if we decide to keep the animationLoop to way it is.

The least horrible hack we found is to set a flag `this.dirty` anywhere to tell the `animationLoop` to use `this.currValue` or `this.currVelocity` instead of the state passed in as argument. I don't like this very much because then the `animationStep` isn't a pure function, and we lose a lot of the purpose of `animationLoop`. This might mean that this logic can't be extracted out, and should be inlined inside the component itself.
",bsansouci,2016-01-26 06:08:30
88,2015-07-21 01:28:33,"Having state outside of the animation loop and into the Spring is totally valid and works with the current animation loop. Having said that, `setState` should still not be called other than in the `animationRender` method since it triggers re-renders outside of `requestAnimationFrame`. On the same note receiving new props should not trigger renders either.
",iclanzan,2016-01-26 06:08:30
88,2016-01-26 06:08:30,"Well this sure took a long time to close...
We've put a hook in `componentWillUpdate` to sync stable changes. The strategy can change but the tests are now there to guard against it. @bsansouci feel free to check that it meets your expectations.
",chenglou,2016-01-26 06:08:30
87,2015-07-20 20:31:51,"I was just curious if you plan to support IE9 in any capacity?  I know the library relies on requestAnimationFrame and that isn't supported in IE9, but I was wondering if it was possible to have any sort of transition-free fallback, for example rather than animating it could just 'snap' to the final position?
",mikemorton,2015-07-22 08:49:30
87,2015-07-20 20:32:37,"As of today, master uses a rAF polyfill, so you should be fine. Anything else IE9-related?
",chenglou,2015-07-22 08:49:30
87,2015-07-20 20:40:22,"Wow that's a recent addition?  I'm on 0.1.0.

If so thanks so much and feel free to close this off!
",mikemorton,2015-07-22 08:49:30
87,2015-07-20 20:41:21,"Part of #57. Post-0.1.0
I'll close this off once we ship the release. I'll ping you by then and check if there's any other IE9-related problems =).
",chenglou,2015-07-22 08:49:30
87,2015-07-20 20:45:07,"Thanks so much!
",mikemorton,2015-07-22 08:49:30
87,2015-07-22 08:49:30,"@mikemorton 0.2.0 out now. I'm closing this because I think this works. But ping me and tell me the result please. Thanks.
",chenglou,2015-07-22 08:49:30
87,2015-07-23 15:47:06,"I was just doing a quick proof-of-concept prototype so this is by no means an extensive report, but 0.2.0 seems to work in IE9.  Thanks!
",mikemorton,2015-07-22 08:49:30
86,2015-07-20 17:17:17,"If the start value is 0 and the end value is -180, it should properly interpolate in the negatives (and should actually start at 0 up until -180).

Note: this works now, we just need to keep it that way.
",bsansouci,2015-07-25 22:01:57
85,2015-07-20 07:20:34,"Right now it's possible (anything is possible when you tween a simple value!), but it'd be nice to expose the helpers that takes an interpolated number and outputs the corresponding color/path/whatever else (suggestion?)
",chenglou,
85,2015-07-20 07:26:41,"Color: https://github.com/facebook/rebound-js/blob/fe8994c1caca9f0e7ff27336c5ecf0a4abd807dc/rebound.js#L1014-L1046
",chenglou,
85,2015-07-20 07:31:45,"Path: https://github.com/andreaferretti/paths-js/wiki/Low%20level%20API
",chenglou,
85,2015-08-14 13:25:56,":+1: I could use this!
",jarib,
84,2015-07-19 18:11:12,"Not sure exactly what's going on but if you include react-motion.js and then try to use the Sample Usage code you get errors like:

<S_CODE_TOKEN>

adding in 

<S_CODE_TOKEN>

Removes that error, but then there is a Syntax error in the render() return jsx, then once that's fixed you get

<S_CODE_TOKEN>
",iandanforth,2015-07-22 08:35:25
84,2015-07-19 18:15:15,"How did you include `react-motion`?
This seems to work for me `import {TransitionSpring} from 'react-motion';`
",bsansouci,2015-07-22 08:35:25
84,2015-07-19 18:24:56,"@bsansouci  This is using the built react-motion.js, included with standard script tags. i.e. All client side, no build step other than having jsx transformer.
",iandanforth,2015-07-22 08:35:25
84,2015-07-19 18:29:30,"Mmh what does your render look like?
",bsansouci,2015-07-22 08:35:25
84,2015-07-19 18:36:33,"![screenshot from 2015-07-19 11 33 53](https://cloud.githubusercontent.com/assets/446062/8767218/58c26bdc-2e0a-11e5-9fdf-0ced641f514d.png)
",iandanforth,2015-07-22 08:35:25
84,2015-07-19 18:37:23,"@bsansouci The TypeError happens when clicking on the first div
",iandanforth,2015-07-22 08:35:25
84,2015-07-19 18:53:51,"I'm a little confused as to why that would happen. Can you print inside 

<S_CODE_TOKEN>
",bsansouci,2015-07-22 08:35:25
84,2015-07-19 19:19:52,"Object {a: ""I am a"", b: ""I am b"", c: ""I am c""} ""a""
",iandanforth,2015-07-22 08:35:25
84,2015-07-19 19:51:25,"Can you try the new demo code and see if it works? Sorry about that.
",bsansouci,2015-07-22 08:35:25
83,2015-07-19 05:59:21,"Basically, with the current implementation of `Spring`, CSS transitions won't work reliably.

There are two reasons that I can see, maybe more, that causes them to not trigger:
### 1. Will stop rendering after the first frame

If `endValue` returns an array of `ReactElements` there will be no interpolation, only the diffing algorithm will be used. 
Start state: `{counter: 0}`
Start of the frame (one step at a time):
- `this.setState({counter: counter + 1})`
- render of the owner
- `Spring` loop
- call to `endValue`, which returns `[ReactElement with key ""1""]`
- call to `mergeDiff`, which return `[ReactElement with key ""0"", ReactElement with key ""1""]` (because ""0"" shouldn't leave yet)
- we check what's new in the `mergedObject` and call `willEnter`, which returns `ReactElement with key ""1""` having for `className` some class used for initial position (and which needs to be transitioned)
- not interpolation because it's an array of `ReactElement`s
- Velocity is 0, so [this line](https://github.com/chenglou/react-motion/blob/master/src/Spring.js#L361) will be true and the animationLoop will stop

So `ReactElement with key ""1""` had a chance to get mounted, but won't have a chance to see its `className` change (which is required for the CSS Transition to be triggered.

A possible fix is detailed [here](https://github.com/chenglou/react-motion/issues/77)
### 2. FPS too high

That's a bigger problem, which makes me wonder if we should support CSS Transitions.
Basically, if you want something to transition in using CSS transitions, you'll write a `willEnter` that will return your component with a class with a transition property (say `className1`). Then you'll rely on the fact that `willEnter` is called only once when something should be mounted, and then `endValue` is called, which would set the `className` to a default one (say `className2`). This would cause the object to switch from `className1` to `className2` and the browser would kick in and smoothly transition between the two class's properties (depending what you want to transition).
But because of the nature of how JS handles which function is allowed to run when (in the case of requestAnimationFrame), it's very likely that the Spring loop will run twice in a row, not giving enough time for the browser to see the className change and resulting in no transition.

The only reason why demo5 works right now is because of point number 1. If you comment out [this line](https://github.com/chenglou/react-motion/blob/master/src/Spring.js#L361) you'll see this:

![css-transition-bug](https://cloud.githubusercontent.com/assets/4534692/8764735/a09dcc7c-2db9-11e5-8f25-9b3013b7a25d.gif)

I want to know what you guys think, if it's worth implementing or not, and if so, what would the best way to go about this be.

My conclusion from this is that to support CSS transitions properly we'd probably need a special Spring and a special animation ""loop"" (which wouldn't necessarily be an actual loop). I personally think that most things can be handled by JS, and the only place where CSS Transition shine is when you need 

Issues related: #72, #77 and #38 
ping @brumm
",bsansouci,2015-07-27 04:03:41
83,2015-07-19 21:02:17,"Point 2: are you sure this is the issue? This is important. It's because of the new animation loop. @iclanzan

(Assuming it _is_ because of the new animation loop) this is actually somewhat of a relief. I was afraid of cramming more stuff into TransitionSpring for the sake of playing nice with CSS transitions, which really doesn't need an animation loop. Maybe we'll simply pull out the logic into a CSSSpring (or not). I think doing this will also allows #77 to have simpler solutions?
",chenglou,2015-07-27 04:03:41
83,2015-07-19 21:56:14,"Actually I might be wrong about point 2. It's possible that what happens is that the onScroll event is fired before willEnter is called, so `alreadyAppeared[key]` is set to true and willEnter just returns `value`, making the thing appear immediately. 
",bsansouci,2015-07-27 04:03:41
83,2015-07-19 22:34:14,"@bsansouci  While I can‚Äôt repro the issue, both your scenarios for point 2 sound plausible. The animation loop can indeed run multiple steps in one frame which could cause what you are describing.

I don‚Äôt think the animation loop should be involved at all if it is not for coordinating the physics simulation.
",iclanzan,2015-07-27 04:03:41
83,2015-07-20 02:52:50,"I added a bunch of `console.log`s, here is what is looks like:

![out](https://cloud.githubusercontent.com/assets/4534692/8768757/e6d5e4c8-2e58-11e5-8bfb-0f96e86783ea.gif)

Basically this shows that a render is triggered by the owner, and slide 11 was added to the scene. Then the handleScroll event fired, and set all slides up until 12 to visited. Then, because `handleScroll` does a `setState`, we see another render in the owner. Then finally `requestAnimationFrame` fires, `willEnter` is called on `""12-slide""` but as we just saw it was just set to visited. `willEnter` therefore returns the `value` it was given, which doesn't have any `className`. We also see that `""13-slide""` also enters the scene, but wasn't set to visited (because we actually render one more element [here](https://github.com/chenglou/react-motion/blob/393bf8db81a638a7234d24c3eccf81fc3c837d30/demos/demo5/Demo.jsx#L88))

So the problem isn't our Spring but the demo itself, we're setting `alreadyAppeared` in a callback of an event, not synched with any rendering logic. I'm not too sure what the best way to approach this problem is.

ps: no it's not because of the new animation loop, I tested before and after merging #57.
",bsansouci,2015-07-27 04:03:41
83,2015-07-22 19:51:39,"Ok so I was wrong, we don't set a slide visited immediately, we set the previous one (look at [this line](https://github.com/chenglou/react-motion/blob/d00efbe4252e238a500e7d36727bc61d2d6cfeaa/demos/demo5/Demo.jsx#L70), we don't set `last` to `alreadyAppeared`).

So willEnter does execute at least once for every item (though it _might_ not, if you scroll **really** quickly). What happens is that the `className` returned by `willEnter` is never rendered because we skip it! We skip it inside the `animationLoop` [here](https://github.com/chenglou/react-motion/blob/d00efbe4252e238a500e7d36727bc61d2d6cfeaa/src/animationLoop.js#L55-L58). If it happens that the tick at which we called `willEnter` took longer than one `timestep` then we'll move two steps (as described [here](https://github.com/chenglou/react-motion/pull/57#issuecomment-121924628)) and therefore will overwrite `willEnter`'s value with `endValue`'s value.

Here is some `console.log`s. `10-slide` appeared without transitioning in this case. The first line shows `this.accumulatedTime` (`25.564666...ms`) which _is_ bigger than `16ms`. We then see one step being made (and the first call to `willEnter`), immediately followed by another step over writing the `className`. It then sets the state and renders (and never renders the value of `willEnter`).
![screenshot 2015-07-22 15 47 13](https://cloud.githubusercontent.com/assets/4534692/8835538/1d15c224-3089-11e5-83ea-8898eda14425.png)

To confirm this I changed [this](https://github.com/chenglou/react-motion/blob/d00efbe4252e238a500e7d36727bc61d2d6cfeaa/src/animationLoop.js#L55-L58) to this

<S_CODE_TOKEN>

That fixed demo5. 

_disclaimer_: after v0.2.0, support for arrays of `ReactElement`s was removed so I had to modify demo5 a little, but still had the problem before this fix.
",bsansouci,2015-07-27 04:03:41
83,2015-07-22 20:16:51,"Isn‚Äôt that what I said in my comment above?

> The animation loop can indeed run multiple steps in one frame which could cause what you are describing.
",iclanzan,2015-07-27 04:03:41
83,2015-07-22 20:20:05,"Ha! I read too quickly. Yes though it doesn't cause what I said before.
",bsansouci,2015-07-27 04:03:41
83,2015-07-27 04:03:41,"Closing this because neither `Spring`s support CSS Transitions for now.
",bsansouci,2015-07-27 04:03:41
82,2015-07-19 03:23:36,"This is more for stylistic and purity reasons, but here is a completely-unscientific performance explanation:

To handle `let`/`const` block scoping, Babel (loose mode) compiles this:

<S_CODE_TOKEN>

to this:

<S_CODE_TOKEN>

[REPL](http://babeljs.io/repl/#?experimental=false&evaluate=true&loose=true&spec=false&playground=false&code=function%20interpolateValue%28alpha%2C%20nextValue%2C%20prevValue%29%20%7B%0A%20%20%2F*%20...%20*%2F%0A%20%20if%20%28nextValue.val%20!%3D%20null%29%20%7B%0A%20%20%20%20let%20ret%20%3D%20%7B%0A%20%20%20%20%20%20val%3A%20interpolateValue%28alpha%2C%20nextValue.val%2C%20prevValue.val%29%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%2F*%20...%20*%2F%0A%20%20%20%20return%20ret%3B%0A%20%20%7D%0A%20%20%2F*%20...%20*%2F%0A%20%20if%20%28isPlainObject%28nextValue%29%29%20%7B%0A%20%20%20%20const%20ret%20%3D%20%7B%7D%3B%0A%20%20%20%20Object.keys%28nextValue%29.forEach%28key%20%3D%3E%20%7B%0A%20%20%20%20%20%20ret%5Bkey%5D%20%3D%20interpolateValue%28alpha%2C%20nextValue%5Bkey%5D%2C%20prevValue%5Bkey%5D%29%3B%0A%20%20%20%20%7D%29%3B%0A%20%20%20%20return%20ret%3B%0A%20%20%7D%0A%20%20return%20nextValue%3B%0A%7D%0A)

whereas, if we use `reduce`, Babel doesn't undergo that transform (no after version since it's almost the same):

<S_CODE_TOKEN>

[REPL](http://babeljs.io/repl/#?experimental=false&evaluate=true&loose=true&spec=false&playground=false&code=function%20interpolateValue%28alpha%2C%20nextValue%2C%20prevValue%29%20%7B%0A%20%20%2F*%20...%20*%2F%0A%20%20if%20%28nextValue.val%20!%3D%20null%29%20%7B%0A%20%20%20%20let%20ret%20%3D%20%7B%0A%20%20%20%20%20%20val%3A%20interpolateValue%28alpha%2C%20nextValue.val%2C%20prevValue.val%29%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%2F*%20...%20*%2F%0A%20%20%20%20return%20ret%3B%0A%20%20%7D%0A%20%20%2F*%20...%20*%2F%0A%20%20if%20%28isPlainObject%28nextValue%29%29%20%7B%0A%20%20%20%20return%20Object.keys%28nextValue%29.reduce%28%28ret%2C%20key%29%20%3D%3E%20%7B%0A%20%20%20%20%20%20ret%5Bkey%5D%20%3D%20interpolateValue%28alpha%2C%20nextValue%5Bkey%5D%2C%20prevValue%5Bkey%5D%29%3B%0A%20%20%20%20%20%20return%20ret%3B%0A%20%20%20%20%7D%29%3B%0A%20%20%7D%0A%20%20return%20nextValue%3B%0A%7D%0A)
",razh,2015-07-19 06:08:16
82,2015-07-19 06:08:21,"Heh, interesting! Thanks
",chenglou,2015-07-19 06:08:16
82,2015-07-19 22:44:52,"The reason is that foreach is side effect so babel tries to play safely in
this case.
",nkbt,2015-07-19 06:08:16
82,2015-07-19 22:47:22,"Or it could be a bug, but I doubt.
Ping @sebmck?
",nkbt,2015-07-19 06:08:16
82,2015-07-19 23:02:18,"It's not a bug, there's no way to tell if the callback is going to be called synchronously or asynchronously so the scope needs to be preserved.
",kittens,2015-07-19 06:08:16
82,2015-07-19 23:44:03,"Thanks :+1:
",nkbt,2015-07-19 06:08:16
81,2015-07-18 23:12:48,,iclanzan,2015-07-25 06:19:07
81,2015-07-18 23:26:05,"As discussed, this is indeed less readable. But could allocate a lot less if you do that opt where you check if all subscribers are active right?
",chenglou,2015-07-25 06:19:07
81,2015-07-18 23:54:45,"Absolutely. I think it‚Äôs a nice optimization.
",iclanzan,2015-07-25 06:19:07
81,2015-07-19 20:34:31,"So are we gonna do the optimization or leave it for later?
",chenglou,2015-07-25 06:19:07
81,2015-07-19 20:43:28,"What do you mean? The optimization is right there. Line 84 only allocates a new array if a subscriber is not active.
",iclanzan,2015-07-25 06:19:07
81,2015-07-19 20:45:10,"Looking at it I realize it‚Äôs flawed. It would miss adding active subscribers that are positioned before the first inactive one.
",iclanzan,2015-07-25 06:19:07
81,2015-07-19 20:46:06,"Yeah I think ironically, I got confused but this code and thought you were doing something else. If you fix that, we should add some comments around it.
",chenglou,2015-07-25 06:19:07
81,2015-07-19 21:11:04,"So, do you still think it's worth doing this or use the `filterRight`?
",chenglou,2015-07-25 06:19:07
81,2015-07-19 21:17:31,"Ok, fixed it.
",iclanzan,2015-07-25 06:19:07
81,2015-07-19 21:20:44,"We should definitely **not** use `filterRight` since it‚Äôs `O(n^2)`.
",iclanzan,2015-07-25 06:19:07
81,2015-07-19 21:21:34,"Sorry meant to say #78
",chenglou,2015-07-25 06:19:07
81,2015-07-19 21:35:36,"It‚Äôs up to you. That one is more readable and easier to test. This one is more optimized.
",iclanzan,2015-07-25 06:19:07
81,2015-07-20 00:31:48,"Keeping this open as a task for when we get enough test coverage to replace #78. We'll get there eventually =)
",chenglou,2015-07-25 06:19:07
81,2015-07-25 06:19:07,"Diverged, closing but will use as reference.
",chenglou,2015-07-25 06:19:07
80,2015-07-18 22:57:50,"cc @threepointone who first mentioned generators for avoiding allocating intermediate stuff. Transducerjs can probably do the same.

Generators might give bad perf (constant overhead) though IIRC. But maybe the Regenerator transform that babel uses avoids that? Have to test the real numbers.
",chenglou,2015-09-30 17:27:47
80,2015-07-19 04:45:32,"If interested, have a look at this commit that uses a generator to merge updateCurr\* - https://github.com/threepointone/react-motion/commit/69185a62253e048a7a4508c24eafb597904c36cc?diff=split (I also have a change where `stepper` is replaced with a generator, will push that in a bit.)

I haven't had the time to perf test this throughly, but chrome's perf audit shows updateCurr taking slightly higher percentage of the time(despite running it through regenerator). But it's also half the iterations, so am unclear on what that means. Do you have a stress test I can run with this?

Am now thinking transducers
",threepointone,2015-09-30 17:27:47
80,2015-07-19 04:47:14,"Eh, 1k chat heads? Lol
",chenglou,2015-09-30 17:27:47
80,2015-09-30 17:27:47,"Bah it's fine now. New API only animates a shallow object.
",chenglou,2015-09-30 17:27:47
79,2015-07-18 21:21:39,"I think we should stop calling willLeave twice every time we render. 
First calls made [here](https://github.com/chenglou/react-motion/blob/master/src/mergeDiff.js#L13) or [here](https://github.com/chenglou/react-motion/blob/master/src/mergeDiff.js#L22). Second call is [here](https://github.com/chenglou/react-motion/blob/master/src/mergeDiff.js#L37).

Among other things, this might cause problems if people mutate things inside willLeave.
",bsansouci,2015-07-19 00:20:16
78,2015-07-18 19:12:45,"As @chenglou pointed out, `filterRight` was `O(n^2)` because of that call to `splice`, so the regular old `Array.prototype.filter` is in fact faster.

The performance gains I was seeing when I switched from `filter` to `filterRight` were caused by not inlining the predicate.

Since not inlining the predicate is a requirement, I can‚Äôt think of a way to use the built in filter and pass the alpha to the predicate. I could pass it as `this` to the predicate but that has the overhead of wrapping the number in a `Number` object drastically affecting performance.

This is the best thing I could come up with. Implement a `filter` function that passes the third argument as the first argument to the predicate. As a bonus it is faster than `Array.prototype.filter`.

I am happy not to have to mutate the array anymore.
",iclanzan,2015-07-20 00:31:04
78,2015-07-20 00:31:01,"Great. Pulling this in in favor of #81, which is much more performant but less readable and bug-prone.
",chenglou,2015-07-20 00:31:04
78,2015-07-20 00:34:16,"Good choice :+1: 
",iclanzan,2015-07-20 00:31:04
77,2015-07-18 11:44:58,"Repro: demo3, type `p`. Remove `p`. Original list doesn't come back because [this](https://github.com/chenglou/react-motion/blob/1ec99fef09a9510a643357f7e2b9c8b7f02e8e68/src/Spring.js#L361) is met.
",chenglou,2015-08-05 01:25:59
77,2015-07-18 11:45:02,"@iclanzan 
",chenglou,2015-08-05 01:25:59
77,2015-07-18 12:36:42,"Interesting, I never waited long enough for the animations to finish in my tests so I never ran into this. :)

How is it that it was working before though?
",iclanzan,2015-08-05 01:25:59
77,2015-07-18 12:38:09,"Probably through some funny combination of booleans?
",chenglou,2015-08-05 01:25:59
77,2015-07-18 12:38:47,"No, but I mean you were still checking the velocity to decide when to stop and yet it was working.
",iclanzan,2015-08-05 01:25:59
77,2015-07-18 12:40:48,"Aren't we talking about how to restart here?
",chenglou,2015-08-05 01:25:59
77,2015-07-18 12:42:22,"I guess that‚Äôs the real issue, yes.
",iclanzan,2015-08-05 01:25:59
77,2015-07-18 14:08:21,"What do you think of changing [this line](https://github.com/chenglou/react-motion/blob/master/src/Spring.js#L353) to: `mergedValue[key] = endValue[key];`?

That seems to solve it.
",iclanzan,2015-08-05 01:25:59
77,2015-07-18 16:24:05,"I'll have to think about the implication of this difference for TransitionSpring. I _think_ this is fine. @bsansouci
",chenglou,2015-08-05 01:25:59
77,2015-07-18 21:31:09,"This will make the raf stop after the first render, which was handled by [this](https://github.com/chenglou/react-motion/blob/5541cca8d569661ec7e183414ca95118faaab875/src/Spring.js#L152) previously. Preventing certain CSS transitions to work.
Example [here](https://gist.github.com/bsansouci/c8c760339f5134c50ac5) (not working, the Counter that's suppose to appear only appears if something else triggers on more render). 

A possible way to fix this is to change [this line](https://github.com/chenglou/react-motion/blob/ba77a1a0991a501ccb3676e8bbd0a5d59338f2a0/src/Spring.js#L354-L357) to:

<S_CODE_TOKEN>

and initialize `this.onMoreTime` [here](https://github.com/chenglou/react-motion/blob/ba77a1a0991a501ccb3676e8bbd0a5d59338f2a0/src/Spring.js#L279-L284).
",bsansouci,2015-08-05 01:25:59
77,2015-07-19 11:57:38,"I don‚Äôt think using a flag is a solid solution. Nor is checking velocity. Different types of simulations have different conditions that need to be met in order to stop. Decay should stop when velocity is 0. A spring should stop when both the end position has been reached and velocity is 0. You could have other types of animations that shouldn‚Äôt stop when velocity is 0. For example animations with delay.
",iclanzan,2015-08-05 01:25:59
77,2015-07-19 14:06:47,"I would disagree with that actually. I think in this case, stopping the loop is merely an optimization which shouldn't affect the rendering/interpolation. If stopping the loop causes anything to not refresh then we're doing it wrong.
",bsansouci,2015-08-05 01:25:59
77,2015-07-19 20:48:46,"It's not merely an optimization. It stops to be one the moment you want to expose a `onEnd` callback (though you could argue we should not expose one).

A flag here is fine because what we're doing here doesn't correspond to anything in a physics simulation. There's no such thing as ""run one more frame"" in that world. We do it because the user receives the previous tick's `currentValue` in `endValue` and might decide to start a new animation. This is the pitfall of the API (but also its strength, as this way you don't need to expose the actual, more accurate current tick `currentValue`, which, again, involves creating a value binding API).

Checking the velocity might not be a solution, true. But we're only concerned with Spring here for now. A `Decay` component will have its own check for stopping.

Anyhow this is blocking a release and we gotta get it solved quickly. If we can't find a better solution, a boolean is fine for now. It's not user-facing so we'll try to find a better solution after that.
",chenglou,2015-08-05 01:25:59
77,2015-07-19 21:52:32,"I get it. With the boolean flag I don‚Äôt think `currVelocity` needs to be checked to be zero. `newCurrVelocity` should suffice.
",iclanzan,2015-08-05 01:25:59
77,2015-08-05 01:25:59,"Already fixed since forever. Tests in.
",chenglou,2015-08-05 01:25:59
76,2015-07-18 00:33:30,,bsansouci,2015-07-18 03:11:32
75,2015-07-17 23:12:26,"Make sure hot reload and builds and all all work.
",chenglou,2015-07-18 03:12:02
75,2015-07-18 03:12:02,"#76 
",chenglou,2015-07-18 03:12:02
74,2015-07-17 18:42:19,"You know, so we can easily test on other devices.
",iclanzan,2015-07-17 18:43:10
74,2015-07-22 19:53:03,"Note: this doesn't work on Windows IIRC.
",gaearon,2015-07-17 18:43:10
74,2015-07-22 20:14:35,"Yes, you are right.
",iclanzan,2015-07-17 18:43:10
73,2015-07-16 22:42:49,"After writing a couple demos with `react-motion`, and looking at other people's demos, I realized that there seems to be a pretty common use case for  `willLeave` which is different from the current default. 

The current default is `willEnter = () => null`, meaning that the `TransitionSpring` will unmount as soon as there's a missing key in the return of `endValue`. This default makes sense because it's `Spring` and `TransitionSpring` interchangeable (if you want to not throw when `endValue` returns an object of a different shape). 

I think `TransitionSpring` would be mostly used when you **do** want mounting/unmounting animation. The most common use case seems to be 

<S_CODE_TOKEN>

There are two problems here:
1. `endValue` doesn't contain `key` yet because it's called during the merging, so how to check if you've 
reached something that the function is suppose to return?
2. What do you return if you haven't reached this ghost `endValue[key]`?

One possible solution is to make `willEnter` and `willLeave` both be allowed to be data structures. If they are data structures we can trivially check if you've reached the destination (because it's the same whatever the `key`), and then the return would be that data structure.

<S_CODE_TOKEN>

This is how you'd use the `TransitionSpring`

<S_CODE_TOKEN>

What do you think?
",bsansouci,2015-07-29 05:42:50
73,2015-07-29 05:42:49,"Fixed by https://github.com/chenglou/react-motion/pull/105
",chenglou,2015-07-29 05:42:50
72,2015-07-16 09:51:35,"This is because we do it one more time here: https://github.com/chenglou/react-motion/blob/664bbc94c2ef6c1d6b94f075cfe932a0d48ae048/src/Spring.js#L386-L389

This can be trivially solved, but we can wait for #57 to be solved and then fix it.
",chenglou,2015-07-27 01:49:20
72,2015-07-21 09:20:47,"This is fixed. Reopening so that we can put a test for it.
",chenglou,2015-07-27 01:49:20
71,2015-07-16 07:09:25,"A bit nitty gritty, but it confused me when trying react-motion for the first time. I tried to do a similar thing as in this demo, but I used === instead (which doesn't eval as true for undefined and null, but == does).
",peterssonjesper,2015-07-17 01:34:28
71,2015-07-16 07:10:38,"now at first render you check if there are any values and set your initial value if you want one.
",nkbt,2015-07-17 01:34:28
71,2015-07-16 07:11:28,"kind of

<S_CODE_TOKEN>
",nkbt,2015-07-17 01:34:28
71,2015-07-16 07:12:40,"Humm, `==` is used (and always used) for `null` and `undefined` check at once, and nowhere else. I'd like to keep it this way. Can you just change the comment to `undefined`?
",chenglou,2015-07-17 01:34:28
71,2015-07-16 07:13:28,"This does bring an issue that I've been thinking about. People keep asking how to do animation at mounting. This is the way to do it but it's not obvious enough. Maybe I _will_ release the `initialValue` prop after all.
",chenglou,2015-07-17 01:34:28
71,2015-07-16 07:15:45,"initial value is the great idea. I was thinking about adding it right 1 hour ago =)
",nkbt,2015-07-17 01:34:28
71,2015-07-16 07:16:51,"@nkbt Yep, I realized that. Just confusing that the demo explicitly said that the argument is supposed to be null.

@chenglou I agree on the initialValue prop, that would probably be easier to understand.
",peterssonjesper,2015-07-17 01:34:28
71,2015-07-17 01:34:24,"Oh sorry, didn't see you updated the PR. Thanks!
",chenglou,2015-07-17 01:34:28
70,2015-07-16 06:09:01,"Prototyping period is done. Current API somewhat stable. This is still not high-pri (need to get a few other things in, including tests), but time to stop allocating like crazy in core. If we have to we'll turn the codebase inside out to squeeze out that last drop of frame.
",chenglou,2015-08-02 22:35:44
70,2015-07-16 06:35:51,"I have a few optimizations locally, especially when `endValue` returns an array. I'm just waiting for #57 to get merged because I don't want to make him rebase/merge too much.
",bsansouci,2015-08-02 22:35:44
70,2015-08-02 22:35:44,"Closing because too general. Will open specific issues if needed.
",chenglou,2015-08-02 22:35:44
69,2015-07-15 21:00:38,"This way you get to use libraries like Immutable-js without explicit support for them.
",chenglou,2015-11-25 08:13:56
69,2015-07-16 13:24:58,"That is a great idea.
",nkbt,2015-11-25 08:13:56
69,2015-08-09 00:52:17,"That'd be awesome!
",dozoisch,2015-11-25 08:13:56
69,2015-08-13 18:24:21,"+1
",maslianok,2015-11-25 08:13:56
69,2015-11-25 08:13:56,"Closing this =).

Will reopen in the future if I can take immediate action. But for now, since `style` is a flat object there's really not many reason to use an iterable (?). Plus, for-in loop is much faster?.
",chenglou,2015-11-25 08:13:56
68,2015-07-15 17:51:38,"Hi Chenglou,

Here are my thoughts after integrating the `Spring` API yesterday:
- Users of my components will have trouble understanding stiffness/damping compared to the slightly more intuitive and common curve/duration.
- In some instances the `Spring` animation doesn't return to a stable state.
- Would be great to see some predefined constants like you get with most curve animation libraries (e.g. stiff_spring, wobbly_spring).

I love the API design but would really like to have the choice to use a Tween object. I know it's got issues like you mentioned in the React-Europe talk but I don't think it would hurt to provide a traditional approach to animation as well.

<S_CODE_TOKEN>
",twobit,2015-07-29 05:33:47
68,2015-07-15 18:02:42,"I do plan to document a certain set of configs such as the default one and `[120, 17]` (bouncy).

What do you mean by stable state? Is this related to #31?

The API works for normal tweens, but as soon as you try some interruptible stuff the curve begins to look weird. I was thinking of taking [tween-state](https://github.com/chenglou/react-tween-state)'s additive animation to solve this. But then again you could just use tween-state for now =P.
",chenglou,2015-07-29 05:33:47
68,2015-07-15 18:37:40,"Here's an example of the unstable spring issue. It seems to happen when there's a lot of items to render.
![image](http://fat.gfycat.com/FlakyResponsibleAfricanparadiseflycatcher.gif)

Definitely don't want to go back to tween-state since we've migrated to ES6 style classes. Regardless, thanks for your work on these libraries.
",twobit,2015-07-29 05:33:47
68,2015-07-15 18:53:05,"@iclanzan your PR fixes this right?

And yeah, we can port tween-state onto this. Good thing we've chosen a curve-agnostic library name.
",chenglou,2015-07-29 05:33:47
68,2015-07-15 19:04:12,"@iclanzan 's PR should resolve almost all issues regarding stability even given the frame-rate changes during resizing. @twobit Can you try out #57?

rebound-js has converters from Origami (where `k` and `b` are represented as `tension` and `friction`) and Pop (`bounciness` and `speed`): http://facebook.github.io/rebound-js/docs/rebound.html#section-61
",razh,2015-07-29 05:33:47
68,2015-07-15 19:29:30,"I feel like having @twobit's suggested stiff_spring and wobbly_spring and such solves point 1? No trying to dissuade my porting tween-state over, but it seems this can be delayed quite a bit if we do provide convenient named configurations (even more so that they're literally an array of 2 elements that you can inspect and play around with).

Unrelated: react-motion at first almost used rebound-js. Then I realized I only needed a tiny chunk of the library so I just wrote the stepper.js code instead.

Unrelated 2: oh and this library does animate arbitrary data structures now, of course. cc @andreaferretti who mentioned this in chenglou/react-tween-state#22
",chenglou,2015-07-29 05:33:47
68,2015-07-15 19:34:34,"Yes, #57 should solve this.
",iclanzan,2015-07-29 05:33:47
68,2015-07-15 23:04:29,"#57 fixes the issue for me. Re Unrelated 2, really nice to see that functionality baked into the library :)
",twobit,2015-07-29 05:33:47
68,2015-07-17 05:38:33,"@twobit regarding your first concern - would you prefer an api like https://github.com/threepointone/react-ease? I've been meaning to port it over to react-motion, if possible.  
",threepointone,2015-07-29 05:33:47
68,2015-07-17 16:56:02,"@threepointone That looks pretty close but I rely on the object interpolation that Spring is doing
",twobit,2015-07-29 05:33:47
68,2015-07-25 19:58:48,"@twobit we've addressed point 2 already. I've made a demo to address point 1: https://cdn.rawgit.com/chenglou/react-motion/2a5f89bee700c6bbb0560eee0c8f9ad66d111bdd/demos/demo5/index.html

Have fun with it =)
",chenglou,2015-07-29 05:33:47
68,2015-07-26 01:59:48,"Yay!
",threepointone,2015-07-29 05:33:47
68,2015-07-29 05:41:57,"Alright, some carefully chosen constants are now exposed under `constants` [here](https://github.com/chenglou/react-motion/blob/372446fc8679dcdbf4de2e983d53709ab40ce88c/src/constants.js) and will go in the next release (the one after 0.2.2). This, along with that demo I linked above, should ease the usage of spring constants enough for me to deem this issue solved.

As for traditional tweens, @threepointone or I might port the stuff over in the future (I also remember hitting a roadblock with using tween with this API format but that might be wrong). Somewhat low-pri right now because I've got some cooler stuff to show =).
",chenglou,2015-07-29 05:33:47
68,2015-07-29 07:56:41,"Looking forward to the cool new stuff. Latest release looking good, thanks!
",twobit,2015-07-29 05:33:47
67,2015-07-15 08:31:36,"https://github.com/facebook/react/issues/1373 last point.

String-based refs don't work. Use [first-class refs](http://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute).
",chenglou,2015-07-25 22:22:01
66,2015-07-15 07:51:33,"Not sure why webpack doesn't output it anymore.
",chenglou,2015-07-15 18:07:33
66,2015-07-15 14:17:59,"`devtool: 'sourcemap'`?
",nkbt,2015-07-15 18:07:33
66,2015-07-15 18:07:29,"Well this is embarrassing, I thought I saw source map in the config but turned out that wasn't the prod config.
",chenglou,2015-07-15 18:07:33
65,2015-07-14 19:25:24,"This library is starting to look really awesome! 

I have a few questions about the goals of this library:
1. Do you see react-motion totally replacing the need for css transitions or is it intended to compliment them?
2. Should react-motion be used to transition between hover and active states of a component? Are their any performance implications with doing so?
3. Will we eventually be able to interpolate between color values instead of just integers to transition properties like backgroundColor and borderColor?

Thanks for you great work! Really looking forward to digging into this library in more depth.
",jschr,2015-07-14 19:33:26
65,2015-07-14 19:33:26,"Hey!
1. No, because sometimes you really just want a simple little animation on e.g. a small div. CSS transitions great at dealing with this at high perf and little API overhead. That being said, yes, you could use react-motion in these cases.
2. See above. Yes you can. Maybe it's a good idea? I haven't tried these small transitions much yet. This library solves more important problems than to compete against the area CSS transitions are specialized in.
3. You already can, since you can convert your number into a color value. The library doesn't expose any helper for doing so yet, but it should be trivial.

I guess this isn't really an issue so I'll close this. Feel free to keep asking more question below though. Alternatively, you could come sit with us in Slack Reactiflux #react-motion =)
",chenglou,2015-07-14 19:33:26
65,2015-07-14 19:35:51,"Appreciate your response! Ill check out the slack channel too

Thanks
",jschr,2015-07-14 19:33:26
64,2015-07-14 16:54:00,"This PR adds the ability to specify the wrapper component on Spring and TransitionSpring rather than let it default to a DIV. This is very similar to the way the current ReactTransitionGroup works. This will allow ReactMotion to work semantically in more places, as well as work inside Tables without causing invariant violations. I updated the readme to reflect the changes and added unit tests into Spring-test.js. Let me know if this looks okay! Thanks for the awesome work.
",bringking,2015-07-14 16:56:53
64,2015-07-14 16:56:53,"Hey! Check this commit: https://github.com/chenglou/react-motion/commit/8fc29c26c3915150a4638c520516b5f9e2817921

Neither Springs have the wrapper now, so you get what you want without a dedicated API =).
Closing unless I'm missing something. Thanks though!
",chenglou,2015-07-14 16:56:53
64,2015-07-14 17:19:02,"Hmm maybe I am confused, but returning  `React.Children.only(this.props.children(currVals))` still results in a <div> wrapper in the DOM. 
<img width=""463"" alt=""screen shot 2015-07-14 at 10 17 42 am"" src=""https://cloud.githubusercontent.com/assets/864845/8679781/957213ae-2a11-11e5-976d-74dbf79b5c4f.png"">

This PR allows you to change that to a SPAN or LI or whatever element you want. 
",bringking,2015-07-14 16:56:53
64,2015-07-14 17:22:44,"Oh, those are the old compiled files I didn't bother to build again from the new commits, sorry about that! I didn't want to check in huge files each time I make a change. Since the end result looks the same visually I will only be updating them once in a while.
",chenglou,2015-07-14 16:56:53
64,2015-07-14 17:24:43,"Ah I see, the demo's are running off old artifacts, got it. 
",bringking,2015-07-14 16:56:53
63,2015-07-14 12:40:29,"May be silly but I cant find the ""slowmotion"", ""rave the future"" and other keys used in react conf ?

Is it published somewhere ??
",tychotatitscheff,2015-07-14 17:09:22
63,2015-07-14 16:13:27,"Was removed in https://github.com/chenglou/react-motion/pull/23 but 

> We'll make an actual dedicated functionality for this in the future.
",hzoo,2015-07-14 17:09:22
63,2015-07-14 17:09:22,"Not silly at all! I knew someone would be asking for this =)
Feel free to revert to that commit and try the keys! But yes, lots of potential for tooling there.
Closing!
",chenglou,2015-07-14 17:09:22
63,2015-07-15 09:29:31,"I see !
And i understand the problem raised in #23.

Did you guys  thinks we can refactore this into a ""react-motion/addons""  it is quite useful to debug. 
",tychotatitscheff,2015-07-14 17:09:22
62,2015-07-14 02:33:13,"Such as, We need an collapse component. An collapse has some panel, every panel has a header element.

When header clicked, then panel open or close. The panel open need animate panel heigth for zero to panel's scrollHeight. Close action reverse.

The problem is, I can only get the hight(el.scrollHeight) of panel after the panel render. React-motion require the endState height, before the panel render.
",shepherdwind,
62,2015-07-14 02:38:20,"subscribing. :+1: 

@chenglou  ideas?
",chirag04,
62,2015-07-14 02:38:51,"Hey! <s>I think this isn't a problem specific to react-motion.</s> EDIT: definitely specific to react-motion because endValue will be called even on the first render. @chenglou maybe we should render once before calling endValue.

If you need the element's height before rending but you can only get it after at least one render, then you're going to have to set some default height. Then you can hook up an event handler that calls `this.setState({height: ...})` every time the event you need fires (here I'm guessing scroll?).
If you need to access a DOM element renderer by react you should look into using [refs](https://facebook.github.io/react/docs/more-about-refs.html).

In any case, only the first render will need some default value.
",bsansouci,
62,2015-07-14 03:04:28,"yeah there is no real way to solve this problem without actual rendering. It is not possible with any tools (not only react-motion). With css transitions you cannot animate height:auto either.
So it is possible to render element in the same container (in wrapper so it is invisible), get it's dom node height, then set wrapper state and only after that do animation knowing actual element height.

It is just the nature of ""fluid"" html rendering, you don't know the height until element is rendered. 

Maybe there could be some trick provided by browser renderer and exposed to js, but I am not aware of any existing at the moment.
",nkbt,
62,2015-07-14 04:36:47,"We could provide a helper/library in the future. Not in core, probably.

In this repo, the earlier commits show an example with css-layout. It worked really well. Glorious, glorious layout transitions. Didn't have time to put them into a respectable demo for the talk.

Leaving this open because yes, this is unfortunately an issue on the web and I want to provide a good default.
",chenglou,
62,2015-07-14 05:33:57,"I need that wrapper as well, so in next couple of days will make it. I made
it for other frameworks couple of times before. Just need that stuff done
for react now.

Gonna be fun
",nkbt,
62,2015-07-14 05:40:50,"The lesson we've learned from TransitionGroup is that while it handles its specific use-cases very well, those use-cases aren't enough. So here I'm going down a level of abstraction and provide means to diff on data itself rather than final components (which is less ideal than the latter, but much more practical until we find the right abstraction for diffing on components).

One neat thing we did before was that, since TransitionSpring diffs on the keys of your `endValue`, You can turn your css-layout output into that flat format, diff it, then ""re-hydrate"" it, so that at the end you get to diff on arbitrary layout structures. It was painful without helper methods though, but somewhat intriguing.

(TransitionSpring doesn't do nested diffs. Been there done that. Way too much boilerplate needed.)
",chenglou,
62,2015-07-14 15:30:09,"Since Spring lets us update an animation mid flow smoothly, how about this:
1. User clicks panel header to expand it
2. Spring starts to animate to an 'estimated' default height, say 100px
3. Contents are rendered and 'real' height is calculated 
4. Spring updates animation mid flow to the new 'real' height (say 150px)
5. Since all this happens in, say, 100ms, the animation still looks clean to the user and there is no jumping
",nick,
62,2015-07-14 17:11:59,"@nick that's what I meant when I said ""use a default value for the first render"" :D
",bsansouci,
62,2015-08-07 08:39:33,"guys, you're doing it wrong! All you need is a wrapping div. You set and animate height on the wrapper, meanwhile the content block always have `height: auto` so you may always know what the _true_ height is. You cut it to the wrapper height by having `overflow: hidden` on the wrapper. And that's it!
",constb,
62,2015-08-07 08:41:34,"@constb care to show a snippet? Say you're animating a box that's as high as the text inside it, from that height to 0.
",chenglou,
62,2015-08-07 09:37:23,"@constb wrapper is definitely needed if we don't want to mess up the content, but when we don't know the content height, we can't animate it. We first need to render content, get it's height and then do animation.
",nkbt,
62,2015-08-07 10:04:07,"I'm not familiar with react-motion api yet, so I made a simple demo in pure js. http://jsfiddle.net/constb/xur4pf6m/1/ I animate wrapper height that always has height of `0` or `auto` when not animating. Content lives inside and provides code with height value in pixels. Does that answer the question?
",constb,
62,2015-08-07 10:08:10,"@constb 

<S_CODE_TOKEN>

You get the `content.offsetHeight` to do animation. You need to know height of the content to do it. We are talking about animating element which is not yet rendered.
",nkbt,
62,2015-08-07 10:10:48,"@constb try to start with `var state = false;` instead ;)

Also try to do it when element is inserted dynamically to the page. So when you insert element, you want it to expand and not just appear instantly
",nkbt,
62,2015-08-07 10:25:42,"@nkbt easy. http://jsfiddle.net/constb/xur4pf6m/2/ my point is - if you need to know content height - render it into a wrapper with `height: 0; overflow: hidden;` and then animate wrapper's height. don't animate content height.
",constb,
62,2015-08-07 10:45:12,"@constb this is exactly what I suggested before =)
",nkbt,
62,2015-08-07 10:48:46,"@nkbt sorry, my bad. )
",constb,
62,2015-08-07 11:47:14,"@constb no problem, i completely forgot about this issue for a while, since it is not assigned to me. Oh, I wish we can ""assign to myself"" in Github for not owned repos...
",nkbt,
62,2015-08-11 01:22:08,"What's the best way for grabbing the height of the wrapper?

Not sure best where to store off/update state since that should be avoided in rendering, but I can't access the ref until after the initial render anyway.
",derekr,
62,2015-08-11 01:34:47,"@derekr check out this PR https://github.com/elementalui/elemental/pull/31/files for reference.
You will need to check the element height and margins.
",nkbt,
62,2015-08-11 01:45:05,"Awesome! Thanks @nkbt 
",derekr,
62,2015-09-24 14:55:35,"It works well to get the height (post-render) and then animate from 0 to that height. One hiccup along the way is when the content that has just rendered has images‚Äîthese images might not fully load for a second or two, causing a div to be cut short and showing all content (becuase the images that eventually render take up extra height, sometimes). To make it work, one solution is having some sort of listener for loaded images...and having that trigger the state change, which would then trigger the animation.
",sikhote,
62,2015-09-24 19:33:35,"The layout could change due to elements other than images, too.

The best would be to handle the elementresize event via its polyfill (there
is one based on overflow events, without polling the DOM for size changes,
sorry cannot provide the link now).
",sompylasar,
62,2015-09-24 20:19:47,"Something like this? https://www.npmjs.com/package/element-resize-event or http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/
",sikhote,
62,2015-09-24 20:58:38,"@sikhote Yeah! I stumbled upon this one before: https://github.com/sdecima/javascript-detect-element-resize (inspired by http://www.backalleycoder.com/2013/03/14/oft-overlooked-overflow-and-underflow-events/ ).
",sompylasar,
62,2015-10-05 12:10:16,"out of interest https://fabric.io/blog/introducing-the-velocityreact-library does a render a the 'completed' state to get the height before it starts it's animation.
",kristian-puccio,
62,2015-10-05 12:38:25,"Don't they have a flicker problem?
",chenglou,
62,2015-10-05 16:21:17,"Using Springs, I don't see a flicker when I animate the height of a container when checking if the height has changed (by setting the height to auto and reverting back) on componentDidMount and componentDidUpdate.
",sikhote,
62,2015-10-05 22:33:03,"@chenglou no can't see any flicker.
",kristian-puccio,
62,2015-10-12 16:47:25,"can react-measure be used for this?
",arush,
62,2015-10-15 14:48:53,"Just published https://www.npmjs.com/package/react-collapse
Issue can be closed I guess

I did not have time to fill README, will do it tomorrow. See example for reference. It is as simple as:

<S_CODE_TOKEN>

Supports multiple children. Support dynamic height. Unmounts collapsed children.
",nkbt,
62,2015-10-15 14:54:52,"Still kinda want to offer this out of the box if possible, though
",chenglou,
62,2015-10-15 14:56:11,"I think it is better not to include it into a react-motion itself. It is a not-so-pure component.
Better move it under `react-motion` org (when we have one) and reference from readme
",nkbt,
62,2015-10-16 15:14:51,"thanks @nkbt this is exactly what i was looking for ;)
",arush,
62,2015-10-16 19:37:04,"@arush :+1:
",nkbt,
62,2015-10-19 12:25:08,"Ok so i spent some time using both velocity-react and react-motion + react-collapse, and I have to say, I agree with @chenglou that animation to/from height:auto out-the-box is something I'd like to see in RM core. Honestly im finding myself wanting to use velocity-react for these situations just because the API is simpler. 

Height animation is one of the most important features for most TransitionMotion use cases - if you ever want something to enter/leave without the container-div to do that awful snap after the node is removed - the height will need to be animated to/from auto. This is a very common use case for menus, accordions, dropdowns, popovers/tooltips. Whether this is something that RM should deal with or simply pass off to Velocity.js (someday) idk, but the API should be simple for the developer.
",arush,
62,2015-10-20 08:03:47,"@arush can you raise an issue in react-collapse for what you find frustrating or what is not working for you? That would be really awesome.
",nkbt,
62,2015-10-22 12:26:10,"@chenglou in my experience, velocity-react does have a flicker problem, and doesn't deal with this situation easily either... here's the issue with some gifs: https://github.com/twitter-fabric/velocity-react/issues/36

in the end, velocity-react doesn't cater for auto height children elegantly without opacity and display hacks.

@nkbt Gonna look into react-collapse again.
",arush,
62,2016-02-24 05:49:30,"Stumbled upon this by looking for a way to collapse heights. Don't know if this will help or if it has already been solved by nkbt but you can collapse it while caring about the container's height with negative margin-top equal to the `outerHeight(true)` of the element in transition: http://codepen.io/corysimmons/pen/qbeyZz
",corysimmons,
62,2016-05-11 13:48:51,"+1
",maximelebreton,
62,2016-05-17 21:38:41,"I believe my initial comments above are out of date re: velocity-react. I am using their native `slide` methods to handle this pretty well now
",arush,
62,2016-06-21 12:37:16,"There is no CSS transition to from `height: 0;` to `height: auto;`. 

A [_(not so well-known)_ workaround](http://stackoverflow.com/a/8331169/2076595) to solving this problem is to, instead, animate `maxHeight` from `0` to a ridiculously high number. That way the items will grow from 0 to their actual height.

<S_CODE_TOKEN>

Fair warning though: do note that this kind of animation will perform very badly as [it will trigger layout](https://csstriggers.com/max-height).

Regards,
Bramus.
",bramus,
62,2016-09-15 19:01:06,"I'm a little late to this party. I spent hours researching this and trying to find a solution, including anything that `react-motion` can do for me.

I think this is what @constb is talking about or something similar. It is the approach I took. Nice, light, and all native.

This is the my `Accordion` content component:

<S_CODE_TOKEN>
",chrispeterson3,
62,2016-09-29 03:49:53,"@chrispeterson3 The above solution works nicely but it hardcodes the initial state to be always closed. I have modified it a bit to accommodate both open and closed initial states.

JS

<S_CODE_TOKEN>

CSS

<S_CODE_TOKEN>
",amit1911,
62,2016-10-17 23:36:37,"I am doing something like this on my Open component, any feedback would be much appreciated. The issue I have now is how do we animate from auto to an updated value? Assume the height of the children dynamically changes. 

Also for a slight performance boost, I am removing the nodes from the DOM when the components **if** props is set to false .

TSX

<S_CODE_TOKEN>

CSS

<S_CODE_TOKEN>
",jisaac89,
61,2015-07-13 20:31:45,"Any plans for creation of simplified wrappers for common transitions (e.g. adding items to list)?
Would be cool to have something similar to the `<SimpleTransition />` I'd implemented in [this demo](https://jsbin.com/wowupi/edit?js,output), but better :smile: 
",yamalight,2015-07-29 05:51:09
61,2015-07-13 20:56:06,"Actually, before we get to wrappers, I _might_ be able to release a simplified API for those things. Stay tuned tonight/tomorrow
",chenglou,2015-07-29 05:51:09
61,2015-07-13 21:40:07,"@chenglou oh, sounds pretty awesome! can't wait to see it :+1: 
",yamalight,2015-07-29 05:51:09
61,2015-07-29 05:51:09,"Alright! @souporserious is experimenting with some simple wrappers [here](https://github.com/souporserious/react-motion-ui-pack). I personally haven't used them yet but they look neat.

As for the simple wrappers, https://github.com/chenglou/react-motion/commit/372446fc8679dcdbf4de2e983d53709ab40ce88c exposes some commonly used spring constants. With these, I think something like:

<S_CODE_TOKEN>

is short enough not to warrant actual wrapper components in core lib. Might change in the future if I spot some more complex use-cases (e.g. advanced `TransitionSpring`). But for now I'll close the issue =).
",chenglou,2015-07-29 05:51:09
61,2015-07-29 15:47:23,"@chenglou looks great, thank you!
",yamalight,2015-07-29 05:51:09
60,2015-07-13 19:56:53,"Is there a a good way to apply forces to a system? A use case is when you drag an element on a touch device and release it with a specific velocity. You want the element to being thrown into that direction.

Additionally an element could have another force that is being applied on it, so that it will eventually move to a specific end position.

Compare for example the [photo gallery](http://petehunt.github.io/react-touch/#/viewer) of the react-touch demo of Pete Hunt. When you flick with a higher velocity, multiple photos can be navigated at once.

Is there a recommended way for doing this with react-motion?
",amannn,
60,2015-07-13 20:00:34,"Yup coming up! @chenglou's fixing some important thingy inside the API so we're waiting on those before adding features. 
It'll probably a prop like `currVelocity={currVelocity => ...}`
",bsansouci,
60,2015-07-13 20:16:55,"Great, thanks for the quick response!
",amannn,
60,2015-07-13 23:47:55,"I'm actually working on a photo gallery while exploring touch gestures and velocity. I'll ping you as soon as I get a gist up in the next couple of days.
",bsansouci,
60,2015-07-14 06:21:18,"Cool, thanks!

Btw. for inspiration for physics based animations the examples from Ralph Thomas are also very nice: http://iamralpht.github.io/constraints/ and http://iamralpht.github.io/physics/. If these can be rebuilt with react-motion then I don't know what else there could be in this lib. But he is actually lacking some features that react-motion is capable of, such as setting an end value.
",amannn,
60,2015-07-14 06:25:47,"Haha, I've talked to him, definitely knows what he's doing.
Hey @iamralpht, check out this new repo =).

My goal is to get as declarative as the constraint stuff, which I _really_ appreciate. Unfortunately JS isn't expressive enough, and most people will be scared away by the constraint API so as a pragmatic reason I'll hold off. Now, if you could somehow express these constraints naturally using react's component hierarchy, I'm immediately deprecating this repo.

(Kidding, react-motion's awesome so far, but still.)
",chenglou,
60,2015-08-25 18:12:27,"Any news on this? :)
",amannn,
60,2015-08-25 18:13:52,"Not yet; hopefully soon.
",chenglou,
60,2015-09-24 15:28:08,"I'd love to see some way to do this too, just being able to set current state and velocity would cover my use case - I tried with setState but I'm guessing #88 prevents this working.
",benjeffery,
60,2016-01-05 04:25:14,"#252 might be a subset of this. 
",appsforartists,
60,2016-01-05 19:50:54,"You can view his source to see his implementations of [friction](https://github.com/iamralpht/iamralpht.github.io/blob/master/physics/friction.js), [gravity](https://github.com/iamralpht/iamralpht.github.io/blob/master/physics/gravity.js), etc.  They look fairly modular - composing them into react-motion might be a good first-step into moving beyond strictly springs.
",appsforartists,
60,2016-10-11 23:05:01,"I assume this has fallen off the map, but just as food for thought: what might this API look like? Is there any way to provide force/impulse in a declarative way?
",BrennanRoberts,
59,2015-07-13 17:05:13,"I initially tried using the following code which didn't work:

<S_CODE_TOKEN>
",nick,2015-07-14 06:17:10
59,2015-07-13 17:22:56,"That's because I used webpack's bundling of requires rather than babel's. Your `Spring` is exposed under `require('react-motion').default`. If it was babel it'd have automatically added a line to make it work. Related: https://github.com/Microsoft/TypeScript/issues/2719

Same problem when you include it as a script tag. A bit annoying. For now the above method works but I'll look into whether webpack can do this too. I use webpack's require because for some reason, if I directly export UMD from babel, webpack doesn't know how to expose a `Spring` afterward. Maybe a bundling expert can help me with this here.
",chenglou,2015-07-14 06:17:10
59,2015-07-13 17:29:24,"I'm not explaining this very well lol. @nkbt probably knows this better than I do.
",chenglou,2015-07-14 06:17:10
59,2015-07-13 21:48:39,"Since it is all react anyways, isn't it better to simply transform
everything as separate files with babel and not use webpack?

Bower is another story, but who actually use it these days? If you still
wish to publish for bower, make an additional build.
",nkbt,2015-07-14 06:17:10
59,2015-07-13 22:16:44,"Right, the only reason why I'm even bundling with webpack is for bower support. Thought it was convenient that I can kill two birds with one build. So, if we support bower/script tag, we still need that build, and that's the problem.
",chenglou,2015-07-14 06:17:10
59,2015-07-13 22:17:17,"https://github.com/chenglou/react-motion/pull/30
",chenglou,2015-07-14 06:17:10
59,2015-07-13 22:23:51,"Need 2 builds. Bower, sigh
",nkbt,2015-07-14 06:17:10
59,2015-07-13 22:24:26,"I'm surprised to see react ppl using bower
",nkbt,2015-07-14 06:17:10
59,2015-07-13 22:25:50,"I've gradually removed bower support for my other repos. But to be fair, maybe we're a bit in an echo chamber here. Some friends the other day told me they were still using script tags. Dunno about the intersection of people using bower/script tag and those using react-motion
",chenglou,2015-07-14 06:17:10
59,2015-07-13 22:27:01,"I can fix this stuff
On Jul 14, 2015 8:24 AM, ""Nikita Butenko"" nik@butenko.me wrote:

> I'm surprised to see react ppl using bower
",nkbt,2015-07-14 06:17:10
59,2015-07-13 22:29:51,"Worst that you have to keep build artifact in repo for bower.
",nkbt,2015-07-14 06:17:10
59,2015-07-13 22:31:22,"^ I know... that was one of the reasons I didn't want it. Lemme ask on Twitter or something.
",chenglou,2015-07-14 06:17:10
59,2015-07-13 22:41:40,"Yeah, let's support it, for now...
",chenglou,2015-07-14 06:17:10
59,2015-07-14 00:12:28,"This actually seems correct to me.

`react-motion` export is an ES6 module, so it has `Spring` as the default export, and some other named exports. It's not a bug or a mistake‚Äîit's just the way ES6 exports work.

If you don't want that behavior, you can go back to using `module.exports = Spring`, but then you'd have to change other named exports to be `statics` on `Spring`.

Not a Webpack issue, is it?
",gaearon,2015-07-14 06:17:10
59,2015-07-14 00:13:55,"Even Babel can't ‚Äúmake it work‚Äù on the export side.

Babel does ‚Äúinterop import‚Äù on the import side: if you import an ES5-style module from Babel, it will ‚Äúpretend‚Äù it has a default export.

But it can't turn an ES6 module into something consumable by ES5 code without `.default` because that's just the spec.
",gaearon,2015-07-14 06:17:10
59,2015-07-14 00:14:36,"It's not a mistake, but Babel goes a step further and does

<S_CODE_TOKEN>

After which you can use `var Spring = require('react-motion')` directly.

You know what, maybe there shouldn't be a default export for this library?
",chenglou,2015-07-14 06:17:10
59,2015-07-14 00:15:02,"Oh, you're right.
But let's make `Spring` named export then? Problem solved :-)
",gaearon,2015-07-14 06:17:10
59,2015-07-14 00:15:37,"We can have the excuse that I might expose a `Decay` component, heh
",chenglou,2015-07-14 06:17:10
59,2015-07-14 00:15:40,"After all it's not just one component..
And people can write

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

and everyone's happy
",gaearon,2015-07-14 06:17:10
59,2015-07-14 00:16:06,"You already have a `TransitionSpring` so it's fair deal now I think
",gaearon,2015-07-14 06:17:10
59,2015-07-18 07:20:24,"Okay, the mystery of the Century revealed. This is why people still use bower - Rails! Going to explore some ways to support bower without checking in pre-built code into a repo.

I'll make a PR if I come up with some reasonably good solution.
",nkbt,2015-07-14 06:17:10
58,2015-07-13 07:16:57,"https://twitter.com/_chenglou/status/620462319806447616

Maybe we could try it in this library. It's not user-facing (unless you fail to strip away the tests correctly of course) so I'm fine with experimenting, especially when the repo's still at its infancy. We might not want to switch to something as crazy as this for an established repo.

Alternatively,

<S_CODE_TOKEN>

And somehow let babel transform & webpack + uglify to strip this away in the same manner.
(I can't believe I'm suggesting decorators)

Naturally, this is mostly testing library-agnostic.
",chenglou,2015-07-13 08:28:52
57,2015-07-12 21:45:52,"I have adapted this from a [project](https://github.com/iclanzan/momentum) I started working on a few days ago.

The animation loop has the following features:
- Decoupled stepping from rendering so that stepping can be done using
  a constant time step which is very important in any numerical
  integration.
- API that allows passing in pure functions.
- Pauses when browser tab is not visible (more accurately when the
  ticker is called too infrequently).
- Stops automatically when there are no more animations to run.
- Supports rendering with interpolation.

I would really appreciate some feedback to make sure we take this in the right direction.
## API

<S_CODE_TOKEN>
## Explanation

This library is basically a very simplified physics simulation engine for React. Because of this we can learn from what others have done in the gaming industry.

I have done quite a bit of reading on the subject and looked under the hood of a number of game engines before writing this animation loop. Here are [some](http://gafferongames.com/game-physics/fix-your-timestep/) [good](http://www.koonsolo.com/news/dewitters-gameloop/) [articles](http://gameprogrammingpatterns.com/game-loop.html) on the subject.

So what is the animation loop? The animation loop is the heartbeat of our engine and is responsible for calling the function that updates our physic simulation whenever a frame can be rendered. One update cycle is called a **step** and in the case of browsers **requestAnimationFrame** dictates when a frame can be rendered.

At any given step, a physics simulation, just like this library, uses [numerical integrations](https://en.wikipedia.org/wiki/Numerical_integration) to compute the state of the ‚Äúworld‚Äù from the previous step‚Äôs state. As such, this state is only an approximation of how a similar system would behave in the real world.

In order to ensure the stability of the system and to have accurate integrations it is important to do the stepping in fixed time increments or **fixed time step**. The problem with `requestAnimationFrame` is that it gets called at irregular (many times dramatic) intervals.
### Step

In order to solve this problem stepping needs to be decoupled from rendering. The way this works is whenever `rAF` is called we accumulate time. When enough time is accumulated we advance our simulation. If for example at any point in time we have accumulated `35ms` and our chosen time step is `16.6ms` then the system will advance by 2 steps in one frame.
### Render

When it‚Äôs time to render, we inevitably run into an awkward situation where our world stays the same for 2 frames in a row when not enough time accumulates to make a step. Many times this is followed by a frame in which two steps are made. This leads to an irritating jitter when rendered. The solution is straightforward though. Knowing the current and previous state as well as the unused accumulated time, we can [interpolate](https://en.wikipedia.org/wiki/Linear_interpolation) all values resulting in buttery smooth animations.
### Time Step

The time step has a direct impact on the progression of the simulation. The lower the time step, the more accurate and stable the simulation gets. The higher the time step, the more brittle it becomes. In my experience the system becomes very unstable at any time step above `1/20` seconds or `0.05` ms with objects flying everywhere and does not noticeably improve accuracy for time steps below `1/120` seconds or `0.008` ms. Remember changing the time step does not mean a change in the rendered FPS. It just means the simulation does more or less steps per frame. What it does mean however, is that it impacts performance. A higher time step means more performance at the expense of stability and accuracy. I think a safe bet is a time step of `1/60`.
",iclanzan,2015-07-17 18:33:53
57,2015-07-14 15:35:00,"## Demo 1 with 1000 elements

### Before

<img width=""690"" alt=""before"" src=""https://cloud.githubusercontent.com/assets/1806943/8677206/6abe7626-2a56-11e5-8199-7c9e04d37044.png"">

### After

<img width=""690"" alt=""after"" src=""https://cloud.githubusercontent.com/assets/1806943/8677211/74a5d274-2a56-11e5-814f-00612ffd0d23.png"">

Took it to the extreme to demonstrate my point, but moving the mouse around in the current master blows all 1000 elements off the screen. I had to wait a bit to get that screenshot. With the animation loop the system is stable regardless of frame rate.
",iclanzan,2015-07-17 18:33:53
57,2015-07-14 16:52:14,"Woah :+1:
",chenglou,2015-07-17 18:33:53
57,2015-07-14 19:21:50,"what about that memory usage?
",stryju,2015-07-17 18:33:53
57,2015-07-14 19:23:33,"What's the bottleneck on memory here? We allocate quite a bit in some places (ahem, `clone`, because I can't do mutative programming to save my life), and it might not be related to this diff but might make it worse?
",chenglou,2015-07-17 18:33:53
57,2015-07-14 20:13:33,"Believe it or not the reason it is using so much less memory in the _before_ example is because most of the 1000 elements are off screen. When they are all on screen it matches the usage from the _after_ example. I can reliably reproduce this.
",iclanzan,2015-07-17 18:33:53
57,2015-07-14 20:46:47,"ah, true
",stryju,2015-07-17 18:33:53
57,2015-07-15 23:30:37,"@nkbt what do you think? It solves https://github.com/chenglou/react-motion/issues/68#issuecomment-121707570 so right off the bat that's pretty good. I'll give this a better read tonight/tomorrow
",chenglou,2015-07-17 18:33:53
57,2015-07-16 06:23:22,"> > Many times this is followed by a frame in which two steps are made. This leads to an irritating jitter when rendered. The solution is straightforward though. Knowing the current and previous state as well as the unused accumulated time, we can interpolate all values resulting in buttery smooth animations.

This introduces inaccuracies intentionally, correct? The most accurate thing to do would be to recover by advancing two steps in the next frame. But what you're saying is that it is more visually appealing to recover from a dropped frame by interpolating to some value in between the previously displayed value, and the most accurate value? Is my understanding of your approach correct?
",jordwalke,2015-07-17 18:33:53
57,2015-07-16 10:49:46,"I don‚Äôt think you understand correctly. The simulation is recovering by advancing 2 steps, but the fact that  there are frames in which a different number of steps are taken (usually 0, 1 or 2) means that the animation will not look good. I will try to provide an example of what happens somewhere in the middle of an animation with the time step of the simulation set to `16ms` for simplicity. A _frame_ is whenever `rAF` gets called and `dt` is the time delta between calls. `at` is accumulated time.
- **Frame 1, `dt: 5ms`, `at: 5ms`**: We don‚Äôt have enough accumulated time to make a step (16ms needed) but we still advance our simulation by one step, subtracting the time step from the accumulated time, leaving us with `at: -10ms`. This new accumulated time tells us that we are are _31.25%_ of the way to this last step we computed so we render our values in between the previous step and this last step, but very closer to the previous step.
- **Frame 2, `dt: 10ms`, `at: 0ms`**: The previous `at: -10ms` plus the current `dt: 10ms` results in a new `at: 0ms`. Since we don‚Äôt have any accumulated time we don‚Äôt advance any step but it also means that we are positioned exactly at the last calculated step so we render that.
- **Frame 3, `dt: 17ms`, `at: 17ms`**: We have more than our time step in accumulated time so we advance our simulation by two steps. That leaves us with `at: 17ms - 2 * 16ms = -15ms`. This means that we need to render interpolated between the last and previous steps closer to the previous step.

Without interpolation at **Frame 2** the objects in our simulation would not move at all and at **Frame 3** they would move 2 steps. This is what would cause the jitter.

Hope this makes any sense.
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 11:08:54,"@chenglou so far I do not have any major concerns. I want to give it a try on my current project to see how it works in real app. I will comment in the next hour or two.
",nkbt,2015-07-17 18:33:53
57,2015-07-16 12:13:38,"I checked on my project, with some animations in there. Not too many though. Can't see any difference, which is a good sign.

I also reviewed more the source code in Webstorm. It is kind of opinionated, but it is quite difficult to work with this code - didn't see that much OOP in JS for months. I would definitely consider refactoring the animationLoop into bunch of pure functions.
",nkbt,2015-07-17 18:33:53
57,2015-07-16 12:47:48,"@nkbt I am totally open for refactoring and am all for pure functions but I fail to see what I could simplify. Can you give me some pointers? 
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 12:55:20,"@iclanzan well it is kind of full-refactoring of the code, removing `this` references, moving things to functions without side effects and so on. No concrete examples though for now. It is my own opinion and I'd better wait for @chenglou word on the case.

If we decide to go functional, then you will need to rebase against the latest master first and then we  can work on the code itself.
",nkbt,2015-07-17 18:33:53
57,2015-07-16 13:11:41,"Dealing with animations is by nature stateful and with side effects. That state needs to live somewhere. If state stays in the animation loop then you can have pure `step` and `render` functions. Otherwise state needs to be kept in `Spring.js`.
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 13:18:13,"That is right, I would just prefer to keep state in closure and not in the object.
",nkbt,2015-07-17 18:33:53
57,2015-07-16 14:12:27,"Oh, that is easily doable. Something like this https://github.com/iclanzan/momentum/blob/master/lib/animationLoop.js? Ignore the emitter. 
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 14:20:36,"kind of. I would even go further, extracting functions out of the factory and passing params to them, so functions stay pure (well, to some degree). In this case each function can be easily tested separately.
",nkbt,2015-07-17 18:33:53
57,2015-07-16 14:28:15,"Ok, can do that too. How would the outside world call those functions though? Would I partially apply everything?
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 14:36:12,"partial application yes, arguments.... depends on a situation
",nkbt,2015-07-17 18:33:53
57,2015-07-16 14:37:06,"Keep this code anyway to compare performance and mem consumption later
",nkbt,2015-07-17 18:33:53
57,2015-07-16 15:16:21,"Alright. I will write some tests for what we have right now so this can be merged because there are a number of people waiting for the fixes that the animation loop brings.

After that we can play with refactoring and benchmarking. Does that sound good?
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 16:40:16,"I‚Äôm curious how @DrBoolean would approach the animation loop from a functional perspective.
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 16:57:18,"I've been trying out this branch with a carousel i'm building. The improvements make iOS Safari go from being unusable to performing very fluidly.
",AndrewIngram,2015-07-17 18:33:53
57,2015-07-16 16:59:46,"@AndrewIngram That is terrific news!
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 17:06:45,"Hm, there does seem to be a noticeable lag between interactions and the animation though. Which isn't present in the iOS Simulator, just on actual devices.
",AndrewIngram,2015-07-17 18:33:53
57,2015-07-16 17:09:38,"Any way you could record the screen? And by interactions do you mean when you move the finger across the screen?
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 17:22:40,"Recording the screen might be tricky, i'll try and figure something out. But essentially the endValue of the spring is set as the result of a touchMove event. So for slow movement i'd expect the position to stay more-or-less in sync, and to drag slightly behind for fast movements. This is how it behave on desktop browsers and in the iOS simulator. On an actual device there's a delay of about half a second before spring suddenly jumps into action, then there appears to be a relatively consistent lag behind all subsequent touchMove events.
",AndrewIngram,2015-07-17 18:33:53
57,2015-07-16 17:39:34,"If the animations are running smoothly when you don‚Äôt interact with the device then it could be a problem with how touch events are handled. I know in the demos they trigger unnecessary re-renders which cause lag. This is made worse by the fact that these events can fire more frequent than can be rendered.

I tested demo 1 on the iPhone (real device) and it works smoothly up to 100 elements when I‚Äôm not touching the screen. Touching the screen causes some jitter.
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 18:14:38,"Yeah I didn't want to comment on the OOP-ness because it's the idea that's important here. But I did mind a bit that it's OO. Regarding state, this library should enable time-travel and such (@gaearon) and I really don't want any state that lives in some place that's gonna be hard to reach. Closures are fine and being inside components is totally fine.

Also is it just me or do the instabilities not happen unless I switch away browser tab? 1k chat heads on master.

@AndrewIngram just to make sure: the touch delay issue happens on this PR in particular and not on master?
",chenglou,2015-07-17 18:33:53
57,2015-07-16 18:17:58,"@chenglou They happen without switching tabs. You do have to wait a bit for more of the elements to start animating since they all start in the top left corner. Just move your mouse around the screen and you should see it get unstable. I can always reproduce it.
",iclanzan,2015-07-17 18:33:53
57,2015-07-16 18:24:35,"@chenglou pretty sure it happens on master too, but it's hard to be sure because the poor performance means it's jumping around a lot
",AndrewIngram,2015-07-17 18:33:53
57,2015-07-16 18:36:01,"Great, nice to hear it's not this PR's problem =). If you want, please file an issue and a small repro (like you've written here) for it
",chenglou,2015-07-17 18:33:53
57,2015-07-16 22:44:36,"Super cool stuff @iclanzan, great read!
",bsansouci,2015-07-17 18:33:53
57,2015-07-17 13:17:01,"Just checking in again. The poor performance I was experiencing was due to some poorly written components on my end within the Spring. This pull requests still performs better than master, and I still have concerns about mobile performance, but the situation isn't quite as bad as I thought.
",AndrewIngram,2015-07-17 18:33:53
57,2015-07-17 15:48:32,"Yeah I'm ready to merge this. The OOP-ness doesn't matter. Not user-facing so we'll gradually work on it.
",chenglou,2015-07-17 18:33:53
57,2015-07-17 16:51:27,"@chenglou I guess you can merge it and we will keep improving it.
",iclanzan,2015-07-17 18:33:53
57,2015-07-17 17:04:13,"Should we squash this? Also, would be nice to be merged without conflict 
",chenglou,2015-07-17 18:33:53
57,2015-07-17 18:20:17,"Here you go :)
",iclanzan,2015-07-17 18:33:53
57,2015-07-17 18:34:20,"BOOM! Fixes #31 
(Edit: oh, comments don't close issues...)
",chenglou,2015-07-17 18:33:53
56,2015-07-12 11:56:34,,cody,2015-07-12 19:45:29
56,2015-07-12 12:02:07,":+1: 
",nkbt,2015-07-12 19:45:29
56,2015-07-12 19:35:52,"So there were no such thing as just `scale`?
(Hey cody, I remember your profile picture =))
",chenglou,2015-07-12 19:45:29
56,2015-07-12 19:44:40,"@chenglou 
Safari complains that

> Viewport argument key ""scale"" not recognized and ignored.

and Chrome says:

> The key ""scale"" is not recognized and ignored.

The possible values for viewport are documented at MDN:
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
",cody,2015-07-12 19:45:29
56,2015-07-12 19:45:27,":+1: 
",chenglou,2015-07-12 19:45:29
55,2015-07-12 11:55:00,"I think the best way to move animation forward in react is to make it dead simple to experiment with the animation on a set of potentially multipage actions.

For example, let's say I have an admin panel, I have a certain flow to getting from listing to a form and then performing an action and I want to set some nice animations for doing all that, ideally by setting a crude version then experimenting by recording and replaying back.

This can potentially benefit more then just the developer.

For simplicity sake, lets assuming we have the following, as their not that hard (probably) and some technologies related to them are still surfacing as we speak or in their growing stages (eg. baobab v2).
- a single application state tree like structure (eg. baobab) that holds all the data in the application
- we save animation configuration exclusively in the tree structure and its inteded to be constant for the lifecycle of the application (except when we're intentionally editing in development)
- we have a timeline system that can save all changes made to said structure from one predefined start point to a predefined end point
- we have a simple interface for viewing and editing nodes in the tree (ie. for our purposes mainly animation configuration nodes)
- we can reset the entire state with out any page reload and we can also save to localStorage and reload

**Problems & Questions**

How could we go about saving animation state to said structure? (with out key paths everywhere)
How can we go about triggering animation state from said structure?
How can we go about storing animation configuration in the state structure?
How can we go about reading in a human understandable format the configuration from the tree?
How can we go about resetting everything? (ie. stop/replay)
How do we handle animation that's applied to many items? (ie. shared components that appear in multiple areas)
",srcspider,2015-11-25 08:16:58
55,2015-07-12 12:03:59,"This works well with https://github.com/in-flux/in-flux
I mixed it with react-motion last week and got smooth and awesome transitions for different components navigation on the page
",nkbt,2015-11-25 08:16:58
55,2015-07-12 12:04:27,"Not sure how all this related to react-motion itself.
",nkbt,2015-11-25 08:16:58
55,2015-07-12 12:40:25,"Hm. With the multiple-page example I didn't mean that this would be a system that would be handling page change animation but that timelines recording should be able to go though routing systems. Sorry I guess I put too much emphasis on the pages changing. If you have a single page and are doing a lot of actions then it should be able to record that.

> Not sure how all this related to react-motion itself.

The system that does the animation should be the one that manages the timeline; or at least that's what I think, may be wrong approach. 

I started this as a theorycrafting to see if people have thought about the harder problems and have any insight or answers they could share. Ideas can always help in implementing other similar things even if something like the ideal solution described in the first post never comes to fruition. I know @chenglou implemented a very simple timeline system that he showed for his demos (off-topic: what's the keys for slowmo in demos anyway?) so figured he might have thought about some of the more adv. versions of that.

You may be right in that this may be better created as a seperate thing just to keep react-motion not bloated though.
",srcspider,2015-11-25 08:16:58
55,2015-07-12 12:47:47,"Hopefully I get it right this time...

timeline you are talking about seems like a cross-component state. When you want to share some state between components the answer is simple - use Flux.

That means you can create a timeline store to keep track state of animation and then apply it when needed to ReactMotion elements (or their animated targets directly).

You can also wrap your timeline component into ReactMotion and then do everything else the way you wish. Maybe with flux, maybe passing props to children.

This still seems like totally independent task. You can actually write some wrapper-component and publish it separately

PS: hack keys are gone for the moment. will be added back later
",nkbt,2015-11-25 08:16:58
55,2015-07-12 13:01:56,"@nkbt

> This works well with https://github.com/in-flux/in-flux

Cool. I'll have to parouse the code later. Sadly any router that requires being able to have access to the components when defining the router won't ever work for me, since my production needs requirements mean the component data never exists until someone requires the page (webpack require.ensure style universal app). The routers end up being very simplistic and custom built for the job.

> timeline you are talking about seems like a cross-component state. When you want to share some state between components the answer is simple - use Flux.

Uh. Maybe my way of doing things is just non-standard:
- all applications state of all components that exist (including placeholders for ones that dont yet) is stored in a baobab tree (and I do mean everything, form errors, form data, field data, page, page data, keys, user data, etc etc)
- anything that needs to do anything subscribes to that baobab tree (usually though baobab-react but I do explicit cursors too when I need to force certain patterns)
- if something in the application needs to happen you just have a function called (mainly call them actions, but dont really care honestly) that perform any data retrival if they wish to, and send changes to the application baobab tree; everything else just responds on it's own correctly since it's subscribed to the tree

I looked over flux, the patterns involved in it seems too unnecessarily verbose for my purposes. My way may not be the best but it's stupid simple, so easier to figure out when something goes wrong.

> That means you can create a timeline store to keep track state of animation and then apply it when needed to ReactMotion elements (or their animated targets directly).

I don't really understand this, but it may be just be that I'm missing something. I only found react-motion recently. I'll have to experiment some more.

> PS: hack keys are gone for the moment. will be added back later

:+1: 
",srcspider,2015-11-25 08:16:58
55,2015-07-12 13:04:04,"You don't have to require components for routing purposes. See explanation https://github.com/in-flux/in-flux/issues/52
",nkbt,2015-11-25 08:16:58
55,2015-07-12 13:05:17,"You should check out https://github.com/gaearon/redux and their DevTools.
",bsansouci,2015-11-25 08:16:58
55,2015-07-12 13:05:50,"Just wanted to give a link to redux as well, cheers =)
",nkbt,2015-11-25 08:16:58
55,2015-07-12 13:19:23,"off-topic but @nkbt in your in-flux/in-flux#52 example you still clearly have access to the Chart object. I'm sure it's dynamically loaded in some sense specific to in-flux but I don't see how it's dynamic in the sense I meant. When I say dynamic I mean the application has NO code for Chart and browser went and made a network call to get code that describes how to make a Chart page, injected that code into its current context along with all dependencies specific to getting Chart page to work and displayed the page. 

Anyway talking about routers will get complicated real fast, since as soon as you combine dynamic with universal apps you need to talk about entry points to enable the user to load only code specific to a page when they ask for a page; so it's probably best not to derail further.
",srcspider,2015-11-25 08:16:58
55,2015-07-12 17:51:45,"I really really want to build some cool demos with Redux DevTools + React Motion.
You can track Redux DevTools here: https://github.com/gaearon/redux/pull/234

They already allow time travel and hot reloading like I demoed in [my ReactEurope talk](youtube.com/watch?v=xsSnOQynTHs).

The nice thing about DevTools is it's easy to create your own. For example, instead of the sidebar with a list of actions (what I have right now) you can reuse time travel code but build your own UI on top of it. (For example, you can draw past and future states of the animation instead, similar to what @chenglou showed in his talk.)

If you'd like to give Redux a try and use its time travel implementation together with React Motion, hit me up here or on Reactiflux Slack channel and I can help you get it running.
",gaearon,2015-11-25 08:16:58
55,2015-07-14 22:09:29,"I just released [Redux DevTools](https://github.com/gaearon/redux-devtools).

Feel free to participate in the [custom monitor challenge](https://github.com/gaearon/redux-devtools/issues/3)!
Would be very cool to try this together with React Motion but it's time for me to go to bed.
",gaearon,2015-11-25 08:16:58
55,2015-07-15 00:00:10,"This is a non-brainer (btw how far have we come to be able assume that this can be done ""just like that""? Awesome), but just a comment: to do the replay correctly you need to keep track of every single state the animation is in, not just the final position. For example, this is cool: https://twitter.com/jlongster/status/619266601662201856

But it's not an intended behavior, in the sense that you probably _actually_ want it to snap to the destination without tweening. Transitioning between two destinations here is a byproduct of how react-motion + hot loader works (just like when you're modifying a css value of a class that has `transition`. It'll animate but you didn't intend it to). I'm not saying it's not desirable; in fact, it probably helps with prototyping some curves a bit, but again, it's not necessarily the intended behavior.

Likewise, rewinding time should literally rewind each state backward. If it's an ease-out, the rewind looks like an ease-in. If you're not tracking the intermediate values (state) and only asking the item to go back to the previous end position, you'll have an ease-out again. It still looks cool, but it's not what you're looking for.

That's just one aspect of this though. The other aspects of redux are still very valuable. And if you do record the intermediate states then it'll work fine (need to disable tweening between values though. You don't wanna interpolate between two intermediate values just because you're slow at dragging the timeline slider).

Btw you know what would be cool? That onion skin thing. I'm not sure how well it generalizes though, for stateful components and all. For stateless ones it looks really good. This is partially why I wanted a way to do the first point [here](https://gist.github.com/chenglou/34b155691a6f58091953).
",chenglou,2015-11-25 08:16:58
55,2015-11-25 08:16:58,"Great discussion btw, thanks again. But since there's nothing actionable for me right now (and I don't think RM's doing anything outrageous that'd prevent rewind/replay) I'll close this =).
",chenglou,2015-11-25 08:16:58
54,2015-07-12 11:46:30,"I suggest to create `react-motion` github org and put bunch of separate libraries under that org.

Here is a list of what can be implemented on top of react-motion:
http://madrobby.github.io/scriptaculous/core-effects/
http://madrobby.github.io/scriptaculous/combination-effects/

I would make them each as a separate wrapper-component in separate repo.

Will do some basic things like `react-motion-bounce`
",nkbt,
54,2015-07-12 17:44:12,"I really would love to see things built on top of react-motion, but I'm not sure this would have its place in this repo. @chenglou's the master though :p

Related to this, @kureev wanted some wrapper for looped animations and @souporserious started a repo for small UI components like those [here](https://github.com/souporserious/react-motion-ui-pack)
",bsansouci,
54,2015-07-12 20:45:27,"Not in the repo, sure. In separate repos of the org. Like it is done for
babel or webpack.
",nkbt,
54,2015-07-18 06:44:23,"+1. I also see a future where it'll be used for generating audio waves and stuff :) 
",threepointone,
53,2015-07-12 05:29:04,"One-by one syntax/lint fixes...
",nkbt,2015-07-12 08:06:44
53,2015-07-12 05:29:56,"you can just fix all the demos at once I think
",chenglou,2015-07-12 08:06:44
53,2015-07-12 05:30:35,"Also the triple equal rule is too strong. I use `a == null` to captured undefined too and that's the only place I use it.
",chenglou,2015-07-12 08:06:44
53,2015-07-12 05:34:57,"Hm. Double equal is quite unsafe. It is better to be more explicit. If you want to capture undefined AND null, then it should be actully written like that =).

Will fix all demos, ok
",nkbt,2015-07-12 08:06:44
53,2015-07-12 05:35:46,"Kinda used to it and Facebook internally allows it just fine. Don't worry, won't abuse it here.
",chenglou,2015-07-12 08:06:44
53,2015-07-12 05:36:37,"Okay. Will update eslint config then.
",nkbt,2015-07-12 08:06:44
53,2015-07-12 07:39:20,"(Is this done?)
",chenglou,2015-07-12 08:06:44
53,2015-07-12 07:44:04,"Yep. Walked through all modules and lint report is nice and clean now.
",nkbt,2015-07-12 08:06:44
53,2015-07-12 08:06:42,"Merging! Btw the style nits really have nothing to do with whatever ""internal rules"". Just got used to them personally and didn't want to juggle between them =)
",chenglou,2015-07-12 08:06:44
52,2015-07-12 05:15:38,"So we can safely process all files (future proof). And it is simply more convenient way to run `eslint .`
",nkbt,2015-07-12 05:19:16
51,2015-07-12 05:12:27,"Build is going ok, no issues with demos either.
",nkbt,2015-07-12 05:17:02
50,2015-07-12 04:57:10,"Fixes especially annoying npm-debug.log
",nkbt,2015-07-12 05:26:17
50,2015-07-12 05:29:15,"Cool, next step is for me to get a few API tweaks in, then we can start putting stuff in `src/` and update all the lint/test/webpack paths if there's any, 
",chenglou,2015-07-12 05:26:17
50,2015-07-12 05:33:29,"^ heads up to @dariocravero and @iclanzan who's decoupling the stepper function. Sorry for moving things around so fast. You folks got on the bandwagon early =)
",chenglou,2015-07-12 05:26:17
50,2015-07-12 05:33:40,"Yep. Awesome. I was thinking of fixing lint/syntax issues before moving files around. But order does not matter.
",nkbt,2015-07-12 05:26:17
50,2015-07-12 05:34:16,"Yeah moving will come later. I probably won't be done with the API today
",chenglou,2015-07-12 05:26:17
49,2015-07-12 04:29:26,"Only for development.
",nkbt,2015-07-12 05:20:33
49,2015-07-12 04:55:05,":+1: squash when you're done please
",chenglou,2015-07-12 05:20:33
49,2015-07-12 05:20:02,"Rebased and squashed.
",nkbt,2015-07-12 05:20:33
48,2015-07-12 01:31:17,"Is there a way to target the `react-motion` channel specifically for the slack badge?  
",johnamiahford,2015-07-13 17:11:06
48,2015-07-12 01:34:26,"I would think twice using slack for open source https://github.com/chenglou/react-motion/issues/33#issuecomment-120673921
",nkbt,2015-07-13 17:11:06
48,2015-07-12 03:15:08,"Wait I don't get how this diffed... The slack badge is already there. Weird?
",chenglou,2015-07-13 17:11:06
48,2015-07-12 04:04:59,"@johnamiahford hasn't rebased his branch
",nkbt,2015-07-13 17:11:06
48,2015-07-12 04:56:37,"Heh I thought that still wouldnt pass github's merge check. @johnamiahford can you rebase and add just the npm and bower badges please? Also, the existing slack badge should directly go to the channel already
",chenglou,2015-07-13 17:11:06
48,2015-07-12 08:13:38,"I can't join slack since no one invited me to reactiflux. Is it how it works?
",nkbt,2015-07-13 17:11:06
48,2015-07-12 08:14:30,"You don't need that (I know right, misleading...), just join with your email here: http://www.reactiflux.com
",chenglou,2015-07-13 17:11:06
48,2015-07-12 08:16:49,"Thanks. I'm too used to gitter
",nkbt,2015-07-13 17:11:06
48,2015-07-12 10:49:49,"Changed to shields.io badges to be consistent. 
",johnamiahford,2015-07-13 17:11:06
48,2015-07-13 07:19:14,"Argh those orange badges scream ""don't come near"". This is almost literally bike shedding but, is there a way to have the green/blue ones?

Also, use flat instead of flat-square to be consistent with the Slack badge please
",chenglou,2015-07-13 17:11:06
48,2015-07-13 10:57:40,"Ha. I'll see if I can pretty these up for you. 
",johnamiahford,2015-07-13 17:11:06
48,2015-07-13 13:31:15,"I've removed the bower package as it was returning not found. And went with the badge fury npm package as it gives us that pretty green we all love.
",johnamiahford,2015-07-13 17:11:06
48,2015-07-13 17:11:03,"Hmm that's weird, I'll take what's here then. Thanks!
",chenglou,2015-07-13 17:11:06
47,2015-07-12 00:14:28,,nkbt,2015-07-12 02:14:35
47,2015-07-12 01:13:45,"I think it's safe to enable babel loose mode?
",chenglou,2015-07-12 02:14:35
47,2015-07-12 01:32:43,"Loose mode for what exactly? I reckon you can enable it for certain features. Unless I miss something new
",nkbt,2015-07-12 02:14:35
47,2015-07-12 01:38:25,"aha, loose:all.
Will test it in a moment.
",nkbt,2015-07-12 02:14:35
47,2015-07-12 02:08:15,"With loose:all everything seems working with no problems. Updated PR.
",nkbt,2015-07-12 02:14:35
47,2015-07-12 02:14:30,"Alright, this is going well =D
",chenglou,2015-07-12 02:14:35
46,2015-07-12 00:14:16,,nkbt,2015-07-12 01:14:45
45,2015-07-11 10:59:43,"Hi @chenglou, could you shed more light on the `currV` and `currVals`? Have you thought about renaming them to something more meaningful? Thanks :)
",dariocravero,2015-07-17 20:58:01
45,2015-07-11 13:11:46,"I can explain the little bit that I know. Internally,  `currVals` has the same shape as `destVals` and is the thing evolving towards `destVals`. `currV` is the current velocity, which also has the same shape.

If you have:

<S_CODE_TOKEN>

Then internally `currVals` and `currV` will look like:

<S_CODE_TOKEN>

This allows us to have our `Spring` work on any kind of data structure. It also allows us to have `TransitionSpring` use the exact same algorithm with an extra diffing algorithm which assumes the top level of your values are unique keys:

<S_CODE_TOKEN>

More on `TransitionSpring` [here](https://github.com/chenglou/react-motion/issues/26) (thanks @chenglou for really detailed explanations of why/how)

They both are actually one tick old when we pass them to any user defined function, which would make them more like `intermediateValuesAtLastTick` and `valueVelocitiesAtLastTick`. I think they were intended to be the actual current value of the `Spring` @chenglou?

I think `Spring` was written that way (one tick ""late"") because it allowed us to not keep the `endValue` in the state of the `Spring` (we always receive it from the props). If we did `endValue(newCurrVals)` at the end of the `raf`  we'd need to keep the return of that call somewhere for the next `raf`. 

This maybe wouldn't such a bad thing in retrospect, for the sake of giving the most up-to-date value to the user? @chenglou @iclanzan what do you guys think?
",bsansouci,2015-07-17 20:58:01
45,2015-07-11 18:53:22,"Not sure how you'd give the most up-to-date current value since it depends on you providing the new `endValue`, which itself would depend on the said ""most up-to-date current value"". In short, with the current API, you can't. You can receive the `currentValue` from the last tick in `endValue`, and that's good enough since it's mostly used for staggering animation (or is it? I personally haven't found that to be a problem so far).

And yeah all 3 trees are of the same shape, to prevent any confusion/undefined value when the user access either of them in the same way. Pretty important for `willLeave` and `willEnter` too.
",chenglou,2015-07-17 20:58:01
45,2015-07-11 19:01:50,"Keeping this open because I think I can do a better job of explaining it in README/demos
",chenglou,2015-07-17 20:58:01
45,2015-07-12 13:42:37,"Thanks both for the explanation :) What about renaming `currV` to `currentVelocity` and `currVals` to `currentValues` then? I think would make it more explicit and easier to read too. Also, if `currVals` is going to become `endValue` on the next tick, they should probably share the same ending, i.e., `currVal` and `endValue` or `currVals` and `endValues`. With that in mind, perhaps `current` can even be removed altogether from the names, having: `velocity`, `current`, `end`. Thoughts?
",dariocravero,2015-07-17 20:58:01
45,2015-07-12 17:45:41,"`currValue` and `currVelocity` sound good to me :)
",bsansouci,2015-07-17 20:58:01
45,2015-07-12 19:30:28,"Those were always meant to be temporary names. If you go back in the commit history you'll see more outrageous ones, like `mary` or `epicMergeduce` `meldGoldIntoMold`, lol. Remember that the repo has only been officially released for **three** days (feels like forever?).

I'll check back on this issue once I finish refactoring other stuff.
",chenglou,2015-07-17 20:58:01
45,2015-07-12 21:49:14,"Haha I know @chenglou :) the reason for this thread was to raise that question. `meldGoldIntoMold` is just hilarious :P
",dariocravero,2015-07-17 20:58:01
45,2015-07-18 11:47:26,"Thanks! :)
",dariocravero,2015-07-17 20:58:01
44,2015-07-11 07:13:55,"Is it possible to apply the animation on the Spring component itself (eg: setting the style on the Spring component), the reason is to make use of the component dom node.
",salzhrani,2015-07-11 23:57:08
44,2015-07-11 08:11:16,"@salzhrani yes, all props passed to Spring are applied to rendered div.

<S_CODE_TOKEN>
",nkbt,2015-07-11 23:57:08
44,2015-07-11 15:56:47,"I wanted to say that I wanted to apply the spring value to the generated div. currently the calculated spring value is passed to the child function which I am not sure how apply it to the div generated by `<Spring>`

<S_CODE_TOKEN>

Sorry If I am not making any sense 
",salzhrani,2015-07-11 23:57:08
44,2015-07-11 18:47:32,"I'm not sure why you'd want to do that? The `div` used by spring is really just something used to circumvent the fact that React can currently only return one child. It's invisible anyway. You could apply it on the inner div you provide if you want: `<Spring ...>{val => <div style={...} />}</Spring>}`.
",chenglou,2015-07-11 23:57:08
44,2015-07-11 23:08:34,"I might be stingy with divs ... but I guess one more wouldn't hurt ...
Thanks.
",salzhrani,2015-07-11 23:57:08
44,2015-07-11 23:11:12,"Why does `Spring` _always_ have a `div`?

I'd rather go the opposite route: enforce `React.Children.only` on the `children` result. If people want a `<div>`, they'll pass it, otherwise they may pass something else.
",gaearon,2015-07-11 23:57:08
44,2015-07-11 23:13:19,"Hah, good point!
",chenglou,2015-07-11 23:57:08
44,2015-07-12 00:26:21,"Whoa ... thanks
",salzhrani,2015-07-11 23:57:08
43,2015-07-11 03:50:58,"In relation to this issue https://github.com/chenglou/react-motion/issues/20 and inspired from the functionality of ReactTransitionGroup. I think this is a very valuable prop since someone might want to animate an unordered list for instance and not have extra tags floating around.
",souporserious,2015-07-11 04:29:53
43,2015-07-11 04:29:53,"(Continued from Slack discussion)

React-motion doesn't have the constraint of TransitionGroup of needing a direct, flat list without wrappers right inside the component. This:

<S_CODE_TOKEN>

is no more tedious than this:

<S_CODE_TOKEN>

Former's actually clearer and doesn't require a dedicated API.

I get that your use-case is to create wrapper components on top of react-motion, of the format:

<S_CODE_TOKEN>

Where you want the FadeIn to become a `ul`. But frankly I've moved away from this because it felt inelegant (bad argument though...). Maybe [HoC](https://gist.github.com/sebmarkbage/ef0bf1f338a7182b6775) can better help you here? Once you've written the Enhance it should be just `<FadeInUl>` or something.

I'm closing this for now, for the same reason as #20. I don't feel the increased API surface is worth it.

(Relevant: https://www.youtube.com/watch?v=4anAwXYqLG8, something I stand by)
",chenglou,2015-07-11 04:29:53
43,2015-07-11 04:54:42,"@chenglou you can use something like 

<S_CODE_TOKEN>

This does not break React reconciliation and works fine. 
",nkbt,2015-07-11 04:29:53
42,2015-07-11 00:20:12,"Adding this means that npmjs.com will include a link to the repo here:

![npmjs.com react-motion page](http://i.imgur.com/DG5xcbD.png)

Example:

![npmjs.com browserify page](http://i.imgur.com/dpFdOVV.png)
",cesarandreu,2015-07-11 02:31:31
42,2015-07-11 02:31:30,"Thanks!
",chenglou,2015-07-11 02:31:31
41,2015-07-10 23:52:06,"The physics around the motion are super useful for other stuff that might not be React related; e.g., animating scroll - which may need to happen after render.
Would it make sense to extract the animation logic into its own module/function so that it can be used outside React's lifecycle? Am I trying to use this in the wrong way altogether? :) Thanks
",dariocravero,2015-07-11 19:01:02
41,2015-07-11 00:01:52,"I was thinking about exactly the same thing today and it feels like a lot of goodness here comes from React directly. The base logic for re-calculations could be extracted to some `*-core` though and used for non-react apps.
",nkbt,2015-07-11 19:01:02
41,2015-07-11 11:16:56,"@chenglou @nkbt [would love to hear your thoughts on this](https://github.com/dariocravero/react-motion/blob/extract-animation-from-spring/src/spring/animate.js).
",dariocravero,2015-07-11 19:01:02
41,2015-07-11 11:28:55,"Seems ok to me. In terms of syntax I would avoid redefining function argument.

<S_CODE_TOKEN>
",nkbt,2015-07-11 19:01:02
41,2015-07-11 11:31:40,"If it is recursive function, could look more interesting with currying

<S_CODE_TOKEN>
",nkbt,2015-07-11 19:01:02
41,2015-07-11 19:01:02,"Yeah definitely in the future, but not now at least. Issues like https://github.com/chenglou/react-motion/pull/39#issuecomment-120520787 (which I friggin love, thanks @iclanzan @razh!) are exactly why I'm postponing early-refactoring. By the time you're done with the modularization we'd have come up with e.g. a better way of rendering without passing `FRAME_RATE`.

And no, you're not using this the wrong way. Beside `setState` and the component declaration there aren't many React-specific things here (this is intended). But it's been like three days since the official release and we really need to work on the bigger issues (I got gestures coming, maybe =)).

I'm closing this for now because the issues are starting to pile up. Don't worry though, I do have this in mind!
",chenglou,2015-07-11 19:01:02
41,2015-07-12 13:47:57,"Good stuff :). It would be really nice to see this become a generic `motion` library and then have bindings for react. It's a pity [motion](https://www.npmjs.com/package/motion) is already taken ;). I'd see that logic being a separate package (motion's core) and any bindings to specific libraries or patterns could then have their own packages that use this.
Would it be a good idea to put a roadmap then?
",dariocravero,2015-07-11 19:01:02
40,2015-07-10 23:48:16,"In short:
- Extracted Spring and TransitionSpring into their own components.
- Introduced a Motion component that shares logic amongst them.
- Brought in redux scripts and build process.
- Moved utils into utils folder and into separate files. Commented out
  the ones that aren't being used.
- Tried to comply to as many eslint rules as possible :)
- Moved to using classes in components.
- Added empty tests.

I can update the PR with the recent changes if you are happy with the direction this is taking @chenglou!

This should set the base for a more modular approach :), thoughts?
",dariocravero,2015-07-14 18:44:50
40,2015-07-11 23:10:14,"I only know babelrc loose mode is faster but not sure what the edge cases are? Probably doesn't apply to this repo right?

Also this is way too big and has way too many conflicts lol, is it possible to have a PR for the babelrc and LICENSE? I can merge those easily
",chenglou,2015-07-14 18:44:50
40,2015-07-12 00:48:39,"@chenglou done #46 #47 
",nkbt,2015-07-14 18:44:50
40,2015-07-12 13:37:41,"@chenglou sorry about the size of the PR, I thought about chunk-sizing it too but it was too much trouble as one thing was depending on the other; mainly splitting Spring.jsx into multiple files and putting a better build process that outputs all the files to `lib`. I guess the question is: are you ok with the way this refactor was going? Or are you planning in keeping everything as it is?
",dariocravero,2015-07-14 18:44:50
40,2015-07-14 18:44:50,"Refactored a bit and the codebase actually has tests now (lol). Will gradually refactor more. I think it's safe to close this now =).
",chenglou,2015-07-14 18:44:50
40,2015-07-15 14:39:22,"I still think that Spring has to be split into more files but yes, it's a good start :). Let me know if you need some help with this!
",dariocravero,2015-07-14 18:44:50
39,2015-07-10 20:00:02,"More accurate and much more stable. https://en.wikipedia.org/wiki/Semi-implicit_Euler_method
",iclanzan,2015-07-11 08:32:25
39,2015-07-10 20:02:18,"Consider the old code `const newX = x + v * frameRate;`. Assuming no initial velocity `x` would remain unchanged after the first step.
",iclanzan,2015-07-11 08:32:25
39,2015-07-10 20:20:27,"Hah, physics =)
Curious though, how does this change make it ""semi-implicit""? The wiki article's a bit hardcore
",chenglou,2015-07-11 08:32:25
39,2015-07-10 20:44:39,"I don‚Äôt know why it is named ‚Äúsemi-implicit‚Äù but the difference to the standard Euler is that you use either the current velocity to to compute the current position or the current position to compute the current velocity. I chose the first approach to avoid the position staying the same after the first step.

Here are the methods exemplified in the context of our `stepper.js` file:

<S_CODE_TOKEN>
",iclanzan,2015-07-11 08:32:25
39,2015-07-10 20:50:31,"Also, the frameRate needs to be constant for best results with integration whereas right now the frameRate is all over the place because `requestAnimationFrame` does not fire at a constant interval.

For this reason it would make sense to decouple the stepper from rendering.
You might find this useful: http://gafferongames.com/game-physics/fix-your-timestep/.
",iclanzan,2015-07-11 08:32:25
39,2015-07-10 21:10:05,"Following up on a related article, thoughts on using RK4 for integration: http://gafferongames.com/game-physics/integration-basics/?

Here's a visualization of RK4:
![rk4_diagram](https://cloud.githubusercontent.com/assets/240770/8628932/dbe317ba-2724-11e5-87e3-10e50a9083d8.jpg)
(image source: http://drewskillman.com/thesis.html)

Example implementation (correct me if I'm wrong):

<S_CODE_TOKEN>

Where `frameRate` is replaced with `dt`.

If we add a helper for calculating acceleration:

<S_CODE_TOKEN>
",razh,2015-07-11 08:32:25
39,2015-07-10 21:15:31,"The RK4 is 4 times as expensive computationally and I don‚Äôt think that extra bit of accuracy is worth it. But I am not against it either.
",iclanzan,2015-07-11 08:32:25
39,2015-07-10 21:36:14,"Did some quick testing, regular Euler integration never accumulates more than a few pixels worth of deviation relative to RK4 at the timescale/distances of most UI animations.
",razh,2015-07-11 08:32:25
39,2015-07-10 22:14:17,"Gosh this is interesting. I'll read through this soon. For reference, Rebound-js uses RK4: https://github.com/facebook/rebound-js/blob/fe8994c1caca9f0e7ff27336c5ecf0a4abd807dc/rebound.js#L601-L605
",chenglou,2015-07-11 08:32:25
39,2015-07-11 08:32:23,"Related: #31 which is causes by the weird time delta we get from browser slowing down rAF
Merging this. @iclanzan I'd love to decouple stepper from the rendering, gladly accepting PR =)
",chenglou,2015-07-11 08:32:25
38,2015-07-10 19:49:40,"Github issues is a good todo place
",chenglou,
38,2015-07-11 06:07:47,"I agree and foucs
",Lucifier129,
38,2015-07-13 11:48:26,"For completeness' sake, this [jsbin](http://jsbin.com/piluto/3/edit?js,output) shows the kind of CSSTransitionGroup usage I was trying to achieve with react-motion.

key points for me:
-  one changing index drives entire interaction
- render two instances of same component while animation is running
- backward/forward animation support

You can see the real-world app I want to use this in [here](http://brumm.github.io/trackle/). The forward/backward buttons in the top right change an isoWeek value, which the calendar component uses to render. I'd love to use <TransitionSpring /> for a sliding transition between the current isoWeek value and the next.
",brumm,
37,2015-07-10 19:49:00,"E.g. with shouldComponentUpdate
",chenglou,
37,2015-09-30 17:28:32,"Not much need for now.
",chenglou,
36,2015-07-10 17:51:25,"Some crazy idea:

<S_CODE_TOKEN>

(Totally unrelated food for thought: what does declarative multitouch gestures look like in idiomatic React?)
",chenglou,
36,2015-07-20 08:22:53,"I have an idea around this.

a gesture recognizer is a reducer on some state _over time_, + change events. just like a flux store! for example, a swipe recognizer requires access to some accumulated time, and the movements made by the finger over that period of time. we can represent this like a flux store

<S_CODE_TOKEN>

You can then make a 'tracker' that accepts inputs (much like a flux dispatcher)

<S_CODE_TOKEN>

then react-motion kicks in and actually animates the slides (with the fun unmounting remounting stuff etc)

(For velocity measuremements, you could assume a js version of https://developer.android.com/reference/android/view/VelocityTracker.html in the background)
",threepointone,
36,2015-07-20 08:32:02,"We can take it up a notch. Return an array of velocities, one for each finger. Order it by time pressed, and pass an accumulated average. We can have generic helpers that takes the list of presses and return something relevant, e.g. `zoomFactor`, which also returns a velocity, etc.

Up a notch's up a notch: I'm thinking whether we can encode react's responder system in this paradigm. I'll leave that for the future.

Also, somewhat related: http://minuum.com/taps-and-swipes/#2
",chenglou,
36,2015-07-20 10:31:18,"I'd suggest that this sounds like something to be kept as a separate module. It should still compose well, e.g.:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Or potentially using the ‚Äúfunction as child‚Äù-pattern used in `react-motion` instead of polluting the component's state.

Fundamentally, using `onTouchMove` at the component level is problematic because gestures will cancel once the user moves outside of the `div`. Fingers can also be added and removed at any point so it's important that we keep track of which pointers we're interested in. There also needs to be some way to normalize mouse and touch events or optionally specify which of them we're interested in.

I certainly won't mind if someone solves all these problems within `react-motion` and I'm more than willing to help. But it seems like an entirely separate issue from the one it's trying to solve right now.

(This is based on very rough ideas I've jotted down over the weekend for a gesture recognizer library we need internally. Slightly more at https://github.com/HMILogic/react-gesture-recognizers but it's just a public notepad at this point. Of course I'm still open for input, if someone is interested.)
",sphire,
36,2015-07-20 12:17:32,"It seems the [PanResponder](https://facebook.github.io/react-native/docs/panresponder.html) would be something quite interesting for building that on top of.

It does the math (compensated distance, velocity, ...) and is built around the EventResponderPlugin which seems like a very nice abstraction for event handling.

It is [very simple to port](https://github.com/facebook/react/pull/4303) for web touch events. It requires a bit of thinking to get it working with mouse events, though maybe that's not something that's wanted?
",dieppe,
36,2015-07-20 22:28:08,"woah :D any chance the PanResponder can be ported to just an imperative api/object? We can then wrap it with a component and do the same as above. 
",threepointone,
36,2015-07-20 22:31:04,"@sphire yeah check my initial snippet. It's children functions. No dirty state injection (yet) please.
And this'll be a separate repo once we finish iterating on it, don't worry. We're not trying to build a monolithic animation framework here.

Regarding PanResponder: I'll leave that to you folks to experiment. I'm afraid of diving into the responder system because it'll constrain my way of thinking about these things =)
",chenglou,
36,2015-07-21 14:37:15,"Initial work on velocity tracking - https://github.com/threepointone/disto/blob/redux/examples/velocity/app.js 

The internals are a hack; I'm calculating delta/period, and using a Spring to smooth over it(!). You could imagine using a velocity tracker object or whatnot.

next up - flings. 
",threepointone,
35,2015-07-10 17:35:09,"https://github.com/npm/npm/blob/2e3776bf5676bc24fec6239a3420f377fe98acde/doc/files/package.json.md#peerdependencies
",moretti,2015-07-10 19:50:34
35,2015-07-10 19:50:28,"Aaah true! Sorry for the oversight =)
",chenglou,2015-07-10 19:50:34
34,2015-07-10 08:36:04,"The idea is to maybe have a constrained API in the future that allows compiling to CSS keyframes instead of using rAF + render. cc @sahrens who'll probably find this relevant.

I've decided to stop theorizing about CSS keyframes' perf vs manipulating DOM + setting style properties vs React + render + setting inline style. Latter will most probably be slower but hey, 1. always need real data to talk about perf, 2. if it's really slower, I want to see how much slower and whether it's worth orienting the API toward the former 2. Relevant post: https://css-tricks.com/myth-busting-css-animations-vs-javascript/

I'll try the perf of React render vs CSS keyframes first. The second method of manipulating DOM and setting style is less worth the trouble of testing, because React-Motion's bottleneck is also there anyway.

I'm actually not sure what'd be an accurate way of testing this. @sahrens did you measure the perf gain from using Core Animation instead of render?
",chenglou,2015-11-25 08:50:09
34,2015-07-10 09:47:52,"It's not so much about microbenchmark a comparing the approaches head-to-head as it is about the macro system. If you're relying on react render to animate (say, a custom spinner) and want to also do something expensive in JS (say, render a large network response), then your animation is going to stop while that's happening (unless you do a bunch of work to time-slice the expensive operations).

That said, it would be interesting/valuable to push the limits of pure animations with both systems. A good way to do that is to increase the complexity (e.g. number of elements being animated simultaneously) until you start dropping frames, and compare that maximum complexity between the two approaches.

> On Jul 10, 2015, at 10:36 AM, Cheng Lou notifications@github.com wrote:
> 
> cc @sahrens who'll probably find this relevant.
> 
> I've decided to stop theorizing about CSS keyframes' perf vs manipulating DOM + setting style properties vs React + render + setting inline style. Latter will most probably be slower but hey, 1. always need real data to talk about perf, 2. if it's really slower, I want to see how much slower and whether it's worth orienting the API toward the former 2. Relevant post: https://css-tricks.com/myth-busting-css-animations-vs-javascript/
> 
> I'll try the perf of React render vs CSS keyframes first. The second method of manipulating DOM and setting style is less worth the trouble of testing, because React-Motion's bottleneck is also there anyway.
> 
> I'm actually not sure what'd be an accurate way of testing this. @sahrens did you measure the perf gain from using Core Animation instead of render?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",sahrens,2015-11-25 08:50:09
34,2015-11-25 08:50:09,":+1: Closing for now =).
",chenglou,2015-11-25 08:50:09
33,2015-07-10 02:13:17,"Npm/Bower/Slack
",chenglou,2015-07-11 19:25:55
33,2015-07-10 03:02:21,"devDependencies, CI (circleci?), code coverage (coveralls?)

[![Dependency Status](https://david-dm.org/chenglou/react-motion.svg)](https://david-dm.org/chenglou/react-motion) [![devDependency Status](https://david-dm.org/chenglou/react-motion/dev-status.svg)](https://david-dm.org/chenglou/react-motion#info=devDependencies)

<S_CODE_TOKEN>
",nkbt,2015-07-11 19:25:55
33,2015-07-10 03:06:11,"Npm bower and slack are fine. Or maybe just slack. Having like 5+ badges is kinda overloading it
",chenglou,2015-07-11 19:25:55
33,2015-07-10 03:16:07,"=)

you can always put the m the the end of readme. Still nice to have some visual indication that health is OK.
",nkbt,2015-07-11 19:25:55
33,2015-07-11 23:35:30,"@chenglou Maybe add a gitter link for anything that might require irc-like live chat (help with anything for example). It's easy to use and unlike irc people easily see what people were chatting about before they arrived and can also answer someone even after they leave and the person will just receive an email about it. It's also visible to guests, and you just need github to access it. Here's webpack's as an example: https://gitter.im/webpack/webpack/

Maybe this is just a setting, but Slack presented me with a big ""sign up to do anything"", and didn't feel like doing that since they presented to me a ""hidden steps form"" for sign up, but I assume it does something similar to gitter but is more of a private thing for core contributors only? 
",srcspider,2015-07-11 19:25:55
33,2015-07-12 00:21:12,":+1: for gitter 
:-1: for slack (http://blog.freecodecamp.com/2015/06/so-yeah-we-tried-slack-and-we-deeply-regretted-it.html)

PS: Gitter has IRC gateway https://irc.gitter.im/ which works perfectly.
",nkbt,2015-07-11 19:25:55
33,2015-07-12 03:18:43,"Tbh I'm not much of a slack user and I still find it weird, but I chose slack because the Reactiflux channel already has thousands of users and slack seems more popular than gitter. Popularity sounds like a weak argument but probably not in this case.

Is there any gitter -> slack or irc -> slack integration?
",chenglou,2015-07-11 19:25:55
33,2015-07-12 11:31:31,"@nkbt didn't know about the irc integration, awesum
",srcspider,2015-07-11 19:25:55
33,2015-07-12 18:03:36,"I've heard Slack can be integrated with IRC.
",gaearon,2015-07-11 19:25:55
32,2015-07-09 23:52:10,"All demos are working well
",nkbt,2015-07-10 00:34:09
32,2015-07-10 00:34:06,":+1: 
",chenglou,2015-07-10 00:34:09
31,2015-07-09 23:04:53,"Hi,

Thanks for this awesome lib.

I stumbled upon something suspect when switching between browser tabs while an animation is on.
The following code simply renders an interpolated value (0 at first, then 300 after 1s) and use it in a  `transformX` as well.
Everything works fine.

Until you switch your browser tab, come back to it, switch, come back etc. The value keep changing/bouncing a lot at each switch (due to the low damping it seems? 5 in this example)
Is that expected?

![](http://i.gyazo.com/cf5489de99ba953fb22d5ea81efa8d4e.gif)

<S_CODE_TOKEN>

PS: I'm running on Chrome 44 Windows.
",chtefi,2015-07-17 18:35:01
31,2015-07-10 00:06:20,"Browsers throttle requestAnimationFrame (what react-motion uses to power its animations) significantly when a tab is inactive ([this thread](http://greensock.com/forums/topic/9887-tween-paused-when-switch-to-other-tabs/) says ~2 frames/second).

I think the normal thing to do here is to pause the animation when you detect the user leaves the tab and restart it when they return.
",KyleAMathews,2015-07-17 18:35:01
31,2015-07-10 00:07:13,"Though it'd be cool if react-motion could handle this somehow automatically.
",KyleAMathews,2015-07-17 18:35:01
31,2015-07-10 00:27:58,"It is fairly easy to check if tab is in foreground or background. I'll have a look today (after work) what could be done if no one fixes it before that
",nkbt,2015-07-17 18:35:01
31,2015-07-10 02:12:59,"What's really the desired behavior here? Slow down or stay at the same speed?
",chenglou,2015-07-17 18:35:01
31,2015-07-10 03:00:10,"I am pretty sure animation should freeze and resume when we are back.

",nkbt,2015-07-17 18:35:01
31,2015-07-10 04:11:30,"Well maybe this is a bad analogy, but we don't do the same with sound right? And what's really ""going away"", does losing focus by switching to another app (while the screen is still partially visible) count? Because if so it seems that continuing the animation's the way to go? Not talking about technical details here.
",chenglou,2015-07-17 18:35:01
31,2015-07-10 04:17:00,"Analogy with sound is not that straight. You cannot see animation when tab
is not visible. Background tab is an issue though. Visible **and**
inactive.

If animation is very long, it makes sense not to burn cpu, but they are
actually quite short, so the idea of animating in background seems ok to me.

You can check Date.now() inside raf to align animation. If it is more then
finish, then just set the last value.
",nkbt,2015-07-17 18:35:01
31,2015-07-10 04:24:23,"This could be optional. For some cases you want to stop animations completely when in background and for most cases - keep going.

Since I don't like configuration and prefer composition, maybe it could be some component-wrapper like 

<S_CODE_TOKEN>
",nkbt,2015-07-17 18:35:01
31,2015-07-11 19:29:46,"@nkbt We don‚Äôt know the duration of animations ahead of time so as to ‚Äúalign‚Äù it or set the last value. Each step is computed from the values of the previous one. Best we can do is try to compute multiple steps to catch up the lost time. If the time lost is too great and would take too many steps to catch up then we have two options: **pause** or **end** the animation.

If down the road we want to support physics models other then just springs we might not even know the end value. Think of something like momentum scrolling where you don‚Äôt know beforehand what the end position is. As such I would suggest we go with pausing.

I am working on decoupling the stepping function from rendering and it will among other things solve this problem.
",iclanzan,2015-07-17 18:35:01
31,2015-07-11 19:43:04,"> If down the road we want to support physics models other then just springs we might not even know the end value. Think of something like momentum scrolling where you don‚Äôt know beforehand what the end position is. As such I would suggest we go with pausing.

@iclanzan I want the Decay component actually, so yes, that makes sense. Pausing it is.
(Also, looking forward to decoupling the stepping function!)
",chenglou,2015-07-17 18:35:01
31,2015-07-13 17:41:39,"@chtefi to clarify: tldr yes this is a bug, because the time delta gets screwed up. This will be fixed hopefully soon.
",chenglou,2015-07-17 18:35:01
31,2015-07-17 18:35:01,"#57 =)
",chenglou,2015-07-17 18:35:01
30,2015-07-09 21:33:59,"Added a bower.json file so more people can enjoy this awesome library. Didn't register the package, it's super easy though http://bower.io/docs/creating-packages/#register.
",souporserious,2015-07-09 22:55:32
30,2015-07-09 22:17:59,"The current build process ignores the output `Spring.js`. I'll un-git-ignore it once we get this in. Thanks!

Also, you just reminded me that I totally forgot to put keywords in package.son, lol
",chenglou,2015-07-09 22:55:32
30,2015-07-09 22:55:36,"Thanks!
",chenglou,2015-07-09 22:55:32
30,2015-07-09 22:58:58,"No problem, thanks for getting that in so fast! Want to use it at my work, but we're on rails so we need it in a bower package for use with rails-assets.org. Also, noticed the line breaks didn't come through on the README for the packages info, my bad, tried to fix it, but you merged it so fast :)
",souporserious,2015-07-09 22:55:32
29,2015-07-09 21:25:39,"Should Just Work ‚Ñ¢ if we import the correct React.
",chenglou,2015-08-02 22:18:52
29,2015-07-17 10:00:47,"Any updates? I would love to see it working :) Can help as well as I am currently `into` animations in my app.
",grabbou,2015-08-02 22:18:52
29,2015-07-17 18:38:19,"I think it's literally just a try catch of require?

@threepointone your spring worked on react-native without changes right
",chenglou,2015-08-02 22:18:52
29,2015-07-20 11:14:31,"<S_CODE_TOKEN>

from react-springs, will give it a go (at least it works with React being downloaded as a peer dependency but this is not the solution)
",grabbou,2015-08-02 22:18:52
29,2015-07-21 09:46:03,"Sorry for missing this. The try/catch should work. I didn't try any other workarounds, assuming that react 0.14 will remove this problem.
",threepointone,2015-08-02 22:18:52
29,2015-07-21 09:46:35,"0.14 React web will remove this problem. It's not clear when react-native will do it. No harm making it work for now and removing it later.
",chenglou,2015-08-02 22:18:52
29,2015-07-21 09:52:13,"Redux has a separate module altogether. Problem with both these approaches is that it doesn't solve it for people upstream. Another approach is to `import {SpringFactory} from react-motion; let Spring = SpringFactory(React);` but that's just gross.
",threepointone,2015-08-02 22:18:52
29,2015-07-21 19:33:43,"@chenglou is there any way to use the spring interpolation outside of a react component, or at least outside of the render method? In my tests I am getting much better animation performance calling `myRef.setNativeProps({})` rather than modifying component styles. 

I realize this violates the basic declarative principles of the library but something like:

<S_CODE_TOKEN>

 Thoughts?

With my current implementation I am getting unpredicable spring action, often indeterminate oscilating. I assume this is because the react-native timer is less reliable. I will try it out with your latest updates and see if that helps.
",rt2zz,2015-08-02 22:18:52
29,2015-07-22 08:45:36,"You could just use rebound-js, or the other new react native animation library http://youtu.be/xDlfrcM6YBk 
",threepointone,2015-08-02 22:18:52
29,2015-07-23 00:08:44,"ya, if I have to :) FWIW react-motion 0.2.0 greatly improved performance. Looking fast enough for my animations.
",rt2zz,2015-08-02 22:18:52
29,2015-07-23 18:46:32,"@rt2zz react-motion's still in early phase so there's still a lot of perf improvement to be had. If you can profile your app and tell us where the bottleneck is, we can target them better.

(Don't forget to use the prod build of react that strips out the dev conditional blocks correctly.)
",chenglou,2015-08-02 22:18:52
29,2015-07-26 20:20:25,"FWIW changing the require from `require('react')` to `require('react-native')` works on my project.
",mrfr0g,2015-08-02 22:18:52
29,2015-07-29 09:56:02,"Works now =).

Building react-motion with webpack currently gives a warning about either `react` or `react-native`. Will be improved in the next version. Leaving this open until then.
",chenglou,2015-08-02 22:18:52
29,2015-08-02 22:18:52,"Oh yeah, this is solved.

See README: `require('react-motion/native')`
",chenglou,2015-08-02 22:18:52
29,2015-12-21 12:33:28,"@chenglou Is there a comparison, performance-wise, between Motion and Animated?

(I am sure there is, I am just a bit lazy to look for any atm :)
",phaistonian,2015-08-02 22:18:52
29,2015-12-21 14:19:11,"@phaistonian Not officially, I should give it a try. Any ideas how we could accurately benchmark an animation framework?
My guess is that Animated will win because most of it is implemented natively, and they only pay the cost of the communication between JS and native. RM is utterly unoptimized.
",bsansouci,2015-08-02 22:18:52
29,2015-12-21 14:21:00,"@bsansouci Funny thing, the RN team actually suggested RM (when asked about animation in a recent AMA on Reddit) and not Animated.

Then again, @chenglou is an FBoy as well ;)
",phaistonian,2015-08-02 22:18:52
29,2015-12-21 15:14:48,"Yes, but on the other hand, there was a discussion quite a few months ago about possibilities of offloading Animated animations onto separate thread to make it unaffected by other JS computations going at the time of animation (avoids frame drops). 
",grabbou,2015-08-02 22:18:52
29,2015-12-21 15:17:47,"@phaistonian because RM is just <3
",bsansouci,2015-08-02 22:18:52
29,2015-12-21 15:19:29,"Animation is the one that thing that affects RN the negative way.

I am sure it's high in their to-do list getting this done ""properly"" so that the performance is not affected.

Not sure if Animate is the solution, but (and I am repeating myself here), the API has to be super simple and clear (and Animate's is not).
",phaistonian,2015-08-02 22:18:52
29,2015-12-27 10:13:43,"I'm in pain with Animated's API as well (It is too low-level for any practical application, not documented properly, examples are rare, etc). So came here to see any solutions react-motion is providing as the alternative of Animated. But I can see most of the RM examples are not working for RN as well.

I'm not trying to rant, I feel like more works are needed to be done for RN animations, and just want to make note for anybody looks for similar stuffs. If I make a few RM examples to work on RN, I will post a repo link here afterwards.
",sairion,2015-08-02 22:18:52
29,2015-12-28 22:30:25,"> But I can see most of the RM examples are not working for RN as well

The examples should all conceptually work on RN. The differences are in the trivial `ReactDOM.render`, imports, div vs View, etc.
",chenglou,2015-08-02 22:18:52
29,2015-12-28 23:17:18,"Yes, I second that. Can you let us know what examples you tried and where
they stopped working?

On Mon, Dec 28, 2015 at 3:30 PM, Cheng Lou notifications@github.com wrote:

> But I can see most of the RM examples are not working for RN as well
> 
> The examples should all conceptually work on RN. The differences are in
> the trivial ReactDOM.render, imports, div vs View, etc.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/issues/29#issuecomment-167669857
> .

## 

---

# 

=--------------------------------------------------------=-===-=-=-====--
+_+~_=_~--+__+=-^=-+_+_=^-+**+-=+_+~**=**~-_-__**-=++=_--^-===-=-==-=-=--
=--------------------------------------------------------=-===-=-=-====--

http://bishopZ.com

---
",bishopZ,2015-08-02 22:18:52
29,2015-12-28 23:42:43,"@chenglou @bishopZ To elaborate, I may have misstated it as ""not working"". (I was extremely frustrated to RN when I was commenting so it could be a bit excessive) I did not try to port every demo though, it absolutely works after those changes! (`div` to `View`, `button` to `TouchableHighlight`, etc.) And they are very pleasant to use, compared to Animated. 

However, I have seen some native app folks (who are not really familiar with web techs or React for web) get interested by React Native and get confused by these rather 'trivial' differences after using a few React libs. I thought 'just working' examples can help those kind of people.
",sairion,2015-08-02 22:18:52
28,2015-07-09 14:45:34,"When a dto has null values, the recursive calls on the payload cause the calculation to explode on a null check. 
",jlebensold,2015-07-09 17:58:13
28,2015-07-09 17:58:15,"Thanks!
",chenglou,2015-07-09 17:58:13
27,2015-07-09 06:23:54,"Default is 3000, but can be overriden

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",nkbt,2015-07-09 23:20:05
27,2015-07-09 23:19:58,"Finally getting around with these!
I'm merging this but we might be changing the webpack config soon. Thanks!
",chenglou,2015-07-09 23:20:05
27,2015-07-09 23:38:46,"Thanks!
",nkbt,2015-07-09 23:20:05
26,2015-07-09 05:05:56,"Aside from a (very) nice-to-have declarative animation API, we need to solve the problem of animation on unmounting. This is a React-specific problem.
### `TransitionGroup`

It has many problems: race conditions, re-mounting while unmounting, lack of control over animation/children tree shape (flat list), etc. `TransitionSpring` addresses, I think, every single one of the pain points I could come up with from `TransitionGroup`. I'm not claiming it's a strictly superior solution: for the basic use-cases `TransitionGroup` can be terser.
### `TransitionSpring`

The normal `Spring` dictates that your interpolated data structure's shape stays the same from one render to another. In practice, it's very rare to have the shape of your interpolated data change; even if it does, it's probably not a good idea and supporting this use-case complicates this library's API.

The notable exception is when new components appear/disappear/move (since you generated these components through the interpolated data, your data shape naturally changes too). `TransitionSpring` builds on top of the normal `Spring` but allows diffing the data structure in a controlled way. Specifically, currently, it asks you to provide an object of `key => yourConfig`, where `yourConfig` is the normal data structure you'd use with `Spring`, with the `{val: ..., config: [...]}` and all. This means several things:
- Your components are keyed (you already need a key for your list of React components anyway). This is how `TransitionSpring` recognizes a missing item and shallow merges in new value and removes old ones (when you instruct it to actually remove it in `willLeave` by returning `null`).
- If your previous render had keys `abc`, and the next one has `cb`, and assuming you've asked in `willLeave` to keep `a` around for animation, the final, diffed, merged order will be `acb`. It could have been `cba` but the current merging algorithm's execution order produces the former. If you really care that much, we can make it pluggable in the future.
- To use the previous example, that means the merging algorithm gives you this new interpolated structure: `{a: ..., c: ..., b: ...}`. Since you most likely will iterate on it through `Object.keys(myInterpolatedStructure).map` for a simple `for-in`, object key iteration order is crucial. But aren't object keys unordered? Fortunately, [they **are** ordered in JS](http://stackoverflow.com/questions/30076219/does-es6-introduce-a-well-defined-order-of-enumeration-for-object-properties).
- Still, why objects and not arrays? Because if it's an array, you'd be forced to provide a key anyways, and your final structure would look so: `[{key: 'a', moreStuff: ...}, {key: 'b', ...}]`. Which isn't much better than the object format. But yes, it _is_ easier to do order-rearrangement with an array than object. Fortunately, your common use-cases are covered:
  - Insert at the beginning: `{newKeyName: myConfig, ...oldObj}`.
  - Insert at the end: `{...oldObj, newKeyName: myConfig}`.
  - Sort/reverse/etc.: lodash and others got you covered. I will also expose a very convenient helper:

<S_CODE_TOKEN>

Which will return you a new object whose keys have `manipulatedKeysArray`'s order =).

There are other considerations I'll skip over there. But since some people might still find arrays to be neater, we can make this work in the future. It's not a conceptual obstacle. Plus, as an alternative, an array of components makes a lot of sense:

<S_CODE_TOKEN>

Imagine receiving the component itself in your `willLeave`... Ahhh the possibilities =D.
### `willEnter/Leave`

Intuitive enough? `willEnter` is called **once** and passed the newly entered key. `willLeave` will be called at **every tick** where `key` is absent from the new data structure, and ask you to either return `null` (kill component for real) or that earlier `yourConfig` part of you data structure so that you can use it to interpolate. Hopefully at this point, the format `key => yourConfig` makes sense.

The implication of this API are important. For one, you're not bound to rendering a flat list (you can use your data structure in any way). For two, you're not restricted by a timer (unlike `TransitionGroup`) that warns you when you don't unmount within `x` seconds (remember what I said in my talk/readme, timer for animation = bad). For three, it enables whole new use-cases for the very concept of transitioning in/out: https://github.com/chenglou/react-motion/commit/8eefb94e98934abfe706dd4202c13906da9fe252#diff-7d11bd20d8f177c821173db584397090R29.
### Closing thought

I dislike operating on an intermediate data structure that's a step before you rendering the actual components. Ideally, the whole React philosophy is that you do the data ""tracking"" only at the very end, on components themselves rather than the data that generated them. But for the case of unmounting animation, we have to admit that it triggers a bad-case scenario for React's render paradigm (as `TransitionGroup` has shown. But someone please prove us wrong), and that we need to go back a level higher to diff on intermediate data. It's not _that_ much more tedious though. I think this library strikes a good balance.
",chenglou,2015-07-27 05:42:45
26,2015-07-11 13:19:40,"I think `config` works nicely for the `Spring`, but is a little annoying for `TransitionSpring` because you can't have it at the top level. This is because the top level object should be a simple mapping key => values. I wrote a little test thing and had this problem immediately. I used a simple array as a value, that I transformed into an object

<S_CODE_TOKEN>

I used that in development mode because I wanted to test out how many items I actually wanted to see, and so I needed to add or remove to my array and have my app not crash. This works very nicely when the order's not that important, but where you're going to want to the things to transition in and out.

Right now the only solution is to wrap every item in `{config: [k, b], val: ...}` which sucks. I really want my spring to be just one way, and I know it won't need to change. I couldn't come up with a better way to express than `<TransitionSpring k={120} b={16} ...rest/>`. 

I know we might not be concerned with perf at the exact moment, but having k and b as constants might enable some internal optimizations. 

Thoughts?
",bsansouci,2015-07-27 05:42:45
26,2015-07-11 18:44:51,"I think your example is misleading. Like we talked about before, writing things out in a scalar manner does have its values, but in practice whatever you pass to `TransitionGroup` will most likely be `map`ped over, in which case adding the `{val: ...}` wrapper is trivial. Hardcoding your array and object isn't very indicative of the common use-case. Plus, you could have used `zipmap(range(), arr)` right? Sure, not available natively, but I think we'll draw the line here: we won't be bloating this library up by providing unrelated things the language is missing and which can be provided by better solutions like lodash (cc @jedwatson who had his share of problems with the classnames repo, lol). We do provide the `reorderKeys(object, newKeyOrderFunction)` helper because otherwise it actually gets ridiculous to manipulate the object key order.

Adding `k` and `b` as props to TransitionSpring will require us to justify 1. Why we didn't add it to `Spring`, or 2. Why we added to `Spring` even though it can wrap the `endValue` with `{val: ...}` just fine. Not sure what your `...rest` is?

The user will do weirder stuff than just providing an extra wrapper around each cell in the object/array in the future. I'm not too worried about the small perf impact.
",chenglou,2015-07-27 05:42:45
26,2015-07-11 20:40:32,"Good points. I agree with keeping both springs similar in terms of API. Also having multiple ways of achieve the same thing can be confusing.
",bsansouci,2015-07-27 05:42:45
26,2015-07-27 05:42:45,"Closed because not an issue. But will always welcome questioning of the general API here!
",chenglou,2015-07-27 05:42:45
26,2015-12-17 13:50:20,"I'm confused.

> But aren't object keys unordered? Fortunately, [they are ordered in JS](http://stackoverflow.com/questions/30076219/does-es6-introduce-a-well-defined-order-of-enumeration-for-object-properties).

However, the link you provide proceeds to demonstrate _the exact opposite_:

> Not as of ES6 / ES2015's final specification. While ES2015 adds property order, it does not require for-in or Object.keys to follow that order, due to legacy compatibility concerns. Other operations, like getOwnPropertyNames, do follow the order, but not for-in or Object.keys.

Though [this conversation](https://esdiscuss.org/topic/nailing-object-property-order) at esdiscuss seems to imply object keys should be ordered in ES6.

Furthermore, even if it constant ordering was to be adopted in ES6, it would still mean our object wouldn't have guaranteed ordering on all platforms where our js is transpiled to ES5, so what good does it do?

Objects are simply not the place to hold ordered data. I'll admit that in practice, all environments seem to effectively keep the order, so it might be more of an academic point...(On a side note, if you are transforming the data anyway, Map keys [do guarantee order](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Objects_and_maps_compared)).

On a personal level, the obligation to use objects is a bit of a sore point. I understand the practical reasons, but it pains me to have to have to transform the data I receive from the database, and use as-is throughout my app in dumb components, just for animations. I operate quite a bunch on my data through reusable functions...for arrays. Which means that from `<TransitionMotion>` onward, I can't use them.  
What is even more of a sore point is that most of elements that do enter or leave, not only in my particular use case, but in everyone's (if I am not mistaken), whether todo items, users, or whatever, usually _already have a unique id_ that could be used.

This comment is in no way a criticism of your work, that I appreciate, as well as the thinking. I just don't think the use case of having an object that already has a key is so rare as to warrant the transformation and transformation of indexes to keys (and back from keys to indexes when an event bubbles up) of every array that needs animating. I actually think the typical use case would have an id, and even if it doesn't, it's less of a burden to create a `key` property on object creation once, than to transform an array on every render.
",Xananax,2015-07-27 05:42:45
26,2016-01-19 08:36:45,"@Xananax Thanks for the feedback! And sorry for the late reply. Haven't gotten around this until now.

Due to some newer constraints that I'll be putting onto the style object (can only contain data you need to interpolate, and not random properties such as `todoItemText` that you stuff in there for the sake of piggy backing on the diffing algorithm), I need to reconsider this API and switch to array.

Here's the potential new format:

<S_CODE_TOKEN>

Is this more in line with what you have in mind?
(If that's relevant: I can't allow directly storing an array of ReactElements, because `willEnter/willLeave` and others need to be able to read into the style property.)
",chenglou,2015-07-27 05:42:45
26,2016-01-19 16:30:20,"Yeah, indeed, that's much closer to what I would expect; it allows the API to consume most database objects (which already have an ID) almost directly, and more to the point, do not require to transform from array to object.

I think the new API is much clearer too. It was not very logical to keep those extra properties in `style` anyway.

Thanks for replying!
",Xananax,2015-07-27 05:42:45
25,2015-07-09 04:20:58,"Unused vars, dead code, redefined vars
",nkbt,2015-07-09 17:57:31
25,2015-07-09 17:57:27,"Welp, guess it's time to start using `const` =). Thanks!
",chenglou,2015-07-09 17:57:31
24,2015-07-08 18:09:16,"It'd be slick if the demos were available over GH Pages. Then people wouldn't need to clone the repo just to see the demos. =)

Should be as easy as pushing to a `gh-pages` branch, but I might be overlooking something.

Nice work!
",aseemk,2015-10-07 12:09:32
24,2015-07-08 21:28:08,"This needs some updates in the build config.
",nkbt,2015-10-07 12:09:32
24,2015-07-09 00:30:01,"Yes that was what I was thinking. It's on my list of things to do =)
",chenglou,2015-10-07 12:09:32
24,2015-07-09 00:31:33,"@chenglou delegate it =)
I'm happy to do that asap. Assign to me if you are ok
",nkbt,2015-10-07 12:09:32
24,2015-07-09 00:32:13,"Maybe I should? I have no idea what I want the page to look like yet
",chenglou,2015-10-07 12:09:32
24,2015-07-09 00:33:10,"It's ok, I can handle it =). Then you/all will add any relevant changes to it
",nkbt,2015-10-07 12:09:32
24,2015-07-09 00:34:33,"Alright cool. I was thinking of also putting the few hacks I've put in my talk in it, but that can wait. Right now it'd be nice to just have the demos in the repo. Maybe a live editor in the future or soon
",chenglou,2015-10-07 12:09:32
24,2015-07-09 00:34:36,"I am a little rushing on these things since I am using it in our project. Not much fun to copy-paste changes instead of using proper npm dependency
",nkbt,2015-10-07 12:09:32
24,2015-07-09 00:35:05,"I reckon I am not alone with this =)
",nkbt,2015-10-07 12:09:32
24,2015-07-09 00:40:28,"That's nice to hear =)
Somewhat related: I'll put up an issue a-la #14 for TransitionGroup (edit: #26). I want to be confident that the first API doesn't overlook some major flaws (personal experience, heh) before releasing it. At the latest, I'll release this officially when my talk's video comes out.
",chenglou,2015-10-07 12:09:32
24,2015-07-10 08:23:00,"@chenglou could you please create a `gh-pages` branch so it is possible to make PR there?
",nkbt,2015-10-07 12:09:32
24,2015-10-07 00:38:48,"I'm going to pick this up
",nkbt,2015-10-07 12:09:32
23,2015-07-08 16:48:35,"@chenglou Since I saw your talk at React Europe(I was there) and I wanted to use Spring asap, this pull request is aimed to remove the hack, because I basically don't want my user slow down animations on fat keydowns :D
",mirkodrummer,2015-07-08 17:36:59
23,2015-07-08 17:36:57,"Hah, can you believe some people are already using it? Wait till their users find out pressing on a key wreaks havoc in their app =P

Thanks for the PR. We'll make an actual dedicated functionality for this in the future.
",chenglou,2015-07-08 17:36:59
22,2015-07-08 16:10:56,,mirkodrummer,2015-07-08 17:37:00
21,2015-07-07 19:03:19,"React-animation is taken on npm. Let's find a better name for it.

Current suggestions:
- React-Spring (not sure, we might add `Decay` component later)
- React-Motion
- React-Move
- Reanimation
- React-Tween
",chenglou,2015-07-08 04:24:06
21,2015-07-07 19:08:44,"React-Motion is nice
- React-Physics
- React-State-Physics
- React-Dynamic-Animation
- React-Pop :stuck_out_tongue: 
",brentvatne,2015-07-08 04:24:06
21,2015-07-07 19:09:10,"ng-react-animation-library-by-cheng-lou‚Ñ¢.js
",kittens,2015-07-08 04:24:06
21,2015-07-07 19:09:59,"@sebmck hmm good suggestion but I'm afraid it's hard to type `npm install ng-react-animation-library-by-cheng-lou‚Ñ¢` in the terminal
",chenglou,2015-07-08 04:24:06
21,2015-07-07 19:10:51,"@chenglou What about `npm install ‚öõ‚ú®` then?
",kittens,2015-07-08 04:24:06
21,2015-07-07 19:12:28,"Not sure how to require that from vim so I'll have to scratch that.
",chenglou,2015-07-08 04:24:06
21,2015-07-07 19:14:33,"I went from `react-animation` to `re-animation`. `reanimation` or `react-necromancer` :wink: 
",devknoll,2015-07-08 04:24:06
21,2015-07-07 19:15:14,"@chenglou did you try to contact react-animation package owner? It seems that package is abandoned and it is likely they can transfer package name to you.
",andreypopp,2015-07-08 04:24:06
21,2015-07-07 19:15:23,"`react-motion` :+1: 
- `react-anim`
- `react-tween`
- `react-transitions`
",boopathi,2015-07-08 04:24:06
21,2015-07-07 19:15:57,"@brentvatne react-pop would be neat, too bad this library has no association with Pop (except in spirit!)
@andreypopp: yeah I did, hasn't replied yet.
@devknoll re-animation...humm
",chenglou,2015-07-08 04:24:06
21,2015-07-07 19:18:31,"I kind of like reanimation - brings linear, static animations to life :)
",brentvatne,2015-07-08 04:24:06
21,2015-07-07 19:25:34,"`re-animation` sounds great, but I'm not sure people will associate it to react right away (so might be harder to find it)
",dozoisch,2015-07-08 04:24:06
21,2015-07-07 19:30:51,"How about `react-kinect` or `react-kinetic` ??
",vramana,2015-07-08 04:24:06
21,2015-07-07 19:32:13,"react-motion :+1: 

what about, drumroll: react-animotion?
",attilah,2015-07-08 04:24:06
21,2015-07-07 19:42:30,":+1: on `re-animation` or `reanimation` too :); `ranimation` could be another one too; `react-in-motion`?
",dariocravero,2015-07-08 04:24:06
21,2015-07-07 19:43:28,"I like kinetic too :smile:
",brentvatne,2015-07-08 04:24:06
21,2015-07-07 19:44:11,"I like reanimation.
",gaearon,2015-07-08 04:24:06
21,2015-07-07 19:52:27,"using the react- prefix make it WAY MORE easier to locate a package in the npm hell, so I'm against the ""re"" only prefix. Sorry @dariocravero  :D
",attilah,2015-07-08 04:24:06
21,2015-07-07 19:53:18,"spring-animation or reanimation
",bobiblazeski,2015-07-08 04:24:06
21,2015-07-07 19:53:38,"@attilah haha yeah, I know what you mean, we still have keywords though ;)
",dariocravero,2015-07-08 04:24:06
21,2015-07-07 19:54:35,"Keyword should be fine enough to compensate for reanimation. I'm leaning toward that or react-motion
",chenglou,2015-07-08 04:24:06
21,2015-07-07 19:55:40,":+1: react-motion
",dozoisch,2015-07-08 04:24:06
21,2015-07-07 20:01:34,"@chenglou 
while `react-motion` is pretty good, `react-animation` somehow sounds better. Try contacting npm.
",boopathi,2015-07-08 04:24:06
21,2015-07-07 21:03:25,"`reanimation` is pretty cool!
How about `replay` or `react-play`?
",dmatteo,2015-07-08 04:24:06
21,2015-07-07 21:19:18,"I like how `react-motion` is both pragmatic and hints that it's not your regular $.animate.
",gaearon,2015-07-08 04:24:06
21,2015-07-07 21:23:43,"@gaearon I like the idea of avoiding the baggage of what $.animate entails :+1:
",bsansouci,2015-07-08 04:24:06
21,2015-07-07 21:26:29,"React-motion sounds good.
",nkbt,2015-07-08 04:24:06
21,2015-07-07 22:37:59,"React-FX? I like React-Motion too :+1: 
",souporserious,2015-07-08 04:24:06
21,2015-07-07 22:42:34,"`react-motion` : not tied to a specific technique/API (like Spring or Decay, and who knows what in the future) and still clear about the thematic. Also, prefixed by `react`.
",DjebbZ,2015-07-08 04:24:06
21,2015-07-07 23:57:39,"react-motion seems popular so I registered that with a placeholder just in case some jerk tries to take it :P https://www.npmjs.com/package/react-motion - if you decide to go with that I will transfer it over for you @chenglou 
",brentvatne,2015-07-08 04:24:06
21,2015-07-08 01:24:36,"I vote for `react-motion`.
",paramaggarwal,2015-07-08 04:24:06
21,2015-07-08 04:24:06,"<img width=""568"" alt=""screenshot 2015-07-07 21 19 45"" src=""https://cloud.githubusercontent.com/assets/1909539/8562981/f19fcda2-24ed-11e5-8b07-dda9a9949df9.png"">

Democracy has spoken! React-Motion it is. @brentvatne transfer please =)

Here are the honorable contenders:
- Reanimation (definitely the next animation library name)
- React-Tween
- React-‚öõ‚ú® (`import ‚öõ‚ú® from 'react-‚öõ‚ú®`)

Thanks was fun, people! =)
Now back to polishing the library for the impending release. Closing!
",chenglou,2015-07-08 04:24:06
21,2015-07-08 05:14:10,"@chenglou - transfer complete :smile: all yours
",brentvatne,2015-07-08 04:24:06
21,2015-07-08 15:51:51,"> React-‚öõ (import ‚öõ‚ú® from 'react-‚öõ‚ú®)

Unusable since you forgot a `'`! :trollface:  That being said, love the new name. :+1: 
",mathieumg,2015-07-08 04:24:06
20,2015-07-07 14:05:38,"Hi,

I use the animation in react on different structure, not all of 'div', such as 'ul' or 'ol', so I want to the coder could be defined the component tag name.
",arcthur,2015-07-07 18:57:01
20,2015-07-07 18:57:01,"You don't have the restriction here. Use any tag you want:

<S_CODE_TOKEN>

Hope that helps! =)
",chenglou,2015-07-07 18:57:01
19,2015-07-07 11:44:48,"As part of #13.
Independent from the code itself. Only had to fix same syntax issue in Spring, since parser crashed on that one.

When lib files are moved, these configs should be updated accordingly, but for the moment everything works fine.
",nkbt,2015-07-12 04:08:21
19,2015-07-07 11:48:00,"## Tests run

![tests](https://cloud.githubusercontent.com/assets/175264/8545394/9a996622-24f1-11e5-9ec9-cbd0772c1764.gif)

## Coverage report

<img width=""1099"" alt=""20150707-214705"" src=""https://cloud.githubusercontent.com/assets/175264/8545412/c55bbd38-24f1-11e5-9a93-e5307308dc87.png"">
",nkbt,2015-07-12 04:08:21
19,2015-07-08 08:19:40,"I'll hold this off since we don't need jasmine, karma and code coverage right now. License's a no-brainer though.
",chenglou,2015-07-12 04:08:21
19,2015-07-08 08:24:42,"No problem, it's quite isolated, so can be added anytime. If you prefer
another stack, let me know. Mocha, testem, tape, etc.

I recommend to solve this sooner then later, so it will be easy to write
tests and encourage contributors to increase coverage.
",nkbt,2015-07-12 04:08:21
19,2015-07-11 23:00:24,"I would also love to see this solved asap. I personally prefer Testem + Tape, but anything will do.
",iclanzan,2015-07-12 04:08:21
19,2015-07-11 23:07:50,"Let's do mocha for now because it's the one I'm familiar with. We can check into the alternatives later.

(cc @dariocravero who had a huge PR with some tests)
",chenglou,2015-07-12 04:08:21
19,2015-07-11 23:09:11,"In my experience Mocha is amazing, + Karma if you need DOM.
",gaearon,2015-07-12 04:08:21
19,2015-07-11 23:12:07,":+1 If you say so! Don't think there's enough DOM-related logic so we can keep karma for later. Mocha it is for now then!
",chenglou,2015-07-12 04:08:21
19,2015-07-12 00:16:17,"Deal, will use Mocha and update PR asap.
",nkbt,2015-07-12 04:08:21
19,2015-07-12 03:19:38,"@nkbt can you keep karma and coverage out for now?
",chenglou,2015-07-12 04:08:21
19,2015-07-12 03:57:01,"@chenglou sure, no karma. That was just a rebase commit.
",nkbt,2015-07-12 04:08:21
19,2015-07-12 03:59:13,"@chenglou why not coverage? It works pretty well. The only thing I needed to do is to rename Spring.jsx to Spring.js, so it appears in coverage report (spent decent amount of time trying to find workaround to get report for js and jsx, messing with isparta and istanbul, but found the best solution is just to rename it to js)
",nkbt,2015-07-12 04:08:21
19,2015-07-12 04:03:22,"Meh. I guess we can keep coverage for now. When you're done, please squash and I'll merge
",chenglou,2015-07-12 04:08:21
19,2015-07-12 04:06:55,"Squashed.
",nkbt,2015-07-12 04:08:21
19,2015-07-12 04:08:18,":+1: thanks!
",chenglou,2015-07-12 04:08:21
19,2015-07-12 04:09:17,"Great!
",nkbt,2015-07-12 04:08:21
18,2015-07-07 11:16:09,"Just a repeat of #13 for reference.
I reckon we are not going to merge it at once, but still good to have this history.
",nkbt,2015-07-12 05:27:21
18,2015-07-12 05:27:19,"Closing this since this diverged too much, and since we got lots of things in already
",chenglou,2015-07-12 05:27:21
18,2015-07-12 05:32:35,"We basically have almost everything from here already.
",nkbt,2015-07-12 05:27:21
17,2015-07-07 09:28:58,,nkbt,2015-07-12 01:15:53
17,2015-07-07 11:53:30,"## ESLint run

![eslint](https://cloud.githubusercontent.com/assets/175264/8545447/23de3a52-24f2-11e5-8d8c-fe92b5e5aaf2.gif)

Most of these warnings/errors can be very quickly fixed

Also I did not do it here, but it is very cool to have eslint-loader added to webpack, so you can see warnings while you develop in realtime. Will add PR after this one.
",nkbt,2015-07-12 01:15:53
17,2015-07-09 03:57:03,"I feel like this is way too much for the scope of what we have right now. I have local eslint config set up, it prevents a few common mistakes, but adding 200+ lines of lint makes no one wants to go back changing it; and I doubt it'll catch much useful lints.
",chenglou,2015-07-12 01:15:53
17,2015-07-09 04:25:51,"@chenglou it actually catches pretty much all most common mistakes. It is large because it has all rules in there with descriptions. It may be unnecessary when you work alone but as we found in our company it works pretty well if you have distributed team. Additional comments are also very helpful to figure out why something is failing without going to the webz

It is up to you of course. Feel free to close. I just highly recommend to have a code style in place to avoid mistakes made by other contributors. And yourself as well =)
",nkbt,2015-07-12 01:15:53
17,2015-07-09 04:26:35,"It is also very good to have when you add CI, so PR will just fail if it has style issues in there
",nkbt,2015-07-12 01:15:53
17,2015-07-11 21:16:14,"I agreed with @chenglou, this is way too much and didn't see too much benefit from it. something like use `const` instead var because the value never changed is also opinionated and slow down the development in this early stage.
",huang47,2015-07-12 01:15:53
17,2015-07-11 21:20:24,"I'd just adopt a widely spread convention (e.g. airbnb javascript eslint rules).
Like @DenisIzmaylov did here: https://github.com/gaearon/redux/blob/4f620e6aa5d21a78c7e624725230a84645588c12/.eslintrc#L2
",gaearon,2015-07-12 01:15:53
17,2015-07-11 22:24:32,"I really think we need this even at this stage. It will save us a lot of headaches down the road. Adopting AirBnB‚Äôs rules as @gaearon suggested I think is a very good idea.
",iclanzan,2015-07-12 01:15:53
17,2015-07-11 22:46:20,"@nkbt would you mind doing that? What @gaearon said
",chenglou,2015-07-12 01:15:53
17,2015-07-11 23:28:00,"@chenglou for sure, np
",nkbt,2015-07-12 01:15:53
17,2015-07-12 00:49:20,"@chenglou done, see updated code.
",nkbt,2015-07-12 01:15:53
17,2015-07-12 01:15:50,"Great! Thanks =)
",chenglou,2015-07-12 01:15:53
17,2015-07-12 01:33:06,"\o/
",nkbt,2015-07-12 01:15:53
16,2015-07-07 08:54:40,,luqin,2015-11-25 08:09:16
16,2015-07-08 07:03:37,"I'm not even done with the english readme yet. Even when I'm done I'm not sure if I'll ever start and maintain a chinese doc myself. Maybe someone else will do it. Low-pri for now =)
",chenglou,2015-11-25 08:09:16
16,2015-07-11 23:12:20,"Hehe. https://github.com/gaearon/redux/issues/158
",gaearon,2015-11-25 08:09:16
16,2015-11-25 08:09:16,"Gonna close this for now since there's not much actionable here =)
",chenglou,2015-11-25 08:09:16
16,2015-11-25 08:10:22,"Â•ΩÁöÑ
",luqin,2015-11-25 08:09:16
15,2015-07-07 08:45:55,"Âú® demo3 ÁöÑ RedoMVC ‰∏≠‰øÆÊîπÔºö

<S_CODE_TOKEN>

Âú®ÂàáÊç¢ filter Êó∂ÂèëÁé∞Ôºå‰∏ÄÊó¶Ëß¶Âèë willLeave ÂêéÔºå‰∏çÂÅöÂÖ∂‰ªñÊìç‰ΩúÔºåconsole Â∞ÜÊó†ÈôêÊâìÂç∞„ÄÇ

Âè¶Â§ñÔºåÂú®Êàë‰∏™‰∫∫ÂÆûÁé∞ÁöÑ todomvc demo‰∏≠ÔºåÂà†Èô§ todo ÁöÑÊñπÂºè‰∏çÊòØ‰ª• height:0px Êù•Ë°®Á§∫ÁöÑÔºåËÄåÊòØ removeChild ÔºåÂú® react-animation ÈáåÊöÇÊó∂Ê≤°ÊúâÊâæÂà∞Âú®Âä®ÁîªÂÆåÊàêÂêéÂÜ≥ÂÆöÊòØÂê¶Âà†Èô§ÂÖÉÁ¥†ÁöÑÊñπÊ≥ï„ÄÇ
",Lucifier129,2015-07-08 07:02:30
15,2015-07-08 07:02:30,"I'll answer in English for the sake of people searching for this issue.

Your issue is that the console logs ""leave"" infinitely, I'm not sure what you mean by that because currently it does stop after a while. If you're talking about `willLeave` being triggered many many times for a same component, this is the expected behavior. It will keep asking you whether the component should be unmounted, **until you return `null`** (aka, ""yes, do it now"". This should answer your second question). I actually think is one of the biggest differentiator vs TransitionGroup. It also theoretically decouples the unmounting logic with the animation logic.

For other frameworks' TodoMVC, yes, you _do_ do the imperative `removeChild`. But this is extremely error-prone and not idiomatic react at all.

I'm glad to see people fearlessly cloning and playing around with my undocumented stuff though, thanks =). Closing this unless you have further questions!
",chenglou,2015-07-08 07:02:30
14,2015-07-06 19:17:01,"In conjunction with #9's point 2.2.2, this issue will explain the current API in detail. `TransitionSpring` (for unmounting) deserves its own issue later. **Warning**: this is the conceptual API for clarity purpose. Actual implementation might slightly differ.

The overall initial API looked like this:

<S_CODE_TOKEN>

(This is one of the only few viable solutions I've found that respect the criteria I've listed in #9. Another is @sahrens', which should be 1.2.2. in that issue.)

The object passed to `destinationValue` is an arbitrary data structure (at least for the normal `Spring` and not `TransitionSpring`.

`Spring` will drill down into the data structure and animate each number, from whatever the current value was, at that position of the collection. **This assumes your previous `destinationValue` and the next one have the same shape**. Under the hood, there's also another tree of the same shape: the velocity tree (initialized to all 0 at the beginning). Current position, current velocity, destination position, stiffness and damping together allow you to calculate the next position (which becomes the new current position) and the next velocity.

But it's a bit constraining not able to specify different spring constants (stiffness + damping) for different numbers. Here's the solution we've found:

<S_CODE_TOKEN>

Now, `destValue` and `springConfig` become restricted, special key names for this library. When it drills down the collection, it will skip animating `springConfig` subcollection (naturally) and animate each `destValue` according to the `springConfig` constants provided on the side. For declarativity, the constants carries over to the whole subcollection, until another `springConfig` overrides it. **For convenience, a `stiffness` or `damping` of -1 cancels the animation for the subcollection (so overrides the upper level configs)**.

This gets verbose, so a stiffness of 170 and damping of 26 is set. These two constants gives you a non-bouncing spring (similar to an ease-in curve), which gently decelerates to destination without overshooting. For one, it gets annoying if things bounces all the time. For two, for unmounting, it's easier for users to check the destination's reached with `currentPos === destPos` instead of `currentPos === destPos && currentSpeed === 0`.

But the remaining bits still leave things tedious. It would be nice to be able to write:

<S_CODE_TOKEN>

This is actually the current API.

What's happening here? The `update` function is actually nothing but a wrapper:

<S_CODE_TOKEN>

The received interpolated structure, however, is `{a: {top: someValue}, b: {top: someValue}}`. The wrapper `{val: ..., springConfig: ...}` is gone! Internally, Spring received `destinationValue` and apply the correct interpolation against `currentVlaue`, **stripping away** the `update` wrapper. This gives you the magical feeling of visually marking a collection and letting Spring know what to interpolate, while seemingly receiving a collection with the ""same"" **visual** (as in, looking at the code) shape back.

Here's how the `update` magic fares vs no magic:
- `update`
  - pros
    - hides boilerplate, a lot of it.
    - `update` only makes sense for marking `destinationValue`. It's not clear why you'd want to expose some wrapping/marking detail to the received interpolated value/velocity (maybe exposed in the future).  restricts usage places to dest (not rly if you use it in default val)
  - cons
    - error-prone. Let's say we want to animate one of the `[x, y]` in a list of `[x, y]`s: `numbers.map(n => someCondition ? [n, n] : update([n, n]))`. We intentionally gave an impression that the `update` marker's an invisible thing, but here you've accidentally returned a non-homogeneous collection: `let x = update([1, 2, 3]); let values = [...x, 4] // throws`. Alternatively, you could have done the less error-prone `numbers.map(n => update([n, n], someCondition ? {stiffness: -1, damping: -1} : null)` (`-1 -1` disables the tweening of values as a handy shorthand). Not sure.
    - kills the assumption that all three trees (current values, current speeds, destination values) are of the same shape. The shape of the latter might vary greatly depending on when you feel like putting the `update` marker.
- Expose `{val: ..., springConfig: ...}` directly
  - pros
    - No magic. In the interpolated values in the children callback, you get back the tree with the above wrapper. The speed tree (when we expose it in the future) also has the same shape.
  - cons
    - boilerplate-y.

We might want to switch to the latter.
",chenglou,2015-07-27 05:43:16
14,2015-07-06 19:17:30,"@kenwheeler seems like you're already using this, so pinging you in case you're interested.
",chenglou,2015-07-27 05:43:16
14,2015-07-06 19:40:53,"@chenglou A lot of the time I can see people just using the non-function style `endValue` syntax for things like `left` or `opacity`, like in /demo0 , but I can absolutely see the value of the `update` syntax in a multiple-element, multiple-property scenario. As soon as I recognized how the 'children as a function' syntax worked, it all became very clear. 
",kenwheeler,2015-07-27 05:43:16
14,2015-07-06 19:45:52,"That said, in what scenario would you feed non tweenable data, like `importantData` in the demo, through the update function? 
",kenwheeler,2015-07-27 05:43:16
14,2015-07-06 19:54:45,"I think it becomes useful in the 1TransitionSpring 1which @chenglou said would be discussed in another issue. But basically when you're unmounting, the `TransitionSpring` will keep your data until you decide it can be removed, then it's removed. Looking at demo3, when you delete something from the list you're removing it from your state. If you don't give it to the `TransitionSpring` to keep, you won't have the text of that todo to display.
",bsansouci,2015-07-27 05:43:16
14,2015-07-06 19:56:49,"Also `update` enables you to have different spring values on different parts of your tree.
",bsansouci,2015-07-27 05:43:16
14,2015-07-06 20:24:30,"> @chenglou A lot of the time I can see people just using the non-function style endValue syntax for things like left or opacity, like in /demo0

Random comment: the current situation is, if you pass an object instead of a callback, I assume you want to animate everything, so I wrap your object with `() => update(object, defaultConfig)` before sending it off. This is handy for scalars too: `<Spring destinationValue={5}>...` which turns into `Spring destinationValue={() => update(5)}>...` With the planned change to use vanilla object, you can no longer use the shorthand: say you have `<Spring destinationValue={{a: {top: {value: 1}, left: 10}}}`. I can't assume you wanted `left` animated too by wrapping the whole thing in another wrapper.

It's slightly more verbose but that's fine?

> That said, in what scenario would you feed non tweenable data, like importantData in the demo, through the update function?

Not sure what you mean here. If you mean that the user should only ever pass tweenable data to `destinationValue`, I feel it's too restrictive and asks too much of you to massage your data before passing it to me. If you mean that someone does `update(nonTweenableData, cancelTweeningConfig)`, that's because the upper level might wrap the whole structure in a config, and for this `nonTweenableData` sub collection you want to ""un-wrap"" by setting a special `cancelTweeningConfig`. This is for convenience over the alternative of granularly selecting all the subtrees.

But you touch a good point: right now we assume `update({a: {b: 1}, c: 2}, config)` cascades deeply and updates `1` and `2`. if `update` didn't cascade, you wouldn't need a second API/special config to disable an `update` from the higher level. I made things cascade because again, it seemed tedious to wrap every single value you want to tween with a non-cascading version of `update`. But maybe that's the way to go? This decision will also affect the second vanilla API.
",chenglou,2015-07-27 05:43:16
14,2015-07-06 20:30:27,"@chenglou on the first part, agreed, slightly more verbose, but consistent and explicit.

on the second part, I definitely see the value in the cascade in regards to keeping things terse. 
",kenwheeler,2015-07-27 05:43:16
14,2015-07-06 20:34:44,"Right, maybe I worried too much, but it _does_ feel a bit tedious to do this:

<S_CODE_TOKEN>

Where `[-1, -1]` is the signal to disable tweening `text`. Or maybe this is slightly better:

<S_CODE_TOKEN>
",chenglou,2015-07-27 05:43:16
14,2015-07-06 21:44:43,"`staticValue` actually cleans that up tremendously
",kenwheeler,2015-07-27 05:43:16
14,2015-07-06 22:47:21,"It's less clear that it cascades too, though... Anyways, I'll make sure the `config: [-1, -1]` works first. If necessarily I'll look into `staticValue`.

Btw awesome feedback so far! Gives me a bit more confidence in the API changes, thanks =).
",chenglou,2015-07-27 05:43:16
14,2015-07-27 05:43:16,"Closed because not an issue. But will always welcome questioning of the general API here!
",chenglou,2015-07-27 05:43:16
13,2015-07-06 07:58:57,"1. I've added ESLint with pretty strict config. I updated config to match your code style. Fixed only some actual errors and minor style inconsistency
2. Added karma with one empty test. It also gives you a coverage
3. Split webpack config to production and development for easier support and extension in a future
4. Added ESLint loader, so it will throw warnings/errors while you develop things in dev mode
5. changed **DEV** to process.env.NODE_ENV, since the same const is used in React itself to check if PropTypes checks should be done
6. Added bunch of scripts including prepublish, so you can publish module on npm now already built properly and without any extras (npmignore)

Should pretty much fix #11 
",nkbt,2015-07-07 09:15:09
13,2015-07-06 08:00:07,"I tested all demos to make sure nothing is broken.

Next: I want to make demos built in a way you can easily do development and also publish gh-pages with no pain. Should be pretty quick (did not do it to keep this PR bit smaller)
",nkbt,2015-07-07 09:15:09
13,2015-07-06 17:09:53,"Hooooly s**\* that's hardcore =D

Thanks a ton. I have some local changes (since two days ago... sorry for the delay) to the API that I want to push first. This might not merge cleanly afterward. Anyhow, I think this PR should be split. More on that after I'm done (soon).
",chenglou,2015-07-07 09:15:09
13,2015-07-06 21:26:37,"No worries, let me know how you want to split it. I will fix conflicts for
sure.
",nkbt,2015-07-07 09:15:09
13,2015-07-07 09:30:27,"Let's make it step by step. ESLint is completely independent #17. Configured for your code style. There are lots of syntax errors and couple of missing functions though. Did not fix them in that PR
",nkbt,2015-07-07 09:15:09
13,2015-07-07 11:13:19,"Ouch, just realized I accidentally made a PR from my master, not from the branch. After rebase PR has gone =(.
",nkbt,2015-07-07 09:15:09
13,2015-07-08 08:17:38,"Man, thanks again for all your effort and sorry for changing the files so quickly. I'll comment on the other issues...
",chenglou,2015-07-07 09:15:09
13,2015-07-08 08:21:07,"No worries. This is something I am really happy to do
",nkbt,2015-07-07 09:15:09
12,2015-07-06 00:39:19,"Low-hanging fruit. Will write a separate method for traversing the current velocity tree and checking that everything's at zero.

(Future iteration: do transducers help here? A bit tired of reimplementing basic methods for trees).
",chenglou,2015-07-08 07:54:24
12,2015-07-06 12:10:13,"In my own implementations, I've checked if the Math.abs(velocity) is < 0.1 inside of the rAF method and returned if true, canceling the loop. By the time it gets that low, there is very little if any visual feedback that would be shown.
",kenwheeler,2015-07-08 07:54:24
12,2015-07-06 16:12:29,"You simply traverse the current velocity tree and check each leaf, right?
",chenglou,2015-07-08 07:54:24
12,2015-07-06 16:33:46,"I haven't done it with trees, so I would normally just check currV, but in a tree scenario, might want to Math.max the values and wait until the largest is below 0.1. This is of course contingent upon starting the frame back up on componentDidReceiveProps.
",kenwheeler,2015-07-08 07:54:24
12,2015-07-06 17:29:52,"I see. Btw the spring algorithm (`stepper.js`) already rounds the error to 0.001. We probably don't wanna make it 0.1? Since 0.1 concerns a nicer animation while stepper's 0.001 concerns just the incertitude in the number.

Or maybe we should just bump the error margin to 0.1.
",chenglou,2015-07-08 07:54:24
12,2015-07-06 17:42:36,"I wouldn't change the stepper's error margin, I think it should stay broad just in case. But for checking if velocity is 0, I agree with @kenwheeler, <0.1 is good :+1: 
",bsansouci,2015-07-08 07:54:24
12,2015-07-08 07:54:19,"@kenwheeler master now fixes this, so closing.

I'm stopping at the exact value of `0`. Fortunately the actual spring algorithm already handles the error margin.

The library itself can't stop raf-ing at a bigger error margin than the algorithm itself. The reason is that the user might be using an `endValue` callback where it checks the current exact final position and start another animation. Related commit: https://github.com/chenglou/react-motion/commit/5a4cfa80f86f52abf5874ac6cbd2b82669d19821#diff-46a726b4ea0347d025bead8637578ac1R214

Of course, the user can decide to stop at a bigger error margin.

Hope that made sense, if not, feel free to ask for more clarification. I'll have to explain a few related bits in the readme soon anyways so I'd be nice to ensure everything's clear.

(And yes, you get chained animation practically for free, soon =))
",chenglou,2015-07-08 07:54:24
11,2015-07-05 23:30:02,"Hi Cheng,

Have you considered publishing to npm (even if its internals are still to change?). The npm package `react-animation` [is already taken](https://www.npmjs.com/package/react-animation). However, that other project [seems like it never kicked off](https://github.com/akiran/react-animation). Perhaps you can claim it or publish to a different name?

Thanks :)
Dar√≠o
",dariocravero,2015-07-18 03:25:50
11,2015-07-05 23:32:59,"Man, I totally forgot to check that before I started iterating on this repo... thanks for the heads up. I'll reach out and see what happens!
If it doesn't work out, feel free to brainstorm new names here. React-animation sounds a bit plain.
",chenglou,2015-07-18 03:25:50
11,2015-07-05 23:45:57,"Brilliant :) I'll think of something :).

Also, I have a few suggestions regarding the code, off the top of my head:
- [x] use `Array.isArray` instead of [[object Array]](https://github.com/chenglou/react-animation/blob/ccac69e565f7d2c167a1cb7330877be38f0c1062/Spring.jsx#L36).
- [ ] [use triple equality](https://github.com/chenglou/react-animation/blob/ccac69e565f7d2c167a1cb7330877be38f0c1062/Spring.jsx#L33).
- [x] put the examples into an examples folder :),
- [ ] separate `TransitionSpring` and `Spring` into different files and preferably some of the internals into different files too for easier testability and better code readability,
- [x] move the hacks away from `render` :),
- [x] make strings like `currVals` more explicit, e.g.: `currValues`,
- [ ] use `js` (or `.es6`, [we're using that extension to compile js to npm without changing paths](https://github.com/UXtemple/panels-runtime/blob/master/.bin/compile)) instead of `jsx`,
- [ ] use classes because you're already on es6 and newer versions of react won't use `createClass` anymore,
- [ ] [use ternary operators here and there](https://github.com/chenglou/react-animation/blob/ccac69e565f7d2c167a1cb7330877be38f0c1062/Spring.jsx#L427-L431),
- [x] add some (initial) tests :)

I'm sure you're already aware of many of those. I wouldn't mind tackling some if not all of them.

Thoughts?
",dariocravero,2015-07-18 03:25:50
11,2015-07-05 23:57:13,"You're right on most points but fixing them now is almost a waste of time, because I'm changing them, like, as we speak =). The local version already looks different.

Turned your stuff into check marks.

It'll be more productive for us right now to iterate on the API. I'll write down some more issues. Feel free to check the long-ass #9 meanwhile!
",chenglou,2015-07-18 03:25:50
11,2015-07-05 23:58:00,"Also:
- [x] use `.babelrc` instead of a string in the loader,
- [x] probably separate webpack's config for `dev` and `production`?
- [ ] either warn about the need for `__DEV__` to be set if you're not using that plugin in your webpack or you aren't using webpack but are linking the package. I'm getting `Uncaught ReferenceError: __DEV__ is not defined` which isn't a big deal to workaround but still :)
",dariocravero,2015-07-18 03:25:50
11,2015-07-05 23:58:19,"Class :) I'll wait for some changes to land then.
",dariocravero,2015-07-18 03:25:50
11,2015-07-05 23:59:57,"Any chance you can push those to a temp branch or something? :)
",dariocravero,2015-07-18 03:25:50
11,2015-07-06 04:57:59,"@chenglou I was doing recently a lot of packaging work on https://github.com/ericelliott/prod-module-boilerplate https://github.com/ericelliott/universal-react-boilerplate and my personal bunch of react-\*  modules (even made one https://github.com/nkbt/react-component-template to keep it lean and clear) . It all works really well, so I can tackle this one if you don't mind. You can assign it to me.

Should not take much time and will be done today (I'm in Sydney)
",nkbt,2015-07-18 03:25:50
11,2015-07-06 07:38:31,"Thanks for the offer! For the moment (until I write the actual readme, at least) I'll hold this off or otherwise lots of work would be redone =). Might check into your templates when I'm done with the rough API (soon).
",chenglou,2015-07-18 03:25:50
11,2015-07-06 08:12:09,"@chenglou oh sorry, was on a train and did not catch up with your comment. I've already done all things. Minimal code changes, though. Only infrastructure. Feel free to check it out and try new build/test process.
",nkbt,2015-07-18 03:25:50
11,2015-07-06 08:16:22,"@chenglou oh and it does not matter if you are going to change API soon, you still can publish 0.0.1 for now. And go 1.0.0 when API is fairly stable.
",nkbt,2015-07-18 03:25:50
11,2015-07-09 20:44:42,"Published =). Leaving this open to check off the checkboxes gradually
",chenglou,2015-07-18 03:25:50
11,2015-07-18 03:25:50,"Enough of these have been checked. Closing. We'll work on the rest gradually.
",chenglou,2015-07-18 03:25:50
10,2015-07-05 15:45:15,"I desperately need help. Maybe I'm forgetting to do something 
Command ""npm run build"" failed on windows
![image](https://cloud.githubusercontent.com/assets/2178870/8512300/09c84484-2356-11e5-9387-f3e08cc39fbf.png)
",anorudes,2015-07-05 16:48:22
10,2015-07-05 16:05:59,"Mmmh would it be because `NODE_ENV=production` doesn't work on Windows? Maybe it should be something like `set NODE_ENV=production`
",bsansouci,2015-07-05 16:48:22
10,2015-07-05 16:33:26,"Thanks, I deleted a line in package.json and run ""set NODE_ENV=production"". It's working!
",anorudes,2015-07-05 16:48:22
9,2015-07-05 02:39:52,"This is a very new library. If you were curious as to how its design came to be, you're at the right place!

This issue's focused on the declarative tweening itself. I'll make another one for unmounting animation. For reference, check my React-Europe talk on animation.

I've partitioned the possible APIs into representative categories, then trimmed away the invalid ones to come to what roughly looks like the current state of the API. The APIs are all focused on the physics of a spring.

**Note**: if there's ever an oversight in my reasoning that results in my trimming a possibly valid API, please do point out!

**Note 2**: this is a simplified version. Feel free to ask questions on the unclear part.

Here are the specific criteria:
- Must be able to express dependency between values, e.g. the final value of item1's `top` should be able to depend on item2's **current** interpolated value of `width`. This seems a bit random, but it's needed to do the real physics version of the staggered animation (where one thing animates after another). See the chat head `demo1.jsx`.
- Must be able to work with a tree of children, not just a flat list like TransitionGroup.
- Must be optimizable.
- Animated value granularity must be on the level of numbers, not components. A component should be able to have different tweening springs/curves for its different style values.

Please also point out if my criteria are too extreme and cover unnecessary use-cases.
### 1 Put style directly on children
#### ~~1.1~~ Directly style on DOM components
##### ~~1.1.1~~

<S_CODE_TOKEN>

Can't interpolate.
##### ~~1.1.2~~

<S_CODE_TOKEN>

Means `scalarValue` has to be in some configuration, in which case the constraint of styling directly on DOM components doesn't apply. Scratched. Generalized version below in point 2.
### ~~1.2~~ Use wrapper component
#### ~~1.2.1~~

<S_CODE_TOKEN>

`Thing` wrapper provided by Spring, somehow.
It'll interpolate from whatever current value (stored in `Thing`'s state) to the `destinationValue`.
Unfortunately, can't animate `top` unless `Thing` passes props to child `div`; next point.
#### 1.2.2

<S_CODE_TOKEN>

Compute `Thing` using [HOC](https://gist.github.com/sebmarkbage/ef0bf1f338a7182b6775).
Supports both flat list and tree children.
How to do dependencies on currently transitioning values? Can't, unless with a dedicated binding API. Let's not do bindings for now?
## 2 Put style inside a configuration + let user manipulate and generate children

This implies the configuration is stored somewhere inside owner state, callback passed to generate children, context, etc. They're mostly equivalent (?).
### ~~2.1~~ Use wrapper component

<S_CODE_TOKEN>

No need for wrapper. We can directly point to where we want to style.
### ~~2.2~~ No wrapper
#### ~~2.2.1~~

<S_CODE_TOKEN>

Supports both flat list and tree children.
Works with dependencies between **final** values: generate your data however you want before passing it to `destinationValue`.
Doesn't work with dependencies between **current** values (this is the real criteria). You don't know what `x`'s current interpolated value is until you pass the final structure to spring for the interpolation. The chat head demo cheats by using the previous tick's interpolated value (exposed here as `prevTickTops`, so there's actually a small delay. But maybe this is good enough for most cases?
Can't control granularity. Scratched.
#### 2.2.2 Above, take 2

<S_CODE_TOKEN>

More or less what this library uses. This solves the previous granularity problem.
## ~~3~~ Mixin + state
### ~~3.3~~ tween-state

<S_CODE_TOKEN>

""Scratched"" in the sense that this is already an established library. Mixins are getting deprecated so this won't be a viable solution in the future. Children functions (as seen above in 2.2.1 and 2.2.2) are a good alternative, which keeps the state inside the wrapper component instead of in the owner's state. The only caveat of keeping the state inside the wrapper is that others can't easily read into that state; you can still do this though:

<S_CODE_TOKEN>

Which is enough for most cases, from my experience.
",chenglou,2015-07-27 05:42:30
9,2015-07-06 00:09:47,"Quick question, is there any reason why the call to `rAF` couldn't be disabled on `componentDidUpdate` and enabled when `componentWillUpdate` (apart from `componentDidMount`)?
",dariocravero,2015-07-27 05:42:30
9,2015-07-06 00:12:14,"Not sure what you mean? Currently the rAF doesn't stop at all until unmount. But still, why disabling it on didUpdate?
",chenglou,2015-07-27 05:42:30
9,2015-07-06 00:34:29,"Because it will re-render everything down the tree on every cycle and if I want the animation to be a once off, then it should stop right after it reached the end value, shouldn't it? I don't know if you remember about the [panels](usepanels.com) question I asked you at the end of the conference regarding snapping, essentially, every panel renders custom things inside itself. If I'm surrounding them by `Spring` I get never-ending render calls to every one of its children :(. Am I trying to use the library in a way it wasn't intended?
",dariocravero,2015-07-27 05:42:30
9,2015-07-06 00:37:37,"Yes, of course I will stop rAF-ing when I detect that the velocities have all gone to zero =).
I just didn't do it now because there are other stuff to fix, simple as that. #12 
",chenglou,2015-07-27 05:42:30
9,2015-07-06 00:38:34,":D perfect, thanks! Thought I was missing something there...
",dariocravero,2015-07-27 05:42:30
9,2015-07-06 21:31:28,"Not sure if it's in the works, but I think it would be beneficial to take care of all vendor prefixing and allow users to pass values similar to these:

<S_CODE_TOKEN>

This is taking inspiration from animation libraries like http://julian.com/research/velocity/. Not sure how the final API will look, but will there be wrappers that allow appear, enter, and leave animations like TransitionGroup does? I tried taking this on here with Velocity https://github.com/souporserious/velocitytransitiongroup. So being able to provide a map of values that should change on appear, maybe something like this:

<S_CODE_TOKEN>

Also, what about being able to provide predefined animations that people could create and share. This was one reason I've been trying to get Velocity to play well with React. Loved that a set of animations could be created and reused/updated in one place.
",souporserious,2015-07-27 05:42:30
9,2015-07-06 23:25:06,"`TransitionSpring` works and is currently undocumented. Stay tuned =).
There won't be a core built-in API for taking care of vendor prefixes, because I made sure doing so would be trivial:

<S_CODE_TOKEN>

This is trivial to implement. It returns an object that you'll spread onto your existing style.
You generate these at the bottom level when you receive your interpolated values, instead of prescribing them into your (arbitrary) initial data structure. If there's enough demand I'll expose that as a helper.

Regarding predefined animation: is this enough? Create a new component that wraps around Spring by pre-setting some values for `destinationValue`. That should do what you want, right?
",chenglou,2015-07-27 05:42:30
9,2015-07-07 01:26:50,"Awesome. Yeah I was just thinking of giving users that don't want to set up anything and just add animations an easy way to do so. Creating a wrapper component for whatever predefined animations you need makes total sense though. Then you could just have custom props for whatever your animation is. Excited to see more docs on it :)
",souporserious,2015-07-27 05:42:30
9,2015-07-27 05:42:30,"Closed because not an issue. But will always welcome questioning of the general API here!
",chenglou,2015-07-27 05:42:30
8,2015-07-03 14:19:15,,hzoo,2015-07-03 23:59:07
8,2015-07-03 23:59:05,"Yeah why not? I guess this is the new way of doing things. Thanks.
",chenglou,2015-07-03 23:59:07
7,2015-07-03 13:17:16,,hzoo,2015-07-03 17:55:44
7,2015-07-03 17:55:36,"Sure, thanks! But the readme's gonna be rewritten properly tonight, so let's hold off for these for now.
",chenglou,2015-07-03 17:55:44
6,2015-07-03 10:25:52,"Quick ""semi-hacky"" way to enable Demo#1 for mobile devices
",jevgenig,2015-07-03 10:30:35
6,2015-07-03 10:30:28,"Thanks!
",chenglou,2015-07-03 10:30:35
5,2015-07-03 09:48:16,"Fumbled to get this out of in time for the talk. Let's document this correctly and clean up the code. 
",chenglou,2015-07-09 20:44:11
5,2015-07-09 20:44:11,"Done!
",chenglou,2015-07-09 20:44:11
4,2015-07-03 09:22:16,"fix small typo
",jvanaert,2015-07-03 09:23:25
4,2015-07-03 09:23:23,"Ha! Thanks :)
",bsansouci,2015-07-03 09:23:25
3,2015-07-02 23:11:00,"Here's a proof of concept of hot reloading. I'm not sure whether this is useful with stateful spring system, but you can play with it :-)

<S_CODE_TOKEN>

You can also make a production build

<S_CODE_TOKEN>

and open the regular HTML file.
",gaearon,2015-07-02 23:21:32
3,2015-07-02 23:21:52,":+1: :D
",chenglou,2015-07-02 23:21:32
2,2015-06-29 12:48:42,"Wanted to see how this performed on mobile browsers. Only tested in an iOS simulator so far, but it nailed it.

![with-touch](https://cloud.githubusercontent.com/assets/227879/8408150/890361a4-1e3b-11e5-8d00-16c6f2f21280.gif)
",iamdustan,2015-06-29 18:03:29
2,2015-06-29 17:40:37,"Whah =D thanks
Well I sure am glad it doesn't lag for like, 11 balls lol
I allocate like crazy in the current `Springs` so that's good news. We'll have some wiggle room.
If you want, you can try it on React-Native =).

I'll merge after we resolve the comments
",chenglou,2015-06-29 18:03:29
2,2015-06-29 18:03:26,"Too much trouble (aka, too lazy) to check how to include the babel runtime. I'll just switch back to `indexOf` lol. Merge time!

And yeah, secret demo is coming up. It's already here locally =)
",chenglou,2015-06-29 18:03:29
2,2015-06-29 18:14:56,"Update: not 60fps on iPhone 6. Somewhat expected but there's a lot of room for optimization. Maybe I'll try on react-native later and blame it on the dom lol
",chenglou,2015-06-29 18:03:29
2,2015-06-29 18:16:09,"Where is that favorite and retweet button? :smile:
",iamdustan,2015-06-29 18:03:29
2,2015-06-29 18:20:24,"SSSHHHHHH I'm not done yet! The repo's supposed to be an open secret.
The plan's probably rolling this into tween-state as the new API. People who want mixins + regular ease functions (why would you now?) can use that. Otherwise you import this Springs component instead. In the future for backward compat we can deprecate `tweenState.Mixin` and turn in into a `<Tween />` component, or simply abstract `Springs` away into that more general `Tween` component.

Also, real `Decay` component coming up...
",chenglou,2015-06-29 18:03:29
2,2015-06-29 19:43:54,":+1: 
",FoxxMD,2015-06-29 18:03:29
1,2015-06-15 11:15:43,"I didn‚Äôt listen to your README warning.

This looks awesome.
",iamdustan,2015-06-15 21:04:07
1,2015-06-15 20:35:33,"omg lol, fine!

`transform` seems to work in all modern browsers now? I guess you can just remove `Webkit` prefix altogether
",chenglou,2015-06-15 21:04:07
1,2015-06-15 21:00:50,":)

iOS 8/Safari 8 still require the `-webkit-` prefix, laggards.
",iamdustan,2015-06-15 21:04:07
1,2015-06-15 21:04:04,"Merging then!
Feel free to create new issues and ask questions (I welcome those, in case I'm missing something), but keep this low profile please!
",chenglou,2015-06-15 21:04:07
1,2015-06-15 21:04:56,"Will do. I need to play more. We all have our lo-pro projects :)
",iamdustan,2015-06-15 21:04:07
