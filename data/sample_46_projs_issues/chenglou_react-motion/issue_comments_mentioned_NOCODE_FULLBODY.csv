issue_num,datetime,body,login,mention_login
438,2017-03-17 15:49:26,"@wgoto thanks for the answer!

could you elaborate a bit on it? maybe you have some old snippets that you did already? would really appreciate it.",petromoldovan,wgoto
438,2017-03-18 09:25:00,@sompylasar thank you!,petromoldovan,sompylasar
427,2017-02-04 01:04:43,"@averykimball you forgot `return`. Curly braces mean that you declare function body that does not have implicit return, so you must add one.

",nkbt,averykimball
422,2017-01-21 01:40:39,"@souporserious `onEnter` in react-motion-ui-pack is a callback when animation starts, in the same moment as willEnter.

`didLeave` was added in last release, would be logical to add `didEnter` as well",klimashkin,souporserious
420,2017-03-01 16:54:50,@chenglou Done!,alleycat-at-git,chenglou
415,2017-01-17 16:32:56,"@liveresume So you turned out to be right. There were a couple of issues at play. First, the `MatchWithFade` code in the example was taken verbatim from the RR folks, so I assumed it was entirely right. Second, I didn't fully comprehend the issue with keys that you were suggesting. Somebody posted a note to the SO thread that clarified things for me:

http://stackoverflow.com/questions/41388263/nested-match-routes-with-react-router-v4-and-matchwithfade

The summary is that each key has to be unique to the `Match` instance and cannot change on re-renders, which means a random number generator is no good. The guy on SO suggested using `rest.pattern` from RR, which is the part of the URL pattern that matches up to the current `Match`, which strikes me as exactly the right value to use for the key. So, sorry for the kerfuffle, and thanks for your help!",bmueller-sykes,liveresume
413,2017-01-06 19:56:52,@emilebosch I had tried a few things based on that. No luck.,liveresume,emilebosch
402,2016-12-01 20:27:00,"Thank you @sompylasar, that's really helpful.

I managed to get most of this done:
http://codepen.io/mares0909/pen/jVYrye

The only thing I'm not sure how to implement is the euclidian distance-based friction. Would you be able to fork that pen and add it to the example? Or push me into the the right direction with that?",webondevices,sompylasar
402,2016-12-03 22:20:02,"@sompylasar , that is perfect, thank you!!",webondevices,sompylasar
399,2016-12-06 18:36:52,"> didLeave seems to be a more appropriate name than onRest. To me at least, onRest implies that the TransitionMotion component as a whole is no longer in motion. While, on the other hand, didLeave implies that a single child has finished transitioning out of the TransitionMotion component, yet other children may still be in motion.

@DetweilerRyan, that was also what I thought when naming it 'didLeave' :-)
`onRest` would be misleading compared with `<Motion onRest />`.
Next, I would suggest/PR for a `didEnter`, and those two combined would allow for a proper onRest implementation.

@chenglou do you see `react-motion` as abandonware? I still believe it's one of the best packages for doing spring animations in React. The spring logic is solid, but there is always room for further development for the API :-)",hkjorgensen,DetweilerRyan
399,2016-12-06 18:36:52,"> didLeave seems to be a more appropriate name than onRest. To me at least, onRest implies that the TransitionMotion component as a whole is no longer in motion. While, on the other hand, didLeave implies that a single child has finished transitioning out of the TransitionMotion component, yet other children may still be in motion.

@DetweilerRyan, that was also what I thought when naming it 'didLeave' :-)
`onRest` would be misleading compared with `<Motion onRest />`.
Next, I would suggest/PR for a `didEnter`, and those two combined would allow for a proper onRest implementation.

@chenglou do you see `react-motion` as abandonware? I still believe it's one of the best packages for doing spring animations in React. The spring logic is solid, but there is always room for further development for the API :-)",hkjorgensen,chenglou
399,2016-12-07 17:49:50,Yes to a new release please 🙏  thanks for this @hkjorgensen!,souporserious,hkjorgensen
399,2016-12-12 19:35:28,"@chenglou Thanks for the explanation - I still look forward to that new open source project :-)

> Thanks a lot for this PR. I'll be merging this. Do we want to make a new release?

Yes, please cut a new version. This expands the API and doesn't break anything :-)
",hkjorgensen,chenglou
394,2016-11-23 08:11:09,"@nkbt  Thanks for your advise. Actually I just want to animate color while animating offset, but React-Motion doesn't support it. So I have to use ""percentage"" to interpolate color. It would be great if React-Motion supports animating color.",lzl124631x,nkbt
394,2016-11-23 21:17:01,"@lzl124631x you can animate arbitrary numbers with react motion, and derive color from that number. Effectively:

",nkbt,lzl124631x
394,2017-03-07 19:46:04,"@tannerlinsley The ""non-numbers"" are effectively number-based if they can be interpolated. It's just the question of functional mapping from number to non-number, e.g. this: 


-----

But the notion of ""percentage of animation"", i.e. how close are you to the ""**end moment in time** of the animation"" (versus to the ""**target value** of the animation""), is not applicable to physics-based animations which `Motion` provides by default with `spring`.
",sompylasar,tannerlinsley
394,2017-03-07 20:07:54,"@sompylasar Right. The concept is very straightforward to interpolate anything using an integer, but the architecture and current api for react-motion doesn't make this very easy to do with strings, hexColors, paths, etc. 

A good example of this is animating a string. The amount of overhead the user would have to take on to build a linear conversion scale from one string to another is massive.  Luckily, d3-interpolate can handle that for you.  

If we assume that, then the problem boils down to finding a reliable way to construct the interpolator and percentage on every value change:



Even though it's not natural for a physics based animation system to know of the percentage between the current and destination value, it is possible.  You need to be able to:
- On change, use react-motion to spring from `n` to `n + 1`
- Keep track of `oldValue`, `newValue`,  `oldN`, and `n`
- Update the interpolator to use `oldValue` and `newValue`
- Utilize the decimal created from `n - oldN` to be utilized as the interpolator percentage

You should check out https://github.com/chenglou/react-motion/issues/153#issuecomment-284824453.  It's a (very shrude and quick proof of concept) abstraction that does exactly this.  I would love some feedback.",tannerlinsley,sompylasar
394,2017-03-08 05:11:33,"@tannerlinsley Good job there! I meant one cannot get the time-based percentage because the time moment when physical animation ends is not known in advance, without premodeling it. The value-based percentage can definitely be obtained, that's what is in the block you've shown. And it might overshoot in case of a spring (the complex easing curves can, too, so it should be fine).",sompylasar,tannerlinsley
392,2017-03-13 23:45:42,"Hej @johanatan How did u fix it ?, I have this similar issue",karna41317,johanatan
392,2017-03-15 02:18:44,@karna41317 I ended up having to drop this dependency and use jQuery animations instead.,johanatan,karna41317
390,2016-11-08 10:15:43,"hey @lzl124631x I find that React Motion is best suited for animations that react to state changes. ie. smoothly showing or hinding a sidebar navigation, tranisitioning between views when the URL changes and similar things that are tied specifically to the state/props within a given component, where you always have the values avilable that you want to animate between.

Complex sequential stuff, where you have full control over how each animation within the sequence, is something I always rely on GSAP for. IMO it has far a superior API for that kind of stuff (Like the TimelineLite class you mention). GSAP and React Motion are two very different approaches to solving animation. I would say they are almost polar opposites. I love both of them, so this isn't trying to talk down React Motion at all, but in this particular case it seems like GSAP might be the better fit and leave you with simpler, cleaner code.
",Ahrengot,lzl124631x
390,2016-11-08 11:38:04,"@Ahrengot Thanks for your comments.

In the first few days with React Motion, it's cool enough to help me achieve some one-step animation during state changes. **However, as the project goes on, it's inevitable that I need to make some fancier sequence of animation**. I think other devs might stumble into the same situation.

Is it possible to give React Motion the ability to animate a sequence of tween? For example, make the `<Motion>`'s `style` attribute accept an array of sub-styles, and React Motion just animate to the first sub-style, and then the 2nd and then ... and the last. In this way a sequence of tween is achieved. What do you think?
",lzl124631x,Ahrengot
390,2016-11-08 20:27:39,"@lzl124631x you need to delay updating state with setTimeout/requestAnimationFrame.

See https://github.com/nkbt/react-motion-loop/blob/master/src/Component.js#L21-L23
",nkbt,lzl124631x
390,2016-11-09 02:01:05,"@nkbt Wow! Thanks! It works as long as I wrap `requestAnimationFrame` around updating state.

[Demo on CodePen](http://codepen.io/lzl124631x/pen/yVYYVa)
",lzl124631x,nkbt
390,2016-11-10 01:47:37,"@nkbt Can you kindly tell me why delaying updating state with setTimeout/requestAnimationFrame do the trick?
",lzl124631x,nkbt
390,2016-11-10 07:03:51,"Not really, maybe something to do with batch updates optimisations, but I
don't know for sure
On Thu., 10 Nov. 2016 at 12:52, 7z7 notifications@github.com wrote:

> @nkbt https://github.com/nkbt Can you kindly tell me why delaying
> updating state with setTimeout/requestAnimationFrame do the trick?
> 
> —
> You are receiving this because you were mentioned.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/390#issuecomment-259580118,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAKsoA0Q5MDkoqnlS2kOcY689h6QANIBks5q8ne6gaJpZM4KqOdn
> .
",nkbt,nkbt
381,2016-11-04 21:21:38,"Hey @asgvard, I think you can do this using TransitionMotion. 
I don't have the code right now, but I did something similar, changing a little the React Router V4 example on this page: https://react-router.now.sh/animated-transitions.

I changed opacity by transform: translated and something else I don't remember.

---

To my first problem, I solved using only Motion component and using Match (from RRouter V4) inside Match component. This way you can do something similar to the transition animation in http://ionicframework.com/docs/api/directive/ionNavView/.
",gabrielalan,asgvard
381,2016-11-06 16:25:58,"Hi @gabrielalan, thanks for your reply. I think I'm close to solving this issue using Match with ""children"" func. Assuming now I have all the pages rendered in parallel and having control of ""matched"" flag, I think it's possible to transit between them, now struggling with absolute position of all the pages (because I need them to overlap), and I still have some issues with the entering page, it ""blinking"" first during transition, and only then fully rendered. If you will find some time to share some code example of how you achieved the effect of this ionNavView using only react-router and Motion, I would really appreciate this :)
",asgvard,gabrielalan
381,2016-11-07 11:07:13,"@asgvard 

Well, I did this using a simple Match, with a brother Match ""extended"" (using the children function). Like this:



MatchSlide is this guy:



Other way to do this, its putting MatchSlide (or your implementation) inside the ""normal"" Match or another MatchSlide. So this way to can do ""cascade"" animation between the pages.
",gabrielalan,asgvard
381,2016-11-08 21:59:24,"@gabrielalan don't understand your solution 100%, could you elaborate? can't figure out how your component changes its behavior based on whether it's a new route or `history.back()`

this is what i got, every new component coming from the left, no matter if i go back or forward in history:


",chapati23,gabrielalan
381,2016-11-08 23:39:31,"@chapati23 the MatchSlide its using the Match component from RRouter V4, so I can use the props.matched inside with ""children"" function, to tell the Motion component if it must be Opened or Closed... Its not the best way to do this, because the MatchSlide is always rendered, unless you control it before render MatchSlide.
",gabrielalan,chapati23
380,2017-01-15 09:50:30,@jcarenza You can also use [ShouldNotUpdate](https://github.com/codepunkt/should-not-update) to declaratively do so.,codepunkt,jcarenza
371,2016-09-25 07:20:52,"@AgentME Merged, thanks! Can you check master still works?
",chenglou,AgentME
371,2016-09-25 07:43:15,"@chenglou Fix is in https://github.com/chenglou/react-motion/pull/373. I think the issue had to do with #371 containing #361's commit, but because they were both done in rebase mode git didn't recognize they were the same commit and it created conflicts. #373 fixes it.
",AgentME,chenglou
371,2016-09-25 20:37:40,"@chenglou can we get a new build? Would love to pull in this change, thanks @AgentME!
",twobit,chenglou
371,2016-09-25 20:37:40,"@chenglou can we get a new build? Would love to pull in this change, thanks @AgentME!
",twobit,AgentME
365,2016-09-06 20:25:37,"@demianalonso you were absolutely right. Passing the same key prevented the pane to animate multiple times. Thank you so much!!
",p4bloch,demianalonso
361,2016-08-23 03:22:00,"@bgeihsgt seems like it's breaking Eslint. maybe use `ReactElement<*>` instead?
",zhigang1992,bgeihsgt
361,2016-08-23 05:43:57,"@zhigang1992 Looks like it's a parsing error with brackets. I tried `ReactElement<*>` and got the same errors. Looking around, I think you'll need to upgrade `babel-eslint` to at least version 5.0.0. That requires other upgrades too that I tried for a little bit and then gave up b/c I didn't have time to investigate and fix.
",bgeihsgt,zhigang1992
361,2016-09-02 18:11:18,"@jefflau someone needs to upgrade babel-eslint to at least 5.0.0 which requires a cascade of other upgrades. I tried to upgrade for a little bit but didn't have the time to see it through.
",bgeihsgt,jefflau
361,2016-09-21 21:18:20,"Cool, thanks @AgentME!
",bgeihsgt,AgentME
361,2016-09-25 06:08:53,"@AgentME to be clear: if I merge this PR then merge #371, things will be fine?
",chenglou,AgentME
361,2016-09-25 07:14:03,"@chenglou Yes, that will work. (#371 actually contains the exact commit of this pull request; accepting both would be fine.)
",AgentME,chenglou
361,2016-09-25 07:18:02,"Let's try it then! Thanks @bgeihsgt and sorry for the wait!
",chenglou,bgeihsgt
357,2016-08-12 12:01:37,"@nkbt hi there, I'm trying to implement smooth scroll using this technique, but I can't quite understand how do you trigger scrolling component's onScroll and put scrollTop to state without experiencing default scrolling behaviour?

e.g I have following code



And Area looks like this



Don't mind debouncing, it doesn't quite fit here, throttling would work better I guess.
What I experience, with or without debouncing or throttling, is that native scroll behaviour triggers first  thus messing up area's scrollTop.  Any help would be greatly appreciated

And thanks for this library, I love it!
",berrtech,nkbt
357,2016-08-12 13:38:41,"@berrtech You'll have to skip handling of the browser `scroll` event when animating. This is quite tricky because the user might want to scroll the opposite way, so that the ongoing scrolling animation stops. 

I've implemented a component that handles the viewport with scrolling, see below:
(gist here for discussion: https://gist.github.com/sompylasar/8b787c3fcfe0e14bba869a4e9a883135 )

_Viewport.js_



_./styles.scss_


",sompylasar,berrtech
357,2016-08-13 00:19:51,"@berrtech do not use state at all, make your side-effect work without any state updates. Keep it isolated. Then it all works. We use it exactly as I wrote in my prev 2 comments and it works great.

@sompylasar looks quite complicated =(
",nkbt,sompylasar
357,2016-08-13 00:19:51,"@berrtech do not use state at all, make your side-effect work without any state updates. Keep it isolated. Then it all works. We use it exactly as I wrote in my prev 2 comments and it works great.

@sompylasar looks quite complicated =(
",nkbt,berrtech
357,2016-08-13 00:28:24,"@nkbt This may be simplified a bit if the X and Y handling is unified.



But the scroll handling is complex because the browser reports both user scrolling and API scrolling with the same ""scroll"" event -- these have to be distinguished.
",sompylasar,nkbt
357,2016-08-13 12:47:00,"@sompylasar it looks really complicated and fragile, I managed to tweak this to use with div container rather than window, however it skipped animation sometimes, needs more tweaking I guess.

@nkbt but how do you handle scrolling container by user? While this works when you control scrollTop from the outside, Motion doesn't know when it's animateTo value is changed by user, so, when you animate to, say, 300px, and then user scrolls down to 600px, Motion has no idea than next animation should be from 600px, it just snaps to 300px and then animates because that was previous known value.
",berrtech,sompylasar
357,2016-08-13 12:47:00,"@sompylasar it looks really complicated and fragile, I managed to tweak this to use with div container rather than window, however it skipped animation sometimes, needs more tweaking I guess.

@nkbt but how do you handle scrolling container by user? While this works when you control scrollTop from the outside, Motion doesn't know when it's animateTo value is changed by user, so, when you animate to, say, 300px, and then user scrolls down to 600px, Motion has no idea than next animation should be from 600px, it just snaps to 300px and then animates because that was previous known value.
",berrtech,nkbt
357,2016-08-13 19:26:05,"@berrtech Using window scrolling is needed for mobile devices. If you have no intention to support them, or you're making a UI with multiple scrollable containers, then yes, a div will do. But you'll have to handle the scroll event in it instead of in viewport, the same way, because it behaves the same way.
",sompylasar,berrtech
357,2016-08-13 19:28:10,"@berrtech My previous comment applies to native scroll behavior that you seem to want to use. The other way is to implement scroll behavior entirely in your program, manually handling mouse / touch / keyboard.
",sompylasar,berrtech
357,2016-11-02 08:24:22,"@nkbt Just to add to @berrtech 's question.  Do you have a preferred strategy for dealing with cases where the UI state gets out of sync with <Motion> between renders?  It would be nice to be able to set the starting value of the animation on any desired render after a component is mounted. 

 Is the defaultStyle prop intended to handle cases like this?  Because in my case where new scroll events are triggered by user input - setting defaultStyle to the current scroll position of the element doesn't help because Motion ignores it as mentioned in the docs.

My current non-ideal work-around is to force an extra render of Motion before the animation to ensure Motion's starting point is in sync with the UI.



So - it sees that an auto-scroll event has been triggered - and calls setState to set the value of motionStyle to the current scrollTop value of the element.  No animation happens because it's not using a spring.

But now that Motion has the new starting point - we still need to trigger the animation somehow.  But I've used up the props change caused by the user  click - so there is nothing to trigger the next render.  So the only thing I've been able to come up with is to use the following:



So - after the render to sync the UI with Motion - calling setState in componentDidUpdate with the desired spring triggers another render which does the animation.  Using the prevRenderType flag prevents an infinite regress.

This works - but setting state in componentDidUpdate is generally frowned upon.  Plus it uses up an extra render.

Would be keen to hear if anyone has come up with another solution.
",danhaggard,nkbt
357,2016-11-02 08:24:22,"@nkbt Just to add to @berrtech 's question.  Do you have a preferred strategy for dealing with cases where the UI state gets out of sync with <Motion> between renders?  It would be nice to be able to set the starting value of the animation on any desired render after a component is mounted. 

 Is the defaultStyle prop intended to handle cases like this?  Because in my case where new scroll events are triggered by user input - setting defaultStyle to the current scroll position of the element doesn't help because Motion ignores it as mentioned in the docs.

My current non-ideal work-around is to force an extra render of Motion before the animation to ensure Motion's starting point is in sync with the UI.



So - it sees that an auto-scroll event has been triggered - and calls setState to set the value of motionStyle to the current scrollTop value of the element.  No animation happens because it's not using a spring.

But now that Motion has the new starting point - we still need to trigger the animation somehow.  But I've used up the props change caused by the user  click - so there is nothing to trigger the next render.  So the only thing I've been able to come up with is to use the following:



So - after the render to sync the UI with Motion - calling setState in componentDidUpdate with the desired spring triggers another render which does the animation.  Using the prevRenderType flag prevents an infinite regress.

This works - but setting state in componentDidUpdate is generally frowned upon.  Plus it uses up an extra render.

Would be keen to hear if anyone has come up with another solution.
",danhaggard,berrtech
357,2016-11-03 02:36:43,"I am afraid I am using similar technique in react-collapse, so no better
solution from me

On Wed., 2 Nov. 2016 at 19:24, Dan Haggard notifications@github.com wrote:

> @nkbt https://github.com/nkbt Just to add to @berrtech
> https://github.com/berrtech 's question. Do you have a preferred
> strategy for dealing with cases where the UI state gets out of sync with
> between renders? It would be nice to be able to set the starting value of
> the animation on any desired render after a component is mounted.
> 
> Is the defaultStyle prop intended to handle cases like this? Because in my
> case where new scroll events are triggered by user input - setting
> defaultStyle to the current scroll position of the element doesn't help
> because Motion ignores it as mentioned in the docs.
> 
> My current non-ideal work-around is to force an extra render of Motion
> before the animation to ensure Motion's starting point is in sync with the
> UI.
> 
> componentWillReceiveProps(nextProps) {
>   if (this.props.toggleScroll !== nextProps.toggleScroll) {
>     this.setState({
>       motionStyle: {y: this.elem.scrollTop},
>       prevRenderType: 'uiSync',
>     });
>   }
> }
> 
> So - it sees that an auto-scroll event has been triggered - and calls
> setState to set the value of motionStyle to the current scrollTop value of
> the element. No animation happens because it's not using a spring.
> 
> But now that Motion has the new starting point - we still need to trigger
> the animation somehow. But I've used up the props change caused by the user
> click - so there is nothing to trigger the next render. So the only thing
> I've been able to come up with is to use the following:
> 
> componentDidUpdate() {
>   if (this.state.prevRenderType === 'uiSync') {
>     this.setState({
>       motionStyle: {y: spring(this.props.offsetTop, this.state.springConfig)},
>       prevRenderType: 'autoScroll',
>     });
>   }
> }
> 
> So - after the render to sync the UI with Motion - calling setState in
> componentDidUpdate with the desired spring triggers another render which
> does the animation. Using the prevRenderType flag prevents an infinite
> regress.
> 
> This works - but setting state in componentDidUpdate is generally frowned
> upon. Plus it uses up an extra render.
> 
> Would be keen to hear if anyone has come up with another solution.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/357#issuecomment-257800543,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAKsoFxKaOilHMPRgDMg9ITN_M_xygSXks5q6Ei3gaJpZM4JcCql
> .
",nkbt,nkbt
357,2016-11-03 02:36:43,"I am afraid I am using similar technique in react-collapse, so no better
solution from me

On Wed., 2 Nov. 2016 at 19:24, Dan Haggard notifications@github.com wrote:

> @nkbt https://github.com/nkbt Just to add to @berrtech
> https://github.com/berrtech 's question. Do you have a preferred
> strategy for dealing with cases where the UI state gets out of sync with
> between renders? It would be nice to be able to set the starting value of
> the animation on any desired render after a component is mounted.
> 
> Is the defaultStyle prop intended to handle cases like this? Because in my
> case where new scroll events are triggered by user input - setting
> defaultStyle to the current scroll position of the element doesn't help
> because Motion ignores it as mentioned in the docs.
> 
> My current non-ideal work-around is to force an extra render of Motion
> before the animation to ensure Motion's starting point is in sync with the
> UI.
> 
> componentWillReceiveProps(nextProps) {
>   if (this.props.toggleScroll !== nextProps.toggleScroll) {
>     this.setState({
>       motionStyle: {y: this.elem.scrollTop},
>       prevRenderType: 'uiSync',
>     });
>   }
> }
> 
> So - it sees that an auto-scroll event has been triggered - and calls
> setState to set the value of motionStyle to the current scrollTop value of
> the element. No animation happens because it's not using a spring.
> 
> But now that Motion has the new starting point - we still need to trigger
> the animation somehow. But I've used up the props change caused by the user
> click - so there is nothing to trigger the next render. So the only thing
> I've been able to come up with is to use the following:
> 
> componentDidUpdate() {
>   if (this.state.prevRenderType === 'uiSync') {
>     this.setState({
>       motionStyle: {y: spring(this.props.offsetTop, this.state.springConfig)},
>       prevRenderType: 'autoScroll',
>     });
>   }
> }
> 
> So - after the render to sync the UI with Motion - calling setState in
> componentDidUpdate with the desired spring triggers another render which
> does the animation. Using the prevRenderType flag prevents an infinite
> regress.
> 
> This works - but setting state in componentDidUpdate is generally frowned
> upon. Plus it uses up an extra render.
> 
> Would be keen to hear if anyone has come up with another solution.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/chenglou/react-motion/issues/357#issuecomment-257800543,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAKsoFxKaOilHMPRgDMg9ITN_M_xygSXks5q6Ei3gaJpZM4JcCql
> .
",nkbt,berrtech
354,2016-07-30 22:14:33,"@dozoisch exactly, I actually meant using pure css. We never use `CSSTransitionGroup`
",nkbt,dozoisch
354,2016-07-30 22:16:15,"@dlong500 check out http://www.reactiflux.com there are always heaps of people (myself included) in your timezone and you can have some real-time talk there in appropriate channel
",nkbt,dlong500
351,2017-02-01 19:32:24,@gfantom did you find something for this?,buildog,gfantom
351,2017-02-02 02:33:03,"@buildog I'm not sure if I'm remembering correctly since it was so long ago, but I think this problem had something to do with the Chrome browser. I never found a fix for this problem, but what you could do is track your mouse position within the DOM within your component... but it would be annoying to code.",gfantom,buildog
348,2016-07-04 10:38:13,"Thank you @bloodyowl for the example
In my case though after animation some dom elements may have been moved due to other dom elements becoming hidden. So I am trying to get new offsets which I will get correctly only after animation ends
So I need to know when the last onRest is called and I would really like to avoid putting a timer for the same
",samuelpaulc,bloodyowl
337,2016-08-12 15:16:34,"@moimael you can use the RouteTransition guides, its essentially the same thing, just pass your component in as a child of RouteTransition.  The examples at https://github.com/chenglou/react-motion/issues/130 were very helpful.
",mvoloz,moimael
328,2016-05-25 03:57:30,"Hah, no worries, @luisrudge!
That's fine =)
",nkbt,luisrudge
324,2016-05-10 16:12:45,"@AnTSaSk You can track viewport resize via raw DOM events (make it your application state, pass down via props) and compare measured dimensions against some limits (you can evaluate viewport sizes at the top level and pass down some string category of the viewport to avoid frequent re-renders).
",sompylasar,AnTSaSk
324,2016-05-11 03:08:29,"I am going to give a talk on this issue in June on ReactSydney :)

Skipping animation could be done by not using 'spring' for one time when
screen size is changed.
On Wed, 11 May 2016 at 02:21, John Babak notifications@github.com wrote:

> @AnTSaSk https://github.com/AnTSaSk You can track viewport resize via
> raw DOM events (make it your application state, pass down via props) and
> compare measured dimensions against some limits (you can evaluate viewport
> sizes at the top level and pass down some string category of the viewport
> to avoid frequent re-renders).
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/issues/324#issuecomment-218208955
",nkbt,AnTSaSk
324,2016-08-31 20:50:03,"@nkbt any resources you can share of that talk? Couldn't find anything on React Sydney's websites. Thanks :)
",p4bloch,nkbt
324,2016-08-31 21:49:00,"@p4bloch wasn't recorded that day. Quite sadly, it was one of my best talks. Now I need to give it somewhere else again :)
",nkbt,p4bloch
324,2016-09-01 01:47:43,"@nkbt thanks a lot!!
",p4bloch,nkbt
322,2016-04-28 06:42:41,"Yeah.  I've noticed this too, but haven't looked too closely into a fix yet.

@chenglou, you think adding a call to `startAnimationIfNecessary` immediately after [`onRest`](https://github.com/chenglou/react-motion/blob/master/src/Motion.js#L101) would fix it?  Looks like the whole body is wrapped in `defaultRaf`, so that should put you on the next frame and kick off an animation if something changed (presuming `startAnimationIfNecessary` does what it says on the tin 😉).
",appsforartists,chenglou
322,2016-04-28 15:03:28,"I forgot to ask this last night, but @arcanis, can you talk more about what you expected when you said ""loses its momentum""?  `onRest` should only be called when the system is at rest - that is, there is no more energy left.  If there is still momentum, `onRest` will not yet trigger. 

If you want it to be perpetually moving, perhaps you should measure if the interpolated value is within some threshold of the destination, and when it is, call `setState` to change the destination.
",appsforartists,arcanis
322,2016-04-28 15:22:18,"@appsforartists Yep, I tried to check thresholds to trigger followup animations while there was still some momentum, but unfortunately it wasn't precise enough: some animations were too fast relative to others, it caused issues with bouncing (since the threshold could be triggered multiple times), curves were messed, etc. In the end, we went with Animated, which gave us a better control over sequenced animations.
",arcanis,appsforartists
322,2016-06-08 08:29:38,"@nkbt yep.. delaying setState works...   But if its possible to make it work without it I think it would be helpful, because you get kind of undefined behavior otherwise..  and it takes time to find out why..
",jardakotesovec,nkbt
320,2016-04-16 07:03:17,"Thanks @martijnrusschen, that will do the trick =)
",nkbt,martijnrusschen
320,2016-04-16 07:05:58,"@nkbt We should put a note to merge to the development branch. Cherry picking (?) will be hard.
",chenglou,nkbt
320,2016-04-18 10:17:17,"@nkbt @chenglou will this be released? Ta!
",troch,nkbt
320,2016-04-18 10:17:17,"@nkbt @chenglou will this be released? Ta!
",troch,chenglou
320,2016-04-18 12:52:44,"I don't think I have access to publish, so waiting for @chenglou :)
On Mon, 18 Apr 2016 at 20:17, Thomas Roch notifications@github.com wrote:

> @nkbt https://github.com/nkbt @chenglou https://github.com/chenglou
> will this be released? Ta!
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/pull/320#issuecomment-211313785
",nkbt,nkbt
320,2016-04-18 12:52:44,"I don't think I have access to publish, so waiting for @chenglou :)
On Mon, 18 Apr 2016 at 20:17, Thomas Roch notifications@github.com wrote:

> @nkbt https://github.com/nkbt @chenglou https://github.com/chenglou
> will this be released? Ta!
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/chenglou/react-motion/pull/320#issuecomment-211313785
",nkbt,chenglou
320,2016-04-18 18:49:42,"@nkbt now you do! But gimme a sec. I wanna check if I can close a few issues first.
",chenglou,nkbt
319,2016-04-15 03:58:24,"@MadeInMoon, I've just double-checked 0.4.1 version locally and had no issues with current demo3. The problem is definitely somewhere in your adaptation. Could you please post your component to Codepen so we can run it?
",nkbt,MadeInMoon
319,2016-04-19 23:26:54,"@MadeInMoon ah, sorry, I thought you are going to PR these changes to `react-motion`.

I am closing this for now, feel free to ping me in https://gitter.im/nkbt/help or Reactiflux if you need more help!
",nkbt,MadeInMoon
318,2016-04-20 10:59:04,"@chenglou, Thanks for your answer, it looks like all animations in RM are pure JS. I was looking for a way to offload those JS animation using the React Native Animated api. 
I've managed to use the willLeave, willEnter etc.. logic using `ReactTransitionGroup` and therefore Animated api 😉 
",ahanriat,chenglou
318,2016-04-20 16:02:32,"@chenglou Thank you for answering. I was refering to these lines in your [article](https://medium.com/@chenglou/react-motion-and-animated-4b3edf671cba#.s16hya1r4)

> That being said, Animated is really good at interpolating stuff. There’s no reason for RM to keep its interpolation logic if we can defer to using Animated under the hood.
",danwebdev,chenglou
318,2016-10-30 15:47:00,"+1
JS animations with react native usually causing bad performance. 
@ahanriat, I'm not sure that ReactTransitionGroup uses Animated api.
react-motion is really great library, would really like to use it with react native without any performance issues.
",orenklein,ahanriat
317,2016-04-06 01:23:40,"@nkbt Thanks! For now I have to delay the upgrade to React 15.0 on my project because a lot of modules haven't updated their dependencies yet, so it would be nice if you have such opportunity with `react-motion` earlier.
",sompylasar,nkbt
317,2016-04-06 01:26:24,"@sompylasar We updated to 15-rc1 as soon as it came out. Had no issues at all. All other modules simply throw `PEERINVALID` error on npm install but work totally fine. 

I reckon it must depend on what sort of 3rd party modules you rely on, and if some declare React as `dependency` or rely on deprecated features - then 😿 
",nkbt,sompylasar
317,2016-04-06 01:32:47,"@nkbt I see, well, I tend to avoid the warnings, they are there for a reason, even if they can be tolerated and everything looks fine at first sight.

I'll give it some time to settle, and get back to it, probably there will be RC3 at that moment, or even a release version -- who knows. `react-redux`, for example, has strictly specified `15.0.0-rc.1`, so I can't use the `15.0.0-rc.2` without the warning, although the latter has several major bugs fixed.
",sompylasar,nkbt
316,2016-04-08 21:18:41,"@Aranir 
I had the same issue with the demo8 (draggable list) because of **event listeners** set up in componentDidMount().
I fixed that adding `removeEventListener`  in `componentWillUnmount()`

hope it can help
",MadeInMoon,Aranir
312,2016-03-31 14:53:10,"@SleepWalker Thanks for the answer. But I cannot find a pair of stiffness and dumping to make the animation so slow, like in the 'React-Europe talk' with Chat Heads.
",crysislinux,SleepWalker
312,2016-04-20 05:48:57,"Sorry for the late reply.

@crysislinux: the slow animation stuff was for debugging and demonstration purposes; it existed as a configuration flag a while ago but I've since removed it for prod (and I hope you didn't need animations _that_ slow in your app =]). That being said, @SleepWalker's link is what I recommend people to use when they don't grasp how to adjust stiffness and damping.

In the next next release (next one is in an hour) I'll add [this](https://github.com/chenglou/react-motion/issues/265#issuecomment-184697874), which will make the situation even better.

Closing! Thanks for the question.
",chenglou,crysislinux
312,2016-04-20 05:48:57,"Sorry for the late reply.

@crysislinux: the slow animation stuff was for debugging and demonstration purposes; it existed as a configuration flag a while ago but I've since removed it for prod (and I hope you didn't need animations _that_ slow in your app =]). That being said, @SleepWalker's link is what I recommend people to use when they don't grasp how to adjust stiffness and damping.

In the next next release (next one is in an hour) I'll add [this](https://github.com/chenglou/react-motion/issues/265#issuecomment-184697874), which will make the situation even better.

Closing! Thanks for the question.
",chenglou,SleepWalker
312,2016-04-20 23:52:13,"@chenglou Any plans on adding the debug/demo slowdown functionality back? E.g. Chrome DevTools have got CSS animation slowdown control. Probably we could have some API for slowdown in react-motion? Following the animation loop architecture, this should be a deal of one 0..1 parameter.
",sompylasar,chenglou
311,2016-03-30 11:04:29,"Thank you for your answer @SleepWalker, but unfortunately that won't work, the whole key is in 

> isItemExists ?

, which modifies the array of elements, and tells what need to be animated and when (if I understand it right), on a single element that will initially be an empty array, and when it will be gone as well, therefore next line will break since you can't retrieve style, data, key from an empty object:

> const {key, data, style} = items[0]

I just need to animate an overlay fade in/ fade out, maybe this tool is just for complex animations, and should use another one for normal/most common ones ?

Thank you anyway for your support!
",xavibonell,SleepWalker
311,2016-03-30 18:12:42,"@xavibonell and that code does not work? does it have an issue with an empty object? If so, than you can simply check for the `items` size:


",SleepWalker,xavibonell
311,2016-03-31 11:09:03,"Hey @SleepWalker, thank you very much for your follow up! It does work, I just had to return null if the object was missing, silly me!

Anyway, I decided to do my own library to do simple object transitions for my project, this library is clearly too sophisticated for everyday animations, I'm sure that is very powerful when it comes to complex motions though.

Thank you again for your support! It really worked!
",xavibonell,SleepWalker
311,2016-05-09 11:16:07,"Cannot wait for this @chenglou! I've used react-motion in a project I'm working on here: http://sa.603.nu. I'm trying to fade images on load. Everything is mostly working apart from an issue where images rendered on both the mosaic and artists page flicker before the rest of the images fade in when changing pages. I believe this is because the image has already loaded on the previous page. It can be replicated by navigating to the mosaic page and then going to the artists page. Anyone have any ideas how to beat this?
",jch254,chenglou
311,2016-09-06 06:06:04,"Exactly @p4bloch need a simple example to do basic mounting or unmounting
",shoumma,p4bloch
311,2016-09-26 06:35:09,"@Lakston the Child needs to be kept. There's zero magic in the library; it doesn't keep an unmounted child around, dangling in the UI tree.

TransitionMotion pass you the list of currently mounted items in the parameter of the children callback. Here's a working example: https://codepen.io/anon/pen/wzdBoa?editors=0010#0

Edit: I need to put an emphasis that there's zero magic in the library, and no dirty DOM element kept around ""hopefully not too long"" while waiting for the state of your UI to re-become valid. This also means you need to keep the `TransitionMotion` wrapper around.

Try that example and ping me if you don't get it!
",chenglou,Lakston
307,2016-03-25 23:37:06,"@sompylasar rehydrate was a poor choice of words, meant just updating the collection.  turns out one of my collection items had an outdated key that was mucking everything up.  False alarm.

Thanks for the quick response though, closing this issue.
",foobahh,sompylasar
306,2016-03-23 08:29:56,"@brigand Have a look at this module: https://github.com/nkbt/react-collapse -- it does exactly what you need (measures and then animates).
",sompylasar,brigand
306,2016-03-23 08:38:21,"@brigand You could start with `visibility: hidden` and only switch to `inherit` when the height is ready. Also, the default `top` value could be very far away (like `-999999px` -- you'll never have such height of your content).
",sompylasar,brigand
306,2016-03-23 09:11:46,"@brigand Measuring the height has more impact on performance than switching visibility (layout vs paint). By the way, CSS `top` also triggers layout, which is a performance impact.
https://csstriggers.com/
",sompylasar,brigand
306,2016-03-23 17:32:57,"@brigand Put a number instead of a `spring()` in `style`, it should jump to that value immediately.
https://github.com/nkbt/react-collapse/blob/master/src/Collapse.js#L62-L65
",sompylasar,brigand
306,2016-03-23 17:39:57,"@brigand Interesting article on animation performance [in a neighboring thread](https://github.com/chenglou/react-motion/issues/263#issuecomment-200297509): https://aerotwist.com/blog/flip-your-animations/ -- you might be interested. And another one linked from it: https://aerotwist.com/blog/pixels-are-expensive/
",sompylasar,brigand
306,2016-03-23 20:39:06,"@sompylasar passing a value without the spring works perfectly. Thank you so much!
",brigand,sompylasar
304,2016-03-21 03:27:54,"@sdras The color does not interpolate because `rgb()` requires integer values from `0` to `255`, but the spring is high-precision and generates decimals with floating point, for example `49.91165769112001` -- only the initial and the final states are integers (`50` and `34`), that's why the first and last colors are rendered properly.

The best practice is to make a separate spring for color, from 0 to 1, and use it as a parameter for the color interpolation.



For more complex color manipulation, a library such as https://www.npmjs.com/package/color might be useful.
",sompylasar,sdras
304,2016-03-21 20:34:44,"@sdras `rgb(${Math.round(fill)}, ${Math.round(fill)}, ${Math.round(fill)})` -- but it will be difficult to see the difference between 34 and 50... try cranking one up to 255 to be sure it's working.
",PhilipDavis,sdras
304,2016-03-22 01:45:47,"@sompylasar thanks! that makes great sense. I'll do that.

Do you think it might be good to have color interpolation, such as hex values, added as a feature? Maybe it's something I can work on to contribute.
",sdras,sompylasar
304,2016-03-22 08:17:17,"@sdras I don't think there is a place for color interpolation in the `react-motion` core. Node modules should generally go Unix-way: do one thing and do it well.

It's not so hard to interpolate a composite value such as RGB color given a single `0.0 -> 1.0` parameter, _there is even a module specifically for that_ (https://github.com/miguelmota/interpolate-rgb).

Probably, there should be some short ""how-to"" on interpolation of arbitrary values, including colors, in the README of `react-motion`, with a reference to https://en.wikipedia.org/wiki/Linear_interpolation (and to other kinds of interpolation, if needed).
",sompylasar,sdras
304,2016-03-25 01:52:55,"@sdras you can make an own module with `react-motion` dependency. 

It is not hard to interpolate colors, but it is always good to have one stable implemented solution and use it when needed without re-implementation. So I think a module for color interpolation and something like `awesome-react-motion` page with list of all useful stuff for `react-motion` is the best solution.
",rtkhanas,sdras
300,2016-03-09 21:18:34,"Sounds awesome, thanks, @mjohnsonengr!
",nkbt,mjohnsonengr
300,2016-04-08 07:05:19,"@nkbt my PR merged. Now we can use defitnitions, just call tsd



I think, this issue should be closed
",stepancar,nkbt
293,2016-03-10 00:12:59,"@nkbt it seems like onRest is only available on Motion and not TransitionMotion. Do you have any idea how that would be doable in that case? Or is it missing a pr to add the same functionality to TransitionMotion :)?
",dozoisch,nkbt
293,2017-03-10 17:58:54,@oliverox I haven't found a way but I also need this,mattvague,oliverox
290,2016-04-20 06:44:04,"@cdebotton your PR is now in v0.4.3. I'm assuming these flow problems are all fixed now? @irvinebroque what about yours?
",chenglou,cdebotton
290,2016-04-20 06:44:04,"@cdebotton your PR is now in v0.4.3. I'm assuming these flow problems are all fixed now? @irvinebroque what about yours?
",chenglou,irvinebroque
287,2016-02-24 20:25:34,"@boyswan My component is guaranteed to have a child, but yours isn't.



You would have to do something like:



It's easier if you're already dealing with an array. In that case you just use `.map`:



Unfortunately in React, `this.props.children` can be either an array or a single element.
",echenley,boyswan
279,2016-02-06 14:00:52,"@chenglou Are we good to merge? Let me know if we have anything else to address here?
",samarpanda,chenglou
276,2016-02-06 14:39:10,"Thanks @threepointone & @chenglou for the explanation.

![img_20160206_194336](https://cloud.githubusercontent.com/assets/802163/12867161/30ba6288-cd0c-11e5-8c7f-c86e44e7a110.jpg)
Trying to prepare an infinite scroll of images. Loading n images at a time. Thought of having 3 states for images. So, i don't need to scroll all images at a time, rather i can animate two images. One to slideIn other to slideOut. Hope this might help, not hit the performance budget.
",samarpanda,threepointone
276,2016-02-06 14:39:10,"Thanks @threepointone & @chenglou for the explanation.

![img_20160206_194336](https://cloud.githubusercontent.com/assets/802163/12867161/30ba6288-cd0c-11e5-8c7f-c86e44e7a110.jpg)
Trying to prepare an infinite scroll of images. Loading n images at a time. Thought of having 3 states for images. So, i don't need to scroll all images at a time, rather i can animate two images. One to slideIn other to slideOut. Hope this might help, not hit the performance budget.
",samarpanda,chenglou
274,2016-01-30 16:42:10,"I also like `onRest`. I second @appsforartists reasoning and conclusion.
",kottkrig,appsforartists
274,2016-02-04 21:45:06,"@chenglou great to see this being added. But, before this callback mechanism makes it into the API, is there any recommendation about how to unmount a component when a transition ends, like for a page transition. Right now I'm checking for a terminal value like zero to detect when the new page has animated into place, and then not render the previous page.
",chakuo,chenglou
273,2016-02-28 07:14:51,"@appsforartists @chenglou Can this be used for `<Motion />`, `<StaggeredMotion />`, and `<TransitionMotion />`?
",leopoldjoy,appsforartists
273,2016-02-28 07:14:51,"@appsforartists @chenglou Can this be used for `<Motion />`, `<StaggeredMotion />`, and `<TransitionMotion />`?
",leopoldjoy,chenglou
273,2016-02-28 07:15:58,"@leopoldjoy currently only implemented for Motion, which is why I waited before the imminent public release, because I wanted it on all 3 components. But after discussing with people I've noticed that they only need it for Motion?
",chenglou,leopoldjoy
273,2016-02-28 07:35:55,"@chenglou Ok, sounds good! Thanks for your work!
",leopoldjoy,chenglou
273,2016-04-08 09:59:27,"@chenglou @appsforartists Great work guys! would be awesome to have that in master at least for `<Motion>` :)
",haraldox,appsforartists
273,2016-04-08 09:59:27,"@chenglou @appsforartists Great work guys! would be awesome to have that in master at least for `<Motion>` :)
",haraldox,chenglou
271,2016-11-29 02:55:41,Awesome work @devlee!!! That's super cool. I might have to try and get that in React Motion UI Pack :),souporserious,devlee
271,2016-11-29 04:02:22,@souporserious  :) I used to make a mistake and now I have used **`scale`** instead of changing **`width`** and **`height`** ~ ,devlee,souporserious
267,2016-12-06 10:53:35,"@Cottin,

I was able to get okay performance with 500 items on an iPhone 6, using the technique that you've outlined above.  See [Demo](http://www.users.on.net/~mikeandgeminoz/code/react-motion-8a-listwithhandle/).

This is part of variation on the draggable list demo that I'm working on.  The variation here is that items in the list are only draggable by their drag handles (the icon with the three lines).

I don't have the code on Github yet, but you can read the source code in the browser.",brownieboy,Cottin
266,2016-01-25 19:53:25,"Were you able to get this to work, @jasonpang ? I have git@github.com:chenglou/react-motion.git#cc852fe787bb15a8b4a9e51538e03c57d5543d2e in my package.json but now I am receiving

Module not found: Error: Cannot resolve module 'react-motion' in /Users/bradgunn/code/wellpath_web/src/components
 @ ./src/components/Demo.jsx 13:19-42

As an aside though, Cheng, thank you for your library - however I do have to criticize the fact that bleeding should be a commit/branch and stable should be master. Otherwise, just trying to get these amazing demos to work. 
",notsoluckycharm,jasonpang
266,2016-01-26 06:02:17,"@jasonpang @notsoluckycharm sorry for all the trouble. This has been been fixed for React-motion v0.4.1. My initial thought was to change the default displayed branch on github to point to the stable commit, and keep master bleeding edge. Would you prefer the other way around?

(Closing this issue as it's resolved. Please do continue the discussion).
",chenglou,notsoluckycharm
266,2016-01-26 06:02:17,"@jasonpang @notsoluckycharm sorry for all the trouble. This has been been fixed for React-motion v0.4.1. My initial thought was to change the default displayed branch on github to point to the stable commit, and keep master bleeding edge. Would you prefer the other way around?

(Closing this issue as it's resolved. Please do continue the discussion).
",chenglou,jasonpang
265,2016-04-20 05:49:52,"@daniel-gustafsson is there an equation which takes in the _actual_ duration and e.g. initial overshoot percentage, and returns stiffness and damping (assuming there's a single such value)? That'd be perfect. I'm holding off shipping your helper for now because the overhead of explaining damping frequency and overshoot, on top of the existing stiffness and damping, will likely turn away lots of people. But if there's an `f: (duration, overshootPercent) -> [stiffness, damping]` then I can deprecate the current stiffness/damping API, which will be great.
",chenglou,daniel-gustafsson
263,2016-01-26 13:54:22,"@threepointone that is the point. It is not drag and drop.

I have a list of offers sorted by price, so I dispatch an action to sort this offers by shipping days so my store receive the new sorted array then I need to animate the old list to reflect the new order
",lucasfeliciano,threepointone
263,2016-01-29 10:58:02,"That's a nice snippet.

But I still have to tackle one problem, since react-native do not have a zIndex parameter, the layers depend on the render order.

So when I'm sorting my list, the itens which are going to the top must be in front of the others. ( am i clear ? )

Lets suppose: I have this array

`[2,3,4,5,1]`

and then I sorted it, so in my animation the component `1` must go to the top in front of the other ones instead of behind it.

The solution that @threepointone suggested is working but I just need to find a hack for the zIndex thing.
",lucasfeliciano,threepointone
259,2016-03-21 19:10:53,"thanks @threepointone your suggestion fixed my issue.
",alansouzati,threepointone
254,2016-03-29 00:03:32,"@bishopZ can you give an example of how to do it in tandem with react-transition-group please?
",noushka86,bishopZ
248,2016-04-25 17:07:45,"@ccoffey @chenglou Now that `onRest` has been published, do you think it could help this PR moving forward?
",arcanis,ccoffey
248,2016-04-25 17:07:45,"@ccoffey @chenglou Now that `onRest` has been published, do you think it could help this PR moving forward?
",arcanis,chenglou
248,2016-11-22 11:50:12,Looking forward to sequencing in React-Motion. Are @chenglou @appsforartists still maintaining this project? Haven't seen any update for a period of time.,lzl124631x,chenglou
248,2016-11-24 03:26:59,"I talked to @chenglou yesterday about this PR, (and please, Cheng-Lou, let me know if I have anything wrong here I don't mean to speak for you, just want to provide some clarification for people waiting)

He mentioned that this type of sequencing might interfere with spring. Personally, in watching some of his talks, it does seem a little counter-intuitive to his wishes for the direction of the library in terms of true interruptible motion. 

There is another project that he pointed me to, however, that is structurally similar, but allows for sequencing: https://github.com/clari/react-tween

If you're interested in more detailed sequencing with extensive tooling, both GreenSock (here is a piece of an article I wrote showing how to use it in React: https://css-tricks.com/comparison-animation-technologies/#article-header-id-16 or Mo.js, (though this tool is still in beta) https://css-tricks.com/introduction-mo-js/

Anyways, I hope that info is helpful for people waiting",sdras,chenglou
247,2015-12-03 20:21:35,"Hey @bishopZ thanks for the response, I'll try your solution out and give some more feedback :)
",tnrich,bishopZ
246,2015-11-30 09:34:26,"@chenglou fortunately I can't recreate it again. I think it might have been a bug with the hot reloading. I would keep my eye one it, and will let you know if it happens again. Sorry for the false alarm.
",timuric,chenglou
244,2016-01-25 21:48:02,"Hey @avi, this is cool because that should prevent nested Motions from rendering twice at every tick right? If I have a `Motion` inside another `Motion`, the inner one doesn't get rendered when the parent `Motion` gets rendered.
Would it make sense to have that on `Motion`/`TransitionMotion` directly?
",bsansouci,avi
244,2016-02-02 19:38:56,"I just had an interesting conversation with @bsansouci:

We could create a `SimpleMotion` extension that handles the common case; something like this:



If all you are changing its x, y, rotation, and scale, it would give you a simple way to do that without having to think about child functions or external renders - it just looks like any other React component and optimizes `shouldComponentUpdate` to avoid thrashing `render`.  `Motion` et. al. would continue to exist for advanced cases.

It doesn't even have to live in react-motion; could be its own repo.

Thoughts?
",appsforartists,bsansouci
244,2016-02-03 08:55:37,"@appsforartists @avi Looking more at `react-static-container` it seems like it's very close to what you're saying. Specifically looking at slide number 16/49 [here](https://speakerdeck.com/vjeux/react-rally-animated-react-performance-toolbox), we can imagine the `Motion` passing down `externalRender` to the `shouldUpdate` prop instead of, in this example, `this.state.isAnimating`.
",bsansouci,appsforartists
244,2016-02-03 08:55:37,"@appsforartists @avi Looking more at `react-static-container` it seems like it's very close to what you're saying. Specifically looking at slide number 16/49 [here](https://speakerdeck.com/vjeux/react-rally-animated-react-performance-toolbox), we can imagine the `Motion` passing down `externalRender` to the `shouldUpdate` prop instead of, in this example, `this.state.isAnimating`.
",bsansouci,avi
244,2016-02-03 16:52:40,"@bsansouci Good find.  Looks like the same thing as `MotionBoundary` in the original PR, though you'd need to track `shouldUpdate` in userland without the other half of this PR that exposes it in `render`.  However, [now that we have `onRest`](https://github.com/chenglou/react-motion/pull/273), it is doable.

I'm still curious about making `isAnimating` a context variable so you can have something like `SimpleMotion` to do the fast thing by default.
",appsforartists,bsansouci
241,2015-11-17 15:06:26,"Yep, it's just a normal function that you pass as a child. Thanks @salzhrani!
",chenglou,salzhrani
240,2015-11-14 04:47:01,"Yep, acko.net has been a great reference! We already do implement a few perf/visual optimizations such as separating the real-life clock with ideal clock. As for smoothing out arbitrary interpolations, [tween-state](https://github.com/chenglou/react-tween-state) solves this (it's the additive animation that one of the articles is talking about, and one that's implemented in iOS 7) but I'd rather just use springs because it makes other things easier too.

@hitsthings: [Here](https://medium.com/@chenglou/react-motion-and-animated-4b3edf671cba)'s the answer to your question. Hopefully we'll reach that stage where we can defer to web animation (or whatever engine it is) under the hood. In the mean time, the next goal would be to defer to actual DOM manipulation. I've been caught up with a few other features (and other stuff in general) recently so this hasn't been done yet. Also, the ""coordination"" that I'm talking about in my article, the one in RM (dependent/stagger spring, unmounting), needs a bit of API tweaking in order to work with DOM manipulations/web animation, like you said.

So: it's being discussed, not as much as some other API priorities right now but still. I'm trying to make the API as good as possible, while considering that animation perf is one of the areas where we still have to sacrifice API for speed. If you're interested in making the API totally compatible with an arbitrary implementation under the hood, check out #133 (it's slightly messy and deviates from the current implementation; again, if you're interested, give me a signal and I'll revamp it soon).

I'm leaving this open temporarily, in case you have other thoughts on this. Feel free to close it afterward because there are other issues tracking this =)
",chenglou,hitsthings
235,2015-11-03 01:41:29,"@chenglou @nkbt The #219 velocities are a better way to go than a single `isFinished` flag. There could be a helper to which you pass the object with velocities so it calculates whether all / any / some of them have reached certain threshold.
",sompylasar,nkbt
235,2015-11-03 01:41:29,"@chenglou @nkbt The #219 velocities are a better way to go than a single `isFinished` flag. There could be a helper to which you pass the object with velocities so it calculates whether all / any / some of them have reached certain threshold.
",sompylasar,chenglou
235,2015-11-03 02:23:03,"@sompylasar I mentioned that issue in my first message =).
That could be an additional thing passed to `render` callback alongside with `isFinished` flag, which is simple and straightforward and does not require any extra logic around it.
",nkbt,sompylasar
235,2015-11-03 09:01:02,"@nkbt, yes, I saw this. Just missed the ""alongside"" thing, sorry.
",sompylasar,nkbt
235,2015-11-12 19:23:23,"@chenglou I don't think anyone's working on it as of right now. PRs are very welcome though :D
",bsansouci,chenglou
235,2016-01-07 17:42:47,"@chenglou you asked for an example of when somebody might want to use this.  Take a look at [this API proposal](https://gist.github.com/appsforartists/b199c6d79044f8e8abaf).

There are many times that I find myself wanting to have an object spring to a user's touch, but then track it perfectly once it gets there.  In a world without an `onRest` callback, this is much more cumbersome than it should be.
",appsforartists,chenglou
235,2016-01-26 07:10:19,"@threepointone, @chenglou, and I just chatted about this for a bit.

While we see the potential usefulness of a per-value onRest (e.g. in springParams), the simple/common case is per Motion instance (you want to know when the child is completely done moving).  Perhaps Motion (and StaggeredMotion) should gain an onRest attribute for now, and we can worry about per-value onRest in the future if it becomes an acute need.  For now, you can fake it by composing Motions together.

Per-value onRest seems like a more advanced usage that would suit a timeline-based API better than what Motion currently provides.
",appsforartists,chenglou
235,2016-04-20 07:03:53,"Alright so end callback is in for `Motion` (react-motion v0.4.3). If there's request for such cb for `StaggeredMotion` and `TransitionMotion` we should reopen this issue or create a new one.

Sorry for the wait everyone! And thank you again @appsforartists for actually implementing it =].
",chenglou,appsforartists
235,2016-09-12 19:40:56,"@chenglou any news on when/if this will be implemented in `TransitionMotion`? I think that would keep consistency in the API and allow to have an easy, clean way to use that functionality (all I tried to use this with current implementation feels hacky).

> If there's request for such cb for StaggeredMotion and TransitionMotion we should reopen this issue or create a new one.

Not sure if this is the proper way to make a formal request, but I think this could be pushed forward. Any thoughts?

Thanks!
",p4bloch,chenglou
235,2016-09-12 20:03:46,"@p4bloch Are you gonna own `TransitionMotion.@onRest`?  You should start an issue to track your progress against, and submit a PR when it's ready.  😃 
",appsforartists,p4bloch
235,2017-01-16 15:54:27,@SkateFreak you should be able to do this now with `didLeave` it was merged [here](https://github.com/chenglou/react-motion/pull/399) and documented [here](https://github.com/chenglou/react-motion#--didleave-stylethatleft-key-string-data-any--void).,souporserious,SkateFreak
233,2015-11-03 09:18:24,"@chenglou Fuck the DOM (React DOM?) for returning `string` as the `value` of `input type=""range""` :see_no_evil: 
",sompylasar,chenglou
231,2015-10-30 19:26:50,"@chenglou  can add italics and unbold if you want, keep it minimal.
",dey-dey,chenglou
229,2015-10-30 19:48:36,"@chenglou sorry not trying to be difficult. I don't know what `opaque configuration` means. As opposed to `translucent configuration`? Which is what?

Could just be `returns a configuration object`.
",dey-dey,chenglou
224,2015-10-24 12:16:39,"@nkbt hmmm good point, will have a go at making a simple wrapper component (still quite new to react) to achieve this and post my results :+1: 

Although there's no way to detect whether an animation has completed unless you just check the values being passed in right?
",VasilyShelkov,nkbt
221,2015-10-19 00:33:47,"@koko236 I have very little understanding of your structure, but it seems that the best solution would be to not apply react-motion directly to OtherUI, but make a very basic UI wrapper and apply react-motion to it. So you component that handles some actual data is not touched by RM and is totally ""cached"" by react. It also will have a huge impact on perf (in a good way).
",nkbt,koko236
221,2015-10-19 01:02:25,"@koko236 look at https://github.com/gaearon/react-dnd

Ping me in Slack (reactiflux), I can help you with your issue better there.
",nkbt,koko236
221,2015-10-19 02:47:20,"@koko236 you quickly patched the problem but did not solve the root cause. As I can see the cause is that your animation logic affects components that work with data/events (possibly re-renders them thousands of times). I strongly suggest you to remove setTimeout and figure out how to fix it without this hack =)
",nkbt,koko236
221,2015-10-19 03:00:46,"@nkbt  I know it's just a patch and I hope it'll work cause I'm a bit time constrained right now. :) I'm wondering what the root cause might be and is it really something on my side. Truth is I should probably use raf to fire update events and not mousemoved event directly but the bug happens after the dragging has ended and it's only React Motion that modifies anything when `addMessage' is called (and that's an extremely simple operation).
",koko236,nkbt
221,2015-10-19 03:06:46,"@koko236 I'm just trying to help you to get an idea where the actual problem is. This issue has definitely nothing to do with react-motion itself, it is more about the way your code was structured, RM probably revealed that issue by constantly re-rendering things. If you are happy with a temp hack and it is a considered choice - that is totally all right.

If you wish to drill further - ping me on Discord (`@nkbt` there). And just in case add console.log into your `render` method so you can see it is actually rendered bazillion of times =)
",nkbt,koko236
221,2015-10-19 03:06:46,"@koko236 I'm just trying to help you to get an idea where the actual problem is. This issue has definitely nothing to do with react-motion itself, it is more about the way your code was structured, RM probably revealed that issue by constantly re-rendering things. If you are happy with a temp hack and it is a considered choice - that is totally all right.

If you wish to drill further - ping me on Discord (`@nkbt` there). And just in case add console.log into your `render` method so you can see it is actually rendered bazillion of times =)
",nkbt,nkbt
220,2015-10-18 11:41:59,"@webyak would love to see it, did you end up using StaggeredMotion?
",arush,webyak
220,2015-10-18 11:45:39,"@arush Nope, TransitionMotion 😁
",webyak,arush
220,2015-10-23 00:11:19,"I am having the same use case, ii want to animate the `left` and `opacity` style properties on every item in a list on mount in a staggered effect. Kind of struggling wrapping my head around it. Same as @webyak i thought using `<StaggeredMotion>` and willEnter would work but willEnter does not fire on initial mount, only when something is entering the list. Your solution looks smart @webyak but is there any way to implement this use case in the API @chenglou or am i missing something ? 
",iandoe,chenglou
220,2015-10-23 00:11:19,"I am having the same use case, ii want to animate the `left` and `opacity` style properties on every item in a list on mount in a staggered effect. Kind of struggling wrapping my head around it. Same as @webyak i thought using `<StaggeredMotion>` and willEnter would work but willEnter does not fire on initial mount, only when something is entering the list. Your solution looks smart @webyak but is there any way to implement this use case in the API @chenglou or am i missing something ? 
",iandoe,webyak
220,2015-10-23 00:46:32,"@iandoe @webyak you can check sources of [react-collapse](https://www.npmjs.com/package/react-collapse), that might help.
",nkbt,iandoe
220,2015-10-23 00:46:32,"@iandoe @webyak you can check sources of [react-collapse](https://www.npmjs.com/package/react-collapse), that might help.
",nkbt,webyak
194,2015-10-07 00:32:03,"@chenglou there are some conceptual issues implementing it on reporter level. Author is working on that and I will help him as much I can. So potentially if it is working well, I'll file another PR, but meanwhile current solution works pretty well.
",nkbt,chenglou
189,2015-10-31 12:36:23,"@adrienhobbs you can animate a single value and recalculate all others accordingly.


",nkbt,adrienhobbs
189,2015-11-16 14:50:35,"For what it's worth, @nkbt solution works perfectly for my needs and has the added bonus of not adding any bloat to the library. It's beautifully simple.
",crossman,nkbt
189,2015-11-16 20:30:41,"@crossman :ok_hand: 
",nkbt,crossman
189,2016-08-24 19:18:39,"@nkbt  really brillant idea. But one question: how do u handle transit consistence? Like from one array to another one rather than from 0 to anther ? 
",kuanslove,nkbt
189,2016-08-24 21:41:12,"@kuanslove I am not sure what you mean, can you give some code example?
",nkbt,kuanslove
189,2016-08-24 21:50:15,"@nkbt  One example is to build a component which contains a `<path d="""" />`, this component has prop called `data` which accept a data array(which can be converted to path data), and when I switch to another data array, this component can interpolate between two arrays and draw the line with transition animation effect, could you show me a example of what I described?
",kuanslove,nkbt
189,2016-08-26 02:38:43,"@kuanslove I was talking more about some code example, I can kind of understand what you want, but do not have much time writing full example myself. Please, share some code and I would be able to help you with more concrete formula!

So far I cannot see the ptoblem why it does not work for your case



It is up to you how you do your proportional calculations in `calculatePath(value)`, considering that `value` is being smoothly changed from `0` to `1`. Pure math from here
",nkbt,kuanslove
179,2015-10-01 22:35:01,"Thanks for the quick response, @chenglou. Forgive me if I'm wrong, but based on your response, I think there's a chance you've misunderstood. In the example, we're attempting to skip straight to `1`; thus the omission of `spring()`.

If this truly is the desired behavior, would you agree that the docs are misleading when they say: 
""If a plain number is provided rather than a spring config, instead of giving an interpolated value in the children function param below, we'll jump straight to that number value.""

Thanks for your work on this library!
",BrennanRoberts,chenglou
172,2015-09-29 22:16:25,"I was half expecting some nullable stuff to get caught by Flow. Hopefully Flow's right!

@samwgoldman the `key` isn't a constant. It's passed as a parameter.
",chenglou,samwgoldman
172,2015-10-05 14:06:52,"@samwgoldman Are you planning a Flow release soon with the const destructuring fixes?
",ludovicofischer,samwgoldman
172,2015-11-25 08:29:23,"Good enough! We can gradually do the rest. Thanks again for the push @ludovicofischer! =)
",chenglou,ludovicofischer
169,2015-09-25 15:30:37,"@jclyons What would it take to make publishing RM as a WebJar an optional, seamless one-command task?
",sgrove,jclyons
169,2015-10-05 21:00:40,"@jclyons :+1: 
",nkbt,jclyons
153,2015-11-03 22:41:00,"@akre54 Did you manage to get custom interpolators working, or did you decide to go a different direction?
",ccblaisdell,akre54
153,2015-11-10 09:57:30,"@akre54 as @ccblaisdell mention also keen to know if you found a solution.
",henriquea,ccblaisdell
153,2015-11-10 09:57:30,"@akre54 as @ccblaisdell mention also keen to know if you found a solution.
",henriquea,akre54
153,2015-11-10 13:48:29,"Thanks for the update @akre54 👍
",henriquea,akre54
153,2017-03-07 19:25:19,@tannerlinsley that looks amazing! @chenglou is that something you would accept as a start to a PR? This seems extremely powerful. I'm willing to help where I can 😁 ,souporserious,chenglou
153,2017-03-07 19:25:19,@tannerlinsley that looks amazing! @chenglou is that something you would accept as a start to a PR? This seems extremely powerful. I'm willing to help where I can 😁 ,souporserious,tannerlinsley
153,2017-03-14 08:33:51,"@chenglou, honestly it would be so nice to have access to the percentage from the last issued float to the destination float.  The wrapper above works pretty well for the simple `<Motion />` component, but quickly becomes unwieldy if the same concept is applied to `<TransitionMotion />`. There is so much duplicate tracking of values that it seems like a fair ask to include in the core.  Really, anything that would expose more flexibility. Thoughts?",tannerlinsley,chenglou
153,2017-03-23 05:16:42,"I got really stuck working on adding interpolation to the TransitionMotion component via the wrapper before I had to dig deeper into the source. The architecture I needed to achieve this flexible interpolation took me on a journey that ended up porting as much of the animation cycle and physics stepper over to a new repo called [react-move](https://github.com/tannerlinsley/react-move).  Anyone interested can take a look at the source there.  It supports interpolating anything that d3 can handle, duration/easing motion, and staggering.  It does not yet support chain staggering (eg. the chat heads example) yet.  It also does not yet account fo velocity reversal for numbers, but should soon. @chenglou, we should chat very soon.",tannerlinsley,chenglou
150,2015-11-25 08:38:07,"hey @chenglou thanks for replying :)
I have moved to other things indeed, but I'll be interested in learning to use react-motion anyway, so I'll have a look! Thanks!
",olance,chenglou
148,2015-09-04 05:21:39,"Thanks! We had already fixed this but we might've overwritten that change. I think we can merge @chenglou. 
",bsansouci,chenglou
148,2015-09-06 23:18:56,"Did we ever add it for TS? A quick search though history says no. Anyway, @bsansouci can you add a test against this? I'll let you merge this before/after.
",chenglou,bsansouci
148,2015-09-12 17:46:53,"Alright, merging this. @bsansouci I'll try to fix all the tests today so that you can test again this. Thanks @wilfreddenton!
",chenglou,bsansouci
148,2015-09-12 17:46:53,"Alright, merging this. @bsansouci I'll try to fix all the tests today so that you can test again this. Thanks @wilfreddenton!
",chenglou,wilfreddenton
148,2015-09-12 20:31:51,"@chenglou no problem! Thanks for all the work you've put in on this project. It's really awesome.
",wilfreddenton,chenglou
140,2016-02-25 22:37:04,"@AgentME you can do this:

We use a requestAnimation polyfill for testing [raf](https://github.com/chrisdickinson/raf)
Raf uses set `timeout` in place of `window.requestAnimationFrame`

(Alternatively you could just replace `window.requestAnimationFrame` with `setTimeout`)

When testing you can use [sinon](https://github.com/sinonjs/sinon) to hyjack the window timers (see `sinon.useFakeTimers`). This will allow you to 'flush' the animation queue.

Example:


",alexreardon,AgentME
139,2015-09-18 20:13:03,"@chenglou is willLeave available on a Spring? -- I couldn't see it in the source. Like you mentioned, it would be great to have a bool / callback to simplify this down.
",alexcurtis,chenglou
138,2015-08-31 15:58:32,"@souporserious with this commit should demo3 now animate in the todo items when the page loads/component mounts? I cloned the repo and ran it locally to see how to get the functionality in my project, but it's not animating for me.
",wilfreddenton,souporserious
138,2015-09-01 19:24:13,"Right, it handles the unmounting of the individual list items. I was wondering if it could handle the unmounting of the containing unordered list but I see now that it's a better idea to just remove the items instead of the whole view when I want the list to disappear. This way the mounting/unmounting is all handled by react-motion. Thanks @chenglou and @souporserious so much for taking the time to help me!
",wilfreddenton,souporserious
138,2015-09-01 19:24:13,"Right, it handles the unmounting of the individual list items. I was wondering if it could handle the unmounting of the containing unordered list but I see now that it's a better idea to just remove the items instead of the whole view when I want the list to disappear. This way the mounting/unmounting is all handled by react-motion. Thanks @chenglou and @souporserious so much for taking the time to help me!
",wilfreddenton,chenglou
136,2015-08-27 17:21:43,"Hey @marclar, you can sign up here http://www.reactiflux.com/ and find #react-motion in the channels list!
",johnamiahford,marclar
136,2015-08-28 06:12:05,"Yeah the ""invite"" message is super misleading. It's nothing but a sign up page.

@marclar I've pushed a new commit that shows what you had to change: https://github.com/chenglou/react-motion/commit/4bde5cd03a2e03c299fe2d74d02b7410f6273470#diff-a5c97fa5065182ffc820c58359237cd5R60

It works now. Feel free to play around with it =). Thanks for pointing it out!
If you're wondering how this works then ask here or in Slack.
",chenglou,marclar
135,2015-08-25 21:24:28,"Thanks, @chenglou -- I think all I needed to do was to change

`{items =>`

to 

`{(items) =>`

I still don't have it working exactly like the demo, but now the page renders and it seems I can reorder things.

Thanks!
",marclar,chenglou
130,2015-08-14 06:13:09,"@chenglou Thanks for pointing me in the right direction
@maisano Thanks for your clarification - that works okay-ish but is a good starting point for further inquiry.

Followup questions:
- On initial load of the app, the component shown first is not transitioned in. How can i achieve that?
- The `RouteTransition` only transitions the immediate child - what if i'd like to transition multiple child elements in varying dom hierarchy depths differently - such as fading the body whilst transitioning `margin-top` on the header, `margin-bottom` on the footer and staggering transitions on the menu inside the header?
",codepunkt,maisano
130,2015-08-14 06:13:09,"@chenglou Thanks for pointing me in the right direction
@maisano Thanks for your clarification - that works okay-ish but is a good starting point for further inquiry.

Followup questions:
- On initial load of the app, the component shown first is not transitioned in. How can i achieve that?
- The `RouteTransition` only transitions the immediate child - what if i'd like to transition multiple child elements in varying dom hierarchy depths differently - such as fading the body whilst transitioning `margin-top` on the header, `margin-bottom` on the footer and staggering transitions on the menu inside the header?
",codepunkt,chenglou
130,2015-10-09 19:44:11,"@boyswan not too familiar with the router. I'll defer to @maisano for this one
",chenglou,boyswan
130,2015-10-09 19:44:11,"@boyswan not too familiar with the router. I'll defer to @maisano for this one
",chenglou,maisano
130,2015-10-09 20:19:53,"@boyswan by new api i'm assuming you meant the new `react-motion` api. i just updated the gist to reflect those changes, though i haven't tested it. conceptually it's largely the same, though a prop's name changed and you no longer need to access the `val` key from the interpolated values.
",maisano,boyswan
130,2015-10-14 02:35:21,"@maisano I seem to be having the same issue as@gonsfx where the initial route does not load...
",mattapperson,maisano
130,2015-10-14 14:12:25,"@mattapperson the initial route doesn't load or doesn't transition? if it's the latter, i think you can get that by adding `defaultStyles`.
",maisano,mattapperson
130,2015-10-14 14:25:08,"@maisano it was an issue with my styles. the absolute included in this component broke stuff
",mattapperson,maisano
130,2015-10-14 14:53:58,"@mattapperson :+1: yea, that component is more of a demo than anything else.
",maisano,mattapperson
130,2015-10-19 21:40:09,"Would the implementation change dramatically if @chenglou's example was modified to make the transition be a horizontal sliding animation instead of a fading one?
",rclai,chenglou
130,2015-11-09 14:49:41,"Hi @rclai,

Just replace the scale transfom in the render by `translateX(``${interpolated[key].x}%``)`.

And replace scale in both willEnter and willLeave methods by respectively `x: spring(-100)` and `x: spring(100)`.

That should work.
",griable,rclai
130,2016-01-14 14:02:14,"@cdebotton it's hard to tell what's wrong from this–what's the usage look like?
",maisano,cdebotton
130,2016-01-15 13:43:35,"@maisano, sure, the implementation looks like this:


",cdebotton,maisano
130,2016-02-05 22:47:09,"@threepointone we should have one, authoritative answer on how to make RR work with RM. I myself haven't used RR so I can't answer. But this is a recurring question.

@abelovic the migration guide is [here](https://github.com/chenglou/react-motion/wiki). Maybe [this](https://github.com/chenglou/react-motion/wiki/v0.4.0-examples/_compare/b23bda218bfc5414d2bb70c954c7ed5250e16fa2...6b4990a7adb5a28a633797f2cebc29ff3a21e363) will help
",chenglou,abelovic
130,2016-02-12 17:46:48,"@andrewgleave - thanks for this! I started doing something like this (except I used a slide transition) and it worked. After maisano released his wrapper I ended up changing to that because it is nicely abstracted

@maisano- Great wrapper!!! I only ran into one issue/improvement which I posted in your repo

Fade in/out:

Unfortunately this is one effect that doesn't look right. I have tried different stiffness/damping settings but when you transition it either moves so quick you don't notice the fade or one page starts to show through the other since it's opacity hasn't set zero yet. Ideally we would want the current route to fade out and once that is complete the new route fade in. I suspect you would need an animation end event to do this (which I believe isn't available yet)? Maybe there is another way to achieve this?

@chenglou - Obviously _incredible_ library but thanks for helping lead us to solutions on how to integrate with major third party components! Your demos are very cool but being able to use react-motion with react-router for example is a big deal. Developers finally have a well designed library to integrate advanced animations in real world apps :)

Expanding upon this concept further doing the following with react-motion would be awesome! 

https://www.google.com/design/spec/animation/meaningful-transitions.html

Although maybe this belongs in react-motion-ui-pack :)
",abelovic,andrewgleave
130,2016-02-12 17:46:48,"@andrewgleave - thanks for this! I started doing something like this (except I used a slide transition) and it worked. After maisano released his wrapper I ended up changing to that because it is nicely abstracted

@maisano- Great wrapper!!! I only ran into one issue/improvement which I posted in your repo

Fade in/out:

Unfortunately this is one effect that doesn't look right. I have tried different stiffness/damping settings but when you transition it either moves so quick you don't notice the fade or one page starts to show through the other since it's opacity hasn't set zero yet. Ideally we would want the current route to fade out and once that is complete the new route fade in. I suspect you would need an animation end event to do this (which I believe isn't available yet)? Maybe there is another way to achieve this?

@chenglou - Obviously _incredible_ library but thanks for helping lead us to solutions on how to integrate with major third party components! Your demos are very cool but being able to use react-motion with react-router for example is a big deal. Developers finally have a well designed library to integrate advanced animations in real world apps :)

Expanding upon this concept further doing the following with react-motion would be awesome! 

https://www.google.com/design/spec/animation/meaningful-transitions.html

Although maybe this belongs in react-motion-ui-pack :)
",abelovic,chenglou
129,2015-08-14 00:50:53,"@chenglou What about controlling the precision on something that isn't pixel-based? For example, an opacity-based animation currently has that fall-off problem where react-motion takes forever to reach 0. The element is basically invisible, but it keeps animating anyway.

FWIW, awesome work though!!! This one tiny edge has been the only rough spot for me.
",jdeal,chenglou
128,2015-08-11 03:47:50,"@chenglou oh, again? ;)
",nkbt,chenglou
128,2015-10-07 12:21:37,"@borisyankov I reckon API is done for now so you can rebase/update your example!
",nkbt,borisyankov
128,2015-10-07 12:36:31,"Ha ;)
@chenglou, when do you expect this to go in?
",borisyankov,chenglou
120,2016-12-03 22:35:14,"@threepointone I know this is super old, but I found someone that made a utility to help with this so I think this can be closed if you want https://github.com/germtb/color-interpolator",souporserious,threepointone
114,2015-08-03 16:11:47,"Hey @balanceiskey! Looking at the [specs](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys) `integer` props are in ascending order but `String` props are in creation order. You can just append a letter at the front of your number and it works.
",bsansouci,balanceiskey
107,2015-07-29 09:24:02,"@chenglou You can have separate export for React Native and turn components into factories. For example https://github.com/gaearon/react-redux/blob/master/src/native.js.
",gaearon,chenglou
100,2015-10-25 11:04:33,"@appsforartists it should be really easy to add ability to specify precision if you replace `Math.round(dict[key])`. For many cases even for height, 0.1 precision is desirable. Sometimes 0.01. Depending on the kind of animation.

Wrapper solution is pretty straightforward indeed, but it would be much nicer to have it as part of spring() config.
",nkbt,appsforartists
100,2015-10-25 23:39:54,"Now published to npm:

 [`var memoizeRounded = require(""gravel"").helpers.memoizeRounded;`](https://github.com/appsforartists/gravel/blob/master/src/helpers/memoizeRounded.js)

@nkbt I added a precision argument.
",appsforartists,nkbt
91,2015-07-28 18:10:48,"Talked on slack, will let @threepointone work on this in a fork since this isn't high pri
",chenglou,threepointone
89,2015-07-22 04:06:13,"I had a look at the radium tracker, and it seems like their fix is to ignore components with fn-children o_O. unfortunate result of the way it works internally, so there's not much we can do anyway. @yanivtal, as a quick workaround for your case, I'd recommend using something simpler like css classes / plain objects for the components you're animating. 
",threepointone,yanivtal
89,2015-07-23 04:21:16,"@threepointone That's what I'm thinking. I don't really need radium for that. Thanks. You're quick with it!
",yanivtal,threepointone
88,2016-01-26 06:08:30,"Well this sure took a long time to close...
We've put a hook in `componentWillUpdate` to sync stable changes. The strategy can change but the tests are now there to guard against it. @bsansouci feel free to check that it meets your expectations.
",chenglou,bsansouci
87,2015-07-22 08:49:30,"@mikemorton 0.2.0 out now. I'm closing this because I think this works. But ping me and tell me the result please. Thanks.
",chenglou,mikemorton
84,2015-07-19 18:24:56,"@bsansouci  This is using the built react-motion.js, included with standard script tags. i.e. All client side, no build step other than having jsx transformer.
",iandanforth,bsansouci
84,2015-07-19 18:37:23,"@bsansouci The TypeError happens when clicking on the first div
",iandanforth,bsansouci
83,2015-07-19 22:34:14,"@bsansouci  While I can’t repro the issue, both your scenarios for point 2 sound plausible. The animation loop can indeed run multiple steps in one frame which could cause what you are describing.

I don’t think the animation loop should be involved at all if it is not for coordinating the physics simulation.
",iclanzan,bsansouci
71,2015-07-16 07:16:51,"@nkbt Yep, I realized that. Just confusing that the demo explicitly said that the argument is supposed to be null.

@chenglou I agree on the initialValue prop, that would probably be easier to understand.
",peterssonjesper,nkbt
71,2015-07-16 07:16:51,"@nkbt Yep, I realized that. Just confusing that the demo explicitly said that the argument is supposed to be null.

@chenglou I agree on the initialValue prop, that would probably be easier to understand.
",peterssonjesper,chenglou
68,2015-07-15 19:04:12,"@iclanzan 's PR should resolve almost all issues regarding stability even given the frame-rate changes during resizing. @twobit Can you try out #57?

rebound-js has converters from Origami (where `k` and `b` are represented as `tension` and `friction`) and Pop (`bounciness` and `speed`): http://facebook.github.io/rebound-js/docs/rebound.html#section-61
",razh,twobit
68,2015-07-15 19:29:30,"I feel like having @twobit's suggested stiff_spring and wobbly_spring and such solves point 1? No trying to dissuade my porting tween-state over, but it seems this can be delayed quite a bit if we do provide convenient named configurations (even more so that they're literally an array of 2 elements that you can inspect and play around with).

Unrelated: react-motion at first almost used rebound-js. Then I realized I only needed a tiny chunk of the library so I just wrote the stepper.js code instead.

Unrelated 2: oh and this library does animate arbitrary data structures now, of course. cc @andreaferretti who mentioned this in chenglou/react-tween-state#22
",chenglou,twobit
68,2015-07-17 05:38:33,"@twobit regarding your first concern - would you prefer an api like https://github.com/threepointone/react-ease? I've been meaning to port it over to react-motion, if possible.  
",threepointone,twobit
68,2015-07-17 16:56:02,"@threepointone That looks pretty close but I rely on the object interpolation that Spring is doing
",twobit,threepointone
68,2015-07-25 19:58:48,"@twobit we've addressed point 2 already. I've made a demo to address point 1: https://cdn.rawgit.com/chenglou/react-motion/2a5f89bee700c6bbb0560eee0c8f9ad66d111bdd/demos/demo5/index.html

Have fun with it =)
",chenglou,twobit
68,2015-07-29 05:41:57,"Alright, some carefully chosen constants are now exposed under `constants` [here](https://github.com/chenglou/react-motion/blob/372446fc8679dcdbf4de2e983d53709ab40ce88c/src/constants.js) and will go in the next release (the one after 0.2.2). This, along with that demo I linked above, should ease the usage of spring constants enough for me to deem this issue solved.

As for traditional tweens, @threepointone or I might port the stuff over in the future (I also remember hitting a roadblock with using tween with this API format but that might be wrong). Somewhat low-pri right now because I've got some cooler stuff to show =).
",chenglou,threepointone
62,2015-07-14 17:11:59,"@nick that's what I meant when I said ""use a default value for the first render"" :D
",bsansouci,nick
62,2015-08-07 08:41:34,"@constb care to show a snippet? Say you're animating a box that's as high as the text inside it, from that height to 0.
",chenglou,constb
62,2015-08-07 09:37:23,"@constb wrapper is definitely needed if we don't want to mess up the content, but when we don't know the content height, we can't animate it. We first need to render content, get it's height and then do animation.
",nkbt,constb
62,2015-08-07 10:08:10,"@constb 



You get the `content.offsetHeight` to do animation. You need to know height of the content to do it. We are talking about animating element which is not yet rendered.
",nkbt,constb
62,2015-08-07 10:10:48,"@constb try to start with `var state = false;` instead ;)

Also try to do it when element is inserted dynamically to the page. So when you insert element, you want it to expand and not just appear instantly
",nkbt,constb
62,2015-08-07 10:25:42,"@nkbt easy. http://jsfiddle.net/constb/xur4pf6m/2/ my point is - if you need to know content height - render it into a wrapper with `height: 0; overflow: hidden;` and then animate wrapper's height. don't animate content height.
",constb,nkbt
62,2015-08-07 10:45:12,"@constb this is exactly what I suggested before =)
",nkbt,constb
62,2015-08-07 10:48:46,"@nkbt sorry, my bad. )
",constb,nkbt
62,2015-08-07 11:47:14,"@constb no problem, i completely forgot about this issue for a while, since it is not assigned to me. Oh, I wish we can ""assign to myself"" in Github for not owned repos...
",nkbt,constb
62,2015-08-11 01:34:47,"@derekr check out this PR https://github.com/elementalui/elemental/pull/31/files for reference.
You will need to check the element height and margins.
",nkbt,derekr
62,2015-08-11 01:45:05,"Awesome! Thanks @nkbt 
",derekr,nkbt
62,2015-09-24 20:58:38,"@sikhote Yeah! I stumbled upon this one before: https://github.com/sdecima/javascript-detect-element-resize (inspired by http://www.backalleycoder.com/2013/03/14/oft-overlooked-overflow-and-underflow-events/ ).
",sompylasar,sikhote
62,2015-10-05 22:33:03,"@chenglou no can't see any flicker.
",kristian-puccio,chenglou
62,2015-10-16 15:14:51,"thanks @nkbt this is exactly what i was looking for ;)
",arush,nkbt
62,2015-10-16 19:37:04,"@arush :+1:
",nkbt,arush
62,2015-10-19 12:25:08,"Ok so i spent some time using both velocity-react and react-motion + react-collapse, and I have to say, I agree with @chenglou that animation to/from height:auto out-the-box is something I'd like to see in RM core. Honestly im finding myself wanting to use velocity-react for these situations just because the API is simpler. 

Height animation is one of the most important features for most TransitionMotion use cases - if you ever want something to enter/leave without the container-div to do that awful snap after the node is removed - the height will need to be animated to/from auto. This is a very common use case for menus, accordions, dropdowns, popovers/tooltips. Whether this is something that RM should deal with or simply pass off to Velocity.js (someday) idk, but the API should be simple for the developer.
",arush,chenglou
62,2015-10-20 08:03:47,"@arush can you raise an issue in react-collapse for what you find frustrating or what is not working for you? That would be really awesome.
",nkbt,arush
62,2015-10-22 12:26:10,"@chenglou in my experience, velocity-react does have a flicker problem, and doesn't deal with this situation easily either... here's the issue with some gifs: https://github.com/twitter-fabric/velocity-react/issues/36

in the end, velocity-react doesn't cater for auto height children elegantly without opacity and display hacks.

@nkbt Gonna look into react-collapse again.
",arush,nkbt
62,2015-10-22 12:26:10,"@chenglou in my experience, velocity-react does have a flicker problem, and doesn't deal with this situation easily either... here's the issue with some gifs: https://github.com/twitter-fabric/velocity-react/issues/36

in the end, velocity-react doesn't cater for auto height children elegantly without opacity and display hacks.

@nkbt Gonna look into react-collapse again.
",arush,chenglou
62,2016-09-15 19:01:06,"I'm a little late to this party. I spent hours researching this and trying to find a solution, including anything that `react-motion` can do for me.

I think this is what @constb is talking about or something similar. It is the approach I took. Nice, light, and all native.

This is the my `Accordion` content component:


",chrispeterson3,constb
62,2016-09-29 03:49:53,"@chrispeterson3 The above solution works nicely but it hardcodes the initial state to be always closed. I have modified it a bit to accommodate both open and closed initial states.

JS



CSS


",amit1911,chrispeterson3
61,2015-07-13 21:40:07,"@chenglou oh, sounds pretty awesome! can't wait to see it :+1: 
",yamalight,chenglou
61,2015-07-29 15:47:23,"@chenglou looks great, thank you!
",yamalight,chenglou
57,2015-07-16 11:08:54,"@chenglou so far I do not have any major concerns. I want to give it a try on my current project to see how it works in real app. I will comment in the next hour or two.
",nkbt,chenglou
57,2015-07-16 12:47:48,"@nkbt I am totally open for refactoring and am all for pure functions but I fail to see what I could simplify. Can you give me some pointers? 
",iclanzan,nkbt
57,2015-07-16 12:55:20,"@iclanzan well it is kind of full-refactoring of the code, removing `this` references, moving things to functions without side effects and so on. No concrete examples though for now. It is my own opinion and I'd better wait for @chenglou word on the case.

If we decide to go functional, then you will need to rebase against the latest master first and then we  can work on the code itself.
",nkbt,chenglou
57,2015-07-16 12:55:20,"@iclanzan well it is kind of full-refactoring of the code, removing `this` references, moving things to functions without side effects and so on. No concrete examples though for now. It is my own opinion and I'd better wait for @chenglou word on the case.

If we decide to go functional, then you will need to rebase against the latest master first and then we  can work on the code itself.
",nkbt,iclanzan
57,2015-07-16 16:59:46,"@AndrewIngram That is terrific news!
",iclanzan,AndrewIngram
57,2015-07-16 18:14:38,"Yeah I didn't want to comment on the OOP-ness because it's the idea that's important here. But I did mind a bit that it's OO. Regarding state, this library should enable time-travel and such (@gaearon) and I really don't want any state that lives in some place that's gonna be hard to reach. Closures are fine and being inside components is totally fine.

Also is it just me or do the instabilities not happen unless I switch away browser tab? 1k chat heads on master.

@AndrewIngram just to make sure: the touch delay issue happens on this PR in particular and not on master?
",chenglou,AndrewIngram
57,2015-07-16 18:17:58,"@chenglou They happen without switching tabs. You do have to wait a bit for more of the elements to start animating since they all start in the top left corner. Just move your mouse around the screen and you should see it get unstable. I can always reproduce it.
",iclanzan,chenglou
57,2015-07-16 18:24:35,"@chenglou pretty sure it happens on master too, but it's hard to be sure because the poor performance means it's jumping around a lot
",AndrewIngram,chenglou
57,2015-07-16 22:44:36,"Super cool stuff @iclanzan, great read!
",bsansouci,iclanzan
57,2015-07-17 16:51:27,"@chenglou I guess you can merge it and we will keep improving it.
",iclanzan,chenglou
56,2015-07-12 19:44:40,"@chenglou 
Safari complains that

> Viewport argument key ""scale"" not recognized and ignored.

and Chrome says:

> The key ""scale"" is not recognized and ignored.

The possible values for viewport are documented at MDN:
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
",cody,chenglou
55,2015-07-12 13:01:56,"@nkbt

> This works well with https://github.com/in-flux/in-flux

Cool. I'll have to parouse the code later. Sadly any router that requires being able to have access to the components when defining the router won't ever work for me, since my production needs requirements mean the component data never exists until someone requires the page (webpack require.ensure style universal app). The routers end up being very simplistic and custom built for the job.

> timeline you are talking about seems like a cross-component state. When you want to share some state between components the answer is simple - use Flux.

Uh. Maybe my way of doing things is just non-standard:
- all applications state of all components that exist (including placeholders for ones that dont yet) is stored in a baobab tree (and I do mean everything, form errors, form data, field data, page, page data, keys, user data, etc etc)
- anything that needs to do anything subscribes to that baobab tree (usually though baobab-react but I do explicit cursors too when I need to force certain patterns)
- if something in the application needs to happen you just have a function called (mainly call them actions, but dont really care honestly) that perform any data retrival if they wish to, and send changes to the application baobab tree; everything else just responds on it's own correctly since it's subscribed to the tree

I looked over flux, the patterns involved in it seems too unnecessarily verbose for my purposes. My way may not be the best but it's stupid simple, so easier to figure out when something goes wrong.

> That means you can create a timeline store to keep track state of animation and then apply it when needed to ReactMotion elements (or their animated targets directly).

I don't really understand this, but it may be just be that I'm missing something. I only found react-motion recently. I'll have to experiment some more.

> PS: hack keys are gone for the moment. will be added back later

:+1: 
",srcspider,nkbt
55,2015-07-12 13:19:23,"off-topic but @nkbt in your in-flux/in-flux#52 example you still clearly have access to the Chart object. I'm sure it's dynamically loaded in some sense specific to in-flux but I don't see how it's dynamic in the sense I meant. When I say dynamic I mean the application has NO code for Chart and browser went and made a network call to get code that describes how to make a Chart page, injected that code into its current context along with all dependencies specific to getting Chart page to work and displayed the page. 

Anyway talking about routers will get complicated real fast, since as soon as you combine dynamic with universal apps you need to talk about entry points to enable the user to load only code specific to a page when they ask for a page; so it's probably best not to derail further.
",srcspider,nkbt
48,2015-07-12 04:04:59,"@johnamiahford hasn't rebased his branch
",nkbt,johnamiahford
48,2015-07-12 04:56:37,"Heh I thought that still wouldnt pass github's merge check. @johnamiahford can you rebase and add just the npm and bower badges please? Also, the existing slack badge should directly go to the channel already
",chenglou,johnamiahford
45,2015-07-12 21:49:14,"Haha I know @chenglou :) the reason for this thread was to raise that question. `meldGoldIntoMold` is just hilarious :P
",dariocravero,chenglou
44,2015-07-11 08:11:16,"@salzhrani yes, all props passed to Spring are applied to rendered div.


",nkbt,salzhrani
43,2015-07-11 04:54:42,"@chenglou you can use something like 



This does not break React reconciliation and works fine. 
",nkbt,chenglou
41,2015-07-11 11:16:56,"@chenglou @nkbt [would love to hear your thoughts on this](https://github.com/dariocravero/react-motion/blob/extract-animation-from-spring/src/spring/animate.js).
",dariocravero,nkbt
40,2015-07-12 00:48:39,"@chenglou done #46 #47 
",nkbt,chenglou
40,2015-07-12 13:37:41,"@chenglou sorry about the size of the PR, I thought about chunk-sizing it too but it was too much trouble as one thing was depending on the other; mainly splitting Spring.jsx into multiple files and putting a better build process that outputs all the files to `lib`. I guess the question is: are you ok with the way this refactor was going? Or are you planning in keeping everything as it is?
",dariocravero,chenglou
39,2015-07-11 08:32:23,"Related: #31 which is causes by the weird time delta we get from browser slowing down rAF
Merging this. @iclanzan I'd love to decouple stepper from the rendering, gladly accepting PR =)
",chenglou,iclanzan
36,2015-07-20 22:31:04,"@sphire yeah check my initial snippet. It's children functions. No dirty state injection (yet) please.
And this'll be a separate repo once we finish iterating on it, don't worry. We're not trying to build a monolithic animation framework here.

Regarding PanResponder: I'll leave that to you folks to experiment. I'm afraid of diving into the responder system because it'll constrain my way of thinking about these things =)
",chenglou,sphire
33,2015-07-11 23:35:30,"@chenglou Maybe add a gitter link for anything that might require irc-like live chat (help with anything for example). It's easy to use and unlike irc people easily see what people were chatting about before they arrived and can also answer someone even after they leave and the person will just receive an email about it. It's also visible to guests, and you just need github to access it. Here's webpack's as an example: https://gitter.im/webpack/webpack/

Maybe this is just a setting, but Slack presented me with a big ""sign up to do anything"", and didn't feel like doing that since they presented to me a ""hidden steps form"" for sign up, but I assume it does something similar to gitter but is more of a private thing for core contributors only? 
",srcspider,chenglou
33,2015-07-12 11:31:31,"@nkbt didn't know about the irc integration, awesum
",srcspider,nkbt
31,2015-07-11 19:29:46,"@nkbt We don’t know the duration of animations ahead of time so as to “align” it or set the last value. Each step is computed from the values of the previous one. Best we can do is try to compute multiple steps to catch up the lost time. If the time lost is too great and would take too many steps to catch up then we have two options: **pause** or **end** the animation.

If down the road we want to support physics models other then just springs we might not even know the end value. Think of something like momentum scrolling where you don’t know beforehand what the end position is. As such I would suggest we go with pausing.

I am working on decoupling the stepping function from rendering and it will among other things solve this problem.
",iclanzan,nkbt
31,2015-07-11 19:43:04,"> If down the road we want to support physics models other then just springs we might not even know the end value. Think of something like momentum scrolling where you don’t know beforehand what the end position is. As such I would suggest we go with pausing.

@iclanzan I want the Decay component actually, so yes, that makes sense. Pausing it is.
(Also, looking forward to decoupling the stepping function!)
",chenglou,iclanzan
31,2015-07-13 17:41:39,"@chtefi to clarify: tldr yes this is a bug, because the time delta gets screwed up. This will be fixed hopefully soon.
",chenglou,chtefi
29,2015-07-21 19:33:43,"@chenglou is there any way to use the spring interpolation outside of a react component, or at least outside of the render method? In my tests I am getting much better animation performance calling `myRef.setNativeProps({})` rather than modifying component styles. 

I realize this violates the basic declarative principles of the library but something like:



 Thoughts?

With my current implementation I am getting unpredicable spring action, often indeterminate oscilating. I assume this is because the react-native timer is less reliable. I will try it out with your latest updates and see if that helps.
",rt2zz,chenglou
29,2015-07-23 18:46:32,"@rt2zz react-motion's still in early phase so there's still a lot of perf improvement to be had. If you can profile your app and tell us where the bottleneck is, we can target them better.

(Don't forget to use the prod build of react that strips out the dev conditional blocks correctly.)
",chenglou,rt2zz
29,2015-12-21 12:33:28,"@chenglou Is there a comparison, performance-wise, between Motion and Animated?

(I am sure there is, I am just a bit lazy to look for any atm :)
",phaistonian,chenglou
29,2015-12-21 14:19:11,"@phaistonian Not officially, I should give it a try. Any ideas how we could accurately benchmark an animation framework?
My guess is that Animated will win because most of it is implemented natively, and they only pay the cost of the communication between JS and native. RM is utterly unoptimized.
",bsansouci,phaistonian
29,2015-12-21 14:21:00,"@bsansouci Funny thing, the RN team actually suggested RM (when asked about animation in a recent AMA on Reddit) and not Animated.

Then again, @chenglou is an FBoy as well ;)
",phaistonian,bsansouci
29,2015-12-21 14:21:00,"@bsansouci Funny thing, the RN team actually suggested RM (when asked about animation in a recent AMA on Reddit) and not Animated.

Then again, @chenglou is an FBoy as well ;)
",phaistonian,chenglou
29,2015-12-21 15:17:47,"@phaistonian because RM is just <3
",bsansouci,phaistonian
29,2015-12-28 23:42:43,"@chenglou @bishopZ To elaborate, I may have misstated it as ""not working"". (I was extremely frustrated to RN when I was commenting so it could be a bit excessive) I did not try to port every demo though, it absolutely works after those changes! (`div` to `View`, `button` to `TouchableHighlight`, etc.) And they are very pleasant to use, compared to Animated. 

However, I have seen some native app folks (who are not really familiar with web techs or React for web) get interested by React Native and get confused by these rather 'trivial' differences after using a few React libs. I thought 'just working' examples can help those kind of people.
",sairion,bishopZ
29,2015-12-28 23:42:43,"@chenglou @bishopZ To elaborate, I may have misstated it as ""not working"". (I was extremely frustrated to RN when I was commenting so it could be a bit excessive) I did not try to port every demo though, it absolutely works after those changes! (`div` to `View`, `button` to `TouchableHighlight`, etc.) And they are very pleasant to use, compared to Animated. 

However, I have seen some native app folks (who are not really familiar with web techs or React for web) get interested by React Native and get confused by these rather 'trivial' differences after using a few React libs. I thought 'just working' examples can help those kind of people.
",sairion,chenglou
26,2016-01-19 08:36:45,"@Xananax Thanks for the feedback! And sorry for the late reply. Haven't gotten around this until now.

Due to some newer constraints that I'll be putting onto the style object (can only contain data you need to interpolate, and not random properties such as `todoItemText` that you stuff in there for the sake of piggy backing on the diffing algorithm), I need to reconsider this API and switch to array.

Here's the potential new format:



Is this more in line with what you have in mind?
(If that's relevant: I can't allow directly storing an array of ReactElements, because `willEnter/willLeave` and others need to be able to read into the style property.)
",chenglou,Xananax
24,2015-07-09 00:31:33,"@chenglou delegate it =)
I'm happy to do that asap. Assign to me if you are ok
",nkbt,chenglou
24,2015-07-10 08:23:00,"@chenglou could you please create a `gh-pages` branch so it is possible to make PR there?
",nkbt,chenglou
21,2015-07-07 19:10:51,"@chenglou What about `npm install ⚛✨` then?
",kittens,chenglou
21,2015-07-07 19:15:14,"@chenglou did you try to contact react-animation package owner? It seems that package is abandoned and it is likely they can transfer package name to you.
",andreypopp,chenglou
21,2015-07-07 19:15:57,"@brentvatne react-pop would be neat, too bad this library has no association with Pop (except in spirit!)
@andreypopp: yeah I did, hasn't replied yet.
@devknoll re-animation...humm
",chenglou,devknoll
21,2015-07-07 19:15:57,"@brentvatne react-pop would be neat, too bad this library has no association with Pop (except in spirit!)
@andreypopp: yeah I did, hasn't replied yet.
@devknoll re-animation...humm
",chenglou,andreypopp
21,2015-07-07 19:15:57,"@brentvatne react-pop would be neat, too bad this library has no association with Pop (except in spirit!)
@andreypopp: yeah I did, hasn't replied yet.
@devknoll re-animation...humm
",chenglou,brentvatne
21,2015-07-07 19:52:27,"using the react- prefix make it WAY MORE easier to locate a package in the npm hell, so I'm against the ""re"" only prefix. Sorry @dariocravero  :D
",attilah,dariocravero
21,2015-07-07 19:53:38,"@attilah haha yeah, I know what you mean, we still have keywords though ;)
",dariocravero,attilah
21,2015-07-07 20:01:34,"@chenglou 
while `react-motion` is pretty good, `react-animation` somehow sounds better. Try contacting npm.
",boopathi,chenglou
21,2015-07-07 21:23:43,"@gaearon I like the idea of avoiding the baggage of what $.animate entails :+1:
",bsansouci,gaearon
21,2015-07-07 23:57:39,"react-motion seems popular so I registered that with a placeholder just in case some jerk tries to take it :P https://www.npmjs.com/package/react-motion - if you decide to go with that I will transfer it over for you @chenglou 
",brentvatne,chenglou
21,2015-07-08 04:24:06,"<img width=""568"" alt=""screenshot 2015-07-07 21 19 45"" src=""https://cloud.githubusercontent.com/assets/1909539/8562981/f19fcda2-24ed-11e5-8b07-dda9a9949df9.png"">

Democracy has spoken! React-Motion it is. @brentvatne transfer please =)

Here are the honorable contenders:
- Reanimation (definitely the next animation library name)
- React-Tween
- React-⚛✨ (`import ⚛✨ from 'react-⚛✨`)

Thanks was fun, people! =)
Now back to polishing the library for the impending release. Closing!
",chenglou,brentvatne
21,2015-07-08 05:14:10,"@chenglou - transfer complete :smile: all yours
",brentvatne,chenglou
19,2015-07-12 03:19:38,"@nkbt can you keep karma and coverage out for now?
",chenglou,nkbt
19,2015-07-12 03:57:01,"@chenglou sure, no karma. That was just a rebase commit.
",nkbt,chenglou
19,2015-07-12 03:59:13,"@chenglou why not coverage? It works pretty well. The only thing I needed to do is to rename Spring.jsx to Spring.js, so it appears in coverage report (spent decent amount of time trying to find workaround to get report for js and jsx, messing with isparta and istanbul, but found the best solution is just to rename it to js)
",nkbt,chenglou
17,2015-07-09 04:25:51,"@chenglou it actually catches pretty much all most common mistakes. It is large because it has all rules in there with descriptions. It may be unnecessary when you work alone but as we found in our company it works pretty well if you have distributed team. Additional comments are also very helpful to figure out why something is failing without going to the webz

It is up to you of course. Feel free to close. I just highly recommend to have a code style in place to avoid mistakes made by other contributors. And yourself as well =)
",nkbt,chenglou
17,2015-07-11 21:16:14,"I agreed with @chenglou, this is way too much and didn't see too much benefit from it. something like use `const` instead var because the value never changed is also opinionated and slow down the development in this early stage.
",huang47,chenglou
17,2015-07-11 22:24:32,"I really think we need this even at this stage. It will save us a lot of headaches down the road. Adopting AirBnB’s rules as @gaearon suggested I think is a very good idea.
",iclanzan,gaearon
17,2015-07-11 22:46:20,"@nkbt would you mind doing that? What @gaearon said
",chenglou,nkbt
17,2015-07-11 22:46:20,"@nkbt would you mind doing that? What @gaearon said
",chenglou,gaearon
17,2015-07-11 23:28:00,"@chenglou for sure, np
",nkbt,chenglou
17,2015-07-12 00:49:20,"@chenglou done, see updated code.
",nkbt,chenglou
14,2015-07-06 19:40:53,"@chenglou A lot of the time I can see people just using the non-function style `endValue` syntax for things like `left` or `opacity`, like in /demo0 , but I can absolutely see the value of the `update` syntax in a multiple-element, multiple-property scenario. As soon as I recognized how the 'children as a function' syntax worked, it all became very clear. 
",kenwheeler,chenglou
14,2015-07-06 19:54:45,"I think it becomes useful in the 1TransitionSpring 1which @chenglou said would be discussed in another issue. But basically when you're unmounting, the `TransitionSpring` will keep your data until you decide it can be removed, then it's removed. Looking at demo3, when you delete something from the list you're removing it from your state. If you don't give it to the `TransitionSpring` to keep, you won't have the text of that todo to display.
",bsansouci,chenglou
14,2015-07-06 20:24:30,"> @chenglou A lot of the time I can see people just using the non-function style endValue syntax for things like left or opacity, like in /demo0

Random comment: the current situation is, if you pass an object instead of a callback, I assume you want to animate everything, so I wrap your object with `() => update(object, defaultConfig)` before sending it off. This is handy for scalars too: `<Spring destinationValue={5}>...` which turns into `Spring destinationValue={() => update(5)}>...` With the planned change to use vanilla object, you can no longer use the shorthand: say you have `<Spring destinationValue={{a: {top: {value: 1}, left: 10}}}`. I can't assume you wanted `left` animated too by wrapping the whole thing in another wrapper.

It's slightly more verbose but that's fine?

> That said, in what scenario would you feed non tweenable data, like importantData in the demo, through the update function?

Not sure what you mean here. If you mean that the user should only ever pass tweenable data to `destinationValue`, I feel it's too restrictive and asks too much of you to massage your data before passing it to me. If you mean that someone does `update(nonTweenableData, cancelTweeningConfig)`, that's because the upper level might wrap the whole structure in a config, and for this `nonTweenableData` sub collection you want to ""un-wrap"" by setting a special `cancelTweeningConfig`. This is for convenience over the alternative of granularly selecting all the subtrees.

But you touch a good point: right now we assume `update({a: {b: 1}, c: 2}, config)` cascades deeply and updates `1` and `2`. if `update` didn't cascade, you wouldn't need a second API/special config to disable an `update` from the higher level. I made things cascade because again, it seemed tedious to wrap every single value you want to tween with a non-cascading version of `update`. But maybe that's the way to go? This decision will also affect the second vanilla API.
",chenglou,chenglou
14,2015-07-06 20:30:27,"@chenglou on the first part, agreed, slightly more verbose, but consistent and explicit.

on the second part, I definitely see the value in the cascade in regards to keeping things terse. 
",kenwheeler,chenglou
12,2015-07-06 17:42:36,"I wouldn't change the stepper's error margin, I think it should stay broad just in case. But for checking if velocity is 0, I agree with @kenwheeler, <0.1 is good :+1: 
",bsansouci,kenwheeler
12,2015-07-08 07:54:19,"@kenwheeler master now fixes this, so closing.

I'm stopping at the exact value of `0`. Fortunately the actual spring algorithm already handles the error margin.

The library itself can't stop raf-ing at a bigger error margin than the algorithm itself. The reason is that the user might be using an `endValue` callback where it checks the current exact final position and start another animation. Related commit: https://github.com/chenglou/react-motion/commit/5a4cfa80f86f52abf5874ac6cbd2b82669d19821#diff-46a726b4ea0347d025bead8637578ac1R214

Of course, the user can decide to stop at a bigger error margin.

Hope that made sense, if not, feel free to ask for more clarification. I'll have to explain a few related bits in the readme soon anyways so I'd be nice to ensure everything's clear.

(And yes, you get chained animation practically for free, soon =))
",chenglou,kenwheeler
11,2015-07-06 04:57:59,"@chenglou I was doing recently a lot of packaging work on https://github.com/ericelliott/prod-module-boilerplate https://github.com/ericelliott/universal-react-boilerplate and my personal bunch of react-\*  modules (even made one https://github.com/nkbt/react-component-template to keep it lean and clear) . It all works really well, so I can tackle this one if you don't mind. You can assign it to me.

Should not take much time and will be done today (I'm in Sydney)
",nkbt,chenglou
11,2015-07-06 08:12:09,"@chenglou oh sorry, was on a train and did not catch up with your comment. I've already done all things. Minimal code changes, though. Only infrastructure. Feel free to check it out and try new build/test process.
",nkbt,chenglou
11,2015-07-06 08:16:22,"@chenglou oh and it does not matter if you are going to change API soon, you still can publish 0.0.1 for now. And go 1.0.0 when API is fairly stable.
",nkbt,chenglou
436,2017-02-28 23:06:55,"@chenglou Thanks for making this very awesome library. I have an issue where when I draw a series of rects on a svg, the first rect is animating from the wrong position. It only happens with the first element and only when I adjust the height. I don't understand why this is occurring so any feedback or guidance would be appreciated. Thanks!

Relevant code for the rect class:



![screencast-2017-02-28-17-57-24](https://cloud.githubusercontent.com/assets/10728027/23438624/aec9a07a-fde0-11e6-8916-8e33fab5de4e.gif)

",LPayyapilli,chenglou
422,2017-01-19 23:29:27,Although it's not baked in you can achieve this with something similar to what the UI pack does [here](https://github.com/souporserious/react-motion-ui-pack/blob/master/src/Transition.jsx#L89) then just check once your current value reaches its destination. I know that @chenglou wanted to keep the API small and light so not sure if this feature is on the roadmap.,souporserious,chenglou
419,2017-01-10 18:18:04,"Hi there. I wonder could I use TransitionMotion for disappearance of one route and appearance of another route one by one.
I have found excelent example for list of ellements https://github.com/mlewando/staggered-unmount-mount-react-motion by @mlewando.
I was trying to implement this but I couldn't do it,
Actually I hope to terminate position:absolute for wrapper of my routes",maximusnikulin,mlewando
416,2017-01-01 16:30:50,"I explain this thoroughly here:
https://medium.com/@saada/animating-particles-using-react-motion-dcded1895f17#.t6444ulvj",saada,saada
409,2016-12-15 00:25:50,"@chenglou looks like `didLeave` wasn't shipped in `0.4.6` can you look at this and ship a new version, please?",renatoagds,chenglou
399,2016-12-06 01:27:32,@nkbt @chenglou do one of you have time to take a look?,hkjorgensen,nkbt
399,2016-12-06 01:27:32,@nkbt @chenglou do one of you have time to take a look?,hkjorgensen,chenglou
375,2016-10-02 05:11:43,"@AgentME do you know what's going on here?
",chenglou,AgentME
365,2016-09-05 15:36:56,"@nkbt any chances you can shed me some light here? Thanks :)
",p4bloch,nkbt
356,2016-08-02 02:10:58,"I've been reading as much documentation as I can find on react-motion (documentation on this seems sparse) but I'm unable to figure this one out. I found a tutorial [on medium](https://medium.com/@nashvail/a-gentle-introduction-to-react-motion-dc50dd9f2459#.eqpi2f6pp) that manages to do it, except they are using a `StaggeredMotion`, I can't find any documentation that says the same is possible with just a `Motion` component, looks like they take different props?

In the end I went with the native Web Animations api, even though it's not complete yet and I think only a few browsers support it. I'd much prefer to use react-motion but not being able to cancel and reverse an animation is really important imo. Trying to animate between pages and the user may interrupt that navigation, would rather have no animation than clunky animation.
",AlastairTaft,nashvail
334,2016-06-06 07:29:01,"@chenglou correct me if I'm wrong but this is now totally separated from `react-dom`, so you can Just Use It™ :D
",bsansouci,chenglou
322,2016-04-28 05:06:17,"Ehhh, @appsforartists 
",chenglou,appsforartists
317,2016-04-16 07:04:37,"Reopen until new version published

@chenglou can you please release new `patch` version (since it is `0.x.x` now)?
",nkbt,chenglou
316,2016-04-06 01:36:12,"That is and issue with Modal component. It unmounts element without waiting until animation is finished (or killing animation). Quite common issue I often run into myself.

Since even I run into that often, I could only imagine how common this issue is... Maybe it is worth adding some safeguard in ReactMotion itself. Though It is not really a fixing of root cause of the issue, but rather patching over unsafe implementations.

@chenglou any thoughts on this?
",nkbt,chenglou
312,2016-03-31 16:19:07,"What's been in the talk is the slowdown of the animation internal timer, not the change in the spring parameters. I don't see this option in the existing API. @chenglou might have an answer.
",sompylasar,chenglou
307,2016-03-25 07:58:20,"@compoundpaths Could you also provide your piece of code that uses TransitionMotion?
And Redux does not do rehydration, it's something else in your code that does it.
",sompylasar,compoundpaths
304,2016-03-22 08:17:55,"@chenglou, the author, might have another opinion.
",sompylasar,chenglou
302,2016-03-18 22:26:14,"That's really helpful, @talexand! Keen to PR?
",nkbt,talexand
297,2016-03-05 08:17:42,"You create a new function object via bind each time the parent component
renders, so onTouchTap value is different from the previous one, and this
causes a re-render.

https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f
",sompylasar,esamatti
291,2016-03-01 15:37:14,"See also #85 and #153 (particularly @herrstucki's http://bl.ocks.org/herrstucki/27dc76b6f8411b4725bb)
",akre54,herrstucki
273,2016-01-28 03:51:23,"I don't intend for this to land until after I've used it and made sure we're solving the right problem, but I'm opening this now so @chenglou can play with it (and maybe add Flow if there are places I've missed).

See also #235.
",appsforartists,chenglou
263,2016-03-23 11:03:24,"The point is to render a new dom tree for having the final view of the animation. And then, animate 
effectively with transform.
It's called the FLIP technique : https://aerotwist.com/blog/flip-your-animations/
It's useful when you want to do a layout animation, by ui design, but you can't because of poor performance. So instead of doing a browser layout for each frame of the animation, the technique is to only do the layout once, and visually recreate the old view using transform, and then animate the transform to the new view, that was actually already rendered.
@joshwcomeau wrote an article with React on the subject : https://medium.com/developers-writing/animating-the-unanimatable-1346a5aab3cd

`TransitionMotion` is a good candidate to integrate those kinds of behavior. It already had dom change, and then animation append with `willEnter` and `willLeave`. It's browser layout, then animation. It's already a FLIP technique, by the way, if you only use transform for the animation.
I think the thing that missing is to animate the other items when rendering an new item. It also can be useful to had style to those items without animation and before the animation (for visually recreate old view).

So, when adding an new item on the list, the new dom trigger a browser layout, the `willEnter` create the animation for the new item, and the 'missing part' create animation for others items. For example, new item is animated using transform scale and items after the new on the list, will be animated to translate to their new position.
I think that created that missing part also resolve the principe of ordering a list based on their new location on the dom.
",Freddy03h,joshwcomeau
261,2016-01-19 03:18:40,"Ping @chenglou ok?
",nkbt,chenglou
260,2016-01-16 04:51:41,"cc @nkbt 
Not really important but if you have `[a, a]` where a is a reference, it'll mistakenly label the second as `[*RECURSION*]`, since we check the cache but never check whether that reference is embedded inside itself.
We can use a json serializer that supports recursion. I've seen at least one.
Filing this as really low-pri, also to remind us to  check if we can use a pre-made reporter now. I refuse to believe there isn't a pre-made reporter that fits our simple needs so far =).
",chenglou,nkbt
258,2016-01-14 18:20:47,"![](http://g.recordit.co/AMpIjygYZd.gif)

Hi @chenglou I found a possible issue with React Native. I am going to describe what the issue looks like but I don't have good insight about _why_ yet.

The setup is simple enough. Below is a render body that will create _three_ switches, each with slightly differing structure.
1. The first case where `<Touchable>` _contains_ `<Motion>`, which I thought should work (that ~exact code works on Web) did not!
2. The second case where `<Motion>` _contains_ `<Touchable>` **_does work**_!
3. The third case is what I had before I introducing animation so of course it works ...because it isn't using `<Motion>`.

The question/bug is **_why isn't the first case working**_?


",jasonkuhrt,chenglou
249,2015-12-31 03:32:20,"https://twitter.com/soprano/status/682402356147826688

Woohoo!

@nkbt @bsansouci 
",chenglou,nkbt
249,2015-12-31 03:32:20,"https://twitter.com/soprano/status/682402356147826688

Woohoo!

@nkbt @bsansouci 
",chenglou,bsansouci
248,2016-11-22 11:50:12,Looking forward to sequencing in React-Motion. Are @chenglou @appsforartists still maintaining this project? Haven't seen any update for a period of time.,lzl124631x,appsforartists
246,2015-11-30 03:20:23,"Really? cc @bsansouci 
",chenglou,bsansouci
240,2015-11-14 04:47:01,"Yep, acko.net has been a great reference! We already do implement a few perf/visual optimizations such as separating the real-life clock with ideal clock. As for smoothing out arbitrary interpolations, [tween-state](https://github.com/chenglou/react-tween-state) solves this (it's the additive animation that one of the articles is talking about, and one that's implemented in iOS 7) but I'd rather just use springs because it makes other things easier too.

@hitsthings: [Here](https://medium.com/@chenglou/react-motion-and-animated-4b3edf671cba)'s the answer to your question. Hopefully we'll reach that stage where we can defer to web animation (or whatever engine it is) under the hood. In the mean time, the next goal would be to defer to actual DOM manipulation. I've been caught up with a few other features (and other stuff in general) recently so this hasn't been done yet. Also, the ""coordination"" that I'm talking about in my article, the one in RM (dependent/stagger spring, unmounting), needs a bit of API tweaking in order to work with DOM manipulations/web animation, like you said.

So: it's being discussed, not as much as some other API priorities right now but still. I'm trying to make the API as good as possible, while considering that animation perf is one of the areas where we still have to sacrifice API for speed. If you're interested in making the API totally compatible with an arbitrary implementation under the hood, check out #133 (it's slightly messy and deviates from the current implementation; again, if you're interested, give me a signal and I'll revamp it soon).

I'm leaving this open temporarily, in case you have other thoughts on this. Feel free to close it afterward because there are other issues tracking this =)
",chenglou,chenglou
235,2016-01-26 07:10:19,"@threepointone, @chenglou, and I just chatted about this for a bit.

While we see the potential usefulness of a per-value onRest (e.g. in springParams), the simple/common case is per Motion instance (you want to know when the child is completely done moving).  Perhaps Motion (and StaggeredMotion) should gain an onRest attribute for now, and we can worry about per-value onRest in the future if it becomes an acute need.  For now, you can fake it by composing Motions together.

Per-value onRest seems like a more advanced usage that would suit a timeline-based API better than what Motion currently provides.
",appsforartists,threepointone
235,2016-09-12 20:03:46,"@p4bloch Are you gonna own `TransitionMotion.@onRest`?  You should start an issue to track your progress against, and submit a PR when it's ready.  😃 
",appsforartists,onRest
233,2015-11-03 03:35:15,"That's... a bug? @bsansouci 
",chenglou,bsansouci
223,2015-10-24 11:47:20,"I've just implemented one for [react-component-template](https://github.com/nkbt/react-component-template) (with @ButenkoT help)

Look at https://github.com/nkbt/react-component-template/pull/9 for some nice automation (basically installing and running everything with `npm run test:e2e` + prepush hook)

@chenglou do you want to have this sort of testing here?

PS: for each component I publish, I have example, and dev-server. So I can run it and then click through example to make sure it is not broken (at least smoketest). Then I can add more tests to make sure it actually behaves correctly. Testing is done in Chrome, so it is very close to real life.
",nkbt,ButenkoT
223,2015-10-24 11:47:20,"I've just implemented one for [react-component-template](https://github.com/nkbt/react-component-template) (with @ButenkoT help)

Look at https://github.com/nkbt/react-component-template/pull/9 for some nice automation (basically installing and running everything with `npm run test:e2e` + prepush hook)

@chenglou do you want to have this sort of testing here?

PS: for each component I publish, I have example, and dev-server. So I can run it and then click through example to make sure it is not broken (at least smoketest). Then I can add more tests to make sure it actually behaves correctly. Testing is done in Chrome, so it is very close to real life.
",nkbt,chenglou
209,2015-10-09 12:35:18,":+1: LGTM, @chenglou there are some noticeable text changes, do they capture everything right?
",nkbt,chenglou
209,2016-01-26 06:42:09,"Hey @bjz, this is really late, but hope you like the [new docs](https://github.com/chenglou/react-motion/blob/6a7a0f3f72610c6a7fdad2920b44e728ca6e172d/README.md#api)! =) 

Proper Flow type signature, with an exposed public types file.

Sorry that this took so long. To be fair, Flow wasn't (and is still a bit buggy sometimes) ready back then either. This PR has diverged too much so I'll close it. But thanks a lot for the initiative!
",chenglou,bjz
203,2015-11-25 08:49:02,"cc @bsansouci too if you're ever bored and want to add this
",chenglou,bsansouci
199,2015-10-07 22:08:46,"We'll need to allow sources to be published one day, right? Since we're adding flow and flow users probably wanna require the source version.

(@threepointone will be happy too)
",chenglou,threepointone
197,2015-10-06 20:59:07,"After  #195 webpack build is not working correctly since it puts `all.js` into `demoX` folder.
Also all links in the README are going to be broken.

Ping @stevoland, @chenglou 
",nkbt,stevoland
197,2015-10-06 20:59:07,"After  #195 webpack build is not working correctly since it puts `all.js` into `demoX` folder.
Also all links in the README are going to be broken.

Ping @stevoland, @chenglou 
",nkbt,chenglou
197,2015-10-07 00:35:04,"Manually type in new folders in config and use proper placeholders in output. I could give it a shot today, unless @stevoland wants to fix it by himself.
",nkbt,stevoland
187,2015-10-04 14:16:17,"As @chenglou suggested in #180 , here’s a pull request with flow checks added to just a subset of the project files. I am only checking files where Flow recognizes all language constructs. Since Flow already merged the fixes related to `const` destructuring and `export default`, it seems pointless to change the project coding style, only to go back when the next Flow version releases.

Among the project dependencies, I ignored some files because we hit https://github.com/facebook/fbjs/issues/44 with React 0.14.0-rc1; I also ignored a dummy `package.json` file used to test npmconf because flow mistakes it for the real deal.
",ludovicofischer,chenglou
187,2015-10-09 13:38:12,"I have fixed the indentation issue that @nkbt highlighted and created a Style type. Now that Flow 0.17 is out we can try to check the rest of the code base. Do you want to merge this one right now or do you prefer if I try to annotate more files first?
",ludovicofischer,nkbt
180,2015-10-02 13:55:54,"Damn it, we need a type system...
@ludovicofischer if you want, feel free to submit small flow PRs gradually!
",chenglou,ludovicofischer
179,2015-10-01 23:14:37,"Ah, that's a bug then. @bsansouci 
",chenglou,bsansouci
170,2015-09-30 14:41:36,"cc @nkbt @gaearon who probably knows something about this?
",chenglou,nkbt
170,2015-09-30 14:41:36,"cc @nkbt @gaearon who probably knows something about this?
",chenglou,gaearon
158,2015-09-14 19:20:07,"Inside @jaredly's head maybe? =)
",chenglou,jaredly
157,2015-09-14 15:14:19,"Repro: chat heads, don't move mouse. See that the heads don't animate to `250, 300` even though `defaultStyles` and `styles` are set.

Probably has something to do with the stop check (again...).

@bsansouci 
",chenglou,bsansouci
155,2015-09-13 21:43:54,"@nkbt 
Comparing a collection with another one is a bit tedious and looks like this currently:
![screenshot 2015-09-13 17 42 55](https://cloud.githubusercontent.com/assets/1909539/9839155/e0d2d402-5a3e-11e5-8ef8-9b812684dd36.png)
Ideally we'd have a visual diff of the collection. But I kinda don't want to lose the nyan cat (yeah really) lol, is there something we could do here?
",chenglou,nkbt
153,2015-09-12 17:59:38,"cc @threepointone who's interested in this.
",chenglou,threepointone
148,2015-09-04 04:56:24,"@bsansouci 
",chenglou,bsansouci
142,2015-09-01 07:22:29,"I'm still against hard-coded duration, and RM likely won't expose a spring where the user specifies one of `{stiffness, damping}`, and the spring gives the other, given a determined duration. The moment we do that, interruptible animation becomes unsolved again.

For the people who wanted to have a feel of how long a spring lasts, I've directed to https://cdn.rawgit.com/chenglou/react-motion/e8f42dcd9678a8cea8648a3cf4f994583a99e7f7/demos/demo5/index.html
There might be a potential counter-argument (though so far I haven't heard of it; but just in case...) that this is ""imprecise"". Except the duration is also most of the time very arbitrary and based on a ""feel"". At least here, it respects the laws of physics.

That being said, I might consider exposing a dev-time only util which accomplishes what I said in the first paragraph, or more (e.g. ""what's a faster spring that looks like this one?). A typical workflow would be to `console.log` the output of these... or integrate this into the new React devtools.

@threepointone 
",chenglou,threepointone
140,2015-08-31 02:24:34,"Sequence it is then?

So there are two types of sequences here. One is pre-prop, where your prop goes to the next destination value when the current one finishes. The other is per-""set of props"", where you want all the props (each of which might have a different end time) to finish all before starting another set. Which one do you need?

@threepointone 
",chenglou,threepointone
130,2015-08-13 08:03:51,"@maisano care to help a bit here please?
",chenglou,maisano
130,2015-08-13 08:14:23,"@gonsfx http://in-flux.github.io/component-router/example ?
",nkbt,gonsfx
130,2015-08-13 15:18:45,"oof, i should really add some usage docs to that gist.

@gonsfx the `RouteTransition` component was written not to be a route component, but a wrapper for rendering children. e.g.:


",maisano,gonsfx
130,2016-02-05 22:47:09,"@threepointone we should have one, authoritative answer on how to make RR work with RM. I myself haven't used RR so I can't answer. But this is a recurring question.

@abelovic the migration guide is [here](https://github.com/chenglou/react-motion/wiki). Maybe [this](https://github.com/chenglou/react-motion/wiki/v0.4.0-examples/_compare/b23bda218bfc5414d2bb70c954c7ed5250e16fa2...6b4990a7adb5a28a633797f2cebc29ff3a21e363) will help
",chenglou,threepointone
130,2016-02-12 17:46:48,"@andrewgleave - thanks for this! I started doing something like this (except I used a slide transition) and it worked. After maisano released his wrapper I ended up changing to that because it is nicely abstracted

@maisano- Great wrapper!!! I only ran into one issue/improvement which I posted in your repo

Fade in/out:

Unfortunately this is one effect that doesn't look right. I have tried different stiffness/damping settings but when you transition it either moves so quick you don't notice the fade or one page starts to show through the other since it's opacity hasn't set zero yet. Ideally we would want the current route to fade out and once that is complete the new route fade in. I suspect you would need an animation end event to do this (which I believe isn't available yet)? Maybe there is another way to achieve this?

@chenglou - Obviously _incredible_ library but thanks for helping lead us to solutions on how to integrate with major third party components! Your demos are very cool but being able to use react-motion with react-router for example is a big deal. Developers finally have a well designed library to integrate advanced animations in real world apps :)

Expanding upon this concept further doing the following with react-motion would be awesome! 

https://www.google.com/design/spec/animation/meaningful-transitions.html

Although maybe this belongs in react-motion-ui-pack :)
",abelovic,maisano-
127,2015-08-07 21:26:27,"@bsansouci 
",chenglou,bsansouci
104,2015-07-27 04:54:08,"@bsansouci 
",chenglou,bsansouci
97,2015-07-23 23:05:16,"@bsansouci 
",chenglou,bsansouci
95,2015-07-23 08:17:55,"cc @iclanzan because I not sure whether that's a flaw in the current implementation of animation loop of the problem of the (which would be a bigger problem).

Edit: no, I think it's just a flaw in the current implementation.
",chenglou,iclanzan
89,2015-07-21 02:50:07,"Radium's a project for inlining styles with react. When I use the @Radium decorator I get the following Javascript error from the Spring's render method.



in the following code



React-motion works without Radium and Radium works without react-motion. Here's my render method:



Any thoughts?
",yanivtal,Radium
83,2015-07-19 05:59:21,"Basically, with the current implementation of `Spring`, CSS transitions won't work reliably.

There are two reasons that I can see, maybe more, that causes them to not trigger:
### 1. Will stop rendering after the first frame

If `endValue` returns an array of `ReactElements` there will be no interpolation, only the diffing algorithm will be used. 
Start state: `{counter: 0}`
Start of the frame (one step at a time):
- `this.setState({counter: counter + 1})`
- render of the owner
- `Spring` loop
- call to `endValue`, which returns `[ReactElement with key ""1""]`
- call to `mergeDiff`, which return `[ReactElement with key ""0"", ReactElement with key ""1""]` (because ""0"" shouldn't leave yet)
- we check what's new in the `mergedObject` and call `willEnter`, which returns `ReactElement with key ""1""` having for `className` some class used for initial position (and which needs to be transitioned)
- not interpolation because it's an array of `ReactElement`s
- Velocity is 0, so [this line](https://github.com/chenglou/react-motion/blob/master/src/Spring.js#L361) will be true and the animationLoop will stop

So `ReactElement with key ""1""` had a chance to get mounted, but won't have a chance to see its `className` change (which is required for the CSS Transition to be triggered.

A possible fix is detailed [here](https://github.com/chenglou/react-motion/issues/77)
### 2. FPS too high

That's a bigger problem, which makes me wonder if we should support CSS Transitions.
Basically, if you want something to transition in using CSS transitions, you'll write a `willEnter` that will return your component with a class with a transition property (say `className1`). Then you'll rely on the fact that `willEnter` is called only once when something should be mounted, and then `endValue` is called, which would set the `className` to a default one (say `className2`). This would cause the object to switch from `className1` to `className2` and the browser would kick in and smoothly transition between the two class's properties (depending what you want to transition).
But because of the nature of how JS handles which function is allowed to run when (in the case of requestAnimationFrame), it's very likely that the Spring loop will run twice in a row, not giving enough time for the browser to see the className change and resulting in no transition.

The only reason why demo5 works right now is because of point number 1. If you comment out [this line](https://github.com/chenglou/react-motion/blob/master/src/Spring.js#L361) you'll see this:

![css-transition-bug](https://cloud.githubusercontent.com/assets/4534692/8764735/a09dcc7c-2db9-11e5-8f25-9b3013b7a25d.gif)

I want to know what you guys think, if it's worth implementing or not, and if so, what would the best way to go about this be.

My conclusion from this is that to support CSS transitions properly we'd probably need a special Spring and a special animation ""loop"" (which wouldn't necessarily be an actual loop). I personally think that most things can be handled by JS, and the only place where CSS Transition shine is when you need 

Issues related: #72, #77 and #38 
ping @brumm
",bsansouci,brumm
83,2015-07-19 21:02:17,"Point 2: are you sure this is the issue? This is important. It's because of the new animation loop. @iclanzan

(Assuming it _is_ because of the new animation loop) this is actually somewhat of a relief. I was afraid of cramming more stuff into TransitionSpring for the sake of playing nice with CSS transitions, which really doesn't need an animation loop. Maybe we'll simply pull out the logic into a CSSSpring (or not). I think doing this will also allows #77 to have simpler solutions?
",chenglou,iclanzan
82,2015-07-19 22:47:22,"Or it could be a bug, but I doubt.
Ping @sebmck?
",nkbt,sebmck
80,2015-07-18 22:57:50,"cc @threepointone who first mentioned generators for avoiding allocating intermediate stuff. Transducerjs can probably do the same.

Generators might give bad perf (constant overhead) though IIRC. But maybe the Regenerator transform that babel uses avoids that? Have to test the real numbers.
",chenglou,threepointone
78,2015-07-18 19:12:45,"As @chenglou pointed out, `filterRight` was `O(n^2)` because of that call to `splice`, so the regular old `Array.prototype.filter` is in fact faster.

The performance gains I was seeing when I switched from `filter` to `filterRight` were caused by not inlining the predicate.

Since not inlining the predicate is a requirement, I can’t think of a way to use the built in filter and pass the alpha to the predicate. I could pass it as `this` to the predicate but that has the overhead of wrapping the number in a `Number` object drastically affecting performance.

This is the best thing I could come up with. Implement a `filter` function that passes the third argument as the first argument to the predicate. As a bonus it is faster than `Array.prototype.filter`.

I am happy not to have to mutate the array anymore.
",iclanzan,chenglou
77,2015-07-18 11:45:02,"@iclanzan 
",chenglou,iclanzan
77,2015-07-18 16:24:05,"I'll have to think about the implication of this difference for TransitionSpring. I _think_ this is fine. @bsansouci
",chenglou,bsansouci
68,2015-07-15 18:53:05,"@iclanzan your PR fixes this right?

And yeah, we can port tween-state onto this. Good thing we've chosen a curve-agnostic library name.
",chenglou,iclanzan
68,2015-07-15 19:04:12,"@iclanzan 's PR should resolve almost all issues regarding stability even given the frame-rate changes during resizing. @twobit Can you try out #57?

rebound-js has converters from Origami (where `k` and `b` are represented as `tension` and `friction`) and Pop (`bounciness` and `speed`): http://facebook.github.io/rebound-js/docs/rebound.html#section-61
",razh,iclanzan
68,2015-07-15 19:29:30,"I feel like having @twobit's suggested stiff_spring and wobbly_spring and such solves point 1? No trying to dissuade my porting tween-state over, but it seems this can be delayed quite a bit if we do provide convenient named configurations (even more so that they're literally an array of 2 elements that you can inspect and play around with).

Unrelated: react-motion at first almost used rebound-js. Then I realized I only needed a tiny chunk of the library so I just wrote the stepper.js code instead.

Unrelated 2: oh and this library does animate arbitrary data structures now, of course. cc @andreaferretti who mentioned this in chenglou/react-tween-state#22
",chenglou,andreaferretti
62,2015-07-14 02:38:20,"subscribing. :+1: 

@chenglou  ideas?
",chirag04,chenglou
62,2015-07-14 02:38:51,"Hey! <s>I think this isn't a problem specific to react-motion.</s> EDIT: definitely specific to react-motion because endValue will be called even on the first render. @chenglou maybe we should render once before calling endValue.

If you need the element's height before rending but you can only get it after at least one render, then you're going to have to set some default height. Then you can hook up an event handler that calls `this.setState({height: ...})` every time the event you need fires (here I'm guessing scroll?).
If you need to access a DOM element renderer by react you should look into using [refs](https://facebook.github.io/react/docs/more-about-refs.html).

In any case, only the first render will need some default value.
",bsansouci,chenglou
61,2015-07-29 05:51:09,"Alright! @souporserious is experimenting with some simple wrappers [here](https://github.com/souporserious/react-motion-ui-pack). I personally haven't used them yet but they look neat.

As for the simple wrappers, https://github.com/chenglou/react-motion/commit/372446fc8679dcdbf4de2e983d53709ab40ce88c exposes some commonly used spring constants. With these, I think something like:



is short enough not to warrant actual wrapper components in core lib. Might change in the future if I spot some more complex use-cases (e.g. advanced `TransitionSpring`). But for now I'll close the issue =).
",chenglou,souporserious
60,2015-07-13 20:00:34,"Yup coming up! @chenglou's fixing some important thingy inside the API so we're waiting on those before adding features. 
It'll probably a prop like `currVelocity={currVelocity => ...}`
",bsansouci,chenglou
60,2015-07-14 06:25:47,"Haha, I've talked to him, definitely knows what he's doing.
Hey @iamralpht, check out this new repo =).

My goal is to get as declarative as the constraint stuff, which I _really_ appreciate. Unfortunately JS isn't expressive enough, and most people will be scared away by the constraint API so as a pragmatic reason I'll hold off. Now, if you could somehow express these constraints naturally using react's component hierarchy, I'm immediately deprecating this repo.

(Kidding, react-motion's awesome so far, but still.)
",chenglou,iamralpht
59,2015-07-13 17:29:24,"I'm not explaining this very well lol. @nkbt probably knows this better than I do.
",chenglou,nkbt
57,2015-07-15 23:30:37,"@nkbt what do you think? It solves https://github.com/chenglou/react-motion/issues/68#issuecomment-121707570 so right off the bat that's pretty good. I'll give this a better read tonight/tomorrow
",chenglou,nkbt
57,2015-07-16 16:40:16,"I’m curious how @DrBoolean would approach the animation loop from a functional perspective.
",iclanzan,DrBoolean
57,2015-07-16 18:14:38,"Yeah I didn't want to comment on the OOP-ness because it's the idea that's important here. But I did mind a bit that it's OO. Regarding state, this library should enable time-travel and such (@gaearon) and I really don't want any state that lives in some place that's gonna be hard to reach. Closures are fine and being inside components is totally fine.

Also is it just me or do the instabilities not happen unless I switch away browser tab? 1k chat heads on master.

@AndrewIngram just to make sure: the touch delay issue happens on this PR in particular and not on master?
",chenglou,gaearon
55,2015-07-12 12:40:25,"Hm. With the multiple-page example I didn't mean that this would be a system that would be handling page change animation but that timelines recording should be able to go though routing systems. Sorry I guess I put too much emphasis on the pages changing. If you have a single page and are doing a lot of actions then it should be able to record that.

> Not sure how all this related to react-motion itself.

The system that does the animation should be the one that manages the timeline; or at least that's what I think, may be wrong approach. 

I started this as a theorycrafting to see if people have thought about the harder problems and have any insight or answers they could share. Ideas can always help in implementing other similar things even if something like the ideal solution described in the first post never comes to fruition. I know @chenglou implemented a very simple timeline system that he showed for his demos (off-topic: what's the keys for slowmo in demos anyway?) so figured he might have thought about some of the more adv. versions of that.

You may be right in that this may be better created as a seperate thing just to keep react-motion not bloated though.
",srcspider,chenglou
55,2015-07-12 17:51:45,"I really really want to build some cool demos with Redux DevTools + React Motion.
You can track Redux DevTools here: https://github.com/gaearon/redux/pull/234

They already allow time travel and hot reloading like I demoed in [my ReactEurope talk](youtube.com/watch?v=xsSnOQynTHs).

The nice thing about DevTools is it's easy to create your own. For example, instead of the sidebar with a list of actions (what I have right now) you can reuse time travel code but build your own UI on top of it. (For example, you can draw past and future states of the animation instead, similar to what @chenglou showed in his talk.)

If you'd like to give Redux a try and use its time travel implementation together with React Motion, hit me up here or on Reactiflux Slack channel and I can help you get it running.
",gaearon,chenglou
54,2015-07-12 17:44:12,"I really would love to see things built on top of react-motion, but I'm not sure this would have its place in this repo. @chenglou's the master though :p

Related to this, @kureev wanted some wrapper for looped animations and @souporserious started a repo for small UI components like those [here](https://github.com/souporserious/react-motion-ui-pack)
",bsansouci,souporserious
54,2015-07-12 17:44:12,"I really would love to see things built on top of react-motion, but I'm not sure this would have its place in this repo. @chenglou's the master though :p

Related to this, @kureev wanted some wrapper for looped animations and @souporserious started a repo for small UI components like those [here](https://github.com/souporserious/react-motion-ui-pack)
",bsansouci,chenglou
54,2015-07-12 17:44:12,"I really would love to see things built on top of react-motion, but I'm not sure this would have its place in this repo. @chenglou's the master though :p

Related to this, @kureev wanted some wrapper for looped animations and @souporserious started a repo for small UI components like those [here](https://github.com/souporserious/react-motion-ui-pack)
",bsansouci,kureev
50,2015-07-12 05:33:29,"^ heads up to @dariocravero and @iclanzan who's decoupling the stepper function. Sorry for moving things around so fast. You folks got on the bandwagon early =)
",chenglou,dariocravero
50,2015-07-12 05:33:29,"^ heads up to @dariocravero and @iclanzan who's decoupling the stepper function. Sorry for moving things around so fast. You folks got on the bandwagon early =)
",chenglou,iclanzan
45,2015-07-11 10:59:43,"Hi @chenglou, could you shed more light on the `currV` and `currVals`? Have you thought about renaming them to something more meaningful? Thanks :)
",dariocravero,chenglou
45,2015-07-11 13:11:46,"I can explain the little bit that I know. Internally,  `currVals` has the same shape as `destVals` and is the thing evolving towards `destVals`. `currV` is the current velocity, which also has the same shape.

If you have:



Then internally `currVals` and `currV` will look like:



This allows us to have our `Spring` work on any kind of data structure. It also allows us to have `TransitionSpring` use the exact same algorithm with an extra diffing algorithm which assumes the top level of your values are unique keys:



More on `TransitionSpring` [here](https://github.com/chenglou/react-motion/issues/26) (thanks @chenglou for really detailed explanations of why/how)

They both are actually one tick old when we pass them to any user defined function, which would make them more like `intermediateValuesAtLastTick` and `valueVelocitiesAtLastTick`. I think they were intended to be the actual current value of the `Spring` @chenglou?

I think `Spring` was written that way (one tick ""late"") because it allowed us to not keep the `endValue` in the state of the `Spring` (we always receive it from the props). If we did `endValue(newCurrVals)` at the end of the `raf`  we'd need to keep the return of that call somewhere for the next `raf`. 

This maybe wouldn't such a bad thing in retrospect, for the sake of giving the most up-to-date value to the user? @chenglou @iclanzan what do you guys think?
",bsansouci,chenglou
45,2015-07-11 13:11:46,"I can explain the little bit that I know. Internally,  `currVals` has the same shape as `destVals` and is the thing evolving towards `destVals`. `currV` is the current velocity, which also has the same shape.

If you have:



Then internally `currVals` and `currV` will look like:



This allows us to have our `Spring` work on any kind of data structure. It also allows us to have `TransitionSpring` use the exact same algorithm with an extra diffing algorithm which assumes the top level of your values are unique keys:



More on `TransitionSpring` [here](https://github.com/chenglou/react-motion/issues/26) (thanks @chenglou for really detailed explanations of why/how)

They both are actually one tick old when we pass them to any user defined function, which would make them more like `intermediateValuesAtLastTick` and `valueVelocitiesAtLastTick`. I think they were intended to be the actual current value of the `Spring` @chenglou?

I think `Spring` was written that way (one tick ""late"") because it allowed us to not keep the `endValue` in the state of the `Spring` (we always receive it from the props). If we did `endValue(newCurrVals)` at the end of the `raf`  we'd need to keep the return of that call somewhere for the next `raf`. 

This maybe wouldn't such a bad thing in retrospect, for the sake of giving the most up-to-date value to the user? @chenglou @iclanzan what do you guys think?
",bsansouci,iclanzan
41,2015-07-11 11:16:56,"@chenglou @nkbt [would love to hear your thoughts on this](https://github.com/dariocravero/react-motion/blob/extract-animation-from-spring/src/spring/animate.js).
",dariocravero,chenglou
41,2015-07-11 19:01:02,"Yeah definitely in the future, but not now at least. Issues like https://github.com/chenglou/react-motion/pull/39#issuecomment-120520787 (which I friggin love, thanks @iclanzan @razh!) are exactly why I'm postponing early-refactoring. By the time you're done with the modularization we'd have come up with e.g. a better way of rendering without passing `FRAME_RATE`.

And no, you're not using this the wrong way. Beside `setState` and the component declaration there aren't many React-specific things here (this is intended). But it's been like three days since the official release and we really need to work on the bigger issues (I got gestures coming, maybe =)).

I'm closing this for now because the issues are starting to pile up. Don't worry though, I do have this in mind!
",chenglou,razh
41,2015-07-11 19:01:02,"Yeah definitely in the future, but not now at least. Issues like https://github.com/chenglou/react-motion/pull/39#issuecomment-120520787 (which I friggin love, thanks @iclanzan @razh!) are exactly why I'm postponing early-refactoring. By the time you're done with the modularization we'd have come up with e.g. a better way of rendering without passing `FRAME_RATE`.

And no, you're not using this the wrong way. Beside `setState` and the component declaration there aren't many React-specific things here (this is intended). But it's been like three days since the official release and we really need to work on the bigger issues (I got gestures coming, maybe =)).

I'm closing this for now because the issues are starting to pile up. Don't worry though, I do have this in mind!
",chenglou,iclanzan
40,2015-07-10 23:48:16,"In short:
- Extracted Spring and TransitionSpring into their own components.
- Introduced a Motion component that shares logic amongst them.
- Brought in redux scripts and build process.
- Moved utils into utils folder and into separate files. Commented out
  the ones that aren't being used.
- Tried to comply to as many eslint rules as possible :)
- Moved to using classes in components.
- Added empty tests.

I can update the PR with the recent changes if you are happy with the direction this is taking @chenglou!

This should set the base for a more modular approach :), thoughts?
",dariocravero,chenglou
34,2015-07-10 08:36:04,"The idea is to maybe have a constrained API in the future that allows compiling to CSS keyframes instead of using rAF + render. cc @sahrens who'll probably find this relevant.

I've decided to stop theorizing about CSS keyframes' perf vs manipulating DOM + setting style properties vs React + render + setting inline style. Latter will most probably be slower but hey, 1. always need real data to talk about perf, 2. if it's really slower, I want to see how much slower and whether it's worth orienting the API toward the former 2. Relevant post: https://css-tricks.com/myth-busting-css-animations-vs-javascript/

I'll try the perf of React render vs CSS keyframes first. The second method of manipulating DOM and setting style is less worth the trouble of testing, because React-Motion's bottleneck is also there anyway.

I'm actually not sure what'd be an accurate way of testing this. @sahrens did you measure the perf gain from using Core Animation instead of render?
",chenglou,sahrens
34,2015-07-10 09:47:52,"It's not so much about microbenchmark a comparing the approaches head-to-head as it is about the macro system. If you're relying on react render to animate (say, a custom spinner) and want to also do something expensive in JS (say, render a large network response), then your animation is going to stop while that's happening (unless you do a bunch of work to time-slice the expensive operations).

That said, it would be interesting/valuable to push the limits of pure animations with both systems. A good way to do that is to increase the complexity (e.g. number of elements being animated simultaneously) until you start dropping frames, and compare that maximum complexity between the two approaches.

> On Jul 10, 2015, at 10:36 AM, Cheng Lou notifications@github.com wrote:
> 
> cc @sahrens who'll probably find this relevant.
> 
> I've decided to stop theorizing about CSS keyframes' perf vs manipulating DOM + setting style properties vs React + render + setting inline style. Latter will most probably be slower but hey, 1. always need real data to talk about perf, 2. if it's really slower, I want to see how much slower and whether it's worth orienting the API toward the former 2. Relevant post: https://css-tricks.com/myth-busting-css-animations-vs-javascript/
> 
> I'll try the perf of React render vs CSS keyframes first. The second method of manipulating DOM and setting style is less worth the trouble of testing, because React-Motion's bottleneck is also there anyway.
> 
> I'm actually not sure what'd be an accurate way of testing this. @sahrens did you measure the perf gain from using Core Animation instead of render?
> 
> —
> Reply to this email directly or view it on GitHub.
",sahrens,sahrens
29,2015-07-17 18:38:19,"I think it's literally just a try catch of require?

@threepointone your spring worked on react-native without changes right
",chenglou,threepointone
26,2015-07-11 18:44:51,"I think your example is misleading. Like we talked about before, writing things out in a scalar manner does have its values, but in practice whatever you pass to `TransitionGroup` will most likely be `map`ped over, in which case adding the `{val: ...}` wrapper is trivial. Hardcoding your array and object isn't very indicative of the common use-case. Plus, you could have used `zipmap(range(), arr)` right? Sure, not available natively, but I think we'll draw the line here: we won't be bloating this library up by providing unrelated things the language is missing and which can be provided by better solutions like lodash (cc @jedwatson who had his share of problems with the classnames repo, lol). We do provide the `reorderKeys(object, newKeyOrderFunction)` helper because otherwise it actually gets ridiculous to manipulate the object key order.

Adding `k` and `b` as props to TransitionSpring will require us to justify 1. Why we didn't add it to `Spring`, or 2. Why we added to `Spring` even though it can wrap the `endValue` with `{val: ...}` just fine. Not sure what your `...rest` is?

The user will do weirder stuff than just providing an extra wrapper around each cell in the object/array in the future. I'm not too worried about the small perf impact.
",chenglou,jedwatson
23,2015-07-08 16:48:35,"@chenglou Since I saw your talk at React Europe(I was there) and I wanted to use Spring asap, this pull request is aimed to remove the hack, because I basically don't want my user slow down animations on fat keydowns :D
",mirkodrummer,chenglou
21,2015-07-07 19:09:59,"@sebmck hmm good suggestion but I'm afraid it's hard to type `npm install ng-react-animation-library-by-cheng-lou™` in the terminal
",chenglou,sebmck
19,2015-07-11 23:07:50,"Let's do mocha for now because it's the one I'm familiar with. We can check into the alternatives later.

(cc @dariocravero who had a huge PR with some tests)
",chenglou,dariocravero
17,2015-07-11 21:20:24,"I'd just adopt a widely spread convention (e.g. airbnb javascript eslint rules).
Like @DenisIzmaylov did here: https://github.com/gaearon/redux/blob/4f620e6aa5d21a78c7e624725230a84645588c12/.eslintrc#L2
",gaearon,DenisIzmaylov
14,2015-07-06 19:17:01,"In conjunction with #9's point 2.2.2, this issue will explain the current API in detail. `TransitionSpring` (for unmounting) deserves its own issue later. **Warning**: this is the conceptual API for clarity purpose. Actual implementation might slightly differ.

The overall initial API looked like this:



(This is one of the only few viable solutions I've found that respect the criteria I've listed in #9. Another is @sahrens', which should be 1.2.2. in that issue.)

The object passed to `destinationValue` is an arbitrary data structure (at least for the normal `Spring` and not `TransitionSpring`.

`Spring` will drill down into the data structure and animate each number, from whatever the current value was, at that position of the collection. **This assumes your previous `destinationValue` and the next one have the same shape**. Under the hood, there's also another tree of the same shape: the velocity tree (initialized to all 0 at the beginning). Current position, current velocity, destination position, stiffness and damping together allow you to calculate the next position (which becomes the new current position) and the next velocity.

But it's a bit constraining not able to specify different spring constants (stiffness + damping) for different numbers. Here's the solution we've found:



Now, `destValue` and `springConfig` become restricted, special key names for this library. When it drills down the collection, it will skip animating `springConfig` subcollection (naturally) and animate each `destValue` according to the `springConfig` constants provided on the side. For declarativity, the constants carries over to the whole subcollection, until another `springConfig` overrides it. **For convenience, a `stiffness` or `damping` of -1 cancels the animation for the subcollection (so overrides the upper level configs)**.

This gets verbose, so a stiffness of 170 and damping of 26 is set. These two constants gives you a non-bouncing spring (similar to an ease-in curve), which gently decelerates to destination without overshooting. For one, it gets annoying if things bounces all the time. For two, for unmounting, it's easier for users to check the destination's reached with `currentPos === destPos` instead of `currentPos === destPos && currentSpeed === 0`.

But the remaining bits still leave things tedious. It would be nice to be able to write:



This is actually the current API.

What's happening here? The `update` function is actually nothing but a wrapper:



The received interpolated structure, however, is `{a: {top: someValue}, b: {top: someValue}}`. The wrapper `{val: ..., springConfig: ...}` is gone! Internally, Spring received `destinationValue` and apply the correct interpolation against `currentVlaue`, **stripping away** the `update` wrapper. This gives you the magical feeling of visually marking a collection and letting Spring know what to interpolate, while seemingly receiving a collection with the ""same"" **visual** (as in, looking at the code) shape back.

Here's how the `update` magic fares vs no magic:
- `update`
  - pros
    - hides boilerplate, a lot of it.
    - `update` only makes sense for marking `destinationValue`. It's not clear why you'd want to expose some wrapping/marking detail to the received interpolated value/velocity (maybe exposed in the future).  restricts usage places to dest (not rly if you use it in default val)
  - cons
    - error-prone. Let's say we want to animate one of the `[x, y]` in a list of `[x, y]`s: `numbers.map(n => someCondition ? [n, n] : update([n, n]))`. We intentionally gave an impression that the `update` marker's an invisible thing, but here you've accidentally returned a non-homogeneous collection: `let x = update([1, 2, 3]); let values = [...x, 4] // throws`. Alternatively, you could have done the less error-prone `numbers.map(n => update([n, n], someCondition ? {stiffness: -1, damping: -1} : null)` (`-1 -1` disables the tweening of values as a handy shorthand). Not sure.
    - kills the assumption that all three trees (current values, current speeds, destination values) are of the same shape. The shape of the latter might vary greatly depending on when you feel like putting the `update` marker.
- Expose `{val: ..., springConfig: ...}` directly
  - pros
    - No magic. In the interpolated values in the children callback, you get back the tree with the above wrapper. The speed tree (when we expose it in the future) also has the same shape.
  - cons
    - boilerplate-y.

We might want to switch to the latter.
",chenglou,sahrens
14,2015-07-06 19:17:30,"@kenwheeler seems like you're already using this, so pinging you in case you're interested.
",chenglou,kenwheeler
