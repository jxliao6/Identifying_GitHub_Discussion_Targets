issue_num,datetime,body,login,close_date
657,2017-03-28 04:17:26,"How to do require local dynamic image with require ?

my code 
<S_CODE_TOKEN>",rafaelbsconsult,2017-03-28 05:14:10
657,2017-03-28 05:14:10,"Sorry, this isn't related to Redux (or even React-Redux) at all.  

I can tell you that Webpack needs all `require` or `import` statements to be statically analyzable at compile time, so that won't work as you want.",markerikson,2017-03-28 05:14:10
656,2017-03-27 14:00:45,"Hi ! 

I'm having an issue with react-redux Provider:
I moved our router out of our index.js to a routing.js file. I used a Provider to give my Routing component knowledge of the store but I'm getting a strange warning before the execution reaches the render method : 

<S_CODE_TOKEN>

I'm wondering if I did something wrong or if it could possibly be a bug of react-redux Provider or something. 
Here is my code :

index.js :

<S_CODE_TOKEN>

routing.js (simplified for reading purpose) :

<S_CODE_TOKEN>

Thanks in advance ! ",PaulBllccq,2017-03-27 18:17:47
656,2017-03-27 18:17:47,Just don't use `. isRequired` for contextTypes.,timdorr,2017-03-27 18:17:47
655,2017-03-26 16:15:07,"I had initially posted this issue on the redux github here(https://github.com/reactjs/redux/issues/2317) but was advised to move it here.

**Do you want to request a *feature* or report a *bug*?**  
bug

**What is the current behavior?**
componentWillReceiveProps is not called even though mapStateToProps returns different values

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar.**
It'd be hard to create a minimal example here but I can show what's happening in my code. I'm having problems getting `componentWillReceiveProps` to be called reliably in my code. The logging output below is writing out the calls to `mapStateToProps`, `componentWillReceiveProps`, and `render` and as you can see the final call that I would expect to happen isn't happening even though `mapStateToProps` is returning state that would be different when using shallow compare.

*Console Logging*
<S_CODE_TOKEN>

*code*
<S_CODE_TOKEN>

**What is the expected behavior?**
That componentWillReceiveProps would be called after the last two calls to mapStateToProps as the result is different.

<S_CODE_TOKEN>

**Which versions of Redux, and which browser and OS are affected by this issue? Did this work in previous versions of Redux?**
<S_CODE_TOKEN>

chrome Version 57.0.2987.110 (64-bit)
mac seirra 10.12.3 

Haven't tried it in previous versions of Redux

",RyanAtViceSoftware,2017-03-26 23:50:19
655,2017-03-26 23:50:19,"Per discussion on Reactiflux, this appears to have been another case of accidental mutation.  Closing.",markerikson,2017-03-26 23:50:19
654,2017-03-21 10:50:12,"Space was missing to be correctly formatted.

Fixes #653 ",braposo,2017-03-21 11:11:31
654,2017-03-21 11:11:26,Thanks!,timdorr,2017-03-21 11:11:31
653,2017-03-21 10:49:00,"Just noticed while checking `CONTRIBUTING.md` that one of the headings is not properly formatted.

![image](https://cloud.githubusercontent.com/assets/38172/24144075/d21fbca0-0e23-11e7-84d6-3ffc60c6e762.png)

Super small/irrelevant but a PR with a fix will follow this.",braposo,2017-03-21 11:11:08
652,2017-03-20 12:47:28,"Hello every one ! I had a problem with redux : I create a simple application with this tutorial : https://medium.com/@jonlebensold/getting-started-with-react-native-redux-2b01408c0053#.ridphemkc

But it's impossible to my to import Provider from react-redux :(
I did :
`import {Provider}  from 'react-redux'`
But Provider is undefined and it result in this exception when I try to use it :

> Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.

Any idea ?

Here is the version of my packages :
""react"": ""15.4.2"",
    ""react-native"": ""0.42.0"",
    ""react-redux"": ""^5.0.3"",
    ""redux"": ""^3.6.0"",
    ""redux-logger"": ""^2.8.2"",
    ""redux-thunk"": ""^2.2.0""

Thanks in advance !",arsenalol69,2017-03-21 11:10:54
652,2017-03-20 13:33:13,"Are you sure that the `undefined` is for `Provider`?
Did you tried to `console.log(Provider)`, right after the import?",ugogo,2017-03-21 11:10:54
652,2017-03-20 13:35:11,"@ugogo  Yes that's what I did ... console.log(Provider) print ""undefined"" .. :(",arsenalol69,2017-03-21 11:10:54
652,2017-03-20 13:39:24,@arsenalol69 Can you provide a repo so that we can have a look?,ugogo,2017-03-21 11:10:54
652,2017-03-20 13:46:24,"@ugogo Thanks for your help :) Here is the git repo : https://github.com/arsenalol69/react-redux-exemple
EDIT : The code is inside ./app/containers/AppContainer.js",arsenalol69,2017-03-21 11:10:54
652,2017-03-20 13:57:34,"@arsenalol69 Hah, you're using react-native. Redux 5^ is not supported. Please refer to the [README](https://github.com/reactjs/react-redux#react-native) 😉 ",ugogo,2017-03-21 11:10:54
652,2017-03-20 14:09:41,"@ugogo The Readme says that 
> React Redux 5.x should work with React Native

I also try to run `npm ls react` and I only have `-- react@15.4.2`
So it should work no ?",arsenalol69,2017-03-21 11:10:54
652,2017-03-20 14:37:05,"My bad, read too fast 😬 
Sorry I can't help you though, never used react-native",ugogo,2017-03-21 11:10:54
652,2017-03-20 15:52:51,"Can you import anything from the react-redux module, or is it just Provider that's not working? Have you tried removing the `node_modules/react-redux` folder and trying to install it again? Perhaps you got a bad download.",timdorr,2017-03-21 11:10:54
652,2017-03-20 15:59:07,"@ugogo No problem :) Thanks for your help !
@timdorr I just tested to delete the folder, and re-install the module again but still the same problem ..",arsenalol69,2017-03-21 11:10:54
652,2017-03-20 16:22:46,"Seems like something weird with your build config, but I know nothing about React Native. What if you try to import it in a Jest test?",jimbolla,2017-03-21 11:10:54
652,2017-03-21 09:28:35,@jimbolla I don't understand why u want me to try a Jest test ? I has never used it and it will just try to run the project as I do myself... Maybe I just misunderstood the utility of the tool...,arsenalol69,2017-03-21 11:10:54
652,2017-03-21 10:26:09,"I found a solution : instead of `import { Provider }  from 'react-redux'`, I write : `import { Provider }  from 'react-redux/src'` and it works 😄  Explication : I checked inside the react-redux's nodemodule folder and the export command was inside the src folder...",arsenalol69,2017-03-21 11:10:54
652,2017-03-21 11:10:54,"You can also try the es folder too. It's transpiled, but leaves the import/export statements alone. 

Regardless, that's definitely some sort of build config issue. Glad you found a workaround!",timdorr,2017-03-21 11:10:54
651,2017-03-15 06:34:13,"I am trying to implement server side rendering in my react app. I have the state defined in a separate js file as:
<S_CODE_TOKEN>
and in the other file I am combining the reducers as 
<S_CODE_TOKEN>`
but I am getting error:
<S_CODE_TOKEN>
Everything seems to be working fine in the client side when I don't use server side rendering but in case of serverside rendering I am facing this issue. Somehow the handleActions function does not seem to return the correct reducer.",zeeshanjan82,2017-03-15 07:45:28
651,2017-03-15 07:45:28,"This looks like a usage question, not any kind of bug in Redux or React-Redux.  You're better off asking this on Stack Overflow instead.",markerikson,2017-03-15 07:45:28
650,2017-03-14 16:12:30,"I have been wondering why dependence on context is not optional.

Context is always referred to as an unstable and experimental feature, although react and redux are stable libraries widely used in production.

It seems to me that passing a configured `store` explicitly to connect is no harder than passing  action creators to it. This would also mean that we don't need a `<Provider />` component, therefore less api surface area.

Would this update be desired? Or am I missing something and there are hidden complications i'm not considering?",everdimension,2017-03-14 17:16:53
650,2017-03-14 17:08:13,"Context is fine. It's getting fleshed out more and more with each major version (there are finally docs for it) and it's not going away any time soon. 

Getting the right instance of the store might be difficult. If you have a singleton instance, that may work fine. But in the server context, that's a lot more tough to do. 

But passing in a store prop to a connected component or an option to connect() might be a good idea. It certainly wouldn't be a step backwards.",timdorr,2017-03-14 17:16:53
650,2017-03-14 17:09:40,"Was about to write exactly what @timdorr wrote - you can pass the store as prop:

https://github.com/reactjs/react-redux/blob/master/src/components/connectAdvanced.js#L122",BTMPL,2017-03-14 17:16:53
650,2017-03-14 17:16:53,"Oh duh, that's right. We've already got this! 😄 ",timdorr,2017-03-14 17:16:53
650,2017-03-14 19:04:21,"Yeah, passing the store reference explicitly down the component tree _is_ possible, but also a pain.  That's why `<Provider>` exists in the first place.

Also, the general advice for using context is ""Apps should probably avoid it, libraries _can_ use it, but either way you should really encapsulate how it's being used"".  That way, ***when*** the API does change, you only have to update one or two places.

So yes, `connect` will have to be updated to match whatever the new API is when the time comes, but that'll be a major bump, and _we_ will handle doing that.  Ideally, _your_ app won't have to worry about it.",markerikson,2017-03-14 17:16:53
650,2017-03-14 23:34:29,"Ok, thanks everyone for the answers, I glanced over `connectAdvanced` and saw its ties to the context and assumed that passing store as a prop wasn't supported.

I fully understand why having store in a single place is a convenient paradigm but I don't really see how passing store explicitly is ""a pain"". When your store instance is a singleton, passing it to connected components is as easy as passing bound action creators, like I mentioned.

But in a server context that's a bit a different story, I agree.",everdimension,2017-03-14 17:16:53
650,2017-03-15 06:30:23,"@everdimension : yeah, there's an FAQ entry that addresses that: http://redux.js.org/docs/faq/StoreSetup.html#store-setup-multiple-stores .  Basically, accessing the store via context acts as a lightweight dependency injection mechanism, thus making it easier to test components, less hassle passing the store down, component reuse, etc.",markerikson,2017-03-14 17:16:53
649,2017-03-13 20:21:32,"SystemJS will not load react-redux, which, in turn, makes it harder to use with TypeScript, as SystemJS wants to load a transpiler when loading react-redux.js.

Since the file is directly loadable with a script tag, I'm guessing that it's not really (nor does it contain) an ES6 module.

Is there a way to fix this? Or is this something that is not reconcilable between react-redux and SystemJS?
",kurtinatlanta,2017-03-14 01:32:31
649,2017-03-13 20:23:09,I'm sure a minimal repro would help!,gaearon,2017-03-14 01:32:31
649,2017-03-13 21:05:45,"Are you using plugin-typescript? Skimming this issue, it seems relevant to your error: https://github.com/frankwallis/plugin-typescript/issues/185",timdorr,2017-03-14 01:32:31
649,2017-03-14 00:21:17,"Here is [a repo that shows the issue and the steps I took](https://github.com/kurtinatlanta/react-redux-issue) to (hopefully) workaround it.

I created a solution/workaround with Babel that seems to re-transpile react-redux in the browser since I have to point SystemJS to the source code instead of dist/react-redux.js. But I would expect that I could use dist/react-redux.js in the same way that I can use dist/react.js or dist/redux.js.

I am not using plugin-typescript since I'm doing all the TypeScript transpiling on the server side and I can make this happen without using TypeScript at all.",kurtinatlanta,2017-03-14 01:32:31
649,2017-03-14 01:32:31,"Honestly, I can't figure this one out. Looking at the UMD for redux vs react-redux, I don't see any big differences. The 0th module both export with __esModule = true, both appear to be the same format of output, and have the same webpack header block. 

Unfortunately, I think this is more of a SystemJS bug or issue. I'm not a particular expert on it, so I'm not able to offer much assistance. And you'll probably find a more well-versed subject matter expert over there. If we're doing something wrong on our end, I'm more than willing to push a new fixed build, but I don't think I have any knobs I can fiddle with to try and make it work. Sorry!",timdorr,2017-03-14 01:32:31
649,2017-03-14 02:21:34,Thanks for taking a look at it! I'm sure it's all part of the newness of all these moving parts we are using to build modern apps. Hopefully the module standards shake out and resolve all of this soon.,kurtinatlanta,2017-03-14 01:32:31
648,2017-03-10 17:23:16,"Hi,

I'm using `redux-form` to generate multiple forms on a page.
Each form has a dynamic name: `` `setter-${ ownProps.setter.id }` ``
The form field values are stored in the state in `state.form.[form-name]`
For performance reasons I want to compare only that part of the state using the `areStatesEqual` option.

But I think I can't access the `ownProps` from the `areStatesEqual` function.

Below is a simplified piece of my code:
<S_CODE_TOKEN>

Any idea how this could be accomplished?",marcselman,2017-03-13 22:12:38
648,2017-03-10 18:15:41,"I'm not sure this is the right approach.  A few thoughts:

First, for readability, I generally suggest defining `mapState` and other similar functions separately, rather than inline inside of `connect`.  In that example, it's very hard to make out which arg is which.  I actually missed the empty object being passed as the `mapDispatch` arg at first because it blended in.  (Also, if you don't want any bound action creators, pass `null` or `undefined` for the `mapDispatch` arg rather than an empty object.)

Second, it doesn't look like props are passed to `areStatesEqual` at all, per [selectorFactory.js#L76](https://github.com/reactjs/react-redux/blob/f892ec00d7e92ff7afb21498276472f0e3b000c5/src/connect/selectorFactory.js#L76).

Third, I'm not sure that there's going to be an overly meaningful difference in perf between trying to compare parts of the entire state in `statesAreEqual`, and just using memoized selectors inside of `mapState` and letting `connect` diff the output of `mapState` as usual.",markerikson,2017-03-13 22:12:38
648,2017-03-13 22:12:38,"As @markerikson said, you're better off doing that optimization inside `mapStateToProps`.",jimbolla,2017-03-13 22:12:38
647,2017-03-09 17:15:47,"Hi RR team.

I'm thinking about create the possibility to connect the redux store in more than one component.

Today, we have the following way to connect into one component:

`const myContainer = connect(props, dispatchs)(ComponentIWantToConnect)
`
And I'm willing to do this to share the same store:

`const myContainer = connect(props, dispatchs)([ComponentIWantToConnect, AnotherComponent])`

What do you think about it? ",DanZeuss,2017-03-09 17:41:14
647,2017-03-09 17:28:34,I don't understand what you're trying to accomplish.,jimbolla,2017-03-09 17:41:14
647,2017-03-09 17:41:14,"What would be the `render` of the resulting container? We don't have enough info to organize those components together correctly. 

You can accomplish the same thing by currying `connect` with whatever state and action mappings you want to use commonly. Or you can build a container component that passes things to these components via props. Either way, this is something better left up to the user.",timdorr,2017-03-09 17:41:14
647,2017-03-09 18:32:53,"I wish just share the same reducer with other components that don't have its container. 

",DanZeuss,2017-03-09 17:41:14
647,2017-03-09 19:24:50,"I think you either have a bit of a mis-understanding of how Redux's store works, or are using the wrong term there.

Reducer logic contributes to the app-wide state tree.  A reducer may be related to a given component, but _any_ connected component can then retrieve that data too.  

I _think_ what you're trying to say is that you want multiple components to use the same _`mapStateToProps`_ function, not ""reducer"", but I could be wrong.",markerikson,2017-03-09 17:41:14
647,2017-03-09 19:44:30,"I don't have 1 month in React/Redux, so, I'm pretty new at it.

And you're right @markerikson, I was trying to say that I want multiple components to use the same matpStateToProps function, without creating other Containers, just determining the component by using the connect(props, dispatchs)([component1, component2, component3)",DanZeuss,2017-03-09 17:41:14
647,2017-03-09 19:48:46,"Okay.  So, because `connect` returns a function, you can do this:

<S_CODE_TOKEN>

You can re-use the function that is created by `connect`, rather than _only_ calling it immediately.

Or, I guess you could even do:

<S_CODE_TOKEN>",markerikson,2017-03-09 17:41:14
647,2017-03-09 19:52:28,"Yeap, and I'm doing this. I just wish verify if would be a nice implementation by doing as I said before. Thanks anyway @markerikson ",DanZeuss,2017-03-09 17:41:14
646,2017-03-08 09:26:27,"Here is my component: 

<S_CODE_TOKEN>

Here is my LoginRedux:

<S_CODE_TOKEN>

Can some one explain me why I am not able to fetching <S_CODE_TOKEN> in componentWillReceiveProps? Though I am able to access it in all other component except this? Is it necessary to dispatch any action to receive state in props ?",iamrutvik,2017-03-08 15:24:32
646,2017-03-08 15:24:32,"This is a bug tracker, not a support system. For usage questions, please use Stack Overflow or Reactiflux. Thanks!",timdorr,2017-03-08 15:24:32
645,2017-03-08 05:15:22,Addresses #644,josepot,2017-03-08 05:32:28
645,2017-03-08 05:32:28,Dupe of #323 .,markerikson,2017-03-08 05:32:28
644,2017-03-08 05:13:44,"I think that it would be very convenient to accept an object as a valid `mapStateToProps` argument. In which case, each function inside it would be assumed to be a Redux selector.

I always use reselect and I would love to be able to do:

<S_CODE_TOKEN>

instead of doing the verbose:

<S_CODE_TOKEN>

I know that this is just sugar, but I think that it would be very convenient. In the same way that I love the fact that I can pass an object with action-creators as a valid `mapDispatchToProps` argument, I would like to be able to pass an object with selectors in the `mapStateToProps` argument.",josepot,2017-03-08 05:32:11
644,2017-03-08 05:32:11,"This has been brought up quite a few times.  There's already an open PR with a possible implementation over in #323 , although progress on it seems to have stalled.  I'll close this as a dupe, since that PR would cover this.",markerikson,2017-03-08 05:32:11
644,2017-03-08 05:42:42,"Sorry about that @markerikson, I did check the opened Issues but I didn't checked the opened PRs. Well, I hope that PR gets merged soon. Thanks!",josepot,2017-03-08 05:32:11
644,2017-03-08 05:55:20,"No worries, and thanks!",markerikson,2017-03-08 05:32:11
643,2017-03-06 11:28:36,"I'm trying to use react-redux in a project that's bundled with Rollup. Unfortunately I'm getting repeated errors about: 
`react/react.js does not export Component (imported by react-redux/es/components/Provider.js)`

The following changes to `Provider.js` fix my issues (all tests passing):
<S_CODE_TOKEN>

However this has the side effect of adding 
<S_CODE_TOKEN> 
to both `dist/react-redux.js` and `lib/components/Provider.js`

I'm conscious of this having implications which I'm not aware of, so looking for any advice on resolving this issue, either within a Rollup plugin or otherwise.  ",blockscoped,2017-03-06 17:03:16
643,2017-03-06 13:14:18,"React doesn’t really provide ES modules right now, so `import React, { Component }` is just an artifact of how Babel works.",gaearon,2017-03-06 17:03:16
643,2017-03-06 17:03:16,"This is more of an issue with rollup than our code. We're just writing Javascript and we're not the only library that does this. I would think that's a solution for rollup users out there, but I'm not a user and I don't know what that solution is. I'd ask through the appropriate support channels for rollup.",timdorr,2017-03-06 17:03:16
643,2017-03-06 21:29:40,"Thanks for the swift response guys. Yes, I'll investigate a solution via Rollup configuration/plugins first. 
There's no errors in anyones code, it's just an interop issue. ",blockscoped,2017-03-06 17:03:16
643,2017-03-08 10:42:55,"For anyone else following after, the solution here was to use [rollup-plugin-commonjs](https://www.npmjs.com/package/rollup-plugin-commonjs) with the following configuration:

<S_CODE_TOKEN>
The `namedExports` section allows the plugin to correctly find the ""named"" exports from the React object.

See docs for more details: https://github.com/rollup/rollup-plugin-commonjs#custom-named-exports",blockscoped,2017-03-06 17:03:16
642,2017-03-05 09:42:13,"The following code works fine:
<S_CODE_TOKEN>

but switching it out with this causes an 8 second delay between `mapStateToProps` and the associated component.

<S_CODE_TOKEN>

Chrome console reports
<S_CODE_TOKEN>
on:

<S_CODE_TOKEN>

any ideas?",davegri,2017-03-06 21:49:10
642,2017-03-05 16:10:45,"That... seems _extremely_ odd.  Do you have a repro of the issue, or any kind of snapshot of the perf behavior?

As you can see, `bindActionCreators` is itself extremely trivial, and that shouldn't be causing any kind of problem.",markerikson,2017-03-06 21:49:10
642,2017-03-06 09:54:41,"Yeah this is a super weird issue, no idea what exactly is causing this..
I'm not sure really how to read a CPU profile but here is the file

[CPU-20170306T114944.txt](https://github.com/reactjs/react-redux/files/820705/CPU-20170306T114944.txt)

I'm using `redux-actions` to create action creators like so:

<S_CODE_TOKEN>

and importing inside the container
<S_CODE_TOKEN>

If I put a console log in both the `mapStateToProps` and render function of `AnnouncementsContainer` the mapState console log happens right away but the render function only happens 8 seconds later.



",davegri,2017-03-06 21:49:10
642,2017-03-06 17:20:39,"Based on that CPU profile (really helpful, btw!), the only thing I can see that's related is [this warning](https://github.com/reactjs/react-redux/blob/4d302257e3b361731f44b1f546e547ed578c8eec/src/components/connectAdvanced.js#L93). That's the only place we call `stringify`, which is the last of the big block of CPU time on the flamegraph:

![screen shot 2017-03-06 at 12 15 43 pm](https://cloud.githubusercontent.com/assets/17882/23620912/af9ce5ae-0266-11e7-8ab9-2825e836af02.png)

The only reason I think it might not be that is because the parent functions are anonymous and the parent to our `stringify` usage is a named function (`wrapWithConnect`). If you click on the block in the flamegraph, it will send you to that code in the Sources tab. If you have sourcemaps turned on, it will show you the exact module/file where that code lives. You can hover over the tab to get the full location if it doesn't jump out to you who actually owns that code. 

Go ahead and do that so we can narrow things down.",timdorr,2017-03-06 21:49:10
642,2017-03-06 18:35:42,"Clicking on the anonymous before the stringify sends me to
<S_CODE_TOKEN>

which looks like the state mutations detection middleware `redux-immutable-state-invariant`

Any ideas how this can be related? what should I look at next?",davegri,2017-03-06 21:49:10
642,2017-03-06 21:49:10,"Well, it looks like you're causing an invariant to trip inside that library and it's trying to print the full contents of the action, which must include a sizable payload (hence the 8 second delay). 

Regardless, it looks like it might be an overly eager check by that middleware for immutable mutations. I didn't go into too much detail on it, but that's the general idea. It looks like a development aid, so removing it should be harmless. You're probably better off getting rid of it. ",timdorr,2017-03-06 21:49:10
642,2017-03-06 22:01:11,"FWIW, there's several other options for similar checks as well: https://github.com/markerikson/redux-ecosystem-links/blob/master/devtools.md#linting .",markerikson,2017-03-06 21:49:10
642,2017-03-07 07:28:42,"But how does changing from shorthand to the full `mapDispatchToProps` fix this? I'm still confused
Also there is no invariant warning printed at the end of the 8 seconds, and the payload is tiny..",davegri,2017-03-06 21:49:10
642,2017-03-07 17:47:57,"My best guess is it is accessing some property of the action creator somewhere that is tripping the that middleware. By wrapping them in functions, you're delaying that access until later, when it might not trip the middleware. I'm not an expert in that library, so I don't know for sure. I would just remove it.",timdorr,2017-03-06 21:49:10
641,2017-03-04 04:29:55,"so instead of:

<S_CODE_TOKEN>

something like this:
<S_CODE_TOKEN>

I'm struggling to get it right. Anyone mess with this yet?",faceyspacey,
640,2017-03-03 23:01:13," I'm using redux and react-redux in a react-native audio player app. It involves looping through an array of audio files to play them one by one. I'm using a recursive function to dispatch player actions. But the recursive part doesn't get called. Here's some code to explain what I mean:

<S_CODE_TOKEN>
The above are in my actions file. And then in the UI component I connect playFile function to props:

<S_CODE_TOKEN>
I'm able to trigger the `playFile` function once from the component to play the first file. And then it just stops. I guess this is because when `playFile` is called from `playPlayList`, it loses the dispatch variable? But then I tried calling `playFile(sectionArray[0],sectionArray, dispatch)` in `playPlayList`, it still didn't work.

Would very much appreciate any insights on this, or if I should write it in some completely different way.",natashache,2017-03-03 23:30:16
640,2017-03-03 23:30:16,"This is a usage question, and is best asked on Stack Overflow.  I see that you've already opened up a question over there, so I'll close this.

For what it's worth, I'm not sure why you're trying to use recursion here.  I'd suggest looking at other approaches.",markerikson,2017-03-03 23:30:16
640,2017-03-03 23:49:02,"Thanks for the input, @markerikson. I changed the calling of `playFile` to `playFile(sectionArray[0],sectionArray)(dispatch)` and it's working now.",natashache,2017-03-03 23:30:16
640,2017-03-04 00:05:26,You probably want `dispatch(playFile(...))` which is less awkward to write than `playFile(...)(dispatch)`. Hope this helps!,gaearon,2017-03-03 23:30:16
640,2017-03-04 00:23:33,@gaearon thanks! It definitely reads better that way.,natashache,2017-03-03 23:30:16
639,2017-03-03 04:41:00,"This enables yarn caching during Travis CI builds
https://docs.travis-ci.com/user/languages/javascript-with-nodejs/#Caching-with-yarn",wbreakell,2017-03-03 17:58:46
639,2017-03-03 17:58:44,"Cool, thanks!",timdorr,2017-03-03 17:58:46
638,2017-03-01 22:27:59,how can I use the connect function and pass props from the parent component to the wrapped one ? I don't want to use the mapStateToProps ownProps option since it will subscribe the component to store events although it has no dependency on it..,reut-co,2017-03-02 01:56:51
638,2017-03-02 01:56:51,"The wrapper components generated by `connect` already forward any props to the wrapped component.  If I render `<ConnectedComponent a={42} b=""stuff"" />`, then the wrapped component has `props.a` and `props.b` automatically.  The `ownProps` argument to `mapState` is literally just those props that were given to the wrapper component.

This mini-version of `connect` may help illustrate what's going on: https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e .",markerikson,2017-03-02 01:56:51
637,2017-03-01 09:52:19,"I'm trying to use move my app to redux-react from pure react. I made an action and reducer for onClick but after trying to start the app in dev mode I get this error
<S_CODE_TOKEN>

which is this line 
<S_CODE_TOKEN>

This is my code

reducer

<S_CODE_TOKEN>
action
<S_CODE_TOKEN>
combine reducer
<S_CODE_TOKEN>
 store
<S_CODE_TOKEN>
connect
<S_CODE_TOKEN>",marko-mlinarevic,2017-03-01 16:45:05
637,2017-03-01 16:45:05,"This is a usage question, and should be asked on Stack Overflow instead.

As a few side observations: 

- the Redux team discourages the use of `connect` as a decorator.  Use it as a function instead ( `export default connect(mapState, mapDispatch)(MyComponent)` ).
- The duplicated state names in your `mapState` function are a bad sign.  That suggests you're using `combineReducers` wrong.
- You're passing `reducerDomMethods` as the second argument to `createStore`.  The second argument should be an object that is the `preloadedState`, not another reducer function.",markerikson,2017-03-01 16:45:05
636,2017-02-28 02:11:30,"### Description

After updating from `react-redux` `5.0.2` to `5.0.3` hot reloading breaks the redux state.

### Expected behavior

hot reloading should not break the redux state.

### Actual behavior

with `react-redux` `5.0.3` the redux state breaks after a hot reload has happened.

### Environment

`react-hot-loader` `3.0.0-beta.6`

### Reproducible Demo

Any project with `react-hot-loader` will do, just upgrade `react-redux` to `5.0.3` and experience the issue.",BerndWessels,
636,2017-02-28 02:26:32,"Can you define ""broken""?  What is wrong?  What errors are you seeing?",markerikson,
636,2017-02-28 02:33:54,"with `react-redux 5.0.2` the following works great:

- make a simple change in a components jsx like changing a label text
- wait until hot-reloading happened
- do stuff that causes actions that cause the state to update
- the new state is rendered just fine in all connected components

with `react-redux 5.0.3` the same fails:

- make a simple change in a components jsx like changing a label text
- wait until hot-reloading happened
- do stuff that causes actions that cause the state to update
- the new state is NOT rendered by any connected component

It looks like after a hot-reload the components and the redux state are not properly connected anymore.

You can easily reproduce that by updating to `react-redux 5.0.3` in your projects or use my repo https://github.com/BerndWessels/react-redux-rr4-wp2-rhl3.git

works fine with  `react-redux 5.0.2` but not with  `react-redux 5.0.3`",BerndWessels,
636,2017-03-13 22:15:07,"Strange, since HMR was known to be broken in 5.0.2 and supposedly fixed in 5.0.3, but you're experiencing the opposite.",jimbolla,
636,2017-03-14 20:18:14,"I think I have a similar problem with 5.0.3. The problem resolved when going back to 5.0.2.

Unfortunately, I don't have a minimal example, but I did notice that if the Redux state changed, [this piece of code](https://github.com/reactjs/react-redux/blob/master/src/components/connectAdvanced.js#L211) is only executed for the `<App />` component (my 'root' component, wrapped inside `<AppContainer />` and `<Provider />`), and not its child components. If I go back to 5.0.2, then I see it is executed for all affected components.

Using the React developer tool (in Chrome), when I click a connected component that is not updating, running `$r.subscription.onStateChange()` in the console (`$r` refers to the component I clicked), I see the selector for the child component that _should_ update _is_ invoked. 

I'll try to summarize this:

<S_CODE_TOKEN>",basilfx,
636,2017-03-18 13:05:30,"I'm having the same problem as described in one of the above comments: https://github.com/reactjs/react-redux/issues/636#issuecomment-282923708

My yarn.lock is telling me I'm on react-redux 5.0.2 however, not 5.0.3.

EDIT: I tried 5.0.1 and it has the same issue.

EDIT EDIT: and 5.0.3.",jsonnull,
636,2017-03-18 13:29:09,I'm also able to perform the steps listed by @basilfx above to show how the ancestor connectAdvanced component's call to onStateChange() does not trigger an update to to the child component which should be updated.,jsonnull,
636,2017-03-22 15:22:01,"Damn, just having the same issue. Unfortunately with both 5.0.2 and 5.0.3. Performing the steps suggested by @basilfx forces the update and the page renders correctly.",namxam,
636,2017-03-22 16:02:01,"Hmm. I've got a lot on my plate atm, but I will try to dig into this at some point in the near future.

As an alternative, you may want to consider using the ""plain"" HMR API, rather than `react-hot-loader`.  Not _quite_ as nice because you'd generally be swapping the entire component tree from the root and thus lose component state, but you'd still get the benefits of keeping what's in Redux state when the component tree is reloaded.  I have an example of setting up component tree reloading in my post [Practical Redux, Part 3: Project Planning and Setup](http://blog.isquaredsoftware.com/2016/11/practical-redux-part-3-project-planning-and-setup/).",markerikson,
635,2017-02-27 06:01:14,"So I had a rather frustrating evening debugging an issue. I'm using `transform-decorators-legacy` and I went to use `redux-react`.

Here's the error I received:

<S_CODE_TOKEN>

This told me none of what I actually needed to know:

  1. Which component
  2. What the object was
  3. What this likely related to

I edited the source code to get some more useful errors, changing:

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>

Which changed the error message to:

<S_CODE_TOKEN>

This was way more useful, but still I had no idea what was going on so I found that text (The `""children""` field):

<S_CODE_TOKEN>

Nothing strange here, so I looked at the `Anchor` component:


<S_CODE_TOKEN>

Turns out you can't use `@connect` bare like that, you *have* to provide it some function that results in the props object.

I'm just making this issue as a helpful guide for anyone else searching for this very error message.
",krainboltgreene,2017-02-27 06:01:21
635,2017-02-27 17:15:30,"For what it's worth, the Redux team discourages the use of `connect` as a decorator for several reasons.  This kind of issue is one of them.  There's no real benefit to doing so, and as far as I know we don't really ""support"" that approach.",markerikson,2017-02-27 06:01:21
635,2017-02-27 17:30:57,"Yeah and there's not much react redux can really do here, which is why I
auto closed.

On Feb 27, 2017 9:15 AM, ""Mark Erikson"" <notifications@github.com> wrote:

> For what it's worth, the Redux team discourages the use of connect as a
> decorator for several reasons. This kind of issue is one of them. There's
> no real benefit to doing so, and as far as I know we don't really ""support""
> that approach.
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/reactjs/react-redux/issues/635#issuecomment-282785848>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAUb2TGS9c_ZdNocwyltO8wLc9MVqMMaks5rgwS4gaJpZM4MMuUu>
> .
>
",krainboltgreene,2017-02-27 06:01:21
634,2017-02-25 14:07:31,"Hi!
I analizing my build and find lodash-es inside. On project have different libs, which use old lodash.
In result bundle i have two copy of lodash
![Alt text](https://monosnap.com/file/YgiUJ4GOVdyhrtKbLsaW1clsQDXW4B.png)

Have some way for load redux@5 with old lodash?
Thx!",anagami,2017-02-25 16:33:30
634,2017-02-25 15:13:58,React Redux should only use a couple of small functions from Lodash. I’m confused why you seem to have a whole library there. Can you share an example project reproducing this?,gaearon,2017-02-25 16:33:30
634,2017-02-25 16:33:27,"Sorry, yes problem with another lib, clean install react-redux build only few methods lodash-es",anagami,2017-02-25 16:33:30
633,2017-02-24 08:41:57,"version: ""react-redux"": ""^5.0.2"";
es6

set defaultProps in Component

static defaultProps = {
        flagId: randomString()
    };

const tableStateToProps = (state, ownProps) => {
    const {flagId} = ownProps;
    const {dataToTableSelector, pagingDataSelector} = tableSelectors;
    return {
        tableData: dataToTableSelector(state.ployReducer)[flagId] || [],
        pagingData: pagingDataSelector(state.ployReducer)[flagId] || []
    }
};
key flagId not in ownProps
ownProps has:
children: null
location: Object
params: Object
route: Object
routeParams: Object
router: Object
routes: Object",kingangelAOA,2017-02-24 18:10:56
633,2017-02-24 18:10:56,"`ownProps` will contain props that were passed into the wrapper component generated by `connect`.  So, if you want those `defaultProps` values to be available in `mapState`, you need to set them on the wrapper component, not the component you pass to `connect`.",markerikson,2017-02-24 18:10:56
632,2017-02-24 02:03:00,5.0.3 contains a breaking change introduced in 4d302257e3b361731f44b1f546e547ed578c8eec if you're using the shapes provided.,jordansexton,2017-02-24 03:58:49
632,2017-02-24 03:58:49,Directly importing a module is not a supported behavior. It's considered a private API. ,timdorr,2017-02-24 03:58:49
632,2017-02-24 04:59:54,"Well, it is a breaking change indeed. When doing such thing it is wise to follow semver and I think it should be release as `5.1.0` instead of `5.0.3`",LKay,2017-02-24 03:58:49
632,2017-02-24 05:06:04,"Well, if it's a _breaking_ change, semver would dictate this should be 6.0.0.

The argument here is that changes to non-public APIs don't qualify as ""breaking"".",markerikson,2017-02-24 03:58:49
632,2017-02-25 13:05:56,"If you look at the README, you won't see any mention of this file. This means it is a private API, and can change or be removed in any patch version. Please don't use undocumented private APIs. ",gaearon,2017-02-24 03:58:49
632,2017-03-07 23:19:20,"I'm having this error after a fresh npm install, how do I fix it?
my code contains no mention of 'storeShape'

**edit:** Solved. had to manually update `react-intl-redux` away from the old version which used `storeShape`",jdmswong,2017-02-24 03:58:49
631,2017-02-23 23:00:51,"hi there, the recent update from [5.0.2 to 5.0.3](https://github.com/reactjs/react-redux/compare/v5.0.2...v5.0.3) broke the build on a project of mine.

here's the error that we're getting:

<S_CODE_TOKEN>

apologies for the lack of detail, let me know if there's anything i can do to clarify. thx!",data-doge,
631,2017-03-09 11:29:34,"@data-doge 
Hi, I have same issue when I build only for production with webpack. Kindly, any update??",okmttdhr,
631,2017-03-12 18:35:56,"@okmttdhr 

ey, we just locked react-redux to `5.0.2` and moved on.

wish i could be more helpful! ",data-doge,
631,2017-03-13 03:12:38,"Thank you @\data-doge !

---
I found the solution; (in my case) I needed to remove `preloadedState` from `createStore`, because it was not a object with the same shape as the keys.

<S_CODE_TOKEN>

",okmttdhr,
631,2017-03-13 14:37:24,"@data-doge Any chance you can reproduce that error with source maps enabled so we know what line of code is actually causing the problem? That stack trace is from a minified bundle.

@jimbolla Any idea what's up here? ",timdorr,
631,2017-03-13 14:49:46,Ehhh. I'm gonna need a more helpful unminified stacktrace at least.,jimbolla,
630,2017-02-22 22:37:31,A small typo was spotted in mergeProps,gs-akhan,2017-02-22 22:52:31
630,2017-02-22 22:45:17,"That's not actually a typo.  `mergeProps` should be a function, and if you provide it, it is called with the arguments listed.  So, ""it is passed"" should be valid grammar, although maybe a bit awkward.",markerikson,2017-02-22 22:52:31
630,2017-02-22 22:52:31,oh ok.. closing then.. :),gs-akhan,2017-02-22 22:52:31
629,2017-02-22 16:18:37,We need this since we recently synced React 16 alpha changes to React Native.,gaearon,2017-02-22 16:58:11
629,2017-02-22 16:19:04,"@jimbolla @timdorr If you plan to cut a new release, could you include this one with it? I could cut it separately myself too if you don't have the time. Thanks!",gaearon,2017-02-22 16:58:11
629,2017-02-22 17:53:41,"Shouldn't be a problem. We have a couple outstanding patch level changes to push, so this will be rolled up with those.",timdorr,2017-02-22 16:58:11
629,2017-02-22 17:57:48,Thank you!,gaearon,2017-02-22 16:58:11
628,2017-02-22 14:07:47,"Use `PropTypes.shape` instead of instanceOf checks which don't work across multiple instances of react-redux. Granted it's not a problem that _should_ occur since they should be deduped, but dependency management is hard, and sometimes that's not feasible due to symlinks and the like. This is (I think) more idiomatic JS anyway :)

thanks! (sorry if something obvious is off i wrote this in the GH editor)",jquense,2017-02-23 19:06:00
628,2017-02-22 14:08:35,"oops my membership in the react org apparently gives me push access here, sorry for the extra branch. I'm not sure why it didn't fork it.",jquense,2017-02-23 19:06:00
628,2017-02-22 14:09:37,"Yes please, we should never use `instanceof`.",gaearon,2017-02-23 19:06:00
628,2017-02-22 14:19:04,"I disagree. This is a helpful warning that people have a broken build process. Since it's a propType validation, it only applies to dev builds and doesn't affect production code.",jimbolla,2017-02-23 19:06:00
628,2017-02-22 14:28:07,"I see why it may be helpful to some folks, but I don't think its react-redux's job to be prescribing when someone should or should not include multiple instances of the package. The package isn't singleton, and works fine included multiple times, RR doesn't have the context to be warning someone about suboptimal bundling. 

If it does want to do that, then the warning should be about multiple instances of react-redux not the far more unclear ""This isn't a Subscription (even tho it is but fails a check due to an idiosyncrasy with how instanceof works in JS)"". 

I don't agree that its help though, as in our case the situation is perfectly expected and only present in DEV.",jquense,2017-02-23 19:06:00
628,2017-02-22 14:34:58,">This is a helpful warning that people have a broken build process.

The problem is the warning isn't actionable to anyone who doesn't know how `instanceof` works across packages. These method names also don't tell anything to end users. So even people who could benefit from a fix would brush it off as a weird unactionable noise in the log (and as a result pay even less attention to warnings coming from React).

I also think there are other cases where this could break (for example, iframes have different contexts). I can't easily describe a case like this right now but I wouldn't be surprised if it was plausible.",gaearon,2017-02-23 19:06:00
628,2017-02-22 15:28:19,"@jquense  For consistency, can you change the one in [Provider](https://github.com/reactjs/react-redux/blob/master/src/components/Provider.js#L54) as well?",jimbolla,2017-02-23 19:06:00
628,2017-02-22 18:02:00,@jimbolla Took care of that. Put our shape definitions in one spot.,timdorr,2017-02-23 19:06:00
628,2017-02-23 17:54:30,Can I get a :+1: on this? I'll merge and then we can release a 5.0.3.,timdorr,2017-02-23 19:06:00
628,2017-02-23 18:51:23,LGTM,markerikson,2017-02-23 19:06:00
628,2017-02-23 19:37:52,thanks y'all ,jquense,2017-02-23 19:06:00
627,2017-02-19 00:35:38,"Hi,

I'm on a fresh project with followng depencecies : 

<S_CODE_TOKEN>

I got the following errors in console : 

![selection_307](https://cloud.githubusercontent.com/assets/2214094/23098005/95172958-f643-11e6-8e56-64a5c0b41194.png)

I check code and find this : 

https://github.com/reactjs/react-redux/blob/shouldntComponentUpdate/src/components/Provider.js#L48

I'm new on react-redux looks like this code is responsible of warnings.

Regards.",dbyzero,2017-03-20 18:25:06
627,2017-02-19 02:05:33,"I think you should see the link provided at the end:[dont-call-proptypes](https://facebook.github.io/react/warnings/dont-call-proptypes.html#if-you-dont-call-proptypes-directly-but-still-get-the-warning),the explanation is clear and detailed.After reading,you will maybe realize that you should check the `storeSubscription` and react-redux should not be responsible for this.",NE-SmallTown,2017-03-20 18:25:06
627,2017-02-19 03:14:53,"You're probably doing this: https://github.com/reactjs/react-redux/issues/614#issuecomment-276469100

The fix is to define your propTypes inline with your component or not use the decorator form of `connect`.",timdorr,2017-03-20 18:25:06
627,2017-02-19 05:40:15,"I knew I'd seen this message somewhere recently, but that wasn't actually ringing a bell.  That's what I get for answering so many questions in so many different places :)  Nice catch!",markerikson,2017-03-20 18:25:06
627,2017-02-22 18:03:19,"I still don't understand why this is happening 😄 
Can somebody explain to me what triggers the warning in this case?",gaearon,2017-03-20 18:25:06
627,2017-02-22 18:03:45,Note that https://github.com/reactjs/react-redux/issues/614#issuecomment-276469100 is a different issue. This is not the same warning message.,gaearon,2017-03-20 18:25:06
627,2017-02-22 18:05:09,"@dbyzero Where is `react-dom` in your dependencies? It is possible you get this problem because you have mismatching versions of `react` and `react-dom`. Verify you have only one of each in `node_modules`, and that their versions are exactly the same.",gaearon,2017-03-20 18:25:06
627,2017-03-20 18:25:06,"I don't know how but after a npm install, it disappear. I was hacking `console.error` to avoid this annoying message but recently I test it again and it's ok now...

Sorry for the late answer.",dbyzero,2017-03-20 18:25:06
626,2017-02-18 14:26:04,"This replaces #523. The older branch was forked from the `next` branch ages ago, and there were too many junk commits. I'm opening this against a new branch with just the cherry picked commits.",neeharv,
625,2017-02-17 14:56:31,"Fixes #507 and like every context subscription-related bug ever. 

This is just a spike of me editing on the web interface (not on a machine with Node installed...). Travis builds will fail, things will break, no one will be happy. But it gets the ball rolling on removing it, so it's a first step.",timdorr,
625,2017-02-17 18:52:52,"Whoa.  That is some _seriously_ advanced hacker-fu there.  _bows down_

So just to confirm my own understanding: now that we're doing everything with layers of memoized selectors, `sCU` is basically pointless because we're doing the same kind of work internally, and keeping the wrapped component from re-rendering unless something actually changed?",markerikson,
625,2017-02-17 19:40:55,@markerikson Yeah. I think https://github.com/reactjs/react-redux/issues/507#issue-179829234 explains why sCU isn't a requirement anymore.,jimbolla,
625,2017-02-18 02:24:05,">In the case of shouldComponentUpdate being called after receiving new props from parent, it's effectively just acting like PureComponent. That responsibility can be given to the components being wrapped, which would have better knowledge about if/how they should implement shouldComponentUpdate. I personally would use recompose and do something like:

That would be a breaking change, right? Many apps are likely relying on this behavior—if not for functionality then for performance. I agree it might be better not to impose purity on everyone, but people are already treating `connect()` as a way to give purity, and breaking that promise should only be done in a major IMO.",gaearon,
625,2017-02-18 02:34:29,"Yeah, it would probably be worth a major bump.  I guess what I'm trying to nail down is: does the memoized internals approach give the _effect_ of `sCU`, without actually needing to have it implemented at the React level?  if it's removed and the wrapper component is asked to re-render with the same values, what happens?  Or is `sCU` still necessary to keep things from rippling downwards?",markerikson,
625,2017-02-18 02:39:41,"I can’t answer this because I don’t know how the new implementation works.
I’d be happy to answer any questions about React (or the old implementation) though!",gaearon,
625,2017-02-18 02:44:24,"Yeah, that was really meant for @jimbolla .

Looking at that deleted couple lines, I'm pretty sure `sCU` is still necessary for preventing re-renders from parents, and that without it, the wrapper is really only able to deal with changes from `map*`-related values.

Although re-reading Jim's comment from the other thread, maybe I'm misunderstanding this?",markerikson,
625,2017-02-18 15:24:20,"This would certainly be a breaking change. sCU is no longer needed for changes coming from store, but still affects changes coming from props. People, including myself, rely on `connect()` as a convenient way to get the same benefits as PureComponent.

I'm feeling like this should wait until ""React 16 - Now With FIber™"" lands so that we can see how it affects performance. It's possible that R16 could change the way we get maximum performance and we end up wanting to keep sCU.

",jimbolla,
625,2017-02-18 18:45:22,"I would add that **after** React 16 (e.g. maybe in 17) we'll likely make Fiber async by default (you can flip the switch [here](https://github.com/facebook/react/blob/bc2702f8bd89737898874e05adc67a4b4f542929/src/renderers/dom/fiber/ReactDOMFiber.js#L326) if you build it yourself). As a result, `setState`s would be batched in the correct order by default, and I’m not sure the complexity of notifying the listeners in the right order will be as important. Also, `setState` callbacks (which, as I understand, we’re using to ensure the correct order) have performance implications in Fiber and prevent some optimizations so it would be nice to not rely on them.",gaearon,
625,2017-02-19 16:42:10,"Ah... as far as I know, we _don't_ use `setState` for ordering.  Jim wrote a nested subscription system - children effectively subscribe to their nearest connected ancestor if one exists, so that they're only notified after the ancestor is notified.",markerikson,
624,2017-02-17 07:34:45,"Previous refactor `shallowEqual` has introduced an issue as follow
<S_CODE_TOKEN>",jddxf,2017-02-17 14:42:11
624,2017-02-17 14:42:11,This will be handled by #591. Thanks!,timdorr,2017-02-17 14:42:11
623,2017-02-16 16:03:20,"If a default parameter is provided for `ownProps` it will not be passed to `mapStateToProps`. For example:

<S_CODE_TOKEN>

This is due to default parameters not being counted in `Function.length`, which causes [`proxy.dependsOnOwnProps`](https://github.com/reactjs/react-redux/blob/3c5c80e757c4f6e4127fb10d5b6ccd8c88aead6c/src/connect/wrapMapToProps.js#L41) to return false.

Is this intended behaviour?",atkinchris,2017-02-16 18:12:48
623,2017-02-16 17:05:54,"That's... an interesting question.

Off the top of my head, I would say ""yes, it's intended"".  Admittedly, the way `connect` relies on the function length as a signal is kind of a bit hacky in a way, but the intent is definitely that if you define `mapState` with two parameters, `connect` will make sure that it takes whatever props were given to the wrapper component and pass them to `mapState`.  So, if two params are declared, you should get a valid `ownProps` param even if it's an empty object.

If you're wanting to ensure that a specific prop always exists so that you can use it, I think your best options are either to declare default props on the connected component itself, or use destructuring assignment with defaults inside of `mapState`.",markerikson,2017-02-16 18:12:48
623,2017-02-16 17:48:12,"I assume that's for performance - so Redux can know if a component _uses_ `ownProps` - and if not, not cause it to re-render when `props` do change but `state` doesn't?

I admit, on re-reading the docs, it can be interpreted from them (""If `ownProps` is specified as a second argument, its value will be the props passed to your component""). It does cause unexpected behaviour, if you don't know it uses `Function.length` and understand how that treats default parameters - though, as you say - if you ask for `ownProps`, you'll never get `undefined`.",atkinchris,2017-02-16 18:12:48
623,2017-02-16 17:57:27,"Yeah, it's definitely a perf thing - if you don't ask for `ownProps`, your `mapState` only gets called when the store notifies subscribers.  If you _do_ ask for `ownProps`, it will also get called every time the incoming props change as well.

If you've got some ideas for improving the phrasing in the docs, definitely submit a PR.",markerikson,2017-02-16 18:12:48
623,2017-02-16 18:12:48,Super. Thanks for the clarity and intent - we'll be careful not to use defaults in `mapStateToProps`.,atkinchris,2017-02-16 18:12:48
622,2017-02-16 03:02:23,"This is a bit hard to explain, and I may be doing this wrong. I've read a few other similar issues but haven't found exactly what I'm dealing with. I'm using a `Portal` component to show a modal, and it has an `onOpen` prop. I'm needing to use this to update a global state variable called `modalOpen`. The file currently looks like this:

<S_CODE_TOKEN>

However, I get this error:

<S_CODE_TOKEN>

How can I call the action like I'm wanting to, if this is improper?",TrevorHinesley,2017-02-16 12:53:15
622,2017-02-16 12:53:15,"You're not mapping dispatch correctly. First, it shows up on this.props. Also, your mapping function doesn't appear to be constructed correctly. It should return an object or a factory function. ",timdorr,2017-02-16 12:53:15
622,2017-02-16 12:58:48,@timdorr thank you!,TrevorHinesley,2017-02-16 12:53:15
621,2017-02-13 08:13:18,"connect actions webpack complied error: Module build failed: Error: Final loader didn't return a Buffer or String
",branchesGit,2017-02-13 14:27:48
621,2017-02-13 14:27:48,This isn't a problem with React Redux. Please ask over on Stack Overflow and provide more context.,timdorr,2017-02-13 14:27:48
620,2017-02-11 16:51:44,"For some reason react is not re-rendering when the (redux) state changed. Might it be because it is nested 1 level? 

Also **in the Redux inspector I can see that the state has changed correctly and as expected**. On manually refreshing the page, I can also see that it worked. But I am confused on why it is not pushing the new props to the component.

Also when using the `console.log(state.users)` inside the `mapStateToProps` I can see that the new state arrives but again doesn't push these props to the react component.
<S_CODE_TOKEN>




**Simplified Class Component**
<S_CODE_TOKEN>

**Action Creator**
<S_CODE_TOKEN>

**Reducer**
<S_CODE_TOKEN>
",nealoke,2017-02-11 17:04:15
620,2017-02-11 17:04:15,"You're mutating your state:
<S_CODE_TOKEN>

Change it to
<S_CODE_TOKEN>",jimbolla,2017-02-11 17:04:15
620,2017-02-11 17:14:28,@jimbolla I didn't know that this was mutating the state 👍 . However the issue at hand is not resolved by implementing the suggestion. I still have the exact same behavior. Any other things that this could cause?,nealoke,2017-02-11 17:04:15
620,2017-02-11 17:32:27,"@jimbolla Also when using the destructuring redux no longer updates the state correctly. It says the state is equal. See attachements

**Redux state**
![image](https://cloud.githubusercontent.com/assets/17417414/22855927/375eacb6-f088-11e6-81d9-17e898acf029.png)
 
**Action**
![image](https://cloud.githubusercontent.com/assets/17417414/22855936/5325649e-f088-11e6-9b8c-2cf4f528a18e.png)

**Diff**
![image](https://cloud.githubusercontent.com/assets/17417414/22855940/6b3be026-f088-11e6-8092-1005ca647446.png)
",nealoke,2017-02-11 17:04:15
619,2017-02-10 20:19:56,"Since updating to 5.0.x, my app's connected components stop updating after the app is hot reloaded. This issue is resolved when I downgrade back to 4.4.6.

A (reasonably) minimal repro can be found here: https://github.com/dsgkirkby/react-redux-hmr-bug.",dsgkirkby,2017-02-10 21:01:55
619,2017-02-10 21:01:55,Fixed in #589. I'll do a release soon-ish. Gotta get some other stuff in.,timdorr,2017-02-10 21:01:55
619,2017-02-28 03:15:57,"@timdorr @dsgkirkby Hi, this seems to be still broken.

Please see

https://github.com/reactjs/react-redux/issues/636

Thanks",BerndWessels,2017-02-10 21:01:55
619,2017-02-28 17:29:32,I've updated the repro repo to 5.0.3 and the bug is still happening. Please reopen this ticket.,dsgkirkby,2017-02-10 21:01:55
618,2017-02-04 15:21:51,"Implements #617 

This PR allows you to combine `connect()`ed components in a similar way to `combineReducers()`, so that their `mapStateToProps` function only receives the section of the state tree relevant to them rather than the whole thing. 

This aids reusability as components do not need to know where in the state tree they appear. It should also help performance as mapStateToProps will only be called when the subtree is changed, not the global state.

This is achieved with a `SubProvider` component which provides a proxy store in its child context. The proxy store passes `dispatch()` and `subscribe()` through to the real store but intercepts `getState()` and only returns the property of the state object specified by the `SubProvider`'s `subState` prop.

You don't need to use SubProvider directly as there is also `combineConnected()` which takes an object containing `connnect()`ed components and returns them wrapped in SubProviders, eg:

<S_CODE_TOKEN>

`mapStateToProps` on `Child1` will only receive `state.child1`, and `mapStateToProps` on `Child2` will only receive `state.child2`.

See example:
https://gist.github.com/simlrh/2212d5e2ae274839249618af5537dcfb

Documentation and tests have been added.

I know I didn't wait to find out if you actually want this feature, but I was going to do it anyway for my own education and use :)
",simlrh,2017-02-04 21:31:20
618,2017-02-04 15:43:26,"Maybe this could be a third-party library first, and then we can consider including it by default if a lot of people start using it?",gaearon,2017-02-04 21:31:20
618,2017-02-04 15:46:26,"Sounds good to me, I'll roll it into a library as soon as I can think of a pithy name",simlrh,2017-02-04 21:31:20
618,2017-02-04 19:30:13,"Yeah, for what it's worth, I've seen several existing third-party libraries that implement this kind of behavior.  As usual, I haven't tried any of them myself yet, but I've added all the ones I've seen to the [Component State and Encapsulation](https://github.com/markerikson/redux-ecosystem-links/blob/master/component-state.md) portion of my Redux addons catalog.  (Which is sadly in need of some additional organizing work, but that's very low on my priority list right now.)

It's certainly not a _bad_ idea in and of itself, I'm just not sure it needs to go directly in the core React-Redux library.  There's a strong parallel to how the core Redux library provides the bare basic `subscribe()` and `getState()` primitives, and that provides the building blocks for the community to build addons for specific use cases on top of those primitives.

I'll leave this open for discussion, but at least at the moment I suspect it probably won't get merged in.  Would definitely love to see this as a third-party lib, though.",markerikson,2017-02-04 21:31:20
618,2017-02-04 21:22:54,"I published on npm this afternoon: https://www.npmjs.com/package/react-redux-combine-components and https://github.com/simlrh/react-redux-combine-components (so much for pithy).

If I'd seen that list earlier I might not have bothered, but I have to say I like this solution :wink:

I'm happy whenever you want to close the PR. Thanks for your time!",simlrh,2017-02-04 21:31:20
618,2017-02-04 21:31:20,"Heh, sure.  I actually just went ahead and added your library to that ""Component State"" list, too.

Thanks for the PR!",markerikson,2017-02-04 21:31:20
617,2017-02-04 15:09:33,"Many reducers can be combined into one while remaining responsible for their own section of the state tree. They aren't required to know about the whole app, only their own state changes.

Components receive the whole state tree in mapStateToProps, so they need to know their position within the app as a whole to find the state relevant to them. It would aid reusability if components could be composed so that they only receive the state relevant to them.

(PR incoming)",simlrh,2017-02-05 05:04:48
617,2017-02-05 05:04:48,Let's keep the discussion in #618,timdorr,2017-02-05 05:04:48
616,2017-02-04 11:46:16,,lukeapage,2017-02-06 16:52:25
616,2017-02-05 16:21:41,Can you also add a test that covers this? [This test](https://github.com/reactjs/react-redux/blob/master/test/components/connect.spec.js#L1842) is probably a good starting point.,jimbolla,2017-02-06 16:52:25
616,2017-02-05 20:05:59,"@jimbolla no problem, test added",lukeapage,2017-02-06 16:52:25
615,2017-02-03 20:35:31,"I believe the documentation mistakenly references `mapDispatchToProps` when it means `mapStateToProps`. Users should pass `null` as the first argument (i.e. to `mapStateToProps` if they don't want to subscribe to store state), but still can get `dispatch` injected using `mapDispatchToProps`.  This commit fixes this reference.",rmadsen,2017-02-03 20:45:49
615,2017-02-03 20:45:52,"Yeah, I think you're right.  Thanks!",markerikson,2017-02-03 20:45:49
615,2017-02-03 21:08:36,Probably that whole sentence should be removed from the paragraph ---- it looks like it was just pasted from the paragraph describing `mapStateToProps` and inadvertently not removed.,naw,2017-02-03 20:45:49
614,2017-01-31 15:20:51,"I have a chart container that wraps a chart component using react-redux's connect().

The container maps the state to the prop 'data'. However:
`Warning: Failed prop type: The prop 'data' is marked as required in 'Connect(Chart)', but its value is 'undefined'.`

![screenshot from 2017-01-31 15-22-06](https://cloud.githubusercontent.com/assets/1461917/22471262/c8a14188-e7c9-11e6-826f-5c2bf447a324.png)

This occurs _before_ mapStateToProps has even run and before even render has been called, as seen by the console logs, at which point data exists.

If state is undefined, the mapStateToProps function returns an empty array for data, something like this:
` function mapStateToProps(state) {
  return {
    data: state.data || [],
  }
}`

So my question is why is this warning occurring before any mapping and rendering takes place?

It's clearly wrapped by connect (it's called Connect(Chart)), so the fault would probably lie there?

Any help is appreciated.",ZephD,2017-01-31 22:05:20
614,2017-01-31 19:40:32,"My guess is that you are using `connect` as a decorator, and applying PropTypes definitions to the generated wrapper component instead of the ""plain"" component.  As an example:

<S_CODE_TOKEN>

You need to ensure that the PropTypes settings are applied to the wrapped component instead.  (This is one of several reasons why the Redux team discourages use of `connect` as a decorator, and encourages the use of it as a function call instead.)",markerikson,2017-01-31 22:05:20
614,2017-02-01 10:11:50,"Yes, I was applying propTypes to the container. Thanks.

How would one then ""require"" a prop in a container which is not used in the component?

Thanks again.",ZephD,2017-01-31 22:05:20
613,2017-01-31 14:05:56,"A colleague and I ran into the following scenario:
- A component `Foo` has many props, of which one with type `func` is of our interest. e.g.:
<S_CODE_TOKEN>

- 2 different existing redux actions need be dispatched from that `prop`. e.g.:

<S_CODE_TOKEN>

- **The restrictions**: The component interface cannot be changed, and we have to make use of the 2 existing actions.

Possible implementations:
1. Use conditional inside action creator:
<S_CODE_TOKEN>

2. Use conditional inside the container's mapDispatchToProps:
<S_CODE_TOKEN>

Other alternatives such as using a single action with a payload are not feasible due the restrictions mentioned above.

**Arguments for first approach:**
"" action creators is already a place designated for application logic. Introducing logic inside the container makes it harder to expect where to find logic. ""


**Arguments for second approach:**
"" The job of the container is to decouple actions and components, therefore this logic should be inside the container. ""

Which approach would be the best practice?
",pazams,2017-01-31 17:02:04
613,2017-01-31 15:14:20,"imo 2) is ideal, as it correctly maps dispatches (any dispatches...) to the specific prop (in this case, 'toggle').

However, if this toggle logic is regularly used by multiple containers, consider creating a new action creator ""toggleFooAction()"" which wraps the other two, similar to 1).",ZephD,2017-01-31 17:02:04
613,2017-01-31 17:02:04,"It really depends on how you intend to use that boolean. If it's only useful in the context of the component, then the 2nd answer makes sense (and it sounds like you might only need some local state for it instead of Redux). If you need to do that kind of thing throughout your application, then moving it to your action creator makes more sense. Either form is valid and it depends on your particular use case.",timdorr,2017-01-31 17:02:04
612,2017-01-29 02:33:34,"Hi,

I don't understand why I get a propTypes error saying `handleLogout` is not a function in my example when it is a function. Why does React report that the prop is the wrong types when I check the type it is a function and when I click the item I'm binding it to it also works fine...

<S_CODE_TOKEN>

The logout function is a thunk and I do get the log when I click the item

<S_CODE_TOKEN>",rhysburnie,2017-01-29 02:45:27
612,2017-01-29 02:45:27,"Sorry nevermind.

I had assumed since there is `React.PropTypes.object` there would be `React.PropTypes.function`, `React.PropTypes.string` etc ie. full names, but the proptypes object has `func`. Not sure why function is shortened and theres no `obj` instead of `object` etc seems kinda inconsistent.",rhysburnie,2017-01-29 02:45:27
611,2017-01-28 23:57:04,"I was wondering if it is possible to implement easily on top of existing APIs such a concept - a connected component seting its dependencies (often in runtime, but mainly upon component creation only) so they can be grouped and handled internally, so the mere top state change is not enough to fire all subscription functions.

Possible use case - multiple dynamic lists in the app where each item is a connected one.

However from what I see `connect` and `connectAdvanced` are not sufficient for this, so more internal / undocumented APIs would have to be used.

What do you think about the concept? ",Andarist,2017-01-30 03:04:34
611,2017-01-29 00:24:36,I don't really understand what you're suggesting.,jimbolla,2017-01-30 03:04:34
611,2017-01-29 09:24:30,"Sorry if I have phrased it in a confusing way, was writing it pretty late in the night.

The idea is to create such a `connect` which would be capable of tracking registered dependencies (via `reselect` for example) for components so they could be grouped internally. It would mean that not every state change would trigger each listener in the `connect` for each connected component, but it would only fire more relevant ones.

Imagine 2 lists of 100 items, each item connected. If we can scope them by some different dependency we could skip their listeners compeltely (if some irrelevant part of the state tree changes) or only fire 100 listeners (if only dependency of their interest changes and not the other one) instead of 200.",Andarist,2017-01-30 03:04:34
611,2017-01-30 03:04:34,"That is really up to your mapStateToProps function. Avoiding calling that listener wouldn't really net you much performance benefit. Most of the work comes from actually re-rendering your component. If the state mapped to your props doesn't change, that render doesn't have to happen. So, you're already doing this there, but just on the other side of the subscription. A few hundred function calls (especially when they happen often, meaning they get optimized by the compiler) are not going to have any notable impact on performance.",timdorr,2017-01-30 03:04:34
611,2017-01-30 07:37:35,"I realize that `mapStateToProps`'s results are optimized under the hood, even on compiler level and not only in the lib itself. However surely even when thats get optimized to some extent those calls are still somewhat expensive if there are too many of them.

Recently in the `redux-saga` someone has noticed (after investigating the real life perf issue) that we subscribe internally each task (and they might be plenty of them) to the action stream (and situation is there somewhat worse than in case of react-redux cause we need to notify subscribers about all actions, not only after state change) and that caused him a perf issue cause he had hundreds of tasks not even depending on the actions. We'll be optimizing this, so we create only a single, global for `redux-saga` emitter of those actions so each task can subscribe to this independently - resulting in only some listeners in the opposite of the situation when each task got its own instance of the subscriber anyway.

This situation led to me think about this idea and when I realize it might be unnecessary for most apps, I think it might be worthwile to think about such a possibility. If you still think its completely futile leave it closed.",Andarist,2017-01-30 03:04:34
610,2017-01-27 08:02:23,What are the best ways to acheive siblings component communication using react-redux??,iiitmahesh,2017-01-27 15:58:34
610,2017-01-27 15:58:34,"If you want to directly communicate, you can do so in vanilla React via a parent component that connects the two together. Otherwise, you would just issue actions to your redux store and each component would subscribe to the relevant bits of state.",timdorr,2017-01-27 15:58:34
610,2017-01-27 17:06:26,Also see the article at http://andrewhfarmer.com/component-communication/ for ideas .,markerikson,2017-01-27 15:58:34
610,2017-01-27 20:12:22,"@timdorr _

> you would just issue actions to your redux store and each component would subscribe to the relevant bits of state.

_Could please relavent reference or  sample piece code to better understanding. 

Exact issue I am not able to reslove dispatch action  updating source component but not getting update data in other component.

![screenshot from 2017-01-28 01-30-04](https://cloud.githubusercontent.com/assets/13597781/22385980/fb79beae-e4fa-11e6-9e14-0ba3770048f2.png)
",iiitmahesh,2017-01-27 15:58:34
610,2017-01-27 20:51:19,"No, this is a bug tracker, not a support system. Stack Overflow or Reactiflux are better venues for this.",timdorr,2017-01-27 15:58:34
610,2017-01-27 21:00:22,@timdorr Thank you.,iiitmahesh,2017-01-27 15:58:34
609,2017-01-26 19:36:30,"After scouring the internet, I'm at a dead end and I don't think this is actually possible anymore.  How would I call a instance method on a connected component?

My component(Profile.jsx)
<S_CODE_TOKEN>

My test:
<S_CODE_TOKEN>

Anyone have any ideas how to call an instance method?
",oshalygin,2017-01-26 19:47:39
609,2017-01-26 19:47:39,"You can ask the wrapper component to expose the underlying component using the `withRef` option, like:

`const WrapperComponent = connect(mapState,mapDispatch, mergeProps, {withRef : true})(PlainComponent)`, and then use `wrapperComponentInstance.getWrappedInstance()`.

See the docs for details: https://github.com/reactjs/react-redux/blob/master/docs/api.md#arguments-1",markerikson,2017-01-26 19:47:39
609,2017-01-26 22:00:50,either export both Profile and enhanced Profile from file,restrry,2017-01-26 19:47:39
609,2017-01-26 22:02:45,"Thanks for the solution guys, got it going with what @markerikson suggested but the option of enhanced profile seems very clean as well, thanks!",oshalygin,2017-01-26 19:47:39
608,2017-01-24 17:50:29,"https://stackoverflow.com/questions/41818343/props-not-being-passed-into-component-when-using-react-native-router-flux-with-r 

Code/github and description of the issue in the link. I've checked to make sure the component is connected properly, made sure mapStateToProps is correct, and made sure my reducer is correctly implemented (redux logger says the store is correctly being updated). Is something wrong with redux or is my code wrong?",sguo35,2017-01-24 18:16:21
608,2017-01-24 18:16:21,"Definitely a usage question and not a library bug, so I'll close this.

However, glancing at your code, I think your `mapState` function is wrong.  You should be returning `state.session.success`, not `state.success`.",markerikson,2017-01-24 18:16:21
607,2017-01-23 12:57:07,"Hi,

I have a very data-intensive application, which combines data from a number of sources before passing it to a component which then hands off to several presentational components for rendering.

The mapStateToProps call (which runs, as I understand, on every state change), does some pre-filtering/mapping of the data before passing it to the component. This, in the case of arrays, obviously changes the object reference, which will cause a re-render (I currently have no logic in componentShouldUpdate()).

Would you expect the component itself to stifle these renders through componentShouldUpdate, or are there any optimisations which can be made in mapStateToProps to not pass props to the component where the raw values haven't changed?

Thanks,
Chris

Edit: I have added some logic to the componentShouldUpdate method, to not render while it is mid-fetching. Since we display a loading indicator on the page while the data is being fetched, this cuts down on many render calls, which helps a little with the painting/blocking.",cjpete,2017-01-23 17:04:05
607,2017-01-23 17:04:05,"This is generally where memoized selector functions are useful.  When the same inputs are given, the same result object can be returned.  That's definitely helpful for cases like filtering or sorting data.

My recent blog post [Practical Redux Part 6: Connected Lists, Forms, and Performance](http://blog.isquaredsoftware.com/2017/01/practical-redux-part-6-connected-lists-forms-and-performance/) covers some of the key concepts regarding good Redux performance, and links to a number of other useful references on the topic.  ",markerikson,2017-01-23 17:04:05
606,2017-01-22 13:42:53,"Hello there,

I've just had this problem with writting my first redux app.

when I use 

`export default connect()(todoApp)`(note that todoApp begin with lowercase t)

then it just can't render anything in my page

however, when I eventually change the code to 

`connect()(TodoApp)`

it works fine.

does anyone know why this happen?
",crimsonskyrem,2017-01-22 16:34:51
606,2017-01-22 16:34:51,"This is a usage question, and should be asked on StackOverflow instead.  It's also hard to give an answer without actually seeing your code.  Please go post this question on StackOverflow, and include your code in the question.",markerikson,2017-01-22 16:34:51
606,2017-01-22 16:43:19,I'm gonna guess you're also changing the casing at the callsite? Because JSX treats tags starting with a lower as a literal html tag and tags starting with an upper as a component.,jimbolla,2017-01-22 16:34:51
606,2017-01-23 02:54:14,"@jimbolla Oh,you're right, thanks",crimsonskyrem,2017-01-22 16:34:51
605,2017-01-22 12:05:52,Produce more meaningfull message in case of receiving not a function.,pvorona,2017-01-22 16:00:06
605,2017-01-22 15:59:59,Seems reasonable.  Thanks!,markerikson,2017-01-22 16:00:06
604,2017-01-20 08:27:06,"<S_CODE_TOKEN>

It works fine with no arguments or 2 arguments..",lukeapage,2017-02-06 16:53:06
604,2017-01-20 18:17:26,"What version of React-Redux are you using?  Can you provide an example snippet that demonstrates the problem?

Also, what happens if the outer `mapState` function also requests `ownProps` as an argument?",markerikson,2017-02-06 16:53:06
604,2017-01-20 18:58:26,"5.0.1 and when you give 0 or 2 args, it succeeds, but fails with 2",lukeapage,2017-02-06 16:53:06
604,2017-01-20 19:11:54,"Hmm.  That's interesting, because if I'm reading the current source right, it _looks_ like it does an initial check against the outer function to check the arity, and if it's a factory function, does a second check against the inner function: https://github.com/reactjs/react-redux/blob/3c5c80e757c4f6e4127fb10d5b6ccd8c88aead6c/src/connect/wrapMapToProps.js#L54 .",markerikson,2017-02-06 16:53:06
604,2017-02-04 11:45:46,"Sorry for the long delay, here is what is happening..

first time through it runs: https://github.com/reactjs/react-redux/blob/3c5c80e757c4f6e4127fb10d5b6ccd8c88aead6c/src/connect/wrapMapToProps.js#L43
because there are no own props needed.

because its a factory, it hits this if which is true
https://github.com/reactjs/react-redux/blob/3c5c80e757c4f6e4127fb10d5b6ccd8c88aead6c/src/connect/wrapMapToProps.js#L52

and then it calls the proxy again, passing ownProps
https://github.com/reactjs/react-redux/blob/3c5c80e757c4f6e4127fb10d5b6ccd8c88aead6c/src/connect/wrapMapToProps.js#L55

except that the ownProps it passes is undefined, because the outer function didn't need it.

So, it does set dependsOnProps correctly and the 2nd time it calls the function it has ownProps, but the first time, it doesn't.",lukeapage,2017-02-06 16:53:06
603,2017-01-19 16:38:54,"- I dispatch a action, If the props value has not changed but it return new props.
- Next, I dispatch a action that not match, it return the prev props

the **react-redux@4.x** will call update to compute props, see the below example:

The reducer like this:

<S_CODE_TOKEN>

And do these action:

<S_CODE_TOKEN>

Find source code **handleChange**:

<S_CODE_TOKEN>

I do this case with **react-redux@5.x**, this problem has not exist.",ipluser,2017-01-19 21:11:48
603,2017-01-19 16:57:06,Curious... is there something preventing you from upgrading to v5?,jimbolla,2017-01-19 21:11:48
603,2017-01-19 21:11:48,"Sounds like he's saying this doesn't exist in 5.0, which is true.

@ipluser I appreciate the effort here, but 4.x is in bugfix-only mode. If you need this kind of behavior, switch to 5.0, which shouldn't involve any code changes on your end.",timdorr,2017-01-19 21:11:48
603,2017-01-20 02:20:55,"@jimbolla  @timdorr 

As you say, our framework depend on **react-redux@4.x**, we plan to upgrading **react-redux** to v5 and increment framework **MAJOR** version, not MINOR.

e.g.

<S_CODE_TOKEN>

I'm happy to see **react-redux@5.x**, it's nice for **compatibility**, **performance improvements** and others features.
But sometime, something isn't controlled by me, I have to think about that the framework must be stable, safe and other.

I can't promise that anything is ok if I upgrading **react-redux** to v5 and increment framework **MINOR** number.
It may bring some hidden problems, it has some risk. 

So I want to fix this issue for currently framework with **react-redux@4.x**.
And next, I will plan to upgrading **react-redux** to v5 and increment framework **MAJOR** version.",ipluser,2017-01-19 21:11:48
602,2017-01-19 08:39:59,"I have a DI container which I'm injecting into redux-thunk using the `withExtraArgument` method.
When I'm hot reloading I need to recreate the DI, which means I need to replace the argument I'm passing the middlware or simply replace all middleware definitions, but I can't think of any way to do it without recreating the entire store, which causes the following error to be thrown `<Provider> does not support changing 'store' on the fly.`

Is there a builtin way to do such a thing? or if not, what approach can you recommend for implementing such feature?

I'm using redux 3.6, react-redux 5.0.1 and react-hot-loader 3.0.0-beta.6

P.S. I hope this was the right repository to open this issue, if not let me know where should I have opened it. Thanks",iMoses,2017-01-19 14:29:17
602,2017-01-19 11:35:15,"For now I fixed it by creating my own version of applyMiddleware which adds a `replaceMiddleware` method to the created store.

I'd still appreciate any input you might have.

<S_CODE_TOKEN>

Note: In my system I prefer to pass the middlewares as an array, but this can be easily changed to accept multiple arguments in order to mimic the original `applyMiddleware` method.",iMoses,2017-01-19 14:29:17
602,2017-01-19 14:29:17,"This is a bug tracker, not a support system. For usage questions, please use Stack Overflow or Reactiflux. Thanks!",timdorr,2017-01-19 14:29:17
602,2017-01-19 16:20:56,"I tend to think of it as a feature request that makes a lot of sense.

Same as redux offers the `replaceReducer` method for hot reloading, it should also offer a builtin method for replacing middlewares for as long as reloading a different store is an unwanted behavior.

But that's me, if you disagree then keep it closed, I'd make it into a feature request though maybe not on this repository.",iMoses,2017-01-19 14:29:17
602,2017-01-19 16:33:49,"This would actually belong in the redux repo. That being said...

I've got some ideas on how to make *all* store enhancers hot-reloadable, as part of the store enhancer overhaul goal, but I'm not ready to share the details quite yet. ",jimbolla,2017-01-19 14:29:17
602,2017-01-19 16:57:42,"I'm amused to see the `replaceableMiddleware` snippet above, because I've commented a few times that I could imagine such a thing being written.  Nice to see someone actually take a stab at doing so :)",markerikson,2017-01-19 14:29:17
602,2017-01-19 17:25:03,"@markerikson Well, part of the reason why I love Redux so much is that it's very minimalistic and both understanding the internal logic and writing extensions is so easy. If need be I'll make it into a package, but I really believe that basic support for HMR should be built into Redux, that's why I initially decided to open a ticket for it.
@jimbolla You're right, it should have been a ticket for the Redux repository. When I first opened the ticket I wasn't sure about that because I thought maybe the Provider can be modified to support this feature, but after some more research and writing the snippet I provided it's clear as day that this isn't the place. Furthermore, I'd really like to see your overall solution for store enhancers, it sounds like the right approach! When you're ready, of course :)",iMoses,2017-01-19 14:29:17
601,2017-01-19 08:33:38,"Hey,

in the current implementation of shallow equal, we don't check for the key to exist in the B object.
This can lead to bug, in case some values are undefined.

For example 
<S_CODE_TOKEN>
currnetly return true instead of false.
On can check this by pulling  https://github.com/maxired/react-redux/commit/6de3fc59acf7f1b55df8c8e8f733e6d95d2ffaff 

Following #590 , I agree that it might be a good option to switch to a more robust  implementation",maxired,2017-02-17 14:46:46
601,2017-01-19 09:17:23,#591 should close this one ,maxired,2017-02-17 14:46:46
600,2017-01-16 21:04:08,I attempted to clarify some pronouns in a couple sentences to avoid confusion when sentence has multiple objects. Please let me know if I'm confusing some things.,abglassford,2017-01-16 23:48:05
600,2017-01-16 21:23:58,"Hmm.  Appreciate the PR, but yeah, I think the new phrasing is incorrect.  The idea is that when the _store_ updates, the wrapper component (which is a subscriber to the store) will be notified.  So, it's not that the _component_ updates, it's the _store_.  

To be honest, I think both paragraphs could stand to be rewritten from scratch.  I'll have to add that to my todo list.

If you can fix up your edits to clarify that it's the store updates that lead to `mapState` being re-run, I'll get this in.",markerikson,2017-01-16 23:48:05
600,2017-01-16 21:42:18,That seemed to be an easy fix. Unless I missed your point. Let me know if it's decent now.,abglassford,2017-01-16 23:48:05
600,2017-01-16 21:48:40,"Yeah, actually, let's make a couple more edits:

- Change ""If a component is specified"" to ""if this argument is specified""
- Change ""if you omit the component"" to something more like ""to skip subscribing to store updates, pass `null` or `undefined` for this argument (this applies for both `mapState` and `mapDispatch`)
",markerikson,2017-01-16 23:48:05
600,2017-01-16 22:21:23,"So, when the argument `mapStateToProps` is specified, does it subscribe a _component_ to store updates or it will subscribe _itself_ to store updates? I just want to be clear on what is actually subscribing to the store. 

*edit*

I think the next sentence answered my question: 
""Any time the store is updated, `mapStateToProps` will be called.""",abglassford,2017-01-16 23:48:05
600,2017-01-16 22:24:29,"`connect` generates a wrapper component.  If `mapState` is supplied, that wrapper component will subscribe to the store, and when the store runs the subscriber callbacks, the wrapper component will call `mapState(store.getState())`.

Dan wrote a miniature version of `connect` that illustrates the basic idea: https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e",markerikson,2017-01-16 23:48:05
600,2017-01-16 22:29:18,Gotcha. I'm going to leave it at this commit if it's sufficient. Thanks for taking the time to look at this and explain it to me!,abglassford,2017-01-16 23:48:05
600,2017-01-16 22:31:14,"One more phrasing tweak, if you could.  Let's change ""it will subscribe"" to ""the new component will subscribe"".",markerikson,2017-01-16 23:48:05
600,2017-01-16 23:48:08,"Awright, looks good.  Thanks for the help!  If you've got any other suggestions or improvements for either the Redux or React-Redux docs, please feel free to file PRs and we'll see what we can do.",markerikson,2017-01-16 23:48:05
600,2017-01-17 02:26:42,Thank you!,abglassford,2017-01-16 23:48:05
599,2017-01-08 14:49:09,"I'm not satisfied with the answer to the issue [here](https://github.com/reactjs/react-redux/issues/289).  
Also see this [SO question](http://stackoverflow.com/questions/41434177/redux-accessing-correct-item-in-object-list-in-mapstatetoprops/41528718#41528718) for the use case.

I don't want the user/developer to have to pass Id to every single nested component just because context isn't exposed.

I can't get the current Object in a list based on Id without having to pass id from the parent to every component so I can access it in ownProps which is horrible. What I have to do at the moment is create a wrapping component that uses context and pass the prop down to each component . I need access to context in mapStateToProps.

Allowing me to pass context in my library so that the developer doesn't have to pass down id to every nested component would solve this.",MartinDawson,2017-01-08 15:43:27
599,2017-01-08 15:43:27,"I don't see this happening in react-redux. The amount of complexity to support custom context props is pretty high. connect() would have to allow you to define what contextTypes you expect it to consume. Then the selector logic that looks at function argument count would have to get updated to handle 3-arg scenarios; this would have a trickle-down effect on `reselect` package which also deals with function arity. Then there's the inconsistencies in dealing with context values changing; there are no lifecycle hooks for context like `componentWillReceiveProps`. This is a significant increase in complexity.

My advice is to use `recompose's` [getContext](https://github.com/acdlite/recompose/blob/master/docs/API.md#getcontext) to expose your context value as a prop to any component that needs it.
",jimbolla,2017-01-08 15:43:27
599,2017-01-08 15:52:28,"You can solve this in userland by making your own wrapper on connect + getContext and use that in your app instead of vanilla connect. It'd look something like
<S_CODE_TOKEN>
And then `myId` would be available as a prop in your `mapStateToProps`.",jimbolla,2017-01-08 15:43:27
599,2017-01-08 16:23:36,@jimbolla I get the error getChildContext is not a function. Am I missing something?,MartinDawson,2017-01-08 15:43:27
599,2017-01-08 17:10:10,Whoops.  I put `withContext` in the example when it should  be `getContext`. This is why I shouldn't chose before coffee. ,jimbolla,2017-01-08 15:43:27
599,2017-01-08 17:41:31,"@jimbolla That worked and is exactly what I needed. Thank you so much. If you want the bounty on SO I will award it to you if you copy that answer. If not, I shall post the answer and link here.",MartinDawson,2017-01-08 15:43:27
599,2017-01-08 17:48:04,"Sure, I love fake internet points. lol.",jimbolla,2017-01-08 15:43:27
599,2017-03-18 21:54:43,"Thanks @jimbolla for this answer, it was exactly what I was looking for.  Question:  what kind of performance hit should we expect from always using props now in our `mapStateToProps` and `mapDispatchToProps`?",neurosnap,2017-01-08 15:43:27
599,2017-03-18 23:36:56,"@neurosnap : erm... ""performance hit"", as compared to _what_? :)",markerikson,2017-01-08 15:43:27
599,2017-03-19 00:08:11,"Not using `props` in `mapStateToProps` and `mapDispatchToProps` travels a different code path for optimizations.

https://github.com/reactjs/react-redux/blob/master/src/connect/wrapMapToProps.js#L20",neurosnap,2017-01-08 15:43:27
599,2017-03-19 00:21:41,"That's just whether your `map*` functions will be called _only_ when the store updates, or also any time props from a parent component change.  You almost never want `mapDispatch` to depend on props.  It's _fairly_ common to have `mapState` depend on props.

You may want to read through my post on performance-related concepts: http://blog.isquaredsoftware.com/2017/01/practical-redux-part-6-connected-lists-forms-and-performance/ .",markerikson,2017-01-08 15:43:27
599,2017-03-19 02:36:45,"Thanks for the info, I'll definitely give that blog post a read.

This might not be the best place to discuss this so I apologize in advance but I'm prompted to ask: what's the issue with `mapDispatch` depending on props?",neurosnap,2017-01-08 15:43:27
599,2017-03-19 02:58:52,"You'd generally be re-creating functions each time.  That can cause unnecessary re-rendering down the component tree, as well as the expense of actually creating those functions again and again.

It's one of several reasons why I prefer to use the object shorthand version of `mapDispatch`, so that I'm not even actually declaring a literal `mapDispatch` function: http://blog.isquaredsoftware.com/2016/10/idiomatic-redux-why-use-action-creators/ .",markerikson,2017-01-08 15:43:27
598,2017-01-06 18:58:23,Updates license with current copyright year. ,jamesongamble,2017-01-06 19:23:36
598,2017-01-06 19:23:40,Thanks!,markerikson,2017-01-06 19:23:36
597,2017-01-06 17:47:23,"_This might be expected behavior- in this case I'd really appreciate explanation for it._

## tl;dr;
For SSR parent component render is not triggered if child updates shared state. Client browser renders as expected.   

## Issue details 
we have App.jsx - all it does is adding no-scroll class for container when Modal window is rendered.
<S_CODE_TOKEN>
Modal is using componentWillMount to dispatch state change 

<S_CODE_TOKEN> 
Somewhere in app we use  `<Modal>stuff</Modal>`. Modals have url and can be directly refreshed in browser like `/profile/modalStuff` using RR v4.   
We have SSR and when page source is viewed we can see that `state.modal.visible === true` - meaning that componentWillMount was triggered and redux state got updated. 
Client in this case renders `no-scroll` class as expect. At the same time server does not have this class name added. Causes react warning. 

also if you look at server console you will see that 
<S_CODE_TOKEN>
instead of expected 1 false and 2 true. 

Client side on other hand when opening modal in browser will log false and true as expected. 
It looks like state change done in componentWillMount never triggered rerended of App.jsx on server while it does so on client. 

calling render on server side again for 2nd time causes App to have correct class again. 

Any thoughts on this? 

### Version 
React 15.4.1
react-redux 5.0.1 

",dlebedynskyi,2017-02-17 14:50:53
597,2017-02-17 14:50:53,"You can't dispatch from cWM because that will change the state the render is using, which is a synchronous operation on the server. It can't rewind back and update things it's already rendered. You'll have to ""preload"" your state on the server by determining what actions need to be dispatched, resolving them (if they're async), and *then* going on to render.

#210 might be helpful here. ",timdorr,2017-02-17 14:50:53
596,2017-01-05 12:25:03,"I am using Redux as a state container for my web application, my challenge is to develop a dynamic React component  which emit the aynch action using redux to fetch data from the server bind the store state to my component props. 

Example:

<S_CODE_TOKEN>
 
I am having my state.home as global, But the good practice is to keep the state local to the component when the state is not required in global. 

Which is the alternate way to have a dynamic React Component with async action and have a state only at component level not in global ?",arulprasad-in,2017-01-05 17:05:07
596,2017-01-05 17:05:07,"This is a usage question, and should be asked on Stack Overflow instead.

You may also want to read some of the articles in [Redux Architecture - Encapsulation](https://github.com/markerikson/react-redux-links/blob/master/redux-architecture.md#encapsulation-and-reusability).",markerikson,2017-01-05 17:05:07
595,2017-01-05 09:06:47,"Hi,

I use 'create-react-app' and 'react-redux-starter-kit'. Every is great, but one thing is actually not working.

> https://github.com/davezuko/react-redux-starter-kit

Let met show some samples : 

This is how I create my store : I add custom reducers inside and it's work well.

https://github.com/davezuko/react-redux-starter-kit/blob/master/src/main.js


The app main : 

<S_CODE_TOKEN>

The app container : 

<S_CODE_TOKEN>

My problem is that I'm not able to get store inside my childs component.

<S_CODE_TOKEN> 


It's pseudo code.
The map with props works, but if I'm right, i'm able to dispatch actions with store because I connect store with 'connect'. And btw my store is correctly provided by the provider.

So, like in the exemple, I'm able to dispatch action only because I imported my store. I know it's not the right way ....

Any ideas ?

Thanks a lot.

",GreGGus,2017-01-05 17:05:19
595,2017-01-05 12:45:35,"Ok my bad.


<S_CODE_TOKEN>

And it's working without import store :)

You can close this issue.",GreGGus,2017-01-05 17:05:19
594,2017-01-03 19:15:20,"We can currently call connect with an object argument for mapDispatchToProps, where each function in the object is assumed to be an actioncreator.  Could a similar option be available for mapStateToProps, where it would be assumed that each function in the object would be a selector?  This could then be used as, for example:

<S_CODE_TOKEN>

I am currently achieving this with the following:

<S_CODE_TOKEN>
",alsiola,2017-01-04 04:00:11
594,2017-01-03 19:41:55,See #323 ,jimbolla,2017-01-04 04:00:11
593,2017-01-03 15:55:10,"Hello!

Consider a use case: a block with a text inside (text is fetched from store). When text changes - block smoothly goes away and the other block appears.

Pseudo code for better illustration:
<S_CODE_TOKEN>

What happens when state.text changes?
1) New `Block` appears, because `key` is changed; `componentWillEnter` starts the animation for it. Great.
2) Old block gets *re-rendered* and `componentWillLeave` starts the animation for it.
3) When first animation finishes re-render happens again.

The issue is the step no 2: old element should disappear with the old data, but due to re-render it changes his content to a new one from `store`, so user see this:

1) `store.text = 'Foo'`. User see one Block with text 'Foo' on the screen.
2) `store.text = 'Bar'`. User see two Blocks, both with text 'Bar' on the screen. One block is disappearing.
3) Animation finishes, user see one Block with text `Foo` on screen.

I believe using transitions is pretty common nowadays and this should be a common issue, but I was surprised I couldn't find anything related.
Best idea I can think is to ""freeze"" props on the element when it's about to leave (or passing previous `store`, so it re-renders with previous data), but it feels hacky to me.

What's the best way to solve this problem?",shlajin,2017-02-17 02:39:44
593,2017-02-17 01:55:14,"@shlajin I'm not sure this is a redux issue. I believe React TransitionGroup relies on the key internally, so `key` should be unique at all times. Try this:
 <S_CODE_TOKEN>",toddsby,2017-02-17 02:39:44
593,2017-02-17 02:39:44,@toddsby is correct. This is an issue dealing with TransitionGroup. I'd also recommend giving react-motion a look-see too.,timdorr,2017-02-17 02:39:44
592,2016-12-31 22:09:29,"I have a connected component near the root of my app that looks like this

<S_CODE_TOKEN>

i added the areMergedPropsEqual option because i was worried every redux change would trigger a rerender of the entire app unnecessarily. 

The problem is that areMergedPropsEqual seems to be ignored. I put a breakpoint in there and it never gets hit. and there's no console logs.

Is it possible that the option is being ignored?",bdwain,
592,2016-12-31 22:27:04,"Also, after thinking about alternatives, can't you just use shouldComponentUpdate in the component being wrapped to function the same as areMergedPropsEqual? It worked to prevent the extra rerenders and I can't really see what areMergedPropsEqual provides that you can't get with shouldComponentUpdate. Except maybe avoiding an expensive componentWillReceiveProps.",bdwain,
592,2016-12-31 23:01:44,"One of the overall goals of the v5 rewrite is to do as much work as possible in selectors, and only force updates in a component once it's confirmed that the data has really changed (as opposed to v4 and earlier, which used React's `setState()` to queue up update checks after a store notification, and actually did the real checking in the wrapper component's `render()` method.)

Two thoughts on this issue:

First, the code definitely starts by using a default `shallowEqual` function as the `areMergedPropsEqual` implementation, but it looks like it should use a function you provide if given.  Not sure why it wouldn't be getting called in your case.

That said, why are you actually trying to supply your own function in the first place?  I'm kinda confused by your example in a couple ways.  The point of a `mergeProps` comparison is to check the output of combined results from `mapState` and `mapDispatch`, not to actually look at the `children` prop passed in by React.  I also think you may be overly concerned about perf and re-rendering.  Are you having actual performance problems in your app?  Have you done any benchmarks or measuring to see what parts of the code may be bottlenecks, if any?",markerikson,
592,2016-12-31 23:08:23,"Hi.
I'm not totally sure that the optimization is necessary. But my project often runs on webviews in cheap slow tablets, and when it's slow, it's really slow. Either way though, this looked like a bug, so I wanted to bring it to your attention.

I was mostly just worried about putting the entire state object in the results from mapStateToProps, which seemed like it would trigger a rerender of my component (which is at the root of the app) every state update, and that that would trigger rerenders of every component below it, which had the potential to be slow. This just seemed like it would be a really easy way to prevent that from being an issue in the first place, and with little risk.",bdwain,
592,2016-12-31 23:12:28,"If you're worried about that, the recommended approach is to connect _more_ components.  That way, each of them rely on more granular pieces of the store state, and will need to re-render less often.  See http://redux.js.org/docs/faq/ReactRedux.html#react-multiple-components and http://redux.js.org/docs/faq/Performance.html#performance-scaling for some more info on the topic.",markerikson,
592,2016-12-31 23:32:06,"Yea I am doing that for the most part. I think with what i'm doing, removing this component and connecting every component that used this would just be a lot of extra boilerplate because lots of components will use the method this component provides (it's an analytics method).

So I was looking for a way to provide the context method that exposed the state without triggering so many updates if possible. areMergedPropsEqual was probably a weird way of doing that. shouldComponentUpdate seems to work, even though i agree that normally this would just make more sense to connect the child components.",bdwain,
592,2016-12-31 23:35:39,Also thanks for your help @markerikson. If you want I can try to come up with a gist that has a reproduction of the areMergedPropsEqual method not being called. Though all of the key info is in my snippet in the original comment. ,bdwain,
592,2016-12-31 23:41:33,"Depending on how the analytics piece works: would it make more sense to actually put it in React context, or create a Redux middleware that uses it?",markerikson,
592,2016-12-31 23:46:21,There are optimizations that will avoid the call when it knows it can. I'm on mobile otherwise I'd point them out ,jimbolla,
592,2016-12-31 23:47:14,"The analytics piece is on the react conext. Here's the method exposed on context.

<S_CODE_TOKEN>

basically there are a lot of ""dataTypes"" which are just functions that format the data you pass and pull in other data from the state. Which data they pull in from the state is up to the individual data type, so in order to do this generically it seemed the only way was to pass the whole state object to the datatype.",bdwain,
592,2016-12-31 23:49:53,"and if i was to connect every child component instead of the one root component, all of the children components would still need to get the entire state object from mapStateToProps to pass to dataType, or they would have to know what pieces of data the dataType pulled from the state, and that would mean repeating that everywhere an individual dataType was used.",bdwain,
592,2016-12-31 23:50:18,@jimbolla won't shouldComponentUpdate do that? It seems to work in my specific case at least.,bdwain,
592,2017-02-14 04:18:42,"I'm running into the same issue. I'm passing in an options object with **pure:true** 
as well one of the allowed functions that simply logs to console. The console log never runs

<S_CODE_TOKEN>

",vevo-var-nazari,
592,2017-03-13 22:09:28,"`areMergedPropsEqual` is never called if you use the default for `mergeProps` because the answer will always be false in that case. Since `mergeProps` is only called if `stateProps`, `dispatchProps`, or `ownProps` has changes, the default `mergeProps` will always produce an object that has different values. Avoiding that extra shallow compare is a significant perf boost.

Should probably update the API docs to clarify this.

",jimbolla,
591,2016-12-29 16:05:29,"Fixes #590

Also handles things like NaN.",timdorr,2017-02-17 14:46:27
591,2016-12-29 16:21:57,"We should perf test this, since it's called so much. It's useful to remember that we're not comparing any 2 rando values, but specifically props objects coming from react. I think we can make certain assumptions, like that they're objects, and typically (99% of time?) that the # of props is going to be the same between the 2 args. So the algorithm can optimize for things like that.",jimbolla,2017-02-17 14:46:27
591,2016-12-29 16:36:07,"True, but I think the effects are minor. Given this is a hot path, it's going to get optimized pretty heavily. I think the only thing to do is to use the for in loop form instead, as v8 [has specific optimizations for that with a `hasOwnProperty` check](https://github.com/v8/v8/blob/master/src/runtime/runtime-forin.cc). Though it probably won't trigger that with the equality check in there. Maybe if we unroll that into another `if`?",timdorr,2017-02-17 14:46:27
591,2016-12-29 21:40:40,"If the perf of the fbjs version is fine, then maybe we should just import it from fbjs. fbjs is a dependency of react, so react-redux has a dependency on it indirectly already.",jimbolla,2017-02-17 14:46:27
591,2017-02-17 14:46:24,"AFAIK, `shallowEqual` hasn't changed in quite some time in fbjs. I'm going to merge this as-is and we can look at switching it to an import at a later date.",timdorr,2017-02-17 14:46:27
591,2017-02-17 17:04:51,"Works for me. This should be fast enough for normal usage. And if someone really needs a faster implementation than the fbjs, they have the power to override it in the options.",jimbolla,2017-02-17 14:46:27
591,2017-02-17 17:07:31,I wouldn't recommend depending on anything from `fbjs` directly.,gaearon,2017-02-17 14:46:27
591,2017-02-17 17:07:36,(Copying is fine 😄 ),gaearon,2017-02-17 14:46:27
591,2017-02-20 01:32:44,"This seems like it happens often; `recompose` just has `fbjs` as a dependency for shallow equal, and I think `react-side-effect` used to do that.  Do you think `fbjs` could move their shallow equal implementation into another library?  Copying doesn't seem like the best solution, either.",wtgtybhertgeghgtwtg,2017-02-17 14:46:27
590,2016-12-29 07:56:34,"<S_CODE_TOKEN>

it's a misunderstanding or there are some reasons for this?",LiuuY,2017-02-17 14:46:27
590,2016-12-29 15:55:30,"Well first off, you shouldn't be adding to primitives, as that affects the entire system and can have unexpected side effects.

We can probably swap out for [fbjs's version](https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js) instead, since it covers these edge cases and might be a bit faster too.

",timdorr,2017-02-17 14:46:27
589,2016-12-28 21:58:38,Reported here: https://github.com/davidkpiano/react-redux-form/issues/592,jimbolla,2017-02-06 18:58:51
589,2016-12-28 22:10:57,"Thanks @jimbolla  - the general idea is that this should work:

<S_CODE_TOKEN>

If I'm not mistaken, `<Bar>` should subscribe to its `ownStore` as if it were its own `<Provider>` (because it essentially is) instead of depending on parent subscriptions.",davidkpiano,2017-02-06 18:58:51
589,2016-12-28 22:24:06,"Correct. I think there's an edge case to this edge case I'm not covering so I'm gonna keep working on it, but this should be better.",jimbolla,2017-02-06 18:58:51
589,2016-12-28 23:41:59,OK. Now I think I covered the edge cases correctly.,jimbolla,2017-02-06 18:58:51
589,2016-12-30 02:22:49,@timdorr Thoughts on pushing a patch release for this and the other handful of fixes we have waiting to go out?,jimbolla,2017-02-06 18:58:51
589,2017-01-17 15:45:35,Any updates on this? Will it be able to be merged in soon? 🙏 ,davidkpiano,2017-02-06 18:58:51
589,2017-01-31 04:33:55,"@jimbolla , @timdorr : following up on this at @davidkpiano 's request.  It's Jim's code thus far, and Tim's been cutting releases (something I should go figure out for myself at some point, but don't have time to dig into atm).  Are we good to go on this?",markerikson,2017-02-06 18:58:51
589,2017-01-31 17:03:15,"I haven't had time to really dig into this one. It's a non-trivial change, hence the hesitation to just blindly merge it in. If anyone else wants to review, I trust them to point out any problems.",timdorr,2017-02-06 18:58:51
589,2017-01-31 19:41:09,"Yeah, that's actually how I feel about this myself at the moment :)",markerikson,2017-02-06 18:58:51
589,2017-02-05 17:05:17,@timdorr @markerikson It might be easier to review the 2 commits separately. The bugfix one is pretty small and the refactor one just moves a few things and adds some more comments.,jimbolla,2017-02-06 18:58:51
589,2017-02-06 18:58:48,"OK, LGTM. In the future, I'd submit refactors as either separate PRs or just directly onto master. ",timdorr,2017-02-06 18:58:51
589,2017-02-14 14:52:55,@timdorr please release this fix,anru,2017-02-06 18:58:51
589,2017-02-28 02:17:43,"@timdorr The `react-redux 5.0.3` update breaks HMR with latest `react-hot-loader 3.0.0-beta.6`.

Basically after a hot-reload the state is somehow broken.

This worked fine in `react-redux 5.0.2` :(


repo to reproduce: https://github.com/BerndWessels/react-redux-rr4-wp2-rhl3.git

Work fine with `react-redux 5.0.2` but broken when you upgrade to  `react-redux 5.0.3`",BerndWessels,2017-02-06 18:58:51
588,2016-12-27 12:13:00,"Similar to the issue  #564 .

Just like in the above mentioned issue, I have a hidable form. The difference is: I have a ParentContainer that passes the **visible** prop to the ConnectedParent. Yet everything is fine unless I hide the Form dispatching asynchronously. In this case I get a warning: 

> setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Connect(Form(Form)) component.

I'm sorry, but i can't provide a clonable example. Some code to reproduce this bug:
<S_CODE_TOKEN>

Corresponding reducer:
<S_CODE_TOKEN>
Use the ConnectedParentContainer component and the reducer in your app.

Steps to reproduce:
1) Click ""show"" button.
2) Click ""hide with timeout"" button.
3) Experience the Warning.",osigum,2016-12-30 22:48:01
588,2016-12-30 17:59:42,@osigum Can you provide more details? What does you store creation look like? What does your top-level component look like? Are you using the latest versions of react/redux-form/etc? There's not quite enough here to troubleshoot without making assumptions.,jimbolla,2016-12-30 22:48:01
588,2016-12-30 22:48:01,"I was able to repro the bug above. I refactored out redux-form and ended up with this:
<S_CODE_TOKEN>

It appears #579 (fixed #577) also fixes this one.
",jimbolla,2016-12-30 22:48:01
587,2016-12-25 16:57:49,"I want to write in the follow style.

<S_CODE_TOKEN>

thank you.",honpery,2016-12-26 02:57:21
587,2016-12-26 02:57:21,"The example given in #89 , which you already commented on, should work just fine.",markerikson,2016-12-26 02:57:21
587,2016-12-26 05:11:44,"sorry, It isn't like to mine, I want to follow:
<S_CODE_TOKEN>",honpery,2016-12-26 02:57:21
587,2016-12-27 01:36:29,"Yes, and the code in the other issue will do that.  Example:

<S_CODE_TOKEN>

The wrapped component will now have `this.props.xhttp.list`, etc.",markerikson,2016-12-26 02:57:21
586,2016-12-25 16:10:48,"Problem:
I have Parent and Child components. When React three is changed and must be re-rendered, if I connect Child component to react-redux, is not handle render() method on Child when Parent render method is handled. Is re-rendered only when I pass a prop with unique value from parent:

`<Child />` - not re-rendered.
`<Child prop={unique_value} />` - re-rendered.

If Child not connected to react-redux, is re-rendered in both cases.

I think if you look at [screens](https://photos.google.com/share/AF1QipNkp2lV8fsYpSPqtPAi-NTOdl6eepTVbgsyNQHUvo0SoyAq2GsxbhUJyOOvYRO56Q?key=aWJNblhSb2dtdGZHNkFDZlVEeUNyVVRVMktfUHJ3), you understand.",ideal-life-generator,2016-12-26 02:56:14
586,2016-12-26 02:56:14,"Ah... sorry, no, I'm afraid I don't understand.  Also, this sounds like a usage question, not a bug report.  I'd encourage you to post a question on Stack Overflow - you're likely to get a better answer there.",markerikson,2016-12-26 02:56:14
586,2016-12-26 09:27:30,"When component ""connect""-ed, ""render"" stop handling.

[Screenshots](https://photos.google.com/share/AF1QipNkp2lV8fsYpSPqtPAi-NTOdl6eepTVbgsyNQHUvo0SoyAq2GsxbhUJyOOvYRO56Q?key=aWJNblhSb2dtdGZHNkFDZlVEeUNyVVRVMktfUHJ3).",ideal-life-generator,2016-12-26 02:56:14
585,2016-12-22 14:31:11,"Context

<S_CODE_TOKEN>

In this context, If my component gets a prop updated other than `foo` then no render occurred.
( http://codepen.io/DevSide/pen/RoOjxP )

But in most cases, I'd like to just avoid a  `mapStateToProps` call and eventually make the `shouldComponentUpdate` of my component decide about re-rendering. 

Is there any perspective to get this kind of behavior ? (using memoized selectors apart)
",DevSide,2016-12-23 04:07:26
585,2016-12-22 17:51:02,"Overriding `areStatesEqual` and `areOwnPropsEqual` will bypass the whole render cycle if they both return true, so that's not going to work for your use case. A memoized selector *is* the appropriate place to get that behavior.",jimbolla,2016-12-23 04:07:26
584,2016-12-21 17:43:44,,jimbolla,2016-12-23 04:29:36
584,2017-01-09 14:07:45,thx..i just got into this problem. That's awesome,ZhengHe-MD,2016-12-23 04:29:36
584,2017-01-09 14:33:36,and when will next patch be released? I need this in my project😅😍,ZhengHe-MD,2016-12-23 04:29:36
584,2017-01-10 01:05:07,@timdorr Any thoughts on pushing out a patch release?,jimbolla,2016-12-23 04:29:36
584,2017-01-10 16:40:04,"Sorry, I've been dealing with a house full of sick people (myself included). I'll try to get something out soon-ish.",timdorr,2016-12-23 04:29:36
583,2016-12-21 16:12:05,"This pull request changes the suggested version for React Native users to be aligned with the current major version of `react-redux`.

Not really an ""issue"", so I didn't make one :kissing_heart: ",selbekk,2016-12-21 17:25:21
583,2016-12-21 17:25:17,Thanks!,timdorr,2016-12-21 17:25:21
582,2016-12-21 14:39:49,"I have a boolean value inside a reducer and the `mapStateToProps` is not always called when the value changes.

Here's the log from 4.4.6:
<S_CODE_TOKEN>

But here's the one from 5.0.1:
<S_CODE_TOKEN>",tleunen,2016-12-23 04:29:38
582,2016-12-21 15:37:03,"I wonder if this is related to an ""app"" within another app and maybe the relations between the stores are wrong since the upgrade?",tleunen,2016-12-23 04:29:38
582,2016-12-21 16:02:11,"Can you post a sample project that demonstrates this issue?  Your second comment makes it sound like your setup is more complicated than ""just"" a store and some components.",markerikson,2016-12-23 04:29:38
582,2016-12-21 16:16:43,"I can try to create a new project.

But basically it's something like this:

<S_CODE_TOKEN>

With MainApp being:
<S_CODE_TOKEN>
OtherApp:
<S_CODE_TOKEN>",tleunen,2016-12-23 04:29:38
582,2016-12-21 16:41:48,"Ah... hold on.  So you're using _two_ different `<Provider>` instances, with the second nested inside the first?  Are you updating the first store, but expecting a component inside the second `<Provider>` to respond to that update?  Because if so, I really don't think that's a supported or expected scenario.",markerikson,2016-12-23 04:29:38
582,2016-12-21 16:46:11,"The inner `Provider` is shadowing the `store` context property, but not `storeSubscription`, so the connected components inside the inner `Provider` are incorrectly subscribing to store changes from the outer `Provider`'s store. Easy enough to fix by changing `Provider` to also shadow `storeSubscription`, but it does beg the question ""How much support does react-redux offer for multiple stores?""",jimbolla,2016-12-23 04:29:38
582,2016-12-21 16:53:59,"> Are you updating the first store, but expecting a component inside the second <Provider> to respond to that update?

Nop. Everything inside the ""mini app"" is self contained. So something inside send an action and update its own reducer. I only expect the mini app to be updated. The ""parent app"" has nothing to do with that.

I'm making another small project to reflect the issue. Stay tuned.

@jimbolla Maybe it's not the usual use case, but I'm having the issue because my ""mini app"" can live as a standalone application, but also embedded inside another app.
",tleunen,2016-12-23 04:29:38
582,2016-12-21 17:21:59,See this project: https://github.com/tleunen/react-redux-issue582,tleunen,2016-12-23 04:29:38
582,2016-12-21 17:44:42,"@jimbolla : I'd say that if we can fix it without much hassle, then we might as well go ahead and do so.  Sounds like it's ""just"" a matter of adding a couple more entries to context, right?",markerikson,2016-12-23 04:29:38
582,2016-12-21 17:45:54,Yep. Just submitted PR #584 to fix this use case.,jimbolla,2016-12-23 04:29:38
581,2016-12-17 10:32:04,"I am guessing this is part of more complex and already on-going discussions related to best-practice (such as #278 (?)), but I am rather curious how you guys deal with this sort of scenario:

Let's say I have multiple database connections and multiple `HOC`s referencing each. Now a lot of questions are popping up. I am not sure where to even place the database instances, since I am rather uncomfortable placing complex objects of unknown structure in my stores, since some database connection objects are rather complex and even contain cache (`firebase`, the DB that I am currently working with, being such a candidate). Since [one major approach of dealing with `firebase`](https://github.com/tiberiuc/redux-react-firebase) seems to [mirror all that cache into the store](https://github.com/tiberiuc/redux-react-firebase/blob/master/source/reducer.js), it would certainly not be a smart move to have both copies of the same data in the store, for so many reasons.

This makes me think that all database connection/app objects (which, again, also might contain its cache) should be managed separately in some sort of global variable, parallel to the store, as we would have done in the good old days anyway. That of course is quite evil.

I am wondering: Does anyone have a more specific solution to this scenario?

1. Where should I store the database connection objects? store? global? any other options?
2. Should I create separate `init` and [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) actions for each connection, or should there only be one set of actions, each requiring the database connection as first argument? (this issue specifically seems to be covered by #278, but I am curious about current real-world scenarios nonetheless)
3. Should each action be passed individually or would it be Ok to pass a sort of ""manager"" or ""service"" that is responsible for and provides all actions that can be performed on one complete path (or table)?",Domiii,2016-12-18 02:51:40
581,2016-12-17 17:57:44,"The standard approach for managing ""connection""-type objects, such as websockets, is to put them in middleware.  That way they have access to actions coming through the dispatch pipeline, and can dispatch actions themselves.",markerikson,2016-12-18 02:51:40
580,2016-12-16 18:51:38,"I just noticed that it was missing.

(Sorry for not having opened an issue before opening this pr, but i think this is quite straightforward)
",nicolo-ribaudo,2016-12-16 19:39:50
580,2016-12-16 19:39:54,Thanks!,markerikson,2016-12-16 19:39:50
579,2016-12-15 14:24:44,storeSubscription context object is lost when a component don't have a mapStateToProps,jimbolla,2016-12-15 17:21:30
578,2016-12-15 13:17:37,"Hi,

Currently i'm having some problems after updating the package.json of my app from 
`""react-redux"": ""5.0.0-beta.3"",`
to
`""react-redux"": ""5.0.1"",`

The thing is, after I update this everything seems to run fine and without any problems in my localhost, but the app fails to compile in Heroku.

After rolling back to the beta version everything works fine at heroku again.

Maybe the problem isn't with react-redux and it's on heroku part, but since this is the only change made I think it was worth mentioning it here.",fabiozaffani,2016-12-28 23:11:08
578,2016-12-15 13:38:19,What's the error?,jimbolla,2016-12-28 23:11:08
578,2016-12-15 14:09:40,"<S_CODE_TOKEN>
By changing the react-redux version it builds just fine.

If needed, i can upload the entire stack trace from node. ",fabiozaffani,2016-12-28 23:11:08
578,2016-12-15 14:15:02,"Well that's not super useful. Could you try beta2, beta3, rc1, rc2 to narrow down when this error started?",jimbolla,2016-12-28 23:11:08
578,2016-12-15 14:15:57,Or maybe the whole stack so that it's clearer what exactly is failing. :-),gaearon,2016-12-28 23:11:08
578,2016-12-21 16:49:36,@fabiozaffani What is your current status with this?,jimbolla,2016-12-28 23:11:08
578,2016-12-28 23:11:08,Closing due to lack of feedback. I haven't heard of anyone else with a similar problem.,timdorr,2016-12-28 23:11:08
577,2016-12-15 04:28:54,"Hi, 

If I have the following components: 

<S_CODE_TOKEN>

Because, the middle component has no mapStateToProps, the value of shouldHandleStateChanges will be false in connectAdvanced and getChildContext() will put undefined as the storeSubscription value sent to the Child component.

This cause my application to have the following warning, when an action cause some components to be unmounted: 
`Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Connect(Child) component.`

I was not able to reproduce it in a separated project, but it fix the problem if I either put an ""if"" inside the  getChildContext function of the connectAdvanced component: 
<S_CODE_TOKEN>
or if I put a function returning an empty object as the first parameter to connect.

Note that I tested it in react-redux 5.0 and 5.0.1 and this was working before in 4.X.",ericm546,2016-12-15 17:21:33
577,2016-12-15 05:11:25,"Good catch. It should actually be
<S_CODE_TOKEN>
I think. I'll have to test this tomorrow.",jimbolla,2016-12-15 17:21:33
577,2016-12-15 06:02:56,"Awww.  Why couldn't people find these _before_ we released 5.0.0 final?  :(

Thanks for the report, @ericm546 .  Appreciate it!",markerikson,2016-12-15 17:21:33
577,2016-12-15 07:07:59,"jimbolla: That fixes the bug on my project. Thank you for being so quick :)

Edit: oops, I closed the ticket by mistake.",ericm546,2016-12-15 17:21:33
576,2016-12-14 19:06:30,[Prior conversation](https://github.com/reactjs/react-redux/pull/416#pullrequestreview-12930768),jcready,2016-12-29 15:56:43
576,2016-12-14 19:09:08,Can you run some perf benchmarks just to be sure it's faster? You know that old saying about what happens when you ASSUME.,jimbolla,2016-12-29 15:56:43
576,2016-12-17 05:48:17,I'm more concerned of the correctness of `shallowEqual` in `react-redux`. There are a few subtle ways it could fail right now. I think it would be best to copy [`shallowEqual` from `fbjs`](https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js).,appden,2016-12-29 15:56:43
576,2016-12-17 16:44:25,I agree with @appden here. For instance `shallowEqual` in react-redux doesn't account for `NaN`. If an object contained any `NaN` value then `shallowEqual` would always return `false`.,jcready,2016-12-29 15:56:43
576,2016-12-29 15:56:43,I'm going to close this out and we can switch over to the fbjs version. It seems to cover more edge cases and might even be faster in common cases for react-redux.,timdorr,2016-12-29 15:56:43
575,2016-12-14 18:33:35,"Hi,

I've got a container that is mapped to some state:

<S_CODE_TOKEN>

And I've got some state that is defined by `combineReducers` structure:

<S_CODE_TOKEN>

I want to mount two instances of `Container`, that are mapped to two different properties of state (`propA` and `propB`) without rewriting `Container`.

After some experiments I and my colleague come to some implementation like this:

<S_CODE_TOKEN>

Is it a proper implementation? Is there any better way to do this with `react-redux`?",verkholantsev,2016-12-14 19:22:58
575,2016-12-14 18:56:35,"Yeah, the ""multiple independent instances of a connected component"" scenario can get a bit complex.  There's been a lot of discussion on the topic, and there's a bunch of different libraries people have built to try to help with it.  Let me point you to some references.

I have a bunch of articles on Redux and encapsulation in my links list, at https://github.com/markerikson/react-redux-links/blob/master/redux-architecture.md#encapsulation-and-reusability .  In particular, there's a repo with discussions on various solutions to the ""arbitrary list of counters"" sample problem at https://github.com/slorber/scalable-frontend-with-elm-or-redux .  Also, my Redux addons catalog has a page listing various ""per-component state""/""encapsulation""-type libraries at https://github.com/markerikson/redux-ecosystem-links/blob/master/component-state.md .  

I haven't specifically used any of the libraries in that list myself, but just to pick three that seem interesting-ish, you might want to look at https://github.com/threepointone/redux-react-local , https://github.com/epeli/lean-redux , and https://github.com/eloytoro/react-redux-uuid .",markerikson,2016-12-14 19:22:58
575,2016-12-14 18:56:50,"I'm not a fan of shadowing the store to only expose a fragment of the store. I feel like that gets you in trouble as soon as Container starts using a component that also connects to the store but expects the full store state.  I'd prefer to do something like:
<S_CODE_TOKEN>
and then make Container's mapStateToProps use `propName` to pluck from state.
",jimbolla,2016-12-14 19:22:58
575,2016-12-14 19:11:05,"@jimbolla If you have some complex containers, that connect some components on different levels of result tree, the scenario with `<Container propName=""propB""/>` suggests passing `propName` from outer component to inner component. `Provider` component is really great thing because it passes `store` in tree context. I think that passing `propName` is a step back in this circumstances.

@markerikson Isn't it a good decision to add some component to `react-redux` (just like `Provider`) that makes this context and store manipulations?",verkholantsev,2016-12-14 19:22:58
575,2016-12-14 19:22:58," @verkholantsev : there's too many different potential use cases out there to try to implement things here in `react-redux`.  That's part of why there's so many different third-party libraries.  There was actually a good article just today on a related topic, entitled [""Libraries shouldn't support everything""](http://staltz.com/libraries-shouldnt-support-everything.html).

That's not to say that it's _impossible_ to implement some kind of ""isolation"" approach in `react-redux`, or that it's an ""absolute never"" that such a thing would be implemented, but I definitely don't see us adding anything like that in the near future.",markerikson,2016-12-14 19:22:58
574,2016-12-14 15:48:53,"So, I was upgrading one of our packages that use the UMD build, and noticed that the output was renamed in [this commit](https://github.com/reactjs/react-redux/commit/746c4506ba705e286cf15807096b76958282b5b8#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R11)

It's a little confusing for react-redux to just be called redux. I kind of feel it was just an oversight.

Any thoughts?",Phoenixmatrix,2016-12-14 17:21:46
574,2016-12-14 16:48:31,I'm guessing that was a mistake. Want to submit a PR?,jimbolla,2016-12-14 17:21:46
574,2016-12-14 16:56:08,"Yup will do, just wanted to be sure it wasn't intentional first.",Phoenixmatrix,2016-12-14 17:21:46
574,2016-12-14 16:58:41,"@btd, Any insight on this?",jimbolla,2016-12-14 17:21:46
574,2016-12-14 17:02:50,@jimbolla looks like just copy paste mistake. Sorry.,btd,2016-12-14 17:21:46
574,2016-12-14 17:20:07,I'll get this fixed up now and push out a 5.0.1 (we need that anyways for the HMR fix).,timdorr,2016-12-14 17:21:46
574,2016-12-14 17:24:30,@timdorr thanks 👍,btd,2016-12-14 17:21:46
574,2016-12-14 17:27:29,Published! https://unpkg.com/react-redux@5.0.1/dist/react-redux.js,timdorr,2016-12-14 17:21:46
574,2016-12-14 18:13:30,thanks a bunch!,Phoenixmatrix,2016-12-14 17:21:46
573,2016-12-14 13:59:40,"Tried the new version against react-native 0.38.1 (react 15.4.0-rc.4), but no joy

<img width=""369"" alt=""screen shot 2016-12-14 at 11 57 58"" src=""https://cloud.githubusercontent.com/assets/384959/21184684/b7ef164e-c1f4-11e6-855f-ddb639a7ac7e.png"">
",mschipperheyn,2016-12-14 16:02:01
573,2016-12-14 14:28:05,We're gonna need more details.  Connect definitely defines childContextTypes.,jimbolla,2016-12-14 16:02:01
573,2016-12-14 14:51:54,"Ok, what kind of details do you need? I can give you some of my code setup:

I noticed that NavigationContainer defines a childContextTypes of its own. Perhaps it overwrites the react-redux setting instead of merging it?

index.ios.js
	
	import './app/dev/Reactotron';
	import { AppRegistry } from 'react-native';
	import Root from './app/App';

	AppRegistry.registerComponent('Ology', () => Root);

	

App.js

	
	import React from 'react';
	import { Provider } from 'react-redux';
	import { MenuContext } from 'react-native-popup-menu';
	import UIContainer from './modules/navigation/components/UIContainer';
	import routez from './resources/routez';

	import { styles } from './MSA';

	import configureStore from './store/configureStore';
	const store = configureStore();

	export default class Root extends React.Component {

		render() {
			return (
		  <Provider store={store}>
			  <MenuContext style={styles.stretch}>
				  <UIContainer
					  routes = {routez}
				  />
			  </MenuContext>
		  </Provider>
			);
		}
	}
	

configureStore.js
	
	import { createStore, applyMiddleware, compose } from 'redux';
	import thunkMiddleware from 'redux-thunk';
	import loggerMiddleware from 'redux-logger';
	import rootReducer from './reducers';
	import { persistStore, autoRehydrate } from 'redux-persist';

	import { middleware as netInfoMiddleware } from '../modules/connection/middleware';

	import config from '../config';

	const initialState = {};

	export default function configureStore() {

		let enhancer;

		if(__DEV__) {

			const Reactotron = require('reactotron-react-native').default;
			const createReactotronEnhancer = require('reactotron-redux');
			const reactotronEnhancer = createReactotronEnhancer(Reactotron);

			enhancer = compose(
		  reactotronEnhancer,
		  applyMiddleware(
			thunkMiddleware,
			netInfoMiddleware,
			loggerMiddleware(),
		  )
		);
		}else{

			enhancer = compose(
		  applyMiddleware(
			thunkMiddleware,
			netInfoMiddleware,
		  )
		);
		}

		const store = createStore(rootReducer, initialState, enhancer);

		if (module.hot) {
			module.hot.accept('../reducers', () => {
				const nextRootReducer = require('./reducers').default;
				store.replaceReducer(nextRootReducer);
			});
		}

		return store;
	}
	
NavigationContainer

	@connect(
		(state) => {
			const { notifications, inboxReducer, progress,  navigation, connection, wsReducer, menu } = state;

			return {
				spinner : progress.spinner,
				navigationState : navigation.navigationState,
				routeRegistryRoutes : navigation.routeRegistry.routes,
				notificationCount : notifications.newNotificationsCount,
				messageCount : inboxReducer.newMessageCount + inboxReducer.newInviteCount,
				connected : connection.connected,
				wsActiveGroups : wsReducer.activeGroups
			};
		},
	  (dispatch) => {
		  return {
			  dispatch,
			  navigate : (path, title) => dispatch(doNavigate(path, title)),
			  navigateReset : (path, title) => dispatch(doReset(path, title)),
			  navigateBack : () => dispatch(doNavigatePop()),
			  formActions : bindActionCreators(formActionCreators, dispatch)
		  };
	  }
	)
	@autobind
	class NavigationContainer extends React.Component {
        [...]
        }

        NavigationContainer.childContextTypes = {
           navigator	: PropTypes.object.isRequired
        };

",mschipperheyn,2016-12-14 16:02:01
573,2016-12-14 14:57:39,"Ah. I think you're overwriting Connect's childContextTypes with your own. Try changing `NavigationContainer.childContextTypes = { ... }` to `NavigationContainer.WrappedComponent.childContextTypes = { ... }`


",jimbolla,2016-12-14 16:02:01
573,2016-12-14 15:06:00,"Thanks. That seems to do the trick. I wonder if this should be documented?

I also noticed that if using the following style, I avoid this issue altogether. It seems more elegant

     class NavigationContainer extends React.Component {
          static childContextTypes = {
             navigator	: PropTypes.object.isRequired
          }

",mschipperheyn,2016-12-14 16:02:01
573,2016-12-14 15:27:02,"Docs might help, although I wonder how many people would remember that. I think that's part of the downside of decorators. It looks like you're setting a field on one thing, when really you're setting it on another thing. It's a little more obvious when you write it the ""traditional"" way.

<S_CODE_TOKEN>
is equivalent to
<S_CODE_TOKEN>
",jimbolla,2016-12-14 16:02:01
573,2016-12-14 16:01:46,"Well, at least its documented here for posterity. Maybe it will help someone as well. Thx!",mschipperheyn,2016-12-14 16:02:01
573,2016-12-14 16:46:17,"If you think there's a good spot in the docs to talk about this, a PR would be welcome.",jimbolla,2016-12-14 16:02:01
572,2016-12-14 02:24:49,"example:
<S_CODE_TOKEN>

when i do something like this, i don't get any errors or rendered markup.",lostrouter,2016-12-14 05:02:44
572,2016-12-14 02:27:26,"I... _think_ that may be technically legal?  But I have absolutely no idea why you'd want to do that, and it's probably not going to be good for performance.

Why _are_ you trying to do that?",markerikson,2016-12-14 05:02:44
572,2016-12-14 02:35:48,"So, I have an SPA and I'm using react-router.  foo is essentially a child route's component.  I want to write something like the above because I want to guarantee all child route components get a common set of props.  I also don't want my outer level component getting triggered by state changes that don't really concern it.",lostrouter,2016-12-14 05:02:44
572,2016-12-14 02:39:45,"In a strange coincidence, I actually just helped answer a sorta-similar-ish question elsewhere.  I think what you really want is to connect the parent component, and use `React.cloneElement()` to pass the additional props on to each child.  See the example here: http://stackoverflow.com/questions/40054774/how-can-i-pass-props-to-children-of-react-router",markerikson,2016-12-14 05:02:44
572,2016-12-14 02:46:41,"right. so that works if i want to connect the parent.  i don't want to connect the parent because i want to compartmentalize state listeners.  Like in your example, I would likely have the header and footer connected independently.  It's possible I may want to connect all three in this one react component.",lostrouter,2016-12-14 05:02:44
572,2016-12-14 02:54:05,Every call to connect is going to return a new component. So React will unmount the old and mount the new on every render. That will be bad for performance.,jimbolla,2016-12-14 05:02:44
572,2016-12-14 05:02:44,"Yeah, this isn't a best practice. `connect()` establishes a higher-order component, which you only have to do once (normally at the top level of the module where you export the component from). Doing it in your `render` will recreate the component definition every time, so you'll be rerendering on every change (basically what would happen if React didn't do reconciliation). 

I would establish separate route components and connected container components. That might be a bit pedantic, but I find it scales well and keeps your concerns separate enough to avoid problems or subtle bugs.",timdorr,2016-12-14 05:02:44
571,2016-12-14 01:51:14,"As someone trying to port the react-redux connect api to ember I'm curious why you require a `opt-in` for withRef instead of supporting this out of the box? Just curious

Thank you in advance",toranb,2016-12-14 04:16:05
571,2016-12-14 02:26:08,IIRC because React prints a warning if you put a ref on a functional component and we didn't have a good way to detect functional components at the time. Also (less importantly) refs put some additional work on React and it's nice to avoid it.,gaearon,2016-12-14 04:16:05
571,2016-12-14 04:16:05,@gaearon thank you much!,toranb,2016-12-14 04:16:05
570,2016-12-13 12:53:45,"What is the preferred way (or best practice) to populate presentational components from containers: reading directly from state or reading from `ownProps` whenever possible? Why?

Suppose the following application state:

<S_CODE_TOKEN>

Example reading from ownProps:

<S_CODE_TOKEN>

Example reading directly from state:

<S_CODE_TOKEN>",viniciusbo,2016-12-13 15:15:06
570,2016-12-13 15:15:06,"You should be reading from state since you don't want to have to pass that state down through multiple layers of components to the container. Also, this will mean only that container will re-render when the state it's looking at changes, rather than your entire application.",timdorr,2016-12-13 15:15:06
569,2016-12-11 14:20:18,TypeScript currently doesn't recognise `WrappedComponent` as an existing static property on a wrapped class/function.,oreqizer,2016-12-12 01:41:52
569,2016-12-12 01:41:52,"Any TS definitions for react-redux aren't maintained by us. #541 is open to track adding them here. If they need adjustment, please post over in that PR.",timdorr,2016-12-12 01:41:52
568,2016-12-11 09:05:49,"I am facing issue Invariant Violation: Could not find ""store"" in either the context or props whenever I navigate directly to the Connect()`ed component.

I found troubleshooting guide for this issue in README which states
1. Make sure you don’t have a duplicate instance of React on the page.
![image](https://cloud.githubusercontent.com/assets/22791134/21079146/074e513a-bfae-11e6-9262-ade398a7cac1.png)

2. Make sure you didn’t forget to wrap your root component in <Provider>.
![image](https://cloud.githubusercontent.com/assets/22791134/21079149/2178773e-bfae-11e6-8722-418cdac52bcb.png)

routes.js container Router > Route components.

3. Make sure you’re running the latest versions of React and React Redux.
![image](https://cloud.githubusercontent.com/assets/22791134/21079155/50ba3e6a-bfae-11e6-8373-7baddfd6d8ec.png).

I am using `export default connect(mapStateToProps, mapDispatchToProps)(CopiedItemContainer);` syntax for connecting react and redux.

Any help is appreciated.
And I'll also want to know that this error comes up only when I directly go to connected component like navigating directly to localhost:3000/route-to-connected-component.
But If I go to localhost:3000/login and then LoginComponent redirects me to connectedComponent then everything works perfectly.",NIshantDesaiJumpbyte,2016-12-12 01:44:20
568,2016-12-12 01:44:20,"It might be something with your routing config, which should have the <Router> live outside of your routes module. 

Nonetheless, this is a usage question, not a bug report. This issue tracker doesn't have the kind of eyeballs that places like Stack Overflow and Reactiflux have. You're better off posting in those kinds of places instead.",timdorr,2016-12-12 01:44:20
567,2016-12-10 23:11:55,"This fixes #513. I'm not sure how to write a proper automated test for HMR, but I tested it against @patrikholcak's repo mentioned in https://github.com/reactjs/react-redux/issues/513#issuecomment-263126565.",jimbolla,2016-12-14 14:40:15
567,2016-12-14 05:31:26,Did this get merged? It looks like it didn't.,jimbolla,2016-12-14 14:40:15
567,2016-12-14 14:40:09,Whoops. I'll do a 5.0.1 soon then. ,timdorr,2016-12-14 14:40:15
566,2016-12-10 19:46:35,"This test ensures that `connect`/`connectAdvanced` correctly notifies a child connected component when there's a blocking component (`shouldComponentUpdate` = false) between a parent and child.

This demonstrates why #565 is an invalid change.",jimbolla,2016-12-14 14:39:39
565,2016-12-10 11:19:25,"When handling store updates, selector is sometimes called twice with same `state` and `ownProps` for nested components. I traced this part, and found things occurred in following order:

`parent: onStateChange, setState`
`nested: componentWillReceiveProps, selector, shouldComponentUpdate`
`parent: componentDidUpdate, notifyNestedSubs`
`nested: onStateChange, selector, (skip update), notifyNestedSubs`

The nested component was updated twice for one store update, by receiving (new?) `props`(`setState`), and being notified(`notifyNestedSubs`).

I tried to eliminate additional update attempts by removing `componentDidUpdate`, and run test to see how many cases would break...

> `63 passing (441ms)`

All test are passed, but it should not.

Nested components are *notified* by `setState` or `notifyNestedSubs` in `onStateChange`, or by React after receiving `props`. If React is told not to update after receiving `props`, all nested components should be notified by `notifyNestedSubs`, this is added to `componentWillReceiveProps`.",dk00,2016-12-10 19:58:40
565,2016-12-10 14:13:30,This doesn't look right. Moving notifyNestedSub into compenentWillReceiveProps will cause it to not get called if there's a blocker component preventing it from receiving new props. ,jimbolla,2016-12-10 19:58:40
565,2016-12-10 17:58:17,">This doesn't look right. Moving notifyNestedSub into compenentWillReceiveProps will cause it to not get called if there's a blocker component preventing it from receiving new props.

Is it worth adding a failing test for this?",gaearon,2016-12-10 19:58:40
565,2016-12-10 19:58:40,I just added a test as PR #566 that would fail if this PR is applied.,jimbolla,2016-12-10 19:58:40
564,2016-12-09 20:12:16,"The following error appears using `react-redux@5.0.0-rc.1` when I am unmounting component which renders `redux-form`'s `<Field />` component only if the `<Field />` has been previously focused. I know that it seems like problem with `redux-form` but when I switch back to `react-redux@4.4.6` everything works fine.

<S_CODE_TOKEN>

Tested on OSX and Chrome@54.0.2840.98 (64-bit) and Safari@10.0.1 (12602.2.14.0.7)

How to reproduce
---

1. Clone the repository `https://github.com/pilaas/react-redux-bug`
1. `yarn`
1. `npm run start`
1. Open browser `http://localhost:8080`
1. Open console and enter type `store.dispatch({type: 'SHOW_FORM'});`
1. Focus newly appeared input component
1. Enter `store.dispatch({type: 'HIDE_FORM'});` in console
1. Experience warning
",pilaas,2016-12-13 06:11:54
564,2016-12-09 22:17:39,"Not to strawman/sidetrack too much, but why are you storing that kind of state in your store? It doesn't seem to be a business-level concern, just UI state. That kind of thing is best left to local React state instead.",timdorr,2016-12-13 06:11:54
564,2016-12-09 22:58:15,"It's just example project to demonstrate the problem. Programming patterns are not the case here. I don't need a workaround, I just report the bug (?).",pilaas,2016-12-13 06:11:54
564,2016-12-10 00:28:47,"Haven't tried to repro this yet, but gotta say, this is a _great_ bug report.  Scenario description, error message, ""How to repro"", _and_ a cloneable repo that can reproduce the issue.  Thanks!",markerikson,2016-12-13 06:11:54
564,2016-12-10 14:35:00,"I plan to take a loot at this today. Thanks, @pilaas.",jimbolla,2016-12-13 06:11:54
564,2016-12-10 20:23:52,Ah. The good news is this seems to be fixed if built against the head of `next` branch. @timdorr Any chance we can push an rc2?,jimbolla,2016-12-13 06:11:54
564,2016-12-13 06:11:54,Pushed out a quick rc2 just now. I'll try to do 5.0.0 final tomorrow once I'm done with some stuff related to my move this weekend. Draft is ready for the release notes.,timdorr,2016-12-13 06:11:54
563,2016-12-08 15:56:57,"I was under the impression that `mapDispatchToProps` runs only once.
I'm trying to increase application performance using the following guide:
http://benchling.engineering/deep-dive-react-perf-debugging/

Inside the guide there is a Mixin I'm using which tells me about avoidable updates. (A prop is deeply equal but not shallowly, causing an avoidable render)

Some of the output I'm getting is about functions that come from `mapDispatchToProps`. Could it be that mapDispatchToProps is run more than once? how is this possible? What am I missing?",davegri,2016-12-08 16:05:05
563,2016-12-08 16:05:05,If your `mapDispatchToProps` function depends on props (has args length !== 1) then it's called anytime the component receives new props.,jimbolla,2016-12-08 16:05:05
562,2016-12-07 13:33:45,"let's say my react application has 10 business pages and one error page; each page has its own store state , action creators, reducers..etc. Any unexpected result will lead user to the error page, with  error message read from error store state. The store state at run-time is like below
<S_CODE_TOKEN>
Now the question is how to set the error_msg in error state across the application.

If you use api frameworks like saga or CALL_API, the REQUEST_BEGIN/REQUEST_SUCCEEDED/REQUEST_FAILURE actions are dispatched within the api framework  and therefore the first user code invoked after a failure is actually reducer code. 
Since reducers are localised, they don't have access to other store states, so another action is needed to update error state. This isn't effective and looks a bit clumsy.

I was wondering if we can have a  shared/communal  store state, so that it can be updated directly from all reducers, or do we have better solutions?",bochen2014,2016-12-07 14:54:38
562,2016-12-07 13:47:09,"ok.. looks like i've got it...

1.  dispatch SET_ERROR_MESSAGE with detailed error info before jumping to error age, which is what I'm doing
2.   modify my api framework to dispatch a SET_ERROR_MESSAGE right before it dispatches REQUEST_FAILURE, so that I don't have to set error message explicitly..",bochen2014,2016-12-07 14:54:38
562,2016-12-07 14:54:37,"If you search the reactjs/redux issues, this has been discussed previously. The redux's team's stance on this is that `combineReducers` is meant to cover the most common use cases; but if you need more advanced behavior, such as passing global state, should be done in userland. There's probably an implementation in [Mark's React/Redux Links list](https://github.com/markerikson/react-redux-links) that does this already.",jimbolla,2016-12-07 14:54:38
561,2016-12-06 16:17:57,"I've updating redux, reat-redux and react on my project and now, this:
<S_CODE_TOKEN>
throws:
<S_CODE_TOKEN>

I do not understand as I correctly give a sigle child to my Provider component... This was working with react 15.1.0 and react-redux 4.4.5.

I'm having this issue with react 15.4.1 and react-redux 4.4.6.",zabojad,2016-12-06 16:24:42
561,2016-12-06 16:24:42,"You're passing `tmp` and `""\t""` as children to `Provider`. Provider expects a single child. Get rid of the second one.",jimbolla,2016-12-06 16:24:42
560,2016-12-06 10:20:36,"Current latest `@next` version published on npm is v5.0.0-rc.1, which is uses `Array.prototype.find` that [not supported by IE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Browser_compatibility). It seems find was removed since then but new version was not released.
thanks",iotch,2016-12-07 00:00:25
560,2016-12-06 12:11:18,"New version will be soon. In the meantime, a polyfill should add `find` for you. ",jimbolla,2016-12-07 00:00:25
559,2016-12-05 10:21:47,"Hi, I'm curious why most guidelines of separate every types?

for example:
    
     //List of Posts
    FETCH_POSTS: 'fetch_posts',
    FETCH_POSTS_SUCCESS: 'fetch_posts_success',
    FETCH_POSTS_ERROR: 'fetch_posts_failure',

    // Single POST
    FETCH_POST: 'fetch_post',
    FETCH_POST_SUCCESS: 'fetch_post_success',
    FETCH_POST_ERROR: 'fetch_post_failure',

I've got the idea within success and error got separated. But for `fetch_posts` and `fetch_post` that only has one job to trigger ex: `isLoading` why it must got separate?

Thanks",stefensuhat,2016-12-05 14:47:02
559,2016-12-05 14:47:02,See http://redux.js.org/docs/recipes/ReducingBoilerplate.html,jimbolla,2016-12-05 14:47:02
558,2016-12-02 03:33:09,"I have a component A that renders component B as a child.

Within comp B an onClick action does dispatch() to add item. Same method calls back parent, and parent destroys the component. That puts the whole app into a weird state.

onClick {
   props.dispatchAdd()
   props.parentCloseModal()
}

is there anything anti pattern when calling dispatch and setState in the same call?


This is in a react-native app so not easy to put out sample to replicate it. It happens with a modal, modal onAdd dispatch to add data while asking parent to destroy the modal.
",manishtpatel,2016-12-02 04:56:24
558,2016-12-02 04:56:24,"This is a usage question, and should really be asked on Stack Overflow instead of here.  There's also not quite enough info in the question to really give a good answer, anyway.",markerikson,2016-12-02 04:56:24
557,2016-11-30 15:38:46,"Instead of using the `setState` callback, doing `notifyNestedSubs` in `componentDidUpdate` seems to avoid the cursor bug (#525) without the need for the compatibility setting BS. (I swear the first time I tried this, it didn't work; I must've screwed something up. /shruggie) I'll perf test this tonight when I'm at my home PC with all my test projects. Assuming that goes well, this is a much cleaner solution. Thanks @istarkov.

",jimbolla,2016-12-05 03:18:03
557,2016-11-30 17:50:59,"What does the flame chart look like? When it's inside an event handler, and when it's outside an event handler (e.g. network callback).",gaearon,2016-12-05 03:18:03
557,2016-11-30 18:03:21,"Not sure yet, but what I learned is `componentDidUpdate` is called *before* the `setState` callback. Unless implementing `componentDidUpdate` adds some unexpected perf overhead, this change should perform as good or better than the previous way. But I won't be able to test for sure I'm home.",jimbolla,2016-12-05 03:18:03
557,2016-12-01 00:52:19,Just ran some perf tests (react-redux-perf and redux-todomvc projects) on this change vs RC1. This change's perf is almost identical or sliiiightly better with one small tweak I just made; 10-15 ms faster total (out of 350ms) when clicking 10 times on the todo list with 10k items... basically negligible.,jimbolla,2016-12-05 03:18:03
557,2016-12-01 01:04:05,"And compared to the pre-RC1 version (ie, the ""with-bug"" approach)?",markerikson,2016-12-05 03:18:03
557,2016-12-01 14:44:11,"The test above was with compatibility=false, so that would be the ""with-bug"" approach. Setting it to true for my 2 test cases would let it run slightly faster in this case because none of my connected components would be affected by the stale props bug.",jimbolla,2016-12-05 03:18:03
557,2016-12-01 14:45:57,Can we test this with deeper nested apps? Generally “cascading setState” is slow in React but maybe this isn’t an issue here? I don’t understand the change well enough to say.,gaearon,2016-12-05 03:18:03
557,2016-12-01 14:51:40,What would be a good project to use to test that?,jimbolla,2016-12-05 03:18:03
557,2016-12-01 14:55:32,"I don't have any suggestions :-(
A fake app with boxes inside boxes, all connected?
You could use new profiling features in React 15.4.0 to get a flamechart.",gaearon,2016-12-05 03:18:03
557,2016-12-05 03:17:59,"This LGTM as-is. Sounds like (assuming I'm reading these comments right) the perf is equivalent to the 5.0 betas/alphas. We can go live with this and clean things up in 5.1 when React 16 is available (and knock out sCU!)

I suppose a further improvement would be a heuristic to determine if we even need to set the cDU, but I'm not even sure how you would go about doing that. 

Any chance you ran this against React master/16? I'm curious to see how that version would perform with this change.",timdorr,2016-12-05 03:18:03
557,2016-12-05 15:24:55,"I have not tested against react master. Yesterday, I started contriving a more nested demo app and ended up shaving a ton of yaks. ",jimbolla,2016-12-05 03:18:03
557,2016-12-05 16:24:36,"Can someone summarize for me what the current state of play is for 5.0?  What pieces are and are not turned on?

- Top-down subscriptions
- React 15/16 compat flag
- Cursor bug",markerikson,2016-12-05 03:18:03
557,2016-12-05 16:28:45,"Currently, the state of `next` is:
* Top-down subscriptions are on
* Compat flag removed because not needed any more
* Cursor bug fixed

I would like to run a perf test against React `master`, just in case; will do that tonight or tomorrow night.",jimbolla,2016-12-05 03:18:03
557,2016-12-05 16:54:51,"So, net win-win, then - perf up, annoying flags down, bug fixed?  Sweet!",markerikson,2016-12-05 03:18:03
557,2016-12-07 00:39:26,"Ran the todomvc test against react master. The difference between rc1 and latest was 314.2ms vs 322.7ms. So 8.5ms difference for 10 x 10,001 connected components. The margin is close enough that the same test probably produces slightly different results depending on the browser running it. It'll be interesting to see if there's any noticeable change once all the Fiber stuff is fully implemented in React.",jimbolla,2016-12-05 03:18:03
557,2016-12-07 16:48:38,"I know @ryanflorence was building a bunch of stuff to prepare for it in Router 4.0, but scrapped it because it's hard to design for a moving target. And I'd rather not contribute to any anxiety on the React team by releasing libraries that are trying to commit to stuff that's not yet finalized and creating breakage where there shouldn't be any.

I'm guessing we'll get a way to enable Fiber in 16 and then can start playing with it and preparing for it. But no need to go crazy just yet :)",timdorr,2016-12-05 03:18:03
556,2016-11-29 05:27:23,"Hi,

I have a reducer that updates the state after an API call with the state that comes back.  Now, if i want to update a table with that data, everything works great.  Now let's say I want to filter that data updating the local state which I can store that table data, how could I do that?

My use case is i have a table that initially displays all the data.  I have a chart, which when i click certain parts of it, i want the table to update with those respected values.  I am able to get those values, but i want to update the state and properly update the table.

Thanks!",MattHartz,2016-11-29 05:30:29
555,2016-11-28 21:24:13,`isSubscribed` method was unused. This makes use of that method internally to determine if the component should subscribe.,AndrewHenderson,2016-11-28 21:31:47
555,2016-11-28 21:27:06,`isSubscribed` is there for backwards compatibility reasons. Otherwise I would've just removed it completely.,jimbolla,2016-11-28 21:31:47
555,2016-11-28 21:31:47,"I think this reads just a little bit better. And I would merge it in, but 5.0 is up next for release and this won't ever see the light of day as a result. Sorry about that!",timdorr,2016-11-28 21:31:47
554,2016-11-28 21:11:02,"Instead of posting `initMapStateToProps is not a function` exception, show something more helpful like: `Invalid value of type string for mapStateToProps argument when connecting component AwesomeForm.`",jimbolla,2016-11-28 21:32:21
554,2016-11-28 21:32:18,Good stuff!,timdorr,2016-11-28 21:32:21
553,2016-11-28 05:55:41,"I switched my JSX components to module.export their class in order to get router driven chunking of the bundle to work.  Migrating to redux but none of these work:

module.exports = connect(mapStateToProps, mapDispatchToProps)(FuelSavingsPage);
// throws: TypeError: Cannot call a class as a function.

module.exports = {
	FuelSavingsPage: connect()(FuelSavingsPage)
};

export default connect(mapStateToProps, mapDispatchToProps)(FuelSavingsPage);

All help appreciated, 

",msimonc,2016-11-28 16:46:59
553,2016-11-28 16:46:59,"This would be better asked on stackoverflow.com. Also, I don't think you've provided enough information to troubleshoot your issue.",jimbolla,2016-11-28 16:46:59
552,2016-11-27 19:23:56,"https://twitter.com/beeva_es/status/802953966069825536:  You guys need to put an end to this shit, NOW!!  That is OUR image they are using, and links to our site, in which we get support questions for YOUR product!  Redux Options Framework has NOTHING WHATSOEVER to do with React.  Nothing!  ZIP, ZERO!!!  Change the bloody name, and stop doing this.  Anymore marketplace confusion which impedes our work, and you can rest assured it'll go to the attorney level quickly..",kprovance,2016-11-27 19:42:40
552,2016-11-27 19:25:35,"This has to go too, the image and the references to our website.  https://www.beeva.com/beeva-view/tecnologia/si-cuidas-tu-capa-de-presentacion-por-que-no-la-de-datos/

Alternatively, you can begin paying us for each of your clients who come to us for help, to redirect them to you...otherwise they may not like the response they get from me.  In fact, I'm sure they won't.

We warned you about this, the theft of our Redux name, and you chose to ignore it.  NO more.",kprovance,2016-11-27 19:42:40
552,2016-11-27 19:42:40,"That is a 3rd party posting a blog post. We have no control over this sort of thing. This is not our doing and not representative of the authors and maintainers of this project. Please contact the folks at beeva.com to have this resolved.
",timdorr,2016-11-27 19:42:40
551,2016-11-27 12:15:28,"When I asynchronously remove project ...

<S_CODE_TOKEN>
.... that was created after initialization ([by reducer](https://github.com/BjornMelgaard/react-test/blob/master/app/assets/javascripts/reducers/projects.js)) - it will be deleted and properly unmounted, but when project was passed as `initialState` -  `ProjectList` will [not call](https://github.com/BjornMelgaard/react-test/blob/master/app/assets/javascripts/components/ProjectList.js#L52) `mapStateToProps` (even if `{ pure: false }` in `connect`) and `ProjectItem` try to render itself with stale data, and fail, as in picture
 
![27-13 02 41](https://cloud.githubusercontent.com/assets/7573215/20648258/9421630e-b4aa-11e6-8c11-c807bed2d985.png)

It looks like reducer return changed data, but I use immutablejs

[This issue on stackoverflow](http://stackoverflow.com/questions/40823843/component-is-not-unmount-after-its-delete-in-store) (pictures are not the same, more info)

versions of libraries - most resent",BjornMelgaard,2016-11-28 10:35:15
551,2016-11-27 18:42:07,"I'm not entirely sure I follow what exactly your problem is, but as a guess: it sounds like the child component is re-rendering before the parent is.  This is a known issue with React-Redux v4 and earlier.  The v5 beta fixes that issue.  Try installing `react-redux@next` and see if that takes care of your problem.",markerikson,2016-11-28 10:35:15
551,2016-11-27 18:43:18,"@markerikson wow, thanks, I'll try))",BjornMelgaard,2016-11-28 10:35:15
551,2016-11-28 10:35:15,It worked!!!,BjornMelgaard,2016-11-28 10:35:15
550,2016-11-26 09:28:57,"Hi,

I created a provider component (SortFilter.js) which basically instantiates some filter (dropdown), by selecting something builds an object and passes to the children. 

(SortFilter render function)
`const childrenWithProps = React.Children.map(this.props.children,
            (child) => React.cloneElement(child, {
                queryFilters: this.state.queryFilters
            })
        );`

In my case the children is a redux container component which uses the connect. If I open the Chrome's react dev tool I see that the Connect receives the new props from the parent but doesn't forward to it's wrapped component.  

Could you create an extra option inside the connect so if it's true instead of 
<S_CODE_TOKEN>

using the clone element like I did in my provider?

If you have any build in functionality for this particular case could you tell me how to use to solve my issue? 

Thanks a lot!

",zsoltbokor,2016-11-26 10:44:38
550,2016-11-26 14:30:14,using options.pure = false solves the issue,zsoltbokor,2016-11-26 10:44:38
549,2016-11-24 13:12:32,"I have a contrived example. as below
<S_CODE_TOKEN>

As shown above, clicking the button will cause  `action add` to be dispatched twice, each dispatch will cause component to be re-rendered.  Is there any performance concern in above code? is it an anti-pattern or a common practice?  

I assume it's a common practice.  Because it is everywhere in `redux-thunk`, i.e. we dispatch a beginFetch action and fendFetch action within a button click event , with the only difference being `redux-thunk` dispatch 2 actions asynchronously, but that shouldn't matter.

Just to verify my understanding of what's happening behind the scene  is correct:
<S_CODE_TOKEN>",bochen2014,2016-11-24 13:18:47
549,2016-11-24 13:18:47,"It's okay but if you need to do dispatch more than a couple of actions I’d recommend rewriting your code so that there is just one action, and different reducers react to it.

Indeed it's not very good perf-wise although there is a [simple solution](https://github.com/tshelburne/redux-batched-actions) (and also a more [complex solution](https://github.com/tappleby/redux-batched-subscribe)) to that.

Of course, with async requests you *have* to dispatch twice, but you also want to update UI twice (to show a loading indicator and to hide it). So in that case it matches your intention.",gaearon,2016-11-24 13:18:47
548,2016-11-21 20:55:31,"If I wanted to augment a connected component so that a little UI decoration is added which indicates various debug info, how would I be best to do this? I'm thinking that I want to make more visible the selectors that run, how long they took, etc. 

We are finding that unless we are keeping an active eye on these details, its easy for the team to let regressions slip in and having that front and center might help. Plus its a good way to learn/scratch an itch.",avanderhoorn,2016-11-21 21:20:22
548,2016-11-21 21:20:22,"I've got links to a few component render monitoring utils and approaches as part of my Redux addons list, at https://github.com/markerikson/redux-ecosystem-links/blob/master/devtools.md#component-update-monitoring .  Those might serve as useful inspiration (particularly the ""render visualizer"" pieces).",markerikson,2016-11-21 21:20:22
548,2016-11-21 23:08:06,Thanks!,avanderhoorn,2016-11-21 21:20:22
547,2016-11-21 16:45:32,"Hi there,

I'm trying to create a widget to upload an image with the correct width and height. I was following the documentation but it throws an Error at the very beginning. Is the documentation up to date?

http://redux-form.com/6.2.0/docs/api/Field.md/

(...)
1. A component

This can be any component class that you have written or have imported from a third party library.


// MyCustomInput.js
import React, { Component } from 'react'

class MyCustomInput extends Component {
  render() {
    const { input: { value, onChange } } = this.props
    return (
      <div>
        <span>The current value is {value}.</span>
        <button type=""button"" onClick={() => onChange(value + 1)}>Inc</button>
        <button type=""button"" onClick={() => onChange(value - 1)}>Dec</button>
      </div>
    )
  }
}
Then, somewhere in your form...


import MyCustomInput from './MyCustomInput'

...

<Field name=""myField"" component={MyCustomInput}/>
(...)

Throws:

`warning.js:36 Warning: Failed prop type: Invalid prop 'component' supplied to 'ConnectedField'`",xavicolomer,2016-11-21 16:55:24
547,2016-11-21 16:55:24,This isn't the repo for redux-form. You want https://github.com/erikras/redux-form,jimbolla,2016-11-21 16:55:24
547,2016-11-21 16:58:01,Sorry! Too-many-hours ,xavicolomer,2016-11-21 16:55:24
546,2016-11-21 02:50:34,Noticed we were testing and building against React 0.14. This bumps us up to 15 for 5.0 so that we're testing against the current release version.,timdorr,2016-11-21 02:55:15
546,2016-11-21 02:55:10,"OK, passes tests. If there's any issue with using this version that I missed, please let me know!",timdorr,2016-11-21 02:55:15
546,2016-11-21 04:38:50,"Doesn't this also bump the minimum React version to 15? I'd prefer we not do that, since we still use 14 on our single-sign-on project, because 15 broke IE 11 password autofill on controlled inputs, and it won't be fixed until React 16.",jimbolla,2016-11-21 02:55:15
546,2016-11-21 04:39:36,"Nope, just the devDep. ",timdorr,2016-11-21 02:55:15
546,2016-11-21 04:41:05,Oh I see now,jimbolla,2016-11-21 02:55:15
545,2016-11-17 19:07:51,"So I've been trying to wrap my head around this issue for 8+ hours with no progress :(

I want to toggle a material-ui drawer by mapping a boolean from my redux store to my ButtonBar.js container. From there, I'm passing this.props.chatVisible down to the ChatButton component that then takes that boolean and sets it to the open property of my material-ui drawer. 

Comparing it to previous projects of mine, everything seems like it should be working fine. Unfortunately, this.props.chatVisible never updates beyond initialization. It always stays as whatever the default value is supposed to be (in this case, I've set the default value of chatVisible to true).

Here's the repo I'm working with: https://github.com/tedjames/creativeHomePortal

The affected components (ButtonBar.js and ChatButton.js) are located in /src/Components/Common/Header/rightSection

I logged global state after initialization and after each time I click ChatButton(thus firing the ToggleChat action). I also logged this.props.chatVisible from the ChatButton component every time I push it and the action fires:
http://imgur.com/a/bWBUa

This shows that the action and reducer are working as expected but that the chatButton component never receives the newly updated piece of state. 
",tedjames,2016-11-17 19:34:11
545,2016-11-17 19:34:11,"Your state is being mutated.  The first argument to `Object.assign()` will be the target that everything is copied onto.  So, in order to properly do immutable updates, you need to pass a new blank object (or array) in as the first argument, the ""old"" object as the second argument, and any ""new"" values as the third argument, like: `const newState = Object.assign({}, oldObject, {someValue : 123}).`  Your toggle reducer is currently doing `return Object.assign(state, newToggles);`, which is directly mutating `state`.

I'd encourage you to read http://redux.js.org/docs/faq/ReactRedux.html#react-not-rerendering and http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html , which explain how to make immutable updates properly.
",markerikson,2016-11-17 19:34:11
545,2016-11-17 20:43:46,"Thank you so much! Finally got it working 👍
",tedjames,2016-11-17 19:34:11
544,2016-11-14 15:14:00,"When I try to install react-redux using jspm I get the following message:

`Installing npm:react-redux@4.4.6, no version match for npm:react@^15.4.0`

However, looking into the package.json, it seems to be correct.

`""react"": ""^0.14.0 || ^15.0.0-0 || ^15.4.0-0"",`",JoaoMosmann,2016-11-16 11:21:41
544,2016-11-14 16:49:06,"Yep.  React hasn't released this yet.
",bennybrau,2016-11-16 11:21:41
544,2016-11-14 16:59:11,"15.4 is current in RC.  `react@next` points to `15.4.0-rc.4`.
",jimbolla,2016-11-16 11:21:41
544,2016-11-14 17:18:42,"Is this a bug in jspm? It sounds like it. 
",timdorr,2016-11-16 11:21:41
544,2016-11-14 21:58:24,"i think this is how [node semver](https://github.com/npm/node-semver) is expected to behave

> ^1.2.3-beta.2 := >=1.2.3-beta.2 <2.0.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple.
",bdwain,2016-11-16 11:21:41
544,2016-11-15 10:44:18,"Currently, I'm using `react@15.3.2`. I'm not an expert in versioning, but it seems that `15.3.2` doesn't match any of the versions required by `react-redux`. Is that right ?
",JoaoMosmann,2016-11-16 11:21:41
544,2016-11-15 15:16:01,"It definitely looks like a JSPM bug.

I tried from scratch using npm `npm install react redux react-redux` and it installed everything.

However, doing the same with jspm `jspm install react redux react-redux` it throws t he same error.
",JoaoMosmann,2016-11-16 11:21:41
544,2016-11-16 11:21:39,"The problem was that the version 0.16.\* of **jspm** doesn't support  `||` in dependencies version.

With the **jspm@0.17.0-beta4** I was able to overwrite the peerDependencies.

Issue created on jspm repo: jspm/jspm-cli#2173
",JoaoMosmann,2016-11-16 11:21:41
544,2016-11-16 16:52:57,"Ah ha! I was right! 😄 

Thanks for the follow up, @JoaoMosmann 
",timdorr,2016-11-16 11:21:41
543,2016-11-13 23:15:30,"In order to satisfy a prerelease version, the major/minor/patch versions must match exactly. This change makes `react-redux` `yarn` friendly when used with `react@15.4.0-rc.4`. Without this change, you always fail a `yarn check`.

cc: @gaearon @bestander.

",zertosh,2016-11-14 12:06:58
543,2016-11-14 12:06:56,"k
",gaearon,2016-11-14 12:06:58
543,2016-11-14 12:11:38,"Should be in 4.4.6.
",gaearon,2016-11-14 12:06:58
542,2016-11-13 13:59:54,"In redux-form I have an array property. Every time it's been changed store changes too, mapStateToProps recieves correct value, but componentWillReceiveProps recieve props only first 1-3 times (I don't know why amount is different), then nothing happens. 
If I change another fields componentWillReceiveProps recieve correct values again.",alexeyMohnatkin,2016-11-13 16:22:48
542,2016-11-13 16:22:48,"- Redux Form has its own [repo](https://github.com/erikras/redux-form/issues)
- This sounds like a usage/support question which is better asked on Stack Overflow
- You didn't provide any code to make it possible to diagnose your problem
- Most likely you are mutating your array instead of returning a new one.
",jimbolla,2016-11-13 16:22:48
542,2016-11-13 17:23:50,"> Redux Form has its own repo

Redux Form works here as expected

> Most likely you are mutating your array instead of returning a new one.

Array is returning from 'redux-form/CHANGE' action, it doesn't mutate state

Sorry that I didn't provide code.

<S_CODE_TOKEN>

Also video
https://youtu.be/3CXuVpPPn_w
",alexeyMohnatkin,2016-11-13 16:22:48
542,2016-11-13 19:39:45,"I suggest trying https://github.com/leoasis/redux-immutable-state-invariant to verify that your state is not being mutated. Like 95% of issues with this symptom end up being mutated state.
",jimbolla,2016-11-13 16:22:48
542,2016-11-14 07:56:32,"You were right. Sorry for wasting your time
",alexeyMohnatkin,2016-11-13 16:22:48
541,2016-11-09 21:01:02,"Follow up to #538 
Rebased against next
",bbenezech,
541,2016-11-11 11:58:42,"Continuing on previous thread:

I agree that having a combination of each allowed type for each overload makes too much bloat. 

I think we can omit the case when `mapStateToProps: null`, because if we have `connect(null)`, the `TStateProps` will be inferred to `{}` which is not that bad, because after merging `TStateProps & TOwnProps` becomes the same as just `TOwnProps`.

But for the case when second argument is object, I think we must include another signature, because in this case `TDispatchProps` is constrained to object of action creators, not just any object.

There are a few other things we could improve, but I don't have enough time right now for a thorough review. Will check back in a couple days.
",aikoven,
541,2016-11-17 15:11:36,"@aikoven 

> But for the case when second argument is object, I think we must include another signature, because in this case TDispatchProps is constrained to object of action creators, not just any object.

We ask `mapDispatchToProps` to be a `MapDispatchToPropsObject & TDispatchProps`

Not sure I understand.

And I tried 

<S_CODE_TOKEN>

can' t get past

<S_CODE_TOKEN>

TS won't associate

<S_CODE_TOKEN>

with

<S_CODE_TOKEN>
",bbenezech,
541,2016-11-21 10:52:42,"@bbenezech I've created a PR for your PR :) https://github.com/bbenezech/react-redux/pull/1

Added tests. Some of them fail because of `MapDispatchToPropsObject`, particularly:
<S_CODE_TOKEN>
The first one should fail, the second one shouldn't. But we can't check it correctly because we don't know beforehand what kinds of values can be `dispatch`ed. So it seems that we have to allow `mapDispatchToProps` to be any object with function values.",aikoven,
541,2016-12-01 14:22:31,"@aikoven I narrowed allowed Actions. I am quite satisfied with the result. It fixes your test failure (i.e. it now fails). There is a very tiny little hack for Thunks (we provide the wrong return type if TDispatchProps is not provided, covariantly compatible of course), but it is going to make everyone life's so much easier I think it is a must. I added tests around it to be sure that behavior is perfect in any cases.

Have a look and tell me what you think.",bbenezech,
541,2016-12-02 04:37:58,"Good work!

I'm not sure that `react-redux` should be explicitly concerned with `redux-thunk`. What about other middlewares that could add support for dispatching other stuff? I think the best we can do now is to allow any function as *action creator*. By the way, if an object is passed as 2nd argument to `connect`, it just uses `bindActionCreators` from Redux, so why don't we align it with [Redux typings](https://github.com/reactjs/redux/blob/f8ec3ef1c3027d6959c85c97459c109574d28b3c/index.d.ts#L313-L355)? 

Also, since we're working on the `next` branch, we have to add typings for newly added [`connectAdvanced`](https://github.com/reactjs/react-redux/blob/next/docs/api.md#connectadvancedselectorfactory-connectoptions).",aikoven,
541,2016-12-14 14:31:32,@timdorr Why is it closed? Should we stop our effort to release the typings inside react-redux repo?,bbenezech,
541,2016-12-14 14:38:22,"I think this was auto closed by my adjusting of the branches on the repo. The next branch was deleted, so that's probably why. I think we just need to change the branch and then I can open it. I'm on mobile at the moment, but will do that soon. ",timdorr,
541,2016-12-14 14:42:53,@timdorr Awesome thanks!,bbenezech,
541,2016-12-26 07:24:53,"@bbenezech Why don't we use Partial<T> type (introduced in Typescript 2.1) for annoying TOwnProps, TStateProps, TDispatchProps things? we can just pass two type arguments to connect: TState and  TProps.
",rokoroku,
541,2016-12-26 08:12:41,@rokoroku What's your intended use of `Partial` here?,aikoven,
541,2016-12-26 08:53:21,"@aikoven We can simplify things. Writing types for every TOwnProps, TStateProps, TDispatchProps is really cumbersome, and Partial\<T\> is very useful for reducing them.

For example,

##### with given redux state
<S_CODE_TOKEN>

##### suggested (with partial)
<S_CODE_TOKEN>


##### current (without partial)
<S_CODE_TOKEN>

(Note: above code is just an example.)",rokoroku,
541,2016-12-26 10:25:25,"@rokoroku It's not really accurate.

<S_CODE_TOKEN>
In this case, props of connected component (the one returned from `connect(...)(Component)`) should have type `{}`, because both `todos` and `addTodo` are provided by `connect`. By using `Partial` we'd get `{todos?: ..., addTodo?: ...}` which is not correct.

Btw, TypeScript doesn't yet work well with decorators that change the type of decorated stuff, which `connect` does indeed.

To avoid having to set all generic arguments, you can use this:
<S_CODE_TOKEN>
i.e. let TypeScript infer everything for you by just specifying types for `mapStateToProps`/`mapDispatchProps` arguments.",aikoven,
541,2016-12-26 11:15:32,"@aikoven However, we already set strict type here:  <S_CODE_TOKEN>
So the component will follow ``MyProps``, not ``Partial<MyProps>``.

Can't we add some abbreviated definitions while preserving existing definitions?
(And of course, I'm using the way you gave me :) )",rokoroku,
541,2016-12-26 13:10:53,"Ohh, I figured out your intentions.

I focused on the **inside of the component** (where our logic will be written), and you are likely  paying attention to the **``connect``-ed component**. (Am I right?)

Considering the result of ``connect``, you're right. But is it really necessary to export the decorated type (like ``dispatch`` in ``StateProps`` by default) and export it to the outside? I think the strength of Typescript is to help developers write code with more joy and less pain, not to force them to match the exact types.

I might have been wrong, but I just wanted to share my thoughts :)",rokoroku,
541,2017-02-24 20:39:30,Is there any reason why connectAdvanced is not included in the typings?,maclockard,
541,2017-03-17 13:12:43,"The current typings on DefinitelyTyped do not expose the connected components props on the connected component, breaking type checking when you have to pass some additional props.

Does anyone have a workaround for that?

Are the typings in this branch usable?",theduke,
541,2017-03-17 16:25:58,"@theduke They are totally usable and include a lot of improvements over the DT ones.
If you add them to your app, simply nest them like this:
<S_CODE_TOKEN>
and remove the @types/react-redux package.

It may change a bit before release, but unless you have thousands of connected components, this should not be of concern.

@maclockard lack of time, sadly. I do not use this part of the API, I have no time to investigate atm.
Any help is welcome.",bbenezech,
541,2017-03-17 20:22:20,"@bbenezech thanks for the update, glad to hear.",theduke,
540,2016-11-09 21:00:45,"`react15CompatibilityMode` is intended to be a temporary setting until our official solution is ""use React v16."" When set to true, which is the default in `<Provider>`, subscriptions are **not** re-ordered to fire top-down. This avoids the bug related to #525 but loses some of the perf gains and re-introduces the issues with state and ownProps being out of sync. This should behave pretty much like react-redux v4.

A developer that upgrades to this version w/o making any other changes should not experience the #525 bug out of the box, but won't get the good stuff mentioned above.

The recommended upgrade path is to set `react15CompatibilityMode` to false at the `<Provider>` level and then set it to true at the component level for all `connect`ed text inputs. This can be done either as a prop (confirmed working with redux-form's `<Field>` component) or as an options arg to `connect`. Those inputs are now vulnerable to the state/props sync issue that exists in v4, but will not have the #525 cursor issue.

Apps using React v16 (or whatever version includes https://github.com/facebook/react/pull/8204), or using Preact as a drop-in replacement for React should not have to set `react15CompatibilityMode` to true at the component level at all... just set `<Provider react15CompatibilityMode={false}>` .

Once React v16 becomes the popular choice, we can switch the default from true to false. Once v15 support is dropped, we can backout this change completely.


",jimbolla,2016-11-28 21:33:29
540,2016-11-12 23:40:51,"Have you run any perf tests on this? I assume it basically gets us back to 4.0 levels of speed, correct? That should be fine, since we're not regressing on speed at all. We can make a big warning label at the top of the release notes about it so no one misses the opt-out.
",timdorr,2016-11-28 21:33:29
540,2016-11-15 20:53:00,"@timdorr Currently swamped with other things. Will perf test when I have a large block of time. Hopefully this weekend.
",jimbolla,2016-11-28 21:33:29
540,2016-11-21 03:17:10,"Added a commit to remove the Provider API as requested. Again, we should be having people set this on a per-component basis, defaulting to `true` for 5.0 and defaulting to `false` for 5.1. This ensures a safe release that doesn't upset users, while still giving them an option to enable the more performant option if they deem it safe.

Also, I rebased this against the latest `next`, so the tests are now running against React 15. I'm sure the same behavior existed in 0.14, but this ensures we're dealing with the most popular version in use.",timdorr,2016-11-28 21:33:29
540,2016-11-21 05:48:40,@timdorr why remove the provider api? I want to use this compat mode for redux-form components but want everything else in the app to use the efficient sub ordering. Having to set this on each connected component seems an unnecessary chore. have it be defaulted to true in 5.0 but why make opting into performance more difficult than it needs to be?,gnoff,2016-11-28 21:33:29
540,2016-11-21 06:33:10,"Just wrap connect and curry the options:

<S_CODE_TOKEN>

(On my phone, so I hope that came out right...)",timdorr,2016-11-28 21:33:29
540,2016-11-21 07:19:29,This works but it also means code modding / find replacing a large number of files with the need to do so again as soon as 5.1 comes out. I'm not adamant that this get added back in but the trade offs aren't cost free for users ( I realize they aren't cost free for the lib either since it requires supporting ). I could be misguided here but I think the cost is higher on lib consumers. Just lending my annecdote to @jimbolla intuition that a configurable global default might be desired.,gnoff,2016-11-28 21:33:29
540,2016-11-21 14:45:04,"@timdorr I'll concede taking it out of provider, but we should leave in the ability to pass the setting from props/context. Props is especially important if you want to control it through a library such as redux-form that hides the `connect` call. ",jimbolla,2016-11-28 21:33:29
540,2016-11-21 15:56:07,"Sorry, I'm not trying to be dismissive. Obviously I want this to be an awesome release for most users. I haven't run into a situation like this before where we essentially need to define a global to configure a library. I do want to get this right and not just shove something somewhere, because I feel like we'll live to regret that decision 😱 

What about a singleton module? 

<S_CODE_TOKEN>

It could also be generic: `setDefaultOptions({ ... })`",timdorr,2016-11-28 21:33:29
540,2016-11-21 19:46:13,"Would it make sense to just put the method on connect instead of being a top level export? Like this:

<S_CODE_TOKEN>

I think it makes it more clear that it's a setting that affects `connect` like this.
",jimbolla,2016-11-28 21:33:29
540,2016-11-21 19:48:09,"Frankly it all seems ugly any way you look at it, but I could get behind adding a method to `connect` like that.  ",markerikson,2016-11-28 21:33:29
540,2016-11-21 19:49:07,"@jimbolla Yeah, I think that works better. Maybe call it `connect.setDefaultReact15CompatibilityMode()` so it's clear that it's global and changes the default.",timdorr,2016-11-28 21:33:29
540,2016-11-21 22:16:02,Added `connect.setDefaultReact15CompatibilityMode()` to this PR,jimbolla,2016-11-28 21:33:29
540,2016-11-21 22:17:02,@jimbolla @timdorr @markerikson thanks all,gnoff,2016-11-28 21:33:29
540,2016-11-28 21:33:26,Cool. Let's do this thing!,timdorr,2016-11-28 21:33:29
539,2016-11-07 22:41:56,"I'm trying to figure out how to update the modal after it's been displayed, like to update a price estimate value.  Right now I'm able to `modal.add(myComponent, {})` to create a modal and render `myComponent` but I can't figure out how to update the component.  I could remove the modal and display it again with the new props but that would discard the user updates inside the modal, such as form fields.

I'm currently getting around this issue by using `connect()` on `myComponet` to link it directly to the store, but I'd prefer to use a basic component and not a redux container.  What's the best way to do this?  Maybe I should always specify a generic container for the modal and one of the options will be the actual component I want displayed?  I feel like the problem will be that the container will need to know about every property any modal will need and will pass those to every modal it displays.",clindsey,2016-11-07 22:51:34
539,2016-11-07 22:51:34,"Uh... this question needs a lot more context to make sense.  What modal?  What's `modal.add`?

For that matter, this is really a usage question, and should be asked on Stack Overflow, since it's not a bug or a feature request.

It sounds like you might want to go read Dan Abramov's description of a generic modal dialog manager in Redux.  See http://stackoverflow.com/questions/35623656/how-can-i-display-a-modal-dialog-in-redux-that-performs-asynchronous-actions/35641680 , and a couple other similar articles at https://github.com/markerikson/react-redux-links/blob/master/redux-techniques.md#ui-and-widget-implementations .
",markerikson,2016-11-07 22:51:34
539,2016-11-07 23:06:59,"@markerikson oops, I meant submit this to a completely different project, I guess I had the wrong window open.  my bad
",clindsey,2016-11-07 22:51:34
539,2016-11-07 23:26:45,"Gotcha.  Out of curiosity, what project?
",markerikson,2016-11-07 22:51:34
539,2016-11-07 23:53:14,"https://github.com/diegoddox/react-redux-modal
",clindsey,2016-11-07 22:51:34
538,2016-11-07 22:02:00,"See #433 for discussion.

I tried using DT's but I found some issues (connect with no argument was not adding dispatch prop, and some API calls where not possible). I fixed the issues for the most common use cases, described below.
The rest of the API should work like it does with DT version.
Please note: **always define templates for your connect calls** or you **will** have issues/subpar type checking (inference engine will replace non-inferable templates type with `{}`).

API Ref that we should targeted as much as possible: https://github.com/reactjs/react-redux/blob/master/docs/api.md#examples

These are the supported use cases that I tested and that 100% type check without any error or leniency:

### 1. Inject `dispatch` and don't listen to store

<S_CODE_TOKEN>
- `AppState` is used as a template for the Dispatch type, as required by redux typings
- `OwnProps` exposes the component with its props signature, without complicated `InferableComponentDecorator` that won't allow me to inject dispatcher.

### 2. Hydrate action creators without subscribing to the store

<S_CODE_TOKEN>

### 3. Inject `dispatch` and props from global state

<S_CODE_TOKEN>

### 4. Inject props from global state and hydrate action creators

<S_CODE_TOKEN>
- `AppState` describes your App's state
- `OwnProps` describes your component's outside props (the ones that the parent component should specify)
- `StateProps` describes the component's props that come from the global state
- `DispatchProps` describes the component's props that come from hydrated action creators

Honestly, I only use case **(3.)**

This should get us started. Please feedback!",bbenezech,2016-11-09 21:01:48
538,2016-11-08 12:06:30,"> Please note: always define templates for your connect calls or you will have issues/subpar type checking (inference engine will replace non-inferable templates type with {}).

That's not generally true, the pattern I use everywhere is this:

<S_CODE_TOKEN>

This saves a lot of typing clutter. 

Even if you connect component classes, you can omit type parameters if only you annotate arguments for `mapState` / `mapDispatch`:

<S_CODE_TOKEN>

This way `connector` would be a decorator for components accepting `MyProps` plus stuff returned from `mapState` / `mapDispatch` (inferred automatically). And returned component would accept `MyProps`.
",aikoven,2016-11-09 21:01:48
538,2016-11-08 12:37:12,"@aikoven 

<S_CODE_TOKEN>

You are not type checking StateProps return. If you typo your hash, you won't know it. Thus you actually want:

<S_CODE_TOKEN>

But then why not simply

<S_CODE_TOKEN>

The advantage is you get an error if you forget one of the generic argument, whereas you might forget to type check return types, argument types and lose some type checking, hence my warning, that was mostly directed to newcomers.
",bbenezech,2016-11-09 21:01:48
538,2016-11-08 14:13:42,"Job's done! 🎉 
Thanks for your time @aikoven ! Your review was terrifically spot on! 🎯 
",bbenezech,2016-11-09 21:01:48
538,2016-11-08 21:02:03,"Can this actually get built against the `next` branch? It would be a good idea for typings to show up in a major, rather than as a patch (they could be argued as minor, but I think we'd run into complaints there too).
",timdorr,2016-11-09 21:01:48
538,2016-11-09 04:31:38,"> You are not type checking StateProps return. If you typo your hash, you won't know it.

That's just a matter of taste. I prefer not to specify an interface for an object that is consumed just a few lines later. My point is that you don't _have to_ always specify type parameters because TS is quite good in inferring return types.

> If we do this:
> 
> <S_CODE_TOKEN>

That's not what I meant. The right one is:

<S_CODE_TOKEN>

Own props passed from outside, State props and `dispatch` merged into and passed to the wrapped component.
",aikoven,2016-11-09 21:01:48
538,2016-11-09 16:55:07,"@bbenezech Can you rebase against `next` and switch out the base for this PR (hit Edit at the top of the page)? Thanks!
",timdorr,2016-11-09 21:01:48
538,2016-11-09 20:35:30,"@bbenezech Looks like there's a conflict because the git branch isn't based on `next`. Can you rebase and force push your branch? I don't know if I can do that on my end with the collaborator permission on the PR. Thanks for working with me on this! 👍 
",timdorr,2016-11-09 21:01:48
538,2016-11-09 21:01:48,"@timdorr I can't change my own branch in edit. I opened a new PR.
",bbenezech,2016-11-09 21:01:48
537,2016-11-04 07:36:38,"- Even though redux is a peer dependency and is externalized two versions of redux can creep in prod builds when main project uses minified redux
- This change changes the minified react-redux for production builds reference minified version of redux while externalizing it",akaila,2016-11-04 13:29:03
537,2016-11-04 13:29:03,"This isn't needed. Your own production build process will do the minification for you. And this only provides references to the 'redux' package, so the version chosen by react-redux won't result in duplicates by itself.
",timdorr,2016-11-04 13:29:03
537,2016-11-04 14:03:43,"My main package includes both redux/bin/redux.min.js (which is recommended for prod builds) along with react-redux (which in turn references redux and not minified version of redux). When I run react-native packager on my project, it is obtaining redux twice as a result. We should not be referencing non-minified version of redux (in production env) from within react-redux. This is extending this guidance: https://facebook.github.io/react/docs/optimizing-performance.html
",akaila,2016-11-04 13:29:03
537,2016-11-04 14:06:30,"You don't need to reference pre-minified versions within packages themselves. When everything gets bundled up, the code should be minified and dev-only stuff should be removed. It does this process on the entire bundle _after_ it's been built.

You shouldn't refer to pre-built versions of libraries in your code. Just use normal modules and let your build tool optimize when it's done bundling.
",timdorr,2016-11-04 13:29:03
537,2016-11-04 16:23:44,"I would do that except in redux for debug builds there is an exception that pops up indicating I should be including the minified version. As I understood there was some code within if (**dev**) block that is culled in the prod builds.

Ref: https://github.com/reactjs/redux/blob/0139a9601dae810db533762c2bc4a745a37d4cf6/src/index.js#L20
",akaila,2016-11-04 13:29:03
537,2016-11-04 16:40:07,"I think I now get what you are saying. Please discard this request and thank you very much for responding quickly !
",akaila,2016-11-04 13:29:03
537,2016-11-04 17:59:21,"Yep, and that's what [all the junk above that](https://github.com/reactjs/redux/blob/0139a9601dae810db533762c2bc4a745a37d4cf6/src/index.js#L14-L19) is for. If you have your NODE_ENV environment variable set to ""production"" (which you should to get a faster production build of React), then all that gets turned into a `if (false) {}` block and will get eliminated from your final bundle.
",timdorr,2016-11-04 13:29:03
536,2016-11-03 13:30:04,,jsappme,2016-11-03 16:36:09
536,2016-11-03 14:08:07,"Can you provide more information?
",jimbolla,2016-11-03 16:36:09
536,2016-11-03 15:05:09,"absolutely, here is my code:

class App extends Component {
  constructor(props) {
    super(props)
  }

  render() {
    console.log(""this will be displayed twice"");
    return (
      <View style={{flex: 1}}>
      </View>
    )
  }

}

export default connect(mapStateToProps)(App)

""react"": ""15.3.2"",
""react-native"": ""0.36.1"",
""react-redux"": ""^4.4.5"",
""redux"": ""^3.6.0"",
",jsappme,2016-11-03 16:36:09
536,2016-11-03 16:13:11,"There are times when react-redux has to call a component's `render` twice, mostly related to child components dispatching actions on mount. Without seeing a complete code sample, I can only assume that's what you're running into.
",jimbolla,2016-11-03 16:36:09
536,2016-11-03 16:33:29,"You can see the complete code at https://github.com/jsappme/react-native-firebase-starter
",jsappme,2016-11-03 16:36:09
536,2016-11-03 16:36:09,"Not seeing anything actionable here.
",markerikson,2016-11-03 16:36:09
535,2016-11-01 19:40:00,"I was wondering why it is not possible to access state-derived props in `mapDispatchToProps`. For instance, given the following `mapStateToProps` function:

<S_CODE_TOKEN>

I would like to access `props.currentUser` in the corresponding `mapDispatchToProps`:

<S_CODE_TOKEN>

And if it is possible, how. Because I tried and could not. And I could not find anything about it in the documentation.",gnapse,2016-11-01 20:52:26
535,2016-11-01 20:02:56,"You can't access state in mDTP. But you can in mergeProps, so your `connect` would look something like:

<S_CODE_TOKEN>

I myself typically use `recompose` library to do is a slightly different way. I'd do:

<S_CODE_TOKEN>

One of the advantages of `withHandlers` is that it passes the same method to `YourComponent` every re-render, allowing it to optimize out of re-renders if it implements shouldComponentUpdate.
",jimbolla,2016-11-01 20:52:26
535,2016-11-01 20:50:30,"On the flip side, I personally tend to write a method on the component that explicitly takes a value from props and calls a bound action creator:

<S_CODE_TOKEN>
",markerikson,2016-11-01 20:52:26
535,2016-11-01 20:51:56,"Also, to better answer your question: while I don't have a specific reference off the top of my head, I _think_ the main reason `state` isn't available in `mapDispatch` is to improve perf.  Otherwise, you'd potentially be re-creating functions every time an action was dispatched and the store updated.
",markerikson,2016-11-01 20:52:26
535,2016-11-01 22:00:23,"Great answers folks! Lots of alternative ways to deal with it. And now I understand the reasons mentioned regarding performance. Thanks!
",gnapse,2016-11-01 20:52:26
534,2016-10-26 17:07:29,"I am seeing the following error in the Chrome dev tools:

<S_CODE_TOKEN>

The error happens when I `@connect` a component that contains another connected component somewhere deeply in the tree. The error is on the nested component, not the parent component. I have tried boiling this down to a minimally reproducible case, but I am having trouble coming up with one. When I remove the `@connect` from my top-level component, the error goes away. I haven't noticed any functional problems.

Any suggestions on creating a reproducible case?

FYI, the following case does **not** produce the error in the console:

<S_CODE_TOKEN>
",chrisvasz,2016-10-26 17:51:54
534,2016-10-26 17:16:58,"Hmm.  For reference, are you using the React-Redux v5 beta release?
",markerikson,2016-10-26 17:51:54
534,2016-10-26 17:27:04,"Whoops -- meant to include that in the original note. Yes, I am using 5.0.0-beta.3.

(PS -- And it's awesome!)
",chrisvasz,2016-10-26 17:51:54
534,2016-10-26 17:47:10,"Is it possible you have 2 copies of React Redux loading? 
",jimbolla,2016-10-26 17:51:54
534,2016-10-26 17:51:53,"Actually yes, that is exactly what's happening. Sorry for the false alarm!

For future reference: React uses the `instanceof` operator to check the type of `StoreSubscription`. Since I had two copies of React Redux loading, the left side of the `instanceof` check was a `StoreSubscription` from React Redux A, and the _right_ side of the `instanceof` check was from React Redux B. Whoops!
",chrisvasz,2016-10-26 17:51:54
534,2017-01-10 11:25:03,"Sorry, guys...but I have same error and still can't fix it. What do you mean 'two copies of React Redux loading'? In my case it looks like only one connect per component. 

p.s.: I'm not sure, but my 'root' component connects to redux and also using own context. ",plandem,2016-10-26 17:51:54
534,2017-01-10 11:45:17,"It means you're code is including more than one copy of react-redux. If you see this error, you likely have issues with how your app is being bundled. ",jimbolla,2016-10-26 17:51:54
534,2017-01-10 12:43:26,@jimbolla I include only once **react-redux** at each component where **connect** is required :(,plandem,2016-10-26 17:51:54
534,2017-01-10 13:14:18,"@jimbolla 

1) I have npm package with component that connects to redux (so it has dependency on **react-redux**). let's name it **MyProvider**

2) in my application I also connect other components, so it depends on **react-redux**

I moved **MyProvider** from npm package directly to application and there is no error anymore.

Is problem here? ",plandem,2016-10-26 17:51:54
534,2017-01-10 14:05:24,"I don't know enough about how you're bundling your code to be able to give you specific advice. General advice: run npm update and npm dedupe to make sure you don't have extraneous packages. If you're using webpack, you can use its visualizer tools to see specifically what's being included in your bundle.",jimbolla,2016-10-26 17:51:54
534,2017-01-10 14:29:36,"@plandem My problem was that I was creating two bundles: `common.js` and a page-specific js file. Because of an error in the way I was bundling, the code for react-redux ended up in both bundles.",chrisvasz,2016-10-26 17:51:54
534,2017-01-10 15:59:04,"ok, finally  I moved  redux support into differ npm package with peerDependency. Now it works fine. Thanks.",plandem,2016-10-26 17:51:54
534,2017-01-15 23:11:23,Happened to me today after upgrading `react-redux`. Seems to be caused by hot reloading. Simply restarting `webpack-dev-server` solved the issue.,Elijen,2016-10-26 17:51:54
534,2017-02-15 03:10:43,"I also had this problem. For me, I had a duplicate `react-redux` due to using `react-intl-redux` that has listed `react-redux` as a dependency and not a peer dependency.  I've decided to remove this package from my project and just use react-intl provider directly.",bjbrewster,2016-10-26 17:51:54
533,2016-10-26 15:18:38,"I am trying to [port](https://github.com/kevinresol/stateful/tree/rework) Redux into the [Haxe language](haxe.org) with the same compatible API. But due to the difference in the internal structure there are some context error when the port is used with react-redux. And this patch fixes that.

This patch shouldn't affect existing react-redux user, because the original Redux implemented `dispatch` as a closure over the internal `state` object and doesn't reference `this` at all. But please feel free to close if it is deemed not necessary. Thanks.
",kevinresol,2016-11-01 01:27:32
533,2016-10-26 16:13:43,"Can you clarify what the actual problem is that this tries to solve?

My gut says that there's been a couple past PRs to either Redux or React-Redux that tried to fiddle with binding for either `dispatch` or `subscribe`, but a quick search isn't turning them up atm.  Pretty sure this has been discussed in the past and been turned down, although I could be wrong.
",markerikson,2016-11-01 01:27:32
533,2016-10-26 16:29:44,"As I said, I am try to re-implement Redux and another programming language/transpiler. I implemented the store as a class and put the state as a member variable. As a result, the state object is referenced as `this.state` inside the `dispatch` function. React-redux passes the dispatch function around without caring about the context (and it doesn't need to, as mentioned in my original post) and that causes problem in my class-based implementation. I see that I can implement it the same way redux does, which is not really big deal. But I also think that patching here shouldn't be a big deal either (well, except breaking a couple equality tests because the bound `dispatch` is not the original `dispatch` any more). So... well, yeah, that's it.
",kevinresol,2016-11-01 01:27:32
533,2016-11-01 00:48:15,"Speaking from a position of zero knowledge (THAT MEANS IGNORE THE ORG MEMBERSHIP BADGE), it seems inconsistent to me that `getState` is bound, while `dispatch` isn't.
",taion,2016-11-01 01:27:32
533,2016-11-01 00:51:54,"Hmm.  Are you sure?  It doesn't look like it is.  It's defined free-floating at [createStore#L74](https://github.com/reactjs/redux/blob/master/src/createStore.js#L74), and returned at [line 250](https://github.com/reactjs/redux/blob/master/src/createStore.js#L250).  No binding of any kind going on there.  
",markerikson,2016-11-01 01:27:32
533,2016-11-01 00:54:14,"Sorry – I'm referring specifically to https://github.com/reactjs/react-redux/blob/v5.0.0-beta.3/src/components/connectAdvanced.js#L109-L111, as well as the test cases added in https://github.com/reactjs/react-redux/pull/465.
",taion,2016-11-01 01:27:32
533,2016-11-01 01:27:31,"For consistency, this should be done against the `next` branch instead, where we're binding `getState`, as @taion pointed out. Plus, it would be a good stress test to try and use that new branch with a reimplementation of Redux 😄 
",timdorr,2016-11-01 01:27:32
533,2016-11-01 02:19:35,"That's actually just matching the behavior in release, though – it's just that on the released branch, it happens implicitly because the only access to store state is by calling `store.getState()`.
",taion,2016-11-01 01:27:32
532,2016-10-26 03:52:00,"I tried using shallowEqual to compare prevProps and this.props in `componentDidUpdate`

The props seems equal, but shallowEqual says they are not when there's a date object in the props

<S_CODE_TOKEN>

Is this intended behavior?
",pcompassion,2016-10-26 04:06:31
532,2016-10-26 04:06:31,"Yeah, Date instances are actual objects, and two Dates with the same value are compared by reference, not contents (as far as I know).  See http://stackoverflow.com/questions/492994/compare-two-dates-with-javascript for some info.

For storing dates in Redux, it's generally better to keep them as strings or numeric timestamps, which are serializable and also comparable.
",markerikson,2016-10-26 04:06:31
532,2016-10-26 06:54:18,"ah ok.

Just want to clarify, I'm talking about props not state.  

Is using Date instance as props still anti-pattern?

So I guess I need to use different shallowEqual implementation because react-redux's implementation is meant to be used with state.
",pcompassion,2016-10-26 04:06:31
532,2016-10-26 16:07:57,"Ah... think there's some confusion here.

To clarify: as best as I understand it, two Date instances with the same value cannot be compared using reference equality ( `===` ).  Now, if you're literally passing down the exact same Date instance each time, then I think the equality check would return true, but if a new Date instance with the same value is being created and passed down, then the comparison would return false.

So, my working assumption is that it's generally going to be safer to _not_ pass around Date instances, and that you should pass around timestamp values instead.
",markerikson,2016-10-26 04:06:31
531,2016-10-25 20:24:46,"So I'm running into the problem that the connect() doesn't trigger after my dispatch and the store is out of sync or something when rendering/updating the component after a route change that fires a new dispatch.

I check my store via the React Context.

<S_CODE_TOKEN>

Then I do a console log of the context.store.getState() on each of the component its life cycles and even in the router after the await store.dispatch().

![The console.log](http://i.imgur.com/KDIah39.png)

A the start of the render function the context.store is suddenly the new data. The props inside of the render function is still the old data because connect() hasn't triggered before the component is getting updated.

My reducer isn't mutating the state its returning new objects like this

<S_CODE_TOKEN>

Does any of you know the problem and how to fix it.

Thanks.
",rodeyseijkens,2016-11-02 06:34:02
531,2016-10-26 14:29:31,"Can you try installing `npm install react-redux@next` to see if it fixes your problem?
",jimbolla,2016-11-02 06:34:02
531,2016-11-02 06:34:02,"Ok I figured it out, I accidentally created a new store every route change on the client side.
Normally it would give the warning that it couldn't be changed on the fly, but apparently it didn't.

Hope this may help other people that have this same function because all the other functionality was working correctly.
",rodeyseijkens,2016-11-02 06:34:02
530,2016-10-25 12:46:45,"I have an iframe that I'd like to have re-use the parent window's store.

In my iframe, I have:

<S_CODE_TOKEN>

Where callerWindow.store is the store created in the parent window.

However, when I change the state of something in the parent window store, the child/iframe does not re-render.   This makes sense to me as both windows have their own React instance... but I have no idea on how to somehow make React in the iframe get triggered/re-run (i.e., setState() called correctly) when the parent window's store changed.

I'm thinking the secret must be in connect.js: https://github.com/reactjs/react-redux/blob/master/src/components/connect.js  

Still looking.  Any pointers would be appreciated!
",sethcall,2016-10-25 13:11:00
530,2016-10-25 13:11:00,"I haven't figured it out, but I am thinking this is user error.    I'll update this if I find this does indeed work without any special work.
",sethcall,2016-10-25 13:11:00
530,2016-10-25 13:12:35,"Yes it works as-is.  I just had to get the store from the parent window and pass it in as shown above.  My problem was that my iframe was being cached and I was getting some false negatives.
",sethcall,2016-10-25 13:11:00
530,2016-11-16 15:58:21,"Hey @sethcall . I'm trying to do the same thing and struggling to reach the solution. Would you mind posting a gist?
",stephmilovic,2016-10-25 13:11:00
529,2016-10-24 11:20:59,"https://github.com/reactjs/react-redux/blob/v4.0.0/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options

argument `mapDispatchToProps`:  
link to ""bindActionCreators()"" is broken

I'm new to redux and react, not sure where is the right document.
",GongT,2016-10-24 15:59:31
529,2016-10-24 15:59:31,"Can you submit a PR to update it? Thanks!
",timdorr,2016-10-24 15:59:31
529,2016-10-24 16:00:31,"FYI, that was broken as of the 4.0.0 tag.  The current version of the file appears to be working-ish, although it points to reactjs.github.io instead of redux.js.org.
",markerikson,2016-10-24 15:59:31
528,2016-10-22 17:48:07,"I'm having some bundling issues related to `react-redux` importing `lodash` - getting a couple `require` calls in the output due to the module mixing several different module import styles.

`lodash` import [here](https://github.com/reactjs/react-redux/blob/68a4f2b78671329e10bfca87f8f1c82cc8690459/src/components/connect.js#L6)

original bug and minimal test repo [here](https://github.com/rollup/rollup/issues/1073)

sounds like switching the import to `lodash-es` might fix it...
",dyakovlev,2016-10-22 20:05:04
528,2016-10-22 20:05:04,"This is already fixed on the `next` branch. Use that one.
",timdorr,2016-10-22 20:05:04
528,2016-10-22 21:47:24,"<s>@timdorr Where can I find the official lodash next npm module?

Nevermind - got the repos mixed up.
",kzc,2016-10-22 20:05:04
527,2016-10-21 13:29:13,"It seems, that this [warning](https://github.com/reactjs/react-redux/blob/master/src/components/Provider.js#L13) is no longer relevant.

<img width=""601"" alt=""2016-10-21 16 22 59"" src=""https://cloud.githubusercontent.com/assets/5295025/19599698/abc0e948-97aa-11e6-9702-25b451e69106.png"">

<img width=""289"" alt=""2016-10-21 16 17 23"" src=""https://cloud.githubusercontent.com/assets/5295025/19599881/32d7080e-97ab-11e6-8a0f-f35e90d3ea07.png"">

This is confusing, and does not describe real issue - https://github.com/reactjs/redux/pull/667
",maullerz,2016-10-21 15:08:57
527,2016-10-21 15:08:57,"If the wording needs improvement, a PR would be best. But the basic idea of not automatically accepting store hot reloads still applies.
",timdorr,2016-10-21 15:08:57
526,2016-10-21 00:42:06,"I was toying with the idea of using mergeProps in lieu of mapStateToProps and mapDispatchToProps today and came across behavior I don't fully understand.

Currently the defaultMapDispatchToProps function will return the dispatch argument.

<S_CODE_TOKEN>

and the defaultMapStateToProps function returns an empty object

<S_CODE_TOKEN>

Why not have defaultMapStateToProps `return {state:state}`? This would allow someone to do:

<S_CODE_TOKEN>
",DillonGray,2016-10-21 01:20:52
526,2016-10-21 00:57:05,"The default allows connect to opt out of subscribing to store changes.  Useful when you just need to dispatch. Returning the whole state would be a huge performance deoptimization and is recommended against. 
",jimbolla,2016-10-21 01:20:52
526,2016-10-21 01:20:52,"To follow on with that: `connect`'s behavior is to take the object returned by `mapState`, and every time any of the fields in that object changes, re-render the child component.  In this case, the `state` field would have changed every time the store was updated, and therefore always cause those components to re-render.

I would flip around Jim's phrasing a bit. `mapState` is an opt-in approach.  You declare that a component should actually be subscribed to the store, and what data that component needs to extract.
",markerikson,2016-10-21 01:20:52
526,2016-10-24 18:00:21,"Thanks for the clear explanation, definitely a sensible approach.
",DillonGray,2016-10-21 01:20:52
525,2016-10-19 11:19:41,"I have an input field connected to a part of a redux store. When I type in the text field the cursor position is reset to the end of the text field. For example filling in ""123"", then attempting to insert ""abc"" at the beginning results in ""a123bc"". I've been unable to isolate the exact circumstances that cause this, but have a small reproduction at https://jsfiddle.net/1fm2cczq/. Occurs on 5.0.0-beta.3. Does not occur on 4.4.5.
",thefloweringash,2016-11-28 21:34:26
525,2016-10-19 13:57:57,"Hmmm yeah good find. I can reproduce this in my own app. This seems related to facebook/react#955, and my first hunch is that changing the subscriptions from firing bottom-up to top-down reveals this behavior. Will need to investigate further.
",jimbolla,2016-11-28 21:34:26
525,2016-10-19 15:39:53,"As an experiment, I wrapped an `<input>` with this component to see what happens, and this does correct the behavior. So it seems to me that the issue is related to controlled inputs needing to be updated earlier or else React sorta goes off the rails with cursor position.

<S_CODE_TOKEN>
",jimbolla,2016-11-28 21:34:26
525,2016-10-19 16:55:58,"I created a custom build of react-redux v5 that disables the top-down ordering so that subscriptions behave like v4. The cursor issue went away.  So I think I know what the problem is, but I don't yet have a great solution. So far, the first idea I have is to provide another option for `connect` that tells it to prioritize its store subscription before those of its parents. This option would have to be enabled for controlled inputs and textareas (I'm assuming) as a workaround for facebook/react#955 until that's fixed (if ever.)
",jimbolla,2016-11-28 21:34:26
525,2016-10-19 17:05:34,"Ew.  This... sounds nasty.
",markerikson,2016-11-28 21:34:26
525,2016-10-19 17:22:53,"@markerikson Indeed it is.

As another experiment, I just tried [switching React for Preact](https://preactjs.com/guide/switching-to-preact) in my own project and the bug goes away.
",jimbolla,2016-11-28 21:34:26
525,2016-10-19 17:26:35,"Hmm.  Pinging @gaearon and @timdorr for thoughts...
",markerikson,2016-11-28 21:34:26
525,2016-10-19 17:35:01,"Is there a build of react master available somewhere? I'd like to test this against that because I know there are other bugfixes related to controlled inputs in master that are supposedly gonna land in react v16.
",jimbolla,2016-11-28 21:34:26
525,2016-10-24 16:06:32,"@johnnycopperstone From what I gather from facebook/react#955, there are (at least) 2 scenarios in which this bug manifests itself, one being not updating the input's value prop soon enough (which is what I think is happening with react-redux v5) and one related to updating the prop with a value different than what's in the textbox, typically because of data altering (input masking or whitespace stripping, for example). Are you doing anything like that? 
",jimbolla,2016-11-28 21:34:26
525,2016-10-24 16:09:13,"Hey @jimbolla Sorry didn't see your reply - I just removed my comment as I realised it was a different issue and didn't want to pollute this issue. I was still using `15.0.0` and the cursor fix was in `15.0.1`
",johnnycopperstone,2016-11-28 21:34:26
525,2016-10-24 16:11:04,"> As another experiment, I just tried [switching React for Preact](https://preactjs.com/guide/switching-to-preact) in my own project and the bug goes away.

Well, Preact is pretty awesome, so I would suspect it's not going to see issues like this 😄  (Also, it doesn't have the huge event model that React does. Simpler code == less bugs)

> Is there a build of react master available somewhere? I'd like to test this against that because I know there are other bugfixes related to controlled inputs in master that are supposedly gonna land in react v16.

I'm not sure what's in it, but `react@next` is currently on 15.4.0-rc.4, so it might have some of that in there? It's from 10 days ago.
",timdorr,2016-11-28 21:34:26
525,2016-10-24 16:33:57,"@timdorr True, but our answer can't just be ""use Preact instead"" unfortunately. What I'm thinking...
- IMO, the new top-down ordering is the ""right"" way to do it, and much of the perf gains and many of the bug fixes are because of it. We could remove it, but that undoes a lot of the benefits of v5.
- This does seem like a bug in React that the new subscription ordering is exposing, but one that doesn't seem easy to fix, and even if it was, that fix wouldn't make it to release in a timely fashion, such that we can ignore it. I did pull and build react master, and the bug still exists.
- I'm guessing this bug might manifest itself in react-redux v4 if redux were to fire subscriptions in reverse order because of how it relates to the timing of which components receive new props first. I might try test this just for awareness of the issue.
- If we keep top-down as the default behavior, we need to make it as painless as possible to work around this issue, and make devs aware of it.
  - While it's certainly solvable in userland using the code provided above, I'd hate to force that on everyone, lest we be accused of creating javascript fatigue. 👅
  - The best solution I have right now is for `connect` (actually `connectAdvanced`) to offer an opt-in option that would allow that component to skip the subscription tree and subscribe directly to the store, making it work like v4. Devs that are using controlled text inputs would have to set this option to true. I don't know what to name this option. Libraries like redux-form would have to handle this as well. Docs would have to stress this as it's a bug that isn't discovered easily, because I doubt many devs test entering values in the middle of an input.
",jimbolla,2016-11-28 21:34:26
525,2016-10-24 16:37:15,"Oh no, I'm not suggesting everyone use Preact, just that it's awesome in its own right. That's ancillary to this issue. 
",timdorr,2016-11-28 21:34:26
525,2016-10-24 16:44:37,"> Devs that are using controlled text inputs would have to set this option to true. 

IMO this will be extremely confusing and hurt the ecosystem. There are enough gotchas already, we should fix this in the library rather than add options.
",gaearon,2016-11-28 21:34:26
525,2016-10-24 16:46:46,"> one being not updating the input's value prop soon enough (which is what I think is happening with react-redux v5)

I think that if you update it while event is being handled, React should understand it. If not, it's a bug and I'm happy to look into it, given a pure React (no RR) reproducing case.
",gaearon,2016-11-28 21:34:26
525,2016-10-24 18:39:05,"I think I can produce a vanilla React repro.
",jimbolla,2016-11-28 21:34:26
525,2016-10-25 14:32:14,"Here's a repro of the issue using redux + react-redux. I'm going to inline those to distill it down to vanilla react.

<S_CODE_TOKEN>
",jimbolla,2016-11-28 21:34:26
525,2016-10-25 21:30:04,"And here's the vanilla React version, that reduces (no pun intended) the issue down to its core:

<S_CODE_TOKEN>
",jimbolla,2016-11-28 21:34:26
525,2016-10-26 09:28:17,"@gaearon 
[repro with react only](http://www.webpackbin.com/E1rDED_1f): 

<S_CODE_TOKEN>
",Guria,2016-11-28 21:34:26
525,2016-10-26 13:27:01,"@Guria If you _change_ the value right after input, the cursor jump is expected. React can't guess where to put the cursor. So that is not a bug.
",gaearon,2016-11-28 21:34:26
525,2016-10-26 13:28:46,"@jimbolla This does not look like a bug to me. It is documented that `this.state` contains _the rendered_ value of the state. There is no guarantee that calling `setState()` will update `this.state` synchronously. Therefore, by reading from `this.state` you won't get the just-updated value.
",gaearon,2016-11-28 21:34:26
525,2016-10-26 13:50:59,"@gaearon But It's happening as part of the callback of setState(), which _should_ have the new state. But even still, if I store the state in a global variable and read from there instead of component state, it behaves the same way. This seems more related to when React reconciles the current value of the input's value prop with what's actually in the DOM element. Basically, by the time the callback to setState fires, it's too late. I can update the code to make this more clear.
",jimbolla,2016-11-28 21:34:26
525,2016-10-26 13:54:35,"Oh okay. `setState()` callback fires _after_ the DOM has been updated. Think of it as `componentDidUpdate()`. So this also seems expected unless I'm missing something. Generally I don't recommend using `setState()` callbacks at all precisely because lifecycles do the same but better.
",gaearon,2016-11-28 21:34:26
525,2016-10-26 13:55:30,"It would help my understanding if you showed a snippet with a global variable. The smaller example the better.
",gaearon,2016-11-28 21:34:26
525,2016-10-26 14:06:14,"Ouch, forgot about that render caused by setState is not synced with event. So my example definetely invalid.

> If you change the value right after input, the cursor jump is expected. React can't guess where to put the cursor. So that is not a bug.

Then is there a right way to make masked value with controlled input? Looks like an overkill to make class component here when it is just about transorming a value.
",Guria,2016-11-28 21:34:26
525,2016-10-26 14:13:25,"@gaearon I updated my above example to use global variable. You can toggle the `makeTheCursorJump` variable to see the 2 different behaviors. This is the core difference between react-redux master and next in its simplest form. A lot of the perf gains and the bugfix related to props/state being out of sync boiled down to this change.
",jimbolla,2016-11-28 21:34:26
525,2016-10-26 15:42:32,"It's a bit hard to tell what's going on but I can look deeper into it. My intuition is that you should almost never use `setState` callback, it's just a legacy API that happens to stick around. It has other weird edge cases too (e.g. it won't get called if you `setState` inside `componentWillMount` on the server). Unless I'm mistaken, it also happens _after_ the changes have been flushed to the DOM, so `setState` inside `setState` callback is a cascading render and generally not very good.

Could you explain why `setState` callback is useful to you, and why you'd rather wait for it than update the value immediately. Is this callback the thing you rely on to make `setState`s come in the parent-to-child order?
",gaearon,2016-11-28 21:34:26
525,2016-10-26 15:55:36,"Using the callback fixes #292, #368, and the many related issues by ensuring children components never recalculate props and rerender with stale props their parents.
",jimbolla,2016-11-28 21:34:26
525,2016-10-26 16:14:42,"Can you describe a high level overview of how you use this callback to solve this problem?
",gaearon,2016-11-28 21:34:26
525,2016-10-26 16:38:35,"Using the callback prevents the child components from receiving notifications that the store has updated, which triggers their update process, until after their parents have guaranteed to be giving them updated props.

In cases where there isn't an intermediate component that is blocking updates by overriding `shouldComponentUpdate`, the child components first see the new state and new props simultaneously during their `componentWillReceiveProps` as a result of the parent's `render` call. In this case, the cursor bug doesn't show up because react reconciled everything in a single pass, and the store notification ends up being a NOOP for the child component.

In cases where there is a blocker component (like `<BlockUpdates>` above), the children won't receive new props, but they'll be informed of new state from their `subscribe` callback, during the parent component's `setState` callback.
",jimbolla,2016-11-28 21:34:26
525,2016-10-27 13:44:52,"Can we use `ReactDOM.unstable_batchedUpdates` instead?
",gaearon,2016-11-28 21:34:26
525,2016-10-27 14:24:38,"I'm having trouble finding docs or source code for that. Is that in ReactDOM? Wouldn't that mean adding a dependency to `react-dom` to `react-redux`?
",jimbolla,2016-11-28 21:34:26
525,2016-10-27 16:09:32,"If I modify the above code like so:

<S_CODE_TOKEN>

the cursor bug still exists. If I modify it like this:

<S_CODE_TOKEN>

or like this:

<S_CODE_TOKEN>

the cursor bug goes away.

If I make the same change to `Connect`, the ""should pass state consistently to mapState"" test fails due to an increase in calls to mapState, but does not fail because of the wrong value being passed. Here's a diff of the relevant test to get it to pass:

<S_CODE_TOKEN>

when I do the update like this:

<S_CODE_TOKEN>

I was suspect of this, so I added logging like so:

<S_CODE_TOKEN>

and the output was this:

<S_CODE_TOKEN>

Notice the 2nd and 4th outputs should have actually caused the test to fail. But the failed assertions are swallowed inside `batchedUpdates`.
",jimbolla,2016-11-28 21:34:26
525,2016-10-27 16:19:41,"Actually it looks like the exceptions are getting swallowed because `Connect` wraps the selector functions in a try/catch and then rethrows in its `render`, but since it that particular render doesn't happen because it immediately gets recomputed with good values.
",jimbolla,2016-11-28 21:34:26
525,2016-10-28 15:02:53,"My point with `unstable_batchedUpdates()` was that it's the API designed for what you're trying to do (batching updates).

`setState` callbacks were designed for a different purpose (same as lifecycle hooks). So they're not the right choice here, and any direction forward will likely involve using `unstable_batchedUpdates()`.

It's unstable because in the future, React will batch updates by default. There are also some caveats. For example it depends on `ReactDOM` but we also need RN support. Relay solves it by having two [different](https://github.com/facebook/relay/blob/master/src/tools/relayUnstableBatchedUpdates.js) [files](https://github.com/facebook/relay/blob/master/src/tools/relayUnstableBatchedUpdates.native.js) (presumably RN chooses `.native.js` although I don't know for sure).
",gaearon,2016-11-28 21:34:26
525,2016-10-28 15:15:06,"batchedUpdates doesn't solve the problem though. The problem is child component updates need to be deferred until parent updates have completed and propagated new props to the children.
",jimbolla,2016-11-28 21:34:26
525,2016-10-28 15:28:03,"`batchedUpdates` seems to solve the issue of batching `render` calls, which isn't the problem here. The problem is that the `subscribe` listener is being fired before it has received updated props from its parent, unless you put it in the `setState` callback. In order to take advantage of `batchedUpdates`, the `mapStateToProps` calculation would have to take place later, in one of the React lifecycle methods that's in the purview of `batchedUpdates`. But moving that would require each listener to fire `setState` on every state change, as it is in v4, which has been shown to cause significant performance hit, such as in #398.
",jimbolla,2016-11-28 21:34:26
525,2016-10-30 20:32:36,"If `setState` inside `batchedUpdates` is slow, can you help me figure out why? I wouldn't expect it to be slow in this case, since it doesn't actually do the synchronous work and instead delays actual reconciliation until `batchedUpdates` exits. If it is slow, maybe we can fix this in React?
",gaearon,2016-11-28 21:34:26
525,2016-10-31 16:11:49,"I'd like to, but I have limited free time right now so I'm not sure when I can put time towards this.
",jimbolla,2016-11-28 21:34:26
525,2016-11-08 20:20:33,"So I saw there were some changes (facebook/react/pull/8204, facebook/react/pull/8207) in react master related to `setState` callbacks, so I decided to give this another test. The bug is fixed in react master branch right now.
",jimbolla,2016-11-28 21:34:26
525,2016-11-08 20:49:22,"Wow, that's cool 😮 
Let's wait for React 16 with this change then?
",gaearon,2016-11-28 21:34:26
525,2016-11-08 20:55:29,"@jimbolla Can you submit a PR to React with a test case for this?
",gaearon,2016-11-28 21:34:26
525,2016-11-08 21:48:28,"I confirmed commit https://github.com/facebook/react/commit/5f49b63bde09567fb3d52a13e3e264dfcda5cac6 (PR https://github.com/facebook/react/pull/8204) is the commit that fixes the problem. Bug exists when the above demo is run against its parent, but doesn't when run against it.

I'll see what I can do about turning that code above into a complete test, but admittedly, this will be pushing the limits of my JS/testing abilities. Assuming I can turn it into a test, do I submit it as a PR to react master?

I still need to test react-redux@next against react master to confirm the fix. I'm probably like 85% sure that it will work though.

@gaearon Do you have any insight into when React v16 might launch? Are we sure 8204 will be a part of that and not a 15.x minor release?

Is our plan to not release react-redux v5 to stable until we can bump our React dependency to whatever version includes the fix? If so, do we want to offer an interim solution for the users that want to use the beta? Something like:

<S_CODE_TOKEN>

This would be a temporary feature that bypasses the subscription ordering.
",jimbolla,2016-11-28 21:34:26
525,2016-11-09 17:45:34,"> I'll see what I can do about turning that code above into a complete test, but admittedly, this will be pushing the limits of my JS/testing abilities. Assuming I can turn it into a test, do I submit it as a PR to react master?

Yes.

> Do you have any insight into when React v16 might launch?

Likely within a few months but hard to say for sure.

> Are we sure 8204 will be a part of that and not a 15.x minor release?

It seems dangerous enough that it warrants a major release.

> Is our plan to not release react-redux v5 to stable until we can bump our React dependency to whatever version includes the fix? 

Yes, we can't release a stable version of React Redux that is incompatible with the stable version of React.

> If so, do we want to offer an interim solution for the users that want to use the beta?

If you feel strongly about it, sure.
",gaearon,2016-11-28 21:34:26
525,2016-11-09 17:56:03,"> Yes, we can't release a stable version of React Redux that is incompatible with the stable version of React.

We'll do it within a set of 5.0 and 5.1 releases. 5.0 goes with React 15 and has this extra option for those that need it; 5.1 goes with React 16 and doesn't need the option (basically, it switches default to enabled). Hence the 5.1 milestone on this issue :)

@jimbolla Can you prep a PR to add the option to reorder the subscriptions? Maybe call it `reorderSubscriptions`? It doesn't need to be lengthy and scary. It would be ignored in 5.1. 
",timdorr,2016-11-28 21:34:26
525,2016-11-09 20:07:55,"If we did a two phase. with the second one bumping the React dependency version, that'd be a breaking change and would require bumping up to 6.

I verified that react master branch does fix the issue in react-redux@next. I'm having trouble turning the repro code above into an automated test; react doesn't seem to respond to the keypress events i'm firing from js.

I'll be submitting a PR shortly that adds `react15CompatibilityMode` option. There's the global setting set via `<Provider react15CompatibilityMode={true|false}>`, which defaults to true. Whatever setting is set at the `Provider` level can be overridden at the component level either as a prop passed to the component or as an options argument to `connect`. This way we can release 5.0 without waiting for React 16, and anyone that wants to opt-in to the changes now can do so with minimal effort.
",jimbolla,2016-11-28 21:34:26
525,2016-11-09 20:31:27,"The React dep is [a peer dep](https://github.com/reactjs/react-redux/blob/master/package.json#L98) and 15 was [added in in a patch (4.4.1)](https://github.com/reactjs/react-redux/releases/tag/v4.4.1). We can expand to support React 16 when it's out at any time and stay within our lane on semver. React 15 and below would be buggy for this particular use case, but they still work. And besides, it's not our bug to fix.

All we would be doing in a minor release is changing the default from `true` to `false`. Even then, I believe that would count as a patch release (as nothing ""breaks"" as far as the API is concerned). The minor bump would be a convenience thing for users so they don't have to fight with the version string in their package.json too much.
",timdorr,2016-11-28 21:34:26
525,2016-11-10 00:07:18,"@jimbolla If you're able to make a simple test case depending only on React that exhibits the issue in a browser but you're struggling with jsdom, that would be very helpful and I can look at turning it into an automated test.
",spicyj,2016-11-28 21:34:26
525,2016-11-10 00:13:53,"@spicyj https://github.com/reactjs/react-redux/issues/525#issuecomment-256181787 is basically that. I just used create-react-app and then wrote that in App.js
",jimbolla,2016-11-28 21:34:26
525,2016-11-10 00:15:55,"Oops. I missed that. I'll take a look.
",spicyj,2016-11-28 21:34:26
525,2016-11-10 16:11:32,"@jimbolla With the compat option on, does the perf regress over 4.x? What is the main benefit of 5.x for the people while it's enabled?
",gaearon,2016-11-28 21:34:26
525,2016-11-10 16:36:39,"Hard to say without actually running another test battery. But I'd guess it's still is better perf in most cases because it still avoids setState/render calls unless final props have actually changed. Difference vs compat option off would be more more runs of mapStateToProps'n'friends and potentially extra renders if those extra runs produced different results between running with fresh props vs stale props.
",jimbolla,2016-11-28 21:34:26
525,2016-11-10 19:51:56,"I would like to see another perf test before 5.x is released with these changes so that we don't have a situation where React Redux is slow but everyone already uses it and are waiting for React to bump to 16.
",gaearon,2016-11-28 21:34:26
525,2016-11-28 21:34:26,Fixed via #540. Will be changed to default off when React 16 is released and we can push a 5.1 version.,timdorr,2016-11-28 21:34:26
525,2016-11-30 10:26:13,"Hi guys, 

I've read this thread and the source of `connectAdvanced.js` and I have one question,
why not just move  `notifyNestedSubs` from this line [this.setState(dummyState, notifyNestedSubs)](https://github.com/reactjs/react-redux/blob/next/src/components/connectAdvanced.js#L221) into `componentDidUpdate`

So you will get something like
<S_CODE_TOKEN>

I've created [jsbin example](https://jsbin.com/pavuqagoqe/edit?js,console,output) based on [vanila React example](https://github.com/reactjs/react-redux/issues/525#issuecomment-256181787) and it has no cursor bug.

What the real need to call nested subs notification in `setState` callback vs in `componentDidUpdate` ?


PS: I wanna say that setState callback in React@16 will be somehow similar to didUpdate, 
so if didUpdate solution above has some problems with current React version, looks like setState solution will have the same problems in React@16",istarkov,2016-11-28 21:34:26
525,2016-11-30 14:22:12,"Hmmmm. I could swear this did not work when I was testing it. But here it is. Well, I'll have to give this another go. Assuming this doesn't have significant perf impact or any other problems, this would eliminate the need for that stop-gap setting.",jimbolla,2016-11-28 21:34:26
525,2016-12-05 16:46:42,"@spicyj I was just wondering if you were able to make an automated test from this. If so, I'd like to see it for my own education.",jimbolla,2016-11-28 21:34:26
525,2017-02-20 15:31:44,"Hello, before posting a separate issue, can anyone here confirm that the behavior demonstrated in the following demo site is related to this issue...

To replicate the behavior, insert cursor after 42.00 in the input field. Hit the delete key twice and notice how the cursor jumps to the beginning of the input field.

demo site: [https://earlsioson.github.io/react-redux-input](https://earlsioson.github.io/react-redux-input)
source: [https://github.com/earlsioson/react-redux-input](https://github.com/earlsioson/react-redux-input)",earlsioson,2016-11-28 21:34:26
524,2016-10-18 04:43:43,,JulianMayorga,2016-10-18 11:47:52
524,2016-10-18 11:47:52,"Hi, thanks for the PR! I don't see the benefit of this change, so I'm inclined to close it.
In case there is any confusion, these two forms are completely equivalent in bundle size.
We are importing a specific module from Lodash rather than the whole Lodash.
",gaearon,2016-10-18 11:47:52
524,2016-10-18 22:06:40,"Hi, thank you for responding to my wordless PR! Sorry for not providing any kind of context in my PR, it was late at night and I was trying (and failing) to deploy a universal react-redux app.

I tried to deploy an app using zeit.co/now, but my build step was failing with an error that said `Module not found: Error: Can't resolve 'lodash/isPlainObject' in '/home/nowuser/src/node_modules/e3d8a6548416ea90c89022179a97a8ef8f8428d0/lib/components'`. This error was coming from react-redux, and I hacked a solution changing lodash with lodash.isplainobject. I really don't know why the latter works, because this error only happens on the remote deployment, everything works great in my machine.

I should have directly opened an issue in zeit/now instead of a PR here. Sorry for the inconvenience!
",JulianMayorga,2016-10-18 11:47:52
524,2016-10-18 22:38:20,"Maybe there's some issue that caused a wrong version of Lodash to be used in your setup?
",gaearon,2016-10-18 11:47:52
524,2016-10-19 12:25:57,"That may be the case, the problem is that the only things I know about this error are [these logs](https://full-stack-blog-app-ilsipdurew.now.sh/). Thanks anyways!
",JulianMayorga,2016-10-18 11:47:52
523,2016-10-17 20:13:48,"I have a very similar use case to https://github.com/reactjs/react-redux/pull/488

I've reused @bsideup's code as-is, with the same test. We've started moving to v5 in production, hoping to see this soon in there!
",neeharv,2017-02-18 14:26:40
523,2017-02-17 14:42:54,"Any update on this, @neeharv?",timdorr,2017-02-18 14:26:40
523,2017-02-18 07:24:01,@timdorr this slipped my mind completely! I'll work on the changes requested over this weekend,neeharv,2017-02-18 14:26:40
523,2017-02-18 08:19:27,@timdorr @jimbolla I've cleaned up the test and memoized the response of the factory. Also updated API docs. Do let me know if there is anything else you'd like me to do. Thanks!,neeharv,2017-02-18 14:26:40
523,2017-02-18 13:30:26,Can you revise the branch on the latest master? There are a lot of junk commits in here.,timdorr,2017-02-18 14:26:40
523,2017-02-18 14:26:40,@timdorr much easier to just do it in a new branch for me. The new PR is here is #626. Closing this so you can take a look there! Thanks.,neeharv,2017-02-18 14:26:40
522,2016-10-13 21:13:24,"So, it turns out it is very handy and useful to just provide ready-made connect functions for some common use cases. 

For example, our data fetching and caching subsystem provides it's own version of `connect()` that works exactly like the react-redux `connect`, except it can look at the output of `mapStateToProps` and if the values are instances of some special data-fetching-definition objects the same subsystem provides, it knows how to setup the initial data fetch and subsequent updates by passing through `dispatch` from `mapDispatchToProps` to `mergeProps` and so forth. 

The problem is in order to do this we had to look at and re-implement connect's internal handling of `mapStateToProps`, `mapDispatchToProps` and `mergeProps`. This is brittle - we have to rely on keeping the re-implemented behavior in sync with you, even though this is a simple matter so far.

The problem actually gets worse the more of these ready-made connect functions we want to implement. There is a relatively simple `connectForm` I wish to add to easily hook-up forms to our form handling subsystem. It just maps a well known area of the redux state (looking up forms by name)  to a form's `field` prop, and does a straight-forward map of form-related action creators to their respective event props. This _should_ be trivial, but isn't, again, because we have to re-implement all that default functionality and carefully merge in the handful of things we want to do. 

And worst of all the system breaks down entirely when trying to combine the two (e.g. a form that also needs to fetch its data) - it simply cannot be done. 

The approach I have in mind is to pass in the connect function the custom-connects call internally as a 5th argument, but this feels like it's slowly getting out of hand. 

Surely there can be a more well thought out composition mechanism provided by react-redux itself? I have some thoughts on how that could look but before I go down that road I'm wondering if there is existing work towards this, or if I'm missing a much more straight-forward way of solving these kinds of problems.
",rubyruy,2016-10-13 21:55:47
522,2016-10-13 21:20:40,"Can you provide a more concrete example? Also, take a look at the codebase in the `next` branch of react-redux, which is rearchitected to be more customizable. 
",jimbolla,2016-10-13 21:55:47
522,2016-10-13 21:21:58,"Actually, soon after I wrote this it occurred to me composition can be made trivial by applying the HoC factory returned by all these connects to each-other. 

E.g.

<S_CODE_TOKEN>

Sure it looks a bit ugly but I think that should work OK? And there is no real need for the custom connects to support the same `mapStateToProps` etc arguments as the regular `connect` - one just needs to wrap a component with both.
",rubyruy,2016-10-13 21:55:47
522,2016-10-13 21:24:59,"I've used successfully `flow` and `compose` from lodash to combine HOCs.

<S_CODE_TOKEN>
",epeli,2016-10-13 21:55:47
522,2016-10-13 21:25:00,"Re concrete example, here is the ""trivial"" implementation of `connectForm` that cannot be extended or combined:

<S_CODE_TOKEN>

... except, as I said above,  it actually _could_ be composed, like so:

<S_CODE_TOKEN>
",rubyruy,2016-10-13 21:55:47
522,2016-10-13 21:25:06,"FYI, you can use the `compose` utility to combine those together in a more readable form:

<S_CODE_TOKEN>
",markerikson,2016-10-13 21:55:47
522,2016-10-13 21:26:44,"Ahhhhhhhh - thank you @markerikson, it never occurred to me that it had applications for HoCs as well, not just middlewares :)
",rubyruy,2016-10-13 21:55:47
522,2016-10-13 21:27:13,"Amusingly, @epeli pointed it out at the exact same time I did, just right before your ""concrete example"" comment :)
",markerikson,2016-10-13 21:55:47
522,2016-10-13 21:27:42,"I was typing it too and then your answers came in. ;)
",jimbolla,2016-10-13 21:55:47
522,2016-10-13 21:29:00,"Right, thank you all :) 

Out of curiosity, given this seems to be a good and popular solution, what is the use case for the split up `connect` implementation in the `next` branch? Or is it just an internal clean-up?
",rubyruy,2016-10-13 21:55:47
522,2016-10-13 21:30:04,"If you're curious, #407 and #416 contain the info dump for the refactorings.
",jimbolla,2016-10-13 21:55:47
522,2016-10-13 21:30:08,"See #407 and #416 for the gory details, but it's basically a complete reimplementation to improve performance and fix edge cases.  Courtesy of @jimbolla .
",markerikson,2016-10-13 21:55:47
522,2016-10-13 21:30:22,"Okay, people, we have GOT to stop simul-posting... :)
",markerikson,2016-10-13 21:55:47
522,2016-10-13 21:32:08,"For me the most important thing is that it allows to write custom `connect()`s easily. Shameless self promotion: https://github.com/epeli/lean-redux
",epeli,2016-10-13 21:55:47
521,2016-10-13 15:31:58,"first,I want to monitor react-redux page performance,but I don't know when dom is rendered over,if connect can provider a callback for this ,I can monitor every container's performance
second,can react-redux support immutable.js?
",sheweichun,2016-10-13 15:36:20
521,2016-10-13 15:36:19,"This is a usage question, and should really be asked on Stack Overflow instead.

There are a number of existing tools for monitoring React-related performance.  Please see this page of [performance articles](https://github.com/markerikson/react-redux-links/blob/master/react-performance.md), as well as this list of [component monitoring dev tools](https://github.com/markerikson/redux-ecosystem-links/blob/master/devtools.md#component-update-monitoring).

Redux and React-Redux have no special support for Immutable.js, but yes, you can use it.
",markerikson,2016-10-13 15:36:20
520,2016-10-13 13:19:05,"Hello,

As I read in some other issue I can return a function from mapDispatchToProps, which will be called each time (own)prop changes.

I want to trigger an action when prop changes.

The current code I have (shortened a bit):

<S_CODE_TOKEN>

This works fine. If a prop of connected component changes - data is cleared. Connected component can call props.loadMore() to load more data.

But when clearAction is dispatched on the browser console I get:

<S_CODE_TOKEN>

How to fix that? How should I do this properly?
",dzek69,2016-10-13 15:42:37
520,2016-10-13 13:27:20,"I think the best place for this question is probably stack overflow.

However, `mapDispatchToProps` intent and responsibility is to pass dispatch to your functions that you are wrapping.

The functionality that you are describing is probably best in `componentWillRecieveProps`, you would use the newProps coming in to do your checks and then invoke the functions that are wrapped with `mapDispatchToProps`

Hope this helps.
",Austio,2016-10-13 15:42:37
520,2016-10-13 13:33:46,"Don't try to dispatch actions inside `mapStateToProps`. This is not allowed. Perhaps we could do a better job in the docs and error messages to stress this.
",jimbolla,2016-10-13 15:42:37
519,2016-10-12 09:24:08,"ENoent:no such file or directory, open /xx/xx/xx/react-redux/.babelrc
",HKbool,2016-10-12 11:05:02
518,2016-10-12 00:02:07,"This fixes an eslint error that shows up after running `npm update` and getting latest eslint stuff.
",jimbolla,2016-10-12 00:29:01
517,2016-10-09 22:55:47,"The `current` variable would be set to `null` when `clear()` was called, which would cause an exception if there was more than one listener.

Since this pattern was modeled off of `createStore()` in `redux`, you can see it does the same thing as this [here](https://github.com/reactjs/redux/blob/master/src/createStore.js#L175-L179).
",appden,2016-10-14 02:15:54
517,2016-10-10 02:46:08,"Do you have a failing repro so that we can add a test that covers the behavior change? 
",jimbolla,2016-10-14 02:15:54
517,2016-10-14 01:19:59,"@jimbolla I rebased and amended the commit to include a test that would fail with an exception prior to this change. It's a pretty contrived reduction of what happened in my codebase.
",appden,2016-10-14 02:15:54
517,2016-10-14 02:01:37,"Looks good to me. Second opinion, @markerikson or @timdorr? 
",jimbolla,2016-10-14 02:15:54
517,2016-10-14 02:15:51,"Sounds good!
",timdorr,2016-10-14 02:15:54
517,2016-10-31 17:50:54,"Would you mind releasing another beta version of so I can use an official version of this module? Thanks!
",appden,2016-10-14 02:15:54
516,2016-10-09 00:19:21,"In [this issue](https://github.com/reactjs/react-redux/issues/237) one supposed strategy to bind action creators to selectedState is to use mergeProps, which seems a good idea as opposed to passing state to mapDispatch for the reasons mentioned in the issue. But when using mergeProps to achieve this, i defeat   any memoizers that try to return the same objects, because as mergeProps will always be called, it will always return new bound functions. As far as I can tell, mergeProps does not have the possibility of a factory method as mapState and mapDispatch have. 

I currently try to workaround this problem by adding the memoizer in my dumb component, updating in the constructor and in componentWillUpdate()

Are there any reasons against this addition?
Or is it such an edge case that we do not even want the few lines of code, we need to add for that, and the little time this would additionally need on the creation of the component.

If this is the case, I feel like we should add a proposal on how to work around this somewhere (or just generally have a few about memoization and binding action creators).
And would the current workaround I use be valid here, or am I missing something there?
",johnzielke,
516,2016-10-10 02:42:35,"PR #488 was to address this but it was written against the wrong branch. I think it would be a good feature to have, if someone wants to reimplement it against the `next` branch. The test from #488 is probably still usable though.
",jimbolla,
516,2016-10-18 19:54:12,"#523 is also open to address this.
",jimbolla,
516,2016-11-21 23:45:15,"FWIW I created a library for doing memoized deep merging, but never got around to using it (I used a custom connect function instead). It anyone would like to use it, it can be found here: https://github.com/frankwallis/remerger.",frankwallis,
515,2016-10-07 17:16:19,"I am using [defaultMemoize](https://github.com/reactjs/reselect/blob/master/src/index.js) from the reselect library to memoize my dispatchToProps. Now the problem is, that the memoized function returned by defaultMemoize does not contain any arguments in its ""definition"" (And it will probably be the same way with any other generic memoization). This results in the function always having ""doDispatchPropsDependOnOwnProps"" set to true, even though i don't use any ownProps here. There should be an option to set this to false, even if the arguments length is 0. Or am I missing a different, better aproach here?
Here is some sample code to illustrate my current problem:

<S_CODE_TOKEN>

I could (and probably will for now) bypass this by only comparing the equality of the first parameter, but that seems quite hacky...

What are your ideas on this? This option should not be too difficult to add (I could create the PR myself), but if I'm missing another possibility please tell me!
",johnzielke,2016-10-07 18:35:46
515,2016-10-07 17:38:39,"Two questions:
- Why do you need to memoize `mapDispatch`?  If you're not asking for the `ownProps` argument, that _should_ only be called once at component creation time.
- While you certainly _can_ define functions inside of `mapDispatch`, defining them _outside_ has a number of advantages.  You can access the plain function definitions to test them, and you can pass them straight to `connect` for binding to `dispatch`.
",markerikson,2016-10-07 18:35:46
515,2016-10-07 18:13:02,"Based on what you've got there, I don't see why you need memoize at all.

You could replace makeMapDispatchToProps with:

<S_CODE_TOKEN>

This function would only be called once when your component is instantiated.
",jimbolla,2016-10-07 18:35:46
515,2016-10-07 18:35:46,"You are both correct, I always added the second argument when I wrote my code, because I didn't realize this could have any performance impact... I guess it could be great if we added that to the docs, so people won't stumble over this issue in the first place. Although in my case, I should have spotted that.. I should probably get some sleep :)
Closing this issue. You guys are great, thanks for your help with my (nonexistent) problem!
",johnzielke,2016-10-07 18:35:46
514,2016-10-07 12:49:54,"I have been working this issue for 8 hours. I guess I am too new to react/redux. The component SinglePostComponent does not re-render when state is updated through an async action. The component will display the PREVIOUS state every time I navigate to it from another component.

I have everything in [stackoverflow](http://stackoverflow.com/questions/39900395/component-not-re-rendering). In SinglePostComponent.jsx, 

<S_CODE_TOKEN>

In SinglePostContainer,

<S_CODE_TOKEN>

The action is

<S_CODE_TOKEN>

The reducer

<S_CODE_TOKEN>
",dsun29,2016-10-07 13:00:01
514,2016-10-07 13:00:01,"Please keep usage questions on Stack Overflow. This is a bug tracker. 
",timdorr,2016-10-07 13:00:01
513,2016-10-06 23:15:31,"I recently updated `react-redux@5.0.0-beta.3`. After doing so I noticed that after every code change HMR would cause a full page refresh do to an error. 

I looked through the stack trace and the error comes from `react-redux`.

<S_CODE_TOKEN>

I reverted back to `react-redux@4.4.5` and the error went away and HMR started working correctly again.

| software | version |
| --- | --- |
| react | 15.3.2 |
| webpack | 2.1.0-beta.25 |
| redux | 3.6.0 |
| node | 6.7.0 |
| npm | 3.10.3 |
",theverything,2016-12-10 23:12:48
513,2016-10-07 00:35:32,"@theverything I'm not exactly sure how to reproduce this. Any chance you can provide a repo?
",jimbolla,2016-12-10 23:12:48
513,2016-10-07 19:37:16,"I can't share the repo that the error is happening with, but I am trying to create an other one to reproduce the issue.
",theverything,2016-12-10 23:12:48
513,2016-10-10 20:57:09,"I haven't been able to create a project to reproduce the error. I did try the beta again in my current project and the error still persists. Let me know if there is any way I can help.
",theverything,2016-12-10 23:12:48
513,2016-10-10 21:02:19,"Is there any way you can share your project, even a stripped down one with me the demonstrates the problem? With that I could reduce the code into a test case.
",jimbolla,2016-12-10 23:12:48
513,2016-10-10 21:03:45,"I tried that but there was no error. 😞 
",theverything,2016-12-10 23:12:48
513,2016-10-10 21:13:36,"Maybe in stripping it down, you removed some key part that's causing react-redux to have the problem.
",jimbolla,2016-12-10 23:12:48
513,2016-10-10 21:14:09,"Thats what I'm thinking.
",theverything,2016-12-10 23:12:48
513,2016-10-18 20:04:32,"@theverything Anything I can do to help you with this? I'd love to resolve this one to help v5 make it to release. If you can't share your code with me, what about a screen-sharing session? Maybe from that I can see enough to make a repro without it.
",jimbolla,2016-12-10 23:12:48
513,2016-10-19 00:35:15,"Without a repro, there isn't really anything to be done here. I'll reopen if there is something that can be reproduced, but HMR itself is known to have issues and may be the culprit here. 
",timdorr,2016-12-10 23:12:48
513,2016-11-27 14:54:18,@timdorr Recently discovered the same error — [here’s the project](https://github.com/patrikholcak/hot-loader-demo/tree/81e03e19b4a22b68038431482d7cb225f5f25f90). If you try to HMR `./src/routes/counter.js` you’ll see the exact same error. Downgrading to `react-redux@^4.4.6` fixed it,patrikholcak,2016-12-10 23:12:48
513,2016-11-28 11:03:29,"Hi. guys. I ran into the same problem. Seems the reason is that connectAdvanced doesn't update link to subscription after updating. So I [added](https://github.com/reactjs/react-redux/compare/next...restrry:issues-513-hmr-error?expand=1) my updating mechanism and it works for my project.
If it's okay for you, I could add some tests and send PR",restrry,2016-12-10 23:12:48
513,2016-11-28 13:43:57,@restrry We'll have to make some changes to get it to merge with PR #540 but this is very helpful. Thanks.,jimbolla,2016-12-10 23:12:48
513,2016-12-05 16:44:48,"Does anyone, @patrikholcak, @restrry, know how to simulate HMR in a test?",jimbolla,2016-12-10 23:12:48
513,2016-12-05 18:41:42,"You might look at [how webpack does it](https://github.com/webpack/webpack/blob/master/test/HotTestCases.test.js). But it is pretty complex and I don't know if adding that to our infrastructure would be a good use of time. Better to spot test that on your own. 

If it's of any comfort, it's not an end-user feature anyways. So, the impact of fixing it does have a relatively limited audience. Not to say it's not important, just that you're not going to break everyone's app/site because of it :)",timdorr,2016-12-10 23:12:48
513,2016-12-06 09:05:54,"agree, we needn't such complex check, since it was already tested in webpack. but `react-redux` uses internal mechanism for detecting re-loading. doesn't it? detecting is based on [version comparison](https://github.com/reactjs/react-redux/blob/next/src/components/connectAdvanced.js#L251), but testing it could be quite hard. I thought to inherit from `Connect` class, add some methods for changing `version` and pass it to `createConnect` factory, but it seems to be overhead and fragile approach",restrry,2016-12-10 23:12:48
513,2016-12-07 16:35:31,"If you have a ref to the component, you should be able to do `component.version = -1` to make the reinitialization logic happen, but I think the part that's lost is how HMR affects the component's lifecycle.

I'm gonna spend some time on this in a couple weeks when I'm on extended vacation. I think the test is valuable because otherwise it might break again. The problem with having a bunch of really great tests is then things that *aren't* covered by them tend to be forgotten.",jimbolla,2016-12-10 23:12:48
513,2016-12-10 23:12:48,I just added PR #567 which fixes this. Thanks @patrikholcak and @restrry.,jimbolla,2016-12-10 23:12:48
513,2016-12-10 23:21:16,"Sweet! Can you recap what the problem was, and how the fix works?",markerikson,2016-12-10 23:12:48
513,2016-12-10 23:27:12,"Basically, `Subscription.tryUnsubscribe` was clearing `this.subscribe` so then it was null when the component tried to resubscribe when HMR was detected. I removed the clearing and refactored a little for clarity.",jimbolla,2016-12-10 23:12:48
513,2016-12-10 23:52:08,On Monday I'll check out your branch and try it with my app ,theverything,2016-12-10 23:12:48
512,2016-10-05 18:14:41,"Sometimes I want to subscribe my components on actions. 

For example:
- `LoginFormContainer` should redirect user to some page when `LOGIN_FULFILLED` action is dispatched
- `CommentFormContainer` should show [alertify.js](http://alertifyjs.com/) popup when `COMMENT_CREATE_FULFILLED`

I understand that I can implement this with flags in store and `componentWillReceiveProps` lifecycle method. Also, this is achievable with store, which can be found in context or custom middleware. But I think both ways are not very convenient.

I propose adding one more wrapper to `react-redux` which will be called `subscribe`. Example usage:

<S_CODE_TOKEN>

I created a [gist](https://gist.github.com/iLikeKoffee/b85c9c6c5a0f0f4608ff1128cd54fc00) with `subscribe` pseudo-code implementation

P.S. The other way is adding one more argument to `connect()` and implementing action subscription there. As for me, I don't think that this is a good idea, but it should be discussed.

P.P.S If there will be a PR with such functionality, has it chance to be merged? Or action subscription contradicts with redux/flux philosophy?
",iLikeKoffee,2016-10-05 18:31:51
512,2016-10-05 18:31:51,"This doesn't fit in with the React lifecycle model. Your component should be willing to change how it renders or does certain things depending on the props passed to it. If you need to handle a particular action, that's business logic that should be encapsulated in your reducer(s). This conflates two separate concerns too directly, leading to coupling and less scalable code.
",timdorr,2016-10-05 18:31:51
512,2016-10-05 19:17:19,"This is also a good use case for `redux-saga` or other similar middleware.
",markerikson,2016-10-05 18:31:51
511,2016-10-05 14:02:14,"Reverts reactjs/react-redux#508. 

The warning() call is incorrect. Also, the messaging is confusing and the backtrace is not very helpful. The DX this is supposed to improve actually detracts from it somewhat IMHO. We can try this again later.
",timdorr,2016-10-05 14:02:19
510,2016-10-04 16:33:50,"connection function is the key to understand react-redux,
and it's complicated.

I am wondering why the author doesn't provide detailed information to explain the implementation of connection function, at least embed a few comments in the sourcecode.

If its too hard for newcomers to learn, they will turn to other frameworks like vue
",zhangk2000,2016-10-04 23:56:14
510,2016-10-04 16:57:25,"@zhangk2000 : Are you more concerned about the _use_ of `connect`, or its implementation?

For usage, the basic approach is described in the Redux docs at http://redux.js.org/docs/basics/UsageWithReact.html , and the API docs are at https://github.com/reactjs/react-redux/blob/master/docs/api.md .  There's also numerous tutorials online that describe how to use `connect`.

For implementation, to some extent that's supposed to be something that users don't have to worry about.  In fact, the upcoming React Redux v5 version completely changes the internal implementation, without changing the public API at all.  That said, Dan wrote a gist that shows the basic idea of what `connect` does, at https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e .  There was also a video where Dan walked through the current (v4) version of `connect` and explains it, at https://youtu.be/VJ38wSFbM3A .The v5 implementation is described in #407 and #416.

Do you have any specific questions or concerns about the docs?
",markerikson,2016-10-04 23:56:14
510,2016-10-04 17:39:42,"In addition to what @markerikson said, there's also more comments in the new version, currently in the `next` git branch. I tried to add comments to the stuff that is not-obvious, but what's obvious to one person, won't be the same was what's obvious to another. If there's specific areas of the code that you feel need greater explanation, please point them out.
",jimbolla,2016-10-04 23:56:14
510,2016-10-04 18:00:43,"Thanks @markerikson & @jimbolla 

I have two questions about the wrappedcomponent generated by connect function, .
1. the state of every wrappedcomponent is the whole state tree ? 
2. trigger re-rendering of wrappedcomponent based on the state selected in mapstattoprops()?

these concepts should be clarified in the introductory, or people will get confused.
",zhangk2000,2016-10-04 23:56:14
510,2016-10-04 18:08:29,"1. Yes, the state argument passed to mapStateToProps is the root of the state tree in the store.
2. Yes, typically the component will rerender based on a new value produced by mapStateStateToProps. It's actually based on the output of mergeProps, but its default value will almost always produce a new value if mapStateToProps did.
",jimbolla,2016-10-04 23:56:14
510,2016-10-05 00:12:09,"I still say it'd be nice to have the React-Redux docs published in a more static form like Redux's.  (But it's not a high enough priority to actually make it on my todo list atm.)
",markerikson,2016-10-04 23:56:14
510,2016-10-05 00:28:02,"I think we just more prominent linkage from this repo to the docs in Redux. I don't want to get too crazy with the docs here, outside of really good reference documentation.
",timdorr,2016-10-04 23:56:14
510,2016-10-05 00:31:00,"Yeah, given that we now have some more examples in there thanks to @jimbolla , I can live with that.
",markerikson,2016-10-04 23:56:14
509,2016-10-03 10:48:03,"Consider the following where both components are connected to a store:

<S_CODE_TOKEN>

hasChild is a parent prop that is received from store.

If a single action changes both hasChild and a separate property that affects the child, first Child's render is called and only then Parent's render is called removing Child from the tree (unlike normal react flow)

Currently I used shouldComponentUpdate in `Child` to prevent redundant renders, but that involves implementing shouldComponentUpdate in every case. 

Any ideas for a generic solution?
",ynonp,2016-10-03 13:28:51
509,2016-10-03 11:26:03,"This is fixed in v5, which is currently in prerelease. You can try it out by `npm install react-redux@next`
",jimbolla,2016-10-03 13:28:51
509,2016-10-03 13:41:33,"You can also workaround this by enabling batched updates http://stackoverflow.com/questions/38099512/redux-child-receiving-props-before-parent/38102408#38102408
",epeli,2016-10-03 13:28:51
509,2016-10-03 14:06:13,"Thanks @epeli this worked very well! BTW is this the way you solved it in v5?
",ynonp,2016-10-03 13:28:51
509,2016-10-03 15:19:31,"Nope. Doesn't rely on batched updates. Basically, control the order of subscriptions to always fire top-down. Details are in #416 and #407 if you're curious.
",jimbolla,2016-10-03 13:28:51
508,2016-10-02 13:25:04,"Fix #499  - check in dev mode if same key appears in own props and store props and warn
",ynonp,2016-10-02 17:01:49
508,2016-10-02 17:01:47,"LGTM. Thanks for the refactor!
",timdorr,2016-10-02 17:01:49
507,2016-09-28 16:59:52,"There was some [good discussion](https://twitter.com/ryanflorence/status/779320581678174208) on Twitter (between @gaearon, @markerikson, @timdorr, @mjackson, @ryanflorence, et al.) about `connect`'s component implementing `shouldComponentUpdate`.

If I understand correctly, the main issue being that any component wrapped in `connect` then blocks updates related to context changes, and this has an adverse impact on libraries that pass data via context that need to trigger rerenders (such as React Router's Link component.)

The changes in the `next` branch of React Redux make its implementation of `shouldComponentUpdate` much less necessary, mainly because now `setState` is no longer called as a response to every store state change, but only if the final merged props have changed. So now when `shouldComponentUpdate` is called as a result of calling `setState`, it's always going to return true anyways. (The call to setState could probably be replaced with forceUpdate and would work exactly the same.)

In the case of `shouldComponentUpdate` being called after receiving new props from parent, it's effectively just acting like `PureComponent`. That responsibility can be given to the components being wrapped, which would have better knowledge about if/how they should implement `shouldComponentUpdate`. I personally would use recompose and do something like:

<S_CODE_TOKEN>

An alternative to removing connect's `shouldComponentUpdate` completely would be to make it an another `option` argument, and decide whether it should be opt-in or opt-out.
",jimbolla,
507,2016-09-28 17:04:46,"Oh boy, this oughta be good... :)
",markerikson,
507,2016-09-28 17:14:23,"Just to be clear and make sure everyone understands what's going on, here is the situation with something like react-redux and React Router:

<S_CODE_TOKEN>

In this case, `<Router>` is providing a context that `<Link>` is consuming something like this: 

<S_CODE_TOKEN>

(That's a crazy over-simplification, but it gets the point across)

If the URL/location on the page changes, then that information should propagate from the `<Router>` to the `<Link>` via `this.context`, causing it to potentially re-render. Context is a way to cross the boundaries of direct Component-to-Component communication via props. 

The problem lies with `shouldComponentUpdate` not being able to take into account changes on `this.context`. The `connect()`ed component thinks nothing has changed with its props during this time (which is true!), so it tells React that it shouldn't re-render this component (or _anything underneath it, including the `<Link>`!_).

Hopefully that explains the situation well enough. How to fix it is another matter :)
",timdorr,
507,2016-09-28 17:17:11,"I think react-redux's use of sCU is fine. We've already got [an issue open on the router](https://github.com/ReactTraining/react-router/issues/3961) (v4 branch) to stop using context to communicate state changes to `<Link>`s. This should make it much easier to use the router in a redux app.
",mjackson,
507,2016-09-28 17:21:45,"So, I'm wondering if you could store the props for the `WrappedComponent` in state (thereby creating the comically confusing `this.state.props`) and then rather than on `this.selector` outside of React's knowledge.

Basically, you would change [this line](https://github.com/reactjs/react-redux/blob/next/src/components/connectAdvanced.js#L202) to store `this.selector.props` in state. You still get the appropriate update behavior, but you don't block things underneath. 

BTW, there's already a potential opt-in option: `pure`. We can use that to determine if we should or should not turn on sCU usage.
",timdorr,
507,2016-09-28 18:15:34,"@timdorr I don't think changing where the computed props are stored would unblock things. The issue is that the implementation of `shouldComponentUpdate` can't do ""the computed props have changed **or something in context has changed**"". I'm pretty sure there are some open issues in React about adding new methods for components to communicate context changes, but that doesn't help us today.
",jimbolla,
507,2016-09-28 18:25:48,"Actually, that is correct, though it would be a bit more idiomatic React to store something in setState, rather than use it as a workaround to forceUpdate. 

But sCU needs to be removed for it to stop interrupting context propagation. I don't think there would be any problem with doing that right now since the props are stored and precomputed by the selector.
",timdorr,
507,2016-10-19 22:39:50,"Does adding this to the 5.0 milestone mean that it will be done in 5.0? I'd like to see it for reasons unrelated to React Router: I keep the current user in `context` in my app and make changes to it (e.g. changing the profile picture).
",levity,
507,2016-10-24 16:04:01,"@jimbolla How about we do this as a test release (5.0.0-test.1) and see what the effects the community can find? I'd also love to have a benchmark suite available so we can have an objective analysis on our own, but that could work in a pinch until we get something built out.
",timdorr,
507,2016-10-24 16:11:08,"I'm not opposed to that. But do we want to remove sCU completely or make it opt-in or opt-out? The code changes are easy either way, but tests will need tweaked and docs updated.
",jimbolla,
507,2016-10-24 16:14:37,"I'd go with opt-in. Most users don't need it and it's an optimization that comes with side effects, so turning it on should be a conscious decision by the user. Plus, we can document those side effects to warn people about it ahead of time.
",timdorr,
507,2016-10-24 18:40:28,"Ok. That should be easy enough to implement. What should the option be called?
",jimbolla,
507,2016-10-24 21:51:56,"Can it be combined/tacked-on to the `pure` option perhaps?
",timdorr,
507,2016-10-24 23:26:49,"Probably not. You usually want `pure` on and this new option off. Setting `pure` to false means every store state change triggers a rerender for every connected component.
",jimbolla,
507,2016-11-03 12:59:20,"Would it make sense to pass predicate with the options how shouldComponentUpdate check for update? I would want one selector with many properties that changes or not depending on some index, to connect in with different ""Value"" components. One Value component would display only one value - property but it would be connected to the same memoized selector. 

something like:

<S_CODE_TOKEN>

Cheers
",primozs,
507,2016-11-03 16:15:59,"@primozs I don't really understand your use case. When would you want a component that received changed props to not re-render?
",jimbolla,
507,2016-11-03 16:18:30,"Depending on how #525 is resolved, we may need to just leave this alone, because it's possible the solution to that could require calling `setState` on every store update again. I don't think we can make a final decision on this until that one is resolved.
",jimbolla,
507,2016-11-08 20:59:39,"Based on the findings in #525, let's put this on a 5.1 release and wait for React 16 to push that out (so users can easily clamp down to the 5.0 if they can't upgrade from React 15 easily).
",timdorr,
507,2016-12-04 11:49:59,"Why not just compose->replace shouldComponentUpdate?
If user defines its own it do not get shadowed but istead composed with react-redux one.
Maybe a chain of middleware (or just composed with logical ord) composed of sCU of various modules in the app (like some generalReactRouterShouldComponentUpdate which checks changes in context that uses)
executed like short-circuit logical or, could work.
Takeaway:
if component implements sCU -> get composed and replaced with react-redux sCU
react-redux offer an api to register application-wide sCU",freddi301,
507,2016-12-05 15:43:11,"It looks like the fix for #525 didn't affect whether we need to change our plans on this. So my opinion is we should just remove sCU completely... at least as the long term plan. The question being whether we offer a migration path in interim versions or not. Since removing sCU could have negative perf impact on someone relying on it to prevent unnecessary rerenders in their own components, I think we should treat its removal as a breaking change, which would mean it would land as version 6.0.

I suggest we:
1. Land 5.0 with what we got.
2. Give that a couple months for everyone to upgrade and shake out any issues.
3. Land 6.0 with sCU removed, and release notes that offer alternatives (extend PureComponent or use one of recompose's several related HOCs.)
",jimbolla,
507,2016-12-05 16:57:40,"Just to recap and check my own understanding: `connect` implements `sCU` to handle the ""props from any parent -> connected child"" case as an extra perf benefit, right?  So, no intrinsic _requirement_ that `sCU` be there, just trying to cut down on re-rendering?  And then the problem as described here is that that `sCU` interferes with context for other libs?

**edit** Boy, I should really go back and re-read the start of the thread.  Yes, that's apparently the case.",markerikson,
507,2016-12-05 17:03:25,"The 4.x implementation relied more heavily on sCU because of its order of operations when a store change is made. With the new implementation's avoidance of setState unless it's really necessary, that's no longer the case. Now, sCU will always be true if it's firing in response to a store change. It can only ever be false if it's happening because of receiving new props from parent.",jimbolla,
506,2016-09-28 09:43:09,"When code gets uglified for production builds, original names of identifiers gets lots and React components show up with their uglified name. To remedy this, `displayName` can be set explicitly.

For `React.createClass` style components, displayName gets automatically set by babel.
React components declared using ES6-classes however, have mangled names. This is the case for `Provider`. With this PR, the name is explicitly set which should make the name survive the uglification process.  
",roncohen,2016-09-28 13:44:17
506,2016-09-28 13:21:35,"Can you make this against the next branch? master isn't likely to get another release and it would be good to have in the upcoming 5.0 release.
",timdorr,2016-09-28 13:44:17
506,2016-09-28 13:43:37,"@timdorr done!
",roncohen,2016-09-28 13:44:17
506,2016-09-28 13:44:14,"Thanks!
",timdorr,2016-09-28 13:44:17
505,2016-09-27 14:17:52,"Please see: http://jsfiddle.net/3xwkg3p6/80/.  Follow the instructions and track the memory usage in the Chrome task manager and you will quickly get over a 1 GB, even though the only 'live' data in the mini-app consumes about a tenth of that amount of memory. 

This is a somewhat extreme example, but it shows the problem clearly.  There are ten checkboxes which subscribe only to their own checked state.  The refresh button, when clicked, generates a massive random number array and stores it in the state variables 'data'.  Clicking a checkbox causes react-redux to save a reference to the store's state at the time the checkbox was clicked in the checkbox wrapper's own local state.  Subsequent clicks of the refresh button don't update the the props of the checkboxes, preserving those stale references to previous state, making it impossible for GC to clean up the old array data, which nothing in the application is actually using.

This isn't a memory leak per-se, as memory consumption is still bounded, but a side effect of how connect.js handles refreshing components by calling `setState({storeState})` (connect.js:262).  Note that this line executes only if there was a change that affected the component's own props.  This causes every component to keep a reference to the entire store state as of the last time its own props changed.   This isn't a problem if the store is small, but it becomes a serious issue if you are storing large chunks of data in the store and you have many components that don't subscribe that that large state variable.

We noticed this when we moved to calculating some large analytic results in a reducer and putting the results in the store, rather than calculating these results dynamically in the views.

We very well could be Doing It Wrong, and I'd love for there to be a simple solution that I am overlooking, but it's not immediately obvious to me.

One solution is to store large data results outside of redux.  We'd like to avoid that.  We also thought of creating a result wrapper class where all instances point to a single static array.  This seems a bit of a hack and would make replay impossible (though replay presents its own memory issues with large amounts of data in the store).

We could also have fewer connected components - connect at a parent level and pass props down.  In the jsfiddle example this would involve creating a connected wrapper which subscribes to the checkbox state and the data array and passes props down to the checkboxes and refresh button.  We'd like to avoid this as well, as we feel it defeats one of the primary benefits of using redux - not having to plumb props down through views.
",jvanderberg,2016-09-27 16:45:11
505,2016-09-27 14:44:29,"Would you mind trying this against `react-redux@next` and seeing if it makes a difference?
",jimbolla,2016-09-27 16:45:11
505,2016-09-27 14:55:16,"I've tried it with our application locally and it did not seem to impact memory utilization (it still seemed to be using as much memory as master).  Even though the changes in the @next branch are relatively concise, I found it hard to track through the code to see if it was preserving stale state references.  I'd imagine you'd be the expert on that.

That JSFiddle is just a copy of another react-redux example I found and I am not an expert on those various CDN links, do you know how I'd replace the CDN links to react-redux@next?
",jvanderberg,2016-09-27 16:45:11
505,2016-09-27 16:12:03,"You can use unpkg.com for that: https://unpkg.com/react-redux@5.0.0-beta.1/dist/react-redux.js
",timdorr,2016-09-27 16:45:11
505,2016-09-27 16:42:37,"Thanks, that seems to be much better: http://jsfiddle.net/3xwkg3p6/81/

I revisited our app, and I think I maybe had a babel cache issue with node modules when I tried out @next.  I cleared out the babel cache, rebuilt and memory usage seems to be much improved.

I guess just consider this a verification that @next really is a huge improvement.
",jvanderberg,2016-09-27 16:45:11
505,2016-09-27 16:45:11,"Cool. I'll close this out as 5.0 should be rolling out soon-ish. Just have to get some infrastructure things in place and we'll be good to go. But the code itself is pretty solid so far.
",timdorr,2016-09-27 16:45:11
504,2016-09-27 13:15:56,"Hi all!
## Problem

I'm currently developing an application in which I use third party React components. I wrap them into a Redux container.

In some cases (see eg below) I need to pass some infos to the container for behavioral purpose (generally in dispatch). For this I use the `ownProps` parameter.
The problem is that props are injected by `connect` in the connected component and then throw a React error because they are unknown.

Is it possible to filter them before connecting ?
## Example

In this case I use a third party dropzone component (around an image) to allow user to drag&drop image from his computer and update the image content.
### The container (`ReplaceableImage.jsx`)

<S_CODE_TOKEN>
### Container usage

<S_CODE_TOKEN>
## What I hope to do

For me I must to keep passing `columnId` by `ownProps` to use it in `mapDispatchToProps` and then, use a function to filter the properties (I've written one).
After filtering I want to completely override the `ownProps` variable with the filtered one.
",mafzst,2016-09-27 13:32:04
504,2016-09-27 13:24:30,"You can:

<S_CODE_TOKEN>
",jimbolla,2016-09-27 13:32:04
504,2016-09-27 13:32:04,"@jimbolla Thanks a lot :+1: 
I've misunderstood the behavior of this function
",mafzst,2016-09-27 13:32:04
503,2016-09-26 23:21:56,"I can easily test my connected components using a fake store to guarantee that the correct props are passed to my presentational component. However, I'm unable to test that the correct actions are being passed.

Here is my simple connected component:

<S_CODE_TOKEN>

And here is the test:

<S_CODE_TOKEN>
",stevenmusumeche,2016-09-27 00:27:41
503,2016-09-27 00:27:41,"This is a usage question, and should really be asked on Stack Overflow instead.

That said, you're probably looking up the connected version of the component instead of the plain version.  Use `TheConnectedComponent.WrappedComponent` to access the plain class type, and use that for your lookup.
",markerikson,2016-09-27 00:27:41
503,2016-09-27 02:43:09,"@markerikson thank you for the reply.  In my example, NewCustomerContainer is the container and CustomerForm is my plain one, so I think I am already doing what you suggest.
",stevenmusumeche,2016-09-27 00:27:41
502,2016-09-26 18:33:45,"Hi,

I apologize if this is an old request. I searched quite a bit but couldn't find a solution that works for my use case. I'm getting the following error when making changes via hot reloading.

`<Provider> does not support changing store on the fly. It is most likely that you see this error because you updated to Redux 2.x and React Redux 2.x which no longer hot reload reducers automatically. See https://github.com/reactjs/react-redux/releases/tag/v2.0.0 for the migration instructions.`

The documentation seems to be for a simple `configureStore` implementation and is very old too. I was unable to find any documentation around `module.hot.acceptCallback` but my code would fail with the following error until I explicitly assigned it a function value.

`hot.acceptCallback is not a function`

Code below. Any help is greatly appreciated.

<S_CODE_TOKEN>
",a-koka,2016-09-26 22:34:01
502,2016-09-26 22:34:01,"You are probably not putting your Provider right near your entry point and ReactDOM.render. It shouldn't be contained within a component, as something like React Hot Loader will attempt to recreate the store on a reload. 
",timdorr,2016-09-26 22:34:01
502,2016-12-17 14:45:56,I'm seeing this issue. Is there a full example of an app to show how to avoid this behavior?,drewwells,2016-09-26 22:34:01
502,2016-12-19 16:51:21,"I had to struggle a bit but @timdorr is right about the `Provider`. I'm sharing my setup below with the hopes that it'll help.

**index.ios.js**
<S_CODE_TOKEN>

**Main.js**
<S_CODE_TOKEN>

**configureStore.js**
<S_CODE_TOKEN>",a-koka,2016-09-26 22:34:01
501,2016-09-26 18:17:04,"Just rebased previous PR againts `next` branch.
",btd,2016-09-27 16:46:13
501,2016-09-27 16:46:09,"Thanks!
",timdorr,2016-09-27 16:46:13
500,2016-09-24 15:35:43,"Fixes #499 - Add a warning to console when same key is used in both parent and state props
",ynonp,2016-09-27 16:48:46
500,2016-09-27 16:47:58,"So, I would remake this against the `next` branch. I don't think we should land something like this in a patch release, since it might produce spurious output for devs. However, since 5.0's right around the corner, it's a perfect chance to get something like this in.
",timdorr,2016-09-27 16:48:46
500,2016-09-28 16:19:06,"The file you would need to modify in the `next` branch is here: https://github.com/reactjs/react-redux/blob/next/src/connect/mergeProps.js#L5
",jimbolla,2016-09-27 16:48:46
499,2016-09-24 15:05:43,"The default merge method in connect:

<S_CODE_TOKEN>

Will just overwrite existing parent props with state props when same key is used.

IMHO it'd be better to show a warning to console, saving developers debugging time & effort
",ynonp,2016-10-03 20:44:21
499,2016-09-25 02:24:02,"Not sure I agree with this, as that's the whole point of the mergeProps function: It lets you customize this default behavior (almost always for this exactly kind of problem).
",timdorr,2016-10-03 20:44:21
499,2016-09-25 02:27:03,"I mostly agree, but given that it would be a dev-only check, I'm not sure it's actually a bad idea.  Or rather, it seems like a decent idea, and I don't see any particular downside to it.
",markerikson,2016-10-03 20:44:21
499,2016-09-27 16:48:34,"BTW, since this is dev-only, I'll revert my previous comment and say this is an OK idea. 😄 
",timdorr,2016-10-03 20:44:21
499,2016-09-28 16:17:09,"Are there any valid use cases where a developer wants it to just overwrite and not complain? In that case, the developer has to do one of:
- Live with the warning in dev mode.
- Implement their own `mergeProps` that doesn't warn, but `connect()` contains an optimization when `mergeProps` is omitted, avoiding an extra shallow equality check. This means their app will run _slightly_ slower. It's probably unnoticeable except for edge cases involving a high frequency of dispatches that result in that component's `mapStateToProps` producing new results, or that component receiving new props from parent at a high frequency.
- If they _do_ hit that edge case for performance, then replace that particular usage of `connect` with `connectAdvanced` and be responsible for their of memoization of props.

I'm OK with all that, but now we probably need to document this, probably in some advanced optimization section.
",jimbolla,2016-10-03 20:44:21
499,2016-10-03 20:44:21,"Closing after merged PR #508 
",ynonp,2016-10-03 20:44:21
498,2016-09-23 21:58:03,,btd,2016-09-26 18:17:14
498,2016-09-24 00:27:10,"Can you rebase against `next`? Let's take this on with the next major so that webpack 2 and rollup users don't get into trouble with a minor or patch release.
",timdorr,2016-09-26 18:17:14
498,2016-09-24 05:36:20,"@timdorr ok, but can it be in both branches? I just want to get this published sooner than later.
",btd,2016-09-26 18:17:14
498,2016-09-24 11:51:51,"Technically, it's an API change, so it has to go in the next major anyways. 
",timdorr,2016-09-26 18:17:14
498,2016-09-24 12:14:52,"Could you please explain why it is API change? in npm module will appear just one new folder, everything else byte to byte the same.
",btd,2016-09-26 18:17:14
498,2016-09-25 02:22:34,"It's an API change in the sense that the `main` or `jsnext:main` is an API to access the module. Basically, someone using Rollup or Webpack 2 would experience a breakage if they upgraded just a patch or minor release, which technically violates semver. It's a little loose, I know, but it's important to end users not to upset them and get vague gripes about ""fatigue"" 😄 
",timdorr,2016-09-26 18:17:14
498,2016-09-25 06:55:45,"Well, fair enough :+1:. I will rebase to next branch.
",btd,2016-09-26 18:17:14
497,2016-09-23 21:05:53,"posted a question on Stack Overflow, but I think it _may_ be a bug in react-redux (or maybe I'm just a dum dum) :)

http://stackoverflow.com/questions/39667805/react-redux-update-item-in-array-doesnt-re-render
",benmonro,2016-09-23 21:39:43
497,2016-09-23 21:39:43,"You're directly mutating the state by calling `push` on the array instance.  Since the array reference is the same before and after, `connect` assumes nothing has changed and doesn't re-render.  Please see the Redux FAQ on the topic: http://redux.js.org/docs/FAQ.html#react-not-rerendering 
",markerikson,2016-09-23 21:39:43
497,2016-09-23 21:44:26,"Thanks!
",benmonro,2016-09-23 21:39:43
496,2016-09-23 13:02:26,"My ownProps is an object containing objects. connect looks something like this: 

<S_CODE_TOKEN>

Props received:

<S_CODE_TOKEN>

Also its worth mentioning that a grand parent of this component also has a @Connect on it. 
",Daniel-Baranowski-BJSS,2016-10-05 12:51:10
496,2016-09-23 13:46:12,"That example doesn't really make sense.  `ownProps` is the props passed directly to the connected component by its parent, like `<SomeConnectedComponent a={42} b={123} />`.  You don't need to include those in the return value from `mapState`, since `connect` will combine the incoming props and the `mapState` results to form the combined props passed to your real component.
",markerikson,2016-10-05 12:51:10
496,2016-09-23 15:48:07,"If I don't include my props like described above they are invisible in my component. They are only passed once, and If the described component becomes re-rendered, due to its stateProp updating the new ownProps wouldn't be populated. The issue was fixed when I added ownProps mapping, but now the component doesn't re-render when my-props change. 
",Daniel-Baranowski-BJSS,2016-10-05 12:51:10
496,2016-09-23 16:00:10,"You should inspect what props your underlying component receives. If `ownProps` has a key called `myProps`, then your component should have a props key called `myProps` without needing to explicitly include it in `mapStateToProps`, like @markerikson said.

It sounds like you might be mutating the nested pieces of the `myProps` object in place, which won't trigger a re-render in and of itself.  How are you actually ""updating"" `changedProp`?

When you said ""props received"", how do you know they are received? Are you investigating inside `compnentWillReceiveProps` or something?

Forgetting redux for a moment, consider this example:

<S_CODE_TOKEN>

Changing `window.someValue` will not cause `ChildComponent` to rerender --- `ChildComponent` won't receive the new value until `Parent` renders.  When you change values, you need a component somewhere in the ancestor chain to get the ball rolling, with something like a `setState`
",naw,2016-10-05 12:51:10
496,2016-10-05 02:25:19,"@Daniel-Baranowski-BJSS Were you able to resolve this?
",jimbolla,2016-10-05 12:51:10
496,2016-10-05 12:51:10,"Looks like some good guidance and answers were given, so I'm closing this out.
",timdorr,2016-10-05 12:51:10
495,2016-09-23 05:55:28,"I often have this situation: I wrote a pure component and used it somewhere. But later I needed to do some data fetching for this component, so I had to add a container for it and modified the path where it's been imported. This wasted some time.

Can I just wrap EVERY component in a container using `connect`? If a component needs no data fetching at all, just put `export default connect()(Foo)` for it.

Does it somehow have performance impact if I do this? 
",lhz516,2016-09-23 11:30:28
495,2016-09-23 11:30:28,"Feel free to connect as many components as makes sense for your own application.  `connect` actually does automatically implement `shouldComponentUpdate`, which can be helpful.

However, don't over-think the whole ""containers"" vs ""presentational"" aspect.  That's one reason why a feature-based folder structure _may_ be nicer than a ""components"" and ""containers"" folder structure.  But yeah, don't get too caught up in ""oh, I made this a container, now I have to move it around"".  Find something that works well for you.

Also see the Redux FAQ entry: http://redux.js.org/docs/FAQ.html#react-multiple-components .
",markerikson,2016-09-23 11:30:28
494,2016-09-22 02:48:03,"My error code is on the repo:[https://github.com/sniperyan/react-cnode](https://github.com/sniperyan/react-cnode)
In my code,you can find test button in `js/containers/listApp/index.js` , there is a click handler named `testFunc` , in this function, I dispatch an action .  When you click the button, the actionCreator will trigger the reducer `js/reducers/indexList/index.js` . I add a  'console.log' and you can see the console of your web browser , you can see the 'console.log' run twice for a single dispatched action.
I attempt to solve this problem and find one method. I find when the ruducer run twice , there must be two listeners in `reateStore` in the package of `redux` .  I removed the `mapStateToProps` in my `connect`  function of my containers , i refer to the code in repo:[https://github.com/reactjs/redux/tree/master/examples/async](https://github.com/reactjs/redux/tree/master/examples/async), i see there is no `mapStateToProps` and the demo can run correctly , i compare my code to the examples of `redux` but i can not find mistake.
You can clone my code in the repo `react-cnode` at the beginning of this issues,after install npm modules and run the webpack, you can input `localhost:8080/` in you web brower , click the test button and the console of web browser will print the log twice 

Versions: 
""react-redux"": ""^4.4.5"",
""redux"": ""^3.5.2"",
",sniperyan,2016-09-22 03:10:57
494,2016-09-22 03:10:57,"Ah.  I see the problem.  You're accidentally double-dispatching the same action.  Let me give some background info, then I'll explain what the problem is here:

I have an example of equivalent ways to dispatch an action, at https://gist.github.com/markerikson/6c7608eee5d2421966d3df5edbb8f05c .  Note that we go from, roughly,  `dispatch({type : ""SOME_ACTION""})`, to `const theAction = someActionCreator(); dispatch(theAction);` to `const preBoundActionCreator = bindActionCreators(someActionCreator, dispatch); preBoundActionCreator();`.

In other words, when you use `bindActionCreators`, it calls your function _and immediately calls `dispatch`, passing in what your action creator returned_.  That means that you do _not_ have to actually call `dispatch` yourself - the bound action creator does that automatically.

Second, when you call `dispatch`, it normally returns whatever you passed in.  Middleware can change that.  This is useful for things like a thunk that returns a promise - you can do `dispatch(thunkThatReturnsAPromise()).then(value => doSomethingWith(value))`.

So here's what's happening.  You are using `mapDispatch` to bind your `indexList` actions.  That's fine.  However, your component uses it this way: `dispatch(actions.testFunc());`.  The `testFunc` function is already bound, so that dispatches the action once.  Then, the action is returned from the first `dispatch` call, and is passed straight to the second `dispatch` call.

All you need to do here is just call `actions.testFunc()`, and it should work fine.
",markerikson,2016-09-22 03:10:57
493,2016-09-20 14:49:35,"> Makes the Redux store available to the connect() calls in the component hierarchy below. Normally, you can’t use connect() without wrapping the root component in <Provider>.
> 
> If you really need to, you can manually pass store as a prop to every connect()ed component, but we only recommend to do this for stubbing store in unit tests, or in non-fully-React codebases. Normally, you should just use <Provider>.

So we can't use <Provider> since the root is not react component (non-fully-react project). 
Then we are not able to use `connect` either? 
The description above is confusing as what I need to do for non-fully-react project. 

I interpreted what the above statement as the following, hope I'm right. 
1. create store with `createStore` as in the doc
2. pass the store <MyComponents store={store} /> for all connected components (such as `connect(mapStateToProps, mapDispatchToProps)(MyComponents) 
",pcompassion,2016-09-20 16:57:23
493,2016-09-20 16:57:23,"You need to use `<Provider>` if you are creating `connect()`ed components within the parts of your app that are running on React. This library is solely for your React parts. It doesn't apply to non-React stuff and you can use the store you create directly elsewhere.
",timdorr,2016-09-20 16:57:23
492,2016-09-19 19:41:14,"Noticed some bad performance with react-redux + [seamless-immutable](https://github.com/rtfeldman/seamless-immutable).

Firstly, here's a related problem I'm having. PureComponent works well:

<S_CODE_TOKEN>

Component above will only rerender when immutable props are changed.

<S_CODE_TOKEN>

Component above will rerender constantly. Am I correct in assuming PureComponent's shouldComponentUpdate is overwritten? I tried to outsmart it, but this is even true with `{ pure: false }`.

I'm looking through the code right now, and it looks like connect thinks the state is being changed. From (here)[https://github.com/reactjs/react-redux/blob/93cdfaeaf9d3e5400ffc05fe9d177118286109ca/src/components/connect.js#L60]:

<S_CODE_TOKEN>

The above yields `false || false || true`, because of [this line](https://github.com/reactjs/react-redux/blob/93cdfaeaf9d3e5400ffc05fe9d177118286109ca/src/utils/shallowEqual.js#L17) in shallowEqual, as called by state comparison

Any thoughts?
",braco,2016-09-19 20:06:50
492,2016-09-19 20:06:50,"Fixed for now by making a HoC, will revisit
",braco,2016-09-19 20:06:50
492,2016-09-19 20:12:24,"@braco Can you try perf testing against the v5 beta by running `npm install react-redux@next`?
",jimbolla,2016-09-19 20:06:50
491,2016-09-17 06:58:12,"Hi, is there any way at all to dispatch to the state from a component of a component? If not, what other options do i have? I tried using bindActionCreators as well, but same error. I tried Dan's solution from[ here](https://github.com/reactjs/redux/issues/916), no luck.
I am getting this error whenever I dispatch to the state:

Uncaught Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).

I have already deleted and reinstalled node_modules, and tried the bootstrap-react library & the reactstrap library, but all give this error. 

<S_CODE_TOKEN>
",tpb-dev,2016-09-17 17:09:55
491,2016-09-17 17:09:55,"Your code looks fairly reasonable to me.  That sort of error seems unlikely to have anything to do with React-Redux and `connect`.  I'd suggest asking this on Stack Overflow, as this is really more of a ""usage""-type question.
",markerikson,2016-09-17 17:09:55
491,2016-09-17 18:44:53,"> I have already deleted and reinstalled node_modules

But have you checked if you have multiple `react`s there?
You can run `npm ls react` to learn that.
",gaearon,2016-09-17 17:09:55
491,2016-09-17 23:23:21,"Yes, I have done that too, but it didn't work. I suspect that the two
underlying implementations of bootstrap components in react are using those
refs.... In any case, I guess I will just render plain bootstrap for now.
",tpb-dev,2016-09-17 17:09:55
491,2016-09-19 07:21:20,"File an issue in that project and _attach a project reproducing it_. This warning almost always means duplicate React but it's impossible to help if you don't show your configuration. 
",gaearon,2016-09-17 17:09:55
490,2016-09-17 04:36:10,"@markerikson Hey Mark, thanks for looking over react-redux-blackbox for me. I took a look at the new v5 react-redux, learned a lot about how to do perf testing, and the thought process that goes into accepting a major rewrite on a plugin.

Anyways, before v5 is official rolled out, I thought I would add these minor changes to improve v4 performance (Things that I picked up on while writing blackbox). Actually, if I'm not mistaken, the only real performance boost that v5 delivers is nullified with these changes. The big one is adding the ShouldComponentUpdate component, which stops rerendering if the computed props and own props are the same as their previous versions.
",l2silver,2016-09-17 04:46:14
490,2016-09-17 04:40:25,"Hmm.  Given the path we're on towards v5, I'm not sure there's much point in changing anything further with v4.

Also, how specifically does this improve perf?  Do you have some benchmarks and comparisons you can provide?  How does this compare with v5?

Tagging @jimbolla and @timdorr .
",markerikson,2016-09-17 04:46:14
490,2016-09-17 04:46:14,"I'm not seeing any particular benefi either. We already make these kinds of optimizations elsewhere in the code. Actually, it looks like you've removed some cases...
",timdorr,2016-09-17 04:46:14
490,2016-09-17 04:55:25,"Much of the perf boost in v5 comes from avoiding unnecessary calls to `setState` by re-ordering the subscriptions and doing the props+state diffing logic earlier _before_ that happens. That was actually huge. As it stands I think v5 is complete and waiting on feedback on functionality/docs from the community.
",jimbolla,2016-09-17 04:46:14
490,2016-09-17 04:56:52,"Yeah, I've been bogged down with React Router hooplah. I want to get to v5 here, but haters gonna hate on router :P
",timdorr,2016-09-17 04:46:14
490,2016-09-17 13:38:14,"Fair enough. I just thought I would put it out there in case there's a rollback or something.

@jimbolla it's funny you should say that about needless setState calls because I thought that was the important problem to solve when doing blackbox. But if I'm not mistaken, react made some internal changes to deal with this issue. (it's extremely possible that I'm completely missing something here, so please correct me if I am wrong.)

Here's the scenario
 lets say you have two connect components that will setState on the same store changes, and one component is inside the other. When the store changes, they both setState,  but the parent setState takes priority, and the child setState will only fire if the render propagation fails to reach it. (Because of a false shouldCompomentUpdate in between them)

Is there still a performance gain then?
",l2silver,2016-09-17 04:46:14
490,2016-09-17 16:35:39,"I tried some performance tests using https://github.com/jimbolla/react-redux-perf

but I got about the exact same results for vanilla react-redux, v5, and my updated react-redux

is there something I am doing wrong? My process was

sudo npm link (in react-redux)
co master
prepublish

react-redux-perf
build
node server

repeat for each version
",l2silver,2016-09-17 04:46:14
490,2016-09-17 20:08:33,"My perf testing approach was to build jimbolla/react-redux-perf (and later mweststrate/redux-todomvc) against react-redux@latest then test. Then I modified the build script in my working copy of react-redux to build into the node_modules/react-redux folder of the perf project, then rebuild.

As for the `setState` scenario, the problem in the current implementation is that because of the `componentDidMount` ordering, the children's subscription always gets notified first, so it's always going to fire `setState` for the children, and then eventually the parents. 

That's why v5 adds the hierarchical subscription code to ensure notifications flow top-down. This means (unless a blocking `shouldComponentUpdate` occurs), the parent will get notified, recompute its props, call `setState`, rerender, triggering connected children to receive new props, recompute props, and rerender, all in one update cycle. By the time the children's store listeners fire, they've already recomputed and rerendered, so they avoid the `setState` altogether.
",jimbolla,2016-09-17 04:46:14
490,2016-09-18 01:07:47,"@jimbolla Ah, got it! Brilliant. Now it makes sense.
",l2silver,2016-09-17 04:46:14
489,2016-09-15 21:12:06,"The closest thing I could find was #163 but I don't think mine is the same.

So I have a connected container that loads fine when it is called by my root container using react-native-router-flux

TodoContainer loads fine in this setup when an action tells react-native-router-flux to go there

<S_CODE_TOKEN>

 Here's a pared down version of the TodoContainer.js

<S_CODE_TOKEN>

However when I try to load the TodoContainer via a Scene that loads a new Dashboard component (not connected) I run into _Possible Unhandled Promise Rejection (id: 0): dispatch is not a function_

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I put in some logging and it's weird, I can see that dispatchToProps is setting the fetchTodosIfNeeded method as a prop in TodoContainer, so it's definitely doing something, but dispatch is not set as a prop. 

Also if I run connect() on the Dashboard component and then pass ITS dispatch prop manually down to TodoContainer it works, but that feels super hacky.

Here's my [package.json](https://gist.github.com/Prudwell/ec26fdbc31d3c2eb684c6a9ccc20f8f0)

Any ideas? 
",Prudwell,2016-09-15 21:18:17
489,2016-09-15 21:18:17,"This is working as expected.  If you do _not_ supply a `mapDispatch` function, `connect` will use its default.  That default `mapDispatch` simply gives you `this.props.dispatch`.  If you _do_ supply your own `mapDispatch` function, it's up to you what gets returned.  If you want to have some bound functions as props _and_ have `this.props.dispatch`, do so:

<S_CODE_TOKEN>
",markerikson,2016-09-15 21:18:17
489,2016-09-15 21:52:52,"Ah yes one of those times where I was doing it wrong all along and it only worked the previous way by luck!

My understanding was that **bindActionCreators(someActions, dispatch)** already did return the actions AND dispatch. I thought it was successfully providing dispatch to my TodoContainer when I rendered it as a Scene and couldn't figure out what changed when I loaded the component a different way. 

My guess is that it only worked because the <RouterWithRedux> component gets put through connect() and the Scene gets dispatch injected from it.

Thanks so much for you help!
",Prudwell,2016-09-15 21:18:17
489,2016-09-15 22:03:52,"Sure, no problem.  Fairly common issue, and actually, I'd almost forgotten - I did actually add this one to the Redux FAQ already: http://redux.js.org/docs/FAQ.html#react-props-dispatch
",markerikson,2016-09-15 21:18:17
488,2016-09-14 12:38:10,"Hi. This small change allows doing the following:

<S_CODE_TOKEN>

AKA Partial application. 

It helps to reduce the number of arguments component have to pass to the action.
",bsideup,2016-10-05 00:32:39
488,2016-09-14 13:51:45,"You should write this against the `next` branch, which is significantly different.
",jimbolla,2016-10-05 00:32:39
488,2016-10-05 00:32:39,"@jimbolla's correct. I'd like to leave new features/APIs to the next branch for now. We can do bugfixes on 4.x, but I kind of doubt it's going to need anything major in the meantime :)
",timdorr,2016-10-05 00:32:39
487,2016-09-14 05:00:24,"<S_CODE_TOKEN>

Above code works fine. But, here is my problem code: 

<S_CODE_TOKEN>

when I use `react-redux` `HOC` `connect` function to inject props to my `ES5Component`, it give me an `Error` : `Uncaught TypeError: this.setTitle is not a function`. Who can tell me why?
",mrdulin,2016-09-14 10:37:35
487,2016-09-14 10:37:35,"This is not supported. Please don't use inheritance with React. React component model favours composition instead.

If you need some shared functionality between components, extract _that_ into a component (or a plain JavaScript function) and use it from both components.
",gaearon,2016-09-14 10:37:35
486,2016-09-12 06:15:32,"Under the Documentation section, API and Troubleshooting don't take you anywhere.
",TimMikeladze,2016-09-12 20:06:42
486,2016-09-12 16:01:41,"Github has a bug currently: https://github.com/github/markup/issues/926
",timdorr,2016-09-12 20:06:42
486,2016-09-12 16:02:42,"I reported this via support, didn’t realize there is a repo 😄 
",gaearon,2016-09-12 20:06:42
486,2016-09-12 20:06:42,"It's been fixed!
",timdorr,2016-09-12 20:06:42
485,2016-09-11 04:20:00,"I'm trying to build isomorphic / universal app with server side rendering but the client code could not create store from initiate state that send from server. here is my server code: 

<S_CODE_TOKEN>

reducer code: 

<S_CODE_TOKEN>

code to create routes:

<S_CODE_TOKEN>

and HomeContainer code - where the error occur when I try to HANDLE_CLICK in reducer

<S_CODE_TOKEN>

and finally, the client code which not seem to run on client side: 

<S_CODE_TOKEN>

The client code cannot create store from windows.**PRELOAED_STATE** and pass it down to {HomeContainer} . the HANDLE_CLICK in the reducer cannot be use within child component of HomeContainer. 
Please help!
",ducnvhn,2016-09-11 05:15:07
485,2016-09-11 05:14:21,"Hmm.  While I haven't ever dealt with isomorphic apps, if you're trying to transfer state that way, you should just pass it as the second argument to `createStore` rather than dealing with a `SET_STATE` action.

Also, since this is a usage question, this should really be asked on Stack Overflow instead.
",markerikson,2016-09-11 05:15:07
485,2016-09-11 05:15:07,"Actually, glancing at SO, I see you've got this posted there too: http://stackoverflow.com/questions/39432349/client-not-render-with-initial-state .  Closing this.
",markerikson,2016-09-11 05:15:07
484,2016-09-07 06:38:28,"I have `react@15.3.1` and `react-redux@4.4.5` in my project and got the following warning:

<S_CODE_TOKEN>

How to avoid these warnings? I've read this [guide](https://facebook.github.io/react/warnings/dont-call-proptypes.html) but still have no idea. Not sure if it is emitted by react-redux's [storeShape](https://github.com/reactjs/react-redux/blob/master/src/components/Provider.js#L52). Please point out if i'm wrong, thanks!
",luckydrq,2016-09-07 16:28:29
484,2016-09-07 16:28:29,"Something outside of react-redux is calling proptype validation. We don't do that internally.
",timdorr,2016-09-07 16:28:29
484,2016-09-08 02:05:58,"Thank you for your reply!  I've found the reason. I have another react version(15.1.0) which used as a dependency, when i upgrade it to 15.3.1 the warnings disappear. 
",luckydrq,2016-09-07 16:28:29
483,2016-09-05 22:50:42,"This PR is to enable actions via context to make writing unit tests for containers easier using dependency injection.
- Explanation of the problem: http://alexlobera.com/react-dependency-injection-write-easier-unit-tests/
- Example using this PR: https://github.com/alexlbr/redix/tree/master/examples/react-redux-context-actions
",alexlbr,2016-10-05 00:30:26
483,2016-09-05 23:09:24,"A few initial thoughts:

Your article complains about being unable to call methods on the wrapped instance for testing.  First, one common approach is to test the ""plain"" component in isolation - verify that it behaves as expected when given props, and don't worry about actually trying to truly connect it.  This lends itself well to mocking, as you can pass in fake callbacks as props.  Also, even when rendering a connected component in a test, you can access the wrapped component if you pass the `{withRef: true}` option to `connect`.

Also, testing the entire connected component is generally less valuable - what you really are doing is verifying that HoCs like `connect` work properly, which is not what your own app should be trying to verify.  You're more likely to get value out of testing the `mapState` functions and the plain components.

Finally, this PR is generally obsolete already, because the React-Redux 5.0 beta release (as written in #416  ) is a complete rewrite of `connect`'s implementation.
",markerikson,2016-10-05 00:30:26
483,2016-09-05 23:46:43,"Thanks for your quick reply. Good point about testing connect in my app. I totally agree and it's not what I'm trying to test. What I'd like to test is that my container is connected to the right action. By that I don't mean that connect is not working properly, but some dev could change by mistake my mapDispatchToProps. How would you test that the code I write in the container to connect the actions is correct?

 #416 looks awesome! looking forward to the release.
",alexlbr,2016-10-05 00:30:26
483,2016-09-05 23:53:11,"Admittedly, unit testing is still something I'm pretty weak on.  That said, I've definitely never considered trying to test that the stuff I'm passing to `mapDispatch` is correct.  I'm not sure how you'd do so, and I'm not sure I see the point in it (especially if you're using the object shorthand syntax, and not doing any manual binding in an actual `mapDispatch` function).

Frankly, I think the best option would be to add propTypes to the plain component saying it expects required function properties of certain names, and if the container isn't passing in functions by those names, you'll get warnings in the console.
",markerikson,2016-10-05 00:30:26
483,2016-09-05 23:57:27,"You could write your test such that it wires up your component to a simple store reducer like

<S_CODE_TOKEN>

And then assert that `store.getState().correctActionFired` is true.
",jimbolla,2016-10-05 00:30:26
483,2016-09-06 09:42:01,"@markerikson object shorthand syntax is very handy, and I do use it. But we can still introduce errors. Imagine we have a container that the only thing it does is to dispatch an action (to fetch data for instance) when the component is mounted. I'd be very nice if I can double check that the action it dispatches is the one we want.

@jimbolla that's really interesting approach, I'm going to rethink my implementation with that in mind. Though it also needs `connect` to be executed, and it's not ideal as markerikson pointed. But I can't think of any approach to verify the action without connecting the component. 

Another thing that I'm trying to achieve with my PR is to avoid expensive operations that the actions may execute (like fetching data from an API). Using Sinon to generate test doubles of the actions is not easy.

Keep your good feedback and ideas guys, very appreciated!
",alexlbr,2016-10-05 00:30:26
483,2016-09-06 09:58:46,"This doesn't work with code splitting. We don't want to encourage approaches that don't work with code splitting if we can avoid it. 
",gaearon,2016-10-05 00:30:26
483,2016-09-06 10:00:28,"> By that I don't mean that connect is not working properly, but some dev could change by mistake my mapDispatchToProps.

Can you test that function alone in this case?
",gaearon,2016-10-05 00:30:26
483,2016-09-06 10:01:46,"FWIW I think we should expose both mapStateToProps and mapDispatchToProps as statics on connected component for convenience so they can be tested independently without being explicitly exported. 
",gaearon,2016-10-05 00:30:26
483,2016-09-06 16:38:43,"@gaearon: Dan.  You're supposed to be on vacation.  STOP COMMENTING ON ISSUES AND GO DO VACATION-Y THINGS! :)

(But yeah, exposing `mapState` and `mapDispatch` seems totally reasonable, since we already do the component as well.)
",markerikson,2016-10-05 00:30:26
483,2016-10-05 00:30:26,"So, I'm going to close this out for the issues listed above. Also, we're full steam ahead on React Redux 5, so it would be best to build things like this against the `next` branch.
",timdorr,2016-10-05 00:30:26
482,2016-09-05 04:08:59,"I just updated eslint with the latest airbnb style guide and noticed that the [4.0 update in July](https://github.com/airbnb/javascript/blob/ca1124cd8d2e33addbffb3b1743849e2bf774039/packages/eslint-config-airbnb-base/CHANGELOG.md#400--2016-07-02) now registers an error for `no-named-as-default`. 

I bring this up because the documentation suggests exporting [both a named and default export](http://redux.js.org/docs/recipes/WritingTests.html#connected-components), and because I imagine many (most?) people are using enzyme and the Airbnb style guide for linting. For example:

<S_CODE_TOKEN>

With the new rule, this would show a linting error (though it wouldn't cause a compile/runtime error). 

In order to solve this, we could do one of two things. Either add a `default as` or import the component with a name that is different than the named export. 

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

I am currently using `default as` and it works fine. The second option seems clunky, but it works just as well.

Is this worth updating in the docs? Or is this something we should just ignore/add an exception to `.eslintrc`?
",samcorcos,2016-09-05 11:24:04
482,2016-09-05 11:24:04,"I don't really think we need to mention this. That's really out of scope for our documentation.
",timdorr,2016-09-05 11:24:04
482,2016-09-06 21:32:21,"Hmm, ok. I was really suggesting that we change the documentation to the new syntax suggested by the Airbnb style guide using `{ default as ... }` rather than mentioning the style guide specifically, but it's fine either way 😄 
",samcorcos,2016-09-05 11:24:04
481,2016-08-31 22:57:58,"I have a state that returns an empty array under specific circumstances for a specific property. Let's call this property, `selected`.

I dispatched an action that triggered a state change, but did not alter `selected` at all. Now, every connected component that relies on `selected` is rendering.

When `shallowEqual()` compares the states and their keys and their values, empty Arrays and empty Objects will fail every time.

<S_CODE_TOKEN>

Is this intended behavior? Should I submit a pull request?
",marceux,2016-09-01 01:50:30
481,2016-09-01 01:50:30,"Keep in mind that `[1, 2, 3] === [1, 2, 3]` is `false` because each empty array is a unique instance and the equality check is looking for each side to be the exact same instance, similar to a plain object equality check. 

So, if you have a reducer that does `return []` somewhere, keep in mind that is new instance of an empty array and will not equal an empty array created by the previous run of the reducer. Instead, if you define something like `const emptyArray = []` outside of your reducer function and `return emptyArray`, you will be providing the same instance of the array and [the initial equality check](https://github.com/reactjs/react-redux/blob/68a4f2b78671329e10bfca87f8f1c82cc8690459/src/utils/shallowEqual.js#L2) will catch things first.
",timdorr,2016-09-01 01:50:30
480,2016-08-31 02:52:24,"This can certainly be better, but it's not a bad start.
",jimbolla,2016-10-05 00:28:46
480,2016-10-05 00:28:42,"OK, let's merge this in for now.
",timdorr,2016-10-05 00:28:46
480,2017-03-20 21:41:37,"Hi.

I was reading https://github.com/reactjs/react-redux/blob/master/docs/api.md#examples-1 and this PR contains the latest commit changing that part.

I guess you have a plan to update the example for `connectAdvanced`, but it was not done yet. That's why it now confuses me.

- It seems that `nextProps` should be `nextOwnProps`. Correct? Otherwise it would be an undefined variable.
- What's the use of `state`? It keeps track of the newest state, but is not used to compute anything in the scope.
- `addTodo` is defined when `ownProps.userId` is `undefined` and never gets updated. Should it be moved into the selector function and use `nextProps.userId` instead?",mondaychen,2016-10-05 00:28:46
479,2016-08-30 10:40:59,"When doing

<S_CODE_TOKEN>

instead of

<S_CODE_TOKEN>

the error messages are not related to the mistake. Is it possible to include a test in debug mode that connect has actually been called on a component?
",derekdreery,2016-08-30 13:56:40
479,2016-08-30 13:56:40,"Unfortunately, we can't know if you're currying the call for later use on a component. I don't see how you would detect this case at all. If you're using decorator syntax, then it will end up being unlikely that you'll run into this at least. 
",timdorr,2016-08-30 13:56:40
478,2016-08-29 10:29:56,"This issue discussed very match, but I don't know how I can solve my problem with one store. I have some report page with filter and a lot tables for every our brand. So page have a lot data. Filter have several controls for define filter and Generate button. If I have one store so every change on filter takes about 5 sec. with no data changed. I want to have different stores for filter and for every brand. So change of filter (without generate data) will not case to render all page with data. Tables of Brands have page selectors. So select specific page of some brand don't fire render of all page. 
My question: can I create several stores or there any other solution? Because I can't run render all page for   every action.
",valery-bary,2016-08-29 14:29:21
478,2016-08-29 14:29:21,"The answer isn't breaking up how you store the data, but how you query it out. It's still a big bundle of state to work with, even if you slice it into multiple stores.

I would look into a library like reselect for optimizing and caching how you're querying that data. You should also break up your connected components so that you don't have everything running through one single `connect`, as that will likely slow you down as well. 
",timdorr,2016-08-29 14:29:21
477,2016-08-29 00:42:43,"take 2
",jimbolla,2016-10-05 00:31:45
477,2016-08-29 00:45:28,"I'm confused by the code coverage fail here, since it doesn't seem to line up with what I changed.
",jimbolla,2016-10-05 00:31:45
477,2016-08-31 00:56:42,"Ok. I'm happier with this. Now the ""factories"" aren't part of the main API; they're only accessible via `createConnect` which isn't exported from `index.js`. I'd like to get some feedback on how other devs might use it before making it official. We can expose it later in a minor release. The upside to this is I can defer writing up docs for it until later.
",jimbolla,2016-10-05 00:31:45
477,2016-10-05 00:31:43,"Putting this one in too.
",timdorr,2016-10-05 00:31:45
476,2016-08-28 16:06:07,"As I'm updating docs for v5, I realized it would be better to organize the new options this way.
",jimbolla,2016-08-28 23:36:07
476,2016-08-28 23:36:07,"This PR is against the wrong branch. Can you redo against `next`? Thanks.
",timdorr,2016-08-28 23:36:07
476,2016-08-29 00:41:03,"whoops. yeah
",jimbolla,2016-08-28 23:36:07
475,2016-08-28 13:29:23,"## Problem

React component is unable to access refs in a second React component that uses Redux `compose` to combine Redux `connect` and `Radium`.  

In the example below, `setFocus` in Items.js cannot access `addItem.refs` when AddItem.js is composed with Redux `connect` and `Radium`.  

However, when I comment out `connect(mapStateToProps)` in AddItem.js (as shown below), then `addItem.refs['selector'].focus();` is able to access refs and works as expected.
## Environment

react: 15.0.2
react-redux: 4.4.5
redux: 3.5.2
radium: 0.18.1 
## Items.js

<S_CODE_TOKEN>
## ItemRow.js

<S_CODE_TOKEN>
## AddItem.js

<S_CODE_TOKEN>
",wookiem,2016-08-28 16:25:52
475,2016-08-28 14:06:27,"In AddItem.js, you'll have to do:

<S_CODE_TOKEN>

and then in Items.js do:

<S_CODE_TOKEN>
",jimbolla,2016-08-28 16:25:52
475,2016-08-28 14:13:12,"Your solution works perfectly.  Thanks @jimbolla !
",wookiem,2016-08-28 16:25:52
474,2016-08-27 15:46:29,"Merge this once we're ready to let people use the new features.
",jimbolla,2016-08-27 23:06:53
474,2016-08-27 23:06:51,"Why not now? 😄 
",timdorr,2016-08-27 23:06:53
473,2016-08-27 14:29:33,"Starting a list of things related getting v5 out the door.
- [x] Unhide new features - currently they are hidden so that nobody starts using them, just in case we roll this back. I'll make a PR (#474) that will unhide them that can be merged in once we're confident that these changes will go live.
- [x] Create release notes - needs to describe: still API compatible, synopsis of internal architectural changes, perf changes, bugs fixed, new features added
- [x] Review/revise [release notes](https://github.com/reactjs/react-redux/issues/473#issuecomment-242927656) @timdorr toughts?
- [x] Write documentation for new features. Need to adequately describe `connectAdvanced`, as well as new options passable to `connect`. PR #480
- [x] Review/revise new docs. @timdorr @markerikson toughts?
- [x] Fix controlled input issues #525
- [x] Release another beta with the new features exposed. Add beta to the github Releases page.
### Nice to Haves:
- Refactor tests? - now that `connect` is split into to conceptual pieces: `connectAdvanced` for store subscription and component lifecycle stuff vs connect's selector functions, many of the tests could be refactored to deal with just one or the other. This would be nice because would split the 2000+ line spec file in two, making it a little easier to work with. Also add new tests for some of the new `connect` options. (I personally need to learn how to run the new test coverage tools so I can see what's not covered.)
",jimbolla,2016-12-14 04:53:38
473,2016-08-27 14:33:50,"I already updated the code linting (#461), so that's taken care of. I intentionally didn't use airbnb because I didn't want to change styles just for the sake of changing styles. 

Flow and Typescript typings both have PRs open (#389 and #433) respectively. They have atrophied, but I'm not a user of either typing system, so I can't really champion either effort. That has to come from the community.
",timdorr,2016-12-14 04:53:38
473,2016-08-27 14:35:54,"If you want to update the API.md with some initial changes or documentation placeholders, I can collaborate with you on that to put it over the finish line. That's really the key thing needed to get to 5.0.0 final.
",timdorr,2016-12-14 04:53:38
473,2016-08-27 16:45:08,"# react-redux v5 release notes (WIP)

## TL;DR
- Backwards compatible API
- Major internal changes
- Significant [performance improvements](https://github.com/reactjs/react-redux/pull/416) in common usage patterns
- [Bugs fixed](https://github.com/reactjs/react-redux/pull/416#issuecomment-233144992)
- Additional features added to `connect()`
- New `connectAdvanced()` API

## API Compatibility

Version 5.0 maintains API compatibility with v4.x but due to major internal changes, we felt a major version bump was warranted. Store state change notifications sent to components are now guaranteed to occur top-down, so if your code may behave differently if it relied on notifications happening out of order.

## Internal Changes

Internally, the code for `connect` has been rewritten from the ground-up to be more modular, with the intention of greater maintainability and extensibility. This has also led to some new features and performance improvements.

## Performance improvements

Significant performance gains were achieved by avoiding extra calls to `setState()` and `render()` by ensuring the order of change notifications to occur top-down, matching React's natural flow. Performance tests and benchmarks are discussed in #416.

## Bugfixes

Some bugs/issues are resolved, related to performance loss and also impure components not re-rendering.

## New features added to connect()

The behavior of `connect()` is now more customizable, by passing additional properties in the `options` arg. These will be described in the API docs.

## New top level API: connectAdvanced()

The new implementation of `connect()` splits its behavior such that it is now a wrapper around a more-generalized `connectAdvanced()`. This `connectAdvanced()` method can be called directly if you have extreme performance needs or want to craft an API different than that of `connect()`. This will be described in the API docs.
",jimbolla,2016-12-14 04:53:38
473,2016-08-27 16:46:03,"There's a start for the release notes. I'll start on the api.md and submit that as another PR once I have something substantial.
",jimbolla,2016-12-14 04:53:38
473,2016-08-27 22:07:06,"It'd be nice to get the API docs more ""official""-looking.  At the moment, they're just buried in the repo, which is not terribly obvious.  Can we Gitbook-ify them, publish them, and also add a pointer from the Redux docs to the React-Redux docs?
",markerikson,2016-12-14 04:53:38
473,2016-08-27 22:15:19,"I'm unfamiliar with Gitbook... what does that conversion entail?
",jimbolla,2016-12-14 04:53:38
473,2016-08-27 22:18:30,"I think we can just reorganize the Readme a bit. A gitbook isn't really needed for only a couple pages of docs. The main Redux docs cover usage info for this repo anyways. We're better off leaving this one to just the basics. 
",timdorr,2016-12-14 04:53:38
473,2016-08-27 22:40:32,"Okay.  Can we at least stick some specific shorter ""manual"" `<a>` tags in there, so that it's possible to link directly to one of the API descriptions without having a hash anchor that's longer than the API description? :)
",markerikson,2016-12-14 04:53:38
473,2016-08-29 04:09:45,"I started updating docs [here](https://github.com/jimbolla/react-redux/tree/update-docs-for-v5), but ran out of time tonight.
",jimbolla,2016-12-14 04:53:38
473,2016-08-31 14:36:05,"There's an ok start to the docs update in PR #480. Would love some CC.
",jimbolla,2016-12-14 04:53:38
473,2016-09-09 15:26:33,"@markerikson Can you give me an example of what to add in there for manual tags and I'll update the docs this weekend?

@timdorr Thoughts on adding the beta release to the github releases tab?
",jimbolla,2016-12-14 04:53:38
473,2016-09-09 15:41:54,"@jimbolla : You can stick HTML straight into Markdown, so what I did was insert `<a>` tags right before each appropriate section header.  I gave each anchor a custom relevant shorter name, as opposed to the long auto-generated names from the slugified header text:

<S_CODE_TOKEN>
",markerikson,2016-12-14 04:53:38
473,2016-09-11 00:43:38,"@markerikson I threw some a tags in PR #480
",jimbolla,2016-12-14 04:53:38
473,2016-09-12 20:19:25,"Sorry I've been captain lazypants on this stuff. I hope to get to some of it in the next few days (namely another beta release).
",timdorr,2016-12-14 04:53:38
473,2016-09-12 20:22:41,"@timdorr It's all good. I appreciate that everyone has their own things going on. I just want to make sure this doesn't get lost.
",jimbolla,2016-12-14 04:53:38
473,2016-10-05 00:56:25,"Finally pushed out beta 2: https://github.com/reactjs/react-redux/releases/tag/v5.0.0-beta.2

Sorry, I had an eventful week (lots of personal issues; check my Twitter feed), so I haven't had time for this lately :|
",timdorr,2016-12-14 04:53:38
473,2016-10-24 16:08:39,"- Move the test refactoring out of the checklist. It's not needed to go final. 
- Added #507 as a task because that really needs to land.
- Also added a task for #525, so we don't run into trouble with controlled inputs. 

Almost there...
",timdorr,2016-12-14 04:53:38
473,2016-11-28 21:36:06,"All set! 

I'm closing on a house on Wednesday, so can we do this at the end of the week? I can push an RC out tonight just to check any last-minute issues and prep the release notes and such. ",timdorr,2016-12-14 04:53:38
473,2016-11-29 20:29:45,@timdorr Let me know if I can help.,jimbolla,2016-12-14 04:53:38
473,2016-11-29 20:31:49,"Sorry, I got tied up with some last-minute house things last night. Will try to get to that release soon.",timdorr,2016-12-14 04:53:38
473,2016-11-29 20:37:56,"No sweat. Enjoy your new house and new Tesla, moneybags. 😆 ",jimbolla,2016-12-14 04:53:38
473,2016-12-05 17:22:09,"OK, obviously didn't get to this over the weekend as promised. I'll try to push something out today. Just have to prepare the release notes and we'll be good.",timdorr,2016-12-14 04:53:38
473,2016-12-07 16:00:25,"I have a regression between the beta3 and the rc1.
Children are called before the parent after a change.
I had the same problem with the v4 but it was solved using beta3 of v5.",ghigt,2016-12-14 04:53:38
473,2016-12-07 16:04:10,"@ghigt we added a setting in rc1 to make it opt-in, but then removed it in latest. there isn't a release w/ the latest. see the [release notes for rc1](https://github.com/reactjs/react-redux/releases/tag/v5.0.0-rc.1) for details.",jimbolla,2016-12-14 04:53:38
473,2016-12-07 16:40:41,"@timdorr I think everything's good to go. Perf tests look good. The only known issue is broken HMR (#513) which I can spend some time fixing while on christmas vacation. I added a note about that to the release notes draft, which look good.",jimbolla,2016-12-14 04:53:38
473,2016-12-07 16:42:59,Moving is haaard! 😭 ,timdorr,2016-12-14 04:53:38
473,2016-12-07 21:50:34,@timdorr Can we publish an rc2 with the expected 5.0 change?,gnoff,2016-12-14 04:53:38
473,2016-12-07 21:58:45,"I'm just going to go hardcore 5.0 whenever I have a chance. I'm moving the big stuff on Sunday (I'm doing what I can do in my car over the past week and through the weekend), so I should definitely be free by then. I keep trying to come up with time for it, but I also enjoy sleep 😜 ",timdorr,2016-12-14 04:53:38
473,2016-12-07 22:45:01,"@gnoff If you're eager to test it, I published the latest changes as `@jimbolla/react-redux`. You can `npm install` that and then if you're using webpack, you can alias that on top of react-redux proper: 
```js
{
  resolve: {
    alias: {
      'react-redux': '@jimbolla/react-redux',
    }
   }
}",jimbolla,2016-12-14 04:53:38
473,2016-12-08 08:56:16,"@jimbolla sorry, I didn't understand well the release note. As I don't have any issue with the beta3, I'll keep it until the flag is removed. Thanks for your reply.",ghigt,2016-12-14 04:53:38
473,2016-12-10 01:41:41,">Refactor tests? - now that connect is split into to conceptual pieces: connectAdvanced for store subscription and component lifecycle stuff vs connect's selector functions, many of the tests could be refactored to deal with just one or the other. This would be nice because would split the 2000+ line spec file in two, making it a little easier to work with.

I’d like to offer some words of caution about this one. We recently went through some pains rewriting React tests in terms of public API. We are rewriting its internals, and so unit tests for old internals turned out to be useless and sometimes complicated to port.

I’m still not sure if the top-down subscription approach will pan out long term. I haven’t thought about it really. I don’t want to be the grumpy person here and I appreciate all the effort, but relying on lifecycle order feels fragile, and reliant on React implementation details. I’m not sure this exact approach will still work with Fiber in the future. React has the batching feature for this, and it will eventually batch everything by default. Maybe we can just flip the implementation then.

In any case, I would prefer that we keep tests based around public API whenever possible. It’s fine to add more granular unit tests but any important behavior should have an integration test. Otherwise it will be tricky to change the underlying implementation later if we need to.",gaearon,2016-12-14 04:53:38
473,2016-12-10 02:48:55,"I admittedly only really looked through the internals the one time during the work on #416, and haven't dug through them since.  But: I thought the point of the top-down subscriptions was to _avoid_ being dependent on lifecycle ordering.",markerikson,2016-12-14 04:53:38
473,2016-12-10 03:06:03,"Just saw your Reddit comment at https://www.reddit.com/r/reactjs/comments/5hf4d4/an_artificial_example_where_mobx_really_shines/db09sf2/ .  Quoting for posterity:

> To be honest I'm still feeling wary about subscribing in order. This feels like a hack for something React can already do in the batched mode. But I'm not actively involved now so it's hard for me to say.

@jimbolla is way more familiar with the guts of this, and you're obviously _way_ more familiar with the guts of React, but as I understand it there's two main intended benefits:

- Ensure that we don't have children subscribing before parents, as can happen in 4.x.  The current behavior results in nasty bugs if you're using the ""connected parent passing IDs to connected children"" pattern, as a child whose item just got deleted may try to retrieve no-longer-existing data before its parent has a chance to re-render without that child.  Top-down subscriptions solve that by ensuring that the parent re-renders first, causing the child to unmount.
- By handling things top-down, it minimizes wasted effort, since a connected child won't call `setState` before its parent has.",markerikson,2016-12-14 04:53:38
473,2016-12-10 03:46:53,">The current behavior results in nasty bugs if you're using the ""connected parent passing IDs to connected children"" pattern, as a child whose item just got deleted may try to retrieve no-longer-existing data before its parent has a chance to re-render without that child.

Right, but wouldn’t this problem cease to exist were all `setState`s batched by React and executed in the correct order in the future? I’m just trying to figure out the longer term plan.

>since a connected child won't call setState before its parent has.

Longer term this shouldn't matter. (That's what batching solves.)

>But: I thought the point of the top-down subscriptions was to avoid being dependent on lifecycle ordering.

It is dependent on `setState` callbacks which seems unfortunate to me because it forces React to keep track of them. This will negate some benefits of Fiber if I understand it correctly. I’m totally fine with doing it if it’s necessary now but I just want us to keep a larger picture in mind and have a way out of this eventually.",gaearon,2016-12-14 04:53:38
473,2016-12-10 04:00:12,"> Right, but wouldn’t this problem cease to exist were all setStates batched by React and executed in the correct order in the future? I’m just trying to figure out the longer term plan.

Ah... as I understand it, no - it's the _subscription itself_ that's the issue.  In other words, something like:

<S_CODE_TOKEN>

If you deleted the item, then when `mapState` tries to read out that entry and extract further data from it, `itemForThisComponent` is going to be `undefined`, and the `someValue` read will blow up.  Sure, you can (and probably should) put in defaults and failsafes, but not everyone will.  I ran into this in my own app a few times, and it took me a while to catch on to the pattern.",markerikson,2016-12-14 04:53:38
473,2016-12-11 23:08:07,"> It is dependent on setState callbacks which seems unfortunate to me because it forces React to keep track of them. 

This isn't true anymore. I removed the `setState` callback and moved it to `componentDidUpdate`.

I added the top-down subscriptions to fix the stale props issue, as discussed in #292, as well as the your comments above. This ensures that `mapStateToProps` only gets called with fresh props.

The major perf issue in 4.5 was related to the way that the component's store listener would call `setState` for every store change, if the component's `mapStateToProps` depended on `ownProps`. #398 was one such report of this. The perf loss occurred even if the component ultimately didn't rerender. It seems just calling `setState` itself is costly enough.

My solution was to make sure the listener only has to call `setState` if it actually has new final props by calling `mapStateToProps` etc during the listener & before calling `setState`. So that work is now being done outside the React lifecycle. This is also what will enable us to unimplement `shouldComponentUpdate`, as discussed in #507.

In order to take advantage of React's batched updates, we'd have to bring the props calculate back into the React lifecycle. I haven't completely thought it through, but I believe that would involve:
* Going back to calling `setState` for every store state change, but wrapping it in a call to batchedUpdates.
* Computing new final props during `componentWillUpdate`
* Preserving `shouldComponentUpdate`

>  but relying on lifecycle order feels fragile, and reliant on React implementation details.

In my opinion, this way would be *more* reliant on React's implementation details.",jimbolla,2016-12-14 04:53:38
473,2016-12-11 23:17:54,"@jimbolla , side question: per your comments in https://github.com/dtinth/pixelpaint/pull/1#issuecomment-266211907 , any other tweaks you can think of that would help improve perf in that kind of scenario?  I know, I know, all programming is tradeoffs and nothing is perfect, just would be nice to say that v5 is better in every way :)",markerikson,2016-12-14 04:53:38
473,2016-12-12 01:40:35,"BTW, the hold-up on this release is me. I just did my move today and don't yet have reliable internet access (coming to you from my phone's hotspot temporarily). Once they can plug in the right wire outside my house, I can get this taken care of and welcome us to The Future™!",timdorr,2016-12-14 04:53:38
473,2016-12-14 04:53:38,[Done 💥](https://github.com/reactjs/react-redux/releases/tag/v5.0.0),timdorr,2016-12-14 04:53:38
473,2016-12-14 04:57:51,Obligatory tweet! https://twitter.com/timdorr/status/808898559097573376,timdorr,2016-12-14 04:53:38
472,2016-08-24 00:51:04,,jimbolla,2016-08-27 00:48:02
472,2016-08-24 00:56:25,"Why did you close the other PR?
",timdorr,2016-08-27 00:48:02
472,2016-08-24 01:01:02,"github did it automatically when i deleted my branch and recreated it. I wanted to have the failing test _before_ the fix so I was diddling with my git history. Ended up messing up my branches and just squashed the changes and recreated the branch.
",jimbolla,2016-08-27 00:48:02
472,2016-08-24 01:04:04,"You can just fix that locally and force push next time. A branch is just a pointer to a particular commit hash, and force pushing lets you change the remote branch/pointer to a commit not along the same chain. Github fixed handling that case a year or two ago, so it no longer loses all your comments and stuff like before.
",timdorr,2016-08-27 00:48:02
472,2016-08-25 19:13:15,"@timdorr Do you think this is ready for another alpha release?
",jimbolla,2016-08-27 00:48:02
472,2016-08-27 00:47:58,"Yeah, I'll do that right now.
",timdorr,2016-08-27 00:48:02
472,2016-08-27 01:10:30,"`react-redux-5.0.0-beta.1` has been published to `react-router@next`!
",timdorr,2016-08-27 00:48:02
471,2016-08-22 20:41:09,"What I am rendering:

<S_CODE_TOKEN>

when attempting a sign in I am getting 'Cannot read property 'dispatch' of undefined' when calling this.context.store.dispatch

I threw a debugger and store is not present on this.props or this.context (SessionForm component).

I thought I tried everything from all the documentation on this subject I could find, still no help though
",alzapiedi,2016-08-22 20:59:53
471,2016-08-22 20:59:53,"Are you attempting to access the `<Provider>` context directly? You should be `@connect`ing your components and providing your action creators as bound functions to `dispatch`, which you can then access via props.
",timdorr,2016-08-22 20:59:53
471,2016-08-22 21:03:03,"I would like to dispatch from the SessionForm component on a form submit event, was under the impression that provider allows for the store to be accessed by this.context.store
",alzapiedi,2016-08-22 20:59:53
471,2016-08-22 21:04:34,"Yes, but that's removing a big benefit of having this library. You should use `@connect` instead like so: https://github.com/reactjs/react-redux/blob/master/docs/api.md#inject-todos-and-all-action-creators-addtodo-completetodo--as-actions
",timdorr,2016-08-22 20:59:53
471,2016-08-22 21:53:50,"Understand the benefit of connect for presentational components however this component is just a log in form. It does not need to be connected to redux state. Just needs to call dispatch when submit is clicked. Is this still an appropriate use for connect?
",alzapiedi,2016-08-22 20:59:53
471,2016-08-22 21:56:12,"You don't have to connect to state: https://github.com/reactjs/react-redux/blob/master/docs/api.md#inject-just-dispatch-and-dont-listen-to-store
",timdorr,2016-08-22 20:59:53
471,2016-08-22 21:59:19,"Yeah, both `mapState` and `mapDispatch` are optional.  Connected components can optionally subscribe to state updates or ignore state entirely, and specify what functions they want to use `dispatch` with or just receive `dispatch` as a prop.  Fine either way.
",markerikson,2016-08-22 20:59:53
471,2016-08-22 23:55:28,"Excellent thank you Tim! and apologies for totally missing that part of the readme, I believed this particular functionality worked independently from connect 
",alzapiedi,2016-08-22 20:59:53
470,2016-08-22 07:39:29,"For example I have chat container. On my page I want there to be two chats. The first one for users and the second one is for administrators. How to use chat container to create some(in my case two) instances? And each instance must have its own property in state object.
State object example:

<S_CODE_TOKEN>
",pavel06081991,2016-08-22 16:18:27
470,2016-08-22 16:18:27,"Hi, it sounds like you're just getting started with React and/or Redux. For usage questions, please use Stack Overflow or Reactiflux. This is a bug tracker.
",timdorr,2016-08-22 16:18:27
469,2016-08-21 05:07:30,"What's that? How does `TodoApp` look? Is it just a function as everywhere in you your example here http://redux.js.org/docs/basics/ExampleTodoList.html, or should it be a full-featured React component? If one follows your examples and uses functions, there is no `dispatch` within the `TodoApp` function. It only injects `todos`, not `dispatch`. Why do you say that it injects `dispatch` then? Please be more detailed writing the documentation. Provide `TodoApp` example. Now it is not possible to understand.

![react-redux_api md at master reactjs_react-redux - google chrome 2016-08-21 12 57 10](https://cloud.githubusercontent.com/assets/3880497/17835444/19d842dc-679f-11e6-8202-276f448304ff.png)
",wzup,2017-02-17 14:51:44
469,2016-08-21 12:02:11,"That's fair. I can see that being hard to understand if you haven't been following along with the Redux documentation. Want to submit a PR to clear it up?
",timdorr,2017-02-17 14:51:44
469,2016-08-21 19:37:11,"Please note that `dispatch` accepts two main arguments, `mapStateToProps` and `mapDispatchToProps`.  If a `mapDispatch` argument is not provided, `connect` will provide its own, which by default will inject the `dispatch` reference.  So, in that example, the provided `mapState` will inject a `todos` prop, and the default `mapDispatch` will inject a `dispatch` prop.
",markerikson,2017-02-17 14:51:44
469,2016-12-29 22:05:28,"I can help out with this if nobody has dibs. Wouldn't the PR have to go to ""redux"" repo proper for this file: https://github.com/reactjs/redux/blob/master/docs/basics/ExampleTodoList.md ? @markerikson @timdorr 

Thanks guys!",mtomcal,2017-02-17 14:51:44
469,2016-12-29 22:20:41,"More I look at this, I am not sure if this issue is in the docs currently as of Dec 2016. Might be already solved issue.",mtomcal,2017-02-17 14:51:44
468,2016-08-19 15:30:50,"## Version

react-router: 2.6.1
react: 0.14.8
redux: 3.5.2
react-redux: 4.4.5
## Steps to reproduce

`react-router` said its not related to them, so I'll try here.

I have this Pages component that does page transitions using `ReactStyleTransitionGroup` which uses `ReactTransitionGroup` internally.

<S_CODE_TOKEN>

My AccountRoute looks like this:

<S_CODE_TOKEN>
## Actual Behavior

When I navigate from `/account` to `/activity` I am getting an error in `ReactTransitionGroup.js:_handleDoneLeaving:166` (React 0.14.8) saying that component is `null`. And its clear why.
Because when I look at `this.refs` I see one key in there named: `.$page/activity` but the functions parameter `key` has the value of `.$page/account`. So no `component` with the key `.$page/account` can be read from it.
The key is composed in my `<Pages/>` from the routers location.

Now the interesting thing is, when I move the action dispatch code from `AccountContainer:componentWillMount` to `AccountContainer:componentDidMount` everything works as expected. That page transitions happen without any errors. All the code does is dispatching an action to the redux store. Which, I know, triggers (maybe) a re-rendering. According to the (redux, react) docs its fine to call dispatch/setState from within `componentDidMount`.

I'd like to understand whats going on here. If you think this is more related to `redux` or `react` close this an I will carry it over there.
",pke,2016-08-20 12:22:55
468,2016-08-19 15:55:08,"Just logically, this makes sense. If your component hasn't mounted, it's not in the DOM and there's no ref for it yet. 

What's not clear is what is going on around all of this. Are you using something like react-helmet to do the page title? Where does this `AccountContainer` live? 
",timdorr,2016-08-20 12:22:55
468,2016-08-20 11:56:42,"No I am not using `react-helmet`. I know the component has not mounted when `componentWillMount` is called. But I wonder why that should be play a role when dispatching actions. According to the docs its safe to dispatch action in this lifecycle hook.

About the confusion about `AccountContainer`. It is imported as `AccountRoute`. But I have updated the OP to make it less confusing.

The title is rendered by the App component. Thats maybe the reason why something goes wrong:
1. AccountRoute:willMount
2. dispatches action to store
3. that triggers a re-render of App
4. Pages component gets confused and generates the wrong key for the page transition
",pke,2016-08-20 12:22:55
468,2016-08-20 12:22:55,"If you follow through the entire dispatch lifecycle, it will eventually reach your connected component (within the same JS message queue). If there is a request to access a ref within whatever code is called in that component and the ref has not been mounted, that would be why you see the error.

It sounds like a quirk of the transition component that you're using. I would stick to cDM instead to avoid that issue. 
",timdorr,2016-08-20 12:22:55
467,2016-08-19 13:04:12,"I still want to write a test for this, but creating the PR to get the ball rolling.
",jimbolla,2016-08-24 00:40:13
467,2016-08-19 13:15:04,"Code coverage... that's new? I guess now I really have to write that test. :laughing: 
",jimbolla,2016-08-24 00:40:13
467,2016-08-19 15:15:09,"Yeah, I added that because we had coverage tooling, but nothing was actually checking it :)
",timdorr,2016-08-24 00:40:13
467,2016-08-20 02:21:04,"I noticed that in [trySubscribe](https://github.com/reactjs/react-redux/pull/467/files#diff-aef7770e642ef4054826f6c0aab908c8R67) there's a line where we pass in `this.onStateChange` to the `subscribe` method. Is this something the owner of the `Subscription` instance sets on it? Trying to find where it's documented.
",vhmth,2016-08-24 00:40:13
466,2016-08-19 08:05:50,"I’ve taught about 10 people how to use `react-redux` at this point and a common sticking point is the use of `mapStateToProps`. This seems to be due to confusion in terminology between local `state` and the state of the `store`. 

In teaching these React-newbies, I’ve found that when I describe the `mapStateToProps` in terms of `mapStoreToProps`, they understand it very quickly, since it's not immediately clear to them based on the name that the values they're mapping in `mapStateToProps` come from the `store`.

I propose changing `mapStateToProps` to `mapStoreToProps`, as I think it more accurately reflects what the function is doing: it's selecting values from the `store` and mapping them the component’s props.

<S_CODE_TOKEN>

I realize this is only a superficial change, since the name of the function doesn’t actually affect how `connect` uses it, but I think it might make it easier for React-newbies to understand what the function is actually doing. 

Thoughts?
",samcorcos,2016-08-21 05:08:01
466,2016-08-19 09:29:28,"This will however be wrong because `store` is a different thing. It’s an object with `getState()` and `dispatch()` methods. We can’t refer to store state as store because this is even more confusing. And we can’t pass store itself because we want to hide `dipspatch` by design. 
",gaearon,2016-08-21 05:08:01
466,2016-08-19 13:21:44,"I agree with @gaearon that `mapStoreToProps` would be incorrect. I suppose `mapStoreStateToProps` would be correct and would be slightly more clear, but ugh... getting too verbose for my liking.

I will say that the method signature for `connect` has been an issue for several of my team, who I'll admit probably just need to read the docs a little more carefully. I've thought a lot about alternate signatures but so far haven't come up with anything that's clearly better.
",jimbolla,2016-08-21 05:08:01
466,2016-08-20 20:45:24,"Yeah, I agree regarding `mapStoreStateToProps`.

What if we turned the name around? `mapStateFromStore`?
",samcorcos,2016-08-21 05:08:01
466,2016-08-20 20:48:22,"Then it’s not clear what you map it to, and some people will try to return arrays or primitive values from the method which won’t work.
",gaearon,2016-08-21 05:08:01
466,2016-08-21 05:08:01,"Ok, fair enough. Thanks for considering.
",samcorcos,2016-08-21 05:08:01
465,2016-08-18 08:52:12,"Addresses https://github.com/reactjs/react-redux/issues/464.

The issue explains this fix pretty well, but basically in the previous version of `connect` the store's context was respected when calling `getState` or `subscribe`. I move that we should have that be respected in this version as well.

Also left you a quick video:

https://www.opentest.co/share/2093c4a0652111e6a1ffdd04f7a207b4
",vhmth,2016-08-19 15:15:29
465,2016-08-18 11:01:18,"If this is important for some 3rd party libraries, could you also add a test that verifies we're doing the right thing? 
",jimbolla,2016-08-19 15:15:29
465,2016-08-18 17:49:55,"@jimbolla will do as soon as I get back to my computer.
",vhmth,2016-08-19 15:15:29
465,2016-08-18 23:13:15,"Added a test which uses a generic `ContextBoundStore` class instance. This class can be used in other places as well if need be going forward.

I also cached a bound version of `getState` within the `Connect` component in `connectAdvanced` so that its use is promoted if used elsewhere down the road.
",vhmth,2016-08-19 15:15:29
465,2016-08-18 23:25:22,"Out of curiosity, how does the org process of publishing/updating the `next` package work?

When y'all are good with this, I'd like to update our beta extension right away to solve an issue we have with our users, so just trying to get a time frame there.
",vhmth,2016-08-19 15:15:29
465,2016-08-19 13:36:35,"Can someone assign this to the 5.0 milestone?
",jimbolla,2016-08-19 15:15:29
465,2016-08-19 15:15:26,"Thanks!

I'll probably publish another release (as beta) once we get the fix for #457 in.
",timdorr,2016-08-19 15:15:29
465,2016-08-19 21:05:18,"Sounds good @timdorr. Saw that @jimbolla already has a fix he's playing around with. Again - thanks for the work on this next release guys!
",vhmth,2016-08-19 15:15:29
464,2016-08-18 08:45:39,"I noticed, per following the conversation [here](https://github.com/reactjs/react-redux/pull/416), that a rewrite of `connect` would fix the bottom-up state updates I was seeing in my nested container components.

I went ahead and tried to make that work with the [react-chrome-redux](https://github.com/tshaddix/react-chrome-redux) lib which creates a simple Store object from the content scripts of Chrome extensions (using an es6 class).

I noticed that the `this` context within the [react-chrome-redux Store](https://github.com/tshaddix/react-chrome-redux/blob/master/src/store/Store.js#L57) was `undefined` and noticed that the new rewrite of `connect` was not respecting the store's own context when calling [getState](https://github.com/reactjs/react-redux/blob/next/src/components/connectAdvanced.js#L162) and [subscribe](https://github.com/reactjs/react-redux/blob/next/src/utils/Subscription.js#L8).

Since the previous version of `connect` used to respect this context in [subscribe](https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L199) and [getState](https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L244), I believe we should respect it in the new version of `connect` as well (unless there's a good reason not to - in which case it should probably be stated as a potential breaking change for any libs that roll their own Stores that rely on having a local context).
",vhmth,2016-08-19 15:15:36
463,2016-08-17 04:55:35,"When you use connect to connect to a store server side, what happens? Does it stay subscribed to the store on each request? Would this not cause memory to build up?

Is there a way to use connect store without subscribing to the store?
",atbjk,2016-08-17 15:45:55
463,2016-08-17 12:15:40,"Components subscribe during `componentDidMount` and unsubscribe during `componentWillUnmount`.
",jimbolla,2016-08-17 15:45:55
463,2016-08-17 12:56:33,"oh ok, for example if you did react.renderToString it would not subscribe
",atbjk,2016-08-17 15:45:55
463,2016-08-17 13:25:30,"My understanding is that server-side-rendering via `renderToString` never calls `componentDidMount` and thus never subscribes.
",jimbolla,2016-08-17 15:45:55
462,2016-08-16 23:39:40,"isparta is unmaintained. Inspired by reactjs/react-router#3701 and reactjs/react-router#3685.
",timdorr,2016-08-16 23:43:35
461,2016-08-16 23:05:28,"Unfortunately, we can't switch off babel-eslint because we're using decorators in the specs. 

Fixes #353
",timdorr,2016-08-16 23:13:08
460,2016-08-16 20:28:21,"For performance reasons, i use `reselect`.

There is a very serious problem for me.

![2016-08-17 4 24 12](https://cloud.githubusercontent.com/assets/670114/17714468/8085c236-6432-11e6-91a1-95cc0effb128.JPEG)

The highlight log info is trigger by my component render is invoked.
When page initial work done, the component re-render 19 times...

And there are my code:

<S_CODE_TOKEN>

In addition to reducer handle `user` or `guestModeInfo` data, others reducer handle will re-render component...

For example,

There are 5 action,

<S_CODE_TOKEN>

When reducer `UPDATE_PROJECT` `CREATE_MESSAGE` `DO_SOMETHINGELSE` be fired, the component will re-render.
But `UPDATE_USER` `UDATE_GUESTMODEINFO` reducer will be cached by `reselect`...
",fengliu222,2016-08-16 21:22:19
460,2016-08-16 20:33:16,"My guess is `ToJS()` is giving you a new object every time, which means your component see different props everytime, thus re-rendering every time. Try moving the toJS call inside the last function of createSelector()

<S_CODE_TOKEN>
",jimbolla,2016-08-16 21:22:19
460,2016-08-16 20:51:27,"@jimbolla Thanks your answer!! In this component , your way is worked! But the most serious problem is on `ReduxListView` component, i change this issue , the example code is the `selector` of `ReduxListView` component. 
",fengliu222,2016-08-16 21:22:19
460,2016-08-16 21:22:19,"This is a usage question, not a bug report. Please ask this on Stack Overflow. You'll have more people viewing the problem and will get better answers as a result. 
",timdorr,2016-08-16 21:22:19
459,2016-08-16 13:22:51,"I've seen a lot of possible answers to the ""You cannot change <Router routes>; it will be ignored"" problem with react router.

I cannot seem to fix this no matter what solution I try. So, I'm totally clueless and turn to the good maintainer(s) of this brilliant piece of software.

My code is at https://github.com/DDecoene/React-flux-example

What I see is that if I change https://github.com/DDecoene/React-flux-example/blob/master/app/reducers/userReducer.js#L29 not to return a new state but just state itself, I get no error.
",DDecoene,2016-08-16 16:23:28
459,2016-08-16 16:23:28,"This looks like a usage question, not a bug report.  Also, this doesn't even seem related to React-Redux at all.  Please try asking this question on Stack Overflow instead.
",markerikson,2016-08-16 16:23:28
459,2016-08-18 09:21:31,"I would start by removing `babel-preset-react-hmre` from your project. It is deprecated and not supported. 
",gaearon,2016-08-16 16:23:28
458,2016-08-16 06:42:35,"I would prefer to  have a function  exposed from a .js file , within that function i would prefer to have access to the variables in the store.

Snippet of the code : -

import { connect } from 'react-redux';
function log(logMessage) {
    const {environment} = this.props;
    console.debug('environment' + environment + logMessage ); 
....
}

function mapStateToProps(state) {
    return {
        environment : state.authReducer.environment
    };
}

export default function connect(mapStateToProps)(log);

I have many components, which attach the class through connect, can i attach functions through connect() 
",raaone7,2016-08-16 16:24:09
458,2016-08-16 16:24:09,"This is a usage question, not a bug report.  Please ask this on Stack Overflow instead - more people will see the question, and you'll get a better response.
",markerikson,2016-08-16 16:24:09
458,2016-08-17 00:27:51,"Thank you. Have raised it. Can an expert please look into it and advice. 

http://stackoverflow.com/questions/38986366/accessing-redux-store-inside-functions
",raaone7,2016-08-16 16:24:09
457,2016-08-15 06:08:36,"I am testing v5 alpha from #416 and noticed that after some time every re-render in one of my components starts triggering following warning: 

`Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code`

My best guess is that there is a memory leak somewhere and new connect holds a reference to unmounted component. Triple checked that it doesn't happen with `4.4.5`. 

It doesn't happen right away, only after I switch back and forth between routes that re-render a lot of components. I don't have time to dig deeper and set up a test project, but I can create a branch in my public repo where it's happening to reproduce. Please let me know if you want this.
",Restuta,2016-08-27 00:49:05
457,2016-08-15 07:10:10,"I have the same issue
",max-mykhailenko,2016-08-27 00:49:05
457,2016-08-15 10:01:58,"A repro would be very helpful.  Thanks. 
",jimbolla,2016-08-27 00:49:05
457,2016-08-15 18:31:09,"@max-mykhailenko do you have simple steps to repro?
",Restuta,2016-08-27 00:49:05
457,2016-08-15 18:59:44,"@Restuta Do you have a reproducible test case as well? 

Does this occur in the canonical `real-world` example? https://github.com/reactjs/redux/tree/master/examples/real-world
",timdorr,2016-08-27 00:49:05
457,2016-08-16 06:19:19,"@timdorr not it does not, I created a branch that you can use to repro it.

Branch: https://github.com/Restuta/rcn.io/tree/react-redux-connect-bug

Steps to repro:
- `git clone git@github.com:Restuta/rcn.io.git`
- cd `rcn.io`
- `npm i && npm run dev`
- open [http://localhost:8888/events/8](http://localhost:8888/events/8) in your browser
- open console
- click on MTB in the header and then back to ""Event 8""

You should see in console:

""Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the Connect(EventDetails) component.""

Notice that the only change from ""dev"" branch is bump of `redux-react` and you can test it yourself that issue is not happening with `4.4.5`.  @jimbolla 
",Restuta,2016-08-27 00:49:05
457,2016-08-16 11:19:13,"Thanks,  I'll have a look at this tonight. 
",jimbolla,2016-08-27 00:49:05
457,2016-08-16 13:25:48,"@Restuta That git repo address doesn't seem to work for me. Is it supposed to be https://github.com/Restuta/rcn.io.git?
",jimbolla,2016-08-27 00:49:05
457,2016-08-16 18:59:02,"@jimbolla that address is in SSH format, of you prefer HTTPS then yes, use that one
",Restuta,2016-08-27 00:49:05
457,2016-08-17 03:03:56,"I have a fix ready for this [here](https://github.com/jimbolla/react-redux/tree/fix-457) but I'm going to attempt to write a test for it before submitting the PR. Honestly, writing the test is the hard part for me. :laughing:  
",jimbolla,2016-08-27 00:49:05
457,2016-08-19 21:49:56,"@jimbolla what do you think the timeline is for getting this in? This is the last thing before #465 gets in, which is causing some UI issues for our beta users so I'm more than happy to write some tests if you're feeling tied up. :-)
",vhmth,2016-08-27 00:49:05
457,2016-08-20 04:59:35,"@vhmth Unfortunately I have commitments this weekend, so I won't be able to work on it again until Monday evening. I have off Tuesday and plan to work on it then as well.

I started writing a test but am having difficulty reproducing the behavior from scratch. I'm going to take a different approach and start with @Restuta's project and just start ripping out all the unrelated code until I'm left with the minimum code that reproduces the error. Then I'll turn that into a test.
",jimbolla,2016-08-27 00:49:05
457,2016-08-20 05:07:08,"Sounds like a plan @jimbolla. If I have some time later on Sunday, I'll see if I can repro too. Maybe that will save ya some time and you could turn that into a test if I come up with that minimal example.
",vhmth,2016-08-27 00:49:05
457,2016-08-20 05:08:24,"That sounds like it would be very helpful. Thanks. :smile: 
",jimbolla,2016-08-27 00:49:05
457,2016-08-20 10:06:10,"Don't hesitate to send a PR with minimal repro setup for the branch I created @vhmh
",Restuta,2016-08-27 00:49:05
457,2016-08-22 06:15:06,"Hey guys I'm sorry about the push off. A lot of stuff landed on my plate (life stuff) this weekend and couldn't get to working on repro-ing that bug. I will try tomorrow afternoon. I know @jimbolla said he wouldn't be able to get to it until tomorrow too, but it may be good to have two set of eyes on trying to repro it.
",vhmth,2016-08-27 00:49:05
457,2016-08-24 00:55:02,"New PR #472 with fix and test is ready.
",jimbolla,2016-08-27 00:49:05
457,2016-08-27 00:49:05,"Fixed in #472. I'll push out a beta release tonight.
",timdorr,2016-08-27 00:49:05
457,2016-08-27 01:10:23,"`react-redux-5.0.0-beta.1` has been published to `react-router@next`!
",timdorr,2016-08-27 00:49:05
457,2016-08-27 01:26:08,"on it, testing
",Restuta,2016-08-27 00:49:05
457,2016-08-27 02:02:14,"Thanks, Tim! 
",jimbolla,2016-08-27 00:49:05
457,2016-08-28 03:48:49,"looking good so far, thanks guys!
",Restuta,2016-08-27 00:49:05
457,2016-08-28 21:33:22,"Been using it in our staging extension and things are looking good. Will be rolling out our extension using this with our 150-ish beta users and let y'all know if we run into any issues.
",vhmth,2016-08-27 00:49:05
456,2016-08-14 07:07:55,,donperi,2016-08-14 15:25:49
456,2016-08-14 15:25:49,"I would use `mapDispatchToProps` solely because you can easily bind your action creators easily and that makes your code a bit more clean.
",timdorr,2016-08-14 15:25:49
455,2016-08-12 14:43:32,"## Some Background

I am working on a library which implements the redux store API, without actually using redux to store the data.  The purpose is to connect to state stored in Backbone models and collections in a redux-like fashion.  

In theory, by implementing the redux store API, one can even use redux middleware and other supporting libraries such as react-redux, without redux itself.  This can provide a nice ""bridge"" for projects who are evolving from a backbone ecosystem to that of react and eventually redux.

Check out the work-in-progress [here](https://github.com/adamterlson/backbone-redux-store) and a sample of it in action [here](https://github.com/adamterlson/backbone-redux-store/tree/master/sample)
## The problem

In theory, one does not need redux, but in reality, react-redux takes a dependency on Redux for, as far as I can find, a singular purpose: supporting the shorthand `mapDispatchToProps` notation of simply passing an object by using redux's `bindActionCreators` function in [utils/wrapActionCreators.js](https://github.com/reactjs/react-redux/blob/93cdfaeaf9d3e5400ffc05fe9d177118286109ca/src/utils/wrapActionCreators.js):

<S_CODE_TOKEN>
## Proposal

I (crazily) propose dropping the dependency on the redux library from react-redux. The package is only truly dependent upon the redux store **API** to function, not redux itself, and this one use of `bindActionCreators` may not be sufficient enough warrant redux as a dependency.  

After all, there could be other applications out there (like mine :D) which wish to leverage react-redux but don't want to use redux.

I'm open to any discussion about how crazy wrong I am. :)

Thanks!
",adamterlson,2016-08-15 02:31:22
455,2016-08-12 14:57:48,"But that won't necessarily always be true. For example, some code I'm working on right now in react-redux related to subscription notification, if accepted, might get moved into redux proper to remove code duplication. Then react-redux will definitely depend on redux.
",jimbolla,2016-08-15 02:31:22
455,2016-08-15 02:31:22,"I've got to agree with @jimbolla here. Redux has both an API and a guaranteed way of behaving. And that behavior can be fairly critical to this library and isn't always documented exactly. If you happen to build something that works with it, great, but a hard requirement on Redux is going to be needed. 

At the very least, if your minification process is sufficient, any bytes spent on Redux code should be eliminated by dead code removal. And if you _really_ want to get rid of it, you can use an alias in your build process to an empty module.
",timdorr,2016-08-15 02:31:22
455,2016-08-15 06:42:21,"@timdorr Thanks for the explanation!
",adamterlson,2016-08-15 02:31:22
454,2016-08-09 10:45:53,"When I try and connect a component with context being passed from the parents, and required for my overall application routing, the new component generated by `connect` does not merge the context with the top level component it creates. I am not sure whether this something people want or not?
",mihirk,2016-08-15 02:33:05
454,2016-08-12 13:14:14,"Do you have an example of this? Also, what versions of the libraries are you using? I just got an app running using `create-react-app` and here's the gist of the code: https://gist.github.com/DavidBrear/5208b5ec1268c4c8ba8265d1bb6f0496. This displays the result: 
<img width=""473"" alt=""screen shot 2016-08-12 at 9 11 27 am"" src=""https://cloud.githubusercontent.com/assets/1081640/17623255/17b0a2bc-606d-11e6-9192-67609f38e417.png"">
",DavidBrear,2016-08-15 02:33:05
454,2016-08-15 02:33:05,"You can definitely access multiple parent contexts from a single component. So, something must be set up wrong. Without an example, I'm not sure what's going on, but it sounds like an error on your side, unfortunately. I'd look at @DavidBrear's example to see what you might be doing differently.
",timdorr,2016-08-15 02:33:05
453,2016-08-08 20:56:41,"hi

I'm new to redux. trying to make my first reducer work. I'm using react-native

now, I have only one state, drawerOpen, which is false by default. when tapping the drawer button, I wanna toggle that.

I have checked that state is successfully changed(via console.log), and I have not mutated the state object at all. 
although the state was changed, my component wasn't re-rendering. so I checked with console.log, and it seems the state object that goes in mapStateToProps return something weird, containing action creator.

I have read the issues and related StackOverflow threads. the problem mostly is mutating objects, which I haven't done. 

here is the screenshot, from logging state. The second line, Object, is what is logged in mapStateToProps:
![image](https://cloud.githubusercontent.com/assets/6819858/17495525/9e82b6f0-5dce-11e6-95d0-21b0c3a62a13.png)

here are my codes:
### DrawerContainer.js, which containes the logged state

<S_CODE_TOKEN>
### Creators.js, containing action creator

<S_CODE_TOKEN>
### Store->index.js

<S_CODE_TOKEN>
### DrawerReducer.js

<S_CODE_TOKEN>
### Reducers->index.js, the file that is imported in store index file

<S_CODE_TOKEN>
",fmmajd,2016-08-14 15:26:33
453,2016-08-14 15:26:33,"I would ask this on Stack Overflow. This is a bug tracker and there doesn't appear to be any bug with react-redux here.
",timdorr,2016-08-14 15:26:33
452,2016-08-05 15:36:16,"When using the React Performance tools and specifically printWasted I'm unsure as to whether I should be paying attention to connected component's wrapper.

Whenever the state changes, all my connected component's wrappers re-render (as intended) and (unless the stateProps have changed) return the cached rendered component. So in this case render has run but there has been no DOM update. Therefore I think it should show up in printWasted but I should ignore it.

The only thing that makes me doubt this is that not all my connected component's wrappers are in the wasted table.
",foiseworth,2016-08-12 16:34:45
452,2016-08-05 17:10:55,"How much time is reported being spent there? If it’s a lot, it might mean your `mapStateToProps` is saving you from re-renders below but you do a lot of work in it, and maybe you could find a way to do less work there.
",gaearon,2016-08-12 16:34:45
452,2016-08-08 10:53:45,"Many thanks for replying.

I'll investigate optimising mapStateToProps (unfortunately it just consists of some gets on immutable maps) but there are many instances of the component (200). However, from your reply, I'm presuming seeing a `Connect(aComponent)` in printWasted doesn't indicated a wasted render?

If I make a change to my store which has no effect on the current display (ie all components should return renderedElement early) and then printWasted, I don't see all my connected components which seems to contradict my presumption.
",foiseworth,2016-08-12 16:34:45
452,2016-08-08 11:54:42,"It’s hard to say without a specific example reproducing this. If you can create one and you believe ReactPerf is behaving in a wrong way please file a bug in React and I’ll take a look.
",gaearon,2016-08-12 16:34:45
452,2016-08-12 16:34:44,"@gaearon I kept looking into this and discovered there are two reasons why I might be missing some printWasted entries:
1) some are being filtered out by DONT_CARE_THRESHOLD which you seem to have removed from React in this https://github.com/facebook/react/pull/6647/files#diff-f5e99eb03b46b76237d2e7632d018f91L16 (we're still using v15.0.2)

2) after updating to the latest React, some entries were still missing, this (I believe) is because of the way perf tools work (not sure if it is a bug). As suggested, I will close and have opened a bug on the react project: https://github.com/facebook/react/issues/7484
",foiseworth,2016-08-12 16:34:45
451,2016-08-05 15:35:41,"Hello,

I'm trying to test a connected component. For some reason, I'm receiving the following error only when testing connected components which throws me off a little...

'ReferenceError: navigator is not defined'

<S_CODE_TOKEN>
",michael-iglesias,2016-08-14 15:16:55
451,2016-08-10 14:21:32,"I think you need some more globals exposed from jsdom, mine look like this:

<S_CODE_TOKEN>
",frankwallis,2016-08-14 15:16:55
451,2016-08-14 15:28:05,"Thanks @frankwallis 

I ended up including the following which seems to have resolved the issue for me. I'll look into adding the globals you listed above as well!

<S_CODE_TOKEN>
",michael-iglesias,2016-08-14 15:16:55
450,2016-08-03 07:48:35,"A really small suggestion :
On http://redux-form.com/6.0.0-alpha.4/docs/api/Field.md/ I can read

Field .... 1. .... The name prop is required.

Then a few lines later : 
`<Field component={MyCustomInput}/>`
=> no name prop.

Maybe adding a name prop to the sample for consistency ?
",mbaroukh,2016-08-03 18:24:08
450,2016-08-03 18:24:08,"Ah... your example is talking about Redux-Form, which is a _completely_ separate library than React-Redux.
",markerikson,2016-08-03 18:24:08
450,2016-08-03 18:30:56,"Oups ... Really sorry ... Wrong tab ...
",mbaroukh,2016-08-03 18:24:08
449,2016-08-01 16:03:32,"Hi,
In the reducer we're using the following code (we are using redux-actions to reduce boilerplate):

<S_CODE_TOKEN>

We are using `update` from [React Immutability Helpers](https://facebook.github.io/react/docs/update.html) but assigning the result into the state using `state =`.
Is this against the [basic Redux guidlines](http://redux.js.org/docs/Troubleshooting.html)? Because the code seems to work perfectly and quickly, and the redux devtools shows the state changes correctly...
",giladbr,2016-08-01 16:41:44
449,2016-08-01 16:41:44,"A couple thoughts:
- This is related to Redux itself, not the React-Redux library
- This is a usage question, and should really be asked on Stack Overflow instead
- That said, what you're actually doing is simply assigning a new value to the local variable named ""state"", not actually modifying the contents of the object that variable was previously pointing to.  So, that's not direct mutation, and should be okay.
",markerikson,2016-08-01 16:41:44
448,2016-07-30 09:42:17,,Mutefish0,2016-07-31 03:29:06
448,2016-07-30 19:58:32,"The question isn't really clear.  What are you trying to do?  What is insufficient about `mapDispatch`'s behavior?  What do you want to see?
",markerikson,2016-07-31 03:29:06
448,2016-07-31 01:04:57," for example

<S_CODE_TOKEN>
",Mutefish0,2016-07-31 03:29:06
448,2016-07-31 01:55:49,"Yeah, `mapState` and `mapDispatch` don't support that scenario directly.  That's actually part of what prompted @jimbolla to start implementing a new approach to `connect()`.  

There are two ways you could do something like that right now:
1. Select the data using `mapState`, and have the component call `this.props.doStateDependentAction(this.props.someValueFromState)`
2. Select the data using `mapState`, and use the third argument to connect (`mergeProps` ) to define the action creator.  Note that this would probably involve re-defining the action creator function every time the state changes, which could be a performance issue.
",markerikson,2016-07-31 03:29:06
448,2016-07-31 03:28:37,"Got it,Thanks! @markerikson 
",Mutefish0,2016-07-31 03:29:06
447,2016-07-29 16:05:51,,ratson,2016-07-30 00:22:27
447,2016-07-30 00:22:27,"We did this before, and it broke people. Unfortunately, unless I’m missing something, this is how Browserify wants it to be. Thanks for the PR though!
",gaearon,2016-07-30 00:22:27
446,2016-07-28 03:33:35,"Hello, I have troubled in a problem.
In the connect method, I use mapStateToProps and mapDispatchToProps. The dispatch action does not cause changes of state in this component , but the component still update. 
This really puzzle me.
",RubyZhuuu,2016-07-28 04:14:27
446,2016-07-28 04:14:27,"This is a usage question, and should really be asked over on Stack Overflow.  You'll probably get more people looking at your question and able to help you if you ask over there.  You might also try asking for help in the Reactiflux chat channels on Discord - see http://www.reactiflux.com for a link to the channels.

You might also want to take a look at the Redux FAQ, which has some information on this sort of thing: http://redux.js.org/docs/FAQ.html#react-rendering-too-often
",markerikson,2016-07-28 04:14:27
446,2016-07-28 06:58:12,"I got my answer here:  http://redux.js.org/docs/FAQ.html#react-rendering-too-often . That's because some state is produced by Array.map() method. And thank you so much. @markerikson 
",RubyZhuuu,2016-07-28 04:14:27
445,2016-07-27 15:51:52,"I have a reducer which returns an array of slides.
`const initialState = {
  slides: []
};`

I have added a PropType of Array in the component.
`Homepage.propTypes = {
  slides: React.PropTypes.array
};`

The problem is that I receive this warning when the component gets rendered. However I am returning array from the reducer.

> Warning: Failed prop type: Invalid prop `slides` of type `object` supplied to `Slider`, expected `array`.

![screen shot 2016-07-27 at 17 48 47](https://cloud.githubusercontent.com/assets/1446474/17182050/7f15ed7e-5422-11e6-9937-d57f9df8d86c.png)

I checked in console and when the component is rendered the first time it receives an object of type List in slides prop but after the data is fetched from API it then displays array.

What should I do to remove this warning?
",tayyabshabab,2016-07-27 18:48:11
445,2016-07-27 18:48:11,"This is a usage question, and really not even related to React Redux at all - it's React-specific.

That said, I suppose you could do something like `PropTypes.oneOf([PropTypes.array, PropTypes.object])` or something.  There's also a third-party package of PropTypes types for Immutable data structures out there that you could use with this as well.
",markerikson,2016-07-27 18:48:11
444,2016-07-27 13:11:56,"# Hi. I have a more complex store in which one of the keys keeps state of multiple objects, identified by id.

My problem is, that when editor is loaded I need to initialise default properties in the store. When editor is loaded again, these values are reused. I tried to do this in mapStateToProps, yet it results to error. This is what I do:
1. In mapStateToProps I detect whether store has a specific key
2. If the key is not there, I dispatch action to initialise it

What would you recommend to do about this? I cannot in it this in the reducer, as before the component is loaded I do not know under what key I will store values in the store.

<S_CODE_TOKEN>
",tomitrescak,2016-08-14 15:18:23
444,2016-07-27 13:20:48,"Have your component dispatch an action in component(Did|Will)Mount that initializes the store state.
",jimbolla,2016-08-14 15:18:23
444,2016-07-27 21:14:08,"@jimbolla is there any other way? I'm sticking to the stateless components. 
",tomitrescak,2016-08-14 15:18:23
444,2016-07-27 23:15:11,"You could use recompose's `lifecycle` method to wrap your component.
",jimbolla,2016-08-14 15:18:23
443,2016-07-25 19:17:35,"I have discovered some issues with performance in my react native app. It seems to be caused by react-redux bundle.

As you can see in the video

[https://youtu.be/D5L-RM5EY5E](https://youtu.be/D5L-RM5EY5E)

there is a significant delay between action dispatching and view rendering. On real devices it looks even worse. There are no API calls in this example. Only simple actions dispatching and state changes. On other hand Facebook Flux implementation and simple call of setState work much more faster.

Any ideas how to improve the app performance?

I am using react: v15.2.1, react-native: v0.29.2, react-redux: v4.4.5,
**View**

<S_CODE_TOKEN>

**Actions**

<S_CODE_TOKEN>

**Reducer**

<S_CODE_TOKEN>
",alsh76,2016-08-02 19:14:00
443,2016-07-28 15:07:11,"Your `mapDispatchToProps` function looks pretty hairy. Why are you using an `immutable` Map there? Initializing the `Map`, merging, filtering, and then converting back to an object is quite computationally expensive. That will run a lot, possibly every time the store's state is updated. I would bet that is your performance bottleneck. 

I think you could simplify it to:

<S_CODE_TOKEN>

Your `mapStateToProps` function could also be optimized a little. Just `return state` instead of `return { ...state }`, there's no need to copy the tree there.
",lourd,2016-08-02 19:14:00
443,2016-07-28 15:47:51,"Thank you for the advice but i see same delays after applying your changes. This makes me sad because i really like redux and would like to use it for further projects
",alsh76,2016-08-02 19:14:00
443,2016-07-28 15:53:48,"Hm, darn. If you link to a reproduction in a separate repo someone may be able to help out more. 

Rest assured, setting a single value in the store and re-rendering a component is definitely, definitely performant — React, React Native, or otherwise.
",lourd,2016-08-02 19:14:00
443,2016-07-28 16:14:33,"Yes, i definitely should create separate simple project for testing. still hope it's a result of libraries conflict.
I supposed i have to use only actions/reducers for containers rerendering and passing props for other components.  and did not use setState at all. but maybe i got Redux wrong
",alsh76,2016-08-02 19:14:00
443,2016-07-28 16:31:56,"@lourd If mapDispatchToProps doesn't depend on props (function.length === 1), I'm pretty sure it is only run once per component instance.

@alsh76 Your mapStateToProps will cause your component to rerender every time any action is fired. You should have it be more picky about what parts of state it needs.
",jimbolla,2016-08-02 19:14:00
443,2016-07-28 16:50:32,"Right, thanks for the correction. Having just read through #416 and #407, I know you know what you're talking about 😉 
",lourd,2016-08-02 19:14:00
443,2016-07-28 16:50:57,"@jimbolla there is the only action in my example. and button pressing causes the only dispatching and the only rendering. the issue happens because of delay between dispatching and rendering. not because of multiple rerenderings. 
",alsh76,2016-08-02 19:14:00
443,2016-07-29 13:20:44,"@alsh76 Have you tried you demo without any middleware (including redux-logger)? 
",foiseworth,2016-08-02 19:14:00
443,2016-07-29 13:47:15,"@foiseworth I tried to remove redux-logger and all console.log from the code. It did not help - same delays. 

Actually it was a test page from my current project that uses [redux-thunk](https://github.com/gaearon/redux-thunk) and [react-native-router-flux](https://github.com/aksonov/react-native-router-flux) as well as some other libraries. 

i am gonna create test project with minimal dependencies and put it on github 
but honestly i need thunk and router - if the issue is caused by them i will be forced using Flux. With Flux it works good enough
",alsh76,2016-08-02 19:14:00
443,2016-08-02 19:14:00,"@lourd, @jimbolla, @foiseworth As it turned out the cause of this issue is all components from navigation chain are staying unmounted and get rerendered behind of the visible scene
See more details here [Possible navigation issue in React Native/Redux app](http://stackoverflow.com/questions/38728435/possible-navigation-issue-in-react-native-redux-app)

So it seems not a redux issue but nevertheless I would be very grateful for advices how to handle multiple unmounted components from navigation stack in the best way.  I am checking in shouldComponentUpdate if current component is visible but maybe there is the better way?
",alsh76,2016-08-02 19:14:00
443,2016-08-15 06:22:43,"@alsh76 please test your example with the last `react-redux@next`. I have almost same problem and update doesn't fix it :(
",max-mykhailenko,2016-08-02 19:14:00
443,2016-08-15 14:43:57,"@max-mykhailenko as i figured out my performance issues were caused by navigation system.
when the user navigate through pages like this  Scene A => Scene B => Scene C all components A, B, C are  staying mounted. Because all reducers are combined into one any action dispatching causes passing props to every mounted component. 

For example if the user makes any changes and dispatch them in Scene C all mounted components A, B, C are receiving props and getting rendered in same order A => B => C. If components A and B are big enough (e.g. big ScrollView list) it causes visible delays between Scene C actions and Scene C rendering as in my example   

a workaround for this - do not allow rendering of not visible components in shouldComponentUpdate. it resolved my performance issue

i hope it will help you
",alsh76,2016-08-02 19:14:00
443,2016-08-16 06:46:08,"@alsh76 Thanks for response. I use NavigatorExperimental and also saw lags, but with `react-native-router-flux` I got good performance. How do you check your active screen for `shouldComponentUpdate`?
",max-mykhailenko,2016-08-02 19:14:00
443,2016-08-16 14:40:44,"@max-mykhailenko  i am using `react-native-router-flux`. as well as `RN Navigator` it keeps all components from navigation stack mounted and all of them are rendered together.  

with `react-native-router-flux` you can use your own reducer to detect start of navigation as in their example [REDUX_FLUX](https://github.com/aksonov/react-native-router-flux/blob/master/docs/REDUX_FLUX.md) `ActionConst.BACK_ACTION` for `Actions.pop()` and `ActionConst.JUMP` for tabs switching. First reducer's param contains scene key and name.

also it's important to detect end of navigation (transition between scenes).  No rendering should be allowed in transition time. When navigator animation and rendering happen simultaneously it causes freezes and delays in my app.  No event is fired at the end of transition.  I am using 
[InteractionManager](https://facebook.github.io/react-native/docs/interactionmanager.html)
to detect end of navigation. 

if you are using `NavigatorExperimental` that's even simpler you have all callbacks out of the box [https://facebook.github.io/react-native/docs/navigation.html#step-4-create-a-navigation-stack](https://facebook.github.io/react-native/docs/navigation.html#step-4-create-a-navigation-stack)

and common rule i came to - the less renderings the better.  
",alsh76,2016-08-02 19:14:00
443,2016-11-10 15:52:31,"@alsh76 How did you did you check if components were visible?
",aljux,2016-08-02 19:14:00
443,2016-11-10 16:11:36,"@aljux, I use NativationExperimental but I imagine the flux one is similar in the sense that a list of routes will be maintained with an index to indicate ""where we are"". You can easily calculate the ""distance"" between the index and the requested route

@alsh76 I have had a lot of problems with performance on NativationExperimental. Aside from the trick abovem, another trick that made a HUGE ( ;-) ) difference is the following:

render(){

<S_CODE_TOKEN>

in the navigationStart and End methods I set a state boolean 'navigating'. When it's true, I force the sceneComponent to not re-render through shouldComponentUpdate. 

Another issue you may or may not have is that there are many more render cycles than people  often realize. If you don't have a system to ""guard"" against fetch requests being unnecessarily re-executed with every render cycle, you will also see a big negative performance impact and even recursive loops.
",mschipperheyn,2016-08-02 19:14:00
443,2016-11-10 16:34:11,"@aljux just watched for navigation events and keep full navigation history and a key of visible scene. code for `react-native-router-flux` looks like 

<S_CODE_TOKEN>

maybe in recent versions you can get foreground scene directly.  should check that
",alsh76,2016-08-02 19:14:00
443,2016-11-10 18:51:41,"@mschipperheyn yes, thank you for pointing out. I forgot to mention about blocking re-rendering during scene-to-scene transition.  If not using `NativationExperimental` then should use
`InteractionManager.runAfterInteractions`. This callback is run on the end of navigation animation - the only way to detect end of the animation in my case
",alsh76,2016-08-02 19:14:00
443,2016-11-11 10:24:28,"@alsh76, @mschipperheyn  Thanks. 
Im using the regular Navigator component together with redux.
But I cant figure out how to check inside the component which index that is currently on top?
Since the navigator it self does not have that kind of property?
",aljux,2016-08-02 19:14:00
443,2016-11-11 21:56:17,"Ok yeah navigation experimental does have that property. Don't know about the one u are using. I understood that fb wants to release some. Kind out of out of the box based on navigation experimental. Don't know ur time frame
",mschipperheyn,2016-08-02 19:14:00
443,2016-11-11 23:24:35,"@aljux You can track user actions (navigation buttons and hardware back button presses).  To detect end of  scene-to-scene transition use [InteractionManager.runAfterInteractions](https://facebook.github.io/react-native/docs/interactionmanager.html)

Have you tried [onDidFocus ](https://facebook.github.io/react-native/docs/navigator.html#ondidfocus) and [onWillFocus ](https://facebook.github.io/react-native/docs/navigator.html#onwillfocus)?  As far as I understand these callbacks allow to detect end and start of navigator transitions. Maybe their arguments refer to top component
",alsh76,2016-08-02 19:14:00
443,2016-11-12 15:25:51,"@mschipperheyn @alsh76 thanks for the tips and info, really appreciate it! 
I will look into it asap.
",aljux,2016-08-02 19:14:00
443,2016-12-06 20:59:05,"Actually I have the same problem you mentioned in the begining, but it my case, thats propably not a navigator problem. I use react-native-router-flux for navigation, but when I start my app, there are no other components mounted (and in most cases I use Action type: reset, so it resets the stack and the result is, that there wont be other components mounted ""in the background"").

So now on, I have no idea how to solve my issue. The case is, I am using Redux for changing a show/hide state of two components (the one I tap on -> i have to change the source of an Image component - the icon of the button, and the other is a little box that has to be showed/hidden, depending on that value from state). With the help of connect I get from my mapStateToProps the needed property ""show"" from reducer, and my two components depending on this value. It works fine, but there is a delay (just like in the video example on the top of this topic).

The **render** function is called with some ~ 1s delay. (if I add some console.log to the begining of my render function, it shows immediatly, but the components in return() are re-rendered just within that delay).

Anyone else noticed this? Any tips how can I fix this issue? (the console.log was there just for a test, there are no more logs, nothing that should slow this)

_Update: If I use setState instead of Redux, it works well without the delay, but I dont know if I have another option in this case (I am controlling a component with another one - and they are not related to each other)_",kuby,2016-08-02 19:14:00
443,2016-12-09 11:59:21,"For what it's worth here is what I do right now.
Store the route for one component tree in context

We created a wrapper for this
`const CurrentRoute = React.createClass({
	childContextTypes : {
		currentRoute: PropTypes.object
	},
	getChildContext() {
		return {
			currentRoute: this.props.route
		}
	},
	render() {
		return this.props.children;
	}
})`

And used it in render scene

`<CurrentRoute route={route}><CurrentScene navigate={navigate} route={route} index={index} /></CurrentRoute>`

Then you can access the route a component has been rendered into.

Store the navigation stack in a singleton
We use this code in configure scene
`let routeStack = [];
export const updateRouteStack = stack => routeStack = stack;`


Then you can use this slightly modified react-redux connect function, it will skip updates if component is rendered in another component tree then the currently displayed one
( or a similar implementation ) 
https://github.com/reactjs/react-redux/compare/master...ganmor:master

It might be possible to package this but I have'nt had the time to look into it.
Hope that helps",ganmor,2016-08-02 19:14:00
442,2016-07-25 13:45:21,"Merging the ally stuff in to replace the connect components
",jamespedid,2016-07-25 13:46:35
442,2016-07-25 13:46:59,"Sorry, wrong project. Should be fork.
",jamespedid,2016-07-25 13:46:35
441,2016-07-23 06:53:23,"https://github.com/reactjs/react-redux/blob/master/docs/api.md#inject-dispatch-and-todos

If we want to endorse using selectors as a best practice for querying the store, does it make sense to change

<S_CODE_TOKEN>

to something like

<S_CODE_TOKEN>

For parameter destructuring, we could do 

<S_CODE_TOKEN>

Spread operator changes would be pretty straightforward, and would replace `Object.assign` in snippets like https://github.com/reactjs/react-redux/blob/master/docs/api.md#inject-todos-and-all-todoactioncreators-and-counteractioncreators-directly-as-props.
",yangmillstheory,2016-08-14 15:27:53
441,2016-08-14 15:27:53,"#416 is going to use selectors internally. What you do for your own mapping of state to props is really up to the user to decide on. If anything, I would open a PR on Redux's examples to make use of reselect.
",timdorr,2016-08-14 15:27:53
440,2016-07-22 14:29:32,"Hi,
I'm having an issue where I need to require a container into a map and dynamically render them based on a string the server sends back. To do this I have a ""resolver"" file that imports my container / adds them to a Map(). That is then required in a component where I call  resolver.get(this.props.component). However doing this for some reason returns undefined.

When I require the ComponentContainer in my resolver.js it's undefined? Anyone have an idea on why that is?
If i require my container directly into the component and just render <ComponentContainer /> it works. I don't understand why requiring a contaienr component outside of a react file returns undefined.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I have the requirement where the CMS can specify strings for the components to render to a page dynamically.
",bretthadley,2016-07-25 15:12:19
440,2016-07-22 15:15:40,"What does `containers` look like?
",jimbolla,2016-07-25 15:12:19
440,2016-07-22 15:18:44,"<S_CODE_TOKEN>

<S_CODE_TOKEN>

@jimbolla The import / export definitely works because I can render the SnippetContainer inside the <Page /> if I do it directly. The <Cta /> component also work using the dynamic way.
",bretthadley,2016-07-25 15:12:19
440,2016-07-22 15:43:09,"Is it possible that your imports form a circular reference? Ex: A.js imports B.js imports C.js imports A.js

That would explain why SnippetContainer is undefined during definition but available during render.
",jimbolla,2016-07-25 15:12:19
439,2016-07-21 10:43:22,"I have two projects with nearly the same stack, last week I updated one of them from React 15.0.1 to 15.2.1. After the update this code:

<S_CODE_TOKEN>

doesn't work anymore. The component `MyComponent` doesn't receive changed data from store. It looks like `subscribe` wouldn't work, because mapStateToProps gets not called. I had to create dummy components around them:

<S_CODE_TOKEN>

to get it again to work.

After some digging I saw that with React 15.0.1 the connected component shows up as 'Connect(MyComponent)' and with React 15.2.1 it has the same name 'MyComponent' in React dev tools. As hierarchy:
15.0.1: Connect(MyComponent) > MyComponent
15.2.1: MyComponent > MyComponent

react-redux: 4.4.5
redux: 3.5.2
",hoschi,2016-07-29 09:54:15
439,2016-07-24 18:15:57,"Hi, @hoschi, 
Do you have any sample code for me to reproduce it ? maybe your simple reducer and action,
I try to updated my project and looks well for my project ~ 

If your state didn't change anything then not re-render anything for you, but I think that is not your problem.

version
React: 15.2.1, ReactDOM: 15.2.1
redux: 3.5.2, react-redux: 4.4.5
",madeinfree,2016-07-29 09:54:15
439,2016-07-28 17:10:01,"I tried to create simple fiddle as sample but I can't reproduce the bug in this simple setting. An example is there for hard to create.

I debbuged around and have some findings:
- babel-transform-react-inline-elements plugin fixes the issue, in prod env it work
- it makes no difference if `MyComponent` is created as functional stateless component or via `React.createClass` (the latter is the case in my code)
- indeed trySubscribe of the connected component is not called
- this is because componentDidMount hook gets not called
  problem for me is now, why React doesn't call the hook.

btw, do you have some tips for debuging react code? I googled around, but found only stuff for React Native. My problem when debugging is for this problem, that I can't distinguish between two components. `Component.displayName` is not there and I can't see anything other which lets me see which component factory/instance I see at the moment.
",hoschi,2016-07-29 09:54:15
439,2016-07-29 09:54:15,"I use react-hot-loader 3.beta gaearon/react-hot-boilerplate#61 and beta.0 causes this problem, but beta.1 fixes it
",hoschi,2016-07-29 09:54:15
438,2016-07-15 16:31:10,"Have this simple reducer

`const INITIAL_POSTS_STATE = {postsList: {posts: [], error:null, posts_loading: false}}

function posts(state = INITIAL_POSTS_STATE, action){
  console.log(state) // prints in the console => []

  switch(action.type){
    case 'FETCH_POSTS':
      let new_state = Object.assign({}, state, { postsList: {posts:[], error: null, posts_loading: true} });
      return new_state;
    default:
      return INITIAL_POSTS_STATE;
  }
}
export default posts;`

Why state is returned as [] and not what I pass as default INITIAL_POSTS_STATE
",rohandey,2016-07-15 17:38:12
438,2016-07-15 17:38:12,"Found the solution I was passing this defaultState to createStore 

//create default data
const defaultState = {
  posts: []
}

//create the store object to be used in the app
const store = createStore(rootReducer, defaultState);
",rohandey,2016-07-15 17:38:12
437,2016-07-15 14:16:11,"I've come into this issue once or twice now, primarily as a result of the amount of component wrappers a given React component can accumulate. Right now I have some with `connect` (react-redux), `injectIntl` (react-intl) and `withStyles` (isomorphic-style-loader) all at once.

So if you have a component that is wrapped three times, and you want to get to the last wrapped instance, you need to do `this.refs.component.getWrappedInstance().getWrappedInstance().getWrappedInstance()`...

It would be nice for there to be a standard for how you might access wrapped instances where there are multiple levels at play. This concept proposes something like `this.refs.yourComponent.getWrappedInstance(3)` to do that. I also like the idea of having a means to go all the way down to the last component without necessarily having to specify the amount of layers to unwrap. Just an idea.

I'm posting this here as I think this library has the popularity to set a good standard with how this might be done, which others could follow.

Let me know thoughts :)
",horyd,2016-07-15 14:26:33
437,2016-07-15 14:26:33,"Hi, thanks for PR! I don’t think we’d want to enforce a convention like this here.

Really, the core issue is that React doesn’t allow forwarding refs.
There is an issue for this, so you can track it here: https://github.com/facebook/react/issues/4213.
",gaearon,2016-07-15 14:26:33
437,2016-07-15 14:31:42,"Ah I see, hadn't come across that before but good to see an ongoing conversation on the topic :) Thanks!
",horyd,2016-07-15 14:26:33
436,2016-07-15 02:36:27,"Currently, if you fail to pass a component to the function returned by `connect` it fails in a confusing way (usually `inst.render is not a function`) that can be hard to track down if you're new to Redux.

This PR adds a check, making sure a function is passed to `connect`, throwing a useful error if not.
",aweary,2016-08-14 15:20:31
436,2016-08-14 15:20:31,"Superseded by #416
",timdorr,2016-08-14 15:20:31
435,2016-07-14 18:24:14,"Suppose the following simple and common example:

<S_CODE_TOKEN>

So `<Foobar/>` needs `name`, `age` and `dispatch` whereas `age` and `dispatch` are provided via the `@connect` HOC. But when I render the component as one would exepect with

<S_CODE_TOKEN>

I get warnings from React, saying that `Connect(Foobar)` is missing the required props `age` and `dispatch`, even though `<Foobar/>` itself never get rendered without these props (so from `<Foobar/>`'s point of view everything is fine). To work around this I have two bad options:
1. Make `age` and `dispatch` non required or
2. Render `<Foobar/>` resp. `<Connect(Foobar)/>` with dummy values for `age` and `dispatch`.

The warning is strange by itself anyway, because looking at the code I see

<S_CODE_TOKEN>

And I also checked that the `.propTypes` of the returned HOC only contain the `store` props. Still I keep getting this warnings.

Btw, I am using the following versions:
- react 15.2.1
- react-redux 4.4.5

Thanks for your help.
",choffmeister,2016-07-14 18:34:52
435,2016-07-14 18:30:12,"At a first glance, isn't this just a result of using `connect` as a decorator in combination with a static class field?  It's almost like there is no ""plain"" version of the component, effectively, because it gets immediately run through `connect`.
",markerikson,2016-07-14 18:34:52
435,2016-07-14 18:33:14,"Yeah, as soon as I finished writing this issue, I noticed the root of the issue. The ES7 class properties are not applied to `<Foobar/>` and then `@connect` gets applied to that, but the other way around, again overriding the `propTypes` of the HOC...
",choffmeister,2016-07-14 18:34:52
435,2016-07-14 18:34:52,"So I just have to apply `@connect` afterwards. This might get better, when there is a non-legacy version of decorators for babel... 😢 

Will close this issue since it is not related to this project in any way.
",choffmeister,2016-07-14 18:34:52
435,2016-07-14 18:35:37,"It might be worth documenting this in the react-redux docs though.
",jimbolla,2016-07-14 18:34:52
435,2016-07-14 19:32:15,"FYI: There seems to be an ticket for the issue regarding these two babel plugins.

https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy/issues/17
",choffmeister,2016-07-14 18:34:52
434,2016-07-13 09:53:36,"Hello, would it be possible to make the store shape available for importing (or requiring, etc.)? Right now it is only possible through `react-redux/lib/storeShape` or `react-redux/src/storeShape`, but it would be so much nicer to be able to write:

<S_CODE_TOKEN>

`react-router` does something like this, i.e. `routerShape` and `locationShape` are exported at top level too additionally to `react-router/lib/PropTypes`.
",fatfisz,2016-08-14 15:30:18
434,2016-08-14 15:30:18,"If you want to access Provider's context directly, that's not really supported behavior at the moment. It's best to use connect, as it provides a number of performance improvements over vanilla access.
",timdorr,2016-08-14 15:30:18
434,2016-08-14 18:36:02,"No, that's not what I wanted to do. Why the assumption?

IIRC I had a top level component which needed the store to be passed so that it could render the `Provider` component with it. The linter was complaining about prop types, because in this situation the store was the provider's provider prop.

I honestly don't remember the details, but that's the gist of it. Now, wouldn't an easy access to the store shape be good in this situation?
",fatfisz,2016-08-14 15:30:18
434,2016-09-11 12:28:57,"@timdorr Could you please reply?
",fatfisz,2016-08-14 15:30:18
433,2016-07-12 13:49:05,"Having Typescript definitions in the repository itself saves users from having to download the definitions separately and changes to the main redux definitions can be more easily applied to the react-redux definitions.

I've taken the definitions from the DefinitelyTyped repository. The only change I made is the addition of the generic State type to the connect function so the State parameter of the mapStateToProps function can actually be typed instead of being of the 'any' type. 

The rest of the definitions seem to be correct.
",DaanDeMeyer,2016-09-16 20:55:53
433,2016-08-11 16:20:32,"Any chance we can get testing for these, like we do on Redux? https://github.com/reactjs/redux/blob/master/test/typescript.spec.js
",timdorr,2016-09-16 20:55:53
433,2016-09-01 20:12:23,"This typings provided doesn't fit to be bundled with package because the are global. You must convert it to be external module definitions (using import, export keywords, not using global namespace imports, etc)
",Guria,2016-09-16 20:55:53
433,2016-09-05 12:17:17,"`this.props.dispatch` is missing in `connect()` and `connect(mapStateToProps)` forms.
",bbenezech,2016-09-16 20:55:53
433,2016-09-06 09:19:38,"@timdorr Do the Typescript definitions have to take into account that the library can be used as an UMD module? Also, can I make use of the Typescript 2.0 features for the definitions?

@bbenezech I don't see what's missing. Could you explain more in depth?
",DaanDeMeyer,2016-09-16 20:55:53
433,2016-09-06 09:40:24,"@DaanDeMeyer Sorry, disregard.
I overlooked `connect<TOwnProps, TStateProps, TDispatchProps>`.
I can use TDispatchProps and inform my component that it has a dispatch prop passed from its HOC.

Really sorry. Still trying to wrap my head with TS
",bbenezech,2016-09-16 20:55:53
433,2016-09-16 20:55:53,"Since I'm not using react-redux anymore I'm not going to be able to implement testing or maintain definitions for the project so I'm closing the pull request.
",DaanDeMeyer,2016-09-16 20:55:53
433,2016-10-20 15:52:08,"@codeandcats suggested I fork and re-request these additions. Before I start, I wonder what are the tasks that need to be performed? I don't mind opening a PR but I'd rather not just copy the code without adding anything myself, unless we are content with the state of this PR before it was closed.  
@DaanDeMeyer raised some questions which I'd like to get answered before I begin.
- @timdorr Do the Typescript definitions have to take into account that the library can be used as an UMD module? Also, can I make use of the Typescript 2.0 features for the definitions?
- The rest of the definitions seem to be correct. Anything missing? Probably needs to be converted to external module though.
- Do we have any typescript files that can be used to test this with typescript-definition-tester?
",Zalastax,2016-09-16 20:55:53
433,2016-11-07 11:34:21,"@timdorr **_bump**_

Also, _imho_ it would be fine to target TypeScript 2 since it's backwards compatible with 1.x code so there's really no reason consumers shouldn't be using it now.
",codeandcats,2016-09-16 20:55:53
433,2016-11-07 13:14:02,"Since MS is pushing the whole @types namespacing on npm, I don't think we need to add them here. They exist on DT and that should be good enough. 
",timdorr,2016-09-16 20:55:53
433,2016-11-07 13:59:07,"@timdorr
Redux typings and flow typings are successfully maintained in-house, why not react-redux?
DT is a gigantic mess, noise there is overwhelming. It makes sense to have it maintained here, with PR merged by react-redux maintainers, unless you do want to reduce the load on the library's maintenance, which is very understandable.
",bbenezech,2016-09-16 20:55:53
433,2016-11-07 16:05:37,"It's more that our current set of maintainers don't use TS, so we don't have any ability to maintain those typings. If you want to see it here, I'm more than happy to accept a PR, but understand that we'll rely on the community to guide those typings. That's how we did the TS and Flow typings on Redux.

I can basically just read through comments and mash the appropriate button. I'm a typing dunce 😄 
",timdorr,2016-09-16 20:55:53
433,2016-11-07 16:25:25,"> Since MS is pushing the whole @types namespacing on npm, I don't think we need to add them here

It is not true. @types repos is a fallback for libs that doesn't maintain typings in house. It also introduces compatibility issues.
In house typings still prefered way, because lives near source code and shares the same version.
Of course there is a cost for it too:
- increased maintainance load
- it affects semver: breaking change in typings would require major bump in whole package

But again it is much more convinient for consumer to use lib with typings included:
- no additional deps to install and maintain
- typings always describe code that you use since it located at the same package
- it usually have higher quality than 3rd parties
",Guria,2016-09-16 20:55:53
433,2016-11-07 16:42:46,"I think the optimal situation is to have Flow/TS typings collocated with the code, but have at least 1 project maintainer committed to keeping them updated in step with code changes.
",jimbolla,2016-09-16 20:55:53
433,2016-11-07 22:02:35,"Ok, let's try. Go easy on me #538 
",bbenezech,2016-09-16 20:55:53
432,2016-07-11 13:50:31,"I have `FiltersContainer` component, where `mapStateToProps` function returns object with prop, which contains array:

<S_CODE_TOKEN>

This component is updating everytime state changes, although `filters` array wasn't changed.

As I understand `shallowEqual` function does not deeply comparing two objects and will return false this way, therefore `Filters` component is updating on every state change.

Why lib uses `shallow` comparing for `mapStateToProps` function result instead of `deepEqual` comparing? Or I'm missing something?

Thanks.
",1ven,2016-07-12 04:35:42
432,2016-07-11 17:54:09,"Figured out, the answer is in [redux docs](http://redux.js.org/docs/FAQ.html#why-is-my-component-re-rendering-too-often).
",1ven,2016-07-12 04:35:42
432,2016-07-11 17:55:04,"@1ven This is caused because of referential inequality. You always create new instance of `Array` therefore `shallowEqual` consider those two arrays different even the structure is same.

But the problem is deeper - you absolutely don't have to return whole filter structures from `mapStateToProps` as they seem to be constant. Instead, just have this config statically on module level. And from store, expose only `activeFilter` property. then you can have comparison like `activeFilter === 'SHOW_ACTIVE'` in render() method.
",Aldredcz,2016-07-12 04:35:42
431,2016-07-10 13:42:35,,retrorick,2016-07-10 13:53:03
430,2016-07-08 07:13:49,"I found a typo in variadic arguments example for `mapStateToProps`.  `args` is not used.
",rhysd,2016-07-08 14:59:30
430,2016-07-08 14:59:27,"Yeah, that seems reasonable.  Thanks!
",markerikson,2016-07-08 14:59:30
429,2016-07-06 10:39:25,"Fixes issue #428
",andydavies92,2016-08-14 15:20:40
429,2016-07-11 12:05:19,"I'm waiting for it
",arusakov,2016-08-14 15:20:40
429,2016-08-14 15:20:40,"Superseded by #416
",timdorr,2016-08-14 15:20:40
428,2016-07-06 10:38:45,"From the [docs](https://github.com/reactjs/react-redux/blob/master/docs/api.md#arguments):

> [`pure = true`] _(Boolean)_: If true, implements `shouldComponentUpdate` and shallowly compares the result of `mergeProps`, preventing unnecessary updates, assuming that the component is a “pure” component and does not rely on any input or state other than its props and the selected Redux store’s state. _Defaults to `true`_.

Given this, I would expect impure components to _always_ be re-rendered whenever the store changes, as it cannot assume that some variable it depends on outside its props or the store hasn't been mutated. However, this does not seem to be the case as [this fiddle](https://jsfiddle.net/andydavies92/ox3ktvjc/) demonstrates:

<S_CODE_TOKEN>

The render method for `MyComponent` is dependent on variable `impureDependency` outside both its props and the Redux store, making it an impure component, and a connected version of the component, `MyConnectedComponent`, is subsequently created on line 11. This variable has its value changed from `""Initial value""` to `""Updated value""` on line 20. A dummy action is dispatched to the store on line 21 (causing the store state to change as store reducers will _always_ return a new state), at which point we'd expect `MyConnectedComponent` to be re-rendered but the rendered text remains as `""Initial value""`.

This is due to `Connect.prototype.render()` failing to check if a component is pure before determining whether re-rendering the component can be skipped or not. The solution is to add this check so that impure components always get re-rendered.
",andydavies92,2016-08-14 15:16:17
428,2016-07-06 10:40:10,"Submitted pull request #429 to fix this issue
",andydavies92,2016-08-14 15:16:17
428,2016-07-06 10:45:51,"#416 probably already fixes this 
",jimbolla,2016-08-14 15:16:17
428,2016-07-06 11:02:41,"> #416 probably already fixes this

@jimbolla, ""probably"" is a bit wooly for my liking; please could you verify by running the new test I added in #429? Also, #416 seems more like a long-term project than a fix for the current implementation so I'd say this is still a worthwhile improvement in the short-term.
",andydavies92,2016-08-14 15:16:17
428,2016-07-06 11:37:01,"Probably = 99% sure. 416 should land as a beta very soon. Dan said he'd do it, so whenever it's top priority.  
",jimbolla,2016-08-14 15:16:17
428,2016-07-06 11:50:26,"Still makes sense to me to fix the current implementation in the short-term even if it ends up getting replaced in a month or so when the next major is released. Plus, the test introduced in #429 is a worthwhile addition to make sure #416 or any future work doesn't create a regression. I guess it's up to @gaearon as to whether #429 is worth merging or not...
",andydavies92,2016-08-14 15:16:17
428,2016-07-06 11:58:44,"Yeah the test sounds valuable. I'll try to pull it into my fork. I'm hoping the beta release happens sometime this week, but I can't say when it might make it to production
",jimbolla,2016-08-14 15:16:17
428,2016-07-06 23:35:07,"The root of the problem actually lies in `this.haveOwnPropsChanged` not being set correctly.

<S_CODE_TOKEN>

From [https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L215](https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L215)

In this scenario, we want to update the component using a dispatch to the store. This is a state change, hence `componentWillReceiveProps` is not called. This does not set the `haveOwnPropsChanged` field to `true` (which it should for an impure component), so in `render()` the optimised route is taken.

#429 fixes the current problem, but does not fix the root of it, which is that the impure component needs to update on store change (which is a state change), so `componentWillUpdate` is required together with `componentWillReceiveProps`. We can test this by using

`@connect(() => ({}), null, () => {invocationCount++; return {}}, { pure: false })`

and seeing that invocationCount does not increase with the current fix.

However, since `componentWillUpdate` is called after `shouldComponentUpdate` as opposed to `componentWillReceiveProps`, and that hot-loading overrides `componentWillUpdate` in the prototype, there might be a better alternative solution.

#416 should ultimately fix this as it uses `shouldComponentUpdate` to do all the checks.

**Edit**: Also worth to mention, is this the expected behaviour? The component's props from store or from parent has not changed, so even if it was impure should a re-render be called?
",gelguy,2016-08-14 15:16:17
428,2016-07-08 11:03:37,"> #416 should ultimately fix this as it uses shouldComponentUpdate to do all the checks.

Yes, I've tested #416 and it does fix this too.

> seeing that `invocationCount` does not increase with the current fix.

Since merging props is always shallow, the shallow equality checks are sufficient to control whether a merge needs to happen or not. It is just that for impure objects, a shallow equality check isn't sufficient to tell whether the wrapped component should re-render.

> is this the expected behaviour?

I'd say yes, impure components should always return true from `shouldComponentUpdate`, since the props from the parent and the props from the store may have changed in a way that requires an update, even if they still match with a shallow equality comparison.

The docs say that the test for pure components is against `mergedProps` rather than against either `ownProps` or the props from the store, so the fix in #429 to have impure components ignore `haveMergedPropsChanged` seems correct.
",DouglasLivingstone,2016-08-14 15:16:17
428,2016-07-08 18:21:01,"> Since merging props is always shallow, the shallow equality checks are sufficient to control whether a merge needs to happen or not

This is mostly true. One case I can think of is if `mergeProps` is not pure, which is what the `invocationCount` test checks.

> impure components should always return true from shouldComponentUpdate

This occurs currently. The bug lies in that `this.haveOwnPropsChanged` is not updated correctly as setting state does not trigger `componentWillReceiveProps`.

I apologise if I did not make my question clear, but the issue with #429 was that with any Redux store update, all impure components will re-render. Should this be the case? A wrapped component will update when the props passed to it by the parent changes, or if the Redux store updates. For pure components, a check is then done by merging the store state and props to see if re-rendering is needed. For impure components, if props have the parent have changed, then it should cause a re-render. If the store has changed, we have two scenarios. The impure component always updates if the store has changed, or it updates if the slice of store it is interested in (via `mapStateToProps`) changes. #429 assumes the first scenario, but I feel otherwise, since the component is then re-rendering on every update on the store.

There are ways to overcome the impure component not re-rendering, e.g. by calling the component's `setState` or `forceUpdate` from outside Redux. I am not too familiar with using Redux with impure components, so I think clarifying the expected behaviors will be useful in the future.
",gelguy,2016-08-14 15:16:17
428,2016-07-08 21:50:26,"Agreed, merging either of these patches would be a change in behaviour to re-render the component whenever the store updates, it is just by chance that we ran into this around the same time that #429 was proposed.

Currently we're using impure components while we migrate our existing Flux-like stores to Redux, since the logic for pure components can't see inside our non-Redux stores. I mistakenly thought that using the impure option would move the burden for implementing `shouldComponentUpdate` (or an element caching alternative) from the connection wrapper component to the wrapped component, and was surprised that it no-longer updated.

We ran into this while trying to consolidate the re-render after store update to only happen once both our Redux and non-Redux stores had updated, by only rendering via the impure component's subscription to the Redux store. When an action updates only one of our non-Redux stores, only the top level object in our Redux store changes. So another option for us would be to have our impure components subscribe to the entire Redux store state, then just ignore the new value.

Since there are so many workarounds, it is a question of what the default case should be rather than how to make it work for us.

There is some elegance is saying that the wrapper controls when to re-render pure components, while the wrapped component controls when to re-render if it is impure.
",DouglasLivingstone,2016-08-14 15:16:17
427,2016-07-06 09:24:01,"I am making a file manager app base on react-redux, and I find it is super in-convenient to use `input` in react-redux.

For example:

There is a `PathForm`, it need show path from two way
1. user click a file path from left tree view, `Explorer` get this path as `currentPath`, then pass to `PathForm`, and show `currentPath` in input
2. user directly type a path to the `PathForm`'s input,  `PathForm` call `handleSubmit`(`Explore`'s function) to change the `currentPath`

Additional 3: I want to keep `PathForm` as a stateless component

I can't figure out how to achieve above purpose in react-redux.
Because this input can be change at two place , can't achieve without connecting to store and  another state `inputValue`

After some effort , I solve them with this:

<S_CODE_TOKEN>

But I think it is not the most correct way,
It would be much better if I can control child elements of `PathForm`  without `document.querySelector`(to avoid the class conflict ).

There is a detail about this(Due to no one against above answer, I come here to ask if I am right)
http://stackoverflow.com/questions/38218629/easy-change-input-value-from-different-wayreact-redux/38220100#38220100
",eromoe,2016-07-06 15:59:47
427,2016-07-06 15:59:47,"This is a usage question, not a bug report or feature request.  Usage questions should be asked on Stack Overflow, which you've already done.

Also, the code you've shown doesn't even have anything to do with Redux or the React Redux `connect` function at all.

You might want to go read some of these articles on how to properly use forms in React: https://github.com/markerikson/react-redux-links/blob/master/react-redux-architecture.md#react-and-forms .  In particular, I think you want to read up on the ""controlled inputs"" pattern.  I also described this concept in a gist, over at https://gist.github.com/markerikson/d71cfc81687f11609d2559e8daee10cc.
",markerikson,2016-07-06 15:59:47
427,2016-07-07 00:56:15,"Thanks, that gist is really helpful !
",eromoe,2016-07-06 15:59:47
426,2016-07-04 20:59:16,"As a result of http://stackoverflow.com/q/38189783/6548463, the docs now state a little more clearly that the component will additionally re-evaluate `mapStateToProps` when props from the parent have shallowly changed.
",madbonkey,2016-07-10 17:04:51
426,2016-07-10 17:04:50,"Thanks!
",timdorr,2016-07-10 17:04:51
425,2016-07-04 15:39:09,"If component not pure (options {pure: false}), I think, that we don't need shallow compare states in updateStatePropsIfNeeded() and need always return true.
",arusakov,2016-07-10 17:06:24
425,2016-07-10 17:06:24,"Superceded by #429, which has an included test.
",timdorr,2016-07-10 17:06:24
424,2016-07-01 19:17:41,"I'll explain why I want to do this later. 
Here is the problem. I have a function that returns a promise like below:

<S_CODE_TOKEN>

As expected, I can invoke it like this just fine:

<S_CODE_TOKEN>

Or assign it to a variable and call it like this

<S_CODE_TOKEN>

These are all expected. However, once I put the function in redux state, then invoke it from there, it doesn't work anymore. Here is what I did (grossly simplified).

<S_CODE_TOKEN>

The error I got was `_promise2 is not defined`. Somehow the `Promise` object got lost whenever the function is put in redux state?

But I did find a workaround. If I change the function to

<S_CODE_TOKEN>

And call it with `resolve` and `reject` passed in as parameters, then I'm good.

<S_CODE_TOKEN>

I'm wondering why a function that returns promise doesn't work once it's put in redux store, but one without returning promise works?

Now onto why I want to do it this way. What I'm trying to achieve is to have a job queue that periodically dispatch some async actions, and depending on the result (resolve or reject), does something else (like retry, or send out notification). I want to dynamically add/remove jobs to and from the queue, therefore it's hard to have a reducer that can handle all possible actions. It feels like this is a reasonable way to approach it. I'm open to suggestions.
",realbugger,2016-07-01 21:11:27
424,2016-07-01 21:11:26,"This is a usage question. Please ask it on StackOverflow or Discord. We use the issue tracker to track bugs. Answers get lost here, and people ask the same questions again and again 😄 . Thanks!
",gaearon,2016-07-01 21:11:27
424,2016-07-01 21:12:48,"(Also note that we don’t recommend putting anything non-serializable into the state. Redux Saga or Redux Obseravble seems like better ways to do what you described.)
",gaearon,2016-07-01 21:11:27
424,2016-07-01 21:42:52,"Got it. Thanks @gaearon 
",realbugger,2016-07-01 21:11:27
423,2016-07-01 15:10:37,"I've got a list of input value that i need to populate with the info returned from dispatch function...
I can't set the state inside componentWillMount because I need to wait that the reducer return info to the state. 

Inside componentWillMount method dispatch the call to get data

<S_CODE_TOKEN>

Inside componentWillReceiveProps method I set the local state using the props returned as data
I put the setState() code inside this method to be sure that was executed after connect() has merged the data inside local props. (Any better place to do it?)

<S_CODE_TOKEN>

Then I render the fields giving them as value the state

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Now the questions are two:
1.Is this a good practice to get the result that I need?
2. I'm using react-router, I've tried to change twice the route without reloading the entire page and I don't know why componentWillReceiveProps in this component it's called only the first time. (From what i know componentWillReceiveProps didn't check if the props are the same)
",powergij,2016-07-01 23:19:01
423,2016-07-01 23:19:01,"This is a usage question, and should be asked on Stack Overflow instead.  The issue tracker is used for bugs - questions and discussions in here tend to get lost and repeated.
",markerikson,2016-07-01 23:19:01
422,2016-06-29 06:37:38,"The `connect()` is being create WrappedComponent like

<S_CODE_TOKEN>

I'm work on some project porting application to project using react, redux from traditional web project. Sometime old css codes has some selector like `.parent > .child` doesn't works because unintended created WrappedComponent.

Also I'm worrying about that in case of the massive DOM tree(like many items of list), `connect()` add one or more empty div(WrappedComponent) per item, then it make DOM tree so heavy that performance might be decreased.

Am I worrying unnecessarily? or can I use `connect()` without WrappedComponent?
",b6pzeusbc54tvhw5jgpyw8pwz2x6gs,2016-06-29 15:33:17
422,2016-06-29 15:33:17,"The wrapper component generated by `connect()` doesn't generate any DOM elements.  This should not be a concern.  

Also, there is not a 1:1 correspondence between React component instances and DOM elements anyway.  A React component could generate many DOM elements, one, or none.  Try using the React DevTools to see what components are actually generating those elements.  You could also start adding extra classes to the elements your components are generating to help see how the structure corresponds.
",markerikson,2016-06-29 15:33:17
422,2016-06-30 09:26:02,"Thanks~ I will check!
",b6pzeusbc54tvhw5jgpyw8pwz2x6gs,2016-06-29 15:33:17
421,2016-06-28 21:00:15,,ericraio,2016-06-29 00:25:23
421,2016-06-28 21:22:39,"I don't _think_ that's necessary.    Are you seeing a specific issue of some kind with the current version spec?
",markerikson,2016-06-29 00:25:23
421,2016-06-29 00:25:23,"Unfortunately for non-0-minor versions it would be required. But we won't do this. 15.2.0 is expected to ship really soon so it is just not worth it. 
",gaearon,2016-06-29 00:25:23
420,2016-06-27 12:00:14,"I hope it's true this time.
",erykpiast,2016-07-01 11:47:18
420,2016-07-01 11:47:24,"Thanks!
",gaearon,2016-07-01 11:47:18
419,2016-06-26 09:29:42,"Hello. 

I'm working on a piece of code called ""reduxify"" which I hope to publish as an NPM module, that helps take away some of the boilerplate of using react-redux on large projects.  

The problem that I'm running into is that I can't seem to find a way to map getState() to props.  This is somewhat important for the design pattern I'm working with. 

Specifically, in order to keep my ""utilities"" unit-testable in isolation - that is, without having to import the store, I was using dependency injection. That is, if I had a file called ./utilities/api.js, it would be written something like this: 

<S_CODE_TOKEN>

This way, I can mock both dispatch and getState.  As for the use in dev/production, it would be something like this:

<S_CODE_TOKEN>

I'll be writing v. 1 of Reduxify without this functionality, but I'm thinking there's gotta be a way to do this without exporting getState() from the store and importing it into the component.  

Your thoughts? 
",brianboyko,2016-07-10 17:23:43
419,2016-06-26 16:35:41,"Hi, Brian.  I know we talked about something like this a while back.  Is there any reason you aren't just using thunks?  Because thunks are middleware-based, the thunk functions receive `getState` and `dispatch` automatically.  Also, with the newer redux-thunk v2.1.0, you can automatically inject additional arguments into your thunk functions, such as specific AJAX API wrappers or something.
",markerikson,2016-07-10 17:23:43
419,2016-06-26 16:48:46,"So glancing at https://github.com/brianboyko/reduxify , a couple thoughts:
- Semantically, it's not ""reducers"" that you're picking - it's the _keys in your state_ (which may or may not have specific reducer functions assigned to handle updating them)
- Everyone's apps and setups will vary, but I would think that much of the time components would need much more fine-grained data than an entire slice of state
- I know that I'm the one who wrote that `prepareActions` utility in the first place and showed it to you, but fwiw, I'm starting to re-think my approach on including bound actions as a prop named ""actions"", because it's starting to cause the plain version of my components to sorta-kinda ""know"" that their props are coming from Redux.  Still debating the pros and cons.
",markerikson,2016-07-10 17:23:43
419,2016-06-26 17:43:22,"While thunks are very useful for asynchronous actions, they don't seem to me to be the right tool for this type of usage.  Not every ""utility"" function that I would write would necessarily be asynchronous, 

Truth be told, I actually think asynchronous actions can cause a big problem if you're trying to use Redux to replay the state the user experienced it in.  That is: if actions can be asynchronous, depending on the variable delay, the actions might be dispatched _out of order_, which can lead to debugging problems.  (""Hey, why does it work for me, here in London, but not for my partner in Taipei?"") 
",brianboyko,2016-07-10 17:23:43
419,2016-06-26 17:54:03,"Note that the since the DevTools need to be placed last in the enhancer sequence, right before the real store, they only replay actions that actually reached the reducers.  So, the actual _changes to state_ would be the part that gets replayed, not stuff that got intercepted by middleware and redirected.

Also, thunks can totally serve for both true async behavior _and_ more complex synchronous logic as well.  I've got several examples of thunk usage over at https://gist.github.com/markerikson/ea4d0a6ce56ee479fe8b356e099f857e, and note that three of the four are just synchronous code, not async.  So yes, this is _exactly_ one of the use cases that thunks were intended for.
",markerikson,2016-07-10 17:23:43
419,2016-06-26 19:25:22,"Ah, I don't have access to the dev tools where I work, so building a custom solution was necessary. 
",brianboyko,2016-07-10 17:23:43
419,2016-06-26 22:58:02,"Gotcha.  Out of curiosity: I know that you're working in a fairly restricted environment, but is there anything preventing you from downloading stuff like the Redux DevTools package ""manually"" and including it in your project?
",markerikson,2016-07-10 17:23:43
419,2016-06-27 01:26:27,"Only that I've tried it, and it doesn't work for whatever reason. I suspect
it is because Redux Dev Tools attempts to recalculate the state from
scratch by running through all the actions, every time you move backwards
in the timeline, which is problematic for an application that can have up
to 3000 actions.
",brianboyko,2016-07-10 17:23:43
418,2016-06-25 09:55:24,"Inside a container, add mapStateToProps:

<S_CODE_TOKEN>

The error message is showed in console.log is

<S_CODE_TOKEN>

That should be something like: haha is undefined
",vinhlh,2016-06-25 15:47:50
418,2016-06-25 15:47:50,"That error message is from React, not React Redux.  Also, while it could maybe be improved a bit, it _is_ straightforward: your JSX is not correctly written, and one of the elements you are trying to render is not a valid variable.  Remember that rendering `<SomeComponent />` gets turned into `React.createElement(SomeComponent)`, meaning that the variable `SomeComponent` must exist at that point.  You are likely not correctly importing one of your components.

Also, your `mapState` function is not correct - you're not actually returning anything from it, as the use of curly braces with the arrow function means there is no implicit `return statement`, and you don't explicitly return anything.

But, ultimately, this is not anything to do with React Redux at all.
",markerikson,2016-06-25 15:47:50
418,2016-06-26 18:29:09,"Most likely you forgot to export the component from the file, so you get `undefined` when importing it.
`mapStateToProps` probably doesn’t run at all for this reason.
",gaearon,2016-06-25 15:47:50
418,2016-10-20 14:17:31,"Another cause might be that you're using `module.exports = { containerComponent }`  which

> Creates an empty object for the module that is available immediately for reference by other modules. [from the docs](http://requirejs.org/docs/api.html)

Use `export { containerComponent }` instead.

The error message i got is ""Element Type is invalid: expected string or a class/function but got undefined. Check the render method of `Component`
",haikyuu,2016-06-25 15:47:50
417,2016-06-24 18:54:18,,erykpiast,2016-06-27 02:16:17
417,2016-06-27 02:16:14,"Seems reasonably useful.  Thanks!
",markerikson,2016-06-27 02:16:17
417,2016-06-27 11:23:26,"Would you mind please making another PR that describes actual behavior? I'd appreciate if you could test the examples first to make sure they work as described. 
",gaearon,2016-06-27 02:16:17
417,2016-06-27 11:46:37,"Sure, I didn't know that o_O
",erykpiast,2016-06-27 02:16:17
417,2016-06-27 15:49:39,"Whoops, sorry - should have double-checked the behavior myself before merging.
",markerikson,2016-06-27 02:16:17
416,2016-06-24 03:53:41,"# Update: Released as alpha!

[See below](https://github.com/reactjs/react-redux/pull/416#issuecomment-239678590). You can now install this as `react-redux@next`:

<S_CODE_TOKEN>

Please test it out!
## TL;DR

Rewrote `connect`, same basic API plus advanced options/API, all tests pass, roughly 8x faster, more modular/extensible design
# Overview

I rewrote `connect` into modular pieces because I wanted to be able to extend with custom behavior in my own projects. Now connect is a facade around `connectAdvanced`, by passing it a compatible `selectorFactory` function.

I also was able to greatly improve performance by changing the store subscriptions to execute top-down to work with React's natural flow of updates; component instances lower in the tree always get updated after those above them, avoiding unnecessary re-renders.
# Design/Architecture

I split the original `connect` into many functions+files to compartmentalize concepts for better readability and extensibility. The important pieces:
- components/
  - `connectAdvanced.js`: the HOC that connects to the store and determines when to re-render
  - `Provider.js`: (hasn't changed)
- selectors/
  - `connect.js`: composes the other functions into a fully-compatible API, by creating a selectorFactory and options object to pass to `connectAdvanced`.
    that performs memoiztion and detects if the first run returns another function, indicating a factory
  - `mapDispatchToProps.js`: used to create a selector factory from the `mapDispatchToProps` parameter, to be passed to `selectorFactory.js` as `initMapDispatchToProps`. Detects whether `mapDispatchToProps` is missing, an object, or a function
  - `mapStateToProps.js`: used to create a selector factory from the `mapStateToProps` parameter, to be passed to `selectorFactory.js` as `initMapStateToProps`. Detects whether `mapStateToProps` is missing or a function
  - `mergeProps.js`: used to create a selector factory from the `mergeProps` parameter, to be passed to `selectorFactory.js` as `initMergeProps`. Detects whether `mergeProps` is missing or a function.
- `selectorFactory.js`: given `dispatch`, `pure`, `initMapStateToProps`, `initMapDispatchToProps`, and `initMergeProps`, creates a `connectAdvanced`-compatible selector
- `wrapMapToProps.js`: helper functions for wrapping values of `mapStateToProps` and `mapDispatchToProps` in compatible selector factories
  - 
- utils/
  - `Subscription.js`: encapsulates the hierachial subscription concept. used by `connectAdvanced.js` to pass a parent's store Subscription to its children via context
  - `verifyPlainObject.js`: used to show a warning if `mapStateToProps`, `mapDispatchToProps`, or `mergeProps` returns something other than a plain object
## file graph

![graph](https://cloud.githubusercontent.com/assets/1851364/16901604/b1426f0c-4c16-11e6-8895-5234885f48b0.png)

<S_CODE_TOKEN>

The modular structure of all the functions in `connect/` should allow greater reuse for anyone that wants to create their own `connect` variant. For example, one could create a variant that handles when `mapStateToProps` is an object by using reselect's createStructuredSelector:
### customConnect.js:

<S_CODE_TOKEN>
### ExampleComponent.js

<S_CODE_TOKEN>

And for scenarios where connect's three-function API is too constrictive, one can directly call, or build a wrapper around, `connectAdvanced` where they have full control over turning `state` + `props` + `dispatch` into a props object.
# Performance

I'm using a [modified version of react-redux-perf](https://github.com/jimbolla/react-redux-perf) to performance test+profile the changes. It's configured to try to fire up to 200 actions per second (but becomes CPU bound), with 301 connected components. There are 2 scenarios being tested:
- NB: a parent component with 300 child components, with no other React components between them.
- WB: the same setup as NB but there's a ""Blocker"" React component between the parent and children that always returns false for `shouldComponentUpdate`.

I measured the milliseconds needed to render a frame using the [stats.js](https://github.com/mrdoob/stats.js/) used by react-redux-perf:

| MS: avg (min-max) | current NB | rewrite NB | current WB | rewrite WB |
| --- | --- | --- | --- | --- |
| Chrome | 170 (159-223) | 20 (17-55) | 170 (167-231) | 17 (15-59) |
| Firefox | 370 (331-567) | 20 (16-51) | 430 (371-606) | 19 (15-60) |
| IE11 | 270 (127-301) | 40 (36-128) | 300 (129-323) | 33 (30-124) |
| Edge | 240 (220-371) | 37 (32-102) | 260 (97-318) | 28 (24-100) |

On the conservitive end, the rewrite is about 8x faster under these circumstances, with Firefox even doubling that improvement. Much of the perf gains are attributed to avoiding calls to `setState()` after a store update unless a re-render is necessary.

In order to make that work with nested connected components, store subscriptions were changed from ""sideways"" to top-down; parent components always update before their child components. Connected components detected whether they are nested by looking for an object of type `Subscription` in the React `context` with the key `storeSubscription`. This allows `Subscription` objects build into a composite pattern.

After that I've used Chrome and Firefox's profilers to watch for functions that could be optimized. At this point, the most expensive method is `shallowEqual`, accounting for 4% and 1.5% CPU in Chrome and Firefox, respectively. 
# connectAdvanced(selectorFactory, options) API

In addition to the changed related to performance, the other key change is an additional API for `connectAdvanced()`. `connectAdvanced` is now the base for `connect` but is less opinionated about how to combine `state`, `props`, and `dispatch`. It makes no assumptions about defaults or intermediate memoization of results, and leaves those concerns up to the caller. It does memoize the inbound and outbound props objects. A full signature for `connectAdvanced` with its `selectorFactory` would look like:

<S_CODE_TOKEN>

A simple usage may look like:

<S_CODE_TOKEN>

An example using `reselect` to create a bound actionCreator with a prop partially bound:

<S_CODE_TOKEN>

An example doing custom memoization with actionCreator with a prop partially bound:

<S_CODE_TOKEN>

Note these are meant as examples and not necessarily ""best practices.""
# Pros/cons

I understand there is great risk to accepting such drastic changes, that would have to be justified with significant benefits. I'll reiterate the two main benefits I believe these changes offer:
1. Performance: There's potentially huge perf gains in situations where the number of connected components is high, stemming from conceptual changes to subscriptions so they go with the natural flow of events in React vs across them, as well as method profiling+optimizing using Chrome/FF.
2. Extensibility/Maintainability: By splitting the responibilities of connect into many smaller functions, it should be easier both for react-redux contributors to work with the codebase and end users to extend its functionality though the additional APIs. If users can add their desired features in their own projects, that will reduce the number of feature requests to the core project.

Despite passing all the automated tests as well as week of manual testing, there is risk of impacting users dependent on implicit behavior, or that performance is worse in some unexpected circumstances. To minimize risk of impacting end users and downstream library authors, I think it would be wise to pull these changes into a ""next"" branch and first release an alpha package. This would give early adopters a chance to test it and provide feedback
# Thanks

I'd like to thank the other github users who have so far offered feedback on these changes in #407, especially @markerikson who has gone above and beyond.
",jimbolla,2016-08-14 15:08:08
416,2016-06-24 05:59:57,"I find this change very interesting. I would imagine that before it (if) it is merged that your new selectors as well as the connectAdvanced implementation should have tests independent of the unit tests provided by the base connect api. I've already gone through everything once but I honestly find it hard to grasp the interplay of the various selector factories and selector helpers that work to implement the connect api. I'm hoping a second pass and a few more days may make this a little easier on the noggin. either way, this is very impressive.
",gnoff,2016-08-14 15:08:08
416,2016-06-24 11:47:10,"@gnoff. I can probably refactor the factories/selectors relationship to be a little clearer. I may have made it too abstract for the sake of hypothetical reuse. Keep an eye out for an update.

As for tests, right now everything is indeed being tested indirectly through the original tests. It would be valuable to write tests directly against some of the lower level parts but I wasn't ready to do that until I get some kind of feedback on the likelihood of these changes being accepted. If the project maintainers say they'll accept the PR if I write some tests, then I'll def write the tests.
",jimbolla,2016-08-14 15:08:08
416,2016-06-24 17:40:49,"Very interesting. I'm not opposed to merging something as radical if you can show that it doesn't break existing apps. It would be worth releasing this as an alpha, gather feedback from a few big Redux users, and then make a decision. 

Before we do this I would like to ask you to remove any new APIs (functions, methods or props). We don't want people to start depending on them in case this approach doesn't work out. We can always add new things later but let's ensure this doesn't have compatibility gaps first. 
",gaearon,2016-08-14 15:08:08
416,2016-06-24 18:51:44,"Can I ask you to manually test Redux examples in the repo as well as some popular apps?
@markerikson might suggest a few.
",gaearon,2016-08-14 15:08:08
416,2016-06-24 18:56:13,"@gaearon I removed connectAdvanced from index.js and filtered out any extra options props to connect(). Does that adequately hide the new functionality, or do we have to worry about users importing from `react-redux/lib/something`? I'll test the repo's examples and any recommended projects this weekend.
",jimbolla,2016-08-14 15:08:08
416,2016-06-24 22:43:21,"I've taken a quick look at this and I'll echo what others have said—it is very interesting, especially the performance improvements around the subscription callbacks.

Hopefully I'll have time to try it out some more and do some tests over the weekend, but I did notice that it seems like `utils/wrapActionCreators.js` can be removed as it is not used anymore?
",ellbee,2016-08-14 15:08:08
416,2016-06-25 00:12:59,"@jimbolla : perhaps some of the repos listed at https://github.com/markerikson/redux-ecosystem-links/blob/master/apps-and-examples.md might be suitable for experimentation?
",markerikson,2016-08-14 15:08:08
416,2016-06-25 17:43:54,"@gaearon I've run all the examples in redux/examples against the rewrite and didn't find any problems. Steps were:
1. npm run build:examples
2. npm: run test:examples
   3 overwrite node_modules/react-redux/lib with rewrite in each example
3. repeat 1 & 2. all tests still passed
4. run each example manually to see if there was any unexpected behavior. I did not see any

Next I am going to look at @markerikson 's list as well as reach out to the folks on reactiflux chat for repos to test.
",jimbolla,2016-08-14 15:08:08
416,2016-06-25 20:51:00,"I went down [this list](https://github.com/markerikson/redux-ecosystem-links/blob/master/apps-and-examples.md), cloned the ones that had tests (looked for a test command in package.json), and tried to install and run each. Some failed for various reasons (needed python or mongodb, for examples) but for those that would successfully run their tests, I was able to supplant their react-redux node_module with my own build and successfully re-run tests.

I also did this for redux-form, and it's almost-400 tests still passed. I attempted react-redux-form but it dies inside something react native related before I even got to my version.
",jimbolla,2016-08-14 15:08:08
416,2016-06-26 18:27:50,"Can you also try some React Native examples just in case?
",gaearon,2016-08-14 15:08:08
416,2016-06-26 22:57:37,"@gaearon I haven't been able to get anything React Native running on my machine. Once I got past errors related to installing python, now it's complaining about missing c++ things.
",jimbolla,2016-08-14 15:08:08
416,2016-07-01 23:06:43,"If no one else is able to test this with react native, next week I'll set up a VM and attempt to get RN in that for testing.
",jimbolla,2016-08-14 15:08:08
416,2016-07-02 21:35:48,"I did a review pass through the new codebase, trying to get a feel for what's going on.  Jim was hanging around in Reactiflux, so I asked him several questions about behavior in the process.  The one vague hypothetical concern I saw would be if somehow a child unsubscription happened during `Subscription.notifyNestedSubs`, causing a callback to be removed shortly before the loop tries to call it.  Should be easily fixable with an object copy, similar to how Redux handles its own notification process.

Code quality looks very good.  Functions are generally short and readable.  The helper functions don't generally have comments, but are clear enough that that's not an issue.  The higher-level logic in `connectAdvanced()` has considerably more comments, especially around the arguments.  Very well-written overall.

I built the branch and swapped out the `react-redux` folder in my own app's `node_modules`, rebuilt my dependencies bundle with Webpack's DllPlugin, and loaded up my app.  Didn't do an exhaustive test or any specific perf benchmarks, but did run through several chunks of functionality.  Everything looked just fine.

My only concern at this point is trying to follow how all of the various levels of selectors fit together.  Even with the diagram in this PR, things are a bit hazy.  The `match` approach used for handling the various possible argument forms for `mapState` and `mapDispatch` also took me a couple minutes to grasp, although the individual case handling functions themselves are very nice and encapsulated.  Not immediately sure what would be needed to make the selector connections and interplay more understandable.

Overall, the PR is looking very solid.  I am generally :+1: on the PR at this point.  @gaearon , any thoughts?  Anyone else have a chance to play around with this?
",markerikson,2016-08-14 15:08:08
416,2016-07-02 22:02:10,"Thanks for taking a look.

I added a guard to the notification loop in case there's a case where a component does something that causes its siblings to unsubscribe during the loop. I'm not sure how it'd be possible unless the component was coded to have side effects in render() such as router.push() or something, but since it's only one extra line of code to check, it's worth doing.

I'm going to attempt a comment in connect.js to explain the interplay of the selectors. It's not super obvious because there's some intentional indirection to allow for easier injection of new functionality.
",jimbolla,2016-08-14 15:08:08
416,2016-07-03 01:38:03,"That new big comment definitely helps, thanks.  Could we maybe get a couple comments clarifying how the `match` function works?  I see what it's doing now, but it wasn't immediately obvious at first.  Also, any particular reason why match is iterating backwards?  Could both the iteration and the export ordering of the selectors be flipped?

Actually, for that matter: isn't the behavior of `match` roughly the same as `Array.find()` (especially if you flip the ordering to count forward)?
",markerikson,2016-08-14 15:08:08
416,2016-07-03 01:44:12,"Talked with Mark on Reactiflux today after running across this and pulled it into our company project. All our tests pass and I've run through multiple workflows with the app and everything works fine. 

Just to note, our application runs with the following packages. I'll only list the ones that are relevant here:

`
    ""react"": ""15.1.0"",
    ""react-redux"": ""4.4.5"",
    ""redux"": ""3.5.2"",
    ""redux-saga"": ""0.10.5"",
    ""reselect"": ""2.5.1"",
`

We also make use of a few factory functions in some of our connect calls as we are controlling how often updates are sent to the connected component.

The chrome extension dev tool also handles this change completely fine.

Unfortunately I cannot contribute to the React-Native cases yet since we havn't gotten a chance to dig into it yet.

Edit:  @jimbolla If you can tell me where in the code to measure performance, I have a load test suite setup for my application. I can put it through some heavy strain and post the results.
",Sinistralis,2016-08-14 15:08:08
416,2016-07-03 09:37:05,"I also ran this with our company project with no observable problems and all tests passing.

I'm using `""react"": ""15.2.0"", ""react-redux"": ""4.4.5"", ""redux"": ""3.5.2"", ""reselect"": ""2.5.1""`.
",ellbee,2016-08-14 15:08:08
416,2016-07-03 16:55:16,"@ellbee : just to confirm, you did use Jim's branch of `react-redux`?
",markerikson,2016-08-14 15:08:08
416,2016-07-03 17:09:11,"@markerikson Yep, used the branch. `""react-redux"": ""4.4.5""` is the version that we are running in production. Sorry if it wasn't clear!
",ellbee,2016-08-14 15:08:08
416,2016-07-04 15:10:38,"@markerikson I'll add comments to match... will explain why it goes backwards.

@Sinistralis I describe how I did perf testing under the Performance header at the top of this page. Basically just recording before/after values for stats.js. Also, just using FF/Chrome's profiler to see methods with longest times.
",jimbolla,2016-08-14 15:08:08
416,2016-07-04 15:28:31,"I’m generally 👍 on this as long as we release it as a beta first. I’m not following the thread very carefully so if you feel it’s ready please ping me on Twitter to remind me to cut the release. Thanks for working on this!
",gaearon,2016-08-14 15:08:08
416,2016-07-04 15:41:26,"I'd say it's probably about ready for a beta.  It's passing the API tests, it's been tried with a bunch of applications with no issues, and the code looks pretty reasonable at this point.  Anyone else have thoughts?
",markerikson,2016-08-14 15:08:08
416,2016-07-05 16:12:50,"@jimbolla , @reactjs/redux : if no one else has any comments in the next few hours, I'll do as Dan asked and ping him to set up a beta.
",markerikson,2016-08-14 15:08:08
416,2016-07-05 16:21:06,"I think a beta is a great idea.
",gnoff,2016-08-14 15:08:08
416,2016-07-05 16:23:47,"BTW, because the diff isn't super-helpful, just browse from here: https://github.com/jimbolla/react-redux/tree/connect-rewrite/src/components

Maybe put this on a dist-tag `react-redux@rewrite` or something not in the semver vernacular, just in case this doesn't work out for some reason. I'm confident it will be fine, but I would hold off making plans that this is the New Way™ until after we've got some feedback from the broader community.
",timdorr,2016-08-14 15:08:08
416,2016-07-05 18:14:35,"I think tagging it with `@rewrite` or similar is a good idea. I don't intend to make any other changes right now besides add more comments unless anyone has any feedback on things that could be changed.
",jimbolla,2016-08-14 15:08:08
416,2016-07-05 18:23:20,"@timdorr @jimbolla @markerikson depends on how many people we want using this in the wild and how soon. If we tag it as `rewrite` then we reduce the number of people who are likely to come across it and exercise it. We would still need a `alpha` or `beta` phase then to get critical mass to move to general release.

if we use more traditional prerelease vernacular then we are likely to pick up a much larger proportion of experimenters and early adopters.

since the public API does not change we can silently bail out of the rewrite with no community fallout. I'm more concerned about when we expose `connectAdvanced` api as public. This is where the extra very obvious opt-in to non-standard release makes the most sense to me.

That said, being conservative isn't generally a bad thing, I can see the argument to protect this more deliberately from accidental opt-in.
",gnoff,2016-08-14 15:08:08
416,2016-07-05 18:31:36,"There are only two hard things in computer science: cache invalidation and naming things. (There are only two hard problems in distributed systems: 2. Exactly-once delivery 1. Guaranteed order of messages 2. Exactly-once delivery)

Let's just call it `react-redux@next` then. No implication of the contents being good or bad, just something we might be trying next. I think most people are used to `*@next` dist-tags anyways.
",timdorr,2016-08-14 15:08:08
416,2016-07-05 18:38:27,"@next is good :)
On Tue, Jul 5, 2016 at 11:31 AM Tim Dorr notifications@github.com wrote:

> There are only two hard things in computer science: cache invalidation and
> naming things. (There are only two hard problems in distributed systems: 2.
> Exactly-once delivery 1. Guaranteed order of messages 2. Exactly-once
> delivery)
> 
> Let's just call it react-redux@next then. No implication of the contents
> being good or bad, just something we might be trying next. I think most
> people are used to *@next dist-tags anyways.
> 
> —
> You are receiving this because you were mentioned.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/reactjs/react-redux/pull/416#issuecomment-230562851,
> or mute the thread
> https://github.com/notifications/unsubscribe/ACly0fWx1fNbbexYE7PMqmGxkfComxa8ks5qSqMMgaJpZM4I9cav
> .
",gnoff,2016-08-14 15:08:08
416,2016-07-06 00:08:59,"Cool.  I'll go ahead and ping Dan, then.
",markerikson,2016-08-14 15:08:08
416,2016-07-08 15:24:43,"Hmm. I just tried this, and it doesn’t seem as fast at least in the particular scenario I’m testing.
Here’s what I tried:
1. Clone https://github.com/mweststrate/redux-todomvc
2. `npm run build`
3. Open Chrome Timeline and press Record
4. Toggle the first todo four times
5. Calculate the average scripting time by click

<img width=""746"" alt=""screen shot 2016-07-08 at 16 23 25"" src=""https://cloud.githubusercontent.com/assets/810438/16692363/6029e63a-4528-11e6-8636-eb3811ece5a5.png"">

I consistently get about 45ms average with the current version, and about 60ms after this rewrite.
Would you like to look into this?

I understand it’s an artificial benchmark but still.
",gaearon,2016-08-14 15:08:08
416,2016-07-08 20:48:21,"Ah. It took me a while to figure it out, but it's related to `TodoItem`'s `makeMapStateToProps`:

<S_CODE_TOKEN>

It grabs the only prop it needs on first call, so its inner function doesn't depend on props. This allows the current version to skip out on props changes. If I change that `mapStateToProps` to grab `id` as a second parameter, the current version doubles in time.

My version currently always does ownProps memoization even when it's not needed, like in this case. I need to change it so that it knows whether it needs to. Working on that now; hopefully I'll have that updated tonight.
",jimbolla,2016-08-14 15:08:08
416,2016-07-10 14:03:03,"Still working on this but I just pushed some changes for refactorings/optimizations. Will get back to it tonight after some family time.
",jimbolla,2016-08-14 15:08:08
416,2016-07-15 14:27:31,"Ping me again when it’s ready? Thanks!
",gaearon,2016-08-14 15:08:08
416,2016-07-16 18:46:56,"I'm just about done with my refactorings/optimizations and will recap soon, but I also wanted to go through the open issues/PRs to investigate if/how they relate to this PR:
- #269 I'll have to look closer at the one to see, because it's fairly involved, but I think it's at least partially related to some extra calls to `setState` in the current impl that are avoided my mine. Not 100% sure.
- #292/#293 This would be an alternate solution to #292. Instead of relying on batchedUpdates, it forces the notification order of updates to be top down. I added its passing test to this PR.
- #322 Unsure/unconfirmed. There's a test that covers actions dispatched in `componentWillMount`, so I'm not sure why it wouldn't detect those that happen in `componentDidMount`. 
- #323 Can be added to `mapStateToProps.js` as another factory, or can be added in userland with a wrapper around `connect` that passes the implementation of that factory in the `mapStateToPropsFactories` options arg. I can help with the code migration if we want to move forward with both this PR and #323.
- #345 Done.
- #368/#373 This would be an alternate solution to #368, similar to my comments on #292/#293
- #395 Done, but made it a function. Developer can override getDisplayName (defaults to `name =>``Connect(${name})`` `). Added its passing test to this PR.
- #398 Pretty sure this is covered, but needs a test to confirm.
- #428/#429 Done. Added passing test from this PR.
- #436 Done. Added its code to connectAdvanced and added its passing test to this PR.
",jimbolla,2016-08-14 15:08:08
416,2016-07-16 21:14:06,"I went through a round of refactorings/optimizations based on the results @gaearon found in redux-todomvc.  The scenario is that we have a list of 10,000 todo items components, each of which is connected. The speed being measured is when a todo is marked completed. To measure the results consistently, I set up a timer to check the first 10 items in the list like this:

<S_CODE_TOKEN>

This gave me enough time to let the page load and start Chrome's profiler. (Also profiled in Firefox but didn't bother writing down timings, but the results were consistent.) The `connect()` call of importance is the one for TodoItem. Note that this connect uses the factory style to grab the `id` from `initialProps` so that its selector doesn't have to depend on props :

### version 1

<S_CODE_TOKEN>

The second test I profiled was to change the `mapStateToProps` to the following. Note that this version grabs `id` from props in the final selector:

### version 2

<S_CODE_TOKEN>

For the third test, I removed the extra factory wrapper that's no longer needed from version 2:

### version 3

<S_CODE_TOKEN>

Finally I wrote a version that used `connectAdvanced` directly, which handles its own value memoization:

### connectAdvanced

<S_CODE_TOKEN>

### results

Aveage time in ms per `dispatch(completeTodo(...))` for 10 samples:

| test | current | rewrite |
| --- | --- | --- |
| version 1 | 28.6 | 36.9 |
| version 2 | 223.2 | 35.8 |
| version 3 | 215.4 | 32.4 |
| advanced | N/A | 24.3 |

So where I ended up is that for the original (version 1) `makeMapStateToProps`, the rewrite performs slightly slower, but performs significantly faster for a more ""typical"" selector (version 3). I think this is related to the added code to solve #292, #368, and #398. But the `connectAdvanced` version can eek out a little bit more speed (mostly by avoiding some calls to `shallowEqual`) by handling its own memoization.
",jimbolla,2016-08-14 15:08:08
416,2016-07-16 21:25:41,"At this point, I think I'm done optimizing+refactoring, pending any feedback. I can go update the original PR description to align to the latest code changes, if anyone would find that helpful. Beyond that, I'm ready for this to be tested/reviewed by more people.

A couple other notes:
- `Subscription` is not dependent on React in any way. It might be useful to move this into redux in time. Its code is based on the code for `createStore`.
- Most of the tests for `connect` can probably be split to either test `connectAdvanced` or connect's functions directly, now that connect simply joins those together. The code for connect() currently looks like:

<S_CODE_TOKEN>
",jimbolla,2016-08-14 15:08:08
416,2016-07-22 21:47:38,"It's with no doubt an awesome work, but, with your last tests in  mind are you saying that the whole point of this rewrite is to gain about 4ms (version 1 without rewrite VS version advanced) when rendering a very large set of connected component ? No offence here, juste to be sure i'm not missing something super obvious (other than better code / responsabilities splitting).
",PCreations,2016-08-14 15:08:08
416,2016-07-22 22:09:33,"@PCreations It's roughly an order of magnitude faster for many common types of selectors. Not a huge deal for a single component, but if you have a deep tree and lots of connected components, it will start to add up. Especially for those on a hot path.

But probably more important here is the code cleanup. Things are more readable and organized now. Cruft has built up over time on the current release, so this is a good chance to refactor and level up the code style a bit.
",timdorr,2016-08-14 15:08:08
416,2016-07-23 08:30:03,"Makes perfect sense, thanks for the clarification !
",PCreations,2016-08-14 15:08:08
416,2016-07-25 15:24:54,"Excited to try this out! Is this ready as a beta release candidate, or does it need more testing?
",stevewillard,2016-08-14 15:08:08
416,2016-07-25 19:09:44,"@stevewillard You may be able to install directly from @jimbolla's branch:

<S_CODE_TOKEN>

It _should_ work, but you might need to mess with your build setup to get the code to be transpiled. Alternatively, you can check it out locally, run the build steps, and install against that local copy.
",timdorr,2016-08-14 15:08:08
416,2016-07-25 19:55:52,"@stevewillard I pinged Dan about it and he said he'd take a look this week. I'm not sure if that means release a beta or do more of his own testing first. If you want to test it yourself in the meantime, what I do is build the branch (npm install && npm run build) and then copy the lib & dist folders into my node_modules/react-redux folder.
",jimbolla,2016-08-14 15:08:08
416,2016-08-09 13:41:09,"@gaearon Is there anything else you'd like me to do/test with this?
",jimbolla,2016-08-14 15:08:08
416,2016-08-09 17:14:41,"Unfortunately, only Dan has the publish bit set on npm, so only he can push out the planned `react-redux@next` dist-tagged testing release.

@gaearon Can you package up a release for testing? Everything here looks good to me. If not, I can take care of it if you are OK with adding me to npm.
",timdorr,2016-08-14 15:08:08
416,2016-08-11 14:00:11,"In the interim, I published `@jimbolla/react-redux` to npm for anyone that's eager to experiment with this. If you're using webpack, you can add an alias to substitute this package for the official one w/o having to change any other individual files. Just add the following code to your webpack.config.js:

<S_CODE_TOKEN>
",jimbolla,2016-08-14 15:08:08
416,2016-08-12 08:23:25,"@timdorr Sorry, I’ve been unexpectedly swamped by Create React App which started as a hackathon project 😄 . I’ll give you the npm ownership so you could publish it.
",gaearon,2016-08-14 15:08:08
416,2016-08-12 08:24:31,"@timdorr You should have access to `redux`, `react-redux`, `redux-thunk`.
",gaearon,2016-08-14 15:08:08
416,2016-08-13 13:40:38,"@jimbolla When do you plan to release it?
",max-mykhailenko,2016-08-14 15:08:08
416,2016-08-14 15:07:57,"#### Publicity and such: https://twitter.com/timdorr/status/764848054528774144

This version of react-redux is now available on npm for you to install and test:

<S_CODE_TOKEN>

It's tentatively called 5.0.0, although technically it has no breaking API changes. semver schmemver!

Please report any bugs you find with it as a separate issue on the repo. 

As some housekeeping, I'm going to close out this PR and instead merge it into the `next` branch on the repo (since this is against `master`). @jimbolla, you (or anyone else for that matter) can open up any followup PRs with further improvements and bug fixes against that branch. I'll go through and close out any issues that this PR solves (so many!) and we can plow forward on getting this released. I'll give it a week or so and we'll promote to beta status so we can get even more people trying it out. 

Everyone please give @jimbolla a huge round of virtual applause for this PR. He's done some really great work here!
",timdorr,2016-08-14 15:08:08
416,2016-08-14 15:10:51,"👏👏👏🎉🎉
",zavan,2016-08-14 15:08:08
416,2016-08-14 15:50:31,"I'm excited to see how this goes. :D Thank you to everyone who gave feedback on this so far.
",jimbolla,2016-08-14 15:08:08
416,2016-08-14 17:13:56,"And thank _you_, @jimbolla , for your initiative and all the time and effort you've put into working on this, as well as everyone else who has participated in the discussion.  This has been a very nice example of open source collaboration at work.
",markerikson,2016-08-14 15:08:08
416,2016-08-14 18:11:45,"Oh my gwd @jimbolla love you man for all the hard work you've done!!!
",OshotOkill,2016-08-14 15:08:08
416,2016-08-15 09:31:13,"thanks @jimbolla . Didn't have much time to see what you have done so far but it looks great and will probably solve some of my own issues
",slorber,2016-08-14 15:08:08
416,2016-08-15 16:17:31,"Not sure how you're collecting feedback on the 5.0 alpha release, but we've tried it with two of our apps and it's working extremely well with zero code changes. 👏 👏 👏 - really nicely done, and the writeup in this PR helped me understand a lot about what react-redux does under the hood.
",irvinebroque,2016-08-14 15:08:08
416,2016-08-15 16:40:54,"@irvinebroque Open a new issue here if you find anything. We'll want a reproducible test case (a ""repro"") to most effectively fix it, but at least notifying us would be a great start!
",timdorr,2016-08-14 15:08:08
416,2016-08-15 16:46:56,"@irvinebroque : Dan wrote up a gist a while back that shows what `connect()` does at a conceptual level: https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e .  Both the original version of `connect` and Jim's rewrite are way more complicated than that internally, but that gist demonstrates the overall intent: subscribe to the store, map state, merge props, render the wrapped component.
",markerikson,2016-08-14 15:08:08
416,2016-09-04 07:39:25,"@timdorr upgrading to `5.0.0-beta.1` but i cant see exported `connectAdvanced` in lib. I see file `src\components\connectAdvanced.js` but it is not exported in index so i cant use it directly by my own. Can you add that export and publish updated beta version?
",psulek,2016-08-14 15:08:08
416,2016-09-05 13:25:32,"@psulek You can still use it directly if you do `import connectAdvanced from 'react-redux/lib/components/connectAdvanced'` in the meantime. If you're trying out `connectAdvanced` would you also review and provide feedback on the related docs in PR #480?
",jimbolla,2016-08-14 15:08:08
416,2016-09-08 17:25:13,"Dumped the beta into a fairly complex single-page-app I'm working on and aside from peer-dep warnings it worked like a charm. Don't have any metrics to report but at least I can confirm that the backwards-compat appears to be working for my use-case.
",cpsubrian,2016-08-14 15:08:08
416,2016-09-28 17:33:28,"Love this! I just dropped the beta into an existing application that uses Redux to store form information. In my application, each field is connected to the store, similar to `redux-form`'s approach after the v6 upgrade. I loaded a fairly complex form and noticed with `Perf.printWasted()` that each field was performing a ""wasted"" render each time any other field changed. This quickly adds up to hundreds of wasted renders on a medium-sized form. (Imagine that each character in an `<input>` causes a state change in the store. For an average typist, that is 3-4 characters per second. Multiply that by the number of form fields and you arrive at hundreds of wasted renders _per second_ on a form with just 25 fields, which is a small number for our use case.)

With the new `react-redux`, against the exact same code, the hundreds of wasted renders have dropped to zero! Love it! Way to go @jimbolla!
",chrisvasz,2016-08-14 15:08:08
416,2016-09-30 20:07:02,"Dropped this into the same application I tested earlier. This test was performed on mock data, so the data is slightly different but the structure, relationship, etc of the data are all the same across both. 

The test was a drag and drop implementation using lists and smart components. The difference with this change is MASSIVE in terms of render count. (This is on Chrome, which seems to be the browser best able to handle this scenario. Mobile fares much, much worse)

Before:
![capture](https://cloud.githubusercontent.com/assets/2118069/19005325/eae450da-8727-11e6-8ad9-333084cab8d5.PNG)

After:
![capture2](https://cloud.githubusercontent.com/assets/2118069/19005326/eaedd06a-8727-11e6-9c30-da4da17f12eb.PNG)
",Sinistralis,2016-08-14 15:08:08
416,2016-10-01 00:04:10,"Hi,

This is good news, but can someone explain the performance improvements? I'm not sure to understand why it performs better than before as a drop-in replacement 
",slorber,2016-08-14 15:08:08
416,2016-10-01 00:12:41,"@jimbolla can explain further, but it's a combination of several factors.  Primarily, there's a ton of custom memoization going on using selectors, which avoids the need to call `setState`.  v4, on the other hand, called `setState` and then did the real checking in the wrapper's `render` function.  It also ensures that subscriptions are handled top-down, fixing a loophole where children could get notified by the store before ancestors and causing unnecessary render checks.  See the rest of this thread, as well as #407 for discussion and details.
",markerikson,2016-08-14 15:08:08
416,2016-10-01 01:55:39,"@slorber @markerikson The short short version... Forcing the order of components' store subscriptions to trigger top-down allows connect to avoid extra calls to setState, render, and mapStateToProps'n'friends.
",jimbolla,2016-08-14 15:08:08
416,2016-10-01 03:59:35,"Doesn't that mean it also fixes the issue where can you end up getting components in in-determinant states because they render before their parent, which could result in a child trying to access non-existent data because they haven't been unmounted yet?

I've actually run into this problem, and tested to see if the issue still occurs with v5 and it does not, so another issue fixed?
",Sinistralis,2016-08-14 15:08:08
416,2016-10-01 04:01:22,"Y'know, that's a good point.  I've seen that in my own prototype app, where I frequently use connected parents rendering connected list items.  I bet there's a good chance v5 resolves that.
",markerikson,2016-08-14 15:08:08
416,2016-10-01 04:46:23,"Yep. That was actually the motivation for making the change. The perf was a nice surprise.
",jimbolla,2016-08-14 15:08:08
416,2016-10-03 22:49:11,"That's nice! so finally it somehow breaks compatibility (not in a way that's likely to break someone's app) and the new behavior makes connect more performant, in addition to being more flexible.

However @jimbolla can you take a look at this usecase of a list of 100k connected elements? http://stackoverflow.com/a/34788570/82609
I've seen your comments pointing out that the new implementation will permit to solve this problem in an efficient way, but I'm not sure how it can be done. Any code to share?
",slorber,2016-08-14 15:08:08
416,2016-10-04 15:31:04,"@slorber A few thoughts on that:
- Can squeeze some extra perf by using `connectAdvanced` with a custom selector instead of `connect`. It would probably be worth it at 100k connected components.
- Another option besides those you suggested would be grouping your components into pages of (let's say) 100, so instead of 100k connected components, you'd have 1000 connected pages containing 100 unconnected components. Not sure if this would be faster or not. But it's worth experimenting
- In v5, connect/connectAdvanced take an option `shouldHandleStateChanges`. (connect sets it based on whether mapStateToProps is provided, connectAdvanced defaults it to true) You could connect a component that reads from state, but doesn't subscribe to store changes. This means it would only trigger rerenders when it receives new props from above. This may be be faster or slower.
",jimbolla,2016-08-14 15:08:08
416,2016-10-05 13:45:30,"Hi !

Since I updated a project to react-redux 5.0.0-beta.2, I see this error popping up, any clue ?
<img width=""723"" alt=""capture d ecran 2016-10-05 a 15 43 28"" src=""https://cloud.githubusercontent.com/assets/333073/19115536/a775b9d0-8b12-11e6-803e-097b03955fe9.png"">
Which comes from : 

<S_CODE_TOKEN>
",jide,2016-08-14 15:08:08
416,2016-10-05 13:53:16,"@jide Looks like we're calling `warning()` incorrectly in that commit. I'll fix and push out another beta.
",timdorr,2016-08-14 15:08:08
416,2016-10-05 13:55:20,"Ok thanx !
",jide,2016-08-14 15:08:08
416,2016-10-05 14:05:06,"OK, pushed beta.3 to remove that check for now.
",timdorr,2016-08-14 15:08:08
416,2017-01-27 00:48:08,"Looks like this has been released. Updating to 5.0.4 fixed some seemingly-bizarre bugs (caused by a previously-incorrect assumption that props were reliably passed from the top down), and haven't noticed any regressions. Thanks for making this happen!",natevw,2016-08-14 15:08:08
415,2016-06-23 20:04:12,"Why do you use context for transfer store to other components?
React authors don;t recommended use context functionality.
",kodermax,2016-06-23 21:42:58
415,2016-06-23 21:42:58,"Hi,

Thanks for asking!
I answered this question here: http://stackoverflow.com/questions/36428355/react-with-redux-what-about-the-context-issue

I hope this helps!
",gaearon,2016-06-23 21:42:58
414,2016-06-23 19:58:09,"I'm using react-redux for a year now and I always find myself struggling with the same situation : 
- `TodoList component` is responsible for displaying a list of todo object
- I connect the `TodoList` component to selects the todos from store
- I create a `componentWillMount` method in `TodoList` component to fetch the todos if needed

Example : 
Todo.js

<S_CODE_TOKEN>

TodoList.js

<S_CODE_TOKEN>

I don't want the `TodoList` component to be responsible for fetching data, but I do want to _mark_ it as dependent of the todos.

I'm a huge fan of the separation of concerns in redux : 
- `action` describe what happen
- `reducer` know how to respond to this actions
- `saga` eventually handle the side effects
- `selectors` know how to select slice of the state

...but who is responsible to know if a corresponding slice of state is not ""valid"" and that an action need to be triggered to make it ""valid"" ? We actually do this in components themselves as in my example above, but it's get tedious as the app grow because many components can have the same requirements. I would love to hear about other experiencing the same issues and how you solve them. **I've made a little draft repo to expose my proposal, it's absolutely not optimal, and i'd love to have feedback before digging further, does this sound like a good idea or are there some anti-pattern ?** [Here is my proposal](https://github.com/PCreations/react-redux-pledge) : 

(I don't want to be pushy about my own work, I just want feedback because I think it's very common source of reflexion and problem)
## Introducing the notion of 'pledge'

You already know what a `reducer`, an `action creator` or a `selector` is. React-redux-pledge introduces the notion of `pledge` (a better word would be a Promise but, for obvious reason, I chosen ""pledge"" ;) ). **A `pledge` is an object that know if a slice of your state is valid and if not, how to make it valid**

<S_CODE_TOKEN>

`isResolved` receive the global state as an argument, you can select a slice of the state and return `true` if this slice need to be considered valid of `false` otherwise.
`getAction` should returns the action that need to be dispatched in order to make the slice of the state handled by this _pledge_ valid (typically an action creator initiating an api request).
## Enhance your connected component with the `withPledges` higher-order component

Todo.js

<S_CODE_TOKEN>

todos.js (let's say that's a module with some action creators, reducers, etc., handling the todos)

<S_CODE_TOKEN>

TodoList.js

<S_CODE_TOKEN>

It's **NOT** a proposal to declarative data fetching, just an helper to don't need to worry about what component is fetching what data, and just let the requirements bubble up.
",PCreations,2016-06-26 18:30:09
414,2016-06-26 18:30:09,"I think this could work great as a third party library. If it proves popular, we might consider including something like this by default.
",gaearon,2016-06-26 18:30:09
413,2016-06-23 14:51:56,"I'm curious why `doStatePropsDependOnOwnProps` is defined by checking length of function `mapStateToProps`. It causes weird issues with generated functions (ex. with `pipe/compose`) or ones with default arguments (see [Babel transpilation results](http://babeljs.io/repl/#?evaluate=true&lineWrap=false&presets=es2015%2Creact%2Cstage-2&code=function%20add%28a%2C%20b%20%3D%200%29%20%7B%0A%20%20return%20a%20%2B%20b%3B%0A%7D)). Is it some kind of microoptimization or core concept?
",erykpiast,2016-06-23 21:37:36
413,2016-06-23 16:20:53,"Well, per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length , `Function.length` ""specifies the number of arguments expected by the function"".  `connect()` can accept a `mapState` function that only depends on `state`, or depends on both `state` and `ownProps`, and since in both cases the `mapState` argument would be a function, checking the number of expected arguments is a reasonable way to determine which use case it is.

I would find it surprising that someone would be supplying default arguments as part of their `mapState` function, and also probably uncommon to be wrapping/generating it in some way.  Can you provide some examples of such a `mapState` implementation, and some possible use cases?
",markerikson,2016-06-23 21:37:36
413,2016-06-23 16:40:47,"I think I understand the code, but I wish to know the motivation. If the function doesn't use `ownProps` argument (does not declare it in its definition), then passing this to the function after `state` cannot break anything, am I right?

The case was pretty simple, I need component depending on `params` only. I can define `mapStateToProps` for it like that:

<S_CODE_TOKEN>

or like that:

<S_CODE_TOKEN>

Ignoring the fact which approach is better, the second one does not work because of that function length checking.
",erykpiast,2016-06-23 21:37:36
413,2016-06-23 16:52:54,"The actual motivation is that if a connected component only needs generic-ish data from the store (such as `state.someField`, then `connect` will only re-run `mapState` when the store updates.  However, if a connected component needs to make use of its own props values in `mapState`, such as looking up the data for a specific item ID ( like `state.someData[ownProps.itemID]`), then `connect` will _also_ need to re-run `mapState` whenever the parent of the connected component re-renders, in case the own props have changed (which _could_ cause the result of `mapState` to change).  So, it's a performance optimization to only call `mapState` as much as is actually needed.

Your example confuses me a bit.  It sounds like you don't actually need `mapState` at all.  First, your component could be given, say, `<ChildComponent a={1} b={2} c={3} />`, but only bother to read and use `a` and ignore any other props.  Second, if you do really want to ensure that a component is only actually given a certain prop and doesn't even receive the others, just create a simple React wrapper component that filters out unwanted props and only passes on desired ones.  `mapState` is irrelevant in that case.
",markerikson,2016-06-23 21:37:36
413,2016-06-23 21:37:36,"Regarding my use case, I use react-redux-router along react-redux and that's because I need `mapStateToProps` with the second argument only, react-redux-router puts path params to `ownProps`. But it doesn't really matter, I just did want to talk about general issue.

Anyway, I see know what is happening based on `doStatePropsDependOnOwnProps` - quite a lot of. So I understand that nothing may change. And I consider my initial question as answered :)

Would you mind if this detail is included in documentation? I mean the requirement that `mapStateToProps` must be formally defined as binary function to receive `ownProps`.
",erykpiast,2016-06-23 21:37:36
413,2016-06-23 21:41:33,"The docs for `connect` do indicate that `ownProps` is optional, and mention that your `mapState` will be called more often: https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options

But yeah, doc PRs are always welcome if you've got improvements in mind.
",markerikson,2016-06-23 21:37:36
413,2016-06-24 18:55:27,"@markerikson: Please, look at https://github.com/reactjs/react-redux/pull/417. I hope my english is good enough :)
",erykpiast,2016-06-23 21:37:36
412,2016-06-23 07:44:53,"The current `Provider` interface:

<S_CODE_TOKEN>

Is, imo, expressed more cleanly as an HOC:

<S_CODE_TOKEN>

A naive implementation:

<S_CODE_TOKEN>

Of course, you'd want to add some invariants and provide a displayName (or better yet, just let it add the store to context itself and do away with the `Provider` dependency). Bonus: [this check](https://github.com/reactjs/react-redux/blob/master/src/components/Provider.js#L36) is no longer necessary, and the syntax makes it more clear that you're providing a single store once.

What do you think about providing this API out of the box? Happy to send a PR if you like the idea.
",billyjanitsch,2016-06-23 14:13:13
412,2016-06-23 14:13:13,"This is how it used to be in very early versions. It has significant downsides. Specifically it is more awkward to supply a store when server rendering and in tests because you have to generate classes every time.
",gaearon,2016-06-23 14:13:13
412,2016-06-23 16:30:24,"That's a good point, thanks for explaining!
",billyjanitsch,2016-06-23 14:13:13
412,2016-08-09 18:47:55,"What does HOC stand for ?
",sveinburne,2016-06-23 14:13:13
412,2016-08-09 19:12:06,"Higher order Component

check out https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.b5clq7pea
",gnoff,2016-06-23 14:13:13
412,2016-08-09 19:13:20,"thanks :-)
",sveinburne,2016-06-23 14:13:13
411,2016-06-22 22:43:28,"I am having a little bit of trouble generalizing the relative depth of my Containers within the redux store.

For instance, lets say I have a Container that uses the function 

<S_CODE_TOKEN>

This is fine, for now, because I'm calling 

<S_CODE_TOKEN>

inside of my Address reducer, and in my Root reducer, I am doing the same with Address.

Now, let's imagine that I create a deeper nesting. Lets say I have a store that looks more like 

<S_CODE_TOKEN>

Do I need to inject the new relative path into the Country container? 

<S_CODE_TOKEN>

Or am I missing something?

Basically, I'd like the containers to be depth-agnostic. My reducers already operate this way, I don't understand why containers are necessarily different. 

Perhaps there could be a way to receive both relative state and global state within a mapStateToProps call?

The best case scenario (for me) is to be able to take a container and compose it at will.
I should be able to write 

<S_CODE_TOKEN>
",calekennedy,2016-06-22 22:48:00
411,2016-06-22 22:48:00,"This is a usage question, and should really be asked over on Stack Overflow.

That said: reducers are frequently structured so that they only know about the scope of the data they need to update, using the `combineReducers` utility.  However, any given component _could_ be interested in any portion of the entire state tree.  Also, Redux only stores a reference to the state tree as a whole anyway, so that's what's returned by `getState()`.

This is where ""selector"" functions come in.  Selectors generally receive the entire state as an argument, and extract some small piece out of the whole.  That way a component doesn't need to know what the entire state structure looks like - the selector is abstracting it.  Think of selectors as an ""SQL-like query"" for a state tree.

The Redux docs talk about selectors in http://redux.js.org/docs/recipes/ComputingDerivedData.html, and Dan discusses them in his recent ""Idiomatic Redux"" video series: http://redux.js.org/docs/recipes/ComputingDerivedData.html.
",markerikson,2016-06-22 22:48:00
410,2016-06-22 18:25:14,,jugend,2016-06-22 22:44:47
410,2016-06-22 22:44:51,"Thanks!
",gaearon,2016-06-22 22:44:47
409,2016-06-21 21:27:19,"It appears that in Redux I have no way of saying ""I want to fire _this_ particular action"", I can dispatch in general and then I have to do conditionals to find out what action was dispatched and thus every single one of my reducers fire for every single action and every single reducer has to contain a conditional to find out if it's handling the right action. Not only is this redundant and not elegant, but it seems like a big waste.
",mgenev,2016-06-21 21:39:33
409,2016-06-21 21:39:33,"Please see http://redux.js.org/docs/FAQ.html#performance-all-reducers.
",gaearon,2016-06-21 21:39:33
409,2016-06-21 21:41:20,"(Redux manages global state. So actions are global by design. If you want a local update, you might want to use something other than Redux—for example, `setState()` in React or something similar.)
",gaearon,2016-06-21 21:39:33
409,2016-06-21 22:12:21,"You may also want to look at the numerous utilities and libraries in my Redux addons catalog at https://github.com/markerikson/redux-ecosystem-links.  In particular, the [Action/Reducer Creation](https://github.com/markerikson/redux-ecosystem-links/blob/master/action-reducer-generators.md) and [Component/Local State](https://github.com/markerikson/redux-ecosystem-links/blob/master/component-state.md) pages have a number of options for isolating reducer logic.
",markerikson,2016-06-21 21:39:33
408,2016-06-17 13:41:16,"Added RR 2.0 example 
",ev1stensberg,2016-07-10 17:03:38
408,2016-06-17 13:44:42,"~ This snippet was taken from somewhere else in the Repo, but I think it is convenient to have it here as well.
",ev1stensberg,2016-07-10 17:03:38
408,2016-06-17 13:47:39,"It's also the same, but people may think it is different from 1.0. Alternatively we can change `React Router 1.0` to `2.0`
",ev1stensberg,2016-07-10 17:03:38
408,2016-07-10 17:03:36,"I'll just rename this to remove the version part.
",timdorr,2016-07-10 17:03:38
407,2016-06-16 23:31:52,"[I rewrote connect() and extracted a connectAdvanced()](https://github.com/jimbolla/react-redux/tree/connect-rewrite/) It now uses [reselect](https://github.com/reactjs/reselect) to handle merging/caching of the state/props/dispatch. It also extracts out a `connectAdvanced()` function that `connect()` just delegates to. 

I'm not quite ready to ready to submit a PR (still tweaking), but I'd like to suggest that this eventually become the new implementation.

It passes tests and linting, ~~with the only breaking change to the existing API being related to the ""advanced scenarios"" for factories that require setting another options flag. (I haven't figured out how to detect the factory methods automatically... will give it another go, but it's been tricky given how radically different my approach is.)~~ solved

Things I'm still need to do:
- [x] support factorying map*ToProps functions without an explcit flag
- [x] add more comments
- [ ] performance testing. the tests run slightly faster on my machine but we're talking insignificant amounts (250ms vs 230ms). do performance tests exist for this?
- [ ] reconcile with pending pull requests, as there would be zero chance of a successful merge. I've already covered the changes and new features in several of them, but some of the others will need reimplemented.
- [ ] keep tinkering. there's some functionality in `connect()` that I'd like to make reusable for someone who wants extend its functionality in userspace
",jimbolla,2016-07-01 23:05:41
407,2016-06-16 23:52:12,"The first concern would probably be that you're explicitly depending on Reselect.  While Reselect is heavily used in the Redux ecosystem, I'd be hesitant to make it a direct dependency.  (Of course, I'm also just an opinion, hardly the final arbiter.)
",markerikson,2016-07-01 23:05:41
407,2016-06-17 00:43:20,"What would be the cause for hesitation?
",jimbolla,2016-07-01 23:05:41
407,2016-06-17 01:37:15,"The connect code is a bit hard to work with in tests. It would be really nice to be able to set `withRef` to `true` just for tests, but there's so much hidden inside that connect code, not accessible outside of it. Even the [`Connect` component](https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L75) itself is defined inside the `connect` function. That's just crazy to me, why was it written that way? It's taking important bits of information from the closure it's in and making it impossible to extend that `Connect` component or do anything with it to make testing easier.

So I think a bit of a refactor there would be nice but your own [`advancedConnect`](https://github.com/jimbolla/react-redux/blob/connect-rewrite/src/components/connectAdvanced.js) has this problem too. So I'm not sure this is the way to do it.
",btipling,2016-07-01 23:05:41
407,2016-06-17 01:52:02,"@btipling I'm all for opening it up as much as possible. But I'm not sure what you're not able to access that you expect to. The Connect component has to be inside the closure function because it depends on the functions parameters. It can't be outside because each call to connect creates a unique class.
",jimbolla,2016-07-01 23:05:41
407,2016-06-17 20:36:26,"@reactjs/redux, @phoenixmatrix, @Aweary: would be particularly interested in other thoughts and opinions on this, especially from people who have actually been hands-on with `connect()`.

I wrote up my initial thoughts in Reactiflux (chat transcript at https://gist.github.com/markerikson/561ce2d8830a34c35701ea77564c7073).  Way TL;DR: 

> at this point I would probably be against unless there's some specific demonstrated improvements in speed, maintainability, or use cases. And, given that I'm just ""an opinion"", I'd really like to hear from others who have actually worked on the code and know what they're doing with it (Dan in particular)

But: 

> full API compat / all tests passing is certainly a good start
",markerikson,2016-07-01 23:05:41
407,2016-06-17 20:55:50,"Do you have any documentation on the new advanced API and/or a changelog? It's a pretty big change and kind of hard to parse everything at once, it will likely be easier to provide feedback once we can see an actual diff when you open your PR.

I'm also a little hesitant about using Reselect by default. What if someone wanted to implement their own caching/memoization strategy, would they be able to do that?
",aweary,2016-07-01 23:05:41
407,2016-06-17 20:59:00,"[Here's your diff](https://github.com/reactjs/react-redux/compare/master...jimbolla:connect-rewrite#files_bucket), but it's basically all new.

I'm not sure this is actually more performant too. `connect()` currently does some intelligent caching of the ReactElement instance when comparing updated state. It looks like this will create more spurious updates, moving the caching over to the selector, but potentially falling through more often due to different semantics. 
",timdorr,2016-07-01 23:05:41
407,2016-06-17 21:00:42,"Prior discussion for reference: #403 , #405 
",markerikson,2016-07-01 23:05:41
407,2016-06-17 22:22:57,"Also, repos that could be relevant benchmarks:
- https://github.com/mweststrate/redux-todomvc
- https://github.com/jscriptcoder/stressing-redux
- https://github.com/broadsw0rd/react-redux-perf
",markerikson,2016-07-01 23:05:41
407,2016-06-17 23:19:35,"It definitely depends on whether this brings any real-world advantages. `connect()` is already performant and the current implementation has the advantage of being well tested in production, so any performance/usability improvements will have to be more than marginal to justify a full rewrite.
",aweary,2016-07-01 23:05:41
407,2016-06-18 00:53:08,"@Aweary I've been working on adding comments to the code to explain as much as possible, but I can provide an executive overview:
- The API for `connect()` is exactly the same, but its internals are completely different, ultimately delegating to `connectAdvanced()`. 
- The API for `connectAdvanced()` is `connectAdvanced(selectorFactory, {connectOptions})`. `selectorFactory` is a func with the signature `({factoryOptions}) => (state, props, dispatch) => {finalProps})`
- While Reselect is utilized internally, there's no requirement for a user to use it as their memoization engine for the functions they pass to either `connect` or `connectAdvanced`, nor is memoization even a requirement.
- Exposing an advanced API will allow end users to customize the connect functionality by building their own wrappers. For example, the whole reason I started this was so that I could define a wrapper that let me define my mapping using reselect's `createStructuredSelector`. Another example would be #323. 

Looking at a diff probably won't be super useful, since it's a total rewrite. It's probably better to look at the new files as a whole.

@timdorr Can you elaborate on why you think this implementation would fall through more often? Unless I'm missing something, I expect render to NEVER execute unnecessarily.
",jimbolla,2016-07-01 23:05:41
407,2016-06-18 04:20:48,"First performance test using https://github.com/broadsw0rd/react-redux-perf.
1. First I modified the fill-pairs action to increase the count from 60 to 600. (Otherwise both were capping out at 60fps)
2. Then built using current react-redux
3. Then copied the built version of my rewrite into the perf's node_modules and rebuilt

Running each version in their own Chrome window simultaneously on their own monitor, full screen 
(Ultra-HD).

| Stat | Current | Rewrite |
| --- | --- | --- |
| Stats FPS | 33-35 | 35-38 |
| Stats Memory | 13MB | 11MB |
| Chrome CPU | 8-9% | 8-9% |
| Chrome Memory | 99,000KB | 63,000KB |

So for this particular test, my rewrite is getting a few FPS better, and is using slightly less RAM. But this test is fairly simple. It's a single connected component that passes props to many child components. I'm gonna tinker with the code and see if I can make it run 100s of connected components and see what kind of stats I get.

I haven't been able to get https://github.com/jscriptcoder/stressing-redux to work. It just throws an error on startup. (With official react-redux... didn't even make it to trying my own)
",jimbolla,2016-07-01 23:05:41
407,2016-06-18 04:31:13,"The examples in http://somebody32.github.io/high-performance-redux/ would also be very relevant here.  Code for the examples is at https://github.com/somebody32/high-performance-redux/tree/gh-pages/assets, i think.
",markerikson,2016-07-01 23:05:41
407,2016-06-18 06:57:05,"Latest test... changed https://github.com/broadsw0rd/react-redux-perf. so that each item was a connected component (181 total connected). First results were that my rewrite was getting about 1-2 FPS less, so looking into it... excess `setState()` calls. I solved this by recomputing the selector and conditionally firing setState only if changes. This led to a problem with the backwards order of parent-child subscriptions. I changed this so that parent components always subscribe before children. This probably needs further reviewed, BUT the payoff....

| Stat | Current | Rewrite |
| --- | --- | --- |
| FPS | **14-15** | **47-49** |
",jimbolla,2016-07-01 23:05:41
407,2016-06-18 13:21:43,"I made a small change in `handleChange` that fixes my own performance issues. The key being to avoid excess `setState(...)` calls, which @jimbolla mentioned.

<S_CODE_TOKEN>

I'm not aware of the repercussions of this change, as I just start messing with the code here, well, 30 mins ago. I just started using React, Redux, etc. etc. this week, so I'm not quite up-to-speed on the performance problems here, but it didn't take long to run into them. Glad I'm not alone!

Anyway, I'm happy to see that this thread is pretty active, so I wanted to take the opportunity to post my 2 cents and see what others thought before I spend the rest of the weekend catching up on this particular issue. Thanks, all!
",jonkelling,2016-07-01 23:05:41
407,2016-06-18 16:00:25,"@jonkelling Would you be interested in helping me test my changes? At least by trying them in your app?
",jimbolla,2016-07-01 23:05:41
407,2016-06-18 21:50:48,"@jimbolla I'll do what I can! I was able to get it functioning, but the first go at it saw decreased performance. I may not be doing it the way you intended, so I can try it again a bit differently if this seems off.

<S_CODE_TOKEN>

A couple of things:
1. I had to add `children: props.children` to get things to render.
2. I think `shouldComponentUpdate` is always returning try because it's comparing all of the properties returned by the selector, including the onMouseOver and onMouseOut functions--I really only want it to update if ""active"" is different, in this case.
3. I love the intentions of reselect in general, but as I'm only after a single boolean property, caching would technically be less efficient, and would sort of defeat the purpose of what reselect does.

Let me know if I can help any other way!
",jonkelling,2016-07-01 23:05:41
407,2016-06-18 22:41:28,"@jonkelling Ah yes, if you're going to use `connectAdvanced`, you probably want to pre-build your event handlers at least, otherwise react sees those as new every time. It also doesn't assume you want to pass alll ownProps through by default, so you either have to cherry pick them, or use spread. You could write:

<S_CODE_TOKEN>

Note that with the spread operator (...props) approach, all props will be considered for equality check, so if your component gets other things passed to it that it's not interested in, that would still trigger a rerender. That would be motivation to cherry pick your props so that only the ones you're interested in.
You could also use the standard connect() API as well:

<S_CODE_TOKEN>

And if the id param of your handlers is the same id from props, you could do this:

<S_CODE_TOKEN>

I could go on about how to use reselect to build your selector as well, but I don't want to go to far off tangent right here. Feel free to submit an issue on my fork if you want to go in depth there.
",jimbolla,2016-07-01 23:05:41
407,2016-06-20 02:05:46,"I removed the dependency on reselect and handrolled memoization for the relevant parts. I'm using [this project](https://github.com/jimbolla/react-redux-perf) to perf test the difference between current and this rewrite. With 331 connected components, i'm currently seeing 5-7 FPS with current, and 50-53 FPS with the rewrite.
",jimbolla,2016-07-01 23:05:41
407,2016-06-20 05:16:43,"Well, that's certainly a very intriguing result.

I very briefly skimmed the new code in the fork.  There's definitely a lot _more_ code overall, but on the flip side, a lot of that seems to be selectors.  The individual bits of code also seem fairly well-written at first glance.  Will need to spend time reading through that more carefully to see what's actually going on.  (Could also use something of a diagram or dependency tree to tell me how all these different selectors fit together.)

Again, I'm certainly not the guy who makes the final call, just the one who happens to be actively responding to the issue.  That said, at this point I'd say the proposal seems to have some potential benefits, and warrants serious consideration and discussion.
",markerikson,2016-07-01 23:05:41
407,2016-06-21 14:21:12,"@markerikson I'm still refactoring for clarity, and need to add some comments, but I'm getting close to being ready to submit as a PR. Any feedback you have is greatly welcome.
",jimbolla,2016-07-01 23:05:41
407,2016-06-21 15:57:01,"Haven't had a chance to really dig through the code yet.  My main suggestion at this point would be to document this to ridiculous levels:
- Overall motivation and intended benefits
- High-level conceptual overview of the new approach
- Conceptual comparison with the existing approach
- Document any new APIs, their purpose, and their usage
- Walkthrough of the new data flow sequence
- Some kind of dependency tree-ish thing for all the new selector functions
- Benchmarks, benchmarks, benchmarks (numbers, graphs, and actual runnable examples)

I know that's asking for a good chunk of work, but given that you're proposing to swap out an entire existing implementation that's been reasonably battle-tested with a brand-new codebase, the burden of proof is basically on you to fully justify the switch and make sure that it's sufficiently maintainable in the future.
",markerikson,2016-07-01 23:05:41
407,2016-06-21 17:07:20,"@markerikson I totally agree, and was already thinking all those things. It's just a matter of time. I'm hoping to have all that by some time this weekend, optimistically. The code is more-or-less complete, barring any renames to make things clearer. Next up is comments to clarify things at the local level, where needed. Then I'll work on the ""conceptual"" documentation. Do you think it makes sense to write that as an .md file to be included with the code?
",jimbolla,2016-07-01 23:05:41
407,2016-06-21 17:11:48,"Could you possibly write up the documentation in a gist and just link it here? If it's beneficial to include it in the docs I'm sure it could be pulled in.
",aweary,2016-07-01 23:05:41
407,2016-06-21 17:48:54,"If I wanted to make a diagram to show the relationship between the various functions, what would be a good tool to do so?
",jimbolla,2016-07-01 23:05:41
407,2016-06-21 18:01:29,"Not sure on the diagram thing.  

This FPS measurement utility might be useful: https://www.reddit.com/r/reactjs/comments/4os0lu/looking_for_a_reliable_way_to_measure_framerate/
",markerikson,2016-07-01 23:05:41
407,2016-06-21 18:27:16,"The one used by react-redux-perf is [this one](https://github.com/mrdoob/stats.js/). It seems to do a good job. At this point I'm feeling pretty strong about significant perf gains, by avoiding unnecessary calls to setState/render. I'll elaborate in the eventual gist.
",jimbolla,2016-07-01 23:05:41
407,2016-06-21 19:06:28,"I'm with @jimbolla on avoiding unnecessary calls to setState and render. Might I also suggest calling out the specific cases and adding unit tests for them. My own change to avoid extra calls to setState breaks one of existing tests in react-redux. When I get the time, I hope to understand the intention behind that test case and the original code so I can decide how I really want to/should handle it. I look forward to seeing what you come up with!
",jonkelling,2016-07-01 23:05:41
407,2016-06-21 19:17:56,"@jonkelling : yeah, the snippet you commented out is to specifically handle the case where a parent component is rendering a connected child component, and passing some props in.  For example, the parent might render something like:

<S_CODE_TOKEN>

If the child's `mapState` indicates that it takes the second argument of `ownProps`, then the return value of `mapState` is probably dependent on the incoming parent props, usually along the lines of:

<S_CODE_TOKEN>

In that case, every time the parent re-renders, the connected child would need to re-run `mapState` in case the incoming props changed, even if the state itself hasn't changed.

And yes, MOAR UNIT TESTS!!!! :)
",markerikson,2016-07-01 23:05:41
407,2016-06-21 19:30:39,"@jonkelling @markerikson I broke the same test when I removed the ""unnecessary"" setState() calls. The solution was to enforce top-down subscriptions. Then it's no longer a ""re-run"", it's just a ""run"". This also added significant perf gains because in most cases, a whole tree of connected components will re-render in a single frame. By the time the child components get their notification from the store, they've already done their work... they fire the getFinalProps selector, which sees that current ownProps and state are the same as previous, and avoids the extra setState/render cycle.
",jimbolla,2016-07-01 23:05:41
407,2016-06-21 19:55:47,"If this new implementation doesn't use sideways subscriptions, will it be affected by the issue described in https://github.com/reactjs/redux/issues/1700? 
",aweary,2016-07-01 23:05:41
407,2016-06-21 19:57:50,"I think the use of `store.subscribe(this.handleChange)` _is_ a ""sideways subscription"" - ie, a source of data not directly coming down from above.  The mention of ""top-down subscriptions"" in this thread is, I assume, more about the way the store subscriptions are sequenced or something between parents and children.

Quick references:
- https://jurassix.gitbooks.io/dataflow-through-react/content/data-loading/index.html
- https://twitter.com/dan_abramov/status/613476165085323265
- http://stackoverflow.com/questions/31583501/what-is-sideways-data-loading-in-react
- https://github.com/facebook/react/issues/3398
- https://github.com/facebook/react/issues/3858
",markerikson,2016-07-01 23:05:41
407,2016-06-21 20:19:47,"Cool, yeah, I haven't had much time to look over all of these changes. Seems reasonable though, great work @jimbolla 
",aweary,2016-07-01 23:05:41
407,2016-06-21 20:46:47,"@Aweary The subscriptions aren't ""sideways"" but they will _always_ fire, independent of any optimizations. If the parent component doesn't rerender or an intermediate non-connected component doesn't rerender, the child components still get to do their thing. The key parts are [Subscription.js](https://github.com/jimbolla/react-redux/blob/connect-rewrite/src/utils/Subscription.js) and [these parts of connectAdvanced.js](https://github.com/jimbolla/react-redux/blob/connect-rewrite/src/components/connectAdvanced.js#L154) 

<S_CODE_TOKEN>

It puts Subscription in the context to be the ""wormhole"" like Dan mentioned. Subscriptions build into a tree.
",jimbolla,2016-07-01 23:05:41
407,2016-06-21 20:48:44,"Hmm.  More use of context?  Do we need to be concerned with any of the ""context doesn't deal well with `shouldComponentUpdate`"" comments I've seen?  (Not clear on all the details myself, just know that it's one of the general concerns with use of context.)
",markerikson,2016-07-01 23:05:41
407,2016-06-21 20:50:06,"Also, does this make any changes to the approach for testing connected components?  Does it still handle looking for `this.context.store` or `this.props.store`?
",markerikson,2016-07-01 23:05:41
407,2016-06-21 20:52:37,"@markerikson I never modify the context so no need to trigger an update. That should be a non issue. I followed the same ""props.store"" or ""context.store"" pattern like the original.
",jimbolla,2016-07-01 23:05:41
407,2016-06-21 20:53:49,"Cool.  Just tossing that out as a thought to be aware of.
",markerikson,2016-07-01 23:05:41
407,2016-06-21 22:55:43,"It's all good. The more scrutiny the better. Believe me, I'm more worried that I missed something than you are. haha.

Current benchmarks using [jimbolla/react-redux-perf](https://github.com/jimbolla/react-redux-perf/tree/connect-rewrite), all 6 tabs opens at once, 331 connected components each:

Frames per second:

| FPS | current | rewrite |
| --- | --- | --- |
| Chrome | 5 | 46 |
| Firefox | 2 | 45 |
| IE 11 | 3 | 21 |

Milliseconds to render a frame:

| MS | current | rewrite |
| --- | --- | --- |
| Chrome | 180 | 20 |
| Firefox | 400 | 23 |
| IE 11 | 320 | 40 |

Same tests, this time with a Blocker component between the parent and children that always returns false for shouldComponentUpdate:

Frames per second:

| FPS | current | rewrite |
| --- | --- | --- |
| Chrome | 5 | 51 |
| Firefox | 2 | 45 |
| IE 11 | 3 | 25 |

Milliseconds to render a frame:

| MS | current | rewrite |
| --- | --- | --- |
| Chrome | 190 | 19 |
| Firefox | 500 | 20 |
| IE 11 | 380 | 37 |

Fascinatingly, current did worse with the blocker component, while the rewrite does even better. I think this is because in the rewrite, my current bottleneck is [the shallowEqual compare on ownProps](https://github.com/jimbolla/react-redux/blob/connect-rewrite/src/selectors/getOwnProps.js#L7). With the Blocker component, the old props === new props and avoids the complicated part of shallowEqual. 
",jimbolla,2016-07-01 23:05:41
407,2016-06-23 00:49:28,"How do you all feel about using jsdoc for commenting code? Or is there something newer/better?
",jimbolla,2016-07-01 23:05:41
407,2016-06-23 01:25:44,"Don't think there's any specific tool used for code docs at the moment in any of the ReactJS repos.  I'd say go ahead for now, and worst case someone might change it later (but I'd think that would probably be okay as-is).

Changing topics: I'd like to pre-emptively thank you for the time and effort you've put into this, and the attitude and approach you've taken.  When I saw your first issue about the `mapDispatch`+state question, I felt like you were really pushing a niche use case and not making use of the available option (`mergeProps`).  When you said you were implementing your own store connection function, I kinda mentally groaned and thought, ""Oh, chalk up another entry for the ""Variations"" page in my addons catalog"", which is where I list libraries that seem to be going their own way or going against the idiomatic concepts of Redux.

But: when the suggestion of making your implementation API-compatible with `connect()` came up, you went for it.  You've answered every question I've come up with so far.  You've done the legwork to prove that there are indeed some very potential benefits from the new implementation.  You've engaged pretty freely in discussion in the issues list.  

Now, as I said earlier, as the guy proposing we take on a big chunk of code you've written to replace an existing implementation, the burden of proof and work is indeed on you.  But, you've definitely won me over on the basis of your approach and your code.  

Again, I don't have the final say on whether or not this would finally get merged in, but at this point I'm certainly in favor of a very serious discussion on this approach at a minimum, and think it has a good shot at being accepted overall.
",markerikson,2016-07-01 23:05:41
407,2016-06-23 06:29:15,"@jimbolla 

having gone through your implementation of connectAdvanced (and to some extend the connect api reimplementation) I have the following very disjointed thoughts and questions.
1. in many respects `connectAdvanced` seems simpler than `connect` to me. would you intend to ever use the original api over the advanced api. If the benefits of the new api consistently outweigh those of the existing one I wonder if this framing is the correct one long term.
2. Should connectAdvanced have sensible defaults for when say you just want dispatch? Obviously one can use the connect wrapper for advanced but this adds a lot of internal complexity (for the backwards compat sake which is great) and if users are using the advanced api already there may be some value in providing defaults
3. ~~using options to control depends on state feels clunky to me. Can the selector arity be used to modulate this behavior whereby `(state, props, dispatch) =>` depends on state and `(props, dispatch) =>` does not?~~  scratch that, babel transpilation can alter fn arity when using default values. explicit is fine if a bit clunky
4. would the perf boost from enforcing subscription updates top down make the performance parity more equal? I think as great as the new implementation is, I'm worried that the parent subscription tracking feature is doing the heavy lifting perf wise and that a similar implementation in the current form may show possibly even higher performance than your new implementation (not that I hope it does one way or the other)

I'm torn because the risk of major reimplementations is real but the simplicity of the new implementation is valuable too. Part of me feels like if the new implementation is worth adopting we ought to deprecate the existing api in a major and move over to the new api in another major. In my mind most of the complexity in the new implementation is in trying to keep backwards compatibility which is a valuable target but if the new API turns out to be genuinely better (which we would of course need plenty of time in production use to adequately gauge this) then why hide it behind a veil of 'advanced-users-only' connotations.

I don't make decisions, just been around this project for a bit. take my opinions for what little they are worth :)
",gnoff,2016-07-01 23:05:41
407,2016-06-23 13:03:50,"@jimbolla, I've got your latest code. Kudos on making it work with connect()! My own performance problems resolved :+1: I'll work on test cases for ya this weekend. Thanks for all of your work on this!
",jonkelling,2016-07-01 23:05:41
407,2016-06-23 20:14:57,"@markerikson Thank you for your all your help. Your participation has helped me flesh out my ideas and force me to critically think about what I'm trying to do and how to do it. I understand the potential impact of such a large change, and therefore the need to make a strong justification for it. I'm working on that ""justification"" doc now, and even as I'm writing it, I'm tweaking my design to make the explanation less awkward. I'm still hoping to get it done by this weekend.

@gnoff `connectAdvanced` appears simpler than `connect` because it does less for you. But the responsibility to memoize intermediate results is now on the caller. This is especially important for any actionCreators being bound to dispatch, for example. I don't want to make assumptions about what ""sensible defaults"" are for anyone's usage; instead I'd like an API that's flexible enough so that anyone can wrap `connectAdvanced` in their own method that makes assumptions that work for them. Using function arity is somewhat brittle and is not obvious. I'm sure if the current implementation of connect was modified to use hierarchical subscriptions, it could gain a lot of the same perf improvements. If someone else wants to take that approach, they're more than welcome to copy any of my code/ideas. But to me the performance is just a bonus, because what I really wanted was a more flexible API. Sepcifically, I'm interested in defining my selector using Reselect's `createStructuredSelector` function. I still think the `connect` API should be the official API for 99% of use cases, and then `connectAdvanced` is there when you want to get clever, eek out performance, or want to use it to integrate with another library.

@jonkelling That's great. I'm encouraged by your positive feedback. Test cases are certainly welcome.
",jimbolla,2016-07-01 23:05:41
407,2016-06-26 22:18:36,"I was about to write an RFC issue to discuss rewriting `connect()` to provide more functionality. Given how healthy this discussion has been I think this is the best place to post it.

My approach was going to be a bit different than @jimbolla's. My inspiration came from wanting to write a lightweight version of [`apollo-client`](https://github.com/apollostack/apollo-client), call it `react-redux-graphql`, and to avoid having to do something like this:

<S_CODE_TOKEN>

Ideally it would be something like this: (inspired by redux store enhancers)

<S_CODE_TOKEN>

Or something similar (this doesn't have to be the final signature).

Now, I could just use another higher order component and do:

<S_CODE_TOKEN>

You can basically do anything you want with higher order components but I thought that maybe baking that functionality into `connect()` out of the box would leave room for anybody to write componentEnhancers, be consistent with Redux, and bend `connect()`'s functionality to do whatever you want, more so than `advancedConnect()`.

So should we leave it for other developers to create higher order components or should we bake in functionality to enhance `connect()` out of the box. Thoughts?
",migueloller,2016-07-01 23:05:41
407,2016-06-26 23:09:34,"At the moment I'd say that that would be going too far to be an acceptable set of changes.  The current PR is being looked at because it's been made API-compatible with the existing version of `connect()`, and Dan actually asked that the underlying ""advanced"" function in the new implementation not be exposed for now.  Adding anything GraphQL specific would certainly be out of the picture for now.  Adding additional extension hooks _may_ be considerable down the road, but not likely to happen soon.

I'd say HoCs are your best bet for now.
",markerikson,2016-07-01 23:05:41
407,2016-06-26 23:22:10,"I apologize if I wasn't clear but I wasn't suggesting that we add GraphQL specific functionality, but more so adding the ability to add an extra argument to `connect()` that would allow other developers to extend `connect()`'s functionality. This wouldn't be a breaking change since it would be added either as an option or as the last argument.

It would also allow for `advancedConnect()` to be written separately (maybe as a separate package) and passed in as an option without having to completely rewrite `connect()` as it is now. This change would be 100% backwards-compatible.

People that want to opt-in to this new argument would write:

<S_CODE_TOKEN>

or leave the option out if they want to.

This would allow `advancedConnect()` to be used like so:

<S_CODE_TOKEN>

The change in `react-redux` code would be minimal to allow for this, it would be similar to the change in Redux that introduced store enhancers.

Correct me if I'm wrong, but the best option would be to minimally change the current code instead of an entire rewrite? Doing something like this would require minimal source code change but allow complete customization.

**EDIT**: I'm going to do a quick implementation to show what I mean and will post here.
",migueloller,2016-07-01 23:05:41
407,2016-06-26 23:34:47,"Yeah, that's my point.  We've already got several overloads in React Redux's API (like being able to pass an object full of functions as the `mapDispatch` argument), and based on the comments Dan has made already, I don't foresee any more specific API changes happening any time soon.  And, if you want an example of how a ""small"" change can have some pretty unforeseen consequences and incompatibilities, read through https://github.com/reactjs/redux/pull/1813.

Like I said, the only reason #416 is being considered right now is that despite the major internal changes, the external API is staying the same, and the benchmarks are indicating some pretty major potential performance improvements.  Also note Dan's comments  at https://github.com/reactjs/react-redux/pull/416#issuecomment-228411606 and https://github.com/reactjs/redux/pull/1813#issuecomment-226916185 regarding new/different APIs.
",markerikson,2016-07-01 23:05:41
407,2016-06-27 00:21:37,"Sounds good. And thanks for the prompt replies @markerikson!

Here's the change https://github.com/migueloller/react-redux/commit/1c8d940b945d519f32011e1359bd65c42e5f83b1

All tests are passing. Just wanted to get some comments on what people thought.

The change now allows for enhancing connect (if you want to) in any way you want, allowing for what I mentioned above.

If this ends up being ignored in the end that's ok. Just thought that this would be a good improvement. 😁
",migueloller,2016-07-01 23:05:41
407,2016-06-27 01:44:26,"I forgot to mention that the arguments of `connect()` aren't changing, the changes just allow for a new option to be passed in. This should make it compatible with anything in the ecosystem.
",migueloller,2016-07-01 23:05:41
407,2016-06-27 23:26:45,"@migueloller If #416 gets accepted, then you will probably be able to create your desired API by wrapping the new `connectAdvanced` method with your own custom connect method, without needing to modify the standard `connect`. That's what I'm trying to accomplish in my own project... I have my own `connectToStore` method that calls `connectAdvanced` while providing a significantly different API than `connect`.
",jimbolla,2016-07-01 23:05:41
407,2016-06-28 04:36:05,"@jimbolla That would be an option but it's not much different from wrapping `connect` because the library would still have `react-redux` as a dependency. It would be nice to simply export a function that takes in `connect` as a parameter and outputs a new version of connect. This is how store enhancers work (Redux libraries don't normally have Redux as a dependency).

It doesn't look like there is interest to mirror store enhancer functionality for `react-redux`, though.

**EDIT**: It's probably worth mentioning that all the benefits that you get from `advancedConnect` can be achieved with my implementation simply by doing:

<S_CODE_TOKEN>
",migueloller,2016-07-01 23:05:41
407,2016-07-01 23:05:36,"I'm gonna close this now that #416 exists.
",jimbolla,2016-07-01 23:05:41
406,2016-06-16 04:53:50,"I have used Redux for many projects, and I use React daily.  I was asked a great question today: ""why call it mapStateToProps -- wouldn't that be easy to confuse with a React component's `state`?"". Why not call it something else?

I was hoping someone would have thoughts. Thanks! :)
",sdtsui,2016-06-16 15:46:55
406,2016-06-16 15:46:55,"Did some digging through the issue archives and commit logs.  Looks like the argument name was changed from ""select"" to ""mapStateToProps"" roughly around August 7, 2015, in commit 3079d0045f8ced7c79db9b255172295d2294ae51, but I'm having trouble finding specific discussion around that.  

Beyond that, given that Redux is explicitly a ""state management library"", and `connect()` is supposed to hook together your Redux store to your React components, the intent is hopefully clear.  Also, the word ""state"" is sorta overloaded contextually anyway in that it means ""the current values / variables / data that make up your application"", so the same point could be made in regards to React.Component.state as well.
",markerikson,2016-06-16 15:46:55
406,2016-06-16 16:48:12,"Redux store has a getState method. mapStateToProps maps this state to some props that should be provided to the connected component.

Same thing for dispatch property and mapDispatchToProps.

The state name is overloaded but you can see that the naming is derived from redux terminology itself.
",gnoff,2016-06-16 15:46:55
405,2016-06-15 01:41:17,"I wasn't quite happy with the API for `connect()` so I went about recreating my own. A few design goals:
- Simpler API. Replace the 3 functions with 1, by having access to state, props, and dispatch all at once.
- Make the API [reselect](https://github.com/reactjs/reselect) friendly, and use it to cache results
- Be able to partially apply state/props as args of an action creator

An example of starting with no `reselect` selectors and building up from there:

Version 1: this works, but the onLoad arrow function will be recreated everytime props/state change:

<S_CODE_TOKEN>

Version 2: uses reselect's `createSelector` to solve the function issue, but gets verbose:

<S_CODE_TOKEN>

Version 3: this version users createStructuedSelector to make it less verbose:

<S_CODE_TOKEN>

Version 4: utilize `dispatchable` to make the actionCreator call less verbose:

<S_CODE_TOKEN>

Version 5: make createStructuredSelector implicit if a plain object is returned instead of a function

<S_CODE_TOKEN>

[Current source with some explanatory comments is here](https://gist.github.com/jimbolla/e836cef98d7214fd2ce9627a47bb0943)

The main exports are `connectToStore(selectorFactory, options)` and `dispatchable(actionCreator, ...selectorsToPartiallyApply)`. `connectToStore` is the variant of react-redux's `connect()` while `dispatchable` wraps action creators in a selector that binds it to dispatch.

The signature for selectorFactory is `() => (state, props, dispatch) => {newProps}`. Any `reselect` selectors, including those created by `dispatchable` created inside the factory function are scoped to that component instance.

`selectorFactory` has a shorthand that I use 99% of the time: `() => {inputSelectors}`, where `inputSelectors` is passed to [createStructuredSelector](https://github.com/reactjs/reselect#createstructuredselectorinputselectors-selectorcreator--createselector) to create the selector.

I think it's coming along nicely, although I don't yet have hot reloading support (I'm not sure what that will entail) or any argument validation. Any constructive criticism would be welcome.
",jimbolla,2016-06-16 22:52:05
405,2016-06-15 02:18:20,"You've clearly put a bunch of work into this, but to be honest I'm still not really clear on what your issues are with the standard `connect()` function.  What specific use cases were you having trouble with?  How is this implementation more ""Reselect-friendly"" than the current version?

The one thing I'm grasping so far is that you want to state available when binding action creators, but as far as I've seen that's a pretty niche use case, and `connect()` supports that through use of `mergeProps()`, as you've seen.
",markerikson,2016-06-16 22:52:05
405,2016-06-15 15:03:33,"@markerikson In addition to what you mentioned, the other issue I started running into was when I was using createSelector in mapStateToProps, mapDispatchToProps and mergeProps, because they each have different parameters, I had to organize my selectors by which method they aligned with. (Using createSelector to memoize my functions is useful for partially applying args from state/props, so that a new function isn't created every time an unrelated prop is changed.) It also looks like mergeProps doesn't have the same ""advanced"" option like the other two, so any selectors I want to use in there have to be singletons instead of being bound to the lifetime of the component instance.

So I started looking at the source for connect() to see if it would be possible to modify it to just supply dispatch as a 3rd param to mapStateToProps, but I found the source for connect() to be very difficult to mentally parse. There's a lot of magic in there to track all the various moving parts. I don't think I could make the changes I'd like to connect() without breaking something. There's 10 ""cache"" fields on the component and another 5 temp variables in the render() method mixed inside a lot of if/else blocks.

That's why I decided to create my own implementation using reselect to track all those moving parts instead. 
",jimbolla,2016-06-16 22:52:05
405,2016-06-15 15:57:27,"Fair enough.  

The implementation of `connect()` has certainly grown rather complex.  It's trying to do caching and other optimizations, allow per-instance selector memoization, etc.  I think there's some related issues that are trying to rework things, like #269 , #368 , and #373.  But, that said, it's the public API we've got, and it does cover the vast majority of use cases.  Given that you've spent some time looking into this, I'd be a bit curious if you have any suggestions for improvements to the current implementation that would maintain the public API.

Beyond that, I'm not seeing anything specifically actionable about this issue.  It's not a bug or feature request against React Redux itself, and since it's basically a one-off implementation for your own use case, I'm not quite sure what feedback you're looking for.  I'll leave the issue open for the moment just so it's a bit more visible if someone's browsing the repo issues list, but will probably close soon if there's no further discussion.
",markerikson,2016-06-16 22:52:05
405,2016-06-15 17:15:06,"I just whipped this up and haven't tested it at all, but this could be wrapper around my `connectToStore` that gives a compatible API to the current `connect` (except for the [advanced scenarios](https://github.com/reactjs/react-redux/blob/master/docs/api.md#arguments) for `mapStateToProps` and `mapDispatchToProps`. I'd say people that need those, probably just use `connectToStore` directly.

<S_CODE_TOKEN>

I still need to hoist statics, support hot reloading, and add some argument validation; but at that point I think I'd have feature parity with the existing implementation.

I'll need a moment to look at those linked issues to see how they'd impact my implementation. I agree there's nothing directly actionable here for react-redux, so the issue could be closed, but unfortunately I don't know of a more appropriate place to have this discussion. I would love to get more eyeballs on this from devs that have different requirements than my own.
",jimbolla,2016-06-16 22:52:05
405,2016-06-15 17:20:54,"Yeah, I do follow the reasoning for posting this here.  Perhaps raise the question over in Reactiflux, just to see if anyone else has feedback?
",markerikson,2016-06-16 22:52:05
405,2016-06-16 03:28:17,"@markerikson So I wrote a version of `connect()` that builds a selector from its args and passes along to `connectToStore()`. All react-redux tests pass with 1 breaking change for when `mapStateToProps` / `mapDispatchToProps` are factory methods and a couple tweaks to some spy counts because my implementation does things slightly different behind the scenes.

[Fork is here](https://github.com/jimbolla/react-redux/tree/connect-rewrite/)
",jimbolla,2016-06-16 22:52:05
404,2016-06-10 13:01:06,"Greetings,

**TL;DR** : How to prevent the `connect`'s `select` parameter function to be called on page navigation animation ?

I've been using react with redux and react-router for a while now and I've always faced an issue that is a bit annoying.

Let's say I have an `article` reducer in my store that is the article the user is currently viewing. So it's basically a simple json object with author name, content, title, etc.

So I make a High Order Component to display the article from the store (given via react-redux's `connect` function). The render method looks like :

<S_CODE_TOKEN>

I use a navigation not from the URL (memory history) so it is impossible for the user to display the page when `article` is null in the store.

I use `ReactCSSTransitionGroup` to add an animation on page navigation. When I click on the ""Go back"" button, it launches a page transition and sets the `article` to null in the store. 

So, for the duration of my navigation animation, `this.props.article` is null and I get errors from my render method.

How to prevent that? The most obvious solution I see would be to prevent the `select` function to be called during transition, so that the component can't be updated on transition, but how can I achieve that?
",SebT,2016-06-10 16:35:37
404,2016-06-10 16:35:37,"This is a usage question, and should be asked on Stack Overflow instead.

That said, the basic answer would be to either have your `mapState` function return an actual value instead of null, or update your rendering logic to either provide a default value, or just check if `article` is null and not render those fields.
",markerikson,2016-06-10 16:35:37
403,2016-06-08 21:34:13,"I've found the syntax to be less awkward, especially when using `reselect`, to connect once to get access to `dispatch`, then connect a second time to do state stuff and memoize, vs. having to define a `mergeProps` function. I'm just concerned that double-connecting is going to somehow cause me problems, or that I'm losing some crucial optimization that `connect()` would be doing if I were doing it with a single `connect`.

For example, I have this:

<S_CODE_TOKEN>
",jimbolla,2016-06-11 13:36:31
403,2016-06-08 22:20:54,"Uh... semi-stupid question: why are you needing to use `mergeProps`?   That function is pretty rarely used.  Do you have a specific use case you're trying to work with?
",markerikson,2016-06-11 13:36:31
403,2016-06-08 22:49:37,"@markerikson Well basically, because what action gets returned to the component needs to use state. I don't have access to dispatch in `mapStateToProps` to fully bind the method, and I don't have access to state in `mapDispatchToProps` to do so, so I have to do it after both have run, either in `mergeProps`, or using recompose's `withProps`. In an ideal case, I'd have access to state, dispatch, and ownProps in a single pass.

In this case, the state is the current user's authorization. The result is either the real action, or nothing. Our app has role based authentication (details stored in state.auth) where employees in the admin role can can perform write actions from a screen where other users can only get a readonly version. The components key off whether the event handler functions are null or not to make that determination.
",jimbolla,2016-06-11 13:36:31
403,2016-06-08 23:50:34,"I'm think maybe code that uses react+redux+reselect could use a simpler implementation of `connect`. Since reselect is good and reconciling merging changes together, give the calling code the responsibility to memoize its results on state/props changes. I might mess around with implementing this idea.
",jimbolla,2016-06-11 13:36:31
403,2016-06-09 00:52:50,"Hmm.  A couple thoughts:
- I'm not really following exactly why that ""double-connect"" is necessary, as such.  
  I get that you want state available in `mapDispatch`, and technically `mergeProps` _is_ the escape hatch that allow for that, but why is the ""double-connect"" needed?  Feels like there's got to be some other way to do what you want.
- Is there any reason why the component can't call the action creator with the necessary props, rather than having those pre-bound?
- Seems kinda like what you really need is a Higher-Order Component that is specialized for handling auth stuff somehow.  You might want to watch @acdlite's talk from React Europe: https://youtu.be/zD_judE-bXk.  You're _sorta_ doing that now, but I think it'd be cleaner if you separate that part out.
",markerikson,2016-06-11 13:36:31
403,2016-06-09 01:43:22,"The double connect is the alternative to using `mergeProps`, because then I have access to dispatch during `mapStateToProps` and I can do everything in there with one composed `createSelector`. I can do what I need to do with either double-connect, or using `mergeProps`. Double-connect makes for slightly cleaner code, which is why I asked if it will cause any issues. Looking at the source for `connect`, I'm not seeing any reason why, but that's not the easiest code to grok.

Having the component call the method with the parameters prebound avoids extra method create in the component, ex: `onClick={() => props.onAction(props.param)` vs `onClick={props.onAction}`. The former will trigger the `react/jsx-no-bind` eslint rule, which can be solved either by moving the binding into my enhancer or turning my functional component into a full class.
",jimbolla,2016-06-11 13:36:31
403,2016-06-09 04:43:51,"I'm working on an alternate version of `connect` that complements use with `reselect` library. Since `reselect` handles all the heavy lifting of caching changes, `connect`'s implementation is much simpler. [Here's a gist with a snapshot of my work in progress.](https://gist.github.com/jimbolla/4c880ab13089610779259014da763b49). Currently no hotloading support or parameter validation of any kind, but I think the main use case is working correctly.
",jimbolla,2016-06-11 13:36:31
403,2016-06-09 04:54:47,"Hmm.  What's the actual meaningful difference with that approach?
",markerikson,2016-06-11 13:36:31
403,2016-06-09 16:36:01,"@jimbolla Your use of dispatch in this way does feel a bit awkward to me but I can see why having dispatch available in the selector can be useful if you want to keep all this kind of thing in selectors exclusively.

`connect` doesn't add much overhead beyond what any HOC would if you aren't subscribing to anything so the double connect isn't really an issue per se. If you want to make your intent more clear to others I might suggest doing something like this though

<S_CODE_TOKEN>

this way you can swap out the implementation for `provideDispatch` in the future without finding every place you happened to do the double connect.
",gnoff,2016-06-11 13:36:31
403,2016-06-10 22:11:50,"@gnoff That's a good idea. If I don't end up using my own implementation of `connect` I would do that.

@markerikson Partly stylistic and syntactical preference, partly being able to leverage the abilities of `reselect`. It's still in flux (no pun intended), but my current syntax looks like this for a simple use case:

<S_CODE_TOKEN>

Now I have both state and bound action creators available so I can build my props object in a single pass.  
",jimbolla,2016-06-11 13:36:31
402,2016-06-07 09:32:30,"I encounter synchronous props that is mapped from state after updating props with dispatch issue. 

In JSX, when I change select dropdown, then trigger `handleChange` method. In `handleChange`, it execute `selectLayoutAction` action, dispatch the action, update `selectLayout` property of state, after that I need to use the updated `selectLayout` property in next line for updating component state, but I can't get the new `selectLayout` value, I will get the old selectLayout...How I get the newest selectLayout value which was updated by dispatch action?

https://gist.github.com/sevenLee/7d229a9e5d8e82b1d5e12040f3ae2ee8

<S_CODE_TOKEN>
",sevenLee,2016-06-07 15:43:16
402,2016-06-07 15:43:16,"Hi! This is a usage question, so it would be much better to ask on StackOverflow. This is just a bug tracker, it’s not meant to be a place for Q&A because answers would get lost here. I’ll close but feel free to post a link to your StackOverflow question. Thanks!
",gaearon,2016-06-07 15:43:16
402,2016-06-07 16:31:19,"Sorry for that, thanks for your reminder. I already post on StackOverflow, If anybody have free time, please check it, thank you!
http://stackoverflow.com/questions/37684631/get-the-latest-props-value-from-state-after-updating-props-with-dispatch-right-a
",sevenLee,2016-06-07 15:43:16
401,2016-06-06 03:59:42,"Hi everyone,

In my react app, multiple view shared few state, but each view (state) is complex and have multiple sub-components. Therefore, i also need redux to manage ui state.

I want to call combineReducer in sub-components' constructor to load reducer dynamically and also can have a chance to delete some parts of state in destroy callback via reducer if needed. To use redux with redux-ignore in sub-components is also good for me.

I found store can be get in componentDidMount from [issue](https://github.com/reactjs/redux/issues/239), but i think it's more make sense for me to combine reducer in constructor.

Not very sure my opinion is correct or not.
",JIM-CHEN,2016-06-06 04:13:13
401,2016-06-06 04:13:13,"Hi.  First off, this is really a usage question rather than a bug or issue with Redux.  As such, it should be asked over on Stack Overflow.  I'm going to close this, but if you do post a Stack Overflow question, go ahead and paste the link in here.

That said, there's a number of libraries which can help you manage per-component state in your Redux store.  See my [Redux addons catalog](https://github.com/markerikson/redux-ecosystem-links) for some possibilities, particularly the [Local/Component State](https://github.com/markerikson/redux-ecosystem-links/blob/master/component-state.md) and [Reducer](https://github.com/markerikson/redux-ecosystem-links/blob/master/reducers.md) pages.
",markerikson,2016-06-06 04:13:13
401,2016-06-06 06:02:47,"Thank you very much!
",JIM-CHEN,2016-06-06 04:13:13
400,2016-06-03 21:25:03,"I want my component know if some library is already loaded. To know that from any context i connect it to the ""library"" reducer of my store. The problem is that i pass a configuration object (this.props.dataObject) to my component from the parent where the component has been called. This prop changes and ""componentWillUpdate"" method won't fire. If i remove the connect from the component it works as expected. I'm missing something here?

<S_CODE_TOKEN>
",jonathancalb,2016-06-03 22:50:46
400,2016-06-03 22:50:46,"This qualifies as a ""usage"" question, which should be asked on Stack Overflow.  I see that you did already post the question there, so I'll link that and close this.

http://stackoverflow.com/questions/37623628/react-componentdidupdate-method-wont-fire-on-inherted-props-change-if-connected
",markerikson,2016-06-03 22:50:46
399,2016-06-03 18:48:13,"Hi Guys,
I've a bit of a situation, when using enzyme for rendering React Components for my unit tests, I cannot pass over the context when I am exporting the component using `connect`.

Let me show you what I mean:

Component: 

<S_CODE_TOKEN>

Test:

<S_CODE_TOKEN>

This WORKS!

BUT:

Component:

<S_CODE_TOKEN>

Test:

<S_CODE_TOKEN>

Spits out: `Warning: Failed Context Types: Required context `a` was not specified in `TestPage``

Help... How do I pass on my context through Redux's connect function?
",5punk,2016-06-07 15:44:47
399,2016-06-07 15:44:47,"Hi! This is a usage question, so it would be much better to ask on StackOverflow. This is just a bug tracker, it’s not meant to be a place for Q&A because answers would get lost here. I’ll close but feel free to post a link to your StackOverflow question. Thanks!
",gaearon,2016-06-07 15:44:47
398,2016-06-02 08:26:38,"As title suggests, when mapStateToProps is using both state and ownProps to select chunk of redux state, when store has some state updated, but the particular chunk of state which is returned by mapStateToProps has not been changed, connect produces wasteful render attempt. This is specifically bad in places when there is thousands of components wrapped with connect, or there is just couple of such components, store is updated quite frequently, but state of wrapped components is not changed. Issue is not reproduced when mapStateToProps is not using ownProps.

Performance degradation is seen in the task manager and in JS profiler, and becomes a visually noticeable problem on documents with complex DOM in Edge and Firefox. Measurements from React.addons.perf.printWasted show that on 10 seconds intervals the wasteful operations can take more than 1 second, the wasteful operations are happening inside Connect(Component).

Looking into profiling using Chrome profiler, a lot of time is spent inside ReactComponent.setState, looking into source code of connect.js, the problem is apparently in the handleChange.js, it does an unconditional this.setState when this.doStatePropsDependOnOwnProps is true. Perhaps an option to customize this behavior, e.g. by introducing support for custom comparer would be really nice.

Small sample project with reproduction has been set in https://github.com/vlan-saxo/react-redux-bug, use `npm install`, `npm start` and go to `http://localhost:8080/webpack-dev-server/`
",ghost,2016-08-14 15:15:47
398,2016-06-21 14:10:04,"I ran into the same issue while going through react perftools results. There probably is a valid reason for the doStatePropsDependOnOwnProps check, but I think the docs should be more clear about this limitation.

Anyway, the workaround in my case was to use a custom mergeProps function, eg. changing from

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

Looks ugly, but the perf issue is gone.
",larpo,2016-08-14 15:15:47
398,2016-06-21 14:24:21,"I think this will be addressed by #407. I'm rewriting the Connect component to only fire setState() if the final props have changed. I'm seeing HUGE performance gains.
",jimbolla,2016-08-14 15:15:47
398,2016-06-21 15:50:38,"@jimbolla : yeah, this would be another good before/after comparison project.
",markerikson,2016-08-14 15:15:47
398,2016-06-21 21:53:03,"> This is specifically bad in places when there is thousands of components wrapped with connect

Note that this is usually not a great idea by itself; something like https://bvaughn.github.io/react-virtualized/ is much better for performance.
",gaearon,2016-08-14 15:15:47
398,2016-06-21 22:07:39,"True.  That said, not every example of ""lots of connected items"" would fall right into the ""single list"" use case.

@jimbolla , it'd really be nice to actually get some hard numbers on just what the overhead is from the current `connect()` implementation, and how many connected components is ""too much"".
",markerikson,2016-08-14 15:15:47
398,2016-06-21 23:14:42,"@markerikson My [latest comment on #407](https://github.com/reactjs/react-redux/issues/407#issuecomment-227596718) has some insight into that. I have 331 connected components running. Current implementation is getting single digit FPS, my version is ""good enough for console gamers."" hehehe. I don't know if 1000s will ever be feasible without some radical unforeseeable change. But certainly a few dozen at once should be doable.
",jimbolla,2016-08-14 15:15:47
398,2016-06-21 23:35:32,"Cool.  Now, haven't looked at the source for any of these benchmarks, but I know that the 10K list item example in the ""High Performance Redux"" slides (as inspired by the MobX ""Redux TodoMVC"" repo) goes from having 1 connected list and being basically unusable, to having 1 connected list + 10K connected list items and vastly better.  So, number of connections is a factor, also presumably frequency of actions, but I'd really love to get a better idea what that curve looks like.
",markerikson,2016-08-14 15:15:47
398,2016-06-21 23:59:17,"I guess it depends on how often it's dispatching actions. The project I'm using is doing

<S_CODE_TOKEN>

to simulate a stock ticker, so that would be 1000/13 + 1000/21 + 1000/24 + 1000/55 = 184.39 actions dispatched per second. But if your actions are more based on user interactions then you won't be  doing anything near that frequency.
",jimbolla,2016-08-14 15:15:47
398,2016-06-22 00:11:41,"That.... seems like an acceptable stress test :)
",markerikson,2016-08-14 15:15:47
398,2016-06-22 13:21:35,"@jimbolla thanks for all the commitment to this! :+1: for the stress test metrics! You are 2 or 3 steps ahead of me, it seems, so I'm trying to do my best to keep up with the posts here :)

@markerikson Thanks for clarifying what that commented-out code does--I got that impression but wasn't sure if that was really the reason. Now, knowing that :), it was pretty easy to spot the implications (without writing more exhaustive test cases). Actually, on that note, . So...I ask this... @markerikson @jimbolla what should I do to help you guys?? haha. I am on the fence here. I envision myself slowly getting the to the point of wanting to rewrite connect like @jimbolla, but I also feel like that's too big a shift if a solution to performance can come from handling an edge case or two--perhaps a small fix first, a bigger rewrite second, with more tests in between?

A unit test can be written against the current code to expose the case that leads to the performance problems. It may be a few days until I can get back to this, but if I can sneak something useful in, I'll do my best!
",jonkelling,2016-08-14 15:15:47
398,2016-06-22 14:00:16,"@jonkelling If you can write any new tests, that would be great. If you create them in a fork, I can pull  into my fork. I'm working on the ""cover letter"" that will go with the eventual PR for #407, hopefully done by this weekend.
",jimbolla,2016-08-14 15:15:47
398,2016-06-30 13:25:07,"This issue is problematic when `ownProps` is just used once for the lifetime of the component. For example, when you a have a huge list such as the 10k list exemple, all items are connected and depends on their `ownProps` to select the correct item from store : 

<S_CODE_TOKEN>

For any item modified, **all the connected** component will rerender due to this line in [handleChange](https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L250) : 

`if (pure && !this.doStatePropsDependOnOwnProps) { [...] } this.hasStoreStateChanged = true;`

Which literally means ""if the connected component depends on ownProps, we don't even check for stateProps changes and always set the hasStoreStateChanged to true"". Resulting in wasted time in all `<Connect(YourComponentThatDependsOnItsOwnProps)>`.

A simple workaround is to use the notion of initial props, as stated in the 10k list example to get ride of the props dependency. It's safe because these kind of props are never intended to change. `mapStateToProps` now looks like this : 

<S_CODE_TOKEN>
",PCreations,2016-08-14 15:15:47
398,2016-06-30 13:29:01,"#416 will fix this. If `getItem` returns the same value as previous call, Connect will skip unnecessary re-renders.
",jimbolla,2016-08-14 15:15:47
398,2016-07-08 18:12:32,"Correct me if I didn't understand this correctly.

In current `connect` we have this `if` statement:

<S_CODE_TOKEN>

This means any component depends on `ownProps` will always be re-rendered if **any part of the state** is changed. Why do we skip shallow comparing in this case?
",mondaychen,2016-08-14 15:15:47
398,2016-07-09 19:02:12,"Exactly, and I don't know why either...
",PCreations,2016-08-14 15:15:47
397,2016-06-01 10:27:11,"**## I don't know how to solve the bug....**

**This is my code:** 

import { connect } from 'react-redux'
import { setVisibilityFilter } from '../actions'
import { Link } from '../components/Link'

const mapStateToProps = (state, ownProps) => {
  return {
    active: ownProps.filter === state.visibilityFilter
  }
}

const mapDispatchToProps = (dispatch, ownProps) => {
  return {
    onClick: () => {
      dispatch(setVisibilityFilter(ownProps.filter))
    }
  }
}

const FilterLink = connect(
  mapStateToProps,
  mapDispatchToProps
)(Link)

export default FilterLink
",kissyRui,2016-06-01 10:42:37
397,2016-06-01 10:42:37,"Please use Stack Overflow for support questions. Github Issues are for the bugs in the library not your code.
",epeli,2016-06-01 10:42:37
397,2016-06-01 11:03:18,"Most likely this is the issue:

<S_CODE_TOKEN>

You are doing a _named import_.
This won’t work if `Link` has a _default export_.

If this is the problem, you can change the import to be the _default import_ (`import Link` rather than `import { Link }`).
",gaearon,2016-06-01 10:42:37
397,2016-06-02 02:11:47,"@gaearon You are right！
Last night，I solved the problem！
I was so careless... 
Thank you very much!
",kissyRui,2016-06-01 10:42:37
396,2016-05-29 16:12:41,"Is it possible with the current API to disconnect and reconnect a component at the user convenience?
Would a disconnect function be helpful?

Let me show a case where it would help:

In an SPA I keep several ""Pages"" cached. That means they are still mounted, but hidden.

By doing that, it is very quick to re-display Pages that have been already visited since only a few updates are necessary. And the virtual dom does its job!

Some of these Pages consist of large lists of redux-connected Items. These list Items are not rendered when not visible (because of shouldComponentUpdate). But after a few Pages are cached I end up having thousands of Items and the App gets slower.

The problem is that all Item wrappers (connect containers) are still being called for each item on every action. I end up having thousands of calls to each wrapped component. As I said no extra render happens but these thousands of calls make the app slow.

It would be nice if I could disconnect certain Item components (the ones that are not visible) so that they are not even called somehow. And to reconnect them later when the Page is going to be displayed again (I used to unmount / remount the whole but re-rendering was worse).

I tried to find a way using redux-batched-subscribe but I believe that lib serves a different purpose.

Are there any plans for a disconnect function or any way to achieve what I proposed?

Thanks!
",landabaso,2016-05-29 16:18:59
396,2016-05-29 16:18:59,"Generally my recommendation would be to just (un)mount them rather than keeping them in memory. If this is not feasible, I suggest you to not use `connect()` there, and instead manually grab the `store` from context, and call `store.subscribe()` and the `unsubscribe` function it returns whenever you see fit.

Even as a feature request, this doesn’t belong to the Redux repo because Redux store API already lets you unsubscribe at any point of time. So I’ll close this as non-actionable here.
",gaearon,2016-05-29 16:18:59
396,2016-05-30 06:51:47,"I get the point @gaearon.

I had been playing with the idea of exposing a way to disconnect.

I got the idea while making some tests by doing this from my connected container:

<S_CODE_TOKEN>

Of course the code above uses undocumented APIs and there are many things that could go wrong.

Also, there's no way to reconnect later. That's why I thought that it might be a nice addition to expose somehow a (dis/re)connect / (un/re)subscribe methods.

I guess I'll need to create my own connect wrapper or simply call (un)subscribe as you suggested.

Thanks!
",landabaso,2016-05-29 16:18:59
396,2016-05-30 08:09:41,"In fact, I just learned that you can (re)subscribe by doing:

`this._reactInternalInstance._currentElement._owner._instance.trySubscribe()`

And I guess these are the couple of paired functions that should be called to unsubscribe:

`this._reactInternalInstance._currentElement._owner._instance.tryUnsubscribe()`
`this._reactInternalInstance._currentElement._owner._instance.clearCache() //Not sure about this one`

As I said, this is undocumented (and some issues may arise). Just wanted to share these ideas in case it also help others.
",landabaso,2016-05-29 16:18:59
396,2016-05-30 12:56:29,"Yea, this can break any time.
Also sorry about 

> Even as a feature request, this doesn’t belong to the Redux repo because Redux store API already lets you unsubscribe at any point of time. So I’ll close this as non-actionable here.

I just realized you're in the right repo. (Notification overload on my side :-). 

As I said it’s unlikely we add explicit support for it and you're better off using store directly. 
",gaearon,2016-05-29 16:18:59
396,2016-05-30 15:14:06,"Thanks @gaearon!

I decided NOT TO use the approach of (un)subscribe anyway since it also makes the App slow.

I'll explain it in case some other people read this issue in the future:

I worked a bit more on the idea. I passed a prop from the parent though intermediate components to the final subscribed list Items: `pauseSubscriptions = true/false`. Then the list items unsubscribed and resubscribed when it's parent Page was hidden or shown.

The problem is that passing that prop triggers a chain of renders which would not have happened without it. I guess there are ways to directly (un)subscribe the children items not passing props but I have the feeling I was over-engineering the problem.

I'll try different approaches to avoid having thousands of connected components. Maybe connecting only from the parent and passing props to the children. This will make the program a bit verbose (lots of props-passing) but may do the trick!

Thanks again @gaeron for such great tools and support!
",landabaso,2016-05-29 16:18:59
396,2016-05-30 17:02:10,"Also check out react-virtualized to avoid thousands of components in the first place. 
",gaearon,2016-05-29 16:18:59
395,2016-05-28 11:40:32,"I'm using bunch of custom HOCs with `connect()` like

<S_CODE_TOKEN>

This causes React devtools to be polluted with useless `Connect(Connect(Connect(Something)))` style components. This would allow to use more meaningful names.
",epeli,2016-08-14 15:20:51
395,2016-05-28 15:24:56,"I think I’d rather not add a separate API for this.
You can reassign it manually, so I think this would work best.

<S_CODE_TOKEN>
",gaearon,2016-08-14 15:20:51
395,2016-05-29 09:15:10,"I know but it gets really cumbersome if I want to have the original name in it:

<S_CODE_TOKEN>

Also I need to the implement the `getDisplayName` or add dependency which implements it.
",epeli,2016-08-14 15:20:51
395,2016-05-29 12:57:40,"OK. Let’s rename it to `displayName`?
",gaearon,2016-08-14 15:20:51
395,2016-05-29 14:20:40,"> OK. Let’s rename it to displayName?

Yeah. It's more consistent with other APIs. 
",epeli,2016-08-14 15:20:51
395,2016-05-30 06:26:54,"PR updated. Also added a simple test case for it.
",epeli,2016-08-14 15:20:51
395,2016-06-15 17:05:25,"Am I the only one that thinks that the `Connect` wrapper should just leverage the same `displayName` as the original wrapped component?

> @ianobermiller (FormidableLabs/radium#271 on [Jul 17, 2015](https://github.com/FormidableLabs/radium/issues/271#issuecomment-122227566))
> Can you imagine if every decorator did the same thing? `Radium(Relay(autobound(Button)))` 👎 
",TigerC10,2016-08-14 15:20:51
395,2016-08-14 15:20:51,"Superseded by #416
",timdorr,2016-08-14 15:20:51
394,2016-05-27 09:16:19,"as question title
",alex306314,2016-05-27 14:33:09
394,2016-05-27 14:33:08,"Hi!

Is there any particular reason you filed this issue in `react-redux` repo?
It has no relation to React Native or React itself.

If you have problems updating to React Native 0.26, I think it is a good idea to open [React 0.26 release notes](https://github.com/facebook/react-native/releases/tag/v0.26.0) since that’s how you can find out what changed. The release notes on that page say:

> React API must be now required from react package (previously a warning on 0.25)

So you need to change `import React from 'react-native'` to `import React from 'react'`.

Anyway, this is an issue tracker for an entirely unrelated library, so I’m closing, and won’t be able to help further here. Please feel free to ask on StackOverflow if you have further questions! Cheers.
",gaearon,2016-05-27 14:33:09
393,2016-05-26 18:46:28,"No idea why this is happening. Any clues?

<S_CODE_TOKEN>

The function of the static method is probably irrelevant, but it tells rn to use that custom view for the navigation bar: https://github.com/facebook/react-native/blob/master/Libraries/CustomComponents/Navigator/Navigator.js#L1120

This works as expected:

<S_CODE_TOKEN>

And without inheritance, this works as expected:

<S_CODE_TOKEN>

But with inheritance, this doesn't work – it's as if there was no static method on parent.

<S_CODE_TOKEN>

Is this a redux issue?
",braco,2016-05-26 18:51:13
393,2016-05-26 18:51:13,"Only “own” static methods are proxied for simplicity. This is intentional.
Please don’t use inheritance with React. It’s never necessary with it.
https://github.com/reactjs/react-redux/issues/383#issuecomment-220020842
",gaearon,2016-05-26 18:51:13
393,2016-05-26 19:01:19,"Thanks @gearon. How would that work with a static method on the parent container, though? static renderNavigationBar() still wouldn't get picked up with the technique you linked to:

<S_CODE_TOKEN>
",braco,2016-05-26 18:51:13
393,2016-05-26 19:03:05,"I don’t fully understand what you’re trying to do. Maybe if you could post a more complete example to StackOverflow, I could answer!
",gaearon,2016-05-26 18:51:13
393,2016-05-26 19:43:49,"For people searching:

Foo1 needs

<S_CODE_TOKEN>

This method is reused across many classes. Inheriting from a parent class doesn't work with redux apparently.

I guess the following options would work

<S_CODE_TOKEN>

<S_CODE_TOKEN>

or use es7 decorators in the future?

<S_CODE_TOKEN>

Which is unfortunate for something this simple
",braco,2016-05-26 18:51:13
393,2016-05-26 19:56:31,"@braco I’d like to help you but I need you to help me first. Can you please publish a complete example showing why you want it to be a static method, and how it gets used? It is not obvious.

It’s not that something “doesn’t work in Redux”, it’s that the solution is likely very simple, but since I don’t understand what you’re building, I can’t help you.
",gaearon,2016-05-26 18:51:13
393,2016-05-26 19:58:35,"I understand now that the static method gets used by React Native Navigator. But I don’t understand why you want `Foo1` to extend `Bar`, and what `Foo2` is. A complete specific example would help.
",gaearon,2016-05-26 18:51:13
393,2016-05-28 15:25:40,"**TL;DR:** Don't extend anything besides default `React.Component` in your components if you plan on connecting them to Redux.

I ran across this issue this morning (or something similar). I'm using `react-native-router-flux` and wanted to add a custom navbar to a bunch of scenes. I decided to abstract out the `static renderNavigationBar(props)` to a separate class like this:

<S_CODE_TOKEN>

and use that in all of my classes like this:

<S_CODE_TOKEN>

This works great until you attempt to connect the components to redux via `connect(...)` because it seems the connect method is returning a new Component or as you said: 

> Only “own” static methods are proxied for simplicity. This is intentional.

For anyone who cares how I solved this, I just included a standard

<S_CODE_TOKEN>

in each of my components. This serves to explicitly signify which components have a navigation bar as well as allow me to customize it a bit more than just extending a class. If this is not what this original ticket is about, I'm sorry for wasting so much of your time.
",DavidBrear,2016-05-26 18:51:13
393,2016-05-28 15:41:45,"> TL;DR: Don't extend anything besides default React.Component in your components if you plan on connecting them to Redux.

This is generally a good rule in React. You shouldn’t use inheritance with it.

> I decided to abstract out the static renderNavigationBar(props) to a separate class like this:

I would not recommend using inheritance for this. What if next time, you want to share some other code between other set of your classes? But now they inherit from a common parent, so you’d have to use some hack or a mixin system to copy those methods. At the end of the day there is no reason why it is shorter than just a function:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

In React, inheritance is discouraged. Just don’t use it, you don’t need it. You can achieve exactly the same reusability with functions.
",gaearon,2016-05-26 18:51:13
392,2016-05-25 21:27:01,,mlucool,2016-05-25 21:32:57
392,2016-05-25 21:32:57,"Hi, thanks for the PR! However `^15.0.0-0` includes `15.0.0` and any future `15.x` versions, so this is not necessary.
",gaearon,2016-05-25 21:32:57
391,2016-05-25 09:18:34,"<S_CODE_TOKEN>

> and

<S_CODE_TOKEN>

> What are the differences?
> use the No.1 can't  update the view?
",Hancoson,2016-05-25 11:52:24
391,2016-05-25 11:52:24,"This is a usage question. Please ask it on StackOverflow: we use issue tracker for bugs and feature requests. If you post a question on StackOverflow and leave a link here, I’ll be happy to answer. Thanks!
",gaearon,2016-05-25 11:52:24
390,2016-05-24 18:46:20,"I'm trying to integrate React with a legacy Angular app, using https://github.com/ngReact/ngReact.

I'm using build tools (browserify, babel) for the React related code, and exporting components globally via `window`. The angular app is not using build tools so everything it needs will need to be in the global scope. Angular can render these component via the directive provided by ngReact, e.g. this directive renders the globally exported HelloComponent: `<react-component name=""HelloComponent""></react-component>`

The thing is I want to use `connect()` on `HelloComponent`, but the question is then how do I specify the store for the connected component? Since there will be many React roots it seems like `Provider` isn't a great idea. Passing the store as props to the connected component would have to be done in the angular world and it would be inconvenient.

The other thing I can think of is passing store during the call to `connect`, but the API doesn't support that. Was there a reason for not allowing this way of passing the store?
",kentor,2016-05-24 20:20:19
390,2016-05-24 20:20:19,"You can create a custom `connect()`:

<S_CODE_TOKEN>
",gaearon,2016-05-24 20:20:19
390,2017-02-25 02:12:04,Is this valid today? I need the same thing with react-rails,aurimus,2016-05-24 20:20:19
390,2017-02-25 02:35:45,"Yep - connected components still support reading the store from props, as well as from context.",markerikson,2016-05-24 20:20:19
389,2016-05-24 08:35:29,"This adds a flow type declaration file so that anyone using it from NPM should just get the types 'for free'

It assumes the latest version of flow (0.25, though 0.24 should work too), and adds mostly adequate type definitions for both `connect` and `Provider`. Obviously most of the code is there to type `connect` which can get pretty tricky.

Known Issues: Flow correctly doesn't support stateless React components. The type definition for connect doesn't change that fact. (I tried to do a trick to make such that any stateless function component decorated with `connect` would just start getting type checked, but that didn't quite work in practice.)
",nmn,
389,2016-05-25 00:35:32,"@gaearon I tried to support the case when `mapDispatchToProps` is an object, but I can't seem to find a way.

So far my entire type definition heavily relies on the magic type `$Diff<A, B>`. It's something flow uses internally to subtract DefaultProps from Props to get the external requirements.

It turns out, that B has to be a strict subset of A for it to work.
So `$Diff<{name: string}, {name: any}>` doesn't work.

But to support `mapDispatchToProps` is an object, I can't just subtract the value returned by `mapDispatchToProps` from props. I need to map into functions somehow, which I can't find any way to do.

I can still fix the type if you're willing to merge this. It's a little more wordy to write out the function version but I think people who use Flow will trade it for the improved type-safety.
",nmn,
389,2016-05-25 01:11:52,"Update: One other possibility is to use a more generic type:

<S_CODE_TOKEN>

This has two downsides:
1. You have to use `undefined` to skip arguments instead of `null`.
2. The returned type is typed as strictly as the type defs defined in the current PR.

This type only checks that the props you HAVE provided have the right type. (e. g. It won't let you pass a string instead of a number) But it will let you completely skip required props and not warn you.

Do you think that is preferable?
",nmn,
389,2016-06-05 04:55:00,"**Update:**
- I updated the type definitions to accept the options only as the 4th argument.
- I chose to not include the `mapDispatchToProps is an object` case as after much research, I couldn't find a way to define types for that correctly. I assume people using flow will be willing to write slightly more code to get type-safety.
",nmn,
389,2016-06-06 13:01:20,"@nmn can you maybe give an example of the annotated connected component which is compatible with these type definitions?

btw, you can probably use `type ConnectOptions = {pure?: boolean, withRef?: boolean}` to decrease duplication.
",agentcooper,
389,2016-06-06 13:16:30,"@nmn One more thing: you support `ownProps` param in `mergeProps` (as `origProps`), but not in `mapStateToProps` and `mapDispatchToProps`.
",agentcooper,
389,2016-06-08 02:53:41,"@agentcooper 
1. The idea is that if you type your own component you shouldn't need anything extra. So the example is to just use connect like normal!
2. I think I missed the ownProps arg in the other two args. I'll add it in.
",nmn,
389,2016-08-29 22:36:08,"I think its quite important to have some typesafey around state and dispatch. State isnt just any object, its a specific object you're expecting within the application. And dispatch isnt just a function, but a function that accepts specific actions. Perhaps connect could have a type signature like `Connects<State,Dispatch>` so that I can define my state as an object literal type and dispatch as only accepting specific actions.
",ccorcos,
389,2016-08-30 10:05:17,"There are pretty good definitions available at https://github.com/reactjs/redux/pull/1887, for both redux and react-redux.
",agentcooper,
389,2016-08-30 16:07:48,"thanks @agentcooper! those are some great lib defs!
",ccorcos,
389,2016-08-31 03:50:12,"@agentcooper Those type definitions do look interesting. They are definitely more sound theoretically. But in the past, the most correct definitions have not worked for me in practice.

I'll take these for a spin and report back, now that Flow has been updated a few times.
",nmn,
389,2016-11-08 21:03:27,"Same as #538: Can this be rebased against the `next` branch? I don't think typings showing up in a patch or minor would follow semver, since things might break. Plus, it'll keep the complaints down. Thanks!
",timdorr,
389,2017-01-11 14:06:40,Has this been abandoned?,mull,
388,2016-05-22 22:53:23,"Took me a while to figure this one out. For some strange reason, when I use connect to decorate my component, `<LinkContainer>` stops marking links as active. If I remove the `connect()(Header)` call, `<LinkContainer>` works as expected.

<S_CODE_TOKEN>

Here's the behaviour I get when using connect:

![gif](http://g.recordit.co/FHbgKYv8N8.gif)

Thinks those are related but I can't figure out a quick/official fix:

https://github.com/reactjs/react-router/issues/3286
https://github.com/reactjs/react-router/issues/470
",olalonde,2016-05-22 22:53:59
388,2016-05-22 22:53:59,"This is fixed in React Router `3.0.0-alpha.1` and newer.
",gaearon,2016-05-22 22:53:59
388,2016-05-22 22:54:34,"In fact the last comment in the issue you linked says exactly that 😉 
https://github.com/reactjs/react-router/issues/470#issuecomment-220491445
",gaearon,2016-05-22 22:53:59
388,2016-05-22 23:06:26,"@gaearon thanks. Upgrading to React Router `3.0.0-alpha.1` doesn't appear to have fixed the problem :(

Got this warning though: 

<S_CODE_TOKEN>
",olalonde,2016-05-22 22:53:59
388,2016-05-22 23:09:48,"Just tested with `<Link>` directly and same problem.
",olalonde,2016-05-22 22:53:59
388,2016-05-22 23:12:49,"<S_CODE_TOKEN>

fixed the problem.
",olalonde,2016-05-22 22:53:59
388,2016-05-23 00:09:24,"The Link component is fixed in router 3.0 alpha 1. Not the LinkContainer component from the router bootstrap package. Unfortunately it doesn't even use the Link directly so it doesn't benefit from the Link being fixed. I will file an issue there. 
",gaearon,2016-05-22 22:53:59
388,2016-05-23 00:12:45,"@gaearon ah ok thanks. Any idea why `withRouter()` fixed the problem anyway?
",olalonde,2016-05-22 22:53:59
388,2016-05-23 00:36:28,"@olalonde Because both `withRouter()` and `Link` contain the necessary fix.
",gaearon,2016-05-22 22:53:59
388,2016-05-23 00:37:23,"FWIW you can use `withRouter(LinkContainer)` as a temporary measure.
",gaearon,2016-05-22 22:53:59
387,2016-05-22 02:19:54,"disregard
",ffxsam,2016-05-22 02:25:50
387,2016-08-23 15:43:43,"For future reference for people who come here, this is possibly related to [imports being malformed](https://gist.github.com/jmarceli/7aa4aed6e5e825e85e56#1).  

In my specific case, it was the import {x as y} syntax that Babel 6 wasn't liking. 
",zedd45,2016-05-22 02:25:50
386,2016-05-20 13:28:43,"Hello

I have a problem that I cannot figure out how to tackle that with react-readux

I have an app which constantly produce some logs (from beacon device) and store them in state (consider 2 logs/second). Then I need to send this logs sequentially to server api and remove them from the state.
Since calling api might take times I cannot call them in loop, because I need the first api call be done and call for the next row then (the second call needs some information from the first call)

Right now I have the logs ready to send in store, but I cannot figure out how to process them.
",RezaRahmati,2016-05-20 15:32:45
386,2016-05-20 15:32:45,"Please ask the usage questions on StackOverflow.
We use the issue tracker for bug and feature requests only.
Thanks!
",gaearon,2016-05-20 15:32:45
386,2016-05-20 15:50:56,"OK, this is the link for my question [http://stackoverflow.com/questions/37350783/how-to-call-actions-right-after-each-other-in-react-redux](http://stackoverflow.com/questions/37350783/how-to-call-actions-right-after-each-other-in-react-redux)
",RezaRahmati,2016-05-20 15:32:45
385,2016-05-19 10:19:06,"I'm having an issue with Redux, when I try to implement shouldComponentUpdate for a component, this.props already holds the same value as nextProps。I don't understand why this would happen. Is there any way around it?
",aDeadFish,2016-05-19 12:33:20
385,2016-05-19 12:33:20,"It is hard to say anything because there is no code sample and it is not clear how you compare the props. I will close as this appears to be a usage question, and we ask that you ask them on StackOverflow instead. This is a bug tracker and not a support forum. That said feel free to post a link to your question with example code and I'll try to take a look. Thanks!
",gaearon,2016-05-19 12:33:20
384,2016-05-18 18:20:16,"I'm running into a really weird issue. I've got a Breadcrumbs component with the reducer, actions and component below.

Everything works fine until about the fifth time that the `addBreadcrumb` action is fired. When that happens, I see the action get logged in console, I see the correctly updated state in the `next state` part of the log, but my Breadcrumbs component is not receiving the updated state via props.

After digging a little bit I noticed that the `Connect` that wraps the Breadcrumbs component has an inconsistent state when comparing its `state.storeState.breadcrumbs` with its `context.state.getState().breadcrumbs`. The store state on the context is correct but the connect's local state is not. This seems to only happen at about the fifth time that the `addBreadcrumb` action fires, until that point the state is consistent.

I'm fairly certain I'm following the immutability rules with my reducer. I've tried passing `{ pure: false }` to connect but that didn't help.

I'm unfortunately not able to reproduce this in a codepen but I was hoping you might be able to point me in the right direction for possible issues.

react 0.14.7
redux 3.0.3
react-redux 4.2.1

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",vitosamson,2016-05-18 20:14:52
384,2016-05-18 18:28:42,"The code looks good. Any chance your `Breadcrumbs` component implements a bad `shouldComponentUpdate`? Have you tried logging when it gets rendered, or logging the value you get in `mapStateToProps`? It’s hard to say what goes wrong without a reproducing case.
",gaearon,2016-05-18 20:14:52
384,2016-05-18 18:35:13,"The component doesn't implement `shouldComponentUpdate` at all, nor do any of the components above it in the hierarchy. I added logging in both the `render` and `componentWillReceiveProps` on the Breadcrumbs component, and it shows the (inconsistent) state from `Connect.state.storeState`. Adding a log in the `mapStateToProps` fn shows the same.

Interestingly, nothing gets logged at all after the last `addBreadcrumb` action fires (the one that doesn't seem to be updating the connect's state). The action itself is logged but the component doesn't re-render, `componentWillReceiveProps` doesn't get called, and the log in `mapStatesToProps` doesn't get called either.

The inconsistent breadcrumb state appears to be across all the Connects throughout the app, not just the one wrapping the Breadcrumb component.
",vitosamson,2016-05-18 20:14:52
384,2016-05-18 18:39:58,"Can you try updating `react-redux` and `redux` to their latest versions?
",gaearon,2016-05-18 20:14:52
384,2016-05-18 20:14:52,"Looks like this was actually an issue in a different part of my code (a faulty `onEnter` hook in my routes). Figured that out when other parts of the app started misbehaving in the same fashion after five route changes 😄 

Thanks anyway for the quick response and all your hard work on redux, @gaearon!
",vitosamson,2016-05-18 20:14:52
384,2016-05-18 21:09:16,"No problem! Happy you got it resolved.
",gaearon,2016-05-18 20:14:52
383,2016-05-18 09:26:41,"I'm using a base class for some components. However when using redux I get an issue with connect. This only happens when trying to use connect with the base class **'DockerWindow'**. If I only use it on a child **'DockChat'** it works. How can I access the **'store'** on **'DockerWindow'** (a base class)?

<S_CODE_TOKEN>

Error:

<S_CODE_TOKEN>

Packages: React 15.0.2, React-Redux 4.4.5, Redux 3.5.2

<S_CODE_TOKEN>
",fbacker,2016-05-18 09:58:39
383,2016-05-18 09:58:39,"Finally after hours of trying it works.

For **'base class'** use contextTypes only

<S_CODE_TOKEN>

and in children use connect

<S_CODE_TOKEN>
",fbacker,2016-05-18 09:58:39
383,2016-05-18 13:10:05,"Please don’t use inheritance with React. It is actively discouraged.
Rather than do

<S_CODE_TOKEN>

you should do something like

<S_CODE_TOKEN>

and then use `this.props.children` inside `DockerWindow`.
",gaearon,2016-05-18 09:58:39
383,2016-05-23 08:56:25,"Thanks for that gaeron, as a dev I've had some issues understanding how to extend classes. Now finally it all makes sense 👍 
",fbacker,2016-05-18 09:58:39
382,2016-05-17 09:42:16,"Hi,

I have updated some parts of our codes with deep use of connect hoc, sometimes mergeProps function was needed and it worked like a charm. My only question is about how we could improve how we deal with a new function that is recreated each time and if it might be possible to avoid that.

considering this example

<S_CODE_TOKEN>

I have made some tests of [whyDidYouUpdate](https://github.com/garbles/why-did-you-update) middleware and got this warning that is pretty obvious.

<S_CODE_TOKEN>

Is it a solution to avoid that ?

Thanks,

Julien
",darul75,2016-05-17 17:00:00
382,2016-05-17 17:00:00,"I don’t think there’s any simple way to avoid it.

The best way to solve this is to have the components pass those values directly in the callbacks.
You can introduce intermediate components that do just that, if you’d like.
",gaearon,2016-05-17 17:00:00
382,2016-05-17 17:18:54,"Ok thanks dan
",darul75,2016-05-17 17:00:00
381,2016-05-16 11:30:07,"Hey,
I think I've found a bug, but I might be missing something here, so an explanation would be greatly appreciated in case I'm wrong. :) Let me describe the issue:
1. Not supplying custom `mergeProps` is defaulting it to `defaultMergeProps` (obviously ;) )
2. and therefore we land with `checkMergedEquals === false` ( cause `const checkMergedEquals = pure && finalMergeProps !== defaultMergeProps` )
3. then each call to `this.updateMergedPropsIfNeeded` returns as always `true` as if `mergedProps` has changed (which is not always true!) - if we are using `defaultMergeProps` they can not change too 
4. and finally... it is a problem in `render` as it won't return us cached `renderedElement` due to:

<S_CODE_TOKEN>

It successfully prevents default optimization here.
",Andarist,2016-06-26 18:30:37
381,2016-05-16 11:39:59,"Please feel free to provide a failing test and a solution!
",gaearon,2016-06-26 18:30:37
381,2016-05-16 11:41:50,"I can make a PR with a fix, would only like to hear if my reasoning is not wrong, cause I could have miss something. And probably what cases should I consider when fixing - as probably whole `checkMergedEquals` had some reason behind implementing it :) 

Gonna read commit history later, maybe that will help
",Andarist,2016-06-26 18:30:37
381,2016-05-16 14:59:41,"I don’t remember that so creating a failing test is the best way to figure out if there was a reason or not
",gaearon,2016-06-26 18:30:37
381,2016-05-20 23:45:03,"I think this is working as intended.

The variable `checkMergedEquals` indicates whether or not we need to do the `shallowEqual` comparison on the old mergedProps and next mergedProps.

<S_CODE_TOKEN>

The condition to reach `updateMergedPropsIfNeeded` is if stateProps, dispatchProps or ownProps has changed. This implies that at least one of these are not shallowEqual to its previous counterpart.  Therefore if we use the default `mergeProps`, we know for sure the new mergedProps will not be shallowEqual the old mergedProps, allowing us to bypass the `shallowEqual` check entirely.

The shallowEqual check on mergedProps only needs to be done if we have a custom `mergeProps` (e.g. trivial example one that always returns the empty object) and the component is pure (since if it is impure we want to trigger a re-render).

**Edit**: Assumption made was that stateProps, dispatchProps and ownProps have different keys. If they have common keys, then it is possible for the new mergedProps to be shallowEquals (e.g. ownProps has precedence over stateProps). This means a re-render is done even if mergedProps would have been shallowEquals.
",gelguy,2016-06-26 18:30:37
381,2016-06-26 18:30:37,"Closing per inactivity, doesn’t seem like there is any actionable here.
",gaearon,2016-06-26 18:30:37
380,2016-05-16 10:52:56,"Normally, the state changing (redux application state), it will trigger other component to get the latest state. I think it should get the latest state in component which is in iframe. That is the problem I encountered.

I can't get the latest state in iframe (source is React component), when I changing state in another component, and actually the mapStateToProps was triggered!(means iframe source component) but its state is not the latest in mapStateToProps function. it does not really concerns with the react-redux library? Is it not the bug?

I already post the issue on the stackoverflow, please check it: http://stackoverflow.com/questions/37218422/redux-react-why-i-cant-bind-state-to-this-props-on-component-which-is-in-ifra

Thanks a lot!
",sevenLee,2016-05-16 14:36:53
380,2016-05-16 11:21:57,"Hi! Unfortunately there is no way we could help you unless you provide a project consistently reproducing the issue, with exact instructions to reproduce it. Thanks!
",gaearon,2016-05-16 14:36:53
380,2016-05-16 14:02:15,"@gaearon  Thanks of your kind reply! I already got your answer in stackoverflow. maybe I should not separate partial app from the whole web app in iframe, it was not allowed in redux structure?
",sevenLee,2016-05-16 14:36:53
380,2016-05-16 14:36:53,"This is not related to Redux. Any state (not just Redux state) will get duplicated in an iframe because **an iframe is an independent instance of the whole app**. It’s like if you opened it in a different tab—each tab is completely isolated.

I don’t understand why you’re using iframes at all. But if you need them (make sure you know why!), please use something like `react-frame-component` to have just one instance of the app.
",gaearon,2016-05-16 14:36:53
380,2016-05-16 19:33:16,"I already uploaded my whole project, please check it: https://github.com/sevenLee/ServerSideRedux.git
npm install, then npm run dev. I would like to real time change the iframe page by outer component, it is like template generator app. I can define custom style on iframe page (like a theme), that is my real object.
",sevenLee,2016-05-16 14:36:53
380,2016-05-16 20:07:20,"Thanks, but I still don’t understand why you want to use iframes rather than render the component that implements a preview directly.
",gaearon,2016-05-16 14:36:53
380,2016-05-16 20:22:10,"The main reason is the iframe page has its own css theme style, if I render directly, the theme preview page will be polluted by outer css style... that why I need iframe. The tricky is I used react component  to be the iframe page through react route....is it appropriate architecture? 
",sevenLee,2016-05-16 14:36:53
380,2016-05-17 11:27:15,"> The main reason is the iframe page has its own css theme style, if I render directly, the theme preview page will be polluted by outer css style.

This is the real problem. I think you need to find a way to isolate styles so it’s possible to render two components with different themes in one app. This can be done by using specific CSS class names for each themes, and passing corresponding class names to the components.
",gaearon,2016-05-16 14:36:53
380,2016-05-17 14:01:18,"Yeah, If I really want the iframe.....is it possible to pass the store into iframe? Because iframe source links page with react-router, do you have any idea pass store through Route or get the sync store in inner component (in iframe)? I used < Provider > to pass store to component, how I get the store in component? If I still use connect(), can I get the store manually? I'm sorry for so many question.....
",sevenLee,2016-05-16 14:36:53
380,2016-05-17 14:45:31,"Have you looked into using https://github.com/ryanseddon/react-frame-component?
",gaearon,2016-05-16 14:36:53
380,2016-05-17 14:53:33,"Yeah I just had a glance it, I am not sure that is what I need, I try to use it to combine with iframe and react-route now.....thank you:)
",sevenLee,2016-05-16 14:36:53
380,2016-05-17 16:17:37,"You would need to do anything with React Router for it though. This _is_ the component that renders to an iframe—you don’t need to “combine it with an iframe” either. The point is that anything inside `<Frame>` would get rendered into a separate frame, so you can render your CSS there _and_ the component itself. Not the `<script>` bundle.
",gaearon,2016-05-16 14:36:53
380,2016-05-17 18:30:19,"The package works so great! I don't need to use react-router to decide iframe source any more, I directly put the component I want to display inner < Frame > , the component will render in iframe, like so:

<S_CODE_TOKEN>

The most awesome feature is the state is synchronous ! the inner component works the same as outer component. Now I can dynamically change inline style in inner component. That is big present for me, @gaearon very much appreciated ! :D
",sevenLee,2016-05-16 14:36:53
380,2016-05-17 18:37:59,"I don't know why the inner state could be synchronous even the component in iframe? What the magic in react-frame-component? amazing!
",sevenLee,2016-05-16 14:36:53
380,2016-05-18 13:08:19,"Great, I’m glad it worked for you. The state is in sync because there is just one instance of your app. Inside of using iframe as a container for the app with its own `<script>` tag, `react-frame-component` just [uses `ReactDOM.render()`](https://github.com/ryanseddon/react-frame-component/blob/1770610ddbfcf4362e3d75f8b8268946ce9fcd14/index.js#L88) (well, not quite, but pretty close) into the iframe body.
",gaearon,2016-05-16 14:36:53
379,2016-05-14 16:23:13,"I have a specific scenario in my react/redux/express universal project (server-side rendering).

(1)First I defined my routes like so: [ routes.jsx ]

<S_CODE_TOKEN>

As you see, when url route is: **localhost:3000/preview**, react-router will use **AnotherView** component.

(2)Now focus on ThemeIndex component: [ ThemeIndex.jsx ]

<S_CODE_TOKEN>

(3)Frame component like so: [ Frame.jsx ]

<S_CODE_TOKEN>

Here I use iframe tag, its src is **http://localhost:3000/preview?id=xxxx**, so it means it will link **AnotherView** component to be iframe's page.

(4)AnotherView Component like so:

<S_CODE_TOKEN>

(5)And I have Control component for making dynamic value: [ Component.jsx ]

<S_CODE_TOKEN>

(6)List extra files, Action and Reducer:
[ action.js ]

<S_CODE_TOKEN>

[ reducer.js ]

<S_CODE_TOKEN>

Here is Store configuration on server.js:

<!-- begin snippet: js hide: false -->

<!-- language: lang-js -->

<S_CODE_TOKEN>

<!-- end snippet -->

my application state is like :

<S_CODE_TOKEN>

(7)Now I key some words on input in Control component. When the input onChange will trigger **addTodo** action function to dispatch action in reducer, finally change the state. In common, the state changing will effect Frame component and AnotherView component, because I used **react-redux** `connect`, bind the state property to `this.props` on the component. 

But in fact, there is a problem in **AnotherView** component. in **Frame** component, `console.log` value display the text you key in input correctly. In AnotherView component, even the connect callback will be trigger (`console.log` will print '`another view trigger state: ...`') , the `console.log` in render is `undefined`, like:

<S_CODE_TOKEN>

I found the main reason: **AnotherView** component is in `iframe`. Because if I remove `iframe`, put AnotherView component directly here, like so:

<S_CODE_TOKEN>

then I can bind `state` properties on `this.props` in **AnotherView** component successfully, then insert `{text}` on JSX html, you can see the value changing real time when you key input value on **Control** component. if I use iframe to link **AnotherView** component be its page, you can't see any changing `{text}` value, because my text default value is empty string value.

How do I bind `state` properties to `this.props` in the component which is in `iframe` when state changing?
",sevenLee,2016-05-14 16:53:47
379,2016-05-14 16:53:47,"This is a usage question, and really should be asked on Stack Overflow instead of here.  Github issues should be used for actual bugs or concerns with the library itself.
",markerikson,2016-05-14 16:53:47
379,2016-05-16 04:31:45,"I can't get the latest state in iframe (source is React component),  when I changing state in another component, and actually the mapStateToProps was triggered!(means iframe source component) but its state is not the latest in mapStateToProps function. it does not really concerns with the react-redux library?

I already post the issue on the stackoverflow, please check it: http://stackoverflow.com/questions/37218422/redux-react-why-i-cant-bind-state-to-this-props-on-component-which-is-in-ifra

Thanks a lot!
",sevenLee,2016-05-14 16:53:47
379,2016-05-16 11:38:08,"I replied to the question.

For future reference, code samples in a question are fine on StackOverflow, but if you think you hit a bug, and raise an issue, please provide a full project so that maintainers don’t need to spend time copying and pasting your code and installing the corresponding libraries.

Cheers!
",gaearon,2016-05-14 16:53:47
378,2016-05-13 14:58:14,"Hi, 

I'm having a main page ""Registration"" who is connected with `import { connect } from 'react-redux';`. I pass the props i want to the children of this page (3 differents pages/forms) with `React.cloneElement`.

<S_CODE_TOKEN>

When i build in development environnement, i got these errors for each child and each props needed into them:

<S_CODE_TOKEN>

""ConnectionInfosContainer"" is the direct child of ""Registration"". Why i got these errors? All is working well and if i build my app in Production environnement, all theses errors are gone.

Should `connect()` do it work before rendering the component? 
",DWboutin,2016-05-13 15:56:00
378,2016-05-13 15:56:00,"You specified `dispatch` as a required prop. However, React checks props _at the time an element is created_. So even if you `cloneElement()` later, you’ll see a warning.

There is no way to solve this because we never know if `cloneElement()` is called in the future. You can suppress the error by defining something like

<S_CODE_TOKEN>

so that you get a no-op by default.

In the future, we recommend that you ask questions on StackOverflow first, and file issues if you’re confident the bug is in the library.
",gaearon,2016-05-13 15:56:00
377,2016-05-10 13:36:32,"I am not sure it's something relative to react-redux, redux or webpack.
Using both on a project I have a duplicated module of lodash.
![selection_036](https://cloud.githubusercontent.com/assets/3210177/15148298/da854b82-16c4-11e6-852f-daa607fe17dd.png)
Is that something normal?
",anaibol,2016-05-10 14:05:34
377,2016-05-10 14:05:34,"You can use [`npm dedupe`](http://4waisenkinder.de/blog/2014/06/09/flatten-your-dependencies-with-npm-dedupe/) to make it more flat. Also it’s best if you use npm@3 which dedupes better by default.
",gaearon,2016-05-10 14:05:34
376,2016-05-09 14:44:17,"Hello,

We have a generic container component that calls sub-component's api methods. Wrapping our sub-components with connect obscures the sub-component's api, and therefore the container can't call its functions. 
Using getWrappedInstance() isn't a good option as the container component is unaware of redux, and we want it to stay that way. 
A good solution could be that the connect component will proxy to methods in the wrapped components, in case it doesn't implement them itself. 
",omerts,2016-05-09 16:09:09
376,2016-05-09 16:09:08,"Hi! This has been suggested before in #165 but we are unlikely to implement this, as there are way too many edge cases.

Putting imperative methods on a component is an escape hatch and is not idiomatic React code. If this is very important to you, you can write a custom `connect()` wrapper that also creates proxies for the instance method on the returned class. However we won’t add this feature to this library because the use case for imperative methods is rare, the risk of name clashes and weird issues resulting from them are high, and this is better addressed manually in the projects that need that so you have full control over how proxying happens.

Cheers!
",gaearon,2016-05-09 16:09:09
376,2016-05-09 19:18:31,"@gaearon First of all thank for the impressively quick response (and overall great work).
Sorry I missed #165. 

IMHO saying pure imperative methods is not idiomatic React is incorrect. A way of communicating with components through exposing a component function is part of the React docs:
https://facebook.github.io/react/tips/expose-component-functions.html

It even states at the end, that passing props for animations might get messy, or in other words, there are some situations a component interface is a better solution. 

In our case, we have a generic wizard component, and each step in the wizard is a react component, that must implement a certain interface in order for it to work in the wizard.
",omerts,2016-05-09 16:09:09
376,2016-05-09 19:53:02,"> A way of communicating with components through exposing a component function is part of the React docs:

Yeah, but it is explicitly listed as “uncommon”. I understand your use case but it’s rare enough that I would rather not bake it into the lib and have to support all the edge cases that come out of it (e.g. someone can define a `handleChange` method but it already exists on `connect()`ed component). If you’d like this to exist, please implement it on top of `connect()` manually.

> In our case, we have a generic wizard component, and each step in the wizard is a react component, that must implement a certain interface in order for it to work in the wizard.

Unless you’re specifically managing “one-off” things like kicking an animation or focusing a text field, it is often possible to achieve the same with props. For example, components can cause imperative side effects in `componentWillReceiveProps` if the props changed. It’s hard to suggest more without a simple example.
",gaearon,2016-05-09 16:09:09
376,2016-05-09 20:02:31,"Ok I understand your point. 

> (e.g. someone can define a handleChange method but it already exists on connect()ed component)

Just as a side note, you could only fallback to the component's interface in case the function isn't implemented in the _connect_ component, or throw an exception if a ""reserved"" function name is used.
",omerts,2016-05-09 16:09:09
376,2016-05-09 20:43:20,"> Just as a side note, you could only fallback to the component's interface in case the function isn't implemented in the connect component, or throw an exception if a ""reserved"" function name is used.

This would make any internal change in `connect()` a potential breaking change because adding, removing, or renaming methods may cause methods with the same name to suddenly stop working in your app. This is a huge liability I’m not willing to take. It would make aggressive refactors like #373 much harder.
",gaearon,2016-05-09 16:09:09
375,2016-05-04 04:54:59,"Although `react-redux` positioning itself like performant solution for connecting react components to the redux store. However it rerender components on each store state changes [synchronously](https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L199), 
that can be an issue, if store changes very frequently([proof](https://github.com/broadsw0rd/react-redux-perf#react-redux-performance-test)). So instead of that we can put component, which should be updated, to the queue and with 60 FPS frequency update each component in queue:

<S_CODE_TOKEN>

**Pros**
- increases performance up to 1.5x-2.0x and battery live, particularly on mobile devices
- doesn`t patch redux core like [redux-batched-subscribe](https://github.com/tappleby/redux-batched-subscribe), what prevents  
  [inconsistency](https://github.com/tappleby/redux-batched-subscribe/issues/8) with redux after major releases
- could be optional like `pure` option

**Cons**
- harder to test async rendering

But if there is a pitfalls or this solution has no rights to live by another reasons, could you give an advice how to increase performance in this case?
",broadsw0rd,2016-05-07 05:08:22
375,2016-05-04 18:46:39,"I wouldn't be comfortable doing something as invasive by default. It makes testing and debugging harder, and introduces potential issues with some browser APIs that expect synchronous updates within an event handler (example: managing an `audio` tag on iOS).

I would keep it opt in with tools like https://github.com/tappleby/redux-batched-subscribe/. In the future React itself will learn to delay some updates (https://github.com/facebook/react/issues/6170) so longer term this might stop being an issue, and I don't want to break any existing apps that rely on the current synchronous behavior. 
",gaearon,2016-05-07 05:08:22
375,2016-05-05 05:03:10,"Glad to hear that this issue will be fixed on react level. :+1:
And thank you for detailed answer
",broadsw0rd,2016-05-07 05:08:22
374,2016-05-02 20:18:26,"I'm trying to store some props from react-router into the store and use it somewhere down the hierarchy. My tests show that in the code below, when app receives props and dispatches an action, the child will receive the new store state when it's rendered.
But I just want to make sure that there won't be any race conditions or any other surprises. Also if you think there is a better way to achieve this please let me know.
Thanks :-)

<S_CODE_TOKEN>
",sean-shirazi,2016-06-07 15:47:23
374,2016-06-07 15:47:23,"We don’t recommend this. If you are duplicating data from React Router in Redux store, it is extremely likely you’ll have race conditions. I recommend that you don’t do that, and instead use `withRouter()` higher order component to inject router params (works since React Router >= 3.0 beta), and use _that_ as the source of truth. I recorded a few free lessons on how to do it:
- https://egghead.io/lessons/javascript-redux-filtering-redux-state-with-react-router-params?course=building-react-applications-with-idiomatic-redux
- https://egghead.io/lessons/javascript-redux-using-withrouter-to-inject-the-params-into-connected-components
",gaearon,2016-06-07 15:47:23
373,2016-05-01 01:47:37,"This is a pull request for https://github.com/reactjs/react-redux/issues/368

Not to be merged yet, as the code is not clean but it's enough to get some feedback, as all the existing tests are passing
",slorber,2016-08-14 15:21:03
373,2016-05-04 09:07:51,"@gaearon did you have time to check my PR?

I've tried to run benchmarks of @mweststrate . Not sure to have done them correctly, but I actually see increased performances :) It's not huge, and maybe I did something wrong during the benchmark.

<S_CODE_TOKEN>

Maybe you can run them yourself and confirm?

I've published the benchmark app [before](http://slorber.github.io/connect-refactor/before.html) and [after](http://slorber.github.io/connect-refactor/after.html) so that anyone can take a look
",slorber,2016-08-14 15:21:03
373,2016-05-04 13:26:36,"Hey, great work. I’m super busy this couple of weeks so I’ll leave this hanging for now. If all tests are passing and you’re confident about it, we can cut a beta.
",gaearon,2016-08-14 15:21:03
373,2016-05-05 07:21:59,"thanks :)

I'm going on holiday 2 weeks until the 21 so you will have some time to check the code :)

I'm confident globally but not really about the `checkMergedEquals` attribute that @tgriesser added. Don't really understand the usecase as all my tests are passing without using that, but it has probably be done for a good reason so...
",slorber,2016-08-14 15:21:03
373,2016-08-14 15:21:03,"Superseded by #416
",timdorr,2016-08-14 15:21:03
372,2016-04-28 12:37:20,"I have a project based on https://github.com/erikras/react-redux-universal-hot-example and one of my components needs to check `router.isActive(someUrl)` whenever a route changes and update its style/markup. The router object is accessible from components via context. Since `react-redux` v4.4.4 the component no longer updates (`render`, `shouldComponentUpdate`, `componentWillReceiveProps` are not called) on route change.

I've specifically checked that it works with `<= v4.4.3` and not with `>= v4.4.4`.

The essential code of the component is:

<S_CODE_TOKEN>
",krukid,2016-04-28 12:59:43
372,2016-04-28 12:59:42,"Context updates are notoriously broken with `shouldComponentUpdate` (https://github.com/facebook/react/issues/2517). If a library you use relies on them, you should be using impure version of `connect()`. We can’t protect against random breakage in patch versions here because you are essentially relying on known buggy behavior.

Please pass `{ pure: false }` to any `connect()` calls in the hierarchy of this component. If this is a common problem, you can write `myConnect()` that calls `connect()` with `{ pure: false}` and use it instead.

Related: https://github.com/reactjs/react-router/issues/470.
",gaearon,2016-04-28 12:59:43
372,2016-04-28 14:27:12,"This makes me sad. I guess I'll wait for [react-router v2.4.0](https://github.com/reactjs/react-router/blob/master/upgrade-guides/v2.4.0.md) that will seemingly address this problem.
",krukid,2016-04-28 12:59:43
372,2016-04-28 16:28:51,"It makes many people sad but that’s our reality :-/.
As a library we can’t really guarantee whether context propagates or not because the whole thing is buggy.
",gaearon,2016-04-28 12:59:43
372,2016-04-29 10:07:02,"Just tried `react-router v2.4.0` that allows receiving the router via props, but that doesn't work with `react-redux v4.4.4` either. Passing location prop all the way down the component hierarchy seems to be the way this is going. I just hope some kind of consensus is established among the major players in the React world on how to propagate global state without clutter. Meanwhile the little people suffer :(
",krukid,2016-04-28 12:59:43
372,2016-04-29 11:17:56,"Sorry but 2.4.0 had no relation to this issue. `withRouter` that was added there just exposes context as a prop but it doesn't affect how that context is actually updated.

https://github.com/reactjs/react-router/issues/470 is still open. This is the issue you want to be tracking.

I documented a workaround above. Please don't “suffer”, just use `{ pure: false }` in the meantime. This is exactly why it was added. 
",gaearon,2016-04-28 12:59:43
372,2016-04-29 11:30:34,"Ok, will do, thanks :)
",krukid,2016-04-28 12:59:43
372,2016-05-12 09:23:56,"> Context updates are notoriously broken with shouldComponentUpdate (facebook/react#2517). If a library you use relies on them, you should be using impure version of connect(). We can’t protect against random breakage in patch versions here because you are essentially relying on known buggy behavior.

@gaearon, AFAIK react-redux also relies on the context feature of React. So does that quote above also apply to react-redux itself? Say, for instance:

<S_CODE_TOKEN>

a) The parent's `shouldComponentUpdate` returns `false`.
b) Child is connected to some part of the `state` that changes.

Will the Child re-render when that part of the state changes? Do we need to pass `{ pure: false }`?
",landabaso,2016-04-28 12:59:43
372,2016-05-13 13:33:12,"@landabaso React Redux only uses context for dependency injection of the `store`. The future updates work because `Child` subscribes to the `store` directly via `store.subscribe()` API.

@krukid I sent a few PRs to fix this in React Router, and it won’t be an issue in 3.0 anymore.
",gaearon,2016-04-28 12:59:43
371,2016-04-28 08:14:41,"Hi all,

How about 15.0.x support? React made some changes in API and current version of react-redux doesn't work with latest React :)

Thanks
",akoshman,2016-04-28 11:30:58
371,2016-04-28 11:06:00,"@akoshman It's supported https://github.com/reactjs/react-redux/blob/master/package.json#L98
How it doesn't work? Show your code and config.
",TrySound,2016-04-28 11:30:58
371,2016-04-28 11:30:58,"Yeah, it is supported just fine!
",gaearon,2016-04-28 11:30:58
371,2016-04-28 13:22:34,"Thanks for help guys
",akoshman,2016-04-28 11:30:58
370,2016-04-27 15:19:28,"Hey all,

Today the Provider takes in the `store` prop and binds it to the Provider class and into context types. Over at http://docs.apollostack.com/ we're trying to build a data layer for any backend and Redux is our primary tool for dumping the various data sources to the client.

Currently, we've had to make a carbon copy of `react-redux` and thats because our Provider needs to bind the instance of the `ApolloClient` which much like the store, holds the state from the servers sending data to us.

I was wondering if we could make the `Provider` component in ReactRedux take other bindings? So a user would be able to

<S_CODE_TOKEN>

And if no bindings prop is found, fallback to the original implementation. I really do not want to start spinning off separate libraries just for small differences in implementation, so if we could work on a optimal solution for this, that'd be great!!
",abhiaiyer91,2016-04-27 16:32:27
370,2016-04-27 16:32:27,"Hi!

We use `store` as the context type name. Lots of apps, libraries, and tutorials already rely on this, so changing the context type name or putting something else there would be a huge breaking change that I’m not willing to take.

Context types have to be specified at the type definition time. So we can’t dynamically add another context type name based on props either.

I understand what you want to accomplish but I’m afraid `<Provider>` was not really meant to be a pass-all bag for context for different libraries. Additionally, context is an unstable API, and while we use it internally, we don’t want to increase the public API surface area for anything related to context.

I think that, if you want to avoid a separate `<ApolloContext>`, your best bet is to provide your own `<ApolloProvider>` and tell people to use it instead of `<Provider>`. Internally it may be implemented as

<S_CODE_TOKEN>

Then your consumers can write

<S_CODE_TOKEN>

without having to use `<Provider>` directly.

Hope it helps!
",gaearon,2016-04-27 16:32:27
370,2016-04-27 16:54:17,"Thanks Dan, I think that is a fine solution 
",abhiaiyer91,2016-04-27 16:32:27
369,2016-04-25 04:19:42,"I create redux store use the facebook immutable js. 
so I get state in my component like this:

`@connect(state => { rules : state.get('rules').toJS() })`

because connect only receive the plain object, so I need use `toJS` to pass object to connect.

there is a problem , my `rules` is a array of object like `I.fromJS([{id: 1} , {id: 2}, {id, 3}])`

so every time `state.get('rules').toJS()` result is not equal. so when store change, this component always will rerender, because the `shouldComponentUpdate` in connect() only make a shallow equal. not a deep equal.

so how can I use the `Immutable.is` for `shouldComponentUpdate` in connect(), or other method to improve the performance with the array of object props equal problem?
",Yixi,2016-04-25 12:14:34
369,2016-04-25 12:14:34,"`toJS()` negates many benefits of Immutable because you’re spending work assembling plain objects.

While technically you can ensure referential identity with [Reselect](https://github.com/reactjs/reselect) because selectors memoize their outputs when the inputs are the same, I would suggest just using Immutable props in your components directly. `Record`s make this fairly neat, with no need for `get()` accessors for properties.
",gaearon,2016-04-25 12:14:34
368,2016-04-25 00:31:04,"We currently delay calling `mapStateToProps` and `mapDispatchToProps` in the common case because it is too early to supply `ownProps` inside `handleChange`, as those props may themselves be obtained from the previous version of the state by the parent component, and may not have been received as the new props just yet, so we bump into issues with staleness (#86).

Right now we call them inside `render()` so `ownProps` are always up-to-date but this is a bit odd, makes the code complicated and in some cases robs us of possible performance improvements, as caching the element isn’t quite as good as providing `shouldComponentUpdate` (#366).

One possible solution to this would be to **use the transactional `setState()` <s>overlord</s> overload**.
It is [described in the documentation](https://facebook.github.io/react/docs/component-api.html#setstate):

> It's also possible to pass a function with the signature function(state, props). This can be useful in some cases when you want to enqueue an atomic update that consults the previous value of state+props before setting any values. For instance, suppose we wanted to increment a value in state:
> 
> <S_CODE_TOKEN>

This looks pretty much exactly like our use case, and I have a feeling that this would let us use `setState` normally without having to resort to calling `mapStateToProps` and friends in `render()`. In this case, we would probably keep the merged props rather than the store state, in the local state.

We still want to keep the “fast path” that avoids `setState` altogether in `handleChange`, but other than that, the rest of the code should be vastly simplified by this, or at least become more conventional.

I’m still not 100% sure this is going to work, but I encourage anyone who wants to dig deeper into how React and Redux work together to give this a try. We have an extensive test suite that should cover any call count regressions. If you are working on this, please leave a comment in this issue.
",gaearon,2016-08-14 15:15:05
368,2016-04-25 06:35:16,"Looking into it! I'm trying to wrap my head around what would no longer be necessary. Looks like this could clean up quite a bit of hand holding around `haveStatePropsBeenPrecalculated` and stateProps in `render()`.
",amccloud,2016-08-14 15:15:05
368,2016-04-25 09:55:14,"Making progress. 8 failing test mostly around invocation counts. Will work on this more tomorrow.
",amccloud,2016-08-14 15:15:05
368,2016-04-25 11:55:52,"Awesome! If you get stuck please feel free to share your work in progress so somebody can pick it up later.
",gaearon,2016-08-14 15:15:05
368,2016-04-25 20:02:04,"Really happy to see all those red lines on first commits :)
",slorber,2016-08-14 15:15:05
368,2016-04-25 20:03:38,"## Approach

My approach was to use `haveMergedPropsChanged` as the flag for `shouldComponentUpdate` and call 
`updateDispatchPropsIfNeeded` `updateStatePropsIfNeeded` based on the requirement.

I also added the following lines which needs to be run if required.

<S_CODE_TOKEN>

## Whats pending

conditionally run `updateDispatchPropsIfNeeded` `updateStatePropsIfNeeded` based on the requirement.
Currently 8 tests are failing 

<S_CODE_TOKEN>

I can work on it tomorrow. If someone wants to continue feel free to use what I have done.
",udnisap,2016-08-14 15:15:05
368,2016-04-26 01:39:55,"https://github.com/amccloud/react-redux/commit/d2a1fe3bc317e39ed49ffedb53a9835896a5015b

@gaearon  Now i'm stuck! I've gotten all but 3 test to pass:

<S_CODE_TOKEN>

I had to update one test now that re-rendering is now driven by setState. I think test failures 2 and 3 are similar issues. Test failure 1 is a bit different and @gaearon I was hoping you can look at it for me.

My notes: https://gist.github.com/amccloud/327a9d7b7dc97eaf6bb3f1f3da9e2d5e
",amccloud,2016-08-14 15:15:05
368,2016-05-01 00:27:11,"@gaearon is there a reason why the test `calls mapState and mapDispatch for impure components` expect 2 calls to mapState/mapDispatch on mount? For me only one should be required.
",slorber,2016-08-14 15:15:05
368,2016-05-01 01:51:22,"@gaearon it was quite hard and the code is not clean yet but I made all tests pass!

You can take a look at [#373]

At first I thought that I would never be able to make pass the last test related to the stale props when both parent/child are connected, because the transactionnal setState callback can be called multiple times in a single batch.

I had to use a trick like that:

<S_CODE_TOKEN>

@tgriesser I also succeeded make all the tests pass without using `checkMergedEquals`. Do you think there might be a missing test case?
",slorber,2016-08-14 15:15:05
367,2016-04-22 23:41:31,"In #363 we were discussing a potential refactor, and in that refactor I came across some interesting behavior. The `connect` function will default the `mapStateToProps` and `mapDispatchToProps` arguments if necessary. Here are the current conditions:
- `mapStateToProps` is defaulted to `defaultMapStateToProps` when the argument is a falsy value.
- `mapDispatchToProps` is defaulted to `defaultMapDispatchToProps` when the argument isn't a function and is a falsy value.

My question is what is suppose to happen when we pass an invalid truthy value? And should we be making all invalid values default to the default values? One repercussion of not doing so it passing invalid values to `wrapActionCreators` and then later to `bindActionCreators`, which will result in that functions thrown error instead of our own error handling. Thoughts?
",seanstrom,2016-07-10 17:18:22
367,2016-04-23 00:14:37,"Wherever possible we want to fail early on bad values. I haven't taken time to make the error messages great in this library so feel free to work on it!
",gaearon,2016-07-10 17:18:22
367,2016-04-23 00:51:29,"Cool I'll start working on this and I'll open a PR later, thanks for the quick response :smile: !
",seanstrom,2016-07-10 17:18:22
366,2016-04-22 20:21:05,"Related to #99 and the follow-up issues and pull requests.
I’d like to understand better in which cases we have the behavior described in https://github.com/reactjs/react-redux/issues/365#issuecomment-213575855:

> I dug into why this happens, and it seems like [returning a cached element in `render()`](https://github.com/reactjs/react-redux/blob/253ce8b3068d9d9bfe55f70a6f18a5fde313b326/src/components/connect.js#L324-L326) is not enough to prevent a re-render in some cases when there is an additional context between `<Provider>` and the `connect()`ed component [because of this check in `ReactReconciler`](https://github.com/facebook/react/blob/5ddfee8cfece399d686862f2ac2796b63eb78f00/src/renderers/shared/reconciler/ReactReconciler.js#L98).

Is just having another component providing context enough to trigger this? Is there any way we can work around this?
",gaearon,2016-08-14 15:15:30
366,2016-07-05 11:06:25,"I did some investigating into this and the issue seems to be caused by the following:
1. There is a component with getChildContext above the connected component (one will usually be Provider).
2. The cached element has getChildContext or an element above that re-renders has getChildContext.
2. React merges the contexts in _processChildContext by assigning to an empty object thus creating a new context object
3. New context object fails equality check thus stopping early bail out in ReactReconciler

Not sure how you can work around this. Changing the equality check in ReactReconciler to a shallowEquals check would work.
",foiseworth,2016-08-14 15:15:30
366,2016-07-05 15:36:41,"Thanks for looking into this!  Does the rewrite in #416 happen to eliminate this issue?
",markerikson,2016-08-14 15:15:30
366,2016-07-05 16:07:11,"416 doesn't cache the element, only the final props, since more aggressive shouldComponentUpdate() means render will only fire if it actually needs to rerender, so I would guess it does.?
",jimbolla,2016-08-14 15:15:30
366,2016-07-05 17:28:00,"Did some testing and and 416 fixes the issue and it does indeed seem to be down to shouldComponentUpdate. Some unscientific testing shows a massive perf increase as well. 
",foiseworth,2016-08-14 15:15:30
366,2016-07-08 12:31:27,"A similar situation is when the `Provider` itself gets re-rendered, as in:

<S_CODE_TOKEN>

This causes the context from `Provider` to be regenerated, so the `context === internalInstance._context` check fails. I'd guess that #416 fixes this too.
",DouglasLivingstone,2016-08-14 15:15:30
366,2016-08-09 15:48:49,"I did some further testing can confirm that this can be quite an issue if you're using context:

**What you would expect**
1. connect a component
2. change the store state
3. it re-renders and either it or something in between it and the next component has getChildContext
4. somewhere down the tree  a connected sub component is rendered
5. the sub component connect's shouldComponentUpdate will return true (because store state has changed)
6. the sub component connect's render method returns the cached element (because its calculated props haven't changed)
7. React uses cached element, perf win!

**What happens**
1. connect a component
2. change the store state
3. it re-renders and either it or something in between it and the next component has getChildContext
5. the return of getChildContext is merged with the previous getChildContext into an empty object
6. somewhere down the tree  a connected sub component is rendered
7. the sub component connect's shouldComponentUpdate will return true (because store state has changed)
8. the sub component connect's render method returns the cached element (because its calculated props haven't changed)
9. React detects that context is a different object and discards cached element
10. Element (and therefore tree) is re-rendered 

To combat it, in the short term I'm going to try to move all my getChildContext above my connected components.

In the long term I guess:
- we advise people to avoid using context with react-redux
- we switch to another method (should as shouldComponentUpdate) for not re-rendering child such as in https://github.com/reactjs/react-redux/pull/416
- we think about the behaviour of React and submit an PR to change it (I'm still thinking it should be a shallow compare rather than an equality check on context in React Reconciler).
",foiseworth,2016-08-14 15:15:30
366,2016-08-11 07:12:16,"One great example of this bug is if you wrap your top level component in connect. As it will wrap the Provider component which has getChildContext, anytime it re-renders (due to a store update which leads to a change in the output of mapStateToProps) the entire tree will re-render unless you have some non-connect shouldComponentUpdate logic.
",foiseworth,2016-08-14 15:15:30
365,2016-04-22 08:07:12,"When use NavigationExperimental/NavigationLegacyNavigator.js as navigator, all container components connected to redux store rendered by any action. 
Old navigator has not this problem.
",chenxiaohu,2016-04-22 20:19:51
365,2016-04-22 11:11:03,"Can you provide an example that reproduces this?
",gaearon,2016-04-22 20:19:51
365,2016-04-22 14:19:18,"[src.zip](https://github.com/reactjs/react-redux/files/231960/src.zip)

this example toggle navigator can reproduces.
",chenxiaohu,2016-04-22 20:19:51
365,2016-04-22 14:22:05,"I don’t know React Native well. How do I launch this repo?
",gaearon,2016-04-22 20:19:51
365,2016-04-22 14:29:19,"Do you ever try any React Native project, even Get started project?
",chenxiaohu,2016-04-22 20:19:51
365,2016-04-22 18:56:25,"Yeah. But usually they come with Xcode projects, don’t they?
",gaearon,2016-04-22 20:19:51
365,2016-04-22 19:27:12,"Okay, I got it to run. Can you please clarify _which exactly_ actions you do not expect to cause components to re-render?
",gaearon,2016-04-22 20:19:51
365,2016-04-22 20:19:50,"If I change `renderList(list)` in `Comment.js` to dispatch an action on click, I don’t get any log messages about re-renders:

<S_CODE_TOKEN>

Therefore, “any action” does not cause “all container components” to re-render, so it looks like there is no bug here.

When I run the app for the first time, I see this:

<S_CODE_TOKEN>

It looks correct to me: we first render the initial state, which is an empty screen, then we `REQUEST_POST_LIST` causes a re-render because there is a loading indicator now, and then `RECEIVE_POST_LIST` causes a re-render because the list is ready.

If I open a post’s comments, I see this:

<S_CODE_TOKEN>

The initial `@@Render CommentList for post: 4` is caused by the empty list appearing. It looks fine to me. The second `@@Render CommentList` also makes sense to me here: the comments are loaded so it’s time to render the actual list.

The one that doesn’t quite make sense to me is `REQUEST_COMMENT_LIST` causing `@@Render PostList. Requesting comments shouldn’t re-render the posts.

I dug into why this happens, and it seems like [returning a cached element in `render()`](https://github.com/reactjs/react-redux/blob/253ce8b3068d9d9bfe55f70a6f18a5fde313b326/src/components/connect.js#L324-L326) is not enough to prevent a re-render in some cases when there is an additional context between `<Provider>` and the `connect()`ed component [because of this check in `ReactReconciler`](https://github.com/facebook/react/blob/5ddfee8cfece399d686862f2ac2796b63eb78f00/src/renderers/shared/reconciler/ReactReconciler.js#L98).

I don’t fully understand in which cases this happens yet so I’ll file a separate issue for the future.
For now, you have two options to avoid this:

### Option 1

Remove `ownProps` from your `mapStateToProps` function in `Post.js`.
This will turn on the optimizations earlier, and that code path will be avoided altogether.

<S_CODE_TOKEN>

### Option 2

Add a custom `shouldComponentUpdate()` function to `Post.js` because React Redux could not optimize it in this particular case, and you need to do it manually.

<S_CODE_TOKEN>

I hope this helps!
",gaearon,2016-04-22 20:19:51
365,2016-04-22 23:01:36,"Great! your answer is prefect for me. thanks:)
",chenxiaohu,2016-04-22 20:19:51
364,2016-04-21 14:47:50,"Same as https://github.com/reactjs/redux/pull/1649
",stevemao,2016-04-21 14:53:32
364,2016-04-21 14:53:34,"Thanks!
",gaearon,2016-04-21 14:53:32
363,2016-04-21 05:59:31,"Hey so a number of us from the [ReactVegas](http://www.meetup.com/ReactVegas/events/230293695/) meetup spent some time talking about the codebase. We specifically talked about the `connect` function and the small piece of code that was doing the assignment of `mapDispatch`. In the end we went over a few ways of refactoring the code and decided that it may serve us well to submit a PR.

Here's where that input got us:
- The multiple assignments have been refactored to a single assignment and function call.
- The new function handles returning a function or an object or `defaultMapDispatchToProps`.
- The new function uses helpers from lodash to clean up type comparisons.
- The new function uses a switch statement at the moment, this seem to read well and I can provide more context on that decision. A valid alternative would be to use guard statements instead. :smile:

Overall we're excited to participate in the development of React-Redux, so any feedback is welcomed and appreciated. Thanks! :tada: 
",seanstrom,2016-04-22 20:26:18
363,2016-04-21 11:54:50,"Looks good, left one small nit.
",gaearon,2016-04-22 20:26:18
363,2016-04-22 20:26:18,"I’d like to leave it as is. I’m happy to take a more consistent refactoring that clears up some of the convoluted code we have right now. I think the convoluted code is inside the class, not outside it.

Adding something like `getMapDispatch` when we already have `computeDispatchProps`, `finalMapDispatchToProps`, `configureFinalMapDispatch`, `mapDispatch`, and `mappedDispatch` in the scope is only going to make it even more confusing. So I won’t take this, but I’m happy to consider a more comprehensive refactoring.

Thanks!
",gaearon,2016-04-22 20:26:18
363,2016-04-22 21:01:22,"No problem :smile:! I'm happy to try a different refactor later.
",seanstrom,2016-04-22 20:26:18
363,2016-04-26 02:33:03,"@seanstrom I'm working on some of the convoluted code in the connect class. Would appreciate your feedback https://github.com/reactjs/react-redux/issues/368
",amccloud,2016-04-22 20:26:18
362,2016-04-20 22:45:06,,pbernasconi,2016-04-21 12:44:53
361,2016-04-20 15:52:45,"We have a standard react-redux setup but we have a plain old api service class that need some of the information that we store in our redux state.  This service class is used by all of our components to access our backend.  

I understand that I could pass the info from a component to our service class functions but I would have to do that everywhere.

I can't seem to find a solution for this.  Has anyone else come across it?

Nathan
",nmaves,2016-04-20 16:05:34
361,2016-04-20 15:57:48,"The general answer to that is ""middleware"".  Either write a middleware that listens for custom actions you dispatch and makes the API calls itself, or something like redux-thunk that runs dispatched functions and injects the correct store functions.

http://chrispearce.co/redux-quick-hack-custom-thunk-apis/ explains the usefulness of thunks.  Also, if you look at the [Middleware](https://github.com/markerikson/redux-ecosystem-links/blob/master/middleware.md) page in my [Redux addons catalog](https://github.com/markerikson/react-redux-links), you'll find numerous examples of centralizing interaction with various external services.
",markerikson,2016-04-20 16:05:34
361,2016-04-20 16:05:34,"Yep, middleware is the way to go.

<S_CODE_TOKEN>
",gaearon,2016-04-20 16:05:34
360,2016-04-19 07:50:25,"Hello,
I tried to do a code splitting on route change.

When the route changes to '/register', i dynamically add ""registration"" as one of the root state using replaceReducer and it work just fine.
Once the registration completed i want to remove the reducer using replaceReducer again, but instead it return the following error :

> Unexpected key ""registration"" found in initialState argument passed to createStore. Expected to find one of the known reducer keys instead: ... Unexpected keys will be ignored.

Thanks in advance
",andreechristian,2016-04-19 10:25:13
360,2016-04-19 10:16:14,"I think you should file this in Redux proper, not React Redux. This is probably a bug but I’m not sure if there is a good fix for this other than disabling the warning altogether. 
",gaearon,2016-04-19 10:25:13
360,2016-04-19 10:16:32,"Note this is not an error. It is just warning. 
",gaearon,2016-04-19 10:25:13
360,2016-04-19 10:25:13,"Noted. I'll submit this bug on Redux. Thanks ya!
",andreechristian,2016-04-19 10:25:13
359,2016-04-19 04:24:36,"I don't know react-native or react-redux has the problem, but I think it be ignored if I post it as react-native's issues.

I created a project to reproduce this: https://github.com/cpunion/ReproRN24HMRWithReactRedux

**Create steps**

<S_CODE_TOKEN>

**Test steps**
- open ios/TestHMR24.xcodeproj
- run on simulator
- enable Hot Reloading

<img width=""322"" alt=""2016-04-19 12 10 59"" src=""https://cloud.githubusercontent.com/assets/8459/14627675/239fa314-0629-11e6-9bba-bef00f325a75.png"">
- touch reducer.js, has error

<img width=""321"" alt=""2016-04-19 12 11 12"" src=""https://cloud.githubusercontent.com/assets/8459/14627679/2aaa8016-0629-11e6-99bd-91b269fde30c.png"">
- touch reducer.js, get well
- After this step, hot reloading always success, just failed on first update.
",cpunion,2016-04-19 10:14:20
359,2016-04-19 04:45:12,"Updated repo, touch view may see the state changes.
",cpunion,2016-04-19 10:14:20
359,2016-04-19 05:26:30,"I found my code has error, react-native's HMR has different `module.hot.accept` method, it's not `accept(path, callback)`, it's `accept(callback)`, so it just used it in `configureStore` module. I fixed code, but same result.
",cpunion,2016-04-19 10:14:20
359,2016-04-19 05:32:46,"Used a workaround, just put store into a state or object field:

<S_CODE_TOKEN>
",cpunion,2016-04-19 10:14:20
359,2016-04-19 10:14:20,"This is not really our issue so closing. The error comes up if Provider receives a different store instance via props. It is up to you to figure out how to avoid it in your setup.
",gaearon,2016-04-19 10:14:20
359,2016-04-20 02:17:34,"@gaearon Thanks.

Is it a problem of `react-native` hot reloading? I found no problem in some `react-redux` hot reloading examples likes https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/client.js#L46
",cpunion,2016-04-19 10:14:20
359,2016-04-20 12:10:55,"I don’t know. You can ask in their repo :-)
",gaearon,2016-04-19 10:14:20
358,2016-04-18 12:51:38,,koistya,2016-04-18 14:55:53
358,2016-04-18 12:57:35,"Any particular reason you prefer this style?
",gaearon,2016-04-18 14:55:53
358,2016-04-18 13:11:52,"Less variable declarations, smaller code, maybe a bit more efficient (?)
",koistya,2016-04-18 14:55:53
358,2016-04-18 14:56:09,"I wouldn’t think either is more efficient but I’m OK with this, it does read easier on eyes.
",gaearon,2016-04-18 14:55:53
357,2016-04-18 04:22:55,"I have a reduced test case here:
- http://codepen.io/jokeyrhyme/pen/wGjxNo

When my `componentDidMount()` method throws, the store subscription set up within `connect()` doesn't work, so neither my `mapStateToProps()` function nor `render()` method are called.

As it happened, in this particular case I wasn't able to review the console log live, so I did not immediately notice that my `componentDidMount()` was broken.

Should the `connect()`ed component be more resilient to lifecycle bugs caused by the wrapped component?

I'm not really sure there's much that can be done here. But I figured I'd leave a trail just in case someone else has a similar problem.
",jokeyrhyme,2016-04-18 10:07:16
357,2016-04-18 10:07:16,"When React officially supports error boundaries (https://github.com/facebook/react/pull/5602 started work on this, and you can track it in https://github.com/facebook/react/issues/2461), you’ll be able to catch those errors. We can’t really do anything on the library level here because it’s impossible to guess every possible combination of things going wrong.
",gaearon,2016-04-18 10:07:16
356,2016-04-17 17:42:07,"I'm trying to use redux with react-redux react-router-redux and redux-immutable and I get an error when the initial  `@@router/LOCATION_CHANGE` action is triggered:

<S_CODE_TOKEN>

My Root component looks as follows:

<S_CODE_TOKEN>

I have implemented a custom `routerReducer` to work with immutable, as explained in the react-router-redux docs:

<S_CODE_TOKEN>

This is my dev configureStore:

<S_CODE_TOKEN>

And my initial rendering:

<S_CODE_TOKEN>

I've been trying all evening multiple things but I have not been able to figure out what is the problem 😞 
",remojansen,2016-04-17 18:11:36
356,2016-04-17 18:11:36,"Have you had a chance to look at the source of `<Provider>`? It’s smaller than your example code 😉 .
[The line in question](https://github.com/reactjs/react-redux/blob/e06a0a730490dddc669157bff2d751bce987681b/src/components/Provider.js#L43) executes when `<Provider>` receives a different `store` instance as a prop.

This likely means

<S_CODE_TOKEN>

executes not once, as you probably intend, but multiple times, so two stores are created rather than one. You may set a `debugger` statement there and see why it happens. I hope this helps!
",gaearon,2016-04-17 18:11:36
356,2016-04-18 00:52:24,"Thanks! I have found the issue, I was running my unit tests sharing some stubs and the same instances were shared between multiple unit tests.
",remojansen,2016-04-17 18:11:36
356,2016-04-18 10:11:11,"👍 
",gaearon,2016-04-17 18:11:36
355,2016-04-15 02:35:00,"Most examples assume that all of your html markup will live in either the root component or one of its children like this.

<S_CODE_TOKEN>

I'm working on a project where we are parsing an html page and looking for a custom html tag for example

<S_CODE_TOKEN>

**If we find this tag we render a react component where this tag used to be.** There can be many of these tags on an html page. This worked before no problem since we could just call render once per tag and it would replace it. **Just to be clear, the entire page is NOT a react app we only render react components into these special placeholder tags and the rest of the page is just regular html.**

Is it possible to do the same with react-redux? All the examples I have seen contain a single render at the highest level that has the provider as a wrapper. How could I accomplish multiple renders into specific placeholder tags but still benefit from a redux global store? I've looked into dangerouslySetInnerHtml but it seems to be frowned upon for security reasons. It also doesn't really accomplish what I want since it ends up rendering these placeholder tags directly into the html when what I really want to do is replace each one of these tags with a react component render.  I've been stuck on this for awhile so any and all help would really be appreciated. Thank you.
",davidlivingrooms,2016-04-15 03:42:12
355,2016-04-15 03:02:25,"`Provider` is very simple. It just passes the given `store` to the `context`. So you can have multiple providers on a page. Just give them the same instance of `store`.

<S_CODE_TOKEN>
",anatoliyarkhipov,2016-04-15 03:42:12
355,2016-04-15 03:42:12,"Yep, that should work.  @GrumpyPants , if you have more concerns beyond that let us know, but yeah, simply rendering multiple providers with the same store reference should do exactly what you want.
",markerikson,2016-04-15 03:42:12
355,2016-04-15 03:47:19,"This is great to hear. I started looking for workarounds before even trying to do the multiple render so that's on me. Sorry for the time-waste and thanks for the help :)
",davidlivingrooms,2016-04-15 03:42:12
355,2016-04-15 03:52:30,"Sure.  Usage questions are generally better off on Stack Overflow rather than here, but it is admittedly a more niche use case you were asking about.
",markerikson,2016-04-15 03:42:12
355,2016-09-29 17:01:41,"@GrumpyPants Do you have a public repo that shows how you implemented rendering of multiple `<Provider>` components for a shared store? More specifically, is there any way you've found to do this while still creating container components via `{ connect }`? 

Feel free to email me at todd.groff@gmail.com as this is not so much a bug as a use case question like Mark stated.
",toddgroff,2016-04-15 03:42:12
355,2016-09-29 17:18:29,"@toddgroff : the example that @anatoliyarkhipov gave should be the basic idea.  Create one store instance, then call `ReactDOM.render()` multiple times with your different component trees.
",markerikson,2016-04-15 03:42:12
355,2016-10-17 18:17:25,"Hi I'm having the same issue I have 2 ReactDom.render() but for whatever reason when I do an action on component (A) component (B) does not update. What I'm trying to do is just turn a value from true to false. When I change the value, Component (A) reacts to it and updates but Component (B) stays the same.

const createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);

<S_CODE_TOKEN>
",jaysg,2016-04-15 03:42:12
355,2016-10-17 18:23:01,"@jaysg Looks like you're creating 2 instances of your store instead of just one.
",jimbolla,2016-04-15 03:42:12
355,2016-10-17 18:32:39,"@jimbolla thanks thats what it was. I created a variable for the store and now it works.

just in case someone one sees this and it's going through the same thing.

<S_CODE_TOKEN>
",jaysg,2016-04-15 03:42:12
354,2016-04-14 09:24:10,"Fixes https://github.com/reactjs/react-redux/issues/353
",adrian-bobev,2016-04-14 15:20:48
354,2016-04-14 15:20:48,"The new link here is wrong too, the repository simply doesn't exist anymore and we'll switch back to airbnb. See @gaearon's comment in #353 – thanks so much for notifying us of the issue and even submitting this PR though, we appreciate it a lot!
",mxstbr,2016-04-14 15:20:48
353,2016-04-14 09:23:15,"The link to the eslint configuration is wrong. I guessed it should be https://github.com/pwmckenna/eslint-config-rackt
because in the package.json it looks that this package is used.
",adrian-bobev,2016-08-16 23:52:10
353,2016-04-14 11:54:55,"I _think_ the repo for that doesn't exist anymore, but maybe it got moved and I missed it – @mjackson any input here?
",mxstbr,2016-08-16 23:52:10
353,2016-04-14 14:40:17,"Yeah it’s dead and we plan to switch back to airbnb: https://github.com/reactjs/redux/pull/1559
",gaearon,2016-08-16 23:52:10
353,2016-04-14 15:22:32,"I've closed #354, but let's keep this issue open to remember to change the documentation when reactjs/redux#1559 is merged!
",mxstbr,2016-08-16 23:52:10
352,2016-04-13 16:23:33,"`warning()` has the same check.
",ratson,2016-04-14 16:12:03
352,2016-04-14 16:12:08,"Thanks!
",gaearon,2016-04-14 16:12:03
351,2016-04-13 14:59:34,"4.4.4 has a change that breaks my current solution.
I'm cleaning the state dispatching the action in the componentWillUnmount. It never caused Connect method invocation after unmount happend.

Next is how I'm using connect:

<S_CODE_TOKEN>

Tested on 4.4.1, 4.4.2, 4.4.3, 4.4.4
",2j2e,2016-04-14 16:11:33
351,2016-04-13 15:44:56,"Ah, good point, thanks.
",gaearon,2016-04-14 16:11:33
351,2016-04-13 15:54:24,"Hmm, no, I can’t reproduce it.

I added a test confirming `setState()` doesn’t get called when you dispatch from `componentWillUnmount`: 85982f64ed891c6e191e46a1d076edf569670f2e.

Do you mind providing a reproducible test case showing otherwise?
",gaearon,2016-04-14 16:11:33
351,2016-04-13 18:00:39,"The issue can be reproduced when you have a child component which fetched by parent.
Initial state: `data = null`
Fetched state: `data: { profile: {...}  }`
Clean state: `data = null`
Child connects to `data.profile`
I feel it's not a good way to use nullable object properties. But this was missed during code writing. With 4.4.4 this issue appeared. So do we have an issue on both sides? Or only my side?

<S_CODE_TOKEN>

Simple actions:

<S_CODE_TOKEN>

Reducers:

<S_CODE_TOKEN>
",2j2e,2016-04-14 16:11:33
351,2016-04-13 22:48:03,"I’d really appreciate if you could fold this into a standalone project on GitHub. Thanks!
",gaearon,2016-04-14 16:11:33
351,2016-04-14 12:32:12,"I tried adding this test based on your sample:

<S_CODE_TOKEN>

For me, it fails consistently in 4.4.4, 4.4.3, and 4.4.0.
",gaearon,2016-04-14 16:11:33
351,2016-04-14 13:09:24,"Able to reproduce with a slightly different test case. Looking into it.
",gaearon,2016-04-14 16:11:33
351,2016-04-14 16:15:03,"Should be fixed in 4.4.5.
Thank you for reporting.
",gaearon,2016-04-14 16:11:33
351,2016-04-14 16:20:20,"Thank for the quick fix. Sorry that I was not able to make a test projects in time and you did it by yourself.
",2j2e,2016-04-14 16:11:33
351,2016-04-14 16:21:20,"No problem.
I almost gave up but then figured out how to do it without giving up perf improvements in 4.4.4. :smile: 
",gaearon,2016-04-14 16:11:33
351,2016-06-10 06:40:46,"I don't understand what was changed but 4.4.4 and 4.4.5 breaks my current solution :)
The render function is calling and locale is fine when i dispatch **setLocale**, but **FormattedMessage** doesn't change the message. Looks like FormattedMessage doesn't get new props or something. It works on previous releases, and i did double check that issue reproduces only with react-redux 4.4.4 and 4.4.5
I will investigate the bug late, but for now here is my component

<S_CODE_TOKEN>

@gaearon thx
",DmitryAuine,2016-04-14 16:11:33
351,2016-06-10 08:02:28,"<S_CODE_TOKEN>

and 

<S_CODE_TOKEN>

in both locale is 'ru', i'm changing 'en' to 'ru'
",DmitryAuine,2016-04-14 16:11:33
350,2016-04-13 01:23:04,"Hello,

I'm new to react-native and I've been attempting to integrate Redux into react-native.

I get an odd error and I'm not certain what it may be that is going wrong.

heres a link to [StackOverFlow](http://stackoverflow.com/questions/36586902/trouble-integrating-redux-into-react-native)
",kennetpostigo,2016-04-13 01:29:42
350,2016-04-13 01:29:42,"Posting questions on SO is good, but don't think there was really a reason to open an issue just to point to the SO question.

Also note that you can often find help in the Reactiflux chat channels on Discord - invite link is at http://www.reactiflux.com.
",markerikson,2016-04-13 01:29:42
349,2016-04-13 00:50:59,"Hey @gaearon ,
Something I don't understand.
Why the function `e1` and `_.get` are treated differently? Is it also due to different identity of function, or something else?
",haohcraft,2016-04-13 16:02:20
349,2016-04-13 16:02:20,"I don’t think the difference you seem to talk about has relation to functions and their identities.

Here, you calculate `eVal` once, so `.e` field of both objects points to the same object. This is why the shallow comparison returns `true`.

<S_CODE_TOKEN>

Here, you call `e1()` two times, so it produces two different `{ a: 2 }` objects. `{}` notation creates a new object every time in JavaScript. So the first `.e` is not referentially equal to the second `.e`, even though they are deeply equal. This is why the shallow comparison returns `false`.

<S_CODE_TOKEN>
",gaearon,2016-04-13 16:02:20
349,2016-04-13 19:10:52,"thanks for such helpful explanation 
",haohcraft,2016-04-13 16:02:20
348,2016-04-12 19:06:28,"This should fix https://github.com/reactjs/redux/issues/1437 and #300.

If the component doesn’t care about `ownProps`, we can bail out of calling `setState()`.
This PR implements this optimization.

As a reminder, we can’t do this for components that _do_ care about `ownProps` due to #99.

---

Above, I said:

> As a reminder, we can’t do this for components that _do_ care about `ownProps` due to #99.

_However_ in many cases it’s possible to convert a component that needs `ownProps` to a component that doesn’t.

How? In #279, we added the ability to specify factories instead of `mapStateToProps` and `mapDispatchToProps`. Curiously, these factories _themselves_ do receive `state` and `ownProps` as arguments. Of course, they are only invoked once, **but if you’re only using `ownProps` to read an ID** (which is a common case in large lists) and use stable `key`s, you should be able to change

<S_CODE_TOKEN>

into

<S_CODE_TOKEN>

See? Obviously `id` would never get updated, but we don’t need it to (in this particular case). And we can always add `ownProps` later (of course at the performance cost).

I think it’s a neat trick, and it will benefit from merging this optimization, since this optimization is relevant to any `mapStateToProps` that doesn’t depend on `ownProps`.
",gaearon,2016-04-12 19:15:44
348,2016-04-12 19:09:29,"cc @slorber, @ellbee, @tgriesser who might be interested in this
",gaearon,2016-04-12 19:15:44
348,2016-04-12 19:26:56,"This one looks like a clear win to me, but I wonder if it would be worth working on a benchmark suite again like the one started in #104? I've used benchmark.js before, but not for testing UI code. Is it even really feasible?
",ellbee,2016-04-12 19:15:44
348,2016-04-12 19:28:09,"For now, I’m testing against https://github.com/mweststrate/redux-todomvc manually.
My work in progress on optimizing app itself to Redux patterns is in https://github.com/mweststrate/redux-todomvc/pull/1.
",gaearon,2016-04-12 19:15:44
348,2016-04-12 19:29:42,"Yeah, I have just been reading through that issue. It is what made me start thinking about it. I might have a play around with it.
",ellbee,2016-04-12 19:15:44
348,2016-04-12 19:30:20,":+1: 
",gaearon,2016-04-12 19:15:44
348,2016-04-12 19:31:08,"Oh wait, I’m supposed to emoji your post inline.
",gaearon,2016-04-12 19:15:44
348,2016-04-12 23:07:55,"@gaearon this is great news that connect not using component's props get faster :)

However I'm not sure the current implementation is the best we could do:
- The factory method works but is kind of unintuitive API at first
- If a connected component do care about ownProps, and these props can change (ie can't use the factory), then the component will setState even if the props don't change often

Instead of 

<S_CODE_TOKEN>

I would rather have something like:

<S_CODE_TOKEN>

(this is probably not the best API but you get the idea)

What it permits here is to make it clear on what the mapping function has to rely on to do its job, so you can more easily detect when props needed for the mapping have changed and run the mapper only when needed

And I think, by default, not providing any ownProps to the mapping function (ie no selector provided) would actually encourage people to write more optimized code by default (unlike factories which would be opt-in optimization), but it would be a breaking change

(This is related to my proposal  for more flexible subscriptions here: https://github.com/reactjs/react-redux/issues/269#issuecomment-175904958)
",slorber,2016-04-12 19:15:44
348,2016-04-13 00:00:02,"I’m confused: how does accepting a selector for props solve the problem of `setState()`? As soon as something depends on `ownProps`, due to #99, we are forced to delay its calls until `render()` at which point we have already paid the price of `setState()`.
",gaearon,2016-04-12 19:15:44
348,2016-04-13 01:54:31,"Sorry if I'm going on a tangent with this comment but I'll share some performance optimizations I implemented earlier this month when I rewrote [`react-redux-provide`](https://github.com/loggur/react-redux-provide).  These optimizations might not perfectly translate to `react-redux` but perhaps similar algorithms could be implemented.

I added a `watch` method to the store which accepts a `reducerKey` and a `callback` function to be called whenever the reducer returns a different state (via a reducer enhancer).  The declarative nature of `react-redux-provide` makes it possible to automatically efficiently watch for changes to the relevant reducers, and in which case, a `doUpdate` flag is raised so that we can simply call `forceUpdate` after the action has completed, since we already know some relevant state has changed.  The wrapped component's props are cached and updated accordingly per reducer.  This means no need for shallow comparisons or loops, and `shouldComponentUpdate` can always return false (unless the component receives new props of its own, of course).  And so updates should be near instantaneous as they, in theory, only require a few clock cycles per relevant component - i.e., new state -> relevant components -> update.

Condensed version:

<S_CODE_TOKEN>

See the full version where the same method is used for props derived from some combination of state and own props:
https://github.com/loggur/react-redux-provide/blob/master/src/provide.js#L93-L212

To elaborate a little bit more, deriving props from a combination of state and own props looks like this:

<S_CODE_TOKEN>

There are already [tests to ensure renders occur only as absolutely necessary](https://github.com/loggur/react-redux-provide/blob/master/test/index.spec.js#L75), but more in-depth performance tests are coincidentally next on my todo list.  I was planning on seeing how things perform when incorporated into [`dbmon`](https://github.com/ryanflorence/reactconf-2015-HYPE/tree/master/demos/01-dbmon), but I think I'll also run some benchmarks on [`react-redux-provide/examples/todomvc`](https://github.com/loggur/react-redux-provide/tree/master/examples/todomvc).
",timbur,2016-04-12 19:15:44
348,2016-04-13 09:51:59,"> I’m confused: how does accepting a selector for props solve the problem of setState()? As soon as something depends on ownProps, due to #99, we are forced to delay its calls until render() at which point we have already paid the price of setState().

@gaearon sorry it's hard to think well on such code late in the night :) My proposal may not prevent the `setState` cost finally.

The problem I see with current code is that for example if this component changes from

<S_CODE_TOKEN>

 to 

<S_CODE_TOKEN>

then yes we necessarily have to do a `setState` because ownProps have changed and we must render the child. The problem is that here our `mapStateToProps` is relying on ownProps but actually does only care about the `id`, and not `className`.

This line:

<S_CODE_TOKEN>

it will make `mapStateToProps` be run in such a case, while it could have been avoided if we could have known that `mapStateToProps` is not interested to receive the `className` property but only the Todo id.

Also, not a big deal, but not sure `this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1` is relyable if someone writes mapStateToProps with `arguments[0]` (yes it is unlikely... :p). It would become more relyable if that wish to depend on ownProps was more explicit

---

This is only what I can say for now, I have to study the code a bit more to say anything else :) (ie #99)
",slorber,2016-04-12 19:15:44
348,2016-04-25 04:57:08,"@gaearon Here is [my use case](https://github.com/yelouafi/redux-saga/issues/241#issuecomment-207202589), in which early bailout yields significant performance boost.

With regards to @slorber's concern that props _can_ change, I encountered a similar issue, and I did this hack to get around it.

Let's say we have:

<S_CODE_TOKEN>

Of course, userID isn't expected to change, but there may be some cases where it does. For example, the above component may be a react-router route component, which gets its userID from the pathname: `http://example.com/userpage/cat`. When the path changes to `http://example.com/userpage/dog` the component holds on to stale userID (cat) and this causes problems. (because react router doesn't re-mount for the same route)

I _could_ revert back to `mapStateToProps (state, ownProps)`, but I would loose the performance boost gained from the early bailout. So instead, I do this:

<S_CODE_TOKEN>

Because of key, when userID is changed, the old component is completely unmounted, and new one is mounted instead, with the updated props. It's a bit hacky, but I think this is an acceptable trade-off. I guess for multiple props that aren't expected to change often I can stringify as a key:

<S_CODE_TOKEN>

but that .. is beyond ugly. It does bother me there are so many different steps within different levels involved in simply invalidating and updating a component, but was the only way I could make this work.
",joonhyublee,2016-04-12 19:15:44
348,2016-04-26 12:06:53,"nice trick @joonhyublee :D 

Maybe this usecase will be easier to handle once the code of connect becomes much simpler, and it might with https://github.com/reactjs/react-redux/issues/368
",slorber,2016-04-12 19:15:44
347,2016-04-12 11:19:47,"Hi there,

I'm using Redux (v3.4.0) with `react-redux` (v4.4.2) from a React Native (v0.23.1) app. I've set up RNs built-in hot reloading for the redux store as described [here](https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html#redux-stores).

However when editing the file where I use `<Provider>` the following error is thrown:

<S_CODE_TOKEN>

Here's the relevant code:

**app.js**

<S_CODE_TOKEN>

**configureStore.js**

<S_CODE_TOKEN>

I've checked for duplicate react versions via `npm ls react`, but results in single dep: `react@0.14.8`

Anyone can point me into the write direction, what's going wrong in my code?

Thanks in advance.
",winterbe,2016-04-12 15:33:18
347,2016-04-12 15:33:18,"If you change the component that creates the store, `store = createStore()` will re-execute and you will get a new store. Either don’t change that component while you work on the app (do you often need to change the root component?), or create store in `index.js` and pass it as a prop so you can work on the component independently.
",gaearon,2016-04-12 15:33:18
347,2016-04-12 15:41:08,"Thanks for your input. The App component barely changes so it's not that big of an issue. I wasn't entirely sure if I've set up all correctly but the crucial part of hot reloading (changing reducer code) seems to work well, so I guess I'm good to go. :dancers: 
",winterbe,2016-04-12 15:33:18
347,2016-09-14 15:34:55,"@gaearon Does this mean that I just have to accept that I won't be able to hot-reload when working on my flow-control logic (thunks, sagas)? 
",Thorbenandresen,2016-04-12 15:33:18
346,2016-04-11 03:31:41,"Such as

<S_CODE_TOKEN>

But it seems not work
",Tinple,2016-04-11 04:37:29
346,2016-04-11 03:48:30,"Pretty sure the answer is ""no"".  As far as I know, both of those simply pass along their children, and do not directly render any HTML themselves.  Therefore, there is no tag to apply ""className"" or ""style"" to.

What are you trying to accomplish?
",markerikson,2016-04-11 04:37:29
346,2016-04-13 16:13:47,"You would need to add them to the actual root component that renders some DOM instead. Usually that would be the component corresponding to the top-level route.
",gaearon,2016-04-11 04:37:29
345,2016-04-10 22:50:40,"Not sure if you care about this, but I was browsing the source code and noticed you were still using a string ref. I just updated it to a callback ref.
",jisaacks,2016-08-14 15:21:29
345,2016-04-12 11:51:48,"Good call. I know some people may be relying on exact ref name in their test cases so I’ll probably hold this off until the next major.
",gaearon,2016-08-14 15:21:29
345,2016-08-14 15:21:29,"Superseded by #416. (Sorry, JD!)
",timdorr,2016-08-14 15:21:29
345,2016-08-14 15:33:46,"lol @timdorr, no worries :)
",jisaacks,2016-08-14 15:21:29
344,2016-04-09 16:01:56,"With this `index.android.js`:

<S_CODE_TOKEN>

I'm getting the red screen error in native device (tested in Android 5.0 and Android 4.3).

<S_CODE_TOKEN>

Am I doing something wrong or this is a redux with react-native issue?
",miqmago,2016-04-12 15:31:43
344,2016-04-12 15:31:43,"It should be the other way around. `<Provider>` should be around the root element that you render, or at least it should be around any element that uses a `connect()`ed component.

<S_CODE_TOKEN>
",gaearon,2016-04-12 15:31:43
343,2016-04-08 21:59:45,,trevordmiller,2016-04-08 23:10:51
343,2016-04-08 23:10:51,"Thanks but the current range is sufficient. Please see my comment in https://github.com/reactjs/react-redux/pull/342#issuecomment-207642767.
",gaearon,2016-04-08 23:10:51
342,2016-04-08 20:41:01,"Current issue:

<S_CODE_TOKEN>
",antoinerousseau,2016-04-08 23:10:22
342,2016-04-08 23:10:22,"The current range matches any 15.x release including `15.0.1`.
Please refer to the official [npm semver calculator](http://semver.npmjs.com/):

<img width=""707"" alt=""screen shot 2016-04-09 at 00 08 58"" src=""https://cloud.githubusercontent.com/assets/810438/14399713/4f10a178-fde7-11e5-9e55-d4cc25d1a3fe.png"">

You probably have issue due to some other package. npm just prints all of them rather than the one causing the problem, which is the common source of confusion.
",gaearon,2016-04-08 23:10:22
342,2016-04-08 23:15:37,"Updated from NPM 2 to NPM 3 and this issue disappeared.
",antoinerousseau,2016-04-08 23:10:22
342,2016-04-08 23:21:37,"Hmm, weird. Could npm@2 have different behavior?
",gaearon,2016-04-08 23:10:22
342,2016-04-08 23:22:06,"Are you sure this wasn’t an issue due to any other dependency?
",gaearon,2016-04-08 23:10:22
342,2016-04-08 23:28:47,"Well the error message is pretty explicit to me... here is the full output I got:

<S_CODE_TOKEN>

I read 

> The package react@15.0.1 does not satisfy its siblings' peerDependencies requirements!

followed by 

> react-redux@4.4.1 wants react@^0.14.0 || ^15.0.0-rc.1

Which to me means that `react@^0.14.0 || ^15.0.0-rc.1` does not match `react@15.0.1`, but I could be wrong...
",antoinerousseau,2016-04-08 23:10:22
342,2016-04-08 23:35:47,"Yeah, this is why I said above:

> You probably have issue due to some other package. npm just prints all of them rather than the one causing the problem, which is the common source of confusion.

The reason peer dependency check failed are these packages:

> npm ERR! peerinvalid Peer react-big-calendar@0.9.8 wants react@^0.14.0-beta1
> npm ERR! peerinvalid Peer react-dom@0.14.8 wants react@^0.14.8
> npm ERR! peerinvalid Peer material-ui@0.15.0-alpha.2 wants react@^0.14.0
> npm ERR! peerinvalid Peer react-tap-event-plugin@0.2.2 wants react@^0.14.0

The rest are fine, and once you fix those packages, the other lines won’t be there either. I know this is super confusing but that’s just the way npm@2.x works.

I verified this on a clean project here: https://github.com/reactjs/react-redux/pull/332#issuecomment-207647393
",gaearon,2016-04-08 23:10:22
341,2016-04-08 18:06:51,"Figured it out!

This is an issue I first posted on Stackoverflow, but I've since moved to this plugin.

I have an idea of whats happening here. The parent props.state is updating before the child state, and then the parent state doesn't update, even though the child has a new state that has not been updated yet. Is there anyway for me to get around this, or is there a react-redux solution?

---

Original Post:

Kind of an interesting problem... 

I have a set of components that all use connect to get the state. These components are often children of each other, sometimes deeply nested children.

I want these components to shouldComponentUpdate only when the state changes, otherwise return false. The states are immutable Maps, and I use the is(...)to verify equality. The problem is that when the state changes, some of them see the change, and some of them appear to get an old state, and see no changes. If I complete another action that changes the state, they see the previous state, but not the most recent.

Any ideas? No middleware here.

*Edit... Code. There are a lot of pieces here so bear with me

<S_CODE_TOKEN>
",l2silver,2016-04-08 20:24:16
341,2016-04-09 00:44:25,"So, uh... if you figured it out, what was the issue and the fix?  Please don't leave us with another [DenverCoder9](https://xkcd.com/979/) situation :)
",markerikson,2016-04-08 20:24:16
341,2016-04-10 20:17:58,"Yeah sorry, basically the problem was my components weren't pure. I was doing this

<S_CODE_TOKEN>

Both components would update when the state would change, but the child state would not receive the new name from the parent component. So the order of change threw me off. It went like this.

All components connected to the state immediately rerender, with the state being the only thing that changed. Then components receive changes from the parent. 
",l2silver,2016-04-08 20:24:16
340,2016-04-08 02:38:34,"Error: Cannot find module './modules/es5'
    at Function.Module._resolveFilename (module.js:339:15)
    at Function.Module._load (module.js:290:25)
    at Module.require (module.js:367:17)
    at require (internal/module.js:16:19)
    at Object.<anonymous> (/Users/lambert/Dev/React-Native/example-react-native-redux/Counter/node_modules/react-native/node_modules/babel-polyfill/node_modules/core-js/shim.js:1:63)
    at Module._compile (module.js:413:34)
    at Object.Module._extensions..js (module.js:422:10)
    at Module.load (module.js:357:32)
    at Function.Module._load (module.js:314:12)
    at Module.require (module.js:367:17)
",Lambert-S,2016-04-08 02:49:01
340,2016-04-08 02:48:57,"Sorry, that really doesn't look like a React-Redux problem.  The stack trace makes it look like it probably has more to do with the ""core-js"" library that Babel uses to help implement ES6 behavior.

Also, just dumping a stack trace, with no explanation of what you're doing or what you might have looked at to try to fix the problem, is not a good way to try to get help.  
",markerikson,2016-04-08 02:49:01
339,2016-04-08 01:28:16,"Hello - 

I looked through the issues and I do not see this a reference to this.

I have 2 projects with the exact same package dependencies with the exception of one being a react web app the the other being react native.  I just started the native app with the following package.json dependencies: 

<S_CODE_TOKEN>

The app works fine until I try to import the Provider into my root node:

<S_CODE_TOKEN>

The app then throws an error on the iOS simulator just from importing Provider and not even using it.  I am using the iPhone 5 on v 9.3

<S_CODE_TOKEN>

Here is my .babelrc as I have seen

<S_CODE_TOKEN>

I have verified that I only have one instance of react installed.  I have pruned my node_modules.  I am really not sure where to go next with this issue and would love all any help that can be provided.

Thanks,

Jordan
",jordanpapaleo,2016-04-08 17:45:01
339,2016-04-08 01:47:03,"Well, as a first observation: you only need a single ""stage"" preset.  The lower numbered presets include the higher stages as well.
",markerikson,2016-04-08 17:45:01
339,2016-04-08 04:35:57,"That makes sense.  Thanks for the tip. That exact config does work with the non react web app.  I'll make that update though. 

Sent from my iPhone

On Apr 7, 2016, at 6:47 PM, Mark Erikson notifications@github.com wrote:

Well, as a first observation: you only need a single ""stage"" preset. The lower numbered presets include the higher stages as well.

—
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
",jordanpapaleo,2016-04-08 17:45:01
339,2016-04-08 05:40:42,"I removed the `babel-preset-stage-1` dependency from my node_modules and my .babelcr, I deleted and reinstalled my node_modules.  I still get the same error.  As soon as I comment out the Provider import from react-redux it works again.

I saw a post about using `babel-preset-react-native-stage-0` and tried it but still have the same error..

Thank you for your help with all of this.
",jordanpapaleo,2016-04-08 17:45:01
339,2016-04-08 05:52:35,"Hmm.  Some quick searching turns up https://github.com/babel/babel-loader/issues/132 , https://github.com/reactjs/react-redux/issues/206 , and https://github.com/facebook/react-native/issues/4062 .  Summary seems to be that there is most likely another .babelrc file _somewhere_ in your loading path that is getting used, and that is causing Babel to choke on old options.
",markerikson,2016-04-08 17:45:01
339,2016-04-08 17:45:01,"Ok so I used a different package for babel and now it seems to be working.  Here is my current config:

**package.json**

<S_CODE_TOKEN>

**.babelrc**

<S_CODE_TOKEN>

Thanks for stepping through this with me.

Jordan
",jordanpapaleo,2016-04-08 17:45:01
338,2016-04-06 19:17:58,"Needed to check if the component is pure to determine whether we can rely on `checkMergedEquals` behavior in setting the updated merged props. Fixes #337, test included.
",tgriesser,2016-04-08 23:17:30
338,2016-04-08 23:20:13,"Big thanks for fixing this so quickly.
",gaearon,2016-04-08 23:17:30
337,2016-04-06 16:16:45,"When an impure connected component is re-rendered due to its parent's state changing, its `shouldComponentUpdate` returns true, but if a non-default `mergeProps` is supplied then `checkMergedEquals` will also be true, causing the component to only update if its `nextMergedProps` have changed from the previous `mergedProps`.

In this [JSFiddle example](http://jsfiddle.net/mz2ajLko/1/), I would expect the root component's `setState` to trigger a re-render of the `PartComponent` and both of the impure components, but since the second impure component has a custom `mergeProps`, it doesn't update.

<S_CODE_TOKEN>
",DouglasLivingstone,2016-04-08 23:17:30
337,2016-04-08 23:19:54,"Fixed in 4.4.2.
",gaearon,2016-04-08 23:17:30
336,2016-04-06 15:14:08,"Coming from line:

<S_CODE_TOKEN>

I think it's coming from a double dependency of react, here is my package.json:

<S_CODE_TOKEN>

I tried to delete : nodes_module/react but still have the problem.

`npm ls react` : 

<S_CODE_TOKEN>

npm -v : 2.14.22
node -v: 4.4.0

What Am i missing here?

Thanks in advance,
",fxhereng,2016-04-09 00:08:15
336,2016-04-06 15:36:15,"First run `npm prune` which will remove extraneous packages. If that hasn't worked it's probably a problem with npm's cache being being out of sync; run `npm cache ls` which will list the dependencies saved in cache; if react is there you can use `npm cache clean [name of dependency]` which will remove the dependency from cache.
",alex-deas,2016-04-09 00:08:15
336,2016-04-06 15:49:23,"I just followed all the instructions you told me, but I'm still getting the error
",fxhereng,2016-04-09 00:08:15
336,2016-04-09 00:08:15,"Please file this with React Native. We’re just using `react` package so any such issue is likely on their side.
",gaearon,2016-04-09 00:08:15
335,2016-04-06 08:28:38,"This should fix #309
",chentsulin,2016-04-12 11:53:26
335,2016-04-12 11:53:28,"Thanks!
",gaearon,2016-04-12 11:53:26
335,2016-08-11 16:41:08,"Thanks for this. Knee deep in containers. Very helpful.
",hogganbeck,2016-04-12 11:53:26
334,2016-04-04 14:27:01,"hi,I'm new to this

the error message is 
`browser.js:40 Uncaught Invariant Violation:`mapStateToProps`must return an object. Instead received [object Object].`
1.

<S_CODE_TOKEN>

(from egghead )
this will throw the error,but I don't know why.

But if I not using `return` before `state.todos.map` it is fine

2.

<S_CODE_TOKEN>

if I change to this it will not change the store 

3.
only 

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

can successfully update the store and no error message,but this will also change the prev state,

how can I change this code?  Thanks for reply.
",EasonWang01,2016-04-12 15:49:13
334,2016-04-04 17:09:24,"If you found the solution please share it in a comment so other people who find this issue know how you solved it. Thanks!
",gaearon,2016-04-12 15:49:13
334,2016-04-04 23:55:57,"I was using below works good ,but still don't know why others give error when it return `[object Object]`but still  says `must return an object`

<S_CODE_TOKEN>
",EasonWang01,2016-04-12 15:49:13
334,2016-04-05 12:29:36,"Why are you posting the reducer code? The error says `mapStateToProps` returned something that isn’t a plain object. Not the reducer.

My guess is your `mapStateToProps` returns something like `state.todos` which will not work. The point of that function is to provide props to component, so it has to return an object with those props. Rather than pass `state.todos` you would probably want `{ todos: state.todos }`.

If this is the case, we need to make a better error message that detects arrays. Contributions are welcome. 
",gaearon,2016-04-12 15:49:13
334,2016-04-05 13:16:02,"The problem here is that the error message isn't clear enough, an object is being passed in but it isn't a plain object until EasonWang01 uses `Object.assign()`. `checkStateShape` calls `_.isPlainObject` which requires `Object.prototype == null` or to have been created with `Object.constructor`. The error message could probably be updated to read `%sToProps must return a plain object. Instead received %s`

The wording for `computeMergedProps` could be updated as well to reflect this.
",alex-deas,2016-04-12 15:49:13
334,2016-04-05 13:40:50,"the mapStateToProp is look like this

<S_CODE_TOKEN>

I guess it might be that I'm not using combineReducer so I need to return the full state to store,not sure~
(◕ᴥ◕)  ʕ·ᴥ·ʔ
",EasonWang01,2016-04-12 15:49:13
334,2016-04-05 22:24:48,"Can you provide a full project reproducing the problem on GitHub? These pieces don't quite add up in my mind. For example it is strange you are passing the whole props object as todos prop down. 
",gaearon,2016-04-12 15:49:13
334,2016-04-06 12:37:50,"Hi,  https://github.com/EasonWang01/Redux-tutorial/tree/link  it's the origin version.

in  Redux folder=> reducer.js

change to below and click `initial for demo`

<S_CODE_TOKEN>

then the error appear,I think it just some miss typed by me, not a big problem need to solve
( ´ ▽ ` )b
",EasonWang01,2016-04-12 15:49:13
334,2016-04-07 07:20:24,"But one thing I found is when some error occur in reducer.js the console.error will always point to some component file rather than reducer.js file.
",EasonWang01,2016-04-12 15:49:13
334,2016-04-12 15:49:13,"Normally you return an object like `{ todos: Array<Todo> }`:

<S_CODE_TOKEN>

However when handling `TOGGLE_TODO`, you return just an `Array<Todo>`:

<S_CODE_TOKEN>

This is missing `Object.assign({}, state, { todos: ... })`.

Then this `state` gets returned from `mapState()` which is where the error fires. Fixing the reducer to return the object would fix the problem. I also suggest you to use reducer composition as Egghead series shows, rather than put all the code into a single big reducer.

Hope it helps!
",gaearon,2016-04-12 15:49:13
334,2016-04-13 00:44:21,"thanks!
",EasonWang01,2016-04-12 15:49:13
333,2016-03-31 20:32:44," I'm working on a webapp that's utilizing React with Redux. I have posted a similar message at the redux-thunk Github, but I think this might possibly be a more general issue with Redux middleware. I am currently using Redux-Thunk in a manner very similar to the example found here:
http://redux.js.org/docs/advanced/ExampleRedditAPI.html

When running my app, I see the following error in Chrome:

Uncaught RangeError: Maximum call stack size exceeded
(anonymous function) @ index.js:10
dispatch @ applyMiddleware.js:44
(anonymous function) @ index.js:12
dispatch @ applyMiddleware.js:44
(anonymous function) @ index.js:12
dispatch @ applyMiddleware.js:44
(anonymous function) @ index.js:12
dispatch @ applyMiddleware.js:44

Does anyone have any idea what might be the source of this infinite recursion?

**actions.js:**

<S_CODE_TOKEN>

**configureStore.js:**

<S_CODE_TOKEN>

**reducer.js:**

<S_CODE_TOKEN>

**main.js**

<S_CODE_TOKEN>
",jbri7357,2016-04-02 11:47:13
333,2016-04-02 11:47:13,"Closed in https://github.com/reactjs/redux/issues/1564#issuecomment-204559370.
",gaearon,2016-04-02 11:47:13
332,2016-03-31 14:56:47,,mil,2016-04-02 17:44:43
332,2016-04-02 17:44:43,"Thanks for the PR but `^15.0.0-rc.1` already matches `^15.0.0-rc.2` (and will match `15.x` as well).
You can verify this with the [semver calculator](http://semver.npmjs.com/).
Cheers!
",gaearon,2016-04-02 17:44:43
332,2016-04-08 20:38:54,"`^15.0.0-rc.1` does not match current version (`15.0.1`)

<S_CODE_TOKEN>

https://github.com/reactjs/react-redux/pull/342
",antoinerousseau,2016-04-02 17:44:43
332,2016-04-08 23:33:33,"It does match. Please verify on a clean project. Unfortunately npm prints _all_ dependencies in this error message rather than the ones causing the issue. I just verified that even with npm@2, both `^15.0.0-rc.1` will match stable versions:

<S_CODE_TOKEN>
",gaearon,2016-04-02 17:44:43
332,2016-04-08 23:41:40,"OK well I updated to NPM 3 and the issue went away. Thanks anyway for your answer!
",antoinerousseau,2016-04-02 17:44:43
332,2016-04-08 23:42:35,"No problem. Sorry npm 2.x is weird  ¯_(ツ)_/¯ 
",gaearon,2016-04-02 17:44:43
331,2016-03-30 12:08:27,"In a recent project, I needed a container component that had access to a few actions, but it didn't need to subscribe to the store. The component was just a button that performed an action; it didn't care about what the state of the app was.

The docs for `connect` don't have an example for how to omit the `mapStateToProps` argument, while still providing a value for `mapDispatchToProps`.

I'm not entirely sure if this is the best way to accomplish that goal, so please do let me know if there's a better/simpler way! I tried simply passing a single `mapDispatchToProps` argument, but it was interpreted as the `mapStateToProps` param.
",joshwcomeau,2016-04-02 18:26:00
331,2016-04-02 17:47:02,"We already have https://github.com/joshwcomeau/react-redux/blob/feature/injectActionsDocs/docs/api.md#inject-just-dispatch-and-dont-listen-to-store so maybe it’s worth putting the example next to it? Also let’s use `null` instead of `false`. Somehow that feels.. better.
",gaearon,2016-04-02 18:26:00
331,2016-04-02 18:04:05,"Yeah, I didn't wanna be presumptuous by putting my example so close to the top, but I agree it makes more sense there.

Since it then became the first example to use `import * as actionCreators`, I moved the parentheses explaining that bit to it.
",joshwcomeau,2016-04-02 18:26:00
331,2016-04-02 18:26:03,"Even better. Thanks!
",gaearon,2016-04-02 18:26:00
330,2016-03-28 17:25:28,"hi, when my app cancellation, replacement account to log in again, store the saved data will be reloaded in, how do I clear the data store，It becomes a new store?
",a6051529,2016-04-02 19:30:16
330,2016-04-02 18:11:22,"As far as I know there is no built-in way to restore the initial state, but it is easy enough to add this ability :)

I like to use an action that resets the state to the default state. 

Here's an example, say, for an online store:

<S_CODE_TOKEN>

This is different than destroying and re-creating the store, but I believe it would have the same effect.
",joshwcomeau,2016-04-02 19:30:16
330,2016-04-02 19:29:17,"Note that this is a Redux-specific question, and not a React-Redux concern.

@joshwcomeau's example is good.  There's also utilities out there that make that approach easier, such as https://github.com/omnidan/redux-recycle.  There are a number of Redux-related libs listed over at https://github.com/markerikson/redux-ecosystem-links , and some of them might also help with this.
",markerikson,2016-04-02 19:30:16
330,2016-04-02 19:30:16,"If you have other usage questions, please ask them over on Stack Overflow: http://stackoverflow.com/ .
",markerikson,2016-04-02 19:30:16
330,2016-07-11 18:05:13,"Thank @joshwcomeau for that. It's working for me.
",gaastonsr,2016-04-02 19:30:16
329,2016-03-25 14:00:22,"By changing the display name tools like enzyme find do not work because the tester has to know if it is a connected or not component because the name changes.  I vote that the name stays the same as the component has been enhanced but not really changed.
",CurtisHumphrey,2016-04-02 11:48:35
329,2016-04-02 11:48:35,"It does not _change_ the existing name. It wraps your existing component with another component that manages the updates. Wrapping it with the component of the same name but a different implementation would be confusing. cc @lelandrichardson
",gaearon,2016-04-02 11:48:35
329,2016-04-04 12:16:41,"I just ran into this issue (not for testing with Enzyme, unrelated). I worked around it by checking for `WrappedComponent` but ideally it would be good to have a way to get the underlying component name in a consistent way for both connected and non-connected components.

<S_CODE_TOKEN>
",firasd,2016-04-02 11:48:35
329,2016-04-04 12:20:34,"Display name is meant for debug purposes and tooling like React DevTools. Why do you rely on it?
",gaearon,2016-04-02 11:48:35
329,2016-04-04 12:55:15,"I'm writing a tutorial for making a universal React app and I didn't want to require webpack for people trying to run the example code, so I include component.js files via `script` tags and use babel to process them in the browser, while still keeping the regular code like `require('react')` and `module.exports = ComponentName` in the component files (without writing `if/else` blocks), so I kinda 'shimmed' node.js `require` and `module.exports` like this: https://gist.github.com/firasd/684025ebbc441c67401afb2cea6fa979

I get that it's totally ridiculous in a way, will mention in my tutorial that it's only a temporary thing and readers should use webpack. So I understand your point; just wanted to mention my (admittedly brittle) workaround in case anyone ends up with this issue.
",firasd,2016-04-02 11:48:35
329,2016-04-04 15:37:40,"Just to briefly chime in here:
1. Finding components via the `displayName` in enzyme is a crutch and a hack and I would recommend avoiding it in all possible cases.
2. When unit testing react components, I would also suggest that you try and test the original unwrapped component directly, rather than a ""connected"" HOC.
3. As Dan has mentioned, redux (as well as other common frameworks that work through higher order components) don't _change_ any of the display names, they actually wrap the component and return something new entirely - with different/new behaviors. Having them named the _same_ would probably be more confusing than having them named different.

Nevertheless, redux could adjust the code it uses to create it's HOC to facilitate testing (and perhaps other things) by providing a static property reference to the original (unwrapped) component.  This would allow people testing with enzyme to access the component directly, and find or render it directly by reference, which is the better route.

This could look something like this:

<S_CODE_TOKEN>

Then in our tests, lets say we have some component `Foo` which is ""connected"" with react-redux.
We then have another component `Bar` which renders the connected `Foo` in it's render path...

<S_CODE_TOKEN>

For the most part, I've been doing this myself manually by just having a named export in the component file (or separating the connected component into it's own file). This would look something like:

<S_CODE_TOKEN>
",lelandrichardson,2016-04-02 11:48:35
329,2016-04-04 17:10:59,"@lelandrichardson Thanks for chiming in!

> Nevertheless, redux could adjust the code it uses to create it's HOC to facilitate testing (and perhaps other things) by providing a static property reference to the original (unwrapped) component. This would allow people testing with enzyme to access the component directly, and find or render it directly by reference, which is the better route.

I think we do this, we provide [`WrappedComponent`](https://github.com/reactjs/react-redux/blob/2d5ee79627b6e2dc3ff2e23a395091334a64ef28/src/components/connect.js#L288).
",gaearon,2016-04-02 11:48:35
329,2016-04-04 17:11:41,"@firasd Thanks for explaining. Indeed this is very fragile.
",gaearon,2016-04-02 11:48:35
329,2016-04-04 17:20:00,"> I think we do this, we provide WrappedComponent.

Ah, perfect. This is exactly what people should be using then!
",lelandrichardson,2016-04-02 11:48:35
329,2016-06-13 18:45:46,"I disagree, `WrappedComponent` is not a perfect solution.

> @ianobermiller (FormidableLabs/radium#271 on [Jul 17, 2015](https://github.com/FormidableLabs/radium/issues/271#issuecomment-122227566))
> Can you imagine if every decorator did the same thing? `Radium(Relay(autobound(Button)))` 👎 

Or are you suggesting that `react-redux` is the king of React standards and every HOC project out there should adopt the `WrappedComponent` standard?  What if other HOCs provided `InnerComponent` or `BaseComponent` as their standard method?  What we end up with is chaos.

> @gaearon
> Display name is meant for debug purposes and tooling like React DevTools. Why do you rely on it?

No matter how you slice it, the wrapped component appears to be a change in the display name to the consuming developer(s).  So I ask, why does `react-redux` modify `displayName` in the first place?  If it's something that is expected for people not to rely on, why does `react-redux` rely on changing the `displayName` at all?  If `displayName` is truly inconsequential - then the `react-redux` team should have no problem removing their reliance on the ""change"" of the `displayName`.
",TigerC10,2016-04-02 11:48:35
329,2016-06-13 18:49:34,"+1 for @tigerC10. 👍
",RBdevelop,2016-04-02 11:48:35
329,2016-06-13 20:48:34,"@TigerC10 I think it is more important to educate React devs what HOCs are and are not rather than implement an intentionally misrepresentative behavior for `displayName` to have the library function as you might expect with a naive understanding of HOCs.

connect or any other HOC does not return a decorated component in the strictest sense (attach behavior or data to something and return it) it returns a wrapping component that proxies most component interactions to the wrappee but with some additional behavior or data. I think understanding this distinction is more important than trying to pretend decorating is happening.

I'm a strong -1 on changing displayName. the displayName of `connect(whatever...` is non-obfuscating and deterministic. if you want to instrument components for easier testing in enzyme then just make your own HOC who's sole purpose is to expose whatever method you want for getting a handle on your wrapped component.

The solution is better education and documentation here IMO not clever renaming of the HOC to hide that it is a HOC
",gnoff,2016-04-02 11:48:35
329,2016-06-14 18:56:34,"Of course the display name of `connect(whatever...` is obfuscating - if combined with other HOCs my error messages could say 
`check render method on something(that(has(been(wrapped(a(million(...`
And that's not very helpful - especially because longer messages get truncated in the dev tools unless you expand the call stack.  Furthermore, if every HOC had their own method for fussing with the `displayName` of the original component we could wind up with error messages like `check render method on something<that [ has( been -  wrapped a {{...` - or worse.  To assume that the consumers of `react-redux` will only ever wrap their components in a single HOC is naive.

More than likely, my HOCs that are imported have been tested, and if there is a problem with the code that produces an error, it's probably not the imported HOC so much as it is a problem with my own code.  It doesn't help me to know that my component has been wrapped - I'm the one that wrapped it.  I know it's a wrapped component.  Furthermore, one quick glance at the component code and I can see that I wrapped it.

While I don't disagree with better education and documentation - you can _still do that_ without providing a different `displayName` to the consuming developer's original component.

So what we have here is `react-redux` contributing to (not solely responsible for) the difficulty of debugging in order to ""educate"" about how HOCs work?  Please don't patronize me.  And `react-redux` is not interested in being a good neighbor to other libraries for debugging in the interest of some perceived ""purity""?
",TigerC10,2016-04-02 11:48:35
329,2016-06-14 19:00:16,"@TigerC10 I'm sorry that you felt I meant you needed education in how HOCs work. That wasn't my intention. point noted on the difficulty of wrapping things in many HOCs.
",gnoff,2016-04-02 11:48:35
329,2016-06-14 19:48:21,"@gnoff My apologies, the ""please don't patronize me"" remark wasn't intended to suggest that I felt like you were personally patronizing me - just expressing the fact that I don't expect that developers feel like `displayName` is truly educational.
",TigerC10,2016-04-02 11:48:35
329,2016-06-14 19:52:05,"I'm a bit confused on what the actual crux of the complaint is.  Is it that you want to be able to look up components by display name during unit testing, or just that hypothetical multi-wrapped component display names would be harder to read?
",markerikson,2016-04-02 11:48:35
329,2016-06-15 15:47:28,"Also, #395 is pretty relevant to this.
",markerikson,2016-04-02 11:48:35
329,2016-06-15 17:03:17,"I think #395 is hilarious.  ""There's a problem with 'changing' the `displayName` - let's add a function to get the original one"" instead of ""Why don't we just stop 'changing' the displayName.""
",TigerC10,2016-04-02 11:48:35
328,2016-03-23 16:41:13,"I am building and testing my redux project, but I encounter a problem which I cannot solve:

I have a Container - PostList (which is used to show posts), and in the PostList I have a Component: SimplePage, which is to show the pagination info of the posts list.

And in the SimplePage component, I can click on the page number and it will Dispatch a Action that is to load the posts list of that specific page. I pass in a function, ""jumpToPage()"", from PostList into the SimplePage for it to dispatch the action.

The code is as below:

PostList:

<S_CODE_TOKEN>

SimplePage:

<S_CODE_TOKEN>

""load"" is the action creator. Now when I click on the pagination, the ""jumpToPage"" is indeed executed, but I got the error ------ ""Uncaught TypeError: Cannot read property 'load' of undefined"".

I don't know why and I want help.

(

However, if I modify the code in PostList simply to:

<S_CODE_TOKEN>

It worked, but I think this is a ugly way to write the code, and I want to pass a function into the pagination component. Actually I learnt the above code style from the popular ""erikras/react-redux-universal-hot-example"" project, but here it does not work, and I do not know why. : (

As to my understanding, I already connect my ActionCreator (""load"") the PostList. But in the ""jumpToPage"" function, it says  this.props.load(page_num) ""Uncaught TypeError: Cannot read property 'load' of undefined"".

)

Thanks!
",Lucas-Qi,2016-03-24 13:09:57
328,2016-03-23 17:12:33,"> ""load"" is the action creator. Now when I click on the pagination, the ""jumpToPage"" is indeed executed, but I got the error ------ ""Uncaught TypeError: Cannot read property 'load' of undefined"".

The `jumpToPage` method is not auto-bound to the class, so when passed down into the `SimplePage` component, ""this"" is now the global object, so `this.props` is now undefined which causes the error `cannot read property 'load' of undefined`. You'll need to bind the method in the constructor:

<S_CODE_TOKEN>

or better, just use the `load` prop directly with:

<S_CODE_TOKEN>
",tgriesser,2016-03-24 13:09:57
328,2016-03-24 10:35:38,"@tgriesser  Thanks a lot, seems it is a common JavaScript gotcha, and I have to learn more about JS :100:  

Thank you a lot for your help!  ^_^.  
",Lucas-Qi,2016-03-24 13:09:57
328,2016-03-24 13:09:57,"Sure thing!
",tgriesser,2016-03-24 13:09:57
327,2016-03-22 01:14:53,,haohcraft,2016-04-02 17:47:54
326,2016-03-21 18:33:45,"In some cases, we would like to pass in some function as a prop to the child, but this will result in re-rendering the child even though the function passed in is the same. I think this is because `/utils/shallowEqual.js` can not handle the case where the two are functions.

Check [this](http://stackoverflow.com/questions/12216540/how-to-test-for-equality-of-functions-in-javascript)
",haohcraft,2016-03-21 19:55:52
326,2016-03-21 19:55:52,"The link to the SO question doesn’t seem to be very relevant. The question is about comparing two different functions, so their identities differ, but comparing the same function will return `true`.

Now, _if you pass different function identities_ as props, yes, they will differ. For example something like `onClick={() => this.handleClick()}` will be a different function every time. In this case the solution is to make sure you always pass the same function, e.g. `onClick={this.handleClick}`.

It is hard to say anything more without seeing the code. But I believe that comparison is correct so I am closing. If you are sure it’s not please add your code, or better, submit a PR with a failing test that we can discuss.

Cheers!
",gaearon,2016-03-21 19:55:52
326,2016-03-22 01:15:17,"You are right. Thanks for explaining.
Added a test case for such situation. 
",haohcraft,2016-03-21 19:55:52
325,2016-03-19 16:18:24,"Hey folks!

Would like to know if I'm testing correclty my connected component, I've made some search, but still not clear for me and the way I'm doing right now doesn't sounds correclty, thats why I'm asking helping for the jedi council hahaha

The problem:
I want to know if action.fetchPurveyors is being called on fetchData that is passed on mapDispatchToProps:

<S_CODE_TOKEN>

So, on my unit test I'm doing this:

<S_CODE_TOKEN>

Is there a better way of doing this? Am I doing an integration test instead of a simple unit test? 

Thanks in advance!
",renanvalentin,2016-03-21 19:58:08
325,2016-03-21 19:58:08,"I would just test `mapStateToProps` and `mapDispatchToProps` themselves to be honest. Otherwise you seem to be testing what React Redux already tests—that it works :smile: .

You can find a discussion on this here: https://github.com/reactjs/redux/issues/1534.

Hope it helps!
",gaearon,2016-03-21 19:58:08
325,2016-03-22 01:03:49,"BOOM! :boom: :dancers: 

Thanks @gaearon!
",renanvalentin,2016-03-21 19:58:08
325,2016-10-24 20:13:34,"@gaearon How do you test that the state tree looks like you expect?

e.g. I change the structure of the state tree by changing the reducer and make sure to change the tests there. Now all my tests pass, but the connected component is broken since it's not mapping the state correctly, anymore.
",flushentitypacket,2016-03-21 19:58:08
325,2016-11-22 11:59:10,"@flushentitypacket; write selectors and use them in your `mapStateToProps`. They'll allow you to get parts of state in your components, without the component needing to know the structure of state.

<S_CODE_TOKEN>

Then, test your reducers, actions and selectors together - so your test starts with dispatching an action, and ends with expectations about the selector's output.",atkinchris,2016-03-21 19:58:08
324,2016-03-17 19:41:47,"I was hoping to group my redux state and dispatch props under a single property in my component, but my state props are lost when redux completes its merge.

<S_CODE_TOKEN>

I expected to see this

<S_CODE_TOKEN>

But, after redux combines the props, i see this

<S_CODE_TOKEN>

Is this a bug or working as designed? it seems that redux should be able to combine the two without loss of data.
",bcardi,2016-03-21 20:06:12
324,2016-03-21 20:06:12,"React Redux can’t guess how to merge two completely different objects. It isn’t obvious: for example, if both were Immutable maps, “merging” them naïvely would break them completely.

We let you specify a third argument called `mergeProps` to compare the merging behavior. By default it uses `Object.assign()`-like behavior which is why props are overridden. But you can specify a different behavior:

<S_CODE_TOKEN>

I am using [object spread operator](http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html) in this example but you can write it with `Object.assign()` instead (don’t forget to add a polyfill for it in this case):

<S_CODE_TOKEN>

I hope this helps!

Note that grouping objects like this will cause unnecessary allocations and will also make performance optimizations harder because we can no longer rely on shallow equality of result props as a way to tell whether they changed. So you will see more renders than with a simple approach without namespacing which we recommend in the docs.
",gaearon,2016-03-21 20:06:12
323,2016-03-17 18:33:06,"Hi,

This is a proposal for a shorthand syntax for connect.

I use Reselect and connect and I almost never use the props parameter in mapStateToProps.

I'd like this shorthand syntax so that instead of writing:

<S_CODE_TOKEN>

we could write:

<S_CODE_TOKEN>
",slorber,
323,2016-03-18 10:56:49,"Just to give another example from my app.
I find it annoying to have to pass the state attribute to all selectors, and also I often forget the `()` and write connect(state => {object}) which does not work. The shorthand syntax would permit me to not think about these things.

<S_CODE_TOKEN>

becomes:

<S_CODE_TOKEN>

But maybe this can be done outside of react-redux. As this is intended to be used with selectors maybe it is better to add this shorthand syntax to Reselect?

<S_CODE_TOKEN>
",slorber,
323,2016-03-18 11:21:58,"Interesting. I’m not opposed to adding this as it mirrors `mapDispatchToProps` shortcut. Curious what others have to say.
",gaearon,
323,2016-03-20 18:24:31,"cc @ellbee @faassen @erikras 
",slorber,
323,2016-03-20 21:36:13,"I would be +1 to adding this - I agree it's a very common pattern to use and would be great to mirror `mapDispatchToProps`. 

As for the implementation, it would be great to check whether `props` are needed in any of the selectors (while performing the invariant check), ~~and if so automatically optimize by returning a factory for the selector:~~

connect.js:

<S_CODE_TOKEN>

utils/wrapMapStateObject.js:

<S_CODE_TOKEN>
",tgriesser,
323,2016-03-20 22:53:13,"@tgriesser thanks for your feedback.

Yes it looks like passing props too does not cost much :)

Also I'm surprised that you comment positively on this because I've just discovered ""structured selectors"" of Reselect. I don't find the name very good but it was built after your [issue](https://github.com/reactjs/reselect/issues/42) and seems to almost do what I propose here...

What would my PR help you solve that you can't already with:
`connect(createStructuredSelector({selector1, selector2}))`

Not sure to understand your comment about using a factory. Is this the little thing added recently that almost nobody has to use but that can leverage better performances? ^^
",slorber,
323,2016-03-20 23:23:52,"> What would my PR help you solve that you can't already with:
> connect(createStructuredSelector({selector1, selector2}))

It would just prevent the need to wrap with `createStructuredSelector` each time you wanted to use this pattern, along with not requiring adding the reselect library.

> Is this the little thing added recently that almost nobody has to use but that can leverage better performances?

Yes, but actually now that I think about it again, this wouldn't work in this situation. It'd require the entire selector memoized at the top level, which can only happen with something like `createStructuredSelector`. Still would be a useful addition though I think.
",tgriesser,
323,2016-03-23 09:20:52,"thanks for your feedback @tgriesser 

I have no strong opinion on this as the `createStructuredSelector` is already in Reselect and I already use it, but being directly inside Redux would be a bonus.

@gaearon tell me when you have decided, I may rework a little my PR with some code of @tgriesser before merge.

@tgriesser btw, now that you removed your optimisation that finally does not work (don't know why but I trust you), couldn't we just use `mapValues(mapStateToProps, val => val(state, props))` in all cases?
",slorber,
323,2016-04-15 10:05:48,"@gaearon are you still interested by this PR? 

Tell me and I'll update my PR (because with recent optims I now understand better code suggested by @tgriesser )
",slorber,
323,2016-04-15 11:59:41,"I can’t promise to merge it but I’d very much like to see a final version of this and play with it.
",gaearon,
323,2016-04-23 13:37:34,"@gaearon I've updated my PR with @tgriesser suggestions
",slorber,
323,2016-04-25 09:28:21,"People did not comment here, so comments received on twitter are:

> @CyrilSilverman: the convenience gained is not worth the clarity lost.
> 
> @natenorberg: I like it. I actually keep accidentally writing it like that already
> 
> @sebas5384: I think the first choice is more easy to understand. Because you should code for other people
",slorber,
323,2016-04-25 15:37:41,"I think it's helpful to mention that this PR still allows the current form, so if you don't like it this proposed one, don't use it.
",jayphelps,
323,2016-04-25 16:01:28,"👍 from me.
",erikras,
323,2016-07-27 11:43:21,":+1: from me too, is this being acknowledged by anyone?
",OMantere,
323,2016-08-14 16:53:19,"We use a wrapper like that within our code so that we dont have to pass mapDispatchToProps all the time. 
",udnisap,
323,2016-10-04 09:19:02,"@jimbolla @gaearon @timdorr I suspect this will be doable in userland with `connectAdvanced` no?
",slorber,
323,2016-10-04 12:52:29,"@slorber Yes. A couple thoughts:
1. It's certainly implementable with `connectAdvanced`, and that was my intent behind extracting that method from `connect`, so that different custom connect APIs could be achieved in userland.
2. There are extension points in `connect` that could make this achievable in userland with less work than `connectAdvanced`, but they are not part of the official API at this time. Exposing those extension points is  more about the effort of writing tests and docs than the app code.
3. I still think this feature would be nice as part of the official API, and I think the code is refactored well to implement this fairly easily. Again, not a lot of app code, but more work to write tests and documentation.
",jimbolla,
323,2016-10-04 13:15:33,"Ok so I'll let the issue open for now

Also I think it would be convenient to have a convention and have ""selector"" in name be automatically stripped. This would allow to write:

`MenuUserPicture = connect({currentUserSelector, dataSelector})(MenuUserPicture);`

and to inject `{currentUser: ..., data: ...}`

maybe not enough explicit but would significantly reduce boilerplate, and allow to keep ""selector"" in name of methods
",slorber,
323,2017-01-12 16:56:39,"@gaearon @jimbolla @tgriesser it's been a while that this PR is open and it seems I'm not the only one wanting this

Would this get merged if I port the PR to work on master, polish it a bit and add better documentation?",slorber,
323,2017-01-12 19:05:18,"I would like this. Can it also support ""factory"" style? For example:
<S_CODE_TOKEN>
I'm thinking this would be optimal for use with reselect where one will probably do:
<S_CODE_TOKEN>
",jimbolla,
323,2017-01-13 10:09:12,"Hi @jimbolla

For now I've not really used these factories, do you refer to [this](https://github.com/reactjs/react-redux/blob/master/docs/api.md#examples-1)? 

Because what I see as signature in doc is `(dispatch => (nextState, nextOwnProps) => stateProps` which does not really look like your example signature. Can you give me a doc reference? It seems to me only connectAdvanced takes a factory, and only one while your exemple assume we can provide as many factories as props we want. Can you give me a unit test that showcase this feature?

Also could we mix both styles?

<S_CODE_TOKEN>

I'm not sure it would be easy to detect weither makeGetSometThing is a normal selector or a factory as both are functions


",slorber,
323,2017-01-13 19:22:59,"@slorber : yeah, that's what Jim is referring to.  I have an example of using the factory syntax here : https://www.reddit.com/r/reactjs/comments/5dxasp/any_deepdiveadvanced_tutorials_on_reselect/ ",markerikson,
323,2017-01-13 23:39:36,"@markerikson I see your example but still it's different from what @jimbolla show in his code snipped

<S_CODE_TOKEN>

VS

 <S_CODE_TOKEN>


Maybe I'm missing something, but can you give me the verbose version of the following snippet?

<S_CODE_TOKEN>",slorber,
323,2017-01-13 23:45:03,"I know.  What I'm saying (and I think Jim is too) is that currently, passing an actual function as the `mapState` or `mapDispatch` arg supports the ""factory function"" approach.  Passing an object as the `mapDispatch` arg currently does _not_ support ""factory functions"".  He's asking if your notional ""pass an object for `mapState` would be _capable_ of supporting a ""factory function per field"" approach.",markerikson,
323,2017-01-14 00:14:25,"Hmmm as far as I know if I get an object with functions as values, I can't know if the function will be a selector or a selector factory. At least I don't know how to make a distinction between `(intialState, initialProps) => (state, props) => state.something1` and `(state, props) => state.something1` because in both cases it's a function that takes 2 params

I took a look at current factory implementation and noticed this comment:

> On first call, handles mapToProps if returns another function, and treats that
    new function as the true mapToProps for subsequent calls.

This works fine because mapState is assumed to return an object, so when it does not and return a factory, we can init the selector and call it, which will end-up by returning the object we want to inject.


But in current scenario, the final selector is for a given propName, not for all the component props, so the expected value can be of any type, including functions, so it's harder to detect we are in the case of a factory (current test is `typeof props === 'function'`).

 
What I mean is that if we are going to implement this feature, it will not work if the user is currently injecting functions through mapStateToProps like this:

<S_CODE_TOKEN>`

I don't really have a usecase for why a user might do something like that so please tell me if there is any?

for mapDispatchToProps it's clear that the user will want to inject functions so how can we know if that function is a factory or the function the user wanted to inject?

So, I we could support factory functions in mapState but not mapDispatch, but it requires assuming that user is not injecting functions through mapState (who's doing that anyway?)

",slorber,
323,2017-03-08 06:26:28,"Hi @slorber @markerikson and @jimbolla ,

I wasn't aware that this PR was here and I opened a similar PR that -obviously- got immediately closed by @markerikson. Sorry about that, I did check in the opened issues if there was a feature request for this and I saw nothing. I should have also checked in the opened PRs... my bad!

I would really like to see this enhancement shipped and I'm pretty sure that I know how to solve the ""factory style"" issue that seems to be blocking this PR. Is it cool if I solve that issue in my branch? Or should I try to add a commit to this branch?

",josepot,
323,2017-03-08 09:37:06,"Hi again @slorber @markerikson and @jimbolla !

I've added the [following commit into my branch](https://github.com/reactjs/react-redux/commit/7d21e7beaeab2da0a94c1f3158e95ceae1771758) which makes the `mapStateToProps` object argument compatible with factory selectors as [@jimbolla suggested](https://github.com/reactjs/react-redux/pull/323#issuecomment-272251764).

I've also added [the following test](https://github.com/reactjs/react-redux/commit/7d21e7beaeab2da0a94c1f3158e95ceae1771758#diff-b5fd7a42ea1b8efa382416b4a323003cR1951) to make sure that it works... and it does 😄 

Since this PR seems to be stale, would it be ok for me to suggest that I make the PR from my branch which also has no conflicts with master?",josepot,
323,2017-03-09 10:21:32,as long as it works i'm ok with that but it's not my decision to merge :),slorber,
322,2016-03-16 19:20:19,"Studying 'React Native' & 'Redux', I wanted to initialize a 'State' in componenetWillMount() function to see with the data is rendered in my component.

The component is a 'smart component' and  'State' and 'Actions' are mapped to props.

The first time you instantiate the component, the 'State' is empty and then an Action is dispatched in componetDidMount() to set some values in the 'State', which should re-invoke render () and show mutations in the screen.
Well, the truth is that render() is not called, but the state is updated, so is not a Redux issue

Instead, if I dispatch the action in a SetTimer even in componenetWillMount() then render() is invoked, and also the State is updated correctly.

I don't think this is a good way. 

Wich will be the tight place to dispatch actions to initialize State?

<S_CODE_TOKEN>

Really thanks in advance
",srlopez,2016-08-14 15:32:48
322,2016-03-21 20:08:13,"> Well, the truth is that render() is not called, but the state is updated, so is not a Redux issue

This actually _is_ a React Redux issue because if what you say is true, it means the library erroneously bails out of causing a re-render when it should cause it.

Can you please submit a pull request with a failing test demonstrating this behavior?
",gaearon,2016-08-14 15:32:48
322,2016-03-21 21:02:20,"Yes, Dan @gaearon,
This is the [repo](https://github.com/srlopez/rntest), and in the [src/pages/TestForm.js](https://github.com/srlopez/rntest/blob/master/src/pages/TetsForm.js) you can see:

<S_CODE_TOKEN>

Direct dispatching in point 1, does not reflect in screen (the field name remains empty), but delayed dispatching as in point 2, reflect the mutation in field URL (and in NAME  too if both lines of code are executed, without comment marks)

Talking about Redux, the 'scene' is connected in [App.js](https://github.com/srlopez/rntest/blob/master/src/App.js) lines 55-67

<S_CODE_TOKEN>

And the `App` is on lines 21-53 of the same file, as a typical `Navigator` component, so all the scenes are 'connected' and the connectComponent is the typical  react-redux '`connect`' function in [AppContainer.js](https://github.com/srlopez/rntest/blob/master/src/AppContainer.js), just few lines ...

<S_CODE_TOKEN>

There is no doubt, the component is '`connect'ed` and Redux is well working, the trace display all the actions are dispatched. 

To test the behavior we are talking about, you know, clone the repo, run it (you can run using `npm run nurse`), next on first screen, press 'Go to Form' and ... you pass throw the `componentWillMount()` above.

If you need some help, this Form is inspired by @kasprownik and his code in this [repo](https://github.com/kasprownik/react-forms-tutorial) write in ReactJS and well explained in this [http://x-team.com/2016/02/tutorial-forms-in-react-and-redux/](blog)
",srlopez,2016-08-14 15:32:48
321,2016-03-14 21:25:35,"ViewModel maps model (state) into props for rendering and can include commands. It might be benefitial to keep established terminology. It might as well simplify API into a single function. I assume that viewModels are small hence the separation into two function is a boilerplate which could be reduced:

const viewModel = (state, dispatch) {
  todos: state.todos,
  onTodoClick: id => dispatch({...})
}

const TodoList = connect(viewModel)(TodoList)
",vladap,2016-03-17 15:48:14
321,2016-03-17 14:52:42,"I don't think they can be combined. 

Would you remap the actions to their same properties each time the state changes also?

mapStateToProps and mapDispatchToProps are separate for a good reason, consider the performance: mapStateToProps is actually run several times when state changes, and mapDispatchToProps once (or way fewer anyway than mapStateToProps) it doesn't depend on the state.

I won't start to fight about naming however.
",Ciantic,2016-03-17 15:48:14
321,2016-03-17 15:48:14,"Yeah, the separation exists for performance reasons:

> mapStateToProps and mapDispatchToProps are separate for a good reason, consider the performance: mapStateToProps is actually run several times when state changes, and mapDispatchToProps once (or way fewer anyway than mapStateToProps) it doesn't depend on the state.

Please see #1 for a history of how this API came to be. The single function approach was considered before and rejected.
",gaearon,2016-03-17 15:48:14
321,2016-03-17 20:26:26,"Makes sense. Naming seems fine to me then. 
",vladap,2016-03-17 15:48:14
320,2016-03-10 18:56:09,"Even if this PR doesn't get accepted, I'm hoping to find out the reasoning behind the current implementation and find out what patterns to use to avoid the problem I found. The problem being...

Because component store subscriptions are created in `componentDidMount` (which fires child before parent), you can get into situations like this:
1. Parents make a decision about what components to render, based on store state.
2. Children get current store state which is fine.
3. Store state is changed, requiring a new component tree.
4. Children get new store state before the parents, which is bad, because the new state may not make any sense for the new components.
5. Parents get new store state and switch out components. But it's too late, because children have already received bad state.

Here's a simple example showing the problem:

https://jsfiddle.net/justindeal/myqyxpcw/6/

There's a value in the store 'a' or 'b' which is used to switch components `A` and `B`. I have some side effect rendering to show what values are actually rendered by `A` and `B`. You can see that `A` incorrectly gets a 'b' value on the first toggle.

By switching to `componentWillMount`, subscriptions are always in parent-child order, so there's never any inconsistent state.

If you want to consider a simple real-world case, think about the filter string from the canonical todo example. Now consider that you can switch between todos and recipes. The filter for todos may make no sense for filtering recipes. So sending the global filter for todos to the child recipe components makes no sense and can cause errors to be thrown if unexpected props/values show up.

This change had one side effect for existing tests: because we haven't yet rendered when subscribing, the impure case avoids a duplicate initial call to its state mapping function. As far as I can tell, this has no effect on what's actually rendered though.

I also saw no negative outcome when I made the change for my app. (Just a fix to the surprising behavior I saw.) But I'm curious to get some feedback.

Thanks!
",jdeal,2016-03-13 00:04:19
320,2016-03-13 00:04:19,"Please see the discussion in https://github.com/reactjs/react-redux/issues/292.

We can’t use `componentWillMount` because it runs on the server, which would result in memory leaks. The solution here is to batch updates but React doesn’t yet provide a stable API to do this.

Check out #293 for a possible solution. In the meantime you can implement this in userland.
",gaearon,2016-03-13 00:04:19
320,2016-03-13 02:37:17,"Ah, sorry I missed the open issue. Thanks for the heads up.

FWIW, I don't think userland really works in the case of trying to build a redux-compatible lib that provides state for multiple components. The lib would have to caveat its usage. (Of course, with this problem, usage has to be caveated anyway.)

I'll keep an eye on #292 and #293.
",jdeal,2016-03-13 00:04:19
320,2016-03-13 11:55:52,"Such library could wrap its dispatches into `ReactDOM.unstable_batchedUpdates()`, could it not?
",gaearon,2016-03-13 00:04:19
320,2016-03-20 01:10:15,"I guess my concern was:

The library would have to do _all_ dispatching. It can't export a raw action creator and let the consumer dispatch that. At least not without the consumer knowing that it also has to wrap those dispatches with `unstable_batchedUpdates`. Essentially, an implementation detail (about inconsistent state updating) is leaking out to the consumer.

Having said that, I think it's pretty workable for now. `unstable_batchedUpdates` seems to cure the problem, and it's pretty easy to slide in. It's more or less an aesthetically odd thing to say ""caveat: use this unstable API for these edge cases.""

BTW, still a big fan of Redux! Just picking this nit!
",jdeal,2016-03-13 00:04:19
320,2016-03-20 03:44:06,"> It's more or less an aesthetically odd thing to say ""caveat: use this unstable API for these edge cases.""

Yeah but it’s the best we have until React either enables batching by default or provides a stable API for this. :-)
",gaearon,2016-03-13 00:04:19
319,2016-03-09 11:20:49,"Hi,

Is it possible to support the new release of React? 
I guess the code should be compatible

Thanks
",slorber,2016-03-13 00:11:29
319,2016-03-10 20:49:37,"I just asked a question about this:
http://stackoverflow.com/questions/35890730/react-15-not-compatible-with-react-redux?noredirect=1#comment59468510_35890730
It would be great to know if it's possible to support it. :)
",FedericoCapaldo,2016-03-13 00:11:29
319,2016-03-11 13:39:30,"+1
",deep-c,2016-03-13 00:11:29
319,2016-03-13 00:11:29,"Done in 4.4.1 via #317.
For the future reference, you can use `npm@3.x` which only warns but doesn’t enforce peer dependencies.
",gaearon,2016-03-13 00:11:29
319,2016-03-14 21:54:41,"thanks! will try that next time
",slorber,2016-03-13 00:11:29
318,2016-03-09 08:42:01,"Hello,
I am creating an app which is based on canvas. I am using react-redux. I have some color pickers, text size components, etc. What I want to achieve is; e.g. user changes the color in the picker an action fires which updates the UI and also the canvas component can listen to it and act accordingly. I don't want to pass handlers explicitly to the canvas component, that would be messy. I am really confused how to handle this situation in a neat way.
",mahadazad,2016-03-21 20:11:50
318,2016-03-21 20:11:50,"Please see https://github.com/reactjs/react-redux/issues/251 and the issues linked from there. If you have a component that cares about specific actions and can’t derive the UI from the current state, your best bet is a custom middleware that emits all actions to some kind of global pubsub system. We don’t provide this but it should be possible to create with an event emitter. If you have issues with this please create a question on StackOverflow with the code that you tried, leave a link here, and I’ll try my best to reply.
",gaearon,2016-03-21 20:11:50
317,2016-03-08 04:55:59,,chentsulin,2016-03-13 00:07:26
317,2016-03-08 06:48:10,"Isn't the same must be done for `devDependencies` except `||`
",istarkov,2016-03-13 00:07:26
317,2016-03-12 22:32:48,"I would love to see this happen immediately. :smile: 
",jslauthor,2016-03-13 00:07:26
317,2016-03-13 00:07:24,"For the future reference, you can use `npm@3.x` in which peer dependency mismatch is a warning rather than a hard error.

> Isn't the same must be done for devDependencies except ||

When 15.0 comes out, we’ll upgrade them. For now let’s run tests on the stable version.
",gaearon,2016-03-13 00:07:26
317,2016-03-13 00:10:10,"Out in 4.4.1, thanks!
",gaearon,2016-03-13 00:07:26
316,2016-03-08 04:49:23,"Hi,

I am loving react-redux, thank you!

We have a requirement to dynamically inject sub-components into a component after it has rendered.

However, the injected dynamic sub-component properties, although specified in mapStateToProps(), do not update in render(), even though I've verified they are updated in the state and are updated in the component's this.props.

If you move `javascript <span>prop in getChildren(): {me.props.getChildrenProperty}</span>` into the render method, getChildrenProperty is updated in the UI when its button is pushed.

So, this.props.getChildrenProperty in ProblemChild:
- is populated from the Redux store and it renders with the correct value after its injected
- is updated with its new value from the redux store
- this update triggers render()
- However, the new property is not displayed even though this.props.getChildrenProperty has new value

Here is a simple example:

<S_CODE_TOKEN>
",Dreculah,2016-03-21 20:27:45
316,2016-03-09 23:36:14,"Here is a jsfiddle demonstrating the issue: https://jsfiddle.net/fL8ab2hx/66/

Edit: Cleaned up fiddle code a bit.
",madmax983,2016-03-21 20:27:45
316,2016-03-21 20:27:45,"The problem is that `this.state.children` depends on the current props (calculated from the store), but are not re-generated when those props change. This is a very problematic pattern and I strongly suggest you to find a way to model this problem with React top-down data flow without keeping `children` in `state`.

However, as a temporary measure, you can change `getChildren()` to accept `props` as an argument. This is better than reading from `this.props` because you want to be able to update `this.state.children` **before the new props have been received** so `componentWillReceiveProps(nextProps)` is your best chance, at which point `this.props` is not up to date yet.

Additionally, instead of initializing `this.state.children` in `componentDidMount`, I would advise you to initialize `this.state.children` right in the constructor so they are ready by the time component mounts.

See the updated fiddle that works: https://jsfiddle.net/mxb505pw/1/

Relevant code:

<S_CODE_TOKEN>

Hope this helps!
",gaearon,2016-03-21 20:27:45
316,2016-03-22 00:00:07,"Thanks, Dan.

This is a simplified version of our real world problem, which that we need to dynamically inject children and bind them to redux AFTER the first mount/render cycle. Calling getChildren() from the constructor won't satisfy the requirement.

If we're not to keep the (dynamic) children in state, how best might we cause a re-render after a 'binding run' of redux after the children are added?
",Dreculah,2016-03-21 20:27:45
315,2016-03-08 04:18:35,"Update rackt references to reactjs.

Addresses comments at https://github.com/reactjs/react-redux/pull/299
",cwheikki,2016-03-17 15:49:02
315,2016-03-08 05:14:37,"Also - I've been using react and redux for a few months now. I must say, I am very impressed! There are many talented people in this community. Thanks for all of the great work everyone has put into it. I am looking forward to deploying our first production application in coming weeks!

Cheers,
Chris
",cwheikki,2016-03-17 15:49:02
315,2016-03-17 15:49:05,":+1: Thank you!
",gaearon,2016-03-17 15:49:02
314,2016-03-07 19:29:40,"removing this as it isnt really a big deal
",infolock,2016-03-07 21:48:35
313,2016-03-07 18:28:32,"I would like to make use of react-router's `onEnter` handler in order to prompt users to authenticate when entering a restricted route.

So far my `routes.js` file looks something like this:

<S_CODE_TOKEN>

Ideally, I'd like my `requireAuth` function to be a redux action that has access to the store and current state, that works like this: `store.dispatch(requireAuth())`.

Unfortunately I don't have access to the store in this file. I don't think I can use really use [`connect`](https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options) in this case to access the relevant actions that I want, because the thing I'm exporting is not a component. I also can't just `import store` from the file where the store is created, as this is undefined when the app first loads. 
",Robinnnnn,2016-03-07 19:57:16
313,2016-03-29 21:49:21,"@Robinnnnn I have similar need that I want to access `store` in `onEnter`. How did you solve your problem?
",jungejason,2016-03-07 19:57:16
313,2016-03-30 03:24:39,"hey @jungejason, I just decided to pass down the store as props into the component that was generating my routes. Here is my code, in full:

<S_CODE_TOKEN>

And here is the parent file:

<S_CODE_TOKEN>
",Robinnnnn,2016-03-07 19:57:16
313,2016-03-31 00:37:15,"Thank you @Robinnnnn!!
",jungejason,2016-03-07 19:57:16
313,2016-04-13 16:14:31,"Alternatively you can change your `routes.js` to export a function like `getRoutes(store)` and pass it there.
",gaearon,2016-03-07 19:57:16
313,2016-04-14 17:29:34,"Thank you @gaearon!! It's nice to be able to still have `routes` in a separated file. 

BTW, I really like your Redux training on egghead.io. I really enjoy the way you describe the idea, then do a simple implementation, and then finally add layers of abstractions at the end. It's the best training video I've seen in the last several years. Thank you!
",jungejason,2016-03-07 19:57:16
313,2016-04-14 18:17:35,"@jungejason Thank you for kind words!
",gaearon,2016-03-07 19:57:16
313,2016-04-15 13:11:06,"The ability to abstract `routes.js` is super helpful. 

On another note, I side with @jungejason -- thank you for all that you do @gaearon, your egghead videos are the reason I decided to migrate our web stack to React + Redux and away from Angular. I'm a much happier person now :)
",Robinnnnn,2016-03-07 19:57:16
312,2016-03-07 12:46:06,"Hello

I often need to connect only actions to my component. So I write:

<S_CODE_TOKEN>

I read in documentation:

> [mapStateToProps(state, [ownProps]): stateProps](Function): If specified, the component will subscribe to Redux store updates. Any time it updates, mapStateToProps will be called. Its result must be a plain object*, and it will be merged into the component’s props. If you omit it, the component will not be subscribed to the Redux store. If ownProps is specified as a second argument, its value will be the props passed to your component, and mapStateToProps will be re-invoked whenever the component receives new props.

""If specified"" lets me think we can use `connect()` without defining `mapStateToProps`

So I tried: 

<S_CODE_TOKEN>

But it didn't work. it makes sens to be able to connect actions only, isn't it? Is there a better way than writing  `()=>{return{}}`? Otherwise I can try to implement it in React-Redux. Let me know.
",damienleroux,2016-03-07 12:49:18
312,2016-03-07 12:50:38,"Actually it works... a side effect from another connect() triggered my issue. My bad!
",damienleroux,2016-03-07 12:49:18
311,2016-03-05 11:48:27,"Please see the following example. The only difference between `Bar` and `ConnectedBaz` is that the second one uses redux `connect`.

The problem is that the context changes do not get propagated to the component `Baz` and it statically renders `0`. Cmponent `Bar` is being updated and re-rendered correctly every second.

<S_CODE_TOKEN>
",zdila,2016-03-05 12:36:30
311,2016-03-05 12:36:30,"Yes, this is a known [React issue](https://github.com/facebook/react/issues/2517).
There are a few possible fixes:
- Don’t rely on context updates propagating correctly and instead expose something like `subscribeToMyThing()` in context. (This is pretty much what React Redux does by the way.)
- Pass `{ pure: false }` as the fourth argument to `connect()`. This will significantly slow it down but context changes will propagate.
- Wait for React to fix this or help them to :wink: 
",gaearon,2016-03-05 12:36:30
310,2016-03-05 03:05:48,"Issues like https://github.com/reactjs/react-redux/issues/163#issuecomment-192556637 are no fun and are exactly the reason why transferring arbitrary statics can be fragile.

We won’t back out of #127 now but we should at least stop hoisting non-enumerable statics in the next major version.
",gaearon,2016-04-12 18:21:27
310,2016-03-05 17:33:32,"`hoist-non-react-statics` used to only hoist enumerable properties but switched to hoisting non-enumerables as well because in `class {static boo = 2}` babel used to transpile boo as non-enumerable. (see https://github.com/mridgway/hoist-non-react-statics/pull/3 and the linked issue)
I checked now and babel no longer does that, static properties are now enumerable, not sure when it was changed though.
so, I don't see any reason not to change this back to enumerables only.
but the right place to fix this is `hoist-non-react-statics` i think
",nfcampos,2016-04-12 18:21:27
310,2016-04-12 18:21:27,"Going to close this unless people hit more edge cases related to this.
",gaearon,2016-04-12 18:21:27
310,2016-10-19 01:51:25,"In my application I created a component that extends another component's class. I guess that's not very common with react components, since composition is preferred in most cases.

So I have something like this:

<S_CODE_TOKEN>

(transforming with `babel-plugin-transform-es2015-classes (loose: false)`)

And it results on this:

<S_CODE_TOKEN>

When I was writing my app and reached that `TypeError` I thought “Okay, I just forgot again that this component is `connect()`ed…” But after that I found the _All the original static methods of the component are hoisted_ in the docs.

> We won’t back out of #127 now but we should at least stop hoisting non-enumerable statics in the next major version.

Probably there's more to consider, but I think that all hoisting of static methods should be deprecated in favor of `.WrappedComponent.staticMethod()`.

I never like the fact that a consumer of some connected component must know about that and must use `getWrappedInstance()`, but I know it's necessary, and it's worst trying to hoist every instance member. So `WrappedComponent` could be the exactly equivalent for static members.
",daltones,2016-04-12 18:21:27
309,2016-03-04 22:31:20,"During refactoring of my stores I more than once hit an invariant violation like this:

<S_CODE_TOKEN>

It would be nice of the name of the connected component would also be part of the error message

The latter error message above is from an ""undefined"" return I guess, so it should print that in the error message:
`Uncaught Invariant Violation: 'ComponentName mapStateToProps' must return an object. Instead received undefined`
",pke,2016-04-12 11:53:26
309,2016-03-05 00:54:00,"Totally. Those messages were never considered carefully. Please feel free to work on a PR to make them user-friendly!
",gaearon,2016-04-12 11:53:26
309,2016-03-05 06:41:02,":+1: 
",BerkeleyTrue,2016-04-12 11:53:26
309,2016-03-22 16:58:12,"Hey @BerkeleyTrue, @gaearon, is anyone working on this currently? 
Would love to take a look and see if I can work on this if no one is. :smiley: 
Cheers!
",moaazsidat,2016-04-12 11:53:26
309,2016-03-22 17:06:27,"No time at the moment. Feel free to create a PR
",pke,2016-04-12 11:53:26
308,2016-03-03 16:28:07,"I was looking for where to dispatch an async action to load the initial set of data and it seems that the best places are either the router -by looking for some specific function name within the component to be rendered-  on entering a particular route, or in the component wrapped by `connect`.  Valid as both solutions might be, it seems to me that the data container, being responsible for the data for its wrapped component, would be an even better place.  This becomes more important since React's stateless components deprives them of the lifecycle methods to do it in the component.  Since stateless components are expected to benefit from future optimizations, it would be a shame to miss those if there was a way to keep stateless components stateless.  After all, the data container is already stateful so I came up with this solution:

<S_CODE_TOKEN>

Which is used like this:

<S_CODE_TOKEN>

Just like the mapping functions for `connect`, I define a function `dispatchAsync` that decides whether to dispatch or not.  It receives the `dispatch` function, the future and current properties and the state of the store.

The `asyncDispatcher` function makes a subclass of the `React.Component` returned by `connect` redefining `componentDidMount` and `componentWillReceiveProps`, calling their `super` versions before calling the async dispatcher.  

For `componentDidMount` the async dispatcher gets `null` for `currentProps` as there are none yet.  I am not sure whether passing `{}` instead of `null` would be better.

It would be better if this could be integrated into react-redux, for example, by adding a static function to the `Connect` component.  Then it could be called like this:

<S_CODE_TOKEN>

`asyncDispatcher` would get the original class as `this`.

I tried it in a couple of places but made no extensive tests and just client side, no isomorphic setup.  The patch doesn't confuse the React DevTools, the `React` tab in Chrome lists `<Connect(ProjectList) ...` as the component, the patch itself totally invisible.

Something else that would be nice is for the async dispatcher to be able to tell the data container not to bother rendering, for example by returning false (not falsy, === false).  That could set another boolean variable that makes the response to `shouldComponentUpdate`.  After all, if the async dispatcher positively knows the data is not there to be rendered, why waste any time on that?  That flag would be reset in `shouldComponentUpdate` once the return value is calculated. Anyway, this is an optimization, the component should be able to render something without failing when the data is not there.

<S_CODE_TOKEN>

All those arguments would help decide on when to dispatch an action.  A dispatch might always be needed, using some property in `netProps`, it might only be needed if that property in `nextProps` is different from the current or it might be needed if the data for that particular property is not currently cached in the store. I think this is all the information that might be needed to make a decision.

Even if integrated into react-redux, the extra static function would add very few extra bytes to the size of the package, but would not have any other effect on performance if not called or have compatibility issues.

How does it look?  Does it make sense? 
",Satyam,2016-07-10 17:20:09
308,2016-03-05 14:30:13,"This would be the version with the option to `return false` to tell React there is no need to update.

<S_CODE_TOKEN>
",Satyam,2016-07-10 17:20:09
308,2016-03-17 15:39:18,"This is the isomorphic version of it:

<S_CODE_TOKEN>

As in the version above, the `dispatchAsync` function can return `false` if there is no need to update the screen.

It can also return a Promise.  If that is the case, it assumes the async request operation is not finished yet and sets `noNeedToUpdate` to true so the component doesn't bother updating itself.  It hooks itself into the `then` part of the Promise so it marks that it is now ready to have the screen updated.

To make it isomorphic I have changed the initial hook from `componentDidMount` to `componentWillMount` which is called both for client and server side rendering.

If the value returned from `dispatchAsync` is a Promise, it pushes it into an array in the store in `store.pendingPromises`.

To use it in the server side, you do this:

<S_CODE_TOKEN>

Basically, after letting it render itself via `renderToStaticMarkup` you call `Promise.all` on `store.pendingPromises`, which has the array of Promises, some resolved some pending.  When they are all solved, then we can read the state of the store and render it again, now with all the data available, so it can be send it to the client.

The async requests would have been performed exactly in the same way, particularly in the same order as in the client, by the component instances with the properties as resolved by `mapStateToProps` and `mergeProps` using not just the routing information but exactly the same props as the client side components would.

Unfortunately, this means two renders, the first to prime the requests, the second to produce the version with all the data. By using `renderToStaticMarkup` instead of `renderToString` and by returning false on `shouldComponentUpdate` I would expect the first render to be fast.
",Satyam,2016-07-10 17:20:09
308,2016-03-17 15:47:10,"My `dispatchAsync` function can return nothing, `false` or a Promise.  I kept it that way for backward compatibility with my previous version, which I am already using.  Otherwise, it agreed that it should always return a Promise, the code would be simpler. 

It would even be simpler if the `store.pendingPromises` array was initialized to an array elsewhere.
",Satyam,2016-07-10 17:20:09
307,2016-03-03 11:52:48,"Hello,

I created smart component using ""connect"" like below. 

<S_CODE_TOKEN>

Now, where should I write my ajax call to get server data (""text"" in this case) to initialize my component?
",mananvpanchal,2016-03-05 00:58:46
307,2016-03-04 17:37:54,"I’d create an async action creator:

<S_CODE_TOKEN>

And then simply dispatch the action passing the method that loads the data:

<S_CODE_TOKEN>

The dispatching can take place in any appropriate part of your app. If the app is small, I’d do it right where the store is created.

Additionally, you’ll need to create a reducer that handles `LOAD_TEXT_SUCCEEDED` actions and updates the store with the new text.
",iamakulov,2016-03-05 00:58:46
307,2016-03-05 00:58:45,"Also feel free to check out https://github.com/reactjs/redux/tree/master/examples/async and other examples :wink: 
",gaearon,2016-03-05 00:58:46
307,2016-03-05 05:56:21,"@iamakulov  Thanks lot for your answer. I understood how to dispatch for initial loading.

> The dispatching can take place in any appropriate part of your app. If the app is small, I’d do it right where the store is created.

Now, my application wouldn't be small. I have scenario where I need to initialize a component with fresh data whenever it gets called. 

Now, I have three case where my component gets called.

1). When I simply click on link to go to ""home"". `<Link to=""/home"">Home</Link>`

2). When I do dynamic routing to ""home"". `store.dispatch(push(""/home"");`

3). When user sometimes directly change URL in brwoser and hit ""Enter"". `http://localhost:8080/myapp/home`

> The dispatching can take place in any appropriate part of your app

So, I actually don't know what is appropriate part of my app where I can handle fresh data loading in all three scenarios?

@gaearon Can you please reopen the issue? Because I still confused and my closed issue might not get any attention.

Thanks again
Manan V. Panchal
",mananvpanchal,2016-03-05 00:58:46
307,2016-03-05 07:31:28,"@mananvpanchal, do you have any action that is triggered when a user switches to a route? If so, I’d create a middleware that listens for such switch actions, checks if the switch is performed to `/home`, and dispatches an additional `loadText` async action if it is. This way is quite verbose (as the new middleware is created), but I don’t know the more elegant one.
",iamakulov,2016-03-05 00:58:46
307,2016-03-05 09:34:49,"@iamakulov Thank you very much. I will try to implement triggering actions on route switching. Need to research on route switching. That way I can handle all three scenarios. But, need to research first that how can I know that ""route is going to switch now"".
",mananvpanchal,2016-03-05 00:58:46
307,2016-03-05 10:41:15,"@iamakulov I found something like this.

`<Route path=""home"" component={Home} onEnter={loadHome}/>`

and I write ""loadHome"" like this

`const loadHome = () => {
    store.dispatch({type: ""LOAD_HOME""});
};`

Using this, I can handle all that three scenario.

Thanks.
",mananvpanchal,2016-03-05 00:58:46
306,2016-03-02 21:02:06,"Hey guys,

I have a complex use-case in mind and I'd like to pick your brain for correctly approaching this. 
Before explaining the problem, I know there have been related questions and I know there is no plan on supporting this, but hear me out.
### Overview

Imagine I have an application with some main routes

<S_CODE_TOKEN>

We can consider the `Application` container as simply the scaffolding component, which might include a `TopNavigation` and a `LeftNavigation`, and renders the child route as the `main` view.
So each _main_ route is basically rendered as the _main_ view.
That's pretty standard.

The `Application` also has a ""global"" state, which might include `user` information, `token` for authentication and other stuff necessary for the overall functionality of the app. Of course this includes the related `reducers`, `actions` and so on.
The _root_ component of the app also is wrapped around a `Provider`, like it's supposed to be.
### The idea

Now image that _all_ those main route components (`Dashboard`, `PostsList`, ...) are considered as _modules_ (or _plugins_, or _extensions_, whatever name you like) and are basically **separated** from the main application.
Imagine a concept similar to `babel` or `eslint`, where you have the _core_ and _plugins_ that can be developed outside.

The idea is that I can develop my `Dashboard` module indipendently from the _main_ application. For simplicity let's say that each module simply exports its routes.

<S_CODE_TOKEN>
### The problem

Here some facts:
- each module can have its own _local_ store with reducers, actions and so on
- modules are decoupled from each other
- the _main_ application doesn't know about what's going on in each module
- modules can use and access the ""global"" state of the application (e.g. `user`)

Given that, I think it's fair to assume that I would use, in each module, an own `Provider`.

<S_CODE_TOKEN>

At this point there is a problem though. A `store` already exists in the `context` as it was defined by the root `Provider` of the _main_ app.

> As suggested in previous questions regarding this topic (nested providers), passing _manually_ the `store` as a prop is not an option, as e.g. I want to use all the goodnesses of `connect`.
### A possible solution

Ideally speaking, I think we could replace the `Provider` in each module with some sort of _local_ provider for each module. Let's call this `LocalProvider`.

<S_CODE_TOKEN>

Now there are 2 different stores in `context`: 
- the _global_ application `store` provided by the main app
- the _local_ module `localStore` provided in each module

So module components can access both stores, one using the _normal_ `connect` and one using a `localConnect`.

The difference between the 2 `Provider` and `connect` are basically the name of the `context` object: `store` vs `localStore`.
### Conclusions

If we agree on that, we might make `Provider` and `connect` somehow configurable to define the **name** of the store object, falling back to the default `store`.

I'd like to hear your thoughts now, whether this is a correct approach, whether I'm missing some piece of the puzzle or whether there are ""better"" alternatives.

Thanks! :)
",emmenko,2016-03-05 01:00:21
306,2016-03-03 05:09:16,"As a first observation: per https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L67 , passing the store as a prop IS an option, because the component generated by `connect` does actually check its own props first before it looks in context.
",markerikson,2016-03-05 01:00:21
306,2016-03-03 07:18:05,"True, but we'll lose the benefits of using `context` ;) 
(that's what I meant by ""is not an option"").
",emmenko,2016-03-05 01:00:21
306,2016-03-05 01:00:21,"> At this point there is a problem though. A store already exists in the context as it was defined by the root Provider of the main app.

Why is this a problem? A nested `<Provider>` will override the context supplied by the parent `<Provider>`. Context can be nested.
",gaearon,2016-03-05 01:00:21
306,2016-03-05 08:42:31,"@gaearon sorry, maybe I said it wrong. The ""problem"" is that I don't want the store to be overridden. The point is to have **both** stores in the `contex`:

<S_CODE_TOKEN>

Besides those technical details, how do you see this approach? Does it make sense for you?

Thanks.
",emmenko,2016-03-05 01:00:21
306,2016-03-05 08:45:57,"https://github.com/emmenko/react-redux/commit/70d1d37fef5111b9064e9c3a1afb368dfd6ec6ee

PS: this was an idea how to make the `Provider` configurable by passing a custom store name, which will be used as the context key.
",emmenko,2016-03-05 01:00:21
306,2016-03-05 10:37:45,"Ah, I see. In this case I think you should write a custom Provider/connect that support many stores. Maybe even publish it as a library :-).
",gaearon,2016-03-05 01:00:21
306,2016-03-05 11:16:51,"Yeah I thought of that but I'll end up ""copy-pasting"" and duplicating the actual provider / connect implementation. Which I don't think it makes much sense.
Do you think something along the changes I linked would be doable? Or do you have other suggestions? 
Like I said, I just want do avoid duplications. And I think we can introduce the change without breaking stuff.
",emmenko,2016-03-05 01:00:21
306,2016-03-05 14:41:19,"You don't need to copy-paste connect implementation. Create a function that wraps connect() and passes the store it gets from context to the connected component as a prop.

As for Provider there really isn't any ""implementation"" there other than context passing which is exactly what you want to customize 😉
",gaearon,2016-03-05 01:00:21
306,2016-03-05 15:32:05,"Alright, I'll try that. Thanks :)
",emmenko,2016-03-05 01:00:21
306,2016-03-24 21:58:39,"I finally had the time to publish this as a library, in case someone is interested.

https://github.com/emmenko/react-redux-custom-store
",emmenko,2016-03-05 01:00:21
306,2016-04-01 02:49:38,"Nice, I think this is a solution for my problem described here: http://stackoverflow.com/questions/36331942/how-to-organise-sub-applications-with-redux

Thanks :)
",rtkhanas,2016-03-05 01:00:21
305,2016-03-01 16:27:27,"Clarify that when an object is given, its action creators are automatically wrapped into a dispatch call.

Only managed to figure it out after:
- @gaearon 's twitter response https://twitter.com/dan_abramov/status/696033039953092608
- checking line https://github.com/reactjs/react-redux/blob/v4.4.0/src/components/connect.js#L38
",grifotv,2016-03-01 16:36:15
304,2016-03-01 04:40:33,"I have two apps:
-  A field or set of fields that can be edited in place
-  A table that displays rows of data.

We want to allow the rows of data to be edited in place.  The store shape for a set of fields is different than that of the report, and I'm not sure how I could combine the stores.  What I have now that seems to work is nested providers.  One provider wraps the table.  When a cell in my table is rendered in an editable state, I wrap the field in a form.  The form transforms the state from the table to a new state that that it passes to a new provider that wraps the fields.  One reason for doing this is that my fields are used in other parts of my app.  I am basically taking functionality for editing a few fields and rolling it into the table to update its data.

I understand combining reducers and one store per app.  But I'm not sure how two combine these two apps that feel very different.  Also, when data in the form's store is being updated, it seems wrong to have all the components in the table subscribe to updates to the form data when it has no effect.

Is this terrible?

Note - I'm new to react, redux, and jsx.
",3cooper,2016-03-01 16:35:20
304,2016-03-01 16:35:20,"If you use more than one store in an app (which in most cases we don’t suggest), don’t use `<Provider>` for nested stores. I would suggest passing `store` as a prop to any connected components explicitly.
",gaearon,2016-03-01 16:35:20
304,2016-03-01 18:21:15,"If I combine the stores, I worry that any update to the form data will cause all the cells to update.  I have three questions.
1.  If I use the connect method, when the store's data changes - does the mapStateToProps method check if any of the props given were changed before triggering the render on the component?
2.  If so, can I have some props populated by mapStateToProps and some populated the standard way by the parent component?  
3.  And finally, will the check done because of mapStateToProps hinder updates caused by the parent passing new props to the component.  Meaning if only a standard props changes, will the component still re-render?

I'm sorry for all the questions.  We just started down this path and in my design I'm trying to think ahead to how everything will come together and how performance maybe impacted.  Thanks for taking the time to answer and make these libraries.
",3cooper,2016-03-01 16:35:20
304,2016-03-04 17:02:52,"> If I use the connect method, when the store's data changes - does the mapStateToProps method check if any of the props given were changed before triggering the render on the component?

Yes. A `connect`-ed component is only re-rendered when any of the mapped props are changed.

> If so, can I have some props populated by mapStateToProps and some populated the standard way by the parent component?

Sure. Both props passed from a parent and props from the `connect()` method are merged together into the component’s props.

> And finally, will the check done because of mapStateToProps hinder updates caused by the parent passing new props to the component. Meaning if only a standard props changes, will the component still re-render?

Yes. A component re-renders when either props from `connect()`, props from a parent, or the component state is updated.
",iamakulov,2016-03-01 16:35:20
304,2016-03-04 18:54:36,"^^^ these answers are correct, thanks @iamakulov for answering!
",gaearon,2016-03-01 16:35:20
304,2016-09-20 11:11:18,"> If you use more than one store in an app (which in most cases we don’t suggest), don’t use <Provider> for nested stores. I would suggest passing store as a prop to any connected components explicitly.

What is the problem with nested Provider? Since all the Provider does it to set children context then when children of the inner provider will get the context from that Provider and not from the parent Provider
",orporan,2016-03-01 16:35:20
303,2016-02-28 08:55:54,"I noticed when ReactTransitionGroup is given a connect component, it does not trigger the special lifecycle functions. Looked a bit into it and realized that the component connect returns does not have those lifecycle functions defined. I saw a proposed solution here https://github.com/reactjs/react-redux/issues/101. But it would be nice to not have to write a wrapper for every component someone wants to integrate with ReactTransitionGroup.

I wrote a simple function that monkey patches those special lifecycle functions given the connect component https://github.com/esayemm/connect-with-transition-group. So someone can simply just do the following.

<S_CODE_TOKEN>

So I was wondering if this would be a good idea to include this in connect itself or just to keep it separate. Something like...

<S_CODE_TOKEN>

Thanks!
",esayemm,2016-02-28 12:46:31
303,2016-02-28 12:46:31,"To be completely honest I don’t want to hardcode supports for transition groups into `connect()`. This is a very specific API that is not going to be _the_ React animation API and acts more like an escape hatch until there are better solutions. The way it invokes instance methods on a nested instance does not align with React conceptual model very well.

I would suggest you to:
- Either write your own wrapper around `connect()` like you suggested
- Or use a more React-friendly approach to animations such as https://github.com/chenglou/react-motion
",gaearon,2016-02-28 12:46:31
303,2016-02-29 05:46:42,"Ah yeah it does feel a bit strange. Didn't know about react-motion, looks like the way to go. Thanks!
",esayemm,2016-02-28 12:46:31
303,2016-05-12 04:03:31,"if components can be stateless this actually works

<S_CODE_TOKEN>

Then in your `SomeComponent` all the normal lifecycle methods from ReactTransitionGroup will be called.
You can now plugin the TweenMax to do your transitions In / out before calling the callbacks 👍 

<S_CODE_TOKEN>
",andrevenancio,2016-02-28 12:46:31
302,2016-02-27 21:43:37,"On page load the following code gives me warnings in the console about `propType onHighlight is invalid; it must be a function, usually from React.PropTypes`.

<S_CODE_TOKEN>

Later though, after dispatches and state changes, there's no complaining. If I take `onHighlight` and `highlights` out of propTypes my eslint/jscs config complains (and so do I to some extent). What's the right way to do this?
",phorust,2016-02-28 12:41:32
302,2016-02-28 12:41:32,"This is unrelated to React Redux.
There is no `React.PropTypes.function`, only `React.PropTypes.func`.
This might be related to `function` being a reserved word in older browsers.
",gaearon,2016-02-28 12:41:32
301,2016-02-23 17:27:39,"I was working on an issue today that I wasn't able to explain in other way than shallow comparison.

Essentially I have a state similar to following:

<S_CODE_TOKEN>

there are many content types, this is just a simple example. What I am doing is re ordering these in state to cause re ordering on ui side, ie I can move first object from contents array down or second one up just fine, but when it comes to re ordering 2 object with same content type, it successfully updates the redux state, however react doesn't re-render the ui, and I came to conclusion that this could be caused by shallow comparison, as objects that switched places are very very similar, only their text fields are different.

I am looking for a way to work around this.

following is how I update my redux state:

<S_CODE_TOKEN>

where action.payload is correctly re-ordered contents array, I don't think this is an issue, as it does update redux state correctly.
",IljaDaderko,2016-02-24 15:46:22
301,2016-02-23 17:43:02,"Update: I started adding random number field as additional parameter so:

`{ content_type: 1, text:"""", order: random_number }`

Still no luck, so I am not so sure now if it is due to shallow comparising, hence am open for suggestions to what can be causing this.
",IljaDaderko,2016-02-24 15:46:22
301,2016-02-23 18:06:43,"Can you show the component code?
",gaearon,2016-02-24 15:46:22
301,2016-02-23 18:10:05,"This is a very stripped down version of it, that shows all necessary bits:

(I believe that it is connected correctly as each block is updated correctly, I only experience issues when to similar ones are next to each other)

<S_CODE_TOKEN>
",IljaDaderko,2016-02-24 15:46:22
301,2016-02-23 18:24:12,"Where are the parts that don’t update? Are they in child components? Do those components use local React state?
",gaearon,2016-02-24 15:46:22
301,2016-02-24 09:12:44,"Alright, sorry for delayed response, but here goes:

The switch statement you can see above within `renderStoryContent` function is responsible for rendering `StoryBlock` components that have another blocks inside that are `content_type` specific, so example of text block (one of which has the issue I am talking about) would look like

<S_CODE_TOKEN>

And this is how `StoryBlock` component looks:

<S_CODE_TOKEN>

Similarly, if you need it, here is `StoryBlockText` component (This one uses react-medium-editor plugin, but I don't think it is an issue, as I get similar bug on another component that doesn't require it, however both of these components have elements with contentEditable) :

<S_CODE_TOKEN>
",IljaDaderko,2016-02-24 15:46:22
301,2016-02-24 14:47:48,"By any chance, are you mutating the state to re-order the contents?
",Sunakujira1,2016-02-24 15:46:22
301,2016-02-24 14:51:52,"@Sunakujira1 I don't think so, you can see from my first comment how my states look and how I update its contents. It works fine in majority of cases as well, only when two neigbour contents with similar type are sorted it doesn't. I'm starting to think that this could be something to do with contentEditable as all elements that have an issue have it within them. 
",IljaDaderko,2016-02-24 15:46:22
301,2016-02-24 15:35:47,"@IljaDaderko Hmm, you are right, state seems fine.
Do you have `key` specified for each `StoryBlock`? Seems to be quite important as specified [here](https://facebook.github.io/react/docs/multiple-components.html#dynamic-children).  
Also, I am not as familiar with `this.props.children`, but I'm guessing it may be the case that `StoryBlockText` are not being re-rendered due to the `StoryBlock` not having any difference in props.
",Sunakujira1,2016-02-24 15:46:22
301,2016-02-24 15:43:50,"@Sunakujira1 I got it! so I was setting key of each storyBlock to index gathered from map() somehow this led to isues, changing this key to something like uniqe random id I generated for each block helps.
",IljaDaderko,2016-02-24 15:46:22
301,2016-02-25 17:35:53,"This is why I asked about the local state. If you don’t specify the key, components will receive each other’s props on reorder. Which makes reorder slower but that is not the root of the problem.

The root of the problem is you derive local state from initial props in the constructor. But props may be received by the component more than once. When your components receive new props during reorder, you forget to reset the state to reflect those new values.

To do it, you would need to implement `componentWillReceiveProps(nextProps)` that calls `setState` if `nextProps.text !== this.props.text`. Adding a key also helps but it heals the symptom rather than the actual cause of the problem. 
",gaearon,2016-02-24 15:46:22
301,2016-09-15 14:54:17,"Hi @gaearon , thanks for your answer. I am having a similar problem (check http://stackoverflow.com/questions/39513753/how-can-i-force-re-rendering-when-redux-state-is-changed-but-react-does-not-trig).

As far as I understand, React will re-render a component if nextProps and actual props differ. Why is it then needed to call the componentWillReceiveProps(nextProps) method, should the component do this automatically?

Thanks again!
",nicmesan,2016-02-24 15:46:22
300,2016-02-23 16:05:34,"As described in https://github.com/reactjs/redux/issues/1437#issuecomment-187763637, we can try introducing a separate code path for the fast case where neither state props nor dispatch props depend on the own props. In this case the problem from #99 seems irrelevant and we can do the fast check _before_ calling `setState()`.

I am not convinced that this is the best solution however. It basically forces computations to happen in the `handleChange()` hook which React has no control over. If in the future React learns to prioritize updates, it will not be able to schedule this work for later, but if we keep things as they are today, it will be able to do this just by postponing `render()`.
",gaearon,2016-04-12 19:19:25
300,2016-02-23 16:34:17,"Will another callback as connect()'s parameter do the job? But I haven't yet figure out why you choose a connect() function, rather than a class to be sub-classed and mixed in to construct the container class. In this case, adding feature will be more smoothly without changing any existing code.
",matianfu,2016-04-12 19:19:25
300,2016-02-23 16:59:53,"> But I haven't yet figure out why you choose a connect() function, rather than a class to be sub-classed and mixed in to construct the container class. In this case, adding feature will be more smoothly without changing any existing code.

Inheritance is not really a thing in React ecosystem, and for good reasons. It makes it too easy to break consuming packages, introduces naming conflicts between methods, is not composable, and in general exposes too many implementation details.
",gaearon,2016-04-12 19:19:25
300,2016-02-23 17:00:41,"> Will another callback as connect()'s parameter do the job?

Why would we need it? I meant changing the internal implementation without touching the API. But as I said, I have concerns even about that.
",gaearon,2016-04-12 19:19:25
300,2016-02-24 17:07:54,"> Why would we need it? I meant changing the internal implementation without touching the API. But as I said, I have concerns even about that.

I understand that you'd like to keep connect() simple. But existing api really does a lot of thing already.

mapState is for calculating derived value from store state. mapDispatch is providing actions.

---

The most distinct nature of React, IMHO, is not the much talked asynchronous. It is essentially an Inversion of Control Pattern. All life cycle method and render() is called by React, not by app code. The only thing app code can do is to call the setState() method.

This is something quite similar to Mark & Sweep garbage collector. There are two stages, in the first stage all referenced objects are marked. In the second stage all unmarked objects are recycled.

From the viewpoint of app code, React render can also be considered as two stages. The first stage can also be called ""mark"", which means, mark the components which should be refreshed. The second stage is the React's reconciliation.

In current status of code. There is no selective mark at all. All container/stateful component are marked. 

Why we need extra api? I think this is a new and independent logic, irrelevant to existing function definition. So it's better to have something independent to others. Do one thing, do it well.

---

Also, I have not figure out why mapStateToProps() need ownProps argument. Is it because that it's so popular to write JS in JSX props field? such as:

<S_CODE_TOKEN>

To my understanding, if redux store is a complete state model of the app, all props are just derived value calculated from the store, so why they are going to be passed to a stateful container component? 

I also remembered you've said in your tutorial: UI will be mostly predictable if it could be described as a pure function on states. Now we have redux store and reducers. It is exactly the container's job to implement such 'pure function' translating states to UI. But in connect() implementation, I can't see anything suggesting pure. It seems to be unnecessarily complex.

I have read the code and watched the you vidoe at readthesource over ten times. But there are still a lot of question mark haunting in my head. I need more time to figure them out.
",matianfu,2016-04-12 19:19:25
300,2016-02-24 18:13:35,"> Also, I have not figure out why mapStateToProps() need ownProps argument.

Because a given connected component may also have props given to it by its parent:

<S_CODE_TOKEN>

and then `mapStateToProps` may depend on some of those props to actually extract the right pieces from state.  The most obvious case is a component that can have multiple instances, and each instance is passed a different ID value as a prop.  A good example of this is can be seen in the ""tree-view"" sample: https://github.com/reactjs/redux/blob/master/examples/tree-view/containers/Node.js#L75 .

A Redux store is not necessarily the entire state of an application.  It _can_ be, if you've designed your app that way.  It may contain UI state.  It may only contain cached data.  There may be local component state, or there may not be.  It entirely depends on the application and the developers.  But it certainly is not the case that the only props for a connected component would be coming from the store.

Beyond that, while ""pure functional"" components are a nice ideal, in practice many components are not.  Redux and React-Redux do not try to force you to write components in an absolute purely functional way, although they do encourage that approach in general.

Overall, it seems like you're over-thinking the issue.  `connect()` provides a way to pass a subset of the store state as props to a component.  It has a number of optimizations to cut down on the number of times your ""real"" component has to re-render.  There may be further improvements that can be made, but the techniques used in the code now are there for good reasons.
",markerikson,2016-04-12 19:19:25
300,2016-02-24 19:14:12,"> It has a number of optimizations to cut down on the number of times your ""real"" component has to re-render.

This is why I dive into the code. I want to know what kind of optimization it provides and how the code could benefit from it. 

Correct me if I am wrong. In current implementation:

<S_CODE_TOKEN>

handleChange() is subscribed to redux store after the component is mounted. As long as store state changes, it will trigger setState() to itself. Then:

<S_CODE_TOKEN>

Since `this.hasStoreStateChanged` has been set to true in previous function, this function will return true as long as store state changes. Then render() must be triggered.

That is to say: React life cycle methods that are intentionally designed for minimizing re-render() are totally bypassed in React-Redux binding. It is essentially doing forceUpdate() on ALL container components as long as store state changes!

I think this is why the react element tree caching is implemented. If not, the performance will be horrible. That can hardly be called an optimization. I consider it as a remedy to the design/implementation flaw in the first place. Sorry to say that but I do think so. Such caching is not necessary if setState() / shouldComponentUpdate() are implemented correctly. The connect() code should be much simpler.
",matianfu,2016-04-12 19:19:25
300,2016-03-04 20:59:54,"I am facing performances issues. Many of my components (ListItemComponent) are updating even if their props are not changed.. They are being redrawn because they are connect()-ed. Connect's default implementation of `shouldComponentUpdate` triggers a redraw when the store changes even if the props of the component itself are all the same. 

I don't get the reasons behind this choice but it's clearly a huge problem in my application and it kind of makes `stateToProps`+functional component useless. The only way i can fix this is to turn my component into a class-based component so i can write my own shouldComponentUpdate.

Can someone explain to me why we want to force component redraw when store changes ?
",davibe,2016-04-12 19:19:25
300,2016-03-04 23:10:34,"@matianfu , @davibe : I think your concerns are based on a misunderstanding of how the Connect wrapper component actually works.  Note that there is a distinction between ""the Connect wrapper component re-renders"" and ""the wrapped original component re-renders"".

The wrapper component does not actually call your `mapStateToProps` function as part of the `shouldComponentUpdate` logic.  That call is deferred as long as possible, and actually only happens when the wrapper component re-renders.  Per https://github.com/reactjs/react-redux/blob/master/src/components/connect.js#L248-L270 , during the wrapper rendering process, it re-runs your `mapStateToProps`, and checks to see if the merged props have actually changed since last time.  If they have not (like, say, if an unrelated portion of the state store changed), then the Connect component directly returns the cached React element, _and does not even tell your component to re-render_.

So, what that means is that we DO want the Connect wrapper component to re-render if the store has changed, but that does NOT automatically mean that your own component will actually re-render as well.  It just means that things MAY be different, and now the Connect component needs to do additional checking based on the store and `mapStateToProps`.

@davibe , you may need to do some additional looking at your components.  Remember that Connect only does shallow equality checking by default - if you're returning new instances in your `mapStateToProps` (such as using `someArray.map()`), those will always be seen as different and force a re-render of your component.  It might help to use a debug tool that indicates why a component re-rendered, such as https://github.com/redsunsoft/react-render-visualizer , https://github.com/spredfast/react-transform-render-visualizer , or the ""WhyDidYouUpdateMixin"" listed at http://benchling.engineering/deep-dive-react-perf-debugging/ .
",markerikson,2016-04-12 19:19:25
300,2016-03-04 23:33:26,"@markerikson i already made sure that my stateToProps does not do funny things. 

I discovered that my purely functional component only re-renders if i fire an action that changes the query params using redux-router `replaceState`. If i fire another action the store does change but my component does not actually rerender (which is good). There must be something that react-router does which is unrelated to redux. As you explained it the connect wrapping element should be able to prevent the normal 'react' way of updating the components, but it's not
",davibe,2016-04-12 19:19:25
300,2016-04-12 15:51:27,"@davibe 

Yes, I think this is related to the context change. In this case returning constant element is not enough to bail out of reconciliation. That’s a rare case though so I wouldn’t worry too much about it.
",gaearon,2016-04-12 19:19:25
300,2016-04-12 19:19:25,"This is now fixed in the common case in `react-redux@4.4.4`.
For other cases, #348 contains a valuable tip.
",gaearon,2016-04-12 19:19:25
299,2016-02-23 09:14:34,"rackt -> reactjs
",roth1002,2016-03-06 15:55:00
299,2016-03-01 16:36:57,"Would you please fix the merge conflict and the double slash? Thanks.
",gaearon,2016-03-06 15:55:00
299,2016-03-06 15:55:00,"Closing as inactive but I’m happy to reopen if the above comments are addressed.
",gaearon,2016-03-06 15:55:00
298,2016-02-22 17:10:07,"Hi,
The sample code below only gives us one chance to createStore with predefined reducer(s), what if I dynamically or lazy-load other components and reducers, how can I apply them to the existing store?

let store = createStore(todoApp)

render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)

Thanks
Gary
",PrimeObjects,2016-02-23 16:02:51
298,2016-02-23 16:02:51,"Hi, thanks for coming by!

This is an issue tracker rather than a support forum.
In the future please search or ask questions like this on StackOverflow.

I hope that this helps you: http://stackoverflow.com/questions/32968016/how-to-dynamically-load-reducers-for-code-splitting-in-a-redux-application

Cheers!
",gaearon,2016-02-23 16:02:51
297,2016-02-20 13:13:05,"Did you not mean to do this here?
",prashaantt,2016-02-20 15:48:45
297,2016-02-20 15:48:45,"In general this code executes once so there is no big difference.
However we want to avoid extra `bind()` calls on the server where `handleChange()` is not used.
So I’d rather leave it as is.
",gaearon,2016-02-20 15:48:45
296,2016-02-20 12:27:20,"Change let to const because there is no other value assigned to this variable.
",jbovenschen,2016-02-20 15:49:18
295,2016-02-19 19:42:33,,mjrussell,2016-02-19 22:14:07
295,2016-02-19 22:14:08,"Thanks.
",gaearon,2016-02-19 22:14:07
294,2016-02-19 19:05:36,"## Synopsis

When using connect with a component the rendered result is missing styling applied.
## Expected results

Styles associated with a component are applied to the component

<img width=""392"" alt=""screenshot 2016-02-19 11 05 05"" src=""https://cloud.githubusercontent.com/assets/76308/13185974/ac0bbc34-d6f8-11e5-833e-34ab196538fd.png"">

<img width=""523"" alt=""screenshot 2016-02-19 11 00 50"" src=""https://cloud.githubusercontent.com/assets/76308/13185934/81fc73b6-d6f8-11e5-8025-f8e6a29d495a.png"">
## Actual results

Styles are not applied to the component due to connect wrapping the component

<img width=""560"" alt=""screenshot 2016-02-19 11 00 25"" src=""https://cloud.githubusercontent.com/assets/76308/13185947/8d470718-d6f8-11e5-9774-702ed509321e.png"">
",kristoferjoseph,2016-02-19 23:48:20
294,2016-02-19 22:15:49,"Hi, thank you for coming by! Alas, this is not enough information to help you.
Please show the component code, how you’re applying styles, etc.
",gaearon,2016-02-19 23:48:20
294,2016-02-19 23:40:24,"I am using https://github.com/gajus/react-css-modules to apply styles.
`CSSModules(connect()(Component), styles)`
",kristoferjoseph,2016-02-19 23:48:20
294,2016-02-19 23:48:20,"It uses a very invasive approach of overriding methods on your class.
In general I would not recommend this approach.

Since it wants to override _your_ class you need to apply it _before_ `connect()`.

<S_CODE_TOKEN>
",gaearon,2016-02-19 23:48:20
294,2016-02-23 08:03:39,"I've been fighting with this a lot in past too and eventually realized that what `react-css-modules` provide is not that great for included cost. I mean components shouldn't be that complex in general to require more than 2-3 css classes. Generally it seems better to just split that component into smaller ones. Doing manually `className={styles.myClass}` instead of `styleName=""myClass""`is not that big deal compared to requiring `react-css-modules` in each component and wrapping resulting object with it.

And I am not even mentioning some other weird behavior I've run into during development essentially requiring to restart webpack process.
",FredyC,2016-02-19 23:48:20
294,2016-02-23 18:19:48,"I agree with what you are saying. @gaearon `react-css-modules` is invasive and @FredyC you are correct you _can_ go very far with vanilla css modules, but dasherized css class names i.e. `my-css-class-name` is a very common use case it supports. To me it felt like the lesser of two evils. I mean what if you want to include third party css? Was thinking about writing a postcss plugin that rewrites the class names to camel case to fix this the 'easy' way, but realized that React looks for dasherized class names when adding CSS transitions :/ . cc @gajus
",kristoferjoseph,2016-02-19 23:48:20
294,2016-02-24 06:22:36,"I am not using _dasherized_ css class name and never needed to add such 3rd party ones. However what about just writing `className={styles['my-css-class-name']}`? I agree it's not that pretty, but to me it still wins over adding the mess caused by `react-css-modules`.

Perhaps it might be a good way right after your `import styles from 'style.css';` to add just something like `const STYLE_INPUT = styles['my-css-class-name'];` It would be more verbose at one side, but in your JSX it would look nice and pretty again ... `className={STYLE_INPUT}`. Or instead of postcss you can just manually call some helper function here that would normalize names without dashes for a local use in the component.
",FredyC,2016-02-19 23:48:20
294,2016-02-24 21:59:32,"@FredyC Exactly. I've been using the `style['dasherized-classe-name']` approach. Thar definitely be dragons there though for brining on new devs etc. Not terrible, just a rake waiting to be stepped on in the middle of the room.
",kristoferjoseph,2016-02-19 23:48:20
293,2016-02-18 16:46:46,"This is a proof of concept of batching updates in `<Provider>`.
I’m not sure we want to get this in, but it can serve as a starting point.

Solves https://github.com/reactjs/react-redux/issues/292.

Remaining issues:
- Should this be opt-in?
- We need to verify this works with RN correctly.
- Currently it forces you to use `react-dom` if you don’t use `react-native` which is a bummer for other renderers.
",gaearon,2016-08-14 15:22:12
293,2016-02-20 12:15:26,"> We need to verify this works with RN correctly.

I can verify that. I ported [the test to for the real React Native environment](https://gist.github.com/epeli/4ab332f7570c2e39f483) it passes without manual `unstable_batchedUpdates` when using this branch.

> Currently it forces you to use react-dom if you don’t use react-native which is a bummer for other renderers.

I see this as a blocker. Doing it as an opt-in would solve it but what would it look like?

Maybe?

<S_CODE_TOKEN>

But I do feel that users shouldn't have to care about this at all. This is pretty much just an implementation detail. It should just work.
",epeli,2016-08-14 15:22:12
293,2016-08-14 15:22:12,"Superseded by #416
",timdorr,2016-08-14 15:22:12
292,2016-02-17 20:48:40,"Prompted by https://github.com/reactjs/redux/issues/1415, please read the discussion there. We currently subscribe in `componentDidMount` but it runs from children first. This has a potential of introducing inconsistencies when a child receives some update state earlier than its parent that passes a state-dependent prop to it.

Would subscribing the parents first fix the inconsistencies? Can we do that somehow (e.g. by passing subscribers up via context)?

Alternatively, can/should we wrap `dispatch` into `ReactDOM.unstable_batchedUpdates()` by default like Relay does?

cc @epeli @chandlerprall @tappleby @acdlite 
",gaearon,2016-08-14 15:14:12
292,2016-02-17 21:05:31,"> Alternatively, can/should we wrap dispatch into ReactDOM.unstable_batchedUpdates() by default like Relay does?

Obvs this wouldn’t work for React Native. :grin: 
",gaearon,2016-08-14 15:14:12
292,2016-02-17 21:52:57,"If I understand correctly https://github.com/reactjs/redux/issues/1415 is basically dup of #99?

> Alternatively, can/should we wrap dispatch into ReactDOM.unstable_batchedUpdates() by default like Relay does?

I think so. I've been using `redux-batched-updates` in all of my projects and there have been zero issues. More often my apps tend to break if I'm not using it... It will also boost performance in some cases.

But the biggest argument for enabling it by default in my opinion is that it makes `dispatch()` consistent. Currently by default `dispatch()` can surprise you because it works differently depending on when you happen to call it. Ex. `onClick` vs. `setTimeout`.

Is there actually any downsides if it's made default?

> Obvs this wouldn’t work for React Native. 

Any ideas why it is in ReactDOM and not in React itself?

I haven't confirmed that the issue is actually present in React Native but I'm now working on a React Native app so I can easily test if it's not confirmed yet?
",epeli,2016-08-14 15:14:12
292,2016-02-17 22:01:43,"> Is there actually any downsides if it's made default?

Hah. I just realized I might have answered it myself:

> Any ideas why it is in ReactDOM and not in React itself?

Redux nor react-redux  does not depend on react-dom and for a good reason because it's not wanted in React Native or any other non-dom React projects...

Any other reasons?
",epeli,2016-08-14 15:14:12
292,2016-02-17 22:28:06,"> Would subscribing the parents first fix the inconsistencies? Can we do that somehow (e.g. by passing subscribers up via context)?

This is an interesting idea!

I think I actually proposed at some point that the render should be triggered only from the most top-level `connect()`ed component but I quickly realized that it would not work because some of the nested `connect()`ed components would not update in that case. But if we can intercept all the updates during a tick and manually run those updates from the top to the leaves at the end of that tick using some context trick it might just work!

But on the other hand it would be a huge hack and there has been some talking about making the update batching default on all cases  so I don't think it's worth it.
",epeli,2016-08-14 15:14:12
292,2016-02-17 23:00:47,"I’m just thinking about something like

<S_CODE_TOKEN>
",gaearon,2016-08-14 15:14:12
292,2016-02-18 00:01:09,"OK, so I tried reversing the order. It doesn’t really help.

If the parent calls `setState()` first, then the child will be re-rendered synchronously, _and the child will have stale data as store props_. If the child calls `setState()` first, then we have the same problem, but in reverse way (child store props are up to date but props received from parent are not).

So it’s not really about the order. No matter what order subscribers are called, one of them is going to come after another, and it will cause staleness unless you explicitly tell React to batch updates.

It seems like we can’t really do anything here. At least not by ensuring the subscription order.

I’ll ask about `unstable_batchedUpdates()` and what’s the RN situation there, but for now I’m closing because most likely this isn’t actionable, and the workaround with calling `unstable_batchedUpdates()`  yourself works well enough when you really need it.
",gaearon,2016-08-14 15:14:12
292,2016-02-18 02:21:57,"@gaearon We encountered this same issue early on in development of Relay and are using `unstable_batchedUpdates` to prevent such discrepancies at the framework level. We have a `relayUnstableBatchedUpdates` module that is forked to use the appropriate version depending on web/native - see the two versions at https://github.com/facebook/relay/tree/master/src/tools.
",josephsavona,2016-08-14 15:14:12
292,2016-02-18 05:07:50,"Thanks everyone for taking a look and weighing in! I'm very interested if you find out more details about incorporating `unstable_batchedUdpates` @gaearon 
",chandlerprall,2016-08-14 15:14:12
292,2016-02-18 10:06:00,"May the present issue be related to that react issue: https://github.com/facebook/react/issues/2410 ?
",happypoulp,2016-08-14 15:14:12
292,2016-02-18 12:52:10,"Is adding `.native.js` to the module name enough to make React Native prefer it?
",gaearon,2016-08-14 15:14:12
292,2016-02-18 15:38:32,"@gaearon yup!
",josephsavona,2016-08-14 15:14:12
292,2016-02-18 15:39:17,"Cc @skevy who worked to get the web/native compatibility implemented in Relay. 
",josephsavona,2016-08-14 15:14:12
292,2016-02-18 15:49:28,"This would force us to assume ReactDOM outside of RN though. Which might be fine because I don't think people use ReactRedux with any other renderers. 
",gaearon,2016-08-14 15:14:12
292,2016-02-18 16:10:24,"I ran into issues with wrapping dispatch w/ `unstable_batchedUdpates`. The return values from dispatch is inconsistent: https://github.com/acdlite/redux-batched-updates/issues/1, this was the main reason I ended up writing redux-batched-subscribe.

My only idea is having each connected component being responsible for notifying its own children instead of subscribing directly to the store, this would end up with only the root connected component being subscribed to redux.
",tappleby,2016-08-14 15:14:12
292,2016-02-18 16:31:13,"> This would force us to assume ReactDOM outside of RN though. Which might be fine because I don't think people use ReactRedux with any other renderers.

I've actually considered using [react-blessed](https://github.com/Yomguithereal/react-blessed). Could we wrap the require in try-catch?
",epeli,2016-08-14 15:14:12
292,2016-02-18 16:46:51,"See https://github.com/reactjs/react-redux/pull/293.
",gaearon,2016-08-14 15:14:12
292,2016-02-18 17:19:41,"Oh, it's now using ES2015 imports. Try-catch will not work with it. Would it be feasible to opt-in to the old school `require` and try-catch for that case only?
",epeli,2016-08-14 15:14:12
292,2016-02-18 17:30:17,"Using try/catch would break the RN packager, as well as any other packager that tries to statically analyze requires.

try/catch around requires should really be avoided unless you're only targeting a Node environment.
",skevy,2016-08-14 15:14:12
292,2016-02-18 17:45:35,"Yeah. For example Webpack allows it but will print annoying warnings.  
",gaearon,2016-08-14 15:14:12
292,2016-02-26 13:26:28,"@gaearon 

If 

1) only root component subscribe to redux store.
2) all component passing store to all children in JSX, something like:

<S_CODE_TOKEN>

3) all container components do `this.setState({ store: nextprops.store, ... })` in `componentWillReceiveProps(nextprops)`

Do you think the problem will be solved?

This is basically the React way. I think react-redux should NOT `setState()` outside the React work flow (reconciliation). Store state should only be passed by props in top-down manner, and `setState()` should only be called in componentWillReceiveProps(). The root cause of the problem could be considered that redux uses a single JavaScript object, and redux emit change events too early.

Besides, the reference equality check, the gem of redux, could be done in shouldComponentUpdate(). Here, both store state and props is synchronized, and unnecessary render() can be prevented.

If this works, it looks much cleaner than current implementation in react-redux.
",matianfu,2016-08-14 15:14:12
292,2016-02-26 15:26:15,"Please neglect the post above. It's not correct. Passing store explicitly via props from root to leave essentially trigger a full re-render and nothing can be done in shouldComponentUpdate(), otherwise the store state won't be populated to all nodes.
",matianfu,2016-08-14 15:14:12
292,2016-02-27 09:45:55,"Another Day, Another Proposal, :LOL:

> If the parent calls setState() first, then the child will be re-rendered synchronously, and the child will have stale data as store props. If the child calls setState() first, then we have the same problem, but in reverse way (child store props are up to date but props received from parent are not).
> 
> So it’s not really about the order. No matter what order subscribers are called, one of them is going to come after another, and it will cause staleness unless you explicitly tell React to batch updates.
> 
> It seems like we can’t really do anything here. At least not by ensuring the subscription order.

This time. I propose the redux calls all component's handleChange() twice, and the Component knows if it's called in the first round, or the second one. 

In the first round, redux just tells all Components that a state change occurred, but no Component should call setState() method. This operation is postponed to the second round, and in second round, not all Component's handleChange() are called, depending on what value they return in first round.

In the first round, each Component do a reference equality check here. If it is confident that the store state change is totally irrelevant to itself, it can set `this.state` to latest store state directly and tells redux that don't call me in second round. This violates React's convention, but if we do not have only one object as the whole app's state, this is reasonable. 

If it is not confident about that, it saves the new store state to a local variable. This indicates that the Component need to be reconciled but the action is postponed to the second round. It tells this to redux by return value, for example, return true.

There may be a possible pitfall here, the assumption should be: even if later, in the second round, the ancestor or parent's setState() fires, a new props is passed down, it is irrelevant to the states anymore. If not sure, choose the second choice.

In the second round, redux only calls handleChange() to Components that returns true in the first round. redux should make sure parent is always called before children.

In this way, the stale props problem won't happen. And if the child has a stale store state, now it already has a copy of new store state. 

For the parent-coupled children, there are two possibilities to update its own state. One is when parent setState() fires, and a props is passed down. The children do setState() in its own componentWillReceiveProps() method. The other, the children do this in second round handleChange().

In either case, props is up-to-date and newest state is available. After the processing, the local variable storing newest state should be cleaned.

In batched setState(), it is possible setState() is called twice. But in the second time, the Component knows that it already has the newest state and the reconciliation has been done (new store equals this.state.store and there is no local copy of newest store). It can simple neglect it.

If this works, most node can use shouldComponentUpdate() to prevent unnecessary re-rendering, it's better than memoization in most case.

Hope to hear your comments, if it will work, this time.

matianfu
",matianfu,2016-08-14 15:14:12
292,2016-04-30 14:33:09,"@tappleby 

> My only idea is having each connected component being responsible for notifying its own children instead of subscribing directly to the store, this would end up with only the root connected component being subscribed to redux.

I agree with that.

It looks to me an antipattern to have `Parent > Child`, both using `connect`, and parent passing down props to child. If Child has to receive props from Parent, the parent could pass as props everything the child needs. I don't really see any advantage of the child receiving state from both props and connect at the same time and it's probably better to choose one or the other but not both at the same time.

@epeli 

> But the biggest argument for enabling it by default in my opinion is that it makes dispatch() consistent. Currently by default dispatch() can surprise you because it works differently depending on when you happen to call it. Ex. onClick vs. setTimeout.

Do you mean that dispatches from event handlers are batched automatically? If that's the case yes it's probably worth batching automatically on dispatches to have a consistent behavior, even if I still think the issue described here can be avoided in the first place.
",slorber,2016-08-14 15:14:12
292,2016-04-30 14:43:27,"AFAIK the plan in React is to always batch eventually so this might become a non-issue later. 
",gaearon,2016-08-14 15:14:12
292,2016-06-17 03:50:28,"I have an idea that might solve this. It would require tweaking the way subscribe() works. `subscribe(listener)` would become subscribe(listener, [priority]). Then when the store state changes, listeners would fire by priority in ascending order. (subscribe should probably store them in that order).

Now, once subscribe() has that, connect can make use of another context field...let's call it connectedComponentDepth. It would use that depth as its priority when subscribing, and also redefine it as a childContext with value +1. Given this, parent components would always have a better priority than their children and so would have its listener invoked first.
",jimbolla,2016-08-14 15:14:12
292,2016-06-17 07:28:00,"@slorber 

> Do you mean that dispatches from event handlers are batched automatically? 

Yes.
",epeli,2016-08-14 15:14:12
291,2016-02-17 16:44:15,"I was under the impression that `mapStateToProps` is called every time an action is dispatched which causes the store to change.

In my simplified example below, this doesn't seem to be the case.

reducers.js

<S_CODE_TOKEN>

Container

<S_CODE_TOKEN>

If it is wrong of me to expect `mapStateToProps` to be called after every `dispatch`, what is the recommended way to conditionally dispatch an action when the condition depends on the state of the store that has just been updated by another action?
",dara76,2016-02-18 12:46:31
291,2016-02-17 17:32:22,"It should be called. Please provide a runnable project reproducing this (on Github or something like http://jsbin.com). I’m confident we don’t have bugs related to this because the library is covered by tests and used in a ton of projects. So something is off with the way you set it up but it’s hard for me to say without running the code and reproducing the issue.
",gaearon,2016-02-18 12:46:31
291,2016-02-18 09:44:34,"I've put an example up at https://github.com/dara76/react-redux-issue.git

The app can be run with `npm run dev-server` which will make the app accessible at http://localhost:9999.

(I've changed the foo reducer to now to have initial `state=true`)

<S_CODE_TOKEN>

In the app, I expect the ""Waiting for foo"" message to change after 3 clicks.
",dara76,2016-02-18 12:46:31
291,2016-02-18 12:46:31,"I think I (probably) see your point now. I haven’t run the app yet but from the source it looks like you expect `this.props.isBarGreaterThanEqual3` to update instantaneously after you `dispatch` in the same event handler.

This is not how React works. In React, state changes (and Reacf Redux uses `setState` internally) are potentially asynchronous. This is because React batches update that happen during the same event handler. So calling `dispatch` will update the store state immediately but your components will be updated a bit later during the same tick, together.

Instead of assuming `dispatch` updates props synchronously, you can use `componentWillReceiveProps` to react to changes in the props when they happen.

<S_CODE_TOKEN>

Note that also, in general, dispatching actions in response to store-dependant prop changes is an anti-pattern. If you want to react to an action, it is best to do so in reducer. If you want to calculate some state that depends on the store state, it is best to do this in a selector.
",gaearon,2016-02-18 12:46:31
291,2016-02-18 13:50:54,"Thanks for looking at this.

Yeah, I was expecting the following flow

`start handling click event->dispatch bar action->state is updated->mapStateToProps called->render called->check if this.props.isBarGreaterThanEqual3->dispatch foo action if it is->state is updated->mapStateToProps called->render called`

but you explain that 

> React batches updates that happen during the same event handler.

which means the flow is actually more like

`start handling click event->dispatch bar action->state is updated->check if this.props.isBarGreaterThanEqual3->dispatch foo action if it is->state is updated->mapStateToProps called->render called`

So is it fair to say that `mapStateToProps` isn't necessarily called after every `dispatch`, but it is only called once per batch of dispatched actions?

I like the simplicity of this advice 

> If you want to react to an action, it is best to do so in reducer. 
> If you want to calculate some state that depends on the store state, it is best to do this in a selector.

Having said that, it's not clear to me how I would update `foo` via a reducer when `bar` reaches 3?

<S_CODE_TOKEN>
",dara76,2016-02-18 12:46:31
291,2016-02-18 14:05:18,"> So is it fair to say that mapStateToProps isn't necessarily called after every dispatch, but it is only called once per batch of dispatched actions?

It is fair to say `mapStateToProps` is called after but not necessarily _immediately_ after the dispatch. It is called when the component is about to re-render, which depends on whether React batches the updates or not. By default, React batches updates from event handlers.

> Having said that, it's not clear to me how I would update foo via a reducer when bar reaches 3?

Since one depends on the state of the other, maybe they should just be a single reducer.

<S_CODE_TOKEN>

Another, simpler, option is to keep them separate, and compute the result as derived data:

<S_CODE_TOKEN>

In this case, we defined a _selector_ called `isFooishEnough`. You can call it from your `mapStateToProps` and use that value instead. In general, this is the preferred pattern: whatever can be computed from Redux store state, should not be there.
",gaearon,2016-02-18 12:46:31
291,2016-02-18 14:36:32,"Thanks for the explanations and insights, they're very helpful.
",dara76,2016-02-18 12:46:31
290,2016-02-15 21:39:30,"The `Provider` API magically provides props for a component that requires those props. For example if we have a regular React code before provider is used like this:

<S_CODE_TOKEN>

After using `Provider` we change it to following:

<S_CODE_TOKEN>

this is not a problem in regular JS or JSX, but when I use TypeScript, the compiler complains that `App` requires required prop `todos`. Of course I can make it an optional property but that's not optimal.
",mohsen1,2016-02-15 21:44:47
290,2016-02-15 21:44:47,"`<Provider>` itself has no effect on what props a component receives.

You probably confuse it with `connect()`. This is what injects those props into your component.
It is explicit:

<S_CODE_TOKEN>

I don’t know enough about TypeScript but I imagine you could write bindings for `connect()` which would tell TypeScript how it works. Unfortunately I don’t think we can do anything on our side to better support this. If you look at `connect()` source, you will see that it passes those props explicitly to the component you wrap with `connect()` so there is no magic here.
",gaearon,2016-02-15 21:44:47
290,2016-02-15 22:51:56,"Thanks for clarification. I use TypeScript type definitions from TSD repository. It works great with JSX. 

Consider following example:

<S_CODE_TOKEN>

which `AppProps` and `AppState` are simply interfaces. If `AppProps` is this interface:

<S_CODE_TOKEN>

This TSX code will complain that `App` needs required property `todo`:

<S_CODE_TOKEN>

Now if I use redux `connect` method in `app.tsx` like following:

<S_CODE_TOKEN>

The TSX compiler will not understand that `connect` made a new component that does not have the same props.

This is most likely due to type definition or TSX capabilities. I just wanted to leave this write up for future references.

I'll post here if I could figure it out although I'm pretty new to React, Redux and TypeScript! 
",mohsen1,2016-02-15 21:44:47
290,2016-02-16 16:05:25,"The problem is likely that those typings don’t tell TypeScript that parent props are going to be merged with what you return from `mapStateToProps` and `mapDispatchToProps`. We don’t maintain those typings officially so I can’t vouch for their quality.

Related: https://github.com/reactjs/redux/issues/1401.

cc @aikoven @ulfryk
",gaearon,2016-02-15 21:44:47
290,2016-02-16 16:27:43,"@mohsen1 I'm using custom typings for `connect`:

<S_CODE_TOKEN>

They only work with stateless functional components and don't cover all cases, but types are inferred correctly:

<S_CODE_TOKEN>

The major drawback that kept me from submitting these to DefinitelyTyped is that TypeScript doesn't understand decorators that change type.

Before that I had to explicitly specify `props` type and make every prop optional.
",aikoven,2016-02-15 21:44:47
290,2016-02-16 23:43:03,"@aikoven how is Angular2 solving it with their decorators?
",mikekidder,2016-02-15 21:44:47
290,2016-02-17 04:53:42,"@mikekidder I'm not aware of it, could you please point to some examples?
",aikoven,2016-02-15 21:44:47
290,2016-02-17 05:17:08,"@aikoven can you share your full `react-redux.d.ts` file so I can try it out?
",mohsen1,2016-02-15 21:44:47
290,2016-02-17 06:59:36,"@mohsen1 https://gist.github.com/aikoven/be8a430ab2a38baaf29f
",aikoven,2016-02-15 21:44:47
290,2016-02-17 07:28:17,"@gaearon - I also had this problem, but did not found any good solution. It's actually problem of how `.tsx` understands component class.

@mikekidder - Angular2 decorators are not useful here. Their way is binding a property of a class to input attr. If something similar was made for react it would look like this:

<S_CODE_TOKEN>

and now `render(…, <App/>)` would compile, because binding of `title=""…""` property to component attribute `appTitle` is done under the hood and `.tsx` compiler thinks that `App` does not have any props. And this of course will work well if we omit using of regular `props`…
",ulfryk,2016-02-15 21:44:47
290,2016-07-24 11:37:22,"Don't suppose this has been resolved nicely yet for decorating React components defined as classes?
",codeandcats,2016-02-15 21:44:47
290,2016-09-12 06:49:16,"@codeandcats Nope, but there are some issues in TS repo to track, e.g.: https://github.com/Microsoft/TypeScript/issues/4881
",aikoven,2016-02-15 21:44:47
290,2016-10-20 01:00:05,"I tried out https://github.com/reactjs/react-redux/pull/433 and those typings work as expected for me. The return type of `connect` is

<S_CODE_TOKEN>

which is exactly what we want!
",Zalastax,2016-02-15 21:44:47
290,2016-10-20 01:18:46,"@Zalastax it looks like that PR has been closed. 😢  I don't suppose you feel like forking and re-requesting it? 🌹 
",codeandcats,2016-02-15 21:44:47
289,2016-02-15 16:12:52,"Hi,

I know that [binding the component context to props as been discussed](https://github.com/reactjs/react-redux/issues/247) and is not relevant yet.

What about reading the component own context. I need something like:
`connect((appState, ownProps, ownContext) => {
...
})`

Is that possible?

Using react-router, I need to access some url params through inner components. I want to pass them through contextType. Then those url params are used in mapStateToProps() function to target the right stores on appState.
",damienleroux,2016-02-15 20:25:44
289,2016-02-15 20:25:44,"We don’t want to expose `context` in the public API because it is unstable API and will likely change. We can rely on it internally because we know our internal use case will still be supported but we don’t want to offer a public API like this and then break everyone if React does something like the “single context parent” thing they promised to do.

If you’d like to read something from context, please read it in a parent component, and pass it to the `connect()`ed component. Then it will be able to read that value from `ownProps`.
",gaearon,2016-02-15 20:25:44
289,2016-02-15 23:35:07,"Yes It is actually the solution I implemented . Thank you for the advices.

I didn't read anything about what will become this context. Could you give me a link so I could stay up to date with React future changes?

Thank you!
",damienleroux,2016-02-15 20:25:44
289,2016-02-16 16:04:36,"> I didn't read anything about what will become this context. Could you give me a link so I could stay up to date with React future changes?

There’s no specific link (it was a discussion on Twitter) but AFAIK the plan it to allow a component to receive only a single kind of context. So instead of `contextTypes` you’d have something like `contextType`. If `connect()` wants to receive `store` from context, it wouldn’t be able to read anything else from it.
",gaearon,2016-02-15 20:25:44
289,2016-03-01 18:18:32,"Hi @gaearon 

Since React-Router allows you get access to the router, history, location etc.... via the context, how can you get access to the context from mapStateToProps() ?

Since its now a documented feature of React, react-redux should expose context in the public api, right ?

Best regards ?
",lauterry,2016-02-15 20:25:44
289,2016-03-01 22:23:20,"I believe I answered this in https://github.com/reactjs/react-redux/issues/289#issuecomment-184375853. We also can’t possibly read arbitrary context because we’d need to know your contextTypes.

Please pass this info as props from parent. 
",gaearon,2016-02-15 20:25:44
289,2016-03-26 01:08:36,"You seem pretty set on your decision, Dan, but I thought I'd give you some perspective my situation where this feature might be useful for consideration.

Each of my `<Route />` components are `connect`'d so if they're linked directly, they know what state to load. For example:

<S_CODE_TOKEN>

The `Repo` connected component loads the data it needs to display and selects it from the state in it's `mapStateToProps`. Say, for instance, it selects the `repoOwner` and `repoInfo` from the state. The child component `Issues` loads the data _it_ needs to display and selects it from the state. It also needs the `repoOwner` and `repoInfo` state too so instead of performing the selection again (which is quite complicated), it's passed down via context. The problem arises when the `Issues` component needs information from `repoOwner` in it's `mapStateToProps`, which isn't available because it's in the context.

My hacky solution is to just create a wrapper component that passes the context as a prop but it feels dirty and I end up with a lot of useless components filling up the tree:

<S_CODE_TOKEN>

I feel as though a third argument to `mapStateToProps`, like React's lifecycle methods, with the `context` could be pretty useful so I could access `repoOwner` directly instead of creating the wrapper. This may be hard to implement, however, given the magic `react-redux` does with the `function.length` on the `mapStateToProps` function (i.e. if you want context, you have to suffer the performance impact from including `props` argument) so I understand it's a tough decision.
",adriancooney,2016-02-15 20:25:44
289,2016-06-28 21:55:22,"I've made a ""Provider"" component to expose my Axios instance it in a context, allowing container components to inject them in my thunk dispatchers, but I think I'm doing to much repeated work, something that `connect` could help.

I've done similar things using props, and it looked pretty good:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

The authors say, the usage of context is discouraged, but passing down the tree as a prop is quite painful, and I repeating the steps of react-redux and creating my own `Provider`/`connect` would be an overkill.
",romulof,2016-02-15 20:25:44
289,2017-01-18 00:26:00,"Can you at least make it available to `connectAdvanced`? e.g.

<S_CODE_TOKEN>",mnpenner,2016-02-15 20:25:44
289,2017-01-18 01:16:27,See https://github.com/reactjs/react-redux/issues/599#issuecomment-271158715 and https://github.com/reactjs/react-redux/issues/599#issuecomment-271159268,jimbolla,2016-02-15 20:25:44
289,2017-01-18 02:08:07,"@jimbolla By only injecting it into `connectAdvanced`, we're limiting the arity problem. You don't have to worry about how many args `mapStateToProps` or `mapDispatchToProps` take because the user is now in control of that.

Whether or not the context is passed to the inner function of `selectorFactory` could be a factory option; perhaps `{contextTypes: xxx}`, same as what the React Component and `recompose` accept.

`reselect` is a separate package; `react-redux` isn't responsible for that. Regardless, I think most of us are just going to copy the relevant context into the props, and then `reselect` will be able to handle it just fine. That's exactly what I've done, and it's working great so far.

I did manage to get [`getContext`](https://github.com/acdlite/recompose/blob/master/docs/API.md#getcontext) working though, so thank you for that! This would have been a big pain without it. I suppose I'm less concerned about this now that you've posted a reasonable workaround, but it doesn't sound like it would be that difficult to add. I think the lifecycle problem can just be ignored -- context updates simply won't be propagated since React doesn't really support it anyway.",mnpenner,2016-02-15 20:25:44
289,2017-01-18 02:37:25,"Until the day comes that React has a fully blessed context API, adding support for it is a maintenance liability for React Redux.",jimbolla,2016-02-15 20:25:44
289,2017-02-10 18:18:13,"@adriancooney what solution have you implemented in the end?

My dirty way:
<S_CODE_TOKEN>
and in the component:
<S_CODE_TOKEN>",zergione,2016-02-15 20:25:44
289,2017-02-11 22:21:16,@zergione in the end I opted to manage the state globally. I took a bit more effort but it felt more organised with the app and not tied to the implementation.,adriancooney,2016-02-15 20:25:44
288,2016-02-15 12:13:24,"Hello,

If my state tree looks something like `{ text: """"}`. In this case, mapStateToProps will has only `text` as parameter. But, if my state tree looks like `{ text: """", name: """"}` and now I have two reducers and mapStateToProps will has whole state tree as parameter. If I need whole state tree in mapStateToProps when there is only one key in state, I need to use combineReducer. Is this intentionally or for some other reason?. Please fill free to close this if this is discussed already and give me that link.

Thanks
",mananvpanchal,2016-02-15 20:28:30
288,2016-02-15 20:28:30,"Unfortunately I don’t quite understand the question.

`mapStateToProps()` receives whatever the shape of your state is. So if it is `{ text, name }`, whether you use `combineReducers()` or write root reducer by hand, you will get `{ text, name }` there.

We suggest using `combineReducers()` in larger apps but it doesn’t make sense to use it when you only pass a single key. The whole point of `combineReducers()` is to combine _multiple_ reducers by their keys. If you don’t have multiple reducers yet, don’t worry about it.
",gaearon,2016-02-15 20:28:30
287,2016-02-15 11:55:25,"I am getting following unknown warning in my Firefox browser console. This only occurs if I am using a component on page that is making use of react-redux. It does not occur on other pages using simple React components.

`getDefaultProps is only used on classic React.createClass definitions. Use a static property named defaultProps instead`

Whats this? Can anybody please tell?
",topgun743,2016-02-15 20:30:50
287,2016-02-15 20:30:50,"It doesn’t have anything to do with React Redux. 

The component that happens to use React Redux _also_ happens to define `getDefaultProps` on an ES6 component class. React warns that this is not a supported pattern anymore:

<S_CODE_TOKEN>

This will not work. You need to convert this code (likely copy-pasted from `createClass` style component) to

<S_CODE_TOKEN>
",gaearon,2016-02-15 20:30:50
287,2016-02-18 06:40:54,"OK, but could not understand whats the difference between the above two snippets. They are almost doing the same thing. Then why React warns? Is it concern with some syntactic sugar?
",topgun743,2016-02-15 20:30:50
287,2016-02-18 09:12:41,"There is some explanation in this article: http://www.newmediacampaigns.com/blog/refactoring-react-components-to-es6-classes (Step 1)
",FredyC,2016-02-15 20:30:50
287,2016-02-18 12:31:28,"They seem to be doing the same thing but one is supported way of declaring default props and another is the unsupported one. :-)
",gaearon,2016-02-15 20:30:50
287,2016-02-20 22:50:09,"Nice link by @FredyC Thanks. Some good insight into the ever evolving complexities of ES*
",topgun743,2016-02-15 20:30:50
287,2016-02-20 22:56:57,"This is not about ES semantics. Props are a feature of React. getDefaultProps() was part of React createClass() API but they decided that there is no need for a method it a property can suffice so when you _don’t_ use createClass(), you use defaultProps instead. 
",gaearon,2016-02-15 20:30:50
287,2016-02-20 22:59:47,"Appreciate. Thanks for correcting my misunderstanding :)
",topgun743,2016-02-15 20:30:50
286,2016-02-15 06:19:06,"First of all, I setup a demo repo of the problem here: https://github.com/perrin4869/react-redux-problem and am currently serving the demo at http://julian.dotcore.co.il

In that demo, you have the following component tree:

<S_CODE_TOKEN>

And the state is very simple: `{ list: (array | null) }`. If `state.list` is an array, `Foo` is render, if it is `null` then `Bar` is rendered. The problem is, when `state.list` gets turned from `[...]` to `null`, `Foo` gets re-rendered and throws an error because it can't render `<List list={state.list} />` (because it is null), and only a second later does `App` get re-rendered and `Foo` is exchanged with `Bar`.

Is it possible to setup this kind of project in a way so as not to throw that error? Of course, you could use `App` to pass `state.list` down to `Foo`: `<Foo list={state.list} />` which then passes the list down to `List`, but then you have to pass state down to components that don't really to know about it.
",perrin4869,2016-02-15 20:36:12
286,2016-02-15 20:36:12,"Does the problem stay when you remove the transition group? It seems like you’re delaying rendering with transition group, and this is why you render `<Foo>` when it no longer has a `list`, which passes an undefined `list` to `<List>`.

> Of course, you could use App to pass state.list down to Foo: <Foo list={state.list} /> which then passes the list down to List, but then you have to pass state down to components that don't really to know about it.

The problem is that when you use a transition group, you want to retrieve data _above_ it so that it can render data passed by props even when this data is no longer in the state. So this seems like a valid case for when you’d want to `connect()` a component above.
",gaearon,2016-02-15 20:36:12
286,2016-02-15 20:37:08,"Effectively you don’t want `Foo` to render the current state of the Redux store. (Because it gets empty during the transition!) Therefore you _want_ it to be a presentational component that reads data from props.
",gaearon,2016-02-15 20:36:12
285,2016-02-11 18:24:16,"I've attempted to refactor `connect` to provide additional (optional) exports that would allow the user to easily create a custom `Connect` class. This allows the user to override specific parts of `Connect` while maintaining all the existing caching and update logic. Here is an example of usage:

<S_CODE_TOKEN>

In this example I've overridden the `handleChange` method to return a Promise that resolves when the changes have been flushed to the DOM.

You then just use this custom `connect` method to decorate your components instead of the default one from react-redux.

All but one of the tests are passing, but I'm interested in getting feedback on this before working on it further.
",mhodgson,2016-02-11 20:47:35
285,2016-02-11 20:47:35,"Inheritance is generally problematic, and especially so when mixed with a functional paradigm. React components should not create class hierarchies, and even for this use case we don’t want to do that.

To solve #269, I would much prefer to _extract_ the core logic from `connect()` so it can become a simple wrapper that is easy to write on your own with custom logic.
",gaearon,2016-02-11 20:47:35
285,2016-02-12 17:07:23,"@gaearon thanks for the quick feedback. I'm really interested in getting something that works for this, but it seems you have pretty specific ideas about how it should work. Would you mind giving a little bit more guidance on how you'd like to see this structured? Happy to put the work in to get to something useful. I'm struggling to see how to get a clean API here without inheritance when so many lifecycle methods are involved. We could double wrap the component but that seems even worse to me.
",mhodgson,2016-02-11 20:47:35
285,2016-02-12 21:34:33,"Something like `subscribeComponentToStateChanges(store, callback, mapStateToProps, mapDispatchToProps, mergeProps, options)`?
",gaearon,2016-02-11 20:47:35
285,2016-02-13 12:53:34,"@mhodgson yes i'd also prefer to avoid inheritence but rather use composition / strategy pattern, where the default strategy remains compatible with current behavior.
",slorber,2016-02-11 20:47:35
284,2016-02-11 09:09:47,"Hi,

I have 3 container components implemented as simple drop down lists presentation components. Options available to choose from are calculated based on choices in previous components. 

Components and data flow:

OrganisationContainer -> select an org -> load available groups into -> OrganisationGroupsContainer  -> select a group -> load available contacts into -> ContactsContainer

My problem occurs when I need access to the first container's chosen value (via redux store) in the second container so that I can calculate options for third container.

Sample code:

<S_CODE_TOKEN>

I have left out code for the ContactContainer, reducers, createStore, actions and other boilerplate as testing and stepping through shows that it all works fine -- right code gets called at the right time.

The problem is **stateProps.orgName** in **mergeProps** : this is returning **undefined** even though the value is clearly set in the store.

I am doing my best to follow recommendations in [#211](https://github.com/rackt/react-redux/issues/211) i.e. not using mapDispatchToProps and using mergeProps but still having no luck.

All containers are connected and if I simulate by replacing:

<S_CODE_TOKEN>

 ... it all works out fine.

Am I doing something obviously wrong? Should I be using some other pattern/paradigm?
",sawan,2016-02-12 12:59:56
284,2016-02-11 20:50:06,"Do I understand correctly that in

<S_CODE_TOKEN>

you expect `stateProps.orgName` to reflect the value after dispatching those actions rather than the value before dispatching those actions?
",gaearon,2016-02-12 12:59:56
284,2016-02-12 01:04:35,"Hi,

I expect `stateProps.orgName` to reflect the value before dispatching the actions -- as it has already been set in the global redux store. In other words, I want to inject the value for `orgName` managed by `OrganisationContainer` that I chose previously and that is now available in the store.
",sawan,2016-02-12 12:59:56
284,2016-02-12 10:58:36,"Consider my approach to solving the same problem using a reducer:

<S_CODE_TOKEN>

Should I  **not** be using combineReducers?
",sawan,2016-02-12 12:59:56
284,2016-02-12 12:59:02,"Please provide a complete project reproducing the problem with instructions to reproduce it. It is hard to help because I don’t really understand what the code should be doing. 
",gaearon,2016-02-12 12:59:56
284,2016-02-12 12:59:55,"I am also closing the issue because this appears to be a usage question rather than a genuine issue with the library. Nevertheless feel free to post a link to the project reproducing it and I can try to take a look. 
",gaearon,2016-02-12 12:59:56
283,2016-02-10 07:32:43,"This help some bundler
",salztorte,2016-02-10 16:39:56
283,2016-02-10 15:43:15,"@salztorte This will not help. In this case you should process with babel this code. It's not fast.
",TrySound,2016-02-10 16:39:56
283,2016-02-10 15:44:15,"@salztorte See here
https://github.com/rackt/redux/pull/1369
",TrySound,2016-02-10 16:39:56
283,2016-02-10 16:39:56,"We had it before, but this is not what `jsnext:main` should point to.

See discussions in https://github.com/rackt/redux/pull/1369, https://github.com/rackt/redux/issues/1042, https://github.com/rackt/redux/pull/1327, https://github.com/rackt/react-redux/pull/256.
",gaearon,2016-02-10 16:39:56
282,2016-02-09 23:59:23,"Using `react-redux: 4.3.0` I'm passing props to my connect()'ed component `MyComponent` from its parent component. However they're not re-rendering `MyComponent`. I only need `connect()` for  `dispatch` so I'm wrapping my component like this:

<S_CODE_TOKEN>

Removing `connect()` fixes the issues.
is this expected behavior?
",alantrrs,2016-02-10 00:13:39
282,2016-02-10 00:13:39,"If your props are mutated deeply, this is expected. React Redux assumes that if `props.foo.a` changes, `props.foo` also changes its reference. This is the only performant way to know when the props change.

If you are affected by this,
- Either change your parent component to make sure the props are not mutated deeply,
- or add `{ pure: false }` as the fourth argument to `connect()` (note: it will be much slower than normally).
",gaearon,2016-02-10 00:13:39
281,2016-02-05 13:57:56,"Greetings to all of you seasoned Redux veterans!

I'm new to React and Redux but I'd like to get this stuff right before moving on with our project. I've read about connecting presentational and container components but before going there, I'd like to make a simple component that does it all. I have a `Header` component that should render user's username if user is authenticated. I already managed to successfully login the user using our API and update my immutable Redux store accordingly. So, looking from the surface, the following code works.

The question is whether the following implementation is an antipattern or otherwise 'bad' e.g. performance-wise? Am I allowed to call `setState()` manually when using Redux? Without the `setState()` call the component doesn't seem to recognise state changes in store at all. Is there performance (or some other relevant) differences between this implementation strategy and the one that uses `mapStateToProps()` method with `connect()`?

<S_CODE_TOKEN>
",TomiS,2016-02-05 14:46:15
281,2016-02-05 14:46:15,"This is a good example to understand how React Redux works, but I wouldn’t do this in a real app.

> Without the setState() call the component doesn't seem to recognise state changes in store at all

Yes, this is precisely how React works: you must tell it that the state has updated.

> The question is whether the following implementation is an antipattern or otherwise 'bad' e.g. performance-wise?

One issue you have there is that you never unsubscribe. You should be unsubscribing in `componentWillUnmount`.

> Is there performance (or some other relevant) differences between this implementation strategy and the one that uses mapStateToProps() method with connect()?

Yes. You don't implement any optimizations. For example, components generated by `connect()` bail out of rendering if they see that the props returned from `mapStateToProps()` are shallowly equal to their previous versions.

Have a look at [`connect()` source code](https://github.com/rackt/react-redux/blob/master/src/components/connect.js). You will see that the idea is the same, but it has a ton of optimizations at different points. In general, it avoids calling your functions or rendering unless absolutely necessary. 

I was a guest at [this readthesource episode](https://www.youtube.com/watch?v=VJ38wSFbM3A) explaining how React Redux works so you might want to check it out.

We definitely recommend using React Redux for best performance instead of rolling your own subscription logic.
",gaearon,2016-02-05 14:46:15
281,2016-02-05 14:55:45,"Thanks @gaearon.  This was extremely helpful. Have a nice weekend.
",TomiS,2016-02-05 14:46:15
280,2016-02-05 04:25:50,"Was debugging a component for a long time trying to figure out why `this.props.dispatch` wasn't available.

Turns out I had an empty object in my `connect` decorator;

<S_CODE_TOKEN>

Once I removed the empty object, `this.props.dispatch` was available. 

Was hoping somebody could explain why and if this should be the case. 
",thomasdavis,2016-02-05 14:48:57
280,2016-02-05 14:48:57,"This is not the relevant repository. You are probably asking about [React Redux](https://github.com/rackt/react-redux).

The reason is that second argument to `connect()` can be either a function or an object, per its [documentation](https://github.com/rackt/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options). If it is a function, it is expected to return the props to inject into the component. If it is an object, it will assume the values in that object are action creators, and inject bound action creators. The only case where you get just `{ dispatch }` is when you don’t specify `mapDispatchToProps` at all. Of course you can also manually write `mapDispatchToProps` that will just return `{ dispatch }` if you want to.
",gaearon,2016-02-05 14:48:57
279,2016-02-03 02:52:44,"I had actually considered this before doing the `connectFactory` approach in #185. The issue was that it felt wrong to overload the arguments and require first calling the function to determine its return type.

That said, this is the cleanest implementation I could come up with. It checks if the argument in question has `fn.length` of 0 and also returns a function.

This breaks a few tests, but nothing critical - only on some spies or guarantees an arity-0 function is called a certain amount of times. I can clean those up if this looks alright otherwise.
",tgriesser,2016-02-04 19:11:43
279,2016-02-03 03:08:12,"Rather than look at arg count, can we determine whether they returned functions instead of objects lazily first time we call them from the constructor?
",gaearon,2016-02-04 19:11:43
279,2016-02-03 21:50:15,"Took another pass at it, it's a little more verbose / complicated, but does things lazily as you mentioned, all tests are passing and it avoids calling the mapping functions any more times than necessary. 

If this looks alright I can add some tests.
",tgriesser,2016-02-04 19:11:43
279,2016-02-03 22:16:04,"Yes, this looks good. Please do add tests.
",gaearon,2016-02-04 19:11:43
279,2016-02-04 00:41:07,"Updated, rebased, tests added. Also noticed when writing the tests that a final shallow equality check on the final merged props would save a render if there is a custom `mergeProps` supplied and nothing has changed, so I added that as well.
",tgriesser,2016-02-04 19:11:43
279,2016-02-04 03:12:52,"That’s amazing, thank you so much for your work on this. A few more nits and it’s good to go.
",gaearon,2016-02-04 19:11:43
279,2016-02-04 05:31:44,"All set with a test and a bit of formatting polish
",tgriesser,2016-02-04 19:11:43
279,2016-02-04 19:33:54,"Would you be up to contributing a section to [Computing Derived Data](https://github.com/rackt/redux/blob/master/docs/recipes/ComputingDerivedData.md) recipe documenting that? I think a lot of people won’t learn about this useful feature otherwise.
",gaearon,2016-02-04 19:11:43
279,2016-02-04 20:02:17,"Sure thing, I'll take a look at doing this a little later.
",tgriesser,2016-02-04 19:11:43
279,2016-02-09 22:06:51,"@tgriesser I have started to update the Reselect docs to reflect this change. If you haven't started on this already, would you like me to carry on and document it?
",ellbee,2016-02-04 19:11:43
278,2016-02-02 21:54:49,"This post is meant to be a start for a discussion. [Moved from here](https://github.com/rackt/redux/issues/1353#issuecomment-178781992) as @gaearon [suggested here](https://github.com/rackt/redux/issues/1353#issuecomment-178783973).
## Intro

I'm interested in finding best practices on how to architect complex components implemented in React and Redux so that they are reusable as a whole in another app.

Not sure how widespread is the problem, but I encounter it from time to time. I hope the developers from the front-end community encounter similar problems, too.
## Terms and definitions

A **complex component** -- a UI (React, Redux actions), coupled with business logic (Redux reducer), and data access logic (Redux actions' side effects; middleware).

Traits of a complex component:
- can be instantiated more than once, maybe simultaneously (not a singleton)
- each instance can have its own configuration
- can query and manipulate the global environment:
  - the URL and the history (routing, back-forward)
  - network communication (AJAX, WebSockets etc.)
  - storage (cookie, localStorage, sessionStorage etc.)
  - viewport dimensions, global events like viewport scrolling/resizing
- can depend on the app state:
  - query and manipulate other components
  - delegate some functionality, e.g. asset loading, full-screen modal container etc.
- should not pollute the environment
- when used from another app, the component should be reused, not copy-pasted

An **app** -- a UI environment where the components are configured and instantiated.

Traits of an app to consider:
- can be a React + Redux app
- can be a React-only app
- can be a non-React app
## Examples of components
- a [wizard](http://ui-patterns.com/patterns/Wizard), a multi-step form, a [questionnaire](https://en.wikipedia.org/wiki/Questionnaire)
- a complex stateful popup, like a multi-tab settings dialog, or a chat
- a WYSIWYG editor with autocompletion and image uploads

Developing such components with Redux adds the invaluable benefits of predictability and replayability.
## Questions to answer
- How to structure the component code (where to put reducers, actions, UI code)
- How to put a component into a React + Redux app
- How to put a component into an app that has no Redux and/or React
- How to isolate the state of the component instance
- How to configure the component reducers' logic based on the component instance configuration
- How to target actions at specific component instances' state
- How to handle actions of a specific component instance in the app reducers
- How to bridge the component with the global environment (URL and history, network, storage)
- How to bridge the component with the app state
- How to bridge the component with the functionality provided by an app (asset loading, full-screen modal container etc.)

React developers from Facebook answered that I should ""start by reusing React components only"", but having a lot of business logic copied from app to app is not the best way to go.

Elm architecture answers some of the questions, but Redux is quite different (no view+reducer coupling, no explicit serializable side-effects).
## References
- Similar discussion, but not so broad: https://github.com/rackt/react-redux/issues/123
- Similar discussion, but about just actions / reducers / side-effects: https://github.com/rackt/redux/issues/1171
- Similar question: https://github.com/rackt/redux/issues/1314
- Related: https://github.com/yelouafi/redux-saga/issues/62 Though I'd like to avoid sticking to redux-saga until these sagas' state is serializable as well as redux state to at least survive a page reload. ( https://github.com/yelouafi/redux-saga/issues/22, https://github.com/yelouafi/redux-saga/issues/5 )
- Related: https://github.com/rackt/redux/issues/1098
- Related, about action types convention: https://github.com/rackt/redux/issues/786
- Related: https://github.com/rackt/redux/issues/913
- Related: https://github.com/rackt/redux/issues/943#issuecomment-150712338
- Related, reducer logic customization: [BurntCaramel/flambeau reducer props](https://github.com/BurntCaramel/flambeau/blob/master/docs/reducers.md#props)
- https://github.com/erikras/redux-form
- https://github.com/tonyhb/redux-ui
- https://github.com/erikras/multireducer
- https://github.com/acdlite/reduce-reducers
- https://github.com/artsy/react-redux-controller
",sompylasar,
278,2016-02-03 10:00:21,"**tl;dr:** Use [The Elm Architecture](https://github.com/evancz/elm-architecture-tutorial)

Here's my proposal:

> Not sure how widespread is the problem, but I encounter it from time to time. I hope the developers from the front-end community encounter similar problems, too.

Unless you like spaghetti code, the problem is indeed **very widespread**, because by default Redux does not force you to encapsulate (except `combineReducers` but that's not enough) and therefore componentize.

I believe [The Elm Architecture](https://github.com/evancz/elm-architecture-tutorial) has found the solution for all the problems above.

The principle behind The Elm Architecture is basically just simple composition. People who are using Redux nowdays definitely knows of composition... we are composing our [views, state and even reducers](http://blog.javascripting.com/2016/02/02/encapsulation-in-redux/)

The Elm Architecture is doing same - except one small thing, it's **composing Actions and Side Effects** as well. Just imagine you could have something like:

<S_CODE_TOKEN>

Fairly simple concept which solves everything.

**Before reading following explanation I highly encourage you to go through [The Elm Architecture](https://github.com/evancz/elm-architecture-tutorial) description**

> can be instantiated more than once, maybe simultaneously (not a singleton)

Just compose actions and add ID of the instance so the hierarchy could look like `Counters.Counter.1.INCREMENT` where `1` stands for the index of the Counter. [example in Redux](https://github.com/salsita/redux-elm/blob/master/src/3-a-dynamic-list-of-counters/main.js#L51-L61) 

> each instance can have its own configuration

Have an init action, which configures the instance (Using Action composition).

> can query and manipulate the global environment:

This means to make the component capable of Side Effects... Elm solves this by reducing them in updater function (Updater is same as reducer in Redux). With Redux, there are [store enhancers](https://github.com/salsita/redux-side-effects) which supports this kind of functionality already. Please keep in mind that using Generators for side effects is opinionated and has its drawbacks, but you can always use plain old reduction as `Pair<AppState,List<Effects>>` which works without generators too. [example in Redux](https://github.com/salsita/redux-elm/blob/master/src/5-random-gif-viewer/main.js#L37-L39)

> can depend on the app state:

Parent components should be responsible for orchestrating inter-component communication => therefore just simple composition, I [blogged](http://blog.javascripting.com/2016/02/02/encapsulation-in-redux/) about this.

> should not pollute the environment

Every Component in The Elm Architecture is independent and isolated, there's no way to access parent's component state in the child component.

> when used from another app, the component should be reused, not copy-pasted

And because Components are isolated, it's fairly simple to integrate it into any other redux-based application. [example in Redux](https://github.com/salsita/redux-elm/blob/master/src/main.js)
",tomkis1,
278,2016-02-03 11:47:50,"@tomkis1 Thanks for this great overview! I'm familiar with the Elm Architecture, but the missing piece was this library https://github.com/salsita/redux-elm/ which looks like new kid on the block.

Several real-world questions aren't yet answered for me, but I'll study the examples from this repo first.
",sompylasar,
278,2016-02-03 12:52:42,"@sompylasar Please keep in mind that it's not a framework nor library, it's just a proof of concept that we can write Elm like programs using redux. Good thing is that using this approach will solve many problems  which otherwise needs some solution while using redux.
",tomkis1,
278,2016-02-06 14:02:11,"@tomkis1 I like the Elm architecture and it seems perfect to handle local component state, however I think it's missing something for real world apps.

Wrapping actions according to the dom tree structure means at the top your mailbox basically only receive some kind of global action like APP_STATE_CHANGED, and it's the deeply nested payload of that action that actually holds the useful action. So if you have an app with a lot of counters everywhere, at very different nested levels, it seems pretty hard for me to listen to ALL the increment actions of ALL counters, and display that value somewhere.

I've written something here and did not get any good answer but maybe you can try to solve my counter problem? https://github.com/evancz/elm-architecture-tutorial/issues/50

By the way, I'd appreciate if you wanted to contribute to this [TodoMVC-Onboarding](https://github.com/slorber/todomvc-onboarding) with an Elm architecture solution.
",slorber,
278,2016-02-06 14:08:48,"@sompylasar maybe the DDD part of my anwser here can interest you: https://github.com/rackt/redux/issues/1315#issuecomment-179164091
",slorber,
278,2016-02-06 14:24:57,"@slorber :+1:
",sompylasar,
278,2016-02-14 00:54:27,"@sompylasar Thanks for the kind words in https://github.com/reactjs/redux/issues/419#issuecomment-183775729.  I believe everything in my article, [React, Automatic Redux Providers, and Replicators](https://medium.com/@timbur/react-automatic-redux-providers-and-replicators-c4e35a39f1), covers most of your questions and provides solutions for nearly all of them.  I'd be glad to answer any specific questions.  In advance, if you can include some background/reasoning behind your questions, it would help me answer them to the best of my ability.  :)
",timbur,
278,2016-02-14 01:20:23,"@timbur Yes, thank you, I'm very excited with the article, that's exactly what I was looking for. I'm still reading it now, I'll ping you here if something comes into mind. One thing for now is I wonder how would redux-saga fit into the proposed architecture.
",sompylasar,
278,2016-02-14 09:01:46,"In our applications we solved problem of isolating component's logic in a connect-like style. https://github.com/Babo-Ltd/redux-state
",galkinrost,
278,2016-02-16 20:24:05,"More ideas here: https://github.com/reactjs/redux/issues/1385#issuecomment-184805927
",sompylasar,
278,2016-03-18 02:35:39,"Relevant new discussion: https://github.com/reactjs/redux/issues/1528
",gaearon,
278,2016-04-07 03:54:22,"Encounter just the same problems, and haven't found any practical solution yet. I will keep my eye on it.
",panezhang,
278,2016-07-19 15:49:04,"Related: https://github.com/reactjs/redux/blob/master/docs/recipes/IsolatingSubapps.md
",sompylasar,
278,2016-10-20 22:48:34,"I've been playing around with the Elm (0.16) architecture for a while -- there are two main issues in regards to using that architecture with Redux: 
- its less performant (unless you're really clever about it) because every time you map over dispatch (i.e. `action => dispatch({type: 'childAction', action})`) you create a new function references which forces the component to be re-rendered on every state change.
- with better encapsulation comes a tradeoff with the amount of plumbing you have to do to communicate between components (much like React with local state).

If you're interested, here's some of my latest examples of playing around with the elm pattern:

https://github.com/ccorcos/elmish/tree/narrative/src/tutorial
",ccorcos,
277,2016-02-02 08:08:36,"The build is [currently broken](https://travis-ci.org/rackt/react-redux/builds/106281154#L739-L749) because of an [issue](https://github.com/babel/babel-eslint/issues/243) with babel-eslint. This bumps the version to pick up the fix.
",ryanbrainard,2016-02-02 11:31:47
276,2016-02-01 20:08:42,"I'm asking this from a discussion in https://github.com/yahoo/react-intl/issues/196 that got me curious on this decision. 

The gist of the discussion in from the `injectIntl` HOC via @ericf: 

> I don't consider it a bug, but a design choice. Forwarding statics can be brittle and isn't required for React's component rendering protocol. I did research this and found that many of the usages where people want statics forwarding were for Flux related metadata and functions are not part of the component's own encapsulation; i.e. the component itself never accesses these statics, nor does React the framework. It seems that statics is used as a convenience in a component created with React.createClass() that's defined as a CommonJS module so that people don't have to type FooComponent. multiple times when defining their statics.

This makes sense to me. While I have used `connect`'s hoisted statics for server rendering, I wonder if it's encouraging a bad pattern. Since the result of `connect` is indeed another function, and static methods aren't normally maintained in higher order functions, should developers using `connect` be aware of this and instead define statics on the result of `connect` instead?

I personally am not looking for change by removing `hoist-non-react-statics`--simply interested in reasoning about the decision to use it.
",quicksnap,2016-02-02 11:59:54
276,2016-02-02 11:59:54,"Practical choice.

https://github.com/rackt/react-redux/pull/270#issuecomment-175312623

> Static methods are hoisted because that's where people tend to put data fetching methods. There's no workaround here, and call sites are often generic doing something like ""grab every fetchData static on components matched by router"". So it's worth it there.

We didn't do that before and people had too many issues putting stuff like `fetchData()` on their components. Hoisting just statics seems like a worthy tradeoff.
",gaearon,2016-02-02 11:59:54
276,2016-02-02 17:35:58,"_facepalm_ I should have searched. Thanks for the quick reply!
",quicksnap,2016-02-02 11:59:54
275,2016-01-28 16:47:40,"I understand component level state has be discussed quite in-depth [here](https://github.com/rackt/redux/issues/159) but I was wondering if this proposed API might be considered. It's probably a little too messy with the underlying implementation having to create unique ID's for each component and be the same ID every time (for time travel etc.) but worth the discussion I feel (and as the CONTRIBUTING.md says to discuss before wasting my time implementing).

What I'm proposing is adding another argument to the `connect` function that allows you to specify a reducer for the component's state. This state would then be accessed via a `state` prop (or another more appropriate name if that identifier is already taken).

Example:

<S_CODE_TOKEN>
##### Problems
- ID's for components need to be generated in a deterministic way (hash the global state and component index?).
- Dispatching actions that are intended for only one component would require some sort of instance of ID comparison. For example, you couldn't just dispatch a `DROPDOWN_SELECT` because all dropdowns mounted would then have the same selection.
",adriancooney,2016-07-10 17:12:24
275,2016-01-28 16:58:14,"I'd like to see a proof of concept for this.
",gaearon,2016-07-10 17:12:24
275,2016-01-28 16:58:58,"Sweet, I'll get on it.
",adriancooney,2016-07-10 17:12:24
275,2016-01-28 20:32:01,"I've put together a quick and dirty implementation if you want to play around with it:
- `react-redux`: https://github.com/adriancooney/react-redux/commit/dcca102fa615808ba9b0ba885d76942816405fce
- Example app: https://github.com/adriancooney/redux-example-component-level-state
",adriancooney,2016-07-10 17:12:24
275,2016-02-03 10:50:56,"This can certainly live in user land - [example](https://github.com/salsita/react-redux-ducks/tree/master/examples/counters/src)
",tomkis1,2016-07-10 17:12:24
275,2016-02-04 18:20:03,"Hello,
I think this project could be a good starting point : https://github.com/tomchentw/redux-component
I'd also like this feature, so I don't need to use `setState` anymore. \o/
",jgoux,2016-07-10 17:12:24
275,2016-02-10 23:43:03,"i'd also like it to be more easy to mount local state in redux store.

See also: https://github.com/threepointone/redux-react-local
",slorber,2016-07-10 17:12:24
275,2016-02-14 09:05:06,"In our applications we solved this problem in connect-like style. https://github.com/Babo-Ltd/redux-state
",galkinrost,2016-07-10 17:12:24
275,2016-02-17 08:16:38,"See also (for inspiration):
https://github.com/acdlite/recompose/blob/master/docs/API.md#withreducer
",jvanleeuwen,2016-07-10 17:12:24
275,2016-03-25 20:36:32,"We have solved this in [`redux-cursor`](https://github.com/Dashlane/redux-cursor) with cursors slicing the state and providing local actions and reducers.
",denis-sokolov,2016-07-10 17:12:24
275,2017-03-09 04:56:44,"Came up with something easy here:

<S_CODE_TOKEN>

Add the exported reducer to the store, and use the helper as such:

<S_CODE_TOKEN>

Quite nice... I'll make a module soon.",lucasconstantino,2016-07-10 17:12:24
274,2016-01-28 16:14:46,"ref: https://github.com/rackt/redux/pull/1301

<!-- Reviewable:start -->

[<img src=""https://reviewable.io/review_button.svg"" height=""40"" alt=""Review on Reviewable""/>](https://reviewable.io/reviews/rackt/react-redux/274)

<!-- Reviewable:end -->
",e-jigsaw,2016-01-28 16:16:00
274,2016-01-28 16:19:18,"@gaearon Thanks!!
",e-jigsaw,2016-01-28 16:16:00
274,2016-01-28 18:21:53,"Out in 4.1.0.
",gaearon,2016-01-28 16:16:00
274,2016-01-29 00:55:16,":+1: 
",e-jigsaw,2016-01-28 16:16:00
273,2016-01-27 21:54:32,"I've been using react-redux with a few lines of hacks to narrow down performance issues in my application: the console output looks like:

<img width=""266"" alt=""2016-01-27 at 4 50 pm"" src=""https://cloud.githubusercontent.com/assets/32314/12629578/7c845eba-c516-11e5-99d6-4c2fca5eb28d.png"">

This identifies which props in which connect() calls cause re-renders. This has been super useful, and I'd like everyone on my team to have the same ability. Would this be something contributable to react-redux itself, or is there a potential way to implement it as an add-on? It is hooking into shallowEquals and the shouldComponentUpdate method to identify culprits.
",tmcw,2016-01-27 22:24:08
273,2016-01-27 22:24:08,"I think this is best served on generic React tooling level. There are some projects like https://github.com/spredfast/react-transform-render-visualizer. There is also intent (AFAIK) to get something similar into the official React DevTools extension.
",gaearon,2016-01-27 22:24:08
273,2016-03-31 08:40:19,"@tmcw Do you have your branch somewhere on github? I am also facing problems with re-render and finding it is very hard to tell why a connected component re-renders. Currently I am hooking mergeProps(), saving the previous props and then doing shallowEquals with them. But all the props are the same so something else is going on but I have no clue what since the wrapper component does not output any debugging info.

The demo of react-transform-render-visualizer sure seems nice but in a large project with complex state I don't think it will work well. For example I have immutablejs state etc. It also requires your components to be classes but most of mine are stateless functions. In addition it requires babel. 

Some other solution to seeing why a connected component re-renders would be really nice. Maybe the wrapper component could take an option that turns logging on?
",jonaskello,2016-01-27 22:24:08
272,2016-01-26 12:45:26,"The store is set on on the context with the name `store` which is fine in most cases but since the context is global there are cases when you need it to be more specific.
I have an existent app which I want to port to Redux incrementally but it already has something called store on the context. 
The proposed solution here is to rename `store` to `redux` as per #268 
",nickdima,2016-01-26 20:35:27
272,2016-01-26 17:20:47,"this is technically an internal api change only but I believe lots of people have depended on the store name of the context property so this would be a breaking change in practice for quite a few people.

A backwards compatible way would be to add an optional prop that describes where the store lives on context.

<S_CODE_TOKEN>

this does of course require changes to connect as it needs to consider the 'as' prop but that's pretty straightforward still

This is opt in and backwards compat
",gnoff,2016-01-26 20:35:27
272,2016-01-26 20:35:27,"This would a breaking change so we're not going to take this.
Context API will eventually change to avoid string keys so it will be resolved naturally at some point.

In the meantime you can either pass `store` manually as a prop to all connected components or create a custom `<Provider>` that puts the store into `redux` context field. Then you can write a custom `connect()` that uses `connect()` from React Redux but also provides a store as a prop to the wrapped component from `redux` context field.
",gaearon,2016-01-26 20:35:27
272,2016-01-26 20:40:57,"OK, thanks.
",nickdima,2016-01-26 20:35:27
272,2016-01-26 20:43:19,"Yeah, sorry about that. It’s just not worth breaking everyone because React will fix it eventually. And people might already be using `redux` context name in their projects (e.g. for bound action creators or utilities).
",gaearon,2016-01-26 20:35:27
272,2016-01-26 20:46:41,"Yeah, totally agree. I had doubts about it myself also :)
",nickdima,2016-01-26 20:35:27
271,2016-01-26 06:57:20,"Will there be official Redux bindings for ng2?
",aayushkapoor206,2016-01-26 20:48:50
271,2016-01-26 20:48:50,"Hardly official (as I don't use ng2 personally) but you can try https://github.com/wbuchwalter/ng2-redux/.
",gaearon,2016-01-26 20:48:50
270,2016-01-26 03:24:03,"copy **all** wrapped component's methods (prototype and static except react methods) into the wrapper component.

so methods like `focus` on `@connect() class Composer { focus() { this.refs.input.focus } }` will still be available if `Composer` is `ref`ed somewhere else.

Original issue: https://github.com/rackt/react-redux/issues/267

`hoist-non-react-methods` is here: https://github.com/elado/hoist-non-react-methods
",elado,2016-01-26 20:38:20
270,2016-01-26 20:38:20,"This seems fragile and burdening to support to me, even via an external library.

I'd say at this point you're better off using `getWrappedInstance()`, or better, accept a prop like `inputRef` in your component.

<S_CODE_TOKEN>

With this pattern you can also “propagate” refs just by accepting it as a prop in parent component as well:

<S_CODE_TOKEN>

Then you can perform the focus from a grandparent or further without accessing the instances.
",gaearon,2016-01-26 20:38:20
270,2016-01-27 00:02:04,"@gaearon:
Currently, `static` methods are hoisted, why not `prototype` methods? What's the difference? Current implementation just seems incomplete.
With this functionality, `@connect` can be added or removed without caring about changing how `refs` are managed from containers.
I integrated this into my app and it works flawlessly.

A. Can you think of a scenario where it wouldn't be desired?
B. If I change the code to hoist methods optionally, e.g. `{ withRef: true, hoistMethods: /* whitelist */ ['focus', 'scrollToBottom'] }` or `{ withRef: true, hoistMethods: /* all methods */ true }` 
would this be merged?
",elado,2016-01-26 20:38:20
270,2016-01-27 00:17:24,"Also:

`composer.focus` doesn't necessarily mean `input.focus()`. It could be opening a menu. I wouldn't want to expose internal component types.

`messageList.scrollToBottom()` interacts with some `div`'s `scrollTop` and I defintely wouldn't want to repeat that code over and over in containers of a `<MessageList/>` if all I expose is the `div`.
",elado,2016-01-26 20:38:20
270,2016-01-27 00:30:56,"> Currently, static methods are hoisted, why not prototype methods? What's the difference? Current implementation just seems incomplete.

Static methods are hoisted because that's where people tend to put data fetching methods. There's no workaround here, and call sites are often generic doing something like ""grab every `fetchData` static on components matched by router"". So it's worth it there.

In case of methods on the prototype, it's fragile (can't name methods with same names as `connect()`ed class methods). This means if I later rename a method inside `connect()` I can break somebody's code. I don't want my implementation details to leak into consuming projects like this. Also, component instance interface is props. For static methods, we're still ""out of React land"" but with instances, you have props, and you should consider _them_ component API.

> With this functionality, @connect can be added or removed without caring about changing how refs are managed from containers.

This is a non-goal. If you're accessing instances directly you need to be aware that there is an intermediate instance. We don't want to pretend there isn't because that will just be more confusing and magic and will force us to deal with even worse edge cases (like the naming problems I suggested above).

> I integrated this into my app and it works flawlessly.

I don't doubt that it works. I just don't want to support it in the library in terms of docs, bugs, feature requests (“a method works but a getter doesn’t!”, “inherited methods don’t show up!”, “third party mixin has a `handleChange` method and it clashes, I can’t change the mixin!”), etc. You can write your own `connect()` that uses `connect()` from React Redux but adds this functionality.

> Can you think of a scenario where it wouldn't be desired?

I hope examples above show why I don't want to support this.

> B. If I change the code to hoist methods optionally

No, that's more configuration to support and doesn't help with the bug / feature request burden and potential name clashes.

> composer.focus doesn't necessarily mean input.focus(). It could be opening a menu. I wouldn't want to expose internal component types.

Use props when possible. What's wrong with passing `<Composer isOpen>` and doing the side effect in `componentDidUpdate`? Apart from one-off things like `focus()` and `scrollIntoView()` I think it's best to do this via props.

And you don't have to pass nodes via callback props either. You can do something like

<S_CODE_TOKEN>
",gaearon,2016-01-26 20:38:20
270,2016-01-27 01:29:58,"All your concerns about future bugs/naming conflicts are valid.

> Apart from one-off things like `focus()` and `scrollIntoView()` I think it's best to do this via props.

These are exactly the methods that I would expose. A prop `isFocused={shouldFocus}` doesn't make sense -- it will need to turn its value into false after executing `focus()` - that's what methods are for. `HTMLInputElement` has a prop for `value` and a method for `focus()`.

`isOpen` seems fine to be in a prop, although loading `componentDidUpdate` with comparing prev and new props seems ugly (yes, a matter of preference).

A prop like `provideController` like your example can be the solution. I don't care much about the boilerplate, but only about changing expected React's API, especially when exposing a component in a module.
",elado,2016-01-26 20:38:20
270,2016-01-27 01:33:55,"I think your second best bet is 

> You can write your own connect() that uses connect() from React Redux but adds this functionality.

if this is a common pattern in your codebase.

Cheers!
",gaearon,2016-01-26 20:38:20
270,2016-01-27 01:38:00,":+1: thanks.
",elado,2016-01-26 20:38:20
270,2016-07-20 12:48:39,"regarding https://github.com/reactjs/react-redux/pull/270#issuecomment-175217424 , how can I access/refer to the `<input>` element within `MyComponent` ?
",eduedix,2016-01-26 20:38:20
270,2016-07-20 14:20:00,"I changed my mind and used getWrappedInstance() instead. Thank you anyway.
",eduedix,2016-01-26 20:38:20
270,2016-09-20 06:19:47,"Dan @gaearon , thanks for your great input!

I'm using your suggestions to implement my wizard. Basically what i'm doing is when clicking the next button in Parent component (the wizard container), I need to call the submit function of Child component (the wizard page).

before I wrap my child component with connect, I was able to call wizard page's submit method by wiring up Parent ->  Child thru ref, i.e   

<S_CODE_TOKEN>

and it worked fine.

I then found out that I need to wrap my child component to a connect component , and after that, I lost control to the Child component, as the activePage is now pointing to the wrapper component, which doesn't have submit method defined (only static function hoisted, not prototype)

Yes, I can use getWrappedInstance() which I believe will work just fine, but I really like your idea of passing callbacks to child and let child set the value that Parent is interested in, so I decided to give it a go

<S_CODE_TOKEN>

and this also works fine as well. great! 

my question, is that when passing a callback to child, why can't we name the prop 'ref', i.e. 

<S_CODE_TOKEN>

won't work and will cause exception at child component, saying this.props.ownProps.ref is undefined, but I have defined it and passed down to child.. don't really understand why I got that error

does this mean that connect component will selectively filter out some props?
",bochen2014,2016-01-26 20:38:20
270,2016-09-20 08:08:27,"This is because `ref` attribute, just like `key`, has special meaning in React, and is not a prop. We might support ref forwarding in React someday: https://github.com/facebook/react/issues/4213. 
",gaearon,2016-01-26 20:38:20
270,2016-09-20 08:47:51,"Great. Thanks Dan again!
",bochen2014,2016-01-26 20:38:20
269,2016-01-25 23:08:10,"# Context

Today there was some discussions about the new redux tree view example and this SO question:
http://stackoverflow.com/questions/34981924/performance-issues-with-a-tree-structure-and-shouldcomponentupdate-in-react-re

As I pointed out the solution of Redux examples is fine enough for most usecases but does not scale it the number of nodes is very big. We agree that it's not a good idea in the first place to render a huge list or a huge tree, but it seems the author of the question is still interested in a solution. I don't know if the usecase is valid or an antipattern but I guess it's worth giving the opportunity to render a huge number of items in an efficient way
# Solution

As described in my answer if the number of connected items grows too big, then every state change triggers all connected HOC's subscriptions so it does not scale well.

If we want to make it scale better, the HOC subscriptions should only be called when necessary.

If the state slice of node with id=1 is updated, it produces overhead to actually trigger the subscription of the HOC that connects data to node with id=2, because obviously the connected component is not interested at all in this change.

Redux store has a `store.subscribe(listener)` method, and it is called inside `connect`

One can easily create a store enhancer that exposes a method like `store.subscribeNode(nodeId,listener)`, which is only triggered when that node, with the provided, id is called. There are multiple ways of triggering this listener efficiently.

The problem is that once we have built this custom optimized subscription system, there's no way to reuse `connect` to listen to it because the call to `store.subscribe` is hardcoded here:

<S_CODE_TOKEN>

A flexible solution would be to let the user control hw to subscribe to the store himself, by using connect options for example:

<S_CODE_TOKEN>

The default `doSubscribe` implementation would be: `doSubscribe: (store,props) => store.subscribe()` which keeps the current behavior unchanged.

There's one corner case I don't know yet how to solve is when the nodeId props changes over time. It would mean the HOC should then unsubscribe and then resubscribe for the new nodeId. In practice this seems farfetched to do so and I'm not sure it's really worth trying to solve this but if anyone has an idea...

I can make a PR for that, just tell me if it would be accepted or if it seems to much indirection and is not an usecase you want to support in redux.
",slorber,2016-08-14 15:13:27
269,2016-01-25 23:21:35,"Let's also consider [redux-batched-subscribe](https://github.com/tappleby/redux-batched-subscribe) of @tappleby

It exposes 2 methods:
- `store.subscribe` is batched (because it's wrapped)
- `store.subscribeImmediate` is not batched

If you use this store enhancer in your project, then all your connect HOC's become batched by default. This proposal would permit the user to connect components in both batched and immediate mode. I don't really have a real usecase for this but maybe it could permit to give some control over the priority the components should render themselves.
",slorber,2016-08-14 15:13:27
269,2016-01-26 20:50:07,"If `props` was an argument we'd have to resubscribe on every `componentWillReceiveProps` for consistency which would give bad perf.
",gaearon,2016-08-14 15:13:27
269,2016-01-27 23:07:26,"That's right but I guess it's a very specific corner case as most of us would probably never want to update the subscription without unmounting/remounting. 

There's still a solution to this problem:

<S_CODE_TOKEN>

If we use a selector to pick the data we need for the subscription, it gives the opportunity to `componentWillReceiveProps` to unsubscribe/resubscribe with the new nodeId only when it changes.

However the API becomes harder to use...
",slorber,2016-08-14 15:13:27
269,2016-01-28 00:08:45,"There are some other extension points people desire:
- https://github.com/rackt/react-redux/pull/194
- https://github.com/rackt/react-redux/pull/208

I wonder if there is a way to address these together without complicating the API. This might mean extracting the “core” of `connect` into an independent low-level function but I'm not sure about the API.
",gaearon,2016-08-14 15:13:27
269,2016-01-28 00:09:40,"Basically, what if we separated the component in `connect` from the caching and invalidation logic.
",gaearon,2016-08-14 15:13:27
269,2016-01-29 17:29:03,"@gaearon a usecase for https://github.com/rackt/react-redux/pull/208 would be to build a React.Perf middleware so that we can take measures for every dispatched action.

If subscription returned a promise resolved on setState callback, then the redux Middleware could be able to know when rendering has ended and measure wasted time that is relative to a given action.
See also this issue that can make it more complicated to build: https://github.com/facebook/react/issues/3611

There's already a not-really advanced middleware that does not take account that renderings can happen in an async way: https://github.com/AvraamMavridis/redux-perf-middleware

---

Also for my initial custom connect proposal I think another usecase is when we want to bind dom inputs to redux state. It might work well with events on a small app but I guess once the app becomes big, on a mobile device typing in an input triggering hundreds of HOC may be a problem?

---

@gaearon yes that would be great to provide full flexibility so that we can compose code in the way we want to use it without rewritting/forking the lib.

Also it can be nice to have an experimental API so that you can eventually change your mind later.

I  don't have an API in mind I'll have to digg deeper in the implementation details of connect :)
",slorber,2016-08-14 15:13:27
269,2016-02-11 18:26:27,"@gaearon @slorber I have a PR that attempts to address this here: #285. Would be interested in your thoughts. Not ready to merge, but want to know if it is directionally interesting.
",mhodgson,2016-08-14 15:13:27
269,2016-02-13 12:56:37,"@gaearon also it seems there is a community need to run multiple redux stores (https://github.com/reactjs/redux/issues/1385)

It could be nice if we could also pass to the provider a map of stores and if the connect method was flexible enough to permit to select the appropriate store from context
",slorber,2016-08-14 15:13:27
269,2016-05-02 09:50:56,"@gaearon @slorber @mhodgson 

Was playing around with one attempt at splitting the core connect features into two different HOC: connector and cacher.

https://github.com/jtadmor/react-redux/commit/b829ece0688f71b0b5acb2ed73233f075487d8d6

The basic idea is that cacher should not know at all about the store or where state comes from. It receives all of the old connect() arguments, but doesn't actually hook up to a store. Instead, it requires the following props:

<S_CODE_TOKEN>

Instead of a handleChange method, it will now attempt to calculate mapStateFromProps only when storeState changes or if mapStateFromProps depends on props and ownProps changes. Ditto for mapDispatchToProps.

The connector accepts a wide variety of options:

<S_CODE_TOKEN>

These are designed to give consumers ability to customize the behavior, while falling back to sane default behavior, e.g. `store` falls back to `context.store`, `dispatchFromStore` falls back to `(store) => store.dispatch` and so forth.

You could call `connector()(Component)` and it would work just fine.

Regarding updating the subscription on `componentWillReceiveProps`, I've tried to solve that by allowing the options to specify either `subscribeFromStore` or `subscribeFromStoreAndProps`, and optionally allow a `resubscribeIf` that would look like `(props) => props.node_id`. This forces consumers to be explicit about whether resubscriptions should ever happen while the component is mounted but also provide fine-grained control.

I based this on suggestions [here](https://github.com/reactjs/react-redux/pull/348#issuecomment-214131076).

The major thing I'm not sure on is how to avoid `setState` on Connector when Cacher is not going to end up re-rendering. Right now the `handleChange` default behavior is to do a `setState` whenever the store broadcasts. Although Connector does allow for other optimizations, I'd need to figure out how to keep that one.

What I'm not sure on is the best API for each. Right now they are separate functions, but still very coupled in that Connector passes down storeState, ownProps, dispatch, and Cacher consumes those. One possibly way to make them more re-usable is to allow, e.g. Cacher options argument to let the consumer specify something like `getOwnPropsFromProps = (props) => {}` and `getDispatchFromProps`, `getStoreStateFromProps` likewise.

Also, we now have two wrapper components instead of one to provide the same basic functionality as before. (This could be mitigated by keeping connect as is, but export the two more modular HOC as well, although that leaves future development a pain).

Let me know if this seems like a fruitful avenue.
",jtadmor,2016-08-14 15:13:27
269,2016-05-02 10:09:47,"At first glance I like the extensibility and decomposition of the problem but I'm not sure it would be nice for performances to have 2 wrappers instead of one, when we already focus on optimizing the single one we currently have. 

I don't know what @gaearon exactly had in mind when saying

> Basically, what if we separated the component in connect from the caching and invalidation logic.

But I guess the idea is that the caching logic would be an utility function instead of a new wrapper, to avoid degrading performances

See also work being done here: https://github.com/reactjs/react-redux/issues/368
",slorber,2016-08-14 15:13:27
269,2016-05-02 10:25:35,"Yes, after having quickly made these changes I'm realizing that without any coupling, you just subscribe without any filter, you already make way too many `setState` calls before you even get to the Cacher component. The consumer can perhaps optimize in other ways by provider a better `subscribe`, (such that the callback should _only_ fire when we are actually interested in updating), but we lose this tool in the default case, which is a no-no. 

Perhaps I'll try to organize something like this:

<S_CODE_TOKEN>

But we still have the major problem, I think, that the `handleChange` method is deeply tied to the implementation details both of the ""caching"" and the ""get new state from store"" parts of this component.

So while I could easily see just shuffling a few things around and using a custom method instead of `store.connect`, something like returning a Promise instead of just calling `setState` isn't going to be nearly as easy to let the consumer control.

In any event, it does seem prudent to wait until #368 is wrapped up, because that will change the nature of the work that needs to be done here,
",jtadmor,2016-08-14 15:13:27
269,2016-06-15 18:49:23,"If you look at #405, I've re-implemented connect in such a way that splits caching and connection. It's still a single component, but all the cache maintenance is handled by [reselect](https://github.com/reactjs/reselect). 
",jimbolla,2016-08-14 15:13:27
269,2016-08-14 15:13:27,"This is now solved via #416 and what's currently published on npm as `react-redux@next`
",timdorr,2016-08-14 15:13:27
268,2016-01-25 15:19:39,"I see that the store is set on on the context with the name `store` which is fine in most cases but since the context is global there are case when you need it to be more specific.
I have an existent app which I want to port to Redux incrementally but it already has something called `store` on the context.
The solutions I see here are either choose a more specific name eg. `reduxStore` or have it passed as a prop to `Provider`.
I could make a pull request if any of these two are acceptable.
",nickdima,2016-01-26 20:51:19
268,2016-01-25 22:45:44,"Taking an example from another Rackt project: https://github.com/rackt/react-router/blob/449fefa4d55025ea459d6b9e2e3aa7169e00b0f5/examples/master-detail/app.js#L66

react-router => context.router
react-redux => context.redux 
",danmartinez101,2016-01-26 20:51:19
268,2016-01-26 09:17:46,"So, what are you suggesting?
",nickdima,2016-01-26 20:51:19
268,2016-01-26 11:41:29,"I'm suggesting the context property for react-redux be ""redux"" in the same way that react-router's is ""router"". 
",danmartinez101,2016-01-26 20:51:19
268,2016-01-26 11:49:14,"Yeah, that's definitely the way to go. Should we CC someone that has merge privileges before making a pull request?
",nickdima,2016-01-26 20:51:19
268,2016-01-26 12:07:41,"I'd say just go ahead and make a PR for it and reference this issue in the description. When they have time, they will review and comment / decide; no need to cc imo.
",danmartinez101,2016-01-26 20:51:19
268,2016-01-26 17:25:04,"> I'm suggesting the context property for react-redux be ""redux"" in the same way that react-router's is ""router"".

I thought the same thing at first but react-router is still claiming a implementation non-specific namespace on context. they technically have the same problem we have with `store`. i've commented on the PR regarding supporting as `as` prop which optionally places the store in another namespace on context. I don't think this change is worth breaking everyone who has depended on the store outside of Provider and connect personally
",gnoff,2016-01-26 20:51:19
268,2016-01-26 20:51:18,"Please see my response in https://github.com/rackt/react-redux/pull/272#issuecomment-175215719.
",gaearon,2016-01-26 20:51:19
267,2016-01-25 07:31:55,"A simple component may have public methods that are accessible if it's a ref somewhere. I usually use if for `focus`, `scrollToBottom` etc.

<S_CODE_TOKEN>

In case component is `@connect`ed, the methods aren't accessible anymore.

I can use `withRef: true` and `this.refs.articleSearch.getWrappedInstance().focus()` but that wouldn't be clean, as I explicitly specify the `getWrappedInstance()`. If I remove the `@connect` code will break.

Would it make sense to copy some selective methods from wrapped component into the `Connect` component?

~~Something like (https://github.com/rackt/react-redux/blob/master/src%2Fcomponents%2Fconnect.js) :~~

<S_CODE_TOKEN>

~~Usage:~~

<S_CODE_TOKEN>

I'll make a PR if it seems fine.

**Update**

I see all static methods are copied with `hoistStatics`, but prototype methods are left out. Solution can be something similar that also copies all prototype methods and binds them to the ref.
",elado,2016-01-26 20:50:47
267,2016-01-26 20:50:47,"As described in https://github.com/rackt/react-redux/pull/270#issuecomment-175217424, it's best to pass callback refs as props for that rather than expose instance methods.
",gaearon,2016-01-26 20:50:47
266,2016-01-25 02:54:15,"I have a button that dispatches an action that toggles a boolean in the store. As a result, an input is rendered in the component. I want to focus on that input after the button is clicked, but I can't do it immediately because the `this.refs` is not updated until the new props are received.

If this is handled in `componentDidUpdate`, all subsequent action will keep triggering the `focus`, so that's not a good solution.

<S_CODE_TOKEN>

Example: http://jsbin.com/nerexi/2/edit?js,console,output

Another potential solution is a combination of focusing from the `componentDidMount` and also from the button callback: http://jsbin.com/viwive/3/edit?js,console,output

Not a big fan of this as it seems like the container component's job to focus.

However, using `setState` and its callback actually allows to access the `ref`, as it fires after render happens: http://jsbin.com/yiputo/1/edit?js,console,output (cleanest solution, I believe, despite the use of `state`)

This question relates to any UI forced interaction that needs to happen after an action but can't be in `render`. Another example would be scrolling to an element to bottom after an action is dispatched.
",elado,2016-01-26 20:48:14
266,2016-01-25 07:54:01,"Looks like `ref` with a callback is a nicer solution, as it leaves handling the focus to the parent.

<S_CODE_TOKEN>
",elado,2016-01-26 20:48:14
266,2016-01-26 20:48:13,"I'd do something like

<S_CODE_TOKEN>

I agree callback refs are nice: https://github.com/rackt/react-redux/pull/270#issuecomment-175217424. However I'd rather use them for DOM nodes than for instances. Best not to expose instances or use their methods.
",gaearon,2016-01-26 20:48:14
265,2016-01-23 01:53:08,"I've read the [docs](https://github.com/rackt/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options) about the `ownProps` argument, and I think I may be misusing it.

Could you use this `ownProps` to `connect()` dynamically created components?

I have a giant table. Number of columns/rows depend on what I get back from the server. The state is an array of objects, each representing a row, and each row is component I'm trying to `connect()`. The app updates as intended when I use `state` and does not when I use `ownProp`.  

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I'm guessing it has to do something with ownProps being a copy and not a reference to state?

`state.table.rows[0] === ownProps.row // false`
",gojohnnygo,2016-01-23 04:18:54
265,2016-01-23 04:18:54,"I don't understand the question, it's too specific to your problem. Unless you can post a JSBin reproducing the problem I don't think I can help.

State is just Redux state. ownProps are just props you pass to the component from the parent component. I'm not sure why row is in both places and how it's passed down. If it doesn't update it means that the corresponding prop wasn't updated in the parent component which can mean a bunch of different thing depending on your code.

I'm closing as this is unlikely to be an issue in the library but please feel free to share a JSBin reproducing this. 
",gaearon,2016-01-23 04:18:54
265,2016-01-24 03:15:37,"Hey @gaearon,

Yeah, I guess my question is very specific. So let me generalize it a bit. :)

From your egghead.io Redux tutorial, how would you `connect()` each Todo so that only the changed Todo re-renders (instead of the entire list)?

Here's my [JSBin](https://jsbin.com/lucego/edit?js,console,output) of the Todo example. I've: 
1. set an initial state, 
2. commented out where TodoList is `connect()`-ed, 
3. and `connect()`-ed the Todo component.

In `mapStateToTodoProps`, I don't know which Todo to reference in the Todos array, so I thought `ownProps` was how to do it. If you click on a Todo, the state correctly changes (see the console) but the Todo component does not re-render.

I hope this makes better sense. Thanks!
",gojohnnygo,2016-01-23 04:18:54
265,2016-01-24 14:01:44,"I think you got a bit confused. I'm not sure why you're doing it this way.

Todo used to be a purely presentational component. You changed it to be a container generated by connect(). Why? Now it accepts _some_ todo props from its parent but _also_ connects to the store. I don't understand why you needed a connect() there. Moreover _connect() is only needed if you want to subscribe component to the store updates_. It doesn't make sense to use connect() and only use ownProps to pass a prop down. It's received from parent anyway. You're subscribing to the store by using connect() but rather than use store's state, just pass down one of ownProps which Todo receives from a parent component. Effectively it does nothing at all: since you're not using store state inside mapStateToProps() you can as well completely remove it and the connect() call, and behavior won't change. So I don't understand what you were trying to do there.

The redrawing problem happens because you removed connect() from the generated VisibleTodoList and wrote it by hand. You are using getState() inside but you forgot to subscribe to the store to force updates when store state changes. This is why VisibleTodoList renders once with the initial state and isn't aware that you are toggling todos—it's not subscribed! To fix this you can add a store subscribe() call in componentDidMount() and call forceUpdate() when store state changes. However this is only meant as a learning exercise. It's a _lot_ less efficient than using connect() which has many performance optimizations. So I encourage you to use connect() instead of subscribing to the store by hand.

If some of this is unclear I suggest you to take another look at all React videos in the course. I only show how to write container components by hand as part of the explanation build up. So you understand what connect() does under the hood. I don't actually advise you to write subscription code by hand in any real apps. Use connect(). I also don't recommend to use connect() when component receives store data by props—it is useless in this case. 

Hope it helps. 
",gaearon,2016-01-23 04:18:54
265,2016-01-24 21:37:47,"Hey Dan, 

Yep I'm on board with everything you're saying. :)

> I think you got a bit confused. I'm not sure why you're doing it this way.

Sorry, I guess I'm not being clear again. Let's say the TodoList is large, and you're running into performance issues because the whole list re-renders (instead of an individual Todo).

To solve for this, my [JSBin](https://jsbin.com/lucego/edit?js,console,output) example attempts to move `connect()` from the top level (TodoList) down, so each Todo is `connect()`-ed. But if you say...

> I also don't recommend to use connect() when component receives store data by props—it is useless in this case.

It looks like I can't `connect()` individual Todos bc they get data by props. I incorrectly thought passing `ownProps` would be a way to subscribe to the store.

So I would have to subscribe each Todo by hand? I was trying to use `connect()`, but it's looking like this is not the right use case for it.

Thanks! 
",gojohnnygo,2016-01-23 04:18:54
265,2016-01-24 21:47:53,"If you want to do that you can change VisibleTodoList to only select todo IDs from the store in its mapStateToProps. Then you can change TodoList to accept todoIds array rather than todos array as a prop. Then you can change TodoList to pass id as a prop to Todo component rather than {...todo}. Finally, then you can change mapStateToProps for Todo to return something like state.todos.find(todo => todo.id === ownProps.id).

However this won't be very efficient either for the reason that todos are kept in an array so every lookup is expensive. It's better to store them in an object keyed by todo ID and have a separate array of IDs in the state. Then you can use something like state.todosById[ownProps.id] in mapStateToProps of Todo.

Hope that helps! I would still start by adding shouldComponentUpdate() implementation to Todo component rather than connect() every individual Todo. You can use react-addons-shallow-compare for this. There is no guarantee that connecting every individual Todo is going to significantly improve your performance—implementing shouldComponentUpdate() is more likely to help. 
",gaearon,2016-01-23 04:18:54
265,2016-01-24 21:56:34,"I got it. Thanks so much! :100: 
",gojohnnygo,2016-01-23 04:18:54
264,2016-01-22 01:22:20,"Is there any way to enforce types for the action creators in `mapDispatchToProps`, whether in react-redux core or a contrib? Would it be possible to annotate propTypes to enforce function signatures, or add an interface? I'm working on a large application that benefitted a lot from Flow annotations on action creators, and no longer can because of the dispatch/props disconnect.
",tmcw,2016-09-07 22:51:57
264,2016-01-25 02:03:54,"I don't know enough about Flow to answer this. Your best bet is to investigate this and report the results :-)
",gaearon,2016-09-07 22:51:57
264,2016-02-11 23:06:02,"Done a bit of research and seeing two options:
- If react-redux is to be type-annotated, it's blocked by [default support in type destructuring](https://github.com/facebook/flow/issues/183) because of [connectL43](https://github.com/rackt/react-redux/blob/9c50ae13b84a9fe1702190a94bf900e4ffa32a26/src/components/connect.js#L43)
- For an external declaration to work, I think the upstream blocker is [Object type spread support](https://github.com/facebook/flow/issues/1326).

I'm looking into Object spread support to see if it's something I could contribute, but, y'know, OCaml has a bit of a learning curve :)
",tmcw,2016-09-07 22:51:57
264,2016-05-24 08:36:01,"perhaps connected: #389
",nmn,2016-09-07 22:51:57
264,2016-05-24 10:04:30,"If you haven't seen this is worth a look.
http://makeitopen.com/tutorials/building-the-f8-app/testing/

Also there are some flow definitions here:
https://github.com/flowtype/flow-typed
",kristian-puccio,2016-09-07 22:51:57
264,2016-08-15 06:51:55,"@timdorr could you leave a comment why the task was closed? If it's a duplicate / resolved could you link to the related ticket or if it's a ""wont fix"" could you describe why?
",vicapow,2016-09-07 22:51:57
264,2016-09-07 22:50:07,"Yea this was a bit odd. We definitely want Flow types for this. I just don't know enough about Flow at this point to say what next steps should be. There is already a PR to flowtyped, right?
",gaearon,2016-09-07 22:51:57
264,2016-09-07 22:50:54,"@timdorr For future reference, please comment with a reason for closing so we know what the intention was :wink:
",gaearon,2016-09-07 22:51:57
264,2016-09-07 22:51:56,"Sorry, I didn't put a link to the appropriate PR. Efforts are ongoing over there: #389 (and reactjs/redux#1887 is related too)
",timdorr,2016-09-07 22:51:57
264,2016-09-08 07:59:27,"Thanks!
",gaearon,2016-09-07 22:51:57
263,2016-01-21 20:23:29,"On boot, the app I'm building gets a stream of data from a server. This stream can have hundreds of messages and entities and each message is handled separately.

It takes **a tremendous amount of time** to dispatch actions after UI has rendered, because every state change re-renders the `@connect`ed component.

I wrote a short example that shows dispatching 1000 actions before render (5-15ms) and 500 after render (**~2.5s**). So this is clearly not a redux issue.

https://jsbin.com/ruziwa/edit?js,console,output

Obviously component doesn't need to re-render every single dispatched action, but re-rendering should be throttled (say, every 50ms). Is there an established approach for that or does it need to be integrated in `@connect`?
",elado,2016-01-25 02:04:55
263,2016-01-21 20:43:58,"Well, adding

<S_CODE_TOKEN>

really boosts performance.

Updated https://jsbin.com/ruziwa/11/edit?js,console,output

Probably messing with React's methods is not the right approach though.
",elado,2016-01-25 02:04:55
263,2016-01-21 21:11:18,"Try this: Collect those those messages into an array and flush it with `store.dispatch` in a single tick with every 50ms (or whatever is required). You must use redux-batched-updates to avoid rendering on every dispatch on the tick.

https://github.com/acdlite/redux-batched-updates
",epeli,2016-01-25 02:04:55
263,2016-01-21 21:17:41,"> Probably messing with React's methods is not the right approach though.

Yeah that will break sooner or later...

pseudo code

<S_CODE_TOKEN>
",epeli,2016-01-25 02:04:55
263,2016-01-22 02:30:34,"Thanks! I integrated https://github.com/tappleby/redux-batched-subscribe (`redux-batched-updates` uses deprecated api)

I used `_.debounce`, not `unstable_batchedUpdates` (it didn't seem to work at all)

This is the amazing result: https://jsbin.com/wurower/7/edit?js,console,output

Would it make sense to integrate to react-redux? Or to write a note about it in the docs?
",elado,2016-01-25 02:04:55
263,2016-01-22 06:27:26,"I'm glad it solved your issue but you should note that  debouncing and update batching are completely different things. 

With debouncing you end up just completely ignoring most of the messages. That can be ok but if your store state requires to see every message, for example you need sum up some numbers from them, that will not work as expected.

React update batching and the `setInterval` trick I presented will dispatch every message to the store but will only do it batches to avoid excessive rendering. 
",epeli,2016-01-25 02:04:55
263,2016-01-22 07:13:29,"@epeli not sure I understand the issue, can you please explain with code?

So far it seems that the issue of multiple unnecessary renders is gone, due to debouncing it, and store is filled correctly after every single dispatch action (it doesn't wait for the debouce time to execute a bunch of actions together).
",elado,2016-01-25 02:04:55
263,2016-01-25 02:04:55,"I'm closing as this doesn't appear to be an issue with this repo—rather an issue with a particular approach. Please feel free to continue discussing!
",gaearon,2016-01-25 02:04:55
262,2016-01-21 07:59:14,"At the beginning i have 2 files with actions: dashboard.js and filter.js. On filters i have all my filter for my data from DB. And its works. But i decide to move all filter in dashboard.js where i have the main logic of my app. But after moved  i have next error:
_Failed propType: Required prop `filters` was not specified in `DashboardPage`. Check the render method of `Connect(DashboardPage)`._

dashboard.js 

<S_CODE_TOKEN>

DashboardPage.js

<S_CODE_TOKEN>
",britishd,2016-01-21 16:32:44
262,2016-01-21 16:32:44,"Hi,

This is place isn't the right place to ask usage questions.
It is a bug and feature request tracker for React Redux.

It's hard to say from a glance what's wrong—a JSBin reproducing the issue would help.
It doesn't appear like an issue in React Redux so I'm closing but please feel free to ask this on StackOverflow.
",gaearon,2016-01-21 16:32:44
261,2016-01-21 00:53:57,"The following issue was closed that is referenced in the readme: 
https://github.com/facebook/react-native/issues/2985

Also are their any warnings or key notes for developing React Native apps and using Redux?
",mdramos,2016-01-21 12:11:58
261,2016-01-21 09:36:30,"#236 
",chentsulin,2016-01-21 12:11:58
261,2016-01-21 12:12:13,"👍
",mdramos,2016-01-21 12:11:58
260,2016-01-20 22:06:48,"I'm using react-redux in a react native app. i have an icon toggle which animates a ripple when you toggle it. (from here: https://github.com/xinthink/react-native-material-kit#toggles, you can see it in the gif)

basically my state looks something like this:

<S_CODE_TOKEN>

and the component is something like this:

<S_CODE_TOKEN>

then i have a reducer to act on CHANGE_STATE actions and return a new state with true or false accordingly from the payload.

the thing is it lags horribly, i think because its re-rendering while the animation is still running. (i checked, when i do nothing in the reducer and just return the current state it runs smoothly)

how would you suggest solving this? 
",talarari,2016-01-28 00:20:51
260,2016-01-21 16:39:09,"Are you sure it's related to Redux? Can you change the code to use React component local state and verify that the problem goes away?
",gaearon,2016-01-28 00:20:51
260,2016-01-21 19:36:21,"I'm seeing something similar in a React Native project I'm working on but I have a feeling it is because of some console.log() message marshalling caused by redux-logger. Will investigate more tomorrow.
",epeli,2016-01-28 00:20:51
260,2016-01-25 02:06:07,"`console.log()` will definitely slow things down, even on the web. Be careful with it :-)
",gaearon,2016-01-28 00:20:51
260,2016-01-28 00:20:51,"I'm closing because there is not enough information to make this actionable for me. I don't know how exactly to reproduce the problem, in what environment it can be reproduced, and how exactly React Redux library fits into this picture. If you can give more details and confirm _this_ library is indeed the bottleneck I'm happy to reconsider.
",gaearon,2016-01-28 00:20:51
259,2016-01-20 16:08:07,"I'm working on a large app where we're slowly integrating Redux piecemeal, essentially converting small components into ""embedded Redux apps"" that are the top-level of the Redux app, but not the top-level of the React app. This has worked for the most part, but we ran into this issue:

<S_CODE_TOKEN>

It works fine, but any time the parent component re-renders, a `<Provider> does not support changing`store`on the fly` error pops up in the console.

This is fixed by adding a `shouldComponentUpdate`, and returning `false` if `this.props` and `nextProps` are equal. But that prevents us from taking advantage of the stateless component pipeline.

I know it's not the idealized use of Redux to embed it within a React hierarchy instead of at the top level, so I'm not sure if this issue is considered worth addressing. But maybe it is.
",Zacqary,2016-01-21 20:17:16
259,2016-01-21 16:41:32,"> I know it's not the idealized use of Redux to embed it within a React hierarchy instead of at the top level, so I'm not sure if this issue is considered worth addressing. But maybe it is.

It's totally fine, we should support this.

> It works fine, but any time the parent component re-renders, a <Provider> does not support changingstoreon the fly error pops up in the console.

Please see [the relevant check](https://github.com/rackt/react-redux/blob/3a96902e824fe2ebb2ae13df9c1fa7b52439d4ed/src/components/Provider.js#L34). It's comparing identities. This means that the `store` prop is different on every render. This is problematic. (You're effectively recreating store and destroying its state—why?)

This is also a bit weird:

<S_CODE_TOKEN>

Shouldn't that be more like

<S_CODE_TOKEN>

?
",gaearon,2016-01-21 20:17:16
259,2016-01-21 19:32:06,"> This is also a bit weird:

Aha, that was the problem. Since the initial state of the store was the only data I needed to pass to `ReduxRoot`, it was basically:

<S_CODE_TOKEN>

So that meant `props`, even though it always had the same contents, was actually a new object being passed to `<Provider>`.

I fixed the problem by using your correction, except with destructuring

<S_CODE_TOKEN>

for an ever-so-satisfying elimination of six characters.

I guess one way to avoid this error is if `<Provider>` could check to see if the `store` it's being passed is actually identical to its previous `store`, but that might add some unnecessary overhead.
",Zacqary,2016-01-21 20:17:16
259,2016-01-21 20:17:16,"Glad you found the problem! Yeah, we only rely on object identity there, something more complicated seems unwarranted. 
",gaearon,2016-01-21 20:17:16
259,2016-08-22 09:22:28,"Sorry for being a bit off topic but I'm looking for a code example that demonstrates switching between different stores in react-native. This thread seems to touch the subject.
Specifically, I want to switch between users (log in/out) where each user has its own store.
Could you point me to any articles/tutorials available online.
Thanks a lot!
",beebase,2016-01-21 20:17:16
259,2016-12-09 14:49:37,"Sorry too for being off topic but I'm having the same issue as @beebase. I want to change between stores in a login/logout logic in react-native, and I'm not sure how can that be done. Have you found a solution @beebase ? Thanks!",jpamarohorta,2016-01-21 20:17:16
259,2016-12-09 14:56:03,"You can't change the store passed to `<Provider>`, but you could render a new `<Provider>`. Give it a `key` and change it when you change the store.",jimbolla,2016-01-21 20:17:16
259,2016-12-10 05:08:43,"interesting...

never encountered a case where I need to create 2 stores and switch between them..
can't we put the switch inside store, and read different part from store state?  nevertheless, I believe you have your own ground to have 2 stores",bochen2014,2016-01-21 20:17:16
259,2017-01-10 11:09:40,"Throwing in an answer for those who searched for the Error message in the title: Don't call `createStore` in the provider attribute!

Don't do this:

 <S_CODE_TOKEN>

The correct way is this:

 <S_CODE_TOKEN>",totymedli,2016-01-21 20:17:16
258,2016-01-20 00:33:06,"Now that 0.18 is out, this works without the old version.
",zackify,2016-03-05 00:54:36
258,2016-01-21 16:37:18,"I've heard that without npm 3 there is a risk of having duplicate React and weird bugs.
Is this the case?
",gaearon,2016-03-05 00:54:36
258,2016-01-21 16:37:31,"See also #236 
",gaearon,2016-03-05 00:54:36
258,2016-01-21 17:25:46,"I am on npm 3 so I can't confirm.
On Thu, Jan 21, 2016 at 11:37 Dan Abramov notifications@github.com wrote:

> See also #236 https://github.com/rackt/react-redux/issues/236
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/rackt/react-redux/pull/258#issuecomment-173627443.
",zackify,2016-03-05 00:54:36
257,2016-01-18 15:10:39,"Just reading through the readme and picked up on this. [npm](https://www.npmjs.com/) is an acronym for Node Package Manager, so the phrase `npm package manager` essentially evaluates to `node package manager package manager`.

No sure that anyone else will care, but it was bugging me. It's like when people say 'ATM machine', or 'as ASAP as possible'.
",axdg,2016-01-28 00:19:17
257,2016-01-28 00:19:17,"I agree but some people don't know what npm is.
I'm happy to accept a rewording like ""a package manager like npm"" though!
",gaearon,2016-01-28 00:19:17
256,2016-01-17 12:52:56,"and point to it from jsnext:main.

relatively inelegant build script as i have to basically replicate the babel-cli/dir script, but i can’t see a better solution.

fixes #243 
",flying-sheep,2016-03-06 15:54:24
256,2016-01-17 13:13:54,"eh, why the fuck does it not work on travis?

> sh: 1: scripts/build-module.js: not found

it’s right there! pls help!
",flying-sheep,2016-03-06 15:54:24
256,2016-01-18 17:44:56,"Any way we can avoid duplicating Babel options? I'm pretty sure we'll forget to update them at some point unless they're all in `.babelrc`.
",gaearon,2016-03-06 15:54:24
256,2016-01-19 15:56:05,"OK this works and is relatively elegant. it is all in .babelrc right now!

---

my only gripe: sadly either the tests fail or the module syntax gets modified in the bundle unless i duplicate everything inside of .babelrc.

<S_CODE_TOKEN>

⇒ works!

<S_CODE_TOKEN>

⇒ SyntaxError: Decorators are not supported yet in 6.x pending proposal update.

<S_CODE_TOKEN>

⇒ tests fail

<S_CODE_TOKEN>

⇒ module syntax gets compiled
",flying-sheep,2016-03-06 15:54:24
256,2016-01-19 16:30:20,"i filed [this babel bug](https://phabricator.babeljs.io/T7005) for my troubles.

but i think this one is ripe for merging once you’re OK with dropping IE8 support. but it actually hasn’t been supported anymore for a week, so why wait :wink: 
",flying-sheep,2016-03-06 15:54:24
256,2016-01-30 19:19:20,"A few comments:
- `mod/` is not an ideal name; a number of packages use `modules/` for their actual source (e.g. all the @rackt/routing packages). I think `es6/` or `es2015/` would be better.
- You can't just switch to ES2015 modules with Babel 6 unless you add https://www.npmjs.com/package/babel-plugin-add-module-exports; otherwise you break CJS users.
- It's really odd to me that the ES2015 build uses the external-helpers plugin but the CJS build doesn't; IMO the ES2015 build should be identical to the CJS build, save only for the lack of module transpliation.
",taion,2016-03-06 15:54:24
256,2016-01-30 19:37:08,"> mod/ is not an ideal name; a number of packages use modules/ for their actual source (e.g. all the @rackt/routing packages). I think es6/ or es2015/ would be better.

:+1: on `es6`

> You can't just switch to ES2015 modules with Babel 6 unless you add https://www.npmjs.com/package/babel-plugin-add-module-exports; otherwise you break CJS users.

This is not entirely accurate because we don't have a default export. The only reason we switched from ES6 modules to CommonJS a few releases ago is to work around Babel outputting `.default` rather than `['default']` which breaks in IE8. However we can fix this problem by putting https://github.com/sorrycc/es3ify-loader in our Webpack config.

> It's really odd to me that the ES2015 build uses the external-helpers plugin but the CJS build doesn't; IMO the ES2015 build should be identical to the CJS build, save only for the lack of module transpliation.

I think I agree with this, curious to hear the reasons.
",gaearon,2016-03-06 15:54:24
256,2016-01-30 19:42:37,"Ah – I got confused; looks like there wouldn't be any point in doing e.g. `rackt-redux/lib/<whatever>` imports, given that in practice people are going to want both `Provider` and `connect` anyway.

But if that's the case, what does adding a proper ES2015 module build add? If you always want everything in the library, the tree-shaking is going to be a no-op.

I set this up for React Router and for history because in those cases tree-shaking would actually accomplish something, since often users wouldn't want every module in those packages.
",taion,2016-03-06 15:54:24
256,2016-01-30 19:45:10,"> But if that's the case, what does adding a proper ES2015 module build add? If you always want everything in the library, the tree-shaking is going to be a no-op.

I don't know enough about Rollup to answer this. I thought it doesn't work with CommonJS builds at all, does it?
",gaearon,2016-03-06 15:54:24
256,2016-01-30 19:48:08,"That doesn't sound right to me. React doesn't offer a ES2015 module build, does it?
",taion,2016-03-06 15:54:24
256,2016-01-30 19:49:34,"Hm, good point. So then dropping `jsnext:main` should help here?
",gaearon,2016-03-06 15:54:24
256,2016-01-30 19:50:46,"no, babel-created code is pretty hard to statically analyze. much `if (package.default != null) ...` and `__esmodule` stuff going on.
",flying-sheep,2016-03-06 15:54:24
256,2016-01-30 19:51:10,"and i prefer `modules` because “es6” is confusing: that directory won’t contain ES6 code, just the module syntax, right?
",flying-sheep,2016-03-06 15:54:24
256,2016-01-30 19:52:50,"Having `jsnext:main` pointing at untranspiled code will actively break Rollup users (and anybody else looking at that field).

I'll have to defer to @flying-sheep as to whether there are any benefits to having an ES2015 module build aside from the possibility of tree-shaking. I think tree-shaking matters a lot for allowing e.g.

<S_CODE_TOKEN>

over the much uglier

<S_CODE_TOKEN>

for minimizing bundle size, but that doesn't seem relevant here if everybody needs both `<Provider>` and `connect()`.

---

Separately, I'd say `mod/` might make sense in a vacuum, but unfortunately `modules/` already is used for non-transpiled source on a number of projects – `es6` at least conveys that you're using ES6 modules rather than CJS ones.
",taion,2016-03-06 15:54:24
256,2016-01-30 20:03:27,"> no, babel-created code is pretty hard to statically analyze. 

Why would it need to be analyzed? We can't benefit from tree shaking in this project.
",gaearon,2016-03-06 15:54:24
256,2016-01-30 20:18:00,"> unfortunately `modules/` already is used for non-transpiled source on a number of projects

ah, ok. others simply ship `src/`.

> Why would it need to be analyzed? We can't benefit from tree shaking in this project.

irrelevant. the important part is that the code babel creates is too complicated for rollup-plugin-commonjs to understand. (rollup-plugin-commonjs basically converts commonjs `require()` calls to ES2015 module syntax)

so if we want to be static-analysis-friendly, we need to ship simple commonjs (`const foo = require('foo')`) or ES2015 module syntax.

i prefer the latter, because the former leads to guesswork if `const foo = require('foo')` means `import foo from 'foo'` or `import * as foo from 'foo'`.

---

as is, rollup users simply can’t use any npm thing that uses babel-compiled module syntax.
",flying-sheep,2016-03-06 15:54:24
256,2016-01-30 20:26:36,"Sure, but there are plenty of packages that do use babel-compiled module syntax, and nevertheless they are used by rollup users.

What do you get from static analysis other than tree-shaking?
",taion,2016-03-06 15:54:24
256,2016-01-30 20:56:43,"> Sure, but there are plenty of packages that do use babel-compiled module syntax, and nevertheless they are used by rollup users.

well, it works if you’re lucky. else you’ll end up with [this](https://gist.github.com/flying-sheep/94477c48c69a65d410d2) ([discussion](https://github.com/rollup/rollup-plugin-commonjs/issues/29))

---

btw i’m really discouraged right now. rollup seems really promising, but this discussion dragged on far too long already to have any hope in rollup becoming practical.

i really don’t want to have endless discussion with every package maintainer about this, but that will be inevitable i guess.
",flying-sheep,2016-03-06 15:54:24
256,2016-01-30 20:59:52,"Well, no, for some packages having an ES2015 module build is obviously beneficial for both Rollup and webpack 2 users. I've personally added ES2015 module builds to both React Router and history.

That said, there is some non-zero cost to the module maintainer to maintain an additional build. From my perspective, if there are meaningful benefits available through tree-shaking, as there are for my other packages like React Router, history, and React-Bootstrap, then I'm happy to add the ES2015 module build.

For something where there's really only one export, like e.g. react-router-relay, or possibly react-redux? I think there needs to be a concrete benefit to adding another build target.

If nothing else I hope this discussion will demonstrate good general guidelines for other projects in considering whether to add an ES2015 module build.
",taion,2016-03-06 15:54:24
256,2016-01-30 21:08:38,"> If nothing else I hope this discussion will demonstrate good general guidelines for other projects in considering whether to add an ES2015 module build.

you’re right, that occurred to me as well. we’re treading unexplored ground right here, so it’s probably not bad to have some discussion now and a “best practices” thing in the end.

---

> I think there needs to be a concrete benefit to adding another build target.

IMHO there is. it’s the difference between a default export and grab-bag-of-stuff exports. `import * as name` vs `import name`.

rollup handles those as strict as the real deal in the future. you won’t be able to do `import React, { Component } from 'react'` if there’s not both individual and default exports. babel however allows that.

currently i have to go to `node_modules` or even github and look into the ES6 source code to see which export style is intended by the authors.
",flying-sheep,2016-03-06 15:54:24
256,2016-01-30 21:43:54,"Commonjs requires some extra code in bundle. Even without tree shaking result will be smaller.
",TrySound,2016-03-06 15:54:24
256,2016-02-01 03:43:42,"@flying-sheep 

I don't think that's correct. Looking at the implementation of `_interopRequireDefault`, you wouldn't be able to do e.g.

<S_CODE_TOKEN>

At this point in time, I also don't think the extra bundle size purely from using CJS modules rather than ES6 ones (when tree shaking is not part of the picture) is really all that meaningful.
",taion,2016-03-06 15:54:24
256,2016-02-01 12:39:03,"forget rollup. forget bundling. static analysis of dependencies is important for tooling.

think dependency injection. think asynchronous loading. or simply believe me that all the other languages with dedicated import statements have a reason for that

`_interopRequireDefault` is a function call, not static syntax. therefore we need ES2105 module syntax in order to advance the JS ecosystem.
",flying-sheep,2016-03-06 15:54:24
256,2016-02-01 13:37:30,"We do, yes, but there's no accounting for timing. Eventually Node is going to have actual support for ES2015 modules, and webpack 2 will have support for the same – at which point it'd be possible to distribute just an ES2015 module build, and not have both that and a CJS build.
",taion,2016-03-06 15:54:24
256,2016-02-01 14:16:09,"don’t forget people who’ll distribute node 0.12 stuff for backwards compatibility
",flying-sheep,2016-03-06 15:54:24
256,2016-02-01 14:17:45,"so back to topic: when renaming the module directory to es2015 or es6, is everyone confident that this is a good way to go?

if not, please speak up and voice your concerns, and ideally propose alternatives.
",flying-sheep,2016-03-06 15:54:24
256,2016-02-01 15:06:25,"If you have a hard dependency on a specific Node version for your React code, you're doing something very odd/wrong.

I just feel like, in the absence of a compelling bundle size benefit from tree shaking, that it's not really worthwhile to maintain two transpiled builds – ideally at some point in the future it will be possible to just swap out the CJS module build for an ES2015 module build.

It's not ""advancing the JS ecosystem"" to just set up some awkward shims that most people can't take advantage of – Rollup is not an option in general for packaging a full-fledged application, and webpack 2 isn't ready yet.
",taion,2016-03-06 15:54:24
256,2016-02-01 19:32:59,"> Rollup is not an option in general for packaging a full-fledged application

because not enough npm modules support jsnext:main, right?
",flying-sheep,2016-03-06 15:54:24
256,2016-02-01 19:44:09,"No, because real applications tend to need things like CSS and other assets.
",taion,2016-03-06 15:54:24
256,2016-02-01 20:16:42,"how is this relevant?
",flying-sheep,2016-03-06 15:54:24
256,2016-02-01 20:19:45,"What would one use webpack, Browserify, or Rollup for, if not to generate client-side bundles?
",taion,2016-03-06 15:54:24
256,2016-02-01 20:21:43,"sure, but either you use [JSS](https://github.com/jsstyles/jss) and so on or bundle assets independently
",flying-sheep,2016-03-06 15:54:24
256,2016-02-01 20:28:28,"Either way, most users are currently simply not going to be able to take advantage of an ES2015 module build. Maybe when webpack 2 leaves beta, assuming it doesn't hit the same teething issues as Babel 6, and/or when Node cuts a stable release that supports this module syntax.

I'd happily encourage and even push people toward using proper ES2015 modules over the transpiled CJS stuff once it's something that has the potential for broad adoption, but we're not at that point yet, and ""it feels cleaner"" is not IMO enough of a benefit to make the build pipeline more complicated on all the libraries.

We should save it for the ones where tree shaking gives a concrete bundle size reduction.
",taion,2016-03-06 15:54:24
256,2016-02-02 15:27:12,"I'd also prefer we use https://github.com/gajus/babel-preset-es2015-webpack (perhaps a loose version?) over the rollup preset, since the webpack one doesn't introduce the extra babel external transform, and more of our users will likely be using webpack than rollup.
",taion,2016-03-06 15:54:24
256,2016-02-02 15:39:05,"This is recommended by @sokra too: https://gist.github.com/sokra/27b24881210b56bbaff7#babel-and-webpack

However, we aren't using presets on the project, so it's just a matter of [removing this line](https://github.com/rackt/react-redux/blob/master/.babelrc#L21).
",timdorr,2016-03-06 15:54:24
256,2016-02-02 15:49:34,"the rollup preset’s transform externalizes the babel-helpers, that’s all, but OK.

we also need [this babel issue](https://phabricator.babeljs.io/T7005) fixed if we want to parameterize the inclusion of the module transform
",flying-sheep,2016-03-06 15:54:24
256,2016-02-05 21:59:51,"I don’t really understand what the deal with Babel external helpers is, so I can’t move forward here.
Please help me understand the issue.
For now, I released React Redux that removes broken `jsnext:main` because it didn’t help anybody.
",gaearon,2016-03-06 15:54:24
256,2016-02-06 09:42:49,"> For now, I released React Redux that removes broken jsnext:main because it didn’t help anybody.

thank you!

> I don’t really understand what the deal with Babel external helpers is, so I can’t move forward here.
> 
> Please help me understand the issue.

[here](https://babeljs.algolia.com/docs/advanced/external-helpers/) and [here](https://github.com/rollup/rollup-plugin-babel/blob/master/src/index.js#L26-L28) is the explanation:

the plugin makes the individual compiled files rely on a “babelHelpers” variable. rollup-plugin-babel detects if this is the case (but also handles other ways to include babel helpers, [warning](https://github.com/rollup/rollup-plugin-babel/blob/master/src/index.js#L90) if necessary).

it’s useful to not include them more than once.
",flying-sheep,2016-03-06 15:54:24
256,2016-02-11 20:23:36,"Can we pull in the tooling from the main Redux library, then figure out across-the-board what to do with external helpers?

I don't think it'd be good to have an ES2015 module build that only works with Rollup and not with webpack 2.
",taion,2016-03-06 15:54:24
256,2016-03-01 04:26:22,"FYI, babel 6.6.0 has fixed the exports default problem in IE8.
https://github.com/babel/babel/blob/master/CHANGELOG.md#exportsdefault-fix
",kidwm,2016-03-06 15:54:24
256,2016-03-06 15:54:24,"I’m closing as this is rather outdated. We can revisit later if there is enough desire to do so.
",gaearon,2016-03-06 15:54:24
255,2016-01-15 20:21:30,"Is this on purpose? I know I can bring it back myself but wouldn't it be better if it's attached all the time?
",elado,2016-01-15 20:53:46
255,2016-01-15 20:53:46,"I don't think it would be better.
Usually you'd use `mapDispatchToProps` to hide Redux from the component you're wrapping.
Always exposing `dispatch` means there's no way to abstract Redux away from presentational components.

Indeed, you can bring it back yourself :-). It's just that default `mapDispatchToProps` is `dispatch => ({ dispatch })`, if you provide a custom one, it's entirely up to you what to put there.
",gaearon,2016-01-15 20:53:46
255,2016-11-09 19:59:59,"@gaearon , I'm not sure I quite follow, how do we get dispatch passed into our component that also uses the mapDispatchToProps argument?

Thanks!
",tnrich,2016-01-15 20:53:46
255,2016-11-09 20:05:25,"Hmm, I think I found a way:

<S_CODE_TOKEN>

Is this the recommended way to both bind action creators to dispatch as well as get the dispatch function in your component?

Thanks!
",tnrich,2016-01-15 20:53:46
255,2016-11-09 20:29:34,"@tnrich : yep, that looks correct. My personal opinion is that components generally shouldn't actually reference `dispatch` directly (per my article [Why Use Action Creators?](http://blog.isquaredsoftware.com/2016/10/idiomatic-redux-why-use-action-creators/) ), but if you want both `dispatch` and bound action creators, that's how you'd do it.
",markerikson,2016-01-15 20:53:46
255,2017-01-04 07:10:49,"Following tnrich's answer, if I don't use spread operator, and pass dispatch as an argument like this, it still works.
`
function mapDispatchToProps(dispatch) {
  return {
    dispatch,
    someActions:bindActionCreators(someActions, dispatch)
  }
}
`

Is using a spread operator mandatory here like this?
`function mapDispatchToProps(dispatch) { return { dispatch, someActions: bindActionCreators({ ...someActions }, dispatch) } }`",junedchhipa,2016-01-15 20:53:46
254,2016-01-15 18:54:57,"I am completely lost on the react-redux container (ie connector) concept as it is not doing what I anticipated. My issue is straight forward, and to me reasonable, yet I cannot find a well written example of how to accomplish it.

Let us say we have a react component that connects to a store that has product context, and we will call this component `ProductContext`. 

Furthermore, let's say we want to reuse `ProductContext` liberally throughout the app so as to avoid the boilerplate code of dispatching actions on every other component that may need products. 

Illustratively this is what I mean:

  **from DiscountuedProducts:**

<S_CODE_TOKEN>

  **from SeasonalProducts:**

<S_CODE_TOKEN>

From the examples I see at react-redux, it appears to me that their containers lump both seasonal and discontinued products in the container itself. How is that reusable? 

**from the ProductContextComponent:**

<S_CODE_TOKEN>

Complicating matters, while trying to keep a cool head about this most frustrating matter, ""nebulous tersity"" seems to be the only responses I receive.

So here is my `ProductContext`:

<S_CODE_TOKEN>

Then my thinking is if I do this:

  **from DiscountuedProducts:**

<S_CODE_TOKEN>

`DiscontinuedProducts` should have knowledge of those products and it can simply filter for what is discontinued.

Am I completely wrong on this? Is this not reasonable to desire?

If anyone knows of a **exhaustive** example on the Net demonstrating how this can be achieved, I would much appreciate it being pointed out to me. I have spent over a week on this issue and am about ready to give up on react-redux.
",JoeGrasso,2016-01-15 20:52:18
254,2016-01-15 20:51:33,"Unfortunately I really don't understand what you're trying to do. Can you describe the same problem but remove all mentions of context (please don't use context! It's mostly meant for library authors, not for apps) and describe it from the point of view of **the problem you're solving, not the implementation you tried.** That is, describe the components you want to see on the screen, and how you want to compose them, but don't describe the implementation you tried.
",gaearon,2016-01-15 20:52:18
254,2016-01-15 20:52:18,"Also please ask this on StackOverflow. (Feel free to post the link here.) This is not the right place for very localized questions.
",gaearon,2016-01-15 20:52:18
253,2016-01-15 09:57:32,"I am following the [Get Started Videos for Redux](https://egghead.io/lessons/javascript-redux-generating-containers-with-connect-from-react-redux-visibletodolist) and I have this error `Uncaught TypeError: Cannot read property 'displayName' of undefined` with this config:

<S_CODE_TOKEN>

Here is my code:

<S_CODE_TOKEN>

I will appreciate any help on this. I don't find any FAQ or troubleshooting section on this.
",dagatsoin,2016-01-15 10:41:32
253,2016-01-15 10:41:29,"Figure it out. I forgot to declare `TodoList` **BEFORE** `const VisibleTodoList = connect(
      mapStateToProps,
      mapDispatchToProps
    )(TodoList);`
",dagatsoin,2016-01-15 10:41:32
253,2016-08-03 06:47:08,"I did the exact same thing, and was about to give after over an hour of fighting with it and having no idea what was causing the issue...then I came across your post. Thank you, this was really helpful. 9 times out of 10 it's something small :)
",andfaulkner,2016-01-15 10:41:32
253,2016-09-28 04:28:56,"Whereever you are whoever you are. I will find you. And thank you!
",boltcoder,2016-01-15 10:41:32
253,2016-10-29 10:57:40,"Quite an old issue, and a frustrating one when it bites.

Any hope of a better error message in this situation?
",GreenAsJade,2016-01-15 10:41:32
253,2016-10-29 17:26:43,"This is really an issue with ES6 syntax and behavior.  By declaring a variable using `const` or `let`, it does not exist until the line it is declared on (technically known as the ""temporal dead zone"").  So, trying to use a variable before that declaration line is going to cause things to break.
",markerikson,2016-01-15 10:41:32
253,2016-10-30 22:23:02,"@markerikson I'm not sure what that means.   Are you saying ""because of the temporal dead zone, we can't do better with an error message for this issue""?
",GreenAsJade,2016-01-15 10:41:32
253,2016-10-30 22:33:31,"The point is that there's nothing specific to Redux about this issue.  It's effectively as if you were manually calling `connect(mapState)(undefined)`.  

About the only thing we could do would be add some kind of assertion that `WrappedComponent` is an actual function, and throw an error if it isn't. 
",markerikson,2016-01-15 10:41:32
253,2016-10-30 23:02:33,"If it's like calling `connect(mapState)(undefined)` then it'd be great for the message to say so.

`uncaught TypeError: Cannot read property 'displayName' of undefined`

doesn't really capture that.   It doesn't even tell you which file it's coming from.
",GreenAsJade,2016-01-15 10:41:32
253,2016-10-30 23:47:39,"If you'd like to file a PR that adds some validation for the `WrappedComponent` argument in a development build, we could definitely take a look at adding that.  Would mostly need to make sure that the PR is made against the `next` branch.
",markerikson,2016-01-15 10:41:32
253,2016-10-31 02:40:07,"Yeah - I had a look at doing something, but it appears way non-trivial, due to the lack of obvious context at the point that this error message is issued.

Any clues about how you'd like it done?
",GreenAsJade,2016-01-15 10:41:32
253,2016-10-31 03:17:38,"Actually, I have good news for you.  Looking at the `next` branch, it seems that @jimbolla has already implemented such a check, here: [connectAdvanced.js#L67-L71](https://github.com/reactjs/react-redux/blob/6cb82a52ee6751f36ef1c2759ca083161ad3f2ff/src/components/connectAdvanced.js#L67-L71)
",markerikson,2016-01-15 10:41:32
252,2016-01-14 17:53:17,"I am trying to avoid contextTypes as well as redundant code. I have different types of products, ie current products, discontinued products, seasonal products, etc. As I understand containers, I cannot put them all in one container as they are in different sections (pages) of the website. What I would like to do is extrapolate out the data fetching from the container and have it as a higher order component that the one below and others can call upon for the data w/o resorting to redundant code. 

Any ideas? Now respectfully, you brainiacs have a tendency to be terse and unintentionally nebulous in your explanation, so please assume I am as dumb as a bunch of rocks.

Thanks.

Below is my current container:

<S_CODE_TOKEN>
",JoeGrasso,2016-01-15 20:45:30
252,2016-01-14 18:30:24,"You could just make a component called ProductWrapper or something like that and connect it to the redux store.  Its purpose would be gather your product data and or filter based on props and it would just render its children with the added products prop. See [cloneElement](https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement)

<S_CODE_TOKEN>

This is a contrived example, but it would be a simple solution and your fetching and filtering for that data could be in one component and used for all your product pages.
",tkh44,2016-01-15 20:45:30
252,2016-01-15 20:45:30,"Don't forget `connect()` is just a function.
You don't have to use the decorator syntax :-).

Normally I'd create a single `<Products>` presentational component.
Then I'd use `connect()` in different files to create different containers for it:

<S_CODE_TOKEN>

This is oversimplified but you should get the idea. You can have many containers all wrapping the same presentational component, but supplying different ways of selecting the data. Similarly you can create your own `connectProducts()` that calls `connect()` but abstracts away data fetching and similarities in state selection logic.
",gaearon,2016-01-15 20:45:30
251,2016-01-14 14:51:42,"hi, i have impure components with a checkbox to expand their contents, as well as an action to expand them all (as if clicked on each checkbox separately)

do i have to track all their states manually or is there a good way to subscribe to that action?
",flying-sheep,2016-01-15 20:38:59
251,2016-01-15 10:44:41,"Could you please provide an example so it's easier to reason about your question?
",timjacobi,2016-01-15 20:38:59
251,2016-01-15 20:38:59,"Please see

https://github.com/rackt/redux/issues/1057
https://github.com/rackt/redux/issues/347
https://github.com/rackt/redux/issues/580
https://github.com/rackt/redux/issues/1091
https://github.com/rackt/redux/pull/622
",gaearon,2016-01-15 20:38:59
251,2016-01-15 20:57:38,"OK, so how would you do map the following to the paradigm?

<S_CODE_TOKEN>
",flying-sheep,2016-01-15 20:38:59
251,2016-01-15 21:10:12,"How is this related to Redux? You seem to be using React component state, not Redux.
",gaearon,2016-01-15 20:38:59
251,2016-01-15 21:15:05,"i use it elsewhere and all other actions apart from expandAll use and work with redux.

alternatively i’d kinda have to store the expansion state of all `Expandable`s in the store state, but that’d get ugly due to `App.props.bar` being able to be replaced (so i’d need to sync that prop with the expansion state)
",flying-sheep,2016-01-15 20:38:59
251,2016-01-15 21:17:51,"I'd say leave it to React. The React approach would be to keep the toggled state of all components inside their shared parent (`App`) I guess and have `Expandable` receive `expanded` and `toggle` as props. Then `expandAll` would change the state of `App` to toggle all individual state entries. No need for Redux here IMO.
",gaearon,2016-01-15 20:38:59
251,2016-01-15 21:22:45,"hmm, makes sense. would be simpler to just subscribe each `Expandable` to a global action, though.

thanks!
",flying-sheep,2016-01-15 20:38:59
251,2016-01-15 21:36:00,"""Subscribing to action"" breaks ideas of Redux because it makes your UI dependant on global event bus rather than current state. You can totally do that if you want, but it's not Redux. :wink:

You can give IDs to expandables and keep something like `{ expandableState: { 0: false, 1: false, 2: true } }` in your Redux state. Then you'd be able to fire different actions and read state from Redux store.
",gaearon,2016-01-15 20:38:59
250,2016-01-14 13:59:02,"How can i dispatch a redux action from code what is outside of react class? 
",teosz,2016-01-15 20:36:19
250,2016-01-15 10:52:47,"`store.dispatch` is exposed since you create the store yourself using redux.

If your setup looks like this

<S_CODE_TOKEN>

then you can call `store.dispatch` anywhere you have `store` available.
",timjacobi,2016-01-15 20:36:19
250,2016-01-15 20:36:19,"This.
Also you can also grab `dispatch` as a prop from your connected components and pass it anywhere you like.
",gaearon,2016-01-15 20:36:19
249,2016-01-14 03:14:35,"First off, thanks so much for Redux and the amazing tooling and introductory content around it. It's been awesome to learn how all of the parts fit together.

I've been running into an issue while building out my first foray into a React/dux app dealing with action creators. I'm having to use `mapDispatch` a ton for just passing the same action creators into the `props` of each of my top-level components (without React Router I end up having around 5 top-level components so far, which I've called ""containers"" following the examples I've seen). 

And the `mapDispatch` that I'm writing is often just a super plain object like `{ loadUser, loadTeam, loadCollection }` that maps keys to keys. It's getting really boilerplate-y to have to keep doing this all the time, when really I'd just like to have all my action creators already bound to my single store.

It would be amazing to be able to pass them into the `<Provider>`:

<S_CODE_TOKEN>

And be able to use that inside components as:

<S_CODE_TOKEN>

From looking through the issues, I found that I'm not the first to suggest this, which means others are grappling with this problem too. Here are a few that mention discuss similar things:
- @mmerickel suggested it in https://github.com/rackt/react-redux/issues/1, except with the extra addition of using `mapDispatch` as well, which I think we can eliminate.
- @maxguzenski suggested it in https://github.com/rackt/react-redux/issues/23.
- @gyzerok brought up the same pain point in https://github.com/rackt/redux/issues/231.
- And a few of the [example snippets in the Readme](https://github.com/rackt/react-redux/blob/master/docs/api.md#inject-todos-and-all-action-creators-addtodo-completetodo-) actually mention a similar use case (of binding all action creators easily), but they do it at `connect`-time for each component, instead of at the `Provider` level, which would mean not having to worry about it any more.

One time when it was brought up, it was discarded because of not wanting to pollute `props` with all of the actions, since the ""clobber likelihood"" would be high. I totally get the concern about not wanting to pollute `props` with tons of actions, but we can avoid that by nesting them in `props.actions` instead.

Another time, @gaearon mentioned the (important) needs of code splitting. I think that's definitely a use case to support, but surely we could have a load-later approach that works very similarly to the current `mapDispatch` that would facilitate loading extra modules, while also making it easy for the main use case?

Curious to hear everyone's thoughts.

From my initial use of both React and Redux, this would save me boilerplate code, and make it possible for people to write nicer boilerplate-reducing functionality on top of the base libraries.
",ianstormtaylor,2016-01-14 20:57:41
249,2016-01-14 03:16:21,"I don't understand what is boilerplatey about specifying a single-line function several times. Can you give specific examples?
",gaearon,2016-01-14 20:57:41
249,2016-01-14 06:50:42,"Absolutely! In my project so far, I have 5 container components, all of which need to ""connected"". And I haven't fleshed out the entire thing yet, so that number will grow for sure. For each one I have something along the lines of:

<S_CODE_TOKEN>

But just 3 actions for a container isn't a lot; I expect some of them to need 10 or more. And each time I add or change an action, I have to make sure to update it in all of these places, or things break in ways that are sometimes hard to discern. 

For example, I forgot to add `loadTeam` to `mapDispatchToProps` since it was at the bottom of the file, and then proceeded to be pretty confused since the reference still existed, it just wasn't to a ""bound"" action creator, so the error was non-obvious. Of course I could rewrite my import to make that not possible:

<S_CODE_TOKEN>

If I actually gained from the configuration I might understand why it needed to be verbose, but for my own developer experience, the ideal for me would be to not have to worry about these kinds of things, and just have any function I exported from `* as actions` be bound to the store automatically. That way, even though I understand how it's all wired up, I'd never have to think about the mappings again. 

Instead, I'd get a really simple workflow of: write an action creator function, and then go use it in my container components. Ideally as easily as just two things to think about:

<S_CODE_TOKEN>

If I was able to write this in myself from the top-level, I'd be more than glad. But it seems like the way the system is setup, there's no way to pass other information into the `<Provider>` instance, so there's no way I can do it without creating a singleton, which I want to avoid. (I may be missing a good trick here though—I guess I could attach bound actions to the `store.dispatch` function if I really wanted to, but that seems real hacky.) I've even looked into writing a different `<Provider>`, but there's so much logic in it that would need to be duplicated and kept up to date that it would be a huge pain to do.

Let me know if that all makes sense, or if I'm doing something incorrectly. Happy to discuss more. Thanks!
",ianstormtaylor,2016-01-14 20:57:41
249,2016-01-14 13:41:33,"You can provide you own connect, and use reselect to memoize it.

<S_CODE_TOKEN>

With this you can provide many personalized connects as you want:
- connectStores('store1', 'store2')
- connectCurrentUser()
",maxguzenski,2016-01-14 20:57:41
249,2016-01-14 20:57:40,"Please take a close look at all examples in the docs. What you want is either

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

There's no need to explicitly enumerate them.

By the way you can totally write your own Provider. Not sure what logic duplicate you are concerned about because there is almost no logic there—it just puts store in context and that's it. 
",gaearon,2016-01-14 20:57:41
249,2016-01-20 21:09:47,"Thanks for the response again. I actually did look at all of the examples before asking.

Both solutions solve the problem partially, but still require that the boilerplate in every file, even though I know I want every ""connected"" component to have access to all of the bound action creators, just like they have access to the store. Which means not only is it impossible for me remove the boilerplate completely (like with `store` passing), but it means that it's impossible to pave over `react-redux` simply for this case from another library. It has to be done in the end files.

I could create a separate `<Provider>`, which is pretty lightweight, but it seems like I'd also need implement a separate `connect()` as well, which has tons of extra logic that I'd need to carefully pass through, or reimplement, so maintaining it would be very non-trivial.

It seems like adding all of the bound action creators onto `store.dispatch` as properties is the only way to do it from the top-level without having to repeat in each file, so I'll go with that, even if it feels a bit hackish. Thanks
",ianstormtaylor,2016-01-14 20:57:41
248,2016-01-14 01:59:39,"below is th main codes
the title was not changed when i inputing in the textbox;
and i found that the state was not i want, what is the problem here?
console info

<S_CODE_TOKEN>

actions/index.js

<S_CODE_TOKEN>

reducers/index.js

<S_CODE_TOKEN>

stores/index.js

<S_CODE_TOKEN>

containers/app.jsx

<S_CODE_TOKEN>

index.jsx

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",inickel,2016-01-15 20:35:18
248,2016-01-15 20:35:18,"Please don't duplicate issues across different projects, it's a pain to manage.
I left a reply in https://github.com/rackt/redux/issues/1232.
",gaearon,2016-01-15 20:35:18
247,2016-01-12 04:20:14,"My root component have a property and I want to pass it down to any descendants that care about it. From what I've seen, please tell me if I'm wrong, the right way of doing it is through context. This way no intermediate component should know about it and keep passing it down.

The problem is my container (smart component, or whatever) doesn't have access to context to send that property to my presentational component as a prop (or does it?).

If I'm right again, is there any reason to not exist such map?
",gfpacheco,2016-01-15 20:34:08
247,2016-01-15 11:18:49,"`context` is to be used carefully as it is effectively a global variable. The philosophy of `redux` is that all your application state lives in the store. Using `redux` with `React` the store is actually made available to all components through `context` by using the `<Provider />` component which is part of `react-redux`.
You could incorporate the property you are referring to into the store and then use `mapStateToProps` to make the property available to your components.
",timjacobi,2016-01-15 20:34:08
247,2016-01-15 13:40:29,"Why at all you need to separate mapStateToProps, mapDispatchToProps, etc. ?
Why not just have a single connect() argument mapToProps( { state, dispatch, context, ... }) ?
The background of this question is that one may want to access the state in mapDispatchToProps for some reason... e.g. decide which action to dispatch based on the current state, etc.
",xorcus,2016-01-15 20:34:08
247,2016-01-15 20:34:08,"I don't think we want to rely on context in our public API. It's still subject to change. You should create an intermediate component that takes care of reading from context and rendering the child component.

We don't suggest you to use context for changing data because React doesn't support this scenario well at the time (https://github.com/facebook/react/issues/2517).

> Why at all you need to separate mapStateToProps, mapDispatchToProps, etc. ?
> Why not just have a single connect() argument mapToProps( { state, dispatch, context, ... }) ?

Check out #1 for a big discussion on this. ;-)
Basically it's a perf nightmare because you'd have to rebind action creators every time the state changes. 

This means a ton of unnecessary and expensive allocations, and changing function identities that kill `shouldComponentUpdate()` optimizations down the tree.

> The background of this question is that one may want to access the state in mapDispatchToProps for some reason... e.g. decide which action to dispatch based on the current state, etc.

You can already use `mergeProps()` (third argument to `connect()`) to do something with the results of `mapStateToProps()` and `mapDispatchToProps()`. If you really want to, you can put that logic there. See also https://github.com/rackt/react-redux/issues/237.
",gaearon,2016-01-15 20:34:08
246,2016-01-11 03:03:42,"Hi all:

I don't understand what's going on, and would love some tips!  I've bound a mouse click event to a function, which does _nothing_--it's a no-op.  Yet, when I click the button to trigger the handler, somewhere down the stack `ReactErrorUtils` does calls `dispatchEvent` (see below ref), which taps into redux, via dispatching the mouse event.  Redux then complains ""Cannot read property 'type' of undefined"", which is reasonable, because _I never personally dispatched the mouse event_.

To be more specific, I have a connected component, `UserController` and a dumb component to go with it.  The `logout` method (a no-op), is passed through, and _is not meddled with at all_ anywhere inbetween.  On click of the button, logout is entered into as expected, then post-return of said handler, the erroring call stack occurs.

About to get on a flight, but will follow up soon.  Let me know what else I can provide!

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",cdaringe,2016-01-11 03:26:06
246,2016-01-11 03:06:38,"my app is here: https://github.com/MRN-Code/coinstac/tree/feature/tidy-process-service-roles/app/render
the component is here: https://github.com/MRN-Code/coinstac/blob/feature/tidy-process-service-roles/app/render/components/user-account-controller.js#L17

unfortunately the backend server for supporting the services isn't readily accessible, hence you'd have to hack it a bit to even get logged in (in order to logout to observe the issue!). 
",cdaringe,2016-01-11 03:26:06
246,2016-01-11 03:25:12,"In a nutshell, I don't expect the MouseEvent to be dispatched like a redux action, but its getting tangled into the redux action flow!  Bummer!
",cdaringe,2016-01-11 03:26:06
246,2016-01-11 03:26:06,"NM.  I see the issue.  How embarrasing :)
",cdaringe,2016-01-11 03:26:06
246,2016-01-15 20:40:31,"What was the issue?
",gaearon,2016-01-11 03:26:06
246,2016-01-15 21:19:18,"The action creator was bound (to dispatch) already.  Everything was behaving as expressed in the file.  I simply didn't expect the above because of different implementation strategies between a coworker and myself.

I prefer `dispatch(actionCreator())`.  He preferred `bindActionCreators(...)` then `actionCreator()`.  Inconsistent conventions used between us was the root of the issue--I didn't see that it had already been bound.
",cdaringe,2016-01-11 03:26:06
246,2016-01-15 21:47:55,"Ah, fair enough!
",gaearon,2016-01-11 03:26:06
245,2016-01-09 23:29:06,"I am a Redux beginner and I stumbled over the ""Don't do this!"" because I thought that injecting dispatch + every field in the global state should generally not be done - never.
After doing some research my understanding is that this is perfectly ok for applications with only one container component connected to Redux.
So my addition should clearify this.
",schwolf,2016-01-28 00:17:14
245,2016-01-11 21:57:47,"Well, technically having just one component in a big app is still going to be a performance problem so we don't recommend that.
",gaearon,2016-01-28 00:17:14
245,2016-01-28 00:17:14,"As said above we no longer recommend having just one connected component so I believe the warning still holds.
",gaearon,2016-01-28 00:17:14
244,2016-01-08 16:59:56,"For the `mapStateToProps` parameters, it would be nice to be able to pass a list of properties to map:

<S_CODE_TOKEN>

Instead of having to write:

<S_CODE_TOKEN>
",julien-f,2016-01-15 20:29:41
244,2016-01-08 17:03:35,"Curried pick function is cool for this:

<S_CODE_TOKEN>

R is Ramda in this example
",epeli,2016-01-15 20:29:41
244,2016-01-15 20:29:40,"We don't want to add syntax sugar like this. It dilutes the library API, optimizing for a somewhat common case, but making it much less obvious that you can do any kind of custom processing inside that function. 
",gaearon,2016-01-15 20:29:41
243,2016-01-08 11:36:01,"what that means is “syntax the platform (browser/node) can read except for the ES2015 import/export syntax”

funnily my test project doesn’t work with specifically react-redux:
- <code>rollup([babel](https://github.com/rollup/rollup-plugin-babel)(), [commonjs](https://github.com/rollup/rollup-plugin-commonjs)(), [npm](https://github.com/rollup/rollup-plugin-npm)({'jsnext:main': true}))</code> → rollup’s acon can’t parse the object spread syntax [here](https://github.com/rackt/react-redux/blob/master/src/components/connect.js#L12)
- `'jsnext:main': false` → https://github.com/rollup/rollup-plugin-commonjs/issues/29

cc @Rich-Harris @TrySound @Victorystick
",flying-sheep,2016-10-05 00:53:08
243,2016-01-12 15:28:59,"lol, currently it’s exactly the opposite: ES2015 with some ES2016 features _except_ for ES2015 module syntax :smile: 
",flying-sheep,2016-10-05 00:53:08
243,2016-01-15 20:28:28,"Please feel free to make a PR to fix this.
",gaearon,2016-10-05 00:53:08
243,2016-01-15 21:10:28,"sure. first i need to know: are you comfortable switching to ES2015 module syntax and relying on babel to convert it to `require` calls?

in any case, the normal NPM bundle would be created as it currently is: babel with your current plugins and presets.

switching module syntax would mean for the redistributable bundle: current stuff minus module-transformer

not switching would mean: current stuff, after that use [this](https://github.com/rollup/rollup-plugin-commonjs/blob/master/src/index.js#L77) to convert require syntax to ES2015 syntax (would probably need quite a bit of code to make it work outside of rollup.
",flying-sheep,2016-10-05 00:53:08
243,2016-01-15 21:11:50,"> sure. first i need to know: are you comfortable switching to ES2015 module syntax and relying on babel to convert it to require calls?

We just had a regression that forced us to go back to CommonJS: https://github.com/rackt/react-redux/pull/233. I'm happy to revert this in React Redux 5 where we'll drop IE8 compat though.
",gaearon,2016-10-05 00:53:08
243,2016-01-15 21:20:45,"hmm, was [es3ify](https://www.npmjs.com/package/es3ify) no option?
",flying-sheep,2016-10-05 00:53:08
243,2016-01-15 21:47:32,"Seems inconvenient to add Browserify transforms to Webpack build.
And we don't want to support IE8 forever anyway. React is dropping it in next version, and so do we.
",gaearon,2016-10-05 00:53:08
243,2016-01-16 08:35:25,"[it’s also available for webpack](https://github.com/sorrycc/es3ify-loader) but yeah, i can wait :smile: 
",flying-sheep,2016-10-05 00:53:08
243,2016-01-16 13:39:15,"hmm, just thinking: your build system is basically `npm run` scripts right?

but using the babel CLI means i can’t programmatically do:

<S_CODE_TOKEN>
",flying-sheep,2016-10-05 00:53:08
243,2016-04-11 20:27:25,"Would you accept a PR in the way redux has a rollup-able es6 module?

https://github.com/reactjs/redux/blob/master/package.json#L25
",thisconnect,2016-10-05 00:53:08
243,2016-04-12 21:30:16,"Yes. 
",gaearon,2016-10-05 00:53:08
243,2016-04-16 08:46:23,"Building ./es the redux way was straightforward and did build. I use npm link to test my local react-redux es build in a rollup test. When trying to rollup this error is thrown

<S_CODE_TOKEN>

My understanding is that `import { Component, PropTypes, Children } from 'react'` does not work in this case. React does not provide es modules.

The following changes would fix that, but I do not really feel confy changing src for this. :/

<S_CODE_TOKEN>

At this point I almost want to give up rolling up dependencies and only rollup my own code. As the journey would countinue with react-router.

Interestingly react-router already distributes es modules and uses `import React from 'react'` instead `import {something} from 'react'`, almost everywhere. I only found https://github.com/reactjs/react-router/blob/master/modules/PropTypes.js#L1 where it destructs directly from 'react'

https://github.com/reactjs/react-router/pull/2530
",thisconnect,2016-10-05 00:53:08
243,2016-04-16 12:02:56,"Even if it worked, we _don’t_ want to end up with the whole React in React Redux bundle. It’s not supposed to be embedded in the output. Webpack lets use set “externals” to express that; I presume Rollup has a similar mechanism? cc @Rich-Harris
",gaearon,2016-10-05 00:53:08
243,2016-04-16 13:30:24,"Yep, just add `external: [ 'react' ]` to your Rollup config
",Rich-Harris,2016-10-05 00:53:08
243,2016-04-17 04:42:00,"Using babel directly (as it is done in redux) wont include react and keeps import React from 'react'
",thisconnect,2016-10-05 00:53:08
243,2016-10-05 00:53:08,"This should be fixed on `next`, I believe. Give 5.0.0-beta.2 a whirl. There is both a jsnext:main and module entry in the package.json now.
",timdorr,2016-10-05 00:53:08
242,2016-01-08 09:23:14,"In [quick start](https://github.com/rackt/react-redux/blob/master/docs/quick-start.md#quick-start)

> It is advisable that only top-level components of your app (such as route handlers, for example) are aware of Redux. Components below them should be presentational and receive all data via props.

1: If I have a common component(like a selector), It need some data from store. If I follow this advice, will lead to this: everywhere I want to ues this component need to get the data from store and pass to the component with props.

2: If the component's position is deeply, this advice make the code terrible.

I think sometimes this advice is not the best practice, it dislead me when I first started to learn redux.
",yutingzhao1991,2016-02-02 22:05:02
242,2016-01-15 20:27:34,"I agree and we're slowly changing it: https://github.com/rackt/redux/pull/1186
Feel free to help out fleshing out those new docs!

My current stance on this is reflected in the last ten videos of my Egghead tutorial: https://egghead.io/series/getting-started-with-redux

In short, try to create presentational components first, but when you start passing unrelated props through intermediate components, it's time to extract a container component.
",gaearon,2016-02-02 22:05:02
242,2016-01-28 21:32:26,"It think what we're seeing here is a clash of perceptions of how an application data flow should be structured. I guess its present in all frameworks. I call it ""Flat vs. Nested"". I believe it is the creators preference to think of a components based application as a tree like structure and that is why he and many more think that there should be one single entry point of data to the presentation layer and all of the data should propagate down to the particular component that needs it. This however may create some architectural and performance problems (never did a research so this may be incorrect). For simple web application the ""Nested model"" is clear and simple to understand. You have a collection of people and you need to visually represent every each person and then it is easy to think about an UL component that gets all the  data and gives a piece of it to each LI component in it, and every IMG component takes the colllection.item.image_url bit and displays it.

However the creation of FLUX pattern I believe was made of totally different necessity.Let us imagine the facebook page. It is all one page. At this point there is very little part of the content of facebook that is happening outside the main container. You've got yourself, pages, friends, friends of  friends, videos, similar videos, likes, shares, chat, sharing and privacy preferences. Its a huge messy graph which needs to be displayed all in one main container. I hope facebook engineers get good salaries because they have very difficult problems to solve. I believe that the problems that an application like facebook is facing is the motivation for FLUX existence. If you take a close look of a FLUX application it may probably resemble a graph. Lots of nodes (stores and views) and connections between them (actions and dispatchers). Now the genius part of it is that they separated the connections between the nodes to actions and dispatchers so they become uni-directional and representation/perception could be simplified. 

So long story short.... In my humble opinion, if your application's data representation looks like a graph use a the classical FLUX implementation. Else, if it is easier to think of your data as tree and you want to simplify things Redux may be a good and less painful solution with lots of goodies for free :) 
",emonidi,2016-02-02 22:05:02
242,2016-02-02 22:05:02,"We no longer discourage creating container components in the updated docs.
http://redux.js.org/docs/basics/UsageWithReact.html
",gaearon,2016-02-02 22:05:02
241,2016-01-07 21:47:21,"I have a reduxForm with a mapDispatchToProps that adds a method ""change"" (mapped to reduxForm.change), but it doesn't end up on this.props.  If I rename it to ""props2"" then it does.

<S_CODE_TOKEN>

this was working when I was using `@connect` with the mapDispatchToProps
",arolson101,2016-01-15 20:25:36
241,2016-01-15 20:25:36,"The right place to file this in Redux Form repo.
You're having issues with their code after all, not ours :wink:
",gaearon,2016-01-15 20:25:36
241,2016-01-15 21:33:48,"d'oh!  sorry.
",arolson101,2016-01-15 20:25:36
240,2016-01-05 12:13:32,"Hello, what I'm trying to do is render a part of an application inside and iframe element. The problem I'm facing is that there's no concept of store inside the iframe. 
`Could not find ""store"" in either the context or props of ""Connect(Header)"". Either wrap the root component in a <Provider>, or explicitly pass ""store"" as a prop to ""Connect(Header)"".`

How do I pass the store to the components using connect that are inside the iframe? The library I'm using to create the iframe is the following: https://github.com/ryanseddon/react-frame-component

Any help is appreciated.
",lucadegasperi,2016-01-15 20:24:11
240,2016-01-06 09:09:25,"Okay Thanks, next questions: How do i access the store from inside a component in order to pass it to the provider inside the iframe? And, will these two stores be in sync with each other?
",lucadegasperi,2016-01-15 20:24:11
240,2016-01-06 10:02:19,"The store should be available in every component wrapped in the provider via `this.context.store`. Though I had a play with the frame component last night and it worked fine for me. Maybe try and update?
",timjacobi,2016-01-15 20:24:11
240,2016-01-06 10:03:27,"Awesome! Will try right away!
",lucadegasperi,2016-01-15 20:24:11
240,2016-01-06 10:13:31,"No problem and I forgot to say: There is only one store being passed around so there won't be any syncing issues.
",timjacobi,2016-01-15 20:24:11
240,2016-01-06 10:18:35,"Thanks Tim! Right now doing `console.log(this.context);` in the render method is returning undefined. Any clue on why the context isn't there? The component is defined with React.createClass instead of the new ES6 class syntax.
",lucadegasperi,2016-01-15 20:24:11
240,2016-01-06 10:24:49,"this.context is only populated when you define the properties you want in contextTypes

https://facebook.github.io/react/docs/context.html
",merk,2016-01-15 20:24:11
240,2016-01-06 10:25:45,"Just read that after having the issue, context is still a new thing to me :smile: 
",lucadegasperi,2016-01-15 20:24:11
240,2016-01-15 20:24:11,"You can do something like

<S_CODE_TOKEN>

(pseudocode)
",gaearon,2016-01-15 20:24:11
240,2016-01-15 20:24:45,"The reason this problem exists is because React doesn't preserve context across `ReactDOM.render()` boundaries which is what that frame component uses.
",gaearon,2016-01-15 20:24:11
240,2016-02-08 18:00:58,"@lucadegasperi I have raised an issue against the frame component and it's being worked on.
https://github.com/ryanseddon/react-frame-component/issues/29
",timjacobi,2016-01-15 20:24:11
240,2016-02-08 19:59:57,"@timjacobi for now I have avoided using this technique, good thing someone is working on improving it.
",lucadegasperi,2016-01-15 20:24:11
240,2016-02-10 02:56:41,"Just a heads up I've merged and published a fix for this, all kudos goes to @ibash for coming up with the fix.
",ryanseddon,2016-01-15 20:24:11
239,2016-01-04 10:03:48,"Is there a way to do that? It will be helpful when dealing with situations like this:

<S_CODE_TOKEN>

It seems helpful for me when I try to reuse a component not only its view-layer but also logic layer and prevent states being override by multiple instance.
",chbdetta,2016-01-04 10:09:54
239,2016-01-04 10:07:40,"I think that works already. See references to `ownProps` in https://github.com/rackt/react-redux/blob/master/docs/api.md#arguments
",epeli,2016-01-04 10:09:54
239,2016-01-04 10:09:54,"Thanks! I feel so dump now! 
",chbdetta,2016-01-04 10:09:54
238,2016-01-04 00:19:44,"Module import tip that could be left over before adding react-redux. Easy to overlook.
",sausagejohnson,2016-01-28 00:17:45
238,2016-01-15 20:12:57,"Can you reword this in a way that doesn't imply a specific convention? You're using default exports for connected components and named exports for the wrapped components, but not everybody does it this way. It's better to rephrase to explain that you need to make sure that whatever you import (no matter how you do it) should matter whatever way you export (no matter which exactly) your connected component.
",gaearon,2016-01-28 00:17:45
238,2016-01-28 00:17:45,"Closing for inactivity but please feel free to reword as I suggested above.
",gaearon,2016-01-28 00:17:45
237,2016-01-03 23:36:32,"So that I could do this:

<S_CODE_TOKEN>

Now I'm fully aware that I can do this in the component code by passing the ""follow state"" and both action creators to it, but when using function components this would be more performant way to do this. In normal class based component I can do this only once as a method but with a function component I lose some performance because the toggle function is recreated on every render. Also when using `react/jsx-no-bind` eslint rule it's hard to avoid the warning.

Another point is that if the toggle function is recreated on every render it can interfere with PureRenderMixin optimized components further down in the component tree.

---

Another option would be to add `dispatch` to `mapStateToProps` as the third argument. Which actually could be prettier because then the object shorthand for `mapDispatchToProps` would be still available. 

EDIT: Also it would be easier to implement because the reinvoke semantics of `mapDispatchToProps` would not change. So I'll actually propose this version :)

I can also send a PR if we see this as something we want.
",epeli,2016-01-04 21:45:46
237,2016-01-04 14:39:04,"I agree. For full generality, `connect` should provide some way to generate a props object out of a closure that is injected with both `dispatch` _and_ `getState`. Just like `redux-thunk` does. I allude to this in [my answer](http://stackoverflow.com/a/34584313/807674) to a question on StackOverflow. Not sure how this could be accomplished without breaking changes. But I think the existing API is too constrained/opinionated. I'm going to be potentially controversial and suggest that a breaking change should be made, and `connect` should simply have the signature `connect((dispatch, getState, ownProps) => stateProps, options)`. The current usage could just be a specially case of this more general form. (Maybe I'm missing some performance implications or something?)
",acjay,2016-01-04 21:45:46
237,2016-01-04 14:48:18,"> Maybe I'm missing some performance implications or something?

Well now the implementation is very efficient. It will not run `mapDispatchToProps` when store changes or even when the `ownProps` changes unless it is actually used in the function. If there would be only one general map function the action creators would be rebound on every prop and state change.

AFAIK adding `dispatch` to `mapStateToProps` as the third argument would not have any performance  implications nor it would be a breaking change.
",epeli,2016-01-04 21:45:46
237,2016-01-04 15:55:01,"That makes sense to me, I've glanced at the implementation of `connect`, but haven't really traced it out. But I still think `getState` needs to be passed in, rather than a state snapshot. Otherwise, in the methods of the object you pass in, you won't be able to have async logic that gets the updated state in callbacks.
",acjay,2016-01-04 21:45:46
237,2016-01-04 16:25:38,"I don't think async logic belongs in the map functions at all. They should be only pure functions which transforms the state to props and binds action creators to dispatch. Which means you cannot modify the state during the map state execution so getState would always  just return the same state.

Also if you could modify the state from the map state functions it could lead to infinite loops because every update would reinvoke the map functions.

Async logic goes into action creators and middleware. See http://redux.js.org/docs/advanced/index.html

---

On the side note I think react-redux should explicitly deny invoking the `dispatch` function during map state calls. It should be only allowed to be bound for later invocation.
",epeli,2016-01-04 21:45:46
237,2016-01-04 16:31:31,"If you take a more closer look at the implementation of `connect()` here 

https://github.com/rackt/react-redux/blob/caae2e1/src/components/connect.js#L214-L219

you see that the map state functions are called during render. Would start an async operation from render method of  a component?
",epeli,2016-01-04 21:45:46
237,2016-01-04 18:45:30,"> Async logic goes into action creators and middleware. See http://redux.js.org/docs/advanced/index.html

Sure, I think that's one opinion, but I don't take that as gospel.

In the paradigm you describe, you `dispatch` impure blobs, and then rely on some magic in the `dispatch` mechanism to eventually `dispatch` regular objects through the reducers to compute the new state. But that's not the only way to do it.

[redux-saga](https://github.com/yelouafi/redux-saga) puts the asynchrony in long-running generators in a side band. They still hook into the `dispatch` mechanism, but only to listen for actions and to input new actions. So `dispatch` in this sense is repurposed as an event bus, but you're only ever dispatching POJOs as actions. ~~[A proposed ""reactions"" approach](https://github.com/rackt/redux/issues/1182) seems to be based around a similar conceptualization, except that it's monitoring the state instead.~~

An alternative I've been experimenting with uses vanilla Redux's pure, synchronous action creators (before async is introduced in the guide) and an middleware-free `dispatch` mechanism, which only manages state mutations, rather than serving as a bus. In this model, you create an action POJO, and then the entire flow from action creation -> Redux `dispatch` -> reducers -> new normalized state -> new denormalized state (with computed data) -> react-redux `connect` -> React props/context -> `render` is synchronous and pure. There's nothing out of band going on in that entire flow. 

For asynchrony, you give functions that live _out of that flow_ a callback to `dispatch` actions and a callback to check current state. You mix those functions in to `props` so that your UI's event handlers can trigger them. `render` just sets up event handlers, it doesn't directly trigger anything. This is the idea behind [react-redux-controller](https://github.com/artsy/react-redux-controller).

I don't see my approach as mutually exclusive with something like redux-saga. The latter sounds like a smart approach to having long-running processes outside of the UI that share state with the UI and can generate changes, like websocket listeners, automation, etc. But for stereotypical MVC controller logic, like bread-and-butter input/output, I think my approach is conceptually simpler and cleaner.
",acjay,2016-01-04 21:45:46
237,2016-01-04 20:56:17,"[The proposed ""reactions"" approach](https://github.com/rackt/redux/issues/1182) actually works differently than I first reported. My current understanding is that it uses the store to represent effects that should happen and the state of their consequences. Then, a new reactions stage realizes those effects. This stage runs after the reducers produce the next state.

So, for example, an API call needs to be made. Dispatching the action that should trigger it sets an ""effect"" value in the state, which expresses that ""data _should_ be getting fetched right now from `/myApi/data`"". The reducers merge that effect into the state. The reactions system should check whether that request is pending, and if not, start it. 

When the XHR completes, its continuation would dispatch an action that should have the result of removing that fetch effect from the state.

This approach is intriguing because it refies the state of ongoing process in the store. So you could serialize the state of your application _down to having a specific async fetch in progress_, and rehydrate it in that exact state. Wild!
",acjay,2016-01-04 21:45:46
237,2016-01-04 21:34:14,"`connect()` accepts a third argument called `mergeProps` precisely for this use case.

<S_CODE_TOKEN>

Or, in a more readable way:

I think adding `getState()` to `mapDispatchToProps` has the potential of being very confusing and people might start using it instead of `mapStateToProps` and wonder why it doesn't redraw.
",gaearon,2016-01-04 21:45:46
237,2016-01-04 21:38:31,"Same example in a less terse way:

<S_CODE_TOKEN>
",gaearon,2016-01-04 21:45:46
237,2016-01-04 21:41:12,"> I'm going to be potentially controversial and suggest that a breaking change should be made, and connect should simply have the signature connect((dispatch, getState, ownProps) => stateProps, options). The current usage could just be a specially case of this more general form. (Maybe I'm missing some performance implications or something?)

Please take a look at #1. This option has been considered and rejected. Yes, it's very bad for performance to re-bind action creator on every dispatch, which is what will happen if we let people access the state in the same place they bind action creators. Technically they can still do it now with `mergeProps` but it's hidden well enough that people who aren't experienced with Redux don't discover it by mistake.
",gaearon,2016-01-04 21:45:46
237,2016-01-04 21:45:46,"> Another point is that if the toggle function is recreated on every render it can interfere with PureRenderMixin optimized components further down in the component tree.

Absolutely correct, this is a performance nightmare scenario where nothing really changes but bound functions kill the performance optimizations.

In fact it's so bad I don't recommend what I wrote above. Bind action creators as rarely as possible, and prefer to _not_ bind them to particular IDs. Instead, just let your components call appropriate props with appropriate arguments:

<S_CODE_TOKEN>

This is not as elegant but it's much more performant and also easier to understand than a complex `connect()` declaration.

I'm closing this because I think the two workarounds I offered above will suffice. If you believe React Redux API is not good enough please create another library that better fulfills your goals. The goal of this library is to encourage performant patterns because otherwise people will say “Redux is slow!” even if the cause is their suboptimal function binding code. We don’t want this to happen, so we’d rather make certain unperformant cases harder to implement.
",gaearon,2016-01-04 21:45:46
237,2016-01-04 23:52:50,"@gaearon Thanks for the info.

With that taken into consideration, I still think having `getState` in `mapDispatchToProps` is an important missing piece. Obviously, not everyone agrees with putting asynchrony downstream of the store. But as long as that's not an _unreasonable_ architectural choice, then the downstream still needs a way to get the state after it may have been updated. As far as I can tell, it would add a possibility that doesn't exist today. I may be missing something, but I don't think the solutions you presented account for this, because I don't think `mergeProps` allows for it. Also, It doesn't seem like having a `getState` callback would ruin performance, as it could be injected once and always work.

react-redux is a _great_ API, and I hope my comments haven't come off to the contrary. But I hope you understand that it makes more sense to try to advocate for ideas in an existing library than to maintain a fork or entirely separate product. I realize that a great deal of thought has been put into this already, so no disrespect intended to the work that's already been done. I haven't read #1 yet, but I definitely will, because I want to present productive ideas that haven't already been beaten to death.
",acjay,2016-01-04 21:45:46
237,2016-01-05 01:01:26,"I'm hesitant adding it because people might get the idea that `mapDispatchToProps` itself is a good place to read the state by calling `getState`. These people will be surprised that `mapDispatchToProps` is not called when the state is updated, breaking their apps. We won't have a way to protect against this misusage either.
",gaearon,2016-01-04 21:45:46
237,2016-01-05 07:59:02,"Oh yeah. Somehow I didn't realize `mergeProps` can be used for this.

> In fact it's so bad I don't recommend what I wrote above. Bind action creators as rarely as possible, and prefer to not bind them to particular IDs. Instead, just let your components call appropriate props with appropriate arguments:

Yep, this what I'm actually doing now. It just makes me bit sad that the class based version is actually more performant and I maybe even more terse than the functional version.
",epeli,2016-01-04 21:45:46
237,2016-01-20 06:14:53,"> In fact it's so bad I don't recommend what I wrote above. Bind action creators as rarely as possible, and prefer to _not_ bind them to particular IDs. Instead, just let your components call appropriate props with appropriate arguments

The [documentation](https://github.com/rackt/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options) only states the thing you you say you don't recommend here. Update it perhaps?

For reference, the sentence I'm referring to (emphasis mine):

> You may specify this function to select a slice of the state based on props, **or to bind action creators to a particular variable from props**.
",SimenB,2016-01-04 21:45:46
237,2016-01-20 12:40:45,"People asked for this, so I added this API. That I don't recommend doing this is my personal opinion. Most projects can do this just fine; it's only a problem when you want to squeeze that last bit of performance. Feel free to PR the docs to make them more nuanced!
",gaearon,2016-01-04 21:45:46
237,2017-03-16 21:33:19,"@gaearon Dan, I wonder, the default `mergeProps` is `Object.assign({}, ownProps, stateProps, dispatchProps)` as stated in the docs.
Doesn't that also create a new object all the time, just like when one would override `mergeProps` with a custom function for binding action creators?

> Absolutely correct, this is a performance nightmare scenario where nothing really changes but bound functions kill the performance optimizations.

But when nothing really changed, the default `mergeProps` still creates a new object on every render. How does that not matter?
Maybe I'm confused, where the pure-render optimisation kicks in and which props it checks.",pke,2016-01-04 21:45:46
237,2017-03-16 21:51:04,"Yeah, I'm guessing he was referring to the idea that the component passed to `connect` is configured to shallow-compare it's props to their previous values. The suggested method of writing reducers would produce a state object that is shallow-equivalent to the previous generation. And since this object is merged into the new props object, assuming nothing else changed, it would be shallow-equivalent to the old props. But freshly bound action creators would disrupt this equivalence.",acjay,2016-01-04 21:45:46
236,2016-01-03 01:51:53,"Seems that React Native works on top of react already. the issue https://github.com/facebook/react-native/issues/2985 is already closed.
Can we already use React-Redux 4?
",Emilios1995,2016-03-05 00:55:37
236,2016-01-03 23:40:48,"That change is not in the released version yet. In few days I guess...
",epeli,2016-03-05 00:55:37
236,2016-01-06 05:10:09,"The change is included in the newly released 0.18-rc (I haven't tested it with redux 4 yet), so hopefully not long to go!
",zenlambda,2016-03-05 00:55:37
236,2016-01-07 17:25:23,"OK, I got `react-redux 4.0.6` to work with `react-native`, it will be available in [example-react-native-redux](https://github.com/alinz/example-react-native-redux).

There are couple of steps need to be done which I hide them at the moment in `package.json`'s `postscript`. Here's the details:
1. `react` module in `react-native/node_module` must be deleted.
2. `fbjs` module in `react-native/node_modules` must be deleted.
3. `fbjs` module in `react/node_modules` must be deleted.
4. `fbjs` module must be added as module to project in main `package.json`
5. `all .babelrc` files must be deleted under node_module folder

There is a discussion here https://github.com/facebook/react-native/issues/2985#issuecomment-168412030 which @spicyj talks about changing fbjs.

Also @gaearon I still need to remove all .babelrc files under node_modules before I can run the [example-react-native-redux](https://github.com/alinz/example-react-native-redux). What is your suggestion?
",alinz,2016-03-05 00:55:37
236,2016-01-07 17:39:09,"I don't have any suggestions here. Feedback from people more knowledgeable in RN is welcome. 

Perhaps @ide or @spicyj could clarify the situation. 
",gaearon,2016-03-05 00:55:37
236,2016-01-07 18:41:35,"Before checking anything I just replaced `import { connect } from 'react-redux/native'` with `import { connect } from 'react-redux'`. Also updated the following:

<S_CODE_TOKEN>

I use the most recent version of `react-redux`:

<S_CODE_TOKEN>

I didn't need to change anything in the `react-redux` package. It just works, as expected by a tool from @gaearon ;-)
",Purii,2016-03-05 00:55:37
236,2016-01-07 19:07:19,"In npm 2.x, if you define peerDependencies, it will install it in your root node_modules. `react-redux` has a peerDependency to `react` and react-native has `react` module. if you start the app using `react-native start`, `haste` will throw an exception that `fbjs` on `react` has a conflict with `fbjs` in `react-native`. @Purii I would like to see an example from you. Would you create a repo and upload an example?
",alinz,2016-03-05 00:55:37
236,2016-01-07 19:47:15,"Maybe if we make `react` and `fbjs` peer deps of RN that'll help?
",spicyj,2016-03-05 00:55:37
236,2016-01-07 19:50:31,"@spicyj That's an interesting idea. Making react a peer dep sounds like it could be semantically correct. I think it's probably more correct that fbjs is a normal dependency though, and RN 0.19 may address the issue with conflicting fbjs modules with some patches that are being reviewed. (Alternatively npm3 fixes this too.)
",ide,2016-03-05 00:55:37
236,2016-01-07 20:20:22,"@alinz I use npm@3
",Purii,2016-03-05 00:55:37
236,2016-01-07 20:26:29,"@Purii That should be it, since `npm@3` promises flat `node_modules`. The only issue is that, not all modules in `npmjs` are compatible with `npm@3`. Thanks though for letting me know
",alinz,2016-03-05 00:55:37
236,2016-01-11 12:23:39,"@Purii thanks. your method works perfectly for me with npm@3
",mcz,2016-03-05 00:55:37
236,2016-01-19 09:24:54,"It works for me with npm@3
",anderson916,2016-03-05 00:55:37
236,2016-01-21 16:29:39,"I think it's safer to modify the instructions if/after `react-native` is a peer of `react`.
@spicyj Plans to make this happen?
",gaearon,2016-03-05 00:55:37
236,2016-01-21 17:17:12,"Send a PR? Should be pretty simple.
",spicyj,2016-03-05 00:55:37
236,2016-01-23 21:26:53,"For those here looking for a solution for `react-redux`, everything is working great for me with `react-native-0.19.0-rc` and `npm3`, but definitely not with `npm2`.
",zuk,2016-03-05 00:55:37
236,2016-01-23 21:59:43,"The fbjs commits didn't make it into 0.19 so stay tuned for 0.20 or 0.21.
",ide,2016-03-05 00:55:37
236,2016-01-27 21:29:32,"To be fair, the problems at this point that result from using react-native@0.18 and react-redux@4 are entirely bugs within the dependency resolver the react-native bundle operation performs. They are in no way unique to react-redux. They do go away with npm@3; because, it no longer has the duplicate dependencies.
",mudetroit,2016-03-05 00:55:37
236,2016-02-04 15:49:13,"@zuk @alinz How did it work for you guys?
This is the error I get:

<S_CODE_TOKEN>

I'm using NPM3 with these dependencies:

<S_CODE_TOKEN>

I don't have `react` dependency in my package.json (should I have?)
Please anyone help :)
",ranyefet,2016-03-05 00:55:37
236,2016-02-04 15:50:19,"Yes, you’d need to depend on `react`. When you do, make sure to delete `node_modules/react-native/node_modules/react` so you don’t end up with two of them.
",gaearon,2016-03-05 00:55:37
236,2016-02-04 16:04:00,"@gaearon Thanks Dan, looks like it's working :)

But, now I get a different error:

<S_CODE_TOKEN>

Which seems there's [no solution](https://github.com/facebook/react-native/issues/4968) yet :(
",ranyefet,2016-03-05 00:55:37
236,2016-02-04 16:05:21,"Unfortunately I can’t really help you with this! Hopefully this will be fixed.
",gaearon,2016-03-05 00:55:37
236,2016-02-04 16:09:00,"Yeah I know it's not related to this repo, just ranting :disappointed: 
Thanks anyway!
",ranyefet,2016-03-05 00:55:37
236,2016-02-04 16:50:59,"@ranyefet we do have `react@0.14.5` as our dependency in our project.  make sure to delete node_modules folder and try again. and here is my react-native module as a reference. 

![screen shot 2016-02-04 at 11 49 42 am](https://cloud.githubusercontent.com/assets/967050/12822317/85cd7022-cb35-11e5-9c80-4e1b88f60452.png)

my npm version is 3.6.0
my node version is v5.5.0
",alinz,2016-03-05 00:55:37
236,2016-02-07 10:24:25,"Thanks @alinz upgrading Node to 5.5 appear to fixed other issues I had, weird!
",ranyefet,2016-03-05 00:55:37
236,2016-02-17 04:34:53,"So, what's going on? Are we still waiting for react-native to be a peer of react?
",Emilios1995,2016-03-05 00:55:37
236,2016-02-17 05:52:38,"If anyone encountered same problems, here is a way worth to try:
1. DELETE FULL node_module directory
2. edit you package.json, react-native@19 and react-redux@4
3. make sure your npm@3
4. npm install

with a refreshed install and see if it works
",zxcpoiu,2016-03-05 00:55:37
236,2016-02-17 12:19:16,"> So, what's going on? Are we still waiting for react-native to be a peer of react?

Yes. AFAIK it is already the case in master. Just waiting for the next release. 
",gaearon,2016-03-05 00:55:37
236,2016-02-17 15:05:02,"Good! But wasn't it included in 0.20? @gaearon do you recommend reinstalling the modules to make it work right now? 
",Emilios1995,2016-03-05 00:55:37
236,2016-02-17 17:28:56,"Still appears to be a dependency in 0.20: https://github.com/facebook/react-native/blob/6496feb61e9205baa3f25cf448c4fce912bd6250/package.json#L136

cc @skevy
",gaearon,2016-03-05 00:55:37
236,2016-02-17 17:54:57,"@gaearon working on it :) We'll know by Friday if ""React as as a peer dep"" is going to make it into the 0.21-RC branch cut.

Thanks for the ping. Trust me, we're working hard to get this stuff worked out and make React Native a better member of the general React ecosystem.
",skevy,2016-03-05 00:55:37
236,2016-02-17 18:19:46,"I have no doubts about your efforts, thank you very much for working on this!
",gaearon,2016-03-05 00:55:37
236,2016-03-05 00:55:37,"The note in README now says you can use `react-redux@4.x` just fine. I’ll add a clarification that you should be careful to avoid ending up with two `react`s.
",gaearon,2016-03-05 00:55:37
235,2016-01-01 16:18:10,"It would be nice to have an optional predicate function to pass to the connect function, so we can do ~~the usual~~ further immutable data optimizations.

Something like this:

<S_CODE_TOKEN>

then in handleChange:

<S_CODE_TOKEN>

P.D.: Happy New Year! 
",gacosta89,2016-01-15 20:21:12
235,2016-01-04 14:12:00,"I've also noticed that for your own props, shallowEqual is used, but for the store props, it's strict object identity only. This somewhat concerns me as it seems that it would be slightly tricky to always preserve the exact object instance just to optimize the comparison a little bit which we may not even need- or in other words, data sharing between immutable instances becomes mandatory, rather than a nice optimization.

It would be nice if we could supply our own comparison or even just use shallowEqual.
",DeadMG,2016-01-15 20:21:12
235,2016-01-15 20:21:11,"There is a possibility that we’ll make `arePropsEqual` configurable (https://github.com/rackt/react-redux/pull/183) but I don't think we want to provide any more customization.

Just because that `setState()` call happens doesn't mean your inner component will actually get updated. We have a bunch of additional optimizations (in `shouldComponentUpdate()` and `render()`) that will try very hard to prevent renders if **the slice of state you're actually interested in** (as determined by `mapStateToProps()` you supplied) has not changed. We have a whole bunch of tests proving that those optimizations work and renders are only performed when absolutely necessary.

> I've also noticed that for your own props, shallowEqual is used, but for the store props, it's strict object identity only. 

This is incorrect. `shallowEqual` is used to compare all props, whether derived from parent props, or store. Please see [here](https://github.com/rackt/react-redux/blob/4fca3cbc736b7462de65f589d3b0fdab0cb7a495/src/components/connect.js#L101), [here](https://github.com/rackt/react-redux/blob/4fca3cbc736b7462de65f589d3b0fdab0cb7a495/src/components/connect.js#L111), and [here](https://github.com/rackt/react-redux/blob/4fca3cbc736b7462de65f589d3b0fdab0cb7a495/src/components/connect.js#L150).

> This somewhat concerns me as it seems that it would be slightly tricky to always preserve the exact object instance just to optimize the comparison a little bit which we may not even need- or in other words, data sharing between immutable instances becomes mandatory, rather than a nice optimization.

Unfortunately I don't understand the problem you're describing at all. :-( Maybe some code would help?
",gaearon,2016-01-15 20:21:12
234,2015-12-30 22:55:23,"Is componentWillMount still the best spot for ""on load"" actions? Or is there any downside to firing them in the mapDispatchToProps before returning the map and keeping every component a function? 
",chrishowes,2015-12-30 23:06:56
234,2015-12-30 23:06:56,"`mapDispatchToProps` is presumed to be pure. Please don't do data fetching there. It may be called multiple times, etc.

Yes, `componentWillMount` (and `componentWillReceiveProps` for changes!) is the best way. You can also create a custom higher-order component that would wrap yours, so you can keep yours a function and wrap it.
",gaearon,2015-12-30 23:06:56
234,2016-02-07 23:48:59,"Hi @gaearon 

I'm not sure to understand your answer to @chrishowes .

Can you provide an example of what you mean by creating a custom higher-order component and how to use it.

Thx

Best regards
",lauterry,2015-12-30 23:06:56
234,2016-02-08 00:20:38,"https://github.com/markdalgleish/redial is a good example of what I mean. 
",gaearon,2015-12-30 23:06:56
234,2016-02-08 21:27:16,"Thx. I'll have a look
",lauterry,2015-12-30 23:06:56
233,2015-12-28 22:12:49,"Our current presets didn't include ES3 transforms by default, so IE8 support is broken. Normally we would have fixed it by adding a few plugins:
- babel-plugin-transform-es3-member-expression-literals
- babel-plugin-transform-es3-property-literals

Unfortunately there is a [bug in Babel](https://phabricator.babeljs.io/T2817) that prevents them from working correctly in certain cases with `export default` declarations. Until this is resolved, we will go back to using CommonJS modules internally.

This fixes https://github.com/rackt/react-redux/issues/232.
",gaearon,2015-12-28 22:16:59
233,2016-02-02 12:40:52,"Fixed via https://github.com/rackt/react-redux/commit/65a80f89dbad5e1d3d4ff8ec11472ce0c966aad5.
",gaearon,2015-12-28 22:16:59
232,2015-12-28 20:47:22,"Looks like this happened in the 4.0.1 release, might be related to the Babel 6 upgrade but I'm not positive.

dist/react-redux.js:

<S_CODE_TOKEN>
",kevana,2015-12-28 22:16:59
232,2015-12-28 21:48:07,"I think adding es3 transforms (es3-member-expression-literals, es3-property-literals) to the babel config will fix it, I'll check tonight.
",kevana,2015-12-28 22:16:59
232,2015-12-28 21:48:19,"I'm on it
",gaearon,2015-12-28 22:16:59
232,2015-12-28 21:51:20,"Thanks :+1: 
",kevana,2015-12-28 22:16:59
232,2015-12-28 21:57:28,"Unfortunately those transforms aren't currently helpful because of a bug: https://phabricator.babeljs.io/T2817. I'll have to go back to using CommonJS internally until this is fixed.
",gaearon,2015-12-28 22:16:59
232,2015-12-28 22:00:27,"Ok, it's not a high priority issue for me, the webpack workaround isn't too bad:

<S_CODE_TOKEN>
",kevana,2015-12-28 22:16:59
232,2015-12-28 22:02:51,"It's still a breaking change we need to fix though. Which is not fun. :-( I think we'll go with requiring ES5 environment in the next version, and will ask people to `es3ify` or equivalent if they need IE8.
",gaearon,2015-12-28 22:16:59
232,2015-12-28 22:22:27,"Please verify whether this is fixed in 4.0.6.
",gaearon,2015-12-28 22:16:59
232,2015-12-29 16:12:16,"Verified fixed, thanks.
",kevana,2015-12-28 22:16:59
231,2015-12-28 16:02:48,"I encounter this problem because I was careless not returning anything from `connect`.
Not sure this should be resolved in `react-redux` or `redux`.
Here is the pseudocode to see the meaningless `console` error.

<S_CODE_TOKEN>
",ratson,2016-07-10 17:18:11
231,2015-12-28 20:11:34,"What message do you currently get? It should say about action being a plain object.
",gaearon,2016-07-10 17:18:11
231,2015-12-29 03:23:21,"I have created a demo for the problem, you could check it out by the following commands.

<S_CODE_TOKEN>

Then `open http://localhost:8080` and click the `increase` button, you should the errors in browser console.
",ratson,2016-07-10 17:18:11
231,2016-04-05 12:42:22,"So you're currently getting `TypeError: Action is undefined` with a Stack Trace. Which it is as you're passing in a function with no body as part of state to `connect(state)(Home)`, thus not passing in an `action` which causes the `TypeError`. What error would you expect here? I'm struggling to see what error you'd want to see.
",alex-deas,2016-07-10 17:18:11
231,2016-04-05 13:23:34,"I don't get `TypeError: Action is undefined` in console.

Instead I have this following printed in console.

<S_CODE_TOKEN>

which points to the line

<S_CODE_TOKEN>

I would expect the `typeof action` is checked and give out a more meaningful message on how to fix the problem.
",ratson,2016-07-10 17:18:11
231,2016-07-10 17:18:11,"This may have been before Redux switched to lodash. [There is a check in place](https://github.com/reactjs/redux/blob/master/src/createStore.js#L150-L155) to prevent the more opaque error you were getting.
",timdorr,2016-07-10 17:18:11
230,2015-12-27 23:09:43,"This works perfectly with react-redux 3.x, but with 4.x it got broken.

It works with 3.x:
- Clone this repo: https://github.com/alinz/example-react-native-redux
- Run it in XCode, and it works perfectly.

With react-redux 4.x, it's broken:
- Delete all dependencies in package.json file so next time on npm install the latest will be installed
- Install the latest dependencies

<S_CODE_TOKEN>
- In app/containers/app.js and counterApp.js remove the native suffix after react-redux import
- Open XCode project and Run it

<S_CODE_TOKEN>
- You will get an error an Invariant Violation error: [please see this screenshot](https://www.dropbox.com/s/vqdrx5ghpmxkf4t/Screenshot%202015-12-28%2000.03.32.png?dl=0)

The problem is definitely with react-redux because if I comment the react-redux import lines and remove all code that depends on either connect or Provider, than it works perfectly.

Thank you,
Peter
",mcz,2015-12-28 20:12:24
230,2015-12-28 20:12:24,"[From the README](https://github.com/rackt/react-redux#react-native):

> Until [React Native works on top of React instead of shipping a fork of React](https://github.com/facebook/react-native/issues/2985), you’ll need to keep using [React Redux 3.x branch and documentation](https://github.com/rackt/react-redux/tree/v3.1.0).
",gaearon,2015-12-28 20:12:24
229,2015-12-25 09:14:07,"I've been troubled by this problem for a few hours, I need some help.
Async action

<S_CODE_TOKEN>

   }
Reducer

<S_CODE_TOKEN>

Main Component

<S_CODE_TOKEN>

In ios9+, the result can be logged in `mapDispatchToProps`  when the result been dispatched in `getLineList` action while android and ios8 can't.
The react-redux version is `v4.0.0`, what's wrong.
",leaven,2015-12-25 11:14:47
229,2015-12-25 11:14:44,"The problem has been solved, sorry troubled.It turned out that _Object.assgin_ wasn't supportted in those os.And babel 5+ did not translate it into ES5.
",leaven,2015-12-25 11:14:47
229,2015-12-25 13:30:54,"Babel only translates syntax. You need to explicitly import `babel-core/polyfill` if you also want the polyfill (it's fairly large). 
",gaearon,2015-12-25 11:14:47
228,2015-12-24 10:59:52,"Hi,

This is a follow-up of my [feedback](https://github.com/rackt/redux/issues/1176#issuecomment-167087348) about running a prod app with an internal framework that looks a bit like Redux, but is not Redux.

We'd like to migrate to Redux at some point for state management, and do so progressively. A thing that would be easy to do is start using connect/reselect with our own framework. Our framework has its own global atom, from which we can subscribe/unsubscribe and extract state object like a Redux store.

What I see of `connect` is that the logic and optimizations can probably be reused outside of the Redux world for any framework that shares the same low-level functionalities of the Redux store (like our internal framework or Baobab or many others)

I would be happy to make a PR for this if you are ok with the idea or move a generic connect to a separate NPM project on which React-redux will depend.

About hot reloading, I'm not sure how it works currently, is it coupled to Redux and may I have troubles with it?
",slorber,2015-12-26 23:01:11
228,2015-12-24 12:52:49,"Also don't want to open another issue for that but couldn't Redux devtools be plugged to an ELM app for example?
",slorber,2015-12-26 23:01:11
228,2015-12-24 16:28:25,"In general this is probably doable but I'm wondering what kind of API you have in mind. We don't want to get lost in too much indirection. It might be easier to just fork the project and tweak it, as implementations are likely to diverge later anyway.

> Also don't want to open another issue for that but couldn't Redux devtools be plugged to an ELM app for example?

I don't think so. Elm communicates with JS via an abstraction but DevTools want to wrap your update logic. Elm has its own debugger anyway, right?
",gaearon,2015-12-26 23:01:11
228,2015-12-24 19:07:06,"Looks very nice.
",DenisIzmaylov,2015-12-26 23:01:11
228,2015-12-26 22:50:57,"@gaearon I share your point that it's fine to copy/paste and fork and really like these posts on the subject:
- http://us3.campaign-archive2.com/?u=1090565ccff48ac602d0a84b4&id=92902a19e4&e=6dbbf45b40
- http://udidahan.com/2009/06/07/the-fallacy-of-reuse/

Here it seems that the API surface to implement the connect feature is very small and that an abstraction make sense (like you probably did for react-hot-api?). Also if it's possible to avoid forking and benefit from further optimizations done by the community without having to backport it's better for me :)

I would be interested to know how you see implementations could diverge because I'm not sure how it could happen unless new redux store methods are added?

---

Anyway I've found another simpler option.

<S_CODE_TOKEN>

Let's consider the Redux store API as a reference implementation of a ""react connect standart"": I'll wrap my framework so that it exposes the exact same API in react context and it should work. Other frameworks could easily do the same too
",slorber,2015-12-26 23:01:11
228,2015-12-26 23:01:11,"Yeah, as long as you expose that API you'll work with React Redux fine. You can even write `toReduxStore(customStore)` and the use Provider with it as well. 

I'll close then. 
",gaearon,2015-12-26 23:01:11
227,2015-12-23 07:37:57,"At https://github.com/rackt/react-redux/issues/133, we fixed the issue within `v3.1.0`.

But it appears again in `v4.0.3`.

Here is the file `lib/index.js` in `v3.1.0` and `v4.0.3`.

`v3.1.0`

<S_CODE_TOKEN>

`v4.0.3`

<S_CODE_TOKEN>
",xcatliu,2015-12-23 11:20:15
227,2015-12-23 07:49:09,"It seems to be a problem with babel@6.

What `.babelrc` should we set to avoid the use of `defineProperty`?
",xcatliu,2015-12-23 11:20:15
227,2015-12-23 11:21:10,"Sorry for screwing this up. Should be fixed in 4.0.4.
",gaearon,2015-12-23 11:20:15
227,2015-12-23 11:36:02,"@gaearon Thanks! Works fine with [v4.0.4](https://github.com/rackt/react-redux/releases/tag/v4.0.4).
",xcatliu,2015-12-23 11:20:15
226,2015-12-22 23:34:37,"One of the really nice results of reducer composition is that it is possible to create reducers that only need to know about their part of the global state tree. This is unfortunately not currently the case with mapStateToProps, which is handed the complete global state tree. A consequence of this is that when an app gets larger, and you re-organize the state tree, you need to touch every instance of mapStateToProps.

For example, suppose that I start out with an app that deals with articles. I have an ArticlesListView that I connect() to the state like so:

<S_CODE_TOKEN>

Now, my app grows and I want to introduce functionality related to users. No problem, I simply update my global state like so:

<S_CODE_TOKEN>

Because of how reducer composition works, I don't need to touch my reduceArticles implementation. But I do need to update my mapStateToProps, since the state it operates on has been moved to the articles sub-key of the global state. That's what I mean when I stated that mapStateToProps is not orthogonal to reducers.

There is a work around with the current implementation of connect, which is to use the store prop on the connected component, like so:

<S_CODE_TOKEN>

Now, my mapStateToProps function for articles is handed only the articles branch of the global state tree and doesn't need to be updated.

You can make this generic, for any attribute of the global state like so:

<S_CODE_TOKEN>

This is all possible with the current implementation of connect, and it's what I'm doing in my apps. But it's not obvious and it requires a bunch of plumbing on my part.

Since I believe this will be such a common pattern, I recommend that we make this plumbing easy by adding a scope prop to the connected component like so:

<S_CODE_TOKEN>

Finally, as an app gets larger, it is likely that state will get further nested. This could be supported by allowing dot-notation on the scope selector like so:

<S_CODE_TOKEN>

The corresponding scopedStore function would now look like this:

<S_CODE_TOKEN>

If you guys think this makes sense, I'd be happy to contribute a PR for this.
",planetcohen,2015-12-23 11:23:24
226,2015-12-23 00:30:05,"What if I need both users and articles form a larger store, i.e 2 or more scopes, yet not the whole thing?
This may well be the case with some components, IMHO
",tudorilisoi,2015-12-23 11:23:24
226,2015-12-23 05:28:50,"Perhaps articles and users is not the best example; think articles and products instead. I think it's most likely that you'll have views that display articles and separate views that display products.
",planetcohen,2015-12-23 11:23:24
226,2015-12-23 07:47:43,"This particular pattern wouldn't be very useful in my applications.  I have higher level connected components that grab all the state that is needed to display a portion of a page that then hand 'scoped' data to dumb components to actually do the rendering.  Pages need user state (preferences), ui state, interconnected entity state, etc in order to render anything.

I use `reselect` in order to hide the actual shape of the state store from the connected components.  My components have no idea what the store actually looks like at all.  For example, I have a set of selectors that handle session state.

<S_CODE_TOKEN>

Then my components can get the current session state like this:

<S_CODE_TOKEN>

Here the component has no idea where the session state is stored, it just knows how to get it.  Now I can move it around whenever I want, fix up one selector (the `const sessionSelector`) and everything else just works.  The other nice thing about `reselect` is that it memoizes calls so that you can have logic in the selectors that is also hidden from the components (such as filters/sorting) without slowing things down. 
",bunkat,2015-12-23 11:23:24
226,2015-12-23 11:23:24,"Selectors is our approach to this. Write selectors alongside your reducers, and you never need to know the exact state path. You don't have to use reselect (although it's good for perf). Just group selectors with reducers and require them up the reducer tree so components talk to root selectors. [Example](https://github.com/rackt/redux/blob/5e996af1a0d2ee18b6b5a2d61b12e311cf0b6834/examples/shopping-cart/reducers/products.js#L52-L58)
",gaearon,2015-12-23 11:23:24
225,2015-12-22 12:15:39,"This attempts to completely remove any internal side effects from `shouldComponentUpdate()` because is not in line with how React tells us to treat it and [may not even be called in certain cases, e.g. during hot reloading](https://github.com/rackt/react-redux/issues/224).

I didn't touch any tests, and that they pass is a good sign because it means we didn't regress over #99 which is where those side effects were moved to `shouldComponentUpdate()`. Here, instead, I moved them to `render()`, and applied a different optimization (namely, returning a constant element) to achieve the same effect as `shouldComponentUpdate()` did while always calling `mapStateToProps` and `mapDispatchToProps` with up-to-date props.

I confirm this PR fixes #224. It should not regress on performance.

@epeli Would you like to review?
",gaearon,2015-12-22 12:42:52
225,2015-12-22 13:03:17,"Actually I'm much happier with this code now :-). I feel like we're not working around but with React now.
",gaearon,2015-12-22 12:42:52
225,2015-12-23 08:13:31,"Yeah, calling map state functions in `shouldComponentUpdate` felt bit like a hack to me too but I just wanted to make a smallest possible change in order to fix the issue at hand and didn't think it would be an issue because the map state functions should be pure too.

But I recall that in somewhere in React docs they advise against keeping references to created React elements so I wonder whether it would be better to just cache the data?
",epeli,2015-12-22 12:42:52
225,2015-12-23 11:24:37,"No, caching React element is an advanced perf pattern. (People usually do this for wrong reasons so it's not recommended.) The thing is, it works like `shouldComponentUpdate()`. React will bail out of reconciliation if we return the same element. That's why my change is not a perf regression.
",gaearon,2015-12-22 12:42:52
225,2015-12-23 13:28:24,"Nice. This should make perf even a bit better.
",epeli,2015-12-22 12:42:52
224,2015-12-21 21:49:46,"I think this is an issue with how react-redux handles the hot reloading of connected components. If you have a non-connected (dumb) component render a connected component as a wrapper component, any content within that wrapper will no longer be re-rendered on change.

**_Connected component:**_

<S_CODE_TOKEN>

**_Dumb component rendering connected component:**_

<S_CODE_TOKEN>

Changing the text `this is a test` will not cause the component to re-render.  Replace `<Form>` with `<div>` and everything works as expected.  Replace `connect()(Form)` with just `Form` and everything works as expected.

Repository demonstrating issue is available at https://github.com/bunkat/counter.  It is the react-redux counter example with babel6 hot loading and a new connected wrapper component. 

To reproduce the issue:
1. git clone https://github.com/bunkat/counter.git
2. cd counter
3.  npm install
4.  npm start
5. Open browser to http://localhost:3000
6. Edit components/Counter.js
7. Modify the render method, change Clicked to Not Clicked

The module will be updated via HMR, but the Counter component will not be rendered with the new text.
",bunkat,2015-12-22 12:42:52
224,2015-12-21 22:51:44,"So this _is_ a bug. In particular it is caused by us recomputing child props inside `shouldComponentUpdate()` which is not at all guaranteed to run (for example, it won't run if the connect wrapper is `forceUpdate()`d which is exactly what `react-transform-hmr` does). This was introduced in #99.

@epeli Can you look at this? Ideally we shouldn't care if `shouldComponentUpdate()` is called or not. We definitely shouldn't rely on React doing it before every render. Maybe we should move the calculations back into `componentWillReceiveProps` and `handleChange` and solve #99 in some other way.
",gaearon,2015-12-22 12:42:52
224,2015-12-21 22:54:06,"Note: this shouldn't affect anything other than hot reloading because normally `forceUpdate()` can only be called by component itself, and this is where the bug is. However we can't rely on React always calling `shouldComponentUpdate()` in the future in all cases so we better fix this before this breaks any real cases.
",gaearon,2015-12-22 12:42:52
224,2015-12-22 12:47:03,"Fixed in 4.0.3, thank you again very much for reporting.
It involved an important rewrite and the lib just got better. ;-)
",gaearon,2015-12-22 12:42:52
224,2015-12-22 21:07:01,"Confirmed this works on my project as well.  Thanks for fixing this so quickly!
",bunkat,2015-12-22 12:42:52
223,2015-12-21 21:12:37,"Not strictly an issue, but SO is silent on the matter.

I use [JSPM](http://jspm.io) instead of WebPack, and recently wired up the [capaj/systemjs-hot-reloader](https://github.com/capaj/systemjs-hot-reloader) module. However when my components are reloaded I get the `<Provider> does not support changing 'store' on the fly.` error message.

It looks like I need to undertake additional steps to get it goin...
Any suggestions?
",vsviridov,2015-12-22 12:48:44
223,2015-12-22 12:48:44,"I don't know about JSPM but you should be careful not to re-evaluate creation of your store. Some hot reloading solutions (Webpack, Browserify HMR) let you control what gets re-evaluated and what doesn't.

If systemjs-hot-reloader always re-executes _everything_ you might be better off keeping your store in a global variable on the window so that it isn't created twice.
",gaearon,2015-12-22 12:48:44
223,2015-12-28 10:34:15,"@vsviridov I had the same situation :D, thanks to @gaearon advice, this works for me

<S_CODE_TOKEN>
",allochi,2015-12-22 12:48:44
223,2015-12-29 00:05:21,"@allochi Thanks. That cleared things up.
",vsviridov,2015-12-22 12:48:44
222,2015-12-18 15:28:04,"Test case for issue https://github.com/rackt/react-redux/issues/210.

I chose to edit the existing test rather than create a new test. The original test case in question looks like it tests dispatching in `componentWillMount`, but it doesn't actually check if the props make it into the component the first time it is rendered. So rather than keep it as it was, I changed it so it now properly tests (and fails).
",jedborovik,2015-12-20 02:17:11
222,2015-12-20 02:17:11,"Closing as wontfix because https://github.com/rackt/react-redux/issues/210#issuecomment-166055644.
",gaearon,2015-12-20 02:17:11
221,2015-12-17 22:40:41,"I am running into an issue where componentWillReceiveProps is being called to early, namely before React Redux has had the opportunity to bind a different function based on the props passed. The previous function is still bound when componentWillReceiveProps is called. Take for example this component:

<S_CODE_TOKEN>

We want to bind a different function to load (based on the userId prop) and a different data to props based on the property provided. Unfortunately when componentWillReceiveProps is called, the old function is still bound to load. This can be ""hacked"" by introducing a setTimeout in your componentWillReceiveProps that makes sure the next component is actually bound. 

I've made a full example of this on jsbin: http://jsbin.com/faqama/edit?html,js,output
",iammerrick,2015-12-19 03:08:30
221,2015-12-18 20:51:41,"I'm guessing this is the result of shallowEqual checking object keys and using the same object keys for different functions? https://github.com/rackt/react-redux/blob/master/src/utils/shallowEqual.js
",iammerrick,2015-12-19 03:08:30
221,2015-12-19 03:08:30,"No, this is correct behavior.

When `componentWillReceiveProps` is executed, `this.props` still points to the old `props`.
However it receives `nextProps` as argument.

<S_CODE_TOKEN>

It's also a good idea to only call the action when IDs change because `componentWillReceiveProps` will be called on _any_ prop change.

<S_CODE_TOKEN>
",gaearon,2015-12-19 03:08:30
221,2015-12-19 03:09:46,"Oh my goodness I feel silly, you are right! Thank you! :-D
",iammerrick,2015-12-19 03:08:30
220,2015-12-16 10:49:32,"For example, when using `export default connect(mainMenuSelector)(MainMenu)` and changing the returned object in `mainMenuSelector`, these changes do not propagate to the React component after hot reloading.

However, when using `export default connect(appState => appState)(MainMenu)` and calling the `mainMenuSelector` from within `render()` with `this.props.appState`, it does work after hot reloading. What explains the difference here? I'm using the new way of hot reloading with https://github.com/gaearon/react-transform-boilerplate
",rybon,2015-12-16 18:43:51
220,2015-12-16 18:43:51,"Please see https://github.com/rackt/react-redux/issues/115.
",gaearon,2015-12-16 18:43:51
220,2016-04-18 14:25:36,"This is fixed in [React Hot Loader 3](https://github.com/gaearon/react-hot-boilerplate/pull/61).
It is built with lessons learned from both React Hot Loader and React Transform.
It’s still in alpha but I encourage you to [check it out](https://github.com/gaearon/react-hot-boilerplate/pull/61)!
",gaearon,2015-12-16 18:43:51
220,2016-04-18 14:37:26,"Awesome, I will check it out! Thanks for all your hard work, I really appreciate it.
",rybon,2015-12-16 18:43:51
219,2015-12-15 09:01:00,"Great docs btw!

![react-redux 2015-12-15 09-07-25](https://cloud.githubusercontent.com/assets/697301/11806358/b9d6ee2a-a312-11e5-9dc6-96504fb27f23.png)
",Strajk,2015-12-15 15:14:36
219,2015-12-15 15:14:34,"Thanks for the diff screenshot. :+1:
",gaearon,2015-12-15 15:14:36
218,2015-12-15 06:01:38,"I ran across a couple issues in the latest version of RN when trying to use react-redux.  These were the errors:

<S_CODE_TOKEN>

For now I was able to get around it by cloning the src dir.  I did have to change one ES7 bind operator in `src/components/connect.js:163`.  I'm not sure if it's worth looking into for now, since I hear a lot of awesome changes are coming down the line for RN and it's React dependency ;)

Figured it might help in case anyone else was having the issue!

Also, I was thinking about submitting a pull request, but ran into some issues.  Namely, the `invariant` package doesn't seem to be a dependency, and one of the tests was failing on a fresh copy of `3.x`:

<S_CODE_TOKEN>

Were those expected?
",bendyorke,2015-12-15 15:17:45
218,2015-12-15 15:17:45,"I'm afraid you need to bring this up with React Native.
We shipped 3.1.2 which doesn't have `.babelrc` (pretty much what your error message says).
If RN assumes every NPM package has a `.babelrc`, it's RN's issue.

I'm happy to reopen and fix if it's us doing something wrong, but right now I don't see anything actionable here.
",gaearon,2015-12-15 15:17:45
217,2015-12-13 09:19:51,"When transitioning, my previous route rerenders twice before the new route is shown on the screen. When looking at the props in `shouldComponentUpdate` I cannot find where the difference is in my props.

Here is my component's connect:

<S_CODE_TOKEN>

And a transitionMiddleware:

<S_CODE_TOKEN>

Any thoughts? Should I just be doing my own comparison on shouldComponentUpdate? 
",mmahalwy,2015-12-13 20:48:34
217,2015-12-13 20:48:34,"If you believe this is an actual issue with React Redux please provide a reproducible test case.
Otherwise, this question is a better fit for a Q&A site like StackOverflow.
",gaearon,2015-12-13 20:48:34
217,2015-12-13 22:10:14,"@mmahalwy try to get rid of `.map()` in `mapStateToProps`, as it creates new array each time `mapStateToProps` called (move it into `mergeProps`).
",alexkuz,2015-12-13 20:48:34
217,2015-12-14 03:37:22,"@alexkuz interesting suggestion. I guess i am struggling with the difference or their different purposes?
",mmahalwy,2015-12-13 20:48:34
217,2015-12-14 08:49:26,"I think you might want to look at https://github.com/rackt/reselect.
",gaearon,2015-12-13 20:48:34
217,2015-12-14 09:53:31,"@mmahalwy yeah,`stateProps` are never shallow equal because of that.
You don't have to use `reselect` though, this should be enough:

<S_CODE_TOKEN>
",alexkuz,2015-12-13 20:48:34
217,2015-12-15 20:32:05,"@alexkuz awesome example, i am going to write it up now and get back to you on it EOD 

thanks!
",mmahalwy,2015-12-13 20:48:34
217,2015-12-18 05:42:55,"@alexkuz just to update you, i changed things to look like this:

<S_CODE_TOKEN>

I am not super content with it and perhaps will visit reselect as @gaearon suggested. What I found is that the router state changes, and that creates many problems with the merge state as the component is still rendered and fails given the params have changed. I found the best solution was using react router's params being passed as props. But i may look to use reselect to clean this up more.
",mmahalwy,2015-12-13 20:48:34
216,2015-12-12 19:08:35,"975a9030a880a2e59f7843ed54134ee840f87ce9 broke the import, it should still ship with native.js to keep the same imports as before.

Thanks!
",janicduplessis,2015-12-12 19:39:03
216,2015-12-12 19:31:11,"Oh snap, you're right.
",gaearon,2015-12-12 19:39:03
216,2015-12-12 19:37:36,"Should be fixed in 3.1.2. Can you verify?
",gaearon,2015-12-12 19:39:03
216,2015-12-12 20:00:34,"Yes it's working now, thanks!
",janicduplessis,2015-12-12 19:39:03
215,2015-12-12 11:20:48,"You can see a working example of this bug here: https://github.com/ohkaiby/webpack-reactredux-hotreload-bug

Basically `store.replaceReducer()` is passing in a babel6-transpiled reducer function, which is an object whose `default` property is the actual reducer function. However, `replaceReducer` (inside `createStore.js`) is expecting to run a function, so it ends up error'ing.

The problem is, I'm not sure whether this is a bug with Babel 6, babel-loader, or React-Redux. It seems that Babel is correctly transpiling local dependencies, but this results in an error where untranspiled ES5 code in React-Redux expecting to run a function. Therefore the real bug is with how Babel6-transpiled functions are passed vs. what untranspiled code is expecting to run.
",ohkaiby,2015-12-12 20:04:59
215,2015-12-12 11:29:20,"Hi @ohkaiby, thanks for the report (and creating a working example :+1:). I am looking at babel 6 stuff this weekend so hopefully we can get this resolved too.
",ellbee,2015-12-12 20:04:59
215,2015-12-12 20:04:59,"Just change

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

which matches the new semantics of Babel 6.
",gaearon,2015-12-12 20:04:59
215,2015-12-12 20:05:59,"This was the breaking change in Babel 6: removing backward compatibility with CommonJS for default exports. They are now explicit and ES6-centric rather than trying-to-be-like-CommonJS-but-not-quite.
",gaearon,2015-12-12 20:04:59
215,2015-12-13 02:20:10,"Or you can use this to support CommonJS default exports: https://github.com/59naga/babel-plugin-add-module-exports
",chentsulin,2015-12-12 20:04:59
215,2015-12-14 00:55:14,"Thanks guys, did not realize the ES6 update broke CommonJS compatability. `babel-plugin-add-module-exports` ended up working.
",ohkaiby,2015-12-12 20:04:59
215,2015-12-14 09:02:24,"> Thanks guys, did not realize the ES6 update broke CommonJS compatability.

It just changes semantics to match ES6 more closely. If you only develop an app (and not a library) just use `require(...).default` (or better ES6 :-) and don't worry.
",gaearon,2015-12-12 20:04:59
215,2016-02-11 18:14:37,"<S_CODE_TOKEN>

Is this bit required at all when using webpack HMR? I cannot find the documentation for it or how it ended up in my code. Removing it does not appear to have effect either.
",gajus,2015-12-12 20:04:59
215,2016-02-11 18:19:35,"I can see it is required. HMR of reducers does not work without. I still cannot find the official docs reference.
",gajus,2015-12-12 20:04:59
215,2016-02-11 18:27:43,"@gajus The documentation is unfortunately not in the README, it is in one of the release notes for Redux: https://github.com/rackt/redux/releases/tag/v2.0.0
",ohkaiby,2015-12-12 20:04:59
215,2016-02-11 18:29:39,"Thank you @ohkaiby 
",gajus,2015-12-12 20:04:59
215,2016-02-11 19:06:26,"> I can see it is required. HMR of reducers does not work without. I still cannot find the official docs reference.

This library is React Redux. It has no relation to HMR, especially for reducers. Therefore there is no reason why this information would be in README.
",gaearon,2015-12-12 20:04:59
215,2016-02-11 19:10:03,"Sorry, @gaearon. Wrong thread to discuss the issue. Though I think @ohkaiby was talking about Redux documentation.

I couldn't find anything searching ""site:rackt.org HMR"", which would be useful. I came across this issue searching for ""store.replaceReducer"".
",gajus,2015-12-12 20:04:59
215,2016-02-11 20:31:10,"Yeah, we don’t really have docs for HMR at the moment. It would be nice to add as a “recipe”, contributions to docs are always welcome! https://github.com/rackt/redux/issues/721
",gaearon,2015-12-12 20:04:59
214,2015-12-12 00:11:10,"I have a sample [app on rnplay](https://rnplay.org/apps/SSfloA) and I cannot reach my store inside a component connected to my redux store by `connect()` via `this.props`.

on line 320, I have created my redux store with a mock trivial reducer and an an initial state like:
`
var store = createStore(reducer, {splashViewedCount: 0, loggedIn: false,}); 
`
On line 308, I had then connected my component named `App` to it by `connect()` with a trivial selector:
`
function select(state){
    return state;
};
`
`
connect(select)(App); 
`
On line 261,  I cannot have the state inside my store from inside my component `App` via `this.props`:
`
const {splashViewedCount, loggedIn,} = this.props;
`
and in subsequent lines of conditional code.
On line 281, For debug purposes, I have put those in a component to be rendered when news1 or news2 is clicked. In the coming rendered screen I have only the state from `store.getState()` (it is `{splashViewedCount: 0, loggedIn: false,}` ), but not from `this.props` (it is `{}`).

Is there something I just mix?
",isikfsc,2015-12-14 03:56:10
214,2015-12-14 03:56:10,"This problem was solved. Thanks to the friend form the discord reactiflux.
What I was forgetting o is to get, by assigning, the new connected version of my component by `connect()`. As docs says it returns a connected version of the class you pass to it.
not only call it, which I was doing:
`connect(select)(App)`
But also get the connected version of the component:
`var App = connect(select)(App)`
",isikfsc,2015-12-14 03:56:10
213,2015-12-11 14:42:25,"Copying the approach in https://github.com/rackt/redux/pull/1039. Need to get rid of the `.babelrc` file for React Native 0.16.0
",pietropizzi,2015-12-12 17:49:13
213,2015-12-11 14:43:22,"Just saw https://github.com/rackt/react-redux/pull/212. But I guess this still does not hurt
",pietropizzi,2015-12-12 17:49:13
212,2015-12-08 10:23:12,"Refs #206 
",martincik,2015-12-12 17:49:08
212,2015-12-12 15:43:50,"+1
",satazor,2015-12-12 17:49:08
212,2015-12-12 18:04:50,"@gaearon Do we want loose mode for IE8? React-Redux previously used it but this PR does not.
",ellbee,2015-12-12 17:49:08
212,2015-12-12 18:05:55,"How is loose mode related to IE8? I thought it was about improving perf.
",gaearon,2015-12-12 17:49:08
212,2015-12-12 18:06:22,"Either way I'd prefer adding loose mode back :-). I don't know how to do it though.
",gaearon,2015-12-12 17:49:08
212,2015-12-12 18:12:23,"When not in loose mode Babel uses Object.defineProperty. You are right about the perf too though.

There is a preset for loose mode. The Babel 6 PR in redux has it.
",ellbee,2015-12-12 17:49:08
212,2015-12-12 18:17:44,"Can you please fix it here?
",gaearon,2015-12-12 17:49:08
212,2015-12-12 18:19:50,"Yep, give me a minute.
",ellbee,2015-12-12 17:49:08
212,2015-12-12 19:05:59,"@ellbee Any other work there, or can I release 4.0.1 that doesn't have `.babelrc`?
",gaearon,2015-12-12 17:49:08
212,2015-12-12 19:08:09,"@gaearon Go for it.
",ellbee,2015-12-12 17:49:08
212,2015-12-12 19:30:06,"Out with 4.0.1 :+1:
",gaearon,2015-12-12 17:49:08
211,2015-12-07 15:55:09,"Since `mapDispatchToProps` can expose the `dispatch` method, it means it has access to the store. I was wondering why it didn't also expose, at least, the `getState` method?

Just like `redux-thunk`, you might need to access the current state to decide which action to actually dispatch regarding client side cache.

I'm fine with doing a PR but wanted to check if it would be valid. Also, if accepted, I would rather have `[mapDispatchToProps(dispatch, [getState], [ownProps]): dispatchProps]` signature, but it would be a breaking change compared to `[mapDispatchToProps(dispatch, [ownProps], [getState]): dispatchProps]`
",pauldijou,2015-12-14 14:25:41
211,2015-12-14 09:41:28,"What you're asking for seems to be achieved through the `mergeProps()` function passed to `connect()`.

See [last example](https://github.com/rackt/react-redux/blob/master/docs/api.md#inject-todos-of-a-specific-user-depending-on-props-and-inject-propsuserid-into-the-action) of the react-redux API doc.
",cbenz,2015-12-14 14:25:41
211,2015-12-14 14:25:41,"Yes, I agree this seems covered by `mergeProps`.
",gaearon,2015-12-14 14:25:41
211,2015-12-14 14:57:38,"Not 100% unfortunately. What I'm trying to do it something like that:

<S_CODE_TOKEN>

The problem is that the helper know on its own how to read the current state and which action to dispatch. So I would need to bind the whole state to a prop in order to expose it inside `stateProps` and access it inside `mergeProps`. That doesn't sound too good. I would also need to change the function signature but that's ok

<S_CODE_TOKEN>

I could do a selector exposed by the helper to only assign the minimum possible substate needed for the helper, but still, I would assign to the component props something not needed at all, just a ""hack"" to make it available in the `mergeProps` function.

On top of that, but that might be bad practice, not sure about it, I was thinking about replacing the actual `state` in the helper signature by the `getState` function itself. That's because the `someAction` function is eventually called when the user click on a button. Meaning that I need to render the component each time the ""helper state"" is modified to keep `someAction` in sync. But by passing the `getState` function itself, I could squeeze all those renders and, only when the function is actually called, the helper would read the state and dispatch the correct action.
",pauldijou,2015-12-14 14:25:41
211,2016-02-19 12:52:35,"Have you looked at [Redux Thunk](https://github.com/gaearon/redux-thunk)?

It lets you write stuff like

<S_CODE_TOKEN>
",gaearon,2015-12-14 14:25:41
211,2017-03-08 22:47:59,"This is still not solved, but it could easily be just by changing one line of code, adding state or getState to mapDispatchToProps. 
I would like to use it to provide functions dynamically to the component based on the state. 
Please consider doing this change since it is very simple and adds a lot of functionality. 
It may be possible that doing so could encourage bad practices. If it is the case, could you please provide some example as well as a right way to achieve what I and the OP are try to achieve? 
Thanks in advance  ",biels,2015-12-14 14:25:41
211,2017-03-08 23:17:43,"@biels : per the prior discussion, if you _really_ need to handle things that way, the ""approved"" method is to provide the third argument to connect, a `mergeProps` function, and handle it yourself there.",markerikson,2015-12-14 14:25:41
211,2017-03-08 23:24:21,"Yes, i took a look at this way of doing it. The problem os that this forces me to expose props that I don't really need. It feels hacky as someone stated earlier. 
Could you please explain why isn't the state accessible from mapDispatchToProps? There has to be a reason other than ""there is already a hacky workaround for it"" am I wrong? Cheers ",biels,2015-12-14 14:25:41
211,2017-03-08 23:41:53,"I don't have time at the moment to dig through other issues where this has come up, but it's basically not the intended use case.  `connect` focuses on the use case where your component will be extracting varying data from the store, and using a fixed set of callbacks or action creators.  If you need to actually customize that process, `mergeProps` is available.

Can you give an example of what ""providing functions dynamically"" would look like?  Is there any reason why you can't, say, pass an object full of functions into the connected component as a prop, and determine which one to call _inside_ the component?",markerikson,2015-12-14 14:25:41
211,2017-03-08 23:50:14,"`mapDispatchToProps` will never be dependent on state, because doing so would mean it would get invoked every time the store state changes, creating new functions each time, causing the component to rerender every time. `mapDispatchToProps` already does a lot of logic to minimize this when props change, which is bad enough. I personally never even use the version that accepts props, to avoid unnecessary rerenders. You're a million bajillion times better off exposing a few props you don't really need than generating new functions and renders on every state change.",jimbolla,2015-12-14 14:25:41
211,2017-03-08 23:58:10,"Good points, Jim.

My own advice would be to move all this conditional logic outside the component into thunks, per Dan's comment earlier.  Set up the component using the object shorthand for action creators ( like `connect(null, {doSomeThings})(MyComponent)`), have the component always call `this.props.doSomeThings(a, b, c)`, and let the thunk figure out what the right operations are from there.",markerikson,2015-12-14 14:25:41
211,2017-03-09 00:04:49,"I am working on a hateoas api bound application  and I am trying to standardize the way any resource is presented and managed entirely so I have a reducer creator that provides a custom reducer for every resource view. I call those ActiveViews. Those ActiveViews are saved inside the state branch managed by its reducer. One of the attributes contains the available actions in a specific format. I would like to create a custom connect function like connectActiveView('activeViewName')(Component) which internally calls the react-redux connect function. It would provide the attributes of the resource in mapStateToProps and a function for every defined action in the ActiveView in mapDispatchToProps. A function provided in mapDispatchToProps would dispatch an action that targets the ActiveView's reducer by adding its name into the action's name. 
To do this it is necessary to access the state (in a read-only way) during the mapping process. 
This operation does not belong to mergeProps because it is not a post-processing to the props. It is actually ""mapping dispatch to props"", just with help of the state and therefore to keep things consistent it looks clear to me that it belongs to mapDispatchToProps. 
Please, feel free to ask for any clarification on the use case. If I am successful, I will opensource the project as an addon to redux. Thanks! ",biels,2015-12-14 14:25:41
211,2017-03-09 00:07:28,"Yeah, that's where I think you're heading in the wrong direction a bit.  Don't create a new function just to add an extra field into an action.  Have _one_ thunk that takes the action name as an argument.  Or, for that matter, remember that thunks have access to the application state via `getState`.",markerikson,2015-12-14 14:25:41
211,2017-03-09 00:13:04,"Okay, after posting my explanation I read the two last comments. Hadn't thought about the performance implications. But how is referring to the state on mergeProps any different than doing it on mapDispatchToProps? ",biels,2015-12-14 14:25:41
211,2017-03-09 00:28:43,"I tried to use thunks to achieve it as well. The problem I see with this approach a part from  the less nice api that I will get is the existence is the existence testing. 
Let's suppose an action named fetch can be available. I could do if(this.props.fetch) showFetchButton and then call the action using this.props.fetch(). Actions would be of the type update, delete, accept, cancel... Basically representing buttons on the ui plus basic crud. You can't say that it isn't a nice api to have in a resource oriented application :) . ",biels,2015-12-14 14:25:41
211,2017-03-09 00:36:37,"To be honest, use of `mergeProps` _will_ probably result in the same perf implications that Jim mentioned.  Recreating functions as props is generally a perf anti-pattern in React, no matter whether you're doing it in a parent's `render` method, or in `mapDispatch/mergeProps`.  

I'm about 99% sure that moving the logic out to thunks is the right answer here.  The API _might_ not be quite as ""pretty"" from a correspondence-with-CRUD-ops perspective, but it's going to be a whole lot simpler and more performant.",markerikson,2015-12-14 14:25:41
211,2017-03-09 00:43:39,"Okay, thanks for the explanation and for your time. I will try to use thunks and post the solution when I get it. I hope I am still able to get a reasonably nice api. ",biels,2015-12-14 14:25:41
211,2017-03-09 01:05:18,"Would it be possible to only recreate the functions when the source object for the actions is updated while ignoring any other action? In this way the performance impact would be minuscule and comparable to the overhead an additional thunk would add. 
React is especially good at doing these kinds of things. Would the same be applied to redux? ",biels,2015-12-14 14:25:41
211,2017-03-09 01:47:07,"I suppose you could do it using a memoized selector function:

<S_CODE_TOKEN>",markerikson,2015-12-14 14:25:41
211,2017-03-09 14:44:43,"> But how is referring to the state on mergeProps any different than doing it on mapDispatchToProps.

You'd only be dependent on the slice of state that is relevant instead of the entire state.",jimbolla,2015-12-14 14:25:41
210,2015-12-03 23:47:54,"Do we expect dispatching in `componentWillMount` to take effect before the component is rendered?

For example, this test fails:

<S_CODE_TOKEN>
",jedborovik,2015-12-20 02:16:49
210,2015-12-14 14:29:25,"Would you like to add this test and see if you can fix it?
Might also be related to #196.
",gaearon,2015-12-20 02:16:49
210,2015-12-18 02:16:30,"@jedborovik did you find a solution to this?
Adding something like this to render functions is a bit ugly:
`if (!this.props.xyz) return`
",lsapan,2015-12-20 02:16:49
210,2015-12-18 02:21:43,"As I said in the previous comment it might be related to another bug report. Please help investigate and fix it. 
",gaearon,2015-12-20 02:16:49
210,2015-12-18 02:32:52,"Sorry, I'd taken a look at #196 and from a glance didn't think it was related. This is more an issue of deliberately changing the state after redux has already set the props. In any case, I tried applying #196 locally and the issue still persists.

The react docs mention that if you change a component's state during `componentWillMount`, render will only be called once (with the updated state). With that in mind, I'm guessing the issue is actually that redux is updating the `props`, which react doesn't expect to happen in `componentWillMount`. As such, react goes ahead and calls `render` a second time.

I haven't had time to look into the source for `react-redux` too much, but I'll take a look around. I'm guessing any solution to this may be a bit dirty.
",lsapan,2015-12-20 02:16:49
210,2015-12-18 04:45:15,"@gaearon alright after doing some digging, I found the problem. `connect` doesn't call `trySubscribe` until `componentDidMount`. As such, it doesn't see the dispatch/state change that happens in `componentWillMount`. I'll add a `componentWillMount` and some logic to catch this scenario.
",lsapan,2015-12-20 02:16:49
210,2015-12-18 05:01:34,"Alright I guess I spoke too soon. I'm really not sure how we can work around this problem. I made the mistake of confusing `componentWill/DidMount` on the Connect class with the one on the wrapped class. The problem is that `componentWillMount` and `componentDidMount` will both run on the Connect class before `render` (obviously), but that also means they happen before `componentWillMount` on the wrapped class.

In other words, we can't stop ourselves from calling render the first time because the dispatch hasn't happened yet. I'm at a loss here.

Here's a test case, I didn't want to open a PR for it because I don't have a solution:

<S_CODE_TOKEN>
",lsapan,2015-12-20 02:16:49
210,2015-12-18 12:51:49,"Please do open a PR with a failing case, it makes it easier for others to try to fix it. 
",gaearon,2015-12-20 02:16:49
210,2015-12-18 15:29:03,"Roger that. Just opened PR https://github.com/rackt/react-redux/pull/222.
",jedborovik,2015-12-20 02:16:49
210,2015-12-20 02:16:49,"I looked at it and I think React works as intended here.
By the time `componentWillMount` fires on the child, it is too late to change the props child receives.
Since store dispatch changes child's props, this must happen on the next render.
",gaearon,2015-12-20 02:16:49
210,2016-03-26 17:30:01,"> @jedborovik did you find a solution to this?
> Adding something like this to render functions is a bit ugly:
> if (!this.props.xyz) return

@lsapan: can't do `return` in render, because `Uncaught Invariant Violation: <X>.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.`
",evandrix,2015-12-20 02:16:49
210,2016-03-26 17:37:49,"@evandrix you can return an empty div, I just didn't write it out.
",lsapan,2015-12-20 02:16:49
210,2016-03-30 15:49:41,"`if (!this.props.xyz) ...` doesn't solve all the issues.

We have a component that loads some data in `componentWillMount` by calling an action. The action makes a reducer set a ""loading""-property synchronously (with the default value of true). Inside the render function, we can then do `if (this.props.loading) return <Spinner />`. The action is a thunk that later (async) makes a reducer set loading to false when it has received data. This works.

However, when the component is unmounted and later mounted (for instance going to another page in the react-app and back), this doesn't work as expected. The data is again fetched by an action inside `componentWillMount` and the ""loading""-property in the store is set to true. _But_ in the first `render`, `this.props.loading` is still false, seeing the old value from before the store was updated in `componentWillMount`.  So instead of seeing the spinner, whatever was done when not loading happens for a brief instance, until it's rerendered again, this time with loading set to true as it should have been.

In our case, this has the unwanted side-effect of generating a rather expensive chart for the old data, that is immediately thrown away anyway. How can this be avoided in a nice way when we inside the render function only sees the old store data, not the data being set in willMount?
",Matsemann,2015-12-20 02:16:49
210,2016-03-31 05:10:38,"Use a higher order component to dispatch the action and to not render the child component until the required props are present.
",kristian-puccio,2015-12-20 02:16:49
210,2016-03-31 07:19:50,"Don't think that will work? As stated, this is an issue the second time the component is mounted, as the old data is still present. So the props are there for a brief moment, just with the old values, so checking that they are present wont solve it.
",Matsemann,2015-12-20 02:16:49
210,2016-03-31 11:59:49,"You check for the presence of the required props in a higher order component. And that component that wraps the component that cares about certain props is prevented from rendering by doing a return <div /> in the higher order component.

This sort of talks about what I'm trying to say http://natpryce.com/articles/000814.html
",kristian-puccio,2015-12-20 02:16:49
210,2016-03-31 12:08:37,"But that higher order component will still see the wrong data, and thus not really know if to render the wrapped component or not.
We actually have a component similar to the one you link. The problem is that when it uses redux instead of setState, data set in a store in componentWillMount is not present in render.
",Matsemann,2015-12-20 02:16:49
210,2016-03-31 12:16:33,"Correct you just need to render something else in the HOC until the correct
props arrive. The HOC shouldn't care if it has the props that the inner
component require.

On 31 March 2016 at 23:08, Mats Krüger Svensson notifications@github.com
wrote:

> But that higher order component will still see the wrong data, and thus
> not really know if to render the wrapped component or not.
> We actually have a component similar to the one you link. The problem is
> that when it uses redux instead of setState, data set in a store in
> componentWillMount is not present in render.
> 
> —
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub
> https://github.com/reactjs/react-redux/issues/210#issuecomment-203902337
",kristian-puccio,2015-12-20 02:16:49
210,2016-04-19 22:06:37,"@gaearon would something like Alt.js `componentDidConnect` be applicable to `react-redux`? This seems like a valid case that would be nice to have support for. 

https://github.com/altjs/connect-to-stores/issues/6

https://github.com/altjs/utils/blob/master/src/connectToStores.js#L80-L88
",chrishoage,2015-12-20 02:16:49
210,2016-04-19 22:37:49,"1) Adding custom lifecycle hooks isn’t a great API moving forward as React is trying to get away from classes. This wouldn’t work for functional stateless components or (future) functional stateful components.
2) I’m not sure what use case this would solve? The changes will be “picked up” in any case, it’s just that they will get picked up on the next render. If not, please submit a failing test case.
",gaearon,2015-12-20 02:16:49
210,2016-04-20 05:03:24,"That is a good point. 

After more thought, the cases I was thinking of could be solved with firing actions in React Router event handlers. 

Thanks for explaining! 
",chrishoage,2015-12-20 02:16:49
210,2016-05-24 10:37:40,"@chrishoage Did you manage to dispatch actions in the `react-router` event handlers and use the changed data in the component? I'm getting the same results as I would when dispatching in `componentWillMount`.

@gaearon I'm having the issue where I need the changes in my first render because it being on the server side and if it would be picked up later it causes my server side rendered HTML would differ from the HTML on the client. So the changes being ""picked up"" on the next render is not good enough, or am I overseeing a solution to this?
",yn5,2015-12-20 02:16:49
210,2016-05-24 11:14:29,"> @gaearon I'm having the issue where I need the changes in my first render because it being on the server side and if it would be picked up later it causes my server side rendered HTML would differ from the HTML on the client.

Usually the solution is to _hydrate data first_ and then render. So rather than render in a lifecycle hook, you would get the matched components from the router, call a static method on them which dispatches an action, and wait for the promise to resolve. Does this make sense? https://github.com/markdalgleish/redial is one way of doing it.
",gaearon,2015-12-20 02:16:49
210,2016-05-24 11:32:12,"> Usually the solution is to hydrate data first and then render. So rather than render in a lifecycle hook, you would get the matched components from the router, call a static method on them which dispatches an action, and wait for the promise to resolve. Does this make sense? https://github.com/markdalgleish/redial is one way of doing it.

Thanks for your response @gaearon! I do hydrate my store before rendering. If I understand correctly that is not the problem. To be a little more specific:
I have a parameter to specify the language in the url. I would like to call an action to set the language with that value and use the newly `selectedLanguage` from the store in my component on the first render in order to render the app with the correct language. So what I tried first is calling the action `setLanguage` in the `componentWillMount` of the highest order component and came to understand the props (which are connected to the redux state_ can not be updated before the component renders. So I went with @chrishoage's suggestion to dispatch the `selectLanguage` action inside the onEnter hook of my highest order route but throughout the first render of the component this newly `selectedLanguage` does not get picked up. 
",yn5,2015-12-20 02:16:49
210,2016-05-24 11:48:32,"> I have a parameter to specify the language in the url. I would like to call an action to set the language with that value and use the newly selectedLanguage from the store in my component on the first render in order to render the app with the correct language. 

I think the problem is you’re effectively duplicating the data between the store and the router. Why not just use the router params for this? Is there any particular reason you prefer it coming from the store?
",gaearon,2015-12-20 02:16:49
210,2016-05-24 11:53:48,"> I think the problem is you’re effectively duplicating the data between the store and the router. Why not just use the router params for this? Is there any particular reason you prefer it coming from the store?

Since there are other ways to change the language than just with the URL I would have to then have to duplicate the state between the store and the router if I understand correctly.

Edit: I think you're right though, I should not try to do this with redux, I'll try to only use the params only. Thanks a lot for your help @gaearon.
",yn5,2015-12-20 02:16:49
210,2016-05-24 17:58:36,"> Since there are other ways to change the language than just with the URL I would have to then have to duplicate the state between the store and the router if I understand correctly.

You would want to change URL anyway, at which point it’s easier to treat router as the source of truth for the  URL.
",gaearon,2015-12-20 02:16:49
210,2016-06-17 08:27:31,"@gaearon I have sync action which fill up data in store while dispatching action using higher order component `componentWillMount` , but I am facing issue that the values are not defined with the WrappedComponent on the server side rendering. But client side it renders two times and it works. Am I doing something wrong ?

<S_CODE_TOKEN>
",mihirsoni,2015-12-20 02:16:49
210,2016-07-21 16:57:58,"For the curious, I encountered this problem and ended up doing this:

<S_CODE_TOKEN>

I'm not superfan of this solution but that's the best I could pull off...
",Strato,2015-12-20 02:16:49
210,2016-07-30 15:53:07,"Any new recommendations how to deal with this situation? This is a real pain in the ass... I'm dispatching an action from `componentWillMount` that changes `isFetching` to true, but this doesn't get picked up by the `render()` method... I'm using react-router, so the `componentWillMount` is ideally the best option to change the application state when entering a new page (or using the onEnter hook). I ended up using @Strato's suggestion, but this seems like a hacky solution...
",rafaeltikva,2015-12-20 02:16:49
210,2016-08-24 07:17:04,"I like to know if there is an update on this as well
",chriswu14,2015-12-20 02:16:49
210,2016-08-24 11:43:59,"There's a passing test in connect.spec.js that says this should work: 'should handle dispatches before componentDidMount'.  Please provide a failing test if it's not working for your use case.
",jimbolla,2015-12-20 02:16:49
210,2016-08-24 11:57:53,"@jimbolla a case was provided as a PR further up, #222. The test in the top as well should be good enough to understand the issue. The current test is basically wrong, it doesn't assert what it's supposed to do. 

However, this was closed as working as intended. I'd argue it's not as intended, just a weakness in how connect works and more of a wont-fix.
",Matsemann,2015-12-20 02:16:49
210,2016-09-04 10:33:17,"I'm also looking for a good solution to this problem. I have a component that dispatches an action (to fetch data from an API) in its `componentWillMount` which will update a slice of my state to set `isLoading: true`. The initial state for this slice is `{isLoading: false, data: []}`, which means that a component I `connect` to this state will initially render with the value of `isLoading` being `false`, then a brief moment later the state is updated as a result of the dispatched action and the component will render again, this time with the value of `isLoading` being `true`. And of course, shortly after this a success/failure action will be dispatched that sets `isLoading: false` and triggers another render.

The issue this causes is that in the component I `connect` to this state, I can't do the following:

<S_CODE_TOKEN>

The intention here is of course to render `<Spinner/>` until we have received the response from the API, and then to render `<Message/>` or `<SomeComponent/>` based on the response. But on the first render `isLoading` will actually be `false` so `<Message/>` will be rendered for a brief moment, then `<Spinner/>` for 1-2 seconds, and then finally the correct component based on the API response.

Anyone have a solution to get the intended behaviour here without having to do hacky 'first render' checks such as @Strato's solution?
",jordanmkoncz,2015-12-20 02:16:49
210,2016-09-05 15:44:03,"@jordanmkoncz 

At a high level, I believe the issue is you're trying to squish 3 distinct states into only 2.

Here are your three states:
1. don't have data
2. fetching data
3. have data (even if it's empty data)

You _cannot_ adequately represent this as 2 states:
1. fetching data
2. have data

This issue is intrinsic to fetching initial data asynchronously; it's not specific to redux or react.  There is no escaping it, although it's _feasible_ to build abstractions around components and data fetching so you can hide these details from individual components.

One way to handle this for an individual component is to introduce another boolean in your state slice like `haveFetchedData` that is initialized as `false` and set to `true` once you have receive data.

Another way is to use `null` as your initial value for `data`, and change it to an array (including an empty one) once you have received data.

Your component can display the spinner until `haveFetchedData` is true or until `data` is not `null`.
",naw,2015-12-20 02:16:49
210,2016-09-05 15:49:20,"@jordanmkoncz 

Also, depending on your exact needs, the simplest change to get the correct spinner behavior is to make the initialState for `isLoading` be `true`, even though you haven't actually started fetching yet.  This will result in correct spinner behavior, at the risk of not being able to dinstinguish between ""not fetching yet"" and ""currently fetching"".

Or, for more clarity, you could rename `isLoading` to `notFetchedOrIsLoading` and set its initial value to `true`.
",naw,2015-12-20 02:16:49
210,2016-09-06 00:56:02,"@naw At one point I was actually trying to solve this using one of those suggestions; for every `isFetching` (initialised as `false`) I also had an `isFetched` (initialised as `false`), and then in `mapStateToProps` I'd have logic like `const isLoading = isFetching || !isFetched;` and pass this `isLoading` variable to my component in order to get the behaviour I wanted in the component.

However I ran into an issue with this solution as well - it works when rendering a component for the first time, but if I switch to a different component (e.g. via route change) and then back again, the `isLoading` logic will not have the same effect, because when the component is rendered `isFetching` will be `false` but `isFetched` will actually be `true`, which will cause the same issue as before except instead of empty data being rendered for a brief moment, the old data from the previous call is what will be rendered for a brief moment. This problem would also happen with your solution to initally set `data` to `null`.
",jordanmkoncz,2015-12-20 02:16:49
210,2016-09-06 17:26:37,"@jordanmkoncz 

Yes, the issue you point out is certainly a very real issue, and one that I've experienced myself.

There are various challenges that arise when you build a single page application using a store that persists across different URL's.  In a traditional server-rendered application, every time you land on a new URL, all of your data is thrown away and fetched from scratch synchronously, and then passed to your template.  You don't have to worry about a template getting the wrong data from an old URL

In a single page application with a store (i.e. redux/react with react-router), all of your data is just sitting there, and nothing automatically marks it as ""stale"" when you visit a new URL.  There might be abstractions you can build on top of redux/react that will help with this, but vanilla redux/react doesn't solve this problem for you.

Suppose you have a `<BlogPost>` component that displays the content of a blog post, based on an ID in the URL (e.g. `example.com/blog/5` and `example.com/blog/27`).  If you have a slice in your redux store responsible for holding the ""current"" blog post content, merely having `isFetched` and `isFetching` booleans _will be inadequate_ just as you said.

The solution to this problem is similar to the solution I mentioned previously ---- you need to identify all of the distinct states you might find yourself in, and make sure your store slice has adequate information to help you distinguish these states, or at least distinguish the ones that matter (i.e. should I show a spinner or not). You actually have 4 distinct states:
1. data not fetched
2. data fetched, but data is for the _wrong_ blog post id
3. fetching data
4. fetched data, and data is for the _correct_ blog post id

One way to implement this is adding a `blogPostId` field to your store slice:

<S_CODE_TOKEN>

Then, if your component connects to this slice and sees that the `blogPostId` (5) is _different_ than the `blogPostId` provided in the URL (27, via react-router params), it knows to display the spinner.  Once the fetch for post 27 is received, you update the slice, and the component re-renders without the spinner since the ids match.

Another way to organize your state is to have a slice that holds all fetched blog posts in a hash by id.  Your component knows the desired blog post id (e.g. from react-router params), and reaches into that slice to find the correct blog post --- if the key for that id is missing, you display the spinner and wait for the correct blog post to be received.

There really is no getting around this, unless you use a higher-level abstraction on top of react/redux.  Personally I'm still brainstorming on building such an abstraction for my own projects.  Until then, I believe the aforementioned techniques are adequate, albeit a little painful.  The reality is that redux is a low-level tool, not a high-level tool, so you have to do more from scratch unless you're using other tools on top of it.  

Finally, just a a warning in case you haven't run into this yet -- if you're using react-router and link directly from blog post 5 to blog post 27, the `<BlogPost>` component does not get re-mounted (i.e. `componentDidMount` is _not_ called), so if you're fetching data for a component _only_ in `componentDidMount`, you probably need to consider also fetching in `componentWillReceiveProps`. This is just a ramification of how react-router and react work.

You have some great questions, and I'm just responding because I've run into the same issues and spent a lot of time thinking about it.    **If anyone knows of a simpler way to solve this with vanilla redux, I'd be interesting in hearing it.**
",naw,2015-12-20 02:16:49
210,2016-09-06 17:34:28,"@naw : this deserves to be turned into a blog post of its own, really.  We could use more publicly available info on how to think in terms of app state.
",markerikson,2015-12-20 02:16:49
210,2016-09-06 17:52:31,"@jordanmkoncz Yeah we faced the same problem, as written far up here somewhere. One can make it work for the first render, but that only postpones the problem to when the component is hidden and shown again. It becomes a lot of boilerplate and pit falls to make sure a simple spinner can be shown.

@naw, great post

> At a high level, I believe the issue is you're trying to squish 3 distinct states into only 2.

I disagree with this. The code declares an invariant that should hold, but then Redux goes ahead and breaks it.

> This issue is intrinsic to fetching initial data asynchronously; it's not specific to redux or react.

and 

> There really is no getting around this, unless you use a higher-level abstraction on top of react/redux.

It's specific to Redux. If one had used setState from React instead of dispatching an action in componentWillMount, the correct props would be available on first render. This is a promise made in React's API, so no wonder people get confused when this doesn't prove to be true when switching state handling to Redux.
",Matsemann,2015-12-20 02:16:49
210,2016-09-06 18:23:07,"@Matsemann : Not sure what ""invariant"" you're referring to.  I also don't see this as anything specific to Redux.  It looks like this applies to _any_ use of the ""container component"" pattern, where a presentational component is asking a parent component to fetch data.  That means that the data is coming in via props instead of being applied internally via `setState`.  Really, the ""odd"" part about this is that React tries to optimize the ""`setState` during `componentWillMount`"" case.  Otherwise, you'd expect that to cause a second render as well.
",markerikson,2015-12-20 02:16:49
210,2016-09-06 22:15:10,"@Matsemann Yes, I think you make a great point!    

You are correct that the React API for `componentWillMount` specifies that state changes will take place before the first render.  It's easy to expect a synchronous dispatch to a Redux store from within `componentWillMount` to behave the same way.

I agree this is confusing, and I think it's worth discussing how (or if) its feasible to improve it.

**To be clear, this is not a Redux issue, it's a ramification of how the `react-redux` bindings are implemented**. 

As @markerikson  said, `react-redux` pushes everything from the store down to connected components via `props`.  This means at the time of mounting, the props have already been pushed down, and there is no way for the component to intercept those props with an immediate state change like you can do with `setState`.

Back to the `isFetching` stuff: I hope you can agree that there _are_ three distinct states --- the question is which of those states `render` needs to be capable of handling?  In vanilla React, you can _ensure_ that `render` never ""sees"" one of those states, by running your `setState({ isFetching: true})` in `componentWillMount` (I believe this is the invariant that @Matsemann is talking about).

The problem in `react-redux` is there is no way _from within the component itself_ to change props; by the time you're inside `componentWillMount`, it's too late.

As far as I know, there are only three ways to remedy this issue:
1. Modify `react-redux` to subscribe to the Redux store from within your component (rather than from within a wrapper around your component). This likely has many ramifications that could lead to different problems, although perhaps it's worth exploring.
2. Modify your application so that your component never sees certain states (i.e. find a different way to ensure that `{ isFetching: true}` is the first state seen by your component).   Ultimately this means putting your fetch dispatch somewhere _outside_ of your component (personally, this is what I do)
3. Modify your application so that `render`  can handle all 3 states (which is what[ I proposed earlier](https://github.com/reactjs/react-redux/issues/210#issuecomment-244774674) to @jordanmkoncz ).

Ultimately (and perhaps unfortunately), it's not as simple as blindly swapping out `setState` for `dispatch`. 

I agree with @markerikson that this is intrinsic to a parent-child props relationship.  However, a potential problem is that **it's not conceptually obvious that `react-redux` _is using_ such a relationship in its implementation of `connect`.**

In other words, we are not encouraged to think of connected components as presentational ""children"" receiving props from a connected wrapper --- instead, we tend to think of the component being connected and the resulting decorated component as one-and-the-same. At least, that's my _perception_.  It's pretty common to see connected components that have data fetching inside of them, which _can_ lead to problems.

Perhaps `react-redux` or Redux needs to clearly delineate suggestions for how you might need to modify your application to handle these subtleties?

One conceptual way to handle these subtleties is to treat your components as _presentation only_ as @markerikson suggested. In other words, force yourself to think of your components as simply receiving state with no ability to change state (as opposed to what you might traditionally do in `componentWillMount`)

Personally I take _presentation only_ to an extreme -- I use a modified version of `connect` that accepts a `componentWillMount` argument that runs in the context of the connected wrapper instead of the underlying wrapped component.  This means the component knows nothing about fetching data. It also means that my `dispatch` occurs _before_ my component is mounted, which means **I actually get the behavior you desire** (i.e. my `render` function _doesn't_ have to deal with the ""not fetching yet"" state).  However, this is not a simple library tweak we could code into `react-redux` -- it's a fundamental shift in how I (or you) think about components.

**TL;DR**

In vanilla React, components are meant to be a mix of state management and presentation.

In vanilla Redux, if you try to mix state management and presentation, you _can_ run into non-obvious problems.

**Ultimately, the switch from `state` to `props` is subtle, but significant**, and you cannot blindly change `setState` to `dispatch`.

Perhaps `react-redux` docs could do a better job at helping people navigate these subtleties?

Perhaps `react-redux` could be rewritten to use `state` instead of `props`? (various difficulties in doing that, I believe).

I appreciate the discussion and would welcome your thoughts.
",naw,2015-12-20 02:16:49
210,2016-09-06 22:47:44,"> In other words, we are not encouraged to think of connected components as presentational ""children"" receiving props from a connected wrapper --- instead, we tend to think of the component being connected and the resulting decorated component as one-and-the-same. At least, that's my perception.

Hmm.  That's _exactly_ how I view things - wrapper container and presentational component.  Admittedly, I'm a really bad example case - I'm obviously intimately familiar with how `connect` is implemented (at least at the conceptual level, and partially at the implementation level), and my own app doesn't do any component-driven fetching anyway.  But yeah, it seems pretty straightforward to me that if you do some kind of data fetching in `componentWillMount`, that will effectively always render twice: once without the data, and a second time when that data comes back.  React's optimization for the `setState` case is almost confusing here, especially given that `setState` is _usually_ asynchronous.

>  However, a potential problem is that it's not conceptually obvious that react-redux is using such a relationship in its implementation of connect.

I love the simplified version of `connect` that Dan wrote to clarify the conceptual behavior: https://gist.github.com/gaearon/1d19088790e70ac32ea636c025ba424e .  Beyond that, I'd have to read through the docs and various other articles to see how well the ""wrapper"" aspect is emphasized.
",markerikson,2015-12-20 02:16:49
210,2016-09-07 00:25:23,"Thanks for your perspective and also the link, @markerikson 

For context, let me explain my personal philosophy (just an opinion):

I believe a truly presentational component should:
1. Never fetch data
2. Never use `dispatch`

A presentational component receives props. Those props are generally either a piece of data to render, or a function to call when something interesting (like a click) happens.  These pieces of data generally are slices of Redux state, or at least _derived_ from Redux state.  The functions are often bound-action-creators.  (I know you know this, @markerikson, just trying to be very clear within the discussion)

I don't think a presentational component should ever dispatch something like `dispatch({type: FETCH_RECORDS})` or call a function like `this.props.fetchRecords()` --- if it did that, I wouldn't call it a presentational component.

I suppose you could consider ""I am mounting"" as something interesting, in which case the parent could expose a function through props like`this.props.iAmMounting()`, which could fetch data indirectly.  In this case, it would be very clear that you have to `render()` with your existing props, and patiently wait for your parent to react to your `iAmMounting()` call by delivering new props to you.

If we _did_ think about our components like this, [which I believe was your point farther up](https://github.com/reactjs/react-redux/issues/210#issuecomment-245042597), then the subtleties discussed in this issue could be avoided. I think we're on the same page in this regard. :heart: 

So, one question is whether people generally ""get"" that they need to construct their components differently when they use Redux than when they use vanilla React?  Or, is it trivial to convert an application from vanilla React to Redux?  Can (or should) we make it more trivial to do so?

There are two extremely different conceptual ways to approach this:
1. Encourage a high-level of separation between the wrapped presentational component and the connected wrapper. 
2. Encourage React-like hybrids where state management and presentation are mixed.

**My opinion is that the current `react-redux` implementation falls in the middle somewhere, doing a reasonably good job at both, but not a spectacularly good job at either.**

A better version of (1) would put things like `componentWillMount` _inside_ the wrapper, and explicitly discourage anything but presentation in the wrapped component.

A better version of (2) would subscribe to the Redux store directly inside the component (i.e. no wrapper), so that the component's state can be manipulated directly (e.g. `mapReduxStateToComponentState` instead of `mapStateToProps`)

To be clear, I'm not trying to rag on `react-redux` --- It's great --- I'm just brainstorming some ideas for improvement --- I hope nobody's toes get crunched.
",naw,2015-12-20 02:16:49
210,2016-09-07 02:12:06,"Coincidentally, FB is maybe [considering depreciating componentWillMount](https://github.com/facebook/react/issues/7671)  
",jimbolla,2015-12-20 02:16:49
210,2016-09-07 02:12:33,"@jimbolla : dude, you beat me to it by 13 seconds.  :(
",markerikson,2015-12-20 02:16:49
210,2016-09-07 02:20:58,"@markerikson 
![frabz-oh-you-almost-had-it-you-gotta-be-quicker-than-that-782d6e](https://cloud.githubusercontent.com/assets/1851364/18297648/29da4282-7480-11e6-90b4-f4de75c3b1d3.jpg)
",jimbolla,2015-12-20 02:16:49
210,2016-09-07 04:51:57,"Great posts @naw, you've definitely helped clarify the subtle implications of how `connect` is implemented and the fact that the component created by `connect` represents a parent-child props relationship between the parent component and the wrapped component. Your `<BlogPost>` example is spot on and I agree that there are actually 4 different states we can be in.

After taking this into consideration, I've come up with a solution to this problem. I'll extend your `<BlogPost>` example to explain my solution.

I'm using [normalizr](https://github.com/paularmstrong/normalizr) for my project, which manages an `entities` slice of my store's state that holds all fetched blog posts in a hash by `id` (as you suggested).  I also have a separate slice of my store's state, `visibleBlogPosts`, which has the following initial state:

<S_CODE_TOKEN>

My `visibleBlogPostsReducer` looks like this:

<S_CODE_TOKEN>

When I successfully fetch a given blog post, it will be added to `entities.blogPosts`, and my `visibleBlogPosts` will update to have the `id` of the fetched blog post.

Given this state shape and reducer functionality, I now have the following variables which are used to determine my loading state at any given time:
- `object` - The Blog Post object I want to render, which may be present but stale (i.e. found in my entities cache), or present and fresh (i.e. just fetched), or not present at all.
- `objectId` - The ID of the Blog Post I want to render, which is a number.
- `storedObjectId` - The ID of the Blog Post in my store (i.e. `visibleBlogPosts.id`), which is a number or `null`.
- `isFetching` - Whether we're currently fetching a Blog Post (i.e. `visibleBlogPosts.isFetching`), which is `true` or `false`.

Based on these variables, I want to reduce my loading state at any given time to be one of the following:
- `'FIRST_LOADING'` - Object is loading for the first time (object is not present).
- `'RELOADING'` - Object is reloading (object is present but stale).
- `'LOADED'` - Object is loaded (object is present and fresh).

I can do so with the following logic:

<S_CODE_TOKEN>

Given these 3 possible loading states, I can have the following logic in my component.

<S_CODE_TOKEN>

Of course, in my actual implementation I'm using constants rather than direct string comparisons, and I've created some abstractions for getting the current loading state, but I've deliberately tried to be explicit here.

So far, this solution appears to work well and keeps state/reducer boilerplate to a minimum (e.g. no need to maintain a separate `isFetched` variable). I'm curious to hear people's thoughts on this and whether there are any problems with this solution.
",jordanmkoncz,2015-12-20 02:16:49
210,2016-09-07 21:56:38,"@jordanmkoncz 

At first glance this looks like a solid approach.  However, there _are_ some nuances to consider.

> object - The Blog Post object I want to render, which may be present but stale (i.e. found in my entities cache), or present and fresh (i.e. just fetched), or not present at all.

In the scenario where you visit `/blog/5`, and then visit `/some_other_page`, and then visit `/blog/5` (for a second time), you have no way of distinguishing if `object` is stale or fresh.  `storedObjectId` will match immediately even though the object is stale, which means you'll have `LOADED` for a brief time before you switch to `RELOADING` and then back to `LOADED`.  This may or may not be a big deal depending on your application.   The `storedObjectId` is really `mostRecentlyReceivedObjectId`, and just because an object is the most recently received object doesn't mean it is fresh (indeed, it could be seconds, minutes, hours, or days old).

Also, it's feasible for AJAX calls to return in the wrong order.  Suppose you visit `/blog/5`, and then `/blog/27`, but you receive the response for 27 before you receive the response for 5.  In this case, you'll see:
1. `FIRST_LOADING` spinner
2. `LOADED` content for 27 when 27 returns
3. `LOADING` spinner perpetually once 5 returns

Probably the easiest way to guard against this is to prevent more than one fetch at a time. However, some features _need_ to fire off more than one request at at time (like an autocomplete query, for example), so you may have to use more complicated techniques.
",naw,2015-12-20 02:16:49
210,2016-10-04 18:05:31,"@naw 

Any chance you've found a decent way to work around this? I have a very similar problem and been banging my head on the wall for a few days with no success. I'm new to React and Redux which is making this even more frustrating.
",alien109,2015-12-20 02:16:49
210,2016-10-04 18:16:58,"@alien109 could you clarify what specific issue you've been having trouble with?  
",naw,2015-12-20 02:16:49
210,2016-10-04 18:54:19,"@naw 

Sorry for not being more clear. I'm assuming I'm running into a similar situation as you'd described in a comment above. I'm dispatching an action in ComponentWillMount to perform multiple ajax calls to receive data. Once all of the ajax calls have completed, I'm dispatching an action that updates a slice in my store that sets a fetching status for the entire page. This way I can check that rather than for each individual entity that's being passed in from the store. For the first time a visit the route, the data all gets returned, the store updates, props update, and the component is rendered correctly. If I then navigate away from that route, and then return, the process of fetching data above is started again, except the component is then rendered before the props are updated. Even though I can see that the store is being updated correctly, the component calls render before it's props are updated with the new store state. Any sort of fetching status flags I'm using are pointless since they are out of date.

The only solution I've come up with is moving all data rendering bits into separate helper functions in the class and then wrapping them in try/catch statements. I then can return an empty tag in the catch block so that errors get swallowed and don't halt the execution of the component rendering again once the props actually do get updated. This feels super janky though.

I'm assuming this was the primary issue you were having, but maybe that's my misunderstanding. As I stated, I'm just getting started with React and Redux, so it's possible I'm just being confused.

BTW, thanks for a quick response.
",alien109,2015-12-20 02:16:49
210,2016-10-04 19:59:16,"@alien109 

Conceptually, the act of navigating to the page should cause a state change (mark existing data as stale, set a fetching flag, etc.).  The problem is that the component must render _before_ anything has a chance to update the redux state.  This means there is no way for `mapStateToProps` to derive for the component whether it should show a spinner or not --- the redux store (and `mapStateToProps`) simply don't have enough information yet (in particular, they don't know that the user just navigated to the page).  

One workaround is for the component itself to provide some of the key information (in particular, the fact that it was just navigated to).

As an example, the component can track when it was mounted (i.e. as a `mountedAt` value in local react state), and compare this to a `fetchedAt` value for the data stored in redux to determine whether to show a spinner or not.  Once the component fetches new data, the redux data is fresher and has a `fetchedAt` value newer than the component's `mountedAt` value.

A sample implementation might be this:

<S_CODE_TOKEN>

Depending on your application, you'd likely have to do something similar in `componentWillReceiveProps`.

There are variations of this approach (for example, you don't have to use a timestamp, you could use a unique id instead).   

I believe it's feasible to implement something like this completely outside of the component itself by using the factory version of `mapStateToProps`, but I haven't experimented with that approach enough to recommend it.

The fundamental cause of this issue is that a connected component has two sources of input (ownProps, and redux-derived props) which can be out-of-sync.  This manifests itself when you using a router like react-router (which passes information to you via ownProps).  Conceptually you might be able to solve this by ignoring ownProps, and rigging the router to pass route changes to you _through_ redux, but that's a large can of worms probably best avoiding right now.
",naw,2015-12-20 02:16:49
210,2016-10-18 20:22:26,"The solution I came up with was multiple nested HOCs (using recompose). Three layers: one that maps the action creators, one that uses the action and one that pulls the data from the store. In this way, the action is called in layer 2's componentWillMount before layer 3's props are generated.

<S_CODE_TOKEN>

It works but I feel silly doing it 
",natorious,2015-12-20 02:16:49
210,2016-10-25 17:18:54,"@naw Your solution worked really well for me. The spinner is never even visible.. it just needed a few extra milliseconds to retrieve the data from the `componentWillMount()` call. The store data is populated before the user ever sees it.
",jgentes,2015-12-20 02:16:49
210,2017-01-03 21:36:56,"I was having the same issue as many of the folks who have commented - I was making chained asynchronous calls and I wanted to wait for them all to complete before going through my render logic. I had a loading store that was set to true before the ajax calls were made and false once they were all complete. This was initiated in componentWillMount, but render was being called once, at least, before the loading store was set. I tried several of the solutions but they just didn't suit my needs. I came up with a solution that, so far, has worked for me. I actually didn't change my loading store:

<S_CODE_TOKEN>

In the relevant components I added a ready state:
<S_CODE_TOKEN>

which was set to false in componentWillMount:
<S_CODE_TOKEN>

Then, in componentWillReceiveProps:
<S_CODE_TOKEN>

and in render:
`if(!this.state.ready) return <LoadingPlaceholder/>;`

So far this has worked everywhere for me.
edit: excuse my markdown, i'll try to fix later.",methodmain,2015-12-20 02:16:49
209,2015-12-03 20:33:44,"I have a very strange situation. When i use simple actions that components update from the root to child, but when i use redux-thunk the child components update first. This cause problems with react-intl v2 because first i have to patch messages in IntlProvider root components and only then rerender child components with new messages.
",voroninpaul,2015-12-04 19:42:58
208,2015-12-03 19:57:49,"Resolves when React rendering is complete. See https://github.com/rackt/redux/pull/1096 for related change to Redux core.

Enables callers of dispatch to run a callback when all React rendering has been completed.

Thoughts?
",mhodgson,2016-01-28 00:15:03
208,2015-12-03 20:01:00,"Obviously can update tests and docs if no one is opposed to this. 
",mhodgson,2016-01-28 00:15:03
208,2015-12-12 18:22:18,"Two thoughts:
1. We can't rely on `Promise` being available in older browsers and we don't want to rely on polyfill.
2. Can you show how you would use this?
",gaearon,2016-01-28 00:15:03
208,2015-12-13 14:07:17,"@gaearon The macro problem I am trying to solve is simply knowing when react is finished flushing changes to the DOM. Unfortunately the only affordance to do that is through a callback in every call to `setState`. I was hoping it would be ok to try to thread that through redux, but given that you rejected the necessary changes to Redux core I don’t think this PR will help by itself.
",mhodgson,2016-01-28 00:15:03
208,2015-12-13 14:28:22,"For the purpose of discussion, here’s a more detailed explanation of why this is necessary in some use cases: 

Assume that you are trying to create a WYSIWYG text editor for the browser (fairly common and painful endeavor). The state at any given moment is primarily composed of two things: 
1. The document itself (the thing the user is creating).
2. The current text selection within the document.

At first glance you might wonder why it is important to keep the text selection in state. The answer is simple: undo/redo. When a user triggers an undo or redo action, we not only need to restore the document to the previous state, we also need to restore the text selection to the previous state. 

It is important in this case that we fully restore the document state to the DOM **before** trying to restore the text selection. It should be obvious that trying to restore a selection of something that doesn’t yet exist on the page is problematic. Hence the need to know when the DOM has been fully rendered within the normal action emit/listener/render loop provided by Redux. After the DOM has been fully rendered, we can do the manual task of restoring the selection state on top of the DOM.

As far as I can tell, the current Redux and `connect` implementations do not support this use case. I can’t think of another use case that would require this off the top of my head, but I assume that the callback in React’s `setState` method was added for these types of rare but important edge cases. 

@gaearon do you see a different approach to this that would still allow for using redux and react-redux? Are there other scenarios in React or React-Native or even angular which might require knowing when changes to state have been fully flushed to the UI?
",mhodgson,2016-01-28 00:15:03
208,2016-01-28 00:15:03,"I understand your use case. I don't want to complicate `connect()` with this but I'm up for extracting the heavy lifting from `connect()` into a separate function that would make it much easier to build your custom `connect()`. If you're interested in proposing an API, let's discuss in https://github.com/rackt/react-redux/issues/269#issuecomment-175920073.
",gaearon,2016-01-28 00:15:03
207,2015-12-03 16:37:35,"Hello, I have strange behaviour.
First, I have very simple javascript, which is babelified before deploying (I put here JSX as resulting babelified file is huge):

<S_CODE_TOKEN>

Second, I have Java code:

<S_CODE_TOKEN>

what I have invoking:

<S_CODE_TOKEN>

if I delete 

<S_CODE_TOKEN>

it does find the renderServer function, but then it fails to eval as no mapStateToProps there.
Did you see this before? Am I doing something wrong? 
",BattleSlug,2015-12-16 18:43:15
207,2015-12-16 18:43:15,"This doesn't appear specifically related to React Redux.
Please ask this on StackOverflow or in a Nashorn discussion forum.
",gaearon,2015-12-16 18:43:15
206,2015-12-02 00:25:37,"Would it be possible to update Babel to version 6? Version 5 interferes with newly created projects.
",NullDivision,2015-12-14 09:04:18
206,2015-12-04 19:36:21,"I'm running into this as well in a react-native 0.16 project which uses Babel 6 under the hood. Looks like the .babelrc in react-redux throws an `unknown option` error.
",duro,2015-12-14 09:04:18
206,2015-12-05 21:27:48,"I'm unable to build with the changes made to `stage` in 6, I believe

<S_CODE_TOKEN>
",ajwhite,2015-12-14 09:04:18
206,2015-12-05 23:18:21,"As a workaround for the `unknown option` issue was to install babel-core with the presets in my project and babel-cli globally. As long as there's no babel executable in the `./node_modules/.bin/` directory it installs its own.
",NullDivision,2015-12-14 09:04:18
206,2015-12-05 23:22:26,"Interesting, @NullDivision -- so you basically kill the local installations and rely on the global? In theory, it sounds like this might also let you compile `react-native@0.16` with a different version of Babel? I'm currently using the `@connect` decorators that are no longer supported in Babel 6 (and also not resolved with the current workaround in [babel-plugin-transform-decorators-legacy](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy))
",ajwhite,2015-12-14 09:04:18
206,2015-12-05 23:28:40,"I'm not sure about the `@connect` decorators but all my dependencies work just fine with the global installation of babel-cli. For reference I'm using Webpack as my main builder and everything works as it should.

I need `babel-core/register` for runtime transpiling on Karma and Gulp but everything else uses the global binary. 
",NullDivision,2015-12-14 09:04:18
206,2015-12-07 15:19:30,"Just an idea for another workaround - would using a precompiled version of react-redux would work? I see there is a precompiled version on the CDN, but this is not for the native version. 
",eadz,2015-12-14 09:04:18
206,2015-12-08 09:43:18,"It's always a posibility but then what's the use of NPM and versioning? It also won't allow you to import it using ES6 unless you download the js file.
",NullDivision,2015-12-14 09:04:18
206,2015-12-08 12:11:13,"Not without a terminal dump.
",NullDivision,2015-12-14 09:04:18
206,2015-12-08 14:13:26,"All the tests are passing now. The PR is ready for review.
",martincik,2015-12-14 09:04:18
206,2015-12-10 11:32:37,"I'm waiting for the PR to get merged so I can upgrade to 0.16 – I wonder is the PR intended for react-redux@3.1 right? AFAIK we can't use react-redux@4 with the current react-native version
",gpbl,2015-12-14 09:04:18
206,2015-12-10 11:47:45,"When will this PR be merged?
",boldkhuu,2015-12-14 09:04:18
206,2015-12-14 09:04:18,"Hey folks!

I'm a bit confused why everyone is waiting for us updating to Babel 6. The library is compiled to ES5 :-). You shouldn't care what it uses internally.

The real fix was to stop shipping `.babelrc`. We fixed that in 3.1.2 and 4.0.1.
",gaearon,2015-12-14 09:04:18
206,2015-12-14 09:07:42,"The reason is that it breaks react-native apps builds. Can we also remove .babelrc from redux itself? It's also breaking for me on babel dependency.

Here's where it's failing for react-native apps (0.16):

<S_CODE_TOKEN>
",martincik,2015-12-14 09:04:18
206,2015-12-14 10:32:33,"I don't know if it would work but could someone try moving the babelrc content into the package.json under ""babel""? I think that might solve the issue.
",NullDivision,2015-12-14 09:04:18
206,2015-12-14 11:09:15,"> The reason is that it breaks react-native apps builds.

The Babel version we use internally doesn't matter. What mattered is that we shouldn't have shipped `.babelrc` in the package at all. We fixed this already. 

And it is also already removed from Redux. Please update to the latest version.

@NullDivision As far as I know there is no issue to solve. What do you mean? It's already solved in the latest update to both packages. 
",gaearon,2015-12-14 09:04:18
206,2015-12-14 12:25:24,"I still see `.babelrc` on master.
",NullDivision,2015-12-14 09:04:18
206,2015-12-14 13:07:04,"We don't need to remove it from the source. (We still need Babel right :-). We removed it from NPM distribution by using ""files"" whitelist in package.json. 
",gaearon,2015-12-14 09:04:18
205,2015-12-01 16:53:01,"I realise this is probably more an issue with my setup files, or webpack or something, but I'm hoping to find some help.

I'm trying to connect actions to a nested component, but I'm only getting dispatch as property.
This makes sense as the actions I imported returns undefined.
That's strange though because in another component higher up it works just fine.
Anyone has any idea how this is possible?

actions.js

<S_CODE_TOKEN>

App.js 

<S_CODE_TOKEN>

NestedComponent.js 

<S_CODE_TOKEN>
",flyon,2015-12-01 16:59:47
205,2015-12-01 16:59:47,"never mind. was a problem with import.
I had to do

<S_CODE_TOKEN>
",flyon,2015-12-01 16:59:47
204,2015-11-27 14:13:30,"Bumped node version to 5 to fix lint error.
Made failing test 'should throw an error if the store is not in the props or context' not have to match the exact error string as suggested [here](https://github.com/rackt/react-redux/pull/196#issuecomment-160009368) (thanks @schmeedy!) 
",ellbee,2015-11-27 14:45:35
204,2015-11-27 14:40:52,"React probably got rid of `Invariant Violation:` recently as pretext for the message. It was moved to be `error.name` if I recall correctly. This may be the reason test is failing.
",gaearon,2015-11-27 14:45:35
204,2015-11-27 14:43:52,"Yep, I don't think its good to be relying on the _exact_ string.
",ellbee,2015-11-27 14:45:35
204,2015-11-27 17:32:48,"@gaearon , yeah they did, pretty recently, about a month ago - https://github.com/facebook/react/pull/5185
",conorhastings,2015-11-27 14:45:35
203,2015-11-26 00:34:33,"After upgrading to react native 0.15.0 and using react-redux 4.0.0
`import { Provider } from 'react-redux';`
produces following errors in the chrome debugger:
<img width=""611"" alt=""screen shot 2015-11-25 at 7 29 56 pm"" src=""https://cloud.githubusercontent.com/assets/5076567/11412456/3abd07b2-93ab-11e5-9bc8-c407d5489090.png"">
",nodkrot,2015-11-26 07:41:56
203,2015-11-26 07:41:56,"I'm afraid they are not compatible at the moment. This notice from the readme explains the situation:

https://github.com/rackt/react-redux#react-native
",ellbee,2015-11-26 07:41:56
202,2015-11-25 06:22:24,"and it uses react 0.14, how do we use react-redux with it?
",kinhunt,2015-11-25 18:42:42
202,2015-11-25 18:42:42,"You can't. It uses React 0.14 _internally_ but https://github.com/facebook/react-native/issues/2985 is still not fixed. Please keep tracking https://github.com/facebook/react-native/issues/2985.
",gaearon,2015-11-25 18:42:42
202,2015-12-01 12:29:16,"But still you can (hack) use _reactInternals._context instead of context, where react-redux is dependent on react for context which was not available yet.
",prashanth1509,2015-11-25 18:42:42
201,2015-11-24 19:39:26,"Providers use react's context api to inject store into the components. But we can achieve something similar by reimplementing Provider component in a safer way (kindof pseudocode).

Example,

<S_CODE_TOKEN>

and usage would be like,

All the smart (sometimes dumb) components that require store should be surrounded with Provider component.

<S_CODE_TOKEN>

Since we enforce childContextTypes to be set by those child components, its future proof in a way that if react stabilizes context api all the components can easily migrate.
",prashanth1509,2015-11-24 20:16:24
201,2015-11-24 19:59:17,"The point of `Provider` today is to mount the store in a context so that components at any tier of the Component tree can `connect` to it and select the state that is relevant for themselves. In your re-imagining of the Provider it seems you want to be able to supply the store to arbitrary components but this isn't the intent of the react-redux bindings. If you do this then you have to manually subscribe to store updates etc...

I may be misinterpreting your suggestion or intention about what this new way accomplishes but I think you're focusing on the least valuable part of the react-redux library.

In fact if you don't like the use of context you can just pass store as a prop through your component tree and supply it to components using `connect` (this is actually a bad idea of anything of significant size/complexity, perfect for tests though) or if you don't care about Universal Apps and the ability to render on the server and singletons aren't a problem you can just sideload the store as a prop (require it in each component that is being connected and pass to said component).

All that said, there isn't anything wrong in my opinion using context. It's even documented now https://facebook.github.io/react/docs/context.html

Even if the API changes the library can and will change along with it.

Am I missing something perhaps?
",gnoff,2015-11-24 20:16:24
201,2015-11-24 20:16:24,"The main use case of `<Provider>` is to give `store` to all connected components _no matter how deep they are_. Unless we do this, introducing a new container (= smart) component somewhere inside a presentational (= dumb) component suddenly means we have to thread `store` as a prop all the way down there. This plumbing is not convenient.

I compare these approaches in my Egghead Redux lessons:
- [Passing the Store Down Explicitly via Props](https://egghead.io/lessons/javascript-redux-passing-the-store-down-explicitly-via-props?series=getting-started-with-redux)
- [Passing the Store Down Implicitly via Context](https://egghead.io/lessons/javascript-redux-passing-the-store-down-implicitly-via-context?series=getting-started-with-redux)
- [Passing the Store Down with `<Provider>` from React Redux](https://egghead.io/lessons/javascript-redux-passing-the-store-down-with-provider-from-react-redux?series=getting-started-with-redux)

They are free, so please consult them to follow my thought process!

> its future proof in a way that if react stabilizes context api all the components can easily migrate.

Using React Redux is already future proof because it hides context API from you. If context API changes we'll just update React Redux, and as long as you use `connect()` and `<Provider>` you'll never know.
",gaearon,2015-11-24 20:16:24
200,2015-11-21 03:17:27,"<S_CODE_TOKEN>

This throws `Error: Invariant Violation: onlyChild must be passed a children with exactly one child`. 

In `Provider.js`, if I return `children` directly rather than returning `_react.Children.only(children)`, the component _renders fine_, although it still triggers `Warning: Failed propType: Invalid prop`children`supplied to`Provider`, expected a single ReactElement.`
",feifanzhou,2015-12-16 18:43:25
200,2015-11-24 20:29:54,"What versions of React Native and React Redux are you running?
Are you sure there’s no `node_modules/react` that got installed by mistake?

Note that React Native requires React Redux 3.x until https://github.com/facebook/react-native/issues/2985 is solved, and that you have to import both `Provider` and `connect` from `react-redux/native` instead of `react-redux`. After https://github.com/facebook/react-native/issues/2985 is fixed, you will be able to use React Redux 4.x (latest) and import from `react-redux` directly.
",gaearon,2015-12-16 18:43:25
199,2015-11-20 21:15:56,"The Travis build is currently [failing](https://travis-ci.org/rackt/react-redux/builds/92339184) on `npm run lint`:

<S_CODE_TOKEN>

This is failing on code that previously passed on Travis (i.e. the build above is a no-op branch from master, which was green [6 days ago](https://travis-ci.org/rackt/react-redux/builds/91091135)), so there's something external happening. What I have tried so far:
- Running locally (Mac OS 10.10.5, Node 5.0.0, Node 3.3.9). Passes.
- Locking down the `eslint` (and related plugins) versions down. Passes locally/Fails on Travis.
- Upgrading `eslint` (and related plugins) to the latest. Passes locally/Fails on Travis.

Perhaps this is a Mac vs Linux problem or a iojs problem with eslint?
",ryanbrainard,2015-11-27 15:14:11
199,2015-11-23 09:47:58,"Now that Travis supports docker you could run the Travis build inside a docker container (such as ubuntu:trusty) and then you would have a complete lock on the environment (both OS & node version,  at least for testing linux distros).

The Travis yml would look something like this

<S_CODE_TOKEN>

If you want to test a bunch of nodejs versions you can just add multiple `docker run` lines with the different nodejs image versions
",inakianduaga,2015-11-27 15:14:11
199,2015-11-27 15:14:11,"Fixed by #204
",ellbee,2015-11-27 15:14:11
198,2015-11-20 21:15:44,"I'm trying to avoid writing any container components (is that the new name for smart components?) at all. We're slowly implementing Redux in our codebase, so the top-level component is a moving target; it helps to keep all the React code completely unaware that it's being passed a `dispatch` at all so that we can easily nest a former top-level component inside a new top-level component.

My solution is:

<S_CODE_TOKEN>

This works, except inside `MyComponent`, I have to say:

<S_CODE_TOKEN>

So the component's not aware that it's being passed `dispatch`, but it is aware that it's being passed a function instead of an object. It's not ideal.

What I'd really like to do is be able to access the `dispatch` value within my `renderReduxProvider` function, so that I can pass it into `bindActionCreators` immediately before passing it into a single React component.

Is that possible?
",Zacqary,2015-11-20 21:45:21
198,2015-11-20 21:39:09,"`store` has `dispatch` as a property so just reference `store.dispatch` from within `renderReduxProvider`
",gnoff,2015-11-20 21:45:21
198,2015-11-20 21:43:04,"I just found https://github.com/rackt/react-redux/blob/master/docs/api.md#inject-todos-and-all-action-creators-addtodo-completetodo--as-actions in the API docs a few minutes ago.

This is what I get for only reading the Quick Start.

Sorry about that!
",Zacqary,2015-11-20 21:45:21
198,2015-11-20 21:45:21,"No problem
",gnoff,2015-11-20 21:45:21
197,2015-11-20 20:27:49,"This is an empty commit based on `master` to test if `eslint` is failing on `master`. I have seen it failing on branches with other code changes, but I believe it is failing due to an external change and want to see if it also failing on `master`. I'm not a contributor, so can't simply click the ""Restart Build"" button in Travis for `rackt/react-redux`, so kicking off a build this way.
",ryanbrainard,2015-11-20 21:02:33
197,2015-11-20 21:02:33,"Yes, it is failing. Strangely also failing on this even though I didn't change anything:

<S_CODE_TOKEN>

Going to close this pull and open an issue.
",ryanbrainard,2015-11-20 21:02:33
196,2015-11-20 16:04:48,"First, there's high probability this pull request is actually wrong and there's some fundamental thing in React / Redux that I violate by the proposed change given there are multiple unit tests which codify current approach. I still think there's some problem with it, though, so I appreciate if you look into this!

I'm trying to prevent the `mapState` function from being called twice on each initial render of a ""connected component"" - first in the constructor and then right after that in `shouldComponentUpdate` where `stateProps` are recomputed because of difference in store state (as initially stored store state is always null). This second call can be avoided by simply initializing `this.state.storeState` with current store state during construction. 

Is this a viable solution? If not, is there some other way of preventing `mapState` to be called twice even though the state itself hasn't changed in between those two calls?
",schmeedy,2015-12-20 02:26:29
196,2015-11-24 20:34:00,"This looks good to me.
@epeli What do you think about this change? Any reason `storeState` was initialized to `null` in b6272698d2fc9ff7f67014b3e527579f738cd81d?
",gaearon,2015-12-20 02:26:29
196,2015-11-26 10:56:04,"Sorry, I missed this. I seem to get too much noise from this repo so I tend to ignore bunch of react-redux related emails... :(

I was actually confused by this also when I wrote b627269. It's weird indeed that during the first render the mapstate is called multiple times. I did plan to send PR like this earlier but never found the time to do it. 

> Any reason storeState was initialized to null in b627269?

Can't remember exactly but my thinking was something along the lines that the state is required only when the component is mounted. Not during initialization.

But this PR looks good anyway only if `React connect should throw an error if the store is not in the props or context` test would not fail :)
",epeli,2015-12-20 02:26:29
196,2015-11-27 00:15:54,"The failing test was unrelated to this PR, but I've fixed it. Linter still fails (it's failing in master too) - not sure how to fix that. 
",schmeedy,2015-12-20 02:26:29
196,2015-12-12 17:52:34,"Can you please rebase on the latest master? Sorry for the trouble.
",gaearon,2015-12-20 02:26:29
196,2015-12-20 02:26:29,"Fixed via 0c05c01dcc8695a7ff02b23519787dd398e26937 and https://github.com/rackt/react-redux/commit/a8c1abfee3f7e67d424593706d7f8305291872b7.
",gaearon,2015-12-20 02:26:29
195,2015-11-20 12:42:00,"Minimal test case:
https://jsfiddle.net/69z2wepo/21767/

The mapStateToProps function supplied to `ReactRedux.connect` is run too often, even when the connected component is not created / added to the react tree.
When it is mounted, it is run too often; I count 3 times for a single store update; before it's created (?!), before it's rendered, after it's rendered (why?)

This is problematic, as I access a fields of state objects that may be nulled out. Ideally, the maybeRender would work correctly, and I would not have to guard against nulls in my mapStateToProps, but right now I'd have to do something like

<S_CODE_TOKEN>

at the top of my mapStateToProps.

The intended solution of hiding a component through functional composition appeals to me. It allows me to use some lifecycle logic in the connected component.
",awestroke,2015-11-21 11:34:26
195,2015-11-21 11:34:25,"I found the problem. I was lexically shadowing `Component` in the `maybeRender` function, so I extended the component I was trying to conditionally render.
Working fiddle (only changed maybeRender): https://jsfiddle.net/re6tmuw9/5/

Closing this now, sorry if I caused anybody to spend time on this one.
",awestroke,2015-11-21 11:34:26
194,2015-11-19 20:20:04,"This started off from a discussion in https://github.com/rackt/redux/issues/980

As far as I can tell there is no way to get the information that I need from listeners using the approach suggested by @gaearon, but if we have the `handleChange` return some data for us then it's straightforward.

The approach I took here is to have `handleChange` take an optional parameter which is a function that should extract the data we need, given the wrapped component's name, the `nextState`, and to leave the door open to other requirements, the instance of the connect component itself.

If this or some variation of this is accepted, it would be great to also do a point release for 3.x in order to support React Native right away (which is the context where I am using this).

An example of how you might use this:

<S_CODE_TOKEN>

The result:

<S_CODE_TOKEN>
",brentvatne,2016-01-28 00:15:54
194,2015-11-19 21:15:12,"Lint error and failing test unrelated to this branch, happening to me when I run against master as well
",brentvatne,2016-01-28 00:15:54
194,2015-11-30 06:48:20,"@epeli @gaearon - any feedback?
",brentvatne,2016-01-28 00:15:54
194,2015-11-30 07:25:54,"While the solution is neat I would like to avoid extending meaning of existing APIs. Adding an argument to the listener seems problematic to me because other Redux extensions may try to do the same, and thus be incompatible.

How about we put this information on _listener itself_ as properties? Even without a profiling tool, it would be useful when debugging Redux in console because you'd be see much more information about the listeners. This also means no changes to core API.
",gaearon,2016-01-28 00:15:54
194,2016-01-28 00:15:54,"I don't want to complicate `connect()` with this but I'm up for extracting the heavy lifting from `connect()` into a separate function that would make it much easier to build your custom `connect()` that can support this. If you're interested in discussing an API, let's do that in https://github.com/rackt/react-redux/issues/269#issuecomment-175920073.
",gaearon,2016-01-28 00:15:54
193,2015-11-19 00:23:07,"My top level component is like so:

<S_CODE_TOKEN>

And my App component is like so:

<S_CODE_TOKEN>

I'm not using React Router, and I've ensured that there [is only one React instance loaded](https://medium.com/@dan_abramov/two-weird-tricks-that-fix-react-7cf9bbdef375#.12hz4y8rg).  

If I break at the top of `App.render`,  `this.context` has no store on it.  However, `this._reactInternalInstance._context` does have the store attached.  Obviously I can grab this, but I'm guessing I shouldn't really use that one.

Why is there no store on `this.context`?  I want to subscribe to certain state changes.  

Thanks.
",marcuswhit,2015-11-23 01:41:42
193,2015-11-20 05:38:20,"I actually have the same problem. I do use react router.

<S_CODE_TOKEN>

I also noticed the exact same thing that `this._reactInternalInstance._context` of the Dashboard component does have a store, but `this.context` has not.

<S_CODE_TOKEN>
",m19,2015-11-23 01:41:42
193,2015-11-20 15:31:44,"Having same issue, both with and without React Router.
Anyone solved this?

ps: I've ensured that there is only one React instance loaded
I Didn't receive the store even on props, and I have the exact dependecies of @m19:

<S_CODE_TOKEN>
",gabrieledarrigo,2015-11-23 01:41:42
193,2015-11-21 11:42:25,"You are not supposed to access this.context.store anyway. You use connect to pick the part of the state you want. 

React only populates the context if you specify **contextTypes** in your component. You will however notice that the props in your <App /> component is populated from the store, as you specified in your mapStateToProps function.

If your want to subscribe to state changes, make sure you set contextTypes. Or, even better, handle the subscriptions on the root level (where you create the store).
However, I can't help but think you really don't need to subscribe to changes, as the react tree is re-rendered each time the state changes anyway.
",awestroke,2015-11-23 01:41:42
193,2015-11-21 13:01:42,"Hi @awestroke;
Yep, props are populated with the data coming from the store and with the dispatch function.

So, Do You confirm that the store object is not injected into props?

About the subscribing, isn't store.subscribe purpose just to be used to listen and retrieve a piace of state from store? 
",gabrieledarrigo,2015-11-23 01:41:42
193,2015-11-21 20:35:20,"@awestroke, 

I am using connect to pick the parts of the state that I want. But that doesn't let me subscribe to state changes. I realise react will re render when the connected parts change, but I think it is a perfectly valid use case to observe changes to a specific property on the store, and trigger an action based on this - not all state changes need to trigger a re render. If the observed property can be updated via various means, this is a neat way of responding to that. 

Yes I could do this where I setup my store, but then I end up with irrelevant logic together in that file. 

I'm using [redux-rx's observableFromStore](https://github.com/acdlite/redux-rx) to do this, which requires the store passed in. 

I'm pretty sure I've already tried to set contextTypes without success, but can try again tomorrow. 
",marcuswhit,2015-11-23 01:41:42
193,2015-11-23 01:41:42,"@awestroke was correct, I just needed to correctly specify `contextTypes` in my component, and the store was then added as expected:

<S_CODE_TOKEN>
",marcuswhit,2015-11-23 01:41:42
193,2015-11-23 15:40:38,"@awestroke @marcuswhit So it is confirmed that store is not passed in with props?
",gabrieledarrigo,2015-11-23 01:41:42
193,2015-11-24 20:23:51,"There are two possible approaches here.

### Use `connect()` and don’t worry about the context

This is the approach we suggest. Use `connect()`, let it subscribe to the store, and don’t worry about the React context API. There are limitations: indeed, `store` itself is not passed down as a prop, but subscribing to it inside a `connect()`ed component is an anti-pattern anyway. Let `connect()` take care of subscriptions. If you want to cause a side effect when store state changes, do this in `componentWillReceiveProps` of the `connect()`ed component.

### Specify `contextTypes` for `store` and access `context` directly

If you _really_ want to grab `store` from `context` yourself (my advice: don’t do this unless you have a very good reason!) you _need to_ specify `contextTypes`. Context is opt-in in React, and you won’t receive `this.context` if you don’t specify `contextTypes`. [My free Egghead lesson on implementing `<Provider>` with `context`](https://egghead.io/lessons/javascript-redux-passing-the-store-down-implicitly-via-context?series=getting-started-with-redux) covers that.
",gaearon,2015-11-23 01:41:42
193,2015-11-24 23:39:12,"Thanks @gaearon 

I get that you should only use `context.store` with really good reason - I'm just wondering if my use case falls into that category.  I'm using [redux-rx's](https://github.com/acdlite/redux-rx) `rx-middleware` and `observableFromStore`, and have something like the following:

<S_CODE_TOKEN>

Essentially, I watch for any changes to the ccyPair on a tile object, and then subscribe to the price stream each time.  The ccyPair could be changed by the user or programatically in a reducer, so putting this logic in a component handler doesn't quite fit. I'm defining this as a payload on an action, which then gets handled by `rx-middleware` to push the notifications through to my reducers.

Is this a valid use case for observing the store?  If I just use `connect()` and watch for ccyPair changes in `componentWillReceiveProps`, it seems like much more work - I have to cache the last ccyPair to ensure it's changed, then if it has I should clean up the last priceStream subscription, then subscribe to a new one.  It seems much cleaner all being contained within a single observable.
",marcuswhit,2015-11-23 01:41:42
193,2015-11-24 23:58:59,"@marcuswhit Can you show your whole component? I'm confused why it needs both `connect()` to subscribe, and a store itself to form that stream. Maybe having just the store is enough?
",gaearon,2015-11-23 01:41:42
193,2015-11-25 05:41:41,"Sure.  I _think_ I need both the `connect()` and store:
- I need the store for my observable subscription - I could detect ccyPair changes in `componentWillReceiveProps`, but this would break the nice clean Rx flow - I'd have to manually cache the last ccyPair selected, dispose any old price stream, and subscribe to the new one.  At the very least I want an event telling me the ccyPair on the state has changed, which I can convert into an Observable.
- The `connect()` is for the other parts of the component. I'm pretty sure it needs to be a smart component as it'll have a lot of stuff going on in it's subtree - more than most entire apps - which aren't the concern of it's container.

.

<S_CODE_TOKEN>
",marcuswhit,2015-11-23 01:41:42
193,2015-11-29 03:37:47,"Any thoughts on the above @gaearon?
",marcuswhit,2015-11-23 01:41:42
193,2015-11-29 11:39:00,"Seems OK to me. Yes, getting store from context explicitly seems like best option here. 
",gaearon,2015-11-23 01:41:42
193,2017-01-23 04:39:57,@gaearon Is there any better way to use store.subscribe other than getting store from context ('connect' doesn't help)? I'm new to Redux but I feel it's quite weird when I try to follow http://redux.js.org/docs/api/Store.html doc to do subscribe but don't know how to get the store object. Searched a long time on the internet and finally get here. I feel there should be a more apparent place to let people know the normal way to get store for store.subscribe().,shlinx,2015-11-23 01:41:42
193,2017-01-23 04:48:27,"@shlinx : Dan isn't actively maintaining Redux any more.

As Dan said earlier in the thread, 99.9% of the time, you shouldn't be trying to access the store directly in your React component.  Use the `connect` function from the React-Redux library, and let it manage the subscriptions for you.  This is described in the Redux docs at http://redux.js.org/docs/basics/UsageWithReact.html .

There's also many other Redux tutorials listed at https://github.com/markerikson/react-redux-links/blob/master/redux-tutorials.md as well.",markerikson,2015-11-23 01:41:42
193,2017-01-23 05:04:29,@markerikson Thanks.,shlinx,2015-11-23 01:41:42
193,2017-01-27 12:23:03,"@markerikson What if I want to pass state but don't want to subscribe to store updates? Whenever I pass `mapStateToProps` the component will get subscribed, or is there another way around it?",Damnum,2015-11-23 01:41:42
193,2017-01-27 13:29:15,"@Damnum `connect(..., ..., ..., { shouldHandleStateChanges: false })`",jimbolla,2015-11-23 01:41:42
193,2017-01-27 13:44:23,@Damnum: could you share a scenario where you do not want to subscribe to state changes? ,awestroke,2015-11-23 01:41:42
193,2017-01-28 12:21:26,"Sorry guys, after some investigation I realized that my question was based on a misunderstanding how/when components are rendered in React. So I solved it differently now. Thanks anyway!",Damnum,2015-11-23 01:41:42
192,2015-11-17 12:38:13,"I'm using react-router with redux. Not sure if this is best resolved in react-router, react-redux or there's a better solution.

In my route route App.jsx component I use cloneElement to pass some props down to immediate children. Not a big fan of this for now, but this is how my code has turned out.

<S_CODE_TOKEN>

Then my child route component LandingPage.jsx uses those props. This all works find until I use react-router's `createElement` method on the router. What this does is wrap all the route components in another component. 

<S_CODE_TOKEN>

Now passing the props in in that createElement function is kinda useless because the props don't contain my `showSignup` and `showLogin` methods, they only contain the RoutingContext props of react-router. So my code breaks. To solve it I've had to extend react-redux's Provider class and pass down any extra props.

<S_CODE_TOKEN>

Would updating the Provider class to include passing down extra props make any sense?
",AlastairTaft,2015-11-17 15:30:15
192,2015-11-17 15:30:15,"Wrap `<Router>` itself into a `<Provider>`. Then you'll receive the element you wanted as a child and be able to add props to it.

<S_CODE_TOKEN>
",gaearon,2015-11-17 15:30:15
192,2015-11-17 16:29:26,"Cheers
",AlastairTaft,2015-11-17 15:30:15
191,2015-11-14 03:04:57,"fix https://github.com/rackt/react-redux/issues/170
",camsong,2015-11-14 10:01:58
191,2015-11-14 10:02:04,"Thank you :grin:
",omnidan,2015-11-14 10:01:58
190,2015-11-13 17:06:50,"Babel (according to it's website as of November 13, 2015) does not have an option for `stage` or `loose` and these cause babel to blow up on transpile. Wondering if this serves some other purpose? I have opened the same issue on rackt/redux#1032
",tylerwgoza,2015-11-13 17:07:50
190,2015-11-13 17:07:50,"Thanks, but there is no need to create multiple issues.
This is a hassle for maintainers.

The Babel configuration changed in 6.x.
We'll catch up eventually.
See https://github.com/rackt/redux/issues/1032#issuecomment-156489518.
",gaearon,2015-11-13 17:07:50
189,2015-11-13 17:01:16,"Testing finalMap{State|Dispatch}ToProps.length > 1 breaks when these functions are wrapped in generic decorator functions. Instead, test for !== 1.

For example, let's say I wanted to write a decorator function that logs function invocation like so:

<S_CODE_TOKEN>

Then, I want to wrap my mapStateToProps and mapDispatchToProps functions with traceExecution and pass it to connect:

<S_CODE_TOKEN>

This would not work without these fixes, since the functions returned by the decorator have arity 0 and would fail the ""> 1"" length test.

By changing the arity test to be ""!== 1"" instead of ""> 1"", you enable this scenario to work as expected.
",planetcohen,2015-12-12 19:30:29
189,2015-11-13 17:09:35,"Fair enough. Mind adding tests for this?
",gaearon,2015-12-12 19:30:29
189,2015-11-13 17:38:21,"Done - I added tests checking for expected behavior when arity is zero.
",planetcohen,2015-12-12 19:30:29
189,2015-12-12 19:30:31,"Thanks!
",gaearon,2015-12-12 19:30:29
188,2015-11-13 08:59:10,"The latest version of React is 0.14.2, but react-redux depends strictly on 0.14.0.
",haizz,2015-11-13 11:36:51
188,2015-11-13 11:36:51,"I don't think this is correct.
It depends on `^0.14.0` which is a [caret range](https://github.com/npm/node-semver#caret-ranges-123-025-004) and includes any 0.14.x release.
- [More info about semver](https://github.com/npm/node-semver)
- [Semver calculator](http://semver.npmjs.com/)
",gaearon,2015-11-13 11:36:51
187,2015-11-13 05:52:58,"It seems that custom objects and redux do not mix very well (as mentioned in rackt/redux/issues/454). The paradigm being that objects should be immutable, and changes are made by creating new object instances. For simple objects, this works fine, but once objects become more complicated it becomes more cumbersome (both to code and runtime efficiency-wise) to copy objects just to introduce a change. A common recommendation is to use Immutable.js, but that means using a third party library just to overcome this hindrance.

As I understand it, the point of enforcing immutability seems to be driven by the virtues of functional programming. But JavaScript is not a purely functional programming language. In fact, its design is built around mutability. With the introduction of the `class` syntax in ES6, this is even more the case. If the recommendation is to ditch native language features in favor of using third party libraries, you're fighting against the tide.

I would like to use custom objects and mutability, for example, to reap the benefits of encapsulation and information hiding, or using third party libraries which themselves create custom objects that should be part of the state of the application. This is very difficult to do with the notion that new objects need to be created each time. In fact, it becomes a performance nightmare when using third party libraries where I have to create new objects from that library each time to fit redux's paradigm.

The only solution I've come to, is to use `version` properties in the state when modifying custom objects to force redux to notice a change in the state. For example:

<S_CODE_TOKEN>

This is a hack at best, and is difficult to track given the opaqueness of custom objects (which is the point of encapsulation).

Is there a better solution here that resolves these concerns in redux?
",jameslk,2015-11-13 11:50:41
187,2015-11-13 11:50:41,"> As I understand it, the point of enforcing immutability seems to be driven by the virtues of functional programming. But JavaScript is not a purely functional programming language. In fact, its design is built around mutability. 

Redux's design is built around immutability. It is an explicit design choice we want to enforce. You can use something other than Redux (e.g. Flux) if this choice does not work well for you.

> If the recommendation is to ditch native language features in favor of using third party libraries, you're fighting against the tide.

That JS currently doesn't provide value types doesn't mean it won't in the future. And ES6 array spread (as well as ES7 object spread proposal) make copying much less of a hassle in terms of syntax. In the meantime, yes, we're fighting against the tide, and judging by Redux (and React) popularity, quite successfully so.

> In fact, it becomes a performance nightmare when using third party libraries where I have to create new objects from that library each time to fit redux's paradigm.

I'm not sure why you'd want to put third-party objects into Redux state. This isn't how it's meant to be used. If your domain calls for it (e.g. geomapping data provided by third party lib you can't change etc), then maybe Redux isn't a good fit for your app.
",gaearon,2015-11-13 11:50:41
186,2015-11-11 18:21:29,,tgriesser,2015-11-12 22:18:11
186,2015-11-12 15:59:01,"might be good to add jsnext:main to the package json too?
https://github.com/rollup/rollup/wiki/jsnext:main
",danmartinez101,2015-11-12 22:18:11
186,2015-11-12 19:25:13,":+1: on adding `jsnext:main`
",gaearon,2015-11-12 22:18:11
186,2015-11-12 22:17:11,"Added!
",tgriesser,2015-11-12 22:18:11
186,2015-11-12 22:18:14,"Thanks.
",gaearon,2015-11-12 22:18:11
185,2015-11-11 17:06:41,"Alternate approach to #179 for consideration, adds a ~~`connectFactory`~~ `connectComponent` which `connect` will wrap,  allowing for unique selectors per-component instance. Existing use of connect will work the same as it does currently.
",tgriesser,2016-02-02 12:00:59
185,2016-01-27 20:14:00,"What if instead we checked the return type of `mapStateTo*` functions when they are invoked for the first time. If the return type is a function rather than an object, assume we are dealing with a factory. This would be backwards compatible and wouldn't require a new top-level export. Am I missing something?
",gaearon,2016-02-02 12:00:59
185,2016-01-27 22:22:54,"Oh, good shout. I don't think you are missing anything. I just hacked together a quick test for mapStateToProps, and it seems like it would be a reasonable solution.
",ellbee,2016-02-02 12:00:59
185,2016-02-02 11:58:30,"@tgriesser Would you be interested in implementing https://github.com/rackt/react-redux/pull/185#issuecomment-175832321 as an alternative approach? Would it solve your problem?
",gaearon,2016-02-02 12:00:59
185,2016-02-02 12:00:59,"I’ll close this PR because I don’t plan to merge it as is but I’m happy to consider merging https://github.com/rackt/react-redux/pull/185#issuecomment-175832321 which should solve the same problem.
",gaearon,2016-02-02 12:00:59
184,2015-11-11 16:59:08,"Hey, strange error.

I updated to react native 0.14.2 (from 0.13.2) and to react-redux 4.0.0 and

The simulator screen stays white and chrome debug shows me this:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

What I did: removed every stain of system node and io.js and reinstalled nvm. My only global installed node module is now react-native-cli.

I prepared a minimal complete example where I just require the Provider. 

<S_CODE_TOKEN>

You find it here: https://github.com/klausbreyer/redux-react-debugging-completly-new

Really clueless what to do now.
",klausbreyer,2015-11-13 11:41:09
184,2015-11-12 05:26:19,"Oh, I am getting the same error
",montogeek,2015-11-13 11:41:09
184,2015-11-12 06:13:59,"Issue also being discussed in: https://github.com/facebook/react-native/issues/4022
",adrianrego,2015-11-13 11:41:09
184,2015-11-13 02:12:33,"Same issue while upgrading from  ``""react-native"": ""^0.13.1""` to `""react-native"": ""^0.14.2""`
",nodkrot,2015-11-13 11:41:09
184,2015-11-13 08:58:29,"Redux 4 does not support react native.
Vyacheslav Alayev notifications@github.com schrieb am Fr., 13. Nov. 2015
um 03:12:

> Same issue while upgrading from ""react-native"": ""^0.14.2"" to `""react-native"":
> ""^0.13.1""
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/rackt/react-redux/issues/184#issuecomment-156298340.
",klausbreyer,2015-11-13 11:41:09
184,2015-11-13 11:41:09,"This is definitely not our issue.

First of all, **React Redux 4 does not support React Native yet.** Use React Redux 3.x instead.
We say this in README:

<img width=""954"" alt=""screen shot 2015-11-13 at 14 39 59"" src=""https://cloud.githubusercontent.com/assets/810438/11145221/70d7dcb4-8a14-11e5-9834-890d5a9bd6f5.png"">

and in [4.x release notes](https://github.com/rackt/react-redux/releases/tag/v4.0.0):

<img width=""929"" alt=""screen shot 2015-11-13 at 14 40 41"" src=""https://cloud.githubusercontent.com/assets/810438/11145225/841d270c-8a14-11e5-8c51-34cbeba705d9.png"">

There is nothing we can do here until https://github.com/facebook/react-native/issues/2985 lands. Keep using React Redux 3.x.
",gaearon,2015-11-13 11:41:09
184,2015-11-13 11:42:18,"As for why you see this specific error, I don't know. We rely on `process.env.NODE_ENV` being polyfilled in React Native which was true for quite some time. If you still have this error even with React Redux 3, it's a React Native issue.
",gaearon,2015-11-13 11:41:09
184,2015-11-23 01:46:03,"> Use React Redux 3.x instead. ... If you still have this error even with React Redux 3, it's a React Native issue.

I can confirm that this issue is also occurring with react-redux `3.1.0` and react-native `0.14.2`. Unfortunately, following the instructions for scaffolding a new project gets you RN `0.14` by default. So until RN `0.15` comes out, it doesn't look like it'll be possible to try out a new project with redux and RN.
",psbanka,2015-11-13 11:41:09
184,2015-11-23 07:41:53,"Please refer to https://github.com/facebook/react-native/issues/4022. Maybe you have `react` in `node_modules` or need to clear the cache. https://github.com/facebook/react-native/issues/4022#issuecomment-156595431
",gaearon,2015-11-13 11:41:09
183,2015-11-11 00:48:34,"Adds new `arePropsEqual` option, defaulting to `shallowEqual` if not provided. 

Docs & test included!
",tgriesser,2016-01-28 00:18:20
183,2015-11-11 01:13:47,"What's the value proposition here? What comparison function besides `shallowEqual` would a person reasonably use?
",acdlite,2016-01-28 00:18:20
183,2015-11-11 01:14:51,"@acdlite I believe it's about enabling per-component memoization: #179, #180, #182
",gaearon,2016-01-28 00:18:20
183,2015-11-11 01:24:34,"Oh okay that makes sense to me. So this is basically React Redux's version of `shouldComponentEqual` but instead of preventing re-renders it's preventing Connect from re-computing state selection and action creator props (which in turn helps prevent re-renders, in addition to firing selectors and re-binding action creators).

Could we rename the option to be more precise? The name `arePropsEqual` gives the impression that it may be used to implement `shouldComponentUpdate`. Maybe `shouldConnectUpdate`?
",acdlite,2016-01-28 00:18:20
183,2015-11-11 01:26:01,"I think we've concluded it's actually not possible to do the per-component memoization without a global LRU cache as @ellbee [mentions here](https://github.com/rackt/react-redux/pull/179#issuecomment-155565193), so this would be the next best thing.

@acdlite I typically like to use a one layer deeper shallow `===`. I have a lot of connected components and selectors which have plain Arrays as return values, and so it ends up there's a lot more unnecessary updating going on than there'd need to be if we could just check the returned Array or Object props are themselves shallow equal.

I've found the amount of time it takes to do an extra shallow compare of a few Arrays is virtually nothing compared to the expense of React going through an update cycle.
",tgriesser,2016-01-28 00:18:20
183,2015-11-11 01:29:56,"> I've found the amount of time it takes to do an extra shallow compare of a few Arrays is virtually nothing compared to the expense of React going through an update cycle.

If we're optimizing render cycles, that can be addressed using `shouldComponentUpdate` on the connected component, right?

If we're optimizing selectors / action creator binding, then this option makes sense.
",acdlite,2016-01-28 00:18:20
183,2015-11-11 01:42:28,"It's sort of both, but yes if the connected component is receiving props containing Object/Array values, I'd imagine depending on the use case it too could benefit from doing a slightly more sophisticated `arePropsEqual` to avoid unnecessary `updateStateProps` / `updateDispatchProps`.
",tgriesser,2016-01-28 00:18:20
183,2015-11-11 08:10:47,"This looks reasonable to me.
",ellbee,2016-01-28 00:18:20
183,2015-11-11 16:57:42,"@ellbee updated, although before we go with this (although I do think it'd be a nice option to configure), I've got one more idea on an approach for #179 that wouldn't be too intrusive.
",tgriesser,2016-01-28 00:18:20
183,2015-11-12 19:49:35,"@tgriesser Appreciate the thoroughness of trying out all these approaches! I wish I had some time right now to look at this and give some thoughts, but something's come up and I'm not going to have any 'github time' at all in the next few days :disappointed:
",ellbee,2016-01-28 00:18:20
183,2015-11-12 22:24:24,"@ellbee no worries / no rush, whenever you get around to it! I've had the same problem with my own projects lately, have no problem working off of a fork.

I really appreciate a project which takes longer to figure out the simplest solutions rather than to just merge everything - keep up the great work all! :+1:
",tgriesser,2016-01-28 00:18:20
183,2015-11-24 19:59:49,"@tgriesser Assuming we can think of an acceptable name for the option I think I like this PR the best; it doesn't add to the top level API and changes to existing code are minimal.

Coming at it from the `Reselect` angle, would a selector like the following a) work b) be performant for your use case? It occurs to me that in the common case there is probably a prop (or a few props combined) that will uniquely identify an instance of the component and can therefore be used as a key for the cache (I suppose a key could be purposely added to the props if this is not the case). I have been benchmarking a few different things and this one seems pretty good.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

The `hashFn` and ignored parameter in the example is hacky but if this does actually turn out to be a usable solution I will do something with `Reselect` to support this in a nicer way (probably somehow passing the props directly to the `hashFn`).
",ellbee,2016-01-28 00:18:20
183,2015-11-24 20:11:21,"> It occurs to me that in the common case there is probably a prop (or a few props combined) that will uniquely identify an instance of the component and can therefore be used as a key for the cache 

:+1:
",gaearon,2016-01-28 00:18:20
183,2015-11-25 15:34:11,"> @tgriesser Assuming we can think of an acceptable name for the option I think I like this PR the best; it doesn't add to the top level API and changes to existing code are minimal.

Ah cool, thanks for sharing this does look pretty neat - I'll need to dig in a bit and see how this ends up working in practice.

At first glance I still believe it requires you to know too much about the shape of the component props you're connecting to in order to properly use the cache. If a key is required to make guarantees it seems it'd be leaking the selector implementation details into the component. While it probably works well it, my initial impression is that it's the wrong place to be solving the issue of having every connected component instance share a singleton selector.

Top level API concerns aside (and I'd contend it's not much of an addition since it's really a higher order `connect` - analogous to `createSelectorCreator` in `Reselect`) did you get a chance to look at what all #185 does? It passes `connect` through `connectComponent`, providing an outlet for solving the underlying issue with no change to the current API use.
",tgriesser,2016-01-28 00:18:20
183,2015-11-25 20:58:55,"> At first glance I still believe it requires you to know too much about the shape of the component props you're connecting to in order to properly use the cache. 

Yeah, you do have to specify how to pick out the ""cache key"" from the props, but you already have to know the shape of the props to write the selector. And if you aren't using props in the selector then you don't have the problem in the first place.

> If a key is required to make guarantees it seems it'd be leaking the selector implementation details into the component.

I am struggling to think of a practical situation where you would have to add a dedicated ""cache key"" prop, I think that that an existing prop (or some combination of existing props) should be enough to define the key, although this is probably a failure of imagination on my part. 

> While it probably works well it, my initial impression is that it's the wrong place to be solving the issue of having every connected component instance share a singleton selector.

I don't see a problem with a singleton selector that has a cache so I think our instincts differ on this (although I concede that maintaining a selector library means I am probably a little biased to the selector based solution so I am happy to hear arguments that may persuade me otherwise :smile:). One scenario in which the caching selector may be preferable is if there are 10 components with one set of props, and 10 components with another set of props. In this case the selector computation would run twice for every state update rather than the 20 times it would run if selectors are being created for each component. 

> Top level API concerns aside (and I'd contend it's not much of an addition since it's really a higher order connect - analogous to createSelectorCreator in Reselect) did you get a chance to look at what all #185 does? It passes connect through connectComponent, providing an outlet for solving the underlying issue with no change to the current API use.

The thing I am unsure about with #185 is whether it is useful enough outside of this (possibly niche) use-case to warrant an addition to the top level API. It is also a bigger change (in terms of lines of code) than this PR, and in my opinion makes the code a little harder to understand. On the plus side it is probably easier to explain from a documentation point of view. Can a case be made that it is also more general and therefore enables more use-cases than this PR? It seems like it should but I can't think of examples.

Is #185 your preference?
",ellbee,2016-01-28 00:18:20
183,2015-12-08 16:43:12,"> Yeah, you do have to specify how to pick out the ""cache key"" from the props, but you already have to know the shape of the props to write the selector. And if you aren't using props in the selector then you don't have the problem in the first place.

So the thing is, I'm actually creating selectors in a `pureRender` HOC (so I don't need to re-generate a ""factory"" selector), and passing the selectors as props, so they're already sort of specific to that component (interested in any feedback about this idea).

<S_CODE_TOKEN>

I'm sure the LRU cache could be configured to work here, it'd just be a lot uglier.

The issue is that when different prop selectors are used against the same structured selector, it invalidates the final structured selector's memoization pretty much every time. I'm using a single decorator which combines `connect` and `createStructuredSelector` with the approach from #185, just because it's very convenient to express:

<S_CODE_TOKEN>

I think #185 would be my preference, just because it solves the problem more generally in one place, as opposed to going through the ~150 or so `selectors.js` and thinking about the cache for each. I also don't want to rush any decisions here and would totally be fine with just discussing more / thinking on it for a bit.

Also might be worth getting some benchmarks to make sure that any changes aren't major regressions for common cases... I could take a shot at that in a week or two once I have a bit of extra time.
",tgriesser,2016-01-28 00:18:20
183,2015-12-09 20:38:44,"Ah, thanks for writing that up. Interesting to see your use case. I'll take a closer look over the weekend when I get some free time.

I think benchmarks would be cool if you have the time.
",ellbee,2016-01-28 00:18:20
183,2015-12-17 04:38:34,"(I am coming from similar issue in `reselect`)

Let me do a recap. In short, all we want is support per-instance memoize function. I think there are few things we could do:
- Per-instance memoize function (cache bound to the instance, not ""global"")
- Per-instance selector function (since memoize function's lifecycle is bound to the selector, i.e. every selector will have their own memoize)
- LRU cache, IMHO, housekeeping and hashing takes too much effort

Since `react-redux` is designed not to expose the component instance (e.g. when `mapStateWithProps` is called, `this` is `undefined`, and, `stateProps` returned from `mapStateWithProps` will not come back again as `ownProps`), it become very difficult to maintain a per-instance selector/memoize.

@tgriesser suggested we could hold something per-instance by either:
- Keep selector as a props (search `__valueSelector` in this thread), but it requires parent component to understand what data to ""bind"", or we need to create another wrapper class
- #185 ""Thunk"" approach, `connectComponent` create the actual selector when the component is created

I like #185 ""thunk"" approach more because ""props"" approach requires another wrapper or knowledge in parent. ""Thunk"" approach is cleaner.

Consider the following nested selector scenario, `quotationSelector` is a selector shared amongst few pages. And `welcomePageSelector` is a selector only used by the welcome page.

In the old days, we write something like this, and this doesn't works well with multiple instances:

<S_CODE_TOKEN>

This doesn't works very well if there are multiple components on the page and each have different props. The memoize function inside `createSelector` will always cache miss.

Then in the new days (with ""thunk"" approach):

<S_CODE_TOKEN>

Note that `quotationSelector` is created inside `welcomePageSelectorFactory`. Thus, the top-level selector maintains lifecycle of nested selectors (and memoize functions).

I am almost good with #185, except that the name `connectComponent` and `connect` is a bit confusing. I have no objection if we are going to obsolete `connect`.

Update:

In short, I think what we are doing is:
- In the old days, `ComponentClass` holds a reference to `selectorInstance`, so every `componentInstance` share the same `selectorInstance`
- What we really want, `ComponentClass` holds a reference to `SelectorClass`, so every `componentInstance` could have their own `selectorInstance` (if they really want, they could use singleton pattern to share the instance)

And we are finding ways, either:
- `selectorInstance` could identify independent `componentInstance`, which seems impossible for now
- Every `componentInstance` will create their own `selectorInstance`, which #185 is doing
",compulim,2016-01-28 00:18:20
183,2015-12-22 16:16:14,"Yep, @compulim gave a great summary of the value proposition of this API addition, and why I believe #185 is correct solution to proper memoization per component instance without needing to alter the existing `connect` implementation. I just updated against the current master, all tests passing.

> I am almost good with #185, except that the name connectComponent and connect is a bit confusing.

Totally. I am up for changing this, and wanted to see what anyone else thought might be a good name. I initially had `connectFactory`, maybe that'd be better. Or perhaps `createConnector`? Anyone have any other suggestions?

> I have no objection if we are going to obsolete connect.

I don't think changing the current `connect` implementation is the right option here, since it's a very common approach everyone uses, in the case where you're using both `props` and `state` and want to properly memoize, I think exposing this additional top level function is the right approach.
",tgriesser,2016-01-28 00:18:20
183,2015-12-22 17:44:54,"@tgriesser, thanks so much for your work on this!

> I don't think changing the current connect implementation is the right option here, since it's a very common approach everyone uses
1. Should memoization per component instance not be the default way of implementing or using connect? What would be good reasons to use the default connect method instead?
2. As we go ahead with this, it would be very helpful to have an example in the README that explains how this works and ways to use this.
",oyeanuj,2016-01-28 00:18:20
183,2015-12-25 06:12:48,"@oyeanuj, for your question.

> 1. Should memoization per component instance not be the default way of implementing or using connect? What would be good reasons to use the default connect method instead?

I think we should not break existing usages. But I do agree the current implementation is weak.

@tgriesser, I think `connectFactory` is better. But let's wait for @ellbee to make that final call.

Your code is good, I really hope to see it in the official branch sooner.
",compulim,2016-01-28 00:18:20
183,2016-01-04 19:48:18,"+1 to getting this merged soon! @ellbee? :)

@tgriesser What documentation do you think we need in the guide/docs for this?
",oyeanuj,2016-01-28 00:18:20
183,2016-01-04 22:13:39,"@oyeanuj Yeah, sorry for not being responsive on this, been super busy :frowning: I am going to make some time in the next couple of days to get to all my loose ends.
",ellbee,2016-01-28 00:18:20
183,2016-01-13 22:09:31,"Any updates on this?  I've got a TON of uses for per-component memoization, and would love to see this become an option.
",markerikson,2016-01-28 00:18:20
183,2016-01-13 22:11:07,"I'm happy to get this in, but it doesn't merge cleanly.
",gaearon,2016-01-28 00:18:20
183,2016-01-27 17:48:26,"@tgriesser do you need some help to bring this branch up-to-date?
",compulim,2016-01-28 00:18:20
183,2016-01-27 19:35:23,"@compulim I am happy to clean this up for this merging if this is the PR we want to use but there is also #185..

@gaearon #185 is another proposal for solving this issue, and although the discussion is happening on this PR, #185 seems to be the preferred proposal of the participants in this thread. #185 is not a breaking change, but it does introduce a new ""connect factory"" function to the API, while this PR only adds an option to `connect`. Is adding a new function to the API a deal breaker for #185? 

Both PRs look fine to me, so I don't have a big preference.
",ellbee,2016-01-28 00:18:20
183,2016-01-27 20:14:41,"Does https://github.com/rackt/react-redux/pull/185#issuecomment-175832321 make any sense?
",gaearon,2016-01-28 00:18:20
183,2016-01-28 00:18:20,"Closing in favor of https://github.com/rackt/react-redux/pull/185#issuecomment-175832321, assuming I'm not mistaken in that it would work.
",gaearon,2016-01-28 00:18:20
182,2015-11-11 00:24:53,"Similar to `createSelectorCreator` in reselect, provides `createConnect` to optionally wrap `connect` providing a custom implementation of `shallowEqual`. 

@ellbee thoughts? Are there any other functions that might be worth allowing customization of?
",tgriesser,2015-11-11 00:36:51
182,2015-11-11 00:28:38,"Seems like an overkill to add new top-level API when we have `options`.
Why not let user specify `options.arePropsEqual`?
",gaearon,2015-11-11 00:36:51
182,2015-11-11 00:36:51,"Ah yep that'd work too, I thought maybe we were looking to avoid new options :)

Will reopen with that.
",tgriesser,2015-11-11 00:36:51
182,2015-11-11 01:08:59,"New options are better than new top-level APIs :wink:
",gaearon,2015-11-11 00:36:51
181,2015-11-10 21:55:13,"I'm not using Redux-Router (maybe I have to?) but my router is wrapped by `Provider` and the store is being passed to that.
I'd like to read state and `dispatch` in the onEnter handler.
",kjs3,2015-11-11 01:16:21
181,2015-11-11 01:16:21,"Can you please ask this on StackOverflow or in React Router support channel?

We try to keep the issues for bug reports and feature requests.
It is also a question much more related to React Router than React Redux.
",gaearon,2015-11-11 01:16:21
181,2015-12-14 03:44:47,"@kjs3 did you get anywhere with this, or post to stack-overflow, etc?

i was just trying to figure out what a redux-friendly version of the [auth-flow example at react-router](https://github.com/rackt/react-router/blob/master/examples/auth-flow/app.js#L122) might look like, and i found my self trolling the react-redux issues for info on that as well.

**edit**: nvm, found [your stack-overflow post](http://stackoverflow.com/questions/33643290/how-do-i-get-a-hold-of-the-store-dispatch-in-react-router-onenter), sorry about that...
",tony-kerz,2015-11-11 01:16:21
181,2015-12-14 23:27:55,"@tony-kerz I ended up answering my own stack overflow question. Let me know if it's at all unclear.
",kjs3,2015-11-11 01:16:21
181,2015-12-15 02:42:11,"hey kenny, 

thanks for the follow-up!

i'm in a bit of a pickle with my current setup, in that, i'm using [redux-router](https://github.com/rackt/redux-router), and the current configuration i have uses `routes` to construct the store, so i think i'm in some weird race-condition.

i actually copied the basic initialization structure from [the `real-world` example](https://github.com/rackt/redux/blob/master/examples/real-world/store/configureStore.dev.js#L13) in the redux repo,
here is [a compare](https://github.com/rackt/redux/compare/master...tony-kerz:tk/on-enter?expand=1) which shows the changes i made in an attempt to get a ref to `store` in `onEnter`.

when i run the modified example above, this console output shows that the reference to `store` in `routes.js` is in some kind of limbo, where-as the reference in `index.js` looks legit:

<img width=""672"" alt=""screen shot 2015-12-14 at 9 22 50 pm"" src=""https://cloud.githubusercontent.com/assets/1223231/11800379/e31798b6-a2a9-11e5-87c9-8622d65b05f3.png"">

full disclosure, i'm only kind of an intermediate javascript guy, so i'm open to any suggestions from the pros to reorganize this setup to skirt the timing issues.

best,
tony.

**update**: swapped out redux-router with [redux-simple-router](https://github.com/jlongster/redux-simple-router), went with [your strategy](https://github.com/tony-kerz/redux-scratch/blob/master/app/router/routes.jsx#L14) and it worked like a champ, thx!
",tony-kerz,2015-11-11 01:16:21
180,2015-11-09 19:02:35,"So ultimate goal of #179 was to be able to add a layer of memoization on the selector - this PR does just that, if there is a function provided as a `memoize` option, the selector is passed through that function at instantiation and attached to the component instance. If `memoize` option is not provided ~~the default is identity~~ the function is attached directly to the component.

I moved a bit of the construction of the class to `componentWillMount` so we have a method to call in `componentWillUpdate` to re-attach the functions on hot reloading.
",tgriesser,2015-11-09 20:29:44
180,2015-11-09 20:29:44,"Actually, this approach doesn't work either because it uses the same function for both mapState and mapDispatch, reopening #179.
",tgriesser,2015-11-09 20:29:44
179,2015-11-08 19:16:04,"Adds two new options, `stateThunk` and `dispatchThunk`. When set to true, it signifies that the value of `mapStateToProps` or `mapDispatchToProps` are thunks, called in the constructor & return values stored on the connected component class.

The use case comes from reselect - I noticed that although functions are memoized, when using `props` it destroys the utility of the memoziation feature. The idea here is that each connected component would return a unique memoized selector, rather than sharing one between all instances of a component and ending up with a ton of cache misses.

So instead of:

<S_CODE_TOKEN>

You'd do:

<S_CODE_TOKEN>
",tgriesser,2015-11-11 00:25:14
179,2015-11-09 00:00:31,"Can you please elaborate on usage? I don't quite understand this.
@ellbee Is there a way to solve this problem without changing React Redux API? I don't want it to “know” about the fact that user has Reselect, this feels wrong.
",gaearon,2015-11-11 00:25:14
179,2015-11-09 00:46:15,"It isn't necessarily specific to Reselect. 

The issue is that in order to properly memoize the  `mapStateToProps` call, the selector needs to have knowledge of the component it's connected to, otherwise the same function is used for all instances of the component and it can be extremely inefficient if the selector uses props.

This seemed like the best way to go about it, without exposing too much information about the component to the `mapStateToProps` call. In an application where I have ~300-400 connected components it's cut update time from ~20ms to less than 1.
",tgriesser,2015-11-11 00:25:14
179,2015-11-09 11:28:48,"OK, I get the use case now. Can this be solved as a wrapper around `connect`? Or by any other means than adding an option? Options are the last resort. Even more so if they change existing argument semantics. 
",gaearon,2015-11-11 00:25:14
179,2015-11-09 11:50:02,"A wrapper around `connect` is my initial thought here too. I'm going to give it a try and will report back.
",ellbee,2015-11-11 00:25:14
179,2015-11-09 11:50:44,"@ellbee Appreciate you taking a look. Thanks. :100: 
",gaearon,2015-11-11 00:25:14
179,2015-11-09 12:29:11,"> Can this be solved as a wrapper around connect? Or by any other means than adding an option?

Yep, latest commit just adds an `assignMapFunctions` method on the component:

<S_CODE_TOKEN>

This eliminates the need for any additional options and allows the user to wrap this method on the component and wrap/re-assign the `mapStateToProps` and `mapDispatchToProps` functions as desired.

Let me know if this seems like a reasonable approach, and if so I can cleanup the commits.
",tgriesser,2015-11-11 00:25:14
179,2015-11-09 12:32:34,"I don't understand your latest proposal yet and I'm busy with something else, so I trust @ellbee to make the right call on this.
",gaearon,2015-11-11 00:25:14
179,2015-11-09 17:46:40,"I have checked out the PR, and the approach looks reasonable but I am concerned that the `memoize` HOC in the tests is accessing private `react-redux` API, and I can't currently see how it would work if you don't access private API.

I was also wondering if we can achieve the same thing without making any changes to `react-redux`? I knocked together the following HOC to be called in place of `connect` that seems to work for a simple test project:

<S_CODE_TOKEN>

Advantages of the approach above: No changes to `react-redux` needed.
Disadvantages: Creates a new wrapper class for each instantiation of the component

Advantages of the PR: Does not create a new wrapper class for each instantiation of the component
Disadvantages: Changes to `react-redux` needed. Still requires a wrapping HOC to be written. Looks like the wrapping HOC needs to use non-public internal `react-redux` API.

@tgriesser What do you think? Is creating a new wrapper class every time going to be a problem? Have I missed anything?
",ellbee,2015-11-11 00:25:14
179,2015-11-09 17:50:31,"Creating a new class is definitely a big problem: React will bail out of reconciling such components. So you won't be able to handle `componentWillReceiveProps` because every instance is of a different class.
",gaearon,2015-11-11 00:25:14
179,2015-11-09 17:57:54,"Blurgh, yes of course, it is not even going to try if they are of different types. Ok, back to the drawing board.
",ellbee,2015-11-11 00:25:14
179,2015-11-09 18:21:00,"> I have checked out the PR, and the approach looks reasonable but I am concerned that the memoize HOC in the tests is accessing private react-redux API, and I can't currently see how it would work if you don't access private API.

Yeah it's sort of a tough one... I don't think there's a way to achieve it without changing something about the connect implementation - it's really more of a matter of what's cleanest / least invasive. I've got another approach that might be a little better I'll open a separate PR for.
",tgriesser,2015-11-11 00:25:14
179,2015-11-09 19:02:50,"Closing in favor of #180
",tgriesser,2015-11-11 00:25:14
179,2015-11-09 20:32:01,"So after thinking about it for a bit, I wouldn't mind if the answer were that this behavior is a non-goal for `react-redux`. 

I could fork and create a `react-redux-memoized` or something which assumes `mapStateToProps` and `mapDispatchToProps` are thunks and leave the api here alone.
",tgriesser,2015-11-11 00:25:14
179,2015-11-09 21:09:16,"I agree with you, I can't see a way to do this without making some changes to `connect`.

Just out of interest, is there a reason why using Reselect's `createSelectorCreator` and a memoization function with a larger cache isn't feasible for you here?
",ellbee,2015-11-11 00:25:14
179,2015-11-09 21:27:40,"I'm actually using `createSelectorCreator` to provide a shallow equal comparison for object / arrays one level deep which has worked well, but for the application i'm working on the cache would grow really big really fast if there was no way to clear it when a component unmounts and also I'd assume it'd also be impossible to do checks if you had no idea what component you were trying to check props against, without running into stale cache issues.
",tgriesser,2015-11-11 00:25:14
179,2015-11-10 08:13:41,"Ah, ok. It is useful to know that `createSelectorCreator` didn't work for you. I am thinking about trying to find (or create) a performant memoization function with a bounded cache that would be useful in this scenario. Allowing `createSelectorCreator` to take a custom memoize function was supposed to be flexible enough that it could deal with these kinds of scenarios, but I suppose it doesn't really deal with them at all and makes it the end users problem. I think it would be nice if Reselect could be a bit more helpful here and maybe offer some different memoization strategies for different scenarios.

>  I'd assume it'd also be impossible to do checks if you had no idea what component you were trying to check props against, without running into stale cache issues.

Interesting. Could you explain this point a bit more please? I'm not sure I follow why I would need to know what component I am checking props against.

> I could fork and create a react-redux-memoized or something which assumes mapStateToProps and mapDispatchToProps are thunks and leave the api here alone.

This may be the best option if we can't find a slightly cleaner way to get this in. I'm not keen on encouraging the use of the private API. Even if we leave it undocumented, people might start using it if it can be found in the tests.
",ellbee,2015-11-11 00:25:14
179,2015-11-10 15:45:51,"> Interesting. Could you explain this point a bit more please? I'm not sure I follow why I would need to know what component I am checking props against.

Once you move beyond a single prop or combo of props it becomes ugly and quite expensive to need to serialize props to use as a cache key. It seems it'd be simpler if it could be more like react's `shouldComponentUpdate`, where you just locally have current props and next props and can figure it out from there.

Unless I'm missing something obvious (which I might be), I don't think it's something that can be resolved without changing the design of react-redux quite a bit.

Unrelated, but I was curious what the reasoning for the undocumented `recomputations` function in reselect... was it for testing purposes only or was there some other purpose I was missing?
",tgriesser,2015-11-11 00:25:14
179,2015-11-10 21:04:03,"From the point of view of Reselect, I was thinking about something along the lines of how Immutable-js allows objects to be a key in a Map (it basically tags the object with a non-enumerable id) to avoid serialization of large objects, combined with something like a LRU cache to avoid the cache size getting out of control. It may come to nothing, but I am going to give it a go.

Yeah, `recomputations` is purely there for testing.
",ellbee,2015-11-11 00:25:14
179,2015-11-11 00:25:14,">  combined with something like a LRU cache to avoid the cache size getting out of control. It may come to nothing, but I am going to give it a go.

Ah okay so that actually may work fine. I took another look at the code and I'm realizing what I'm **actually** after is a way to configure the shallowEqual comparison in react-redux similar to what is possible in reselect. Just opened #182 to discuss.
",tgriesser,2015-11-11 00:25:14
179,2016-02-02 12:01:33,"FYI I closed #185 because I don’t plan to merge it as is but I’m happy to consider merging https://github.com/rackt/react-redux/pull/185#issuecomment-175832321 which should solve the same problem if somebody gets to implementing it.
",gaearon,2015-11-11 00:25:14
179,2016-02-04 19:23:07,"This is implemented in #279 and shipped in 4.3.0.
Thanks to everyone!
",gaearon,2015-11-11 00:25:14
179,2016-02-04 19:48:39,":tada: Nice work @tgriesser!
",ellbee,2015-11-11 00:25:14
178,2015-11-07 02:52:22,"Seems like in your other projects, you've removed the invariant dependency. It would be nice to do it here as well if you get the chance. We're using systemjs builder to include react-redux, so it ends up needing to map the invariant dependency, and causes some issues when process is not defined. We can work around these, but it'd be nice to just minimize the dependency graph as much as possible.

I could make a PR if you want, but it's pretty simple, and it's up to you if you have a good reason to still have it.
",dzearing,2015-11-07 12:03:30
178,2015-11-07 12:03:30,"Even if we remove the `invariant` dependency we're still going to use `process.env.NODE_ENV` check to tell production from development builds. That's what React does too. When you use CommonJS build from NPM, you're supposed to shim it (e.g. via build tools like `envify` or webpack's `DefinePlugin`).

If you absolutely don't want to shim `process.env.NODE_ENV` yourself, please feel free to use the envified UMD builds in `react-redux/dist` (which is available in the NPM package).
",gaearon,2015-11-07 12:03:30
177,2015-11-05 18:07:02,"Like the title says. I wrote an ES6 class that I wanted to use to store state in my application.

However, upon setting it in my redux reducer, and returning it inside my connected component, I get this error message:

<S_CODE_TOKEN>

Am I doing something wrong? Is this supported? Thanks for your time!
",jjzazuet,2015-11-05 18:55:17
177,2015-11-05 18:55:17,"No, you need to return a plain object because _its keys will be used as props_.
If you want to use a custom class for props, you need to pass it _as a specific prop_:

<S_CODE_TOKEN>
",gaearon,2015-11-05 18:55:17
177,2015-11-05 19:00:26,"Ah OK, cool. Thanks!
",jjzazuet,2015-11-05 18:55:17
176,2015-11-05 15:33:37,"Hey there. I've read through all the troubleshooting steps and haven't been able to solve this. Hoping for some insight here...

I have a bunch of components connected in my app, with react-redux working beautifully. However, there are a couple of components that receive an array of objects as a prop, but they do not trigger a state change when they receive an empty array. Only when the array is populated. Is this expected behavior?

This is one of the mapStateToProps examples (using ImmutableJS):

<S_CODE_TOKEN>

If I log `state.specialties.get('selected')` in there I can tell I'm getting something, but when it's an empty array my component does not re-render, which I need it to do. Any thoughts?
",lomteslie,2015-11-06 15:39:23
176,2015-11-05 18:56:56,"No, this is not the expected behavior.
We need more information.
Can you show the code of the related reducers?
",gaearon,2015-11-06 15:39:23
176,2015-11-05 19:45:54,"Sure thing...

<S_CODE_TOKEN>
",lomteslie,2015-11-06 15:39:23
176,2015-11-05 23:15:05,"What is `action.payload.specialties`?
Any change this is something that can get mutated from outside the reducer at a later point?

Please provide a reproducible example to help me understand the issue.
",gaearon,2015-11-06 15:39:23
176,2015-11-06 15:39:23,"I'll close for now because I don't currently believe this is an issue in React Redux.
If you find a way to reproduce (or make a failing test), I'll be happy to reopen.
",gaearon,2015-11-06 15:39:23
176,2015-11-06 15:44:45,"Okay, your comment helped us figure it out. It turns out we did have a component (that maintains it's own state) that mutated the arrays along the way. Thanks for the help.
",lomteslie,2015-11-06 15:39:23
176,2015-11-06 15:45:07,":+1: Glad it works now, cheers.
",gaearon,2015-11-06 15:39:23
175,2015-11-05 15:25:46,"""Dumb"" components like this example seem to be an obvious place to use React 0.14 stateless functional components. This PR changes the example to use one.

I don't know if a stateful component was a concious choice, but I would prefer stateless in this situation and I think it should be considered for the example.
",sirreal,2015-11-05 16:03:39
175,2015-11-05 16:03:38,"@sirreal thank you :grin: It probably just hasn't been updated to 0.14 yet.
",omnidan,2015-11-05 16:03:39
174,2015-11-05 03:02:03,"Hello,

Im currently trying to `connect` a component with `react-redux`, but I'm having a bit of trouble and I'm not sure where I may be going wrong. (I'm using an alternative way to declare components without using classes https://gist.github.com/jquense/47bbd2613e0b03d7e51c) Heres the Component I'm trying to connect:

<S_CODE_TOKEN>

Just in case you're wondering I have wrapped the `Provider` around the root component and passed it the store. I get the following error from this code:

<img width=""1280"" alt=""screen shot 2015-11-04 at 10 00 56 pm"" src=""https://cloud.githubusercontent.com/assets/8888991/10958760/981ab304-833f-11e5-8837-edc2e61b9c25.png"">

The odd thing is webpack itself is not reporting an error for `actions` not being defined.
",kennetpostigo,2015-11-05 19:03:16
174,2015-11-05 19:03:16,"Use a linter like ESLint, it would catch the error for you.
The error message is correct: you're using `actions` in your code which is never defined.
You can search for “actions” in the code and you will find it. :wink:

<img width=""724"" alt=""screen shot 2015-11-05 at 22 00 07"" src=""https://cloud.githubusercontent.com/assets/810438/10978535/9a9a2fd2-8408-11e5-8806-76814a0a7e89.png"">

**You probably meant to write `props.actions` there instead. Same for `userLeads`: you probably meant `props.userLeads`.**

However, there is no need to follow this pattern now that React 0.14 shipped.
Just write a functional component:

<S_CODE_TOKEN>

In React 0.14 you can write components this way.
",gaearon,2015-11-05 19:03:16
174,2015-11-06 18:53:53,"@gaearon do you have a link to the functional component in React 0.14?
",kennetpostigo,2015-11-05 19:03:16
174,2015-11-06 18:56:38,"It's described in release notes: https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html
",gaearon,2015-11-05 19:03:16
174,2015-11-06 21:00:30,"Thank you @gaearon !
",kennetpostigo,2015-11-05 19:03:16
173,2015-11-02 20:40:56,,ellbee,2015-11-03 00:27:40
173,2015-11-03 00:27:45,"Thanks.
",gaearon,2015-11-03 00:27:40
172,2015-11-02 18:35:50,"This can be reproduced locally with the following:

<S_CODE_TOKEN>

I can fix this by adding `""redux"": ""3.x""` to the package.json just above, but should react-redux be managing that for us?
",adsteel,2015-11-02 18:47:00
172,2015-11-02 18:47:00,"This has been resolved in latest version. Sorry!
",adsteel,2015-11-02 18:47:00
171,2015-10-30 20:07:42,"I'm totally new to redux... but it looks sick.

Seems to be an issue in the ""DevTools"". When I install and run ""real-world"" example, search for 'rackt', then click anything in DevTools, errors start appearing in the console:

Uncaught TypeError: Cannot read property 'location' of nullmapStateToProps @ App.js?7e8f:68

Version 3.0.4

To reproduce:
1) cd redux/examples/examples/real-world
2) npm install
3) npm start
4) Go to site in browser: http://localhost:3000/
5) Enter: 'rackt'
6) In the DevTools(redux's), click ""Reset""

Error occurs....
",gregberns,2015-10-30 22:47:09
171,2015-10-30 22:47:09,"Thanks for the report. I'd say you should file this with `redux-router`.

By default it sets `router` state field to `null`, but I think it should have initial value before first change action. The app should never see `null` state there, I think, but `RESET` effectively gets us back to the initial state. The same error will occur if you “toggle” action in DevTools.

@acdlite Ideas?
",gaearon,2015-10-30 22:47:09
170,2015-10-30 17:33:32,"I'd love to change the vocabulary to ""stateful"" and ""stateless"".
",ryanflorence,2015-11-14 10:01:35
170,2015-11-04 17:08:43,"I agree. The smart/dumb dichotomy never really made much sense to me.

Another option would be ""connected"" and ""unconnected"", since ""state"" could be confused with React component state. A component could have React state and not be `connect()`ed to the Redux store.
",erikras,2015-11-14 10:01:35
170,2015-11-05 13:40:37,"Imo ""connected"" and ""unconnected"" would be better, in fact I could write as follow:

<S_CODE_TOKEN>

It is stateless function component while it was connected to redux, so ""stateless"" might be kinda confusing.

+1 for ""connected"" and ""unconnected"".
",namelos,2015-11-14 10:01:35
170,2015-11-07 13:29:16,"I'm up for changing it but let's choose terms carefully.
",gaearon,2015-11-14 10:01:35
170,2015-11-07 13:29:53,"“Stateful” and “stateless” is a different, and not necessarily relevant distinction. A component may be stateful (e.g. holding a local form or “dropdown toggled” state) but not aware of Redux.
",gaearon,2015-11-14 10:01:35
170,2015-11-07 13:34:33,"“Connected” and “unconnected” component is closer to the current smart/dumb distinction, but it still has some confusion potential.

<S_CODE_TOKEN>

Is `Counter` connected in this example? Seems so. But wait, no, `Counter` is not connected—it's the component generated by `connect()` that is connected. We export it so for outside code, `Counter` export is a connected component, but `Counter` itself in this source file is not connected per se.

This is why I don't quite like saying “connected”. The argument to `connect()` is the _unconnected_ component, but the fact that it is passed to `connect()` makes it natural to assume _that_ is the “connected” component because it is _being connected_.
",gaearon,2015-11-14 10:01:35
170,2015-11-07 13:38:01,"One way out of this mess is to probably stop calling “dumb” component anything special, and call the “smart” components the **container components**. This is consistent with Flux and Relay documentation and API.
",gaearon,2015-11-14 10:01:35
170,2015-11-07 13:54:58,"Containers, in my mind at least, just click when it comes to understanding the distinction
",danmartinez101,2015-11-14 10:01:35
170,2015-11-07 14:09:15,"Another vote for container here. As well as being consistent with Relay, the term is also already used in the folder structure of the Redux examples.
",ellbee,2015-11-14 10:01:35
170,2015-11-08 00:55:03,"Khan Academy [calls these](https://github.com/Khan/style-guides/blob/master/style/react.md#make-presentation-components-pure) “logic components” and “presentation components”. This matches [what I originally meant](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0) by “smart” and “dumb” components (before Redux or support for functional components in React) although I'm not sure I'm fond of these names.
",gaearon,2015-11-14 10:01:35
170,2015-11-08 03:12:20,"Worth mentioning that the Flux website also uses the terms **controller-view** and **view**. I actually think those are good descriptors, except they reek of MVC.
",acdlite,2015-11-14 10:01:35
170,2015-11-08 03:33:17,"In my use I've started naming my connected components `ThingConnector`. If there is concern with renaming 'smart' to 'connected' perhaps 'connector' is a less ambiguous since it is a component which is intended to be `connect`ed. I also favor dropping 'dumb' as a descriptor. Every component that isn't a connector is 'dumb' or 'plain' implicitly.

In practice I connect things deeper in my tree and I don't name them al 'Connector' but then I am already eschewing the smart/dumb pattern there anyway
",gnoff,2015-11-14 10:01:35
170,2015-11-08 03:35:49,"For what it's worth I also like calling them container components.
",gnoff,2015-11-14 10:01:35
170,2015-11-11 00:03:48,"I agree with @gnoff about using the term ""container."" The terms ""smart"" and ""dumb"" definitely get the point across, but ""container"" is used elsewhere as @gaearon said (I'll throw recompose into the list as well) and does a better job describing the fact that the component is in fact wrapped by a higher-order component.

Personally I think it helps demonstrate the fact that everything is in fact a ""dumb"" component, but some of those are just wrapped in a container.
",davezuko,2015-11-14 10:01:35
170,2015-11-13 22:52:52,"Presentational Components and Container Components it is.
PRs to update docs here and in Redux docs are welcome.
",gaearon,2015-11-14 10:01:35
170,2015-12-29 09:18:39,"Hey, how about adding a reference to other-names-of-the-same-thing to the docs to avoid further confusion?

| Presentational Components | Container Components |
| --- | --- |
| dumb | smart |
| view | controller-view |
| stateless | stateful |
",mik01aj,2015-11-14 10:01:35
170,2015-12-29 13:24:38,"Happy to accept a PR.

However as I wrote above, presentational components aren't necessarily stateless.
It's just they're not concerned with fetching / retrieving data. But they may have local UI state.
",gaearon,2015-11-14 10:01:35
169,2015-10-30 17:11:43,,camsong,2015-10-30 17:52:51
169,2015-10-30 17:52:53,"Cool, thanks!
",acdlite,2015-10-30 17:52:51
168,2015-10-29 21:37:24,"I've been digging at this for hours now and I hope someone can help. Am I connecting nested components incorrectly? My intention is to have a dynamically swapped view that may be `<Child />` or at another point in time `<ChildTwo />`, but both of these will be connected components nested under a `<Parent />` (who is also connected).

root

<S_CODE_TOKEN>

parent

<S_CODE_TOKEN>

child

<S_CODE_TOKEN>

The behavior I am getting is that whenever Parent renders, Child will render as well - but it will not receive `dispatch` as a prop, or any of the results from the `mapStateToProp()` selector function. Instead I can hand down some props from the Parent - but that's not the point of having a connected component.

Is this not-intended (and therefor unsupported) use?
",aft-luke,2015-10-30 00:48:13
168,2015-10-30 00:48:13,"Turns out I was poorly implementing the root reducer, so a shallow compare for `shouldComponentUpdate` would incorrectly resolve.
",aft-luke,2015-10-30 00:48:13
167,2015-10-24 19:50:20,"Hi everyone, this is just a question,
I'd love to double check if I'm doing things right. I'm coming from ages of different frameworks, and I def want to avoid bad practices in the early stage.

I'm using this boilerplate: https://github.com/erikras/react-redux-universal-hot-example
and I'm writing in ES7.

I created:
- 1 reducer:    earlyUser.js
- 1 container:   landingPage.js
- 1 component:  registrationForm.js

In the landingPage, I'm including the methods from reducer in this way:

import { saveEmail, savePreferences, checkEmailExists } from 'redux/modules/earlyUser';

and I declare some handles

<S_CODE_TOKEN>

and in the JSX part I just pass to my component the handlers:

<S_CODE_TOKEN>

Now inside the component, I linked the form submission to this handler:

<S_CODE_TOKEN>

Now my question is, where should I attach the .then  and .catch of the promise returned ?
Ideally I'd like to do inside the component.js  something like 

<S_CODE_TOKEN>

Is that correct? 
",nicolabortignon,2015-10-24 21:11:18
167,2015-10-24 21:11:18,"This is a usage question. Please ask it on StackOverflow, you're much more likely to get a quality answer there.
",gaearon,2015-10-24 21:11:18
167,2015-10-24 21:21:22,"Done, for future references:

http://stackoverflow.com/questions/33323462/am-i-using-redux-correctly
",nicolabortignon,2015-10-24 21:11:18
166,2015-10-24 04:48:44,"I am curious why the umd module name for this library is ""ReactRedux"" instead of ""react-redux"" like the example code using `import ... from 'react-redux'`? I believe that this is causing module resolution errors with my Browserify-ed bundle.
",awendland,2015-10-24 05:48:57
166,2015-10-24 05:48:57,"My browserify configuration was incorrect. Sorry about raising this non-issue
",awendland,2015-10-24 05:48:57
165,2015-10-23 08:25:43,"My code base isn't entirely React-based, so there are points in which I want to use React components in a non-React context. In this situation I have a component that acts as an editor form; the form takes model data as an input, and the component has a 'getValue' method to get the model data back with the changes made on the form. 

To do this, I'm effectively using the method explained here:
https://facebook.github.io/react/tips/expose-component-functions.html

So...

<S_CODE_TOKEN>

However my component also uses react-redux, so the above actually looks like:

<S_CODE_TOKEN>

Plus, my Editor component has the `@connect` decorator. This appears to have the side-effect of hiding my component API. Is this a bug, or is there a way around this? 
",jamiewinder,2015-10-23 10:54:12
165,2015-10-23 10:54:12,"Component interface is props.
Imperative methods are an escape hatch and you should almost never use them.

The right way to implement this component is

<S_CODE_TOKEN>

and have it pass the value to `onChange`.
This way you don't need a ref and don't need to call methods.

That said if you're 100% sure you want to do it that way (non-React way), you can add `{ withRef: true }` as the fourth parameter of `connect()` and then you'll have access to the instance as `editor.getWrappedInstance().getValue()`. But this is an anti-pattern.
",gaearon,2015-10-23 10:54:12
165,2015-10-23 11:54:04,"Thanks, it works although it looks like I have to add the store as a prop rather than use the `<Provider>` component (unless there is a `getWrappedInstance` equivalent there?).

This is definitely a workaround, though your 'right way' is, I think, different to what I'm trying to do - I need some external code to _pull_ the value out of the editor rather than be notified of changes as they occur. Kind of like the difference between the 'value' property of an `<input>` versus capturing it on a 'change' event.
",jamiewinder,2015-10-23 10:54:12
165,2015-10-23 11:58:13,"Is “pulling” an expensive operation?
",gaearon,2015-10-23 10:54:12
165,2015-10-23 12:07:23,"Not really, but it has side effects. It basically validates the data entered, updates the UI to indicate any validation errors, and - if there any no errors - returns the value object (else null). Admittedly, it's a bit messy as this is a project where React is being introduced gradually. 

The reason it's a bit awkward in this case is that the 'Save' button is external to the editor (I'm using a third party dialog component which isn't React). As such, the logic in the Save button click handler is basically 'try and grab the current value from the editor component, then save it'.
",jamiewinder,2015-10-23 10:54:12
165,2015-10-23 12:17:35,"Yeah, well, the workaround you're using is the best you can have in this case.
As you transition to more React-ish code, you'll need fewer workarounds.
",gaearon,2015-10-23 10:54:12
165,2015-10-23 12:20:43,"Yes, hopefully! Thanks for your help.
",jamiewinder,2015-10-23 10:54:12
164,2015-10-21 14:41:11,"Hi, i'm pretty new at Redux, thanks for everyone working on it!

When i have a very frequent stream of actions (ex. dispatching actions on every mousemove event) the `connect` HoC will update my component for each of the actions which makes it choke. 
There is any best practice to schedule updates to the next requestAnimationFrame? The best thing that i can think of is wrapping the store i giving to the `Provider` in the way that is defers the subscibe callbacks until the next animation frame.
",azazdeaz,2015-10-21 15:43:35
164,2015-10-21 15:43:33,"Yeah, that's pretty much what https://github.com/tappleby/redux-batched-subscribe does.
",gaearon,2015-10-21 15:43:35
164,2015-10-21 16:28:01,"Oh, sorry i thought i was googling long enough before my question...
Thank you, it works great!
",azazdeaz,2015-10-21 15:43:35
163,2015-10-19 23:47:47,"To be honest I'm not sure if this is the right repo but I'm at an impasse and this is the most obvious place for now.

I have a [simple test repo](https://github.com/rockingskier/redux-problem).  It is heavily based off the redux-router [basic example](https://github.com/rackt/redux-router/tree/master/examples/basic) but simplified for this example.

Among other webpack-esque things the following react/redux libs are installed:

<S_CODE_TOKEN>

Fairly standard stuff.

There are two files worth looking at:

`index.jsx` - Basically a whole application
`App.jsx` - The main component exported to a separate file.

When run in one file, `index.jx` the application work as expected.  The component receives props from the `@connect`-ed store, all good and happy.  Routes run, props are passed, everyone gets what they want.

In the name of splitting things out for a real project I started by moving the main App component to a separate file.  When I do this however the `@connect`-ing doesn't appear to work.
This is first made clear by the Props warning that appears.

<S_CODE_TOKEN>

This points to `redux-router` however after adding some logging I can see that the `@connect` mapStateToProps function is not being called when exporting the component.

This all seems very odd to me but tbh it could point to any number of places.  The eco system is moving very quickly and its hard to keep up.

Is there an issue with `react-redux`, `@connect`, `webpack`, `babel`, `redux-router` or any of the (incredible) hot reloading features?
",rockingskier,2015-10-20 00:52:22
163,2015-10-20 00:52:22,"Thanks for reporting. Seems like the same issue as https://github.com/gaearon/babel-plugin-react-transform/issues/37 so I'll close it. You can work around it by renaming the import until it's fixed. I'll come back to this issue after fixing the underlying one to confirm that it worked.
",gaearon,2015-10-20 00:52:22
163,2015-10-20 08:59:14,"Glad to see someone has caught the issue and its not just me going mad.

MY aim is to not actually have the inline `App` Component so what exactly am I renaming as I cant see what would be conflicting.
",rockingskier,2015-10-20 00:52:22
163,2015-10-20 10:53:02,"You want to have two components named ""App"", one imported from App and another declared in index? The Babel plugin has a bug where it is confused by named import with the same name as something declared in the file. If you remove App from index it will work fine. But of course you can also disable Babel plugin until it is fixed. :-)
",gaearon,2015-10-20 00:52:22
163,2015-10-20 16:46:31,"Just the one `App`.

Defining the class inline with `@connect` works fine.

Moving the class to a separate file, still with `@conenct`, does not run the `mapStateToProps`.
Importing the so-called `@conenct`-ed App and then passing it through `connect(fn)(App)` again works.  Obviously now what I want to achieve.

But yes, removing `""plugins"": [""react-transform""],` from `.babelrc` works fine so I'll do that.

Thanks! Great work as always!
",rockingskier,2015-10-20 00:52:22
163,2015-11-04 09:52:46,"I have this issue but I dont have `react-transform`. My components are in different files -- es6 classes with `export default`. These are imported in various places. Also noticed that `@connect` doesnt seem to get executed in that neither the state or actions are available.
",adamscybot,2015-10-20 00:52:22
163,2015-11-04 10:07:49,"@adamscybot

Language features don't just ""stop working"" out of the blue. :-)

It's not something we can or should fix in the library. Most likely you're using decorator incorrectly but it's hard to say without code. Please create a StackOverflow question with code example and we will be happy to help. And try not using decorator syntax, instead following examples in the docs. 

It is unrelated to this issue. 
",gaearon,2015-10-20 00:52:22
163,2015-11-04 13:31:56,"@gaearon 

Indeed, the problem was actually because (after moving to babel 6) I was loading `babel-plugin-syntax-decorators` but not `babel-plugin-transform-decorators`. This setup doesn't throw any errors/warnings when it comes across a decorator.

For other reasons, it looks like decorators are broken anyway: https://github.com/babel/babel/issues/2702

But as you mentioned this is unrelated. Cheers!
",adamscybot,2015-10-20 00:52:22
163,2015-11-04 13:42:15,"Got it, thanks for the explanation!
",gaearon,2015-10-20 00:52:22
163,2016-03-05 03:03:10,"OK, so this is actually much more fun than I thought it was.

@rockingskier Not sure whether you’re still curious but here’s what happened.
1. You were using _both_ `react-hot-loader` _and_ `babel-plugin-react-transform` which is something I missed initially. I wouldn’t say it’s unsupported straight away but this definitely isn’t something we test for.
2. Because of this, both the component wrapped by `connect()` and the component returned by `connect()` were wrapped with [react-proxy](https://github.com/gaearon/react-proxy).
3. [Proxy tries to be smart to prevent double-wrapping](https://github.com/gaearon/react-proxy/blob/a8b0486bca3899e30995281c0b344c448aecefee/src/createClassProxy.js#L31-L35). It sets a hidden field on the class to look up its “current” proxy. 
4. Now comes the fun part. [`connect()` tries to be smart](https://github.com/reactjs/react-redux/issues/53) and hoists all static fields to the wrapping component _including the unfortunate proxy field_. So now proxies will think that `connect()`ed component has already been wrapped in a proxy, but will point to the inner component’s proxy. :sob: 
5. Nothing works.

I’ll look if I can fix it on `react-proxy` side. In the retrospect hoisting _all_ statics including non-enumerable ones was a silly decision, so we need to reconsider this in `connect()`.

The quick fix is to avoid using `react-hot-loader` and `react-transform-hmr` in a single project :smile: .
",gaearon,2015-10-20 00:52:22
163,2016-03-05 04:02:04,"I confirmed https://github.com/rockingskier/redux-problem as fixed by updating to `react-proxy@1.1.4`.
",gaearon,2015-10-20 00:52:22
163,2016-03-05 04:09:21,"@thejameskyle would so love this.
",gaearon,2015-10-20 00:52:22
163,2016-03-05 04:16:57,"_tries not to gloat_

...

IN YO FACE ABRAMOV!!!

(jk I luv u buddy)
",thejameskyle,2015-10-20 00:52:22
162,2015-10-18 17:17:53,"Now that Typescript supports JSX (with TSX), I'm excited to use React and Redux with it! However, I seem to be getting an issue when I try to wrap a React class with Provider. The code is as follows:

`Invariant Violation: onlyChild must be passed a children with exactly one child.`

The files I'm using are in [This gist](https://gist.github.com/psbanka/1b7df3850f8830b89873)

As I dug into the redux-react code, the error is being generated from this stanza:

<S_CODE_TOKEN>

And it turned out that `this.props.children` was a _function_ which returned a React element rather than a React element itself? I don't know how this could be occurring. Any suggestions would be appreciated!
",psbanka,2015-10-19 12:35:33
162,2015-10-19 12:35:33,"The code you're running is for Redux React 3.x.
The version you're using is 4.x.

4.x no longer allows function-as-a-child for `<Provider>` because the only reason we had it is for React 0.13 compat, and now we require React 0.14.

https://github.com/rackt/react-redux/releases/tag/v4.0.0

You need to change

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>
",gaearon,2015-10-19 12:35:33
162,2015-10-20 16:07:36,"Thanks for the quick answer!
",psbanka,2015-10-19 12:35:33
162,2016-06-17 10:05:41,"I'm facing the same issue. Can't solve it!!
",paramsingh88,2015-10-19 12:35:33
162,2016-10-09 20:16:50,"@paramsingh88 can you paste your code? I was getting this same error message but that's because I put a comment between the <Provider></Provider> tags.

**FROM**

<S_CODE_TOKEN>

**TO**

<S_CODE_TOKEN>

The second code block works fine for me after I removed this comment `{/* Provider component from react-redux */}`
",dannypule,2015-10-19 12:35:33
161,2015-10-18 05:13:59,"I am trying to wrap the `this.props.dispatch` function so that I can intercept all the actions that a component `dispatch`es and do _something_ with them. I have created a mixin that adds some default lifecycle methods and does much more than I showed below for simplicity. 

<S_CODE_TOKEN>

But React is not happy about setting props within the component, so it gives me warning

<S_CODE_TOKEN>

I want to know if it is fine and I can ignore the warning or I can do something with `react-redux`' and achieve the same result without having to override `dispatch`?

I know I can create a middleware to intercept actions, but I want to do it at component level.
",salmanm,2015-10-18 09:37:24
161,2015-10-18 09:37:24,"Don't modify props, React doesn't let you do this, and it will break in future versions.
Instead use `mapDispatchToProps` to wrap the `dispatch`:

<S_CODE_TOKEN>
",gaearon,2015-10-18 09:37:24
161,2016-08-18 06:46:10,"This solution will only apply on the component dispatch function. if the component uses redux-thunk ( for async functions ) then the dispatch within this functions will not go through the interceptor, so any change/use of the actual payload is impossible.

You may do something like : 

<S_CODE_TOKEN>

but this will make redux-thunk redundant and will require to duplicate its code. 

In addition, I can't see how to pass getState function (without accessing directly to the store) to pass along to the thunk with this approach, as it is being done when implementing middleware . @gaearon 
",jony89,2015-10-18 09:37:24
161,2017-03-02 00:44:31,"I got into this issue today and here's what I did using @jony89's suggestion:
<S_CODE_TOKEN>",pankajvishwani,2015-10-18 09:37:24
160,2015-10-16 02:20:28,"Hello, 
I'm using Redux(+React) to make operate on hierarchical structures and I have two questions:
1. how to implement polymorphism in Redux?
2. how to make ""action bubbling""

My questions expressed more precisely:
1. I'm making structural code editor in React, using Redux. By structural editor I mean that I have tree structure with nodes in it and my app is supposed to operate on AST rather than plain text. 

These nodes can have various types (because it's editor for editing CSS files, these types are for example: ""rule"", ""declaration"", ""property"", ""value"", but it's more important that they do have some type at all). So there are objects in JS which have property `type` and its `type` determines its... type ;)

So assume that I have node like this:
`{type: 'property', id: 4, rule: '.content > ul > li', children: [...blah blah......]}`

And I would like to be able write something like that:
`store.dispatch({type: 'click', nodeId: 4})`
for click. But I would expect that clicking on node of type `rule` would have other effect than clicking on node of type `property`. Polymorphism (but I would like to have ONE react component `<Node />` to prevent code duplication).

I know I can achieve that either by switch/case or making my own sub-functions (I mean to delegate action to functions), but I don't want reinvent the the wheel. I think that support of polymorphism would be useful to many applications, not only mine. 

So - how to achieve polymorphism in Redux? 

2., Second question about action bubbling. Because I got tree structure for example such like this one:

<S_CODE_TOKEN>

And I have appropriate React components that render that structure (I have dumb function-based stateless React 0.14 components, so I don't think components' code is very important right now). Anyway I got `<Node/>` component that represents single AST node.

I would like that user could click on for example on node at id=3 ( `{type: 'property', name: 'display', id: 3},`) and action would automatically ""bubble"" to node's parents (in this case to declaration node at id=2  and to rule node at id=1).

As far I know there is no ""action bubbling"" in Redux. Maybe it should be? Or maybe what I would like to achieve could be made by other means? (by ""action bubbling"" I mean something similar to ""event bubbling"" in JavaScript events in browser, only I would like `redux actions` to bubble and I do NOT want DOM events to bubble (this is completely other thing). I would like to redux action to bubble. When I wrote ""bubbling"" I ment overall design pattern rather than implementation.

And these were my two questions :)
",hex13,2015-10-16 09:34:44
160,2015-10-16 09:34:44,"Hi, please ask this on StackOverflow instead. It is likely you'll get a much better answer there because this is really a usage question, not API question or issue.
",gaearon,2015-10-16 09:34:44
160,2015-10-16 11:32:56,"Actually I thought it would be nice to have support for these two features (polymorphism and action bubbling) in Redux or React-Redux itself (if it's possible).

But okay, I wrote question on Action Overflow:
http://stackoverflow.com/questions/33169415/polymorphism-and-action-bubbling-in-redux
",hex13,2015-10-16 09:34:44
160,2015-10-16 11:46:48,"To be honest I don't understand neither what you mean by polymorphism nor what you mean by bubbling. :-(

Maybe if you can provide a specific runnable example and show where Redux doesn't currently satisfies it, I can help you more.
",gaearon,2015-10-16 09:34:44
160,2015-10-20 03:32:13,"TL;DR: 
- I solved my problem (using higher-order components and higher-order functions in general). I done this on the React level (this turned out to be not Redux specific)
- I'm gonna probably make mini-library from my solution and put this on github
- But I'll write below what I meant previously, just to be clear.

`To be honest I don't understand neither what you mean by polymorphism`
I'm just trying to apply standard OOP patterns to functional and data oriented programming. 

So. I have some hierarchical tree like data structure (like in my first post but instead of CSS AST imagine maybe that I build something more normal like Forum Engine with subforums, threads and posts). And I render this tree in React:

<S_CODE_TOKEN>

Nothing weird here, just implementing tree structure and visiting children, and recursive rendering subtrees.

The problem was with this part

<S_CODE_TOKEN>

I didn't want end up with big switch like this:

<S_CODE_TOKEN>

I never really wanted to use `switch/case`, but just to illustrate. I just knew that I had to pack all this cases in some separate functions and have some one function to handle all cases. And this is why I used word `polymorphism`.  Finally I made some simple higher level components for resolve my problems :)

It turned out also that second thing - i.e. what I wanted achieve by ""bubbling"" can be achieved in passing handlers to components (like it's in Redux-React itself but previously I just didn't like the idea. Maybe I was just wrong in this case)
",hex13,2015-10-16 09:34:44
159,2015-10-15 19:48:50,"On each page on my website I have many components and I don't want to control fetching and grabing data from store for every component just in one ""smart"" top-level component. So I want to connect nested components too. Is this a good pattern? Will I meet a perfomance troubles with this way of connect? What I need to know about connected components behavior for avoiding troubles?
",tadjik1,2015-10-15 20:23:49
159,2015-10-15 20:23:49,"Please see https://github.com/rackt/redux/issues/419.

Both approaches are fine, and having nested `connect()` components is actually going to give you more performance. The downside is they're slightly more coupled to the application and slightly harder to test, but that may not be a big issue.
",gaearon,2015-10-15 20:23:49
159,2015-10-15 20:25:22,"thanks!
",tadjik1,2015-10-15 20:23:49
159,2015-10-16 06:45:17,"I recommend usage of [redux-batched-updates](https://github.com/acdlite/redux-batched-updates) as it can avoid some serious headaches. See [3.0.0 release notes](https://github.com/rackt/react-redux/releases/tag/v3.0.0). It will also improve performance in some cases.
",epeli,2015-10-15 20:23:49
159,2017-01-18 17:59:59,"I started wondering the same thing, whether `connect` was intended to be used on ± every component individually, or only on the top level component. The link @gaearon gives is broken, I think https://github.com/reactjs/redux/issues/419 is the correct thread to refer to for more discussion.",natevw,2015-10-15 20:23:49
159,2017-01-18 20:37:17,The current answer to this question is in the Redux FAQ.  See http://redux.js.org/docs/faq/ReactRedux.html#react-multiple-components .  My recent blog post at http://blog.isquaredsoftware.com/2017/01/practical-redux-part-6-connected-lists-forms-and-performance/ also discusses the idea of multiple connected components and performance.,markerikson,2015-10-15 20:23:49
158,2015-10-15 15:11:55,"Instead of doing something mysterious with `mocha-jsdom` we now do as suggested in https://github.com/facebook/react/issues/5046#issuecomment-146222515.
",gaearon,2015-10-15 15:15:57
158,2015-10-18 05:38:41,"@gaearon: I have been using a similar solution to this for my tests for quite some time. Recently we have switched to using the [shallow renderer](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering), which has allowed us to remove jsdom from our tests completely. This has given our tests a significant speed boost. Shallow rendering also forces you to keep each component relatively simple since it prevents you from testing heavily nested components. 

Just thought I'd share a tip on something that we've found to be valuable.
",zpratt,2015-10-15 15:15:57
158,2015-10-18 09:29:05,"We are using shallow rendering too, take a closer look :-) The only reason we use jsdom is to prevent React from blowing up with errors when using `setState` with shallow renderer. (https://github.com/facebook/react/issues/4019) I have heard people say that actually shimming `global.document = {}` is enough for React to work properly. If that's really so, we can drop jsdom from instructions.
",gaearon,2015-10-15 15:15:57
157,2015-10-15 09:07:55,"So, we're encouraged to pass actions down the component tree via `@connect`'s second parameter `mapDispatchToProps`. How does this fit with `shouldComponentUpdate()`? Actions are functions, their equality can't be easily compared.
",gsklee,2015-10-15 09:32:24
157,2015-10-15 09:32:24,"Functions can be compared just like anything else.

<S_CODE_TOKEN>

In case of `connect()`, the second parameter is used in a special way. The bound functions are _cached_. If you don't use `ownProps` in the second function, they are bound only once. That's best for performance because their identities never change. If you do use `ownProps` in `mapDispatchToProps`, they are bound every time the props change—that's the best we can do.
",gaearon,2015-10-15 09:32:24
157,2015-10-16 02:29:53,"So, in short, if I don't use `ownProps`, `shouldComponentUpdate` will work just fine?
",gsklee,2015-10-15 09:32:24
157,2015-10-16 07:27:08,"Yes. 
",gaearon,2015-10-15 09:32:24
156,2015-10-14 00:42:12,"How does this provider stuff work?
",ccorcos,2015-10-14 18:28:54
156,2015-10-14 12:32:04,"Hi @ccorcos, have you seen [this?](http://rackt.github.io/redux/docs/basics/UsageWithReact.html) Check out the Connecting to Redux section.

If that doesn't answer your question, could you be a little more specific?
",ellbee,2015-10-14 18:28:54
156,2015-10-14 18:28:54,"`<Provider>` puts `store` to be available on React [context](http://facebook.github.io/react/docs/context.html).
It doesn't do anything else and isn't related to routing.
",gaearon,2015-10-14 18:28:54
156,2015-10-14 18:52:11,"Interesting. I've had to deal with piping tons of props from a top-level component all the way through. I think using the splats with props is easy enough though...

If my understanding is correct, then I can create my own provider something like this:

<S_CODE_TOKEN>
",ccorcos,2015-10-14 18:28:54
156,2015-10-14 19:55:35,"I'm missing your point.

What you seem to be describing is what `connect()` does. `<Provider>` itself just puts `store` in context so `connect()` can read it regardless of how deeply nested the component is in view hierarchy. You can use `connect()` without `<Provider>` as long as you pass `store` down manually via props; `<Provider>` is what lets you avoid this manual threading.

What's your use case?
",gaearon,2015-10-14 18:28:54
156,2015-10-14 22:40:25,"Ah. I see. My use case is that I'm just trying to understand Redux. I want to know whats really going on before I use all these magical functions.
",ccorcos,2015-10-14 18:28:54
156,2015-10-14 22:41:01,"I think I get it now though. Provider just makes store available via context. And connect does all the subscription stuff, piping store.getState() to props.
",ccorcos,2015-10-14 18:28:54
155,2015-10-12 19:22:27,"Hi all,

Thanks a lot for sending 0.14-related PRs.
I know it's out, and I'm working on releasing updates for Redux-related packages.

Currently, sending PRs doesn't help because it's not hard for me to fix the warnings—the issue is in coordinated release of all packages (React Redux, DevTools, React Transform, etc) and fixing compatibility issues in the tooling. I will do my best to transition everything to 0.14 this week.

**In the meantime, please don't send PRs related to React 0.14 to Redux and related projects.**

Thanks.
",gaearon,2015-10-15 12:33:45
154,2015-10-12 17:17:29,"How could I integrate a RxJS based selector?

e.g.

<S_CODE_TOKEN>

Unfortunately I have been stuck on some of the limitation of `reselect` which this approach would solve for me. However, I am unsure how to realize it.
",ronag,2015-10-13 09:42:48
154,2015-10-12 17:20:42,"Here is a decorator I currently use which is not integrated with `react-redux`

<S_CODE_TOKEN>

I was thinking about just hooking in `store.subscribe` into this but `react-redux` seems to be making a lot of other magic which makes me sceptical...

<S_CODE_TOKEN>
",ronag,2015-10-13 09:42:48
154,2015-10-13 09:47:00,"React Redux just tries to be as fast as reasonably possible, and since it has to deal with binding action creators, it needs to be careful. That's why it's a little bit more complex.
",gaearon,2015-10-13 09:42:48
153,2015-10-12 14:36:35,,epeli,2015-10-12 15:19:11
152,2015-10-12 14:34:10,,epeli,2015-10-12 14:34:23
151,2015-10-11 13:03:59,"An alternative way to deal with #141

Add prop `connectOptions` to Provider (put in context). Default connect options are `{useRefs: true}`, and options can be overwritten on each connect instance (so refs can be turned on or off globally and locally). If refs are used for testing purposes only, then it gives the ability to not have them in production.

`useRefs` is by default true to avoid introducing a breaking change, but IMO it would be best if it is false by default (and turned on for testing and debugging purposes).
",troch,2015-10-15 11:21:05
151,2015-10-11 13:07:36,"This still doesn't feel like a right solution.
",gaearon,2015-10-15 11:21:05
151,2015-10-11 13:13:52,"I cannot think of another way right now if detecting stateless functional components is not bullet proof :persevere: 
",troch,2015-10-15 11:21:05
151,2015-10-11 13:46:40,"I don't think we need to detect them. Maybe we should instead offer some other API for accessing refs. For example, we could accept `instanceRef` prop that would act as a callback ref. If user doesn't specify it, it would be undefined.
",gaearon,2015-10-15 11:21:05
151,2015-10-15 11:21:05,"Thanks for the PR.
In the end I decided on a simpler approach: refs are now opt-in at the `connect()` call site.

Closed via https://github.com/rackt/react-redux/commit/2d3d0beade55477b3af65534ceb793db18b25705.
",gaearon,2015-10-15 11:21:05
151,2015-10-15 11:22:46,":+1: 
",troch,2015-10-15 11:21:05
150,2015-10-10 11:28:35,"Hello there!

It is good to have one atom of data, but sometimes not :)

For example: if you want to store localization data, it is better to store it isolated of anything else, but with ability to update it and wait for reactive update of texts in app (if user changed language). Or if you have big app with big big forms, that have completely separated state (Like i have on work).

I think its would be handy to have a way to pass multiple stores and access it. My ""proposal"" is API like this:

<S_CODE_TOKEN>

where `<AppTree />` can be wrapped in `connect` where developer passes `contextName` to handle not default store, or it can be wrapped in many `connect`s and have data from many stores at one time.

It would not broke anything, as i see, and make react-redux a little bit more flexible.

Anything bad about it? Is it worth to implement in react-redux? If yes I'll try to make PR
",wwwsevolod,2015-10-10 11:34:54
150,2015-10-10 11:34:54,"We will not support this, as multiple stores is against Redux paradigm.
I'm not sure how multiple stores are better for the scenarios you proposed.

If you need this, you can implement your own `<MultiProvider>` or even pass `store` as a prop down directly to every component that needs it.
",gaearon,2015-10-10 11:34:54
150,2015-11-18 04:49:17,"@gaearon Sorry to dig up a closed issue - but is the recommended way of accessing the store from descendent components to just pass the store as a prop down through the tree?  I want to subscribe to some state updates, and intend to use [redux-rx](https://github.com/acdlite/redux-rx) to do so, but just not sure on the best way to access the store from descendent components.
",marcuswhit,2015-10-10 11:34:54
150,2015-11-18 06:27:13,"You can use context just like connect() uses it. 
",gaearon,2015-10-10 11:34:54
149,2015-10-09 17:38:04,"This should fix #144 

One test still failing, but I can see how to fix that if this approach make sense.
",rpominov,2015-10-09 20:54:50
149,2015-10-09 17:43:32,"How does this work? It isn't obvious to me how state comparison solves the context issue. Can you elaborate?
",gaearon,2015-10-09 20:54:50
149,2015-10-09 17:49:11,"It basically checks what caused the update. If the update was caused by a context change or some .forceUpdate() call, `state` and `props` will remain the same. So the logic is: if React wants to make an update, and we don't know the reason, just make the update happen.
",rpominov,2015-10-09 20:54:50
149,2015-10-09 18:27:19,"This makes sense.
I'd just change it to be written a bit differently:

<S_CODE_TOKEN>
",gaearon,2015-10-09 20:54:50
149,2015-10-09 18:28:18,"Hmm.. Wouldn't non-essential prop changes then cause a re-render? e.g. `setState()` in parent component passing the same values as props.
",gaearon,2015-10-09 20:54:50
149,2015-10-09 18:42:34,"> Hmm.. Wouldn't non-essential prop changes then cause a re-render? e.g. setState() in parent component passing the same values as props.

Probably yes. Although this can be handled by the parent component's `shouldComponentUpdate`. This is a trade-off anyway, but I think this is better than a too aggressive shouldComponentUpdate.
",rpominov,2015-10-09 20:54:50
149,2015-10-09 18:52:37,"> Hmm.. Wouldn't non-essential prop changes then cause a re-render? e.g. setState() in parent component passing the same values as props.

And this is why the remaining test fails :)
",rpominov,2015-10-09 20:54:50
149,2015-10-09 20:01:13,"> Although this can be handled by the parent component's shouldComponentUpdate. This is a trade-off anyway, but I think this is better than a too aggressive shouldComponentUpdate.

This was the point of having `shouldComponentUpdate()` on `connect()`. Otherwise it doesn't really give you anything, as prop changes will be common, especially with nested `connect()`s.

If there's no easy fix, I think `{ pure: false}` is the correct solution until React context problem is fixed.
",gaearon,2015-10-09 20:54:50
149,2015-10-09 20:39:38,"Ok, maybe we could put the `if (!stateChanged && !propsChanged)` check inside `if (!pure) {...}` then? So when `{pure: false}` mode is used we still do less unnecessary work. Or maybe we can have 3 modes?
",rpominov,2015-10-09 20:54:50
149,2015-10-09 20:54:46,"`{ pure: false }` should disable the check completely. It should update even if you deeply mutate the props—just like React's default `shouldComponentUpdate()` works out of the box.

I don't really want to support three different modes. :-( If you really need this I think you're better off writing your own version of `connect()` that satisfies your needs.
",gaearon,2015-10-09 20:54:50
149,2015-10-09 21:08:17,"Okay. All this made me think that I probably should not use context the way I use it anyway. Otherwise I'll have the same issue with my own `shouldCompoentUpdate` methods.
",rpominov,2015-10-09 20:54:50
148,2015-10-09 16:40:42,"here is how I imagine it working, maybe you can tell me a more simple way of doing this.

<S_CODE_TOKEN>
",JAStanton,2015-10-09 17:46:36
148,2015-10-09 17:46:36,"This has been proposed. I outlined the reasons why I don't currently want to add this, and an easy workaround in https://github.com/rackt/react-redux/issues/132#issuecomment-144780772.
",gaearon,2015-10-09 17:46:36
147,2015-10-09 15:36:55,,standup75,2015-10-09 15:51:13
147,2015-10-09 15:51:15,"Thank you!
",gaearon,2015-10-09 15:51:13
146,2015-10-09 14:32:26,"It applies to a single test case only. :smirk:
",grushetsky,2015-10-09 17:50:25
146,2015-10-09 15:52:47,"Actually just

<S_CODE_TOKEN>

should be enough. DOM refs _are_ nodes in 0.14.
",gaearon,2015-10-09 17:50:25
146,2015-10-09 16:09:29,"Sure! Changed it.
",grushetsky,2015-10-09 17:50:25
145,2015-10-09 14:01:56,"I'm experimenting with composing several higher-order-components, like so:

<S_CODE_TOKEN>

It would be _really_ nice if I could count on connect-ed components always having dispatch defined. Because if I do this:

<S_CODE_TOKEN>

...then my dispatch goes away in the connected component, and I have to implement a much more awkward mapDispatchToProps in order to get it back.

It's worth noting that [redux-form also suffers from this problem](https://github.com/erikras/redux-form#binding-action-creators).

IMO, being able to rely on some consistent props in a connected component would make this kind of third-party composition a lot easier.
",jdefontes,2015-10-15 12:48:40
145,2015-10-09 15:56:51,"Can you elaborate on why you need `dispatch` after binding action creators?
Usually components want it one way or the other way, or there's potential for confusion.
",gaearon,2015-10-15 12:48:40
145,2015-10-09 16:22:07,"Mostly because it's cleaner to have the sub-components know what actions they want by reference, rather than by name. I could do this:

<S_CODE_TOKEN>

...but then I've got duplication and magic strings. My real use case is that the sub-components might want a map of several actions, so they can't just look for a well-known name in the parent props.

It also makes it clearer which actions are used by which HOCs.
",jdefontes,2015-10-15 12:48:40
145,2015-10-09 17:49:21,"Can you give me some idea as to how e.g. `authorize` looks?
What would `authorize(unauthorizedAction)` do?
",gaearon,2015-10-15 12:48:40
145,2015-10-12 15:52:49,"I thought about this a lot over the weekend and realized that I made the classic mistake of prescribing the solution rather than describing the problem.

I think there is the potential for different kinds of useful higher-order-components that would have some or all of the following characteristics:
- they need to hook something in the React component lifecycle, so they want to be HOCs vs. some other kind of composition
- they have some internal state that they maintain in the Redux store
- they dispatch their own actions for managing that state, some of which may also be part of their public API
- they act on some external state that has to be passed in by the application
- they encapsulate or coordinate some behavior which requires external actions to be passed in by the application

redux-form is one example: it maintains the intermediate form state in the store; it exposes public actions for initializing/reseting the form; it depends on external actions for validation/form submission/etc.

My internal ""authorize"" HOC would: maintain the set of roles assigned to the current user and only render the wrapped component if the user was authorized; expose actions for intializing/updating the assigned roles; execute some application-dependent behavior on sucess/failue (maybe present a dialog for the user to request permission, or sign them out, or whatever the app wants to do).

I'm also thinking about an ""ensureData"" HOC that would ensure that the remote data required by a component was loaded, and manage the client-side caching of that data. It would maintain some internal bookkeeping information, expose actions for invalidating the cache, and would depend on external actions for actually loading the data.

So my question becomes: when a component wants to compose several of these concerns, what is the best way to get them the Redux bits that they need?

One approach is that there is a single connect()-ed component at the top of the chain, and all the dependencies required further down would be threaded through a single connect() call. That can be kind of awkward even for a single component (see: [Doing the connect()ing Yourself](https://github.com/erikras/redux-form#doing-the-connecting-yourself) for redux-form). I think that approach would become increasingly messy as you compose additional concerns.

redux-form works around this by providing its own wrapper around connect() to ensure that it gets its state from the store and a handle so it can dispatch() its own actions. I was a little puzzled when I first saw that, because I knew the client of the form would also need stuff from the store, and would also have to dispatch, so you'd wind up having a component structure like:

<S_CODE_TOKEN>

The nested `<Connect>`s seemed odd to me.

But the more I think about it, the more I'm coming around to the idea that that is the best way to achieve separation of concerns. Each HOC has it's own relationship with the store, and trying to roll up multiple components' needs into a single connect() call seems to be mixing up things that should be separate.

This makes my hypothetical example look like:

<S_CODE_TOKEN>

...which looks a bit crazy. But maybe that is just the world we live in when we compose with HOCs rather than mixins?
",jdefontes,2015-10-15 12:48:40
145,2015-10-14 18:30:09,"@erikras Thoughts?
",gaearon,2015-10-15 12:48:40
145,2015-10-14 18:53:27,"I have certainly noticed that, as my application grows, I have many `connect`ed components nested inside other `connect`ed components, as @jdefontes has rendered in his last comment. I have been operating under the assumption that the redux listener system is probably robust enough to notify all the elements when a change occurs.

The way my pre-flux isomorphic React app was structured involved passing down _all the data_ from the initial route component all the way to the farthest leaves, which gets disgusting _very_ quickly, and avoiding that via state stored in the context is one of the biggest benefits of the Flux architecture.

I agree with @jdefontes' conclusion:

>  Each HOC has it's own relationship with the store, and trying to roll up multiple components' needs into a single connect() call seems to be mixing up things that should be separate.
",erikras,2015-10-15 12:48:40
145,2015-10-15 09:33:06,"Shall we close then?
",gaearon,2015-10-15 12:48:40
145,2015-10-15 12:48:40,"I'm closing but let me know if you're not satisfied with nested smart components.
",gaearon,2015-10-15 12:48:40
145,2015-10-15 14:03:14,"Thanks for the discussion.

Just one further observation... if you try to force a tree of HOCs to share a top level `<Connect>` then the whole tree gets notified when any of the various HOCs state changes, which becomes pathological in the case of, say, redux-form, where every keystroke updates the store. When you nest `<Connect>`s, each one of them gets separately notified, but they have the very nice property of acting as a guard for their children, and only updating the children if the state they care about has changed. So I see that as another vote for nested  `<Connect>`s.

I agree with @erikras that, even setting aside the question of HOCs, it is just too damn convenient to not have a few nested `<Connects>` in a real app. Threading props through a deep component tree is a PITA and doesn't separate concerns very well. The previous version of my app using vanilla Flux had nested components that individually subscribed to the stores they cared about, so nesting `<Connect>`s is the functional equivalent of that for me. Viva Redux! (and redux-form is awesome too! ;-)
",jdefontes,2015-10-15 12:48:40
145,2015-10-25 03:43:50,"After my exploration of redux and its advantages / tradeoffs I have concluded that this is the one piece I strongly dislike (as it applies to React): no convenient / modular way to nest higher order components (HOC). 

Most apps I build consist of numerous HOCs with demanding (i.e. complex) business rules that will require their own reducer because a parent is incapable of determining its state transformation needs. You certainly don't need to `connect()` each component that requires a reducer, but you might need to connect them for the purposes of selection. Simply put...

<S_CODE_TOKEN>

... won't work unless I hand down the state to the child explicitly in the view via `<Child state={this.props.child}/>`. This requirement isn't _that_ bad, since it's kind of the foundation of pass-down props defined by React. What stinks is when `<Child />` also has `<Grandchild />`. Now I'm trapped in this highly-coupled pass-down party®.

<S_CODE_TOKEN>

To be fair, I suppose this could be alleviated by avoiding doubly-nested components and instead using a `grandchildReducer` and maintaining that only a `<Child />` ""knows"" a `<Grandchild />`.

<S_CODE_TOKEN>

**For the sake of argument**, what if we `connected` each HOC? That would avoid the prop pass-down problem, though I fear it would introduce another issue (that might be worse).

As mentioned by @jdefontes, authentication is a big piece of any app. Normally I write applications to be ""secured"" via different containers entirely for `public` or `secure` inner applications, where an intercepted `statusCode 401` moves people from `secure` back out to `public`.

<S_CODE_TOKEN>

The selector for each of these components becomes immediately annoying, fragile, and error-prone.

<S_CODE_TOKEN>

Now, luckily the atom for these pieces _can_ be flat, since there's no real state sharing between a secure / public app or the root. We could even use a special ""global"" state indicator for those key pieces of app knowledge.

<S_CODE_TOKEN>

The problem arises when you get into nesting of related components that _can't_ be flattened. Perhaps an array of group of categories with an array of items belonging to a group.

<S_CODE_TOKEN>

The reducers would look like the following:

<S_CODE_TOKEN>

This means that an `<Item />` would become a `connect(itemSelector)(Item)` component that extracts necessary state from the atom. But can we even do this? How would we know which item to pick from the list of items, assuming that list _even exists at all_ in the early stages of an app's lifecycle. 

<S_CODE_TOKEN>

This just isn't possible. There is a limit to the depth inside the atom at which you can `connect`, and that limit starts with anything created at runtime. 

Let's take a step back and reexamine the prop pass-down strategy. Another annoyance is that only `connected` apps receive a dispatch. This is good for keeping knowledge of `redux` away from the leaves of an app, but is also a lot of boilerplate (and potential coupling). How does the `<Grandchild />` create an action? Well, it invokes the callback that was provided to it from the `<Child />`, which itself received the callback from the `<Parent />`, which declared the callback as `cb = (value) => this.props.dispatch(someAction(value))`. This also (kind of?) couples the parent to the grandchild because the parent has to know that the grandchild might want to `doSomeAction`, and `someAction` might be a separate piece of the domain. Consider `onChildSelected` versus `onGrandchildSelected`. Should the parent really have to know the domain of the grandchild in the sense of `<Child onChildSelected={() => this.props.dispatch(childSelected)} onGrandchildSelected={() => this.props.dispatch(grandchildSelected)} />`?

I would appreciate anyone else's thoughts on this matter. Is the ""cleanest"" solution simply a prop pass-down as demonstrated above? Is there a way around all the boilerplate? How much nesting can / should we do in the atom? 
",aft-luke,2015-10-15 12:48:40
145,2016-01-13 04:17:07,"@gaearon

I fiund thus question by you (on S.O.) and another one by @ide (i just commented on that too so i apologize for the inadvertent loop) grappling with the effecf of this same exact issue, which was not satisfied IMO with the batchedupdate answer (you are still going to have overhead that grows with the complexity of the component tree)

https://github.com/rackt/redux/issues/125

http://stackoverflow.com/questions/25701168/at-what-nesting-level-should-components-read-entities-from-stores-in-flux

I think the answer on S.O. is not ideal... leaving it to the programmer is not a comforting solution

have you any updated insight?
",idibidiart,2015-10-15 12:48:40
145,2016-01-13 08:34:29,"I don't understand what exactly you are asking. Please create a new SO question and link to it?
",gaearon,2015-10-15 12:48:40
145,2016-01-13 08:54:47,"My question is it seems that both in this thread and on S.O. there are two points of view on how to compose components with Redux.
1. Have a connector at the root of the component tree with state being pushed down to descendants as props and all descendants being pure stateless components
2. All components in a component tree are stateful and have a connector 

I understand from the S.O. thread that there are tradeoffs and benefits to each of the above approaches but I don't understand what the ideal way would be. Is it 1 or 2 or a combination of both as suggested in the accepted S.O. answer? Or is it some other model. I'm trying to understand how best to compose components when using Redux. 

Your analysis in that S.O. post is very clear, and you seem to have been looking for the right solution but it's not clear what that is, and more importantly how composition should be done in Redux.
",idibidiart,2015-10-15 12:48:40
145,2016-01-13 09:34:49,"Both approaches are extreme. We suggest taking the middle approach.

Try to create presentational components and use them when possible. However when you feel like you're passing data through components in the middle that don't use it, it's a good signal that it's time to create a container component for that presentational component.

So basically create containers when you feel like some particular component has become hard to reuse because it requires too much unrelated data that parent components don't care about.

I strongly suggest you to watch the last 10 videos of my course because they deal with this particular question: https://egghead.io/series/getting-started-with-redux
",gaearon,2015-10-15 12:48:40
144,2015-10-09 11:44:52,"Because connected components have aggressive `shouldComponentUpdate`, and `shouldComponentUpdate` doesn't support context, connected components basically stop any other context variables changes to propagate to their children.

Is there a recommended solution to this problem? I found `pure` option (`connect(..., {pure: false})`), which helps, but is there a better way? 
",rpominov,2015-10-09 16:02:17
144,2015-10-09 12:07:39,"Related https://github.com/facebook/react/issues/2517
",epeli,2015-10-09 16:02:17
144,2015-10-09 12:29:55,"One possible solution to this is to check _only state_ in `shouldComponentUpdate`, if state didn't change always return `true`, and allow target component to decide if it should be updated.

This seems like a reasonable default behavior to me — check in shouldComponentUpdate only stuff we manage (this.state), and delegate any other checks to user's components.
",rpominov,2015-10-09 16:02:17
144,2015-10-09 16:02:17,"The only better option that using `{ pure: false }` if you rely on context propagation is helping React fix it, or helping library maintainers work around this context issue.

Related:
- https://github.com/facebook/react/issues/2517
- https://github.com/facebook/react/pull/3973
",gaearon,2015-10-09 16:02:17
144,2015-10-09 17:40:45,"> or helping library maintainers work around this context issue.

Well this is what I'm trying to do :)

I've made a PR with a possible fix #149 It requires a bit more work, but I wanted to ask first if this idea makes sense.
",rpominov,2015-10-09 16:02:17
144,2015-10-09 17:44:56,"> Well this is what I'm trying to do :)

Oh, I meant libraries-relying-on-context-propagation, e.g. https://github.com/rackt/react-router/issues/470.

Longer term it's React's problem, but there are feasible workaround for specific libs today.
As you can see, for example, React Redux isn't affected because it doesn't read _values_ from context.
",gaearon,2015-10-09 16:02:17
144,2016-06-16 11:27:35,"Checkout my simple workaround:
https://gist.github.com/alexeychikk/add4db3397df9feb2a0daf155376a5a8
",alexeychikk,2015-10-09 16:02:17
143,2015-10-08 18:53:25,"Took a stab at #141 

Probably would be better to create the render function beforehand, instead of hitting that conditional every render. Just getting this out there for discussion.

Worth noting that the detection isn't perfect, but solves the case mentioned here, and keeps the current test for wrappedInstance ref passing. We'd have to instantiate the component to know for sure, but this might be good enough.

Pretty much stole the check from ReactCompositeComponent
",bspaulding,2015-10-15 11:20:45
143,2015-10-08 19:27:42,"Wouldn't this give false positives for module pattern of non-Component-inheriting classes which are still valid in 0.14?
",gaearon,2015-10-15 11:20:45
143,2015-10-08 22:40:14,"Yes, indeed. I'm not sure at this point how you'd figure that out before mounting the component. I'll keep hacking on it.
",bspaulding,2015-10-15 11:20:45
143,2015-10-15 11:20:45,"Thanks for the PR.
In the end I decided on a simpler approach: refs are now opt-in at the `connect()` call site.

Closed via https://github.com/rackt/react-redux/commit/2d3d0beade55477b3af65534ceb793db18b25705.
",gaearon,2015-10-15 11:20:45
142,2015-10-08 15:38:28,"This information was included on the web site, but is missing from the API docs.
",BinaryMuse,2015-10-15 12:03:35
142,2015-10-09 15:53:22,"Good point. I'll hold off for now because we might have problems with stateless components and `getWrappedInstance()` and the API might change there.
",gaearon,2015-10-15 12:03:35
142,2015-10-15 12:03:35,"I'll close this out because I'm working on similar updates to the docs concerning changes for 0.14.
",gaearon,2015-10-15 12:03:35
141,2015-10-08 01:27:14,"If the component wrapped with `connect` is a stateless function component, React warns about the [internal ref](https://github.com/rackt/react-redux/blob/master/src/components/createConnect.js#L203) that the wrapper holds with the following message `Warning: Stateless function components cannot be given refs (See ref ""wrappedInstance"" in App created by Connect(App)). Attempts to access this ref will fail.`

<S_CODE_TOKEN>

Would it be useful to check whether the component is stateless or not to decide when to apply the ref or do we always need it?
",dariocravero,2015-10-15 11:22:53
141,2015-10-08 22:32:53,"You can suppress that warning by using [troch/react-stateless](/troch/react-stateless) as a workaround for now.

What is the wrappedInstance ref used for?
",troch,2015-10-15 11:22:53
141,2015-10-09 05:03:31,"People use it for tests and side effects (i.e. calling instance methods) I presume.
Personally I don't have use for it, but it was repeatedly asked.
",gaearon,2015-10-15 11:22:53
141,2015-10-11 12:09:25,"So is it okay to use stateless functions with React-Redux and I can ignore this warning? (I do not use ref or wrappedInstance).
",hex13,2015-10-15 11:22:53
141,2015-10-11 12:29:52,"Yes, you can ignore the warning for now.
",gaearon,2015-10-15 11:22:53
141,2015-10-11 12:45:49,"Ok, thx :)
",hex13,2015-10-15 11:22:53
141,2015-10-15 11:22:51,"This is fixed via https://github.com/rackt/react-redux/commit/2d3d0beade55477b3af65534ceb793db18b25705.
We're making `withRef` an opt-in parameter, with `false` by default.
",gaearon,2015-10-15 11:22:53
141,2015-10-17 01:08:28,"Thanks! :)
",dariocravero,2015-10-15 11:22:53
141,2017-03-21 01:28:10,"I ran into something that may be related.

While using connect with a stateless component that had a child component with state (extends React.Component): the child component's `componentWillReceiveProps` would never fire on prop change. Instead the child component with state would rerender and it's `componentDidMount` would fire again. I ran into this within a create-react-native-app project.

If this is indeed an issue I would be happy to look into it and create a PR, I could also start a branch on the project to easily reproduce this (I've since removed the stateless component with connect).",mini-eggs,2015-10-15 11:22:53
141,2017-03-21 02:34:22,"@mini-eggs : hmm.  If it's something you can reproduce, please go ahead and file a new issue.  ",markerikson,2015-10-15 11:22:53
140,2015-10-07 22:47:36,"If I fire an action before the parent `connect()` component mounts, the state does not propagate as the `connect()` component has yet to subscribe to the dispatcher.

Should actions be fired in these lifecycle methods? If so, what's the best way to ensure that these actions and the resulting state are passed down?
",rygine,2015-10-08 18:28:53
140,2015-10-08 06:44:10,"Which version of React Redux are you running?
Please provide a failing test case because [we do have test case for this](https://github.com/rackt/react-redux/blob/f9dfe461b730530c1a04061d6018540173efd5d1/test/components/connect.spec.js#L112-L134).
",gaearon,2015-10-08 18:28:53
140,2015-10-08 18:12:58,"After much digging, I found the problem. It has to do with a bad state selector which caused `shouldComponentUpdate()` to return `false` in the connector. All is well.
",rygine,2015-10-08 18:28:53
139,2015-10-07 22:37:33,"Looks like the source in the /lib folder has already been transpiled with Babel. Could you put the ES6 version of the source code in the repository? Reading through the transpiled code is not very fun. ;)
",rygine,2015-10-08 06:37:42
139,2015-10-08 06:24:55,"The source is in src dir
",epeli,2015-10-08 06:37:42
139,2015-10-08 06:37:41,"The source is in the `src` folder, both in repo and on NPM.
Maybe you're looking at some old package version that didn't have it, but we ship it now.
",gaearon,2015-10-08 06:37:42
138,2015-10-07 18:39:25,"PR to externalize `getDisplayName` into a sharable utility. This is a common function found in many Higher Order Components in the wild. 

[This external dependency is fully tested, etc. You can see the minimal source here.](https://github.com/jurassix/react-display-name)

Not sure if react-redux interested in an extra dependency; issuing PR for optional consideration.
",jurassix,2015-10-15 10:45:27
138,2015-10-07 18:46:53,"Or another alternative would be to incorporate [recompose](https://github.com/acdlite/recomposes) utilities here as well? 

[getDisplayName()](https://github.com/acdlite/recompose/blob/master/src/getDisplayName.js)
[wrapDisplayName()](https://github.com/acdlite/recompose/blob/master/src/wrapDisplayName.js)
",jurassix,2015-10-15 10:45:27
138,2015-10-08 23:36:59,"I'm cool with using Recompose's `wrapDisplayName()` — true story, I copied the code for `getDisplayName()` from this repo — though I know Dan likes to keep the dependencies to a minimum. 

@gaearon?
",acdlite,2015-10-15 10:45:27
138,2015-10-09 04:07:52,"I'm OK with using `recompose` if it doesn't sufficiently increase UMD build size.
Mind checking?

<S_CODE_TOKEN>
",gaearon,2015-10-15 10:45:27
138,2015-10-09 13:32:36,"Updated PR to use recompose.

> gzip -c dist/react-redux.min.js | wc -c
> 11283
",jurassix,2015-10-15 10:45:27
138,2015-10-09 14:37:59,"This way you're bundling whole recompose for one method.
The build size increased 4x, it was 2867 before the change.

@acdlite Do you support importing individual files?
",gaearon,2015-10-15 10:45:27
138,2015-10-09 14:38:48,"<S_CODE_TOKEN>
",acdlite,2015-10-15 10:45:27
138,2015-10-09 14:48:39,"updated import:

<S_CODE_TOKEN>

Output seems reasonable now:

> gzip -c dist/react-redux.min.js | wc -c
> 2917
",jurassix,2015-10-15 10:45:27
138,2015-10-09 17:27:52,"Hrm, still seems a bit high for such a simple util. Probably the Babel helpers... I'll see if I can get it down a bit.
",acdlite,2015-10-15 10:45:27
138,2015-10-15 10:45:27,"Meh, let's keep it internal for now. If we depend on a few more helpers, might be worth revisiting.
",gaearon,2015-10-15 10:45:27
137,2015-10-06 07:42:40,"I'm experimenting with Flow, but I'm getting errors when importing react-redux:

<S_CODE_TOKEN>

I've made the error go away by adding this to .flowconfig:

<S_CODE_TOKEN>

This might by caused by facebook/flow#654. Maybe the error will go away when that issue is fixed. In the meantime, is there anything that could be done in react-redux to avoid the above work-around?
",msolli,2015-10-09 13:17:59
137,2015-10-06 07:46:46,"I don't really know enough about Flow to fix this.
@leoasis, any ideas?
",gaearon,2015-10-09 13:17:59
137,2015-10-06 08:57:16,"Mmm since react-redux isn't even typed, perhaps a better option would be to just add it in the ignore paths?

If you feel adventurous you can even grab the declaration modules in [here](https://github.com/rackt/redux/pull/817) and try them so you can have the react-redux usage type checked (and `redux` and `redux-thunk` if you're using it). You'd need to put those files in a folder and specify them in the `[libs]` option in .flowconfig.
",leoasis,2015-10-09 13:17:59
137,2015-10-09 13:17:59,"Thanks guys. I had stupidly ignored every package.json in my project in .flowconfig, which caused all sorts of strange problems. Sorry for the noise. I'll check out those declaration files.
",msolli,2015-10-09 13:17:59
137,2016-10-06 17:12:37,"Ran into this issue myself with the flow config of 

<S_CODE_TOKEN>

Other modules seem to import correctly, but for some reason flow throws ""not found"" for `react-redux` in particular. Still looking into this...
",averyvery,2015-10-09 13:17:59
137,2016-10-06 20:20:44,"Ah, my fix was to just create an empty stub and map to it: 

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",averyvery,2015-10-09 13:17:59
137,2016-12-01 12:34:03,@averyvery can you give a bit more detail on your approach? where did you put these files?,ericmasiello,2015-10-09 13:17:59
137,2016-12-01 15:16:39,"@ericmasiello sure:

<S_CODE_TOKEN>",averyvery,2015-10-09 13:17:59
137,2017-01-23 21:13:44,"Also works: 
module.name_mapper='\(react-redux\)' -> 'empty/object'
module.name_mapper='\(immutable\)' -> 'empty/object'",bevanhunt,2015-10-09 13:17:59
136,2015-10-03 17:00:36,"It seems that with the current `Provider`/`connect` and Smart/Dumb component distinction, some things from [Elm Architecture](https://github.com/evancz/elm-architecture-tutorial/) become harder than they should be. In particular, nesting actions, and examples like “generic list” (https://github.com/rackt/redux/issues/822).

It is possible that we need to tweak the API and conventions to better represent Elm Architecture and thus benefit from it. How exactly, I'm not sure yet.
",gaearon,2015-10-15 11:22:05
136,2015-10-28 17:25:32,"@gaearon Just out of interest: Was there any conclusion on this topic?
",aflatter,2015-10-15 11:22:05
136,2015-10-28 17:40:47,"I don't think it makes sense for us to do this. Neither Redux Middleware, nor React play well with Elm-like nesting. If somebody wishes to write their app in a completely Elm Arch-like way, they are free to do so: they just wouldn't use middleware, and would compose updater functions at the component level.
",gaearon,2015-10-15 11:22:05
136,2016-03-18 02:35:45,"Relevant new discussion: https://github.com/reactjs/redux/issues/1528
",gaearon,2015-10-15 11:22:05
135,2015-10-02 19:43:27,"I've successfully tested this in ie8!

It works with the help of [core-js](https://github.com/zloirock/core-js) and other, lesser shims failed me. But this passes all the tests and chrome seems to be running it happy as well. 

This closes: https://github.com/rackt/react-redux/issues/133

Let me know if there is anything else I should be doing for PRs and I'm happy to do so! 
",mattydoincode,2015-10-05 08:37:48
134,2015-10-02 17:22:35,"optimisations -> optimizations
",djkirby,2015-10-02 18:42:23
133,2015-10-01 19:47:38,"Hi all,

I understand completely that react-redux may not intend to support ie8 and that's totally fine. However, I'm curious if I could be given a little more insight into how the `createProvider` method works, especially regarding the call to `_createClass` so that I might find a workaround. As mentioned [here](https://babeljs.io/docs/advanced/caveats/) calling `Object.defineProperty` breaks ie8. Perhaps there is a way to write some of the contents of `createProvider` in a more es6 heavy way? This might allow me to use my own ie8 compatible babel settings to avoid use of `defineProperty`. Any and all help is greatly appreciated! 
",mattydoincode,2015-10-05 08:37:48
133,2015-10-01 20:11:05,"And i now see that you guys have written this with es6 and that i was simply reading the deployed compiled files
",mattydoincode,2015-10-05 08:37:48
133,2015-10-01 20:48:10,"> This might allow me to use my own ie8 compatible babel settings to avoid use of defineProperty.

How can we do that?
We don't actually use `Object.defineProperty`—it's just what Babel uses for class definitions.
Can we avoid it with different Babel settings?

> I'm curious if I could be given a little more insight into how the createProvider method works

Just a method that returns a class, see [the source](https://github.com/rackt/react-redux/blob/master/src/components/createProvider.js).
",gaearon,2015-10-05 08:37:48
133,2015-10-01 20:51:15,"Ya i was reading the source like an idiot of my local copy of the files. It's quite easy to follow thanks.

here is our babel loader: `babel-loader?loose=es6.classes,es6.properties.computed&stage=1&optional=spec.protoToAssign&externalHelpers=true`

I believe that es6.classes and es6.properties.computed both protect against object.defineProperty. 

We're a company that sells software to police forces and hence has to support ie8 and it's the absolute worst :(. 
",mattydoincode,2015-10-05 08:37:48
133,2015-10-01 21:03:30,"Actually i believe the specific babel loose mode for this case is es6.modules as explained [here](https://babeljs.io/docs/advanced/loose/#es6-modules). 
",mattydoincode,2015-10-05 08:37:48
133,2015-10-01 21:04:31,"Can you confirm that compiling React Redux with `loose: 'all'` fixes the issue?
I don't mind compiling in this mode.
",gaearon,2015-10-05 08:37:48
133,2015-10-01 21:09:36,"yup! checkin now.
",mattydoincode,2015-10-05 08:37:48
133,2015-10-02 15:04:52,"Going to work more on this today. The .babelrc is already using loose mode all, the real kicker is uses of static class properties. Going to make a PR, but finding that a bunch of other libraries in the redux ecosystem also use similar stuff, so having trouble getting a full integration test on ie8. Will update as I find out more!
",mattydoincode,2015-10-05 08:37:48
133,2015-10-02 18:58:31,"I've forked and cloned the repo locally, have modified the code to protect against Object.defineProperty, but when attempting to test it using npm link am running into [this issue](https://github.com/npm/npm/issues/5875). Essentially because react-redux has a (dev?) dependency on react 0.14-rc1, but my application still depends on react 0.13, both are loaded in. So my application is getting `With React 0.14 and later versions, you no longer need to wrap <Provider> child into a function`. I'm not sure how the build process of react-redux combined with npm link would end up including a second react version and i'm a little out of my element so I hope my test methodology isn't dumb. I might just drop in the shimmed compiled file for now... 
",mattydoincode,2015-10-05 08:37:48
133,2015-10-05 08:48:43,"Out in 3.1.0.
",gaearon,2015-10-05 08:37:48
133,2015-12-23 07:52:26,"use of Object.defineProperty breaks ie8 again.
https://github.com/rackt/react-redux/issues/227
",xcatliu,2015-10-05 08:37:48
133,2015-12-23 11:21:23,"Fixed.
",gaearon,2015-10-05 08:37:48
132,2015-09-30 20:03:04,"Example:

<S_CODE_TOKEN>

This would allow you to namespace actions better. You could even do

<S_CODE_TOKEN>

if you want to be terse and don't mind connecting each action. This isn't as maintainable, though.
",bebraw,2015-10-01 16:33:32
132,2015-09-30 23:34:16,"At the moment I get round this by manually wrapping nested Actions with `dispatch`

<S_CODE_TOKEN>

Obviously this is more verbose but it would get you what you needed.
",rockingskier,2015-10-01 16:33:32
132,2015-10-01 00:28:05,"Using [traverse](https://www.npmjs.com/package/traverse) I put together this little util, it might be of use to someone.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

_Edit_: Given traverse's dislike for IE you might want to iterate over the object in a different way but the principle still stands.
",rockingskier,2015-10-01 16:33:32
132,2015-10-01 05:57:42,"@rockingskier Nice work. Depending on what the maintainers of react-redux think, maybe this should become a little package of its own. That wouldn't be as discoverable, though.
",bebraw,2015-10-01 16:33:32
132,2015-10-01 07:25:52,"This seems pretty obvious enhancement to me although I wonder whether it encourages writing huge components instead of small composable ones. React's tool for nesting is a component after all.

> maybe this should become a little package of its own

It would be good for test driving at least.
",epeli,2015-10-01 16:33:32
132,2015-10-01 16:22:17,"I think the way it is right now is perfect.

This of `mapDispatchToProps` as factory. 

You can do something like this:

<S_CODE_TOKEN>

You can achieve a cleaner code with currying. That's the way I try to write all my apps. I try not to create objects out of nowhere. only functions that reduce other objects.

This gives you the advantage of separating reducers.

For example you'd be able to have book reducers and author reducers.

All contained in the same module. Each module would have it's factories. Or whatever functions that are related to the logic of the reducer.
",tounano,2015-10-01 16:33:32
132,2015-10-01 16:33:32,"I'd be wary of including too many convenient opinionated defaults. I generally agree namespacing is nice, but there are potential unwanted side effects too (e.g. an export of some unrelated object from `actions.js` that we begin to iterate over because of `import * as actions`—or a recursive object we get stuck on).

[The example in API docs actually shows namespacing](https://github.com/rackt/react-redux/blob/master/docs/api.md#inject-todos-todoactioncreators-as-todoactions-and-counteractioncreators-as-counteractions):

<S_CODE_TOKEN>

I don't think it's too much typing, and the upside is it's explicit and non-magic.
I'd prefer to keep it that way.
",gaearon,2015-10-01 16:33:32
131,2015-09-29 17:13:44,"Hi, 

action:

<S_CODE_TOKEN>

reducer:

<S_CODE_TOKEN>

app

<S_CODE_TOKEN>

In the app, i am trying to update `multipleOutFitLook`, when I click the h1, but the function   `mapStateToProps`, is only called on the initial page load. 
",sabeurthabti,2015-09-29 23:51:27
131,2015-09-29 17:26:32,"Can you please provide a runnable example?
e.g. as a Github project.

Thanks!
",gaearon,2015-09-29 23:51:27
131,2015-09-29 20:32:18,"@gaearon thanks for getting back to me, I will extract it from our production code and get a running example.
",sabeurthabti,2015-09-29 23:51:27
131,2015-09-29 21:07:56,"@gaearon hi - I pushed similar code to this project: https://github.com/sabeurthabti/redux-friendlist-demo
`DEBUG=true npm start`

click `hello` and i expect the 1 to update into 2. 

I am quite new to react state management. So far I am loving redux, so thank you +1
",sabeurthabti,2015-09-29 23:51:27
131,2015-09-29 23:51:27,"Hope this helps: https://github.com/sabeurthabti/redux-friendlist-demo/pull/1/files
",gaearon,2015-09-29 23:51:27
131,2015-09-30 07:31:54,"@gaearon you are amazing, i am trying to get redux adopted by my team (net-a-porter.com/mrporter.com). Thank you so much. 
",sabeurthabti,2015-09-29 23:51:27
131,2015-09-30 07:32:18,"No problem, glad to help.
",gaearon,2015-09-29 23:51:27
130,2015-09-29 16:04:09,"How can [this line](https://github.com/rackt/react-redux/blob/master/src/native.js#L1) work if there is no mention of `react-native` in `package.json`?

<S_CODE_TOKEN>

I understand that there is an assumption that if anyone is `require`ing `native.js`, that they will already have `react-native` included in their project deps, but it seems very odd that a library could have an `import` of a package not mentioned in its `package.json`.

Am I wrong? I'm trying to understand this mechanism to duplicate it in my own project, and this is confusing me. Could you add a peer dep that didn't cause problems for people just using plain `react`, or is this just a strangeness of the npm dep system?
",erikras,2015-09-29 17:16:45
130,2015-09-29 17:16:45,"It wouldn't make sense to force installation of `react-native` onto people using `react`, and vice versa. This is why neither is in `peerDependencies` in `package.json`.

Yes, we assume the users are already using either of them. I agree it's kinda weird, but it's a better solution than forcing users to install both packages. (Especially considering they might get weird issues when `react-native` users get `react` installed side by side.)

This is going to be moot soon after 0.14 is out (and compatible RN release is out) anyway because `Component` and friends will be inside `react` package for both platforms, and `react-native` will become a yet another renderer, just like `react-dom`. When this happens we'll kill `react-redux/native` entry point, and everyone will be able to use `react-redux` directly regardless of the platform. This is when we can introduce a peer dependency.
",gaearon,2015-09-29 17:16:45
130,2015-09-29 17:17:59,"Got it. Thanks for the clarification.
",erikras,2015-09-29 17:16:45
129,2015-09-28 21:57:59,"(I'm fairly new to React and Redux, and so I'm still trying to figure out the best coding patterns and practices, so apologies if this is obvious to everybody but me.)

I'm working on a React/Redux app which has several components which request their own data.  For example, when a ""/users"" route is invoked, the `<Users />` component gets invoked, and that component triggers an async call (via redux-thunk) which updates the Redux store with the fetched user data, and then ultimately the users data appears within the `<Users />` component.

The `render()` function within `<Users />` is just watching for changes to `this.props`. The parent of `<Users />` watches the Redux store, and of course passes the user data down.

This all worked fine in React 0.13.  Or at least it ""worked"" with no errors/warnings in the console.  I updated to 0.14 late last week, and started to see the following warning in the logs:

**Warning: setState(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.**

I floundered around, and finally figured out that the problem was that my async data request was in the class constructor. Something like this:

<S_CODE_TOKEN>

If I moved the `fetchUsers()` call to _either_ `componentDidMount()` or `componentWillMount()`, everything functioned properly, and the error went away.

So my question is ultimately this:  what is going on here? What is the functional difference between these three functions? My (obviously incorrect) assumption was that I should request the data when the class gets initialized, which is why I put the async call in `constructor()`.  Why does that not work, why do those two React lifecycle methods work, and which one of the two is preferable?  React's docs say `componentDidMount()` is the right method to use, but I would think I'd want the data _before_ the component is mounted, which make me think `componentWillMount()` should be the method I use.
",bmueller-sykes,2015-10-15 13:25:42
129,2015-09-29 12:00:19,"Is the warning coming from React Redux's usage of state?
Or are you putting data from store into the state manually?
Can you provide an example reproducing the issue?

That said, using `componentWillMount` is the way to go. Why React doesn't encourage `setState()` calls inside constructor, I'm not sure, but it's better to ask in React issues than here.
",gaearon,2015-10-15 13:25:42
129,2015-09-29 15:30:35,"Thanks for the reply, Dan.  I posted the question here because the problem _seems_ to be originating in redux-thunk.

I can do my best to piece together an example.  This isn't exactly the code I have executing, but it is, I think, a close enough approximation to illustrate the issue.

index.js:

<S_CODE_TOKEN>

app.js:

<S_CODE_TOKEN>

getusers.js

<S_CODE_TOKEN>

actions.js

<S_CODE_TOKEN>

reducers.js

<S_CODE_TOKEN>

I hope the sample code is somewhat useful.  What I found somewhat interesting was that in the `fetchUsersFromServer()` call, it didn't matter if I actually made an async request or not, as I indicate in the comment above. I guess maybe that means this is just me not understanding the React lifecycle properly. Again, I posted this problem here because the problem gets exposed within the thunk, though I realize that doesn't mean the thunk itself is at fault.

So if the real answer here is ""make async calls in `componentWillMount()`, then I'm happy with that answer. I suppose I'm just trying to get a better understanding of how these parts work together, and why this issue only became apparent when I upgraded to React 0.14.

Thanks again!
",bmueller-sykes,2015-10-15 13:25:42
129,2015-09-29 15:31:20,"Is it too much to ask of you to create a test in this project that emits this warning?
This would help us fix it and ensure the right thing happens instead.
",gaearon,2015-10-15 13:25:42
129,2015-09-29 15:33:05,"Sure, I'll do that.
",bmueller-sykes,2015-10-15 13:25:42
129,2015-09-29 18:25:59,"Okay, I've got a simple working test, based on npm/webpack. I'm not sure what I should do with it at this point. I could upload it to my own github account, and then point you to it, I suppose. I wasn't sure if you actually wanted me to upload the whole thing to the react-redux repo. What makes the most sense from your perspective?
",bmueller-sykes,2015-10-15 13:25:42
129,2015-09-29 18:38:32,"Sorry, I meant a unit test.

<S_CODE_TOKEN>

This should launch our test runner.

Then you can add the test emitting the warning to [`connect.spec.js`](https://github.com/rackt/react-redux/blob/master/test/components/connect.spec.js) (see other tests there for inspiration). To make it easier, you can write `it.only()` instead of `it()` so only your test runs.

Does this make sense?
",gaearon,2015-10-15 13:25:42
129,2015-09-29 18:56:38,"Yes, it does. I admit I've never written a unit test before, so figuring out how to do that is a) useful for me, but b) will take some time. This isn't urgent for me, but if it's somewhat urgent for you, i could at the very least zip up the sample project I have and get that to you somehow--at least that would illustrate the issue I'm seeing.
",bmueller-sykes,2015-10-15 13:25:42
129,2015-09-29 19:07:03,"No urgency—take your time!
",gaearon,2015-10-15 13:25:42
129,2015-10-07 18:09:12,"By the way, I wasn't able to reproduce this myself.
Are you sure it's a problem with `react-redux@latest`?
",gaearon,2015-10-15 13:25:42
129,2015-10-07 18:26:20,"I’ve set this aside for now, but yeah, let me fire it up again, make sure I’m on the latest libraries from NPM, and test again.

On Oct 7, 2015, at 1:09 PM, Dan Abramov <notifications@github.com<mailto:notifications@github.com>> wrote:

By the way, I wasn't able to reproduce this myself.
Are you sure it's a problem with react-redux@latest?

—
Reply to this email directly or view it on GitHubhttps://github.com/rackt/react-redux/issues/129#issuecomment-146281090.
",bmueller-sykes,2015-10-15 13:25:42
129,2015-10-12 09:13:40,"I just encountered this issue with 
`react-redux: 3.1.0`
`redux: 3.0.2`
`react: 0.14.0`

Moving async actions to `componentWillMount` fixed it for me...
",jesenko,2015-10-15 13:25:42
129,2015-10-12 09:37:16,"Note that I could not consistently reproduce this; sometimes it raised warning and sometimes it did not, I assume it could be related to batching of updates that React does to optimize perf?
",jesenko,2015-10-15 13:25:42
129,2015-10-12 13:05:38,"@jesenko Can you try creating a test that emits the warning?
",gaearon,2015-10-15 13:25:42
129,2015-10-12 14:05:29,"Hi Dan,

I know this may be somewhat less than ideal, but I'm not going to be able to create a unit test in timely fashion, so in absence of that, I have created a small sample project that should demonstrate the problem.  Or, at least, it demonstrates it on my machine.  Here's the repo:

https://github.com/bmueller-sykes/redux-setstate-test

Once you run npm install and start, you should be able to to go localhost:3000, and then toggle between the two links. If you look in the console, you should see the setState() warnings.

FWIW, this project is on React 0.14, react-redux 3.1.0, redux 3.0.2, and redux-thunk 1.0.0.

The code which appears to trigger the error is in src/components/users.js.  You'll see that the `fetchUsers()` call is currently invoked in `constructor()`. If you move the call to the currently commented-out `componentWillMount()`, then everything appears to work properly.

Again, apologies that this is not an official unit test, but at this point it seems like getting a working test in front of you sooner rather than later is at least a decent step forward.

Thanks!
",bmueller-sykes,2015-10-15 13:25:42
129,2015-10-12 14:11:46,"Thanks for putting up a repro! I'll look into it with a couple of days.
If somebody feels like turning this into a failing test, please do.
",gaearon,2015-10-15 13:25:42
129,2015-10-12 14:15:25,"Cool. Let's hope it's useful!
",bmueller-sykes,2015-10-15 13:25:42
129,2015-10-12 15:48:59,"Tried creating a failing test for this

https://github.com/rackt/react-redux/compare/master...epeli:fail129?expand=1

but it's not failing! I don't know why. Seems like it should because the constructor and dispatch is called between the component render calls which would indicate it's part of the render but I guess it's not...

btw @gaearon I had a weird issue with the testing environment https://github.com/rackt/react-redux/commit/bba883ab347064d5d75c05a222a874fbeda17061
",epeli,2015-10-15 13:25:42
129,2015-10-12 16:03:15,"@bmueller-sykes your example is not actually async but actually this issue seems to be about sync dispatches from constructor anyway.

https://github.com/epeli/redux-setstate-test/commit/62c3dc885fb17b598ac74559ac6f6adc15ef401c
",epeli,2015-10-15 13:25:42
129,2015-10-12 16:08:43,"Yes, my apologies if I didn't say that. I had thought that the problem was with an async data call, and therefore perhaps some race condition was being encountered.  Then I pulled out the async data call, but left the ""thunk"" stuff in place, and just made the two dispatch calls, and I still saw the problem.  And it doesn't happen every time, either--in the test I built, it appears to happen roughly every other time. That kind of looks like a React lifecycle issue, but again, that's only a marginally informed guess.

As I said at the top, things work (or at least I see no errors in the log) if the call is put in componentWillMount(). Maybe this means that React is doing some type of cleanup on calls that are in that method as opposed to constructor()?
",bmueller-sykes,2015-10-15 13:25:42
129,2015-10-12 16:55:27,"I also tried creating isolated unit test for this, but could not get it to emit warning...dispatching multiple actions in constructor resulted in no warnings...
",jesenko,2015-10-15 13:25:42
129,2015-10-15 13:25:42,"This is not a bug in React Redux.

This happens when `dispatch()` inside one component's constructor causes a `setState()` inside another component. React keeps track of the “current owner” for such warnings—and it thinks we're calling `setState()` inside the constructor when technically constructor _causes_ a `setState()` inside some other part of the application.

I don't think we should handle this—it's just React trying its best do its job. The solution is, as you correctly noted, to `dispatch()` inside `componentWillMount()` instead.
",gaearon,2015-10-15 13:25:42
129,2015-10-15 14:40:04,"Hi Dan,

Thanks for the reply.  I was never certain this was a “bug” or just ""bad practice by me"", nor if it were a bug, where the bug was. It just seemed like this repo was the most likely place I’d get an answer (if it was in react, redux, or react-redux).

So I have a question and a reaction.

The question is, regarding the sample app I posted, what are the two components in question? You said a `dispatch()` in one component triggers a `setState()` in another component. In my example, is that `App` and `Users`?  And why did `dispatch()` in one component cause a `setState()` in another? Is that due to a bad coding pattern, or something internal to React?  I think I'm still trying to understand what the functional difference is between `constructor()` and `componentWillMount()`, since they are both called once at the start of a component's life cycle.

My reaction to this is that perhaps I wish there were documentation somewhere about when `constructor()` and `componentWillMount()` should be used in React. It seems like the lesson here is that you shouldn't use `constructor` to execute Redux calls, but I don't know if there are other gotchas out there.  I don't think I'm suggesting that you need to be the one to write this documentation--I'm more just throwing it out to the universe.

Anyway, thanks!
",bmueller-sykes,2015-10-15 13:25:42
129,2015-10-15 15:23:04,"> My reaction to this is that perhaps I wish there were documentation somewhere about when constructor() and componentWillMount() should be used in React. 

Just don't execute side effects in constructor. It's only for initializing state (and perhaps other variables). Don't make calls or change the state of your app from there.

> The question is, regarding the sample app I posted, what are the two components in question? You said a dispatch() in one component triggers a setState() in another component. In my example, is that App and Users?

A route change caused `dispatch` which caused mounting `Users` which caused another `dispatch` in its the constructor. So, `dispatch` inside `connect(Users)` caused a `setState` inside `connect(App)`.

> And why did dispatch() in one component cause a setState() in another? Is that due to a bad coding pattern, or something internal to React?

Any time you call `dispatch()`, all `connect()`-ed component wrappers have their `setState()` called so that the connected component receive that new state as their props. It's just how React Redux works.
",gaearon,2015-10-15 13:25:42
129,2015-10-15 15:49:30,"Ok, thanks.
",bmueller-sykes,2015-10-15 13:25:42
128,2015-09-28 18:29:04,"I love this pattern, but I'm trying to wrap my head around a specific use case. 

If, for example, I have a nutrition app that counts calories, and I have a view that lets you input the different things you had to eat for a particular meal. Each item has a ""category"" dropdown that you can pick from, and then a text field for you to narrow down your search to finally picking a specific item.

Using redux, every time the user adds an item to the list, an object would be added to the array representing the list in the global state. That's fine. But where it seems to get a little hairy is when I need to start dispatching actions from within each item. For example if on item 2 the user picks `""fruit""`, would I then dispatch a `selectedCategoryOnItem('fruit', 2)` action?

Then imagine if you have multiple lists - would that action then be `selectedCategoryOnItemInList('fruit', 2, 5);`? 

I just started playing with this library yesterday so it's entirely possible I missed something, but so far this is the only case that, to me, would either be overkill to use a singular global state, or, more likely, has a much better way to accomplish it.

Thanks for any help!
",jraede,2015-09-28 18:59:23
128,2015-09-28 18:59:23,"Closing - I re-read [this article](http://rackt.github.io/redux/docs/basics/Reducers.html) specifically about relationships.
",jraede,2015-09-28 18:59:23
127,2015-09-28 17:05:51,"- Adds dependency on [`hoist-non-react-statics`](https://github.com/mridgway/hoist-non-react-statics)
- Fixes #53
",erikras,2015-09-29 12:00:53
127,2015-10-05 08:48:13,"Out in 3.1.0.
",gaearon,2015-09-29 12:00:53
127,2015-10-05 12:23:53,"Hmm... The way greenkeeper references each PR with a hyperlink might get old. Do we really need to know about every public repo that merged this?
",erikras,2015-09-29 12:00:53
127,2015-10-05 12:26:39,"I don't really mind. The references are because it mentions release notes which link to this PR.
",gaearon,2015-09-29 12:00:53
127,2015-10-05 12:29:05,"Yes, that's what I meant. It uses the commit text, which should reference issues and PRs it fixes/merges.

I guess as long as it doesn't generate emails. :smile: 
",erikras,2015-09-29 12:00:53
127,2016-01-02 12:42:58,"This is sweet, but how do you get redux' state and dispatch in the static methods?

I was hoping that since the static method is hoisted I could just get the connected component using `this` in the static method. However `react-redux` calls onEnter hooks with the route as `this`. I can get the constructor of the connected component (`this.component`) but not the instance. ¯\_(ツ)_/¯

Using it like this:

<S_CODE_TOKEN>

However weird it is to access instance specific stuff in a static method. It's making server-side rendering a lot easier when you can call component methods that dispatch actions before calling `ReactDOMServer.renderToString(...)`.
",CrocoDillon,2015-09-29 12:00:53
127,2016-01-02 13:32:44,"It's better to create a new issue than post in a not quite related one. Static methods don't have dispatch because it only exists in a specific rendering context. For example in a server rendered app you would render components with a different store instance on every request. This is why it doesn't make sense for static methods to have access to the dispatch function.

What I think you can do is define `createRoutes(store)`. It would use the store to provide `dispatch` to the hook: `onEnter={(...args) => MyComponent.onEnter(...args, store.dispatch)}`.

Then you would call `createRoutes(store)` when rendering with your store instance. The component would receive `dispatch` as the last argument. 
",gaearon,2015-09-29 12:00:53
127,2016-01-02 13:54:41,"Sorry about that, found this PR after some searching and thought it was related enough since the hoisting is exactly what I was looking for. And yeah it did feel dirty abusing a static method like that, anyway I thought the method was hoisted to the connected component instance (and as such no longer static). I looked wrong though, it's still static so you're right... what I wanted doesn't make any sense.

The `createRoutes(store)` seems like the way to go! And it's really awesome that you respond so quickly :D Thanks a lot!
",CrocoDillon,2015-09-29 12:00:53
126,2015-09-28 16:15:30,"I'm using react-redux 3.0.2 for RN and I can't find a full doc or an up to date demo about it.
",roine,2015-09-28 16:46:44
126,2015-09-28 16:46:44,"What doc are you looking for?

Here's the API reference: https://github.com/rackt/react-redux/blob/master/docs/api.md#api
Here's the quick start: https://github.com/rackt/react-redux/blob/master/docs/quick-start.md#quick-start
Here's a more detailed walkthrough: http://rackt.github.io/redux/docs/basics/UsageWithReact.html

They're not about React Native, but there is no real difference between using React Redux on web or native, other than that you need to import from `react-redux/native`.

I'm closing because we don't plan to add separate documentation for RN. If you find a good example, let us know!
",gaearon,2015-09-28 16:46:44
126,2015-09-29 04:45:27,"@roine here is a example: https://github.com/chentsulin/react-native-counter-ios-android
",chentsulin,2015-09-28 16:46:44
126,2015-09-29 10:13:21,"thanks guys, much appreciated.
",roine,2015-09-28 16:46:44
125,2015-09-28 16:14:18,"It's my understanding that `connect()(MyComponent)` is going to return a HOC that wraps `MyComponent`. It _seems_ like I should be able to do this wrapping anywhere, even in a `render()` function, but something is breaking down. I have something like:

<S_CODE_TOKEN>

But this generates an Invariant Violation: `A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object`.

The warning is coming from [`ReactCompositeComponent.js:170`](https://github.com/facebook/react/blob/v0.14.0-rc1/src/renderers/shared/reconciler/ReactCompositeComponent.js#L168-L174).

`Component.isReactClass` is `undefined`, and `inst` **_is_** an `instanceof` `Component`. I'm not sure how my instance, instantiated a few lines above, being an `instanceof` my component is at all surprising and worthy of an error, but that's what's happening.

What am I missing? Why is `connect()` not returning a valid React component?
",erikras,2015-09-28 17:37:01
125,2015-09-28 16:40:11,"Any chance you have a duplicate React creeping in? For example you might have 0.13 and 0.14 side by side which could cause weird issues like this.
",gaearon,2015-09-28 17:37:01
125,2015-09-28 16:43:45,"I just tried adding a test like this to `connect.spec.js`:

<S_CODE_TOKEN>

It passes.
",gaearon,2015-09-28 17:37:01
125,2015-09-28 16:44:42,"By the way, just in case, you should never do this:

<S_CODE_TOKEN>

It means a new type is created on every `render`, so React kills the DOM and state on every render.
",gaearon,2015-09-28 17:37:01
125,2015-09-28 17:09:19,"I was rapidly prototyping something, and it felt naughty. It should be okay if I save my `ConnectedComponent` class as `this.ConnectedComponent` and only generate it when the props that I'm using for the `connect()` call change, right?
",erikras,2015-09-28 17:37:01
125,2015-09-28 17:37:01,"React needed to be a peer dependency. Thanks! :+1: 
",erikras,2015-09-28 17:37:01
125,2015-09-28 18:31:11,"> I was rapidly prototyping something, and it felt naughty. It should be okay if I save my ConnectedComponent class as this.ConnectedComponent and only generate it when the props that I'm using for the connect() call change, right?

Hmm. I suppose so.
",gaearon,2015-09-28 17:37:01
124,2015-09-28 15:09:13,"I encountered [this discussion](https://github.com/rackt/react-router/issues/2101#issuecomment-143744180) in react-router repo and it made me think.

If I navigate in app that uses redux to some other page. It is obvious that lots of keys in state will change somehow.
I don't care in my current apps, I just let my root components rerender many times (because store changes many times) and I rely on shouldComponentUpdate implementation to optimize things.
But I think that it is really waste calling render so many times. 
I think it would be nice if we could call some kind of batch update on state without calling changed() on store multiple times.
I would like to here some other opinions, thanks.
",vojtatranta,2015-09-28 15:41:27
124,2015-09-28 15:25:20,"Does https://github.com/tappleby/redux-batched-subscribe solve this problem for you?
",gaearon,2015-09-28 15:41:27
124,2015-09-28 15:41:27,"Maybe, docs are not the the best. But still would like to know you opinion.
",vojtatranta,2015-09-28 15:41:27
124,2015-09-28 15:48:16,"React plans to implement built-in batching for all `setState` calls later. For now, feel free to use a custom debouncing solution like https://github.com/tappleby/redux-batched-subscribe.

> It is obvious that lots of keys in state will change somehow.

If there's one action, there will be only one store change. If there are many actions, you can try avoiding firing many actions on route change.
",gaearon,2015-09-28 15:41:27
124,2015-09-28 15:54:25,"There is one action and in order to change the state all the reducers that should be changed by navigating react to this action (type: STATE_CHANGED), therefore there are lot of change events.

I think Relay may be right solution to this, but I haven't tested it yet.

Anyway, many thanks!
",vojtatranta,2015-09-28 15:41:27
124,2015-09-28 16:49:51,"> There is one action and in order to change the state all the reducers that should be changed by navigating react to this action (type: STATE_CHANGED), therefore there are lot of change events.

There is not a lot of state events. Redux does not have many stores. Every reducer is called on action, but **subscribers are only notified _once_ after all reducers have handled the action**.

> I think Relay may be right solution to this, but I haven't tested it yet.

Relay is a framework focused on declarative queries, optimistic mutations, etc. However great it is, it has does not seem to have a relation to this question to me.
",gaearon,2015-09-28 15:41:27
124,2015-09-28 16:53:06,"Really? So I must have bug in my code, many thanks!
",vojtatranta,2015-09-28 15:41:27
123,2015-09-28 12:31:26,"Hey guys,

I'm developing an app with pretty complex form logic. I'm trying to follow the advice of @gaearon about Smart and Dumb components.

My form is dynamic, and is constructed out of several `fieldsets`. The fieldsets that are being displayed are chosen based on user roles.

Each fieldset has it's own validation logic and own actions to retrieve async data based on user input, in order to guide the user towards completion of the form.

Not only that, but the inputs inside each fieldset are dynamic as well. Again, based on user permissions.

I've tried to implement this use case using only one Smart Component (the route handler), however without much success.

As I see it, in such use case, a fieldset is both a smart component and a dumb component. It both `connects` to redux, in order to dispatch some private use case actions and it also acts as a dumb component to bubble up state changes using events.

Am I getting it right?

In your opinion, where does validation should take place? Inside each fieldset or in the route handler?

Basically, I'm planning to use same validation logic both on client and server.

The model that I'm validating on the server, looks something like:

<S_CODE_TOKEN>

The original way I tried to implement it, is to  is to simply validate in the route handler level, but it got really messy and complex. Basically unmaintainable. Some validation logic needs to be async. 

On the server I prefetch all the validation logic before validating.

On the client, it's a bit harder because the fieldsets are dynamic.

What do you think? How would you approach nested forms with react-redux?

Thanks.
",tounano,2015-10-15 12:33:36
123,2015-10-15 12:33:36,"Check out [redux-form](https://github.com/erikras/redux-form) for a sane validation approach.
If your business logic is complex, indeed, nesting smart components is the way to go.

I'm closing because it's not an actionable issue—this type of question is better asked on StackOverflow.
",gaearon,2015-10-15 12:33:36
123,2016-01-24 18:07:23,"A complex form usually entails multiple controls of several types and is likely to require interaction with a number of different domain models and perhaps client-side caching of unsaved changes. As Redux users will see, creating even medium-complexity forms there are performance issues handling input `onChange`. Rather than going Immutable for better performance, or adding complexity with `redux-form`, I had good luck simply creating a UI form reducer and implementing the workaround as suggested by [`@trashgenerator against redux-form`](https://github.com/erikras/redux-form/issues/529#issuecomment-172653330).

**Aside:** Because React throws a `validateDOMNesting` exception when nesting forms (a likely case when composing forms of reusable other forms) I'm interested in knowing if anyone has successfully used the `form` attribute of the HTML5 [`Input`](http://devdocs.io/html/element/input) as a `formOwner` prop to workaround the form nesting limitation, and enable robust serialization of complex forms without sacrificing composability or introducing additional app dependencies.
",jhabdas,2015-10-15 12:33:36
122,2015-09-28 10:45:23,"Should fix https://github.com/rackt/react-redux/issues/118
",epeli,2015-09-28 12:35:37
121,2015-09-27 07:24:32,"Le me simplify the question . Component x as a button , doesn't know about another component y . when I click on x , y should change it's color . How can I do this with redux
",sap9433,2015-09-27 08:24:20
121,2015-09-27 08:24:20,"Keep the color as part of the Redux store’s state.

Both components are connected with `connect()` from `react-redux`. When component X is clicked, you call `this.props.dispatch(changeColor(color))` where `changeColor` is your Redux action creator. The reducer will be called, and it should return the color from the action. Then component Y, which is also `connect()`-ed, receives the new color via props.

Please consult [Usage with React](http://rackt.github.io/redux/docs/basics/UsageWithReact.html) for a more in-depth intro.
",gaearon,2015-09-27 08:24:20
120,2015-09-25 16:50:19,"I'm using react-redux@2.1.2 and react-router@1.0.0-rc1

I'm using this snippet to bootstrap redux with react-router:

<S_CODE_TOKEN>

This makes it show a blank page.

It was working fine on react-router beta3 but on this update it stopped working.
",pbreah,2015-09-25 18:26:56
120,2015-09-25 18:26:56,"If it broke after updating the router, why ask in `react-redux` repo? I'm closing as it doesn't appear related to React Redux.
",gaearon,2015-09-25 18:26:56
120,2015-09-25 19:01:49,"If I don't use react-redux, it works. You can check if needed the huge-apps example here: https://github.com/rackt/react-router/tree/v1.0.0-rc1/examples/huge-apps

I'm reporting it here because there seems to be an incompatibility between the Provider and the Router (on rc1) that are not playing well together.

If I go to the react-router repo to report this, they would say that the demo works for them (because they are not using react-redux)... eventually react-router will reach a stable 1.0 version and would break everyone's react-redux implementation as people update their dependencies if this incompatibility persists.

Sorry for the confusion,

Thank you
",pbreah,2015-09-25 18:26:56
120,2015-09-25 19:26:04,"I can assure you there is no inherent incompatibility between React Router and React Redux.
Provider and Router have no relation to each other and can't break each other.

Please put up a project reproducing the problem, and I can take a look what's breaking.
",gaearon,2015-09-25 18:26:56
120,2015-09-26 01:18:01,"@gaearon you were right.

It was the way the new version of react-router handled the history with:

<S_CODE_TOKEN>

instead of the beta3 way:

<S_CODE_TOKEN>

It was a bit tricky to troubleshoot. The react-router team is changing the API too much. Thanks for your re-assurance that it was not the cause of the issue, it helped anyways.

Also congrats for react-redux, awesome work.
",pbreah,2015-09-25 18:26:56
119,2015-09-25 16:32:41,"I'm structuring my project almost exactly like the [real-world](https://github.com/rackt/redux/tree/master/examples/real-world) redux example, and have wrapped my react-router in a Provider with the store specified, but after trying to apply connect() to a component I get the error:

`Uncaught Error: Invariant Violation: Could not find ""store"" in either the context or props of ""Connect(Home)"". Either wrap the root component in a <Provider>, or explicitly pass ""store"" as a prop to ""Connect(Home)"".`
# render

<S_CODE_TOKEN>
# Router

<S_CODE_TOKEN>
# Component

<S_CODE_TOKEN>
",julienvincent,2015-09-25 18:30:51
119,2015-09-25 18:30:51,"Please see https://github.com/rackt/react-redux/issues/57. It's also on the ""Troubleshooting"" doc page: https://github.com/rackt/react-redux/blob/master/docs/troubleshooting.md#troubleshooting
",gaearon,2015-09-25 18:30:51
119,2016-03-27 04:18:15,"I think it's worth leaving a link to the testing docs here http://redux.js.org/docs/recipes/WritingTests.html as its how I came across the solution for this issue: exporting the unconnected component.
",alex-wilmer,2015-09-25 18:30:51
119,2016-07-22 07:42:17,"@alex-wilmer Thanks for leaving the link wide open in here, i would even go further here because this one is google top1 url for now and easy to reach:

**In your tests, import the connect()'ed component via curly braces like so to avoid the error:**
import { App } from './App'

While in your app you still use default imports:
import App from './App'
",EugeneHlushko,2015-09-25 18:30:51
118,2015-09-25 15:52:40,"First of all, I'm using Relay. It means that redux own only part of my state and I have a problem with it.

I wrapped my `App` component using `connect` because I want to get locale info from store.
If I keep `pure` option as `true` then `connect` prevents re-rendering, because nothing changed in redux.
But, If I set `pure` option into `false`, `connect` doesn't recall `mapStateToProps` and `mapDispatchToProps`, so `stateProps` and `dispatchProps` are cached forever.

Is it a bug?

https://github.com/rackt/react-redux/blob/master/src/components/createConnect.js#L93
",vslinko,2015-09-28 12:35:37
118,2015-09-25 16:13:53,"Might be. Can you submit a failing test?
",gaearon,2015-09-28 12:35:37
118,2015-09-25 18:43:21,"Seems like a bug to me. I think `this.updateStateProps(nextProps)` should be called inside the `if (!pure) { ... }` statement before `this.updateState(nextProps)`.

I'll fix this in couple of days (if you don't beat me to it with a PR). Meanwhile can you try whether it fixes the issue for you? 
",epeli,2015-09-28 12:35:37
118,2015-09-25 21:35:43,"I think it also should include `this.updateDispatchProps(nextProps)`
",vslinko,2015-09-28 12:35:37
118,2015-09-25 21:37:31,"> Meanwhile can you try whether it fixes the issue for you?

I found a workaround, so I can't test it right now, but I sure it will work.
",vslinko,2015-09-28 12:35:37
118,2015-09-28 10:45:56,"@vslinko can you try whether #122 fixes this for you.
",epeli,2015-09-28 12:35:37
118,2015-09-28 16:59:26,"@epeli it works, thank you
",vslinko,2015-09-28 12:35:37
117,2015-09-24 05:00:41,"> If `ownProps` is specified as a second argument, then `mapStateToProps` will be re-invoked whenever the component receives new props.

changed to:

> If `ownProps` is specified as a second argument, its value will be the properties passed to your component, and `mapStateToProps` will be re-invoked whenever the component receives new props.

Happy for alternatives, just figured on first glance that ownProps changed the behaviour of the callback, but it doesn't mention (so I didn't think) what the value would be (also non-obvious who's ""own"" props they are), so thought it could use a visit.
",grrowl,2015-09-24 12:08:18
117,2015-09-24 12:08:22,"That's better, thanks!
",gaearon,2015-09-24 12:08:18
116,2015-09-20 22:17:35,"I'm testing out react-redux on react-native and can't seem to get past this issue. I have it set up exactly as shown in the docs and continue to get the context error.

<S_CODE_TOKEN>
",joeporpeglia,2015-09-21 13:27:00
116,2015-09-21 10:22:29,"Looks like you need pass `Test` to connect, not `Foo`. 
",evgenyrodionov,2015-09-21 13:27:00
116,2015-09-21 13:27:00,"Yes, you probably wanted this instead

<S_CODE_TOKEN>
",gaearon,2015-09-21 13:27:00
116,2015-09-21 14:00:42,"UGH.
",joeporpeglia,2015-09-21 13:27:00
116,2015-09-24 04:34:03,":+1: Ran into the same thing. Thanks, @gaearon & @theaqua.
",gasi,2015-09-21 13:27:00
115,2015-09-20 16:43:25,"Not sure if this is expected or not. But when updating `mapStateToProps` components don't seem to re-execute the mapStateToProps function.
",ronag,2015-09-23 14:34:59
115,2015-09-21 13:25:23,"Yeah, with the tooling overhaul it's a bit of grey area right now. Let's keep it open.
",gaearon,2015-09-23 14:34:59
115,2015-09-23 14:34:59,"Let's track this in https://github.com/gaearon/babel-plugin-react-transform/issues/26 instead. You can also keep using React Hot Loader until it is fixed. With React Hot Loader, `mapStateToProps` should get reloaded just fine. When the issue in Babel plugin is fixed, it will work with React Transform too.
",gaearon,2015-09-23 14:34:59
115,2016-02-29 04:56:51,"You might be interested in https://github.com/reactjs/redux/pull/1455.
",gaearon,2015-09-23 14:34:59
115,2016-04-18 14:25:30,"This is fixed in [React Hot Loader 3](https://github.com/gaearon/react-hot-boilerplate/pull/61).
It is built with lessons learned from both React Hot Loader and React Transform.
It’s still in alpha but I encourage you to [check it out](https://github.com/gaearon/react-hot-boilerplate/pull/61)!
",gaearon,2015-09-23 14:34:59
115,2016-04-18 18:58:50,"> This is fixed in React Hot Loader 3.
> It is built with lessons learned from both React Hot Loader and React Transform.
> It’s still in alpha but I encourage you to check it out!

@gaearon Great stuff! ran into this today when teaching redux to someone. I'll give it a whirl :)
",glenjamin,2015-09-23 14:34:59
114,2015-09-20 05:55:08,"I am getting the following issue when i finally get plug in the Provider.  When i remove it, i do not get this issue.  I followed the syntax from the Redux documents, but that doesn't seem to work.

Warning: React.createElement: type should not be null or undefined. It should be a string (for DOM elements) or a ReactClass (for composite components).

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",lostrouter,2015-09-21 05:02:28
114,2015-09-21 02:23:50,"when i move the Provider from appInstance to Bootstrapper, everything goes through fine.  Why is that?

<S_CODE_TOKEN>
",lostrouter,2015-09-21 05:02:28
114,2015-09-21 05:02:28,"i should dig through api docs more next time.
",lostrouter,2015-09-21 05:02:28
113,2015-09-19 10:01:07,"Now that you can pass pure `(props) => <Elements />` functions to React.createElement, should `connect()` be changed to allow those as well?
",wmertens,2015-09-19 16:12:15
113,2015-09-19 15:23:42,"Does it currently not allow them?
",gaearon,2015-09-19 16:12:15
113,2015-09-19 16:12:15,"Argh my bad, it does. Sorry about the noise!
",wmertens,2015-09-19 16:12:15
112,2015-09-16 15:23:54,"Hi,
I am having trouble to understand why the following doesn't work:

<S_CODE_TOKEN>

in comparison to

<S_CODE_TOKEN>

it throws: `Uncaught Error: Invariant Violation: Could not find ""store"" in either the context or props of ""Connect(App)"". Either wrap the root component in a <Provider>, or explicitly pass ""store"" as a prop to ""Connect(App)"".`

Transpiled code of both versions seems to be the same.

Use case is that I want to define routes in a different place, without wrapping it with Provider...

Thanks!
",milosh86,2015-09-16 15:37:19
112,2015-09-16 15:37:19,"Because of the way context works in React 0.13, it is important where React elements are _created_. React tracks whose `render()` is currently executing—this will be the context owner. In your case routes are created _before_ `<Provider>`'s `render` executes and thus don't receive the context.

You have two options:
- Use React 0.14RC where context works just fine without a function. (e.g. you can write `<Provider><App /></Provider>` with 0.14)
- With 0.13, define your routes in a function (e.g. `createRoutes()`) in a different place and call it like `<Provider>{() => createRoutes()}</Provider>` or even `<Provider>{createRoutes}</Provider>` (note no function call—I'm passing the function so Provider can call it during its render)
",gaearon,2015-09-16 15:37:19
112,2015-09-16 15:40:17,"Great, thanks!
",milosh86,2015-09-16 15:37:19
112,2015-09-28 14:17:24,"Crucial point is to pass the function and **not** to call it like in your example: `<Provider>{createRoutes}</Provider>`. Thanks for the solution.
",jmarceli,2015-09-16 15:37:19
111,2015-09-16 12:01:49,"<S_CODE_TOKEN>
",wenbing,2015-09-16 13:37:08
111,2015-09-16 13:37:08,"`connect()` returns a new component. If you'd like `defaultProps` to be present on it, you need to put `defaultProps` _on it_:

<S_CODE_TOKEN>
",gaearon,2015-09-16 13:37:08
111,2016-08-01 15:22:23,"@gaearon shouldn't this be handled by the library? It doesn't feel very intuitive this way (_especially when using decorators and static properties_), and doing the opposite (by requiring to manually `delete` the `defaultProps` from the wrapper element should the forwarding be undesirable) seems a saner default behaviour.
",arcanis,2015-09-16 13:37:08
111,2016-08-01 16:44:45,"No, the current behavior makes sense based on both the tooling, the language syntax, and the conceptual idea of defining ""original"" components vs defining wrappers for them.
",markerikson,2015-09-16 13:37:08
110,2015-09-16 02:57:57,"should i connect every smart component  that applying with route, i'm not clear about redux with react-router,   how i handle every component using redux
",macsen110,2015-09-16 13:38:11
110,2015-09-16 03:13:58,"Could you clarify the question?
",gnoff,2015-09-16 13:38:11
110,2015-09-16 03:25:03,"yeah, i have modify the issue! it just i am not clear about using redux in react-router! 
",macsen110,2015-09-16 13:38:11
110,2015-09-16 04:42:01,"It certainly can make sense to connect your handler components for React Router routes. you can also perhaps connect a component or multiple components further down the route handler component tree, it's really up to you in terms of where the proper factoring is.
",gnoff,2015-09-16 13:38:11
110,2015-09-16 13:38:11,"Please see https://github.com/rackt/redux/tree/master/examples/real-world for a Redux example with React Router.
",gaearon,2015-09-16 13:38:11
109,2015-09-16 00:37:00,"I missed a c in one of the links :/
",danmartinez101,2015-09-16 01:36:18
108,2015-09-15 14:32:40,"Is there currently a way for a component to access the root Provider store without being `connect`-ed to it? It sounds like it might be a bit of an anti-pattern, but I'm not sure. I've a couple of circumstances where I can see it coming in handy (dumb components which can still query related data from prop).
",jamiewinder,2015-09-16 03:15:31
108,2015-09-15 15:47:37,"What specifically is your use case? If you `connect()` without specifying parameters, you'll get just `dispatch` injected in props. Do you need something other than `dispatch()`?
",gaearon,2015-09-16 03:15:31
108,2015-09-15 15:57:33,"Basic example: I have a component for showing a 'Task':

<S_CODE_TOKEN>

But now let's say my tasks have an assigned user that I want to show. In my case, I have a 'userId' property on the task, but without access to the store I need this passed into the component as a prop. This gets more and more complex with nesting. For example, if this is used in a TaskList component, then the TaskList needs be updated to have access to both the Task and Users of my store so I can pass the required props. If my user belongs to a group, and I want to show that in TaskItem... well, you see how it goes!

If I had access to the store, I could do a lookup in the TaskItem and not have to rely on my parent component to resolve the related data.

Thanks
",jamiewinder,2015-09-16 03:15:31
108,2015-09-15 16:04:42,"@jamiewinder this might not work with you but consider possibly using selectors (consider [faassen/reselect](https://github.com/faassen/reselect))

You taskData will exist in your store normalized but when you connect your task list or whatever use selectors to compose the userData with the taskData into a denormalized unit for consumption by your TaskItem component.

This lets your dumb components be truly dumb, they get exactly and only what they need and they don't have to know how to query your user data
",gnoff,2015-09-16 03:15:31
108,2015-09-15 16:20:17,"Thanks @gnoff - it looks like it might help, though if I have my dumb components `@connect`-ed then doesn't that make smart by definition? Not that it's necessarily a problem, but I imagine having thousands of store-connected components (i.e. my lists **and** their items) will have a performance impact, I'd guess? I'll have a look into it all the same. Thanks again.
",jamiewinder,2015-09-16 03:15:31
108,2015-09-15 16:25:02,"https://github.com/rackt/redux/issues/419 might be of interest to you 
",danmartinez101,2015-09-16 03:15:31
108,2015-09-15 16:26:15,"well i was actually meaning that your TaskList or something higher might connect and it would receive the denormalized task data but you can really do it any way. The thing I think is important here is just that your TaskItem has an API (which includes user info) so it's preferable to satisfy that API externally via props than have to know about redux and query for user state within TaskItem.
",gnoff,2015-09-16 03:15:31
108,2015-09-16 03:15:31,"closing since I think this isn't actionable. tagged as question
",gnoff,2015-09-16 03:15:31
108,2015-09-16 15:33:41,"If you really really need `store`, grab it from context like `connect()` does it.

<S_CODE_TOKEN>
",gaearon,2015-09-16 03:15:31
108,2015-09-22 16:08:13,"Hi,

I'm struggling with the same issue, actually. It's entirely possible that in the long run, reading the store directly is the ""wrong"" way of going about things, but for now, it's what I need--or would like, at any rate. 

My problem is that `this.context` doesn't appear to exist.

My index.js file looks like this:

<S_CODE_TOKEN>

...and then within App.js' `constructor` function, if I do this:

<S_CODE_TOKEN>

...`this.context` is undefined. If one of you fine folk would kindly point out the error of my ways, I would be most appreciative.
",bmueller-sykes,2015-09-16 03:15:31
108,2015-09-22 16:24:21,"@bmueller-sykes 

Context is opt-in; you _have to_ specify `contextTypes` on the component to get it.
See [the above comment for an example](https://github.com/rackt/react-redux/issues/108#issuecomment-140778557).
",gaearon,2015-09-16 03:15:31
108,2015-09-22 16:25:37,"@bmueller-sykes 

Oh, also, if you want to access `this.context` in the constructor, you need to change your `super` call:

<S_CODE_TOKEN>

You can skip this if you're only reading it later because React will put `context` onto your instance after the constructor has run.
",gaearon,2015-09-16 03:15:31
108,2015-09-22 17:49:12,"bless you.  (-;
",bmueller-sykes,2015-09-16 03:15:31
108,2016-02-08 15:18:27,"Just a note about using `MyComponent.contextTypes` along with other components that might use context (react-router). The declaration of contextTypes on the component **overwrites** the context types of other parent components.

In my case, using **contextTypes** on a container component that uses react-router as well I did the following (assumes use of lodash).

<S_CODE_TOKEN>
",rodryquintero,2015-09-16 03:15:31
108,2016-02-08 16:11:56,"> The declaration of contextTypes on the component overwrites the context types of other parent components.

What do you mean by “parent components”? It will not overwrite `contextTypes` of _parent_ components. Parent components are components that contain your component in their `render()` method.

However, if you use inheritance, yes, you need to be careful. That said React actively discourages using inheritance for component classes. Just don’t use it.
",gaearon,2015-09-16 03:15:31
108,2016-02-09 05:40:39,"Sorry for the mixup. In my particular case, trying to grant access to the redux ""store"" in a component using `contextTypes` replaced the context variables set by `react-router` (route, history, etc..). I was getting ""undefined"" errors until I realized what was happening.

The main app.js looks more or less like this.

<S_CODE_TOKEN>

Is there a way to avoid replacing other components context?
",rodryquintero,2015-09-16 03:15:31
108,2016-02-10 16:41:22,"> Sorry for the mixup. In my particular case, trying to grant access to the redux ""store"" in a component using contextTypes replaced the context variables set by react-router (route, history, etc..). I was getting ""undefined"" errors until I realized what was happening.

Please show the full code. It is impossible to say what exactly was wrong without seeing where and how you applied `contextTypes`.
",gaearon,2015-09-16 03:15:31
108,2016-02-10 17:14:44,"Ok, here is the code. I am just pasting the relevant parts (ommitted lots of import calls). Thanks for looking into this @gaearon 

**app.js** (look at the OrderContainer component)

<S_CODE_TOKEN>

**order-container.jsx**

<S_CODE_TOKEN>

Feel free to critique anything that you see wrong/unusual :)
",rodryquintero,2015-09-16 03:15:31
108,2016-02-10 19:31:53,"Why are you doing this?

<S_CODE_TOKEN>

`connect()` _generates_ a new component that wraps your component _and_ [already has `contextTypes` specified for you](https://github.com/rackt/react-redux/blob/9c50ae13b84a9fe1702190a94bf900e4ffa32a26/src/components/connect.js#L289-L291). You never need to specify them explicitly when you use `connect()`.
",gaearon,2015-09-16 03:15:31
108,2016-02-10 19:46:17,"Thanks for the quick reply @gaearon. At the time I posted my comment I needed access to `getState()` to tell wether there were any changes in the component state and thus prevent/allow navigating away from it.

The code I posted has been refactored and I no longer need the access state within the component (I check if there are changes to be saved in the reducer. So you are right, I don't need access the store from context.

> connect() generates a new component that wraps your component and already has contextTypes specified for you. You never need to specify them explicitly when you use connect().

The weird thing is, I don't have access to the store in a ""connected"" component. Here is the context for the OrderContainer component. 

![image](https://cloud.githubusercontent.com/assets/1271370/12959434/5e75c4e2-d004-11e5-973b-a91b5e1a36ee.png)

I refactored the code and it is now much cleaner. I use the state from the `select` function to check for differences. But if you ever need to access the store within the component, at least in my case, I was not able to.
",rodryquintero,2015-09-16 03:15:31
108,2016-02-10 19:58:35,"We don’t provide access to it on purpose because people will misuse `store.getState()` in `render()` and wonder why it does not update. You are right that for such cases you need to specify `contextTypes` manually.

The reason for the overwriting in your case is that you are literally overwriting them. When you use mixins and `createClass()`, it intelligently merges `contextTypes`. However that requires you to specify them on the field on the object you pass to `createClass()`. If you move them there, the merging will work correctly. (However, this is irrelevant for ES6 classes which have no merging behavior and no mixins.)
",gaearon,2015-09-16 03:15:31
108,2016-02-10 20:31:44,"Thanks Dan for all the info provided. It helps to understand redux better.
",rodryquintero,2015-09-16 03:15:31
107,2015-09-15 04:56:28,,danmartinez101,2015-09-16 00:10:43
107,2015-09-15 04:56:55,"I can do more here if you would like
",danmartinez101,2015-09-16 00:10:43
107,2015-09-16 00:10:51,"Been meaning to do this.. Thanks!
",gaearon,2015-09-16 00:10:43
106,2015-09-15 03:54:43,"Not sure about the wording... But it's a start :D. 

Relates to #105 
",cesarandreu,2015-10-09 21:39:04
106,2015-09-15 16:43:28,"You might want to mention some of the ""magic"" statics for React components also. I found this issue because I needed to add something to the child context, and I was losing `childContextTypes` when using the decorator version of `connect`. My solution was:

<S_CODE_TOKEN>
",patrick-jones,2015-10-09 21:39:04
106,2015-09-15 17:58:45,"I wouldn't call these ""good"" and ""bad"", these are just situations where particular things work or don't work. Also, a bigger issue that needs to be clarified is that _the consumer outside the file_ will need to call `Foo.WrappedComponent.someStaticMethod()`, or you'd need to put `someStaticMethod` onto the wrapper:

<S_CODE_TOKEN>
",gaearon,2015-10-09 21:39:04
106,2015-09-16 04:12:38,"You may also want to mention that public ""instance"" methods must be copied onto the `prototype` of `connect()`-wrapped components:

<S_CODE_TOKEN>

Similarly, public methods/properties that _aren't_ defined on `Foo.prototype` will become inaccessible:

<S_CODE_TOKEN>

I'm not sure if these are common gotchas, but I figured it was worth making a note here. :beers:
",namuol,2015-10-09 21:39:04
106,2015-09-21 09:09:45,"FYI Fluxible uses [hoist-non-react-statics](https://www.npmjs.com/package/hoist-non-react-statics) to  copy static methods to the [wrapper](https://github.com/yahoo/fluxible-addons-react/blob/16cc68846f96a7e0ae70a7d1ba293bee5b347ea2/connectToStores.js#L49). Not sure that's a good idea but something to consider. It can be used by the userland code too.
",epeli,2015-10-09 21:39:04
106,2015-10-09 21:39:04,"I'm closing as there's been no response to my comments above, and we actually _do_ proxy static methods now thanks to `hoist-non-react-statics`.
",gaearon,2015-10-09 21:39:04
105,2015-09-14 21:47:39,"This isn't currently possible:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

It's worth noting that there are potential side effects to this change. A given component might define lifecycle methods that aren't present on the connect component, thus altering its behaviour. Consider this by no means ready to go - just want to open up the discussion to explore a solution.
",callum,2015-09-14 22:07:11
105,2015-09-14 22:07:11,"I'd rather prefer to do nothing about statics. Start copying methods, and people will want us to copy properties, then we'll have to blacklist _some_ properties (e.g. `contextTypes`), then it's just crazy amount of code and edge cases to maintain.

If you'd like to call statics, don't use decorator:

<S_CODE_TOKEN>
",gaearon,2015-09-14 22:07:11
105,2015-09-15 03:13:16,"+1 to keeping things simpler

Perhaps it'd be a good idea to explicitly mention that in the Support for Decorators section? @gaearon 
",cesarandreu,2015-09-14 22:07:11
105,2015-09-15 03:14:16,"> Perhaps it'd be a good idea to explicitly mention that in the Support for Decorators section?

I'd say it's not even related to decorators. Maybe ""My static and instance methods don't work!"" in Troubleshooting?
",gaearon,2015-09-14 22:07:11
105,2015-09-15 23:39:36,"Shouldn't decorator functions follow the [canonical definition](https://en.wikipedia.org/wiki/Decorator_pattern) in the sense that they merely _add_ new behavior?

Maybe we should call these something other than ""decorator functions"", because this is a point of confusion I've seen a lot in the React community, lately. When I use `@decorator`, I typically expect it to maintain the usual contract of the decorator pattern, i.e. it wont clobber anything that already exists unless explicitly stated in the function's API.
",namuol,2015-09-14 22:07:11
105,2015-09-16 00:03:33,"Using higher order components as a decorator function is confusing - especially to new people in JavaScript or from other languages. It's easy enough for anyone else to say, well, just work around it by doing x or y. To say this though, is to ruining the use of decorators in the future by breaking the implicit contract defined by decorators. In a strongly typed environment, this would not work. We're just using it as a single sugar over `x(class {})` here because ""it looks better"".
",blakeembrey,2015-09-14 22:07:11
105,2015-09-16 00:09:02,"Well, just don't use decorators for HOCs like `connect()` then. :-)
We don't encourage this in the docs.
",gaearon,2015-09-14 22:07:11
105,2015-09-16 00:12:51,"@gaearon You're right and it was nothing personal. I could have sworn all your examples used to use it, but that was a few months back - at least I remember going through something which had it. Good to see it's not the case anymore :+1: 
",blakeembrey,2015-09-14 22:07:11
105,2015-09-16 00:35:27,"True, it's not _explicitly_ encouraged, but perhaps [this section](https://github.com/rackt/react-redux/blob/56a123d9e59925dd4173b67cd6b8ff44ccf30a3d/docs/quick-start.md#support-for-decorators) in the readme might caution that `connect()` is not a canonical decorator function.

I'm not trying to pick on Redux, specifically -- [I see this anti-pattern _everywhere_ right now](https://twitter.com/louroboros/status/643200044213137410) -- but since Redux is becoming widely adopted by the community, this could be an opportunity to establish a better conventional understanding of the decorator pattern, which should not be confused with HOCs.
",namuol,2015-09-14 22:07:11
105,2015-09-16 01:37:31,"Doc PR welcome!
",gaearon,2015-09-14 22:07:11
104,2015-09-14 14:52:55,"Sending this mainly as a starting point for discussion on how and what should be benchmarked in Redux & react-redux.

Few points to begin with:
- The production builds should be used for benchmarking
- It should not be required to open devtools when running the bench
",epeli,2016-08-14 15:32:09
104,2015-09-14 15:22:09,"Wow, thank you! It's a great start.
",gaearon,2016-08-14 15:32:09
104,2016-07-10 16:59:37,"@epeli I know it's been a while, but any progress on this?
",timdorr,2016-08-14 15:32:09
104,2016-08-14 15:55:58,"Unfortunately no. Better close this for now.
",epeli,2016-08-14 15:32:09
103,2015-09-13 14:36:36,"I have a component that, given a `User` will display user profile information. Here is a simplified version:
#### `user.js`

<S_CODE_TOKEN>

We use this in places where we have the `User` object loaded and we want to show user information. However, there are a lot of places where we don't have the user object loaded (we just have a username or user ID) deep in the component tree and we also want to show user information. We usually solve this by also including a ""containerized"" version of this component which wraps the component and takes a `username` to fetch the `User` and pass it down to the original component.

However, now that we are using redux, I'm having trouble finding an elegant way to use a connected component to do this.
#### `user-container.js`

<S_CODE_TOKEN>

As soon as the `fetchUser` action is dispatched, the store state will reflect that the user is loading and not pass an `undefined` for the `user` prop.

In order to make this work with redux, we've settled on doing something like this:
#### `user-container.js`

<S_CODE_TOKEN>

This works the way we want it to. It keeps the original `UserProfile` component clean and redux-unaware. It doesn't worry about fetching users or dealing with application state, it just displays profile information for whatever user it is given. It delegates the actual fetching of the user to the `FetchingComponent` and the connecting to the store state to the `Container` component (via redux's `connect`).

But, it feels like a lot of boilerplate for something that I feel like is very common (fetching data before you display it). I was wondering if anyone has any ideas on how to reduce the boilerplate and/or maybe there is something simple I am missing that will make this much easier?
",chadly,2015-09-13 16:42:59
103,2015-09-13 16:42:59,"I think this is the same as https://github.com/rackt/react-redux/issues/47.
See https://github.com/rackt/react-redux/issues/47#issuecomment-139893624.
",gaearon,2015-09-13 16:42:59
103,2016-07-07 04:12:16,"@gaearon Hi I have a question about the way to connect the component.

Here is the code:

<S_CODE_TOKEN>

so this way, it will connect the component firstly then do the didMount, so what's the different between the 'before' and 'after' connect the component and the cons or pros.

Thanks,
",KaroseLiu,2015-09-13 16:42:59
103,2016-07-07 15:32:01,"Don't use multiple levels of inheritance with React components.  It's a bad idea for a number of reasons.

Also, you should really ask that kind of question over on StackOverflow instead.  More people will see it, and you're more likely to get a good answer.
",markerikson,2015-09-13 16:42:59
102,2015-09-11 17:19:03,"In the case where you need to read state in an action creator what is the best way to do so... For example suppose I have an action creator that gets a new user object:

<S_CODE_TOKEN>

Notice it is configured ahead of time with the current state, this enables the action creator to decide if it should really fire the action or not. Currently the mapping state and actions to components is separated, what do you do when an action creator needs access to state?

<S_CODE_TOKEN>
",iammerrick,2015-09-11 17:34:47
102,2015-09-11 17:23:55,"How are others implementing fire and forget actions for incrementally loading data. Sprinkling the logic into every component and only firing conditionally? 
",iammerrick,2015-09-11 17:34:47
102,2015-09-11 17:33:51,"<S_CODE_TOKEN>

is not the second parameter provided when using redux-thunk the getState function?
",mikeyamadeo,2015-09-11 17:34:47
102,2015-09-11 17:34:12,"@mikeyamadeo Bingo. Thanks!
",iammerrick,2015-09-11 17:34:47
102,2016-07-18 15:20:07,"What if you are using redux-saga, how would you access the state without using redux-thunk?
",tomascharad,2015-09-11 17:34:47
102,2016-07-18 19:20:35,"@tomascharad : I believe Redux-Saga provides a `select()` operation, which you would use roughly like:

<S_CODE_TOKEN>
",markerikson,2015-09-11 17:34:47
102,2016-07-18 20:31:04,"Correct, forgot to update! thanks @markerikson. 
",tomascharad,2015-09-11 17:34:47
101,2015-09-10 05:38:44,"I am trying to integrate a Redux based app that is using react-redux in decorator mode with ReactTransitionGroup.

The problem I'm having is that when the component, which has implemented the ReactTransitionGroup lifecycle methods, get's passed to ReactTransitionGroup, the component that is actually passed is the Connect component.

I have tried extending ReactTransitionGroup to look into WrappedComponent, but I am having trouble there. Here is the example of the extended ReactTransitionGroup that I have created:

https://gist.github.com/duro/c58d21cf3183ae01c786

With this, I get the following error:

<S_CODE_TOKEN>

Have you seen this implemented before? Any suggestions on how I could proceed forward?
",duro,2015-09-10 21:36:44
101,2015-09-10 06:04:19,"@duro interesting problem. I haven't dug into your gist too much but my initial intuition is that you'd be better served rendering an intermediate component between the vanilla TransitionGroup and your connected component. Is there anything in the transition lifecycle methods that actually need to be colocated with the connected component?

so instead of doing

<S_CODE_TOKEN>

you could do

<S_CODE_TOKEN>

and TransitionWrapper would just render `return this.props.children` or something like that

I _think_ that would work and would probably be more idiomatic and easier to test etc...
",gnoff,2015-09-10 21:36:44
101,2015-09-10 17:25:30,"I think this nudges me in a good direction. However, I think that the way ReactTransitionGroup works is that is wants it's direct children to be what changes. And since I am using this in react-router, my `ConnectedComponent` is a `Route` component.

So I have tried taking an approach similar to the connect decorator, which would wrap the Connected component at the class declaration level. However, I don't seem to be having much luck decorating a decorator. Here is what I have so far:

Decorator implementation:

<S_CODE_TOKEN>

And my stubbed `ConnectTransitionWrapper` decorator:

<S_CODE_TOKEN>

However, when I implement this, that `console.log never runs.

Any ideas?
",duro,2015-09-10 21:36:44
101,2015-09-10 18:01:51,"I think your render method should `return <ConnectedComponent {...this.props} />` but that's not the only problem you're experiencing since you say the console.log isn't being exercised. Can you confirm that your decorator is actually returning a valid React component? Does the connected component still work just without the apparent decorated component's render method?
",gnoff,2015-09-10 21:36:44
101,2015-09-10 21:14:12,"@gnoff I got it!!! Here is the final Decorator:

https://gist.github.com/duro/0534a9c5fe4bd8b868a8

And here is how it's implemented on a Connected component:

<S_CODE_TOKEN>
",duro,2015-09-10 21:36:44
101,2015-09-10 21:36:44,"nice!
",gnoff,2015-09-10 21:36:44
100,2015-09-10 00:08:31,"I wonder how I'd do one of actions.

Let's assume I have a registration form. The user types in his information and hits `send`. The server responds and says that the `username` is already taken. Now I want to focus the username input.

I can think of a couple of solutions but neither seems really elegant.
## 1

The easiest thing would probably be to save the focused input in the store and dispatch actions whenever the user focuses another input. In `componentDidUpdate` the component focuses than the correct input, but only if the currently focused input is not already the one that should be focused, otherwise the cursor would jump around while the user types. 
## 2

Another solution could be to dispatch a focus action that adds a focus entry to the store containing the element's ref-string to focus. In `componentDidUpdate` the input will then be focused and another action is dispatched that will delete this entry from the store again (it needs to be deleted, otherwise the input will be refocused every time the user changes the component, e.g. typing into another input).

Maybe I can't see the forrest for the trees, I'd appreciate any suggestion in the right direction.

Also thanks for redux, after the steep learning curve, writing components and testing logic is so much easier. It's just this thing, that I can't seem to find a good solution to.
",despairblue,2015-09-10 18:14:12
100,2015-09-10 06:18:36,"Hmm... my feeling is that neither of these is the right solution since field focus is probably better modeled as transient state. for me personally i don't imagine I'd want to be able the serialize and rehydrate/replay the sequence of field focuses. This is probably best handled outside of redux or at the very least modeled as a side effect that an action creator invokes. However this is not a settled topic for redux itself since there isn't agreement on where or how to hang side effects off of the redux ecosystem. I'm sure Dan or many others can help you out better than I but you might also have more traction in the redux repo or slack channel since the problem you bring up isn't truly react specific.
",gnoff,2015-09-10 18:14:12
100,2015-09-10 15:04:12,"I thought that this is kind of react specific, since I'd assume less declarative view kits would just listen to the store for an action.

Another idea is to pass the component instance to the action creater, the action create can then focus the correct input:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Should I open this in the redux repo? Or I just open an issue and link to this one.
",despairblue,2015-09-10 18:14:12
100,2015-09-10 16:19:48,"After talking with @lunaris on slack, that's what we came up with: https://gist.github.com/despairblue/4ae15b40bc47d8efc2af
",despairblue,2015-09-10 18:14:12
100,2015-09-10 18:13:45,"Sure, the problem might be more tractable in other environments but what I meant was more generally is that there is often a divide between domain state and view state and while we think a lot about the domain stuff and redux is great there we don't have to and we might not want to move all view state into redux. Nothing is black and white (Atom's view toggles css classes on a timer to implement a blinking cursor and if you app is a text editor then view state like that and domain state really might be one in the same).

Your gist solution seems like a fine way to handle this since you're hanging the focus off of the async call with is already side-effect driven and not meant to be replayed etc... and won't be unless a new username check happens and you trigger a similar condition.
",gnoff,2015-09-10 18:14:12
100,2015-09-10 22:37:02,"@gnoff ok, thanks. Could you tag this as a question? Just so it's easier to find if someone else is thinking about a similar problem.
",despairblue,2015-09-10 18:14:12
99,2015-09-08 17:24:00,"Fix for #86

The idea in this change is to delay executing `mapStateToProps` until the render call. The render call is forced for every state change by setting the store state to the component state for every connect wrapper. This works because state changes are batched in React. Which means that when the render and there for the `mapStateToProps` is executed the state and any props based on it are consistent across the full component tree. Which is awesome!

Only concern that I have with this is performance. That's why in the second commit I add a pure render wrapper component (`PureWrap`) which makes sure that the original component is only rendered when the `mapStateToProps` actually produces a change. Not sure whether this is better or worse than the original. But even if this is not that performant I'd prefer it because it avoids whole class of weird edge cases.

---

Anyone wanting to help and test this I pushed a compiled version to `epeli/react-redux#fix86`. Put that in your package.json as the `react-redux` version number.
",epeli,2015-09-24 12:17:15
99,2015-09-08 22:25:24,"@epeli this brings us back to the way things were before #1 which as @gaearon says makes the worst case performance the default. I'm inclined to leave the existing behavior as is. If we did adopt this form I would hope that it be made optional and opt-in much like the 2nd arg props parameter to the first two connect arguments.
",gnoff,2015-09-24 12:17:15
99,2015-09-08 23:08:29,"> this brings us back to the way things were before #1 which as @gaearon says makes the worst case performance the default

Not able apprehend right away every point made in #1 but I'd like hear why this would be the **worst** case compared to the current implementation because in it `mapState` is also executed always when the store changes. Also note the PureWrap optimization in this PR which prevents any useless renders in the wrapped components if the `mapState` does not produce any changes.
",epeli,2015-09-24 12:17:15
99,2015-09-09 05:49:46,"I could be wrong because I haven't tried running it with your PR but I believe that this change will make even users of the `mapStateToProps` with a single arg call that selector on every re-render of the component, not just when state actually changes. It is true that if you use the props arg for `mapStateToProps` then this behavior already happens but is opt-in and was only added at the request of certain library users, it isn't intended to be the default mode. If your PR is merged then we adopt this more eager mode automatically (I think)

Is that not true?
",gnoff,2015-09-24 12:17:15
99,2015-09-09 08:22:10,"All tests now pass.

> I believe that this change will make even users of the mapStateToProps with a single arg call that selector on every re-render of the component, not just when state actually changes

If I understand you correctly the test `should not invoke mapState when props change if it only has one argument` tests for that and it passes. Funny enough I had to change the `invocationCount`  assert from 2 to 1 which would indicate that this does less work. Also that was not the only place I had to assert for less mapState invokes.

I will do some real world tests later today to see if I missed some regressions. I'd love see other test this as well!

I also added a [new test](https://github.com/epeli/react-redux/commit/cc5f049d6d8a8d2c73eaf543afbb38efb90f5adc) which makes sure that the wrapped component does not re-render on every state change. Only when the mapState creates a new state.
",epeli,2015-09-24 12:17:15
99,2015-09-09 12:23:18,"Wrote a [failing test](https://github.com/epeli/react-redux/commit/683ba87626482381bc5a6c000139c1274b8ac0e8) for the issue at hand and learnt something new about React. React only batches setState calls during event handlers and because this fix relies on the batching it means that the original issue can still occur when the store is updated from somewhere else. Any ideas how common that is? Could it be possible to somehow force React in to the batching mode when store updates?

In the other news I'm begining to be fairly confident about the performance here. Waiting for feedback.
",epeli,2015-09-24 12:17:15
99,2015-09-09 13:43:49,"> Could it be possible to somehow force React in to the batching mode when store updates?

To answer myself: Yes with [`React.unstable_batchedUpdates(cb)`](https://github.com/facebook/react/issues/4525#issue-98261422). Previous discussion: https://github.com/rackt/redux/issues/125

In that issue sebmarkbage [mentions](https://github.com/rackt/redux/issues/125#issuecomment-119381649) that React has a plan to move batching by default. Can you @sebmarkbage confirm that that's still the case?

If so then that issue will be resolved by itself with React update. Until then [redux-batched-updates](https://github.com/acdlite/redux-batched-updates) middleware can be used as a workaround.

---

Anyone wanting to help and test this I pushed a compiled version to `epeli/react-redux#fix86`. Put that in your package.json as the `react-redux` version number.
",epeli,2015-09-24 12:17:15
99,2015-09-10 06:54:40,"@epeli took a better look and you I retract my earlier statements about regressing performance-wise. However regarding the lack of consistent batched updating is it true then that for this PR to not regress in any case one needs to use either the redux-batched-updates middleware or does the lack of that simply return us to the edge-case broken state that we are in with the reported issue #86 ?
",gnoff,2015-09-24 12:17:15
99,2015-09-10 07:07:49,"> is it true then that for this PR to not regress in any case one needs to use either the redux-batched-updates middleware or does the lack of that simply return us to the edge-case broken state that we are in with the reported issue #86 ?

It simply returns to the edge-case broken state. So currently this PR just makes the edge-case less likely and goes completely away with the redux-batched-updates middleware.

Incorporating batched updates into Redux was discussed in https://github.com/rackt/redux/issues/125 and it seems that the main reason not to do that was the fact that it was available only as a React addon. Could it be considered for react-redux as it's now available in the React object? 
",epeli,2015-09-24 12:17:15
99,2015-09-11 06:07:44,"> as it's now available in the React object

I'll take this back. It was available only in the 0.14 beta. It has been moved to react-dom in 0.14 RC. I guess we don't want to depend on that because react-redux can be used with React Native and it makes no sense there.

Nevertheless I don't haven't seen / heard any downsides in merging this PR. Without it it is impossible to workaround the issue.
",epeli,2015-09-24 12:17:15
99,2015-09-11 11:30:50,"Is it absolutely necessary to have the intermediate component here?
",gaearon,2015-09-24 12:17:15
99,2015-09-11 12:34:50,"Not absolutely necessary. I think the same optimization could be implemented manually in the connector component by invoking the mapState function in shouldComponentUpdate.
",epeli,2015-09-24 12:17:15
99,2015-09-11 16:16:21,"My opinion is leave out the PureWrap and let that be a call site optimization. Lots of people connect pure render mixin'd components so I don't think it grants a whole lot in terms of benefit for the extra complexity of code (unwrap function for instance) plus the variable way the connected component would be represented in the component tree (normal connected components will now have 3 tiers intead of just 2 in the devtools explorer)

Neither of these downsides are huge but then neither is the upside so simplicity wins?
",gnoff,2015-09-24 12:17:15
99,2015-09-11 16:20:25,"> I think the same optimization could be implemented manually in the connector component by invoking the mapState function in shouldComponentUpdate.

most mapState functions will be fast but i wonder if adding the extra call would be worth the mild improvement you get by avoiding some updates. I can imagine that this might improve the already decently fast cases but make the minority of slower cases even slower. just food for thought
",gnoff,2015-09-24 12:17:15
99,2015-09-11 18:49:38,"The devtools argument is really good argument against the PureWrap. I'll remove it on Monday. 

Seems that the batching will become default in React at some point:https://mobile.twitter.com/sebmarkbage/status/642366976824864768?refsrc=email&cn=cmVwbHk%3D
",epeli,2015-09-24 12:17:15
99,2015-09-11 20:47:55,"To clarify: I don't promise I'll merge this PR yet :-).
I'm a bit sick now and will review later when I get better.

I definitely want to avoid:
- any performance regressions from current implementation
- adding a component layer (we actually worked to get rid of it before)
",gaearon,2015-09-24 12:17:15
99,2015-09-11 21:47:22,"Currently I don't see any reason why both would not be avoidable.  Perf should be OK already.  I'm now busy for couple days but will work on this after that. 
",epeli,2015-09-24 12:17:15
99,2015-09-14 10:23:55,"I rewrote the entire pull request and force pushed it to this PR branch.
- The change is now much simpler. Should be easier to understand
- All existing tests are now untouched and passing
- Extra component layer (PureWrap) is now gone

As far as I understand the performance should be as good as in the master. Although because there is no performance test suite so I cannot be 100% sure.

A new compiled version is again available in `epeli/react-redux#fix86` for easy testing in your apps.
",epeli,2015-09-24 12:17:15
99,2015-09-14 13:01:36,"Good job! I've been trying to avoid `setState()` unless needed because, even with `shouldComponentUpdate` returning `false`, it's somewhat of a perf hit in a tight spot. However I agree correctness is more important than performance.

Do you have any idea how we can test perf regression, if any? Maybe we can put this into https://github.com/evancz/todomvc-perf-comparison and hope the benchmark isn't too skewed?
",gaearon,2015-09-24 12:17:15
99,2015-09-14 13:25:53,"> Good job!

Thanks!

> I've been trying to avoid setState() unless needed

Sadly it's exactly `setState()` (and batching) which makes the state consistent.

> Do you have any idea how we can test perf regression, if any?

I think http://benchmarkjs.com/ by the Lo-Dash creator jdalton  is the tool for the job. We've used it for `underscore.string`. 
",epeli,2015-09-24 12:17:15
99,2015-09-14 13:34:10,"Do you have the time capacity to try to benchmark before/after?
",gaearon,2015-09-24 12:17:15
99,2015-09-14 14:56:34,"So I created #104 for that. Just one simple test to see how store changes perform on a mounted component.

Results of three runs on the current master:

<S_CODE_TOKEN>

and with this PR

<S_CODE_TOKEN>

Not seeing any significant differences. But this is just a one test.
",epeli,2015-09-24 12:17:15
99,2015-09-18 09:59:18,"Something still blocking this?
",epeli,2015-09-24 12:17:15
99,2015-09-21 21:06:56,"Can you please write release notes and upgrade instructions for this change?
See [Releases](https://github.com/rackt/react-redux/releases) for examples.

From my understanding, this _potentially_ can be a breaking change, so we'll jump to 3.0, but we need to tell people _which exactly_ patterns would fail which worked before. And of course we need to explain which patterns, previously failing, would work now with this change.

I'll release it as `3.0.0-alpha` today, but it will be labeled as `react-redux@next` on NPM until people give it some usage.
",gaearon,2015-09-24 12:17:15
99,2015-09-21 21:39:17,"Out as `3.0.0-alpha`, let's wait for feedback.
",gaearon,2015-09-24 12:17:15
99,2015-09-22 08:10:06,"One correction to the release notes:

> This is only relevant if you have nested connect()ed components

It's only relevant if you have nested connect()ed components **_and you use the `ownProps` param of `mapStateToProps` in the nested ones**_.

Also I would like to recommend usage of `redux-batched-updates` middleware until React starts defaulting to batching.
",epeli,2015-09-24 12:17:15
99,2015-09-24 12:26:59,"I released 3.0.0 but I think I'm misrepresenting the change again.
Can you please look at the release notes: https://github.com/rackt/react-redux/releases/tag/v3.0.0

?
",gaearon,2015-09-24 12:17:15
99,2015-09-24 12:58:58,"The `ownProps` and props from the parent component are the same thing. So the current description doesn't make much sense. Cannot complain, this change is really hard to explain simply.

I would put it like this:

> Now the map functions (`mapStateToProps`, `mapDispatchToProps` and `mergeProps`) are not called until React starts to render the `connect()`ed components. Previously the map functions where called immediately when store changed which could cause weird edge case bugs when the `ownProps` parameter was a derivative of the state. The state from which it was derivative of was a different version than what was passed as the `state`parameter. In some cases the states can be incompatible with each other and cause very confusing bugs in user code.
> 
> Unfortunately the states stay consistent only when store dispatches are called in batches ie. from DOM handlers or manually from `ReactDOM.unstable_batchedUpdates(fn)`. Luckily `redux-batched-updates` middleware can be used to force batching for all dispatches.
",epeli,2015-09-24 12:17:15
99,2015-09-24 13:05:29,"Oh, a collaborator hat, thanks :)  Updated it.
",epeli,2015-09-24 12:17:15
99,2015-09-24 13:08:34,"Thanks!
",gaearon,2015-09-24 12:17:15
98,2015-09-07 11:29:03,"I have seen draft of .d.ts file [there](https://github.com/rackt/redux/issues/206). But only redux.d.ts file was included to [DefinitelyTyped](https://github.com/borisyankov/DefinitelyTyped) repo.
react-redux.d.ts will be very helpful!
",arusakov,2015-09-16 13:39:07
98,2015-09-13 06:12:22,"+1
a .tsd file is really needed
",pdeva,2015-09-16 13:39:07
98,2015-09-13 06:38:17,"PRs are always welcome. I don't use TS, don't think @gaearon does either. Hopefully someone out there using it will contribute
",gnoff,2015-09-16 13:39:07
98,2015-09-16 13:39:07,"I'll close because we don't intend to provide or support an official definition.
Please feel free to submit a PR to DefinitelyTyped yourself!
",gaearon,2015-09-16 13:39:07
98,2016-05-22 16:44:50,"@gaearon Any thoughts on reopening this now that Redux has an official definition?

There's a really nasty issue right now where the DefinitelyTyped react-redux definition doesn't actually work correctly with the officially-maintained Redux definition, only the DT Redux definition. It'd be nice if there was an official definition for react-redux that was kept in sync with the official Redux definition :)
",thomasboyt,2015-09-16 13:39:07
98,2016-05-22 17:29:39,"Happy to accept a PR adding a definition. I just can't create one myself. 
",gaearon,2015-09-16 13:39:07
97,2015-09-07 11:13:29,"@gaearon  I've already posted a link to my project about a month ago under the Redux repository. That time it was called `redux-graphql`. I've did a lot of work to understand what it should be. Now I think of it as a React binding for Redux with Relay idea behind.
Today I've ended up with some clunky readme, but I suppose it would be enough for you to get an idea
Now its [adrenaline](https://github.com/gyzerok/adrenaline). Can I somehow contact you to get feedback on what I've done?
",gyzerok,2015-09-21 21:19:35
97,2015-09-21 21:19:35,"Hi, unfortunately I haven't had time to play with GraphQL or Relay yet so I can't comment.
Since there's already a Relay thread in Redux repo, I encourage you to post there instead: https://github.com/rackt/redux/issues/464
",gaearon,2015-09-21 21:19:35
96,2015-09-06 23:38:33,"Previously, if you unmount the component during the dispatch cycle, the component itself is still going to receive the next state, call `mapStateToProps`, and attempt to call `setState`. This resulted in a warning by React that we're setting state on an unmounted component.

With this change, we bail out from handling any state changes if we have unsubscribed. Fixes #92, #95. 
",gaearon,2015-09-06 23:38:55
95,2015-09-06 21:03:35,"Made an [example repo](https://github.com/Agamennon/example), details to help understand the example in the repository readme.

Very grateful if this could be looked into
",Agamennon,2015-09-06 23:41:19
95,2015-09-06 22:18:10,"@Agamennon It's not working for me :(
First, there is a link to a local repo in `package.json`: 

<S_CODE_TOKEN>

I've installed it from npm, but didn't manage to make it work (via `npm start`) - seems like `/build/bundle.js` redirects to index page.
",alexkuz,2015-09-06 23:41:19
95,2015-09-06 22:23:19,"repo fixed., please try again
",Agamennon,2015-09-06 23:41:19
95,2015-09-06 22:29:37,"FYI, you can reopen existing issues:

<img width=""299"" alt=""screen shot 2015-09-07 at 01 29 15"" src=""https://cloud.githubusercontent.com/assets/810438/9706930/e36b4ada-54ff-11e5-82e3-5fe0ef425d7d.png"">
",gaearon,2015-09-06 23:41:19
95,2015-09-06 22:36:05,"@gaearon ,  i don't think i can, the Reopen Issue button does not show up for me.
",Agamennon,2015-09-06 23:41:19
95,2015-09-06 22:36:49,"Oh, I didn't realize this was the case.
Looking into your example now.
",gaearon,2015-09-06 23:41:19
95,2015-09-06 23:00:39,"There is indeed a bug: if you have unsubscribed during a dispatch, we should ignore the change event.
I'll fix the code shortly.
Thanks for reporting.
",gaearon,2015-09-06 23:41:19
95,2015-09-06 23:02:04,"@gaearon   awsome, thank you!
",Agamennon,2015-09-06 23:41:19
95,2015-09-06 23:41:19,"Should be fixed in 2.1.1 via #96.
",gaearon,2015-09-06 23:41:19
94,2015-09-06 03:47:05,"I came across an interesting [implementation](https://github.com/voronianski/flux-comparison/blob/master/redux/js/components/App.jsx#L17) of `connect()` in Dmitri Voronianski's [Flux Comparison](https://github.com/voronianski/flux-comparison) repo and thought it might make a nice addition to the docs:

`export default connect(() => ({}))(App);`

If I'm understanding it correctly, this would subscribe the component to the Redux store and pass an empty object for props. This component is used to render two containers but lets them to pull in what they need vs. passing it to them as props. I deduce that if nothing were passed to `connect()`, one container wouldn't see things that occurred in the other, but I'm not certain.
",preflight,2015-09-08 22:13:04
94,2015-09-08 22:13:04,"@preflight the `() => ({})` parameter is actually not necessary in this case since that is the default mapper so using `connect()(App)` actually gets you the same functionality. That said there isn't much use in subscribing to the redux store if you don't provide a mapper to grab some state. The CartContainer and ProductsContainer which are both connected will work just fine with an unconnected parent App. If anything it triggers unnecessary re-renders though in this simple example it's irrelevant
",gnoff,2015-09-08 22:13:04
94,2015-09-09 00:59:17,"Excellent - thanks for clarifying
",preflight,2015-09-08 22:13:04
94,2015-09-09 05:50:29,"no problem
",gnoff,2015-09-08 22:13:04
93,2015-09-05 21:12:12,"This PR is for discussion.
Recently I have found the need to have the state in mapDispatchToProps.

I have an actionCreator like this:

<S_CODE_TOKEN>

And I want to write

<S_CODE_TOKEN>

I know there are other options to inject `addFeature(state.data1, state.data2)` to `someActionCreator` but I would like to do it without `MyComponent` knowing about it and this looks like a nice solution.

Any reason why this is a bad idea? Is there a better way?
",tcoopman,2015-09-13 00:45:07
93,2015-09-06 06:27:37,"I've been thinking about this some more and I'm wondering if the API of `connect` can't be simplified. 

If we pass `state`,  `dispatch` and `ownProps` into `mapToProps` then you don't need 3 separate methods for  `connect` like there are now. The new API would be `connect(mapToProps(state, dispatch, ownProps))`

The disadvantage is that it's a bit more work for the user  then at the moment but it should be possible to expose the current API on top of this new one. 

Thoughts?  
",tcoopman,2015-09-13 00:45:07
93,2015-09-06 23:30:44,"> If we pass state, dispatch and ownProps into mapToProps then you don't need 3 separate methods for connect like there are now. The new API would be connect(mapToProps(state, dispatch, ownProps))

This was discussed in https://github.com/rackt/react-redux/issues/1. The only reason current API isn't that simple is because it essentially makes worst perf case (""rebind everything on every prop change"") the default.
",gaearon,2015-09-13 00:45:07
93,2015-09-07 12:08:34,"So what's your opinion about this merge request.
Is this something that can be considered as a low level API with the current api on top?

Maybe my usecase for having access to the state in the actionCreators is not valid, but it looks reasonable to bind some state to the actoinCreators so that your components don't have to know about it.
",tcoopman,2015-09-13 00:45:07
93,2015-09-13 00:45:07,"I'm inclined not to merge this. This is a very bad case perf-wise (re-binding on every state change) that we won't ever encourage. It also makes API asymmetric and harder to remember.

If you want to do this, you can always introduce an intermediate component and call `bindActionCreators` from it in `render()` method, as it will have comparable performance.
",gaearon,2015-09-13 00:45:07
92,2015-09-05 19:57:30,"I was on redux v1 and i was having no issues, now i upgraded redux and react-redux and i am getting 
""Warning: setState(...): Can only update a mounted or mounting component.""  On some of my components (they are nested connected components), i am trying to find what changed that is causing this with no luck!.
",Agamennon,2015-09-06 14:09:38
92,2015-09-06 14:09:38,"The only way we can help you is if you provide a reproducible example causing the issue.
",gaearon,2015-09-06 14:09:38
92,2015-09-06 14:12:25,"To clarify: please reopen if you can set up a project that shows the problem.
",gaearon,2015-09-06 14:09:38
92,2015-09-06 21:25:40,"This kind of error usually happens when you're trying to update component state in a deferred function (like `setTimeout`), without canceling it in `componentWillUnmount`. I would suggest to check your code for that.
",alexkuz,2015-09-06 14:09:38
92,2015-09-06 21:31:02,"Made an [example repo](https://github.com/Agamennon/example), details to help understand the example in the repository readme.  @alexkuz  i think that maybe that's whats happening inside react-redux, what is not clear, is how the app is triggering it.
",Agamennon,2015-09-06 14:09:38
92,2015-09-06 23:41:29,"Should be fixed in 2.1.1 via #96.
",gaearon,2015-09-06 14:09:38
91,2015-09-04 18:35:13,"**NOTE** [Also on redux-devtools repo](https://github.com/gaearon/redux-devtools/issues/96)

I have executed `ncu -u` to upgrade my package dependencies, to have the settlement like described below:

Previous versions:

<S_CODE_TOKEN>

New versions:

<S_CODE_TOKEN>

 And after installing newer package versions, saw an error displayed on console:

<S_CODE_TOKEN>

After searching for a while, I realised, by debugging the injected code by webpack, it had to do with the `devtools`.

Here the following code snippet:

<S_CODE_TOKEN>

If I comment out exactly the imports as well as the `devTools(), persistState(...),`as well as the `<DebugPanel>...</DebugPanel>`, simply works.

The reason why isn't working. I don't know. I'm quite new on these technologies and haven't follow issues' discussions you have had around.

I can state then that by using the latest versions of react-redux together with the DebugPanel of redux-devtools, the application crashes not bootstrapping properly.

Hope it helps to figure out.
",davidpelayo,2015-09-04 18:49:37
91,2015-09-04 18:50:36,"See here: https://github.com/gaearon/redux-devtools/issues/96#issuecomment-137819220.
",gaearon,2015-09-04 18:49:37
90,2015-09-03 18:55:06,"Added a new `options` argument to `connect()`, with just one option so far: `pure`. If set to `false` (it defaults to `true`), it will bypass `shouldComponentUpdate`. This resolves https://github.com/rackt/react-redux/issues/88.

Let me know if it needs any better explanation in the README.

It might be slightly more performant to do something like `if (!finalOptions.pure) { delete Connect.prototype.shouldComponentUpdate }`, but that's a little bit too hackish for me to really be proud of...
",dallonf,2015-09-03 20:11:36
90,2015-09-03 19:28:53,"This looks good to me.
@gnoff what do you think?
",gaearon,2015-09-03 20:11:36
90,2015-09-03 21:18:51,"Yeah looks good to me.
",gnoff,2015-09-03 20:11:36
89,2015-09-03 04:28:33,"We can 

`Inject todoActionCreators as todoActions, and counterActionCreators as counterActions`

`Inject todoActionCreators and counterActionCreators together as actions`

now. 

can i Inject todoActionCreators as todoActions, and counterActionCreators as counterActions, and then together as actions?

<S_CODE_TOKEN>
",geminiyellow,2015-09-03 16:53:57
89,2015-09-03 16:53:57,"Yes. It's not magic: you can do anything you want.

<S_CODE_TOKEN>
",gaearon,2015-09-03 16:53:57
88,2015-09-02 20:52:05,"The `@connect` decorator, by default, appears to add a very aggressive `shouldComponentUpdate` hook to the decorated component. This is great if Redux and props are the only sources of statefulness in your app - but that's not always true and leads to some seriously confusing behavior with non-obvious workarounds when it's not.

This is a known issue, of course, with react-router 0.13, but I'm having the same issue with [react-intl](http://formatjs.io/react/)'s `IntlMixin`, which adds localization data to context. And I get the feeling that this is going to keep happening as long as the React ecosystem is as fragmented as it is right now. 

It would be really nice to just be able to throw an option on the `@connect`ed components that I know are impure (or, similar to React core's `PureRenderMixin`, throw an option on the ones I know _are pure_; there's certainly room for debate as to whether opt-in or opt-out is the right choice here).
",dallonf,2015-09-03 20:11:36
88,2015-09-02 21:33:11,"Fair. I'm open to opt-out behavior with a `{ pure: false }` options parameter. Because all parameters are functions, we can let it always come last (e.g. you can skip `mergeProps` or `mapDispatchToProps`). A PR is welcome.
",gaearon,2015-09-03 20:11:36
88,2015-09-02 21:34:24,"@dallonf yup this is a tricky situation. My thought is that in keeping with the paradigm that redux assumes state is not mutated we should guide people towards making more pure Components and leave the aggressive `shouldComponentUpdate` as is.

Given that you won't always have control over this situation though i think there are a couple of workarounds that might be worth exploring (some more hack-ish than others). I haven't tried any of these but in theory they should work

~~1) make your `mapStateToProps`, `mapDispatchToProps`, or `mergeProps` arguments return a purposely 'dirty' props object. something like~~

<S_CODE_TOKEN>

~~This will eliminate all preformance optimizations from shouldComponentUpdate since there will always be a prop that has a new object reference and therefore should fail the shallowEqual test~~
this doesn't work per @dallonf 's testing. 

2) develop your own 'impure' Component decorator that wraps your connected component and have it call forceUpdate on the connected component child whenever it's props change.

maybe something like this

<S_CODE_TOKEN>

btw, i never actually use forceUpdate so not sure if it would need to go there or in componeDidUpdate or somewhere else but essentially this _should_ force the connected component to update on every prop change

you would use it like this

<S_CODE_TOKEN>
",gnoff,2015-09-03 20:11:36
88,2015-09-02 21:37:44,"> Because all parameters are functions, we can let it always come last (e.g. you can skip mergeProps or mapDispatchToProps)

dealing with a second arg of an object of functions complicates this slightly but yeah this solution is certainly workable.
",gnoff,2015-09-03 20:11:36
88,2015-09-02 21:49:29,"Cool, I'll see if I can add an options argument (defaulting to `pure: true`) over the weekend. I'm actually rather fond of the `forceUpdate: {}` workaround (and slightly embarrassed I didn't think of it myself :wink:), but probably better to have something a bit more readable in the long run. And it opens the door for more configuration options on `@connect`, should you ever need them...
",dallonf,2015-09-03 20:11:36
88,2015-09-02 22:17:53,"Sounds good.
",gnoff,2015-09-03 20:11:36
88,2015-09-03 17:45:30,"FYI to anyone looking at this issue, the `forceUpdate: {}` hack actually doesn't have the intended effect; the `shouldComponentUpdate` definition compares the props that were already calculated the last time there was a store update or new props were received, so it won't be able to handle updates outside the Redux flow.

Also, after diving into the implementation of a `pure: false` option, I think that the `options` argument is going to always need to be the fourth argument to `@connect`; trying to make it the last argument regardless of which others are present would probably lead to madness.

Anyways, I've got a PR incoming soon.
",dallonf,2015-09-03 20:11:36
87,2015-09-02 17:20:02,"Hello

I am trying to port my project to Redux.
My components are react already. And I added 
everything needed (or at least I think so) to 
obey the redux framework. 

But my React Component wont re-render even if I use 
`export default connect(state => state)(WorkspaceView)`

The reducer gets called, the state is altred, but nothing happens.
When I force a render manually it works.

I uploaded my project here  https://dl.dropboxusercontent.com/u/11300320/PTG.zip , and the component I am writing about is called Workspace view.
Just dload it, run `npm install` `gulp` and `./run`.
It uses electron.io therefore the run command
Please help me !

Regards Carsten
",K4stor,2015-09-02 20:34:14
87,2015-09-02 19:52:50,"Hi @K4stor I have looked into your code, it seems you are mutating your state in your reducer, you are pushing a new entry into operations array instead of creating a new array. See http://rackt.github.io/redux/docs/basics/Reducers.html or http://rackt.github.io/redux/docs/Troubleshooting.html in the first section. Your state needs to be immutable so that re-render is triggered. Hope it helps !
",alanrubin,2015-09-02 20:34:14
87,2015-09-02 20:33:28,"Ah ok that makes sense. Thank you very much ! I will try it tomorrow and let you know if it worked 
",K4stor,2015-09-02 20:34:14
87,2015-09-02 20:34:14,"https://github.com/rackt/react-redux#my-views-arent-updating
",gaearon,2015-09-02 20:34:14
87,2016-03-23 20:46:14,"Just wanted to update the link that Dan posted above, the troubleshooting section has moved and this shows up pretty high in searches: 

https://github.com/reactjs/react-redux/blob/master/docs/troubleshooting.md#my-views-arent-updating
",bdavisx,2015-09-02 20:34:14
87,2016-03-25 17:06:04,"Yeah, mutating state is the reason for components not updating like 98% of the time.  I've written up an answer on this in my FAQ.  It's not merged in yet, so I'll link to the WIP branch: https://github.com/markerikson/redux/blob/merge-faq-page/docs/FAQ.md#why-isnt-my-component-re-rendering-or-my-mapstatetoprops-running 
",markerikson,2015-09-02 20:34:14
86,2015-09-02 15:18:18,"Ok, this is really hard to explain so I've set up an example here:

https://github.com/epeli/redux-connect-demo

Build it and play with it with devtools console opened. You should see following errors:

<S_CODE_TOKEN>

This happens because the [`mapStateToProps` of the `Item` component](https://github.com/epeli/redux-connect-demo/blob/master/index.js#L40-L43) is called with component props based on the previous store state. The two states are not compatible anymore and it causes all kinds of errors.

I think the parent should render and update the props for the `Item` component before the `mapStateToProps` of the `Item` component can be executed.
",epeli,2015-09-23 14:35:32
86,2015-09-02 16:33:05,"> This happens because the mapStateToProps of the Item component is called with component props based on the previous store state.

Why do you say the _previous_ state? I think they are called with the most _recent_ state—and because the `Item`s have not yet unmounted, they query state that doesn't exist anymore.

I don't think this is something we can fix. React state changes are asynchronous and React may (or may not) batch them. Therefore, the moment you press “Remove”, the Redux store updates, and both `Item` and `App` receive the new state. Even if the `App` state change results in unmounting of `Item`s, that will happen later than `mapStateToProps` is called for `Item`.

Unless I'm mistaken, there is nothing we can do. You have two options:
1. Request all required state at `App` (or a lower, e.g. `ItemList`) level and pass it down to “dumb” `Item`s.
2. Add safeguards to `mapStateToProps` for “currently unmounting” state. For example, you may return `null` from `render` in this case.

_Potentially_ we could have the component generated by `connect()` return `null` from its `render` if `mapStateToProps` returned `null`. Does this make any sense? Is this too surprising?
",gaearon,2015-09-23 14:35:32
86,2015-09-02 16:54:46,"> Why do you say the previous state?

Because the store has been updated and the props `App` has passed to the `Item` are based on an old store state at the time the store query is run.

> Therefore, the moment you press “Remove”, the Redux store updates, and both Item and App receive the new state. 

Hmm. Is it actually required for the both to be subscribed to the store? Wouldn't it be enough if only the one most closest to the component root is subscribed? When that component renders it will trigger a render (and a store query) in all child components.

Seems like it would solve this. Although I have no idea how to detect the one closest to the root.
",epeli,2015-09-23 14:35:32
86,2015-09-02 17:07:54,"Darn. Just realized it would break apps using pure components. Because the props between the parent and child components does not necessary change it might prevent some children from updating because React thinks there's nothing to the update but there might be because the store has changed.
",epeli,2015-09-23 14:35:32
86,2015-09-02 18:08:01,"> Potentially we could have the component generated by connect() return null from its render if mapStateToProps returned null. Does this make any sense? Is this too surprising?

I find it really counter intuitive that you have consider state transitions in the store query. This really feels a bug to me but I see how it's unresolvable with the current React APIs.

When thinking about the roots of this issue I think it can be nailed down to the fact that `connect` can be used in a way to break the unidirectional data flow. It can inject new data to multiple points in the component tree and when you do that you will have a situation where you have some stale data between the tree nodes.

> 1. Request all required state at App (or a lower, e.g. ItemList) level and pass it down to “dumb” Items.

This seems to be the right way to do it. Although I sometimes feel that I have to introduce new props to intermediate components just for them to passing those down. Which feels ugly. But I'm not sure it really is because it solves so many issues and weird edge cases like this.

Could Redux just prevent people from ending up with this situation? Maybe by removing `ownProps` param from `mapStateToProps`? It took me quite a while to figure out what the hell was going on.
",epeli,2015-09-23 14:35:32
86,2015-09-02 20:35:46,"> Could Redux just prevent people from ending up with this situation? Maybe by removing ownProps param from mapStateToProps? It took me quite a while to figure out what the hell was going on.

We removed it before, and people were unhappy. We do warn in the documentation that we encourage you to follow React flow and avoid `connect()`ing leaf components.
",gaearon,2015-09-23 14:35:32
86,2015-09-02 21:14:36,"Heh,  before today I would have been one those unhappy people but after pulling my hair out while debugging this today my opinion is certainly different. Sadly I missed that bit of the docs (or didn't take it seriously at the time ). 
",epeli,2015-09-23 14:35:32
86,2015-09-08 13:56:20,"To whom who are looking for a workaround for this: An interesting observation is that if you do the selection in the component render method the issue is not present at all.

Example:

https://github.com/epeli/redux-connect-demo/pull/1/files

The down side is that your component will do more useless re-renders as you'll have to pass in data that is not actually used for rendering.
",epeli,2015-09-23 14:35:32
86,2015-09-23 14:35:32,"Superseded by #99.
",gaearon,2015-09-23 14:35:32
85,2015-09-02 10:19:53,"https://www.npmjs.com/package/redux-react -> 404
https://github.com/cgarvis/redux-react -> 404
",joaojeronimo,2015-09-02 12:32:51
85,2015-09-03 03:19:58,":+1: 
",cesarandreu,2015-09-02 12:32:51
84,2015-09-02 06:40:29,"clarifying admonition against listening to the entire state in `connect()`

resolves #83
",gnoff,2015-09-02 06:42:05
83,2015-09-01 20:19:38,"Redux docs state:

> [We] wrap the components we want to connect to Redux with the connect() function from react-redux. Try to only do this for a top-level component, or route handlers. While technically you can connect() any component in your app to Redux store, avoid doing this too deeply, because it will make the data flow harder to trace.

https://rackt.github.io/redux/docs/basics/UsageWithReact.html

But, in a seeming contradiction, react-redux README states:

> Don’t do this! It kills any performance optimisations because TodoApp will rerender after every action.
> It’s better to have more granular connect() on several components in your view hierarchy.

I'm not sure whose advice to follow!
",arkwright,2015-09-02 06:42:05
83,2015-09-01 23:08:30,"> Try to only do this for a top-level component

Notice it says ""a"" top-level component, not ""the"" top-level component.  You can, and probably should, `connect()` multiple times for top-level components (e.g., header, sidebar, main content, footer).  You could make the argument that choosing the route handler would be ""the"" top-level though.

In my opinion, more calls to `connect()` doesn't actually make the data harder to trace, but easier.  I can see immediately where the data is coming from in a `connect()ed` component rather than tracing it up through props.

The downside though, is that it ties a component to a given app, because the component needs to know the shape of the state object.  If you don't want to reuse the code though, then that's not really a downside.

It's generally better to have a handful of ""smart"" components that know about the app, and have them rely on ""dumb"" components that render entirely from props.

If you're not using it already, look into [reselect](https://github.com/faassen/reselect) too.  They are about to go 1.0.

You may also be able to take advantage of React's `PureRenderMixin` to restrict how deep the re-rendering goes.
",mindjuice,2015-09-02 06:42:05
83,2015-09-02 06:30:17,"@arkwright I believe you are slightly misinterpreting the point of the the readme where is says

> Don’t do this! It kills any performance optimisations because TodoApp will rerender after every action.

The example is showing an connect select function that maps the entire state to the connected component

<S_CODE_TOKEN>

In any application of reasonable size this is likely unnecessary since parts of your state are likely not of concern for the given connected component. The point about performance is recognizing that in this given example the component will be re-rendered anytime any state changes even if it isn't relevant to the connected component.

I think the readme example could probably make this a little more clear so that future readers don't also come away with the impression you did.

Hopefully that helps clear things up.

Thanks,
Josh
",gnoff,2015-09-02 06:42:05
83,2015-09-02 14:46:35,":+1: 
",gaearon,2015-09-02 06:42:05
82,2015-09-01 14:38:16,"Hi,

thanks for your awesome work. I use `react`, `redux` and `react-redux` for a small feature of my Ruby on Rails project. I don't use npm and require and thats why I use the browserified versions of these libs. I also use coffeescript and decided against using jsx.
I somehow can't manage to connect my store to my react component. The code looks like this

<S_CODE_TOKEN>

I hope you guys can help me to figure out what is wrong.

Thanks,

Johannes
",joker-777,2015-09-02 06:32:45
82,2015-09-01 20:34:02,"`ReactRedux.connect` doesn't mutate the component class. It returns a new component class. So, you have to do something like:

<S_CODE_TOKEN>
",billyjanitsch,2015-09-02 06:32:45
82,2015-09-02 06:32:45,"@joker-777 not super familiar with coffeescript but @billyjanitsch 's analysis seems to be spot on. 

Closing but let me know if the provided solution doesn't resolve the issue.
",gnoff,2015-09-02 06:32:45
82,2015-09-02 09:17:43,"@billyjanitsch Thanks so much for your answer. This really fixed it. Could you explain why I have to do this but the documentation doesn't show it. Maybe it is part of this `export default` but I have no idea. It would be also nice to add it to the documentation.
",joker-777,2015-09-02 06:32:45
82,2015-09-02 14:45:27,"Hope this helps: https://github.com/rackt/react-redux/commit/ce6ce7c0b8c0ecd262923ea8974e086a272217c3
",gaearon,2015-09-02 06:32:45
81,2015-09-01 00:53:38,"Since React Native 0.10 is out and polyfills `process.env.NODE_ENV`, we can now safely rely on it being there. If you're not ready to use RN 0.10, or are in a different environment, either use a browser build, or shim it yourself.
",gaearon,2015-09-01 00:53:46
80,2015-09-01 00:51:48,"This removes the magical reducer replacement in favor of explicit `replaceReducer()` call where you create your store. See https://github.com/rackt/redux/pull/667 for details.
",gaearon,2015-09-01 00:51:58
80,2017-02-08 12:51:31,"From you relaease notes about hot module reload:
> See https://github.com/rackt/redux/pull/667 for a migration example.

The link provided isn't really helpful.",aFarkas,2015-09-01 00:51:58
80,2017-02-08 16:08:23,"@aFarkas You can look at where the repo is located now, and use that to fix the link 😉  https://github.com/reactjs/redux/pull/667",gaearon,2015-09-01 00:51:58
79,2015-08-30 12:35:49,"I'm trying to build my own components on top of react-redux. I'm stuck with the following error:

<S_CODE_TOKEN>

My components need to have their own childContext. Mb I need somehow to merge childContext of my components with one from react-redux?
",gyzerok,2015-09-02 14:40:57
79,2015-09-01 06:01:48,"Are you using a `<Provider>` higher up in your component tree than the component that you are using `connect` on?
",gnoff,2015-09-02 14:40:57
79,2015-09-02 14:40:57,"There is nothing we can help you with unless you provide a full example.
Please reopen when there is something we can run and test.

> Mb I need somehow to merge childContext of my components with one from react-redux?

No, React merges context.
",gaearon,2015-09-02 14:40:57
79,2015-09-02 14:46:19,"@gaearon sorry for not closing an issue, I've already find the solution.
",gyzerok,2015-09-02 14:40:57
79,2015-09-02 14:47:11,"What was it?
",gaearon,2015-09-02 14:40:57
79,2015-09-02 15:48:36,"<S_CODE_TOKEN>

Was not obvious for me that Router component itself have to be declared in the function body.
",gyzerok,2015-09-02 14:40:57
79,2015-09-02 16:26:17,"Got it! It's documented: https://github.com/rackt/react-redux#could-not-find-store-in-either-the-context-or-props
",gaearon,2015-09-02 14:40:57
79,2015-09-03 12:58:13,"@gaearon I guess here is another problem. I thougt that if I place router variable as and return value from function inside Provider it would be similar to put <Router> tag inside Provider. I think its all about how JSX work. Dont know how to describe it better. Hope you can :)
",gyzerok,2015-09-02 14:40:57
79,2015-09-03 12:59:06,"Okay. I think we'll just wait for React 0.14 because the problem will go away with it.
",gaearon,2015-09-02 14:40:57
78,2015-08-28 23:11:35,,mikekidder,2015-08-28 23:14:07
77,2015-08-28 05:56:37,,ironhee,2015-09-06 23:28:04
77,2015-09-06 23:28:04,"Thanks, but I'd rather keep configuration explicit.
",gaearon,2015-09-06 23:28:04
77,2015-09-10 06:11:55,"Ok thank you :D
",ironhee,2015-09-06 23:28:04
76,2015-08-27 05:31:26,"Similar to https://cdnjs.com/libraries/redux , it would be great to have react-redux wrapped in a bundle.
",vipulnsward,2015-10-23 11:27:17
76,2015-08-27 05:34:24,"that's up to cdnjs

this is how you request they add a lib apparently (just googled it myself)
https://goo.gl/EfDJx9
",gnoff,2015-10-23 11:27:17
76,2015-08-27 05:39:52,"@gnoff The issue was more around distributable browser bundle than cdnjs.
Is there a way currently to use it, that I am missing?

cc @gaearon 
",vipulnsward,2015-10-23 11:27:17
76,2015-08-27 06:00:32,"yup,

npm install react-redux
check node_modules/react-redux/dist/react-redux.js and react-redux.min.js
",gnoff,2015-10-23 11:27:17
76,2015-08-27 12:33:04,"Let's reopen until we put `react-redux` on cdnjs ourselves.
Then we can point people to it.
",gaearon,2015-10-23 11:27:17
76,2015-09-29 07:00:13,"I'm working on a project where Bower and RequireJS is used, and since I couldn't find a minified version (or even an ES5-transpiled one) I forked this repo and removed the `dist` folder from `.gitignore` after building the bundles and created an new tag that is v3.0.1.1 which includes the `dist` folder.

Fork can be found at https://github.com/hummlas/react-redux

It can be installed via Bower with:
`bower install react-redux=https://github.com/hummlas/react-redux.git#v3.0.1.1 --save`

It's not a long term solution but until a better alternative is available for non-NPM projects feel free to use it :)
",Markus-ipse,2015-10-23 11:27:17
76,2015-09-29 10:17:44,"If you can prepare a PR for cdnjs that would be rad.
This way, you can point Bower to cdnjs file.
",gaearon,2015-10-23 11:27:17
76,2015-09-29 10:18:23,"Here is an example of how I did it for redux: https://github.com/cdnjs/cdnjs/pull/5371
",gaearon,2015-10-23 11:27:17
76,2015-10-20 11:05:11,"It's going to be on cdnjs soon: https://github.com/cdnjs/cdnjs/pull/5980
",gaearon,2015-10-23 11:27:17
76,2015-10-23 11:27:17,"React Redux is now available on cdnjs: https://cdnjs.com/libraries/react-redux
",gaearon,2015-10-23 11:27:17
75,2015-08-27 03:35:27,"Using the dumb/smart components pattern, does it mean that all dumb components will be re-rendered when the ""containers"" receive a new state notification ? For example in the the todo example adding a todo to the list will re-render the whole app. 

Are there any pattern to optimise repaints in a larger app ?
",m4nuC,2015-08-27 04:19:55
75,2015-08-27 04:19:55,"React-Redux implements a pretty aggressive `shouldComponentUpdate` so state changes will only trigger re-renders if the slice of state `@connect`'d to results in a different set of state props (only checked shallowly)

That said. If the smart component does trigger a re-render and you are concerned about performance then you should implement `shouldComponentUpdate` in your 'dumb' components. In practice most components can use something like https://facebook.github.io/react/docs/pure-render-mixin.html
",gnoff,2015-08-27 04:19:55
75,2015-08-27 05:11:22,"I am not so much concerned about performance yet but I think many people are and that should be addressed in the docs.

As you said:

>  state changes will only trigger re-renders if the slice of state @connect'd to results in a different set of state props

In that case in the simple todo example form the doc, why would the footer component re-render when a todo is added? It doesn't share any state with the todo list.
",m4nuC,2015-08-27 04:19:55
75,2015-08-27 05:31:34,"This is a consequence of how React works, and react-redux actually improves the situation. In no way does `connect` cause there to be additional re-renders of the entire app tree that you wouldn't experience if you simply mutated a prop or state on a similarly positioned component.

That said, the footer in this example shows the todo count so it rightly does need to be re-rendered. but I believe that is beside your point.

bottom line is store subscriptions do not produce additional render noise as long as you are only subscribing to the slice of state the given component tree has an interest in reacting to.
",gnoff,2015-08-27 04:19:55
75,2015-08-27 06:14:46,"> That said, the footer in this example shows the todo count so it rightly does need to be re-rendered. but I believe that is beside your point.

Are we talking about the same example ? 
![image](https://cloud.githubusercontent.com/assets/1518868/9513666/09103b12-4cc5-11e5-8d8b-82d97c729b76.png)

> This is a consequence of how React works, and react-redux actually improves the situation. In no way does connect cause there to be additional re-renders of the entire app tree that you wouldn't experience if you simply mutated a prop or state on a similarly positioned component.

My question is more about the dumb/smart component pattern. Is it correct to say that smart components re-render all their nested dumb components when state updates ? If so it's worth taking into account when structuring the app.
",m4nuC,2015-08-27 04:19:55
75,2015-08-27 06:49:04,"> Are we talking about the same example ?

not sure, i'm talking about this here: https://github.com/rackt/redux/blob/master/examples/todomvc/components/Footer.js#L51

> Is it correct to say that smart components re-render all their nested dumb components when state updates ? If so it's worth taking into account when structuring the app.

yes that's fair to say but I don't think it has a particularly deep implication for how one should structure their app.
",gnoff,2015-08-27 04:19:55
75,2015-08-27 12:37:04,"Put `connect()` at the top until you hit performance problems, then put it somewhere in the middle to solve them.
",gaearon,2015-08-27 04:19:55
75,2015-08-27 13:01:39,"Thanks, so one connect() at the top most level is the approach you'd recommend? It'd nice to have this statement in the docs somewhere, it'd help understanding the whole redux flow. Maybe a ""flux like"" diagram would help there as well.

> then put it somewhere in the middle to solve them.

Then we would have multiple connect() for all main ""containers"" connecting to the main store ?
",m4nuC,2015-08-27 04:19:55
75,2015-08-27 13:46:38,"There is no official recommendation on this, it really depends on the app.

Usually I'd go for “one `connect()` per route handler”, but as your app gets more complicated, you'll want to put `connect()`s further down the hierarchy. It's a balance you'll need to figure out for yourself. As soon as there's too much prop passing, it's a sign that you should `connect()`.

> Then we would have multiple connect() for all main ""containers"" connecting to the main store ?

Yes.
",gaearon,2015-08-27 04:19:55
75,2015-11-06 13:52:12,"Sorry to drag this up but i had a similar question. Because the props are passed from the top level root component, i.e the APP itself, it seems that every inherit component will render.
This doesn't seem to be an issue with other flux implementations as you can have the even listener, listening for updates - somewhere deep in the component hierarchy. ShouldComponentUpdate works ok here but where as in Redux components will need to update to pass the props down.

This seems to be conflicting with React fundamentals where a full app render is taking place all the time?
I'm envisaging performance bottlenecks. 

Am i missing something? @gaearon @gnoff 
",farzd,2015-08-27 04:19:55
75,2015-11-06 14:06:19,"Actually you probably dont want to have your root component react to every changes in your store. It should only propagate the ""global"" state changes like maybe a session change or a language switch. 
The rest of your state will be handled by the relevant children. 
BTW you can define which part of the store your component will react to using `mapStateToProps`: https://github.com/rackt/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options
",m4nuC,2015-08-27 04:19:55
75,2015-11-06 15:06:57,"> Because the props are passed from the top level root component, i.e the APP itself, it seems that every inherit component will render.

I said in the above comment that nobody forces you to connect just once. You can have as many connected components as you like. This addresses any potential performance bottlenecks.
",gaearon,2015-08-27 04:19:55
74,2015-08-27 01:46:13,"Following the example here
https://github.com/rackt/react-redux#react-router-013
I'm using a wrapped provider on my React Router handler

<S_CODE_TOKEN>

If I pass this to `React.renderToString` it renders correctly.

if I pass it to `React.createElement` it throws an error
`TypeError: Object [object Object] has no method 'toUpperCase'`

<S_CODE_TOKEN>

I'm using some 3rd party middleware that passes the wrapped handler to
`React.renderToString(React.createElement())`

I suspect this is because React is trying to get a `type` for the anonymous function `{() => }` 

Do I have to use  an anonymous function here? can I wrap it in some other component or something?
",kevzettler,2015-08-27 02:08:02
74,2015-08-27 01:58:30,"Can you please show code in some more context? It would help to see the specific failing line completely.
",gaearon,2015-08-27 02:08:02
74,2015-08-27 01:59:28,"`<Provider>...</Provider>` is already an element. Passing this to `createElement` doesn't really make sense to me.
",gaearon,2015-08-27 02:08:02
74,2015-08-27 02:02:08,"> I suspect this is because React is trying to get a type for the anonymous function {() => }

This has nothing to do with what's inside `<Provider>` I think. Doing `React.render(React.createElement(<div />))` will also fail because `<div />` is _already_ an element.

> I'm using some 3rd party middleware that passes the wrapped handler to
> React.renderToString(React.createElement())

Um, why? :-)
",gaearon,2015-08-27 02:08:02
73,2015-08-26 00:47:56,,mindjuice,2015-08-26 02:20:54
72,2015-08-25 15:54:01,"Using React Native, a disruptive error appears to warn about function/no-function for Provider in app root.  It seems that the version check is failing as React.version is undefined in my React Native environment.  

As these are just warnings, perhaps it's best to use console.warn rather than console.error?  Or perhaps there is a better way to fix the version check?  

{
    ""react"": ""^0.13.3"",
    ""react-native"": ""^0.8.0"",
    ""react-redux"": ""^1.0.0"",
    ""redux"": ""^1.0.1"",
    ""redux-thunk"": ""^0.1.0""
}
![ios simulator screen shot aug 25 2015 11 52 03 am](https://cloud.githubusercontent.com/assets/2029383/9471730/b7f567d0-4b1f-11e5-9d47-cae1850b6ab7.png)
",udfalkso,2015-08-25 17:33:07
72,2015-08-25 16:56:29,"@udfalkso since React Native is not using React 0.14 the correct fix would be to change https://github.com/udfalkso/react-redux/blob/console-warn-instead-of-error-for-function-wrap/src/components/createProvider.js#L6 to `return true;`

In fact i believe it is a genuine bug that we are returning false here since the only version of React today not using Parent Context is 0.14 beta.
",gnoff,2015-08-25 17:33:07
72,2015-08-25 16:57:27,"mind recreating the PR with that one change? Or i can do so in a minute
",gnoff,2015-08-25 17:33:07
72,2015-08-25 17:14:26,"Ok, how's that look?
",udfalkso,2015-08-25 17:33:07
72,2015-08-25 17:16:30,"perfect, can you confirm this fixes the bug on react-native?
",gnoff,2015-08-25 17:33:07
72,2015-08-25 17:19:36,"Yup, the error display goes away.  
",udfalkso,2015-08-25 17:33:07
72,2015-08-25 17:24:58,"Interesting. I returned `false` there because I assumed that today any React distribution has a version, so if it is missing, we are running a much more modern React..
",gaearon,2015-08-25 17:33:07
72,2015-08-25 17:28:59,"There's something I don't understand then.

`fbjs` [uses `console.error` for `warning`](https://github.com/facebook/fbjs/blob/master/src/__forks__/warning.js#L42).
[`react` uses `warning`](https://github.com/facebook/react/blob/master/src/isomorphic/classic/element/ReactElementValidator.js#L252) for PropTypes validation.

How is React Native different? I think we should use the same warning kind as `PropTypes` validation.
",gaearon,2015-08-25 17:33:07
72,2015-08-25 17:36:46,"Should be fixed in 1.0.1.
",gaearon,2015-08-25 17:33:07
72,2015-08-25 17:43:26,"Yeah, i figured that was the intention of the original `return false;` but since we are going to drop all of this logic with R14 and RN10 (hopefully) and just use a peer Dependency i figured being more conservative with the version check is the proper choice right now
",gnoff,2015-08-25 17:33:07
72,2015-08-25 17:56:17,"Thanks guys!
",udfalkso,2015-08-25 17:33:07
72,2015-08-25 17:57:44,"RE: warnings for PropTypes I actually think the red screen is what you get too.
",gnoff,2015-08-25 17:33:07
71,2015-08-24 18:13:35,"We won't do this yet, but React 0.14 makes everything simpler for us.
When it's out, releasing this will be a breaking change.

Changes:
- No more support for function inside `<Provider>`, as we have parent context in 0.14
- No more jumping through hoops to support React Native: we can still `import React from 'react'`
- We can put `react` in `peerDependencies` now because it will work for React Native, and also won't cause “duplicate React” issues
- With React Native 0.10, we can rely on `process.env.NODE_ENV` polyfill being there

Checklist:
- [x] Drop support for React 0.13 in a branch
- [x] Wait for React 0.14
- [ ] <s>Wait for React Native 0.10 (will it use 0.14?)</s>
- [x] Update the docs
- [ ] Merge and release as a breaking change
",gaearon,2015-10-15 12:17:23
71,2015-08-24 21:54:26,"What is the impetus from switching for a creator pattern to directly exporting the two components?
",gnoff,2015-10-15 12:17:23
71,2015-08-25 12:33:26,"> What is the impetus from switching for a creator pattern to directly exporting the two components?

The reason a factory was added in the first place is because we either needed `React` from `react` or from `react-native`, depending on what user wanted, and couldn't express this statically. With 0.14 we can just use `react` because `react-native` will just be a renderer like `react-dom`, and won't contain `Component`, `PropTypes`, etc.
",gaearon,2015-10-15 12:17:23
71,2015-10-07 18:28:46,"Updated this.
",gaearon,2015-10-15 12:17:23
71,2015-10-12 20:08:27,"Still waiting on React Native?
",cwbutler,2015-10-15 12:17:23
71,2015-10-12 21:02:23,"Not really—we'll just ask RN users to stay on previous major. I'll release this soon.
",gaearon,2015-10-15 12:17:23
70,2015-08-24 16:27:30,"This implements https://github.com/rackt/react-redux/issues/64 in a backward-compatible by checking `React.version`. Because I updated the tests to use 0.14 beta, I also manually ran the new source against the previous test suite, and it passed.

There's a single breaking change here: `<Provider>{() => {})</Provider>` will no longer work, as a single child (either as a function child or a vanilla child) is enforced.

When you try to use function as a child in 0.14, a warning is printed to the console. Conversely, React Redux warns you if you use a vanilla element in 0.13 where function as a child is needed.
",gaearon,2015-08-24 17:13:08
70,2015-08-24 16:59:13,"> does react-redux state anywhere that it only supports React 13? I thought context was available in 12 and earlier too.

It doesn't state this, but it won't work with 0.12 and nobody complained so far. We don't enforce a `peerDependency` because until everybody uses NPM3 it's often more trouble than it's worth.

We should add a note to README saying we only support 0.13+, or else we need to migrate to `createClass` and support 0.12 (but I don't see the point).
",gaearon,2015-08-24 17:13:08
70,2015-08-24 16:59:21,"> I would also additional minor versions

?
",gaearon,2015-08-24 17:13:08
70,2015-08-24 17:02:47,"Noted 0.13+ in the README: https://github.com/rackt/react-redux/commit/949c3992cadd64c1f517d6fb8f54952d622700db
",gaearon,2015-08-24 17:13:08
70,2015-08-24 17:42:13,"minor versions meaning 11 or 12 but since you put the note on requiring react 13 or higher I agree that's not necessary.
",gnoff,2015-08-24 17:13:08
69,2015-08-23 18:12:30,"I wasn't sure why this was slower than other options.
",oliviertassinari,2015-08-23 18:42:27
68,2015-08-23 13:55:27,"Previously discussed on Twitter: https://twitter.com/dan_abramov/status/635441125013200896

Related code:
https://github.com/jackielii/simplest-redux-example/blob/master/index.js#L56

<S_CODE_TOKEN>

In order to pass the props, we need one more file to bind the props:

![import copy](https://cloud.githubusercontent.com/assets/449224/9428456/433bb2d0-49e1-11e5-830b-0f02e391e73a.png)
",jiyinyiyong,2015-08-23 17:19:22
68,2015-08-23 15:46:40,"I'm not really sure what props you have troubles passing. `Root` and `Provider` are just plumbing: they look intimidating in a tiny app, but you only need to declare them once.

What problems do you have, after `Root` is declared and uses `Provider`? Let's imagine your app starts at `CounterApp`.
",gaearon,2015-08-23 17:19:22
68,2015-08-23 16:17:04,"I'm not reporting it as a bug. It may be an improvement or something.
",jiyinyiyong,2015-08-23 17:19:22
68,2015-08-23 16:24:11,"I'm not saying I think you're reporting it as a bug :-).
I'm just trying to understand what could be improved. Can you suggest a different API?
",gaearon,2015-08-23 17:19:22
68,2015-08-23 16:25:06,"To clarify, `<Provider>` is not there to pass props. It's there to make `connect()` work no matter how deep it is in your app hierarchy. It uses undocumented React ""context"" feature to do that.
",gaearon,2015-08-23 17:19:22
68,2015-08-23 17:19:22,"I'm giving up. I just thought it can be simpler(like passing props directly), without understanding the implementation details. And probably I don't understand the true purpose behind `<Provider>`

And I turned my ideas into a ""Redux clone for learning purpose"" at https://github.com/mvc-works/actions-recorder (use `gulp script` or `npm i actions-recorder` to get JavaScript version if you need).
",jiyinyiyong,2015-08-23 17:19:22
68,2015-08-23 17:33:43,"> And probably I don't understand the true purpose behind <Provider>

The purpose is to expose `store` on the React context. As I said, context is [undocumented React feature](http://www.youtube.com/watch?v=H7vlH-wntD4) so I understand the confusion.

Without `<Provider>` or something similar, you can't `connect()` components somewhere deep in the hierarchy. `connect()` needs to read `store` somehow so it can subscribe to it. `<Provider>` puts `store` in React context so `connect()` can read it from there. If there was no provider, you'd have to either

a) pass the `store` down via props through you whole application (very verbose);
b) export a singleton `store` and let all components use it, but this doesn't work for apps rendering on server, because they want to have a `store` instance per request.
",gaearon,2015-08-23 17:19:22
68,2015-08-23 18:40:44,"> And probably I don't understand the true purpose behind

Same for me. Now, I understand, thanks.
",oliviertassinari,2015-08-23 17:19:22
68,2015-08-24 01:21:27,"It makes sense. We even used a `listenTo` mixin to to the job and it's so much code.

Personaly I still prefer the verbose way since it doesn't intrduce new terms or concepts. I can see the ""very verbose"" way in my own solution:

<S_CODE_TOKEN>
",jiyinyiyong,2015-08-23 17:19:22
68,2015-08-24 07:56:45,"Yes, and also always tendering from the top will be slower. 
",gaearon,2015-08-23 17:19:22
68,2015-08-24 08:11:23,"Did you mean `React.render` is slower than `Component.setState()`?
",jiyinyiyong,2015-08-23 17:19:22
68,2015-08-24 09:18:52,"Yes, it's faster to `setState` in the middle of the view hierarchy than `React.render` at the top because this saves React work of figuring out that other components have not changed.

If most of your components [implement `shouldComponentUpdate`](https://facebook.github.io/react/docs/advanced-performance.html) it's not such a problem, but it's still more performant to use `setState` in the middle (via `connect()` or a custom helper—but again, `connect` is optimized so you should probably use it).
",gaearon,2015-08-23 17:19:22
68,2015-08-24 10:00:23,"I prefer Immutable data in such cases :)
",jiyinyiyong,2015-08-23 17:19:22
68,2015-08-24 11:08:02,"Immutable doesn't solve this problem. React has to reconcile the tree, whether you use Immutable or something else.
",gaearon,2015-08-23 17:19:22
68,2015-08-24 11:21:23,"Fine.
",jiyinyiyong,2015-08-23 17:19:22
67,2015-08-21 22:15:03,,agraboso,2015-08-21 23:23:44
67,2015-08-21 23:23:45,"Thanks.
",gaearon,2015-08-21 23:23:44
66,2015-08-19 22:19:20,"When doing an NPM install today I noticed that the `provide` decorator has been removed.  I'm curious as to why, since you kept the `connect` one?  
",damassi,2015-08-20 23:14:22
66,2015-08-20 23:14:22,"It's not really about “keep decorators” or “keep components”.
It's about “which does a better job in which case”.

### `connect()`

`connect()` makes more sense as higher order component because:
1. You never need to change the selecting function mid-flight. We couldn't do some perf optimizations with `<Connector>` because it had to correctly handle changing `select` prop although there was no valid use for this.
2. Function-as-a-child default case has performance downsides because people often write it as a lambda so they're allocating functions every time `render` is called.
3. We have no way to restrict `shouldComponentUpdate` _outside_ `Connector` but that would be really useful to make connected components faster.
4. `<Connector>` forced you to write “semi-smart” components that knew about Redux but couldn't, for example, handle its state changes in `componentWillReceiveProps` because they just used `<Connector>` inside without access to its state.
5. Even if you didn't want an intermediate component you had to write it anyway. Now you can `connect()` your dumb component and get the smart component right away, without writing another `class` in between.

It was a poor choice of abstraction and added unnecessary layers and clumsiness. We got rid of it.

### `<Provider>`

`<Provider>` makes more sense as a normal component.
1. Unlike with `connect()`, it actually _does_ make sense to change the parameters (store in this case) at runtime. For server rendering, we want to pass a new `store` for every request. Offering it to specify as a singleton at the top makes server rendering non-obvious. Making it a prop points you to the right direction.
2. It was a shortcut for shortcut's sake, it didn't bring any valuable opportunities.
3. It didn't work well with React Router.
4. It didn't work with Redux DevTools.
5. It made stubbing store for tests more complicated.
6. In React 0.14, we'll be able to further simplify `<Provider>{() => <App />}</Provider>` to `<Provider><App /></Provider>`. At this point it's hard to justify `@provider` even as a shortcut.

Good riddance.
",gaearon,2015-08-20 23:14:22
66,2015-08-20 23:26:02,"Spectacular answer.  As usual, thanks for being so thorough.    
",damassi,2015-08-20 23:14:22
65,2015-08-19 12:42:56,"Hi. I am using redux and react-redux bindings for it and have the problem with getting right state when component just mount. The problem is: I can't start action before first render:

<S_CODE_TOKEN>

I want that at the first render I see that movies already fetching, how could I do this?
",tadjik1,2015-08-19 12:49:27
65,2015-08-19 12:49:27,"Ok, I see your example, http://rackt.github.io/redux/docs/advanced/ExampleRedditAPI.html, you always check no only fetching flag but count of elemets too. It's look good, I'll use the same technic.
",tadjik1,2015-08-19 12:49:27
64,2015-08-18 20:18:46,"The [readme](https://github.com/rackt/react-redux#injecting-redux-store) mentions that the child of `Provider` will no longer have to be specified as a function starting in React 0.14. I'm using 0.14 (beta 3) in a current project, but `react-redux` yells at me if I don't provide the child as a function.

Any chance of disabling this warning now that 0.14 is in beta? (Perhaps in a beta npm release, if you'd prefer?)

Thanks for your work on Redux!
",billyjanitsch,2015-08-24 16:29:02
64,2015-08-18 21:05:50,"We would need to do more than disable the warning, the Provider render method would need to be updated to conditionally call children in react 13 and simply render children in react 14. I'm not actually sure how to detect the react version at runtime, I suppose it is possible but it's more likely that we will just wait to release a version bump when 14 comes out that has a strict peer dependency on react 14 along with the api improvement. 

Can't speak for Dan though so who knows.
",gnoff,2015-08-24 16:29:02
64,2015-08-20 23:18:49,"I'm happy to accept a PR doing this, but I'm also not sure about “checking React version” bit (and whether we even want to attempt doing this).

I'd rather release a version depending hard on 0.14+ once it comes out, that has the right behavior. Feel free to submit a PR to implement this behavior so we can merge it once React 0.14 is out.
",gaearon,2015-08-24 16:29:02
64,2015-08-24 16:29:02,"Let's track this in https://github.com/rackt/react-redux/pull/70.
",gaearon,2015-08-24 16:29:02
63,2015-08-18 11:46:58,"Some components want to fire actions only and need not be connected to store state, i propose that connect accepts null as a first parameter ( default to () => ({}) ), it's not THAT important :P
",quirinpa,2015-08-18 13:58:58
63,2015-08-18 13:58:58,"I'm pretty sure the documentation already mentions this but that is exactly how connect already works.
",gnoff,2015-08-18 13:58:58
63,2015-08-18 18:11:19,"Oh. You're right. I don't know why it wasn't working for me. Sorry :P
",quirinpa,2015-08-18 13:58:58
63,2015-08-18 18:19:42,"No problem. Can you confirm it works now?
",gnoff,2015-08-18 13:58:58
63,2015-08-18 18:20:01,"Yes it does. works fine :) thanks gnoff. I just updated a load of deps in my project, i was probably using an older version without realizing it or something.. Cheers!
",quirinpa,2015-08-18 13:58:58
63,2015-08-18 21:06:31,"Cool
",gnoff,2015-08-18 13:58:58
62,2015-08-18 09:11:16,"This produce better Error messages, when store property is not being provided.

In our case we migrated to redux-1.0.x and got the waring:

<S_CODE_TOKEN>

because previously the property holding the flux instance was named redux.

With the propTypes specified you would get the following warning: 

<S_CODE_TOKEN>

which makes it pretty clear how and where to fix the issue.
",PSpSynedra,2015-08-18 10:38:12
62,2015-08-18 10:38:21,"Thanks. Somehow I lost it while refactoring.
",gaearon,2015-08-18 10:38:12
61,2015-08-18 06:41:36,"Apologies for polluting the issue list since it's not really an issue but I believe there is some interest in coming up with a workable solution that

a) Keeps the Smart/Dumb component divide clean & generally near the top of the component tree for a given part of the app domain AND
b) Avoid the hassle of passing @connect results down deep chains of children

I liked the Provide/connect pattern a lot so I generalized it in [react-tunnel](https://github.com/gnoff/react-tunnel) and starting playing with a patter like so

<S_CODE_TOKEN>

The Provider in react-tunnel puts props into context under the provided namespace and inject pulls them off with the mapProvidedToProps function.

It's not react-redux specific nor really related to redux in any way (and there are probably plenty of other DI type libraries that will get the same job done) but i thought it fit nicely with the react-redux paradigm but would give you the option to use similar semantics deeper in the component tree without bringing along anything specific to redux.

As a final note, you could actually do away wiht the react-redux Provider and just use the react-tunnel provider and inject by doing

<S_CODE_TOKEN>

anyhow, just some food for thought... would love feedback even if it's why this is a horrible idea.

Thanks,
Josh
",gnoff,2015-08-24 18:34:03
61,2015-08-24 18:34:03,"Closing, no real traction here.
",gnoff,2015-08-24 18:34:03
61,2015-08-24 19:03:39,"It'll be easier to experiment with this stuff when 0.14 ships, but yeah, not really related to Redux.

I'm not convinced a middle solution is needed here. Having several context split points makes it harder to move components around the app, as dependencies become implicit.
",gaearon,2015-08-24 18:34:03
61,2015-08-24 19:57:37,"Agreed on the context splits concern but I do think that by pushing the connect to route handler style tier of a component tree ( which is nice for exactly the reasons you suggest it re: redux aware/unaware splits) we leave on the table the perennial problem of contexualizing the output of connect for use by the whole child tree. In shallow trees this isn't much of a concern but for complex and deep ones it is.

I can imagine that some will start to connect their leaf components using the mapDispatchToProps argument only which gets the job done, but only for that use case (providing action creators deeply) and ties their implementation to the react redux dependency unnecessarily.

One doesn't really need tunnel in that you can manage this all via the context feature (presumably it will be documented in 0.14) but then that is also the case for react-redux's provider too now that store can be loaded from props in connect.

Are you in particular an advocate for vanilla prop passing everything? Or vanilla context use?

To be clear I suspect that react-tunnel can and will be abused overused and cause problems of its own. Not sure what to do about that other than discouraging bad practices.
",gnoff,2015-08-24 18:34:03
61,2015-08-24 20:11:10,"> Are you in particular an advocate for vanilla prop passing everything? Or vanilla context use?

I try to `connect()` route handlers and use props all the way down unless some component gets too complicated and then it gets its own `connect()`, but also gets a “dumb” props-only version in case I want to reuse it later.
",gaearon,2015-08-24 18:34:03
61,2015-08-24 21:48:40,"Makes sense, I guess i would just replace the deep `connect()` with `inject()` since it isn't strictly bound to the semantics of redux. The thing about either option is that they map what is contextual information into props so that you the 'dumb' version doesn't care how it get's its props and this means you can easily partially or fully unwind this style of props providing without having to refactor said component.
",gnoff,2015-08-24 18:34:03
60,2015-08-16 16:13:11,"My store is an `Immutable.Map` object, and I would like to pass it down my tree of React components. I suppose that in most cases I can get good performance by using something like `PureRenderMixin` (or ES2015 equivalent) when doing so.

I started out simple decorating my `App` class with `@connect(state => state)`, and I got this error:

“Uncaught Error: Invariant Violation: `mapStateToProps` must return an object. Instead received Map {…”

I’m able to do something like `@connect(state => {return {state};})`, and then unwrap the object in `App`’s `render()`, but I get the sense that this is not an ideal solution.
",alexanderteinum,2015-08-17 15:39:46
60,2015-08-16 17:07:17,"The return of the mapStateToProps needs to be an object because the object is spread as props to the wrapped component. Your work around is in fact the idiomatic way to use @connect. In this case your wrapped component will have a prop named 'state' which is an Immutable.Map 

Now you may want to reconsider passing the entire app state to your connected component however. This will make refactoring your state shape a lot harder when your app is more complicated. Though in simple cases it is fine.
",gnoff,2015-08-17 15:39:46
60,2015-08-16 18:48:18,"Ah, I understand.

I already pass what that I consider being the app state. By passing the entire app state, do you mean doing `@connect(state => state.toJS())`?

I haven’t fully decided whether or not I want the immutable or a plain JavaScript object floating through the component tree, but performance is the number one priority in this particular case. I need to look into how `shouldComponentUpdate()` and each alternative will work with my data. I also consider using several `@connect()` a bit higher up the tree, instead of one at the root component.
",alexanderteinum,2015-08-17 15:39:46
60,2015-08-17 15:36:24,"> I already pass what that I consider being the app state. By passing the entire app state, do you mean doing @connect(state => state.toJS())?

That would be slow. I suggest you don't do that, and if perf is your main concern, use `@connect` granularly.

> I need to look into how shouldComponentUpdate() and each alternative will work with my data.

Actually `@connect` already implements a rather decent `shouldComponentUpdate` so don't worry about it too much.
",gaearon,2015-08-17 15:39:46
60,2015-08-17 15:39:46,"Indeed, as @gnoff said above, you can't just return Immutable object because we spread over the values you return, and this wouldn't make sense with Immutable.

> I’m able to do something like @connect(state => {return {state};}), and then unwrap the object in App’s render(), but I get the sense that this is not an ideal solution.

The idiomatic way is to do this:

<S_CODE_TOKEN>

only for the fields you actually care about, so `@connect` can bail out when the parts the component doesn't need, did not change. I don't suggest using `toJS()` because AFAIK it's deep, but deep conversions won't be as performant as just extracting the stuffy you want.

> I also consider using several @connect() a bit higher up the tree, instead of one at the root component.

This is the way to go, and it's more performant than just one `@connect` at the top.
",gaearon,2015-08-17 15:39:46
60,2015-08-17 15:49:35,"btw if you're concerned about performance, make sure you check out [reselect](https://github.com/faassen/reselect) and [Computing Derived Data](http://rackt.github.io/redux/docs/recipes/ComputingDerivedData.html).
",gaearon,2015-08-17 15:39:46
60,2015-08-17 17:09:04,"Great, thank you both!
",alexanderteinum,2015-08-17 15:39:46
60,2015-10-21 11:17:01,"Thanks! This really cleared up the same issue I was having.
",liorbrauer,2015-08-17 15:39:46
60,2016-01-17 23:41:32,"@gaearon Hey Dan, what are your thoughts of running immutable AND reselect together versus just one or the other?
",thewillhuang,2015-08-17 15:39:46
60,2016-01-18 00:34:27,"Feel free to use them together. They're solving different problems and can be used complementary. 
",gaearon,2015-08-17 15:39:46
60,2016-02-16 22:53:18,"Wasn't aware connect() implemented a shouldComponentUpdate() which is great to know... is this in the docs somewhere? Is there a suitable way of making props immutable further down the tree to prevent more nested components updating unnecessarily?
",patoncrispy,2015-08-17 15:39:46
60,2016-02-16 23:09:02,"> Wasn't aware connect() implemented a shouldComponentUpdate() which is great to know... is this in the docs somewhere?

This is an implementation detail. We say “performant” in the repo description but I wouldn’t detail the optimizations as they may change.

> Is there a suitable way of making props immutable further down the tree to prevent more nested components updating unnecessarily?

Not sure what you mean. Any connected component does a shallow comparison. If its props (including props from store) don’t change, it doesn’t update.
",gaearon,2015-08-17 15:39:46
60,2016-02-16 23:20:06,"Sorry, I can see how that made little sense. Well, If I have a container (uses connect()) that has an array of components (could be 100+) which may update frequently but sporadically, would it be possible to only update those that changed in some way? Or would it simply be a case of having to redraw them all as it is the Container that uses connect()? 
",patoncrispy,2015-08-17 15:39:46
60,2016-02-16 23:52:34,"What do you mean by “update”? React only updates DOM when necessary. There is a cost for _reconciliation_ process (which is where it compares the element trees), and `shouldComponentUpdate()` lets you bail out of this process.

When you use `connect()` on a component, it is subscribed to the store, and if the calculated props change, it will cause reconciliation on the connected component.

So if you connect a list to the store, and a list renders 100 rows, if the calculated props change after a store update, React will reconcile those 100 row elements. Then it will look at rows themselves. If your row components implement `shouldComponentUpdate()` you can bail out there. If your row components are connected, the `shouldComponentUpdate()` implementation we provide will bail out if props are shallowly unequal.

Does this make sense?
",gaearon,2015-08-17 15:39:46
60,2016-02-17 17:55:37,"Yes. Thanks for your wisdom, Dan! Just as I think I'm understanding things then 'WHAM!'... something else comes up. :) 
",patoncrispy,2015-08-17 15:39:46
60,2016-07-24 22:21:58,"Sorry for commenting a closed issue but I keep coming here when googling for a similar issue.
I spent a lot of time to understand how to integrate Immutable with Redux, even implementing my own version of connect, and finally understood how to use the @connect from 'redux-connect'
I just wanted to understand @gaeron answer from 17 august 2015

`connect(state => ({
  stuff: state.get('stuff'),
  otherStuff: state.get('otherStuff')
})`

It seems to work ( and looking at the shallowEqual code it seems reasonable ) when state.get('stuff') and state.get('otherStuff') are Immutable objects, not plain JS. 
Can someone confirm it is the case or am I missing something ? 
",msuperina,2015-08-17 15:39:46
60,2016-07-24 22:31:02,"The actual return value from `mapState` does need to be a plain object.  However, the values within that object can certainly be Immutable.js data structures.  So, in that example, if ""stuff"" was an Immutable Map, and ""otherStuff"" was an Immutable List, that would be just fine, as long as your actual component is expecting to get a Map and a List, rather than a plain JS object and a plain JS array.  

As a side note, there are a number of utilities out there already to integrate Immutable.js into a Redux app.  See https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md#immutableredux-interop for a list of some of them.
",markerikson,2015-08-17 15:39:46
60,2016-09-08 00:18:35,"Our project uses an Immutable.Map as our store and connect like so,

<S_CODE_TOKEN>

Which seems to neatly pass everything from the map into the App.    Our entire application has 125 Components and only the 1 connect.   Are we using an anti pattern?   It seems performant...
",bherrmann7,2015-08-17 15:39:46
60,2016-12-28 15:44:36,@bherrmann7 How about those nested immutable Data?They can't be converted to a plain object by toObject() function.Only by toJS() can we convert all nested immutable data.,lee1994522,2015-08-17 15:39:46
59,2015-08-16 10:55:35,"If you pass in more than one argument to `mapStateToProps` and `mapDispatchToProps` then we assume you are passing in props and so pass it in. Whenever the component receives new props we will re-invoke the function.

Fixes #52
",jhollingworth,2015-08-17 14:55:25
59,2015-08-16 10:56:39,"@gaearon 
",jhollingworth,2015-08-17 14:55:25
59,2015-08-17 10:05:53,"Good stuff. I'll merge today. :heart: 
",gaearon,2015-08-17 14:55:25
59,2015-08-17 15:14:42,"Released as 0.9.0, please verify.
",gaearon,2015-08-17 14:55:25
58,2015-08-16 06:15:38,"can i do this?

<S_CODE_TOKEN>

because when i click on Link or use replaceWith from router, just change the url but not the component.
",ghondar,2015-08-17 15:40:55
58,2015-08-17 15:40:55,"Yes, you can definitely do this. If something doesn't work please post a reproducible example.
",gaearon,2015-08-17 15:40:55
58,2015-08-17 15:41:16,"For start, you can look into https://github.com/gaearon/react-redux#troubleshooting
",gaearon,2015-08-17 15:40:55
58,2015-08-17 19:34:21,"@gaearon Thanks for your quick response, here is an example of the error:

https://github.com/ghondar/reduxExample
",ghondar,2015-08-17 15:40:55
58,2015-08-17 20:45:18,"Thanks, but I don't understand how to run this example. :-(
It enters an infinite redirect loop for me.
",gaearon,2015-08-17 15:40:55
58,2015-08-17 20:54:47,"oh @gaearon i'm sorry, I forgot to put in the readme that port open in the browser u.u.

open http://localhost:3000/
",ghondar,2015-08-17 15:40:55
58,2015-08-18 16:12:51,"I took a look, it's the thing I posted a link to above.

To be more specific: https://github.com/gaearon/react-redux#my-views-arent-updating-on-route-change-with-react-router-013

The problem is `react-engine` doesn't pass router state as a prop. Therefore `shouldComponentUpdate` check in `react-redux` bails out.

We won't remove this bailout. Please either use React Router vanilla API, or persuade React Engine to pass the router state. For example, this code in `react-engine/lib/client.js`:

<S_CODE_TOKEN>

can be changed to:

<S_CODE_TOKEN>

and then it works.
",gaearon,2015-08-17 15:40:55
58,2015-08-18 17:16:08,"nice @gaearon it works, thank for all :D 
",ghondar,2015-08-17 15:40:55
57,2015-08-14 23:43:17,"I get a `Could not find ""store"" in either the context or props` error whenever I try to `connect` a component to Redux.

When I'm in the debug console I can see that `state` is defined on `this` and `context` but it has a value of `undefined`. Also, when I inspect `createStore` I get an object back with `dispatch`, `getState`, etc.

<S_CODE_TOKEN>

**Component**

<S_CODE_TOKEN>
",anthonator,2015-08-15 00:39:11
57,2015-08-15 00:39:11,"I updated the doc to document your problem: https://github.com/gaearon/react-redux/blob/master/README.md#could-not-find-store-in-either-the-context-or-props

> If you use React Router, something like `<Provider>{() => routes}</Provider>` won’t work. Due to the way context works in React 0.13, it’s important that the `<Provider>` children are _created_ inside that function. Just referencing an outside variable doesn’t do the trick. Instead of `<Provider>{() => routes}</Provider>`, write `<Provider>{createRoutes}</Provider>` where `createRoutes()` is a function that actually _creates_ (and returns) the route configuration.
",gaearon,2015-08-15 00:39:11
57,2015-11-27 09:56:22,"I don't understand. How can I use redux on a sidebar for instance?
My sidebar is always visible, it doesn't depends on the routes.
",micky2be,2015-08-15 00:39:11
57,2015-11-27 11:54:48,"@micky2be It's hard to help without seeing your code :-). With React 0.14 it should be enough just to wrap root component of your app into Provider. The discussion above is no longer relevant.  
",gaearon,2015-08-15 00:39:11
57,2015-12-11 18:40:04,"@micky2be You can refer to [react-router-starter-kit](https://github.com/davezuko/react-redux-starter-kit), just put your sidebar code into `Corelayout`
",JuoCode,2015-08-15 00:39:11
57,2016-02-05 00:27:43,"I'm having a very strange issue related to this and I'm not sure what's going on. **TL;DR** I'm nesting `@connect`ed component inside a `@connect`ed component and it's erroring and I have no idea why.

I'm using [react-redux-universal-hot-example](https://github.com/erikras/react-redux-universal-hot-example) as my base.

The **top level** component looks like this:

<S_CODE_TOKEN>

The **route handler `<HighLevelComponent />`** uses `@connectData` and `@connect`:

<S_CODE_TOKEN>

**`<SubComponent />`** (inside `<HighLevelComponent />` above) only has `@connect`:

<S_CODE_TOKEN>

**`<ChildWithConnect />`** (inside `<SubComponent />` above) also has `@connect`:

<S_CODE_TOKEN>

**This errors:**

> Warning: Failed Context Types: Required context `store` was not specified in `Connect(ChildWithConnect)`. Check the render method of `SubComponent`.
> Uncaught Invariant Violation: Could not find ""store"" in either the context or props of 
> ""Connect(ChildWithConnect)"". Either wrap the root component in a <Provider>, or explicitly pass ""store"" as a prop to ""Connect(ChildWithConnect)""

This happens even if I have `contextTypes` defined:

<S_CODE_TOKEN>

If I make `<ChildWithConnect />` a direct child of `<HighLevelComponent />`, then there is no error.

You can see in the call stack for the error/warning above, `context` is an empty object and `maskedContext` has `undefined` for the store key:

 ![screen shot 2016-02-04 at 4 25 45 pm](https://cloud.githubusercontent.com/assets/79215/12834418/fbc3b77a-cb5b-11e5-86ce-c3dece278bd2.png)

Since it's defined as a `contextType`, shouldn't my sub component get the `store` passed to it automatically? Been pulling my hair out over this for a while, and I'm not sure if this is desired behavior, a bug, or I'm doing something incorrectly. 
",AndrewRayCode,2015-08-15 00:39:11
57,2016-02-05 01:29:57,"First of all, you never need to specify `contextTypes` if you use `connect()`. This is exactly what `connect()` does for you on the component it generates and returns. So don’t worry about it and remove any `contextTypes` if you are not reading anything from `this.context` in your _own_ code. 

Secondly, it is hard to say why it does not receive the context. My first hunch would be to check whether you might have a duplicate React installation which causes issues like this. If not, please post the project reproducing the issue, and I can take a look. 
",gaearon,2015-08-15 00:39:11
57,2016-02-23 17:49:52,"I had a similar issue. Turned out that in babel 6 `babel-plugin-transform-decorators-legacy` does not handle class properties properly. If you are using `babel-plugin-transform-decorators-legacy` and set the `contextType` of your class using a static property babel is actually erroneously applying that static property to the decorated class (ie. the object returned by the connect decorator) instead of your original class.

Once I've got a test case to prove it I'm going to file an issue with `babel-plugin-transform-decorators-legacy`.
",D1plo1d,2015-08-15 00:39:11
57,2016-02-23 18:09:07,"> Once I've got a test case to prove it I'm going to file an issue with babel-plugin-transform-decorators-legacy.

I think this won’t help because the underlying issue is in Babel 6 “merging” transforms. So the properties transform runs too late.

They added an **experimental** `passPerPreset` option in https://github.com/babel/babel/commit/3f1353d01f32bb73929a929a518cd250828cdb62 so you can try using that to force it to apply decorators in a separate pass.
",gaearon,2015-08-15 00:39:11
57,2016-02-23 18:09:32,"See discussion of `passPerPreset` in https://github.com/babel/babel/pull/3281.
",gaearon,2015-08-15 00:39:11
57,2016-02-23 19:26:57,"Oh awesome, yeah I'll try that. Thanks!
",D1plo1d,2015-08-15 00:39:11
57,2016-06-01 07:29:41,"I have a component for email subscription which is part of homepage. so I'm not using routes. Root component is wrapped in provider but I still get this error.  
",Zara603,2015-08-15 00:39:11
57,2016-06-01 11:05:25,"> I have a component for email subscription which is part of homepage. so I'm not using routes. Root component is wrapped in provider but I still get this error.

Unfortunately this is not enough information to be able to help you. Can you post a complete project on GitHub?
",gaearon,2015-08-15 00:39:11
57,2016-07-28 11:27:28,"I run into the same issue, but on the server side. And not sure if its possible with node to have the issue of 2 React instances.

Are there any troubleshooting ideas for the Server Side?
",KeKs0r,2015-08-15 00:39:11
57,2016-09-30 05:18:44,"[https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy#babel-legacy-decorator-plugin](url)

<S_CODE_TOKEN>
",lonelyclick,2015-08-15 00:39:11
56,2015-08-14 11:31:48,"This is probably a stupid question, as I have a feeling I'm overlooking something obvious or doing something wrong.  :)

Suppose we have a tree of files to explore, and we want to be able to provide an initial state based on the files/directories the user had opened when they were last using the app or possibly based on the project/workspace/whatever.  So imagine we have this initial state serialized as follows:

<S_CODE_TOKEN>

And then for each item in the tree (let's call it a `Limb` component), we want to provide `props.isOpen` based on a combination of the `open` state and the `path` prop which is specific to each `Limb`.  And we also want to provide `toggle` prop (function) that updates both the `open` object and `props.isOpen` such that only the `Limb` being toggled is affected.

What's the best way to achieve this with `redux` and `react-redux`?
",timbur,2015-08-14 13:28:42
56,2015-08-14 11:36:51,"Take a look at the last example in `connect` API reference. (Sorry, I'm on mobile :-)
",gaearon,2015-08-14 13:28:42
56,2015-08-14 12:24:30,"Can you link me to what you're talking about when you get a chance?
",timbur,2015-08-14 13:28:42
56,2015-08-14 13:13:18,"Okay finally had a chance to actually look for it lol.  At the bottom of the main README right?  Right above ""Troubleshooting"" using `parentProps`?  I'll try this out now.
",timbur,2015-08-14 13:28:42
56,2015-08-14 13:28:42,"Whoa.  That was insanely easy.  Thanks a ton dude!!!!
",timbur,2015-08-14 13:28:42
56,2015-08-14 14:26:26,":+1: 
",gaearon,2015-08-14 13:28:42
55,2015-08-14 10:50:45,"Addresses part of #52 by passing the parent props into mapStateWithProps.
",ide,2015-08-17 10:05:34
55,2015-08-16 08:52:16,"This doesn't actually check whether we are passing in `props`, see #36
",jhollingworth,2015-08-17 10:05:34
55,2015-08-17 10:05:34,"Thanks for the effort! I'm closing in favor of #59 which is a more complete solution.
",gaearon,2015-08-17 10:05:34
55,2015-08-17 15:14:57,"A version of this is released in 0.9.0, please verify.
",gaearon,2015-08-17 10:05:34
55,2015-08-17 15:22:19,"Sweet, thank you guys! Will test it out sometime today.
",ide,2015-08-17 10:05:34
54,2015-08-12 10:07:24,"Hi,

Just some typos... :smile: 

Thanks!
",nuragic,2015-08-12 11:27:36
54,2015-08-12 11:27:39,"Thanks!
",gaearon,2015-08-12 11:27:36
54,2015-08-12 11:28:20,":+1: 
",nuragic,2015-08-12 11:27:36
53,2015-08-12 10:00:13,"Could `connect()` check its wrapped component for static functions and add them to the returned component? For things like `fetchData()` and `onEnter()`. Seems like it would be pretty easy to go through the keys and check if `typeof WrappedComponent[key] === 'function'`.

Just a thought.
",erikras,2015-09-29 12:00:52
53,2015-08-12 11:30:09,"I wouldn't do that. It's only going to make things worse IMO: https://github.com/acdlite/flummox/issues/173#issuecomment-100552563
",gaearon,2015-09-29 12:00:52
53,2015-08-12 11:32:56,"Good call. I briefly looked into implementing it and the code disgusted me.
",erikras,2015-09-29 12:00:52
53,2015-09-27 21:28:55,"I'm happy to reconsider it using https://github.com/mridgway/hoist-non-react-statics since we don't have to maintain it. Wanna make a PR?
",gaearon,2015-09-29 12:00:52
53,2015-09-27 21:39:49,"I was going to complain about the lack of docs for that library, but then I saw how utterly trivial the code is. Also, I can't remember the time I last used the word ""hoist""; such a good word.

Will add the PR to the todo list.
",erikras,2015-09-29 12:00:52
53,2015-09-30 08:37:10,"I just, by chance, ran into a problem in my app where I need this functionality. Any chance of a release soon?
",erikras,2015-09-29 12:00:52
53,2015-09-30 15:32:22,"Give me a few days, vacation :-)
",gaearon,2015-09-29 12:00:52
53,2015-09-30 15:42:37,"If in hurry you can do it in userland:

<S_CODE_TOKEN>

It should be future compatible. 
",epeli,2015-09-29 12:00:52
53,2015-09-30 15:44:54,"You and your pink crocs enjoy your vacation. No hurry. :shell: :ocean: :sunny: 

For now I've just done `MyComponent.WrappedComponent.onEnter` to get to my `onEnter` function.
",erikras,2015-09-29 12:00:52
53,2015-10-05 08:48:24,"Out in 3.1.0.
",gaearon,2015-09-29 12:00:52
53,2016-03-05 03:03:42,"Lol. I knew this is going to come back and bite me in the arse.
https://github.com/reactjs/react-redux/issues/163#issuecomment-192556637
",gaearon,2015-09-29 12:00:52
52,2015-08-11 19:14:05,"It should only be passed if `fn.length > 1` as per https://github.com/gaearon/react-redux/pull/36#issuecomment-129945686.

If you want to make a PR, please write here so we don't duplicate effort.
",gaearon,2015-08-17 14:55:25
52,2015-08-11 19:16:47,"Important note: if `mapDispatchToProps.length < 2`, `mapDispatchToProps` should not be called on prop change.

Similarly, if `mapStateToProps.length < 2` or `mergeProps.length < 3`, `componentWillReceiveProps` should not result in their recalculation, respectively.
",gaearon,2015-08-17 14:55:25
52,2015-08-11 19:32:02,"cc @jhollingworth, @danharper, @ForbesLindesay who wanted to make this happen
",gaearon,2015-08-17 14:55:25
52,2015-08-12 09:17:20,"Happy to implement this if no one else is
",jhollingworth,2015-08-17 14:55:25
52,2015-08-12 11:30:22,"Feel free to!
",gaearon,2015-08-17 14:55:25
52,2015-08-17 10:33:02,"@gaeron What is the current state of this issue? 
We were just updating to redux 1.0.x and have serious problems with props not being available to mapStateToProps. The reason is that we pass memoized selector functions via props that select the desired childProperties from the state. 
As a workaround we could select the whole state and thus have it passed to the mergeProps callback. The problem using this workaround is, that the potentionally expensive mergeProps becomes the mapStateToProps and is callled much to often (the recomputeState is actually called for every state change in the redux store, no matter what part of the state was influenced by the change).
",PSpSynedra,2015-08-17 14:55:25
52,2015-08-17 10:41:22,"@PSpSynedra https://github.com/gaearon/react-redux/pull/59#issuecomment-131764832
",evgenyrodionov,2015-08-17 14:55:25
52,2015-08-17 10:45:48,"@theaqua, Yeah I just saw it :-) Looking forward to it already.
",PSpSynedra,2015-08-17 14:55:25
52,2015-08-17 15:15:05,"Released in 0.9.0, please verify.
",gaearon,2015-08-17 14:55:25
51,2015-08-11 17:42:02,"8.1 failing test
prehistory [here](https://github.com/gaearon/react-redux/pull/50#issuecomment-129953612)

Test in first commit is new.

Changes in second commit is about that such keys also need to be deleted from this.state
",istarkov,2015-08-11 19:08:48
51,2015-08-11 18:12:53,"2 fix first failing test, it's need to change 

<S_CODE_TOKEN>

on this

<S_CODE_TOKEN>
",istarkov,2015-08-11 19:08:48
51,2015-08-11 18:29:23,"Third commit fixes both tests, 
to emulate replaceState i've moved current `state` to `state.props`
",istarkov,2015-08-11 19:08:48
50,2015-08-11 14:18:05,"If at first render you have children props, and at second not 
(this.props does not contain children element), 
this.state contains previous version of children.
",istarkov,2015-08-11 16:13:22
50,2015-08-11 14:22:48,"And it look's like the problem is deeper 
for any component props which is gone 
you can't use setState because of it's merge nature,
it's need something like replaceState
",istarkov,2015-08-11 16:13:22
50,2015-08-11 14:27:26,"Can you add a failing test case instead? I don't understand the problem yet.
",gaearon,2015-08-11 16:13:22
50,2015-08-11 14:37:11,"Ok i'll add, the problem is that setState merges `newState` with old state.
And if at first rendering step you have some prop, and at next rendering step this prop is not exists,
connector state still contains prop from first rendering.
As example

<S_CODE_TOKEN>

if `this.props.a` was `true`, and becomes `false`, `ReduxConnectedComponent` still contains `this.props.someProp` equal to `1`
",istarkov,2015-08-11 16:13:22
50,2015-08-11 14:39:15,"So recomputeState must be like

<S_CODE_TOKEN>
",istarkov,2015-08-11 16:13:22
50,2015-08-11 15:59:18,"I've add failing test, (without @connect it works as expected)
",istarkov,2015-08-11 16:13:22
50,2015-08-11 16:13:37,"I got it now, thanks a lot!
",gaearon,2015-08-11 16:13:22
50,2015-08-11 16:21:19,"This is out in 0.8.1, if you see any use cases that aren't covered yet, feel free to add more tests ;-)
",gaearon,2015-08-11 16:13:22
49,2015-08-11 13:04:50,"When requiring react-redux either via Browserify or in the Node REPL, I get the following:

<S_CODE_TOKEN>

My version is 0.8.0
",davidnorth,2015-08-11 14:26:42
49,2015-08-11 13:07:45,"Which version of React are you using? What do you use to compile JSX?
",gaearon,2015-08-11 14:26:42
49,2015-08-11 13:10:30,"React 0.12.2 and babelyify 6.0.2
",davidnorth,2015-08-11 14:26:42
49,2015-08-11 14:26:42,"React Redux requires React 0.13.
https://github.com/gaearon/react-redux/blob/master/package.json#L53
",gaearon,2015-08-11 14:26:42
48,2015-08-10 11:53:26,"at https://github.com/gaearon/react-redux/blob/master/src/components/createConnect.js#L29 you bind action creators to `dispatch` with `wrapActionCreators` if second parameter is an object. but that's what `bindActionCreators` from Redux returns. So if according to the examples in [0.5.0 release notes](https://github.com/gaearon/react-redux/releases/tag/v0.5.0) I bind action creators before passing them down to `connect`, they are about to be double-bound, aren't they?
",constb,2015-08-11 08:06:02
48,2015-08-10 15:40:35,"The `connect` arguments are specified at definition time. You can't call `bindActionCreators` at definition time and then pass them to `connect` because you don't have the store instance.

Does this make sense?
",gaearon,2015-08-11 08:06:02
48,2015-08-11 08:06:02,"@gaearon I got it now. If I pass an object with action creator it will automatically bind them with `bindActionCreators`. In those examples (my bad, didn't read this code right) you are passing a function that returns bound action creators and so `wrapActionCreators` doesn't get called.
",constb,2015-08-11 08:06:02
47,2015-08-10 09:50:57,"Would be nice to have a fourth optional parameter in connect with signature `(props, boundActions) =>` that gets executed once the connected component mounts. It's a very common pattern to want to fetch data from an endpoint on component mounting and would be nice to push side effects into connector rather than the component itself.
",dzannotti,2015-08-23 18:45:21
47,2015-08-10 10:36:17,"@prepare(props => action) where action may be async action?
",gaearon,2015-08-23 18:45:21
47,2015-08-10 10:37:29,"I'm not sure you'd really need boundActions there. If you give it an action creator, the HOC can take care of dispatching itself.
",gaearon,2015-08-23 18:45:21
47,2015-08-10 10:43:16,"Uhm.... I think you need bound actions there because you might want to call multiple (async or not) actions. example

<S_CODE_TOKEN>

How can the HoC do this with unbound actions?
I'm not 100% sure if this would add confusion/fuel bad practices among newcomers, but i think that most people would have to use lifecycle events to achieve this, so why not facilitate it into the connector itself, other flux framework offer routeActions (which are pretty much this) and it's a common enough topic of questioning on slack
",dzannotti,2015-08-23 18:45:21
47,2015-08-10 10:45:08,"This also could possibly facilitate the promise collection needed for server side initial rendering
",dzannotti,2015-08-23 18:45:21
47,2015-08-10 11:22:40,"I'd like to see this as a separate package in userland first. When its API is nailed, we can consider including it.
",gaearon,2015-08-23 18:45:21
47,2015-08-10 11:35:23,"@dzannotti Is it possible to call an action from within another action right now? If it were possible, this might be better done from an action. 

This also reminds me of [Cerebral's signals](https://www.youtube.com/watch?v=ylJG4vUx_Tc), which stack up actions.
",volkanunsal,2015-08-23 18:45:21
47,2015-08-10 11:58:44,"Yes, you can do this with redux-thunk or similar middleware.

<S_CODE_TOKEN>

The only problem is we want to only do this when specific prop changes.
",gaearon,2015-08-23 18:45:21
47,2015-08-10 12:04:56,"Interesting, I didn't think about that, recalling it on props change should be trivial, knowing if it's needed or not might not be
",dzannotti,2015-08-23 18:45:21
47,2015-08-10 12:36:01,"That's why I'm not sure there's a general nice solution here. Different projects may solve this differently.
",gaearon,2015-08-23 18:45:21
47,2015-08-11 13:09:06,"Interesting pattern: passing custom function instead of action creator as second parameter:

<S_CODE_TOKEN>
",gaearon,2015-08-23 18:45:21
47,2015-08-11 13:13:23,"That's pretty much the pattern i was looking for, but i need bind action + `fetchData`
",dzannotti,2015-08-23 18:45:21
47,2015-08-11 13:16:27,"Why do you need it to be bound there?

<S_CODE_TOKEN>
",gaearon,2015-08-23 18:45:21
47,2015-08-11 14:08:17,"Oh no, i don't, i just need boundActions to be passed down to the component, that's all
",dzannotti,2015-08-23 18:45:21
47,2015-08-11 14:11:09,"Yeah re-reading the pattern is slightly off from what i normally use/need.

<S_CODE_TOKEN>

this would allow MyComponent to remain pure while still having route based actions
",dzannotti,2015-08-23 18:45:21
47,2015-08-11 17:55:32,"Take a look at this (decorator) function. https://github.com/broucz/threads-redux/blob/master/client/decorators/onUpdate.js

The callback is only invoked if certain parameters change. 
",malte-wessel,2015-08-23 18:45:21
47,2015-08-23 18:45:21,"While I'm happy to see this in userland, I don't think it belongs in `react-redux`.
",gaearon,2015-08-23 18:45:21
47,2015-09-13 16:42:50,"Here's [another example](https://github.com/emmenko/redux-react-router-async-example/blob/ef5e3f51b6d27f153bdb8492aab670f30cf70067/lib/decorators/fetchOnUpdate.js) of such HOC from [redux-react-router-async-example](https://github.com/emmenko/redux-react-router-async-example):

<S_CODE_TOKEN>

[Usage example](https://github.com/emmenko/redux-react-router-async-example/blob/ef5e3f51b6d27f153bdb8492aab670f30cf70067/lib/components/github/Repo.js#L7-L11):

<S_CODE_TOKEN>
",gaearon,2015-08-23 18:45:21
46,2015-08-09 23:03:02,"Change ""which exactly state"" to ""which exact state""
",timtyrrell,2015-08-10 01:05:20
45,2015-08-09 22:18:54,"My connector looks like so:

<S_CODE_TOKEN>

Using the React inspector, I can see that the props of my components are updating when I interact with the form, but child components are not rendering. After debugging, the culprit appears to be with the connector's `shouldComponentUpdate` method:

<S_CODE_TOKEN>

My state is immutable (and I have tried returning a random object from my reducers to test) and no matter what I can't seem to get this method to return true?
",jptaylor,2015-08-10 00:05:47
45,2015-08-09 22:28:55,"Can you please make a minimal reproducible example?
",gaearon,2015-08-10 00:05:47
45,2015-08-09 23:00:04,"To clarify, 

<S_CODE_TOKEN>

is not a problem. The props you pass will end up in connector's state, so we can only compare state.
",gaearon,2015-08-10 00:05:47
45,2015-08-10 00:05:47,"Issue was that my deep object was still being referenced, correct reducer needed to be:

<S_CODE_TOKEN>

Apologies for false alarm.
",jptaylor,2015-08-10 00:05:47
45,2015-08-10 00:56:47,"This is **not** a correct solution, it just works around the problem. Don't use `_.set` if want immutability :-). That's just asking for trouble.

You are still **mutating the `state` given to you**. This is wrong. It happens to work, but it negates many benefits of Redux (support for DevTools, record/replay, etc). **Do not do this.**
",gaearon,2015-08-10 00:05:47
45,2015-08-10 01:00:07,"Your proposed solution only works one level deep. If you subscribe to `state.form.values.something`, it will break again. Please don't use `_.set()`. It's not the tool for the job.

Consider using something like https://github.com/substantial/updeep or [Immutability Helpers](https://facebook.github.io/react/docs/update.html) instead of `_.set`. Otherwise you'll spend hours chasing weird bugs because `_.set` updated something deeply but there reference stayed the same.
",gaearon,2015-08-10 00:05:47
45,2015-08-10 08:42:57,"Thank you @gaearon. 
",jptaylor,2015-08-10 00:05:47
44,2015-08-09 20:25:00,"Allow you to pass the redux store in via props to make it easier to unit test (Instead of having to mess with `Provider`'s or contexts)

See also #38

Closes #33
",jhollingworth,2015-08-09 21:15:50
44,2015-08-09 21:24:21,"Thank you for your work on this. Released in `0.8.0`.
",gaearon,2015-08-09 21:15:50
43,2015-08-09 13:03:54,"I'm having rather strange issue in my app. After upgrading to 0.6.0 transitions to routes stoped working. While url in browser is changing the page stays the same. With 1.0.0-alpha everything works fine.
",smashercosmo,2015-08-09 19:13:11
43,2015-08-09 16:25:47,"It's a very vague description :-). Can you publish a reproducible example?
",gaearon,2015-08-09 19:13:11
43,2015-08-09 16:49:58,"@gaearon Ok) Here is an [example](https://github.com/smashercosmo/redux-react-router-issue)
",smashercosmo,2015-08-09 19:13:11
43,2015-08-09 17:09:38,"This is https://github.com/facebook/react/issues/2517 showing its head again.
The easy fix is to always pass `props` down when the router state changes.

Instead of:

<S_CODE_TOKEN>

write

<S_CODE_TOKEN>

We need to document this.

I _think_ this shouldn't affect React Router 1.0 but if you could verify this, it would be nice.
",gaearon,2015-08-09 19:13:11
43,2015-08-09 19:13:11,"Documented in https://github.com/gaearon/react-redux/commit/d4ae7b4d652d1ffc33145ad01f879ae85ba8b368.
",gaearon,2015-08-09 19:13:11
43,2015-08-09 19:53:26,"thx for the clarification)
",smashercosmo,2015-08-09 19:13:11
42,2015-08-09 03:37:44,"https://facebook.github.io/react/tips/self-closing-tag.html
",moroshko,2015-08-09 13:20:06
41,2015-08-09 01:08:18,"I'm having an issue with Redux, when I try to implement `shouldComponentUpdate` for a dumb component, `this.props` already holds the same value as `nextProps`. I read this was an issue linked with Flux architectures which I'm using Redux for, but I don't understand why this would happen. Is there any way around it?
",Anahkiasen,2015-08-09 01:25:11
41,2015-08-09 01:23:34,"I'm not sure what you mean. If you don't mutate Redux state and always return the new state (that's how you should do in Redux), you shouldn't have such problem. Can you show your code?
",gaearon,2015-08-09 01:25:11
41,2015-08-09 01:25:11,"I think that might be the issue yes, some object I'm mutating somewhere in the reducer. Just wanted to open an issue ask if that was something you heard about that could be caused by Redux or if it were more an userland error but I assumed it would be the latter yes. Sorry for bothering, will make sure everything is tight and reopen if really I found a bug. :p
",Anahkiasen,2015-08-09 01:25:11
41,2015-08-09 02:35:18,"Was indeed an immutability issue, rewriting my reducer fixed the issue.
",Anahkiasen,2015-08-09 01:25:11
41,2016-05-20 02:29:06,"Hi ，I had the same problem. Can you tell me the solution or the reason
",aDeadFish,2015-08-09 01:25:11
41,2016-06-15 10:55:26,"+1
",chrisgwgreen,2015-08-09 01:25:11
41,2016-06-15 13:01:23,"Basically my prop was mutable so as soon as it was mutated, both the previous and next props actually pointed to the same object, having the same values. I switched to using Immutable.js for objects
",Anahkiasen,2015-08-09 01:25:11
41,2016-06-15 13:53:17,"Thanks Anahkiasen. It turns out I too was mutating and returning the object representing the Redux store without realising it. 

Redux requires a new object to be returned in the reducer for the shouldComponentUpdate function to show a difference between nextProps and this.props. 
I think this.props must directly reference the object returned by the reducer meaning any mutation is already present in the shouldComponentUpdate. 

In my case, I was using Object.assign incorrectly in my reducer and returning the original object (instead of creating a new object etc).

In the following example I assumed y was a new object and 'x === y' to return false:

<S_CODE_TOKEN>

To create a new object, you must ensure the first argument in assign is an empty/or new object:

<S_CODE_TOKEN>
",chrisgwgreen,2015-08-09 01:25:11
41,2016-06-15 15:58:52,"Yep, there's a very good reason why this is in the Redux FAQ: http://redux.js.org/docs/FAQ.html#react-not-rerendering .

Seriously, I think every single time I've seen this question, the cause was mutation in a reducer.
",markerikson,2015-08-09 01:25:11
41,2017-03-06 23:42:51,"I am having the same problem, and I've pinned down that it's state being mutated in the reducer, but I can't figure out how it's being mutated. Would anyone mind giving me a hand?

Below is the reducer, and it appears that this is the line that is mutating the state:
<S_CODE_TOKEN>
I'm guessing the issue is too deeply nested data. Looking at the console.logs I get LOG2 is false, LOG3 reflects the pre-updated state, but LOG4 reflects the updated state, not pre-updated as it should. LOG5 and beyond reflect the updated state.

Is it possibly something with the spread operator in the top (...state) ? I thought that was it and maybe just had an issue with Babel but I get the same error when I use Object.assign({}, state). I also tried using kolodny/immutability-helper and had the same issue. 

Any help would be greatly appreciated!

This is the reducer. It's actually a subreducer, only handling a section of state with multiple insurance schedules (list of autos, list of locations, list of lenders, etc..)
<S_CODE_TOKEN>

If relevant, this is the react component. It receives this.props rather than having it's own separate connect. I would expect this.props to reflect the pre-updated redux state and nextProps post-update, but the console logs in componentWillReceiveProps and shouldComponentUpdate all always reflect the updated props.

<S_CODE_TOKEN>",gate5th,2015-08-09 01:25:11
41,2017-03-06 23:46:09,"@gate5th : yes, that is _absolutely_ doing direct mutation.  You're only copying the first level of nesting - you need to copy and update _every_ level of nesting.  You also shouldn't copy `newState` like that at the _start_ of the reducer - only copy it when you actually hit a case that needs to update.

I'd encourage you to read through http://redux.js.org/docs/recipes/reducers/ImmutableUpdatePatterns.html , which shows how to do proper nested immutable updates, and discusses several common mistakes, as well as some of the articles listed at http://redux.js.org/docs/recipes/reducers/PrerequisiteConcepts.html . There's also a new FAQ section on immutability: http://redux.js.org/docs/faq/ImmutableData.html .",markerikson,2015-08-09 01:25:11
41,2017-03-06 23:55:36,"Thank you for the super fast response @markerikson! I had not yet seen that new FAQ on immutability and looks extensive so that will be helpful. I didn't realize that the copying had to go further down since I wasn't modifying the middle. I'll read the links in detail and see if I can determine the fix. 

This is actually my first coding post: from an etiquette standpoint should I re-post with a solution once I've resolved it? Or is that unnecessary?",gate5th,2015-08-09 01:25:11
41,2017-03-07 00:51:38,"@gate5th : since this was a usage question, it actually should probably have been posted over on Stack Overflow, especially since this is a dead thread.  You're lucky I saw the notification and answered :)

No need to re-post anything here.  It's a common issue (which is why it's discussed in the docs and FAQ).

Glad you got it working now!",markerikson,2015-08-09 01:25:11
40,2015-08-08 22:38:46,"Fixes #39 
",lwansbrough,2015-08-09 17:28:00
40,2015-08-09 13:42:29,"This breaks the web version: `ReferenceError: __DEV__ is not defined`.
You can run `npm test` to check.
",gaearon,2015-08-09 17:28:00
40,2015-08-09 13:54:56,"Another problem with this condition is that Uglify won't know what to cut out at the build time because people's Webpack/Browserify configs have no idea what `__DEV__` is.
",gaearon,2015-08-09 17:28:00
40,2015-08-09 17:28:00,"For now I think I fixed it with https://github.com/gaearon/react-redux/commit/238e7d90202ea51495e5b217e74619a3150ca93e. Will be out in `0.7.0` shortly, I'll deprecate `0.6.0`.
",gaearon,2015-08-09 17:28:00
40,2015-08-09 17:34:06,"Please let me know if `0.7.0` helps.
",gaearon,2015-08-09 17:28:00
40,2015-08-09 22:29:39,"Thanks, I'm out right now but I'll give it a shot when I get back. Cheers!
",lwansbrough,2015-08-09 17:28:00
39,2015-08-08 22:36:25,"https://github.com/gaearon/react-redux/blob/7458a923769e43dc647c270a7102d55236fa3b79/src/components/createConnect.js#L149

`process` is not available in React Native. React Native does however have a `__DEV__` global.
",lwansbrough,2015-08-09 17:27:32
39,2015-08-09 17:33:28,"Please let me know if `0.7.0` fixes it.
",gaearon,2015-08-09 17:27:32
39,2015-08-15 08:32:46,"Sorry this response is super late, but for anyone who may come across this issue: yes it fixes it! Thanks Dan.
",lwansbrough,2015-08-09 17:27:32
39,2015-08-15 18:13:39,"React native 0.10.0 fixes this problem:

> process.env.NODE_ENV: This value is defined to be ""production"" or ""development"" based on your current environment. Now you can use npm packages that rely on NODE_ENV!
> https://github.com/facebook/react-native/releases/tag/v0.10.0-rc
",nkt,2015-08-09 17:27:32
39,2015-08-15 19:09:09,":+1: 
",gaearon,2015-08-09 17:27:32
38,2015-08-08 16:52:23,"I've written a smaller wrapper around the connect component which, amongst other things, allows you to skip all the redux stuff and just render the inner component. This can be really helpful when you don't want to mess with setting up contexts, etc and test the render.

<S_CODE_TOKEN>

The issue is `connect` requires that `context.store` is there. Something I'd ideally like to avoid if possible for ease of testing. Would it be OK if we just did nothing if the store isn't in the context?
",jhollingworth,2015-08-09 20:25:18
38,2015-08-09 17:29:34,"Let's do it another way: allow `store` to be passed as a prop to any `connect()`ed component. If it is passed, it will be used instead of `context.store`. Would you update your PR to implement this?
",gaearon,2015-08-09 20:25:18
38,2015-08-09 20:25:18,"Closing in favour of #44
",jhollingworth,2015-08-09 20:25:18
37,2015-08-08 16:48:57,"Hi,

I have the following behavior after upgrading to `0.5.0`
1. I changed the `@provide` to use `Provider`
2. didn't change connect for now

<S_CODE_TOKEN>

Now, when component is mounted it calls the action to load the initial state

<S_CODE_TOKEN>

component is rendered with default props

I could see the action causes the state to be populated 

<S_CODE_TOKEN>

but there is no re-render. The new state is shown in the UI (rendered by the component) next time. that is if the same button/nav item is clicked again or navigate away and back to the same screen. 

Let me know what else needed to help me with this issue.
",bsr203,2015-08-08 17:48:58
37,2015-08-08 17:48:44,"This is a regression in 0.5.0. It should be fixed in [0.5.3](https://github.com/gaearon/react-redux/releases/tag/v0.5.3).
Better yet, upgrade to 0.6.0: https://github.com/gaearon/react-redux/releases/tag/v0.6.0
",gaearon,2015-08-08 17:48:58
37,2015-08-08 17:48:58,"Please reopen if you still have this issue after upgrading.
",gaearon,2015-08-08 17:48:58
37,2015-08-09 08:55:10,"It works great ... thanks
",bsr203,2015-08-08 17:48:58
36,2015-08-08 16:29:21,"It would be really handy if you could have access to the props when selecting state. This PR passes them in as a second argument to `mapStateToProps`

<S_CODE_TOKEN>
",jhollingworth,2015-08-09 16:10:38
36,2015-08-09 01:28:19,"Please see this discussion: https://github.com/gaearon/react-redux/issues/41.
Does having the third argument help you?
",gaearon,2015-08-09 16:10:38
36,2015-08-09 10:13:03,"Sorry, I might be missing something but #41 seems to be a bug about props being stale rather than making them accessible to `mapStateToProps`.

> Does having the third argument help you?

Do you mean `mergeProps`? Yes it does, in that I can work around your API to achieve what I want. However it doesn't seem like a very nice API to me. Maybe thats because I'm not thinking in the 'redux' way?

Say I've got a users store and I want to render a single user from that store but I don't want to pass in any action creators. [Based on your example](https://github.com/gaearon/react-redux#inject-todos-of-a-specific-user-depending-on-props-and-inject-propsuserid-into-the-action) I would have to do this:

<S_CODE_TOKEN>

With my proposed change all you'd need to do is

<S_CODE_TOKEN>

Maybe you're usage is different but selecting something from state based on the parent props is something I do in nearly every 'smart' component. This proposed change makes this use case significantly simpler.

Do you have any specific motivations for keeping the current API?
",jhollingworth,2015-08-09 16:10:38
36,2015-08-09 10:57:10,"+1 I found the new API quite verbose for this (seemingly common) use-case.

But I'm not if there's a specific reason that I'm missing for why props aren't provided to `mapStateToProps`.
",danharper,2015-08-09 16:10:38
36,2015-08-09 12:31:32,"So you need to select state by ID but not action creators? Why? Wouldn't you need that in real apps, as opposed to simple examples?

My only concern with adding props to first parameter is because people will expect it to be available to `mapDispatchToProps` too. But we can't give it there—this means we have much worse performance because we re-bind action creators on every prop change regardless of whether user uses this parameter.
",gaearon,2015-08-09 16:10:38
36,2015-08-09 12:47:53,"Ah, makes sense to me.

On Sun, 9 Aug 2015 13:31 Dan Abramov notifications@github.com wrote:

> So you need to select state by ID but not action creators? Why? Wouldn't
> you need that in real apps, as opposed to simple examples?
> 
> My only concern with adding props to first parameter is because people
> will expect it to be available to mapDispatchToProps too. But we can't
> give it there—this means we have much worse performance because we re-bind
> action creators on every prop change regardless of whether user uses this
> parameter.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/gaearon/react-redux/pull/36#issuecomment-129174911.
",danharper,2015-08-09 16:10:38
36,2015-08-09 12:48:14,"> So you need to select state by ID but not action creators? 

About 50% of our components don't need action creators at all, they just render data.

For those that we just pass the prop value from within the component

<S_CODE_TOKEN>

To me this is much more understandable since its clear where an action creators arguments are coming from.
",jhollingworth,2015-08-09 16:10:38
36,2015-08-09 12:51:00,"> My only concern with adding props to first parameter is because people will expect it to be available to mapDispatchToProps too. But we can't give it there—this means we have much worse performance because we re-bind action creators on every prop change regardless of whether user uses this parameter.

Why not leave that as a note in the documentation for `mapDispatchToProps`?
",jhollingworth,2015-08-09 16:10:38
36,2015-08-09 13:24:55,"> To me this is much more understandable since its clear where an action creators arguments are coming from.

But it's asymmetric. You pass just one `user`, but `updateUser` requires its ID as a parameter? This is an implementation detail leaking into the component. If component is the encapsulation boundary, this is not the minimal API for it.
",gaearon,2015-08-09 16:10:38
36,2015-08-09 13:34:13,"> But it's asymmetric. You pass just one user, but updateUser requires its ID as a parameter? This is an implementation detail leaking into the component. If component is the encapsulation boundary, this is not the minimal API for it.

I still personally prefer to know precisely where all arguments to a function come from rather than having to trace through multiple function calls but I completely see where you're coming from.

What about when your component doesn't need action creators?  A common use case in my code base but maybe I'm in a minority. Unless I'm missing something you still have to do this

<S_CODE_TOKEN>
",jhollingworth,2015-08-09 16:10:38
36,2015-08-09 15:06:13,"We can reorder parameters in `mergeProps` and it would be 

<S_CODE_TOKEN>

Is it really that bad?

We get both symmetry and better performance because we don't have to recompute `mapStateToProps` every time props change. I think it's the way to go..
",gaearon,2015-08-09 16:10:38
36,2015-08-09 15:08:18,"With destructuring:

<S_CODE_TOKEN>
",gaearon,2015-08-09 16:10:38
36,2015-08-09 15:35:14,"Personally that doesn't exactly feel intuitive to me

What about if you could pass in an object literal to `connect`?

<S_CODE_TOKEN>

With those defaults and your suggestion of moving props to being the first argument we can reduce it down to

<S_CODE_TOKEN>
",jhollingworth,2015-08-09 16:10:38
36,2015-08-09 15:35:53,"also, sorry, don't want to be annoying. I'd just like to find a nice API :) 
",jhollingworth,2015-08-09 16:10:38
36,2015-08-09 15:59:17,"`state => state` is a very bad default performance-wise. It means that, as your app grows, existing parts of it start to work much slower without any apparent reason. 

Performance is more important to this library than succinctness. We can sacrifice some convenience if that means people will get more performant apps by default. We will also never suggest ""bad perf"" patterns as defaults. 
",gaearon,2015-08-09 16:10:38
36,2015-08-09 16:10:38,"Fair enough, will close this then
",jhollingworth,2015-08-09 16:10:38
36,2015-08-09 17:19:08,"Dont want tot reopen this request on purpose; but this use-case is very much like mine. Looking ahead I was wondering whether Reselects (memoized) selectors can then be applied tot the filter in the mergeProps? 
Is that a good use for selectors in the new react-redux api?

Thanks in advance
",jgavanleeuwen,2015-08-09 16:10:38
36,2015-08-09 18:55:27,"> Dont want tot reopen this request on purpose; but this use-case is very much like mine. Looking ahead I was wondering whether Reselects (memoized) selectors can then be applied tot the filter in the mergeProps? 

Can you ask this in Reselect repo? I'm not sure how to do that, but I'd sure like to know :-)
",gaearon,2015-08-09 16:10:38
36,2015-08-11 15:58:07,"I am finding this to be a really frustrating use case for me.  I almost always want `props` to be available to both the `selectState` and `mapDispatchToProps` functions.  Could we have `@conenct` behave as it does currently, but have a second connector `@connectWithProps` that gave props to both functions?  We could still avoid re-binding when props haven't changed by checking shallowEqual on the props.

Another option, we could check `fn.length` and not pass props if that returns `1`.
",ForbesLindesay,2015-08-09 16:10:38
36,2015-08-11 19:12:39,"> We could still avoid re-binding when props haven't changed by checking shallowEqual on the props.

But we would still have to rebind on every prop change when they aren't equal, but we don't really know if user even used props.

> Another option, we could check fn.length and not pass props if that returns 1.

Yes, I guess we'll have to resort to this to satisfy everybody. :-) Normally I hate to do this, but this seems like a valid use case. Want to make a PR?
",gaearon,2015-08-09 16:10:38
36,2015-08-11 19:14:20,"I created https://github.com/gaearon/react-redux/issues/52, let's discuss there.
",gaearon,2015-08-09 16:10:38
36,2015-08-17 15:15:14,"Released as 0.9.0, please verify.
",gaearon,2015-08-09 16:10:38
35,2015-08-08 16:09:37,"Not setting the ref of the inner component makes it a pain to [test through refs](https://github.com/QubitProducts/react-test-tree#higher-order-components).

Is there any specific reason for setting the ref through `setUnderlyingRef` or could we just set the ref to a string?
",jhollingworth,2015-08-09 17:20:34
35,2015-08-09 01:27:12,"Is calling `getUnderlyingRef()` a burden in this case?
",gaearon,2015-08-09 17:20:34
35,2015-08-09 09:26:59,"Unfortunately yes. We're using [react-test-tree](https://github.com/QubitProducts/react-test-tree) which wraps a component and any children in a testable interface (Essentially a page object). Not having a ref present in the component means it cannot find any children.

Also, the fact that you have to call `getUnderlyingRef()` at all is a bit of a smell. The higher order component is really just an implementation detail and you rarely want to test it directly, rather the impact it has on the inner component. You can [tell react-test-tree to make HoC's invisible](https://github.com/QubitProducts/react-test-tree#higher-order-components) ([Example](https://github.com/jhollingworth/redux-dataful/blob/master/src/dataful.js#L20)) which makes testing much more pleasant. Again, not having a `ref` there makes this impossible.

Out of all the issues I've just raised this is the only one that is completely blocking us from moving to redux 1.0. We used to use the `<Connector .../>` which allowed us to support our desired syntax but thats now gone...

What's your motivation behind not making the decorated component available via `element.refs.underlyingRef` considering the existing `getUnderlyingRef()` API is still supported?
",jhollingworth,2015-08-09 17:20:34
35,2015-08-09 16:58:21,"> Out of all the issues I've just raised this is the only one that is completely blocking us from moving to redux 1.0. 

Wait wait. Redux is in no way related to React Redux. You can use `redux@1.0.0-rc` with `react-redux@0.2.1` (or whatever worked for you) just fine while we're figuring it out..
",gaearon,2015-08-09 17:20:34
35,2015-08-09 17:01:28,"> Also, the fact that you have to call getUnderlyingRef() at all is a bit of a smell. The higher order component is really just an implementation detail and you rarely want to test it directly, rather the impact it has on the inner component.

Why not export the vanilla component then and test it directly without the HOC? I'm just trying to understand the issue better.

Are you testing the whole tree instead of particular components?
",gaearon,2015-08-09 17:20:34
35,2015-08-09 17:13:46,"I'm OK with merging this, but let's rename `getUnderlyingRef()` to `getInstance()` and `refs.underlyingRef` to `refs.instance`?
",gaearon,2015-08-09 17:20:34
35,2015-08-09 17:20:34,"I changed names a bit and put it in https://github.com/gaearon/react-redux/commit/b7ef1789d14761d189be4cc4857608c5c82233e3, will release soon. Thanks for the tip.
",gaearon,2015-08-09 17:20:34
35,2015-08-09 17:30:36,"Awesome thanks :smile:
",jhollingworth,2015-08-09 17:20:34
34,2015-08-08 12:20:28,"This should address #32.
@maxguzenski Can you try this branch?
",gaearon,2015-08-08 13:20:31
34,2015-08-08 13:16:52,"I dont know, how I build it? I tried this inside my project: 
npm install github:gaearon/react-redux#fast

but without success
",maxguzenski,2015-08-08 13:20:31
34,2015-08-08 13:20:15,"Hmm. Let me just release it as `0.6.0`. If there are any issues we'll just fix them and add more tests. :-)
",gaearon,2015-08-08 13:20:31
34,2015-08-08 13:23:39,"when I tried: npm install github:gaearon/react-redux#fast
there is no error, but there is no lib/ folder (even src/ folder) into node_modules/react-redux
I have babel and webpack installed global. 
",maxguzenski,2015-08-08 13:20:31
33,2015-08-08 10:26:03,"Suggestion: make component wrapped by `connect()` optionally accept `store` as a prop.
This may help integration to codebases that don't use React for everything, and can't rely on context.
",gaearon,2015-08-09 21:15:50
32,2015-08-08 04:39:56,"Hi,
I have a redux reducers to keep a hash of all users on my app, and I have some react component connect to only one user of this hash. before version 0.5, my connect was: 

ps.: I use immutable-js

<S_CODE_TOKEN>

Now, I cant access props from first method, and need to use 3th method to get correctly user: 

<S_CODE_TOKEN>

What happens is that shouldComponentUpdate from connects doesnt see this filter and re render my component all time that ANY users are changed/added/removed

I strong believe that this functions should be binded to connect, and let developer access this.props/this.state from there, or, at least, pass parent props... In my case having this third method is just a overkill

ps.: This issue happens on this example as well: 
https://github.com/gaearon/react-redux#inject-todos-of-a-specific-user-depending-on-props-and-inject-propsuserid-into-the-action
",maxguzenski,2015-08-08 13:32:59
32,2015-08-08 13:27:31,"Please see if the issue is fixed in `0.6.0`. We still don't give you `props` in the first function, but if the third function returns props shallowly equal to the previous props, no update should happen.
",gaearon,2015-08-08 13:32:59
32,2015-08-08 13:31:55,"yes! now it is working ... no re-render() :-)
",maxguzenski,2015-08-08 13:32:59
32,2015-08-08 13:36:20,"Just to know, you plan to give parent props to first function or you don't sure if it is a good thing?
",maxguzenski,2015-08-08 13:32:59
32,2015-08-08 13:53:24,"If everyone keeps asking about this, I'll consider it, but I also like that the API is symmetric.

There are some benefits to keeping it a function of single argument:
1. The selector API stays simple. No need for things like https://github.com/faassen/reselect/issues/20 that complicate sibling libraries to Redux.
2. If you need to select state by props, most likely you'll need to inject props into action creators too. And you would be surprised if props were passed to the first function, but not to the second one. And we can't pass it to the second function because we only want to bind actions once for performant most common use case.
",gaearon,2015-08-08 13:32:59
31,2015-08-08 00:29:17,"Failing spec for issue described in #28
",aaronjensen,2015-08-08 00:34:26
31,2015-08-08 00:34:26,"Should be fixed in 0.5.3. Please verify!

This is not a correct fix because it causes subscription to occur on server (server executes `componentWillMount`) but never freed.
",gaearon,2015-08-08 00:34:26
31,2015-08-08 00:35:18,"Ah! I knew there was a reason to not use `componentWillMount`. Thanks.
",aaronjensen,2015-08-08 00:34:26
30,2015-08-07 18:15:21,"When this was part of the main redux repo, I could use props in my select functions, because they were passed in a second parameter.

<S_CODE_TOKEN>

This was really useful to select state based on certain props that were passed in (I mostly used it for react router's params and such). It seems like the problem is right here, where only state is being passed: https://github.com/gaearon/react-redux/blob/master/src/components/createConnect.js#L91
",TimothyKrell,2015-08-07 18:52:34
30,2015-08-07 18:29:18,"@TimothyKrell, it looks like in v0.5.0 you now have access to the components parent props via the third argument passed to connect

https://github.com/gaearon/react-redux/blob/master/README.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops

Example from readme:

##### Inject `todos` of a specific user depending on props, and inject `props.userId` into the action

<S_CODE_TOKEN>
",hartzis,2015-08-07 18:52:34
30,2015-08-07 18:52:34,"Thanks! Should have read the README more carefully. Sorry for the noise!
",TimothyKrell,2015-08-07 18:52:34
30,2015-08-07 19:20:25,"Yeah, this was done because once you want to something with state by props, you'll likely want to do something with actions too, but we can't rebind actions on every prop change (wasteful!) if you don't care about props. Hence the third argument.
",gaearon,2015-08-07 18:52:34
29,2015-08-07 18:10:01,"New to the project, so it's possible I'm reading this wrong, but I think in this example `connect()` is wrapping the wrong component.
",af,2015-08-07 19:52:27
29,2015-08-07 18:43:54,"They way it is listed now in the readme seems to be correct.

Since you're ""injecting"" the state as props into `CounterContainer`. The `CounterContainer` now has access to the state from its `this.props`. Check out this example:

https://github.com/gaearon/redux/blob/master/examples/counter/containers/CounterApp.js

I know this is an old example, but look how connect passes `state.counter` as `this.props.counter` in the render function. `CounterApp` is essentially `CounterContainer` in this example.

Does this help to explain it at all?
",hartzis,2015-08-07 19:52:27
29,2015-08-07 18:53:12,"Thanks for the feedback @hartzis. Perhaps the problem then is the import statements– `Counter` is imported but never used, while `CounterContainer` is not imported nor defined anywhere, but is then used as a function argument. At the least running the code as-is will give you a ReferenceError :)
",af,2015-08-07 19:52:27
29,2015-08-07 19:52:25,"@af is correct.

@hartzis Master is a bit outdated, I just released `react-redux@0.5.0` so official examples will be updated later. The intermediate component isn't needed anymore! See also https://github.com/gaearon/react-redux/releases/tag/v0.5.0 release notes.
",gaearon,2015-08-07 19:52:27
29,2015-08-07 20:57:18,"@gaearon That is awesome! I totally see that now.

@af Great catch!
",hartzis,2015-08-07 19:52:27
28,2015-08-07 18:02:38,"Occasionally, when clicking through our app we get this:

![oliver 2015-08-07 11-01-56](https://cloud.githubusercontent.com/assets/8588/9142321/be9e7822-3cf3-11e5-8008-bf31d5a373bb.png)

Is it possible for will unmount to fire before mount? Should we check to ensure `unsubscribe` is there before calling it or is something else going on?
",aaronjensen,2015-08-08 00:31:35
28,2015-08-07 18:38:03,"I believe this has to do w/ some incorrect stuff that was happening in the app, though I don't know exactly what yet. This may be something that should never normally happen.
",aaronjensen,2015-08-08 00:31:35
28,2015-08-07 18:51:59,"Ok, so here's what we were doing... in `componentWillMount` we fired an action via `setTimeout` so that the `react-redux` subscription in `componentDidMount` will have already happened by the time the action is dispatched. It appears that this is a bad idea, though I do not understand why.
",aaronjensen,2015-08-08 00:31:35
28,2015-08-07 19:40:27,"OK I introduced this bug while tweaking @gnoff's code. :-(
Will push out a fix soon.
",gaearon,2015-08-08 00:31:35
28,2015-08-07 19:49:16,"Can you verify the bug is fixed in `0.5.1`?
",gaearon,2015-08-08 00:31:35
28,2015-08-07 21:39:21,"yep, it is. But then I get this: 

<S_CODE_TOKEN>

which makes me think we're doing something very wrong. By removing the `setTimeout` in `componentWillMount` it works out.

What's the right way to fire an action when a component mounts? If the action immediately modifies state, `componentWillMount` is too soon, because react-redux doesn't subscribe until `componentDidMount`...
",aaronjensen,2015-08-08 00:31:35
28,2015-08-07 22:18:26,"> contains `render` method but is not mounted in the DOM

I found this: https://github.com/facebook/react/issues/4233.

Sounds like React throws if you use `findDOMNode(this)` when component is already unmounted. You should clear any previously set interval in `componentWillUnmount`.

> If the action immediately modifies state, componentWillMount is too soon, because react-redux doesn't subscribe until componentDidMount.

What do you mean by ""too soon""? If React Redux doesn't update in some edge case, it's a bug, no matter where you call `dispatch`! You should file an issue, not just accept it like that. :smile: 
",gaearon,2015-08-08 00:31:35
28,2015-08-07 22:20:42,"I just assume that you've thought of everything and there's a good reason it is as it is! I'll make sure it is what I think it is and file an issue when I get a sec. Thanks!
",aaronjensen,2015-08-08 00:31:35
28,2015-08-07 22:23:29,"Keeping it open for now so I don't forget about it.
I make mistakes all the time, you should help me figure them out!
",gaearon,2015-08-08 00:31:35
28,2015-08-07 22:24:34,"Ideally, the fastest way to figure out a solution is to discuss a failing test. Can I ask you to contribute it?
",gaearon,2015-08-08 00:31:35
28,2015-08-08 00:34:05,"Looks like you beat me to it! feel free to close #31, thanks. Btw, is there a reason to do it this way instead of by subscribing in `componentWillMount`?
",aaronjensen,2015-08-08 00:31:35
28,2015-08-08 00:35:00,"Yes, `componentWillMount` executes on server. This would cause memory leaks.
",gaearon,2015-08-08 00:31:35
28,2015-08-08 01:32:08,"The second error I saw is actually this: https://github.com/facebook/react/issues/2410

I'm not sure why yet, in my case, it has to do w/ clicking submit on a form triggering a router transition. I'll keep digging
",aaronjensen,2015-08-08 00:31:35
28,2015-08-08 01:46:57,"If you can reliably reproduce it on a small project let the folks know. It could be a React bug after all.

Are you by chance using React.addons.batchedUpdates or similar? Not saying I understand the issue but if so, try removing it and check if it makes the bug go away. I've heard about problems with batching and inputs although not sure what kind. Sorry if this is too vague. :-)
",gaearon,2015-08-08 00:31:35
28,2015-08-08 01:51:59,"We are, but removing it has no effect. I'll work on a small repro.
",aaronjensen,2015-08-08 00:31:35
28,2015-08-08 07:10:49,"You may be following that thread, so you may have seen it, but here's a repro: https://github.com/aaronjensen/react-2410-repro

The error does not happen if this line is removed: https://github.com/aaronjensen/react-2410-repro/blob/master/app/create_router.jsx#L10
",aaronjensen,2015-08-08 00:31:35
27,2015-08-07 16:59:30,"Now that `connect()` can bind action creators, I forgot to make sure hot reloading works with it.
The fix shouldn't be difficult #famouslastwords
",gaearon,2015-08-08 00:22:40
27,2015-08-08 00:23:10,"Should be fixed in `0.5.2`.
",gaearon,2015-08-08 00:22:40
26,2015-08-07 15:21:39,"Just in case of confusing reader.
",jihchi,2015-08-07 15:34:22
25,2015-08-07 11:09:38,"This is based on #16, plus a few style tweaks I want to make + boring stuff like removing dead bones of deprecated APIs. Big thanks to @gnoff!
",gaearon,2015-08-07 14:16:27
24,2015-08-07 04:27:19,"Hi, Dan. I'm working around the project of connecting Redux and GraphQL. For now I'm feeling that it would be an alternative for react-redux. So I'm using some of your code in my project. There is no LICENSE in this repo, so I'm not sure if its ok. And how should I mention you in my repo? I'm just not competent with this license stuff.
",gyzerok,2015-08-07 09:52:31
24,2015-08-07 09:52:29,"Sorry. It's MIT. I'll add the file & header.
",gaearon,2015-08-07 09:52:31
23,2015-08-06 01:32:48,"First at all, thanks for build redux. 

I read all discussion on https://github.com/gaearon/react-redux/issues/1 but I still don't get it: 

Why Provider/Connection decoration just doesn't bind all actions creator to dispatch only once (willComponentMount or something like that) and pass it (all app actions) to nested component as props? 

With the new api proposal, I still have to pass to @connect that actions that I want to use, and its look like to been ""re bind"" all time that render() is called...  I just dont get why.. what have I missed?
",maxguzenski,2015-08-06 18:06:03
23,2015-08-06 04:24:44,"in #16 the binding of action creators happens during mounting only one time.

If you want to pass all app actions to all subcomponents using the new api you can do so trivially by passing all of your actions into the second argument (see example below). We wouldn't want to do that for you automatically however since it would cut off other use cases and possibly pollute connected components with unnecessary or redundant actions (imagine nested connected components for a email client where you have navigational actions for what messages are being viewed but then a component for the actual message detail view, not that this would be the optimal setup)

<S_CODE_TOKEN>
",gnoff,2015-08-06 18:06:03
23,2015-08-06 18:06:03,"That's exactly the intention for the new API. It is `connect(selectState, mapDispatch, mergeProps)`. While `selectState` is called every time store state changes, `mapDispatch` is only called once.
",gaearon,2015-08-06 18:06:03
23,2015-08-06 23:45:30,"Yes, but it looks like that you have to pass actions on @connect, why not <Provide actions={allActions} />  and @connect just pass it forward all the time?
",maxguzenski,2015-08-06 18:06:03
23,2015-08-07 02:58:30,"Actions are attached to connected components as props. Passing all actions all the time would unnecessarily pollute props of all connected components and would greatly increase the likelihood of overloading a prop and hiding an intended behavior. In more complicated apps it doesn't make sense for all components to be aware of all actions and therefore this behavior you suggest would hinder the majority for the convenience of a few
",gnoff,2015-08-06 18:06:03
22,2015-08-03 19:41:15,"ConnectorDecorator::shouldComponentUpdate only looks at `this.props`. What if the result of `select(state, this.props)` has changed?
https://github.com/gaearon/react-redux/blob/52a280162c220d4ecf1ce826f9dcc423231e8c8b/src/components/createConnectDecorator.js#L13
",dbrans,2015-08-04 18:01:01
22,2015-08-04 18:01:01,"The changes to the state slice are currently handled by `<Connector>` it uses internally.
`<Connector>` is going away (see issue #1 and #16) so this will be more obvious soon.
",gaearon,2015-08-04 18:01:01
21,2015-08-03 14:59:08,"You can import React Native-compatible version from `react-redux/native` but this isn't documented.
",gaearon,2015-08-07 10:00:30
21,2015-08-07 10:00:30,"Documented in https://github.com/gaearon/react-redux/commit/c3e5b38dc5fb3d938a690cc335756047c24777f0.
",gaearon,2015-08-07 10:00:30
20,2015-08-03 08:37:54,"Is there a way to create a class which will be a base class for Smart Components, instead of using `export default connect(select)(CounterContainer);`?

So it would looks like:

<S_CODE_TOKEN>

I'm not sure, probably it is not possible to implement connector as a base class or that is not a right  way of how it should be done in javascript.
",dmitry-zaets,2015-08-03 09:11:54
20,2015-08-03 08:54:58,"Inheritance is discouraged in React code and should always be avoided for components. Composition solves the same problem in a way that is much easier to maintain.

Consider this:

1) You'd have to remember to call `super` from lifecycle hooks, or component would break in a weird way.

2) If React Redux starts to use a new lifecycle hook in its internal implementation, your existing code might break even if it worked before, because you might have been forgetting to call `super`. 

3) Name clashes. What if you name your method `handleChange`? You're going to overwrite my method. Oops!

4) What if every utility component behaved this way? We can't have more than one base class.

In short, inheritance brings a bunch of problems, and doesn't have any advantages to composition in case of React components. Don't use it. 
",gaearon,2015-08-03 09:11:54
20,2015-08-03 09:01:44,"Thanks for a good explanation! Will avoid using it in such way!
Just wanted to make using of connectors more transparent than 'connector(select)(Component)' calls. But I think that's wrong way:)
",dmitry-zaets,2015-08-03 09:11:54
20,2015-08-03 09:11:54,"If you want a neater syntax you can use ES7 decorators proposal implemented by Babel.
Note that it's experimental and may change.

<S_CODE_TOKEN>
",gaearon,2015-08-03 09:11:54
20,2015-08-03 09:12:58,"Thanks, I've already noticed that in examples, but still want to avoid using experimental ES7 parts.
",dmitry-zaets,2015-08-03 09:11:54
20,2015-08-03 14:33:08,"A few more comments on React, inheritance and composition:

https://github.com/facebook/react/issues/613#issuecomment-29280175
https://github.com/facebook/react/issues/613#issuecomment-76584019
https://github.com/facebook/react/issues/613#issuecomment-76621639
",gaearon,2015-08-03 09:11:54
19,2015-08-02 22:24:06,"Note - There is also a change in the file paths for **test:cov** to work in windows.
In windows, files under the .bin folder reference use *.cmd batch files

This is needed for redux as well.
",mikekidder,2015-08-03 08:50:02
18,2015-08-01 08:08:33,,sapegin,2015-08-03 12:51:46
18,2015-08-03 12:52:18,"Fair enough! (React allows `Component`less components, but they don't have `setState` so people get confused.)
",gaearon,2015-08-03 12:51:46
18,2015-08-03 12:54:55,"Actually I didn’t know that and it could confuse other people too. Thanks!
",sapegin,2015-08-03 12:51:46
17,2015-07-31 21:01:20,,wbuchwalter,2015-07-31 23:13:36
17,2015-07-31 21:02:13,"Minor change to doc: Decorators are ES7 feature not ES6.
",wbuchwalter,2015-07-31 23:13:36
16,2015-07-31 06:38:22,"Alright,

Here's my take on the new connectDecorator API. Normal Args examples should all work from @gaearon 's comment in #1 

https://github.com/gaearon/react-redux/issues/1#issuecomment-120729921
### API

<S_CODE_TOKEN>

~~I didn't delete createConnector but I did move createConnectDecorator to createConnectDecoratorDeprecated until we can decide if we should just delete these.~~

the old Connector and connect decorator have been deleted

I have tested through mocha only so no guarantees it is 100%

I'm happy to make changes/work on it etc... as opinions change on best api going forward if it's not ready to merge yet.

State is handled like Connector did on any notification from the store. shouldComponentUpdate will bail if the slice is the same

actions are bound using the provided dispatchBinder (2nd arg) only on component mount. Not sure if this is what you were aiming for in the API but it certainly reduces the number of binds to a lot less than every render and it seemed find since the typical use case for dispatchBinder is to simply bind dispatch to the action creator methods

merge is called on every render, reading stateProps and dispatchBinderProps from component state (not store state) and taking whatever current component props as the 3rd argument.

~~finally the decorated component is rendered with this.props, and mergedProps in that order.~~
If you want choose to provide a custom merge function then only the props returned from merge will be added to the underlying component

I also wrote a util for wrapActionCreators that fits the dispatchBinder argument signature and delegates to redux/bindActionCreators. This is called form connectDecorator if the actionCreators argument is a plain object
",gnoff,2015-08-07 14:16:27
16,2015-07-31 07:03:02,"This is looking good so far! Can you please remove the old “deprecated” code for cleanness? I don't want to ship the old versions anyway.
",gaearon,2015-08-07 14:16:27
16,2015-07-31 07:48:52,"@gaearon mind also checking out this additional PR (currently on my fork only since it looks cleaner comparing to my master)

https://github.com/gnoff/react-redux/pull/1
",gnoff,2015-08-07 14:16:27
16,2015-07-31 10:20:20,"Cool xD When do you think this will be merged? Can't wait to use it hehe
",quirinpa,2015-08-07 14:16:27
16,2015-07-31 10:25:10,"About a week after Redux 1.0 is released, I presume.
",gaearon,2015-08-07 14:16:27
16,2015-07-31 10:26:08,"ok, thank you @gaearon :)
",quirinpa,2015-08-07 14:16:27
16,2015-07-31 17:18:19,"Should we consider changing the static member DecoratedComponent on our wrapped component. If you use  `@connect()(Component)` you will end up with the Symbol for `Component` pointing to the decorated component `Component.DecoratedComponent` pointing to the undecorated component. This feels... misleading?

Perhaps we change `static DecoratedComponent` in [createConnectDecorator.js](https://github.com/gnoff/react-redux/blob/master/src/components/createConnectDecorator.js#L29) to `static UndecoratedComponent`

or `static Decoratee`
",gnoff,2015-08-07 14:16:27
16,2015-07-31 20:14:35,"@Keats Hey Keats, great job! I have a question: If we use the merge method to select inside a store, does it update only when that particular ""reselect"" gives up different values or does it re-render every time the main store changes?
",quirinpa,2015-08-07 14:16:27
16,2015-08-01 05:57:26,"+1 just tried it out and it is working as described
",rt2zz,2015-08-07 14:16:27
16,2015-08-01 23:31:31,"note: nesting connectors does not work in react 0.13, but does work in 0.14. Something to do with the change to parent contexts.
",rt2zz,2015-08-07 14:16:27
16,2015-08-02 18:03:47,"@quirinpa I'm not the one that did the PR!
It's @gnoff 
",Keats,2015-08-07 14:16:27
16,2015-08-03 01:59:22,"@Keats oh :P my mistake
",quirinpa,2015-08-07 14:16:27
15,2015-07-30 15:49:15,"Start of some work on #1 

Rename select to slicer to be clearer (and goes well with the existing variable this.state.slice which is the result of calling slicer

Add binding for action creator, a tad different from what was suggested in the thread:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I haven't done merge yet as there are still things unclear imo (what happens if you get several part of the state etc) and I wasn't sure whether I missed something from the discussion so I'll add merge if everything is ok and clear
",Keats,2015-07-31 07:16:18
15,2015-07-30 21:12:45,"We should also probably not export the components and only have the provide/connect decorators exposed
",Keats,2015-07-31 07:16:18
15,2015-07-30 21:22:05,"Hey, thanks! I intended to start in a slightly different direction.

Can you please completely remove `<Connector>`?
You would need to move most logic from it inside `connect`.

After this chunk of work is ready, we can bikeshed on action creator binding a little bit more. :-)
",gaearon,2015-07-31 07:16:18
15,2015-07-30 23:56:43,"@Keats Not sure if this will help, but here is the implementation I did as a shim from fluxxor to redux to aid in us converting: https://gist.github.com/aaronjensen/95e505cdcbbe9d46019d

This skips the need for `Connector` and has merge (you can ignore the `subscriptions` parameter, that's fluxxor specific).

@gaearon one thing we noticed is that there are times when we want to pass the props to the selector function. Can you think of any reasons that'd be a bad idea?

Also, it looks like you envisioned not proxying the props along in the default merge, so your default merge would just be `(state, actions) => ({ ...state, ...actions })`. Is that right? Or should it include props? (in my experience, if you include props, state should probably be merged after props or confusing things happen with nested containers and liberal `{...this.props}` passing.
",aaronjensen,2015-07-31 07:16:18
15,2015-07-31 07:15:22,"> one thing we noticed is that there are times when we want to pass the props to the selector function. Can you think of any reasons that'd be a bad idea?

You can make your `merge` powered by [reselect](https://github.com/faassen/reselect) as well.. I think. Am I missing something? Then your third parameter can enjoy the same kind of memoization benefits.

> Also, it looks like you envisioned not proxying the props along in the default merge, so your default merge would just be (state, actions) => ({ ...state, ...actions }). Is that right?

I'd rather have `(state, actions, props) => ({ ...props, ...actions, ...state })`. (Thanks for the tip regarding props btw.)
",gaearon,2015-07-31 07:16:18
15,2015-07-31 07:16:18,"Thank you for the effort @Keats! I'm closing in favor of #16 because it's more feature complete and already avoids using `Connector`.
",gaearon,2015-07-31 07:16:18
14,2015-07-30 14:56:35,"Here's my proposed structure for the documentation. I'm including the original docs from Redux for reference as I move forward. The very top should have a brief ""quick start"" example, and the sub sections will go into more detail about each.
",jlogsdon,2015-07-31 15:18:25
14,2015-07-30 16:12:22,"This looks good to me. 
",gaearon,2015-07-31 15:18:25
14,2015-07-30 16:17:52,"Cool. I will work on filling out all the sections today/tomorrow.
",jlogsdon,2015-07-31 15:18:25
14,2015-07-30 18:33:10,"Thanks, I really appreciate it.
",gaearon,2015-07-31 15:18:25
14,2015-07-31 09:20:03,"@jlogsdon don't forget to look at #1 and #16 so you don't write documentations for something that's going to be removed/changed
",Keats,2015-07-31 15:18:25
14,2015-07-31 09:31:46,"@Keats @jlogsdon 

While #1 and #16 are important, it's more important to document the existing APIs right. I'm releasing Redux 1.0 very soon, and I'm going to have examples using React Redux 0.2.1. When we figure #16 out, we'll rewrite the docs, but it might take another week or so. Documenting 0.2.1 is still very important because lots of projects depend on it.
",gaearon,2015-07-31 15:18:25
14,2015-07-31 13:48:44,"Thanks for pointing those out, but I am going to focus on the existing API for the reasons @gaearon said. The new API isn't quite ready, and having docs of the stable release will be very important for the Redux 1.0 release.

I'm working on expanding some of the sections right now and will have something to push up here today.
",jlogsdon,2015-07-31 15:18:25
14,2015-07-31 14:48:55,"Here we go. The ""Child must be a function"" section needs to be expanded, but I am not familiar enough with the issue myself and couldn't find any resources about it specifically. If I can get pointed to either the React issue or a fiddle showing the issue I can fill that part out.
",jlogsdon,2015-07-31 15:18:25
14,2015-07-31 15:18:27,"Awesome, thanks.
",gaearon,2015-07-31 15:18:25
13,2015-07-29 20:34:32,,nd0ut,2015-08-02 10:36:23
13,2015-07-31 06:59:15,"From my understanding, you're porting the tests from Redux 1.0 alpha to 1.0 RC?
Let's hold this off for a while because there's already work on tweaking the API itself.
",gaearon,2015-08-02 10:36:23
12,2015-07-27 23:34:24,"I have been hunting a bug that turns out to have been caused by the fact that Connector shallowly compares the current slice to the next. The diffs buried deep in a slice doesn't trigger updates in the connected components because of this. For example:

Before:

<S_CODE_TOKEN>

After:

<S_CODE_TOKEN>

...no updates. 

I know I can do `@connect(state => state.MapReducer)` but I also want the component to receive the state from other reducers. Any tips for me?
",volkanunsal,2015-07-27 23:46:59
12,2015-07-27 23:37:19,"Unless you're mutating inside your reducer (which you shouldn't do), your `MapReducer` object will be different every time, and `<Connector>` will work correctly. What's your `MapReducer` code like?
",gaearon,2015-07-27 23:46:59
12,2015-07-27 23:39:13,"> Unless you're mutating inside your reducer (which you shouldn't do), your MapReducer object will be different every time,

Hm... this may be the case. Here is what I'm doing:

<S_CODE_TOKEN>
",volkanunsal,2015-07-27 23:46:59
12,2015-07-27 23:39:35,"For example

<S_CODE_TOKEN>

is wrong,

<S_CODE_TOKEN>

is correct.
",gaearon,2015-07-27 23:46:59
12,2015-07-27 23:46:59,"Yup, that fixes it. I made a rookie mistake. :tired_face: 
",volkanunsal,2015-07-27 23:46:59
12,2015-07-28 00:41:42,"No problem!
",gaearon,2015-07-27 23:46:59
11,2015-07-27 18:21:52,,dariocravero,2015-07-27 19:05:22
11,2015-07-27 19:05:27,"Whoops, thansk.
",gaearon,2015-07-27 19:05:22
11,2015-07-27 19:28:35,":)

On Mon, 27 Jul 2015 20:05 Dan Abramov notifications@github.com wrote:

> Whoops, thansk.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/gaearon/react-redux/pull/11#issuecomment-125307833.
",dariocravero,2015-07-27 19:05:22
10,2015-07-27 14:25:02,"I was using react-native@0.8.0-rc with no issues, then I upgraded to the full release and now I'm getting this error: `dispatch is not a function. (In ‘dispatch(actionCreator.apply(undefined, arguments))’, ‘dispatch’ is undefined)`

~~When I downgrade back to react-native@0.8.0-rc, it works fine and goes away. I have no idea what changed. Maybe it's a react-native issue?~~

These are my containers... I can provide more if needed. Right now it's pretty basic, mostly just following the examples.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

**EDIT**: now downgrading doesn't work. I reverted my app to the exact same state before and it doesn't work. `dispatch is not a function`. No idea what suddenly changed.
",dubert,2015-07-27 16:01:40
10,2015-07-27 15:42:26,"Using the Connector component works:

<S_CODE_TOKEN>
",dubert,2015-07-27 16:01:40
10,2015-07-27 16:01:40,"It's a babel.js bug

https://github.com/babel/babel/issues/2086
",dubert,2015-07-27 16:01:40
9,2015-07-23 19:23:22,"Seems like there's an extra file in `dist` right now because we don't clean before build.
",gaearon,2015-08-07 09:51:53
9,2015-08-02 00:31:09,"I can switch react-redux to use npm tasks like redux, if you like. 
That will take of this extra build as well.
",mikekidder,2015-08-07 09:51:53
9,2015-08-02 18:06:06,"Yes, this would be appreciated. 
",gaearon,2015-08-07 09:51:53
9,2015-08-02 22:47:02,"PR #19 is ready for review...
",mikekidder,2015-08-07 09:51:53
9,2015-08-07 09:51:53,"Fixed by #19.
",gaearon,2015-08-07 09:51:53
8,2015-07-22 23:19:07,"This isn't a common use case but the connect decorator breaks the case when a parent component needs to call a child component's functions as documented here: https://facebook.github.io/react/tips/expose-component-functions.html

I agree it's better to handle these situations using flux or props but was curious to see whether or not this incompatibility can be avoided.  
",ZGF4,2015-07-31 20:37:21
8,2015-07-31 20:37:21,"We've decided to expose a way to access the instance (via a `getUnderlyingRef()` method). This will be in our API revamp from #16.
",gaearon,2015-07-31 20:37:21
7,2015-07-20 22:05:04,"So I've been having the hardest time integrating this with React Router. Does anyone have any tips on this? Here is how I am trying to initialize the router now, and it seems to lose the context in the children of the Page component:

<S_CODE_TOKEN>

And here is the warning I get:

<S_CODE_TOKEN>
",volkanunsal,2015-07-22 00:16:28
7,2015-07-20 23:38:26,"I just checked and it works fine for me.
My best bet is you have duplicate Reacts so they don't recognize each other's context.

Make sure you don't have

<S_CODE_TOKEN>

and only have `node_modules/react`.
",gaearon,2015-07-22 00:16:28
7,2015-07-21 10:59:32,"My limited understanding is that react-router is the parent for your page components rather than the app wrapper.

We're using a newer version of react router and hit a similar thing with react-intl but this should still apply:

1) We extend the router class to put the objects from props onto the context

<S_CODE_TOKEN>

2) We use the above router rather than the one supplied by react-router and pass what we want in the context as a prop to the router

<S_CODE_TOKEN>
",rob-mccann,2015-07-22 00:16:28
7,2015-07-22 00:16:26,"I think this was a duplicate Reacts issue. Thanks for the help! :+1: 
",volkanunsal,2015-07-22 00:16:28
6,2015-07-17 08:09:26,"Hi, I'm using the connector to a ES6 class. I get my data but a warning on the propType. ""Warning: Failed propType: Required prop `data` was not specified in `Home`. Check the render method of `Router`.""

I tried enabling es7.classProperties and move to static propTypes = ... That got rid of the warning but I rather stay on ES6 and only the ES7 features that i really want (like es7.decorators). Any ideas?

<S_CODE_TOKEN>
",badtant,2015-07-17 11:43:27
6,2015-07-17 11:20:00,"When you use the `@connect()` decorator, your `Info` class is decorated as a `ConnectorDecorator` component.

When you then set `Info.propTypes`, you’re actually setting those prop types on the Connector, not on your Info component. So React is enforcing the props in the wrong place!

Instead, use an `InfoContainer`. I’d say this is a best practice in general, as it keeps your `Info` component as a “dumb component”, keeping the connected component separate. I do this even though I use static properties.

<S_CODE_TOKEN>

Or, you could probably do this (which is less extensible)

<S_CODE_TOKEN>
",danharper,2015-07-17 11:43:27
6,2015-07-17 12:33:34,"Don't use inheritance please :-). I have never seen a justifiable case for it in React.
I think the easiest way out is just not to use decorators in this case.

<S_CODE_TOKEN>
",gaearon,2015-07-17 11:43:27
6,2016-08-05 16:39:41,"How about using static propTypes inside the connected component?

<S_CODE_TOKEN>
",blesswinsamuel,2015-07-17 11:43:27
6,2016-08-17 05:02:56,"@badtant A fix I just discovered, which allows you to use the decorator:

<S_CODE_TOKEN>

Note the use of the static property `WrappedComponent`, which is ""The original component class passed to connect()"", and can be found in the documentation here: https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options
",joshmanderson,2015-07-17 11:43:27
6,2016-08-17 05:08:22,"@blesswinsamuel In regards to your example using static propTypes...
Does that work for you? Using static propTypes as you have done there still gives me the same warning messages...

**EDIT:**
I got it to work correctly with no warnings using the `connect` decorator and `static propTypes`.
My problem was babel related... I had the `transform-class-properties` plugin listed before the `transform-decorators-legacy` plugin.

`transform-decorators-legacy` **must** come before `transform-class-properties` to be able to use the `connect` decorator and `static propTypes` together (note that there are other issues that occur, entirely unrelated to redux, if you specify the order of the plugins incorrectly).
",joshmanderson,2015-07-17 11:43:27
5,2015-07-17 05:10:04,"Hey there,

Redux is great. You all have done an awesome job finding a simple foundation for lots of things to be built on. I like that I can pretty much do anything I want, while still (theoretically) getting the benefit of everything like various devtools and debugging plugins. Great job!

I've been dwelling the past few days on a few personal customizations that I'm going to use, and I thought you all would be interested in one thing specifically. I'm not pushing for any changes to be integrated here because I know there's been a ton of discussion about the current API. But who knows, maybe you'll like it.

Relay (abstractly, don't know the details yet) does a ton of cool stuff, like data syncing. But there's actually something simple that I really love about it: a component can specify its data dependencies as a simple static property on itself. This ""colocation"" is _really_ powerful in my opinion.

The current API with `@connect` is not too far off from something similar: a primitive query that sits close to the component. But first, I don't love decorators, but that's not a huge deal (it's just a function). The main thing that I don't love is having to think about the separation of smart/dumb components.

What I love seeing is this:

<S_CODE_TOKEN>

The `localQueries` static property specifies paths into the app state that this component depends on. You can specify as many queries as you like, and they will all be available on `props`, under the last name in the path. This is just a slight change, it's exactly the same as this:

<S_CODE_TOKEN>

But I think it's easier to read. Also, there's a big opportunity to support _other_ types of queries, like if you use [`DataScript`](https://github.com/tonsky/datascript) to store app state in, you could specify DataScript queries.

The other nice thing is you can statically specify actions:

<S_CODE_TOKEN>

And my connector will automatically bind them to the current store.

Now, I know you recommend separating smart/dumb components, and the one wrapped by `connect` would live elsewhere, but personally I think it feels like too much work. I still need to wrap my component with `connect`, but it doesn't take any parameters, and the query exists on the component itself.

If you want the ""dumb"" component version of `LoggedInUser`, it's simply available as `LoggedInUser.dumb`. My `connect` wrapper adds it as a static property, so you can use it for testing and stuff.

I created a repo where I'm experimenting with this stuff: https://github.com/jlongster/redux-experiments. Look in ""static-queries"" and you'll see a demo of this in action. There are links in the README to the main source and a demo of it running.

Note the `static-queries-datascript` example also. This is the same thing, but demonstrates specifying a DataScript query instead, and using DataScript as the app state instead of JS object.

Sorry that this is a long dump, I thought you might find this interesting though. Feel free to close this issue.
",jlongster,2015-07-17 23:30:39
5,2015-07-17 12:21:57,"Do I understand correctly that the main difference is “put it in statics” vs “put it in a parameter to `connect` call”?

I'm a bit wary of putting anything in `statics` because different libs have different wrappers and as soon as you combine them, some `statics` won't be copied over, and it's a pain. This is why I prefer to put these things into a parameter.

Am I missing something?
",gaearon,2015-07-17 23:30:39
5,2015-07-17 13:58:30,"Yep, as I mentioned cosmetically it's not too different from a parameter to `connect`. But the main difference is that you always export a ""connected"" component, i.e. you never have to separate smart/dumb components. Also I simply find it really intuitive to read the data dependencies of a component at the top of it.

I think there are several solutions to the smart/dumb problem, where you can still treat a ""smart"" component as a dumb one if needed (just give it some props and render it!).

With statics, I have the option to use react-router, traverse the components needed for a page, gather up data dependencies and actually tell the reducers to fetch it. This is very much like Relay, but a lot more dumb and useful for apps that just need simple data queries.

Also, Relay uses static props. I think we're going to see widespread usage of this pattern once Relay comes out. If a wrapper is supposed to copy static properties and it doesn't, that's a bug.

But also like I said, I'm perfectly happy writing this as a separate project, no changes needed here. Feel free to close the bug! I'll probably blog about it too. There's room for multiple solutions.
",jlongster,2015-07-17 23:30:39
5,2015-07-17 21:42:35,"@jlongster Relay no longer uses static props, but instead pass a 2nd argument to their createContainer API that contains the queries. Let me find the blog post that shows this... 
",phated,2015-07-17 23:30:39
5,2015-07-17 21:44:07,"@jlongster blog post with the newest API reference I've seen http://facebook.github.io/react/blog/2015/03/19/building-the-facebook-news-feed-with-relay.html
",phated,2015-07-17 23:30:39
5,2015-07-17 21:54:43,"@phated ah I had missed that! thanks. I really liked the statics approach, but maybe the disadvantages are stronger than I first thought.

It appears that those properties are still available statically on components though. The `Story` component in that article has a `getQuery` method, so you can just say `Story.getQuery('story')` to get that query for the `Story` component. This is needed for server-side rendering (and is just interesting for debugging).

It's possible they steered away from statics thought so that the can separate smart/dumb components. If you are using static properties, I don't see why you need to do that if you just make the dump component accessible on the `dumb` static property.

So anyway, I don't know what `react-redux` might learn from this but I'll probably just experiment outside of it for now and blog about it.
",jlongster,2015-07-17 23:30:39
5,2015-07-17 22:01:02,"@jlongster yeah, their higher-order component produced by `Relay.createContainer` has a few statics so they can traverse the tree, but I think they are straying away from statics on the underlying components.  I've been experimenting with an API similar to the linked Relay API over at https://github.com/iceddev/sovereign but I also want a different API that allows `handlers` (very similar to your actions and namedActions) to be passed in but be outside the re-render path.
",phated,2015-07-17 23:30:39
5,2015-07-17 22:15:47,"Neat! I'll ask them more about static props. All of this isn't really that different from what react-redux does right now. Main consideration is if dumb/smart components should really be in separate files (I'm trying to think of a reason they should be), and enabling arbitrary query languages (which is more appropriate for other react interfaces to redux).
",jlongster,2015-07-17 23:30:39
5,2015-07-17 22:20:10,"I have been experimenting with the difference between dumb/smart components in an application we are working on.  So far, I actually like to call them Stateless Components and Views.  Stateless Components can be dropped into something like https://github.com/skidding/cosmos for viewing, demos, etc and Views are components that are wrapped in `sovereign` or `react-redux/connect` and pass stateful data to the Stateless Components that make up its render method.  I have also been told the View could be called a Controller Component but I don't know how I feel about that.
",phated,2015-07-17 23:30:39
5,2015-07-17 22:59:01,"@jlongster Relay originally used statics + a mixin, but we moved to HOCs for a few reasons. Our goal was to have dumb components receive their data as `props`, but that meant one of two options:
- The component somehow resolves its _own_ data and updates its own props (an anti-pattern in React). Re-rendering requires using private APIs (because you can't just `setState`).
- Have _some_ parent component intercepts the props, merge the results of the queries, and pass the merged props to the component. It can also subscribe for data changes and re-render when necessary.

Option 1 requires reaching into React internals and will not be supported going forward. It also complicates the component itself with subscription logic. The only option is for the parent to pass the data in. _Without_ a HOC - if you just use components with static properties -  every component would have to resolve all the data for its children and keep them updated. Components become much more complicated to reason about, because for example `<Feed>` has to handle its own logic, as well as the logic to update all of the `<Story>`s that it composes whenever their data changes. In short, dumb components get really complicated.

HOCs allow removing this complex, async data-resolution logic and state-machinery from the dumb components, making them much easier to reason about and test.

Another advantage is each type of component will always receive the same type of data:
- smart components receive a ""pointer"" (ex: which story to render, perhaps just an `id`)
- dumb components receive data (ex: the story data as `query(id)`)

For Relay specifically, we typically have one file per component with the following:
1. require statements
2. dumb component (render + event handling)
3. container (queries)
4. styles (eg in React Native)
",josephsavona,2015-07-17 23:30:39
5,2015-07-17 23:05:28,"@josephsavona thanks for much for explaining! to be clear, I'm not advocating for not using a HOC. In fact my current approach does this: https://github.com/jlongster/redux-experiments/blob/master/static-queries/connect.js#L13. `connect` returns a new component. The difference is I pick off the query from the static property of the dumb component. The dumb component doesn't have to do anything else, it just uses props, so if it's rendered from a smart component it will be live data, otherwise it's just props. Basically: I use static props but _not_ a mixin.

However, it seems like everyone is moving towards declaring the queries outside the component, so I'll probably just do that then. :)

I'm glad to hear you still use one file per component; what I wouldn't want to do is declare a dumb component is one place and a smart one in another file. Do you only export the container? If so, how do you access the dumb component if you want it (for testing or something)?
",jlongster,2015-07-17 23:30:39
5,2015-07-17 23:18:21,"@jlongster gotcha, that makes sense. It definitely seems like the choice of using a static property or an argument to the HOC function is just a matter of preference. 

It's up to developers what they want to export - just the container or both - though we typically export only the container.
",josephsavona,2015-07-17 23:30:39
5,2015-07-17 23:21:08,"@jlongster @josephsavona I would think you could mock the `createContainer` method to just return the dumb component for testing
",phated,2015-07-17 23:30:39
5,2015-07-17 23:30:39,"Yep! I actually stuck the dumb component as a static property: https://github.com/jlongster/redux-experiments/blob/master/static-queries/connect.js#L15 but mocking may be better.

Thanks for talking this through folks, I learned a lot. I'm going to close this issue because I think the things I want to do now don't really affect anything in `react-redux`, as I'm interested in some basic data fetching on top of the `select`-style stuff.
",jlongster,2015-07-17 23:30:39
5,2015-07-17 23:42:12,"Thanks for talking this through here anyway! (And feel free to come back with more ideas.)
",gaearon,2015-07-17 23:30:39
4,2015-07-14 06:44:51,"Installing react-redux with React Native ends up installing web React because npm automatically installs peer dependencies (until npm 3.0 is here). Likewise it'd be noisy if react-native were listed under the peer dependencies when most people don't need it. One day this won't be an issue anymore React splits into three pieces -- react, react-dom, react-native w/react as an external dependency.

(I understand if you don't want to take this PR especially when React 0.14 is out and parent v owner context becomes an issue...)
",ide,2015-07-14 13:18:51
4,2015-07-14 13:19:10,"OK, that's sensible.
I'll add peerDep _after_ 0.14 is released (because we'll depend on parent context & package split).
",gaearon,2015-07-14 13:18:51
4,2015-07-14 13:22:15,"Out in 0.2.2
",gaearon,2015-07-14 13:18:51
4,2016-04-21 08:24:29,"Hi, @gaearon  In npm3  peerDependencies  will not install in node_modules.
And this will  not transform react in react-redux by browserify-shim.
",Tankpt,2015-07-14 13:18:51
4,2016-04-21 11:27:43,"Not sure what you are referring to. Peer dependency has since been added. It won't install React—this is up to you to depend on it, as your app should depend on React anyway. And I don't see how this is related to Browserify. 
",gaearon,2015-07-14 13:18:51
4,2016-04-21 13:06:54,"Thanks for your reply.

I try to package my code and external React etcs. And every thing was ok except the react-redux. 

browserify-shim Issues is https://github.com/thlorenz/browserify-shim/issues/209. 
",Tankpt,2015-07-14 13:18:51
4,2016-04-21 14:04:16,"Thanks, this clarifies it. Likely an issue on their side.
Why do you use externals for React and Redux though? They are compatible with CommonJS just fine. And you can use UMD builds if you really need them as separate files. 
",gaearon,2015-07-14 13:18:51
3,2015-07-14 00:41:23,"Moving https://github.com/gaearon/redux/issues/219 here because the basic Redux package is now unrelated to React or DOM.
",gaearon,2015-08-07 09:55:40
3,2015-08-07 09:55:40,"Whatever it was, we're not working with DOM nodes directly so I can hardly imagine this being ours.
",gaearon,2015-08-07 09:55:40
2,2015-07-12 23:38:34,"This is to discuss https://github.com/gaearon/redux/pull/204 which is not relevant to Redux repo anymore but relevant to this repo.

Might want to take another look at it after finishing with #1.
",gaearon,2015-08-07 09:55:04
2,2015-08-07 09:55:04,"Not relevant anymore because of #16.
",gaearon,2015-08-07 09:55:04
2,2015-08-07 10:51:48,"Actually, still relevant, but I'm convinced we're doing it for good reasons: https://github.com/gaearon/redux/pull/204#issuecomment-128671606.
",gaearon,2015-08-07 09:55:04
1,2015-07-11 22:34:38,"This API is taken from Redux `<Provider>`, `<Connector>`, `@provide`, `@connect`.
Right now I don't have examples in this repo but it matches what you've seen in Redux so far.

It's the best we've got now, but I think we can do better!

Common pain points:
- Not intuitive how way to separate smart and dumb components with `<Connector>`, `@connect`
- You have to manually bind action creators with `bindActionCreators` helper which [some don't like](https://github.com/gaearon/redux/pull/86)
- Too much nesting for small examples (`<Provider>`, `<Connector>` both need function children)

Let's go wild here. Post your alternative API suggestions.

They should satisfy the following criteria:
- Some component at the root must hold the `store` instance. (Akin to `<Provider>`)
- It should be possible to connect to state no matter how deep in the tree
- It should be possible to select the state you're interested in with a `select` function
- Smart / dumb components separation needs to be encouraged
- There should be one obvious way to separate smart / dumb components
- It should be obvious how to turn your functions into action creators
- Smart components should probably be able to react to updates to the state in `componentDidUpdate`
- Smart components' `select` function needs to be able to take their props into account
- Smart component should be able to do something before/after dumb component dispatches an action
- We should have `shouldComponentUpdate` wherever we can
",gaearon,2015-08-07 10:05:26
1,2015-07-12 01:37:50,"For example, we could drop `<Connector>` altogether and encourage people to use `@connect` decorator _as a function in another module_.

### Common case

A dumb component would look exactly as it does now.
A smart component would look like

<S_CODE_TOKEN>

Note that _the smart component doesn't have to be declared as a component_. Also note that `state => ...` and `dispatch => ...` is all it accepts.

### Case with more control

Want more customization? Want a `componentDidUpdate` hook? Want to select different things depending on the current props? Well, maybe you need to put a component in the middle then:

<S_CODE_TOKEN>

This is an “explicit” smart component that is required for more advanced cases.
Note that you didn't have to move files or refactor anything.
You just put a component in the middle into the same file.

### Shortcuts

Finally, we can still offer `bindActionCreators`, but with a `actionCreators => dispatch => obj` signature, so that the result is usable as the second parameter:

<S_CODE_TOKEN>

Perhaps we can even go further and bind automatically if an object is passed.

<S_CODE_TOKEN>

“Wait!”, I hear you say. What if an action depends on some prop from the state? Well, _in this case you put a component in the middle_ like I described above.

<S_CODE_TOKEN>

Any sufficiently complicated case => component in the middle. Easy!

Am I missing something?
",gaearon,2015-08-07 10:05:26
1,2015-07-12 01:42:31,":+1: I like this. It's essentially the same API as https://github.com/acdlite/redux-rx#createconnectorselectstate-render, just without streams.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 01:45:55,"Ah, only thing I see missing is a way to access props from owner — e.g. if you're wrapped by Relay.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 01:46:43,"Can you clarify?
Isn't this “Case with more control” above?
",gaearon,2015-08-07 10:05:26
1,2015-07-12 01:49:27,"That works, I'm just not sure I like it... Seems like too common a case to necessitate what is essentially two smart components.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 01:53:16,"Could we just pass the owner props as the second argument?
",acdlite,2015-08-07 10:05:26
1,2015-07-12 01:58:37,"From the user point of view they're just declaring one “real” component so no big deal IMO. On the other hand once you start selecting data in a tricky way, you begin to want finer control over perf optimizations, lifecycle hooks and maybe passing data down in a trickier way so it's likely you'll want a component anyway.

Once we start passing props to the state getter, we'll also probably want to pass props to the action creators getter. However, this forces us to bind on every prop change, which is a perf hit and unfriendly to `shouldComponentUpdate` optimizations down the rendering chain.

Example: you might want to read from props if you have a route handler that gets specific data related to the current route parameters. But then you _already_ want to fire an action in `componentWillReceiveProps` and `componentDidMount` to fetch the data! So you already need an intermediate component anyway.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 02:13:24,"So are you just removing the idea of a higher order component here? The signature of ""connect"" seems the same as what was proposed in #86 (at least the shorthand one you suggested where you just pass an object of actions as the second param). 
",skevy,2015-08-07 10:05:26
1,2015-07-12 02:13:49,"@gaearon 

> On the other hand once you start selecting data in a tricky way, you begin to want finer control over perf optimizations, lifecycle hooks and maybe passing data down in a trickier way so it's likely you'll want a component anyway.

I really think accessing props from the owner is a much more common case that using lifecycle hooks. Props passing is the fundamental contract of React. We'll soon live in a world where [pure functions are valid React components](https://github.com/facebook/react/pull/3995). The fewer ""smart"" components the better — creating class components will start to become a low-level implementation detai. Function components will be the new default. (At least that's what _should_ happen. We'll see if the community catches on.)

> However, this forces us to bind on every prop change, which is a perf hit and unfriendly to shouldComponentUpdate optimizations down the rendering chain.

This seems like a micro-optimization but okay. You could get around this by binding once if an object is passed (""bind automatically if an object is passed"") but bind every time if its a function.  Also if an action creator depends on a prop it's going to lead to updates further down the rendering chain, anyway.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 02:15:23,"^ The reason I say it's a micro-optimization is you're rarely going to pass action creators more than one level down the component tree.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 02:16:44,"@acdlite also, it's easy enough to prevent constant rebinding with memoization. We had explored this a bit in redux#86
",skevy,2015-08-07 10:05:26
1,2015-07-12 04:06:53,"I also agree with the sentiment that you'll rarely pass action creators more than one level down a component tree. This makes me question the over all usefulness of `bindActionCreators`. It seems to contrast the simplicity and obviousness of redux in general. It seems like it'd be clearer to just force users to pass `dispatch` down as a prop to every component, as described in the current readme file.

As a user, it seems like if `dispatch` is always needed to call an action, then maybe some way to remove the onus on the developer to pass `dispatch` down the tree. It'd be cool if you could just import your action methods and call them, no?
",ryancole,2015-08-07 10:05:26
1,2015-07-12 04:17:31,"@ryancole I still think `bindActionCreators()` (or some equivalent) is useful. You shouldn't pass `dispatch()` to a dumb component; you should bind it in a smart component first. E.g. your dumb components should look like this:

<S_CODE_TOKEN>

Rather than this:

<S_CODE_TOKEN>

It may seem like a trivial difference, but the first version is more separated from the implementation details of how it receives its callback. This leads to more scalable, maintainable, testable code.

> It'd be cool if you could just import your action methods and call them, no?

You have to bind them _somewhere_. Remember, action creators in Redux are simply pure functions. Either we bind them in smart components, or we have to bind them at store creation time, in which case we'd need some sort of API for accessing the bound components. Or you could use singletons, but yuck.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 04:25:42,"I like @gaearon's idea of passing action creators as the second param and auto-binding:

<S_CODE_TOKEN>

That way we only need to bind once, and the user doesn't need to worry about bindActionCreators.

I would amend that proposal to also support a second form, where you pass a function that maps to _unbound_ action creators:

<S_CODE_TOKEN>

that way you can access the store state and props, if needed. `bindActionCreators()` becomes an implementation detail.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 04:53:35,"@acdlite I agree with how you explained why `bindActionCreators` is needed, now. I wasn't thinking in terms of smart and dumb components.

Although something about the idea of a tree of components having most of the parent, outer-most components as smart components and then all the edge node components as dumb (this is what I think this smart / dumb component pattern lends itself to) kind of seems like a stink. I don't have an optimal pattern in mind, and I know smart / dumb components are a current popular pattern, but this as a pattern seems like it creates scenarios where if a dumb component is way down the tree you'll have to pass down action methods or dispatch all the way down the tree to get to it, thus making the components on the way to that component possibly carry along unneeded props just to satisfy their children. Maybe this is result of bad component tree design or something, though, on my part.
",ryancole,2015-08-07 10:05:26
1,2015-07-12 05:18:11,"Just thinking outside the box here, but what if bound actions were just a part of the state:

<S_CODE_TOKEN>

or, less radical:

<S_CODE_TOKEN>

It seems weird to me to do generate two separate objects that are ultimately merged into the child's props.
",aaronjensen,2015-08-07 10:05:26
1,2015-07-12 05:25:13,"@aaronjensen Regarding your first proposal:

First of all, the state object is not necessarily a plain JavaScript object. Redux makes no assumptions about the type of state returned from the reducer. For instance, you could use an Immutable Map.

Second of all, where are the action creators coming from? You say they're part of the state, but how did they get there? We'd need some sort of system for registering action creators at the global level.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 05:39:19,"@acdlite Yep, that's right. We have a system for registering reducers, it didn't seem a long stretch to have one for actions. And you're right re: state not being a plain JS object of course. In that case two arguments could come along: `(state, actions)` or actions could have their own reducer but that seems a little odd.

Tbh, I can't think of a particularly compelling reason for it other than slight convenience at that point at the cost of required registration.
",aaronjensen,2015-08-07 10:05:26
1,2015-07-12 05:42:53,"How is globally registering action creators more elegant than this?

<S_CODE_TOKEN>

EDIT: nevermind, I see that you changed your mind :)
",acdlite,2015-08-07 10:05:26
1,2015-07-12 06:11:44,"Yeah, that solution does look good. It didn't sit well with me at first that props were being combined in secret, but being able to handle the binding automatically makes it worth it. I also like your proposal for the second form which takes a function.

It'd probably be a bad idea to assume that all functions are action creators, yea?

<S_CODE_TOKEN>

If not, then it allows for everything w/ one argument:

<S_CODE_TOKEN>

You could also make it an n-arity function and just merge all of the objects (binding all functions automatically).

This only works if it's safe to assume all functions are action creators though...
",aaronjensen,2015-08-07 10:05:26
1,2015-07-12 09:17:51,"> we could drop `<Connector>` altogether and encourage people to use `@connect` decorator

I think it's a good idea, and we can do the same for `Provider`. This will simplify the API and create less confusion.

> This leads to more scalable, maintainable, testable code

@acdlite I was also thinking of dropping `bindActionCreators`, as it's just syntactic sugar for `dispatch(myAction())`, but you make a valid point.

And passing the actions as a second argument of `connect` makes it a good API, given that the binding becomes an implementation detail of the decorator and the user doesn't care about it.

One thing I would also like to have is **namespacing** props. Basically instead of just spreading the actions or whatever to `this.props`, we can have a `actions` object that contains all the actions, and just pass the object to `props`. Same thing could be done for `state`. I think this is important when you start having other data in `props` (e.g.: router) and helps avoiding possible conflicts when merging props.
Here an example:

<S_CODE_TOKEN>

Thoughts?
",emmenko,2015-08-07 10:05:26
1,2015-07-12 13:02:33,"> I really think accessing props from the owner is a much more common case that using lifecycle hooks. 

Generally connecting to Redux should be done at route handler level, and in this case you need the hooks too. Smart components close to the top level rarely receive props that somehow uniquely identify them, so even if they have props, I doubt these props are so relevant to selecting the state. For example, you won't connect `<TodoItem>`—you'll probably connect the whole `<TodoList>` in which case props are irrelevant, as you want to select the whole related slice of state.

Can you please help me by providing a few examples where props are important at the connect level?

> This seems like a micro-optimization

It's really not. :-) It _seems_ like a micro-optimization but it's the beginning of death by a thousand cuts. Redux connector sits close to the top of the application, and if at this level we're getting new functions on every prop change, **no component down the chain can benefit from `shouldComponentUpdate`**. The whole subtree is contaminated by a few changing functions.

Surely you won't see this problem at the beginning, but as soon as you get a perf bottleneck in one of your components, adding `PureRenderMixin` to it won't “just work” anymore because Redux rebinds these actions on every prop change. We don't want people to end up in this situation.

> You could get around this by binding once if an object is passed (""bind automatically if an object is passed"") but bind every time if its a function.

I can.. But then changing two seemingly equivalent signatures will have bad perf consequences for the whole rendering chain. It's too easy to make this mistake and later have no idea how to optimize your app because `shouldComponentUpdate` stopped helping anywhere down the chain.

On the other hand, if we force user to create a component, this won't be a problem, as they will pass the component's functions down. And the component's functions can look into props just fine.

> Also if an action creator depends on a prop it's going to lead to updates further down the rendering chain, anyway.

Yes, but in a way totally manageable by `shouldComponentUpdate`! If `unrelatedToHeavyComponents` state changes too often, but `<HeavyComponents>` down the chain accept `increment`, they won't update every time `unrelatedToHeavyComponents` changes. On the other hand, if we go with binding on prop change, `<HeavyComponents>` will receive new `increment` every time `unrelatedToHeavyComponents` changes and they'll have to re-render.  **We don't know for sure which props are used by which action creators.** I still think never binding is the easiest solution. It's not too hard to write a component, and you're in full control if you do.

> ^ The reason I say it's a micro-optimization is you're rarely going to pass action creators more than one level down the component tree.

Can you elaborate on that? I usually pass them several levels down (at some point they turn into dumb `on*` props but I still pass them down).

> it's easy enough to prevent constant rebinding with memoization

Memoization only avoids “rebind on every render” in favor of “rebind on every prop change”. It's certainly better than nothing, but worse than “never rebind”.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 13:04:07,"@emmenko Namespacing will also kill `shouldComponentUpdate` optimizations because you can't shallowly compare props anymore and nobody will write code to handle namespaces separately.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 13:20:36,"@gaearon right, haven't consider this. I guess there's no much way around it then...
",emmenko,2015-08-07 10:05:26
1,2015-07-12 13:20:45,"How about we add a third parameter: `merge`.

Default:

<S_CODE_TOKEN>

But you can also...

<S_CODE_TOKEN>

This gives you the same control, but any binding is explicit and performed by you.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 13:28:15,"In fact as long as you don't care for lifecycle hooks you can do this:

<S_CODE_TOKEN>

Binding is performed by you instead of the library, so you can easily find where it happens if you have `shouldComponentUpdate` problems. If this begins to work bad performance-wise, you have a clear upgrade path: turn `merge` function into a component.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 13:37:45,"So to be clear, `connect` would have following signature now?

<S_CODE_TOKEN>

> This gives you the same control, but any binding is explicit and performed by you.

Not sure exactly what do you mean by `binding` though. This has nothing to do with ""binding the dispatch"", right?

> you have a clear upgrade path: turn `merge` function into a component

You mean by putting a component in the middle like in your first example? Or do you mean something else?

Thanks!
",emmenko,2015-08-07 10:05:26
1,2015-07-12 13:38:53,"You said above that ""connecting"" components using usually happens at or near the route handler level.

I wholeheartedly agree with this, and is definitely what I've experienced in general. When you bind to Redux (or really, binding to any other Flux library) too far down, then changes are difficult to trace and weird things start to happen.

However, that doesn't mean that you wouldn't want to provide the action creators deeper in the tree. That leads me to believe that maybe we can keep ""connect"" simple - don't worry about binding any action creators with it - and then introduce some other helper that can be a convienence to bind action creators on a component level.

I worry that connect is becoming too heavy, and originally I really liked how simple connect was to understand. It's almost self-documenting. 
",skevy,2015-08-07 10:05:26
1,2015-07-12 13:45:21,"An example: if I have a <TodoList>, obviously I want to bind to Redux near the top. Perhaps with the <TodoList> component itself. But what if (because I'm making a sufficiently complicated TodoList) I have the button that I want to check off the todo three levels deeper. In that case, if I'm not connecting the component that deep (which would be silly anyway), I would have to pass ""dispatch"" down three levels explicitly in props so that I could call the action creator when the button is clicked.

The only thing I really want to get around here is just that explicit passing. I think the dispatching is an implementation detail (albeit an important one). As the user of Redux, I just want to be able to call my action creator, not pass dispatch three layers deep explicitly through props.
",skevy,2015-08-07 10:05:26
1,2015-07-12 14:04:36,"> So to be clear, connect would have following signature now?
> 
> <S_CODE_TOKEN>

To be honest I'd still rather go with:

<S_CODE_TOKEN>

The reason I don't want “magic” behavior for objects is people will see this once and use everywhere. It won't be obvious that you don't _have to_ pass an object.

In most cases I'll do this:

<S_CODE_TOKEN>

But there are cases where another option is nicer, for example:

<S_CODE_TOKEN>

See, I might not want binding a particular set of action creators at all!

Or maybe [parameterized actions](https://github.com/gaearon/redux/issues/168):

<S_CODE_TOKEN>

(Again, this is not super performant but my conscience is clear because binding occurs in user code.)

So I'd rather not have the shortcut, and instead force user to understand how `bindActionCreator` works as a utility. This goes in line with some other shortcuts we're removing in Redux 1.0 API in favor of explicit equivalents.

> Not sure exactly what do you mean by binding though. This has nothing to do with ""binding the dispatch"", right?

Why, that's exactly what I mean :-). In my example, `increment: (...args) => actions.increment(props.counterId, ...args)` is akin to function binding, but it's performed in your code instead of library code, so it's easier to find this as a perf regression culprit.

> You mean by putting a component in the middle like in your first example? Or do you mean something else?

Yes. As soon as you have perf problems you just “upgrade” (or maybe “downgrade” :-) your function to a proper component. It's similar to how you'd probably “upgrade” pure functions to components after React 0.14 if there are some perf optimizations you can't do in a pure function for whatever reason.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 14:09:34,"@gaearon @acdlite considering another approach, what would be the pros / cons of using `context`?

Currently we have `getState` and `dispatch` there. Would it make sense to have also `getActions`? Then you don't have to pass them around anymore via `props`, you can just get them from the `context`. This would also keep `connect` a simple component that subscribes to changes.

I don't know, just thinking out loud... 
",emmenko,2015-08-07 10:05:26
1,2015-07-12 14:13:01,"@emmenko this is kind of what I'm getting at as well, but admittedly have not though through possible cons of the ""context"" idea. 
",skevy,2015-08-07 10:05:26
1,2015-07-12 14:13:08,"> However, that doesn't mean that you wouldn't want to provide the action creators deeper in the tree. 

I think binding action creators at different tree levels is an anti-pattern. You should strive to do this at the top. Passing additional props as callbacks is really what React is all about.

You can always get around it by having `connect(() => ({}), bindActionCreators(MyActions))` in the middle of the tree but it looks weird and I think that's a good thing, as it will encourage people to follow React's explicit way.

> I think the dispatching is an implementation detail (albeit an important one). As the user of Redux, I just want to be able to call my action creator, not pass dispatch three layers deep explicitly through props.
> 
> That leads me to believe that maybe we can keep ""connect"" simple - don't worry about binding any action creators with it - and then introduce some other helper that can be a convienence to bind action creators on a component level.

I used to think about `connect` as a way of subscribing to changes, but I don't anymore. **I think `connect` should be the boundary between Redux-aware and Redux-unaware parts of your component tree.** Therefore it fits it to be slightly more powerful, so that components below are completely untied of Redux. Now I think that wherever you materialize the state, you should materialize the actions too.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 14:15:24,"> Would it make sense to have also getActions? 

Action creators are not a core concept of Redux. There is no reason for them to live at the top. They are just convenience. Sometimes you want [a factory of action creators](https://github.com/gaearon/redux/issues/168) that depends on some props. Can't do this at the very top.

After all if you _really_ want those action creators to be in context, you can do this yourself: https://gist.github.com/mattapperson/db45538f14d6de52f6ad

But it's on your conscience. :-)
",gaearon,2015-08-07 10:05:26
1,2015-07-12 14:16:35,"I'd love to hear some thoughts from @faassen here.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 14:19:23,"Also at this point `wrapActionCreators` might be a better naming than `bindActionCreators`.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 14:24:46,"> After all if you really want those action creators to be in context, you can do this yourself

Sure, I'm just always a bit afraid how much is it ok to use `context`. But just to understand, **if actions were a core concept**, would it have been ok to put them into `context` and just access them wherever I want?

Anyway, are we heading now towards this `connect` signature and give it more responsibilities, as you said?

<S_CODE_TOKEN>
",emmenko,2015-08-07 10:05:26
1,2015-07-12 14:40:19,"> But just to understand, if actions were a core concept, would it have been ok to put them into context and just access them wherever I want?

Can you rephrase? I don't understand what exactly you are asking.

> Anyway, are we heading now towards this connect signature and give it more responsibilities, as you said?

This signature is what feels right to me at the moment. Waiting for @acdlite to take a look.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 14:47:53,"In fact this is more correct signature:

<S_CODE_TOKEN>

We don't really care if they are objects until the third function is applied.

For example, you can do:

<S_CODE_TOKEN>

or:

<S_CODE_TOKEN>

but also:

<S_CODE_TOKEN>

as before.
",gaearon,2015-08-07 10:05:26
1,2015-07-12 14:50:34,"Just wanted to know how much one is it ok to use context and if it would have been a good approach, in case actions were considered an important part of redux.
Just for my understanding of designing a good API :)

Hope it's clear now, thanks!
",emmenko,2015-08-07 10:05:26
1,2015-07-12 15:09:13,"Named arguments:

#### Vanilla form

<S_CODE_TOKEN>

#### wrapActionCreators sugar

<S_CODE_TOKEN>

#### I want just the state

<S_CODE_TOKEN>

#### I want just some action creators

<S_CODE_TOKEN>

#### I want just the dispatch function

<S_CODE_TOKEN>

#### I want to pass several action creator groups down

<S_CODE_TOKEN>

#### I want to merge several action creator groups

<S_CODE_TOKEN>

#### I want to pass actions down in a single object

<S_CODE_TOKEN>

#### I want to use props for getting state and tweaking actions

<S_CODE_TOKEN>
",gaearon,2015-08-07 10:05:26
1,2015-07-12 15:19:25,"Normal arguments:

#### Vanilla form

<S_CODE_TOKEN>

#### wrapActionCreators sugar

<S_CODE_TOKEN>

#### I want just the state

<S_CODE_TOKEN>

#### I want just some action creators

<S_CODE_TOKEN>

#### I want just the dispatch function

<S_CODE_TOKEN>

#### I want to pass several action creator groups down

<S_CODE_TOKEN>

#### I want to merge several action creator groups

<S_CODE_TOKEN>

#### I want to pass actions down in a single object

<S_CODE_TOKEN>

#### I want to use props for getting state and tweaking actions

<S_CODE_TOKEN>
",gaearon,2015-08-07 10:05:26
1,2015-07-12 15:20:03,"I like this! :+1:
",emmenko,2015-08-07 10:05:26
1,2015-07-12 15:21:26,"I mean the named args (sorry, didn't see you posted the other approach)
",emmenko,2015-08-07 10:05:26
1,2015-07-12 15:23:48,"I prefer the second version because:
- We can avoid calling them `actions` (because they are `actionCreators` but that's tedious to type)
- `merge` argument looks more naturally as the third argument
- `null` is like an explicit cry for “don't subscribe!”
",gaearon,2015-08-07 10:05:26
1,2015-07-12 15:45:20,":+1: I prefer the second version, too. It addresses my primary concern from above, which is to access to owner props without needing an extra smart component in the middle, without sacrificing default performance optimizations.
",acdlite,2015-08-07 10:05:26
1,2015-07-12 16:05:14,"@acdlite 

If we agree on that, what do you think is reasonable release-wise? We could release this version as `react-redux@1.0.0`, or we could release the current version as 1.0 but jump to 2.0 with this proposal.

It probably makes sense to use the new version in new docs..
",gaearon,2015-08-07 10:05:26
1,2015-07-12 18:29:05,"@gaearon do you think `connect` is still a correct name for the new signature?
",emmenko,2015-08-07 10:05:26
1,2015-07-12 19:36:54,"@gaearon I think we should hold of moving react-redux to 1.0 for a while until we've settled on the new API. The current API is not a 1.0 in my view, and I don't see any problem in keeping react-redux at 0.12 (or whatever) even while Redux gets a 1.0 release. That's the advantage of separating the projects.
",acdlite,2015-08-07 10:05:26
1,2015-07-13 02:23:29,"Random musings...

`<Provider>` is a bit generic, would `<Redux>` work? For somebody new to the framework, it helps them immediately get oriented.

I like 'connect', as in 'connect to Redux, the state manager.' Just brainstorming, but 'inject' might also work... inject (state and wrapped action creators).

Regarding: 

<S_CODE_TOKEN>

I know it's longer, but I think it would be better to use `actionCreators: wrapActionCreators(...)`. First, this is already the less-preferred, more typerific version of the proposed API. Second, elsewhere we are careful to differentiate between actions and action creators, so I think the value in maintaining the distinction in the API is worth the extra typing for those who want to use this more explicit syntax.

Also, in this version of the API, could we not just pass an array of actionCreators?

<S_CODE_TOKEN>

Regarding the `<Connector>` syntax, `select=` feels a little off for some reason. Hmmm, maybe it's an echo from using Ruby years ago, but `select` makes me feel like the function is filtering an enumeration, rather than just directly grabbing a slice of the passed in state parameter. Perhaps `slice` or `pick` or something along those lines. Then again we're passing in a function, so maybe the term should make that clear, so more like `slicer=` or `picker=`? Eg. the slicer function returns the slice of state we want access to.

Just out of curiosity, why was wrapActionCreators better than bindActionCreators?
",FAQinghere,2015-08-07 10:05:26
1,2015-07-13 12:09:18,"I don't like the `<Redux>`. I think it is confusing with v0.12 createRedux() (which wasn't a React component) and makes this component stand out too much. 

I am a big fan of the named params on the `connect`. I think that is less confusing and allows the user to specify the arguments in any order. It also allows for adding to the API later.

I also agree that `select` doesn't quite fit. My experience with `select` is linq in C# https://msdn.microsoft.com/en-us/library/bb397927.aspx (Ahh Microsoft!) I like slice or pick, those are familiar from a lot of the JS util libraries. What about `sliceFn` or `pickFn`? I know we have docs and type annotations coming, but it makes it very clear what it needs to be just by seeing the param name.

Edit: typo
",taylorhakes,2015-08-07 10:05:26
1,2015-07-13 16:16:10,"I like the general direction in which this is going -- it makes it possible to entirely keep any Redux related stuff out of plain React components, including the whole actions mechanism.

Getting props to tweak action creators is an important use case, I think, so it's important it's made easy. In hypermedia-based UIs you often pass URLs around as properties and then pass them into action creators Note that this is distinct from the parameterized action creator use case where you want to parameterize a whole bunch of related actions.

I'm not sure I fully understand the consequences of `merge` yet. Is the primary reason 'merge' is not the second argument (replacing the `actions` arg with a `dispatch` arg) for performance reasons or for usability reasons? If performance reasons, does this mean that any kind of parameterized action will degrade an application's performance because props vary more? Action tweaking in merge creates new functions, which could potentially cause props to be different. But should `merge` be called at all if the state and props haven't changed since the last time? Could `merge` be memoized?

`merge` is responsible for creating the entire prop object that goes into the underlying component. That makes it very flexible and I appreciate that, but I would like to explore approaches where the developer doesn't have to worry about all that. I'd like to support something like this:

<S_CODE_TOKEN>

You could write a higher order function that does this:

<S_CODE_TOKEN>

Are performance optimization opportunities lost this way?

From the readability perspective I have a slight preference for named parameters. But named parameters have the drawback that is supports some uses cases (like binding actions without state) I understand are less than optimal without signalling the developer (by requiring a `null` arg) that they are taking a suboptimal approach. Named parameters have the benefit of extensibility: it would make it easy to add a `tweak` parameter. But I think that's the kind of extensibility you don't want at this level. So I can see reasons for using normal arguments in this case.
",faassen,2015-08-07 10:05:26
1,2015-07-14 00:55:14,"I personally don't like binding actions creators at the top level and passing them, I cannot see how is that an anti-pattern. Your top component has to know too much about what the children need.

I prefer passing the `dispatch` function to my components, and have them call it directly by importing the action declaration themselves. In this way I can postpone the decision of what actions I need until I actually need to trigger one down the line. I can even pass the `dispatch` function to something else.

So please allow for this use case.
",sporto,2015-08-07 10:05:26
1,2015-07-14 10:31:58,":+1: for ""Normal arguments"" 
",vslinko,2015-08-07 10:05:26
1,2015-07-14 14:49:25,"Hey all,

I have what's probably a dumb question. I've understood and followed Flux for a long time, but I've never actually built a large app with it, so I don't have as much experience with advanced use cases. For server-side rendering, do you ever actually fire actions on the server? I'm not sure why you would, it seems like action firing is only in response to some external event.

Server-rendering seems like one of the main reasons to not create global action creators that are already bound to your store. Although, another argument is probably that it's clearer to list the actions that a component depends on. But I'm wondering when the former matters, if you don't fire actions on the server? I get that listing actions per-component is clearer though.
",jlongster,2015-08-07 10:05:26
1,2015-07-14 14:55:21,"@jlongster you definitely can fire actions on the server. For instance, what if you have an action that ""gets"" data. You may want to do that when bootstrapping a component for instance. And you'd want that to work on both the client and server.
",skevy,2015-08-07 10:05:26
1,2015-07-14 14:55:29,"Hey @jlongster, thanks for coming by!

> For server-side rendering, do you ever actually fire actions on the server? I'm not sure why you would, it seems like action firing is only in response to some external event.

You want to fire actions to prepare the stored state.
This way you can render actual state before sending it to the client.

> Server-rendering seems like one of the main reasons to not create global action creators that are already bound to your store.

Yes, this is the main reason why we don't bind right away.
",gaearon,2015-08-07 10:05:26
1,2015-07-14 14:56:57,"> I prefer passing the dispatch function to my components, and have them call it directly by importing the action declaration themselves. In this way I can postpone the decision of what actions I need until I actually need to trigger one down the line. I can even pass the dispatch function to something else.
> 
> So please allow for this use case

This use case is allowed by the current proposal. You can definitely grab `dispatch` and pass it down. I guess it comes down to how reusable you want your components to be, and how often the same component do different actions in different contexts. It depends on the app.
",gaearon,2015-08-07 10:05:26
1,2015-07-14 15:04:00,"@skevy @gaearon Thanks! I'm rewriting my blog admin to use Redux and finally making time to think through this.

Currently, all my components can define a static method which can fetch data (performed when I resolve all the routes and stuff), and this data is automatically available. Other than data fetching, are there any other use cases? I'm trying to reconcile Relay with this, and I see some opportunities. With Relay that data fetching happens automatically for you. Since Relay isn't released yet, I don't know how you perform updates, but I think the general flux-style flow of actions works for that.

If I solve the data fetching part, are there any other reasons why I'd need redux on the backend?

EDIT: May just have to wait for Relay, and I could just follow the patterns here and use Redux for data fetching too. Still thinking through.
",jlongster,2015-08-07 10:05:26
1,2015-07-14 15:08:00,"We def want to integrate with Relay when it's out.
Redux can then specialize in handling local state and complex local mutations.
",gaearon,2015-08-07 10:05:26
1,2015-07-22 12:42:26,"The bindActionsCreators and dispatch thing got me thinking a bit.
I'm currently creating my store in a dedicated file and bind all my actions creators at the same place (the lazy method :) ).

Something like that:

store.js

<S_CODE_TOKEN>

and just reference this module to call actions in smart components (this part could use a decorator to pass arbitrary data into props to make it more explicit that this is a smart component):

MyComponent.js

<S_CODE_TOKEN>

(Side note: I'm not the only one doing something like that, see https://github.com/jhewlett/react-reversi/blob/master/js/actions/gameActions.js)

That got me thinking, what would be the downside in removing `<Provider/>` and `@provide` and use the store instance directly in the @connect decorator like this:

MyComponent.js

<S_CODE_TOKEN>

Maybe I'm missing something (any advantages in having the store in context?) but it seems more simple than the current API and easier to explain, it's actually one level ""lower"" than the current API, and the current API could be rebuilt on this in a separate lib.

It could also be simplified a bit by using a method to enrich the store with the react connect method:

store.js

<S_CODE_TOKEN>

MyComponent.js

<S_CODE_TOKEN>

Any thoughs on this? It's just an idea I don't use React/redux much except for a toy project so I'm not really a reference in this area but it never hurt to share ideas.
",guillaume86,2015-08-07 10:05:26
1,2015-07-22 12:51:18,"`export default store;` is singletone.
Singletones doesn't work for universal apps, because on server each client needs personal store.
",vslinko,2015-08-07 10:05:26
1,2015-07-22 13:02:22,"Ha ok I see the advantage of having a short lived store instance in the components context in that case. 
",guillaume86,2015-08-07 10:05:26
1,2015-07-27 11:30:29,"Hey guys i love alternative API, so what format of it is available in redux-rc?
",quirinpa,2015-08-07 10:05:26
1,2015-07-27 11:58:06,"@quirinpa 

Redux 1.0 RC does not include React bindings. We separated them in this repository precisely because we want to iterate on them separately.

React-Redux 0.2.1 still has the old API. If you'd like to implement the API proposed here, you're welcome to send a PR! We can then publish it as 0.3.0.
",gaearon,2015-08-07 10:05:26
1,2015-07-27 12:09:36,"@gaearon Thanks man but i think i still i don't have the knowledge to :P you have developed awesomeness, thanks!
",quirinpa,2015-08-07 10:05:26
1,2015-07-27 14:17:04,"One small thought, but shouldn't:

<S_CODE_TOKEN>

be

<S_CODE_TOKEN>

Otherwise you would be firing the increment action immediately?
",ForbesLindesay,2015-08-07 10:05:26
1,2015-07-27 15:34:34,"@ForbesLindesay Right, my typo.
",gaearon,2015-08-07 10:05:26
1,2015-07-27 16:25:47,"Just a substitute until Keats solution is merged :P

<S_CODE_TOKEN>

**Edit**: I've made a few changes. It now supports the following;

<S_CODE_TOKEN>

@gaearon i'm probably doing something wrong and i'm not very confortable with git, so i'd rather hear from you before i send a PR... Cheers.

**Edit**: Now supports merge :)
",quirinpa,2015-08-07 10:05:26
1,2015-07-31 09:30:39,"Since we are removing Connector in #16, should we also remove Provider ?
This way this package only exposes 2 functions that can be used as decorators or plain functions.
",Keats,2015-08-07 10:05:26
1,2015-07-31 10:10:27,"@Keats Yeah we might. I haven't looked into it yet, want to get the Connector stuff sorted out first.
",gaearon,2015-08-07 10:05:26
1,2015-07-31 10:11:20,"@Keats To clarify, I don't propose anybody actually remove it before we discuss. There are many concerns: universal rendering, hot reloading, DevTools, etc, and we want to make sure we handle all these scenarios gracefully.
",gaearon,2015-08-07 10:05:26
1,2015-08-01 00:47:53,"I think we should remove `provide()`. It doesn't work for server rendering (store is different on each request). It also doesn't work for Redux DevTools because they need a separate provider. It locks you into bad patterns.

The only downside of `<Provider>` is this function-as-a-child gotcha. It will be solved in React 0.14, so I'm convinced that removing `provide()` is the way forward.
",gaearon,2015-08-07 10:05:26
1,2015-08-06 20:39:30,"Late to the conversation but wanted to add an alternative I haven't seen discussed for an action api. One thing I've noticed when writing my first couple redux apps is that redux does a fantastic job of getting almost all of the coupling of my model out of my components. I wanted to continue this trend by removing any coupling to the exact actions creators I'm invoking. The idea was to bind the actions to the dispatcher at the same/similar time that I ""bind"" the store to the react component tree. In this way I didn't need to import and/or know exactly which action creator I was invoking. I simply use it by name just like I use the state.

<S_CODE_TOKEN>

This is nice because action creators tend to store most of the business logic in the app and they often need things like api utils, etc. This pre-binding is a perfect opportunity to configure your action creators with things like an `apiUtils` object and then that stuff doesn't need to be known about in the view components and your action creator also doesn't need to be coupled to a specific `apiUtils` singleton like I see in many examples.

To be clear the `Provider` would be responsible for binding all actions passed into it to the store. This could be separated into a `StoreProvider` and `ActionProvider` if desired, and do not need to be done at the same time but I think that may be too much. The `Provider` then just adds the `store` and `actions` context values allowing `@connect` to access them.
",mmerickel,2015-08-07 10:05:26
1,2015-08-06 23:10:03,"I second the idea @mmerickel describes above. I was actually going to suggest exactly the same thing since I have been binding the actionCreators at the top level and passing them down. I'd love if actions could be ""selected"" in the same way as slices of state in the connect decorator. 

I've been staying away from using dispatch in my dumb components and instead just using pre-bound actionCreators from props, but I like that there is a very easy way in his sample above to get at the dispatcher. To me this supports both styles of working with actions, and because the api would be very similar to what is already understood for selecting state, it would reduce cognitive load required to start being productive with the react-redux bindings.
",danmartinez101,2015-08-07 10:05:26
1,2015-08-07 10:05:26,"@danmartinez101 @mmerickel 

One of the reasons I don't want to do this is because code splitting will be harder.
People are likely to keep wanting the same structure, and will do hacks to make it work with code splitting.
The current proposal works with code splitting with no modifications.

I feel this is more opinionated than I'm willing to go. I'm happy to see this explored in alternative bindings though!

Everyone, thanks for the discussion, let's continue in #16.
",gaearon,2015-08-07 10:05:26
1,2015-08-07 15:19:32,"@gaearon Can you clarify what you mean by code splitting? My assumption by exposing the `dispatch` to the action getter was that this would help if you didn't want to do `<Provider actions={actions}>`. Maybe exposing a binder instead of dispatch works better which seems quite similar to what your original proposals have been above.
",mmerickel,2015-08-07 10:05:26
1,2015-08-07 15:24:37,"@mmerickel Code splitting = when your app's modules are loaded by demand. As result, not all `actions` are available from the beginning.
",gaearon,2015-08-07 10:05:26
1,2015-08-07 15:26:37,"That's an issue with the single store as well isn't it? Presumably when you add reducers you can subscribe to that change and add actions as well, no?
",mmerickel,2015-08-07 10:05:26
