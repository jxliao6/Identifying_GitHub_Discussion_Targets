issue_num,datetime,body,login,close_date
877,2017-03-24 18:56:41,"Add some way to reset reference links in the lexer.

In order to achieve some better isolation when processing multiple pieces of markdown, we want to reset the link references in between runs otherwise references used in a previous message can leak to subsequent messages.

Currently when using the `Lexer`, we are achieving this by resetting an internal variable. But I'd rather just pass in an officially documented option to the lexer that would reset whenever it lexes. Here is an example of how we are currently resetting the lexing reference links:

<S_CODE_TOKEN>

---

### Example

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Without resetting references, the second piece of markdown will have the linked `1` reference leaked to it.

<S_CODE_TOKEN>



---

 - https://github.com/gitterHQ/gitter-markdown-processor/pull/7
 - https://github.com/gitterHQ/gitter/issues/1041

",MadLittleMods,
876,2017-03-22 00:38:51,"Typo fix: changes ""occured"" to **occurred**",thauburger,
875,2017-03-19 09:11:14,"## input
<S_CODE_TOKEN>
## output
<S_CODE_TOKEN>
[DEMO](http://jsbin.com/tiseceyafu/edit?js,console,output)
",374632897,
874,2017-03-18 14:14:11,"I'm having an issue where blockquotes aren't rendered using  marked. 

By considering the following:

    > This is a blockquote 

It's expected to be rendered as:

> This is a blockquote 

However, it's rendered as plain text with the following HTML:

    <p>This is a blockquote</p>

The issue seems to lie in the regular expression: `/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/`, found in the `marked.js` file, which doesn't match the line above. 

A proposed solution is to edit the regular expression to be: `/( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/` which would appear to solve the problem with only one caveat that if the ""empty"" line after the blockquote contains whitespace it will continue to match the proceding paragraphs as illustrated below.

<img width=""369"" alt=""screen shot 2017-03-18 at 3 07 47 pm"" src=""https://cloud.githubusercontent.com/assets/13367236/24072787/be7aee06-0bec-11e7-8961-34287d7f74dd.png"">

Also, I'm unsure if the proposed solution will break other parts of the codebase which is why I'm hesitant to open it as a pull request. 

If somebody does have insight into this issue, and is able to point out flaws in the reasoning above it would be greatly appreciated. 
",Kasperfred,
874,2017-03-20 17:34:11,++ Same issue here.,broskoski,
873,2017-03-17 17:06:02,"When writing a link inline without markdown formatting, such as http://www.google.com, it will automatically become a link. Can I change this behavior (I only want it rendered when prepended by `^` or `\s`), or alternatively, disable this feature?

I've tried overriding `autolink` in the renderer but it doesn't seem to change anything.",Redsandro,
872,2017-03-17 15:05:37,"After upgrading marked from 0.3.3 to 0.3.4 I noticed a different output for the following call:

<S_CODE_TOKEN>

This is was I got so far in marked 0.3.3 – which is also what I would expect:

<p><em><a href=""https://reddit.com/r/science/comments/5yde1e/its_official_time_crystals_are_a_new_state_of/"">https://reddit.com/r/science/comments/5yde1e/its_official_time_crystals_are_a_new_state_of/</a></em></p>

<S_CODE_TOKEN>

However, in marked 0.3.4 **and greater** the output becomes this:

<p>_<a href=""https://reddit.com/r/science/comments/5yde1e/its_official_time_crystals_are_a_new_state_of/_"">https://reddit.com/r/science/comments/5yde1e/its_official_time_crystals_are_a_new_state_of/_</a></p>

<S_CODE_TOKEN>

Please also note that Github’s markdown implementation behaves like 0.3.3:

_https://reddit.com/r/science/comments/5yde1e/its_official_time_crystals_are_a_new_state_of/_

",p3k,
871,2017-03-17 06:34:59,It's possible?,Dzhakhar,
870,2017-03-16 21:25:19,"Hello here.

One of my project dependency depend to marked, so I have a warning in my log during a npm install
<S_CODE_TOKEN>

Why `""preferGlobal"": true,` in package.json ?
https://github.com/chjj/marked/blob/master/package.json#L9",ryuran,
869,2017-03-14 00:34:50,"Reported by SourceClear:

https://www.sourceclear.com/registry/security/cross-site-scripting-xss-/javascript/sid-3349",scinos,2017-03-14 01:48:00
869,2017-03-14 00:52:54,"Please don't post a new bug ticket just because a tool reported it. Search for existing  and report if it has not been created. The details from sourceclear even list the PR.
 
There are already open tickets and a PR: 
https://github.com/chjj/marked/issues/863

https://github.com/chjj/marked/pull/844",matt-,2017-03-14 01:48:00
869,2017-03-14 01:42:00,"Well, technically there is no other open issue mentioning 'XSS', 'Security' or 'Sourceclear' in the title. Feel free to close this if you think it is a dupe.

Good to see that the issue is actually being resolved.
",scinos,2017-03-14 01:48:00
869,2017-03-14 01:47:59,"Technically if you search XSS you can find the issue I linked above (despite it's unfortunate title).
https://github.com/chjj/marked/search?q=xss&state=open&type=Issues&utf8=%E2%9C%93

Also if you actually read in the details of the sourceclear link you posted it links to the PR so no question this is a dupe.  ",matt-,2017-03-14 01:48:00
868,2017-03-12 09:48:18,"<S_CODE_TOKEN>

How do I escape?
",kgtkr,
867,2017-03-10 08:26:00,"TypeError: src.replace is not a function
Please report this to https://github.com/chjj/marked.
    at Lexer.lex (E:\myGit\node-blog\node_modules\marked\lib\marked.js:138:6)
    at Function.Lexer.lex (E:\myGit\node-blog\node_modules\marked\lib\marked.js:129:16)
    at marked (E:\myGit\node-blog\node_modules\marked\lib\marked.js:1219:31)
    at E:\myGit\node-blog\routes\posts.js:141:16
    at newTickHandler (E:\myGit\node-blog\node_modules\mpromise\lib\promise.js:234:18)
    at _combinedTickCallback (internal/process/next_tick.js:67:7)
    at process._tickCallback (internal/process/next_tick.js:98:9)",colagao,
866,2017-03-07 10:50:19,"Cannot read property 'replace' of undefined
Please report this to https://github.com/chjj/marked.
    at Lexer.lex (eval at <anonymous> (app.js:949), <anonymous>:138:5)
    at Function.Lexer.lex (eval at <anonymous> (app.js:949), <anonymous>:129:16)
    at marked (eval at <anonymous> (app.js:949), <anonymous>:1219:31)
    at VueComponent.compiledMarkdown (eval at <anonymous> (app.js:925), <anonymous>:21:53)
    at Watcher.get (eval at <anonymous> (app.js:730), <anonymous>:2414:25)
    at Watcher.evaluate (eval at <anonymous> (app.js:730), <anonymous>:2514:21)
    at VueComponent.computedGetter [as compiledMarkdown] (eval at <anonymous> (app.js:730), <anonymous>:2740:17)
    at Object.get (eval at <anonymous> (app.js:730), <anonymous>:1512:20)
    at Proxy.render (eval at <anonymous> (app.js:937), <anonymous>:15:30)
    at VueComponent.Vue._render (eval at <anonymous> (app.js:730), <anonymous>:3518:22)",zhirui1994,
866,2017-03-20 23:04:20,"I have the same issue when i try to use it in angular2 project. 

Any idea to solve this ? ",cmalaboeuf,
866,2017-03-24 00:49:28,"I am also experiencing this, in a React project built with Brunch (Phoenix framework). I only see it in production builds, I think it has to do with minification. ",brad-johnson-digisight,
865,2017-03-06 13:51:03,Is it possible to extend parser or renderer in this lib somehow? I like this lib and i just had a wish to add support of video in my project but didn't find the way to extend parser or even renderer.,dekhanov-vladislav-yumasoft,
864,2017-03-06 09:08:37,"I have tried this.
<S_CODE_TOKEN>

And I get <script/> in chrome debug mode.
But gist not display on the screen...",liu0fanyi,
863,2017-03-04 10:51:31,"✗ High severity vulnerability found on marked@0.3.6
- desc: Cross-site Scripting (XSS) via Data URIs
- info: https://snyk.io/vuln/npm:marked:20170112
- from: node_services@1.0.0 > marked@0.3.6
Fix: None available. Consider removing this dependency.

✗ High severity vulnerability found on marked@0.3.6
- desc: Cross-site Scripting (XSS) via Data URIs
- info: https://snyk.io/vuln/npm:marked:20170112
- from: node_services@1.0.0 > msee@0.1.2 > marked@0.3.6
Fix: None available. Consider removing this dependency.

✗ High severity vulnerability found on marked@0.3.6
- desc: Cross-site Scripting (XSS) via Data URIs
- info: https://snyk.io/vuln/npm:marked:20170112
- from: node_services@1.0.0 > npm-shrinkwrap@6.0.2 > msee@0.1.2 > marked@0.3.6
Fix: None available. Consider removing this dependency.",knoxcard,
863,2017-03-06 17:05:39,We are waiting for https://github.com/chjj/marked/pull/844 to be pushed by the maintainer. ,matt-,
863,2017-03-14 20:30:16,"I am keeping this one open until the change is pushed, but I wanted to rename the ticket to make it more search friendly. ",matt-,
862,2017-03-03 08:01:07,"Auto generating links for url in code block doesn't work properly when the url is followed by special characters. For example:

<S_CODE_TOKEN>
would generate a link for http://test.com&quote

GFM doesn't seem to require url in code block to be converted to links.",baonhan,
861,2017-02-28 14:19:48,"<S_CODE_TOKEN>

This element is not parsed/rendered , is there any settings I need update for iframe? Thanks.",naivefun,
860,2017-02-26 04:19:02,"in this example var markdownString = '<S_CODE_TOKEN>'; what is the syntax `js\n`?
i tried looking in all the markdown docs but didn't see this.
all i know is that if i try to use a code block using triple backticks, marked just converts it to `<code></code>` without any added classes so i cannot get syntax highlighting, however if i prefix all the code with js\n, the appropriate highlight class is added. any ideas?",ee7klt,
860,2017-03-06 18:19:26,That's the language identifier and then a new line character. The `js` just tells the parser that this code block is supposed to be Javascript. The `\n` is an escape character for newlines that will be rendered appropriately by the browser.,trezy,
859,2017-02-25 22:52:53,"A URL like `http://www.wolframalpha.com/input/?i=antiderivative+for+sqrt((2*(1-t)*t*B+%2B+t%5E2*C)%27%5E2+%2B+(2*(1-t)*t*E)%27%5E2)&incParTime=true` is perfectly fine, but will cause `marked` to treat it as `http://www.wolframalpha.com/input/?i=antiderivative+for+sqrt((2*(1-t` because of the closing parentheses. 

That's probably worth fixing.",Pomax,
859,2017-02-27 21:01:09,"Marked ""should"" support the \) escape.. but it does not for some reason on the closing ). If you URL encode the ) to %29 it should work until this is resolved. ",matt-,
859,2017-02-27 21:33:41,"aye, doing that in the meantime with some preprocessing (I'm pretty sure last time I checked `marked` used regexp for most of its matching, which is insufficient to properly match around nested pairs)",Pomax,
858,2017-02-17 17:27:52,"Possible to get an exhaustive of markers that are supported and what the convert to?

All I have right now is that __ parses to <strong> from the docs.

Thanks",cozzbie,
857,2017-02-16 18:53:36,"On github markdown, a header like this one:
## This & That Section
will write out an id like this: `this--that-section`

On markdown-loader, it writes out `this-that-section`

This breaks links that adhere to github markdowns syntax:
<S_CODE_TOKEN>

Another example:
<S_CODE_TOKEN>

Filed originally at https://github.com/peerigon/markdown-loader/issues/17",tannerlinsley,
856,2017-02-15 06:46:11,"I think def regexp should be support single quote.

PS: I am a Chinese boy is not good at English and javascript.Please don't keep in mind if I say something wrong.",Jiang-Xuan,
855,2017-02-13 22:01:20,"Right now, marked will convert this:
<S_CODE_TOKEN>
into this:
<S_CODE_TOKEN>
that is to say: it doesn't convert it at all. It treats the `<div>` as somehow being meaningful syntax rather than ""just text without any markdown syntax rules that match it"" and so it refuses to convert the content of that div,  despite the fact that markdown has no divs: it's just inert text that needs to be preserved.",Pomax,
855,2017-02-28 02:30:16,"First of all, to have a better chance of this working, you should put an empty line between the `div`s and any markdown. However, as far as I know, this library does not implement the required feature, sadly.

But: This library does implement this for `span`s instead of `div`s. That may be sufficient as a workaround for you. (It even works without the empty lines I mentioned, which I guess is nonstandard, not sure.)

<S_CODE_TOKEN>",nerai,
855,2017-02-28 16:32:45,"that depends entirely on how robust the parser's written to be. That said I ended up writing a chunker in the interrim that just takes the input, chops it up into parts that should have markdown applied and parts that don't, and only then runs the parts that do through the conversion library.",Pomax,
855,2017-03-01 03:02:29,"A lot of specs (actually almost all) do have ""raw"" html tags like divs:   http://spec.commonmark.org/0.27/#example-119 and GFM: <div id=""test"">this is in a div</div>

That said I believe it is correct that in a code block \`\`\`  it should return the html encoded version of this as http://spec.commonmark.org/0.27/#example-88 describes 
",matt-,
855,2017-03-01 13:34:41,"@matt- Those are just `...`, not  <S_CODE_TOKEN>
<div style=""background:red"">
## x
</div>
.
<S_CODE_TOKEN>
<div style=""background:red"">
## x
</div>

.
```
yields
![4](https://cloud.githubusercontent.com/assets/1230531/23461790/9dc2f4ec-fe8b-11e6-96bc-b2b687b0def0.png)

This behavior looks wrong to me. Am I missing anything obvious?
",nerai,
855,2017-03-01 15:59:32,"The original code was for terseness, using something more spaced out like 
<S_CODE_TOKEN>
generates:
<S_CODE_TOKEN>
with the content of the div somehow treated as ""I should skip over this"" by the library. The real trick isn't whether it should always do one thing or another, this should be something one can toggle, where calling something like:
<S_CODE_TOKEN>
makes it copy HTML tags verbatim without doing anything to them, and without recognizing content between some `<x>` and corresponding `</x>` as anything other than ""more text to be converted as markdown"", because there are no doubt situations in which both behaviours are necessary.

In fact, and even better result would be to have an option like `passOverHTML` as well as a secondary finer level control:
<S_CODE_TOKEN>
So that the content itself can indicate what the parser should do:
<S_CODE_TOKEN>
",Pomax,
854,2017-02-12 08:42:11,"Small fix; I noticed that flags are not used, so I removed it. Flags are hardcoded as parameter in `tablecell`.",NejcZdovc,
853,2017-02-10 02:00:34,"## 在单下划线或者是单星号中转义单下划线或单星号会导致转义失效

    marked('_cma\\_ed_')
    // output
    ""<p>_mark<em>ed</em></p>""
    marked('*cma\\*rked*')
    // output
    ""<p><em>mark</em>ed*</p>""

我认为是这个正则导致了问题的产生：

    em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/

应该在单下划线或者是单星号的匹配中允许转义字符`\_`、`\*`的出现。",Jiang-Xuan,
853,2017-02-25 08:54:44,"666, 给外国人提issue也用中文，简直屌。",maicss,
852,2017-02-08 20:03:06,"**TL;DR:** Leaves link text but removes hyperlink.

## Explanation

Currently when there is a link that either cannot be parsed, or is detected to be potentially malicious, **marked** simply hides the entire link. For example, if I had the following markdown:

<S_CODE_TOKEN>

the output would be the following:

> For help: .

_This is especially problematic_ when URLs are automatically converted to links. For example:

<S_CODE_TOKEN>

Would automatically become:

> http://example.com

If for some reason the URL cannot be parsed, then the URL simply does not display at all. This happens if it has un-urlencoded characters etc., or if it otherwise cannot be parsed, but _was_ identified as a URL by the separate lexer.",jeremyblalock,
852,2017-02-09 21:32:12,"I like this idea. It looks like a simple change as well, but do you mind adding a test? ",matt-,
852,2017-02-09 22:03:16,"@matt- Yeah, I can add a test for it.",jeremyblalock,
852,2017-02-10 18:27:42,"@matt- I updated the invalid link test / added a new one for the `decodeURIComponent` failure. 

On another note, noticed that we are not quite following the recommended test setup as described in the documentation, though. I don't see `links.sanitize.html` in `tests/new`. And so when you run `node test --fix` it will delete this test case, which I'm guessing is not the desired behavior. Are we ditching the `test/original` / `test/new` structure in favor of just putting everything in `/test/tests`? Let me know, I can move the files around if necessary get the `node test --fix` working properly.",jeremyblalock,
852,2017-02-28 23:35:35,@matt- @chjj: any decision on this? This will produce the same behavior that github has in their markdown rendering support for data: urls.,jeremyblalock,
851,2017-02-07 17:05:57,"I just installed `esdoc` and ran it and got this error:

<S_CODE_TOKEN>

So... I did what I was told.  I'm happy to help debug.",iffy,
850,2017-02-02 06:10:17,"In https://help.github.com/articles/organizing-information-with-tables/, it says that I can align text within cells via the following:

<S_CODE_TOKEN>

So, I tried outputting the following lines
<S_CODE_TOKEN>

However, it doesn't do the right alignment in the 2nd column. I tried in this Github editor https://jbt.github.io/markdown-editor/#q9HSCsnILFYAopKMVIWSzJKcVC2tmhquGitdTFCDRUxX1wqo2i0zNSdFwdFKoUZLKywxpzRVwRBoDEzcCUncyBgIQHIhqRUlCoklYHtT81K4AA== and it renders correctly.

Am I perhaps doing something wrong? 
",AlaRuba,2017-02-02 06:19:45
850,2017-02-02 06:19:45,Nevermind. I looked into the html outputted and it seems right.,AlaRuba,2017-02-02 06:19:45
849,2017-01-31 19:00:56,"I find a code block in the list can not contain more than one blank lines.
（list下面的代码块有两个以上换行会解析错误）

# Solution(解决方法)
Let the list matching to the end of the [\s\S]*?\`\`\`,and plus the `(?![\s\S]*?<S_CODE_TOKEN>)`）
Change marked.js->line22 To `list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )(?![\s\S]*?<S_CODE_TOKEN>)\n*|\s*$)/,）`

---------------------------------------------------
like this(please remove '\\')（例如这样会解析错）:
<S_CODE_TOKEN>
var rendererMD = new marked.Renderer();
//There are two blank lines.(下面有两个空行)


marked.setOptions({
	renderer: rendererMD,
	gfm: true,
	tables: true,
	breaks: false,
	pedantic: false,
	sanitize: false,
	smartLists: true,
	smartypants: false
});
\<S_CODE_TOKEN>
I checked block.gfm and block.list but it beyond my ability to found the wrong.
PS: I am a Chinese boy is not good at English and javascript.Please don't keep in mind if I say something wrong.",1010543618,
849,2017-01-31 19:39:44,"test code:
<S_CODE_TOKEN>\ncode\n\n<S_CODE_TOKEN>
ouput:
<S_CODE_TOKEN>
code</li>
</ul>
<p>\<S_CODE_TOKEN>
",1010543618,
849,2017-02-02 06:23:41,"In the 284 line code be truncated by '\n',but the regular is too difficult.
<S_CODE_TOKEN>\ncode\n\n<S_CODE_TOKEN>code"", 
//  """",
//  ""-"",
//  undefined,
//  undefined,
//  undefined,
//  index : 0,
//  input : ""- test<S_CODE_TOKEN>""
//)
//this.rules.list:/^( *)((?:[*+-]|\d+\.)) [\s\S]+?(?:\n+(?=\1?(?:[-*_] *){3,}(?:\n+|$))|\n+(?= *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +[""(]([^\n]+)["")])? *(?:\n+|$))|\n{2,}(?! )(?!\1(?:[*+-]|\d+\.) )\n*|\s*$)/
```
",1010543618,
849,2017-02-04 08:09:51,"你为什么要把代码区块写成\<S_CODE_TOKEN>
\`\`这样的语法是用来写内联的代码块的，如果你想要书写大段的代码块，应该用缩进来处理",Jiang-Xuan,
849,2017-02-04 09:15:09,"@Jiang-Xuan 测试的时候字符串里没法打回车。
单行代码：\`\`\`testcode\`\`\`

多行代码：
\`\`\`
testcode
testcode2
\`\`\`

我遇到的是列表下面的多行代码有回车会被截断:
\- lsit1
\`\`\`
testcode1

\`\`\`
\- lsit2
\`\`\`
testcode2
\`\`\`

这种情况- lsit2被标记成了代码，我是想让testcode1,testcode2成为代码",1010543618,
849,2017-02-04 10:22:02,"@1010543618 
你是想让代码成为列表里面的内容是吧，这样的情况你需要这样写
\- list\n\n\t\tvar helloWiorld = 'hello world'
也就是在列表项后面敲**两个**回车，然后加上**两个**tab键，然后在键入你所想要在列表项里面显示的代码",Jiang-Xuan,
849,2017-02-04 10:26:25,"@1010543618 
也许是我理解有误，不过你的表述应该再清晰点
如果你想要单独的一个代码块，使用一个tab键来缩进你的代码，最好在你的代码区域上下都放置一个空白行，就是只有空格或者是连空格都没有的行。
单独的三个反引号不是用来包裹代码的，是用来当你需要渲染代码的样式的时候用的",Jiang-Xuan,
849,2017-02-04 10:39:05,@Jiang-Xuan 我是这几天才看的markdown，以前一直没接触过，感觉每种解析器的解析都有点差别。我是准备想办法让\`\`\`包裹的代码块里的换行不被列表的\-识别了当成结束列表，但js没学好=\_=。我再试试不然就像你说的先结束了列表在用代码块。十分感谢^\_^,1010543618,
849,2017-02-04 10:50:13,@1010543618 解析器都有自己的语法，想要自己有一种语法，只能去重写全部源代码或者一部分，我就在重写这个包来让它更符合我的博客站点，所以才看到你的问题=_=。同样是菜鸟,Jiang-Xuan,
849,2017-02-04 11:03:10,@Jiang-Xuan 恩，造个轮子可有点难。反正假期有空好好研究研究作者的代码,1010543618,
849,2017-02-11 21:45:29,"use 
`        $('.content-markdown').each(function () {
        var content = $(this).text();
        content = content.trim()
        var markedContent = marked(content);

        $(this).html(markedContent);
    });`",fadiquader,
849,2017-02-12 16:24:07,"@fadiquader 
eh... I just tried this method,but it can only remove white space characters or other predefined character on either side of the string.  
I want to remove line feed character in a one string.  
Maybe I should use regular expression to match \n\n and remove one \n.  
Thank you.",1010543618,
848,2017-01-31 09:52:48,"Failing Snyk Test

✗ High severity vulnerability found on marked@0.3.6
- desc: Cross-site Scripting (XSS) via Data URIs
- info: https://snyk.io/vuln/npm:marked:20170112
- from: node_services@1.0.0 > npm-shrinkwrap@6.0.2 > msee@0.1.2 > marked@0.3.6
Fix: None available. Consider removing this dependency.",knoxcard,2017-01-31 22:42:38
848,2017-01-31 09:53:34,Holy Snykes!,knoxcard,2017-01-31 22:42:38
848,2017-01-31 22:42:37,"Why open another issue when the url you posted has a link to the PR with the fix? 

This has already been addressed. Waiting for a version bump and push. https://github.com/chjj/marked/pull/844",matt-,2017-01-31 22:42:38
848,2017-02-01 04:50:38,"So everyone else is aware, that's why.",knoxcard,2017-01-31 22:42:38
848,2017-02-01 13:47:24,"Please don't open bug tickets for issues you know are already merged.
-- 
../matt
",matt-,2017-01-31 22:42:38
847,2017-01-24 19:22:28,This commit will resolve the marked.js issue of responsiveness of images when showing HTML as preview. I've tend to resolve it in one of my project over here : https://github.com/amitmerchant1990/electron-markdownify/commit/ef54685c789c1ccdd5fa8d821f29d1a7b82358a3,amitmerchant1990,
846,2017-01-21 22:09:05,"Created a basic modular plugin system for adding in custom modules.

This needs to be tested more. I created a single custom test to see how it operated. Was unable to figure out how to add it to the standard test suite. This arose, I believe, because my system cannot simply be run strait like marked does in the currently existing test setup, it requires making a call to register a new module before running.",Drew-S,
846,2017-02-05 21:40:09,"@Drew-S Good idea, vote for this! That's what I needed implementing plugins #821.",rumkin,
845,2017-01-20 07:10:33,"Is it possible to do some configuration to ignore some characters? For example, forbidden to use the `_` character.

I am using Mathjax to render the latex equations, however sometimes `marked` convert `$x_1y_1$` to `$x<em>1y</em>1$`.",badbye,
845,2017-01-20 07:46:08,"I find the rules of `em` and try to edit it, however it does not work. 
<S_CODE_TOKEN>",badbye,
845,2017-01-20 07:51:41,"Alright, I see. Here is my solution:

<S_CODE_TOKEN>

Please let me know if there is a better solution.",badbye,
845,2017-02-10 08:25:17,"you want to output '_' char ?
you can escape some char.
for example:

    marked('\\_hi\\_')

PS: I am a Chinese boy is not good at English and javascript.Please don't keep in mind if I say something wrong.",Jiang-Xuan,
845,2017-02-10 08:29:38,"@badbye 
If you edit `marked.InlineLexer.rules.em` to `/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/`.

`_marked_` can not to generate `em` element",Jiang-Xuan,
844,2017-01-19 23:04:58,,matt-,2017-01-20 17:47:30
844,2017-01-25 01:26:00,@chjj  I added this along the same lines as the javascript: xss. Can we version bump and push this?,matt-,2017-01-20 17:47:30
844,2017-02-14 01:04:21,"Heya @matt- 
Can we expect a version bump out soon? We're interested in this fix and would like to avoid depending on a specific github commit if possible. ;)  ",paulirish,2017-01-20 17:47:30
844,2017-02-14 01:25:17,No idea thats up to @chjj. I personally would love to see a bump to get this resolved. ,matt-,2017-01-20 17:47:30
844,2017-02-14 02:39:08,"k. thank you!

@chjj can you add the other contributors here to the npm package so they can publish as well?

",paulirish,2017-01-20 17:47:30
844,2017-02-15 17:43:07,"@paulirish note in the meantime you can also use a Snyk patch (see the bottom of https://snyk.io/vuln/npm:marked:20170112). 

When we initially reported the problem it had no fix, but once Matt created a fix we captured it as a Snyk patch too. More about Snyk patches here: https://snyk.io/docs/security 
",guypod,2017-01-20 17:47:30
844,2017-03-08 03:03:22,"Thank you very much to send this pull request, it's help me a lot!",zhangbobell,2017-01-20 17:47:30
843,2017-01-18 19:38:03," bitHound discovered 46 LintIssues, and 2 ComplexFunctions in [test/index.js](https://github.com/chjj/marked/blob/88ce4df47c4d994dc1b1df1477a21fb893e11ddc/test/index.js). For details go to [bitHound](https://www.bithound.io/github/chjj/marked/blob/88ce4df47c4d994dc1b1df1477a21fb893e11ddc/test/index.js). ",dudeman805,2017-03-22 02:36:14
843,2017-01-20 00:17:06,"Although arguably it should.. this project does not have a lint file or any rules setup. How can you report ""lint issues"" without having agreed on lint rules / linter config files?
",matt-,2017-03-22 02:36:14
842,2017-01-18 03:19:58,"## markdown
<S_CODE_TOKEN>

## html
<S_CODE_TOKEN>",cloudcome,
842,2017-02-10 02:15:07,"    autolink: /^<([^ >]+(@|:\/)[^ >]+)>/

This regexp cause problem.
You should modify this regexp to after:

    autolink: /^<([^ >]+(:\/|@)[^ >]+)>/

I'm from china.",Jiang-Xuan,
841,2017-01-14 21:03:57,"Maybe this would be better as a configurable option, but I hacked the parser to NOT wrap the block in <p> tags unless there is more than one line, then it functions as normal. 

Using this for my i18n CMS so that language editors can edit blocks inside header tags and others, where we know it will be one line and having a P tag is undesireable.

Welcoming your thoughts and feedback.",jhnsntmthy,
841,2017-02-05 19:24:55,I like this idea and would use it if the PR is approved. I do think it should be configurable.,dbaldon,
840,2017-01-06 06:52:08,"<S_CODE_TOKEN>

error:

<S_CODE_TOKEN>

",sinkcup,
839,2017-01-04 07:43:25,,mmuallem,2017-01-04 07:43:47
838,2017-01-03 03:35:23,<S_CODE_TOKEN>,mantou132,
838,2017-01-03 10:05:28,"I have the same problem，a lot of id=""-""",ginuim,
838,2017-01-17 09:16:51,"        Renderer.prototype.heading = function(text, level, raw) {
		  return '<h'
		    + level
		    + ' id=""'
		    + this.options.headerPrefix
		    + raw.toLowerCase().replace(/[^\w]+/g, '-')
		    + '"">'
		    + text
		    + '</h'
		    + level
		    + '>\n';
		};

`raw.toLowerCase().replace(/[^\w]+/g, '-').`
this line cause problem.",Jiang-Xuan,
837,2016-12-30 02:14:17,"<S_CODE_TOKEN>

Another option, i already tried with registered new renderer, but still doesn't work well..

<S_CODE_TOKEN>",agusmakmun,
836,2016-12-27 08:49:46,"The README contained two descriptions for ""direct access to the lexer and parser if you so desire."" One of those can be removed.",jschulenklopper,
835,2016-12-18 17:10:37,"New line inside paragraph not work.
![immagine](https://cloud.githubusercontent.com/assets/14861632/21295069/35ddac54-c54d-11e6-9816-c9761fb68f4e.png)


Instead if i put two spaces after the new line i have the correct result...

![immagine](https://cloud.githubusercontent.com/assets/14861632/21295071/405d5b66-c54d-11e6-8f33-be53290cc2b0.png)

why this strange behavior??

Has anyone found a solution?Thanks :)",CosmaVito,
835,2016-12-21 17:44:36,"The latest Commonmark spec says to put a `\` at the end of the line, but I'm not sure it's implemented here",joallard,
835,2016-12-27 12:27:24,Have you set `breaks: true`？,j16180339887,
834,2016-12-18 04:08:59,"Dear Christopher,
Could you be so kind to generate <S_CODE_TOKEN> for the rest of us who use Windows w/o Node?
I’m told that either [Nexe][1] or [EnclosureJS][2] might help you to achieve that.

[1]: https://www.npmjs.com/package/nexe
[2]: http://enclosejs.com/",sergeevabc,
834,2016-12-22 10:05:35,Is there anything I could do for you to expedite a resolution of this issue?,sergeevabc,
833,2016-12-13 17:44:47,"We need HTML tags with hyphens for a project with some new Angular components in so I've updated the regex for tag detection.

Should help out with #514 and #283 ",gavmck,
832,2016-12-13 03:51:24,"Such as `# struct Underscore_Is_Common_In_VariableName` is not handled correctly by marked. It will treat it as italic syntax by mistake.

Github renders it correctly!

# struct Underscore_Is_Common_In_VariableName

Marked will render it something like this:

# struct UnderscoreIsCommonInVariableName

Thanks very much!",tamlok,2016-12-13 03:53:07
832,2016-12-13 03:53:07,Just a mistake it with Hoedown. Sorry~,tamlok,2016-12-13 03:53:07
831,2016-12-13 03:46:00,"How to display a `|` in the table? I tried to use `` `|` ``, but failed. Hoedown, another markdown renderer could handle it correctly! Thanks very much!",tamlok,
831,2017-01-06 07:27:13,"@Shazoo, one fallback way is to use html tag:

<S_CODE_TOKEN>",xcatliu,
831,2017-02-21 22:00:58,https://github.com/chjj/marked/issues/595 ` can't convert (\|) as (|) in table #595 `,noraj1337,
830,2016-12-08 07:27:19,,nalinchhibber,2016-12-08 07:27:36
829,2016-12-06 22:52:47,"From https://github.com/Microsoft/vscode/issues/14968

Marked does not seem to properly handle markdown escapes inside of links. Only the link text itself is properly handled, the `title` and `href` are not:

<S_CODE_TOKEN>

produces:

<S_CODE_TOKEN>",mjbvz,
828,2016-12-06 10:14:04,I want to have the own escape/unescape functions instead of the internal one.,tagoh,
827,2016-12-02 13:04:34,"It seems that 

`> this is a quote`

doesn't work out of the box. What kind of option should be added to support this?",josephernest,2016-12-03 21:13:29
827,2016-12-03 21:13:29,Solved by #541 ,josephernest,2016-12-03 21:13:29
826,2016-11-29 15:43:42,"Per the [CommonMark spec](http://spec.commonmark.org/0.26/#thematic-breaks) and GFM, you get a `<hr>` only if all three characters are the same ([Example 26](http://spec.commonmark.org/0.26/#example-26)).

This makes that change.",kythyria,
825,2016-11-28 00:23:51,"So you can change the color of the text using a syntax or command, so you can change the color text either in bold, in italics or in titles h1, h2, h3, etc. And also for links. Something like this: *{#f66} hello* or **{blue} hello** or also #{red} title. it would be a good idea.",hypernova7,
825,2016-12-01 19:55:02,Markdown syntax has no support for text color.,jounsss,
825,2016-12-02 04:14:25,"Yes, I know. But how could you customize it to be able to add that option. What would be the best way to do it and personalize it my way. Basically I want to do something similar like bbcode, but with the markdown syntax.",hypernova7,
824,2016-11-16 14:00:43,"I'm seeing an issue where parsing a string with a newline character in combination with the inline option creates an infinite loop (it works fine with the default settings)

The error is `Uncaught Error: Infinite loop on byte: 10`

With an example being `window.marked(stringWithCharacter, { inline: true });`",webfella,
823,2016-11-14 11:51:48,"Hi, we have users entering text along the lines of:

\\\\some\file\path

but marked,js is escaping the double backslash when processing the escape inline grammer rule:

https://github.com/chjj/marked/blob/master/lib/marked.js#L451
<S_CODE_TOKEN>

is there any particular reason this needs to be done? I' have tried tweaking the regex to only contain one of the \\\\ so either:

<S_CODE_TOKEN>
or:
<S_CODE_TOKEN>

resolve this issue for us, but as I say Im not sure on why this needs to be here in the first place.",robsix,2016-11-14 11:55:18
823,2016-11-14 11:55:18,"I see that markdown has special escape characters which explains this
",robsix,2016-11-14 11:55:18
822,2016-11-11 14:28:06,"For those who need to extend markdown with custom data types I've created mechanism of standard extention. PR at #821.

It looks like that:

<S_CODE_TOKEN>

Plugin call with indentation based block of data.",rumkin,
821,2016-11-11 14:11:15,"I've added markdown extension mechanism. It uses plugins with such syntax:

<S_CODE_TOKEN>

Examples:
<S_CODE_TOKEN>

Plugins are defined with Renderer:

<S_CODE_TOKEN>

By default if plugin not found it should be ignored.",rumkin,
821,2016-11-19 18:32:11,"using this on my fork and it works great!
",OverFlow636,
821,2017-02-05 19:02:24,"Just tried this out and its great but there are a few issues.

Firstly it throws `Cannot read property 'replace' of undefined` on line 204 of lib/marked.js which seems to be triggered when you have tags without a line break under them due to it looking for block content.

The second issue we've run into is that if you have a number of the same tags after each other it ""eats"" them. That is to say without block content under each of them they disappear. An example is:

<S_CODE_TOKEN>

Will only show the first link and if there were additional items under the second one, in our case 8 in total it would still only show the first one.

Apart from these issues the system works really well and if I get a chance I'll look into a resolution.

**Edit**: Changing line 204 to the same as below seems to fix both issues:

<S_CODE_TOKEN>
",jHoldroyd,
821,2017-02-05 21:31:32,@jHoldroyd Thanks. Fixed this.,rumkin,
821,2017-02-08 00:23:27,Nice. Maybe add a plugin examples folder for demo?,naivefun,
821,2017-02-10 11:35:01,@naivefun Do you expect to see exact plugin example?,rumkin,
821,2017-02-10 11:45:23,"@rumkin actually it is very straightforward, but still if there are very common use cases like @youtube, @vimeo, even @tweet, that would be great for beginners to learn.",naivefun,
821,2017-02-13 09:37:44,@naivefun Done.,rumkin,
821,2017-02-22 17:12:59,"Just following up on the previous problem we reported, happy to say the initial error has been resolved since you pulled in my suggestion, the ""eating"" of tags is still occasionally happening though.

I managed to get around it by updating the plugin regex on line 98-100 to:

<S_CODE_TOKEN>

This allows the script to catch all indented text below a plugin tag but nothing that isn't nested. An example of this fix can be seen here: https://regex101.com/r/76YMYB/1 which you can compare to the original regex pattern here: https://regex101.com/r/QjLRlL/1

Hope this helps.",jHoldroyd,
821,2017-03-03 12:48:41,"@jHoldroyd There is one issue with that regexp it will not match single space.

<S_CODE_TOKEN>

This will not be matched, it mean that single tab would not be matched too. So I've replaced `(\s+){2,}` with `(\s{2,}|\t{1,})`, this is [updated regex](https://regex101.com/r/76YMYB/3).

Thanks for help.",rumkin,
821,2017-03-09 15:41:06,"I realise no-plugin block which should return html/text if plugin is not defined:

<S_CODE_TOKEN>

It currently doesn't support markdown itself.",rumkin,
820,2016-11-08 00:49:49,"I'm using leafdocs which uses marked to parse markdown in documentation.

I find that formatting from tables, code blocks, and lists are all hit or miss. Sometimes they generate close enough html or don't pick up the formatting at all.

### Example:
<S_CODE_TOKEN>

Obviously expect it to parse into...

Several CDN's have Leaflet.Draw available.

| CDN and type   |   URI            |
| -------------- | ---------------- |
| unpkg css| https://unpkg.com/leaflet-draw@0.4.1/dist/leaflet.draw.css |
| unpkg js | https://unpkg.com/leaflet-draw@0.4.1/dist/leaflet.draw.js |
| cdnjs css| https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.0/leaflet.draw.css |
| cdnjs js | https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.0/leaflet.draw.js |

but it formats as

<S_CODE_TOKEN>

Is there anything or anyone else having similar issues? Also, is there a way to 'debug' or verbosely identify what's going on while parsing?

https://github.com/Leaflet/Leafdoc/issues/21
",ddproxy,
819,2016-10-26 16:46:29,"Currently there's no way to get the number of the list item.
Backwards compatible whilst adding functionality. Let me know if you want any changes
",woodyrew,
819,2017-02-15 06:54:18,Are you sure this can work?,Jiang-Xuan,
819,2017-02-15 09:30:23,"I'm using this in production, so, yes.",woodyrew,
819,2017-02-15 10:00:23,"Are you trying to do ol element is generated with a start attribute?But I did not see you to modify the Renderer class.

PS: I am a China boy is not at English.Please don't keep in mind if i say something wrong😀.",Jiang-Xuan,
819,2017-02-15 13:21:53,"Yes, you need to modify the renderer, e.g.
<S_CODE_TOKEN>",woodyrew,
819,2017-02-16 01:36:49,"I understand.You are awesome👍, thank you.",Jiang-Xuan,
818,2016-10-26 01:30:37,"When styling tables out of a custom renderer subclass, it's useful to
know if the tablerow is in the header or body. Tablecells already get a
header flag that is set if the tablecell is in the header. This change
adds the flag to tablerows.
",ksheedlo,
817,2016-10-25 16:01:09,"Is it possible to specify the order in which the markdown should be rendered? I am currently trying to find a way to render `paragraph` before `em`.
",steve-mcqs,
816,2016-10-12 12:36:08,"Hi, I have little idea to determine table column width by dash characters.

For example, if you have next table.

<S_CODE_TOKEN>

Each column will have 30%, 20%, 20%, 30% width.
The percentage value of width is determined by (row dash count / total dash count) \* 100.
So, if you want to have the same column width, you can adjust dash as below

<S_CODE_TOKEN>

Last but not least, to use this feature you can turn on flag ""tableWidth"" through options.

I hope this is useful.
Thanks.
",swcho,
815,2016-10-04 01:17:34,"minified file edited ""a year ago"", while lib/marked.js was edited 2 months ago.
",reedspool,
815,2016-10-07 12:41:22,"We see the same thing, making the release more or less useless for us. Is it possible to re-release it?
",jankeesvanandel,
815,2017-03-06 22:47:53,"The `marked.min.js` file should be updated very quickly. **This is a high priority issue**. I'm seeing **a lot** of FLOSS using this file without knowing that they are vulnerable to #592. This issue is creating potential XSS in all of them.

Please @chjj update it!",Framartin,
814,2016-09-25 16:26:46,"Fixes #813. Tests included.
",thisgeek,
813,2016-09-25 16:10:46,"If an angle bracket appears inline before an autolink, and if content follows immediately after the angle bracket, as for example:

<S_CODE_TOKEN>

the parser will confuse the first angle bracket as the opening of an HTML tag. Instead of producing:

<S_CODE_TOKEN>

marked leaves it untouched:

<S_CODE_TOKEN>
",thisgeek,
812,2016-09-22 12:47:15,,shinisuz,2016-09-22 12:47:28
811,2016-09-19 21:35:55,"Marked explicitly will not render a table within a list item.  Test snippet:
1. item 1
   
   | aaa | bbb |
   | --- | --- |
   | ccc | ddd |
2. item 2

I think I've read in the past that this was done to satisfy some markdown compatibility test, though I can't find this now.

This is a request to reconsider this decision.  We've been affected by this behavior several times, and a table within a list item is not an unusual pattern.  GitHub is willing to render tables within items.  How about marked?
",grant-g,
811,2016-09-26 21:51:32,"Wow, I didn't even know this!
Fact is, list and table regex are already pretty complex as it is...
",Feder1co5oave,
810,2016-09-18 00:20:08,"In my source content, I have:

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

This results in a Javascript error: 

<S_CODE_TOKEN>

If an unknown language is encountered, it should be treated as plain text rather than throwing an exception.
",aaronpk,
810,2016-09-26 21:54:25,"I'm pretty sure this is highlight.js throwing the exception, and marked just reports it. What options are you using?
",Feder1co5oave,
810,2016-10-22 10:09:25,"To prevent this exception, I did: 

<S_CODE_TOKEN>

Hope it helps.
",acorbel,
809,2016-09-15 12:56:33,"<S_CODE_TOKEN>

headings with no space between hash and words should work with github flavoured markdown
",epoch,
809,2016-12-04 18:54:19,Any news about this @chjj ? This would be super useful.,josephernest,
808,2016-09-13 15:21:13,"see for details:
https://www.versioneye.com/Node.JS/marked/0.3.6
",venil7,2016-09-15 19:34:50
808,2016-09-15 14:22:36,"That vulnerability report is wrong: as I commented on that page, the provided example does not result in code injection. That particular vulnerability was fixed in fd0d1a2.

Test case to show this:

<S_CODE_TOKEN>
",Feder1co5oave,2016-09-15 19:34:50
808,2016-09-15 19:34:50,"That page correctly says: Patched versions: >=0.3.6  even though its reporting the issue for 0.3.6. 

Closing issue.
",matt-,2016-09-15 19:34:50
807,2016-09-12 03:13:13,"This causes the Closure Compiler to fail in strict mode.
",jart,
806,2016-09-08 06:28:25,"Hi,

Using marked in command line and having this markdown file

`# This is a test`

if I run marked test.md -o test.html this is what I get:

`<h1 id=""this-is-a-test"">This is a test</h1>`

Why is id=""this-is-a-test"" there? What option should I use to prevent that behaviour?
",jesus-cortex,
806,2016-09-18 00:21:05,"This is usually seen as desired behavior, in order to easily provide anchor links to sections based on the header text.
",aaronpk,
806,2016-11-28 21:58:57,is this still in the code? I desperately need a parser that has this feature.,sneakernets,
805,2016-09-07 22:48:43,"## Use case

I am using marked to process separate markdown files into a website, and because files move around I would like to have my links transformed into appropriate relative links. Since I can't really process links inside of the markdown file, I thought about using link references and feeding how to resolve them directly to marked. Something like:
### MD file

<S_CODE_TOKEN>
### JS file

<S_CODE_TOKEN>

This currently does not work, and it doesn't look like there is an easy way to achieve that. 
## Current workaround

<S_CODE_TOKEN>
## TL;DR

It would be great if the API exposed a way for the lexer to be prefilled with link references, or maybe inject them in the tokens before using them, something like that.
",ndossougbete,
805,2016-09-26 21:46:57,"You could always inject the link definitions at the end of the source, before lexing it?
",Feder1co5oave,
805,2016-09-27 23:04:09,"I'm using marked through [metalsmith-markdown](https://github.com/segmentio/metalsmith-markdown), modifying the lexer is an easier workaround for me. I would have to make a metalsmith plugin (or hook some other way into marked) to inject the link definitions at the end of all my markdown files and snippets otherwise.
",ndossougbete,
804,2016-09-04 10:39:11,"I have a markdown file which when parsed, on the most part works, but here is an excerpt showing one are which has not worked...
## Original.md:

<S_CODE_TOKEN>
## Output.html:

<S_CODE_TOKEN>

In my mind, the `##` should parse to `<h2>` and the `-` should parse to `<li>` why isn't this happening, where elsewhere in the file, `## What is NativeScript?` has been parsed as `<h2 id=""what-is-nativescript-"">What is NativeScript?</h2>`?
",georgeedwards,
804,2016-09-26 21:56:45,"How are you parsing the markdown source? It looks like you're not lexing it.
",Feder1co5oave,
804,2017-01-12 19:14:48,"I had a similar problem when converting a folder of markdown files and noticed it only happened on files encoded as utf-8. Reencoding them as ASCII fixed the problem. Used a simple:

<S_CODE_TOKEN>

Not sure what was wrong or why this worked, but it did.",tobinbradley,
803,2016-09-03 09:06:34,"When i used (```) and don't flow with any program language， it will parse fail and with exception. In my mind, whatever it should not be crash for any type of text. If it is not a markdown syntax，just show it origin.
",superbogy,
802,2016-09-02 19:58:57,"In my console:

<S_CODE_TOKEN>

How it impacts my user experience:

I'm using Statamic CMS v2.1.5 and I'm trying to edit a user file (YAML) in the control panel. No fields on the form will load for me. I just get an infinitely spinning Loading gif.
",danielfowler,
801,2016-08-31 11:43:24,"In HTML5, you can take any unicode and use them as values for id
attributes. It’s important for non-english languages. For example:

<S_CODE_TOKEN>

will be complied by this lib into:

<S_CODE_TOKEN>

however, the majority of us want it to be:

<S_CODE_TOKEN>
",Dafrok,
800,2016-08-31 00:55:13,"When trying to run the vscode I built, I see this. I uninstalled and re-installed as well.
",artagnon,2016-08-31 01:15:27
800,2016-08-31 01:15:27,"It seems to have fixed itself.
",artagnon,2016-08-31 01:15:27
799,2016-08-28 00:53:55,"Add an option `math` which, when enabled, disables all processing of math wrapped in `$..$`, `\(..\)`, `\[..\]`, `$$..$$` or `\begin{}..\end{}`. For use with MathJax / KaTeX etc.

Similar to #722 and #723, but better (in my opinion).
",ViktorQvarfordt,
799,2016-08-28 15:39:47,"Perhaps it would be nice to allow more fine-grained control by changing the option `math` to an `Array` (instead of `Bool`) and renaming it to `mathDelimiters`. It is the list of delimiters; `mathDelimiters: [[""$"", ""$""], [""\\["", ""\\]""]]`. However, `\begin{}..\end{}` is more complicated and must be treated separately, the option for this could simply be `""beginend""`, i.e. `mathDelimiters: [[""$"", ""$""], [""\\["", ""\\]""], ""beginend""]`.
",ViktorQvarfordt,
799,2016-08-28 23:05:31,"The commit has been updated to use the above discussed more flexible variant.

Since the option `mathDelimiters` is not a `Bool`, I could not write tests using the existing test suite. However, the following serves a s a good test.

<S_CODE_TOKEN>

Expected HTML:

<S_CODE_TOKEN>
",ViktorQvarfordt,
799,2016-08-29 08:59:03,"If we get this merged, it would be nice to add marked to this list http://docs.mathjax.org/en/latest/misc/mathjax-in-use.html.
",ViktorQvarfordt,
799,2016-11-06 09:35:28,"looks like a cool addition! any objections for merging it?

UPD: ah, I see: https://github.com/chjj/marked/commit/f0fd2644ae96179b3252431e8aaa53d9d5b0ee94
",anaderi,
799,2016-12-19 13:03:30,"It looks good anyway. Any updates, BTW?",wookayin,
799,2016-12-27 11:01:19,"@wookayin I found that [markdown-here](https://github.com/adam-p/markdown-here) forked this project and it support LaTeX.

Then I copied his [marked.js](https://github.com/adam-p/markdown-here/blob/master/src/common/marked.js), then
<S_CODE_TOKEN>

Usage: ${YOUR_LaTeX_Code}$
Ex:
`$E = \frac{mc^2}{\sqrt{1-\frac{v^2}{c^2}}}$`

;)",j16180339887,
799,2016-12-27 11:18:27,"If you want to keep it offline, you should use this PR.",j16180339887,
799,2017-01-27 12:10:31,"@ViktorQvarfordt Great work!

Since you are already parsing the input, do you think you could return the delimeters and the contained TeX separately? This would allow for easy renderers like:

<S_CODE_TOKEN>

without further parsing.",hgustafsson,
799,2017-01-28 18:34:40,"That's a cool idea! I've updated the PR to reflect this. But I'm lazy and ignored extracting the `begin` and `end` tags properly, see the code, there is a TODO on [line 617](https://github.com/ViktorQvarfordt/marked/blob/master/lib/marked.js#L617) . Feel free to do this!

Note: I also rebased this PR on top of the latest chjj/marked.",ViktorQvarfordt,
798,2016-08-27 11:06:31,"Hi,

I made this project support `Promise` . Consider the following scenario:

<S_CODE_TOKEN>

then we can solve this by using `Promise` object:

<S_CODE_TOKEN> js
var marked = require('./index')
  , fs = require('fs')
  , util = require('util');
var renderer = new marked.Renderer();

var path = ""layout.html"";

renderer.heading = function (text, level) {
  return new Promise((resolve, reject) => {
    fs.readFile(path, 'utf8', (err, data) => {
      try {
        resolve(util.format(data, text));
      } catch (e) {
        reject(e);
      }
    });
  });
},

marked('# Heading2\n<S_CODE_TOKEN>\n', { promise: true, renderer: renderer })
.then(function(html) {
  console.log(html);
}).catch(e => {
  console.log(e);
});
<S_CODE_TOKEN>

and I can get the result like:

<S_CODE_TOKEN>

The `Promise` object solve the problem which I cannot call async functions in render function. Hope this feature can make the project better.

thanks,
chang-ning
",crazyguitar,
798,2016-09-30 23:30:23,"This would be really useful to me.
",nchase,
797,2016-08-27 05:26:51,"The regex in marked.js:388 tends to trim the trail '\n' in markdown
table by using non marked match(?:). But it also destory the table
structure itself by mistake. So fix it by keeping the table structure.
",nekolab,
797,2016-08-28 18:34:12,"Any tests for this? https://github.com/chjj/marked#running-tests--contributing
",matt-,
796,2016-08-26 12:37:31,"<S_CODE_TOKEN>
## text
<S_CODE_TOKEN>
<S_CODE_TOKEN>

Header **text** will contains **code** inline.
",xovel,
795,2016-08-24 19:32:54,"Triple backticks are currently rendered `<code>foo</code>` which is inline. It should be displayed block-level, so something like `<pre><code>foo</code></pre>` or even `<div>` or a class added `<code class=""block"">`
",brentonstrine,
795,2016-09-26 21:59:13,"Provide some sample input please.
",Feder1co5oave,
794,2016-08-23 15:37:52,"Webpack could chunk out bundle.js however console log in chrome throw err when rendering: 

`Uncaught TypeError: src.replace is not a function`

`Please report this to https://github.com/chjj/marked.`
",boyboi86,
793,2016-08-22 14:54:36,"A small thing needed to activate Travis CI. If failing tests return errors, travis notify correctly to the user.
",parleur,
792,2016-08-22 13:12:23,"I have two code blocks in my markdown string. This doesn't parse properly:

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

However, this one does:

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

These are the two results:

<S_CODE_TOKEN>

They are both in the same string, processed at the same time of the same machine...

Here you can see the whole file, [markdown](https://gist.githubusercontent.com/georgeedwards/ad0a2951138bf26ed16a98625086ffcc/raw/78bdcb5677ec1d38a5fc61a713a43e48f1e90cbf/markdown.md) and [html](https://gist.github.com/georgeedwards/acbf175c678f39dac3beb012034ee42a)
",georgeedwards,
792,2016-09-26 22:01:21,"I have no problem parsing both. Provide your complete source please.
",Feder1co5oave,
792,2017-03-15 19:22:23,"I have a similar issue using v0.3.6, for example:

<S_CODE_TOKEN>html
<h1> H1 </h1>
<h2> H2 </h2>
<S_CODE_TOKEN>

Would produce:

<S_CODE_TOKEN>

But if you add a matching `h2` after the code block:

<S_CODE_TOKEN>html
<h1> H1 </h1>
<h2> H2 </h2>
<S_CODE_TOKEN>

The problem goes away and you'll get a correct code block:

<S_CODE_TOKEN>

https://runkit.com/5834c46bd8fb6400141ac375/58c98b8b927973001429a666
",MohammadYounes,
791,2016-08-22 12:37:32,"As discussed [here](http://stackoverflow.com/questions/39077150/invalid-html-unexpected-closing-tag-code/39077180), if a code block contains `{` or `}`, it can cause issues with front end frameworks. It would be really useful to set an option to auto-escape brackets in the code block. i.e.

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

=>

<S_CODE_TOKEN>
",georgeedwards,
791,2016-08-22 16:44:20,"Possibly a better approach would be to parse and curly brackets in code blocks as `&#123;` and `&#125;`?
",georgeedwards,
790,2016-08-22 07:06:47,"I dont know why but the blockquotes are not being rendered.
I type `> text` and while sending this message my PHP side converts it to `&gt; text`. When fetched on the client side I get `>text` as the display while the HTML rendered is `<p>&gt; block</p>`
",whimsicaldreamer,
790,2016-10-28 20:19:02,"I have the same issue. I even tried showdown.js and unfortunately it also doesn't render blockquote. I double checked I am using correct syntax for blockquote. Any fixes?
",inventionsbyhamid,
790,2016-10-28 20:24:11,"Probable fix is setting a proper css for the blockquote tag.
",whimsicaldreamer,
790,2016-10-28 21:36:59,"The problem is on my side and not in the library. I have some escaping/unescaping characters issue when using marked on dynamic text. Just tested 'document.getElementById('content').innerHTML = marked('> Test');` and it worked.

Adding how I fixed because it might help someone:
`document.getElementById('content').innerHTML = marked(document.getElementById('content').innerText);`
where div with id content had the raw markdown text. Had to use innerText() instead of innerHTML().
",inventionsbyhamid,
790,2016-12-18 03:20:13,"I have found the same question! By the suggest of upstairs, I fixed the problem by 
<S_CODE_TOKEN>
Use `<pre></pre>`to save the raw markdown and then transform the content to html, it takes effect in my blog.  Hope it can help others.


",tangxiangmin,
790,2017-01-16 01:58:31,same issue,TangMonk,
789,2016-08-21 14:50:13,"Marked returns wrong html for this simple markdown:

<S_CODE_TOKEN>

The expected html for this should be:

<S_CODE_TOKEN>

But in reality what I get is:

<S_CODE_TOKEN>

The problem here is that the paragraphs below the nested lists are included inside the 2nd list item of the nested list, instead of being siblings of the nested lists.

I'v checked the result of this markdown in different online editors and they all return the correct html.

Here's the relevant [thread in stack overflow](http://stackoverflow.com/questions/39059626/marked-returns-wrong-html-for-a-list-item-with-nested-list-and-a-paragraph).
",nitzantomer,
789,2017-03-06 03:11:08,"I am having a similar problem with with nested lists where a list with nested items merges into a single list.

Like:

<S_CODE_TOKEN>

Becomes:

<S_CODE_TOKEN>

This is happening when running my code through `docco` to generate documentation for my code.",hollowdoor,
788,2016-08-21 14:07:23,"bug:
![image](https://cloud.githubusercontent.com/assets/8930882/17837672/8ca7f266-67eb-11e6-8e94-97e566a60b6c.png)
![image](https://cloud.githubusercontent.com/assets/8930882/17837675/994e91e6-67eb-11e6-882a-8965613db386.png)
",keniusuannai,
788,2017-03-15 05:27:00,研究marked.js的朋友们大家好，由于很多中国的朋友对英语不是很熟悉，我们做了一个项目，项目介绍在www.osoc.org/A036.html。另外有个QQ群，方便在线交流。群号码：513117837,osoc,
787,2016-08-18 22:53:42,"Hello,
Following [this post](https://github.com/isagalaev/highlight.js/issues/578).

<S_CODE_TOKEN>

Node version:

<S_CODE_TOKEN>

Source file:

<S_CODE_TOKEN>
",stla,
787,2016-09-26 22:11:28,"You're providing marked with a raw buffer. Use

<S_CODE_TOKEN>

Reference: https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback
",Feder1co5oave,
786,2016-08-17 10:45:20,"(Copied from [the stackoverflow question](http://stackoverflow.com/questions/38994366/how-can-i-get-marked-to-render-tables-without-adding-css) - thanks for reading this! ) 

I am using [marked](https://www.npmjs.com/package/marked) which supports github flavored markdown. This includes [table support](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables):

<S_CODE_TOKEN>

However the output has a bunch of unnecessary inline styles:

<S_CODE_TOKEN>

**How can I get marked to just render the HTML without adding CSS?**
",mikemaccana,
786,2016-09-26 22:14:53,"Why would you want this?
Anyway, try removing the colons:

<S_CODE_TOKEN>

Everything will align on the left.
",Feder1co5oave,
785,2016-08-17 07:45:37,"Using the below code where the php echo is echoing markdown from a database it doesn't output unless the content has only a single line.

`<div id=""utility-description""></div>
                            <script>
                                $(""#utility-description"").html(marked(""<?php echo $utility[""description""]; ?>""));
                            </script>`
",D14RAP,
784,2016-08-11 12:53:18,"# Hello

Turns into `""<p>#Hello</p>\n""`

But # Hello 

Turns into `""<h1 id=\""hello-world\"">Hello</h1>\n""`

In github, you can make a markdown H1 tag with either #Hello or # Hello (Note the space) and it will treat it the same way. 
",joncodo,2016-09-27 19:50:42
784,2016-09-26 22:16:13,"Not true:

# Hello

#Hello
",Feder1co5oave,2016-09-27 19:50:42
784,2016-09-27 19:50:42,"I agree with @Feder1co5oave this works exactly the same as Github and works as expected. 
",matt-,2016-09-27 19:50:42
783,2016-08-10 06:59:26,,oleggromov,
782,2016-08-08 19:47:14,"The version number in bower.json and component.json still says 0.3.4 while the latest release is 0.3.6
",ADmad,
781,2016-08-03 14:15:17,"refusing to install marked as a dependency of itself
please how do i go about this?
",d-prime,2016-08-10 15:00:35
781,2016-08-03 14:29:55,"i was actually trying the installation from a wrong directory,.... got that fixed.
",d-prime,2016-08-10 15:00:35
781,2016-08-06 22:02:00,"@d-prime Is this issue resolved? If so, please close it. Thanks!
",RyanZim,2016-08-10 15:00:35
780,2016-08-02 18:35:08,"GFM paragraph regex was checking for headings in the non-GFM format,
which caused an extra paragraph break to be inserted, for example, in
the text:

<S_CODE_TOKEN>
",singpolyma,
779,2016-08-01 06:31:38,"Anyone can tell me how to resolve it ? I just wanna show the characters correctly not its translation code in code-block
",poberwong,
779,2016-08-07 16:55:10,"Are you using `sanitize: true` as an option?
Provide some sample input and expected output, please.
",Feder1co5oave,
779,2016-08-14 00:00:38,"Possible duplicate of #529
",adam-lynch,
779,2016-10-24 06:34:13,"`sanitize` can not control this. 
",hojas,
779,2016-11-03 19:04:38,"The problem I'm seeing is that the sanitization is happening incorrectly for code blocks specifically, so ""&"" works fine and shows up as ""&"", but ""``&``"" renders as ""`&amp;`"". Obviously I don't want to disable sanitize, I just want code blocks to de-sanitize.

This seems related to #287 which was never addressed.
",bholt,
778,2016-07-28 00:47:18,"A link within parentheses `(`/`)` cannot be correctly parsed.

~~I add some patterns to the link regexp to solve this quirk problem like this:~~

~~`link: /^!?\[(inside)\]\(href\)/` --> `link: /^!?\[(inside)\]\(href\)(?:\s*$)/`~~

**It cannot worked...**
",xovel,2016-07-29 21:42:12
778,2016-07-28 01:05:41,"Finally, I turn `(` to `%28` and `)` to `%29`.......
",xovel,2016-07-29 21:42:12
777,2016-07-27 18:58:19,"Hello!

Can anyone explain how to use Marked without requiring it as npm module?
For example, I would like to just link to the `min.js` file and do something like this:

<S_CODE_TOKEN>

What should the above code look like?
",kittykatattack,2016-08-07 12:17:54
777,2016-07-27 22:09:55,"@kittykatattack Are you running your JS in node.js? If so, you can do:

<S_CODE_TOKEN>
",RyanZim,2016-08-07 12:17:54
777,2016-08-06 22:02:49,"@kittykatattack If this resolves things for you, please close this issue. Thanks!
",RyanZim,2016-08-07 12:17:54
776,2016-07-26 08:45:04,"If there is markdown area within a div that has had a `v-if` that goes from true to false, it results in a `""Cannot read property 'replace' of undefined.""` because the element is no longer in the DOM. This filter is not aware of this.

eg)

<S_CODE_TOKEN>

While that example would easily be solved with a `v-show`, my use case has variations of properties in each item, and the `v-if` contents can handle each different variation depending on a `type` in the computed property `active_item`.
",AdrianB93,2016-09-29 03:58:55
776,2016-07-26 08:47:58,"#758
",AdrianB93,2016-09-29 03:58:55
776,2016-08-07 17:02:28,"This is specific to Vue.js (which I do not know). Just make sure that `marked` be called upon a string, even an empty one, if needed. It seems that at times that `$root.active_editor.content` becomes undefined.
",Feder1co5oave,2016-09-29 03:58:55
776,2016-08-07 18:06:58,"Maybe take a look at #752 ?
",Feder1co5oave,2016-09-29 03:58:55
775,2016-07-26 07:05:41,"`\ -> \\`
when I used like `marked('\\dir')`, the output now is `<p>\\dir<p>`, but in HTML, it appears just like `<p>\dir</p>` 
",AmosJin,
775,2016-08-07 17:04:58,"Take into account that in Javascript string literals backslashes need to be escaped. So if you want a double backslash you need to write `'\\\\dir'`.
",Feder1co5oave,
775,2016-08-12 06:04:15,"I know that, what I mean is the `marked` should solve this in `code` tag, other tags are unnecessary. For example, if escape all `\` -> `\\`, the html in `code` tag will be strange, like `\\dir` -> `\\\\dir`.
",AmosJin,
774,2016-07-26 06:51:16,"I want to override method of `<img>`, However, I find that `<img>` is not recognized as html.
the following method is which I override:

<S_CODE_TOKEN>

so, which part should be override ? 
",poberwong,
773,2016-07-25 15:19:00,"I'm rendering images inside a `<figure>` element like this:

<S_CODE_TOKEN>

Figure elements are block level, but markdown wraps the output inside a`<p>`:

<S_CODE_TOKEN>

But this is not valid HTML and renders like this: 

<S_CODE_TOKEN>

I found out that lexers have a `paragraph` type, but I'm not sure how to set these:

<S_CODE_TOKEN>

**How to prevent a renderer method getting wrapped in a paragraph element?**
",sn3p,2016-08-11 14:13:47
773,2016-08-07 17:22:46,"There's no easy way to do this: you're trying to render a markdown inline element (an image) into an html block element (a figure).
A hack a could think of is to override the `paragraph` renderer too, in such a way that when the inline content is just a `<figure>` (outputted by your image renderer), it is not wrapped in `<p>` tags:

<S_CODE_TOKEN>

I've not tested this.
edit: for it to work, you need to be sure that images are in a paragraph on their own, so always place empty lines before and after them.
",Feder1co5oave,2016-08-11 14:13:47
773,2016-08-11 14:10:28,"Thanks @Feder1co5oave, had something similar in mind but was hoping for a cleaner solution.
",sn3p,2016-08-11 14:13:47
772,2016-07-25 04:10:47,"<S_CODE_TOKEN>

<S_CODE_TOKEN>
",xueyuchen,2016-08-30 04:19:08
772,2016-08-07 17:29:53,"Always put **two** empty lines in between adjacent lists:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Maybe next time provide your sample input in a more readable format ;)
",Feder1co5oave,2016-08-30 04:19:08
772,2016-08-30 04:19:02,"@Feder1co5oave  THX
",xueyuchen,2016-08-30 04:19:08
772,2016-10-12 21:38:26,"I have stumbled upon this ticket after quite a bit of searching. Is this some defined Markdown behavior, or just a quirkiness of this particular implementation? In any case, it is very counter intuitive.
",nicbou,2016-08-30 04:19:08
771,2016-07-23 18:05:10,"Right now I get images to display when it is properly markdown, but if it is gif or direct link, it won't show.

Is there option to enable direct image link to display?

For example, if user paste link and link is for image, it will display when it is marked back to html ?
I can make small changes or enable options, if there is any. I just started to use this, it is super fast and great! Thank you for this!
",feruzm,2016-08-07 17:45:06
771,2016-08-07 17:34:12,"Sorry Feruz, your question is not very clear. Can you rephrase?

I have no problems including directly linked images:

`![Pulsar](https://upload.wikimedia.org/wikipedia/commons/0/07/Game_of_life_pulsar.gif)`
->
`<p><img src=""https://upload.wikimedia.org/wikipedia/commons/0/07/Game_of_life_pulsar.gif"" alt=""Pulsar""></p>`

![Pulsar](https://upload.wikimedia.org/wikipedia/commons/0/07/Game_of_life_pulsar.gif)
",Feder1co5oave,2016-08-07 17:45:06
771,2016-08-07 17:45:06,"Hi @Feder1co5oave ,
Yes, I got it working, I meant. If you were to put just a link without formatting `[]()` for images would it parse them correctly. But solution I used was, after filtering links, I filter link to check if it is image and used above markdown as you mentioned.
",feruzm,2016-08-07 17:45:06
770,2016-07-15 19:16:36,"I would like to create a custom output (not only a string) from the marked. e.g `marked('### ooo')` results to `{tag:'h3', children: 'ooo'`}. The `InlineLexer` and `Parser` works with string output as a default, so you cannot output to a `object` . 

Now, by overriding `InlineLexer.add` and `Parser.processTokens`, you are able to set custom output (with a custom `Renderer` as well).  Could be done like this: 

<S_CODE_TOKEN>
",vtalas,
769,2016-07-11 19:26:26,"Perhaps something like `!` at the beginning of the line (not counting whitespace) can exclude the content from the HTML completely, unlike the `<!-- -->` syntax.

<S_CODE_TOKEN>

should compile to

<S_CODE_TOKEN>
",cchan,
769,2016-07-11 22:25:35,"Apparently I'm wrong; `<!-- -->` doesn't do that; it becomes escaped text.
",cchan,
768,2016-07-08 18:58:29,"- Add instructions for installing the cli tool
",mdentremont,
768,2016-08-02 14:22:00,"@chjj @matt- @parleur - This very small pull request will help rid Ember.js of some deprecation warnings, any attention would be much appreciated 👍
",mdentremont,
768,2016-09-02 13:50:07,"@chjj @matt- @parleur any chance this could be looked at?
",mdentremont,
768,2016-09-15 18:24:55,"@chjj @matt- @parleur This has been open and ready to go for months, could you please take a look and merge?
",mdentremont,
768,2016-10-17 14:15:10,"@matt- Thanks! ..you know you wanna hit that green button now, don't ya!
",mdentremont,
767,2016-07-07 05:53:18,"not sure if this is correct? should html comments support a newline with no space?
",SimonCropp,
766,2016-07-06 01:32:30,"An increasing number of developers are using Typings.  There is currently an externally-developed Typings file for Marked at DefinitelyTyped (https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/marked/marked.d.ts), but I am not sure how how well maintained it is.  It would be great to simply include that definition in the official marked package to ensure it is kept up to date.
",DerekTBrown,
765,2016-06-29 17:38:23,,arcs-,
764,2016-06-28 21:36:05,"I'm using markdown as the authoring syntax for a cli tool - I'm able to hook in to the renderer to replace html tags with calls to chalk.

The one place I'm not able to decouple markdown from html is escaped characters being converted into html entities. Would you accept a PR to enable turning off html escaping via an option?
",wheresrhys,
764,2016-07-03 00:13:41,"Duplicate of #529
",adam-lynch,
764,2016-07-03 21:34:15,"This would be excellent and a problem we have also run into (in a slightly different context).
",mharward,
764,2017-01-08 22:55:02,"I've worked around this by using lodash's unescape

<S_CODE_TOKEN>",amasad,
763,2016-06-26 14:40:22,"Such like the title .

Native : 

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",gclove,2016-07-13 09:58:46
763,2016-07-11 04:58:21,"the same issue for me！！
",liugangnhm,2016-07-13 09:58:46
762,2016-06-18 20:36:39,"Is there any support for expanding relative links to absolute ones?

[Looks like I'm not the first in need of such feature](https://github.com/optimizely/marked#changes-in-the-fork). I ended up setting [&lt;base&gt;](http://stackoverflow.com/q/1889076) in the document, but this brings some issues of its own.
",tallesl,
761,2016-06-18 10:38:15,"Bug in test due to case.
",parleur,
760,2016-06-17 17:41:32,"Hi!
This feature would be helpful to me!

Anyway I'm pretty confused with test. I do not find any test on method overwriting master is failing for me.

<S_CODE_TOKEN>

Looks like a bug.

Anyway let me know if you're interested in such a feature. If so I'll finish this with proper test and documentation update.

Cheers!
~ Marek
",turboMaCk,
759,2016-06-16 07:14:48,"I want to write an inline-code text within a backtick quotes<S_CODE_TOKEN> js
var marked = require('marked');
console.log(marked('`` ` ``'));
<S_CODE_TOKEN> html
<p><code>` </code></p>
```

An unexpected whitespace was so brightly.
",xovel,2016-06-16 07:23:17
759,2016-06-16 07:18:20,"Solved by #312. 
",xovel,2016-06-16 07:23:17
758,2016-06-11 15:21:37,"Uncaught TypeError: Cannot read property 'replace' of undefined
",AkashKG,
758,2016-06-14 22:46:33,"Same error here.
",jek10,
758,2016-07-22 16:19:49,"Just got the same error....
",CandiW,
758,2016-07-27 16:25:52,"Me too!
",ghettosoak,
758,2016-10-01 08:09:26,"I just got this error but from some quick debugging it happens when you pass `undefined` to the marked function. Check the variable you're sending to be converted by the marked processor.
",silverlight513,
757,2016-06-09 22:08:19,"Is there a way to get a full html document output in addition to the converted markup?
",StormToft,
756,2016-06-02 09:13:56,"@chjj Seems that you're busy with other projects.

This repo has so many open pull requests and if marked would die it would be very sad.
So please announce that you want to add some active maintainers for this tool.

@ChrisWren @Feder1co5oave @summivox
What do you think?
",timaschew,
756,2016-06-02 13:55:53,"I would have said yes if asked 3~4 years ago, but with CommonMark in place I would rather work on a compliant parser. This is actually one of the rare cases where the inverse of (insert mandatory ""xkcd standards"" here) happens or is about to happen.
",summivox,
756,2016-06-12 01:57:33,"Given @chjj does not respond to email, twitter or github mentions - does anyone know if Is there a process to take over the npm namespace somehow?
",tcurdt,
756,2016-06-12 07:34:50,"He is active on github, just not this project. I don't think you can get that without the permission of the original author,
",JCMais,
756,2016-06-12 08:39:37,"Hey guys. Yes, I've neglected this project. I've been wrapped up in my work for the past 7 months (to the point of obsession, really). I apologize for that. I'm open to adding new maintainers (or owners if we want to move this to its own org), as well as npm owners. Adding maintainers for marked was always an issue for me in the past since marked exploits the living hell out of regexes to get the level speed I wanted. There were two problems: it's hard to maintain because it relies on these things, and I was hesitant to add any feature that would decrease performance even slightly. I was always nuts when it came to perf (I remember 5 years ago, and spending many sleepless nights doing nothing but optimizing marked).

Marked was supposed to be a very small markdown compiler built for speed and nothing else, but now I realize it's probably outgrown that given the number of projects using it and requesting new features. (A number of my projects have outgrown me personally. I recently passed on development of term.js to some pretty smart people).

This is a strange situation. Ideally I would just be able to pass the reigns onto whatever other collaborator was working on marked with me before, but no one has worked on marked heavily with me in the past. That being said, I'm sure other people understand the code (and markdown) well. This is probably not the best way to choose maintainers, but if anyone here is willing, let me know. We can figure it out.
",chjj,
756,2016-06-12 10:47:46,"@chjj Hey Jonathan, thanks a lot for your input. I know it can be hard to let go - I've been there. But it's not that you forgive your rights as the original author and repo owner. You still get the email for the PR and if something is not going the way you want it you can just speak up. By adding other contributors you will just share the load on the easy stuff. You can still veto bigger changes. Best case you got some contributor growing to understand the all the details of the code base. Just give it a leap of faith.

And all is better than not fixing the security issue like it at the moment. So having at least one more contributor that also has access to npm would be fantastic.
",tcurdt,
756,2016-06-12 11:15:43,"@tcurdt, maybe I gave the wrong impression. I have no problem with others taking over development of marked. I have no issues with letting go. In the past I was just hesitant for someone else to have full autonomy because I was so protective of marked's performance. I had pretty strong opinions about what marked should be. Of course, it didn't matter that I didn't have another maintainer back then since I was still actively working on it, and marked isn't a very large project to begin with.

Anyway, things change, I've changed. I'm open to maintainers and contributors adding more features despite minor perf hits.

So, to be clearer this time, I'm completely open to whatever comes of this. Another maintainer would be great. Multiple maintainers would be even better (no more single point of failure (me)). We'll see what happens here.
",chjj,
756,2016-06-13 10:34:43,"@chjj It's great that marked won't die. How will you choose maintainers? Public vote for them? Or your personal choice? 
",lgg,
756,2016-06-14 21:21:40,"Hi @chjj,
I submitted https://github.com/chjj/marked/issues/592 and would be happy to contribute a maintainer.  I am currently working for a security company building runtime data flow analysis in Node. I think I would be able to contribute. 
",matt-,
756,2016-06-16 17:14:25,"I feel like given the popularity of `marked` we should definitely keep the project going and at least keep it maintained and suitable for use in other important projects!
As for me I would be glad to help tidy up the issue list, review and merge pull requests, and work out some fixes as well (I have a pretty good understanding of most of the code by now).
Many issues need to be closed or tagged, important fixes must be applied (e.g. the one by @matt-).

There are also some feature requests that are legitimate but I am unsure whether they should be included in marked. I feel like we should set some guidelines about philosophy and future development.
_For example_, what to do about automatically generated IDs for headers ( #664 ), inline links with parenthesis ( #619 #448 ), github task lists ( #689 )...

We would also appreciate some kind of comment from @ChrisWren since he's been a maintainer for a long time. He's been pretty inactive on Github for a while so we'd understand if he is busy at the moment. Just givin' him a shout out.
",Feder1co5oave,
756,2016-06-19 07:01:39,"Hey @Feder1co5oave I only made some README improvements a long time ago when I was learning about node.js. I no longer am actively writing node or using this project so I won't be contributing. Would be cool for other people to maintain who are using it and want to add features/improvements.
",ChrisWren,
756,2016-06-19 12:56:21,"Hi, I would be glad to help maintaining this project. 

I use marked through the Jupyter project. I would be interested in making marked a bit more flexible ( because markdown have too many flavors ), making the repo working with travis ( it will help to clean the PR list ), and of course review others code and merge pull request. 
Right now I have time to put into. 

I hope the project won't die.
",parleur,
756,2016-07-07 05:46:20,"so do we have a secondary maintainer yet? or a process for selecting one?
",SimonCropp,
756,2016-07-07 07:27:19,"@chjj Hey Jonathan, could you? Please.
",tcurdt,
756,2016-07-07 22:55:23,"I've added @matt- and @parleur as contributors. Thank you guys for stepping up. This repo needs maintenance. Once we get something going here we can get a better idea of where the project is headed. You guys have full authority for merging PRs. Any major features (i.e. new syntax) should be thoroughly discussed in PRs first. I'll try to keep my eye on PRs that propose any new features and give my input, but I don't think I should be a dictator of this project anymore.

I will be here to publish new versions in NPM once they're tagged.

I apologize to everyone for the stagnation of this project over the past several months. I think we can pick up where I left off though.
",chjj,
756,2016-07-07 23:19:44,"@chjj thanks. and awesome work on this library so far
",SimonCropp,
756,2016-07-07 23:49:30,"Thanks, Jonathan!
",tcurdt,
756,2016-07-08 04:55:07,"So we can close this
",SimonCropp,
756,2016-07-08 05:43:06,"@SimonCropp maybe left it open for some more time. until others will recognize that project is still alive?
",lgg,
756,2016-07-08 06:08:46,"better to post an update in the readme
",SimonCropp,
756,2016-07-08 21:01:42,"Releasing a new version is a great way to signal project vitality. Starting a Changelog at this point also be welcome.  http://keepachangelog.com/ has a recommended format. The Changelog could highlight the new maintainers/contributors. 
",markstos,
756,2017-02-21 23:09:36,"Link this issue:
`Perhaps it is time to consider a secondary maintainer of this repo? #727`
https://github.com/chjj/marked/issues/727",noraj1337,
756,2017-02-21 23:10:26,@chjj won't version bump or push out the currently merged stuff (including security issues). Our hands are tied. ,matt-,
756,2017-02-21 23:29:03,I guess having someone else being able to push to npm is more important than having access to this repo. Maybe @chjj could just do that?,tcurdt,
756,2017-02-22 15:33:20,"If transfer of access to active maintainers breaks down, the next step in the open source process is to fork and release under a new name. If the original namespace holder later allows for collaborators, it's possible the forks can merged back into the original name space.

If there are pending security fixes, the most important thing is that the security fixes are released to the public *in some form*.

This ""call for maintainers"" thread has been open for over 6 months. It's reasonable time to take the next steps if important updates are still waiting to be released.",markstos,
756,2017-02-22 18:08:28,"@markstos That would work, as long as this repo is deprecated and noted in the README to point to the new, active repo. Otherwise you're just adding one more fork to the existing [1685 forks](https://github.com/chjj/marked/network) out there. 🍴 ",styfle,
756,2017-02-22 18:41:22,"@styfle but how many forks have published on NPM? 

Developers are responsible for evaluating the quality the module they are choosing to integrate into their project. Checking a project's issue tracker for major update bugs, security issues and general maintenance before choosing a module can save considerable headache later.

In this case, there is already an open ""Call for Maintainers"" thread which should be flag for anyone evaluating choices for Markdown processors.",markstos,
755,2016-06-02 02:46:28,"TypeError: src.replace is not a function
Please report this to https://github.com/chjj/marked.
    at Lexer.lex (/Users/larry/Desktop/repos/CoolSlide/cool-slide/node_modules/marked/lib/marked.js:138:6)
    at Function.Lexer.lex (/Users/larry/Desktop/repos/CoolSlide/cool-slide/node_modules/marked/lib/marked.js:129:16)
    at marked (/Users/larry/Desktop/repos/CoolSlide/cool-slide/node_modules/marked/lib/marked.js:1218:31)
",Larry850806,
755,2016-06-16 08:23:03,"+1
",twoenzo,
755,2016-06-22 20:56:10,"Make sure that the first parameter to marked() is a string.

Returning null or throwing a custom exception would help diagnose this issue.
",uiteoi,
754,2016-05-21 01:51:10,"In node v6.2.0 and on ubuntu 16.04 LTS, I got `TypeError: src.replace is not a function` when calling 

<S_CODE_TOKEN>
",webarchymeta,2016-05-21 05:10:15
754,2016-05-21 05:10:44,"it's an encoding issue on my part ...
",webarchymeta,2016-05-21 05:10:15
753,2016-05-19 18:24:06,"For similar reason like here:

http://stackoverflow.com/questions/10302516/markdown-can-i-have-underscores-w-o-escaping-them-and-not-have-markdown-italic

I really want to remove the avoid italic format by underscore from my markdown, can you tell me if there is any option I can use in marked? 
",intijk,
752,2016-05-19 03:22:03,"route.js:72Uncaught TypeError: Cannot read property 'replace' of undefined
Please report this to https://github.com/chjj/marked.

webpack 

var marked = require(""marked"")

Vue.filter('marked',marked)
",chunhei2008,
752,2016-05-19 04:41:57,"I think the second argument of the `.filter()` method has to be a function that transforms the input:

<S_CODE_TOKEN>
",tabidots,
752,2016-05-19 06:31:38,"Thks, I know why i not work ,  i have try `Vue.filter('marked',function(input){
  return marked(input);
});`   and `filters:{
          marked : marked
        }`  . All works , beause the templates `<div>
      {{{input | marked}}}
    </div>`  input is undefined in the component , defined it in component data ,so fixed 
",chunhei2008,
752,2016-05-24 00:13:41,"Example:
https://jsfiddle.net/yyx990803/oe7axeab/
",ktquez,
751,2016-05-18 11:12:43,"Immediate Text after `<br>` tag is not enclosed in `<p>` tags.
",vikramarka,
750,2016-05-15 13:57:53,"I am using marked to render Markdown in an application, but I have a situation where I want to create some 'custom' renderings - similar to the way `gimmicks` are used in [md-wiki](http://dynalon.github.io/mdwiki/#!index.md).

I want to add some custom rules, such as the following;

<S_CODE_TOKEN>

And have it render output like...

<S_CODE_TOKEN>

I've seen that I can do this in `marked` by adding to the `rules` on the `block` literal, but this requires me to hard-code them into the actual library. Is there a way to add a rule to marked at runtime, that can allow me to leave the core library alone?
",ciel,
750,2016-08-17 14:36:42,"You could use the [overriding methods](https://github.com/chjj/marked#overriding-renderer-methods) to change the way a link is rendered depending on the link text just like md-wiki does.
",lejafar,
750,2016-08-30 18:07:27,"I think instead of overriding an existing method, what OP wants is to define a custom rule.
e.g. All existing rules should stay the same, but maybe `{ some text }` (or something similar) has a custom behavior.

Maybe this is relevant? https://github.com/chjj/marked/issues/504
",rubencodes,
749,2016-05-14 11:07:39,"I've learned that I can add custom blocks/behaviors by editing the `var blocks` literal and adding a `replace` function in the marked source code.

But I'd like to add some custom things in without modifying the original `marked.js` file. Is there any way to create the logic outside and just get them added? The reason is because I want to keep my changes standalone from the core marked library.
",ciel,2016-05-15 13:57:23
749,2016-05-15 13:57:22,"Going to close this and open an issue that is more clear about what I'm asking.
",ciel,2016-05-15 13:57:23
748,2016-05-09 18:50:05,,radarhere,
747,2016-05-05 05:30:56,"When the header is pure unicode content, the id of the header element would be a single dash(-). This patch fixes it.
",4Oranges,
746,2016-05-02 13:21:55,"There is a rising demand to move towards modularization of *_marked *_ and separate different components in different files(grammar-rules, lexers, parsers and renderers). This though not have been mentioned explicitly, is evident from issues #743, #717, #704.

A properly modularized code would make maintenance easy and also allow addition of new grammar, implementation of custom parser, renderer and would address separation of concerns properly.

Like may be we can have an `/src` folder to fiddle with the code in development and use `/lib` for deliverable file.
",Nalinc,
745,2016-05-01 16:07:48,"If I change a rule on one lexer, that change ends up getting applied to other lexers as observed with the following:

<S_CODE_TOKEN>

The change should have only been applied to `lexer` and not `newLexer`. This happens because the rules are not deep copied when a new lexer is constructed.
",kramerc,
745,2016-06-01 15:03:55,"Got exactly the same problem.
",Yimiprod,
744,2016-04-22 11:19:09,"Doesn't seem like # is working as expected, but everything else seems to work.
I have also included bootstrap

Any idea?

http://codepen.io/nelsonlho/pen/GZBmVG?editors=1111
",nelsonlho,2016-05-13 19:32:28
744,2016-04-30 01:18:53,"@nelsonlho 

(I'm not affiliated, but...)

I tried your link and got a 404.  Is your pen still active?  (Or did you resolve your issue?)
",scott-m-sarsfield,2016-05-13 19:32:28
744,2016-05-13 19:32:27,"this is really weird.  Let me replicate what I did again, and place a new issue if necessary.  Closing this for now.  Thanks
",nelsonlho,2016-05-13 19:32:28
743,2016-04-20 20:01:51,"I would like to add an attribute `data-id` to EVERY html node generated by marked. Is that possible?

Maybe with `var renderer = new marked.Renderer();`, but I did not find the way to get ALL nodes.
",paulocheque,
743,2016-04-20 20:55:05,"Maybe something like:

<S_CODE_TOKEN>

ps: check that we would need to add data-ids to all nodes, includings **children** nodes.
",paulocheque,
743,2016-04-20 22:33:59,"If I am able to include the `data-id` attr only for the parent nodes I guess it will be useful too.
",paulocheque,
743,2016-04-21 03:39:37,"I was able to add this extra attribute but I had to override all methods for each node type.

If you guys think this feature will be useful for the core, I can create a PR for that.
",paulocheque,
742,2016-04-20 17:59:01,"I think this is a typo, figured I'd put in a PR just in case.
",wski,
741,2016-04-19 03:31:00,"this can be support muti-languages

<S_CODE_TOKEN>

=>>> replaced

<S_CODE_TOKEN>
",humanhuang,
740,2016-04-17 16:26:51,"Split Lexer.token to Lexer.token and Lexer.tokenLoop

This allows to change tokenLoop and create custom markdown tag.

Usage example ($$equation$$):

<S_CODE_TOKEN>

Then you can change Parser.tok:

<S_CODE_TOKEN>

This is simple way to allow chjj/marked#379 as well as chjj/marked#564 and chjj/marked#425
",ghost,
740,2016-06-18 09:12:42,"Nice work !
However I think it slows down the lib a bit ( I only performed partial bench because robotskirt doesn't compile straightforward in my system). Have you performed full benchmark and could you publish it?
Also, one test fails:

<S_CODE_TOKEN>
",parleur,
739,2016-04-14 21:47:57,"This PR removes the `preferGlobal` flag from the `package.json` file.

This project is used in library-mode by quite a few other projects like `node-notifier` and `testem`. Installing these other projects via NPM however results in the following warning:

<S_CODE_TOKEN>

There are basically two ways to resolve this warning:
- split the library code from the cli code
- make sure people understand that they can only use the cli tool if they install globally (can be done in the README file) and remove the `preferGlobal` flag

Since splitting the library is a lot more (unnecessary) work I'm proposing the second solution.

---

Resolves https://github.com/chjj/marked/issues/652 as well as e.g.:
- https://github.com/senecajs/seneca/issues/313
- https://github.com/ember-cli/ember-cli/issues/5539
",Turbo87,2016-06-11 10:47:33
739,2016-04-25 13:34:03,"@chjj any comments?
",Turbo87,2016-06-11 10:47:33
739,2016-05-12 16:42:20,"@chjj friendly ping
",stefanpenner,2016-06-11 10:47:33
739,2016-05-12 17:18:20,"I don't think this project is maintained anymore. 
",JCMais,2016-06-11 10:47:33
739,2016-06-11 10:47:33,"@chjj feel free to reopen once this repo is maintained again 
",Turbo87,2016-06-11 10:47:33
739,2016-06-21 19:08:28,"@Turbo87 can you reopen this? There are other issues open for the preferGlobal flag to be removed. As long as this issue is closed, then people who search for this issue will conclude it has been resolved or is intentionally not being addressed. Better that the issue be open to indicate it's still an outstanding issue/request.
",jasonkarns,2016-06-11 10:47:33
739,2016-07-08 18:14:28,"@Turbo87 could we reopen this now that there are new contributors on this repo (@matt- @parleur)
",mdentremont,2016-06-11 10:47:33
739,2016-07-08 18:24:04,"@mdentremont unfortunately GitHub won't let me undelete the branch so I can't reopen. feel free to take the diff and open a new PR with it though.
",Turbo87,2016-06-11 10:47:33
739,2016-07-08 18:58:40,"See https://github.com/chjj/marked/pull/768
",mdentremont,2016-06-11 10:47:33
738,2016-04-13 13:04:48,,nalinchhibber,2016-04-13 13:05:07
737,2016-04-12 12:01:21,"Did this can convert html to markdown code?
",DirtyHao,
737,2016-08-21 14:54:32,"I am also interested in converting the html back to markdown format.
",popatop15,
736,2016-04-06 16:21:30,"Code:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

Right should be:   (My opinion)

<S_CODE_TOKEN>

by npm marked@0.3.5, nodejs@4.4.0

---

Thanks ~
",xuexb,
735,2016-04-01 15:05:49,"In Git and StackEditor do not allow to change empty content to em tag
`_abc_` -> _abc_
`_ _` -> _ _
`_123 123_`-> _123 123_

but marked change empty content to em tag
![image](https://cloud.githubusercontent.com/assets/6292309/14210955/5d7b6562-f866-11e5-9e9b-549a5a50da80.png)
",Vnthf,
734,2016-03-31 22:13:20,"Looks like from the last update, headers are not converted if a space is not connected. Reading through the discussions around the change, the official markdown documentation says this. Which is fine. 

However, if we turn on GFM, I believe it should mimic how gihub handles markdown and mmic it's behavior. This is not just to mimic github but there are many other libraries that have created GFM in this manner and conflicts with marked. 

For example I'm using another library that previews markdown in GFM and accepts headers without spaces. But when I use marked to output my html, those are not properly being converted. 
",uptownhr,2016-04-08 02:18:25
734,2016-04-08 02:14:36,"Is there an options to allow this?
",uptownhr,2016-04-08 02:18:25
734,2016-04-08 02:18:25,"Ok i just found out that disabling GFM makes this happen. The whole reason i wanted GFM is because I thought GFM allowed no space headers. Closed!@
",uptownhr,2016-04-08 02:18:25
733,2016-03-25 00:50:55,"https://github.com/chjj/marked/blob/18fb6a639a4a77dd59650879bcad10d833c40067/lib/marked.js#L747
",alice0meta,
733,2016-03-25 01:02:44,"oh, I figured it out, you're unique-ifying for spam harvesters

then this issue is a request for you to add a brief comment saying such, for future people :)
",alice0meta,
733,2016-06-16 16:04:26,"The function name and doc (""mangle links"") sound pretty self-explanatory to me, to be honest. Additional comments may be appreciated, though.
",Feder1co5oave,
732,2016-03-23 16:20:56,"I was looking at using the alternative `markdown-it` as they have a `renderInline` method to only parse inline elements.

I didn't want to pull in their lib due to the extra filesize, so I've made some tweaks to enable this as a configuration option which is disabled by default.
",webfella,
731,2016-03-21 13:17:02,"Currently, it only has a html renderer, but doesn't have a renderer that emits markdown from the tokens. A markdown renderer would be very useful to make this feature complete.
",prasannavl,
731,2016-06-16 16:06:29,"Why would you implement a markdown-to-markdown coverter, if I may ask? And what is preventing you from implementing such a renderer?
",Feder1co5oave,
731,2016-09-03 20:52:06,"Hey, was wondering if you found a solution? The markdown-to-markdown workflow is useful if you want to parse some Markdown, and automatically update some contents, but bring it back to Markdown. Say, to update a README.md file automatically, given some knowledge about the project.
",sebastienbarre,
731,2016-09-03 21:00:28,"@sebastienbarre, yup, that's exactly what I needed it for at the time of filing the issue. Unfortunately though, I didn't have the time to create a custom renderer. So, I ended up using complex regexes in the update phase to solve my particular need. But that was only since the scope of what I needed was limited and well defined in nature. 
",prasannavl,
731,2016-09-03 21:31:09,"@prasannavl a good soul just pointed out `remark`.

Here is how it can be done. The below example insert a TOC in your Markdown.

<S_CODE_TOKEN>

which will output:

<S_CODE_TOKEN>
",sebastienbarre,
731,2016-09-03 21:41:55,"@sebastienbarre `remark` looks pretty neat. Thanks for sharing. :) 
As to the issue, I guess it'll just have remain as it is, for now.
",prasannavl,
730,2016-03-20 13:58:39,"Hi, this portion of the readme seems incorrect. (“I am using 3.5.0”)

<S_CODE_TOKEN> js
var marked = require('marked');

var markdownString = '<S_CODE_TOKEN>';

// Async highlighting with pygmentize-bundled
marked.setOptions({
  highlight: function (code, lang, callback) {
    require('pygmentize-bundled')({ lang: lang, format: 'html' }, code, function (err, result) {
      callback(err, result.toString());
    });
  }
});
<S_CODE_TOKEN>

I get the following error,
TypeError: callback is not a function
",jellytux,2016-03-20 14:12:09
730,2016-03-20 14:12:09,"<S_CODE_TOKEN>

Have to be used instead of `marked(markdownString)`, my bad. Closed.
",jellytux,2016-03-20 14:12:09
729,2016-03-20 10:11:43,"Hi!

I have such a markdown:

<S_CODE_TOKEN>

Calling of `marked.lexer` returns such tokens

<S_CODE_TOKEN>

But `github` displays `h1` and `h2` as headings, not as `paragraph`.

This case works fine in `0.3.3` and is broken since `0.3.4`.

Thank you!
",eGavr,
729,2016-11-10 14:09:15,"having the same issue in 0.3.6 
",edsadr,
728,2016-03-14 22:56:24,"Changed sanitize default from true to false in the example.
",nehero,2016-09-08 17:10:39
728,2016-09-08 15:31:49,"👍  👍  👍  👍 

This really should be merged! People assuming that sanitizing is being done when it's not could lead to big security problems. (I personally think sanitize should be true by default!)
",JKillian,2016-09-08 17:10:39
727,2016-03-10 23:49:18,,SimonCropp,
727,2016-03-12 08:35:18,"+1

I'm using marked in all my projects an I hope it is not dead. A second maintainer would be great.
",Andifeind,
727,2017-02-21 23:07:17,"Project is dying (https://github.com/chjj/marked/issues/724), @chjj please add maintainers !",noraj1337,
727,2017-02-21 23:10:12,"This issue seems more active:
` Please do a call for maintainers #756`
https://github.com/chjj/marked/issues/756",noraj1337,
727,2017-02-21 23:11:39,Its not a maintainers issue. Many are merged into the master branch and waiting to be published. ,matt-,
727,2017-02-21 23:22:20,@matt- you're right. @chjj seems to only works on [bcoin](https://github.com/bcoin-org/bcoin) now. That's why is switched to [markdown-it](https://github.com/markdown-it/markdown-it) instead. That is active and support [CommonMark](http://commonmark.org/).,noraj1337,
727,2017-02-21 23:27:46,"As  a maintainer and would love to see this project live, but there is really no point in diving in to the backlog if we can get them out. ",matt-,
726,2016-03-07 13:52:47,"I've looked for an option but I don't see one. When I process my strings/messages, if the original has multiple newlines in a row, they are replaced with a single newline.

I would like to preserve those newlines outside of markdown. Is this intended? Is there a way to get around it? Glad to submit a PR if this could be added as a feature or flag... 
",phutchins,
726,2016-03-15 08:54:12,"In this regard markdown is like LaTeX, multiple whitespace is crushed into a single one. It just isn't in the philosophy of markdown to allow arbitrary whitespace.
",Feder1co5oave,
726,2016-03-20 20:59:25,"@Feder1co5oave that's what I figured. I'd like to propose adding a feature to the marked lib that allows you to preserve whitespaces. I could always fork and use my own repo but I figure others might benefit from it as well. Thoughts?
",phutchins,
726,2016-04-14 18:14:13,"Whether whitespace is compressed into a single new line should be the choice of the developer. 
",amZotti,
726,2016-04-14 19:43:16,"I do think it would be a nice option. I'm open to make the changes if pointed in the right direction. 
",phutchins,
726,2016-04-15 00:00:08,"@phutchins One way to do this would be to create a new token of `type: break` in `Lexer.prototype.token`. Modify the current line break regex to parse to add these custom `break` tokens to `this.tokens`. From there just add this new `break` token to the switch statement in `Parser.prototype.tok`. I made this change in my local version and it works perfectly.

Although, I doubt @Feder1co5oave would be willing to merge such changes.
",amZotti,
725,2016-03-02 09:10:13,"If i have a link like `http://xxx.com/xx/@xx/xxx`, you will compile it to a mail.

The code is at https://github.com/chjj/marked/blob/master/lib/marked.js#L580.

I think you can add some more check to it.

Thank you.
",nanqiu,
725,2016-07-28 01:35:40,"turn `@` to `%40`
",xovel,
724,2016-02-22 15:16:01,"With this many issues and PRs, I wonder if the project still lives when its 7 months since last update?
",Snorlock,
724,2016-02-22 18:39:38,"+1
",lferreirawork,
724,2016-02-23 06:15:52,"The project not being worked on is not an ""issue"" with the code, and posting observations like these to the issue tracker is just cluttering it up. If you want to ask the maintainer about this project's future, please just contact him directly.
",webbedspace,
724,2016-02-23 06:40:59,"@webbedspace i feel that it's important to raise the issue to make other who probably are thinking the same, aware of whats happening. I have many times seeked the issuetracker to see if this question have been asked, and if a response have been made. Sometimes this issue can spark the contribution spirit in someone who will fork the project and keep it maintained somewhere else. Its all about sheeding light on an issue with the repository.
",Snorlock,
724,2016-02-23 08:25:44,":+1: 
",anaran,
724,2016-02-24 07:58:05,"@Snorlock Good point. And since this project's last commit would be nearly 7 months ago ( and 127 PRs  waiting to be merged ), it's easy to doubt that if this project is still on the track.
",allenfantasy,
724,2016-02-24 08:33:41,"Yeah I believ it myself, but I want a comment from @chjj 
",Snorlock,
724,2016-02-26 16:43:00,"+1
",sn3p,
724,2016-03-03 13:02:25,"i'd say this project is dead.. 

can anyone recommend a reliable fork to switch to? If not, does anyone have a day or two free to create one and work through the pile of outstanding PRs? 
",75lb,
724,2016-03-03 13:13:01,":+1: 
",Ir1d,
724,2016-03-03 13:21:58,"@75lb  Not a fork, but https://github.com/markdown-it/markdown-it is the most active markdown plugin for js right now, it was a fork of https://github.com/jonschlinkert/remarkable.
",JCMais,
724,2016-04-05 06:20:20,"How about https://github.com/showdownjs/showdown?
",leocaseiro,
724,2016-05-01 04:06:31,"The Code doesn't age.
",ghost,
724,2016-05-14 23:18:45,"@wifiextender it is kind of sad that now there is a code vulnerability in it and we can't get that fixed. Is there an ability to move this to another maintainer? npm rights and such @chjj
",gabrielcsapo,
724,2016-05-20 01:41:25,"@chjj vscode is using this and they are moving away from it because of lack of movement on the project... 
",gabrielcsapo,
724,2016-06-13 02:26:16,"+1
",akuma,
724,2016-06-13 07:37:40,"Please see https://github.com/chjj/marked/issues/756
",tcurdt,
723,2016-02-20 15:52:41,"So I'm creating this thing to make a simple scientific documentation page. For this I am using markdown but needed to get around the use of markdown characters inside TeX equations, so I decided to fork this parser and extend it, maybe It should be made optional? 
## TeX formulas

Use TeX `$\partial_{\mu} A^\mu = 0$` inside markdown without worrying about the special characters.

<S_CODE_TOKEN>

Everything in between `$` or `$$` will be ignored and can be rendered by [KaTeX](https://github.com/Khan/KaTeX/tree/master/contrib/auto-render)

---

_These two extensions seemed useful? I don't know ..._
### Define keyword

<S_CODE_TOKEN>

will be rendered to

<S_CODE_TOKEN>
### Alert

<S_CODE_TOKEN>

will be rendered to

<S_CODE_TOKEN>
",lejafar,2016-02-28 14:21:48
723,2016-02-28 14:21:48,"A bug #722 was found, so more extensive testing is required ...
",lejafar,2016-02-28 14:21:48
723,2016-08-27 22:01:54,"What's the status on this? I'd like to be able to use MathJax or KaTeX with marked, but this issue is a showstopper.
",ViktorQvarfordt,2016-02-28 14:21:48
723,2016-08-27 22:48:53,"You can check out my changes changes f0fd2644ae96179b3252431e8aaa53d9d5b0ee94, this is an earlier commit as I might have been to fast accepting the last pull request. Looking at it now, it wasn't inline with what I actually wanted to do ...

I basically told marked to ignore everything between '$' or '$$' so that I could use '^' and '_' without worries, then I used the [auto-renderer ](https://github.com/Khan/KaTeX/tree/master/contrib/auto-render) to render everything between '$' inline and '$$' in display mode. 

It's probably better to render inside marked by changing the renderer method as there might be a reason why the auto-render extension isn't part of KaTeX proper yet. I'm thinking about,

<S_CODE_TOKEN>
",lejafar,2016-02-28 14:21:48
723,2016-08-28 00:55:19,"I see some issues with this. For instance, it does not handle `\begin{}..\end{}`.

Have a look at my new PR #799 and see what you think.
",ViktorQvarfordt,2016-02-28 14:21:48
723,2016-08-28 01:11:21,"I dislike the idea of interweaving marked and KaTeX. What about support for other math renderers (like MathJax)? What about if markdown is rendered on the server, and math in the browser? I think the markdown rendering and math rendering should be separate, making marked agnostic to how one renders the math.

Also, note that does have auto-render like MathJax: https://github.com/Khan/KaTeX/tree/master/contrib/auto-render
",ViktorQvarfordt,2016-02-28 14:21:48
722,2016-02-20 09:35:40,"Here‘s an example, which works:

https://gist.github.com/3846masa/cde99a18a8d7ad225cf7
",Jasper0819X,
722,2016-02-22 17:41:59,"[KaTeX](https://github.com/Khan/KaTeX) is the future of math typesetting for the web.

KaTex vs. MathJax:
![katex-comparison](http://khan.github.io/KaTeX/katex-comparison.gif)
",lejafar,
722,2016-02-22 18:07:45,"I've submitted a pull request #723 to ignore everything between $ or $$ to allow the use of KaTeX or MathJaX without the user having to worry about using _ or \* in TeX formulas
",lejafar,
722,2016-02-28 13:33:01,"Thanks a lot for your work, and sorry for my late...
I've tested your code in vscode and found a bug:

![bug](https://cloud.githubusercontent.com/assets/15362491/13379482/abf381c6-de61-11e5-83dc-cef6f1034f01.png)

how to fix it? I know little about js.
",Jasper0819X,
722,2016-02-28 14:05:23,"Thanks for pointing out, I guess I should've made it a block-level grammar rule, I'll change the code and do so more extensive testing ...
",lejafar,
722,2016-03-01 22:25:28,"I implemented this a while ago to use it with MathJax (I'll definitely have a glance at KaTeX since it looks promising). I use it regularly and I find it is quite stable.

https://github.com/chjj/marked/compare/master...Feder1co5oave:0341a2f

Basically you parse your markdown which includes `$ ... $` (inline math) and `$$ ... $$` (block level displaymath) tags, and then run `MathJax.Process` on the container you put your generated html code into.
",Feder1co5oave,
722,2016-11-07 04:40:02,"would be nice to have it merged if no issues are found. (works fine for me so far)
",anaderi,
721,2016-02-16 06:07:45,"`marked` compiles

<pre><code><S_CODE_TOKEN></code></pre>

to

<S_CODE_TOKEN>

Note here is a `\n` before `</code>` which causes [to-markdown](https://github.com/domchristie/to-markdown) compiles the marked-generated DOM to

<pre><code><S_CODE_TOKEN></code></pre>

Here is an unexpected `\n` before the triple backtick.

It will be better to compile the original markdown code to

<S_CODE_TOKEN>

to prevent that unexpected `\n` when used with `to-markdown`.
",Foolyou,2016-02-19 07:17:36
720,2016-02-15 19:36:50,"It would be great to have extended image attributes as in pandoc:

https://github.com/jgm/pandoc/commit/244cd5644b44f43722530379138bd7bb9cbace9b

In particular for sizing the image.

I'm using jupyter notebooks, which uses marked for rendering in-browser and pandoc for rendering everything else. Having as big an overlap of features between the two would be great.
",amueller,
720,2016-02-15 19:38:28,"or should I do that on my side considering #339?
",amueller,
720,2016-03-30 15:19:59,"+1
",spacedawwwg,
719,2016-02-14 13:47:45,"title.

I want to disable parsing images

<S_CODE_TOKEN>

should **not** be parsed
",babbelnedd,
719,2016-03-04 16:55:56,"See #420 
",Feder1co5oave,
719,2016-05-10 05:47:25,"Any updates on how can we disable parsing images?
",sahil290791,
719,2016-05-10 07:38:56,"No commits were made since my last comment. That method I linked is still the easiest one to achieve what you need.
",Feder1co5oave,
718,2016-02-09 14:43:43,"Is there a HTML embeddable editor, which uses marked for rendering?
",inf3rno,2016-05-15 18:13:29
718,2016-05-15 14:39:57,"SimpleMDE
",ciel,2016-05-15 18:13:29
718,2016-05-15 18:13:29,"@ciel Thanks!
",inf3rno,2016-05-15 18:13:29
717,2016-02-08 16:52:34,"I want to add some custom rules like

<S_CODE_TOKEN>

which should translate to something like

<S_CODE_TOKEN>
",babbelnedd,
717,2016-02-22 11:05:35,"+1
",MarkusPint,
717,2016-02-22 13:54:02,"Looking at the code it doesn't seem like it the tokenizer and parser are hard coded if statements.

I did it by first parsing what I needed first using regexs then passing the rest to marked.

It seems like being able to  add custom rules would slow it down and marked seems written for speed.

It would also be a nice feature.
",thisboyiscrazy,
717,2016-02-24 23:03:00,"Came here looking for the same. In a similar fashion I'm hoping to convert this in markdown:

<S_CODE_TOKEN>

To:

<S_CODE_TOKEN>
",benfrain,
717,2016-04-20 22:59:03,"+1
",auser,
716,2016-02-02 08:29:47,"<S_CODE_TOKEN>

highlight is invalid in the html page display.
",taadis,
716,2016-06-01 18:32:31,"neither works for me.
",sebastianjonasson,
716,2016-06-01 18:40:32,"Actually, it did work by adding the css manually.

`<link rel=""stylesheet"" href=""//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/styles/default.min.css"">`
",sebastianjonasson,
715,2016-02-01 21:17:49,"This was a regression in 0.3.4

See issue #641

Test plan:

In node, run

<S_CODE_TOKEN>

Previously, this would give `'<p>_ABC_DEF_</p>\n'`
",ariabuckles,
715,2016-02-01 21:45:21,"Update: forgot to build the minified version, and forgot to do `[\s\S]` instead of `_` after the backslash :/. I updated the commit.
",ariabuckles,
714,2016-01-30 12:50:51,"It doesn't work when I input :

hello[^hello]
<br/>
[^hello]: hi
",AlstonYang,2016-02-02 09:16:54
714,2016-02-01 19:41:22,"No, footnotes are a non-standard markdown extension and aren't supported, sorry!
",ariabuckles,2016-02-02 09:16:54
714,2016-02-02 09:16:54,"Okay, thanks for answering. Maybe I can implement it myself.
",AlstonYang,2016-02-02 09:16:54
713,2016-01-27 07:11:32,"Hi,

Would be nice to see the version number in atleast the .js files.

This allows systems to use specific version checks.

Regards,
",haringsrob,
713,2016-01-31 16:53:00,"Isn't the information you're looking for already available in git?
",prewk,
713,2016-01-31 16:57:14,"It would be nice if for example ""marked.min.js"" contains: version 3.5.0 
",haringsrob,
713,2016-01-31 21:00:21,"I'd recommend you to use npm, your `package.json` will tell you what version you have currently (or `npm list --depth=0 | grep marked`)
",prewk,
712,2016-01-25 17:40:39,"input.md:

<S_CODE_TOKEN>
1. see code:  
\<S_CODE_TOKEN>
2. next item
<S_CODE_TOKEN>

In `token` method ""list"" rule captures list items:

<S_CODE_TOKEN>

here `src` will be: 

<S_CODE_TOKEN>
 [key: string]: any;
}
\<S_CODE_TOKEN>```

I added ""\"" before block fence.
",evil-shrike,
712,2016-03-04 16:57:51,"Why did you add the backslashes? What is the output you expect from that source?
",Feder1co5oave,
712,2016-03-04 17:02:18,"@Feder1co5oave I added backslashes to prevent parsing this markdown here (by github). Actual source input.md has no ""\"".
",evil-shrike,
712,2016-03-04 17:33:01,"Ouch, you're right. This does look nasty!
I believe the problem is that `[key: string]: any;` is interpreted as a ""definition"" (a link reference that you usually put at the end of the document, but is expected to be found also inside other elements like lists and blockquotes).
Moreover, the output changes whenever the indentation of that code block is changed (I'm used to indent the content of a list item). I was able to get the correct output by applying the following patch:

<S_CODE_TOKEN>

However that lists regex definitely needs to be reviewed.

You can also easily work around this by putting a space between the `]` and the `:`
",Feder1co5oave,
711,2016-01-24 05:02:56,,ojongerius,
710,2016-01-21 16:45:51,"Addresses #133.

This is a similar PR to that in #536, except it uses an object literal for the whitelist rather than a Regular Expression. Sample usage:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

The tests aren't very well set up for passing complex parameters (array of strings) through to the options so I've left those out. If someone can explain how I can add these in, I'll be happy to update the PR.
",ryan-codingintrigue,
710,2016-06-24 21:29:21,"+1
",nativestranger,
709,2016-01-18 05:00:30,,pra85,2016-02-09 17:32:58
708,2016-01-12 06:39:44,,sandwich99,
708,2017-03-15 05:29:24,研究marked.js的朋友们大家好，由于很多中国的朋友对英语不是很熟悉，我们做了一个项目，项目介绍在www.osoc.org/A036.html。另外有个QQ群，方便在线交流。群号码：513117837,osoc,
707,2016-01-10 06:41:06,"A `<script>` tag's contents is escaped if it's sandwiched between two HTML tags, _and_ the first HTML element has another HTML tag on the line after it. To illustrate:

**Input:**

<S_CODE_TOKEN>

**Output:**

<S_CODE_TOKEN>

In this output, the contents of the `script` tag are escaped as if they were inside a `p` tag. Adding debug statements inside `Lexer.prototype.token` reveals that the `if (cap = this.rules.html.exec(src)) {` block is entered only once, and consumes the entire string. It looks like the HTML regex is matching the entire input document above as a single tag (or HTML block), which then sets the `pre` option to `false` and proceeds to escape special characters inside all tags in the document.

Additional examples:
**Input with blockquotes (so it's not just `p` tags):**

<S_CODE_TOKEN>

**Output:**

<S_CODE_TOKEN>

**Input with whitespace between the first tag and the script tag (works):**

<S_CODE_TOKEN>

**Output:**

<S_CODE_TOKEN>

**Input where the first tag is followed by a different HTML tag:**

<S_CODE_TOKEN>

**Output:**

<S_CODE_TOKEN>

All the above were performed with version 0.3.5 using the default configuration, via `marked -i repro.md` where `repro.md` contains only the given contents. 
",nhinds,
707,2016-02-16 15:30:47,"I think, because the regular of html cannot match all HTML line, like this:

I made a html function:

<S_CODE_TOKEN>

##### INPUT:

<S_CODE_TOKEN>

##### OUTPUT:

<S_CODE_TOKEN>

So, if only one `\n` between in two or more HTMLtags, the frist HTMLtag cannot been matched.
",hxsf,
707,2016-02-17 03:36:32,"I change the file `marked/lib/marked.js` line 23

##### Before Change

<S_CODE_TOKEN>

##### After Change

<S_CODE_TOKEN>

then, I fixed my problem,.

**but i don't know whether it cause other problems or not.**
",hxsf,
706,2016-01-06 11:50:57,"how to make blockquote regular expression similar to slack?
",birendra-ideas2it,
705,2016-01-04 14:12:29,"The default value of `sanitize` is `false` according to the description of `sanitize` (line 251 of README.md), but the example still listed `true` as the default value. A small test pointed out that the default value is indeed `false`.
",RickWieman,2016-01-04 22:47:24
705,2016-01-04 22:47:23,"Hmm, I see this is a duplicate of #481, #624, #634, #651 and #666. Therefore, I'll close this one again.
",RickWieman,2016-01-04 22:47:24
704,2016-01-02 09:54:26,"title. In my case I want to disable images.
",babbelnedd,
704,2016-01-11 05:48:25,"Does this work?

<S_CODE_TOKEN>
",isiahmeadows,
704,2016-01-20 18:03:14,"See #420 or use #660 if you just want to disable the _parsing_ of some type of feature, so that the source will appear at the output as-is.
",Feder1co5oave,
703,2015-12-30 21:54:24,"The goal of non-pedantic emphasis is to avoid emphasizing
the_middles_of_identifiers. The previous code failed, however, to
do this; for example, in this line

<S_CODE_TOKEN>

emphasis was applied from ""underscores"" through ""another"".

Implement a variant of the rules in redcarpet. Redcarpet's rules
say that an underscore matching `/\S_[A-Za-z0-9]/` does not count.
",kohler,
702,2015-12-29 07:16:38,"It allow marked render Chinese by default like that:

<S_CODE_TOKEN>

to this:

<S_CODE_TOKEN>

instead of:

<S_CODE_TOKEN>
",gengen1988,2017-02-14 02:48:20
702,2016-01-20 18:34:50,"The default heading rendered generates IDs just for convenience (many complained about this, too) and it must not be relied upon. Write a custom rendered with a generating function that suits your needs. I might suggest using something like https://github.com/jeremys/uslug
",Feder1co5oave,2017-02-14 02:48:20
702,2016-01-21 05:55:27,"Thanks for the suggestion. I can use uslug in my own project.

However some basic tool like ""Atom Editor"" use marked to preview markdown, also some tools such as ""markdown to pdf"" or ""markdown toc"" depend on it. I cannot force them all use uslug to render a usable heading link in Chinese or Russian.

Some python implements will render heading link to a random ID. Maybe we can use that as a default implements instead?
",gengen1988,2017-02-14 02:48:20
701,2015-12-27 22:01:15,"Would you consider an option to convert all links to Markdown files to HTML files? We're using Markdown for our documentation, linking to other Markdown files that are part of this. It would be useful if we could convert these links when generating HTML files.
",idleberg,
701,2016-01-17 20:42:10,"Use a custom renderer for links.
",Feder1co5oave,
700,2015-12-24 10:37:18,"I am getting this error when I try to use this library:

TypeError: src.replace is not a function
Please report this to https://github.com/chjj/marked.
   at Lexer.lex (/Volumes/External/projects/BuildCMS/node_modules/marked/lib/marked.js:138:6)
   at Function.Lexer.lex (/Volumes/External/projects/BuildCMS/node_modules/marked/lib/marked.js:129:16)
   at marked (/Volumes/External/projects/BuildCMS/node_modules/marked/lib/marked.js:1218:31)
   at figurePage (/Volumes/External/projects/BuildCMS/nodePress.js:227:12)
   at processPage (/Volumes/External/projects/BuildCMS/nodePress.js:160:23)
   at page (/Volumes/External/projects/BuildCMS/nodePress.js:135:9)
   at /Volumes/External/projects/BuildCMS/nodePress.js:110:16
   at Layer.handle [as handle_request](/Volumes/External/projects/BuildCMS/node_modules/express/lib/router/layer.js:95:5)
   at next (/Volumes/External/projects/BuildCMS/node_modules/express/lib/router/route.js:131:13)
   at Route.dispatch (/Volumes/External/projects/BuildCMS/node_modules/express/lib/router/route.js:112:3)
",raguay,
700,2015-12-28 10:04:16,"It might be that you are not passing an string trough but an object or array.
",joostlawerman,
700,2016-01-17 20:41:22,"^ Most likely this.
#682 
",Feder1co5oave,
700,2016-12-07 18:43:51,"I have this same error. I'm using firebase with polymerfire. If i bind a firebase document to `data` then bind `<marked-element id=""el"" markdown=""[[data]]"">` I'll get several of these errors.

I got around that by setting up this observer: 

<S_CODE_TOKEN>

That works fine but it would be nice if marked.js handled this check for me so i could just bind onto my data and go.",bennypowers,
699,2015-12-19 15:31:02,"Keep up to date.
Thanks :)

<!-- Reviewable:start -->

[<img src=""https://reviewable.io/review_button.png"" height=40 alt=""Review on Reviewable""/>](https://reviewable.io/reviews/chjj/marked/699)

<!-- Reviewable:end -->
",mitsuruog,2016-07-23 08:03:40
698,2015-12-19 14:13:03,"With sanitize set to false, apostrophes will still be sanitized depending on other content in the input.

To recreate, render the following line with {sanitize: false}:

<S_CODE_TOKEN>

Apostrophes will convert to `&#39;`

I don't think this is the intended behavior because rendering `<script>console.log('test1')</script>` (without the div tags) does not convert the apostrophes.
",benwasser,
698,2016-01-17 20:58:34,"Is there any particular reason you wrap a script element into a div like that?
`marked` is designed to parse markdown (inline) content in html tokens:

<S_CODE_TOKEN>

unless the top html element is either `script`, `pre` or `style`. Or, unless you've specified the `pedantic` option:

<S_CODE_TOKEN>

Unfortunately, `pedantic` triggers full compliance with the old `markdown.pl`, which may not be what you desire.
",Feder1co5oave,
697,2015-12-18 05:33:28,"Fix this issue. In the table cell does not display if bottom right corner of the table cell is empty.
This fix #188, fix #476, fix #693, and fix atom/markdown-preview#206
# before the fix

![before_fix](https://cloud.githubusercontent.com/assets/16305594/11890065/b734dc62-a593-11e5-8def-6116cd09f26f.png)
# after the fix

![after_fix](https://cloud.githubusercontent.com/assets/16305594/11890073/cfdcdca6-a593-11e5-9b54-19af91d7e986.png)
",icm7216,
697,2015-12-30 06:19:54,"Glad to see that someone already fixed :)
Sad that i didn't find it before i started to look into it...

It is btw shouldn't if the last empty cell has nothing inside(including no spaces)
",DoumanAsh,
696,2015-12-16 20:07:10,"without the input flag the CLI errors out
",wesbos,
695,2015-12-10 18:56:41,"Sometimes you just want to target specific parts of the input string and it would be nice to just throw a HTML file and say just render `.markdown` elements
",kilianc,
694,2015-12-05 20:31:18,"Some languages like Arabic and Hebrew are written from right to left, and considering many apps and websites now depend on marked, I would like to add support for text direction at the syntax tree level so it benefits every project that depends on marked. Here's how I'd go about it:
1. For elements like headings and paragraphs, perform a check to determine the direction of the text using the `text` property of the token. Here's how it is usually done:

<S_CODE_TOKEN>

  To avoid performance regressions, we could make this optional.
1. For tables and lists, check is performed for each cell and list item individually.
2. For the generated HTML, simply add the attribute `dir=""rtl""` for each element. Compliant browsers and apps should set the direction appropriately.

Are you interested in adding this feature? I could implement it.
",forabi,
694,2016-01-20 14:47:20,"i was looking for such feature it really will be helpful
",ali4ever4,
694,2016-03-28 11:04:38,"It would be very helpful to have RTL support in Marked. What do you think @chjj ?
",KayvanMazaheri,
693,2015-12-02 14:09:15,"Markdown code:

<S_CODE_TOKEN>

Rendered HTML code:

<S_CODE_TOKEN>

The last row (tr) has only 5 cells  (td's) ...
",lazytyper,
693,2015-12-07 16:13:24,"same for me
",mathieuales,
693,2017-03-15 10:22:16,Same here,loveaurellu,
692,2015-12-01 09:35:36,"I noticed that between 0.3.3 and 0.3.5 rendering of h3 stopped working if you do not put a space. 

In 0.3.3 these both work:

<S_CODE_TOKEN>

But in 0.3.5 this doesn't work anymore:

<S_CODE_TOKEN>
",iwein,
692,2015-12-09 14:19:49,"See #671 
",Feder1co5oave,
691,2015-11-28 03:05:01,"Hello, 

Right now I am trying to implement the scroll sync feature for a markdown editor.

Suppose I have the **.md** file with content below

<S_CODE_TOKEN>

which produces the html code  

<S_CODE_TOKEN>

So I want to map the generated html dom element with my markdown content.  
for example, I want the html code to be    

<S_CODE_TOKEN>

where `data-line=""0""` in `<h3 data-line=""0"">Hello</h3>` is from the **0th** line of the markdown, which is `### Hello`.

`data-line=""1""` in `<p data-line=""1"">this is a markdown file</p>` is from the **1th** line of the markdown, which is `this is a markdown file`.

Basically, I want to make a sourcemap (I am not so sure if I am using the correct term though)

Could please give me some suggestions how to do it.

Thank you.
",shd101wyy,
690,2015-11-23 17:44:15,"This is a carbon copy of [this bug](https://github.com/Microsoft/vscode/issues/380#issuecomment-158873568) for _VSCode_.

Here is an example where the preview engine in VSCode mis-renders links with parentheses:
![image3](https://cloud.githubusercontent.com/assets/1389609/11311743/8662bd8e-8f86-11e5-932f-885b5f6d7103.png)

Looks like a Marked issue - any way to fix it?
",dend,
690,2015-12-09 14:24:24,"There's no way to get around this issue. Just replace closing parentheses with '%29'
",Feder1co5oave,
690,2015-12-09 23:31:49,"Why not? Out of curiosity, the StackOverflow inline editor, for example, fully supports this scenario.
",dend,
690,2015-12-10 03:26:35,"Because that would require regexes that count matching opening and closing brackets. And even that is not correct, because URLs are not guaranteed to have balanced brackets in the first place.
",Feder1co5oave,
690,2015-12-10 07:30:28,"Surely the balanced parentheses case is more common and would cover 99% of the cases here? 
",dend,
690,2015-12-15 14:53:48,"Please consider that this behaviour would also break every existing link with escaped closing parens (and unescaped opening ones).
**IMO the best solution is to use references like suggested in the linked issue.**
",Feder1co5oave,
690,2016-02-17 08:10:47,"@dend I got the same problem
",hingsir,
690,2016-02-29 14:28:57,"An option that accepts balanced parentheses matching would be nice.
I don't care if it's off/false by default.
",sn3p,
689,2015-11-21 15:40:45,"my test code:

<S_CODE_TOKEN>

results:

<S_CODE_TOKEN>

my config:

<S_CODE_TOKEN>
",whisper-bye,
689,2015-11-23 14:02:19,"I think task lists are not considered part of [GFM](https://help.github.com/articles/github-flavored-markdown/), but as an [additional feature](https://help.github.com/articles/writing-on-github/#task-lists) of GitHub, just like auto-linking of commits/users/issues references.
",Feder1co5oave,
689,2015-11-27 01:27:57,"I was looking for this today as well.  Would love to see it added here!
",jasondavis,
689,2015-11-28 16:27:58,"I found this #107 , It works

<S_CODE_TOKEN>
",whisper-bye,
689,2016-04-07 00:26:56,"+1 to add this feature by default
",vsudakov,
688,2015-11-20 09:36:28,"This seems like the kind of thing that I want, but how about porting it to .NET?  I don't want to run a node.js server on my machine just to render some markdown, and .NET would be pretty portable because of Mono.

Failing that, is there anything out there like marked but for .NET?
",jez9999,
688,2015-12-22 22:52:11,"Can you use it in the browser as explained in the [README.md](https://github.com/chjj/marked/blob/master/README.md#browser)?

> ### Browser
> 
> <S_CODE_TOKEN>

Look at the [`lib/marked.js`](https://github.com/chjj/marked/blob/master/lib/marked.js) file.

Regards.
",aaroncalderon,
687,2015-11-18 19:25:16,"using `marked.min.js`:
- `marked(""- #1 fan"")` -> `<ul>\n<li>#1 fan</li>\n</ul>\n`

using marked via npm
- `marked(""- #1 fan"")` -> `<ul>\n<li><h1 id=""1-fan"">1 fan</h1>\n</li>\n</ul>\n`
",willrstern,
687,2015-11-19 16:35:16,"Have you tried updating your npm package? According to https://www.npmjs.com/package/marked it is updated to the last version available here, which includes https://github.com/ledsun/marked/commit/1df58933c788c9a673b35b4463cca8e4a48e51aa that introduced the different behaviour you're seeing.
",Feder1co5oave,
687,2016-03-15 11:19:24,"+1 And the version I am using is 0.3.5 installed from npm. It is generating id's for h tags.
",ankitduseja,
686,2015-11-17 16:18:22,"I found useful undocumented ""langPrefix"" option :)
",shpakovivan,
685,2015-11-17 13:22:30,"This may well be an edge case, but I’m making an issue anyway.

In my markdown, I sometimes want to customize the output a tad by adding HTML, such as adding an icon in front of a heading; `# <span class=""font-icon font-icon-logo""></span>Heading text`.

This works just fine, but the anchor generation is too stupid in this case, as it will generate the following output; `<h1 id=""span-class-font-icon-font-icon-logo-span-heading-text"">Heading text</h1>`. Hardly what I want and certainly not what I expect.

I made a renderer to get around the problem, but would prefer if Marked was smart enough to handle it all by itself. And without jQuery as a dependency, obviously.

<S_CODE_TOKEN>
",Haraldson,
684,2015-11-16 23:47:30,"An ordered list followed by an unordered list shouldn't be combined, even in non-smartLists mode.

Should fix #530.
",kohler,
684,2016-07-05 13:09:32,"Would it be possible to merge this in? it does fix #530 
",janhui,
683,2015-11-16 20:42:45,"The `text.smartypants` tests differ between the `test/tests` and `test/new` directories (so after `node test --fix`, `node test` fails the smartypants tests). The `test/tests` versions appear to be the right ones.
",kohler,
682,2015-11-15 18:55:10,"I agree with what @scottgonzalez said here: https://github.com/chjj/marked/issues/417#issuecomment-42740178

I chose to return `null` instead of an empty string in order to let the user know there's a problem, and that it's probably his fault.

The `TypeError` is still thrown if a user calls manually `Lexer.lex` and then `Parser.parse`, but I think it's her/his business at this point.
",Feder1co5oave,
682,2015-11-15 21:40:38,"We got several issues opened here because of this:
#168 #417 #447 #291 #442 #635 #658 and god knows how many more slipped my search.
",Feder1co5oave,
682,2015-11-17 22:29:10,"Returning `null` is correct, IMO.  There's no string to parse, so it shouldn't be cast as one.
",ericclemmons,
682,2016-06-16 17:06:11,"Just for reference, here are some more related issues that should be closed:
#681 #755 #758 
",Feder1co5oave,
682,2016-08-07 17:02:39,"#776 
",Feder1co5oave,
682,2016-08-23 20:51:03,"In my case I was using `fs.readFileSync` (yeah...I know) and passing it's output to `marked()` which failed with this `replace` error. Casting the output through `String()` did the trick for reasons I know not nor have time (for this project) to dig into...sadly. Hopefully the research is helpful, though!

Having `marked()` return `null` while correct would've made debugging things for me worse, though, I agree with @ericclemmons that it's likely the correct behavior technically--or perhaps throwing an deliberate Error would be best.

---

Well...you know how you post something and then fix your bug?

<S_CODE_TOKEN>

Does the trick without the `String()` bit.
",BigBlueHat,
682,2016-08-27 20:37:10,"A reasonable alternative could be to return `null` on `null` input, and throw an exception on non-string input. That way the programmer can easily see he's calling `marked` on a wrong type.
It looks pretty pointless to pontificate further though, as it seems marked's development is completely stalled.
",Feder1co5oave,
682,2016-09-26 21:57:57,"#787 #794 #802
",Feder1co5oave,
681,2015-11-15 11:56:28,"I used marked in a  meteor app
",libchaos,
681,2015-11-16 05:15:47,"It's my fault, I pass marked nothing.
",libchaos,
680,2015-11-13 13:01:18,"Added options.lineNumbers

<S_CODE_TOKEN>

Renders

<S_CODE_TOKEN>

Also added lineNumber renderer

<S_CODE_TOKEN>

**WARNING**: Degrading in performance in node.js due to Extract Method refactoring. From _3496ms_ to _4008ms_.
Tests passed
",andr2,
680,2015-11-15 21:59:52,"What possible use of this is there?
Also sorry, but output is awful:

<S_CODE_TOKEN>
### Spurious wakeups

The `pthread` documentation says

> Spurious wakeups from the `pthread_cond_wait()` function may occur. Since the return from `pthread_cond_wait()` does not imply anything about the value of this predicate, the predicate should be re-evaluated upon such return.

When a ""spurious wakeup"" happens, a thread that is currently blocked on `pthread_cond_wait()` is awaken, even if no other thread has called `pthread_cond_signal()` on that condition. This means one must re-evaluate the condition every time the `pthread_cond_wait()` returns and, if needed, call it again.

A good rule of thumb is to always wait upon a condition variable within a loop which checks the condition every time:

<S_CODE_TOKEN>
<S_CODE_TOKEN>

<S_CODE_TOKEN>
",Feder1co5oave,
680,2015-11-18 07:13:57,"I use it my editor/preview control. I think it works smooth.

Also added a code snippet:

# Preview synchonization

## Markdown preview block

For markdown preview block on scroll event you can use the following code.
**toLine** - float row number (for accurate and smooth synchonization)

<S_CODE_TOKEN>

## Ace editor integration

<S_CODE_TOKEN>
",andr2,
680,2015-11-18 07:18:12,"@Feder1co5oave line-number inside a blockquote is a bug. I will fix it.
",andr2,
680,2015-11-18 07:41:25,"Fixed blockquote bug.
If performance is critical maybe it will be better to inline `find` function
",andr2,
680,2016-01-26 04:33:41,"Hi, I think the line number doesn't work properly for ""list"".
It didn't add line number for each ""li""
Could you please have a look?
Thank you
",shd101wyy,
680,2016-01-26 07:47:59,"@shd101wyy Hello! Unfortunately it only works for top level blocks, because it requires more serious refinement otherwise.
You can scroll proportionally by top level blocks
",andr2,
680,2016-01-26 08:48:31,"Thx!
",shd101wyy,
680,2016-04-20 22:31:13,"@andr2 I am having the same issue to solve. Did you stay with that solution? How is the final performance to the end user?

ps: I am using percentage of the editor/preview scroll position to synchronise the other panel.
",paulocheque,
680,2016-04-21 13:11:41,"@paulocheque yes. For nested blocks I scroll proportionally (see code sample above). 
Performance is OK
",andr2,
679,2015-11-12 15:52:54,"<S_CODE_TOKEN>

how to get/set original text?? like ""~~hello~~""
thx~
",whisper-bye,2016-07-06 19:36:39
679,2016-06-16 16:16:12,"You simply can't. You need to take care yourself of saving the original markdown code you parsed.
In your code, the string ""~~hello~~"" exists only as a literal string in that javascript block, and is lost afterwards.
",Feder1co5oave,2016-07-06 19:36:39
678,2015-11-12 15:24:35,"**Atom Version**: 1.1.0
**System**: Mac OS X 10.11.1
**Thrown From**: [api-workbench](https://github.com/mulesoft/api-workbench) package, v0.8.6
### Stack Trace

Uncaught TypeError: Cannot read property 'replace' of null
Please report this to https://github.com/chjj/marked.

<S_CODE_TOKEN>
### Commands

<S_CODE_TOKEN>
### Config

<S_CODE_TOKEN>
### Installed Packages

<S_CODE_TOKEN>
",deem0n,2015-11-16 12:10:15
678,2015-11-15 12:18:34,"How to solve this? 
",libchaos,2015-11-16 12:10:15
678,2015-11-15 18:26:34,"Gentlemen, this is a known ""non-issue"". You're passing marked some null value, or something that is not a string.

Refer to:
#168 #417 #447 #291 #442 #635
",Feder1co5oave,2015-11-16 12:10:15
678,2015-11-16 05:17:40,"Thanks@Feder1co50oave
",libchaos,2015-11-16 12:10:15
678,2015-11-16 12:10:15,"Ok, then
",deem0n,2015-11-16 12:10:15
677,2015-11-12 13:22:05,,kkoehne,
676,2015-11-12 13:15:05,"marked.js contains the error message
`
 return '<p>An error occured:</p><pre>'
`
This should be
`
 return '<p>An error occurred:</p><pre>'
`
",kkoehne,
675,2015-11-11 10:11:42,"After looking around a bit I didn't see a MD compiler with video support. Because I like to use [remark](https://github.com/gnab/remark) for my presentations, I thought I'd add this renderer.

If no one's interested, or it doesn't fit in with the rest that's fine too :+1: 
",fritzvd,
675,2015-11-11 10:27:40,"Image images are there, why not videos?
+1
",alexkravets,
675,2016-01-20 18:36:56,"This looks useful, although I'm not sure about the default `autoplay loop` options.
",Feder1co5oave,
674,2015-11-05 15:21:10,"Hi, 
Loving this library by the way.

I am trying to add a title/caption to a table. At first i tried to add a `[title/caption here]` as the last line of the table, however that didn't work. Then I tried to center a line of text below the table with `->content here<-` - which is the common way to center text from markdown. 

Any suggestions of how I can do either of the above in marked?

Out of interest, can I add markdown features? For instance, I love this: http://bramp.github.io/js-sequence-diagrams/ and I want to be able to call upon it from markdown...
Thanks
",amlwwalker,
673,2015-11-04 11:00:32,"Fixes #672 
",mnylen,2017-03-23 12:44:13
672,2015-11-04 09:49:50,"Example says it better:

<S_CODE_TOKEN>

However, as `renderMarkdown('_ foo_')` produces `<p><em> foo</em></p>`, I'd expect it to work for strikethrough as well.
",mnylen,
672,2015-11-15 20:45:28,"I don't think this behaviour would be widely desired... usually you strike through a word or set of words, and leave untouched the space around them.
Notice also that GitHub's markdown doesn't work your way:

~~ text ~~

This behaviour was introduced in https://github.com/chjj/marked/commit/a1080df787d1cfe29ac97e77dc5e263727fa3f20, believing -- I think -- it would adhere better to the standard.
",Feder1co5oave,
671,2015-11-02 23:56:20,"Fixed header formatting for both ""#[text]"" and ""# [text]""
",onlineth,2015-11-15 21:46:26
671,2015-11-15 21:02:25,"You should provide some simple examples to show this behaviour.

Anyway, this problem is only relevant for GFM, since if you disable it you can omit the space between the hash and the header's text. In fact, Github uses hashes to link issues, that's the reason to require a space in between.

<S_CODE_TOKEN>

###Header

### Header
",Feder1co5oave,2015-11-15 21:46:26
671,2015-11-15 21:31:28,"Read #201 
",Feder1co5oave,2015-11-15 21:46:26
671,2015-11-15 21:46:59,"Thank you @Feder1co5oave for pointing that out
",onlineth,2015-11-15 21:46:26
670,2015-11-02 23:48:49,"It seems that header text with a space in between the ""#"" and the actual text does not get formatted
",onlineth,
670,2015-11-03 00:00:01,"https://github.com/chjj/marked/pull/671
",onlineth,
669,2015-10-19 14:05:43,"A single unordered list:
- one
- two
  - two item1
  - two item2
- three

The html is rendered as five unordered lists with one item in each list, and no indentation of nested items.  Expecting an unordered list with a nested unordered list under item two.  Have tested the markdown with the Markdown Web Dingus.
",kbhawkey,2015-10-19 15:41:29
669,2015-10-19 15:41:29,"The problem was a line between the list items and the amount of indenting to nest the lists.  I was following gfm.
",kbhawkey,2015-10-19 15:41:29
668,2015-10-15 01:22:46,"Since marked provides the language name, highlight.js can run much faster knowing it rather than guessing it.

I'm currently working on a static site generator and this simple change just saved me ~200ms (from ~570ms down to ~380ms) on an extremely basic test page with only 3 code blocks. I figure this change would help new users do it the more efficient way from the start.

One little problem with this change though... if the lang is ""undefined"", highlight.js doesn't seem to like that:

<S_CODE_TOKEN>

I completely understand if this isn't a suitable PR because of the possibility of an undefined lang breaking highlight.js
",jakedeichert,2016-11-20 02:05:00
667,2015-10-08 17:20:41,"With GFM, both inline code blocks and fenced code blocks provide the following DOM structure:

<S_CODE_TOKEN>

Inline code block:

<S_CODE_TOKEN>

Fenced codeblock:

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

I would like to style the inline code block differently with CSS than the fenced code block.

How can I do this? There's no way to target the inline code block.
",gaui,2015-10-12 18:00:52
667,2015-10-11 17:02:45,"What options are you using? It should produce

<S_CODE_TOKEN>

for fenced/block codes, and

<S_CODE_TOKEN>

for inline code. For styling you can select `code` for inline and `pre code` for code blocks.
",fnky,2015-10-12 18:00:52
667,2015-10-11 17:13:22,"It produces in both cases `<p><code>... </code></p>`

I'm using default options.
",gaui,2015-10-12 18:00:52
667,2015-10-11 17:31:32,"Can you give an example of your code and markdown?
",fnky,2015-10-12 18:00:52
667,2015-10-11 20:03:55,"Here is a screenshot. I'm using `marked()` without any options so it's using default options. As you can see there is no difference between the HTML of an inline code block and a fenced code block.

![image](https://cloud.githubusercontent.com/assets/477881/10418721/2f4a479e-7053-11e5-8378-2dcbb4370e6c.png)
",gaui,2015-10-12 18:00:52
667,2015-10-11 23:25:17,"This is actually expected behaviour with GFM. It's required to have a newline (`\n`) character after start fence (except you can provide a language extension after start fence)

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

becomes

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

becomes

<S_CODE_TOKEN>

The reason is that inline code uses single back ticks, so unescaped back ticks will be ignored in the output. Example of escaped back tick in inline code <S_CODE_TOKEN>
`` ` ``
```
",fnky,2015-10-12 18:00:52
667,2015-10-12 18:00:52,"@fnky Thank you very much. Problem solved. :)
",gaui,2015-10-12 18:00:52
666,2015-09-30 19:37:06,,bobby-brennan,
665,2015-09-30 16:48:16,"Hi there,

I'm using Marked on my website and I'm trying to override the `list` functions to stop an ordered list being created in certain scenarios:

<S_CODE_TOKEN>

Ideally should become:

<S_CODE_TOKEN>

Now, obviously I'm getting the default Markdown behaviour:

<S_CODE_TOKEN>

Yet neither `list` nor `listitem` will allow me to change the output of the list. I've checked both functions to see what they provide as their `body` argument, and both `body` arguments are the `<li>` tag, so whatever I return will be children of the `<ol></ol>` tag so therefore I cannot remove the `ol` tags at all.

Is there any other function I could use to override the list in this case?
",jdrydn,
665,2015-11-15 21:08:07,"You didn't specify what ""certain scenarios"" mean.
Anyway, I can't understand what you mean with your last paragraph. If you want to suppress the generation of a list you should override `list` and `listitem` in a custom renderer. The latter takes in as `body` argument the text inside the item, and the former takes whatever all calls to `listitem` return.
",Feder1co5oave,
665,2015-12-15 10:12:05,"Imagine a blog post where it's ""_Top 10 reasons to use Marked_"", and a visitor leaves a comment with the content:

<S_CODE_TOKEN>

At the moment, if you run that content through `marked` it'll spit out:

<S_CODE_TOKEN>

Which of course will be rendered as:

<S_CODE_TOKEN>

Which is obviously not what the original input was!!

I'm gonna return to experimenting with `list` and `listitem`, but IIRC it still added the `<ul>`/`<ol>` tags when using both which caused the number to reset!
",jdrydn,
665,2016-01-11 06:06:07,"I have another use case, if this might help: I'm writing a custom renderer that parses regular Markdown, but instead of printing HTML, it prints an equivalent, markdown-ish version that doesn't use newlines, for previews to be loaded via XHR. In my case, I need to either be able to return an object from `listitem` or know in `listitem` if it's in an ordered list or not, so I can return the appropriate prefix. Currently, I'm hacking around it this way (by using a primitive string serialization technique), but it's far from ideal:

<S_CODE_TOKEN>

Ideally, the parser shouldn't assume that the renderer only returns strings. Every React port of this either has to write their own parser or literally fork Marked altogether. And every other vdom library will suffer similarly as well.

Granted, for my uses, despite the superficial simplicity, I will likely have to implement my own parser from Markdown's lexer. Although it's not ideal, it's not as hard as it could be, since I'm literally just building a string from a stream of tokens.
",isiahmeadows,
664,2015-09-27 13:35:22,"While trying to render markdown docs from github getting inconsistent anchor / link combinations (due to the header ids being forced to lowercase ). For an example, below is one such doc:

<S_CODE_TOKEN>

The generated header ids are all [forced lower case](https://github.com/chjj/marked/blob/master/lib/marked.js#L800), while the generated `a href` links are retained ""as-is"".
-    Please add an option to control the casing for all generated header ids and internal hrefs (to either use ""same case"" or force lowercase). 
-     or, consistently force the same casing for all generated internal link `hrefs` and anchor ids,
-     or, when user explicitly specifies an internal link (as above) anywhere in the markup, ensure that generated ids are consistent with user expectations (without changing the case anywhere).

Forcing the lowercase only for header ids, while leaving the `<a href` ""as-is"" is causing un-navigatable docs to be rendered.
",KrishnaPG,2016-06-17 05:05:37
664,2015-11-15 21:20:23,"Auto-generated header IDs is a much discussed topic for marked, so any change to the current default behavior is going to upset some people.
The official suggestion is to never rely on the IDs generated by the default renderer and create one of your own that suits your needs.
For you, the following should do.

<S_CODE_TOKEN>
",Feder1co5oave,2016-06-17 05:05:37
664,2015-11-16 05:08:45,"Thank you.  Your code snippet is helpful.

However, the problem is not as much about the _the exact IDs generated_, as it is about _consistency between the ID and the internal a href anchors_

When the document authors specify explicit header IDs, they inevitably use them in the anchor tags (for example, to generate TOC). So, creating custom renderers with custom IDs as you have suggested will break the document.

For example, consider this line I sampled from one of the document TOCs:

<S_CODE_TOKEN>

Unless the header `We need better tools!` gets the same ID `#We-need-better-tools!`, the TOC is broke and document becomes unnavigatable.

The solution is not to customize the header generation, but to use explicit IDs (if supplied by the author) as is, without customizing them further.

If the author supplied explicit IDs, there must be a good reason why he did so. For all that we know, the author might even share that link somewhere outside externally and we should be able to resolve it correctly. Using our own transformations on the headers, will break such documents.
",KrishnaPG,2016-06-17 05:05:37
664,2016-06-16 16:37:57,"You speak about explicit IDs for headers, but
1. you don't explain how these explicit IDs should be specified by the author
2. `marked` does not support such a thing right now
3. AFAIK plain markdown does not envision this feature (nor does commonmark)
",Feder1co5oave,2016-06-17 05:05:37
663,2015-09-21 13:32:35,"When specifying the following Markdown (without any non-default options specified for `marked`):

<S_CODE_TOKEN>

... this is the result (beautified, tested via an instance in the browser):

<S_CODE_TOKEN>

Despite being syntactically valid - two separate lists, delimited by two newlines like any other 'element' in Markdown - strange paragraphs are inserted at the 'intersection' of the two; that is, the last element of the first paragraph, and the first element of the last paragraph.

Options for correct (that is, sensible and expected) behaviour would include:
- Producing two separate `<ul>` elements, without any paragraphs in the list items.
- Producing one combined `<ul>` element, effectively ignoring the double-newline, without any paragraphs in the list items.

GitHub itself appears to be having the [same issue](https://github.com/joepie91/node-get-exchange-rates#data-format), but I'm not sure whether they use `marked` or a port of it (or even just an implementation based on the same rules). I've reported the issue to them separately.
",joepie91,
663,2015-09-23 23:16:56,"@joepie91: Does the `smartLists` option yield the same result?
",gscottolson,
663,2015-09-23 23:36:02,"Yes, it seems to behave the same regardless of the `smartLists` setting.
",joepie91,
663,2015-11-15 21:37:07,"You should put **two empty lines** (aka 3 newlines) in between the two blocks to get two separate lists with marked:

<S_CODE_TOKEN>

Github  doesn't use marked, nor a port of it.
",Feder1co5oave,
662,2015-09-18 03:22:29,"Fixed typo ""unnecesarily"" to ""unnecessarily"" in section ""Philosophy behind marked"" of README.md (line 300).
",JTKnox91,
661,2015-09-15 01:59:17,"I need form fields,  how to render input and radio form and others ?
",hojas,
661,2015-10-19 10:02:44,"Just writing original HTML in markdown files.
",minwe,
660,2015-09-09 21:44:54,"A simple change that let you disable any markdown element.
It's better creating an option than using [unsafe tricks and hacks](https://github.com/chjj/marked/issues/420#issuecomment-44746538)
## Examples

<S_CODE_TOKEN>
",Guichaguri,
660,2015-09-09 21:53:04,"I just found #579.

#### Differences
- This one works with GFM.
- It's an option instead of a new function.
- Can be applied to a single marked call (`marked('---', { disableElements: ['hr'] })`)
",Guichaguri,
659,2015-09-08 23:10:09,"I tested locally in the project I wanted to use this with:
- by default it behaves the as it does now: links open in the same tab/window
- setting it to true via `setOptions`: links opens in a new tab/window
- setting it to false via `setOptions`:  links open in the same tab/window

Also, checked the README entry by looking at it on github.

Unit tests would be nice but I don't have time to grok how the tests work in this repo and other stuff is also not unit tested (e.g. `smartLists`)
",drmuey,
659,2015-09-08 23:13:03,"NTS: when finalized and merged go back to CDN (i.e. reverse `g show a82fbb3 -- views/layouts` && update version)
",drmuey,
659,2015-09-09 05:49:57,":+1: 
",julmot,
659,2015-09-11 07:11:18,"`target=""_blank""` is deprecated according to the whatwg spec. In any case, is there a situation where you would want a user to open _all_ links in a new tab? Is there a more contemporary syntax for this?
",chjj,
659,2015-09-11 07:25:33,"@chjj Could you please provide a reference? For me this seems to be not deprecated (e.g. on [HTML5 Spec](http://www.w3.org/TR/html5/browsers.html#valid-browsing-context-name-or-keyword) or [W3Schools](http://www.w3schools.com/tags/att_a_target.asp).

Well of course there are lots of use cases where you want to open specific links (e.g. that were rendered via marked) in a new tab. For example I'm currently building a webapp where informations about documents are shown. These informations are written in Markdown and parsed with marked. However, if the user clicks on a link in the informations about a document he just wants to open that link in the foreground but don't want to leave the app completely (because he may want to open multiple documents). So in fact, this is a very important standard for me and I think for other too.
",julmot,
659,2015-09-11 10:07:41,"@julmot, very interesting, the last time I looked at the whatwg spec (probably 2 or 3 years ago), target=_blank was deprecated. I'll reconsider. As a side node, I'd like to see the mailing list posts that got this back into the spec.
",chjj,
659,2015-09-11 10:16:44,"Ok so can we integrate `target`-attribute on links?
",julmot,
659,2015-09-11 14:20:39,"e.g. page content may not want it, user comments definetly want it. I wish github did it in issues/pull requests (but not README.md) so I don't lose my spot in a thread when checking out a related link. 

Since it doesn't change default behavior no one will be surprised and its there if they do end up needing it.

If there is a better way than target=""_blank"" cool, we can just update this change later once that is discovered and everyone will start rendering the latest hotness :)
",drmuey,
659,2015-10-08 16:54:12,"This would be helpful, and what @drmuey says seems true (won't break prior code).  :+1: 
",posgarou,
659,2015-11-13 14:53:09,"Any updates on this? It is not the first time that this is a requirement for a project.
",namxam,
659,2015-11-13 15:09:03,"@chjj 
",julmot,
659,2016-04-21 12:42:18,"I have some use cases where this would be helpful.

Please read .. And then merge :)
http://stackoverflow.com/questions/4198788/is-it-alright-to-use-target-blank-in-html5
",janneri,
659,2016-08-11 18:21:19,"linksInNewTab is not working for me.  Is there a later version that I'm supposed to install instead of the default version that comes when you npm install?
",MiLeung,
659,2016-12-05 15:05:55,Any chances to get this merged ?,rzukow,
659,2017-01-18 03:37:30,"So, I need this and will be manually pulling code from this PR into a project.

@chjj, if you need another use case, here's one: I'm working on a Sandstorm app package. Sandstorm runs web apps in a sandbox, and restricts their behavior in the frame in which they live. External links *only* work in Sandstorm apps if they open in a new tab, therefore, all links for this app must have this behavior.

Code I am integrating from a non-Sandstorm version of this app uses marked.js, so in order for their code to work correctly in the Sandstorm version, I need this option.",ocdtrekkie,
658,2015-09-07 22:26:17," has no method 'replace'
Please report this to https://github.com/chjj/marked.
    at Lexer.lex (/home/abadawi/work/playground/playground-node/markdown-server/node_modules/marked/lib/marked.js:138:6)
    at Function.Lexer.lex (/home/abadawi/work/playground/playground-node/markdown-server/node_modules/marked/lib/marked.js:129:16)
    at marked (/home/abadawi/work/playground/playground-node/markdown-server/node_modules/marked/lib/marked.js:1218:31)
    at /home/abadawi/work/playground/playground-node/markdown-server/server.js:18:19
    at fs.js:268:14
    at Object.oncomplete (fs.js:107:15)
",ahmedabadawi,
658,2015-11-15 12:19:50,"Did you solev it ?
",libchaos,
658,2015-11-15 21:38:27,"https://github.com/chjj/marked/issues/678#issuecomment-156841629
",Feder1co5oave,
657,2015-09-07 17:34:53,"default can be false to preserve the current default behavior, it just needs a way to keep certain comments/notes from taking folks offsite when they need to remain (e.g. post comments or ticket notes).

something like:

`marked.setOptions({ ""linksInNewTab"" : true });`
",drmuey,
657,2015-09-08 12:44:31,"NTS: https://github.com/chjj/marked/blob/master/lib/marked.js#L882
",drmuey,
657,2015-09-08 23:17:13,"Pull request: #659 
",drmuey,
656,2015-09-04 12:20:22,"@chjj 
First of all, thanks for this project!
But it seems you don't have enough time for this project, 
may be someone can help you maintain this project?
",valorkin,2015-09-16 14:33:30
656,2015-09-16 14:10:36,"Seems like this was addressed in this issue https://github.com/chjj/marked/issues/618
",arlair,2015-09-16 14:33:30
656,2015-09-16 14:33:30,"duplicate of #618
",valorkin,2015-09-16 14:33:30
655,2015-09-03 19:13:37,,julmot,
655,2015-09-08 07:58:25,"@chjj 
",julmot,
655,2015-09-08 23:15:52,"lol, I missed this issue wehn searching. I have apull request in that does this: See #657
",drmuey,
655,2015-09-11 06:56:47,":+1: When will it be available @chjj?
",julmot,
655,2015-09-17 15:34:19,"Push!? @chjj @drmuey 
",julmot,
655,2015-09-18 12:49:09,"@julmot in the meantime, just use a custom renderer with your own link method.
",adam-lynch,
655,2015-09-23 16:31:52,"Render links to external hosts with `target=""_blank""`: https://github.com/romanpitak/pfm

Just a suggestion...
",romanpitak,
655,2015-09-23 17:32:29," @adam-lynch Could you please describe how?

@romanpitak A URL to a different subdomain would be also a different host but should be handled like an internal link. The same for a different top-level-domain like domain.es and domain.de.
",julmot,
655,2015-09-23 18:57:25,"@julmot **you are right** and that's why it was just a suggestion. I wrote the extension just to suite my own needs.
",romanpitak,
655,2015-09-26 14:40:53,"@julmot :

<S_CODE_TOKEN>
",hardware,
655,2015-12-11 18:26:24,"And for the es6-y (and lazy):

<S_CODE_TOKEN>
",AndrewRayCode,
655,2016-04-28 09:23:46,"I just want to suggest the following: `{:target=""_blank""}` at the end of the link in markdown ([Reference](http://stackoverflow.com/a/4705645/3894981))
",julmot,
655,2016-05-31 08:42:43,"+1 for the @julmot is suggesting!
I'm surprised `{:target=""_blank""}` doesn't already work!
",KingScooty,
654,2015-08-31 15:26:45,"Example:

<S_CODE_TOKEN>
1. First item:
    <S_CODE_TOKEN>```

github render it's like this:
1. First item:
   `python
   >>> class Descr:
   ... def __get__(self, instance, owner):
   ... print(owner)
   ...
   `
2. second item

But in `marked` - all fine. Any suggestions?
",pacahon,
653,2015-08-28 13:33:18,,joaomilho,
652,2015-08-25 21:52:25,"<S_CODE_TOKEN>

Could you remove [`""preferGlobal"": true`](https://github.com/chjj/marked/blob/master/package.json#L9)?
It's no any sense and bad practice as well.
",monolithed,2015-09-06 13:25:56
652,2015-09-01 17:29:28,"The CLI requires to be installed globally, hence the warning.
",MichielDeMey,2015-09-06 13:25:56
652,2015-09-01 18:00:46,"@MichielDeMey, so why it should be installed globally?
",monolithed,2015-09-06 13:25:56
652,2015-09-01 18:09:51,"Otherwise your system won't be able to recognize the CLI, unless you add your project's `node_modules` folder to your `$PATH` variable.

When installing it locally

<S_CODE_TOKEN>

When installing it globally

<S_CODE_TOKEN>
",MichielDeMey,2015-09-06 13:25:56
652,2015-09-01 18:18:01,"I see what you mean, but I don't see any sense to install it globally.
Why the package should be installed globally?
",monolithed,2015-09-06 13:25:56
652,2015-09-01 18:19:37,"It doesn't have to be installed globally to use the library, but it has to be if you plan to use the CLI.
Hence it's just a warning and not an error.
",MichielDeMey,2015-09-06 13:25:56
652,2015-09-01 18:25:06,"> but it has to be if you plan to use the CLI.

There's a line in `package.json` for that:

<S_CODE_TOKEN>
",monolithed,2015-09-06 13:25:56
652,2015-09-01 18:34:58,"That line won't tell NPM to symlink it to the `$PATH` (unless you install it globally).

From the NPM package.json specification:

<S_CODE_TOKEN>

So commands like

<S_CODE_TOKEN>

won't work if you install it locally, but will work if you install it globally.
",MichielDeMey,2015-09-06 13:25:56
652,2015-09-01 21:03:16,"> won't work if you install it locally, but will work if you install it globally.

I see what you mean, but why it should be preferred for all users?

Npm does not recommend installing packages as root:

> Using sudo with npm is Very Not Recommended. Anyone can publish anything, and package installations can run arbitrary scripts."" 

It was explained later in more detail as:

>  Option 4: HOLY COW NOT RECOMMENDED!! You can just use sudo all the time for everything, and ignore the incredibly obnoxious warnings telling you that you're insane for doing this.

[Why is evil?](http://blog.millermedeiros.com/node-js-protip-avoid-global-test-runners/)

How many users prefer this method of installation?
Do you know how many packages use one? [1165 packages](https://www.npmjs.com/package/marked) and thousands of people see this warning!
",monolithed,2015-09-06 13:25:56
652,2015-09-01 21:11:57,"You should definitely NOT install anything as sudo.
This tool does not force you to install it using the sudo command, so I don't see the issue.

There is a difference between

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

The former is not recommended like you said since it gives npm packages sudo powers.

If you can't install global npm packages without running sudo then your npm environment is bugged and you should solve it.

Check out SO on how to solve it.
http://stackoverflow.com/questions/19352976/npm-modules-wont-install-globally-without-sudo

Apart from that, no one is forcing you to install it globally and it will work just fine when installing it locally.
The warning is just there for those who wish to use the CLI, if you don't need it you may safely disregard the warning.
",MichielDeMey,2015-09-06 13:25:56
652,2015-09-01 22:19:55,"> Check out SO on how to solve it.

In most cases there's no necessity to solve this problem (at least to me)

> if you don't need it you may safely disregard the warning.

I don't want to see this warning, because there're no any reason for it. 
Can you answer my question, why it should be preferred for all users?
It's really strange.
",monolithed,2015-09-06 13:25:56
652,2015-09-01 23:21:03,"To use a cli mode, it is recommended to install packages globally. This is because you most likely do not have or want to add the node_modules folder for marked to your system $PATH variable.

If you do not want to use cli mode then don't install globally and ignore the message. 

The warning is meant for people who are expecting to use cli mode since there may be issues in doing so unless the package is installed globally.
",joeyfromspace,2015-09-06 13:25:56
652,2015-09-01 23:50:38,"> The warning is meant for people who are expecting to use cli mode since there may be issues in doing so unless the package is installed globally.

Did you see README.md?

<S_CODE_TOKEN>

Why not:

<S_CODE_TOKEN>

it's confused!

I want to find out why this method of installation is preferred for all users and not documented. 
If someone wants to use the cli, let them read the doc :yum: 
",monolithed,2015-09-06 13:25:56
652,2015-09-06 13:25:56," doesn't happen in npm v3 https://github.com/npm/npm/issues/1648
",monolithed,2015-09-06 13:25:56
652,2016-02-07 14:53:39,"I do see this with npm 3.5.3 and I also think the warning unwarranted.
If people want to use the CLI then they should install it globally.
No point of having a warning for people who are using it just as a library.
",tcurdt,2015-09-06 13:25:56
652,2016-03-07 15:48:09,"Many engineers require no warnings or errors during installation of a project.  They can cause confusion, especially to less technical people who may think there was an install error.  Global dependencies can also make deployment more complicated.  In my opinion `preferGlobal` should be deprecated.  

Is there anything preventing working around the issue with `$PATH`, like running with `./node_modules/.bin/marked`?  If not, perhaps splitting the cli component into its own module a la grunt-cli would allow us to prevent the superfluous warning message in our projects…

~My 2¢
",wprl,2015-09-06 13:25:56
652,2016-06-21 19:10:57,"Agreed that this module should not preferGlobal. Even as a cli, it should be used locally with `$(npm bin)` or via an npm run-script. (these are the recommended ways to use CLIs within a project; unless the utility is intentionally not associated with a project, like a scaffold-generators for instance)
",jasonkarns,2015-09-06 13:25:56
651,2015-08-24 23:16:27,"See:
- https://github.com/chjj/marked#sanitize
- https://github.com/chjj/marked/blob/master/lib/marked.js#L1245
",thejameskyle,2016-01-08 00:23:52
651,2016-01-08 00:23:52,"Clearing out old issues, closing for inactivity
",thejameskyle,2016-01-08 00:23:52
650,2015-08-24 14:09:35,"Since #66 has been opened for quite some time and hasn't received neither acceptance nor rejection, I've decided to create an updated PR that is compatible with the current version of marked.

Credit  goes to @boomyjee, @davidchambers and @Mithgol
",hgGeorg,
650,2015-08-25 03:51:01,"Awesome!
",xcatliu,
649,2015-08-21 16:25:24,"src is an argument to Lexer.prototype.token so there is no need to
declare it as a variable.  It doesn’t seem to do any harm, but some
linters/compilers (read: Closure Compiler) complain.  Since there’s
almost zero cost in getting rid of the duplicate declaration, do so.
",mina86,
648,2015-08-21 16:00:31,"Neither Parser nor InlineLexer accept renderer aragument so don’t
pass it to them.  Caller can set options.renderer property instead.
",mina86,
647,2015-08-19 18:35:33,"I'm trying to render this markdown:

<S_CODE_TOKEN>

And marked fails to parse the GFM table while it is within the code blocks. If the table is by itself then it's fine, but used with anything else and it fails and just converts it to a paragraph.

My options look like this:

<S_CODE_TOKEN>

where sanitizer is a function that does nothing except mark a flag then return the code, and the custom renderer is almost exactly the same as the original, just with a few CSS classes added into the code. Highlight.js is also used.

And regarding Highlight.js, if I take out the little bit of HTML and leave the table indented, marked will pass `undefined` to the `highlight` function, even though there are no code blocks in the above markdown. 

I've also tried `pedantic` mode and it doesn't change anything.

This is a major issue, and I'll have to look for an alternative markdown library if this persists. 

Here is an image of what it looks like rendered:
![qgl6xom](https://cloud.githubusercontent.com/assets/4708645/9365413/0988e908-4677-11e5-99c8-9f9c650a7884.png)

Obviously the image and links don't exist since I changed them for privacy reasons, but the table should still be rendered correctly.
",novacrazy,
647,2015-10-19 10:08:12,"Anything within HTML tag will be ignored by markdown parser.

You should move the table out of the HTML tag.

You can add wrapper by customizing table renderer, https://github.com/chjj/marked#overriding-renderer-methods.
",minwe,
646,2015-08-15 05:16:57,"Is there a way to insert dynamic variables into the parser and replace placeholders in `.md`? 

If not, is there a plan for the support in the future?

Thanks.

Great library btw :tada: :tada: 
",danishin,
645,2015-08-14 17:23:07,"How do I preserve new lines (\n) within a `<code>` block?

<S_CODE_TOKEN> js
var marked = require('marked')
var Promise = require('bluebird')
var markedAsync = Promise.promisify(marked)

var markdown = [
  '<S_CODE_TOKEN>'
].join('\n')

console.log(markdown)
markedAsync(markdown)
.then(console.log)
<S_CODE_TOKEN>

And the output:

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<pre><code class=""lang-js"">if (true) {
  console.log(&#39;word spaces&#39;)
}
</code></pre>
<S_CODE_TOKEN>

However if there are spaces then a character, the empty lines are available.

<S_CODE_TOKEN> javascript
var markdown = [
  '<S_CODE_TOKEN>'
].join('\n')

console.log(markdown)
markedAsync(markdown)
.then(console.log)
<S_CODE_TOKEN>

Here's the output

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<pre><code class=""lang-js"">if (true) {
  console.log(&#39;word spaces&#39;)
}


x
</code></pre>
<S_CODE_TOKEN>
",reggi,
645,2015-09-02 21:38:14,"I'm not sure if this is the same problem, but I'm also not getting new lines when using a code block with `gym` on:

input:

![input](https://s3.amazonaws.com/f.cl.ly/items/3B0G0R41011f0R1n1t1i/Screen%20Shot%202015-09-02%20at%202.36.01%20PM.png)

output:

`<div> <span>test</span> </div>`

expected output:

<S_CODE_TOKEN>
",chrisdrackett,
645,2016-12-08 14:14:42,"https://github.com/chjj/marked/blob/38f1727ffee0820975677027b8968bc1954e6637/lib/marked.js#L764

This project simply render inline code and code block as the same. It's a serious bug.",ChiChou,
644,2015-08-14 16:05:09,"You can see I have to code blocks one with a two space indentation and one with a tab. The tab is oddly converted to 4 spaces.

<S_CODE_TOKEN> javascript
var marked = require('marked')
var Promise = require('bluebird')
var markedAsync = Promise.promisify(marked)
var markdown = [
  '<S_CODE_TOKEN>',
  '<S_CODE_TOKEN>'
].join('\n')
console.log(JSON.stringify(markdown))
markedAsync(markdown)
.then(function (html) {
  console.log(JSON.stringify(html))
})
<S_CODE_TOKEN>

<S_CODE_TOKEN> javascript
""<S_CODE_TOKEN>\n<S_CODE_TOKEN>""
<S_CODE_TOKEN>

<S_CODE_TOKEN>
",reggi,
644,2016-03-18 22:47:20,"Same problem here. I think this is definitely a bug: code blocks should not be modified in any way. That's the behaviour promoted by [CommonMark](http://spec.commonmark.org/0.23/#indented-code-blocks).

[Discount](https://github.com/Orc/discount) and [Pandoc](http://pandoc.org), however, also seem to convert tabs to spaces.
",mbovel,
643,2015-08-13 00:19:04,"Use SVG badge for NPM version instead of PNG for better clarity on retina / hi-dpi displays.
",sahat,
642,2015-08-11 15:56:59,"The headings function is creating headings correctly.

v0.3.3
""##My Heading"" 

v0.3.4 and up
""## My Heading""
",ascholz81,2015-08-12 08:19:38
642,2015-08-12 08:18:44,"I can't remember the exact issue, but someone made a PR requiring GFM to require a space after. I revised the code a bit (maybe it caused a mixup?). So, original markdown still allows no space after the hash, but GFM requires one.

I can't for the life of me remember the specifics, but if it's wrong, here's a temporary fix you can use:

<S_CODE_TOKEN>

This is a simple 1-character fix in the heading rule if it's wrong:

##Testing Heading

Test paragraph.
",chjj,2015-08-12 08:19:38
642,2015-08-12 08:19:13,"Looks like GFM does not allow `##Heading`.
",chjj,2015-08-12 08:19:38
642,2015-08-19 22:54:40,"@chjj Please be careful reviewing such PRs that break backwards compatibility.
If necessary, bump the minor or major version for npm package. This rule broke many headings for everyone doing `npm install` in the last week or so.
",nilgradisnik,2015-08-12 08:19:38
642,2015-10-01 01:33:52,"@chjj please reconsider re-opening this issue. GFM does allow for `##Header` (though strangly not in comments) in repo content: https://github.com/bmneely/spartacus/blob/master/README.md
",bmneely,2015-08-12 08:19:38
642,2015-10-01 03:31:34,"Would also like to see this reopened. Breaking functionality like this should be intentional, following the guidelines of semantic versioning.

Down the road it might be nice to transition to Commonmark, which has a better defined spec, but this change unexpectedly broke some functionality. 
",getaaron,2015-08-12 08:19:38
642,2015-11-09 04:09:07,"I think @bmneely is right and would also like to see this reopened.
",FuDesign2008,2015-08-12 08:19:38
642,2015-11-09 06:22:59,"Thanks @fudesign2008
",getaaron,2015-08-12 08:19:38
641,2015-08-10 04:58:53,"In v0.3.3 `_**ABC\_DEF**_` generates `<em><strong>ABC_DEF</strong></em>`
In v0.3.4 `_**ABC\_DEF**_` generates `_<strong>ABC_DEF</strong>_`

Regression?
",cheesypoof,
641,2016-02-01 21:18:39,"I believe this change is from the [em tag's security fix in 0.3.4](https://github.com/chjj/marked/issues/497). I think it's possible to fix this specific case (escaped underscores) without reintroducing that error.

I've fixed this in my marked-derived parser at https://github.com/Khan/simple-markdown/commit/9504ca5f1582f9add845f22b1830e68abd0859da and sent pull request #715 to marked
",ariabuckles,
640,2015-08-09 11:58:28,"If I insert a non-breakable space character, it gets to output as a regular space.

This is terribly wrong, we don't want to convert non-breakable space to a regular one.

As a workaround one could use `&nbsp;`, but that looks ugly in Markdown files.
",chillum,
640,2015-09-23 16:33:41,"https://github.com/romanpitak/pfm

Just a suggestion...
",romanpitak,
639,2015-08-09 07:47:01,,helphi,
638,2015-08-07 19:20:34,"I noticed in another project that uses marked that the text ""http://localtunnel.me!"" was being turned into a link that incorrectly included the trailing ""!"".

This PR changes the gfm url regex to explicitly not include a trailing ""!"".

It also expands the tests for gfm links to test for all the possible ending punctuation that the regex doesn't capture as part of the link as well as a test for no trailing punctuation.

I wasn't sure what the correct behavior is for determining whether a character is part of a link or punctuation. The exclamation point is technically a valid character to use in a url, but so are the closing parens (`"")""`) and single and double quote marks, which are also part of the [existing url regex](https://github.com/chjj/marked/blob/master/lib/marked.js#L499). It seems far more likely that a sentence written in markdown would end with a url followed by a ""!"" than that a url would end with a ""!"", though.

For reference, Rinku, the link-detecting library used by github's markdown gem, [allows ""?"", ""!"", ""."", "","" and "":"" as trailing punctuation](https://github.com/vmg/rinku/blob/master/test/autolink_test.rb#L44-L46).
",bantic,
637,2015-08-04 15:19:20,"<S_CODE_TOKEN>

Turns to this (on Github):

| a | b | c |
| :-: | :-: | :-: |

In marked, it turns to this:

![bug](https://cloud.githubusercontent.com/assets/486818/9064429/22faa10e-3ad5-11e5-98af-d27a1f049622.png)

marked HTML output:

<S_CODE_TOKEN>
",dogancelik,
636,2015-08-03 13:39:32,"Move escaping of HTML from `InlineLexer` to `Renderer`. This will
modularize marked further and allow using it with custom renderers that
do not intend to output HTML.
",FredrikAppelros,
636,2015-08-03 13:53:38,"This indirectly addresses the issues #269, #529 and #625. More importantly, it makes marked a little bit more modular. You can now use the parser and lexer components with a different renderer that doesn't output HTML.

For the fun of it I also made a small branch which directly fixes the issues mentioned above [here](https://github.com/FredrikAppelros/marked/commit/f85dd76c86fa66e0e85bf3b3f5103ccb677154f4), but I personally don't understand why you would want to disable the escaping if it is to be rendered in a browser anyway. :confused: 
",FredrikAppelros,
636,2015-08-04 10:26:05,":+1: 

This should be probably also contain changes to the readme, right?

A reason why someone mightn't like it: users overriding renderer methods will inadvertently lose escaping. Why this doesn't matter: this is already the case when overriding link rendering; https://github.com/chjj/marked/blob/18fb6a639a4a77dd59650879bcad10d833c40067/lib/marked.js#L872.

> I personally don't understand why you would want to disable the escaping if it is to be rendered in a browser anyway.

It mightn't be rendered in a browser. We need it for desktop notifications, etc. as I said in #529.
",adam-lynch,
636,2015-08-04 15:09:08,"Yes, this change will affect existing custom renderers that relies on the escaping being done within the lexer. Not sure if it really requires any changes to the README as there was no mention of it being escaped in the first place.
",FredrikAppelros,
636,2016-04-06 14:03:36,"Hi!
Is there any chance for this to be reviewed and/or merged?

Regards
",diega,
636,2016-07-21 12:32:52,"+1 Please. It has been more than a year...
",mercmobily,
635,2015-08-03 05:24:12,"Learning marked, tried some of the examples in the README file, edited one to read the README.md contents from:

https://raw.githubusercontent.com/chjj/marked/master/README.md

I get this error/trace from marked on parse:

<S_CODE_TOKEN>

Here is test file i ran:

<S_CODE_TOKEN>
",kaiyzen,2015-08-03 05:35:24
635,2015-08-03 05:35:17,"<S_CODE_TOKEN>

You're passing in a Buffer instead of string. Try:

<S_CODE_TOKEN>
",chjj,2015-08-03 05:35:24
635,2015-08-03 06:18:34,"dam.., my bad, used to just passing buff around forgot to pass the string. thanks for pointing it out

awesome module, looking forward to working with it
",kaiyzen,2015-08-03 05:35:24
634,2015-08-03 01:59:14,"`sanitize: false` by default, according to https://github.com/chjj/marked/blob/18fb6a639a4a77dd59650879bcad10d833c40067/lib/marked.js#L1245
",dbkaplun,
633,2015-07-29 18:55:20,"When I forked the repo and ran `npm install` I get the below error. I [opened an issue](https://github.com/benmills/robotskirt/issues/36) on the roboskirt repo and got a response recommending using hoedown. 

Do you get the same error? And/Or have a work around?

I am running node v0.12.0, not sure if that is an issue? 

<S_CODE_TOKEN>
",bdougie,2015-07-31 09:37:49
633,2015-07-31 09:36:49,"It looks like robotskirt doesn't use nan.h now that were in an era of a new v8 api. I'll remove it from the devDependencies for now.
",chjj,2015-07-31 09:37:49
632,2015-07-29 16:14:14,"I have a value attached to an ng-model. I would like this value to be run through marked. Something like this.

JS:
<code>var text = ""<script>alert('hello scriptio')</script>""; 
scope.text = marked(text)</code>

HTML:
`<textarea ng-model=""text""></textarea>`

Is this possible?
",BannedForLife,
632,2015-07-29 17:49:38,"I'm not sure how the marked function works in the controller, but I'm binding content to my textarea and a div with a marked attribute without any issues:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",robrothedev,
631,2015-07-29 13:31:40,"I seem to be having an issue with new lines and paragraphs.  The markdown itself will show two lines between content, but the marked content only shows one line.  I have breaks: true in the options.  Is this a bug or am I missing something?
",robrothedev,2015-07-31 09:43:20
631,2015-07-29 13:40:46,"On another note, I did notice that <br> tags are accepted, so maybe the intention is to use break tags for new lines?
",robrothedev,2015-07-31 09:43:20
631,2015-07-31 09:43:15,"`breaks: true` still isn't entirely accurate to how GFM does it. It's a neglected feature right now. I think there is a PR open for it that I might take a look at.
",chjj,2015-07-31 09:43:20
630,2015-07-23 17:55:38,"This change makes it explicit that this is a RegEx based parser, with all the limitations that come with that (such as not being able to deal with parentheses in URL for inline links)
",Pomax,
629,2015-07-23 02:49:23,,vincentwoo,
628,2015-07-22 09:02:56,"when I used marked in ie8,there is a error

> > > name: ""RegExpError"", number: -2146823269, Expected ']' in regular expression

I found when I remove the <script></script>tag,the issue is resolve.

I don't know how to debug,please help me,thanks.
",Oscar-ren,2015-07-22 09:13:54
627,2015-07-21 19:31:28,,kapouer,
627,2015-07-22 13:34:39,":+1: 
",rgbkrk,
626,2015-07-21 17:56:24,"This is a meta-issue. As of 2015-07-21, there are 215 open issues and 96 (!) open PRs. @chjj, are you interested in community help with maintaining marked? Some good first steps might be setting up the repo on CI to attach test pass/fail reports to PRs, triaging open issues / PRs, closing old issues, and asking for more eyes and hands. I'm happy to help with any of the above if you'd like.
",jsdnxx,2015-07-23 06:15:53
626,2015-07-22 13:33:41,"Hey @jden, see #618.
",rgbkrk,2015-07-23 06:15:53
626,2015-07-23 06:15:53,"@rgbkrk thanks :) I'll close this as a dupe.
",jsdnxx,2015-07-23 06:15:53
625,2015-07-16 22:31:47,"Hi,

At the moment, in a code block, if you have:

<S_CODE_TOKEN>

It gets turned into:

<S_CODE_TOKEN>

Regardless of what `sanitize` is.

In https://github.com/chjj/marked/issues/160#issuecomment-18611040 @scottgonzalez suggested:

<S_CODE_TOKEN>

Is there a case were `<code>` blocks should actually be escaped like that, really?

Shouldn't this be the default behaviour, without hacking?
Sorry I would have reopened #160  but couldn't.

Merc.
",mercmobily,
625,2016-07-21 12:33:36,"Please let us know. There is an open PR for this too... #636 
",mercmobily,
624,2015-07-16 08:05:02,"We have recently been attacked with XSS because we did not set marked's `sanitize` option. We did not set the `sanitize` option because the docs says that it is `true` by default in the example:

> Example setting options with default values:
> 
> <S_CODE_TOKEN>

It is later stated in the docs that `sanitize` is `false` by default:

> ### sanitize
> 
> Type: `boolean`
> Default: `false`
",dtinth,2017-02-06 08:46:00
624,2015-07-16 17:17:30,":+1: 
",rgbkrk,2017-02-06 08:46:00
624,2015-07-16 17:17:55,"Same with smartLists too I presume?
",rgbkrk,2017-02-06 08:46:00
624,2015-07-17 04:44:38,"Yeah, and that’s included in this PR.
",dtinth,2017-02-06 08:46:00
624,2017-02-06 08:46:00,"This is already fixed, closing.",dtinth,2017-02-06 08:46:00
623,2015-07-16 04:43:44,"I'm using marked.js, I write an example  
![2015-07-16 12 44 13](https://cloud.githubusercontent.com/assets/8085088/8715686/689750bc-2bb8-11e5-846a-3fcfb8619147.png)

I expect it would split the script and have class like  
![2015-07-16 12 40 47](https://cloud.githubusercontent.com/assets/8085088/8715650/077b5d50-2bb8-11e5-8ec8-c8f4d8f33675.png)  

but it show me  
![2015-07-16 12 41 13](https://cloud.githubusercontent.com/assets/8085088/8715655/10ef1d36-2bb8-11e5-9f1b-d5c7b75a5d42.png)

And my code:  
![2015-07-16 12 42 38](https://cloud.githubusercontent.com/assets/8085088/8715664/2baaad5c-2bb8-11e5-9db4-deaf1b10c9d0.png)

Is `marked` perform like `lang-javascript`, or what am I missing?  
Thanks
",brucejcw,2015-08-19 09:42:32
622,2015-07-15 17:48:06,,KhanMaytok,
622,2016-07-20 14:34:52,"This probably needs to be changed again :smile_cat: 
",styfle,
621,2015-07-15 16:35:20,"Hi there,

I was wondering if Marked had a feature where I could write:

<S_CODE_TOKEN>

Where anything inside the ""div"" is left completely untouched.
I need this as I am trying to allow a chain of filter, where first I apply markdown, and then I apply EJS to the file. However, doing so it's impossible since Markdown escapes things.

Thank you!

Merc.
",mercmobily,
621,2016-02-11 02:06:35,"Sorry to bother... just checking if this was being considered! Thanks...
",mercmobily,
620,2015-07-14 20:12:01,,globetro,2015-07-14 20:12:26
619,2015-07-14 17:36:57,"Using the following markup:

<S_CODE_TOKEN>

leads to a link that actually looks like `青 (""ao""))` with the link's own parenthesis getting cut off (marked seems to be treating the first `)` it sees as link terminator, instead of taking nesting into account)
",Pomax,
619,2015-07-15 15:38:14,"Definitely an issue, that I see happening across the web from users of marked.
",rgbkrk,
619,2015-07-23 12:49:27,"Is there an ETA for a fix on this ?
",bendecoste,
619,2015-07-23 17:28:08,"I have no expectation that @chjj will ever fix this, but it's most a bug stems from a bad assumption in https://github.com/chjj/marked/blob/master/lib/marked.js#L467, which is terminal: unless someone introduces a ""respect nesting"" operator to JavaScript's RegEx engine, it is impossible to user regular expressions in a way that properly deals with blocks/nesting.

(which is why we typically don't parse structure syntax with regex, but with tokenizers instead)

I was thinking of trying to fix this, but ""fix"" in this case means ""write a new parser that doesn't rely on regex"", and that's not happening. So: if you need links in which the URI contains `()`, don't use marked.js
",Pomax,
619,2015-07-23 17:56:12,"filed https://github.com/chjj/marked/pull/630 as PR to at least make it explicit that this is a pure RegEx parser, with all the limitations that brings with it.
",Pomax,
618,2015-07-12 19:50:37,"This package is great! It would be nice to see additional maintainers come aboard that can help triage existing issues and PRs. After filing my own PRs and issues (with no commentary), I've noticed that :new: PRs and issues have come up without resolution.

Would there be a path for adding additional maintainers to this package to help with outstanding PRs or issues?

I'm happy to help and fairly well versed in working with lots of collaborators to a project while applying the direction of a project as best I can (in this case, sticking to the [philosophy behind marked](https://github.com/chjj/marked#philosophy-behind-marked)). Please let me know if I or others can help!

/cc @chjj @ChrisWren @minrk @jdfreder
",rgbkrk,
618,2015-07-15 18:28:01,"Three days and no answer... @chjj i think this is a great offer!
",mercmobily,
618,2015-07-15 19:30:48,"I try to set aside a day where I do nothing but PRs, but it gets trying. I'm open to more maintainers, which is why I've added a few others already.

To be comfortable with someone maintaining the code and accepting PRs, I'd have to know that they understand the code, and know, like you said, that they understand the philosophy of marked (**fast**, one file, the right balance of accurate features vs. intuitive features).

The trouble is, marked is written in such a bizarre way in order to optimize it that it's not easy to understand the code at this point (even for me sometimes). For example, if you change a regex, you better understand _every_ character of that regex, and which regex features produce faster or slower machine code in v8. For every one line change you make, you'd better run the benchmarks 3 or 4 times.

Maybe another way to do it, is if a maintainer doesn't understand a particular piece of code or regex to ping/email me (I'm not trying to say I'm smarter than everyone or anything like that: half the time I look at the code **I** can forget why a regex is written a certain way, etc).

I could also document every line of the current code, but that would take a lot of time and explaining.

Then again, the test suite is thorough (so thorough it looks like it's been borrowed by many other projects). Maybe that's good enough most of the time. Run tests and benchmarks (several times) for every change.

@rgbkrk, who else did you have in mind?
",chjj,
618,2015-07-15 19:35:06,"Here is a good example of what I mean of ""accuracy vs. intuition"": https://github.com/chjj/marked/blob/master/doc/broken.md

Markdown is broken. People expect it to behave a certain way and the original implementation (and even GFM for some things) does not behave the way one would expect, or in a reasonable way.
",chjj,
618,2015-07-15 21:29:28,"Hooking up CI for benchmarks might be a valuable addition, to keep an eye on performance effects of PRs. [asv](http://asv.readthedocs.org/) may be useful for this. There may be a js analog that I'm not aware of.
",minrk,
618,2015-07-15 23:02:53,"Thanks for the response @chjj!

In my case, the ""else"" I have in mind is likely other Jupyter and IPython developers. We use `marked` and `term.js` for the IPython notebook which is used by lots of researchers, scientists, and data scientists the world over. We'd prefer to help with existing community packages instead of creating complete forks ourselves.

At least for me, I think some mentoring time is useful. I can start learning more about profiling the current implementation as well as against, e.g. [commonmark.js](https://github.com/jgm/commonmark.js).
",rgbkrk,
618,2015-07-23 21:13:34,"@chjj What do you think about @Pomax as an additional maintainer?
",rgbkrk,
618,2015-07-24 16:21:51,"This would probably be a bad plan, given my time constraints =( (I'd be happy to weed through some of the PRs, but I wouldn't be able to really do any maintenance myself)
",Pomax,
618,2015-07-31 09:47:35,"> This would probably be a bad plan, given my time constraints =(

This usually ends up being the problem. A new maintainer will eventually get roped into something else; including myself.

I would also prefer people who have posted PRs here that follow marked's design closely. It's hard to pick maintainers if I don't know what they're capable with when it comes to marked.
",chjj,
617,2015-07-09 21:56:29,"- Currently, the renderer assumes String concatenation, but to support other methods of rendering (like React), implement an overloadable function (`combine`) in the renderer for concatenation.
- Passes existing tests, except test 10 which is already failing on master.

I'm opening this PR merely mostly for discussion since it negatively affects performance, and in case anyone else is looking to use React with marked. 

Performance characteristics of this change:

<S_CODE_TOKEN>

Also, [here's an example of a React](https://gist.github.com/mbranch/1f9493b9346bdbfce6fe) renderer that works with this change.
",mbranch,
617,2015-08-17 15:17:11,"+1
",nikuph,
617,2015-10-07 10:25:40,"+1
",jonathanewerner,
617,2015-10-07 13:15:08,"20% slow down sounds like a steep price to pay.
",mina86,
616,2015-07-07 08:44:55,"Fixes #615 

There's another test failing (def_blocks), but it was also failing before this fix.
",papandreou,2015-07-31 01:08:07
616,2015-07-30 21:27:09,"@chjj I don't understand why the test suite [removes all whitespace before comparing the actual and expected output](https://github.com/chjj/marked/blob/master/test/index.js#L115-L116). As you can see from my fumbling around with these highly whitespace-sensitive fixes here, it would have been a great help if the fixtures were matched exactly, and it would also make the error messages from the test suite much more readable.

I'll happily contribute a rewrite of the test suite in that direction if you're interested.
",papandreou,2015-07-31 01:08:07
616,2015-07-31 01:07:58,"Interesting. What's the use-case for empty code blocks? Does GFM allow them? Weird. Anyway, yeah, this looks alright.

As for the test suite, I didn't want to make the html whitespace output 100% accurate to the original markdown. It's a mess, and I like the way marked does it better. Every engine does it a bit differently and a lot of other markdown engines borrowed what I added to the original test suite, so I make the whitespace insignificant: also because it _is_ technically insignificant in the html world.

I agree the test failure output is annoying to read. I wouldn't be opposed to keeping the whitespace insignificant for testing, but giving better error output based on the character index at which it failed. It shouldn't be hard to find the corresponding character index for the whitespace version.
",chjj,2015-07-31 01:08:07
616,2015-07-31 09:17:17,"> Interesting. What's the use-case for empty code blocks?

Funny story, actually. We're building an assertion library called [Unexpected](http://unexpected.js.org/), which is very focused on high quality error messages, which we're trying to improve all the time. That makes it a challenge to keep the documentation up-to-date, so we decided to build a test runner of sorts that actually runs the code snippets in our documentation and compares the error message to the explicitly labelled output, for example:

<S_CODE_TOKEN>
    In case of a failing expectation you get the following output:

    <S_CODE_TOKEN>

    <S_CODE_TOKEN>
<S_CODE_TOKEN>

This is already pretty good for regression tests. But sometimes when we're implementing a new feature we just want to base the documentation on the actual error message, so we have another script that runs all the code snippets and updates the `output` blocks with the resulting error messages. Those changes can then be comfortably reviewed using `git diff`. In cases where we just want to bootstrap the documentation from the actually output error message, we just use that script, and that's where the empty `output` blocks come in. They serve as a marker for where we want the actual error message added:

<S_CODE_TOKEN>
    In case of a failing expectation you get the following output:

    <S_CODE_TOKEN>

    <S_CODE_TOKEN>
<S_CODE_TOKEN>

This sort of documentation-driven development is working remarkably well for us, so we'll probably try experimenting with it in other projects unrelated to testing soon :)
",papandreou,2015-07-31 01:08:07
616,2015-07-31 09:23:53,"> As for the test suite, I didn't want to make the html whitespace output 100% accurate to the original
> markdown. It's a mess, and I like the way marked does it better. Every engine does it a bit differently
> and a lot of other markdown engines borrowed what I added to the original test suite, so I make the
> whitespace insignificant: also because it is technically insignificant in the html world.
> 
> I agree the test failure output is annoying to read. I wouldn't be opposed to keeping the whitespace
> insignificant for testing, but giving better error output based on the character index at which it failed.
> It shouldn't be hard to find the corresponding character index for the whitespace version.

Since the test cases with both the input and the expected output are checked into the test folder here, I maintain that it would be better to match them against each other whitespace sensitively, and then just adjust the expected output of the 10-ish cases where they currently don't match up. At least then we'd know exactly what comes out.

Oh, it just occurred to me that you might have inherited the fixtures from some other project that you don't want to be completely whitespace-compatible with? If you're not keeping the fixtures in sync with an upstream project, I still think we should just make the adjustments or come up with a matching strategy that only ignores the kinds of differences that you explictly don't care about.
",papandreou,2015-07-31 01:08:07
616,2015-07-31 09:30:27,"@papandreou, your PR caused 2 tests to fail. I've reverted it to the old rule changing `[\s\S]+` to `[\s\S]*` which passes your added tests.
",chjj,2015-07-31 01:08:07
616,2015-07-31 09:34:20,"> Since the test cases with both the input and the expected output are checked into the test folder here, I maintain that it would be better to match them against each other whitespace sensitively, and then just adjust the expected output of the 10-ish cases where they currently don't match up. At least then we'd know exactly what comes out.

Like I said, I think it would be better to keep the tests whitespace-insignificant, but make the error output display the whitespace properly. HTML is whitespace insignificant so this presents no problem.

> Oh, it just occurred to me that you might have inherited the fixtures from some other project that you don't want to be completely whitespace-compatible with?

The original tests were taken from the official markdown test suite (released on a mailing list many years back). I don't plan on touching them. In `test/new` I've added my own tests.
",chjj,2015-07-31 01:08:07
616,2015-07-31 09:40:36,"Damn, sorry about that. Reverting to the old rule will mean that certain whitespace won't be emitted as part of the output, though, and in my use case all that whitespace is significant.

I guess I'll have to come back with another attempt later.
",papandreou,2015-07-31 01:08:07
616,2015-07-31 09:51:48,"@papandreou, I modified the old rule to allow no text within the code fences, so now the tests you added pass, along with all the others.
",chjj,2015-07-31 01:08:07
615,2015-07-03 06:55:47,"Originally reported in https://github.com/sourcejs/Source/issues/155#issuecomment-117956180:

Marked's parsing of named code blocks is weird.

<S_CODE_TOKEN>
> var m = require('marked')
> m('<S_CODE_TOKEN>')
'<p><code>js</code></p>\n'
> m('<S_CODE_TOKEN>')
'<pre><code class=""lang-js"">\n\n</code></pre>\n'
<S_CODE_TOKEN>

Why isn't the first example recognized as an empty block of `lang-js`?
",mik01aj,2015-07-31 01:08:07
615,2015-07-03 07:02:25,"And one more example, now with custom renderer:

<S_CODE_TOKEN>
> var renderer = new m.Renderer();
undefined
> renderer.code = function(code, lang) { console.log(JSON.stringify(code), lang, 'block!'); }
[Function]
> renderer.codespan = function(code) { console.log(JSON.stringify(code), 'span!'); }
[Function]
> m('<S_CODE_TOKEN>', {renderer: renderer})
""js"" span!
'<p>undefined</p>\n'
> m('<S_CODE_TOKEN>', {renderer: renderer})
""\n"" js block!
'undefined'
<S_CODE_TOKEN>

Looks like in this first markdown example, the code is parsed as codespan.
",mik01aj,2015-07-31 01:08:07
614,2015-07-02 16:59:46,"Being a good citizen.

<S_CODE_TOKEN>
",benjamingr,
614,2015-07-02 17:00:49,"Oh lol, silly me - forgot to add what triggered it.

This was caused because I passed a buffer instead of a String to marked. Passing a string fixed it.

This can be fixed by either supporting buffers (by parsing or just `toString`ing them), or throwing a better error before passing it into `Lexer.lex`. If you'd like I can make a PR.
",benjamingr,
614,2015-08-03 23:31:00,":+1: 

This same thing confused me too. Thanks for the fix/usage-note @benjamingr 
",codeshrew,
614,2015-12-09 20:58:41,":+1: just bit me - needs obvious error for when a non-string is passed in 
",AndrewRayCode,
614,2015-12-13 16:51:08,":+1: Just had this issue as well, very annoying.
",SN4T14,
613,2015-07-01 21:26:04,"This adds an `--options` option. The use case is if you want to provide
more advanced options that are possible with the cli options. For
example you might want to provide a syntax highlighting function. You
could define a module like:

<S_CODE_TOKEN>

and then you can use it from the cli:

<S_CODE_TOKEN>
",matthewp,
613,2015-10-01 13:48:15,"@chjj any opinion on this?
",matthewp,
612,2015-06-26 10:33:39,"it seems this argument is NOT used.
",guotie,
611,2015-06-26 10:02:54,"file lib/marked.js

function replace

line 1115, expression:

<S_CODE_TOKEN>
",guotie,2015-06-26 10:34:40
611,2015-06-26 10:34:40,"got it.
",guotie,2015-06-26 10:34:40
610,2015-06-25 06:47:38,,frosas,
609,2015-06-21 00:54:39,"I want to make it so that codeblocks are rendered as inline code. Is it possible using marked?
",sangyoo91,
609,2015-07-23 18:06:10,"What do you mean? If you want <S_CODE_TOKEN>` to render like ``var a = ""hello""`` then I think it's as simple as:

<S_CODE_TOKEN> js
var marked = require('marked');
var renderer = new marked.Renderer();

renderer.code = renderer.codespan;
marked('<S_CODE_TOKEN>', { renderer: renderer });
// <code>whatever</code>
<S_CODE_TOKEN>
",heyimalex,
608,2015-06-20 22:35:56,"Addresses #606 by allowing for spaces in the ""language"" field. Users that want to read RMarkdown can follow this up with their own parsing logic.
",rgbkrk,2016-03-09 22:55:35
608,2015-06-21 00:22:46,"Now with tests!

The way I'd use this for RMarkdown is overriding `renderer.code`:

<S_CODE_TOKEN>

Which is working well for me with regular markdown, so thanks for this package!
",rgbkrk,2016-03-09 22:55:35
608,2015-06-23 15:43:34,"In fact, this is akin to the style of markdown that pandoc will produce and consume as well: http://pandoc.org/demo/example9/pandocs-markdown.html
",rgbkrk,2016-03-09 22:55:35
608,2016-03-09 22:55:35,"Closing, since I'm using commonmark now and this needs a rebase.
",rgbkrk,2016-03-09 22:55:35
607,2015-06-20 22:22:04,"On current `master`:

<S_CODE_TOKEN>

On a side note, it would be nice to activate [Travis for this repo](https://travis-ci.org/chjj/marked). It does have a .travis.yml after all.
",rgbkrk,2015-06-20 22:33:42
607,2015-06-20 22:29:10,"Hmmm, I tried to do a `git bisect` to find where things differed, using `rm -rf node_modules/ && npm install && npm test` as my eye of sauron. `v0.3.3` - `v0.3.1` all have this issue while `v0.3.0` has a few more:

<S_CODE_TOKEN>
#10. def_blocks.text failed at offset 20. Near: ""<blockquote><p>hello</p></blockquote><hr><blockquo"".


Got:
<blockquote><p>hello</p></blockquote><hr><blockquo


Expected:
<blockquote><p>hello[1]:hello</p></blockquote><hr>


#11. double_link.text failed at offset 46. Near: "":<ahref=""http://example.com/""><ahref=""http://example.com/"">h"".


Got:
:<ahref=""http://example.com/""><ahref=""http://example.com/"">h


Expected:
:<ahref=""http://example.com/"">http://example.com/</a>.</p><p

#12. escaped_angles.text completed.
#13. gfm_break.breaks.text completed.

#14. gfm_code_hr_list.text failed at offset 360. Near: "">foo<code>bar</code>bar:</p><p><S_CODE_TOKEN>erbfoo</p></li></ol></li><


Expected:
>foo<code>bar</code>bar:</p><pre><codeclass=""lang-erb"">foo--
<S_CODE_TOKEN>
",rgbkrk,2015-06-20 22:33:42
607,2015-06-20 22:32:41,"Went back far enough to see when `npm test` got introduced. Guess this is just an open bug for the moment?
",rgbkrk,2015-06-20 22:33:42
607,2015-06-20 22:33:42,"Closing in favor of #136. Sorry to bother!
",rgbkrk,2015-06-20 22:33:42
606,2015-06-20 19:04:11,"RMarkdown ends up putting an extra spin on the code fences:

<pre>
<S_CODE_TOKEN>
</pre>


Within marked, this ends up getting picked up as paragraph sections, where each empty line delineates the next paragraph.

![screenshot 2015-06-20 14 05 12](https://cloud.githubusercontent.com/assets/836375/8268808/1b02d348-1755-11e5-9bb3-78f2cd194f23.png)

Ended up noticing that by overriding paragraph (when I was really trying to build on the `code` renderer):

<S_CODE_TOKEN>
",rgbkrk,
606,2015-06-20 19:04:49,"Note: RMarkdown also has YAML front matter which I can already extract out using solutions from #485. 
",rgbkrk,
606,2015-06-20 21:04:32,"Here's the [Markdown Document Format](http://rmarkdown.rstudio.com/markdown_document_format.html)
",rgbkrk,
605,2015-06-16 09:15:53,"i'm try to use `<center> ![img](123.jpg) </center>`
img is did not translate inside

i'm use 'marked.js'  parse, it's work fine
",djfly,
604,2015-06-12 15:56:23,"Hi

First of all, thanks for great parser and compiler!

Seems that cyrillic generated ids from markdown headers have some issues.

This

<S_CODE_TOKEN>

becomes

<S_CODE_TOKEN>

while it have to be like this:

<S_CODE_TOKEN>

I understand that it might sound a bit odd, but it's perfectly fine id. Link like `<a href='index.html#заголовок'>link</a>` works as expected (tested in Chrome, Mozilla and IE11).
",ArmorDarks,
604,2015-06-18 04:51:11,"+1
",Jayin,
604,2015-07-04 02:46:14,"_+1_
It would be good if a link could be made like this

<S_CODE_TOKEN>
",KostyaTretyak,
604,2015-11-07 16:07:12,"I support this too. Will it ever be fixed? Or can there be an option to disable automatic id generation?
",scsmash3r,
604,2015-11-07 19:11:14,"I fix it, just read [README.md](https://github.com/chjj/marked#overriding-renderer-methods)

<S_CODE_TOKEN>
",KostyaTretyak,
604,2015-11-08 09:49:52,"oh, nice. How did I miss it. Thanks.

I thinks it would be better to use something like [urlify](https://github.com/Gottox/node-urlify), which will convert cyrillic chars to latin ones, instead of replacing them with null or dash.
",ArmorDarks,
603,2015-06-10 22:49:34,"Per bower/bower.json-spec@a325da3
",kkirsche,
602,2015-06-05 07:01:24,"I had writing `> test` but become `> test` without blockquote. Why?
",mzaini30,
602,2015-07-05 23:02:28,"I noticed the same error.
",lindstrm,
602,2015-09-05 19:56:59,"Me too!!
",glantucan,
602,2015-09-15 08:11:46,"use $('#content').text() to get text works for me.
",dongwq,
602,2015-11-20 00:02:41,"I'm getting the same thing!
",EverlessDrop41,
601,2015-06-01 08:43:06,,PeterDaveHello,
600,2015-05-29 08:04:25,"Before the patch, this:
[blabla](link%28text%29) would generate incorrect href=""link(text"" 

now it generate href=""link(text)""

The fix is to make the regex greedy, so it takes all the characteres in the href until the last ')'
",RemiArnaud,
600,2016-01-05 15:31:17,"+1 Just hit this with inline images
",AlastairTaft,
600,2016-01-15 00:21:14,"If I understand correctly and this would fix the fact that `https://en.wikipedia.org/wiki/Football_(disambiguation)` autolinks to `<a href=""https://en.wikipedia.org/wiki/Football_(disambiguation"">https://en.wikipedia.org/wiki/Football_(disambiguation</a>)`, then a big :+1: 
",adam-lynch,
600,2016-01-15 05:31:01,"Yes it does
",RemiArnaud,
599,2015-05-28 18:13:04,"When I try to italicize a substring like this:

<S_CODE_TOKEN>

the output is:

<S_CODE_TOKEN>

Shouldn't it be:

<S_CODE_TOKEN>

I should mention bold works as expected:

<S_CODE_TOKEN>

[codepen](http://codepen.io/jwerre/pen/GJrpjV)
",jwerre,
599,2015-06-10 01:53:42,"This is indeed a difference with [GitHub flavoured Markdown](https://help.github.com/articles/github-flavored-markdown/) (GFM) which is enabled by default.

>    Where Markdown transforms underscores (_) into italics, GFM ignores underscores in words

To disable this behaviour, one has to set both `pedantic: true` and `gfm: false`; I can't say whether this behaviour is also an intentional part of non-pedantic Markdown.

However, you can also use `*` (asterisks) to italize word portions: `Ita*li*ze`: Ita_li_ze

I think this is related to #598.
",Mashkin,
598,2015-05-24 11:09:27,"Emphasis should be disabled if gfm is enabled (underscores).

Reference: https://help.github.com/articles/github-flavored-markdown/#differences-from-traditional-markdown
",jellytux,
597,2015-05-23 14:38:47,"syntax error
",nimojs,2016-10-17 02:36:40
596,2015-05-21 15:45:50,"<S_CODE_TOKEN>
$ node
> var m = require(""marked"");
undefined
> m(""<S_CODE_TOKEN>"");
'<pre><code>This is code\n</code></pre>'
> m(""<div><S_CODE_TOKEN></div>"");
'<div><code>This is code</code></div>'
> m(""<div>\n<S_CODE_TOKEN>\n</div>"");
'<div>\n<code>This is code</code>\n</div>'
<S_CODE_TOKEN>

The first example works as expected. The second and third just do &lt;code>, like it's inline. It's not tag specific, or least it doesn't appear to be... 

<S_CODE_TOKEN>
> m(""<abc>\n<S_CODE_TOKEN>\n</abc>"");
'<abc>\n<code>This is code</code>\n</abc>'
<S_CODE_TOKEN>

Just any code fences inside markup is assumed to be inline code instead of code blocks. 
",TravisTheTechie,
595,2015-05-21 01:04:30,"for example:

<S_CODE_TOKEN>
",helphi,
595,2015-05-28 20:57:58,"@helphi `|` isn't the [list of escapable characters](http://daringfireball.net/projects/markdown/syntax#backslash), so that may be why it isn't working. (I don't see anything in the GitHub spec about it either.)

Interestingly, I am also having trouble parsing tables with `|`, even when they're in code ticks, like so:

<S_CODE_TOKEN>

This renders correctly on GitHub:

| Tables | Are | Cool |
| --- | :-: | --: |
| In ticks: `|` | test | $4 |

But it renders incorrectly [on Gist](https://gist.github.com/getaaron/ae09afdefb031930cc1e) and when using marked.js.
",getaaron,
595,2015-07-28 15:20:15,"The error in parsing might have something to do with robotskirt(the parser) failing to build. I got the error when I cloned the repo to get ready to debug locally. There is also failing test for me as well. 

If the parser is not working and it looks like its no longer being supported as well [deprecation commit](https://github.com/docpad/docpad-plugin-robotskirt/commit/c183c9b74c40c0546a939b8d4c6119db88106e31). Last commit to main repo is 11/2013.

Currently looking into alternatives

<S_CODE_TOKEN>
",bdougie,
595,2015-07-28 20:42:10,"I found out that [roboskirt](https://github.com/benmills/robotskirt) is [no longer being supported](https://github.com/benmills/robotskirt/issues/36). The recommendation is to use [hoedown](https://github.com/hoedown/node-hoedown). I am looking into that now.
",bdougie,
595,2015-08-04 14:17:51,"I have a fix:

Turns out the `|` is confusing the markdown.  If you wrap any pipes in in a `<code></code>` block and replace the pipe with the literal `&#124;` you will be good to go. 

But the following will work for you

<S_CODE_TOKEN>
",bdougie,
595,2016-03-29 08:48:08,"@getaaron Escaping `|` wtih `\|` in tables is actually mentioned in the GitHub documentation [here](https://help.github.com/articles/organizing-information-with-tables/) (at the bottom of the page).
",ZombineDev,
595,2017-02-21 21:19:27,"From https://github.com/hexojs/hexo/issues/2414

@bdougie is right, that doesn't work with backquote either.

**Description** : pipes inside inline code block inside an array don't display correctly.

Markdown code:

<S_CODE_TOKEN>

Bugous behaviour:
![](http://i.imgur.com/DY7T8H9.png)

Espected behaviour:
![](http://i.imgur.com/0BNVXAp.png)

Render is: 

<S_CODE_TOKEN>

Have you plan a permanent fix?",noraj1337,
595,2017-02-21 22:32:53,"@ZombineDev `\|` is GFM (GitHub Flavored Markdown) (but is not Gruber's original Markdown) so Marked must support it as Marked claims to support GFM (activated by default).

Problems comes from the parser : roboskirt. roboskirt is not more updated but node-hoedown seems not either.
A better approach is to consider a CommonMark compliant parser (https://github.com/chjj/marked/issues/563).
[commonmark.js](https://github.com/jgm/commonmark.js), [markdown-it](https://github.com/markdown-it/markdown-it) and [remarkable](https://github.com/jonschlinkert/remarkable) all seems well updated an wide spreaded.",noraj1337,
595,2017-02-21 23:14:00,"Both <S_CODE_TOKEN> and `\|` work well with markdown-it. As you can see [here](https://github.com/hexojs/hexo/issues/2414#issuecomment-281510945). Maybe consider to use markdown-it, because Marked seems to begin to die (https://github.com/chjj/marked/issues/724).",noraj1337,
594,2015-05-20 09:26:39,"As described in http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax

Would be convenient if some section could be completely ignored by parser.

<!---
your comment goes here
and here
-->
",jkarttunen,
594,2015-09-22 15:07:33,"+1
",bryanjacquot,
593,2015-05-20 02:35:49,"When urls are automatically linked, only the ones beginning with http:// or https:// are converted. Would it be possible to support www as well? Or Is there any way I can render them as anchor tags myself?
",chanthus,2016-07-04 13:55:25
593,2016-07-04 13:40:50,"@chanthus hey, how did you fix this issue?
",danderu,2016-07-04 13:55:25
593,2016-07-04 13:55:25,"I was using this library in an angular app, so before piping the markdown through _marked_, urls are piped through a filter that prefixes _http://_ which then makes _marked_ render them as proper links.
",chanthus,2016-07-04 13:55:25
592,2015-05-19 21:59:37,"With the sanitize option on it is possible to create a link with a javascript: protocol with the following: `[URL](javascript&#58document;alert&#40;1&#41;)`. 

HTML entities in the browser are not strict and parse what they can and leaving the rest behind. For example `&#xNNanything;` would parse the NN hex values but leave behind the string ""anything;"".   

""`javascript&#58document;`""  with the regex `/&([#\w]+);/` returns ""`58document`"" and is parsed by String.fromCharCode to """". Because of this the later tests only sees the javascript keyword without the :. However the browser parses this to: ""`javascript:document;`"". 
",matt-,2016-07-29 19:07:57
592,2015-09-24 14:50:49,":+1: This seems pretty significant.
",gscottolson,2016-07-29 19:07:57
592,2015-09-24 19:26:47,"I assume this project is dead. I cant see letting an XSS go for this long otherwise. I have moved to a new Lib in my project. 
",matt-,2016-07-29 19:07:57
592,2016-01-25 20:43:12,"<img width=""461"" alt=""screenshot 2016-01-25 12 34 30"" src=""https://cloud.githubusercontent.com/assets/453602/12563620/06a2c1ee-c360-11e5-9020-ad888513e23b.png"">
I created a fork and this PR, but the real solution is to use something else. I am recommending that the node security project mark this project as vulnerable and abandoned. 
",matt-,2016-07-29 19:07:57
592,2016-01-25 20:47:37,"@matt- any recommendation for alternatives?
",alexkravets,2016-07-29 19:07:57
592,2016-01-25 23:22:06,"https://github.com/jonschlinkert/remarkable has been great for me. 
",matt-,2016-07-29 19:07:57
592,2016-01-26 10:01:46,"@matt- thanks a ton!
",alexkravets,2016-07-29 19:07:57
592,2016-01-26 22:29:24,"That moment when you realize you didn't comment on an open issue, but rather an open PR.  Whelp.
",droppedoncaprica,2016-07-29 19:07:57
592,2016-04-18 19:28:28,"when will this be pulled?
",uptownhr,2016-07-29 19:07:57
592,2016-04-21 04:12:06,"+1 Can this please be merged in so we can remove the advisory?
",EthanRubinson,2016-07-29 19:07:57
592,2016-04-24 11:35:47,"+1
",oriweingart,2016-07-29 19:07:57
592,2016-04-25 16:54:29,"+1
",danactive,2016-07-29 19:07:57
592,2016-04-27 13:24:39,"@matt- Remarkable looks great (very very clean) but it's about 6x the size of Marked.  For some use-cases (client-side) it seems like Marked would be preferable on those grounds (though for anything else I'm probably going to be using remarkable given the focus on performance).
",developit,2016-07-29 19:07:57
592,2016-04-27 13:37:52,"the question is, where is the repo maintainer?
",uptownhr,2016-07-29 19:07:57
592,2016-04-27 13:40:29,"Perhaps on vacation?

<img width=""718"" src=""https://cloud.githubusercontent.com/assets/105127/14854051/0849324a-0c5c-11e6-8a20-18bb06c56c18.png"">
",developit,2016-07-29 19:07:57
592,2016-04-27 13:41:04,"+1
",drastick,2016-07-29 19:07:57
592,2016-04-27 13:41:50,"Vacation for a year? Must be nice.
",drastick,2016-07-29 19:07:57
592,2016-06-02 08:56:55,"@matt or anyone else...   Any chance that you would be willing to help the Modernizr js (https://github.com/Modernizr/Modernizr)  swap out its dependency from Marked to Remarkable? I'm too new at programming javascript to take  on the task myself. 
",emveeoh,2016-07-29 19:07:57
592,2016-06-02 12:30:18,"~~This appears to be no longer reproducible. I believe the author fixed it and just ignored this PR. Can anyone still reproduce it with the latest version of Marked?~~

EDIT: I was mistaken, this is still valid. Just had some more post processing that was causing it to not be reproducible in my app. 
",timjrobinson,2016-07-29 19:07:57
592,2016-06-03 15:30:11,"""Latest commit 88ce4df  on Jul 31, 2015""  This issue is not resolved and has not been even been touched. 

The exact example you gave is the XSS issue. (Put that HTML in a browser and click on it.)  javascript: (in any form even with html entities) should be blocked in sanitize mode.

Example where marked works correctly:

<S_CODE_TOKEN>

Example this PR resolves with bad entities:  

<S_CODE_TOKEN>

If you think this is still some how resolved please read this blog to better understand the issue: 
https://snyk.io/blog/marked-xss-vulnerability/
",matt-,2016-07-29 19:07:57
592,2016-06-03 15:39:09,"From the first sentence in this PR: ""With the sanitize option on""   This lib has a sanitize mode that is intended to block normal HTML and prevent xss. https://github.com/chjj/marked#sanitize

It also filters ""javascript:""  and ""vbscript:"" as intended in this mode. This is an example of bypassing that with html entities.  

Executing javascript (an XSS) is much MUCH worse than ""plain old hyperlinks"". This is an abandoned project with an open and very clear security issue.. not exactly what I consider FUD. 
",matt-,2016-07-29 19:07:57
592,2016-06-03 15:46:51,"@matt- I was able to reproduce this in indeed. I may have been confused due to the fact that post-process links and images, mitigating this issue.
",mvhenten,2016-07-29 19:07:57
592,2016-06-03 15:49:57,"@matt- sorry I work with @mvhenten and we thought it was resolved but it was only not affecting us due to post-processing. This is still a valid issue. Thanks for the test cases. 
",timjrobinson,2016-07-29 19:07:57
592,2016-06-03 15:55:37,"I've dropped an old-fashoned e-mail. maybe it helps.
",mvhenten,2016-07-29 19:07:57
592,2016-06-07 16:41:03,"@matt- You said that you made a fork - have you published in on npm? I agree with you that this module should never be used for any project if it has such a poor record of dealing with security issues, but there are already 1600 modules on npm that depend on it and having a version on npm with your patch applied would make it possible to quickly fix them (and who knows how many other modules that depend on those 1600) with a simple change of `require('marked')` to `require('marked-secure')` (or however your fork would be named) as a temporary fix before they can all be updated to use better markdown parsers.

Having a security vulnerability in at least 1600 modules on npm even though a fix has been available **for over a year** now but the maintainer can't be bothered to click a merge button is a serious problem. The project may be dead in a sense that its original author doesn't care about it any more but it's anything but dead when you consider its usage:
![](https://nodei.co/npm/marked.png?downloads=true&downloadRank=true&stars=true)
![](https://nodei.co/npm-dl/marked.png)
It's being used all over the place - [including the official Node.js website](https://david-dm.org/nodejs/nodejs.org) - it has 1.5 million downloads per month and growing.

I found out about this issue today by a coincidence because I saw **""dependencies: insecure""** badge in the [readme](https://github.com/nodejs/nodejs.org/blob/master/README.md) of the https://nodejs.org/ website's [GitHub project](https://github.com/nodejs/nodejs.org), which was linked to [the nodejs.org entry on david-dm.org](https://david-dm.org/nodejs/nodejs.org) that had a big red **""SECURITY VULNERABILITIES IN DEPENDENCIES""** and a link to the [marked content-injection advisory](https://nodesecurity.io/advisories/marked_content-injection) on the Node Security Platform - which in turn included a link to this very pull request. If I hadn't clicked that badge I would probably never know about any security problems with that module - I would certainly never go through all the issues and PRs to find this one or #724 and know that this projects is dead and insecure, because there is not even a hint about any problem with that module in its readme on GitHub and npm
",rsp,2016-07-29 19:07:57
592,2016-06-12 11:23:10,"Especially @matt- please check out https://github.com/chjj/marked/issues/756
",tcurdt,2016-07-29 19:07:57
592,2016-06-13 07:41:36,"Interesting POV from the showdown project https://github.com/showdownjs/showdown/wiki/Markdown's-XSS-Vulnerability-(and-how-to-mitigate-it)
",tcurdt,2016-07-29 19:07:57
592,2016-06-14 18:31:11,"Is there any precedent at npm for transferring an insecure package to a new maintainer who can be trusted to move the project forward? I would assume some sort of process would need to be in place in case of a disappearing/deceased/missing maintainer of any sufficiently popular package.
",STRML,2016-07-29 19:07:57
592,2016-06-14 18:52:11,"@STRML I believe there must be a process - but I am not aware of any. That said - have a look at #756. I guess we just need someone that steps up.
",tcurdt,2016-07-29 19:07:57
592,2016-07-08 19:54:14,"Besides the _Remarkable_ project, there is also _markdown-it_. The description of this project says:

> markdown-it is the result of the decision of the authors who contributed to 99% of the Remarkable code to move to a project with the same authorship but new leadership (Vitaly and Alex). It's not a fork.

The API for `markdown-it` looks very similar to _Remarkable_. I don't understand how it's _Not a fork_. 

I have not tried _Remarkable_ or _markdown-it_. Any comments on the differences are welcome. Other people are going to continue to end up at this pull request because it's referenced by a security notice:

https://nodesecurity.io/advisories/101

Since the best ""fix"" seems to be switching to a new project, it seems on-topic to discuss the best alternatives here. 
",markstos,2016-07-29 19:07:57
592,2016-07-08 20:02:11,"- `markdown-it` has no open bug issues, with 214 closed (only 2 feature requests are open)
- `remarkable` has 48 open issues and 120 closed. I'm not sure how many open issues are bugs.
- Both projects show commit activity in the last month. 
- Neither project has open vulnerabilities nodesecurity.io. `remarkable` had one in the past. https://nodesecurity.io/advisories/module/remarkable https://nodesecurity.io/advisories/module/markdown-it
",markstos,2016-07-29 19:07:57
592,2016-07-08 20:44:12,"@chjj responded to a call for maintainers https://github.com/chjj/marked/issues/756 
",mvhenten,2016-07-29 19:07:57
592,2016-07-13 14:52:37,"@matt- now that you're a maintainer can you merge / release this please :)
",timjrobinson,2016-07-29 19:07:57
592,2016-07-13 15:39:09,"I would like to have someone else sign off on the PR (as I am the one that added it). Anyone?
",matt-,2016-07-29 19:07:57
592,2016-07-13 15:50:08,"Hang on, test 10 is failing:

<S_CODE_TOKEN>
",STRML,2016-07-29 19:07:57
592,2016-07-13 15:51:12,"Would be good to address #321, #474 first so we have test output in the PR.
",STRML,2016-07-29 19:07:57
592,2016-07-13 15:56:21,"Actually can confirm test 10 is failing on `master`, so it's not a regression. :+1: LGTM, did you want to address the semicolon concern in the line comment?
",STRML,2016-07-29 19:07:57
592,2016-07-20 04:14:26,"I think we are good on this one? 
",matt-,2016-07-29 19:07:57
592,2016-07-28 21:00:10,"Any plans to publish this patch on npm?
marked still triggers ""SECURITY VULNERABILITIES IN DEPENDENCIES"" warning for nodejs.org at https://david-dm.org/nodejs/nodejs.org
",rsp,2016-07-29 19:07:57
592,2016-07-29 18:16:36,"No reason to keep delaying on this, please merge @matt-
",STRML,2016-07-29 19:07:57
592,2016-07-29 19:15:21,"I thought we were waiting for the test 10 is fail.
",matt-,2016-07-29 19:07:57
592,2016-07-29 19:39:57,"See https://github.com/chjj/marked/pull/592#issuecomment-232400724

Anyway, thanks for the merge!
",STRML,2016-07-29 19:07:57
592,2016-07-29 19:41:25,"Yep, that was my bad. Happy to finally get this in. 
",matt-,2016-07-29 19:07:57
592,2016-07-29 20:06:47,"@matt- Can you `npm version patch && npm publish` yourself or does it still have to be done by @chjj? The version on npm is still 0.3.5 published 12 months ago: https://www.npmjs.com/package/marked
",rsp,2016-07-29 19:07:57
592,2016-07-30 03:07:41,"That is all @chjj

On Friday, July 29, 2016, Rafał Pocztarski notifications@github.com wrote:

> @matt- https://github.com/matt- Can you npm version patch && npm publish
> yourself or does it still have to be done by @chjj
> https://github.com/chjj? The version of npm is still 0.3.5 published 12
> months ago: https://www.npmjs.com/package/marked
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/chjj/marked/pull/592#issuecomment-236280610, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAbr4sQX5-C4C_BdSAvsUq5sjg32a6Tdks5qal1agaJpZM4Eg7pd
> .

## 

../matt
",matt-,2016-07-29 19:07:57
592,2016-07-30 03:10:54,"@matt-, published. Great work guys.
",chjj,2016-07-29 19:07:57
591,2015-05-18 18:51:43,"The parser expects a block surrounded in `$$ ... $$` or an inline component surrounded in `$ ... $`. You supply the renderer, via a `math` option, which is an object with a `render` method that returns a string, representing the outputed math.

This is different from #180, in that the renderer is not limited to just MathJax, but KaTeX will work as well.
",shovon,
590,2015-05-13 19:34:53,"This code block

<S_CODE_TOKEN>

gets converted to

<S_CODE_TOKEN>

which should really be

<S_CODE_TOKEN>
",tcurdt,
589,2015-05-06 18:07:01,,4ok,
589,2015-05-08 00:58:50,"This changes a lot and adds a lot of method calls. Is the overhead worth the benefit?
",chjj,
589,2015-05-08 14:39:49,"I have no idea how to do differently.

The rendering result was originally conceived in order to return a string. To return result in any formats, were invented such a decision. In addition this solution is extensible.

Moreover, the method call not greatly affect the speed of execution.
",4ok,
589,2015-05-22 14:06:39,"Look module [markdown-bemjson](https://github.com/bem-incubator/markdown-bemjson), it based on forked marked.
",4ok,
588,2015-05-06 18:02:14,"It is necessary to obtain [BEMJSON](https://en.bem.info/technology/bemjson/v2/bemjson/) from markdown markup.
",4ok,
587,2015-05-06 07:49:58,"Add support for Github Task Lists under the gfm flag.

Changes to API
- list(_string_ body, _boolean_ ordered, _boolean_ taskList)
- listitem(_string_ text, [_boolean_ checked]).

`checked` is defined when you have a list item which starts with `[ ]` or
`[x]`.If defined its a boolean depending on whether the `x` is
present. When checked is defined we add a input type type `checkbox` to
the list item and add the class `task-list-item-checkbox`.

`taskList` is true if a list has any list items where `checked` is
defined. When true we add the class `task-list` to the list.

Resolves chjj/marked#107
",jhollingworth,
587,2015-05-08 00:39:53,"@jhollingworth 
Very cool. Hopefully this gets merged.
However this project doesn't seem very active anymore.
You might want to checkout [markdown-it](https://github.com/markdown-it/markdown-it)
",styfle,
587,2015-05-08 00:57:10,"I had an implementation of this that I reverted because I was originally completely against further GFM extras. I thought I had lost it when my laptop bricked, but I realized it wasn't on a separate unpushed branch. It's in the git history: https://github.com/chjj/marked/issues/107

I'll compare these two.
",chjj,
587,2015-05-08 05:18:23,"do you mean 26cef98d7261cb8330c07eceff250254124f20d8 and a5e39a6a59a91a7c8fa88e9113ba4dde7264e33b? The one issue I saw with yours was it does not support the scenario where a list has items that are not checkboxes. 
- [ ] Foo
- Bar
- [ ] Baz

Also, have your view changed on adding GFM extras or do you not want to merge this?
",jhollingworth,
587,2015-05-15 22:48:59,"@jhollingworth thanks for starting with the lexer as that fits my use case.
",toolbear,
587,2015-07-24 10:31:08,"What's happening with this?
",felixSchl,
587,2015-10-31 09:01:27,"Will this make it to core? Any ETA?
",cdaguerre,
587,2015-11-11 05:52:42,"Using this code in a app right now and seems to work good. Would love to see this getting merged back

![screen shot 2015-11-11 at 2 39 31 pm](https://cloud.githubusercontent.com/assets/688326/11084722/0e9fe3ae-8882-11e5-9381-074905eae76c.png)
",dvcrn,
587,2015-12-19 03:41:23,"Any chance of this getting pulled in in the near future? Would love to have checkboxes available in ipython notebooks, and they're waiting on it to be implemented here.

https://github.com/ipython/ipython/pull/8402
https://github.com/ipython/ipython/issues/6288
",msto,
587,2016-02-09 14:14:03,"would love to see this too
",noerw,
587,2016-02-18 23:39:17,"Any updates on this?
This would make integration of checklists for https://github.com/wekan/wekan much easier.
",Sohalt,
587,2016-02-19 07:22:42,"Checklist feature is an important feature for wekan project...
So merging this pull request would help developpers to finish this other pull request https://github.com/wekan/wekan/issues/298#issuecomment-181293631 and be sure they won't use another alternative...Hope to see this on wekan project soon...
",ousamabenyounes,
587,2016-04-20 20:17:29,"Hi! Any chance this will get merged?  We would like top pick up this fix for [VS Code](https://github.com/microsoft/vscode).
",chrisdias,
587,2016-04-20 23:34:50,"This project is definitely dead. I merged this in a own fork and use that for [markright](https://github.com/dvcrn/markright)
",dvcrn,
587,2016-07-09 14:52:32,"@matt- @parleur Thank you for maintaining this project. I would love to +1 this PR.
",ZackWard,
587,2016-08-03 11:51:09,"This should either be merged or feedback given as to why it won't be. What's the hold up?
",Xaekai,
587,2016-09-25 17:28:29,"I hope this branch would be merged
",wujr5,
587,2017-01-05 23:02:51,"I write my notes in [VS Code](https://github.com/microsoft/vscode) using markdown. Every time I go to make a task list I expect GFM behavior, but alas, it never works. I'd love for VS Code to change, but I think they've made [it clear](https://github.com/Microsoft/vscode/issues/2175) that they won't. The state of this project is making me sad. Come on guys, get your act together, be a man, pass the baton and let people help.
@matt- @chjj @parleur ",richarddavenport,
587,2017-01-06 01:59:57,"Not sure what ""be a man"" has to do with this PR. Please try to keep it professional. ",matt-,
587,2017-01-06 02:55:47,"Thanks for approving the changes. May 7th 2015, was the last time any maintainer touched this issue. I was saying be a man about handing over the project to someone that could be more actively involved. For me it's a humbling experience to hand over a project that I started and grew. If you guys are not going to listening to the community, then that is unprofessional. Sometimes people need a little prodding.",richarddavenport,
587,2017-01-06 03:19:16,What does being a man have to do with anything? What about ones sex do you believe solves this PR?  Grow up a bit man. You don't get thing done by being a dick. Fork the project and move on if you are so unhappy. That's the great thing about open source. ,matt-,
587,2017-01-06 04:19:18,It's an expression. [Maybe this will help.](https://www.youtube.com/watch?v=-qtrAMK7_Qk) I already explained my circumstance and I didn't use vulgar language. Sorry if your feelings got hurt. You have so many people and projects practically begging for things to move forward.,richarddavenport,
587,2017-01-06 04:37:02,"No hurt feelings. Just asking for some professionalism. Maybe too big of an ask, but can we at least get back on the topic of this ticket and less about your general complaints. ",matt-,
587,2017-01-06 16:07:52,I agree! Sorry I took out some aggression on this issue and the maintainers. Just really want my checkboxes in VS Code!,richarddavenport,
587,2017-01-06 18:00:12,@matt- Good to see you approve this PR. What are the next steps to get this merged? Thanks!,styfle,
587,2017-01-24 00:31:37,Any plans on getting this merged?,samiraguiar,
587,2017-02-22 22:34:10,I'd also love to see this merged!,Agent01,
587,2017-03-10 01:34:20,+1,mspiegel,
587,2017-03-14 05:47:59,"+1

I want this for https://github.com/volca/markdown-preview/issues/34",jpouellet,
586,2015-05-05 06:05:48,"Hello,
When a link targets javascript, the trailing ) is dropped.
Example:  `[hello](javascript:alert(""Hello""))` links to `javascript:alert(""Hello""`
Thanks for your job!
@chtixof
",chtixof,
585,2015-05-02 07:04:00,"allowing dot before extension as github markdown

<S_CODE_TOKEN> .md
    <S_CODE_TOKEN>
<S_CODE_TOKEN>
",jgermade,2015-05-08 01:01:17
585,2015-05-08 01:01:31,"Didn't realize this one. Thanks.
",chjj,2015-05-08 01:01:17
584,2015-04-30 01:22:36,"There seem to be some spaces coming into my code blocks to play. :)

Here is the input:

<pre>1. The first step.
2. Another step. We can call it the second one
3. This is obviously the third step.

    This is indented because it is part of the third step. Don't run this:

        this is indented with two tabs because it is a command you should never run

    Possible other command to never run:

        this is also indented with two tabs since it is another command you must never run

4. Last step. Please be done now.</pre>


This is the output from marked:

<S_CODE_TOKEN>

Note the spaces being prepended before ""This is indented…"" and ""Possible other…"". This isn't such a problem because HTML compresses whitespace. (But you might want to fix that as well.)

The main issue is the space being prepended to code blocks. Look for it right before ""this is indented with two tabs…"" and ""this is also indented with two tabs…"".

I am not sure why it is there or where it comes from. The behavior is the same when using four spaces instead of two tabs, so it doesn't appear to be related to spaces vs. tabs at all.

The space doesn't appear when parsing with the Markdown Dingus (or, coincidentally, GitHub's Markdown preview here). :)

They (and the other parsers I've used) produce the result I would expect:

<S_CODE_TOKEN>

I hope that helps. Please let me know if there is anything I can clarify. It's not a huge problem, but I suspect it can be resolved pretty easily. Then again, those are famous last words. I'm a writer not a developer. :)
",khad,
583,2015-04-22 18:20:02,"Hello!
My case: markdown + html parts 

<S_CODE_TOKEN>

output:

<S_CODE_TOKEN>

Result: Parser replaced `__` to `<strong>` and didn't pay attention to what it has inside html pieces and it's not just one text. 
Probably I would agree that this is the correct behavior of `marked` module, if I am not checked this case on `Github`, where everything is displayed correctly

Thank you for your attention :smirk: 
",tavriaforever,2015-04-30 11:37:00
583,2015-04-26 12:33:20,"I have a code fix [here](https://github.com/formulahendry/marked/commit/2f73f6ee82603b49ef4b54c0cc9805d89cf91b25). Hope the pull request could be merged. Unfortunately, this repo has not been updated for over 3 months :(
",formulahendry,2015-04-30 11:37:00
583,2015-04-30 11:36:58,"Thank you very much! It fixed our case. 
",tavriaforever,2015-04-30 11:37:00
582,2015-04-22 07:57:40,"Marked will render strong or em with a wrong output in below situation. We should not render strong or em when text contains tag.

<S_CODE_TOKEN>
",formulahendry,
582,2015-05-08 01:05:18,"This is trickier than it appears since the original markdown doesn't process any html as markdown. It's another question of whether to remain true to markdown or add more of our own dynamic behavior. The negative lookahead for a tag might work, but I want to keep marked from being an html parser. Open to argument here.
",chjj,
581,2015-04-17 15:48:34,"Hi, this may be a feature request, but is there any way to override the way that plain text is rendered? There's no function on Renderer that is called if the string matches the 'text' rule. The closest hack I can do is to override `InlineLexer.prototype.smartypants` but if I add markup it gets escaped and I can't override the escape function from within my application. Those methods aren't ideal anyways. Is there anything else I can do for now? Thanks.
",mattcodez,
580,2015-04-16 16:15:35,"The '*' character is being parsed form the markdown seemingly at random. I was wondering if you have experienced this behavior before?
",BannedForLife,
579,2015-04-16 14:11:59,"Works by re-assigning noop; gfm must be false.
",gbradley,
579,2015-05-08 09:15:35,"+1. 

What if something is in `block` and in `inline`?

---

@chjj are you planning to merge this then since you closed #562? :smile: 
",adam-lynch,
578,2015-04-15 18:39:39,"I'm not really sure what the `breaks` option does, as the link in the readme about [GFM line breaks](https://help.github.com/articles/github-flavored-markdown#newlines) is broken.
",buob,
578,2015-09-18 12:29:26,"Here's the updated link:
https://help.github.com/articles/writing-on-github/#newlines
",AdrianoFerrari,
578,2015-11-04 23:31:39,"@buob @chjj doesn't appear to do anything currently.
",amccloud,
577,2015-04-11 12:02:04,"I'm currently using showdown as a markdown parser since its easier [at my skill level] to extend the parser to incorporate what I need: attribute support for links, and custom link types. This engine is however somewhat faster in my case, so I'm trying to port my customisations.

My link finder regexp isn't as sophisticated as in this engine. I'm currently battling with this:

<S_CODE_TOKEN>

which is effectively matching the square brackets, then the href, the optional title, then an optional section wrapped in curly brackets. You can see I've got problems with single and double quotes. so it would match something like

<S_CODE_TOKEN>

I treat the section inside curles as json, and apply it as attributes to the rendered link. In the example above, this would render as

<S_CODE_TOKEN>

If it encounters a key that is outside a known list (class, target, width, height, etc) then the attribute is prefixed with `data-` so that I can also add data attributes to links (also worked on images) in the same way.

I've also added some new types of href, such as `?[import](http://somewhere.com/file.md)` which use a switch to look at the `alt` portion and treat it as a command. In this example, `import` uses xhr or fs to read a remote file and append it in place (I also allow iframe, oembed, and a few handy tools). So I can do common templates much easier. I _kind of_ have a handle on how this would be implemented, but am getting hung up trying to implement the support for optional braces in the link part, and the code where it matches the `!` for images.

Any thoughts or pointers would be appreciated!
",frumbert,
576,2015-04-09 18:07:40,"I have the same issue as the one in [Markdown in JS without enclosing paragraph](http://stackoverflow.com/questions/27663203/markdown-in-js-without-enclosing-p).

Do you if there is way to achieve that?
",PerfectCarl,2015-04-10 17:42:06
576,2015-04-10 10:29:20,"Hey! It's pretty easy to do. I just answered the question on stackoverflow: http://stackoverflow.com/a/29559116/451634

Let me know if it worked or if you need further help.

Best from Berlin,
Benny
",bennyn,2015-04-10 17:42:06
576,2015-04-10 17:42:06,"It works perfectly, thanks.
It feels a bit that it should be added as an option (or documented in the front page).

For reference my code was: 

<S_CODE_TOKEN>

Best from France,
C.
",PerfectCarl,2015-04-10 17:42:06
575,2015-04-09 12:35:46,"Try this one:

<S_CODE_TOKEN>

It will render:

<S_CODE_TOKEN>

So the closing `)` is misplaced.
",bennyn,
575,2015-04-15 05:54:50,"Correct links autodetection is non trivial thing. Try http://markdown-it.github.io/linkify-it/ for this task.
",puzrin,
574,2015-04-09 11:59:14,"I have seen that ""marked"" parses Markdown within links. This should not happen.

Here is my example:

<S_CODE_TOKEN>

The **output** is:

<S_CODE_TOKEN>

As you can see, the `languageLocale=de_de&cp` has been turned into `languageLocale=de<em>de&amp;cp`, so `de_de` became `de<em>de`, which is wrong.
",bennyn,
574,2015-05-30 21:13:52,"You could surround the link with `<` angle brackets `>` or enable `gfm` for linkifying bare URLs.
",1j01,
573,2015-04-09 01:15:40,"Hey, I'm using your markdown compiler for a while and want to say thank you for it!

Btw, I’m little obsessed with typography and wrote a bunch of small, full tested and safe to use typographic modules. That’s why I’m wondering will you prefer to delegate typography to 3rd party packages and concentrate marked’s development only on parsing and compiling?

if no, it's fine, I understand. If yes, check out this pull-request and feel free to comment and ask me anything. Will look forward for your response.

PS. My origin idea of this pull-request was that compiler should not be responsible for typography, it should do well parsing and compiling and what do you think?
",iamstarkov,2015-05-08 01:07:48
573,2015-04-09 12:42:16,"hey, hey =) is anybody here? :ghost: 
",iamstarkov,2015-05-08 01:07:48
573,2015-04-15 18:41:34,"polite ping =)
",iamstarkov,2015-05-08 01:07:48
573,2015-04-16 14:17:31,"@chjj is project dead and deprecated?
",iamstarkov,2015-05-08 01:07:48
573,2015-04-16 19:29:44,"@matmuchrapna Project is probably dead, given the number of open issues and pull requests.
",JCMais,2015-05-08 01:07:48
573,2015-05-08 01:07:45,"If you want to pull those modules' code into marked, I'll reconsider it, but I really don't want marked to have that many dependencies since it should be used easily in the browser as well.
",chjj,2015-05-08 01:07:48
573,2015-05-08 01:12:53,"All the deps are one-liners, so it’ll be not big deal for browsers, it’s even not _small_ deal
",iamstarkov,2015-05-08 01:07:48
573,2015-05-08 01:15:02,"on the other side, you will have benefit in form of delegating typography to 3rd party plugins
",iamstarkov,2015-05-08 01:07:48
573,2015-05-08 01:43:58,"@iamstarkov, marked has no dependencies for a reason. It shouldn't require a build for the browser. A lot of people just `<script src=""raw.github.com/.../marked.js>` in their html. There shouldn't be any requires. Changing this would break a lot of pages.

If they're just one-liners that's great. Let's include them inline.
",chjj,2015-05-08 01:07:48
573,2015-05-08 08:26:47,"didn’t about how consumers are using marked, seems reasonable.

> If they're just one-liners that's great. Let's include them inline.

okay, it will work. but how to deal with responsibility delegation here?
",iamstarkov,2015-05-08 01:07:48
572,2015-04-08 15:35:26,"Is there an option to keep ""marked"" away from sanitizing anchor / link elements? 

I have another library that I want to use for link parsing but when I set sanitize to true for ""marked"", then it also converts `</a>` to `&lt;/a&gt;`.
",bennyn,
571,2015-04-08 13:57:15,"Hello, is there an option to just render **some** Markdown synatx? In my project I just want to render **strong**, **em** and **code** but I don't want to have support for **titles**, **block quotes**, etc.

Can I configure ""marked"" somehow so that it only checks for specific types (like the ones mentioned)?
",bennyn,
571,2015-04-14 14:01:31,"I'd also love this feature. At the moment I'm having to override the rendeder for each element I don't want and manually revert back to the original input.
",gbradley,
571,2015-04-27 08:37:51,"This would be a great addition!
",DanielZwijnenburg,
570,2015-04-06 23:53:28,,TassosD,2015-05-08 01:09:55
570,2015-04-06 23:55:07,"Please take a look to make sure this IS the correct expected HTML outcome
",TassosD,2015-05-08 01:09:55
570,2015-05-08 01:09:53,"Those tests are failing for a reason. Those `[x]:` definitions shouldn't end up as definitions. It's just there to document the failing behavior for now.
",chjj,2015-05-08 01:09:55
569,2015-04-06 06:24:32,"This allows the rendering of text nodes to be overwritten. I've found this particularly useful in cases where I needed to escape certain character sequences in all text nodes.
",lwansbrough,2015-05-08 01:10:57
568,2015-04-05 15:52:58,"Hello can you help me to make a new rule for link?

I want to change this `![]()` to this `{>[numer here]<}![]()`  the number will be used like id for changing on codemirror...

So I need to change the regExp's

I tryed to change the link regeExp: `link: /^\{\>index\<\}\!?\[(inside)\]\(href\)(\w*\S*)*/,`

And inline_index : `inline._index = /^\{\>?([\s\S]*?)\<\}(?=[^\{\>]*\<\})*/;` but it do not works... Can you help me to change that epression to get the number of {>1<}?

Thanks!
",dunets,2015-04-06 17:18:36
567,2015-04-05 13:14:20,"Hey, while installing the package with Bower I noticed that package version was not updated in Bower file  (according to GitHub releases page and npmjs registry, now it is 0.3.3, while bower addresses 0.3.2). So this PR fixes this.
",aspyatkin,2015-05-08 01:15:07
567,2016-03-22 18:57:04,"Bower uses git tags for versioning and ignores the `version` property in bower.json (so you might as well just remove `version` from bower.json): https://github.com/bower/spec/blob/master/json.md#version
",andrewchilds,2015-05-08 01:15:07
566,2015-04-03 17:42:18,"Hi chjj and All,

Is it make sense to have support for reStructuredText parsing/rendering. I am looked at code it is pretty clean, and it should be not very hard to add it. But before I fork it and start to crank on it. I am wondering if somebody already done it or going to do that.

Thanks.
",walnutgeek,2016-10-12 17:57:06
565,2015-04-02 13:47:15,"Thanks for the awesome project..the following is an example of something inside `<img onload="""" />` which is not being sanitized.

<S_CODE_TOKEN>
",ruffrey,2015-04-13 19:03:53
564,2015-04-01 09:15:08,"I know that the default renderer of the blockquote (so the > in markdown) is like this:

<S_CODE_TOKEN>

But sometimes I want another color for the blockquote, so I need another renderer for the blockquote. For example that the user can use >> in Markdown and that it renders it like this:

<S_CODE_TOKEN>

Do can I achieve this? In a few other issues (#383, #425) but I cannot find a clear answer for this.
So, in short: how do I add a renderer for a new markdown tag (like in this case the >>).

Thanks in advance.
",gercobrandwijk,
564,2015-04-01 09:41:45,"Checking the parameter _quote_ and check if this startswith an >-sign (so it's >> in the markdown) is not possible, because markdown (of course) creates then nested blockquotes when you use >>. So the 'solution' in issue #425 (answer of user 7c00) is not going to work for me, I really need a solution where someone explains me how to use my custom tag >>. Like how it works with \* (italic) en *\* (bold).
",gercobrandwijk,
563,2015-03-27 15:16:13,"It seems that the precise specification of [CommonMark](http://commonmark.org/) already settled down, so I'm proposing sticking with it to be compatible with most of Markdown flavours and also be predictable.

CommonMark is backwards compatible with the original [Gruber's Markdown](http://daringfireball.net/projects/markdown/), so it should be just internal change.
",dumblob,
563,2015-05-29 19:08:54,"I agree - it would be great if marked supported CommonMark! Currently I'm using [Remarkable](https://github.com/jonschlinkert/remarkable) because it has a commonmark option.
",nikolas,
563,2015-05-30 00:04:19,"`marked`'s strong point is it's small size.

For commonmark parser you'd better search in ""official"" list of implementations: https://github.com/jgm/CommonMark/wiki/List-of-CommonMark-Implementations. If you need commonmark support, i see no problem to select appropriate project.
",puzrin,
563,2017-02-21 22:33:48,"It seems a good idea to use [commonmark.js](https://github.com/jgm/commonmark.js), [markdown-it](https://github.com/markdown-it/markdown-it) or [remarkable](https://github.com/jonschlinkert/remarkable).",noraj1337,
562,2015-03-21 22:51:31,"This allows for headings to be disabled (and therefore treated like paragraphs). I know you can do it without a config option but it's awkward, I just did it. You need to:
- Manually use the lexer and parser.
- Create your own lexer.
- Override the lexer rule with a noop after it's instantiated.
- Make sure you do the above correctly or else any future instantiations will also have this noop instead of the original rule.
- Make sure you pass your options to the lexer and the parser.
- Make sure your options were merged with `marked.defaults` because the lexer and parser don't do it.
- Do this for each custom renderer / use case you have. I have three.

With this change, you can just set `headings: false` and it's done. The option defaults to `true`. I've added a test for ignoring headings, one for testing headings as is (i.e. `headings: true`) and I've updated `marked.min.js`.

Best ""head""-related GIF I found:

![head](http://media.giphy.com/media/T3lsL3B4uwYNi/giphy.gif)
",adam-lynch,2015-05-08 01:12:20
562,2015-05-08 01:12:18,"There might be a better more dynamic way to do this for any rule: see #579
",chjj,2015-05-08 01:12:20
561,2015-03-20 18:11:24,"The conversion of the german word for exercise:

<S_CODE_TOKEN>

is converted to:

<S_CODE_TOKEN>

when no charset is given. With the `<meta charset=""UTF-8"">` it is converted to:

<S_CODE_TOKEN>

where the id is wrong and should be `übung-1` instead of `-bung-1`.

In any way, the Ü (German umlauts) break the conversion. They work out of the box in any standard HTML5 document when entered directly (with meta charset absent).
",fanktom,
561,2015-03-27 22:23:05,"What do you mean with - when no charset is given?
How do you set a charset? Do you write the `<meta charset=""UTF-8"">` directly in the markdown file?

Which charset has the source file?
",aroneiermann,
561,2015-03-28 11:28:05,"@juaron The default HTML5 charset is UTF-8. If I do not specify the meta tag at all and convert the markdown `#Übung` and add it to the body, the resulting string is `<h1 id=""-bung-1"">Ãœbung 1</h1>`.

It should be `<h1 id=""übung-1"">Übung 1</h1>`.

The HTML is saved using UTF-8. If I add the meta tag with UTF-8 to the header, the resulting markdown is: `<h1 id=""-bung-1"">Übung 1</h1>`.

From my point of view, it should work without specifying an encoding tag at all, as the default HTML encoding is UTF-8.
",fanktom,
561,2015-03-28 11:55:37,"On my System (Ubuntu 14.04, with marked 0.3.3, and node 0.12.0 ) `marked` return the expected result.
",aroneiermann,
561,2015-07-09 15:47:49,"This seems to be a broader issue with UTF-8 support. On github, my markdown documents render correctly, but using marked, `’`, `…`, and other characters become mangled (becoming `â€™`, and `â€¦`, respectively).

Adding `<meta charset=""UTF-8"">` into the `<head>` tag, as @aroneiermann suggested, does indeed result in correct interpretation on my end.

Since I can skip that declaration when the markdown is displayed on github, it suggests there a way that marked could make the output document be interpreted as UTF-8 automatically/by default. Does that seem feasible to you, @aroneiermann? Or do we cheat by being on github and having their document header?
",sansumbrella,
561,2015-07-14 21:27:22,"@sansumbrella The github header contains `<meta charset='utf-8'>`.

@southdesign The default HTML5 is UTF-8 and the default of HTML4 is ISO-8859-1 (also called Latin 1).

But I can still not reproduce this error.
Could you please run `console.log(marked(""ä""))`?
When I run this I get that  `<h1 id=""-bung"">Übung</h1>`.

A possible solution would be to use character entity. In special this mean replace `ä` with `&#196;`.
",aroneiermann,
561,2015-07-20 08:11:31,"@aroneiermann Yes, I get the same `<h1 id=""-bung"">Übung</h1>`. With UTF-8, I think the right result should be `<h1 id=""übung"">Übung</h1>`, as it works in URLs as well.

So I think this problem is part on the Browser end (you HAVE to declare UTF-8) which the specs say is standard with HTML5, part within the generation of the id tag which does not support UTF-8.

Do you think, the ID computation can be adapted to support UTF-8 easily?
I could give it a try, if you don't mind..
",fanktom,
561,2015-07-23 20:29:34,"Multiple tests are failing after that 33e39804b5e0c116a4c09228d6a35e7e046b282f.
I think it prints valid HTML5 code ([w3.org html5 documentation](http://www.w3.org/TR/html5/dom.html#the-id-attribute)). But it is possible that the used markdown documentation says something other.
",aroneiermann,
560,2015-03-16 07:05:37,"Used Uglify-js v2.4.17

Exact command line: `uglifyjs lib/marked.js --comments=""/Copyright/"" --mangle --compress > marked.min.js`
",callahad,2015-05-08 01:14:01
560,2015-03-18 03:43:50,":+1: 

This should be done long long ago. 
",tylerlong,2015-05-08 01:14:01
560,2015-04-11 23:37:08,"See #553 for a more sensible way to do this
",minecrafter,2015-05-08 01:14:01
559,2015-03-11 02:36:37,"From README.md: The renderer option allows you to render tokens in a custom manor

> manor
> noun(also manor house)
> a large country house with lands; the principal house of a landed estate.
> 
> manner
> noun
> a way in which a thing is done or happens

Apologies if this was intentional/ironic.
",moof2k,
558,2015-03-10 19:47:37,,F1LT3R,2015-03-10 19:47:46
557,2015-03-08 04:30:43,"Current default behavior expects the `src` parameter of `marked` to be a string. While this is a pretty legitimate expectation, in JS there are many possible, perfectly valid, scenarios where this might not be the case (e.g. numbers).

This addresses the issue by adding a quick check at the top of `marked`. Basically if the `src` parameter is defined, not a string, and does have a `toString` method then we simply convert it to a string before parsing.
",rsandor,2015-05-08 01:16:40
557,2015-05-08 01:16:40,"I almost think a better solution would be: `src += ''`. We can do that. Otherwise, if you put in bad inputs, expect bad outputs.
",chjj,2015-05-08 01:16:40
556,2015-03-06 20:42:45,"Is this possible to process the markup within HTML? I have such a markdown code from one jekyll project:

<S_CODE_TOKEN>

I want to switch into marked. So I need to make code inside the tags with `markdown=""1""` attribute processable. How can I do this?
",varya,
556,2015-03-09 19:58:22,"Might want to take a look at #378 and #236.
",rymohr,
556,2015-03-09 23:24:55,"You will probably need to extract the plaintext Markdown from the HTML first. That's what I do with [Markdown Here](https://github.com/adam-p/markdown-here) when getting the MD that the user has typed into an email. My HTML-to-text code is [here](https://github.com/adam-p/markdown-here/blob/master/src/common/jsHtmlToText.js), although there might be better out there. 
",adam-p,
555,2015-03-03 16:15:10,"Not sure if already being addressed, but my [David DM](https://david-dm.org/mauvm/documark) shows ""SECURITY VULNERABILITIES IN DEPENDENCIES"" because of Marked v0.3.3.

It links to this article: https://nodesecurity.io/advisories/marked_redos (CVE-PENDING). Which states:

> Marked 0.3.3 and earlier is vulnerable to regular expression denial of service (ReDoS) when certain types of input are passed in to be parsed.
",mauvm,
555,2015-03-03 17:48:15,"see https://github.com/chjj/marked/issues/497

But idk if the author is still supporting this library, so you are better looking into alternatives.
",JCMais,
554,2015-02-28 08:28:27,"My use case is such. I have source templates for a static site, which is a mix of `.html` and `.md` files. I use `marked` to preprocess the `.md` files, then pipe everything to the site generator [(1)](https://github.com/Mitranim/statil). The problem is that with default settings, you can't use template directives like `<%= %>`, since they will be escaped by `marked` before reaching the templating engine. The result is that some files need to be duplicated, with markdown parts moved into partials, etc.

There must be a way to set marked to ignore directive delimiters like `<%= %>`, `{{ }}` or whatever a particilar engine uses, but after poking around the source, I haven't found it. It would be nice if we could figure this out and include into the documentation.
",Mitranim,
554,2015-03-21 18:08:38,"Having the same issue, can't find a solution.
",operatino,
554,2015-05-07 21:56:28,"Interested in this one as well...
",craigshoemaker,
553,2015-02-26 05:43:35,"This currently just handles updating marked.min.js (so we don't have to do things like #548), but Gulp allows for more functionality to be added over time.
",minecrafter,2015-05-08 01:14:48
553,2015-03-21 21:10:58,"My two cents: use [gulp-load-plugins](https://github.com/jackfranklin/gulp-load-plugins), especially if more functionality will be added over time. It's really simple but I think it's the best plugin out there. It reduces code, adds a little security by making sure any plugin used has to be saved in your `package.json` and therefore checked-in, etc. 
",adam-lynch,2015-05-08 01:14:48
552,2015-02-26 05:17:00,"Although `marked` should be the ""main house or mansion on an estate, plantation, etc."" of the Markdown world, unfortunately it's not.

This fixed a minor README typo: `manor` -> `matter`.
",minecrafter,2015-05-08 01:17:02
551,2015-02-24 12:28:39,"I added some code for non-exsiting image file. In my project, image files are base64-encoded strings. So, all images in markdown make 404 error.
I guess this is also useful for other peoples.
",dokenzy,
550,2015-02-23 19:55:44,"If you add an objective-c code block in a list using GFM, the parsers seems to interpret the `-` in front of the objective-c function declaration as a new list item.

With a random JavaScript code snippet this works fine

<S_CODE_TOKEN> js
> marked(""This is a list\n1. Some first item\n2. Some second item\n<S_CODE_TOKEN>\n3. Some third item"")

'<p>This is a list</p>\n<ol>\n<li>Some first item</li>\n<li>Some second item<pre><code class=""lang-js"">var a = &#39;a string&#39;;\n</code></pre>\n</li>\n<li>Some third item</li>\n</ol>\n'
<S_CODE_TOKEN>

Now if add a dash in the beginning of the code snippet we'll see the misinterpretation:

<S_CODE_TOKEN> js
> marked(""This is a list\n1. Some first item\n2. Some second item\n<S_CODE_TOKEN>\n3. Some third item"")

'<p>This is a list</p>\n<ol>\n<li>Some first item</li>\n<li>Some second item\n<S_CODE_TOKEN></li>\n<li>Some third item</li>\n</ol>\n'
<S_CODE_TOKEN>
",Mattieuga,
549,2015-02-23 19:33:44,"Hi, would it be stupid to have a method in _Marked_ that returns a data structure that represents the (various types of) blocks structured in the markdown document? Maybe only rendering the inline stuff…

I'm using _Marked_ in a javascript based Static Site Generator (_Metalsmith_).

One use case for this feature would be being able to use this store (of markdown ""fields"") in template contexts.

Other solutions for retrieving structured data (like the ones from cloud services like _Prismic_, _Contentful_ or _Poole_)  somewhat abuse the YAML front matter to provide easy and structured access to data model fields in template contexts.

Why not use YAML instead? Well mostly because indentation isn't something content editors, understandably, like.

Thank you very much for your time.
",pnbv,2015-02-23 22:45:17
549,2015-02-23 22:45:17,"Since little else should be needed beyond the .lexer method, I'm thinking maybe no one wants or needs to be responsible for any silly suggestions concerning key naming conventions.

I'm closing this.

Thank you.
",pnbv,2015-02-23 22:45:17
548,2015-02-22 14:22:42,"Ran marked.js through [javascript-minifier.com](http://javascript-minifier.com/) to get marked.min.js a minimized version for the browser.
",wastevensv,2015-02-27 14:42:50
548,2015-02-27 14:42:50,"Just realized this was already done in #293. Sorry about that.
",wastevensv,2015-02-27 14:42:50
547,2015-02-20 09:52:01,,sventschui,2015-05-08 01:20:02
547,2015-05-08 01:20:02,"Why would this affect tablerow?
",chjj,2015-05-08 01:20:02
547,2015-05-08 18:25:56,"We're setting a css class in a custom renderer on the tablerow
",sventschui,2015-05-08 01:20:02
547,2015-05-20 06:08:47,"@chjj any comments on this?
",sventschui,2015-05-08 01:20:02
546,2015-02-20 06:39:48,"Hi there,
The current version of marked.js is auto-removing backslashes before all `() []` brackets:

<S_CODE_TOKEN>

This is causing problems for users trying to use markdown inline with LaTeX to typeset equations with tools like MathJax, see volca/markdown-preview#18

The supposed behavior for a markdown rendering engine should not replace/change anything user enters unless user-entered tokens are specified by the corresponding markdown standard, so this is a violation of this behavior, please fix it.

Thanks,
Happy Hacking!
",chaserhkj,2015-02-20 11:38:16
546,2015-02-20 11:38:16,"After further inspection into other Markdown rendering engines, I found that ignoring backslash before a char is a supposed behavior cause it is considered as escaping the char.

So, regarding `\( \) \[ \]` in Markdown directly as math context barrier should be considered as an extension to Markdown language, thus related code should be managed in this way.

In conclusion, I made a mistake and please ignore this issue.

Sorry for bothering,
Happy Hacking!
",chaserhkj,2015-02-20 11:38:16
545,2015-02-16 09:20:07,"Is it possible to get a list of all headers in order to create a table of contents?
",mazing,
545,2015-02-16 13:07:53,"Just define custom renderer. Like this:

<S_CODE_TOKEN>
",paxidently,
545,2015-03-09 15:15:16,"Worked great for me, thanks!

<S_CODE_TOKEN>
",anaran,
544,2015-02-06 13:17:13,"on rendering: 
`$A_i, A_{i+1}$`
it produces: 
`<p>$A<em>i, A</em>{i+1}$</p>`
expected: 
`<p>$A_i, A_{i+1}$</p>`

i tried the same in stackedit. it works as expected
",santhosh-tekuri,
544,2015-02-07 00:26:17,"This is the same as #343.
",mkopala,
543,2015-02-02 21:20:56,"<S_CODE_TOKEN>
",BClark-Grad-Project,2015-02-14 01:05:23
543,2015-02-08 23:09:32,"It doesn't handle `null` and `undefined` well - it throws the error above.  I either:
- use a wrapper function to return an empty string if the input is null or not defined
- always pass an empty string to `marked` in such cases
",mkopala,2015-02-14 01:05:23
543,2015-02-08 23:17:11,"I accounted for it in my code, thought you may be interested in covering it on your side because it can break an applications operation.  Not sure what your scope coverage is.  

Close topic? Or mark for enhancement?

-----Original Message-----
From: Matt Kopala notifications@github.com
Date: Sun, 08 Feb 2015 15:09:39 
To: chjj/markedmarked@noreply.github.com
Reply-To: chjj/marked reply@reply.github.com
Cc: Brandon L. Clarkbclark10@csu.fullerton.edu
Subject: Re: [marked] type check (#543)

It doesn't handle `null` and `undefined` well - it throws the error above.  I either:
- use a wrapper function to return an empty string if the input is null or not defined
- always pass an empty string to `marked` in such cases

---

Reply to this email directly or view it on GitHub:
https://github.com/chjj/marked/issues/543#issuecomment-73438361
",BClark-Grad-Project,2015-02-14 01:05:23
542,2015-02-02 14:40:31,"Hello,

I write my email newsletters in Markdown and I don't want email addresses to be mangled (I think spam filters will have trouble with the mangling), so I introduced -mangle/-no-mangle option (-mangle is default).

Would you consider this for inclusion?

(Warning: no tests, could someone give me a hand on writing a test?)
",dchest,2015-05-08 01:21:23
542,2015-05-08 01:21:18,"Merging for now. Will probably rename the option.
",chjj,2015-05-08 01:21:23
542,2016-12-24 20:49:44,Whats the point of mangling in the first place?,ccorcos,2015-05-08 01:21:23
541,2015-01-30 09:16:25,"Testing with:

`> blockquote`

And it is not being converted properly. Here is the code I am using:

<S_CODE_TOKEN>
",nodesocket,2015-01-31 00:03:53
541,2015-01-31 00:03:48,"Nevermind, I am idiot.

Replaced: `$(""#content"").html()` with `$(""#content"").text()`
",nodesocket,2015-01-31 00:03:53
540,2015-01-28 17:06:25,"Hi,

according to [Gruber's
Smartypants](http://daringfireball.net/projects/smartypants/)
`--` result in an `&ndash;`(\u2013) and `---` in an `&mdash;`(\u2n14).

As far as I can tell, `marked` converts `--` into `&mdash;`
",karland,2015-05-08 01:22:07
540,2015-01-31 16:24:56,"+1. I agree with this. It's something I've been meaning to put in as a pull request myself for a while. It's also mentioned in #137 but the discussion never went any further.

For me having an em dash surrounded by spaces (as Smartypants gives currently if you use a double hyphen) is ugly; I'd only use an em-dash in certain cases or without spacing. It's good to have a choice, as Gruber's spec originally allowed for.
",guypursey,2015-05-08 01:22:07
540,2015-05-08 01:22:02,"Well done. Merging.
",chjj,2015-05-08 01:22:07
539,2015-01-27 11:06:30,"In the original markdown [spec](http://daringfireball.net/projects/markdown/syntax), `[id]: http://example.com/` is defined as another way to write a link.

The following entries will output an empty string:
- `[abc]: abc`
- `[abc]:abc`
- `[abc]:abc[abc]:abc`
- `[abc]:abc[abc]:abc[abc]:abc`

`[abc]:abc anotherword` doesn't return the empty string, it outputs exactly what was entered; `[abc]:abc anotherword`.

For me, I don't care for this pattern anyway, I'd prefer if it just wasn't supported at all. But either way it shouldn't return nothing.

As a workaround, if marked ever returns the empty string, I'm just going to display the input.
",adam-lynch,
539,2015-05-12 22:27:37,"I believe that syntax is for reference style links. Sort of like variables in programming. You can create the reference link and the use it elsewhere in the document without having to write the full thing out.

<S_CODE_TOKEN>
",danwhite85,
538,2015-01-26 09:15:16,"Running the `marked.js` on client side with a value which is only integer marked throws an error:

<S_CODE_TOKEN>

![bildschirmfoto 2015-01-26 um 10 14 06](https://cloud.githubusercontent.com/assets/188901/5897428/2b0ea8da-a544-11e4-9d59-ecc0cb3b6434.png)
",nachbarshund,2015-03-25 11:51:26
537,2015-01-23 04:06:23,,evilpacket,2015-01-25 22:19:40
537,2015-01-23 04:07:41,"Will this fix be merged?
",alduethadyn,2015-01-25 22:19:40
537,2015-01-23 11:17:52,"Do note that this warrants a new (patch) release, just merging it in won't be sufficient.
",yoshuawuyts,2015-01-25 22:19:40
537,2015-01-23 19:13:16,"true enough - should have been more clear
",alduethadyn,2015-01-25 22:19:40
537,2015-01-25 23:40:00,"@chjj Could you publish to npm?
",okuryu,2015-01-25 22:19:40
537,2015-01-25 23:52:17,"Done.
",chjj,2015-01-25 22:19:40
537,2015-01-25 23:55:22,"I also want to say to everyone, and @naholyr: PRs for the sanitizer are welcome. The sanitizer is something I added on a whim just because I could. I try to make it as secure as possible, but I would never make a guarantee that it is absolutely secure. If you care about security, you should use a more heavy duty html sanitizer. Hopefully one day we can get to that point though.
",chjj,2015-01-25 22:19:40
537,2015-01-28 22:41:04,"I'm pretty clear with that, to be fully honest the aim of my comment was more like well, I'm not sur it worth the effort knowing there will always be an unplanned edge case ;)

I'd go for a warning in the README (+ link to http://htmlpurifier.org/ for example?).
",naholyr,2015-01-25 22:19:40
536,2015-01-21 10:02:29,"options: {
    sanitize: true,
    allowedTags: 'iframe|img|video'
}

For https://github.com/chjj/marked/issues/133
",mloginov,
536,2015-05-08 01:23:43,"Please refactor this so a RegExp is not dynamically created each call. A hash table check would be faster than a regex: reduce an array of tags to an object and check the object's property.
",chjj,
535,2015-01-15 10:50:31,"I modified the **'Renderer.prototype.image'** function so that it supports Markdown's image size specification.

For example, a Markdown code

<S_CODE_TOKEN>

can be interpreted as

<S_CODE_TOKEN>

Thanks!
",tatsy,
535,2015-01-17 16:35:42,":+1: would be nicer with a test though
",capaj,
535,2015-03-27 05:50:40,"+1
May I know when this pull-request will be merged?
",doortts,
535,2015-03-27 07:47:34,"@tatsy by the way, where can I find `Markdown's image size specification`? Does spec exist?
",doortts,
535,2015-03-27 07:59:23,"Hello @doortts.

As you know, official Markdown does not support image size specification. So this is only an option.

If you'd like to specify image size in Markdown, I recommend you to use [markdown-it](https://github.com/markdown-it/markdown-it).

I already provides the plugin for this to specify image sizes ([markdown-it-imsize](https://github.com/tatsy/markdown-it-imsize)).
",tatsy,
535,2015-05-08 01:24:41,"Which implementations is this currently a part of?
",chjj,
535,2016-03-27 21:03:30,"@chjj 

Apparently [Mou](http://25.io/mou/) does, but most that actually support this consider themselves derivatives AFAICT [1], like Kramdown and MultiMarkdown.

[1] This was only from a simple Google search, BTW. I'm not _that_ aware of the likely hundreds of implementations out there.
",isiahmeadows,
535,2016-07-25 18:39:49,"👍 for this support in the future. Was wondering why this wasn't working. Thanks @tatsy, though it would be better with this merged
",webdevbrian,
534,2015-01-01 22:56:06,"I have news, once in a list with all news and once where a single new is showed.

The news on the list has a small cut at 200 chars just like this:

<S_CODE_TOKEN>

All is working there, the single news is displayed like this:

<S_CODE_TOKEN>

On the single new the first paragraph is displayed with `<pre><code></code></pre>`.

What is the reason for this?
",Grief-Code,
534,2015-03-25 16:50:39,"+1, I don't know why my MD is being wrapped with this as opposed to rendering correctly. Does anyone know why this is happening or what I can do to fix?
",jme783,
534,2015-09-12 02:12:56,"+1, I meet the similar problems.
",dongli,
534,2015-12-29 03:12:32,"This is because your text likely has a lot of indentations, which would be interpreted as a code block.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Alternatively, you could detect the shortest indentation on any line, and use regex to replace that length of indentation on every line.

https://github.com/sindresorhus/strip-indent
",jonathantneal,
533,2014-12-29 23:13:15,"My code blocks are being parsed with six preceding spaces before every line following the first in a code block.

So code written in Markdown like this

<S_CODE_TOKEN>

Becomes parsed like this:

<S_CODE_TOKEN>

I'm using highlight.js to handle highlighting, but the problem persists when I remove syntax highlighting.  The issue also persists no matter how I mark the codeblock in Markdown, e.g., indents, fenced, etc.

I attached a screenshot of the finished product with the leading whitespace.
![screenshot 2014-12-29 18 08 55](https://cloud.githubusercontent.com/assets/5301535/5574157/1811801e-8f86-11e4-839b-05fbec3a6a57.png)
",ughitsaaron,2014-12-29 23:32:20
533,2014-12-29 23:32:20,"Nevermind, this is an issue with something else. Sorry!
",ughitsaaron,2014-12-29 23:32:20
533,2015-01-14 21:54:58,"@aptkf I'm running into a very similar issue. Did you figure out what the problem was (despite it not being with marked)?
",joshlasdin,2014-12-29 23:32:20
533,2015-01-15 12:41:55,"Hey @joshlasdin, I did figure it out. I was using handlebars for my templates and my expressions were indented which effected the indentation of the preformatted code blocks. Everything was fine once I removed the indentations before my handlebars expressions. Good luck!
",ughitsaaron,2014-12-29 23:32:20
532,2014-12-24 11:41:33,"<S_CODE_TOKEN>

is interpreted as title with gfm true or false but should not (it's a title only if it starts with a #)
",acemtp,
531,2014-12-24 11:39:31,"Hello Christopher,

This lib is awesome but when I see there 176 open issues and 79 PR, I wonder if the project is still active.

@chjj can you tell us what is the status of your project and what do you plan in a near future?
",acemtp,
531,2014-12-28 06:51:12,"i'd recommend using https://github.com/markdown-it/markdown-it instead
",jonathanong,
531,2014-12-28 10:04:46,"Thanks.

It doesn't seem to have a function to just do the Lexer so we can interact with an array of token like in marked.
",acemtp,
531,2014-12-29 05:10:34,"yes you can use internals i believe. https://github.com/markdown-it/markdown-it/tree/master/docs just ask the guy, he'll answer in like an hour.
",jonathanong,
530,2014-12-18 05:10:57,"<S_CODE_TOKEN>

Renders as this:

![screenshot 40](https://cloud.githubusercontent.com/assets/87356/5483878/54978340-8639-11e4-961b-7f5f293980c6.jpg)

<S_CODE_TOKEN>

Renders as

![screenshot 41](https://cloud.githubusercontent.com/assets/87356/5483883/66d6c32c-8639-11e4-87cf-a18d96fd59e8.jpg)

And this:

<S_CODE_TOKEN>

Renders correctly:

![screenshot 42](https://cloud.githubusercontent.com/assets/87356/5483887/7d846408-8639-11e4-9201-a86ded31a5d1.jpg)

Why the weird behavior? Is this normal? Why is 2 spaces required after a list before starting another list? I haven't seen that any in sort of spec for how markdown works. Am I missing something here?
",Jakobud,
530,2015-03-06 23:12:52,"Having the same issue. This doesn't happen when rendering multiple ul or ol elements though - only when you mix types.
",mattLummus,
530,2015-11-10 15:15:55,"One more example from me:

![image](https://cloud.githubusercontent.com/assets/3027415/11065934/4d2f7ab0-87c6-11e5-821f-ea1c0fadfdb1.png)
",mik01aj,
529,2014-12-17 19:24:19,"I'd love this please. 
### My use case

I want to compile markdown for places where HTML isn't supported, just plain strings (like in Mac & Windows 8+ notifications for example). 

I've already created a custom marked renderer which ""cleans"" markdown. So I try convert it to the nicest possible plaintext representation I can; i.e. it leaves some things pretty much as they are (like `**strong**`), it converts inline codespans to `{code}` (or `{html}` if code is passed), etc.

It works well but I just noticed that single quotes are being converted to `&#39;`.
",adam-lynch,
529,2014-12-17 23:08:17,"I've gotten around it for now using the innerHTML, innerText trick to unescape HTML. Still would be a nice setting though.
",adam-lynch,
528,2014-12-12 18:39:07,"I am working on a table of contents generator using marked for another project and noticed that marked does not generate unique ids when headers in the same markdown contain the same text.

For example a link to `#examples` would always go to the first header.

<S_CODE_TOKEN>

This PR changes the default behavior making to that duplicate headers are given incrementing integers so they are unique, `example-1`, `options-1` in my example.

This is probably a breaking change though since there is 1 failed test but I think its worthwhile since it brings the markdown behavior closer to Github which uses the same strategy to keep header ids unique.
#### Benchmarks

this does come at a small performance cost of ~250-300 milliseconds
##### unique-header-ids

<S_CODE_TOKEN>
##### master

<S_CODE_TOKEN>
##### Tests

I've added a test for this behavior but this change also causes the the top level paragraphs test to fail

https://github.com/chjj/marked/blob/master/test/tests/toplevel_paragraphs.gfm.text

This is because the header ""how are you"" header is repeated multiple times in the document so the ID no longer matches. If you want to merge this will change that test to pass.
",patrickarlt,2015-05-08 01:26:34
528,2015-05-08 01:26:21,"That 200ms is devestating. There may be a better way to optimize this. I think this uniqueness issue was discussed a while back, but we decided to leave things as they are for the time being. Can we work on optimizing this more?
",chjj,2015-05-08 01:26:34
528,2015-05-08 01:26:33,"Closing for now.
",chjj,2015-05-08 01:26:34
528,2016-12-03 23:40:46,"First, congrats for this wonderful library!

@chjj @patrickarlt Is there some news on this issue?

I also have identical `<h2>` names and then the anchor links #examples / id are not unique, that's a problem.

<S_CODE_TOKEN>",josephernest,2015-05-08 01:26:34
527,2014-12-11 20:56:45,"This is more to see if anyone has a solution than to suggest a feature, simply because there's a ton of open Issues and I doubt this will get seen anytime soon.

It'd be great to have a `sanitizeJS` option. For example, I want people to be able to write HTML (such as `<i class=""fa fa-warning""></i>`), but not add JavaScript (like `<i class=""fa fa-warning"" onmouseover=""alert('Now i have your cookies!');""></i>`). Any thoughts on how to clean up JS without having to completely disable HTML?
",gkoberger,
527,2015-02-08 22:59:40,"I've been using [JsHtmlSanitizer - google-caja](https://code.google.com/p/google-caja/wiki/JsHtmlSanitizer) along with **marked** with nice success.
",mkopala,
526,2014-12-11 12:24:12,"I have such md-file

<S_CODE_TOKEN>

I've received the tokens of the given markdown by method `marked.lexer`:

<S_CODE_TOKEN>

But the given markdown does not have any headers.
",eGavr,
525,2014-12-11 07:39:04,"can it parse

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

?
i try, but i can't work
",yueisme,
524,2014-12-09 21:33:56,"I have such md-file

<S_CODE_TOKEN>

I've received the tokens of the given markdown by method `marked.lexer`:

<S_CODE_TOKEN>

It seems that it is wrong, the right variant is:

<S_CODE_TOKEN>

isn't it?
",eGavr,2015-04-02 13:24:26
524,2015-04-02 13:08:27,"wrong. 
The github rules, are not the ""official rules"".

the elements number must be greater than 2.
",blb78,2015-04-02 13:24:26
524,2015-04-02 13:24:26,"Okey, thanks, sorry to bother you.
",eGavr,2015-04-02 13:24:26
524,2015-04-02 14:40:49,"you dont bother me.

and I made a mistake : the elements number must be greater than 1.
",blb78,2015-04-02 13:24:26
523,2014-12-09 12:01:01,"Hi!

I've got the tokens by this command:

<S_CODE_TOKEN>

Have I the opportunity to get markdown from tokens?
",eGavr,
522,2014-12-08 01:01:19,,tadoli,
521,2014-12-06 07:39:03,,akiray03,2014-12-06 07:39:50
521,2014-12-06 07:40:52,"It was created by mistake, sorry.
",akiray03,2014-12-06 07:39:50
520,2014-12-05 02:39:24,"Sorry if this is filed incorrectly, but strings like this are not formatted correctly:

`Test *italic here **bold italic here** and italic still* end`

See also http://ajh.us/babelmark2-asterisks-bold-in-italic-test
",alanhogan,
520,2015-09-04 19:23:27,"It also fails at a very simple:

<S_CODE_TOKEN>

Result should look like:

> text text _five \* six_ text

http://johnmacfarlane.net/babelmark2/?normalize=1&text=text+text+*five+\*+six*
",CoDEmanX,
520,2016-01-04 14:15:33,"Anyone got fix for this .
",sunil-ideas2it,
519,2014-12-04 08:49:03,"Linebreaks in table tags were incorrectly parsed into `<br>`.
",Lanfei,
518,2014-12-03 01:51:08,"Updated to handle errors or missing results and respond with original code
",brendannee,
517,2014-12-01 08:26:01,"I don't know if you think is a good change or if I'm just not understanding something but I thought I'd pass it on
",greggman,
516,2014-11-29 16:42:11,"there are highlight package and highlight.js package, someone may install wrong
",ArvoGuo,2014-12-04 13:41:35
515,2014-11-28 13:06:27,"When using the id's of headers as anchors, the current id's conflict very quickly. It would be very nice to have an option to change the id's, so I can change the id's of h3's to ""header2text/header3text"" for example. [DocumentUp](http://documentup.com/) currently does this, but in a very hacky way. 
So I would like to for example, 

<S_CODE_TOKEN>

parse into:

<S_CODE_TOKEN>

How could this be implemented properly? 

I can't simply override the header parser methods, because I'd need to add an extra token. I need to use a extra token because I need to specify the id per header. But currently the tok method selects a few properties and forwards only these to the specific renderer method, see: 

<S_CODE_TOKEN>

Another way would be to forward an id property from the token, and when it's given use this to overrule the regular id. 

What I'd like to do: 

<S_CODE_TOKEN>

Maybe the system would be more flexible if the tokens where given to the render method, so I could fix this by overriding the heading method into something like: 

<S_CODE_TOKEN>
",peteruithoven,
515,2015-04-18 06:13:26,"On behalf of over 5000 users of MarkDown Viewer for Firefox (see its usage statistics at https://addons.mozilla.org/en-us/firefox/addon/markdown-viewer/), which depends on marked.js, I ask **not to** implement this request.

Since HTML5 header IDs replaced &lt;a name=""...""&gt;. Users depend on those auto-generated header IDs to be consistent with 'standard' Jekyll and Markdown, as is used e.g. on GitHub. (For example, they may use the above Markdown Viewer to see offline versions of .md documents, and they expect the header ID-based anchor references &lt;a href=""myFile.md#auto-generated-header-based-ID""&gt;link text...&lt;/a&gt; to work the same way as on GitHub.)

If non-unique IDs in the same document are a problem, I suggest implementing http://kramdown.gettalong.org/syntax.html#specifying-a-header-id, even though it's Kramdown-specific (i.e. not generic Markdown).
",peter-kehl,
515,2015-06-11 09:00:39,"+1 for **not** implementing it.
",kumarharsh,
514,2014-11-19 06:20:24,"I want to add some custom html tags like this:

<S_CODE_TOKEN> html
<example>
    <file name=""index.html"">
    <S_CODE_TOKEN>
    </file>
</example>
<S_CODE_TOKEN>

but it seems `<example>` and `<file>` tag are not recognised as a valid html tag. marked think they are paragraph elements and add a couple of `<p>` around them

the compiled content is:

<S_CODE_TOKEN>

This behave make the `<example>` and `<file>` tag fail to work
",lordfriend,
514,2014-11-19 08:41:34,"Well,
when I added some lines between the custom html tag and code blocks, it seems get worked. but the code blocks failed.
",lordfriend,
514,2016-03-10 19:08:28,"This is very inconvenient, I am creating a documentation for my project which involves displaying the element, however unfortunately is automatically added a paragraph around.

My Angular directive:

<S_CODE_TOKEN>

The results:

<S_CODE_TOKEN>

Perhaps not the purpose of this project ...
",brunowego,
514,2016-03-10 19:10:21,"@chjj if you have a little time, please take a look on this issue :+1: 
",brunowego,
513,2014-11-19 06:11:47,"I've gone through a process to allow for the addition of new unique rules to **marked**. A new rule can be added easily enough by passing a properly formatted POJO to registerRule. The downside of this addition is a increased parse time, by 32.6%, when running the included bench test. The original project was focused on speed, and I wonder if this is enough deviation to be a full fork and not be pulled in.

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/chjj/marked/513)
<!-- Reviewable:end -->
",barretts,
512,2014-11-19 01:13:05,"<S_CODE_TOKEN>

It installed latest 0.3.2 version but apparently it is missing some entries. Seems bower is not updated.
",pasupulaphani,
512,2014-12-01 23:26:34,"This problem should be fixed by someone with push access updating the version on bower.json to 0.3.3 (or whatever they prefer) and creating a new tag on master. (I don't think PR's can contain tags, else I'd make a  PR.)

The current bower.json was added after the most recent tag, 0.3.2. With 0.3.2, it appears that bower might somehow be looking at the file `component.json`, which was intended to be used by componentJS, but the filename is also unfortunately the deprecated name for `bower.json`. It doesn't have main and ignore entries because componentJS does not use those fields. 

I currently have to fork this repo and tag it myself to use marked with bower, which is unfortunate. 
",martiansnoop,
512,2014-12-18 20:55:02,"It is unfortunate that no one has yet looked at this very small issue.
",pasupulaphani,
511,2014-11-18 04:43:52,"Do not encode `#hashtag` (no white space) at GFM mode.
",ledsun,2015-05-08 01:41:05
510,2014-11-14 20:51:56,"Smashing library, much thanks!

I may be abusing markdown a little, but I'm using code back ticks in my titles:

<S_CODE_TOKEN>

This however produces HTML in which the backtick is replaced with a hyphen in the `id` attribute of the resulting header element:

<S_CODE_TOKEN>

The problem is that I'm using [marked-toc](https://www.npmjs.org/package/marked-toc) to convert this into the following markdown TOC (and then HTML via marked) which of course is now incompatible as that package just ignores the back ticks in the headers:

<S_CODE_TOKEN>

... and finally ...

<S_CODE_TOKEN>
",bduncanj,
510,2014-11-16 22:15:51,"I, too, rely heavily on hashes.

The naive solution is to override the `heading` renderer and generate ids in the same way marked-toc does.

See related issues #432 #450. The problem extends far beyond leading/trailing slashes.
I think I proposed a reasonable solution in #456. Feel free to merge it. Notice that you can then override the heading renderer and possibly use `uslug` to generate id attributes.
",Feder1co5oave,
510,2015-03-10 19:38:52,"+1 to fixing this out of the box
",F1LT3R,
509,2014-11-11 17:30:34,"Hi, thanks for a brilliant piece of code! We're having a great time working with it.

We've hit a snag on Safari with performance. On Chrome a 804kb markdown file takes 500ms to parse and render. On safari the exact same code takes 2 and a half minutes.

$(document).ready(function(e) {
        var start = +new Date();  // log start timestamp

<S_CODE_TOKEN>

   });

when the page loads it takes a local markdown file and puts it into a javascript variable ""tUserGuideData"". Once the document is ready, it parses and sets the markdown. I've added a custom renderer that extracts the h1 and h2 to build a custom nav. All of this is marked up using bootstrap. 

Happy to post the full code example as it's not online anywhere. I'm trying to render a user guide offline in a browser. 

Any thoughts would be appreciated.
",runrevben,
509,2014-11-13 16:15:39,"Such a long processing time suggests you have encountered a problem with regexes' exponential behaviour.
See #497.
Typically this is caused by ""strange"" inputs, such as long sequences of underscores or asterisks.
",Feder1co5oave,
508,2014-11-11 09:10:34,"# 제목입니다.  >>>>>  <h1 id =""제목입니다."">제목입니다.</h1>      ... ok !

but.. real action ..

# 제목입니다.  >>>>>  <h1 id =""-----."">제목입니다.</h1>      ... fail
",vomvoru,
507,2014-11-11 07:47:26,"I ran into this issue. Here's some markdown

<S_CODE_TOKEN>

And here's what gets generated

<S_CODE_TOKEN>

Is that expected? I thought markdown was supposed to pull out the HTML so those `*` shouldn't become `<em>` marks.

Here's a test

<S_CODE_TOKEN>
",greggman,
507,2015-03-09 19:55:06,"Related to #378.
",rymohr,
507,2015-03-11 06:58:53,"Here's another parsing issue

<S_CODE_TOKEN>

The part `'    should be code',` does not get turned into code. In fact adding some console.logs to marked.js I see that it sees

<S_CODE_TOKEN>

as one block of HTML instead of 2 blocks of HTML and a block of markdown in the middle.

Changing it to 

<S_CODE_TOKEN>

doesn't help. 

Adding `<div>`s does

<S_CODE_TOKEN>

now produces the correct result. Any idea how to get it to work without the divs?
",greggman,
506,2014-11-11 03:55:14,"It used 55s to parse this table data.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",sorrycc,
506,2014-11-12 11:10:34,"+1
",afc163,
506,2014-11-25 10:26:03,"The long html string(`<table>...</table>`) would be parsed iteratively many times for autolinking or tagging or something else. I don't think it is nesscessary.

https://github.com/chjj/marked/blob/3e02a69921b9b4009d0b17aa1fe0ae2546f96de2/lib/marked.js#L1058
",afc163,
505,2014-11-07 19:01:36,"I'm using marked 0.3.2 and cannot convert the following to HTML using the default settings (i.e. no custom options)

<S_CODE_TOKEN>

This renders fine in the Markdown preview of Atom.io editor but not via marked.  I understand { } are reserved symbols, however escaping the opening brace with \ has no effect, the output is still simply:

MyObject = 
",bduncanj,2014-11-13 16:34:14
505,2014-11-13 16:00:13,"Please describe clearly how to replicate this issue. It seems to me that you are doing something not right, because curly braces in fact are not reserved symbols.
",Feder1co5oave,2014-11-13 16:34:14
505,2014-11-13 16:34:14,"OK, my fault, I should have done a clean test:

<S_CODE_TOKEN>

You're entirely right that other code I'd written was at fault.  Still early days in the world of Node. Closing issue, sorry for the hassle!
",bduncanj,2014-11-13 16:34:14
504,2014-10-22 12:12:29,"With Marked I can easily ovverride/add/change lexer rules during implementation, and its great!
For example I can force to use space between hash sign an text to make a header like this:

<S_CODE_TOKEN>

Cool!
But is there a way, to easily do same for inline lexer?
Like i need to make people be able to add an images with next sequence: `%[My Image](http://example.com/img.jpg)`?
So i modified:

<S_CODE_TOKEN>

What should I do next?
How to bind a custom inlineLexer to a marked instance?
Please show me an example of how to do this! How can I modify/add custom inline lexer rules?
",elennaro,
504,2014-11-02 16:05:54,"I'm pretty sure there is no way to do this without editing the code itself.
The use of the InlineLexer is hardcoded inside the `parser.parse` function:

https://github.com/chjj/marked/blob/7be419324986c7a37c8d3e2fd580e925e236db52/lib/marked.js#L918
",Feder1co5oave,
504,2015-02-02 16:33:17,"Actually there is a way without editing the code of marked itself, if you overwrite the prototype. (In this example I surpress parsing of em tags). 

<S_CODE_TOKEN>
",dotcore,
503,2014-10-18 11:09:37,"Fixes #312.
Some simple test cases are included in linked issue.
",Feder1co5oave,
502,2014-10-16 23:39:23,"Many people rely on the `bower.json` being included when installing from bower. The `bower.json` holds a lot of information people rely on when using bower (the version number of the repo, and the `main` property in particular). 

Currently, this file is not available when installing from bower. 

Our use case is that we use this [gulp build tool](https://github.com/ck86/main-bower-files) to compile all vendor dependencies.  It's nice because you allow the repo owner to control the repo's point of entry.

It is a small change and would help the bower community if you were to accept this pull request. Thanks!
",kaijarayne,
501,2014-10-16 07:12:09,"This fails

<S_CODE_TOKEN>

giving

<S_CODE_TOKEN>

but this doesn't:

<S_CODE_TOKEN>

giving

<S_CODE_TOKEN>
",kapouer,
500,2014-10-15 18:10:35,"The Eclipse project's Orion [1] markdown editor uses marked both to generate HTML content and to identify the regions in the .md source for syntax styling.  Marked's current lack of generated tokens for encountered link definitions makes it impossible for Orion's editor to reliably identify the regions following a link definition.

This pull request creates tokens for encountered link definitions.  These tokens do not affect the generated output in any way, but enable a client of marked's lexer to know the link definition's character range, which is the only missing piece to complete mapping from the .md source to the generated .html.

[1] https://orionhub.org/
",grant-g,
500,2015-09-27 14:04:00,"Wondering if this PR resolves this problem: https://github.com/chjj/marked/issues/664 ? or is this something different?
",KrishnaPG,
500,2015-09-28 19:25:35,"No, #664 is different.
",grant-g,
500,2015-11-15 21:15:15,"+1, I like the idea. Although I would have used `link_def` instead of `def` as the type of the items, since it sounds more clear.
",Feder1co5oave,
499,2014-10-14 20:04:55,"proposed fix for Issue #498 (link definition title on line following link url is parsed as a  separate paragraph)
",grant-g,
498,2014-10-14 18:52:17,"http://daringfireball.net/projects/markdown/syntax#link says:
'
You can put the title attribute on the next line and use extra spaces or tabs for padding, which tends to look better with longer URLs:

<S_CODE_TOKEN>

'

However when marked sees this it parses the title line as a separate paragraph from the definition on the line above.
",grant-g,
497,2014-10-08 01:44:58,"Using marked with a certain input seems to lock the process. Repro

<S_CODE_TOKEN>

CPU hits 100% for a long time, I waited about 5 mins then killed the process.
",barisusakli,2015-07-29 10:10:42
497,2014-11-27 22:22:11,"Try https://github.com/markdown-it/markdown-it , it's much more safe, because of strict parser implementation. 
",puzrin,2015-07-29 10:10:42
497,2014-11-27 22:31:50,"Probably another case of catastrophic backtracking. I'll look at where I can use negative sets more.
",chjj,2015-07-29 10:10:42
497,2015-02-27 04:15:30,"Any progress on this?
",ilanbiala,2015-07-29 10:10:42
497,2015-03-13 18:21:40,"Would also like to know if any work is being done to address this security issue.
",knownasilya,2015-07-29 10:10:42
497,2015-07-29 09:41:43,"@chjj can you help us? also see https://nodesecurity.io/advisories/marked_redos
",iamstarkov,2015-07-29 10:10:42
497,2015-07-29 09:48:40,"I'll try to rule out whichever regex rules aren't causing this tomorrow night. I'm almost certain this is a case of catastrophic backtracking since marked has failsafes in place to prevent infinite loops. Most js engines will fail after a certain timeout length, but v8 will keep executing (it will most likely eventually fail after several minutes).
",chjj,2015-07-29 10:10:42
497,2015-07-29 09:58:00,"After fooling around a bit, it looks like the `em` rule's regexes `((?:__|[\s\S])+?)` is what is causing the backtracking. Changing it to the inaccurate `((?:[\s\S])+?)` fixes the problem. I'll try to rewrite this in a more sensible way.
",chjj,2015-07-29 10:10:42
497,2015-07-29 10:11:14,"@iamstarkov, rewritten. No more hanging. Tests passing. Should be okay now. Try the latest commit.
",chjj,2015-07-29 10:10:42
497,2015-07-29 10:18:40,"v0.3.4 commited and published. Fixed.
",chjj,2015-07-29 10:10:42
496,2014-10-01 14:07:01,"Installing 0.3.2 with bower, the following warning appears (and holds true):

<S_CODE_TOKEN>

This leads to mainBowerFiles not returning the main js file.
",mistertakai,
496,2014-10-01 14:19:14,"[main-bower-files](https://github.com/ck86/main-bower-files)
",adam-lynch,
496,2014-10-14 16:01:04,"Same thing happens with [wiredep](https://github.com/taptapship/wiredep) not being able to glob in marked. This is due to the lack of the correct bower.json file, which is [currently part of marked's master](https://github.com/chjj/marked/blob/master/bower.json), not being inside of a release tag.

@chjj is it possible to please do a release of the latest code to a tag so that bower can more properly ingest marked without other scripts having to point to master?

thanks,
Scott
",scottnath,
495,2014-09-30 05:08:11,"Fix for ""broken underscores"" in gfm inline text as of Issue #491 and #494.
Includes extended tests. 

Source `jshint`ed on some code lines.

Note: Test # 10 def_blocks.text is still broken (as was before).
",commenthol,
494,2014-09-29 08:06:52,"While `gfm` is enabled:

<S_CODE_TOKEN>

Is it a bug? Or I missed something in markdown syntax?
",fyears,
494,2014-09-29 12:12:11,"it's a bug. see #491
",notatestuser,
493,2014-09-25 13:38:46,"HTML5 Start tags can contain ""one or more space characters"" (8.1.2.1 #3).

A ""space character"" is space, tab, LF, FF or CR (2.4.1).

This change makes marked support any Unicode white space in tags by restricting
the autolink to not contain any /\s/ character. It is slightly more permissive
than the HTML5 standard, but that is unlikely to be a problem in practice.
",tommie,
492,2014-09-25 08:40:10,"Though set `sanitize` option to `true` could filter some xss code, but it still miss a `link` case in IE.

use:

`[xss link](vbscript:alert(1&#41;)`

will get a link

`<a href=""vbscript:alert(1)"">xss link</a>`

this script does not work in IE 11 edge mode, but works in IE 10 compatibility view.
",albertshaw,2015-01-25 22:19:43
491,2014-09-22 11:45:53,"<S_CODE_TOKEN>

becomes
![screen shot 2014-09-22 at 13 43 11](https://cloud.githubusercontent.com/assets/642869/4355542/cb64dfde-424d-11e4-969d-218f9334dbe6.png)

And it shouldn't, according to https://help.github.com/articles/github-flavored-markdown#multiple-underscores-in-words. The result should be the same as the input:

<S_CODE_TOKEN>

Cheers,
JD
",javoire,
491,2014-09-22 11:49:56,"Also, this
![screen shot 2014-09-22 at 13 48 42](https://cloud.githubusercontent.com/assets/642869/4355611/7ac14bfc-424e-11e4-8d5d-9b576fe7c9e7.png)
becomes
![screen shot 2014-09-22 at 13 48 53](https://cloud.githubusercontent.com/assets/642869/4355614/7e3286de-424e-11e4-80e3-6635f8bf5cd3.png)

Should be:

<S_CODE_TOKEN>

Fix hack (**one** back slash):
![screen shot 2014-09-22 at 13 56 33](https://cloud.githubusercontent.com/assets/642869/4355683/9d268120-424f-11e4-81c7-1eaf9a7156d5.png)
![screen shot 2014-09-22 at 13 56 37](https://cloud.githubusercontent.com/assets/642869/4355686/a5cc07aa-424f-11e4-859e-e60531cb0099.png)
",javoire,
491,2014-09-22 11:52:54,"lastly: 
![screen shot 2014-09-22 at 13 51 45](https://cloud.githubusercontent.com/assets/642869/4355643/ec7a72b4-424e-11e4-9b1a-e27ac76e8534.png)
becomes:
![screen shot 2014-09-22 at 13 52 01](https://cloud.githubusercontent.com/assets/642869/4355644/f16680f6-424e-11e4-8b60-2c5041181460.png)

Fix hack (**two** backslashes):

<S_CODE_TOKEN>

cheers!
",javoire,
491,2014-09-22 12:12:59,"the behaviour is not consistent though. In some of our markdown files (with more code blocks and heavier markup) this behaviour is shown, and in others (usually lighter markup) it works as expected. I'll update here when I know more
",javoire,
491,2014-09-22 17:50:56,"Allright, I've finally narrowed a reproducable setup.
So this:

<S_CODE_TOKEN>

Should result in this:
Lorem_ipsum dolor sit amet, **consectetur adipisicing** elit. Voluptatem a **ea voluptas nihil** error modi.
Lorem_ipsum dolor sit amet, **consectetur adipisicing** elit. Voluptatem a **ea voluptas nihil** error modi.
(e.g. identical, [docs](http://daringfireball.net/projects/markdown/syntax#em))

But instead it results in this:
![screen shot 2014-09-22 at 19 49 23](https://cloud.githubusercontent.com/assets/642869/4361022/d616f330-4280-11e4-8029-3d9119ac1c91.png)

### Reproduce steps

1) input.md:

<S_CODE_TOKEN>

2) run marked:

<S_CODE_TOKEN>

3) output.html

<S_CODE_TOKEN>

Cheers
",javoire,
491,2014-09-22 18:05:17,"This one also produces wrong output:
**in**

<S_CODE_TOKEN>

**out**

<S_CODE_TOKEN>
",javoire,
491,2014-09-29 09:27:29,"I have one too:

while this is correct

<S_CODE_TOKEN>

this is not

<S_CODE_TOKEN>
",notatestuser,
490,2014-09-18 23:48:27,"cannot find any document on this topic
",fenode,2014-09-19 12:52:56
490,2014-09-19 01:55:38,"For example:

<S_CODE_TOKEN>

I'm sure there are a thousand web sites that use it, but here's mine: http://markdown-here.com/

(My extension effectively uses Marked in the browser as well.)
",adam-p,2014-09-19 12:52:56
490,2014-09-19 12:52:56,"Tracked in #414.
",scottgonzalez,2014-09-19 12:52:56
489,2014-09-17 22:42:20,"The `bower.json` file was [added in April](https://github.com/chjj/marked/commits/master/bower.json) but never released, thus we couldn't build or assets because of the missing `main` property. 

Can you create a new release to include the `bower.json` file?

For now, I forked the project and use it from there.
",thibaultcha,2014-09-17 22:43:45
489,2014-09-17 22:43:45,"Duplicate of #415.
",scottgonzalez,2014-09-17 22:43:45
489,2014-09-17 22:46:01,":+1: this is needed
",ahmadnassri,2014-09-17 22:43:45
488,2014-09-17 01:56:47,"Hi,

First: thanks for writing this fantastic library!

My issue: I'm using Markdown in documentation for a project, and would like to use &lt;div> tags inside of the Markdown to specify that certain sections should be hidden (or otherwise stylized).

For example:

<S_CODE_TOKEN>

Unfortunately, the Markdown content inside the &lt;div> does not get rendered -- it's copied verbatim into the output.

Is there any way to configure marked.js to render Markdown inside of &lt;div> tags? If not: can you point me in the right direction for how to add such an option? Or: can you recommend some alternate strategy for hiding (or toggling visibility of) sections of content? 

Thanks!
",asadovsky,
488,2014-09-21 22:18:15,"Weird you're right! I guess marked skips certain elements. 

You could loop through the elements that have your class, grab the markdown, process the markdown, then replace the contents! Wouldn't be that difficult with jQuery and you wouldn't need to modify marked. 
",octalmage,
488,2014-09-21 22:32:14,"I'm using a static site generator and don't want to run JS on the client side at render time.
I could run marked in 2 passes as part of site generation (similar to what you suggest), but that's still somewhat of a hassle, especially since it'd require modifying the site generator tool, which I didn't write.
",asadovsky,
488,2014-09-22 07:34:03,"FYI, Markdown specifically skips processing Markdown within block-level HTML; please refer to http://daringfireball.net/projects/markdown/syntax#html
",jeffwilcox,
488,2014-10-03 20:32:02,"but some times you want to have a nice styled panel and use in it some markdown like below

<S_CODE_TOKEN>
<div class=""panel warning"">
some random text

<S_CODE_TOKEN>
</div>
<S_CODE_TOKEN>

and it is not entirely true that markdown doesn't work in html block as the markdown emphasis work normally. Looking on above sample, if I would but ""test"" in between of asterisk ""**test**"" that would be rendered to bold. Also the code block above is rendered like it would be a one line code. So something works there. And that would be super cool to have it fully working.
There is a sanitize option to ignore HTML, there could be an option to have markdown in html blocks working :)
",derberg,
488,2014-10-23 08:39:56,"anyone know the line to hack in the js to make this work?
",SimonCropp,
488,2015-01-04 12:36:52,"Reliable Markdown parsing inside HTML is a must. But this will require to remove ""indented block = code block"" rule entirely, as nested HTML tags are always indented... As GFM style is so much better I think that removal will only improve everything. It was always a fail in original Markdown design to treat indented text as code.
",ivan-kleshnin,
488,2015-01-15 08:57:04,"I love Markdown, but if things like support for markdown in between divs will not be available, markdown will start loosing his position in favour of https://github.com/asciidoctor/asciidoctor.js
",derberg,
488,2015-02-24 15:37:37,"I know this is a bit of a specific case, but I have been trying to get round this for my (jekyll) github pages.

My requirement was to wrap a markdown-ed paragraph in a div so I could style it as a panel. In the end I just created an empty, classed div in front of the paragraph and used a [sibling selector](http://css-tricks.com/child-and-sibling-selectors/) `.myclass + p` to reference (and style) the following paragraph.

I realise this is an unholy and specific workaround, but I thought I would share.
",tombola,
488,2016-11-17 22:12:05,"This feels like quite a common use case - it would be nice if there was some built in liquid template that could do this for you, although we'll need to ensure that markdown is subsequently parsed and outputted correctly within that liquid block.
",sh1989,
488,2017-01-17 00:30:47,"Some markdown parsers/implementations allow this:

<S_CODE_TOKEN>

This would be rendered as

<S_CODE_TOKEN>`

It would be great if marked would support this, too.",franzheidl,
488,2017-03-22 15:55:09,"just stumbled upon this div case 

Interestingly, it seems as the following indeed do render correctly:
- bold and italics using ``**bold**`` and ``*italics`` 
- url syntax ``[link text](https://url.com)``
- maybe more

However others don't do so in my case:
- headings ``#``, ``###``
- lists
    <S_CODE_TOKEN>`
- probably more",schlichtanders,
487,2014-09-12 15:14:33,"The two quotes from code below will be rendered into single quote.

<S_CODE_TOKEN>
",alexeypetrushin,
486,2014-09-11 18:45:41,"A while ago I opened issue #453 because Grunt wiredep was complaining that it could not wire marked into my project due to missing bower.json file. That issue was closed out with a comment that all was needed as a  new release. Since then a new release (0.3.2) has been posted and the issue remains. I see a bower.json in the repo, but it's not showing up in the releases.
",JAAulde,2014-09-11 18:46:46
486,2014-09-11 18:47:36,"Nevermind, I'm wrong--the latest release is from before I opened #453 

My apologies for wasting your time with this ticket.
",JAAulde,2014-09-11 18:46:46
486,2014-09-20 03:28:21,"I encountered the similar  problem.

<S_CODE_TOKEN>

How to deal with this? @JAAulde 
Thank you.
",zhiyelee,2014-09-11 18:46:46
486,2014-09-23 15:00:02,"For me it was fairly simple as Grunt's wiredep was trying to use the entry to add the files into my HTML as script tags. I just needed to add it manually outside of the area where wiredep writes.
",JAAulde,2014-09-11 18:46:46
486,2014-09-24 07:47:29,"@JAAulde Thanks. I found a solution more graceful, you can try this too.

`bower install chjj/marked#master`
",zhiyelee,2014-09-11 18:46:46
485,2014-09-10 16:34:58,"Like this: http://jekyllrb.com/docs/frontmatter/
",elliottregan,
485,2014-09-10 16:37:09,"How exactly do you envision this working? The front matter is metadata for a document, which doesn't fit into the return value for a parsed document, which results in just text. This is really a task that needs to be delegated to whatever software is using marked.
",scottgonzalez,
485,2014-09-10 17:57:56,"First, set an option to return an object rather than just text. If a front matter section is present, Marked could return an object like this:

<S_CODE_TOKEN>

If there is no front matter, it would just return 

<S_CODE_TOKEN>
",elliottregan,
485,2014-09-10 18:29:27,"This really seems out of scope for marked, but I'll wait for @chjj to respond.
",scottgonzalez,
485,2014-09-11 13:59:47,"I hear that. I just see a few markdown processors supporting meta data, and it's pretty useful to be able to include it.

On Wed, Sep 10, 2014 at 2:29 PM, Scott González notifications@github.com
wrote:

> ## This really seems out of scope for marked, but I'll wait for @chjj to respond.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/chjj/marked/issues/485#issuecomment-55160403
",elliottregan,
485,2014-09-11 14:52:51,"I certainly agree that the pattern itself is showing to be very useful and quite popular. It makes writing documentation and building sites with Markdown a very sane process. If you plan to use the meta data as an object with your template engine, why not just ready it in one swoop as you parse the document string.  Maybe even support [HJSON](http://laktak.github.io/hjson/) as well?  

Though following the UNIX philosophy it would make more sense of there was another project that took the parsed Markdown and went from there.  If you think about how Jekyll uses it.... it does allow HTML as well.
",howardroark,
485,2014-10-06 17:48:29,"I just ran into a similar problem where I needed to separate YAML front matter from the markdown content. I ended up using the [YAML Front Matter module](https://github.com/dworthen/js-yaml-front-matter). Seems to cover this use case pretty well.
",iansinnott,
485,2014-10-06 17:51:29,"So, the situ on is to ""pre-process"" the .md file before sending it to the client? I guess if that is out of the scope of what marked is trying to do, that's fine. I think it would still be great to have support for at least removing meta data.

On Mon, Oct 6, 2014 at 11:48 AM, Ian Sinnott notifications@github.com
wrote:

> I just ran into a similar problem where I needed to separate YAML front matter from the markdown content. I ended up using the [YAML Front Matter module][yml]. Seems to cover this use case pretty well.
> 
> ## [yml]: https://github.com/dworthen/js-yaml-front-matter
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/chjj/marked/issues/485#issuecomment-58057831
",elliottregan,
485,2014-10-06 20:12:05,"IMO it's out of scope. I've had gulp pipelines like this:

<S_CODE_TOKEN>

It should be removed before hand. 
",adam-lynch,
485,2015-10-23 02:04:35,"It's been a year but github is currently parsing front matter into a table. Now that this is part of the official GFM parsing, I think we should put it into marked (into gfm) as well. 

e.g.: https://github.com/dvcrn/dvcrn.github.io/blob/master/_posts/2015-10-13-my_dream_editor.markdown

Front matter:

<S_CODE_TOKEN>

Output: 
![screen shot 2015-10-23 at 11 02 40 am](https://cloud.githubusercontent.com/assets/688326/10682814/9bbc04be-7975-11e5-96ba-7ca55ebc3ba9.png)
",dvcrn,
485,2015-10-23 14:49:48,"@dvcrn if GitHub was, you wouldn't need to use an image as an example right? :stuck_out_tongue_winking_eye: 
",adam-lynch,
485,2015-10-23 16:13:43,"Nice catch! @dvcrn ! 

@adam-lynch click the other link. You can see it at the top of that page. 
",elliottregan,
485,2015-10-23 16:15:13,"Elliott, thanks :). Weird how they render markdown differently here hmm

On Fri, 23 Oct 2015, 17:13 Elliott Regan notifications@github.com wrote:

> Nice catch! @dvcrn https://github.com/dvcrn !
> 
> @adam-lynch https://github.com/adam-lynch click the other link. You can
> see it at the top of that page.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/issues/485#issuecomment-150622089.
",adam-lynch,
485,2015-10-23 16:27:28,"They don't mention it in their docs, but they are definitely showing key-values, even complex ones with arrays, as a table. I still prefer JSON because it's easier to work with, but it makes sense for Github to display it Asa table. 
",elliottregan,
485,2015-10-23 17:04:24,"> They don't mention it in their docs

It's probably just left out because it's unrelated to their markdown parser. See https://github.com/blog/1647-viewing-yaml-metadata-in-your-documents
",scottgonzalez,
485,2016-02-06 18:30:58,"FYI if people are still looking, @adam-lynch's comment [here](https://github.com/chjj/marked/issues/485#issuecomment-58087903) is _conceptually_ the way to go.

In terms of _implementation_, [metalsmith](http://www.metalsmith.io/) is really great for this type of thing, and includes a [metalsmith-markdown](https://github.com/segmentio/metalsmith-markdown) plugin that is built on top of [marked](https://github.com/chjj/marked). When used in combination with [metalsmith-layouts](https://github.com/superwolff/metalsmith-layouts), you can do some really cool things.

For example (in a `gulp` pipeline):

<S_CODE_TOKEN>

`metalsmith-layouts` is **automatically** looking for the `file.frontMatter` property set internally by [gulp-front-matter](https://github.com/lmtm/gulp-front-matter), and using it to render [handlebars](http://handlebarsjs.com/) data for a fixed set of `layouts`.

Example `markdown` (`myfile.md`):

<S_CODE_TOKEN>

Example `handlebars` template used by `metalsmith-layouts` (`documentation.html`):

<S_CODE_TOKEN>

Outputs (`myfile.html`):

<S_CODE_TOKEN>

None of this would be possible without the work by @chjj and team, so thanks for that.

I originally came here looking for answers, so hopefully this helps the next guy/gal.

Cheers.
",justinhelmer,
484,2014-09-04 20:28:13,"Hi folks,
I've tried every way I can think of to get marked to render a table with no header.

I want a table with body only and no header. Ideal example:

|----------------|----------------- |
| col 1, row 1 | col2, row 1    |
| col 1, row 2 | col2, row 2   |

Thanks
Sass
",sassanp,
483,2014-09-03 19:38:08,"https://github.com/jgm/stmd
",KyleAMathews,
483,2014-09-03 19:49:13,"Do you care to elaborate on what isn't supported?
",scottgonzalez,
483,2014-09-03 20:08:53,"I haven't done any investigation. I assume there's some discrepancies and that either those be resolved or it be another supported ""mode"" like Github-flavored Markdown.

First step I'd assume would be to run marked.js against the [spec](https://github.com/jgm/stmd/blob/master/spec.txt) to see where marked.js differs.

This all, of course, assumes that the maintainers of this library agree with the modifications proposed by the group behind Standard Markdown.
",KyleAMathews,
483,2014-09-05 11:07:20,"Just running the tests of the stmd suite:

**marked**

<S_CODE_TOKEN>

**stmd**

<S_CODE_TOKEN>
",commenthol,
483,2014-09-05 15:35:53,"I'm going to be looking at this over the weekend I think. Personally I'd like to get involved with the spec itself, particularly with Lists. I'm almost certain List tests are most likely failing there due to my own biased logical/more-intuitive implementation of them. While standard markdown is robust in that area, I think it still misses some things.

Aside from gfm and the behavior muted by pedantic=false, marked tries to follow markdown.pl exactly, if the standard isn't doing that it will be incompatible with marked (I have a feeling markdown.pl would fail even more of those tests: i.e. would you really want raw markdown.pl ""replacement tags"" in your markup?). This will be a new design decision for marked and we'll have to figure out where to go with it.

 (This is also not the first time a markdown spec has been tried before, If I remember right. Like Wayland is the king of a dozen would-be X11-killers over the course of a decade and a half, this might be the one spec that finally dethrones markdown.pl. Who knows?).
",chjj,
482,2014-09-03 11:35:37,"Markdown text: `[hello \[ ok](http://abc.com)`, should be generated to HTML like this:

<S_CODE_TOKEN>

But actually, it generates:

<S_CODE_TOKEN>
",theking-laptop,
481,2014-08-30 16:40:48,"The text in the README implies that the default options are being shown, but the default option for sanitize is ""false"". Showing ""true"" could mistakenly lead a user to assume that they don't need to enable the sanitize option.
",hubgit,
480,2014-08-29 11:19:05,"Ups, posted to wrong place. Please delete and sorry for mistake.
",puzrin,2014-08-29 11:24:45
479,2014-08-28 12:48:07,,PeterDaveHello,2014-08-28 12:54:55
479,2014-08-28 12:54:55,"This is negligible.
",scottgonzalez,2014-08-28 12:54:55
478,2014-08-28 12:47:50,,PeterDaveHello,
477,2014-08-20 20:31:05,,kylerush,2014-08-20 20:32:44
477,2014-08-20 20:32:43,"sorry meant to merge this into our fork.
",kylerush,2014-08-20 20:32:44
476,2014-08-15 02:40:31,"I have following mark down file which has a table, notice the 3rd column does not have value, and is empty

| Header1 | Header2 | Header3 | Header4 |
| :-- | :-: | :-- | :-- |
| value1 | value2 |  | value4 |

it generates following html, notice it has 3 cells, I would expect there is an empty <td></td> after value2.  Anyone know what could be issue here?

<table>
..............
<tbody>
<tr>
<td align=""left"">value1</td>
<td align=""center"">value2</td>
<td align=""left"">value4</td>
</tr>
</tbody>
</table>

",xiaofengzang,
476,2015-01-04 21:21:42,"+1

This issue is preventing me from using marked for [instant-markdown-d](https://github.com/suan/instant-markdown-d)
",suan,
475,2014-08-14 23:38:55,"This PR combines several trivial readme-related fixes including: #474, #470, #454, #444, #426 and #412 (which can all be closed if this is merged). Also, it looked like the readme was supposed to be wrapped at 80 chars, so I fixed that too.
",slang800,
474,2014-08-14 22:25:27,"you're also going to need to enable travis for this repo, but that should be easy because there's already a `.travis.yml`
",slang800,
474,2017-02-17 12:02:31,This should really be on the Readme.md. I had to fork the repo and run the tests manually to see which tests were failing.,radiovisual,
473,2014-08-14 05:08:02,"given the following table:

<S_CODE_TOKEN>

I get this as a token:

<S_CODE_TOKEN>

...as you can see, all the cells in the first column have leading whitespace, while the cells in the other columns do not.
",slang800,
472,2014-08-12 03:31:44,"Arrays don't _really_ support non-numeric keys, so using `ast.links` means I loose the list of links whenever I perform an operation on the array like `map` or `concat`. If you want to read more, Andrew Dupont has a short [essay](http://andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful/) on why this is harmful.

So, we should change the format of the AST to something like this:

<S_CODE_TOKEN>
",slang800,
472,2014-11-13 16:13:58,"+1
",Feder1co5oave,
471,2014-08-11 04:11:18,"with gfm:true, we should get wiki links parsed? 
ie `[[tomatoes]]` would give a link. or is that a feature specific to the github wiki and not markdown?

<S_CODE_TOKEN>
",dcsan,
471,2014-08-12 03:09:03,"It doesn't look like it's part of the GFM spec: https://help.github.com/articles/github-flavored-markdown
",slang800,
471,2014-09-16 05:31:25,"with gfm you just type https://github.com/ and it get's highlighted

source:

<S_CODE_TOKEN>
",alanguir,
471,2014-09-22 07:36:17,"GitHub wikis (powered by https://github.com/gollum/gollum-lib/) support this syntax, but GFM itself does not recognize the wiki-style links. Gollum implements a filter/translation layer that converts such things into Markdown-friendly links (or HTML) before processing.
",jeffwilcox,
471,2017-01-08 09:58:13,"+1 for @dcsan and @alanguir , would be great to Cover such a thing with out additional `Gollum` filtering level.

Maybe with another option ? Like `gfmWiki: true` ?",yakivmospan,
471,2017-01-19 09:09:43,"For those who still need this, here is the code snippet that converts all of `[[..]]` into `[..](..)`:

<S_CODE_TOKEN>

Use it before passing into the renderer, Cheers. ",yakivmospan,
470,2014-08-10 20:42:40,,erictheise,
469,2014-08-09 20:11:30,"Just wanted to mention that I found this pretty odd since we have a `loose_item_start`. Any particular reason for this?
",slang800,
469,2014-08-11 00:42:07,"Actually, it's probably more accurate to say that `loose_item_start` is terminated by `list_item_end`, which is equally weird. Right now I'm using this code as a workaround:

<S_CODE_TOKEN>
",slang800,
468,2014-08-09 00:24:52,,bzwheeler,2015-05-08 01:31:05
468,2015-05-08 01:30:55,"I like this idea, but I'd rather have a separate option called `sanitizer`.
",chjj,2015-05-08 01:31:05
467,2014-08-06 22:01:39,"If you try to use a code block with ""yaml"" or ""yml"" as the language, it just doesn't work.

Example: https://gist.github.com/jipiboily/3ac64d9746ebaa2d7d44

Any ways to get it working or add support to it? If yes, how can I help?

Thanks!
",jipiboily,2014-08-07 01:04:22
467,2014-08-07 01:04:22,"Nevermind, problem is not in marked but in Prism that I also use.
",jipiboily,2014-08-07 01:04:22
466,2014-08-06 18:01:17,"marked is great, but it lacks of ability to extend it with new syntax constructions. 
Inspired by asciidoc I suggest to support some macro construction like inline-macro and block-macro (wrapper) to extend it by user

One example of usage, just thoughts:

inline-macro

<S_CODE_TOKEN>

block macro

<S_CODE_TOKEN>

Nested macros:

<S_CODE_TOKEN>

And nested block macros:

<S_CODE_TOKEN>

And it would be possible to extend it this way:

<S_CODE_TOKEN>

All examples are born just now, and please, don't hit me, but this feature could make markdown infinitely extensible and flexible.
",golyshevd,2014-08-12 00:20:41
466,2014-08-06 19:51:46,"I'm going to have to +1 where your head is at. 

I think the code and assets powering each `macro` would be an excellent bower package. From there it would only be a matter of including it in your bower file along with marked.  The GitHub home of each macro could house all of the operational instructions. The macro's core javascript would just have to register itself with marked before marked runs. After that marked would just convert the Markdown macros into HTML and fire a callback.  The register macro part should likely be supplied a callback which signals the macro to do its own DOM work.

I would vote against the complexity of the nesting though.  Markdown is meant for writing, not really as a catch all replacement for HTML. It may be a stretch to assume that someone without development experience could wrangle how to use those blocks. Instead what it if macros always expect just a string, maybe a developer uses the aid of Jison to deal with it. 

Perhaps a scientific writer could benefit from a handy venn diagram macro...

<S_CODE_TOKEN>

The macro code could turn the output html to an SVG object. Likely it would search for a unique `data` attribute after marked ran the callback.
![](http://www.mathsisfun.com/sets/images/venn-1.gif)

Or a youtube video... {{youtube: id}}
",howardroark,2014-08-12 00:20:41
466,2014-08-06 22:55:02,"> I would vote against the complexity of the nesting though. Markdown is meant for writing, not really as a catch all replacement for HTML. It may be a stretch to assume that someone without development experience could wrangle how to use those blocks.

But no one writer will be forced to put macro in macro, right? But it is feature :)

> Instead what it if macros always expect just a string, maybe a developer uses the aid of Jison to deal with it.

What string? All braces content like here? 

> Soccer = alex, casey, drew, hunter
> Tennis = casey, drew, jade
> Soccer ∪ Tennis

Probably optionally. I think it should have the only one way to pass parameters for macro. At least it should have default behavior.

> The macro code could turn the output html to an SVG object. Likely it would search for a unique data attribute after marked ran the callback.

Did you mean somewhat like that?

<S_CODE_TOKEN>

macro is just subrenderer, if you do not want generate some details in macro you just should do it after rendering

> &lt;venn-diagram&gt;
> Or a youtube video... {{youtube: id}}

Yes! 

There are many cases where markdown would might be more rich. But it is impossible to support an unique syntax for each case. Therefore I think that it is not so bad idea.
",golyshevd,2014-08-12 00:20:41
466,2014-08-11 22:20:29,"It's not `marked`'s [job](http://www.faqs.org/docs/artu/ch01s06.html#id2877537) to extend Markdown.

How about

<S_CODE_TOKEN>

and pass the result of that to `marked`?
",anko,2014-08-12 00:20:41
466,2014-08-12 00:20:41,"@anko thanks for idea, just published https://www.npmjs.org/package/macroed but separate macro processor
",golyshevd,2014-08-12 00:20:41
466,2014-08-12 13:00:09,"Good point @anko, the Unix philosophy causes great things.  

I will check this out @golyshevd! It's awesome how inspired you were to whip this up so quickly :)

I plan to start a project that focuses on scientific writing with Markdown. The idea is to have it be a UI that harnesses GitHub OAUTH and hosts papers with GitHub Pages.  Just looking to see what open-source is out there to build it all.  

I think your implementation would work. An intelligent person should be able to grasp the idea of syntax.    I just think it would be very cool if there was a universal macro syntax that enabled scientists the ability to turn written math into graphs.

This project inspired me...

https://github.com/vitoravelino/js-sequence-diagrams

I turned it into a service that let's you make sequence diagrams in Markdown. Still needs syntax though to manage the GET params. I'd love to convert it into a macro that accepted plain text with line breaks.  I suppose your code could offer that if I made use of the `%s` value.

<S_CODE_TOKEN>

![sequence](http://get-diagrams.com/sequence?json=[
    ""Andrew-->China: Says Hello"",
    ""Note right of China: China thinks about it"",
    ""China-->Andrew: How are you?"",
    ""Andrew-->>China: I am good thanks!""
    ])
",howardroark,2014-08-12 00:20:41
466,2014-08-12 20:27:06,"@howardroark it is so unstable and just now, we refactor macro syntax to easier indent oriented. The current solution is so poor and it is so conflicting with markdown as post/pre processor. But tomorrow we should complete writing the code, tests and documentation. Our writers marking up so difficult articles and need flexible solution. Comimg soon=)
",golyshevd,2014-08-12 00:20:41
466,2014-08-12 20:30:08,"@golyshevd I'll keep watching the repo.  Good luck!
",howardroark,2014-08-12 00:20:41
466,2014-08-14 19:44:36,"@howardroark look at that (it is still beta)

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",golyshevd,2014-08-12 00:20:41
465,2014-08-04 18:01:49,"I just cloned master and ran `node test`, and got the following failure:

<S_CODE_TOKEN>

Not sure if this is a known issue or not, but thought I'd open a bug in case you weren't aware of it.
",pdubroy,
465,2014-08-06 17:58:25,"+1 Ditto.
",guypursey,
465,2014-08-06 19:00:25,"Line 2 in `./test/tests/def_blocks.text`

<S_CODE_TOKEN>

is being treated like a reflink because of line 20

<S_CODE_TOKEN>

One can see this is expected behaviour by comparing `./test/tests/links_reference_style.text` with `./test/tests/links_reference_style.html`.

If `def_blocks.text` is to pass, the reflink inline lexer (lines 626-641 in `./lib/marked.js`) needs to somehow skip reflinking when we are in a blockquote. But having only just looked into the code I can't quite see how to do that. It might be simple but I can't see how to perform the check within the function; it looks like a string is simply passed to the `InlineLexer.prototype.output` function to be formatted without context.

Apologies if this is all stating the obvious. Happy to keep looking but thought I would document this here in case someone more familiar with the code can get to a fix quicker.
",guypursey,
465,2014-08-06 19:01:51,"It might be that want to keep reflinking within blockquotes, of course, in which case it's simply a matter of rewriting `./test/tests/def_blocks.html`. One to discuss?
",guypursey,
465,2015-01-04 01:00:35,"Has any decision been made on this? 

I see two issues here:
1. Ref links should require two sets of square brackets. 
   As @guypursey pointed out the first instance of [1] is treated as a ref link to the second instance. 
   This should not happen on a single pair of brackets.
2. The test is broken (def_blocks.text, and def_blocks.html).
   Assuming that this test pair are intended to contain ref links then both the input (def_blocks.text) 
   and expected result (def_blocks.html) ought to be modified accordingly. 
",andre-artus,
464,2014-08-01 17:41:42,"This patch add:
- multiple header rows for tables
- add colspan for cells
- unify nptable & table code
",killall5,
463,2014-08-01 17:17:51,,killall5,
463,2015-09-27 14:09:41,"Wondering if this PR takes this situation https://github.com/chjj/marked/issues/664 into account or falls prey to the same inconsistent casing problem.
",KrishnaPG,
463,2015-11-15 21:22:17,"Please describe what this PR is for.
",Feder1co5oave,
462,2014-08-01 15:59:37,"This patch enable tables with multiple header rows. Tests pass.
",killall5,2014-08-01 17:14:37
461,2014-08-01 15:38:17,"This patch enable tables with multiple header rows.
",killall5,2014-08-01 15:54:11
460,2014-07-31 20:36:03,"Good day! It is simple patch which fixes problem with ""unique"" references many bloggers use for footnotes to void footnote reference overlapping. John Grubber does add a post date after footnote sequence number like `[^1-2014-07-31]` to avoid such problems. This patch preserves unique reference for link and back link bt does render correct number for footnote sequence. Thanks!
",totocaster,2016-10-23 11:17:16
459,2014-07-29 21:04:51,"This PR works-around a situation in the v8 regex parser in which, given a sufficiently long string, causes the regular expression engine in node.js/chrome to melt down. This is due to v8's backtracking regular expression implementation.

In Firefox and Safari OSX, a 2k long string take 95ms and 41ms respectively to execute. In Chrome, the same string takes 298024ms. During this time, the browser/node.js will effectively be locked up, blocking the event loop.

Here's an example that will cause the problem.

<S_CODE_TOKEN>

While the example may seem a bit odd, it's derived from customer data which caused our application to lockup. 
",suprememoocow,
458,2014-07-29 00:39:09,"It is helpful if one needs to use http to retrieve rich data for rendering.
",taylorchu,
458,2014-08-11 01:35:46,"Is there any case where marked actually needs to perform an async operation during compilation?
",slang800,
458,2014-08-11 02:47:39,"what do you mean by ""compilation""? 
",taylorchu,
458,2014-08-11 04:29:25,"The operation of turning markdown into HTML.
",slang800,
458,2014-08-11 04:50:04,"if rendering requires to call a function that is not synchronous or this function will run for a while.

this will be similar to how code highlighting works. making all rendering functions async will be more consistent.
",taylorchu,
458,2015-12-01 18:31:52,"My use case is this: i want to override `paragraph` to make a call to mongo, fetch a document by id (async) and build the output with that.
",jacargentina,
458,2017-02-20 14:12:55,"+1 for this, I need some enhanced custom markdown that will fetch data from the server to get the info to render the final HTML.

e.g.
`The head of IT, [function:HEAD_OF_IT], will be in charge of...`
Should render:
`The head of IT, John Smith, will be in charge of...`
This needs to get the person from the server. That will always be accurate when displaying the page, even when the person that's assigned as Head of IT changes.",TiboQc,
457,2014-07-28 13:46:02,"When I have something like

<S_CODE_TOKEN>

With the default Renderer I get

<S_CODE_TOKEN>

(notice the trailing dash in the id).
This PR fixes this:

<S_CODE_TOKEN>

**Warning**: this may change the way URLs are generated and break existing links.
",Feder1co5oave,
456,2014-07-28 13:15:36,"PR for #450

I hope it doesn't seem overkilling, I kept it as small as possible.
Comments are welcome. I'll be posting some tests, if I can manage to make them work.

Meanwhile I tested it with

<S_CODE_TOKEN>

and I got

<S_CODE_TOKEN>

which looks good to me.
",Feder1co5oave,
456,2015-03-10 19:40:43,"Is this still being looked at @chjj ?
",F1LT3R,
456,2015-03-10 20:02:21,"@F1LT3R definitely no.
",Feder1co5oave,
456,2015-03-10 20:07:46,"As in... it shouldn't be, or... it hasn't been?
",F1LT3R,
456,2015-03-10 20:11:35,"I meant marked is not being maintained any more
",Feder1co5oave,
456,2015-03-10 20:13:10,"Ah Ok. Thanks @Feder1co5oave.

I've just been testing out your clean-segments commit and I think it's a great improvement. 

Is there something better NPM module for markdown that I should be using instead?
",F1LT3R,
456,2015-03-10 20:29:45,"I'm still with marked, but there exist some more modern and maintained parsers out there. I haven't tried any yet so I can't help you.
",Feder1co5oave,
456,2015-03-10 21:03:52,"Thanks
",F1LT3R,
456,2015-03-11 13:38:48,"@F1LT3R try https://github.com/markdown-it/markdown-it
",JCMais,
456,2015-03-11 14:32:29,"Thanks @JCMais !!
",F1LT3R,
455,2014-07-26 07:16:43,"I am just wondering how I can customize a render to set a css class to an html tag table.
The method table(string header, string body) can be used for the table headers but not for the entire table. Is it right ? 

Thanks
",christophebe,2014-07-26 22:00:14
455,2014-07-26 22:00:14,"oups sorry for this issue. I found the solution 
",christophebe,2014-07-26 22:00:14
455,2016-05-02 11:57:01,"@christophebe Where?
",julmot,2014-07-26 22:00:14
454,2014-07-25 05:32:25,"Wanting XHTML-compliance, I started to add my own ""xhtml"" option before I realized one was already present. Issue #234 makes it sound like this feature was a little controversial - but the support is in the code, so I thought it would be good to mention it in the README.

While making that change, I noticed two small misspellings and corrected them.
",DavidAnson,
454,2014-09-22 07:31:52,"Nice find @DavidAnson !
",jeffwilcox,
453,2014-07-24 18:23:26,"Regardless of the version of `marked` I install with bower, Grunt's `wiredep` task gives me: ""_marked was not injected in your file_"".

All my Googling points to packaging issues with a bower component when this error shows up--particularly a missing `bower.json` file or no `main` property therein. In looking at the latest release, I see that `bower.json` is missing, but `component.json` (to which the tools should fall back) is present with a `main` property, so I am not sure what's going wrong...
",JAAulde,2014-07-24 18:29:27
453,2014-07-24 18:29:27,"If that's the problem, then there's nothing to do other than release a new version of marked.
",scottgonzalez,2014-07-24 18:29:27
453,2014-07-25 15:33:34,"I'm a little new to the ins and outs and social protocols of github. From the limited amount I do understand, I have a feeling there's something I can do to help myself out on this, but I am not sure what it would be. That being the case, I'll ask if there's any idea when a new release will be available so that packages which depend on marked (such as angular-marked) are easily used without manual intervention?

Thanks,
Jim
",JAAulde,2014-07-24 18:29:27
452,2014-07-23 20:24:00,"It would be useful if the objects in the array returned by the lexer contained start and end indices so that the markdown source corresponding to each object could be recovered. I'd like to use marked to parse markdown documents and pull out individual sections. It would be nice to be able to store these sections as markdown source, since the object format returned by the lexer could change in future. I'm planning to have a go at adding this feature myself, but I wondered if people think that it's an appropriate addition.
",addrummond,2014-07-23 21:59:39
452,2014-07-23 21:59:39,"Duplicate of #441.
",scottgonzalez,2014-07-23 21:59:39
451,2014-07-23 19:51:51,,ericlifka,
451,2014-07-24 07:32:37,"You could always redefine the `link` renderer method and use a custom title to set the target. I do this automatically with external URLs:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",Feder1co5oave,
451,2014-07-25 20:04:11,"Thanks for this suggestion! I don't know why but I didn't think to override the link renderer to do what I wanted. This actually gave me more control as now I can match routes to whitelist certain links to not be external.
",ericlifka,
451,2014-12-28 17:06:51,"Anyhow, I would say the option proposed makes a lot of sense, even if you can override the Renderer. Any chance this pull request gets merged?
If we use the custom renderer and the original code has a bugfix/update, we will miss that...
",GonzaloAlvarez,
451,2014-12-28 17:13:17,"`marked` does not seem to be maintained anymore, so the chances that _any_ pull request be merged are very low.
Moreover, over the time I've seen the tendency to keep the number of options to a bare minimum especially in the rendering stage, so the use of custom renderer methods is always recommended.
",Feder1co5oave,
451,2014-12-28 17:14:46,"Ok, thanks. That seems reasonable, then.
",GonzaloAlvarez,
450,2014-07-17 12:55:04,"I was working recently about headings' ids and I encountered something like:

<S_CODE_TOKEN>

Here on github, clean segment links are generated, which only include the ""raw"" visible part of the heading text, as you can see in this [gist](https://gist.github.com/Feder1co5oave/68d3481c44da15720d74).

Now, `marked` with default options returns this:

<S_CODE_TOKEN>

As you can see, the ids are quite ""dirty"", as they are generated from the raw markdown code of the heading (see [code](https://github.com/chjj/marked/blob/7be419324986c7a37c8d3e2fd580e925e236db52/lib/marked.js#L976)). Some markdown punctuation is crushed into dashes, but more complex tokens like links have additional text in them, which makes its way to the segment link.

I wonder if you would be interested in ""fixing"" this, as I believe it would require some many LOCs.
My idea was that we could create a function like `inline.output`, that only returns the textual part of the rendered markdown. The return value of this function would be passed as the `raw` argument of the heading renderer.
I am available to submit a PR in a week.
",Feder1co5oave,
450,2014-07-24 05:14:56,"That is default behavior,  you can overwrite heading with 

function(text, level, raw) { return '<h' + level + '>' + text + '</h' + level + '>\n';};""
",xiaofengzang,
450,2014-07-24 07:35:37,"I've already overridden the renderer, but the problem is the `raw` argument, which contains raw markdown code. I could lex that and get rid of the dirt, but I don't consider that a viable option.
",Feder1co5oave,
450,2014-10-20 20:47:13,"+1 @Feder1co5oave 
",gregtandiono,
450,2015-03-10 19:38:07,"+1
",F1LT3R,
449,2014-07-17 09:05:27,"minor fix/suggestion:
- dev (`lib/marked.js`):
  `search = '\n</code></pre>`
  
  `replace = '</code></pre>`
- prod (`marked.min.js`):
  `search = ""\n</code></pre>`
  
  `replace = ""</code></pre>`
- notes:
  - this occurs twice.
  - it has to do with how the html for code blocks are built.
  - the trailing CR is inside a `<pre>`, so it adds visible white-space.
",warren-bank,
449,2014-07-17 12:59:05,"In my experience, a single newline at the end of the `<pre>` does not create additional space in the browser. Could you post an example?
",Feder1co5oave,
449,2014-07-17 18:57:15,"I wrote some tests to back-track my code and determine exactly where this problem was introduced. It is partially the result of my doing something ""weird"".

Within the ""highlight"" callback function to pre-process code blocks.. I was conditionally passing the code to highlight.js ..which rewrites the HTML text.. adding spans and classes and such. However, the one issue I found was that all of the color schemes (css themes) assume that the parent container (ie: the `<code>` tag) has the css class `hljs`. Since there's no direct access to this element from within the ""highlight"" callback function, I opted to wrap the output of the highlighter method in a `<div class=""hljs"">`, which results in the dom structure: `<pre><code><div>...stuff...</div>\n</code></pre>`.

So, it's my own fault for adding a block element.. which causes the trailing CR to occur on a new line.. creating the visible space I was seeing.

I suppose this is an edge case.. up to you if it's worth considering. I'm fairly new to github, so I'm not sure if I can attach an .html file containing some test code that very clearly illustrates the issue I'm seeing; I don't seem to be able to do so.. shame.

I apologize if this was a nuisance post. I do appreciate the fast response.

I've tried to copy the contents of the test file into this message; the only edit I made was to ""escape"" the code blocks in the embedded markdown. `test.html` file contents:

<S_CODE_TOKEN>
<html>
<head>

<link rel=""stylesheet"" href=""http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.1/styles/default.min.css"">
<script src=""http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.1/highlight.min.js""></script>

<link rel=""stylesheet"" type=""text/css"" href=""https://assets-cdn.github.com/assets/github2-84a1b6179d461213455892ab983182bc2052a7b5.css"" />
<link rel=""stylesheet"" type=""text/css"" href=""https://assets-cdn.github.com/assets/github-c534ad575b5bb8c3cc3dce9c571df7aa7400dbe9.css"" />
<script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js""></script>
<script type=""text/javascript"" src=""https://cdn.rawgit.com/chjj/marked/master/marked.min.js""></script>
<script type=""text/javascript"">
window.onload = function(){
    var get_html_string = function(add_hljs_div_wrapper){
        var html_string = marked(gfmd_string, {
            ""highlight"": function(code, lang){
                var hljs_code = (hljs.highlight(lang, code, false)).value;

                if (add_hljs_div_wrapper){
                    hljs_code = '<div class=""hljs"">' + hljs_code + '</div>';
                }

                return hljs_code;
            }
        });
        return html_string;
    };

    var run_test = function(add_hljs_div_wrapper){
        var html_string = get_html_string(add_hljs_div_wrapper);

        jQuery('body').append('<hr>scenario:<br>&nbsp;&nbsp;&nbsp;&nbsp;additional wrapper &lt;div&gt; = ' + (add_hljs_div_wrapper).toString() + '<br>raw html output:<hr><textarea style=""width:100%;height:10em;"">' +html_string+ '</textarea>');
        jQuery('body').append('<hr>DOM created by jQuery:<hr><div class=""markdown-body"">' +html_string+ '</div>');
    };

    var gfmd_string = jQuery('#gfmd_text').val();

    run_test(false);
    run_test(true);
};
</script>
</head>
<body>
    <div style=""display:none;"">
        <textarea id=""gfmd_text"">
## block #01: javascript

[<S_CODE_TOKEN>]

## block #02: perl

[<S_CODE_TOKEN>]
        </textarea>
    </div>
</body>
</html>
<S_CODE_TOKEN>
",warren-bank,
449,2014-07-17 20:15:28,"I believe the newline is there for mere sake of readability of the generated html code. Let's hear if @chjj would like to give up a bit of readability in favor of better compatibility.
",Feder1co5oave,
449,2016-09-14 16:49:07,"~~An extra newline before the closing `</code>` tag does add space in the browser. Here is an example:~~

_My example below is incorrect. The newline marked adds does not add space in the browser. I'm leaving my mistaken example and comment here only for history._

<S_CODE_TOKEN>

![pre-newline](https://cloud.githubusercontent.com/assets/12171970/18521251/5f0480f4-7a79-11e6-899a-d232e8f19a6e.png)

~~The screenshot is from Chrome 52 on Mac. I see the same behavior in Safari 9.1.1.~~

~~I agree with the originally proposed suggestion: Remove the `\n` before `</code></pre>` in the built-in renderer.~~
",acooper-accusoft,
449,2016-09-14 17:14:41,"<S_CODE_TOKEN>

That's not just a trailing newline. That's a newline plus 4 blanks.
My chrome 52 on Linux still ignores a simple trailing newline in a `<pre><code>` block.
The default `marked` renderer does not add blanks to indent html. If you generated this with a custom renderer I think it is your responsibility.
",Feder1co5oave,
449,2016-09-14 17:17:26,"So sorry, my mistake. I had generated the HTML by hand and forgot to remove the indenting.

It turns out the real issue is with a separate documentation tool we are using which changes the HTML that marked generates. The tool is adding a newline between the closing `</pre>` and `</code>` tags. There's nothing marked can do about this.

Thanks for the fast feedback.
",acooper-accusoft,
449,2016-09-15 14:07:41,"No problem!
",Feder1co5oave,
448,2014-07-15 11:52:17,"Given:

<S_CODE_TOKEN>

The parens aren't consumed in a greedy enough manner and the output is:

<S_CODE_TOKEN>

I would expect:

<S_CODE_TOKEN>
",philjackson,2014-07-15 12:42:26
448,2014-07-15 12:42:26,"Duplicate of #366.
",scottgonzalez,2014-07-15 12:42:26
447,2014-07-13 14:11:12,"I'm not quite sure what this means, but I belive I should report it.
I guess I passesd an argument to marked with the valie `undefined`.

<S_CODE_TOKEN>
",phikal,2014-07-13 15:36:28
447,2014-07-13 15:36:28,"Duplicate of #417.
",scottgonzalez,2014-07-13 15:36:28
446,2014-07-09 22:30:40,"Could Marked have References support, like Pandoc? It's like searching a Bibtex file and delivering list of references by using a citation style (APA, Chicago, IEEE...)
",anderflash,
445,2014-07-07 14:16:49,"Firstly, this project is great!  

I work in the advertising industry and can see how Markdown will start to make headway there.  The usage concept is simple enough that new writers and some old will have an easy time getting getting their mind around it. This was always the downfall of HTML.  I can foresee a future where developers are delivered plain-text/syntax instead of MS Word documents (or even better never involved in that process again).  The industry has a very strong desire to maintain brand identity at all times and Markdown is such a sane way to separate content and style.  This is especially true for slide based presentations, which is how agencies acquire all new work. The de facto today is Keynote.  It lacks the ability to separate content and style and also has no remote execution ability.  Two things that the modern browsers can do with great ease.

That said, there are certain economic trends that need to be accounted for. Third party things like youtube, vimeo, twitter...  All of these things have libraries/APIs and industries are aware that they should be able to easily find their way into web based content.  It is a rational expectation. The issue is that you end up falling back to HTML again.

I came across [this example](https://aaronparecki.com/articles/2012/09/01/1/some-enhancements-to-markdown#macros) of Macros and thought it was a very sane approach.  The trick would be the overall strategy to get custom Javascript in play without having to add it to marked.js itself.

Designing a common syntax for handling Macros that other projects could be helpful to the future of Markdown as well.  Something like this would be so handy...

<S_CODE_TOKEN>

Though, this may be a bit more sane...

<S_CODE_TOKEN>

I can also see a lot of potential for this idea in terms of scientific writing.  A Macro that could parse natural language with something like Jison into a diagram could be very useful.  Though when something like Jison is involved a multiple line syntax would be helpful.

<S_CODE_TOKEN>

Spit out some Canvas or SVG...

![](http://www.mathsisfun.com/sets/images/venn-1.gif)

I understand that this may be out of scope for this project, though I feel this is something that should be accounted for at the parser level. Having a common syntax for dealing with these situation and an expectation to pass natural language as an input would really aid the process of fluent writing and idea generation. I could be as simple as having a `venn.js` or `vimeo.js` in a folder called `macros` which is relative to the path of `marked.js`.
",howardroark,
445,2014-08-07 09:16:53,"Omg i was created a duplicate at  #466
",golyshevd,
445,2014-09-16 16:40:51,"I have been further considering this idea and have posted my latest thoughts to jgm/stmd#123
",howardroark,
444,2014-07-03 22:15:34,,KyleAMathews,
444,2014-08-14 22:41:35,"+1
",slang800,
443,2014-07-03 18:02:30,"previously, when a fenced code block was in the second paragraph of a list, marked would not respect the spacing of the code block in gfm mode.  This fixes that bug.
",sfrank2147,
442,2014-07-03 10:08:40,"When calling `marked(undefined)`, you get the error `TypeError: Cannot read property 'replace' of undefined Please report this to https://github.com/chjj/marked.`.

This error message is not helpful. Either return an empty string, or raise some kind of ArgumentException. This will help de caller identify the problem quicker.
",doekman,
442,2014-10-27 13:47:02,"+1
",fastf0rward,
442,2014-10-29 17:04:07,"Easies way is to not pass `undefined` to `marked`, e.g.: `marked(myString || '')` -- solved.
",kuba-kubula,
441,2014-06-23 01:59:26,"I'm generating javascript code from .md files and would like to build source map along the way. Is there any way to get line/column number at the moment when renderer handler is invoked?
",sidorares,
441,2014-06-23 02:10:07,"oops, should have used search first - partially duplicate of  https://github.com/chjj/marked/issues/382

Though this one is more specific - I only need location data and going to build sourcemap manually in my code which uses marked.
",sidorares,
441,2014-06-23 02:17:49,"Other partially duplicates are #296 and #338 
",sbruchmann,
441,2014-07-25 05:33:49,"Yes please :)

I tried doing something with a counter on a custom renderer which increments for each `listitem` and clears for the `list`, but that doesn't handle nested lists.
",skeggse,
441,2014-07-25 05:46:03,"I have a work around for my use case: add line number to a language name in fenced code start and then later replace language name back to original (say, renderer is called with code:coffee-123 - this is coffee block starting at line 123, we can combine sourcemap to include this code at offset 123) 
",sidorares,
441,2014-10-23 11:53:02,"@sidorares, take a look at https://github.com/jonschlinkert/remarkable . It already has line numbers support for all blocks. We did not implemented columns, because could not find real use cases. Also everything can be monkeypatched.
",puzrin,
441,2015-08-14 10:56:17,"+1
",bpasero,
441,2015-11-13 13:03:39,"Added a pull-request with partial resolution: https://github.com/chjj/marked/pull/680
",andr2,
441,2015-12-20 03:01:51,"@andr2 
thanks
It's really useful.
",Twwy,
440,2014-06-23 00:06:36,"Hi! Cool project.

I am trying to create documentation including inline HTML code samples, i expect the inline HTML samples to be formatted as code. However they are being included verbatim.

Repro is as follows:

<S_CODE_TOKEN>

Produces

<S_CODE_TOKEN>

Expected `<pre><code>&gt;iframe src=''&lt;&gt;/iframe&lt;</code></pre>` or something similar...

Or is there meant to be an alternative way of creating a code block, rather than a four-space indent?

marked@0.3.2
",mappu,
440,2014-07-17 11:42:44,"Yeah, with GFM, you do this: https://help.github.com/articles/github-flavored-markdown#syntax-highlighting

Note that for html, you need to use `markup` apparently.

That said, it looks like it's escaping it...I am currently looking for a work around though...
",jipiboily,
440,2015-03-09 19:56:24,"Related to #378
",rymohr,
440,2015-04-29 22:17:27,"+1
",Ryn830,
439,2014-06-21 12:44:28,"<S_CODE_TOKEN>

Running this in node:

<S_CODE_TOKEN>

Outputs:

<S_CODE_TOKEN>

There is some config I should setup to make marked parsing text nodes inside html?
",mcasimir,
439,2015-09-01 17:41:47,"I ran into the exact same issue. Haven't found a solution yet.
",MichielDeMey,
438,2014-06-18 14:31:37,"Issue #387
Fixes the hang related to running these examples. 

<S_CODE_TOKEN>
",xadn,
437,2014-06-18 08:29:36,"## [markdown syntax guide](http://daringfireball.net/projects/markdown/basics)

> Markdown offers two styles of headers: Setext and atx. Setext-style headers for h1 and h2 are created by “underlining” with equal signs (=) and hyphens (-), respectively. To create an atx-style header, you put 1-6 hash marks (#) at the beginning of the line — the number of hashes equals the resulting HTML header level.
## test markdown

<S_CODE_TOKEN>
### github

![screen shot 2013-08-04 at 10 25 08](https://f.cloud.github.com/assets/1558742/906479/923fdbd8-fca7-11e2-9217-282211662b80.png)
### Markedown pro (on mac OSX)

![screen shot 2013-08-04 at 10 14 03](https://f.cloud.github.com/assets/1558742/906480/a662263e-fca7-11e2-830d-7e2942beb00c.png)
### before marked.js rendering

![screen shot 2013-08-04 at 10 47 07](https://f.cloud.github.com/assets/1558742/906482/f3c26c2c-fca7-11e2-841e-8c03723055d8.png)
### after marked.js rendering

![screen shot 2013-08-04 at 10 49 37](https://f.cloud.github.com/assets/1558742/906483/2d568914-fca8-11e2-995c-f958085ae084.png)
",insanehong,
436,2014-06-13 05:05:53,,wonder365,
435,2014-06-12 08:30:23,"Allow #fragment links in the `<http://somwhere.com>` link syntax, e.g. `<#Section4>`.
",autopulated,
434,2014-06-12 03:41:38,"How about allowing `<b>` and `<i>` tags in markdown.

This can use the same notation defined in markdown, just outputting different tags.

<S_CODE_TOKEN>

Not everything has be semantic, some stuff just have to be highlighted.
",NetoBuenrostro,
434,2014-06-30 11:26:49,"Why would this configuration be preferred?
",roydukkey,
434,2014-08-11 01:13:01,"The `<b>` and `<i>` tags denote styles, rather than how something should be understood. Markdown (and of course HTML) are not about styles. That's what CSS is for. Markdown/HTML describe ideas that can be represented in many different ways, including:
- reading by a screen reader, which would convert `<strong>`/`<em>`  into alterations in the tone of the voice
- displaying on a full web browser, which would render `<strong>`/`<em>` tags according to the stylesheet
- displaying on a limited web browser (like one running in a terminal), which may render `<strong>`/`<em>` with underlines, emboldening, double underlines, colors, or whatever escape codes are supported by the terminal.

You could argue that `<b>` and `<i>` should be used to denote places where superfluous styles are meant to be added (as the result of a styleguide or formatting constraint), as [this article](http://stellify.net/html5-b-and-i-tags-are-going-to-be-useful-read-semantic-again/) does. However, if that is the case then `<b>` and `<i>` shouldn't be so syntactically similar to `<strong>` and `<em>` since they convey very different concepts. Also, I would argue that they shouldn't even be used frequently enough to be given a place in the Markdown syntax.

Anyway, :-1: from me.
",slang800,
433,2014-06-07 14:55:49,"<S_CODE_TOKEN>

Does anyone have an idea as to why this is happening? 
",MaazAli,2014-06-07 15:32:42
433,2014-06-07 15:32:41,"That's impossible to debug from that error. `Markdown.Editor.js` isn't part of marked, and there is no `Markdown` object created by marked.
",scottgonzalez,2014-06-07 15:32:42
432,2014-06-05 06:19:56,"Now the logic of generating the id of h tags is `raw.toLowerCase().replace(/[^\w]+/g, '-')`.

By using this method, if the header includes other none-English words, the id just is '-'. 

Then if we need the id to be used as anchors, this won't work.

Now I am using [marked-toc](https://github.com/jonschlinkert/marked-toc) to generate index of the headers, it uses [uslug](https://github.com/jeremys/uslug) to generate the anchors, the logic is `slugify(raw.toLowerCase(), {allowedChars: '-'})`.

I think that is a good solution. if you support this modification, I can do it and create a pull request. Thanks
",whzhyh,
432,2014-07-16 17:06:41,"There's no perfect way to slugify any text. I think the best course of action is to define our own slugify function (hopefully based on `uslag`, since it looks pretty good) and use it to generate ids both in marked and in marked-toc.
In marked, this is very easy since you can override the renderer function for headings.
marked-toc lacks this capability. In fact, I think I'm going to post a pull request to allow this.
",Feder1co5oave,
431,2014-06-01 13:37:30,"I've added the footnotes management to marked with the syntax in the [MultiMarkdown project](https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes). I'm the CTO of a leading italian publisher and I think footnotes could be very useful for the [gitbook](https://www.gitbook.io/) project.
",paolocasarini,
431,2014-08-11 01:18:16,"@paolocasarini Hey, I'm one of the two authors of `gitbook`.

We forked `marked` as `kramed` (https://github.com/GitbookIO/kramed), the idea being to move towards `kramdown` support and also be able to move forward without having to wait on @chjj to merge PRs on `marked` (he's done awesome work up till now with, it just seems like he's busy with other more important things these days).

Do you want to submit your PR to `kramed` (you'll need to make a few small modifications) and I'll happily merge it.

Thanks !
",AaronO,
431,2014-09-16 05:50:06,"@paolocasarini Footnotes seem to work, but they're rendered inside a paragraph tag despite this code that should render them inside a blockquote: 

https://github.com/paolocasarini/marked/blob/d833046f0258710413591ef4bee3181caddbaf21/lib/marked.js#L891-L897

Can you help debug? I'd like to get that `<blockquote>` tag rather than a `<p>` from the `Renderer.prototype.footnote` definition. 
",alanguir,
431,2014-09-16 06:37:14,"Yes, I'll check it.

Paolo
Il 16/set/2014 07:50 ""Alan Languirand"" notifications@github.com ha
scritto:

> @paolocasarini https://github.com/paolocasarini Footnotes seems to
> work, but they're rendered inside a paragraph tag despite this code that
> should render them inside a blockquote:
> 
> https://github.com/paolocasarini/marked/blob/d833046f0258710413591ef4bee3181caddbaf21/lib/marked.js#L891-L897
> 
> Can you help debug? I'd like to get that
> 
> tag rather than a
> 
> from the Renderer.prototype.footnote definition.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/pull/431#issuecomment-55698570.
",paolocasarini,
431,2014-10-01 21:52:15,"Yes you could use a simple <p> instead of a <blockquote> just replacing it
in the code you highlighted. To me, the important thing is to allow
specific representation for footnotes. For example, instead a blockquote we
can use a specific class:
<p class=""footnote"">...
or even better
<div class=""footnote"">...

I used the blockquote tag because there is no use of class attributes in
the html that is produced, just to empathize the different the different
role between normal text and footnotes.

I also know that on kramed project my pull request has been ported (as is),
but I know hoe it is used:
GitbookIO/kramed@e5604a6
https://github.com/GitbookIO/kramed/commit/e5604a6d5c48433afaebc4d9886ecbf07550c6c5

Sorry, but I'm sure to have well understood your questione so I ask you if
I have answered to your question...

Best,
  Paolo.

2014-09-16 7:50 GMT+02:00 Alan Languirand notifications@github.com:

> @paolocasarini https://github.com/paolocasarini Footnotes seems to
> work, but they're rendered inside a paragraph tag despite this code that
> should render them inside a blockquote:
> 
> https://github.com/paolocasarini/marked/blob/d833046f0258710413591ef4bee3181caddbaf21/lib/marked.js#L891-L897
> 
> Can you help debug? I'd like to get that
> 
> tag rather than a
> 
> from the Renderer.prototype.footnote definition.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/pull/431#issuecomment-55698570.

## 

Paolo Casarini
Software consultant
P.IVA 02465691208
Direct Tel: +39-339-3463882
",paolocasarini,
431,2015-07-31 22:37:08,"Hi @paolocasarini thank you for this, it helped immensely. Are you able to modify it to include inline footnotes?

<S_CODE_TOKEN>
",davidmerfield,
430,2014-05-30 17:48:50,"I created and pushed a [NuGet package] for the library to make it easier for .NET people to consume.

If you don't want to maintain it, that's fine. I can check in here and update the package when a new version has been released :smile:
",khellang,2015-01-04 18:04:25
429,2014-05-28 04:00:16,"I prefer the table format of multimarkdown, which is very powerful to present information.  Do we have any plan to support multimarkdown? 
",ha0ran,
428,2014-05-27 15:16:23,"[Huboard](https://huboard.com/) (among others) generates multiline HTML comments which were not being parsed by marked.js previous. This fixes that.

Regex from:
http://php.net/manual/en/function.strip-tags.php#68757
",BigBlueHat,2014-05-27 15:59:47
428,2014-05-27 15:59:47,"Needs tests....seems to be failing in some of my work... Will keep thinking and will resubmit if/when I get it sorted.
",BigBlueHat,2014-05-27 15:59:47
427,2014-05-26 06:24:07,"when I try to marked a string like it:

<S_CODE_TOKEN>

and the result show that 

<S_CODE_TOKEN>

but it isn't what I want.what could I do?
",weekeight,2014-05-28 16:15:08
427,2014-05-28 16:15:08,"Duplicate of #269.
",scottgonzalez,2014-05-28 16:15:08
426,2014-05-25 18:31:18,"Same information was repeated twice. Remove one of them.
",cirosantilli,
425,2014-05-22 04:17:29,"@chjj I search the issues in marked,and found the same quetion like #379 #383 etc
Is that true we can't add new lexer rules and do something we want using marked?But I think it is very important.
I wanna write something like {{{test.html}}} in markdown file,and do something especial about these pattern,is there any way to do this?
I don't know whether am I misunderstanding the issues I mentioned before.If I am right,can marked support this?thanks a lot!
",weekeight,
425,2014-05-23 20:54:17,"I would like to do this as well.
Another use case is to find all ""at"" symbols and link them to the user name like GitHub does.

Example Input:

<S_CODE_TOKEN>

Example output:

<S_CODE_TOKEN>

Adding the ability for the dev to customize these rules will make the marked plugin very powerful.
",styfle,
425,2014-05-26 03:57:34,"@styfle Yeah!It's very important!
",weekeight,
425,2014-05-28 17:12:52,"@xingqiba0418 @styfle you can make it in this way https://github.com/chjj/marked#overriding-renderer-methods
",7c00,
425,2014-05-28 17:33:24,"A rough example:

<S_CODE_TOKEN>
",7c00,
425,2014-05-29 01:33:41,"@t09def Thanks! I didn't think to override `paragraph` but that makes sense because we don't want to match `@name` if it is in a code block, only in the paragraph block.

It still seems odd to me that you have to use the prototype to get the renderer to work properly.
",styfle,
425,2014-05-29 02:48:11,"the original `paragraph` function of the prototype is (see https://github.com/chjj/marked/blob/master/lib/marked.js#L814)

<S_CODE_TOKEN>

so you can just return `'<p>' + text + '</p>'` in the end of `rndr.paragraph`.

since i often code in java, i am accustomed to write `super()` or ...... apply the prototype function in javascript :smile: 
",7c00,
425,2014-05-29 06:02:17,"Can i add some class to paragraph, if it contains only one image? It's need to styling images in 100% width on [my project](http://ely.by/erickskrauch).
",erickskrauch,
425,2014-05-29 16:22:54,"I still think it would be sensible to have access to the rule blocks for those instance where you want to take precedence on the current parser. For instance, creating new block types.
",nicbou,
425,2014-08-05 19:16:02,"+1
",felixsanz,
425,2014-10-21 13:01:59,"+1
",elennaro,
425,2015-02-03 20:04:34,"+1
",prototypic,
425,2015-08-24 17:00:14,"+1
",the0neWhoKnocks,
425,2015-10-27 22:04:20,"+1
",dr-dimitru,
424,2014-05-20 11:07:55,"Some of the marked tests are failing. This makes it difficult to know whether changes I'm introducing on my branch are due to problems with my code, or problems on the master branch. This PR allows certain tests to be marked as disabled by renaming the file to `.disabled.text` instead of `.text`.

Currently the `def_blocks` test is failing, so I've disabled it.
",suprememoocow,
423,2014-05-20 11:04:46,"The reporting format for tests makes it pretty difficult to figure out what's gone wrong in the test failure.

This PR added colour-coded diffs to give you a much better idea of what the difference between the marked output and the original html is.
",suprememoocow,
422,2014-05-17 10:32:56,"I wonder if it's possible to not remove Markdown characters (#, _, *, etc.) from the output but instead wrap them in a tag, e.g.:

<S_CODE_TOKEN>

Now I know that the renderer methods can by overwritten, but these methods don't have access to the removed characters. Is there any way to achieve this _without editing the core files_?
",holmar,2014-06-14 19:01:51
422,2014-06-14 18:49:17,"It's possible to do this with CSS, but you need to add rules for each. I would personally do it this way, since the extra characters are presentational, unless you absolutely need the HTML.

<S_CODE_TOKEN>

... and so on.
",jas,2014-06-14 19:01:51
422,2014-06-14 19:01:51,"A custom renderer is the right way to do this if you want the actual characters in the output.
",scottgonzalez,2014-06-14 19:01:51
422,2014-06-23 08:35:25,"Renderer methods don't have access to the characters that were used to create an item. So for list items, for example, there is no way of distinguishing between a list item inside a `<ol>` and one inside a `<ul>`. 

CSS would be an option, but I do need the actual HTML. Seems like there is no way around editing the core ...
",holmar,2014-06-14 19:01:51
421,2014-05-14 11:35:13,"Hello!
Error in parsing: 
Use case: 
http://yadi.sk/d/yp7YcdLWQBsmZ
It turns into this html:
http://yadi.sk/d/SsFL4aXLQBtAw

The question is: how is it possible to fix it, is it possible to ignore within markdown
",tavriaforever,2014-05-14 12:24:21
421,2014-05-14 12:24:21,"Use four backticks for the outer instance.
",scottgonzalez,2014-05-14 12:24:21
421,2014-05-14 13:35:33,"Thank you very much!
",tavriaforever,2014-05-14 12:24:21
420,2014-05-13 21:10:05,"I would like to disable the hash headers.

<S_CODE_TOKEN>

Is this possible to turn off this feature using the current API or does it requiring modifying the source?
",styfle,
420,2014-05-15 23:52:50,"If you just need to hide them, replace the heading renderer with an empty function.
If you want to keep the hashes in the final output, you can modify the source, simply replacing the regex for headings with `noop`.
",Feder1co5oave,
420,2014-05-23 22:59:29,"@Feder1co5oave I was able to disable headers with the following:

<S_CODE_TOKEN>

But like you said, the hash is removed. Modifying the source is not desirable.
Is it possible to override the lexer/parser so that hash is not recognized as a header?
",styfle,
420,2014-05-29 23:30:45,":+1: for this. I've seen it mentioned in other issues as well, like #21 and maybe #413.

Is there a way to set the `noop` without modifying the source?
",khellang,
420,2014-05-31 12:04:48,"I think I found a way. You've got to play a bit with a Lexer object:

<S_CODE_TOKEN>

You create a lexer, disable the `heading` regex, lex the source, and then parse the tokens with the default parser. In the end, you get a plain paragraph with the text, including the hash.
",Feder1co5oave,
420,2014-06-05 02:49:43,"@Feder1co5oave This works very well! Much better than my solution of creating a regex that would never match anything.

<S_CODE_TOKEN>

Yours will probably perform better because it is effectively a noop.
Thanks!
",styfle,
420,2014-12-21 17:50:27,"I would love the option to turn this off with a configuration option like Kramdown has.
",luketeaford,
420,2015-11-13 22:59:09,"was looking to accomplish the same thing. thanks @Feder1co5oave for a solution. It'd be nice if we could disable each of the rules in the future.
",suchipi,
420,2017-02-02 13:20:33,@Feder1co5oave but this only applies to block rules not to inline rules?,herrmannplatz,
419,2014-05-13 10:59:21,"Do you have plan to add the support of task lists from github flavored markdown?
https://github.com/blog/1375%0A-task-lists-in-gfm-issues-pulls-comments
",romanesko,2014-05-13 11:58:33
419,2014-05-13 11:58:33,"Duplicate of #107.
",scottgonzalez,2014-05-13 11:58:33
418,2014-05-12 16:20:30,"This is one of the possible solutions. Any thoughts?

<!-- Reviewable:start -->

[<img src=""https://reviewable.io/review_button.png"" height=40 alt=""Review on Reviewable""/>](https://reviewable.io/reviews/chjj/marked/418)

<!-- Reviewable:end -->
",meeDamian,
418,2014-06-13 20:01:39,":+1: 
",lifeisfoo,
418,2014-06-14 07:55:47,"I hope this will be merged soon. 
E.g. without it isn't possible to add line numbers with prism http://prismjs.com/plugins/line-numbers/
",lifeisfoo,
418,2014-06-14 15:52:35,"@lifeisfoo Until then you can temporarily add this dependency to your `package.json` instead:

<S_CODE_TOKEN>

remember to `npm install` afterwards.
",meeDamian,
418,2014-07-18 15:42:05,":+1: This helped me make sure the styles are correct when using marked and highlightjs.
",hemp,
418,2014-07-20 14:37:52,"Thanks for the feature :+1: This is exactly what I needed.

Though I think it would be nice to also support an array of string method in order to permit several classes definition.
",aymericbeaumet,
418,2014-07-20 15:21:31,"Since simply passing `classesArray.join(' ')` would work great, I'm not sure if additional check in a library is necessary here.

If more people will be pro-Array, though, I can edit my PR to include it.
",meeDamian,
418,2014-07-20 15:49:59,"It could indeed be done as you said, my proposal was just for convenience.
",aymericbeaumet,
418,2014-09-30 09:57:39,"This is what I needed!
But I could actually do this with following code just as a workaround.
I know this is not a nice way, so I hope this pull request will be merged soon!

<S_CODE_TOKEN>
",chikathreesix,
418,2014-09-30 12:59:11,"@chikathreesix I actually ended up with the same solution :+1: Far more flexible
",aymericbeaumet,
418,2014-09-30 15:26:02,"Cool :+1: 
",chikathreesix,
418,2014-10-14 17:46:13,"+1
",nickcmaynard,
418,2014-11-12 21:28:28,"+1 for sure.
",blairmorris,
418,2014-12-07 14:57:16,"I set `langPrefix:'hljs '` in `marked.setOptions` to work around
",codeboyim,
418,2015-01-12 14:18:35,"Updated my repo to the latest codebase. Still can't get why it can't be merged.
",meeDamian,
418,2015-06-16 15:51:04,"Bump. @chjj?
",xdumaine,
418,2015-07-03 20:18:45,"Please merge!
",stoffeastrom,
418,2016-05-04 10:11:53,"Please merge!
",Huxpro,
418,2016-06-11 05:00:25,"Please merge!
",akuma,
418,2016-10-19 13:35:30,"Please :)
",tzi,
418,2016-10-24 14:46:16,"it could help a lot of people... instead, we use workaround ..
",sovanna,
418,2017-01-30 23:25:17,@chjj Please merge this.,wells,
418,2017-02-26 04:12:21,@chjj please merge ;),ee7klt,
417,2014-05-10 02:53:37,"<S_CODE_TOKEN>
",Rowno,
417,2014-05-10 03:38:38,"Can you share the code where the exception was thrown?

Since I’ve seen a similar stack trace very often, I’ll take a guess and say that the string you are passing to `marked` is either `null` or `undefined`.
",sbruchmann,
417,2014-05-10 03:49:21,"Yeah, I think it was, but it was with data returned from the GitHub API so I can't be sure.

Here's where the exception was thrown: https://github.com/Rowno/aftermath/blob/master/lib/events.js#L257
",Rowno,
417,2014-05-10 04:06:41,"The quickest workaround I can think of is to use a logical `OR` operator (`||`) and provide an empty string literal when the corresponding value is `null` /  `undefined`:

`data.content = markdown(event.payload.pull_request.body || '');`
",sbruchmann,
417,2014-05-10 04:15:27,"Yeah, I was going to do that. I just opened the issue because I was asked to. :wink: 
",Rowno,
417,2014-05-10 12:15:27,"I feel like this comes up often enough that marked should just convert `null`/`undefined` to an empty string.
",scottgonzalez,
417,2016-01-31 11:03:24,"Yup! Just encountered this issue in a lil tool that uses `marked`

<S_CODE_TOKEN>
",bnvk,
416,2014-05-08 20:26:53,"Given a line of the markdown file, I want to an option to add to the output a span with an id at more or less the same position as the line:

<S_CODE_TOKEN>

so that from my text editor I can set up bindings that do:

<S_CODE_TOKEN>

Same for browser preview as you type like Dillinger.io.

Would PRs for this be considered?
",cirosantilli,
416,2014-05-09 02:44:25,"Why wouldn't you just insert the line into the source yourself?
",scottgonzalez,
416,2014-05-09 07:25:31,"@scottgonzalez you mean insert `<span id=""CURRENT_POSITION"">` ? That would break the markdown in certain cases unless we have parser information.

E.g.: code block inside ordered list:

<S_CODE_TOKEN>

The only reasonable strategies I can see without parser information are:
1. insert at cursor
2. insert on beginning of previous line (column 1)

But:
1. breaks as it becomes literal `&lt;` in the output
2. breaks because it generates 2 ordered lists instead of one

With parser information, we could reach the ideal output:

<S_CODE_TOKEN>

Do you see another insertion strategy without parser information that would work in this case?

Perhaps it is better if we also consider cursor column position in case someone does `a<br>b<br>c<br>...`
",cirosantilli,
416,2014-05-09 12:04:33,"This really seems out of scope for marked, but I'll wait for @chjj to chime in. #338 would make it easy for you to do on your own though.
",scottgonzalez,
416,2014-05-09 12:23:20,"Thanks for the link: if that is implemented it would be easy to implement this with a renderer (and the backward search as well which is seems to be the main focus of that thread).

In my case, the only reason I am looking into Marked it because it is Js based, and I want to do preview as you type on a Rails project (AJAX requests to the server would be too slow), and forward search is very important on preview as you type.

If there are many more people who use Marked for the same reason as me, it might make sense to take this feature in.
",cirosantilli,
416,2014-05-15 23:34:44,"edit: I see this has been partially implemented.
",Feder1co5oave,
415,2014-05-08 01:39:11,"without a new release bower doesn't know that there are newer versions available I don't believe.
",lifeiscontent,
415,2014-09-17 22:45:46,":+1: 
",ahmadnassri,
415,2014-10-10 21:27:59,":+1: :+1: 
",StevenClontz,
415,2014-10-22 08:20:30,"+1
",elennaro,
414,2014-05-06 13:50:23,"- makes it clear that it is possible to embed
- gives a copy paste for people to embed

Specially important for Node newbs like me who want want to add it to a browser =)
",cirosantilli,2014-09-19 14:16:13
414,2014-09-19 12:55:04,"Is the actual usage necessary to show sine the full API is already described? Is it not enough to simply state that marked works in browsers?
",scottgonzalez,2014-09-19 14:16:13
414,2014-09-19 12:55:31,"Closes #367.
",scottgonzalez,2014-09-19 14:16:13
414,2014-09-19 13:05:55,"The reason I came to marked is that it runs on a browser. So I felt like copy pasting an example and seeing it work.

The snippet also contains the (semi obvious) information that the file you need to source is `""lib/marked.js""`.

But I can understand if you think it's too obvious for the readme, those things are hard to decide upon.
",cirosantilli,2014-09-19 14:16:13
414,2014-09-19 13:26:07,"I'm fine including a small HTML sample if it's providing value. Go ahead and update the example.
",scottgonzalez,2014-09-19 14:16:13
414,2014-09-19 13:47:23,"Changed example to be a minimal valid and sane document (closing tags, etc.)
",cirosantilli,2014-09-19 14:16:13
414,2014-09-19 14:16:09,"Thanks. That looks good to me.
",scottgonzalez,2014-09-19 14:16:13
413,2014-05-06 11:14:38,"How to disable images/paragraph/list etc.. ?
",hey-red,2014-05-13 22:49:26
413,2014-05-06 18:32:03,"Do you mean that you only want marked to parse a subset of the markdown syntax?
",scottgonzalez,2014-05-13 22:49:26
413,2014-05-13 22:49:26,"Closing due to inactivity.
",scottgonzalez,2014-05-13 22:49:26
412,2014-05-05 19:45:54,"Benchmarks are now below the old `above` reference.

Remove it to avoid future problems in case sections move around again.
",cirosantilli,
411,2014-05-05 19:38:29,"- this is one of the first thing new users will want to know
- makes it clear that there is a CLI interface
- CLI section is much shorter than the full function documentation, and gets hidden by it if it comes afterwards
",cirosantilli,
410,2014-05-05 09:31:13,"In list items, when one writes:

<S_CODE_TOKEN>

it renders like this:
- hello:
  i am at newline
- This is a sentence.
  And another one.

it is difficult to imagine the newlines weren't really meant.
",kapouer,
410,2014-05-05 18:53:15,"In case you're not aware of it, you can get the behaviour you want with the [`breaks: true` option](https://github.com/chjj/marked#breaks).
",adam-p,
410,2014-05-05 19:12:40,"I knew about --breaks, but i tought it applied everywhere (not only in lists).
In lists there is something cute: the dot + indent is a good indicator the newline was really meant.
",kapouer,
409,2014-05-01 22:29:24,"Using the master branch and with a fresh npm install on debian sid and nodejs v0.10.26
I'm getting this failing error

<S_CODE_TOKEN>
",glassresistor,2014-05-01 22:54:26
409,2014-05-01 22:29:44,"Is this known?
",glassresistor,2014-05-01 22:54:26
409,2014-05-01 22:54:24,"This is a known issue. The test serves as a reminder. It is there for the day when we fix that issue (which I consider to be low priority).
",chjj,2014-05-01 22:54:26
409,2014-05-01 23:02:57,"Thanks I'm just adding features and its confusing cause i think i broke the
test

On Thu, May 1, 2014 at 3:54 PM, Christopher Jeffrey <
notifications@github.com> wrote:

> Closed #409 https://github.com/chjj/marked/issues/409.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/issues/409
> .

## 

Mikela
",glassresistor,2014-05-01 22:54:26
409,2014-05-01 23:03:22,"Maybe mark it known failing in test runner output

On Thu, May 1, 2014 at 4:02 PM, Mikela Clemmons glassresistor@gmail.comwrote:

> Thanks I'm just adding features and its confusing cause i think i broke
> the test
> 
> On Thu, May 1, 2014 at 3:54 PM, Christopher Jeffrey <
> notifications@github.com> wrote:
> 
> > Closed #409 https://github.com/chjj/marked/issues/409.
> > 
> > —
> > Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/issues/409
> > .
> 
> ## 
> 
> Mikela

## 

Mikela
",glassresistor,2014-05-01 22:54:26
409,2014-05-01 23:42:05,"The tests will now give an exit code of 0 even with this one failing test. It used to do this until we fixed the other two tests mentioned in this commit: 1c188ebb55ef512653e03b0a03e60d7209a3bc73
",chjj,2014-05-01 22:54:26
408,2014-05-01 16:42:29,"Running into a problem when parsing issues numbers for GFM.

<S_CODE_TOKEN>
",mps,2014-05-01 23:13:37
408,2014-05-01 17:10:38,"I don't think there is support for issues using #. This is a github only extension for the markdown.
The gfm support implemented has only non github specific related extensions.
",JCMais,2014-05-01 23:13:37
408,2014-05-01 23:13:36,"Correct. See #359 for a similar request.
",scottgonzalez,2014-05-01 23:13:37
407,2014-05-01 09:01:41,"Following on from #406, this has been updated to use a static regex.

I ran the bench tests for this PR and v0.3.2 (50000 iterations) and there doesn't seem to be any significant difference:

|  | v0.3.2 | This PR |
| --- | --- | --- |
| marked | 171160ms | 169728ms. |
| marked (gfm) | 186709ms | 188834ms. |
| marked (pedantic) | 161621ms | 161455ms. |
",mrpotes,
406,2014-04-30 13:51:30,"The lexer assumes an html block finishes at the next matching close tag, which is often not the case. Instead,  the corresponding close tag should be found.
",mrpotes,2014-04-30 15:13:00
406,2014-04-30 15:12:57,"Duplicate of #236, and already solved with 8f705aaf636e2121852add52710d738b8e6e2356, however, it was never merged due to performance reasons. If I can optimize it, I'll merge it.

This PR looks like it might have the potential to be faster. However, compiling a regex every time is going to be incredibly slow. I'll try to optimize my code a bit more soon.
",chjj,2014-04-30 15:13:00
406,2014-04-30 16:19:15,"Yep, I didn't much like compiling a regex every time, but took comfort from the table, blockquote and list blocks all doing so. I couldn't think of a good way to avoid it though.

I wonder if you could do it without having to compile the regex every time by matching the open/close tag at the start and then backtracking the `re.lastIndex` by the length of the next open/close tag to allow you to recapture the tag name, without having to return to the start each time?

Something like:

<S_CODE_TOKEN>
",mrpotes,2014-04-30 15:13:00
405,2014-04-29 20:56:14,"I've noticed that the lexer continues to add to intself when used repeatedly. Whats the best way to use a lexer without it keeping the same lexer. 

<S_CODE_TOKEN>
",glassresistor,2014-05-01 19:24:53
405,2014-04-30 00:13:36,"Create a new instance

<S_CODE_TOKEN>
",JCMais,2014-05-01 19:24:53
405,2014-05-01 19:19:45,"Yeah thanks i tried to do something like this and some weird errors saying that 
undefined doesn't have method lexer.lex

<S_CODE_TOKEN>
",glassresistor,2014-05-01 19:24:53
404,2014-04-29 09:21:45,"In order to install via bower, a new tag (e.g. 0.3.3) is needed.
",wzr1337,
404,2014-06-24 20:41:32,"+1

`git tag 0.3.3 && git push --tags` should solve this in one line and get this and other projects like `angular-marked` working out of the box with bower.
",StevenClontz,
403,2014-04-29 07:43:24,"Could you please help he to put a code block into an ordered list?
",szepeviktor,2014-05-01 22:17:25
403,2014-04-29 07:43:33,"# Installation

## build the deb package
1. install some basic packages

<S_CODE_TOKEN>
1. build package
   change to source directory

<S_CODE_TOKEN>

## install the deb package

<S_CODE_TOKEN>
",szepeviktor,2014-05-01 22:17:25
403,2014-04-29 07:43:58,"This does not compile correctly on marked.
As I see not even here on Github.... Both numbers are `1.`
",szepeviktor,2014-05-01 22:17:25
403,2014-05-01 22:07:44,"Next time, post your code! I managed to obtain the output you intended, both on github and marked

# Installation

## build the deb package
1. install some basic packages
   
   <S_CODE_TOKEN>
2. build package change to source directory
   
   <S_CODE_TOKEN>

## install the deb package

<S_CODE_TOKEN>

using this code (double-indenting to create a code block inside a list item):

<S_CODE_TOKEN>

or even this code (code fences):

<S_CODE_TOKEN>
",Feder1co5oave,2014-05-01 22:17:25
403,2014-05-01 22:17:25,"Thank you very much!!
",szepeviktor,2014-05-01 22:17:25
402,2014-04-28 17:12:05,,clakech,2014-04-28 17:17:11
401,2014-04-28 08:06:55,"Input:
`[Andrew Marshall](https://en.wikipedia.org/wiki/Andrew_Marshall_(Asia_journalist))’s`

Expected output:
`<a href=""https://en.wikipedia.org/wiki/Andrew_Marshall_(Asia_journalist)"">Andrew Marshall</a>’s`

Actual output:
`<a href=""https://en.wikipedia.org/wiki/Andrew_Marshall_(Asia_journalist"">Andrew Marshall</a>)’s`
",sbruchmann,2014-04-28 09:07:10
401,2014-04-28 09:07:10,"Duplicate of #366
",sbruchmann,2014-04-28 09:07:10
400,2014-04-27 15:12:37,"The following markdown text is not properly converted: 

<S_CODE_TOKEN>

This is the output. As you can see there is one more parenthesis:

The history of [Phil Fish](https://en.wikipedia.org/wiki/Phil_Fish_%28video_game_developer%29))
",dedalozzo,2014-04-28 00:08:09
400,2014-04-28 00:08:09,"#366
",scottgonzalez,2014-04-28 00:08:09
399,2014-04-26 22:50:22,"Let's say that I have a new element type:

<S_CODE_TOKEN>

That becomes

<S_CODE_TOKEN>

How to add it without modifying library files? Or it's not possible?
",JCMais,2016-04-11 18:12:43
399,2015-08-04 10:15:18,"Same question here, how to introduce a new markup element?
",activey,2016-04-11 18:12:43
398,2014-04-26 19:09:19,"automated processes need to find bower.json file instead of deprecated component.json
",wzr1337,2014-04-27 00:42:38
398,2014-04-28 08:52:55,"What? This file is for [component](https://github.com/component/component) and not for bower. You should have created a seperate `bower.json` file
",queckezz,2014-04-27 00:42:38
398,2014-04-28 09:10:06,"What I get for absent-mindedly merging. Reverted. Feel free to make a bower file.
",chjj,2014-04-27 00:42:38
398,2014-04-28 17:16:49,"@jonathanong component.json use to be the config file for bower project. So this component.json had something to do with bower. Now component.json are deprecated in bower.

@queckezz What? Your PR are welcome ;-)

@chjj @wzr1337 Here is a PR that should satisfy most of your users https://github.com/chjj/marked/pull/402

Thanks for this cool stuff! marked rocks!
",clakech,2014-04-27 00:42:38
397,2014-04-25 19:33:42,"I'm continuing my quest to make marked extentable at the Lexer/Parser level.  Besides being able to add rules we also need to be able to execute code in the Lexer to help it work.
",glassresistor,
396,2014-04-25 16:01:24,"I found that the emphasis parsing in marked breaks under a circumstance a customer has exercised.  Here is a minimal example of the exponential time increase in parse of the string 'a_b__c' repeating a variable amount of times.  At a certain point I cannot tell if the execution will halt (warning, the process executing this will hang).

<S_CODE_TOKEN>

Is this an unsupported scenario?  Any thoughts on if I am doing something wrong?
",byronanderson,2014-04-28 00:07:42
396,2014-04-27 22:48:23,"+1
",Feder1co5oave,2014-04-28 00:07:42
396,2014-04-28 00:07:42,"#387
",scottgonzalez,2014-04-28 00:07:42
395,2014-04-25 13:42:40,"Sometimes I want to write a fragment of markdown and just inject it into template. For example `[Email Example](mailto:mrexample@example.com)`. Marked seems to always wrap it in a `<p>` tag. Is there an existing way to suppress this behaviour? It makes sense if there is no new line character in the string - like this: `marked('[Email Example](mailto:mrexample@example.com)')`. I've tried different options (gfm, breaks) but they don't seem to affect this.
",stockholmux,
395,2014-04-27 22:41:27,"Just skip the block-lexing part:

<S_CODE_TOKEN>

e.g.:

<S_CODE_TOKEN>
",Feder1co5oave,
395,2016-06-06 02:14:52,"Excellent. IMHO it would be good to have that in the docs. Maybe it's not that common though.
",davidgilbertson,
394,2014-04-24 22:10:23,"Just a pair of code glitches, no bug fixes.
Cheers
",Feder1co5oave,
393,2014-04-24 21:22:04,"It appears the highlight.js styles expect an `hljs` class on the enclosing tag (`code`). It renders a `lang-js` class, but not the `hljs` class.

https://github.com/chjj/marked/blob/master/lib/marked.js#L773-L777
",martypdx,
393,2014-05-13 12:19:36,"See #418 for potential solution.
",scottgonzalez,
392,2014-04-23 21:42:58,"Rationale:
- SVG looks better on mobile devices with high pixel density
- SVG file size is smaller
",Mithgol,
391,2014-04-23 19:54:36,"The current method for testing really abstracts the ability to say add the ability to pass in more complex options.
Being able to run actual unittests would allow me to implement the ability to do things like test passing in new rules to the lexer and rendered.

I'm working on this here but don't want to make a bunch of changes that can't be merged back in.

https://github.com/glassresistor/marked/tree/feature/add_rules

the general idea is

<S_CODE_TOKEN>
",glassresistor,
391,2014-04-23 19:56:47,"I think this kind of testing can be done either but adding plain old nodeunit to the test runner and letting people added tests to either new or a tests.js file and adding that to the test/index.js run process
",glassresistor,
390,2014-04-23 19:17:07,"When i clone master nad run
node test --fix
and
node test

i get this result(grepped for clarity)

<S_CODE_TOKEN>
",glassresistor,2014-05-06 00:13:36
390,2014-04-23 19:19:04,"<S_CODE_TOKEN>
",glassresistor,2014-05-06 00:13:36
390,2014-05-06 00:13:36,"See #409.
",scottgonzalez,2014-05-06 00:13:36
389,2014-04-22 23:55:16,"Qv: https://gist.github.com/isaacs/11198343

Causing npm/npm-www#737
",isaacs,2014-04-26 12:36:58
389,2014-04-22 23:55:46,"Hm, looks like it only happens when there's also a comment at the END of the file.  Don't know what that's all about.
",isaacs,2014-04-26 12:36:58
389,2014-04-24 09:03:34,"@isaacs, this appears to be related to #381. I have the fix on a separate branch (da05668dddfb799e75696fa280687749ccbc8b50), but I'll probably merge it once I verify it doesn't hurt performance as much as I thought.
",chjj,2014-04-26 12:36:58
389,2014-04-26 12:36:56,"Fixed with 288a6478e229ceead86a5587782bc5d16885d0e5
",chjj,2014-04-26 12:36:58
388,2014-04-22 15:44:49,"Hi,

Is there any online demo of marked? I suppose the demo available here is the old version: http://daringfireball.net/projects/markdown/dingus

Is it normal behavior? The attacker can execute JavaScript code via JS URI.

<S_CODE_TOKEN>
",soaj1664,2014-04-22 15:49:05
388,2014-04-22 15:49:05,"No, this specific module doesn't have an online demo. The demo you linked to is only related in the sense that it also parses markdown.
",scottgonzalez,2014-04-22 15:49:05
388,2014-04-22 15:54:39,"I created an online Markdown Here demo, which is a superset of Marked functionality: http://markdown-here.com/livedemo.html

As for XSS protection: I don't think that's Marked's responsibility. (Although... I should probably add it to my demo.)
",adam-p,2014-04-22 15:49:05
388,2014-04-22 15:57:42,"I think if Marked will add support for XSS protection then it would be great .... 
",soaj1664,2014-04-22 15:49:05
388,2015-09-15 19:13:58,"Oh, yes, please consider XSS to be at least partially Marked's responsibility. For data that might go to different environments, such as the command line, we can't escape it just for HTML and then unescape it for other locations, so it needs to be safified last.

According to OWASP guidelines, it can be literally this simple: https://github.com/jamiesonbecker/safify.js/blob/master/safify.js#L20

As long as you're using ""simple"" tags (no attributes etc), it's easy (no regex needed, just replace). In other words, do something like safify first, and then revert only the safe tags -- i.e., `&lt;p&gt;` to &lt;p&gt;.

Which leads to a potential workaround: a user could safify their text before submitting to Marked, but that might break Marked and I'm not sure it would catch all of the potential flaws. I'd be interested in putting together a safify version just for marked or sending a pull request if desired..

BTW, nice work.
",jamiesonbecker,2014-04-22 15:49:05
387,2014-04-22 07:24:14,"regex  in Marked：^\b((?:|[\s\S])+?)\b|^_((?:__|[\s\S])+?)_(?!*)

the test text ：<em>Result <strong></em><em>_</em><em>_</strong>Calculate <strong></em><em>_</em><em>_</strong>TempFile <strong></em><em>_</em><em>_</strong>tmpForCompareFile TransFile <strong></em><em>_</em><em>_</strong>datFile <strong></em><em>_</em>__</strong>2</p>
",saighost,
387,2014-04-22 12:13:13,"Is your test text really malformed HTML? Can you please update your description to have backticks around the text so we can make sure we're looking at the same thing?
",scottgonzalez,
387,2014-04-22 12:28:06,"@scottgonzalez 

I know what @saighost said. 

try code below

<S_CODE_TOKEN>

and your program would hang.
",alsotang,
387,2014-04-22 12:31:34,"And my forum is hang because @saighost use this text in his post this afternoon.
",alsotang,
387,2014-04-22 12:43:28,"So the original text was completely wrong for reproducing this bug? Running that text through marked finishes in less than .1 seconds for me (and that includes spawning a new node process).

Based on @alsotang's sample, here's the reduced text that causes marked to hang:

<S_CODE_TOKEN>

It seems like the processing is growing exponentially as you add more ""sections"". Up to `d` is pretty much constant time (about .07 seconds for me), up to `e` is 10x slower, up to `f` hangs (it may finish, but I didn't wait that long).
",scottgonzalez,
387,2014-04-22 13:30:18,"It happens too in my laptop, `node` process eats 100% CPU and I have to kill via Activity:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Here's that `package.json`: https://github.com/cnodejs/nodeclub/blob/master/package.json#L26
",jiyinyiyong,
386,2014-04-18 10:46:34,"we use marked.js to convert markdown input，when input following characters：
""_Result
__________Calculate
__________TempFile
__________tmpForCompareFile TransFile
__________datFile
__________2""
，cause the browser to crash.

The reason is that the regular: em: /^\b_((?:__|[\s\S])+?)_\b|^*((?:**|[\s\S])+?)*(?!*)/,
",why520crazy,
386,2014-04-18 11:37:55,"+1
",hetz,
386,2014-04-18 12:08:03,"(*|_)(.*?)\1   is ok?
",hetz,
386,2015-06-29 10:03:19,"+1
",sashimizakana,
385,2014-04-18 01:07:54,"Can I also transform HTML to Markdown?
",Teddy95,2014-04-18 12:19:10
385,2014-04-18 12:19:10,"No, this module only parses markdown.
",scottgonzalez,2014-04-18 12:19:10
384,2014-04-17 06:27:05,"Hi

Some of my data is null - when I pass via knockout data-binding, marked does not handle src = null in Lexer.prototype.lex, therefore suggest something like
    if (src == null) {
            src = '';
        }
goes in before the body of the function.

Jeremy
",jmwnoble,
383,2014-04-10 18:27:45,"I'd like to add a flavored markdown to marked for use for personal use.
I see in the code here is where you setup the inline grammer
https://github.com/chjj/marked/blob/master/lib/marked.js#L448-L461

Is there a good way to add my regex and render function but dont like doing ugly patches is there a way to do this from setOptions or another prefered method?
",glassresistor,2014-04-10 18:49:47
383,2014-04-10 18:39:07,"I believe this is a duplicate of #379. Can you confirm that it is or clarify the question?
",scottgonzalez,2014-04-10 18:49:47
382,2014-04-09 12:51:20,"[Source maps](https://github.com/madskristensen/WebEssentials2013/issues/830) are very useful for [browser debugging](https://wiki.mozilla.org/DevTools/Features/SourceMap) and [editor enhancements](https://github.com/madskristensen/WebEssentials2013/issues/830) when implementing source-to-source trans-compilers.

Unfortunately, there is no markdown compiler out there which generates V3 source-maps, as CSS (LESS & SASS) and JavaScript (CoffeeScript & TypeScript) preprocessors do.

Please implement this feature in **marked**, so editors and browsers can take advantage of it.

Thanks in anticipation.
",am11,
382,2014-04-09 15:11:53,":+1: it would be helpful, for example, for creating an inline commenting engine (similar to the one at medium.com), where you could select some words and attach a comment to them. Imagine a spell-checker like thing, where people could select some words in your blog, edit them and send a PR to your blog's repo without leaving your blog! Without the source maps it is barely possible. I guess there could be a lot of other use cases for the source maps like that. 
",kizu,
382,2014-04-09 17:16:25,":+1: 
",allouis,
382,2015-11-15 22:12:44,"I leave this here hoping it'll be helpful sometime in the future.
Anyone wanting to implement this should better take a look at the [source map specification](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit) and  use a [source map generator library](https://github.com/mozilla/source-map).
",Feder1co5oave,
381,2014-04-07 08:09:27,"<S_CODE_TOKEN>

Fails to render as correct markdown. It's rendered as one complete `html` token
",3rd-Eden,2014-04-26 12:36:21
381,2014-04-07 14:05:27,"Correct according to markdown.pl:

<S_CODE_TOKEN>

Sundown does it differently:

<S_CODE_TOKEN>

I'll see if there's a convenient way to have both.
",chjj,2014-04-26 12:36:21
380,2014-03-31 19:06:30,"`Parser.parse` was calling `Parser` with `Parser(options, renderer)` but the constructor didn't handle it. So I just tweaked the constructor so that it now accepts the `renderer` argument.
",AaronO,
380,2014-03-31 20:34:38,"I think you are approaching this upside-down. The `Parser` constructor has the correct, documented way of accepting parameters. It's the static `Parser.parse` method that should be changed to confirmity.
",gima,
379,2014-03-29 05:14:59,"@chjj The README doesn't specify how to add a new rule. Here's what I've tried:

<S_CODE_TOKEN>

When my text input is `$$$`, the output is not `Three Dollars`. When I log `lexer.lex(text)` my input is identified as a `paragraph`, not `threeDollars`. How do I make my new rule work and how do I order which rules take precedence over others?

Thanks for your help.
",winduptoy,
379,2014-04-08 14:36:05,"any ideas?
There are temporary, to complement the renderer code

<S_CODE_TOKEN> javascript
var marked = require('marked'),
    renderer = new marked.Renderer();

renderer.code = function(code, lang) {
    if (lang == 'note') {
        return '<div class=""note"">' + code + '</div>';
    };

    return new marked.Renderer().code.apply(this, arguments);
}

var md = ""<S_CODE_TOKEN>`""
console.log(marked(md, { renderer: renderer }));
<S_CODE_TOKEN>

But this is a bad decision. In the readme something written about lexer, but it is not clear how to add your own.
",tavriaforever,
379,2014-04-10 18:44:56,"Yes it is a dublicate of this.  I suspect that two people asking this  question means there isn't a great way to do this.
",glassresistor,
378,2014-03-28 23:04:02,"Marked does an awesome thing where it lets you write markdown formatted strings inside HTML inside your markdown, so that you can for example make a `<table>` or `<figure>` and not have to resort to using `<strong>` or `<em>`. That is sweet.

Just ran into an issue though where `<pre>` tags aren't getting properly skipped for that inline formatting. Basically the [check for whether to skip a block](https://github.com/chjj/marked/blob/master/lib/marked.js#L362) of HTML only checks the parent element, instead of nested `<pre>` tags, so an example like this will still have inline formatting applied:

<S_CODE_TOKEN>

In this case, since the top-level tag is `<figure>` Marked is still applying the inline formatters to the entire block, even though all of the `<pre>` children shouldn't have them applied.
",ianstormtaylor,
378,2014-12-19 22:58:25,"Just ran into this one too. @ianstormtaylor have you found a workaround yet?  Doesn't seem like this one's being actively maintained anymore. 
",rymohr,
378,2014-12-19 23:10:34,"I run into this even with something as simple as

<S_CODE_TOKEN>

The image gets processed into an `<img>` tag in this case.
",rymohr,
378,2015-01-23 02:13:47,"If you can run javascript, you can set ""marked.setOptions({pedantic: false});"" to avoid marked breaking from the markdown spec and interpreting inside html blocks altogether.

Otherwise quick fix is to just use markdown (triple backticks, etc) inside the html blocks to set preformatted text or include \*, etc.

@rymohr I think the html blocks need to be surrounded by blank lines.
",lindyblackburn,
377,2014-03-27 10:14:07,"Marked won't handle possible error callback in highlight function. The following code demonstrates the problem.

<S_CODE_TOKEN> js
var marked = require('marked');

marked('<S_CODE_TOKEN>`', {
  highlight: function(code, lang, callback) {
    callback(new Error('ignored'));
  }
}, function(err, html) {
  console.log(err, html);
});
<S_CODE_TOKEN>

Which outputs the following in console:

<S_CODE_TOKEN>

instead of an `Error` at first argument.
",ashi009,2014-04-02 15:51:11
376,2014-03-26 15:41:53,"I am using Assemble that provides helpers for Markdown through marked in a Grunt project.
  So far, they (at the date of writing) provide handlebars-helpers along with marked 0.2.10 ...
  I then changed this old release for the 0.3.0 in order to overwrite `Renderer.prototype.code` et `Renderer.prototype.table` : 

<S_CODE_TOKEN>

On its side, Handlebars-helpers calls marked as follows : 

<S_CODE_TOKEN>
1. Notice the use of `myRenderer.xxx= marked.Renderer.prototype.xxx`
   without these lines I get a _TypeError: Object #<Object> has no method 'heading'_ for instance if I comment `myRenderer.header= marked.Renderer.prototype.heading;`
   I have seen a similar issue on that problem, but closed without explanation ?!
2. Running the `grunt assemble` 
   1. with 0.3.0 : everything's fine !
   2. with 0.3.1 : **Maximum call stack error**
   3. with 0.3.2 : **Maximum call stack error**

Any idea on both questions ?
",dgricci,2014-03-28 11:05:19
376,2014-03-26 16:07:56,"Can you provide a reduced test case outside of Assemble, just using a custom renderer? Also, I'm not sure why you're assigning so many properties to point to prototype methods when `myRenderer` is already inheriting all of those since it's an instance of `marked.Renderer`.
",scottgonzalez,2014-03-28 11:05:19
376,2014-03-28 11:05:19,"Here is a test that infirms the above problem :

<S_CODE_TOKEN> javascript
#!/usr/bin/env node

/**         
 * Modules      
 */                 
var cli= require('cli');

/**                             
 * Mimic handlebars-helpers/markdown
 */                             
var Markdown= function(marked, options) {
    this.marked= marked;
    this.options= options || {};
    return this;                
};                          

Markdown.prototype.convert= function(src) {
    this.marked.setOptions(this.options);
    return this.marked(src);
};                      

/**                     
 * Tests                    
 */                     
function runTests(options) {
    var marked= require(options.module);            // get marked

    cli.info(""Test n°1 : invoke marked directly"");
    marked.setOptions({renderer: options.renderer});// use custom renderer
    var html= marked(options.src);                  // convert
    if (options.verbose>1) {
        cli.debug(html);
    }   
    if (html !== options.expected) {
        throw ""Convert failed"";
    }       
    cli.info(""Test n°1 : OK"");

    cli.info(""Test n°2 : mimic Handlebars-Helpers"");
    var md= new Markdown(marked, {renderer: options.renderer});
    html= md.convert(options.src);
    if (options.verbose>1) {
        cli.debug(html);
    }
    if (html !== options.expected) {
        throw ""Convert failed"";
    }
    cli.info(""Test n°2 : OK"");
}

/**
 * main
 */
cli.setUsage(""Check marked custom Renderer.\n    ""+cli.app+"" [options]"");
cli.parse({
    'marked'  : [
        'm', 'marked version to use (e.g., marked@0.3.0, marked@0.3.1, marked@0.3.2', 'string',
        'marked@0.3.0'
    ],
    'md'      : [
        't', 'Markdown text to test',                                                 'string',
        '# Title\n\n'+
        '* [Link](https://github.com/chjj/marked)\n\n'+
        '<S_CODE_TOKEN>\n\n'+
        '|Test|\n'+
        '|:--:|\n'+
        '| xx |\n\n'
    ],
    'html'    : [
        'h', 'HTML result from converting MD text',                                   'string',
        '<h1 id=""title"">Title</h1>\n'+
        '<ul>\n'+
        '<li><a href=""https://github.com/chjj/marked"">Link</a></li>\n'+
        '</ul>\n'+
        '<pre><code class=""javascript"">\n'+
        'var%20marked%3D%20require%28%22marked%22%29%3B\n'+
        '</code></pre>\n'+
        '<table>\n'+
        '<thead>\n'+
        '<tr>\n'+
        '<th style=""text-align:center"">Test</th>\n'+
        '</tr>\n'+
        '</thead>\n'+
        '<tbody>\n'+
        '<tr>\n'+
        '<td style=""text-align:center"">xx</td>\n'+
        '</tr>\n'+
        '</tbody>\n'+
        '</table>\n'
    ],
    'verbose' : [
        'v', 'Verbose mode (0=none, 1=verbose, 2=very verbose)',                      'number',
        0
    ]
});

cli.main( function(args, opts) {
    var self= this;
    if (opts.verbose>=1) {
        self.info(""marked tested : ""+opts.marked);
    }
    try {
        // First : create a custom renderer
        var marked= require(opts.marked);
        if (typeof marked.setOptions !== 'function') {
            throw ""module ""+opts.marked+"" not found"";
        }
        if (opts.verbose>1) {
            self.debug(""module ""+opts.marked+"" found"");
        }
        var r= new marked.Renderer();
        r.code= function(code, lang, escaped, options) {
            if (opts.verbose>=1) {
                if (arguments.length==3) {
                    if (marked.defaults.xhtml === undefined) {
                        if (""marked@0.3.1"" === opts.marked) {
                            self.info(opts.marked+"" OK"");
                        } else {
                            self.error(opts.marked+ ""KO, expected marked@0.3.1"");
                        }
                    } else {
                        if (""marked@0.3.2"" === opts.marked) {
                            self.info(opts.marked+"" OK"");
                        } else {
                            self.error(opts.marked+ ""KO, expected marked@0.3.2"");
                        }
                    }
                } else {//==4
                    if (""marked@0.3.0"" === opts.marked) {
                        self.info(opts.marked+"" OK"");
                    } else {
                        self.error(opts.marked+ ""KO, expected marked@0.3.0"");
                    }
                }
            }
            options= options || this.options;//ensure compatibility with 0.3.0+
            if (opts.verbose>1) {
                self.debug("">> Overwritten marked renderer : code"");
            }
            return ""<pre><code class=\""javascript\"">\n""+(escaped? code : escape(code))+""\n</code></pre>\n"";
        };
        // Second : parse a MD string with this renderer and test
        runTests({
            'module'  : opts.marked,
            'renderer': r,
            'src'     : opts.md,
            'expected': opts.html,
            'verbose' : opts.verbose
        });
    } catch (_e_) {
        self.error(_e_);
    }
});
<S_CODE_TOKEN>

Tests :

<S_CODE_TOKEN>

So, I am digging into `Assemble/Handlebars` to find out where the problem is :( so far, the `Renderer` object only contains the code function nothing else ...)

_The issue can be closed from my view point !_

BTW, the following construct would be a great interest when designing once custom renderer/parser :

<S_CODE_TOKEN>

The test fails :

<S_CODE_TOKEN>

but, this is another story.
",dgricci,2014-03-28 11:05:19
375,2014-03-25 18:02:07,"I'm experiencing a subtle bug when using marked in conjunction with highlight.js. I am using your double-escaping workaround for code highlighting to great effect: [optional escape #6](https://github.com/chjj/marked/issues/6), but when I attempt to begin a markdown string with code, as opposed to the other semantic tags, I get an `Uncaught ReferenceError: highlight is not defined`. Here is the code that I am using:

<S_CODE_TOKEN>

As an example,  the following markdown will be rendered properly, and without incident:

<S_CODE_TOKEN>
# Some header
<S_CODE_TOKEN>
<S_CODE_TOKEN>

whereas this throws an error:

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

Any thoughts on what the problem might be here?
",wvandaal,
375,2014-03-26 17:42:40,"Change:

<S_CODE_TOKEN>

To:

<S_CODE_TOKEN>

Change:

<S_CODE_TOKEN>

To:

<S_CODE_TOKEN>

Change:

<S_CODE_TOKEN>

To:

<S_CODE_TOKEN>

All of this is unnecessary though. If you provide a highlight callback, this is done for you.
",chjj,
375,2014-03-26 17:48:33,"Your solution leaves me slightly confused: you mention that this is done by providing a highlight callback, however isn't that what this line of my code accomplishes?

<S_CODE_TOKEN>
",wvandaal,
375,2014-03-26 17:52:21,"Yep. All of the rest is unnecessary.
",chjj,
375,2014-03-26 17:53:18,"Ok, but then why is this still a problem?
",wvandaal,
375,2014-03-26 17:55:49,"My current initialization does the following: 
1. Sets up highlight callback
2. Rewrites the marked function to call the lexer and parser independently to prevent double-escaping of highlighted code.

the `highlight` option should already be defined by the time my new function is defined
",wvandaal,
375,2014-03-26 18:04:29,"Hmm, I think you may have discovered an issue. The non-async highlighting should already prevent double escaping, but it looks like the switch to the renderer broke that. Fixing.
",chjj,
375,2014-03-26 19:02:21,"Thanks! Works perfectly now
",wvandaal,
375,2014-03-26 19:22:20,"Hmm, then again, this shouldn't really affect anything unless the tokens are handled after the `code` method on the renderer is called. Are you sure you were getting double escaped code using just the highlight option before? I'll have to play around with this some more.
",chjj,
375,2014-03-27 18:58:56,"Yeah, initially I tried it with just the highlight callback defined, but I ended up with the code blocks being escaped after they had been highlighted. I switch over to the fix suggested in issue #6, which solved the double escaping but led to this subtle bug in the highlight callback. With the code changes you made yesterday, I was able to remove the workaround suggested in issue #6 and everything worked as expected.
",wvandaal,
374,2014-03-25 04:52:33,"More info here https://github.com/kriskowal/q/pull/391
",zaggino,2014-03-26 17:38:52
374,2014-03-25 13:25:11,"Another related PR here https://github.com/ForbesLindesay/umd/pull/15
",zaggino,2014-03-26 17:38:52
373,2014-03-24 21:51:08,"... AMD implementations (i.e. almond.js)

Fixes https://github.com/chjj/marked/issues/372
",mtritschler,
372,2014-03-24 21:47:13,"almond.js (https://github.com/jrburke/almond/) only loads modules that supply a specific name in `define(name, deps, factory)`. The current implementation just supplies a factory method, without a name or dependencies.
",mtritschler,
372,2014-03-24 21:54:36,"Oops, I thought this would just close the comment box...
",mtritschler,
372,2015-06-09 09:22:10,"It would be awesome to have that PR merged
",iloire,
371,2014-03-23 08:35:57,"This fixes https://github.com/atom/markdown-preview/issues/13

In GFM, if you open a fenced code block and never close it -- a code block is created that spans until the end of the file. I have to admit that it's arguable if this is a bug or a feature, but since that behavior in GFM is not likely to change soon and people seem to rely on it -- it makes sense to match it in marked.

Currently, marked creates a code block only if both an opening and a closing codefence is found. So, this PR 
- changes the `fences` regex so that it detects fenced code blocks even if no closing codefence is found
- adds tests to verify the new behavior
",izuzak,2015-08-02 18:19:54
371,2014-04-23 17:05:59,"I consider this behaviour as rather unintuitive. Why would you use an unclosed code fence? And why would you _rely_ on it?
",Feder1co5oave,2015-08-02 18:19:54
371,2014-04-23 17:06:43,"For live rendering as you type out a document.
",scottgonzalez,2015-08-02 18:19:54
371,2014-04-23 17:19:18,"Uhm, makes sense to me.
The fact is that markdown wasn't created for live-editing. Altering a parser to accommodate this could be a bit overcompensating. An alternative could be to implement code completion for the markdown editor, so that when you type
~~~&crarr;

you get

~~~
^
~~~

ps. I am actually getting some difficulties to type this in, because of the loose gfm behaviour about code fences -- intuitiveness is the key.
",Feder1co5oave,2015-08-02 18:19:54
371,2014-04-28 11:06:50,"Just curious, why stop at code fences? If I'm typing `**foo` why not bold the world `foo` and everything after it if it is unclosed, all in anticipation of it being closed eventually (for live editing)? This seems rather arbitrary. Can someone explain why code fences are treated specially while nothing else is?
",chjj,2015-08-02 18:19:54
371,2014-05-03 18:00:55,"Thanks for the feedback @chjj. As I mentioned in the pull request, I'm not looking to argue for or against the current behavior of fenced code blocks on GitHub, or the motivation for this behavior. However, I managed to convince myself that making this particular change in marked would be a Good Thing :tm:, so I'll try to convert you as well. :)

If we were designing Markdown today, and if GFM was a part of core Markdown -- I'd agree that the decision would be arbitrary (and I wouldn't be making this PR). However, Markdown has been around for a while, and GFM is just an extension.

Bolding is a part of core Markdown and users' expectations are based on the same behavior across multiple Markdown implementations. Implementing bolding in the way you ""suggested"" would be contrary to every other existing implementation, and would probably be surprising for users.

In contrast, fenced code blocks are available only in GFM, and users set their expectations mostly based on what they see on GitHub. On GitHub, fenced code blocks behave as suggested in this pull request. So, I'd argue that this isn't an arbitrary decision, but rather a decision that makes marked match how GFM already works and meet users' expectations. 

Adding a special `live_editing` mode option to marked (which would trigger a match-even-if-unclosed behavior for all Markdown and GFM features) would be an interesting idea, but also unrelated to the motivation for this change.
",izuzak,2015-08-02 18:19:54
370,2014-03-14 13:45:34,"Blockquotes using `>` are not rendered.

e.g.

<S_CODE_TOKEN>

Becomes `> hello world`
",myrtleTree33,2014-03-14 13:51:11
370,2014-06-23 16:34:17,"Why did you close this issue @myrtleTree33?  It seems that this is still a problem, no?
",jamesmortensen,2014-03-14 13:51:11
370,2014-09-01 16:26:20,"Not working for me either. I'm using marked 0.3.2. It renders just like @myrtleTree33 described.
",fegemo,2014-03-14 13:51:11
369,2014-03-14 13:31:32,"I am trying to write some coffeescript but `->` gets converted into the HTML symbols, in fenced code blocks.

Any way to disable this?
",myrtleTree33,2014-03-14 13:51:20
368,2014-03-13 22:09:06,"I'm working on a markdown editor live preview, buttons that kind of [thing](http://glassresistor.github.io/demo-markdown-editor/)

Its much easier for me to walk the lexer and add/remove from it.  Is there a way to generate markdown from a set of tokens.
",glassresistor,2014-03-13 22:16:46
368,2014-03-13 22:16:46,"`marked.lexer()` takes a string of markdown and returns tokens. `marked.parser()` takes a set of tokens and returns a string of HTML.
",scottgonzalez,2014-03-13 22:16:46
368,2014-03-13 22:19:10,"I'd like method that takes in the lexer and outputs markdown not the html.
",glassresistor,2014-03-13 22:16:46
368,2014-03-13 22:19:39,"So
markdown = marked.fromlexer(tokens)
",glassresistor,2014-03-13 22:16:46
368,2014-03-13 22:22:16,"I'm fairly certain marked only works in one direction. I doubt @chjj wants to bundle support for the other direction (even if only from tokens).
",scottgonzalez,2014-03-13 22:16:46
368,2014-03-13 22:28:34,"Damn well it would be very useful for people trying to make code editors since it lets people do stuff like special character cursor tracking.  I might try my hand at a dictionary of s expressions from tokens.

I am noticing the lexer only does block level tokens.  How do i get inline ones like urls and bolditalic?
",glassresistor,2014-03-13 22:16:46
368,2014-03-13 22:33:02,"@glassresistor, there are already at least 2 issues open for this (#361 is one of them). There's another one hanging around somewhere.
",chjj,2014-03-13 22:16:46
368,2014-03-13 22:35:25,"@glassresistor, the lexer only does block level tokens because dealing with inline tokens makes things **extremely** slow. Marked did this a long time ago and it was promptly dropped in favor of rendering it directly (using inline tokens nearly doubled the benchmark times).
",chjj,2014-03-13 22:16:46
368,2014-03-13 22:39:04,"Thanks for the explination can see how tokens -> markdown could be a pony.
Any examples of rendering tokens individually?
",glassresistor,2014-03-13 22:16:46
368,2014-03-13 22:41:07,"Also, to speak more on this topic. Writing a Renderer to render markdown would be better if you want to alter the tokens - this way you only have to deal with tokens in their abstract form as opposed to changing raw markdown. This is the kind of use-case the Renderer was added for.
",chjj,2014-03-13 22:16:46
368,2014-03-13 22:49:51,"Wll the thing is in the end i need markdown for storage and editing not html so i have to be able to convert the tokens back to markdown while editing.  Otherwise using the tokens doesn't really help me.
Seems like walking a dictionary like so would get the job done.

<S_CODE_TOKEN>
",glassresistor,2014-03-13 22:16:46
367,2014-03-13 16:59:26,"The documentation does not say anything about browser support. As such, I initially dismissed marked as an option for my project.

However, apparently it does have browser support:
- https://github.com/chjj/marked/issues/62
- https://github.com/chjj/marked/blob/master/lib/marked.js#L783-791

but this is useless unless this is advertised.

Additionally, minified versions of the library should be available for use in the browser.
",jameshfisher,
367,2014-03-18 14:44:10,"+1
",codeablehq,
367,2014-03-24 14:28:49,"Agreed. I only have this working because I found this issue.
",EndangeredMassa,
367,2014-03-30 18:53:44,"+1
",nickcolley,
367,2014-04-03 13:54:00,":+1: 
",Pym,
367,2014-04-05 11:35:31,":+1: 
",Starcounter-Jack,
367,2014-05-13 14:57:33,":+1: 
",imZack,
367,2014-05-21 17:32:14,"Ok, so if someone has it working, _can we make a wiki page_?
- https://github.com/chjj/marked/wiki/Browser-Support
",cptaffe,
366,2014-03-13 14:17:31,"In github, `[Ajax](http://en.wikipedia.org/wiki/Ajax_(programming))` will be correctly parsed: [Ajax](http://en.wikipedia.org/wiki/Ajax_%28programming%29), but marked will add unnecessary `)` 
",lufeihaidao,
366,2014-04-28 09:20:57,"Marked follows original mardown.pl behavior for this. Libupskirt/sundown also shares the same behavior.

If we're supposed to allow parentheses in urls, what happens when parentheses are incorrectly closed?

<S_CODE_TOKEN>

What should happen here? The only way to parse `()` is by keeping state and track of how many levels deep of nested parentheses you're in, but there are no rules for URLs. URLs might provide misnested parens, etc.

What about:

<S_CODE_TOKEN>

Should marked keep parsing the text after ""bar)"" since it hasn't seen a proper closing paren for the link syntax?

How about this:

<S_CODE_TOKEN>

Is marked even supposed to guess what is going on there by interpreting the parens in that url?

I feel like this change would only exist to accommodate wikipedia links, which can already either be encoded, or included as link references.

If someone can come up with a definite outline of what should happen in all these other cases, I'm all for it.
",chjj,
366,2014-04-28 14:01:41,"I got your point. Since you must have a line break, or a space after an url, or another url, or still you have reached the end of the document, you can simply consider the last parenthesis, like the parenthesis that closes the link.

<S_CODE_TOKEN>

In the above example, you should have the following link: `http://example.com/foo_(bar`. Using this approach every wikipedia link just works as is. You just consider the open and the close round brackets, ignoring all the others inside the link. I'm gonna post this bug in Hoedown too, Sundown is a dead project.
",dedalozzo,
366,2014-04-28 16:56:12,"I just saw this while reading the source code from hoedown, https://github.com/hoedown/hoedown/blob/master/src/autolink.c#L102

It's from the autolink feature, but somewhat related, isn't?
",JCMais,
366,2014-04-28 17:43:34,"I have just known that the bug was fixed in Hoedown long time ago. Yeah, I suppose you right. 
",dedalozzo,
366,2014-05-05 16:18:46,"> I got your point. Since you must have a line break, or a space after an url, or another url, or still you have reached the end of the document, you can simply consider the last parenthesis, like the parenthesis that closes the link.

That would break links at the end of a parenthetical, which is common enough to be concerning.
",scottgonzalez,
366,2014-05-15 06:31:12,"Perhaps you could also support using double quotes inside the parenthesis and take everything inside the quotes as the url:

<S_CODE_TOKEN>
",Ernest0x,
366,2014-05-15 12:19:37,"@chjj I think it's time to close this and just tell people to manually encode the URLs using `%29` instead of `)`.
",scottgonzalez,
366,2014-05-15 12:21:25,"Actually, you'll need to implement paren matching logic for GFM. It looks like GitHub always requires paired parens inside a URL.
",scottgonzalez,
366,2014-05-15 13:02:08,"@scottgonzalez, I've told people that before. It doesn't seem very effective. This is probably the second issue on this. GFM does do it, and I think it's unintelligent, but I'll try it and see how it goes. Maybe it won't hurt performance much and I'll be okay with it despite disagreeing with it philosophically.
",chjj,
366,2014-05-15 21:37:36,"You can't ask people to encode urls, because they simply copy and paste urls from the address bar of a browser. :-(

-Filippo

On May 15, 2014, at 2:19 PM, Scott González wrote:

> @chjj I think it's time to close this and just tell people to manually encode the URLs using %29 instead of ).
> 
> —
> Reply to this email directly or view it on GitHub.
",dedalozzo,
366,2016-02-29 12:23:58,"Encoding URLs is not an option :(
This is a show stopper for us, and I have the feeling this won't be fixed any time soon...
Guess it's time to switch library. What would be a good alternative?  
",sn3p,
366,2016-02-29 18:26:50,"I'm using [Hoedown](https://github.com/kjdev/php-ext-hoedown), a PHP extension to the Hoedown library.
",dedalozzo,
365,2014-03-12 16:00:41,":sheep: I have ""cloned"" **marked** and create my own parser for my new **Strictdown** language. Welcome to try it. :smile: 

https://github.com/jakwings/strictdown
",jakwings,2014-03-24 13:18:43
365,2014-03-24 12:28:41,"BTW, anyone can try to refactor marked.js according to my strictdown.js but I don't want to do that, because I don't know what holy Markdown **really is**. :confused: 

I found that marked.js was really built for speed, not for accuracy.
",jakwings,2014-03-24 13:18:43
365,2014-03-24 13:03:22,"@jakwings Is there some action or discussion you were hoping to have or did you file this issue just to let the community know that you created a new project?
",scottgonzalez,2014-03-24 13:18:43
365,2014-03-24 13:13:34,"@scottgonzalez Well, the source code of strictdown.js is very like marked.js', and better organized. So I think it is helpful for anyone who want to enhance marked or make his/her customed marked.js or the like.

I must admit I want to let the community know my project. If anyone is not happy to see such advertisement, please just close it for any reason. ;-) I didn't tend to say much here.
",jakwings,2014-03-24 13:18:43
365,2014-03-24 13:18:43,"I'll close this as there's no action for marked's maintainers to take.
",scottgonzalez,2014-03-24 13:18:43
364,2014-03-09 22:51:45,"I'm new here.   If this violates protocol, please instruct me on how FR's should be sumittted. .

One fuss I had with  every implemementation of MD I've used is that by default, it doesn't interpret MD inside of tags.  Most of the time this is what you want.  But with the DIV tag the default should be to interpret the code.  BODY and HTML are similar that way.

Some MD implementations have the construct <div markdown=""1""> to enable interpretation inside the tag.  This is clunky.

Some MD implementations ignore tags written in upper case.  So <DIV> will permit interpretation where <div> does not.  However these implementations surround the <DIV> with <p> tags. All modern browsers are ok with this, but it breaks validation.

Since this is a variance from standard markdown (whatever that means...) it should be some form of configuration variable, with default to be the standard behavior, or alternately a command line parameter.

DIVs are container tags with no inherent other action.  I write my webpages in MD.  One thing I can do with interpreted div tags is the following:

<S_CODE_TOKEN>

Which means I can have text flow around pictures, a block of caption text that is in an identifyably different font.  One change means a gain of a LOT of flexibility in terms of the output.
",sgbotsford,
363,2014-03-09 21:31:23,"Consider, say, a text like this:
`2 125 euro`
I've put a non-breaking space between `2` and `125` so that it would always end up on the same line.

Marked pre-parses the text and completely removes the original non-breaking characters that I've put there:

<S_CODE_TOKEN>

This is where the devil hides: `.replace(/\u00a0/g, ' ')`

Here is more on why invisible non-breaking space characters are cool: http://destroytoday.com/findings/fix-widows-with-non-breaking-spaces/
",arturi,
363,2014-03-12 23:02:01,"+1, if anything this should be an option, or configurable
",christopherscott,
363,2014-03-12 23:02:29,"Yes! I've recently lost a few hours of my life tracking this very same thing down.
",daleconboy,
363,2014-03-13 03:44:01,"@daleconboy, I'm sorry to hear that, but many people lost several hours of their lives trying to figure out why their spaces weren't getting processed correctly when text was passed in from the DOM (see #52 - cc @OscarGodson), which is why this was added in the first place. 

I'll consider adding an option, but I want to keep their removal the default since more people probably get bit by this ""feature"" of contenteditable elements than not.
",chjj,
363,2014-03-14 04:29:37,"Hey, thanks for the response. I definitely sympathize with anyone who's been bitten by this quirk in any way, however I would argue against the default being wholesale replacement of non-breaking spaces.

Reason being, it's not a bug with marked, but rather a browser behavior which shouldn't be the responsibility of marked to manage. Technically the responsibility should fall on the developer who's using the contenteditable elements to be aware of the quirk and to manage the white space handling, or conversion, on their end.

The W3C working draft specifically calls this out to authors working with contenteditable elements:

http://www.w3.org/TR/html51/editing.html#best-practices-for-in-page-editors

> Authors are encouraged to set the 'white-space' property on editing hosts and on markup that was originally created through these editing mechanisms to the value 'pre-wrap' …

It seems that with contenteditable regions expected to behave in this way, you would want to preserve their expected behavior by default to avoid confusion. This, in turn, would also avoid the confusion where devs are expecting their explicitly set non-breaking spaces to behave as expected.

And, since marked may also be used in a node environment where contenteditabe does not exist, this replacement behavior by default would be unexpected.

Bottom line, I appreciate you considering it as an option. How you decide to set the default behavior is of course up to you. Any option is definitely better than no option. I'll cast my vote for the default being no replacement. :)

Cheers!
",daleconboy,
363,2014-03-14 11:46:20,"@daleconboy's argument is pretty convincing. Are there other use cases for no-break spaces in markdown input? I would think a set of tests would help define the severity of the issue.
",drscannell,
363,2014-03-14 18:14:19,"@daleconboy I like your point about the browser, except, in @arturi's post he specifically points out that spaces are good to fix a browser bug haha :) Also, i wouldn't agree that it's a browser issue. Markdown's ""spec"" doesn't say which kind of spaces are and aren't allowed so IMO Marked, and any markdown parser, should assume all spaces (nbsp, unicode, etc) should be considered what they are: spaces. Your suggestion, unless im misunderstanding it, is wanted to specifically _ignore_ certain kinds of spaces. 
",OscarGodson,
363,2014-04-08 18:30:52,"I’m working on a Markdown-based presentation tool, and I’m using marked to generate HTML.

Having control over when and where text wraps is vital in a good presentation. Currently, the only way I can do that with marked is by [overriding the lexer with a custom one](https://github.com/scy/scylec/blob/055c78b/index.js#L76) that does the same things as the original one, except for the NBSP replacement. This is of course far from future-proof: In case the original lexer changes, I have to adapt my code.

Therefore I’m very much in favor of making this configurable. If you’re interested in a PR, let us know. And although I think that _not_ replacing the NBSPs is the “right” thing to do, I can understand that you don’t want to break existing code that relies on marked fixing the browser behavior. So, I don’t care what the default for this option is, but please introduce one.
",scy,
363,2015-06-17 15:39:51,"@scy suggestion is nice. Let me extend it with an example. It might be helpful for future readers...

<S_CODE_TOKEN>
",Lendar,
363,2016-02-15 02:46:42,"Is anyone aware of an option or a work around for this issue?

There should definitely be an option to allow non-breaking spaces to pass to the HTML.
",RichardForrester,
363,2016-02-15 02:50:29,"I’ve solved it by extending lex, as shown here: https://github.com/chjj/marked/issues/363#issuecomment-112853706.
",arturi,
362,2014-03-05 19:10:35,"Hello again :)

Only to announce that I made it - hell yea  :smile:  That with medias, without Fatdown and TextFormatter.
I don't know how practical it is, but I download marked.js and add simple function to it to support YouTube, Viddler, DailyMotion, Vimeo AND Autolinking for non-media sites. :smile:  For now are only that, but if someone want can add more with simple if-else's
### 02 May 2014: Working marked.js with Extras

Link to [latest commit](https://github.com/tunnckoCore/marked/commit/2572f6eaf6bc7c85dbe73e7ce3d184e2270d5ff2) of my marked.js
Latest [Gist](https://gist.github.com/tunnckoCore/9374172) doc files
Jsbin [example](http://jsbin.com/tugeb/66/edit?js,console) of regex url parser
",tunnckoCore,2014-11-20 10:09:23
362,2014-03-06 09:35:24,"Good ideas ! 
",tung-nguyen,2014-11-20 10:09:23
362,2014-03-15 00:06:54,"Ohh... First comment of given gist disappears.. :D 
Not ideas, [reallity](http://tunnckocore.github.io/blankr/markedjs/) :) . May be not so good, but i'm not so fimiliar with js.
I just develope this function and set it **on line 559** . I repeat, I don't know how practical it is to be there, but works perfect! :)

<S_CODE_TOKEN>

Works with huge variants of media links. :)

PS: Wrong line, sorry. Edited to 559 !!
",tunnckoCore,2014-11-20 10:09:23
362,2014-03-15 18:15:55,"@tunnckoCore i like project your, did you can share project :) with tutorial install, it's amazing!
",tung-nguyen,2014-11-20 10:09:23
362,2014-03-16 18:18:43,"What project? It's addon to marked.js :) Just add above code to main marked.js file **on line 559** and it works, nothing more :)
Link is only for demo :)

PS: its possible to add more regex expressions for more medias (Flickr, Gist, JSFiddle, etc.)
With updates https://github.com/tunnckoCore/blankr/marked :)
",tunnckoCore,2014-11-20 10:09:23
362,2014-03-16 20:26:27,"I extremely link your share demo ! Can you share me project :)

2014-03-17 1:18 GMT+07:00 tunnckoCore notifications@github.com:

> What project? It's addon to marked.js :) Just add above code to main
> marked.js file on line 590 and it works, nothing more :)
> Link is only for demo :)
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/issues/362#issuecomment-37765141
> .

## 

_Mr. Nguyen Dinh Tung_

tungnguyen@vsoft.vn    |  Phone: (04) 38.550.999   | Mobile. 0969.92.1080
|  Skype : tungvn92

_VSOFT Solution Co., Ltd_

_Trading office_ :  Trung Yen 1 Tower - Vu Pham Ham str. - Cau Giay dist.-
Ha Noi.
",tung-nguyen,2014-11-20 10:09:23
362,2014-03-16 21:17:09,"This works but I think it brakes the idea behind **markdown**. 

If html is needed, why not just disable the **sanitize** option; that way you can put any html like `<iframe>` etc.
",nbari,2014-11-20 10:09:23
362,2014-03-16 22:42:39,"@nbari, its like http auto linking.. nothing more. Why have to put all sucking html (or custom iframe/embed codes), when just can paste link and if it is from ""media"" (like video sites) to be generate automatically <video> tag.
It isn't breaks idea behind markdown, all is same. Only video media sites' links are convert to full video with html5 video tag - nothing more.

---

Sorry for english, but its night here :)
",tunnckoCore,2014-11-20 10:09:23
362,2014-07-08 06:51:26,"@jonschlinkert, have it in mind for your `remarked` ;] Not the best doc, but look at the given lines for more detail look or tweet me if needs something.
That was long time ago, soon i'll create separate module for media parser.

Also, it's good idea to see some of issues here.

---

Live demo is moved to http://tunnckocore.github.io/blankr/markedjs/, old links edited.
",tunnckoCore,2014-11-20 10:09:23
362,2014-09-16 16:42:48,"I have been thinking about this problem for some time and have posted my WIP thoughts to jgm/stmd#123
",howardroark,2014-11-20 10:09:23
362,2014-11-20 10:09:17,"closing.. we already have [jonschlinkert/remarkable](https://github.com/jonschlinkert/remarkable) and also with him and few other guys we planing [RegExps Org](https://github.com/regexps) - [more info for it](https://github.com/regexps/logo-and-discussion/issues/2)
",tunnckoCore,2014-11-20 10:09:23
362,2014-11-22 16:02:18,"Thanks for that link @tunnckoCore !

It looks like this library should help this concept nicely... https://github.com/rlidwka/remarkable-regexp
",howardroark,2014-11-20 10:09:23
362,2014-11-22 18:44:47,"@howardroark yea, it looks great! Thanks!
",tunnckoCore,2014-11-20 10:09:23
361,2014-03-05 19:06:50,"If we add a the original text that was lexed to each token coming out of the lexer we could write a trivial renderer for the tokens that rendered it back into the original text.

This would enable people to move chunks of markdown around in a file as tokens or to splice other markdown files into existing markdown files.
",Raynos,
361,2014-03-11 19:05:59,"This seems worthwhile to me as well. I solved this for myself by simply adding `md: cap[0]` to each top level token (I only needed top level).
",bdjnk,
360,2014-03-03 03:42:18,"`--` is rendered in a certain way on github.com and marked doesn't parse it.

Examples:
## 
## 
## 
",bootstraponline,
359,2014-03-02 06:04:39,"I would like to do like github has with `@person`. How do I extend marked to look for the `@person`? Thanks for all the help and awesome module.
",bvallelunga,
359,2014-03-02 06:05:13,"@ChrisWren do you have any suggestions?
",bvallelunga,
359,2014-04-16 17:50:17,"It's good idea, but what mention? For github users or twitter?
I try to implement it few months ago, but .. nope.

Mm.. According to github's implementation in this comment i see it depends on context, erm?

This looks good http://jakiestfu.github.io/Mention.js/ , but needs data to base on.
",tunnckoCore,
359,2014-04-16 18:34:26,"@bvallelunga I would use the renderer api in marked. It won't let you do custom tags, but you can customize how tags are rendered.
",ChrisWren,
359,2014-04-16 21:12:10,"I found some good idea at [Markdown-JS #L207](https://github.com/SimonWaldherr/micromarkdown.js/blob/master/micromarkdown.js#L207)
Hope it will be useful :+1: 
",tunnckoCore,
359,2014-05-03 21:44:13,"@ChrisWren how would one get around the issue of Marked not allowing custom tags?  Is there a way that Marked could be extended to have an API for custom tags?
",acao,
359,2014-10-22 08:58:03,"+
",elennaro,
359,2015-08-04 10:16:54,"+10000
",activey,
359,2015-08-04 10:28:10,"You could override all renderer methods. Then inside each, parse the mentions, then call the original renderer methods and return its result.
",adam-lynch,
359,2015-08-04 10:45:41,"@activey use @markdown-it or `jonschlinkert/remarkable` or `bevacqua/megamark` (is awesome!), `ForbesLindesay/supermarked` and etc

`marked` is almost dead. Markdown-it is upstream from half year or so. It is highly customizeable, high speed , and have plugins in npm https://www.npmjs.com/browse/keyword/markdown-it
",tunnckoCore,
359,2015-08-04 10:51:31,"Oh, thanks for the info :D
",activey,
358,2014-03-02 03:39:12,"FIxed the case where you have something like this:

<S_CODE_TOKEN>

with no trailing newline.
",andrew-d,2016-03-01 22:06:19
358,2014-04-23 17:41:29,"+1
",Feder1co5oave,2016-03-01 22:06:19
357,2014-03-01 23:45:44,"Currently, if the last cell of a table is empty, it will be dropped from the HTML:

<S_CODE_TOKEN>

This pull request does the following:
1. Add test for situation described above
2. Fix bug causing the the last cell to not be added during conversion to HTML.
",drscannell,
357,2014-03-04 13:14:58,"+1
",rhiokim,
357,2014-05-13 20:24:07,"+1, also reported in https://github.com/chjj/marked/issues/188
",prust,
357,2014-05-25 02:57:09,"+1
",utensil,
357,2016-08-24 12:30:10,":+1: 
",benelog,
357,2017-01-07 12:12:58,Is there any reason why this pull request has not been merged?,MaXFalstein,
356,2014-02-27 07:20:56,"### Steps to reproduce:

<S_CODE_TOKEN>
### Actual results:

<S_CODE_TOKEN>
### Expected results:

<S_CODE_TOKEN>

This works fine, but I don't control the input markdown content, so this isn't possible for my app (unless I have to preprocess the markdown):

<S_CODE_TOKEN>
",pdehaan,2014-03-10 07:25:18
356,2014-03-09 21:51:44,"Are you testing with latest code? I think this is the same issue as #56 and was fixed two weeks ago in bcf206e6d731108b893d9eff3fae06cdde41e405.
",adam-p,2014-03-10 07:25:18
356,2014-03-09 22:20:55,"I did a fresh npm install, but now you have me second guessing myself. I'll create a new project again and do npm install and confirm.
",pdehaan,2014-03-10 07:25:18
356,2014-03-09 22:33:11,"It looks like @chjj hasn't done a release to npm since he fixed it. So... you're not crazy... and it is fixed... but you can't have the fix.
",adam-p,2014-03-10 07:25:18
356,2014-03-10 01:23:54,"Current status:
![sad](http://replygif.net/i/701.gif)
",pdehaan,2014-03-10 07:25:18
355,2014-02-21 00:55:50,"#91 is still preventing us from using marked, we'd love to use marked, but can't until #91 is fixed
",balupton,2014-02-21 02:05:01
355,2014-02-21 02:05:44,"I didn't merge it because it wasn't ideal. Really just sort of a workaround. I'll merge this and thinking of something better in the meantime.
",chjj,2014-02-21 02:05:01
355,2014-02-21 02:07:25,"Thanks. Appreciate it.
",balupton,2014-02-21 02:05:01
354,2014-02-20 19:59:05,"HTML is allowed in markdown and marked, but marked@0.3.1 encodes the doctype.

<S_CODE_TOKEN>

I imagine this is not a common requirement, but markdown.pl (at least as implemented in BBEdit) passes the doctype un-encoded, as expected.
",isao,2016-12-02 17:20:42
354,2014-02-24 07:27:41,"Using markdown.pl is not a good argument in favor this feature, unless you want your doctype declaration wrapped in a paragraph element:

<S_CODE_TOKEN>

You're right about it being unencoded, but how exactly is it useful when it produces flawed markup like the above?

Here is discount:

<S_CODE_TOKEN>

I can't tell whether it's more or less nonsensical.

Sundown/upskirt's output is exactly the same as marked's:

<S_CODE_TOKEN>

Since almost no markdown engine implements this, what is the use case? How often do people pass full html documents to a markdown parser? If there is a real use case, we can consider implementing it.
",chjj,2016-12-02 17:20:42
354,2014-02-24 16:32:37,"Interesting, I was using an app (BBEdit) that used markdown.pl under the hood, so I didn't  observe the <p> wrapping. If that's the standard behavior then I can't imagine a use case. Just thought accepting doctype would be more correct

Feel free to close. 

Thanks for marked :)
",isao,2016-12-02 17:20:42
354,2014-04-05 21:16:55,"HTML comments (triple-dashed) seem to have the same issue (seen in atom editor's MD preview) - HTML comments would be nice to have - currently they are displayed in marked output.

![screen shot 2014-04-05 at 23 15 59](https://cloud.githubusercontent.com/assets/114892/2623792/86e6359a-bd07-11e3-9824-2e1e8a86477c.png)
",rocco,2016-12-02 17:20:42
354,2016-12-02 08:40:42,"If you want kept the doctype in your HTML when you parse an entire HTML page but you want transform others occurences you could use the following code

<S_CODE_TOKEN>

For example this: 

<S_CODE_TOKEN>

output this

<S_CODE_TOKEN>

which finally output this

<S_CODE_TOKEN>

=============

If you want support all DOCTYPE, you could also extract doctype before use `marked` to not parse doctype (it's more slow).

<S_CODE_TOKEN>
",Haeresis,2016-12-02 17:20:42
353,2014-02-20 17:20:36,"I want to add another type of rule, what all edits should I do 
Also I dont want to affect any old syntax.
It should be rendered as span
How do I create another type of codeblock `\(···\)`
It should be replaced by span and it should not be html encoded

I want to use mathjax along with marked
My regex which properly detects and returns the text

>    `\\\(((\\\\\)|(?!\\\))).)*\\\)`
> There can be `\\)` inbetween the codeblock
",meghprkh,2014-02-26 07:36:13
353,2014-09-24 02:10:31,"Sorry @meghprkh, did you find out how to add rules to lexer? Just add a new property to `rules` object?
",Timopheym,2014-02-26 07:36:13
352,2014-02-17 21:29:54,"I'm considering a pull request that would simplify the overriding of renderer methods. Presently, the `renderer` option is an all-or-nothing approach. Whatever is set as the renderer must implement the entire Renderer interface. So for the common use case where only a couple element renderers actually need customized, one must instantiate the default renderer and override the functions as needed.

I think a more streamlined API would allow the `renderer` option to accept a plain old object such that only the custom render functions need to be provided.

<S_CODE_TOKEN>

It would be a minor change, simply instantiating the renderer internally and merging in the custom options.renderer object.

Concerns?
",jasonkarns,
352,2014-03-17 13:41:31,"I think it's already easy enough to extend the default renderer, e.g.:

<S_CODE_TOKEN>

In my opinion, it's better to keep this explicit.
",pdubroy,
352,2014-03-17 13:48:57,"Easy enough if you want to add Yet Another Dependency for simple use. But aside from the underscore dep, inheriting from 3rd party objects/classes is a Bad Idea (in general). And in this particular case, there is nothing gained from the marked.Renderer object. It provides no value other than a bag of functions, which would more easily be provided as a plain object.
",jasonkarns,
352,2014-03-17 15:56:35,"Well, of course you don't need to pull in all of Underscore just to get `extend` :-) The point was more that there are already easy ways to use a custom renderer that delegates to the default renderer. The main downside I see to doing it implicitly is that you might get surprising behaviour if you omit or mistype a property. But that's just my two cents as a random user of marked :-) 

What about something like this?

<S_CODE_TOKEN>
",pdubroy,
352,2014-03-18 14:16:28,"> The main downside I see to doing it implicitly is that you might get surprising behaviour if you omit or mistype a property.

Doing an explicit merge or an implicit merge results in an identical object, so omitting/mistyping a property would have the same outcome in both implementations.
",jasonkarns,
352,2014-03-18 15:55:04,"> Doing an explicit merge or an implicit merge results in an identical object, so omitting/mistyping a property would have the same outcome in both implementations.

Yes, of course. It's simply a design decision as to whether that should be explicit or implicit.
",pdubroy,
351,2014-02-17 08:22:11,"Footnotes feature. It looks like MultiMarkdown Footnotes Syntax:

<S_CODE_TOKEN>
- http://daringfireball.net/2005/07/footnotes
- https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#wiki-footnotes
- http://six.pairlist.net/pipermail/markdown-discuss/2005-August/001442.html
- http://six.pairlist.net/pipermail/markdown-discuss/2005-August/001480.html

Related Issue: https://github.com/chjj/marked/issues/27

@chjj Have a review of this patch. I will add test cases soon.
",lepture,
351,2014-02-17 08:57:27,"**NOTE**: this feature is not fully implemented. There are still works to be done.

<S_CODE_TOKEN>

We need to hack the text value of footnote, just like a list item.
",lepture,
351,2014-02-17 13:09:54,"Awesome @lepture, I would love this to be finished and pulled in. I began writing this myself a couple of days ago (see also https://github.com/chjj/marked/issues/27#issuecomment-34661022) but couldn't wrap my head around some of the stuff and gave up the first attempt (JS noob here).
",prashaantt,
351,2014-02-18 13:01:52,"@prashaantt I am not sure that @chjj would agree with this feature. I'd like to implement the unfinished part when @chjj says yes.
",lepture,
351,2014-02-20 03:05:33,"This would be amazing @lepture and @chjj, I would love for this feature to be added as well. 
",contactjiayi,
351,2014-02-20 08:44:41,"@prashaantt @contactjiayi I've just created a python fork of markdown. And I am working on footnotes feature in this repo: https://github.com/lepture/mistune
",lepture,
351,2014-02-23 13:56:36,"Put up a branch and added a few fixes (footnotes weren't working for two different reasons). I still want to play around with it a bit more.

cc @lepture
",chjj,
351,2014-02-24 02:21:37,"@chjj There is still work to do with the footnotes rendering. For example, multiple lines of one footnote. We should unindent each line, and parse the footnote again.

Here is what I did in the Python fork https://github.com/lepture/mistune/blob/master/mistune.py#L691
",lepture,
351,2014-02-24 07:09:15,"@lepture, oh, this doesn't handle (unindented) multiparagraph footnotes? I had my own branch written that accomplished this in a really sloppy way, but when I saw your code I assumed you did it a little bit better. I'll push my other branch now.
",chjj,
351,2014-02-24 07:58:11,"@chjj I did it in my Python fork. Seems your solution is better, I'll merge it into mine.
",lepture,
351,2014-02-24 09:22:46,"@chjj Use `footnote_start` and `footnote_end` is a good idea. But I think my way is more elegant now. It looks like **parsing list item**.

https://github.com/lepture/mistune/commit/a1f925e3e3f5adbfc6117981ea6d03949b789638
",lepture,
351,2014-02-24 09:48:21,"I'm totally open to different methods. Like I said, I find my way sloppy. I'll take a look at this in a bit.
",chjj,
351,2014-02-24 17:28:42,"Here's the [showdown implementation of footnotes](https://github.com/lhagan/showdown/blob/showdown-extended/src/extensions/footnotes.js) if that helps. Quibbles about footnote class and a[rel=""footnote""] vs. a.footnoteRef aside, it's almost identical to discount's implementation.  

I would love to see this feature in Marked because I want access to the parse tree for other reasons.
",mattly,
351,2014-02-26 07:56:35,"@chjj I'll sort out it soon, and send you my patch. I've finished the Python fork, and it works well.
",lepture,
351,2014-03-03 14:08:12,":+1: 
",jonschlinkert,
351,2014-03-31 11:00:19,"Is this still being worked on or has it been rejected? I'd love to see this feature supported.
",hugovincent,
351,2014-04-01 01:45:44,"I'm relying on marked pretty heavily for some web apps in development so this will be something I will be actively creating in the next 24 hours. Stay tuned!
",lawsonry,
351,2014-04-02 10:20:17,"I've used `marked.js` of this PR as parser of [EpicEditor](https://github.com/OscarGodson/EpicEditor). This results `Invalid regular expression` error. Is it something wrong with that editor?
",nournia,
351,2014-04-23 16:25:35,"Hello @chjj, @lepture, do you guys have any update on this?
",prashaantt,
351,2014-04-28 10:02:25,"Hi @chjj, @lepture, any plans to merge this into `master`? I'm using the `feature-footnotes` branch successfully. 
",hugovincent,
351,2014-05-05 12:52:15,"@hugovincent I agree it works in the basic scenario, but not when the footnote text is itself written in Markdown — i.e. MD-formatted links and formatting in the footnote definition don't get parsed into HTML.
",prashaantt,
351,2014-05-31 11:28:59,"In case anybody's interested, I just [pushed an update](https://github.com/prashaantt/marked/commit/dc4a06b4c80e05f6a5b59771c80f4a94e9352689) to my clone of the `feature-footnotes` branch that sacrifices performance and breaks marked's linearity but does get indented multi-para footnotes working correctly with inline Markdown parsing. It basically works, but is still nowhere near the full functionality as given [here](http://rephrase.net/box/word/footnotes/syntax/).

I tried @chjj's `footnotes` branch that attempts to do this better, but ran into rendering issues. I would be delighted if it could be finished officially once @chjj can spare some time.
",prashaantt,
351,2015-02-27 10:15:44,"Not sure if this will help, but here are several implementations:

Support footnotes as implemented in [Multimarkdown](https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide), [Marked2](http://brettterpstra.com/2013/10/30/lazy-markdown-footnotes/), [PHP Markdown Extra](https://michelf.ca/projects/php-markdown/extra/#footnotes), and/or [Pandoc](http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown).
",jeffmcneill,
351,2015-05-21 14:19:47,"Does it look like this will be implemented?
",afischer,
351,2015-11-16 19:31:52,"Needs rebase. Fwiw, I'd consider multimarkdown(mmd) for their footnote support, but their node package isn't compiling for me. https://github.com/mnichols/node-mmd/issues/4

Hope to see footnotes added to marked soon!
",marr,
350,2014-02-16 08:15:18,"See cause

https://github.com/chjj/marked/commit/cd507dd55a9a3760ed5a5d03accd5310535b8658#commitcomment-5389202
",lukeapage,
349,2014-02-12 21:52:48,"Any chance of having a way to make heading-less tables?

|  |  |
| --- | --- |
| this is the best | we can do atm |

---

As far as a proposed solution, I'd say the best way would be to omit the heading row but keep the alignment definition row, like this:

<S_CODE_TOKEN>
",calvinjuarez,
349,2014-08-22 13:13:02,"Seconded. The proposed solution is also what pandoc will output if you use the markdown_github output.
",SystemParadox,
348,2014-02-10 16:38:30,"gfm only does newline-to-br conversaion in a paragraph context. This change is aped from gfm source code.
",midnightmonster,
348,2015-06-12 00:56:43,"@chjj Are there any concerns for not merging this issue?
This improves inlining HTML a lot.
",leesei,
347,2014-02-10 09:17:01,"As requested, I am reporting this.
![See image](https://f.cloud.github.com/assets/2556751/2123828/29701640-9234-11e3-88db-2227d270225c.png)
To reproduce, simply navigate the pages at http://miniblog.memba.com.
After a couple of pages, you should get the error and the markup does not update.
You can download the code from https://github.com/Memba/Memba-Blog.
",jlchereau,2014-02-10 09:58:33
347,2014-02-10 09:58:33,"Got confused by the console message. This is actually an highlight.js issue.
",jlchereau,2014-02-10 09:58:33
346,2014-02-07 11:27:30,"I did not understand why this 

<S_CODE_TOKEN>

leads to this

<S_CODE_TOKEN>

Whye ""paragraph""? why not ""html""?
",kerzol,
346,2014-02-07 11:42:03,"ah, ok, now i understood. This happens, because <a> is a svan-level tag not a block-level one.
",kerzol,
346,2014-02-07 12:41:38,"Anyway, it seems that parsing markdown within tags is a bad idea.
",kerzol,
345,2014-02-06 22:53:43,"Allows the renderer to automatically resolve references if they are not defined in the document. This is useful for wiki-type sites.
### Example

<S_CODE_TOKEN>
### Example Input

<S_CODE_TOKEN>
### Example Output

<S_CODE_TOKEN>
",ilsken,
344,2014-02-06 15:47:11,,jasonkarns,
344,2015-06-12 15:26:41,"ping
",jasonkarns,
344,2015-11-19 21:54:29,"ping
",jasonkarns,
343,2014-02-06 11:11:20,"I'm using _marked.js_ v.0.3.1 with default settings.
Seems it breaks with underscores in the middle of word if there is also emphasis block in the same paragraph.

For example, this:

<S_CODE_TOKEN>

becomes this

<S_CODE_TOKEN>

as expected.

But this:

<S_CODE_TOKEN>

becomes:
justa __few_underscores. And here is emphasis._

Output html:

<S_CODE_TOKEN>
",silentvick,
343,2014-09-22 11:35:31,"+1
",javoire,
343,2014-10-21 16:23:41,"+1
",tylercollier,
343,2015-02-08 05:23:38,"+1
",santhosh-tekuri,
343,2015-08-10 08:08:57,"+1
",suzanshakya,
342,2014-01-31 19:00:34,"According to [this NodeSec advisory](https://nodesecurity.io/advisories/marked_multiple_content_injection_vulnerabilities), a second release of Marked 0.3.0 was force-pushed to npm with critical security fixes.

Force-pushing a security release is irresponsible because it makes it difficult for users to determine whether they have the fixed version or the vulnerable version. It also prevents users who've specified a '0.3.x', '>=0.3', or similar version mask in their `package.json` from getting the fixed release, since the version number was not incremented.

Please push a 0.3.1 release to npm containing this security fix to ensure that it's installed by as many users as possible.
",rgrove,2014-01-31 23:08:35
342,2014-01-31 23:01:51,"No release was ever forced-pushed. I don't force publish to npm, ever, unless for something extremely minor like the README being changed. Check 0.3.0 yourself. None of the latest commits are present.

In any case, yes, I'll push a bumped version of marked.
",chjj,2014-01-31 23:08:35
342,2014-01-31 23:06:42,"What's weird is the fixes are present (at least the one I checked for code fences) in 0.3.0 (that I just pulled down) but I know that release was out before I told you about the vulns. Sorry I assumed it was force pushed. 
",evilpacket,2014-01-31 23:08:35
342,2014-01-31 23:08:33,"No worries. Fixed with 52e445f6ee41f151e247f9cf8add54786efae88e.
",chjj,2014-01-31 23:08:35
342,2014-01-31 23:14:56,"Entirely my fault. I messed up reading the diff this morning and thought that it was pushed. Thank you so much for pushing a point release!
",evilpacket,2014-01-31 23:08:35
341,2014-01-30 13:46:30,"github rendering of marked README.md and marked rendering of same file produce different results. 

Coming to conclusion that these are two different dialects of markdown.

Wish to be the same.... flavours hurt :)
",ljgww,2014-01-30 14:41:58
341,2014-01-30 14:02:45,"Please provide actual differences and make sure you haven't disabled the `gfm` option.
",scottgonzalez,2014-01-30 14:41:58
341,2014-01-30 14:25:18,"Pls accept my Apologize. It's my bad. 

I figured I was using compiled version of the app that worked with another markdown library. `marked` works like charm incl github markdown flavor.

Will have app ready soon. 
",ljgww,2014-01-30 14:41:58
341,2014-02-02 21:13:10,"happy to report your library working here https://github.com/ljgww/DesktopMarkdownReader
",ljgww,2014-01-30 14:41:58
340,2014-01-29 20:30:36,"<S_CODE_TOKEN>

Generates HTML that looks like:

![actual](https://f.cloud.github.com/assets/639216/2033968/235cecce-8924-11e3-8d3b-76e4187bf423.png)

Whereas it should look like:

![expected](https://f.cloud.github.com/assets/639216/2033974/2ae3cdf0-8924-11e3-9047-b788b0ca0208.png)
",xirzec,
340,2014-06-11 12:12:14,"+1 having this problem as well, any fixes for it yet?
",lukasoppermann,
339,2014-01-29 04:05:23,"is there any support for changing the size of an image. or do we have to drop back to html?
",SimonCropp,
339,2014-04-21 20:44:05,"+1

Something like this would be great:
`![](./pic/pic1_50.png =100x20)`
Or just 1-dimension then set other to auto:
`![](./pic/pic1s.png =250x)`
More info:
http://stackoverflow.com/questions/14675913/how-to-change-image-size-markdown
",rayshan,
339,2014-04-21 20:53:15,"I am using the **title** to set the size, maybe this can give an idea:

<S_CODE_TOKEN>

So you just can use:

<S_CODE_TOKEN>
",nbari,
339,2014-04-21 22:09:41,"considering this seems not too hard to implement on my own perhaps this should be documented somewhere and then close this issue?? 
",SimonCropp,
339,2014-04-21 23:17:50,"It is documented here: https://github.com/chjj/marked#overriding-renderer-methods
",nbari,
339,2014-04-21 23:28:02,"@nbari yep. but it would be nice to have a page with a list of ""useful renderer overrides""
",SimonCropp,
339,2014-04-22 15:41:12,"Thanks @nbari! +1 on ""useful renderer overrides"" in docs. This could be implemented as an option but there may be too many edge cases to cater to (setting just 1 dimension, icon fonts, etc.)
",rayshan,
339,2014-10-30 16:59:01,"+1 for the resize of the image!
",sun2rise,
339,2014-12-03 04:52:47,"+1
",nchicong,
339,2015-11-21 23:06:10,"+1
",timlevett,
339,2015-12-15 03:54:21,"+1
",eugeniop,
339,2015-12-30 19:48:31,"+1
",ponyesteves,
339,2016-01-16 17:16:44,"In my particular case, where I already had to modify the renderer to properly highlight a code block ([known issue](https://github.com/chjj/marked/pull/418)), I just added another method to do just this.

<S_CODE_TOKEN>

It takes advantage of the fact Marked parses images this way:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Do note that you can't flip the two:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

---

Although, most definitely +1 @SimonCropp on a ""useful renderer overrides"" list.

@chjj What do you think of both of these (my idea and the ""useful renderer overrides"" list)?
",isiahmeadows,
339,2016-03-03 16:40:16,"+1
",mustafakasap,
339,2016-03-03 16:43:07,"Direct HTML coding is not working in MAC VSCode also.

this is what I tried: 
<img src=""./imgs/1.5.i001.png"" alt=""Drawing"" style=""width: 200px;""/> 
",mustafakasap,
339,2016-03-27 18:02:38,"https://github.com/chjj/marked/pull/535
",vithar,
339,2016-04-15 04:50:52,"@isiahmeadows i thought i was going crazy! I know this is months old but your code used href for image! Thanks for the code either way. Works like a charm after you change href to src.
",uptownhr,
339,2016-04-15 18:45:23,"Oops... Oh well. Sorry about that!

On Fri, Apr 15, 2016, 00:51 James Lee notifications@github.com wrote:

> @isiahmeadows https://github.com/isiahmeadows i thought i was going
> crazy! I know this is months old but your code used href for image! Thanks
> for the code either way. Works like a charm after you change href to src.
> 
> —
> You are receiving this because you were mentioned.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/issues/339#issuecomment-210287159
",isiahmeadows,
338,2014-01-28 00:21:30,"For any connection back from generated HTML to markdown (check ghost.org markdown editor, for example) a line number and character number of markdown token should be passed to the renderer. 

I'll make a pull request implementing this in some days.
",andrewtch,2016-01-13 20:56:07
338,2014-02-20 07:36:19,"Are you still working on this ?
",rsaccon,2016-01-13 20:56:07
338,2014-02-20 13:13:04,"I started the work but I'm a bit busy now, I can continue only after 24th of feb.
",andrewtch,2016-01-13 20:56:07
338,2014-03-20 06:56:31,"I just want to be notified when @andrewtch has updates…
",sbruchmann,2016-01-13 20:56:07
338,2014-04-05 11:17:57,"I hate to be pushy, but has there been any updates?
",jeffjose,2016-01-13 20:56:07
338,2014-04-05 11:30:39,"Sorry guys, moved to another projects temporarily, will start this thing tomorrow )
",andrewtch,2016-01-13 20:56:07
338,2014-04-22 10:22:56,"Guys, I'm giving up ( current code is soo hard to dig in and implementing this stuff would be a real... 5th wheel.

@chjj , can you accept some major refactoring so I can implement this stuff? It will mostly affect `Lexer.prototype.token()`, changing the main loop (`while(src){...`), and separating token creation, like:

<S_CODE_TOKEN>

instead of current implementation.
",andrewtch,2016-01-13 20:56:07
338,2014-05-03 12:33:14,"Need this feature too.
I'll give it a try. 
Looks doable.
",akfish,2016-01-13 20:56:07
338,2014-05-05 11:28:50,"Find some time to write a visualizer to see how last commit works:
![image](https://cloud.githubusercontent.com/assets/922715/2877242/117d05b6-d447-11e3-87db-56348bee13a2.png)

It works partially expect for `xxx_start` and `xxx_end` tokens (this affects `list`, `blockquote` and etc).

After that is fixed, there're still some test cases to write and modifications to `renderer` (so that location data can be stored in attributes of generated HTML elements).

So it is more trouble than I thought but not impossible. 
",akfish,2016-01-13 20:56:07
338,2014-05-05 11:49:50,"Looks awesome! And  not just the line number, but the complete location information for each rendered token!
",rsaccon,2016-01-13 20:56:07
338,2014-05-05 11:53:12,"@rsaccon That's being done. But still too buggy to commit yet.
",akfish,2016-01-13 20:56:07
338,2014-05-09 12:25:16,":+1: 
",cirosantilli,2016-01-13 20:56:07
338,2014-08-05 19:37:58,"akfish, are you still working on this ?
",rsaccon,2016-01-13 20:56:07
338,2014-08-06 07:49:36,"@rsaccon Sorry. Got caught up with other projects since last commit. The issue remaining was with some elements like item list. They consist of a few items, but each item doesn't have a corresponding token (or something like that) causing location information to be lost. It can be done for sure, but not without being hacky. And it will resulting an inconsistent API in which that some elements have one location object while the others have an array of location objects. I'm not happy with that.

I will review this issue when I am free. But I might end up with writing a markdown parser of my own to get this feature.
",akfish,2016-01-13 20:56:07
338,2016-01-13 21:45:10,"Wow! After almost 2 years, I did nothing about it! NOTHING! 
Maybe I'll sit around for another 2 years.
",akfish,2016-01-13 20:56:07
338,2016-01-13 21:46:23,"...I was just cleaning the issues on github, so much reaction ....
",andrewtch,2016-01-13 20:56:07
338,2016-01-13 21:53:50,"Well, I was just amazed by how lazy I've been. And now I'm going back to my sitting-around with all my half-not-done projects.
",akfish,2016-01-13 20:56:07
337,2014-01-24 20:32:39,"The following:

<S_CODE_TOKEN>

is rendered by marked as:

<S_CODE_TOKEN>

However, if the `pre` tag is inside another block element:

<S_CODE_TOKEN>

the output is:

<S_CODE_TOKEN>

So it seems that `<pre>` tags are not ignored when inside another block element.

Definitely an extreme edge case when writing markdown, but also an inconsistency.
",sklise,
336,2014-01-21 10:12:24,"highlightjs version 0.8 stylesheets have replaced ""pre code"" style with "".hljs"" style.
So marked.js should at least initialize code blocks as

<S_CODE_TOKEN>

and not simply

<S_CODE_TOKEN>

At most, marked should also consider source code language class.
",jlchereau,2014-01-27 14:15:56
336,2014-01-26 03:55:55,"This is `hljs`-specific. This renderer should do the job:

<S_CODE_TOKEN>
",Feder1co5oave,2014-01-27 14:15:56
336,2014-01-27 14:15:56,"This is exactly what I have done. Thank you anyway.
I thought that you should know either to update documentation or code.
",jlchereau,2014-01-27 14:15:56
335,2014-01-21 09:14:33,"Because text in <embed> svg can be selected and searched, but <img> not.
",lilydjwg,2014-02-13 04:08:19
335,2014-01-21 19:42:55,"I thought `<embed>` was pretty outmoded now…I think `<img>` makes the most sense still, but `<svg>` would definitely be a better option than `<embed>`.
",kennethormandy,2014-02-13 04:08:19
335,2014-01-22 06:25:37,"`<embed>` is in HTML 5. `<svg>` does not have a `src` attribute or similar AFAIK.
",lilydjwg,2014-02-13 04:08:19
335,2014-01-22 07:14:02,"No, it doesn’t, good point. I guess I was meaning that literally embedding it as SVG markup seemed like it would be the more forward-looking option than `<embed>`, while still allowing text searching.
",kennethormandy,2014-02-13 04:08:19
335,2014-01-22 08:31:37,"Embedding it as SVG data in the HTML output has these issues:
- The SVG file must exist and be readable when generating HTML text, while other `<img>`s do not require this.
- If the SVG is on a third-party site, marked will have to fetch it. And the site must allow the content to be fetched by marked, e.g. without checking for referrer or user agent string or cookies.
- When the SVG file is updated, the HTML files embedding it will need to be regenerated
- When a lot of SVG files are used and the SVG files are large (e.g. maps), every page will have its own copy embedded. This will increase bandwidth usage because browsers can't cache those SVG files alone.
",lilydjwg,2014-02-13 04:08:19
335,2014-02-05 06:35:04,"Parsing the filename/extension of the URI to attempt to determine its type is a direct violation of the definition of the URI and HTTP, which say that the URI is ""opaque"", only the server that minted it may define what it is. It is frequently the case that an image will have no filename extension at all, especially if the HTTP server is using Content-Type negotiation.

Additionally, image/svg+xml is a perfectly acceptable media type to send in an `<img/>` tag.
",awwright,2014-02-13 04:08:19
335,2014-02-06 15:40:19,"I agree that relying on a `.svg` extension is too error prone. And I'm not convinced that switching to `embed` is a worthy goal anyhow. SVG is a valid image type that can be referenced from an `img` so I'm not sure what problem this solves.
",jasonkarns,2014-02-13 04:08:19
335,2014-02-12 19:37:06,"I agree with Acubed. Besides, there is no syntax about specifying image type.
",jakwings,2014-02-13 04:08:19
335,2014-02-13 04:08:19,"I see, sorry for the noise.
",lilydjwg,2014-02-13 04:08:19
335,2014-02-13 07:24:41,"@lilydjwg no apologies needed! activity and issues are good, as well as the resulting discussion!
",jasonkarns,2014-02-13 04:08:19
334,2014-01-17 12:28:53,"Would be nice to generate a table of contents from a markdown file, like http://pythonhosted.org/Markdown/extensions/toc.html

something like:

<S_CODE_TOKEN>
",jbenet,
334,2014-01-19 19:16:12,"I'm currently writing something like that for a project using a custom renderer that automatically populates an array of headlines ([cf. Readme](https://github.com/chjj/marked/#overriding-renderer-methods)).
",killercup,
334,2014-01-29 04:06:18,"@killercup can u share some more specific code?
",SimonCropp,
334,2014-01-29 10:16:28,"Sure.

<S_CODE_TOKEN>

For a complete implementation see [here](https://github.com/killercup/grock/blob/5280ae63e16c5739e9233d9009bc235ed7d79a50/lib/transforms/markdownComments.coffee#L39-L50). This populates the `toc` array with headline objects. If you want to transform this flat list into a tree, you could use a function like the one found [here](https://github.com/killercup/grock/blob/5280ae63e16c5739e9233d9009bc235ed7d79a50/styles/solarized/assets/js/behavior.coffee#L54-L81) called `tocToTree`.
",killercup,
334,2014-01-29 10:20:16,"@killercup you rock
",SimonCropp,
334,2014-02-05 09:55:57,"try this: https://github.com/jonschlinkert/marked-toc. 
",jonschlinkert,
334,2014-06-13 23:28:49,"Note that some Markdown implementations/variants support this. Python-markdown comes to mind:
https://pythonhosted.org/Markdown/extensions/toc.html

However, it’s not common or standardized (sadly, there is basically no such thing as a Markdown standard).
[Here’s a bunch of implementations ignoring `[TOC]` on Babelmark 2](http://johnmacfarlane.net/babelmark2/?text=%5BTOC%5D%0A%0A%23+First+H1%0A%0A%23%23+%C2%A7+1.a%0A%0Athen%0A%0A%23%23+%C2%A7+1.b%0A%0Aand%0A%0A%23+Second+H1%0A%0A%23%23+%C2%A7+2.a%0A%0Athen%0A%0A%23%23+%C2%A7+2.b%0A%0Aand%0A%0A)

(also… +1)
",alanhogan,
333,2014-01-10 05:34:49,"Where can I find the list of changes between versions?
",balupton,
333,2014-01-10 05:41:12,"A changelog would definitely be nice. Personally, I’ve just been been using the [GitHub compare releases links](https://github.com/chjj/marked/compare/v0.3.0...master).

So you can see `https://github.com/chjj/marked/compare/v0.3.0...master` or `https://github.com/chjj/marked/compare/v0.2.10...v0.3.0` or whatever. (Not suggesting that’s a complete alternative, but hopefully it’s helpful!)
",kennethormandy,
333,2014-01-17 04:10:43,"I was just looking for the same thing, wondering if there are any potentially breaking changes between 0.2.x and 0.3?
",JedWatson,
333,2014-03-24 20:48:09,"Please start keeping a changelog. Going through hundreds of commits is a bit much.
",ponychicken,
333,2015-08-12 17:27:20,"I'm interested in a Changelog as well. 

A nice reference for getting started: http://keepachangelog.com/
",markstos,
332,2014-01-09 20:46:07,"I'm not sure how to classify the following issue.

The call `marked("">"")` always produces `<p>&gt;</p>` independently of the `sanitize` option. Why?

Thanks!
",chmllr,2014-01-12 10:06:54
331,2014-01-09 13:08:58,"Hey all,

I ran into the following error when use grunt-docco in my workflow, and since it was fatal, was pointed to this repo to report it.

The issue reads:

<S_CODE_TOKEN>

Is there a fix for this? I am running this on a CentOS server (it does not seem to occur on OS X)
",PunkChameleon,2014-01-09 15:08:04
331,2014-01-09 14:59:03,"According to the stack trace in your other issue, this error is thrown from inside the highlighter callback. This isn't a problem with marked. Try running it without the highlighter.
",chjj,2014-01-09 15:08:04
330,2014-01-06 00:17:08,"The HTML that marked synthesizes is now closer to well-formed XML.
",dsheets,2014-02-11 21:33:50
330,2014-02-06 15:35:44,"+1
",jasonkarns,2014-02-11 21:33:50
330,2014-02-06 15:44:12,"Just curious. Why?

As someone who was once a huge XHTML advocate, I'm sorry to say XHTML was a gigantic failure and has long been dead. I don't see any benefit to adding the trailing slash for self-closing elements. Marked tries to produce modern HTML, and while the HTML5 spec _did_ allow for the trailing slash eventually, it's still essentially meaningless and serves no real purpose.

Here's an old post on Anne's blog that I think is particularly relevant here: http://annevankesteren.nl/2006/12/solidus

I'll leave this open if someone wants to present an argument in favor of this. I would only consider adding it as an option. It most definitely will not be the default.
",chjj,2014-02-11 21:33:50
330,2014-02-06 15:57:09,"There's no downside for marked. HTML5 specifies two serializations: the lax, non-well-formed HTML serialization that we all expect browsers to 'just deal with' (and they do); and the XHTML serialization. There may not be many people out there still dealing with XML, but those that are don't have many options. Rendering valid XML means that marked can be used in an XML pipeline safely. For those that aren't, nothing changes. There is no downside for the non-strict group.

As an additional aside, rendering valid XHTML puts less pressure on whatever HTML parser is being used to consume the output. Sure, the HTML5 spec defines explicitly how certain elements should be parsed, but that then requires the HTML parser to 100% completely follow the HTML5 spec. If marked renders valid XHTML, then it completely avoids any potential bugs the HTML parser may have. With the hundreds or thousands of different HTML parsers out there, this change simply 1) reduces the chances for bad parsing 2) increases the number of parsers that can consume the output (to include all XML parsers). All at the expense of just a handful of bytes.
",jasonkarns,2014-02-11 21:33:50
330,2014-02-06 16:02:15,"HTML is XML is EXI is the DOM. They're all different encodings of the same DOM.
And because of this, some of us want to use XML tools to process our documents. Some of us (me) want to embed HTML in XML - for instance, Atom feeds.

It's also far simpler and more consistent:
[The HTML syntax](http://www.w3.org/TR/html/syntax.html#syntax): 141 printed pages
[The XHTML syntax](http://www.w3.org/TR/html/the-xhtml-syntax.html#the-xhtml-syntax): 7 printed pages
Which do you suppose I prefer?

XHTML is absolutely not dead, see http://www.w3.org/TR/html-polyglot/ for instance. XHTML lets you use things like [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/) and add new features arbitrarily (especially with full namespace support - something hard-coded into the HTML syntax, prohibiting forward compatibility). Most importantly, it's more portable and accessible - the HTML syntax only really works with Web browsers, but writing accessible documents demands that we write code also consumable by machines. There's numerous ways to do this, most demand the usage of more powerful syntaxes like XML or EXI.

In any event, the cost is one or two extra characters. Please consider supporting http://www.w3.org/TR/html-polyglot/
",awwright,2014-02-11 21:33:50
330,2014-02-11 20:47:43,"@jasonkarns,

> There's no downside for marked.

To be sure. This is a philisophical decision over anything else. Which is why, if it does get added, it's going to be an option.

> HTML5 specifies two serializations: the lax, non-well-formed HTML serialization that we all expect browsers to 'just deal with' (and they do); and the XHTML serialization.

I already mentioned in my post that the HTML5 spec allows for useless trailing slashes. The ""just deal with it"" approach is anything but. The SGML DTD for all versions of HTML prior to 5, specified self-closing elements non-ambiguously.  This is what SGML DTDs are for. It wasn't nonsensical like you're trying to portray. In HTML5, they stopped using a DTD altogether and stopped being SGML based. So rather than being SGML-based (HTML 1-4), or XML-based (XHTML 1-2), HTML5 became its own beast, with a complete specification describing every self-closing element in detail. This way, no browser would ever have to parse an SGML DTD (no browsers were doing this anyway!). The natural conclusion was _always_ to stop being SGML and become its own markup language.

> As an additional aside, rendering valid XHTML puts less pressure on whatever HTML parser is being used to consume the output. Sure, the HTML5 spec defines explicitly how certain elements should be parsed, but that then requires the HTML parser to 100% completely follow the HTML5 spec. If marked renders valid XHTML, then it completely avoids any potential bugs the HTML parser may have.  With the hundreds or thousands of different HTML parsers out there, this change simply 1) reduces the chances for bad parsing 2) increases the number of parsers that can consume the output (to include all XML parsers). All at the expense of just a handful of bytes.

Sorry, do you have any sources to back this up? Modern HTML parsers parse according to the HTML5 spec. The trailing slashes aren't helpful at all. As soon as they tokenize the ""<img"" tag, it already knows the element will be self-closing. The trailing slash if flat-out redundant. This was the whole point of HTML5, to pragmatically address this stuff. If anything, the trailing slash will only slow down the parser by a microsecond or two. In fact, this isn't even specific to HTML5 parsers, _all_ HTML parsers that did not properly parse SGML DTDs (which was pretty much all of them) operated this way. A list of self-closing tags was hardcoded in the parser. There never was and never will be a need for the trailing slash in HTML.

@Acubed,

> HTML is XML is EXI is the DOM.

HTML is not XML. Where are you getting this from? XHTML was a poor attempt at making HTML XML-based instead of SGML-based. XHTML failed for a number of reasons, the most apparent was lack of support, but the downsides of XML also destroyed XHTML's chances of ever becoming dominant: the lack of incremental rendering was a huge one.

> They're all different encodings of the same DOM.

Well, marked doesn't produce DOM, it produces markup, so this is irrelevant.  You could make a completely new markup language tomorrow that produces a DOM, should marked support it?

> And because of this, some of us want to use XML tools to process our
> documents. Some of us (me) want to embed HTML in XML - for instance, Atom
> feeds.

Also curious, why would you bother embedding HTML directly in Atom? Why not just use a `<![CDATA[]]>` declaration? That's what it's there for. Especially when you know that the HTML might not be well-formed (say you have an atom feed for blog posts and comments).

Example:

<S_CODE_TOKEN>

That isn't even a work around. That's just best practice in general.

> It's also far simpler and more consistent: The HTML syntax: 141 printed pages The XHTML syntax: 7 printed pages Which do you suppose I prefer?

What you just pointed out is one of the main shortcomings of XML - it uses a dumb parser that throws on any syntax error instead of gracefully handling errors like it should. HTML5 is smart enough to take the time to specify graceful error handling and soforth.

Defending XHTML at this point is useless. You're defending something that does not support graceful error handling or incremental rendering. Why would you ever want that rendering in a browser?

> XHTML is absolutely not dead

Yes, it is.

> see http://www.w3.org/TR/html-polyglot/ for instance

I'm well aware of polyglot documents. As I stated before, I used to be an X-phile, who eventually switched to using polyglot, until I came to my senses when I saw no tangible benefit for either.

> XHTML lets you use things like RDFa and add new features arbitrarily (especially with full namespace support - something hard-coded into the HTML syntax, prohibiting forward compatibility).

A couple years ago, you would be arguing that XBL2 and SVG could be _only_ be used in XHTML, but that all changed. Many XML-based specifications have been ported to HTML. SVG can be embedded in HTML now for example.

Right now, I guess the best you can come up with is RDFa.

I'll tentatively implement this as an option, but I'm not sure it should be an option since it is trivial to implement yourself with the renderer.
",chjj,2014-02-11 21:33:50
330,2014-02-11 21:09:47,"It was poor phrasing to say ""puts less pressure on parsers"". I don't mean to say that it's additional complexity on the parser at all. What I mean is that marked is putting pressure on users to use certain parsers – namely, HTML5 parsers.

> Modern HTML parsers parse according to the HTML5 spec.

_If_ you have a bug-free, modern parser. marked doesn't need to be making assumptions about the other tools in one's toolchain. (That's certainly your perogative, but there's no technical reason for forcing this on users.) Changing marked to output well-formed XML markup means that users can make use of generic XML tools for whatever purposes and reasons they deem fit.

If there was a trade-off to be made to add this feature, then that's an entirely different discussion. Then we'd be weighing the pros of enabling support for the whole universe XML tools, vs whatever cons there were. But I still haven't seen a downside to this feature. Other than the idealogical/philosophical arguments. Which leads me to seeing this feature as nothing more than a way to increase the range of tools/parsers that marked can interop with.
",jasonkarns,2014-02-11 21:33:50
330,2014-02-11 21:14:57,"I've been watching this discussion with some interest. When I work in Ruby, I have Nokogiri in my toolbox, and have no trouble parsing and modifying valid HTML5 as you describe it here. But on PHP, I have to suffer through the awful DOMDocument stuff (which can handle HTML5), or I can use XHTML-flavored markup and the SimpleXML interface (which really does live up to its name!). This extra flexibility (in order to coddle creaky broken tools besides browsers) really could be important to someone. I'd urge you to think beyond the browser, as Marked is a very general-purpose tool.

Thanks,

Walter

On Feb 11, 2014, at 4:09 PM, Jason Karns wrote:

> It was poor phrasing to say ""puts less pressure on parsers"". I don't mean to say that it's additional complexity on the parser at all. What I mean is that marked is putting pressure on users to use certain parsers – namely, HTML5 parsers.
> 
> Modern HTML parsers parse according to the HTML5 spec.
> 
> If you have a bug-free, modern parser. marked doesn't need to be making assumptions about the other tools in one's toolchain. (That's certainly your perogative, but there's no technical reason for forcing this on users.) Changing marked to output well-formed XML markup means that users can make use of generic XML tools for whatever purposes and reasons they deem fit.
> 
> If there was a trade-off to be made to add this feature, then that's an entirely different discussion. Then we'd be weighing the pros of enabling support for the whole universe XML tools, vs whatever cons there were. But I still haven't seen a downside to this feature. Other than the idealogical/philosophical arguments. Which leads me to seeing this feature as nothing more than a way to increase the range of tools/parsers that marked can interop with.
> 
> —
> Reply to this email directly or view it on GitHub.
",walterdavis,2014-02-11 21:33:50
330,2014-02-11 21:33:01,"@walterdavis, thank you for the kind words about marked.

The first day I wrote marked, I made it a point to exclude the self-closing slashes, knowing that some day there would be an issue posted like this. I sort of smiled at the idea: the chance to explain why no self-closing slashes is better. I have strong opinions about this stuff and I'm really stubborn, but I do realize there are cases like yours. I will implement this as an option (not default), but I won't be accepting this PR because it changes the test suite.
",chjj,2014-02-11 21:33:50
330,2014-02-11 21:55:29,":+1: 
",jasonkarns,2014-02-11 21:33:50
330,2014-02-11 22:23:51,"Patch author here.

Adding it as an option seems worse than not having it at all. I don't want options; I want correctness.

I was only using your library because someone else had adopted it as the default markdown parser. I don't understand why you would bother to write this many words defending a stance that fundamentally reduces interop of your library. Further, I don't understand why, instead of increasing interop, you'd opt to increase the interface complexity with an option. Finally, you seem to be against testing this feature.

I won't be using marked in the future and therefore will not be contributing patches. Good luck!
",dsheets,2014-02-11 21:33:50
330,2014-02-11 22:39:49,"@dsheets, you'll stop using this because you have to type a total of 10 characters to get it the way you want? 

You didn't bother participating in the discussion at all. I left it open for discussion and you had several days to post a counterargument that could have swayed me, but didn't. I proposed adding it as an option, and you just ignored it and waited for the outcome.
",chjj,2014-02-11 21:33:50
330,2014-02-11 23:00:38,"I'll stop using it because I never wanted to use it to begin with and you clearly don't care about my use case which doesn't negatively impact any other uses.

I didn't bother participating in the discussion because there's not much to discuss unless you actually have an issue with the implementation rather than some kind of weird political/philosophical difficulty.

I don't really care about swaying you. There are probably other markdown parsers that fit my needs and when the time comes again to parse markdown in JS, I'll probably use one of those. I haven't used marked since I sent this patch. It's not in production.

It's fine if you don't accept the patch and it's fine if you don't (or do) make it an option. I really don't care. I'm bothering to discuss now because I thought that you should know I won't be a user or contributor in the future due to this issue. Basically, this is not how I would make decisions in a project of my own and I don't care enough to maintain a fork of the project so I will find another one that more closely aligns with my taste in the future.

No hard feelings. I wish you all the best. Thanks!
",dsheets,2014-02-11 21:33:50
330,2014-02-12 02:48:42,"@chjj If XHTML is so dead why does it have an entire section in the HTML specification? Right after and _equal to_ the HTML syntax? HTML parsing still involves building up a DOM, which means putting elements in the correct XML namespace. Whether you like it or not, writing HTML is functionally writing XML. All major Web browsers for _years_ have been able to incrementally render XHTML - again, it's just a DOM serialization.

The difference is that XML as a syntax is consistent. It fails early and fails fast. It's portable. It's more accessible. It's more secure.

For some applications, HTML is great. It's domain specific, so many features make it easier to write free-form for user input. For these cases, I parse the HTML, sanitize the tags, and export XML.

But some users even still prefer Markdown - it's even easier to write free-form. So I hope that my Markdown parser outputs valid XML.

`<img/>` is 100% valid HTML. I'd suggest using that syntax, especially considering that the syntax is a standards-track TR.
",awwright,2014-02-11 21:33:50
330,2014-02-12 04:15:56,"> If XHTML is so dead why does it have an entire section in the HTML specification?

You make the mistake of judging whether something is alive or not by whether it's specified somewhere.

> <img/> is 100% valid HTML. I'd suggest using that syntax, especially considering that the syntax is a standards-track TR.

I never said it wasn't valid HTML. I said it was useless.

Scroll up a bit and read my post. Everything you just mentioned was already addressed.

Anyway, the feature has been implemented. Let's let this discussion die its well-deserved death.
",chjj,2014-02-11 21:33:50
330,2014-02-12 05:15:41,"@chjj http://www.w3.org/TR/html-polyglot/ remains unimplemented. It is a Web standard - farther along in the standards track than the current work on HTML, I might add. That, RDFa, XForms, and other XHTML technologies are not only under active development, but active adoption, by myself and others in Semantic Web technologies.

""I don't/wouldn't use it"" is no excuse at all.
",awwright,2014-02-11 21:33:50
329,2014-01-05 00:05:42,"This

<S_CODE_TOKEN>

leads to:

<S_CODE_TOKEN>
",kapouer,2014-01-10 07:15:53
328,2014-01-04 23:32:16,"`marked-man --no-breaks README.md | man -l -`
will show you what it gives.
",kapouer,
327,2014-01-02 22:47:18,"Closes gh-231
",juliantaylor,2014-01-02 23:01:59
327,2014-01-02 23:02:04,"Thanks.
",chjj,2014-01-02 23:01:59
326,2013-12-31 07:20:09,"since we can create custom renderers now, i don't see the point of including this by default. the default renderer should be minimal and simple, and it would close plenty of issues surrounding this issue. 
",jonathanong,
326,2014-01-01 13:42:30,"What issues? If you want to avoid id collisions, just use the `headerPrefix` option.
I find that headers with ID come handy when I need to reference different parts of the same document.
",Feder1co5oave,
326,2014-01-06 04:37:10,"because it's another option and an opinionated feature. i don't want it at all. easier if it wasn't supported. 
",jonathanong,
326,2014-01-06 07:21:07,"I agree with this. It’s nice to have the option, but I think it makes more sense that it’s opt-in.
",kennethormandy,
326,2014-01-06 17:44:14,"I agree in 0.4.0 release it should be removed.
",ChrisWren,
326,2014-04-23 18:17:31,"I'd like to share my implementation of the header renderer with ID creation:

<S_CODE_TOKEN>

It is useful to keep letters with accents (I included the Italian ones) and removes any leading or trailing dashes:

<S_CODE_TOKEN>
",Feder1co5oave,
326,2015-05-06 17:40:59,"I also think it should be switched off by default, since it injects unexpected ids into markup and seems like pretty much opinionated option.

Besides, it doesn't work with non-latin headers, which results in quite horrible ids
",ArmorDarks,
326,2015-08-24 17:10:33,"+1

It's far too easy to create issues on a page with dynamically generated ids. At the least, if it's not going to be removed, it should be automatically prefixed with `marked-` or `md-`. Something to set it apart from other ids that may already be on the page. If a plugin or framework is asserting it's opinions on a dev, it should at least do so transparently & in a non-conflicting manor.

Aside from that, and not being able to easily add new custom token rules (not just overriding current ones); this is some fine code and has saved me time implementing a new MD editor. So thank you for your efforts, they are appreciated.
",the0neWhoKnocks,
326,2016-03-06 02:33:40,"+1
",brunowego,
326,2016-04-09 09:43:15,"+1
",fedesilvaponte,
325,2013-12-30 05:33:09,"If I enter some code as the very first text, it is rendered with a &lt;pre&gt; tag. However if the code is preceded by any other content, the 4 spaces are not being understood and the content is rendered as text. 

Sample input and outputs below

Input:
    marked('    code line',function(err,out){
        console.debug(""Correct markdown: ""+out);
    });

Output: Correct markdown: &lt;pre&gt;&lt;code&gt;code line&lt;/code&gt;&lt;/pre&gt;

Input:
    marked('Answer with code\n    code line',function(err,out){
         console.debug(""Incorrect markdown: ""+out);
    });

Output: Incorrect markdown: &lt;p&gt;Answer with code
    code line&lt;/p&gt;
",vivekkodira1,2014-01-03 07:43:08
325,2013-12-30 13:10:41,"Use the code element to post code, spaces will then be preserved and the question will look more clear.

<S_CODE_TOKEN> javascript
> marked(' paragraph')
'<p> paragraph</p>\n'
> marked('    code block')
'<pre><code>code block\n</code></pre>'
> marked('paragraph\n    wrong code block')
'<p>paragraph\n    wrong code block</p>\n'
> marked('paragraph\n\n    code block')
'<p>paragraph</p>\n<pre><code>code block\n</code></pre>'
> marked('paragraph\n<S_CODE_TOKEN>')
'<p>paragraph</p>\n<pre><code>fences block\n</code></pre>'
<S_CODE_TOKEN>

Always add an empty line before an indented block of code, or use backticks.
",Feder1co5oave,2014-01-03 07:43:08
325,2014-01-01 19:43:51,"@Feder1co5oave is correct, after only one newline, you are still inside the `<p>` block, and Markdown will not nest a code block inside of the paragraph. Two line breaks (or end of article) are required to sufficiently terminate a paragraph block. This happens irregardless of whether or not `breaks` is set to `true` or not.
",julianlam,2014-01-03 07:43:08
325,2014-01-03 07:43:08,"@Feder1co5oave  @julianlam  thank you :)
",vivekkodira1,2014-01-03 07:43:08
324,2013-12-29 18:18:29,,ChrisWren,2013-12-29 18:20:25
323,2013-12-29 13:06:22,,Aimeast,2014-04-01 14:50:43
323,2013-12-30 03:30:18,"/cc @ykomatsu
",Aimeast,2014-04-01 14:50:43
323,2014-04-01 14:50:40,"Close via 48c6a43fb9b597510ff980e7524288df241f663d
",Aimeast,2014-04-01 14:50:43
322,2013-12-29 09:40:26,"All block-level elements have line break after close tag, but
indent-style code blocks does not. This bug appeared on [e3692c772b](https://github.com/chjj/marked/commit/e3692c772be8a8e12b53319baa7643fbd37ae666).

Input:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>
",hail2u,2016-09-08 02:57:16
322,2013-12-30 13:52:40,"+1
",Feder1co5oave,2016-09-08 02:57:16
321,2013-12-29 00:19:47,"I know there was a previous issue to setup Travis CI to run tests on all PRs/commits, but when I look at the [marked page on Travis](https://travis-ci.org/chjj/marked) I don't see any builds being run.

@chjj can you go on travisci.org and make sure the repo is synced?
",ChrisWren,
320,2013-12-28 17:25:30,"Hi,

in https://github.com/isaacs/npm-www/issues/517 @sindresorhus is mentioning support from GFM for relative image paths (https://github.com/blog/1395-relative-links-in-markup-files)

In npm-www we are taking the `readme.md`, which is often hosted on GitHub, too and are rendering markdown for the detail page of the package from it. Sometimes the readme makes use of the relative-img-path-feature from GitHub (see issue).

Turns out, that supporting converts (from relative paths to absolute ones) for images which are embedded html is not that easy: the custom html renderer is ignoring the img tag (https://github.com/chjj/marked/blob/master/lib/marked.js#L50) and they are included in the `paragraph`-callback with all other tags.

In order to support relative img paths from GFM on npm-www it would be nice to have a  easy way to convert the paths at the rendering stage or before.
",robertkowalski,
320,2013-12-28 17:26:33,":+1: 
",sindresorhus,
320,2014-03-21 19:26:40,":+1: 
",tcarlsen,
320,2014-06-10 09:33:42,":+1: 
",mauvm,
319,2013-12-24 19:26:36,"Added a highlight option description and an example, because I could not correctly highlight with `Renderer.code` by [highlight.js](https://github.com/isagalaev/highlight.js).
",comutt,2013-12-25 04:39:26
319,2013-12-25 04:25:20,"The highlight option is in limbo right now. It's still included in marked, but its purpose can also be fulfilled by the Renderer. I'm not sure we want to add this back into the README just yet.
",chjj,2013-12-25 04:39:26
319,2013-12-25 04:39:26,"Okay,  I got it.
",comutt,2013-12-25 04:39:26
318,2013-12-24 18:47:59,,comutt,2013-12-25 04:22:49
318,2013-12-25 04:22:53,"Thanks.
",chjj,2013-12-25 04:22:49
317,2013-12-24 15:14:20,"Added specials for replacing this symbols instead of unicode letters.

https://github.com/chjj/marked/issues/316
",dab,
317,2013-12-29 04:11:43,"Sounds good to me. In the meantime you can use the renderer to use your own RegExp for rendering header ids.
",ChrisWren,
316,2013-12-24 15:11:05,"While generating id's in headings, marked cut out all letters but english. But we want to use unicode letters in id's as well.
",dab,
316,2013-12-25 16:07:15,":+1: 
",tadatuta,
315,2013-12-23 07:43:00,,mikeal,2013-12-23 14:06:36
315,2013-12-23 14:06:55,"Thanks.
",chjj,2013-12-23 14:06:36
314,2013-12-21 15:26:42,"Marked is fantastic and while HTML output is great for generating static pages, being able to instead generate a JSON would open up the ability to use the parsed content in a much wider array of applications, including Angular apps, native apps, and even feeds.
",Snugug,
314,2013-12-30 13:56:24,"Do you mean

<S_CODE_TOKEN>

?
",Feder1co5oave,
314,2013-12-30 15:01:46,"Not quite what I was looking for, as the final render needs to be passed through a markdown parser as well, but it'll do for what I need.
",Snugug,
313,2013-12-18 14:01:59,"Add license information to `package.json`
",paazmaya,2013-12-29 00:09:35
312,2013-12-18 11:13:47,"<S_CODE_TOKEN>

There is a remaining white space after the backtick that shouldn't be there !

http://daringfireball.net/projects/markdown/syntax#code
At the ""A single backtick in a code span"" part, the output doesn't have that trailing space.
",valeriangalliat,
312,2013-12-30 14:17:05,"this seems to solve

<S_CODE_TOKEN>

<S_CODE_TOKEN>

maybe add a test for this?
",Feder1co5oave,
312,2014-10-18 08:14:26,"Hi,

Sorry I totally forgot about this issue.

To begin, many thanks @Feder1co5oave, your diff totally solves the issue.

I was now looking to add a test for this like you were suggesting but it's not actually possible since [all the whitespaces are removed](https://github.com/chjj/marked/blob/1c188ebb55ef512653e03b0a03e60d7209a3bc73/test/index.js#L115-L116). Anyway, do you think it worths merging your patch in `master`? Do you want me to make a PR or something?

Otherwise I think we can close. :)
",valeriangalliat,
312,2014-10-18 11:10:45,"Thanks for bringing this up again, I think it's worth merging.
",Feder1co5oave,
312,2016-06-16 07:16:12,"Oh, great, THX!

But it seems that this bug has not been fixed yet.
",xovel,
311,2013-12-17 09:04:48,"I'm using `marked` with `Angular.js`. When I create a code block, if I type the language wrong like this: 

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

Then an error will occur:

![2013-12-17 17 02 39](https://f.cloud.github.com/assets/1324420/1762640/39b50db8-66fa-11e3-8799-d1d84302bb4c.png)
",dyzdyz010,2013-12-28 18:03:11
311,2013-12-24 19:19:40,"`highlight.js` does not like 'undefined' languages. I solved this by writing

<S_CODE_TOKEN>
",Feder1co5oave,2013-12-28 18:03:11
311,2013-12-25 02:22:04,"Thanks this solved the problem :)
",dyzdyz010,2013-12-28 18:03:11
311,2013-12-28 18:03:11,"Closing this since it is solved.
",ChrisWren,2013-12-28 18:03:11
311,2015-09-21 04:39:24,"For someone visiting here later, I had to write `!!(lang && hljs.getLanguage(lang))` for the condition with highlight.js 8.8.0 because it no longer has `LANGUAGES` property.
",shuhei,2013-12-28 18:03:11
311,2016-03-04 09:03:10,"@shuhei Cool~  Thanks very much!
",JimmyLv,2013-12-28 18:03:11
310,2013-12-16 16:16:35,"Input:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

Expected (Markdown.pl):

<S_CODE_TOKEN>
",ykomatsu,2014-04-25 23:15:33
310,2013-12-26 11:08:46,"+1
",Aimeast,2014-04-25 23:15:33
310,2013-12-29 11:33:40,"I find the problem, but still need to find a way to solve it.

<S_CODE_TOKEN>
",Aimeast,2014-04-25 23:15:33
310,2013-12-30 14:01:50,"Add an extra newline to end the list:

<S_CODE_TOKEN>
",Feder1co5oave,2014-04-25 23:15:33
310,2013-12-31 13:29:38,"@Feder1co5oave Thanks for point out a new bug. But I have no ideal for solve it right now. Could please help me?
",Aimeast,2014-04-25 23:15:33
310,2014-04-25 22:44:21,"Any movement on this? It'd be really nice to have full support for the entire markdown language... If I can help, let me know :)
",knksmith57,2014-04-25 23:15:33
310,2014-04-25 23:15:30,"Should be fixed with v0.3.2 (see e6082a0f6a19c4c8e1a08eaebeb4a253a6f031d1).
",chjj,2014-04-25 23:15:33
310,2016-09-16 03:54:46,"@chjj is this resolved? I just pulled v0.3.6 but I'm still seeing:

![image](https://cloud.githubusercontent.com/assets/8988697/18574885/52f8d64e-7b9f-11e6-83fd-c2b7992199ac.png)

with this code:

<S_CODE_TOKEN>
",skipjack,2014-04-25 23:15:33
309,2013-12-11 05:14:09,"The header elements get an ID, which can be very useful, but I have a situation where many headers share the same text (essentially a large changelog on a project I'm working on), and they all get the same ID. Since IDs have the be unique for the entire browser context, this is a bit of a problem.
",ronkorving,2013-12-11 11:44:14
309,2013-12-11 08:57:23,"The heading feature is removed due to the feature of renderer. You can use a renderer to generate your header IDs.

**NOTE**: the new version is not released.

Since this feature is removed. There is not need for fixing this issue.
",lepture,2013-12-11 11:44:14
309,2013-12-11 11:44:14,"Great! Looking forward to a release.
",ronkorving,2013-12-11 11:44:14
308,2013-12-10 14:05:43,"Add a copyright for me.

Add a notification for people.

Related issue: https://github.com/chjj/marked/issues/307
",lepture,2013-12-28 17:32:38
308,2013-12-28 17:32:38,"Now that 0.3.0 is pushed this is not relevant any more.
",ChrisWren,2013-12-28 17:32:38
307,2013-12-09 10:22:47,"As per the example on the README.md, I thought I could customise the Renderer like this:

<S_CODE_TOKEN>

But the Renderer is _undefined_, meaning I can't access or create a custom Renderer. This has changed in the last version? Btw, I am using the version **0.2.10**.
",lucasmotta,2013-12-28 17:33:16
307,2013-12-09 21:00:37,"The last release was over a month ago, before what appears to be a pretty major refactor. It's unclear if this is because master is under a WIP state, or if someone forgot to push to npm. 

I too hope to get some clarification around this. 
",cozmo,2013-12-28 17:33:16
307,2013-12-09 21:04:30,"Yes, to be fair, the README.md @lucasmotta were looking at was probably of the master branch, whereas the Renderer feature is not implemented in 0.2.10.

I asked @chjj in #301 to create a new version tag. By now, as I am using this feature, I have just checked out the master branch, but I would rather manage it nicely via npm and package.json.
",tvooo,2013-12-28 17:33:16
307,2013-12-10 13:59:15,"You need to wait for a moment. The API is not settled yet. Since this feature is introduced by me, I want to keep the  API the same as sundown: https://github.com/chjj/marked/issues/305
",lepture,2013-12-28 17:33:16
307,2013-12-10 16:03:11,"@lepture Some of my pages refered to http://rawgithub.com/chjj/marked/master/lib/marked.js directly.
The code changes as the file in `master` changes.
Personally I hope it's stable in that branch, with correct docs in the README.
",jiyinyiyong,2013-12-28 17:33:16
307,2013-12-10 16:05:40,"I think we should revert the addition of renderer to the master readme until the code is published to npm. The readme should reflect the latest version on npm.

—
Sent from Mailbox for iPhone

On Tue, Dec 10, 2013 at 8:03 AM, 题叶 notifications@github.com wrote:

> @lepture Some of my pages refered to http://rawgithub.com/chjj/marked/master/lib/marked.js directly.
> The code changes as the file in `master` changes.
> 
> ## Personally I hope it's stable in that branch, with correct docs in the README.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/chjj/marked/issues/307#issuecomment-30240140
",ChrisWren,2013-12-28 17:33:16
307,2013-12-10 23:13:29,"@ChrisWren I disagree. The README of a given branch or tag reflects the state of the code in this given branch or tag. Thus, if this feature is in the master branch, it should also be documented in the master's README.

What I think, though, is that the master branch should reflect the latest, stable, published version; i.e., the latest tag. But I have not looked at this project long enough to really know how development & release processes work here :)
",tvooo,2013-12-28 17:33:16
307,2013-12-11 03:02:03,"@jiyinyiyong You can't rely the stability on master branch. You can use a given tagged version.

@ChrisWren I don't think master means that it is published to npm, that is tag's job.
",lepture,2013-12-28 17:33:16
307,2013-12-11 03:38:48,"So if I am a user of marked I have no access to docs which reflect the latest version on npm?

I think non-default branches can have docs which reflect the state of the code, but the default branch should reflect the state in npm unless there is a website for the project. For marked, I don't see much value in having a site so I think it is best to have the master branch not pull in new docs until the code is on the latest npm release.
",ChrisWren,2013-12-28 17:33:16
307,2013-12-11 03:43:23,"@ChrisWren https://npmjs.org/package/marked  this is the latest readme on npm.
",lepture,2013-12-28 17:33:16
307,2013-12-11 04:41:48,"OK, personally I don't look at the README on npm, I always end up on the GitHub repo, but you are right technically that it was the README pushed with that version. There has been a few improvements since it was pushed, but nothing major. I am curious if you guys usually read project documentation on npm vs GitHub?
",ChrisWren,2013-12-28 17:33:16
307,2013-12-11 04:45:07,"@lepture Yes, I will change my rawgithub like to the stable tag.
Related topic https://github.com/isagalaev/highlight.js/issues/331#issuecomment-30288799

@ChrisWren for me, 1) Official site, 2) README, 3) npm
",jiyinyiyong,2013-12-28 17:33:16
307,2013-12-11 09:20:14,"For me it's always Github > npm. But I know that it may not be correct, but it's just easier.
And also by the fact that most of the public repo's that I've been following, they use [this](http://nvie.com/posts/a-successful-git-branching-model/) flow for their repositories - so which means that master is always the stable, working version (same as npm), and then you would have the **dev** branch where you can test the new features.

At least for me it makes more sense when master = npm. But hey, it's your library and you guys did a pretty good job with it so far :)
",lucasmotta,2013-12-28 17:33:16
307,2013-12-19 13:34:20,"Excuse me, so what is the situation now? When will it be updated to npm?
",heroicyang,2013-12-28 17:33:16
307,2013-12-19 13:51:37,"ping @chjj 
",lepture,2013-12-28 17:33:16
307,2013-12-24 19:15:06,"npm is now updated to v0.3.0 tag: https://npmjs.org/package/marked

Issue `npm up marked` to get the last version!
",Feder1co5oave,2013-12-28 17:33:16
307,2013-12-28 17:33:16,"Now that 0.3.0 is pushed, this is no longer relevant.
",ChrisWren,2013-12-28 17:33:16
306,2013-12-06 13:25:11,"It gives me

<S_CODE_TOKEN>

 I expected the custom version.
",yene,2013-12-29 01:05:30
306,2013-12-28 17:36:16,"Don't understand what you are asking here. The example in the README doesn't render a h1.
",ChrisWren,2013-12-29 01:05:30
306,2013-12-29 01:02:26,"My bad, I misinterpreted you. I thought you were talking about the first example, I will take a look.

Update:

I got the following output which is what I expected:

<div class=""h-1"">h1</div>

I would make sure you are using the latest marked version, 0.3.0.
",ChrisWren,2013-12-29 01:05:30
305,2013-12-06 07:35:25,"Here is a node bind for sundown: robotskirt.

https://github.com/benmills/robotskirt

It is better to keep the same API as robotskirt:

https://github.com/benmills/robotskirt/blob/master/src/html.c#L74
",lepture,2013-12-29 00:48:43
305,2013-12-07 09:22:40,"why? these are entirely separate modules. the API is fine as it is, i actually prefer it this way. 
",jonathanong,2013-12-29 00:48:43
305,2013-12-29 00:48:43,"Since the new api is already pushed to npm I am going to close this.
",ChrisWren,2013-12-29 00:48:43
305,2014-01-02 02:51:19,"I wanted to change the names to keep the renderer names consistent with the token names. In an ideal world, we could just add aliases to each method to keep both sets of names, but marked calls the methods all directly by name, so it would be messier to check for different aliases when a renderer is passed in.

I really think for people used to marked, the current names will be more familiar.
",chjj,2013-12-29 00:48:43
304,2013-12-05 05:12:11,"Like `<pre>` `<script>` and `<style>`，the contents in `<textarea>`  should not be converted.

See also #303 
",akira-cn,
303,2013-12-05 04:05:03,"Hi, I add a testcase

<S_CODE_TOKEN>

I got

<S_CODE_TOKEN>

but

<S_CODE_TOKEN>

is ok.
",akira-cn,
302,2013-12-04 12:05:38,"We have the opportunity to remove:
- highlight
- langPrefix
- headerPrefix
- heading IDs

In favor of the new renderer.

The downside to this (at least for 3 of them): lack of backward compatibility, and less convenience for users used to marked. While I did merge the renderer, I'm **tentatively** reimplementing a few of these options. I think the removal of these features should be discussed in another issue because it is a big decision.

cc @lepture
",chjj,
302,2013-12-04 15:07:35,"marked is still on the early stage. It has not released 1.0.0 yet. I think it will be ok for these big changes.
1. headerPrefix and heading IDs doesn't worth the options (I thought)
2. block highlight is ok with renderer. however, there is a discussion on async highlight in #301 
",lepture,
302,2013-12-07 09:12:39,"i'd prefer less features, more extensibility. i'm +1 to removing all those options.
",jonathanong,
302,2014-02-17 08:28:00,"@chjj I am wondering why you revert the changes.
",lepture,
302,2016-01-06 11:49:16,"how to give blockquote regular expression like slack?
",birendra-ideas2it,
301,2013-12-04 10:46:17,"I started this at commit: https://github.com/chjj/marked/commit/0d27d58f16e3aa478cbc89a9a304e592e2862c5a

Related issue: #129 
",lepture,2013-12-04 11:22:16
301,2013-12-04 11:10:56,"I actually just merged everything by hand. It wasn't that bad. Just curious, why was the async highlighting removed?
",chjj,2013-12-04 11:22:16
301,2013-12-04 11:22:09,"Closing. I added the async highlighting back because:
1. We need it for backward compat.
2. I fail to see how adding renderer impacts it at all.
",chjj,2013-12-04 11:22:16
301,2013-12-04 11:43:24,"Anyway, I've made a few changes. Everything is working well. Great work. :)

If you want to make anymore changes, I suggest pulling from upstream. Everything is there now.
",chjj,2013-12-04 11:22:16
301,2013-12-04 11:53:44,"Ah, okay, I see why you removed highlight for sync highlighting, but users will have to be expected to do the async highlighting by hand now. We should probably open another issue debating this whole thing. I really like the approach of removing options that are obsolete now, but highlight is a pretty core option by now. A lot of people would be confused.
",chjj,2013-12-04 11:22:16
301,2013-12-05 16:54:14,"@chjj Would you mind creating a new version tag with this feature in it?
",tvooo,2013-12-04 11:22:16
300,2013-12-03 16:57:50,"Fix needed for example of highlight.js (version 7.5) to work.
",francoishill,2013-12-04 06:01:31
300,2013-12-04 06:01:31,"Fixed by: e778ce03da59c92d2fadb899e7e796ab3b45179f thanks for the PR, though!
",ChrisWren,2013-12-04 06:01:31
300,2013-12-04 06:11:39,"My pleasure!

On Wed, Dec 4, 2013 at 8:01 AM, Chris Wren notifications@github.com wrote:

> Fixed by: e778ce0https://github.com/chjj/marked/commit/e778ce03da59c92d2fadb899e7e796ab3b45179fthanks for the PR, though!
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/pull/300#issuecomment-29781746
> .

## 

Francois Hill
",francoishill,2013-12-04 06:01:31
299,2013-12-03 01:37:05,"When rendering a document with GFM line breaks turned on, the following

<S_CODE_TOKEN>

renders as

<S_CODE_TOKEN>

According to this line from the [GFM help page](https://help.github.com/articles/github-flavored-markdown) (emphasis added):

> GFM treats newlines in **paragraph-like content** as real line breaks, which is probably what you intended.

... the `<br>` tags should only be added in ""paragraph-like content"".
",chrisvasz,
299,2013-12-30 14:08:40,"+1, breaks are quite tricky
",Feder1co5oave,
298,2013-12-02 10:26:35,"Italics fails under many conditions:
- The markdown `this is a simple _italics _without space <br>` should yield HTML:

`<p>this is a simple <em>italics </em>without space <br></p>` 

(as per http://daringfireball.net/projects/markdown/dingus)

instead marked gives me: `<p>this is a simple _italics _without space <br></p>`
- Another example of the same happening:
  Markdown: `this is another _italics_without space`
  Exp result: `<p>this is another <em>italics</em>without space<br></p>`
  Marked result: `<p>this is another _italics_without space<br></p>`
- Sometimes the parsing is completely broken:
  Markdown:

`this is a simple _italics _without space <br>
this is another _italics_without space<br>
this is yet another _italics_ with space<br>`

should yield:

<S_CODE_TOKEN>

Marked yields:

<S_CODE_TOKEN>
",AmarPrabhu,
298,2013-12-02 10:56:28,"This is my options with https://github.com/chjj/marked/blob/ab84e8c6055b020f29134b93c86a9ae2ce955706/lib/marked.js:

<S_CODE_TOKEN>

I found it even more strange:

`this is another _italics _without space <br>` becomes `<p>this is another _italics _without space &lt;br&gt;</p>` (nope)

`this is another *italics *without space <br>` becomes `<p>this is another <em>italics </em>without space &lt;br&gt;</p>` (yep)

`this is another _italics_without space` becomes `<p>this is another _italics_without space</p>` (nope)

`this is another *italics*without space` becomes `<p>this is another <em>italics</em>without space</p>` (yep)

Your example above is different with ""*"":

<S_CODE_TOKEN>

becomes:

<S_CODE_TOKEN>
",jakwings,
298,2013-12-02 18:16:47,"I just used the current library as is - no changes to the config. So \* seems to be working fine huh. Let me give it a try and let you know. Thanks for the quick response.
",AmarPrabhu,
298,2013-12-03 02:01:27,"I did some tests with the [MD dingus](http://daringfireball.net/projects/markdown/dingus) and with Marked with `{gfm: false, pedantic: true}` (which seem most original MD-ish).

`this is a simple _italics _without space <br>`
dingus: `<p>this is a simple _italics _without space <br></p>`
marked: `<p>this is a simple _italics _without space <br></p>`

`this is another _italics_without space`
dingus: `<p>this is another <em>italics</em>without space</p>`
marked: `<p>this is another <em>italics</em>without space</p>`

`this is another _italics_without space<br>`
dingus: `<p>this is another <em>italics</em>without space<br></p>`
marked: `<p>this is another <em>italics</em>without space<br></p>`

`this is yet another _italics_ with space<br>`
dingus: `<p>this is yet another <em>italics</em> with space<br></p>`
marked: `<p>this is yet another <em>italics</em> with space<br></p>`

So... looks to me like Marked is pretty accurate.
",adam-p,
298,2013-12-03 04:57:09,"I disagree @adam-p : Dingus does not produce the same results you have mentioned.

MD: `this is a simple _italics _without space <br>`
Dingus: `<p>this is a simple <em>italics </em>without space <br></p>`
Marked: `<p>this is a simple _italics _without space<br></p>`

Here is a screenshot of the output in Dingus:
![dingus](https://f.cloud.github.com/assets/1422560/1661211/2011519c-5bd7-11e3-84f6-a2f883d3e49a.png)

Here's another example:
MD: `this is another _italics_without space`
Dingus: `<p>this is another <em>italics</em>without space</p>`
Marked: `<p>this is another _italics_without space</p>`
Output in Dingus:
![dingus2](https://f.cloud.github.com/assets/1422560/1661251/4bc5a868-5bd9-11e3-9106-ce9133beca7d.png)
",AmarPrabhu,
298,2013-12-03 09:57:39,"I tried `*` for italics and `__` for bold and that seems to do the trick. The parsing works fine for that combination of the markdown spec. However I think the opposite combination - `_` for italics and `**` for bold needs work in marked.
",AmarPrabhu,
298,2013-12-05 02:33:09,"I dunno, man, I dunno.

My dingus from the first:
![screen shot 2013-12-04 at 9 26 01 pm](https://f.cloud.github.com/assets/425687/1679577/a6d21a8a-5d54-11e3-9b74-ee3f3567e4d9.png)

My Marked from the second:
![screen shot 2013-12-04 at 9 31 19 pm](https://f.cloud.github.com/assets/425687/1679602/7030fe64-5d55-11e3-9886-cf90c3880d73.png)

And now I'm just going to back out of this discussion...
",adam-p,
297,2013-12-02 09:16:09,"The default test cases for links fails with unexpected results:
11. double_link.text failed at offset 46. Near: `:<ahref=""http://example.com/""><ahref=""http://example.com/"">h`.

Got:
`:<ahref=""http://example.com/""><ahref=""http://example.com/"">h`

Expected:
`:<ahref=""http://example.com/"">http://example.com/</a>.</p><p`
",AmarPrabhu,
296,2013-12-02 07:07:16,"Marked is really well written and has quite an approachable codebase. I'd like to leverage what's here for lexing and parsing markdown, but not outputting to HTML. However, as it is, I can't quite do so. 

I'm trying to do something akin to syntax highlighting or syntax checking. That is, I want to lex/parse markdown to get metadata about it, but apply that knowledge back to the original source (as opposed to using it to build a separate text of, say, HTML). I'm not actually building syntax highlighter, but it's a pretty close analog in terms of technical requirements.

Right now, the parser is pretty coupled to outputting HTML (instead of, say, outputting an AST and having a separate piece responsible for HTML output) and the lexer does not preserve the original text nor its location:

<S_CODE_TOKEN>

Without a way to re-build the original source text or determine its position, the metadata from the awesome lexer is only useful to HTML generation.

What do you think about including more attributes in the lexer and possibly de-coupling HTML generation from the parser?
",bjeanes,
296,2015-08-14 10:55:50,"+1 for this, my use case is similar. I would like to build an AST over the markdown source code I have. Ideally I can use marked to give me semantic information about the parsed nodes in the source (e.g. all headings). I can do this today, but I cannot map the information back to the original sourcecode because linenumbers and columns are lost.
",bpasero,
295,2013-11-29 11:27:59,"Opened this issue on wrong repo, too bad issues can't be deleted.
",heruan,2013-11-29 11:28:24
294,2013-11-26 07:48:33,"After having tested markdown.js and marked.js, I have realised that marked.js has an important USP: marked.js allows you to embed HTML content, although this might be considered as a weakness in some scenarios.

<iframe width=""560"" height=""315"" src=""//www.youtube.com/embed/0S3FwR7V50Y"" frameborder=""0"" allowfullscreen></iframe> without indentation will render has code in markedown.js and as a nice video in marked.js. Indent it and you will get code in both libraries.

I recommend modifying README.md to let developers know.
",jlchereau,2014-01-17 10:26:49
293,2013-11-25 07:51:50,"In addition to the original source file, please add a minified version. Users will use this file in most production environments.
",nghuuphuoc,2014-04-26 12:36:21
293,2013-12-07 09:13:46,"meh, you can do this yourself. 
",jonathanong,2014-04-26 12:36:21
293,2014-04-26 09:42:19,"Would prefer not having to add grunt to my project just to minify marked. Since the repo is a bower package, it should have a production ready file included.
",yuhama,2014-04-26 12:36:21
292,2013-11-21 15:46:32,"I have this regexp

<S_CODE_TOKEN>

Should get a tag v[url_youtube_video]. How can I expand your plugin to this?
",erickskrauch,
292,2014-06-26 11:28:15,"Duplicate of #57 
",madmuffin1,
291,2013-11-21 11:50:41,"Hi,

I'm attempting to run collaborative-markdown:

https://github.com/joeyb/collaborative-markdown

which uses marked.

However, when I try to access the application, I get the following error message:

<S_CODE_TOKEN>

Cheers,
Victor
",victorhooi,2014-07-13 15:36:23
291,2013-11-23 15:14:51,"You may have accessed to the page that isn't made yet - which means that the markdown value is undefined.
",kpiljoong,2014-07-13 15:36:23
291,2013-11-26 15:54:43,"I hit the same when trying to use https://github.com/FGRibreau/doxx which depends on deprecated github-flavored-markdown.

Has an API changed from github-flavored-markdown to marked? If yes, probably such issues should be addressed in projects that depend on the library. If not, it looks a bug.
",givankin,2014-07-13 15:36:23
291,2014-07-13 15:36:23,"Duplicate of #417.
",scottgonzalez,2014-07-13 15:36:23
290,2013-11-19 08:22:15,"Referred from joemccann/dillinger#117, naming a header ""Settings"" won't be rendered (Tested on dillinger.io);
Can be reproduced with a simple document as

<S_CODE_TOKEN>

Adding or removing any non-whitespace character in the line will show the heading.
",dertseha,2013-12-26 08:32:13
290,2013-12-26 08:32:13,"Please disregard, they found it to be a problem in Dillinger.
",dertseha,2013-12-26 08:32:13
289,2013-11-18 07:25:59,"pygementize => pygmentize
",MoOx,2013-12-04 05:48:07
289,2013-12-04 05:48:20,"Thanks for fixing this!
",ChrisWren,2013-12-04 05:48:07
288,2013-11-16 10:19:20,"When I try to parse [this](https://gist.github.com/prometheansacrifice/7498530) md file, the parser breaks

<S_CODE_TOKEN>
",prometheansacrifice,2013-12-28 17:47:06
288,2013-12-28 17:47:06,"[pygmentize](https://github.com/rvagg/node-pygmentize-bundled) is a module you have to install separately. It is a node wrapper around the python pygments syntax highlighter. 
",ChrisWren,2013-12-28 17:47:06
287,2013-11-14 17:29:46,"<S_CODE_TOKEN>

it always escape & to & amp;
",l2x,
286,2013-11-13 17:18:25,"~~some text~~ is no longer working.
",bsaelim,
285,2013-11-12 12:08:56,"<S_CODE_TOKEN>

| Column 1 | Column2 | Column 3 |
| --- | --- | --- |
| text | `some|code` | text |
",iegik,
284,2013-11-12 04:28:49,"Not sure how often anyone tries to do this other than me, and maybe it is a sign I need to simplify my writing, but github supports tables in lists so here is a simple patch plus tests so marked does too.

For example:
- a list
- table in list
  
  | Weee |
  | --- |
  | I'm in a list |

| Awwww |
| --- |
| Not in a list |

Thanks for looking and thanks for marked.
",q3aiml,
284,2013-11-12 14:28:29,"It's good. +1
",rhiokim,
284,2014-05-22 11:34:15,"+1 I'd love to see it merged!
",ndossougbe,
284,2015-06-30 22:40:40,"@chjj What would it take to get this merged?  I'd also like to see this fixed in Marked.
",Sarev0k,
284,2015-09-07 07:39:12,"+1 - This would be an excellent feature - I think this was shown in the original post, but here's how to get a table in a code block in case anyone is wondering. Use the 3 ticks for code blocks:

<S_CODE_TOKEN>
* Top level bullet
    * Table below
    <S_CODE_TOKEN>
<S_CODE_TOKEN>

Which becomes:
- Top level bullet
  - Table below
  
  <S_CODE_TOKEN>
",michaelmagistro,
284,2016-03-25 07:46:04,"Merge please!
",Treri,
283,2013-11-12 03:50:46,"### tldr;

[Custom html elements](www.html5rocks.com/en/tutorials/webcomponents/customelements/) are coming, and `marked` does not currently recognise them as valid html. Custom elements may have different escaping requirements for their content based on whether the elements contains more elements (like `div`) or plain text (like `script`). Perhaps it would be possible to pass which html tags to escape/not escape as configuration properties.
### Backstory

I've been experimenting with custom elements and I wanted to inject some into [my markdown presentation](https://github.com/timoxley/shadowdom-talk-slides).

<S_CODE_TOKEN> markdown
## Shadow DOM is a sub-tree inside a DOM node
#### Like a mini-iframe that replaces an Element.

<h3>Light DOM</h3>

<S_CODE_TOKEN><S_CODE_TOKEN> diff
-  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|@)\\b';
+  + '|span|br|wbr|ins|del|img)\\b)[\\w-]+(?!:/|@)\\b';
<S_CODE_TOKEN> diff
-        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',
+        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style' || cap[1] === 'play-script' || cap[1] === 'template',
```

[Source](https://github.com/timoxley/marked/compare/feature;custom-html-elements#diff-81ab0a5aa39b7a91951fc28d2d151496L44)

Special-casing my custom element is clearly not at all a solution, but perhaps the tags that are matched here could be passed in as configuration properties.
",timoxley,
283,2014-04-24 22:49:43,"+1
",martypdx,
283,2014-08-19 22:05:16,"+1
",mikomatic,
283,2014-12-10 19:28:31,"+1
",bsr203,
283,2015-09-14 02:18:35,"+1
",lkiarest,
282,2013-11-10 20:01:56,"Added an ability to override some parser's tokens behavior. It may be useful, when generating a html for blog engines etc. I had the case when it expected for code blocks:

<S_CODE_TOKEN>

With the hook, this is trivial to implement:

<S_CODE_TOKEN>

In case you think this feature is not desired, simply close this pull request.

Cheers, Alex
",tenbits,
282,2013-11-26 11:22:44,"Very useful for top-level tokens indeed :-)

I wish there was a similar way for inline/link tokens.
",cecilemuller,
282,2013-12-11 08:02:14,"Oh~ really great idea +1 
",rhiokim,
281,2013-11-10 07:00:23,"Current highlight.js example not work since highlightAuto doesn't take a lang parameter: 

https://github.com/isagalaev/highlight.js/blob/58fc91edbb83708375bda87c02d0fa09b46f4676/src/highlight.js#L427

Would try to use `hljs.highlight(lang, code)` style to pass in the lang but the marked detected language doesn't nearly have a 1-1 mapping with highlightjs. For example, highlight.js doesn't know what `html` or `js` is, will spit out a cryptic `TypeError: Cannot read property 'compiled' of undefined` error if it doesn't know what language you are talking about. 
",timoxley,2013-12-04 06:00:39
281,2013-12-04 06:00:39,"Fixed by: e778ce03da59c92d2fadb899e7e796ab3b45179f thanks for the PR, though!
",ChrisWren,2013-12-04 06:00:39
281,2013-12-04 06:41:22,"np :+1: 
",timoxley,2013-12-04 06:00:39
280,2013-11-08 05:02:05,"<S_CODE_TOKEN>
npm test

> marked@0.2.10 test /xxx/marked
> node test

#1. amps_and_angles_encoding.text completed.
#2. auto_links.text completed.
#3. autolink_lines.text completed.
#4. blockquote_list_item.text completed.
#5. backslash_escapes.text completed.
#6. blockquotes_with_code_blocks.text completed.
#7. case_insensitive_refs.text completed.
#8. code_blocks.text completed.
#9. code_spans.text completed.

#10. def_blocks.text failed at offset 20. Near: ""<blockquote><p>hello</p></blockquote><hr><blockquo"".


Got:
<blockquote><p>hello</p></blockquote><hr><blockquo


Expected:
<blockquote><p>hello[1]:hello</p></blockquote><hr>


#11. double_link.text failed at offset 46. Near: "":<ahref=""http://example.com/""><ahref=""http://example.com/"">h"".


Got:
:<ahref=""http://example.com/""><ahref=""http://example.com/"">h


Expected:
:<ahref=""http://example.com/"">http://example.com/</a>.</p><p

#12. escaped_angles.text completed.
#13. gfm_break.breaks.text completed.

#14. gfm_code_hr_list.text failed at offset 360. Near: "">foo<code>bar</code>bar:</p><p><S_CODE_TOKEN>erbfoo</p></li></ol></li><


Expected:
>foo<code>bar</code>bar:</p><pre><codeclass=""lang-erb"">foo--

#15. gfm_del.text completed.
#16. gfm_em.text completed.
#17. gfm_links.text completed.
#18. gfm_tables.text completed.
#19. gfm_code.text completed.
#20. hard_wrapped_paragraphs_with_list_like_lines.nogfm.text completed.
#21. horizontal_rules.text completed.
#22. hr_list_break.text completed.
#23. inline_html_advanced.text completed.
#24. inline_html_comments.text completed.
#25. inline_html_simple.text completed.
#26. lazy_blockquotes.text completed.
#27. links_reference_style.text completed.
#28. links_shortcut_references.text completed.
#29. list_item_text.text completed.
#30. literal_quotes_in_titles.text completed.
#31. loose_lists.text completed.
#32. links_inline_style.text completed.
#33. main.text completed.
#34. markdown_documentation_basics.text completed.
#35. markdown_documentation_syntax.text completed.
#36. nested_blockquotes.text completed.
#37. nested_code.text completed.
#38. nested_em.text completed.
#39. nested_square_link.text completed.
#40. not_a_link.text completed.
#41. ordered_and_unordered_lists.text completed.
#42. ref_paren.text completed.
#43. same_bullet.text completed.
#44. strong_and_em_together.text completed.
#45. tabs.text completed.
#46. text.smartypants.text completed.
#47. tidyness.text completed.
#48. toplevel_paragraphs.gfm.text completed.
#49. tricky_list.text completed.
46/49 tests completed successfully.
3/49 tests failed.
npm ERR! Test failed.  See above for more details.
npm ERR! not ok code 0
<S_CODE_TOKEN>

<S_CODE_TOKEN>
",jcayzac,
280,2013-11-13 06:31:04,"This issue seems like a duplicate of a known problem #136.

I've posted a “fix” (actually, ordered the failing tests to skip) in #220's Mithgol/marked@eceb35d1e6456680dd08020049214c3d0e8cd8cd, though my pull request (#220) does not seem to be ever noticed.
",Mithgol,
280,2013-12-04 14:09:08,"My pull request (#220) is finally noticed, discussed and merged, and thus this issue (#280) is probably gone.

There were no new versions yet, but you (@jcayzac) may try `npm install https://github.com/chjj/marked/tarball/master` and then `npm test` (in the installed marked's directory) to see if tests pass.
",Mithgol,
280,2013-12-12 02:11:24,"@Mithgol I just cloned the repo and pulled master branch (for some reason the “test“ folder was omitted in the tarball), and tests still fail:

<S_CODE_TOKEN>
$ npm test

> marked@0.2.10 test /Library/GitHub/.../repos/duh/node_modules/marked
> node test

#1. amps_and_angles_encoding.text completed.
#2. auto_links.text completed.
#3. autolink_lines.text completed.
#4. blockquote_list_item.text completed.
#5. backslash_escapes.text completed.
#6. blockquotes_with_code_blocks.text completed.
#7. case_insensitive_refs.text completed.
#8. code_blocks.text completed.
#9. code_spans.text completed.

#10. def_blocks.text failed at offset 20. Near: ""<blockquote><p>hello</p></blockquote><hr><blockquo"".


Got:
<blockquote><p>hello</p></blockquote><hr><blockquo


Expected:
<blockquote><p>hello[1]:hello</p></blockquote><hr>


#11. double_link.text failed at offset 46. Near: "":<ahref=""http://example.com/""><ahref=""http://example.com/"">h"".


Got:
:<ahref=""http://example.com/""><ahref=""http://example.com/"">h


Expected:
:<ahref=""http://example.com/"">http://example.com/</a>.</p><p

#12. escaped_angles.text completed.
#13. gfm_break.breaks.text completed.

#14. gfm_code_hr_list.text failed at offset 352. Near: "">foo<code>bar</code>bar:</p><p><S_CODE_TOKEN>erbfoo</p></li></ol></li><


Expected:
>foo<code>bar</code>bar:</p><pre><codeclass=""lang-erb"">foo--

#15. gfm_del.text completed.
#16. gfm_em.text completed.
#17. gfm_links.text completed.
#18. gfm_tables.text completed.
#19. gfm_code.text completed.
#20. hard_wrapped_paragraphs_with_list_like_lines.nogfm.text completed.
#21. horizontal_rules.text completed.
#22. hr_list_break.text completed.
#23. inline_html_advanced.text completed.
#24. inline_html_comments.text completed.
#25. inline_html_simple.text completed.
#26. lazy_blockquotes.text completed.
#27. links_reference_style.text completed.
#28. links_shortcut_references.text completed.
#29. list_item_text.text completed.
#30. literal_quotes_in_titles.text completed.
#31. loose_lists.text completed.
#32. links_inline_style.text completed.
#33. main.text completed.
#34. markdown_documentation_basics.text completed.
#35. markdown_documentation_syntax.text completed.
#36. nested_blockquotes.text completed.
#37. nested_code.text completed.
#38. nested_em.text completed.
#39. nested_square_link.text completed.
#40. not_a_link.text completed.
#41. ordered_and_unordered_lists.text completed.
#42. ref_paren.text completed.
#43. same_bullet.text completed.
#44. strong_and_em_together.text completed.
#45. tabs.text completed.
#46. text.smartypants.text completed.
#47. tidyness.text completed.
#48. toplevel_paragraphs.gfm.text completed.
#49. tricky_list.text completed.
46/49 tests completed successfully.
3/49 tests failed. 
<S_CODE_TOKEN>

HEAD is abce5d0, and I can confirm your commit shows up in the log.
",jcayzac,
280,2013-12-12 12:16:46,"I have to admit have no idea when something has gone wrong.

Initially I hoped I could find the failing commit in CI build history, but https://travis-ci.org/chjj/marked is empty; apparently @chjj has never logged to Travis CI to flip the CI switch to “on” position.
",Mithgol,
279,2013-11-07 03:18:43,"From downstream: designcreateplay/NodeBB#477

A user is attempting to utilise the marked plugin to render a piece of code. They have the ""highlight"" property set to the following:

<S_CODE_TOKEN>

Other options hidden as they are not relevant.

When marked tries to `marked()` the following code, it takes a very long time (up to 30s):

<S_CODE_TOKEN>

Let me know if I am using marked incorrectly, or if the problem lies upstream (with hljs). Namely, I don't know how to pass a language from my markdown markup to marked, so I left used `highlightAuto`.
",julianlam,
278,2013-11-04 09:01:43,"This:

<S_CODE_TOKEN>

produces:

<S_CODE_TOKEN>

For this feature to be useable, I'm resorting to regex replacements on the ID's - which is just as hacky (and almost as much work) as implementing a complete workaround.  

I love marked.js, we use it extensively on [assemble](http://assemble.io) projects, it would be great if one of the more complete PR's for this was merged in. 
",jonschlinkert,2013-12-29 04:00:08
278,2013-11-05 17:24:42,"hey, it is replacing the characters it can't put into the hash with dashes. I'd think the problem is with the {{ rather than the way it makes hashes. Is it like that for templating or something?
",DTrejo,2013-12-29 04:00:08
278,2013-11-05 17:40:00,"http://assemble.io/helpers/helpers-code.html

> the problem is with the {{ rather than the way it makes hashes. Is it like that for templating or something?

Yes, it's for documentation. So the problem is with the expectation that users should only use certain characters in headings for this solution to work. And if the HTML spec allows me to put those characters in the heading, then the problem is with the overly simplistic regex being used to slugify the heading. 

IMO, the implementation for headings is self-indulgent to maintain an ideal with the parser, rather than being sensitive to the needs of users. e.g. ""Hey, since marked.js can only properly transform A-Z, don't use any other characters in headings and everything will be fine"".   I've already commented this effect here: https://github.com/chjj/marked/pull/181#issuecomment-23209331
",jonschlinkert,2013-12-29 04:00:08
278,2013-11-05 17:49:35,"Ah I see there is some complicated history with this feature. I shouldn't butt in ;)
",DTrejo,2013-12-29 04:00:08
278,2013-11-05 18:51:16,"Sorry if I came across like that. You have just as much of a right to weigh in on this as anyone else 

Sent from my iPhone

> On Nov 5, 2013, at 12:49 PM, David Trejo notifications@github.com wrote:
> 
> Ah I see there is some complicated history with this feature. I shouldn't butt in ;)
> 
> —
> Reply to this email directly or view it on GitHub.
",jonschlinkert,2013-12-29 04:00:08
278,2013-11-05 19:42:16,"No I wasn't offended or anything don't worry.

What do you think you would like the behavior to be for this?

On Tue, Nov 5, 2013 at 10:51 AM, Jon Schlinkert notifications@github.comwrote:

> Sorry if I came across like that. You have just as much of a right to
> weigh in on this as anyone else
> 
> Sent from my iPhone
> 
> > On Nov 5, 2013, at 12:49 PM, David Trejo notifications@github.com
> > wrote:
> > 
> > Ah I see there is some complicated history with this feature. I
> > shouldn't butt in ;)
> > 
> > —
> > Reply to this email directly or view it on GitHub.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/issues/278#issuecomment-27800793
> .

## 

See my projects at dtrejo.com
",DTrejo,2013-12-29 04:00:08
278,2013-11-05 21:09:38,"I like @ChrisWren's solution here: https://github.com/chjj/marked/pull/181#issuecomment-23844696.  However it's achieved I think a simple interface for custom functions would provide users with as much power and flexibility as they need. And really, I'd prefer almost any solution over having marked.js make decisions about how to attributes to my markup.
",jonschlinkert,2013-12-29 04:00:08
278,2013-12-29 04:00:07,"you can now use the renderer to have custom ids
",ChrisWren,2013-12-29 04:00:08
277,2013-11-03 21:10:40,"Inside of my blog, I wanted to add links to each header so they could easily

I am guessing this might be a nice option for others to use but I would like to get feedback from the maintainers before opening a PR.

Modification of https://github.com/chjj/marked/blob/v0.2.10/lib/marked.js#L845-L855

<S_CODE_TOKEN>

Output looks like:

<S_CODE_TOKEN>

For what it's worth I believe this would be much better suited as a pre-parsed transform (or maybe post-parse) but I did not see any Markdown to Markdown transformers and did not want to walk HTML post-parsing.
",twolfson,2013-12-29 03:59:13
277,2013-11-09 15:39:01,"I know this isn't ideal (I'm also advocating a better a solution for header ID's), but for anyone who wants a temporary solution while we're waiting for this to be fixed:

<S_CODE_TOKEN>

This is a pretty basic quickfix, but I don't want to spend too much time working out edge cases on it since the idea is to do something like what @twolfson is proposing
",jonschlinkert,2013-12-29 03:59:13
277,2013-11-09 15:40:59,"and this is going to be obvious to anyone who knows jquery well, but I don't know jquery well lol. but it works well enough for my usage
",jonschlinkert,2013-12-29 03:59:13
277,2013-12-29 03:59:13,"fixed with the new renderer functionality
",ChrisWren,2013-12-29 03:59:13
276,2013-11-03 02:18:42,,jonathanong,2013-12-29 00:40:38
276,2013-11-04 09:01:55,":+1: 
",jonschlinkert,2013-12-29 00:40:38
276,2013-11-08 01:50:44,"I'd be keen to see this too. Perhaps there is an easy way to do it already?
",noducks,2013-12-29 00:40:38
276,2013-11-08 02:03:27,"He told me in an email he should have it soon.
",jonathanong,2013-12-29 00:40:38
276,2013-11-08 02:07:29,"Thanks. Looking forward to it! 
",noducks,2013-12-29 00:40:38
276,2013-12-29 03:09:58,"This is an option now? Or are headers opt-in in the latest release?
",kennethormandy,2013-12-29 00:40:38
276,2013-12-29 03:18:43,"You can create your own renderer 
",jonathanong,2013-12-29 00:40:38
275,2013-11-03 02:17:53,"to publish this commit https://github.com/chjj/marked/commit/ab84e8c6055b020f29134b93c86a9ae2ce955706
",jonathanong,2013-12-29 00:15:27
275,2013-12-29 00:15:27,"new version is out
",ChrisWren,2013-12-29 00:15:27
275,2013-12-29 00:40:21,"Woo! Additional maintainer!
",jonathanong,2013-12-29 00:15:27
274,2013-11-03 01:46:19,"please. really just for bug fixes and administrative stuff like releases.
",jonathanong,2013-12-29 00:40:44
273,2013-11-03 01:25:52,,jonathanong,2013-11-03 03:35:54
272,2013-10-30 16:01:20,"first off: thanks a ton for this library, it's great :)
I notice there are many issue open, maybe do a call for contributors so you don't have to do as much work?

from github's gfm:

<S_CODE_TOKEN>

from marked's gfm:

<S_CODE_TOKEN>

relevant line: https://github.com/chjj/marked/blob/master/lib/marked.js#L845

It would be great if marked used the same style to provide anchor links. this would prevent problems with two ids on the page causing some kind of breakage.

Thanks a ton,
D
",DTrejo,2013-11-02 23:30:01
272,2013-11-03 01:35:12,"can you bump, tag, and release please? wouldn't be much of an issue if we can disable/prepend to the ID which we can't do right now.
",jonathanong,2013-11-02 23:30:01
271,2013-10-26 18:02:53,"This would allow `marked` to create cross references for technical terms enquoted in back ticks if the user provides a lookup function that returns a link. The function may fall through if there is no corresponding link, and may be implemented using any data structure.
",kriskowal,
270,2013-10-21 16:03:11,"https://github.com/GerHobbelt/highlight.js#nodejs

<S_CODE_TOKEN>
",jiyinyiyong,2013-12-04 06:00:55
270,2013-12-04 06:00:55,"Fixed by: e778ce03da59c92d2fadb899e7e796ab3b45179f thanks for the PR, though!
",ChrisWren,2013-12-04 06:00:55
269,2013-10-21 03:55:36,"I stumbled upon an issue that's giving me problems because marked is escaping double and single quotes in all situations and there's no option to change it.

https://github.com/chjj/marked/blob/master/lib/marked.js#L999-L1000

I'm no markdown expert, but I'm converting a project to node that previously used Ruby's [rdiscount](http://dafoster.net/projects/rdiscount/), which does not escape quotes. I do not see any reason (from an HTML perspective) to force escaping of quotes, so I think it makes sense to add an option to prevent this behavior.

If this is something you'd consider, I'd be happy to submit a pull request. Just let me know.
",philipwalton,
269,2013-10-28 03:42:29,"Agreed, this is a big problem for us with [assemble](http://assemble.io). We use handlebars and marked.js together, and since marked.js alters templates, it's preventing us from adding marked.js as a default converter.

The problem is that by escaping quotes, marked converts `{{foo 'include.md'}}` to `{{foo &#39;include.md&#39;}}`, which obviously is no longer a valid Handlebars template. 
",jonschlinkert,
269,2013-10-28 03:50:03,"Yes, that's _exactly_ the same problem I'm having. And it's with Handlebars no less.

Have you forked and fixed or simply chosen a different markdown converter?
",philipwalton,
269,2013-10-28 04:18:20,"https://github.com/assemble/pagination/commit/59a08b7107c42352e6eb308daca33d2d865628a9#commitcomment-4439647
",jonschlinkert,
269,2013-10-28 04:19:59,"https://github.com/assemble/assemble/issues/343#issuecomment-26209354
",jonschlinkert,
269,2013-10-28 04:23:38,"> Have you forked and fixed or simply chosen a different markdown converter?

No, we just continue to use helpers for converting markdown, specifically so that we don't have to deal with the support issues related to this. However, before this continues to sound like like I'm complaining about marked, I really like this lib and use it quite extensively. We just don't have the time to support the issues related to including marked as a default converter. 

However, we're refactoring assemble, and I want to have assemble convert markdown natively after that. So hopefully we can get this hammered out.
",jonschlinkert,
269,2013-11-04 09:04:34,"@chjj would you be open to someone helping out with this project? If so, I'd like to throw my hat in.
",jonschlinkert,
269,2014-05-28 15:59:41,"I just ran into this as well.  Any progress?
",mattly,
269,2014-07-03 23:29:47,"+1 same thing
",welldan97,
269,2014-07-15 12:02:19,"any progress? @chjj 
",weekeight,
269,2014-08-27 02:31:17,"I just had this same issue using Marked with React, which escapes everything by default.

I'm not 100% on the implications of this, but the React docs (http://facebook.github.io/react/docs/jsx-gotchas.html#html-entities) suggest using unicode characters to avoid escaping issues. Could Marked's escape() function (https://github.com/chjj/marked/blob/master/lib/marked.js#L1076) be modified to do replacements with unicode characters instead? For example, `.replace(/""/g, '\u0022')` instead of `.replace(/""/g, '&quot;')`?

This seems to work ok for me on first inspection, but I'm not confident about the affects of this, and other things like browser support.

Anyone else care to weigh in?
",nfm,
269,2015-02-06 20:26:02,"Just ran into this. :+1: 
",ethanmick,
269,2015-02-06 20:59:49,"Related: #529
",adam-lynch,
269,2015-09-20 20:46:04,"The code in question seems to be here: https://github.com/chjj/marked/blob/master/lib/marked.js#L685

Shouldn't we have something like this?

<S_CODE_TOKEN>
",cri5ti,
269,2015-10-26 18:59:00,"I know I'm late to the party, but I just hit this as well doing something similar with Handlebars + marked and thought I'd throw in my +1.
",rosshinkley,
269,2015-11-28 22:14:37,"+1 Faced the same issue (Handlebars + marked)

@cri5ti, your suggestion fixes my issue. Thanks!
",r0hitsharma,
269,2016-03-06 18:25:42,"+1 Same issue for me as well.
",snollygolly,
269,2016-07-25 19:14:43,"+1 Also ran into this. How is everyone working around this issue? Just applying @cri5ti code change after npm install?
",patrickheeney,
269,2016-08-23 08:47:05,"+1 it's works for me.
",caizone,
269,2016-08-23 15:30:18,"If someone would like to submit a PR with passing tests that will help move the issue along. 
",matt-,
268,2013-10-18 03:51:53,"New option to control if code block is wrapped with pre/code elements. Default is true for backward compat.

Can be turned off to let the highlight function handle wrapping for custom layouts.
",mvhenderson,
267,2013-10-16 17:01:15,"More of a question I guess, but does Marked pass all MDTests?
",OscarGodson,
266,2013-10-15 10:35:17,"So, we have columns, for example:

<S_CODE_TOKEN>

| Some | text | and number |
| --- | --- | --- |
| some | long text | 1 |
| awesome | another text | 1 |

Now, I need, that second column will be larger and last - smaller. Obviously, that we look at line that goes after headers: if shorter stroke - shorter column.

Solution:
So, count the dashes (with space and column separator) and use percentage width's by the ratio!
For example `table { width:100%;}` (Total: 24chars), `<th style=""width:29.17%"">` (first column - 7chars),  `<th style=""width:45.83%"">` (second column - 11chars),  and leve last without width's. http://jsfiddle.net/iegik/3D2Fb/
",iegik,2014-06-04 11:40:14
266,2013-10-15 13:42:57,"You can add a style with the selector element by number, for example:

<pre><code>&lt;style&gt;
table:nth-of-type(1) {
    display:table;
    width:100%;
}
table:nth-of-type(1) th:nth-of-type(2) {
    width:10%;
}
&lt;/style&gt;</code></pre>
",aplib,2014-06-04 11:40:14
266,2013-10-18 11:11:42,"Not a solution. I have more then one table on the page.
",iegik,2014-06-04 11:40:14
266,2013-10-18 11:41:11,"<code>table:nth-of-type(1) {<code>

1 - number of the table
Indexing is from 1
",aplib,2014-06-04 11:40:14
266,2013-11-12 12:01:32,"I just wanted to

the Table 1:

<S_CODE_TOKEN>

and Table 2:

<S_CODE_TOKEN>

looked the same as they are in source - the same column width (proportionally).
And in HTML solution is to pass inline style attribute with ""width"" values in ""%"" to table headers:

<S_CODE_TOKEN>

But leave last column without inline styles, so it will not break the layout:

<S_CODE_TOKEN>
",iegik,2014-06-04 11:40:14
266,2013-11-13 16:56:34,"Updated example: http://jsfiddle.net/iegik/3D2Fb/
",iegik,2014-06-04 11:40:14
266,2013-11-29 17:43:54,"Most of the features you are requesting don't fit in well with the greater de facto markdown spec. I don't think they should be included in marked. This kind of stuff should really be done in a custom markdown extension, but I wouldn't call it markdown.
",jondlm,2014-06-04 11:40:14
266,2013-11-29 18:09:39,"<del>I agree with @jondlm . You should open a new repo for it. IMO, marked.js should be kept as lightweight as possible, being a good replacement of Showdown.js .</del>(deleted)

Tables are really useful sometimes, I also want a Markdown variant to deal with that. :)

BTW, adding a number after the vertical bar may be better.

<S_CODE_TOKEN>

And you may like DokuWiki markdown syntax about tables: https://www.dokuwiki.org/wiki:syntax#tables It is more elegant, though no way to specify column width. (If you have made a markdown extension for this, I will be glad to head that.)
",jakwings,2014-06-04 11:40:14
266,2013-12-12 18:52:34,"The main goal for Markdown is to keep all simple.
So, don`t think, that some numbers will make text beautiful!

KISS, I am trying to keep MD style using only ""|"" and ""---"" characters, that looks like simple lines. Inline style `""width:**%""` affects only relatively to the table and do not make BIG changes it visually. (aka layout staff)

<S_CODE_TOKEN>

— will not look like tables head, also ""^"" - usually means Exponentiation

<S_CODE_TOKEN>

— looks much better!

**I`ll not to try change the holy Markdown, just want do represent it better!**
",iegik,2014-06-04 11:40:14
266,2013-12-13 09:36:06,"This feature does not make sense, because it depends too much on viewport size of the browser, or exactly on the width of the whole table. And these things are not known to the parser, nor renderer. This should be achieved with client-side javascript. What else - if anyone uses css `table-layout: fixed`, it breaks immediately.
",kuba-kubula,2014-06-04 11:40:14
265,2013-10-15 08:32:20,"Following #263 and #264, we can also implement textarea!
Here is a simple table:

<S_CODE_TOKEN>

and here is the textarea field:

<S_CODE_TOKEN>

As you see the only different is, that table has headers and more than one column :)
",iegik,
264,2013-10-15 08:28:29,"Following #263, we can also implement simple input boxes:

<S_CODE_TOKEN>

should produce:

<S_CODE_TOKEN>
",iegik,
263,2013-10-15 08:24:36,"Sometimes need show some configuration visually, there is checked/unchecked options:

<S_CODE_TOKEN>

should produce:

<S_CODE_TOKEN>

Also can do the same for ""Radio boxes"":

<S_CODE_TOKEN>

should produce:

<S_CODE_TOKEN>
",iegik,
263,2014-09-02 15:52:38,"+1
GFM already has this feature for a long time
https://github.com/blog/1375%0A-task-lists-in-gfm-issues-pulls-comments
- [x] test
",alxdnlnko,
263,2014-09-07 14:54:06,"Not all of them:
- (o) Foo
- ( ) Baz
- ( ) Bar
- [x] Foo
- [x] Baz
- [ ] Bar
",iegik,
263,2014-10-26 22:37:21,"Duplicate of https://github.com/chjj/marked/issues/107?
",frosas,
263,2014-11-13 02:54:56,"+1 to this
",lvaughn,
263,2016-01-11 03:55:38,"There's a pull request in #587 for this.
",gkoberger,
262,2013-10-14 10:14:10,"Let's say I have this implementation of marked, which might or might not be a great one:

<S_CODE_TOKEN>

And in the Jade template, I just print the entire postBody. For some reason, the marked down gets parsed twice. A first time with correct parsing; a second one where everything is a paragraph and inclues a < and a > at the end of the parsing.

I tested it with multiple levels of MD complexity, and always gets parsed wrong. Could it be my implementation? It seems to parse fine with namp, but not in marked.
",ghost,2013-10-14 10:26:53
262,2013-10-14 10:18:02,"To expand, the CLI parses MD just fine. Maybe it's just a silly way of using Marked with FS in Node.
",ghost,2013-10-14 10:26:53
262,2013-10-14 10:26:53,"To expand further: the same happens with node-markdown, so it's not a marked issue but one of my implementation. Closing the issue :)
",ghost,2013-10-14 10:26:53
261,2013-10-14 03:46:25,"v0.2.0 works fine.

v0.2.9 throws 'self is not defined' when browserifying

Best guess is that self should be declared before the return statement here.

<S_CODE_TOKEN>
",KoryNunn,
261,2013-11-02 23:23:34,"`self` is defined. It's referencing its containing function.
",chjj,
260,2013-10-11 09:07:12,"when `opt` is not passed, opt should be default options, or an error will be raised when accessing `opt.highlight`. 

Sorry for not adding testcase, I don't know how, wish to see mocha or other testsuit in the future :)
",supersheep,
260,2013-10-22 09:14:34,"minimal failure case

<S_CODE_TOKEN>
",hayeah,
259,2013-10-09 17:36:21,,KyleAMathews,2015-12-05 18:37:15
259,2013-10-29 14:48:38,":+1: From Bower 0.9.0 `components.json` should be renamed to `bower.json`.
",heruan,2015-12-05 18:37:15
259,2013-12-07 09:24:18,"`component.json` is for component, not bower. -1 renaming +1 addition
",jonathanong,2015-12-05 18:37:15
259,2013-12-16 13:14:13,"+1

Current code leads to a wrong path (missing `.js`):

<S_CODE_TOKEN>
",jiyinyiyong,2015-12-05 18:37:15
259,2013-12-16 21:42:20,"@jiyinyiyong that's the path to the Marked directory (which bower defaults to w/o a main directive). Once this is merged the path will be `bower_components/marked/lib/marked.js`
",KyleAMathews,2015-12-05 18:37:15
259,2014-03-31 20:53:54,"+1 for adding bower.json.  Also, [bower recently added the ""moduleType"" key](https://github.com/bower/bower/pull/934), which tells tools what type of module formats a package provides.  So including `""moduleType"": [""amd"", ""node"", ""globals""]` would be cool, too, since marked supports those 3!
",briancavalier,2015-12-05 18:37:15
259,2014-03-31 20:55:00,"+1 to bower.json and ""moduleType"" property :)
",unscriptable,2015-12-05 18:37:15
259,2014-04-07 16:33:14,"+1 @chjj please please please
",xaka,2015-12-05 18:37:15
259,2014-04-07 18:14:00,"Yay, thanks @KyleAMathews for adding `moduleType`, and keeping this PR up to date!
",briancavalier,2015-12-05 18:37:15
259,2015-12-05 17:49:40,"@KyleAMathews this can probably be closed since bower.json was added at the [end of April 2014](https://github.com/chjj/marked/commits/master/bower.json).
",OmgImAlexis,2015-12-05 18:37:15
258,2013-10-09 17:20:09,"<S_CODE_TOKEN>

Output is:

<S_CODE_TOKEN>

Screenshot:
![screenshot](https://i.cloudup.com/SzbP7HQugN-3000x3000.png)
",mmalecki,
258,2013-10-09 20:58:47,"This seems to be caused by list outdenting.
",mmalecki,
258,2015-02-14 08:13:44,"Any fix for this issue? I've come across this issue, too.
",zTrix,
258,2017-03-06 03:18:15,"I'm having similar problems.

Posted a comment over here #789 about it.",hollowdoor,
258,2017-03-07 05:10:25,What about the fix @cbmixx made? Would someone be interested in integrating that fix in the current iteration of `marked`?,hollowdoor,
257,2013-10-06 11:14:57,"If for example we have this html in our markdown:

<S_CODE_TOKEN>

then content of `<script>` will be escaped. But content remains unescaped if `<script>` is not surrounded with html:

<S_CODE_TOKEN>

If [here](https://github.com/chjj/marked/blob/master/lib/marked.js#L357) we just set `pre: true` then content of `<script>` within html will not be escaped as expected. Is it a bug or a feature, and how can I force marked.js to not escape content of `<script>` within html?
",andreyvolokitin,
257,2013-11-10 22:20:27,":+1: 
",timoxley,
257,2015-08-09 14:18:32,"+1

I'm using marked as part of an styleguide generator and need to embed script tags in HTML. Is there an option to deactivate this kind of behaviour?
",pixelkritzel,
257,2015-08-09 15:12:24,"And hopefully I found a solution for my case. I have to see, if there will be some unforseen consequences. But I set the `pedantic` option to true.
",pixelkritzel,
256,2013-10-01 02:12:24,"<S_CODE_TOKEN>

result:

<S_CODE_TOKEN>
",aplib,2013-10-01 02:58:59
256,2013-10-01 02:58:52,"List parsing behavior is accurate to the original markdown.pl. If you want to write conforming and portable markdown, put two newlines before a list if it follows a paragraph. 

The latest unreleased marked implements GFM list behavior (with the `gfm` option), which is the behavior you're looking for. It is incredibly flawed behavior in my opinion, but since there were so many issues like this, I reluctantly decided to add it. This is already fixed for the next release.
",chjj,2013-10-01 02:58:59
256,2013-10-01 05:25:32,"Thanks!
",aplib,2013-10-01 02:58:59
255,2013-09-26 06:44:21,"I try to use marked with [google-code-prettify](https://code.google.com/p/google-code-prettify/) and fall in problem that marked always renders `<pre><code>...</code></pre>` although for prettifying I need just `<pre class=""prettyprint"">...</pre>`:
https://github.com/chjj/marked/blob/master/lib/marked.js#L869
Option `highlight` does not help. 
I would be cool to have some option to control it.
thx!
",vitalets,
255,2013-09-26 12:30:25,"I think you can use this:

<S_CODE_TOKEN>

just before you call prettify function `prettyPrint()`
",TjRus,
255,2013-09-26 13:28:24,"yes, thanks! 
I also done it on server side via `marked.lexer` patch

<S_CODE_TOKEN>

it would be great to have some option out of box.
",vitalets,
254,2013-09-25 08:07:57,"http://kramdown.rubyforge.org/syntax.html#definition-lists

(In html4 it was called definition list, in html5 its called description list)
",adius,
254,2014-03-25 22:51:22,"Would you guys accept a pull request for this?
",adius,
254,2014-06-04 19:07:13,"+1, can just be accessible as a default renderer method. 

For reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl
This is a standard HTML element.
",rayshan,
254,2014-07-03 08:57:48,"Any luck?
",gelitenight,
254,2014-10-29 17:01:03,"+1

We just used this to solve our problem, similar to the way he does it [here](https://github.com/chjj/marked/#renderer) for Headings :-

<S_CODE_TOKEN>

It's not perfect, as the `<dl>` tags get duplicated around each row / definition in the list, but we were happy with the result.
",samjewell,
254,2015-01-01 17:43:03,"+1 I find that definition lists are incredibly useful!
",nschneid,
254,2016-09-28 07:21:33,"+1 
",ljl,
253,2013-09-24 13:50:08,"When using

<S_CODE_TOKEN>

HTML comments will get included into a p tag and so be visible in the output!
",adius,
253,2015-02-08 14:17:29,"Is there any update on this one?

I'm seeing my comments in the resulting HTML.
And I see there's other people reporting this as well.

Testing with:

<S_CODE_TOKEN>

Result:

<S_CODE_TOKEN>
",alexilyaev,
253,2015-06-14 09:06:06,"Bump?
",f03lipe,
253,2015-07-10 03:40:41,"+1 :+1:
",travs,
253,2015-09-22 15:08:05,"+1
",bryanjacquot,
252,2013-09-23 15:23:09,"Why is there no option to print out compressed html?
I think that's definitely a ""must have"" feature!
",adius,
252,2013-12-07 09:25:43,"you're not going to gain anything here since it'll just convert `\n` characters to `''`.
",jonathanong,
252,2013-12-07 09:29:50,"@jonathanong ? …and why exactly is saving bandwidth and preventing layout bugs because of newline whitespace not an advantage?
",adius,
252,2013-12-07 09:30:45,"for 100kb of rendered markdown, you're going to save like 50 bytes. it's not about whether there's an advantage or not, it's about cost/benefit.
",jonathanong,
252,2013-12-07 09:35:53,"and what are the costs? -.-   In a cashed environment with heavy traffic it's a huge benefit! (and it's damn annoying if you have to put html code which you normally would split over several lines in the same line to prevent layout bugs, because HTML is NOT whitespace insensitive.
",adius,
252,2013-12-07 09:40:48,"maintainability. additional options. i doubt you serve enough traffic where the savings would be noticeable - you'd have to be google or Facebook for the benefit to be HUGE. layout bugs with rendered markdown sounds like a CSS problem, which i've never had nor understand since most elements are block elements where whitespace is insignificant. 
",jonathanong,
252,2013-12-07 10:51:40,"<S_CODE_TOKEN>

This will render a space between the two divs and this is normally not what you want in this situation. To prevent this behavior you have to write them in the same line. This sucks! …but it doesn't look like you are open to any reasonable Arguments. So whatever, I'll just open my own branch. cu
",adius,
252,2013-12-07 10:53:39,"why would you ever do that? of course you're going to run into layout problems if you write terrible HTML.

actually, more importantly, why would marked do that? but this argument is pointless so i'll stop too.
",jonathanong,
252,2014-08-21 19:28:52,"@jonathanong I have a good reason for this
I'm using marked inside a pre element since it's space sensitive, the margin dont get merged. I cannot remove newline on the resulting string because code block inside the markdown will loose their layout.
",MasseGuillaume,
252,2014-08-21 19:56:47,"I had good reasons as well (…and of course I'm not using inline styles in real code)
@jonathanong just seems to be totally unreasonable
Good luck at convincing him of anything.
",adius,
252,2014-08-22 01:56:02,"@adius ad homminem, the guys is doing a good job with this free open source project.
",MasseGuillaume,
252,2014-08-22 08:56:20,"maybe. But he's doing a shitty job with this issue…
",adius,
252,2014-08-25 18:54:34,"@jonathanong 
nvm you can use `white-space: normal` to discard white spaces in pre
",MasseGuillaume,
252,2014-09-16 13:40:29,"I see no reasonable reason to remove the semantic information that whitespace can offer.  This is especially true in the case of Markdown where by design you are encouraged to wrap lines.  Maybe you wanted to make an editor that could enforce or alter a user's desired line wrap setting. I would also argue that it just makes better sense in terms of search-ability. I think it's a pretty sane choice to leave compression out rather than risk encouraging it.

I would also argue that compression has no real economic value any longer.  Cloud keeps getting cheaper and mobile networks keep getting faster.  If anything I would say the real enemy is the AMD pattern used in browser based development.  It encourages an excess of connections which ultimately slow down a user's experience and adds more traffic.

If you really need to compress, just do it in a post process.  I'm sure there has to be something out there to enable that.
",howardroark,
252,2015-06-14 02:15:20,"If you compress your regular html it would be nice if the html output from markdown would be also compressed. I agree, its a must have feature. Some workaround already?
",rudolfschmidt,
251,2013-09-23 09:20:06,,adius,2013-12-04 06:11:20
251,2013-12-04 06:11:20,"This is not needed. If the config object isn't supplied, the default options are used.
",ChrisWren,2013-12-04 06:11:20
251,2014-04-13 14:16:36,"…but I'm pretty sure the example did not work without it or otherwise I wouldn't have changed it. ^^
",adius,2013-12-04 06:11:20
250,2013-09-18 19:32:17,,devinrhode2,2013-09-18 19:33:12
249,2013-09-18 09:54:24,">  How can I develop an extension for marked?
",demohi,2015-10-22 07:02:10
249,2014-10-22 08:54:08,"+1
",elennaro,2015-10-22 07:02:10
248,2013-09-16 04:43:28,"Prevent removing korean character(hangul) on header id.
- hangul: http://en.wikipedia.org/wiki/Hangul
",hackerwins,2013-09-26 07:44:52
247,2013-09-13 04:44:59,"After using marked for awhile and reviewing the multiple pull requests about how to render headers, I thought it would be nice to have an extensible interface to customize header markup.

As a user, I personally want something like GitHub headers where a relative link appears when the user hovers, but I also understand that some people want simpler headers with just an anchor tag or the current one with just an id.

To keep everyone happy, I thought we could expose the header rendering as an option so that some users can simply use the default rendering while others can do cool GitHub headers or other creative stuff.
",ChrisWren,2013-09-14 16:55:31
247,2013-09-14 16:55:31,"Closed in favor of #199
",ChrisWren,2013-09-14 16:55:31
246,2013-09-12 07:46:39,"The README example says `__markdown__` outputs `<i>markdown</i>` but it actually outputs `<strong>markdown</strong>`.
",jheusala,2013-12-04 05:49:54
246,2013-09-14 17:06:51,":+1: Good find!
",ChrisWren,2013-12-04 05:49:54
245,2013-09-07 09:55:28,"Adds option for custom code block rendering. Adds line numbers to code
block.

I don't know, what do you guys think? I figure since I had something working I'd offer it up and see what kind of response it gets.

Anybody willing to write tests for this? Because I have no idea how to do the tests for this.
",jehoshua02,
244,2013-09-06 09:09:13,"Since markdown supports different kinds of bullets, such as ""-"" and ""+"", it can be useful to see which one was used. We have used this to create a different markdown dialect in which different bullet types have different meanings.
",janpaul123,
243,2013-09-04 20:30:57,"Covers chjj/marked#239
",roydukkey,
242,2013-09-01 12:39:20,"<S_CODE_TOKEN>
marked(""<S_CODE_TOKEN>\n\n<S_CODE_TOKEN>"")
<S_CODE_TOKEN>

=>

<S_CODE_TOKEN>
""<pre><code class=""lang-1<S_CODE_TOKEN>2</code></pre>
""
<S_CODE_TOKEN>

rem: pony named Tony, he came ...
",aplib,
242,2013-11-13 16:20:55,"You should try this:

<S_CODE_TOKEN>

=>

`1`

`2`
",iegik,
241,2013-08-31 08:57:40,"Maybe it's time to publish the latest fixes to NPM.

<S_CODE_TOKEN>

Obviously not working when `opt` is `null`
",simov,2013-11-02 23:12:20
241,2013-10-07 18:01:58,":+1:  Just realized this is the issue I am having...
",DevinClark,2013-11-02 23:12:20
241,2013-10-26 22:30:56,"Please publish, will be easier to see which bugs have been already fixed.
",paazmaya,2013-11-02 23:12:20
240,2013-08-30 22:06:16,,ianb,2013-12-04 06:01:15
240,2013-09-15 15:03:05,":+1: Thanks for fixing this!
",ChrisWren,2013-12-04 06:01:15
240,2013-12-04 06:01:15,"Fixed by: e778ce03da59c92d2fadb899e7e796ab3b45179f
",ChrisWren,2013-12-04 06:01:15
239,2013-08-29 18:04:39,"How do you feel about allowing pedantic configuration at sub-level? This wouldn't affect the current allotment for `pedantic: true` but would allow additional options:

<S_CODE_TOKEN>

What do you think are appropriate option names?

In reference to #236.
",roydukkey,
239,2014-03-21 08:20:52,"+1
",gnab,
238,2013-08-28 21:59:30,"A simple implementation to work with emoji's like proposed in original #233 issue.

Unlike the complex idea mentioned in #233 this is a more elegant solution that only generates the replacement html code (or whatever you override as template). So no complicated data modules or funky stuff. 

Users will need to source and host the images for themselves, but can customise the template function to be as as simple or fancy as they require (examples provided).

Closes #233, work to solve https://github.com/isaacs/npm-www/issues/392
",Bartvds,
238,2013-09-23 14:14:21,"@chjj Have you had the opportunity to review this? 

It would be great if this feature can be merged for use by the various `marked` dependants (like `npm` and many others).

Github currently support emojis in all their markdown but they show up as unparsed codes in projects that pull the README.md's and use marked to parse them
",Bartvds,
238,2014-01-20 05:26:30,"+1

It should be noted that you can easily download the emojis from here: https://github.com/arvida/emoji-cheat-sheet.com/tree/master/public/graphics/emojis
",jbueza,
238,2014-01-20 16:41:15,"+1 :+1: 
",evanwon,
238,2014-01-29 11:53:18,"I've updated the PR so it would merge again:

@chjj It would be cool if this could be considered for merging, so all downstream consumers can enjoy easy emoji replacement.

The implementation is very basic (generic) so we could use it with whatever image hosting service you want (using the callback you can also filter specific codes).
",Bartvds,
238,2014-01-29 15:49:40,"@Bartvds I'm curious about how this works: If emoji image files aren't provided, what happens?
",evanwon,
238,2014-01-29 16:09:36,"It is the users responsibility to make sure only emojis are used for which he has the image files.  This PR only does the parsing of the code.

If you want 100% sure you only use valid codes then you need to use the callback option to do a verification step.

See the section in the [readme](https://github.com/Bartvds/marked/tree/640f829404b7173bf1f78072257c1509e9e5dec8#emoji) for the options.
",Bartvds,
238,2014-01-29 16:35:21,"Awesome work @Bartvds !
",jbueza,
238,2014-04-22 21:35:33,"+1, also a general plugin system is really needed: https://github.com/chjj/marked/pull/35
",rayshan,
238,2014-04-28 03:17:33,":+1: 
",lefnire,
238,2014-08-01 18:35:12,":+1: 
",tadatuta,
238,2014-08-01 18:42:01,":+1: 
",zxqfox,
238,2014-12-15 18:58:01,":+1:

I'm also excited to be able to use this for FontAwesome icons.
",gkoberger,
238,2014-12-16 07:54:43,"This PR has been pending for way more then a year, so I don't even know if it makes sense anymore as I moved on by now. 

If emoji support is ever going to be added here it should probably be with an updated and resubmitted PR. 
",Bartvds,
238,2014-12-16 11:15:39,"> If emoji support is ever going to be added here it should probably be with an updated and resubmitted PR.

It would be great if a maintainer could comment and say whether or not they'd be open to this feature though first.
",adam-lynch,
238,2014-12-17 22:15:05,"@Bartvds either way, I forked + included your commit, and it's working great for us. Thanks a ton :)
",gkoberger,
238,2015-05-11 17:59:38,"Any updates on this? I'd love for this to be merged.
",johanbrook,
238,2015-07-06 07:27:49,"is this ready to merge now :question: 
",wayou,
238,2015-10-15 22:10:13,"… is there anything preventing this merge?
",gtramontina,
238,2015-10-16 00:18:28,"I've been using it without issue for over a year. :+1: 
",gkoberger,
238,2017-03-23 09:58:50,"It's 2017 now, can we please have emojis?",Snede,
237,2013-08-27 09:49:48,,insanehong,2014-06-18 08:02:17
236,2013-08-24 23:51:14,"Here is what I don't understand: Why does marked parse some features in HTML blocks and not others?
#### Example 1

<S_CODE_TOKEN>

**Outputs**

<S_CODE_TOKEN>
#### Example 2

<S_CODE_TOKEN>

**Output**

<S_CODE_TOKEN>

I would like, most, to see these issues being fixed, allowing HTML blocks to be truly untouched. Then, begin further discussion on other topics like #66, #133, #115.
",roydukkey,
236,2013-08-25 00:12:12,"This:

<S_CODE_TOKEN>

Will give you the behavior you're looking for. A block-level element needs 2 line feeds after it to be recognized as a block-level element. Block-level markdown is not allowed inside block-level inline html. The problem with your second piece of markdown was, the first `<div>` tag was being seen as its own self-closing tag.

The author is expected to give 2 line feeds after the closing tag of their block element. It just makes it much easier to deal with nested divs. Marked could be smarter about this at the cost of performance. I'll see if I can come up with something as performant, but smarter. It's going to actually need to keep state and set up a stack with the current element on the top (the original markdown.pl does not do this at all. try giving it some nested divs and watch what happens).
",chjj,
236,2013-08-25 00:23:10,"How about **Example 1**? I would consider the output incorrect. I would expect anything inside an HTML block to remain untouched.
",roydukkey,
236,2013-08-25 04:05:47,"Example 1 is correct. Only inline markdown is allowed within inline html (markdown.pl does not allow any markdown inside html, this a marked extension). I'd recommend creating separate issue for that.
",chjj,
236,2015-08-21 17:48:28,"Is there a way to disable this ""extension""?
",donleyp,
235,2013-08-24 13:04:57,,aplib,2013-08-24 15:15:00
234,2013-08-23 17:57:49,"As discussed on IRC i would like to have an option to produce XHTML output for tags with empty elements (e.g. `<br/>`).
This is the default behaviour of `Markdown.pl`.
By default marked will render to modern HTML and will use the empty element syntax only when the option is `true` (`xhtml: true`).
If i'm not mistaken there are only 3 tags involved (`<br>`, `<hr>` and `<img>`).
This feature will allow me to add marked's output in a xml document which will be invalid otherwise.
Unfortunately CDATA does not work in my case, but luckily HTML entities are not a problem.
",lpinca,2014-11-16 19:50:12
234,2013-08-24 09:07:05,"You may try using [`cheerio`](https://github.com/MatthewMueller/cheerio) as a workaround until this issue is fixed.

Example:

<S_CODE_TOKEN>
",Mithgol,2014-11-16 19:50:12
234,2013-08-24 10:52:35,"@Mithgol do you mean something like this?

<S_CODE_TOKEN>

That may work but it's like doing the job twice and could be done with few simple regex without the aid of another module e.g.:

<S_CODE_TOKEN>

The feature is quite easy to implement, there are only few things to handle with tests, tests generation and benchmarks.
Anyway thank you for the suggestion!
",lpinca,2014-11-16 19:50:12
234,2013-08-24 11:35:41,"Your regex actually has to be slightly more complex (with `[^>]*` at least).

Otherwise it would silently ignore `<br clear=""all"">` and `<img alt=""whatever"">`.
",Mithgol,2014-11-16 19:50:12
234,2013-08-24 11:50:26,"Yes, it was just an example.
",lpinca,2014-11-16 19:50:12
234,2013-08-24 23:54:09,"XML support is more complicated than just adding a trailing slash. Marked does not include the trailing slash on purpose:
1. Because XHTML is dead, and you shouldn't be using it anyway. HTML5 does allow for the trailing slash, but it was only added there for transitioning from XHTML. It serves nothing more than an aesthetic purpose (I think in some browsers `<script/>` has different behavior, but that's the only thing that disagrees with this statement).
2. XML-compliant output is more difficult than it looks.
3. If you need to include HTML in your XML document, it should be encoded or wrapped in a CDATA PI. It shouldn't be polyglotted. An example of this is RSS and Atom feeds. RSS feeds do not try to actually include the excerpt of html as part of the xml itself, it either encodes it or wraps it in CDATA.

So, my suggestions are: either use a `<![CDATA[..]>` processing instruction, or encode it and decode it on the otherside.

If the XML parser in question doesn't support CDATA, why should marked be changed just because of an XML parser's shortcomings? Who knows what else might not work with that particular parser. Trying to make marked output perfect XML is a flimsy solution in my opinion.

The other problem I have with this is the user has to be aware that their markdown is being compiled to xml. They have to be careful not to use any entities that are defined in HTML but not XML (or, I suppose marked could _also_ account for this, which means adding more code just for XML support. An easy way to do this would be to wrap all text tokens in CDATA, but CDATA doesn't work with the parser in question). How would inline html work? Would marked parse it and alter it to be proper XML, e.g. `<a href=foo>` to `<a href=""foo"">`? Marked would need its own html parser at that point. It's just a lot of code for little benefit.

Also, if marked ever implements markdown.pl behavior and does not encode stray `>`'s, this would also break XML. It's really difficult to guarantee perfect xml-compatible output.

This type of situation is _exactly_ what XML's `CDATA` is meant to be used for. If the XML parser doesn't support it, I suggest using a different XML parser or escaping the html to character references and decoding it on the receiving side.

I'll leave this issue open if anyone has any other arguments in favor of XML support.
",chjj,2014-11-16 19:50:12
234,2013-08-25 09:04:16,"As i already told you on IRC, i agree with your point of view.
`<!CDATA[...]>` should be the natural way to deal with this kind of problem, and yes it's doesn't have sense to add XML support only because a particular XML parser doesn't play well with `CDATA`.

On the other side, alternatives offer the ability to render XHMTL:
- [robotskirt](https://github.com/benmills/robotskirt) allows you to pass `HTML_USE_XHTML` flag to the HTML renderer
- [markdown-js](https://github.com/evilstreak/markdown-js)'s README explicitly states that it has the ability to output both HTML and XHTML (i haven't tested it personally)

I ended up using [robotskirt](https://github.com/benmills/robotskirt) for this particular project, but i will certainly use `marked` in a future project where XHTML will be not needed or `<!CDATA[...]>` will work as intended.

Thank you @chjj.
",lpinca,2014-11-16 19:50:12
234,2014-01-06 01:14:24,"When serving application/xhtml+xml with embedded markdown parsed by marked, marked's browser renderer will synthesize malformed XML and attempt to insert it into the DOM. This causes a run-time error. The fix is provided in #330 along with patches to the tests and test generator.
",dsheets,2014-11-16 19:50:12
233,2013-08-16 16:02:50,":octocat: The markdown parser used by Github supports [emoji](http://www.emoji-cheat-sheet.com/)s.

:interrobang: It'd be nice if they would be enabled in `marked` so they show up correctly in dependant projects like npm's readme pages, as they currently display as unparsed codes.

:point_right: https://github.com/isaacs/npm-www/issues/392 :point_left:

The :warning: and :x: are great for emphasis.
",Bartvds,
233,2013-08-22 01:38:04,"JavaScript has some difficulty parsing these, as it doesn't recognise the surrogate pairs unicode-encoded emoji rely on. I imagine you'd have to use buffers to get them to work, which is at odds with the way marked works internally, and wouldn't work in the browser.

But I'm happy to be proven wrong. :)
",cgiffard,
233,2013-08-22 14:15:45,"It depends: there are different types of emoji encodings:

The classic Unicode backed emoji's as used by various mobile phone operators, which indeed are not trivial to decode. I assume this is what you mean by ""unicode-encoded surrogate pairs"".

But the ones I meant are the colon-delimited strings you can use in Github Flavoured markdown, like `:warning:`: see the [cheat sheet](http://www.emoji-cheat-sheet.com/).

They are just plain vanilla text. I don't know how complex Markdown parsing is but there are a few JavaScript implementations listed on the cheat-sheet's [Github page](https://github.com/arvida/emoji-cheat-sheet.com) that are just RegExp-replace()-with-callback.
",Bartvds,
233,2013-08-26 02:48:07,"Oh, right — sorry for the misunderstanding. I was indeed thinking of the unicode ones. :)

Carry on!
",cgiffard,
233,2013-08-26 15:31:34,"Glad we cleared this up :) With ""Carry on!"" I assume you'd like this functionality in `marked`? 

I could have a stab at implementing it but I think it needs an architectural decision:

I think a nice way to do this is to split this up into two pieces: we add the emoji 'tag' parsing support to marked-core, but have an external 'data module/plugin'-thing with all the emoji data you'd need to register with the marked module. This would keep the bulky data away from vanilla users. 

The data module would make available the list of valid emojis (could also be custom/subset), and there'd be a folder with the individual emoji images that need to be uploaded to a server/CDN (and the base url passed back to the module for linking). 

Marked-core would then lex + parse the `:`-delimited strings and call into the data module to see if an emoji code is valid and what html to use. The data module would look this up and return the html &lt;img&gt; code. 

With a bit of gold-plating this might even be able to switch between external images (data-traffic-friendly) or using inlined dataURLs (self-contained).

What do you think?
",Bartvds,
233,2016-09-15 10:06:19,"3 years later issue is still opened... Will `marked` support emojis or it won't?
",ilianiv,
232,2013-08-16 11:13:22,"Hi @chjj
## Changes
- add options wysiwyg line break
## add options wysiwyg line break

wysiwyg is option for simply new line break like wysiwyg editor and  github issue.

if wysiwyg is true : 

<S_CODE_TOKEN>
#### Github Support this syntax on issue follow:

Hi all.
This is insanehong

I'm currently at naver corp as a front-end engineer.
bye see you.
",insanehong,2013-10-15 23:29:54
232,2013-08-17 22:03:40,"remove modify Heading grammer, 
",insanehong,2013-10-15 23:29:54
232,2013-10-15 20:42:10,"Did you try using the `gfm` and `breaks` options?

<S_CODE_TOKEN>
",bm-w,2013-10-15 23:29:54
232,2013-10-15 23:29:54,"@bm-w sorry I miss breaks 
",insanehong,2013-10-15 23:29:54
231,2013-08-15 17:46:01,"in line 26 and 28 hyphens are used as minus sign, see http://lintian.debian.org/tags/hyphen-used-as-minus-sign.html to why that can be an issue.

this patch should fix it:

<S_CODE_TOKEN>
",juliantaylor,2014-01-02 23:01:59
231,2013-09-22 08:02:46,"If you do a pull request, it's easier to apply this patch...
",kapouer,2014-01-02 23:01:59
230,2013-08-14 21:11:50,"@soffes first (well first as far as i know) introduced these features into [redcarpet](https://github.com/vmg/redcarpet). he talks about them [here](http://sam.roon.io/tearing-up-the-carpet). I'm using marked in conjunction with [strapdown](https://github.com/arturadib/strapdown) to generate my blog, and i really wanted these features incorporated.

tests are included.

you can read my blog post about it [here](http://deallocatedbytes.com/#new-features-for-marked-).

let me know if there's anything you need/feel i should do/change. :)
",bengreenier,
230,2013-08-15 03:40:31,":heart: Really glad you like it!
",soffes,
230,2013-08-15 04:10:28,"It's very nice work!! :heart_eyes: 
",rhiokim,
230,2013-08-21 04:39:45,"It would be nice to escape ' \= ' -> ' = '
",rhiokim,
229,2013-08-14 07:06:28,"[Test](http://www.test.org/index.php/XSS_(Style\)_stuff)

See how this renders correctly here. The following results in **&lt;link&gt;Test&lt;/link&gt;_stuff** when parsed by marked.js
",hallatore,
229,2014-04-08 07:50:33,"+1 I'm wondering this too
",azhang,
229,2014-07-01 23:43:36,"They're also ignored in headers. e.g.,

<S_CODE_TOKEN>

Generates

<S_CODE_TOKEN>

Instead of

<S_CODE_TOKEN>
",mnpenner,
228,2013-08-12 07:24:09,"@chjj Can you publish the latest code to npm?
",fengmk2,
227,2013-08-10 18:13:33,"when indenting a code block with x+1 tabs after a level x list-item the code block renders with two extra leading spaces at each line
",amitport,2013-08-10 21:41:28
227,2013-08-10 21:41:24,"Marked list parsing is a bit smarter than markdown.pl when it comes to the list ""margin"". If you want original markdown.pl behavior, you can use the `pedantic` option. Otherwise, if you want no spacing in a code block in a list, align it to the list margin (using the number of characters in the bullet (`1.` would be 3, `*` would be 2) as the number of first few spaces, and then a tab or 4 spaces):

<S_CODE_TOKEN>
",chjj,2013-08-10 21:41:28
227,2013-08-10 22:27:25,"I still think it's a bug (though not a critical one):

<S_CODE_TOKEN>

is compiled to :

<S_CODE_TOKEN>

the extra 2 leading spaces are there
",amitport,2013-08-10 21:41:28
227,2013-08-10 22:30:09,"It's not a bug. This is how marked behaves. If you want the original markdown.pl behavior, you can pass `pedantic: true` to marked().
",chjj,2013-08-10 21:41:28
227,2013-08-10 22:31:47,"OK.. I guess I want the pedantic behavior (though I don't like that it's called that way..:)
thanks
",amitport,2013-08-10 21:41:28
227,2013-08-10 22:33:28,"Here's a better example of what I was talking about:

<S_CODE_TOKEN>
",chjj,2013-08-10 21:41:28
227,2013-08-10 22:36:30,"pedantic flag gives me spaces  in the end of the code though.. but in any case, I got what you meant, I will manage.
thanks again
",amitport,2013-08-10 21:41:28
227,2014-04-24 07:55:01,"@chjj I agree with @amitport. Could we have an option that turns only this single pedantic behavior on?

Advantages of the original:
1. simpler: to remember and implement on editors.
   - original: always use 4 spaces
   - Marked: look at the line above, and copy the number of character before the first char of the list.
   
   First person experience with implementing in Vim. 
2. The only other major engine that behaves like this is Kramdown:  GFM, Multimarkdown, Pandoc, Redcarpet and markdown-js all follow Markdown.pl on this one.

This means that people coming from other engines to Marked will have problems. Tested with https://github.com/karlcow/markdown-testsuite/pull/34

Same discussion for Kramdown: https://github.com/gettalong/kramdown/issues/121
",cirosantilli,2013-08-10 21:41:28
227,2014-04-24 08:59:08,"@cirosantilli, I realize people do sometimes only want certain aspects of original markdown behavior. The `pedantic` option might be my subconscious way of passively aggressively punishing users who want poor markdown behavior (""if you want some of the bad stuff, you might as well take all of it"").

I do want to split `pedantic` up into smaller options, but at the same time I don't want marked to become a mountain of configuration. I'll think about it.

As for making this the default, it will be hard to convince myself. I really really _really_ dislike the original markdown list behavior and I think it's counterintuitive. I'm willing to bet most people actually instinctively used marked-like list syntax for indentation when using markdown for the first time. I don't have any real evidence for this, but I don't agree when you say it's simpler.
",chjj,2013-08-10 21:41:28
226,2013-08-10 10:56:42,"lexer should only replace tabs to spaces if they are on the beginning of a line, otherwise those tabs may be meaningful (for example they can be part of a pre-formatted code string)
",amitport,
226,2013-08-10 15:53:55,"So, here is the problem: if a code block is within a list, it needs 2 tabs at the beginning of the line, which means you're going to have to replace each tab at the start of the line with 4 spaces. However, say somebody wanted to do `{4}\t` at the beginning of the line to accomplish the equivalent of 2 tabs, now the replacement becomes even more complicated. This is all certainly possible if you amend your code, but I'm worried about how much overhead it might add.
",chjj,
226,2013-08-10 18:10:39,"thanks for the response.
I tried to make a more complete solution as you said by replacing `{4}` references with `(\t| {4})`.
this did not work so well with lists and code block... 

in any case, while debugging my code I found a small existing bug with lists and code blocks:
when indenting a code block with `x+1` tabs after a level `x` list-item, the code block renders with two extra leading spaces at each line (opening an issue)
",amitport,
225,2013-08-09 06:34:38,"Hi,

I recently switched to marked.js for one of my projects. There are a lot of nested quotes which unfortunately are not rendered properly by marked.js.

Input:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

Any chance you can fix this soon or does someone know how to achieve the correct result here?
",anselmh,
225,2013-08-09 06:52:31,"Just be happy I didn't decide to implement accurate markdown.pl behavior here. :)

<S_CODE_TOKEN>

Anyway, marked's behavior is technically the logical conclusion you would draw from toplevel blockquote behavior.

<S_CODE_TOKEN>

Results in all the text being in one blockquote. So why shouldn't...

<S_CODE_TOKEN>

also be in the one inner blockquote?

The behavior you're looking for can be acheived with:

<S_CODE_TOKEN>

Having said that, I can understand why you would want it the way you suggest. The way to implement this logically is to have to separate blockquote rules: one for the toplevel and one for the non-toplevel (i.e. inside another blockquote). This adds complexity and makes things less pretty in my opinion.

Let's see how GFM does it. If it does it the way you say, we can consider implementing this behavior for the GFM option.

> > foo
> > bar
> > baz

---

> > foo
> 
> bar
> baz

Let's also look at some other behavior while we're at it.

> foo
> 
> bar

---

> > foo
> > 
> > bar

---

The above:

<S_CODE_TOKEN>

---

<S_CODE_TOKEN>

---

<S_CODE_TOKEN>

---

<S_CODE_TOKEN>

**edit:** Looks like GFM behaves exactly the same as marked.
",chjj,
225,2013-08-09 07:04:45,"Thanks for explanation. I currently solve it by RegExing the String and inserting a newline between the level changes to achieve the behavior. This works but I do think this should be recognized by the library.

GFM does the same as marked, yes. Unfortunately all of the Markdown libs do so except one (which is buggy on all other stuff as hell).

It does sound like many people want the behavior currently used but might you be able to add an option for that to switch the behavior? Does this make sense? If not, no problem – this might be a rare and very special request. But unfortunately this is how Mailing lists ""work"" – and I'm trying to fix them… stupid me. ;)
",anselmh,
224,2013-08-09 00:19:38,"This may have been mentioned in [an earlier bug report](https://github.com/chjj/marked/issues/37), although I don't think it's directly related...

The [markdown spec](http://daringfireball.net/projects/markdown/syntax#precode) says that the contents in code blocks (those starting with four spaces - no mention of the gfm code fences, of course) should be wrapped in `<pre><code>`, but marked is currently wrapping our codeblocks in a single `<pre>`.

Not really an issue, except when coupled with Twitter Bootstrap, you get something that looks like this:

![](https://github-camo.global.ssl.fastly.net/7e9e44ec6e207c30d3a9854e6cd939b4b4ed39df/687474703a2f2f692e696d6775722e636f6d2f64464a675571662e706e67)
",julianlam,
223,2013-08-08 20:31:02,"I found some html that results in markdown not being parsed.  As i am having trouble with understanding the code all i can contribute with is a test case.

https://github.com/bjornblomqvist/marked/commit/b6469191b55134f50b322e7fae2ad57ed216408b
",bjornblomqvist,
222,2013-08-07 23:16:36,"Correct the Highlight.js example by using highlight, comment on highligh...
",TheEmpty,2013-12-04 06:04:13
222,2013-08-09 03:57:23,":+1: There is also a typo with the highlight `callback` argument where it states that `callback` is a String instead of a Function.
",ChrisWren,2013-12-04 06:04:13
222,2013-10-09 16:42:15,"@xionglun to use `highlight(lang, code)` the lang should be one of https://github.com/isagalaev/highlight.js/tree/master/src/languages by default. `hljs.LANGUAGES[lang]` can be used to check it.
",wangzuo,2013-12-04 06:04:13
222,2013-12-04 06:04:13,"Fixed by: e778ce03da59c92d2fadb899e7e796ab3b45179f
",ChrisWren,2013-12-04 06:04:13
221,2013-08-07 06:12:24,"When you align tables with css, <td align=""...""> gets overridden. 
Using inline styles keeps alignment no matter what CSS contains.

While this is a departure from what Github currently does, the reference markdown parser they use, [RedCarpet](https://github.com/vmg/redcarpet) has made [this change](https://github.com/vmg/redcarpet/commit/1e61096be1c5e7cd34d19ca65afa2fca87639c5f), and I'm hoping Github will follow at some point in the future.
",adduc,2013-08-07 11:04:09
220,2013-08-05 05:03:43,"This pull request adds `.travis.yml` file containing a configuration for [Travis CI](https://travis-ci.org/) testing of the module.

This configuration is the third step in the process of [getting started](http://about.travis-ci.org/docs/user/getting-started/) with Travis CI. You may be willing to complete that process for your project in order to see (almost immediately) if any of the following commits (and pull requests) pass the tests (`npm test`) properly.

(I have completed that process for my fork and thus you may see the “Good to merge” message from Travis CI below.)

Four test that are known to fail (#136) were ordered to skip (otherwise `npm test` would already fail inevitably, and thus its results would become useless). Now, if `npm test` passes for the result of some commit, it means that at least the number of failing tests is not increased.
",Mithgol,2013-12-04 06:28:54
220,2013-08-30 05:05:58,"/ping @chjj 
",Mithgol,2013-12-04 06:28:54
220,2013-12-04 06:07:05,"@chjj are you cool with this? I would like to see the status of tests for each PR and know if any are currently failing.
",ChrisWren,2013-12-04 06:28:54
220,2013-12-04 06:13:55,"Yeah, I'm good with it. We're going to have to alter the test runner differently though. I'll handle it.
",chjj,2013-12-04 06:28:54
219,2013-08-04 05:06:21,"Return the results of testing to a parent process.

Traditionally the exit code is `0` only if everything is okay (“no failing tests” in this case).
",Mithgol,2013-08-04 12:13:30
218,2013-08-04 01:52:50,"# ChaNges
- lheading rendering
- underline rendering
## [markdown syntax guide](http://daringfireball.net/projects/markdown/basics)

<S_CODE_TOKEN>
## test markdown syntax

<S_CODE_TOKEN>
### github

![screen shot 2013-08-04 at 10 25 08](https://f.cloud.github.com/assets/1558742/906479/923fdbd8-fca7-11e2-9217-282211662b80.png)
### Markedown pro (on mac OSX)

![screen shot 2013-08-04 at 10 14 03](https://f.cloud.github.com/assets/1558742/906480/a662263e-fca7-11e2-830d-7e2942beb00c.png)
### before marked.js rendering

![screen shot 2013-08-04 at 10 47 07](https://f.cloud.github.com/assets/1558742/906482/f3c26c2c-fca7-11e2-841e-8c03723055d8.png)
### after marked.js rendering

![screen shot 2013-08-04 at 10 49 37](https://f.cloud.github.com/assets/1558742/906483/2d568914-fca8-11e2-995c-f958085ae084.png)
",insanehong,2014-06-18 08:18:51
218,2013-08-04 02:04:44,"haha randering is typing errors in images  :-D rendering!! ㅎㅎ 
",insanehong,2014-06-18 08:18:51
218,2013-08-05 00:14:53,"@chjj This is Standard markdown syntax. other markdown editor support this syntax rendering.

plz hotfix! :-D
",insanehong,2014-06-18 08:18:51
217,2013-08-03 14:24:41,"Fixed the parameters' order of the hightlightAuto function call in the hightlight code example
",ifraixedes,2013-08-04 11:41:26
216,2013-08-03 09:07:29,"I don't know whether it should be considered a bug or a feature.

I've enabled gfm while using the `marked` function.

When the markdown text is:

<S_CODE_TOKEN>

the html text rendered by marked is

<S_CODE_TOKEN>

But, I think the ""correct"" html should be:

<S_CODE_TOKEN>

It's a conflict caused by gfm and original markdown syntax. Maybe you guys (developers of marked) should consider which result is ""more correct"". :-)
",fyears,
216,2013-08-07 15:20:34,"@chjj :+1: I support this change. It's a really basic but very important change. :)

For a possible markdown it might be wise to just escape these underscores:

<S_CODE_TOKEN>
",greduan,
216,2013-08-09 07:22:25,"GitHub-flavoured Markdown has docs and they say that underscores inside words are ignored (there's a reason for that: GitHub is a coding site, and words with underscores are likely to be snake-cased identifiers from some code).

In order to imitate GFM perfectly, marked should ignore such underscores (in GFM mode) as well.
",Mithgol,
216,2013-08-09 07:25:25,"However, I have to admit (additionally) that the corresponding section of GFM docs is titled “[Multiple underscores in words](https://help.github.com/articles/github-flavored-markdown#multiple-underscores-in-words)” and nothing is said about single underscores.
",Mithgol,
216,2013-08-09 07:27:57,"But the GitHub devs have (most probably) just forgotten to mention that single underscores are ignored in words as well as multiple underscores.

A simple test (i.e. pasting `abc_def ghi_` in a GitHub comment and then hitting the “Preview” tab) shown that's indeed the case.
",Mithgol,
216,2014-09-22 11:38:02,"+1
",javoire,
215,2013-08-02 20:59:38,"This is a (non-functional) example of what I was attempting:

<S_CODE_TOKEN>

Unfortunately, the `Lexer` and `InlineLexer` classes don't behave the same way, so...

<S_CODE_TOKEN>

Should work, by exposing `lexer.content( )` as a direct mapping to the non-inline Marked parser.  Unfortunately, it doesn't -- the editing of the InlineLexer via changing the rules also impacts the second marked function.

As a workaround, I attempted:

<S_CODE_TOKEN>

...to no avail.  Perhaps we should unify the lexer structures and/or standardize how they are exposed?
",martindale,
214,2013-08-02 16:07:51,"I use GFM.

inline HTML does not show the rendered result but the source text.
I guess this is because the tag is written in p element.

Isn't this unwanted result?

I'd like to know if this due to my fault, or common issue here.

THanks.

![screenshot](https://lh4.googleusercontent.com/-8HALeMULi4Y/UfvXIQwAPpI/AAAAAAAAEdE/mduEZWnrb3A/w581-h479-no/marked-html2.png)
",kenokabe,2013-08-03 00:28:00
214,2013-08-02 16:26:43,"Marked can handle inline html. Are you serving that page as xhtml? If not, there's no reason to use the self-closing slash. Self-closing tags with the trailing slash are legal in html5 for certain elements, but not `A`. I'm guessing the browser's html parser is treating that tag as text because it is not valid html. It would help to see the raw output.

Also, it is supposed to be in a `<p>` element. `<a>` is traditionally an inline element.
",chjj,2013-08-03 00:28:00
214,2013-08-03 00:27:52,"@chjj Thanks for your input.
I figured out after hours of working;
Since I'm a beginner for your work, I refered
**Usage**
- Example using all options:

as a result, I set `sanitize: true`

Obviously, it's not rendered because it's setup so.
I'm afraid to say this is so confusing for beginner even having read the document.
I know this option is `false` as default, but most people would just follow the example usage like me.

Anyway, thanks for your great work, and the support!
",kenokabe,2013-08-03 00:28:00
214,2014-03-14 18:42:27,"Thx
I have same issue when I use `a` just like below:   

<S_CODE_TOKEN>

but still can't be rendered! 
So I set `sanitize: false` then it's ok.
",xionglun,2013-08-03 00:28:00
213,2013-08-02 13:57:12,"Given:

<S_CODE_TOKEN>

Expected:

<S_CODE_TOKEN>

Actual:

<S_CODE_TOKEN>

Embedded HTML (block-level) is not supposed to be parsed as markdown.
",jasonkarns,2013-08-03 02:24:31
212,2013-08-02 13:52:53,"Given: 

<S_CODE_TOKEN>

Expected:

<S_CODE_TOKEN>

Actual:

<S_CODE_TOKEN>

Confirmed expected value using http://daringfireball.net/projects/markdown/dingus
",jasonkarns,2013-08-03 02:26:17
212,2013-08-03 02:26:17,"According to the spec, embedded inline-level HTML elements are still parsed for markdown. So, while marked deviates from Markdown.pl behavior, it's still follows the spec.
",jasonkarns,2013-08-03 02:26:17
212,2013-08-08 11:44:12,"Are you saying that http://daringfireball.net/projects/markdown/syntax#code says the stuff inside `backticks` should be parsed for Markdown? If so, I can't find it. Can you please quote from the syntax page where it says so?

(Disclaimer: I don't actually use Marked. Was just browsing the code, happened to see this issue.)
",roop,2013-08-03 02:26:17
212,2013-08-08 13:39:25,"I pulled that from http://daringfireball.net/projects/markdown/syntax#html

> Note that Markdown formatting syntax is not processed within block-level HTML tags. E.g., you can’t use Markdown-style _emphasis_ inside an HTML block.
> ...
> Unlike block-level HTML tags, Markdown syntax is processed within span-level tags.

but now that I read it again, I realize they're only referring to inline HTML. Perhaps this is a bug after all?

However, I just tested from the marked CLI (v0.2.9) and it works as expected. I'll have to revisit how I encountered the bug in the first place.
",jasonkarns,2013-08-03 02:26:17
212,2013-08-08 16:36:38,"I can't reproduce this.

<S_CODE_TOKEN>

The same exact output for markdown.pl.
",chjj,2013-08-03 02:26:17
211,2013-08-02 04:13:24,"github and other markdown editor support this syntax  
## syntax

<S_CODE_TOKEN>
## view
## heading title
# heading title 
",insanehong,2013-08-02 16:31:31
211,2013-08-02 16:32:04,"Wow, surprised no one noticed. Thanks.
",chjj,2013-08-02 16:31:31
210,2013-07-31 12:11:41,"Example Markdown:

<S_CODE_TOKEN>

When using IE8, I am seeing the above as one long paragraph, with only the bold and italic text formatted as expected. Item 1 is also italicised and the asterisk before item 3 is visible, as shown here:

> test markdown new paragraph with **bold** and _italic_ test. _item 1_ item 2 \* item 3
",tomturton,2013-07-31 12:24:06
210,2013-07-31 12:24:06,"My apologies, the problem seems to be before the string is parsed by marked.js and the exact same thing happens with evilstreak/markdown-js.
",tomturton,2013-07-31 12:24:06
209,2013-07-29 23:40:25,"The test:

http://jsperf.com/marked-regex-performance

Takes minutes on Firefox 22, but hardly any time at all in IE9 and Chrome 28.0.1500.72 m.

That test uses a version of marked.js from strapdown.js, but I have modified it to give each test and code block of the `Lexer.prototype.token` method its own named function. With these named functions, Firebug profiling will show the hotspots accurately.

This second test uses the latest version of marked.js (e59d5d0bc425af214676e6627e4f4b1410832e28, as of time of writing), but the results are the same:

http://jsperf.com/marked-regex-performance/2

As the Firebug profiling results show (from test 1), it seems the regex performance is poor when the strings are large.

Results of test 1 from jsperf.com (which took a total of 171 seconds):

![marked-firefox-jsperf-test](https://f.cloud.github.com/assets/1020541/875574/185decb0-f8a6-11e2-9eb6-a5f8bb22cabe.png)

These are the results from a local test I did (with the same Markdown content as the above tests):

![marked-firefox-perf-test](https://f.cloud.github.com/assets/1020541/875520/50c053ce-f8a4-11e2-9a92-16ed32385570.png)

This issue raises some points as I see it:
- Is it 'normal' to have Markdown blocks as large as this? It is in my case, I am working on a large document.
- Is Firefox (22) at fault? Chrome 28 and IE9 seem fine.
- Can marked.js somehow divide-and-conquer the Markdown content before it parses it? This would help FF enormously (in my case), and I believe would also improve Chrome and IE times (although to a much less extent).
- I have toyed with the idea of using web workers for the parsing. This would help the responsiveness of FF, but should not have an effect on the overall time taken to parse a single, large Markdown block. For multiple large blocks there would/should be a benefit on a multi-core machine.
",gitgrimbo,
209,2013-08-02 00:22:37,"Spidermonkey has given me trouble in the past. There was a case where they pushed a release to production with a **broken** regex implementation. I was so frustrated that I didn't even bother trying to figure out what they did to break it, or how to fix it. Even IE7 could pass the marked test suite, but the version of FF in question could not. Eventually they fixed it, and the next version of FF worked with marked again. It's possibly just another bug in spidermonkey's regexes.

Although I still hold sour feelings towards spidermonkey's regex implementation, I have to be honest and say the problem could still be marked. A long time ago there was an instance where marked would do endless backtracking on certain strings due to a poorly written regex. A lot of JS engines will timeout if they detect excessive backtracking, but some don't. If it takes several minutes, this might be a likely candidate, but I can't see any regexes in marked that would cause this. 

If you could somehow split up whatever you're parsing and narrow it down to one paragraph that takes several minutes to compile, it might be possible to figure out if the problem is backtracking.
",chjj,
209,2013-08-02 10:32:18,"Hi,

I've split out one of the seemingly worst performing regexes into this test:

http://jsperf.com/marked-regex-performance/4

I've added two cases, the first is the existing regex, the second is the same but with the group's one-or-more quantifier removed.

<S_CODE_TOKEN>

Without the quantifier, the performance is much improved, as the red bar for Firefox shows. You still can't see Firefox's blue bar as the performance is so bad in comparison.

![jsperf-marked-regex-performance-4](https://f.cloud.github.com/assets/1020541/900091/14c11db6-fb58-11e2-9854-a4f8af6ecfac.png)

I appreciate this regex is functionally different, so the marked.js code would have to change to reflect this. I.e. the marked.js code would need to manually loop - perhaps something like:

<S_CODE_TOKEN>

I'll keep looking, and try and come up with a more focussed test.
",gitgrimbo,
209,2013-08-02 10:37:46,"Quick update. Hacking that while loop code into my copy of marked.js gives Firefox a 21% improvement to my test here:

http://jsperf.com/marked-regex-performance/5

The hack is to wrap the marked.js code and pass in the value of the `code` regex.

<S_CODE_TOKEN>

and setup each test like this (test 1, ""R1""):

<S_CODE_TOKEN>

and (test 2, ""R2"", without '+' quantifier):

<S_CODE_TOKEN>

![jsperf-marked-regex-performance-5](https://f.cloud.github.com/assets/1020541/900335/8a729d4e-fb5f-11e2-8044-51166582323d.png)
",gitgrimbo,
209,2013-08-02 11:49:52,"Just curious, as you said marked+FF takes minutes to compile your document, how much time does a 21% improvement shave off? If it still takes minutes compared to v8/jscore/ie, maybe we haven't reached the core of the problem yet. You're probably on the right track though: nested quantifiers are usually what cause excessive backtracking.
",chjj,
209,2013-08-02 19:20:59,"Yeah, that's 21% off the single, worst performing regex (refactored to be `test002` in my first test). There are a few regexes that take up time, which could also have similar reductions (I haven't tried any others).

From the first test, the breakdown was like:

<S_CODE_TOKEN>

Insignificant:

<S_CODE_TOKEN>
",gitgrimbo,
208,2013-07-29 11:33:23,"Even with explicitly set options (GFM = true & tables = true), a table string will simply be returned as it is
",ghost,
208,2013-08-25 17:25:04,"I'm having the same problem. Have explicitly set GFM and tables to true, but still renders as an HTML paragraph.
",tomturton,
208,2015-08-18 08:47:51,"+1
",godban,
207,2013-07-26 00:06:14,"Would including anchor links, or at least id/name attributes, on headers _(h1, h2, h3, etc)_ be within the scope of this project?
",leeola,
207,2013-07-26 14:57:28,"I'd love it, I had to make an ugly PR #199 to achieve that result.
",piuccio,
207,2013-07-26 15:37:50,"Yea, i like the approach too. Being able to extend/customize token modification would be really nice

Any word from @chjj (or someone in charge)?
",leeola,
207,2013-07-30 12:18:31,"Yeah, I need it very much too))
",fend25,
207,2013-07-30 13:21:46,"one minute solution:
https://gist.github.com/fend25/6112813
",fend25,
206,2013-07-25 17:38:29,,matsko,2013-08-02 16:33:21
205,2013-07-23 10:26:33,"To repeat the problem

<S_CODE_TOKEN>

results in an error which makes you doubt the quality of marked

<S_CODE_TOKEN>

compare it to `mv test.md nonexistent_dir/test.md` which results in: 

<S_CODE_TOKEN>
",pe3,
204,2013-07-22 21:04:12,"Fix for [Issue #203](https://github.com/chjj/marked/issues/203).
",SK83RJOSH,2013-08-02 16:53:38
204,2013-08-02 16:35:40,"Causes 3 tests to fail.
",chjj,2013-08-02 16:53:38
203,2013-07-20 15:34:27,"`[naughty link](javascript:alert('xss'&#41;)`

I believe #109 may be related.
",martindale,2017-01-19 22:46:24
203,2016-08-23 19:52:42,"Note that the `sanitize` config argument will fix this: https://github.com/chjj/marked#sanitize
",chriddyp,2017-01-19 22:46:24
203,2017-01-19 22:46:24,This is resolved with the sanitize option after:  https://github.com/chjj/marked/pull/592,matt-,2017-01-19 22:46:24
202,2013-07-19 08:45:54,"See the issue for description.
",jorilallo,2013-08-02 17:13:55
202,2013-07-19 14:58:35,"yep should added
",passsy,2013-08-02 17:13:55
202,2013-07-19 19:09:02,"Not sure about other rules, it might be that there's a similar issue with other block level rules
",jorilallo,2013-08-02 17:13:55
202,2013-08-02 17:13:55,"Not accurate to markdown.pl, but I'll leave the issue open.
",chjj,2013-08-02 17:13:55
202,2013-08-04 05:12:42,"Does not seem like left open though.
",Mithgol,2013-08-02 17:13:55
202,2013-08-04 10:08:48,"@Mithgol, I meant the issue: #201.
",chjj,2013-08-02 17:13:55
202,2013-08-04 11:25:43,"Thank you for explaining, now I see.
",Mithgol,2013-08-02 17:13:55
201,2013-07-19 08:07:02,"I ran into a problem while testing hashtags:

<S_CODE_TOKEN>

renders as

<S_CODE_TOKEN>

while the expected output is

<S_CODE_TOKEN>
",jorilallo,2015-05-08 01:45:50
201,2013-07-19 08:25:28,"That's the expected behaviour, because the `#` character marks a heading.

Work around by using `\#` instead of a simple `#`.

Also note that a single `\n` won't get you a new paragraph. Use two `\n` for that.
",Mithgol,2015-05-08 01:45:50
201,2013-07-19 08:28:20,"@Mithgol according to Markdown documentation there needs to be a space character after the `#`, not combined. Also GitHub doesn't render that as a heading.

Edit: for the example I was using GFM's newline support so it renders to paragraphs
",jorilallo,2015-05-08 01:45:50
201,2013-07-19 08:38:28,"So I think the correct regular expression should be

<S_CODE_TOKEN>

Here's an example render with GitHub's Markdown. Source:

<S_CODE_TOKEN>

Result:

#header

# header1

# header1
",jorilallo,2015-05-08 01:45:50
201,2013-07-19 17:44:01,"Good argument. I am convinced.
",Mithgol,2015-05-08 01:45:50
201,2013-08-01 05:43:00,"I'd like to see this merged, +1
",ilsken,2015-05-08 01:45:50
201,2013-08-02 16:38:39,"<S_CODE_TOKEN>

Not sure this qualifies as a fix. It violates markdown.pl behavior.
",chjj,2015-05-08 01:45:50
201,2013-08-02 16:44:56,"Ah well if markdown.pl behaves that way I'd just leave it. You can always escape it anyway
",ilsken,2015-05-08 01:45:50
201,2013-08-02 18:43:53,"@chjj @ilsken Just for the sake of arguments, has anyone ever really used markdown.pl? I would stick with the documentation (which states ""# heading"") and common sense but that's just me. Having #hashtags and @mentions is pretty common with services.
",jorilallo,2015-05-08 01:45:50
201,2013-08-02 19:04:58,"Being backwards compatible with `markdown.pl` is important.

However, it seems like the GFM mode could imitate GitHub flavoured Markdown better if it took the whitespace in consideration after the `#` character.
",Mithgol,2015-05-08 01:45:50
201,2013-08-02 21:20:41,"+1 for GFM  

## 

Jori Lallo

+1 (415) 728 5773  
@jorilallo (http://twitter.com/jorilallo)

http://kippt.com

On Friday, August 2, 2013 at 12:05 PM, Mithgol wrote:

> Being backwards compatible with markdown.pl (http://markdown.pl) is important.
> However, it seems like the GFM mode could imitate GitHub flavoured Markdown better if it took the whitespace in consideration after the # character.
> 
> —
> Reply to this email directly or view it on GitHub (https://github.com/chjj/marked/issues/201#issuecomment-22026685).
",jorilallo,2015-05-08 01:45:50
201,2014-10-11 18:39:01,"+1 for GFM
Having hashtags is good!
Also if GFM does this way when I enable GFM I expect sane behaviour.
At least can anyone give me a hint: how to apply it 4 my needs easily, please?
",elennaro,2015-05-08 01:45:50
201,2014-10-12 07:07:10,"@elennaro It's as easy as manually applying the patch jorilallo/marked@09c26a86aec5c08ca36e2e5f3012b5e192e93011. It replaces only one character in the source code (`*` → `+`) and thus it couldn't be any easier.
",Mithgol,2015-05-08 01:45:50
201,2014-10-12 10:44:06,"Oh, thank you @Mithgol really simple and beautifull!
",elennaro,2015-05-08 01:45:50
201,2014-11-17 04:34:53,"+1 for GFM
",ledsun,2015-05-08 01:45:50
201,2015-02-02 14:24:15,"+1 GFM
",silkimen,2015-05-08 01:45:50
201,2015-05-08 01:45:45,"Fixed.
",chjj,2015-05-08 01:45:50
201,2015-08-06 23:17:57,"I know it's been a while, but for the future reference I want to point out that this change should have never landed as a patch (0.3.2 -> 0.3.3), but at least as a minor (0.3.2 -> 0.4.0) because it's backward incompatible from customer's perspective, who don't care about whitespace because it's been allowed for a long time and now it breaks existing badly formatted markdowns. No complains whatsoever. Just suggestions :wink: 
",xaka,2015-05-08 01:45:50
201,2017-03-23 10:45:42,"Very unhappy at this change, it broke all our documentation by no longer rendering the headings correctly. Would love to see it reverted, as breaking existing docs just to be able to render hashtags without an escape character does not strike me as the right set of priorities.

Thankfully most of our docs are parsed for conversion to HTML, and are still rendered correctly on our websites, but I have 100 or so pages that are not parsed this way and now need to be updated with the new heading style.",Stephen-Mc,2015-05-08 01:45:50
200,2013-07-17 21:13:53,"With GitHub Flavored Markdown (GFM) enabled, text within link tags are being auto-linked again, rendering broken output.

Example:

Code:

<S_CODE_TOKEN>

Result:

`<p><a href=""http://www.google.com"" target=""_blank""><a href=""http://www.google.com&lt;/a&gt;"">http://www.google.com&lt;/a&gt;</a></p>`

Expected:

`<p><a href=""http://www.google.com"" target=""_blank"">http://www.google.com</a></p>`
",robertdimarco,2013-07-18 17:57:38
200,2013-07-18 16:03:41,"This is perhaps a duplicate of #56?
",adam-p,2013-07-18 17:57:38
200,2013-07-18 17:57:38,"@adam-p Looks like it. I'll close as dup.
",robertdimarco,2013-07-18 17:57:38
199,2013-07-17 14:15:37,"Instead of providing only a callback for code highlight, open the possibility to call a custom function for any token type.

This can be done with the configuration option `on`.

For instance

<S_CODE_TOKEN>

I'm using this to generate anchors next to headings and the table of contents automatically.

<S_CODE_TOKEN>
",piuccio,
199,2013-07-26 19:56:56,"So, i'm working on making a branch of this code work with Wintersmith, but it appears your code is missing one thing. The ability for non-callback based code working with `marked()`, correct?

That is to say, your code will only run if a callback is given to marked().

Correct me if i am wrong, i am still quite new to this codebase. As of yet, i'm unsure why the callback and non-callback sections seem to drastically different heh.

Thoughts?
",leeola,
199,2013-07-27 10:06:43,"Indeed
This pull request is more a proof of concept rather than real code, I don't expect it to be integrated as it is. 

Now it only works for the callback version and when highlight is enabled. 

I'm very new to this code base and I needed a quick solution, but if the idea and the approach are good I can try to spend more time and implement it correctly, including unit tests. 

It would be nice to hear from @chjj as he's working as well on extensibility 
",piuccio,
199,2013-08-02 17:33:42,"I suppose the goal here is to avoid walking the list of tokens one extra time? You'll still need to parse the TOC separately and merge the results. I'm interested to see if anything gets added here, because we do [TOC generation for jQuery sites](https://github.com/jquery/grunt-jquery-content/blob/77a0db27c078c3181f0ae27aa7b5e111907bae13/tasks/build.js#L237-L277) as well.
",scottgonzalez,
199,2013-08-02 17:42:56,"This raises a good point: there's no way to alter the tokens if you're using marked async. I think I would rather move the current async behavior into the Parser instead of the `marked()` function. This way you can use Lexer.lex to get the tokens, alter them however you want, and then call Parser.parse asynchronously. Or, just have marked() accept tokens as input when it is async.
",chjj,
199,2013-09-14 16:41:16,"I like this idea. I submitted a PR #247 a few days ago adding custom header markup support, but this is more extensible as it applies to all token types. I am willing to help out to make this PR work as I really want custom header support to get GitHub hover links on headers. I am going to spend some time today looking at the source in reference to @chjj's comment.
",ChrisWren,
199,2013-09-15 15:48:34,"As I understand from the source code, the highlight option is the only async option. It seems that async highlight is used after Lexer.lex to perform [additional token processing](https://github.com/chjj/marked/blob/master/lib/marked.js#L1085-L1098) before Parser.parse is called on the tokens. If async highlighting isn't enabled, [these lines](https://github.com/chjj/marked/blob/master/lib/marked.js#L857-L863) of code are executed to do synchronous highlighting in the Parser.

@chjj is the idea that we would keep all the preprocessing synchronous and then see if the user is using the asynchronous version of marked when calling Parser.parse synchronously or asynchronously?
",ChrisWren,
198,2013-07-17 05:09:36,"would love it if marked supported component. i've been maintaining my own fork until now but i have to keep syncing it
",ianstormtaylor,2013-08-02 16:40:06
198,2013-07-17 06:57:48,"What is component? Is that https://github.com/component/component ?
",Mithgol,2013-08-02 16:40:06
198,2013-07-17 22:26:31,"yup that's the one, an awesome package manager and build step from the learnboost guys. it's really amazing if you haven't tried it yet. makes everything super clean
",ianstormtaylor,2013-08-02 16:40:06
197,2013-07-17 05:09:18,"made the quoting replacements a bit smarter so that they handle apostrophes properly since i was noticing that they didn't. based off of [this post](http://www.leancrew.com/all-this/2010/11/smart-quotes-in-javascript/)
",ianstormtaylor,2013-08-02 16:43:40
197,2013-07-17 10:21:34,"Pretty much a duplicate of #178. I wish one of them got merged.
",tasuk,2013-08-02 16:43:40
197,2013-07-17 23:05:23,"haha wow its scary how close those are, didn't see that. agreed either one would be awesome
",ianstormtaylor,2013-08-02 16:43:40
197,2013-08-02 16:43:40,"Merged with #178. Thanks regardless.
",chjj,2013-08-02 16:43:40
196,2013-07-15 12:17:14,"Having some trouble with an inline code block like `</body>`. Actually the code between the tick is completly escaped even if I put sanitize to false.
",CaporalDead,2013-07-15 12:23:10
196,2013-07-15 12:23:10,"Ok sorry, found that my data was not rendered as expected.
",CaporalDead,2013-07-15 12:23:10
195,2013-07-15 08:13:02,"Current code doesn't allow to call marked with two parameters as stated in docs
",mkozhukh,2013-08-02 16:46:22
194,2013-07-12 17:56:07,"Such as images `![alt](url)`. I know they are considered a paragraph right now, but it would be nice to be able to intercept them and modify them

For instance, Github automatically parses them to return the raw URL from the repo for that image. Would be a nice feature for DocumentUp.

How about emojis? ;)

Basically those are two feature requests in DocumentUp. I might give it a shot myself, but I'm pretty busy at the moment and you know your codebase better! (Also, lack of tests is scaring me a little bit)
",jeromegn,
193,2013-07-12 15:31:42,"I'm using the example for pygmetize-bundled where you pass a callback through to `highlight`:

<S_CODE_TOKEN>

But I get this error:

<S_CODE_TOKEN>
",jbrooksuk,2015-01-22 16:40:39
193,2013-08-09 03:36:12,"Are you using the async version of marked? Look at the example in usage where the second argument to the `marked` function is a callback.
",ChrisWren,2015-01-22 16:40:39
193,2013-08-17 16:47:35,"As @ChrisWren said, you should pass arguments with 3 arity in order to do asynchronous stuff. Take a look at an API here
https://github.com/chjj/marked#markedmarkdownstring-options-callback

<S_CODE_TOKEN>

I'm writing this because I've just got the same error and looked around docs and issues.
",smagch,2015-01-22 16:40:39
193,2013-10-11 09:11:15,"`options` here should be optional, I've made try to fix this, take a look :) https://github.com/chjj/marked/pull/260
",supersheep,2015-01-22 16:40:39
192,2013-07-12 05:38:57,"I find that in `InlineLexer.prototype.outputLink` that cap[0][0] return undefined.
",mzry1992,2013-08-08 15:04:07
192,2013-08-07 20:39:46,"I think array-like-access for a string is not supported in IE7.

`cap[0].charAt(0)` should work and should be a fairly simple change. I think there are a couple of other places that also use this syntax.

See also - http://stackoverflow.com/questions/4051385/javascript-access-string-chars-as-array.
",gitgrimbo,2013-08-08 15:04:07
192,2013-08-08 09:30:12,"Wow, standard or not, I was under the impression every js engine supported array-like strings. Will change.
",chjj,2013-08-08 15:04:07
191,2013-07-11 02:41:22,"The readme indicates the `highlight` option ought to be a 3-ary function that accepts code, language specifier, and a callback. However, since the readme's example using marked.setOptions doesn't seem to produce pygmentized fenced code blocks, I went looking at the code and it appears, at https://github.com/chjj/marked/blob/master/lib/marked.js#L846, that marked.options.highlight is expected to be a two-ary function. Please advise---I can open a new ticket about getting fenced code blocks (using triple-ticks) working if you wish.
",fasiha,
191,2014-01-27 21:02:00,"It only takes the 3-ary variant if you pass a callback to `marked`. If you use the synchronous version of marked, then you have to use a synchronous highlighter.
",pragdave,
190,2013-07-10 16:24:00,"In these two files:  

**Source** http://github.github.com/github-flavored-markdown/sample_content.html
**Results** https://github.com/mojombo/github-flavored-markdown/issues/1

There is an example (with two spaces after Red):

<S_CODE_TOKEN>

The github flavoured markdown output is:

<S_CODE_TOKEN>

The marked.js output is:

<S_CODE_TOKEN>

As you can see in the output, there is a double carriage return between Red & Violets. In marked.js there is only a single one.

These are the options I have set:

<S_CODE_TOKEN>
",noducks,
190,2013-07-10 16:43:46,"In addition, similar to notes above, two carriage returns produce an empty line in github flavoured markdown, but not in marked.js 
",noducks,
190,2016-11-30 12:38:22,This issue still exists - is there any workaround?,davidtrattnig,
189,2013-07-10 06:05:02,"Testcase:

<S_CODE_TOKEN>

The middle

<S_CODE_TOKEN>

Should really be inline `<code>`, but now marked outputs:

<S_CODE_TOKEN>

Expected:

<S_CODE_TOKEN>
",summivox,
189,2013-07-24 02:21:40,"Took a quick look at this. I'm not much with regexes, so I've not had much luck yet, but a bit of an observation at least.
Even flipping the code/strong markdown, it still breaks. However, if you use EMs in place of the strong tag, it works, ie 

<S_CODE_TOKEN>

whereas

<S_CODE_TOKEN>

does not. So the same error exists within both the regex for strong tags and inline code tags, but not in the regex for em tags.
",maxkorp,
189,2013-07-24 03:15:45,"As I also submitted a PR on adding math, I must admit that using regex is not _that_ brilliant, after all.
It looks like a pushdown-automata equivalent to me (rather than regular), although with current regex I doubt it's still doable, just it takes some careful reasoning (and probably rewriting, too).
Fortunately I heard some brilliant guys are working on a unified markdown standard that could hopefully iron out all these subtle differences and bugs.
",summivox,
188,2013-07-08 07:01:06,"Given the following markdown:

<S_CODE_TOKEN>

The following should be produced:

|  | Do not Want | Sometimes | Always |
| --- | --- | --- | --- |
| Feature A |  |  |  |
| Feature B |  |  |  |

Instead, the cells array omits the last column.

<S_CODE_TOKEN>
",chrisparnin,
187,2013-07-06 08:33:45,"1. Fixed the order of the parameters of the function's option ""highlight"" in the example that use highlight.js library
2. Provide a note and enhanced the example of **usage** secion
3. Enhancement to apply default options to `marked`. It had a bug reported in the issue #185
",ifraixedes,2013-08-02 16:51:45
187,2013-08-02 16:51:45,"Lots of stuff here. It looks like there was even a merge conflict committed. It would be nice to separate this stuff into separate pull requests.
",chjj,2013-08-02 16:51:45
186,2013-07-04 18:24:38,"I didn't use the correct method signature in the second example. Since it is using async highlighting, the async version of marked should be used.
",ChrisWren,2013-08-02 16:48:36
186,2013-07-06 11:18:55,"I also fixed the highlight.js example as the function arguments were in the wrong order.
",ChrisWren,2013-08-02 16:48:36
185,2013-07-04 07:52:02,"Noticed this bug when writing example usages of marked for the README.
",ChrisWren,2013-08-02 16:47:52
185,2013-08-02 16:47:51,"Fixed with #195.
",chjj,2013-08-02 16:47:52
184,2013-06-28 20:11:29,"Re-formatted the README to be clearer for users by emphasising how to use marked instead of benchmarking. I also added documentation for async highlighting and fixed a typo for the default langPrefix.
",ChrisWren,2013-07-04 07:00:50
184,2013-06-29 00:15:40,"[Here](https://github.com/ChrisWren/marked/tree/readme) is what it looks like on GitHub.
",ChrisWren,2013-07-04 07:00:50
184,2013-07-02 02:02:44,"Sorry I haven't gotten to ths sooner. I'm on my flight back home right now. I'll get to this tonight or tomorrow.
",chjj,2013-07-04 07:00:50
183,2013-06-28 16:53:11,"Running marked with the `--help` or `-h` option fails on Windows with the following error:

<S_CODE_TOKEN>

This happens because of [line 26](https://github.com/chjj/marked/blob/v0.2.9/bin/marked#L26) in `/bin/marked`:

<S_CODE_TOKEN>

Here, marked tries to open up `man` which is a unix tool for reading help, and which is _not_ available on Windows.

I’d suggest either replacing this by some built-in way, or switching to some command line parser instead which already offers command line help (for example [node-optimist](https://github.com/substack/node-optimist)).
",poke,
182,2013-06-28 14:31:10,"Marked doesn't recognize the list in this block

<S_CODE_TOKEN>

if you remove the first line or add newline before the list it is ok.

In github it works as it is.
",ghost,2013-08-03 23:39:09
182,2013-08-03 23:39:05,"Duplicate of #120.
",chjj,2013-08-03 23:39:09
181,2013-06-28 04:07:11,"This PR is a modification of #117 with the following differences:
1. Don't generate extraneous markup (no `anchor` tags, just `id` attributes)
2. `name` attribute is obsolete in HTML5. `id` attribute is recommended
3. `id` attribute accepts any non-white-space character per HTML5 spec (and is backwards compatible)

Changes:
- revert the anchor options (`anchors`, `anchorClass`, and `anchorContent`)
- revert the anchor element itself
- simplify the heading-text-to-id logic
",jasonkarns,2013-08-04 11:45:23
181,2013-07-26 21:55:02,"So, as i mentioned in issue #89, it seems this is a rather widely attempted issue. With that said, this is one of the simplest working solutions i have seen yet. Very nice!
",leeola,2013-08-04 11:45:23
181,2013-07-26 23:38:39,"After using this, i feel like an improvement could be made to track previous ID names, to ensure no duplicates. Possible append an index to the end of the id
",leeola,2013-08-04 11:45:23
181,2013-07-27 02:17:37,"Yeah, I thought about that. However, even though duplicate IDs would be problematic, I think it would be a bad idea to account for it in code.

There are a number of use-cases for these headers having deep-permalinks.
1. Post-publication deep-linking by users of the page. (This is best handled by the markup generated by #117's implementation and used by GitHub itself.)
2. Post-publication deep-linking by the author, from other external sources.
3. Author-time, in-page deep linking by the author.

Use cases 1 & 2 could be supported by random, opaque IDs. There is nothing inherent in the value of the ID that would impede these use cases.

Use case # 3, on the other hand, requires a known and predictable value for the ID attribute. Since the value of the ID must be known _prior to its generation_, the best method is to simply use the textual content of the header itself (even accounting for predictable conversion rules to generate IDs valid for the attribute). Appending an index would hamper the predictability of the generated IDs. (only slightly, to be sure, since the index could be derived simply by placement in the page; but IMO, still harmful enough to use case 3)

Since I don't believe de-duping should be handled in the code, it's obvious it falls on the shoulders of the author to ensure unique headers. This is a good thing, anyhow, as I would consider it a bad idea to have textually-identical headers on the same page.
",jasonkarns,2013-08-04 11:45:23
181,2013-07-27 02:37:26,"You think it would be bad to have textually identical headers? I don't mean to argue with you _(really, i don't care haha)_, it's just that this use:

<S_CODE_TOKEN>

Isn't that style of writing relatively common? By definition, should all headers be unique?

Assuming i understand you, use case 3, of the other linking to headers manually, it's a lose-lose use case, isn't it? If he has two identical headers, he can't link to the second header. If the second header has a different name that he expects _(say, if it was appended an index)_ then he still doesn't know.

So assuming i understand use case 3, it seems like appending the index is the lesser of the two evils. At least he has the ability to link to that second header, no?
",leeola,2013-08-04 11:45:23
181,2013-07-27 03:13:30,"> Isn't that style of writing relatively common? By definition, should all headers be unique?

Perhaps. I'm throwing my anecdotal opinion out there on this one. My gut is saying duplicate text headers are just a bad idea, generally. You've clearly shown a refuting example, though I would personally try to make the sub headers more contextually specific by making them unique. I mean, if they aren't unique, should they really be _headers_? :shrug: (I'm thinking outlines of a thesis paper or presentation, chapter titles of books, etc. Anything so generic as to be duplicated in two locations isn't really header material. -- again, opinion)

>  If he has two identical headers, he can't link to the second header.

Unless he embeds the second (duplicate) header directly as HTML with a manually-set ID. (In addition, there are other flavors of markdown that let you specify arbitrary attributes on some types of elements.)

> So assuming i understand use case 3, it seems like appending the index is the lesser of the two evils. At least he has the ability to link to that second header, no?

I'm assuming the implementation you have in mind is to append an index _only_ to the duplicate headers and not to every header? (otherwise, you'd lose predictability of _every header, ever_ to gain support for an edge case) So the implementation would have to keep track of generated IDs?
1. the author can drop in embedded HTML (with IDs) at any moment, therefore it's possible (highly unlikely) that we end up with duplicate IDs _even with our implementation_
2. markdown's beauty is in its simplicity. It doesn't cover every use case, only hits the 80/20. For the remaining 20, authors can drop back into raw HTML
3. Of this header dilemma, duplicate headers lies squarely outside of the 80% sweet spot. And I would relegate the honest-to-goodness, valid, duplicate-header scenario to maybe 5%. Which, IMO is not worth the effort. It's not a technically hard problem. But I don't see enough value in the robust implementation. 

<S_CODE_TOKEN>

That gives you 95% of your uses, with a single (terse) line of code. Anything more doesn't meet the value proposition for me. /opinion
",jasonkarns,2013-08-04 11:45:23
181,2013-07-27 03:17:15,"Personally, I would favor a particular feature that let's the author specify the ID attribute directly in markdown. I've already come across a flavor of markdown that did this, though I can't recall which one it was.

The syntax was fairly nice:

<S_CODE_TOKEN>

Or something similar. That would allow auto-creation of IDs for the general case; while allowing a clean syntax for overriding the IDs for the edge case. (While not doing anything pseudo-magical or unexpected)
",jasonkarns,2013-08-04 11:45:23
181,2013-07-27 03:34:42,"> I'm assuming the implementation you have in mind is to append an index only to the duplicate headers and not to every header? (otherwise, you'd lose predictability of every header, ever to gain support for an edge case) So the implementation would have to keep track of generated IDs?

Yup, exactly. No need to modify existing uniques, make index 0 empty by default

> Of this header dilemma, duplicate headers lies squarely outside of the 80% sweet spot. And I would relegate the honest-to-goodness, valid, duplicate-header scenario to maybe 5%. Which, IMO is not worth the effort. It's not a technically hard problem. But I don't see enough value in the robust implementation.

I think i would have to agree with you there. While i disagree about a unique requirement for a header _(though, perhaps i am thinking about them more structurally, and less contextually)_, i would agree that duplicates easily fall in the 20% line.

The only time i would really disagree, is if duplicate IDs are error prone somehow, but i have no idea on this. If, for some reason, something broke hard due to them, then that 20% is fatal, and worthy of a fix.

Nevertheless, i agree with your 20% point, and withdraw my opinion hehe.

With all of this discussed, i wonder how long it will take for all of this to be adopted? I've got a lot of links riding on this specific PR, but who knows what PR is actually going to get accepted. I have the feeling that when this issue is finally addressed, i'll be manually reassigning a hundred links hah.
",leeola,2013-08-04 11:45:23
181,2013-07-27 03:40:56,"> The only time i would really disagree, is if duplicate IDs are error prone somehow, but i have no idea on this.

I could imagine actual errors being caused by this if there was any javascript depending on those IDs. But the workaround would be to embed that particular heading in straight HTML, with a custom ID.

> I've got a lot of links riding on this specific PR, but who knows what PR is actually going to get accepted. I have the feeling that when this issue is finally addressed, i'll be manually reassigning a hundred links hah.

I, too, though not in the hundreds. :-)  Until this feature is added in some form or another, I've just been writing all my headers in direct HTML. Rather annoying, but at least it works correctly today, without needing to run a fork locally.
",jasonkarns,2013-08-04 11:45:23
181,2013-07-27 14:57:32,"I'd like to chime in on name vs. ID...

My project ([Markdown Here](https://github.com/adam-p/markdown-here)) uses Marked.js to format email. When email is displayed by Gmail (and other clients, probably), IDs get stripped out of elements, but names are left intact. 

So ID-based anchoring won't work for me, but name-based will. (And I do have users who [specifically want](https://groups.google.com/forum/#!topic/markdown-here/eaq1JoNhyws) to have ToC links in email.)

Can both be used? Or there be an option for which is used?
",adam-p,2013-08-04 11:45:23
181,2013-08-02 16:55:01,"Looking at the diff, there appears to be a bunch of old unused code leftover here. I might just grab the relevant part and commit it myself.
",chjj,2013-08-04 11:45:23
181,2013-08-02 17:03:24,"Yeah, I started this pr as a branch off another pr. I'll clean it up and
resubmit later today
",jasonkarns,2013-08-04 11:45:23
181,2013-08-02 21:44:48,"I'm unclear as to the purpose of the various subdirectories under `test`. What's the purpose of `test/new` vs `test/tests`? Which directory should the new headers-with-ids tests go under?
",jasonkarns,2013-08-04 11:45:23
181,2013-08-02 21:57:54,"Previous commits have been squashed down to the minimum necessary. New tests were scrapped since the existing tests (once modified) provided coverage for this feature.

Only thing still worth discussing, I think, is the choice of hyphen vs underscore as the whitespace replacement character.

Otherwise, it's ready to merge.
",jasonkarns,2013-08-04 11:45:23
181,2013-08-02 22:03:34,"I have nothing new to add to the case I stated above, but in case saying it again will somehow sway anyone: For use in email, anchors _need_ `name` attributes. `id` attributes just don't work.

(Of course, if inline element rendering were customizable...)
",adam-p,2013-08-04 11:45:23
181,2013-08-02 22:23:23,"@adam-p While I respect the corner you're stuck in, I would consider that a rare edge case. The HTML spec now considers `name` attributes deprecated[1] in favor of `id`. So, use cases similar to yours, I would never recommend them. Until you can customize element rendering (#129), it seems you're limited to manual inline HTML :-(
1. see http://www.w3.org/TR/html5-diff/#changed-attributes (`name` is listed as ""allowed but discouraged"")
",jasonkarns,2013-08-04 11:45:23
181,2013-08-04 05:18:15,"It is (I guess) possible to use [cheerio](https://github.com/MatthewMueller/cheerio) to generate names based on ids.
",Mithgol,2013-08-04 11:45:23
181,2013-08-04 11:45:13,"@jasonkarns, I guess I should make this clear in the readme: test/new is for any test that isn't part of the original markdown test suite. test/original is only for the original markdown test suite. test/tests is where they both reside after being combined (and the markdown test suite being slightly altered) via the `node test --fix` script. It's not a problem. I can fix it.
",chjj,2013-08-04 11:45:23
181,2013-08-06 16:31:32,"My only question with this, that i believe i forgot to raise, is it possible to make hover-anchor links like Github with this system? This is why i originally opted for the ""more html"" method, rather than the plain ID option.

Are automatic links basically impossible with this method? Probably need to look into the custom generation branches then?
",leeola,2013-08-04 11:45:23
181,2013-08-06 17:40:22,"@leeolayvar GitHub-style hover anchors are not possible with this method, at least not automatically. Though they could be added with javascript after the fact.
",jasonkarns,2013-08-04 11:45:23
181,2013-08-06 18:21:45,"k, didn't think so, thanks for the confirmation. I guess i'll wait for a token/parser modification system to be implemented to generate real anchors. This will be a useful stopgap until then.
",leeola,2013-08-04 11:45:23
181,2013-08-24 02:45:02,"Wow, why was this merged in? The regex on this needs to be improved dramatically before this is actually usable. Expecting someone to remember to add commas and colons in reference links is a recipe for broken links and inconsistent results. Also, adding the Id directly to the heading is not a good solution as it makes it far more difficult to hang additional styles on the anchor (such as an icon on hover) without messing up your typography. It just seems like this PR has a lot of personal preference associated with it, and not enough regard for popular conventions. 
",jonschlinkert,2013-08-04 11:45:23
181,2013-08-24 03:45:33,"I now see https://github.com/chjj/marked/commit/75dff71cb1acd635bd91b0c671b16456c8477a71, which is good, but using headings instead of anchors is still just a bad idea.
",jonschlinkert,2013-08-04 11:45:23
181,2013-08-24 12:49:57,"> Expecting someone to remember to add commas and colons in reference links is a recipe for broken links and inconsistent results.

@jonschlinkert Personally, I think using the text-as-id is simpler for authors. The use case is for in-document links so the link author is the same person as the header author. Remembering to add commas and such is easier than trying to remember which characters get replaced and which character is used for replacement. The author simply copies the header text and replaces whitespace. But 'simple' is subjective.

Adding any additional markup (like anchors) would only go further into the realm of personal taste. Giving headers an ID that can be targeted covers the core use case. Everything else (styling and clickable permalinks) are just enhancements on that core functionality. Getting the core functionality in place _and shipped_ is more important than waiting for resolution on the numerous PRs that each do something _slightly_ different. ( #89 #92 #129 #134 #207 ) The best future version of marked would indeed do some sort of anchor generation, or at least allow customized renderers. But who knows how long it could take to get those PRs resolved and merged? Much better to at least get marked to support linking to headers _at all_.
",jasonkarns,2013-08-04 11:45:23
181,2013-08-24 14:09:29,"> The author simply copies the header text and replaces whitespace. But 'simple' is subjective.

Fair enough, I imagine we all take our positions based on either what we're familiar with or what we find most advantageous based on what we tend to focus on. IMHO it sounds like your use-cases are more oriented to basic documents, single documents, and/or a small amount of documentation (I really don't intend that as a slight or any kind of jab, so please don't take it that way. These are examples of my use cases: 
- https://github.com/assemble/assemble-docs/tree/master/src/content/helpers
- https://github.com/assemble/assemble-docs/tree/master/src/templates/pages/docs

I'm also doing the documentation for the new lesscss.org website and I'm managing docs for close to 100 other projects. Again, please don't think I'm trying to make a big deal out of ""my projects"", because I'm just one dude. But are my use cases, and hopefully it helps explain why I don't think this PR is sufficient. 

> Giving headers an ID that can be targeted covers the core use case.

I disagree. I'm not sure where you got your ideas about that, or whose core use case you're representing, but IMHO, most people would agree that this should be implemented with proper anchors, not a shortcut to slim down on markdown at the cost of being more correct. 

> Getting the core functionality in place and shipped is more important than waiting for resolution on the numerous PRs

In some cases, but that's a broad generalization that's difficult to debate. In this case, however, I think it would have been better to wait for something idiomatic.

> Much better to at least get marked to support linking to headers at all.

Lol, for _you_. That, in particular, is what stands out to me about this PR. It has personal taste and preferences written all over it. 

At the end of the day, it's not a big enough deal for me to keep debating it. We can just fork it or find another solution.
",jonschlinkert,2013-08-04 11:45:23
181,2013-08-24 14:49:53,"Well, i'll be interested if Anchors are added somehow. Like i was mentioning earlier, i would like a way to make easy linkable anchors (like Github) without having to layer JavaScript onto for seemingly no reason.

With that said, i do feel the IDs are a nice simple solution _if_ the other PRs involving modifying how the HTML is generated are pulled.

If we are given a in-program ability to modify the output to our needs, than i feel the default should be just IDs. They're clean, simple, and provide a basic use case. If we are not given the ability to modify HTML output anytime soon, then i think just ID based anchor links are woefully inadequate.
",leeola,2013-08-04 11:45:23
181,2013-08-24 16:04:04,"Here's how I arrived at my definition of 'core functionality':

There are two features we're discussing.
1. Ability to link to a header as the author or end user. (accomplished with either an ID attribute or anchor element)
2. Ability to quickly get such a link as an end user. (accomplished with ID+link or anchor+link or anchor/link)

The ability to do No. 2 is predicated on No. 1 already working. Granted, using anchors solves both at the same time. But as we can see from the number of pull requests that attempt to do both, there is disagreement on how it should be implemented. But fundamentally, the existence of a clickable anchor+link, and the ability to style it (hover, etc) are enhancements to the core functionality of ""ability to deep-link to an arbitrary header"". Adding IDs to the headers solves the basic use case, with minimal fuss. This way we can start linking to headers _now_ without waiting for the larger implementation using anchors (or custom renderers).
",jasonkarns,2013-08-04 11:45:23
181,2013-09-05 05:31:52,"What about exposing an option like `highlight` for users to insert their own HTML for the header tag called `headerHTML`? The implementation would look like this:

<S_CODE_TOKEN>

Basically there is a simple default implementation, but users are also allowed to do cool stuff like GitHub's hover links if they define a `options.headerHTML` function and return the markup.

Thoughts?
",ChrisWren,2013-08-04 11:45:23
181,2013-12-02 21:00:52,"""I could imagine actual errors being caused by this if there was any javascript depending on those IDs.""

It's also a problem for epub file validation or, basically, for anything else that does strict parsing of HTML. The fundamental issue here is that legal Markdown is being transformed into illegal HTML. That should never happen, IMO.

The argument that authors shouldn't use duplicate headings doesn't seem persuasive. For one, that's a matter of style, not standards compliance. For another, the Markdown content may not be under your direct control (e.g., web site that allows users to enter markdown which is then transformed into HTML for another purpose).
",ghost,2013-08-04 11:45:23
181,2014-10-07 08:27:53,"For anyone wondering here's what I did to get full GFM rendering using github style and anchor links:

<S_CODE_TOKEN>

Then use this CSS file: https://github.com/sindresorhus/github-markdown-css/blob/gh-pages/github-markdown.css
",vvo,2013-08-04 11:45:23
180,2013-06-22 17:17:28,"I'm working to support [MathJax](http://www.mathjax.org/).

Output tag format:
http://docs.mathjax.org/en/latest/model.html#how-mathematics-is-stored-in-the-page

The idea for now:
- `$ ... $` => inline math
- `$$ ... $$` => display math

The code I wrote is mostly monkey-patching. Could anyone help get it settled?
",summivox,
180,2013-06-24 13:00:33,"+1 would love to see this!
",jsbeckr,
180,2013-08-01 05:52:06,"Love the idea but I dislike `$$...$$` as it is far more distracting compared to the rest of markdowns syntax (I know it's standard for latex though).

Personally I've gone with a syntax more like `$[ ax^{2} + bx + c = 0 ]` which is similar to the way you'd include an image in markdown. It also opens the door for other syntaxes like ASCIIMath 

<S_CODE_TOKEN>
",ilsken,
180,2014-02-12 17:07:36,":+1: 
",Jerskouille,
180,2014-03-03 06:00:59,"I like the syntax suggestion! Would love to see this in Atom soon.
",karan,
180,2014-03-05 03:09:49,"If you're interested I implemented this in my own fork of marked
",ilsken,
180,2014-03-05 03:17:55,"Actually I impl'd this as a monkey patch to support MathJax in [renren-markdown](https://github.com/summivox/renren-markdown). I'm enough of all this Markdown-related fragmentation and wish that someday we could really have a blessed ""common markdown"" or such.

chjj/marked seems to be in a state of limbo -- dunno what's going on or what's the author's plans, but it seems that these will never get merged... sigh...
",summivox,
180,2014-03-07 12:07:14,"there are already many other editors doing this mathjax + markdown, and they stick to latex convention :
`$....$ for inline
$$...$$  for display`

imnsho, the last thing anyone need is a new syntax for latex.
There in a de-facto standard on this, used in ipython notebook, R markdown, stackedit.io, etc....

you can also accept a block syntax to make it more regular if you so wish, but supporting what is now the standard seems a must for usability/interoperabiltity.
",nrolland,
180,2014-03-07 12:12:10,"@nrolland I know (and have used) the `$ ... $` and `$$ ... $$` syntax. However this causes trouble as Markdown documents could easily contain `$` -- which not very surprisingly means ""dollar"". This is the only reason I implemented in this PR as `$$ ... $$` and `$$$ ... $$$`.

And, before the big players agree on a ""common markdown"" I don't think this chaos could really end.
",summivox,
180,2014-03-07 13:43:35,"I am not sure this is wise. If people really mean dollar, they use USD.  I dont even know where the euro sign is on my keyboard, or how to do Yen. 
Conversely, math is much more common.

As far as I can see, there is little chaos in that matter : editors have settled for latex convention.
",nrolland,
180,2014-03-07 14:11:07,"> If people really mean dollar, they use USD.

That's far from true for the majority of people.

> I dont even know where the euro sign is on my keyboard, or how to do Yen. 

That's completely irrelevant to the discussion. The equivalent argument is that I don't know latex.

> Conversely, math is much more common.

Do you have any statistics to actually back that up?

> As far as I can see, there is little chaos in that matter : editors have settled for latex convention.

I think this is a strong argument. If there are multiple implementations that already follow this convention, then deviating from this convention is harmful. Including the `mathjax` option and defaulting it to `false` would prevent any accidental breakage anyway.
",scottgonzalez,
180,2014-03-07 14:42:43,"Since the statistics to back that up would be the same than those which backs your argument about ""the majority of the people"". I dont have them, you dont have them, we are talking opinion here. 

At the level of opinion, me not knowing where the euro or yen symbol is despite working for 10years in finance is relevant.  The equivalent argument would be you ignoring latex despite being a mathematician typing electronic math for 10years. I guess that would say something about the relevance of such system.

My guess though is folks who type € for EUR, $ for USD, ¢ for cent (just discovered that one, cute),  ¥ for JPY, ?? for CNY (can't find it..) use Word or any other general editor, not a fancy new markdown format. let's see in 5 years if that guess is proved correct.

In the meantime, there seems to be a standard, and it it not in favor of funny currency signs.
",nrolland,
180,2014-03-07 14:47:14,"The ""common markdown"" concept would be a very good thing though.
(Conceptually, its structure would make blocks similar to cells in markdown. 
possibly with some extension protocol to pass on environments/notifications
but that is a different issue)
",nrolland,
180,2014-03-07 16:34:28,"I don't understand the difficulty with the $.  A single $ is an inline expression, it has to be matched to a closing $ within the same block.  If there are two $ currency symbols in the same block -- and mathjax is enabled -- the user is likely to recognize the problem and take appropriate action.  

So what is the appropriate action?  How can the $ symbol be escaped, so that it's not processed as a mathjax open inline block indicator?  Let's see how it works on [math.stackexchange](http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference):

> Special characters used for MathJax interpreting can be escaped using the \ character: \$ $, { {, _ _, etc.

Why not follow suit?
",marfarma,
180,2014-03-07 16:38:04,"Based on how the quoted comment rendered, backslash already escapes the curly brace and the underscore -- so it's probably just a matter of adding the $ symbol to the list of 'escape-able characters' in the same block of code.
",marfarma,
180,2014-03-07 17:51:18,"@marfarma : Makes sense. Changed.

@nrolland @scottgonzalez  : My fault to bring up the ""currency"" issue. It's clearly off-topic and let's return to supporting mathjax correctly.
",summivox,
180,2014-06-18 05:07:11,"damn, I spent the afternoon implementing this :) that's the status here? I'd love to see it merged soon!
",andreabedini,
180,2014-07-07 05:08:15,"I'm interested in helping out to get this merged. @chjj if this was rebased would you consider merging it?
",jmeas,
180,2014-07-22 19:04:17,"+1 for merging!
",julou,
180,2014-07-23 00:47:46,"Quite suprised to see this attracting attention 1 year after I first wrote it.
I did rebase this quite long ago but master has advanced since then. Rebasing doesn't make any more sense if master keep going ahead without merging this in.
@chjj : would you mind giving a word on this?
",summivox,
180,2014-07-23 14:50:36,"I was misled by use cases that made me think that this issue was not taken into account.
Indeed, underscores are actually protected between $.

However, curly braces introduce are another source of problem: e.g. in `$\mu_{d,A} ?= \mu_{d,B}$` is rendered as `$\mu<em>{d,A} ?= \mu</em>{d,B}$`.
More intriguingly:
- `$\mu_{d}$, $\mu_m$  parametrized by $\theta_d$ and $\theta_m$` is rendered correctly
- `$\mu_d$, $\mu_{m}$  parametrized by $\theta_d$ and $\theta_m$` is rendered as `$\mu<em>d$, $\mu</em>{m}$  parametrized by $\theta_d$ and $\theta_m$`

I guess this should be considered as a bug.
",julou,
180,2014-07-23 15:04:00,"@julou : I failed to reproduce the bug at 2d3594f .

<S_CODE_TOKEN>
",summivox,
180,2014-07-23 15:29:26,"Thanks for checking!
Which version of marked.js is that? 
I just forked and build chjj/marked and when I run tests, I never get `<script type=""math/tex"">`. Is there any options to add?
",julou,
180,2014-07-23 15:42:22,"@julou : `mathjax: true`
",summivox,
180,2014-07-24 11:44:45,"After getting in touch with summivox, it appears that his test was run using his `mathjax` branch which has not yet been merged to chjj's master. Hence my first comment :)

<S_CODE_TOKEN>

Such a widely used md parser deserves a better support for inline math…
",julou,
180,2014-07-30 23:21:42,"@summivox @julou I created a fork of `marked` called `kramed` (https://github.com/GitbookIO/kramed). We will be using it for [GitBook](https://github.com/GitbookIO/gitbook).

It has your `mathjax` support already integrated and published on `npm` (release `0.4.0`).

Here's [Why we forked marked](https://github.com/GitbookIO/kramed#why-fork-marked-)
",AaronO,
180,2014-07-31 00:57:56,"@AaronO : Sweet. Won't close this PR for the time being though.
",summivox,
180,2015-03-09 19:39:04,"Why introduce a new syntax when you can just piggyback on code blocks and use a custom renderer?

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

https://github.com/chjj/marked#overriding-renderer-methods
",rymohr,
180,2015-03-09 22:44:18,"Because inline math.
",summivox,
180,2015-06-26 11:22:04,"Scholdoc found a reasonable way to use backticks for inline math - require
exactly 2 backticks:
http://scholarlymarkdown.com/Scholarly-Markdown-Guide.html#inline-math
It's almost compatible with existing docs (using more than one backtick is
rare), and still allows anything to be escaped in new docs as you can
always use 3 or more backticks instead of 2.
I'm not saying that's a great syntax, just mentioning it.

If you want to compare to syntaxes others implemented, I'm cataloguing them
at https://github.com/cben/mathdown/wiki/math-in-markdown (feel free to
edit, it's a wiki).
The fragmentation is somewhat sad.
My _personal_ opinion is that most scientists writing in markdown will
flock to pandoc so it's best to stick to one of the syntaxes that pandoc
supports.

2015-03-10 0:44 GMT+02:00 summivox notifications@github.com:

> Because inline math.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/pull/180#issuecomment-77960641.
",cben,
180,2015-06-26 12:37:08,"@cben : I was aware of these work. This fragmentation is unfortunate yet inevitable -- considering we actually have CommonMark now.

Very ironic -- this patch was here over 2 years ago.
",summivox,
179,2013-06-19 17:07:21,"The backtick syntax, when embedded in a backticked portion of code, will end at the first occurrence of <S_CODE_TOKEN><S_CODE_TOKEN>no-highlight
 <S_CODE_TOKEN>

 <S_CODE_TOKEN>

 <S_CODE_TOKEN>

    var foo = 1; // no syntax highlighting in indented blocks either.
<S_CODE_TOKEN>```

Shouldn't it check for indentation?
",bevacqua,
179,2013-12-26 08:59:00,"+1
",jfhenriques,
179,2014-08-12 05:59:56,"you just wrap your code in sets of 4 backticks like so:

<S_CODE_TOKEN>
<S_CODE_TOKEN>javascript
var s = ""JavaScript syntax highlighting"";
alert(s);
<S_CODE_TOKEN>python
s = ""Python syntax highlighting""
print s
<S_CODE_TOKEN>
No language indicated, so no syntax highlighting. 
But let's throw in a <b>tag</b>.
<S_CODE_TOKEN>`
<S_CODE_TOKEN>

...but that's a good idea to check for indentation
",slang800,
178,2013-06-18 21:47:58,"Taken from http://gist.github.com/drdrang/705071

Basically, if a ' or a "" is preceded by the beginning of line, dash,
slash, parentheses, brackets, quotes, or whitespace, it's an opening
one. Otherwise it's a closing one.
",tasuk,2013-08-02 16:42:18
178,2013-06-18 21:53:16,"Also, it'd be nice to create a passing and unified test suite, testing the different defaults in one command. Running `node test`, 4 tests fail, running `node test --smartypants` (which, btw, took me ages to find), one gets 14 failing tests.

I'd be happy to help, but would need some direction, as I haven't done that much javascript and am completely new to node.
",tasuk,2013-08-02 16:42:18
178,2013-06-18 21:53:56,"This PR should address #166.
",tasuk,2013-08-02 16:42:18
177,2013-06-18 08:45:59,"Now can use tables like this, sometimes may be really useful:

------------ | -------------
Content Cell | Content Cell
Content Cell | Content Cell
",zhukov,
176,2013-06-18 08:00:24,"Adds information on how to run tests and which ones are failing. Please
note we can't use test numbers, as the tests are run asynchronously and
may finish in any order.
",tasuk,
175,2013-06-18 07:42:21,"Hi Christopher, thanks for your awesome work on marked. Love the ability to access the lexer directly!

I wanted to make a little contribution, but the tests fail. Is it something in my setup or are they supposed to fail?

Ran tests on current `master` like this (snipped successful tests for readability):

<S_CODE_TOKEN>
$ npm install
$ node test

#10. def_blocks.text failed at offset 20. Near: ""<blockquote><p>hello</p></blockquote><hr><blockquo"".

Got:
<blockquote><p>hello</p></blockquote><hr><blockquo

Expected:
<blockquote><p>hello[1]:hello</p></blockquote><hr>

#11. double_link.text failed at offset 46. Near: "":<ahref=""http://example.com/""><ahref=""http://example.com/"">h"".

Got:
:<ahref=""http://example.com/""><ahref=""http://example.com/"">h

Expected:
:<ahref=""http://example.com/"">http://example.com/</a>.</p><p

#15. gfm_code_hr_list.text failed at offset 352. Near: "">foo<code>bar</code>bar:</p><p><S_CODE_TOKEN>erbfoo</p></li></ol></li><

Expected:
>foo<code>bar</code>bar:</p><pre><codeclass=""lang-erb"">foo--

#18. gfm_break.text failed at offset 12. Near: ""<p>Lookattheprettylinebreaks.</p>"".

Got:
<p>Lookattheprettylinebreaks.</p>

Expected:
<p>Lookatthe<br>prettyline<br>breaks.</p>

44/49 tests completed successfully.
4/49 tests failed.
1/49 tests skipped.
<S_CODE_TOKEN>

Also, I need to scold you a little bit - information on how to run the test suite to verify correct behavior ought to be more important than how to run bloody benchmarks!
",tasuk,2013-06-18 07:44:28
175,2013-06-18 07:44:27,"Ah, #136 ... this info needs to be more visible!
",tasuk,2013-06-18 07:44:28
174,2013-06-17 20:26:33,"adjusts the link pattern to allow

<S_CODE_TOKEN>

to convert to

<S_CODE_TOKEN>

where previously the link expression would not match,
and you would just get

<S_CODE_TOKEN>

echoed back at you.
",minrk,2013-08-02 17:00:55
173,2013-06-17 01:59:10,"Simple tiny change to allow intercepting the lexer results to
decorate the headings in the parser with potentially unique id's.

would be useful for bulk processing of a tree of .md and/or deep linking
to a section via #hash in rendered output
",phiggins42,2013-08-02 17:02:14
173,2013-06-17 06:50:04,"For future references: #173 is relatively compact, and #117 seems to offer more options.
",Mithgol,2013-08-02 17:02:14
173,2013-06-17 11:32:56,"@Mithgol yah, I saw #117 and #129 would provide the same functionality except it has been open for several months with a concern on performance. I would gladly take the small perf hit on parsing by using #129. The addition of a single ternary here gets me over the hurdle I am currently facing, the rest of the rendering intercepts would just be nice to have.
",phiggins42,2013-08-02 17:02:14
173,2013-08-02 17:02:14,"Closed in favor of #181.
",chjj,2013-08-02 17:02:14
172,2013-06-15 02:18:51,"Hey,
I just tried to parse some things like 

<S_CODE_TOKEN>
some text
 <S_CODE_TOKEN> (without that slash)
some text
<S_CODE_TOKEN>

with [bitter](https://github.com/iizukanao/bitter), but I think it's more a problem of marked, because it showed no line as code. when I added back slashed to the end it parsed it correctly, but then there was a backslash at every line in the output-html
",spruce,
172,2013-06-15 02:25:01,"I think I found sth interesting. When moving this  #!/bin/sh to the next line and adding instead `\` everything is shown as expected
",spruce,
171,2013-06-14 10:45:29,"Hi

I am finding 2 scenarios:-

1) Scenario 1
BEGIN:

<div class=""scenario"">

## Scenario
User can write specifications using tables.


|     ID   | Given    | When     | Then     | Actual |
| :------: | -------: | :------- | -------- | ------ |
| Cell 1   | Cell 2   | Cell 3   | Cell 4   |        |
| Cell 5   | Cell 6   | Cell 7   | Cell 8   |        |

</div>

ending with any text
END

2) Scenario2
Same as above but replace the ""ending with any text"" with a ##Heading.
This will not render the table correctly. The version I am playing around is master (as of yesterday)
",cjloong,
170,2013-06-10 13:55:18,"GFM lets you create [Task Lists](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) using the following syntax:

<S_CODE_TOKEN>

Which renders the following:
- [ ] First item
- [x] Checked item

It would be great to have that feature in marked.
",JoseTomasTocino,
170,2013-06-10 14:08:09,"@JoseTomasTocino vote for this feature https://github.com/chjj/marked/pull/129

You can easily setup the task feature with renderer.
",lepture,
170,2013-06-10 15:40:52,"I'd rather have it natively, as it's a native feature of gfm.
",JoseTomasTocino,
170,2013-06-11 05:03:38,"Duplicate of the previous #107 and #111 issues.
",Mithgol,
170,2013-06-11 07:20:07,"@JoseTomasTocino You must misunderstand, GitHub build gfm on sundown with its renderer feature, there is no such thing as built-in.
",lepture,
170,2013-07-03 07:33:09,"@lepture, no, I see what he is saying. You can do it your way, but then you'd have to set it up, no? Especially with my project, I need it to be work natively or I'm most likely not going to support it.
",OscarGodson,
169,2013-06-07 20:45:28,"marked only works with require.js if the wrapper `function` is commented out along with the caller as far as I can tell.
",nayrangnu,
169,2013-08-07 20:49:08,"This test works for me:

<S_CODE_TOKEN>

Prints the following to the console:

<S_CODE_TOKEN>

Using this version (7 Aug 2013):

https://github.com/chjj/marked/blob/d53f20690fa141870bccab64b0d74dfe141462f7/lib/marked.js
",gitgrimbo,
169,2013-10-15 19:30:39,"I am fighting with this, right now. 

It appears to work inside a require() call, but not inside a define() call.

define(['marked'], function(){
/\* marked won't work here */ 
});

To clarify:

define(['marked'], function (marked) {
/\* marked() _will_ work in this scope. */
});

define(['marked'], function () {
/\* marked() will _not_ work in this scope */
});

The later form works with things such as jquery, and underscore.js. They attach to the global scope. However, marked does not appear to attach to the global scope, and therefore is only available, if its a specifically named parameter.
",dduleone,
169,2013-10-15 21:14:24,"What you are seeing is the correct behaviour as far as I know.  An AMD-compatible script should not affect the global scope when a compatible AMD loader is present.

See this code:

https://github.com/chjj/marked/blob/d53f20690fa141870bccab64b0d74dfe141462f7/lib/marked.js#L1153

and how it checks the type of `define` and for `define.amd`.
",gitgrimbo,
169,2013-10-15 21:26:55,"I'm not sure it's a bug. I didn't file the original issue, I was just clarifying. I made it work using:

<S_CODE_TOKEN>

but, my define array had over 20 other items in it and none of them required named parameters. 

This pattern may be specifically prevalent in Angular.js apps, as I'm under the impression that the convention is for the JS source for angular modules get included in the define([],) array, and then they're passed as dependencies to the angular.module('module', [..., ...]) call. So, they don't return objects which need to map to named parameters in the define()'s anonymous function.

Either way, as you stated, this might be the correct prescribed behavior.

For contrast and academic purposes, underscore.js does something similar to you:

<S_CODE_TOKEN>

But, as you can see, it also attaches to 'root', which puts it in the global scope.
",dduleone,
169,2014-09-22 09:14:00,"@gitgrimbo   @dantothelz 

<S_CODE_TOKEN>
",Dreampie,
169,2015-01-13 01:39:34,"What if I don't want to save, say, blog posts as html but want to parse them in the template on render-time? 

For example, I was trying to use this lib with a Backbone app, and I'd like to have the marked() call in the template like this `<%= marked(body) %>` but I can't do that because marked won't be available to the templates.

Would I have to overload my model, and hence my server requests, with a parsed_body property?
",poifox,
168,2013-06-07 01:41:47,"Marked crashed and asked me to report the problem.

<S_CODE_TOKEN>

I'm afraid I couldn't replicate the issue with text I can give you. 
",garthk,2014-03-19 12:04:00
168,2013-07-01 17:22:16,"Make sure you are not giving marked a 'Buffer'.
",TheDistractor,2014-03-19 12:04:00
168,2013-07-04 16:08:07,"Make sure that you give `marked.parsemd(val)` the `val` is not underfine.
",welkang,2014-03-19 12:04:00
168,2013-07-06 04:23:43,"I'm also getting this when using with EpicEditor https://github.com/OscarGodson/EpicEditor
",azhang,2014-03-19 12:04:00
168,2013-10-20 17:33:52,"Hello: I have run into this issue when trying to use doxx.

I have a directory with one *.js source file and then I invoke doxx to output documentation:

% doxx --source ./ --target ./docs

which results in the stack trace below.

Version of node: 0.10.18
OS: Mac 10.8.5
doxx: 0.7.0
marked: 0.2.9

Any help is appreciated.

--- x8 snip

/usr/local/lib/node_modules/doxx/node_modules/marked/lib/marked.js:1099
    throw e;
          ^
TypeError: Cannot call method 'replace' of undefined
Please report this to https://github.com/chjj/marked.
    at Lexer.lex (/usr/local/lib/node_modules/doxx/node_modules/marked/lib/marked.js:130:6)
    at Function.Lexer.lex (/usr/local/lib/node_modules/doxx/node_modules/marked/lib/marked.js:121:16)
    at marked (/usr/local/lib/node_modules/doxx/node_modules/marked/lib/marked.js:1091:31)
    at Object.<anonymous> (/usr/local/lib/node_modules/doxx/bin/doxx:116:11)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
",whatevernot,2014-03-19 12:04:00
168,2014-03-19 04:34:13,"To whatevernot,

Just found your post which indicated a problem similar to mine. I have just solved it by putting a README.md file in the current directory and run doxx again. Hope that can help although it comes late.
",albertmcw,2014-03-19 12:04:00
168,2014-03-19 11:51:27,"Hi - thanks for the reply!

I recall somehow figuring it out a while back - I know it’s working now.

Appreciated - regards.

b…

On Mar 19, 2014, at 12:34 AM, albertmcw notifications@github.com wrote:

> To whatevernot,
> 
> Just found your post which indicated a problem similar to mine. I have just solved it by putting a README.md file in the current directory and run doxx again. Hope that can help although it comes late.
> 
> —
> Reply to this email directly or view it on GitHub.
",whatevernot,2014-03-19 12:04:00
168,2014-03-19 12:04:00,"It sounds like everyone that has this problem is using some other tool which is using marked. Unless someone can provide a reduced test case, there's not much that can be done.
",scottgonzalez,2014-03-19 12:04:00
167,2013-06-04 10:07:23," We are using Marked in a forum: https://github.com/cnodejs/nodeclub/
This might be a strange feature request, but let me explain:

Many programmers in China are not enough familiar with Markdown (many are famliar though). In some topics and posts, code and logs are just pasted like plain text. Code without right formating looks really bad, we were trying to find solution to fix it.

Thinking it is indeed a better experience to paste code directly in a textarea, I sent a PR to display the code in a CSS style `white-space: pre-wrap` to make writespaces visible, It makes sense that many code that was not markuped look better now with indentation and fixed-with font face.

But there are still problems, for example, for code like this:

<S_CODE_TOKEN>

This might be a piece of code that was directly pasted into the content. Since empty lines are present, the line in the middle is recognized as code, and is transformed into a `<pre>` block. As a result, [the code looks strange](http://cnodejs.org/topic/51ac669b555d34c678826dca).

---

code

<S_CODE_TOKEN>

code

---

If it is not regarded as code, then it could be plain text, with indentations.
With `whitespace: pre-wrap` it looks like code (without syntax highlight).
Making Markdown compatible with plain text help people keep focusing on the content rather than the formating.

Meanwhile, as a personal experience, I usually edit my code in a text editor, then copy and paste it to an textarea. Adding indentations is a disguasting step, especially for a forum (much better when using Markdown for blogging).

So I think it is a trick or solution we may rely on to make Markdown better.
",jiyinyiyong,
167,2013-06-04 12:51:43,"@jiyinyiyong Robotskirt is suggested, which is a sundown binding in Node.
",lepture,
167,2013-06-04 14:40:37,"@lepture Did Robotskirt considered this problem and added feature for it?
Options about disabling the indentation syntax are not found in the repo of Robotskirt :(
",jiyinyiyong,
167,2013-06-04 23:50:54,"@jiyinyiyong Github is powered by sundown. And it has a renderer feature. I am introducing renderer to marked at #129 
",lepture,
167,2013-06-05 05:58:59,"Judging from the API `blockcode: function(code, lang)`, it seems to be the content that is already parsed and transformed to HTML or something. There are two syntax rules for makign code blocks. How can I tell them from each other with this API?
",jiyinyiyong,
166,2013-06-02 05:43:24,"In words like `don't` and `'cause` the straight quote should be converted to an apostrophe (right single curly quote).

 Right now in a sentence like `I won't do it 'cause I don't want to.` the first `'` gets converted to a left single quote, the second one to a right single quote and the third is unchanged which is wrong.
",iclanzan,
166,2013-07-01 11:53:50,"+1
",iclanzan,
166,2017-01-13 18:30:24,"Update: Since #178, that sample sentence now translates to `I won’t do it ‘cause I don’t want to.`  So it's correct in the middle of a word, but [incorrect](http://www.chicagomanualofstyle.org/qanda/data/faq/topics/SpecialCharacters/faq0008.html) in `'cause`.

Relatedly, I came here to report that `[JavaScript](https://en.wikipedia.org/wiki/JavaScript)'s` formats into `<a href=""https://en.wikipedia.org/wiki/JavaScript"">JavaScript</a>‘s` which is also the wrong apostrophe.  I'm not quite sure why, given the current regex... is it being treated as at the beginning of line in this case?",edemaine,
165,2013-06-01 20:45:00,"My first commit fixes the argument typo for the Lexer.lex() function call for async highlighting, the same as #152.

Additionally, I noticed that when I was doing async highlighting and the markdown content didn't have a code section, it would never call the completion callback.

[This](https://github.com/ChrisWren/marked/blob/0c94d3ab64e70f3dcc2b4b76ed6a66171a6791ee/lib/marked.js#L1064) line of code was the only place where `done()` was invoked, and as you can see it is inside the highlighting callback. What I did is add a check for non-code tokens to see if there is no code highlighting pending when parsing the last token and call `done()` in that case. 
",ChrisWren,2013-06-01 23:53:12
165,2013-06-01 23:53:09,"The 0.2.9 release fixed both of these issues. Async support wasn't considered stable until then.
",chjj,2013-06-01 23:53:12
164,2013-06-01 20:31:05,,ianstormtaylor,2013-06-01 23:53:50
164,2013-06-01 23:56:49,"Thanks. Merged.
",chjj,2013-06-01 23:53:50
164,2013-06-02 00:05:05,"of course :)
",ianstormtaylor,2013-06-01 23:53:50
163,2013-05-27 16:24:05,"reference markdown doesn't escape quotation marks:

<S_CODE_TOKEN>

Is there a good reason to make this substitution? It is one of the main reasons why `<script>` and `<style>` tags get messed up.
",minrk,2013-08-02 17:36:42
163,2013-05-29 00:05:45,"It does seem like this isn't necessary, but I don't think you should have a problem with `<script>` if you use the current code (as of 3fb76d7b2aa6ec86db4697a88238921c94d5dfaa). Assuming your PR for `<style>` (#155) is accepted, are there any negative side effects to the escaping?
",scottgonzalez,2013-08-02 17:36:42
163,2013-05-29 00:14:02,"I can't think of any side effects after those two PRs are both in a release, just a distinction from markdown reference. I mainly opened this as a question if the difference is intentional or not.
",minrk,2013-08-02 17:36:42
163,2013-08-02 17:20:56,"@chjj Is there any reason to keep this open now that #155 has been merged?
",scottgonzalez,2013-08-02 17:36:42
163,2013-08-02 17:36:28,"@scottgonzalez, yeah I suppose if this is the reason @minrk started this issue in the first place. While the current behavior doesn't follow markdown.pl exactly, it does agree with html. I wouldn't feel comfortable implementating this anyway.
",chjj,2013-08-02 17:36:42
163,2013-08-02 17:42:15,"It was more a question about intent than a request for change. Thanks for clarifying.
",minrk,2013-08-02 17:36:42
162,2013-05-25 20:37:02,"With `gfm` and `break` enabled, there's some differences between marked and GitHub's own rendering. For example, the following:

<S_CODE_TOKEN>

Turns into this on GitHub:

> test
> - foo
> - bar

But in marked, it turns into this:

> test
> _foo_ bar

Now, putting an empty line between test and the first list entry solves the issue, but I think it'd make sense for this to work like it does on GitHub (at least when you have `gfm` and `break` enabled).
",Daiz,
161,2013-05-22 23:27:25,"I am suddenly getting this error in my log on an express app

output:

<S_CODE_TOKEN>

Thanks for any help!
",lactose,2013-05-23 00:45:00
161,2013-05-22 23:53:48,"Could you include the markdown you're trying to render?
",chjj,2013-05-23 00:45:00
161,2013-05-23 00:45:00,"Yeah, this was my bad, lol.
",lactose,2013-05-23 00:45:00
160,2013-05-22 05:03:26,"Hi there,

I'm running into a problem with marked.js where it's rendering markdown correctly except for certain characters in code blocks.

I freely admit that my javascript-fu kinda sucks, so if I'm doing something wrong here or just plain stupid, please let me know so I can go fix it.

The app I'm building is pretty simple - just rendering markdown formatted articles. So the HTML that will come out of the server will _NOT_ have the various symbols - specifically the > sign - escaped. It'll just be totally raw. (I can sanitize/escape it though if that helps, though so far in my testing it's made no difference.)

I might write a post that looks like this (ignore the \ here, I have to escape the markdown syntax inside of markdown on github):

<S_CODE_TOKEN>

# heading one

paragraph

\<S_CODE_TOKEN>

paragraph
<S_CODE_TOKEN>

If that's the raw source of my article, everything will be fine except the code block will come off as:

<S_CODE_TOKEN>

Which obviously doesn't work.

I've set sanitize to false in the marked.js settings for the app I'm working on and it's still doing this. I can verify that the raw source of the HTML does _not_ have this already sanitized/escaped, and if I turn off marked.js, the > sign renders correctly (though of course the markdown doesn't).

I've put a small example up on GitHub here:
https://github.com/jaustinhughey/markdownjs-examples/blob/master/markedjs.html

You can see exactly what's going on. Here's a screenshot of what that renders like:
![Screenshot](http://f.cl.ly/items/2i232K1b3X2Z2G0T2y3b/Screen%20Shot%202013-05-21%20at%2011.58.06%20PM.png)

Have I run into a bug here, or am I just missing something?  Thanks guys.
",jaustinhughey,2013-06-02 08:14:08
160,2013-05-29 00:14:46,"I believe this is because the `sanitize` option is limited to HTML input. Since you're used fenced code blocks in markdown, the option won't affect this content.
",scottgonzalez,2013-06-02 08:14:08
160,2013-05-29 04:58:56,"Thanks for the clarification, Scott. Sounds like I won't be able to use this for the project I had in mind, which is a shame but it's understandable - unusual use case. Thanks!
",jaustinhughey,2013-06-02 08:14:08
160,2013-05-29 11:48:58,"You can modify the tokens between the lexing and parsing to prevent the code blocks from getting encoded:

<S_CODE_TOKEN>
",scottgonzalez,2013-06-02 08:14:08
160,2013-05-30 06:51:21,"I need to do a little bit more testing, but so far this appears to work. Thanks Scott!
",jaustinhughey,2013-06-02 08:14:08
160,2013-06-02 08:14:08,"Just circling back here to close the loop and say ""thanks"". I've used Scott's tip with much success - everything's working as I expect it to. Thanks Scott!
",jaustinhughey,2013-06-02 08:14:08
160,2015-07-16 22:26:36,"Sorry to reopen this but... shouldn't this be the default behaviour...? 
",mercmobily,2013-06-02 08:14:08
160,2015-07-16 22:28:00,"Actually I cannot reopen this one... creating a new issue.
",mercmobily,2013-06-02 08:14:08
160,2015-12-22 23:44:38,"I had similar issue. Thanks Scott!
",rezajatnika,2013-06-02 08:14:08
160,2016-04-12 21:15:44,"I'm trying to render markdown client-side. After placing the code from [the comment above](https://github.com/chjj/marked/issues/160#issuecomment-18611040)  I'm getting a `content is not defined` error. What does the ""content"" variable represents and where exactly should I put this code?  
",AeonFr,2013-06-02 08:14:08
159,2013-05-18 19:12:02,"This is a more robust version of the async version. The current async version doesn't even work.
",mgutz,2013-05-18 23:52:57
159,2013-05-18 23:52:57,"After thinking about this, this is not really needed. It's easy enough to do this outside of the library
1. Lex source
2. Manipulate code tokens async
3. Parse tokens

I suggest removing the bad async code in master altogether
",mgutz,2013-05-18 23:52:57
159,2013-05-19 00:20:37,"The async code hasn't been released yet. Dealing with the tokens outside of marked was originally the intended way of handling async highlighting, but enough people complained that I added some preliminary async code.
",chjj,2013-05-18 23:52:57
158,2013-05-18 10:40:37,"In a table like the following:

<S_CODE_TOKEN>

a cell is translated into:

<S_CODE_TOKEN>

Alignment is accomplished through the use of HTML `align` attribute which is considered obsolete for [HTML5 tables](http://www.w3.org/TR/html-markup/table.html#table-constraints).
CSS is recommended by the W3C.
",nadirs,2013-06-13 14:31:42
158,2013-05-29 00:17:13,"This should be an easy fix. @chjj Do you want a PR for this?
",scottgonzalez,2013-06-13 14:31:42
158,2013-06-05 18:38:09,"A workaround for this is to create a rule in your own CSS, using the attribute. For example:

<S_CODE_TOKEN>

(I bet chjj doesn't want to add `style` attribute output to Marked...)
",adam-p,2013-06-13 14:31:42
158,2013-06-13 14:31:38,"@adam-p Completely agree about leaving CSS out of the markdown engine. Your workaround is nice, thanks for sharing!
",nadirs,2013-06-13 14:31:42
158,2015-01-15 10:21:47,"This will not work with images inside tables
",julmot,2013-06-13 14:31:42
157,2013-05-16 04:17:59,"I saw that async highlighting support was implemented in  https://github.com/chjj/marked/commit/db4b6d4724ce578b49c69f5ca88cc425f039cd51 but there is no mention of it or example of how to use it in the documentation.
",colinwren,
157,2013-05-29 00:24:00,"I believe the API is:

<S_CODE_TOKEN>

So this is probably just a matter of documenting the fact that a callback can be provided and noting that when using a callback, the highlighter can be async.
",scottgonzalez,
156,2013-05-15 04:54:00,"These two libraries seem to have almost the same amount of popularity, As a new user, what differences should I know about?

Other lib:
https://github.com/evilstreak/markdown-js
",mkoryak,2013-07-27 02:55:53
156,2013-05-15 05:59:41,"@mkoryak view the benchmarks https://github.com/chjj/marked#benchmarks
",lepture,2013-07-27 02:55:53
156,2013-05-29 00:26:26,"@mkoryak Are there any specific features/topics you were looking for? I think the main difference is highlighted in the very short description of the README, where it says ""Built for speed.""
",scottgonzalez,2013-07-27 02:55:53
156,2013-05-30 16:28:04,"Nope, just wondering if there was something dramatic that set these two apart. I asked the same question on their github page also. 
I need to do some very simple markdown conversion so ill pick one of these libs based on how much I like the API
",mkoryak,2013-07-27 02:55:53
155,2013-05-13 15:44:43,"extends 3fb76d7b2aa6ec86db4697a88238921c94d5dfaa to style tags
",minrk,2013-08-02 17:04:16
155,2013-05-29 00:05:57,"This seems good to me.
",scottgonzalez,2013-08-02 17:04:16
154,2013-05-04 19:21:02,"As per title, now the long dash and quotes are converted correctly.
",omeid,2013-05-29 01:39:22
153,2013-04-30 14:38:36,"I'm currently attempting to use Marked with Grunt/Grunt-Contrib-Jade and I seem unable to set my Marked options properly. How can I go about setting my options? The error is `ReferenceError: marked is not defined`
",Snugug,
153,2013-05-29 00:28:26,"@Snugug It sounds like you're not `require()`ing marked. You should probably just ask for help on IRC, either in #node.js or #grunt.
",scottgonzalez,
152,2013-04-29 21:02:02,"An incorrect first argument was given to `Lexer.lex` on line 1035. thx
",joelmoss,2013-08-02 17:05:33
152,2013-05-29 00:30:33,"@chjj This seems like a pretty important fix :-)
",scottgonzalez,2013-08-02 17:05:33
152,2013-08-02 17:05:33,"Fixed in 0.2.9. It was important but marked was never released in this state. That was still a preliminary async implementation.
",chjj,2013-08-02 17:05:33
151,2013-04-24 01:24:18,"<S_CODE_TOKEN>
",fish520,2013-05-31 01:03:07
151,2013-05-29 00:32:44,"@fish520 Are you able to provide the code that caused this, or a full stack trace?
",scottgonzalez,2013-05-31 01:03:07
151,2013-05-31 01:03:07,"eh, I'm really sorry for that, it's just a mistake, I've found the reason why this happen, nothing to do with node-webkit.
",fish520,2013-05-31 01:03:07
150,2013-04-22 19:08:11,"If I have two consecutive code blocks (delimited by a line of < 4 spaces indent) they get joined into one (periods denote spaces):

<S_CODE_TOKEN>

This is interpreted as if I wrote:

<S_CODE_TOKEN>

I realize github also joins these and that may be the desired behaviour in many cases but I need this to be parsed more strictly.

If the current behaviour is considered a feature and not a bug I wonder if we can add an option to parse more strictly. If this is not welcome how would I go about overriding the parsing or post-processing to add this for myself?
",cadorn,
150,2013-04-22 19:33:03,"I have seen this in the canonical ""dingus"" on Daring Fireball, too. I end up putting something -- an hr, a word or two, whatever -- between the two blocks. I have often wished for this same thing. It appears to be a limitation of the language, and we are aiming for exact translation of the language here.

Walter

On Apr 22, 2013, at 3:08 PM, Christoph Dorn wrote:

> If I have two consecutive code blocks (delimited by a line of < 4 spaces indent) they get joined into one (periods denote spaces):
> 
> ...CODE BLOCK 1
> 
> ...CODE BLOCK 2
> 
> This is interpreted as if I wrote:
> 
> ...CODE BLOCK 1
> ...
> ...CODE BLOCK 2
> 
> I realize github also joins these and that may be the desired behaviour in many cases but I need this to be parsed more strictly.
> 
> If the current behaviour is considered a feature and not a bug I wonder if we can add an option to parse more strictly. If this is not welcome how would I go about overriding the parsing or post-processing to add this for myself?
> 
> —
> Reply to this email directly or view it on GitHub.
",walterdavis,
150,2013-04-24 10:43:23,"This is intentional. Marked used to have ""smarter"" parsing in this area until I realized markdown.pl has ""dumber"" parsing. Figuring out what to do here. The dumb parsing could possibly be moved into pedantic.
",chjj,
150,2013-05-25 20:09:17,"How about marking the two separate code blocks with triple backticks? You'll have additional lines for the backticks but at least you'll be able to control the separation precisely.
",Daiz,
150,2013-05-29 00:33:56,"@chjj Do you want to do anything here?
",scottgonzalez,
149,2013-04-18 02:22:33,"I am not sure if this is part of GFM and not actually markdown, but on GitHub you can use `#` and `##` in order to create `h1` and `h2` tags. I would like to be able to do this, however, it seems that even when using the `gfm: true` option I am forced to use the underlining `=====`  or `------`. Is there no way for me to change this?
",CoryG89,2013-04-29 05:36:03
149,2013-04-29 05:36:03,"Not sure why I was having this problem before, I just tried to use this parser again and it worked just fine. Sorry about that.
",CoryG89,2013-04-29 05:36:03
148,2013-04-13 18:49:58,"Hi @chjj, would you mind it if marked was hosted by CDNJS (https://github.com/cdnjs/cdnjs#cdnjs-script-repository)? I think this would make it more accessible for different development playgrounds like Plunker or jsFiddle. I'm also working on a project licensed under the APGLv3 license (https://github.com/galah-group/galah) and we'd like to avoid licensing and attribution issues from packaging your library with the project when, in reality, we just want to pull it from a reliable source similar to jQuery.

Let me know if you have problems with this approach, and if there aren't, I could make the pull request to CDNJS for you if you want.
",paranoiacblack,2016-11-20 04:56:41
148,2013-05-29 00:38:49,"@paranoiacblack I don't think cdnJS cares who sends pull requests, so you can add marked just as easily as @chjj can.
",scottgonzalez,2016-11-20 04:56:41
148,2013-05-29 00:40:35,"@scottgonzalez, I just wanted @chjj's or someone else permission before doing so. I don't know @chjj enough to say whether or not he would care about something like this. Can I take your comment as permission?
",paranoiacblack,2016-11-20 04:56:41
148,2013-05-29 00:50:58,"Well, it's released under the terms of the MIT license, so anyone is allowed to redistribute however they want, as long as the license stays intact.
",scottgonzalez,2016-11-20 04:56:41
148,2013-05-29 03:05:55,"That's fair enough. Thanks for the answer. I'll start the process, link it to here and finally close this issue. Thanks again!
",paranoiacblack,2016-11-20 04:56:41
148,2013-05-29 03:28:36,"@paranoiacblack, scottgonzalez is right. You're more than welcome to do whatever you want with marked as long as the license is included.
",chjj,2016-11-20 04:56:41
148,2015-12-30 18:09:26,"This is done, isn't it?
",chrisvfritz,2016-11-20 04:56:41
148,2016-11-20 04:56:41,"Sorry, not sure how I missed that this was closed.
",paranoiacblack,2016-11-20 04:56:41
147,2013-04-05 03:12:29,"Well, this is being picky for sure, but I don't think the description is quite accurate, if it's a compiler then the Parser (or maybe a laxer only?) will be a part of it and not accompanying it, or am I missing something?
",omeid,2013-05-29 01:20:52
147,2013-05-29 00:41:00,"Marked parses markdown into token and then compiles it into HTML.
",scottgonzalez,2013-05-29 01:20:52
147,2013-05-29 01:19:45,"Marked handles things a bit unusually to be sure. The marked lexer is extremely smart, whereas most people keep lexers dumb, outputting only the most primitive tokens. The marked lexer also buffers tokens instead of returning an iterator that a parser can use. The parser is also different from the classic definition of a ""parser"". It doesn't parse the tokens and output a tree, instead it processes the very highlevel tokens and compiles directly to markdown. The inline ""lexer"" is also odd: it doesn't have separate lexing/parsing/compiling stages. 

Most of the weird design decisions you see in marked were made for the sake of speed. It's hard to accept a pull request from someone who deeply alters marked due to the fact that it's hard for people to understand a lot of the optimizations marked makes. I just see this as the penalty of writing something that needs to be fast in an extremely highlevel language. I am planning on commenting and documenting this stuff a bit more, lest I forget it myself.

Does it meet the textbook definition to call these things a parser and compiler? You're right, it probably doesn't, but what do most people think when they hear the word ""parser""? Do they whip out the dragon book and look it up? No, they simply think, ""oh, this processes markdown"". That's all anyone really needs to know.
",chjj,2013-05-29 01:20:52
146,2013-04-02 10:37:53,"Hello,

I tried today the marked 0.2.8 and it failed

this is the error

<S_CODE_TOKEN>
",terietor,
146,2013-05-29 00:44:30,"@terietor It looks like you might've called `marked()` with either no parameters or a non-string parameter. It's hard to tell since you didn't copy the first line of output, which has the actual error message.
",scottgonzalez,
145,2013-03-29 21:21:30,"I could use marked and cheerio to first convert the markdown to HTML, then use cheerio's text() method to get the textual content out of the HTML. However, why couldn't marked save me this step?

I suggest that marked add a simple feature to be able to get just the text out of a markdown file. Why is this useful? If I wanted to display an excerpt of the body of a blog post and have that except contain only text without formatting, I would need this method. Simple.

Thanks for reading! Please consider this small feature.
",samholmes,2014-02-23 12:28:55
145,2013-03-29 21:26:37,"<S_CODE_TOKEN>

Not so nice solution, but works
",kuba-kubula,2014-02-23 12:28:55
145,2013-03-29 21:37:30,"@kuba-kubula doesn't seem to work actually.
",samholmes,2014-02-23 12:28:55
145,2013-03-30 00:53:42,"@samholmes sorry, repaired the code.
",kuba-kubula,2014-02-23 12:28:55
145,2013-03-30 15:44:03,"@kuba-kubula is on the right track, but if you grab all the `text` tokens from the lexer, some of them will still have inline markdown in them. Another possibility is the renderer (#129) that's being proposed right now.
",chjj,2014-02-23 12:28:55
145,2014-02-23 12:28:53,"Solved with #129.
",chjj,2014-02-23 12:28:55
144,2013-03-28 23:02:33,"Hi gents,

I'm attempting to coerce marked (great lib! thanks for sharing!) into making all links in the markdown content open in external windows.

What would be best practice for this? Can I use the `lexer` to manipulate the tokens in some way that would accomplish this before they go into the parser?

Cheers,
",katowulf,2013-03-29 14:42:36
144,2013-03-29 01:54:34,"Have a look at my pull request: https://github.com/chjj/marked/pull/129

The renderer feature would be a good choice to do such thing. It didn't has a `link` renderer, I implemented block level renderer for now and will add the span level api when this feature merged.
",lepture,2013-03-29 14:42:36
144,2013-03-29 04:54:38,"Maybe you should use [jQuery](http://jquery.com/) and just `$(yourElement).find('a').attr('target','_blank')` after you put your HTML-encoded Markdown where necessary.
",Mithgol,2013-03-29 14:42:36
144,2013-03-29 11:08:01,"If you're open to modifying your version of marked, you can just redefine the template that it uses for autolinking (a GFM feature). Right now, the line is here: https://github.com/chjj/marked/blob/master/lib/marked.js#L578
",sudhirj,2013-03-29 14:42:36
144,2013-03-29 14:42:36,"@lepture thanks, very interesting

@Mithgol certainly the first thing that came to mind, if a bit inelegant

@sudhirj thanks; that's a great insight; and if not that, I could at least use that knowledge together with the lexer/parser access to do something spiffy.
",katowulf,2013-03-29 14:42:36
144,2014-07-17 02:41:20,"I implemented it as below.
The concept is make object for rendering the link by `Renderer.prototype.link` function.

<S_CODE_TOKEN>
",icoxfog417,2013-03-29 14:42:36
144,2015-04-17 05:05:33,"Thanks for the code block @icoxfog417 — I looked it over a little more and also saw an example from the docs for [overriding renderer methods](https://github.com/chjj/marked#overriding-renderer-methods), and the code can more simply be written as such:

<S_CODE_TOKEN>
",mrcoles,2013-03-29 14:42:36
143,2013-03-20 09:09:13,"If we want to use [google-code-prettify](http://google-code-prettify.googlecode.com/svn/trunk/README.html) easily, we need to custom code block pre classname.

Set `options.codeClass=""prettyprint""` and get `<pre class=""prettyprint"">` html result is pretty good.

@chjj
",fengmk2,
143,2013-03-22 18:38:53,"With #129 renderer feature, this can be easily implemented. 
",lepture,
142,2013-03-17 16:04:44,"I'm using marked for blog posts, and some blog posts include a little bit of raw HTML markup in them, particularly some have some custom JavaScript at the bottom.

Unfortunately marked, and this wasn't the case with a couple other tools I've used in the past, will escape every quote in the javascript-within-markdown that's found and cause a runtime error on the page.

I realize that what I'm asking for is a bit bizarre, but I figured I'd ask what people's thoughts are.

So to illustrate, given this markdown source:

![Screen Shot 2013-03-17 at 12 02 35 PM](https://f.cloud.github.com/assets/79303/268272/3ae672f0-8f1c-11e2-9abc-b5d460416dda.png)

marked will escape it as this:

![Screen Shot 2013-03-17 at 12 02 56 PM](https://f.cloud.github.com/assets/79303/268274/4891ea60-8f1c-11e2-852e-56c16f901659.png)

and chrome will blow up with this:

![Screen Shot 2013-03-17 at 12 03 13 PM](https://f.cloud.github.com/assets/79303/268275/5737aa00-8f1c-11e2-9f7c-4fa338f266d1.png)
",searls,2013-03-18 12:17:13
141,2013-03-17 05:39:38,"Is there a way to preserve tab characters in fenced code blocks or to instruct the lexer to interpret it as a set number of characters?  Two use cases:

1) python code (which assumes each tab is 8 spaces)

2) Makefiles (where the tab character is needed
",Niggler,2013-03-30 19:37:05
141,2013-03-30 15:53:05,"This could be an option eventually. Right now, you could go through and parse every `code` token like this: `token.text = token.text.replace(/ {4}/g, '\t');`. A little bit better would be:

<S_CODE_TOKEN>
",chjj,2013-03-30 19:37:05
141,2013-03-30 16:37:59,"@Niggler Makefile is fair. But you shouldn't use tab in python, it is not pep8 compatible. I hate tabs in Python.
",lepture,2013-03-30 19:37:05
141,2013-03-30 18:00:22,"I don't disagree with the sentiment regarding using spaces in python, and
the fact that spaces are treated as 8 characters rankles me, but I cannot
force others using tabs to change. (oh how I wish I could)

@chjj I ended up doing that replacement

On Saturday, March 30, 2013, Hsiaoming Yang wrote:

> @Niggler https://github.com/Niggler Makefile is fair. But you should
> use tab in python, it is not pep8 compatible. I hate tabs in Python.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/issues/141#issuecomment-15677404
> .
",Niggler,2013-03-30 19:37:05
141,2013-03-30 18:08:03,"Also @chjj based on my cursory reading of the spec, the tab character isn't supposed to be replaced by spaces. Is it tradition or can you point me to a spec which does mandate it?
",Niggler,2013-03-30 19:37:05
141,2013-03-30 18:27:00,"> Is it tradition or can you point me to a spec which does mandate it?

<S_CODE_TOKEN>

As you can see, tabs are replaced with 4 spaces as per Markdown.pl.

A better look since github also replaces tabs with spaces:

<S_CODE_TOKEN>
",chjj,2013-03-30 19:37:05
141,2013-03-30 19:37:05,"@chjj so it is tradition :)  I kinda wish the markdown spec would mandate it (unless you consider markdown.pl to be the normative implementation)
",Niggler,2013-03-30 19:37:05
141,2013-03-30 19:49:14,"> I kinda wish the markdown spec would mandate it

If you're talking about the markdown guide/docs, it doesn't specify the majority of markdown behavior beyond the basic explanation of features. There's so much weird behavior in markdown that isn't expressed anywhere but the official test suite and Markdown.pl. I've almost never looked at the markdown docs to determine how to implement something. The test suite and original implementation are always more thorough.
",chjj,2013-03-30 19:37:05
140,2013-03-17 04:10:47,,Niggler,2013-05-29 01:44:00
140,2013-05-29 00:46:31,"I assume this is a request for 0.2.9.
",scottgonzalez,2013-05-29 01:44:00
140,2013-05-29 01:17:09,"@scottgonzalez wanted the version from https://github.com/chjj/marked/pull/139 to be pushed
",Niggler,2013-05-29 01:44:00
140,2013-05-29 01:37:50,"Yeah, so you're just waiting for 0.2.9. I asked @chjj about that this morning and he said he'll do a release very soon.
",scottgonzalez,2013-05-29 01:44:00
140,2013-05-29 01:44:00,"Published.
",chjj,2013-05-29 01:44:00
139,2013-03-17 03:25:18,"<S_CODE_TOKEN>

GFM supports arbitrary characters in fenced code block language identifier.  Changed a \w to a \S when checking for fenced code blocks

If you want a test case, use the aforementioned snowman block
",Niggler,2013-03-17 03:32:38
139,2013-03-17 03:32:22,"Weird. I literally committed this myself 30 seconds ago, but I'll merge this.
",chjj,2013-03-17 03:32:38
139,2013-03-17 03:51:03,"high-five!

I submitted a similar PR to the vim plugin https://github.com/jtratner/vim-flavored-markdown/pull/4
",Niggler,2013-03-17 03:32:38
139,2013-03-17 03:53:44,"@chjj can you push this to npm as well?  
",Niggler,2013-03-17 03:32:38
138,2013-03-15 01:31:21,"from https://help.github.com/articles/github-flavored-markdown :

> We take code blocks a step further and add syntax highlighting if you request it. In your fenced block, _add an optional language identifier_ and we'll run it through syntax highlighting. For example, to syntax highlight Ruby code:

It's not explicitly specified in that article, but `marked` doesn't seem to like language identifiers with dashes in the name, like

<S_CODE_TOKEN>
<S_CODE_TOKEN>```

Is there a reason this isn't supported?  Most likely I missed the part of the doc where it says dashes can't be in the language identifier, but I haven't found a definitive source.
",Niggler,2013-03-17 03:35:07
137,2013-03-14 11:03:02,"I've absolutely been loving Marked lately. Its API is a pleasure to work with, and the ability to ""lex"" Markdown streams is incredibly handy.

But I am missing a thing or two from other Markdown parsers -- It would be great if Marked could be extended to convert `--` into an em-dash, and turn straight quotes surrounding words into correct curly quotes. So that you could write like this:

<S_CODE_TOKEN>

... and have it come out typographically correct.
",jashkenas,
137,2013-03-17 03:46:13,"Glad you're enjoying marked.

This will probably end up as another option. [Smartypants](http://daringfireball.net/projects/smartypants/) is what did this for the original markdown, so you'll pass in the option `smartypants: true`. Although this should be a small addition to the inline processing, I worry about the performance hit.

Or maybe we could have an option for all proposed extensions to the original markdown (this would include footnotes and other things Gruber himself considered).
",chjj,
137,2013-03-17 04:12:50,"Sounds good. I don't particularly mind what the option is called, or if it's enabled or disabled by default. Having the option be available would just be the cherry on top that would make -- I realize I didn't mention what I'm using it for -- stuff like this look just _perfect_: http://jashkenas.github.com/docco/ 
",jashkenas,
137,2013-04-21 05:19:46,"I believe in original implementation `--` converts to en-dash and `---` to em-dash.
",steverandy,
137,2013-05-03 23:50:29,"+1 on this.

I think that even though it makes sense that `--` logically would be an en-dash and `---` an em-dash, when people write they use em-dashes and `--` interchangeably, so `--` should be the replacement. I have yet to ever see anyone do `---` while writing. 
",ianstormtaylor,
137,2013-05-04 11:35:18,"Some fans of TeX actually use `---` for em-dashes, but they're a minority.
",Mithgol,
136,2013-03-12 10:40:04,"As I understand, gfm_break and gfm_code_hr_list are both known to fail for reasons specified in the links:
https://github.com/chjj/marked/issues/49
https://github.com/chjj/marked/pull/118 

I also have two further test failures: def_blocks and double_link, but I'm not sure if these are known to fail. Please do let me know if these aren't actually meant to fail.

<S_CODE_TOKEN>

Thanks!
",jamielinux,2013-03-17 03:37:48
136,2013-03-17 03:37:12,"Four tests should be failing. They're really only there to describe obscure parts of markdown that marked should conform to, but doesn't yet. Either that, or they test a certain option of marked that isn't enabled. This will be cleaned up soon.

The tests are:

<S_CODE_TOKEN>
",chjj,2013-03-17 03:37:48
135,2013-03-11 18:42:55,"Those greatly extend markdown functionality via single markup element.
For more details, see this extension: [Attribute Lists](http://pythonhosted.org/Markdown/extensions/attr_list.html)
",velsa,
135,2013-04-16 10:49:58,"That's not really part of markdown though, and it doesn't really conform to how markdown looks or feels? :/ I've personally never seen it before.

Where are you using it?
",NoelDavies,
134,2013-03-10 18:40:16,"See:
https://github.com/dcodeIO/GNUify.js

Versus:
https://npmjs.org/package/gnuify

The anchor links make it much easier to navigate. Would love to see it in marked, too.

I've added it and updated all affected tests.

Cheers
",dcodeIO,2013-03-22 22:29:51
134,2013-03-22 22:29:51,"Actually just one in many :)
",dcodeIO,2013-03-22 22:29:51
133,2013-03-07 16:41:02,"I love the sanitize feature and most markdown libraries don't include it or do it very badly. However, there is one feature that Marked does not have that my previous library did, the ability to white-list specific tags or a default set of tags (see [node-markdown](https://github.com/andris9/node-markdown)). Is it possible to have this added to Marked?

This library is the best javascript markdown library I've seen. The main attraction for me is the ability to use it on the server and on the client so I can generate Markdown previews for the user without making ajax calls or having differences between the client library and the server library. If I can just enable specific tags when sanitize is true that would complete the library for me.
",chevex,
133,2013-03-30 16:28:55,"This should actually be fairly simple. I'll mess around with something.
",chjj,
133,2013-04-20 06:55:58,"+1
",matthewmueller,
133,2013-07-20 15:02:21,"+1.  This would be fantastic.
",martindale,
133,2013-07-24 15:52:14,"+1 push
",passsy,
133,2013-09-20 04:55:38,"+1 
",jonathanong,
133,2013-10-03 13:50:33,"+1
",AdrianoFerrari,
133,2013-10-03 14:30:16,"Seeing as how this isn't in there quite yet I'll try and take a stab at doing it myself sometime this week for you guys. I don't know the code yet so be patient. Hopefully I can figure out how to white-list specific tags and make this the most complete JS markdown library out there :D. I'll link to the fork here when I'm finished.
",chevex,
133,2013-11-25 20:05:17,"yes please, :+1: for whitelist of tags i want to enable markdown for and others (e.g. images using `![text](link)` I don't want to support)
",Soleone,
133,2014-07-21 11:30:52,"Why exactly was this issue closed? Seems still to be relevant to me!
",adius,
133,2014-07-21 12:08:46,"Wondered that myself. _sad face_
",chevex,
133,2014-07-21 12:10:05,"Well it's not closed, but it was supposedly simple to implement.
",chevex,
133,2014-07-21 12:12:09,"Oh right, the referenced issue is closed. Got it =P.
Well, then I'll just give a +1 cause I'd still like to see this feature implemented! =)
",adius,
133,2014-08-31 04:22:39,"Another +1 on this.
",gkoberger,
133,2015-02-11 13:07:33,"+1
",markstos,
132,2013-03-06 06:03:24,"When ``gft:true`, @mentions should be parsed and replaced with anchor tags to profile. 
@example

I had some issues integrating with the lexer, can anyone provide direction? I assume I need to add a mention attribute to the inline lexer for GFM, but I am not sure how to properly use the replace function to perform the action expected.

Currently, I am using the following snippet to detect @mentions and provide links:
`""foo"".replace(/ @([a-zA-Z0-9]+) /g, "" <a href='http://github.com/$1'>@$1</a>"")`
",corydolphin,2013-03-30 16:27:22
132,2013-03-30 16:27:22,"There's a 95% chance marked will never include anything github-specific. I like a lot of GFM features, but the ones that cater specifically to github won't be included. @wcdolphin, you should iterate over the tokens and run that regex on any `token.type === 'text'` token's `token.text`, and then pass the tokens to the parser.
",chjj,2013-03-30 16:27:22
131,2013-03-05 15:31:07,"fixes #89

I'd really like to fix some of the tests that will be broken now. However, I fail to see an easy way to turn on/off several options, like gfm. It would be best add some tests without gfm and patch up the 5 that will break as result of this change.
",Swaagie,2013-08-02 17:08:23
131,2013-03-06 10:23:32,"@Swaagie This could be easily customized with renderer feature, which I provided at #129 .
",lepture,2013-08-02 17:08:23
131,2013-03-07 14:38:51,"I agree that would be a nice addition, currently just went with the default rendering of github. You can do a lot with some CSS and an empty anchor. But I guess some people would rather have id's on headings or perhaps an alternative inline element. I'll try to bug @chjj on IRC to review this stuff.
",Swaagie,2013-08-02 17:08:23
131,2013-07-02 05:02:26,"looking forward to see that PR merged
",micky2be,2013-08-02 17:08:23
131,2013-08-02 17:08:23,"Closed in favor of #181.
",chjj,2013-08-02 17:08:23
130,2013-03-01 09:28:06,"1. fix benchmark for showdown // showdown has changed its api
2. remove discount benchmark // not working on v0.8.x
3. add robotskirt benchmark
4. add target of bench in Makefile
5. add devDependencies in package.json
",lepture,2013-03-30 16:24:15
130,2013-03-01 10:08:01,"You may use a [GFM task list](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) to put a number of completed and remaining tasks under this pull request in references, like the following:

![GFM task list example](https://f.cloud.github.com/assets/1088720/209050/8f3a57c6-8257-11e2-921e-d456ddfa83d8.png)
",Mithgol,2013-03-30 16:24:15
130,2013-03-01 11:48:14,"@Mithgol this is not a todo list.
",lepture,2013-03-30 16:24:15
129,2013-03-01 06:21:58,"You can customize the result with a customized renderer.

<S_CODE_TOKEN>

The renderer API:

<S_CODE_TOKEN>

I am doing my best to make the renderer API comptable with sundown's renderer.

This is the feature I really need. If marked has, I can drop the c binding sundown of robotskirt.
",lepture,2013-12-03 10:17:12
129,2013-03-01 06:23:43,"There are 4 failed test cases, and the master branch failed too.
",lepture,2013-12-03 10:17:12
129,2013-03-01 08:40:30,"some references of sundown bindings:
- http://misaka.61924.nl/manual/#toc_14
- https://github.com/vmg/redcarpet#and-you-can-even-cook-your-own
- https://github.com/benmills/robotskirt#custom-renderers
",lepture,2013-12-03 10:17:12
129,2013-03-05 13:23:54,"ping ...
",lepture,2013-12-03 10:17:12
129,2013-03-11 14:42:08,"@lepture interesting your work :-)
I did testing based on your code. But it's not working

**on node v0.8.16 & browser too**

<S_CODE_TOKEN>

And README.md example on `renderer` branch in your github repo too

<S_CODE_TOKEN>
",rhiokim,2013-12-03 10:17:12
129,2013-03-12 04:01:16,"@rhiokim the example is not clearly. I've updated readme and this issue. try this:

<S_CODE_TOKEN>
",lepture,2013-12-03 10:17:12
129,2013-03-12 09:44:17,"@lepture thanks :)
",rhiokim,2013-12-03 10:17:12
129,2013-03-18 11:27:23,"ping ....
",lepture,2013-12-03 10:17:12
129,2013-03-20 15:43:54,"do want.
",3rd-Eden,2013-12-03 10:17:12
129,2013-03-22 18:40:32,"@chjj Has any idea?
",lepture,2013-12-03 10:17:12
129,2013-03-22 18:55:00,"@lepture, have you benchmarked this? I've considered this before, but the overhead of so many function calls scares me. It doesn't seem like it would be a lot, but when you're calling those functions several thousands of times, it can add a lot of overhead. It all depends on whether v8 does some kind of function inlining optimization there. If the benchmarks check out, I'll merge it.
",chjj,2013-12-03 10:17:12
129,2013-03-23 02:19:19,"@chjj Yes, I did the benchmark, it is slower, but not much. The convenience worth it.

Before this pull request:

<S_CODE_TOKEN>

With this pull request:

<S_CODE_TOKEN>

On my Macbook Pro. Node v0.10.0
",lepture,2013-12-03 10:17:12
129,2013-03-25 15:13:04,":+1: +1 here, would be great for marked to have plugins, because this looks like plugging into marked
",kuba-kubula,2013-12-03 10:17:12
129,2013-03-26 02:41:52,"@chjj ping ...
",lepture,2013-12-03 10:17:12
129,2013-03-26 19:15:03,"+1 (github-like anchors being motivation)
",xixixao,2013-12-03 10:17:12
129,2013-03-27 02:09:28,"@lepture fenced code block is wrong?
please check my code & result.

<S_CODE_TOKEN> javascript
var marked = require('./index');

var renderer = new marked.Renderer();

renderer.blockcode = function(lang, code) { <------- do not called
  console.log('code language: %s', lang);  
}

var parse = function(src, options) {
  options = options || {};
  return marked.parser(marked.lexer(src, options), options, renderer);
};

console.log(parse('<S_CODE_TOKEN>'));
<S_CODE_TOKEN>

**result**

<S_CODE_TOKEN>
",rhiokim,2013-12-03 10:17:12
129,2013-03-27 02:35:20,"@rhiokim I see. marked treats the block code as a paragraph, because gfm is not enabled. You should pass the `options`:

<S_CODE_TOKEN>

You can use marked defaults options:

<S_CODE_TOKEN>

BTW, it is:

<S_CODE_TOKEN>
",lepture,2013-12-03 10:17:12
129,2013-03-27 02:48:13,"@rhiokim Maybe we need a built-in API to make things easier. But this should be done when @chjj merged this feature.
",lepture,2013-12-03 10:17:12
129,2013-03-27 05:11:27,"Thanks so much! @lepture 
I watching this feature, It's very important thing for evolution markdown
And I hope merging this :-)
",rhiokim,2013-12-03 10:17:12
129,2013-03-30 15:59:50,"There's one thing making me hesitant about this: a major use-case for this would be to allow compiling to say, Latex, or any number of document formats (see also #145). As it stands right now, without an inline renderer, this would be impossible. I wonder how much overhead the inline renderer would add.
",chjj,2013-12-03 10:17:12
129,2013-03-30 16:16:32,"@chjj I will add span level API when you accept this feature. I am using the block level renderer right now in my project, it is useful (like `sundown` does).

We can publish an alpha version in `npm`:

<S_CODE_TOKEN>

And do some experiment in this alpha channel. If you accept this feature, I will add the span level API. We still have time to debug it.
",lepture,2013-12-03 10:17:12
129,2013-03-30 16:33:55,"@lepture, it's not a matter of writing it. Again, it's a matter of performance. I'll mess around with it and see if I can get decent benchmark times.
",chjj,2013-12-03 10:17:12
129,2013-03-30 16:36:38,"@chjj It will certainly be slower than the current one. You need to weigh the performance and the convenience and find out the balance.

Wait for the news.
",lepture,2013-12-03 10:17:12
129,2013-03-30 16:58:33,"> @chjj It will certainly be slower than the current one.

Yes. It's a question of how much slower. That's what I want to check.
",chjj,2013-12-03 10:17:12
129,2013-04-14 11:15:02,"ping @chjj 

Any idea now?
",lepture,2013-12-03 10:17:12
129,2013-05-23 01:24:12,"ping @chjj 
",lepture,2013-12-03 10:17:12
129,2013-05-28 13:38:32,":+1: +1 sounds great ! any news ?
",bcharbonnier,2013-12-03 10:17:12
129,2013-05-29 14:24:27,"any  conclusion?       
",zhiyelee,2013-12-03 10:17:12
129,2013-06-01 01:27:03,"ping .....
",lepture,2013-12-03 10:17:12
129,2013-06-01 23:55:40,"Sorry for putting this on hold for so long. I'll merge and revise this tonight I think.
",chjj,2013-12-03 10:17:12
129,2013-06-02 00:07:33,"@chjj that's a good news.
",lepture,2013-12-03 10:17:12
129,2013-06-11 21:50:55,"+1
I'm really looking forward to this, so we can be independent on adding features like ""add an anchor before each H2"" :+1: 
",claudioc,2013-12-03 10:17:12
129,2013-07-06 11:44:30,"@chjj 

> Sorry for putting this on hold for so long. I'll merge and revise this tonight I think.

Will this be merged ?

ping ....
",lepture,2013-12-03 10:17:12
129,2013-07-24 02:19:26,"After implementing marked into one of my projects, the need for this has come up multiple times (inline stuff, rel=nofollow and target+_blank etc). @chjj :+1: for merging, I hope marked moves forward.
",jorilallo,2013-12-03 10:17:12
129,2013-07-27 03:39:09,"ping ....
",lepture,2013-12-03 10:17:12
129,2013-08-16 21:45:54,"Can only switch back to the main branch of marked if this stuff is available for Nodejitsu handbook content generation so anchors can be placed in from of headings etc
",Swaagie,2013-12-03 10:17:12
129,2013-08-24 02:40:38,"This would be awesome. I'd love to see this merged in. I completely understand the desire to keep marked fast, but the benefits of this far outweigh any slight decrease in performance. We use marked as the default markdown engine in [assemble](http://assemble.io) and I've been using hacky workarounds for things that this would resolve. 
",jonschlinkert,2013-12-03 10:17:12
129,2013-11-25 08:05:48,"ping...

Will this be merged? Otherwise, I'd like to create a forked project, and maintain this forked project.
",lepture,2013-12-03 10:17:12
129,2013-11-26 14:54:42,"@chjj would you be kind enough to consider merging this? Or suggest some other way to customize the output. I was surprised to find that marked doesn't have that support and ultimately ended up on this thread.

@lepture span level support would make this feature-complete. Looking forward to it. This is awesome, thanks.
",aleemb,2013-12-03 10:17:12
129,2013-11-26 19:37:13,"I would really like to see this being merged. If it won't be included, it would be great to have an actively updated fork which would be more feature rich - I see more use for feature rich than super fast Markdown converter.
",jorilallo,2013-12-03 10:17:12
129,2013-11-26 20:14:02,">  I see more use for feature rich than super fast Markdown converter.

Completely agree. I think the speed objective is outdated considering that 95% of users are only building a couple of pages, and the people who are converting more than a few pages need more features, 2) marked is usually only a small piece of a larger picture, where features are more important, 3) I've never seen a request to make marked faster (I'm not saying there hasn't been), 4) users keep saying they want these features. 
",jonschlinkert,2013-12-03 10:17:12
129,2013-11-27 12:59:20,"@lepture think you could implement the span-level features to make this feature-complete?
",aleemb,2013-12-03 10:17:12
129,2013-11-27 15:04:54,"I sent this patch months ago. At that time, `this.options.headerPrefix` was not added. The renderer feature can do the same thing.

@aleemb I need to make sure that this renderer feature is accepted before adding more features.
",lepture,2013-12-03 10:17:12
129,2013-12-03 05:47:29,"I've created a forked project: https://github.com/lepture/markit
",lepture,2013-12-03 10:17:12
129,2013-12-03 10:17:12,"Close now.

@chjj when you are ready to accept this feature, please tell me. I would send another pull request.

For now. I am going to maintain  https://github.com/lepture/markit
",lepture,2013-12-03 10:17:12
129,2013-12-04 04:52:42,"It's not that slow. Here is the benchmark: https://github.com/lepture/markit#benchmark

Here are the results:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",lepture,2013-12-03 10:17:12
129,2013-12-04 05:01:09,"I'm very sorry. Will accept. I've been absorbed in other things lately. Merging and refactoring now.
",chjj,2013-12-03 10:17:12
129,2013-12-04 05:18:28,"Merged with 7eed150966c46a8890f752d94cd5eba0965c3eec

All tests passing.
",chjj,2013-12-03 10:17:12
129,2013-12-04 05:24:34,"I suppose there was an overwhelming demand for this. 59 stars on lepture/markit in one day. Glad it's sorted.
",aleemb,2013-12-03 10:17:12
129,2013-12-04 05:42:14,"Yeah, well. This is me breaking out of my shell. I believe the thing that made marked successful in the first place was the attention put on speed. marked does so many weird optimizations that I'm worried only I understand (not because I'm smart, but because I wrote them and I do stupidly-designed optimizations that no sane programmer would do).

This is the largest pull request I've ever accepted for marked. So while it's partially true that I've been busy with work and couldn't accept this PR, it's also partially true that I've trained myself to be hesitant about large PRs: I'm worried people may make changes without realizing they're overlooking some esoteric optimization. I wrote marked while running benchmarks after every single change to a line. If I lose a few milliseconds, it's a tragedy to me.  I've come to terms with the fact that a renderer is a good idea (much thanks to @lepture for his contribution). Hopefully we can do the same thing with the lexer(s) without too much overhead.

I've also just added @ChrisWren as a core committer for documentation. It's been an eventful night for marked.
",chjj,2013-12-03 10:17:12
129,2013-12-04 05:52:55,"Actually, I don't think headerPrefix is a good idea.
",lepture,2013-12-03 10:17:12
129,2013-12-04 05:55:21,"@chjj I've already added renderer in InlineLexer. https://github.com/lepture/markit

I think you shouldn't merge this patch. Maybe I can send you another clean one.
",lepture,2013-12-03 10:17:12
129,2013-12-04 05:56:31,"> I don't think headerPrefix is a good idea.

Agreed. It's not necessary with this
",jonschlinkert,2013-12-03 10:17:12
129,2013-12-04 05:59:12,"@lepture, I imagine you would prefer that functionality to be handled by the renderer? We can remove it. Being that it was never officially released in an npm verson, we arguably don't have to maintain backward compat. Although, I do worry about a lot of people who simply grab the latest HEAD for their clientside app.

Anyway, maybe we could open a new issue for this.
",chjj,2013-12-03 10:17:12
129,2013-12-04 06:00:21,"Also, if nothing else, we should definitely pass the raw text to the renderer function, since the text handled by the inline lexer is a bit harder to sanitize.
",chjj,2013-12-03 10:17:12
129,2013-12-04 06:01:18,"@lepture, open another pull request for this and the inline renderer. I'll take a look.
",chjj,2013-12-03 10:17:12
129,2013-12-04 06:02:11,"@chjj I will start it at https://github.com/chjj/marked/commit/77352ec9fc65ae0250c8eb52eaca3236e55f7d3b
",lepture,2013-12-03 10:17:12
129,2013-12-04 06:24:57,"@chjj could you please create a new branch at https://github.com/chjj/marked/commit/77352ec9fc65ae0250c8eb52eaca3236e55f7d3b

I will send it to this branch. The master branch is a little mess.
",lepture,2013-12-03 10:17:12
129,2013-12-04 06:26:20,"The compare diff: https://github.com/lepture/marked/compare/chjj:77352ec9fc65ae0250c8eb52eaca3236e55f7d3b...feature-renderer?expand=1
",lepture,2013-12-03 10:17:12
129,2013-12-04 06:29:57,"> marked does so many weird optimizations that I'm worried only I understand

I think you did it very well. The code is very pretty, and easy to understand. I have looked into `markdown.js`, which is a disaster, I can't figure out where to begin.
",lepture,2013-12-03 10:17:12
129,2013-12-04 10:21:25,"> I think you did it very well. The code is very pretty, and easy to understand. I have looked into markdown.js, which is a disaster, I can't figure out where to begin.

Thanks. That's good to hear.

I have a branch up at `for_lepture` if that helps.
",chjj,2013-12-03 10:17:12
128,2013-02-28 11:58:55,"I get an error when I load the markup from a file and compile it with Marked.

Here is the `app.js` file:

<S_CODE_TOKEN>

And the `file.md` file:

<S_CODE_TOKEN>

I get the following error:

<S_CODE_TOKEN>
",htaidirt,2013-02-28 12:40:22
128,2013-02-28 12:24:11,"According to the [manual](http://nodejs.org/docs/latest/api/fs.html#fs_fs_readfile_filename_encoding_callback), `fs.readFile` gets a raw buffer (and gives it to the callback) if no encoding is specified, and [such a buffer](http://nodejs.org/docs/latest/api/buffer.html) does not have any `replace` method. That explains the above error.

You should have requested a string from `readFile()` and then passed that to your `marked()`.

Try the following:

<S_CODE_TOKEN>

You may use [other encodings](http://nodejs.org/docs/latest/api/buffer.html#buffer_buffer) instead of `'utf8'` if they are more appropriate for your file's contents.
",Mithgol,2013-02-28 12:40:22
128,2013-02-28 12:40:22,"You're right Mithgol. Specifying the encoding resolved the issue. Thanks a lot.
",htaidirt,2013-02-28 12:40:22
128,2013-06-29 16:15:26,"Perhaps marked could give a better message?  it could check for a replace method and if not there supply a more informative error message saying it needs a string and not a raw buffer.  
",bryanmacfarlane,2013-02-28 12:40:22
127,2013-02-25 15:41:41,"@chjj: I'm not sure if you're interested in merging this feature, but I figured I would issue a pull request just in case.

Our use-case: Our app has large blocks of technical content in the form of ordered lists and there is occasionally block-level content in the list items (tables, multiple paragraphs, etc). The block-level content breaks up the list, so when a list is resumed, the actual numbering from the input should be used instead of starting over at ""1"".

I realize that the more semantically correct thing in this case would be to output a single list with the block-level content nested in it -- and this is possible with some markdown implementations (RedCarpet) but it places additional burden on the user to indent the block-level content beyond the indent of the list item it belongs in. Instead of going that route, this simple workaround gives the user more control and meets the user's expectations (I'm sure the end-users of our app would be surprised by markdown's default behavior -- as I was -- of ignoring the numbering from the input).

I added tests for the option, which pass when it the option is enabled (but a couple of pre-existing OL tests fail when the option is enabled because they aren't expecting the `value` attribute in the output `<li>`s). When the option is disabled (the default), the only pre-existing tests that fail are the 4 that normally fail (10-14). I added a `preserveNumbering` condition to tests\index.js so the new tests are skipped if the option is disabled. When disabled, the new option has a negligible effect on benchmark performance. When enabled, it adds, on average, about 50-70 milliseconds to the test time on my machine (~2%).
",prust,
127,2013-03-01 06:30:05,"@prust have a look at my pull request #129 

The renderer feature will make it easy to do any customisation.
",lepture,
127,2015-05-11 19:23:55,"Thanks, this is perfect. This should be in marked.

@lepture I love the renderer, but couldn't figure out how to make this work without forking. Any thoughts?
",gkoberger,
126,2013-02-25 03:04:53,"This code adds custom attributes to links for things like making all links open in a new window 

<S_CODE_TOKEN>

Links is the only place I need to do this at the moment (leaving the default link behaviour can cause all sorts of problems in a phonegap app) but it is designed to be easily extended if necessary.

I'd prefer not to need the space at the start of the custom string, but removing that requires either adding a lot more code or always adding a space and changing the expected result of 20 or so of the tests.
",tqc,2013-03-30 16:21:16
126,2013-03-01 06:26:16,"@tqc I am doing it another way. See my pull request #129 

After this is merged, we can make the renderer more powerful, and add the inline level renderer.
",lepture,2013-03-30 16:21:16
126,2013-03-02 05:53:37,"@lepture I initially considered using custom render functions, but decided against it for two reasons:
- Performance/complexity cost of replacing existing code with configurable function calls
- Defining the functions is more than the single line config setting I was looking for, especially when working with multiple types of link.
",tqc,2013-03-30 16:21:16
126,2013-03-02 10:39:49,"@tqc 
- The performance is not a really problem. Yes, it is slower, I did the benchmark, it is about 20ms slower, but who cares! It is still far more fast than any other pure javascript parsers. If I need performance, I will use robotskirt.
- Convenience vs customizable. I am still using robotskirt, not coz its performance, but the custom renderer feature. You can do what ever you want with custom renderer. It's really powerful.

I am dropping robotskirt, and switch to marked, coz it's hard for windows users to install robotskirt, and I need to distribute my software to windows users.
",lepture,2013-03-30 16:21:16
126,2013-03-30 16:21:16,"> Performance/complexity cost of replacing existing code with configurable function calls

If we add this, next we're going to be making them callbacks so the attributes can be dynamic, which I'm sure someone will request. So we'll have function calls either way. I'm going to put this on hold. A renderer might be better.
",chjj,2013-03-30 16:21:16
125,2013-02-25 02:29:56,"Hi there I just added Emoji support in my app (osomtalk.com) over your library and I tought it would be nice to share the changes with you given that this could get marked closer to the current GFM.

I had to add a sub-module pointing to [gemoji](https://github.com/github/gemoji) soo it has the correct images but it could as well be without them(those are the ones used in github).

I had to add a very long string around 9kb, with the valid emojis (at least matched against the current gemoji set).

<S_CODE_TOKEN>

I didn't implemented yet the use of unicode emojis `:u55b6:` for example because I would need yet another long string for validation.

Please let me know if you like it, or not.

Cheers!!
",levhita,2013-03-30 16:16:58
125,2013-03-01 06:31:06,"I don't think it is the markdown's job.
",lepture,2013-03-30 16:16:58
125,2013-03-29 05:11:43,"i would like use this feature as a plugin.so maybe marked should have a api to add plugins.include laxer and parser.(add something beyond markdown syntax).
",tans,2013-03-30 16:16:58
125,2013-03-29 16:23:33,"For me it was an architectural decision, YES I could handle emojis outside, but Marked is already very good to handle parsing, a quick hack and boom, I keep this clean flow for the parsing of my marked.

Also I found that coding this directly in marked it allowed me to keep emojis only in paragrpahs, not in code samples and quotes. where it isn't wanted.

PD: the code is made configurable, it's off by default.
",levhita,2013-03-30 16:16:58
125,2013-03-30 16:16:58,"Sorry, but this is just not marked's general philosophy. I'm glad you like marked, but I would be more willing to implement a more general plugin system, like what has been proposed before, than implementing this. This just seems too tightly coupled. The contribution is still appreciated.
",chjj,2013-03-30 16:16:58
125,2013-03-30 20:45:15,"That would be great as soon you have something in that direction please leave me a line here to integrate it.
",levhita,2013-03-30 16:16:58
124,2013-02-24 17:32:25,"Not sure what the actual behavior should be, but the current behavior is not what i expected.

This is what i had expected

<S_CODE_TOKEN>

this is the current behavior.

<S_CODE_TOKEN>
",bjornblomqvist,2013-02-25 01:36:58
124,2013-02-24 22:43:15,"I have added a test and also a fix for it.

test: 638d7dfa789139952b27f793c519558dd8f143b5
fix: 0c540383011d71b0340f1b641a424bc8cb9bea29

Unfortunately it seriously degraded the performance.
",bjornblomqvist,2013-02-25 01:36:58
124,2013-02-25 01:36:56,"Marked, along with most markdown implementations, doesn't care that much about non-significant whitespace. The original markdown always appends a newline after the output html, and it only outputs as many as two newlines no matter how many are in between the input paragraphs. I don't see any reason to preserve whitespace here. 

Thanks for the interest, but I'm closing this issue.
",chjj,2013-02-25 01:36:58
123,2013-02-22 11:18:08,"On Github, a blank line isn't required between paragraph text and a following list. For example:

<S_CODE_TOKEN>

I present this list:
- thing one
- thing two

But Marked gives:

<S_CODE_TOKEN>

I know Marked's behaviour is MD-standard,  but... GFM.

(Motivation: A user of [Markdown Here](https://github.com/adam-p/markdown-here) came across this organically, was confused, and asked me why it was happening.)
",adam-p,2013-02-23 19:38:09
123,2013-02-23 19:26:36,"https://github.com/chjj/marked/issues/120
",gagle,2013-02-23 19:38:09
123,2013-02-23 19:38:09,"Doh! Thanks.
",adam-p,2013-02-23 19:38:09
122,2013-02-21 03:41:00,"With GFM line breaks turned on, newlines are lost from inline code. On Github they are retained, and Marked retains newlines in other inline elements (emphasis and strong, say).

Example:

<S_CODE_TOKEN>

_em
em_

**strong
strong**

`code
code`

Marked will render the last bit as a single line.

This change will cause it to render as a single line, although I can't pretend to know what the implications are:

<S_CODE_TOKEN>

(I'm passing this on from a bug on my project: adam-p/markdown-here#52)
",adam-p,2014-11-27 17:16:40
122,2014-11-27 17:16:40,"At the time I created this issue Marked's GFM line-break behaviour was different from Github's, but since then GH has changed the way they render and Marked now matches their behaviour.

Closing this issue as no longer relevant.
",adam-p,2014-11-27 17:16:40
121,2013-02-19 15:45:26,"This code works fine:

<S_CODE_TOKEN>

This code does also work fine:

<S_CODE_TOKEN>

This code has an issue:

<S_CODE_TOKEN>

(the last line is considered second level despite its single angular quote).

Note: GFM has the same issue.
",Mithgol,
121,2013-02-25 01:45:59,"<S_CODE_TOKEN>

Hard to say what to do here. 

If you were to take:

<S_CODE_TOKEN>

You would get exactly what you expect: a single lazy blockquote with all the text inside it. Markdown.pl produces that almost exactly, aside from the misnested `</blockquote>` at the end. 

I'm not sure we should be making exceptions to that just because it's one level up, but we _could_. Since markdown.pl is bugged, that gives us some freedom to decide what's best. I guess it's a matter of deciding what is more intuitive.
",chjj,
121,2013-02-25 06:23:26,"Lazy blockquotes are fine when all lines of their text (except the first) do not start with any angular quotes. When the second line starts with some quote characters (but a different number of them), it probably means a different level of quote nesting. (If that is some **human** input, and if we expect that human to know Markdown rules about lazy quotes.)

On the other hand, it may mean that a level of non-lazy quoting was added to a lazy blockquote by some dumb **software** that could not identify a lazy blockquote and thus added a quote character to each of its lines instead of only the first line.
",Mithgol,
120,2013-02-10 10:33:47,"In GitHub I can create a list with the following code:

<S_CODE_TOKEN>

and the result is:

The possible settings are:
- destination. _String_. blabla.
- exclude. _Array_. blabla.
- compact. _Boolean_. blabla.

Before the first `-` there's only one line feed.

With marked what I get is the following:

The possible settings are: - destination. _String_. blabla. - exclude. _Array_. blabla. - compact. _Boolean_. blabla.

With marked I have to write the code like this, with 2 line feed before the first list item:

<S_CODE_TOKEN>

The possible settings are:
- destination. _String_. blabla.
- exclude. _Array_. blabla.
- compact. _Boolean_. blabla.

Can you modify marked to work with just 1 line feed before the first list item?

Thanks
",gagle,2013-08-07 16:59:29
120,2013-02-10 17:22:17,"would also be useful in a few other places, like compact headings
",leeoniya,2013-08-07 16:59:29
120,2013-02-11 02:09:46,"GFM is wrong on this one. Markdown.pl explicitly disallows lists immediately after paragraphs for a reason. (This is the case [for many block-level items](https://github.com/chjj/marked/blob/master/test/tests/toplevel_paragraphs.text)). It creates ambiguity as shown in [this test from the original markdown suite](https://github.com/chjj/marked/blob/master/test/tests/hard_wrapped_paragraphs_with_list_like_lines.text). 

If we were to change this, what would the behavior be? If there is only one list item immediately following a paragraph, do not create a list, but if there are two or more, create a list? If we allow one item lists immediately after, it creates compatibility problems. If we only go with two or more, it still creates compatibility problems, just less of them. I suppose we can add it under `gfm` only, but it adds a bit of complexity, and first I need to check the behavior:

hello
- world
  foo

---

hello
- world

---

hello
- world
  foo
- bar
",chjj,2013-08-07 16:59:29
120,2013-02-11 02:10:57,"Okay, now I see. GFM allows 1-item lists following a paragraph. It doesn't use the smart behavior I described above. GFM would fail this test: https://github.com/chjj/marked/blob/master/test/tests/hard_wrapped_paragraphs_with_list_like_lines.text

This makes me even more hesitant to include it.
",chjj,2013-08-07 16:59:29
120,2013-02-11 09:29:01,"People use marked because it's the only markdown parser that is actively maintained and has full support for the gfm (and is the best!!). If someone includes your module to implement a live web editor to generate html files in the server and it proclaims that supports gfm syntax, then the users expect to mimic the same behaviour that the github preview tool has. In other words, if marked supports gfm then you ""have"" to implement the same behaviour.
",gagle,2013-08-07 16:59:29
120,2013-02-11 10:42:09,"I think I might just add a ""true gfm"" mode or something: one that enables the illogical parts of GFM.
",chjj,2013-08-07 16:59:29
120,2013-04-12 11:42:42,"I'd love to see that ""true gfm"" mode as well, since there are cases where the result is not only unexpected, but a proper mess. GFM solves this well IMO.  Maybe not clean from a technical perspective, but definitely from a user perspective. Example: A line followed by three bulletpoints, each starting with an asterisk. GFM handles this well, but with marked the three items are displayed on one line, and to make things worse the first entry is in italics. 
",perhamburg,2013-08-07 16:59:29
119,2013-02-09 18:18:55,"I was wondering whether there is a way to include a CSS stylesheet or a link to it in the HTML file generated from a markdown file. Looking at the available options this seems not to be implemented right now. 

Any thoughts on this?
",josdejong,
119,2013-02-09 18:27:42,"<S_CODE_TOKEN>

Edit, even better:

<S_CODE_TOKEN>
",yuchi,
119,2013-02-09 18:37:38,"sorry, I mean using the command line parser, something like:

<S_CODE_TOKEN>

I try to automatically build styled, standalone html files from my markdown files.
",josdejong,
119,2013-02-09 18:46:02,"You could simply prepend that `style` tag to the result. Marked does not produce a full html page, just the content fragment.
",yuchi,
119,2013-02-09 18:49:50,"Thanks, exactly, I see now that the parser does not add any html/head/body to the exported html (as I expected beforehand). So that has to be added before the end-result is a valid HTML file. No problem, gives me all freedom to build a head.

I suppose there are no built-in options to specify a layout/template file? (like with Jekyll)
",josdejong,
119,2013-02-10 02:11:52,"@josdejong, it should be easy to add these things.

Bash

<S_CODE_TOKEN>

JS

<S_CODE_TOKEN>

> I suppose there are no built-in options to specify a layout/template file? (like with Jekyll)

No, that doesn't exist. It should be easy to layer on that functionality though.
",chjj,
119,2013-02-10 13:28:36,"yes, it is very easy to add these things, but it is exactly these kind of solutions that I try to get rid of as much as possible. Custom build scripts tend to grow large and break easily. So amongst others I was looking around for a proven tool to automate building HTML documentation from markdown files for my applications.

I'm not sure if it is within the scope of marked, but if so, you have at least one fan to add an option to specify an HTML template on the command line :). As you say, it's not hard to implement (though I would rather use a template file with a placeholder like `{{content}}` instead of concatenating a header, contents, and footer file, similar to [jekyll](https://github.com/mojombo/jekyll/wiki/Usage).). If you like I can build the implementation for this feature.
",josdejong,
119,2013-12-16 01:04:15,"> `var html = stylesheet + marked(text);`

What is `stylesheet`? I assumed it was a readFile of the css document, but gets printed in the body as literal text. It would be great if there was an option where a stylesheet could be specified:

<S_CODE_TOKEN>
",jshado1,
119,2014-08-14 17:57:31,"I can see instances where I would both like to just get just the html, and where I would want to build a full page.

It would be NICE to build the full page, perhaps even have setOptions.stylesheet and setOptions.javascript be arrays, but then I'd need a title for the page, and what if I wanted to put the javascript at the end not at the beginning it just gets outrageous.

Best thing to do is keep marked with just simple md to html formatting and you build the page as you like it.
",jnovack,
119,2016-10-07 00:46:52,"@yuchi Why do you use ending style tag?
",heyallan,
119,2016-10-07 07:46:41,"@heyallan this is a pretty old issue. What's your question more specifically?
",yuchi,
119,2016-10-07 16:48:53,"@yuchi Nevermind. Sorry. And thanks.
",heyallan,
118,2013-02-03 17:51:51,"The `Regexp` for `list block` could not parse indented `hr` which may exist in code block correctlly, like:

<S_CODE_TOKEN>
1. foo
    <S_CODE_TOKEN>
2. two
<S_CODE_TOKEN>

As it consider the `---` in code block as end of list, this patch fixed that.
",chemzqm,2013-02-03 19:37:58
118,2013-02-03 19:37:55,"Similar to the fix I've been considering for a while. I haven't gotten around to testing all the implications yet. This one has some problems. Closing for now. 
",chjj,2013-02-03 19:37:58
117,2013-02-03 13:05:51,"I need to support generating anchors in the HTML output, similar to the way GitHub allows the linking to each heading.  I don't know if this is in your roadmap, but I thought I would provide a pull request in case you wanted to utilise it.

With the `anchors: true` for the marked options, it will take the heading text and turn it into a valid `name` attribute value.  It does assume that all heading text is unique.
",kitsonk,2013-08-02 16:55:49
117,2013-02-11 20:00:29,"+1
",vladikoff,2013-08-02 16:55:49
117,2013-02-12 01:31:05,"Couple of notes on this:
- it might make sense to use ""-"" instead of ""_"" for anchors.
- and maybe generate the same markup as [github's anchors](https://gist.github.com/cowboy/6930b3075e8320fe6088)
",vladikoff,2013-08-02 16:55:49
117,2013-02-12 01:41:07,"I like this idea. I'll probably merge this and review/potentially-refactor it when I have time.
",chjj,2013-08-02 16:55:49
117,2013-02-12 22:09:37,"That would be very cool indeed
",vvo,2013-08-02 16:55:49
117,2013-02-13 12:15:53,"I have added a commit that brings it more into line with GFM anchors.  The one thing I didn't want to do is specifically include something that is GitHub specific, so I have added two options which control the output.  There is `anchorClass` which defaults to `anchor` and `anchorContent` which defaults to an empty string.  This should give enough flexibility for the end users to tailor the output to their needs.

The test cases don't cover all the use cases, though I verified that it matched what I expected it to do.  I am not sure how non-default options are handled in the test cases to actually check all configured options work as expected.

I tried to follow the coding style, but it may not fit into the ""bigger picture"", but at least the concepts are there.
",kitsonk,2013-08-02 16:55:49
117,2013-02-20 21:43:33,"This is what we are using to generate wiki anchors on http://gruntjs.com/getting-started#installing-the-cli

<S_CODE_TOKEN>
",vladikoff,2013-08-02 16:55:49
117,2013-03-01 06:34:33,"Have a look at my pull request #129 

With the power of renderer, you can easily do it in this way:

<S_CODE_TOKEN>
",lepture,2013-08-02 16:55:49
117,2013-03-01 06:35:00,"And I do think this is a better way, just like sundown does.
",lepture,2013-08-02 16:55:49
117,2013-05-03 23:51:43,"Any word on this? Would really like it to be merged in.
",ianstormtaylor,2013-08-02 16:55:49
117,2013-05-19 16:54:23,"This pull request should be related to #89.
",kapouer,2013-08-02 16:55:49
117,2013-06-16 18:49:20,"I would **really** like to see this added.
",ChrisWren,2013-08-02 16:55:49
117,2013-06-28 02:06:04,"I would love to see this added. However, I would rather see it generate HTML5 compatible markup.
1) `name` attribute is obsolete on non-form elements. `id` should be used instead. [spec](http://www.w3.org/TR/html5/obsolete.html#obsolete-but-conforming-features)
2) `id` attributes can accept any non-white-space characters, and it need not begin with a letter. [spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#the-id-attribute)

I'm also not a huge fan of adding additional markup to the hX element. Adding just an `id` attribute is the simplest thing necessary without being opinionated on extraneous markup. If users want the additional markup they can either use CSS generated content or inline HTML.
",jasonkarns,2013-08-02 16:55:49
117,2013-08-02 16:55:49,"Closing in favor of #181.
",chjj,2013-08-02 16:55:49
116,2013-01-30 22:46:35,"Is it possible to specify a class attribute value for link? (ie: `<a href=""#"" class=""prettyPhoto"">whatever</a>`)
",FredericLatour,2013-01-30 22:59:14
116,2013-01-30 22:59:12,"You'll have to write raw markup to do this. There's no markdown way of doing it unfortunately.
",chjj,2013-01-30 22:59:14
116,2013-01-31 14:13:55,"I know there's no way in standard Markdown ... but obviously this is something necessary and that's why MD extensions are available.
Too bad you can't find a way to make it possible to extend **marked** without making it necessary to come up with a fork and therefore an entire different project. If you currently look at the forks, the situation is a bit messy... it at least there was some fork that would come out as a clear winner...
Someone proposed a plugin mechanism ... any reason why it doesn't seem to into core?
",FredericLatour,2013-01-30 22:59:14
116,2014-08-01 20:54:26,"Kramdown allows arbitrary attributes http://kramdown.gettalong.org/syntax.html#attribute-list-definitions and Beegit, which is Marked based but closed source has added limited support for classes and ids only as `# h1 {#id .class}`. I have proposed further discussion on alternatives at: https://github.com/karlcow/markdown-testsuite/issues/66
",cirosantilli,2013-01-30 22:59:14
116,2016-05-02 11:58:37,"@chjj There should be an option available to set custom classes on some elements.
",julmot,2013-01-30 22:59:14
115,2013-01-23 22:08:37,"With gfm line breaks enabled, code like this:

<S_CODE_TOKEN>

Will generate `<br>` tags at the end of each line, which creates invalid HTML and ugly rendering as the browser moves those extra line breaks _somewhere_.

github's actual github flavored markdown doesn't appear to have this unfortunate behavior.
",midnightmonster,
115,2013-02-03 15:10:05,"I changed the `*` to `+` in line 507 and 508 of libs/maked.js

<S_CODE_TOKEN>

to remove the unnecessary `<br>`, that means there should always a space to add a break line.
",chemzqm,
115,2013-10-11 12:33:39,"+1 -- very serious issue if you want to include some readable HTML.
",janpaul123,
115,2014-02-10 08:49:39,"is the change proposed by @chemzqm a viable fix for this? any chance of it being merged in?
",SimonCropp,
115,2014-02-10 15:19:02,"The correct behavior (where correct means ""works most of the time and matches what github actually does"") is to toss the current line breaks implementation and make it so that newline-to-br processing happen with a simple find and replace only in the 'paragraph' and 'text' cases in the big Parser.prototype.tok switch. 
",midnightmonster,
115,2014-02-10 16:39:43,"Submitted a pull request #348. It doesn't feel like it matches the style/organization exactly, but it does the right thing.
",midnightmonster,
114,2013-01-22 15:30:21,"I have added [[Title|WikiPage]] support because I want to export GitHub wiki to static site.
",hlb,2013-01-30 23:02:45
114,2013-01-22 19:28:13,"Does this work in regular github comments? I really want to avoid implementing github-specific stuff like sha1 links and task lists. 

Test:

[[WikiLink|WikiPage]]
",chjj,2013-01-30 23:02:45
114,2013-01-22 20:26:13,"@chjj no, it is for wiki only. 

I can understand your concern, and believe all github-specific (or other) features should be in a plugin. I added this feature just because it is stupid to parse the whole text myself.

#35 also looks like good start.
",hlb,2013-01-30 23:02:45
114,2013-01-30 23:02:43,"I'm going to close this for now. I don't like how github-specific it is.
",chjj,2013-01-30 23:02:45
114,2013-01-31 02:18:02,"Ok, thank you for your time and the great work though! :-)
",hlb,2013-01-30 23:02:45
114,2013-09-05 09:55:07,"Is there a way to make custom helpers so we can code this in ourselves and add that functionality to it?  I want to mimic many Mediawiki functions for my editing team that uses the markdown daily.
",acamarata,2013-01-30 23:02:45
114,2013-09-05 14:00:03,"Like: https://github.com/chjj/marked/pull/35#issuecomment-13966700
Or:
https://github.com/jcayzac/marked/commit/a415befc5e226cc64a3a2bc4bf328e228fcb67e1

But neither are implemented and I have a lot of [something:blah:blah] or
{whatever:blah:blah} I would like to code in for my custom wiki.

On Thu, Sep 5, 2013 at 8:48 PM, vadim baklanov notifications@github.comwrote:

> Could you explain a little more? maybe I'll find something ready in my
> code.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/pull/114#issuecomment-23868608
> .
",acamarata,2013-01-30 23:02:45
114,2013-09-05 14:01:53,"I would love a plugin that would add all the Mediawiki markdown also, I know it would be a performance hit but I'm running this client side and the server is sending the Markdown so it will scale, I just want the more features, and my team is coming from Mediawiki.  (We also would love to import directly, and want to get a lot of things like <references> at the bottom, footnoting etc.)

Would really love a Mediawiki'ish plugin to add references, citations, etc.
",acamarata,2013-01-30 23:02:45
113,2013-01-21 11:43:27,"Can pipes be put into GFM tables? I tried escaping it `\|` but that didn't work.
",davidsteinberger,
113,2013-05-29 01:11:00,"I don't think GFM supports escaping pipes, use `&#124;` instead.
",scottgonzalez,
113,2014-10-10 08:05:34,"It doesn't really works :(

<S_CODE_TOKEN>

Result: 

| First Header | Second Header |
| --- | --- |
| Content from cell 1 | Content from cell 2 |
| Content in the first column | Content in the `find * &#124; grep ""test""` second column |

UPD: In github editor works well
",khakulov,
113,2017-03-22 21:49:59,"Using &#124; does not work anymore in tables, I fear: https://gist.github.com/nknapp/16c1ffbef942a6384c57d03a1c7b9d7b",nknapp,
112,2013-01-18 03:19:02,"Your sample on the marked home page says to put this in the config

<S_CODE_TOKEN>

But I get this error

<S_CODE_TOKEN>
",robogeek,2013-01-30 23:03:48
112,2013-01-30 23:03:47,"That's just an example configuration. It's not meant to be used. It's just a way of illustrating how a highlighter can be used with marked.
",chjj,2013-01-30 23:03:48
111,2013-01-17 15:03:32,"any interest in supporting gfm-tasks?

https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments

<S_CODE_TOKEN>
- [ ] a task list item
- [ ] list syntax required
- [ ] normal **formatting**, @mentions, #1234 refs
- [ ] incomplete
- [x] completed
",leeoniya,2013-01-17 15:19:06
111,2013-01-17 15:06:28,"They're kinda meaningless without the back-end to support setting/unsetting them in a data store. Nice to look at, but that's about it.

Walter

On Jan 17, 2013, at 10:03 AM, Leon Sorokin wrote:

> any interest in supporting gfm-tasks?
> 
> https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments
> - [ ] a task list item
> - [ ] list syntax required
> - [ ] normal **formatting**, @mentions, #1234 refs
> - [ ] incomplete
> - [x] completed
>   
>   •  a task list item
>   •  list syntax required
>   •  normal formatting, @mentions, #1234 refs
>   •  incomplete
>   •  completed
>   —
>   Reply to this email directly or view it on GitHub.
",walterdavis,2013-01-17 15:19:06
111,2013-01-17 15:19:04,"See #107.
",chjj,2013-01-17 15:19:06
111,2013-11-01 02:35:14,"Hi @leeoniya , @chjj
does this feature implemented?
it's pretty useful.

I think we can just render
 `[ ]` to `<input type=""checkbox"" disabled>`
and render
 `[x]` to `<input type=""checkbox"" disabled checked>`

don't need to add any css class on `input` element.

how do you think?
",kindy,2013-01-17 15:19:06
111,2013-11-01 04:21:19,"I can only speak regarding my project, https://github.com/leeoniya/reMarked.js

As I mentioned here: https://github.com/chjj/marked/issues/107#issuecomment-12373620 , I'd probably go with unicode entities, but having the option of input checkboxes would also work and probably more friendly from an HTML => markdown conversion perspective. It would be trivial to add support for both variations in `reMarked.js`.

This issue seems to be duped pretty often in `marked` and gets hung up on ""there's no backend support"" and ""it's not standard"" arguments, both of which I find moot.
",leeoniya,2013-01-17 15:19:06
111,2013-11-01 06:14:21,"@leeoniya 

I think the backend support is no need for this UI.
as most of us just want a ""todo list"" like things.

for the ""not standard"" stuff, as we already has `gfm` option, it's no matter to make it more ""gfm"".

if most people like it, it can become ""standard"" ...

btw. when I have time, I'll work on this feature. maybe this weekend.

and as other part is render to html, I think we can just render this to `input` element. but not unicode char.

:)
",kindy,2013-01-17 15:19:06
111,2017-01-05 19:19:03,Is this featured added now?,jasondavis,2013-01-17 15:19:06
110,2013-01-17 08:33:42,"Is it possible to generate highlighted fenced code blocks using the `--gfm` option and have it parse syntax highlighting?

I noticed `man marked` mentioning nothing about `--highlight` option. I did install `highlight.js` using `npm` so maybe it is possible somehow?
",JeanMertz,
110,2013-02-03 18:27:52,"There's no `--highlight` option, you need to write some code to make it, 
You can also try out my repo https://github.com/chemzqm/marked it make use of `highlight.js` by default,
and you could disable highlight by option `--no-color`
",chemzqm,
110,2013-05-29 01:12:20,"@chjj Unless there's a different answer than ""you need to write some code"", this should just be closed.
",scottgonzalez,
110,2015-06-18 14:03:13,"I was thinking about what if you could provide options in a javascript file, that way you could write some code but still use the cli. You could do something like:

#### options.js

<S_CODE_TOKEN>

#### cli

<S_CODE_TOKEN>
",matthewp,
109,2013-01-16 20:48:03,"When try to render a link with an ending ')' it is failing.

<S_CODE_TOKEN>

The result has the closing ')' is outside the link.

<S_CODE_TOKEN>
",julianduque,
109,2013-01-17 00:11:09,"This has been a problem for a while. I forgot about it for some reason. Back on the todo list.

edit: testing GFM...

http://en.wikipedia.org/wiki/Snapshot_(computer_storage)

[test](http://en.wikipedia.org/wiki/Snapshot_%28computer_storage%29)

[test](http://en.wikipedia.org/wiki/Snapshot_(computer_storage\))

edit 2: GFM links handle the parenthesis, regular links do not without the backslash.
",chjj,
109,2013-01-17 04:34:11,"I was trying to fix it but i'm not that good in regex so i failed :-1: 
",julianduque,
109,2013-02-19 13:06:13,"See my comments to the related #102.
",Mithgol,
109,2014-02-21 01:42:47,"https://github.com/angular/angular.js/pull/6377 We're encountering this with angular and dgeni, it would be nice to fix this. Seems like this hasn't been poked at for a while. I'll see if I can hack together a fix tonight, that would be nice.

The problem with this is, no matter what you do, you can still end up causing certain links to be invalid, there's no real good way to do this. But hmm.
",caitp,
108,2013-01-10 14:21:28,"In order for the module to work with server AMD, a minor change needs to be made to the environment detection code as attached here.

This is in line with the UMD standard here - https://github.com/umdjs/umd/blob/master/returnExportsGlobal.js.
",guybedford,2013-01-11 16:52:26
107,2013-01-09 23:18:18,"https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments

To be honest, I'm not entirely sure if Markdown should support this or not. Seems very, very Github centric, but curious what your thoughts are.
",OscarGodson,
107,2013-01-10 00:31:09,"Just testing so I can see the HTML.
- [ ] a task list item
- [ ] list syntax required
- [ ] normal **formatting**, @mentions, #1234 refs
- [ ] incomplete
- [x] completed
",chjj,
107,2013-01-10 00:34:22,"Oh, weird. I can't click on your tasks at all. they're read only. Probably because, I'm assuming, when you check one it sends an edit XHR request and adds an ""X"" inside the bracket.
- [x] Get stuff done
- [ ] Just testing myself
- [ ] First time using them...
",OscarGodson,
107,2013-01-10 00:36:30,"Yeah, you're right, that's very github specific. It generates checkboxes without a form. List items with certain data attr's and classes, catering to githubs specific stylesheet. Not to mention the js which adds the dynamic behavior. I see this as being really hard to standardize. ...maybe if they were renamed to just ""GFM checkboxes"" instead of ""todo lists"", since the ""todo"" list part entails the dynamic behavior.

edit: Anyway, I'll leave this open if anyone else wants to comment.
",chjj,
107,2013-01-10 05:08:10,"I like the idea to simply render checkboxes using this markup. In app you can add event handler to manage specific behaviour. `[ ] a task list item` just parses to label with input. What do you think? Also we could think about wrapper around this checkboxes.
",alekseykulikov,
107,2013-01-15 00:26:53,"IMO - something like this would be good as an extension.
",TheCloudlessSky,
107,2013-01-17 15:50:24,"another option maybe would be to render them as unicode entities since there's no implied interaction...

http://www.fileformat.info/info/unicode/char/2610/index.htm
http://www.fileformat.info/info/unicode/char/2611/index.htm
",leeoniya,
107,2013-01-17 17:14:42,"But it would require a new markdown format for checkboxes, which is non standard even in gfm mode.
I.e. `[ ]` for unchecked and `[x]` or `[v]` for checked 
Could be nice for showing todo lists with static marks..
",velsa,
107,2013-01-21 11:26:59,"I think this actually is useful, even in contexts where an HTML checkbox doesn't make sense.  

+1 for generating unicode characters as in [here](http://en.wikipedia.org/wiki/Checkbox#Unicode) and [here](http://www.howtogeek.com/howto/28947/use-a-unicode-text-trick-to-make-lists-with-checkboxes/).  

In non-HTML environments, editors could choose to draw them as a bulleted list with strikethroughs for completed items.

I've been hoping for someone to cross Taskpaper's text-based todo lists with Markdown for a little while, and this seems a little more user-friendly.  Taskpaper requires you to add an @done tag to the end of each line, which makes scanning plaintext to see what is done w/o syntax highlighting somewhat difficult.  The GFM syntax is arguably more readable.

Yes, Github uses this feature to power some crazy custom features for Github Issues, but it's also generally useful.
",jessmartin,
107,2013-02-19 13:13:35,"Note: in GFM, `[ ]` (or `[x]`) has to be in the very beginning of a list item. (Only a whitespace may happen between the checkbox and the preceding bullet.) Bullets are not displayed for these lists (even for their items that do not start with checkboxes).
",Mithgol,
107,2013-07-03 05:33:22,"GitHub has announced (in June 25) that task lists are [supported in gists](https://github.com/blog/1542-task-lists-in-gist) as well as in repositories.

This announcement widens (and generalizes) the area of their application, making more reasonable to support these lists in GFM-flavoured mode of marked.
",Mithgol,
107,2013-07-03 12:34:29,"I'm curious, though. If you do this, and there's no commensurate back-end to handle them, what good are they besides eye-candy? In Github, there is a running JavaScript observer waiting for you to click one of these, and backing that choice to a persistence layer somehow. Marked doesn't provide that, so who will?

Walter

On Jul 3, 2013, at 1:33 AM, Mithgol wrote:

> A week ago GitHub announced that task lists are supported in gists as well as in repositories.
> 
> This announcement widens (and generalizes) the area of their application, making more reasonable to support these lists in GFM-flavoured mode of marked.
> 
> —
> Reply to this email directly or view it on GitHub.
",walterdavis,
107,2013-07-03 14:00:31,"An eye-candy would already be as good as on GitHub where you cannot click other people's task lists (unless you are an owner of the repo).
",Mithgol,
107,2013-07-03 16:37:16,"> and there's no commensurate back-end to handle them

@walterdavis Marked doesn't provide any backend service at all. All it does is parse out HTML. Without a backend you can't save anything anyway. Even if it's just an H1, it doesn't persist in any way. 
",OscarGodson,
107,2013-07-03 17:26:45,"Right. That was my understanding as well, and I was asking to make the point that adding the GFM checkboxes only does half the job.

Walter

On Jul 3, 2013, at 12:37 PM, Oscar Godson wrote:

> and there's no commensurate back-end to handle them
> 
> @walterdavis Marked doesn't provide any backend service at all. All it does is parse out HTML. Without a backend you can't save anything anyway. Even if it's just an H1, it doesn't persist in any way.
> 
> —
> Reply to this email directly or view it on GitHub.
",walterdavis,
107,2014-02-26 06:02:58,"Added a rough implementation for task lists that's been sitting in my todo list file for several months. Let's see how it works on master for now.

cc @OscarGodson @walterdavis @Mithgol
",chjj,
107,2014-04-26 02:33:14,"+1
Even if this doesn't make it to the gfm flag, an extension would be great.
",styfle,
107,2014-05-06 16:56:01,"@chjj What was the reason for the revert?
",evanwon,
107,2014-05-21 15:24:33,"+1 for unicode characters rather than checkboxes (for renderer default behaviour). Anyone can customize it to add checkboxes with the current api

<S_CODE_TOKEN>

@chjj Maybe the implementation makes more sense thinking on a inline level method rather than a block level method? I've noticed the check marks can be ommited on any list items:
- [x] Completed
- [ ] Not Completed
- Not a task at all
- [x] Another task
- Not a task at all

This leads me to think marked doesn't need a new inline level method at all, featuring an enhancement to the current block-level [`listitem`](https://github.com/chjj/marked#block-level-renderer-methods)

`listitem(string text, undefined|bool check)`

That is
- `true` for `[x]`
- `false` for `[ ]`
- `undefined` if _""checkmark""_ is not present or `gfm` is disabled or `whatever-option` is disabled

Does this make sense?
",laconbass,
107,2014-05-29 15:05:03,"So it's quite easy to build your own. Here's one I'm using in [vue-github](/bigbluehat/vue-github/):

<S_CODE_TOKEN>

Changing it to output the Unicode characters should be trivial.
",BigBlueHat,
107,2014-10-31 10:55:20,"hey, any info on why the rough impl got reverted? relying on something that uses marked, I think it'd be nice to have this gfm feature upstream(even if it's doing nothing more than producing enabled/disabled checkbox html) instead of as an extension. check-lists are useful in a variety of writing environments that aren't github.
",dwendt,
107,2015-01-03 06:31:03,":+1: 

For another perspective, I'm coming at this as a user of marked's lexer. My use case is extracting complete and incomplete tasks from `README.md`, `TODO.md`, and GitHub pull request descriptions.

I'm hoping task list support isn't implemented exclusively in the renderer. Something akin to this from the lexer:

<S_CODE_TOKEN>

This would be a non-breaking change. Custom renderers can opt-in by testing for a defined value of the `completed` property. We avoid a proliferation of ""strip off the ballot box markdown"" code by providing the already stripped text in the `task` property.

## Example

<S_CODE_TOKEN>

---

This is a pretty big request on my part. If you're favorable to the idea of changing the lexer I'd be happy to work on a PR for just that part, leaving rendering alone for now.
",toolbear,
107,2015-01-19 11:32:46,"github task list support is not implemented yet, right?

It's kind of hard to follow the situation about them.

This issue calling them `To do lists` does not help either with explorability of the subject matter.

Rename it to `github task lists` please.
",anaran,
107,2015-01-20 20:45:26,"It's a GFM task list if you want to be pedantic. Simply ""GitHub task list"" implies some integration into github's systems(which is undesirable for something as simple as a mark/unmarked checkbox list).
",dwendt,
107,2015-01-20 21:23:23,"If you really want to be pedantic, it _is_ integrated into GitHub's systems: it has special rendering in all places Markdown is accepted; in a few places the task list is interactive.
",toolbear,
107,2015-05-06 07:50:25,"I've just opened #587 which should resolve this issue
",jhollingworth,
107,2016-09-13 04:41:34,"👍 for unicode substitution.  I use a great many things that take advantage of marked, including Visual Studio Code's markdown preview.  Would love the ability to render a ☐ and a ☑ and maybe even a ☒.

I often use markdown that includes lists of tasks, even for things that don't end up on Github.  Due to using Github I expected this to just work out of the box.

https://en.wikipedia.org/wiki/Checkbox#Unicode
",Reificator,
107,2017-02-06 14:00:38,"This works for me...
<S_CODE_TOKEN>
I use icons from `fontawesome`, but can just use html checkbox simply, of course. Don't remember to create you own `marked.Renderer` instance and make config right. ",jungor,
106,2013-01-05 03:03:06,"At the moment I'm having to reference the GitHub repo directly.  There are lot of things that have been fixed/updated since the last release to npm.
",ForbesLindesay,2013-01-05 13:29:23
105,2013-01-05 02:14:02,"I'd like to be able to customize the inline lexer with an additional type (specifically math).  At the moment it's not extendable.  There as an implementation of this in #71 but that request was closed by the OP for some reason.
",ForbesLindesay,
105,2013-01-05 14:31:58,"I'd also like to see something along this line (plus a custom block lexer too).

I'm currently working on a documentation parser / generator for based on markdown formatted comments and I need to both filter out the parameter / type annotations from the token stream, as well as convert them to HTML later on.

Right now I'm using a custom patched version of marked which just utilizes a couple of callbacks and other small modifications (i.e. storing the raw text of a process nodes e.g. ""storing the full ""### heading title"" for a heading).
",BonsaiDen,
105,2013-06-27 16:00:54,"I figured I'd throw my use cases into my +1 for this issue as well. (Ref: [adam-p/markdown-here](https://github.com/adam-p/markdown-here))
1. I've [hacked math support](https://github.com/adam-p/markdown-here/blob/5cd48eb06f74d365158100b5d5f045b9842c666c/src/common/marked.js#L448) into my copy of marked.js. It's inline-only and looks like `$...$`. It translates TeX into an image that uses the [Google Chart API](https://developers.google.com/chart/image/). (MathJax and MathML don't work in email.)
2. I need to add the scheme to URLs. Some email clients can't copy with links that don't provide a scheme (adam-p/markdown-here#57), so ""http://"" should be added at start of any such URL.
   - So... I implemented that by pre-parsing MD links and adding the scheme. But, of course, that introduced another bug -- I didn't exclude MD links inside code blocks (adam-p/markdown-here#83). I guess I'll have to hack into marked.js again.

I'm sure I could come up with more examples, but those are probably representative. Some things are extensions of MD, and some things are hacks to help people use MD in the weird environment of email better. 
",adam-p,
105,2013-08-14 09:23:57,":+1: 
",insanehong,
105,2014-03-10 16:28:58,"Any news on this? I would need the feature of #114 . I understand that it is not added to marked but it should be possible to add it as a custom extension. 
",Ognian,
105,2014-12-04 18:14:25,"Any news on this? I am looking for something which does basic markdown but allows me to add some custom bindings on top.
",grofit,
105,2015-01-13 16:43:20,"I second the need for this. I patched the file to include my custom lexer, but it's far from ideal.
",nicbou,
105,2015-10-11 17:09:02,"Any news on this topic? I'd like to see an option to take out ""$...$"" and ""$$...$$"" to pass it to MathJax. It's like two years since the issue was opened.
",PeterBocan,
105,2015-11-13 08:42:31,"@PeterBocan , i needed same future so i added way to optionally pass custom inline and block rules with parse functions. Look at this [branch](https://github.com/davitv/marked#adding-new-rules)
",davitv,
105,2015-11-13 13:53:51,"I'll look at that! Thanks!
",PeterBocan,
105,2015-11-29 20:29:32,"Any news?
",nisargjhaveri,
105,2015-11-30 10:11:20,"Look at this [branch](https://github.com/davitv/marked#adding-new-rules)
",davitv,
104,2013-01-04 08:30:59,"`marked` mis-parses the following

<S_CODE_TOKEN>

| Function name | Description |
| --- | --- |
| `help()` | Display the help window. |
| `destroy()` | **Destroy your computer!** |

creates

<S_CODE_TOKEN>

thanks!
",leeoniya,2013-01-04 22:12:21
104,2013-01-04 09:25:33,"Are you sure? A quick copy and paste into `marked --gfm --tables` gives the proper output. Are you using HEAD on master?
",chjj,2013-01-04 22:12:21
104,2013-01-04 16:02:20,"yeah, using latest. i narrowed it down though. it happens when there's no trailing `\n` at the end (when `|` is at EOF)

EDIT: ...and/or maybe when another `|` is at beginning of file?
",leeoniya,2013-01-04 22:12:21
104,2013-01-04 22:42:59,"nice, thx. now i can do a back-and-forth with the `tables` example (at the bottom). http://leeoniya.github.com/reMarked.js/
",leeoniya,2013-01-04 22:12:21
103,2012-12-29 22:59:42,"Most of the time marked.js will add an extra line to the end of a paragraph tag but occasionally it won't. This makes it difficult to style `<p>` elements.

I'd prefer it never adds new lines so I could style things as I like with CSS.
",KyleAMathews,2013-01-10 02:31:13
102,2012-12-22 10:43:34,"I used `marked` in my personal blog. Several links was rendered incrrectly.

There are really some incredible links on the Chinese version, such as:

<S_CODE_TOKEN>

And the rendering result on my blog:

https://raw.github.com/jiyinyiyong/blog2/master/posts/linux/arch-reinstall.md
http://blog.jiyinyiyong.info/linux/arch-reinstall.md

which was fine when I post that in a Github Issue:

https://github.com/jiyinyiyong/blog2/issues/1
",jiyinyiyong,
102,2013-02-19 12:53:50,"May be worked around by replacing `)` with `%29` in URLs.

Note: using `\(` instead of `(` is not necessary in URLs, using `\)` instead of `)` is not necessary in URLs, marked does not seem to process any Markdown escaped characters in URLs.
",Mithgol,
102,2013-02-19 13:02:19,"The fix may probably be achieved by processing some Markdown escapes (specifically `\)`) in URLs.

Such a fix would also require replacing

<S_CODE_TOKEN>

with

<S_CODE_TOKEN>

so that the URL is required to end with `[^\]` (not an escaping backslash).
",Mithgol,
101,2012-12-17 23:28:52,"<S_CODE_TOKEN>

in marked: 

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",amasad,2013-01-10 02:31:13
101,2013-01-10 12:41:55,"Doesn't the new RE permit the following:

<S_CODE_TOKEN>

Example in GH:

[content](http://www.google.com) and [content](http://www.google.com)
",yuchi,2013-01-10 02:31:13
101,2013-01-10 12:43:48,"Even GHFM supports it... Personally I think the RE should be:

<S_CODE_TOKEN>

(And notice `[^\s]` --> `\S`)
",yuchi,2013-01-10 02:31:13
101,2013-01-10 12:55:48,"> Doesn't the new RE permit the following:
> Example in GH:
> 
> Even GHFM supports it... Personally I think the RE should be:
> /^ *[([^]]+)]: *(?:<?(\S+)>?|(\S+))(?: +[""(]([^n]+)["")])? *(?:\n+|$)/
> (And notice [^\s] --> \S)

It didn't render the second one properly because I forgot to add a right angle bracket to the negative set. Fixing.
",chjj,2013-01-10 02:31:13
101,2013-01-10 13:02:14,"Also, the regex you posted will not work.

<S_CODE_TOKEN>

results in

<S_CODE_TOKEN>

The question marks guarantee that the second capture you have in the non-capturing group will never serve a purpose, regardless of whether there are angle brackets or not.

If you remove the {0,1} question marks...

<S_CODE_TOKEN>

results in

<S_CODE_TOKEN>

It will never be able to handle an angle bracket on one side but not the other.

On top of all that I don't like having more captures than necessary.

edit: Anyway, I think a faster version of mine:

<S_CODE_TOKEN>

would be:

<S_CODE_TOKEN>

but I'll have to play around with that more later.
",chjj,2013-01-10 02:31:13
101,2013-01-10 17:07:49,"That's exactly what I though about, that a single angle bracket should be put in the url.

But it was just for curiosity.
",yuchi,2013-01-10 02:31:13
100,2012-12-13 17:27:53,"This fixes isaacs/npm-www#210.
",isaacs,2012-12-13 17:30:50
99,2012-11-30 09:54:57,"I often use marked from the command line to preview markdown documents before posting them on the web. However whenever I am forced to write in a different language the output becomes unreadable.

If I could pass an optional flag to wrap the output in an html block with a charset that would be cool.

If there is any interest at all for such a feature I would gladly fork and create it.
",AlexanderEkdahl,
99,2013-05-29 01:20:10,"What is causing the output to be unreadable? It seems like whatever you're doing would easily be able to do the wrapping since it doesn't require touching the markdown content at all.
",scottgonzalez,
99,2013-05-29 08:09:00,"Yes. My solution was to create an executable 'markedutf8' which wraps the content in the proper charset and sends it to a browser. 

On 29 maj 2013, at 03:20, Scott González notifications@github.com wrote:

> What is causing the output to be unreadable? It seems like whatever you're doing would easily be able to do the wrapping since it doesn't require touching the markdown content at all.
> 
> —
> Reply to this email directly or view it on GitHub.
",AlexanderEkdahl,
99,2015-02-18 18:09:03," AlexanderEkdahl,

Hi, please could you post how did you make the wrapper?

Thanks in advance!
",sebelk,
98,2012-11-26 12:31:50,"Hi,

we're using marked for a phonegap/cordova app and links in that context is not a good thing. I've added a 'links' option that just turns links parsing off. Also I refactored setOptions a bit so that it ""inherits"" default options. 

I haven't had time to to run or add tests for this and I understand if you don't want to burden the codebase with yet another option, so take it or leave it as you please :-)

cheers!
",davidlgj,2013-01-09 20:29:56
98,2013-01-09 20:29:48,"Depending on how well the JS engine optimizes property lookups on properties that aren't likely to change in between loop iterations, simply setting all the link regexes to a noop might be faster. You could even do this from the outside.

<S_CODE_TOKEN>

Unfortunately that will be global. You could make it local to the lexer by changing `lexer.rules` to a new object after you instantiate it by hand.

I won't be accepting this PR, but I will consider implementing something like this:

<S_CODE_TOKEN>
",chjj,2013-01-09 20:29:56
97,2012-11-23 10:56:53,"If there are any null characters in something parsed by Marked, inline.lexer infinite loops, because inline.text uses `[^ \0]`. This pull replaces these with `[\s\S]` so as to _really_ match any character.
",quarterto,2012-11-23 15:11:15
96,2012-11-20 16:34:08,"Following #83, this does the same for paragraphs.
",tlvince,
95,2012-11-12 23:10:09,"This bit me hard, when you get the array of tokens, it should also have a `links` property.  This adds a check for that and throws an error if the `links` property is absent.
",ForbesLindesay,2013-01-03 12:50:24
94,2012-11-06 14:12:26,"If I write a code block containing any number, it gets replaced by a `$1`

<S_CODE_TOKEN>

becomes - 

<S_CODE_TOKEN>
",guybedford,2012-11-06 14:18:51
94,2012-11-06 14:18:51,"Turns out it was my code highlighter causing the issues!
",guybedford,2012-11-06 14:18:51
93,2012-11-05 23:05:10,"http://en.wikipedia.org/wiki/Cohort_(statistics)
",jsteenkamp,2012-11-05 23:07:44
92,2012-11-03 15:09:56,"Great module - very easy to use! Currently running it through RequireJS which works perfectly.

If I create a link to an anchor tag like - 

<S_CODE_TOKEN>

This doesn't get picked up as a link. Would be good to get this sorted, as it's a very useful feature in markdown.
",guybedford,2013-01-08 14:02:30
92,2013-01-08 14:02:24,"The usual way in a markdown implementation to create links is square brackets first, parentheses second.

<S_CODE_TOKEN>
",chjj,2013-01-08 14:02:30
91,2012-10-21 23:27:05,"Say I have the following markdown:

<S_CODE_TOKEN>
## The Basics

1. Say you were to create the following website structure:

    > - myWebsite
        - src
            - documents
            - files
            - layouts

1. Install a few plugins:

    <S_CODE_TOKEN>

1. Create the following files:

    1. A layout at `src/layouts/default.html.eco` that contains:

        <S_CODE_TOKEN>

    2. And another layout at `src/layouts/post.html.eco` that contains:

        <S_CODE_TOKEN>

    3. And a document at `src/documents/posts/hello.html.md` that contains:

        <S_CODE_TOKEN>
<S_CODE_TOKEN>

Unfortunately with marked, that last sublisting will render as:

![Image](http://d.pr/i/SnQ6+)

Changing the `---` to something else say `===` make it work perfectly though... However, we need `---` in these code examples!
",balupton,2014-02-21 02:05:00
91,2012-10-22 06:51:21,"This is a side effect of marked's strict conformance with the original markdown. The list rule sees those `---` as `<hr>`'s. In the original markdown, a list will stop immediately once it sees a horizontal rule. As you pointed out, this is causing some interference with GFM rules, which the original markdown never had. I'll have to solve this dissonance somehow, maybe by allowing different list behavior in GFM. 

Let me see how github does it:

Without code block:
- item
  one
- item
  two
  \* \* *
  paragraph

---

With code block:
- item
  one
- item
  two

<S_CODE_TOKEN>

---

Markdown:

<S_CODE_TOKEN>

---

paragraph

<S_CODE_TOKEN>

testing
breaks
",chjj,2014-02-21 02:05:00
91,2012-10-22 06:52:47,"Github looks like it has a completely different set of problems with this. Here is the markdown I used above: https://gist.github.com/3930025
",chjj,2014-02-21 02:05:00
91,2012-10-22 10:15:21,"Yeah. [Robotskirt](https://github.com/benmills/robotskirt) (Sundown) is the only thing that I found that renders it as I would expect.
",balupton,2014-02-21 02:05:00
91,2012-10-22 12:06:20,"Are you referring to the markdown I posted above? I think github uses a slightly modified version of libupskirt. Surprising that sundown/robotskirt would render it correctly.
",chjj,2014-02-21 02:05:00
91,2013-01-10 04:55:11,"I should have posted earlier. I did fix this a while ago but I'm still kind of unsure about pushing the fix to release. It's still not perfect.

7d89a7167e403b4913ab0d14979bf8e38bf6671f
",chjj,2014-02-21 02:05:00
91,2013-10-02 12:08:33,"Well, please push if possible. As this is the only thing preventing us from moving from robotskirt/sundown to marked. Is there anything you'd like me to do from my end to help get this in?
",balupton,2014-02-21 02:05:00
91,2014-05-17 13:45:24,"THANK YOU!
",balupton,2014-02-21 02:05:00
90,2012-10-18 14:58:56,"First, sorry for my poor English.
One thing annoying me is 

<S_CODE_TOKEN>

will be render to

<S_CODE_TOKEN>

In the browser a space will appears between ""你好！"" and ""谢谢"" when page are rendered.
This is fine in English and those languages seperate words by space. However for Chinese, Japanese and Korean, the extra line break(which will rendered as a space) is not nessaray.

P.S. I know actually this issue is of markdown specs, but I use marked in my project, so I report this issue here. Ugly workaround exists for me, but I wish to have it as a feature of marked.
",thynson,2013-01-08 06:40:29
90,2012-10-26 02:58:27,"Similar Issue: https://github.com/chjj/marked/issues/51
",jiyinyiyong,2013-01-08 06:40:29
90,2013-01-08 06:40:27,"GFM line breaks can do this now that they've been added. Use `breaks: true`.
",chjj,2013-01-08 06:40:29
89,2012-10-13 14:28:18,"Github generates id's for each h1 element, which is super useful for sharing links. It would be great if marked allow id generation for each token lexer creates. I think it would be best if there was `marked.serialize`that takes output of `marked.lexer` and also recognized `id` and `className` attributes.
",Gozala,
89,2013-06-11 21:46:13,"Subscribing!
",claudioc,
89,2013-07-26 20:29:52,"wow, had no idea that this was such a widely accepted issue. There are a dozen people coming up with different ways to solve this :/.

Is this the central place to discuss this issue? And if so, what is the most stable feature branch for this? I'm looking to fork someone to get this feature in asap. I was making my own, based on #119 but it appears everyone seems to be doing that..

So yea, i should probably not add to the pile.
",leeola,
88,2012-10-09 13:46:38,"Added detection of AMD define() so that marked registers itself as a module in an AMD environment.  Simple, loader-agnostic test case included, but I've also tested it with curl.js and RequireJS.
",briancavalier,2013-01-03 12:35:15
88,2013-01-03 06:17:44,"Marked would become even more useful in the browser with this pull request. +1
",JaapRood,2013-01-03 12:35:15
88,2013-01-03 12:35:11,"I don't really like the idea of maintaining a separate test for AMD so I just cherry-picked the first commit.

cherry-picked in: aa5556992c2b2b5a79e5d9892d4a09a6c03bf451

Thanks.
",chjj,2013-01-03 12:35:15
88,2013-01-03 12:38:27,"Cool, thanks!
",briancavalier,2013-01-03 12:35:15
87,2012-10-08 22:54:59,"So, here is my use case :

Different calls to `setOptions()` won't recall the precedent options.
That's not what we usually expect, and it requires that we re-pass every defined option value when we want to only change one. 

The basic use case is :

<S_CODE_TOKEN>

The test suite with the _current_ marked version can be found here : http://codepen.io/zipang/pen/zIoaB
And the same test suite with marked patched is here : http://codepen.io/zipang/pen/cGkIs
",zipang,2013-01-09 19:58:32
87,2012-10-09 11:24:15,"So i reopen this issue with a working test suite..
",zipang,2013-01-09 19:58:32
87,2012-10-09 11:35:06,"To add further matter to this point, it would be very useful to have access (as read-only properties) to the current set of options and to the defaults.
This would allow some cool thing like :

<S_CODE_TOKEN>
",zipang,2013-01-09 19:58:32
87,2013-01-06 00:54:01,"Well, things have been changed a lot since the big refactor. If you want to change one global option, you can do:

<S_CODE_TOKEN>
",chjj,2013-01-09 19:58:32
87,2013-01-08 12:31:02,"@chjj Reading the code of `marked.setOptions`, its goal is to replace the default. But it would be more logical to merge it with the existing one there (otherwise the function does not add any value over `marked.defaults = {breaks: true}`). Currently, setting some defaults this way requires merging manually otherwise all other features become disabled (as `undefined` is falsy).

and calltime options have the same issue: the [code using them](https://github.com/chjj/marked/blob/master/lib/marked.js#L97) does not merge them with the defaults. As soon as you define 1 option, you have to pass them all as defaults are discarded
",stof,2013-01-09 19:58:32
87,2013-01-08 13:54:14,"> otherwise the function does not add any value over

Yes. I sort of consider `setOptions` deprecated now. Ideally you should be passing option objects in with each call anyway.

I understand you want options to be merged with the current defaults. I get that. The only thing holding me back is the notion of breaking compatibility with everyone who has used marked in the past. If someone passes in `marked(str, { sanitize: true })` when options are merged, they will be very confused when they get GFM output for example. 

I'll give it some more thought. Because at the same time, people who are using marked for the first time and used `{ sanitize: true }` are expecting GFM to be enabled as it is enabled by default.
",chjj,2013-01-09 19:58:32
87,2013-01-08 15:06:08,"this one bit me, too. i expected a merge.
",leeoniya,2013-01-09 19:58:32
87,2013-01-08 23:33:40,"@chjj : Nice code rewriting ! :)
The ability to access `marked.defaults` amongst others is really nice.

But as for `setOptions()`, it's still useless in its current form.. :)
I don't think there is a great deal of risk breaking old code that would have relied on it.. 
_but_ i can think of code relying on its current state that may break in the future if you add new options and defaults in a future version.
Let's imagine that in marked 2.8 you add a plugin mechanism to add/remove support for Markdown syntax variants, and that the current marked state is now defined with these defaults 

<S_CODE_TOKEN>

Old code using `setOptions()` but ignoring these `plugins` defaults will erase them and may break..!

That why _just merging_ the options passed as parameters with the currently defined ones makes it a safer/more usefull approach..

(ok.. my example is _very_ contrived.. but you see what i mean.. :))
",zipang,2013-01-09 19:58:32
86,2012-10-08 22:46:41,"There is something really wicked in the way `setOptions()` works (?). 

I should expect that _options_, once set, be remembered for any subsequent calls to `marked()`.

But currently, any call to `marked(txt)` (without specifying a second argument) reset options to defaults, therefore making any previous `setOptions()` useless.. 
",zipang,2012-10-09 00:42:00
86,2012-10-09 00:42:00,"I will reformulate that. The use case is more tricky and deals with partial options or new options (that do not exist right now in your branch..)
",zipang,2012-10-09 00:42:00
85,2012-10-08 14:59:29,"Well..
It occured to me that the - badly named :) - `test/fix` executable copies all the files from `test/original` and `test/new` to a freshly recreated `test/tests`.
So that.. my new test files and some recently merged tests like `test/tests/gfm_code.*` were overwritten in the process!
That's really not a big issue with my test files but i was perplexed..
I'm not sure of _which_ directory structure you will choose to maintain, but methinks that we should only keep _one_ version of these files in git and document the process to run the suite.. :)
",zipang,2013-01-08 06:45:46
85,2013-01-08 06:45:43,"Tests that are separate from the original markdown test suite belong in `test/new`. When `test/fix` is run, those are merged in with `test/original` and both put in `test/tests`. Sorry, I know it's confusing. I might change it or add something to the readme.
",chjj,2013-01-08 06:45:46
84,2012-10-04 13:01:27,"Hey @chjj ....

We recently wrapped marked.js as a ruby gem for easy integration into rails apps.
This is a similar approach to what https://github.com/rails/jquery-rails does for jquery.
Our repo is at: https://github.com/eastmedia/marked-rails

We'd be happy to maintain it - but out of deference wanted to offer you the opportunity to take over the repo if you were interested.
",nodanaonlyzuul,2013-01-08 07:19:28
84,2013-01-08 07:19:26,"Thank you for the offer. 

I'm not really a ruby guy, so you're more than welcome to maintain a ruby/rails binding for it. Thanks for bringing marked to the ruby world. :)
",chjj,2013-01-08 07:19:28
83,2012-10-02 06:02:18,"I ran into this problem while trying to add anchor tags to `token.text` for headings. I noticed that any HTML added to `token.text` was being escaped by default. It seems like this could be easily fixed by adding in a check for `token.escaped` before calling `inline.lexer`. 

I'll make a quick pull request for headings, but my guess is that this kind of check should be done anywhere you're using `inline.lexer` as someone may want to add HTML to `token.text` before parsing. 

_Quick side note:_ the `code` `token.type` does seem to do this check, not sure if it was a conscious decision to leave it out everywhere else.
",darcyclarke,
82,2012-10-02 05:59:14,"I ran into this problem while trying to add anchor tags to `token.text` for headings. I noticed that any HTML added to `token.text` was being escaped by default. It seems like this could be easily fixed by adding in a check for `token.escaped` before calling `inline.lexer`. 

I'll make a quick pull request for headings, but my guess is that this kind of check should be done anywhere you're using `inline.lexer` as someone may want to add HTML to `token.text` before parsing. 

_Quick side note:_ the `code` `token.type` does seem to do this check, not sure if it was a conscious decision to leave it out everywhere else.
",darcyclarke,2012-10-02 06:10:48
81,2012-10-01 13:53:37,"If you copy paste the following in and run `marked(theTextBelow)`:

<S_CODE_TOKEN>

It creates on huge paragraph as opposed to 3 separate paragraphs.

I'm trying to use Marked for dillinger.io, but this is a deal breaker. :/
",joemccann,2013-01-03 12:42:26
81,2012-10-01 14:36:04,"<S_CODE_TOKEN>

I don't see a problem. If a problem with something so essential existed, there would probably be multiple test failures. Marked is passing every test it should. 

I'm guessing you're having the problem mentioned in #52, where sometimes contenteditable elements and other things will replace SP, LF, or CRLF with `\u00a0` or something else weird like the unicode `NL` character. This is really the browsers fault, but I should probably land the fix for this because a lot of people seem unaware of this quirk.
",chjj,2013-01-03 12:42:26
81,2012-10-06 10:13:04,"Yeah would be great.  Would love to move over to Marked for Dillinger.io
",joemccann,2013-01-03 12:42:26
81,2012-10-30 15:50:20,"GFM bug:

<S_CODE_TOKEN>

on github gives:

A
B
C

when in marked it gives one line with three spaces
",paulmillr,2013-01-03 12:42:26
81,2012-11-03 16:10:59,"but in GFM, it designed to be use new line directly instead of use spaces in one line, i think it is not a bug

http://github.github.com/github-flavored-markdown/:

> Differences from traditional Markdown
> 
> Newlines
> 
> The biggest difference that GFM introduces is in the handling of linebreaks. With SM you can hard wrap paragraphs of text and they will be combined into a single paragraph. We find this to be the cause of a huge number of unintentional formatting errors. GFM treats newlines in paragraph-like content as real line breaks, which is probably what you intended.

so i think in marked, when i use gfm: true, it should be follow gfm style
",yyfearth,2013-01-03 12:42:26
81,2013-01-03 12:42:25,"This will either be solved with the fix referenced above, or from the addition of gfm line breaks.
",chjj,2013-01-03 12:42:26
80,2012-09-26 21:56:04,"fixed issue 79: URLs followed by HTML tag tries to include tag as part of the link
",odbol,2013-01-09 19:59:45
80,2012-09-27 08:21:13,"This was actually discussed in #56. I remember implementing in, but I'm not sure why I never pushed it. I want to check my local branches real quick. It may have had something to do with performance.
",chjj,2013-01-09 19:59:45
80,2013-01-09 19:59:43,"229c3a116343ab555da93d9616f699dd9d2ee024

Thanks.
",chjj,2013-01-09 19:59:45
79,2012-09-26 21:44:02,"<S_CODE_TOKEN>

Seems like it should not ever allow angle brackets in URLs, no?

(Funny sidenote: GitHub's parser seems to be having trouble with this as well, so I had to wrap it in code fences.)
",odbol,2012-09-27 08:15:27
79,2012-09-27 08:15:24,"The backtick code syntax exists for this reason.

<S_CODE_TOKEN>

Marked also knows not to parse the contents of `pre`.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",chjj,2012-09-27 08:15:27
78,2012-09-18 08:44:33,"Currently, there is no control on the URL used to build an IMG SRC link.
That leads to potential security issues if the URL isn't a valid image but a link to an action (CSRF attacks are made possible).

Could you add something that check if the link to the image ""looks"" like a valid link:
- I mean the resource URL must end with a known image extension (.png,.jpg,.jpeg,.gif).

AND/OR
- The media type of the response coming from the server should be a known image media type (not ideal because a request must be done to check if the link is valid : costly...).

This is a restriction as sometimes images are dynamically build by the server and don't have such an extension, or may not have the right media type, but it can definitely help to protect user against malicious injection (what I've done on a website using marked to demonstrate how easy it is to break an entire application).
",dmartinpro,2012-09-19 02:01:55
78,2012-09-19 02:01:54,"> I mean the resource URL must end with a known image extension (.png,.jpg,.jpeg,.gif).

Not all image url's end in extensions. This would be a huge limitation. Does gfm or any other markdown implementation do this?

> The media type of the response coming from the server should be a known image media type (not ideal because a request must be done to check if the link is valid : costly...).

Marked has to run serverside and clientside. This would be too slow, too much code, and too much trouble.
",chjj,2012-09-19 02:01:55
77,2012-09-18 02:57:59,"Given the following document:

<S_CODE_TOKEN>

`marked` renders:

<S_CODE_TOKEN>

... whereas I'd expect:

<S_CODE_TOKEN>

GitHub's markdown parser seems to get it right (live preview):

[link](http://example.com)
- List
",tlvince,2014-02-21 02:05:00
77,2012-09-19 02:04:19,"Bah, good catch. This is actually a part of a trickier problem. There are some easy fixes for this, but none that actually replicate _exact_ markdown.pl behavior. I really do want to replicate markdown.pl exactly here, but I'll have to find an efficient fix.
",chjj,2014-02-21 02:05:00
77,2013-01-10 04:56:37,"This was a little bit tricky to fix and I'm still not happy with it, but for now, this works: 48c6a43fb9b597510ff980e7524288df241f663d
",chjj,2014-02-21 02:05:00
77,2013-02-19 12:21:09,"The https://github.com/chjj/marked/commit/48c6a43fb9b597510ff980e7524288df241f663d commit does not seem to be ever merged to the master, and thus the latest npm-hosted marked (version 0.2.8) still does have this issue (if `[1]: http://example.com` is preceded by some whitespace).

Is that because you are still not happy enough with the fix?
",Mithgol,2014-02-21 02:05:00
77,2013-05-29 01:24:08,"@chjj What's holding this up?
",scottgonzalez,2014-02-21 02:05:00
77,2013-08-20 13:30:26,"+1 for this issue would be nice to have support for this. By the way thanks for the great work @chjj !
",lbdremy,2014-02-21 02:05:00
76,2012-09-11 14:38:09,"`marked('hello', { sanitize: true })` outputs `<p>hello</p>`

`marked('<h1>hello</h1>', { sanitize: true })` outputs `&lt;h1&gt;hello&lt;/h1&gt;`

Expected: `<p>&lt;h1&gt;hello&lt;/h1&gt;</p>`

I don't believe a string with html tags within it should be handled any different if sanitize is true.
",saracen,2012-09-11 17:40:51
76,2012-09-11 15:04:26,"Good catch. This should be fixable with a quick one-liner. I might start adding some tests specifically for different options.
",chjj,2012-09-11 17:40:51
75,2012-09-06 12:56:08,"I'm making an online markdown editor and using `marked`, it would be awesome if there's and option like: `keepMarkup: true`.

As I'm using `contenteditable=true`, I can run marked on every enter pressed and still keep the habilities to edit that line. So, basically, it's just to remove from the `replace` function this option to remove the markdown identifiers.

---

Example:

<S_CODE_TOKEN>

With `keepMarkup: true` (or whatever it's called) should print:
### ### Testing H3

And with `keepMarkup: false` (as default), should print:
### Testing H3

---

I'm writing this, so as soon as I finish my editor, if nobody had already implemented it, I will totally go for it :)
",danielfilho,2012-09-07 18:27:12
75,2012-09-07 18:27:12,"This would require the addition of a lot of conditionals to the compiler since the actual syntax is not stored in the tokens themselves. I'm hesitant to add this because I don't see many use cases for it. If anyone wants to present more arguments or ideas in favor for this, please do. For now, I'm closing this issue.
",chjj,2012-09-07 18:27:12
74,2012-09-03 16:48:51,"Here is a modified pull request that only adds support for tables that are supported (but undocumented) as part of GFM.  It is implemented in the same fashion as other GFM features.  It appears to be fully compatible with the [Sundown](https://github.com/vmg/sundown) library (which is the markdown parser GFM is based on), though it is strictly based on the [PHP Markdown Extra](http://michelf.ca/projects/php-markdown/extra/) who appears to have introduced the ""standard"".

The following:

<S_CODE_TOKEN>

Will render as:

| Header 1 | Header 2 |
| --- | --- |
| Cell 1 | Cell 2 |
| Cell 3 | Cell 4 |
",kitsonk,2013-01-03 12:26:01
74,2012-10-09 08:02:12,"Any chances that it will be merged?
",arikon,2013-01-03 12:26:01
74,2012-10-10 16:52:09,"+1 for merging this into master!
",bbailes,2013-01-03 12:26:01
74,2012-11-12 11:07:04,"+1 We need this!
",fengmk2,2013-01-03 12:26:01
74,2012-11-17 22:03:47,"+1
",davidsteinberger,2013-01-03 12:26:01
74,2012-11-17 22:05:34,"+1
",jcla1,2013-01-03 12:26:01
74,2012-11-17 23:55:37,"+1
",leeoniya,2013-01-03 12:26:01
74,2012-11-18 01:27:44,"++1
",aleafs,2013-01-03 12:26:01
74,2012-11-18 01:36:20,"Will look at this later.
",chjj,2013-01-03 12:26:01
74,2013-01-02 19:59:41,"So, is this happening? I'd love it too
",harrisj,2013-01-03 12:26:01
74,2013-01-03 12:28:09,"So, I spent a little while fixing/optimizing/refactoring @kitsonk's implementation a little bit. I'm going to consider this feature experimental for a little while. You can disable it with the `tables` option. @kitsonk, thank you for the PR.
",chjj,2013-01-03 12:26:01
74,2013-01-03 15:03:27,"Awesome. Thank you!

On Jan 3, 2013, at 7:29 AM, ""Christopher Jeffrey"" <notifications@github.com<mailto:notifications@github.com>> wrote:

So, I spent a little while fixing/optimizing/refactoring @kitsonkhttps://github.com/kitsonk's implementation a little bit. I'm going to consider this feature experimental for a little while. You can disable it with the tables option. @kitsonkhttps://github.com/kitsonk, thank you for the PR.

—
Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/pull/74#issuecomment-11842143.
",harrisj,2013-01-03 12:26:01
74,2013-01-04 22:08:56,"Just a quick test.

testing

paragraph
| one | two |
| ----- | ----- |
| 3    |   4   |

testing

<S_CODE_TOKEN>
",chjj,2013-01-03 12:26:01
74,2013-01-04 22:10:57,"Once more.

testing

| one | two |
| --- | --- |
| 3 | 4 |

testing

And one other:

paragraph

<S_CODE_TOKEN>

test

| #one | two |
| --- | --- |
| 3 | 4 |

strike ~~strike~~

code: `foo`
code: ```
",chjj,2013-01-03 12:26:01
74,2013-03-05 08:16:58,"how to escape | in gfm table?
",xiaohulu,2013-01-03 12:26:01
74,2013-03-05 08:58:34,"Best thing to do use use the HTML entity: `&#124;`
",kitsonk,2013-01-03 12:26:01
74,2013-03-05 09:11:28,"<S_CODE_TOKEN>

How to escape |  in a|a
",xiaohulu,2013-01-03 12:26:01
74,2013-03-05 10:05:54,"That appears to be an issue with the sundown parser that GitHub uses as well, so technically it is feature parity:

<S_CODE_TOKEN>

Renders as:

| one | two |
| --- | --- |
| 1 | 2 `a&#124;a` |
| 1 | a&#124;a |
| 1 | `a|a` |
",kitsonk,2013-01-03 12:26:01
74,2013-03-05 13:11:57,"Just realised, there is a way around this:

<S_CODE_TOKEN>

Will render as:

| one |
| --- |
| <code>a&#124;a</code> |

In both marked and sundown.
",kitsonk,2013-01-03 12:26:01
74,2013-05-01 09:41:22,"Is there any way to actually set the width of a table column?
",hahmed,2013-01-03 12:26:01
74,2013-05-01 10:03:45,"Via CSS...  `:nth-child` and other pseudo-selectors address this.
",kitsonk,2013-01-03 12:26:01
74,2013-05-01 10:10:52,"@kitsonk I mean through markdown so some tables will be rendered bigger or smaller depending on width % set?

I am basically thinking how good this will be for writing documents that have tables in them.
",hahmed,2013-01-03 12:26:01
74,2013-05-01 10:19:34,"It isn't part of the standard it is based on, and for good reason.  Hard coding presentation in the markup doesn't allow flexibility when it renders.  The only potential imrpovement would be to allow the specification of a class for a table, but again, none of the standards out there specify that, so I suspect @chjj wouldn't be interested in adding it, though there are some other issues here that talk about allowing some form of customisation of the output.

You can always use `<table>` if you need more flexibility.
",kitsonk,2013-01-03 12:26:01
74,2015-07-28 07:11:24,"Anyone else having trouble getting tables to render using marked?

<S_CODE_TOKEN>

returns this

<S_CODE_TOKEN>
",bdougie,2013-01-03 12:26:01
73,2012-09-02 02:49:34,"When I have something like

<S_CODE_TOKEN>

The right angled bracket gets escaped into `&gt;`
",jiewmeng,2013-01-08 06:56:17
73,2012-09-26 21:32:03,"That seems correct to me... what were you expecting? If it didn't escape the bracket, you'd have invalid HTML, right?
",odbol,2013-01-08 06:56:17
73,2012-09-27 01:17:21,"Ah... I think I know what was I thinking at that time. If you have: (a single angled bracket in a code block)

<S_CODE_TOKEN>

It gets output as 

<S_CODE_TOKEN>

I wanted something like: 

<S_CODE_TOKEN>

Looks like its more of a HTML thing? That entities in a `<pre>` are not converted into the right symbols? 

I was thining that way because when I have a valid XML, the angled braces are shown ... 

<S_CODE_TOKEN>

Generated output with braces intact: 

<S_CODE_TOKEN>
",jiewmeng,2013-01-08 06:56:17
73,2013-01-08 06:56:13,"@jiewmeng, I'm confused. I don't know why you wouldn't want to escape that angle bracket. Closing this for now. Feel free to post if you still have an issue.
",chjj,2013-01-08 06:56:17
72,2012-08-31 06:14:12,,littleweb,2013-01-08 06:57:24
72,2013-01-08 06:57:19,"Not sure what you mean. If you're referring to gfm tables or gfm line breaks, they have now been implemented. 

Closing for now.
",chjj,2013-01-08 06:57:24
71,2012-08-30 07:13:00,"I need autolink for `@` or `#` tags like twitter:

<S_CODE_TOKEN>

How about this?
",pismute,2012-09-13 08:33:33
70,2012-08-24 06:33:08,"I had the need for a project I am working on to support [PHP Markdown Extra Tables](http://michelf.ca/projects/php-markdown/extra/#table).  I think I have done everything to effectively add that to marked and am providing a patch to add the support if you wish.

The markup syntax is fairly straight forward with two main types:

<S_CODE_TOKEN>

Which would output the following:

<table>
    <thead>
        <tr><th align=""center"">Header 1</td><th align=""right"">Header 2</td><th align=""left"">Header 3</td><th>Header 4</th></tr>
    </thead>
    <tbody>
        <tr><td align=""center"">Cell 1</td><td align=""right"">Cell 2</td><td align=""left"">Cell 3</td><td>Cell 4</td></tr>
        <tr><td align=""center"">Cell 5</td><td align=""right"">Cell 6</td><td align=""left"">Cell 7</td><td>Cell 8</td></tr>
    </tbody>
</table>

<table>
    <thead>
        <tr><th>Header 1</th><th>Header 2</th></tr>
    </thead>
    <tbody>
        <tr><td>Cell 1</td><td>Cell 2</td></tr>
        <tr><td>Cell 3</td><td>Cell 4</td></tr>
    </tbody>
</table>


Let me know what you think...
",kitsonk,2012-09-03 16:04:31
70,2012-08-28 21:17:34,"+1 for merging, i recently added HTML > markdown conversion for this in my proj https://github.com/leeoniya/reMarked.js
",leeoniya,2012-09-03 16:04:31
70,2012-08-28 22:47:13,"Out of curiosity, does this support block markdown inside the table cells? For example, a `<ul>` or `<li>` inside of a single cell.
",gjtorikian,2012-09-03 16:04:31
70,2012-08-29 01:22:15,"I'll have to look at this carefully. I don't know if I really like the idea of adding table support, but at the end of the day, tables _are_ a part of GFM, albeit undocumented. Does this implementation behave similar to the GFM implementation?

Also, the heading anchors should be `@id'`s on the heading elements instead of `a/@name`'s. It would be nice if those were a separate PR.
",chjj,2012-09-03 16:04:31
70,2012-09-03 10:34:47,"@chjj it appears to be, I didn't realise that it was there myself until looking at some of the marking being parsed by GFM in my repo.  I will look though the GFM code and make my patch match exactly what is supported by GFM as well as link the support to the GFM being enabled or not.  I will take a look at your other feedback as well.

The following tables are supported by Markdown Extra Tables and also appear to be supported by GFM:

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

Which unescaped appear as:

| Heading 1 | Heading 2 |
| --- | --- |
| Cell 1 | Cell 2 |
| Cell 3 | Cell 4 |

and 

| Header 1 | Header 2 |
| --- | --- |
| Cell 1 | Cell 2 |
| Cell 3 | Cell 4 |

And it appears that it supports the alignment as well:

<S_CODE_TOKEN>

renders as:

| Header 1 | Header 2 | Header 3 | Header 4 |
| :-: | --: | :-- | --- |
| Cell 1 | Cell 2 | Cell 3 | Cell 4 |
| Cell 5 | Cell 6 | Cell 7 | Cell 8 |

@gjtorikian the PHP implementation did not support it, only span based lexing, therefore my attempt did not include block lexing.  I will take a look at the GFM implementation, realising it is there now and if it is, add it.  The problem is that there appears to be no support in the PHP implementation to identify an individual row as a block, where each new line is treated as an individual row.  reStructuredText supports this, but I haven't found a markdown ""standard"" for this.
",kitsonk,2012-09-03 16:04:31
70,2012-09-03 11:01:10,"Just putting this here that it appears the support comes from the Sundown library, which is what GitHub uses for its Markdown parsing.  At first glance it does not support block lexing and just span lexing: https://github.com/vmg/sundown/blob/master/src/markdown.c#L2124
",kitsonk,2012-09-03 16:04:31
70,2012-09-03 16:04:31,"I have reviewed the Sundown implementation and it appears to essentially follow the PHP Implementation which I based my PR on, so it should be fully compatible.

I also just realised that this pull request for some reason seems to be ""growing"" with other custom features I needed/wanted to added to my fork, which is not what I intended.  I suspect I need to migrate this over to a different branch of my fork and submit the PR from there.  I also need to make this feature conditional on the GFM feature being enabled.  So I will close the request and once I have it working, submit a new PR.
",kitsonk,2012-09-03 16:04:31
69,2012-08-19 10:00:23,"The inline tags

<S_CODE_TOKEN>

should render as 

<S_CODE_TOKEN>

and not include the spaces required to separate <S_CODE_TOKEN>`. (Just compare with this rendering).

This can be achieved by adding `trim()` in https://github.com/chjj/marked/blob/master/lib/marked.js#L459.
",sma,2013-01-10 02:31:13
69,2013-01-10 12:46:08,"Shouldn't

<S_CODE_TOKEN>

(with 2 spaces around) format to [space][backtick][space]?
",yuchi,2013-01-10 02:31:13
69,2013-01-10 12:53:59,"Not according to markdown.pl.
",chjj,2013-01-10 02:31:13
68,2012-08-17 17:25:38,,isaacs,2012-08-17 23:29:54
68,2012-08-17 22:24:20,"Hmm, I didn't know GFM supported this syntax. Anyway, if it's supported by GFM, it's fine by me. Do you mind changing the capture to a non-capturing group? e.g. `(?:``|~~~)``. It changes less and makes the merge commit look nicer. :)
",chjj,2012-08-17 23:29:54
68,2012-08-17 22:34:52,"Yeah, it was news to me as well.  Just found out because someone complained about their code blocks not being translated on npmjs.org.

Making it a non-capturing group won't work, though, because you need the capture to reference later in the regexp with the \1.

Otherwise, you could start a group with `~~~` and then end it later with `````
",isaacs,2012-08-17 23:29:54
68,2012-08-17 23:29:46,"> Making it a non-capturing group won't work, though, because you need the capture to reference later in the regexp with the \1.

Ah, right. Wasn't thinking about the backreference. Merging.
",chjj,2012-08-17 23:29:54
67,2012-07-30 23:53:56,"I had a gfm fence that I wanted colored with [highlight.js](http://softwaremaniacs.org/soft/highlight/en/description/). Unfortunately, my javascript code was being applied as PHP sometimes, Ruby other times, even though I defined my blocks as ` ```javascript`.

I eventually found out that marked is applying class names using `lang-`. highlight.js suggests using `language-` to override its ""automatic"" heuristics. That's also how HTML5 dictates it to be.

I don't know where `lang-` comes from. Google Code Prettify also suggests using `language` (though `lang-` is supported). I couldn't find requirements for [SyntaxHighlighter](http://alexgorbatchev.com/SyntaxHighlighter/).
",gjtorikian,2013-01-10 02:31:13
67,2012-07-31 02:29:32,"The proposed change would render [this code](https://bitbucket.org/davidchambers/hashify.me/src/78e8f88eb76e/src/highlight.coffee) unnecessary:

<S_CODE_TOKEN>

+1
",davidchambers,2013-01-10 02:31:13
67,2012-07-31 22:50:54,"One more thing: the gfm codeblock should change to:

<S_CODE_TOKEN>
  fences: /^ *<S_CODE_TOKEN> *(?:\n+|$)/
<S_CODE_TOKEN>

this allows me to do something like _```no-highlight_ for my code class (also valid for no-highlight
",gjtorikian,2013-01-10 02:31:13
67,2012-08-01 00:37:57,"Sounds okay to me. The only thing that worries me about this change is legacy code relying on `lang-`.
",chjj,2013-01-10 02:31:13
67,2012-08-01 00:58:36,"Could always do `lang-` and `language-` in the same class

/me shrugs
",gjtorikian,2013-01-10 02:31:13
67,2012-08-01 01:00:27,"Including both class names sounds perfectly reasonable to me. If this seems crufty, perhaps `lang-` could be deprecated and removed in a future release.
",davidchambers,2013-01-10 02:31:13
67,2012-08-01 01:18:46,"> Could always do lang- and language- in the same class
> Including both class names sounds perfectly reasonable to me.

Seems like it would be a problem for this code (and potentially other pieces of code like this) which doesn't take into account whitespace-separated class names, unless we keep `lang-` first.

<S_CODE_TOKEN>

edit: Anyway, I think I might just remove `lang-` anyway. I really don't enjoy supporting legacy features. Although it feels awkward removing something, people who rely on older versions can keep using them I guess, and when they want to upgrade they can upgrade.

edit2: Worth mentioning, this is also not the first time the class name prefix for code has been changed.
",chjj,2013-01-10 02:31:13
67,2012-08-11 20:26:40,"This is related to an issue I created: #54. In that issue I say that Highlight.js uses the bare language name as a class to specify the language, but it can use either the bare name or `language-` (see the [Heuristics section](http://softwaremaniacs.org/soft/highlight/en/description/)). Either of those is fine with me, or the more flexible approach I suggested in #54.
",adam-p,2013-01-10 02:31:13
67,2012-08-11 22:38:24,"+1 for #67

[prism.js](http://prismjs.com) also requires `language-`
",danieldietrich,2013-01-10 02:31:13
67,2012-08-31 06:31:42,"How about making the prefix configurable? To make this work with Highlight.js all you need to do is get rid of the prefix from the marked.js source and it works. But, would of course rather just do something like:

<S_CODE_TOKEN>

Or something.
",mrrooijen,2013-01-10 02:31:13
67,2013-01-10 02:47:13,"Nice one. Thanks, @chjj.
",davidchambers,2013-01-10 02:31:13
66,2012-07-21 18:46:19,"Added support for syntax, where markdown is processed inside block html tag if markdown attribute is set to 1.
For example

<S_CODE_TOKEN>
",boomyjee,
66,2012-08-04 03:30:25,"Many cheers for this, I am now using it [in my fork](https://github.com/gjtorikian/namp)
",gjtorikian,
66,2012-10-17 08:25:01,"It should be `<div markdown>` alone, given HTML5 boolean attributes. Or `markdown=""markdown""`.
",yuchi,
66,2013-01-08 07:02:31,"@yuchi is right. It should be `markdown=""markdown""`, `markdown=""""`, or `markdown`.

I'll be honest. I just think this is kind of ugly. Is there any well-known markdown implementation that uses this? I really dislike the idea of adding custom HTML attributes.
",chjj,
66,2013-01-08 18:15:43,"it's not about the idea, some people need this, and this functionality is quite standalone, so it's better to have it implemented
",boomyjee,
66,2013-01-23 02:39:56,"@chjj [PHP Markdown Extra](http://michelf.ca/projects/php-markdown/extra/#markdown-attr) supports it, so as [Maruku](http://maruku.rubyforge.org/maruku.html), [kramdown](http://kramdown.rubyforge.org/).

It exists because authors need to wrap a text block to apply some special style, ex, 

<S_CODE_TOKEN>
",hlb,
66,2013-03-06 10:51:01,"Another vote. I want to switch from php markdown to a js implementation. marked ist the best I found except this feature is missing.

As hlb said, it's needed to apply some basic styling.
",Schlaefer,
66,2013-07-06 01:42:44,"This feature has my vote as well.  I want to wrap parts of my document in `<section>` tags and use those tags to control the margins between those sections.  I can't find another js markdown parser that supports this (though many parsers in other languages seem to) and my alternative right now is to stick random `<br>`'s in my markdown, which is less than ideal.
",dillongrove,
66,2013-07-10 06:24:04,"Being compatible with PHP Markdown Extra (and several other existing implementations of this feature) is more important than a semantically better attribute value.

However, @chjj, I suppose you could support `markdown=""whatever""` and thus cover both cases: `markdown=""1""` (for the compatibility) and `markdown=""markdown""` (for XHTML flavour).
",Mithgol,
66,2013-07-28 07:40:08,":+1: This is really helpful when blog posts in enabling blog posts that utilizes grids in the posting itself. 
",kahwee,
66,2014-01-20 11:43:38,"+1
",wheresrhys,
66,2015-02-19 05:04:04,"+1
",armaanahluwalia,
66,2015-06-29 00:12:10,"+1
",xcatliu,
66,2015-08-24 12:49:25,"+1
",hgGeorg,
65,2012-07-20 01:16:52,"Sanitize doesn't do all that's required for sanitized HTML. One thing that's important when accepting user input is to sanitize URLs.

The following JavaScript:

<S_CODE_TOKEN>

Will output the following HTML:

<S_CODE_TOKEN>

I think the sanitize option would be better named `escapeMarkup`.

To solve the URL problem, I think a good path would be to have an URL filter function in the options, with a conservative URL filter as the default.
",benatkin,
65,2013-01-08 07:04:52,"Yeah, this is a good point. Removing `javascript:` pseudo-protocol from links is now on the todo list for sanitize.

> To solve the URL problem, I think a good path would be to have an URL filter function in the options, with a conservative URL filter as the default.

Also a possibility.
",chjj,
65,2013-03-06 22:55:11,"An url filter option would be great :+1: 

Now that the InlineLexer is exposed in the module i'm doing this to resolve urls, not pretty but at least a workaround until this functionality lands in some form.

<S_CODE_TOKEN>

Note that autolinks and gfm-links wont be affected since they are not passed through the outputLink method.
",jnordberg,
65,2013-10-21 20:57:38,"I also have need for some sort of uniform hook / processing for links. I'm looking to use markdown/marked in a commenting system, so there are some tight requirements for the linking features. 

In particular I'm looking to add rel=""nofollow"", increment a count whenever a link appears (so I can flag posts as hasLink for moderation) and disable img processing.

I've had good luck overriding the `outputLink` method, but it isn't consistently utilized, so I'm having to override the `output` method as well, which is far from ideal.

Could outputLink, or some other method, perhaps become a clearing house for all urls, and could it potentially be self-contained (no references to ""this"", for instance)?
",mshick,
65,2014-01-15 17:25:44,"you can use the new-ish Renderer feature (#129) to kill `javascript:` links

<S_CODE_TOKEN>
",firien,
65,2016-11-03 03:32:36,"It appears that since this discussion `sanitize: true` has been updated to remove `javascript:` links, but it lets `data:text/html;base64` links pass, which can _also_ be used to execute javascript.
",alexcjohnson,
65,2016-11-03 14:39:47,"The best way to sanitize links is to _whitelist_ desired schemes, usually just `http:` and `https:`.  People invent new schemes all the time and you can't be sure that they're all implemented securely or don't have unforeseen consequences.
",scjody,
64,2012-07-14 02:23:04,"Works in Chrome on Linux.  Haven't tried with IE yet.

Please let me know if you'd think this sort of thing would be useful for others.
",fidian,
63,2012-07-13 13:47:47,"When you parse this block of text,

<S_CODE_TOKEN>

The rendered HTML looks like this

<S_CODE_TOKEN>

Instead of what I would assume should happen with paragraphs:

<S_CODE_TOKEN>
",fidian,2012-07-13 16:34:32
63,2012-07-13 14:17:40,"Confirmed. On it. Should hopefully just be a one line fix, but we'll see.
",chjj,2012-07-13 16:34:32
63,2014-03-23 13:37:40,"hi, i am still having issues with this: if the URL provided is an email including a point in the name then it will create 2 paragraphs:

<S_CODE_TOKEN>

renders correctly, though

<S_CODE_TOKEN>

renders as 2 paragraphs. Weirdly it happens as well when trying in http://dillinger.io/, adding or removing a point in the email will close/open the paragraph. Any idea?

edit: just noted as well that if more than one email is provided then the second compiles fine:

<S_CODE_TOKEN>

compiles as

<S_CODE_TOKEN>

it doesnt seem to parse the 2 spaces after first hello.
",thibalte,2012-07-13 16:34:32
62,2012-07-09 12:58:33,"Not sure if this has been asked or not, but is there a browser (modern browsers) port of this Marked lib?  Would love to use it for http://dillinger.io.
",joemccann,2012-07-09 16:44:18
62,2012-07-09 15:55:42,"I believe marked already [works in the browser](https://github.com/chjj/marked/blob/master/lib/marked.js#L783-791).
",kitcambridge,2012-07-09 16:44:18
62,2012-07-09 16:44:18,"Marked should work in pretty much every browser (tested even in IE7/IE8). Post an issue if you run into an issue with a specific browser. The test/browser directory is a quick and dirty way to run the test suite in browsers.
",chjj,2012-07-09 16:44:18
61,2012-07-07 03:35:29,"Just wanted to let you know that we're using marked for previewing markdown on http://prose.io. In case you want to link to in-the-wild-examples. :)

Here's an example doc,  rendered by marked. 

http://prose.io/#substance/text/blob/gh-pages/README.md

Thank you! :)
",michael,2014-05-01 23:13:58
61,2012-07-09 05:49:56,"Cool. Glad you enjoy it. I can leave this open if anyone else wants to post.
",chjj,2014-05-01 23:13:58
61,2012-08-11 20:35:33,"I use Marked in [Markdown Here](https://github.com/adam-p/markdown-here). It's a Chrome, Firefox, and Thunderbird extension that lets you write email in Markdown and then render it before sending. It also supports syntax highlighting and custom styling (just in Chrome, as yet). It arose out of my own desire to have such a tool, but it seems that there are a few thousand other people who also like being able to write email in Markdown.

...And it wouldn't be nearly as good without Marked. I was so happy when I found this project -- all the other JS-MD libraries were shaky and/or didn't have GFM support. Marked is ideal.

Thanks!
",adam-p,2014-05-01 23:13:58
61,2013-05-29 01:26:36,"Marked is now a dependency for 233 other modules that are published on npm. There were 18,000+ downloads last month. I think this project has outgrown the need for an in-the-wild list.
",scottgonzalez,2014-05-01 23:13:58
60,2012-07-05 06:23:58,"The popularity of Markdown has lead to several syntax variants extending the original Markdown syntax. Marked currently supports [github_flavored_markdown](http://github.github.com/github-flavored-markdown/). In adition there is at least  [Pandoc's markdown](http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown) and [StackExchange Markdown](http://stackoverflow.com/editing-help/). The latter should be easy to implement, to support `[tag:foo]` links. Pandoc markdown may be more difficult but more useful too. See [gitit](http://gitit.net) for a use case. Maybe additional syntax variants are something for a 1.0 release?
",nichtich,
60,2012-07-13 21:59:43,"I'm interested in mixing in functionality from [PHP Markdown Extra] and [Maruku] as well as being able to turn off features, like [GitHub's flavor] where all newlines in paragraphs are changed into <br>.

PHP Markdown Extra:  http://michelf.com/projects/php-markdown/extra/
Maruku: http://maruku.rubyforge.org/maruku.html
GitHub's flavor: http://github.github.com/github-flavored-markdown/
",fidian,
60,2013-05-29 01:27:59,"This is a pretty broad request. @chjj What are your thoughts on this? Do you want issues for specific features or will most of this be handled by the renderer?
",scottgonzalez,
60,2013-05-29 01:36:41,"Actually, is this just a duplicate of #27?
",scottgonzalez,
60,2013-05-29 10:04:47,"Kind of. [Pandoc Markdown](http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown) is organized in  Markdown syntax extensions that can be turned on and off. It would be great to al least share names and definitions of extension between different Markdown parsers.
",nichtich,
60,2013-06-28 01:33:28,"Hi everybody, Is there any one working on Pandoc Markdown integration?
",jonatas,
59,2012-07-05 06:13:59,"The handling of multiple underscores in words is not consistent. [github_flavored_markdown](http://github.github.com/github-flavored-markdown/) handles this differently than the original MarkDown syntax, so does marked. Try this:

<S_CODE_TOKEN>

This bug affects https://github.com/prose/prose/issues/146 see there for how to reproduce it.
",nichtich,2013-01-08 07:09:56
59,2013-01-08 07:09:54,"What should I see as the output?

This is what I see currently:

<S_CODE_TOKEN>

Looks correct as far as I can tell. Closing for now.
",chjj,2013-01-08 07:09:56
59,2013-03-26 20:24:58,"It works fine for single underscore, not for double underscores `__`, example:
perform__complicated__task

<S_CODE_TOKEN>
",tkrotoff,2013-01-08 07:09:56
58,2012-07-02 00:58:42,"GitHub flavored markdown supports syntax highlighted code like this:

<S_CODE_TOKEN>

This is not supported by marked. It should either state this or (better) implement it.
",panzi,2012-07-02 02:41:55
58,2012-07-02 02:37:52,"Synax highlighting _is_ already supported. Take a look at the `highlight` option. It works great in conjunction with [`highlight.js`](http://softwaremaniacs.org/soft/highlight/en/).
",TooTallNate,2012-07-02 02:41:55
58,2012-07-02 02:41:55,"What TooTallNate said. Marked will never include its own syntax highlighter, but there are interfaces for using a highlighter with marked. See the readme.
",chjj,2012-07-02 02:41:55
58,2012-07-02 11:58:27,"Ok, but it does not support the syntax that triggers syntax highlighting:

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

`javascript` lands in the output. It would be ok for me if the language parameter would just be stripped. And the shell app `marked` has no `--highlight` option.
",panzi,2012-07-02 02:41:55
58,2014-05-21 21:55:07,":+1:
",ELLIOTTCABLE,2012-07-02 02:41:55
58,2014-07-17 14:15:41,"+1
",jklontz,2012-07-02 02:41:55
58,2015-06-04 21:56:19,"+1
",ricardoquesada,2012-07-02 02:41:55
58,2016-05-03 00:13:55,"+1
",Fogetti,2012-07-02 02:41:55
57,2012-06-29 09:31:52,"We need to extend marked with `[[reference]]` syntax, that woud work in the same way, like highlight (via external function call)

https://github.com/nodeca/ndoc/blob/master/syntax.md#short-links

Could you explain, how to monkeypatch marked, to add this inline tag?
",puzrin,2014-10-23 11:03:26
57,2014-06-26 11:28:59,"I am also looking into extending marked.

I am trying to implement a new inline rule, which is supposed to translate anything like
`[A]something` into `<span class=""chord"">A</span>something` and came up with this:

<S_CODE_TOKEN>

So I am injecting a new rule into the lexer and prototyped the replace function I am looking for. Unfortunately, this seems not to be enough. What am I missing? Would be grateful for any hints.

EDIT: I haven't thoroughly looked into the code when I posted this, I suspected the rules to act like a chain, but it seems they don't. In order to make this work, some lines need to be added to the InlineLexer.prototype.output function, which is not actually possible without modifying the code. Though I might look into this more later, I want to just note down one finding: the function InlineLexer contains a line `this.rules = inline.normal;`. I suggest changing it to `this.rules = InlineLexer.rules || inline.normal;`, so changes made trough the exposed rules are accessible from within marked (as mentioned above, this does not help much though).
",madmuffin1,2014-10-23 11:03:26
57,2014-08-24 10:22:10,"In my app I ended up pre-parsing the markdown using regex to add custom syntax, but I'd love to have this built in! 
",octalmage,2014-10-23 11:03:26
57,2014-10-21 13:00:40,"+1 very needed feature!
",elennaro,2014-10-23 11:03:26
57,2014-10-23 11:03:26,"Closed - not actual anymore. We developped https://github.com/jonschlinkert/remarkable with pluggable syntax.
",puzrin,2014-10-23 11:03:26
56,2012-06-20 16:33:49,"Test case:

<S_CODE_TOKEN>

This is quite common when a bit of markdown contains some inline HTML.

A simple workaround that is probably not ideal or free of edge case failures:

<S_CODE_TOKEN>
",isaacs,2014-02-23 13:26:07
56,2012-06-21 18:50:24,"> A simple workaround that is probably not ideal or free of edge case failures

I'd definitely be really hesitant to add that. If we're going to fix it, I would want to fix it the right way (but even that might be slightly awkward). I realize regular html links containing the url are pretty common markup, but the thing I don't like about this is that it requires marked to be too smart and break its own rules for a special case. ... But then again, markdown is essentially just a giant string of special cases. ;)

One possibility would be to change the inline.url regex to properly stop before the angle brackets. It would produce a redundant nested link, but wouldn't require any magic happening. The html would be malformed, but it would probably render in every browser. 
",chjj,2014-02-23 13:26:07
56,2012-06-21 20:48:42,"Yes, the workaround is working for me now, but it's not intended as a correct or general fix.

The inline.url parser should do two things, I think:
1. Recognize that `<` is a delimiter, so stop parsing the URL if it sees that.
2. Do not hyperlink any URLs that are immediately preceded by `<a[^>]*>`.

An even better option would be for the inline parser to keep track of whether or not it's inside of an `<a>` tag at any given point, and only hyperlink urls found outside of `<a>` tags.
",isaacs,2014-02-23 13:26:07
56,2012-06-22 17:11:07,"> Recognize that < is a delimiter, so stop parsing the URL if it sees that.

Yeah, I think I'll add this no matter what.

> An even better option would be for the inline parser to keep track of whether or not it's inside of an `<a>` tag at any given point, and only hyperlink urls found outside of `<a>` tags.

Yeah, that would be ideal. I've been meaning to rewrite the inline lexer in such a way that it can create an array of tokens (instead of compiling to html on the spot) without any performance hit. Being able to keep track of whether we're inside a link or not would also be nice. I'll try to figure out a clever way to implement it when I get some time. When I think about it, as long as nothing comes with a noticeable a performance hit, I think I'm okay with implementing it. I just don't want to stray from the original reason I created marked.
",chjj,2014-02-23 13:26:07
56,2012-06-22 18:53:15,"> When I think about it, as long as nothing comes with a noticeable a performance hit, I think I'm okay with implementing it. I just don't want to stray from the original reason I created marked.

It's pretty typical for parsers to give up a little bit of performance for the sake of correctness, and usually it's worthwhile.  But I completely understand if you want to err on the side of speed in some cases.  Part of the reason I prefer to use marked is because it's so fast and the lexed output is very simple.  If I wasn't dealing with wordpress garbage pseudo-html, it wouldn't be an issue :)
",isaacs,2014-02-23 13:26:07
56,2013-02-19 11:25:22,"Is this issue fixed or was the 31c9b494b86058b1f30603a994ad642551384044 fix partial?

If this issue is not fixed entirely yet, then what does remain to be done?
",Mithgol,2014-02-23 13:26:07
55,2012-06-12 03:11:43,"I would expect the following input:

<S_CODE_TOKEN>

To produce an unordered list followed by an ordered list, but instead it produces a single unordered list (with a bit of funky spacing).  Inserting an extra line break between the two resolves the issue.

GitHub handles this case as expected.
- list
- list
- list
1. list
2. list
3. list
",bunkat,2013-01-10 10:01:36
55,2012-06-12 03:21:13,"This is accurate. markdown.pl behaves this way as well.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I guess we could move this behind the `pedantic` flag if it really bugs people, but if you want to write portable markdown you can't rely on it. Marked does however give you the luxury of separating them if you use 3 line feeds:

<S_CODE_TOKEN>
",chjj,2013-01-10 10:01:36
55,2012-06-12 04:11:54,"Not sure what the scenario is where somebody would expect the two lists to be combined, just seems like a bug in markdown.pl.  In any case, shouldn't it be fixed as part of the `gfm` flag since GitHub has fixed this particular issue?  In the current state, using the `gfm` flag doesn't produce the same markup as GitHub in this particular instance.
",bunkat,2013-01-10 10:01:36
55,2012-06-12 04:17:50,"> In any case, shouldn't it be fixed as part of the gfm flag since GitHub has fixed this particular issue?

It's not listed as a part of GFM. I don't see why it should be behind the `gfm` flag. It would make more sense to put the markdown.pl behavior behind the `pedantic` flag.
",chjj,2013-01-10 10:01:36
55,2012-06-12 04:20:22,"Either way works for me.  Thanks a lot for the library!
",bunkat,2013-01-10 10:01:36
55,2012-07-14 01:42:28,"I just was writing up a quick reference and used the following example
- This is a bulleted list
- Start your lists with asterisks
- You can use plus symbols
- Or hyphens
1. Numbered lists are just as easy
2. Just start with a number and a period
3. The actual number itself does not matter
4. This will show up as ""4"" when viewed as HTML

<S_CODE_TOKEN>

I would second the vote for pedantic flag since it looks like another instance where the perl version didn't adequately cover an edge case.
",fidian,2013-01-10 10:01:36
54,2012-06-10 14:26:55,"I'm using marked together with [highlight.js](https://github.com/isagalaev/highlight.js), but there's a bit of snag: highlight.js (and/or its styles) requires the plain name of the language (like `""python""`) as a class on the `<code>` tag, but marked uses class names that look like `""lang-python""`. I hacked around this in my copy of marked.js by adding the class name  -- [you can see the change here](https://github.com/adam-p/markdown-here/blob/master/src/common/marked.js#L555) -- but it'd be nicer if marked let me specify additional/alternative class names. 

I suggest that `options.highlight()` be allowed (optionally -- use a type check) to return an object that has two properties: the code string (i.e., what is returned now) and an array of class names to be applied. I can certainly code it and submit a pull request, if desired.

(For completeness: I could alternatively ask highlight.js to make the class names it expects be configurable. But it's not clear how to do that in any sane way -- the classes are explicit in the CSS. Making the change in marked feels like the correct approach anyway.)

Thanks for the great tool. It was utterly essential in the development of my Markdown-email browser extension.
",adam-p,2013-01-10 02:52:17
54,2012-08-24 01:15:57,"+1
",micmcg,2013-01-10 02:52:17
54,2012-10-31 11:11:03,"+1
",pronebird,2013-01-10 02:52:17
54,2013-01-10 02:52:15,"Fixed with: 83328261a1ba83e793d9b7bf28781554b931bc14
",chjj,2013-01-10 02:52:17
53,2012-05-22 18:43:47,"Any chance you could add support for strikethrough? I know it's not in the official Markdown spec but it's something I need for my application.
",KyleAMathews,2013-01-03 14:39:13
53,2012-06-13 05:56:09,"Just came across this issue as well.  Clearly github flavored markdown ~~doesn't support~~ supports strike throughs. :)
",rymohr,2013-01-03 14:39:13
53,2012-06-13 16:17:04,"Haha! Oh, I feel really ~~silly~~ excited now! Thanks
",KyleAMathews,2013-01-03 14:39:13
53,2012-06-13 16:19:27,"Oh oops, I see what you were saying @islandr now. Github supports strikethroughs but marked.js doesn't. 
",KyleAMathews,2013-01-03 14:39:13
53,2013-01-03 12:55:11,"Right. Don't know how I missed this. Will add it eventually.

`~~testing~~`

~~testing~~
",chjj,2013-01-03 14:39:13
52,2012-05-20 17:25:05,"As you know from my ticket, contneditables will convert spaces to `\u00a0`. From: http://www.fileformat.info/info/unicode/char/A0/index.htm

It's decomposition is actually a `\u0020`, or, a space. It'd be nice if Marked checked for both of those characters since they mean almost the same thing. I can't imagine someone wanting to keep a no-break space but convert spaces.

Thoughts?
",OscarGodson,2013-01-03 12:26:00
52,2012-05-20 17:54:20,"I guess we should check for `\u2424` as well? Are there any other weird unicode characters?

Probably fixed with this in `block.lexer`:

<S_CODE_TOKEN>
",chjj,2013-01-03 12:26:00
52,2012-05-21 02:28:48,"Probably. I'd say whatever would be the expectation since I think almost everyone would be using this in some sort of automated fashion where special characters would make it in there depending on browser, platform, even language. This is for sure the best parser used to date and I've tried quite a few popular ones, so I respect your judgement on this stuff. :)
",OscarGodson,2013-01-03 12:26:00
51,2012-05-11 09:08:52,"GFM line breaks are not supported :

Line 1
Line 2

Sould be rendered as

<S_CODE_TOKEN>

When the gfm flag is set to true.
",PlanetIrata,2013-01-03 12:44:54
51,2012-10-06 12:12:55,"I do hope there's an option given about using GFM-style line breaks. That is always better to be compatible to someone else. And usually people hit Enter for one time to make line break, isn't it?
I like to use markdown to write notes about programming in Chinese. And I really appreciate to use Markdown to markup my notes. But each Markdown implementation just require two `  `s to make line breaks. That's really inconvenient for me. Please help me.
",jiyinyiyong,2013-01-03 12:44:54
51,2012-10-19 13:03:58,"you can force a newline by converting each ""\n"" => ""  \n"". but this quick and dirty method overrides the `gfm` option

<S_CODE_TOKEN>
",firien,2013-01-03 12:44:54
51,2012-10-19 14:55:22,"That's a really, really dirty option that will break all your paragraphs and lists and most everything else.
",midnightmonster,2013-01-03 12:44:54
51,2012-10-19 15:01:05,"I think markdown should use a `\` and line end to hint the following line break is converted to a space rather than use space space to make the line break.
",jiyinyiyong,2013-01-03 12:44:54
51,2012-10-19 15:30:34,"the double-space line breaks also bite when your editor is set to auto-trim-trailing during save. `<br>` is a simple enough solution to this though, with the added bonus of also working within a single `h1-6` header.

i agree that a single `\` or `\n` at EOL would have been a much better solution for the original spec.
",leeoniya,2013-01-03 12:44:54
51,2012-10-19 16:29:59,"i agree it's **very** dirty. I wanted to run the tests quick but `node test` (on a clean master clone) threw an error immediately. It seemed to do the job in some quick browser tests so i figured i'd throw it up here.

GitHub's [GFM](http://github.github.com/github-flavored-markdown/) does something [similar](https://gist.github.com/118964), ~~though they seem to be checking for 2 `\n`~~

<S_CODE_TOKEN>
",firien,2013-01-03 12:44:54
51,2012-10-19 16:49:19,"Thanks--I didn't know where to find GFM's code. That can be directly translated into JS and will produce the same behavior. Looks something like:

<S_CODE_TOKEN>

That's not integrating with the gfm setting at all, but it will duplicate the behavior of the original GFM.

(Edited to add global flag on big regexp; edited to add multi-line flag. This code actually works now: the issue @stof mentioned is fixed my the multiline flag.)
",midnightmonster,2013-01-03 12:44:54
51,2012-11-27 11:44:01,"@chjj is there any plan to fix this issue ? It is rather annoying for me as I'm using marked in an editor preview whereas the Markedown will later be rendered server-side by Sundown (which handles the GFM line-breaks)
",stof,2013-01-03 12:44:54
51,2012-11-27 14:30:12,"@midnightmonster your big regex should not be anchored at the beginning of the string, otherwise it will only handle the first newline of the string instead of handling all of them.

The working solution is:

<S_CODE_TOKEN>
",stof,2013-01-03 12:44:54
51,2012-12-09 14:47:43,"[github-flavored-markdown](https://npmjs.org/package/github-flavored-markdown) implemented it with

<S_CODE_TOKEN>
",buttjer,2013-01-03 12:44:54
51,2012-12-10 17:33:35,"@mbuttjer that code just implements the original markdown line breaks.
",midnightmonster,2013-01-03 12:44:54
51,2012-12-24 20:00:29,"I think it is slightly misleading to state that ""marked also implements GFM features"" in the README. I found - after integrating marked into my application - that all GFM features were supported _except_ the most prominent one (also the one I had come looking for): GFM line-breaks.

Since line break handling is the biggest difference between GFM and strict Markdown (as stated on the [GFM page itself](http://github.github.com/github-flavored-markdown/)), I think marked should either implement it, or else **at least mention the lack of support for this feature (and perhaps link to this issue) in the README**.

@midnightmonster thanks for that quick hack.
",vickychijwani,2013-01-03 12:44:54
51,2012-12-24 20:07:04,"This feature was left out because markdown already has a brilliant way of dealing with hard line breaks. I feel like I've mentioned this before. Of course it would be easy to implement, but I would want it disabled by default. We'd have to change the options around, because I really don't want a mess of options like: `{ gfm: true, gfmBreaks: true }`.
",chjj,2013-01-03 12:44:54
51,2012-12-24 20:17:43,"@midnightmonster there seems to be some slight error with your hack. Take for example this input:

<S_CODE_TOKEN>

On GitHub, this is rendered as expected:
**foo**
bar
baz

But using marked and your hack, it renders as:
**foo** bar
baz

~~I think it might be because the code posted by @firien is from an old version of GFM. The latest version of the code (taken from [here](https://github.com/github/github-flavored-markdown/blob/gh-pages/code.rb#L17-L20)) is~~:

<S_CODE_TOKEN>
",vickychijwani,2013-01-03 12:44:54
51,2012-12-24 20:25:39,"Oops, sorry. Forgot to compare the last commit date on that repository with the gist @firien posted from. So if that gist is indeed the latest version, there must be some other error.
",vickychijwani,2013-01-03 12:44:54
51,2012-12-25 01:08:56,"I agree with vickychijwani

> The biggest difference that GFM introduces is in the handling of linebreaks. With SM you can hard wrap paragraphs of text and they will be combined into a single paragraph. We find this to be the cause of a huge number of unintentional formatting errors. GFM treats newlines in paragraph-like content as real line breaks, which is probably what you intended.
> http://github.github.com/github-flavored-markdown/

I would not call it GFM. Call it chjj markdown ;-)
",buttjer,2013-01-03 12:44:54
51,2012-12-25 13:45:26,"Ok, so I've modified @midnightmonster's workaround to resolve the error mentioned in [my comment earlier](https://github.com/chjj/marked/issues/51#issuecomment-11665460). Basically I've added `\>\*` to the regex to fix GFM line breaks when the line starts with a `>` (blockquote) or `*` (emphasized / strong text).

<S_CODE_TOKEN>

The gist posted on the GFM page ([`gfm.rb`](https://gist.github.com/118964)) doesn't seem to be canonical GFM anyway, since GitHub uses [redcarpet](https://github.com/vmg/redcarpet) for actually rendering GFM on the site, and redcarpet is written in C (for instance, the C code for GFM line breaks is [here](https://github.com/vmg/redcarpet/blob/master/ext/redcarpet/html.c#L302-L326)).
",vickychijwani,2013-01-03 12:44:54
51,2013-01-03 12:44:53,"Added in 7aa7934c90cd61b4a696a32d7c618c77c4f5cd66
",chjj,2013-01-03 12:44:54
51,2013-01-13 11:45:36,"A bit strange here, but isn't `gfm: true` was enabled by default?
https://github.com/chjj/marked#usage

<S_CODE_TOKEN>
",jiyinyiyong,2013-01-03 12:44:54
50,2012-05-11 06:05:21,"I.e.

<S_CODE_TOKEN>

becomes

| First Header | Second Header |
| --- | --- |
| Content Cell | Content Cell |
| Content Cell | Content Cell |
",OscarGodson,2013-01-03 12:43:18
50,2012-07-08 04:11:42,":+1: would definitely like to see this.
",eliperelman,2013-01-03 12:43:18
50,2012-07-08 23:57:17,"+1
",bootstraponline,2013-01-03 12:43:18
50,2012-08-17 18:44:09,"The ce8d77a isn't working for me :/

The table content is not rendered
",danielfilho,2013-01-03 12:43:18
50,2012-08-17 23:36:54,"> The ce8d77a isn't working for me :/

I did say it was a naive implementation. It's just a first attempt. There's a lot of questions I have about it, e.g. should we allow rendering of block elements inside the table cells? HTML says we should, but I don't know if other markdown table implementations allow it.
",chjj,2013-01-03 12:43:18
50,2012-08-20 13:49:00,"Thank you @chjj, looking forward to see `marked` supporting tables.

I will release today a webapp markdown editor that uses `marked` to supply a preview.
",danielfilho,2013-01-03 12:43:18
50,2012-10-15 08:40:08,"+1， two months now and still waiting
",zhaopuming,2013-01-03 12:43:18
50,2012-11-28 11:20:59,"+1 would be really nice.
",mbacou,2013-01-03 12:43:18
50,2012-12-25 00:16:12,"+1 would be great
",neekey,2013-01-03 12:43:18
50,2013-01-03 12:43:17,"Added.
",chjj,2013-01-03 12:43:18
50,2013-01-03 12:43:47,"See #74 for more info.
",chjj,2013-01-03 12:43:18
49,2012-04-30 20:08:46,"<S_CODE_TOKEN>
",joshrtay,2013-01-08 07:12:58
49,2012-04-30 20:23:05,"Sorry, could you name the specific tests that are failing? (Don't mind the gfm_break test. It will always fail, as I've decided not to include gfm line breaks.)

This is what I see:

<S_CODE_TOKEN>
",chjj,2013-01-08 07:12:58
49,2012-05-01 16:52:12,"It was the gfm_break test.

Shouldn't gfm mode include line breaks?
",joshrtay,2013-01-08 07:12:58
49,2012-05-02 16:32:14,"Can you add a way to turn on gfm line breaks?
",joshrtay,2013-01-08 07:12:58
49,2013-01-08 07:12:56,"Added.
",chjj,2013-01-08 07:12:58
48,2012-04-26 20:20:29,"This allows to specify a url formatter function. Example:

<S_CODE_TOKEN>
",jnordberg,2013-01-08 07:14:33
48,2012-05-21 15:09:49,"@chjj any thoughts on this?
",jnordberg,2013-01-08 07:14:33
48,2012-06-03 00:25:30,"Consider this another vote for this feature — any interest in accepting the commit, @chjj?

Dave
",dherman,2013-01-08 07:14:33
48,2012-07-20 01:18:58,"[This is needed to generate sane HTML, too.](https://github.com/chjj/marked/issues/65)
",benatkin,2013-01-08 07:14:33
48,2013-01-08 07:14:20,"Going to redirect any discussion on this to #65. I'm not going to accept the PR because I'd rather have it be an option.
",chjj,2013-01-08 07:14:33
47,2012-04-22 23:02:25,"It would be nice to be able to have the ""highlight"" callback function return asynchronously, as it's the only way to integrate with something like [`pygments`](https://github.com/pksunkara/pygments.js). I realize that this means that `marked` itself would have to have a new API that returns asynchronously, but that's probably ok. Thoughts?
",TooTallNate,2013-03-18 12:17:13
47,2012-04-24 03:52:59,"I don't know if I'd want to implement this. Any other highlighter you can use from inside node is going to be synchronous. It would really be a lot of changes for one specific case.

You could probably hack it into the exposed function easily enough: (warning, untested)

<S_CODE_TOKEN>
",chjj,2013-03-18 12:17:13
47,2012-07-26 02:34:58,"I had the same issue, and your code above appears to work. 

I went ahead and got them working together, in case anyone else wants to see, the code is [here](https://github.com/adamchester/gistblog-express/blob/691dd5453e9869023ad32fad05855c7780f80c00/lib/marked-async.js) and test sample usage [here](https://github.com/adamchester/gistblog-express/blob/6e41bf0d64f648a2f16aff1cc2ff46665900887f/lib/gist-converter.js)
",adamchester,2013-03-18 12:17:13
47,2013-01-07 16:05:39,"@chjj Would you accept a pull request if I added implement the async API?
",fortes,2013-03-18 12:17:13
47,2013-01-08 07:16:32,"@fortes, it depends on how you implement it. I might add it in the way mentioned above, but an entire refactor of the parser is not appealing to me, and I worry about any overhead that the async refactor might add.
",chjj,2013-03-18 12:17:13
47,2013-01-08 23:12:11,"@chjj I'll take a crack at it when I get some spare cycles, and you can see what you think. I'm not interested in maintaining a fork, so if it's not something that will go into master, I'll come up with another solution for [fortes/enfield](http://github.com/fortes/enfield).

Great work on marked, btw. Easily the best of the node.js markdown parsers.
",fortes,2013-03-18 12:17:13
46,2012-04-21 13:00:54,"Input:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

Expected:

<S_CODE_TOKEN>
",gagle,2012-04-21 21:46:11
46,2012-04-21 21:38:37,"Wow, I arrogantly thought no one would find a problem with the list implementation. You proved me wrong, @Gagle. :)

Anyway, I've found the problem. I'll push a fix tonight. 

I imagine it was only found just now because it's not _that_ likely to occur. The problem has to do with a lookahead in the list rule mistaking `**` for a list bullet, when it's not. While it doesn't create a new list item from that, it does think the list keeps going instead of ending it like it should. If you want a temporary fix, you can use `__` instead of `**`.
",chjj,2012-04-21 21:46:11
46,2012-04-21 22:32:08,"Perfect! thanks.
",gagle,2012-04-21 21:46:11
45,2012-04-21 00:05:09,"Re: https://github.com/OscarGodson/EpicEditor/issues/75

Think i figured it out. Marked doesn't know what to do with literal `\n` like this:

<S_CODE_TOKEN>

I think this is in fact a bug with Marked since in this example, native `JSON.parse` will convert that and to get it to work with Marked we'd have to go and add `\n` (the text, not literal) in place of it. What do think?
",OscarGodson,2012-04-21 00:26:55
45,2012-04-21 00:26:06,"There is no such thing as literal or non-literal newlines/line-feeds at runtime. Newlines are just bytes at runtime.

Your line feed there is being escaped by the backslash, which is why you're able to (syntactically) create a multiple-line string. A newline is not actually added to the string because it had to be escaped in order to do that. It's just a syntactic feature of javascript. 

This is the case anywhere else in javascript too:

<S_CODE_TOKEN>
",chjj,2012-04-21 00:26:55
45,2012-04-21 00:26:55,"Awh, I see, ok thanks!
",OscarGodson,2012-04-21 00:26:55
44,2012-04-13 20:17:51,"Part of the Github Flavored Markdown is to support output of links that will link to users, commit sha's, repo, and issues. This is my understanding, when reading through showdown.js which is included in 'github-flavored-markdown' available on NPM. Do you have any plan for the future to add these features to the parser?
",aackerman,2015-06-13 09:56:14
44,2012-04-13 21:18:14,"I don't like this aspect because it's specific to one website. Don't get me wrong, I love github, but it assumes that the user of marked uses github as well.
",chjj,2015-06-13 09:56:14
44,2012-05-11 19:24:49,"@chjj FWIW. I agree with your opinion here on automatic link insertion for GitHub specific links. If this were implemented we would probably need to somehow work around it for EpicEditor since it is not designed to be used specifically with GitHub.

RE: https://github.com/OscarGodson/EpicEditor/pull/105
",johnmdonahue,2015-06-13 09:56:14
44,2013-05-29 01:33:54,"GFM also runs in a specific context. While the `@user` syntax always runs, things like `#issue` and `SHA1234` syntax requires passing a repo as the context. You probably don't want to add anything to marked for this.

related: #107
",scottgonzalez,2015-06-13 09:56:14
44,2013-08-06 21:53:51,"+1
",carlos8f,2015-06-13 09:56:14
44,2013-08-06 23:14:50,"For anyone interested I wrote a small module to accomplish this: https://npmjs.org/package/gfm-linkify
",carlos8f,2015-06-13 09:56:14
44,2013-12-14 14:42:45,"IMO, it would be great to see this as an option that could be enabled.
",jklontz,2015-06-13 09:56:14
44,2014-08-19 19:07:48,"Bump. Should this be closed? Or implemented? Or both?
",anubiann00b,2015-06-13 09:56:14
44,2015-02-24 03:34:04,"Can we close this? We don't want this in the core framework, and there's a package for this already. Let's try to clean up issues.
",anubiann00b,2015-06-13 09:56:14
44,2015-06-03 18:30:19,"Autolinking would be useful. Especially since there being an option for `gfm` in the options kind of made me expect all of GFM to be supported.
",RangerMauve,2015-06-13 09:56:14
43,2012-04-13 18:48:38,"Would it be possible to have the option of adding no follow for all output anchor tags?

If this is relatively trivial to add, it would be nice. 

Otherwise, it's not that important and I could just hack it directly onto the links.
",aackerman,2015-01-25 14:34:37
43,2012-04-13 21:21:12,"The problem is, `@rel=nofollow` might not be suitable for some links, and there's no way to tell really, unless marked only adds `rel=nofollow` for links that contain a full URL. Right now, I prefer that an option have a really good reason to justify its existence.
",chjj,2015-01-25 14:34:37
43,2013-04-04 13:00:03,"Would be nice to have an option for switching it on or off...
",lazerscience,2015-01-25 14:34:37
43,2013-04-07 02:43:24,"@lazerscience @theron17 the renderer feature would be a good choice. cc @chjj #129 
",lepture,2015-01-25 14:34:37
43,2013-04-07 07:39:39,"@chjj Thanks looks promising, will look into that!
",lazerscience,2015-01-25 14:34:37
43,2015-01-25 14:34:37,"This problem was solved with custom renderers, http://jsbin.com/niwidavido/1/edit?js,output.
",aackerman,2015-01-25 14:34:37
42,2012-04-06 07:55:06,"While your readme shows you can fully support a highlighter by wrapping marked and inspecting the tokens manually, it would be more performant to not have to traverse the tokens another time to add highlighting.  The usage also becomes very simple for users:

<S_CODE_TOKEN>
",selfcontained,2012-04-06 20:48:41
42,2012-04-06 15:48:05,"I erroneously included commit _7f57e5b7_ in this pull request.  It's a one line change for setOptions to return _marked_.  I'm happy to redo this pull request to remove that, just let me know.
",selfcontained,2012-04-06 20:48:41
42,2012-04-06 20:48:38,"I kind of like this. I originally had the `token.escaped` feature because I wanted marked to be more modifiable, but now that marked can take an options object, this seems like a smarter idea. I think I might change it around a little bit though.
",chjj,2012-04-06 20:48:41
42,2012-04-06 21:28:17,"Cool, I dig the callback approach you took passing in the language.
",selfcontained,2012-04-06 20:48:41
41,2012-04-06 07:46:32,"allows for...

<S_CODE_TOKEN>
",selfcontained,2012-04-06 20:48:41
41,2012-04-06 21:29:23,"thanks for this.
",selfcontained,2012-04-06 20:48:41
40,2012-03-19 13:05:10,"Hi,

Would it be possible for you to mark tables using ""table"" instead of ""paragraph"" at the lexer? This would make [my work](https://github.com/bebraw/ghw) a lot easier. I use your lexer to apply some custom transformations to the source and then output as HTML using your parser. Having tables marked properly would make my life a lot easier. :)
",bebraw,2012-03-21 18:08:15
40,2012-03-21 00:14:52,"What do you mean by table? I figure you're referring to the html element, but those are considered html blocks by the lexer.
",chjj,2012-03-21 18:08:15
40,2012-03-21 05:26:15,"Hi,

Thanks for the swift reply and sorry for being unclear. Here's an [an example](https://github.com/bebraw/jswiki/wiki/Game-Engines) of what I'm talking about. I guess the GitHub guys must be using some custom table plugin.

I'm not sure if this is something you should support natively. If you think so, great. Otherwise I probably could use some nice extension mechanism to hook into the lexer to avoid certain nastiness.
",bebraw,2012-03-21 18:08:15
40,2012-03-21 18:08:14,"This is something people have been asking for. It might be good to keep everything contained in one issue: https://github.com/chjj/marked/issues/27 .
",chjj,2012-03-21 18:08:15
40,2012-03-22 06:19:15,"Gotcha.

I noticed you that had done some experiments with an extension API. Any timeline on this? I don't mind helping out a bit if you can point out how. I really wouldn't mind getting those tables to work properly. :)
",bebraw,2012-03-21 18:08:15
40,2012-03-22 07:03:47,"The extension API might not happen. The more I think about it, the more unrealistic it is. Take for instance the `text` regex for the inline rules: `text: /^[^\0]+?(?=[\\<!\[_*`]| {2,}\n|$)/`. If any inline rule is ever added, this regex needs to be updated accordingly to work properly. There's a lot of other little annoyances that would make it difficult. But, eventually, f I can dream up a nice clean interface to make marked extensible, without hurting performance, I will do it.
",chjj,2012-03-21 18:08:15
40,2012-03-22 07:19:01,"Do you think some kind of hierarchical scheme would work? As I mentioned earlier tables get parsed as ""paragraphs"" now. If there was a way to attach another lexer to the context of paragraph it would do the trick I think.

This is sort of what I do in my current solution at ghw. I just check if the lexer gives my a text or a paragraph and then apply my rules in a certain order. Actually now that I think of it I can probably hack tables there using the same scheme. Need to give that a go to see how ugly it gets. :)

Thanks for the feedback. :)
",bebraw,2012-03-21 18:08:15
39,2012-03-15 18:00:56,"The executable could be globally installed.
",kapouer,2012-03-15 19:41:14
39,2012-03-15 19:03:13,"This is wrong. When you install a module globally, binary from `/usr/local/bin` (or whatever the prefix is) is a symlink to a file in `/usr/local/lib/node_modules`. Due to how node resolves dependencies (it resolves symlinks), it finds the correct file when you specify a relative path in the binary.
",mmalecki,2012-03-15 19:41:14
39,2012-03-15 19:41:14,"I tend to maintain all my modules this way. The script always assumes it's in the same location in the tree (`/bin`). If it can't make that assumption, it can't do a lot of necessary things. I suppose it could do `require('marked')` and if it needed to access any files in the tree, do `require.resolve('marked') + '/file'`, but that would get pretty tiresome.
",chjj,2012-03-15 19:41:14
39,2013-09-21 14:19:10,"2 years later i realize how wrong this was ;)
",kapouer,2012-03-15 19:41:14
38,2012-03-13 21:10:46,"The Markdown formatting syntax should not be processed within block-level HTML tags, according to http://daringfireball.net/projects/markdown/syntax
",jacobrask,2012-03-13 22:35:55
38,2012-03-13 21:33:19,"Example:

<S_CODE_TOKEN>

Should render:

<S_CODE_TOKEN>
",jacobrask,2012-03-13 22:35:55
38,2012-03-13 22:35:55,"Use the `pedantic` switch if you need markdown's misfeatures.

<S_CODE_TOKEN>
",chjj,2012-03-13 22:35:55
37,2012-03-06 13:31:03,"GitHub's code fences should output a `pre` element and not a `code` element, you can see that at the first lines of http://github.github.com/github-flavored-markdown/

Btw, thanks for an awesome module. It was a huge advantage to be able to use marked instead of other, more limited JavaScript Markdown parsers for my [StyleDocco](https://github.com/jacobrask/styledocco) project.
",jacobrask,2012-05-16 19:22:08
37,2012-03-06 14:41:12,"I tried to look into this issue myself, but it seems like the tests actually expect `pre` output, and pass. However:

<S_CODE_TOKEN>
$ ./bin/marked 
<S_CODE_TOKEN>^D
<p><code>
foo
</code></p>
<S_CODE_TOKEN>

Am I doing something wrong?
",jacobrask,2012-05-16 19:22:08
37,2012-03-06 19:22:31,"The marked script was changed once options were added. You need to use the `--gfm` flag to enable gfm now. It was easier to do it this way than to have gfm enabled by default and creating a `--nogfm` argument.

Hmm, you're right. It does only output `pre`. Strange that it doesn't bother adding a `code` element, even if you name the language you're using. I guess the language's `@class` will have to go on the `pre` element instead of a `code` element.
",chjj,2012-05-16 19:22:08
37,2012-03-07 12:01:28,"I noticed another error when using `gfm: true`. The lexer reports code blocks to be of `pre` type, but in the `tok` function there is no case for `pre`, only `code`, so gfm code fences will output undefined when parsed.

I wasn't sure how you wanted to fix it, either by changing the lexer to output the code type, or by adding another case for pre types?
",jacobrask,2012-05-16 19:22:08
37,2012-03-07 12:06:26,"https://github.com/chjj/marked/blob/master/lib/marked.js#L123

<S_CODE_TOKEN>

Where do you get tokens with a type of `pre`? Could you show me an example?
",chjj,2012-05-16 19:22:08
37,2012-03-07 12:20:56,"Bah, that was probably something I had changed in my local copy while investigating the previous issue then. Sorry for wasting your time :P
",jacobrask,2012-05-16 19:22:08
36,2012-03-04 11:07:04,"Example:

<S_CODE_TOKEN>

... should be:

[Test](http://google.com)

It doesn't work in GitHub's markdown parser too (Redcarpet), but it works in other markdown parsers like Showdown (JS) and RDiscount (Ruby).
",cheeaun,2012-03-06 05:18:05
36,2012-03-04 19:01:01,"markdown.pl gets parentheses in the url wrong, but parentheses in the title correct. Fixing parentheses in the title should be fine. ""Fixing"" parentheses in the url would cause problems. For example: `[test](http://test/(hello)/world)` might be unambigious, but then `[test](http://test/(hello/world)` would cause problems. We can fix the title but I don't think a url in a markdown link could ever realistically handle parentheses, unless they're closed parentheses.

Interesting that github gets it wrong though.
",chjj,2012-03-06 05:18:05
35,2012-02-26 05:09:39,"This adds support for plugins using the `[plugin_name:arg]` syntax.

`test/index.js` shows a basic ""youtube"" plugin.
",jcayzac,2017-01-29 11:11:31
35,2012-06-04 03:28:59,"I'm not sure how to ""vote"" for this other then to add this +1 comment. I really need something like this but I would rather not maintain a fork.
",markc,2017-01-29 11:11:31
35,2012-10-03 14:16:48,"great work :-) **+1**
",rhiokim,2017-01-29 11:11:31
35,2012-10-03 22:04:05,"+1
",micmcg,2017-01-29 11:11:31
35,2013-02-22 19:29:29,"I pulled this feature into my instance but it didn't work. 
While trying to fix it, I arrived at a vastly different solution.
Please provide feedback as I've made a few assumptions outlined below that might need adjustment. 
If you like it, I'll PR it and we can close this issue.

## Helper Support

[Here's my commit](https://github.com/potench/marked/commit/246f02a13d72e88572e6569b9c7e6ae1a67e1b80), it includes tests and is ready for use now should you need it immediately. 

### Configuration

<S_CODE_TOKEN>

### Usage

`{NameOfHelper::var1:var2:var3...}` 
or
`<!--- {NameOfHelper::var1:var2:var3...} -->`
- You'll probably want to wrap helpers in comment blocks so that other parsers hide your helper syntax
- You can pass multiple variables to the helper separating each by a colon `:`
- The parser simply ignores helpers that don't exist so `{missing::on:purpose}` will just be ignored (until you add a helper method called `missing`)

#### Example

<S_CODE_TOKEN>
",potench,2017-01-29 11:11:31
35,2013-02-22 19:32:11,"Also, @chjj I have a quick question.
Unrelated to the above commit some of the tests (10,11,14,19) in `master` are failing in node 0.8.8. 
Do you want these updated or am I missing something?
",potench,2017-01-29 11:11:31
35,2013-03-01 06:36:39,"I am doing it in another way, like sundown #129
",lepture,2017-01-29 11:11:31
35,2013-03-01 07:49:46,"@lepture I don't think these are the same - you are customizing the output for each instance of a particular match vs specifying a unique helper or plugin independent of existing markdown matches.  If I wanted to customize a heading, I'd use CSS. 
",potench,2017-01-29 11:11:31
35,2013-08-15 05:39:00,"it didn't work fine in this case

<S_CODE_TOKEN>
",rhiokim,2017-01-29 11:11:31
35,2013-09-05 09:53:57,"Has any method for helpers, plugins been accept?  I have a handful of custom things I wanted to throw in, thanks.
",acamarata,2017-01-29 11:11:31
35,2013-09-05 14:03:13,"Could you explain a little more?
Clarify the question: do you want to parse another markup (mediawiki?) Or simply add a simple substitution?
",aplib,2017-01-29 11:11:31
35,2013-09-05 14:07:04,"Both are welcome as I want simple substitutions for quoting specific
references that are common used {Stats:Blah Blah Blah:p34} will be used a
lot, and in Mediawiki we did this with Templates, I would love to be able
to code some substitutions the best way, best practices, etc.  But there is
a real need for some higher level and some core Mediawiki functions, which
would be great as an addon/plugin - but wondering how I could get
References, footnotes, citations, and maybe even some form of templates
though substitutions could work for some/all of those also.

So both, two questions.

On Thu, Sep 5, 2013 at 9:03 PM, vadim baklanov notifications@github.comwrote:

> Could you explain a little more?
> Clarify the question: do you want to parse another markup (mediawiki?) Or
> simply add a simple substitution?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/pull/35#issuecomment-23869661
> .
",acamarata,2017-01-29 11:11:31
35,2013-09-05 14:09:56,"I implemented some mechanism to include foreign content in markdown tex, look here http://aplib.github.io/markdown-site-template/index.html. If something is unclear ready to explain
",aplib,2017-01-29 11:11:31
35,2013-09-05 14:17:52,"I'll take a look at stuff like:
http://aplib.github.io/markdown-site-template/components/controls.alert.html

I would want to implement something like [[Page]] which would be red if no
page exists and blue if it does, which would require some logic etc.  I
also don't see anything really robust enough to replace Mediawiki functions
all out, but I could work on it.  It does seem a start on setting up some
substitutions but I like what I saw of plugins and addhelps in the two
links above... but seems they are not pulled into the project.

On Thu, Sep 5, 2013 at 9:12 PM, vadim baklanov notifications@github.comwrote:

> Or rather there is not a single mechanism, there is the templating and
> components
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/pull/35#issuecomment-23870290
> .
",acamarata,2017-01-29 11:11:31
35,2013-09-05 21:21:34,"for example, I added a component based on the code from the repository https://github.com/cscott/instaview
You can see it here http://aplib.github.io/markdown-site-template/components/wiki.instaview.html
This plugin adds wiki markup.
",aplib,2017-01-29 11:11:31
35,2014-09-02 21:09:00,"I agree with the direction that the original change and the extensions that @potench proposed.  This is a great way to solve a bunch of problems, as all the +1's suggest.  The idea of supporting <!-- --> for compat makes me happy too, given that these plug-ins, by their very nature, are going to be site-dependent.

Is there some prior art that the "":"" syntax for parameter-separation is mimicking?  I'd suggest two alternatives to that mechanism.  The first of which is to not do any parameter-breaking at all and make the add-on break down the parameter list if it needs to.

If you really feel that a more sophisticated means would be helpful, then I'd say the argument should be treated as a query string.  I prefer that because:
1. It's a well-known syntax
2. It's flexible
3. It has a known escaping language (e.g. what if you needed to have an argument with a colon in it?)
4. It'd allow the plug-in to take a more flexible parameter list.  (I've been thinking about using this sort of thing to allow markdown to reference code samples; in that space so customers may want to reference samples with a line & file, sometimes by an ID, maybe by a file name and a region name, etc.)  With this sort of thing, you can enrich your plug-in without breaking compat with old versions pretty easily.

Another nit: I'm not sure I like the switch to ""{"" from ""["".  I mean, I believe ""["" alone is wrong, because that overloads the hyperlink semantics in a way that might be confusing or conflicting.  But introducing a whole new character seems like too heavy a hammer.  Instead, I'd propose looking at the image inclusion syntax (`""![...]""`) as a model, because it does something generally similar.  My proposal for a character would be '$' because it's got some variable-substitution connotations that seem appropriate here.  So, for example `""$[youtube:g2FOLrC2e6E]""`, would be what I'd go for.

Details aside, this is an important change, any hope of some progress here, @chjj ?  Anything I could do to help it along?
",SteveBenz,2017-01-29 11:11:31
35,2014-09-03 18:00:08,"I like the idea of having plugins in markdown.
The proposal here adds this on a block level but not on an inline level and I am wondering if the syntax proposed fits all possible use-cases.

Currently I am working on a markdown preprocessor [markedpp](https://github.com/commenthol/markedpp) which adds support for TOC, numberedheadings, inlining files, aso ...

I encountered the problem that there is no clear defined markdown syntax for extensions, and I really wish there would be one.

This syntax should be suitable on block and on inline level.

In [markedpp](https://github.com/commenthol/markedpp) I needed to specify a command (comparable to plugin/extension) as well as some parameters and opted for the following ""bang"" syntax which is derived from the image tag.

<S_CODE_TOKEN>

where: 
- `<command>` : A word of `[a-z]+` chars defining the extension
- `<options>` : Optional. A space separated list of keys or key-value pairs enclosed in normal brackets. 
  - key-value pairs are separated by a `=` char e.g. `key=value` which allows assignment of numbers, strings
  - keys lack the `=` char which allows assignment of booleans (or value combined with the used `<command>`).
  - Arrays can be assigned to a key with `key=""value1;value2;value3""` (The separator "";"" char would need to be discussed... or could be left to the used `<command>`)
  - If spaces are used in keys then these need to be escaped with `\`, alternatively `""` can be used e.g. `key=""value with spaces""`.

This allows to specify e.g.

<S_CODE_TOKEN>

In order to reuse this information for another pre-process run a ""closing"" tag is required as well. Therefore the alternative syntax is allowed as well:

<S_CODE_TOKEN>

This works well on block level, where each command is surrounded by newlines, but not on an inline level. I am not firm if there are languages which allow a `!` in front of a character (e.g. something like spanish with their `¡`). Or imagine a typo e.g. ""Last word !Next sentence"". `!Next` would be interpreted as a command... :(

While reading @SteveBenz comment I really like the idea of using the `$[]()` syntax which really can be used everywhere.

So what about this?

<S_CODE_TOKEN>

which would allow e.g.:

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

or if you want to define a plugin which itself neads some input:
e.g. a uml-parser which generates a SVG displaying a UML sequence chart:

<S_CODE_TOKEN>
<S_CODE_TOKEN>
<S_CODE_TOKEN>

What do you think?
",commenthol,2017-01-29 11:11:31
35,2014-09-08 06:57:04,"@commenthol  has a lot of good ideas.  I like your adaption of what I suggested.  Using the () for the argument list is a fantastic idea, because I think it looks clearer and it doesn't rely on introducing some new magic character into the markdown syntax.  $[plugin](optional-args) is quite consistent with the prior art and I think it strikes the right balance between clarity and backwards compatibility.

I am really solidifying my belief that argument parsing should be punted to the add-in itself.  Maybe nice markdown libraries can offer some libraries and good documentation can suggest some best practices, but it shouldn't be a part of the language.

I think you should separate your thinking about &#96;&#96;&#96; from plug-ins.  I think you could do it with custom rendering better.  If you had a custom renderer for &#96;&#96;&#96;, you could go with:

<S_CODE_TOKEN>
<S_CODE_TOKEN>```

Your custom renderer could pick that apart and generate some nice svgl from that text.  To me I don't see it as all that different from syntax highlighting.  The reason I say that is because if your markdown got copied to some other host that didn't support any of your markdown extensions, the foreign renderer would simply render the text as-is, and that wouldn't be the end of the world.  The reader could still get the gist of the diagram.

Although this belongs in another thread, I'd claim that we need to allow for richer metadata than just a language after the &#96;&#96;&#96;.  I'd like to see the ability to include other metadata there - here, for example, the language is UML, but you shouldn't, as you are now, forced to somehow pretend that ""umlsequence"" is a language, when in real life, ""uml"" is the language and ""sequence"" is the kind of diagram.

For another example, suppose you have a custom renderer that not only knows how to highlight, but also to generate hyperlinks to class names mentioned in the code.  For that guy to really work right, it'd need to know the ""using"" statements associated with the block of code.  Right now there's no way to convey that 'using' data...  But all that'd be needed to fix that would be to loosen up the regex that matches fenced ticks.
",SteveBenz,2017-01-29 11:11:31
35,2014-09-08 07:10:01,"In re-reading the comments, I think we should highlight why we need a new syntax for plug-in calls and why Custom Renderers, while they're wonderful things, are insufficient.  Suppose, for example, that we create some functionality and use a custom renderer to make it happen.  I could have markdown like:

<S_CODE_TOKEN>

That'd be easy to implement with custom renderers and it'd generate great results _on the site with the renderer_.  But if I copy the markdown to some other system where the renderer isn't there, I'm going to see my sample block replaced with a dysfunctional hyperlink.  It'd be much better for the reader if the code had been left as-is.  At least then I could glean that the markdown was broken and should have included a block of code.

Moreover, if I (as the person who copied the markdown to the new host) want to fix up the markdown to look good on the target system (even if it doesn't have the fancy plug-ins installed), I can't reliably find the plug-in calls because there's no clear syntax for them.
",SteveBenz,2017-01-29 11:11:31
35,2014-09-08 09:25:12,"As far as using non-existent plug-ins on other markdown sites without the required extra code maybe it would be a good idea to embed the whole plug-in system within the current link semantics using just `# ""` as the trigger for plug-ins... ie;

<S_CODE_TOKEN>

is rendered like...

[text to replace with inline plug-in output](#)
[text to replace with referenced plug-in output](#)

In the above examples `# ""` (hash + space + double quote) is a special sequence that triggers a plug-in handler which in this case is called `text` with arguments of `red,bold`. As you can see, without the special `text` plug-in handler being available (which could turn the previous text red and bold) the area just appears as a normal, but useless, link.
",markc,2017-01-29 11:11:31
35,2014-09-08 13:14:15,"Hey @commenthol and @SteveBenz I think what you are describing could be better referred to as ""Macros"".  I have seen it asked for out of Markdown countless times.  The idea being that there is one reserved syntax for the purpose of building your own custom markup output that your sub group of Markdown users can benefit from.   Like UML diagrams!  You just build your own SVG/canvas madness that picks up on the HTML output after the fact.

If you are curious, there is a **long** discussion about the idea on a fork of this repo over here:
https://github.com/jonschlinkert/remarked/issues/9

The project itself is being rebuilt under a new name with learnings from this one:
https://github.com/jonschlinkert/remarkable

They plan to get block macros in there as a default and throw in a couple tickets from this very project.  You may want to watch it, it has solid admins behind it :) 
",howardroark,2017-01-29 11:11:31
35,2017-01-29 11:11:31,"Hi there,

There were lots of good comments here, highlighting use cases that weren't taken into account by my code, and suggesting alternative mechanisms for extending Markdown.

I myself believe this might be out of scope for a Markdown processor after all, and more in line with what's expected of a templating engine —I'm now using Pug as my document format, which is extensible and allows inline Markdown too.

I'm closing this pull request, as it's old and has failed to get consensus.",jcayzac,2017-01-29 11:11:31
34,2012-02-18 22:50:23,"<S_CODE_TOKEN>

gives

<S_CODE_TOKEN>

should be 

<S_CODE_TOKEN>
",leeoniya,2012-02-19 00:34:07
34,2012-02-19 00:34:07,"It's because of GFM. GFM takes urls and spits out links. If you just want a link that displays the url, put: `http://www.facebook.com/developers/`.
",chjj,2012-02-19 00:34:07
34,2012-02-19 07:53:02,"if i were making it, i would indeed just use a plain url. however, i'm feeding it markdown others have made. i understand this happens as a consequence of extra GFM handling, but does that make it correct?

[http://www.facebook.com/developers/](http://www.facebook.com/developers/)

^^ not mis-parsed @ Github, which supports GFM also ^^
",leeoniya,2012-02-19 00:34:07
34,2012-02-19 07:56:12,"there may actually be a perfectly valid use-case for this, because GFM links don't allow you to customize the title attr of the link. like this: [http://www.facebook.com/developers/](http://www.facebook.com/developers/)

via

<S_CODE_TOKEN>
",leeoniya,2012-02-19 00:34:07
34,2012-02-19 08:30:27,"Lately I have been wanting to make GFM optional. Maybe have 4 different switches total:
- pedantic: pure 100% conformance in every area. original markdown bugs/poor-behavior is preserved.
- improved: marked's current improved behavior, which would enable a lot of the smarter behavior in marked.
- gfm: github flavored markdown.
- sanitary: sanitize output. ignore html input.

But I don't want to amend any inline processing just to exclude a gfm link nested in an md link. 

This is obviously different from the route of just making marked extensible, and allowing users to change behavior by hand. It seems necessary as GFM is already implemented, and so are the areas in which marked diverges from markdown behavior (like the list item's bullet margin). A lot of people have been asking for html sanitiziation too.

edit: In response to your last post, another quck and dirty fix would be to make gfm url's escapable. e.g. `[\http://example](http://example)`. That would help for some other areas where you wouldn't want a GFM link to be recognized as well. Looks kind of ugly though.
",chjj,2012-02-19 00:34:07
34,2012-02-19 10:40:07,"I've been playing around with a local branch for a little bit now. I've implemented `pedantic`, `gfm`, and `sanitize` so far. I sort of like it. I think I might just keep it.
",chjj,2012-02-19 00:34:07
34,2012-02-19 21:19:43,"that sounds good. in the meantime i've upped my DOM > markdown proj. check it out if interested https://github.com/leeoniya/reMarked.js :D

thanks for your help with the barrage of issues i've opened here, too.
",leeoniya,2012-02-19 00:34:07
33,2012-02-17 23:28:25,"by itself,

<S_CODE_TOKEN>

renders correctly as

<S_CODE_TOKEN>

but in the context of https://raw.github.com/dmajda/pegjs/master/README.md renders as

<S_CODE_TOKEN>

maybe a parser issue?
thanks!
",leeoniya,2012-02-18 00:32:53
33,2012-02-18 00:15:17,"I think you're looking at it wrong. This is probably best explained by some commandline examples.

<S_CODE_TOKEN>

There are two separate locations for that heading. One has slashes, one doesn't.
",chjj,2012-02-18 00:32:53
33,2012-02-18 00:32:53,"oh, woops, sry. closing.
",leeoniya,2012-02-18 00:32:53
32,2012-02-16 21:26:43,"I've been using marked for a while, but today I was doing cross-platform test and I noticed that Firefox crashed when marked tried to parse my *.md file. Firefox just crash. I test it in chrome (still on windows XP) and it works fine. Also I test it on Firefox (Windows 7) and works fine. I don't know what is the main problem in here. 

ps. Firefox v6.0
",alejandro,2012-02-20 01:47:17
32,2012-02-16 21:32:51,"Hmm. Can you show me the markdown you're parsing?
",chjj,2012-02-20 01:47:17
32,2012-02-16 21:44:44,"Yeah sure! It's just dummy text with `*` and `links`:

<S_CODE_TOKEN>

_Edit:_
Looks like that even with  the `lorem ipsum` dummy text, withouth markdown at all, crash firefox.
",alejandro,2012-02-20 01:47:17
32,2012-02-19 21:36:32,"> Looks like that even with the lorem ipsum dummy text, withouth markdown at all, crash firefox.

That's really scary. Jaegermonkey must've had some _major_ problems when firefox 6 was released. Could you set a breakpoint and step through the calls to see where it's locking up? I don't have windows xp with firefox6 installed on it at the moment.
",chjj,2012-02-20 01:47:17
32,2012-02-20 01:47:17,"Yeah! I know, it's a firefox bug, because I have Firefox 10 (?) in my laptop (running linux) and it crashed too. I'll close this issue, nothing to do here :).
",alejandro,2012-02-20 01:47:17
32,2012-02-20 02:20:16,"Are you sure? I'm running linux and just tried executing marked in firefox and it seemed to work.
",chjj,2012-02-20 01:47:17
32,2012-02-20 03:42:22,"Yes! I checked, btw my Firefox version it's 4.0 maybe in the newest version the error that is causing this behavior has been fixed. 
",alejandro,2012-02-20 01:47:17
32,2014-02-26 07:18:08,"I know this issue is old, but this is something I meant to post a long time ago. I decided against it because I was so pissed off and full of vitriol at the time, but I want to mention it for documentation's sake:

By a stroke of luck, a while ago I managed to test marked on Firefox 6 on XP.  It fails 3 tests because of nested lists. This is truly pathetic because even IE8 can pass every single test with flying colors. I'm sorry to say, the jaegermonkey devs should be embarrassed that they got something so essential wrong. I don't want to fix this (I wouldn't even know where to begin).

So, yes, for the record, FF6's regex implementation is bugged. Luckily, they pushed a fix, and not many people use FF6 anymore.
",chjj,2012-02-20 01:47:17
31,2012-02-13 15:54:09,"fixes erroneous leading space in `<code>` blocks within list items. eg Ruby/Rails blocks here: https://raw.github.com/mojombo/github-flavored-markdown/gh-pages/_site/sample_content.md

the previous list indentation behavior outdented list items up to the indentation level forced by the leading number or bullet. while this accounted for any number of list items, it also was unable to handle the case with nested code blocks. such as this:

<S_CODE_TOKEN>

there are 3 chars to outdent according to the first line, but the code blocks are indented 8 spaces, as per spec. this caused the code to also be outdented by 3 spaces, leaving 5. Then 4 are stripped by the `<code>` sub-parser leaving 1 erroneous leading space _inside_ the code block.

while this patch may partially break the handling of 3-digit list items (100+), it fixes a more common scenario of not intentionally needing leading spaces on indent-aligned list sub-items.
",leeoniya,2012-02-20 04:06:16
31,2012-02-14 04:01:56,"Sorry, I like the current way better. It's much smarter and will hold up better in nested lists, and also lists with different bullet margins. I've probably spent more than 2 weeks going back and forth on this. I decided markdown.pl's way isn't enough for me. List parsing should be more logical than, ""always outdent list items four spaces regardless of how the list is indented."" Markdown.pl has **a lot** of trouble with nested lists and code blocks because of the way it handles this. All of it is counter-intuitive.

A user is able to realize that code blocks are prefixed by 4 spaces, and they should also be able to see the natural left margin the list items form (3 spaces). It's much more intuitive this way, it makes more sense, and it will abide by the list's left margin and indentation. Lastly, I think it just looks nicer.

If anyone else disagrees with the way marked handles things now. I'd like to hear counterarguments.
",chjj,2012-02-20 04:06:16
31,2012-02-14 04:22:17,"Here are some examples of what I'm talking about:

<S_CODE_TOKEN>

The code isn't a code block even though it's after the bullet margin. Let's give it two more spaces, effectively making is 8 spaces past the bullet like you said.

<S_CODE_TOKEN>

And, it's still not a code block. Did you also notice that the 3rd item isn't even its own list? Markdown screws that up too because of its indentation-unaware parsing.

Let's look at some more examples of markdown's list parsing:

<S_CODE_TOKEN>

Misnested tags.

<S_CODE_TOKEN>

Which looks correct to you?

<S_CODE_TOKEN>

More misnested tags.

<S_CODE_TOKEN>

Again, which looks correct to you?
",chjj,2012-02-20 04:06:16
31,2012-02-14 06:25:57,"i suppose a lot depends on the stated goal of the project. certainly, some of the pl output is nonsensical but if that's your baseline, then perhaps nothing further is necessary here.

i'm on the fence about this as well. in my view, leading spaces for every line should be killed inside of all blocks (up until any line cannot be outdented anymore. that may solve this issue without changing the behavior too much. there isn't much place in markdown for leading spaces on every line of a block.

here is how i would expect some things to translate.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

pretty: http://i.imgur.com/Cbdal.png

so the indent baseline is formed by the start of text following the bullet or number (not the bullet or number itself), i think it is already how it works. 4 space indent from there should form a code block, anything less is the same as no indent (kill leading spaces).
",leeoniya,2012-02-20 04:06:16
31,2012-02-15 03:17:07,"I don't understand. Here is what marked currently renders:

<S_CODE_TOKEN>

It renders the code blocks without any leading spaces. Which part of it do you disagree with?
",chjj,2012-02-20 04:06:16
31,2012-02-15 16:19:14,"yes, that example renders correctly (i screwed up on adding the `<p>`) because it is indented 4 spaces from the list-text baseline. this is not the case for the example in the OP where it is indented 8 from the list bullet/number baseline. that code block renders with a leading space.

this pull request is not a good solution. but i think post-processing the sub-blocks of list items to remove remnant leading spaces would solve the first case without affecting current behavior (which does make sense).

this would seem like an unimportant detail for blocks where leading whitespace is ignored in rendered html, but it's important when going back from html > markdown, which is what i'm trying to do.

i could of course trim the leading spaces myself during the conversion, but figured it would be better to have the original convert without them. and for code or pre blocks they are actually visible.
",leeoniya,2012-02-20 04:06:16
31,2012-02-18 00:44:58,"feel free to close this if you disagree, btw.

the example given in the spec is somewhat ambiguous. it's unclear whether the indentation is 4 spaces relative to the text margin or 8 spaces relative to the bullet margin. `marked` does the former, which makes more sense. but leaves you with leading margin in front of code blocks depending on how the first line is indented.

<S_CODE_TOKEN>

i now uniformly outdent leading margins of all block-level children of li elements when going from DOM > markdown. so this ambiguity no longer affects me.

cheers!
",leeoniya,2012-02-20 04:06:16
31,2012-02-20 04:06:16,"This is now implemented with the `pedantic` option.
",chjj,2012-02-20 04:06:16
30,2012-02-13 07:56:00,"fixes ascii flower in https://raw.github.com/mojombo/github-flavored-markdown/gh-pages/_site/sample_content.md

closes #29
",leeoniya,2012-02-14 03:49:41
30,2012-02-14 03:49:41,"fixed: 852165f387f516ae790c4a643b6c9db10afe528b
",chjj,2012-02-14 03:49:41
29,2012-02-13 05:07:55,"it looks like a strong/em is incorrectly parsed out of the ascii flower `<pre>` element here:

https://github.com/mojombo/github-flavored-markdown/blob/gh-pages/_site/sample_content.md
vs raw:
https://raw.github.com/mojombo/github-flavored-markdown/gh-pages/_site/sample_content.md

what's interesting is that Github's own parser seems to trip up on the same thing. i don't believe this should be happening so maybe it's a bug?

php-markdown parses it correctly though.

thanks!
",leeoniya,2012-02-14 03:50:05
29,2012-02-13 05:49:12,"This is a good example of how many differences there are between markdown implementations. markdown.pl will not parse anything in that `<pre>` element, you're right. But it's not because markdown.pl is aware of `<pre>` elements - markdown.pl won't process text inside of any block element. You can change that `<pre>` to a `<p>`, feed it to markdown.pl, and get the same result.

Other markdown implementations will try to process inline text inside of html elements, which is what marked does. However, marked doesn't make a special exception for `<pre>`. It's strange that github's markdown parser ends up parsing the text inside the `<pre>`, because libupskirt doesn't do that. libupskirt follows markdown.pl more closely and doesn't parse text inside any block element. Discount is the same.

<S_CODE_TOKEN>

So marked differs in that it assumes users want to be able to use inline markdown inside block elements. I'm 50/50 on whether to add a special exception for `<pre>`. On the one hand, it would be good to always match user expectations. On the other hand, I want to say, ""just use the markdown syntax"". But I'm really hesitant to take out the inline processing inside block elements from marked, even though it would probably improve overall speed.
",chjj,2012-02-14 03:50:05
29,2012-02-13 05:57:28,"i would think that `<pre>` and `<code>` exceptions are in fact _expected_, that's the whole point, isn't it? it's not an issue of uniform handling of all block vs not-block elements. the fact, alone, that even the basic dialect of markdown specs so many valid variations for the same output html, makes it far from uniform by design...and then there are flavors.
",leeoniya,2012-02-14 03:50:05
29,2012-02-13 06:02:56,"I would say they're expected too, but markdown.pl doesn't account for that expectation. The behavior for `<pre>` elements in markdown.pl is only a byproduct of it not allowing inline markdown in block elements. 

It should be easy to implement a small exception for `<pre>`. I'll try it on and see how it fits.
",chjj,2012-02-14 03:50:05
29,2012-02-13 06:15:18,"awesome, looking forward to it. thanks.
",leeoniya,2012-02-14 03:50:05
29,2012-02-13 07:57:40,"tiny patch, not sure if it's the cleanest solution, but hey, it's 2am :)
",leeoniya,2012-02-14 03:50:05
28,2012-02-02 23:32:01,"stupid IE. 
",gigonaut,2012-02-03 07:59:03
28,2012-02-02 23:32:32,"that's &#39; I can't type.
",gigonaut,2012-02-03 07:59:03
27,2012-02-01 16:48:48,"Thanks for the excellent md parser!

There are a bunch of various extensions to markdown
eg
http://freewisdom.org/projects/python-markdown/Extra
http://michelf.com/projects/php-markdown/extra/
http://maruku.rubyforge.org/proposal.html

While not all are exactly critical, things like super/subscript, tables, definition lists, abbreviations can go a long way to make writing md documents easier. 

Also simple transformations (like texttile http://rpc.textpattern.com/help/?item=intro) can make the text much more readable
For example
... -> …
' ' -> ‘ ’
"" "" -> “ ”
-- -> –
(c) -> ©
(r) -> ®
and so on .

Ideally the goal should be to never write pure html for any typographical feature.
",dmmalam,
27,2012-02-02 12:09:51,"I was considering adding [smartypants transformations](http://daringfireball.net/projects/smartypants/) as an option, since a lot of markdown parsers seem to have it. I was also toying around with adding footnote syntax, [something Gruber himself considered](http://daringfireball.net/2005/07/footnotes).

The reason I added GFM features by default is because I think they're really smart and well thought-out (everything except for the line breaks).

I really want to keep marked small. I would really like to keep any extra features in a kind of addon that wouldn't be part of marked by default.
",chjj,
27,2012-02-06 21:20:58,"Adding my vote for this. At least as an option.
",chrisnicola,
27,2012-02-08 21:46:06,"I most definitely respect @chjj's choice here to keep marked small. It's much better than the urge to say ""yes I'll do this.""...and then never do it.

I, too, however, would like to see more Markdown extension features, particularly those of Maruku. To that extent I've [created a new repo](https://github.com/gjtorikian/namp) to port these into Node.js. It's empty now but I'll start porting to ""standard"" Markdown features soon.
",gjtorikian,
27,2012-02-09 06:16:30,"Actually, I might just keep an eye on [Robotskirt](https://github.com/benmills/robotskirt), which has ported sundown features instead.
",gjtorikian,
27,2012-02-09 19:45:59,"Unfortunately I'm looking for something that will actually work on the client so Robotskirt isn't of much use to me.
",chrisnicola,
27,2012-02-13 05:52:56,"There is a reason I'm leaving this issue open. I'm not saying it will never happen. I'm saying when it does, it won't be part of marked by default, but it will definitely be maintained in the same repo. It will be part of marked, just an optional part.

This ties into the goal of making marked more hookable from the outside. This has been on the todo list for too long. It's really hard to design an elegant and sensible interface for that. It's really deceptively simple. I have a couple local branches now, containing different approaches to making marked extensible.
",chjj,
27,2012-02-15 02:35:09,"@chjj I've started [my own fork](https://github.com/gjtorikian/marked) to hook into the core Marked lib. I think having a plugin system is neat, but just being able to extend it at all is a great asset. 

I'd be curious to know what you had in mind. Mine is obviously vary naïve. 
",gjtorikian,
27,2012-02-15 03:09:09,"It's really tough because the precedence of each rule matters, and there's no good way to maintain order of properties in an object for example. So here's what would probably have to happen: an exposed array containing each rule name and it's corresponding regex. The loop in the lexer iterates over the array trying to match each rule until it finds one, eats the matching part of the string, and passes control to the rule's function. Once the function has returned, continue to the next iteration of the main loop. 

Anyway, from the outside it might look like:

<S_CODE_TOKEN>

There are other ways, but there's a couple things that are annoying: the string part - no pointers in JS, a function can only return one value, etc. So we could to refactor marked to make it oo, then people can just stick functions on the prototype and easily change the input text: `this.text = this.text.substring(...)`. This gets kind of awkward when we have to recurse during blockquotes and lists.

All of this is kind of ugly in my opinion, and it remains to be seen whether it will have a negative effect on performance. Before v8 prototypes were optimized even more, marked was 6-7 times faster than markdown-js. Part of the reason marked is so fast is that it doesn't have an object that needs to be instantiated, the lexers barely call any functions (everything is just in one big loop), there's no closures, no nested functions, etc.

I've tried implementing this a couple times now. I may have tried every way there is, so the only thing left to do is decide which is the best.
",chjj,
27,2012-03-10 00:15:05,"I'd like to suggest the addition of tables at the very least, because they seem like the most well-thought out extension besides that GFM adds.  Not sure on subscripts/superscripts, I'm definitely on the fence over that.  The smartypants stuff would definitely be nice to have as an option like GFM, though.
",NuckChorris,
27,2012-04-22 22:56:50,"+1 for tables support
",TooTallNate,
27,2012-05-20 02:21:42,"Personally, if someone wanted to add the [MultiMarkdown](https://github.com/fletcher/peg-multimarkdown) feature set as a plugin, well... that'd be great. Tables, footnotes; you could leave out the LaTeX processing, though.
",hawkrives,
27,2012-07-12 22:42:04,"It'd be great if marked supported [GitHub Flavored Markdown](http://github.github.com/github-flavored-markdown/).
",bootstraponline,
27,2012-07-12 22:49:07,"@bootstraponline [it does](https://github.com/chjj/marked#options), just set `gfm`option to `true`. There are some issues though, notably with [GFM line breaks](https://github.com/chjj/marked/issues/51).
",instanceofme,
27,2012-07-12 22:58:23,"Marked does not fully support gfm.
- No support for tables #50
- Syntax highlighting using ```language is broken #58

There are a bunch of [other features](https://github.com/tanoku/sundown) not supported as well. Lack of tables is the main missing feature.

Here are gfm test files which demonstrate the lack of support for GitHub Flavored Markdown in marked.
- https://github.com/suan/github-flavored-markdown-test/blob/master/README.md
- http://github.github.com/github-flavored-markdown/sample_content.html
",bootstraponline,
27,2012-08-18 04:49:59,"Another vote for more features. For me, specifically footnotes. Any progress on deciding how to move forward with this?
",jonahkagan,
27,2012-08-25 08:43:24,"+1 for tables
+1 for ToC
",mbacou,
27,2012-09-18 05:11:03,"+1 for SmartyPants/Pandoc-like [smart punctuation](http://johnmacfarlane.net/pandoc/README.html#smart-punctuation)
",tlvince,
27,2012-09-27 16:14:53,"+1

What would one need to do to add support for their own syntax rules?

I saw [this post](http://egilhansen.com/2011/03/09/drupal-extending-markdown-syntax-add-css-classes-images) regarding a Drupal Markdown filter and was curious.
",sevenupcan,
27,2013-01-26 17:37:37,"Did marked now supports TOC like GMF ~toc~?
If not, is there a way to do that kind of things with current marked grammar ?
",romainPellerin,
27,2013-06-11 19:15:52,"I've recently discovered Adam Pritchard's outstanding _Markdown Here_.  I understand that MDH uses the Marked library.  MDH lets me write email in Markdown inside the gmail compose window, which saves the copy/paste step compared to writing the email in an external Markdown editor.

My emails (and other text) tends to use a lot of footnotes.  It would be great if the Marked library supported footnotes in a way similar to MultiMarkdown.  
",hplphotos,
27,2013-06-13 08:03:38,"**Note:** footnote syntax in MultiMarkdown is identical to that of PHP Markdown Extra.
",Mithgol,
27,2014-02-10 17:57:52,"+1 for PHP-Markdown-style footnotes.[^1] This is literally the last feature that would make marked perfect for my present use case. I have otherwise been able to achieve almost a complete feature parity between redcarpet (server-side) and marked, and would prefer to use marked all out.

[^1]: Please consider supporting it.
",prashaantt,
27,2014-03-10 17:12:22,"+1 and is there any progress on this?
",Ognian,
27,2014-04-09 06:07:49,"+1 It would be awesome if marked supported markdown-extra
",aruizca,
27,2014-04-09 06:22:50,"+1 for this feature. You can also take a look at https://stackedit.io/ which is an online editor of md files which supports extended Markdown. It could be a very nice feature to add to this lib.
",cabrinoob,
27,2014-04-09 06:27:26,"@cabrinoob Thanks for the tip. Awesome Markdown editor!!! I wonder what parser uses.
",aruizca,
27,2014-11-29 16:09:08,"We implemented those extensions in [markdown-it](https://github.com/markdown-it/markdown-it) package.
- subscript/supersript
- definition lists
- footnotes
- abbreviations
- advanced typography replacements

Also due pluggable architecture, it's not a problem to write extensions for diagrams, todos, toc and so on.
",puzrin,
26,2012-02-01 00:50:50,"It would be great if you somehow could access the inline lexer.

One example where this would be useful is to transform relative urls to absolute.

<S_CODE_TOKEN>
",jnordberg,2012-02-01 16:27:16
26,2012-02-01 16:27:16,"I agree. I originally wrote marked to have the inline lexer spit out tokens into the main token stream instead of compiling it right there, but it was extremely slow. I wish it could happen, but it just can't. It's too slow.

I would definitely like to add this kind of capability someday, if I eventually find a way around the performance hit. A better approach might be to make the inline lexer hookable from the outside. This way you could change behavior without even looking at the tokens. (This is something I want to add eventually).
",chjj,2012-02-01 16:27:16
26,2012-02-01 21:37:51,"I understand.

Here's what i ended up doing:
https://github.com/jnordberg/marked/commit/eab4073f3354b4914b71636710f87c2290eb609d

Not the best solution but works for what i'm doing. If you want it in the main repo i'll gladly send a pull request.
",jnordberg,2012-02-01 16:27:16
26,2012-02-02 12:03:33,"That's similar to what I eventually want to do. I do want to make marked more accessible from the outside, it's just hard to decide on how to refactor the whole thing. 

I don't want it in the main repo, but I do eventually want this sort of functionality.
",chjj,2012-02-01 16:27:16
26,2014-10-22 11:36:45,"+1
",elennaro,2012-02-01 16:27:16
25,2012-01-26 15:24:56,"I'm really surprised to see that `marked` will not filter out the `<script>` tag, and there's not an option to do it. If a website uses `marked` on its comment system, then this can be a very severe security issue. And the unfiltered `style` attribute for html tags can also be used by malicious visitors to make the site dysfunctional. 

So, I wonder if there's a plan to add in options for safe parsing ?

And another problem: the lexer fails for the following case (the type should be `html`, not `paragraph` IMO)

<S_CODE_TOKEN>
",qiao,2012-02-20 04:06:22
25,2012-01-26 15:55:26,"Having some kind of sanitization feature would be nice. People have been asking for something like this for a while. The possibilities are either to completely restructure marked to make it more easily modifiable from the outside (this way people could easily layer on sanitization features themselves), or add options for it. I was originally leaning toward the former, but it might be more painless to add a single option which just ignores/removes all HTML.

On the other problem: marked's behavior with that script element snippet conforms to markdown.pl's behavior:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Other markdown implementations:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

I see what you're saying here (maybe it would be worth breaking conformance for smarter html parsing), but if you want it to be apparent that something is a block-level element, you should put an extra line feed after the element's closing tag. e.g.

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",chjj,2012-02-20 04:06:22
25,2012-01-26 16:08:43,"Thanks for the explanation. Looking forward for a nice sanitization implementation.
",qiao,2012-02-20 04:06:22
25,2012-01-31 14:08:36,"This is the only thing why I'm not using Markdown for my site yet. I have the same problem with escaping HTML from XSS vulnerabilities.

I'm going to use PHP or Python in server-side and JavaScript on client-side. Marked will go to client-side, of course. The problem is that I can't escape HTML from XSS vulnerabilities in server-side because, for example, `>` will be escaped to `&gt;` and it will break quotions in this example.
",daGrevis,2012-02-20 04:06:22
25,2012-02-20 04:06:22,"This is now implemented with the `sanitize` option.
",chjj,2012-02-20 04:06:22
24,2012-01-25 01:23:34,"I added a bridge to [Ender](http://ender.no.de/). This way, you can easily use marked on the client-side by running

<S_CODE_TOKEN>

This will compile an ender.js and an ender.min.js for client-side usage.

You can use it like this in the browser:

<S_CODE_TOKEN>

This will write `<h1>Heading</h1>` to the document.

PS: This doesn't add any overhead. You also don't have to adjust anything in the bridge, when you change something in marked, since the interface stays always the same.
",pvorb,2012-02-02 13:16:51
24,2012-01-31 23:54:44,"@chjj not interested?
",pvorb,2012-02-02 13:16:51
24,2012-02-01 16:19:44,"Is ender.js smart enough to compile modules in that don't specifically expose anything to it? I'd like to keep the tree as clean as possible.
",chjj,2012-02-02 13:16:51
24,2012-02-01 19:59:56,"Yes it is. You don't need to expose anything to ender.js besides the usual `export` that you already use. It even uses the npm registry to download the packages from, so you don't need to upload it to another location. But it's your choice. If you won't add this, I'm able to use my own fork for this and that's fine with me.

I just thought, this would come in quite handy.
",pvorb,2012-02-02 13:16:51
24,2012-02-02 12:15:49,"I think I should have phrased it better: Is ender smart enough to compile packages that don't put any `ender` property in their package.json? It seems like it should be.
",chjj,2012-02-02 13:16:51
24,2012-02-02 13:16:51,"Yes it does. I found out, that you neither have to add the `ender.js` file nor the `ender` property to use the library with ender.

The instructions from above also work without my patch. So there's nothing to do for you. :-)
",pvorb,2012-02-02 13:16:51
23,2012-01-24 16:58:02,"I've been doing a few tests with marked, and I've found that if I feed it large documents with embedded HTML (or plain HTML alone), it will crash Chrome Renderer.

I've been able to reproduce this reliably by force-feeding it raw HTML - notably the contents of the container div at http://oss.sapo.pt/ (which I'm re-doing using marked, BTW - you'll notice the site currently fetches Markdown and parses it on the fly using showdown...).

Further testing reveals that Safari and Firefox are immune to this, BTW - I can toss in the same documents and they come out fine.
",rcarmo,2012-01-25 00:35:56
23,2012-01-24 17:49:03,"Very odd, could you link me to the exact markdown you're feeding it?
",chjj,2012-01-25 00:35:56
23,2012-01-24 18:23:06,"Sure:

http://dl.dropbox.com/u/4300/Sites/oss.sapo.pt/pages/index.html is the HTML fragment I noticed this in. 

The use case would be something like:

 var xhr = $.get(url, function(data) {
                    markup = marked(data); // <-  crash

The HTML is overkill, I know, but showdown had no problems with it.

(I suggest you copy it to a buffer, I might remove it later)

http://dl.dropbox.com/u/4300/Sites/oss.sapo.pt/dev.html is a copy of the entire site without minification (most of it should work)

On Jan 24, 2012, at 17:49 , Christopher Jeffrey wrote:

> Very odd, could you link me to the exact markdown you're feeding it?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/chjj/marked/issues/23#issuecomment-3636825
",rcarmo,2012-01-25 00:35:56
23,2012-01-24 19:07:30,"The html rule's regex tries to match infinitely. This appears to be a bug in v8 if it works with other browsers. I'll change it around and push a fix soon.

Anyway, I wouldn't recommend feeding that html to any markdown implementation. markdown.pl, discount, and upskirt all produce misnested tags for that piece of html. Marked might also produced misnested tags once I push the fix.
",chjj,2012-01-25 00:35:56
23,2012-01-24 20:10:32,"Great, thanks. My concern was that the loop might happen with smaller chunks of HTML - this was merely the one chunk I was having trouble with, and the one where I could reproduce the issue easily in Chrome (I was developing in Safari first).

On 24/01/2012, at 19:07, Christopher Jeffreyreply@reply.github.com wrote:

> The html rule's regex tries to match infinitely. This appears to be a bug in v8 if it works with other browsers. I'll change it around and push a fix soon.
> 
> Anyway, I wouldn't recommend feeding that html to any markdown implementation. markdown.pl, discount, and upskirt all produce misnested tags for that piece of html. Marked might also produced misnested tags once I push the fix.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/chjj/marked/issues/23#issuecomment-3638293
",rcarmo,2012-01-25 00:35:56
22,2012-01-20 10:51:40,"It appears to be an inconsistency in how marked handles single line conversions of headings.

If I have the following `test.js`:

<S_CODE_TOKEN>

I would expect the output to be `<h1>title</h1>`, but I get:

<S_CODE_TOKEN>

If I however do the following:

<S_CODE_TOKEN>

I get:

<S_CODE_TOKEN>

Which is correct.

If I change my `test.js` to the following:

<S_CODE_TOKEN>

It works properly:

<S_CODE_TOKEN>
",kjbekkelund,2012-01-20 12:09:53
22,2012-01-20 10:58:52,"As soon as I place one newline after the heading it works:

<S_CODE_TOKEN>

This gives `<h1>title</h1>`. I would, however, expect this to return an `h1` when there are no newlines.
",kjbekkelund,2012-01-20 12:09:53
22,2012-01-20 11:08:00,"Hmm, markdown.pl agrees with you, I'll push a fix soon. 
",chjj,2012-01-20 12:09:53
21,2012-01-10 09:55:55,"Sometimes you do not want to parse and convert all markdown into html.
Maybe someone do not want links,etc. to be parsed. node-discount does it this way.

Kind regards
",thomasfr,2013-01-08 07:52:33
21,2012-01-10 22:21:20,"This is a good idea. Something I've considered for a while: https://github.com/chjj/marked/pull/5

I want to do it in a way that allows marked to be more hackable instead of adding options. I'll leave this open for now.
",chjj,2013-01-08 07:52:33
21,2013-01-08 07:52:22,"Although marked has become more extensible in the past year, it's still not perfect extensibility-wise.

> Maybe someone do not want links

For example, if you don't want links parsed you could do:

<S_CODE_TOKEN>

 This has been discussed in a lot of issues now, although this is one of the first issues that mentioned it, I'm going to close it for now. When this does happen it will be discussed.
",chjj,2013-01-08 07:52:33
20,2012-01-09 06:24:15,"<S_CODE_TOKEN>

Markdown.pl's behavior is more intuitive:

<S_CODE_TOKEN>
",jgm,2012-01-09 17:37:48
19,2012-01-09 06:20:16,"<S_CODE_TOKEN>
",jgm,2012-01-09 17:37:48
18,2012-01-09 06:16:25,"Read the syntax document's explanation of code spans carefully - it's a bit more complicated than marked seems to assume.

<S_CODE_TOKEN>
% Markdown.pl 
<S_CODE_TOKEN> <S_CODE_TOKEN></code></p>

% ../marked/bin/marked
<S_CODE_TOKEN> <S_CODE_TOKEN>`
</p>
<S_CODE_TOKEN>
",jgm,2012-01-09 17:37:48
17,2012-01-09 06:07:17,"The syntax doc is explicit on this. Many implementations don't notice.

<S_CODE_TOKEN>
",jgm,2012-01-09 17:37:48
16,2012-01-09 06:04:20,"The markdown syntax document is pretty explicit that the marker doesn't matter:

<S_CODE_TOKEN>
",jgm,2012-01-09 17:37:49
15,2012-01-09 06:00:26,"<S_CODE_TOKEN>

Of course it is arguable what counts as proper, since the standard is so vague.  But I would expect (and good markdown implementations provide):

<S_CODE_TOKEN>
",jgm,2012-01-09 17:37:48
15,2012-01-09 17:40:55,"Your example produces misnested tags with Markdown.pl. Are you sure this is correct?

<S_CODE_TOKEN>

Anyway, even if markdown can't do it, it does seem like the right thing to be doing.
",chjj,2012-01-09 17:37:48
15,2012-01-09 18:07:27,"Sorry - forgot that Markdown.pl is buggy on this example! But pandoc,
discount, peg-markdown, PHP Markdown, etc. handle this as you'd expect:

<S_CODE_TOKEN>

+++ Christopher Jeffrey [Jan 09 12 09:40 ]:

> Your example produces misnested tags with Markdown.pl. Are you sure this is correct?
> 
> <S_CODE_TOKEN>
> 
> Anyway, even if markdown can't do it, it does seem like the right thing to be doing.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/chjj/marked/issues/15#issuecomment-3416843
",jgm,2012-01-09 17:37:48
15,2012-02-16 11:45:20,"um could it be that the same still goes for the alternate syntax, as:

<S_CODE_TOKEN>

sadly produces

<S_CODE_TOKEN>

while it should produce

<S_CODE_TOKEN>

rendering as

_foo __BAR__ works_

I didn't want to hack on your RE's since I'm not aware of other sideeffects, but maybe it is an easy fix like the one for *****-Syntax
",lennart,2012-01-09 17:37:48
15,2012-02-16 17:33:21,"Not sure how I overlooked this and not `*foo **foo** bar*`. Thanks for the heads up. I'll push a fix to npm today.
",chjj,2012-01-09 17:37:48
14,2012-01-09 05:55:13,"<S_CODE_TOKEN>
",jgm,2012-01-09 17:37:48
13,2012-01-09 05:50:21,"<S_CODE_TOKEN>
",jgm,2012-01-09 17:59:34
12,2012-01-09 05:48:56,"<S_CODE_TOKEN>
",jgm,2012-01-11 15:28:33
12,2012-01-10 22:43:28,"I realized markdown handles this properly, but I can't help but think how contrived that example is.

I have a fix for it in place, but I want to experiment with it some more to make sure it's not hurting performance.

Anyway, thanks for taking the time to post these. 
",chjj,2012-01-11 15:28:33
12,2012-01-10 23:05:02,"+++ Christopher Jeffrey [Jan 10 12 14:43 ]:

> I realized markdown handles this properly, but I can't help but think how contrived that example is.
> 
> I have a fix for it in place, but I want to experiment with it some more to make sure it's not hurting performance.
> 
> Anyway, thanks for taking the time to post these.

Thanks for the fixes.  I don't know if I'll ever use marked myself, but
it's great to have a pure javascript implementation that performs so
well.  I've written several markdown implementations myself, so I was
just curious how marked did on various corner cases, and thought it was
worth posting the issues.
",jgm,2012-01-11 15:28:33
11,2012-01-09 05:46:58,"As specified in the syntax document, and demonstrated thus:

<S_CODE_TOKEN>
",jgm,2012-01-09 17:37:48
10,2011-12-18 10:41:15,"I see on line 506, in parse(), you separate tokens with a space which makes viewing the rendered HTML source really hard to read. If you could change that single space to a newline then it makes all the difference and is no more or less efficient in bandwidth as the resulting filesize is the same.

<S_CODE_TOKEN>
",markc,2011-12-31 01:31:18
9,2011-12-07 16:04:18,"Github understands <S_CODE_TOKEN><S_CODE_TOKEN> javascript
var a = 2;
console.log(a);
<S_CODE_TOKEN><S_CODE_TOKEN> javascript
var a = 2;
console.log(a);
```

It would be nice to make `marked` understand such blocks. That's significant sometime, when you like to use existing readme in generated docs.
",puzrin,2012-01-04 08:14:08
9,2011-12-09 18:09:27,"Something I'm playing around with: abc07f26040b0a73dc5139a7d01904a5829f8b87
",chjj,2012-01-04 08:14:08
9,2011-12-09 18:39:25,"Thanks a lot. If you need ""integration tests"", you can use our NDoc https://github.com/nodeca/ndoc . Change readme in /tests with ``` markup, run `make prototest`, and see result.
",puzrin,2012-01-04 08:14:08
9,2011-12-09 20:01:11,"this doesn't seem to be working in the latest npm

<S_CODE_TOKEN> javascript
var marked = require('marked')
var x = ""<S_CODE_TOKEN>""
console.log(marked.lexer(x))
<S_CODE_TOKEN>
",mikeal,2012-01-04 08:14:08
9,2011-12-09 20:08:35,"Ups, really.

chjj, i've checked @ github - it understands notation both with spaces and without, between ``` and language name
",puzrin,2012-01-04 08:14:08
9,2011-12-10 06:08:10,"@mikeal, it's on a separate branch right now. It will land in npm eventually.
",chjj,2012-01-04 08:14:08
9,2011-12-28 09:24:51,"hi!

Any news about release with ``` ?
",puzrin,2012-01-04 08:14:08
9,2011-12-31 01:47:03,"I'm deciding whether to just have GFM enabled by default. It's probably what I'll do, but there are things I don't like about GFM. The automatic line breaks for example. Markdown already has a brilliant mechanism for `<br>`. I'm thinking about just removing this GFM feature when I implement it. There are little things I'm worried about like that. GFM will also make marked slower even if you don't use it.

Any feedback? Once I stop being indecisive, I'll probably land it.
",chjj,2012-01-04 08:14:08
9,2011-12-31 06:59:06,"1. I think, problem sould be solved when exists :) . Since nobody asked about GFM line breaks, those are not needed right now. Having ``` is noticeable and significant in real life, at least for me :) . Just wait until at least 1 person asks about another features. Maybe, you will rewrite makred many times, until that happens - and that will not be problem with new archtecture.
2. If i really care about speed, i'll use C implementation. Something like Roboskirt binding to Sundown. We use your module in NDoc for other reasons:
   - it was easy to make it work (yes, we tried not only marked).
   - you fix problems fast
",puzrin,2012-01-04 08:14:08
9,2012-01-03 06:25:35,"> it was easy to make it work (yes, we tried not only marked).
> you fix problems fast

Thank you for the compliments.

I've just pushed GFM to the master branch along with some other fixes ( c94db866bf35ec5c5ff90bfea3979b8813a0278a and 298a437d9bf4b1f0c2ba6cba4dc681aa9ae4fef6 ). It will land in npm soon. I've decided to never include the GFM `<br>` because it's so poorly thought-out. GFM code blocks are included ( a6a3239df8b84e87890b545b5e5548949b45d3ec ). They add a `lang` property on the token depending on the language.

edit: Also, since you mentioned markdown C implementations. It's probably worth mentioning, marked has undergone an optimization which has left it about 90% of the speed of Discount.
",chjj,2012-01-04 08:14:08
9,2012-01-03 10:45:22,"May be i did somerthing wrong, but i can't find lang property.

   ''' javascript
   var a = jstest;
   console.log(jstest);
   '''

produces

<S_CODE_TOKEN>

But i expected something like `...<code class=""javascript"">...`
",puzrin,2012-01-04 08:14:08
9,2012-01-03 16:36:58,"Sorry, I should have been clear. The `lang` property is on the actual token.

<S_CODE_TOKEN>
$ marked -t
<S_CODE_TOKEN>
^D
[
  {
    ""type"": ""code"",
    ""lang"": ""js"",
    ""text"": ""hello world""
  }
]
<S_CODE_TOKEN>
",chjj,2012-01-04 08:14:08
9,2012-01-03 16:59:29,"can you add `class=""langname""`  to code block by default ? That will not conflict with anything and will be convenient for highlighters.
",puzrin,2012-01-04 08:14:08
9,2012-01-04 03:49:01,"I added something along the lines of `<code class=""lang-js"">`. 8fac45b9846342565e0e0c07baa0cad77c0d5666
",chjj,2012-01-04 08:14:08
9,2012-01-04 04:15:07,"I know only one highlighter, that is ported no node.js - [highlight.js](https://github.com/isagalaev/highlight.js). It's better to remove prefix `lang-` for it (see readme there).

In case if someone will use [google prettify](http://google-code-prettify.googlecode.com/svn/trunk/README.html), lang format does not matter.
",puzrin,2012-01-04 08:14:08
9,2012-01-04 08:14:08,"Alright. Updated and pushed to npm. I'll close this issue for now.
",chjj,2012-01-04 08:14:08
8,2011-12-02 08:05:27,"If text have 2 empty lines after block quote, then empty line is attached to quoted text after rendering. That should not happen.

http://imm.io/cmoh
",puzrin,2011-12-05 06:05:55
8,2011-12-03 10:04:03,"Hmm, @dvv mentioned this the other day in a line comment. It looks like markdown.pl ensures a trailing \n for some reason, but I think you guys are right. It is ugly. I'll have marked slice off the trailing line feed.
",chjj,2011-12-05 06:05:55
8,2011-12-05 03:52:31,"Fixed: c8f26acd125c2ddabe49a0e1b48ef19504614a36

Also pushed to npm.
",chjj,2011-12-05 06:05:55
8,2011-12-05 03:55:47,"Also, I'm assuming you were referring to code blocks when you posted this. Not blockquotes. Blockquotes don't grab the trailing line feeds. Let me know if you meant otherwise.
",chjj,2011-12-05 06:05:55
8,2011-12-05 06:05:55,"It's ok now, thank you for fix.
",puzrin,2011-12-05 06:05:55
7,2011-11-26 06:22:10,,dvv,2011-11-26 07:23:46
7,2011-11-26 07:20:22,"Hmmm, I'm not sure about this. If you look at [this test](https://github.com/chjj/marked/blob/master/test/tests/links_reference_style.text) from the test suite, you can see that at least reference links allow space, and even line feeds. So, `[foo]   [bar]` would be a link. That leads me to believe `[foo]   (bar)` would also be a link. I'll have to take a look at the original markdown.
",chjj,2011-11-26 07:23:46
7,2011-11-26 07:23:22,"Ah, you're right. Whitespace isn't allowed.
",chjj,2011-11-26 07:23:46
7,2011-11-26 07:32:07,"Thanks! Wouldn't you check for the similar possible pitfalls in other tokens? And please, consider publishing to npm.
TIA,
--Vladimir
",dvv,2011-11-26 07:23:46
7,2012-12-15 00:56:47,"Actually I found out the in GFM (wiki pages), the whitespace in the reference is OK. `[This is the title]` `(This is the link)` will create a link to This-is-the-link.

Also, it seems to me that marked does not support this syntax `[[This is the title|This is the link]]`

(I'm writing a wiki engine which should be used by people used to the GFM markup...)
",claudioc,2011-11-26 07:23:46
6,2011-11-16 14:37:23,"Hi!

If output from `marked` is fed further to syntax highlighter (say, [https://github.com/andris9/highlight]) the resulting output contains html entities codes instead of symbols.

Wonder if you could make call to `escape()` optional, or, better, make `escape` configurable from outside function.

**update**: `marked.escape` would fit perfectly, i believe.

TIA,
--Vladimir
",dvv,2012-02-13 06:04:11
6,2011-11-16 19:32:09,"Yeah, I see what you're saying. This sort of delves into another problem. I need to refactor marked completely so it's able to be modified from the outside. I explained it a bit in [this pull request](https://github.com/chjj/marked/pull/5). I should really work on it and see what I can do. It looks like people really need this for sanitization, syntax highlighting, and something like GFM.

I'm not sure exposing `escape` would help too much. If you just had `escape` do nothing, the code you're trying to highlight wouldn't be escaped, but nothing else would be either. I guess maybe the best thing would be to expose a special escape function/callback to give a chance to highlight code.
",chjj,2012-02-13 06:04:11
6,2011-11-17 06:49:24,"Well. Currently I'm using visionmedia/jade for rendering. It's capable of escaping per se. Hence, in my patterm, I'd just use identity `escape()` and let `jade` do escaping.
",dvv,2012-02-13 06:04:11
6,2012-01-02 23:08:11,"I'm thinking of just checking for an `escaped` property on each code token. If `escaped` is present, marked will not escape the code. This would allow for a syntax highlighter to highlight the text contained on the token before feeding it to the parser.

An implementation could look like:

<S_CODE_TOKEN>
",chjj,2012-02-13 06:04:11
5,2011-10-30 00:08:58,"I added the possibility to ignore HTML markup by applying a second argument to the function call.

<S_CODE_TOKEN>

This will print

<S_CODE_TOKEN>

You can test the behavior via

<S_CODE_TOKEN>

This change should not impair marked's performance. If you don't use the second argument, everything remains the same as before. Then there's only one additional condition for each call of the function.

This comes in handy when you want to use markdown for user input on your website as it prevents users from doing XSS.

I hope you find this usable. At least, I do. ;-)
",pvorb,2011-10-30 04:11:40
5,2011-10-30 04:11:40,"I'm really uneasy about something like this. I would prefer to make marked modifiable and hookable from the outside, as opposed to adding options. That would allow many different extensions and anything the user wanted really. Although your code should work, there's also the performance issue. v8 might be smart enough to optimize those boolean checks out, but it still feels like the wrong way of going about it, which is why I haven't implemented anything like that yet.

Ideally, what I would like for a user to be able to do is something like:

<S_CODE_TOKEN>

I have 2 different (local) branches where I've implemented this, but it's not quite the way I want it.

I really appreciate the interest though. If you want this kind of capability right now, you can still alter it from the outside, it will just be more hack-like.
",chjj,2011-10-30 04:11:40
5,2011-10-30 12:48:02,"Ok. I think that would be more convenient, but it would also require more overhead. So I'll stick with my fork for the moment until you add such functionality.
",pvorb,2011-10-30 04:11:40
5,2013-07-25 17:41:35,"Hey @pvorb @chjj do you guys have a working example of how to ignore blocks of HTML data?
",matsko,2011-10-30 04:11:40
5,2013-07-26 08:15:09,"@matsko What do you mean with ""blocks of HTML data"". Only selected blocks? Comment them out:

<S_CODE_TOKEN>
",pvorb,2011-10-30 04:11:40
5,2013-07-26 08:17:56,"@matsko Setting [`sanitize`](https://github.com/chjj/marked#sanitize) to true will ignore all HTML input.
",pvorb,2011-10-30 04:11:40
4,2011-10-03 19:34:34,"I have run across a slight problem with marked when trying to render html with line breaks between the attributes:

<S_CODE_TOKEN>

I know this is not a normal use case but as far as I know it is valid html, I am willing to submit a patch if I can get some pointers on where/ how to modify this behavior.
",jxson,2011-10-06 18:26:05
4,2011-10-03 23:05:23,"It is easily fixable. It works that way because marked automatically encodes any angle brackets you have, but it needs to be able to distinguish them from brackets in html tags. An easy way to do it was to require that a tag be on a single line. I'm not sure of the behavior of the original markdown here.

I think I'll revise it a bit for some smarter behavior.
",chjj,2011-10-06 18:26:05
4,2011-10-06 18:26:05,"0d5e7884e21f66e3a4df7e3bca268dc5971ffe54 

That should allow for multiline tags. It passes all tests, but I'm still going to wait a bit before pushing it to npm.
",chjj,2011-10-06 18:26:05
4,2011-10-07 18:32:31,"Great! Thanks for jumping on it so quickly :)
",jxson,2011-10-06 18:26:05
3,2011-09-13 13:03:23,"I'm not sure whether this is a bug in marked or a symbol I need to escape, but parsing: 

<S_CODE_TOKEN>

results in a new paragraph starting and the header ending on the # in #/bla and doesn't give me a link (to #/bla) in the header.

Thanks for marked, I'm using it in coffeekup in a zappa project and it's awesome to parse markdown so easily.
",rdrey,2011-09-14 17:20:46
3,2011-09-13 15:06:29,"Ah, yeah, that is definitely a bug. I'm on it.
",chjj,2011-09-14 17:20:46
3,2011-09-13 15:07:58,"sweet, thanks!
",rdrey,2011-09-14 17:20:46
3,2011-09-14 17:20:46,"fixed 2c21b61189828390fcf240c69007a045ad5e39a1
",chjj,2011-09-14 17:20:46
3,2011-09-14 17:22:19,"also, this should now match the exact behavior of the original markdown. it was something that wasn't included in the test suite.
",chjj,2011-09-14 17:20:46
3,2011-09-19 12:29:16,"awesome! now i can generate clean html with fewer hacks.
",rdrey,2011-09-14 17:20:46
2,2011-09-02 07:21:52,"Curious about how this compares to
https://github.com/visionmedia/node-discount

Either way, I like yours because I was able to install it, no C-compiling, yay!

Also, I like that GFM is on your roadmap :)
(Hopefully you can do the newer version that they use on the site, but if not that's cool too).

Cheers and thanks for working code!
D
",DTrejo,2011-10-15 08:39:27
2,2011-09-02 16:43:35,"Thanks. I haven't benchmarked against discount. I would imagine discount would be faster given that it's written in C, unless the cost of switching back and fourth between js-land and c++-land is very expensive.

The version of GFM I've been working on includes code fences, auto-url-links, words with multiple underscores, and line breaks after each line feed. I'm not sure if I'm missing something.
",chjj,2011-10-15 08:39:27
1,2011-08-20 10:43:32,"When ""loose"" lists, as they're called (lists with their items separated by 2 line feeds), get implemented, it introduces some ambiguity to parsing. This is a bit of a problem with the markdown grammar itself.

<S_CODE_TOKEN>

What is that? Is it 2 separate lists? One tight, one loose? Is it three lists? One with 2 items, and 2 with one item? Is it a single list with the items spaced differently? The only solution I see, is to actually always separate consecutive lists by 3 line feeds: 

<S_CODE_TOKEN>

Which would be rendered as 2 lists: one tight, one loose. This is probably what will happen once I merge the experimental branch.
",chjj,2011-08-23 05:12:56
