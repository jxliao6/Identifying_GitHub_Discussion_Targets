issue_num,datetime,body,login,mention_login
855,2017-03-01 13:34:41,"@matt- Those are just `...`, not  
<div style=""background:red"">
## x
</div>
.

<div style=""background:red"">
## x
</div>

.
```
yields
![4](https://cloud.githubusercontent.com/assets/1230531/23461790/9dc2f4ec-fe8b-11e6-96bc-b2b687b0def0.png)

This behavior looks wrong to me. Am I missing anything obvious?
",nerai,matt-
852,2017-02-09 22:03:16,"@matt- Yeah, I can add a test for it.",jeremyblalock,matt-
852,2017-02-10 18:27:42,"@matt- I updated the invalid link test / added a new one for the `decodeURIComponent` failure. 

On another note, noticed that we are not quite following the recommended test setup as described in the documentation, though. I don't see `links.sanitize.html` in `tests/new`. And so when you run `node test --fix` it will delete this test case, which I'm guessing is not the desired behavior. Are we ditching the `test/original` / `test/new` structure in favor of just putting everything in `/test/tests`? Let me know, I can move the files around if necessary get the `node test --fix` working properly.",jeremyblalock,matt-
852,2017-02-28 23:35:35,@matt- @chjj: any decision on this? This will produce the same behavior that github has in their markdown rendering support for data: urls.,jeremyblalock,matt-
849,2017-02-04 09:15:09,"@Jiang-Xuan 测试的时候字符串里没法打回车。
单行代码：\`\`\`testcode\`\`\`

多行代码：
\`\`\`
testcode
testcode2
\`\`\`

我遇到的是列表下面的多行代码有回车会被截断:
\- lsit1
\`\`\`
testcode1

\`\`\`
\- lsit2
\`\`\`
testcode2
\`\`\`

这种情况- lsit2被标记成了代码，我是想让testcode1,testcode2成为代码",1010543618,Jiang-Xuan
849,2017-02-04 10:39:05,@Jiang-Xuan 我是这几天才看的markdown，以前一直没接触过，感觉每种解析器的解析都有点差别。我是准备想办法让\`\`\`包裹的代码块里的换行不被列表的\-识别了当成结束列表，但js没学好=\_=。我再试试不然就像你说的先结束了列表在用代码块。十分感谢^\_^,1010543618,Jiang-Xuan
849,2017-02-04 11:03:10,@Jiang-Xuan 恩，造个轮子可有点难。反正假期有空好好研究研究作者的代码,1010543618,Jiang-Xuan
849,2017-02-12 16:24:07,"@fadiquader 
eh... I just tried this method,but it can only remove white space characters or other predefined character on either side of the string.  
I want to remove line feed character in a one string.  
Maybe I should use regular expression to match \n\n and remove one \n.  
Thank you.",1010543618,fadiquader
846,2017-02-05 21:40:09,"@Drew-S Good idea, vote for this! That's what I needed implementing plugins #821.",rumkin,Drew-S
845,2017-02-10 08:29:38,"@badbye 
If you edit `marked.InlineLexer.rules.em` to `/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/`.

`_marked_` can not to generate `em` element",Jiang-Xuan,badbye
844,2017-02-14 01:04:21,"Heya @matt- 
Can we expect a version bump out soon? We're interested in this fix and would like to avoid depending on a specific github commit if possible. ;)  ",paulirish,matt-
844,2017-02-15 17:43:07,"@paulirish note in the meantime you can also use a Snyk patch (see the bottom of https://snyk.io/vuln/npm:marked:20170112). 

When we initially reported the problem it had no fix, but once Matt created a fix we captured it as a Snyk patch too. More about Snyk patches here: https://snyk.io/docs/security 
",guypod,paulirish
821,2017-02-05 21:31:32,@jHoldroyd Thanks. Fixed this.,rumkin,jHoldroyd
821,2017-02-10 11:35:01,@naivefun Do you expect to see exact plugin example?,rumkin,naivefun
821,2017-02-10 11:45:23,"@rumkin actually it is very straightforward, but still if there are very common use cases like @youtube, @vimeo, even @tweet, that would be great for beginners to learn.",naivefun,rumkin
821,2017-02-13 09:37:44,@naivefun Done.,rumkin,naivefun
821,2017-03-03 12:48:41,"@jHoldroyd There is one issue with that regexp it will not match single space.



This will not be matched, it mean that single tab would not be matched too. So I've replaced `(\s+){2,}` with `(\s{2,}|\t{1,})`, this is [updated regex](https://regex101.com/r/76YMYB/3).

Thanks for help.",rumkin,jHoldroyd
799,2016-12-27 11:01:19,"@wookayin I found that [markdown-here](https://github.com/adam-p/markdown-here) forked this project and it support LaTeX.

Then I copied his [marked.js](https://github.com/adam-p/markdown-here/blob/master/src/common/marked.js), then


Usage: ${YOUR_LaTeX_Code}$
Ex:
`$E = \frac{mc^2}{\sqrt{1-\frac{v^2}{c^2}}}$`

;)",j16180339887,wookayin
799,2017-01-27 12:10:31,"@ViktorQvarfordt Great work!

Since you are already parsing the input, do you think you could return the delimeters and the contained TeX separately? This would allow for easy renderers like:



without further parsing.",hgustafsson,ViktorQvarfordt
784,2016-09-27 19:50:42,"I agree with @Feder1co5oave this works exactly the same as Github and works as expected. 
",matt-,Feder1co5oave
781,2016-08-06 22:02:00,"@d-prime Is this issue resolved? If so, please close it. Thanks!
",RyanZim,d-prime
777,2016-07-27 22:09:55,"@kittykatattack Are you running your JS in node.js? If so, you can do:


",RyanZim,kittykatattack
777,2016-08-06 22:02:49,"@kittykatattack If this resolves things for you, please close this issue. Thanks!
",RyanZim,kittykatattack
773,2016-08-11 14:10:28,"Thanks @Feder1co5oave, had something similar in mind but was hoping for a cleaner solution.
",sn3p,Feder1co5oave
772,2016-08-30 04:19:02,"@Feder1co5oave  THX
",xueyuchen,Feder1co5oave
771,2016-08-07 17:45:06,"Hi @Feder1co5oave ,
Yes, I got it working, I meant. If you were to put just a link without formatting `[]()` for images would it parse them correctly. But solution I used was, after filtering links, I filter link to check if it is image and used above markdown as you mentioned.
",feruzm,Feder1co5oave
756,2016-06-12 10:47:46,"@chjj Hey Jonathan, thanks a lot for your input. I know it can be hard to let go - I've been there. But it's not that you forgive your rights as the original author and repo owner. You still get the email for the PR and if something is not going the way you want it you can just speak up. By adding other contributors you will just share the load on the easy stuff. You can still veto bigger changes. Best case you got some contributor growing to understand the all the details of the code base. Just give it a leap of faith.

And all is better than not fixing the security issue like it at the moment. So having at least one more contributor that also has access to npm would be fantastic.
",tcurdt,chjj
756,2016-06-12 11:15:43,"@tcurdt, maybe I gave the wrong impression. I have no problem with others taking over development of marked. I have no issues with letting go. In the past I was just hesitant for someone else to have full autonomy because I was so protective of marked's performance. I had pretty strong opinions about what marked should be. Of course, it didn't matter that I didn't have another maintainer back then since I was still actively working on it, and marked isn't a very large project to begin with.

Anyway, things change, I've changed. I'm open to maintainers and contributors adding more features despite minor perf hits.

So, to be clearer this time, I'm completely open to whatever comes of this. Another maintainer would be great. Multiple maintainers would be even better (no more single point of failure (me)). We'll see what happens here.
",chjj,tcurdt
756,2016-06-13 10:34:43,"@chjj It's great that marked won't die. How will you choose maintainers? Public vote for them? Or your personal choice? 
",lgg,chjj
756,2016-06-14 21:21:40,"Hi @chjj,
I submitted https://github.com/chjj/marked/issues/592 and would be happy to contribute a maintainer.  I am currently working for a security company building runtime data flow analysis in Node. I think I would be able to contribute. 
",matt-,chjj
756,2016-06-16 17:14:25,"I feel like given the popularity of `marked` we should definitely keep the project going and at least keep it maintained and suitable for use in other important projects!
As for me I would be glad to help tidy up the issue list, review and merge pull requests, and work out some fixes as well (I have a pretty good understanding of most of the code by now).
Many issues need to be closed or tagged, important fixes must be applied (e.g. the one by @matt-).

There are also some feature requests that are legitimate but I am unsure whether they should be included in marked. I feel like we should set some guidelines about philosophy and future development.
_For example_, what to do about automatically generated IDs for headers ( #664 ), inline links with parenthesis ( #619 #448 ), github task lists ( #689 )...

We would also appreciate some kind of comment from @ChrisWren since he's been a maintainer for a long time. He's been pretty inactive on Github for a while so we'd understand if he is busy at the moment. Just givin' him a shout out.
",Feder1co5oave,matt-
756,2016-06-19 07:01:39,"Hey @Feder1co5oave I only made some README improvements a long time ago when I was learning about node.js. I no longer am actively writing node or using this project so I won't be contributing. Would be cool for other people to maintain who are using it and want to add features/improvements.
",ChrisWren,Feder1co5oave
756,2016-07-07 07:27:19,"@chjj Hey Jonathan, could you? Please.
",tcurdt,chjj
756,2016-07-07 22:55:23,"I've added @matt- and @parleur as contributors. Thank you guys for stepping up. This repo needs maintenance. Once we get something going here we can get a better idea of where the project is headed. You guys have full authority for merging PRs. Any major features (i.e. new syntax) should be thoroughly discussed in PRs first. I'll try to keep my eye on PRs that propose any new features and give my input, but I don't think I should be a dictator of this project anymore.

I will be here to publish new versions in NPM once they're tagged.

I apologize to everyone for the stagnation of this project over the past several months. I think we can pick up where I left off though.
",chjj,matt-
756,2016-07-07 22:55:23,"I've added @matt- and @parleur as contributors. Thank you guys for stepping up. This repo needs maintenance. Once we get something going here we can get a better idea of where the project is headed. You guys have full authority for merging PRs. Any major features (i.e. new syntax) should be thoroughly discussed in PRs first. I'll try to keep my eye on PRs that propose any new features and give my input, but I don't think I should be a dictator of this project anymore.

I will be here to publish new versions in NPM once they're tagged.

I apologize to everyone for the stagnation of this project over the past several months. I think we can pick up where I left off though.
",chjj,parleur
756,2016-07-07 23:19:44,"@chjj thanks. and awesome work on this library so far
",SimonCropp,chjj
756,2016-07-08 05:43:06,"@SimonCropp maybe left it open for some more time. until others will recognize that project is still alive?
",lgg,SimonCropp
756,2017-02-21 23:10:26,@chjj won't version bump or push out the currently merged stuff (including security issues). Our hands are tied. ,matt-,chjj
756,2017-02-21 23:29:03,I guess having someone else being able to push to npm is more important than having access to this repo. Maybe @chjj could just do that?,tcurdt,chjj
756,2017-02-22 18:08:28,"@markstos That would work, as long as this repo is deprecated and noted in the README to point to the new, active repo. Otherwise you're just adding one more fork to the existing [1685 forks](https://github.com/chjj/marked/network) out there. 🍴 ",styfle,markstos
756,2017-02-22 18:41:22,"@styfle but how many forks have published on NPM? 

Developers are responsible for evaluating the quality the module they are choosing to integrate into their project. Checking a project's issue tracker for major update bugs, security issues and general maintenance before choosing a module can save considerable headache later.

In this case, there is already an open ""Call for Maintainers"" thread which should be flag for anyone evaluating choices for Markdown processors.",markstos,styfle
744,2016-04-30 01:18:53,"@nelsonlho 

(I'm not affiliated, but...)

I tried your link and got a 404.  Is your pen still active?  (Or did you resolve your issue?)
",scott-m-sarsfield,nelsonlho
739,2016-06-21 19:08:28,"@Turbo87 can you reopen this? There are other issues open for the preferGlobal flag to be removed. As long as this issue is closed, then people who search for this issue will conclude it has been resolved or is intentionally not being addressed. Better that the issue be open to indicate it's still an outstanding issue/request.
",jasonkarns,Turbo87
739,2016-07-08 18:14:28,"@Turbo87 could we reopen this now that there are new contributors on this repo (@matt- @parleur)
",mdentremont,Turbo87
739,2016-07-08 18:24:04,"@mdentremont unfortunately GitHub won't let me undelete the branch so I can't reopen. feel free to take the diff and open a new PR with it though.
",Turbo87,mdentremont
731,2016-09-03 21:00:28,"@sebastienbarre, yup, that's exactly what I needed it for at the time of filing the issue. Unfortunately though, I didn't have the time to create a custom renderer. So, I ended up using complex regexes in the update phase to solve my particular need. But that was only since the scope of what I needed was limited and well defined in nature. 
",prasannavl,sebastienbarre
731,2016-09-03 21:31:09,"@prasannavl a good soul just pointed out `remark`.

Here is how it can be done. The below example insert a TOC in your Markdown.



which will output:


",sebastienbarre,prasannavl
731,2016-09-03 21:41:55,"@sebastienbarre `remark` looks pretty neat. Thanks for sharing. :) 
As to the issue, I guess it'll just have remain as it is, for now.
",prasannavl,sebastienbarre
727,2017-02-21 23:22:20,@matt- you're right. @chjj seems to only works on [bcoin](https://github.com/bcoin-org/bcoin) now. That's why is switched to [markdown-it](https://github.com/markdown-it/markdown-it) instead. That is active and support [CommonMark](http://commonmark.org/).,noraj1337,matt-
726,2016-03-20 20:59:25,"@Feder1co5oave that's what I figured. I'd like to propose adding a feature to the marked lib that allows you to preserve whitespaces. I could always fork and use my own repo but I figure others might benefit from it as well. Thoughts?
",phutchins,Feder1co5oave
726,2016-04-15 00:00:08,"@phutchins One way to do this would be to create a new token of `type: break` in `Lexer.prototype.token`. Modify the current line break regex to parse to add these custom `break` tokens to `this.tokens`. From there just add this new `break` token to the switch statement in `Parser.prototype.tok`. I made this change in my local version and it works perfectly.

Although, I doubt @Feder1co5oave would be willing to merge such changes.
",amZotti,phutchins
726,2016-04-15 00:00:08,"@phutchins One way to do this would be to create a new token of `type: break` in `Lexer.prototype.token`. Modify the current line break regex to parse to add these custom `break` tokens to `this.tokens`. From there just add this new `break` token to the switch statement in `Parser.prototype.tok`. I made this change in my local version and it works perfectly.

Although, I doubt @Feder1co5oave would be willing to merge such changes.
",amZotti,Feder1co5oave
724,2016-02-23 06:40:59,"@webbedspace i feel that it's important to raise the issue to make other who probably are thinking the same, aware of whats happening. I have many times seeked the issuetracker to see if this question have been asked, and if a response have been made. Sometimes this issue can spark the contribution spirit in someone who will fork the project and keep it maintained somewhere else. Its all about sheeding light on an issue with the repository.
",Snorlock,webbedspace
724,2016-02-24 07:58:05,"@Snorlock Good point. And since this project's last commit would be nearly 7 months ago ( and 127 PRs  waiting to be merged ), it's easy to doubt that if this project is still on the track.
",allenfantasy,Snorlock
718,2016-05-15 18:13:29,"@ciel Thanks!
",inf3rno,ciel
712,2016-03-04 17:02:18,"@Feder1co5oave I added backslashes to prevent parsing this markdown here (by github). Actual source input.md has no ""\"".
",evil-shrike,Feder1co5oave
690,2016-02-17 08:10:47,"@dend I got the same problem
",hingsir,dend
682,2016-08-23 20:51:03,"In my case I was using `fs.readFileSync` (yeah...I know) and passing it's output to `marked()` which failed with this `replace` error. Casting the output through `String()` did the trick for reasons I know not nor have time (for this project) to dig into...sadly. Hopefully the research is helpful, though!

Having `marked()` return `null` while correct would've made debugging things for me worse, though, I agree with @ericclemmons that it's likely the correct behavior technically--or perhaps throwing an deliberate Error would be best.

---

Well...you know how you post something and then fix your bug?



Does the trick without the `String()` bit.
",BigBlueHat,ericclemmons
680,2015-11-18 07:18:12,"@Feder1co5oave line-number inside a blockquote is a bug. I will fix it.
",andr2,Feder1co5oave
680,2016-01-26 07:47:59,"@shd101wyy Hello! Unfortunately it only works for top level blocks, because it requires more serious refinement otherwise.
You can scroll proportionally by top level blocks
",andr2,shd101wyy
680,2016-04-20 22:31:13,"@andr2 I am having the same issue to solve. Did you stay with that solution? How is the final performance to the end user?

ps: I am using percentage of the editor/preview scroll position to synchronise the other panel.
",paulocheque,andr2
680,2016-04-21 13:11:41,"@paulocheque yes. For nested blocks I scroll proportionally (see code sample above). 
Performance is OK
",andr2,paulocheque
671,2015-11-15 21:46:59,"Thank you @Feder1co5oave for pointing that out
",onlineth,Feder1co5oave
667,2015-10-12 18:00:52,"@fnky Thank you very much. Problem solved. :)
",gaui,fnky
663,2015-09-23 23:16:56,"@joepie91: Does the `smartLists` option yield the same result?
",gscottolson,joepie91
659,2015-09-11 07:25:33,"@chjj Could you please provide a reference? For me this seems to be not deprecated (e.g. on [HTML5 Spec](http://www.w3.org/TR/html5/browsers.html#valid-browsing-context-name-or-keyword) or [W3Schools](http://www.w3schools.com/tags/att_a_target.asp).

Well of course there are lots of use cases where you want to open specific links (e.g. that were rendered via marked) in a new tab. For example I'm currently building a webapp where informations about documents are shown. These informations are written in Markdown and parsed with marked. However, if the user clicks on a link in the informations about a document he just wants to open that link in the foreground but don't want to leave the app completely (because he may want to open multiple documents). So in fact, this is a very important standard for me and I think for other too.
",julmot,chjj
659,2015-09-11 10:07:41,"@julmot, very interesting, the last time I looked at the whatwg spec (probably 2 or 3 years ago), target=_blank was deprecated. I'll reconsider. As a side node, I'd like to see the mailing list posts that got this back into the spec.
",chjj,julmot
659,2015-10-08 16:54:12,"This would be helpful, and what @drmuey says seems true (won't break prior code).  :+1: 
",posgarou,drmuey
659,2015-11-13 15:09:03,"@chjj 
",julmot,chjj
659,2017-01-18 03:37:30,"So, I need this and will be manually pulling code from this PR into a project.

@chjj, if you need another use case, here's one: I'm working on a Sandstorm app package. Sandstorm runs web apps in a sandbox, and restricts their behavior in the frame in which they live. External links *only* work in Sandstorm apps if they open in a new tab, therefore, all links for this app must have this behavior.

Code I am integrating from a non-Sandstorm version of this app uses marked.js, so in order for their code to work correctly in the Sandstorm version, I need this option.",ocdtrekkie,chjj
655,2015-09-17 15:34:19,"Push!? @chjj @drmuey 
",julmot,drmuey
655,2015-09-18 12:49:09,"@julmot in the meantime, just use a custom renderer with your own link method.
",adam-lynch,julmot
655,2015-09-23 17:32:29," @adam-lynch Could you please describe how?

@romanpitak A URL to a different subdomain would be also a different host but should be handled like an internal link. The same for a different top-level-domain like domain.es and domain.de.
",julmot,adam-lynch
655,2015-09-23 17:32:29," @adam-lynch Could you please describe how?

@romanpitak A URL to a different subdomain would be also a different host but should be handled like an internal link. The same for a different top-level-domain like domain.es and domain.de.
",julmot,romanpitak
655,2015-09-23 18:57:25,"@julmot **you are right** and that's why it was just a suggestion. I wrote the extension just to suite my own needs.
",romanpitak,julmot
655,2015-09-26 14:40:53,"@julmot :


",hardware,julmot
655,2016-05-31 08:42:43,"+1 for the @julmot is suggesting!
I'm surprised `{:target=""_blank""}` doesn't already work!
",KingScooty,julmot
652,2015-09-01 18:00:46,"@MichielDeMey, so why it should be installed globally?
",monolithed,MichielDeMey
642,2015-08-19 22:54:40,"@chjj Please be careful reviewing such PRs that break backwards compatibility.
If necessary, bump the minor or major version for npm package. This rule broke many headings for everyone doing `npm install` in the last week or so.
",nilgradisnik,chjj
642,2015-10-01 01:33:52,"@chjj please reconsider re-opening this issue. GFM does allow for `##Header` (though strangly not in comments) in repo content: https://github.com/bmneely/spartacus/blob/master/README.md
",bmneely,chjj
642,2015-11-09 04:09:07,"I think @bmneely is right and would also like to see this reopened.
",FuDesign2008,bmneely
626,2015-07-23 06:15:53,"@rgbkrk thanks :) I'll close this as a dupe.
",jsdnxx,rgbkrk
618,2015-07-15 19:30:48,"I try to set aside a day where I do nothing but PRs, but it gets trying. I'm open to more maintainers, which is why I've added a few others already.

To be comfortable with someone maintaining the code and accepting PRs, I'd have to know that they understand the code, and know, like you said, that they understand the philosophy of marked (**fast**, one file, the right balance of accurate features vs. intuitive features).

The trouble is, marked is written in such a bizarre way in order to optimize it that it's not easy to understand the code at this point (even for me sometimes). For example, if you change a regex, you better understand _every_ character of that regex, and which regex features produce faster or slower machine code in v8. For every one line change you make, you'd better run the benchmarks 3 or 4 times.

Maybe another way to do it, is if a maintainer doesn't understand a particular piece of code or regex to ping/email me (I'm not trying to say I'm smarter than everyone or anything like that: half the time I look at the code **I** can forget why a regex is written a certain way, etc).

I could also document every line of the current code, but that would take a lot of time and explaining.

Then again, the test suite is thorough (so thorough it looks like it's been borrowed by many other projects). Maybe that's good enough most of the time. Run tests and benchmarks (several times) for every change.

@rgbkrk, who else did you have in mind?
",chjj,rgbkrk
618,2015-07-15 23:02:53,"Thanks for the response @chjj!

In my case, the ""else"" I have in mind is likely other Jupyter and IPython developers. We use `marked` and `term.js` for the IPython notebook which is used by lots of researchers, scientists, and data scientists the world over. We'd prefer to help with existing community packages instead of creating complete forks ourselves.

At least for me, I think some mentoring time is useful. I can start learning more about profiling the current implementation as well as against, e.g. [commonmark.js](https://github.com/jgm/commonmark.js).
",rgbkrk,chjj
618,2015-07-23 21:13:34,"@chjj What do you think about @Pomax as an additional maintainer?
",rgbkrk,chjj
616,2015-07-31 09:30:27,"@papandreou, your PR caused 2 tests to fail. I've reverted it to the old rule changing `[\s\S]+` to `[\s\S]*` which passes your added tests.
",chjj,papandreou
616,2015-07-31 09:51:48,"@papandreou, I modified the old rule to allow no text within the code fences, so now the tests you added pass, along with all the others.
",chjj,papandreou
614,2015-08-03 23:31:00,":+1: 

This same thing confused me too. Thanks for the fix/usage-note @benjamingr 
",codeshrew,benjamingr
595,2015-05-28 20:57:58,"@helphi `|` isn't the [list of escapable characters](http://daringfireball.net/projects/markdown/syntax#backslash), so that may be why it isn't working. (I don't see anything in the GitHub spec about it either.)

Interestingly, I am also having trouble parsing tables with `|`, even when they're in code ticks, like so:



This renders correctly on GitHub:

| Tables | Are | Cool |
| --- | :-: | --: |
| In ticks: `|` | test | $4 |

But it renders incorrectly [on Gist](https://gist.github.com/getaaron/ae09afdefb031930cc1e) and when using marked.js.
",getaaron,helphi
595,2016-03-29 08:48:08,"@getaaron Escaping `|` wtih `\|` in tables is actually mentioned in the GitHub documentation [here](https://help.github.com/articles/organizing-information-with-tables/) (at the bottom of the page).
",ZombineDev,getaaron
595,2017-02-21 21:19:27,"From https://github.com/hexojs/hexo/issues/2414

@bdougie is right, that doesn't work with backquote either.

**Description** : pipes inside inline code block inside an array don't display correctly.

Markdown code:



Bugous behaviour:
![](http://i.imgur.com/DY7T8H9.png)

Espected behaviour:
![](http://i.imgur.com/0BNVXAp.png)

Render is: 



Have you plan a permanent fix?",noraj1337,bdougie
595,2017-02-21 22:32:53,"@ZombineDev `\|` is GFM (GitHub Flavored Markdown) (but is not Gruber's original Markdown) so Marked must support it as Marked claims to support GFM (activated by default).

Problems comes from the parser : roboskirt. roboskirt is not more updated but node-hoedown seems not either.
A better approach is to consider a CommonMark compliant parser (https://github.com/chjj/marked/issues/563).
[commonmark.js](https://github.com/jgm/commonmark.js), [markdown-it](https://github.com/markdown-it/markdown-it) and [remarkable](https://github.com/jonschlinkert/remarkable) all seems well updated an wide spreaded.",noraj1337,ZombineDev
593,2016-07-04 13:40:50,"@chanthus hey, how did you fix this issue?
",danderu,chanthus
592,2016-01-25 20:47:37,"@matt- any recommendation for alternatives?
",alexkravets,matt-
592,2016-01-26 10:01:46,"@matt- thanks a ton!
",alexkravets,matt-
592,2016-04-27 13:24:39,"@matt- Remarkable looks great (very very clean) but it's about 6x the size of Marked.  For some use-cases (client-side) it seems like Marked would be preferable on those grounds (though for anything else I'm probably going to be using remarkable given the focus on performance).
",developit,matt-
592,2016-06-03 15:46:51,"@matt- I was able to reproduce this in indeed. I may have been confused due to the fact that post-process links and images, mitigating this issue.
",mvhenten,matt-
592,2016-06-03 15:49:57,"@matt- sorry I work with @mvhenten and we thought it was resolved but it was only not affecting us due to post-processing. This is still a valid issue. Thanks for the test cases. 
",timjrobinson,matt-
592,2016-06-03 15:49:57,"@matt- sorry I work with @mvhenten and we thought it was resolved but it was only not affecting us due to post-processing. This is still a valid issue. Thanks for the test cases. 
",timjrobinson,mvhenten
592,2016-06-07 16:41:03,"@matt- You said that you made a fork - have you published in on npm? I agree with you that this module should never be used for any project if it has such a poor record of dealing with security issues, but there are already 1600 modules on npm that depend on it and having a version on npm with your patch applied would make it possible to quickly fix them (and who knows how many other modules that depend on those 1600) with a simple change of `require('marked')` to `require('marked-secure')` (or however your fork would be named) as a temporary fix before they can all be updated to use better markdown parsers.

Having a security vulnerability in at least 1600 modules on npm even though a fix has been available **for over a year** now but the maintainer can't be bothered to click a merge button is a serious problem. The project may be dead in a sense that its original author doesn't care about it any more but it's anything but dead when you consider its usage:
![](https://nodei.co/npm/marked.png?downloads=true&downloadRank=true&stars=true)
![](https://nodei.co/npm-dl/marked.png)
It's being used all over the place - [including the official Node.js website](https://david-dm.org/nodejs/nodejs.org) - it has 1.5 million downloads per month and growing.

I found out about this issue today by a coincidence because I saw **""dependencies: insecure""** badge in the [readme](https://github.com/nodejs/nodejs.org/blob/master/README.md) of the https://nodejs.org/ website's [GitHub project](https://github.com/nodejs/nodejs.org), which was linked to [the nodejs.org entry on david-dm.org](https://david-dm.org/nodejs/nodejs.org) that had a big red **""SECURITY VULNERABILITIES IN DEPENDENCIES""** and a link to the [marked content-injection advisory](https://nodesecurity.io/advisories/marked_content-injection) on the Node Security Platform - which in turn included a link to this very pull request. If I hadn't clicked that badge I would probably never know about any security problems with that module - I would certainly never go through all the issues and PRs to find this one or #724 and know that this projects is dead and insecure, because there is not even a hint about any problem with that module in its readme on GitHub and npm
",rsp,matt-
592,2016-06-12 11:23:10,"Especially @matt- please check out https://github.com/chjj/marked/issues/756
",tcurdt,matt-
592,2016-06-14 18:52:11,"@STRML I believe there must be a process - but I am not aware of any. That said - have a look at #756. I guess we just need someone that steps up.
",tcurdt,STRML
592,2016-07-13 14:52:37,"@matt- now that you're a maintainer can you merge / release this please :)
",timjrobinson,matt-
592,2016-07-29 18:16:36,"No reason to keep delaying on this, please merge @matt-
",STRML,matt-
592,2016-07-29 20:06:47,"@matt- Can you `npm version patch && npm publish` yourself or does it still have to be done by @chjj? The version on npm is still 0.3.5 published 12 months ago: https://www.npmjs.com/package/marked
",rsp,matt-
592,2016-07-30 03:07:41,"That is all @chjj

On Friday, July 29, 2016, Rafał Pocztarski notifications@github.com wrote:

> @matt- https://github.com/matt- Can you npm version patch && npm publish
> yourself or does it still have to be done by @chjj
> https://github.com/chjj? The version of npm is still 0.3.5 published 12
> months ago: https://www.npmjs.com/package/marked
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/chjj/marked/pull/592#issuecomment-236280610, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAbr4sQX5-C4C_BdSAvsUq5sjg32a6Tdks5qal1agaJpZM4Eg7pd
> .

## 

../matt
",matt-,matt-
592,2016-07-30 03:10:54,"@matt-, published. Great work guys.
",chjj,matt-
587,2015-05-08 00:39:53,"@jhollingworth 
Very cool. Hopefully this gets merged.
However this project doesn't seem very active anymore.
You might want to checkout [markdown-it](https://github.com/markdown-it/markdown-it)
",styfle,jhollingworth
587,2015-05-15 22:48:59,"@jhollingworth thanks for starting with the lexer as that fits my use case.
",toolbear,jhollingworth
587,2017-01-05 23:02:51,"I write my notes in [VS Code](https://github.com/microsoft/vscode) using markdown. Every time I go to make a task list I expect GFM behavior, but alas, it never works. I'd love for VS Code to change, but I think they've made [it clear](https://github.com/Microsoft/vscode/issues/2175) that they won't. The state of this project is making me sad. Come on guys, get your act together, be a man, pass the baton and let people help.
@matt- @chjj @parleur ",richarddavenport,chjj
587,2017-01-06 18:00:12,@matt- Good to see you approve this PR. What are the next steps to get this merged? Thanks!,styfle,matt-
578,2015-11-04 23:31:39,"@buob @chjj doesn't appear to do anything currently.
",amccloud,buob
573,2015-05-08 01:43:58,"@iamstarkov, marked has no dependencies for a reason. It shouldn't require a build for the browser. A lot of people just `<script src=""raw.github.com/.../marked.js>` in their html. There shouldn't be any requires. Changing this would break a lot of pages.

If they're just one-liners that's great. Let's include them inline.
",chjj,iamstarkov
561,2015-07-09 15:47:49,"This seems to be a broader issue with UTF-8 support. On github, my markdown documents render correctly, but using marked, `’`, `…`, and other characters become mangled (becoming `â€™`, and `â€¦`, respectively).

Adding `<meta charset=""UTF-8"">` into the `<head>` tag, as @aroneiermann suggested, does indeed result in correct interpretation on my end.

Since I can skip that declaration when the markdown is displayed on github, it suggests there a way that marked could make the output document be interpreted as UTF-8 automatically/by default. Does that seem feasible to you, @aroneiermann? Or do we cheat by being on github and having their document header?
",sansumbrella,aroneiermann
561,2015-07-14 21:27:22,"@sansumbrella The github header contains `<meta charset='utf-8'>`.

@southdesign The default HTML5 is UTF-8 and the default of HTML4 is ISO-8859-1 (also called Latin 1).

But I can still not reproduce this error.
Could you please run `console.log(marked(""ä""))`?
When I run this I get that  `<h1 id=""-bung"">Übung</h1>`.

A possible solution would be to use character entity. In special this mean replace `ä` with `&#196;`.
",aroneiermann,sansumbrella
561,2015-07-20 08:11:31,"@aroneiermann Yes, I get the same `<h1 id=""-bung"">Übung</h1>`. With UTF-8, I think the right result should be `<h1 id=""übung"">Übung</h1>`, as it works in URLs as well.

So I think this problem is part on the Browser end (you HAVE to declare UTF-8) which the specs say is standard with HTML5, part within the generation of the id tag which does not support UTF-8.

Do you think, the ID computation can be adapted to support UTF-8 easily?
I could give it a try, if you don't mind..
",fanktom,aroneiermann
547,2015-05-20 06:08:47,"@chjj any comments on this?
",sventschui,chjj
535,2015-03-27 07:47:34,"@tatsy by the way, where can I find `Markdown's image size specification`? Does spec exist?
",doortts,tatsy
535,2015-03-27 07:59:23,"Hello @doortts.

As you know, official Markdown does not support image size specification. So this is only an option.

If you'd like to specify image size in Markdown, I recommend you to use [markdown-it](https://github.com/markdown-it/markdown-it).

I already provides the plugin for this to specify image sizes ([markdown-it-imsize](https://github.com/tatsy/markdown-it-imsize)).
",tatsy,doortts
535,2016-03-27 21:03:30,"@chjj 

Apparently [Mou](http://25.io/mou/) does, but most that actually support this consider themselves derivatives AFAICT [1], like Kramdown and MultiMarkdown.

[1] This was only from a simple Google search, BTW. I'm not _that_ aware of the likely hundreds of implementations out there.
",isiahmeadows,chjj
535,2016-07-25 18:39:49,"👍 for this support in the future. Was wondering why this wasn't working. Thanks @tatsy, though it would be better with this merged
",webdevbrian,tatsy
533,2015-01-15 12:41:55,"Hey @joshlasdin, I did figure it out. I was using handlebars for my templates and my expressions were indented which effected the indentation of the preformatted code blocks. Everything was fine once I removed the indentations before my handlebars expressions. Good luck!
",ughitsaaron,joshlasdin
528,2016-12-03 23:40:46,"First, congrats for this wonderful library!

@chjj @patrickarlt Is there some news on this issue?

I also have identical `<h2>` names and then the anchor links #examples / id are not unique, that's a problem.

",josephernest,chjj
528,2016-12-03 23:40:46,"First, congrats for this wonderful library!

@chjj @patrickarlt Is there some news on this issue?

I also have identical `<h2>` names and then the anchor links #examples / id are not unique, that's a problem.

",josephernest,patrickarlt
497,2015-07-29 09:41:43,"@chjj can you help us? also see https://nodesecurity.io/advisories/marked_redos
",iamstarkov,chjj
497,2015-07-29 10:11:14,"@iamstarkov, rewritten. No more hanging. Tests passing. Should be okay now. Try the latest commit.
",chjj,iamstarkov
486,2014-09-20 03:28:21,"I encountered the similar  problem.



How to deal with this? @JAAulde 
Thank you.
",zhiyelee,JAAulde
486,2014-09-24 07:47:29,"@JAAulde Thanks. I found a solution more graceful, you can try this too.

`bower install chjj/marked#master`
",zhiyelee,JAAulde
485,2015-10-23 14:49:48,"@dvcrn if GitHub was, you wouldn't need to use an image as an example right? :stuck_out_tongue_winking_eye: 
",adam-lynch,dvcrn
485,2015-10-23 16:13:43,"Nice catch! @dvcrn ! 

@adam-lynch click the other link. You can see it at the top of that page. 
",elliottregan,adam-lynch
485,2015-10-23 16:13:43,"Nice catch! @dvcrn ! 

@adam-lynch click the other link. You can see it at the top of that page. 
",elliottregan,dvcrn
485,2015-10-23 16:15:13,"Elliott, thanks :). Weird how they render markdown differently here hmm

On Fri, 23 Oct 2015, 17:13 Elliott Regan notifications@github.com wrote:

> Nice catch! @dvcrn https://github.com/dvcrn !
> 
> @adam-lynch https://github.com/adam-lynch click the other link. You can
> see it at the top of that page.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/issues/485#issuecomment-150622089.
",adam-lynch,adam-lynch
485,2015-10-23 16:15:13,"Elliott, thanks :). Weird how they render markdown differently here hmm

On Fri, 23 Oct 2015, 17:13 Elliott Regan notifications@github.com wrote:

> Nice catch! @dvcrn https://github.com/dvcrn !
> 
> @adam-lynch https://github.com/adam-lynch click the other link. You can
> see it at the top of that page.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/issues/485#issuecomment-150622089.
",adam-lynch,dvcrn
485,2016-02-06 18:30:58,"FYI if people are still looking, @adam-lynch's comment [here](https://github.com/chjj/marked/issues/485#issuecomment-58087903) is _conceptually_ the way to go.

In terms of _implementation_, [metalsmith](http://www.metalsmith.io/) is really great for this type of thing, and includes a [metalsmith-markdown](https://github.com/segmentio/metalsmith-markdown) plugin that is built on top of [marked](https://github.com/chjj/marked). When used in combination with [metalsmith-layouts](https://github.com/superwolff/metalsmith-layouts), you can do some really cool things.

For example (in a `gulp` pipeline):



`metalsmith-layouts` is **automatically** looking for the `file.frontMatter` property set internally by [gulp-front-matter](https://github.com/lmtm/gulp-front-matter), and using it to render [handlebars](http://handlebarsjs.com/) data for a fixed set of `layouts`.

Example `markdown` (`myfile.md`):



Example `handlebars` template used by `metalsmith-layouts` (`documentation.html`):



Outputs (`myfile.html`):



None of this would be possible without the work by @chjj and team, so thanks for that.

I originally came here looking for answers, so hopefully this helps the next guy/gal.

Cheers.
",justinhelmer,adam-lynch
471,2017-01-08 09:58:13,"+1 for @dcsan and @alanguir , would be great to Cover such a thing with out additional `Gollum` filtering level.

Maybe with another option ? Like `gfmWiki: true` ?",yakivmospan,alanguir
471,2017-01-08 09:58:13,"+1 for @dcsan and @alanguir , would be great to Cover such a thing with out additional `Gollum` filtering level.

Maybe with another option ? Like `gfmWiki: true` ?",yakivmospan,dcsan
466,2014-08-12 00:20:41,"@anko thanks for idea, just published https://www.npmjs.org/package/macroed but separate macro processor
",golyshevd,anko
466,2014-08-12 13:00:09,"Good point @anko, the Unix philosophy causes great things.  

I will check this out @golyshevd! It's awesome how inspired you were to whip this up so quickly :)

I plan to start a project that focuses on scientific writing with Markdown. The idea is to have it be a UI that harnesses GitHub OAUTH and hosts papers with GitHub Pages.  Just looking to see what open-source is out there to build it all.  

I think your implementation would work. An intelligent person should be able to grasp the idea of syntax.    I just think it would be very cool if there was a universal macro syntax that enabled scientists the ability to turn written math into graphs.

This project inspired me...

https://github.com/vitoravelino/js-sequence-diagrams

I turned it into a service that let's you make sequence diagrams in Markdown. Still needs syntax though to manage the GET params. I'd love to convert it into a macro that accepted plain text with line breaks.  I suppose your code could offer that if I made use of the `%s` value.



![sequence](http://get-diagrams.com/sequence?json=[
    ""Andrew-->China: Says Hello"",
    ""Note right of China: China thinks about it"",
    ""China-->Andrew: How are you?"",
    ""Andrew-->>China: I am good thanks!""
    ])
",howardroark,golyshevd
466,2014-08-12 13:00:09,"Good point @anko, the Unix philosophy causes great things.  

I will check this out @golyshevd! It's awesome how inspired you were to whip this up so quickly :)

I plan to start a project that focuses on scientific writing with Markdown. The idea is to have it be a UI that harnesses GitHub OAUTH and hosts papers with GitHub Pages.  Just looking to see what open-source is out there to build it all.  

I think your implementation would work. An intelligent person should be able to grasp the idea of syntax.    I just think it would be very cool if there was a universal macro syntax that enabled scientists the ability to turn written math into graphs.

This project inspired me...

https://github.com/vitoravelino/js-sequence-diagrams

I turned it into a service that let's you make sequence diagrams in Markdown. Still needs syntax though to manage the GET params. I'd love to convert it into a macro that accepted plain text with line breaks.  I suppose your code could offer that if I made use of the `%s` value.



![sequence](http://get-diagrams.com/sequence?json=[
    ""Andrew-->China: Says Hello"",
    ""Note right of China: China thinks about it"",
    ""China-->Andrew: How are you?"",
    ""Andrew-->>China: I am good thanks!""
    ])
",howardroark,anko
466,2014-08-12 20:27:06,"@howardroark it is so unstable and just now, we refactor macro syntax to easier indent oriented. The current solution is so poor and it is so conflicting with markdown as post/pre processor. But tomorrow we should complete writing the code, tests and documentation. Our writers marking up so difficult articles and need flexible solution. Comimg soon=)
",golyshevd,howardroark
466,2014-08-12 20:30:08,"@golyshevd I'll keep watching the repo.  Good luck!
",howardroark,golyshevd
466,2014-08-14 19:44:36,"@howardroark look at that (it is still beta)




",golyshevd,howardroark
465,2015-01-04 01:00:35,"Has any decision been made on this? 

I see two issues here:
1. Ref links should require two sets of square brackets. 
   As @guypursey pointed out the first instance of [1] is treated as a ref link to the second instance. 
   This should not happen on a single pair of brackets.
2. The test is broken (def_blocks.text, and def_blocks.html).
   Assuming that this test pair are intended to contain ref links then both the input (def_blocks.text) 
   and expected result (def_blocks.html) ought to be modified accordingly. 
",andre-artus,guypursey
456,2015-03-10 20:02:21,"@F1LT3R definitely no.
",Feder1co5oave,F1LT3R
456,2015-03-10 20:13:10,"Ah Ok. Thanks @Feder1co5oave.

I've just been testing out your clean-segments commit and I think it's a great improvement. 

Is there something better NPM module for markdown that I should be using instead?
",F1LT3R,Feder1co5oave
456,2015-03-11 13:38:48,"@F1LT3R try https://github.com/markdown-it/markdown-it
",JCMais,F1LT3R
456,2015-03-11 14:32:29,"Thanks @JCMais !!
",F1LT3R,JCMais
455,2016-05-02 11:57:01,"@christophebe Where?
",julmot,christophebe
454,2014-09-22 07:31:52,"Nice find @DavidAnson !
",jeffwilcox,DavidAnson
450,2014-10-20 20:47:13,"+1 @Feder1co5oave 
",gregtandiono,Feder1co5oave
441,2014-10-23 11:53:02,"@sidorares, take a look at https://github.com/jonschlinkert/remarkable . It already has line numbers support for all blocks. We did not implemented columns, because could not find real use cases. Also everything can be monkeypatched.
",puzrin,sidorares
441,2015-12-20 03:01:51,"@andr2 
thanks
It's really useful.
",Twwy,andr2
431,2014-08-11 01:18:16,"@paolocasarini Hey, I'm one of the two authors of `gitbook`.

We forked `marked` as `kramed` (https://github.com/GitbookIO/kramed), the idea being to move towards `kramdown` support and also be able to move forward without having to wait on @chjj to merge PRs on `marked` (he's done awesome work up till now with, it just seems like he's busy with other more important things these days).

Do you want to submit your PR to `kramed` (you'll need to make a few small modifications) and I'll happily merge it.

Thanks !
",AaronO,paolocasarini
431,2014-09-16 05:50:06,"@paolocasarini Footnotes seem to work, but they're rendered inside a paragraph tag despite this code that should render them inside a blockquote: 

https://github.com/paolocasarini/marked/blob/d833046f0258710413591ef4bee3181caddbaf21/lib/marked.js#L891-L897

Can you help debug? I'd like to get that `<blockquote>` tag rather than a `<p>` from the `Renderer.prototype.footnote` definition. 
",alanguir,paolocasarini
431,2014-09-16 06:37:14,"Yes, I'll check it.

Paolo
Il 16/set/2014 07:50 ""Alan Languirand"" notifications@github.com ha
scritto:

> @paolocasarini https://github.com/paolocasarini Footnotes seems to
> work, but they're rendered inside a paragraph tag despite this code that
> should render them inside a blockquote:
> 
> https://github.com/paolocasarini/marked/blob/d833046f0258710413591ef4bee3181caddbaf21/lib/marked.js#L891-L897
> 
> Can you help debug? I'd like to get that
> 
> tag rather than a
> 
> from the Renderer.prototype.footnote definition.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/pull/431#issuecomment-55698570.
",paolocasarini,paolocasarini
431,2014-10-01 21:52:15,"Yes you could use a simple <p> instead of a <blockquote> just replacing it
in the code you highlighted. To me, the important thing is to allow
specific representation for footnotes. For example, instead a blockquote we
can use a specific class:
<p class=""footnote"">...
or even better
<div class=""footnote"">...

I used the blockquote tag because there is no use of class attributes in
the html that is produced, just to empathize the different the different
role between normal text and footnotes.

I also know that on kramed project my pull request has been ported (as is),
but I know hoe it is used:
GitbookIO/kramed@e5604a6
https://github.com/GitbookIO/kramed/commit/e5604a6d5c48433afaebc4d9886ecbf07550c6c5

Sorry, but I'm sure to have well understood your questione so I ask you if
I have answered to your question...

Best,
  Paolo.

2014-09-16 7:50 GMT+02:00 Alan Languirand notifications@github.com:

> @paolocasarini https://github.com/paolocasarini Footnotes seems to
> work, but they're rendered inside a paragraph tag despite this code that
> should render them inside a blockquote:
> 
> https://github.com/paolocasarini/marked/blob/d833046f0258710413591ef4bee3181caddbaf21/lib/marked.js#L891-L897
> 
> Can you help debug? I'd like to get that
> 
> tag rather than a
> 
> from the Renderer.prototype.footnote definition.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/pull/431#issuecomment-55698570.

## 

Paolo Casarini
Software consultant
P.IVA 02465691208
Direct Tel: +39-339-3463882
",paolocasarini,paolocasarini
431,2015-07-31 22:37:08,"Hi @paolocasarini thank you for this, it helped immensely. Are you able to modify it to include inline footnotes?


",davidmerfield,paolocasarini
425,2014-05-26 03:57:34,"@styfle Yeah!It's very important!
",weekeight,styfle
425,2014-05-28 17:12:52,"@xingqiba0418 @styfle you can make it in this way https://github.com/chjj/marked#overriding-renderer-methods
",7c00,styfle
420,2014-05-23 22:59:29,"@Feder1co5oave I was able to disable headers with the following:



But like you said, the hash is removed. Modifying the source is not desirable.
Is it possible to override the lexer/parser so that hash is not recognized as a header?
",styfle,Feder1co5oave
420,2014-06-05 02:49:43,"@Feder1co5oave This works very well! Much better than my solution of creating a regex that would never match anything.



Yours will probably perform better because it is effectively a noop.
Thanks!
",styfle,Feder1co5oave
420,2015-11-13 22:59:09,"was looking to accomplish the same thing. thanks @Feder1co5oave for a solution. It'd be nice if we could disable each of the rules in the future.
",suchipi,Feder1co5oave
420,2017-02-02 13:20:33,@Feder1co5oave but this only applies to block rules not to inline rules?,herrmannplatz,Feder1co5oave
418,2014-06-14 15:52:35,"@lifeisfoo Until then you can temporarily add this dependency to your `package.json` instead:



remember to `npm install` afterwards.
",meeDamian,lifeisfoo
418,2014-09-30 12:59:11,"@chikathreesix I actually ended up with the same solution :+1: Far more flexible
",aymericbeaumet,chikathreesix
416,2014-05-09 07:25:31,"@scottgonzalez you mean insert `<span id=""CURRENT_POSITION"">` ? That would break the markdown in certain cases unless we have parser information.

E.g.: code block inside ordered list:



The only reasonable strategies I can see without parser information are:
1. insert at cursor
2. insert on beginning of previous line (column 1)

But:
1. breaks as it becomes literal `&lt;` in the output
2. breaks because it generates 2 ordered lists instead of one

With parser information, we could reach the ideal output:



Do you see another insertion strategy without parser information that would work in this case?

Perhaps it is better if we also consider cursor column position in case someone does `a<br>b<br>c<br>...`
",cirosantilli,scottgonzalez
398,2014-04-28 17:16:49,"@jonathanong component.json use to be the config file for bower project. So this component.json had something to do with bower. Now component.json are deprecated in bower.

@queckezz What? Your PR are welcome ;-)

@chjj @wzr1337 Here is a PR that should satisfy most of your users https://github.com/chjj/marked/pull/402

Thanks for this cool stuff! marked rocks!
",clakech,queckezz
398,2014-04-28 17:16:49,"@jonathanong component.json use to be the config file for bower project. So this component.json had something to do with bower. Now component.json are deprecated in bower.

@queckezz What? Your PR are welcome ;-)

@chjj @wzr1337 Here is a PR that should satisfy most of your users https://github.com/chjj/marked/pull/402

Thanks for this cool stuff! marked rocks!
",clakech,chjj
398,2014-04-28 17:16:49,"@jonathanong component.json use to be the config file for bower project. So this component.json had something to do with bower. Now component.json are deprecated in bower.

@queckezz What? Your PR are welcome ;-)

@chjj @wzr1337 Here is a PR that should satisfy most of your users https://github.com/chjj/marked/pull/402

Thanks for this cool stuff! marked rocks!
",clakech,wzr1337
389,2014-04-24 09:03:34,"@isaacs, this appears to be related to #381. I have the fix on a separate branch (da05668dddfb799e75696fa280687749ccbc8b50), but I'll probably merge it once I verify it doesn't hurt performance as much as I thought.
",chjj,isaacs
387,2014-04-22 12:28:06,"@scottgonzalez 

I know what @saighost said. 

try code below



and your program would hang.
",alsotang,saighost
387,2014-04-22 12:28:06,"@scottgonzalez 

I know what @saighost said. 

try code below



and your program would hang.
",alsotang,scottgonzalez
387,2014-04-22 12:31:34,"And my forum is hang because @saighost use this text in his post this afternoon.
",alsotang,saighost
387,2014-04-22 12:43:28,"So the original text was completely wrong for reproducing this bug? Running that text through marked finishes in less than .1 seconds for me (and that includes spawning a new node process).

Based on @alsotang's sample, here's the reduced text that causes marked to hang:



It seems like the processing is growing exponentially as you add more ""sections"". Up to `d` is pretty much constant time (about .07 seconds for me), up to `e` is 10x slower, up to `f` hangs (it may finish, but I didn't wait that long).
",scottgonzalez,alsotang
378,2014-12-19 22:58:25,"Just ran into this one too. @ianstormtaylor have you found a workaround yet?  Doesn't seem like this one's being actively maintained anymore. 
",rymohr,ianstormtaylor
378,2015-01-23 02:13:47,"If you can run javascript, you can set ""marked.setOptions({pedantic: false});"" to avoid marked breaking from the markdown spec and interpreting inside html blocks altogether.

Otherwise quick fix is to just use markdown (triple backticks, etc) inside the html blocks to set preformatted text or include \*, etc.

@rymohr I think the html blocks need to be surrounded by blank lines.
",lindyblackburn,rymohr
371,2014-05-03 18:00:55,"Thanks for the feedback @chjj. As I mentioned in the pull request, I'm not looking to argue for or against the current behavior of fenced code blocks on GitHub, or the motivation for this behavior. However, I managed to convince myself that making this particular change in marked would be a Good Thing :tm:, so I'll try to convert you as well. :)

If we were designing Markdown today, and if GFM was a part of core Markdown -- I'd agree that the decision would be arbitrary (and I wouldn't be making this PR). However, Markdown has been around for a while, and GFM is just an extension.

Bolding is a part of core Markdown and users' expectations are based on the same behavior across multiple Markdown implementations. Implementing bolding in the way you ""suggested"" would be contrary to every other existing implementation, and would probably be surprising for users.

In contrast, fenced code blocks are available only in GFM, and users set their expectations mostly based on what they see on GitHub. On GitHub, fenced code blocks behave as suggested in this pull request. So, I'd argue that this isn't an arbitrary decision, but rather a decision that makes marked match how GFM already works and meet users' expectations. 

Adding a special `live_editing` mode option to marked (which would trigger a match-even-if-unclosed behavior for all Markdown and GFM features) would be an interesting idea, but also unrelated to the motivation for this change.
",izuzak,chjj
370,2014-06-23 16:34:17,"Why did you close this issue @myrtleTree33?  It seems that this is still a problem, no?
",jamesmortensen,myrtleTree33
370,2014-09-01 16:26:20,"Not working for me either. I'm using marked 0.3.2. It renders just like @myrtleTree33 described.
",fegemo,myrtleTree33
368,2014-03-13 22:33:02,"@glassresistor, there are already at least 2 issues open for this (#361 is one of them). There's another one hanging around somewhere.
",chjj,glassresistor
368,2014-03-13 22:35:25,"@glassresistor, the lexer only does block level tokens because dealing with inline tokens makes things **extremely** slow. Marked did this a long time ago and it was promptly dropped in favor of rendering it directly (using inline tokens nearly doubled the benchmark times).
",chjj,glassresistor
366,2014-05-15 12:19:37,"@chjj I think it's time to close this and just tell people to manually encode the URLs using `%29` instead of `)`.
",scottgonzalez,chjj
366,2014-05-15 13:02:08,"@scottgonzalez, I've told people that before. It doesn't seem very effective. This is probably the second issue on this. GFM does do it, and I think it's unintelligent, but I'll try it and see how it goes. Maybe it won't hurt performance much and I'll be okay with it despite disagreeing with it philosophically.
",chjj,scottgonzalez
366,2014-05-15 21:37:36,"You can't ask people to encode urls, because they simply copy and paste urls from the address bar of a browser. :-(

-Filippo

On May 15, 2014, at 2:19 PM, Scott González wrote:

> @chjj I think it's time to close this and just tell people to manually encode the URLs using %29 instead of ).
> 
> —
> Reply to this email directly or view it on GitHub.
",dedalozzo,chjj
365,2014-03-24 13:03:22,"@jakwings Is there some action or discussion you were hoping to have or did you file this issue just to let the community know that you created a new project?
",scottgonzalez,jakwings
365,2014-03-24 13:13:34,"@scottgonzalez Well, the source code of strictdown.js is very like marked.js', and better organized. So I think it is helpful for anyone who want to enhance marked or make his/her customed marked.js or the like.

I must admit I want to let the community know my project. If anyone is not happy to see such advertisement, please just close it for any reason. ;-) I didn't tend to say much here.
",jakwings,scottgonzalez
363,2014-03-13 03:44:01,"@daleconboy, I'm sorry to hear that, but many people lost several hours of their lives trying to figure out why their spaces weren't getting processed correctly when text was passed in from the DOM (see #52 - cc @OscarGodson), which is why this was added in the first place. 

I'll consider adding an option, but I want to keep their removal the default since more people probably get bit by this ""feature"" of contenteditable elements than not.
",chjj,daleconboy
363,2014-03-14 11:46:20,"@daleconboy's argument is pretty convincing. Are there other use cases for no-break spaces in markdown input? I would think a set of tests would help define the severity of the issue.
",drscannell,daleconboy
363,2014-03-14 18:14:19,"@daleconboy I like your point about the browser, except, in @arturi's post he specifically points out that spaces are good to fix a browser bug haha :) Also, i wouldn't agree that it's a browser issue. Markdown's ""spec"" doesn't say which kind of spaces are and aren't allowed so IMO Marked, and any markdown parser, should assume all spaces (nbsp, unicode, etc) should be considered what they are: spaces. Your suggestion, unless im misunderstanding it, is wanted to specifically _ignore_ certain kinds of spaces. 
",OscarGodson,arturi
363,2014-03-14 18:14:19,"@daleconboy I like your point about the browser, except, in @arturi's post he specifically points out that spaces are good to fix a browser bug haha :) Also, i wouldn't agree that it's a browser issue. Markdown's ""spec"" doesn't say which kind of spaces are and aren't allowed so IMO Marked, and any markdown parser, should assume all spaces (nbsp, unicode, etc) should be considered what they are: spaces. Your suggestion, unless im misunderstanding it, is wanted to specifically _ignore_ certain kinds of spaces. 
",OscarGodson,daleconboy
363,2015-06-17 15:39:51,"@scy suggestion is nice. Let me extend it with an example. It might be helpful for future readers...


",Lendar,scy
362,2014-03-15 18:15:55,"@tunnckoCore i like project your, did you can share project :) with tutorial install, it's amazing!
",tung-nguyen,tunnckoCore
362,2014-03-16 22:42:39,"@nbari, its like http auto linking.. nothing more. Why have to put all sucking html (or custom iframe/embed codes), when just can paste link and if it is from ""media"" (like video sites) to be generate automatically <video> tag.
It isn't breaks idea behind markdown, all is same. Only video media sites' links are convert to full video with html5 video tag - nothing more.

---

Sorry for english, but its night here :)
",tunnckoCore,nbari
362,2014-11-22 16:02:18,"Thanks for that link @tunnckoCore !

It looks like this library should help this concept nicely... https://github.com/rlidwka/remarkable-regexp
",howardroark,tunnckoCore
362,2014-11-22 18:44:47,"@howardroark yea, it looks great! Thanks!
",tunnckoCore,howardroark
359,2014-04-16 18:34:26,"@bvallelunga I would use the renderer api in marked. It won't let you do custom tags, but you can customize how tags are rendered.
",ChrisWren,bvallelunga
359,2014-05-03 21:44:13,"@ChrisWren how would one get around the issue of Marked not allowing custom tags?  Is there a way that Marked could be extended to have an API for custom tags?
",acao,ChrisWren
359,2015-08-04 10:45:41,"@activey use @markdown-it or `jonschlinkert/remarkable` or `bevacqua/megamark` (is awesome!), `ForbesLindesay/supermarked` and etc

`marked` is almost dead. Markdown-it is upstream from half year or so. It is highly customizeable, high speed , and have plugins in npm https://www.npmjs.com/browse/keyword/markdown-it
",tunnckoCore,activey
353,2014-09-24 02:10:31,"Sorry @meghprkh, did you find out how to add rules to lexer? Just add a new property to `rules` object?
",Timopheym,meghprkh
351,2014-02-17 13:09:54,"Awesome @lepture, I would love this to be finished and pulled in. I began writing this myself a couple of days ago (see also https://github.com/chjj/marked/issues/27#issuecomment-34661022) but couldn't wrap my head around some of the stuff and gave up the first attempt (JS noob here).
",prashaantt,lepture
351,2014-02-18 13:01:52,"@prashaantt I am not sure that @chjj would agree with this feature. I'd like to implement the unfinished part when @chjj says yes.
",lepture,prashaantt
351,2014-02-20 03:05:33,"This would be amazing @lepture and @chjj, I would love for this feature to be added as well. 
",contactjiayi,lepture
351,2014-02-20 08:44:41,"@prashaantt @contactjiayi I've just created a python fork of markdown. And I am working on footnotes feature in this repo: https://github.com/lepture/mistune
",lepture,prashaantt
351,2014-02-20 08:44:41,"@prashaantt @contactjiayi I've just created a python fork of markdown. And I am working on footnotes feature in this repo: https://github.com/lepture/mistune
",lepture,contactjiayi
351,2014-02-23 13:56:36,"Put up a branch and added a few fixes (footnotes weren't working for two different reasons). I still want to play around with it a bit more.

cc @lepture
",chjj,lepture
351,2014-02-24 02:21:37,"@chjj There is still work to do with the footnotes rendering. For example, multiple lines of one footnote. We should unindent each line, and parse the footnote again.

Here is what I did in the Python fork https://github.com/lepture/mistune/blob/master/mistune.py#L691
",lepture,chjj
351,2014-02-24 07:09:15,"@lepture, oh, this doesn't handle (unindented) multiparagraph footnotes? I had my own branch written that accomplished this in a really sloppy way, but when I saw your code I assumed you did it a little bit better. I'll push my other branch now.
",chjj,lepture
351,2014-02-24 07:58:11,"@chjj I did it in my Python fork. Seems your solution is better, I'll merge it into mine.
",lepture,chjj
351,2014-02-24 09:22:46,"@chjj Use `footnote_start` and `footnote_end` is a good idea. But I think my way is more elegant now. It looks like **parsing list item**.

https://github.com/lepture/mistune/commit/a1f925e3e3f5adbfc6117981ea6d03949b789638
",lepture,chjj
351,2014-02-26 07:56:35,"@chjj I'll sort out it soon, and send you my patch. I've finished the Python fork, and it works well.
",lepture,chjj
351,2014-04-23 16:25:35,"Hello @chjj, @lepture, do you guys have any update on this?
",prashaantt,lepture
351,2014-04-23 16:25:35,"Hello @chjj, @lepture, do you guys have any update on this?
",prashaantt,chjj
351,2014-04-28 10:02:25,"Hi @chjj, @lepture, any plans to merge this into `master`? I'm using the `feature-footnotes` branch successfully. 
",hugovincent,lepture
351,2014-04-28 10:02:25,"Hi @chjj, @lepture, any plans to merge this into `master`? I'm using the `feature-footnotes` branch successfully. 
",hugovincent,chjj
351,2014-05-05 12:52:15,"@hugovincent I agree it works in the basic scenario, but not when the footnote text is itself written in Markdown — i.e. MD-formatted links and formatting in the footnote definition don't get parsed into HTML.
",prashaantt,hugovincent
351,2014-05-31 11:28:59,"In case anybody's interested, I just [pushed an update](https://github.com/prashaantt/marked/commit/dc4a06b4c80e05f6a5b59771c80f4a94e9352689) to my clone of the `feature-footnotes` branch that sacrifices performance and breaks marked's linearity but does get indented multi-para footnotes working correctly with inline Markdown parsing. It basically works, but is still nowhere near the full functionality as given [here](http://rephrase.net/box/word/footnotes/syntax/).

I tried @chjj's `footnotes` branch that attempts to do this better, but ran into rendering issues. I would be delighted if it could be finished officially once @chjj can spare some time.
",prashaantt,chjj
339,2014-04-21 23:28:02,"@nbari yep. but it would be nice to have a page with a list of ""useful renderer overrides""
",SimonCropp,nbari
339,2014-04-22 15:41:12,"Thanks @nbari! +1 on ""useful renderer overrides"" in docs. This could be implemented as an option but there may be too many edge cases to cater to (setting just 1 dimension, icon fonts, etc.)
",rayshan,nbari
339,2016-01-16 17:16:44,"In my particular case, where I already had to modify the renderer to properly highlight a code block ([known issue](https://github.com/chjj/marked/pull/418)), I just added another method to do just this.



It takes advantage of the fact Marked parses images this way:





Do note that you can't flip the two:





---

Although, most definitely +1 @SimonCropp on a ""useful renderer overrides"" list.

@chjj What do you think of both of these (my idea and the ""useful renderer overrides"" list)?
",isiahmeadows,SimonCropp
339,2016-04-15 04:50:52,"@isiahmeadows i thought i was going crazy! I know this is months old but your code used href for image! Thanks for the code either way. Works like a charm after you change href to src.
",uptownhr,isiahmeadows
339,2016-04-15 18:45:23,"Oops... Oh well. Sorry about that!

On Fri, Apr 15, 2016, 00:51 James Lee notifications@github.com wrote:

> @isiahmeadows https://github.com/isiahmeadows i thought i was going
> crazy! I know this is months old but your code used href for image! Thanks
> for the code either way. Works like a charm after you change href to src.
> 
> —
> You are receiving this because you were mentioned.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/chjj/marked/issues/339#issuecomment-210287159
",isiahmeadows,isiahmeadows
338,2014-03-20 06:56:31,"I just want to be notified when @andrewtch has updates…
",sbruchmann,andrewtch
338,2014-05-05 11:53:12,"@rsaccon That's being done. But still too buggy to commit yet.
",akfish,rsaccon
338,2014-08-06 07:49:36,"@rsaccon Sorry. Got caught up with other projects since last commit. The issue remaining was with some elements like item list. They consist of a few items, but each item doesn't have a corresponding token (or something like that) causing location information to be lost. It can be done for sure, but not without being hacky. And it will resulting an inconsistent API in which that some elements have one location object while the others have an array of location objects. I'm not happy with that.

I will review this issue when I am free. But I might end up with writing a markdown parser of my own to get this feature.
",akfish,rsaccon
335,2014-02-13 07:24:41,"@lilydjwg no apologies needed! activity and issues are good, as well as the resulting discussion!
",jasonkarns,lilydjwg
334,2014-01-29 04:06:18,"@killercup can u share some more specific code?
",SimonCropp,killercup
334,2014-01-29 10:20:16,"@killercup you rock
",SimonCropp,killercup
330,2014-02-11 20:47:43,"@jasonkarns,

> There's no downside for marked.

To be sure. This is a philisophical decision over anything else. Which is why, if it does get added, it's going to be an option.

> HTML5 specifies two serializations: the lax, non-well-formed HTML serialization that we all expect browsers to 'just deal with' (and they do); and the XHTML serialization.

I already mentioned in my post that the HTML5 spec allows for useless trailing slashes. The ""just deal with it"" approach is anything but. The SGML DTD for all versions of HTML prior to 5, specified self-closing elements non-ambiguously.  This is what SGML DTDs are for. It wasn't nonsensical like you're trying to portray. In HTML5, they stopped using a DTD altogether and stopped being SGML based. So rather than being SGML-based (HTML 1-4), or XML-based (XHTML 1-2), HTML5 became its own beast, with a complete specification describing every self-closing element in detail. This way, no browser would ever have to parse an SGML DTD (no browsers were doing this anyway!). The natural conclusion was _always_ to stop being SGML and become its own markup language.

> As an additional aside, rendering valid XHTML puts less pressure on whatever HTML parser is being used to consume the output. Sure, the HTML5 spec defines explicitly how certain elements should be parsed, but that then requires the HTML parser to 100% completely follow the HTML5 spec. If marked renders valid XHTML, then it completely avoids any potential bugs the HTML parser may have.  With the hundreds or thousands of different HTML parsers out there, this change simply 1) reduces the chances for bad parsing 2) increases the number of parsers that can consume the output (to include all XML parsers). All at the expense of just a handful of bytes.

Sorry, do you have any sources to back this up? Modern HTML parsers parse according to the HTML5 spec. The trailing slashes aren't helpful at all. As soon as they tokenize the ""<img"" tag, it already knows the element will be self-closing. The trailing slash if flat-out redundant. This was the whole point of HTML5, to pragmatically address this stuff. If anything, the trailing slash will only slow down the parser by a microsecond or two. In fact, this isn't even specific to HTML5 parsers, _all_ HTML parsers that did not properly parse SGML DTDs (which was pretty much all of them) operated this way. A list of self-closing tags was hardcoded in the parser. There never was and never will be a need for the trailing slash in HTML.

@Acubed,

> HTML is XML is EXI is the DOM.

HTML is not XML. Where are you getting this from? XHTML was a poor attempt at making HTML XML-based instead of SGML-based. XHTML failed for a number of reasons, the most apparent was lack of support, but the downsides of XML also destroyed XHTML's chances of ever becoming dominant: the lack of incremental rendering was a huge one.

> They're all different encodings of the same DOM.

Well, marked doesn't produce DOM, it produces markup, so this is irrelevant.  You could make a completely new markup language tomorrow that produces a DOM, should marked support it?

> And because of this, some of us want to use XML tools to process our
> documents. Some of us (me) want to embed HTML in XML - for instance, Atom
> feeds.

Also curious, why would you bother embedding HTML directly in Atom? Why not just use a `<![CDATA[]]>` declaration? That's what it's there for. Especially when you know that the HTML might not be well-formed (say you have an atom feed for blog posts and comments).

Example:



That isn't even a work around. That's just best practice in general.

> It's also far simpler and more consistent: The HTML syntax: 141 printed pages The XHTML syntax: 7 printed pages Which do you suppose I prefer?

What you just pointed out is one of the main shortcomings of XML - it uses a dumb parser that throws on any syntax error instead of gracefully handling errors like it should. HTML5 is smart enough to take the time to specify graceful error handling and soforth.

Defending XHTML at this point is useless. You're defending something that does not support graceful error handling or incremental rendering. Why would you ever want that rendering in a browser?

> XHTML is absolutely not dead

Yes, it is.

> see http://www.w3.org/TR/html-polyglot/ for instance

I'm well aware of polyglot documents. As I stated before, I used to be an X-phile, who eventually switched to using polyglot, until I came to my senses when I saw no tangible benefit for either.

> XHTML lets you use things like RDFa and add new features arbitrarily (especially with full namespace support - something hard-coded into the HTML syntax, prohibiting forward compatibility).

A couple years ago, you would be arguing that XBL2 and SVG could be _only_ be used in XHTML, but that all changed. Many XML-based specifications have been ported to HTML. SVG can be embedded in HTML now for example.

Right now, I guess the best you can come up with is RDFa.

I'll tentatively implement this as an option, but I'm not sure it should be an option since it is trivial to implement yourself with the renderer.
",chjj,jasonkarns
330,2014-02-11 21:33:01,"@walterdavis, thank you for the kind words about marked.

The first day I wrote marked, I made it a point to exclude the self-closing slashes, knowing that some day there would be an issue posted like this. I sort of smiled at the idea: the chance to explain why no self-closing slashes is better. I have strong opinions about this stuff and I'm really stubborn, but I do realize there are cases like yours. I will implement this as an option (not default), but I won't be accepting this PR because it changes the test suite.
",chjj,walterdavis
330,2014-02-11 22:39:49,"@dsheets, you'll stop using this because you have to type a total of 10 characters to get it the way you want? 

You didn't bother participating in the discussion at all. I left it open for discussion and you had several days to post a counterargument that could have swayed me, but didn't. I proposed adding it as an option, and you just ignored it and waited for the outcome.
",chjj,dsheets
330,2014-02-12 02:48:42,"@chjj If XHTML is so dead why does it have an entire section in the HTML specification? Right after and _equal to_ the HTML syntax? HTML parsing still involves building up a DOM, which means putting elements in the correct XML namespace. Whether you like it or not, writing HTML is functionally writing XML. All major Web browsers for _years_ have been able to incrementally render XHTML - again, it's just a DOM serialization.

The difference is that XML as a syntax is consistent. It fails early and fails fast. It's portable. It's more accessible. It's more secure.

For some applications, HTML is great. It's domain specific, so many features make it easier to write free-form for user input. For these cases, I parse the HTML, sanitize the tags, and export XML.

But some users even still prefer Markdown - it's even easier to write free-form. So I hope that my Markdown parser outputs valid XML.

`<img/>` is 100% valid HTML. I'd suggest using that syntax, especially considering that the syntax is a standards-track TR.
",awwright,chjj
330,2014-02-12 05:15:41,"@chjj http://www.w3.org/TR/html-polyglot/ remains unimplemented. It is a Web standard - farther along in the standards track than the current work on HTML, I might add. That, RDFa, XForms, and other XHTML technologies are not only under active development, but active adoption, by myself and others in Semantic Web technologies.

""I don't/wouldn't use it"" is no excuse at all.
",awwright,chjj
325,2014-01-01 19:43:51,"@Feder1co5oave is correct, after only one newline, you are still inside the `<p>` block, and Markdown will not nest a code block inside of the paragraph. Two line breaks (or end of article) are required to sufficiently terminate a paragraph block. This happens irregardless of whether or not `breaks` is set to `true` or not.
",julianlam,Feder1co5oave
325,2014-01-03 07:43:08,"@Feder1co5oave  @julianlam  thank you :)
",vivekkodira1,julianlam
325,2014-01-03 07:43:08,"@Feder1co5oave  @julianlam  thank you :)
",vivekkodira1,Feder1co5oave
312,2014-10-18 08:14:26,"Hi,

Sorry I totally forgot about this issue.

To begin, many thanks @Feder1co5oave, your diff totally solves the issue.

I was now looking to add a test for this like you were suggesting but it's not actually possible since [all the whitespaces are removed](https://github.com/chjj/marked/blob/1c188ebb55ef512653e03b0a03e60d7209a3bc73/test/index.js#L115-L116). Anyway, do you think it worths merging your patch in `master`? Do you want me to make a PR or something?

Otherwise I think we can close. :)
",valeriangalliat,Feder1co5oave
311,2016-03-04 09:03:10,"@shuhei Cool~  Thanks very much!
",JimmyLv,shuhei
310,2013-12-31 13:29:38,"@Feder1co5oave Thanks for point out a new bug. But I have no ideal for solve it right now. Could please help me?
",Aimeast,Feder1co5oave
310,2016-09-16 03:54:46,"@chjj is this resolved? I just pulled v0.3.6 but I'm still seeing:

![image](https://cloud.githubusercontent.com/assets/8988697/18574885/52f8d64e-7b9f-11e6-83fd-c2b7992199ac.png)

with this code:


",skipjack,chjj
307,2013-12-09 21:04:30,"Yes, to be fair, the README.md @lucasmotta were looking at was probably of the master branch, whereas the Renderer feature is not implemented in 0.2.10.

I asked @chjj in #301 to create a new version tag. By now, as I am using this feature, I have just checked out the master branch, but I would rather manage it nicely via npm and package.json.
",tvooo,lucasmotta
307,2013-12-10 16:03:11,"@lepture Some of my pages refered to http://rawgithub.com/chjj/marked/master/lib/marked.js directly.
The code changes as the file in `master` changes.
Personally I hope it's stable in that branch, with correct docs in the README.
",jiyinyiyong,lepture
307,2013-12-10 16:05:40,"I think we should revert the addition of renderer to the master readme until the code is published to npm. The readme should reflect the latest version on npm.

—
Sent from Mailbox for iPhone

On Tue, Dec 10, 2013 at 8:03 AM, 题叶 notifications@github.com wrote:

> @lepture Some of my pages refered to http://rawgithub.com/chjj/marked/master/lib/marked.js directly.
> The code changes as the file in `master` changes.
> 
> ## Personally I hope it's stable in that branch, with correct docs in the README.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/chjj/marked/issues/307#issuecomment-30240140
",ChrisWren,lepture
307,2013-12-10 23:13:29,"@ChrisWren I disagree. The README of a given branch or tag reflects the state of the code in this given branch or tag. Thus, if this feature is in the master branch, it should also be documented in the master's README.

What I think, though, is that the master branch should reflect the latest, stable, published version; i.e., the latest tag. But I have not looked at this project long enough to really know how development & release processes work here :)
",tvooo,ChrisWren
307,2013-12-11 03:02:03,"@jiyinyiyong You can't rely the stability on master branch. You can use a given tagged version.

@ChrisWren I don't think master means that it is published to npm, that is tag's job.
",lepture,jiyinyiyong
307,2013-12-11 03:02:03,"@jiyinyiyong You can't rely the stability on master branch. You can use a given tagged version.

@ChrisWren I don't think master means that it is published to npm, that is tag's job.
",lepture,ChrisWren
307,2013-12-11 03:43:23,"@ChrisWren https://npmjs.org/package/marked  this is the latest readme on npm.
",lepture,ChrisWren
307,2013-12-11 04:45:07,"@lepture Yes, I will change my rawgithub like to the stable tag.
Related topic https://github.com/isagalaev/highlight.js/issues/331#issuecomment-30288799

@ChrisWren for me, 1) Official site, 2) README, 3) npm
",jiyinyiyong,lepture
307,2013-12-11 04:45:07,"@lepture Yes, I will change my rawgithub like to the stable tag.
Related topic https://github.com/isagalaev/highlight.js/issues/331#issuecomment-30288799

@ChrisWren for me, 1) Official site, 2) README, 3) npm
",jiyinyiyong,ChrisWren
302,2014-02-17 08:28:00,"@chjj I am wondering why you revert the changes.
",lepture,chjj
301,2013-12-05 16:54:14,"@chjj Would you mind creating a new version tag with this feature in it?
",tvooo,chjj
298,2013-12-03 04:57:09,"I disagree @adam-p : Dingus does not produce the same results you have mentioned.

MD: `this is a simple _italics _without space <br>`
Dingus: `<p>this is a simple <em>italics </em>without space <br></p>`
Marked: `<p>this is a simple _italics _without space<br></p>`

Here is a screenshot of the output in Dingus:
![dingus](https://f.cloud.github.com/assets/1422560/1661211/2011519c-5bd7-11e3-84f6-a2f883d3e49a.png)

Here's another example:
MD: `this is another _italics_without space`
Dingus: `<p>this is another <em>italics</em>without space</p>`
Marked: `<p>this is another _italics_without space</p>`
Output in Dingus:
![dingus2](https://f.cloud.github.com/assets/1422560/1661251/4bc5a868-5bd9-11e3-9106-ce9133beca7d.png)
",AmarPrabhu,adam-p
280,2013-12-04 14:09:08,"My pull request (#220) is finally noticed, discussed and merged, and thus this issue (#280) is probably gone.

There were no new versions yet, but you (@jcayzac) may try `npm install https://github.com/chjj/marked/tarball/master` and then `npm test` (in the installed marked's directory) to see if tests pass.
",Mithgol,jcayzac
280,2013-12-12 02:11:24,"@Mithgol I just cloned the repo and pulled master branch (for some reason the “test“ folder was omitted in the tarball), and tests still fail:


$ npm test

> marked@0.2.10 test /Library/GitHub/.../repos/duh/node_modules/marked
> node test

#1. amps_and_angles_encoding.text completed.
#2. auto_links.text completed.
#3. autolink_lines.text completed.
#4. blockquote_list_item.text completed.
#5. backslash_escapes.text completed.
#6. blockquotes_with_code_blocks.text completed.
#7. case_insensitive_refs.text completed.
#8. code_blocks.text completed.
#9. code_spans.text completed.

#10. def_blocks.text failed at offset 20. Near: ""<blockquote><p>hello</p></blockquote><hr><blockquo"".


Got:
<blockquote><p>hello</p></blockquote><hr><blockquo


Expected:
<blockquote><p>hello[1]:hello</p></blockquote><hr>


#11. double_link.text failed at offset 46. Near: "":<ahref=""http://example.com/""><ahref=""http://example.com/"">h"".


Got:
:<ahref=""http://example.com/""><ahref=""http://example.com/"">h


Expected:
:<ahref=""http://example.com/"">http://example.com/</a>.</p><p

#12. escaped_angles.text completed.
#13. gfm_break.breaks.text completed.

#14. gfm_code_hr_list.text failed at offset 352. Near: "">foo<code>bar</code>bar:</p><p>erbfoo</p></li></ol></li><


Expected:
>foo<code>bar</code>bar:</p><pre><codeclass=""lang-erb"">foo--

#15. gfm_del.text completed.
#16. gfm_em.text completed.
#17. gfm_links.text completed.
#18. gfm_tables.text completed.
#19. gfm_code.text completed.
#20. hard_wrapped_paragraphs_with_list_like_lines.nogfm.text completed.
#21. horizontal_rules.text completed.
#22. hr_list_break.text completed.
#23. inline_html_advanced.text completed.
#24. inline_html_comments.text completed.
#25. inline_html_simple.text completed.
#26. lazy_blockquotes.text completed.
#27. links_reference_style.text completed.
#28. links_shortcut_references.text completed.
#29. list_item_text.text completed.
#30. literal_quotes_in_titles.text completed.
#31. loose_lists.text completed.
#32. links_inline_style.text completed.
#33. main.text completed.
#34. markdown_documentation_basics.text completed.
#35. markdown_documentation_syntax.text completed.
#36. nested_blockquotes.text completed.
#37. nested_code.text completed.
#38. nested_em.text completed.
#39. nested_square_link.text completed.
#40. not_a_link.text completed.
#41. ordered_and_unordered_lists.text completed.
#42. ref_paren.text completed.
#43. same_bullet.text completed.
#44. strong_and_em_together.text completed.
#45. tabs.text completed.
#46. text.smartypants.text completed.
#47. tidyness.text completed.
#48. toplevel_paragraphs.gfm.text completed.
#49. tricky_list.text completed.
46/49 tests completed successfully.
3/49 tests failed. 


HEAD is abce5d0, and I can confirm your commit shows up in the log.
",jcayzac,Mithgol
277,2013-11-09 15:39:01,"I know this isn't ideal (I'm also advocating a better a solution for header ID's), but for anyone who wants a temporary solution while we're waiting for this to be fixed:



This is a pretty basic quickfix, but I don't want to spend too much time working out edge cases on it since the idea is to do something like what @twolfson is proposing
",jonschlinkert,twolfson
269,2015-11-28 22:14:37,"+1 Faced the same issue (Handlebars + marked)

@cri5ti, your suggestion fixes my issue. Thanks!
",r0hitsharma,cri5ti
269,2016-07-25 19:14:43,"+1 Also ran into this. How is everyone working around this issue? Just applying @cri5ti code change after npm install?
",patrickheeney,cri5ti
266,2013-11-29 18:09:39,"<del>I agree with @jondlm . You should open a new repo for it. IMO, marked.js should be kept as lightweight as possible, being a good replacement of Showdown.js .</del>(deleted)

Tables are really useful sometimes, I also want a Markdown variant to deal with that. :)

BTW, adding a number after the vertical bar may be better.



And you may like DokuWiki markdown syntax about tables: https://www.dokuwiki.org/wiki:syntax#tables It is more elegant, though no way to specify column width. (If you have made a markdown extension for this, I will be glad to head that.)
",jakwings,jondlm
259,2013-12-16 21:42:20,"@jiyinyiyong that's the path to the Marked directory (which bower defaults to w/o a main directive). Once this is merged the path will be `bower_components/marked/lib/marked.js`
",KyleAMathews,jiyinyiyong
259,2014-04-07 18:14:00,"Yay, thanks @KyleAMathews for adding `moduleType`, and keeping this PR up to date!
",briancavalier,KyleAMathews
259,2015-12-05 17:49:40,"@KyleAMathews this can probably be closed since bower.json was added at the [end of April 2014](https://github.com/chjj/marked/commits/master/bower.json).
",OmgImAlexis,KyleAMathews
252,2013-12-07 09:29:50,"@jonathanong ? …and why exactly is saving bandwidth and preventing layout bugs because of newline whitespace not an advantage?
",adius,jonathanong
252,2014-08-21 19:28:52,"@jonathanong I have a good reason for this
I'm using marked inside a pre element since it's space sensitive, the margin dont get merged. I cannot remove newline on the resulting string because code block inside the markdown will loose their layout.
",MasseGuillaume,jonathanong
252,2014-08-21 19:56:47,"I had good reasons as well (…and of course I'm not using inline styles in real code)
@jonathanong just seems to be totally unreasonable
Good luck at convincing him of anything.
",adius,jonathanong
252,2014-08-22 01:56:02,"@adius ad homminem, the guys is doing a good job with this free open source project.
",MasseGuillaume,adius
252,2014-08-25 18:54:34,"@jonathanong 
nvm you can use `white-space: normal` to discard white spaces in pre
",MasseGuillaume,jonathanong
238,2014-01-29 15:49:40,"@Bartvds I'm curious about how this works: If emoji image files aren't provided, what happens?
",evanwon,Bartvds
238,2014-01-29 16:35:21,"Awesome work @Bartvds !
",jbueza,Bartvds
238,2014-12-17 22:15:05,"@Bartvds either way, I forked + included your commit, and it's working great for us. Thanks a ton :)
",gkoberger,Bartvds
234,2013-08-24 10:52:35,"@Mithgol do you mean something like this?



That may work but it's like doing the job twice and could be done with few simple regex without the aid of another module e.g.:



The feature is quite easy to implement, there are only few things to handle with tests, tests generation and benchmarks.
Anyway thank you for the suggestion!
",lpinca,Mithgol
234,2013-08-25 09:04:16,"As i already told you on IRC, i agree with your point of view.
`<!CDATA[...]>` should be the natural way to deal with this kind of problem, and yes it's doesn't have sense to add XML support only because a particular XML parser doesn't play well with `CDATA`.

On the other side, alternatives offer the ability to render XHMTL:
- [robotskirt](https://github.com/benmills/robotskirt) allows you to pass `HTML_USE_XHTML` flag to the HTML renderer
- [markdown-js](https://github.com/evilstreak/markdown-js)'s README explicitly states that it has the ability to output both HTML and XHTML (i haven't tested it personally)

I ended up using [robotskirt](https://github.com/benmills/robotskirt) for this particular project, but i will certainly use `marked` in a future project where XHTML will be not needed or `<!CDATA[...]>` will work as intended.

Thank you @chjj.
",lpinca,chjj
232,2013-10-15 23:29:54,"@bm-w sorry I miss breaks 
",insanehong,bm-w
227,2014-04-24 07:55:01,"@chjj I agree with @amitport. Could we have an option that turns only this single pedantic behavior on?

Advantages of the original:
1. simpler: to remember and implement on editors.
   - original: always use 4 spaces
   - Marked: look at the line above, and copy the number of character before the first char of the list.
   
   First person experience with implementing in Vim. 
2. The only other major engine that behaves like this is Kramdown:  GFM, Multimarkdown, Pandoc, Redcarpet and markdown-js all follow Markdown.pl on this one.

This means that people coming from other engines to Marked will have problems. Tested with https://github.com/karlcow/markdown-testsuite/pull/34

Same discussion for Kramdown: https://github.com/gettalong/kramdown/issues/121
",cirosantilli,amitport
227,2014-04-24 07:55:01,"@chjj I agree with @amitport. Could we have an option that turns only this single pedantic behavior on?

Advantages of the original:
1. simpler: to remember and implement on editors.
   - original: always use 4 spaces
   - Marked: look at the line above, and copy the number of character before the first char of the list.
   
   First person experience with implementing in Vim. 
2. The only other major engine that behaves like this is Kramdown:  GFM, Multimarkdown, Pandoc, Redcarpet and markdown-js all follow Markdown.pl on this one.

This means that people coming from other engines to Marked will have problems. Tested with https://github.com/karlcow/markdown-testsuite/pull/34

Same discussion for Kramdown: https://github.com/gettalong/kramdown/issues/121
",cirosantilli,chjj
227,2014-04-24 08:59:08,"@cirosantilli, I realize people do sometimes only want certain aspects of original markdown behavior. The `pedantic` option might be my subconscious way of passively aggressively punishing users who want poor markdown behavior (""if you want some of the bad stuff, you might as well take all of it"").

I do want to split `pedantic` up into smaller options, but at the same time I don't want marked to become a mountain of configuration. I'll think about it.

As for making this the default, it will be hard to convince myself. I really really _really_ dislike the original markdown list behavior and I think it's counterintuitive. I'm willing to bet most people actually instinctively used marked-like list syntax for indentation when using markdown for the first time. I don't have any real evidence for this, but I don't agree when you say it's simpler.
",chjj,cirosantilli
214,2013-08-03 00:27:52,"@chjj Thanks for your input.
I figured out after hours of working;
Since I'm a beginner for your work, I refered
**Usage**
- Example using all options:

as a result, I set `sanitize: true`

Obviously, it's not rendered because it's setup so.
I'm afraid to say this is so confusing for beginner even having read the document.
I know this option is `false` as default, but most people would just follow the example usage like me.

Anyway, thanks for your great work, and the support!
",kenokabe,chjj
202,2013-08-04 10:08:48,"@Mithgol, I meant the issue: #201.
",chjj,Mithgol
201,2013-07-19 08:28:20,"@Mithgol according to Markdown documentation there needs to be a space character after the `#`, not combined. Also GitHub doesn't render that as a heading.

Edit: for the example I was using GFM's newline support so it renders to paragraphs
",jorilallo,Mithgol
201,2013-08-02 18:43:53,"@chjj @ilsken Just for the sake of arguments, has anyone ever really used markdown.pl? I would stick with the documentation (which states ""# heading"") and common sense but that's just me. Having #hashtags and @mentions is pretty common with services.
",jorilallo,chjj
201,2013-08-02 18:43:53,"@chjj @ilsken Just for the sake of arguments, has anyone ever really used markdown.pl? I would stick with the documentation (which states ""# heading"") and common sense but that's just me. Having #hashtags and @mentions is pretty common with services.
",jorilallo,ilsken
201,2013-08-02 21:20:41,"+1 for GFM  

## 

Jori Lallo

+1 (415) 728 5773  
@jorilallo (http://twitter.com/jorilallo)

http://kippt.com

On Friday, August 2, 2013 at 12:05 PM, Mithgol wrote:

> Being backwards compatible with markdown.pl (http://markdown.pl) is important.
> However, it seems like the GFM mode could imitate GitHub flavoured Markdown better if it took the whitespace in consideration after the # character.
> 
> —
> Reply to this email directly or view it on GitHub (https://github.com/chjj/marked/issues/201#issuecomment-22026685).
",jorilallo,jorilallo
201,2014-10-12 07:07:10,"@elennaro It's as easy as manually applying the patch jorilallo/marked@09c26a86aec5c08ca36e2e5f3012b5e192e93011. It replaces only one character in the source code (`*` → `+`) and thus it couldn't be any easier.
",Mithgol,elennaro
201,2014-10-12 10:44:06,"Oh, thank you @Mithgol really simple and beautifull!
",elennaro,Mithgol
200,2013-07-18 17:57:38,"@adam-p Looks like it. I'll close as dup.
",robertdimarco,adam-p
199,2013-09-14 16:41:16,"I like this idea. I submitted a PR #247 a few days ago adding custom header markup support, but this is more extensible as it applies to all token types. I am willing to help out to make this PR work as I really want custom header support to get GitHub hover links on headers. I am going to spend some time today looking at the source in reference to @chjj's comment.
",ChrisWren,chjj
199,2013-09-15 15:48:34,"As I understand from the source code, the highlight option is the only async option. It seems that async highlight is used after Lexer.lex to perform [additional token processing](https://github.com/chjj/marked/blob/master/lib/marked.js#L1085-L1098) before Parser.parse is called on the tokens. If async highlighting isn't enabled, [these lines](https://github.com/chjj/marked/blob/master/lib/marked.js#L857-L863) of code are executed to do synchronous highlighting in the Parser.

@chjj is the idea that we would keep all the preprocessing synchronous and then see if the user is using the asynchronous version of marked when calling Parser.parse synchronously or asynchronously?
",ChrisWren,chjj
193,2013-08-17 16:47:35,"As @ChrisWren said, you should pass arguments with 3 arity in order to do asynchronous stuff. Take a look at an API here
https://github.com/chjj/marked#markedmarkdownstring-options-callback



I'm writing this because I've just got the same error and looked around docs and issues.
",smagch,ChrisWren
181,2013-08-02 22:23:23,"@adam-p While I respect the corner you're stuck in, I would consider that a rare edge case. The HTML spec now considers `name` attributes deprecated[1] in favor of `id`. So, use cases similar to yours, I would never recommend them. Until you can customize element rendering (#129), it seems you're limited to manual inline HTML :-(
1. see http://www.w3.org/TR/html5-diff/#changed-attributes (`name` is listed as ""allowed but discouraged"")
",jasonkarns,adam-p
181,2013-08-04 11:45:13,"@jasonkarns, I guess I should make this clear in the readme: test/new is for any test that isn't part of the original markdown test suite. test/original is only for the original markdown test suite. test/tests is where they both reside after being combined (and the markdown test suite being slightly altered) via the `node test --fix` script. It's not a problem. I can fix it.
",chjj,jasonkarns
181,2013-08-24 12:49:57,"> Expecting someone to remember to add commas and colons in reference links is a recipe for broken links and inconsistent results.

@jonschlinkert Personally, I think using the text-as-id is simpler for authors. The use case is for in-document links so the link author is the same person as the header author. Remembering to add commas and such is easier than trying to remember which characters get replaced and which character is used for replacement. The author simply copies the header text and replaces whitespace. But 'simple' is subjective.

Adding any additional markup (like anchors) would only go further into the realm of personal taste. Giving headers an ID that can be targeted covers the core use case. Everything else (styling and clickable permalinks) are just enhancements on that core functionality. Getting the core functionality in place _and shipped_ is more important than waiting for resolution on the numerous PRs that each do something _slightly_ different. ( #89 #92 #129 #134 #207 ) The best future version of marked would indeed do some sort of anchor generation, or at least allow customized renderers. But who knows how long it could take to get those PRs resolved and merged? Much better to at least get marked to support linking to headers _at all_.
",jasonkarns,jonschlinkert
180,2014-03-07 12:12:10,"@nrolland I know (and have used) the `$ ... $` and `$$ ... $$` syntax. However this causes trouble as Markdown documents could easily contain `$` -- which not very surprisingly means ""dollar"". This is the only reason I implemented in this PR as `$$ ... $$` and `$$$ ... $$$`.

And, before the big players agree on a ""common markdown"" I don't think this chaos could really end.
",summivox,nrolland
180,2014-03-07 17:51:18,"@marfarma : Makes sense. Changed.

@nrolland @scottgonzalez  : My fault to bring up the ""currency"" issue. It's clearly off-topic and let's return to supporting mathjax correctly.
",summivox,nrolland
180,2014-03-07 17:51:18,"@marfarma : Makes sense. Changed.

@nrolland @scottgonzalez  : My fault to bring up the ""currency"" issue. It's clearly off-topic and let's return to supporting mathjax correctly.
",summivox,scottgonzalez
180,2014-03-07 17:51:18,"@marfarma : Makes sense. Changed.

@nrolland @scottgonzalez  : My fault to bring up the ""currency"" issue. It's clearly off-topic and let's return to supporting mathjax correctly.
",summivox,marfarma
180,2014-07-23 15:04:00,"@julou : I failed to reproduce the bug at 2d3594f .


",summivox,julou
180,2014-07-23 15:42:22,"@julou : `mathjax: true`
",summivox,julou
180,2014-07-30 23:21:42,"@summivox @julou I created a fork of `marked` called `kramed` (https://github.com/GitbookIO/kramed). We will be using it for [GitBook](https://github.com/GitbookIO/gitbook).

It has your `mathjax` support already integrated and published on `npm` (release `0.4.0`).

Here's [Why we forked marked](https://github.com/GitbookIO/kramed#why-fork-marked-)
",AaronO,julou
180,2014-07-30 23:21:42,"@summivox @julou I created a fork of `marked` called `kramed` (https://github.com/GitbookIO/kramed). We will be using it for [GitBook](https://github.com/GitbookIO/gitbook).

It has your `mathjax` support already integrated and published on `npm` (release `0.4.0`).

Here's [Why we forked marked](https://github.com/GitbookIO/kramed#why-fork-marked-)
",AaronO,summivox
180,2014-07-31 00:57:56,"@AaronO : Sweet. Won't close this PR for the time being though.
",summivox,AaronO
180,2015-06-26 12:37:08,"@cben : I was aware of these work. This fragmentation is unfortunate yet inevitable -- considering we actually have CommonMark now.

Very ironic -- this patch was here over 2 years ago.
",summivox,cben
173,2013-06-17 11:32:56,"@Mithgol yah, I saw #117 and #129 would provide the same functionality except it has been open for several months with a concern on performance. I would gladly take the small perf hit on parsing by using #129. The addition of a single ternary here gets me over the hurdle I am currently facing, the rest of the rendering intercepts would just be nice to have.
",phiggins42,Mithgol
170,2013-06-10 14:08:09,"@JoseTomasTocino vote for this feature https://github.com/chjj/marked/pull/129

You can easily setup the task feature with renderer.
",lepture,JoseTomasTocino
170,2013-06-11 07:20:07,"@JoseTomasTocino You must misunderstand, GitHub build gfm on sundown with its renderer feature, there is no such thing as built-in.
",lepture,JoseTomasTocino
170,2013-07-03 07:33:09,"@lepture, no, I see what he is saying. You can do it your way, but then you'd have to set it up, no? Especially with my project, I need it to be work natively or I'm most likely not going to support it.
",OscarGodson,lepture
169,2014-09-22 09:14:00,"@gitgrimbo   @dantothelz 


",Dreampie,gitgrimbo
167,2013-06-04 12:51:43,"@jiyinyiyong Robotskirt is suggested, which is a sundown binding in Node.
",lepture,jiyinyiyong
167,2013-06-04 14:40:37,"@lepture Did Robotskirt considered this problem and added feature for it?
Options about disabling the indentation syntax are not found in the repo of Robotskirt :(
",jiyinyiyong,lepture
167,2013-06-04 23:50:54,"@jiyinyiyong Github is powered by sundown. And it has a renderer feature. I am introducing renderer to marked at #129 
",lepture,jiyinyiyong
163,2013-08-02 17:36:28,"@scottgonzalez, yeah I suppose if this is the reason @minrk started this issue in the first place. While the current behavior doesn't follow markdown.pl exactly, it does agree with html. I wouldn't feel comfortable implementating this anyway.
",chjj,scottgonzalez
163,2013-08-02 17:36:28,"@scottgonzalez, yeah I suppose if this is the reason @minrk started this issue in the first place. While the current behavior doesn't follow markdown.pl exactly, it does agree with html. I wouldn't feel comfortable implementating this anyway.
",chjj,minrk
158,2013-06-13 14:31:38,"@adam-p Completely agree about leaving CSS out of the markdown engine. Your workaround is nice, thanks for sharing!
",nadirs,adam-p
156,2013-05-15 05:59:41,"@mkoryak view the benchmarks https://github.com/chjj/marked#benchmarks
",lepture,mkoryak
156,2013-05-29 00:26:26,"@mkoryak Are there any specific features/topics you were looking for? I think the main difference is highlighted in the very short description of the README, where it says ""Built for speed.""
",scottgonzalez,mkoryak
153,2013-05-29 00:28:26,"@Snugug It sounds like you're not `require()`ing marked. You should probably just ask for help on IRC, either in #node.js or #grunt.
",scottgonzalez,Snugug
151,2013-05-29 00:32:44,"@fish520 Are you able to provide the code that caused this, or a full stack trace?
",scottgonzalez,fish520
150,2013-05-29 00:33:56,"@chjj Do you want to do anything here?
",scottgonzalez,chjj
148,2013-05-29 00:38:49,"@paranoiacblack I don't think cdnJS cares who sends pull requests, so you can add marked just as easily as @chjj can.
",scottgonzalez,paranoiacblack
148,2013-05-29 00:40:35,"@scottgonzalez, I just wanted @chjj's or someone else permission before doing so. I don't know @chjj enough to say whether or not he would care about something like this. Can I take your comment as permission?
",paranoiacblack,scottgonzalez
148,2013-05-29 03:28:36,"@paranoiacblack, scottgonzalez is right. You're more than welcome to do whatever you want with marked as long as the license is included.
",chjj,paranoiacblack
146,2013-05-29 00:44:30,"@terietor It looks like you might've called `marked()` with either no parameters or a non-string parameter. It's hard to tell since you didn't copy the first line of output, which has the actual error message.
",scottgonzalez,terietor
145,2013-03-29 21:37:30,"@kuba-kubula doesn't seem to work actually.
",samholmes,kuba-kubula
145,2013-03-30 00:53:42,"@samholmes sorry, repaired the code.
",kuba-kubula,samholmes
145,2013-03-30 15:44:03,"@kuba-kubula is on the right track, but if you grab all the `text` tokens from the lexer, some of them will still have inline markdown in them. Another possibility is the renderer (#129) that's being proposed right now.
",chjj,kuba-kubula
144,2013-03-29 14:42:36,"@lepture thanks, very interesting

@Mithgol certainly the first thing that came to mind, if a bit inelegant

@sudhirj thanks; that's a great insight; and if not that, I could at least use that knowledge together with the lexer/parser access to do something spiffy.
",katowulf,lepture
144,2013-03-29 14:42:36,"@lepture thanks, very interesting

@Mithgol certainly the first thing that came to mind, if a bit inelegant

@sudhirj thanks; that's a great insight; and if not that, I could at least use that knowledge together with the lexer/parser access to do something spiffy.
",katowulf,Mithgol
144,2013-03-29 14:42:36,"@lepture thanks, very interesting

@Mithgol certainly the first thing that came to mind, if a bit inelegant

@sudhirj thanks; that's a great insight; and if not that, I could at least use that knowledge together with the lexer/parser access to do something spiffy.
",katowulf,sudhirj
144,2015-04-17 05:05:33,"Thanks for the code block @icoxfog417 — I looked it over a little more and also saw an example from the docs for [overriding renderer methods](https://github.com/chjj/marked#overriding-renderer-methods), and the code can more simply be written as such:


",mrcoles,icoxfog417
141,2013-03-30 16:37:59,"@Niggler Makefile is fair. But you shouldn't use tab in python, it is not pep8 compatible. I hate tabs in Python.
",lepture,Niggler
141,2013-03-30 18:00:22,"I don't disagree with the sentiment regarding using spaces in python, and
the fact that spaces are treated as 8 characters rankles me, but I cannot
force others using tabs to change. (oh how I wish I could)

@chjj I ended up doing that replacement

On Saturday, March 30, 2013, Hsiaoming Yang wrote:

> @Niggler https://github.com/Niggler Makefile is fair. But you should
> use tab in python, it is not pep8 compatible. I hate tabs in Python.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/issues/141#issuecomment-15677404
> .
",Niggler,Niggler
141,2013-03-30 18:00:22,"I don't disagree with the sentiment regarding using spaces in python, and
the fact that spaces are treated as 8 characters rankles me, but I cannot
force others using tabs to change. (oh how I wish I could)

@chjj I ended up doing that replacement

On Saturday, March 30, 2013, Hsiaoming Yang wrote:

> @Niggler https://github.com/Niggler Makefile is fair. But you should
> use tab in python, it is not pep8 compatible. I hate tabs in Python.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/issues/141#issuecomment-15677404
> .
",Niggler,chjj
141,2013-03-30 18:08:03,"Also @chjj based on my cursory reading of the spec, the tab character isn't supposed to be replaced by spaces. Is it tradition or can you point me to a spec which does mandate it?
",Niggler,chjj
141,2013-03-30 19:37:05,"@chjj so it is tradition :)  I kinda wish the markdown spec would mandate it (unless you consider markdown.pl to be the normative implementation)
",Niggler,chjj
140,2013-05-29 01:17:09,"@scottgonzalez wanted the version from https://github.com/chjj/marked/pull/139 to be pushed
",Niggler,scottgonzalez
139,2013-03-17 03:53:44,"@chjj can you push this to npm as well?  
",Niggler,chjj
131,2013-03-06 10:23:32,"@Swaagie This could be easily customized with renderer feature, which I provided at #129 .
",lepture,Swaagie
130,2013-03-01 11:48:14,"@Mithgol this is not a todo list.
",lepture,Mithgol
129,2013-03-11 14:42:08,"@lepture interesting your work :-)
I did testing based on your code. But it's not working

**on node v0.8.16 & browser too**



And README.md example on `renderer` branch in your github repo too


",rhiokim,lepture
129,2013-03-12 04:01:16,"@rhiokim the example is not clearly. I've updated readme and this issue. try this:


",lepture,rhiokim
129,2013-03-12 09:44:17,"@lepture thanks :)
",rhiokim,lepture
129,2013-03-22 18:55:00,"@lepture, have you benchmarked this? I've considered this before, but the overhead of so many function calls scares me. It doesn't seem like it would be a lot, but when you're calling those functions several thousands of times, it can add a lot of overhead. It all depends on whether v8 does some kind of function inlining optimization there. If the benchmarks check out, I'll merge it.
",chjj,lepture
129,2013-03-23 02:19:19,"@chjj Yes, I did the benchmark, it is slower, but not much. The convenience worth it.

Before this pull request:



With this pull request:



On my Macbook Pro. Node v0.10.0
",lepture,chjj
129,2013-03-26 02:41:52,"@chjj ping ...
",lepture,chjj
129,2013-03-27 02:09:28,"@lepture fenced code block is wrong?
please check my code & result.

 javascript
var marked = require('./index');

var renderer = new marked.Renderer();

renderer.blockcode = function(lang, code) { <------- do not called
  console.log('code language: %s', lang);  
}

var parse = function(src, options) {
  options = options || {};
  return marked.parser(marked.lexer(src, options), options, renderer);
};

console.log(parse(''));


**result**


",rhiokim,lepture
129,2013-03-27 02:35:20,"@rhiokim I see. marked treats the block code as a paragraph, because gfm is not enabled. You should pass the `options`:



You can use marked defaults options:



BTW, it is:


",lepture,rhiokim
129,2013-03-27 02:48:13,"@rhiokim Maybe we need a built-in API to make things easier. But this should be done when @chjj merged this feature.
",lepture,chjj
129,2013-03-27 02:48:13,"@rhiokim Maybe we need a built-in API to make things easier. But this should be done when @chjj merged this feature.
",lepture,rhiokim
129,2013-03-27 05:11:27,"Thanks so much! @lepture 
I watching this feature, It's very important thing for evolution markdown
And I hope merging this :-)
",rhiokim,lepture
129,2013-03-30 16:16:32,"@chjj I will add span level API when you accept this feature. I am using the block level renderer right now in my project, it is useful (like `sundown` does).

We can publish an alpha version in `npm`:



And do some experiment in this alpha channel. If you accept this feature, I will add the span level API. We still have time to debug it.
",lepture,chjj
129,2013-03-30 16:33:55,"@lepture, it's not a matter of writing it. Again, it's a matter of performance. I'll mess around with it and see if I can get decent benchmark times.
",chjj,lepture
129,2013-03-30 16:36:38,"@chjj It will certainly be slower than the current one. You need to weigh the performance and the convenience and find out the balance.

Wait for the news.
",lepture,chjj
129,2013-03-30 16:58:33,"> @chjj It will certainly be slower than the current one.

Yes. It's a question of how much slower. That's what I want to check.
",chjj,chjj
129,2013-04-14 11:15:02,"ping @chjj 

Any idea now?
",lepture,chjj
129,2013-05-23 01:24:12,"ping @chjj 
",lepture,chjj
129,2013-06-02 00:07:33,"@chjj that's a good news.
",lepture,chjj
129,2013-07-06 11:44:30,"@chjj 

> Sorry for putting this on hold for so long. I'll merge and revise this tonight I think.

Will this be merged ?

ping ....
",lepture,chjj
129,2013-07-24 02:19:26,"After implementing marked into one of my projects, the need for this has come up multiple times (inline stuff, rel=nofollow and target+_blank etc). @chjj :+1: for merging, I hope marked moves forward.
",jorilallo,chjj
129,2013-11-26 14:54:42,"@chjj would you be kind enough to consider merging this? Or suggest some other way to customize the output. I was surprised to find that marked doesn't have that support and ultimately ended up on this thread.

@lepture span level support would make this feature-complete. Looking forward to it. This is awesome, thanks.
",aleemb,lepture
129,2013-11-26 14:54:42,"@chjj would you be kind enough to consider merging this? Or suggest some other way to customize the output. I was surprised to find that marked doesn't have that support and ultimately ended up on this thread.

@lepture span level support would make this feature-complete. Looking forward to it. This is awesome, thanks.
",aleemb,chjj
129,2013-11-27 12:59:20,"@lepture think you could implement the span-level features to make this feature-complete?
",aleemb,lepture
129,2013-11-27 15:04:54,"I sent this patch months ago. At that time, `this.options.headerPrefix` was not added. The renderer feature can do the same thing.

@aleemb I need to make sure that this renderer feature is accepted before adding more features.
",lepture,aleemb
129,2013-12-03 10:17:12,"Close now.

@chjj when you are ready to accept this feature, please tell me. I would send another pull request.

For now. I am going to maintain  https://github.com/lepture/markit
",lepture,chjj
129,2013-12-04 05:42:14,"Yeah, well. This is me breaking out of my shell. I believe the thing that made marked successful in the first place was the attention put on speed. marked does so many weird optimizations that I'm worried only I understand (not because I'm smart, but because I wrote them and I do stupidly-designed optimizations that no sane programmer would do).

This is the largest pull request I've ever accepted for marked. So while it's partially true that I've been busy with work and couldn't accept this PR, it's also partially true that I've trained myself to be hesitant about large PRs: I'm worried people may make changes without realizing they're overlooking some esoteric optimization. I wrote marked while running benchmarks after every single change to a line. If I lose a few milliseconds, it's a tragedy to me.  I've come to terms with the fact that a renderer is a good idea (much thanks to @lepture for his contribution). Hopefully we can do the same thing with the lexer(s) without too much overhead.

I've also just added @ChrisWren as a core committer for documentation. It's been an eventful night for marked.
",chjj,lepture
129,2013-12-04 05:55:21,"@chjj I've already added renderer in InlineLexer. https://github.com/lepture/markit

I think you shouldn't merge this patch. Maybe I can send you another clean one.
",lepture,chjj
129,2013-12-04 05:59:12,"@lepture, I imagine you would prefer that functionality to be handled by the renderer? We can remove it. Being that it was never officially released in an npm verson, we arguably don't have to maintain backward compat. Although, I do worry about a lot of people who simply grab the latest HEAD for their clientside app.

Anyway, maybe we could open a new issue for this.
",chjj,lepture
129,2013-12-04 06:01:18,"@lepture, open another pull request for this and the inline renderer. I'll take a look.
",chjj,lepture
129,2013-12-04 06:02:11,"@chjj I will start it at https://github.com/chjj/marked/commit/77352ec9fc65ae0250c8eb52eaca3236e55f7d3b
",lepture,chjj
129,2013-12-04 06:24:57,"@chjj could you please create a new branch at https://github.com/chjj/marked/commit/77352ec9fc65ae0250c8eb52eaca3236e55f7d3b

I will send it to this branch. The master branch is a little mess.
",lepture,chjj
127,2013-03-01 06:30:05,"@prust have a look at my pull request #129 

The renderer feature will make it easy to do any customisation.
",lepture,prust
127,2015-05-11 19:23:55,"Thanks, this is perfect. This should be in marked.

@lepture I love the renderer, but couldn't figure out how to make this work without forking. Any thoughts?
",gkoberger,lepture
126,2013-03-01 06:26:16,"@tqc I am doing it another way. See my pull request #129 

After this is merged, we can make the renderer more powerful, and add the inline level renderer.
",lepture,tqc
126,2013-03-02 05:53:37,"@lepture I initially considered using custom render functions, but decided against it for two reasons:
- Performance/complexity cost of replacing existing code with configurable function calls
- Defining the functions is more than the single line config setting I was looking for, especially when working with multiple types of link.
",tqc,lepture
126,2013-03-02 10:39:49,"@tqc 
- The performance is not a really problem. Yes, it is slower, I did the benchmark, it is about 20ms slower, but who cares! It is still far more fast than any other pure javascript parsers. If I need performance, I will use robotskirt.
- Convenience vs customizable. I am still using robotskirt, not coz its performance, but the custom renderer feature. You can do what ever you want with custom renderer. It's really powerful.

I am dropping robotskirt, and switch to marked, coz it's hard for windows users to install robotskirt, and I need to distribute my software to windows users.
",lepture,tqc
119,2013-02-10 02:11:52,"@josdejong, it should be easy to add these things.

Bash



JS



> I suppose there are no built-in options to specify a layout/template file? (like with Jekyll)

No, that doesn't exist. It should be easy to layer on that functionality though.
",chjj,josdejong
119,2016-10-07 00:46:52,"@yuchi Why do you use ending style tag?
",heyallan,yuchi
119,2016-10-07 07:46:41,"@heyallan this is a pretty old issue. What's your question more specifically?
",yuchi,heyallan
119,2016-10-07 16:48:53,"@yuchi Nevermind. Sorry. And thanks.
",heyallan,yuchi
116,2016-05-02 11:58:37,"@chjj There should be an option available to set custom classes on some elements.
",julmot,chjj
115,2014-02-10 08:49:39,"is the change proposed by @chemzqm a viable fix for this? any chance of it being merged in?
",SimonCropp,chemzqm
114,2013-01-22 20:26:13,"@chjj no, it is for wiki only. 

I can understand your concern, and believe all github-specific (or other) features should be in a plugin. I added this feature just because it is stupid to parse the whole text myself.

#35 also looks like good start.
",hlb,chjj
111,2013-11-01 02:35:14,"Hi @leeoniya , @chjj
does this feature implemented?
it's pretty useful.

I think we can just render
 `[ ]` to `<input type=""checkbox"" disabled>`
and render
 `[x]` to `<input type=""checkbox"" disabled checked>`

don't need to add any css class on `input` element.

how do you think?
",kindy,chjj
111,2013-11-01 02:35:14,"Hi @leeoniya , @chjj
does this feature implemented?
it's pretty useful.

I think we can just render
 `[ ]` to `<input type=""checkbox"" disabled>`
and render
 `[x]` to `<input type=""checkbox"" disabled checked>`

don't need to add any css class on `input` element.

how do you think?
",kindy,leeoniya
111,2013-11-01 06:14:21,"@leeoniya 

I think the backend support is no need for this UI.
as most of us just want a ""todo list"" like things.

for the ""not standard"" stuff, as we already has `gfm` option, it's no matter to make it more ""gfm"".

if most people like it, it can become ""standard"" ...

btw. when I have time, I'll work on this feature. maybe this weekend.

and as other part is render to html, I think we can just render this to `input` element. but not unicode char.

:)
",kindy,leeoniya
107,2013-07-03 16:37:16,"> and there's no commensurate back-end to handle them

@walterdavis Marked doesn't provide any backend service at all. All it does is parse out HTML. Without a backend you can't save anything anyway. Even if it's just an H1, it doesn't persist in any way. 
",OscarGodson,walterdavis
107,2013-07-03 17:26:45,"Right. That was my understanding as well, and I was asking to make the point that adding the GFM checkboxes only does half the job.

Walter

On Jul 3, 2013, at 12:37 PM, Oscar Godson wrote:

> and there's no commensurate back-end to handle them
> 
> @walterdavis Marked doesn't provide any backend service at all. All it does is parse out HTML. Without a backend you can't save anything anyway. Even if it's just an H1, it doesn't persist in any way.
> 
> —
> Reply to this email directly or view it on GitHub.
",walterdavis,walterdavis
107,2014-02-26 06:02:58,"Added a rough implementation for task lists that's been sitting in my todo list file for several months. Let's see how it works on master for now.

cc @OscarGodson @walterdavis @Mithgol
",chjj,Mithgol
107,2014-02-26 06:02:58,"Added a rough implementation for task lists that's been sitting in my todo list file for several months. Let's see how it works on master for now.

cc @OscarGodson @walterdavis @Mithgol
",chjj,OscarGodson
107,2014-02-26 06:02:58,"Added a rough implementation for task lists that's been sitting in my todo list file for several months. Let's see how it works on master for now.

cc @OscarGodson @walterdavis @Mithgol
",chjj,walterdavis
107,2014-05-06 16:56:01,"@chjj What was the reason for the revert?
",evanwon,chjj
107,2014-05-21 15:24:33,"+1 for unicode characters rather than checkboxes (for renderer default behaviour). Anyone can customize it to add checkboxes with the current api



@chjj Maybe the implementation makes more sense thinking on a inline level method rather than a block level method? I've noticed the check marks can be ommited on any list items:
- [x] Completed
- [ ] Not Completed
- Not a task at all
- [x] Another task
- Not a task at all

This leads me to think marked doesn't need a new inline level method at all, featuring an enhancement to the current block-level [`listitem`](https://github.com/chjj/marked#block-level-renderer-methods)

`listitem(string text, undefined|bool check)`

That is
- `true` for `[x]`
- `false` for `[ ]`
- `undefined` if _""checkmark""_ is not present or `gfm` is disabled or `whatever-option` is disabled

Does this make sense?
",laconbass,chjj
105,2015-11-13 08:42:31,"@PeterBocan , i needed same future so i added way to optionally pass custom inline and block rules with parse functions. Look at this [branch](https://github.com/davitv/marked#adding-new-rules)
",davitv,PeterBocan
87,2013-01-08 12:31:02,"@chjj Reading the code of `marked.setOptions`, its goal is to replace the default. But it would be more logical to merge it with the existing one there (otherwise the function does not add any value over `marked.defaults = {breaks: true}`). Currently, setting some defaults this way requires merging manually otherwise all other features become disabled (as `undefined` is falsy).

and calltime options have the same issue: the [code using them](https://github.com/chjj/marked/blob/master/lib/marked.js#L97) does not merge them with the defaults. As soon as you define 1 option, you have to pass them all as defaults are discarded
",stof,chjj
87,2013-01-08 23:33:40,"@chjj : Nice code rewriting ! :)
The ability to access `marked.defaults` amongst others is really nice.

But as for `setOptions()`, it's still useless in its current form.. :)
I don't think there is a great deal of risk breaking old code that would have relied on it.. 
_but_ i can think of code relying on its current state that may break in the future if you add new options and defaults in a future version.
Let's imagine that in marked 2.8 you add a plugin mechanism to add/remove support for Markdown syntax variants, and that the current marked state is now defined with these defaults 



Old code using `setOptions()` but ignoring these `plugins` defaults will erase them and may break..!

That why _just merging_ the options passed as parameters with the currently defined ones makes it a safer/more usefull approach..

(ok.. my example is _very_ contrived.. but you see what i mean.. :))
",zipang,chjj
77,2013-05-29 01:24:08,"@chjj What's holding this up?
",scottgonzalez,chjj
77,2013-08-20 13:30:26,"+1 for this issue would be nice to have support for this. By the way thanks for the great work @chjj !
",lbdremy,chjj
74,2013-01-03 12:28:09,"So, I spent a little while fixing/optimizing/refactoring @kitsonk's implementation a little bit. I'm going to consider this feature experimental for a little while. You can disable it with the `tables` option. @kitsonk, thank you for the PR.
",chjj,kitsonk
74,2013-05-01 10:10:52,"@kitsonk I mean through markdown so some tables will be rendered bigger or smaller depending on width % set?

I am basically thinking how good this will be for writing documents that have tables in them.
",hahmed,kitsonk
74,2013-05-01 10:19:34,"It isn't part of the standard it is based on, and for good reason.  Hard coding presentation in the markup doesn't allow flexibility when it renders.  The only potential imrpovement would be to allow the specification of a class for a table, but again, none of the standards out there specify that, so I suspect @chjj wouldn't be interested in adding it, though there are some other issues here that talk about allowing some form of customisation of the output.

You can always use `<table>` if you need more flexibility.
",kitsonk,chjj
73,2013-01-08 06:56:13,"@jiewmeng, I'm confused. I don't know why you wouldn't want to escape that angle bracket. Closing this for now. Feel free to post if you still have an issue.
",chjj,jiewmeng
70,2012-09-03 10:34:47,"@chjj it appears to be, I didn't realise that it was there myself until looking at some of the marking being parsed by GFM in my repo.  I will look though the GFM code and make my patch match exactly what is supported by GFM as well as link the support to the GFM being enabled or not.  I will take a look at your other feedback as well.

The following tables are supported by Markdown Extra Tables and also appear to be supported by GFM:



and



Which unescaped appear as:

| Heading 1 | Heading 2 |
| --- | --- |
| Cell 1 | Cell 2 |
| Cell 3 | Cell 4 |

and 

| Header 1 | Header 2 |
| --- | --- |
| Cell 1 | Cell 2 |
| Cell 3 | Cell 4 |

And it appears that it supports the alignment as well:



renders as:

| Header 1 | Header 2 | Header 3 | Header 4 |
| :-: | --: | :-- | --- |
| Cell 1 | Cell 2 | Cell 3 | Cell 4 |
| Cell 5 | Cell 6 | Cell 7 | Cell 8 |

@gjtorikian the PHP implementation did not support it, only span based lexing, therefore my attempt did not include block lexing.  I will take a look at the GFM implementation, realising it is there now and if it is, add it.  The problem is that there appears to be no support in the PHP implementation to identify an individual row as a block, where each new line is treated as an individual row.  reStructuredText supports this, but I haven't found a markdown ""standard"" for this.
",kitsonk,gjtorikian
70,2012-09-03 10:34:47,"@chjj it appears to be, I didn't realise that it was there myself until looking at some of the marking being parsed by GFM in my repo.  I will look though the GFM code and make my patch match exactly what is supported by GFM as well as link the support to the GFM being enabled or not.  I will take a look at your other feedback as well.

The following tables are supported by Markdown Extra Tables and also appear to be supported by GFM:



and



Which unescaped appear as:

| Heading 1 | Heading 2 |
| --- | --- |
| Cell 1 | Cell 2 |
| Cell 3 | Cell 4 |

and 

| Header 1 | Header 2 |
| --- | --- |
| Cell 1 | Cell 2 |
| Cell 3 | Cell 4 |

And it appears that it supports the alignment as well:



renders as:

| Header 1 | Header 2 | Header 3 | Header 4 |
| :-: | --: | :-- | --- |
| Cell 1 | Cell 2 | Cell 3 | Cell 4 |
| Cell 5 | Cell 6 | Cell 7 | Cell 8 |

@gjtorikian the PHP implementation did not support it, only span based lexing, therefore my attempt did not include block lexing.  I will take a look at the GFM implementation, realising it is there now and if it is, add it.  The problem is that there appears to be no support in the PHP implementation to identify an individual row as a block, where each new line is treated as an individual row.  reStructuredText supports this, but I haven't found a markdown ""standard"" for this.
",kitsonk,chjj
67,2013-01-10 02:47:13,"Nice one. Thanks, @chjj.
",davidchambers,chjj
66,2013-01-08 07:02:31,"@yuchi is right. It should be `markdown=""markdown""`, `markdown=""""`, or `markdown`.

I'll be honest. I just think this is kind of ugly. Is there any well-known markdown implementation that uses this? I really dislike the idea of adding custom HTML attributes.
",chjj,yuchi
66,2013-01-23 02:39:56,"@chjj [PHP Markdown Extra](http://michelf.ca/projects/php-markdown/extra/#markdown-attr) supports it, so as [Maruku](http://maruku.rubyforge.org/maruku.html), [kramdown](http://kramdown.rubyforge.org/).

It exists because authors need to wrap a text block to apply some special style, ex, 


",hlb,chjj
66,2013-07-10 06:24:04,"Being compatible with PHP Markdown Extra (and several other existing implementations of this feature) is more important than a semantically better attribute value.

However, @chjj, I suppose you could support `markdown=""whatever""` and thus cover both cases: `markdown=""1""` (for the compatibility) and `markdown=""markdown""` (for XHTML flavour).
",Mithgol,chjj
51,2012-11-27 14:30:12,"@midnightmonster your big regex should not be anchored at the beginning of the string, otherwise it will only handle the first newline of the string instead of handling all of them.

The working solution is:


",stof,midnightmonster
51,2012-12-24 20:00:29,"I think it is slightly misleading to state that ""marked also implements GFM features"" in the README. I found - after integrating marked into my application - that all GFM features were supported _except_ the most prominent one (also the one I had come looking for): GFM line-breaks.

Since line break handling is the biggest difference between GFM and strict Markdown (as stated on the [GFM page itself](http://github.github.com/github-flavored-markdown/)), I think marked should either implement it, or else **at least mention the lack of support for this feature (and perhaps link to this issue) in the README**.

@midnightmonster thanks for that quick hack.
",vickychijwani,midnightmonster
51,2012-12-24 20:17:43,"@midnightmonster there seems to be some slight error with your hack. Take for example this input:



On GitHub, this is rendered as expected:
**foo**
bar
baz

But using marked and your hack, it renders as:
**foo** bar
baz

~~I think it might be because the code posted by @firien is from an old version of GFM. The latest version of the code (taken from [here](https://github.com/github/github-flavored-markdown/blob/gh-pages/code.rb#L17-L20)) is~~:


",vickychijwani,firien
51,2012-12-24 20:17:43,"@midnightmonster there seems to be some slight error with your hack. Take for example this input:



On GitHub, this is rendered as expected:
**foo**
bar
baz

But using marked and your hack, it renders as:
**foo** bar
baz

~~I think it might be because the code posted by @firien is from an old version of GFM. The latest version of the code (taken from [here](https://github.com/github/github-flavored-markdown/blob/gh-pages/code.rb#L17-L20)) is~~:


",vickychijwani,midnightmonster
51,2012-12-24 20:25:39,"Oops, sorry. Forgot to compare the last commit date on that repository with the gist @firien posted from. So if that gist is indeed the latest version, there must be some other error.
",vickychijwani,firien
51,2012-12-25 13:45:26,"Ok, so I've modified @midnightmonster's workaround to resolve the error mentioned in [my comment earlier](https://github.com/chjj/marked/issues/51#issuecomment-11665460). Basically I've added `\>\*` to the regex to fix GFM line breaks when the line starts with a `>` (blockquote) or `*` (emphasized / strong text).



The gist posted on the GFM page ([`gfm.rb`](https://gist.github.com/118964)) doesn't seem to be canonical GFM anyway, since GitHub uses [redcarpet](https://github.com/vmg/redcarpet) for actually rendering GFM on the site, and redcarpet is written in C (for instance, the C code for GFM line breaks is [here](https://github.com/vmg/redcarpet/blob/master/ext/redcarpet/html.c#L302-L326)).
",vickychijwani,midnightmonster
50,2012-08-20 13:49:00,"Thank you @chjj, looking forward to see `marked` supporting tables.

I will release today a webapp markdown editor that uses `marked` to supply a preview.
",danielfilho,chjj
47,2013-01-07 16:05:39,"@chjj Would you accept a pull request if I added implement the async API?
",fortes,chjj
47,2013-01-08 07:16:32,"@fortes, it depends on how you implement it. I might add it in the way mentioned above, but an entire refactor of the parser is not appealing to me, and I worry about any overhead that the async refactor might add.
",chjj,fortes
47,2013-01-08 23:12:11,"@chjj I'll take a crack at it when I get some spare cycles, and you can see what you think. I'm not interested in maintaining a fork, so if it's not something that will go into master, I'll come up with another solution for [fortes/enfield](http://github.com/fortes/enfield).

Great work on marked, btw. Easily the best of the node.js markdown parsers.
",fortes,chjj
44,2012-05-11 19:24:49,"@chjj FWIW. I agree with your opinion here on automatic link insertion for GitHub specific links. If this were implemented we would probably need to somehow work around it for EpicEditor since it is not designed to be used specifically with GitHub.

RE: https://github.com/OscarGodson/EpicEditor/pull/105
",johnmdonahue,chjj
43,2013-04-07 02:43:24,"@lazerscience @theron17 the renderer feature would be a good choice. cc @chjj #129 
",lepture,lazerscience
43,2013-04-07 02:43:24,"@lazerscience @theron17 the renderer feature would be a good choice. cc @chjj #129 
",lepture,chjj
43,2013-04-07 07:39:39,"@chjj Thanks looks promising, will look into that!
",lazerscience,chjj
35,2013-03-01 07:49:46,"@lepture I don't think these are the same - you are customizing the output for each instance of a particular match vs specifying a unique helper or plugin independent of existing markdown matches.  If I wanted to customize a heading, I'd use CSS. 
",potench,lepture
35,2014-09-02 21:09:00,"I agree with the direction that the original change and the extensions that @potench proposed.  This is a great way to solve a bunch of problems, as all the +1's suggest.  The idea of supporting <!-- --> for compat makes me happy too, given that these plug-ins, by their very nature, are going to be site-dependent.

Is there some prior art that the "":"" syntax for parameter-separation is mimicking?  I'd suggest two alternatives to that mechanism.  The first of which is to not do any parameter-breaking at all and make the add-on break down the parameter list if it needs to.

If you really feel that a more sophisticated means would be helpful, then I'd say the argument should be treated as a query string.  I prefer that because:
1. It's a well-known syntax
2. It's flexible
3. It has a known escaping language (e.g. what if you needed to have an argument with a colon in it?)
4. It'd allow the plug-in to take a more flexible parameter list.  (I've been thinking about using this sort of thing to allow markdown to reference code samples; in that space so customers may want to reference samples with a line & file, sometimes by an ID, maybe by a file name and a region name, etc.)  With this sort of thing, you can enrich your plug-in without breaking compat with old versions pretty easily.

Another nit: I'm not sure I like the switch to ""{"" from ""["".  I mean, I believe ""["" alone is wrong, because that overloads the hyperlink semantics in a way that might be confusing or conflicting.  But introducing a whole new character seems like too heavy a hammer.  Instead, I'd propose looking at the image inclusion syntax (`""![...]""`) as a model, because it does something generally similar.  My proposal for a character would be '$' because it's got some variable-substitution connotations that seem appropriate here.  So, for example `""$[youtube:g2FOLrC2e6E]""`, would be what I'd go for.

Details aside, this is an important change, any hope of some progress here, @chjj ?  Anything I could do to help it along?
",SteveBenz,potench
35,2014-09-03 18:00:08,"I like the idea of having plugins in markdown.
The proposal here adds this on a block level but not on an inline level and I am wondering if the syntax proposed fits all possible use-cases.

Currently I am working on a markdown preprocessor [markedpp](https://github.com/commenthol/markedpp) which adds support for TOC, numberedheadings, inlining files, aso ...

I encountered the problem that there is no clear defined markdown syntax for extensions, and I really wish there would be one.

This syntax should be suitable on block and on inline level.

In [markedpp](https://github.com/commenthol/markedpp) I needed to specify a command (comparable to plugin/extension) as well as some parameters and opted for the following ""bang"" syntax which is derived from the image tag.



where: 
- `<command>` : A word of `[a-z]+` chars defining the extension
- `<options>` : Optional. A space separated list of keys or key-value pairs enclosed in normal brackets. 
  - key-value pairs are separated by a `=` char e.g. `key=value` which allows assignment of numbers, strings
  - keys lack the `=` char which allows assignment of booleans (or value combined with the used `<command>`).
  - Arrays can be assigned to a key with `key=""value1;value2;value3""` (The separator "";"" char would need to be discussed... or could be left to the used `<command>`)
  - If spaces are used in keys then these need to be escaped with `\`, alternatively `""` can be used e.g. `key=""value with spaces""`.

This allows to specify e.g.



In order to reuse this information for another pre-process run a ""closing"" tag is required as well. Therefore the alternative syntax is allowed as well:



This works well on block level, where each command is surrounded by newlines, but not on an inline level. I am not firm if there are languages which allow a `!` in front of a character (e.g. something like spanish with their `¡`). Or imagine a typo e.g. ""Last word !Next sentence"". `!Next` would be interpreted as a command... :(

While reading @SteveBenz comment I really like the idea of using the `$[]()` syntax which really can be used everywhere.

So what about this?



which would allow e.g.:



or



or if you want to define a plugin which itself neads some input:
e.g. a uml-parser which generates a SVG displaying a UML sequence chart:





What do you think?
",commenthol,SteveBenz
35,2014-09-08 06:57:04,"@commenthol  has a lot of good ideas.  I like your adaption of what I suggested.  Using the () for the argument list is a fantastic idea, because I think it looks clearer and it doesn't rely on introducing some new magic character into the markdown syntax.  $[plugin](optional-args) is quite consistent with the prior art and I think it strikes the right balance between clarity and backwards compatibility.

I am really solidifying my belief that argument parsing should be punted to the add-in itself.  Maybe nice markdown libraries can offer some libraries and good documentation can suggest some best practices, but it shouldn't be a part of the language.

I think you should separate your thinking about &#96;&#96;&#96; from plug-ins.  I think you could do it with custom rendering better.  If you had a custom renderer for &#96;&#96;&#96;, you could go with:


```

Your custom renderer could pick that apart and generate some nice svgl from that text.  To me I don't see it as all that different from syntax highlighting.  The reason I say that is because if your markdown got copied to some other host that didn't support any of your markdown extensions, the foreign renderer would simply render the text as-is, and that wouldn't be the end of the world.  The reader could still get the gist of the diagram.

Although this belongs in another thread, I'd claim that we need to allow for richer metadata than just a language after the &#96;&#96;&#96;.  I'd like to see the ability to include other metadata there - here, for example, the language is UML, but you shouldn't, as you are now, forced to somehow pretend that ""umlsequence"" is a language, when in real life, ""uml"" is the language and ""sequence"" is the kind of diagram.

For another example, suppose you have a custom renderer that not only knows how to highlight, but also to generate hyperlinks to class names mentioned in the code.  For that guy to really work right, it'd need to know the ""using"" statements associated with the block of code.  Right now there's no way to convey that 'using' data...  But all that'd be needed to fix that would be to loosen up the regex that matches fenced ticks.
",SteveBenz,commenthol
35,2014-09-08 13:14:15,"Hey @commenthol and @SteveBenz I think what you are describing could be better referred to as ""Macros"".  I have seen it asked for out of Markdown countless times.  The idea being that there is one reserved syntax for the purpose of building your own custom markup output that your sub group of Markdown users can benefit from.   Like UML diagrams!  You just build your own SVG/canvas madness that picks up on the HTML output after the fact.

If you are curious, there is a **long** discussion about the idea on a fork of this repo over here:
https://github.com/jonschlinkert/remarked/issues/9

The project itself is being rebuilt under a new name with learnings from this one:
https://github.com/jonschlinkert/remarkable

They plan to get block macros in there as a default and throw in a couple tickets from this very project.  You may want to watch it, it has solid admins behind it :) 
",howardroark,commenthol
35,2014-09-08 13:14:15,"Hey @commenthol and @SteveBenz I think what you are describing could be better referred to as ""Macros"".  I have seen it asked for out of Markdown countless times.  The idea being that there is one reserved syntax for the purpose of building your own custom markup output that your sub group of Markdown users can benefit from.   Like UML diagrams!  You just build your own SVG/canvas madness that picks up on the HTML output after the fact.

If you are curious, there is a **long** discussion about the idea on a fork of this repo over here:
https://github.com/jonschlinkert/remarked/issues/9

The project itself is being rebuilt under a new name with learnings from this one:
https://github.com/jonschlinkert/remarkable

They plan to get block macros in there as a default and throw in a couple tickets from this very project.  You may want to watch it, it has solid admins behind it :) 
",howardroark,SteveBenz
27,2012-02-08 21:46:06,"I most definitely respect @chjj's choice here to keep marked small. It's much better than the urge to say ""yes I'll do this.""...and then never do it.

I, too, however, would like to see more Markdown extension features, particularly those of Maruku. To that extent I've [created a new repo](https://github.com/gjtorikian/namp) to port these into Node.js. It's empty now but I'll start porting to ""standard"" Markdown features soon.
",gjtorikian,chjj
27,2012-02-15 02:35:09,"@chjj I've started [my own fork](https://github.com/gjtorikian/marked) to hook into the core Marked lib. I think having a plugin system is neat, but just being able to extend it at all is a great asset. 

I'd be curious to know what you had in mind. Mine is obviously vary naïve. 
",gjtorikian,chjj
27,2012-07-12 22:49:07,"@bootstraponline [it does](https://github.com/chjj/marked#options), just set `gfm`option to `true`. There are some issues though, notably with [GFM line breaks](https://github.com/chjj/marked/issues/51).
",instanceofme,bootstraponline
27,2014-04-09 06:27:26,"@cabrinoob Thanks for the tip. Awesome Markdown editor!!! I wonder what parser uses.
",aruizca,cabrinoob
9,2011-12-10 06:08:10,"@mikeal, it's on a separate branch right now. It will land in npm eventually.
",chjj,mikeal
5,2013-07-25 17:41:35,"Hey @pvorb @chjj do you guys have a working example of how to ignore blocks of HTML data?
",matsko,pvorb
5,2013-07-25 17:41:35,"Hey @pvorb @chjj do you guys have a working example of how to ignore blocks of HTML data?
",matsko,chjj
5,2013-07-26 08:15:09,"@matsko What do you mean with ""blocks of HTML data"". Only selected blocks? Comment them out:


",pvorb,matsko
5,2013-07-26 08:17:56,"@matsko Setting [`sanitize`](https://github.com/chjj/marked#sanitize) to true will ignore all HTML input.
",pvorb,matsko
852,2017-02-28 23:35:35,@matt- @chjj: any decision on this? This will produce the same behavior that github has in their markdown rendering support for data: urls.,jeremyblalock,chjj
844,2017-01-25 01:26:00,@chjj  I added this along the same lines as the javascript: xss. Can we version bump and push this?,matt-,chjj
844,2017-02-14 01:25:17,No idea thats up to @chjj. I personally would love to see a bump to get this resolved. ,matt-,chjj
844,2017-02-14 02:39:08,"k. thank you!

@chjj can you add the other contributors here to the npm package so they can publish as well?

",paulirish,chjj
831,2017-01-06 07:27:13,"@Shazoo, one fallback way is to use html tag:

",xcatliu,Shazoo
821,2017-02-10 11:45:23,"@rumkin actually it is very straightforward, but still if there are very common use cases like @youtube, @vimeo, even @tweet, that would be great for beginners to learn.",naivefun,vimeo
821,2017-02-10 11:45:23,"@rumkin actually it is very straightforward, but still if there are very common use cases like @youtube, @vimeo, even @tweet, that would be great for beginners to learn.",naivefun,tweet
821,2017-02-10 11:45:23,"@rumkin actually it is very straightforward, but still if there are very common use cases like @youtube, @vimeo, even @tweet, that would be great for beginners to learn.",naivefun,youtube
815,2017-03-06 22:47:53,"The `marked.min.js` file should be updated very quickly. **This is a high priority issue**. I'm seeing **a lot** of FLOSS using this file without knowing that they are vulnerable to #592. This issue is creating potential XSS in all of them.

Please @chjj update it!",Framartin,chjj
809,2016-12-04 18:54:19,Any news about this @chjj ? This would be super useful.,josephernest,chjj
768,2016-08-02 14:22:00,"@chjj @matt- @parleur - This very small pull request will help rid Ember.js of some deprecation warnings, any attention would be much appreciated 👍
",mdentremont,matt-
768,2016-08-02 14:22:00,"@chjj @matt- @parleur - This very small pull request will help rid Ember.js of some deprecation warnings, any attention would be much appreciated 👍
",mdentremont,chjj
768,2016-08-02 14:22:00,"@chjj @matt- @parleur - This very small pull request will help rid Ember.js of some deprecation warnings, any attention would be much appreciated 👍
",mdentremont,parleur
768,2016-09-02 13:50:07,"@chjj @matt- @parleur any chance this could be looked at?
",mdentremont,matt-
768,2016-09-02 13:50:07,"@chjj @matt- @parleur any chance this could be looked at?
",mdentremont,chjj
768,2016-09-02 13:50:07,"@chjj @matt- @parleur any chance this could be looked at?
",mdentremont,parleur
768,2016-09-15 18:24:55,"@chjj @matt- @parleur This has been open and ready to go for months, could you please take a look and merge?
",mdentremont,matt-
768,2016-09-15 18:24:55,"@chjj @matt- @parleur This has been open and ready to go for months, could you please take a look and merge?
",mdentremont,chjj
768,2016-09-15 18:24:55,"@chjj @matt- @parleur This has been open and ready to go for months, could you please take a look and merge?
",mdentremont,parleur
768,2016-10-17 14:15:10,"@matt- Thanks! ..you know you wanna hit that green button now, don't ya!
",mdentremont,matt-
756,2016-06-02 09:13:56,"@chjj Seems that you're busy with other projects.

This repo has so many open pull requests and if marked would die it would be very sad.
So please announce that you want to add some active maintainers for this tool.

@ChrisWren @Feder1co5oave @summivox
What do you think?
",timaschew,chjj
756,2016-06-02 09:13:56,"@chjj Seems that you're busy with other projects.

This repo has so many open pull requests and if marked would die it would be very sad.
So please announce that you want to add some active maintainers for this tool.

@ChrisWren @Feder1co5oave @summivox
What do you think?
",timaschew,ChrisWren
756,2016-06-02 09:13:56,"@chjj Seems that you're busy with other projects.

This repo has so many open pull requests and if marked would die it would be very sad.
So please announce that you want to add some active maintainers for this tool.

@ChrisWren @Feder1co5oave @summivox
What do you think?
",timaschew,Feder1co5oave
756,2016-06-02 09:13:56,"@chjj Seems that you're busy with other projects.

This repo has so many open pull requests and if marked would die it would be very sad.
So please announce that you want to add some active maintainers for this tool.

@ChrisWren @Feder1co5oave @summivox
What do you think?
",timaschew,summivox
756,2016-06-12 01:57:33,"Given @chjj does not respond to email, twitter or github mentions - does anyone know if Is there a process to take over the npm namespace somehow?
",tcurdt,chjj
756,2016-06-16 17:14:25,"I feel like given the popularity of `marked` we should definitely keep the project going and at least keep it maintained and suitable for use in other important projects!
As for me I would be glad to help tidy up the issue list, review and merge pull requests, and work out some fixes as well (I have a pretty good understanding of most of the code by now).
Many issues need to be closed or tagged, important fixes must be applied (e.g. the one by @matt-).

There are also some feature requests that are legitimate but I am unsure whether they should be included in marked. I feel like we should set some guidelines about philosophy and future development.
_For example_, what to do about automatically generated IDs for headers ( #664 ), inline links with parenthesis ( #619 #448 ), github task lists ( #689 )...

We would also appreciate some kind of comment from @ChrisWren since he's been a maintainer for a long time. He's been pretty inactive on Github for a while so we'd understand if he is busy at the moment. Just givin' him a shout out.
",Feder1co5oave,ChrisWren
739,2016-04-25 13:34:03,"@chjj any comments?
",Turbo87,chjj
739,2016-05-12 16:42:20,"@chjj friendly ping
",stefanpenner,chjj
739,2016-06-11 10:47:33,"@chjj feel free to reopen once this repo is maintained again 
",Turbo87,chjj
739,2016-07-08 18:14:28,"@Turbo87 could we reopen this now that there are new contributors on this repo (@matt- @parleur)
",mdentremont,matt-
739,2016-07-08 18:14:28,"@Turbo87 could we reopen this now that there are new contributors on this repo (@matt- @parleur)
",mdentremont,parleur
727,2017-02-21 23:07:17,"Project is dying (https://github.com/chjj/marked/issues/724), @chjj please add maintainers !",noraj1337,chjj
727,2017-02-21 23:22:20,@matt- you're right. @chjj seems to only works on [bcoin](https://github.com/bcoin-org/bcoin) now. That's why is switched to [markdown-it](https://github.com/markdown-it/markdown-it) instead. That is active and support [CommonMark](http://commonmark.org/).,noraj1337,chjj
725,2016-03-02 09:10:13,"If i have a link like `http://xxx.com/xx/@xx/xxx`, you will compile it to a mail.

The code is at https://github.com/chjj/marked/blob/master/lib/marked.js#L580.

I think you can add some more check to it.

Thank you.
",nanqiu,xx
724,2016-02-24 08:33:41,"Yeah I believ it myself, but I want a comment from @chjj 
",Snorlock,chjj
694,2016-03-28 11:04:38,"It would be very helpful to have RTL support in Marked. What do you think @chjj ?
",KayvanMazaheri,chjj
682,2015-11-15 18:55:10,"I agree with what @scottgonzalez said here: https://github.com/chjj/marked/issues/417#issuecomment-42740178

I chose to return `null` instead of an empty string in order to let the user know there's a problem, and that it's probably his fault.

The `TypeError` is still thrown if a user calls manually `Lexer.lex` and then `Parser.parse`, but I think it's her/his business at this point.
",Feder1co5oave,scottgonzalez
656,2015-09-04 12:20:22,"@chjj 
First of all, thanks for this project!
But it seems you don't have enough time for this project, 
may be someone can help you maintain this project?
",valorkin,chjj
655,2015-09-08 07:58:25,"@chjj 
",julmot,chjj
655,2015-09-11 06:56:47,":+1: When will it be available @chjj?
",julmot,chjj
655,2015-09-17 15:34:19,"Push!? @chjj @drmuey 
",julmot,chjj
650,2015-08-24 14:09:35,"Since #66 has been opened for quite some time and hasn't received neither acceptance nor rejection, I've decided to create an updated PR that is compatible with the current version of marked.

Credit  goes to @boomyjee, @davidchambers and @Mithgol
",hgGeorg,boomyjee
650,2015-08-24 14:09:35,"Since #66 has been opened for quite some time and hasn't received neither acceptance nor rejection, I've decided to create an updated PR that is compatible with the current version of marked.

Credit  goes to @boomyjee, @davidchambers and @Mithgol
",hgGeorg,Mithgol
650,2015-08-24 14:09:35,"Since #66 has been opened for quite some time and hasn't received neither acceptance nor rejection, I've decided to create an updated PR that is compatible with the current version of marked.

Credit  goes to @boomyjee, @davidchambers and @Mithgol
",hgGeorg,davidchambers
642,2015-11-09 06:22:59,"Thanks @fudesign2008
",getaaron,fudesign2008
626,2015-07-21 17:56:24,"This is a meta-issue. As of 2015-07-21, there are 215 open issues and 96 (!) open PRs. @chjj, are you interested in community help with maintaining marked? Some good first steps might be setting up the repo on CI to attach test pass/fail reports to PRs, triaging open issues / PRs, closing old issues, and asking for more eyes and hands. I'm happy to help with any of the above if you'd like.
",jsdnxx,chjj
626,2015-07-22 13:33:41,"Hey @jden, see #618.
",rgbkrk,jden
625,2015-07-16 22:31:47,"Hi,

At the moment, in a code block, if you have:



It gets turned into:



Regardless of what `sanitize` is.

In https://github.com/chjj/marked/issues/160#issuecomment-18611040 @scottgonzalez suggested:



Is there a case were `<code>` blocks should actually be escaped like that, really?

Shouldn't this be the default behaviour, without hacking?
Sorry I would have reopened #160  but couldn't.

Merc.
",mercmobily,scottgonzalez
619,2015-07-23 17:28:08,"I have no expectation that @chjj will ever fix this, but it's most a bug stems from a bad assumption in https://github.com/chjj/marked/blob/master/lib/marked.js#L467, which is terminal: unless someone introduces a ""respect nesting"" operator to JavaScript's RegEx engine, it is impossible to user regular expressions in a way that properly deals with blocks/nesting.

(which is why we typically don't parse structure syntax with regex, but with tokenizers instead)

I was thinking of trying to fix this, but ""fix"" in this case means ""write a new parser that doesn't rely on regex"", and that's not happening. So: if you need links in which the URI contains `()`, don't use marked.js
",Pomax,chjj
618,2015-07-12 19:50:37,"This package is great! It would be nice to see additional maintainers come aboard that can help triage existing issues and PRs. After filing my own PRs and issues (with no commentary), I've noticed that :new: PRs and issues have come up without resolution.

Would there be a path for adding additional maintainers to this package to help with outstanding PRs or issues?

I'm happy to help and fairly well versed in working with lots of collaborators to a project while applying the direction of a project as best I can (in this case, sticking to the [philosophy behind marked](https://github.com/chjj/marked#philosophy-behind-marked)). Please let me know if I or others can help!

/cc @chjj @ChrisWren @minrk @jdfreder
",rgbkrk,chjj
618,2015-07-12 19:50:37,"This package is great! It would be nice to see additional maintainers come aboard that can help triage existing issues and PRs. After filing my own PRs and issues (with no commentary), I've noticed that :new: PRs and issues have come up without resolution.

Would there be a path for adding additional maintainers to this package to help with outstanding PRs or issues?

I'm happy to help and fairly well versed in working with lots of collaborators to a project while applying the direction of a project as best I can (in this case, sticking to the [philosophy behind marked](https://github.com/chjj/marked#philosophy-behind-marked)). Please let me know if I or others can help!

/cc @chjj @ChrisWren @minrk @jdfreder
",rgbkrk,ChrisWren
618,2015-07-12 19:50:37,"This package is great! It would be nice to see additional maintainers come aboard that can help triage existing issues and PRs. After filing my own PRs and issues (with no commentary), I've noticed that :new: PRs and issues have come up without resolution.

Would there be a path for adding additional maintainers to this package to help with outstanding PRs or issues?

I'm happy to help and fairly well versed in working with lots of collaborators to a project while applying the direction of a project as best I can (in this case, sticking to the [philosophy behind marked](https://github.com/chjj/marked#philosophy-behind-marked)). Please let me know if I or others can help!

/cc @chjj @ChrisWren @minrk @jdfreder
",rgbkrk,minrk
618,2015-07-12 19:50:37,"This package is great! It would be nice to see additional maintainers come aboard that can help triage existing issues and PRs. After filing my own PRs and issues (with no commentary), I've noticed that :new: PRs and issues have come up without resolution.

Would there be a path for adding additional maintainers to this package to help with outstanding PRs or issues?

I'm happy to help and fairly well versed in working with lots of collaborators to a project while applying the direction of a project as best I can (in this case, sticking to the [philosophy behind marked](https://github.com/chjj/marked#philosophy-behind-marked)). Please let me know if I or others can help!

/cc @chjj @ChrisWren @minrk @jdfreder
",rgbkrk,jdfreder
618,2015-07-15 18:28:01,"Three days and no answer... @chjj i think this is a great offer!
",mercmobily,chjj
618,2015-07-23 21:13:34,"@chjj What do you think about @Pomax as an additional maintainer?
",rgbkrk,Pomax
616,2015-07-30 21:27:09,"@chjj I don't understand why the test suite [removes all whitespace before comparing the actual and expected output](https://github.com/chjj/marked/blob/master/test/index.js#L115-L116). As you can see from my fumbling around with these highly whitespace-sensitive fixes here, it would have been a great help if the fixtures were matched exactly, and it would also make the error messages from the test suite much more readable.

I'll happily contribute a rewrite of the test suite in that direction if you're interested.
",papandreou,chjj
613,2015-10-01 13:48:15,"@chjj any opinion on this?
",matthewp,chjj
592,2016-06-02 08:56:55,"@matt or anyone else...   Any chance that you would be willing to help the Modernizr js (https://github.com/Modernizr/Modernizr)  swap out its dependency from Marked to Remarkable? I'm too new at programming javascript to take  on the task myself. 
",emveeoh,matt
592,2016-07-08 20:44:12,"@chjj responded to a call for maintainers https://github.com/chjj/marked/issues/756 
",mvhenten,chjj
592,2016-07-29 20:06:47,"@matt- Can you `npm version patch && npm publish` yourself or does it still have to be done by @chjj? The version on npm is still 0.3.5 published 12 months ago: https://www.npmjs.com/package/marked
",rsp,chjj
592,2016-07-30 03:07:41,"That is all @chjj

On Friday, July 29, 2016, Rafał Pocztarski notifications@github.com wrote:

> @matt- https://github.com/matt- Can you npm version patch && npm publish
> yourself or does it still have to be done by @chjj
> https://github.com/chjj? The version of npm is still 0.3.5 published 12
> months ago: https://www.npmjs.com/package/marked
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/chjj/marked/pull/592#issuecomment-236280610, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAbr4sQX5-C4C_BdSAvsUq5sjg32a6Tdks5qal1agaJpZM4Eg7pd
> .

## 

../matt
",matt-,chjj
587,2016-07-09 14:52:32,"@matt- @parleur Thank you for maintaining this project. I would love to +1 this PR.
",ZackWard,matt-
587,2016-07-09 14:52:32,"@matt- @parleur Thank you for maintaining this project. I would love to +1 this PR.
",ZackWard,parleur
587,2017-01-05 23:02:51,"I write my notes in [VS Code](https://github.com/microsoft/vscode) using markdown. Every time I go to make a task list I expect GFM behavior, but alas, it never works. I'd love for VS Code to change, but I think they've made [it clear](https://github.com/Microsoft/vscode/issues/2175) that they won't. The state of this project is making me sad. Come on guys, get your act together, be a man, pass the baton and let people help.
@matt- @chjj @parleur ",richarddavenport,matt-
587,2017-01-05 23:02:51,"I write my notes in [VS Code](https://github.com/microsoft/vscode) using markdown. Every time I go to make a task list I expect GFM behavior, but alas, it never works. I'd love for VS Code to change, but I think they've made [it clear](https://github.com/Microsoft/vscode/issues/2175) that they won't. The state of this project is making me sad. Come on guys, get your act together, be a man, pass the baton and let people help.
@matt- @chjj @parleur ",richarddavenport,parleur
586,2015-05-05 06:05:48,"Hello,
When a link targets javascript, the trailing ) is dropped.
Example:  `[hello](javascript:alert(""Hello""))` links to `javascript:alert(""Hello""`
Thanks for your job!
@chtixof
",chtixof,chtixof
579,2015-05-08 09:15:35,"+1. 

What if something is in `block` and in `inline`?

---

@chjj are you planning to merge this then since you closed #562? :smile: 
",adam-lynch,chjj
578,2015-11-04 23:31:39,"@buob @chjj doesn't appear to do anything currently.
",amccloud,chjj
573,2015-04-16 14:17:31,"@chjj is project dead and deprecated?
",iamstarkov,chjj
573,2015-04-16 19:29:44,"@matmuchrapna Project is probably dead, given the number of open issues and pull requests.
",JCMais,matmuchrapna
561,2015-03-28 11:28:05,"@juaron The default HTML5 charset is UTF-8. If I do not specify the meta tag at all and convert the markdown `#Übung` and add it to the body, the resulting string is `<h1 id=""-bung-1"">Ãœbung 1</h1>`.

It should be `<h1 id=""übung-1"">Übung 1</h1>`.

The HTML is saved using UTF-8. If I add the meta tag with UTF-8 to the header, the resulting markdown is: `<h1 id=""-bung-1"">Übung 1</h1>`.

From my point of view, it should work without specifying an encoding tag at all, as the default HTML encoding is UTF-8.
",fanktom,juaron
561,2015-07-14 21:27:22,"@sansumbrella The github header contains `<meta charset='utf-8'>`.

@southdesign The default HTML5 is UTF-8 and the default of HTML4 is ISO-8859-1 (also called Latin 1).

But I can still not reproduce this error.
Could you please run `console.log(marked(""ä""))`?
When I run this I get that  `<h1 id=""-bung"">Übung</h1>`.

A possible solution would be to use character entity. In special this mean replace `ä` with `&#196;`.
",aroneiermann,southdesign
537,2015-01-25 23:40:00,"@chjj Could you publish to npm?
",okuryu,chjj
537,2015-01-25 23:55:22,"I also want to say to everyone, and @naholyr: PRs for the sanitizer are welcome. The sanitizer is something I added on a whim just because I could. I try to make it as secure as possible, but I would never make a guarantee that it is absolutely secure. If you care about security, you should use a more heavy duty html sanitizer. Hopefully one day we can get to that point though.
",chjj,naholyr
533,2015-01-14 21:54:58,"@aptkf I'm running into a very similar issue. Did you figure out what the problem was (despite it not being with marked)?
",joshlasdin,aptkf
531,2014-12-24 11:39:31,"Hello Christopher,

This lib is awesome but when I see there 176 open issues and 79 PR, I wonder if the project is still active.

@chjj can you tell us what is the status of your project and what do you plan in a near future?
",acemtp,chjj
514,2016-03-10 19:10:21,"@chjj if you have a little time, please take a look on this issue :+1: 
",brunowego,chjj
496,2014-10-14 16:01:04,"Same thing happens with [wiredep](https://github.com/taptapship/wiredep) not being able to glob in marked. This is due to the lack of the correct bower.json file, which is [currently part of marked's master](https://github.com/chjj/marked/blob/master/bower.json), not being inside of a release tag.

@chjj is it possible to please do a release of the latest code to a tag so that bower can more properly ingest marked without other scripts having to point to master?

thanks,
Scott
",scottnath,chjj
485,2014-09-10 18:29:27,"This really seems out of scope for marked, but I'll wait for @chjj to respond.
",scottgonzalez,chjj
485,2014-09-11 13:59:47,"I hear that. I just see a few markdown processors supporting meta data, and it's pretty useful to be able to include it.

On Wed, Sep 10, 2014 at 2:29 PM, Scott González notifications@github.com
wrote:

> ## This really seems out of scope for marked, but I'll wait for @chjj to respond.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/chjj/marked/issues/485#issuecomment-55160403
",elliottregan,chjj
485,2016-02-06 18:30:58,"FYI if people are still looking, @adam-lynch's comment [here](https://github.com/chjj/marked/issues/485#issuecomment-58087903) is _conceptually_ the way to go.

In terms of _implementation_, [metalsmith](http://www.metalsmith.io/) is really great for this type of thing, and includes a [metalsmith-markdown](https://github.com/segmentio/metalsmith-markdown) plugin that is built on top of [marked](https://github.com/chjj/marked). When used in combination with [metalsmith-layouts](https://github.com/superwolff/metalsmith-layouts), you can do some really cool things.

For example (in a `gulp` pipeline):



`metalsmith-layouts` is **automatically** looking for the `file.frontMatter` property set internally by [gulp-front-matter](https://github.com/lmtm/gulp-front-matter), and using it to render [handlebars](http://handlebarsjs.com/) data for a fixed set of `layouts`.

Example `markdown` (`myfile.md`):



Example `handlebars` template used by `metalsmith-layouts` (`documentation.html`):



Outputs (`myfile.html`):



None of this would be possible without the work by @chjj and team, so thanks for that.

I originally came here looking for answers, so hopefully this helps the next guy/gal.

Cheers.
",justinhelmer,chjj
456,2015-03-10 19:40:43,"Is this still being looked at @chjj ?
",F1LT3R,chjj
449,2014-07-17 20:15:28,"I believe the newline is there for mere sake of readability of the generated html code. Let's hear if @chjj would like to give up a bit of readability in favor of better compatibility.
",Feder1co5oave,chjj
431,2014-08-11 01:18:16,"@paolocasarini Hey, I'm one of the two authors of `gitbook`.

We forked `marked` as `kramed` (https://github.com/GitbookIO/kramed), the idea being to move towards `kramdown` support and also be able to move forward without having to wait on @chjj to merge PRs on `marked` (he's done awesome work up till now with, it just seems like he's busy with other more important things these days).

Do you want to submit your PR to `kramed` (you'll need to make a few small modifications) and I'll happily merge it.

Thanks !
",AaronO,chjj
425,2014-05-22 04:17:29,"@chjj I search the issues in marked,and found the same quetion like #379 #383 etc
Is that true we can't add new lexer rules and do something we want using marked?But I think it is very important.
I wanna write something like {{{test.html}}} in markdown file,and do something especial about these pattern,is there any way to do this?
I don't know whether am I misunderstanding the issues I mentioned before.If I am right,can marked support this?thanks a lot!
",weekeight,chjj
425,2014-05-28 17:12:52,"@xingqiba0418 @styfle you can make it in this way https://github.com/chjj/marked#overriding-renderer-methods
",7c00,xingqiba0418
425,2014-05-29 01:33:41,"@t09def Thanks! I didn't think to override `paragraph` but that makes sense because we don't want to match `@name` if it is in a code block, only in the paragraph block.

It still seems odd to me that you have to use the prototype to get the renderer to work properly.
",styfle,t09def
425,2014-05-29 01:33:41,"@t09def Thanks! I didn't think to override `paragraph` but that makes sense because we don't want to match `@name` if it is in a code block, only in the paragraph block.

It still seems odd to me that you have to use the prototype to get the renderer to work properly.
",styfle,name
418,2015-06-16 15:51:04,"Bump. @chjj?
",xdumaine,chjj
418,2017-01-30 23:25:17,@chjj Please merge this.,wells,chjj
418,2017-02-26 04:12:21,@chjj please merge ;),ee7klt,chjj
416,2014-05-09 12:04:33,"This really seems out of scope for marked, but I'll wait for @chjj to chime in. #338 would make it easy for you to do on your own though.
",scottgonzalez,chjj
398,2014-04-28 17:16:49,"@jonathanong component.json use to be the config file for bower project. So this component.json had something to do with bower. Now component.json are deprecated in bower.

@queckezz What? Your PR are welcome ;-)

@chjj @wzr1337 Here is a PR that should satisfy most of your users https://github.com/chjj/marked/pull/402

Thanks for this cool stuff! marked rocks!
",clakech,jonathanong
379,2014-03-29 05:14:59,"@chjj The README doesn't specify how to add a new rule. Here's what I've tried:



When my text input is `$$$`, the output is not `Three Dollars`. When I log `lexer.lex(text)` my input is identified as a `paragraph`, not `threeDollars`. How do I make my new rule work and how do I order which rules take precedence over others?

Thanks for your help.
",winduptoy,chjj
368,2014-03-13 22:22:16,"I'm fairly certain marked only works in one direction. I doubt @chjj wants to bundle support for the other direction (even if only from tokens).
",scottgonzalez,chjj
363,2014-03-13 03:44:01,"@daleconboy, I'm sorry to hear that, but many people lost several hours of their lives trying to figure out why their spaces weren't getting processed correctly when text was passed in from the DOM (see #52 - cc @OscarGodson), which is why this was added in the first place. 

I'll consider adding an option, but I want to keep their removal the default since more people probably get bit by this ""feature"" of contenteditable elements than not.
",chjj,OscarGodson
362,2014-07-08 06:51:26,"@jonschlinkert, have it in mind for your `remarked` ;] Not the best doc, but look at the given lines for more detail look or tweet me if needs something.
That was long time ago, soon i'll create separate module for media parser.

Also, it's good idea to see some of issues here.

---

Live demo is moved to http://tunnckocore.github.io/blankr/markedjs/, old links edited.
",tunnckoCore,jonschlinkert
359,2014-03-02 06:04:39,"I would like to do like github has with `@person`. How do I extend marked to look for the `@person`? Thanks for all the help and awesome module.
",bvallelunga,person
359,2014-03-02 06:05:13,"@ChrisWren do you have any suggestions?
",bvallelunga,ChrisWren
359,2015-08-04 10:45:41,"@activey use @markdown-it or `jonschlinkert/remarkable` or `bevacqua/megamark` (is awesome!), `ForbesLindesay/supermarked` and etc

`marked` is almost dead. Markdown-it is upstream from half year or so. It is highly customizeable, high speed , and have plugins in npm https://www.npmjs.com/browse/keyword/markdown-it
",tunnckoCore,markdown-it
356,2014-03-09 22:33:11,"It looks like @chjj hasn't done a release to npm since he fixed it. So... you're not crazy... and it is fixed... but you can't have the fix.
",adam-p,chjj
351,2014-02-17 08:22:11,"Footnotes feature. It looks like MultiMarkdown Footnotes Syntax:


- http://daringfireball.net/2005/07/footnotes
- https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#wiki-footnotes
- http://six.pairlist.net/pipermail/markdown-discuss/2005-August/001442.html
- http://six.pairlist.net/pipermail/markdown-discuss/2005-August/001480.html

Related Issue: https://github.com/chjj/marked/issues/27

@chjj Have a review of this patch. I will add test cases soon.
",lepture,chjj
351,2014-02-18 13:01:52,"@prashaantt I am not sure that @chjj would agree with this feature. I'd like to implement the unfinished part when @chjj says yes.
",lepture,chjj
351,2014-02-20 03:05:33,"This would be amazing @lepture and @chjj, I would love for this feature to be added as well. 
",contactjiayi,chjj
348,2015-06-12 00:56:43,"@chjj Are there any concerns for not merging this issue?
This improves inlining HTML a lot.
",leesei,chjj
339,2016-01-16 17:16:44,"In my particular case, where I already had to modify the renderer to properly highlight a code block ([known issue](https://github.com/chjj/marked/pull/418)), I just added another method to do just this.



It takes advantage of the fact Marked parses images this way:





Do note that you can't flip the two:





---

Although, most definitely +1 @SimonCropp on a ""useful renderer overrides"" list.

@chjj What do you think of both of these (my idea and the ""useful renderer overrides"" list)?
",isiahmeadows,chjj
338,2014-04-22 10:22:56,"Guys, I'm giving up ( current code is soo hard to dig in and implementing this stuff would be a real... 5th wheel.

@chjj , can you accept some major refactoring so I can implement this stuff? It will mostly affect `Lexer.prototype.token()`, changing the main loop (`while(src){...`), and separating token creation, like:



instead of current implementation.
",andrewtch,chjj
330,2014-02-11 20:47:43,"@jasonkarns,

> There's no downside for marked.

To be sure. This is a philisophical decision over anything else. Which is why, if it does get added, it's going to be an option.

> HTML5 specifies two serializations: the lax, non-well-formed HTML serialization that we all expect browsers to 'just deal with' (and they do); and the XHTML serialization.

I already mentioned in my post that the HTML5 spec allows for useless trailing slashes. The ""just deal with it"" approach is anything but. The SGML DTD for all versions of HTML prior to 5, specified self-closing elements non-ambiguously.  This is what SGML DTDs are for. It wasn't nonsensical like you're trying to portray. In HTML5, they stopped using a DTD altogether and stopped being SGML based. So rather than being SGML-based (HTML 1-4), or XML-based (XHTML 1-2), HTML5 became its own beast, with a complete specification describing every self-closing element in detail. This way, no browser would ever have to parse an SGML DTD (no browsers were doing this anyway!). The natural conclusion was _always_ to stop being SGML and become its own markup language.

> As an additional aside, rendering valid XHTML puts less pressure on whatever HTML parser is being used to consume the output. Sure, the HTML5 spec defines explicitly how certain elements should be parsed, but that then requires the HTML parser to 100% completely follow the HTML5 spec. If marked renders valid XHTML, then it completely avoids any potential bugs the HTML parser may have.  With the hundreds or thousands of different HTML parsers out there, this change simply 1) reduces the chances for bad parsing 2) increases the number of parsers that can consume the output (to include all XML parsers). All at the expense of just a handful of bytes.

Sorry, do you have any sources to back this up? Modern HTML parsers parse according to the HTML5 spec. The trailing slashes aren't helpful at all. As soon as they tokenize the ""<img"" tag, it already knows the element will be self-closing. The trailing slash if flat-out redundant. This was the whole point of HTML5, to pragmatically address this stuff. If anything, the trailing slash will only slow down the parser by a microsecond or two. In fact, this isn't even specific to HTML5 parsers, _all_ HTML parsers that did not properly parse SGML DTDs (which was pretty much all of them) operated this way. A list of self-closing tags was hardcoded in the parser. There never was and never will be a need for the trailing slash in HTML.

@Acubed,

> HTML is XML is EXI is the DOM.

HTML is not XML. Where are you getting this from? XHTML was a poor attempt at making HTML XML-based instead of SGML-based. XHTML failed for a number of reasons, the most apparent was lack of support, but the downsides of XML also destroyed XHTML's chances of ever becoming dominant: the lack of incremental rendering was a huge one.

> They're all different encodings of the same DOM.

Well, marked doesn't produce DOM, it produces markup, so this is irrelevant.  You could make a completely new markup language tomorrow that produces a DOM, should marked support it?

> And because of this, some of us want to use XML tools to process our
> documents. Some of us (me) want to embed HTML in XML - for instance, Atom
> feeds.

Also curious, why would you bother embedding HTML directly in Atom? Why not just use a `<![CDATA[]]>` declaration? That's what it's there for. Especially when you know that the HTML might not be well-formed (say you have an atom feed for blog posts and comments).

Example:



That isn't even a work around. That's just best practice in general.

> It's also far simpler and more consistent: The HTML syntax: 141 printed pages The XHTML syntax: 7 printed pages Which do you suppose I prefer?

What you just pointed out is one of the main shortcomings of XML - it uses a dumb parser that throws on any syntax error instead of gracefully handling errors like it should. HTML5 is smart enough to take the time to specify graceful error handling and soforth.

Defending XHTML at this point is useless. You're defending something that does not support graceful error handling or incremental rendering. Why would you ever want that rendering in a browser?

> XHTML is absolutely not dead

Yes, it is.

> see http://www.w3.org/TR/html-polyglot/ for instance

I'm well aware of polyglot documents. As I stated before, I used to be an X-phile, who eventually switched to using polyglot, until I came to my senses when I saw no tangible benefit for either.

> XHTML lets you use things like RDFa and add new features arbitrarily (especially with full namespace support - something hard-coded into the HTML syntax, prohibiting forward compatibility).

A couple years ago, you would be arguing that XBL2 and SVG could be _only_ be used in XHTML, but that all changed. Many XML-based specifications have been ported to HTML. SVG can be embedded in HTML now for example.

Right now, I guess the best you can come up with is RDFa.

I'll tentatively implement this as an option, but I'm not sure it should be an option since it is trivial to implement yourself with the renderer.
",chjj,Acubed
323,2013-12-30 03:30:18,"/cc @ykomatsu
",Aimeast,ykomatsu
321,2013-12-29 00:19:47,"I know there was a previous issue to setup Travis CI to run tests on all PRs/commits, but when I look at the [marked page on Travis](https://travis-ci.org/chjj/marked) I don't see any builds being run.

@chjj can you go on travisci.org and make sure the repo is synced?
",ChrisWren,chjj
320,2013-12-28 17:25:30,"Hi,

in https://github.com/isaacs/npm-www/issues/517 @sindresorhus is mentioning support from GFM for relative image paths (https://github.com/blog/1395-relative-links-in-markup-files)

In npm-www we are taking the `readme.md`, which is often hosted on GitHub, too and are rendering markdown for the detail page of the package from it. Sometimes the readme makes use of the relative-img-path-feature from GitHub (see issue).

Turns out, that supporting converts (from relative paths to absolute ones) for images which are embedded html is not that easy: the custom html renderer is ignoring the img tag (https://github.com/chjj/marked/blob/master/lib/marked.js#L50) and they are included in the `paragraph`-callback with all other tags.

In order to support relative img paths from GFM on npm-www it would be nice to have a  easy way to convert the paths at the rendering stage or before.
",robertkowalski,sindresorhus
307,2013-12-09 21:04:30,"Yes, to be fair, the README.md @lucasmotta were looking at was probably of the master branch, whereas the Renderer feature is not implemented in 0.2.10.

I asked @chjj in #301 to create a new version tag. By now, as I am using this feature, I have just checked out the master branch, but I would rather manage it nicely via npm and package.json.
",tvooo,chjj
307,2013-12-19 13:51:37,"ping @chjj 
",lepture,chjj
302,2013-12-04 12:05:38,"We have the opportunity to remove:
- highlight
- langPrefix
- headerPrefix
- heading IDs

In favor of the new renderer.

The downside to this (at least for 3 of them): lack of backward compatibility, and less convenience for users used to marked. While I did merge the renderer, I'm **tentatively** reimplementing a few of these options. I think the removal of these features should be discussed in another issue because it is a big decision.

cc @lepture
",chjj,lepture
284,2015-06-30 22:40:40,"@chjj What would it take to get this merged?  I'd also like to see this fixed in Marked.
",Sarev0k,chjj
280,2013-12-12 12:16:46,"I have to admit have no idea when something has gone wrong.

Initially I hoped I could find the failing commit in CI build history, but https://travis-ci.org/chjj/marked is empty; apparently @chjj has never logged to Travis CI to flip the CI switch to “on” position.
",Mithgol,chjj
278,2013-11-05 21:09:38,"I like @ChrisWren's solution here: https://github.com/chjj/marked/pull/181#issuecomment-23844696.  However it's achieved I think a simple interface for custom functions would provide users with as much power and flexibility as they need. And really, I'd prefer almost any solution over having marked.js make decisions about how to attributes to my markup.
",jonschlinkert,ChrisWren
269,2013-11-04 09:04:34,"@chjj would you be open to someone helping out with this project? If so, I'd like to throw my hat in.
",jonschlinkert,chjj
269,2014-07-15 12:02:19,"any progress? @chjj 
",weekeight,chjj
259,2014-04-07 16:33:14,"+1 @chjj please please please
",xaka,chjj
258,2017-03-07 05:10:25,What about the fix @cbmixx made? Would someone be interested in integrating that fix in the current iteration of `marked`?,hollowdoor,cbmixx
238,2013-09-23 14:14:21,"@chjj Have you had the opportunity to review this? 

It would be great if this feature can be merged for use by the various `marked` dependants (like `npm` and many others).

Github currently support emojis in all their markdown but they show up as unparsed codes in projects that pull the README.md's and use marked to parse them
",Bartvds,chjj
238,2014-01-29 11:53:18,"I've updated the PR so it would merge again:

@chjj It would be cool if this could be considered for merging, so all downstream consumers can enjoy easy emoji replacement.

The implementation is very basic (generic) so we could use it with whatever image hosting service you want (using the callback you can also filter specific codes).
",Bartvds,chjj
232,2013-08-16 11:13:22,"Hi @chjj
## Changes
- add options wysiwyg line break
## add options wysiwyg line break

wysiwyg is option for simply new line break like wysiwyg editor and  github issue.

if wysiwyg is true : 


#### Github Support this syntax on issue follow:

Hi all.
This is insanehong

I'm currently at naver corp as a front-end engineer.
bye see you.
",insanehong,chjj
230,2013-08-14 21:11:50,"@soffes first (well first as far as i know) introduced these features into [redcarpet](https://github.com/vmg/redcarpet). he talks about them [here](http://sam.roon.io/tearing-up-the-carpet). I'm using marked in conjunction with [strapdown](https://github.com/arturadib/strapdown) to generate my blog, and i really wanted these features incorporated.

tests are included.

you can read my blog post about it [here](http://deallocatedbytes.com/#new-features-for-marked-).

let me know if there's anything you need/feel i should do/change. :)
",bengreenier,soffes
228,2013-08-12 07:24:09,"@chjj Can you publish the latest code to npm?
",fengmk2,chjj
222,2013-10-09 16:42:15,"@xionglun to use `highlight(lang, code)` the lang should be one of https://github.com/isagalaev/highlight.js/tree/master/src/languages by default. `hljs.LANGUAGES[lang]` can be used to check it.
",wangzuo,xionglun
220,2013-08-30 05:05:58,"/ping @chjj 
",Mithgol,chjj
220,2013-12-04 06:07:05,"@chjj are you cool with this? I would like to see the status of tests for each PR and know if any are currently failing.
",ChrisWren,chjj
218,2013-08-05 00:14:53,"@chjj This is Standard markdown syntax. other markdown editor support this syntax rendering.

plz hotfix! :-D
",insanehong,chjj
216,2013-08-07 15:20:34,"@chjj :+1: I support this change. It's a really basic but very important change. :)

For a possible markdown it might be wise to just escape these underscores:


",greduan,chjj
207,2013-07-26 15:37:50,"Yea, i like the approach too. Being able to extend/customize token modification would be really nice

Any word from @chjj (or someone in charge)?
",leeola,chjj
201,2013-08-02 18:43:53,"@chjj @ilsken Just for the sake of arguments, has anyone ever really used markdown.pl? I would stick with the documentation (which states ""# heading"") and common sense but that's just me. Having #hashtags and @mentions is pretty common with services.
",jorilallo,mentions
199,2013-07-27 10:06:43,"Indeed
This pull request is more a proof of concept rather than real code, I don't expect it to be integrated as it is. 

Now it only works for the callback version and when highlight is enabled. 

I'm very new to this code base and I needed a quick solution, but if the idea and the approach are good I can try to spend more time and implement it correctly, including unit tests. 

It would be nice to hear from @chjj as he's working as well on extensibility 
",piuccio,chjj
181,2013-08-06 17:40:22,"@leeolayvar GitHub-style hover anchors are not possible with this method, at least not automatically. Though they could be added with javascript after the fact.
",jasonkarns,leeolayvar
180,2014-07-07 05:08:15,"I'm interested in helping out to get this merged. @chjj if this was rebased would you consider merging it?
",jmeas,chjj
180,2014-07-23 00:47:46,"Quite suprised to see this attracting attention 1 year after I first wrote it.
I did rebase this quite long ago but master has advanced since then. Rebasing doesn't make any more sense if master keep going ahead without merging this in.
@chjj : would you mind giving a word on this?
",summivox,chjj
169,2014-09-22 09:14:00,"@gitgrimbo   @dantothelz 


",Dreampie,dantothelz
163,2013-08-02 17:20:56,"@chjj Is there any reason to keep this open now that #155 has been merged?
",scottgonzalez,chjj
158,2013-05-29 00:17:13,"This should be an easy fix. @chjj Do you want a PR for this?
",scottgonzalez,chjj
152,2013-05-29 00:30:33,"@chjj This seems like a pretty important fix :-)
",scottgonzalez,chjj
148,2013-04-13 18:49:58,"Hi @chjj, would you mind it if marked was hosted by CDNJS (https://github.com/cdnjs/cdnjs#cdnjs-script-repository)? I think this would make it more accessible for different development playgrounds like Plunker or jsFiddle. I'm also working on a project licensed under the APGLv3 license (https://github.com/galah-group/galah) and we'd like to avoid licensing and attribution issues from packaging your library with the project when, in reality, we just want to pull it from a reliable source similar to jQuery.

Let me know if you have problems with this approach, and if there aren't, I could make the pull request to CDNJS for you if you want.
",paranoiacblack,chjj
148,2013-05-29 00:38:49,"@paranoiacblack I don't think cdnJS cares who sends pull requests, so you can add marked just as easily as @chjj can.
",scottgonzalez,chjj
148,2013-05-29 00:40:35,"@scottgonzalez, I just wanted @chjj's or someone else permission before doing so. I don't know @chjj enough to say whether or not he would care about something like this. Can I take your comment as permission?
",paranoiacblack,chjj
143,2013-03-20 09:09:13,"If we want to use [google-code-prettify](http://google-code-prettify.googlecode.com/svn/trunk/README.html) easily, we need to custom code block pre classname.

Set `options.codeClass=""prettyprint""` and get `<pre class=""prettyprint"">` html result is pretty good.

@chjj
",fengmk2,chjj
140,2013-05-29 01:37:50,"Yeah, so you're just waiting for 0.2.9. I asked @chjj about that this morning and he said he'll do a release very soon.
",scottgonzalez,chjj
132,2013-03-06 06:03:24,"When ``gft:true`, @mentions should be parsed and replaced with anchor tags to profile. 
@example

I had some issues integrating with the lexer, can anyone provide direction? I assume I need to add a mention attribute to the inline lexer for GFM, but I am not sure how to properly use the replace function to perform the action expected.

Currently, I am using the following snippet to detect @mentions and provide links:
`""foo"".replace(/ @([a-zA-Z0-9]+) /g, "" <a href='http://github.com/$1'>@$1</a>"")`
",corydolphin,mentions
132,2013-03-06 06:03:24,"When ``gft:true`, @mentions should be parsed and replaced with anchor tags to profile. 
@example

I had some issues integrating with the lexer, can anyone provide direction? I assume I need to add a mention attribute to the inline lexer for GFM, but I am not sure how to properly use the replace function to perform the action expected.

Currently, I am using the following snippet to detect @mentions and provide links:
`""foo"".replace(/ @([a-zA-Z0-9]+) /g, "" <a href='http://github.com/$1'>@$1</a>"")`
",corydolphin,example
132,2013-03-30 16:27:22,"There's a 95% chance marked will never include anything github-specific. I like a lot of GFM features, but the ones that cater specifically to github won't be included. @wcdolphin, you should iterate over the tokens and run that regex on any `token.type === 'text'` token's `token.text`, and then pass the tokens to the parser.
",chjj,wcdolphin
131,2013-03-07 14:38:51,"I agree that would be a nice addition, currently just went with the default rendering of github. You can do a lot with some CSS and an empty anchor. But I guess some people would rather have id's on headings or perhaps an alternative inline element. I'll try to bug @chjj on IRC to review this stuff.
",Swaagie,chjj
129,2013-03-22 18:40:32,"@chjj Has any idea?
",lepture,chjj
129,2013-12-04 05:42:14,"Yeah, well. This is me breaking out of my shell. I believe the thing that made marked successful in the first place was the attention put on speed. marked does so many weird optimizations that I'm worried only I understand (not because I'm smart, but because I wrote them and I do stupidly-designed optimizations that no sane programmer would do).

This is the largest pull request I've ever accepted for marked. So while it's partially true that I've been busy with work and couldn't accept this PR, it's also partially true that I've trained myself to be hesitant about large PRs: I'm worried people may make changes without realizing they're overlooking some esoteric optimization. I wrote marked while running benchmarks after every single change to a line. If I lose a few milliseconds, it's a tragedy to me.  I've come to terms with the fact that a renderer is a good idea (much thanks to @lepture for his contribution). Hopefully we can do the same thing with the lexer(s) without too much overhead.

I've also just added @ChrisWren as a core committer for documentation. It's been an eventful night for marked.
",chjj,ChrisWren
127,2013-02-25 15:41:41,"@chjj: I'm not sure if you're interested in merging this feature, but I figured I would issue a pull request just in case.

Our use-case: Our app has large blocks of technical content in the form of ordered lists and there is occasionally block-level content in the list items (tables, multiple paragraphs, etc). The block-level content breaks up the list, so when a list is resumed, the actual numbering from the input should be used instead of starting over at ""1"".

I realize that the more semantically correct thing in this case would be to output a single list with the block-level content nested in it -- and this is possible with some markdown implementations (RedCarpet) but it places additional burden on the user to indent the block-level content beyond the indent of the list item it belongs in. Instead of going that route, this simple workaround gives the user more control and meets the user's expectations (I'm sure the end-users of our app would be surprised by markdown's default behavior -- as I was -- of ignoring the numbering from the input).

I added tests for the option, which pass when it the option is enabled (but a couple of pre-existing OL tests fail when the option is enabled because they aren't expecting the `value` attribute in the output `<li>`s). When the option is disabled (the default), the only pre-existing tests that fail are the 4 that normally fail (10-14). I added a `preserveNumbering` condition to tests\index.js so the new tests are skipped if the option is disabled. When disabled, the new option has a negligible effect on benchmark performance. When enabled, it adds, on average, about 50-70 milliseconds to the test time on my machine (~2%).
",prust,chjj
111,2013-01-17 15:03:32,"any interest in supporting gfm-tasks?

https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments


- [ ] a task list item
- [ ] list syntax required
- [ ] normal **formatting**, @mentions, #1234 refs
- [ ] incomplete
- [x] completed
",leeoniya,mentions
111,2013-01-17 15:06:28,"They're kinda meaningless without the back-end to support setting/unsetting them in a data store. Nice to look at, but that's about it.

Walter

On Jan 17, 2013, at 10:03 AM, Leon Sorokin wrote:

> any interest in supporting gfm-tasks?
> 
> https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments
> - [ ] a task list item
> - [ ] list syntax required
> - [ ] normal **formatting**, @mentions, #1234 refs
> - [ ] incomplete
> - [x] completed
>   
>   •  a task list item
>   •  list syntax required
>   •  normal formatting, @mentions, #1234 refs
>   •  incomplete
>   •  completed
>   —
>   Reply to this email directly or view it on GitHub.
",walterdavis,mentions
110,2013-05-29 01:12:20,"@chjj Unless there's a different answer than ""you need to write some code"", this should just be closed.
",scottgonzalez,chjj
107,2013-01-10 00:31:09,"Just testing so I can see the HTML.
- [ ] a task list item
- [ ] list syntax required
- [ ] normal **formatting**, @mentions, #1234 refs
- [ ] incomplete
- [x] completed
",chjj,mentions
107,2013-01-21 11:26:59,"I think this actually is useful, even in contexts where an HTML checkbox doesn't make sense.  

+1 for generating unicode characters as in [here](http://en.wikipedia.org/wiki/Checkbox#Unicode) and [here](http://www.howtogeek.com/howto/28947/use-a-unicode-text-trick-to-make-lists-with-checkboxes/).  

In non-HTML environments, editors could choose to draw them as a bulleted list with strikethroughs for completed items.

I've been hoping for someone to cross Taskpaper's text-based todo lists with Markdown for a little while, and this seems a little more user-friendly.  Taskpaper requires you to add an @done tag to the end of each line, which makes scanning plaintext to see what is done w/o syntax highlighting somewhat difficult.  The GFM syntax is arguably more readable.

Yes, Github uses this feature to power some crazy custom features for Github Issues, but it's also generally useful.
",jessmartin,done
84,2012-10-04 13:01:27,"Hey @chjj ....

We recently wrapped marked.js as a ruby gem for easy integration into rails apps.
This is a similar approach to what https://github.com/rails/jquery-rails does for jquery.
Our repo is at: https://github.com/eastmedia/marked-rails

We'd be happy to maintain it - but out of deference wanted to offer you the opportunity to take over the repo if you were interested.
",nodanaonlyzuul,chjj
74,2013-01-03 15:03:27,"Awesome. Thank you!

On Jan 3, 2013, at 7:29 AM, ""Christopher Jeffrey"" <notifications@github.com<mailto:notifications@github.com>> wrote:

So, I spent a little while fixing/optimizing/refactoring @kitsonkhttps://github.com/kitsonk's implementation a little bit. I'm going to consider this feature experimental for a little while. You can disable it with the tables option. @kitsonkhttps://github.com/kitsonk, thank you for the PR.

—
Reply to this email directly or view it on GitHubhttps://github.com/chjj/marked/pull/74#issuecomment-11842143.
",harrisj,kitsonkhttps
70,2012-08-29 01:22:15,"I'll have to look at this carefully. I don't know if I really like the idea of adding table support, but at the end of the day, tables _are_ a part of GFM, albeit undocumented. Does this implementation behave similar to the GFM implementation?

Also, the heading anchors should be `@id'`s on the heading elements instead of `a/@name`'s. It would be nice if those were a separate PR.
",chjj,id
70,2012-08-29 01:22:15,"I'll have to look at this carefully. I don't know if I really like the idea of adding table support, but at the end of the day, tables _are_ a part of GFM, albeit undocumented. Does this implementation behave similar to the GFM implementation?

Also, the heading anchors should be `@id'`s on the heading elements instead of `a/@name`'s. It would be nice if those were a separate PR.
",chjj,name
60,2013-05-29 01:27:59,"This is a pretty broad request. @chjj What are your thoughts on this? Do you want issues for specific features or will most of this be handled by the renderer?
",scottgonzalez,chjj
53,2012-06-13 16:19:27,"Oh oops, I see what you were saying @islandr now. Github supports strikethroughs but marked.js doesn't. 
",KyleAMathews,islandr
51,2012-10-19 16:49:19,"Thanks--I didn't know where to find GFM's code. That can be directly translated into JS and will produce the same behavior. Looks something like:



That's not integrating with the gfm setting at all, but it will duplicate the behavior of the original GFM.

(Edited to add global flag on big regexp; edited to add multi-line flag. This code actually works now: the issue @stof mentioned is fixed my the multiline flag.)
",midnightmonster,stof
51,2012-11-27 11:44:01,"@chjj is there any plan to fix this issue ? It is rather annoying for me as I'm using marked in an editor preview whereas the Markedown will later be rendered server-side by Sundown (which handles the GFM line-breaks)
",stof,chjj
51,2012-12-10 17:33:35,"@mbuttjer that code just implements the original markdown line breaks.
",midnightmonster,mbuttjer
48,2012-05-21 15:09:49,"@chjj any thoughts on this?
",jnordberg,chjj
48,2012-06-03 00:25:30,"Consider this another vote for this feature — any interest in accepting the commit, @chjj?

Dave
",dherman,chjj
46,2012-04-21 21:38:37,"Wow, I arrogantly thought no one would find a problem with the list implementation. You proved me wrong, @Gagle. :)

Anyway, I've found the problem. I'll push a fix tonight. 

I imagine it was only found just now because it's not _that_ likely to occur. The problem has to do with a lookahead in the list rule mistaking `**` for a list bullet, when it's not. While it doesn't create a new list item from that, it does think the list keeps going instead of ending it like it should. If you want a temporary fix, you can use `__` instead of `**`.
",chjj,Gagle
44,2013-05-29 01:33:54,"GFM also runs in a specific context. While the `@user` syntax always runs, things like `#issue` and `SHA1234` syntax requires passing a repo as the context. You probably don't want to add anything to marked for this.

related: #107
",scottgonzalez,user
43,2012-04-13 21:21:12,"The problem is, `@rel=nofollow` might not be suitable for some links, and there's no way to tell really, unless marked only adds `rel=nofollow` for links that contain a full URL. Right now, I prefer that an option have a really good reason to justify its existence.
",chjj,rel
43,2013-04-07 02:43:24,"@lazerscience @theron17 the renderer feature would be a good choice. cc @chjj #129 
",lepture,theron17
37,2012-03-06 19:22:31,"The marked script was changed once options were added. You need to use the `--gfm` flag to enable gfm now. It was easier to do it this way than to have gfm enabled by default and creating a `--nogfm` argument.

Hmm, you're right. It does only output `pre`. Strange that it doesn't bother adding a `code` element, even if you name the language you're using. I guess the language's `@class` will have to go on the `pre` element instead of a `code` element.
",chjj,class
35,2013-02-22 19:32:11,"Also, @chjj I have a quick question.
Unrelated to the above commit some of the tests (10,11,14,19) in `master` are failing in node 0.8.8. 
Do you want these updated or am I missing something?
",potench,chjj
35,2014-09-02 21:09:00,"I agree with the direction that the original change and the extensions that @potench proposed.  This is a great way to solve a bunch of problems, as all the +1's suggest.  The idea of supporting <!-- --> for compat makes me happy too, given that these plug-ins, by their very nature, are going to be site-dependent.

Is there some prior art that the "":"" syntax for parameter-separation is mimicking?  I'd suggest two alternatives to that mechanism.  The first of which is to not do any parameter-breaking at all and make the add-on break down the parameter list if it needs to.

If you really feel that a more sophisticated means would be helpful, then I'd say the argument should be treated as a query string.  I prefer that because:
1. It's a well-known syntax
2. It's flexible
3. It has a known escaping language (e.g. what if you needed to have an argument with a colon in it?)
4. It'd allow the plug-in to take a more flexible parameter list.  (I've been thinking about using this sort of thing to allow markdown to reference code samples; in that space so customers may want to reference samples with a line & file, sometimes by an ID, maybe by a file name and a region name, etc.)  With this sort of thing, you can enrich your plug-in without breaking compat with old versions pretty easily.

Another nit: I'm not sure I like the switch to ""{"" from ""["".  I mean, I believe ""["" alone is wrong, because that overloads the hyperlink semantics in a way that might be confusing or conflicting.  But introducing a whole new character seems like too heavy a hammer.  Instead, I'd propose looking at the image inclusion syntax (`""![...]""`) as a model, because it does something generally similar.  My proposal for a character would be '$' because it's got some variable-substitution connotations that seem appropriate here.  So, for example `""$[youtube:g2FOLrC2e6E]""`, would be what I'd go for.

Details aside, this is an important change, any hope of some progress here, @chjj ?  Anything I could do to help it along?
",SteveBenz,chjj
24,2012-01-31 23:54:44,"@chjj not interested?
",pvorb,chjj
8,2011-12-03 10:04:03,"Hmm, @dvv mentioned this the other day in a line comment. It looks like markdown.pl ensures a trailing \n for some reason, but I think you guys are right. It is ugly. I'll have marked slice off the trailing line feed.
",chjj,dvv
