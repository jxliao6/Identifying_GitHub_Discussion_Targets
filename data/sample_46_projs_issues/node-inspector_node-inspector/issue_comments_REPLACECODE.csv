issue_num,datetime,body,login,close_date
992,2017-03-27 04:02:35,"trojan$ sudo npm install node-inspector -g
Password:
npm WARN lifecycle v8-debug@0.7.7preinstall: cannot run in wd %s %s (wd=%s) v8-debug@0.7.7 node -e 'process.exit(0)' /Users/trojan/.nvm/versions/node/v7.7.4/lib/node_modules/.staging/v8-debug-89dbfbca
npm WARN lifecycle v8-profiler@5.6.5preinstall: cannot run in wd %s %s (wd=%s) v8-profiler@5.6.5 node -e 'process.exit(0)' /Users/trojan/.nvm/versions/node/v7.7.4/lib/node_modules/.staging/v8-profiler-64c78e35
/Users/trojan/.nvm/versions/node/v7.7.4/bin/node-inspector -> /Users/trojan/.nvm/versions/node/v7.7.4/lib/node_modules/node-inspector/bin/inspector.js
/Users/trojan/.nvm/versions/node/v7.7.4/bin/node-debug -> /Users/trojan/.nvm/versions/node/v7.7.4/lib/node_modules/node-inspector/bin/node-debug.js

v8-debug@0.7.7 install /Users/trojan/.nvm/versions/node/v7.7.4/lib/node_modules/node-inspector/node_modules/v8-debug
node-pre-gyp install --fallback-to-build
node-pre-gyp ERR! Tried to download(404): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-darwin-x64.tar.gz
node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@7.7.4 (node-v51 ABI) (falling back to source compile with node-gyp)
xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance

xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance

CXX(target) Release/obj.target/debug/src/debug.o
../src/debug.cc:38:27: error: too few arguments to function call, expected at least 2, have 1
v8::Debug::Call(fn);
~~~~~~~~~~~~~~~ ^
/Users/trojan/.node-gyp/7.7.4/include/node/v8-debug.h:198:3: note: 'Call' declared here
static MaybeLocal Call(Local context,
^
../src/debug.cc:46:61: error: too few arguments to function call, single argument 'isolate' was not specified
Isolate* debug_isolate = v8::Debug::GetDebugContext()->GetIsolate();
~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/trojan/.node-gyp/7.7.4/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
static Local GetDebugContext(Isolate* isolate);
^
../src/debug.cc:61:67: error: too few arguments to function call, single argument 'isolate' was not specified
Local debug_context = v8::Debug::GetDebugContext();
~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/trojan/.node-gyp/7.7.4/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
static Local GetDebugContext(Isolate* isolate);
^
../src/debug.cc:66:54: error: too few arguments to function call, single argument 'isolate' was not specified
debug_context = v8::Debug::GetDebugContext();
~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/trojan/.node-gyp/7.7.4/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
static Local GetDebugContext(Isolate* isolate);
^
4 errors generated.
make: *** [Release/obj.target/debug/src/debug.o] Error 1
gyp ERR! build error
gyp ERR! stack Error: make failed with exit code: 2
gyp ERR! stack at ChildProcess.onExit (/Users/trojan/.nvm/versions/node/v7.7.4/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack at emitTwo (events.js:106:13)
gyp ERR! stack at ChildProcess.emit (events.js:194:7)
gyp ERR! stack at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)
gyp ERR! System Darwin 16.4.0",trojanliu,
992,2017-03-28 02:27:32,I'm also getting this error for node v7.6.0 and npm v4.1.2,dwicao,
991,2017-03-23 12:25:06,,hustxiaoc,
990,2017-03-21 08:24:36,make it work on node6.x,hustxiaoc,2017-03-22 09:47:51
989,2017-03-21 03:22:03,"I execute the command ""node --debug-brk src/middleware/permissionHandler.js &"", and the command ""node-inspector &"", then I access it using ""http://101.37.36.41:8080/?port=5858"". Then, I can find the ""permissionHandler.js"" file.
Next, I open another tab and access formio ""http://101.37.36.41:3005/"". But, when I debug the permissionHandler.js, the cursor always skip the code ""module.exports = function(router) {}"".
So, when the code ""module.exports = function(router) {}"" in permissionHandler.js file will be called
 and how to debug it? Could you pls give me some suggestions? Thanks!
![d7c875f4-0e3f-11e7-8c0a-2ce54e004bd1](https://cloud.githubusercontent.com/assets/25890017/24138035/8fc9e0e6-0e51-11e7-90c7-d44fe5335e0c.png)
",JenifferWuUCLA,
989,2017-03-21 12:07:23,"The code `module.exports = function(router) {}`  is an assignment expression and the `function`  is not called at the frame, so there is nothing to step into.",hustxiaoc,
988,2017-03-20 08:45:55,,bajtos,2017-03-20 08:46:12
987,2017-03-13 07:40:04,,chrisdamba,2017-03-13 07:40:17
986,2017-03-12 08:55:09,<S_CODE_TOKEN>,shaunstanislaus,
986,2017-03-12 17:47:27,same issue here.,system65,
986,2017-03-14 02:14:07,"node -v : v7.4.0
npm -v : 4.0.5

<S_CODE_TOKEN>",cyc115,
986,2017-03-14 15:32:51,samehere!,elchado,
986,2017-03-14 15:42:10,Make sure guys you are not running the app in another tab. close the terminal and also read the documentation of the app. first install node-inspector running in terminal : node-inspector,elchado,
986,2017-03-16 07:57:00,"@elchado 

> Make sure guys you are not running the app in another tab. close the terminal and also read the documentation of the app. first install node-inspector running in terminal : node-inspector

wat? This commment has nothing to do with the problem at hand. You must be confusing something.",buschtoens,
986,2017-03-16 15:42:43,same problem here 😞 ,ImaCrea,
986,2017-03-17 02:29:45,"node -v : v7.7.3
yarn --version : 0.21.3

<S_CODE_TOKEN>

This problem did not occur in Node v6.10.0.
",keita-nishimoto,
986,2017-03-17 07:37:24,"Before submitting a new error log, please verify that it actually differs from the others in terms of the compiler errors.

Basically what's happening: yarn / npm execute `node-pre-gyp install --fallback-to-build` after downloading the package itself. This command attempts to download pre-built binaries from S3:

<S_CODE_TOKEN>

These pre-built binaries do not exist yet for the current Node version:

<S_CODE_TOKEN>

That's why `node-gyp` attempts to build the binaries itself (`--fallback-to-build`) via `make`. But it ulitmately fails to do so:

<S_CODE_TOKEN>

This is because the source files of this package have not been updated yet. 4 functions of `v8-debug.h` are called with no or too few arguments.

I don't have enough expertise with the source code of V8, otherwise I'd submit a PR.",buschtoens,
986,2017-03-17 07:46:19,"@cyc115 Your error is a bit different. You're running `npm` as root and get file permission errors, weirdly enough. Try installing `babel-node-debug` as a non-root user or switch to a complete root shell with `sudo -s` and then `cd`.

You'll then get the same error as everybody else in this issue.

There's no suitable pre-built binary:
<S_CODE_TOKEN>

That's why `node-gyp` attempts to build them itself. But it fails accessing the desired temporary working directory, so it attempts to switch to a different one:
<S_CODE_TOKEN>

This one's missing `node-gyp` configuration files though:

<S_CODE_TOKEN>

---

By the way: running npm as a root user is a huge threat to your system's security.",buschtoens,
986,2017-03-17 20:54:32,Same here...,babinc,
986,2017-03-20 06:40:58,Same here,AndreTheHunter,
986,2017-03-20 06:48:32,"Same here
-- sorry",think2011,
986,2017-03-20 06:57:49,"**Please do not post ""same here"" comments.** You're spamming everybody's inboxes. Please upvote the original comment instead.

Before posting a comment, please ask yourself: do I have something valuable to add or has this been said before?

Thank you 😄",buschtoens,
985,2017-03-11 13:47:40,"I build Expressjs project using express-generator npm plugin.
so it start up bin/www first.
I installed node-inspector correctly and run ""node-debug bin/www""
It opens ""http://127.0.0.1:8080/?port=5858"" automatically and load all code files I created.
But there is one error like the title of issue.
**Error: No NativeModule in target scope**
What am I missing?",whitesnow9291,
985,2017-03-13 02:34:55,+1,823639792,
985,2017-03-15 01:40:12,try this https://github.com/node-inspector/node-inspector/pull/983,hustxiaoc,
985,2017-03-15 04:56:55,+1,GuoChen-WHU,
985,2017-03-27 08:13:20,"+1
",LukerSpringtree,
985,2017-03-27 09:44:04,+1,melaniaandrisan,
984,2017-03-11 08:55:08,"I follow the following steps:

1. node inspcetor
2. node --debug-brk myJs

When I open the url on the browser,an error occurred:  
Error: Cannot find module '/Users/ougwen1235/.nvm/versions/node/v5.6.0/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.7/node-v47-darwin-x64/debug.node'",ougwen1235,
983,2017-03-10 10:11:20,"since node  6.4.0, the project doesn't work anymore, this pr will fix this!",hustxiaoc,2017-03-21 08:28:44
983,2017-03-10 10:12:04,@3y3  @bajtos @dannycoates ,hustxiaoc,2017-03-21 08:28:44
983,2017-03-14 16:54:07,"Hello, I am afraid neither of us have bandwidth to maintain this project :(

My recommendation is to use 0.7.x version of Node Inspector - it doesn't inject any code to the debugged applications; or update to Node 6.3+ and use `node --inspect` together with Chrome DevTools (see e.g. https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V6.md#2016-07-06-version-630-current-fishrock123).",bajtos,2017-03-21 08:28:44
983,2017-03-15 01:25:20,"Thanks for your replying, but many developers are still relying on it for different situations. 
- `node --inspect` is still an experimental feature
- not east to upgrade the node version
- enable debugger in runtime

We have been using it to debug applications  for a long time and  it really helps a lot. Could you please  put me on the maintainer list and  I would be very glad to maintain this project with you guys :)",hustxiaoc,2017-03-21 08:28:44
983,2017-03-16 17:42:22,">  Could you please put me on the maintainer list and I would be very glad to maintain this project with you guys :)

Of course! Please check your inbox for an invitation sent by GitHub. ",bajtos,2017-03-21 08:28:44
983,2017-03-21 08:28:44,moved to https://github.com/node-inspector/node-inspector/pull/990,hustxiaoc,2017-03-21 08:28:44
982,2017-03-06 13:52:11,"if code don`t has 'debugger' statement, on starting will occur a error.
<S_CODE_TOKEN>",mx601595686,
981,2017-03-05 03:18:38,<S_CODE_TOKEN>,zwhitchcox,2017-03-06 16:05:24
981,2017-03-06 13:58:53,"this problem has been fixed, but haven't update. you can fix it by youself .# 2e5309f75099753740c4567e17fd79ee27885d71",mx601595686,2017-03-06 16:05:24
980,2017-03-05 03:02:00,"Isn't is kind of ironic the node debugger has more bugs than any other package on npm?

<S_CODE_TOKEN>",zwhitchcox,
979,2017-03-03 07:21:00,"$ node-debug bot.js
Node Inspector v0.12.8
Visit http://127.0.0.1:8080/?port=5858 to start debugging.
Debugging `bot.js`

Debugger listening on [::]:5858
No browser matching [chrome,chromium,opera] found in the system! If this is not true, submit a bug report on https://github.com/benderjs/browser-launcher2
Please open the URL manually in Chrome/Chromium/Opera or similar browser
C:\Users\user\AppData\Roaming\npm\node_modules\node-inspector\lib\InjectorClient.js:111
      cb(error, NM[0].ref);
                     ^

TypeError: Cannot read property 'ref' of undefined
    at InjectorClient.<anonymous> (C:\Users\user\AppData\Roaming\npm\node_modules\node-inspector\lib\InjectorClient.js:111:22)
    at C:\Users\user\AppData\Roaming\npm\node_modules\node-inspector\lib\DebuggerClient.js:121:7
    at Object.value (C:\Users\user\AppData\Roaming\npm\node_modules\node-inspector\lib\callback.js:23:20)
    at Debugger._processResponse (C:\Users\user\AppData\Roaming\npm\node_modules\node-inspector\lib\debugger.js:95:21)
    at Protocol.execute (_debugger.js:121:14)
    at emitOne (events.js:96:13)
    at Socket.emit (events.js:188:7)
    at readableAddChunk (_stream_readable.js:176:18)
    at Socket.Readable.push (_stream_readable.js:134:10)
    at TCP.onread (net.js:548:20)
events.js:160
      throw er; // Unhandled 'error' event
      ^

Error: read ECONNRESET
    at exports._errnoException (util.js:1022:11)
    at TCP.onread (net.js:569:26)",slopez15,
978,2017-03-01 19:44:45,"I'm seeing these problems when trying to install node-inspector.  Not sure if this is because of ongoing aws issues.  I'm using node V7.5.0 and npm 4.1.2 on Ubuntu 16.04

    npm install node-inspector

     node-pre-gyp ERR! Tried to download(404): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-linux-x64.tar.gz 
     node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@7.5.0 (node-v51 ABI) (falling back to source compile with node-gyp) 
     make: Entering directory '/home/john/Downloads/node_modules/v8-debug/build'
    CXX(target) Release/obj.target/debug/src/debug.o
    ../src/debug.cc: In static member function ‘static Nan::NAN_METHOD_RETURN_TYPE     nodex::Debug::Call(Nan::NAN_METHOD_ARGS_TYPE)’:
    ../src/debug.cc:38:27: error: no matching function for call to  ‘v8::Debug::Call(v8::Local<v8::Function>&)’
",jloveric,
977,2017-02-23 20:37:25,"Now that there's `node --inspect`,  do you still plan to maintain this tool?
I'm seeing a lot of confused people because everybody is talking about `node --inspect` but new people accidentally check out `node-inspector`, which is a completely different tool and has a few issues.

So what's the current state?
It would be nice to have a deprecation messagein the readme and maybe a link to a tutorial with `node --inspect`. e.g. https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27#.jtswxc8y7",marcbachmann,
977,2017-02-28 10:55:47,"@marcbachmann Since most of the smart TV providers are using this tool for their browsers and they won't update their node versions (so we won´t be able to use `node --inspect`), this is the only way that people who develop with TVs can debug properly (the alternative is weinre, which is a really old-fashioned tool in these times).

For these reasons, I think that this project is still relevant.
",frankcortes,
977,2017-03-01 05:39:29,"It might be helpful to do detection of the node version - and if --inspect is supported, print a deprecation warning to the console.",mckoss,
977,2017-03-12 12:27:55,"Have the same question. This is the best tool available to debug node apps. Would be good to get some feedback, from people who developed this addon. The main problem is that i was able to make it work properly only on node version >= 4 && < 5 ",tylik1,
976,2017-02-23 05:47:06,"not able to install node-inspector in mac. Getting the following error-

npm WARN lifecycle v8-debug@0.7.7~preinstall: cannot run in wd %s %s (wd=%s) v8-debug@0.7.7 node -e 'process.exit(0)' /usr/local/lib/node_modules/.staging/v8-debug-5be573b2
npm WARN lifecycle v8-profiler@5.6.5~preinstall: cannot run in wd %s %s (wd=%s) v8-profiler@5.6.5 node -e 'process.exit(0)' /usr/local/lib/node_modules/.staging/v8-profiler-4971d27a
/usr/local/bin/node-inspector -> /usr/local/lib/node_modules/node-inspector/bin/inspector.js
/usr/local/bin/node-debug -> /usr/local/lib/node_modules/node-inspector/bin/node-debug.js

> v8-debug@0.7.7 install /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
> node-pre-gyp install --fallback-to-build

node-pre-gyp ERR! Tried to download(404): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-darwin-x64.tar.gz 
node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@7.6.0 (node-v51 ABI) (falling back to source compile with node-gyp) 
  CXX(target) Release/obj.target/debug/src/debug.o
../src/debug.cc:38:27: error: too few arguments to function call, expected at least 2, have 1
        v8::Debug::Call(fn);
        ~~~~~~~~~~~~~~~   ^
/Users/jagveersingh/.node-gyp/7.6.0/include/node/v8-debug.h:198:3: note: 'Call' declared here
  static MaybeLocal<Value> Call(Local<Context> context,
  ^
../src/debug.cc:46:61: error: too few arguments to function call, single argument 'isolate' was not specified
        Isolate* debug_isolate = v8::Debug::GetDebugContext()->GetIsolate();
                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/jagveersingh/.node-gyp/7.6.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
../src/debug.cc:61:67: error: too few arguments to function call, single argument 'isolate' was not specified
        Local<Context> debug_context = v8::Debug::GetDebugContext();
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/jagveersingh/.node-gyp/7.6.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
../src/debug.cc:66:54: error: too few arguments to function call, single argument 'isolate' was not specified
          debug_context = v8::Debug::GetDebugContext();
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/jagveersingh/.node-gyp/7.6.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
4 errors generated.
make: *** [Release/obj.target/debug/src/debug.o] Error 1
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:106:13)
gyp ERR! stack     at ChildProcess.emit (events.js:192:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)
gyp ERR! System Darwin 16.4.0
gyp ERR! command ""/usr/local/bin/node"" ""/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""build"" ""--fallback-to-build"" ""--module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.7/node-v51-darwin-x64/debug.node"" ""--module_name=debug"" ""--module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.7/node-v51-darwin-x64""
gyp ERR! cwd /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
gyp ERR! node -v v7.6.0
gyp ERR! node-gyp -v v3.5.0
gyp ERR! not ok 
node-pre-gyp ERR! build error 
node-pre-gyp ERR! stack Error: Failed to execute '/usr/local/bin/node /usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.7/node-v51-darwin-x64/debug.node --module_name=debug --module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.7/node-v51-darwin-x64' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/node-inspector/node_modules/node-pre-gyp/lib/util/compile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:106:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:192:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:890:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)
node-pre-gyp ERR! System Darwin 16.4.0
node-pre-gyp ERR! command ""/usr/local/bin/node"" ""/usr/local/lib/node_modules/node-inspector/node_modules/.bin/node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
node-pre-gyp ERR! node -v v7.6.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.33
node-pre-gyp ERR! not ok 
Failed to execute '/usr/local/bin/node /usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.7/node-v51-darwin-x64/debug.node --module_name=debug --module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.7/node-v51-darwin-x64' (1)
/usr/local/lib
└── (empty)

npm ERR! Darwin 16.4.0
npm ERR! argv ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v7.6.0
npm ERR! npm  v4.2.0
npm ERR! code ELIFECYCLE
npm ERR! errno 1

npm ERR! v8-debug@0.7.7 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the v8-debug@0.7.7 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-debug
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/jagveersingh/.npm/_logs/2017-02-23T05_40_25_485Z-debug.log",jagsrajput21,
976,2017-02-23 17:00:18,"Same issue here. Try installing the latest stable release `0.7.5`

    npm install -g node-inspector@0.7.5",jessBowers-bam,
976,2017-02-23 20:30:27,"Is there a reason you don't use `node --inspect`?
https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27#.ppj8ktisc",marcbachmann,
976,2017-02-27 16:06:51,I am trying to install `npm install -g babel-node-debug` which depends on `node-inspector` and get the same issue on OS X 10.12.3 and node 7.6.0,anton-matosov,
975,2017-02-20 16:21:03,"I cant install -g node-inspector 

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\chokidar\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.1: wanted {""os"":""darwin"",""arch"":""any""} (current: {""os"":""win32"",""arch"":""x64""})
npm WARN practica4@1.0.0 No description
npm WARN practica4@1.0.0 No repository field.
npm ERR! Windows_NT 10.0.14393
npm ERR! argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""--save-dev"" ""node-inspector"" ""supervisor"" ""forever""
npm ERR! node v7.2.1
npm ERR! npm  v3.10.10
npm ERR! code ELIFECYCLE

npm ERR! v8-debug@0.7.7 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-debug@0.7.7 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-debug
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Users\diego\Desktop\nodeCurso\practica4\npm-debug.log",diego11404,2017-03-01 21:27:01
975,2017-03-05 01:57:06,"same problem for me here

https://gist.github.com/dbclkclk/1ea087f0c95504d5240ae65779453c88

👍 ",dbclkclk,2017-03-01 21:27:01
974,2017-02-11 17:44:27,"Development of this seems to be a constant struggle. Every time I've used it, I've given up after facing bugs. There are significant issues reported right now, e.g. [Unable install on mac OS](https://github.com/node-inspector/node-inspector/issues/966) and [Cannot Install node-inspector in Windows 10](https://github.com/node-inspector/node-inspector/issues/965).

As of node `v6.3.0`, Chrome Devtools can debug node. See [Debugging Node.js with Chrome DevTools](https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27#.g9zxav79h).

Perhaps it's time to point people to the Chrome Devtools debugger and retire this project?

I also use the Jetbrains Webstorm debugger. I'm not sure what others exist.",jcrben,
974,2017-03-16 11:50:16,"Chrome DevTools and WebStorm debugger might nice alternatives, but neither of those can show me the network requests that is made by the NodeJS server (i.e. the missing Neworks tab).  I had so much hope for [DevTools](https://github.com/Jam3/devtool) but it doesn't support it either.",liquidbrains,
974,2017-03-21 19:14:10,"I've found the `network` tab feature from node-inspector invaluable. I use it frequently when something stops working because an upstream service changed their response schema without notice.

I haven't found any IDE, including the v6 Chrome DevTools debugging, that includes the network details.",snowinferno,
973,2017-02-03 21:11:35,"Hi, I'm wondering if a new version of node-inspector will be published to NPM containing PR #914 ?  Thanks!",ryanone,
972,2017-02-03 15:04:37,"Does latest version is 0.12.8 (on Apr 6, 2016) or 0.7.5 (on Dec 21, 2016)?

my node v7.5.0, ""npm i node-inspector@latest -g"" return 0.12.8 and not works.

Thanks",rbiruel,
971,2017-01-26 15:22:48,"I get the error:

sudo node ./node_modules/.bin/sequelize db:migrate

Sequelize [Node: 5.10.0, CLI: 2.5.1, ORM: 3.30.0]

Loaded configuration file ""config/config.json"".
Using environment ""development"".
== 20170126130223-create-scan: migrating =======
**[TypeError: Cannot read property 'toString' of undefined]**
scan.js:
'use strict';
module.exports = function(sequelize, DataTypes) {
  var Scan = sequelize.define('Scan', {
    ScanDate: DataTypes.NOW,
  }, {
    classMethods: {
      associate: function(models) {
            Scan.belongsTo(models.Employee);
            Scan.belongsTo(models.Scan);
            Scan.belongsTo(models.Operation);
            Scan.belongsTo(models.Project);
            Scan.BelongsTo(models.ProjCategories);
        }
    }
  });
  return Scan;
};

migration script (###-create-scan.js):

'use strict';
module.exports = {
  up: function(queryInterface, Sequelize) {
    return queryInterface.createTable('Scans', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      ScanDate: {
        type: Sequelize.DATETIME
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },
  down: function(queryInterface, Sequelize) {
    return queryInterface.dropTable('Scans');
  }
};

",adam-gregory,2017-01-26 19:27:59
970,2017-01-24 19:19:11,"version 0.12.8, Mac OS X Yosemite

Return key in watch expressions just adds a newline in the variable name pane. If I click outside the pane, then the variable is accepted and I get a value.

In the console, same behavior except clicking outside the console window doesn't help; I am unable to evaluate anything in the console.",JeffML,2017-02-24 21:04:26
970,2017-02-01 18:38:02,@JeffML this is a duplicate of #903.,gabmontes,2017-02-24 21:04:26
969,2017-01-18 14:58:15,"![image](https://cloud.githubusercontent.com/assets/1060733/22068858/527f72d8-ddd1-11e6-8489-0891bf701ea0.png)

and another question,i uninstalled this package and rerun npm install -g node-inspector,version 0.12.8 will be installed instead of the last version",zzzgit,
969,2017-01-20 21:03:29,"I see this too, when using Node 6.4 and above.  However, this is fixed with https://github.com/node-inspector/node-inspector/commit/2e5309f75099753740c4567e17fd79ee27885d71

A new release just needs to get published to NPM.  In the meantime though, you can clone the repo locally, and run node-debug by calling `./bin/node-debug.js [path to your file]`.  That worked for me.  Hopefully that works for you.",ryanone,
969,2017-02-11 15:20:09,Seems like I might be encountering this issue as well.,atrauzzi,
968,2017-01-10 19:58:14,"node-inspector version: 0.12.8
node version: 6.9.1
OS: Windows 10 x64

See code at https://github.com/node-inspector/node-inspector/blob/master/lib/InjectorClient.js#L108-L111

<S_CODE_TOKEN>
if `NM.length` is zero, `NM[0]` is undefined and node-inspector crashes with `TypeError: Cannot read property 'ref' of undefined`.",gmahomarf,2017-03-10 15:17:25
968,2017-01-11 06:16:49,"I also get this error:
- node-inspector version: 0.12.8
- node version: 6.9.3
- OS: mac os x 10.12.2

See code at https://github.com/node-inspector/node-inspector/blob/master/lib/InjectorClient.js#L108-L111

<S_CODE_TOKEN>
temporary change :

<S_CODE_TOKEN>",SunilWang,2017-03-10 15:17:25
968,2017-01-11 11:44:47,"I also get this error:
- node-inspector version: 0.12.8
- node version: 6.9.3
- OS: Windows 10 x64",onagiba,2017-03-10 15:17:25
968,2017-01-16 02:39:50,"also get this error.
I think it's same as #949 .
here is a PR https://github.com/node-inspector/node-inspector/pull/914
but it is still open.",Corey600,2017-03-10 15:17:25
968,2017-01-17 02:24:59,+1,biluochun,2017-03-10 15:17:25
968,2017-01-17 14:10:34,+1,aschulz01,2017-03-10 15:17:25
968,2017-01-17 14:33:44,+1,jobe451,2017-03-10 15:17:25
968,2017-01-26 09:53:54,+1,stigrv,2017-03-10 15:17:25
968,2017-01-28 12:13:28,"+1

macOS
node lts",jukben,2017-03-10 15:17:25
968,2017-01-29 00:40:36,same problem here on windows 10,looptrader,2017-03-10 15:17:25
968,2017-02-27 08:33:23,+1,langjt,2017-03-10 15:17:25
968,2017-02-27 22:33:04,+1,gwalls,2017-03-10 15:17:25
968,2017-03-02 21:55:16,+1,QiaoyuanMaxDeng,2017-03-10 15:17:25
968,2017-03-04 03:41:07,+1,junchaotalk,2017-03-10 15:17:25
968,2017-03-05 02:58:09,+1,mujicadiazr,2017-03-10 15:17:25
968,2017-03-10 13:41:13,"Upgrade to Node Inspector 0.12.10 and this is fixed. For some reason I needed to do `rm -r node_modules/node-inspector && npm install`, otherwise it wouldn't pick the new version up.",jonnyt886,2017-03-10 15:17:25
968,2017-03-15 01:48:40," also get this error:
node-inspector version: 0.12.10
node version: 6.9.5
OS: Windows 10 x64",sillypencil,2017-03-10 15:17:25
967,2017-01-10 10:07:43,"when I execute a command,there is a npm-debug.log file.
Detail:
node-version:7.3.0
content:
Microsoft Windows [版本 10.0.10240]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\wyl>npm install -g node-inspector

&gt; v8-debug@0.7.7 preinstall C:\Users\wyl\AppData\Roaming\npm\node_modules\.staging\v8-debug-9c08ecab
&gt; node -e 'process.exit(0)'


&gt; v8-profiler@5.6.5 preinstall C:\Users\wyl\AppData\Roaming\npm\node_modules\.staging\v8-profiler-003ae091
&gt; node -e 'process.exit(0)'

C:\Users\wyl\AppData\Roaming\npm\node-inspector -> C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\bin\inspector.js
C:\Users\wyl\AppData\Roaming\npm\node-debug -> C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\bin\node-debug.js

&gt; v8-debug@0.7.7 install C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug
&gt; node-pre-gyp install --fallback-to-build

node-pre-gyp ERR! Tried to download(undefined): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-win32-x64.tar.gz
node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@7.3.0 (node-v51 ABI) (falling back to source compile with node-gyp)

C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js"" clean )  else (node """" clean )

C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js"" configure --fallback-to-build --module=C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64 )  else (node """" configure --fallback-to-build --module=C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64 )
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable ""python"", you can set the PYTHON env variable.
gyp ERR! stack     at failNoPython (C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:449:14)
gyp ERR! stack     at C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:404:11
gyp ERR! stack     at C:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:264:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:111:15)
gyp ERR! System Windows_NT 10.0.10240
gyp ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js"" ""configure"" ""--fallback-to-build"" ""--module=C:\\Users\\wyl\\AppData\\Roaming\\npm\\node_modules\\node-inspector\\node_modules\\v8-debug\\build\\debug\\v0.7.7\\node-v51-win32-x64\\debug.node"" ""--module_name=debug"" ""--module_path=C:\\Users\\wyl\\AppData\\Roaming\\npm\\node_modules\\node-inspector\\node_modules\\v8-debug\\build\\debug\\v0.7.7\\node-v51-win32-x64""
gyp ERR! cwd C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug
gyp ERR! node -v v7.3.0
gyp ERR! node-gyp -v v3.4.0
gyp ERR! not ok
node-pre-gyp ERR! build error
node-pre-gyp ERR! stack Error: Failed to execute 'node-gyp.cmd configure --fallback-to-build --module=C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\node-pre-gyp\lib\util\compile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:106:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:191:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:885:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)
node-pre-gyp ERR! System Windows_NT 10.0.10240
node-pre-gyp ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Users\\wyl\\AppData\\Roaming\\npm\\node_modules\\node-inspector\\node_modules\\node-pre-gyp\\bin\\node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug
node-pre-gyp ERR! node -v v7.3.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.32
node-pre-gyp ERR! not ok
Failed to execute 'node-gyp.cmd configure --fallback-to-build --module=C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\wyl\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64' (1)
C:\Users\wyl\AppData\Roaming\npm
`-- (empty)

npm ERR! Windows_NT 10.0.10240
npm ERR! argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v7.3.0
npm ERR! npm  v3.10.10
npm ERR! code ELIFECYCLE

npm ERR! v8-debug@0.7.7 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-debug@0.7.7 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-debug
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Users\wyl\npm-debug.log
npm ERR! code 1

",huangxok,
967,2017-01-10 12:26:58,"Same here
npm install node-inspector
gives the same output as op",axed,
967,2017-01-12 09:15:20,"Looks like the some builds are missing on s3.
`npm install -g node-inspector@0.7.4` worked for me on OSX, you could try getting one of these for the time being: 
https://node-inspector.s3.amazonaws.com/",Schaeff,
967,2017-01-23 10:14:22,I have the same problem,bhouser,
967,2017-03-05 01:54:17,"same problem here https://gist.github.com/dbclkclk/1ea087f0c95504d5240ae65779453c88

👍 ",dbclkclk,
966,2017-01-08 06:39:44,"node-pre-gyp ERR! Tried to download(404): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-darwin-x64.tar.gz 
node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@7.3.0 (node-v51 ABI) (falling back to source compile with node-gyp) 
gyp WARN download NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, please use NODEJS_ORG_MIRROR
gyp WARN download NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, please use NODEJS_ORG_MIRROR
gyp WARN download NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, please use NODEJS_ORG_MIRROR
  CXX(target) Release/obj.target/debug/src/debug.o
../src/debug.cc:38:27: error: too few arguments to function call, expected at least 2, have 1
        v8::Debug::Call(fn);
        ~~~~~~~~~~~~~~~   ^
/Users/mambig/.node-gyp/7.3.0/include/node/v8-debug.h:198:3: note: 'Call' declared here
  static MaybeLocal<Value> Call(Local<Context> context,
  ^
../src/debug.cc:46:61: error: too few arguments to function call, single argument 'isolate' was
      not specified
        Isolate* debug_isolate = v8::Debug::GetDebugContext()->GetIsolate();
                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/mambig/.node-gyp/7.3.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
../src/debug.cc:61:67: error: too few arguments to function call, single argument 'isolate' was
      not specified
        Local<Context> debug_context = v8::Debug::GetDebugContext();
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/mambig/.node-gyp/7.3.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
../src/debug.cc:66:54: error: too few arguments to function call, single argument 'isolate' was
      not specified
          debug_context = v8::Debug::GetDebugContext();
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/mambig/.node-gyp/7.3.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext' declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
4 errors generated.
",maheshambiga,
966,2017-01-09 17:19:33,"Same error here: macOS Sierra 10.12.2 (16C67) with Node version v7.4.0, NPM v4.0.5 & 4.1.1",kibbled,
966,2017-01-13 17:42:01,anyone found a way around this issue yet ?,mlarcher,
966,2017-01-13 17:43:06,I later realized that this project is no longer maintained by the guys who started it. Sounds like people are using other solutions now.,kibbled,
966,2017-01-23 10:15:34,I have the same problem on OSX 10.11.6,bhouser,
966,2017-01-23 15:43:34,"Try downgrade node version to 6x
<S_CODE_TOKEN>
that's work for me",rmakarov94,
966,2017-01-23 17:35:00,"My workaround is to use Visual Studio Code, built in debugger works flawlessly. 
Tutorial - https://hansrwindhoff.wordpress.com/2015/05/05/debugging-task-runner-tasks-like-gulp-with-visual-studio-code-editordebugger/ 
Just `""program""` path should be from `$(which grunt)`",lfx,
965,2017-01-05 09:37:12,"Fails to install node-inspector even with admin permission 

<S_CODE_TOKEN>",gitsuraj,
964,2017-01-04 09:11:42,"Thanks for work, I wanna to know how to REPL in debug console?",TangMonk,
963,2017-01-03 18:49:14,"Steps to reproduce:

1. Run `node-debug`.
(don't execute the script ie. by stepping through all the way or pressing the play/pause button in the debugger)
2. Quit using `ctrl` + `c`.
3. Run `node-debug`.
4. Observe error.

Am I doing something wrong?

Edit: It seems the issue might be that I'm quitting from the command line before I let the whole script execute. Is that it?

Console output:

<S_CODE_TOKEN>

I'm on OSX El Capitan, if that's relevant.",adamzerner,
963,2017-02-06 16:40:47,"Hello @adamzerner 

I`m getting the same problem here.

Run on the terminal: 
**$ sudo lsof -i:5858**

You`ll find the process that is using the port.

And the, kill the process by running:
**$ sudo kill 0000**

Where the 0000 is the number of the process that is using the :5858 port.

Just warning: For me , also running Mac , it solved half of the problem, because I `m still unable to run node-debug without getting an error.",thePedroPaulino,
963,2017-02-14 22:37:07,"Just tried that, solved my problem, thanks!",Aryk,
962,2016-12-27 22:35:27,"Hello,

I'm trying to move my Node v7.x application away from node-inspector but it won't go away.  I've taken the following steps.

<S_CODE_TOKEN>

I've killed every instance of node-inspector I'm aware exists, yet my project still tries to install it when I `npm i`, and I'm getting the common error that everyone seems to be having:

<S_CODE_TOKEN>

Anyone know how to stop node-inspector from installing itself?  What am I missing?
",mpint,
962,2017-01-26 18:01:37,"Is it listed in the project's `package.json`? It could also be a dependency of some other module.

Try `npm ls` and see where it's coming from.",mariusc23,
961,2016-12-19 04:26:31,<S_CODE_TOKEN>,diegoug,
961,2016-12-19 17:06:04,"I had this issue on 7.x.
Literally just did this in 6.9.2 fine.

If you're using nvm: `nvm use 6.9.2`",replete,
961,2016-12-19 17:06:12,"Also, dupe of #914 ",replete,
961,2017-01-04 17:34:35,"Also not work in 6.9.1/6.9.3, same error.
just work in node 4.x.",h1orz,
961,2017-01-25 03:52:18,the same issue on node v7.3.0,sunOpar,
961,2017-01-25 20:00:04,=(,johnbahamon,
961,2017-02-09 16:49:22,"Same thing, works on 4.7.1 and doesn't work on 6+ and 7+
Would be great to see that fixed, as this is the Greatest extension ever, to debug node.js

I use ""n""  extension to switch between node.js versions as a temporary solution.",tylik1,
960,2016-12-18 05:38:49,"Potential duplicate of #868 

<S_CODE_TOKEN>

New MacBook delivered yesterday.

First error I'm getting:

<S_CODE_TOKEN>

So I tried following the instructions here: https://github.com/nodejs/node-gyp/issues/569#issuecomment-255589932

<S_CODE_TOKEN>


# Output from the console:

<S_CODE_TOKEN>",stefek99,
960,2016-12-18 06:32:00,"The same thing happened to me too.
(failed with both of the following versions)
<S_CODE_TOKEN>",m-ahmadi,
960,2016-12-20 10:41:04,Same error,colymore,
960,2016-12-20 13:49:44,"same error here :

node v7.2.1
npm v4.0.5
node-gyp v3.4.0
node-pre-gyp v0.6.32
",jledun,
960,2016-12-21 20:33:06,"Same Issue:
node 4
npm 2.15.6",Syzygy24,
960,2016-12-22 08:00:39,"same issue：
node 7.3.0
npm 3.10.10",ArthurZ123,
960,2016-12-26 05:11:38,"Potentially the same issue here:
Ubuntu 16.04
node v7.3.0
npm v3.10.10

### `sudo npm install -g node-inspector`:

<S_CODE_TOKEN>

### And here's the `npm-debug.log`:

[the-npm-debug.txt](https://github.com/node-inspector/node-inspector/files/672545/the-npm-debug.txt)
",josephrocca,
960,2016-12-30 20:02:31,"same issue Here：
node 7.3.0
npm 3.10.10",laedanthehuman,
960,2017-01-02 08:52:17,"Same issue:
MacOS 10.12.2
Node 7.2.0
NPM 4.0.3",NejcZdovc,
960,2017-01-03 13:39:59,"Same issue here:
Node 7.2.1
NPM 4.1.1
",robertaramar,
960,2017-01-05 08:32:49,"same here:

    → npm --version
    4.0.5
    
    → node --version
    v7.3.0

I tried to execute with and without super user access on a OS X 10.11.6

I also noticed that the first two errors are:

	node-pre-gyp ERR! Tried to download(404): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-darwin-x64.tar.gz
	node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@7.3.0 (node-v51 ABI) (falling back to source compile with node-gyp)

So it tries to download binaries and, not founding the binaries tries to compile those and fails.

Does anyone have any workaround or temporal fix for that?

Thanks!",MiquelAdell,
960,2017-01-06 16:34:32,"I solved this by 
<S_CODE_TOKEN>
just install it manually!",LeeXun,
960,2017-01-07 07:24:01,"Identical issue to OP.
OS X 10.12.2 (16C67)
node 7.3.0
npm 4.0.5

node 7.4.0
npm 4.1.1

OS X 10.12.3 (16D32)
node 7.5.0
npm 4.1.2",clayzermk1,
960,2017-01-07 20:44:04,"Same issue.
 node --version
v7.4.0
 npm --version
4.0.5",ghamarian,
960,2017-01-09 20:00:39,"Same issue
node --version
v7.4.0
npm --version
4.0.5",SherryH,
960,2017-01-12 09:38:38,"same one
node --version
v7.3.0
npm --verion
v4.0.5",MehdiRaash,
960,2017-01-17 03:12:54,"Same one
node --version
v7.3.0
npm --verion
v3.10.10",ivxpingg,
960,2017-01-27 20:23:39,"Same issue here!
npm -- version
4.2.0
node --version
v7.4.0

Edit: I just tried installing on Node version 6.0.0 with npm 4.2.0 and it worked. The issue appears to be with node 7.x.x",AlexPoirier1,
960,2017-02-12 07:52:16,"Same env as @AlexPoirier1 

npm -- version
4.2.0
node --version
v7.4.0

Reverted back to node v6.9.5 and the install worked.",jnwu,
960,2017-02-14 03:55:46,Moving from v7.4.0 back to v6.9.5 resolved the issue for me as well.,Ray285,
960,2017-02-17 08:23:49,Any solution?,michelgokan,
960,2017-02-17 09:25:33,"npm --version
v4.2.0
node --version
v6.9.5

stil the same issue. This time when installing bcrypt. It seems github release download URL changed from : 
https://github.com/kelektiv/node.bcrypt.js/releases/download/v1.0.2/bcrypt_lib-v1.0.2-node-v48-darwin-x64.tar.gz 
to
https://github.com/kelektiv/node.bcrypt.js/archive/v1.0.2.tar.gz",michelgokan,
960,2017-02-26 17:09:58,"This bug is blocking me too:

<S_CODE_TOKEN>
If this is as simple as the download URLs being wrong, could it be fixed quickly, please?",apblack,
960,2017-02-26 19:11:14,Looks like this project is not maintained anymore.,m-ahmadi,
960,2017-03-11 22:22:15,"hi all,

i had the same problems installing node-pre-gyp
i managed to install it manually, but with the same error messages after ""npm install"" in node-red directory

so after checking the error logs i found 

**gyp WARN EACCES user ""root"" does not have permission to access the dev dir ""/root/.node-gyp/4.2.1""**

after **sudo su** i tried again, with the same github (404) download error, but this time the script started the make sequence without any errors

so my problem was just user permissions 
after ""npm run build"" in the node-red dir i can now start node red.js without any problems

hope that helps

",hosenmatz,
960,2017-03-15 18:44:53,"I fixed this issue by doing the following 

<S_CODE_TOKEN>",bbbenji,
959,2016-12-11 05:33:34,"SOLVED here https://github.com/node-inspector/node-inspector/issues/951#issuecomment-262441472

----------------------------------------------

Here is how to reproduce. The simplest example possible.

1. Filename is `index.js` and its contents:
<S_CODE_TOKEN>

2. Run `node-debug` against the file.
<S_CODE_TOKEN>

3. It opens UI in Chrome and the execution is stopped on `debugger` line.
Set a watch variable `process` in a `Watch Expression` section. As you can see, it is possible to examine it easily here. But only here, in `Watch Expression` section.

![process_index js - google chrome 2016-12-11 13 17 07](https://cloud.githubusercontent.com/assets/3880497/21078290/85517116-bfa4-11e6-83b9-050cc0f6ac02.png)

4. Now try to examine `process` variable in console. It doesn't work. You can type a variable, but hitting `[Enter]` key doesn't reveal `process` variable. It just adds new lines:

![process_index js - google chrome 2016-12-11 13 25 46](https://cloud.githubusercontent.com/assets/3880497/21078317/9a10768c-bfa5-11e6-9397-6cee36ec1844.png)

What behavior is this? How to make it work?
",wzup,2016-12-11 07:04:40
958,2016-12-10 10:54:17,"Doesn't work in my Windows 10 Pro 64. Do you have any standard default way of integration?

`node-inspector` is running ok, but doesn't display anything in Devtool. A screenshot:

![127 0 0 1_8088__port 5859 - google chrome 2016-12-10 18 32 30](https://cloud.githubusercontent.com/assets/3880497/21072730/5d73cb6e-bf07-11e6-98dc-cb9749760152.png)

My steps how I start them both:
1. At first I start `node-inspector` in a separate terminal window:
<S_CODE_TOKEN>
2. Then I start `nodemon` with `--debug` option in a separate terminal window:
<S_CODE_TOKEN>

3. Then I open UI for `node-inspector` in Chrome `http://127.0.0.1:8088/?port=5859`. 
And there is nothing in Chrome console. Devtools are empty, see a screenshot above.

My config for `nodemon`:
<S_CODE_TOKEN>

Config for `node-inspector`:
<S_CODE_TOKEN>
",wzup,2016-12-11 05:34:14
958,2016-12-11 05:34:14,Solved it,wzup,2016-12-11 05:34:14
957,2016-12-10 10:02:50,Does `node-inspector` support live reload? Like `nodemon`. No any info about it in your docs.,wzup,
956,2016-12-09 02:44:07,"### :Detailed Notes:
node-inspector had a restriction to be run on the same
host machine with the debuggable nodejs process.
This patch to release this limitation to be able to debug even though
the nodejs process is running on the different machine.

### :Example:
`./bin/inspector.js --debug-host='192.168.0.12' --debug-port=5858`
or put the host address and port in the config.json and run inspector.js
or can change the value of the host argument in the url.
  ex) http://127.0.0.1:8080/debug?host=192.168.0.12&port=5858

### :Etc:
- This PR aim to merge into node-inspector v0.7.x branch
- As `KeyboardEvent.keyIdentifier` is removed from the recent browsers including chrome 54 rev,
  front-end was updated to use KeyboardEvent.key instead.",sparkleholic,2016-12-21 15:37:08
956,2016-12-12 02:33:21,"@bajtos  Ready for review. If you have any concerns, please let me know.  :)
",sparkleholic,2016-12-21 15:37:08
956,2016-12-21 15:41:07,Landed and released as `node-inspector@0.7.5`. Enjoy :),bajtos,2016-12-21 15:37:08
956,2016-12-27 01:27:06,@bajtos Thanks and wish you happiness in the year to come. :),sparkleholic,2016-12-21 15:37:08
955,2016-12-07 17:05:29,"As `KeyboardEvent.keyIdentifier` is removed from the recent browsers 
including chrome 54 rev, front-end should use `KeyboardEvent.key` instead.

(note.)
[https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyIdentifier](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyIdentifier)",sparkleholic,
955,2017-02-01 18:39:58,This PR should fix #903. Any news on test/merge/release? Thanks!!,gabmontes,
955,2017-03-10 18:51:51,"Is it possible to merge this, it looks like the tests failed because of a timeout. There is a dependency on this package which has been causing issues for months over here https://github.com/meteor/meteor/issues/8469",codeHatcher,
955,2017-03-16 00:37:31,"I'm also excited for this to be merged, this fix saved me a LOT of time.",damonomad,
954,2016-12-05 17:01:13,"Hi,
 I'm seeing at intermittent issue with the network traffic not being captured on the node inspector.

setting the debug environment variable prior to launching the node inspector..  ie ( export  DEBUG=""node-inspector*""   )
  
On firing up my app I can see it connecting to node inspector , I can see the source code  on connecting to the nodeinspector via browser  (http://127.0.0.1:8080/debug?port=5858)...



clicking on and off the  recording button I can see it in the debug  below  (enabling)..


  node-inspector:protocol:devtools backend: {""id"":28} +0ms
  node-inspector:protocol:devtools frontend: {""id"":29,""method"":""Network._setCapturingEnabled"",""params"":{""enabled"":true}} +10s
  node-inspector:protocol:devtools backend: {""id"":29} +0ms


However no traffic gets recorded, and yes there should and is network traffic there..

So has anyone seen this behaviour before ? or advise  etc..

on mac OS sierra  with Version of node  4.4.1 and version of node inspector at v0.12.8

Thanks in advance.
",D0LLAR,
953,2016-11-28 07:14:26,"My environments are as follow:
node-inspector version: 0.12.8
node.js version: 6.9.1
os: windows 10 pro, 64-bit

when start debugging a nodejs app which is generated by thinkjs cli [https://github.com/75team/thinkjs](url) , my console keeps showing the following error
![node-inspector-crush](https://cloud.githubusercontent.com/assets/2157653/20659177/e088c82c-b57c-11e6-9af5-3aab8595aec0.png)

but when i change nodejs version from v6.9.1 to v5.4.1, the error is gone. Maybe node-inspector is conflicted with the latest version of nodejs somehow?

",carlisliu,
953,2016-12-15 08:02:04,"First I was using `node@7.2.1`, has errors with `node-gyp`, uninstalled and installed `node@6.9.2`, `node-gyp` errors gone, installed `node-inspector` and getting the above errors. Now installing `node@5.4.1` and above error gone but getting others errors as I'm using ES6 syntax in my `express` app.

UGH 😤, I mean, really bruh",borislemke,
953,2016-12-26 07:15:26,"me too.

and waiting answer~~~~",kazaff,
953,2017-01-04 08:52:28,"This is a duplicate of #905
https://github.com/node-inspector/node-inspector/issues/905
",tharders,
952,2016-11-23 04:35:28,"root@appserver:~# npm install -g node-inspector
npm WARN lifecycle v8-debug@0.7.7~preinstall: cannot run in wd %s %s (wd=%s) v8-debug@0.7.7 node -e 'process.exit(0)' /root/.nvm/versions/node/v7.1.0/lib/node_modules/.staging/v8-debug-2eb2bec8
npm WARN lifecycle v8-profiler@5.6.5~preinstall: cannot run in wd %s %s (wd=%s) v8-profiler@5.6.5 node -e 'process.exit(0)' /root/.nvm/versions/node/v7.1.0/lib/node_modules/.staging/v8-profiler-ca0424c0
/root/.nvm/versions/node/v7.1.0/bin/node-inspector -> /root/.nvm/versions/node/v7.1.0/lib/node_modules/node-inspector/bin/inspector.js
/root/.nvm/versions/node/v7.1.0/bin/node-debug -> /root/.nvm/versions/node/v7.1.0/lib/node_modules/node-inspector/bin/node-debug.js

> v8-debug@0.7.7 install /root/.nvm/versions/node/v7.1.0/lib/node_modules/node-inspector/node_modules/v8-debug
> node-pre-gyp install --fallback-to-build

sh: 1: node-pre-gyp: Permission denied
/root/.nvm/versions/node/v7.1.0/lib
└── (empty)

npm ERR! Linux 3.2.0-4-amd64
npm ERR! argv ""/root/.nvm/versions/node/v7.1.0/bin/node"" ""/root/.nvm/versions/node/v7.1.0/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v7.1.0
npm ERR! npm  v3.10.9
npm ERR! file sh
npm ERR! code ELIFECYCLE
npm ERR! errno ENOENT
npm ERR! syscall spawn

npm ERR! v8-debug@0.7.7 install: `node-pre-gyp install --fallback-to-build`
npm ERR! spawn ENOENT
npm ERR!
npm ERR! Failed at the v8-debug@0.7.7 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-debug
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /root/meanjs/npm-debug.log
npm ERR! code 1

Any idea please ?",malick-it,
952,2016-11-25 11:48:16,Having the same problem on macOS Sierra v10.12,mdjekic,
952,2016-11-26 10:49:49,"Same issue with macOS Sierra v10.12.1, node v7.2.0, npm  v4.0.2 or yarn v0.17.9 
i.e. This fails - node-pre-gyp install --fallback-to-build

Using npm install -g node-inspector or yarn global add node-inspector",kalch,
952,2016-11-27 18:54:57,"Same problem.

    MacOS Sierra: 10.12.1
    Node: 7.2.0
    NPM: 3.10.9

Also using `npm -g node-inspector`.",hpohlmeyer,
952,2016-12-09 01:29:01,"Mein is npm at 4.0.3 on Archlinux(4.8.11-1-ARCH). node is at v7.2.1

<S_CODE_TOKEN>",simonmysun,
952,2016-12-16 14:56:41,"same issue on: 
win7 32bits
node7.2.1
npm 4.0.5",pach93,
952,2016-12-17 02:13:32,Anyone have any luck with this ?,hahnsolo,
951,2016-11-22 03:51:14,"node v6.2.1
Node Inspector v0.12.8

i don't know why i can't console in the chrome54.0.2840.98.

Enter no reaction

![image](https://cloud.githubusercontent.com/assets/8016811/20549995/430b3bde-b16c-11e6-8914-992902720cb6.png)


![image](https://cloud.githubusercontent.com/assets/8016811/20510191/bf188948-b0a9-11e6-90c2-dcb8d91fc452.png)
",trojanliu,2016-11-23 06:23:02
951,2016-11-23 03:51:28,"I would give you 100 thumbs up if I could. I've been looking for a work around. Another person has mentioned this before at [#942](https://github.com/node-inspector/node-inspector/pull/942), however their solution did not work for me. 
",Fallenstedt,2016-11-23 06:23:02
951,2016-11-23 06:19:13,"I found the cause of the problem.

node-inspector/front-end/platform/DOMExtension.js  
IsEnterKey method, judge enter event uses the event.keyIdentifier === ""Enter"".

but chrome 54.0 has remove  ""KeyboardEvent. KeyIdentifier""
![aaaa](https://cloud.githubusercontent.com/assets/8016811/20552576/69ff624a-b187-11e6-87a6-76f49f2ea3f4.jpg)

The solution is change the DOMExtension/isEnterKey 's function: 

vi /usr/local/lib/node_modules/node-inspector/front-end/platform/DOMExtension.js
isEnterKey

function isEnterKey(event) {
      //suit for event.keyIdentifier
      return (event.keyCode !== 229 && event.keyIdentifier === ""Enter"") ||  event.keyCode === 13;
}",trojanliu,2016-11-23 06:23:02
951,2017-01-18 22:59:52,Seems like this issue should still be open?,bstro,2016-11-23 06:23:02
951,2017-01-20 15:15:29,Might have been closed because dupe of #903?,zxaos,2016-11-23 06:23:02
950,2016-11-18 21:22:34,"- Command:
   npm i -g git+https://github.com/node-inspector/node-inspector.git

- Logs :
node-pre-gyp ERR! Tried to download(404): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-darwin-x64.tar.gz
node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@7.1.0 (node-v51 ABI) (falling back to source compile with node-gyp)

- Env :
✗ node --version
v7.1.0
✗ npm --version
3.10.9",ezzaouia,
950,2016-11-21 15:25:43,"I'm having the same problem. And when it falls back to compiling, I get these errors:
  CXX(target) Release/obj.target/debug/src/debug.o
../src/debug.cc:38:27: error: too few arguments to function call, expected at least 2,
      have 1
        v8::Debug::Call(fn);
        ~~~~~~~~~~~~~~~   ^
/Users/dealpete/.node-gyp/7.1.0/include/node/v8-debug.h:198:3: note: 'Call' declared here
  static MaybeLocal<Value> Call(Local<Context> context,
  ^
../src/debug.cc:46:61: error: too few arguments to function call, single argument
      'isolate' was not specified
        Isolate* debug_isolate = v8::Debug::GetDebugContext()->GetIsolate();
                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/dealpete/.node-gyp/7.1.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext'
      declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
../src/debug.cc:61:67: error: too few arguments to function call, single argument
      'isolate' was not specified
        Local<Context> debug_context = v8::Debug::GetDebugContext();
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/dealpete/.node-gyp/7.1.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext'
      declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
../src/debug.cc:66:54: error: too few arguments to function call, single argument
      'isolate' was not specified
          debug_context = v8::Debug::GetDebugContext();
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
/Users/dealpete/.node-gyp/7.1.0/include/node/v8-debug.h:248:3: note: 'GetDebugContext'
      declared here
  static Local<Context> GetDebugContext(Isolate* isolate);
  ^
4 errors generated.
make: *** [Release/obj.target/debug/src/debug.o] Error 1",DealPete,
950,2016-11-22 11:20:47,"Error on Win10 x64, node 7.0.0

`$ npm install -g node-inspector`

> v8-debug@0.7.7 preinstall C:\Users\xxx\AppData\Roaming\npm\node_modules\.staging\v8-debug-ab58e119
> node -e 'process.exit(0)'


> v8-profiler@5.6.5 preinstall C:\Users\xxx\AppData\Roaming\npm\node_modules\.staging\v8-profiler-f7edcbfd
> node -e 'process.exit(0)'

> C:\Users\xxx\AppData\Roaming\npm\node-inspector -> C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\bin\inspector.js
C:\Users\xxx\AppData\Roaming\npm\node-debug -> C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\bin\node-debug.js

> v8-debug@0.7.7 install C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug
> node-pre-gyp install --fallback-to-build

> node-pre-gyp ERR! Tried to download(404): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-win32-x64.tar.gz
node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@7.0.0 (node-v51 ABI) (falling back to source compile with node-gyp)

> C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js"" clean )  else (node """" clean )

> C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js"" configure --fallback-to-build --module=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64 )  else (node """" configure --fallback-to-build --module=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64 )

> C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js"" build --fallback-to-build --module=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64 )  else (node """" build --fallback-to-build --module=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64 )
Die Projekte in dieser Projektmappe werden nacheinander erstellt. Um eine parallele Erstellung zu erm▒glichen, m▒ssen Sie den Schalter ""/m"" hinzuf▒gen.
  debug.cc
  InjectedScriptHost.cc
  win_delay_load_hook.cc
..\src\debug.cc(38): error C2660: ""v8::Debug::Call"": Funktion akzeptiert keine 1 Argumente [C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug.vcxproj]
..\src\debug.cc(46): error C2660: ""v8::Debug::GetDebugContext"": Funktion akzeptiert keine 0 Argumente..\src\InjectedScriptHost.cc(173): warning C4996: 'v8::Object::GetRealNamedProperty': wurde als veraltet deklariert [C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug.vcxproj]

>  c:\users\xxx\.node-gyp\7.0.0\include\node\v8.h(2949): note: Siehe Deklaration von ""v8::Object::GetRealNamedProperty""
..\src\debug.cc(46): error C2227: Links von ""->GetIsolate"" muss sich ein Zeiger auf Klassen-/Struktur-/Union-/generischen Typ befinden. [C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug.vcxproj]
..\src\debug.cc(61): error C2660: ""v8::Debug::GetDebugContext"": Funktion akzeptiert keine 0 Argumente [C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug.vcxproj]
..\src\debug.cc(66): error C2660: ""v8::Debug::GetDebugContext"": Funktion akzeptiert keine 0 Argumente [C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug.vcxproj]
gyp ERR! build error
gyp ERR! stack Error: `C:\Program Files (x86)\MSBuild\14.0\bin\msbuild.exe` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onExit (C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:106:13)
gyp ERR! stack     at ChildProcess.emit (events.js:191:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)
gyp ERR! System Windows_NT 10.0.14393
gyp ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js"" ""build"" ""--fallback-to-build"" ""--module=C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\node-inspector\\node_modules\\v8-debug\\build\\debug\\v0.7.7\\node-v51-win32-x64\\debug.node"" ""--module_name=debug"" ""--module_path=C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\node-inspector\\node_modules\\v8-debug\\build\\debug\\v0.7.7\\node-v51-win32-x64""
gyp ERR! cwd C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug
gyp ERR! node -v v7.0.0
gyp ERR! node-gyp -v v3.4.0
gyp ERR! not ok
node-pre-gyp ERR! build error
node-pre-gyp ERR! stack Error: Failed to execute 'node-gyp.cmd build --fallback-to-build --module=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\node-pre-gyp\lib\util\compile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:106:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:191:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:877:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)
node-pre-gyp ERR! System Windows_NT 10.0.14393
node-pre-gyp ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Users\\xxx\\AppData\\Roaming\\npm\\node_modules\\node-inspector\\node_modules\\node-pre-gyp\\bin\\node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug
node-pre-gyp ERR! node -v v7.0.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.31
node-pre-gyp ERR! not ok
Failed to execute 'node-gyp.cmd build --fallback-to-build --module=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64\debug.node --module_name=debug --module_path=C:\Users\xxx\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v51-win32-x64' (1)
C:\Users\xxx\AppData\Roaming\npm
`-- (empty)

> npm ERR! Windows_NT 10.0.14393
npm ERR! argv ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v7.0.0
npm ERR! npm  v3.10.8
npm ERR! code ELIFECYCLE

> npm ERR! v8-debug@0.7.7 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-debug@0.7.7 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-debug
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

",black-snow,
950,2016-12-01 20:45:01,"This isn't the ideal solution, but I downgraded to 6.9.1 and things are back to normal. I didn't need anything specific from 7.x, so that was ok in my instance.  

[https://nodejs.org/en/download/package-manager/](https://nodejs.org/en/download/package-manager/)
",virtualadrian,
950,2016-12-02 01:38:55,"Same issue, downgrade makes everything fine",CharlieUofT,
950,2016-12-06 22:12:11,@virtualadrian This worked for me. I am using nvm and ran `nvm install 6.9.1` and then `nvm use 6.9.1` and it installed just fine. Thank you.,msholty-fd,
950,2016-12-08 06:54:15,@virtualadrian it installed just fine but it just not works ,lostcodder,
950,2016-12-15 19:32:11,":+1: seeing this as well.
Linux Mint 18
node 7.2.1
npm 4.0.3

Still an issue as of 2/9/2017.
OS X 10.12.3 (16D32)
node 7.5.0
npm 4.1.2",clayzermk1,
950,2016-12-16 10:44:23,"I also see this on 
windows 7
node 7.2.1
npm 3.10.10",dobryanskyy,
950,2017-01-16 22:04:04,:+1:,stevenxxiu,
950,2017-02-09 10:43:27,Yep downgrading to ver 6.9.5 worked for me.,sumant30,
950,2017-02-13 17:32:53,"Won't install on Node 7.5.0 (npm 4.1.2, OSX 10.10.5). 

Same issues/output as @DealPete 

Unfortunately downgrading is not an option for me.
",sandro-pasquali,
950,2017-02-16 08:16:16,"Having the same problem - same specs as sandro-pasquali.

Downgrading to 6.9.5 does work for me too but I hope this will be fixed soon. 

Keep up the good work and thank you!",simonvomeyser,
950,2017-02-20 22:31:33,same problem.,javierbq,
950,2017-03-03 22:47:59,Same problem here.,shockey,
950,2017-03-06 19:04:44,"Same problem on:
OSX: 10.10 
Node: v7.7.1
npm: 2.15.1 ",Sasha-Sh,
950,2017-03-08 04:46:10,"Same problem on
MINGW64_NT-6.1(MS-Windows 7 64bit)
Node v7.5.0
npm 4.0.5",mitsuhisaT,
950,2017-03-14 02:12:18,"oSX 10.11
Node- 7.7.0

ERR! Tried to download(404): https://node-inspector.s3.amazonaws.com/debug/v0.7.7/node-v51-darwin-x64.tar.gz

Then I get this:
<S_CODE_TOKEN>

This is followed by a long error log.",arssonist,
950,2017-03-14 15:01:17,@virtualadrian 's solution work for me.,jimmyko,
950,2017-03-21 02:25:28,"Same problem on:
Windows 10 (x64)
Node v7.7.1
npm 4.1.2

Downgrade to Node v6.10.0 fixes the issue",BayoAdejare,
950,2017-03-23 05:37:21,"Same problem on:
OSX: 10.10
Node: v7.6.0
npm: 4.1.2",CharlyCheng,
950,2017-03-24 14:21:21,"Just ran into this today as well.

Debian Jessie
NodeJS 7.5.0
npm 4.1.2",lf94,
950,2017-03-27 02:07:27,"Ok,I will try !






At 2017-03-24 22:21:28, ""Lee"" <notifications@github.com> wrote:


Just ran into this today as well.

Debian Jessie
NodeJS 7.5.0
npm 4.1.2

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub, or mute the thread.",CharlyCheng,
949,2016-11-18 02:50:03,"Node v6.9.1
Windows 10 x64

app.js:
<S_CODE_TOKEN>

cmd:
<S_CODE_TOKEN>",uMaxmaxmaximus,
949,2016-11-18 11:31:53,"+1
",jamesjjk,
949,2016-11-18 15:13:42,"I'm using `node@4`, have the same issue.
",StreetStrider,
949,2016-11-18 16:11:46,"Node v6.5 have the same error.
",uMaxmaxmaximus,
949,2016-11-18 19:25:23,"Me too with 6.9.1 on Linux.
",EricFortin,
949,2016-11-24 07:15:31,Also getting this with 6.9.1 on Linux.,sunilw,
949,2016-11-24 10:07:07,6.9.1 in mac - same issue,harihar,
949,2016-11-24 10:07:59,Anyone has any info on this issue? It seems to be affecting many people.,harihar,
949,2016-11-26 06:40:05,Same here. Node 6.5,GeorgeChackungal,
949,2016-11-26 07:23:05,same,goodmanlu,
949,2016-11-28 20:15:46,"This looks the same as [#905](https://github.com/node-inspector/node-inspector/issues/905)

That issue thread has a couple of suggestions for ""commenting out"" the offending code, though the impact of that action isn't clear. Several posts suggest debugging can continue.

Doesn't look as though this module is being maintained regularly. Unless I misread the history there have been no commits since April.",br14,
949,2016-12-05 15:17:31,"Same issue. Windows 10, x64, Node v6.9.1, node-inspector v 0.12.8.",gpresland,
949,2016-12-11 17:16:56,This is fixed in the PR #914 ,nwwells,
949,2016-12-15 08:48:12,Works with `5.4.1` but I need `6+` for ES6 in my express app. Not essential but would be very helpful if this worked.,borislemke,
949,2016-12-20 12:20:22,Same issue with `6.9.2` on Linux,DevWurm,
949,2016-12-21 12:46:40,"Just installed v0.12.8, and I have this issue.",davidgatti,
949,2016-12-24 09:32:18,Any update?,roysG,
949,2017-01-25 08:13:58,When you install node-inspector locally to you project this problem is soled.,yaacovk,
949,2017-02-10 19:34:01,"I get the same error message, even when I install locally and run with `node_modules/node-inspector/bin/node-debug.js app.js`.",dublinus,
949,2017-03-05 02:57:18,"Windows 10 x64
Node v6.10.0
The same error!
",mujicadiazr,
949,2017-03-15 01:58:38,try this https://github.com/node-inspector/node-inspector/pull/983,hustxiaoc,
948,2016-11-11 02:56:26,"![image](https://cloud.githubusercontent.com/assets/5569015/20201160/df9dfa98-a7f0-11e6-891b-9fce5fb58af6.png)
this is a bug.

![image](https://cloud.githubusercontent.com/assets/5569015/20201267/a92ec6da-a7f1-11e6-9bc6-0661dc16f355.png)
",lovemybb,
948,2016-11-12 17:55:52,"#905 
#907
#928
#931
",venkateshilango7,
947,2016-11-10 14:57:55,"First-time user, so may be operator error, but ... when executing:

    node-debug --no-preload=true script.js

Browser opens, I select Profile > Record Heap, with an error:

    HeapProfiler.startTrackingHeapObjects failed.
   Error: Unknown command ""HeapProfiler.startTrackingHeapObjects"" in request

The script halts, nothing happens until I close the inspector's instance of Chrome, after which the script carries on.

This OSX:

    uname -v
    Darwin Kernel Version 15.3.0: Thu Dec 10 18:40:58 PST 2015; root:xnu-3248.30.4~1/RELEASE_X86_64

Chrome version 54.0.2840.87 (64-bit)
",leegee,
947,2016-11-27 21:22:36,"@leegee i'm seeing the same thing! have you found a workaround?

(i'm on node `v5.10.1` btw)",brandly,
947,2017-01-06 18:06:04,Try this: https://github.com/node-inspector/node-inspector/issues/646,steve-mcqs,
947,2017-01-17 08:15:56,"@brandly — Sorry, no, but next time I need this module, I'll take Steve's advice.",leegee,
946,2016-11-10 10:50:27,"Hello , need help, already try everything
after npm install have these errors 
when instal node 4.2.3 everything good, but i want to use the latest one, any advices ?

npm WARN adingit@0.0.0 No description
npm WARN adingit@0.0.0 No repository field.
npm WARN adingit@0.0.0 No license field.
npm ERR! Darwin 16.1.0
npm ERR! argv ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""i""
npm ERR! node v7.1.0
npm ERR! npm  v3.10.9
npm ERR! code ELIFECYCLE

npm ERR! libxmljs@0.14.3 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the libxmljs@0.14.3 install script 'node-gyp rebuild'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the libxmljs package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-gyp rebuild
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs libxmljs
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls libxmljs
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/tkarpenko/****/npm-debug.log


../node_modules/nan/nan.h:1933:15: warning: 'SetAccessor' is deprecated [-Wdeprecated-declarations]
  return obj->SetAccessor(
              ^
/Users/tkarpenko/.node-gyp/7.1.0/include/node/v8.h:2761:22: note: 'SetAccessor' has been explicitly marked deprecated here
                bool SetAccessor(Local<Name> name,
                     ^
../src/libxmljs.cc:56:17: warning: 'IsDead' is deprecated [-Wdeprecated-declarations]
    if (v8::V8::IsDead())
                ^
/Users/tkarpenko/.node-gyp/7.1.0/include/node/v8.h:8907:10: note: 'IsDead' has been explicitly marked deprecated here
bool V8::IsDead() {
         ^
4 warnings and 4 errors generated.
make: *** [Release/obj.target/xmljs/src/libxmljs.o] Error 1
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:106:13)
gyp ERR! stack     at ChildProcess.emit (events.js:191:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)
gyp ERR! System Darwin 16.1.0
gyp ERR! command ""/usr/local/bin/node"" ""/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
gyp ERR! cwd /Users/tkarpenko/Documents/Rostyslav/Work/dingit.tv/ng_admin/client/node_modules/libxmljs
gyp ERR! node -v v7.1.0
gyp ERR! node-gyp -v v3.4.0
gyp ERR! not ok 
",Odywan55,
946,2016-11-12 02:22:26,"Me too :-(
",kalch,
945,2016-11-08 17:10:31,,amilajack,
944,2016-11-06 21:04:46,"I have problem while installing node-inspector. How I can solve it?

I am using Win 7 x64 and latest versions of node and npm.

Short log and versions of node and npm (top of the log):
<S_CODE_TOKEN>

Here is full log (npm-debug.log): http://dropmefiles.com/mVdr5",sharikovvladislav,
944,2016-12-03 09:06:49,"yep, same error
win7 x64
node v7.2.0
npm v3.9.0
node-inspector v0.12.8

There is the temporary workaround the problem: install node v6 (it has been complied fine at node v6.9.1)",fend25,
944,2016-12-05 07:31:34,"how to save process??
",yaodehaung,
944,2017-01-23 20:58:43,"i am using node 6.9.2 and i am getting same error

<S_CODE_TOKEN>",athergeek,
944,2017-02-09 10:16:04,"Same error here:

---> npm install -g node-inspector:

<S_CODE_TOKEN>
",jucajuca,
943,2016-11-03 14:11:41,"`You use deprecated syntax for web-host option. Use 0.0.0.0 instead of null` warning fixed, filename made apparent",cgood92,
942,2016-11-01 11:56:12,"Seems that a lot of time passed since last front-end synchronisation with ChromeDevTools.
Looks like full upgrade would be a proper fix.",iamfrontender,
942,2016-11-01 11:58:16,"Fixes #903 though
",iamfrontender,
942,2016-11-01 13:48:59,"It's not a proper fix. More of a workaround. 
Proper fix would be to integrate with latest ChromeDevTools frontend. It'd fix broken F8, arrows and the rest of issues people are having after upgrading from Chrome 51.
",iamfrontender,
942,2016-11-02 20:19:19,"This is a big headache for a lot of people. Please consider merging this in and doing the proper fix later on. Thanks
",ryanspillsbury90,
942,2016-11-02 21:57:03,"@ryanspillsbury90 , just to prevent you from wasting time. This one is unlikely to be merged, repo doesn't look maintained.
",iamfrontender,
942,2016-11-03 07:19:30,"Yeah, just checked the last commit seems to be on April 9 :(
",Mido22,
942,2016-11-08 20:07:58,"@iamfrontender I saw that your workaround solves the problem of the Enter not working in the console, however, if I assign something new to an already existing variable the value does not get reflected. Do you know why that might happen?

This same thing does not happens if you define the variable in the console, but it does happens for existing ones:

**Variables defined in console**

<pre>
var aVar = 2
undefined
aVar
2
aVar = 3
3
aVar
3
</pre>

_versus_

**Variables already defined in the code** and trying to overwrite its value during a breakpoint:

<pre>
ip
""1.1.1.1""
ip='Hello'
""Hello""
ip
""1.1.1.1""
</pre>
",cgadam,
942,2016-12-22 14:07:50,any updates?,a7madgamal,
942,2017-01-25 12:20:31,"Just to add to the discussion above, I'm using the following `sed` statement to patch the Enter key support for the time being:

<S_CODE_TOKEN>",mmrko,
942,2017-03-08 21:14:54,I'm waiting for this PR as well. I think an entire community is actually,codeHatcher,
942,2017-03-09 10:06:46,"I hope someone updates this great tool, it's missing A LOT from the current devtools 😿 ",a7madgamal,
941,2016-10-31 10:45:22,"### Specs
- node-inspector: v0.12.8
- node.js: v6.2.2
- OS: Windows 10 Home Insider Preview
  - Version: 1607
  - OS Build: 14955.1000
- Affected browsers
  - Google Chrome Version 54.0.2840.71 m (64-bit)
  - Google Chrome Canary Version 56.0.2905.0 canary (64-bit)

### Expected behaviour
When stopping at a breakpoint, pressing F8 should resume execution of the program.

### Actual behaviour
F8 does resume the execution, but then stops somewhere else in the program.
It has a behaviour similar to ""Step out of current function (Shift+F11)"" in the sense that it resumes execution then stops.

### Notes
- The expected behaviour works when clicking on the icon for ""Resume script execution (F8)"".
- I also have Issue #903, so they might be related (regression in Google Chrome).",dfdeagle47,
940,2016-10-30 03:13:48,"I try to install node-inspector but it get a error everytime.

<img width=""961"" alt=""screen shot 2016-10-30 at 11 12 44"" src=""https://cloud.githubusercontent.com/assets/7069605/19834224/def7f6e2-9e91-11e6-9839-cf6991968902.png"">
<img width=""1179"" alt=""screen shot 2016-10-30 at 11 12 59"" src=""https://cloud.githubusercontent.com/assets/7069605/19834225/df321336-9e91-11e6-98e4-82858d09348e.png"">
",Rukeith,
940,2016-11-01 08:53:10,"I got the same errors!!
✗ node -v
v7.0.0
✗ npm -v
3.10.8
",OrenElad,
940,2016-11-02 19:29:42,"Came here for this. Does not work on node `7.0.0`, npm `3.10.9` and, incidentally, yarn.

<S_CODE_TOKEN>
",nfantone,
940,2016-11-02 20:16:38,"+1
",leecade,
940,2016-11-03 16:21:51,"+1
",henriquecustodia,
940,2016-11-03 16:38:18,"it seems v8-debug compile failed
",leecade,
940,2016-11-04 20:35:11,"+1
",brandonpsmith,
940,2016-11-07 08:10:50,"+1
",TDSchreur,
940,2016-11-07 12:44:57,"same problem here
node 7.0.0
npm 3.10.9
",gino8080,
940,2016-11-07 16:33:26,"Some details may help ...

OSX El Capitan 10.11.6
Node v7.0.0
NPM v3.10.9
Installed via Homebrew

<img width=""1318"" alt=""ss"" src=""https://cloud.githubusercontent.com/assets/2806503/20065930/7d874fa8-a4d5-11e6-913f-0e804a1e7c24.png"">
",brandonpsmith,
940,2016-11-08 05:53:08,"Same: https://github.com/node-inspector/node-inspector/issues/944
",sharikovvladislav,
940,2016-11-08 12:32:38,"I might be wrong (I hope I am), but it really looks like this project was [left abandoned](https://github.com/node-inspector/node-inspector/pulse).
",nfantone,
940,2016-11-09 17:30:05,"That would be a shame. Are there any good alternatives?
",brandonpsmith,
940,2016-11-09 18:25:27,"@brandonpsmith Yep. `node --inspect`. See it [in action](http://www.mattzeunert.com/2016/06/01/node-v8-inspector-inspect.html).
",nfantone,
940,2016-11-13 21:54:52,"+1 , same errors 

OSX 10.12.1
node 7.1.0
npm 3.10.9
",neligajb,
940,2016-11-15 07:41:04,"+1
",CocaCola183,
940,2016-11-17 04:15:50,"+1

For the time being downgrading to 6.9.1 works
",sohailykhan94,
940,2016-11-25 20:09:44,"also, not working in node 7, ",patrikx3,
940,2016-11-25 20:11:17,"neither ubuntu, neither windows, neither docker ubuntu",patrikx3,
940,2016-12-14 01:40:46,"+1 same errors, Ubuntu 16.04, node v7.2.1",pascalopitz,
940,2016-12-14 03:55:53,"same in:
node: v7.2.1
npm: 4.0.3",menocomp,
940,2016-12-26 08:00:29,"same errors
macOs 10.12
node: v7.3.0
npm: 3.10.10",anker-leon,
940,2016-12-26 18:40:52,"same errors
macOs 10.12
node: v7.3.0
npm: 3.10.10",shikloshi,
940,2017-01-05 01:54:25,+1,MemoryReload,
940,2017-01-05 17:45:15,Anyone see the new release v0.7.5 15 days ago? Still not on npm though.,brandonpsmith,
940,2017-01-05 22:30:47,"I already mentioned this and I know that it's not a direct replacement (more so if you are using this via a plugin like `gulp-node-inspector`), but since node `7.0.0` there's no need for `node-inspector` anymore, AFAIK.

See https://github.com/node-inspector/node-inspector/issues/940#issuecomment-259486927",nfantone,
940,2017-01-06 06:08:47,"The problem with --inspect is the unique id attached to the url. ex. chrome-devtools://devtools/bundled/inspector.html?experiments=true&v8only=true&ws=127.0.0.1:9229/**5d0d06bb-6a50-4998-a076-fb4c4d1566c7**
Every time you restart your app you have load a new url.",brandonpsmith,
940,2017-01-06 06:18:34,"--inspect is great for a running process, but my use case is analyzing core dumps. Older ones seem to not load in current chrome devtools, but load okay in node-inspector. I am using nvm to juggle between versions just so I can fire up node-debugger on 6.x",pascalopitz,
940,2017-01-06 14:59:45,"--inspect loads fine in chrome devtools for me. It's just a pain having to click or copy/paste a unique url every time you close your app, make changes, then start it. It slows everything down. If there is some kind of auto reload associated with --inspect I would use it. But AFAIK there is nothing like that. I'm not even sure how that would work with unique url's every time.",brandonpsmith,
940,2017-01-07 02:09:48,"Well, `--inspect` is still experimental stuff. So I don't expect it to work in every scenario just yet.

And yes, you are right: the uniqueness of the URL _is_ a drag when reloading the process. You get accustomed  to it quickly, though.",nfantone,
940,2017-02-02 13:37:35,"Any updates on this?

It's not good for the coder's workflow if you have to copy the new URL everytime the application is reloaded 😅",smith64fx,
940,2017-02-02 15:29:41,"I found this extension to be helpful. https://chrome.google.com/webstore/detail/nodejs-v8-inspector/lfnddfpljnhbneopljflpombpnkfhggl

You simply run your app with the --inspect command and then click the extension button. It will open up the the debugged app with the correct url.",brandonpsmith,
939,2016-10-27 21:36:18,"I don't know if this is out of scope, but I thought it would be helpful to have an example of how to connect to a remote server to do some debugging.
",harrissAvalon,
938,2016-10-19 02:15:28,"Despite the console log ""Error: No NativeModule in target scope"", which still needs addressing, this patch does enable it to work, with latest (nodejs 6.9.0)
many others to recognize for this @Virtual-Machine @asi-jmasson @dbreese
",MasterJames,2016-10-19 23:54:32
938,2016-10-19 23:54:32,"Okay I thought there must be something else people are using now. That makes sense, thanks.
`node --inspect your.js`
seems to be integrated now.
",MasterJames,2016-10-19 23:54:32
937,2016-10-18 19:36:45,"Has this problem shown up for anyone else? It has been working fine for almost a year and I didn't make any changes to bring about this bug.
Restarting inspector/node doesn't fix. 
Running 0.12.8

Console is effectively broken for me right now. Any solutions?
",Elliot128,
937,2016-10-18 20:43:42,"This is a duplicate of https://github.com/node-inspector/node-inspector/issues/903
",ac9,
937,2016-11-01 13:57:29,"Look for workaround at #942 
",iamfrontender,
937,2016-12-22 14:04:16,someone close this issue to focus on #903 ,a7madgamal,
936,2016-10-14 21:28:56,"null value is deprecated. Should be ""0.0.0.0""
",aysark,
935,2016-10-14 21:21:19,"null value is deprecated.  Should be 0.0.0.0
",aysark,2016-10-14 21:29:02
934,2016-10-09 19:28:04,"Using Node Inspector v0.12.8.

While trying to debug code using jQuery, I kept getting errors like this:

<S_CODE_TOKEN>

The inspector (in Chromium) also stopped executing code without showing anything in the call stack. To get around this blockage, I had to pause and resume execution multiple times and my code was eventually executed.

I managed to reproduce this problem with this very simple code:

<S_CODE_TOKEN>

The first statement will show up in the console and then nothing will happen until F8 is pressed a couple of times (or pause and resume are clicked).

Here is the full output I get when running the above code:

<S_CODE_TOKEN>

I'm not sure if this should be reported here or to `jsdom` but I don't have any problem when executing the same code with `node` instead of `node-debug`.
",berniegp,
934,2016-10-09 19:48:38,"I noticed #930  This issue does not occur when using Node.js 6' `node --inspect`.
",berniegp,
933,2016-10-07 13:58:12,"This change fixes #905 + it avoids first argument reassignment.
",WebReflection,2016-10-25 10:15:34
933,2016-10-07 14:09:02,"I'm not sure what's the Travis CI error about, specially because `0.12` works like a charm.
",WebReflection,2016-10-25 10:15:34
932,2016-10-03 14:35:17,"Fixes small error in handling error condition vs. having an actual native module to return:

<S_CODE_TOKEN>

Reference issues:
- https://github.com/node-inspector/node-inspector/issues/905
- https://github.com/node-inspector/node-inspector/issues/907
- https://github.com/node-inspector/node-inspector/issues/928
- https://github.com/node-inspector/node-inspector/issues/931
",tautologistics,
932,2016-10-21 17:47:20,"Is this gonna be merged?
",samuelcastro,
932,2016-10-26 05:51:19,"Not sure if the maintainers check this repo anymore. Maybe time for a fork.
",MadOgre,
932,2016-10-27 00:46:40,"I've manually applied this fix and I now get `Error: No NativeModule in target scope` in the debugger- no source files, still doesn't appear to work.
",pospi,
932,2016-10-28 02:02:57,"I've just decided to use native inspector with: `node --inspect index.js` and it's working nicely. (https://nodejs.org/api/debugger.html#debugger_v8_inspector_integration_for_node_js)
",samuelcastro,
932,2016-10-28 13:26:37,"heh, likewise...

On Fri, Oct 28, 2016 at 12:03 PM, Samuel Castro notifications@github.com
wrote:

> I've just decided to use native inspector with: node --inspect index.js
> and it's working nicely. (https://nodejs.org/api/
> debugger.html#debugger_v8_inspector_integration_for_node_js)
> 
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> https://github.com/node-inspector/node-inspector/pull/932#issuecomment-256818367,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAatJKXtUUl-J3nrFGe5GjlEyrnBLLXgks5q4VfZgaJpZM4KMpi-
> .
",pospi,
932,2016-11-15 06:37:17,"@samuelcastro @pospi do you guys run into the issue where it opens a new window for the inspector whenever your server reloads? kind of a pain in the but using the --inspect flag for me
",grantgeorge,
932,2017-03-12 01:03:55,"@samuelcastro thanks for the tip!

The `--inspect` flag on the Node.js runtime is a great alternative!",Zignd,
931,2016-09-30 10:42:03,"I get this error when I tryed to debug a remote server app

<S_CODE_TOKEN>
",kielsoft,2016-10-08 07:03:18
931,2016-09-30 12:53:48,"See https://github.com/node-inspector/node-inspector/issues/907
",bruun,2016-10-08 07:03:18
931,2016-10-06 11:16:51,"I was also facing this issue, but after lots of googling and finding about this issue , the only thing works for me is to uninstall the current node.js version & then Install the older node version. I've tested it with Node v4.5.0 ..I hope it works fine for all v 4.x.x versions... 
Then after installing the Node version 4.5.0 , run the command ""npm uninstall node-inspector -g"" and then install it again with the older npm version that comes with Node 4.5.0 with command ""npm install node-inspector -g"" ... 
",Rizwanjamal,2016-10-08 07:03:18
931,2016-10-08 07:03:18,"thanks a lot downgrading to 4.x,x solved the problem
",kielsoft,2016-10-08 07:03:18
931,2017-02-03 12:12:04,"got the same issue... (i'm actually using babel-node)  I don't want to downgrade to node 4.x
I used vs code debugging instead and it works fine",bochen2014,2016-10-08 07:03:18
931,2017-03-02 03:00:25,Ran into this today. [This solution](http://stackoverflow.com/a/39911020/4228293) at stack overflow worked for me. ,carlsoncs,2016-10-08 07:03:18
930,2016-09-26 05:55:32,"@bajtos, @3y3
First of all, thank you for this brilliant project which is very useful for developing node.js app.
But it seems to be no changes over 6 months since Apr.
I'm curious if this repo is not maintained anymore ?
",sparkleholic,
930,2016-09-26 14:20:06,"Frankly, I haven't been actively involved with Node Inspector for a year or two by now. All credit and thanks for keeping up with the maintenance goes to @3y3 🙇 

Personally, I use `node --inspect` these days and don't need Node Inspector any more. The debugger was added to Node v6 this summer, see https://github.com/nodejs/node/pull/6792 for more details.
",bajtos,
930,2016-09-26 23:46:31,"@bajtos Thanks for replying.
Yes you're right. I'm also noticed that the recent node v6.4 is supporting `inspect` option. It's really good news. 
But in my case, I'm using the node in the embedded device which is pretty old version(v0.12.0). So unfortunately I can't use `inspect` option there. :(
",sparkleholic,
930,2016-10-16 00:51:25,"Plus, `node --inspect` does not include profiles tab :( which is the only reason I use `node-inspector` (daily debugging is done faster with old-fashioned log messages or editor integration).
",naholyr,
930,2016-11-16 09:31:11,"@naholyr node 7 --inspect supports the profiles tab
",graingert,
930,2016-12-07 02:01:15,"I'd like to use this node-inspector to debug node.js remotely, But the latest code looks it needs to run node-inspector on the same machine running on the local machine.
Even though I submitted a PR (https://github.com/node-inspector/node-inspector/pull/919) regarding this but it just supports only source viewing and break point.
In order to support other tabs like console, profile and etc, it seems like it should inject some modules to the running nodejs process via getting console object.

@bajtos 
In the case that the running nodejs process doesn't have console object because it substitutes for the other, node-inspect cannot inject modules into.
If injection is not available, the node-inspector cannot support forwarding console output, tabs functions like profile/console/etc.
But I'd like to use this project only for view source and setting break-point except other features.
So may I distribute this as another project name ? (maybe `node-inspector-remote` ?)
I just want to do this through forking the old node-inspect branch.
Please take a look at this (https://github.com/sparkleholic/node-inspector/commit/ef554d8ac26826d74e1113ba7cbe14c47ee4fe65)
",sparkleholic,
930,2016-12-07 12:22:25,"> @sparkleholic  But I'd like to use this project only for view source and setting break-point except other features. So may I distribute this as another project name ? (maybe node-inspector-remote ?)

Of course! Just make sure to give credit to the original project, this is usually done via `NOTICE` file in project root. See e.g. https://github.com/strongloop/loopback-datasource-juggler/blob/80d2264bc940e764bb8eb0aa3fa12f4ac770fb0d/NOTICE. (Just keep in mind that node-inspector has a different license than the projects mentioned by loopback-datasource-juggler.)

> I just want to do this through forking the old node-inspect branch. Please take a look at this (sparkleholic@ef554d8)

What branch would you like to target? [0.7.4](https://github.com/node-inspector/node-inspector/commit/6b147d968bb7dfd0967665b1d85ee2b64559e999) is the last version I am familiar with. If you like, I can create a long-lived branch `0.7.x` from `v0.7.4` and release `v0.7.5` with your patch. That way you don't have to fork.",bajtos,
930,2016-12-07 16:48:50,"Thanks @bajtos for the fast response.

> What branch would you like to target? 0.7.4 is the last version I am familiar with. If you like, I can create a long-lived branch 0.7.x from v0.7.4 and release v0.7.5 with your patch. That way you don't have to fork.

`0.7.x branch` would be nice :) 
If you do so, I don't have to fork as you mentioned.
Would you let me know when 0.7.x branch is made so that I can make a PR into it. :)
Thanks for your kind feedback.
",sparkleholic,
930,2016-12-07 18:01:16,"@sparkleholic excellent, here is the branch: https://github.com/node-inspector/node-inspector/tree/0.7.x",bajtos,
930,2016-12-09 02:47:18,"@bajtos I've just made a PR(https://github.com/node-inspector/node-inspector/pull/956) into `0.7.x branch`.
I'll be appreciated if you review it. 
Thanks. ",sparkleholic,
929,2016-09-25 08:07:33,"I have a react app written in es6, and I'm using mocha to unit test it. For some reason, the unit test failed and I wanted to debug it to find out why.
- I first tried  node-debug command

<S_CODE_TOKEN>

and node-inspector successfully stopped on _mocha, but after I insert breakpoints on my .setup.js, it never hit my break point and went straight to finish.  So basically, it doesn't work at all!
- I then tried run node-inspector in advanced mode, i.e. run node-inspector in a seperate shell, then start mocha in debug mode

<S_CODE_TOKEN>

and I have got it work! unbelievable!
the only issue is performance, it took node-inspector a very long time (~5 minutes) to load the transpiled es5 scripts, and I once thought node-inspector has died (when attaching to node from vs code, it didn't take that long! so it's not a babel issue).

Question: 
why node-debug doesn't work in my scenario , and why running in separate shell works, but take such a long time?

---

running environment

<S_CODE_TOKEN>
",bochen2014,
929,2016-09-25 10:25:00,"I have put some comments on #832 

still don't understand why I can't use node-debug directly
",bochen2014,
929,2017-03-21 22:35:51,"@bochen2014 I ran into the same issue, I think it's because bin/mocha spawns a sub-process which executes bin/_mocha

I found that out from this comment at the top of the bin/mocha file:
<S_CODE_TOKEN>

I was successful running it like so:
<S_CODE_TOKEN>",MagicDuck,
929,2017-03-22 05:45:55,I see... thanks @MagicDuck ,bochen2014,
928,2016-09-21 07:17:20,"![image](https://cloud.githubusercontent.com/assets/13741751/18701292/75f81d44-800e-11e6-85e1-417b4496fc06.png)
",liaolunhui,
928,2016-09-21 07:17:59,"please consider  the compatibility
",liaolunhui,
928,2016-09-21 13:58:59,"Any alternative?
",ubaidseth,
928,2016-09-22 06:40:49,"I am using nodejs 6.3.1 to avoid the problem.
But in the future , I hope to use new version of nodejs.
",liaolunhui,
928,2016-09-24 04:11:10,"Try this hack/workaround
Seek in /usr/lib64/node_modules/node-inspector/lib/InjectorClient.js (your location of node-inspector)
Look at
Function InjectorClient.prototype._getFuncWithNMInScope

Replace this

<S_CODE_TOKEN>

with this

<S_CODE_TOKEN>

I have this message in node-ispector console tab

<S_CODE_TOKEN>

But breakpoints and other stuff works.
Tested with 6.6.0

**P.s.**
Seems node-inspector method for retrieval NativeModule link fails to handle -1 even with https://github.com/node-inspector/node-inspector/pull/906 or similar because this solves problem with response, but not with request.
You will recieve this message

<S_CODE_TOKEN>

and you will not able to go through breakpoints with node-inspector's UI.
",vird,
928,2016-09-27 08:06:00,"@vird yes,it's work,but breakpoints can't work
",15920353089,
928,2016-10-27 08:26:33,"Dudes! Please get this fixed!

I would take the Ring to Mordor myself, but I don't know the way. We're relying on your know-how!
",RocketRooster,
928,2016-10-27 08:37:22,"The situation is, that with Node v6 point something, you don't need all this:
https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27#.hkrhparu1
",mightyiam,
928,2016-10-27 09:13:10,"The --inspect flag has never worked for me. I just get empty inspectors and a blank file list for the supplied debug URL. I know the debugger is active because I get the ""Listening on port 9229, warning it's experimental etc"" message on stdout but no luck. My chrome is up to date, or so it says.

I'm developing and debugging on Windows while serving on Ubuntu, but I would be surprised if this would make a difference.

ETA: I did change the hostname in the URL, in case anyone was wondering.
",RocketRooster,
928,2016-10-27 09:22:08,"@RocketRooster this is going off-topic for this repository. Try the Node.JS mailing list?
",mightyiam,
927,2016-09-21 06:04:46,"$ node-debug test.js
Node Inspector v0.12.8
Visit http://127.0.0.1:8080/?port=5858 to start debugging.
Debugging `test.js`

Debugger listening on [::]:5858
Cannot send response - there is no front-end connection.
/usr/local/lib/node_modules/node-inspector/lib/InjectorClient.js:111
      cb(error, NM[0].ref);
                     ^

TypeError: Cannot read property 'ref' of undefined
    at InjectorClient.<anonymous> (/usr/local/lib/node_modules/node-inspector/lib/InjectorClient.js:111:22)
    at /usr/local/lib/node_modules/node-inspector/lib/DebuggerClient.js:121:7
    at Object.value (/usr/local/lib/node_modules/node-inspector/lib/callback.js:23:20)
    at Debugger._processResponse (/usr/local/lib/node_modules/node-inspector/lib/debugger.js:95:21)
    at Protocol.execute (_debugger.js:121:14)
    at emitOne (events.js:96:13)
    at Socket.emit (events.js:188:7)
    at readableAddChunk (_stream_readable.js:176:18)
    at Socket.Readable.push (_stream_readable.js:134:10)
    at TCP.onread (net.js:543:20)
",GreatBoy,
926,2016-09-19 02:09:30,"I made a simpal example to test the node-inspector, but the inspector in chrome didn't work,  the error is websocked closed.
",asdj07,
926,2016-09-29 03:35:11,"I think your nodejs version is too high
",15920353089,
926,2016-10-24 20:29:49,"use node version 4.x  or  --inspect option for node (live-edit with saving not working there, but fine for debugging)
",ivanm376,
926,2016-11-15 09:07:22,"Are some Node + operating system combinations known to have this problem?

I get the same websocket closed error immediately after the Chrome browser pops up, and a bunch of errors in the Chrome console, the first one being ""Assertion failed: Unknown experiment canvasInspection""

There's no error in the CLI where node-debug is running.

This happens on Node 5.x and Windows 7.
It works with same Node 5.x and Ubuntu 16.04.
",SergiuB,
925,2016-09-16 15:59:04,"This gave me some grief. I wanted to connect `node-debug` to an already-running node process. If that process is using 5858, why must `node-debug` report an `EADDRINUSE` error?

Conversely, if I run `node-debug` before separately running my process, `node-debug` takes 5858, forcing me to move the process to another port and change the target port in the URL.

Why does `node-debug` take a port when no script is provided? To debug itself by default?

I eventually figured this out, but it was not intuitive and it cost me time.
",jtlapp,
924,2016-09-16 06:24:00,"If I prematurely end the execution of my main script/code and then ctrl+c the node-debug, upon starting it again the 5858 port is in use and the script executes where it left. I want it to start all over again and port 5858 pe binded to the node-debug process again rather than the previous instance of node-debug.

Error: listen EADDRINUSE :::5858
    at Object.exports._errnoException (util.js:870:11)
    at exports._exceptionWithHostPort (util.js:893:20)
    at Agent.Server._listen2 (net.js:1234:14)
    at listen (net.js:1270:10)
    at Agent.Server.listen (net.js:1366:5)
    at Object.start (_debug_agent.js:21:9)
    at startup (node.js:70:44)
    at node.js:968:3
",pavanmehta91,
923,2016-09-15 16:51:06,"node-inspector seems to handle the ""console group API"" https://github.com/node-inspector/node-inspector/search?l=javascript&q=group+collapsed&type=Code&utf8=%E2%9C%93 but when I'm trying to use it, I get an error 

<S_CODE_TOKEN>

How can I get this working ?

Node Inspector v0.12.8, Chrome 52, Mac OS El Capitan, tested in the REPL and the UI console tab as well.
",ncuillery,
922,2016-09-15 13:01:47,"The event of the debug session being closed is of interest for callers
of node inspector.  For example they might decide to kill the inspector
process in this case.
",chgeo,
921,2016-09-13 22:46:45,"How do I connect `node-debug` to another `node --debug=5858` process?

When I run `node-debug` by itself, it reports ""Debugger listening on port 5858"" to say that it itself has installed the target application. Why is it listening to itself?

When I run my `node --debug=5858` process first and then run `node-debug`, `node-debug` complains ""Error: listen EADDRINUSE :::5858"". `node-debug --debug-port=5858` gives me the same problem. Setting up on 5859 duplicates this problem.

If I first run my `node --debug=5858` process and then launch `node-debug`, `node-debug` complains ""EADDRINUSE :::5858"" and then shows the code for my separate process in the wrong location. It will pretend to allow me to step through it, despite being in the wrong location. Refreshing the page at :8080 doesn't help.

Running `slc debug` gives me the same problems.

This all makes no sense to me. Am I going crazy? What's the proper way to do this? Thanks!
",jtlapp,2016-09-16 15:48:45
921,2016-09-13 23:01:59,"I should also mention that `ps aux | grep node` is not reporting extraneous processes.
",jtlapp,2016-09-16 15:48:45
921,2016-09-16 15:48:45,"I solved the problem. `node-debug` insists on taking a port, so let it have one. Then go use another port. For example:
1. Run the file-to-debug `node --debug=5859 debugme.js`.
2. Run node-inspector `node-debug` letting it take port 5858 (to debug itself ???).
3. Load `http://127.0.0.1:8080/?port=5859`.

Also, there is a bug in node's debugging server where it doesn't report the context of the first `--debug` breakpoint to the debugger client (see [my report](https://github.com/nodejs/node/issues/8565)). It works fine for `--debug-brk` though.
",jtlapp,2016-09-16 15:48:45
920,2016-09-13 18:08:14,"Using Node 6.3.0 (due to the issue with 6.5.0 and node-inspector) and node-inspector 0.12.8, when I use [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), it will show as undefined.

A test is simple:

<S_CODE_TOKEN>

Look at the variables and `foo` is `undefined`. If I use `node --inspect --debug index` and use Chrome I see `foo` as `Map`.

Screenshot what node-inspector shows:

![screen shot 2016-09-13 at 1 29 13 pm](https://cloud.githubusercontent.com/assets/325473/18485569/64a48270-79bb-11e6-922a-5d06483331d6.png)
",mitchellsimoens,
919,2016-09-13 08:23:34,"This PR intends to debug the node process running on the remote machine.
## :Test:
- option 1

<S_CODE_TOKEN>
- option 2

<S_CODE_TOKEN>
## :Notes:
- In this case, you cannot use the injection feature as node(v8) process
  is running on the remote machine.
- I added a condition not to enter the code cannot be runnable in this case.
  See. 'lig/PageAgent.js#_doGetResourceTree()'.
  In the function, it just return cb() without performing the intended jobs.
",sparkleholic,
918,2016-09-12 03:46:37,"It's kind of unclear if `node-debug script.js` should work on windows. Is it supposed to work?
In my case it does not work, I get this error:

<S_CODE_TOKEN>

while I get that error in console I get chrome-inspector started and I always get [this error there](http://i.imgur.com/zquGeUg.png).
",pps83,
918,2016-09-13 16:03:41,"just install a fresh version of node-inspector and I get the same error.

node version: 6.5.0
win7
",amelon,
918,2016-09-13 16:28:04,"The problem is here: https://github.com/node-inspector/node-inspector/blob/master/lib/InjectorClient.js#L98-L113

<S_CODE_TOKEN>

Test `if (!NM.length)` should call cb and return

<S_CODE_TOKEN>
",amelon,
918,2016-09-27 07:42:06,"@amelon how can i do this error?
",15920353089,
918,2016-09-27 08:06:48,"what do you mean?
",amelon,
918,2016-09-27 08:11:34,"just I see others:

Try this hack/workaround
Seek in /usr/lib64/node_modules/node-inspector/lib/InjectorClient.js (your location of node-inspector)
Look at
Function InjectorClient.prototype._getFuncWithNMInScope

Replace this

cb(null, result.handle);
with this

cb(null, result.constructorFunction.ref);
I have this message in node-ispector console tab

Internal error: TypeError: Cannot read property '0' of undefined
But breakpoints and other stuff works.
Tested with 6.6.0

P.s.
Seems node-inspector method for retrieval NativeModule link fails to handle -1 even with #906 or similar because this solves problem with response, but not with request.
You will recieve this message

Error: No NativeModule in target scope
and you will not able to go through breakpoints with node-inspector's UI.
",15920353089,
918,2016-10-27 19:12:24,"@15920353089 👍  This happens for me too following your hack.
",JasonKleban,
918,2016-10-30 19:27:19,"Same error for me using **node v7.0.0**, **node-inspector v0.12.8**:

<S_CODE_TOKEN>

Had to go back to using **devtool v2.2.0**,  **electron v1.3.3** and back to **node v6.3.0** with **chrome v52.0.2743.82** for now, where everything works correctly for debugging without any issues.
",sc0ttwad3,
918,2017-02-01 10:33:19,"Same issue for me:
- node 6.9.4
- node-inspector 0.12.8
- win7pro || win10

Using workaround above, with many thanks to 15920353089",Muzietto,
917,2016-09-08 15:16:35,"Excellent package!

One question, is it possible to restart the inspector on file changes? I am using nodemon to restart on file changes... ?
",ptrckhgr,
917,2016-10-19 01:42:00,"try

<S_CODE_TOKEN>
",bumaociyuan,
916,2016-09-04 16:01:02,"Node.js forks may accept unix sockets in their debug connection.
Make sure 'debugPort' is no longer treated as a Number but as a
plain string.
",chgeo,
915,2016-09-04 09:41:34,"when i want to debug promise method i get this error ...
node 5.3.0
node-inspector 0.12.8
chrome 52.0
I'm using promises 'blubird'
",derakhshanfar,
915,2016-09-11 07:26:02,"i still have this problem and i find better libary for debuging node application... iron-node ...its great
",derakhshanfar,
915,2016-09-15 12:59:30,"Same here...
",igorescobar,
914,2016-09-01 15:19:18,"When error is defined (in this case it means that NM is doen't have any elements) callback calling will be throwing an exception. Because in this case NM[0] is not defined. So we need to check the error variable.
",Kreozot,2017-01-19 10:39:42
914,2016-09-07 11:00:23,"I noticed this bug too, as I'm experiencing the error case. The fix looks OK to me.
",aknuds1,2017-01-19 10:39:42
914,2016-12-12 21:31:51,"Works for me with Node.js v6.8.1, doesn't crash when trying to attach. However get this error when trying to profile:
<S_CODE_TOKEN>

There may be more issues to support new Node.js versions.",braydonf,2017-01-19 10:39:42
914,2017-01-05 11:47:29,"https://github.com/facebook/nuclide/issues/673#issuecomment-270058908 mentioned this bug which causes failure of debugging React-Native app.

Please approve and merge.",vinceyuan,2017-01-19 10:39:42
914,2017-01-07 17:16:13,"@Kreozot I think we need to check if NM.length==0.
`cb(error, NM.length==0 ? null : NM[0].ref);`

This bug prevents me from debugging React Native project. Hope it will be merged soon and all react native developers will benefit.",vinceyuan,2017-01-19 10:39:42
914,2017-01-17 03:57:15,@Kreozot Please take a look at my previous comment.,vinceyuan,2017-01-19 10:39:42
914,2017-01-17 10:18:39,"@vinceyuan I don't see any difference between checking `error` (which defines when NM.length equals zero) and checking `NM.length` itself. Do you think that checking `NM.length` is more clear way?
",Kreozot,2017-01-19 10:39:42
914,2017-01-17 10:25:56,"By the way, @3y3, @bajtos, @dannycoates, is the project is abandoned? Any alternatives/forks? Any plans to transfer maintenance?",Kreozot,2017-01-19 10:39:42
914,2017-01-17 10:26:26,@Kreozot Yes. I think so. But you are right. Actually there is no difference in this context.,vinceyuan,2017-01-19 10:39:42
914,2017-01-17 10:28:53,Let's wait what the maintainers will say :),Kreozot,2017-01-19 10:39:42
914,2017-01-19 10:43:34,"Hello, while I am no longer actively involved with Node Inspector and thus I am not familiar with the current codebase, the fix looks reasonably to me. I have landed the patch.

> is the project is abandoned? Any alternatives/forks? 

In my opinion, the built-in `node --inspect` command is far more superior than `node-inspector` can ever become, I have personally switched long time ago. I believe the built-in inspector supports profiling too.

> Any plans to transfer maintenance?

I cannot speak for @3y3, but if there are volunteers, then I am myself happy to hand the maintenance over to them.",bajtos,2017-01-19 10:39:42
913,2016-09-01 05:02:57,"I'm trying to add debugging support to my program with embedded v8 and am trying to figure out what my options are. 

Is this library appropriate to be used without massive alterations to either the library or my program?

Thank you.
",xaxxon,
912,2016-08-31 08:44:24,"I tried to install node-inspector but it fails with the following output:

<S_CODE_TOKEN>

Node version is `v6.5.0` and OS is Arch Linux
",Mawalu,
911,2016-08-26 08:20:51,"![image](https://cloud.githubusercontent.com/assets/1300292/17998809/b9fd1a0a-6ba8-11e6-96e3-3f0fbf945e1e.png)

![image](https://cloud.githubusercontent.com/assets/1300292/17998755/8f14c374-6ba8-11e6-9ad1-ae924d699f6e.png)

Look two images above,that red block on the second image is not found on the first image.
So i can not debug EJS files with *.ejs suffix.
Can you help me?thanks a lot.
",pei-han,
911,2016-08-27 12:18:59,"It depends on where you're importing your views from. If it's a server-side rendered templates then you can probably view on the file that's importing from. 
Remember, templates are not really `js` they're just advanced string substitution. 
",shri3k,
911,2016-08-27 13:32:46,"@shri3k Thx so much.
I use Express MVC library.The view engine of Express is EJS.
I try to add node.js built-in debugger statement to EJS template.At this  moment,i can break on this breakpoint,but i can not add other breakpoints by clicking siderbar in mouse's left key.
Do you understand what i say?Can you help me?Thx.
",pei-han,
911,2016-09-02 16:38:52,"Sorry @pei-han. Didn't see this reply. I wouldn't call it Express as an MVC library but rather an http framework. Also, you can pick whichever view engine in express, totally up to you. Like I was saying in my previous reply, you're more likely to see [`response.render('your_view_name' , {some:'data'})`](http://expressjs.com/en/advanced/developing-template-engines.html) rendering on your server-side. You could technically put a breakpoint there and `step in` via `node-inspector` to see what's going on but other than that I haven't seen a clearer way to debug templates (which is possibly why you see people recommend you to not put your app logic in templates if at all possible).
",shri3k,
910,2016-08-25 04:25:01,"I Found issues for prev versions #461, #522, #638 
but seems  it's happend again

<S_CODE_TOKEN>

Node Inspector v0.12.8
Node v4.2.2
",gmixo,
909,2016-08-24 19:18:25,"I'm using node inspector for debug, when I have an mssql connection to Microsoft SQL database with new version xml2js 0.4.16 thrown an error with Time out period.
Thanks
 ""mssql"": ""^2.3.1""
  ""xml2js"": ""0.4.16""

Thanks
",lucianoybanez,
908,2016-08-22 13:04:06,"There's a [great outdated project](https://github.com/anandthakker/debugger-api) that builds upon `node-inspector` allowing programmatic access to debugger. This approach is fragile. Are there any plans to support this in `node-inspector` itself? Such API would be useful to make more complex tests, build tools for test coverage and algorithm visualization.
",polkovnikov-ph,
907,2016-08-19 23:36:03,"Doing `node-debug src/app.js`

The immediate feedback from the terminal is :

<S_CODE_TOKEN>

After chrome automatically launches and tries to display the page, the chrome windows show this error message:

""Detached from the target. Remote debugging has been terminated with reason: websocket_closed. Please re-attach to the new target.""

And the console shows this error:

<S_CODE_TOKEN>

I've searched everywhere for a solution to this problem and haven't found one. I hope you can be of assistance!
",bdanmo,2016-08-25 01:24:38
907,2016-08-20 03:21:49,"Precisely the same problem I just ran into. Can find nothing.

The only information I have to add is that I used to use node-inspector successfully on node 4. I recently updated to node 6, and this is the first time I've tried to use node-inspector since then.
",InfinitiesLoop,2016-08-25 01:24:38
907,2016-08-20 03:23:15,"Ah I think this is a dup of:
https://github.com/node-inspector/node-inspector/issues/905

Which seems to indicate it's a problem with node 6.4. Workaround is to downgrade to 6.3.1.
",InfinitiesLoop,2016-08-25 01:24:38
907,2016-08-24 23:42:33,"# +1
",bertolo1988,2016-08-25 01:24:38
907,2016-08-25 01:23:41,"@InfinitiesLoop Right you are, thanks for that!
",bdanmo,2016-08-25 01:24:38
907,2016-08-25 09:28:50,"I fixed my problem by downgrading node from 6.4 to 6.3.1.
Why is this closed?
",bertolo1988,2016-08-25 01:24:38
907,2016-08-25 13:34:32,"@bertolo1988 As stated above, this is a duplicate of #905
",superclarkk,2016-08-25 01:24:38
907,2016-08-26 08:36:50,"I can still reproduce it with v6.3.1 :( on linux

<S_CODE_TOKEN>
",przemuh,2016-08-25 01:24:38
907,2016-08-27 11:17:54,"@przemuh Downgrading to 6.3.1 worked for me on Ubuntu 14.04
",olavk,2016-08-25 01:24:38
907,2016-09-07 00:34:44,"Still broken in 6.5.0!?!  The downgrade to 6.3.1 makes debugging the VM work.
Any idea why it's not working, what can be done, when I/we can debug/use nodejs current version again?

Using the experimental built in node --inspect --debug app.js ""Inspect"" argument with node-inspector uninstalled, but with this downgrade connects but no source shown from outside of server VM? so that's currently useless in 6.5.0 too.
",MasterJames,2016-08-25 01:24:38
907,2016-09-10 05:38:40,"Downgrading from 6.5.0 to 6.3.1 fixed it for me as well. 
",durrellchamorro,2016-08-25 01:24:38
907,2016-09-16 00:33:41,"Same issue here on 6.6.0.  I downgraded to 6.3.1 and it works.
",leisenstein,2016-08-25 01:24:38
907,2016-09-19 02:22:20," I downgraded to 6.2 and it works.......
",asdj07,2016-08-25 01:24:38
907,2016-09-21 09:57:05,"+
",isdenya,2016-08-25 01:24:38
907,2016-10-03 05:08:18,"6.7 and still broken
",boyangwang,2016-08-25 01:24:38
907,2016-10-03 18:10:30,"Same problem using 6.7, 6.3.1 and 6.2
",tiagolr,2016-08-25 01:24:38
907,2016-10-04 02:08:05,"Who here has a clue? either where is the problem or who do we tag to get some direction.
My guess is there's a concern that it should work for the most production ready version and the latest greatest is deemed too unstable.
If so I'm thinking how do we have version specific patches or whatever? 
",MasterJames,2016-08-25 01:24:38
907,2016-10-05 18:45:28,"I downgraded to node 4.6 after not being able to debug, and am having the same issue.
",alienatorZ,2016-08-25 01:24:38
907,2016-10-05 19:20:19,"In linux I opened with Chrome (not Chromium) and ran node-debug  with sudo and it worked!
",alienatorZ,2016-08-25 01:24:38
907,2016-10-07 13:38:29,"Same problem using vs 6.6.0, 6.4.0, 6.3.1
",ughitsaaron,2016-08-25 01:24:38
907,2016-10-11 08:04:10,"Same problem with 6.6 downgraded to 6.3.1 and issues seems to disappear, though node-inspector won't load files.
",jmzwar,2016-08-25 01:24:38
907,2016-10-14 08:38:26,"I have the same problem.
nodejs version is v6.8.0, the node-inspector version is v0.12.8 and my OS is macos Sierra(10.12).
how to solve it please?

<S_CODE_TOKEN>
",dacuotecuo,2016-08-25 01:24:38
907,2016-10-14 16:04:25,"Same issue with node v6.5.0
can be solved like this :

Edit ...\node_modules\node-inspector\lib\InjectorClient.js file at line 111
      if(NM.length > 0)
        cb(error, NM[0].ref);

It works
",asi-jmasson,2016-08-25 01:24:38
907,2016-10-15 13:11:52,"The above will cause the callback to not be invoked. It should be
if (NM.length > 0)
  cb(error, NM[0].ref);
else
  cb(error, null);

But, even then it still fails with ""No NativeModule in target scope"".

;)
",dbreese,2016-08-25 01:24:38
907,2016-10-16 12:18:53,"same here 
node v6.8.1
Node Inspector v0.12.8
",VladislavAnkudinov,2016-08-25 01:24:38
907,2016-10-19 00:59:32,"I have encountered the same bug.
node v6.9.0 LTS
node-inspector v0.12.8

The project dependencies include the below:
    ""artikcloud-js"": ""2.0.2"",
    ""babel-polyfill"": ""^6.13.0"",
    ""body-parser"": ""^1.13.1"",
    ""body-parser-xml"": ""^1.1.0"",
    ""canvas"": ""1.5.0"",
    ""cheerio"": ""^0.19.0"",
    ""compression"": ""^1.6.1"",
    ""connect"": ""^3.4.0"",
    ""connect-busboy"": ""0.0.2"",
    ""connect-flash"": ""^0.1.1"",
    ""connect-multiparty"": ""^1.2.5"",
    ""connect-redis"": ""^3.1.0"",
    ""connect-static"": ""^1.5.0"",
    ""connect-timeout"": ""^1.6.2"",
    ""continuation-local-storage"": ""^3.1.4"",
    ""cookie-parser"": ""^1.3.5"",
    ""cookie-session"": ""^1.2.0"",
    ""cookies"": ""^0.5.0"",
    ""cors"": ""^2.7.1"",
    ""csurf"": ""^1.8.3"",
    ""dateformat"": ""^1.0.11"",
    ""ddos"": ""^0.1.11"",
    ""domain"": ""0.0.1"",
    ""ejs"": ""^2.3.2"",
    ""express"": ""^4.13.0"",
    ""express-partials"": ""^0.3.0"",
    ""express-session"": ""^1.11.3"",
    ""follow-redirects"": ""0.0.7"",
    ""http-framework"": ""^1.2.0"",
    ""js-throttle-debounce"": ""^0.1.1"",
    ""keygrip"": ""^1.0.1"",
    ""log4js"": ""^0.6.26"",
    ""method-override"": ""^2.3.3"",
    ""mojio-js"": ""^3.5.2"",
    ""mongodb"": ""^2.1.0-alpha"",
    ""mongoose"": ""^4.1.1"",
    ""msgpack-js"": ""^0.3.0"",
    ""multer"": ""^0.1.8"",
    ""mysql"": ""^2.8.0"",
    ""nconf"": ""^0.8.2"",
    ""nodemailer"": ""^2.2.1"",
    ""nodemailer-smtp-transport"": ""^2.4.1"",
    ""passport"": ""^0.3.2"",
    ""passport-local"": ""^1.0.0"",
    ""q"": ""^1.4.1"",
    ""qs"": ""^4.0.0"",
    ""query-types"": ""^0.1.4"",
    ""raw-body"": ""^2.1.1"",
    ""redis"": ""^0.12.1"",
    ""response-time"": ""^2.3.1"",
    ""sequelize"": ""3.24.3"",
    ""serve-favicon"": ""^2.3.0"",
    ""serve-index"": ""^1.7.0"",
    ""serve-static"": ""^1.10.0"",
    ""socket.io"": ""1.5.0"",
    ""socket.io-adapter"": ""^0.4.0"",
    ""socket.io-parser"": ""^2.2.6"",
    ""source-map-support"": ""^0.4.0"",
    ""st"": ""^0.5.4"",
    ""text-table"": ""^0.2.0"",
    ""uid2"": ""0.0.3"",
    ""umzug"": ""^1.8.0"",
    ""underscore"": ""^1.8.3"",
    ""vhost"": ""^3.0.1""
",stuartZhang,2016-08-25 01:24:38
907,2016-10-19 01:29:41,"I have traced the node-inspector program by console.log(...). I guess that the reason of the bug is to missing a folder ""node-**v48**-linux-x64"" under the directory ""/usr/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.1"".

In my Linux box, the maximum node-version number is ""node-**v47**-linux-x64"".
",stuartZhang,2016-08-25 01:24:38
907,2016-10-19 01:54:17,"Are people using some kind of alternative to this? is this project dead or obsolete?
Did that BM.length patch work or not? It's unclear without a proper PR submitted.
",MasterJames,2016-08-25 01:24:38
907,2016-10-19 02:16:31,"Here this does work despite the console error!
https://github.com/node-inspector/node-inspector/pull/938
Can someone reopen this or AT the right person to merge it, thanks?
",MasterJames,2016-08-25 01:24:38
907,2016-10-21 06:10:18,"my problem can also be solved like this :

Edit ...\node_modules\node-inspector\lib\InjectorClient.js file at line 111
if(NM.length > 0)
cb(error, NM[0].ref);

It works well!!!
",dacuotecuo,2016-08-25 01:24:38
907,2016-10-23 08:05:22,"same problem with node v6.9.1.

thanks dacuotecuo for trick...that worked for me.

though i wanna ask is there a perfect solution for this?
",srkkhan,2016-08-25 01:24:38
907,2016-10-23 20:50:04,"The patch in the PR works but just delete uninstall it and use the inregrated node --inspect flag. Further more you may use 6.3.1 to debug and then latest to deploy etc.
I've used this ""n"" tool to install vestions of nodejs which is another thing to consider and worth mentioning.
",MasterJames,2016-08-25 01:24:38
907,2016-10-26 03:28:22,"Same issue with node v7.0.0 and Node Inspector v0.12.8
next time i will try node v6.3.1.
",iceprosurface,2016-08-25 01:24:38
907,2016-10-26 03:49:40,"<S_CODE_TOKEN>

It work in node v6.1.0 and Node Inspector v0.12.8,my OS is macos EI Caption(10.11).
",iceprosurface,2016-08-25 01:24:38
907,2016-10-26 05:04:05,"There is more to that in the thread?!
1). Use the --inspect flag of node.
2). Insert the patch.
",MasterJames,2016-08-25 01:24:38
907,2016-10-28 20:39:48,"I have the same problem and I wrote the code in the line 111 of `~/node_modules/node-inspector/lib/InjectorClient.js`:

<S_CODE_TOKEN>

It's working!  :heart:
",jfbaquerocelis,2016-08-25 01:24:38
907,2016-10-29 03:35:28,"i have same problem ,node v6.6.0  and node inspector v0.12.8 and centos 7
wrote the code in the line 111 of 

## /usr/lib/node_modules/.node-inspector_npminstall/node_modules/.0.12.8@node-inspector/lib/InjectorClient.js

### 

`if(NM.length > 0)`

it's working!!!!!
",ZinLeo,2016-08-25 01:24:38
907,2016-10-29 15:10:50,"@ZinLeo send pull request please!
",bertolo1988,2016-08-25 01:24:38
907,2016-10-31 20:16:57,"+1
",c0bra,2016-08-25 01:24:38
907,2016-11-01 10:42:39,"The aforementioned solutions do not work in my environment. Got this setup:
Node version: 6.9.1
Node Inspector version: 0.12.8

With the if-fix the debugger just stops and waits with an empty dev tools window in chrome.

Testing a very simple node module with one 'debugger' statement inside. This used to work with an older version of Node.js.
",miroslawmajka,2016-08-25 01:24:38
907,2016-11-02 03:36:04,"I use Node version 6.9.0 , Node Inspector Version 0.12.8 and os is Windows 10, have this problom
",D-soldier,2016-08-25 01:24:38
907,2016-11-02 05:37:13,"+1
",sangwook-kim,2016-08-25 01:24:38
907,2016-11-03 11:12:44,"pull request: 

https://github.com/node-inspector/node-inspector/pull/932
",brownman,2016-08-25 01:24:38
907,2016-11-03 17:35:44,"I've tried the fix with node 6.9.1, the error disappears but the problem still remains since the console shows:

`Error: No NativeModule in target scope`

If the binary for node 48 is not there is not gonna work....
",martip-sainsburys,2016-08-25 01:24:38
907,2016-11-07 09:08:45,"I think node-inspector isn't updated anymore because node has that functionality built in now. Run node --inspect yourApp.js. This worked for me.
",gottfired,2016-08-25 01:24:38
907,2016-11-12 13:01:42,"node version 6.9.1 still broken
",wujunchuan,2016-08-25 01:24:38
907,2016-11-14 10:05:38,"node version 6.9.1 still broken
",ccqgithub,2016-08-25 01:24:38
907,2016-11-14 10:20:02,"node version 6.9.1 still broken me too
",errord,2016-08-25 01:24:38
907,2016-11-14 12:18:56,"@ccqgithub @errord 

Maybe node with higher version(6.9.1) built in inspect, and `node-inspect` don't update longer..
**solution**:use `node --inspect yourapp` replace `node-inspect & node --debug yourapp`
It worked for me.
",wujunchuan,2016-08-25 01:24:38
907,2016-11-14 13:01:08,"@wujunchuan that's true, very thanks ……
",ccqgithub,2016-08-25 01:24:38
907,2016-11-14 16:37:44,"@ccqgithub Use `node --inspect --debug-brk yourapp` to force the app to pause and wait so you have time to copy the chrome link.
",bertolo1988,2016-08-25 01:24:38
907,2016-11-15 09:28:59,"This is a  syntax bug, why not fix it
",lovemybb,2016-08-25 01:24:38
907,2016-11-16 17:47:19,"Same problem. Can't find a solution. Tried using node's built-in inspector, but the code never shows up in the window despite running, and no errors are shown. 

Is there any working debugger for node?
",Elliot128,2016-08-25 01:24:38
907,2016-11-20 04:49:03,"Downgrading from 6.9.1 to 6.3.1 worked for me too.
But still after so many releases , problem continues :( 👍 
",chandrajob365,2016-08-25 01:24:38
907,2016-11-27 23:32:13,I am having the same issue. Using node v6.9.1 and node-inspector version v0.12.8,ppalladino,2016-08-25 01:24:38
907,2016-11-28 09:33:43,"@wujunchuan worked for me, on node 6.9.1. great

<S_CODE_TOKEN>
",Vlandmist,2016-08-25 01:24:38
907,2016-11-29 11:35:04,@wujunchuan Worked like a charm! Thanks!!!,ppalladino,2016-08-25 01:24:38
907,2016-12-02 23:13:02,"node 6.9.1 with node-inspector 0.12.8 on Ubuntu 16.04 was broken for me too.
Had to use nvm to switch to node 6.3.1 THEN install node-inspector, then ` node-debug --debug-brk app.js` worked.
yowzers.",kingnebby,2016-08-25 01:24:38
907,2016-12-08 21:00:29,"@elliotatRetireup I can't see code either, it's just, blank. Did you figure anything out?",scniro,2016-08-25 01:24:38
907,2016-12-10 21:55:00,Downgrading to 6.3.1 worked for me,ccnixon,2016-08-25 01:24:38
907,2016-12-17 09:31:00,@wujunchuan node --inspect app.js works well! Thanks!,jonchenn,2016-08-25 01:24:38
907,2016-12-19 16:59:12,Why is this ticket closed? Still having this problem in node `6.9.2`. ,replete,2016-08-25 01:24:38
907,2016-12-19 23:15:45,"@scniro 

Sorry its been a while. I had trouble using the node-inspect module, so I updated node to use the built-in v8 debugger released in [6.3.0](https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V6.md#2016-07-06-version-630-current-fishrock123).

Using the v8 debugger, I then ran into an issue where the dev-tools were loading but no code was loading. This was because I had my hosts files mapping localhost to a different address than default. I changed this mapping and then `--inspect` or `--inspect --debug-brk` worked.

Further, it seems that there has been an update to node in [6.9.2](https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V6.md#2016-12-06-version-692-boron-lts-thealphanerd) to resolve that problem I had with inspector by having inspector now prompt user to use 127.0.0.1 rather than localhost.",Elliot128,2016-08-25 01:24:38
907,2016-12-19 23:29:27,"@Elliott128 I have the issue with built in debugger (no code in chrome) and I haven't remapped localhost.

How is anyone debugging Node with both of these problems??? 

Switching node versions constantly is not practical",replete,2016-08-25 01:24:38
907,2016-12-30 15:06:41,How does this new inspect work for things like mocha?,jrgleason,2016-08-25 01:24:38
907,2016-12-30 15:08:10,nm `mocha --debug-brk mocha-runner.js` worked,jrgleason,2016-08-25 01:24:38
907,2017-01-23 15:45:53,"Node 6.9.1 and node-inspector 0.12.8

 it works following these steps:
     1-  open a command prompt and run the following command:
	node-inspector --web-port=3030 (server app port)
     2- open another command prompt and run the following command:
	node --inspect --debug-brk server.js
     3- browse to the given URL in the second command prompt log on screen
     4- press F8 to make the server run
     5- eventually put some others breakpoints
     6- browse on another tab to your app (address and port defined in 1-)
     7- see server execution stops on breakpoints defined on step 5-",Pierre-LoanJ,2016-08-25 01:24:38
907,2017-02-10 16:49:38,node --inspect app.js is the correct answer. Many thanks to everyone who suggested it!,wsrast,2016-08-25 01:24:38
907,2017-02-12 18:28:21,"I have set up the debugging after @Pierre-LoanJ description or I just use node --inspect app.js. Everything looks good so far. I can debug the first start in the app.js. But if I want to debug an endpoint with POSTMAN, I get the error ""Cannot POST /api/trainingsWeek"". The endpoint works if I don't debug.

Do I have to take another address? Or anoter tool than POSTMAN?

![first](https://cloud.githubusercontent.com/assets/25726457/22864836/f128370e-f158-11e6-827f-5e4f73e5e232.JPG)
![second](https://cloud.githubusercontent.com/assets/25726457/22864837/f12ae2a6-f158-11e6-90aa-de0a5ecb13c9.JPG)
![third](https://cloud.githubusercontent.com/assets/25726457/22864838/f141e42e-f158-11e6-8a03-b9acebd07d7a.JPG)",ddg86,2016-08-25 01:24:38
907,2017-02-13 20:23:09,"+1 for @ddg86 got the same issue and need to solve this....
",BigPun86,2016-08-25 01:24:38
907,2017-02-16 19:07:25,Same issue for node version 7.5.0,suhailgupta03,2016-08-25 01:24:38
907,2017-02-17 03:17:06,same issue for node 6.9.2,juanlet,2016-08-25 01:24:38
907,2017-02-17 10:57:53,"It is running. Maybe someone did the same stupid mistake. @BigPun86  @suhailgupta03  @juanlet 

I just used the wrong file and after some research my launch.json was buggy. I am working with Express now and the server set up and the Express set up is devided in two files app.js and www.js. You need to use the www.js as the starting point for debugging.

I use VS Code to debug. To get it running, open your project and the debug view. There should be no configuration available. Click on the little wheel -> choose node.js as the environment

![image](https://cloud.githubusercontent.com/assets/25726457/23062745/4eb9e032-f507-11e6-88dd-2d3af193f070.png)

After that the standard json will be created and looks like this.

![image](https://cloud.githubusercontent.com/assets/25726457/23062809/9930c98c-f507-11e6-86ab-ab0205d4b88e.png)

And then click on the play button with the selection start programm. With that the debugging should run. Now you can use POSTMAN with the same url when you just run your server and the debugger from VS Code should hit your breakpoint.
",ddg86,2016-08-25 01:24:38
907,2017-03-04 04:37:07,"It was not working on Node v.7.6.0.
I did edit that @dacuotecuo recommended in the comments and it works now.",majd-kho,2016-08-25 01:24:38
907,2017-03-06 21:39:30,Same issue on 6.9.1; about the 6th time I've tried to use this tool over the last few years with exactly the same result. I've just moved on and using [devtool](https://github.com/Jam3/devtool) as it actually works.,tomccabe,2016-08-25 01:24:38
907,2017-03-17 23:28:15,https://twitter.com/wesbos/status/839871649738555393,june07,2016-08-25 01:24:38
906,2016-08-18 15:36:50,"Fix error handling
",lynx1983,
906,2016-11-18 10:08:49,"@lynx1983 this only partially fix the problem. Because all my http requests to the node server will hang until timeout. Like i put a breakpoint somewhere, but i didnt.
",tsm91,
905,2016-08-16 23:00:13,"First time using node-inspector. Here's my setup:

<S_CODE_TOKEN>

My simple test file:

<S_CODE_TOKEN>

Firing up the debugger throws exception:

<S_CODE_TOKEN>
",westhomas,
905,2016-08-17 04:27:37,"same issue here, in my case happens when I run Jest:

node-debug node_modules/jest-cli/bin/jest.js -i

Node Inspector v0.12.8
Visit http://127.0.0.1:8080/?port=5858 to start debugging.
Debugging `node_modules/jest-cli/bin/jest.js`

Debugger listening on [::]:5858

/usr/local/lib/node_modules/node-inspector/lib/InjectorClient.js:112
      cb(error, NM[0].ref);
                     ^
TypeError: Cannot read property 'ref' of undefined
    at InjectorClient.<anonymous> (/usr/local/lib/node_modules/node-inspector/lib/InjectorClient.js:112:22)
    at /usr/local/lib/node_modules/node-inspector/lib/DebuggerClient.js:121:7

I've already checked, the NM object is an empty array
",javfindly,
905,2016-08-17 20:49:06,"I've the same issue, exception are thrown when connecting browser to :8080 port.

I think problem is related to node version, all works with node@6.3.1 and start failing when updated to node@6.4.0

All start working again after rolling back node to 6.3.1
",maherma-adg,
905,2016-08-19 05:23:59,"I landed here after spending several hours trying to make things working.

Windows 7, Node 6.4.0 - x64 version.

When, after running node-inspector (or node-debug, or node --debug-brk, etc) I tried to go to the given address (with the GUI debugger with those devtools), the node proccess (and node-inspector proccess, if it was run separately) was crashing. No matter what I tried to do to solve it (downgrading node-inspector included).

In the cmd, the stack trace wasn't really helpful (some exceptions from events.js and something about TCP, sorry, didn't save them). I think they were the same as in javfindly's post.

From the browser, I could only learn that it had something to do with closed websocket and the inspector didn't worked at all (it was empty and console didn't work as well).

After using lynx1983's fix, I also noticed:

""No NativeModule in target scope.""

After all, I downgraded Node to 6.3.1 and it's working.
",pjww,
905,2016-08-19 22:16:39,"Same problem
",LeandroFavero,
905,2016-08-20 20:41:28,"I also have run into this issue.

code is looking for a property with name == ""NativeModule"" but on my machine it returns an array of the following properties for refs[result.object.ref].properties

[ { name: 'inspectorConsole', propertyType: 0, ref: 3 },
  { name: 'wrapConsoleCall', propertyType: 0, ref: 3 },
  { name: 'console', propertyType: 0, ref: 3 } ]

The error handling is not working in this area because NM[0] is an invalid reference based on the exclusion of NativeModule in the properties array...

<S_CODE_TOKEN>
",Virtual-Machine,
905,2016-08-21 06:40:37,"Not necessarily a good long term fix, but I worked around the problem with the following change to `node-inspector/lib/InjectorClient.js`:

<S_CODE_TOKEN>

The debugger loads successfully and I am able to debug my code.
",brannon,
905,2016-08-22 02:36:18,":+1: 

Downgrade to 6.3.1 helps. This is a regression,
",polkovnikov-ph,
905,2016-08-24 21:44:14,"For anyone using homebrew and trying to get back to node 6.3.1 after you've already done a cleanup you can re-install 6.3.1 with:

<S_CODE_TOKEN>

and then switch with:

<S_CODE_TOKEN>
",ding444,
905,2016-08-26 21:57:44,"Small addition to the above code - I had to unlink node first, then I could install and switch to 6.3.1.
`brew unlink node`
",thombaynes,
905,2016-08-30 06:18:18,"Strangely, I see this with Node `v6.2.1`?

Meanwhile, has anybody tried @lynx1983's [patch](https://github.com/lynx1983/node-inspector/commit/3a26df74) referenced above?

*_Edit_: Nope, no such luck. /= I just get the expected “No NativeModule in target scope” instead of an actual crash; but that's not more helpful. Agh!

Well, thank god for `nvm`: `nvm install v6.3.1`, problem solved. For now.
",ELLIOTTCABLE,
905,2016-08-30 11:39:21,"Same problem in 6.5.0
",LeandroFavero,
905,2016-09-04 11:20:17,"I succeeded with this ticket.

Simply, 
yum remove nodejs
yum install nodejs-6.3.1
worked for me. I use OEL 6.7 ( derivation of Redhat Enterprise Linux )
",FJplant,
905,2016-09-07 11:06:36,"Also fails for me. Node 6.5.0, Node Inspector v0.12.8 on OS X.
",aknuds1,
905,2016-09-07 11:09:50,"Maybe this issue should be split into two, as it addresses two separate bugs? One is the bad handling of the error case, the error being that NativeModule isn't found. PR #914 fixes the first one, so it would definitely help to have an issue dedicated to the second bug.
",aknuds1,
905,2016-09-07 11:14:27,"Those running 6.5.0 can use native node for the same purposes. It's an experimental feature, but it works fine for me.

`node --inspect --debug-brk my-app.js`.

Read more [here](https://nodejs.org/api/debugger.html#debugger_v8_inspector_integration_for_node_js).
",kmkr,
905,2016-09-07 22:33:46,"Thanks @kmkr but --inspect appears broken if you use the cluster API to fork workers, beware...
",gae123,
905,2016-09-08 07:32:24,"@kmkr

No they can't. `node --inspect` doesn't work on Windows 64 yet
",wzup,
905,2016-09-09 19:21:18,"@wzup solution: stop using windows.
",timothyerwin,
905,2016-09-10 00:01:32,"Same issue.
OS: Ubuntu 15.10

<S_CODE_TOKEN>

Also using node 6.5.0 & npm 3.10.3 with linux brew. My colleague is using Ubuntu as well but nvm with same node/npm releases as mine.  Same issue.

The hack @brannon suggested works for me for now.
",odnarb,
905,2016-09-10 19:25:51,"Same problem with Node 6.5.0 on OSX El Capitan (Ver 10.11.6).
Downgrading to 6.3.1 did not solve the problem!!

<S_CODE_TOKEN>
",santanu-biswas,
905,2016-09-11 20:52:56,"same problem here with:

<S_CODE_TOKEN>

i run node via nvm, with version 4x and 5x its working:

<S_CODE_TOKEN>

but crashes on current 6x with

<S_CODE_TOKEN>
",ellerbrock,
905,2016-09-14 21:07:12,"node-inspector is the most popular debug tool for Node. Based on statistic, more than 10k downloads in the last day.
This open critical issue prevents using node v6.5.0 for developers.
I really appreciate Your debug framework and all effort by node-inspector developers but more than 29 days delay to provide solution is not fair. I'm sorry!
",bhevesi,
905,2016-09-15 12:44:08,"Same issue here: 

Node version: v6.5.0
Npm version: 3.10.6
Node Inspector v0.12.8

 cb(error, NM[0].ref);
                     ^
TypeError: Cannot read property 'ref' of undefined
",CarlosLanderas,
905,2016-09-18 07:58:55,"This is blocking issue!!! but seems like the team doesn't notice it. @3y3 
",e-cloud,
905,2016-09-18 14:56:46,"Same here Windows x64
Node : 6.6.0

Downgrade is not a solution for me! Hope it's gone be fixed soon...
",loic294,
905,2016-09-20 08:29:36,"same on win10
node v6.5.0
",tarol,
905,2016-09-20 12:35:47,"The lastest release was in April 8. I don't know the future about node-inspector, but I believe that will die. Because NodeJS incorporated the inspector. Try this using 6.6.0:
node --inspect index.js

It's the same, but integrated and faster, really faster!!!
",LeandroFavero,
905,2016-09-20 12:51:55,"@LeandroFavero The problem is that hype on Node.js is over, and a lot of temporary solutions became permanent due to the lack of professional developers. Unfortunately `--inspect` is unstable and doesn't work for most of the interested users. I would expect `node-inspector` to disappear the same time as `node-gyp` would get Unicode support and drop Python from dependencies.

For the future commenters: consider using emoji reactions if you have the same setup as previous reporters. There're 2 messages a day with the same content, and it's annoying.
",polkovnikov-ph,
905,2016-09-20 15:22:35,"@polkovnikov-ph why are you saying stuff like that? lack of professional developers? what is that based on? `--inspect` is new so they still need to patch it up. yes, it sucks that debugging isn't working out right now but they'll get it straightened out. it's unstable because the hype is real.
",timothyerwin,
905,2016-09-20 21:46:43,"im using windows 10 with node 6.6(before) ..

to solve this I uninstalled node and 
downloaded node 4.5 from the official nodejs site 

hope this helps someone
",fcvidoto,
905,2016-09-21 13:41:26,"node 6.6.0
mocha 2.5.3
same error...
",bbones,
905,2016-09-21 19:52:42,"Same issue
win10
node v6.5.0
",adrian-moisa,
905,2016-09-22 01:29:58,"I also have the same issue on win10
node v6.6.0
",fignuts,
905,2016-09-22 03:03:58,"@fignuts but what version of node.js are you using?
",polkovnikov-ph,
905,2016-09-22 08:39:00,"same issue here, running in OSX, node v6.5.0
",hlandao,
905,2016-09-22 10:25:54,"Same issue on Debain,
Node.js: v6.4.0
NPM: 3.10.3
Node Inspector v0.12.8

<S_CODE_TOKEN>

It works on node v6.3.1
",code-guru,
905,2016-09-23 07:10:34,"Just in case someone misses it; #906 fixes this problem. You can patch your installed copy to get it working while waiting for the next release.
",hgwood,
905,2016-09-23 08:13:11,"@hgwood, nope, it doesn't fix the real problem. It just fix the uncatch error to output it properly. If you apply the fix, node-inspector will throw another error(`No NativeModule in target scope`)
",e-cloud,
905,2016-09-23 08:29:28,"Well yes, it does throw that error, but only once it has started, in its console. I can still step through my code, which I could not do before.
",hgwood,
905,2016-09-23 09:40:12,"In my case, with that error no more debugging. I don't know what's the problem though :(.
",e-cloud,
905,2016-09-24 04:12:36,"See hack/workaround solution https://github.com/node-inspector/node-inspector/issues/928#issuecomment-249343838
",vird,
905,2016-09-24 12:15:08,"Comment out line 111, it works!
![image](https://cloud.githubusercontent.com/assets/1445770/18808394/8686a2b6-8293-11e6-8250-7db3626d21f5.png)
",yinhongyan,
905,2016-10-03 06:44:06,"Same issue here -- node 6.7.0. Commenting out line 111 gets thinks working again as workaround. Thanks for suggesting!!
",rolanday,
905,2016-10-04 15:02:47,"Tried upgrading to `6.7.0` in hopes this would be resolved. Still broken. `6.3.1` is the last working version for me on Win 10 Anniversary.
",benduran,
905,2016-10-05 15:42:07,"I don't understand why or how downgrading node version could solve the issue because [this code](https://github.com/node-inspector/node-inspector/blob/master/lib/InjectorClient.js#L108-L111) is clearly bugged.

Of course if `NM.length` is `0` any access to its inexistent indexes properties like `NM[0].ref` would fail.

Accordingly, before even thinking about a possible PR, what should actually happen when `NativeModule` is not found? A warning? Another attempt? Would passing the `error` and just `null`, instead of throwing an error, be appropriate?
",WebReflection,
905,2016-10-06 04:26:29,"Instead of commenting out. Fixed the issue with using:
`cb(error, NM[0] && NM[0].ref);`
",jeduden,
905,2016-10-06 08:08:23,"I've done the same but I don't know side effects, which is why I've asked
what should happen. Also a PR would be better

On Thursday, 6 October 2016, jeduden notifications@github.com wrote:

> Instead of commenting out. Fixed the issue with using:
> cb(error, NM[0] && NM[0].ref);
> 
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/905#issuecomment-251864127,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAFO9dj1PcF2i5dZJiOE40vKKE9Aim0kks5qxHh9gaJpZM4Jl714
> .
",WebReflection,
905,2016-10-07 13:40:56,"Broken here too. Node 6.7.0 + MacOS Sierra. 

Debugger listening on [::]:5858
/usr/local/lib/node_modules/node-inspector/lib/InjectorClient.js:111
      cb(error, NM[0].ref);
                     ^

TypeError: Cannot read property 'ref' of undefined
",raiteki,
905,2016-10-19 02:17:21,"Here is a Pull Request to patch this ASAP
https://github.com/node-inspector/node-inspector/pull/938
",MasterJames,
905,2016-10-19 06:46:44,"I've done a PR too but apparently nobody is maintaining this repo.

On Wednesday, 19 October 2016, Master James notifications@github.com
wrote:

> Here is a Pull Request to patch this ASAP
> #938 https://github.com/node-inspector/node-inspector/pull/938
> 
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/905#issuecomment-254692227,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAFO9cDZ2ALnyMIv0xiOAuugaorqtwvqks5q1X25gaJpZM4Jl714
> .
",WebReflection,
905,2016-10-19 08:12:20,"Note that some (all?) node-inspector features are now built into Node: https://github.com/nodejs/node/pull/6792. See the `--inspect` command-line option.
",hgwood,
905,2016-10-19 09:02:04,"@WebReflection It's a bit strange to agree with you, but you're totally correct. It was at least 2 months without a word from a maintainer. The last commit was in April. Looks like native Node's support is anticipated for a long time.
",polkovnikov-ph,
905,2016-10-19 23:54:52,"Okay I thought there must be something else people are using now. That makes sense, thanks.
`node --inspect your.js`
seems to be integrated now.
[note: you'll wanna uninstall node-inspector now then.]
",MasterJames,
905,2016-10-20 20:53:31,"Also - add the ""--debug-brk"" option to ""--inspect"" and the debugger will pause execution until after you connect:

`node --inspect --debug-brk your.js`

You can then start execution from inside the debugger (after setting any necessary breakpoints).
",joelkoz,
905,2016-11-03 15:13:19,"Using `node --inspect` is not really a solution for everyone, for instance I am trying to debug an already alive process sending it a `USR1` signal to activate debug port

AFAIK this is not supported yet.
",colthreepv,
905,2016-11-17 12:04:29,"Beating the dead horse here but we had to go back to Node v.4.6.1 to get node-inspector working again. This is the setup:

Windows 10
Node v.4.6.1
Npm: 2.15.9
Node Inspector v.0.12.8

This setup works as of today and unless there is an explicit message in the Node or the Inspector changlog one day saying that they fixed this spcific issue we are sticking with this setup. Here's the download link for the old Node if anyone wants it: [v.4.6.1](https://nodejs.org/dist/v4.6.1/node-v4.6.1-x64.msi).
",miroslawmajka,
905,2016-11-17 12:11:23,"@miroslawmajka FYI `6.3.1` should work too. It's the latest version of node 6 that wasn't instantly crashing.
",WebReflection,
905,2016-11-24 01:46:56,"I also have the same issue on win7
node v6.7.0",leo-lai,
905,2016-11-25 09:11:44,"I got seem issue with macOS and Nodejs 6.9.1
<S_CODE_TOKEN>",hilongjw,
905,2016-11-29 04:59:40,"me too.
我安装了node 6.3.1版本就好了。。。",simonbaker,
905,2016-12-13 21:23:15,"Hi!

It's my first steps in Node.js. =j
I've the same issue:

<S_CODE_TOKEN>
Node 6.9.2
and
Node 7.2.1

On the page:
> ""Detached from the target by reason: websocket_closed""

In console:
<S_CODE_TOKEN>

**PS:**
**node -inspect server.js**  - success:

<S_CODE_TOKEN>

My IDE (PhpStorm + Node.js plugin) runs debug mode like this:
<S_CODE_TOKEN>
It works too.",Bargamut,
905,2016-12-22 07:40:33,"node: v6.9.1
osx: 10.12.2 sierra

![screen shot 2016-12-21 at 11 37 06 pm](https://cloud.githubusercontent.com/assets/3530852/21418537/c9fd87b6-c7d6-11e6-87d2-5131633a1276.png)
![screen shot 2016-12-21 at 11 37 25 pm](https://cloud.githubusercontent.com/assets/3530852/21418536/c9fb131e-c7d6-11e6-950e-deaf9591936e.png)


It works for me 💯 . I know this is not a right fix but works temporarily :)
",maithreya,
904,2016-08-16 02:20:48,"I have a Linux VM where I ran my node process as below
`node --dbug file.js`

after this command, I get the message debugger listening on 5858 and process goes in background.
Later, I run the node-inspector without arguments, the message is displayed that visit the url to start debugging. But when I open the url on host machine, the debugger interface is displayed but source is not shown. I tried `--web-host` flag with node-inspector too but nothing changed.

Can you help please with this problem?

Node-inspector version used: 0.12.8
Node version used: 6.3.1
",segmentationfaulter,
903,2016-08-11 02:34:20,"When entering commands/variables in the console (both break-point and non-break-point scenarios) or when specifying a variable under ""add watch expression"" the ""enter"" key does not execute the command/variable, but does a line-break instead. I could not find any other way to actually execute the command in the console. How can this behavior be changed or is this a bug? Thank you very much.

node-inspector version 0.12.8
nodejs 5.12.0
chrome Version 54.0.2824.0 dev-m (64-bit)
",NilsFrkal,
903,2016-09-22 14:01:41,"Having the same issue. Any advice?
",corsen2000,
903,2016-09-22 21:16:03,"I did not work out how to fix it. Interestingly however, I had this issue on both my desktop and my laptop. Because of an issue I had to revert back to an older backup for my desktop (this backup did not have node inspector and chrome installed). After re-installing above sws the issue did not occur anymore whilst on the laptop it still exists. If you have time try de-installing both chrome and node-inspector and re-install.
",NilsFrkal,
903,2016-10-18 20:42:32,"I ran into this same issue. I could not fix it by reinstalling chrome and node-inspector.
I could only fix it by rolling back to Version 51.0.2704.106 (64-bit) then disabling auto update to prevent the overwrite.

node-inspector version 0.12.8
nodejs v4.2.2
Chrome 54.0.2840.59 (64-bit)
OS X El Capitan Version 10.11.6
",ac9,
903,2016-10-22 11:32:17,"i have same issue
",newpost,
903,2016-10-25 17:21:26,"Same issue here

OS: macOS Sierra 10.12.1
Chrome: Version 54.0.2840.71 (64-bit)
node-inpector: 0.12.8

Note: same issue in watch - enter starts a new line
",oleksiipysanko,
903,2016-10-26 20:50:15,"It looks like this issue might be related to a Chrome update in [54.0.2840.71](https://googlechromereleases.blogspot.com/2016/10/stable-channel-update-for-desktop.html).  I rolled back to [51.0.2704.106](https://google-chrome.en.uptodown.com/mac/old) and this issue disappeared. I couldn't find a copy of Chrome version `53.0.2785.101`, but I suspect that it would also work.
- Node: 4.2.6
- OS: El Cap 10.11.3
- Chrome: 54.0.2840.71 (previous version 51.0.2704.106 works)
",ejhayes,
903,2016-10-26 21:13:49,"Confirmed, working fine on 51.0.2704.84 (64-bit) Chrome
",oleksiipysanko,
903,2016-10-28 12:29:17,"people, I am kinda struck, no official option to downgrade chrome in windows, (and I don't trust 3rd party stuff), so would request a higher priority to solving this bug.
",Mido22,
903,2016-10-29 12:01:52,"same here. on windows. stuck.
",emimull,
903,2016-10-31 10:01:41,"good news, found a temporary work around, retrieved [chromium `53.0.2785.34`](https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/389148/), so it is kinda official/ trust-able, you can find how to retrieve older chromium versions [here](https://www.chromium.org/getting-involved/download-chromium)

Bad news, tried chrome canary `v56`, the issue persists in that too.
",Mido22,
903,2016-11-01 11:57:22,"Look for workaround at https://github.com/node-inspector/node-inspector/pull/942
",iamfrontender,
903,2016-11-24 01:09:44,"Having this issue on OS X
I'm using this one that seems to be okay 
https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Mac/389140/",sebastianconcept,
903,2016-11-30 01:32:53,"If you would prefer to change node-inspector code _instead of downgrading Chrome_, here is a [nice fix](https://github.com/node-inspector/node-inspector/issues/951#issuecomment-262441472) (tested on Chrome 54.0.02840.98, Mac OS X, node-inspector v0.12.8)",devmi,
903,2016-12-22 14:06:06,any updates on this issue? it's super critical!,a7madgamal,
903,2017-02-04 00:07:23,"the edit in #951 works perfectly for me, i'm pretty sure that pull request should be accepted, it's a simple change, how can it be failing a test???",neutrino84,
903,2017-03-08 16:55:03,Looks like the test just timed out. Anyone with write access should be able to re-run it.,Lexicality,
902,2016-08-10 16:44:05,"on the initial invocation of node-inspector the debugger window opens as it should. however, on the second invocation a new window opens in that same chrome instance but it doesn't load the debugger.

tangentially related - i'm not sure why node-inspector uses a copy of chrome other than the regular desktop version. i frequently use that for loading the debugger after auto open fails.
",mattkime,
901,2016-08-08 17:19:46,"So I am using a self-made proxy to communicate between node inspector and my own script debugger. The reason is to be able to give the ability of debugging my script using node inspector (my script cannot be debugged with just any debugger as my script has its own debugger API).

Now, I am trying to get the scopes to show up. But when I log the request and response between Node inspector and the proxy, I can see that the break event happens but nothing else happens afterwards. Sometimes the ""backtrace"" happens after that and sometimes it does not. Scopes are not at all populated in Node Inspector. When I comment out the following line (line 48 in breakEventHandler.js): this._handleInjectorClientBreak.bind(this, obj), the logger shows that backtrace always happens (not just sometimes). Any clue why this is happening? Also, what is the role of the Invocation text here?
",shehrozhussain,
900,2016-08-01 17:38:20,"npm ERR! Linux 3.10.0-327.10.1.el7.x86_64

npm ERR!     Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build

[npm-debug.log.txt](https://github.com/node-inspector/node-inspector/files/394400/npm-debug.log.txt)
",westandy,
899,2016-07-29 18:11:11,"When I switched to node v6.3.1 + ES6 it took me a while to figure out how to make node-inspector work with my upgrade project.  npm package babel-node-debug was a simple solution to this and it might be helpful to newcomers to reference it in your docs
",justin-hackin,
899,2016-08-03 20:25:07,"Thanks for filing this issue @justin-hackin -- `babel-node-debug` is exactly what I needed.
",uhoh-itsmaciek,
898,2016-07-27 16:23:27,"I noticed on the project home page it states that node inspector currently works with chrome and opera browsers. I would like to see additional browser compatibility such as the Microsoft Edge browser. I think that would add nicely to the recent Google/Microsoft finally playing nice story like the recent Angular2/TypeScript first class support.

Lately, there has been great work done in the ASP.Net JavaScript services repo (https://github.com/aspnet/JavaScriptServices) with regards to AspNet Core projects with Angular2 SPA frontend, server-side rendering powered by Nodejs. It would be useful when debugging these processes using node inspector to use the default browser, instead of having install Chrome or Opera on my dev machine. I tried it with EdgeHTML 13 (Current Edge Browser) and it gives me the error ""Unknown experiment canvasInspection"". I was referred here by the folks in the JavaScriptServices repo in hopes that you can help me out.

Reference Context: https://github.com/aspnet/JavaScriptServices/issues/202

On a side note , just how much work would it require to polyfill/render properly in other browsers? What standard is lacking in other browsers such as Edge to make this work?
",wizarrc,
897,2016-07-12 13:46:02,"Tried running node-debug on a default ""Hello World"" task on windows and getting this error. 
![image](https://cloud.githubusercontent.com/assets/37770/16769102/c77cbcba-4864-11e6-8d9d-5c1d13521a33.png)

On console there are no error.

`C:\Projects\gulpexperiment\nodedebug  (nodedebug@1.0.0)
λ node-debug $(which gulp)

node  ""C:\Users\Jyoti\AppData\Roaming\npm\node_modules\node-debug\bin\node-debug.js"" $(which gulp)
   info  - socket.io started`

Any idea what could be causing this.
",cksachdev,
897,2016-07-27 16:35:50,"@cksachdev In my project I type in ""node-inspector --debug-port=5858"" to attach the debugger and host node-services on port 8080. It might be possible that you are typing in a command that exits prematurely. I say that because I get that error every time I close out the node-inspector process.

I'm new to this project and I would normally let an expert respond, but since I noticed no one responded to you in 15 days, I figure my novice answer is better than nothing. Hope that helps.
",wizarrc,
896,2016-07-12 11:31:06,"This is fundamental for people trying to use node-inspector to debug js code that resides in a container.
",magrossi,
895,2016-07-07 16:39:34,"When using **node-debug --debug-brk app.js** instead of stopping on app.js first line it stops on Line 409 of module.js:

**return compiledWrapper.apply(this.exports, args);**
",adalbertolv,
895,2016-07-14 02:19:31,"so do i  :((((((
",anpaul0615,
895,2016-09-25 06:51:40,"I think it's the default behaviour. you can always bypass it by explicitly setting the breakpoint at your app.js
shouldn't be a problem ;-)
",bochen2014,
895,2016-10-11 00:56:07,"i'm seeing this too. i'm not sure what changed, but now node-inspector always opens to the above-mentioned line in module.js. this is at least with node 4.6.0.

perhaps it is worth noting that, when using the CLI debugger (i.e. `node debug app`), the initial breakpoint is in the expected place.
",starpit,
894,2016-06-30 13:05:59,"When running a profiler to look into why a process is crashing, the node-inspector page should obviously not refresh. Right now it does, preventing us from stopping and reading the profiled data (rendering the inspection useless).

How can this be prevented?
",mirague,
893,2016-06-24 00:35:15,"In front-end/ui/FilterBar.js on line 62:
`this._stateSetting = WebInspector.settings.createSetting(""filterBar-"" + name + ""-toggled"", false);`

Looking at front-end/common/Settings.js, we see on line 104:

`WebInspector.Settings.prototype = {
    /**
     * @param {string} key
     * @param {*} defaultValue
     * @return {!WebInspector.Setting}
     */
    createSetting: function(key, defaultValue)
    {
        if (!this._registry[key])
            this._registry[key] = new WebInspector.Setting(key, defaultValue, this._eventSupport, window.localStorage);
        return this._registry[key];
    },`

As you can see, node-inspector is adding 'Settings' to WebInspector, and not 'settings'.

So, front-end/ui/FilterBar.js line 62 should be:
`this._stateSetting = WebInspector.Settings.createSetting(""filterBar-"" + name + ""-toggled"", false);`
",kwitzel,
892,2016-06-22 16:51:56,"its been a while since I succeeded into debugging nicely. I noticed now that whenever I set a breakpoint, from a clean (no watches, no breakpoints set anywhere), my process stops. It just stops as the first click to set a breakpoint

I also noticed that if i forgot to remove some breakpoints, as soon as I double click a file into Chrome (with node inspector) it stops the process. Its really weird. Also happening with debug from JetBrains IntelliJ. I set a breakpoint there, then the process stopped.

I run node 5.3.0.
",manodupont,
891,2016-06-21 15:57:45,"In `config.js` I just added the property `_isNodeDebugOption: true,` to the `'web-port'` option.  This appears to solve #827.  Is seems like there may be some additional options that need that flag too, like `'web-host'` for example, but I'm not entirely certain, so I left it off this PR.
",lukebmay,
890,2016-06-20 15:16:20,"Hello,

I've noticed that sometimes Node Inspector wouldn't load for me in some repos, and I didn't know why. Finally today I spent more time and tracked the issue, and copying stuff to a separate folder made wonders. I think some people my find my advice useful :)

Regards
Jakub 
",jakub-g,
890,2016-07-23 13:51:44,"@3y3 what do you think about this PR? it took me _months_ of node-inspector seemingly randomly not working for some projects to finally realize what's going on. I think this piece of documentation can prevent many people from pulling their hair.
",jakub-g,
889,2016-06-17 00:30:22,"this needs tests and perhaps some configuration support but i wanted to get the ball rolling by creating a (flawed) pr.
",mattkime,
889,2016-06-17 00:54:02,"this apparently affects the loading of non-sourcemaped files. (only see main file under file://, not full file set  although webpack:// has everything...yeah, i'm using webpack)
",mattkime,
888,2016-06-17 00:16:51,"Node Inspector v0.12.8
Node v6.2.1
OS X 10.11.4

<S_CODE_TOKEN>

I'd like to see his fixed so i can contribute with a successful set of tests.
",mattkime,
887,2016-06-13 12:28:40,"1.node-debug a js file
2. pass all breakpoint,until code is completely executed.
3. refresh the ui page
4.node-debug crash,shell display ""Assertion failed: ((err) == (0)), function Stop, file ../src/debug-agent.cc, line 155.""

my node version is v6.2.0
BTW 
when i use node-debug(--debug-brk),why the devtool  break on ""var result = compiledWrapper.apply(this.exports, args); 541 line in module.js"" rather than the first line of target js , 
",exolution,
887,2016-12-10 10:17:38,"Same here in Windows. Only error message is little different:

<S_CODE_TOKEN>",wzup,
886,2016-06-12 17:24:47,"![image](https://cloud.githubusercontent.com/assets/704514/15992696/0dd2be44-3087-11e6-86cd-5aabb5afef0c.png)

Anyone else seeing this? Chrome 51 on Mac. Updated/restarted Chrome and it didn't fix it. 
",jcollum,
885,2016-06-08 03:47:45,"$ node-inspector
Node Inspector v0.12.5
Visit http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858 to start debugging.
/usr/local/lib/node_modules/node-inspector/lib/FrontendCommandHandler.js:140
      domainAndMethod = fullMethodName.split('.'),
                                      ^

TypeError: Cannot read property 'split' of undefined
    at Object.FrontendCommandHandler.handleCommand (/usr/local/lib/node_modules/node-inspector/lib/FrontendCommandHandler.js:140:39)
    at Object.FrontendCommandHandler._handleFrontendMessage (/usr/local/lib/node_modules/node-inspector/lib/FrontendCommandHandler.js:128:10)
    at emitOne (events.js:77:13)
    at FrontendClient.emit (events.js:169:7)
    at FrontendClient._onConnectionMessage (/usr/local/lib/node_modules/node-inspector/lib/FrontendClient.js:40:8)
    at emitTwo (events.js:87:13)
    at WebSocket.emit (events.js:172:7)
    at Receiver.ontext (/usr/local/lib/node_modules/node-inspector/node_modules/ws/lib/WebSocket.js:816:10)
    at /usr/local/lib/node_modules/node-inspector/node_modules/ws/lib/Receiver.js:477:18
    at /usr/local/lib/node_modules/node-inspector/node_modules/ws/lib/Receiver.js:361:7
",rafael-freitas,
885,2016-06-14 11:05:23,"I have the same problem

<S_CODE_TOKEN>
",Pajn,
884,2016-06-06 14:09:25,"For node v0.10.45 and v0.12.9, I am only able to set breakpoints at the entry points of functions but not for code within the function. Is this intended? for example, I can't set breakpoints on lines 9 or 10 in the following snippet of code in the versions mentioned above.
![screen shot 2016-06-02 at 10 33 24 am](https://cloud.githubusercontent.com/assets/13950637/15748754/04e665be-28ae-11e6-838b-ef99da2eab68.png)
I am able to do so with node v6.2.0 and v4.4.5. I tried this same scenario with node-inspector@0.7.4 and it works fine for node v0.10.45 and v0.12.9. Testing done on mac.
",b-admike,
883,2016-06-02 14:55:40,"set up info:

<S_CODE_TOKEN>

context and issue:
I launched node-inspector with the following command `biniams-mbp:win2test badmike$ node-debug --debug-port=6000 --web-port=8081 server/server.js`, closed the browser(chrome), pressed `CTRL+C` to quit, checked for any node processes with `ps -ef | grep node`, and ran the same command again. This time it opens up the browser, but it's an empty tab.
",b-admike,
882,2016-05-31 12:49:06,"new to node, trying to install node inspector getting the following error, also tried after node-gyp

node-pre-gyp ERR! Tried to download: https://node-inspector.s3.amazonaws.com/deb
ug/v0.7.7/node-v48-win32-x64.tar.gz
node-pre-gyp ERR! Pre-built binaries not found for v8-debug@0.7.7 and node@6.2.0
 (node-v48 ABI) (falling back to source compile with node-gyp)
Building the projects in this solution one at a time. To enable parallel build,
please add the ""/m"" switch.
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V120\Microsoft.CppBuild.targe
ts(362,5): warning MSB8003: Could not find WindowsSDKDir variable from the regi
stry.  TargetFrameworkVersion or PlatformToolset may be set to an invalid versi
on number. [C:\Users\212569005\AppData\Roaming\npm\node_modules\node-inspector\
node_modules\v8-debug\build\debug.vcxproj]
  debug.cc
  InjectedScriptHost.cc
c:\users\212569005.node-gyp\6.2.0\include\node\v8.h(18): fatal error C1083: Ca
nnot open include file: 'stddef.h': No such file or directory (..\src\InjectedS
criptHost.cc) [C:\Users\212569005\AppData\Roaming\npm\node_modules\node-inspect
or\node_modules\v8-debug\build\debug.vcxproj]
c:\users\212569005.node-gyp\6.2.0\include\node\v8.h(18): fatal error C1083: Ca
nnot open include file: 'stddef.h': No such file or directory (..\src\debug.cc)
 [C:\Users\212569005\AppData\Roaming\npm\node_modules\node-inspector\node_modul
es\v8-debug\build\debug.vcxproj]
gyp ERR! build error
gyp ERR! stack Error: `C:\Program Files (x86)\MSBuild\12.0\bin\msbuild.exe` fail
ed with exit code: 1
gyp ERR! stack     at ChildProcess.onExit (C:\Users\212569005\AppData\Roaming\np
m\node_modules\node-gyp\lib\build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:106:13)
gyp ERR! stack     at ChildProcess.emit (events.js:191:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_proces
s.js:204:12)
gyp ERR! System Windows_NT 6.1.7601
gyp ERR! command ""C:\Program Files\nodejs\node.exe"" ""C:\Users\212569005\Ap
pData\Roaming\npm\node_modules\node-gyp\bin\node-gyp.js"" ""build"" ""--fallba
ck-to-build"" ""--module=C:\Users\212569005\AppData\Roaming\npm\node_modules
\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v48-win32-x
64\debug.node"" ""--module_name=debug"" ""--module_path=C:\Users\212569005\AppDa
ta\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\d
ebug\v0.7.7\node-v48-win32-x64""
gyp ERR! cwd C:\Users\212569005\AppData\Roaming\npm\node_modules\node-inspector\
node_modules\v8-debug
gyp ERR! node -v v6.2.0
gyp ERR! node-gyp -v v3.3.1
gyp ERR! not ok
node-pre-gyp ERR! build error
node-pre-gyp ERR! stack Error: Failed to execute 'C:\Program Files\nodejs\node.e
xe C:\Users\212569005\AppData\Roaming\npm\node_modules\node-gyp\bin\node-gyp.js
build --fallback-to-build --module=C:\Users\212569005\AppData\Roaming\npm\node_m
odules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-v48-win32-x6
4\debug.node --module_name=debug --module_path=C:\Users\212569005\AppData\Roamin
g\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.7.7\node-
v48-win32-x64' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (C:\Users\212569005\AppD
ata\Roaming\npm\node_modules\node-inspector\node_modules\node-pre-gyp\lib\util\c
ompile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:106:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:191:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:850:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/chi
ld_process.js:215:5)
node-pre-gyp ERR! System Windows_NT 6.1.7601
node-pre-gyp ERR! command ""C:\Program Files\nodejs\node.exe"" ""C:\Users\2125
69005\AppData\Roaming\npm\node_modules\node-inspector\node_modules\node-p
re-gyp\bin\node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd C:\Users\212569005\AppData\Roaming\npm\node_modules\node-i
nspector\node_modules\v8-debug
node-pre-gyp ERR! node -v v6.2.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.28
node-pre-gyp ERR! not ok
Failed to execute 'C:\Program Files\nodejs\node.exe C:\Users\212569005\AppData\R
oaming\npm\node_modules\node-gyp\bin\node-gyp.js build --fallback-to-build --mod
ule=C:\Users\212569005\AppData\Roaming\npm\node_modules\node-inspector\node_modu
les\v8-debug\build\debug\v0.7.7\node-v48-win32-x64\debug.node --module_name=debu
g --module_path=C:\Users\212569005\AppData\Roaming\npm\node_modules\node-inspect
or\node_modules\v8-debug\build\debug\v0.7.7\node-v48-win32-x64' (1)
C:\Users\212569005\AppData\Roaming\npm
`-- (empty)

npm ERR! Windows_NT 6.1.7601
npm ERR! argv ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\
node_modules\npm\bin\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v6.2.0
npm ERR! npm  v3.8.9
npm ERR! code ELIFECYCLE

npm ERR! v8-debug@0.7.7 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-debug@0.7.7 install script 'node-pre-gyp install --fal
lback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-debug
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Users\212569005\mygit\DMP-Reporting\npm-debug.log
npm ERR! code 1

C:\Users\212569005\mygit\DMP-Reporting>node gyp -v
module.js:442
    throw err;
    ^

Error: Cannot find module 'C:\Users\212569005\mygit\DMP-Reporting\gyp'
    at Function.Module._resolveFilename (module.js:440:15)
    at Function.Module._load (module.js:388:25)
    at Function.Module.runMain (module.js:575:10)
    at startup (node.js:160:18)
    at node.js:449:3
",mzzn28,
882,2016-06-01 22:14:59,"Have you installed visual studio C++ and Python 2.7? It's a requirement when working with node gyp.
",Talento90,
882,2016-06-02 00:14:25,"thanks, yes,It did work after setting up VS C++ environment.  It took me half day to figure out this problem.
",mzzn28,
882,2016-06-02 09:29:05,"I'm glad that I could help you! 

If possible close the issue :)
",Talento90,
881,2016-05-24 16:18:36,"I installed node-inspector 0.12.8 and am running node 5.6.0 and Chrome Version 50.0.2661.102 m

My node-debug line looks as follows:
node-debug -d 5858 -p=5859 --nodejs --harmony app.js

When I run node-debug I get the following errors. 
Runtime.js:358 Assertion failed: Unknown experiment canvasInspectionRuntime._assert @ Runtime.js:358
InspectorBackend.js:185 Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check https://xhr.spec.whatwg.org/

I am able to debug in line mode but not in a browser.
I see a lot of chatter in the web about same or similar issues but have not seen any hint on how to get around this.

Help!
",devahome,
880,2016-05-23 04:20:45,"This is maybe more of a question that an issue.  Is it possible to break on a variable change rather than a line of code?  I'm trying to understand when my object/variable changes and having trouble tracking that down.
tia!
",tagyoureit,
879,2016-05-19 10:16:43,"OS: Windows 10
node: v4.4.3
node-inspector: v0.12.8
nvm-windows: v1.1.0

<S_CODE_TOKEN>

Inside of the folder **v8-debug\build\debug\v0.7.7\**
There is only v47 there is no v46 ... **node-v47-win32-x64** 
",oodboo,2016-05-19 10:29:55
879,2016-05-19 10:29:35,"I have found the issue when nvm is run, v8-debug version will vary depending on currently selected version of node in NVM...
Although it would have be nice if we could somehow choose which environment/s we want to add ...
",oodboo,2016-05-19 10:29:55
879,2016-05-31 06:12:35,"re install
",robinxc,2016-05-19 10:29:55
878,2016-05-18 19:30:11,"If I write a fat arrow function and reference `this` in the function, when debugging `this` will be undefined, even though it is visible and has properties inside the Scope Variables window. It also works properly when not debugging. If I convert the function back to function(){} format, `this` works fine in the debugger. node is version 5.9.0
",nikmartin,
877,2016-05-18 17:36:13,"Line is SourceFrame.js:773 

<S_CODE_TOKEN>

Maybe just a simple check on messageText?

Don't know what I did to get here. There are some other errors in the console too. Screenshot attached.

![screen shot 2016-05-18 at 1 35 18 pm](https://cloud.githubusercontent.com/assets/16612419/15368750/680ae6d6-1cfd-11e6-8297-9b04a7eaf76d.png)
",paul-go,
876,2016-05-17 13:37:20,,a0viedo,
875,2016-05-16 19:54:54,"Node.js version `0.10.40` (yes, it's old), does not have a `this.agent` object here:
https://github.com/node-inspector/node-inspector/blob/v0.12.8/lib/Injections/NetworkAgent.js#L218

I get this error, `Unrecoverable exception. Cannot read property 'protocol' of null`, when running: `https.request({...});`.

Changing that line to the following works:

<S_CODE_TOKEN>
",bendiy,
875,2016-05-16 22:29:28,"I'm not sure what's causing this error, but I'm debugging the `Stripe` API using their example:

<S_CODE_TOKEN>

I think it may be a combination of having `agent: null,`:
https://github.com/stripe/stripe-node/blob/v4.6.0/lib/stripe.js#L77
and setting `ciphers`:
https://github.com/stripe/stripe-node/blob/v4.6.0/lib/StripeResource.js#L236

Either way, `node-inspector`'s `NetworkAgent` doesn't get a `protocol` and defaults to `http` when it should be `https`.
",bendiy,
874,2016-05-13 17:38:54,"After starting my server (node --debug-brk server.js) and node-inspector it does break on the first line but if I add any any breakpoints then navigate to a page that would hit the new breakpoint, node-inspector just hangs and the server times out. There is no evidence that a break point is being hit and I can not continue execution or step through the code.

I do notice an error in the console, something similar to this:

<S_CODE_TOKEN>

I am using Node v5.5 and node-inspector v0.12.6
",mcdrummerman,
873,2016-05-12 14:30:47,"I get the error 

<S_CODE_TOKEN>

I looked inside debug/v0.7.7/ and there is only a folder called `node-v11-linux-x64` I tried making a symbolic link called `node-v48-linux-x64` but that causes `Error: Module did not self-register.` Which would be fine, but everything behaves strangely. For instance, there is no visual indication that a `debugger;` has been triggered and I have to cycle continue and pause manually.

This is on Fedora 23 latest stable node and npm.
",rayfoss,
873,2016-05-18 17:05:26,"You should give details about your environment.

I have the same problem. See [this screenshot](http://imagizer.imageshack.com/img922/363/9qDua4.png)

My environment is:

<S_CODE_TOKEN>

Can someone give a workaround to use for the time being?  This is a serious blocker for me at the moment.
",superclarkk,
873,2016-05-19 00:53:54,"@superclarkk switch to devtool https://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools 

node-inspector is not ready for primetime.
",rayfoss,
873,2016-05-19 13:46:30,"Same problem!
",LeandroFavero,
873,2016-05-25 14:43:24,"+1
",talbenbasat,
873,2016-05-28 07:34:12,"same problem :(

Error: Cannot find module '/usr/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.7/node-v47-linux-x64/debug.node'

Ubuntu 15.10
node v5.7.1
npm 3.8.8
",petercz1,
873,2016-06-20 10:05:24,"Same here.

Win7
node v5.10.1
npm 3.9.2
",rjgotten,
873,2016-06-20 12:09:16,"petercz1 and rjgotten try uninstall node-inspector and nodejs/npm. So reinstall nodejs and node-inspector.

This fixed my problem with 6.2.1 (macOS)
",LeandroFavero,
873,2016-06-20 13:27:13,"@LeandroFavero 
Fixed it already, without having to resort to such drastic measures as a full re-install.

On Windows, it seems you **must** issue the `npm install node-inspector -g` command from a shell that has the Node.js installation folder (in `Program Files` by default) as the current working directory, or the installation does not correctly detect which version of Node is installed and thus which version of the debugger to install. (At which point it falls back on a downright _ancient_ version of the v8 debugger, iirc; 0.15.&ndash;something...)
",rjgotten,
872,2016-05-12 10:23:48,"npm ERR! Darwin 15.0.0
npm ERR! argv ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v5.10.1
npm ERR! npm  v3.8.3
npm ERR! code MODULE_NOT_FOUND

npm ERR! Cannot find module 'github-url-from-git'
npm ERR!
npm ERR! If you need help, you may report this error at:
npm ERR!     https://github.com/npm/npm/issues

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/egret/npm-debug.log
localhost:~ egret$ npm install -g node-inspector
npm ERR! Darwin 15.0.0
npm ERR! argv ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v5.10.1
npm ERR! npm  v3.8.3
npm ERR! code MODULE_NOT_FOUND

npm ERR! Cannot find module 'github-url-from-git'
npm ERR!
npm ERR! If you need help, you may report this error at:
npm ERR!     https://github.com/npm/npm/issues

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/egret/npm-debug.log
",yicaoyimuys,
872,2016-05-12 20:53:16,"+1
",TheLarkInn,
872,2016-10-22 16:34:31,"+1
",zombiQWERTY,
871,2016-05-11 13:59:33,"OS: Windows 10.0.10240 Education 64 bits
Node.js: v6.1.0

Execute ""npm install -g node-inspector""

npm ERR! Windows_NT 10.0.10240
npm ERR! argv ""C:\Program Files\nodejs\node.exe"" ""C:\Users\Theo\AppData\Roaming\npm\node_modules\npm\bin\npm-cli.js"" ""install"" ""node-pre-gyp""
npm ERR! node v6.1.0
npm ERR! npm  v3.8.9
npm ERR! path C:\Users\Theo\AppData\Roaming\npm\node_modules.staging\v8-profiler-ea053891
npm ERR! code EBUSY
npm ERR! errno -4082
npm ERR! syscall rmdir

npm ERR! EBUSY: resource busy or locked, rmdir 'C:\Users\Theo\AppData\Roaming\npm\node_modules.staging\v8-profiler-ea053891'
npm ERR!
npm ERR! If you need help, you may report this error at:
npm ERR!     https://github.com/npm/npm/issues

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Users\Theo\AppData\Roaming\npm\node_modules.staging\v8-profiler-ea053891\npm-debug.log

> v8-debug@0.7.7 preinstall C:\Users\Theo\AppData\Roaming\npm\node_modules.staging\v8-debug-f6363cac
> node -e 'process.exit(0)'

C:\Users\Theo\AppData\Roaming\npm
`-- (empty)

npm ERR! Windows_NT 10.0.10240
npm ERR! argv ""C:\Program Files\nodejs\node.exe"" ""C:\Users\Theo\AppData\Roaming\npm\node_modules\npm\bin\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v6.1.0
npm ERR! npm  v3.8.9
npm ERR! code ELIFECYCLE

npm ERR! v8-profiler@5.6.3 preinstall: `npm install node-pre-gyp`
npm ERR! Exit status 4294963214
npm ERR!
npm ERR! Failed at the v8-profiler@5.6.3 preinstall script 'npm install node-pre-gyp'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-profiler package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     npm install node-pre-gyp
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-profiler
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-profiler
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Users\Theo\Dropbox\Programação e web\Web\JavaScript\Server learning\myApps\console\npm-debug.log
npm ERR! code 1
",Timer00,2016-05-12 22:11:06
871,2016-05-11 19:18:58,"I forked node-inspector and set the v8-profiler explicitly to 5.6.1 (from ~5.6.0) 

That fixed my problems in Windows 7. I haven't done extensive debugging, but it appears to be working.

It's here: https://github.com/PeterWoodITG/node-inspector
",PeterWoodITG,2016-05-12 22:11:06
871,2016-05-11 22:21:50,"@PeterWoodITG Sorry to ask, but how should I install this specific version that you have linked?
",Timer00,2016-05-12 22:11:06
871,2016-05-12 15:42:40,"@Timer00 `npm install git+https://github.com/PeterWoodITG/node-inspector.git -g`
",cosmosb,2016-05-12 22:11:06
871,2016-05-12 22:11:06,"Great! It works, thank you @cosmosb and @PeterWoodITG 
",Timer00,2016-05-12 22:11:06
870,2016-05-11 04:30:48,"Hi! I'm having an issue with v0.12.7, which we're using in [Nuclide](http://github.com/facebook/nuclide). It was manifesting in the same way as #643 (""not opened"") and I think I've managed to track it down…

It seems that the FrontEndClient's connection isn't nulled when `session.close()` is called. (Instead, it waits for the connection to close.) As a result, if you call `session.close()` and then immediately disconnect the websocket (e.g. by leaving its host page), [this](https://github.com/node-inspector/node-inspector/blob/0faa1356d66fe25027ff12a9e5c7da0fd8ed9276/lib/session.js#L47) `frontEndClient.isConnected` check will return `true`, even though the connection's `readyState` is 2 (""closing"") and messages can therefore not be sent. It'll then attempt to send the `""Inspector.detached""` message, which will [eventually](https://github.com/node-inspector/node-inspector/blob/0faa1356d66fe25027ff12a9e5c7da0fd8ed9276/lib/FrontendClient.js#L62) wind up calling `_connection.send()` and triggering the ""not opened"" error.

My workaround for now is to call `session.frontEndClient.pauseEvents()` before calling `session.close()`.
",matthewwithanm,
869,2016-05-10 18:49:43,"Hi, I cannot install node-inspector, for some weird reason. I'm told to contact v8-debug, but.. if I try installing v8-debug, it works :P I'm using nvm. here's stack trace:

<S_CODE_TOKEN>

should I contact v8-debug, or is there other way?
",Bugari,
869,2016-05-10 20:33:11,"i'm seeing something very similar

<S_CODE_TOKEN>
",mattkime,
869,2016-05-11 15:58:18,"@mattkime I'm also seeing nearly the exact same error on my machine. 
- Running Mac OS X Yosemite (10.10.5)
- Node v5.11.1
- npm v3.8.6
- v8-debug v0.7.7

Also attached is the npm-debug log (slightly anonymized). 
[npm-debug.log.zip](https://github.com/node-inspector/node-inspector/files/259685/npm-debug.log.zip)
",romellem,
869,2016-05-12 10:01:43,"+1, now on windows :)
win7 x64, node v6.1.0, npm v3.3.3

<S_CODE_TOKEN>
",fend25,
869,2016-06-08 03:11:38,"I had a nearly identical error too and solved it by installing nvm, then installing and using the newest version of node then trying the npm install command again.

Hopefully this helps someone.
",adam-phillipps,
869,2016-08-31 20:16:12,"The solution proposed by adam also worked for me.
",juanleiguarda,
868,2016-05-09 17:34:44,"I tried to re-install node-inspector because the network tab was not working. However, I get the following response when I try to do it. Any idea why the install might be failing?

<S_CODE_TOKEN>
",dmitrigrabov,
868,2016-05-09 21:12:01,"Same issue here... node 4.3.2 npm 3.8.5
",dmash,
868,2016-05-09 21:58:03,"👍  same issue I believe. Blocking for us.

<S_CODE_TOKEN>

Error log:

<S_CODE_TOKEN>
",nodesocket,
868,2016-05-10 02:08:11,"same issue for ubuntu 16

> 20857 silly install printInstalled
> 20858 verbose stack Error: v8-debug@0.7.6 preinstall: `node -e 'process.exit(0)'`
> 20858 verbose stack spawn sh ENOENT
> 20858 verbose stack     at exports._errnoException (util.js:893:11)
> 20858 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:182:32)
> 20858 verbose stack     at onErrorNT (internal/child_process.js:348:16)
> 20858 verbose stack     at _combinedTickCallback (internal/process/next_tick.js:74:11)
> 20858 verbose stack     at process._tickCallback (internal/process/next_tick.js:98:9)
> 20859 verbose pkgid v8-debug@0.7.6
> 20860 verbose cwd /home/sinedev/Development/sinecloud-api
> 20861 error Linux 4.4.0-22-generic
> 20862 error argv ""/home/sinedev/.nvm/versions/node/v5.11.0/bin/node"" ""/home/sinedev/.nvm/versions/node/v5.11.0/bin/npm"" ""install"" ""-g"" ""node-inspector""
> 20863 error node v5.11.0
> 20864 error npm  v3.8.6
> 20865 error file sh
> 20866 error path sh
> 20867 error code ELIFECYCLE
> 20868 error errno ENOENT
> 20869 error syscall spawn sh
> 20870 error v8-debug@0.7.6 preinstall: `node -e 'process.exit(0)'`
> 20870 error spawn sh ENOENT
> 20871 error Failed at the v8-debug@0.7.6 preinstall script 'node -e 'process.exit(0)''.
> 20871 error Make sure you have the latest version of node.js and npm installed.
> 20871 error If you do, this is most likely a problem with the v8-debug package,
> 20871 error not with npm itself.
> 20871 error Tell the author that this fails on your system:
> 20871 error     node -e 'process.exit(0)'
> 20871 error You can get information on how to open an issue for this project with:
> 20871 error     npm bugs v8-debug
> 20871 error Or if that isn't available, you can get their info via:
> 20871 error     npm owner ls v8-debug
> 20871 error There is likely additional logging output above.
",menocomp,
868,2016-05-10 15:19:08,"Install was working on another mac, which was running node v4.2.6, however after I used `nvm` to upgrade to node v5.11.1, I am getting the same error as above in first post
",dmitrigrabov,
868,2016-05-10 16:56:34,"Same issue in Windows 7,   node v4.2.3 npm  v3.8.9, as well as with bleading edge: node v6.1.0
npm  v3.9.0 (as well as 3.8.9)
The the c:\itg\npm directory was freshly created by npm via same user executing. Error is strange.

<S_CODE_TOKEN>
",PeterWoodITG,
868,2016-05-10 17:05:10,"Same here as well. Running Node 6.1/NPM 3.8.6 on a Mac
",jamesdixon,
868,2016-05-10 20:33:40,"Something's version is creeping up and breaking it, I don't have enough experience to find out what it is but I've forked it and removed all the ^ and ~ from the version numbers in the package.json and it works. 

I think it's working now but I've never used node-inspector before so not sure if it's 100% working. 

Feel free to install it from my git repo for now until someone smarter finds out :)

`npm install git+https://github.com/markmcdermid/node-inspector.git -g`

Edit: Doesn't appear to be the v8 version because I tried just changing that to 0.7.1 first.
",markmcdermid,
868,2016-05-11 16:07:26,"@markmcdermid thanks, that worked for me.
",romellem,
868,2016-05-11 20:01:54,"Tried @markmcdermid's version, but unfortunately still breaking (different error) on Node 6.1

<S_CODE_TOKEN>

Anyone else having the same issue?
",jamesdixon,
868,2016-05-12 18:01:53,"+1
- OS: windows 7 x64
- node v6.1.0
- npm v3.3.3

<S_CODE_TOKEN>
",fend25,
868,2016-05-13 08:59:28,"Can anyone to reinstall node-inspector now? I release new v8-profiler version which should fix this problem.
",3y3,
868,2016-05-13 09:49:04,"Just tried with node 6.1.0, npm 3.9.0, OS X 10.11.4. Installed fine.
",mhingston,
868,2016-05-13 10:26:01,"@3y3 thank you, node-inspector has been installed and now working fine. win7 x64, node v6.1.0
",fend25,
868,2016-05-13 12:09:12,"@3y3 I can confirm that it is also fixed.  Thanks!

Node v5.11.1/v6.1.0, npm 3.8.6.
",abernix,
868,2016-05-13 15:51:55,"Yay..success with Node v6.1 on Windows 10. Thanks.
",cosmosb,
868,2016-05-25 13:11:11,"+1
I'm with ubuntu 14.10 64bit
node 0.6.2
npm 3.8.9

reinstall not working

reinstalling with target 1.6.3/1.8.3 not working either

the installation from git fails with
node-pre-gyp ERR! Tried to download: https://node-inspector.s3.amazonaws.com/profiler/v5.6.0/node-v48-linux-x64.tar.gz 
node-pre-gyp ERR! Pre-built binaries not found for v8-profiler@5.6.0 and node@6.2.0 (node-v48 ABI) (falling back to source compile with node-gyp) 

---

update:
git install worked but didn't worked

still getting
Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.1/node-v48-linux-x64/debug.node'

and the inspector does nothing
",talbenbasat,
868,2016-06-01 09:40:05,"osx, the same issue

<S_CODE_TOKEN>
",davidhhuan,
868,2016-06-06 00:17:43,"This works for me https://github.com/node-inspector/v8-debug/issues/7#issuecomment-154450807
",colkito,
868,2016-12-17 00:03:00,"<S_CODE_TOKEN>

Somewhere in the logs:

<S_CODE_TOKEN>

_(so now I'm instaling Xcode)_",stefek99,
867,2016-05-08 17:55:08,"The node-v46-win32-ia32 binaries are missing ...
For recent versions of both profiler and debug.

node-v11, node-v14, node-v47 and node-v48 are fine.

As can be seen in the following links, or when installing under 32bit Node on Windows.
https://npm.taobao.org/mirrors/node-inspector/profiler/v5.6.3/
https://npm.taobao.org/mirrors/node-inspector/debug/v0.7.6/
",JohnMurga,2016-05-16 09:08:24
867,2016-05-16 09:08:24,"Fixed in latest versions
",JohnMurga,2016-05-16 09:08:24
866,2016-05-08 00:13:02,"Basically this: https://developer.chrome.com/devtools/docs/commandline-api#copyobject
",atif089,
865,2016-05-06 16:45:12,"It _appears_ to run properly, but when you goto a browser and open http://127.0.0.1:8080/?port=5858
there is a console error : 

> Error: dlopen(/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.3/node-v11-darwin-ia32/debug.node, 1): image not found

Obviously that folder doesn't exist because this one does with node 6.0.0 : node-v14-darwin-x64

Any thoughts on how to fix this issue?

Thanks!
",cmalcom,
865,2016-05-06 18:28:19,"Related: https://github.com/node-inspector/node-inspector/issues/864 
",Ashtonian,
865,2016-05-07 10:26:26,"me too +1
--debug-brk --harmony while starting is letting me debug though (despite the error coming)
",saurshaz,
865,2016-05-07 21:41:22,"+1 looking for node-v47-darwin-x64 when it is node-v48-darwin-x64
",mschipperheyn,
865,2016-05-23 23:53:58,"This would seem you have updated node. You will need to reinstall node-inspector for it to recompile the native modules in node-profiler. 
",jaredwy,
864,2016-05-05 13:35:56,"Node version 6.0.0
Node Inspector 0.12.8
Express 4.13.4 

![screen shot 2016-05-05 at 9 37 54 am](https://cloud.githubusercontent.com/assets/11699932/15044831/212704e6-12a5-11e6-82dd-c48441e65cd5.png)

1) node-debug app.js
2) open the inspector and press play
3) open the localhost:3000
4) works then set breakpoint on 'res.send() line'; 
5) reload localhost:3000
6) internal error: illegal access

I am aware of the issue #413 and my issue might be related. Why am I getting this error, I am not able to set a breakpoint anywhere.
",griffinmacias,
864,2016-05-05 14:23:59,"Same problem, and happens only with Node 6.0
",LeandroFavero,
864,2016-05-05 15:51:57,"Same here.
",chippawah,
864,2016-05-05 18:41:23,"Same Problem
",theHazzard,
864,2016-05-05 21:28:57,"Same here
",MKHenson,
864,2016-05-08 20:41:35,"I have this issue only if I try to debug ES6 code. I run `node-inspector` and then invoking `babel-node debug -- myscript.js`. It breaks on the first line of a script and everything seems fine, but then it hangs and after some times outputs the error message.

Do you know any workarounds?

---

Sorry for any misleading thoughts. I'm completely new to the whole js stack.
",wokalski,
864,2016-05-10 11:42:40,"As a work around you can use --debug-brk argument which will enable a breakpoint on the first line of the script you run. Your debug session will work as expected.
",rcosnita,
864,2016-05-10 13:40:30,"Thanks @rcosnita, that works
",griffinmacias,
864,2016-05-13 15:51:08,"it didn't work for me
every time that I try to debug inside a callback from requestjs it throws Illegal Access
",theHazzard,
864,2016-05-13 15:53:50,"Also not working for me - already using --debug-brk.

Error gets thrown no matter where I put my breakpoint.
",bmcswee,
864,2016-05-13 17:45:15,"Same problem here. Node 6+ when setting breakpoint on a callback.
",alfg,
864,2016-05-13 21:32:00,"As part of my work i've had to track down what was causing this issue in our setup (not node, but we use node inspector). The culmination of that investigation was https://bugs.chromium.org/p/v8/issues/detail?id=5010.The symptoms were the same, and as @rcosnita they seemed to improved when using --debug-brk in some cases. So i suspect they are likely the same, im going to start looking to fix this on monday. 
",jaredwy,
864,2016-05-14 06:26:23,"Same error here on node v6.1.0 & node-inspector v0.12.8; using --debug-break

As @alfg noted, it only happens (for me at least) when the breakpoint is within a callback that is reached after a different breakpoint outside the callback is encountered. Trying now to make a reproducible example
",blake-regalia,
864,2016-05-14 07:08:57,"Got it. It happens when trying to inspect a variable that is the result from calling `bind` on a function:

<S_CODE_TOKEN>

To prove that inspecting it is the culprit, you can see it happen like this:

<S_CODE_TOKEN>
",blake-regalia,
864,2016-05-14 08:28:02,"Yup. I've got a patch in progress for v8. Will update this issue as it lands.
",jaredwy,
864,2016-05-17 14:34:15,"Hi! 

it always throws while debugging inside a `request` callback

<S_CODE_TOKEN>
",theHazzard,
864,2016-05-17 16:51:25,"+1
",eugenioclrc,
864,2016-05-18 23:49:48,"This is a v8 problem that was addressed with this commit:
https://github.com/v8/v8/commit/246d5bba8f8eff204449ecc183a486b9c7722ba5

Now you'll have to wait until this v8 dep appears in a node.js upgrade
",blake-regalia,
864,2016-05-19 00:29:15,"FYI I have informed node of the problem and they will pick up the patch when it lands on the right branch in v8. 
On Thu, 19 May 2016 at 9:50 AM blake-regalia notifications@github.com
wrote:

> This is a v8 problem that was addressed with this commit:
> v8/v8@246d5bb
> https://github.com/v8/v8/commit/246d5bba8f8eff204449ecc183a486b9c7722ba5
> 
> Now you'll have to wait until this v8 dep appears in a node.js upgrade
> 
> —
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/864#issuecomment-220191122
",jaredwy,
864,2016-05-19 13:45:44,"I updated to 6.2.0, but there are other issue:

Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.3/node-v48-darwin-x64/debug.node'
",LeandroFavero,
864,2016-05-19 15:02:27,"@LeandroFavero remove `node_modules` and run `npm install`. (Or just remove the `node-inspector` module)
",wokalski,
864,2016-05-19 15:16:34,"@wokalski That is not the answer. The v8 fix has not been integrated into node yet.
",superclarkk,
864,2016-05-19 15:17:02,"I'm still having the same issue with node 6.2, illegal access while
debugging inside of a request callback :(

_Enzo Luis Stróngoli_
_NodeJS Developer_
_http://www.turismocity.com.ar http://www.turismocity.com.ar/_
_https://www.linkedin.com/in/enzostrongoli
https://www.linkedin.com/in/enzostrongoli_
_strongolienzo@gmail.com_ strongolienzo@gmail.com
_enzo@turismocity.com enzo@turismocity.com_

2016-05-19 12:02 GMT-03:00 Wojtek Czekalski notifications@github.com:

> @LeandroFavero https://github.com/LeandroFavero remove node_modules and
> run npm install. (Or just remove the node-inspector module)
> 
> —
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/864#issuecomment-220351974
",theHazzard,
864,2016-05-19 17:29:37,"@superclarkk It is not a fix for illegal access, but it is a fix for @LeandroFavero issue, as far as I know.
",wokalski,
864,2016-05-19 17:34:07,"sorry, I thought that was for this issue

_Enzo Luis Stróngoli_
_NodeJS Developer_
_http://www.turismocity.com.ar http://www.turismocity.com.ar/_
_https://www.linkedin.com/in/enzostrongoli
https://www.linkedin.com/in/enzostrongoli_
_strongolienzo@gmail.com_ strongolienzo@gmail.com
_enzo@turismocity.com enzo@turismocity.com_

2016-05-19 14:30 GMT-03:00 Wojtek Czekalski notifications@github.com:

> @superclarkk https://github.com/superclarkk It is not a fix for illegal
> access, but it is a fix for @LeandroFavero
> https://github.com/LeandroFavero issue, as far as I know.
> 
> —
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/864#issuecomment-220395511
",theHazzard,
864,2016-05-19 18:14:16,"@wokalski I have the same issue as @LeandroFavero and also the illegal access issue (I presume they are connected). Deleting and reinstalling all modules does not fix it.
",superclarkk,
864,2016-05-19 18:47:52,"@superclarkk No, they are not connected afaik. I had this issue because I installed `node-inspector` with some version of `node` and used it with other. I'm sorry if my tip is misleading!
",wokalski,
864,2016-05-20 20:14:59,"Same problem here with node 6.2 and node-inspector 0.12.8
",nicobevilacqua,
864,2016-05-23 23:54:27,"https://github.com/nodejs/node/pull/6928 is up that will include the v8 fix that is required to fix this. 
",jaredwy,
864,2016-05-30 10:07:07,"Am also facing same problem with node 6.2.0 and node-inspector 0.12.8 version. This is not working with --debug and -debug-brk flag too. Are there any alternatives in solving this problem like using earlier versions like so ? If possible please update me.
",sunilalgos,
864,2016-05-31 01:42:36,"Same as a bunch of other folk. Node 6.2.0, node-inspector 0.12.8. 
Getting 'Internal error: illegal access' after running 'node-inspector' and 'node --debug-brk index.js' (or node --debug index.js) and setting a breakpoint on the following code:

<S_CODE_TOKEN>

Hope the JavaScript Gods heed the call of the humble debuggers!
",kunal-mandalia,
864,2016-06-03 20:23:51,"Node 6.2.1 has been released and is supposed to fix this issue.
",mgol,
864,2016-06-03 23:15:45,"I can confirm node 6.2.1 lets node-inspector work as expected 👍 
",kunal-mandalia,
864,2016-06-16 13:50:30,"After updating to node 6.2.1, was able to debug a strongloop app... Great work guys. Thanks a ton!
",rohitsi,
864,2016-06-22 11:32:20,"On node v6.2.1 I still have a problem debugging this code:

<S_CODE_TOKEN>

It gives `Internal error: illegal access` in the debugger if I resume script execution.

<S_CODE_TOKEN>
",aa6,
863,2016-05-05 11:19:18,"Environment

Ubuntu 14.04LTS 32bit with 3.19.0-25-generic
node v5.11.0
npm 3.8.6
python 2.7.6
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.1) 4.8.4

change to root user,then execute below command
 ""npm install -g --unsafe-perm node-inspector""

Log

root@ubuntu:~# npm install -g node-inspector --unsafe-perm

v8-profiler@5.6.1 preinstall /usr/npm-global/lib/node_modules/.staging/v8-profiler-82ee13f0
node -e 'process.exit(0)'

v8-debug@0.7.3 preinstall /usr/npm-global/lib/node_modules/.staging/v8-debug-7024e75a
node -e 'process.exit(0)'
/usr/npm-global/bin/node-inspector -> /usr/npm-global/lib/node_modules/node-inspector/bin/inspector.js
/usr/npm-global/bin/node-debug -> /usr/npm-global/lib/node_modules/node-inspector/bin/node-debug.js

v8-profiler@5.6.1 install /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
node-pre-gyp install --fallback-to-build
make: Entering directory /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build' CXX(target) Release/obj.target/profiler/src/profiler.o make: g++: Command not found make: **\* [Release/obj.target/profiler/src/profiler.o] Error 127 make: Leaving directory/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build'
gyp ERR! build error 
gyp ERR! stack Error: make failed with exit code: 2
gyp ERR! stack at ChildProcess.onExit (/usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack at emitTwo (events.js:100:13)
gyp ERR! stack at ChildProcess.emit (events.js:185:7)
gyp ERR! stack at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
gyp ERR! System Linux 3.19.0-25-generic
gyp ERR! command ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""build"" ""--fallback-to-build"" ""--module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node"" ""--module_name=profiler"" ""--module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32""
gyp ERR! cwd /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
gyp ERR! node -v v5.6.0
gyp ERR! node-gyp -v v3.2.1
gyp ERR! not ok 
node-pre-gyp ERR! build error 
node-pre-gyp ERR! stack Error: Failed to execute '/usr/node-v5.6.0-linux-x86/bin/node /usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node --module_name=profiler --module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32' (1)
node-pre-gyp ERR! stack at ChildProcess. (/usr/npm-global/lib/node_modules/node-inspector/node_modules/node-pre-gyp/lib/util/compile.js:83:29)
node-pre-gyp ERR! stack at emitTwo (events.js:100:13)
node-pre-gyp ERR! stack at ChildProcess.emit (events.js:185:7)
node-pre-gyp ERR! stack at maybeClose (internal/child_process.js:827:16)
node-pre-gyp ERR! stack at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)
node-pre-gyp ERR! System Linux 3.19.0-25-generic
node-pre-gyp ERR! command ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/npm-global/lib/node_modules/node-inspector/node_modules/.bin/node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
node-pre-gyp ERR! node -v v5.6.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.27
node-pre-gyp ERR! not ok 
Failed to execute '/usr/node-v5.6.0-linux-x86/bin/node /usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node --module_name=profiler --module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32' (1)
/usr/npm-global/lib
└── (empty)

npm ERR! Linux 3.19.0-25-generic
npm ERR! argv ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/node-v5.6.0-linux-x86/bin/npm"" ""install"" ""-g"" ""node-inspector"" ""--unsafe-perm""
npm ERR! node v5.6.0
npm ERR! npm v3.6.0
npm ERR! code ELIFECYCLE

npm ERR! v8-profiler@5.6.1 install: node-pre-gyp install --fallback-to-build
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the v8-profiler@5.6.1 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-profiler package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR! node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR! npm bugs v8-profiler
npm ERR! Or if that isn't available, you can get their info via:
npm ERR! npm owner ls v8-profiler
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR! /root/npm-debug.log
npm ERR! code 1
",pei-han,
863,2016-05-10 02:11:58,"same here:
Ubuntu 16.04 LTS 64 bit
",menocomp,
862,2016-05-03 03:14:22,"Environment

Ubuntu 14.04LTS 32bit with 3.19.0-25-generic
node v5.11.0
npm 3.8.6
python 2.7.6
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.1) 4.8.4

Execute ""npm install -g node-inspector""

Log

npm WARN lifecycle v8-profiler@5.6.1~preinstall: cannot run in wd %s %s (wd=%s) v8-profiler@5.6.1 node -e 'process.exit(0)' /usr/npm-global/lib/node_modules/.staging/v8-profiler-82ee13f0
npm WARN lifecycle v8-debug@0.7.3~preinstall: cannot run in wd %s %s (wd=%s) v8-debug@0.7.3 node -e 'process.exit(0)' /usr/npm-global/lib/node_modules/.staging/v8-debug-7024e75a
/usr/npm-global/bin/node-inspector -> /usr/npm-global/lib/node_modules/node-inspector/bin/inspector.js
/usr/npm-global/bin/node-debug -> /usr/npm-global/lib/node_modules/node-inspector/bin/node-debug.js

> v8-profiler@5.6.1 install /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
> node-pre-gyp install --fallback-to-build

gyp WARN EACCES user ""root"" does not have permission to access the dev dir ""/root/.node-gyp/5.6.0""
gyp WARN EACCES attempting to reinstall using temporary dev dir ""/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/.node-gyp""
make: Entering directory `/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build'
make: *** No rule to make target`../.node-gyp/5.6.0/include/node/common.gypi', needed by `Makefile'.  Stop.
make: Leaving directory`/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build'
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:100:13)
gyp ERR! stack     at ChildProcess.emit (events.js:185:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
gyp ERR! System Linux 3.19.0-25-generic
gyp ERR! command ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""build"" ""--fallback-to-build"" ""--module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node"" ""--module_name=profiler"" ""--module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32""
gyp ERR! cwd /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
gyp ERR! node -v v5.6.0
gyp ERR! node-gyp -v v3.2.1
gyp ERR! not ok 
node-pre-gyp ERR! build error 
node-pre-gyp ERR! stack Error: Failed to execute '/usr/node-v5.6.0-linux-x86/bin/node /usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node --module_name=profiler --module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (/usr/npm-global/lib/node_modules/node-inspector/node_modules/node-pre-gyp/lib/util/compile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:100:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:185:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:827:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)
node-pre-gyp ERR! System Linux 3.19.0-25-generic
node-pre-gyp ERR! command ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/npm-global/lib/node_modules/node-inspector/node_modules/.bin/node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
node-pre-gyp ERR! node -v v5.6.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.27
node-pre-gyp ERR! not ok 
Failed to execute '/usr/node-v5.6.0-linux-x86/bin/node /usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node --module_name=profiler --module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32' (1)
/usr/npm-global/lib
└── (empty)

npm ERR! Linux 3.19.0-25-generic
npm ERR! argv ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/node-v5.6.0-linux-x86/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v5.6.0
npm ERR! npm  v3.6.0
npm ERR! code ELIFECYCLE

npm ERR! v8-profiler@5.6.1 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the v8-profiler@5.6.1 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-profiler package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-profiler
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-profiler
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /root/npm-debug.log
npm ERR! code 1
",pei-han,2016-05-03 12:30:34
862,2016-05-03 12:30:33,"If you want to install inspector from root, then use `npm install -g --unsafe-perm node-inspector`
",3y3,2016-05-03 12:30:34
862,2016-05-03 14:04:44,"change to root user,then execute below command
npm install -g --unsafe-perm node-inspector

Log

root@ubuntu:~# npm install -g node-inspector --unsafe-perm

> v8-profiler@5.6.1 preinstall /usr/npm-global/lib/node_modules/.staging/v8-profiler-82ee13f0
> node -e 'process.exit(0)'
> 
> v8-debug@0.7.3 preinstall /usr/npm-global/lib/node_modules/.staging/v8-debug-7024e75a
> node -e 'process.exit(0)'

/usr/npm-global/bin/node-inspector -> /usr/npm-global/lib/node_modules/node-inspector/bin/inspector.js
/usr/npm-global/bin/node-debug -> /usr/npm-global/lib/node_modules/node-inspector/bin/node-debug.js

> v8-profiler@5.6.1 install /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
> node-pre-gyp install --fallback-to-build

make: Entering directory `/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build'
  CXX(target) Release/obj.target/profiler/src/profiler.o
make: g++: Command not found
make: *** [Release/obj.target/profiler/src/profiler.o] Error 127
make: Leaving directory`/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build'
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:276:23)
gyp ERR! stack     at emitTwo (events.js:100:13)
gyp ERR! stack     at ChildProcess.emit (events.js:185:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
gyp ERR! System Linux 3.19.0-25-generic
gyp ERR! command ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""build"" ""--fallback-to-build"" ""--module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node"" ""--module_name=profiler"" ""--module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32""
gyp ERR! cwd /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
gyp ERR! node -v v5.6.0
gyp ERR! node-gyp -v v3.2.1
gyp ERR! not ok 
node-pre-gyp ERR! build error 
node-pre-gyp ERR! stack Error: Failed to execute '/usr/node-v5.6.0-linux-x86/bin/node /usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node --module_name=profiler --module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (/usr/npm-global/lib/node_modules/node-inspector/node_modules/node-pre-gyp/lib/util/compile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:100:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:185:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:827:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)
node-pre-gyp ERR! System Linux 3.19.0-25-generic
node-pre-gyp ERR! command ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/npm-global/lib/node_modules/node-inspector/node_modules/.bin/node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd /usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler
node-pre-gyp ERR! node -v v5.6.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.27
node-pre-gyp ERR! not ok 
Failed to execute '/usr/node-v5.6.0-linux-x86/bin/node /usr/node-v5.6.0-linux-x86/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32/profiler.node --module_name=profiler --module_path=/usr/npm-global/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.6.1/node-v47-linux-ia32' (1)
/usr/npm-global/lib
└── (empty)

npm ERR! Linux 3.19.0-25-generic
npm ERR! argv ""/usr/node-v5.6.0-linux-x86/bin/node"" ""/usr/node-v5.6.0-linux-x86/bin/npm"" ""install"" ""-g"" ""node-inspector"" ""--unsafe-perm""
npm ERR! node v5.6.0
npm ERR! npm  v3.6.0
npm ERR! code ELIFECYCLE

npm ERR! v8-profiler@5.6.1 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the v8-profiler@5.6.1 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! Make sure you have the latest version of node.js and npm installed.
npm ERR! If you do, this is most likely a problem with the v8-profiler package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get information on how to open an issue for this project with:
npm ERR!     npm bugs v8-profiler
npm ERR! Or if that isn't available, you can get their info via:
npm ERR!     npm owner ls v8-profiler
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /root/npm-debug.log
npm ERR! code 1
",pei-han,2016-05-03 12:30:34
861,2016-04-27 22:56:00,"This bumbs the version of v8-profiler so it works on Node v6. An issue is here for reference => https://github.com/node-inspector/v8-profiler/issues/89
",RobertWHurst,2016-04-30 19:59:59
861,2016-04-28 01:58:50,"WIP: I believe I will need to bump the version of v8-debug also before this is ready.
",RobertWHurst,2016-04-30 19:59:59
861,2016-04-28 02:09:05,"Blocked by https://github.com/node-inspector/v8-debug/issues/25
",RobertWHurst,2016-04-30 19:59:59
861,2016-04-28 07:35:42,"At current time publishing of completely working version is blocked by node-pre-gyp, which know nothing about node 6.0.0 - this disallow to save prebuilt binaries for 6.0.0 in to the package.

But v8-debug 0.7.3 is ready to work with node 6.0.0. And current node-inspector version is also ready (without any bumps) is you have correct build environment (node-gyp requirements)

So, I'll bump package versions some later, after node-pre-gyp update.
",3y3,2016-04-30 19:59:59
861,2016-04-28 16:47:52,"@3y3 Okie dokie. Should I close this for now?
",RobertWHurst,2016-04-30 19:59:59
860,2016-04-27 21:59:44,"I run node inspector piped to nodemon so whenever I make a change the server restarts using the following command.

`nodemon -x ""node-debug -b false bin/www""`

The problem is whenever it restarts the Chrome browser I see a message asking if I would like to restore my previous session. How do I make chrome to not show those messages?

![image](https://cloud.githubusercontent.com/assets/541359/14869432/bf4de3d8-0cd3-11e6-9b72-335f7bb12045.png)

Or did I craft the nodemon command incorrectly and there is a better way to handle server restarts?
",atif089,
859,2016-04-27 15:28:15,"Hi,
Not sure if it is already known issue.
When i start node-inspector and launch it in browser if shows below error in browser console.

I googled and found that ""ws://127.0.0.1:8080/?port=5858' failed""
is causing the issue. but could not find a solution to this.

Assertion failed: Unknown experiment canvasInspectionRuntime._assert @ Runtime.js:358Runtime.ExperimentsSupport._checkExperiment @ Runtime.js:953Runtime.ExperimentsSupport.isEnabled @ Runtime.js:894WebInspector.ProfileTypeRegistry @ ProfileTypeRegistry.js:19(anonymous function) @ ProfileTypeRegistry.js:43evaluateScript @ Runtime.js:153scriptSourceLoaded @ Runtime.js:136
Runtime.js:367 TypeError: Cannot read property 'createSetting' of undefined
    at Object.WebInspector.FilterBar.setName (FilterBar.js:62)
    at Object.WebInspector.NetworkPanel (NetworkPanel.js:47)
    at Function.WebInspector.NetworkPanel._instance (NetworkPanel.js:408)
    at eval (NetworkPanel.js:13)
    at evaluateScript (Runtime.js:153)
    at scriptSourceLoaded (Runtime.js:136)Runtime._reportError @ Runtime.js:367
InspectorBackend.js:185 Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check https://xhr.spec.whatwg.org/.
InspectorBackend.js:666 WebSocket connection to 'ws://127.0.0.1:8080/?port=5858' failed: Establishing a tunnel via proxy server failed.
InspectorBackend.js:698 Event {isTrusted: true, type: ""error"", target: WebSocket, currentTarget: WebSocket, eventPhase: 2…}InspectorBackendClass.WebSocketConnection._onError @ InspectorBackend.js:698
",connectpp,2016-04-27 19:56:06
859,2016-04-27 19:56:06,"I was able to resolve 
ws://127.0.0.1:8080/?port=5858' failed: Establishing a tunnel via proxy server failed.

I am on a company proxy and i had to check ""Bybass proxy server for local addresses"" in browser proxy configuration.
",connectpp,2016-04-27 19:56:06
858,2016-04-21 13:54:12,"We recently run into a situation where it would have been handy to be able to let node-inspector connect against a remote instead of local host for the debug connection (so no proxying is required). I had a look at the code and it looks like a no-brainer to implement.

Is there a specific reason why this is not possible? If not, would you be willing to accept a PR implementing this feature?
",else,
858,2016-04-21 17:43:25,"Are you want to start debugged process on one machine and node-inspector on one other?
Or only to connect to remote machine where are placed app and node-inspector?

The second case should work now.
",3y3,
858,2016-04-25 11:13:07,"Hi Yury, we are looking for the former use case: we need to connect to the Debug Port on a remote machine with a locally running node-inspector. Does that make it clear?
",else,
858,2016-06-10 17:40:45,"@3y3 @else we too would be interested in the former use case - debugging a remote node process while running node-inspector locally. Is that a feature which you are working on already or would be willing to add?
",mdhume,
858,2016-09-18 20:40:40,"+1
",fredleger,
858,2016-10-12 07:45:40,"+1
",markjbyrne81,
858,2016-10-14 21:47:54,"+1
",lucasyvas,
858,2017-03-24 17:14:35,"+1
That's a feature i would really like! 

I tried with ssh port 5858 forwarding, ~~but node process rejects connection from my local nodinspector~~
[EDIT]:
it is possible to connect from local node-inspector to remote node process on 5858 using ssh port forwarding:
just start 
`node-inspector --web-host=0.0.0.0`
but it fails anyway because it seems it tries to access source files from local machine.
<S_CODE_TOKEN>",aleclofabbro,
857,2016-04-20 01:53:19,"Runtime.js:358 Assertion failed: Unknown experiment canvasInspectionRuntime._assert @ Runtime.js:358Runtime.ExperimentsSupport._checkExperiment @ Runtime.js:953Runtime.ExperimentsSupport.isEnabled @ Runtime.js:894WebInspector.ProfileTypeRegistry @ ProfileTypeRegistry.js:19(anonymous function) @ ProfileTypeRegistry.js:43evaluateScript @ Runtime.js:153scriptSourceLoaded @ Runtime.js:136
InspectorBackend.js:185 Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check https://xhr.spec.whatwg.org/.
",hustxiaoc,
857,2016-04-20 01:56:28,"mac os
Node Inspector v0.12.8
Node v4.0.0
",hustxiaoc,
856,2016-04-16 23:03:44,"OS X 10.11.4 running Node v5.9.1 and Node Inspector v0.12.8

I changed my username and home directory from `samuel` to `sam` and now whenever I run `$ node-debug app.js`, I get this:

<img width=""532"" alt=""screen shot 2016-04-16 at 7 01 31 pm"" src=""https://cloud.githubusercontent.com/assets/1499476/14584120/cecdda88-0405-11e6-906c-c6e4b191ce93.png"">
",sdaitzman,
856,2016-04-16 23:05:48,"Moving the browser-launcher2 directory fixes this error of course, but it would be nice if less technically inclined users didn't have to figure that out 😋 
",sdaitzman,
855,2016-04-15 20:51:24,"I came across this problem: if an object has a very large amount of key/value pairs the debugger takes a long while to retrieve all the information at once to show it within the inspector panel. Consider for example the following code:

<S_CODE_TOKEN>

From the moment that the breakpoint is reached the inspector takes a while (~5 sec. on my system) to load all variables. Until then it stays like this:
![screen shot 2016-04-15 at 22 37 41](https://cloud.githubusercontent.com/assets/725536/14574440/0490081c-035c-11e6-829d-e12888660184.png)
The screenshot above shows that I tried running the same script generating 10x keys, but the waiting time did not increase linearly, instead I interrupted it after one minute and a half.
If this behavior depends on the fact that the client interface is trying to fetch everything at once I suggest that some kind of lazy fetching is implemented, given also the fact that my system connects to the server on a local VM, so network times should be negligible (go figure the waiting times in a remote connection).
",mikidep,
854,2016-04-14 12:24:37,"It seems I can't install node-inspector due to ""**node-pre-gyp install --fallback-to-build**"" that fails.

<S_CODE_TOKEN>

I am running OS X 10.11.4 on a Mac mini (Late 2014) with node.js v4.3.0 and npm v3.8.6
",Starscream27,2016-04-14 16:00:07
854,2016-04-14 16:00:07,"For installtion with `sudo` you should use npm flag `--unsafe-perm`
",3y3,2016-04-14 16:00:07
853,2016-04-11 08:02:11,"For immutable-js and ClojureScript users who want to display their data Custom Formatters is the main solution: https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview#

I' trying https://github.com/binaryage/cljs-devtools with node-inspector and it seems not working. Is it possible for Custom Formatter to work inside node-inspector since that's a Chromium feature?
",jiyinyiyong,
853,2017-01-19 18:00:04,I would like this also. Using node-inspector with Immutable.js but without [immutable-devtools](https://github.com/andrewdavey/immutable-devtools)' custom formatters is pretty difficult.,jrunning,
852,2016-04-11 05:50:19,"In README.md, there is a table of options.  The default value for `--web-host` is listed as `0.0.0.0`.  However, in the description of the field, on the same table row:

> Host to listen on for Node Inspector's web interface.  node-debug listens on 127.0.0.1 by default.

The correct default value does seem to be `127.0.0.1`.
",bradisbell,
851,2016-04-08 21:52:34,"### Versions

node-inspector version: 0.12.8
node.js version: 4.4.2
OS name and version: OSX 10.11.4
### Description

In my app I'm logging by doing:

<S_CODE_TOKEN>

Then I export the logger to the rest of my app. This works just fine, until I try to run using node-inspector, and the app crashes because `logger.log()` and `logger.error()` are undefined. Setting a breakpoint, my logger is a `WRAPPED_BY_NODE_INSPECTOR` object which doesn't implement any of the [expected console methods](https://nodejs.org/dist/latest-v4.x/docs/api/console.html).
### Screenshot

![image](https://cloud.githubusercontent.com/assets/317786/14398295/42e0dc70-fda0-11e5-8166-db7a3b7b773d.png)
### Workaround

Doing some tests, I tried this

<S_CODE_TOKEN>

Thus I'm able to workaround the error by changing my code to:

<S_CODE_TOKEN>

But it seems hackish, so I thought I'd create an issue.
",greim,2016-04-08 21:59:20
851,2016-04-08 21:59:56,"Would be fixed in next version.
Fix in master branch now.
",3y3,2016-04-08 21:59:20
850,2016-04-07 00:17:37,"Is there any way to ignore node's native modules, like modules. I don't think anyone wants to see that.
",zwhitchcox,
850,2016-04-07 00:22:41,"I tried `--hidden=['module.js']`, but sure enough, `module.js` is still shown in the debugger. Has anyone ever actually cared what `module.js` is doing? I'm trying to debug my code not node's native modules. I don't understand why it's even there, much less the default, and much lesser the default that is seemingly impossible to work around.
",zwhitchcox,
850,2016-04-07 20:17:05,"How about `--hidden=^module.js$`?
",3y3,
849,2016-03-30 03:38:57,"This fixes the issue on Mac OSX where it appears to be impossible to
enable any breakpoints while debugging ES6 code dynamically transpiled
by either babel-node or babel-register.
The initial cause of the problem is that the source and the target file
names in source maps produced by babel-register are exactly equal and
have no paths.
node-inspector already contains code that addresses this problem:
_checkSourceMapIssues()/fixWrongFileName() in lib/ScriptManager.js,
which appends "".source"" extension to the source file name in the source
map, when name duplication is detected. Unfortunately the code converting
URLs to absolute paths in that method does not work correctly with
Linux/OSX URLs: it strips the root slash from the path thus rendering
path invalid. This commit fixes this bug and also, exactly same bug
in lib/ScriptManager.normalizeName().
",apomortsev,2016-04-06 23:00:11
849,2016-04-06 23:00:54,"Thank you for contribution!
Source maps is a big problem of Node Inspector...
",3y3,2016-04-06 23:00:11
848,2016-03-29 13:44:43,"This fixes issue #767.  Starting with version 1.0.0, ws no longer depends on bufferutil, eliminating the need to install a compiler on Windows and the whole node-gyp thing.
",asselin,2016-04-06 23:03:39
848,2016-03-29 14:23:47,"I'm not sure why the 2 Travis builds failed... The failing testcase doesn't fail on my Windows or Mac system (although there is another testcase that fails on Windows due to / vs \ in expected path names).
",asselin,2016-04-06 23:03:39
848,2016-04-06 23:03:37,"Landed as c769ae92bfec5dc8fcb4d291abf94271b17dabfa
Thank you for contribution!
",3y3,2016-04-06 23:03:39
847,2016-03-25 22:14:37,"Hello,

I try:
`node-debug ./index.js --nodejs --harmony --nodejs --use_strict`
or 
`node-debug ./index.js --nodejs --harmony --use_strict`
without success.

Is it possible to use harmony and use_strict flag ?

Thanks in advance for your help.
",Alphapage,2016-03-26 09:09:32
846,2016-03-24 14:59:42,"Node-Inspector: Internal error: TypeError: Cannot read property '0' of undefined
Native node debug: nothing. 

My code don't have this error.

node-inspector - v0.12.7
node.js - v5.9.1
os - windows 10 x64.

I'm using promises, es6 and bluebird promisifycation.
",serproqnx,
846,2016-03-25 00:17:39,"Same issue here with OS X 10.10 and up-to-date node-inspector/Node.js. I can't quite replicate the problem reliably enough to give many details. What I can add is that I'm using promises (q library) and debugger statements rather than inspector's breakpoints.
",adam-back,
846,2016-04-02 04:11:02,"Same error here. I am running Mocha tesst which are using [bluebird](https://github.com/petkaantonov/bluebird/) promise package on:

node-inspector - v0.12.7
node.js - v0.12.10
npm - v3,8,5
os - WIn 8.1 x64

It only occurs when debugging it with node-inspector. Whithout using node-inspector the tests pass.
I did debug the whole process inside the bluebird itself, but didn't find any place where the exception was or would be thrown. As the error doesn't have stacktrace but only message I started to google it and found this issue.
",vellotis,
846,2016-04-06 15:23:05,"Same here I'm also running Mocha tests.  Tests all run fine when not debugging.  Have put a debugger statement in one of the tests and it never gets hit. 

After I get this in the console:
Internal error: TypeError: Cannot read property '0' of undefined

I can no longer pause the debugging (pause button just greyed out).

This used to work.

versions:
Node Inspector v0.12.5
node.js - v5.7.0
npm - v3,6.0
os - WIn 8.1 x64
",jackgeek,
846,2016-04-14 21:01:08,"I am running into the same issue. Tests run fine without the inspector. 

When I run them with node-debug, I get this error in console at some point randomly:

Internal error: TypeError: Cannot read property '0' of undefined

It doesn't pause at any of my breakpoints after the error.
Node Inspector -  v0.12.8
node.js - v5.6.0
npm - v3.6.0
os - OSX 10.10.5
",twisha16,
846,2016-04-16 00:31:36,"+1 !! The error is thrown at `runner = mocha.run(program.exit ? exit : exitLater);` in `_mocha`
",fxfilmxf,
846,2016-04-26 12:03:56,"node inspector 12.8
+1 same error, but not using any library apart from async
",gallexme,
846,2016-04-29 17:26:44,"+1

happens right when it tries to stop at a breakpoint or a debugger. node 6.0.0, node-inspector 0.12.8. windows x64
",ssteffl,
846,2016-05-06 19:13:25,"also having this issue: 
OSX 10
Node: v5.8.0
Node Inspector - v0.12.8
",ChuckJonas,
846,2016-05-26 18:58:08,"Same
Node v6.2.0  ( docker image node:6 )
Node Inspector: v0.12.8
",robertjustjones,
846,2016-06-08 12:31:34,"Hi, 
I have the same problem using Chrome version 50.0.2661.102, but It works with Canary version 53.0.2762.0.
",ntanitime,
846,2016-07-19 23:06:35,"Thanks for the note @ntanitime .

I just updated Chromium from 50.0.2661.102 to 51.0.2704.79 and it fixed this for me.
",poldridge,
846,2016-07-30 01:08:20,"I am having this issue in Chrome Version 52.0.2743.82 m
",sam9291,
846,2016-07-30 01:17:04,"Hi I found a solution for this problem, and it did works for me.
In my case I realized that the error happens when the console log is to long, so I just avoid to print to much  in the console and it did works.
",jmejiaz,
846,2016-08-24 13:40:54,"Same issue. Chrome 52.0.2743.116 m.  Using bluebird.
",scrawfor,
846,2016-09-03 11:10:55,"Same issue. Chrome 52.0.2743.116 m. Using bluebird.
",derakhshanfar,
846,2016-09-04 07:05:53,"node 5.3.0
node-inspector 0.12.8
chrome 52.0
in bluebird method i get that error
Cannot read property '0' of undefined
",derakhshanfar,
846,2016-09-11 00:34:53,"Same here. I am using angular-fullstack generated project.
`gulp serve:debug` and `http://127.0.0.1:8080/?port=5858` to hit it; Disable adsblock doesn't help.
node-inspector v0.12.8
node v5.11.0
osx 10.11.6
chrome 53.0
",viewplatgh,
846,2016-09-11 07:26:50,"i find better libary for debuging node application... iron-node ...its great
",derakhshanfar,
846,2016-09-19 19:13:05,"Same problem here. The error would not show any specific line or file where the error was coming from.

My setup:

<S_CODE_TOKEN>

I tried upgrading to Node ""v6.6.0"" and reinstalling my node_modules and node-inspector. However, node-inspector started throwing its own JavaScript errors when used. It seems it does not support that version of Node?

Then I installed the current LTS version, Node ""v4.5.0"", and reinstalled my node_modules and node-inspector. Everything seems to be running OK now.
",Joncom,
846,2017-02-27 22:05:43,"confirmed, iron-node is better",neutrino84,
845,2016-03-22 10:40:02,"Is there any plan to incorporate the Promise Inspector which was recently introduced to chrome developer tools?

If so is there anyway I can help?
",2color,
845,2016-04-08 22:51:46,"This is very hard.
In current time I prepare Node Inspector 1.0-alfa with most part of current DevTools features. (you can watch a progres in `next` branch)
But Promise Inspector and Async Stacktrace is out of scope of this release.

Maybe I see a way to implement this features, but this will be Node Inspector 2.0
",3y3,
845,2016-04-25 06:01:31,"Thanks for all the great work and efforts.
",2color,
844,2016-03-17 17:32:16,"I'm not seeing the map to filesystem option in the debugger, could just be missing it.
",andybp85,2016-04-08 22:02:08
844,2016-04-08 22:02:08,"Sources tree loaded in inspector already mapped to fs.
If you want to save changes to original sources, then look at `--save-live-edit` option
",3y3,2016-04-08 22:02:08
843,2016-03-16 14:40:09,"Running `node-debug --hidden ""request.js"" ...` hides the `request.js` files from the debugger UI.

But the following do not work properly

| Expression | Expected | Result |
| --- | --- | --- |
| `node-debug --hidden ""request.js"" --hidden ""config.js"" ...` | hides `config.js` and `request.js` files | no hidden files |
| `node-debug --hidden ""request.js"" --hidden ""request.js"" ...` | hides `request.js` files | no hidden files |
| `node-debug --hidden '[""request.js""]' ...` | hides `request.js` files | all files hidden |
| `node-debug --hidden ""['request.js']"" ...` | hides `request.js` files | all files hidden |
| `{ ""hidden"": [""request.js""] }` | hides `request.js` files | no hidden files |
| `{ ""hidden"": [""request\\.js""] }` | hides `request.js` files | no hidden files |

The documentation should be more specific:
- what is the correct format (inside the value)
- what is the correct usage of the `--hidden` parameter
- what is the correct format inside the config file
- what has priority
- what part exactly of the name/path is matched (up to what level in the tree?)

I am using `node` `v5.8.0` wth `node-debug` `v0.12.7` on OSX.
",gabipetrovay,
843,2016-04-08 22:58:25,"Thank you for verbose description.
First two cases should be fixed in https://github.com/node-inspector/node-inspector/commit/765ef7dc33132c31c1d0fdd1ddf4d461ae82bb99

Last two I'm not ready to fix now. Maybe this would be fixed only in Node Inspector 1.0-alfa (watch progress in `next` branch)

`node-debug --hidden '[""request.js""]' ...` is incorrect, because there we create a RegExp, which checks diapason of symbols -> `new RegExp('[""request.js""]', 'i')`
",3y3,
842,2016-03-15 16:23:39,"I am running the example code from https://nodejs.org/api/cluster.html. I am on node -v 5.3.0, 

I am running

<S_CODE_TOKEN>

there is no debug output.

Am I missing something? 

I also tried setting the env variable and still no dice

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",ajbeach2,2017-02-25 17:06:43
842,2017-02-25 17:06:43,"I upgraded node, and I got this to work. Closing",ajbeach2,2017-02-25 17:06:43
841,2016-03-14 22:20:56,"node-inspector v0.12.7
node v5.8.0
OS X 10.11.1
Chrome v49

<S_CODE_TOKEN>

The program is started paused, and a chrome window with devtools is opened. If I go to the Profiles tab, pick ""Collect JavaScript CPU Profile"", and hit Start, then `Profiler.start failed. Error: Debugger: Unknown command ""Profiler.start"" in request` appears in the console if I have the tray opened (the one toggled by the Escape key). I can no longer switch tabs, so I can't get to the proper console tab or the sources tab to resume the program.

Pushing Stop causes `Profiler.stop failed. Error: Debugger: Unknown command ""Profiler.stop"" in request` to show up in the console tray. Right-clicking the in-progress profile and clicking ""Delete"" restores the UI to a normal state, except that the program is still paused, and devtools says the program is unpaused.

Starting over... if I start the program, set a breakpoint somewhere, hit play to get to the breakpoint, remove the breakpoint, and start a CPU profile, I don't get any errors in the console tray, but the UI locks up, so I can't even tell the program to unpause. If I stop the profile, then the UI unlocks properly this time, but the profile is useless because it's just a profile of a paused program.

Starting over... if I start the program, hit play, start a CPU profile before the program finishes, let the program play past the point that it would have ended if node-inspector weren't keeping it alive, and stop the profile, then the UI stays locked up, and the profile never becomes viewable.

After a lot of trial and error, it seems like the only way I can profile a program is if the program is already running unpaused at the start, and then stop the profile before the program reaches its natural end. I can set a breakpoint before the end, but I'm given no indication at all when the breakpoint is hit while profiling.
",AgentME,
841,2016-07-31 23:07:54,"Same here with node-inspector v0.12.8, node v6.3.0, Win10
",summivox,
841,2016-08-10 21:50:42,"Profiling seems practically unusable for anything but long-running programs.

As an alternative for others running into this, I've found that the [new native node v8_inspector support](https://github.com/nodejs/node/pull/6792) works as expected for me: `node --inspect --debug-brk foo.js`. As far as I can tell it seems like a full replacement for node-inspector.
",AgentME,
841,2016-11-21 09:46:05," @AgentME thx ,it works for me.",wilbur1991,
840,2016-03-11 18:24:40,"hello ...

I am new to node ... I am following along in the book: Practical Node.js (Azat Marden).

I installed node-inspector using `npm install -g node-inspector --save` .... it took a couple of minutes but it appears successful.

Then I went to start node-inspector, but got the error message:  > 'node-inspector' is not recognized as an internal or external command operable program or batch file
- any thoughts? ... thanks ...
",dsdsdsdsd,2016-04-08 22:02:34
840,2016-03-11 19:23:05,"Are you using nvm?
",3y3,2016-04-08 22:02:34
840,2016-03-11 20:42:06,"not nvm ... npm ... I understand that nvm is a versioning 'module' (?), but I do not have it installed 
",dsdsdsdsd,2016-04-08 22:02:34
840,2016-03-11 22:28:37,"Hm... Are you trying to install any other modules globally?
In your case you don't have a directory with globally installed binaries in PATH.
Or maybe `--save` flag affects global installation. What you expect then use `--save` flag in your command?
",3y3,2016-04-08 22:02:34
840,2016-03-11 22:59:56,"I have installed some others globally ... for instance I installed 'modernizr' globally ... and you're right ... when I attempt to call/start 'modernizr' from the command prompt ($ modernizr), I got the same error ... so it must not be node-inspector, but rather some issue with my nodejs installation ...
- thanks ...
",dsdsdsdsd,2016-04-08 22:02:34
840,2016-03-11 23:01:14,"I was doing `--save` because I read that it will ensure that the relevant package.json file will be updated with the module id ...
",dsdsdsdsd,2016-04-08 22:02:34
839,2016-03-08 19:50:58,,Y--,
839,2016-03-13 02:01:14,"Thank you for contribution.
Can you please add test here?
",3y3,
839,2016-03-13 21:39:04,"Hi @3y3, thanks for considering my PR.
Sorry for the delay, I've finally got time to add a test.
It is not ideal but I could not find a better way to check whether an error occurred here or not :
https://github.com/node-inspector/node-inspector/blob/8dd50abcebe6d0029a1d48d74bccacf92052f1bf/lib/ScriptFileStorage.js#L246

Let me know if you have any suggesting to improve it.

Thanks!
",Y--,
839,2016-03-14 17:09:11,"This is not important to check errors here.
You need only check that you have expected result with correct input.
",3y3,
839,2016-03-14 17:26:22,"The expected result is tested.
Checking the errors that way is the only way I found to ensure that the algorithm won't follow the symbolic links until it faces an ""ELOOP"" error.
I can modify the implementation to have it being tested properly though
On my environment, I simply cannot use the current version of node-inspector because of this behavior, since it takes several minutes to start (or crash).
",Y--,
838,2016-03-08 05:37:43,"When I use ""forever"" to start a daemon process of node service , I can see the whole source code from browser( ""http://domain:8080/?port=5858"") . But the program doesn't stop at the breakpoints when I toggle some request from UI. 

bootstrap script as below

<S_CODE_TOKEN>

Then I found an error was thrown in the console

<S_CODE_TOKEN>

Maybe I meet the issue as same as #780 
",momoko8443,2016-03-09 08:44:06
838,2016-03-09 08:44:06,"I have found the reason of this issue, because the author used ""cluster"" to manage node's process, then I got the resolution from homepage (I'm sorry for missing it before commit this issue)

**Known Issues**

<S_CODE_TOKEN>

reference
[https://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/](url)

now close this issue, thanks 
",momoko8443,2016-03-09 08:44:06
837,2016-03-06 02:53:13,"Node-inspector module crashes when trying to access debug webpage.

<S_CODE_TOKEN>

I am using a gulp wrapper for node-inspector: https://github.com/koemei/gulp-node-inspector with the following gulp task:

<S_CODE_TOKEN>

I am trying to debug a Q concurrent execution of functions, these functions will launch and execute external processes such as selenium and phantomjs. I don't know whether this may be a problem.

<S_CODE_TOKEN>

url is merely a string, e.g: ""www.google.com""

Any help would be appreciated, thanks :)
",pedro93,2016-03-12 02:53:10
837,2016-03-12 02:53:10,"This is a problem in plugin.
In your case you can fix it by using

<S_CODE_TOKEN>

https://github.com/koemei/gulp-node-inspector/pull/18
",3y3,2016-03-12 02:53:10
836,2016-03-05 09:38:07,"when use http **keep alive agent** to send request, the node inspector's injection of network agent will leads to a **EventEmitter memory leak**. as the running time pass, the heap memory and non-heap memory will still increase, I guess the increase speed depend on the retain memory size of the closure, which hold by the socket connect event listener.
### versions:
- nodejs version: 4.3.1
- node-inspector version: 0.12.7  ( 0.12.5 also has this issue )
- os: ubuntu 15.10 / 14.04, x86_64, core: 4.2.0-30-generic
### **duplication:**

use the following code : [https://gist.github.com/Chunlin-Li/20ca5aa62cafed15d31b](https://gist.github.com/Chunlin-Li/20ca5aa62cafed15d31b)
- start up server.js as normal
- use `node-debug -b=false client.js` run client.js
- observing the output memoury info of client, you will see the increase obviously
- use profile tool dump the heap snapshot, you will find the main increase result from buffer and string.
- following picture show the memory change, and the object area show the path of leakage point.

![screenshot from 2016-03-05 17-25-48](https://cloud.githubusercontent.com/assets/6926291/13546916/59b30496-e2f7-11e5-9fe3-d8a6e2204efd.png)

> I tried use default http.globalAgent (no keepAlive), then the issue not occur.  
> I run code with out node-inspector, the socket in agent sockets pool has no any connect event listener. but use node-inspector, the connect event listener lead the memory leakage.     

---
### other info

<S_CODE_TOKEN>
",Chunlin-Li,2016-04-08 22:02:54
836,2016-03-05 18:57:24,"Can you test your node-inspector with next modification.

lib/Injections/NetworkAgent.js

<S_CODE_TOKEN>
",3y3,2016-04-08 22:02:54
836,2016-03-06 07:49:30,"@3y3 Thank you very much! 

I test it with my test case, it fixed the issue. the connect event of socket disappeared. memory usage back to normal.   

So, does it mean the bug will fixed in next release of node-inspector? 
",Chunlin-Li,2016-04-08 22:02:54
836,2016-03-06 11:53:54,"> So, does it mean the bug will fixed in next release of node-inspector?

Yes! Thank you for test.
I start to prepare next release.
",3y3,2016-04-08 22:02:54
835,2016-03-04 14:24:17,"Hello @dannycoates , can you grant me owner rights in `node-inspector` organization.
I will intentionally add new sub projects in organization after releasing of plugin system, so it will be not reasonable to take you each time when I want to add new project.
",3y3,2016-03-04 17:31:31
835,2016-03-04 17:31:31,"done :smile: 
",dannycoates,2016-03-04 17:31:31
834,2016-03-03 20:32:45,"Hello,

I'm trying to debug my script that is being invoked from some other script - i.e. I can't start node in debug mode. In my script I display it's PID and then use tasklist:

<S_CODE_TOKEN>

My script is in an endless loop calling npm sleep and displaying it's PID:

<S_CODE_TOKEN>

Now what I don't understand... If I do:
`process._debugProcess(3280)`
(that's the PID I'm writing out) nothing happens

But if I do:
`process._debugProcess(3944)`
I get the ""Starting debugger agent."" message.

Why can't I attach to 3280?

Here's more [info](http://stackoverflow.com/questions/35735020/how-to-debug-javascript-in-nodejs-on-windows-when-im-not-the-caller-of-node-exe)
",samodadela,
834,2016-03-04 14:50:32,"Maybe because you don't trace stdout and stderr of your child process to master process
",3y3,
834,2016-03-05 19:09:52,"3y3: Do you mean that the problem is that I just don't see the message? It's not that - because I did try to attach with node-inspector and it doesn't work (for 3280) - it works for the other one (3944).

Note: I'm not in control of the spawning of the child process. The child is a plugin the parent spawns.
",samodadela,
834,2016-03-05 19:20:36,"Hm... Can you try to connect to 5859 port instead of default 5858?
",3y3,
834,2016-03-05 19:39:25,"No luck with 5859 either. Note that the node.exe I want to debug is executing this code:

<S_CODE_TOKEN>

That's because I want to delay the script's execution until I attach. Can it be that this code is not giving node a chance to catch _debugProcess? 
",samodadela,
834,2016-03-05 20:19:50,"Reasonable.

In your situation you can do next trick in child_process:

<S_CODE_TOKEN>
",3y3,
834,2016-03-05 21:49:02,"Tried (added your code in child) - it does not work. 

Shouldn't _debugProcess be called from outside - not from my script. 
debugger; does nothing unless node is started in debug mode. 
",samodadela,
834,2016-03-05 22:09:02,"Are you removed `sleep` in this case?
I can't understand why this doesn't work for you...
Last chance - `kill -s USR1 <pid>`
",3y3,
834,2016-03-07 20:22:09,"3y3: sorry for the delay
kill -s USR1 won't work on Windows, _debugProcess is the only option.
I'll try to remove sleep (replacing it with timer) and report back.
",samodadela,
834,2016-03-07 20:47:17,"Replaced sleep with this (timer is too much work):

<S_CODE_TOKEN>

... tried to do _debugProcess multiple times but it still doesn't work. It's like the child node is ignoring _debugProcess. Do you know how _debugProcess works - how does it communicate with node?

P.S.: I also tried to execute _debugProcess elevated - no change.
",samodadela,
833,2016-03-02 09:59:00,"I seem to be stuck with a really bizarre issue here. I have the node-inspector server running locally. https://github.com/node-inspector/node-inspector#advanced-use I am now trying to run a Node project by specifying the path
`node --debug-brk /home/naveen/node-atom/index.js`
the index.js is just a simple one line Node app that prints a console line output.
Now when I navigate to chrome at this link http://127.0.0.1:8080/?port=5858 I do not get any attached process. However i get the command line log ""Debugger listening on port 5858
"". 

On the other hand, If I navigate all the way to the destination package and use the same command 
`node --debug-brk index.js`
the index.js file is attached as expected. 

Am i missing something here? TIA 
",naveenjafer,
833,2016-03-02 10:30:56,"This is the error that I receive. 

`Node Inspector v0.12.7
Visit http://127.0.0.1:8080/?port=5858 to start debugging.
Debugging`/home/naveen/nodeatom/index.js

Debugger listening on port 5858
Access to /home/naveen/node_modules/.bin from ResourceTree denied. (Error: ENOENT: no such file or directory, stat '/home/naveen/node_modules/.bin/electron')
Access to /home/naveen/clitrial/node_modules/.bin from ResourceTree denied. (Error: ENOENT: no such file or directory, stat '/home/naveen/clitrial/node_modules/.bin/electron')
Access to /home/naveen/atom/node_modules/styleguide/node_modules/.bin from ResourceTree denied. (Error: ENOENT: no such file or directory, stat '/home/naveen/atom/node_modules/styleguide/node_modules/.bin/highlights')
Access to /home/naveen/atom/node_modules/markdown-preview/node_modules/.bin from ResourceTree denied. (Error: ENOENT: no such file or directory, stat '/home/naveen/atom/node_modules/markdown-preview/node_modules/.bin/highlights')
Access to /home/naveen/atom/node_modules/fstream/node_modules/.bin from ResourceTree denied. (Error: ENOENT: no such file or directory, stat '/home/naveen/atom/node_modules/fstream/node_modules/.bin/rimraf')
Access to /home/naveen/atom/node_modules/fs-plus/node_modules/.bin from ResourceTree denied. (Error: ENOENT: no such file or directory, stat '/home/naveen/atom/node_modules/fs-plus/node_modules/.bin/rimraf')`
",naveenjafer,
833,2016-05-12 21:18:56,"I'm having the same issue and can't find a work around
",kevinperumal,
833,2016-05-19 04:34:24,"me too.. there is a lock sign on node_modules/.bin folder which i can't understand  how t o remove...
Any Solutions?
",eliavmaman,
833,2016-05-19 16:29:17,"@eliavmaman I removed/reinstalled all of my project's node modules and that seemed to take care of missing files error, but the node debugger is still not attaching to my front end app. Not sure what's going on but will keep playing around with it.
",kevinperumal,
833,2016-06-11 01:56:45,"I had this same problem.  In the Node Inspector UX I got a console message:

<S_CODE_TOKEN>

And in my app I got this log event:

<S_CODE_TOKEN>

It turns out that I had a symlink (.bin/mkdrip) that was no longer valid, because npm moved/removed mkdrip.  Blowing away your deps and reinstalling everything should clean this kind of failure up.

It would be nice if node-inspector didn't blow chunks and quit in this case.
",BobDickinson,
833,2016-06-13 13:27:02,"@kevinperumal 10x but still having this issue.
",eliavmaman,
832,2016-02-28 14:24:05,"I am using this setup https://babeljs.io/docs/setup/#mocha to run mocha tests written in ES6. I would like to debug a mocha test with node-inspector. Running ES6 mocha tests works fine with this setup.

In order to debug, I run `node-inspector` in one terminal and

<S_CODE_TOKEN>

 in another. I can debug in principle, i.e. on any ES5 code I can set break points. Any breakpoints in my ES6 tests get ignored. It looks like node-inspector does not pick up any sourcemaps.

Now babel-register does create sourcemaps by default, only I have no idea whether or not it saves compiles files to disk and whether node-inspector has a chance to get its hand on the sourcemaps.

Has anyone managed to debug code in node-inspector that has been processed with babel-register?
",mdotasia,2016-04-08 22:05:35
832,2016-02-29 21:06:12,"I did some more analysis. It turns out that on Windows 7 with Node 5.6.0 I can debug mocha tests without problem. When I debug a `test.js` (ES6) I launch node-inspector/mocha as described in my previous comment in Chrome. Then I can set breakpoints in `test.js`. I press continue and then I see that node-inspector replaces `test.js` with the compiled versions and a `test.js.source` appears, which contains the original source ES6 code. In `test.js.source` I can set additional breakpoints and all is good.

Now I switch to my Mac and do exactly the same thing. In Chrome the test exits with an error. In Opera I have more luck and I can launch the debug session and set a breakpoint in `test.js`. I press continue and the debugger stops in the compiled file. The original ES6 file does not seem to be linked to the compiled file, even though I see inline sourcemaps. None of the magic that happened in Windows seems to happen on my Mac.

What's going wrong here?
",mdotasia,2016-04-08 22:05:35
832,2016-02-29 21:23:02,"Hm... Last time then I fix source maps I make if for Win.
Maybe now I need to inspect problems for Mac.
I don't promise that this will be fast - in current time I intentionally work on major release.

Is your issue happens only for main file or also for all sub scripts?
",3y3,2016-04-08 22:05:35
832,2016-02-29 22:01:18,"In above scenario I'm running my tests with

<S_CODE_TOKEN>

and then I'm trying to debug only the test that failed. Weirdly on Windows it works all fine. But Mac seems to be broken.
",mdotasia,2016-04-08 22:05:35
832,2016-03-02 04:30:28,"I played around with `node-inspector` debugging a bit more and tested debugging with normal babel compilation, i.e. not using `babel-register` for on-the-fly compilation but **compile first** and **then debug**. Here is what I found for debugging with `node-inspector`:
- Windows: debugging with
  - `babel-register` (implicit inline source maps): **works**
  - `babel -s` (source maps in separate files): **works**
  - `babel -s inline` (inline source maps): **does not work**
- Mac: debugging with
  - `babel-register` (implicit inline source maps): **does not work**
  - `babel -s` (source maps in separate files): **works**
  - `babel -s inline` (inline source maps): **works**
",mdotasia,2016-04-08 22:05:35
832,2016-03-06 14:42:13,"same issue here with babel-register on OS X  while it is working fine on windows
",dhax,2016-04-08 22:05:35
832,2016-03-11 03:50:17,"I'm running mocha tests using babel-register on Mac and am seeing the same issues.   I don't hit my breakpoints in node-inspector for any files that are have been transpiled by babel.  Node 5.8.0, babel-register 6.7.2.
",itaylor,2016-04-08 22:05:35
832,2016-03-14 10:36:45,"+1 (babel-register on OS X)
",AndrejGajdos,2016-04-08 22:05:35
832,2016-03-24 17:03:48,"I can confirm this is happening too.

The strange thing is that on a clean install it worked fine initially but after a while started messing up.
I noticed the following behavior:
- Running node-inspector separately returns the transpiled code
- Running node-debug picks up the original files (but I can't get the program to execute)
",papaspiridis,2016-04-08 22:05:35
832,2016-04-08 22:05:35,"Should be fixed in 0.12.8
",3y3,2016-04-08 22:05:35
832,2016-04-30 15:24:40,"doesn’t work for me.

i’m using `mocha.opts` to specify `--compilers js:./my-babel-register.js --recursive`

my-babel-register.js:

<S_CODE_TOKEN>

when i run `node_modules/.bin/node-debug node_modules/.bin/_mocha`, i end up in “modules.js”, on the line

<S_CODE_TOKEN>

break points don’t work, i can only run the tests to the end.
",flying-sheep,2016-04-08 22:05:35
832,2016-06-15 16:26:41,"+1
the same issue with v.0.12.8 on OS X
",alexanderkartavtsev,2016-04-08 22:05:35
832,2016-06-28 03:58:58,"@mdotasia Do you mind sharing exactly how you compile your ES6 code and how you test it? I can't seem to get the combination of stuff right to get Babel + Mocha + node-inspector working in order to debug ES6 code with Mocha. Thanks!
",wafisher,2016-04-08 22:05:35
832,2016-09-25 10:24:20,"@wafisher 
@mdotasia mentioned a couple of ways of compiling es6 using babel and then testing it with mocha.

the easist way (and most common way) is either
1. mocha --require setup.js  your_test.js  , while  in setup.js, you have  require('babel-register')(); 
2. mocha --compilers js:babel-register your_test.js 

you open the first terminal running node-inspector, then you startup mocha with --debug-brk, and it works on windows . I've tested it today, works fine (there is some performance issue, which I raised a issue #929 

after I read @mdotasia 's description, I tried the second approach, which is to pre-compile/transpile es6 to es5 using babel cli. 

<S_CODE_TOKEN>

which will transpile your es6 source code and put it into compiled dir.

you then follow the same process to debug it. and performance is improved. I have also verified this.

I just have one question: why node-debug doesn't work??? why must run node-inspector in separate teminal??
",bochen2014,2016-04-08 22:05:35
831,2016-02-23 16:59:42,"It's difficult to know if this is actually an NI bug but here goes anyway: 

Node Inspector v0.12.6

I'm writing some test files in coffeescript. I compile them to js and kick off a mocha debug via: 

`mocha --compilers coffee:coffee-script/register ./test/unit.coffee --timeout=45000 --ui bdd -g 'reference xml' --debug-brk=6432`

This line has been the same for 6+ months. However since I upgraded to NI 0.12.6 I have seen some strange behavior: 
1. transpile coffee to js 
2. start mocha test with debug-brk
3. refresh NI window in Chrome
4. step through some js code
5. see a small bug, change it, save, continue execution
6. step through some more breakpoints
7. test fails 

When I go back to the `unit.coffee` file I find that it is now a javascript source file! 

Instead of this in `unit.coffee`: 

<S_CODE_TOKEN>

I now have: 

<S_CODE_TOKEN>

This is bizarre behavior. I did not see it before the upgrade to NI 0.12.6. 

Suggestions for tracking down where this bug is coming from? Could be a v8debug issue. 

Just to be clear I am debugging **javascript**, not coffeescript. There is no mapping information at the bottom of the transpiled file. 

I am editing the coffee files with Webstorm. I only see this behavior when I save an edited js file from the chrome debugger though. 
",jcollum,
830,2016-02-22 22:29:59,"Not sure if this is an appropriate place to put this bug, but I figured we can move it if needed.

The following code breaks the debugging process completely:

<S_CODE_TOKEN>

The arguments that I was passing look like this:

<S_CODE_TOKEN>

Ironically, the console.log() does work and completes successfully but the debugger refuses to hit any subsequent breakpoints.

<S_CODE_TOKEN>
",joshjung,2016-04-08 22:07:23
830,2016-04-08 22:07:08,"This is a bug of some node versions.
Should be fixed in latest versions of node.
",3y3,2016-04-08 22:07:23
829,2016-02-22 15:10:56,"Could someone explain why the same nomenclature isn't used for both the node-debug argument and the node-inspector options?  There may be a good reason but, if not, it may be worth changing the ""--no-preload"" argument to ""preload"" in order to make it more consistent and intuitive.
",superclarkk,2016-02-22 23:17:17
829,2016-02-22 18:58:11,"You feel free to use `preload=false` everywhere. `--no-` prefix is only syntax sugar from `yargs` arguments parser.
",3y3,2016-02-22 23:17:17
829,2016-02-22 23:17:17,"oh, I see. So, `reload=true` is the default, which is why there is only the need for the `--no-preload` argument (eg. `node-debug --no-preload app`).  Now that I think about it, this seems reasonable. 

Apologies - I'll close this ticket.
",superclarkk,2016-02-22 23:17:17
828,2016-02-16 21:00:04,"Can you please add a `license` prop to `package.json`? I believe you're using http://spdx.org/licenses/BSD-2-Clause.html.

<S_CODE_TOKEN>

Also, [`LICENSE`](https://github.com/node-inspector/node-inspector/blob/bd733705673b158e3dcb022f67f7cf386e7fa61e/LICENSE) is formatted poorly, especially for reading on GitHub. Additional line breaks and wrapping at something like 80-chars would be helpful.

Thanks!
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30914906-licensing-info?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jmm,
827,2016-02-16 20:18:11,"<S_CODE_TOKEN>

Why does it say visit :8080 when I asked for :3000? Is this a bug, or am I misunderstanding it?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30913210-custom-port-not-working?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",tejasmanohar,
827,2016-02-16 23:42:53,"@3y3 Moving issue from [here](https://github.com/node-inspector/node-inspector/issues/538#issuecomment-184895977) to this thread. In the docs - https://github.com/node-inspector/node-inspector#options -, it says 0.0.0.0 is the default value in the default column but in the description, it says ""listens on 127.0.0.1 by default"". Confused :confused: 
",tejasmanohar,
827,2016-02-16 23:43:57,"@3y3 Saw latest response here- https://github.com/node-inspector/node-inspector/issues/538#issuecomment-184925364. I'll check on those two things and post back here instead of the old issue since that seems like a different question, not this bug.
",tejasmanohar,
827,2016-02-16 23:48:05,"What will say

<S_CODE_TOKEN>

Looks like a bug in passing options from `node-debug` to `node-inspector`
",3y3,
827,2016-02-16 23:51:52,"got it. now that it's running - it seems the web interface works for a bit until the inspector server crashes with the following error message-

<S_CODE_TOKEN>

so the web interface loses connection of course and gets a timeout request err code.
",tejasmanohar,
827,2016-04-01 02:37:49,"I am seeing a similar issue with `node-debug --web-port` option.  The browser window opens to the correct url but fails to load the code and the start debugging at the initial breakpoint.  For the record `node-debug src/app/app.js` works just fine.  The error I see occurs with all of these command-line options:

`node-debug --web-port=8008 src/app/app.js`
`node-debug --web-port 8008 src/app/app.js`
`node-debug -p 8008 src/app/app.js` 

Ubuntu 14.04
Chrome Version 49.0.2623.108 (64-bit)
node v5.9.1
npm 3.7.3
Node Inspector v0.12.7

Here is a screenshot:

![image](https://cloud.githubusercontent.com/assets/2091261/14196278/d54a3716-f790-11e5-9cbb-5f1fc83dea66.png)
",lukebmay,
827,2016-06-21 09:39:34,"+1
Even using the same default port it fails, therefore it seems the issue is really related to how the parameter is processed:

`node-debug --web-port 8080 server.js`
",pacoita,
827,2017-03-23 16:39:15,"+1 using port redirection of the docker-compose

<S_CODE_TOKEN>
",alvarocantador,
826,2016-02-14 23:27:57,"When I have to change my source code at my editor i have to restart the debugger from CMD to see new changes.
Is there any solution to update debugger after any code change? 
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30848653-update-debugger-after-source-files-changed-outside-of-the-debugger?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",sirramin,
826,2016-04-27 17:55:24,"+1
",MarcosRava,
825,2016-02-14 17:39:01,"1. Set a breakpoint
2. Run some code
3. Hit breakpoint 
4. Repeat a few times
5. Remove the breakpoint
6. Continue running code

Expected: code does not stop on breakpoint. 

Actual: about 50% of the time the removed breakpoint is still active somehow. It won't have a blue arrow on that line but the execution is still stopping on that line. 

I'm sure this is a duplicate but I couldn't find another issue about this. Is it a bug in v8 debugger? Where would I submit that if so? 
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30842865-removed-breakpoints-are-still-causing-stops-v0-12-6?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jcollum,
825,2016-05-25 19:57:12,"Still happening in 0.12.8: 

<S_CODE_TOKEN>

I have noticed that refreshing the browser will eliminate the phantom breakpoint, so that helps. 
",jcollum,
824,2016-02-10 22:17:18,"The following watch expression is the only watch set:
        this[this._wireMap[i][0]].toString

When I hit a breakpoint anywhere in my application, the stack dumps (below) and node exits. You can see in the stack dump where it is trying to eval the expression. Remove the watch and the problem goes away.

Node v5.6.0
Node Inspector v0.12.6 

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30739140-watch-expression-causes-crash-on-breakpoint?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",danaxtman,
824,2016-02-10 22:23:10,"Hm, I think we can reproduce this in common node debugger.
It doesn't looks like an internal node-inspector's error.
",3y3,
824,2016-02-10 22:29:27,"Also you can try to start node with flag `node --max-stack-size=300`
",3y3,
823,2016-02-10 13:41:00,"node v4.2.6
Node Inspector v0.12.6

On tracing it the crash occurs in vm.js.

<S_CODE_TOKEN>

Called from util.js:

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30720886-complete-application-crash-when-console-log-ing-an-object?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",prawnsalad,2016-04-08 22:11:07
823,2016-02-10 14:11:08,"Small example of code where I can debug this?
",3y3,2016-04-08 22:11:07
823,2016-02-10 14:26:54,"It's a nodejs bug and was fixed in the latest version of node. See https://github.com/nodejs/node/pull/4819 .

Maybe we should provide a hotfix for this since it affects a large range of node version (broken since v4.2.4)
",gzzhanghao,2016-04-08 22:11:07
823,2016-02-10 14:36:56,"Latest 4.2.\* releases have some other bugs in debugger. (Does not possible to inspect promises. Sometimes debugger can't respond on `evaluate` request, if it is not paused)
So, debugging on latest 4.2.\* and 5.\* is painful.
I'm not sure that one hotfix will be useful here.
",3y3,2016-04-08 22:11:07
823,2016-02-10 14:48:11,"I'll try with some different node versions, but for completeness this is how to reproduce it 100% of the time:

<S_CODE_TOKEN>

Interestingly, it only happens when console.log()ing in that order with this snippet with the 2 separate calls. Though I'm sure it must happen in other orders as my application currently has a lot of debugging output but no numbers.

Quick note: the setTimeout() is purely to keep the process from exiting for testing this.
",prawnsalad,2016-04-08 22:11:07
823,2016-02-10 15:08:12,"Quick tests on that snippet:
Node 0.12: works
Node 4: crashes
Node 5: works
",prawnsalad,2016-04-08 22:11:07
823,2016-02-10 15:16:31,"Are you tested on 4.3?
",3y3,2016-04-08 22:11:07
823,2016-02-10 15:34:06,"@3y3 Yes. 4.2 and 4.3 crashes
",prawnsalad,2016-04-08 22:11:07
823,2016-02-11 01:59:07,"Also crashes in 5.1, here is a minimum reproduction of it:

<S_CODE_TOKEN>

Run `node --debug-brk test` and `node debug localhost:5858`, node crashes just after you step over the runInDebugContext method. 

Overriding vm.runInDebugContext may help, it's the only method I found that leads to this issue.
",gzzhanghao,2016-04-08 22:11:07
823,2016-02-12 14:54:21,"This might be related to https://github.com/nodejs/node/issues/4261
It started to work for me from `5.4.1`, then with `5.5.0` `node-inspector` stopped breaking on `debugger` and `breakpoints`. Just installed `5.6.0-r1` and so far debugging seems to work.
",derenio,2016-04-08 22:11:07
823,2016-02-16 13:13:46,"Any update on this issue?
",gijohn,2016-04-08 22:11:07
823,2016-04-08 22:10:52,"This is a node bag. Should be fixed in latest node versions.
",3y3,2016-04-08 22:11:07
822,2016-02-09 20:33:02,"Often, it will take a long time for sources to load into the node-inspector. Unfortunately, there's no feedback to the user about this process, which can cause new users to abandon the tool. This pull request provides a proof-of-concept loading message to the user, and suggests the --no-preload flag after a set period of loading time.

There is likely a much more elegant solution for presenting feedback to the user, and I'd be happy to discuss an alternative approach to adding this feature.

Features:
- Displays ""Loading files..."" animation while sources are loading
- After 5 seconds, if sources have not loaded, suggests --no-preload

Example image:
![loading files](https://cloud.githubusercontent.com/assets/8904715/12929904/4f9ef2f2-cf2a-11e5-8450-d6727b7c36ab.png)
",azellsworth,
822,2016-02-09 21:05:12,"Hello @azellsworth , thank you for contribution.

Unfortunately we can't change something in `front-end` folder, because it updates automatically sometimes.
Look at `front-end-node` folder, there placed all our overrides.

I'd like your idea. But we need some changes here.

Instead of injecting in `registerCommand` func, you can define your own event (look at `showConsole`), which will be sent to front-end on start of `getRecourceTree` processing (and maybe in progress).

So `getResourceTree` in `lib/PageAgent` will looks somethind like that:

<S_CODE_TOKEN>

Event info is optional solution. But if you want, you can add real progress by sending `getResourceTreeProgress` after each `iterate` call in `lib/ScriptFileStorage.js`

Also would be nice to use DevTools api to create message. You also can use css instead of direct styling.
The example of css injection exists in `front-end-node/settings`
",3y3,
821,2016-02-06 23:24:05,"I'd like to provide some small amount of feedback to the user about the sources loading into the node-inspector. 

Ideally this would be a progress bar that shows the percentage of javascript files that have been loaded. At the very least, I'd like to show whether files are being loaded at all, or if the process has stopped. 

I find that especially for large projects, it takes quite a bit of time for the sources to pop up, presumably since many javascript files need to be searched for and loaded. I've seen many people abandon using the node-inspector because their sources are not loading quickly, and they think that the software is broken. Giving them some feedback would be very helpful to encourage them to wait.

Alternatively, users can add the `--no-preload` flag for faster loading, but most are unaware of this option. It could be useful to suggest this on the browser page when sources take more than a given amount of time to load (maybe 5-10 seconds).

Please let me know if this feature would be useful. I'd love to contribute and help to build it.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30614048-providing-feedback-to-user-about-source-loading?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",azellsworth,
821,2016-02-19 21:55:50,":+1: 
",focusaurus,
820,2016-02-05 16:21:59,"I've used node-inspector in the past but today it's taking 3+ minutes to hit the first line of a file containing only `console.log('hello');`. During this time node is running at 100% on one core and Chrome is showing the dev tools but with no files shown.

I'm using v0.12.5 on node v4.2.6 (installed via nvm) on OS X 10.10.5 on a latest generation Macbook Pro. I've tried uninstalling and reinstalling node-isnpector. I've also tried switching to node v0.12. Same thing. Adding `--no-preload --hidden='node_modules/'` makes no difference. What else can I try?
",tamlyn,2016-02-09 12:15:01
820,2016-02-06 23:02:33,"Hey Tamlyn! I've noticed the same thing on a couple projects, especially when there are a lot of dependencies (e.g. a packed node_modules folder). 

The `--no-preload` flag on the node-inspector often fixes this, but will sometimes throw the following error when you load the inspector in your browser: `Uncaught SyntaxError: Unexpected end of input` . When this happens, none of your sources will load, making the inspector kind of useless.

You can check for this error when loading node-inspector by opening the dev-tools and looking for this error in the console. For the time being, I've gotten around this by just reloading the page until the error doesn't show up. Haven't been able to identify a source of this issue yet, but it seems to happen a bit randomly. 
",azellsworth,2016-02-09 12:15:01
820,2016-02-09 12:15:00,"Should be solved in `node-inspector` 0.12.6
Now `hidden node_modules` will work as expected.
",3y3,2016-02-09 12:15:01
820,2016-02-09 12:40:32,"Instant startup! 👍
",tamlyn,2016-02-09 12:15:01
819,2016-02-04 13:32:29,,gzzhanghao,2016-02-04 23:20:11
819,2016-02-04 13:45:55,"LGTM. Please squash changes to one commit. I don't see reason to review this in isolated pr.

Or wait... Don't worry about squashing now. I will merge this changes in `next` branch and squash it in cleanup `rebase`
",3y3,2016-02-04 23:20:11
819,2016-02-04 14:12:05,"@3y3 Well, I thought you want to merge these commits separately, I'll squash it now.
",gzzhanghao,2016-02-04 23:20:11
818,2016-02-04 09:16:19,"Moved from https://github.com/node-inspector/node-inspector/pull/817
",gzzhanghao,
817,2016-02-03 18:23:16,"This PR includes some bug fixes and enhancements.

Bug fixes:
- https://github.com/node-inspector/node-inspector/commit/1b6491bc75ad1375b22e83ac9939dd660f75549b Fix ConsoleAgent with large stack trace
- https://github.com/node-inspector/node-inspector/commit/b617bfb4cdcc893acd789dca095e4d2a39455307 Fix this pointers in DebuggerAgent
- https://github.com/node-inspector/node-inspector/commit/9983cf0906ba24c22e968e482617fd8bc8aa5245 Fix restart frame handle

Enhancements:
- https://github.com/node-inspector/node-inspector/commit/143370a74be1919630bd836b366638a3fb65c3eb Gracefully exit after receiving SIGINT
- https://github.com/node-inspector/node-inspector/commit/5fc5d24d5689b3f9e5cdb022a6da55ff271f0a8d Ignore errors when reading files
",gzzhanghao,2016-02-04 09:16:39
817,2016-02-04 08:57:39,"@gzzhanghao , thank you for pr. Can you please retarget it to `next` branch instead of master.
`Fix this pointers in DebuggerAgent` - resonable
`Ignore errors when reading files` - reasonable
`Gracefully exit after receiving SIGINT` - reasonable, but remove console.log
`Fix restart frame handle` - outdated. Implemented in injection.
`Fix ConsoleAgent with large stack trace` - I will describe problem after your rebase

I prepare also description of roadmap. Coming soon.
",3y3,2016-02-04 09:16:39
817,2016-02-04 09:16:39,"Move to https://github.com/node-inspector/node-inspector/pull/818
",gzzhanghao,2016-02-04 09:16:39
816,2016-02-02 18:41:40,"**Problem:**
With preload disabled, files are missing from the LHS ""sources"" panel.

Note: app started using `node-debug .`

**Workaround**
Enable preload, Workaround in #814  may help

**Environment:**

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30461497-with-preload-disabled-files-are-missing-from-the-lhs-sources-panel?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",superclarkk,
815,2016-02-01 19:16:53,"I originally made a post on stackoverflow:

http://stackoverflow.com/questions/35096574/node-inspector-only-loads-the-www-file-when-preload-is-set-to-false

Basically, when I run 

`node-inspector --preload=false`

My chrome debugger only displays the bin/www file. None of the other folders or files are available like if I would have just run node-inspector

![debug not working](https://cloud.githubusercontent.com/assets/1719221/12728033/b9fe5306-c8d4-11e5-95e3-6c68114dc47f.png)

I tested this on a colleagues machine and his chrome debugger displays all the files appropriately.
",robodude,2016-02-01 20:40:33
815,2016-02-01 20:40:33,"I uninstalled node, reinstalled it to the latest version (4.2.6) and node-inspector started working again appropriately.
",robodude,2016-02-01 20:40:33
814,2016-01-28 16:15:02,"**Problem:**
With preload enabled, when I open particular .js files (via double-clicking them in the LHS ""sources"" panel), they wrongly show as blank.

This happens when debug-brk is enabled (ie the default) and the ""Resume script execution"" is clicked _before_ clicking on the problem files.

Note: app started using `node-debug .`

**Workaround**
The workaround is to click the problem files _before_ clicking ""Resume script execution"".
Alternatively, enable preload and disable debug-brk. 

**Environment:**

<S_CODE_TOKEN>

I've tested the following node-inspector versions:

<S_CODE_TOKEN>

I also installed the next branch using `npm install -g https://github.com/node-inspector/node-inspector.git#next`, but it returned [this error](http://i.imgur.com/stNoJ50.png).

The following two .js files seem blank when viewed in node-inspector

`server/model/sequelize/index.js`

<S_CODE_TOKEN>

`/server/config/model-sequelize.js`

<S_CODE_TOKEN>

Let me know if I can supply any more information that could help.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30301770-with-preload-enabled-some-js-files-open-blank?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",superclarkk,
814,2016-02-02 21:20:10,"Hm, when we click on preloaded file before script execution, we load it from disk by node-inspector
When we click in resumed script (where sources was loaded in app memory) we try to receive source from app's memory.

Can you log this place https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L65-L81

in your node-inspector.

Something like this:

<S_CODE_TOKEN>

I'm interesting in difference between working and failing outputs.
",3y3,
814,2016-02-03 11:42:53,"I replaced your code, but it caused node-inspector to crash with [http://i.imgur.com/NlMm1XK.png](http://i.imgur.com/NlMm1XK.png).

It may be because `result` in the code (near the end), `console.log(null, result);`, is not defined.
",superclarkk,
814,2016-02-03 14:06:39,"Yes, it's a problem =)
I updated my code example.
",3y3,
814,2016-02-03 14:42:04,"Thanks. Actually, I fixed the code as follows, but nothing was logged to the console:

<S_CODE_TOKEN>

Then I tried your updated code but, unfortunately, nothing was logged to the console either.
",superclarkk,
814,2016-02-04 14:59:46,"Note, updated environment:

<S_CODE_TOKEN>

I've tried calling `console.log()` right at the top of some of the node-inspector scripts. To summarise:

The following are called:
- `./index.js`
- `lib/config.js`

The following are **not** called:
- `lib/PageAgent.js`
- `lib/DebuggerAgent.js`
- `lib/ScriptFileStorage.js`
- `lib/ScriptManager.js`

Can we try something else?
",superclarkk,
814,2016-02-07 17:52:01,"Ok, I understand why you don't see anything in console.
You start fron `node-debug` command.
To see correct node-inspector output you need to start it separately:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

So now we can see your output for interesting lines.
",3y3,
813,2016-01-27 14:07:26,"Node Inspector v0.12.5

running: (for a while during debugging...)

<S_CODE_TOKEN>

initial output:

<S_CODE_TOKEN>

and then...:

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30257487-error-node-inspector-threw-an-error?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",MathijsvVelde,
813,2016-03-04 10:42:26,"I am getting the same error when I try to start a debugging session for a nativescript app.
I start node-inspector on port 8181
In Google chrome I go to url : http://127.0.0.1:8181/debug?port=40001
At that time the same error as MathijsvVelde mentioned is thrown.

Can you look into this?
It's pretty hard to debug without the proper tooling.

Thanks in advance,
Johan Beumer
",JohanBeumer,
813,2016-04-06 06:09:55,"Hi,

same occurs on my application after updating to latest v.12.7 ...
I'm using a ssh tunnel to debug my app directly on the server via port 8183 (Windows 7).

I've started node-inspector on port 8183 via windows commandline
`node-inspector --debug-port 8183`
no errors occured ...
and called it in google chrome with
http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=8183
... ui stops with same error in console like above.

> Can you look into this?
> It's pretty hard to debug without the proper tooling.

... there is nothing to add :)

Thanks,
Niels
",ronie-z-wave,
813,2016-10-29 11:34:59,"Same here.

Node Inspector v0.12.8
",emimull,
812,2016-01-27 13:34:17,"In the description it says ""defaults to 127.0.0.1"", so this should also be stated in ""Default"" column.

Furthermore the output `Node Inspector is now available from http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858`should perhaps get adjusted to point out that when connecting from remote machine (or just vm host) both occurrences of `127.0.0.1`have to be replaced.
",FlorianLoch,
811,2016-01-22 19:11:07,"<S_CODE_TOKEN>

The execution passes and there is no way to resume.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/30124229-generator-breakpoints?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",munichlinux,
810,2016-01-21 11:58:57,"I try to debug a mocha test script
I have a breakpoint in my API-controller function (locomotive-js)
I use `npm run test-debug` which translates to:

<S_CODE_TOKEN>

Test are running inside a vagrant box (Debian wheezy) with 
- node v4.2.5
- mocha 2.3.4
- node-inspector v0.12.5

The problem is my breakpoints are completely ignored.

The test is halted on the first line of the script, but when I resume it, additional breakpoints in my code get ignored. I'm sure that code is reached because my console.log statements get executed

Is this a bug are am I doing this the wrong way?
",ernie58,2016-01-22 12:18:50
810,2016-01-22 12:06:04,"Please try to start `./node_modules/mocha/bin/_mocha` instead of `./node_modules/mocha/bin/mocha`
It may be helpful
",3y3,2016-01-22 12:18:50
810,2016-01-22 12:18:50,"Thx @3y3 , it helped!
",ernie58,2016-01-22 12:18:50
809,2016-01-18 17:03:10,"When I debug my node application I'm using Profiles to take a Heap snapshot. This works when I start the app and press it, however after I let the app run the Heap profile get's infinitely stuck on ""Snapshotting..""

Node Inspector v0.12.5
Node v5.4.0
OSX 10.11.1
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29983462-stuck-on-snapshotting?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",herkyl,
809,2016-01-19 06:43:53,"Just to clarify I am now using https://github.com/bnoordhuis/node-heapdump for heapdumps and it's working fine
",herkyl,
809,2016-02-03 21:44:00,"I have the same problem.
",JoshuaWise,
809,2016-08-10 03:18:44,"I had the same issue with `node-inspector` getting stuck on snapshotting. The node version I was using was `v5.3.0`. I switched to `v6.2.0` and snapshotting works perfectly. Just thought I would share.
",poeticninja,
808,2016-01-15 14:35:49,"## Roadmap v1.0:
- [x] Inject webkit protocol in app
- [ ] Fix most part of bugs related with new protocol
- [ ] Rewrite all tests using es6
- [ ] Take some critical from issue tracker to milestones
- [ ] Close active mailstones https://github.com/node-inspector/node-inspector/milestones
- [ ] Rewrite config on `commander.js` (if it is possible)
- [ ] Implement `ni inspector`, `ni debug`
- [ ] Rewrite readme
- [ ] Fix issues with sourcemaps
## Roadmap v1.1:
- [ ] Implement full plugins system (currently ready only for front-end)
- [ ] Implement `ni install`
- [ ] Implement `ni config` (like `git config` or `npm config`)
- [ ] Implement GUI configuration (Instead of current `settings/Globals` tab)
## Roadmap v1.2:
- [ ] Implement `ni dump`
- [ ] Implement `ni profile`
- [ ] Inspect new contexts

I will extend this roadmap. Some later I describe most part of features in isolated issues.
If you are interesting to fix something in this list - call me.
",3y3,
808,2016-02-03 10:28:50,"When are you going to land this?

**edit**
I see, getting a lot of _TypeError: require(...) is not a function_ errors..
",KenanSulayman,
807,2016-01-14 05:41:48,"Node-debug cause error:

<S_CODE_TOKEN>

Node.js v4.2.1
Node Inspector v0.12.5
OS: Mac OS X 10.11.1
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29863353-node-debug-doesn-t-work?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",myshov,
807,2016-02-10 21:57:21,"Curious, try `node --debug test_file.js` and report if you get a crash with that alone. I'm having issues and tried to run the old way ( with --debug then node-inspector ) and my app is crashing with just --debug meaning is has nothing to do with node-inspector and I'm presently suspecting it's related to https://github.com/node-inspector/node-inspector/issues/823 since I'm lazy about .dir() vs .log() while in development (rarely use console in production thanks to Winston).
",rainabba,
807,2016-05-25 19:15:44,"Hi all!

I have this issue as well.  I have a script that is reproducible too.

system info:
- node 4.4.3
- osx/mavericks
- npm 2.15.1

steps to reproduce:
- repo @ commit hash: https://github.com/MRN-Code/coinstac-client-core/commit/5a8c711736083dd29259bb69f706a5d768c4bdca
- clone, `npm i`
- `node-debug test/demo.js`

FYI, it _does_ work with nodes built-in cli debugger, e.g. `node debug test/demo.js`

<S_CODE_TOKEN>
",cdaringe,
807,2016-05-25 19:28:38,"it's an issue w/ browser-launcher2. will file a bug w/ them and cross ref. it would have to ripple up some before fixing `node-inspector` tho!
",cdaringe,
806,2016-01-11 16:47:10,"code example:

<S_CODE_TOKEN>

displays as:

<S_CODE_TOKEN>

generated map string: 

<S_CODE_TOKEN>

tested on Node Inspector v0.12.5, Node v5.4.0

it displays fine in latest chrome and firefox
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29775698-wrong-encoding-when-using-inline-sourcemaps-with-sourcescontent-and-utf-8?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",forceuser,
805,2016-01-11 14:19:08,"Inspector dispays file content instead of map.sourcesContent when using inline source map and map.sources[name] with name===filename
if name differs from real filename then map.sourcesContent displayed
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29771044-inspector-dispays-file-content-instead-of-map-sourcescontent?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",forceuser,
805,2016-01-11 14:24:19,"and it works as expected with --no-preload flag
",forceuser,
805,2016-01-11 15:04:55,"Also if filename and name defined in map.sources are equals breakpoint can't be set at runtime  (even with --no-preload flag)
When names are different all works as expected
",forceuser,
805,2016-02-07 17:55:47,"Are you using babel?
",3y3,
805,2016-02-08 12:58:15,"Actually i'm using require.extensions callback, inside it i'm reading file contents and modify it (replace some lines) then pass modified source to the babel.transform method and then perform module._compile
I expected that I would see the modified file, but the inspector displays the original file from disk or even sometimes transpiled file without sourcemap applied

[here simplified gist example](https://gist.github.com/forceuser/f5166b926666344fc19a)

read comment there
",forceuser,
804,2016-01-07 13:09:40,"I ran into a problem while debugging my node app and this specific error only occurs when I use a breaker (inline `debugger;` or/and **breakpoints** in the node-inspectors console).

The biggest issue for me is that is no indication of where the error originates from...

Here are my scenarios.:

debugging with `node debug ./app.js` results in:

<S_CODE_TOKEN>

And debugging with `node --debug ./app.js` results in:

<S_CODE_TOKEN>

(in the node-inspectors console)

...any idea's?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29667194-typeerror-on-line-break-point-when-debugging?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",MathijsvVelde,
804,2016-01-07 15:57:49,"Node-Inspector crashed...

<S_CODE_TOKEN>

output:

<S_CODE_TOKEN>
",MathijsvVelde,
804,2016-02-04 10:00:43,"Got the same 

> Internal error: TypeError: Cannot read property '0' of undefined

here, in chrome developper console, but not the same application. I was just trying to debug a set of mocha tests with node-inspector. I got no stacktrace in my console, it's only in chrome.
Here are the steps to reproduce it:
- I launch `node-debug _mocha --compilers js:babel-register --recursive  --require test/components/testdom.js`
- mocha stops on a debugger break
- I resume in the debugger
- Doh !

I am using: 
- node-inspector@0.12.5
- mocha@2.4.5
- a windows cmd.exe console
",loiclacombe,
803,2016-01-06 10:39:03,"The browser shows the message Detached from the target (reason: websocket_closed). The terminal prints the statement ""Error 0"" just as the debugger is detached.
How can we check the reason why it is getting detached?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29630433-node-inspector-detached-suddenly-with-no-obvious-reason?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",ankurmurarka,
803,2016-02-10 21:54:00,"Possibly related? https://github.com/node-inspector/node-inspector/issues/823
",rainabba,
802,2016-01-05 20:32:22,"Hi,

I've started to encounter a problem since upgrading node-inspector to 0.12.5. I was running 0.12.3 before that and I have confirmed that the issue started with version 0.12.4.

I am using node 4.2.1 at the moment and am on Windows although since I am running my stuff under docker, it is then under a Linux platform.

When debugging locally, I do not have a problem however within docker, it seems notifications don't get to my chrome browser. With 0.12.3, when I would hit a breakpoint, I would get a chrome notifications telling that the debugger had stopped. From 0.12.4, I do not get it anymore and have to  manually stop the execution to hit my breakpoint. I also have to hit pause again after stepping over a line of code for example. It seems notifications don't get through.

Can you think of a change that could explain this ?

Willing to try your ideas to narrow the troubleshooting.

Thanks
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29614629-problem-debugging-remote-node-app-in-docker?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",EricFortin,
801,2016-01-03 00:52:35,"The DevTools link refers to something that is outdated, and I have fixed the link in this commit.
",drsirmrpresidentfathercharles,
801,2016-01-03 00:56:02,"The Travis CI build failed for the same reasons the original code is failing. No changes were made except for the README.md
",drsirmrpresidentfathercharles,
800,2016-01-02 13:35:17,"`node-inspector` can't work if `localhost` can't be resolved. However, it ostensibly looks fine in terminal. I suggest showing error messages so that user can figure out the problem without confusing.
### Node Inspector looks fine

<S_CODE_TOKEN>
### Chrome DevTools shows nothing

![chrome_devtools](https://cloud.githubusercontent.com/assets/2791834/12074433/28db84a4-b18f-11e5-872f-97a9f7663265.png)
### Environment
- node-inspector: v0.12.5
- node.js: v4.2.2
- operating system: OS X El Capitan 10.11.2
### Note

It took me a lot of time to figure out why `Chrome DevTools` showed nothing. Finally, I found that `/etc/hosts` file was broken, so that `localhost` can't be resolved to `127.0.0.1`. That caused `node-inspector` debugger connection error.

I did following steps to fix `/etc/hosts`, and now `node-inspector` can work properly.

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29531674-suggest-showing-error-messages-if-localhost-can-t-be-resolved?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",zlargon,
799,2015-12-27 15:06:14,"![740-github-issue](https://cloud.githubusercontent.com/assets/1362386/12011161/7796f35e-ad06-11e5-8675-6a6515118aa0.png)
I think this issue was raised by ""eahutchins"" on May 29, 2013.
  https://github.com/node-inspector/node-inspector/issues/161
I think this problem was fixed, then it crept up again during the upgrade(?).

All source code includes the PREFIX as the first line,
so tracing is off by one line (highlighted line is one line below the actual line).
The inserted PREFIX is:
'(function (exports, require, module, __filename, __dirname) { '

I believe this is due to how ""require"" works (node.js NativeModule.wrapper),
but this wasn't the case prior to upgrading to node v5.2.0 and upgrading Node Inspector to v0.12.5.

As is, it makes debugging very hard,
and Profiling/heap snapshots also probably won't work.

I'm using:
  node v5.2.0
  Node Inspector v0.12.5
  npm v3.3.12
on WIndows 7.

Thanks.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29420861-tracing-off-by-one-line-due-to-inserted-line-in-the-source-code-view-function-exports-require-module-__filename-__dirname?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",noos,
799,2016-01-04 17:38:36,"+1

I have the exact same issue with the same versions as the OP.
",docksteaderluke,
799,2016-01-04 17:45:11,"I don't think this is specifically caused by the inserted require wrapper line since it also appears in Node v4.2.4 but tracing works as expected.

In the meantime, downgrading from Node v5.2.0 to v4.2.4 seems to solve the problem.
",docksteaderluke,
798,2015-12-18 03:07:05,"…ified
",cainjonm,2016-02-09 09:36:09
798,2016-02-09 09:32:34,"Thank you for contribution!
Landed as 9024ff78a044fa397378ffd997e4d68fee951a99
",3y3,2016-02-09 09:36:09
797,2015-12-17 00:59:11,"Error: Cannot find module '/usr/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.0/node-v47-linux-ia32/debug.node'.

I have seen something looks like that. But it doesn't resolved for you.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29193483-after-upgrading-to-node-v5-2-0-i-got-an-debug-error?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",Attrash-Islam,2017-01-16 23:49:13
797,2016-02-05 13:19:27,"nearly the same error for me, for node 5.5.0, on Windows 7 :  

Error: Cannot find module 'C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.5.2\node-v47-win32-x64\debug.node'
",abenhamdine,2017-01-16 23:49:13
797,2016-02-05 13:37:04,"I just reinstall node-inspector whith npm install -g node-inspector and now everything works perfectly
",abenhamdine,2017-01-16 23:49:13
797,2017-01-16 23:49:13,No longer relevant for me,Attrash-Islam,2017-01-16 23:49:13
796,2015-12-15 00:50:03,"Using node-inspector 0.12.5, and node v5

If you run the following code using `node --debug`, start `node-inspector`, then press enter within the running application, and then load up the node-inspector UI, node-inspector will crash.

<S_CODE_TOKEN>

This appears to be because node-inspector attempts to run some code (in `_onConnectionOpen`) which gets evaluated in the vm where the debugger is currently waiting. If i edit the script to pass in `process` and `global` into the vm sandbox, node-inspector does not crash.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29126536-node-inspector-server-crashes-when-loading-if-debugged-application-stuck-on-a-breakpoint-in-a-vm?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",cainjonm,
796,2015-12-15 15:24:40,"I have same problem with node v5.2.0
",tolgaek,
795,2015-12-13 16:56:03,"<S_CODE_TOKEN>

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29087556-have-node-v-5-2-0-installed-but-node-inspector-is-saying-i-have-an-earlier-version-installed-and-displaying-a-warning?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",momo89ong,
795,2015-12-31 14:09:35,"I'm having the same problem, I've read a couple of threads where some people would uninstall node-inspector, clear npm cache and reinstall node-inspector, others simply needed to restart their computer, I've done all that but still having the same problem.
",alveshelio,
795,2016-02-07 18:03:47,"I think the problem here is that you use nvm to start `node-debug`.
Some times it can cause a problem with resolving current `node` path.
Try to use `nvm alias default 4` to set node v4 permanently as default node version. 
",3y3,
795,2016-05-10 18:45:06,"just ran into same issue, just like @alveshelio  suggested fixed with 

<S_CODE_TOKEN>
",serkanh,
794,2015-12-11 20:26:34,"os: ubuntu 14.04
node version: 5.2.0
node-inspector version: 0.12.5

After upgrading to node 5.2.0, when running with --no-preload flag, source files are no longer loaded into Node Inspector at runtime, when modules are required.
I'm running `...$ node-inspector --no-preload` and `...$ node --debug ./index.js`

index.js:

<S_CODE_TOKEN>

server.js:

<S_CODE_TOKEN>

only index.js appears in the Sources tab. I also see these errors in the chrome dev tools:

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29054753-files-missing-in-sources-with-node-5-2-0?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",peterwhitesell,
794,2015-12-12 21:49:51,"There is a lot of problems with 5.2.0 - it breaks 20 tests in node-inspector
",3y3,
793,2015-12-10 22:42:14,"Hey there!

I'm running Node Inspector v0.12.5 in Node v5.1.1 on Windows 10 x64. Everything works swimmingly.

I've written some Gulp tasks in ES6, `gulpfile.babel.js`. You can see them [here](https://github.com/MeoMix/StreamusWebsite/blob/development/gulp/tasks/lint.js). After running the command:

<S_CODE_TOKEN>

it takes **~50 seconds** for `debugger` to be encountered at the start of my task.

If I set `""debug-brk"": false` in `.node-inspectorrc` then my task begins in under 3 seconds, but the `debugger` statement is not respected.

If I convert my task from ES6 back to ES5 the performance bottleneck disappears.

Setting `""preload"": false` has no effect.
Setting `""hidden"": [""node_modules/""]` has no effect.

Presumably node-debug is iterating through all of Babel with debugging enabled. Hiding the folder prevents breakpoints, but I'm assuming the code is still being analyzed by node-inspector -- or something.

Is this a common issue? Should I be able to quickly debug ES6 Gulpfiles, or should I stick with ES5 for now?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29028864-extremely-slow-to-hit-debugger-on-es6-gulpfile-task?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",MeoMix,
793,2015-12-10 23:17:04,"At current time there is no profit in inspecting es6, because node-inspector doesn't know nothing about es6 structures. (If you need only to inspect stack frames and scopes, it may me reasonable to use something like iron-node. Support of es6 structures in ni was planned in 0.13.0, but there is a lot of work on this feature)

I encounter the delay on node 5.2 where es6 is included in core libs. So it can be the reason of delay.
",3y3,
792,2015-12-10 11:58:57,"Hi!
I'm on Windows 7, using nodejs 4.2.3, node-inspector 0.12.5
The content of my .node-inspectorrc

<S_CODE_TOKEN>

With this config I was able to hide ""onedir\, otherdir\ and 
node_modules\ except modules starting with mynodemodulesdirprefix

This stopped working at all. With investigating the code of node-inspector\lib\config.js I found that the attribute ""hidden"" get's overwritten by the variable parsedArgv.

I could help me out by patching config.js, line 191:

<S_CODE_TOKEN>

and added a line 527, which fixes the problem

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/29010728-node-inspectorrc-hidden-gets-overwritten-by-empty-array-default-value?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",chk-,
791,2015-12-10 11:51:23,"Hi,

I would be grateful for Your investigation of an error when I use console.log for an object.
See: console.log({a:1})
Thank You!

Node version: v5.2.0
Node Inspector: v0.12.4
Chrome Version 47.0.2526.73 (64-bit)
",bhevesi,2015-12-21 16:46:08
791,2015-12-17 08:23:26,"the same problem. 
",dimonnwc3,2015-12-21 16:46:08
791,2015-12-21 16:46:08,"Looks this issue related with node.js segmentation fault after console.log (https://github.com/nodejs/node/issues/4261)
Node v5.3.0 has the same problem as well.
I'm going to close this issue and hope the Node.js developers will solve the problem as soon as they can.
",bhevesi,2015-12-21 16:46:08
790,2015-12-09 10:46:55,"Take a heap snapshot from the 'Profiles' tab. The retained size and shallow size are similar for all kinds of objects. I expected retained size to be larger at least in some nodes.
<img width=""821"" alt=""screen shot 2015-12-09 at 4 10 43 pm"" src=""https://cloud.githubusercontent.com/assets/3872221/11683213/77eafdee-9e8f-11e5-84e4-99b088d8119b.png"">

node-inspector version: 0.12.5
node-version: 4.2.1
os: OS X El Capitan (10.11)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28976402-shallow-size-and-retained-size-are-equal-for-all-objects?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",roonyh,
790,2015-12-22 11:14:45,"I'm also seeing this - makes debugging memory leaks rather awkward.

node-inspector v0.12.5
node v4.2.2
Windows 7
",gavllew,
790,2016-02-07 18:06:07,"I don't know how to fix this bug at current time. It's not a bug of node-inspector itself.
",3y3,
789,2015-12-09 01:45:58,"#### Overview

Hello! I'd like to make a few minor changes to the plugin API which will make it easier to keep the vanilla node-inspector source tree untouched (and up to date) and ship plugins alongside.

I'm using node-inspector plus some custom plugins to provide JS debugging support for the Netflix application on TVs and game consoles.

This change would make it so I can stop shipping a forked version :)
#### Proposed Changes
- Added --plugin-path argument for specifying root plugin path when plugins are enabled.
- Added plugin/manifest.json ""override"" property to allow finer-grained control of inspector.json.
",eplawless,2015-12-10 21:11:09
789,2015-12-09 02:38:21,"@3y3 Wondering if I could get your feedback on this change, whether it's missing anything etc.
",eplawless,2015-12-10 21:11:09
789,2015-12-09 21:11:56,"The reason for the ""override"" property in addition to ""exclude"" is in order to re-enable or tweak features that node-inspector has already set.

My immediate use case (likely with more to follow) is this plugin:

**manifest.json**

<S_CODE_TOKEN>

**module.json**

<S_CODE_TOKEN>
",eplawless,2015-12-10 21:11:09
789,2015-12-09 21:18:09,"In current time I'm ready to accept this changes, but keep in mind, that plugins api is unofficial because it is uncompleted:
- [x] DevTools Client
- [ ] Inspector process
- [ ] Application process
- [ ] Plugins installer

I will try to save ability to setup plugins dir, but I'm not sure, that there will not problems with `Plugins installer` step.
So I'll notify you about this as a first user of plugins api =)
And I'll call you in pull request for review.

I have some inline questions ip pr
",3y3,2015-12-10 21:11:09
789,2015-12-09 21:31:40,"Please isolate `override` option in new commit in current pr.
",3y3,2015-12-10 21:11:09
789,2015-12-09 21:32:32,"Sounds good, I'll make those changes.
",eplawless,2015-12-10 21:11:09
789,2015-12-09 22:03:46,"Made those edits, let me know if I missed anything?
",eplawless,2015-12-10 21:11:09
789,2015-12-09 22:16:29,"We're going to be actively developing and maintaining plugins, so I'm perfectly happy to adapt to the plugins API as it evolves and changes.  I think it's going to enable some really neat tools for our teams.

If you need some help with node-inspector itself at any point, I think I can swing some dedicated time for contributing to it.
",eplawless,2015-12-10 21:11:09
789,2015-12-10 18:24:53,"@3y3 is there anything else I should change?
",eplawless,2015-12-10 21:11:09
789,2015-12-10 21:13:55,"No. All ready and merged. I need to fix some bugs before next release, so wait next release after weekend.

Thank you.
",3y3,2015-12-10 21:11:09
788,2015-12-08 09:50:32,"To reproduce:
1. node --debug-brk in.js
2. node-inspector
3. open the web-debugger 
4. after var=script .... has been executed, open the file t.js2 and place a breakpoint (anywhere)
5. run the script

At the breakpoint note that in the windows 'Scope Variables', the global variables are always undefined. 

Thanks

-------in.js---------
var vm = require('vm');
var fs = require('fs');  
var script = new vm.Script(fs.readFileSync(""t.js2"", 'utf8'), {filename: 't.js2'}
script.runInNewContext({console:console});

-------t.js2---------
var o = {};
var a = null;
var b = 'alex'
var c = 123; 

console.log(b);
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28943012-global-variables-not-visible-in-code-that-is-ran-in-a-new-context?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",alexpenev-s,
788,2015-12-08 11:45:02,"Just for the records: 
runIn*Context() functions have history of causing trouble in node-inspector:

<S_CODE_TOKEN>

There seem to be no real solution yet.
",xtough,
788,2016-03-02 12:59:49,"Hi Guys,
Is there an update with the issue? It's still reproducible.
",alexpenev-s,
787,2015-12-05 18:12:01,"[npm-debug.log.zip](https://github.com/node-inspector/node-inspector/files/52914/npm-debug.log.zip)
",maxyazhbin,2015-12-07 22:36:12
787,2015-12-07 22:36:12,"Looks like a problem with npm@3 please report to `npm` or to `mkdirp` project
",3y3,2015-12-07 22:36:12
786,2015-12-05 13:51:51,"Trying to install with:

<S_CODE_TOKEN>

Gives the following:

<S_CODE_TOKEN>
",jonrimmer,2015-12-06 20:35:52
786,2015-12-05 18:51:11,"+1 For this
",major-mann,2015-12-06 20:35:52
786,2015-12-06 20:35:50,"Fixed in 0.12.5
",3y3,2015-12-06 20:35:52
785,2015-12-05 04:45:30,"I'm attempting to configure a new Debian 8.2 (64bit) work environment and did a clean install from source of Node 5.1.1, clean install of Chrome from Google, pulled all the latest development tools from Debian (running gcc 4.9.2).

I'm not sure if the errors I am encountering when attempting an `npm install -g node-inspector` as root are node-inspector rooted in node-inspector or local configuration problems and am hoping to get some advice on how best to proceed. (there are keywords in the console output that look like node-gyp discussions from a year ago here). But much has changed.

Here's what I'm seeing:

<S_CODE_TOKEN>

The first thing that looks suspicious is the line:

<S_CODE_TOKEN>

Not sure why this would be: I'm running as root. This is a new VM and I have a snapshot so I just went ahead and created the missing directory as root, confirmed permissions, and tried again. Results were unchanged.

Later in the output we see a few `--fallback-to-build` followed by subsequent `npm ERR! code 1`

Not entirely sure where to start with this. Any advice about how best to proceed would be appreciated. Thanks.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28871797-installing-latest-on-debian-problems-with-node-gyp?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",ChrisRus,
785,2015-12-05 11:33:18,"Please try

<S_CODE_TOKEN>
",3y3,
785,2015-12-08 23:50:32,"@3y3 - sorry for the delay. I tried `npm i -g node-inspector --unsafe-perm` (executed as root) and this time received no build errors. Additionally, I'm single stepping through code and things look good. 

Curious, what have I actually done here? Will I need to take extra steps when next I upgrade for example?

Thank you very much!
",ChrisRus,
785,2016-02-18 17:58:01,"I had the similar problem to install `v8-debugger` and `v8-profiler` dependencies, and the solution explained into: #776. Maybe this can be a solution for you too :)
",mfdeveloper,
784,2015-12-03 18:33:59,"node-inspector version: 0.12.4
node version: v4.2.2
operating system: os x 10.11.2 Beta 

When I start node-inspector by forking a process and config with environment variables, the config is parsed as string, instead of the type they suppose to be. This cause some configs not working properly, For example, the preload config [here](https://github.com/node-inspector/node-inspector/blob/48a89a460ffd171e54189cea56727fea6db740a1/lib/ScriptFileStorage.js#L30) and saveLiveEdit config [here](https://github.com/node-inspector/node-inspector/blob/48a89a460ffd171e54189cea56727fea6db740a1/lib/DebuggerAgent.js#L281)

<S_CODE_TOKEN>

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28827169-issue-with-environment-variables-config?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",GingerBear,
783,2015-12-02 12:33:35,"Hello,

I'm trying to profile some Node code by profiling my Mocha tests. I am able to attach just fine with `mocha --debug-brk` and it pauses on the first line, as described.

When I try to profile, however, it locks the tabs and I'm unable to navigate back to Source to continue past the breakpoint.

I thought a decent workaround would be to put `console.profile()` in my `before` and `console.profileEnd()` in my `after` hooks, but these functions are not available.

Would it be possible for the debugger to fill in those methods and respect them? or is there a workaround to start profiling while on a breakpoint? (discussed as a side issue in #574, but I found no resolution there)

Thanks!
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28779304-support-console-profile-console-profileend?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",benmosher,
783,2015-12-02 12:39:38,"This turned out to work okay, but still not ideal:

<S_CODE_TOKEN>
",benmosher,
783,2016-07-15 13:58:57,"+1 implementing this would be great
",pmurias,
782,2015-11-30 23:00:13,"So. The first, everything was good. I start node-inspector, chrome tab open automatically and i saw the source files and could see debug info.

But after some time, after some restarts, i stuck in shit. node-inspector stops working normally.

I try reboot.
I was try --debug-brk. Yes my port is 5858. I got no antivirus. I am run ubuntu.

Nothing working guys. The pure and empty dev panel of chrome. Just empty sources and no debug info.

Any ideas?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28730436-node-inspector-blank-chrome-dev-panel?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",x8core,
782,2016-01-20 20:23:47,"I'm seeing the same thing now.  The inspector has worked in the past.  Tried latest Chrome and Safari.  This is a Meteor app.
",datanotion,
782,2016-11-30 09:27:19,same issue,zzuhan,
781,2015-11-29 08:22:39,"Can someone help with this?
",yohaia,2015-12-06 20:38:55
781,2015-12-06 20:38:55,"Fixed in 0.12.5
",3y3,2015-12-06 20:38:55
780,2015-11-27 22:52:43,"I get these two sexy errors when loading 8080: 

Runtime.js:358 Assertion failed: Unknown experiment canvasInspection
Runtime.js:367 TypeError: Cannot read property 'createSetting' of undefined

I'm also unable to hit breakpoints, or inspect variables. Any help would be greatly appreciated!
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28666483-errors-on-loading-inspector-unable-to-hit-breakpoints?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",codybousc,
780,2016-02-22 21:00:08,"I'm experiencing a nearly identical issue. However, I can generally hit 'some' breakpoints but have been unable to determine which breakpoints it may or may not hit.

<S_CODE_TOKEN>

I experience the same issue whether I am using `node-debug` or `node --debug-brk` combined with `node-inspector`.
",joshjung,
779,2015-11-27 04:56:32,"I recently updated from version 9.2 (I know...) to latest and found that exceptions thrown in global functions are no longer shown as errors in the console when called from the console. Is this expected behavior? Back on version 9 I frequently called global functions from the console as a super quick test, which was really convienent! Is there a way to do that (or something similar) in the latest version?

I created a super simple example express server https://gist.github.com/kevinob11/5beb212ed16d467d51d4. When you call `test()` in the console you see the thrown error as seen below:
<img width=""427"" alt=""screen shot 2015-11-26 at 9 53 06 pm"" src=""https://cloud.githubusercontent.com/assets/4147929/11434331/1fcdcd96-9488-11e5-8691-d9a4734de31b.png"">
But on version 12.3 it just fails silently:
<img width=""377"" alt=""screen shot 2015-11-26 at 9 47 16 pm"" src=""https://cloud.githubusercontent.com/assets/4147929/11434352/7443dc6c-9488-11e5-80cc-45122f226046.png"">
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28646796-exceptions-thrown-in-global-functions-are-not-shown-as-errors-in-the-console?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",kevinob11,
779,2016-01-22 12:02:59,"Hi, I have same problem here try:

<S_CODE_TOKEN>
",pravdomil,
779,2016-01-22 20:59:38,"That works, but makes this shortcut not really worth it. Any idea if this will be supported again in the future?
",kevinob11,
778,2015-11-26 23:17:47,"<S_CODE_TOKEN>

[npm-debug.txt](https://github.com/node-inspector/node-inspector/files/45313/npm-debug.txt)
",x-yuri,2015-12-04 16:53:20
778,2015-12-01 16:44:14,"same here., Linux 3.16.0 Debian stretch/sid. 
node 5.10
npm 3.5.0
node-gyp 3.0.3-2
gyp 0.1+20150913git1f374df9-1
",stelf,2015-12-04 16:53:20
778,2015-12-01 20:32:11,"Same here.

<S_CODE_TOKEN>
",gunar,2015-12-04 16:53:20
778,2015-12-03 16:38:47,"Same here

Linux Ubuntu 15.04 
npm 3.3.12
node v5.1.0
",davejoem,2015-12-04 16:53:20
778,2015-12-03 21:48:17,"How about `sudo npm i -g --unsafe-perm node-inspector` ?
",3y3,2015-12-04 16:53:20
778,2015-12-03 23:00:55,"Indeed, that helped. What was the issue? Is it `npm` who's at fault?
",x-yuri,2015-12-04 16:53:20
778,2015-12-04 13:27:44,"@x-yuri Node 5 is using npm 3, which is considered a rewrite. It's using sane permissions for files, impacting modules that relied on bad permissions.
",KenanSulayman,2015-12-04 16:53:20
778,2015-12-04 13:38:29,"Yeah, that worked. @3y3 and @KenanSulayman, thank you!
",gunar,2015-12-04 16:53:20
778,2015-12-16 11:56:18,"also confirm this is a valid solution for node v5.2.0 // npm 3.3.12 on debian testing 3.16.7-ckt11-1
",stelf,2015-12-04 16:53:20
777,2015-11-21 17:34:12,"Hi there,

I have a transitive dependency on node-inspector and it started failing recently... I Cannot build from the source. Is there anything I can do to fix this? I cloned and installed v8-profiler properly.
## npm install node-inspector broken

<S_CODE_TOKEN>
## npm install v8-profile working properly

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28498526-error-installing-rhel-7-node-0-10-40-sh-node-pre-gyp-command-not-found?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",marcellodesales,
777,2015-12-06 20:39:54,"Try to use:

<S_CODE_TOKEN>
",3y3,
776,2015-11-19 03:05:10,"Environment

<S_CODE_TOKEN>

Log

<S_CODE_TOKEN>
",superclarkk,2015-12-06 20:43:37
776,2015-11-20 04:11:45,"I can confirm this as well.
",xekoukou,2015-12-06 20:43:37
776,2015-11-20 09:17:03,"@xekoukou - could you give details of your environment?
",superclarkk,2015-12-06 20:43:37
776,2015-11-20 10:03:38,"OS: Debian Jessie 3.16.7-ckt11-1
node: All versions from v3 to v5. I didn't check all but I had to revert to version 0.12.x for it to work.
python 2.7.9
gcc 4.9.2
",xekoukou,2015-12-06 20:43:37
776,2015-11-23 00:36:15,"i'm also having issues installing with latest version of node (5.1.0) on windows 10.  same error(s)
",tehOPEologist,2015-12-06 20:43:37
776,2015-12-01 07:41:54,"> ../../nan/nan.h:41:3: error: #error This version of node/NAN/v8 requires a C++11 compiler

You need a version of `g++` that supports the C++11 features.

Try upgrading your gcc and g++ compilers and try again.
",fiznool,2015-12-06 20:43:37
776,2015-12-06 20:43:37,"As @fiznool says this is a problem with C++ compiler in subpackages.
Anyway node-inspector installs successfully in this case.
Please retarget this issue to package there it happens.
",3y3,2015-12-06 20:43:37
776,2015-12-07 01:08:15,"For Ubuntu 12.04, I resolved it as follows:

<S_CODE_TOKEN>

Check that the correct versions of gcc and g++ are being used by default by running `gcc -v; g++ -v`
",superclarkk,2015-12-06 20:43:37
776,2016-02-18 18:00:36,"Maaaany thnks @superclarkk !! This solution about `g++` and `gcc`version 5 works for me!! About this, `v8-debug` and `v8-profiler` were installed :)

+1
",mfdeveloper,2015-12-06 20:43:37
776,2016-03-06 06:46:49,"awesome work!
",shuzhang1989,2015-12-06 20:43:37
776,2016-03-08 06:27:45,"Thank you @superclarkk! I was seeing this issue on Travis-CI, so I had to update your formula slightly to make it non-interactive. From my .travis.yml:

<S_CODE_TOKEN>
",kalahari,2015-12-06 20:43:37
776,2016-05-31 18:50:35,"Sorry to bring this up again, but I am getting the same error on CentOS 6, using node v6 and gcc/g++ v5.2.1 Is it necessary to update to 5.3.1, or could there be something else wrong?
",Re0h,2015-12-06 20:43:37
776,2016-06-05 10:25:54,"@Re0h, I upgraded to gcc 5.4.0 on CentOS 6 (had version 4) and it still fails.
",ronenm,2015-12-06 20:43:37
776,2016-06-05 12:37:09,"@ronenm @Re0h Apparently, this error does not necessarily mean that the npm installation failed as a whole. As long as npm ends it report with a list of installed dependencies, you are good to go. I was at least, my project runs just fine after I fixed an error totally unrelated to this one.
",Re0h,2015-12-06 20:43:37
776,2016-08-03 11:00:39,"i have the same issue.
",arjunkori,2015-12-06 20:43:37
775,2015-11-18 16:04:23,,danramey,2015-11-24 20:50:36
774,2015-11-10 02:01:52,"When I want to open node-inspector to debug an Electron app I've got this error in opened node-inspector console:

<S_CODE_TOKEN>

Node.js: 4.1.1.
Node Inspector: 0.12.3
Got this error both in electron-v0.33.7-win32-ia32 and electron-v0.34.3-win32-x64 with --debug=5858.

If use --debug-brk=5858 i've got bellow error in cmd:

<S_CODE_TOKEN>

Any help???
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28113452-error-when-debugging-electron?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",cyrusthegreatking,
774,2015-11-30 02:42:58,"Same issue
",leftstick,
774,2015-12-02 10:13:17,"+1
",lukeapage,
774,2015-12-02 10:20:46,"Possibly a electron bug from the sounds of this: https://github.com/atom/electron/issues/3378
",lukeapage,
774,2016-01-06 08:09:18,"this is an electron bug - with some help I've improved the instructions on how to debug electron with node-inspector

https://github.com/atom/electron/pull/4004

this bug is a duplicate of #730 and #649
",lukeapage,
773,2015-11-07 16:17:21,"not an issue, my fault.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28056197-not-beeing-able-to-get-scope-vars-neither-hovering-over-the-vars-brings-a-tooltip?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",Maxthat,2015-11-07 16:21:16
772,2015-11-06 07:05:54,"I have added a new option `--preload-exclude`.  Sometimes I don't want  `node_modules` to preload, because that files all preload together will cause my debug efficiency.
#### Example - preload exclude all node_modules.

<S_CODE_TOKEN>

But I found that even though I blocked these files, still very slow startup times.   I rewrote `listScripts` in ScriptFileStorage.js.  

Now It can be very fast startup times, and even if  did not use `--preload-exclude .*\\/node_modules\\/.*`
",shitiven,2016-02-09 12:13:35
772,2015-11-10 16:00:37,"@shitiven I added an [option](#750) you may want to look at.  
It adds an option that will ignore the directories and files that you pass in using glob notation.
Example. 
`node-debug --ignore ""**/node_modules/**"" <filename>`

I use it to ignore node_modules which makes my debug startup time go from close to a minute down to a few seconds.
",zanemcca,2016-02-09 12:13:35
772,2016-02-09 12:13:35,"Thank you for contribution!
In node-inspector 0.12.6 released alternative solution which solves this problem
",3y3,2016-02-09 12:13:35
771,2015-11-02 14:05:57,"On the weekend i tried to upgrade my project to the newly relased babel 6. 

I am using the [require hook](https://babeljs.io/docs/usage/require/) approach. They changed it a bit, now i have to `require('babel-core/register')` instead of `require('babel/register')`. 

Everything transforms as before, but in node-inspector i am not allowed to place any breakpoints anywhere in the affected files which are being transpiled.

I am using:
node js v5.0.0
node-inspector v0.12.3 
babel v6.0.15 
babel-core v6.1.2 with es2015 and stage-0 presets

EDIT: 
Here you can find the [reproduction repo](https://github.com/tsm91/babel-bug-reproduction).
Also opened a ticket for the babel repo [#2968](https://github.com/babel/babel/issues/2968)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27893027-cannot-place-a-breakpoint-with-babel-6-x-x?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",tsm91,
771,2016-01-05 16:34:19,"@CrabDude any updates? been fighting this, have a good repo case here: https://github.com/amcdnl/debug-hell
",amcdnl,
771,2016-01-08 19:39:57,"@amcdnl While I am the author of `babel-node-debug` (and I plan to update it to babel@6 compatibility soon), this specific issue is outside my expertise since I'm only mildly familiar with the `node-inspector` and `babel` projects. Unfortunately, this is an issue for the babel or node-inspector developers to sort out.
",CrabDude,
770,2015-10-31 07:22:00,"Error: Cannot find module '/opt/local/node-v0.12.0-linux-x64/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.4/node-v14-linux-x64/debug.node'
Instead node-v11-linux-x64/debug.node' exists in this directory.
Following are the versions that I have installed on my system:
node -v
v0.12.0
node-inspector -v
 v0.12.3
npm -v 
2.5.1
I have tried to run the npm run install in v8-debug and v8-profiler but the error still persists.
Any Help please ???
",nidazehraa,2015-12-06 20:46:49
770,2015-11-01 17:13:31,"I got the same error, and had to do:
`npm -g uninstall node-inspector && npm -g install node-inspector` to force node-inspector to rebuild the modules it needs to link tt he new version of the V8 debugger
",nikmartin,2015-12-06 20:46:49
770,2015-11-24 20:55:47,"Are you using `nvm`?

This situation happens if you have two different node versions installed on your machine (one default and one other with help of nvm).
One other case - you update your node version, but miss to update your global dependencies. It is important because some modules (for example `node-inspector`) have some c++ addons, which need to be rebuilded for new node version.
",3y3,2015-12-06 20:46:49
770,2015-12-06 20:46:49,"Try to install 0.12.5. This version includes prebuilt binaries for all actual node versions from the box.
Feel free to reopen this issue if it still exist.
",3y3,2015-12-06 20:46:49
769,2015-10-29 03:13:03,"When I run the following command:
node-debug singleTest2.js

I get the familiar chrome window but then as I am stepping through my debug points, websockets get closed and the console shows:
Error: Injection failed: no require in current frame.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27788650-error-injection-failed-no-require-in-current-frame?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",maxyazhbin,
768,2015-10-26 21:57:49,"I've got a super simple route:

<S_CODE_TOKEN>

I put a breakpoint on x++;.

When the inspector stops here, I see x:1. I double click on 1 and set to some new value, like 5. When I hit enter, it reverts back to 1. I simply can't change it.

However... when I hit resume in the debugger and the page loads, it actually worked, I see the changed value returned to the browser. If I step to the next line of execution, X has been properly modified too. 
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27716449-changing-variables-works-but-doesn-t-render-right?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",cfjedimaster,
767,2015-10-19 19:27:27,"Just tried to uninstall and re-install node-inspector and it just won't work.

[Here's the npm debug log](https://www.dropbox.com/s/to54hili33kco2b/npm-debug.1.log?dl=0)

Please note that while the actual issue is being thrown by bufferutil, [according to them](https://github.com/websockets/bufferutil/issues/22) it is because the dependency is out of date.

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27530947-cannot-install-on-windows-with-node-4-1-1?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",togakangaroo,
767,2015-11-01 22:59:05,"+1 same issue with 5.0.0
",swaheed2,
767,2015-11-07 12:01:45,"+1 with 5.0.0 on Mac Yosemite
",maruf89,
767,2015-11-17 03:25:08,"Install node-inspector on the Windows too difficult，Windows 10、Node 5.0.0 .
",XuJinNet,
767,2015-11-22 23:15:30,"any status report on this?  can't get it to install, either.  running windows 10, latest node (5.1.0)
",tehOPEologist,
767,2015-11-24 20:59:14,"This is problem with npm v3 and `bufferutils` (part of `ws` module) module, not with `node-inspector` itself. Please call `ws` module contributors.
",3y3,
767,2016-02-10 21:52:08,"Running Node 4.2.6 and npm 3.7.2 and getting the same. I've got VS2013 and VS2015 installed and this is the only package having this issue. I'm explicitly tried in the VS 2015 msbuild prompt as admin.

Base on a tip i read elsewhere I've also tried `npm config set msvs_version 2015 --global` and that didn't help, BUT `npm config set msvs_version 2013 --global` did (uninstall first, run that then install for those not familiar).

Sadly, this didn't resolve the slow startup or crash that had me reinstalling to begin with :(
",rainabba,
767,2016-02-10 21:58:50,"@rainabba , you have slow startup on node-inspector 0.12.6?
",3y3,
767,2016-02-10 22:01:29,"Very. My app takes ~4.5 seconds to get settled normally. With `node-debug` I get an initial break like with --debug-brk. I hit resume in the UI (which comes up quickly), then it takes ~10 before i see anything more and then I eventually get the crash that's holding me up.

The files at the left are not loaded initially either except for my index. After that ~10sec delay, they start to populate, but then I get the crash.
",rainabba,
767,2016-02-10 22:16:50,"How about `node-debug --hidden node_modules` ?
",3y3,
767,2016-02-10 22:19:10,"MUCH faster! I hit the crash as quickly as without --debug. Is there a way to make that default for node-inspector or should I just alias it?

Now to figure out why --debug is crashing my app :/
",rainabba,
767,2016-02-10 22:31:21,"You can add this to your global `.node-inspectorrc`
https://github.com/node-inspector/node-inspector#rc-configuration
",3y3,
767,2016-02-10 23:11:31,"Thank you. Looked past that even after being linked to it :)  That rc file needs to be in the working folder where I'm running node-debug from, the root of my user profile (I'm on Windows) or elsewhere?
",rainabba,
767,2016-02-10 23:38:55,"Read [rc documentation](https://www.npmjs.com/package/rc) to understand there it search rc configs
",3y3,
767,2016-02-10 23:48:58,"Should be able to tip you somehow for that. I wasn't aware of that convention. Thank you.
",rainabba,
767,2016-02-17 06:33:50,"Been trying without luck.

Saved the following as `.$myapp-namerc` in my project folder, where I'm launching node-debug from. What am I missing? I'm on Windows in case that matters.

<S_CODE_TOKEN>
",rainabba,
767,2016-03-11 19:26:06,"ws version 1.0.0 and above removed the dependency on bufferutil, so node-gyp compilation isn't necessary anymore.  node-inspector is currently depending on ws 0.8.0.

@3y3  Would you accept a PR to bump up the ws dependency to 1.0.1 (latest)?
",asselin,
767,2016-03-11 22:29:55,"@asselin , yes, pr will be acceptable.
",3y3,
767,2016-03-29 13:27:25,"@3y3 Sorry, I don't think I got a notification for your reply. I'll submit a PR today.
",asselin,
767,2016-04-15 17:25:48,"@all version 0.12.8 is available on npm now, and should fix the Windows installation problem
",asselin,
766,2015-10-15 09:15:59,"Node Inspector v0.12.3
Node v0.12.7
Mac OS 10.10.5

I get ""Clipboard is not enabled in hosted mode. Please inspect using chrome://inspect"" in the console when I right click any resource in the network tab and click ANY copy commands from the context menu

I had this many versions before so I know it's probably not a recent bug
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27428133-clipboard-is-not-enabled-in-hosted-mode?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",a7madgamal,
766,2015-12-02 00:45:28,"got same issue. 
",JakeMuller,
766,2016-05-30 21:29:51,"+1
",akhan-netfore,
766,2016-06-10 21:10:06,"+1 is there a workaround? 
",jcollum,
766,2016-12-06 21:18:38,+1 - anybody???,kferguson-broadsoft,
766,2016-12-06 23:29:35,I'm using `- - inspect` these days. Try that. ,jcollum,
766,2017-01-16 10:31:01,"@jcollum  tried it few weeks ago, was way too basic compared to node-inspector",a7madgamal,
766,2017-01-16 16:00:24,I... did you try the same thing I did? It was exactly the same to me. ,jcollum,
766,2017-02-12 12:04:54,+1 Clipboard is not enabled in hosted mode. Please inspect using chrome://inspect,djmisterjon,
765,2015-10-13 17:46:41,"I use v0.12.3 in Windows 7 and got this error. The stack trace is as follows:

<S_CODE_TOKEN>

In node-inspector/lib/Injections/NetworkAgent.js L77 `return stack.reduce(function(stack, frame) {`, `stack` is a string ""Error"". That's why it breaks.

I tried to create a small test program to reproduces it. But it's really difficult to reproduce it without deeper insight of how the inspector works.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27382462-undefined-is-not-a-function-in-windows?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",beyondbill,
765,2015-11-24 21:05:07,"What?! How it is possible to get `string` in this place?!
Do you have redefined `Error.prepareStackTrace` in any other place?
",3y3,
765,2015-12-01 18:50:47,"@3y3 We use bunyan logger in our app and it redefines Error.prepareStackTrace.
Thank you for the suggestion! We'll look into the issue in this direction.
",beyondbill,
764,2015-10-13 14:23:13,"I noticed that the behavior of view objects with properties that have a getter is quite unpredicatable in node-inspector. Most notably, the value will always be shown as `undefined`. In contrast, chrome will show it as `(...)` which is less misleading. And, surprisingly, the getter function will be evaluated if the property has a numeric name. 

I tested with this small snippet:

<S_CODE_TOKEN>
### Output with node-inspector:

![screenshot from 2015-10-13 16 05 55](https://cloud.githubusercontent.com/assets/1820292/10457379/64e6a2fc-71c6-11e5-9bee-fca415bb368a.png)
### Output when using the chrome debugger:

![screenshot from 2015-10-13 16 06 54](https://cloud.githubusercontent.com/assets/1820292/10457395/7528bb96-71c6-11e5-837a-10f0bd80ef34.png)
### Output with node-inspector if the property name is numeric:

![screenshot from 2015-10-13 16 14 33](https://cloud.githubusercontent.com/assets/1820292/10457417/85c21970-71c6-11e5-9d60-659eeb69f772.png)

Could you elaborate what the expected behavior should be, or how we can influence the debugger display so that at least no `undefined`'s are shown but _something_ else?  

Using node 0.10.40 (ubuntu ) or node 4.20 (windows), node-inspector 0.12.3

Thanks in advance!
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/27376071-object-properties-with-getter-are-always-displayed-as-undefined?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",mweststrate,
763,2015-10-08 17:02:05,"The UI encounters an error when it tries to load protocol.json, because [it's stepping up a directory](https://github.com/node-inspector/node-inspector/blob/ebd21172a2e8a94bd2eaadeccb8c41b0fb2f0e48/front-end/main/Main.js#L264) (`../protocol.json`)

If I remove the `../`, the UI loads successfully.  Is that `../` needed for some reason?
",gshively11,2015-11-24 21:22:26
762,2015-10-07 07:36:10,"As per title. For example, having a folder in your project named 'grunt' prevents you from being able to debug grunt tasks. The current code just checks to see if the path exists using fs.existsSync, however this is true in the case of a directory, but then the debugger will crap out because it can't load it. I've added an extra check to make sure that the file is also not a directory.
",slicedpan,
761,2015-10-05 22:07:05,"I run javascript files using the ClearScript V8 library (https://clearscript.codeplex.com/) in a C# application.

I need a debugger for my javascript files and I wonder if there is any way to use node-inspector to debug stand-alone V8 applications?
",postacik,2015-10-06 11:54:31
761,2015-10-06 11:54:31,"I succeeded to debug stand-alone V8 applications with an older version of node-inspector.

You can find the necessary instructions in the following ClearScript thread:

https://clearscript.codeplex.com/discussions/645819
",postacik,2015-10-06 11:54:31
760,2015-10-02 11:52:17,"Here's the log:

<S_CODE_TOKEN>
",iliakan,2015-12-07 07:10:50
760,2015-10-04 20:32:57,"+1 Getting the exact problem. Please help!
",BlueDevil2k6,2015-12-07 07:10:50
760,2015-10-04 22:57:27,"+1 Getting the same on Windows 10 with node v4.1.1
",adamdva,2015-12-07 07:10:50
760,2015-10-06 18:50:28,"+1
",gabrielcmendes,2015-12-07 07:10:50
760,2015-10-09 19:12:09,"I updated to node v4.1.2 on Windows 10, and got the same error.
After I installed python 2.x branch and set the path, I was able to get node-inspector to install and run.
",adamdva,2015-12-07 07:10:50
760,2015-10-16 23:28:33,"I'm seeing a very similar problem:

<S_CODE_TOKEN>
",chuckweinberger,2015-12-07 07:10:50
760,2015-10-17 16:20:35,"+1 - getting a slightly different problem

npm WARN prefer global node-inspector@0.10.2 should be installed with -g

> bufferutil@1.1.0 install /Users/shreyas.ubale/projects/beerhug/mean/meanjs/node_modules/node-inspector/node_modules/bufferutil
> node-gyp rebuild

  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
/Users/shreyas.ubale/projects/beerhug/mean/meanjs/node_modules/.bin/touch: line 1: syntax error near unexpected token `('
/Users/shreyas.ubale/projects/beerhug/mean/meanjs/node_modules/.bin/touch: line 1:`var touch = require(""../touch"")'
make: **\* [Release/obj.target/bufferutil/src/bufferutil.o] Error 2
gyp ERR! build error
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:270:23)
gyp ERR! stack     at ChildProcess.emit (events.js:110:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1074:12)
gyp ERR! System Darwin 14.4.0
gyp ERR! command ""node"" ""/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
gyp ERR! cwd /Users/shreyas.ubale/projects/beerhug/mean/meanjs/node_modules/node-inspector/node_modules/bufferutil
gyp ERR! node -v v0.12.7
gyp ERR! node-gyp -v v3.0.3
gyp ERR! not ok
npm WARN EPACKAGEJSON mean@0.0.0 No repository field.
npm ERR! Darwin 14.4.0
npm ERR! argv ""node"" ""/usr/local/bin/npm"" ""install"" ""grunt-node-inspector""
npm ERR! node v0.12.7
npm ERR! npm  v3.3.5
npm ERR! code ELIFECYCLE

npm ERR! bufferutil@1.1.0 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the bufferutil@1.1.0 install script 'node-gyp rebuild'.
npm ERR! This is most likely a problem with the bufferutil package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-gyp rebuild
npm ERR! You can get their info via:
npm ERR!     npm owner ls bufferutil
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /Users/shreyas.ubale/projects/beerhug/mean/meanjs/npm-debug.log
",shreyasubale,2015-12-07 07:10:50
760,2015-10-17 17:31:29,"Updated MacOS to El Capitan. Now everything builds fine.
",iliakan,2015-12-07 07:10:50
760,2015-10-19 22:14:19,"That is not a solution, sometimes you cant upgrade due to other dependencies.
",tjerkw,2015-12-07 07:10:50
760,2015-10-26 20:48:00,"Not building even with el Capitan.
",chuckweinberger,2015-12-07 07:10:50
760,2015-10-28 21:25:50,"same error here.
",gvelo,2015-12-07 07:10:50
760,2015-11-01 22:03:57,"Same error with @0.10.2 on OS X Yosemite (10.10.5) with node 4.2.1 (LTM) after a clean install node / npm / yo / angular-generator-fullstack. **_node-inspector@0.12.3 installs fine.**_

Running:

<S_CODE_TOKEN>

...produces numerous errors:

<S_CODE_TOKEN>
",xapou,2015-12-07 07:10:50
760,2015-11-06 09:38:43,"@shreyasubale I had that problem too; it seems to be caused by a buggy version of the node-touch package. If you add the newest version of node-touch to your project (npm install touch), it should get you past that particular issue. 
",OBJohn,2015-12-07 07:10:50
760,2015-12-06 20:51:07,"@iliakan , you original problem can be fixed by:

<S_CODE_TOKEN>
",3y3,2015-12-07 07:10:50
760,2015-12-07 07:10:50,"@3y3 you mean `unsafe-perm` is supposed to fix the 'library not found' problem?

Cannot check it now, everything installs fine. Recent node, recent macos.
",iliakan,2015-12-07 07:10:50
759,2015-10-01 21:53:32,"I just updated to node-inspector latest (0.12.3) through grunt-node-inspector (0.3.0) and I'm getting the following error when files are loaded: 

<img width=""316"" alt=""screen shot 2015-10-01 at 5 50 41 pm"" src=""https://cloud.githubusercontent.com/assets/1198196/10234756/fa2c89e6-6864-11e5-8b51-e4125d58a081.png"">

I'm also getting the following error when I try to do any kind of profiling: 

<img width=""370"" alt=""screen shot 2015-10-01 at 5 51 45 pm"" src=""https://cloud.githubusercontent.com/assets/1198196/10234779/1be8309e-6865-11e5-8749-30e7e56986a9.png"">

I tried with both node 0.12.7 and node 4.1.1. With node-inspector 0.7.4 everything was fine. I can help debugging if you need more info. 
",Chris911,2015-10-02 01:57:18
759,2015-10-01 22:20:09,"Can you give me simple code example there this happens?
",3y3,2015-10-02 01:57:18
759,2015-10-01 22:21:22,"You also can try to use node-inspector from master branch, there exists one commit which can solve this issue.
",3y3,2015-10-02 01:57:18
759,2015-10-01 22:32:42,"Actually I think this might be an issue with `grunt-node-inspector` because I just got everything to work by running node-inspector on it's own. 
",Chris911,2015-10-02 01:57:18
758,2015-09-30 19:42:18,,mudi-issa,2015-09-30 19:48:41
757,2015-09-30 11:50:37,"When I run a nodejs process with node-inspector, it works fine for a few minutes with heavyish load but then crashes:
Error: Cannot switch to old mode now.
    at emitDataEvents (_stream_readable.js:748:11)
    at IncomingMessage.Readable.resume (_stream_readable.js:733:3)
    at ClientRequest.handleHttpResponse (/home/vagrant/node_modules/node-inspector/lib/Injections/NetworkAgent.js:299:16)
    at ClientRequest.g (events.js:180:16)
    at ClientRequest.emit (events.js:117:20)
    at HTTPParser.parserOnIncomingClient [as onIncoming](http.js:1692:21)
    at HTTPParser.parserOnHeadersComplete [as onHeadersComplete](http.js:121:23)
    at CleartextStream.socketOnData [as ondata](http.js:1587:20)
    at CleartextStream.read [as _read](tls.js:513:12)
    at CleartextStream.Readable.read (_stream_readable.js:340:10)
    at EncryptedStream.write [as _write](tls.js:368:25)
    at doWrite (_stream_writable.js:225:10)
    at writeOrBuffer (_stream_writable.js:215:5)
    at EncryptedStream.Writable.write (_stream_writable.js:182:11)
    at write (_stream_readable.js:601:24)
    at flow (_stream_readable.js:610:7)
    at Socket.pipeOnReadable (_stream_readable.js:642:5)
This happens even when there are no active breakpoints. I'm running node-inspector 0.12.3 . Both node-inspector and the debugged process are running nodejs v0.10.32 . It's in Ubuntu.
",david-knipe-hp,2015-12-06 20:52:55
757,2015-11-09 17:26:36,"Uninstalling and reinstalling fixed my issues.

Update: spoke too soon.
",haciendadad,2015-12-06 20:52:55
757,2015-12-06 20:52:55,"Should be fixed in 0.12.5
Feel free to reopen this issue if it still exist.
",3y3,2015-12-06 20:52:55
756,2015-09-26 20:01:13,"<S_CODE_TOKEN>
## STR

Start `node-inspector` in one terminal window
Start a script to debug `node --debug-brk program.js` in another window

Refresh the tab that has the node inspector ui open: http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858

Inspector crashes: 

![image](https://cloud.githubusercontent.com/assets/128755/10119576/cccc0680-6467-11e5-9deb-6c78c316c3c5.png)
",vladikoff,2016-01-25 23:41:35
756,2015-10-05 01:59:08,"@vladikoff Did you ever find a workaround for this issue? I'm hitting it as well.

FWIW, this error started occurring for me after setting a breakpoint then reloading the browser.

Update for the next dev: Clearing my localStorage didn't fix the issue, but an uninstall / install of node-inspector did.
",ElliotChong,2016-01-25 23:41:35
756,2015-10-19 21:46:06,">  but an uninstall / install did.

Uninstall of Node-inspector? 
",jcollum,2016-01-25 23:41:35
756,2015-11-02 16:01:11,"Restarting the debugged node process(and obviously node-inspector) is enough for me, no need to uninstall anything. Was hitting F5 to continue as I am used to Visual Studio shortcut so essentially reloading the web page.
",EricFortin,2016-01-25 23:41:35
756,2015-11-09 17:33:38,"Uninstalling and reinstalling fixed my issues.

Update:  Spoke too soon
",haciendadad,2016-01-25 23:41:35
756,2015-12-15 00:59:20,"Modifying https://github.com/node-inspector/v8-debug/blob/master/v8-debug.js#L96 to check if the function exists before calling it seems to fix this issue... however this doesnt seem to be the correct fix (given that this is caused by the 'close' event being sent, line 140)

@3y3 What would the correct way to fix this issue be? Is there some event that can be hooked to reinitialize after disconnect? (Admittedly I don't have the greatest understanding of how this all fits together). 
",cainjonm,2016-01-25 23:41:35
756,2015-12-17 08:57:42,"has the same problem
",malei0311,2016-01-25 23:41:35
756,2016-01-02 00:03:29,"Having the same problem right now. I cannot seem to find a reliable way to debug node via vim or terminal.
",Mule52,2016-01-25 23:41:35
756,2016-01-02 00:06:09,"@Mule52 use `ps aux | grep node` and kill the process  that you were trying to debug. That's the only thing that ever works for me. 
",jcollum,2016-01-25 23:41:35
756,2016-01-02 00:26:15,"@jcollum, thanks for the response. 

Can you help me understand if I am debugging correctly? Via terminal (Linux Mint), I run ""node --debug server.js"" without the quotes. Then in another terminal window (using tmux), I run ""node-inspector &"" and open up my chrome dev tools. I then set breakpoints via the node-inspector dev tools. I refresh my client app in another chrome window and try to trigger the breakpoints I just set. I seem to hit these intermittently. I have not found a reliable way to debug this setup as of yet. 

Am I on the right track with my debug setup/init commands?

Thanks.
",Mule52,2016-01-25 23:41:35
756,2016-01-02 00:53:31,"Yes. I like to put one `debugger` command at the top of the file that I'm trying to debug. I've found that the debugger doesn't stop on breakpoints very reliably if it hasn't stopped lately. If that makes any sense; hard to explain. 
",jcollum,2016-01-25 23:41:35
756,2016-01-23 11:39:51,"How to reproduce this reliably:
1. Get node-inspector to stop at a breakpoint (or debugger statement, or first line with --debug-brk).
2. Reload the node-inspector page.

The error that follows:

<S_CODE_TOKEN>
",svicalifornia,2016-01-25 23:41:35
756,2016-01-23 12:07:09,"I've submitted a PR to the v8-debug repo at https://github.com/node-inspector/v8-debug/pull/22
",svicalifornia,2016-01-25 23:41:35
756,2016-01-25 22:55:11,"The above PR has been merged. This issue should be fixed with the next release of v8-debug.
",svicalifornia,2016-01-25 23:41:35
756,2016-01-25 22:58:37,"I'd just like to say how great it is that things like this get fixed. I'm used to the Microsoft world: ""Yeah, that's broken, it'll get fixed in the next major release. Probably. Or that feature will be changed."" 
",jcollum,2016-01-25 23:41:35
756,2016-01-25 23:00:28,"I need some time to release new v8-debug version (build prebuld binaries in cloud).
",3y3,2016-01-25 23:41:35
756,2016-01-25 23:41:35,"new v8-debug released
",3y3,2016-01-25 23:41:35
756,2016-01-26 04:19:49,"Wow, thanks!
",svicalifornia,2016-01-25 23:41:35
756,2016-02-04 21:25:38,"I've been doing a lot of debugging the last few days and this bugfix has helped a lot. The tool is much more stable on my Mac now -- I never have to go and kill the NI process and my node processes and start from scratch. Thanks for solving this  issue  @svicalifornia  
",jcollum,2016-01-25 23:41:35
756,2016-02-05 00:50:45,"@jcollum You're welcome!
",svicalifornia,2016-01-25 23:41:35
756,2016-02-05 01:04:11,":clap: :+1: Many thanks @svicalifornia! :smile: 
",ElliotChong,2016-01-25 23:41:35
755,2015-09-25 22:39:52,"<S_CODE_TOKEN>

First of all, im new with node-inspector(debugging node-modules). So, I have nothing found any information about debugging ""command line"" tool for prompt calls ! In my case i want to debug the prompt calls from `chucky$ jspm init` (jspm is a bootstrap tool, to setup an ES6 environment [see for more information](https://github.com/jspm/jspm-cli/blob/master/docs/getting-started.md) ).

That does not work :(

1.) Terminal 1

<S_CODE_TOKEN>

2.) Set breakpoint on Chrome-Dev-Tool

3.) Terminal 2

<S_CODE_TOKEN>

Nothing happens on Chrome-Dev-Tool(Breakpoint) :(
",SerkanSipahi,2015-09-26 07:51:41
755,2015-09-26 07:51:41,"update: it works now :) I can start the cli script directly and pass them some arguments...

`user$ node-debug node_modules/jspm/jspm.js foo bar baz`
",SerkanSipahi,2015-09-26 07:51:41
754,2015-09-24 14:51:16,"When I run Node Inspector in docker container with alpine linux I've got error message in console:

<S_CODE_TOKEN>

Alpine Linux 3.2
node v4.1
node-inspector v0.12.3
",rumkin,2015-10-01 09:05:42
754,2015-09-24 18:26:39,"Looks like a problem on level below.
@rvagg, if this isn't problem on nan, can you retarget it to node team.

If I understand right in this case problem happens with prebuilt binaries builded on Ubuntu (TravisCI uses Ubuntu?). This can be a source of problems?
",3y3,2015-10-01 09:05:42
754,2015-09-29 08:19:21,"@3y3 Yep, I think building on Ubuntu could be the source of problems.
",rumkin,2015-10-01 09:05:42
754,2015-09-29 08:58:43,"@rumkin , can you try

<S_CODE_TOKEN>

it can be helpful
`--build-from-source` is important in this case, all other flags are optional.
",3y3,2015-10-01 09:05:42
754,2015-09-29 14:31:36,"This is a tricky one because v8-profiler is probably building using a much newer libc and libc++ than comes with the default ubuntu 12.04 that travis runs on and v8-profiler is being compiled with a link to that version. I honestly don't know anything about why it's `sprintf` that it's complaining about, perhaps switching to `snprintf` in v8-profiler will help..
",rvagg,2015-10-01 09:05:42
754,2015-10-01 08:40:30,"Great! Option `--build-from-source` solved the issue!
Thanks.
:+1: 
",rumkin,2015-10-01 09:05:42
753,2015-09-22 07:20:34,"node4.1.0
OS X 10.10.5
run `sudo npm install -g node-inspector` get the error

<S_CODE_TOKEN>
",funkyLover,2015-09-23 16:04:40
753,2015-09-22 13:30:59,"please try `sudo npm i -g node-inspector --unsafe-perm`
",3y3,2015-09-23 16:04:40
753,2015-09-23 16:07:04,"I can't figure out why
I tried the same `sudo npm install -g node-inspector` today
and it work well ___.....
",funkyLover,2015-09-23 16:04:40
753,2015-10-08 14:04:57,"I had similar issue with `npm install java` on Centos 6.4... related to `node-gyp rebuild`

Got it resolved by using `python27`, instead of `python 2.6.6`. Thought of sharing it here, if it helps some one.

@funkyLover did you have to upgrade python by any chance?
",WarFox,2015-09-23 16:04:40
753,2015-10-13 03:27:07,"@WarFox 
No, I am sure I didn't upgrade pyhton or make other similar operation,
",funkyLover,2015-09-23 16:04:40
753,2015-10-14 08:13:10,"Sorry, my bad. Apparently I had upgraded `gcc` as well along with `Python` on Centos. My gcc was below 4.8, before upgrading. Turns out this is real reason, why my problem got resolved.
",WarFox,2015-09-23 16:04:40
753,2016-01-08 18:27:00,"Try this may help you:

https://docs.npmjs.com/getting-started/fixing-npm-permissions
",amirlarco,2015-09-23 16:04:40
753,2016-12-15 07:56:50,"Here's my case what fixed it:

I used `nvm` and had 7.2.1 installed.
1. Removed nvm `brew uninstall nvm`
2. Surely remove `node`, `sudo rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/{npm*,node*,man1/node*}`
3. Install node@6.9.2 `brew install node@6`
Errors gone!",borislemke,2015-09-23 16:04:40
752,2015-09-21 22:36:43,"I have created a simple program to show a typical crash using vm.runInContext().

I am using node v0.12.7 and node-inspector v0.12.3 on  Windows 7 SP1. To reproduce, run node-inspector, run the code below, then step through the code. On the http.request() step, you get the error listed here. 
# 
# Chrome console error text:

 Internal error: TypeError: Cannot read property 'line' of null test.js:17 
# 
# Node-inspector output from cmd.exe:

Node Inspector v0.12.3
Visit http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858 to start debugging.
Received request for a method not implemented: Debugger.setBreakpoint
undefined:1
TypeError: undefined is not a function
^
SyntaxError: Unexpected token T
    at Object.parse (native)
    at Protocol.execute (_debugger.js:134:52)
    at Socket.emit (events.js:107:17)
    at readableAddChunk (_stream_readable.js:163:16)
    at Socket.Readable.push (_stream_readable.js:126:10)
    at TCP.onread (net.js:538:20)
# 
# Source code: test.js

<S_CODE_TOKEN>
# 
# Source code: script.js

<S_CODE_TOKEN>

Thanks for your support,
Paul
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26852908-node-inspector-crashes-with-http-request-in-vm-on-windows?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",phdunham,
752,2015-09-22 16:06:58,"Hello, @phdunham , thank you for verbose description.
I tried to reproduce your problem on Mac for node 0.12.7 and 4.0.0, but all works fine.
So I need some more time to check this code on Windows.
",3y3,
752,2015-09-22 17:46:48,"I develop on OSX so everything there is fine. 
Windows has this issue. I just test Ubuntu 14.04 LTS and it has the same problem as windows.
Thanks
",phdunham,
752,2015-09-28 19:20:29,"Hello @3y3 were you able to reproduce this on Windows or Linux ? It seems to work on OSX but most of our developers use Windows. Trying to see if you have a sense for whether this is fixable in a realistic timeframe.
",vishyk,
752,2015-10-02 16:00:06,"Yury, Is there a roadmap for node-inspector support? My organization is very interested in support for node-inspector in the VM on Windows and Mac.  I see a lot of work on the marcominetti/node-inspector/ljve branch. Should we be using that version of node-inspector.

Also, is there anything we can do to help get this bug fixed? We can provide remote access to a windows machine if that will help.

Thanks
Paul
",phdunham,
752,2015-10-03 16:11:09,"Hello @phdunham , unfortunately Marko's branch is only backporting of changes from master. So it will not be useful.

I tried to reproduce this issue on Win8 in VirtualBox, but all works fine... Do you have any machine with Win8  to confirm what there is no problems.

The third step - deeper debugging on your Win7 machines. It's no so hard to debug debugger =)
The best in this situation to have stack trace of caused error, if it doesn't possible use console.log to find a place of error.

So you need to `git clone` node-inspector sources and add some logs to files in `lib/Injections/NetworkAgent.js`. It may be reasonable to use `console._log` because `console.log` was wrapped by node-inspector.
",3y3,
751,2015-09-20 02:39:46,"See https://github.com/node-inspector/node-inspector/issues/559#issuecomment-141730364 for details. Installation on Windows fails with all sorts of errors and it looks like Python and .NET Framework might be required.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26810718-list-in-the-readme-the-prerequisites-for-installing-on-windows?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",dandv,
751,2015-09-20 12:40:49,"Python and VS were required for me.  I posted in that comment some steps passed on by a fellow user that helped fix my issue.  In addition node-gyp and a C++ compiler were needed.
",maityarkodeb,
751,2016-03-20 16:31:04,"To confirm, the above pre-requisites also fixed it for me. I installed:
- Python 2 (version 2.7.11)
- node-gyp (version 3.0.1)
- Visual Studio Community Edition (version 14.0.2).
- C++ compiler, installed from within Visual Studio. Went File -> New Project. Then went to the Visual C++ section and selected to install the core part with the compiler.
",hwride,
751,2016-03-21 07:38:51,"Only Python 2 is required. The other errors I ignored based in a post I read somewhere. They seem to relate to an optional package. VS installs all kinds of packages in Win that are hard to get rid off later. The only downside is that whenever you update node inspector, you will see same errors again. But you can ignore them again.
",mdotasia,
750,2015-09-20 01:57:16,"I have added a new option `--ignore` that is somewhere in the middle of `--hidden` and `--no-preload`. Instead of hiding directories and files as `--hidden` does `--ignore` will avoid loading them all together. 

I saw the need for this because I had very slow startup times. Which lead me to `--no-preload`, but you cannot attach breakpoints to your files until they have been loaded. Which is less than ideal. 

I did not use `--hidden` because it uses RegExp and the ignore option in glob accepts glob syntax.
### Example - Ignore all node modules.

<S_CODE_TOKEN>

This makes startup load time insignificant while maintaining all meaningful debugging ability.
",zanemcca,2016-02-09 12:11:13
750,2015-10-15 20:17:12,"Could I get some feedback on this?
",zanemcca,2016-02-09 12:11:13
750,2015-11-14 03:34:00,"@zanemcca would this speed up load times?

@3y3 @bajtos or someone can this be looked at?
",DylanPiercey,2016-02-09 12:11:13
750,2015-11-14 17:54:13,"For me it significantly improved load times.
Basically it allows you to completely ignore files and folder. So I ignore node_modules (~ 1Gb) since I rarely need to debug anything in there and it now loads within 5 seconds.
",zanemcca,2016-02-09 12:11:13
750,2015-12-12 00:07:40,"@3y3 Can I please have some feedback?
",zanemcca,2016-02-09 12:11:13
750,2016-01-08 13:12:19,"This seems interesting!
Any feedback in here?
",grsabreu,2016-02-09 12:11:13
750,2016-01-12 03:37:17,"I've tested this with [a project of mine](https://bitbucket.org/joeyrobert/ceruleanjs/branch/fix/faster-debug#diff). It brings the startup time for `node-debug` down to 8.56s from 21.03s without this fix. The size of my `node_modules` folder is 72.4 MB / 8,658 files. This test was run on Windows 10 with a fast SSD.

I only have one `dependencies` in my project. The majority of my `node_modules` is `devDependencies`, so debugging `node_modules` code is not something I need to do. This is one anecdotal benchmark, but I'd say the `ignore` option improves startup time significantly for those that opt into it.
",joeyrobert,2016-02-09 12:11:13
750,2016-01-15 02:20:28,"Thanks for the test @joeyrobert 
",zanemcca,2016-02-09 12:11:13
750,2016-01-25 23:15:42,"Wow! I'm sorry for ignoring this pr for long time! I missed all notifications...
Mmm... I think that I worked on the same problem in `next` branch.
Unfortunately I can't approve this pr, because DevTools uses RegExps everywhere and in future `hidden` option will be part of `framework blackboxing` feature.
In `next` branch I completely avoid using of `glob` for collecting resources tree. I'll backport this changes to current version (it is latest which supports node < v4.0) after `Node Inspector Next` release.

Or maybe someone from this branch can help me to backport new algorithm to current version (with ugly async syntax).

I'm sorry again that I missed this pr - I have a lot of notifications.
",3y3,2016-02-09 12:11:13
750,2016-02-03 15:59:50,"@3y3 I am not sure what you are looking for. 
Are you asking for help to move the changes into RegEx for version `v0.12.5`?

Also when you say you have done something similar in the `next` branch does that mean that the ported changes would be deprecated out after `next`'s release?

Also how have you implemented it in `next`? Is it done through the `hidden` or `--no-preload` or another mechanism entirely?
",zanemcca,2016-02-09 12:11:13
750,2016-02-03 16:24:20,"> Also when you say you have done something similar in the next branch does that mean that the ported changes would be deprecated out after next's release?

No, I'll continue to contribute in 0.x node-inspector branch for this year. I will backport more sensible fixes, but no features.
All features will be implemented in 1.0.0-(alfa -> beta -> stable)

> Also how have you implemented it in next? Is it done through the hidden or --no-preload or another mechanism entirely?

This is a part of `hidden` option now. There is no true reason to load files if we can't pause in their source. Also current logic prevents step into folders matched by hidden RegExps.

https://github.com/node-inspector/node-inspector/blob/next/lib/ScriptFileStorage.js#L224-L255
",3y3,2016-02-09 12:11:13
750,2016-02-07 17:19:20,"Take a chance to current node-inspector master
",3y3,2016-02-09 12:11:13
750,2016-02-08 16:20:18,"I can confirm that 8dd50abcebe6d0029a1d48d74bccacf92052f1bf has solved this problem.

#### Before - with or without `--hidden`
- Appx. 2 min to load

#### After - without `--hidden`
- 15 sec load time

#### After - with `--hidden node_modules/`
- 6 sec load time
",zanemcca,2016-02-09 12:11:13
750,2016-02-08 16:30:59,"I'm not sure if you did it on purpose but you rolled package.json back to v0.12.3?
",zanemcca,2016-02-09 12:11:13
750,2016-02-08 18:34:02,"> I'm not sure if you did it on purpose but you rolled package.json back to v0.12.3?

Ouch!!! Thank you for targetting!

> I can confirm that 8dd50ab has solved this problem.

Nice! So I will prepare v0.12.6 soon
",3y3,2016-02-09 12:11:13
750,2016-02-08 18:36:46,"@zanemcca , do you see any issues in tree? Maybe I ignore some files which should not to be ignored?
",3y3,2016-02-09 12:11:13
750,2016-02-08 20:50:55,"@3y3 I do not see anything missing in the tree.

You do however have some debugs that still refer to `glob` as well as including it in package.json and in  a test.
Also when you rolled package.json back you also rolled back the version of a couple of dependencies.
",zanemcca,2016-02-09 12:11:13
750,2016-02-09 12:11:13,"Released 0.12.6
",3y3,2016-02-09 12:11:13
749,2015-09-19 20:42:27,"I am not able to install node-inspector.  I am not sure if this is the cause, but I just upgraded node to 4 and node-inspector crashes in the browser.  I would appreciate any help.  Here is my error log when trying to npm install:

v8-debug@0.5.4 preinstall C:*\npm\node_modules\node-inspector\node_modules\v8-debug

v8-profiler@5.3.1 preinstall C:*\npm\node_modules\node-inspector\node_modules\v8-profiler

npm WARN optional dep failed, continuing default-browser-id@1.0.2

utf-8-validate@1.2.1 install C:*\npm\node_modules\node-inspector\node_modules\ws\node_modules\utf-8-validate
node-gyp rebuild

C:*\npm\node_modules\node-inspector\node_modules\ws\node_modules\utf-8-validate>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\....\node_modules\node-gyp\bin\node-gyp.js"" rebuild )  else (node  rebuild )
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable ""python"", you can set the PYTHON env variable.
gyp ERR! stack     at failNoPython (C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:116:14)
gyp ERR! stack     at C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:71:11
 ERR! stack     at FSReqWrap.oncomplete (fs.js:82:15)
gyp ERR! System Windows_NT 10.0.10240
gyp ERR! command ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:*\npm\node_modules\node-inspector\node_modules\ws\node_modules\utf-8-validate
gyp ERR! node -v v4.1.0
gyp ERR! node-gyp -v v3.0.3
gyp ERR! not ok

bufferutil@1.2.1 install C:*\npm\node_modules\node-inspector\node_modules\ws\node_modules\bufferutil
node-gyp rebuild

C:\Users\npm\node_modules\node-inspector\node_modules\ws\node_modules\bufferutil>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\....\node_modules\node-gyp\bin\node-gyp.js"" rebuild )  else (node  rebuild )
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable ""python"", you can set the PYTHON env variable.
gyp ERR! stack     at failNoPython (C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:116:14)
gyp ERR! stack     at C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:71:11
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:82:15)
gyp ERR! System Windows_NT 10.0.10240
gyp ERR! command ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:\oaming\npm\node_modules\node-inspector\node_modules\ws\node_modules\bufferutil
gyp ERR! node -v v4.1.0
gyp ERR! node-gyp -v v3.0.3
gyp ERR! not ok
npm WARN optional dep failed, continuing utf-8-validate@1.2.1
npm WARN engine xmlbuilder@2.2.1: wanted: {""node"":""0.8.x || 0.10.x""} (current: {""node"":""4.1.0"",""npm"":""2.14.3""})
npm WARN optional dep failed, continuing bufferutil@1.2.1
|
v8-debug@0.5.4 install C:\UsersppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug
node-pre-gyp install --fallback-to-build

[v8-debug] Success: ""C:\Useata\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.5.4\node-v46-win32-x64\debug.node"" is installed via remote

v8-profiler@5.3.1 install C:\UseppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler
node-pre-gyp install --fallback-to-build

C:\UserspData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\....\node_modules\node-gyp\bin\node-gyp.js"" clean )  else (node  clean )

C:\UserppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler>if not defined npm_config_node_gyp (node ""C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\....\node_modules\node-gyp\bin\node-gyp.js"" configure --fallback-to-build --module=C:\UserppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64\profiler.node --module_name=profiler --module_path=C:\UserppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64 )  else (node  configure --fallback-to-build --module=C:\UserppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64\profiler.node --module_name=profiler --module_path=C:\UsepData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64 )
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable ""python"", you can set the PYTHON env variable.
gyp ERR! stack     at failNoPython (C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:116:14)
gyp ERR! stack     at C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:71:11
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:82:15)
gyp ERR! System Windows_NT 10.0.10240
gyp ERR! command ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"" ""configure"" ""--fallback-to-build"" ""--module=C:\UserspData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64\profiler.node"" ""--module_name=profiler"" ""--module_path=C:\UserspData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64""
gyp ERR! cwd C:\Users\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler
gyp ERR! node -v v4.1.0
gyp ERR! node-gyp -v v3.0.3
gyp ERR! not ok
node-pre-gyp ERR! build error
node-pre-gyp ERR! stack Error: Failed to execute 'node-gyp.cmd configure --fallback-to-build --module=C:\Users\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64\profiler.node --module_name=profiler --module_path=C:\Users\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (C:\Users\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\node_modules\node-pre-gyp\lib\util\compile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:87:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:172:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:817:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)
node-pre-gyp ERR! System Windows_NT 10.0.10240
node-pre-gyp ERR! command ""C:\Program Files\nodejs\node.exe"" ""C:\Users\\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\node_modules\node-pre-gyp\bin\node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd C:\Users\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler
node-pre-gyp ERR! node -v v4.1.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.10
node-pre-gyp ERR! not ok
Failed to execute 'node-gyp.cmd configure --fallback-to-build --module=C:\Users\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64\profiler.node --module_name=profiler --module_path=C:\Users\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-profiler\build\profiler\v5.3.1\node-v46-win32-x64' (1)
npm ERR! Windows_NT 10.0.10240
npm ERR! argv ""C:\Program Files\nodejs\node.exe"" ""C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js"" ""install"" ""-g"" ""node-inspector"" ""--unsafe-perm""
npm ERR! node v4.1.0
npm ERR! npm  v2.14.3
npm ERR! code ELIFECYCLE

npm ERR! v8-profiler@5.3.1 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-profiler@5.3.1 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! This is most likely a problem with the v8-profiler package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get their info via:
npm ERR!     npm owner ls v8-profiler
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:*\npm-debug.log
",maityarkodeb,2015-09-19 22:44:47
749,2015-09-19 21:54:35,"It says this a few times:

> Error: Can't find Python executable ""python"", you can set the PYTHON env variable.

Please see the [node-gyp installation](https://github.com/nodejs/node-gyp#installation). Some other helpful resources include [this comment](https://github.com/nodejs/node-gyp/issues/736#issuecomment-141640079) and [this comment](https://github.com/ncb000gt/node.bcrypt.js/issues/340#issuecomment-141660762). Also, if you install VS, you may not have a C++ compiler, in which case you may get an error about ""CL.exe"" not being found. To fix that, open VS, create a ""New Project"", choose something under the Visual C++ category, and then you'll see options to install a C++ compiler (which you should go with). After all of that, you might as well just do a full reboot, and then it should all work like a charm.
",jamescostian,2015-09-19 22:44:47
749,2015-09-19 22:44:47,"I saw that error and suspected it might be the issue.  I probably should have dug a little deeper before posting an issue on here.  However, I appreciate your reply.  I followed your steps and after installing python, node-gyp, VS and C++ compiler, I have node inspector up and running again.  Thanks @jamescostian, you're awesome!!!!! :)
",maityarkodeb,2015-09-19 22:44:47
748,2015-09-19 01:53:12,"I wrote [`babel-node-debug`](https://github.com/CrabDude/babel-node-debug/), which is effectively a huge hack to merge `node-debug` and `babel-node` by manually invoking `node-inspector/bin/node-debug.js::main`. It mostly works, which was surprising, but it seems impossible to place the initial breakpoint in the sourcemap / uncompiled file. 

Currently, by default, node adds a breakpoint at line 1 of your main, which in bable-node's case is `babel/lib/_babel-node.js`. I use `yadc` to send 2 V8 debugger protocol commands:

<S_CODE_TOKEN>

The above `yadc` API isn't important. 

**I'm just curious, is there a known way to set a breakpoint in the uncompiled code instead of the compiled code?**

Here's the crazy hack in question: [`babel-node-debug/bin/bode-debug.js`](https://github.com/CrabDude/babel-node-debug/blob/master/bin/bode-debug.js)

And for reference, [here's the silliness](https://github.com/CrabDude/babel-node-debug/commit/1a583ac651fda067b6faaa7463e2a4f2606161a1) that I had to add to make it possible.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26797267-setting-the-initial-breakpoint?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",CrabDude,
748,2016-02-04 05:49:41,"It seems it _may_ be possible to do this using [Chrome's Remote Debugging Protocol](https://developer.chrome.com/devtools/docs/protocol/0.1/debugger) instead of [V8's](https://github.com/v8/v8/wiki/Debugging-Protocol) to set the breakpoint.

Currently attempting to update the code to see if this works.
",CrabDude,
748,2016-02-04 08:48:09,"Something wrong with

<S_CODE_TOKEN>

?
",3y3,
748,2016-02-04 22:21:56,"@3y3 That might work. Thanks for the recommendation, but there's no way to gain access to `this._debuggerClient`. It's returned in `DebugServer.prototype._createSession`, which is created in `inspector.js`, but never stored by `handleWebSocketConnection()` anywhere.

Of course, since I'm wrapping `node-debug`, this is all a bit pointless anyways since I can't reference or monkey patch a child process. **That said, I'll definitely try to create my own instance of `DebugServer` to gain a reference to `Session` and thus `debuggerClient` to make that call.** Thanks!
",CrabDude,
748,2016-02-04 22:32:46,"@3y3 Actually, a cursory indicates a session requires a server and a client connection, which if I went down that route, I'd have to effectively replace the `node-inspector` internals or replace `node-debug` entirely with my own version that calls my own `inspector.js` equivalent to create my own server just to have my own session and debuggerClient, which is of course a non-starter...

Let me know if you can think of any way I can do it differently.
",CrabDude,
748,2016-02-04 22:36:52,"@3y3 So, actually, it looks like `Debugger.prototype.request` / `DebuggerClient.prototype.request` both use the V8 Debugging Protocol, and so no, **`""setbreakpoint""`(which is what I'm doing) doesn't work.**
",CrabDude,
748,2016-02-04 22:41:59,"FWIW, the command in the code in the OP should be `""setbreakpoint""` not `""setBreakpoint""`, and I'm now using `""script""` instead of `""scriptRegExp""` like so:

<S_CODE_TOKEN>

which still sets the breakpoint in the compiled file, not the original file. :disappointed: 
",CrabDude,
748,2016-02-05 02:53:27,"So, from what I've observed, consistent with @bajtos 's comment [here](https://github.com/nodejs/node/issues/2546#issuecomment-135666573) (emphasis added):

> I also think it's a waste of everybody's time when every debugger [...] has to reimplement (and keep maintaining) the same **DevTools->V8 protocol bridge**.

`node-inspector` doesn't actually expose the WebKit / DevTools ""Remote Debugging API"". I've tried listening for events and sending commands with `chrome-remote-interface`, and neither worked (it did connect), I can only assume because it's only exposing the necessary APIs and then bridging them to the V8 Debugging Protocol.

My best (ignorant) guess is that right now, `node-inspector`'s ""front-end"" is mimicking the actual WebKit Remote Debugging Protocol calls (e.g., when a breakpoint is set in the UI) with V8 Debugging Protocol calls, which is why it is impossible to set a breakpoint in the source mapped file (since it's purely a UI abstraction and has no parallel in the V8 Debugging Protocol).

Thoughts?
",CrabDude,
748,2016-02-05 06:26:40,"It's right - to break in original file (which is not situate in app memory as true compiled script), you need to  set breakpoint in this file from front-end ui.
It's possible now - look at front-end manipulations in `front-end-node` folder. This can be your initial step.

Node Inspector has experimental plugins system. We don't have plugins installer now, but work in progress. All plugins should be situate in `node-inspector/plugins` by default, or in any other folder defined in `plugin-path` option.

Small plugin example https://github.com/3y3/ni-ansi-support
",3y3,
747,2015-09-15 19:38:24,"Can't decide if this is an issue or something I'm doing wrong.

This happens when I start node-inspector then open the url in the startup message. I can use NI successfully but sometimes it gets in these loops where I: 
1. start NI
2. browse to URL provided
3. immediately get a message about socket closed
4. check terminal and see:  

<S_CODE_TOKEN>

Then I start the whole process again and it happens again. It's like there's some cached value that's causing NI to fail as soon as it tries to load up. 

I can use NI successfully most of the time but these loops are frustrating. 

<S_CODE_TOKEN>

(happened in 0.12.5 as well) 
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26710759-how-can-i-work-around-fix-unexpected-token-t?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jcollum,
747,2015-09-15 22:41:08,"Hello @jcollum 
It will be useful to see your [debug logs](https://github.com/node-inspector/node-inspector/wiki/Debug-logs)
",3y3,
747,2015-09-15 23:03:33,"OK I can post those next time it happens. I got it fixed today, I think by killing all my node processes. 
",jcollum,
747,2015-09-19 16:20:11,"The same happens to me too sometimes. Unfortunately I cannot provide precise steps to reproduce because it's kind of random and I'm not aware of any pattern in what I do. I did however manage to get the [log](https://gist.github.com/jiripospisil/be56e8b81d147d521b1f) (although I'm not sure if it's of any help).

node v0.12.7
",jiripospisil,
747,2015-09-21 20:54:39,"I think this happens when the node process becomes disconnected somehow and is running off in the background even though you don't know it.  When this has happened to me I've looked in the various terminal windows I may have open to ensure that there are no running node processes.  Then I will list all of the running node processes on the system, inevitably there will be at least one which I then kill.  After that the debugger is up and running again without issue. 
",rdingwell,
747,2015-09-25 21:32:10,"I hit this error today, here's the logging when I hit the error: 

<S_CODE_TOKEN>
",jcollum,
747,2015-09-29 15:59:49,"Happening again today, same message:

<S_CODE_TOKEN>
",jcollum,
747,2015-10-05 22:23:21,"I can recreate this issue really easily by hitting the back button on the browser while debugging. The `Unexpected token T` error happens instantly. Chrome 45. Accidentally hitting Back means finding and killing the node process, then restarting node-inspector. :-1: 
",jcollum,
747,2015-10-19 21:47:14,"I posted my debug logs a month ago guys. I've hit this error like 8 times in the last 15 minutes. It'd be nice to be able to fix this when NI gets into these failure loops. The only fix I've been able to find is to kill _all_ node processes and restart NI. 
",jcollum,
746,2015-09-14 18:50:39,"Hi
I've created a new project, but when doing npm install (after bower install) by the first time, an error is thrown:

It seems that when attempting to install v8-debug, ""Error: Cannot find module './lib/cookies'"" comes up

yp info using node-gyp@1.0.1
gyp info using node@0.10.36 | darwin | x64
gyp verb command configure []
gyp verb check python checking for Python executable ""python"" in the PATH
gyp verb which succeeded python /usr/bin/python
gyp verb check python version python -c ""import platform; print(platform.python_version());"" returned: ""2.7.6\n""
gyp verb get node dir no --target version specified, falling back to host node version: v0.10.36
gyp verb command install [ 'v0.10.36' ]
gyp ERR! UNCAUGHT EXCEPTION 
gyp ERR! stack Error: Cannot find module './lib/cookies'
gyp ERR! stack at Function.Module._resolveFilename (module.js:338:15)
gyp ERR! stack at Function.Module._load (module.js:280:25)
gyp ERR! stack at Module.require (module.js:364:17)
gyp ERR! stack at require (module.js:380:17)
gyp ERR! stack at Object. (/Users/rrgarciach/node_modules/npm/node_modules/request/index.js:16:29)
gyp ERR! stack at Module._compile (module.js:456:26)
gyp ERR! stack at Object.Module._extensions..js (module.js:474:10)
gyp ERR! stack at Module.load (module.js:356:32)
gyp ERR! stack at Function.Module._load (module.js:312:12)
gyp ERR! stack at Module.require (module.js:364:17)
gyp ERR! System Darwin 14.1.0
gyp ERR! command ""/usr/local/bin/node"" ""/Users/rrgarciach/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""configure"" ""--fallback-to-build"" ""--module=/Users/rrgarciach/Documents/Development/Node/Jupiter-App/node_modules/grunt-node-inspector/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v11-darwin-x64/debug.node"" ""--module_name=debug"" ""--module_path=/Users/rrgarciach/Documents/Development/Node/Jupiter-App/node_modules/grunt-node-inspector/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v11-darwin-x64""
gyp ERR! cwd /Users/rrgarciach/Documents/Development/Node/Jupiter-App/node_modules/grunt-node-inspector/node_modules/node-inspector/node_modules/v8-debug
gyp ERR! node -v v0.10.36
gyp ERR! node-gyp -v v1.0.1
gyp ERR! This is a bug in node-gyp.
gyp ERR! Try to update node-gyp and file an Issue if it does not help:
gyp ERR! https://github.com/TooTallNate/node-gyp/issues
node-pre-gyp ERR! build error 
node-pre-gyp ERR! stack Error: Failed to execute '/usr/local/bin/node /Users/rrgarciach/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --module=/Users/rrgarciach/Documents/Development/Node/Jupiter-App/node_modules/grunt-node-inspector/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v11-darwin-x64/debug.node --module_name=debug --module_path=/Users/rrgarciach/Documents/Development/Node/Jupiter-App/node_modules/grunt-node-inspector/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v11-darwin-x64' (7)
node-pre-gyp ERR! stack at ChildProcess. (/Users/rrgarciach/Documents/Development/Node/Jupiter-App/node_modules/grunt-node-inspector/node_modules/node-inspector/node_modules/v8-debug/node_modules/node-pre-gyp/lib/util/compile.js:83:29)
node-pre-gyp ERR! stack at ChildProcess.emit (events.js:98:17)
node-pre-gyp ERR! stack at maybeClose (child_process.js:766:16)
node-pre-gyp ERR! stack at Process.ChildProcess._handle.onexit (child_process.js:833:5)
node-pre-gyp ERR! System Darwin 14.1.0
node-pre-gyp ERR! command ""node"" ""/Users/rrgarciach/Documents/Development/Node/Jupiter-App/node_modules/grunt-node-inspector/node_modules/node-inspector/node_modules/v8-debug/node_modules/.bin/node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd /Users/rrgarciach/Documents/Development/Node/Jupiter-App/node_modules/grunt-node-inspector/node_modules/node-inspector/node_modules/v8-debug
node-pre-gyp ERR! node -v v0.10.36
node-pre-gyp ERR! node-pre-gyp -v v0.6.10
node-pre-gyp ERR! not ok

Hope you can help me here. Thanks!

Info about versions used:
NPM: n2.14.3
node: v0.10.36
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26680499-cannot-find-module-lib-cookies-when-first-npm-install?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",rrgarciach,
746,2015-10-12 11:16:51,"+1
",iDrummer,
746,2015-10-13 03:09:39,"upgraded to node v4.2.0. solved
",iDrummer,
746,2017-02-25 06:09:34,why did that solve the problem?,glennbech,
745,2015-09-14 18:23:56,"i'm confused, the latest node version seems to be v0.10.40.   debug.node is in v0.5.3/node-v11-linux-x64, not ...v46-linux...
",QuinDennis,2015-12-06 20:55:52
745,2015-09-14 19:44:19,"Are you using nvm?
I think you have two node versions installed on your machine.
",3y3,2015-12-06 20:55:52
745,2015-09-17 09:28:54,"I have tried on OSX, docker on centos, it is pointing to 64 bit issue. If you have 64bit versions installed (NPM, node), you are likely to have problems installing node-inspector.
",CoreSoft2,2015-12-06 20:55:52
745,2015-09-17 12:32:36,"@QuinDennis , v46 is not a version of node. It is an ABI for detecting used V8 version.
",3y3,2015-12-06 20:55:52
745,2015-12-06 20:55:52,"Try to install 0.12.5. This version includes prebuilt binaries for all actual node versions from the box.
Feel free to reopen this issue if it still exist.
",3y3,2015-12-06 20:55:52
744,2015-09-14 16:22:27,"node-inspector version: `Node Inspector v0.12.3`
node version: `v4.0.0`
OS: `Windows 7 Professional SP1, 32-bit`

For some reason, when I try to take heap snapshots (or finish recording one), if I get unlucky enough, the program (and the debugger) will completely exit, with no further output. What's causing that to happen?

The command I use is `node-debug index.js`
",SEAPUNK,2015-09-20 08:08:16
744,2015-09-14 16:26:22,"Can you provide small example of code to reproduce this problem?
",3y3,2015-09-20 08:08:16
744,2015-09-14 16:29:59,"The code I'm running the debugger on basically calls the API continuously to get data updates from ChannelAdvisor. The majority of the code that runs [is in this library](https://github.com/SEAPUNK/channeladvisor-localdb).

---

I'll see if I can write a program that more-or-less reproduces the issue.
",SEAPUNK,2015-09-20 08:08:16
744,2015-09-14 17:05:59,"I can't seem to reproduce with code other than mine. I'll look into it, and figure out what might be causing that.

I did notice that during snapshotting, it pauses execution of code, so that might have something to do with it pausing the code in the middle of a web request or a mysql transaction.
",SEAPUNK,2015-09-20 08:08:16
744,2015-09-14 19:56:57,"Snapshot is a common synchronous operation, I don't think that mysql transaction can be a problem.
Please try to start node-inspector and app in different shells:
First shell

<S_CODE_TOKEN>

Second shell

<S_CODE_TOKEN>

Any new error logs after this operation?
",3y3,2015-09-20 08:08:16
744,2015-09-14 21:15:19,"Nope. This is what I did:
1. started node-inspector
2. started the program: `node --debug-brk=5858 index.js`
3. opened up the debugger page
4. pressed the ""play"" button on the source
5. went to Profiles and started ""Record Heap Allocations""
6. while it was doing some web requests via the node-soap library, I pressed the ""Stop Record"" button, and the program just exited out. No errors, no nothing. node-inspector is still operational.

![](http://puu.sh/kbqUN/4f77b96bdc.png)
",SEAPUNK,2015-09-20 08:08:16
744,2015-09-14 21:26:39,"...now that I think about it, the other times it exited out were during web requests as well. Maybe that's the problem?
",SEAPUNK,2015-09-20 08:08:16
744,2015-09-20 08:08:16,"I'll close this issue for now since I am not really pursuing this problem anymore; if someone else is having the same issue, they could open up their own issue.

On a side note, it might have to do with a confirmed node bug, that 3y3 himself posted: https://github.com/nodejs/node/issues/781
",SEAPUNK,2015-09-20 08:08:16
743,2015-09-14 12:22:18,"node-inspector --version => Not applicable, node-inspector not building
node --version => v4.0.0
uname -a => Linux rpi0 4.1.6+ #810 PREEMPT Tue Aug 18 15:19:58 BST 2015 armv6l GNU/Linux
# (I don't see how to attach a log file, so I've included the text here.  I can provide the npm-debug.log is necessary.)

npm -g install node-inspector

> v8-profiler@5.3.0 preinstall /usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler
## 

> v8-debug@0.5.3 preinstall /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug

npm WARN optional dep failed, continuing default-browser-id@1.0.2
/

> utf-8-validate@1.2.1 install /usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules/utf-8-validate
> node-gyp rebuild

gyp WARN EACCES user ""root"" does not have permission to access the dev dir ""/root/.node-gyp/4.0.0""
gyp WARN EACCES attempting to reinstall using temporary dev dir ""/usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules/utf-8-validate/.node-gyp""
make: Entering directory '/usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules/utf-8-validate/build'
  CXX(target) Release/obj.target/validation/src/validation.o
  SOLINK_MODULE(target) Release/obj.target/validation.node
  COPY Release/validation.node
make: Leaving directory '/usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules/utf-8-validate/build'
npm WARN engine xmlbuilder@2.2.1: wanted: {""node"":""0.8.x || 0.10.x""} (current: {""node"":""4.0.0"",""npm"":""2.14.2""})

> bufferutil@1.2.1 install /usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules/bufferutil
> node-gyp rebuild

gyp WARN EACCES user ""root"" does not have permission to access the dev dir ""/root/.node-gyp/4.0.0""
gyp WARN EACCES attempting to reinstall using temporary dev dir ""/usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules/bufferutil/.node-gyp""
make: Entering directory '/usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules/bufferutil/build'
  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
  SOLINK_MODULE(target) Release/obj.target/bufferutil.node
  COPY Release/bufferutil.node
make: Leaving directory '/usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules/bufferutil/build'

> v8-debug@0.5.3 install /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
> node-pre-gyp install --fallback-to-build

gyp WARN EACCES user ""root"" does not have permission to access the dev dir ""/root/.node-gyp/4.0.0""
gyp WARN EACCES attempting to reinstall using temporary dev dir ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/.node-gyp""
make: Entering directory '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build'
make: **\* No rule to make target '../.node-gyp/4.0.0/include/node/common.gypi', needed by 'Makefile'.  Stop.
make: Leaving directory '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build'
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/node-gyp/lib/build.js:270:23)
gyp ERR! stack     at emitTwo (events.js:87:13)
gyp ERR! stack     at ChildProcess.emit (events.js:172:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
gyp ERR! System Linux 4.1.6+
gyp ERR! command ""/usr/local/bin/node"" ""/usr/local/lib/node_modules/node-gyp/bin/node-gyp.js"" ""build"" ""--fallback-to-build"" ""--module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.3/node-v46-linux-arm/debug.node"" ""--module_name=debug"" ""--module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.3/node-v46-linux-arm""
gyp ERR! cwd /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
gyp ERR! node -v v4.0.0
gyp ERR! node-gyp -v v3.0.2
gyp ERR! not ok 
node-pre-gyp ERR! build error 
node-pre-gyp ERR! stack Error: Failed to execute '/usr/local/bin/node /usr/local/lib/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.3/node-v46-linux-arm/debug.node --module_name=debug --module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.3/node-v46-linux-arm' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/node_modules/node-pre-gyp/lib/util/compile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:87:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:172:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:817:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)
node-pre-gyp ERR! System Linux 4.1.6+
node-pre-gyp ERR! command ""/usr/local/bin/node"" ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/node_modules/.bin/node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
node-pre-gyp ERR! node -v v4.0.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.10
node-pre-gyp ERR! not ok 
Failed to execute '/usr/local/bin/node /usr/local/lib/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.3/node-v46-linux-arm/debug.node --module_name=debug --module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.3/node-v46-linux-arm' (1)

> v8-profiler@5.3.0 install /usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler
> node-pre-gyp install --fallback-to-build

gyp WARN EACCES user ""root"" does not have permission to access the dev dir ""/root/.node-gyp/4.0.0""
gyp WARN EACCES attempting to reinstall using temporary dev dir ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/.node-gyp""
make: Entering directory '/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build'
make: **\* No rule to make target '../.node-gyp/4.0.0/include/node/common.gypi', needed by 'Makefile'.  Stop.
make: Leaving directory '/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build'
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node_modules/node-gyp/lib/build.js:270:23)
gyp ERR! stack     at emitTwo (events.js:87:13)
gyp ERR! stack     at ChildProcess.emit (events.js:172:7)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
gyp ERR! System Linux 4.1.6+
gyp ERR! command ""/usr/local/bin/node"" ""/usr/local/lib/node_modules/node-gyp/bin/node-gyp.js"" ""build"" ""--fallback-to-build"" ""--module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.3.0/node-v46-linux-arm/profiler.node"" ""--module_name=profiler"" ""--module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.3.0/node-v46-linux-arm""
gyp ERR! cwd /usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler
gyp ERR! node -v v4.0.0
gyp ERR! node-gyp -v v3.0.2
gyp ERR! not ok 
node-pre-gyp ERR! build error 
node-pre-gyp ERR! stack Error: Failed to execute '/usr/local/bin/node /usr/local/lib/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.3.0/node-v46-linux-arm/profiler.node --module_name=profiler --module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.3.0/node-v46-linux-arm' (1)
node-pre-gyp ERR! stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/node_modules/node-pre-gyp/lib/util/compile.js:83:29)
node-pre-gyp ERR! stack     at emitTwo (events.js:87:13)
node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:172:7)
node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:817:16)
node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)
node-pre-gyp ERR! System Linux 4.1.6+
node-pre-gyp ERR! command ""/usr/local/bin/node"" ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/node_modules/.bin/node-pre-gyp"" ""install"" ""--fallback-to-build""
node-pre-gyp ERR! cwd /usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler
node-pre-gyp ERR! node -v v4.0.0
node-pre-gyp ERR! node-pre-gyp -v v0.6.10
node-pre-gyp ERR! not ok 
Failed to execute '/usr/local/bin/node /usr/local/lib/node_modules/node-gyp/bin/node-gyp.js build --fallback-to-build --module=/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.3.0/node-v46-linux-arm/profiler.node --module_name=profiler --module_path=/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.3.0/node-v46-linux-arm' (1)
npm ERR! Linux 4.1.6+
npm ERR! argv ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""-g"" ""install"" ""node-inspector""
npm ERR! node v4.0.0
npm ERR! npm  v2.14.2
npm ERR! code ELIFECYCLE

npm ERR! v8-debug@0.5.3 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the v8-debug@0.5.3 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! This is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     /home/jnavratil/npm-debug.log
",JohnNavratil,2015-09-14 23:18:17
743,2015-09-14 14:21:39,"Please try to reinstall node-inspector now with `--unsafe-perm` flag.

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>
",3y3,2015-09-14 23:18:17
743,2015-09-14 14:52:52,"Thanks for you swift reply.  That did it!   The build completed and...

node-inspector --version => Node Inspector v0.12.3

As I mentioned, I'm a newbie to this environment.  Would you mind posting an explanation of why this worked, or point me to some documentation so that I will know next time?
",JohnNavratil,2015-09-14 23:18:17
743,2015-09-14 15:47:19,"All that I know about this situation: https://docs.npmjs.com/misc/config#unsafe-perm

So each time, when I see `root` word in error log. I recommend to use `--unsafe-perm` flag =)
",3y3,2015-09-14 23:18:17
743,2015-10-03 19:04:01,"I'm getting this same error.. installing rpi-gpio on node 4.0.0.

Command: pi@raspberrypi ~/node_projects/gpio $ sudo npm install -g --unsafe-perm rpi-gpio

Here's the output:
http://pastebin.com/MkfWUnbY

Any idea what's going on?
",natdm,2015-09-14 23:18:17
743,2015-10-03 21:25:07,"@natdm , please update your c++ builder
",3y3,2015-09-14 23:18:17
743,2015-11-12 13:05:51,"I'm on node 5 and i've updated npm and I'm still getting this error https://gist.github.com/robertmain/122397a9409dfdc872cd
",robertmain,2015-09-14 23:18:17
743,2015-11-17 12:00:06,"+1 Can't find a solution

@3y3 have tried updating c++ builder but am still stuck with same problem.
",julienvincent,2015-09-14 23:18:17
743,2015-11-17 15:55:46,"I updated Visual Studio to VS2013 (on Windows) and that fixed it for me :smile: 
",robertmain,2015-09-14 23:18:17
743,2015-11-17 16:54:55,"I can confirm that it actually was the c++ builder. I did not update it correctly. Solved.
",julienvincent,2015-09-14 23:18:17
742,2015-09-09 13:22:59,"This basically makes the hotkey unusable ... because you then need to use the mouse to go click on the ""Sources"" panel again.

Clicking the Resume button manually keeps the Sources pane active.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26558182-use-of-resume-hotkey-f8-causes-ui-to-jump-to-the-console?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",Back-io,
742,2015-09-09 13:27:42,"Hmm ... looks like it's working now ... I swore I updated first before posting this :-)
",Back-io,
742,2015-12-05 13:06:55,"I have this issue too, every time I hit on F8 the tab is changed to Console
",mike1808,
742,2015-12-05 13:08:39,"Since posting that I've found that the behavior is very hit-and-miss for me.
",Back-io,
742,2015-12-05 13:52:38,"I tried to understand why the tab changes and the reason is when you unpause your debugger and something is printed in your console the node-inspector's backend sends the message to the front-end to show that printed log in your console. 

Update: the tab is changed when this message is send to front-end

<S_CODE_TOKEN>
",mike1808,
742,2015-12-05 13:57:35,"Cool good catch
",Back-io,
742,2015-12-05 13:58:24,"I think, we need some options that will prevent the tab switch.
",mike1808,
742,2015-12-10 18:04:44,"@mike1808 , you partially right here:

> when you unpause your debugger and something is printed in your console the node-inspector's backend sends the message to the front-end to show that printed log in your console.

But node-inspector do it only for internal errors. When we use F8, inspector sends two `continue` requests to server instead of one. I already try to fix this error, but maybe I do it in new frontend, which is not released now.
",3y3,
741,2015-09-08 18:45:49,"Hi guys, 

I am a huge fan of Node-Inspector and I am trying to integrate it into our dev workflow. I've run into some problems.

I put together a basic app using the express generator

Breakpoints and debugger statements do properly pause the application, but there are no variables in the namespace at all. 

<img width=""1044"" alt=""screen shot 2015-09-08 at 11 38 04 am"" src=""https://cloud.githubusercontent.com/assets/5798752/9744085/a5b0cad8-561e-11e5-9797-2bd97e31a56d.png"">

nothing actually exists in the console. No matter where I place a breakpoint, the app works but the console is completely unaware of any variables.

Here are the errors I am getting upon opening node-inspector:
<img width=""1051"" alt=""screen shot 2015-09-08 at 11 43 32 am"" src=""https://cloud.githubusercontent.com/assets/5798752/9744146/e1b9d222-561e-11e5-9150-a2bc9e311d84.png"">

When installing node-inspector, I get this warning as well:

npm WARN engine xmlbuilder@2.2.1: wanted: {""node"":""0.8.x || 0.10.x""} (current: {""node"":""0.12.7"",""npm"":""2.14.2""})

current node version: 0.12.7
current npm version: 2.14.2
current inspector version: 0.12.3
platform: Mac OS X (fully updated)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26536936-node-inspector-not-working-on-current-version-of-node?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",qhenkart,
741,2015-09-08 20:53:17,"Emmm... Please click on console tab in upper part of your window... This should solve main part of your problems =)
There also exists problem with scrollbars... This is a known issue #722
",3y3,
741,2015-11-06 19:32:09,"It's not working for me either.  Browser opens and nothing happens.  Is there information I can give you to be of more help?  Happening with `v0.12.3`
",jsdevel,
740,2015-09-07 01:39:35,"if i try to install node-inspector 0.12.3 with `npm install -g node-inspecotr`, the installation would fail with the following messages:

<S_CODE_TOKEN>

But if i change to node-inspector@0.12.2, everything is ok.
",noscripter,2015-11-16 03:36:23
740,2015-09-07 09:21:43,"Can you try to use `npm cache clean`?
",3y3,2015-11-16 03:36:23
740,2015-09-09 01:06:13,"I have the same problem. ""npm cache clean"" doesn't work.
",xiangpenpende,2015-11-16 03:36:23
740,2015-09-10 16:39:59,"same here, Windows 7
",Webkadabra,2015-11-16 03:36:23
740,2015-09-10 17:10:16," I can't seem to install node i node-inspector -g, running node 4, getting errors:

<S_CODE_TOKEN>

Advice is appreciated! Of course, I googled and seem to have tried most solutions out there, from reinstalling all windows libs to using different versions of msvs like npm -g i node-inspector --msvs_version=2010 2012, 2013 etc.
",Webkadabra,2015-11-16 03:36:23
740,2015-09-10 18:41:05,"@Webkadabra , can you try to globally install `node-pre-gyp`

<S_CODE_TOKEN>
",3y3,2015-11-16 03:36:23
740,2015-09-10 20:28:33,"@3y3 `node-pre-gyp` installed successfully, but same issue when installing `node-inspector`
",Webkadabra,2015-11-16 03:36:23
740,2015-09-10 20:30:24,"@3y3 Error:

<S_CODE_TOKEN>
",Webkadabra,2015-11-16 03:36:23
740,2015-09-11 09:23:35,"Same on OS X: 

<S_CODE_TOKEN>
",deksden,2015-11-16 03:36:23
740,2015-09-11 15:03:28,"I'm having similar issues on Windows 7.  Here's my [npm-debug.log](https://gist.githubusercontent.com/CKarper/e681f60b12ecfb7fe673/raw/d9ca2c82d68b095253ed29e24fd6445e630341fc/npm-debug.log) if that helps...
",CKarper,2015-11-16 03:36:23
740,2015-09-14 12:57:44,"Same issue on OSX

<S_CODE_TOKEN>
",iPlain,2015-11-16 03:36:23
740,2015-09-14 14:13:48,"Linux and Mac OS users can try to reinstall node-inspector now. I released v8-profiler and v8-debug with prebuilt binaries for node v4.
Window users still have a problem.
",3y3,2015-11-16 03:36:23
740,2015-09-14 15:02:52,"@3y3 Cool - i can confirm that my problem was fixed - now i have most recent version! Tnx.
",deksden,2015-11-16 03:36:23
740,2015-09-14 15:24:18,"@3y3 Yup also fixed for me on OSX :)
",iPlain,2015-11-16 03:36:23
740,2015-09-14 15:51:46,"https://github.com/appveyor/ci/issues/402 should be fixed for prebuilt binaries for windows.

@noscripter , can you try to reinstall node-inspector now. I bump v8-profiler and v8-debug versions.
If error still exist will be reasonable to open bug in npm repository.
",3y3,2015-11-16 03:36:23
740,2015-11-16 03:36:23,"yeah,  it works now on mac os x, thanks for your hard work @3y3 
",noscripter,2015-11-16 03:36:23
739,2015-09-05 19:53:11,"can you bump to 0.12.3?
",thedug,2015-09-05 19:56:12
739,2015-09-05 19:55:01,"Already bumped (some minutes ago) =)
",3y3,2015-09-05 19:56:12
739,2015-09-05 19:56:12,"Doh.. I posted this on the wrong project. :)
",thedug,2015-09-05 19:56:12
738,2015-09-03 18:31:21,"Hi,

I am currently not being able to debug Symbols.

<S_CODE_TOKEN>

STR:

1.

<S_CODE_TOKEN>

2.

<S_CODE_TOKEN>

3.
![node-inspector](https://cloud.githubusercontent.com/assets/1364564/9667029/bb4b0a00-5279-11e5-9e2b-aaa4503ebc3a.png)

Although `console.log(MY_SYMBOL)` outputs `undefined` on the node-inspector UI, nodejs console has printed out the `Symbol` properly

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26425597-can-t-inspect-symbols-undefined?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",arielschiavoni,
737,2015-09-02 16:42:27,"Run node-debug with iojs(2.3.4) [mac os]
Then an error printed in chrome:

<S_CODE_TOKEN>

I entered '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.2',only found a directory 'node-v14-darwin-x64'.

The same problem with v8-profile,and in linux too.
",JiaJiaJiang,2015-09-04 09:00:56
737,2015-09-02 16:47:14,"Image of errors
![image](https://cloud.githubusercontent.com/assets/4150781/9637702/d96bf17a-51d4-11e5-9d56-c90b5dc337bc.png)
the 1st line is the error mentioned above,
the following lines are errors that occured after some profiler actions.
",JiaJiaJiang,2015-09-04 09:00:56
737,2015-09-02 18:43:01,"Is it possible that you have two node versions installed on your machine?
",3y3,2015-09-04 09:00:56
737,2015-09-03 14:48:42,"@3y3 does this module support iojs?
",JiaJiaJiang,2015-09-04 09:00:56
737,2015-09-04 08:57:18,"Yes, iojs < 3 completely supported
",3y3,2015-09-04 09:00:56
737,2015-09-04 09:00:56,"@3y3 thank you
",JiaJiaJiang,2015-09-04 09:00:56
736,2015-09-01 19:00:16,"Using same code as Chromium team:
https://codereview.chromium.org/690893002/diff/1/Source/devtools/front_end/ui/treeoutline.js
",gfpacheco,
735,2015-08-31 16:40:01,"The previous describeProgram variable, when evaluated in V8, fails with a `ReferenceError: process is not defined`, so result is undefined. This change evaluates the programDescription stuff outside of V8.

I haven't worked with V8 or node-inspector before, this solution is based partially off of of the comment in the changed block of code.

This attempts to resolve #730.
",apexskier,
735,2015-08-31 19:30:03,"Sorry, but this is wrong code.
Main target of this section of code - receive debugged app environment.
In your implementation you receive environment of node-inspector.

Can you provide more info in original issue. (Maybe sinple snippet of code, where I can reproduce this error)?
",3y3,
734,2015-08-31 10:52:44,"Hello,

I am struggling while trying to install node-inspector on my machine which runs on Windows 8.1.

By following the [installation guide of node-gyp](https://www.npmjs.com/package/node-gyp), I installed Python 2.7, Visual Studio community edition, Windows SDK and node-gyp successfully.

I do not understand what I am missing. Here below is my console output (I replaced my personal information with xxx and zzz):

<S_CODE_TOKEN>

Thank you in advance for your help.
Sovattha
",sovattha,2015-09-07 11:42:21
734,2015-09-05 19:33:56,"Please try to reproduce this on Node Inspector 0.12.3
",3y3,2015-09-07 11:42:21
734,2015-09-06 21:30:20,"What happens if you try to install node-inspector without installing node-gyp or any or its deps?

I managed to install node-inspector successfully on a nearly clean Windows 8.1 machine (with not much more than git 1.9.5 and node 0.12.7 over the clean install), despite the node-gyp python errors.

The only issue I had was that npm didn't update PATH, I had to follow this
http://stackoverflow.com/a/28339816
i.e. add `PATH` with value `%AppData%\npm;` in the user env variables settings
",jakub-g,2015-09-07 11:42:21
734,2015-09-07 11:42:21,"Thank you for your help! Fixing the PATH was the solution to my problem.
",sovattha,2015-09-07 11:42:21
733,2015-08-31 07:53:22,"to fix issue #716 update dependency with new version of `ws` library, that use updated `utf-8-validatie` library. so it is now installs well
OS: UBUNTU 14.04.3 64bit 
iojs: 3.2
",vedmalex,
732,2015-08-31 05:19:19,"Hi all,

I do not know for sure what happened. I installed and used node-inspector without problem until yesterday. And then the Chrome browser lost his icon (but still worked), I uninstalled and reinstalled Chrome. After that whenever I tried to run **node-debug my_app.js**, I've got this message

_Debugger listening on port 5858
events.js:85
      throw er; // Unhandled 'error' event
            ^
Error: spawn C:\Program Files (x86)\Google\Chrome\Application\new_chrome.exe ENOENT
    at exports._errnoException (util.js:746:11)
    at Process.ChildProcess._handle.onexit (child_process.js:1053:32)
    at child_process.js:1144:20
    at process._tickCallback (node.js:355:11)_

The directory C:\Program Files (x86)\Google\Chrome\Application\ has just _chrome.exe_

I removed and reinstalled **node-inspector** and **Chrome browser** also restarted my PC many times but the error still persists. I made a copy of chrome.exe and renamed it **new_chrome.exe**, the error's gone but node-inspector doesn't work (no new debug window). 

Have anyone any idea of this error or how to config the node-debug to have it run chrome.exe instead of new_chrome.exe ? 

Thanks for your help
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26321277-new_chrome-exe-enoent?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",utuhori,
732,2015-09-06 21:40:11,"This seems very weird (`new_chrome.exe` thing), though the file not found error seems a bit similar to #694 

Can you open
`~/.config/browser-launcher2` in git bash, or
`%HOMEDRIVE%%HOMEPATH%/.config/browser-launcher2` in cmd 
and delete `config.json` and check again?
",jakub-g,
732,2016-03-24 14:50:59,"Suggested a temporary fix for this error at http://stackoverflow.com/questions/36201302/node-inspector-unable-to-open-chrome-browser-throwing-error-enoent . Permanent fix is more welcome
",gopinathshiva,
731,2015-08-28 20:40:56,"Fixes error (#728)
",michae1,2015-08-30 11:22:31
731,2015-08-30 11:23:56,"Merged. Thank you for contribution.
",3y3,2015-08-30 11:22:31
730,2015-08-28 16:22:52,"I'm running node-inspector (v0.12.2) with [Electron v0.31.1](https://github.com/atom/electron/tree/v0.31.1).

I run node-inspector, run electron with --debug-brk, then open the UI/web page specified by node-inspector and node-inspector crashes with the following output:

<S_CODE_TOKEN>

I've tried installing node-inspector both globally and within my project. The only warning I see when installing is the following:

<S_CODE_TOKEN>

Is this a bug, or something I'm doing wrong?

Edit:
Tried installing with `--target=1.6.3` and have the same results.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/26280195-node-inspector-dies-when-ui-opened-with-electron?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",apexskier,
730,2015-08-31 16:40:54,"This didn't actually fix the issue. I took a look at the code and found a few things that look suspicious. See pull request #735.
",apexskier,
730,2015-09-08 14:34:11,"v0.12.3 - the same error.

Can't debug my app. Please merge #735 if it helps

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",iofjuupasli,
730,2015-09-08 21:38:00,"Related issue in electron https://github.com/atom/electron/issues/2741
",3y3,
730,2015-10-16 17:06:52,"Hello I think this is still an issue. The node-inspector still crashes in version 0.12.3 with the fixes for #730, #724 on Windows 7. 

<S_CODE_TOKEN>

When electron is started with: electron --debug-brk=5858 .\electron-app\index.js    

electron --version -> v0.33.7
node-inspector --version -> Node Inspector v0.12.3
OS: Windows 7
",ed-appdev,
730,2016-01-06 08:09:36,"with some help I've improved the instructions on how to debug electron with node-inspector

https://github.com/atom/electron/pull/4004

this bug is a duplicate of #774 and #649
",lukeapage,
729,2015-08-28 12:44:53,"Fixes error (https://github.com/node-inspector/node-inspector/issues/728)

<S_CODE_TOKEN>
",michae1,2015-08-28 20:36:34
729,2015-08-28 18:33:00,"@michae1 , thank you for contribution.
There is one indentation case to fix. All other LGTM.
Please fix minor bugs and squash all changes to single commit.
",3y3,2015-08-28 20:36:34
729,2015-08-28 20:43:57,"I did new pull request https://github.com/node-inspector/node-inspector/pull/731
Sorry for that, I broke my repo while learning to squash
",michae1,2015-08-28 20:36:34
728,2015-08-27 15:30:09,"I recently upgraded from **0.10.2** to **0.12.2** and errors pop up. They seem to be related to network sockets.

For instance on my local machine (_Windows 7_, _node 0.12.7_), I get:

<S_CODE_TOKEN>

On my remote server (_CentOS_, _node 0.12.7_), I have a problem connecting to my Couchbase cluster. Looking at tcpdump, the handshake starts and stops after a couple of exchanges. With _0.10.2_, they continue.

In both environments, running the app with node instead of node-debug works fine.
",KoltesDigital,2015-08-30 11:22:31
727,2015-08-27 00:54:10,"Hi, I tried running this with io.js 2.3.4 and I have this error:

<S_CODE_TOKEN>

Mac OSX Yosemite, io.js v2.3.4
",bgdavidx,2015-12-06 20:57:13
727,2015-08-27 02:56:27,"I am seeing this on Linux without io.js at all.. node v0.12.7.
",akdor1154,2015-12-06 20:57:13
727,2015-08-27 03:14:15,"same here
",wood1986,2015-12-06 20:57:13
727,2015-08-27 04:01:28,"Same story. io 2.5.0, node 0.12.7
It is this [v8-profiler@5.2.10](https://github.com/node-inspector/v8-profiler/commit/4ef423df9fe92d745561ad60cd543f3ee473530c) is to blame? 
",nezed,2015-12-06 20:57:13
727,2015-08-27 04:03:08,"0.12.x, 0.11.x, 0.10.x have the same issue
",wood1986,2015-12-06 20:57:13
727,2015-08-27 06:02:02,"Windows 10, node 0.12.7, same issue
",nanwangjkl,2015-12-06 20:57:13
727,2015-08-27 11:26:47,"I release v8-profiler 5.2.11. Try to completely reinstall node-inspector
",3y3,2015-12-06 20:57:13
727,2015-08-27 17:45:50,"@3y3 :+1: 
",nezed,2015-12-06 20:57:13
727,2015-12-06 20:57:13,"Try to install 0.12.5. This version includes prebuilt binaries for all actual node versions from the box.
Feel free to reopen this issue if it still exist.
",3y3,2015-12-06 20:57:13
726,2015-08-25 12:02:07,"This happens sometimes when I set a breakpoint and run the script in order to reach the breakpoint. But it doesn't reach it but crashes instead.

<S_CODE_TOKEN>

Versions:
OS X 10.10.5

<S_CODE_TOKEN>
",bobef,2015-09-01 07:53:12
726,2015-08-30 14:41:50,"Looks like an uncompatibility with prototype.js
",3y3,2015-09-01 07:53:12
726,2015-08-31 06:11:37,"Possibly, but I don't think because of the line in the stack trace: https://github.com/Perennials/prototype-js/blob/master/Function.js#L214

It just replaces the `Function.bind()` with JS version.
",bobef,2015-09-01 07:53:12
726,2015-08-31 15:23:25,"I think it only happens in this case - node domains and then some error happens inside the on('error') handler for the domain, so it causes infinite ""on error"" loop and then this problem appears. It doesn't appear most of the time.

But it crashes so it is hard to tell.
",bobef,2015-09-01 07:53:12
726,2015-09-01 07:53:12,"I commented the custom `Function.bind()` and I don't get this error anymore.
",bobef,2015-09-01 07:53:12
725,2015-08-23 09:00:14,"Hi, I am trying to solve this error. I had problem installing node-inspector on Windows 10, but installing C++ things in Visual Studio installation and adding msvs_version 2015 in npm configuration allowed me to install it without error.
Now I am getting this when I run node-debug server.js for starting my application.
I am new to node-inspector, but I have already tried a lot of things.

<S_CODE_TOKEN>
",giacomorebonato,2015-08-23 15:09:31
725,2015-08-23 15:09:31,"The problem is caused by the function childProcess.execFileSync inside the module
node-inspector > yargs > os-locale > exec-file-sync > index.js
A workaround is to set a static locale in node-inspector > yargs > index.js

<S_CODE_TOKEN>

I really would like an explanation about this. 
",giacomorebonato,2015-08-23 15:09:31
724,2015-08-21 13:11:02,"Opened `node_inspector` in a separate console tab.

Occasionally saw this (not sure when exactly happened, guess after one of node restarts):

<S_CODE_TOKEN>
",iliakan,2015-08-30 14:41:07
723,2015-08-19 21:53:53,"My project runs code inside a VM in Node JS for security reasons. When I use node-inspector on the code inside the VM, node-inspector crashes in a variety of ways. I have created a simple program to show a typical crash using both the vm.runInContext() and the eval() statements.

I am using node v0.12.7 and node-inspector v0.12.2. To reproduce, run node-inspector, run the code below, then step through the code 5 times. On the 5th step, you get the error listed here. If you use the vmCode() function instead of the evalCode() function, it will show the same error.

**Node Inspector command and error dump**

> node-inspector
> Node Inspector v0.12.2
> Visit http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858 to start debugging.
> /usr/local/lib/node_modules/node-inspector/lib/BreakEventHandler.js:60
>       this._frontendClient.sendLogToConsole('error', err);
>                           ^
> TypeError: Cannot read property 'sendLogToConsole' of undefined
>     at /usr/local/lib/node_modules/node-inspector/lib/BreakEventHandler.js:60:27
>     at BreakEventHandler.<anonymous> (/usr/local/lib/node_modules/node-inspector/lib/BreakEventHandler.js:154:23)
>     at Object.<anonymous> (/usr/local/lib/node_modules/node-inspector/lib/CallFramesProvider.js:27:11)
>     at /usr/local/lib/node_modules/node-inspector/lib/DebuggerClient.js:136:7
>     at Object.create.processResponse.value (/usr/local/lib/node_modules/node-inspector/lib/callback.js:23:20)
>     at Debugger._processResponse (/usr/local/lib/node_modules/node-inspector/lib/debugger.js:95:21)
>     at Protocol.execute (_debugger.js:137:14)
>     at Socket.emit (events.js:107:17)
>     at readableAddChunk (_stream_readable.js:163:16)
>     at Socket.Readable.push (_stream_readable.js:126:10)<

**Sample code**
var script = 'function stop() {debugger;}\nstop();\nvar a = 0;\nvar b=a+1;\n';

function evalCode() {
    eval(script);
}

function vmCode() {
    var vm = require('vm'),
        sandbox = vm.createContext(),
        vmScript = new vm.Script(script);
    vmScript.runInContext(sandbox);
}

setTimeout(function() {
    evalCode();
    //vmCode();
}, 5000);
",phdunham,2015-08-26 22:00:13
723,2016-08-07 18:45:39,"getting this

<S_CODE_TOKEN>

real blocker for us .. any workarounds.
",navinSing,2015-08-26 22:00:13
723,2017-01-15 15:42:06,"For me, evalCode() is working fine, but vmCode() is totally ignored. Any updates?",smulikHakipod,2015-08-26 22:00:13
722,2015-08-17 13:28:48,"This is consistent issue and very annoying. The command is: node-debug myapp.js
I am using Mac OS X Mountain Lion (10.9.5)
Chrome Version 44.0.2403.155 (64-bit)
Test and works correctly on Windows 7.

Don't know who to report this to. Thanks!

![screen shot 2015-08-17 at 9 16 56 am](https://cloud.githubusercontent.com/assets/930478/9305724/a26d7b5a-44c1-11e5-924b-32a785ebb0cc.jpg)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/25859749-mac-os-x-chrome-loses-scrollbar-of-properties-and-also-truncates-source-code-view?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",wyattbiker,
722,2015-08-24 12:17:19,"Any ideas? Thanks!
",wyattbiker,
722,2015-08-24 20:06:37,"I think this is the same as issue #699 
",ghendricks,
722,2015-09-06 02:34:18,"Thanks. I will follow that thread.
",wyattbiker,
721,2015-08-14 22:26:20,"For Mac OS X. When I run node-debug, Chrome opens new window every time and the URL is not even loaded in this new window. I have to close it and manually paste the URL in the original Chrome window.

Is there a way to open a tab when the Chrome browser is already loaded? On Windows 7 works correctly.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/25781813-node-debug-opens-new-chrome-window-every-time-instead-of-tab-on-mac-os-x?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",wyattbiker,
721,2015-08-24 12:16:55,"Anyone with hints? Thanks!
",wyattbiker,
721,2015-09-03 13:50:48,"I have the same issue on Mac OS X too . just updated `node-inspector` to `v0.12.2` it was ok before.
I can open it in the main window on another tab, but when I close the window it opened, the connection closes.
",rucsi,
721,2015-09-05 00:07:01,"Same thing here. Also once I closed my original instance of Chrome and opened a new one, all of my Chrome extensions were gone.
",CalvinScott,
721,2015-09-06 20:53:16,"Since 0.9.0 we use https://github.com/benderjs/browser-launcher2 to start the browser, and make sure it's Chrome/Chromium/Opera (i.e. the browsers that can properly render node inspector; we detect installed browsers in the system and choose the most appropriate one; earlier we used `opener` module which just delegated opening the browser to the OS, which would open the defaul browser, which could have been e.g. Firefox) and this could be the reason why the behavior has changed.

`browser-launcher2` actually does a bit more than just launching a browser, for instance it creates a new profile for Chrome in a subfolder of `~/` - this is probably the issue that @CalvinScott reported (i.e. Chrome that was opened was the new profile created by browser-launcher, not your original profile; you should be able to open your original profile of Chrome normally)
",jakub-g,
721,2015-09-10 12:18:17,"same problem here, using `node-inspector v0.12.3`
",polyclick,
721,2015-09-15 07:31:37,"Same here node-inspector 0.12.3.
",bobef,
721,2015-09-15 16:05:17,"I think the problem lies within Chrome opening in a new profile.  Is there a way we could just get it to open with the default profile? 
",gpit2286,
721,2016-04-06 21:20:32,"+1
It always opens in a new instance (not even just a new window) of Chrome. I can tell because I suddenly have a new Chrome icon pop up in my dock (so I have two Chrome icons at the same time on my dock), and the instance opened by node-inspector doesn't contain any of my bookmarks or default Chrome settings.
If I quit out of that instance of Chrome, then the next time I run node-inspector, it'll open up a new instance again with the correct url in the bar, but if I don't quit out of that instance of chrome and run node-inspector, it'll open up a new window in that same instance, but without any url, so there doesn't seem to be a point to it opening up a new window for me.
So far my workaround has been to always use the --cli option every time and just paste the url into my original instance of Chrome. Then on subsequent runs, I still use the --cli option to prevent a new window popping up, and I just refresh the tab I had open already.
This should definitely be marked as a bug.
",LiuJoyceC,
720,2015-08-14 19:29:47,"Freshly installed node-inspector globally on a OSX device with node 0.12.7. How can I make debugging possible?

<S_CODE_TOKEN>

Update: On my Linux machine (and now using node-inspeactor@0.12.2) I get

<S_CODE_TOKEN>

instead
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/25776234-unexpected-token-illegal-some-utf-8-characters?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",simonh1000,
720,2015-08-19 22:14:00,"Same issue here as well, running `Node Inspector v0.12.2` on `OS X 10.10 (14A361c)`
",aweary,
720,2015-08-20 09:18:05,"Can you reproduce this on Node Inspector 0.12.0 or 0.12.1?
",3y3,
720,2015-08-20 11:49:20,"Yes, I do seem to be able to :-(
",simonh1000,
720,2015-08-30 14:42:41,"Which encoding you use in files?
",3y3,
720,2015-08-30 19:02:19,"I'm using Atom on Ubuntu - i.e. nothing special 
",simonh1000,
720,2015-09-25 02:19:25,"I would try it on a blank file and go from there. It sounds like its not a JS file. I accidently called my script with `node-debug node app.js` and got the same error (as it was now debugging node itself which is not a js file instead of app.js). The process uses `fork` which expects a js script.
",cyberwombat,
720,2015-09-28 10:12:39,"Thanks. Not sure what has happened, but I upgrade to node 4, reinstalled node-inspector and now everything looks as though it is working
",simonh1000,
720,2016-03-04 15:16:28,"I had this issue with node 5.4.1, I switch with **n** to 4.3.2 and there it works now.
",timaschew,
720,2016-04-23 23:17:47,"Its an issue with file encoding which holds your code
I am using sublime text and I have changed the file encoding to UTF-8 and now the code is working fine.
",Vikasg7,
720,2016-07-16 21:17:26,"I downgrade but still have the problem
",dimirc,
720,2016-09-03 03:37:15,"You are trying to debug `test` binary. I guess you should run something like `node-debug test.js`
",cagdastulek,
719,2015-08-13 21:08:01,"Running Windows 8.1 Pro

<S_CODE_TOKEN>

When I access the debugger in browser, it fails to load and in console I see:

`...Your Node version (v0.10.36) has a partial support of profiler...`
and
`Error: Cannot find module 'C:\Users\myusername\AppData\Roaming\nvm\v0.12.0\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.4.6\node-v11-win32-ia32\debug.node'`

`\build\debug\v0.4.6` doesn't exist, but `\build\debug\v0.5.2` does and it contains `node-v14-win32-ia32`.

During `npm install -g node-inspector` I see: `[v8-debug] Success: ""C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.5.2\node-v14-win32-ia32\debug.node"" is installed via remote`

I don't see anything in my environment variables that would confuse things and so far I can't figure out why the reference to 0.4.6 is happening (still researching v8-debug and it's use in node-inspector though).

Issue appears similar to https://github.com/node-inspector/node-inspector/issues/678
",rainabba,2015-08-17 00:44:48
719,2015-08-13 22:15:16,"After lots of experimenting, I now have: `Error: A dynamic link library (DLL) initialization routine failed.
C:\Users\michael.COMPTEKNET\AppData\Roaming\nvm\v0.12.0\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.5.2\node-v14-win32-ia32\debug.node` and I do have the `v0.5.2\node-v14-win32-ia32` folder, but I'm running x64 node so I think that makes sense. Am I forced to run 32bit node or do I need to do something to get node-inspector working with x64 node?

I may be entirely off there too because after using nvm to switch to a 32bit release then `npm uninstall -g node-inspector; npm cache clean; npm i -g node-inspector; node-inspector`, I get the same linker error.
",rainabba,2015-08-17 00:44:48
719,2015-08-13 23:12:47,"So, after `npm uninstall -g node-inspector; npm cache clean; npm i -g node-inspector; node-inspector`

node-inspector was installed for `win32-ia32`? 

Can you also describe how you fix your initial error ?

> ...Your Node version (v0.10.36) has a partial support of profiler...
",3y3,2015-08-17 00:44:48
719,2015-08-14 02:32:55,"@3y3 I have `nvm\v0.12.0\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.5.2\node-v14-win32-ia32\debug.node` and this is provided during the `npm install -g node-inspector` execution. If I `npm uninstall -g node-inspector`, this folder is removed.

Not sure how I got the 0.4.6 reference to change to 0.5.2 for sure, but it seemed to resolve after I created a an 0.4.6 folder manually then used a junction to link the expected filename in that to the existing one in 0.5.2. With the linker error, I quickly deleted that junction and folder (figuring the version difference was the reason for the linker error), but the linker error persists and I'm willing to bet the underlying reason is the same one (what ever that is).
",rainabba,2015-08-17 00:44:48
719,2015-08-15 15:10:02,"Something just occurred to me and I decided to try in another Chrome profile and in that one, node-inspector loads (though doesn't appear to be attaching). I actually have a handful of profiles so I tried a 3rd and it also had the same issue as the 1st then I tried an incognito session and it didn't have the issue. If each profile was running either as system admin or not, might that explain this behavior somehow?
",rainabba,2015-08-17 00:44:48
719,2015-08-15 15:17:56,"In trying to get the debugger to attach, I restarted node-inspector with --no-preload, refreshed the browser and now I'm looking at the same error condition. I've also restarted node-inspector without --no-preload and the condition remains.

<S_CODE_TOKEN>

I can't imagine how that last error is related, but I don't see how it would end up there otherwise so I'm including it now (it was in the other instances as well).
",rainabba,2015-08-17 00:44:48
719,2015-08-15 15:22:12,"Also, restarting the incognito session (which by design should remember and retain nothing), the condition persists so it seems that this isn't specific to browser sessions entirely (though maybe a variable in the session has an effect on node-inspector and the issue persists).
",rainabba,2015-08-17 00:44:48
719,2015-08-15 16:00:03,"I just manually did some cleanup of nvm and updated my system to node 0.12.7 and so far it appears that I've got node-inspector working again.

Before, I it was telling me to use: `http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858`

Not it's telling me to use: `http://127.0.0.1:8080/debug?port=5858`

What does that indicate?
",rainabba,2015-08-17 00:44:48
719,2015-08-16 20:02:31,"After encountering a similar issue on my laptop, something got me thinking about the npm version which eventually led to me realizing that ""npm install -g"" uses a different location for each user (including Admin) on Windows and those are independent STILL from the actual NPM install location (which is likely made even more complicated by NVM). By doing `cd C:\Program Files (x86)\nodejs>` then installing `npm install node-inspector -g` there AND uninstalling from the user locations (working from my project directory and doing `npm uninstall -g`, I have things working again, though still the prompt that includes `?ws=127.0.0.1`.

So, I'm up and running again, but it seems with slighting different environments in each case and without a completely clear picture as to why the trouble came about, but it seems to be a version conflict from having different ""global"" node_modules folders.
",rainabba,2015-08-17 00:44:48
719,2015-08-17 00:44:48,"Figured out why I was seeing 2 different debugger URLs and this raised another question that's already been asked in another issue (and not answered).

One case is node-inspector 0.7.4 (which can do break-on-uncaught-exceptions-only) and the other is 0.12.2, which cannot; at least not with the same UI approach and I don't see how otherwise.

I think that pretty well explains everything going on with my ""issue"" and I hope all this helps someone else in the future.
",rainabba,2015-08-17 00:44:48
718,2015-08-08 04:18:46,"Found while playing around and thought it might be interesting for node-inspector as well: https://github.com/buggerjs/bugger-v8-client/pull/6
",jkrems,2015-09-28 23:17:20
718,2015-08-08 10:54:21,"@jkrems , thank you for idea. We use the same strategy now, but we are searching a native `require` function in `process.emit` func [link](https://github.com/node-inspector/node-inspector/blob/master/lib/InjectorClient.js#L5-L8)

This strategy has some side effects - we need to pause debugger and filter this break event on NI stage. It is more complicated than your solution - we need to `step out` for find a `require` in previous frame.

So it may be reasonable to update this part with your solution. Can you provide information about compatibility between node versions? 
",3y3,2015-09-28 23:17:20
718,2015-08-08 16:31:51,"Yep, another advantage of `NativeModule` is that it doesn't pollute the dependency graph (parent/child) of the module you extract `require` from.

So far it's just a ""random late-night idea"". Didn't fully test it on even one node version. Just wanted to note it down in case I don't get around to it.
",jkrems,2015-09-28 23:17:20
718,2015-08-08 18:13:15,"After being fully awake and looking up some older code of mine: It looks like it would already be a big improvement for node-inspector to use `process.mainModule.require` when it exists. `process.mainModule` works for all node versions at least back to 0.8 and is available unless the node instance is evaluating (repl, `-e`, `-p`) instead of having an actual entry script.
",jkrems,2015-09-28 23:17:20
718,2015-08-08 21:22:44,"The [latest code](https://github.com/buggerjs/bugger-v8-client/pull/6/files#diff-3241451967337fddfdf647cd1f81dd91R1) was tested with all combinations of:
- node 0.8, 0.10, 0.12; iojs 1.x, 2.x, 3.x
- `node --eval` and `node some-script.js`
- Target VM is running at the time of being called, target VM is paused at the time of being called

There's a small gotcha for the last part: When combined with `node --eval`, the solution still has to `suspend` briefly so that the mirror cache is preserved. With an entry script that should never happen.

P.S.: I tested 0.8 manually, bugger-v8-client doesn't run it on CI.
",jkrems,2015-09-28 23:17:20
718,2015-08-08 21:57:37,"@jkrems , thank you again for code snippet. I'll use this experience some later - at current time there is some critical features which I need to implement (es6 structures debugging). I keep this issue opened to don't loose this idea.

Now when you implemented this entry point, you may be interested in NI's magic - [v8-debug](https://github.com/node-inspector/v8-debug)
",3y3,2015-09-28 23:17:20
717,2015-08-05 19:10:52,"Inspector: v0.12.1,
Node: v0.10.38,
OS: Debian GNU/Linux 7.8 (wheezy)

Looks like there is a call to ""stack"" property as if it's a function. File VM234. Not sure why the original error is occurring, but the following doesn't give me a usable stack trace.

<S_CODE_TOKEN>

  }
",scarabdesign,2015-08-06 17:07:16
717,2015-08-05 19:20:11,"Omg... I hoped to never enter in this block =(

Can you change this line to correct `new Error().stack`, and provide me final error?
",3y3,2015-08-06 17:07:16
717,2015-08-05 19:39:34,"Ok, corrected in node-inspector/lib/Injections/NetworkAgent.js 
It happens if I have a break point set while running my code. It pauses on the break just fine, but when I resume it dumps this error in the console:

<S_CODE_TOKEN>
",scarabdesign,2015-08-06 17:07:16
717,2015-08-05 20:43:43,"Also, it may be important to note also that the issue only seems to happen on one of my services, the one that has debugger attached on a master process on 5858 and one worker at 5859. Other services that have one attached debugger do not error. I'm only monitoring 5859 when the error happens; 5858 is not open anywhere.
",scarabdesign,2015-08-06 17:07:16
717,2015-08-05 22:36:21,"Please try node-inspector 0.12.2
",3y3,2015-08-06 17:07:16
717,2015-08-06 16:56:53,"Seems to fix it. Thanks!
",scarabdesign,2015-08-06 17:07:16
716,2015-08-05 03:19:44,"Just like the title says
",steelbrain,2015-09-06 02:07:47
716,2015-08-05 08:54:48,"I can confirm this. Here is the console output:

<S_CODE_TOKEN>
",4kochi,2015-09-06 02:07:47
716,2015-08-06 08:21:38,"+1 same issue
",irudoy,2015-09-06 02:07:47
716,2015-08-06 11:15:03,"+1
",listepo,2015-09-06 02:07:47
716,2015-08-07 02:54:34,"+1 same issue 
",youth7,2015-09-06 02:07:47
716,2015-08-07 05:29:12,"+1
",sjmueller,2015-09-06 02:07:47
716,2015-08-07 12:23:37,"Work in progress.
",3y3,2015-09-06 02:07:47
716,2015-08-16 12:13:20,"+1
",tsm91,2015-09-06 02:07:47
716,2015-08-20 21:34:41,"the problem persists with iojs 3.1.0

<S_CODE_TOKEN>
",capricube,2015-09-06 02:07:47
716,2015-08-21 03:02:14,"+1
",KuroGuo,2015-09-06 02:07:47
716,2015-08-22 10:11:36,"+1
",vvakame,2015-09-06 02:07:47
716,2015-08-22 19:21:24,"+1
",jbastias,2015-09-06 02:07:47
716,2015-08-25 16:31:45,"+1
",Volox,2015-09-06 02:07:47
716,2015-08-25 17:26:10,":+1:
",tcrayford,2015-09-06 02:07:47
716,2015-08-25 17:35:25,"+1
",madhums,2015-09-06 02:07:47
716,2015-08-27 03:15:28,"+1
",wood1986,2015-09-06 02:07:47
716,2015-08-27 11:28:50,"I updated v8-profiler and v8-debug. Please try to completely reinstall node-inspector. It should to work now
",3y3,2015-09-06 02:07:47
716,2015-08-27 11:54:07,"I get Segmentation fault error when I start node-inspector

<S_CODE_TOKEN>

Not sure if this is related to the same issue. 

Using iojs 3.2.0
",madhums,2015-09-06 02:07:47
716,2015-08-28 06:41:53,"+1
",yisiqi,2015-09-06 02:07:47
716,2015-09-05 19:35:39,"This should be fixed in Node Inspector 0.12.3
",3y3,2015-09-06 02:07:47
715,2015-08-04 23:48:27,,3y3,2015-08-30 11:20:20
714,2015-08-04 21:54:08,"There is a bug in Chrome 44 that makes Node Inspector front-end unusable. This fix, suggested in #699 appears to fix the issue.
",akras14,2015-08-04 23:36:46
713,2015-08-03 10:54:28,"Node inspector loads main file `app.js`. It works properly, but no other sources are listed in source tab. Running inspector inside docker shared directory.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/25309906-doesn-t-load-sources-except-of-main?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",rumkin,
713,2015-08-03 11:08:51,"**UPD** Strange behaviour appears when I'm spawning `node-inspector` with `hidden` argument:

<S_CODE_TOKEN>
",rumkin,
712,2015-08-01 20:41:50,,3y3,2015-08-01 20:47:44
711,2015-07-31 18:56:52,"[Traceback](https://gist.github.com/dbkaplun/626615ccde97345a5e67)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/25226537-npm-install-g-node-inspector-fails-on-arm-but-npm-install-within-a-cloned-node-inspector-works-fine?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",dbkaplun,
711,2015-09-05 15:20:24,"Just installed on an ARMv7 device (bbb w/ Debian) no problem. 
",BrianAdams,
710,2015-07-30 09:40:58,"It would be great if `node-inspector` can be configured to connect to a `Node` server that is running in a remote system.  That is, the developer need not run node-inspector on the same system as the Node server that is to be debugged.  Below diagram illustrates the purpose - 
![node-inspector_accessing_remote_node_server](https://cloud.githubusercontent.com/assets/8929835/8980081/c5007c2a-36cb-11e5-8c46-a7d8b5c18e93.png)

Questions:
- Are there any technical constraints that will not allow for having such a setup with an enhancement in node-inspector?
- Can `node-inspector` take the IP of node server as a parameter and use it in `lib/debugger.js` while initiating a TCP connection:

<S_CODE_TOKEN>
",ncv-dev,2015-08-01 03:27:04
710,2015-07-30 11:10:17,"I think sometimes about this feature, but this is hard to make it:
1. We collect sources tree using fs. And it isn't good idea to evaluate this code on app side.
2. We inject some features in app using `require`. We can't be sure that on app side was installed expected module.

So, at current time `ScriptManager.js`, `ScriptFileStorage.js` and `InjectorClient.js` are main blockers for this feature - it would be costly to recompose current logic and to maintain new logic.
For example - how to inject console API with new architecture:
1. Create new folder on app side
2. Download from Amazon S3 compiled binaries for `v8-debug` and `v8-profiler` for os used on app side
3. Upload `v8-debug` and `v8-profiler` binaries to app side
4. Some way delete this binaries after unexpected app crashing
",3y3,2015-08-01 03:27:04
710,2015-07-30 12:03:13,"Thanks for the response.
It indeed looks like a non-trivial task with impact on node-inspector Architecture :worried:
",ncv-dev,2015-08-01 03:27:04
709,2015-07-29 04:28:21,,baldwicc,2015-07-29 07:22:51
709,2015-07-29 07:22:50,"Thank you!

Landed as ad8f9ad4121e826c3687373dde1e7c3935c88efd
",3y3,2015-07-29 07:22:51
708,2015-07-29 04:24:13,"I'm having problems with the latest 0.12.0 release - it looks like `/tools` is excluded from by `.npmignore`

<S_CODE_TOKEN>

Here's what happens when trying to run `node-inspector`:

<S_CODE_TOKEN>

Missing `tools/` where NPM installed to:

<S_CODE_TOKEN>
",baldwicc,2015-07-29 07:28:31
708,2015-07-29 05:33:46,"I can confirm that this pull request in a fork fixes this issue for me:

https://github.com/baldwicc/node-inspector/pull/1

without this I was unable to run node-inspector after freshly installing from npm on windows 8.1 node version 0.12.7 node-inspector 0.12.0
",ashelley,2015-07-29 07:28:31
708,2015-07-29 07:28:31,"FIxed in 0.12.1
",3y3,2015-07-29 07:28:31
707,2015-07-28 19:21:43,,3y3,2015-07-28 21:05:48
706,2015-07-28 17:28:45,"I have the same issue #699 with 0.11.2 as well as 0.11.1. Also at some point\* of loading (node --debug-brk myapp.js) the garbage collector is busy for 90 seconds hitting ~97% cpu, which for that time it's not useable and I must wait. I downgraded to 0.11.0 and encountered no issues on Win7 with node 0.12.7. 
*At this point 20 node_modules related to a webserver (expressjs, socketio, morgan, multer, etc.) have to get loaded.

Also the starting-point (node --debug-brk myapp.js) is not the beginning of myapp.js, instaed it's line 460 of some file named module.js which path I can't determine.
",chk-,2015-07-29 19:15:39
706,2015-07-28 19:13:57,"> Also the starting-point (node --debug-brk myapp.js) is not the beginning of myapp.js, instaed it's line 460 of some file named module.js which path I can't determine.

Will be fixed in next release.

> the garbage collector is busy for 90 seconds hitting ~97% cpu

Which `gc` you mean?
1. app
2. node-inspector
3. frontend
",3y3,2015-07-29 19:15:39
706,2015-07-28 19:19:55,"How about `node-debug --no-preload myapp.js`?
",3y3,2015-07-29 19:15:39
706,2015-07-28 19:23:07,"gc of node-inspector profiled by google chrome.

I will feedback about using --no-preload.
",chk-,2015-07-29 19:15:39
706,2015-07-28 20:25:28,"Please try also `node-debug --hidden node_modules myapp.js`
",3y3,2015-07-29 19:15:39
706,2015-07-29 09:27:44,"`node-debug --no-preload myapp.js` has the same bad behavior, but with
`node-debug --hidden node_modules myapp.js` the app starts fast, like
`node-debug myapp.js` @v0.11.0 does.
",chk-,2015-07-29 19:15:39
706,2015-07-29 19:15:39,"0.11.0 does'n work correctly.
This is a fix that changes behavior to slow (but correct) work - 85ac310a1b7316eb3e42e395d39c2603614453ee

So, `hidden` is correct solution for your situation.
",3y3,2015-07-29 19:15:39
706,2015-07-29 19:26:28,"But `hidden` is not practicable since it doesn't show me the node_modules in the Sources treeview, in which I'm also interested in.
I understand your point of view. From mine there's v0.11.0 I can work with, the later ones not.
",chk-,2015-07-29 19:15:39
705,2015-07-28 00:44:12,"This enables interop with third-party debugging clients like
- chrome-repl from the chrome-remote-interface NodeJS module
- Kite and JsSlime for Emacs
- and more

In future this could be used to have multiple NodeJS processes
register with a single node-inspector process, which can then
advertise all these debuggable processes as ""tabs"" in the array.

This change improves on pull request #689, adding a /json/list
endpoint which should return the same data as the /json endpoint.
",ackalker,2015-07-28 21:40:13
705,2015-07-28 01:05:20,"Here is an example using Kite for Emacs:
- In Emacs:
  - install the `kite` package from MELPA.
  - Evaluate `(require 'kite) (setq websocket-callback-debug-on-error nil)` to prevent Emacs from entering the debugger when Kite tries to execute some methods which have been removed from the debug protocol.
  - Create a file `test.js` with contents:

<S_CODE_TOKEN>

In a terminal:
- In the directory containing `test.js`, run:

<S_CODE_TOKEN>

In Emacs, start a Kite debug session:
- Enter `C-u C-u M-x kite-console`
- Accept `127.0.0.1` as Host, enter `8080` as Port, choose `node` as Tab

This should eventually (currently with still quite a few websocket errors) connect to node-inspector.
From here on, some of Kite's many features (including stack and object inspection) can be used.

Screenshot:
![2015-07-28-025958_480x270_scrot-thumb](https://cloud.githubusercontent.com/assets/429567/8921377/f5059f3e-34d4-11e5-8889-f2b8f9c199c9.png)
",ackalker,2015-07-28 21:40:13
705,2015-07-28 01:19:12,"![2015-07-28-031834_480x270_scrot-thumb](https://cloud.githubusercontent.com/assets/429567/8921549/62077d58-34d7-11e5-920b-583525dbad54.png)
",ackalker,2015-07-28 21:40:13
705,2015-07-28 07:41:25,"@ackalker , thank you for contribution.
PR is ready to merge, but I need @auchenberg feedback.

@auchenberg , is this change sensible for you?
",3y3,2015-07-28 21:40:13
705,2015-07-28 11:18:51,"Good catch, this should indeed be a list.

:+1: 
",auchenberg,2015-07-28 21:40:13
705,2015-07-28 21:40:10,"Landed as 4399f1e4623114fbe8111e618cb217ae24fc32e2

Thank you for contribution!
",3y3,2015-07-28 21:40:13
705,2015-07-28 23:49:57,"You're welcome :)
",ackalker,2015-07-28 21:40:13
704,2015-07-27 10:32:06,"Hello I have:
node 0.12.7 
node-inspector 0.11.2
npm 2.11.3

i try to debug the boiler plate of electron
I launch $node-inspector, and go on the page localhost:8080?ws=localhost:8080?port=5858
Then i get this error message (before to start electron):
Error: Cannot find module 'c:\Users\adrien\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.5.0\node-v44-win32-x64\debug.node'

thanks for your help
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/25014149-cannot-find-v8-debug-node-v44-win32-x64-debug-node?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",adrien59cadri,
704,2015-07-27 17:50:28,"Please read #649 

You can try `npm i node-inspector --target=1.6.3`
Where `1.6.3` is current version of io.js which used in electron.
But I think this will not be helpful, because there exists unresolved bug in electron or in node.

Anyway keep in mind what each time when you change node major version you need to reinstall node-inspector, because there are some native dependencies (`v8-debug`, `v8-profiler`) which needs to be rebuilded.
There is a partially hack to avoid this situation - before each reinstallation, you can save `build` dir of `v8-debud` in other place and paste it after reinstallation. This way you'll collect in build folder sources for all expected versions. So, if you'll change node version like `0.10.* -> 0.12.* -> 0.10.*` you need to reinstall node-inspector only once.
",3y3,
704,2015-08-02 04:47:49,"npm i node-inspector --target=1.6.3  
command  installs v43 instead of v44.
",wyattbiker,
703,2015-07-26 20:20:39,"Not sure if this is a feature of node-inspector or a bug, but it appears to interfere with outgoing http requests, noticed when using the aws-sdk.
If I create the file app.js:

<S_CODE_TOKEN>

I make sure my AWS credentials are correctly set for my environment.
When I run `node --debug app.js`, there is no error and `data` contains an AWS response object with an array of my VPCs in us-east-1, like below:

<S_CODE_TOKEN>

But if I run `node-debug app.js` and allow the app to run using node-inspector, I don't get an error, but I don't get my array of VPCs. `data` looks like an AWS response object, but the VPC array just comes back empty:

<S_CODE_TOKEN>

I've looked at the ec2 object that I create at the start and it appears ok. If you need any more info about this then please get in touch and I'll be happy to help as much as I can.
",antonosmond,2015-12-06 20:58:40
703,2015-07-26 22:41:27,"Thanks for this issue @antonosmond , how you can see `node-inspector` 0.11.0 was released with new feature - **Network debugging**.
So, we wrap a part of code in app to grab information about http requests. This is possible that this new feature is not so stable as expected.
Can you please install `node-inspector@0.10.*` to confirm that problem is in Network wrapping. This is first important step.
The second step - can you please inspect what's wrong with wrapping:
1. You can look on headers and data which sended to AWS server (fiddler or wireshark will be helpful)
2. You also can look that node-inspector says about sended data
",3y3,2015-12-06 20:58:40
703,2015-07-26 22:54:07,"@3y3 I installed node-inspector@0.10.2 and it works correctly so I can confirm the issue is only in v0.11.*.
I'll try and find time to inspect the requests in the next day or two and let you know if I find anything. Thanks!
",antonosmond,2015-12-06 20:58:40
703,2015-07-31 14:22:44,"Going back to node-inspector@0.10.2 also worked for me - dynamodb was failing with CRC errors.

When I turned off CRC checking I had the exact same empty array in my dynamo calls
",dayglo,2015-12-06 20:58:40
703,2015-08-01 13:21:53,"Can you provide some small example where I can reproduce this problem?
To avoid this problem you can also update NI to 0.12.\* and start it with `--no-inject.network` flag.
This prevents NI from wrapping app `requests`.

Please he;p me to understand what is wrong with current `request` wrapper, where we miss the data.
",3y3,2015-12-06 20:58:40
703,2015-08-21 01:03:32,"@3y3 starting with --no-inject.network flag doesn't work for me.

Dropping back to node-inspector@0.10.2 does.
",markacola,2015-12-06 20:58:40
703,2015-09-06 13:18:01,"I'm getting this same problem with dynamodb and the CRC checking failures mentioned by @dayglo 
",zephor,2015-12-06 20:58:40
703,2015-09-26 19:33:47,"I've tested aws-sdk with node-inspector 0.12.3 and it does not act.
For example, when I try s3.listObjects, the data goes to wrong by node --debug app.js while node app.js acts correctly. 
If I check it with 0.10.2 version, it's good for aws-sdk, but it's uncomfortable in other sides.
So I hope to know if you didn't consider aws-sdk debug in this newest version(0.12.3) or else if I can get any patch from you, node-inspector creators.
",bestscholar85,2015-12-06 20:58:40
703,2015-10-09 21:02:20,"+1

I just ran into this issue as well.
",adambiggs,2015-12-06 20:58:40
703,2015-10-10 01:13:21,"@AdityaManohar  I have not been able to investigate enough to give details to the aws team, but I believe this is an aws-sdk-js issue. I have not forked to run all tests with an aws-sdk change which works for me.

The nodejs.org stream document for [readable.read([size])](https://nodejs.org/api/stream.html#stream_readable_read_size) states: 'This method should _only_ be called in paused mode', yet code inspection of [aws-sdk lib/event_listeners.js line 192](https://github.com/aws/aws-sdk-js/blob/master/lib/event_listeners.js#L192) shows this `read()` call. When placing a `isPaused()` check at line 190, my logs show the stream is _never_ in paused mode. So, I interpret this to mean that a ['data' event handler](https://nodejs.org/api/stream.html#stream_event_data) should be used instead of read().

This is my local code change which I have not fully tested for all cases. Though have been using successfully to solve this debugging with node-inspector issue, and still fine when not debugging. I have made this change to my local `node_modules/aws-sdk/lib/event_listeners.js` by adding `httpResp.isPaused()` at line 190 on debian and OSX.

<S_CODE_TOKEN>
",glennschler,2015-12-06 20:58:40
703,2015-10-14 21:34:44,"+1 same for me
",simonkontschak,2015-12-06 20:58:40
703,2015-10-16 09:33:26,"Upgrading to 0.12.3 seems to do the trick for me (I had empty responses from Dynamo).
",antoinegoutagny,2015-12-06 20:58:40
703,2015-11-03 16:30:12,"I'm running 0.12.3 and still having issues.
",adambiggs,2015-12-06 20:58:40
703,2015-11-15 12:36:06,"+1 
Im using s3 and facing those issues too.
",Yontih,2015-12-06 20:58:40
703,2015-11-20 00:04:36,"+1 caused much grief on a current build. Was thinking it was intermittent, found out it was NI.
",gregorskii,2015-12-06 20:58:40
703,2015-12-06 20:58:40,"Should be fixed in 0.12.5
Feel free to reopen this issue if it still exist.
",3y3,2015-12-06 20:58:40
702,2015-07-26 00:21:56,"I am using coffeescript for the script and compiling it with the source map and running the node -debug script.js..it correctly picks up script.coffee during debugging..

if I change the script.coffee in chrome debugger..it doesn't change the source(in the local file system) or can it apply code change ie., the changes done recently on the chrome debugger is executed at that instant(what ever was changed).

I see that when ever script.js is changed it changes the source....why cannot it be done for coffeescript as well..?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24955984-updating-the-coffeescript-source-in-chrome-debugger-doesn-t-update-the-source?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",skandasoft,
702,2017-01-19 02:02:45,"Just curious, in Node Inspector, are you changing your coffeescript, or are you changing the compiled cofeescript? ",cjrutherford,
701,2015-07-25 18:05:05,"I am trying to use node-inspector/chrome-dev-tools as an editor (with an awesome debugger).
And it kind of works. My setup is:
1. node-inspector --save-live-edit --preload=false
2. nodemon --debug app.js
3. one window for navigating the app and one for http://127.0.0.1:8080/debug?port=5858

The first annoyance that I find is that when I make a change which triggers
nodemon to restart which in turn triggers node-inspector to refresh/reattach
the http://127.0.0.1:8080/debug?port=5858 page
which takes a while (3-4 seconds) in which I can't see the script (and I don't like this).

The other is that when a syntax error happens nodemon crashes (awaiting for script changes) and node-inspector doesn't reload the debug page (http://127.0.0.1:8080/debug?port=5858) meaning the changes that would fix the syntax error can only be made via an external editor.

Is there a way around those two things?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24944794-node-inspector-reattach-refresh-on-source-change?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",tipdbmp,
701,2015-11-30 21:19:58,"+1

Any updates?
",blake-regalia,
700,2015-07-23 18:44:45,"Since the update to chrome 44 I get the following error whenever running code with a http.request() call. 

<S_CODE_TOKEN>

I suspect it has something to do with the WRAPPED_BY_NODE_INSPECTOR in chrome 44 since when I run my app without the debugger (I.e. node app.js), there is no error. I have confirmed this issue in multiple projects which were all working with node-inspector last week before chrome updated.

node version: v0.10.39
node-inspector: v0.11.1
Mac OS: 10.10.4
Chrome: 44.0.2403.89 (64-bit)
",ghendricks,2015-07-27 21:19:35
700,2015-07-23 20:17:31,"Fixed in 0.11.2
Please confirm this and close the issue if all works fine here.
",3y3,2015-07-27 21:19:35
700,2015-07-27 21:19:35,"This appears to be working again in 0.11.2 thanks.
",ghendricks,2015-07-27 21:19:35
699,2015-07-22 19:08:28,"I just restarted my machine because of an update and suddenly the debugger window will not display the debug tools (pause, step over etc.) and the top of my source file is not visible even when scrolled to the top. Please see attachment. My guess is that the update to chrome 44 caused this.

node version: 0.10.39
node-inspector version: 0.11.1
Mac OS: 10.10.4 (Yosemite)
Chrome version: 44.0.2403.89 (64-bit)

![node_inspector](https://cloud.githubusercontent.com/assets/3866666/8834580/3cf1e436-3072-11e5-8b57-57ad08b36006.png)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24787092-debugger-window-cuts-off-top-debugger-toolbar-and-first-few-lines-not-visible?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",ghendricks,
699,2015-07-22 21:46:39,"I was able to fix this issue by clearing the local storage. 
",ghendricks,
699,2015-07-23 19:02:00,"I think I see what is going on. When the info in the right pane (Call stack, Breakpoints, etc) is expanded and there is a lot of stack frames for example or breakpoints, it is pushing the hight of the overall frame above the viewport. There are no scrollbars so the only way to see tools is to collapse the pane with the long data. This is why clearing by localstorage helped, as in that particular case it cleared by breakpoints which were numerous.
",ghendricks,
699,2015-07-24 19:02:23,"Tnx man, it Worked.
",roysG,
699,2015-07-27 13:19:08,"I'm having a similar problem. I never had this problem before. I assume there is something wrong with scrolling and scrollbars.
",bigeasy,
699,2015-07-27 19:10:01,"I encountered a similar issue as well. In my case, I have a lot of files in the project that I run the debugger on, so the left pane ends up with a lot of nodes at various levels. When this happens, the only way to access nodes beyond the extent of the page is to arrow down the list with the keyboard, but then this shifts everything else, as well. This issue did just appear, so I do imagine it has to do with some change in Chrome 44. 

I downgraded to node-inspector 0.9.2, and this lays out correctly.
",mnaughto,
699,2015-07-28 17:17:04,"I have the same issue with 0.11.2 as well as 0.11.1. 
Also at some point\* of loading (node --debug-brk myapp.js) the garbage collector is busy for 90 seconds hitting ~97% cpu, which for that time it's not useable and I must wait. I downgraded to 0.11.0 and encountered no issues on Win7 with node 0.12.7. 
*At this point 20 node_modules related to a webserver (expressjs, socketio, morgan, multer, etc.) have to get loaded.
Also the starting-point (node --debug-brk myapp.js) is not the beginning of myapp.js, instaed it's line 460 of some file named module.js which path I can't determine.
",chk-,
699,2015-07-29 11:01:26,"Same problem here with scrolling (and also the starting point that @chk- mentioned).
",asgerhallas,
699,2015-07-30 20:22:59,"This is caused by a breaking change in Chrome 44 and flex display.  We found this at our company since it affected our app as well.  The relevant Chrome issue is filed here: https://code.google.com/p/chromium/issues/detail?id=502422  but they seem reluctant to fix it as apparently it matches FF behaviour.

The fix for us was to alter the CSS and add `min-width: 0` and `min-height: 0` to every container element that had `display: flex`.  I tried this on the HTML of the debugger window and it fixed the problem.
",juuxstar,
699,2015-07-31 16:06:01,"So should node inspector add the CSS fix as a preventive measure? It sounds like Chrome will fix it in M45, but in the meanwhile it's almost impossible to use node inspector.
",CodeFred,
699,2015-08-01 00:23:42,"@juuxstar thanks! Applying those styles to the main div (first and only child of body) really helped, not sure if the layout issues are completely gone, but at least node-inspector isn't impossible to use now.
",tlancina,
699,2015-08-04 21:55:25,"+1 Thanks @juuxstar @tlancina The fix works, I've made a pull request with it.

Until the pull request is merged and version is bumped you can install it via
 `npm install -g https://github.com/akras14/node-inspector.git`
if you don't want to change the css itself :)
",akras14,
698,2015-07-21 14:53:40,"It seems that node-inspector is incompatible with supertest:

http://stackoverflow.com/questions/31305926/debug-mocha-tests-for-angular-fullstack-generated-project

`this.socket` is set to null here: https://github.com/node-inspector/node-inspector/blob/8a8bf6e07c641ce64d066f010a3e8f1d23134bbf/lib/Injections/NetworkAgent.js#L382
",Vanuan,2015-07-22 22:29:55
697,2015-07-21 12:54:49,"### Issue

Terminal 1: 

<S_CODE_TOKEN>

Terminal 2

<S_CODE_TOKEN>

Browser:

<S_CODE_TOKEN>

And the browser does nothing. Blank. 

If you are <b>lucky</b>, you'll notice that that node-inspector logs the following message to the console while the browser interface fails to load:

<h3>""Cannot send response - there is no front-end connection.""</h3>


You'll search that message on Google, find this issue ticket, and apply the fix you see below.

If you are <b>unlucky</b>, you'll find yourself staring at an empty browser window, waiting for something to happen and observing that nothing does. You'll use nvm to change node versions and upgrade/downgrade chrome or chromium trying to figure out why node-inspector broke. 
### node-inspector versions
- 0.10.0 - 0.11.1 
### OS
- Ubuntu 14.04
### Browsers
- Chrome Version 43.0.2357.134
- Chrome 34.0.1847.137-1
### See also

http://stackoverflow.com/questions/29929811/node-inspector-doesnt-start
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24706931-linux-ubuntu-14-04-hangs-browser-blank-cannot-send-response-there-is-no-front-end-connection?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",tecfu,2016-06-01 03:48:46
697,2015-07-21 12:55:39,"### Temporary Workaround(s)

#### 1. Use node-inspector v0.9.2 or lower.

<S_CODE_TOKEN>

#### 2. Use Chrome 42.0.2311.152-1 with v0.9.2 or higher

<b>Note:</b> Other versions of Chrome didn't work for me, i.e. 43.0.2357.81-1

Repo for previous versions of Chrome:
http://mirror.pcbeta.com/google/chrome/deb/pool/main/g/google-chrome-stable/

Download Link for  42.0.2311.152-1:
http://mirror.pcbeta.com/google/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_42.0.2311.152-1_amd64.deb
",tecfu,2016-06-01 03:48:46
697,2015-10-22 07:57:00,"Another way to fix this is to run node-inspector with the `--no-preload` option. I'm testing this with Node Inspector v0.12.3 and it works.
",simeonpanayotov,2016-06-01 03:48:46
697,2015-11-16 09:12:19,"`--no-preload` works for me
",hilarudeens,2016-06-01 03:48:46
697,2016-07-06 14:56:44,"Excuse me, but this doesn't resolve problem. Although `--no-preload` works fine, yeah.
",mk0x9,2016-06-01 03:48:46
696,2015-07-20 09:11:03,"I have a React project using JSX, where I use the file extension `.jsx`. These files are not found by node-inspector, as the extensions are hardcoded to `.js` in ScriptFileStorage.

I hacked this quickly for myself by forking the project and just changing the value of `ALL_JS_PATTERN` to `{**/*.js,**/*.jsx}`. Now though, I would like this to be able to be used by other members of my team, and I think it might also be useful for others. Is this something node-inspector would be willing to support? If so, what would be the preferred way? A configuration option for file extensions? A flag for JSX support?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24636984-supporting-other-file-extensions-e-g-jsx?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",heldinz,
696,2015-07-20 18:32:19,"@bajtos , I think this is important feature also in context of `*.es6`
I vote up for configuration option.
",3y3,
696,2015-07-23 22:54:51,"+1 :+1:
",mathieumg,
696,2015-07-31 18:12:10,"+1
",BerkeleyTrue,
696,2015-08-05 16:25:15,"> I vote up for configuration option.

Sounds good to me. I would personally also extend the default list of extensions and add common ones (jsx, es6).
",bajtos,
696,2015-08-05 21:13:50,"That does sounds good. I also noticed today that Babelify does [pretty much exactly that](https://github.com/babel/babelify#customising-extensions): 

> By default all files with the extensions .js, .es, .es6 and .jsx are compiled. You can change this by passing an array of extensions.

I'll take a look at making a pull request this weekend then, unless someone else beats me to it.
",heldinz,
696,2015-08-10 09:01:04,"I have working code for `ScriptFileStorage` (and tests) but I'm having some trouble with the configuration option. I aimed to do it analogue to the `hidden` option (that being the only other option that takes an array) but am running into issues (btw, is [this documentation](https://github.com/node-inspector/node-inspector#how-do-i-specify-files-to-hide) for setting that option outdated?)

If I define the extensions option in `lib/config.js` as follows, with a non-empty array as default, and then pass in an option as e.g. `--extensions="".es6""`, the default is not replaced: instead, the first element in the array is overwritten (and also the second if I provide two extensions as args, etc). It seems that rc is _combining_ the default with the given input instead of ignoring the default if the option is present in argsv. Is that behaviour expected? It was my understanding that the default should just be used as a fallback in case the option was not specified.

<S_CODE_TOKEN>

Can someone maybe give me some pointers here? I haven't pushed to my fork yet but I can do that (or even make a pull request with just what I have so far) if that would be helpful.
",heldinz,
696,2016-06-16 16:52:47,"@heldinz have you made any progress on this? do you need help? 

I'd really like to see this working. It seems so essential to modern development that I'm a bit confused how it could still be an outstanding issue.

if nothing else, i'd really appreciate it if i could grab the branch you're working on.
",mattkime,
696,2016-06-17 00:31:24,"https://github.com/node-inspector/node-inspector/pull/889 - flawed but its a start.
",mattkime,
696,2016-06-17 10:34:09,"@mattkime I didn't get past the point described above, unfortunately. I will push to my fork later today though, hopefully you will get something out of it.
",heldinz,
696,2016-06-17 17:24:21,"@mattkime I've pushed my stuff to [my fork](/heldinz/node-inspector/tree/extensions).
",heldinz,
695,2015-07-17 00:46:48,"![node_inspector](https://cloud.githubusercontent.com/assets/12532733/8738334/92c4c17e-2be2-11e5-9b0d-789439f2184d.png)

No matter how much I click on these or bash my head against the wall, the arrows do nothing. I'm using the latest version on the latest version of Chrome.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24471909-clicking-on-expansion-arrows-does-nothing?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",ffxsam,
695,2015-09-25 16:19:57,"Yes, I have the same problem. I tried opening node-inspector in Firefox and IE11, but I only see the _sources_ and _console_ tabs with  a blank white screen.  

In Chrome, clicking on the arrows results in:

`Uncaught TypeError: window.getComputedStyle(...).getPropertyCSSValue is not a function`

This seems to be a regression of #478 (unless it was never actually fixed in the first place)
",ericterpstra,
695,2015-09-25 20:50:11,"Actually, never mind. This issue is specific to Meteor, which is bundling an old version of node-inspector. Patching `treeoutline.js` fixes it as ouline in this commit:
https://github.com/node-inspector/node-inspector/commit/92c35ed9fd7e4abdc3a0a8dd818b63d40a9f85e4
",ericterpstra,
694,2015-07-15 10:03:09,"After the uninstallation, node debug still tries to launch %AppData%\Local\Google\Chrome SxS\Application\chrome.exe. Have tried reinstalling node-inspector.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/24369145-enoent-after-uninstalling-chrome-canary?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",felixhao28,
694,2015-07-22 22:45:13,"@jakub-g , any thoughts?
",3y3,
694,2015-07-23 11:29:08,"Looks like one of many issues related to the fact that browser-launcher caches the browser list after first run. I guess we should get rid of that optimization since it creates more issues than it is worth.

I am away now, will try to come up with a solution next week.

As a workaround, you could locate the browser-launcher cache file and delete it.
",jakub-g,
694,2015-07-23 11:32:36,"https://github.com/benderjs/browser-launcher2/blob/master/lib/config.js

FYI Here is how the config file name is evaluated

On Thursday, 23 July 2015, Yury Puzynya notifications@github.com wrote:

> @jakub-g https://github.com/jakub-g , any thoughts?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/694#issuecomment-123895474
> .
",jakub-g,
693,2015-07-08 21:00:02,"<S_CODE_TOKEN>

I'm running the command `node-debug app.js` and I also tried using `sudo`.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/23964130-eaccess-error-when-running-node-debug?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",samholmes,
693,2015-07-27 14:21:02,"I had the same issue. The problem was that it tried to determine the version if phantomjs and my console returned ""permission denied"". I fixed that and now it works. In my opinion the function `checkOthers` should handle such errors. It seems like the `.on('error')` is not sufficient as an exception is thrown.
",stefanmayer13,
693,2015-07-27 15:52:37,"@stefanmayer13 I'm not using phantomjs though. I wonder what the issue is in my case.
",samholmes,
693,2015-07-28 06:18:23,"@samholmes Even if you don't want to use phantomjs, node-inspector is checking it in the function checkOthers in detect.js. Try adding a console log of the process name in detect.js before line 124 and see which command is causing the issue. At least it helped me to find the root cause on my system.
",stefanmayer13,
693,2015-07-28 21:10:41,"@stefanmayer13 If node-inspector is checking phantomjs in the function checkOthers in detect.js, then why isn't phantomjs a dependency in node-inspector's package.json (this appears to be a bug)?

Also, I cannot find detect.js in my installed node-inspector. Can you help me to find it?
",samholmes,
693,2015-07-28 21:24:25,"This error is not special for node-inspector.
Please google `node eaccess error child_process`
",3y3,
693,2015-07-28 21:26:46,"@3y3 when I google ""node eaccess error child_process"", the first thing google shows is this issue. haha
",samholmes,
693,2015-07-28 21:39:30,"@samholmes It says in the stack trace you posted where the detect.js file is located: /usr/local/lib/node_modules/node-inspector/node_modules/biased-opener/node_modules/browser-launcher2/lib/detect.js
",stefanmayer13,
693,2015-07-28 21:51:16,"If you don't want to dig into `detect.js` you can start node-inspector separately

<S_CODE_TOKEN>
",3y3,
693,2016-10-13 17:30:51,"@stefanmayer13 and how did you fixed that phantomjs issue? I'm having the same problem but don't know if I have to update phantomjs to fix it or what to do. I'm not using phantomjs but node-inspector it is trying to check its version.
",figalex,
692,2015-07-07 03:41:38,"Running Node 0.12.6 on OSX 10.10.3

About 10 seconds after starting a heap recording I get this error:

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/23836426-record-heap-allocations-error?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",thisjustin,
692,2015-10-21 09:47:05,"Also running Node 0.12.6 with Node-inspector 0.11.1.
I was not able to reproduce this, so it would be good if you could provide more info so somebody can reproduce it. Might also be worth it to try with newer version of inspector.
",EricSmekens,
691,2015-07-05 19:04:05,"I have get snapshot on my script, with memory leak and get error for downloading snapshot.

![dfgdg](https://cloud.githubusercontent.com/assets/9502625/8512962/86ed68d0-2361-11e5-8c16-1f11fdfc33e3.PNG)

![deb2](https://cloud.githubusercontent.com/assets/9502625/8517600/19ce6d7a-23cb-11e5-842d-de6b621dd01a.PNG)
![deb](https://cloud.githubusercontent.com/assets/9502625/8517601/19d03db2-23cb-11e5-9951-12b4ab867949.PNG)
![2](https://cloud.githubusercontent.com/assets/9502625/8517634/55834c5a-23cb-11e5-865f-1afe2c694aed.PNG)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/23743798-take-snapshot-error?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",vortex14,
690,2015-06-30 13:08:31,,3y3,2015-06-30 14:07:46
690,2015-06-30 13:13:54,"@bajtos , please review
",3y3,2015-06-30 14:07:46
690,2015-06-30 13:48:16,"LGTM :+1: 
",bajtos,2015-06-30 14:07:46
689,2015-06-27 07:11:02,"This is first stab on an implementation of #684, that provides two new HTTP endpoints `/json` and `/json/version`

`process.id` is used as the unique identifier for the debugging target, as it's unique and consistent as long the process is running.v
",auchenberg,2015-06-28 11:20:02
689,2015-06-27 08:17:39,"Please, rebase PR to origin/master, we have some important changes in `index` and `debug-server`.
",3y3,2015-06-28 11:20:02
689,2015-06-27 11:40:41,"Done.
",auchenberg,2015-06-28 11:20:02
689,2015-06-28 11:21:21,"LGTM. Landed. Thank you for contribution.

Can I see usage of this feature anywhere? =)
",3y3,2015-06-28 11:20:02
689,2015-06-28 12:32:20,"@3y3 Demo coming up, soon :) Stay tuned. 
",auchenberg,2015-06-28 11:20:02
688,2015-06-25 17:57:15,"`Map`, `Set`, `WeakMap`, or `WeakSet` variables in node-inspector are undefined.

<S_CODE_TOKEN>

Running the following code in node-inspector outputs `Map {}` to the console, but typing `console.log(a);` in the console outputs `undefined`.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/23051087-es6-data-structures-are-undefined?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",yads,
687,2015-06-22 03:44:50,"- [x] Handle request abort
- [x] Handle request timeout error
- [x] We listen for `response` event. This changes app behavior. (Is it a problem, or all works as expected?)
- [x] Check socketPath behavior
- [x] If there is no listeners for response data, response will be newer ended. It's expected, but maybe we need to specially handle this situation?
",3y3,2015-06-28 11:19:39
686,2015-06-21 16:34:19,"First of all, thanks to the team for maintaining and evolving this critical tool. The community is grateful for your work!

I see the following error, which prevents me from debugging my app:

<S_CODE_TOKEN>

I haven't had time to try and figure out why this was happening, but hopefully, the stack trace will be revealing enough. Let me know if there is anything else I can do to help you debug this issue. Cheers!
",jlecomte,2015-06-21 16:49:52
686,2015-06-21 16:37:53,"Oh, wow, this is weird:

<S_CODE_TOKEN>
",jlecomte,2015-06-21 16:49:52
686,2015-06-21 16:49:52,"Something is wrong with my setup. I installed a new version of node via nvm and this went away. Closing issue as invalid...
",jlecomte,2015-06-21 16:49:52
686,2015-06-26 09:28:56,"The issue is not invalid. Node-inspector doesn't work for Node versions < 12, because `path` module doesn't have `isAbsolute` method in those versions.

Is this an issue or is node-inspector only supposed to work for `Node 12+` or `io`?
",le0nik,2015-06-21 16:49:52
686,2015-06-26 10:48:04,"This is an issue. Fixup already merged. You can fork latest commit or wait `0.11.0` release. (Maybe I'll release `0.10.3` on this weekend)
",3y3,2015-06-21 16:49:52
686,2015-06-26 10:51:36,"@3y3 thank you!
",le0nik,2015-06-21 16:49:52
686,2016-04-09 10:47:07,"Updating to nodejs `5.6` solved the issue
",kashesandr,2015-06-21 16:49:52
685,2015-06-19 07:27:58,"First of all: my sincere thanks to the whole team for implementing the web notifications feature (issues #566 and #654), great work! Works like a charm!

A small startup issue: when you launch the Node Inspector url, the debug port passed in the url is not taken into account. Can this be fixed easily in the startup code of the Node Inspector UI?

E.g.: if my web port is 8083 and the debug port 5860 and you open the url 
  http://localhost:8083/?port=5860
it redirects with a HTTP 302 response to 
  http://localhost:8083/?ws=localhost:8083&port=5858

Here you see a Chrome network trace clearly showing what's going on:

20319: URL_REQUEST
http://localhost:8083/?port=5860
Start Time: 2015-06-19 09:10:01.009

t=3940 [st=  0] +REQUEST_ALIVE  [dt=313]
t=3941 [st=  1]    URL_REQUEST_DELEGATE  [dt=0]
t=3941 [st=  1]    URL_REQUEST_START_JOB  [dt=0]
                   --> load_flags = 2638848 (BYPASS_DATA_REDUCTION_PROXY | MAIN_FRAME | MAYBE_USER_GESTURE | VERIFY_EV_CERT)
                   --> method = ""GET""
                   --> priority = ""HIGHEST""
                   --> url = ""http://localhost:8083/?port=5860""
t=3941 [st=  1]   +URL_REQUEST_START_JOB  [dt=307]
                   --> load_flags = 2638848 (BYPASS_DATA_REDUCTION_PROXY | MAIN_FRAME | MAYBE_USER_GESTURE | VERIFY_EV_CERT)
                   --> method = ""GET""
                   --> priority = ""HIGHEST""
                   --> url = ""http://localhost:8083/?port=5860""
t=3941 [st=  1]      URL_REQUEST_DELEGATE  [dt=0]
t=3941 [st=  1]      HTTP_CACHE_GET_BACKEND  [dt=0]
t=3941 [st=  1]      HTTP_CACHE_OPEN_ENTRY  [dt=1]
t=3942 [st=  2]      HTTP_CACHE_ADD_TO_ENTRY  [dt=0]
t=3942 [st=  2]      HTTP_CACHE_READ_INFO  [dt=0]
t=3942 [st=  2]      URL_REQUEST_DELEGATE  [dt=0]
t=3942 [st=  2]     +HTTP_STREAM_REQUEST  [dt=302]
t=4244 [st=304]        HTTP_STREAM_REQUEST_BOUND_TO_JOB
                       --> source_dependency = 20322 (HTTP_STREAM_JOB)
t=4244 [st=304]     -HTTP_STREAM_REQUEST
t=4244 [st=304]     +HTTP_TRANSACTION_SEND_REQUEST  [dt=0]
t=4244 [st=304]        HTTP_TRANSACTION_SEND_REQUEST_HEADERS
                       --> GET /?port=5860 HTTP/1.1
                           Host: localhost:8083
                           Connection: keep-alive
                           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,_/_;q=0.8
                           User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.124 Safari/537.36
                           Referer: http://localhost:8081/ewd/ewdMonitor/index.html
                           Accept-Encoding: gzip, deflate, sdch
                           Accept-Language: nl-NL,nl;q=0.8,en-US;q=0.6,en;q=0.4
t=4244 [st=304]     -HTTP_TRANSACTION_SEND_REQUEST
t=4244 [st=304]     +HTTP_TRANSACTION_READ_HEADERS  [dt=3]
t=4244 [st=304]        HTTP_STREAM_PARSER_READ_HEADERS  [dt=3]
t=4247 [st=307]        HTTP_TRANSACTION_READ_RESPONSE_HEADERS
                       --> HTTP/1.1 302 Moved Temporarily
                           X-Powered-By: Express
                           Location: http://localhost:8083/?ws=localhost:8083&port=5858
                           Vary: Accept
                           Content-Type: text/html; charset=utf-8
                           Content-Length: 164
                           Date: Fri, 19 Jun 2015 07:10:01 GMT
                           Connection: keep-alive
t=4247 [st=307]     -HTTP_TRANSACTION_READ_HEADERS
t=4247 [st=307]      HTTP_CACHE_WRITE_INFO  [dt=0]
t=4247 [st=307]      HTTP_CACHE_WRITE_DATA  [dt=0]
t=4247 [st=307]      HTTP_CACHE_WRITE_INFO  [dt=0]
t=4247 [st=307]      URL_REQUEST_DELEGATE  [dt=0]
t=4247 [st=307]     +URL_REQUEST_DELEGATE  [dt=1]
t=4247 [st=307]        DELEGATE_INFO  [dt=1]
                       --> delegate_info = ""AsyncResourceHandler""
t=4248 [st=308]     -URL_REQUEST_DELEGATE
t=4248 [st=308]      URL_REQUEST_REDIRECTED
                     --> location = ""http://localhost:8083/?ws=localhost:8083&port=5858""
t=4248 [st=308]   -URL_REQUEST_START_JOB
t=4248 [st=308]    URL_REQUEST_DELEGATE  [dt=0]
t=4248 [st=308]    URL_REQUEST_START_JOB  [dt=1]
                   --> load_flags = 2638848 (BYPASS_DATA_REDUCTION_PROXY | MAIN_FRAME | MAYBE_USER_GESTURE | VERIFY_EV_CERT)
                   --> method = ""GET""
                   --> priority = ""HIGHEST""
                   --> url = ""http://localhost:8083/?ws=localhost:8083&port=5858""
t=4249 [st=309]   +URL_REQUEST_START_JOB  [dt=3]
                   --> load_flags = 2638848 (BYPASS_DATA_REDUCTION_PROXY | MAIN_FRAME | MAYBE_USER_GESTURE | VERIFY_EV_CERT)
                   --> method = ""GET""
                   --> priority = ""HIGHEST""
                   --> url = ""http://localhost:8083/?ws=localhost:8083&port=5858""
t=4249 [st=309]      URL_REQUEST_DELEGATE  [dt=0]
t=4249 [st=309]      HTTP_CACHE_GET_BACKEND  [dt=0]
t=4249 [st=309]      HTTP_CACHE_OPEN_ENTRY  [dt=0]
t=4249 [st=309]      HTTP_CACHE_ADD_TO_ENTRY  [dt=0]
t=4249 [st=309]      HTTP_CACHE_READ_INFO  [dt=0]
t=4249 [st=309]     +HTTP_STREAM_REQUEST  [dt=0]
t=4249 [st=309]        HTTP_STREAM_REQUEST_BOUND_TO_JOB
                       --> source_dependency = 20330 (HTTP_STREAM_JOB)
t=4249 [st=309]     -HTTP_STREAM_REQUEST
t=4250 [st=310]     +HTTP_TRANSACTION_SEND_REQUEST  [dt=0]
t=4250 [st=310]        HTTP_TRANSACTION_SEND_REQUEST_HEADERS
                       --> GET /?ws=localhost:8083&port=5858 HTTP/1.1
                           Host: localhost:8083
                           Connection: keep-alive
                           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,_/_;q=0.8
                           User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.124 Safari/537.36
                           Referer: http://localhost:8081/ewd/ewdMonitor/index.html
                           Accept-Encoding: gzip, deflate, sdch
                           Accept-Language: nl-NL,nl;q=0.8,en-US;q=0.6,en;q=0.4
                           If-None-Match: W/""295-1063222368""
                           If-Modified-Since: Tue, 16 Jun 2015 11:59:46 GMT
t=4250 [st=310]     -HTTP_TRANSACTION_SEND_REQUEST
t=4250 [st=310]     +HTTP_TRANSACTION_READ_HEADERS  [dt=2]
t=4250 [st=310]        HTTP_STREAM_PARSER_READ_HEADERS  [dt=2]
t=4252 [st=312]        HTTP_TRANSACTION_READ_RESPONSE_HEADERS
                       --> HTTP/1.1 304 Not Modified
                           X-Powered-By: Express
                           Accept-Ranges: bytes
                           Date: Fri, 19 Jun 2015 07:10:01 GMT
                           Cache-Control: public, max-age=0
                           Last-Modified: Tue, 16 Jun 2015 11:59:46 GMT
                           ETag: W/""295-1063222368""
                           Connection: keep-alive
t=4252 [st=312]     -HTTP_TRANSACTION_READ_HEADERS
t=4252 [st=312]      HTTP_CACHE_WRITE_INFO  [dt=0]
t=4252 [st=312]      URL_REQUEST_DELEGATE  [dt=0]
t=4252 [st=312]   -URL_REQUEST_START_JOB
t=4252 [st=312]    URL_REQUEST_DELEGATE  [dt=1]
t=4253 [st=313]    HTTP_CACHE_READ_DATA  [dt=0]
t=4253 [st=313]    HTTP_CACHE_READ_DATA  [dt=0]
t=4253 [st=313] -REQUEST_ALIVE
",wdbacker,2015-06-28 11:20:02
685,2015-06-19 08:58:15,"@wdbacker , thank you for bug report. I added it to main work line.
",3y3,2015-06-28 11:20:02
685,2015-06-20 08:41:45,"Hi @3by3, I found the cause of the problem in lib/debug_server.js, I think the debugPort in the debugAction function must be set by the _getDebuggerPort() method, now the port is set from the config:

<S_CODE_TOKEN>
",wdbacker,2015-06-28 11:20:02
684,2015-06-19 04:49:50,"Chrome and other compliant debugging-servers is in addition to the WebSocket-endpoint, also exposing a HTTP endpoint where it's possible to get a JSON description of the current target.

The interface is as following:

**/json**

<S_CODE_TOKEN>

Other methods are documented here: https://github.com/buggerjs/bugger-daemon#api

I'm proposing to implement **/json**  and **/json/version** as it would allow tools like Adobe Brackets and Chrome DevTools App to connect to node-inspector server, and automatically ""discover"" the target details. 

Should be trivial to implement.
",auchenberg,2015-06-28 11:24:01
684,2015-06-23 22:36:18,"I'm :+1 here.

@auchenberg , are you ready to implement it?
",3y3,2015-06-28 11:24:01
684,2015-06-24 03:57:52,"Sure. I can give it a try next week when I'm back to a stable connection :)
",auchenberg,2015-06-28 11:24:01
684,2015-06-24 04:00:42,"Note: Implementation in Stetho, https://github.com/facebook/stetho/blob/master/stetho/src/main/java/com/facebook/stetho/inspector/ChromeDiscoveryHandler.java#L111
",auchenberg,2015-06-28 11:24:01
684,2015-06-28 11:24:01,"Closed in #689
",3y3,2015-06-28 11:24:01
683,2015-06-18 18:21:15,"Node Inspector is claimed to have a BSD license. However, there is a single source file that is licensed under LGPL:

front-end/network/ResourceWebSocketFrameView.js

This creates a lot of headaches for consumers of Node Inspector who care about software licensing. Given that it is a single file, maybe it could be replaced with a BSD equivalent source, or the contributor may be willing to license it under the license used by the rest of the module?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/22401035-lgpl-code-creates-headaches-for-consumers?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jarthorn,
683,2015-06-18 18:25:33,"@3y3 I see you contributed this file, do you have a comment on it? Or is this just a code scrape from WebKit and the licensing problem is upstream?
",jarthorn,
683,2015-06-18 18:47:54,"@jarthorn , all files in `front-end` folder is copy-paste from webkit sources. So, I think this question should be retargetted to blink source. Anyway I'm not friendly with licensing theory (I know MIT and GPL, but I don't know what is the difference between them :smile: )
@bajtos , any thoughts here?
",3y3,
683,2015-06-19 10:59:44,"My opinion: we are distributing all source codes and the LGPL license allows users to include LGPL-licensed parts in a non-LGPL program, therefore we are not violating the license.

Having said that, IANAL (I am not a lawyer), so you should probable get a real lawyer to answer this question.
",bajtos,
682,2015-06-18 01:07:47,"I asked already on stack but no one answered me.

http://stackoverflow.com/questions/30830720/node-inspector-is-empty-no-source-files

There is not a lot of details, but please tell me what should i check. I mention that i've used node-debug with success, but something went wrong.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/22367358-no-sources-after-debug?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",sagittarius89,
682,2015-06-19 08:06:03,"This issue can be caused by the --debug-port being different (default 5858). If you launch node-debug, just make sure you use the same debug port when launching the browser UI.
",wdbacker,
682,2015-06-20 21:43:07,"Ports seems to be configured propertly. Today i removed node and all node modules from my pc and installed everything once again. In other words i excluded configuration problem (assuming problem is not in browser side). I even cloned node-inspector from git-hub to be sure that i have lastest sources. This didn't solve problem. Where in code node-inspector load sources to chrome inspector? Where should i debug?
",sagittarius89,
682,2015-06-29 15:40:10,"@sagittarius89 , can you confirm this issue on node-inspector 0.11.0?
",3y3,
682,2015-06-29 19:34:19,"@3y3 Confirm. I've updated sources and problem still occurs.
",sagittarius89,
682,2015-07-04 08:58:55,"@sagittarius89 , i got the same problem, no source files from node-inspector. node-inspector version 0.11.1, node version 0.12.3
",meikidd,
682,2015-07-12 09:22:33,"**Update:**

I've found that I'm encountering the [known issue with symlink cycles](https://github.com/node-inspector/node-inspector#known-issues).

> If there are symlink cycles then the glob module may take a long time to return results causing long delays at startup. The workaround is to disable preloading of scripts with --no-preload.

I've added the `--no-preload` flag and node-inspector is starting immediately with sources.

---

I've been having the same issue on Windows and Ubuntu. 

However, I have found if I left node-inspector running for three or four minutes then the sources would show up and I could debug the my script.

Ubuntu 14.04:
Node v0.10.18
node-inspector 0.11.1

Windows 8.1:
Node v0.12.4
node-inspector 0.11.1
",Coridyn,
681,2015-06-16 22:57:53,"`path.isAbsolute` is not available in node 0.10.x. when an inline sourcemap is found, node-inspector throws with:

<S_CODE_TOKEN>
",zertosh,2015-06-17 05:03:20
681,2015-06-16 23:51:34,"@zertosh , thank you for contribution. I'll merge it soon.

I see that you are `babel` organisation member. How about fix this issues also in `babel` itself?
I can target you to previous discussion about sourcemap problems.
",3y3,2015-06-17 05:03:20
681,2015-06-17 00:38:17,"This fix is so that node-inspector doesn't throw, but are you talking about https://github.com/babel/babel/pull/1587? I really have no idea how paths should work :disappointed: I maintain https://github.com/babel/babel-sublime/ and https://github.com/babel/babelify.
",zertosh,2015-06-17 05:03:20
681,2015-06-17 05:03:20,"Ok. Anyway thank you for this bugfix

Landed as ab916536a9cc81913c9c3ab87f7bb8735d23f082
",3y3,2015-06-17 05:03:20
680,2015-06-16 10:45:50,"I have value for property named `in_progress` but it shows in console as `in progress`. I spent about an hour to realize that this's console problem and not transformation in my code. Very confusing.

How it looks
![console1](https://cloud.githubusercontent.com/assets/577042/8181209/deac134e-142c-11e5-9f9d-371835f2b45c.PNG)

What really value is
![console2](https://cloud.githubusercontent.com/assets/577042/8181282/594282e6-142d-11e5-87d9-ba69fd3755bc.png)
",fetis,2015-06-16 21:37:53
680,2015-06-16 11:35:25,"I think you have `110%` (or other not equal to `100%`) pixel ratio on inspector page.
Play with `ctrl +` and `ctrl -`.
",3y3,2015-06-16 21:37:53
680,2015-06-16 11:42:46,"I have 125%, on 110% is same. 100% is fine but font is too small.
Is it problem of node-inspector or Chrome itself?
",fetis,2015-06-16 21:37:53
680,2015-06-16 12:50:50,"This is problem of Chrome itself
",3y3,2015-06-16 21:37:53
679,2015-06-16 08:33:29,"Hey,
About a week ago, I've started getting this error when i try to debug in chrome -
""Error: Cannot find module '/usr/lib/node_modules/node-inspector/lib/InjectorServer.js'""
The nodejs version is 0.10.33 and the node-inspector was 0.9.2. After reading issue #535 , i've tried to upgrade the node-inspector module to latest 0.10.2, but the error persist. The InjectorServer.js file is there in the mentioned directory, so any ideas are welcome
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/22207755-injectorserver-module-not-found?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",ddimitrov90,
679,2015-09-29 10:20:21,"Bump
",vdininski,
679,2016-08-15 16:41:01,"Running into this same issue with node-inspector 0.12.8 on node 4.4.2. I've tried uninstalling and cleaning the cache to no avail. Would love to know if anyone has found a solution for this.
",ltegman,
679,2017-01-13 00:30:54,"have some error, can not find InjectorServer.js.

Any idea will be welcome.",emacslisp,
678,2015-06-15 15:12:18,"Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v0.11.13-darwin-x64/debug.node'   

how to solve？
",sundyxfan,2015-12-06 21:02:39
678,2015-06-15 16:18:33,"Do you have strict reason to use 0.11.13?

You have some ways to solve this issue:
1. Switch to other node version, which supports prebuild binaries (latest 0.10.*, latest 0.11.*, 0.12.*, 1.*, 2.*)
2. Or install full environment to build native modules [read this article](https://github.com/TooTallNate/node-gyp#installation)
",3y3,2015-12-06 21:02:39
678,2015-06-18 10:15:37,"Facing a similar issue on Mac OSX 

Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v44-darwin-x64/debug.node'

$ node -v 
v0.12.2
$ node-inspector -v
Node Inspector v0.10.2
$npm -v
2.10.1
",jakedsouza,2015-12-06 21:02:39
678,2015-06-18 13:27:15,"@jakedsouza , can you go to this path and check that there is no `node-v44-darwin-x64` folder.
Maybe any other folder exists instead of this one?
",3y3,2015-12-06 21:02:39
678,2015-06-18 19:46:33,"@3y3, I do not have the `node-v44-darwin-x64` folder but I do have a `node-v43-darwin-x64` folder 

<S_CODE_TOKEN>
",jakedsouza,2015-12-06 21:02:39
678,2015-06-18 19:54:21,"Is it possible what you install node-inspector using iojs 1.\* and then update iojs to 2.*?
",3y3,2015-12-06 21:02:39
678,2015-06-18 21:17:32,"@3y3 I am not using iojs. I uninstalled and reinstalled node-inspector with different versions of node 0.11.xx and 0.12.xx with similar error. 

Switched to `iojs 2.2.1` reinstalled node-inspector and the error goes away  
",jakedsouza,2015-12-06 21:02:39
678,2015-06-18 23:33:54,"I ask because:
- `node-v11-darwin-x64` - for 0.10.*
- `node-v14-darwin-x64` - for 0.12.*
- `node-v43-darwin-x64` - for 1.*
- `node-v44-darwin-x64` - for 2.*

Node Inspector choses automatically which file it should download from amazon S3.
If you want to understand what happens here, look at `node-pre-gyp` project.
",3y3,2015-12-06 21:02:39
678,2015-06-19 00:54:46,"So it looks like Node Inspector chose the wrong one for node 0.12. Ill take a look at `node-pre-gyp`
",jakedsouza,2015-12-06 21:02:39
678,2015-06-23 15:37:42,"I had this issue as well which may be related to using NVM. NPM install was successful and installed into: 

`/Users/ajones/.nvm/versions/node/v0.12.3/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v14-darwin-x64/debug.node`

Error from node inspector was looking for it at: 
`/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v43-darwin-x64/debug.node`

Unsure if this is helpful or not just what I noticed when trying a ""fresh"" install today. 
",thejones,2015-12-06 21:02:39
678,2015-07-19 14:32:28,"@thejones yeah, i had the same problem this is the step to avoid `nvm reinstall-packages 0.12.5`

install all your global packages manually and everything will work
",tsm91,2015-12-06 21:02:39
678,2015-08-02 04:20:39,"Hi I am having this same problem. Ive reinstalled. But I still get this message:

Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.0/node-v44-darwin-x64/debug.node'

However I only have node-v14-darwin-x64 instead of v44.  How do I fix this? Thanks!
",wyattbiker,2015-12-06 21:02:39
678,2015-08-13 20:32:20,"Having a similar issue, but the cause of the error is clear. `\build\debug\v0.4.6` doesn't exist, but `\build\debug\v0.5.2` does and it contains `node-v14-win21-ia32`. Why is it looking for 0.4.6? I get the feeling that node-inspector thinks I'm running Node 11. 

https://github.com/node-inspector/node-inspector/issues/719
",rainabba,2015-12-06 21:02:39
678,2015-09-11 03:09:21,"Error: Cannot find module '/usr/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.2/node-v46-linux-x64/debug.node'

<S_CODE_TOKEN>

Quite similar error here.

How to fix it?
",ftcosta,2015-12-06 21:02:39
678,2015-09-28 21:46:42,"same issue with node -v 4.1.1
",ivanmanolov90,2015-12-06 21:02:39
678,2015-09-29 12:10:37,"I found the ""node-v46-linux-x64"" folder and debug.node file did not exist.  Creating the missing folder and copying the debug.node file from the /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v11-linux-x64 folder into the new ""node-v46-linux-x64"" has work.
",trevorhutt,2015-12-06 21:02:39
678,2015-10-03 10:24:47,"I've installed the latest node 4.1.1 for MacOS, but am only getting the following error messages:

<S_CODE_TOKEN>

Strange thing is that it reports node's version as v.0.10.36, although a node -v shows 4.1.1
",derwaldgeist,2015-12-06 21:02:39
678,2015-10-10 09:10:44,"Not sure if this is a totally valid fix but I was able to work around this issue by opening the `/usr/local/lib/node_modules/babel-node-debug/node_modules/v8-debug` in my terminal and running the `npm run install` command. That generated the missing build/debug/... directories and I'm not seeing that error anymore.
",cold-logic,2015-12-06 21:02:39
678,2015-10-15 18:39:34,"does not fix the problem for me :(
",bunterWolf,2015-12-06 21:02:39
678,2015-10-19 02:51:34,"@cold-logic pointed me in the right direction, though I don't know where `babel-node-debug` came from.
1. Enter `/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler`
2. Run `npm run install`
3. Enter `/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug`
4. Run `npm run install`

No errors after that.
",spamguy,2015-12-06 21:02:39
678,2015-11-03 15:55:20,"I have `node-v14-linux-x64 folder` inside 
`/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6`
and this is trying to find 
`/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v46-linux-x64/debug.node`
How to update it? As I run commands written above but nothing changed.
",echorohit,2015-12-06 21:02:39
678,2015-11-03 16:06:09,"@trevorhutt  error in my case
`Error: Module version mismatch. Expected 46, got 14.`
",echorohit,2015-12-06 21:02:39
678,2015-11-12 18:29:50,"@spamguy Thanks, that worked perfectly
",ShirajG,2015-12-06 21:02:39
678,2015-11-13 06:20:24,"@ShirajG your node version?
",echorohit,2015-12-06 21:02:39
678,2015-11-14 21:18:50,"Thanks @spamguy, that fixed it!
",nickperkinslondon,2015-12-06 21:02:39
678,2015-11-17 20:28:08,"Thanks @spamguy worked fined for me!
Node v5.0.0
Npm v3.3.7
Node-inspector v0.12.3
",brunettdan,2015-12-06 21:02:39
678,2015-11-25 23:07:58,"Same issue here guys
Node v5.1.0
npm v3.3.12
Node Inspector v0.12.3
@spamguy 's fix didn't seem to do it, in the browser I am still getting:

<S_CODE_TOKEN>
",thiagodebastos,2015-12-06 21:02:39
678,2015-11-27 02:57:27,"I've got a work around based on @3y3 and @jakedsouza discussion above. 
Grab the expected files from S3 and add them to the desired location.
for Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.1/node-v11-darwin-x64/debug.node'
1) Get valid file from https://node-inspector.s3.amazonaws.com/debug/v0.5.1/node-v11-darwin-x64.tar.gz
2) decompress and place in /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.5.1/

when I restarted, I got a similar error for 'node-v11-darwin-x64/profiler.node', used the same process, restarted, and it all appears to be working. First time using the application so take it with a grain of salt.

find whatever node-inspector version you need here https://node-inspector.s3.amazonaws.com/
",jjrasche,2015-12-06 21:02:39
678,2015-11-30 20:39:02,"@jjrasche Thanks! Your solution is works for me. XUbuntu 14/16, Fedora 22.
",VoidVolker,2015-12-06 21:02:39
678,2015-12-02 17:16:32,"@echorohit I was using 4.0.0 at the time, but via NVM
",ShirajG,2015-12-06 21:02:39
678,2015-12-06 21:02:39,"Try to install 0.12.5. This version includes prebuilt binaries for all actual node versions from the box.
Feel free to reopen this issue if it still exist.
",3y3,2015-12-06 21:02:39
678,2016-02-01 07:33:43,"I tried installing node-inspector:

<S_CODE_TOKEN>

Running into this issue:

<S_CODE_TOKEN>

Node 5.2.0
",natew,2015-12-06 21:02:39
678,2016-02-01 15:31:27,"@natew , I see that you try to install outdated version of v8-debug. I can't understand how this can happen, but NI 0.12.5 requires `v8-debug` 0.7.0

Maybe `npm cache clean` will be helpful
",3y3,2015-12-06 21:02:39
678,2016-02-12 17:50:04,"It's a hack but ... worked for me
cd /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug
ln -s v0.7.1 v0.5.0
",riceian,2015-12-06 21:02:39
678,2016-04-28 10:23:07,"reinstall node-inspector helpful for me
",dilongl,2015-12-06 21:02:39
678,2016-05-27 01:40:14,"@spamguy Tks!
",nandofalcao,2015-12-06 21:02:39
678,2016-11-21 04:00:16,"@spamguy Thanks, it work!",uncledu,2015-12-06 21:02:39
677,2015-06-14 23:21:42,"@jkrems , thanks to your experience in #655 I added full network tab implementation.
Here I solve some problems of your pr:
- We can wrap code in `--debug` and `--debug-brk` mode
- We wrap only one function
- We send finished requests to frontend
- Added different identifiers for `requestId`, `connectionId`, `loaderId`.
- We collect stack trace closest to func called by user
- POST data captured

What is implemented:
- Basic http request support
- Request timings
- Request data capturing and cleaning (we store data in node-inspector)
- Backported `String.prototype.toBase64` from latest DevTools. This solves problem with inspection of data with non ascii caracters

What doesn't solved in this pr:
- [TODO](https://github.com/node-inspector/node-inspector/blob/master/lib/FrontendCommandHandler.js#L48-L51) not fixed. So we can't use `XHR breakpoint` section in source panel.
- I don't know that happens if anyone will use not default encoding in `req.write`
- I don't test keep alive requests
- Not implemented `Network + Console` behavior.
",3y3,2015-06-28 11:32:09
677,2015-06-17 00:35:40,"@jkrems ,
@marcominetti ,
@bajtos ,

please review this. This is a full implementaton of Network panel.
",3y3,2015-06-28 11:32:09
677,2015-06-17 01:03:47,"force updated to fix tests.
",3y3,2015-06-28 11:32:09
677,2015-06-17 05:00:10,"> This seems to be missing the protocol? Also, as mentioned in the other PR - this doesn't work when forging host headers or setting a port. Especially the latter part is fairly common when talking to internal services.

fixed in `Network: find correct request url`
",3y3,2015-06-28 11:32:09
677,2015-06-17 07:34:32,"@3y3 Great stuff! I left few comments above.
",bajtos,2015-06-28 11:32:09
677,2015-06-18 23:43:21,"@bajtos , I fixed targetted issues. Unfortunately changes history was vwry dirty, so I prefer to squash all fixups.

What happened here:
- added `debug.convert`
- `response.push` used to handle `dataReceived` and `finishLoading` events.

@bajtos , @jkrems all your issues are fixed. It's ready to next round of review. First round was very useful.
",3y3,2015-06-28 11:32:09
677,2015-06-19 01:24:24,"Looking good! Two potential edge cases I found:
- Right now it ignores requests that are queued b/c of `maxSockets`, test case here: https://gist.github.com/jkrems/605a63f4ac068f42de30. This means that when a request times out (is aborted) because of sockets queueing, it will be invisible in the network tab
- Maybe bailing out if `options.socketPath` is present might be a good idea. Or adding a test making sure that the instrumentation doesn't break app code if the app is using file sockets somewhere.
",jkrems,2015-06-28 11:32:09
677,2015-06-19 11:04:40,"LGTM. I think it's ok to squash most (all?) commits into a single one. Also please check why the CI build is failing, whether its related to the changes made in this PR.

I also think it's ok to address the two edge cases mentioned in @jkrems's comment in a new pull request, but feel free to fix them in this PR too. Whatever works best for you.
",bajtos,2015-06-28 11:32:09
677,2015-06-25 12:38:37,"Ok. I partially fixed issues from last @jkrems comments. I switched to new entry point for wrapper, and now I have some questions for discussion - look at code below.

From `_http_client.js` with my comments

<S_CODE_TOKEN>

@jkrems , about your gist example. 

<S_CODE_TOKEN>

There you target me to situation when socket will be never initialised.
I think that current realisation (where we send `requestWillBeSent` after socket initialisation) is correct, otherwise we can't say what request really will be sent =)
All other cases from your gist are handled in new commits.

@bajtos , I fixed tests and squashed all changes to three commits:
- implementation
- backported changes
- tests

Please review `squash!` changes. There I fixed a completely missed `responseFailure` and checked behavior changing when we listen on `error` and `response` events.
",3y3,2015-06-28 11:32:09
677,2015-06-25 12:40:36,"Sorry. I need to fix tests for 0.10.\* but anyway it's ready to review.
",3y3,2015-06-28 11:32:09
677,2015-06-25 16:45:37,"@3y3 I took a quick look and did not find any obvious issues. Feel free to merge.
",bajtos,2015-06-28 11:32:09
677,2015-06-25 21:22:31,"@3y3 The reason I included that as a test case is that it catches one of the nastier things to debug when working with a lot of service calls: resource limits + parallelization. E.g.:
- Using `maxSockets` to control the maximum number of concurrent sockets (blocked resources) your app will open against some upstream service (""being a good SOA neighbor"" etc.)
- Combined with strict timeouts (""fail fast over hang long"")
- Combined with parallel requests (""optimize the critical path"")

Those three combined lead to situations where apps can sometimes start to make a request (from an app's perspective: the request was fired) but then before they even have a chance to acquire a socket, they time out and are aborted (are returning a `ETIMEDOUT` error from an app's perspective). Back when bugger's network tab was still working, these were the exact kinds of problems I used it for. Successful requests are relatively boring. ;)
",jkrems,2015-06-28 11:32:09
677,2015-06-25 22:36:41,"> Successful requests are relatively boring

Yes! :smile: , that's why I prefer to add `requestFailure` handling before merging.
So, now when we handle request error we will see in network tab

<S_CODE_TOKEN>

or

<S_CODE_TOKEN>

In other words all time when request was aborted or rejected we will handle it.
But there are two situations which we can't handle:
- User listen on `response` event but don't read the data.
- Socket is newer created for request (crazy `maxSockets = -1`). If I understand right this is impossible situation? (If `maxSockets > 0` then socket can be created from long time and we will see the problem in `timing` tab)

So, if I understand the problem you described will be handled in current implementation, or I missed something?
",3y3,2015-06-28 11:32:09
677,2015-06-26 01:25:16,"@3y3 The `maxSockets: -1` simulates a real condition. The `-1` just makes sure it happens on the very first request and you don't need 10 others to reproduce. Here's an example using a normal value for `maxSockets` that shows the same effect: https://gist.github.com/jkrems/605a63f4ac068f42de30#file-realistic-js

Output of the script:

<S_CODE_TOKEN>

As you can see it only fires the `socket` event for the first couple of requests (up to `j`), the remaining 5 never reach the listener.

P.S.: I marked it as `ETIMEDOUT` because it's how `request` would report it. See [here for the ""real"" code in request](https://github.com/request/request/blob/f57ad7c6111cff2e205a1cdcf7fa71a59c1b5372/request.js#L800-L805). It's not the socket read timeout node itself generates.
",jkrems,2015-06-28 11:32:09
677,2015-06-26 13:20:25,"@jkrems , the output for your example (`throw err;` changed to `console.log(err);`):
Also you can see that you use wrong options object (`pathname` instead of `path`)

![output-network](https://cloud.githubusercontent.com/assets/3931155/8378031/e872f6c8-1c1e-11e5-83dd-ab09169dd8f8.png)
![output-console](https://cloud.githubusercontent.com/assets/3931155/8378033/eadcd73a-1c1e-11e5-874e-b1a47bc828d7.png)

Is this result acceptable, or I need fix something here?
",3y3,2015-06-28 11:32:09
677,2015-06-28 11:33:04,"Merged. If there exists any bugs welcome with new prs.
",3y3,2015-06-28 11:32:09
676,2015-06-11 21:47:08,"Hello,

env:
node 0.12.4
node-inspector 0.10.1
ubuntu 14.04 LTS
Chrome: 37, 41 and 43 - tried them all
Opera stable

I get the following during debug:

PID 8724 received SIGSEGV for address: 0x308324391
/opt/node12.4/lib/node_modules/segfault-handler/build/Release/segfault-handler.node(+0x1175)[0x7f319c694175]
/lib/x86_64-linux-gnu/libpthread.so.0(+0x10340)[0x7f319e881340]
node(_ZN2v811HandleScopeC2EPNS_7IsolateE+0x58)[0x812118]
node[0xc9404f]
node(_ZN2v88internal25PropertyCallbackArguments4CallEPFvNS_5LocalINS_6StringEEERKNS_20PropertyCallbackInfoINS_5ValueEEEES4_+0x88)[0x82acd8]
node(_ZN2v88internal6Object23GetPropertyWithAccessorENS0_6HandleIS1_EENS2_INS0_4NameEEENS2_INS0_8JSObjectEEES3_+0x1fd)[0xb04d2d]
node[0xb4ff8c]
node(_ZN2v88internal31Runtime_DebugGetPropertyDetailsEiPPNS0_6ObjectEPNS0_7IsolateE+0x4ab)[0xb9605b]
[0x2ec66b7060a2]

runs successfully without node-inspector. This problem popped up when upgrading to the latest node/node-inspector. I tried downgrading Chrome, nothing works. The same debugging works fine with node 0.10.33/node-inspector 0.7.4.

The seg fault occurs when stepping into a very large script that is running inside of jsdom. I tried bouncing around versions of jsdom to no avail. Any ideas? Anyone else having troubles?

Best,

-Thom
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/21579820-seg-fault-debugging-app-with-node-0-12-4-node-inspector-0-10-1?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",thomhickey,
676,2015-06-15 02:11:03,"I wonder to see extended info here:
1. Can you reproduce this on io.js or on node 0.10.x with latest node-inspector (I see combination 0.10.33/node-inspector 0.7.4). Interesting combination 0.10.33/ni 0.10.2?
2. Can you post a screenshot for one step before error. I'd like to see a code what you want to inspect.
3. Can you try to reproduce this error with node common debugger (`node debug script.js`) (This is not important step, but can be helpful)
",3y3,
675,2015-06-11 20:26:08,,3y3,2015-06-12 20:53:58
675,2015-06-12 00:17:56,"@bajtos , ready to review.
",3y3,2015-06-12 20:53:58
675,2015-06-12 07:43:46,"@3y3 I am afraid I don't have enough time to review this in detail. I don't see any obvious problem, if the patch works for you then I am fine with it. :shipit: 
",bajtos,2015-06-12 20:53:58
675,2015-06-12 09:18:56,"> Perhaps we should use -1 instead

Everywhere? Or only for console? I'm :+1:  for `-1`
",3y3,2015-06-12 20:53:58
675,2015-06-12 13:07:16,"> Everywhere? Or only for console? I'm :+1: for -1

I don't have a strong opinion. Shall we try to use it everywhere and see if it breaks anything?
",bajtos,2015-06-12 20:53:58
674,2015-06-11 19:32:09,"I am struggling with an issue for firing up the node inspector url.

I did npm update , npm -g install node-inspector  and everything worked fine

now when I start node-debugger then it says visit https://localhost:8080/debug?ws=localhost:8080&port=5858 to start debugging 

when I visit the url on chrome it says ""Webpage is not available""
![nodeinspector](https://cloud.githubusercontent.com/assets/1595233/8116241/bca1e026-1035-11e5-8284-c6c842274614.JPG)

![nodeinspector2](https://cloud.githubusercontent.com/assets/1595233/8116249/c6a1e68e-1035-11e5-8d6b-d22f7eb0c959.JPG)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/21562186-win-8-node-inspector-url-https-127-0-0-1-8080-debug-ws-127-0-0-1-8080-port-5858-doesnt-work-on-chrome?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",govind22,2016-04-08 22:22:23
674,2015-06-14 22:25:48,"Have you any internet connection in time when you launch node-inspector?
Or you use it on isolated machine?
Issue can be related with problems in node `dns` module.
I have no other idea here...
",3y3,2016-04-08 22:22:23
674,2015-06-14 22:26:35,"Try connect directly to 127.0.0.1 instead of localhost
",3y3,2016-04-08 22:22:23
673,2015-06-11 10:35:58,"FYI
",Pana,2015-06-14 21:45:33
673,2015-06-14 21:45:33,"Fixed in 0.10.2.
Feel free to reopen this issue, if I'm wrong here.
",3y3,2015-06-14 21:45:33
672,2015-06-10 19:48:43,"Hi,

im using node-inspector for some ES6/7 (babel) projects, but there are some problems with breakpoints in function calls. First: Im using babel 5.5.6, node 0.12.2 and node-inspector 0.10.1. It seems that breakpoints within functions will not be triggered until I go into this function (F11) manually. Let me show you a small example:

File src/a.js

<S_CODE_TOKEN>

File src/b.js

<S_CODE_TOKEN>

Now I compile this with `$ babel --source-maps --out-dir dist src` and run it with `$ node --debug-brk dist/a.js`. If I set breakpoints in test2() in src/a.js and test() in src/b.js only the breakpoint in a.js will be triggered. I tried to use inlined/external source maps or run it with babel-node, but the result is always the same. I can only get this working if i use F11 to go manually into test(). After doing this the breakpoints in test() (b.js) will work as expected.

If I ""transpile"" this short code by myself to ES5 it works as expected.

Whats wrong with my approach?

Thanks.
",otbe,2015-06-30 15:37:03
672,2015-06-14 22:27:32,"Can you confirm this issue with ni 0.10.2?
",3y3,2015-06-30 15:37:03
672,2015-06-14 22:32:42,"Ok, I see that you use node `0.12.x` there is a [known issue](https://github.com/joyent/node/issues/25266) with `afterCompile` event.
So, we can't handle new scripts in app process -> we can't add them to resource tree.
One only way to receive new sources - step in.

As a workaround you can use iojs or `debugger` statement.
",3y3,2015-06-30 15:37:03
672,2015-06-30 15:37:03,"Will be fixed in 0.11.1
",3y3,2015-06-30 15:37:03
671,2015-06-10 13:29:08,"Possibly related to #657. node-inspector used to work great but now it's doing this thing most of the time where the interface loads but does nothing, remains completely blank. My environment:

node 0.10.32 / node-inspector 10.0.0 / 10.0.1 running on Ubuntu 12.04.
Debugging remotely from Windows 7 x64 / Chrome 42 on different physical machine on same local network.

<S_CODE_TOKEN>

Since I updated Chrome to v41 it started exhibiting frequent DNS failures and I recently ran Fiddler (debugging proxy) to see if it could reveal anything, and just running it seems to sidestep the Chrome DNS failures, so I've been running it since. I mention it in case it's relevant somehow, but as I said the interface loads, just nothing within it. And I believe I've had it function normally at least once with Fiddler running.

I don't know if it's relevant, but I'm also getting this in Chrome console:

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/21394260-interface-loads-but-remains-blank?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jmm,
671,2015-06-10 13:45:05,"@3y3 I'm working on getting the screenshot you requested in #657, and just now it actually worked, with `fiddler` running. I did get this in Chrome console:

<S_CODE_TOKEN>
",jmm,
671,2015-06-10 13:51:54,"<S_CODE_TOKEN>

This is expected behavior. Inspector can works with this two errors.

So, do you have a working state?
",3y3,
671,2015-06-10 13:59:45,"> This is expected behavior. Inspector can works with this two errors.

Ok, thanks.

> So, do you have a working state?

I do at the moment, but I don't expect it to be smooth sailing.

So if my actual command is:

<S_CODE_TOKEN>

Is this the correct way to generate a debug log?:

<S_CODE_TOKEN>
",jmm,
671,2015-06-10 14:30:18,"`$ DEBUG=node-inspector:* DEBUG_FD=3 node-debug --debug-brk --web-host=example.com script.js 3> garbage.log` (missed colon)

I'm not sure what this will work as expected, because `node-debug` command mute all output from node-inspector itself.

<S_CODE_TOKEN>

Will work fine. But if your solution works, I'll add it to wiki page.
",3y3,
671,2015-06-10 14:41:17,"> (missed colon)

Ok, thanks -- that was actually copy and paste from the wiki page you linked me to.

> I'm not sure what this will work as expected, because `node-debug` command mute all output from node-inspector itself.

Oh ok.

> But if your solution works, I'll add it to wiki page.

I imagine it's only a matter of time before I run into the problem again and I'll try it then.

> ...Will work fine.

Ok thanks, I'll try that if the other way doesn't work. Is it possible to do it that way but do the first two lines as one so those environment variables aren't changed for the whole env?
",jmm,
671,2015-06-10 14:59:45,"> Is it possible to do it that way but do the first two lines as one so those environment variables aren't changed for the whole env?

Yes, sure! This is my mistake.
",3y3,
671,2015-06-14 22:33:52,"Is this issue solved?
",3y3,
671,2015-06-15 12:09:11,"I'm encountering this same behavior on a mac.
",aldendaniels,
671,2015-06-15 12:58:19,"@3y3 I doubt it's actually solved -- I expect it to reoccur. If you want I'll close the issue and re-open it if / when it reoccurs.
",jmm,
671,2015-06-18 20:48:06,"@3y3 I just tried it again for the first time since my last post here and it didn't work again. I was about to post and decided to change the log file name in my shell command just for aesthetics of what I post and decided to try it one more time after doing that, and then it started working. It's very hit or miss. This is the command I was running

<S_CODE_TOKEN>

And I was just getting a `0` length `node-inspector.log` file.
",jmm,
671,2015-06-18 21:04:11,"It's back to not working. It looks like the log fills up with tons of data when it works. When it doesn't work I get no log output.
",jmm,
671,2015-06-22 18:00:23,"@3y3 What else can I do to debug this? It's a big problem for me that it's not working.

I tried following [this instruction](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide#reverse-engineering-the-front-end):

> Alternatively, you can enable `this.dumpInspectorProtocolMessages` in `front-end/InspectorBackend.js`.

I had no such file. In `front-end/sdk/InspectorBackend.js` I tried setting `InspectorBackendClass.Options.dumpInspectorProtocolMessages` to `true`. At first it appeared to do nothing, but then I happened to notice something in the browser console. So I tried it again and after about 4 minutes of the interface sitting there doing nothing this output appeared in the console:

<S_CODE_TOKEN>
",jmm,
671,2015-06-23 13:31:11,"You found main problem

<S_CODE_TOKEN>

If I understand right in this case you don't receive `Assertion failed: Unknown experiment canvasInspection` anywhere.
Are you using fiddler in this time?
",3y3,
671,2015-06-23 14:25:02,"@3y3 Thanks again for your help.

> If I understand right in this case you don't receive `Assertion failed: Unknown experiment canvasInspection` anywhere.

No, I _do_ still receive that in the browser console. I just stopped mentioning it because you said earlier it's expected. That shows up even before the interface appears. The WebSocket error takes minutes to show up.

> Are you using fiddler in this time?

Yes, fiddler is running.
",jmm,
671,2015-06-23 15:19:15,"> No, I do still receive that in the browser console.

Uhm. Now I can't understand how it is possible... In my mind we need an opened websocket to receive this message, but `WebSocket connection to 'ws://example.com:8080/?port=5858' failed: WebSocket opening handshake timed out InspectorBackend.js:666` says that socket fails on handshake...

Can you reproduce this error without fiddler?
",3y3,
671,2015-06-23 15:52:32,"@3y3 I mostly can't do anything without fiddler, unfortunately. Ever since I updated Chrome to v41 (and now 42) I constantly get these errors:

> This webpage is not available
> `ERR_NAME_NOT_RESOLVED`

I originally ran fiddler to try to debug that and for some reason running fiddler cures it, so I've had to keep it running all the time since then just to get chrome to do DNS resolution. If I disable fiddler Chrome immediately stops resolving DNS.

> says that socket fails on handshake...

What would cause this handshake process to take 4 minutes to time out? That seems excessive.
",jmm,
671,2015-07-09 11:46:30,"I'm seeing this trying to debug within a docker container. I'm exposing port 8080 and hitting it, but I just get a blank interface with no sources, etc. Same assertion failure listed above, but nothing else.
",andyburke,
671,2015-07-14 02:31:19,"I get the same probelm as @andyburke with 

<S_CODE_TOKEN>

in the console.  I tried ""sudo node-inspector && sudo node --debug-brk port 5858 -p 9362"" but that does the same.
",sadtaco,
671,2015-08-05 11:06:24,"Got the same problem. Any news on this?
",dopesong,
671,2016-01-20 20:27:24,"I just started seeing this same issue - the inspector has worked fine in the past.  Tried latest Chrome and Safari.  This is a Meteor app.
",datanotion,
671,2016-02-04 00:24:23,"I'm seeing this on Ubuntu 14.04. I was running 14.04 on a VirtualBox VM and it worked. I moved to a fresh Ubuntu machine and it worked for a while until I saw this. The versions that I recorded where things weren't working:
Ubuntu 14.04
node 5.4.1
npm 3.6.0
node-inspector 0.12.5
Chrome 48.0.2564.97 (64-bit)

It worked great on
Ubuntu 14.04
node 0.12.7
npm 2.11.3
node-inspector 0.12.5

But I reverted to those versions on my new system and it still doesn't work.

Of note: I uninstalled NI and ran into the node-gyp stuff that is referenced in issue 785, but the -unsafe-perm didn't help with any of the symptoms in this issue.

Edit:
I was using nodemon -v 1.8.1 when seeing this error ""nodemon --debug app.js"" + ""node-inspector"". I switched to node-debug ""node-debug app.js"" and it seems to be working for the moment. I had tried this earlier and it had the same problem, but possibly it was only on the newer versions mentioned above (?).

Edit 2:
I managed to get node-inspector working reliably. It will not run reliably when I use nodemon / node-inspector with chrome. What DOES work is to use node-debug, which pops up the new chrome window that is a bit different from my regular chrome window. I noticed that it does not have my Google sign in identity in the upper right. So I try incognito mode and that works fine! So there appears to be something going on with my chrome setup. I have ABP disabled on NI already. Not sure what is messing things up...
",ErikBrewster,
671,2016-02-12 13:19:06,"Same as @datanotion for me. Everything was working fine and now I'm seeing:

`Assertion failed: Unknown experiment canvasInspectionRuntime._assert @ Runtime.js:358`

**Update 22nd Feb 2016**:

My issue was caused because I was using the wrong url... not sure when this was updated. I was previously using a url like this:

<S_CODE_TOKEN>

Because it was saved in my browser history I just kept using that, and didn't realise the console was now spitting out a different url:

<S_CODE_TOKEN>

With the new url node-inspector loads fine.
",awolski,
670,2015-06-10 12:57:25,"Closes #604
",3y3,2015-06-10 15:01:42
670,2015-06-10 12:57:44,"@bajtos , please review.
",3y3,2015-06-10 15:01:42
670,2015-06-10 13:50:24,"LGTM.
",bajtos,2015-06-10 15:01:42
670,2015-06-10 15:01:42,"Landed as 07b09c6870d53a382c91351553d311a8f4e59cce
",3y3,2015-06-10 15:01:42
669,2015-06-10 12:42:21,,3y3,2015-06-10 14:58:20
669,2015-06-10 12:43:30,"@bajtos , please review
",3y3,2015-06-10 14:58:20
669,2015-06-10 13:49:59,"LGTM.
",bajtos,2015-06-10 14:58:20
668,2015-06-09 17:37:37,"node-inspector version: 0.10.1
browser version: chrome canary 45.0.2427.0
node version: 0.10.38
os: OSX 10.10.3

Steps to reproduce
 1) set a breakpoint on a function that is part of another module
 2) run code that hits breakpoint
 3) step into the code that jumps to another module
 4) observe that the UI is scrolled down with no way to scroll back up (note how the scrollbar is cropped off in pic, but browser scrollbar not present)

![screen shot 2015-06-09 at 10 32 34 am](https://cloud.githubusercontent.com/assets/392624/8064992/4f524662-0e93-11e5-9f85-a5668e67e1ba.png)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/21246148-debugging-controls-missing?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",bittersweetryan,
668,2015-06-09 17:42:01,"I confirmed that the behavior is not noticed on the stable version of chrome.  Will close for now, but will keep an eye to see if this propagates up the Chrome channels.  
",bittersweetryan,
668,2015-07-21 16:40:14,"I can confirm this happens on Opera Beta 31 and Chrome Dev 45 now too.
",sheepsteak,
668,2015-07-29 10:57:00,"Also happening using the following environment...

Chrome 44.0.2403.125
Node 0.12.7
Inspector 0.11.2
",si-harps,
668,2015-07-29 11:06:47,"Ok, I've removed a bunch of chrome extensions and it seems to have fixed the issue. If i remember correctly the extensions i have binned are as follows...

Hola
Postman REST Client (in browser)
PHP Console
Cookie Editor

Possibly more, the extensions i still have running are...

Adblock
JSONView
Google Docs
Postman
XML Tree
Lorem Ipsum Generator

I hope this will help someone
",si-harps,
668,2015-07-29 22:01:48,"I see it, too.
Ubuntu 14.10
Chrome 44.0.2403.107
Node 10.25
Node inpector 10.1

Edit:
Upgraded to node-inspector 12.1
Did the following:
- close chrome and reopen
- Open http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858 in chrome
- can see sources ok.
- Open my app in chrome and open js debugger window. Looks ok
- Go to page with breakpoints in my app (in chrome) and the message asking if I am serving locally pops up and the controls go off the top of the screen. Note I didn't touch node-inspector in this step. A quick look at node-inspector shows nothing changed (controls still showing).
- Trigger a breakpoint in node-inspector. It shows the breakpoint fine -- controls still showing. Hit F8 to continue and the controls go off the top of the screen.

Not sure if this is a node-inspector bug or a chrome debugger bug, but it sure causes problems.

Edit again:
Trying same system as above:
- Trigger breakpoint in node-inspector
- note that breakpoint pane (below watch, call stack, scope variables) is open
- note that controls are hidden
- hide (click on arrow) breakpoint pane
  - controls show fine now
- Click back and forth between network and sources tab in upper left. Note that it's fine
- open breakpoint pane again. Click back and forth between network and sources tab and the controls hide

For now, I'm just leaving the breakpoint pane closed
",ErikBrewster,
668,2015-07-29 23:01:10,"Unfortunately I need to update NI frontend to fix this problem.
It's a pained process, but this is a main target for 0.13.0 release.
",3y3,
668,2016-02-16 04:36:20,"As a guess, is https://code.google.com/p/chromium/issues/detail?id=341310 related to this?

When inspecting the inspector (#meta), I'm seeing some containers that seem a lot larger (in height) than they should be, given the constraints of the parent (they seem to be setting their height based on the contained content, despite having `flex-grow`, `flex-shrink` equal to `1` and being in `display: flex` containers with `flex-direction: column`.

I can pretty reliably trigger the bug just by having enough files in the file view to push things past the viewport height; the `overflow: hidden` on `.root-view` means that once the viewport is scrolled to some strange position because of focus, it's not possible to scroll it back. I tried changing it to `overflow: auto` in-place, but the source viewer got very strange regarding nested scrolling behavior (seems like it does some dynamic scrolling code of its own, which assumes that the outer container has fixed scroll).
",henryptung,
667,2015-06-09 10:05:48,"When I start node-inspector using `./bin/inspector.js --web-port=8092` and then navigate to myserver:8092/debug?port=6677 from a remote machine, it redirects me to http://127.0.0.1:8092/debug?ws=127.0.0.1:8092&port=5858 . This makes remote debugging impossible.

I'm using node v0.10.32, node-inspector 0.10.1. It last worked properly in node-inspector 0.9.2. In 0.10.0 it redirected to [Object object](issue #625). node-inspector is running in an Ubuntu VM; the client is in Windows 7.
",david-knipe-hp,2015-06-10 14:58:20
667,2015-06-10 12:24:22,"Will be fixed in 0.10.2 or 0.11.0

As workaround you can use:
`./bin/inspector --web-port=8092 --web-host=myserver`
",3y3,2015-06-10 14:58:20
666,2015-06-07 11:05:17,"Lots of programs have verbose modes which can help debugging and allow for informed bug reports. For example, ssh -vvv (super verbose), or npm set config loglevel={silent to silly}. Node itself has a fair number of logging options. Is there a verbose mode? Would it make sense to have one? 
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/20805446-verbose-logging-mode?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jcrben,
666,2015-06-10 11:53:55,"We use `debug` module in node inspector for extended logging.
Are you want something like [this](https://github.com/node-inspector/node-inspector/wiki/Debug-logs)?
",3y3,
666,2015-07-26 20:58:01,"Sorry for the delay, I wandered over to WebStorm for my server-side debugging for a bit but that's not all roses either. This logging is exactly what I'm looking for, although I can't get it to run properly. Could you provide an actually running example? I tried:
1. First, I tried the example: `DEBUG=node-inspector* node-debug notify.js`. I received feedback (`Node Inspector is now available from http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858
   Debugging notify.js`) but when I loaded that up I just got a blank DevTools page.
2. I guessed around a bit and tried `DEBUG=node-inspector* node-inspector notify.js` and I was able to get the log, but I'm getting the error: `node-inspector:protocol:devtools backend: {""id"":10,""error"":""ErrorNotConnected: Error: connect ECONNREFUSED. Is node running with --debug port 5858?""} +2ms`
3. I grabbed the pid and issued `kill -s USR1 [pid]`, but when I went to `http://127.0.0.1:8080/?ws=127.0.0.1:8080&port=5858`, nothing loaded, it just hung (`Waiting for 127.0.0.1`...).

Also, what do you think about featuring this more prominently, such as the front page or contributing section? I think a reporting issues section in the front-page README which points this out and suggests posting a gist with the log could be helpful.
",jcrben,
665,2015-06-07 10:57:08,"Also see if you can make that spinner clearly fail when things are really not working out. As many have commented, node-inspector can take a while to start. The --no-preload option is a helpful workaround but it's still best practice to have loading spinners. I also seem to get false starts or especially restarts from node-inspector. Not all the time, and I wish I had enough consistency to report an issue (verbose modes would be nice!), but enough to make it confusing.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/20805188-add-a-loading-spinner?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jcrben,
664,2015-06-05 15:03:42,"When I close stopped debugger in Chrome, Connected io.js app shows an error message saying ""abort has been called"". The error was from line 155 of debug-agent.cc. Occurs with any io.js app I run.
",vroad,2015-06-10 13:18:15
664,2015-06-10 13:18:15,"Duplication of #549
",3y3,2015-06-10 13:18:15
663,2015-06-05 07:42:44,"I experienced some troubles trying to run node-inspector, wish this was mentioned in README.
1) inspector uses Promise which is available since Chrome 32 only. I use older CoolNovo and got only a blank page and an error in console. So would be nice to mention exact minimal browser versions inspector runs on.
2) Then I ran a somewhat newer Chrome I already had on my PC. It was 38.0.2125.111 and it supported Promise but then I got ""Unknown experiment canvasInspection"" error so I had to toggle on chrome://flags/#enable-experimental-canvas-features. IDK if this is necessary for recent versions but it worths mention too.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/20622905-prerequisites-to-launch-node-inspector-in-readme?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",Fr0sT-Brutal,
663,2016-12-19 04:19:10,"This setting is not working on chrome 55, the error message canvasInspection still appears.
## error
<S_CODE_TOKEN>
Versión 55.0.2883.87 (64-bit)",diegoug,
662,2015-06-04 22:05:50,"<S_CODE_TOKEN>

The error lines from the output are: 

<S_CODE_TOKEN>

I don't appear to have node-pre-gyp installed but shouldn't it be installing that as a dependency? Maybe nvm is the culprit?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/20510516-install-fails-in-osx-10-10-2-node-0-12-4?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jcollum,
662,2015-06-04 22:26:17,"This may be related https://github.com/node-inspector/v8-debug/issues/7
",jcollum,
662,2015-06-05 10:44:27,"Same here.

Workaround: `sudo npm install -g node-inspector --unsafe-perm`
",xErik,
662,2015-06-05 21:52:08,"Thanks @xErik this workaround fixed my problem also.
",jlazerus,
662,2015-06-08 16:10:27,"I went  back to `v0.10.38` (via nvm) and tried to install node-inspector with -g and it installed with no problems. 
",jcollum,
662,2015-06-10 11:51:28,"@jcollum , is `sudo npm install -g node-inspector --unsafe-perm` helpful for you?
",3y3,
662,2015-06-10 17:54:46,"I generally avoid installing things with sudo (in node). Unsafe-perm also sounds like something to be avoided. It's fine, I nvm'd my node to 0.12.2 and it installed with no issues. 
",jcollum,
662,2015-06-14 22:35:24,"Can I close this as solved?
",3y3,
662,2015-06-14 22:55:03,"It's not solved. The workarounds involve downgrading to 0.12.2 or installing with sudo,  which is generally advised against. 
",jcollum,
662,2015-06-14 23:07:50,"I'm not very friendly with OSX can anyone explain me, why we need to use `sudo` and `--unsafe-perm` here? And why not all users on OSX should use this workaround, what is special here?
",3y3,
662,2015-06-24 16:40:35,"I am also seeing a very similar problem:

<S_CODE_TOKEN>
",jpbufe3,
662,2015-08-28 01:00:09,"I am getting this in Debian linux as well inside a Docker container, which runs npm as root in this case.
",duro,
662,2015-08-28 01:01:29,"The work around does work for me, but it also seems like not something that should be accepted as done
",duro,
662,2015-09-09 19:48:58,"I'm seeing a similar problem with v8-profiler.  Any advice?

[nw-html-client (new-file-structure)]$ sudo npm install -g node-inspector --unsafe-perm
Password:

> v8-profiler@5.3.0 preinstall /Users/charlesweinberger/.node_modules_global/lib/node_modules/node-inspector/node_modules/v8-profiler
> 
> v8-debug@0.5.2 preinstall /Users/charlesweinberger/.node_modules_global/lib/node_modules/node-inspector/node_modules/v8-debug

\

> utf-8-validate@1.2.1 install /Users/charlesweinberger/.node_modules_global/lib/node_modules/node-inspector/node_modules/ws/node_modules/utf-8-validate
> node-gyp rebuild

  CXX(target) Release/obj.target/validation/src/validation.o
  SOLINK_MODULE(target) Release/validation.node
  SOLINK_MODULE(target) Release/validation.node: Finished
npm WARN engine xmlbuilder@2.2.1: wanted: {""node"":""0.8.x || 0.10.x""} (current: {""node"":""0.12.7"",""npm"":""2.10.1""})

> bufferutil@1.2.1 install /Users/charlesweinberger/.node_modules_global/lib/node_modules/node-inspector/node_modules/ws/node_modules/bufferutil
> node-gyp rebuild

  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
  SOLINK_MODULE(target) Release/bufferutil.node
  SOLINK_MODULE(target) Release/bufferutil.node: Finished

> v8-profiler@5.3.0 install /Users/charlesweinberger/.node_modules_global/lib/node_modules/node-inspector/node_modules/v8-profiler
> node-pre-gyp install --fallback-to-build

sh: node-pre-gyp: command not found

> v8-debug@0.5.2 install /Users/charlesweinberger/.node_modules_global/lib/node_modules/node-inspector/node_modules/v8-debug
> node-pre-gyp install --fallback-to-build

sh: node-pre-gyp: command not found
npm ERR! Darwin 14.3.0
npm ERR! argv ""node"" ""/Users/charlesweinberger/.node_modules_global/bin/npm"" ""install"" ""-g"" ""node-inspector"" ""--unsafe-perm""
npm ERR! node v0.12.7
npm ERR! npm  v2.10.1
npm ERR! file sh
npm ERR! code ELIFECYCLE
npm ERR! errno ENOENT
npm ERR! syscall spawn

npm ERR! v8-profiler@5.3.0 install: `node-pre-gyp install --fallback-to-build`
npm ERR! spawn ENOENT
npm ERR! 
npm ERR! Failed at the v8-profiler@5.3.0 install script 'node-pre-gyp install --fallback-to-build'.
npm ERR! This is most likely a problem with the v8-profiler package,
",chuckweinberger,
662,2015-09-17 09:18:13,"Same here , any work-around? NPM supposes to be next generation package management software, not to go through all the problems we have with YUM, apt-get etc. etc., back to where we were!
",CoreSoft2,
662,2015-11-06 13:39:07,"Same here! OSX 10.11.1 NPM v3.3.6 Node v5.0.0 
",hugowschneider,
662,2016-01-18 19:59:03,"Same issue here.
",granteagon,
661,2015-06-04 18:00:53,"I'm using `nvm` to switch between versions and in v0.12.0 I'm able to expand variables in the right sidebar (variables in scope, watched expressions, etc) when breaking on a line. However, if I switch to use Node v0.12.4 I am unable to expand those variables. The code does break correctly, but when I click on a variable in the sidebar nothing happens. If I double click it let's me ""edit"" the value of a variable as if it were a string (I get a text box).

I was testing this with a simple http server using only core modules (`http` and `url`), doesn't appear to be a problem in my code since things work fine with the same app in v0.12.0.
",jakerella,2015-06-04 18:13:42
661,2015-06-04 18:13:42,"Argh... npm had cached an old version of node-inspector (0.7). Ignore this!
",jakerella,2015-06-04 18:13:42
660,2015-06-04 12:16:29,"On error I can't see the stack trace and the link to the file doesn't open the file and line. It opens on a new tab, which doesn't work.

https://www.dropbox.com/s/q9zphsr5whmkrpv/Screenshot%202015-06-04%2014.12.48.png?dl=0
",JoJordens,2015-06-14 22:36:02
660,2015-06-14 22:36:02,"Fixed in 0.10.2
",3y3,2015-06-14 22:36:02
659,2015-06-02 18:44:38,"Hello, consider the following example:

<S_CODE_TOKEN>

After the second command I get the following stdout:

<S_CODE_TOKEN>

After the third command:

<S_CODE_TOKEN>

After I open up node-inspector in chrome `Version 43.0.2357.81 (64-bit)` I see an empty dev tools without any code, on the other hand it totally froze my koajs server i sent the signal to. After a while in the terminal window where i started node-inspector there will be an error: `Cannot send response - there is no front-end connection.`

There is an open [source project](https://github.com/iam4x/isomorphic-flux-boilerplate) you can reproduce the problem yourself. What you should know about it is, it runs koajs (es6 generators) and also uses [babel require hook](https://babeljs.io/docs/usage/require/).

After a while I will also see a bunch of errors in the dev tools console on http://127.0.0.1:8080/debug?ws=127.0.0.1:8080&port=5858.

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/19825884-usr1-signal-method-issues?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",tsm91,2016-04-08 22:20:22
659,2015-06-11 21:12:38,"Hi, I'm getting the same error, Cannot send response - there is no front-end connection.

it's like if the code of the main app were not visible to node-inspector.... Without any change yesterday it worked, but today, don't, I'm using virtual machines, so I think that this thing is related with the start order and params... but I haven't found till now the exact solution....
",iasinDev,2016-04-08 22:20:22
659,2015-06-11 21:15:38,"wow, solution in minutes! XD, while I was writting the post, I left open the browser, and after a few minutes it worked, so the thing was.... if there is no connection just do nothing, just wait 30 seconds more...
",iasinDev,2016-04-08 22:20:22
659,2015-06-14 22:38:40,"Can you try to run `node-inspector --no-preload`. Is this solves 30 seconds issue?
",3y3,2016-04-08 22:20:22
659,2015-06-15 22:20:49,"Great! Yes... I understand how node-inspector works. Yes, it started instantly with node-inspector --no-preload, but I wanted to debug controller *.js files, so I had to wait also till all files were load, but despite of this, I think that load all by the half of time, thank you!
",iasinDev,2016-04-08 22:20:22
658,2015-05-31 22:05:04,"No issue...wrong repo. 8-)
",fourlincoln10,2015-05-31 22:07:19
657,2015-05-28 00:44:12,"After trying `npm i -g node-inspector` and `node-debug index.js` where `index.js` only contains `console.log('test')` I get a blank source and the script appear to fail to run:

![node-inspector](https://cloud.githubusercontent.com/assets/99604/7850396/b0d33344-0496-11e5-99b6-27e92d3e5c19.gif)

I'm on OSX 10.10.3 using Chrome 43.0.2357.81
I tried with io.js `2.1.0` and `1.8.2` and Node.js `0.12.4` (and re-installing node-inspector each switch).
I tried node-inspector `0.10.1` and `0.8.3`

I also tried with `--target` doing: `npm i -g node-inspector --target=1.8.2` (which installed with `--target=1.8.2` but still had the same issue; it did not even install using `--target=2.1.0`).

---

The only way I was able to get it working was by installing Node.js `0.10.38` and node-inspector `0.10.1`.

Thanks for your help!
",shama,2015-10-18 18:40:14
657,2015-05-28 06:56:05,"Hello @shama , you can do the following:
1. Run `node-inspector` in first shell and `node --debug-brk test` in second.
Is there any errors in first shell?
2. If there is no error in first step, can you please follow [this instruction](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide#reverse-engineering-the-front-end)
3. How long app starts up on 0.10.38?
",3y3,2015-10-18 18:40:14
657,2015-05-28 08:16:31,"@3y3 Thanks for your help!
1. Ran both of those and no errors in the first shell (running `node-inspector`)
2. Here is the output I get running `DEBUG=node-inspector:protocol:* node-inspector`: https://gist.github.com/shama/ebc5063878499422b273
3. It's not immediate but the source appears ~ 2 seconds.
",shama,2015-10-18 18:40:14
657,2015-05-28 09:07:33,"Hm... This looks like a problem with connection to debugged app.
I receive the same trace log, if I run node-inspector without debugged app.
I don't know, what else I need at current time for debugging...
Are you ready to modify node-inspector sources?
",3y3,2015-10-18 18:40:14
657,2015-05-29 00:26:25,"@3y3 Sure! I'll dive into the source and see if I can find out where it's failing.
",shama,2015-10-18 18:40:14
657,2015-06-09 16:00:37,"I don't know for sure if I'm having the same problem, but it seems similar. node-inspector used to work great but now it's doing this thing most of the time where the interface loads but does nothing, remains completely blank. My environment:

node 0.10.32 / node-inspector 10.0.0 / 10.0.1 running on Ubuntu 12.04.
Debugging remotely from Windows 7 x64 / Chrome 42 on different physical machine on same local network.

<S_CODE_TOKEN>

Since I updated Chrome to v41 it started exhibiting frequent DNS failures and I recently ran Fiddler (debugging proxy) to see if it could reveal anything, and just running it seems to sidestep the Chrome DNS failures, so I've been running it since. I mention it in case it's relevant somehow, but as I said the interface loads, just nothing within it. And I believe I've had it function normally at least once with Fiddler running.
",jmm,2015-10-18 18:40:14
657,2015-06-09 16:09:11,"I don't know if it's relevant, but I'm also getting this in Chrome console:

<S_CODE_TOKEN>
",jmm,2015-10-18 18:40:14
657,2015-06-10 12:31:13,"@jmm , do you have `fiddler` enabled permanently?
I know one shadow issue about `fiddler + web sockets`.
",3y3,2015-10-18 18:40:14
657,2015-06-10 12:43:57,"@3y3 Thanks for the reply. Lately I've been running `fiddler` continuously. I'm not sure if that's what you mean by permanently. Chrome is so messed up that if I disable `fiddler` and try to open the `node-inspector` URL, I immediately get this `net::ERR_NAME_NOT_RESOLVED` error that I get rampantly (since moving from Chrome v36 [I think] to v41) when `fiddler` isn't running.

> I know one shadow issue about `fiddler + web sockets`.

Do you know of something I can / should do to configure `fiddler` to work with `node-inspector`? Would following those instructions you linked to shed more light on my problem? I believe I've had it work at least once with `fiddler` running, but I can't say for certain.
",jmm,2015-10-18 18:40:14
657,2015-06-10 13:01:07,"> I immediately get this net::ERR_NAME_NOT_RESOLVED error that I get rampantly (since moving from Chrome v36 [I think] to v41) 

Can you give me a screenshot with this error.

> Do you know of something I can / should do to configure fiddler to work with node-inspector? 

Unfortunately I don't know any solution here.

I also wonder to see [debug log](https://github.com/node-inspector/node-inspector/wiki/Debug-logs) . It will be helpful.
",3y3,2015-10-18 18:40:14
657,2015-06-10 13:29:56,"@3y3 Thanks very much for your help. It sounds like the same symptoms, but in case the cause of my problem is different I don't want to squat on @shama's issue, so I opened #671 to pursue mine further. I started with a recap of the basic info I posted here and I'll be posting additional information.
",jmm,2015-10-18 18:40:14
657,2015-10-18 18:40:14,"Closing as this seems to be fixed with node-inspector `0.12.3` and node.js `4.0.0`. Thanks!
",shama,2015-10-18 18:40:14
656,2015-05-27 16:47:10,"Kind of a follow-up to https://github.com/node-inspector/node-inspector/pull/655.

One of the useful features in bugger was using the Timeline tab to get a high-level idea about the behavior of a web application. It displayed timers, network events, memory usage over time, and added support for [`console.timeStamp`](https://developer.chrome.com/devtools/docs/console-api#consoletimestamplabel) inside of the inspected process.

One example where this is useful is to get an idea of GC behavior for the process (seeing where GC starts kicking in etc.). Or just debugging race conditions without having to stop the process at breakpoints, potentially removing the race condition.

If that sounds worth having in node-inspector, I could work on porting it over once the network stuff is in place.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/18152762-support-for-timeline-tab?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",jkrems,
656,2015-10-12 17:16:26,"I would love to see this feature! 
",devnill,
655,2015-05-27 05:01:45,"Original issue: https://github.com/node-inspector/node-inspector/issues/341

Based on [bugger's network probe](https://github.com/buggerjs/bugger-agents/blob/master/lib/agents/network.probe.js). The rest is basically one big copy&paste job of `ConsoleAgent`.

I kept this PR as small as possible because messing with the `http` module is prone to break people's code in edge cases. Tests against real-life code more than welcome.
",jkrems,2015-06-17 00:41:59
655,2015-05-27 07:30:53,"@jkrems , great job!

After fast review I have one idea:

<S_CODE_TOKEN>

If this code was called before wrapping, we can't handle this requests, because user already has closure on original `request` func.
It may be reasonable to wrap something more private. Maybe [http.ClientRequest](https://github.com/joyent/node/blob/master/lib/http.js#L48)
",3y3,2015-06-17 00:41:59
655,2015-05-27 14:12:14,"Well, `request` has a closure over `ClientRequest`. So if a user already has a closure over `request`, they also have one over `ClientRequest` (at least indirectly). It might be possible to change the code of `request` itself at runtime, but that would make me a bit nervous. ;)

To actually answer the question: post `request` we enter the realm where there are quite a few differences across node versions because the http/https split caused some bigger refactoring IIRC. So any instrumentation of those private parts might become very fragile very quickly. As I wrote above: I'd really like to keep this as simple as possible to reduce the risk of breaking people's code. Unfortunately in this case it implies that attaching to a running process (no debug-brk) might prevent network inspection.
",jkrems,2015-06-17 00:41:59
655,2015-05-28 09:47:43,"> Well, request has a closure over ClientRequest.

Ok, you are right here, but I don't stop to search an other place =)

So, I found [_deferToConnect](https://github.com/joyent/node/blob/master/lib/_http_client.js#L511), it exists on all versions. (We shouldn't worry about compatibility with future versions here, only check that this function exists. I know what `http` module can be completely rewritten in nearest time.)

There are all that we need for `data` construction (correct me if I'm wrong), but making stack trace will be more difficult. In this case we need to wrap only one place:

<S_CODE_TOKEN>

How about this?
",3y3,2015-06-17 00:41:59
655,2015-05-28 15:36:49,"Hehe, nice find. I didn't look too deeply into it but it doesn't look like `options` is stored anywhere on the instance of `ClientRequest`. So if we'd want to correctly reconstruct the original URL (and that's only one of the pieces of data) we'd need:
1. Find out the hostname. The client request doesn't store it. `Host` header is unreliable because it doesn't have to match the actual host (e.g. host-spoofing)
2. Find out the remote port. From reading the constructor I don't even know where to start to get that one, especially given that we'd want to send `requestWillBeSent` if a dns lookup fails etc.. Failing requests are as or maybe even more interesting.

That last part also brings up the question - is there a guarantee that `_deferToConnect` is called? What if socket pooling is used and a hard timeout on the request to `.abort()` if a socket can't be acquired after a few millis?

Sorry if I sound defensive here. I totally get that you'd love to get a more reliable/flexible http instrumentation working. It's just that the code in this PR (or at least variations of it) is something that I'm fairly confident works and is reliable to the point where I know of apps using it in production for outgoing http request logging. I could try to dig deeper into http core and research if there's an alternative that also handles the case where someone already has a reference to `request`. But unfortunately I won't get to around to that anytime soon. :( That being said - I'm happy to test and give feedback on other solutions!
",jkrems,2015-06-17 00:41:59
655,2015-05-29 02:23:02,"I am excited to see this finally coming. This is great! So I tested the against one of our project, very glad to see the network requests showing up in the network tab!

I also noticed some potential bugs
- network frontend stop working if header value is not a string (eg. content-length). network manager is calleing a split on header value [here](https://github.com/node-inspector/node-inspector/blob/master/front-end/sdk/NetworkManager.js#L162)
- when I restart node-inspector, the network request is doubled.
- the `options` in the hijacking request seems not quite matching the one in [http request api](https://nodejs.org/api/http.html#http_http_request_options_callback), which leads to hostname showing as the request url.

Hope this helps!
",GingerBear,2015-06-17 00:41:59
655,2015-05-29 02:31:18,"@GingerBear Thanks for giving it a spin! Will look into those issues!
",jkrems,2015-06-17 00:41:59
655,2015-05-31 04:26:46,"Quick update: Pushed an update that adds the missing string cast for the headers. Also included a change to explicitly remove the instrumentation on disconnect, hoping that will fix the doubling issue. Unfortunately I wasn't able to reproduce it myself.

@GingerBear Do you have an example for the `options` object where the url is messed up? I'm assuming it's caused by the `host`/`hostname` weirdness in `url.format`. But I can't recall exactly how to trigger it.
",jkrems,2015-06-17 00:41:59
655,2015-06-01 00:15:28,"@jkrems sure, here is an example. May not be the best one, but you can see only www.google.com show in the network tab when you go to http://localhost:4000/intl/en/about/ . Btw, it seems to be fine using [request](https://github.com/request/request) to send request. 
I am still seeing the double logs. For the same example, refresh the inspector couple times and load the web page again, I was able to see the doubling in the network tab.

<S_CODE_TOKEN>
",GingerBear,2015-06-17 00:41:59
655,2015-06-01 06:39:50,"> I am still seeing the double logs.

@jkrems , don't worry about this. This is out of scope of your pr.

Your `.on('close')` handling is reasonable.
",3y3,2015-06-17 00:41:59
655,2015-06-08 04:47:20,"@GingerBear Thanks! The code wasn't handling that `protocol` is optional. Pushed an update that should fix this.

Sorry for the slow reaction time. Busy week.
",jkrems,2015-06-17 00:41:59
655,2015-06-17 00:41:59,"Closing in favor of #677
",jkrems,2015-06-17 00:41:59
654,2015-05-26 10:01:15,"Implements #566.
",marcominetti,2015-06-10 11:38:22
654,2015-05-26 10:47:26,"@3y3 there are a couple of todos before ready to be merged...
1. sourcemap support ;)
2. test with eval code
3. we could add it as front-end plugin? (I still need to review your plugin system pr after this is done...)
",marcominetti,2015-06-10 11:38:22
654,2015-05-26 11:05:43,"> we could add it as front-end plugin?

No, I'd prefer to have it as a core feature.

> test with eval code

We badly handle an evaled code at current time. So, if there are some hard bugs, dont' worry about this.
",3y3,2015-06-10 11:38:22
654,2015-06-01 21:33:50,"@3y3 to enable sourcemap support I had to expose a couple of CompilerScriptMapping private properties to ""target"" objects... Ready for review...
",marcominetti,2015-06-10 11:38:22
654,2015-06-02 12:42:01,"Reviewed. Read my inline comments.

In order not to waste your time on refactoring I can propose (I don't tested this code):

<S_CODE_TOKEN>
",3y3,2015-06-10 11:38:22
654,2015-06-08 08:46:57,"@3y3 I've removed _getTargetData not working. Just use currentFrame._target. Tested against sourcemapped files... I'm having wrong columns numbers but I think it's related to crazy sourcemaps...
",marcominetti,2015-06-10 11:38:22
654,2015-06-10 11:38:22,"@marcominetti , I made some changes before merging:
- removed `Click here to inspect.` from message
- removed `title = 'Debugger paused';`
- added `tag` option to prevent messages duplication.

Landed as ca58013de3579665812dbeef403aae461ce7c08b

Great thanks for contribution!
",3y3,2015-06-10 11:38:22
653,2015-05-25 23:36:53,"For each and every assertion I make (e.g. `console.assert(foobar === true, 'foobar is not true')`), I'm seeing a log message that my assertion failed even when the assertion did not fail.

You can see a perfect example of this in the screenshot where it says that `true` failed the assertion.

![screen shot 2015-05-25 at 7 34 50 pm](https://cloud.githubusercontent.com/assets/554881/7803104/4eba5890-0315-11e5-807e-a0a3015e51cf.png)
![screen shot 2015-05-25 at 7 35 02 pm](https://cloud.githubusercontent.com/assets/554881/7803105/4ebcdbc4-0315-11e5-87ec-ee1642c99849.png)
",hrdwdmrbl,2015-06-14 21:46:19
653,2015-05-26 14:56:10,"This also seems to be causing some major slowness for me. Maybe it's the large amount of logging that is happening but IMHO it isn't that much logging.

Anyway, for now to get around this weird failing assertion business, I have re-defined the assert function to an empty function `console.assert = function(){};`.
",hrdwdmrbl,2015-06-14 21:46:19
653,2015-06-14 21:46:19,"Fixed in 0.10.2.
Feel free to reopen this issue, if I'm wrong here.
",3y3,2015-06-14 21:46:19
653,2015-06-14 21:51:29,"Okay thanks! Do you think that your fix addresses the slowness issue? I haven't tested the fix yet.
",hrdwdmrbl,2015-06-14 21:46:19
653,2015-06-14 22:22:06,"> Do you think that your fix addresses the slowness issue?

No, there is no fixes for slowness issue. (I need more info about this issue, if it is critical for you)
",3y3,2015-06-14 21:46:19
653,2015-06-16 19:22:20,"Looks like it was fixed. It was probably only due to the failing-ish-ness of the assertions. Thanks again!
",hrdwdmrbl,2015-06-14 21:46:19
652,2015-05-22 18:36:41,"I can't seen to get node_modules to show up in the stack.

I'm trying to debug a node_module that I'm having trouble with, but all the other node module functions in the stack are hidden from me, so my debugging is very contrained.

I've attacked an image of my stack, and a screenshot of as far back in the stack I can go.
![screen shot 2015-05-22 at 2 33 13 pm](https://cloud.githubusercontent.com/assets/554881/7777265/a7257fa6-008f-11e5-8040-3c0adab7de2d.png)
![screen shot 2015-05-22 at 2 33 18 pm](https://cloud.githubusercontent.com/assets/554881/7777266/a731f8da-008f-11e5-8604-b3ae40f34064.png)

I have tried running with `node-debug --cli --hidden='[]' server.js` but that didn't do it...
",hrdwdmrbl,2015-05-22 20:38:16
652,2015-05-22 19:08:09,"I think you work in directory without package.json? Is it right?
",3y3,2015-05-22 20:38:16
652,2015-05-22 19:18:40,"> I think you work in directory without package.json? Is it right?

Nope. I'm running a regular node.js application, complete with a regular package.json file. In the screenshot, I'm inside one of my node_modules (node-openid to be specific).
",hrdwdmrbl,2015-05-22 20:38:16
652,2015-05-22 19:35:14,"Hm... Maybe problem is placed in localStorage? Can you clear localStorage for Node Inspector tab?
",3y3,2015-05-22 20:38:16
652,2015-05-22 20:38:16,"Well, I think that fixed it for me. Alright then, thanks :D
",hrdwdmrbl,2015-05-22 20:38:16
652,2015-05-26 16:10:39,"I think there might be an issue when the same instance of Chrome is used multiple times. I didn't like opening and closing chrome each time, so i just left it open, used the `--cli` option and refreshed each time I restarted node-inspector. But then this issue occurs. So now I've given in and close the browser each time I restart the debugger. Would it be helpful if I posted the contents of my localStorage when the issue occurs?
",hrdwdmrbl,2015-05-22 20:38:16
651,2015-05-21 15:01:44,"On `OSX Yosemite 10.10.3` I'm running `node v0.12.0` with `node-inspector v0.10.1`. I set a breakpoint which catches properly, but I have no details on any variables or the call stack. I'm running `node-debug server/server.js --debug-brk --no-preload`. Not sure what I'm doing wrong. Any ideas?

![screen shot 2015-05-21 at 10 53 56 am](https://cloud.githubusercontent.com/assets/84247/7751540/98cedff2-ffa8-11e4-9162-5f42e8cdf645.png)
",Bramanga,2015-05-21 15:19:03
651,2015-05-21 15:19:03,"Never mind. The breakpoint wasn't getting called. PEBKAC.
",Bramanga,2015-05-21 15:19:03
650,2015-05-20 19:36:41,"Hi, maybe I don't understand completely what is going on but I've noticed that strings are being retained when they are passed to `console.log`.

I'm running `io.js v2.0.1`.

<S_CODE_TOKEN>

This script produces the following heap timeline:

![screen shot 2015-05-20 at 21 30 31](https://cloud.githubusercontent.com/assets/3694962/7734629/b6ef48f8-ff37-11e4-8930-8d3d10aa10a9.png)

As you can see, all the strings are being retained.

I wonder if this is expected behaviour or if it's a bug with node.js or node-inspector. If you change `console.log` to `process.stdout.write`, it doesn't leak:

<S_CODE_TOKEN>

Here is the heap timeline:

![screen shot 2015-05-20 at 21 35 27](https://cloud.githubusercontent.com/assets/3694962/7734699/2d327756-ff38-11e4-9ebe-eaf5823b012f.png)
",maximilianschmitt,2016-02-07 17:31:31
650,2015-05-20 19:53:50,"This is expected behavior:
We wrap all console functions, this allow us to translate all console output to web interface.
We don't wrap stdout itself, because it is out of scope of DevTools API.
So when you use console.log(object), we need to store this object in memory as long as it is possible.
To delete it from memory use `clear` button in console tab.
",3y3,2016-02-07 17:31:31
650,2015-05-20 19:58:41,"In other words this is expected controllable memory leak.
There are some discutable points:
1. It maybe reasonable to allow users to disable console wrapping, for clear memory testing. (Allow users to disable any injectable feature by name)
2. This is hard in realisation but may be reasonable to hide all mirror objects in heap snapshot. I need to inspect how this realised in webkit.
",3y3,2016-02-07 17:31:31
650,2015-05-28 02:02:23,"Hey! Thanks for the fast response! :)

It's good to know that this is expected behaviour. I wish I could add something to the discussion but I'm afraid I don't know too much about debugging tools and V8 internals. Although having the ability to somehow disable the console-related leaks would be something I would use as I primarily use node-inspector for memory profiling.
",maximilianschmitt,2016-02-07 17:31:31
650,2016-02-07 17:31:31,"Released some versions ago.
Usage `--no-inject.console`, `--no-inject.network`, `--no-inject.profiles`
",3y3,2016-02-07 17:31:31
649,2015-05-20 08:03:29,"I already updated `v8-debug` and `v8-profiler` to use `win_delayed_load_hook` in build.
After this update we can debug iojs app started from `node` alias.

But problem for Electron (atom-shell) still exist. https://github.com/nodejs/io.js/issues/1738
In other words `npm i node-inspector --target=1.6.3` is not helpful for electron.

Work in progress.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/16129452-debugging-electron-on-windows?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",3y3,
649,2015-09-28 22:02:41,"So this is a Windows-only issue? If I were to try this on Linux it would work fine?
",codecat,
649,2015-11-29 14:29:25,"Is there any update with this?
I am using **electron-v0.35.1-win32-x64** and getting the same error:
""Error: Cannot find module **'..\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.5.4\node-v46-win32-x64\debug.node'**""
",yohaia,
649,2016-01-06 08:11:03,"It is possible to debug electron if you start node-inspector using electron.

See https://github.com/atom/electron/pull/4004

this bug is also duplicated at #774 and #730 

Feedback welcome on the PR if someone has trouble following the instructions.
",lukeapage,
648,2015-05-18 16:14:27,"@3y3 This keeps proper source file names, but creates fake ""loaded"" scripts... I think the problem should be addressed at transpiling level (Babel, etc): I don't think it's fair to generate in-memory sources with same file names... (maybe in sourcemap v4 spec could be added a proper way to handle in-memory transpiling)...
",marcominetti,2015-06-14 20:25:50
648,2015-05-19 14:06:04,"Ok. At current step I like my changes in `ScriptFileStorage` and your changes in `front-end`.
Next step - discussion about renaming files...
I think that all renamings is out of scope of node-inspector.
We can't solve existed situation correctly (this is an issue for babel), but we also can't to add dirty fix.

If we leave only changes in `ScriptFileStorage` and in `front-end` this would work for correct sourcemaps. @marcominetti , are you agree?

<S_CODE_TOKEN>

One other thing. There are inlined sources. So at current time we prevent requiring of inline sourcemap, but we can also prevent requiring of inline sources which stored in inline sourcemap (or it already works?).

[Source Map Revision 3 Proposal](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.hval2vfopveu)
",3y3,2015-06-14 20:25:50
648,2015-05-19 14:20:17,"`If we leave only changes in ScriptFileStorage and in front-end this would work for correct sourcemaps. @marcominetti , are you agree?`

I do agree. ;)

`One other thing. There are inlined sources. So at current time we prevent requiring of inline sourcemap, but we can also prevent requiring of inline sources which stored in inline sourcemap (or it already works?).`

I've not tested specifically but it should already work... I use babel and uglify to build an app boot pack for node and front-end resource tree correctly lists original (virtual) source code... with not-inlined sourcemap the code is read from sourcemap sourcesContent property...
",marcominetti,2015-06-14 20:25:50
648,2015-05-19 14:24:55,"@3y3 please think about changing the ""map"" prefix to extension for inline mapped files... having a real source file with name ""xxx.map.js"" is not impossible... maybe a **map**?
",marcominetti,2015-06-14 20:25:50
648,2015-05-19 14:39:20,"@3y3 I reverted my changes to backend and added a fix to latest front-end that was breaking not-inlined sourcemap.
",marcominetti,2015-06-14 20:25:50
648,2015-05-23 13:47:40,"Fixes #628 and #580 ... original source code for ""name.ext"" will be available as ""name.source.ext""
",marcominetti,2015-06-14 20:25:50
648,2015-05-23 17:24:04,"@marcominetti , read also https://github.com/babel/babel/pull/1587
",3y3,2015-06-14 20:25:50
648,2015-05-25 10:47:32,"@3y3 that's exactly the workaround I use within my apps to avoid the issue.. I'll reduce this pr to front-end code only, ok?
",marcominetti,2015-06-14 20:25:50
648,2015-05-30 15:36:33,"@3y3 kept only the front-end fix, I've not yet identified if there's any data-uri parser that supports other then application/json;base64... IMO, we could merge and than extend support to full data-uri spec in the future...
",marcominetti,2015-06-14 20:25:50
648,2015-06-02 13:52:59,"@marcominetti , sorry for pending this. I don't have a time to work on source maps on this week, but I follow the work.
We also discussed about this bug with Bajtos in gitter chat, so I need to fix and extend my part of commits.

Don't worry about this now. I'll rebase and merge all important parts and I'll present it for your review.
",3y3,2015-06-14 20:25:50
648,2015-06-14 20:25:48,"@marcominetti , I landed it as be64d801ea8bbf418ba316a23610b16ad1a4f1cb with some minor changes.

Thank you for contribution!
",3y3,2015-06-14 20:25:50
647,2015-05-18 10:24:07,,3y3,2015-06-14 20:23:47
647,2015-05-25 15:00:22,"@bajtos , work in progress. This is not ready to review.
Big part of this pr will be deprecated.

Thanks for targetting to `strong-data-uri`
",3y3,2015-06-14 20:23:47
647,2015-05-26 10:54:11,"@3y3 @bajtos is reasonable to include browserified version of strong-data-uri or any replacement at front-end too for the https://github.com/marcominetti/node-inspector/blob/fix-sourcemaps-alternative/front-end-node/main/MainOverrides.js#L48?
",marcominetti,2015-06-14 20:23:47
647,2015-05-26 11:36:36,"> is reasonable to include browserified version of strong-data-uri or any replacement at front-end too for the https://github.com/marcominetti/node-inspector/blob/fix-sourcemaps-alternative/front-end-node/main/MainOverrides.js#L48?

IMO, it would be best to share the code handling sourcemaps between frontend and backend, so that they don't get out of sync. Using browserify is a possible solution.

Another option is to store inline sourcemaps on the server (backend) and replace the data URL in the source code with a URL pointing to a custom server handler that can serve the source map. That may make more sense in the case when the backend is already performing some sort of transformation/preprocessing of inline source maps.
",bajtos,2015-06-14 20:23:47
646,2015-05-16 19:19:00,"Using node v0.12.2 with node-inspector v0.10.1 I am unable to perform any type of profiling. The browser opens fine but when I try to Take Snap Heapshot the following error is displayed in the console:

<S_CODE_TOKEN>

Similar errors also occur for CPU Profile:

<S_CODE_TOKEN>

...and Record Heap Allocation:

<S_CODE_TOKEN>

I'm not sure where to look to provide more debug/detailed information but if someone can point me in the right direction I can provide more information. 
",TehNrd,2015-05-20 16:56:54
646,2015-05-20 08:13:02,"Is this happens in `--debug-brk` mode or in any mode?

I can expect this behavior if you started debugging like this:
`node-debug test.js`
and you tried to take snapshot immediately after browser opening. (In other words you don't press `continue` button in source tab)
",3y3,2015-05-20 16:56:54
646,2015-05-20 16:56:54,"Gosh....yup that was it. Didn't realize it paused on start. Selecting resume script button fixed this issue.

![screen shot 2015-05-20 at 12 54 34 pm](https://cloud.githubusercontent.com/assets/1007085/7731628/aa830584-feef-11e4-9498-aa5f4f9fb63e.png)
",TehNrd,2015-05-20 16:56:54
646,2015-08-07 11:51:22,"I had to attach inspector the existing running process so there are few more steps for those who have this issue:
1. After attaching to the running process it shows it as running but you need to ""pause"" and hit ""Resume"" again.
2. After hitting ""Resume"" you need to refresh the browser, wait  until the source code comes up and then you can take heap snapshots etc...
This is working on our AWS EC2 Instances.
",galblank,2015-05-20 16:56:54
646,2015-08-07 12:21:14,"@galblank , this is actual solution for NI 0.12.2 ?
I'm discouraged by step 1...
",3y3,2015-05-20 16:56:54
645,2015-05-15 22:02:09,"With the node-inspector started with the PC offline:

> >node-inspector
> Node Inspector v0.10.1
> Visit http://127.0.0.1:8080/debug?ws=127.0.0.1:8080&port=5858 to start debugging.

starting a process to debug hangs:

> >node --debug node_modules\karma-cli\bin\karma start
> Debugger listening on port 5858

The served page loads the inspector but not the debugging data and sources. Checking the console for the node-inspector shows:

> Request with id = 10 failed. ""ErrorNotConnected: Debugged process exited.""
>        InspectorBackendClass.AgentPrototype.dispatchResponse @ InspectorBackend.js:958
>        InspectorBackendClass.Connection.dispatch @ InspectorBackend.js:482
>        InspectorBackendClass.WebSocketConnection._onMessage @ InspectorBackend.js:690

Environment:
node v0.12.2 x64 on Windows 7 x64, running without an active network connection
<br/>
Please let me know any next steps to troubleshoot this. It's quite an inconvenience.
",seanpoulter,2015-05-16 17:51:23
645,2015-05-15 22:28:46,"How about

<S_CODE_TOKEN>
",3y3,2015-05-16 17:51:23
645,2015-05-16 03:14:09,"When running the following offline:

<S_CODE_TOKEN>

the same behaviour shows. Opening the served inspector in the browser hasn't loaded the source files. Although the Chrome console (for the inspector) does show an additional error id 25:

> Request with id = 10 failed. ""ErrorNotConnected: Debugged process exited.""
> &nbsp;&nbsp;&nbsp;&nbsp;InspectorBackendClass.AgentPrototype.dispatchResponse @ :8080/sdk/InspectorBackend.js:958
> Request with id = 25 failed. ""Error: Not implemented.""
> &nbsp;&nbsp;&nbsp;&nbsp;InspectorBackendClass.AgentPrototype.dispatchResponse @ :8080/sdk/InspectorBackend.js:958
",seanpoulter,2015-05-16 17:51:23
645,2015-05-16 09:48:07,"Oh, stop! You can reproduce this only if you don't have any network connections?
",3y3,2015-05-16 17:51:23
645,2015-05-16 16:22:37,"Yes 3y3, it works great otherwise. This only is a problem when the PC is not connected, as an example when the wifi drops. I was expecting this to work locally and not require the internet. Should it?
",seanpoulter,2015-05-16 17:51:23
645,2015-05-16 17:18:23,"I have the same error. This is a nodejs error in dns module. In other words dns can't resolve localhost in debugger connection when there is no connections.
This was fixed in iojs, but exists in 0.12.
To fix this problem on my machine I installed `microsoft loopback adapter`.
",3y3,2015-05-16 17:51:23
645,2015-05-16 17:51:23,"OK, thanks for confirming @3y3.

I opened an issue for node yesterday for dns resolvning localhost: joyent/node#25338, I just didn't know how to workaround it to confirm it was the same for this.
",seanpoulter,2015-05-16 17:51:23
644,2015-05-13 21:25:15,"![screen shot 2015-05-13 at 2 19 30 pm](https://cloud.githubusercontent.com/assets/462228/7621420/9efcadec-f97b-11e4-99db-7579110f277f.png)

I'm not really sure what is going on here. Also I am not 100% convinced this is a node-inspector problem. I figured I'd post this issue and someone can help determine that because it is really annoying:

As you can see in the screen shot we have a breakpoint on 548 and inspector is paused on line 554. This is after hitting the play button when starting with `mocha --debug-brk`.

@bajtos 
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/14720061-breaking-on-incorrect-line?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",ritch,
644,2015-06-01 17:55:54,"@ritch What are your Node and Node Inspector versions?
",bajtos,
643,2015-05-13 21:14:27,"<S_CODE_TOKEN>

I'm not sure how to reproduce this exactly, but these are the steps I took when the error occured:
1. `mocha --debug-brk`
2. `node-inspector`
3. opened inspector in chrome
4. set several break points
5. ctrl+c on the mocha tab
6. `mocha --debug-brk`
7. refreshed inspector in chrome (blank screen for almost a minute)
8. saw error (above) in node-inspector tab in terminal

@bajtos 
",ritch,2015-05-13 21:21:27
643,2015-05-13 21:16:25,"@ritch , I released 0.10.1 just now. Can you reproduce this on new version?
",3y3,2015-05-13 21:21:27
643,2015-05-13 21:16:50,"I'll give it a shot.
",ritch,2015-05-13 21:21:27
643,2015-05-13 21:21:12,"Can't reproduce with the new version. Although I'm not sure that means its fixed.
",ritch,2015-05-13 21:21:27
643,2015-05-13 21:21:27,"I'll re-open if I get the error again.
",ritch,2015-05-13 21:21:27
642,2015-05-13 11:30:00,"Having issue on running `npm install -g node-inspector`. Installed node version is 0.12.2

<S_CODE_TOKEN>
",jetsonjohn,2015-05-14 13:12:57
642,2015-05-14 06:49:37,"Read this issue discussion https://github.com/TooTallNate/node-gyp/issues/454
",3y3,2015-05-14 13:12:57
642,2015-05-14 13:12:57,"Installing gyp, build-essential, g++ and added the permission to .node-gyp solved the problem

<S_CODE_TOKEN>

After all that run the code 

`sudo npm install --unsafe-perm -g node-inspector`

It works!
",jetsonjohn,2015-05-14 13:12:57
641,2015-05-12 11:30:34,"<S_CODE_TOKEN>

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/14440518-web-host-version-does-not-work-in-docker?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",olalonde,
641,2016-03-21 00:12:00,"Same issue on Vagrant
",121onto,
640,2015-05-11 20:35:33,"Hi,
My system is running nodejs 0.12.2 with node-inspector 0.10. When I run the command ""node-debug _mocha"", the chrome browser is opened but the debugging sessions immediately crashes with the following error message:

Debugging `_mocha`

Debugger listening on port 5858
events.js:85
      throw er; // Unhandled 'error' event
            ^
Error: read ECONNRESET
    at exports._errnoException (util.js:746:11)
    at TCP.onread (net.js:559:26)

Just wondering if this is a known issue and if there are any workaround to debug mocha tests with node-debug.
",murdockcrc,2015-05-14 20:02:48
640,2015-05-13 21:18:55,"Please try to reproduce this on node-inspector 0.10.1
",3y3,2015-05-14 20:02:48
640,2015-05-14 20:01:52,"@3y3 it does not crash anymore, thanks for the tip.
",murdockcrc,2015-05-14 20:02:48
640,2015-05-14 20:02:48,"Good news!
",3y3,2015-05-14 20:02:48
639,2015-05-08 17:41:27,"See my comments in ""problem with node v0.12.2 #603""
",bobpappas,2015-05-08 18:28:42
639,2015-05-08 18:28:42,"Right place for disscussion is #631
",3y3,2015-05-08 18:28:42
638,2015-05-07 23:36:20,"- mac 10.9.4
- on node v0.12.22
- Node Inspector v0.10.0
- issue

Runtime.getProperties failed.
Error: No scopes
",i5ting,2015-06-28 13:28:53
638,2015-05-13 10:40:09,"Can you provide some small example of code?
",3y3,2015-06-28 13:28:53
638,2015-05-13 16:41:56,"Also getting that with:
- windows x64
- io.js 2.0.0
- Node Inspector v0.10.0

Will try and provide a more complete report 
",colthreepv,2015-06-28 13:28:53
638,2015-05-15 21:26:15,"ping @i5ting 
ping @mrgamer
",3y3,2015-06-28 13:28:53
638,2015-05-16 00:29:41,"I am sorry, after cleaning `npm`, `npm-cache` and rebuilding everything with io.js 2.0.1
I could not reproduce this.

I was trying to get a clean environment, free of version conflicts, and .. it made this vanish :-/
",colthreepv,2015-06-28 13:28:53
638,2015-05-17 11:34:33,"@3y3 

my final solution:
- nvm 0.25.1
- node v0.10.38
- Node Inspector v0.10.0

only this can work well
",i5ting,2015-06-28 13:28:53
638,2015-06-15 18:04:48,"I am able to reproduce a similar error, `Object #-{ Number }# not found`

Here's a full screencast to reproduce it.
![nodeinspector-bug](https://cloud.githubusercontent.com/assets/2657230/8166676/9d82b866-1399-11e5-88a5-170ba525fe65.gif)

Funny detail: if I don't use F8, but click ""play"" icon with mouse, this does not appear.
",colthreepv,2015-06-28 13:28:53
638,2015-06-15 18:14:20,"@mrgamer , thank you for screencast. I can work with this issue now.
",3y3,2015-06-28 13:28:53
638,2015-06-19 13:33:33,"@mrgamer thanks
",i5ting,2015-06-28 13:28:53
638,2017-03-09 11:05:08,"Issue still exists:

<S_CODE_TOKEN>

Node.js v6.3.1
Node Inspector v0.12.8
#910 ",rafis,2015-06-28 13:28:53
637,2015-05-07 22:31:49,"@bajtos , looking on node 0.12 I found real reason why we can't previously pause on first line.
This is because we don't receive `afterCompile` event, that registers scripts in ScriptManager.
Isntead of this we receive `compileError` event every time.

So in this pr I deprecate event caching feature in BreakEventHandler. 
I implemented `_onBreak` as an async function, this provide more powerful control flow and allow me to asynchronously receive script source (if it needed) directly from `_onBreak`
",3y3,2015-05-13 20:10:23
637,2015-05-07 22:45:31,"I targetted issues that will be (or can be) solved by this pr.
",3y3,2015-05-13 20:10:23
637,2015-05-13 08:05:37,"Ping @bajtos . Is it possible to review it on this week and release 0.10.1?
",3y3,2015-05-13 20:10:23
637,2015-05-13 08:31:39,"> This is because we don't receive afterCompile event, that registers scripts in ScriptManager.
> Isntead of this we receive compileError event every time.

I find this rather weird. Are you sure it's not a bug in Node and/or V8, or perhaps in the way how we are using the debugger protocol? Can we reproduce the problem in such way that allows us to report this as a bug to Node.js and/or io.js projects?

> in this pr I deprecate event caching feature in BreakEventHandler. 
> I implemented _onBreak as an async function, this provide more powerful control flow and allow me to asynchronously receive script source (if it needed) directly from _onBreak

Cool, this sounds like a better solution than the event caching mechanism! I am afraid I don't have enough time to fully understand the scope of these changes. If it works for you then I am ok with it.

One scenario to consider and/or test manually:
- Start Node Inspector with `--no-preload`
- Start the debugged process via `node --debug`, make sure the debugged process loads (requires) some other scripts
- Start the debugging session in browser. Verify that scripts loaded before the debugger was attached are correctly displayed in the UI.

I thing [sourcemaps sample app](https://github.com/node-inspector/node-debug-samples/tree/bef5febd83d1e401abeb93933c5e033d14dedc16/sourcemap) may be a good app to debug.
",bajtos,2015-05-13 20:10:23
637,2015-05-13 08:34:44,"FWIW, the CI build is failing for io.js@2.0. I think the upgrade of V8 changed the data reported by the debugger.
",bajtos,2015-05-13 20:10:23
637,2015-05-13 09:09:15,"> I find this rather weird. Are you sure it's not a bug in Node and/or V8, or perhaps in the way how we are using the debugger protocol? Can we reproduce the problem in such way that allows us to report this as a bug to Node.js and/or io.js projects?

Already reported https://github.com/joyent/node/issues/25266.

I have [confirmation in gitter chat](https://gitter.im/node-inspector/node-inspector?at=554ca56c5e423e6573fce2e8), that this pr solves original problem (tested without `--no-preload`)
I'll follow your test list and if all works on `--no-preload` flag, is it ready to merge?

> FWIW, the CI build is failing for io.js@2.0. I think the upgrade of V8 changed the data reported by the debugger.

There is a lot of problems. I tried to fix tests for iojs some times, but this requires a deeper digging.
",3y3,2015-05-13 20:10:23
637,2015-05-13 18:05:56,"> I have confirmation in gitter chat, that this pr solves original problem (tested without --no-preload)
> I'll follow your test list and if all works on --no-preload flag, is it ready to merge?

Sure, no problem. I think it would be best to test both `--no-preload` and source maps.
",bajtos,2015-05-13 20:10:23
637,2015-05-13 18:06:27,"@3y3 Thank you for taking care of this and keeping the project going!
",bajtos,2015-05-13 20:10:23
637,2015-05-13 20:11:37,"Tested on `sourcemap`. Works fine.
Reverted `includeSource` option in `DebuggerAgent`.
",3y3,2015-05-13 20:10:23
636,2015-05-07 12:05:18,"Hello, we're logging HTTP requests in console and view them through node-inspector. But console output truncates long urls. For example

<S_CODE_TOKEN>

I have no idea why it works this way. It makes logging useless sometimes.  Standard Chrome console nether act this way. Is it possible to fix?
",fetis,2015-06-14 21:47:39
636,2015-06-14 21:47:39,"Fixed in 0.10.2.
Feel free to reopen this issue, if I'm wrong here.
",3y3,2015-06-14 21:47:39
635,2015-05-06 12:32:39,"Not sure if it is only happening to me but when I hit ""console"" the screen gets like this below making hard to select the other tabs (Profiles, Sources)

![image](http://i.imgur.com/MtB3MIc.gif)

Thanks
",felipekm,2015-05-18 17:52:37
635,2015-05-06 12:47:44,"Emm. Do you have any extension, which can modify styles?
",3y3,2015-05-18 17:52:37
635,2015-05-06 12:50:51,"Sure not, my chrome is basically naked on that, could you reproduce it?
",felipekm,2015-05-18 17:52:37
635,2015-05-06 12:52:18,"There https://github.com/node-inspector/node-inspector/issues/630 is a screen of how to should look upper panel.
Maybe you have low resolution? 800x600? =)
",3y3,2015-05-18 17:52:37
635,2015-05-06 13:02:57,"Here is Windows 7 and my screen is 1080p. Actually two screens with 1080p.
",felipekm,2015-05-18 17:52:37
635,2015-05-16 09:50:44,"Ok. I reproduced your problem.
To solve it, you need to clear localStorage and cache for inspector tab.
",3y3,2015-05-18 17:52:37
635,2015-05-18 17:07:44,"Yup, I did it and it works after clear all localStorages keys.
Thanks,
",felipekm,2015-05-18 17:52:37
634,2015-05-05 20:32:17,"This fixes #633 by hacking the upstream Blink source... I tried to add this in `MainOverrides.js` at first, but that didn't work because `WebInspector.Main.prototype._createConnection()` is called before `MainOverrides.js` is sourced...

I'm not really happy with this solution, but I've spend too much time trying to fix this as it is :(

---

Update: Fixed properly with help from @3y3 :beers: 
",adambiggs,2015-05-06 20:20:51
634,2015-05-05 20:59:40,"@adambiggs , thanks for bug report and pr.
Now my turn to lose some time trying to override this using `front-end-node` folder =)
Anyway solution will be very hackly...
I'll return to review from some time.
",3y3,2015-05-06 20:20:51
634,2015-05-05 21:11:12,"So [this](https://github.com/node-inspector/node-inspector/blob/master/front-end/sdk/InspectorBackend.js#L677-L680) looks like a nice place to override. Are you want to research this or you leave it for me?
",3y3,2015-05-06 20:20:51
634,2015-05-05 21:18:46,"@3y3 oh nice! I'll update the PR.
",adambiggs,2015-05-06 20:20:51
634,2015-05-06 07:29:12,"Reviewed. 
The last step is to move this modification to [NodeInspectorOverrides.js](https://github.com/node-inspector/node-inspector/blob/master/front-end-node/NodeInspectorOverrides.js) (something like `_checkWebSocketProtocol`), which depends on `sdk` only. So we avoid:

> WebInspector.Main.prototype._createConnection() is called before MainOverrides.js is sourced...

Read also my inline comment.
",3y3,2015-05-06 20:20:51
634,2015-05-06 16:52:09,"I moved everything into `NodeInspectorOverrides.js`, and tried to follow the existing conventions in that file. Does that look like a good solution?
",adambiggs,2015-05-06 20:20:51
634,2015-05-06 17:51:22,"Looks great! Please fix some linter errors and I'll merge this.
To see linter's errors you can run `npm test` or look at [travis log](https://travis-ci.org/node-inspector/node-inspector/jobs/61496239)
",3y3,2015-05-06 20:20:51
634,2015-05-06 18:43:45,"@3y3 done!
",adambiggs,2015-05-06 20:20:51
634,2015-05-06 20:22:54,"@adambiggs , great thanks for contribution. :beers: 
",3y3,2015-05-06 20:20:51
634,2015-05-06 21:49:42,"Brilliant, thanks for the fix!
",mamacdon,2015-05-06 20:20:51
633,2015-05-05 20:22:32,"After updating to Node Inspector v0.10, I was no longer able to debug over HTTPS. The browser console showed the following error:

<S_CODE_TOKEN>

This broke after cbafc35, where WebSocket connections were changed to be handled by Blink's dev tools implementation.

But the problem is, Blink's implementation lacks support for the `wss` protocol... As seen [here](https://github.com/node-inspector/node-inspector/blob/master/front-end/main/Main.js#L267).
",adambiggs,2015-05-06 20:20:51
632,2015-05-02 17:45:44,"When I run `node-debug` on my app, I get the following error in the node-inspector console:

<S_CODE_TOKEN>

Sure enough, the `node-v14-darwin-x64` folder doesn't exist, though I have a `node-v11-darwin-x64` folder.

Edit: I copied the darwin folder over to `node-v14-darwin-x64` just to see if that would work, but then I get the following error: `Error: Module did not self-register.`
",emburns,2015-05-23 17:08:26
632,2015-05-02 20:16:29,"Please try to completely reinstall node-inspector. I think you use node 0.12.2.
I updated v8-debug version to `0.4.3` easterday. This version can solve your problem. (I see that your current installed version is 0.4.1)
I'm very wait feedback from you.
",3y3,2015-05-23 17:08:26
632,2015-05-02 20:51:39,"Awesome.  I think that got me farther.  Now I'm just getting that 'Error: Module did not self-register'.  I'm thinking that might be from one of the modules I'm including in my server?  Any idea what could be causing that?
",emburns,2015-05-23 17:08:26
632,2015-05-02 21:04:19,"This is an error for native modules like v8-debug. I wonder to see stack trace for this error.
",3y3,2015-05-23 17:08:26
632,2015-05-09 20:19:24,"Do you have any advice on how I could get a stack trace for it?  Unfortunately, it just shows up in the log of node-inspector when it first loads.  It doesn't give me a line number or anything that would give me a hint of where to put a breakpoint.
",emburns,2015-05-23 17:08:26
632,2015-05-09 20:45:31,"I think stack trace will not be helpful at current time.
Are you using

<S_CODE_TOKEN>

for complete reinstallation of node-inspector? (Any way please try it again. I wonder to see install log, if reinstallation doesn't resolves problem)

Which is your current nodejs version?
Do you have installed iojs?
",3y3,2015-05-23 17:08:26
632,2015-05-13 08:35:58,"node 0.12.2
 v8-debug 0.4.4

<S_CODE_TOKEN>
",i5ting,2015-05-23 17:08:26
632,2015-05-13 08:37:45,"<S_CODE_TOKEN>
",i5ting,2015-05-23 17:08:26
632,2015-05-14 06:53:29,"@emburns , if your problem doesn't solved please read https://github.com/node-inspector/node-inspector/issues/631
",3y3,2015-05-23 17:08:26
632,2015-05-23 14:15:28,"@3y3 another uninstall/reinstall seems to have fixed the problem.  Thank you very much!
",emburns,2015-05-23 17:08:26
632,2016-05-07 21:12:21,"I have a similar problem. I see the error 
Cannot find module '/Users/ms/.nvm/versions/node/v6.1.0/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.3/node-v47-darwin-x64/debug.node' but the installed directory is 
 /Users/ms/.nvm/versions/node/v6.1.0/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.7.3/node-v48-darwin-x64/

I reinstalled nvm, node, node-inspector and v8-debug
",mschipperheyn,2015-05-23 17:08:26
632,2016-05-26 13:38:33,"+1 for @mschipperheyn .. same here:

node-v11-darwin-x64 found, node-v47-darwin-x64 expected

node 5.5.0
",wzr1337,2015-05-23 17:08:26
632,2016-07-13 10:05:02,"after 

> npm cache clean
> npm uninstall -g node-inspector
> npm i -g node-inspector

node-v46-darwin-x64 found but node-v48-darwin-x64 is expected...

i m using node 6.0.0.
Node Inspector v0.12.8

It results that when node-inspector is running any request to my node app is hanging forever...

thx for any feedback.
",dadakoko,2015-05-23 17:08:26
631,2015-05-02 17:19:04,"Hi,

I'm getting this error repeatedly installing on a clean session. Tried with node latest 0.12 and 0.11.13.

Error is:

<S_CODE_TOKEN>

With npm install node-inspector the folder generated is `node-v0.11.13-win32-ia32` not `node-v43-win32-ia32`.

Cannot explain why it's looking for **v43** instead of **v.0.11.13**.

I'm on Windows 8.1 64bit, with the 32bit version of node installed.

This error is preventing node-inspector from working.
",jamespacileo,2015-05-15 20:40:38
631,2015-05-02 20:11:29,"v43 is a spacial number for iojs. Are you sure that you use npm with installed 0.12?
",3y3,2015-05-15 20:40:38
631,2015-05-03 10:20:57,"I have the same problem while trying to debug ad Electron app, which internally runs with io.js, so I guess it doesn't matter that I have node v0.12.2 installed on my machine right?
",ingro,2015-05-15 20:40:38
631,2015-05-08 17:42:57,"I have the same problem. see #603 
",bobpappas,2015-05-15 20:40:38
631,2015-05-08 18:27:40,"@bobpappas , this is a right place for discussion about your problem. So I see that `node-pre-gyp` tries to download wrong prebuild version.
Please give me a result of next command executed in the same shell in which you tried to install node-inspector.

<S_CODE_TOKEN>

Also I wonder to see

<S_CODE_TOKEN>

and

<S_CODE_TOKEN>
",3y3,2015-05-15 20:40:38
631,2015-05-08 18:35:10,"Yeah, I'm trying to use electron and their instructions for using node-inspector. Why is io.js causing issues?

Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.3/node-v43-darwin-x64/debug.node'

$ node-inspector -v
Node Inspector v0.10.0
$ node -v
v0.12.2
$ electron -v
v0.25.1

I do not have iojs in my path... But I think it's installed by electron.

in the directory above, only node-v14-darwin-x64 is listed. Not v43.
",bobpappas,2015-05-15 20:40:38
631,2015-05-08 19:19:29,"So, if I understand right, you installed node inspector using `npm install -g node-inspector`.
I think you can try next:

<S_CODE_TOKEN>

Change `1.8.3` to current version of iojs which used in electron
",3y3,2015-05-15 20:40:38
631,2015-05-08 20:47:51,"How I can see current iojs version used in electron is `1.6.3`
",3y3,2015-05-15 20:40:38
631,2015-05-08 20:48:25,"@3u3, yes I installed node-inspector that way.

Not sure if the --tagget parameter above is correct. It's still installing the wrong node-pre-gyp stuff:

> v8-profiler@5.2.5 install /usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler
> node-pre-gyp install --fallback-to-build

[v8-profiler] Success: ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.2.5/node-v14-darwin-x64/profiler.node"" is installed via remote

> v8-debug@0.4.3 install /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
> node-pre-gyp install --fallback-to-build

[v8-debug] Success: ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.3/node-v14-darwin-x64/debug.node"" is installed via remote

After following your instructions, I still get:
Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.3/node-v43-darwin-x64/debug.node'
",bobpappas,2015-05-15 20:40:38
631,2015-05-08 20:53:15,"what is --tagget=1.6.3?

I thought you used: npm install <package>@<version>

Also node-inspector only goes up to 0.10.0. Not 1.6.3. I don't think I'm getting the right stuff.
",bobpappas,2015-05-15 20:40:38
631,2015-05-08 20:57:05,"Sorry, `--target` (not `--tagget`) is a flag for `node-pre-gyp` install script, which is used in v8-profiler and v8-debug submodules.
",3y3,2015-05-15 20:40:38
631,2015-05-08 21:05:13,"`--target` value needs to be equal to version of iojs used in electron.
Unfortunately I don't see `v43-darwin` in my Amazon S3 (only `v42-darwin`)
So, this solution is not helpful at current time.
",3y3,2015-05-15 20:40:38
631,2015-05-08 21:05:32,"Getting closer. 

I tried --target=1.6.3

v42 is installed as you see. But node-inspector still wants v43:
Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.3/node-v43-darwin-x64/debug.node'

Install log:
[v8-profiler] Success: ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.2.5/node-v42-darwin-x64/profiler.node"" is installed via remote

> v8-debug@0.4.3 install /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
> node-pre-gyp install --fallback-to-build

[v8-debug] Success: ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.3/node-v42-darwin-x64/debug.node"" is installed via remote
",bobpappas,2015-05-15 20:40:38
631,2015-05-08 21:05:56,"Can we come to a solution?
",bobpappas,2015-05-15 20:40:38
631,2015-05-08 21:08:30,"Can you give me a v43 build and I can install it by hand?
",bobpappas,2015-05-15 20:40:38
631,2015-05-08 21:17:03,"Ok. This is a good news. We need one last step to fix this.
So, the main recomendation for you and other users stills:

> Use `npm install -g node-inspector --target=1.6.3`

Now I need to update v8-debug and v8-profiler to build on correct iojs version (at current time this is incorrect `1.0.*`).

I'll make it from some hours.
",3y3,2015-05-15 20:40:38
631,2015-05-08 21:21:05,"Ok, let me know when I can test it.
",bobpappas,2015-05-15 20:40:38
631,2015-05-11 15:39:48,"@3y3 Ping... I'd love to be able to use node-inspector. How's the progress?
",bobpappas,2015-05-15 20:40:38
631,2015-05-11 16:39:47,"@bobpappas , I think it's ready to go.
Try `npm install -g node-inspector --target=1.6.3` now.
At current time builds prebuild binary for `v8-profiler` - this also can be reasonable for you.
",3y3,2015-05-15 20:40:38
631,2015-05-11 16:48:15,"Prebuild for `v8-profiler` will be available after finishing of:
[Linux/OSX build](https://travis-ci.org/node-inspector/v8-profiler/builds/62108957)
[Windows build](https://ci.appveyor.com/project/3y3/v8-profiler/build/1.0.34)
",3y3,2015-05-15 20:40:38
631,2015-05-11 19:51:02,"Yeah, having trouble with v8-profiler now:
Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.2.5/node-v43-darwin-x64/profiler.node'
",bobpappas,2015-05-15 20:40:38
631,2015-05-11 19:53:39,"install logs:
[v8-profiler] Success: ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.2.5/node-v42-darwin-x64/profiler.node"" is installed via remote
",bobpappas,2015-05-15 20:40:38
631,2015-05-11 19:55:28,"Your new v8-profiler is v5.2.6... How do I get that version?
",bobpappas,2015-05-15 20:40:38
631,2015-05-11 20:04:31,"Sorry =) I messed publishng to npm. Ready.
",3y3,2015-05-15 20:40:38
631,2015-05-11 20:24:12,"Getting further. When browser goes to http://127.0.0.1:8080/debug?ws=127.0.0.1:8080&port=5858

Node-inspector throws:

module.js:338
    throw err;
          ^
Error: Cannot find module 'v8-profiler'
    at Function.Module._resolveFilename (module.js:336:15)
    at Function.require.resolve (module.js:388:19)
    at ProfilerAgent._inject (/usr/local/lib/node_modules/node-inspector/lib/ProfilerAgent.js:34:30)
    at InjectorClient.emit (events.js:129:20)
    at InjectorClient.<anonymous> (/usr/local/lib/node_modules/node-inspector/lib/InjectorClient.js:165:10)
    at /usr/local/lib/node_modules/node-inspector/lib/DebuggerClient.js:122:7
    at Object.create.processResponse.value (/usr/local/lib/node_modules/node-inspector/lib/callback.js:23:20)
    at Debugger._processResponse (/usr/local/lib/node_modules/node-inspector/lib/debugger.js:92:21)
    at Protocol.execute (_debugger.js:135:14)
    at Socket.emit (events.js:107:17)
Bobs-MacBook-Pro-Retina-2:~ bpappas$ 

Install Logs:
Bobs-MacBook-Pro-Retina-2:~ bpappas$ sudo npm install -g node-inspector --target=1.6.3

> v8-profiler@5.2.6 preinstall /usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler
> 
> v8-debug@0.4.4 preinstall /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
> 
> ws@0.4.32 install /usr/local/lib/node_modules/node-inspector/node_modules/ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

npm WARN engine xmlbuilder@2.2.1: wanted: {""node"":""0.8.x || 0.10.x""} (current: {""node"":""0.12.2"",""npm"":""2.7.4""})
|

> v8-debug@0.4.4 postinstall /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
> node-pre-gyp install --fallback-to-build

[v8-debug] Success: ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.4/node-v43-darwin-x64/debug.node"" is installed via remote

> v8-profiler@5.2.6 postinstall /usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler
> node-pre-gyp install --fallback-to-build

[v8-profiler] Success: ""/usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler/build/profiler/v5.2.6/node-v43-darwin-x64/profiler.node"" is installed via remote
/usr/local/bin/node-inspector -> /usr/local/lib/node_modules/node-inspector/bin/inspector.js
/usr/local/bin/node-debug -> /usr/local/lib/node_modules/node-inspector/bin/node-debug.js
node-inspector@0.10.0 /usr/local/lib/node_modules/node-inspector
├── async@0.9.0
├── semver@3.0.1
├── debug@1.0.4 (ms@0.6.2)
├── yargs@1.3.3
├── rc@0.5.5 (strip-json-comments@0.1.3, deep-extend@0.2.11, ini@1.3.3, minimist@0.0.10)
├── which@1.1.1 (is-absolute@0.1.7)
├── strong-data-uri@0.1.1 (truncate@1.0.4)
├── serve-favicon@2.2.0 (fresh@0.2.4, ms@0.7.0, parseurl@1.3.0, etag@1.5.1)
├── glob@4.5.3 (inherits@2.0.1, once@1.3.2, inflight@1.0.4, minimatch@2.0.7)
├── express@4.12.3 (merge-descriptors@1.0.0, cookie-signature@1.0.6, utils-merge@1.0.0, methods@1.1.1, cookie@0.1.2, fresh@0.2.4, escape-html@1.0.1, range-parser@1.0.2, finalhandler@0.3.4, content-type@1.0.1, vary@1.0.0, parseurl@1.3.0, serve-static@1.9.2, content-disposition@0.5.0, path-to-regexp@0.1.3, depd@1.0.1, qs@2.4.1, debug@2.1.3, etag@1.5.1, on-finished@2.2.1, proxy-addr@1.0.8, send@0.12.2, accepts@1.2.7, type-is@1.6.2)
├── ws@0.4.32 (tinycolor@0.0.1, options@0.0.6, commander@2.1.0, nan@1.0.0)
├── biased-opener@0.2.5 (opener@1.4.1, minimist@1.1.0, x-default-browser@0.3.0, browser-launcher2@0.4.5)
├── v8-debug@0.4.4 (nan@1.8.4, node-pre-gyp@0.6.7)
└── v8-profiler@5.2.6 (nan@1.8.4, node-pre-gyp@0.6.7)
",bobpappas,2015-05-15 20:40:38
631,2015-05-11 21:08:15,"@bobpappas , this is an epic hoodoo! I don't know why, but 5.2.6 was corrupted in npm. I published 5.2.7, and already tested what it installs correctly. At current time CI servers prepares prebuild binaries.

Thank you for your patience and help in debugging.
",3y3,2015-05-15 20:40:38
631,2015-05-11 22:50:11,"How long should it take? Doesn't look like the tarball is up on amazon s3 yet...

node-pre-gyp http GET https://node-inspector.s3.amazonaws.com/profiler/v5.2.7/node-v43-darwin-x64.tar.gz
node-pre-gyp http 404 https://node-inspector.s3.amazonaws.com/profiler/v5.2.7/node-v43-darwin-x64.tar.gz
node-pre-gyp http Pre-built binary not available for your system, looked for https://node-inspector.s3.amazonaws.com/profiler/v5.2.7/node-v43-darwin-x64.tar.gz (falling back to source compile with node-gyp) 
",bobpappas,2015-05-15 20:40:38
631,2015-05-11 23:04:55,"Now Travis CI (where prepairs linux/mac build) is unavaible...
Someone really does not want you to have installed node-inspector...
Do you have a bad karma? =)
",3y3,2015-05-15 20:40:38
631,2015-05-11 23:18:51,"Someone just wants to test out my QA skills...
",bobpappas,2015-05-15 20:40:38
631,2015-05-12 14:32:43,"Ok, seems to be working now. Phew!
",bobpappas,2015-05-15 20:40:38
631,2015-05-12 14:47:37,"will test tomorrow, thank you! :)
",jamespacileo,2015-05-15 20:40:38
631,2015-05-15 20:40:38,"I close this, because @bobpappas confirm issue resolving.
@jamespacileo , feel free to reopen this issue, if original problem doesn't solved.
",3y3,2015-05-15 20:40:38
631,2015-05-18 14:26:48,"I am having the same problem (or a very similar one) trying to use node-inspector to debug Electron on Windows:

Error: Cannot find module 'C:\Users\RScullard\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.4.4\node-v43-win32-x64\debug.node'

When I try the suggestion above: **npm install -g node-inspector --target=1.6.3**
it fails trying to download the following nonexistent file:

<S_CODE_TOKEN>
",RandScullard,2015-05-15 20:40:38
631,2015-05-18 15:03:19,"@RandScullard , I see that you have a problem with downloading prebuild binaries
 **( do you work behind a proxy? )**.
In your case npm tries to build v8-debug from source and tries to download node sources for building.
Unfortunately cdn for iojs sources is different from nodejs.
I know a complicated solution how to build it for iojs, but before we go by this way, I prefer to understand, why prebuild binaries doesn't works for you.

So... Do you work behind a proxy?
",3y3,2015-05-15 20:40:38
631,2015-05-18 15:17:52,"@3y3, no, I don't work behind a proxy. Are you able to download from the URL http://nodejs.org/dist/v1.6.3/node-v1.6.3.tar.gz? When I go to http://nodejs.org/dist, I don't even see a v1.6.3 folder.
",RandScullard,2015-05-15 20:40:38
631,2015-05-18 15:21:27,"No I'm not able, this related with

> Unfortunately cdn for iojs sources is different from nodejs.

But I'm able to download [prebuild binaries from amason](https://s3.eu-central-1.amazonaws.com/node-inspector/debug/v0.4.4/node-v43-win32-x64.tar.gz?X-Amz-Date=20150518T152043Z&X-Amz-Expires=300&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Signature=7e8057f2514b4b6e21fb2c7fc40bd54be4a1d701583bb333c022b5b2185071f9&X-Amz-Credential=ASIAJWICZEJV5Z4JM6CQ/20150518/eu-central-1/s3/aws4_request&X-Amz-SignedHeaders=Host&x-amz-security-token=AQoDYXdzEDAakAJ721aJAgwQPIoJfUNzJ2PoQ2S/lzCfsbVUCHvN65cDhz1Y70Nb5ryg4zkhM%2BHRMYeEVdPBaTcZ%2BmqkJvM5YkGpSUMGY28zBrLR5t7szxRKYA6xZRFS3lKvV2XvsW8ed8dohthFmdxHHy5Aw4mdyspm74NtfToqDOObCMY7ai58WoWi%2BxJBYXEE%2BHE%2Ba41/bK4Wgzo%2BAoI0%2BSEyVeaq%2BQk3OheIExK1X7uxPgOm/9XrqaJNYeGEaxhCXi5sn5RNKHv1mkZvjXDOu4I24K%2BV0/TJDGJCmuiQD11EHYKtKv0uc26IKJxrZ05AaRKFzVHWOb8hwFvj1bB9w/yoYyUzF7vPLWU%2BkbCNFYdmwpSIUfJZKyCihuiqBQ%3D%3D)
",3y3,2015-05-15 20:40:38
631,2015-05-18 15:33:19,"Should I be able to use that Amazon prebuilt binaries link? I get the following response:

<S_CODE_TOKEN>
",RandScullard,2015-05-15 20:40:38
631,2015-05-18 15:47:53,"Try [this link](https://node-inspector.s3.amazonaws.com/debug/v0.4.4/node-v43-win32-x64.tar.gz)

But anyway I wonder to understand why `node-pre-gyp` module doesn't work correctly for you.
Can you post here full install log please?
",3y3,2015-05-15 20:40:38
631,2015-05-18 18:48:06,"Yes, I was able to download from that link -- thanks very much.

Do you want the install log for 
**npm install -g node-inspector** 
or 
**npm install -g node-inspector --target=1.6.3** 
?
",RandScullard,2015-05-15 20:40:38
631,2015-05-18 19:10:54,"`npm install -g node-inspector --target=1.6.3` will be interesting
",3y3,2015-05-15 20:40:38
631,2015-05-18 19:19:13,"<S_CODE_TOKEN>
",RandScullard,2015-05-15 20:40:38
631,2015-05-18 19:26:38,"Hey, but there is no error for v8-debug! =)

Look at this line:
`[v8-debug] Success: ""C:\Users\RScullard\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.4.4\node-v43-win32-x64\debug.node"" is installed via remote`
Do you have a broken node-inspector after this installation?
",3y3,2015-05-15 20:40:38
631,2015-05-18 19:43:37,"Yes, it is broken. If I try to debug a ""regular"" node.js program, I get this error in Chrome:

`Error: Cannot find module 'C:\Users\RScullard\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.4.4\node-v14-win32-x64\debug.node'`

If I try to debug Electron, I get the same error I did before:

`Error: The specified module could not be found.
C:\Users\RScullard\AppData\Roaming\npm\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.4.4\node-v43-win32-x64\debug.node`

which is really weird, because now that file exists! I used Process Monitor to see what file it's actually trying to open, and it successfully opens the debug.node file given in the error message, then tries to run iojs.exe and fails to find it. I don't appear to have an executable called iojs.exe anywhere on my system.
",RandScullard,2015-05-15 20:40:38
631,2015-05-20 08:04:00,"@RandScullard , I confirm your issue.This is an issue specially for electron. 
I opened new issue for this https://github.com/node-inspector/node-inspector/issues/649
",3y3,2015-05-15 20:40:38
631,2016-05-07 21:47:42,"i have this issue also on Mac OS 
",mschipperheyn,2015-05-15 20:40:38
630,2015-05-01 17:17:23,"<S_CODE_TOKEN>

I then open `http://localhost:8080/debug?ws=127.0.0.1:8080&port=5858` in my browser window. When node-inspector opens, I see this:

![screenshot from 2015-05-01 18 14 12](https://cloud.githubusercontent.com/assets/820863/7433924/1687c3ee-f02e-11e4-8ada-46158c1c335a.png)

Looks good - however, the terminal window has logged out the message:

<S_CODE_TOKEN>

which should only be displayed once I press F8 to resume execution.

Ubuntu 14.10, node-inspector 0.10.0, node 0.12.2.

Any idea what might be causing this?
",fiznool,2015-06-29 08:42:10
630,2015-05-04 13:00:21,"Same here on Win 8.1
Node Inspector v0.10.0
io.js v2.0.0-nightly20150504f34b105ccd :)
",clintwood,2015-06-29 08:42:10
630,2015-05-06 20:15:52,"I can't reproduce this behavior on Win8.1 with 0.12.2
@bajtos , can you confirm this as bug on your Mac?
",3y3,2015-06-29 08:42:10
630,2015-05-06 21:19:17,"I can confirm the same issue on Mac OSX Yosemite, 10.10.2 with Node.js v0.12.0 and node-inspector 0.10.0
",DaHoopster,2015-06-29 08:42:10
630,2015-05-13 21:20:42,"Please try to reproduce this on node-inspector 0.10.1
",3y3,2015-06-29 08:42:10
630,2015-06-29 08:42:10,"Fixed as of v0.11.0. :hamster: 
",fiznool,2015-06-29 08:42:10
629,2015-05-01 07:36:28,"Trying to figure why the WebSocket lib `ws` version in the dependencies is not being bumped from `""~0.4.31""` to latest `""^0.7.1""` for recent builds.

On Windows platform the older version has a build error while the later version works fine.
",clintwood,2015-05-13 21:21:07
629,2015-05-13 21:21:07,"Fixed in 0.10.1
",3y3,2015-05-13 21:21:07
629,2015-05-14 06:06:05,"Magic!
",clintwood,2015-05-13 21:21:07
628,2015-04-30 22:25:47,"I've recorded short video, displaying this bug: http://youtu.be/odIFQ1DNCAc
I'm using `iojs v1.8.1` with `babel 5.1.13`, which transpiles scripts via `require` hook and generates inline sourcemaps.
If you need some additional info, just ask.
",th0r,2015-06-14 21:48:00
628,2015-05-11 13:55:08,"I have exactly the same problem and it's annoying.

I start the serveur with :
./node_modules/.bin/babel-node --debug --stage 1 index.js
",cr0cK,2015-06-14 21:48:00
628,2015-05-14 10:53:43,"I also have this problem. I need a fix urgently
",rollokb,2015-06-14 21:48:00
628,2015-05-14 11:47:03,"Looks like a duplication of https://github.com/node-inspector/node-inspector/issues/580
",3y3,2015-06-14 21:48:00
628,2015-05-14 11:48:20,"Provide me please very small example to reproduce this problem.
",3y3,2015-06-14 21:48:00
628,2015-05-14 21:49:09,"I push a small example where I can reproduce the bug: https://github.com/cr0cK/node-inspector-issue628

Tested version are in the README of the example.
",cr0cK,2015-06-14 21:48:00
628,2015-05-15 09:09:16,"Thanks @cr0cK... I'll investigate during the we...
",marcominetti,2015-06-14 21:48:00
628,2015-05-15 09:31:41,"Ok, problem found... It's related with file naming... Seems node-inspector is not able to handle the case when the compiled and loaded script uri (e.g. /home/marco.minetti/Desktop/node-inspector-issue628/app/classes.js) is identical to the source file uri embedded in the sourcemap...

I'll try to fix it during the weekend... just as workaround, in my projects I force babel and acorn to use fake (virtual) source paths to keep compiled and source uri different... but with inline sourcemap this is not the case...
",marcominetti,2015-06-14 21:48:00
628,2015-05-15 09:33:36,"@3y3 Yuri, when you have time can you send me the repo where the blink tools source code is available... maybe they have fixed something after new frontend merge...
",marcominetti,2015-06-14 21:48:00
628,2015-05-15 09:52:05,"@marcominetti , I already have in plans to test front-end update (with new front-end system, this promises to be simple), so, if you want it soon, I'll make it on this evening or on weekend.
",3y3,2015-06-14 21:48:00
628,2015-05-15 10:06:44,"@3y3 could be useful, but I've created a workaround with duplication of entries in resource tree, I mean you get two files (file://classes.js - the original - and built://classes.js - the transpiled that could be also hidden)... let me know if it sounds reasonable for you in here or wants to delve into it...
",marcominetti,2015-06-14 21:48:00
628,2015-05-15 10:25:58,"@marcominetti , can you open a pr to look on progress?
",3y3,2015-06-14 21:48:00
628,2015-05-15 12:17:07,"yep, i'll do asap during the weekend... ;)
",marcominetti,2015-06-14 21:48:00
628,2015-06-14 21:47:59,"Fixed in 0.10.2.
Feel free to reopen this issue, if I'm wrong here.
",3y3,2015-06-14 21:48:00
627,2015-04-29 22:18:09,"1. `Front-end` prefixed commits - example of new entry point for plugins.
2. `Plugins` prefixed commits - implement first step of plugin system.
   On this step was implemented system for extending front-end.
   Run from `node-inspector` directory:
   
   <S_CODE_TOKEN>
3. Was deprecated script generation on updating front-end. All scripts generated on startup.
4. New option `--plugins` with default `false`. When all parts of plugin system will be implemented, default will be changed to `true`

In next prs I'll implement also:
- `SessionModules` class and `SessionAgents` class for extending backend
- `ni install` script
- Maybe. Security policy configuratin

Current implementation allow to completely modify front-end
",3y3,2015-07-27 22:23:18
627,2015-05-14 13:02:49,"Ready to review. @bajtos .

@marcominetti , your help in review is also interesting.
",3y3,2015-07-27 22:23:18
627,2015-05-14 13:11:46,"Great @3y3, I'll do it later in the evening.
",marcominetti,2015-07-27 22:23:18
627,2015-05-25 08:53:06,"@3y3 could you please add a new section to README.md explaining how to use plugins? It would be great to have some documentation for plugin authors too, I think it's better to move the docs to a different place (either a new md file or perhaps a wiki page).

I don't have enough time to review this PR in detail. If it works for you and for @marcominetti, then I am fine with merging it as it is.
",bajtos,2015-07-27 22:23:18
627,2015-05-25 09:11:09,"@bajtos , there is one wrong place:
`InspectorBackendCommands.js` and `SupportedCSSProperties.js` moved to `front-end-node` folder (you requested this movement some prs ago). But it doesn't work as expected.
Will be it acceptable to add new express `get` statement like this:

<S_CODE_TOKEN>

Or you see more elegant way?
",3y3,2015-07-27 22:23:18
627,2015-05-25 09:17:24,"> could you please add a new section to README.md

I prefer to add new document in `docs` folder with main info about plugins.
+ Wiki pages
+ Link from readme.md
",3y3,2015-07-27 22:23:18
627,2015-05-25 09:25:11,"Question: Is the idea to Fork the DevTools front-end in order to support
node-inspector specific plug ins?

( I'm on my mobile now so I can't review the code, so sorry if this is
clear when seeing the code)

DevTools already support extensions via the chrome extension APIs, so this
makes me wonder...

/k
On May 25, 2015 5:17 PM, ""Yury Puzynya"" notifications@github.com wrote:

> could you please add a new section to README.md
> 
> I prefer to add new document in docs folder with main info about plugins.
> - Wiki pages
> - Link from readme.md
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/pull/627#issuecomment-105175297
> .
",auchenberg,2015-07-27 22:23:18
627,2015-05-25 09:27:15,"@3y3 

> InspectorBackendCommands.js and SupportedCSSProperties.js moved to front-end-node folder (you requested this movement some prs ago). But it doesn't work as expected.

Could you be more specific please? What does it mean it does not work as expected? Are there other copies of these two files that are served instead of the desired ones? What is the underlying reason for that?

> I prefer to add new document in docs folder with main info about plugins.

Sounds good :+1: 
",bajtos,2015-07-27 22:23:18
627,2015-05-25 09:58:54,"@auchenberg ,

> Question: Is the idea to Fork the DevTools front-end in order to support
> node-inspector specific plug ins?

No, we won't to design our own plugins system for DevTools.

This is a first step of complex plugin system for Node Inspector.
We have three levels, where we want to inject code: frontend, inspector's backend, application.
This PR implements entry point to be able to load plugins to frontend.
So you have full access to DevTools sources, i.e. you can use `chrome extension APIs` or modify internal devtools methods.
",3y3,2015-07-27 22:23:18
627,2015-05-25 10:08:38,"@bajtos ,

We use `front-end-node` as a folder with all overrides, but we store all overrides relative to `/node` path.

Main reason to remove `InspectorBackendCommands` from `front-end` - cleanup this folder from any changes. After this step there will no files, which we need to copy to `front-end` folder using `update-front-end` script.

But if we simple move `InspectorBackendCommands` to `front-end-node` folder, this doen't work, because it will be resolved as `/node/InspectorBackendCommands.js`, but we expect `/InspectorBackendCommands.js`
",3y3,2015-07-27 22:23:18
627,2015-05-25 16:22:11,"> We use front-end-node as a folder with all overrides, but we store all overrides relative to /node path.

Ah, that makes sense now.

The reason why I dislike manual enumeration of files via `app.get` is that one has to change the code whenever a new file is added. That's why I prefer to serve a full folder instead.

It make sense to keep front-end static without any NodeInspector-generated code. In that case, I am proposing to create a new folder for the generated files and serve it at the root URL.

<S_CODE_TOKEN>

Let's not dwell on this detail too much. I am ok with whatever solution you prefer.
",bajtos,2015-07-27 22:23:18
627,2015-05-26 04:07:38,"@3y3 Got it. I'll keep an eye on this progress then. 
",auchenberg,2015-07-27 22:23:18
627,2015-07-27 22:28:49,"I fixed last comments and merged it as is without readme.
At current time this feature is disabled by default.
I merged it because there is some changes which I want to see in master (all related with dynamic `front-end` generation)
I need some other updates (`update frontend` and `inject more code to app`) before I'll can completely finish plugin system.
After main part of plugin system will be finishe and before releasing I'll write readme.
",3y3,2015-07-27 22:23:18
626,2015-04-29 19:06:09,"Hello,  I'm just trying out node-inspector for the first time and it looks like a fantastic tool.  I'm noticing that when I tried to start node-debug with Firefox as my default browser, the browser opener runs into an error.  

Environment:
Windows 7
Node: v0.10.33

When I switched to having Chrome as my main browser, the inspector started without issue (both versions worked node-inspector@0.9.2 and node-inspector@0.10.0).

Here is the error that I received when Firefox was my default browser.

<S_CODE_TOKEN>
",LegendaryTom,2015-05-04 18:17:56
626,2015-04-29 19:41:10,"Retargetted to @jakub-g.
",3y3,2015-05-04 18:17:56
626,2015-04-30 11:38:20,"Hi,

so there seems to be a bug in https://github.com/benderjs/browser-launcher2 but I also have to probably wrap the call with a try-catch to avoid the error.

@LegendaryTom can you do the following in your shell and paste your output?

<S_CODE_TOKEN>
",jakub-g,2015-05-04 18:17:56
626,2015-05-02 20:19:18,"It seems this could be linked to https://github.com/vweevers/win-detect-browsers/issues/16
",jakub-g,2015-05-04 18:17:56
626,2015-05-04 04:49:44,"[win-detect-browsers@1.0.2 was released](https://github.com/vweevers/win-detect-browsers/commits/1.0)

Reinstalling node inspector should be enough to fix the issue:

<S_CODE_TOKEN>

Or alternatively

<S_CODE_TOKEN>
",jakub-g,2015-05-04 18:17:56
626,2015-05-04 15:33:19,"Thanks @jakub-g for looking into this.  Here's the shell output:

<S_CODE_TOKEN>

I tried uninstall/reinstall of node-inspector and got the same result.  I also tried the alternative method:

<S_CODE_TOKEN>
",LegendaryTom,2015-05-04 18:17:56
626,2015-05-04 16:03:56,"@LegendaryTom try removing the cached browser list at `%USERPROFILE%/.config/browser-launcher2/config.json`. Otherwise, the new win-detect-browsers is never called (I suspect).
",vweevers,2015-05-04 18:17:56
626,2015-05-04 18:17:56,"That did the trick.  Now node-inspector is running and successfully opens up Chrome (even when Firefox is set as my default browser).  Much thanks!
",LegendaryTom,2015-05-04 18:17:56
626,2015-07-31 21:41:21,"@vweevers I am getting same error on Windows 7 machine. My default browser is FF. Is there work around for this?
",reyou,2015-05-04 18:17:56
626,2015-07-31 22:01:30,"@reyou Have you tried the above (reinstalling or updating, then removing the cache file)?
",vweevers,2015-05-04 18:17:56
626,2015-10-09 01:34:39,"Any ideas why i'm getting that when I try to install node-inspector on ubuntu? It installs successfully but it doesn't work (as if it wasn't installed)
",Pablo76,2015-05-04 18:17:56
625,2015-04-28 13:37:39,"When I try to run node-inspector v0.10.0, it gives me an HTTP 302: Moved Temporarily. It redirects to [object Object] , which of course isn't a real URL. v0.9.2 works fine.
",david-knipe-hp,2015-04-29 18:37:06
625,2015-04-29 18:36:22,"@david-knipe-hp , thanks for bug report. I pushed a commit that fixes this small bug, so this will be completely fixed in 0.10.1.

As a workaround you can use link that printed in node-inspector terminal on startup.
",3y3,2015-04-29 18:37:06
625,2015-04-29 18:37:06,"Closed by 36c246acb36950aa08afa7599a1e21533cb94430
",3y3,2015-04-29 18:37:06
624,2015-04-27 18:47:18,"Tried this version.

`debugger` statement did not work out (execution hung).

Here's what I have: http://ilyakantor.ru/screen/2015-04-27_2146.png
Unfortunately, no stack trace :(
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/12292364-debugger-doesn-t-work-node-inspector-0-10-0-iojs-1-8-1?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",iliakan,
624,2015-04-27 20:22:13,"This fucking situation, when iojs works better on Windows...

@iliakan , you can reproduce this on every script or on some special?
I tested iojs 1.8.1 on Windows in `debug` and `debug-brk` mode - all works fine.
I used `node-inspector` command because on Windows `node-debug` doesn't work correctly with iojs.

I know a line where this error happens, but I can't explain this situation.
",3y3,
624,2015-04-28 06:46:07,"@3y3 I inserted it inside a large open-source project. Can try to reproduce in dev env, if I succeed, you could do it too.
",iliakan,
623,2015-04-24 21:38:00,"FYI:

With the new version 'Node Inspector v0.10.0'

I got an error message after I ran to the end of a script.

'Assertion failed: ((err) == (0)), function Stop, file ../deps/debugger-agent/src/agent.cc, line 164.'

It did not seem to affect the debugging session.

Colin G
",colingoldberg,2015-05-04 15:45:45
623,2015-04-27 07:44:59,"What is your Node (or io.js) version?
",bajtos,2015-05-04 15:45:45
623,2015-04-27 14:15:54,"$ node -v
v0.12.0

On 4/27/15 3:45 AM, Miroslav Bajtoš wrote:

> What is your Node (or io.js) version?
> 
> —
> Reply to this email directly or view it on GitHub 
> https://github.com/node-inspector/node-inspector/issues/623#issuecomment-96542374.
",colingoldberg,2015-05-04 15:45:45
623,2015-05-04 15:45:45,"Thanks. I believe this is a problem in Node itself, see [deps/debugger-agent/src/agent.cc#L164](https://github.com/joyent/node/blob/v0.12.0/deps/debugger-agent/src/agent.cc#L164). Please upgrade to a newer Node version, e.g. 0.12.2 and open an issue in Node's tracker if the problem persist.
",bajtos,2015-05-04 15:45:45
622,2015-04-22 08:39:38,"On node 0.12 we can't use any custom commands (like 'Console.enable') if we stopped on first line.
This is a bug that can be fixed only in node source code.

Here I delete complicated console wrapping - we don't need to send 'Console.enable' to wrap console now.

This doesn't fixes initial problem. For example on 0.12 we can't get snapshot if we paused on first line. We need to send `continue` before using any custom command.

@bajtos , please review.
",3y3,2015-04-22 09:45:04
622,2015-04-22 08:58:59,"I don't fully understand the consequences of this change, but I don't see any obvious problem either. LGTM.

As for the problem ""we can't use any custom commands when stopped on the first line"" - is it because your injected code is running in the same V8 isolate as the debugged application and thus when the app is paused, the injection cannot run?

It should be relatively easy to fix this problem in v8-debug, you need to run the server (listener) in a new isolate. I don't understand all details yet, see [src/debug-agent.cc](https://github.com/iojs/io.js/blob/e61ee49c7a2f577eb1338ee35f8768d79010ebc9/src/debug-agent.cc) and [lib/_debug_agent.js](https://github.com/iojs/io.js/blob/e61ee49c7a2f577eb1338ee35f8768d79010ebc9/lib/_debug_agent.js) to get started.
",bajtos,2015-04-22 09:45:04
622,2015-04-22 09:35:50,"> As for the problem ""we can't use any custom commands when stopped on the first line"" - is it because your injected code is running in the same V8 isolate as the debugged application and thus when the app is paused, the injection cannot run?

I don't think so. At the current time I work on next theory:
V8 (used in node 0.12) returns new instance of debug context each time when it's possible. This behavior was fixed in `v8-debug` [here](https://github.com/node-inspector/v8-debug/blob/master/v8-debug.js#L103-L123). So, how you can see I define debug event listener, that changes debug context behavior to be a persistent value.
Unfortunately at the time when I setup debug event listener, one instance of debug context was already defined. I don't have access to this instance, so can't extend it by custom commands.
After `continue+pause` we'll receive expected (persistent modified) debug context.

To fix this I need to move [this lines](https://github.com/node-inspector/v8-debug/blob/master/v8-debug.js#L120-L122) to node source code.
",3y3,2015-04-22 09:45:04
621,2015-04-17 17:14:06,"Implemented DebuggerAgent.searchInContent.
Implemented PageAgent.searchInResource.
Added /lib/search.js to provide shared search functions.
Added resource/script source caching.
Fixed highlighting matches bug on minified-file lines.
",marcominetti,
621,2015-04-22 16:24:23,"@3y3 This is not an easy pick pr... I'll push some more commits with syntax and code cleanup for linter... but I know we'll talk about the source code caching in DebuggerAgent implementation... :D
",marcominetti,
621,2015-05-12 08:11:09,"@marcominetti , sorry for pending of your features, but there is a lot of bugs, which I need to fix and release before review.
",3y3,
621,2015-05-12 21:48:00,"@3y3, wow I've seen the new issues right now... may I help you? Feel free to assign me something. ;)
",marcominetti,
621,2015-05-14 13:21:28,"Hello, @marcominetti , I target you from Plugin system pr. Also you can look on [0.10.2 milestone](https://github.com/node-inspector/node-inspector/milestones/0.10.2), here are bugs and features with hight priority. It is not necessary, what all this bugs needs to be fixed, in some situations we need only to describe solution. For example #566 - you are friendly with new front-end, so you can target man to entry point for this feature (or implement it by yourself).
So look at list, and if you ready to fix something - notify me.
",3y3,
621,2015-05-14 21:12:16,"@3y3 I can work on #566 and #580...
",marcominetti,
621,2015-05-14 21:12:41,"Let me know if you have any priority... ;)
",marcominetti,
621,2015-05-14 21:14:49,"Please notify me when you will be ready for review this pr... cause I'm thinking about reworking it after changing the internal behaviour incase of --no-preload param...
",marcominetti,
621,2015-05-15 06:34:03,"> I can work on #566 and #580...

Nice! Thank you! For #580 look also on #628. I think it's a duplication. In #628 posted good example for tests. (For correct installation delete `npm-shrinkwrap`)

> Please notify me when you will be ready for review this pr... cause I'm thinking about reworking it after changing the internal behaviour incase of --no-preload param...

`--no-preload` was changed somewhere?
",3y3,
621,2015-05-15 08:49:41,"> --no-preload was changed somewhere?

Not yet, I will elaborate the clue later on reviewing/reworking this pr... btw the ni stack is built to run ""locally"", so the --no-preload does prevent backend to feed frontend with every available file from disk... (am I right?) I use it to have frontend load quickly and smoothly in large project...

The problem is that the --no-preload flag also avoids frontend feeding the static content provider (at front-end) for actually loaded files... This dramatically impact search, because, at first run, it needs to fetch source code for every loaded file... I will try to override the --no-preload behaviour assuring that script content is fetched automatically for loaded files and stored within the static content provider...
",marcominetti,
621,2015-05-15 09:07:24,"+1 for https://github.com/node-inspector/node-inspector/issues/628 !
",cr0cK,
621,2015-07-01 10:56:04,"Guys please work on this its a really important feature!
Thanks a million in advance :)
",a7madgamal,
621,2015-07-01 11:57:25,"hi @a7madgamal @3y3  I've successfully implemented the feature but there is a huge memory consumption cause I need to cache/preempt source files in arrays because search feature generates very huge number of getScriptSourceById/getResourceContent requests to the debugger through DebuggerClient and everything crashes... I could cache source in /tmp/ filesystem (but it's not so clever in cloud environments for the I/O)...

Solutions:
1. fix debugger client or debugger backend crash on huge requests (best)
2. implement an ordered queue at getScriptSourceById and getResourceContent (@3y3?)
3. keep this implementation and/or move cache on disk (worst)

You can try implementation with ljve-inspector module available on npm (I use it actually).
",marcominetti,
621,2015-07-01 12:03:32,"I can't find it, could you provide the npm link?
",a7madgamal,
621,2015-07-01 12:06:46,"https://www.npmjs.com/package/ljve-inspector
",marcominetti,
621,2015-07-01 14:28:19,"@marcominetti , I'm not familiar with search API in DevTools, but if I understand right main problem - we receive lot of parallel requests like `searchInContent` and we try to require sources for each `scriptId` also in parallel mode. So, we need to review strategy of original DevTools, when there exists a linked local folder:
- If in this case DevTools tries to search in all files (not only in loaded to front-end), then we need to completely avoid `getScriptSourceById` and use `fs` (this makes some problems for generated scripts, but I prefer to ignore this problems in initial implementation)
- Otherwise we can move search logic to app (look at injection example in `ConsoleAgent`)

In all this cases we need to completely avoid caching.

So, main question on current step - are we need to search in preloaded resources?
",3y3,
621,2015-07-01 15:00:21,"@marcominetti I installed your fork and its working greatly but when i search and click on a line it always highlight the NEXT line!
I want you to confirm this and if it turns out to be a bug I think I can help you fix it quickly 
HINT:check the function `getLine(doc, n)` `return chunk.lines[n];` in the ""codemerror.js"" file should be n-1 if n > 0

@3y3 I think it's ok for the search process to be a little bit slower and works like 10 files at a time then next 10 etc. for a basic fix. After all it's better than nothing!
",a7madgamal,
621,2015-07-01 15:02:40,"@a7madgamal , I agree that we must sacrifice performance for stability
",3y3,
621,2015-07-01 16:00:36,"@a7madgamal yep the bug of next line is fixed within an unpublished version... I'll publish it after some cleanup...
",marcominetti,
621,2015-07-01 16:02:50,"@3y3, I'm busy but I'll try to comment code just to share the pr/strategy... and I think the best way to improve stability and avoid memory leak is to directly check the filesystem if the file exists and, if not, trying to get through debuggerclient with requests ""pagination""... do you agree?
",marcominetti,
621,2015-07-10 08:59:01,"@3y3 hi, i'll have to work on this next weekend... just to confirm, i'll do:
- remove caching and
  - read script contents from fs
  - eventually pool by X when fs is not available/exist
- include fix for wrong-next-line
",marcominetti,
621,2015-07-14 22:26:21,"@3y3 I've rebased against 0.11.1, reverted most of the code and switched to original functions extracted from frontend... It seems to work now. Performance are not exciting but no memory leaks. We can drop my custom implementation with regexp (commented code in SearchOverrides.js and _xxx ""private"" named functions in search.js). After review I'll fix the jshint stuff...
",marcominetti,
621,2015-07-15 07:03:14,"Hello @marcominetti , sorry for ignoring your previous comment - I'm very busy at this time. I'll review your changes as soon as possible. I'm not sure that this will happen today, but definitely on this week.
",3y3,
621,2016-01-08 13:14:15,"Waiting for this =) @3y3 
",grsabreu,
621,2016-01-12 13:05:08,"Hi @grsabreu, in the weekend I'll check the status against latest commits to the master branch... are you experiencing specific problems?
",marcominetti,
621,2016-01-13 05:49:29,"@marcominetti , please don't miss time at current weekend. I'll release ""Node Inspector Next"" at this month (I hope) with new frontend and completely reimplemented server. So it's not reasonable to rebase at current master.

Node Inspector Next breaks compatibility with oldest node versions (compatibility starts with 4.*), but implements lot of new features.

I'm sorry that I pending this pr, but each time then I start to review it, there happens new broken node release.
",3y3,
621,2016-01-13 06:04:36,"@3y3 cool! Do you need help on nin?
",marcominetti,
621,2016-02-09 23:53:21,"any updates?
",a7madgamal,
620,2015-04-17 17:07:16,,marcominetti,
619,2015-04-17 16:21:39,"--hidden='[""xxxxxxx""]' acts like /.*/ but for node-internal modules and the loaded module
",scitecwri,2015-06-14 22:40:52
619,2015-04-27 07:50:24,"@scitecwri thank you for reporting the issue. I am afraid I don't understand the problem you are experiencing. Can you please add more details and describe steps how to reproduce the problem?
",bajtos,2015-06-14 22:40:52
619,2015-06-14 22:40:52,"No feedback for long time.
Feel free to reopen it.
",3y3,2015-06-14 22:40:52
618,2015-04-17 14:57:02,,marcominetti,2015-06-01 07:06:14
618,2015-04-27 07:21:16,"I am proposing to drop `/debug` path from the URL and server the debugger UI directly on the root URL.

<S_CODE_TOKEN>

@3y3 @auchenberg What's your opinion? Are you aware of any reason why the root URL may not work?
",bajtos,2015-06-01 07:06:14
618,2015-04-27 09:38:35,"I don't see any reasons to continue work on `/debug` path.
+1 to drop it (with backward compatibility).
",3y3,2015-06-01 07:06:14
618,2015-04-27 09:47:14,"If @auchenberg agrees, I change this pr to drop it
",marcominetti,2015-06-01 07:06:14
618,2015-05-29 09:42:58,"@marcominetti let's not wait for @auchenberg and move this patch forward. Could you please rework the code to serve the debugger at the root url, as discussed above?
",bajtos,2015-06-01 07:06:14
618,2015-05-29 10:04:56,"@bajtos Yep, I should have time this afternoon or evening to carry out all ni related tasks... (CEST)
",marcominetti,2015-06-01 07:06:14
618,2015-05-29 10:28:32,"Looks good. I don't have any problem with removing /debug, as long it won't
cause problems with /json or future endpoints.
On May 29, 2015 6:04 PM, ""Marco Minetti"" notifications@github.com wrote:

> @bajtos https://github.com/bajtos Yep, I should have time this
> afternoon or evening to carry out all ni related tasks... (CEST)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/pull/618#issuecomment-106763336
> .
",auchenberg,2015-06-01 07:06:14
618,2015-05-29 10:32:50,"> As long it won't cause problems with /json or future endpoints.

I think there should not be any problems. The (new) handler is supposed to serve only `GET /`, everything else should remain unchanged.
",bajtos,2015-06-01 07:06:14
618,2015-05-30 15:14:08,"done @bajtos 
",marcominetti,2015-06-01 07:06:14
618,2015-06-01 07:06:14,"Landed via 21dee3d, I have modified the patch to update README too. Thank you for the contribution!
",bajtos,2015-06-01 07:06:14
617,2015-04-17 14:54:05,,marcominetti,2015-04-24 18:06:23
617,2015-04-18 20:17:13,"Please look on my inline comments. I propose next implementation of `saveToFile` that fixes all my comments, but I don't test this code:

<S_CODE_TOKEN>

That you think about this realisation? Is it working as expected?
",3y3,2015-04-24 18:06:23
617,2015-04-22 09:30:04,"~~I think you're going to save on every profile completed~~ I think I have to have breakfast before coding... I test it just now...
",marcominetti,2015-04-24 18:06:23
617,2015-04-22 09:39:05,"Updated and squashed.
",marcominetti,2015-04-24 18:06:23
617,2015-04-22 10:48:23,"I added some inline comments. They are last before merging. You can publish here already squashed version for this pr.

Thank you for all front-end fixes. I'll start to review your features.
",3y3,2015-04-24 18:06:23
617,2015-04-22 16:22:03,"Done ;)
",marcominetti,2015-04-24 18:06:23
617,2015-04-24 18:06:23,"Landed as 99514aa3d211242505c6cf95da1e2ef953023c8f
",3y3,2015-04-24 18:06:23
616,2015-04-17 14:47:27,,marcominetti,2015-04-22 10:24:55
616,2015-04-17 18:42:55,"Please fix brackets style (missed spaces).
We use next syntax in node-inspector:

<S_CODE_TOKEN>

I don't see the reason to use `RuntimeQueryParamsObject` (one long name instead of one other).
It may be reasonable to use short and readable `params`.
",3y3,2015-04-22 10:24:55
616,2015-04-18 07:06:04,"Ok ;)
",marcominetti,2015-04-22 10:24:55
616,2015-04-18 20:03:26,"Looks better. I'm ready to merge this one. Please squash changes.
",3y3,2015-04-22 10:24:55
616,2015-04-22 09:17:07,"squashed
",marcominetti,2015-04-22 10:24:55
616,2015-04-22 10:24:55,"Landed as 88921eb8d097df9e20864fa5b0a38c0e0bd7bbc6
",3y3,2015-04-22 10:24:55
615,2015-04-17 14:39:14,,marcominetti,2015-04-22 10:12:29
615,2015-04-18 19:57:18,"Ok. I'm ready to merge this pr. Please squash changes.
",3y3,2015-04-22 10:12:29
615,2015-04-22 09:15:54,"squashed
",marcominetti,2015-04-22 10:12:29
615,2015-04-22 10:12:29,"Landed as 7d34ad41bd21315f1239e2372b35bac10a4cde60.
",3y3,2015-04-22 10:12:29
614,2015-04-17 08:52:25,"Hi,

There are quite serious issues with node-inspector on recent iojs/nodejs versions. Especially with iojs, it has problems with installation and debugging (debug-brk).

Node-inspector used to be my main instrument for debugging, and I kind of lack it. 

Dear devs, please tell us, what is going on? Is there any light ahead? Maybe you're refactoring things from the ground up? Or you're busy with other projects and we shouldn't await any changes soon?

Thanks for the great tool!
",iliakan,2015-04-28 17:10:58
614,2015-04-17 12:15:55,"Hello @iliakan .

So, today I merged new frontend and I wait some small changes from @marcominetti .
Now then we have new frontend, it is reasonable to extend our functionality by debugging promises, getters/setters and more other. This is a next big step. #450

From small steps:
There is a #560 , that fixes #597, and I hope, it will be merged on next week. (Can you test it and submit what it works?)

Released 0.12.0 with new debugger system is a big problem not only for node inspector, but also for node (iojs/io.js/issues/858, iojs/io.js/issues/781). We have some native features `v8-debug` and `v8-profiler` that already compatible with `iojs` on compilation stage, but breaks compatibility on running from `node-debug` command on windows (iojs/io.js/issues/751)

So I very wait for iojs/io.js/issues/751 it blocks lot of my work on iojs.
",3y3,2015-04-28 17:10:58
614,2015-04-17 12:37:46,"Also we started discussion about new cli api and plugin system. #578 
We communicate with @marcominetti in plugin system feature. Long time we were blocked for new features by `updating frontend` pr.

In other words I work on node-inspector so intensively as it is possible - this is my main os project. Sometimes it has a higher priority than my main job =)
",3y3,2015-04-28 17:10:58
614,2015-04-17 12:44:35,"@3y3 thanks, so great to hear that node-inspector will shine once again soon :+1: 
",iliakan,2015-04-28 17:10:58
613,2015-04-16 17:30:07,"Hi all:
## problem statement

`debugger;` statements are ignored when running `node-debug _mocha some-mocha-script`.

This traditionally has not been an issue for me.  Following is my env, my script, and my results.  If there are logs/etc you would like me to provide, I would be eager to provide them per request.  Very grateful for this project.  Beats the classical debugger by a longshot :smile: 
## env

<S_CODE_TOKEN>
## supporting context - experiment 1
### script

<S_CODE_TOKEN>
### results

I was going to attach screenshots, but it's frivolous.  Running `node-debug _mocha some-mocha-script` plays right thru the script, with no stop on `debugger;`.  Running `node some-mocha-script` stops on the `debugger;` line successfully.
## supporting context - experiment 2

Manually boot this little guy
### script

<S_CODE_TOKEN>
- `node-inspector`  process brought up and left running.  open a new terminal and try the following:
- running  `mocha --debug debuggins.js`, the script stops at the debugger _sometimes_.  but there's some race condition perhaps going on, as otherwise it stops periodically here in `timers.js`, just one line above my reported issue in #611:
  ![screen shot 2015-04-16 at 8 54 41 am](https://cloud.githubusercontent.com/assets/1003261/7185213/43c1c5c2-e416-11e4-8a2e-9dbfcb5456ac.png)
- running `mocha --debug-brk ./debuggins.js` produces #611 **sometimes** when it doesn't fail immediately

<S_CODE_TOKEN>

I'm not sure which of the above `mocha --debug-xxxx file` syntaxes are right (if either).
",cdaringe,2015-05-14 06:59:49
613,2015-04-17 07:08:08,"Hello, @cdaringe , thanks for verbose description.
At first glance your first experiment is related with #597
The second looks like a node problem. Can you reproduce it on 0.10._?
Or maybe using `node debug` command on 0.12._?

I inspect the same problem at current time - `TypeError: undefined is not a function` in place where it is impossible, but I can't prepare a small bug sample to retarget this problem to nodejs.
",3y3,2015-05-14 06:59:49
613,2015-04-30 18:41:59,"Hello, I have a similar issue, and I am running on the following versions

node -v
v0.12.2

node-inspector -v
Node Inspector v0.10.0

And my command is 

<S_CODE_TOKEN>

 and I do not know how to instruct node-inspector to stop at my test. It is very frustrating...

Thanks for any help!

Cheers,
Andrej
",azachar,2015-05-14 06:59:49
613,2015-05-07 22:39:21,"https://github.com/node-inspector/node-inspector/pull/637
",3y3,2015-05-14 06:59:49
613,2015-05-14 06:59:49,"Fixed in 0.10.1

Next part doesn't fixed at current time, but this is out of scope of this issue.

<S_CODE_TOKEN>
",3y3,2015-05-14 06:59:49
612,2015-04-15 20:00:55,,mrioux007,2015-04-15 20:02:16
611,2015-04-14 18:13:17,"This is could likely be due to the async nature of some promisy code, but consider the below screenshot:

![screen shot 2015-04-14 at 11 06 51 am](https://cloud.githubusercontent.com/assets/1003261/7143894/d44d110e-e296-11e4-9f00-0f53c512fd8a.png)

somewhere/sometime, an error occured.  node-inspector breaks here, which is doesn't leave the user with an indication of what has occurred or how to proceed.  perhaps some annotations or explanation in that block could be helpful?
",cdaringe,2015-04-24 18:09:01
611,2015-04-16 00:10:07,"I'm not sure how to reproduce this. Is there publicly-available code on which this error occurs?
",johnmarkos,2015-04-24 18:09:01
611,2015-04-16 17:32:55,"hi @johnmarkos, i posted one unreliable condition which produces this in the #613 thread.  the code that leads to that condition above isn't open-sourced yet, otherwise I would have slapped up a gist!  however, i will spend some more time trying to reproduce its conditions if #613 isn't sufficient
",cdaringe,2015-04-24 18:09:01
611,2015-04-24 18:09:01,"#613 describe this error more verbose.
",3y3,2015-04-24 18:09:01
610,2015-04-13 14:19:22,"As requested by @bajtos and noted by @dpwolfe in #534.
",ELLIOTTCABLE,2015-04-14 06:31:03
610,2015-04-13 20:59:16,"Thanks for creating this PR.  LGTM
",dpwolfe,2015-04-14 06:31:03
610,2015-04-14 06:31:03,"Landed via 24e83f3, I have made few improvements:
- moved the warning below the icons
- reformatted it to a regular text instead of a reply
- wrapped all lines at 80 characters

Thank you for the contribution!
",bajtos,2015-04-14 06:31:03
609,2015-04-10 06:47:07,"Hi.

My application is already on cloud. After installing node-inspector using npm, and running it, I got the message in the title.

Regards,
Frn
",fernievidal,2015-04-10 06:57:13
608,2015-04-07 21:58:33,"Not sure if I should file this against npm or not, even though the output clearly say to.

MacBook-Pro:web_rtc joey$ npm install node-inspector
npm http GET https://registry.npmjs.org/node-inspector
npm http 304 https://registry.npmjs.org/node-inspector
npm http GET https://registry.npmjs.org/serve-favicon
npm http GET https://registry.npmjs.org/express
npm http GET https://registry.npmjs.org/async
npm http GET https://registry.npmjs.org/glob
npm http GET https://registry.npmjs.org/rc
npm http GET https://registry.npmjs.org/strong-data-uri
npm http GET https://registry.npmjs.org/debug
npm http GET https://registry.npmjs.org/ws
npm http GET https://registry.npmjs.org/biased-opener
npm http GET https://registry.npmjs.org/yargs
npm http GET https://registry.npmjs.org/which
npm http GET https://registry.npmjs.org/v8-profiler
npm http GET https://registry.npmjs.org/v8-debug
npm http GET https://registry.npmjs.org/semver
npm http 304 https://registry.npmjs.org/serve-favicon
npm http 304 https://registry.npmjs.org/express
npm http 304 https://registry.npmjs.org/async
npm http 304 https://registry.npmjs.org/glob
npm http 304 https://registry.npmjs.org/rc
npm http 304 https://registry.npmjs.org/strong-data-uri
npm http 304 https://registry.npmjs.org/debug
npm http 304 https://registry.npmjs.org/ws
npm http 304 https://registry.npmjs.org/biased-opener
npm ERR! Error: No compatible version found: serve-favicon@'^2.1.1'
npm ERR! Valid install targets:
npm ERR! [""2.0.0"",""2.0.1"",""2.1.0"",""2.1.1"",""2.1.2"",""2.1.3"",""2.1.4"",""2.1.5"",""2.1.6"",""2.1.7"",""2.2.0""]
npm ERR!     at installTargetsError (/usr/local/Cellar/node/0.10.12/lib/node_modules/npm/lib/cache.js:719:10)
npm ERR!     at /usr/local/Cellar/node/0.10.12/lib/node_modules/npm/lib/cache.js:641:10
npm ERR!     at saved (/usr/local/Cellar/node/0.10.12/lib/node_modules/npm/node_modules/npm-registry-client/lib/get.js:138:7)
npm ERR!     at Object.oncomplete (fs.js:107:15)
npm ERR! If you need help, you may report this log at:
npm ERR!     http://github.com/isaacs/npm/issues
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com

npm ERR! System Darwin 14.0.0
npm ERR! command ""/usr/local/Cellar/node/0.10.12/bin/node"" ""/usr/local/bin/npm"" ""install"" ""node-inspector""
npm ERR! cwd /absolute/path/to/web_rtc
npm ERR! node -v v0.10.12
npm ERR! npm -v 1.2.32
npm http 304 https://registry.npmjs.org/which
npm http 304 https://registry.npmjs.org/v8-profiler
npm http 304 https://registry.npmjs.org/v8-debug
npm http 304 https://registry.npmjs.org/semver
npm http 200 https://registry.npmjs.org/yargs
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!  /absolute/path/to/web_rtc/npm-debug.log
npm ERR! not ok code 0
",exceptDefeat,2015-04-24 18:10:59
608,2015-04-07 22:18:26,"@exceptDefeat try to update your node version and npm . 
take a look at [n](https://www.npmjs.com/package/n) or [nvm](https://github.com/creationix/nvm)
",fernandoneto,2015-04-24 18:10:59
608,2015-04-24 18:10:59,"This is a problem with npm itself. Update your npm version.
",3y3,2015-04-24 18:10:59
607,2015-04-05 11:00:30,"Hi,

I notice preloading is done on js files, would this be possible for ts (typescript) files?

When i first enter I see my main.js and my main.ts so this is great.

my main.js does a require on child,  child has 2 files .. ts (typescript) and js(compiled version).  child.js is displayed straight away but child.ts only comes into the source view when the require is executed.

I would like to point out, everything is working as expected with regards to debugging ts files with the sourcemaps, just the list on the left is not preloaded with ts files.

any ideas?

Thanks
",appsolutegeek,2015-04-27 07:57:33
607,2015-04-27 07:57:33,"> child.js is displayed straight away but child.ts only comes into the source view when the require is executed.

This is a limitation of the current implementation of Chrome DevTools and Node.js (io.js), there isn't any easy way to fix this.

Workaround: set the breakpoint in the js file. IIRC, then UI will ""move"" the breakpoint to the ""ts"" file for you immediately after the js file is loaded.
",bajtos,2015-04-27 07:57:33
606,2015-04-05 01:58:30,"I've just upgraded to Node Inspector v0.9.2  from version 0.7.4

I've also just upgraded from node 10.26 to 12.2

My command line is

`node-debug --web-host localhost --no-preload server.js`

It no longer stops on the first line

I've tried adding --debug-brk to the command, but it does not do anything
",EmbeddedMike,2015-04-24 17:58:45
606,2015-04-24 17:58:41,"Fixed in `0.10.0` release. Reopen this bug if the problem still persists for you.
",3y3,2015-04-24 17:58:45
605,2015-04-05 01:54:56,"I've just upgraded to Node Inspector v0.9.2  from version 0.7.4

My command line is:

`node-debug --web-host localhost --no-preload server.js`

In my node project directory, with lots of node modules, it now takes forever to load.

I've tried it in another directory, and performance is acceptable.

I've tried 

`no-preload: true`

in the configuration file, and it tells me that no-preload has been deprecated

I've tried

'preload false'

And it has no effect
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/10490200-preload-not-working?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",EmbeddedMike,
605,2015-04-27 07:59:25,"Is the problem present in the latest 0.10 version of Node Inspector?
",bajtos,
605,2015-04-30 00:00:43,"Takes a lot longer to start than 0.7x on the same configuration.

<S_CODE_TOKEN>

nodeinspectorRC:

<S_CODE_TOKEN>

Running Kubuntu variant

On Mon, Apr 27, 2015 at 3:59 AM, Miroslav Bajtoš notifications@github.com
wrote:

> Is the problem present in the latest 0.10 version of Node Inspector?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/605#issuecomment-96545378
> .
",EmbeddedMike,
604,2015-04-05 01:43:54,"I've just upgraded to Node Inspector v0.9.2 
My command line is:

`node-debug --no-preload server.js`

This used to work. I now get this message:

`Malformed URL
http:/debug?port=5858`

I now have to use

`node-debug --web-host localhost --no-preload server.js`
",EmbeddedMike,2015-06-10 15:03:46
604,2015-04-27 08:04:04,"I am not able to reproduce the problem using the latest Node Inspector version 0.10.0 running on Node 0.10.38.

<S_CODE_TOKEN>

Is there anything special about your environment? What is your operating system?
",bajtos,2015-06-10 15:03:46
604,2015-04-30 00:08:23,"OK I have an answer for this.
The regression is in the handling of the .nodeinspectorrc

My old version:

<S_CODE_TOKEN>

It used to work, but does not with 0.10

However, if I remove this line

<S_CODE_TOKEN>

Or if I change it to:

<S_CODE_TOKEN>

Then it works.
My env

<S_CODE_TOKEN>
",EmbeddedMike,2015-06-10 15:03:46
604,2015-05-04 13:14:29,"Cool, thanks for investigating the issue. Could you submit a patch to fix the issue please? The configuration is loaded by [lib/config.js](https://github.com/node-inspector/node-inspector/blob/master/lib/config.js).
",bajtos,2015-06-10 15:03:46
604,2015-05-04 14:41:55,"I would be happy to do this but am on a trip and will not have access for a
month.

On Mon, May 4, 2015, 9:14 AM Miroslav Bajtoš notifications@github.com
wrote:

> Cool, thanks for investigating the issue. Could you submit a patch to fix
> the issue please? The configuration is loaded by lib/config.js
> https://github.com/node-inspector/node-inspector/blob/master/lib/config.js
> .
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/604#issuecomment-98701737
> .
",EmbeddedMike,2015-06-10 15:03:46
604,2015-06-07 10:17:42,"Even if I run node-debug --webhost localhost [myapp], I still have to access my app served at 127.0.0.1:[port] rather than localhost:[port]. Is that what this is getting at or should I open a new issue?

Meanwhile, running my app with node normally allows it to be accessed with localhost or 127.0.0.1 interchangeably.
",jcrben,2015-06-10 15:03:46
604,2015-06-08 15:49:01,"I think the problem may be caused by using IPv4-only `127.0.0.1` as a default hostname([source code](https://github.com/node-inspector/node-inspector/blob/21dee3d0cd33d9a08ce5057e4a89dfc0b3756abb/lib/config.js#L439). `localhost` is resolved as an IPv6 address, where we don't listen on. That does not explain why `--webhost localhost` does not work though.
",bajtos,2015-06-10 15:03:46
604,2015-06-10 15:03:46,"Will be fixed in 0.11.0
",3y3,2015-06-10 15:03:46
603,2015-04-04 19:06:03,"update to node v0.12.2 resulted in:

Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.3.4/node-v14-darwin-x64/debug.node'

$ ls /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug
v0.4.2

$ npm ls | grep node-inspector
v8-debug@0.4.2 /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug

$ node -v
v0.12.2

:(

$ node-inspector -v
Node Inspector v0.9.2
",ApolloTang,2015-05-06 08:19:22
603,2015-04-06 18:27:55,"+1 @ApolloTang Found a workaround for this? Google doesn't instantly help
",kureus,2015-05-06 08:19:22
603,2015-04-07 04:35:26,"$ nodemon debug myfile.js 
is my work around for now :( 
let me know if you figure this out.. 
",ApolloTang,2015-05-06 08:19:22
603,2015-04-25 14:55:27,"You need to update to version 0.10
",fetis,2015-05-06 08:19:22
603,2015-04-27 01:30:36,"node-inspector v0.10.0 on nodejs v0.12.2 stable does not work...

<S_CODE_TOKEN>

Then the Chrome browser's window opens automatically and shows the following error on its console  tab.

<S_CODE_TOKEN>
",akirattii,2015-05-06 08:19:22
603,2015-04-27 06:48:49,"@akirattii , this looking like a problem with v8-debug submodule. I saw this problem then change my node version from 0.12.0 to 0.12.2. Can you try to completely reinstall node-inspector:

<S_CODE_TOKEN>
",3y3,2015-05-06 08:19:22
603,2015-04-27 12:11:52,"Hey @3y3 , thank you for telling.
I've tried as you write, but the installation is failed. 

$ sudo npm uninstall -g node-inspector
unbuild node-inspector@0.10.0
$ sudo npm install -g node-inspector
&gt; ws@0.4.32 install /usr/local/lib/node_modules/node-inspector/node_modules/ws
&gt; (node-gyp rebuild 2> builderror.log) || (exit 0)

Is there any workarounds?
",akirattii,2015-05-06 08:19:22
603,2015-04-27 21:33:04,"@3y3 , I retried the reinstall again and waited for a long time, then it's been finished with some warnings.

<S_CODE_TOKEN>

Now I've tried to node-debug...

<S_CODE_TOKEN>

But I could not debug the app.js because the webserver seems not to stand-by (localhost:3000 was down.) . 
The browser's console shows a following error.

<S_CODE_TOKEN>
",akirattii,2015-05-06 08:19:22
603,2015-04-29 15:36:21,"@3y3 Running node 0.12.2 and node-inspector 0.10.0 Tried a full removal and reinstall of node inspector as suggested. On node-debug app.js still receive 

<code> Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.2/node-v14-linux-x64/debug.node' </code>

Anything else I can do to provide more context?
",kureus,2015-05-06 08:19:22
603,2015-04-29 18:28:38,"@kureus , I wonder to look on your install log.
",3y3,2015-05-06 08:19:22
603,2015-04-30 13:36:58,"@3y3 Ok, digging into this a little I actually have this in /usr/local

> /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.2/node-v11-linux-x64/debug.node

whereas node-inspector is expecting to find 

> /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.2/node-v14-linux-x64/debug.node

v11 vs v14?
",kureus,2015-05-06 08:19:22
603,2015-04-30 13:48:29,"@kureus , thanks. Your problem confirmed as bug. I need to update `v8-debug` and `v8-profiler` bundled `node-pre-gyp` version to 0.6.5. This version knows about node 0.12.2.
",3y3,2015-05-06 08:19:22
603,2015-05-05 07:42:33,"Please try to completely reinstall node-inspector now. I updated `v8-debug` and `v8-profiler` versions to be compatible with node 0.12.2 and latest iojs
",3y3,2015-05-06 08:19:22
603,2015-05-05 15:24:30,"Hello, I am experiencing this problem too:
- Run my program with node-debug -c server.js 
  or  node --debug-brk server.js, then in another tab run node-inspector

Node inspector hangs with one error:

<S_CODE_TOKEN>

I've waited up to 5 minutes after starting to see if ""anything happens"" but the chrome tab is locked up and you have to kill the chrome tab, 'waiting' doesn't seem to help.  

I am posting here as this issue https://github.com/node-inspector/node-inspector/issues/534 says to reopen if you are experiencing issues.

I've attempted multiple uninstall / reinstalls of node-inspector on windows 8.1 and kubuntu 14.04 using nvm to install node inspector 0.10 and node stable 0.12.2.

In summary, other than chrome tab locking up and the one console.log error in the chrome tab I have no other indications of failure and the node program I am debugging does not continue so that it ends up listening on a port but does not crash with an error.

If anyone has any insight in fixing this issue please let me know.  Also If anyone wants me to perform some procedures to attempt to work around or fix the issue let me know.

-Adam
",ashelley,2015-05-06 08:19:22
603,2015-05-05 15:35:03,"@ashelley , thanks for verbose description. At first glance this is a problem with `ws` module. I wonder to see your install log. 
You also can try to update `ws` module

<S_CODE_TOKEN>

Next information that can be useful is [debug logs](https://github.com/node-inspector/node-inspector/wiki/Debug-logs)
",3y3,2015-05-06 08:19:22
603,2015-05-05 16:29:33,"So after looking at this a bit more I don't necessarily think that the problem is related to the ws version.  I actually got node-inspector to load on the front end but I believe there is a problem with how node-inspector decides which files to load which is the cause of problem.  However, the following is a result of testing with ws@0.7.1 installed:

I ended up waiting about 10 minutes this time and this is what I observed.  Node inspector starts eating memory and hits my memory limit and starts thrashing the CPU (probably related to gc'ing do to memory usage).

<S_CODE_TOKEN>

After looking at the debug logs I think i know what the problem is:

There is a line in it that starts like this in the debug log:

<S_CODE_TOKEN>

This is where node-inspector goes crazy... I ran node-inspector from a directory like this:

<S_CODE_TOKEN>

For some reason node-inspector tried to load every javascript file from the directory above where it's working, see this screenshot:

<S_CODE_TOKEN>

Note that it's loading files from /var/www/test instead of /var/www/test/my-test-project.  I think I believe the fact that node-inspector is loading files from the wrong directory (one level up) which is causing the problem.  In the above directory i have 1000's and 1000's of javascript files that node inspector sends the directory listing to the front end.  

However, note that this isn't the _only_ slow part... just above the problematic directory loading there are these entries:

<S_CODE_TOKEN>

Perhaps this is related to the above listed problem (i'm not sure).

In summary, I think there's a bug somewhere in node-inspector in deciding what source files to send to the frontend.
",ashelley,2015-05-06 08:19:22
603,2015-05-05 16:44:26,"Update:

Maybe this is my fault?.. i need to diagnose this more... I had no package.json in my current directory from where I ran my script:

<S_CODE_TOKEN>

After adding a package.json file to this directory node-inspector behaved correctly. Oooops.  I also reverted the version of ws to the included version of 0.10 and had no issue.  

@3y3 sorry for wasting your time.  I didn't realize that package.json needed to exist in the directory in which you run your node script from.

-Adam
",ashelley,2015-05-06 08:19:22
603,2015-05-05 17:07:12,"@ashelley , no problem. You can also use `--no-preload` flag, if you want to work in directory without `package.json`
",3y3,2015-05-06 08:19:22
603,2015-05-06 08:19:22,"I close issue because work on 0.12.2 confirmed by @ashelley .
If original problem wasn't resolved, call me to reopen this issue.
",3y3,2015-05-06 08:19:22
603,2015-05-08 17:27:21,"This issue should be reopened. I am getting the same problem:
Error: Cannot find module '/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.3/node-v43-darwin-x64/debug.node'

$ node-inspector -v
Node Inspector v0.10.0
$ node -v
v0.12.2

in the directory above, only node-v14-darwin-x64 is listed. Not v43.
",bobpappas,2015-05-06 08:19:22
603,2015-05-08 17:38:55,"When renaming the directory to node-v43-darwin-x64, I get:
Error: Module version mismatch. Expected 43, got 14.
",bobpappas,2015-05-06 08:19:22
603,2015-05-08 18:19:44,"@bobpappas , you have `iojs` installed anywhere?
",3y3,2015-05-06 08:19:22
603,2015-05-08 18:29:03,"Yeah, I'm trying to use electron and their instructions for using node-inspector. Why is io.js causing issues?
",bobpappas,2015-05-06 08:19:22
603,2015-10-05 02:00:31,"I was running into this issue using iTerm 2 on Mac OSX.  I had one terminal window running `$node-inspector` and another where I was doing `$nodemon --debug-brk main.js`.  The problem turned out to be that on one terminal window I was using an old version of node (which is why I was getting the error with node-inspector), and on another window I was using the latest stable version of node (which is why I thought I had everything set up correctly).

So solution was to make sure I was using the latest stable version (e.g. `$nvm use stable`) of node on BOTH terminal windows.
",martellalex,2015-05-06 08:19:22
602,2015-04-03 09:50:44,"I use nvm to manage many node, but when I open the browser,it reports this problem:

<S_CODE_TOKEN>
",javie007,2015-04-24 17:48:11
602,2015-04-24 17:48:11,"Fixed in `0.10.0` release. 
",3y3,2015-04-24 17:48:11
601,2015-04-02 09:46:53,"Hello! 

If my server is listening socket, instead of port, node inspector behavior is incorrect. Behind the node in my dev env stands nginx, which writes to that socket. If node server starts to listen some port directly, without nginx, inspector works ok.

Thanks =)
",gobwas,2015-04-27 07:58:36
601,2015-04-02 09:47:56,"I mean:

<S_CODE_TOKEN>

instead of:

<S_CODE_TOKEN>
",gobwas,2015-04-27 07:58:36
601,2015-04-27 07:58:36,"Node Inspector does not support listening on a socket, you have to listen on a TCP port.
",bajtos,2015-04-27 07:58:36
600,2015-04-01 12:23:37,"I'm getting this error when installing with npm on ubuntu, using node 0.8.

<S_CODE_TOKEN>
",jfromaniello,2015-12-06 21:06:32
600,2015-04-24 17:19:22,"@3y3 does v8-debug support Node v0.8?

@jfromaniello what is your npm version? Can you reproduce the problem using `npm@1.4` too?
",bajtos,2015-12-06 21:06:32
600,2015-04-24 17:37:52,"`v8-debug` has `engine: >=0.10`. It may be reasonable to update `node-inspector` engine. Or we need to support 0.8?
",3y3,2015-12-06 21:06:32
600,2015-04-24 17:39:06,"@bajtos 

<S_CODE_TOKEN>
",jfromaniello,2015-12-06 21:06:32
600,2015-04-27 07:23:50,"> @3y3 v8-debug has engine: >=0.10. It may be reasonable to update node-inspector engine. Or we need to support 0.8?

How much work is needed to support Node v0.8?

If it's too much work and/or you don't have time to maintain support for Node v0.8, then we should drop support for Node v0.8 in Node Inspector indeed.

@jfromaniello I believe `node-inspector@0.7` supports Node v0.8 well, can you please give it a try?
",bajtos,2015-12-06 21:06:32
600,2015-05-14 07:04:39,"There are some small problems with `v8-debug`, but supporting of `v8-profiler` on 0.8.0 is very hard. I prefer to update `node-inspector` engine
",3y3,2015-12-06 21:06:32
599,2015-04-01 05:56:56,"It would be nice if node-inspector had a configuration option to set the browser to use. It looks like there was some discussion of this but this particular feature has not been implemented.

Related issues: #346 and #528

One use case is to open up in Chrome Canary by default.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/10299293-configuration-option-to-set-default-browser?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",axelson,
599,2015-06-11 15:15:36,"I prefer using Chrome Canary for JS debugging as well and would love to see this. I'll do some poking around in the code and see what it will take to get this working if no one else is looking at this.
",medington,
599,2015-09-06 22:02:58,"Opening Canary instead of normal Chrome is a valid use case indeed

To implement it we'd first need a cross-OS (linux/mac/windows, 32bit/64bit) support in https://github.com/benderjs/browser-launcher2/ and in turn in https://github.com/vweevers/win-detect-browsers for detecting Canary AND _distuingishing it from non-Canary_ Chrome. This is doable but would need some changes in both mentioned modules.

Or we could simply try to detect all Chromes and take the one with the highest version number returned. Anyway what needs to be done is to have a way to point to a particular version of a browser (if there are many) in browser-launcher's launcher method - instead of just telling it ""launch chrome"" and making the module decide which version to choose
",jakub-g,
599,2015-09-07 15:46:51,"@jakub-g Thanks for the hints. Never got around to looking into this before (haven't been using NI much lately). Will try to spend some time investigating in the next few weeks.
",medington,
598,2015-04-01 03:42:43,"origin question is here: [http://stackoverflow.com/questions/29371262/what-is-the-difference-between-node-debug-index-js-and-run-node-inspector-th](http://stackoverflow.com/questions/29371262/what-is-the-difference-between-node-debug-index-js-and-run-node-inspector-th) 

If run node with `--debug-brk` to attach to the inspector, then I could not set breakpoints and `debugger` being ignored.  

But if use `node --debug`, then the inspector works perfectly. :) 

The problem appears in osx 10.10.2. 
",BenBBear,2015-04-01 13:16:32
598,2015-04-01 07:24:10,"What is your Node.js version? There is a known issue #534 that `--debug-brk` does not work correctly in Node v0.12 and io.js 1.x.
",bajtos,2015-04-01 13:16:32
598,2015-04-01 07:51:53,"my node is v0.12 :O

sorry for the duplicate issue :)

在 2015年4月1日 下午3:24:19, Miroslav Bajtoš (notifications@github.com) 写到:

What is your Node.js version? There is a known issue #534 that --debug-brk does not work correctly in Node v0.12 and io.js 1.x.

—
Reply to this email directly or view it on GitHub.
",BenBBear,2015-04-01 13:16:32
598,2015-04-01 13:16:32,"No worries, I am closing this as a duplicate then.
",bajtos,2015-04-01 13:16:32
597,2015-03-31 21:58:24,"i'm unable to get it to break. anything i can do to supply more info?

thanks.
## 

i should note that i had no trouble under node v0.10.21 and node-inspector v0.7.3
",mattkime,2015-03-31 22:48:09
597,2015-03-31 22:48:09,"resolved by reverting to node v0.11.13 and node-inspector v0.7.3

seems like there's a lot of discussion of this problem.
",mattkime,2015-03-31 22:48:09
597,2015-05-14 06:56:12,"Fixed in 0.10.1
",3y3,2015-03-31 22:48:09
596,2015-03-31 15:34:54,"node-inspector is one of very few application which support node.js debugging with sourcemaps. Would it be difficult to tweak it so that node-inspector can be used to actually _write_ code (ie. as an IDE)?
",m1sta,2015-04-27 07:53:15
596,2015-04-07 07:55:13,"Well there's `--save-live-edit`, which lets you save changes you make in node-inspector.
",mrotaru,2015-04-27 07:53:15
596,2015-04-27 07:53:15,"We have hardly enough time to maintain the current set of features provided by Node Inspector, building a full IDE is way beyond our possibilities.
",bajtos,2015-04-27 07:53:15
595,2015-03-28 20:27:26,"Node Inspector v0.9.1
Node v0.12.0
Windows 7 64bit

For some outputs I am using console.log with '[31;1m' and various other ANSI escape sequences for formatting color.

<S_CODE_TOKEN>

It would be interesting if these could be used in the console on node-debug rather than outputing [31;1m as part of the string.

Could be done with span tags and inline css or a class.

I am tempted to do just the foreground and background colors.

Any advice/comments/objections?
",LiamKarlMitchell,2015-04-27 07:29:54
595,2015-04-24 17:17:30,"AFAIK, [debug](https://www.npmjs.com/package/debug) supports color output in browser console too, it may be a good source of inspiration.
",bajtos,2015-04-27 07:29:54
595,2015-04-24 17:43:30,"Duplicates #502
",3y3,2015-04-27 07:29:54
595,2015-04-25 09:04:21,"Sure im happy for it to be a plugin feature :)
",LiamKarlMitchell,2015-04-27 07:29:54
595,2015-04-27 07:29:54,"Closing as a duplicate then.
",bajtos,2015-04-27 07:29:54
594,2015-03-26 15:14:01,"Workaround for #535.

Reviewed by @3y3
",marcominetti,2015-03-30 21:28:27
594,2015-03-26 15:24:35,"Some fixes before merging:
1. Make `checkCompatibility` private method, i.e rename it to `_checkCompatibility`
2. Squash commits history
",3y3,2015-03-30 21:28:27
594,2015-03-26 15:44:38,"@3y3 done and learned how to squash ;)
",marcominetti,2015-03-30 21:28:27
594,2015-03-30 21:30:37,"Merged. Thanks @marcominetti .
Sorry for delayed review - lot of work on node-inspector internals.
",3y3,2015-03-30 21:28:27
593,2015-03-24 07:37:05,"I'm using node-inspector with nodemon, but when nodemon restarts the server, node-inspector doesn't pick up the changes, even if I refresh the window. I need to manually stop and restart the server and then refresh the node-inspector window so it picks up the changes. Is there a way to update node-inspector without having to restart the server manually?

Node Inspector v0.9.1
Node v0.12.0
Nodemon v1.3.7
OS X 10.10.2
",jesucarr,2015-03-24 08:22:41
593,2015-03-24 08:22:41,"Sorry the issue was somewhere else
",jesucarr,2015-03-24 08:22:41
592,2015-03-22 16:50:26,"Not working with errors: 

`parseFile()` is deprecated. Use `parseString()` instead.
`parseString()` is deprecated. It's not actually async. Use `parse()` instead.
",IliaIdakiev,2015-05-14 04:42:38
592,2015-04-24 17:15:37,"Where do you see the errors? How can we reproduce the problem on our machines?
",bajtos,2015-05-14 04:42:38
592,2015-05-05 11:36:17,"I think this error related with globally installed `express`.
So I don't think that `^` modificator is a good strategy for `express` dependency.
",3y3,2015-05-14 04:42:38
592,2015-05-05 12:48:25,"I installed the latest express and it does not print these warnings for me. Therefore I don't think this is related to `^` operator used in the express dependency version in node-inspector.
",bajtos,2015-05-14 04:42:38
592,2015-05-13 21:27:43,"Please try to reproduce this on node-inspector 0.10.1
",3y3,2015-05-14 04:42:38
592,2015-05-14 04:42:34,"After I updated globally installed packages the error disappeared. Thanks.
",IliaIdakiev,2015-05-14 04:42:38
591,2015-03-20 18:08:19,"When it didn't succeed as a sudo command I tried as root, but that didn't work either. The output is listed below.

<S_CODE_TOKEN>
",mlippert,2015-04-27 08:00:30
591,2015-03-25 14:59:25,"I make such a mistake．．．
",chenweihan,2015-04-27 08:00:30
591,2015-03-30 21:54:05,"I'm having the same issues. Tried older versions of nodejs too but no luck?
",ddu08,2015-04-27 08:00:30
591,2015-04-03 00:11:57,"I did eventually get it to work. 1st I tried installing node 0.12. That still didn't work although it had worked ok on a brand new VM I had created.

So I reverted nodejs back to 0.10.25 from the Ubuntu repositories (trusty) instead of from [NodeSource](https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories). That initially didn't work until I also installed npm (1.3.10) from the Ubuntu repositories. (This is all on a Linux Mint 17.1 KDE 32bit VirtualBox VM.)

I'm not sure what the problem was or what weird state my machine was in, but after I installed node-inspector I switched back to 0.12.0 and all continued to work fine.
",mlippert,2015-04-27 08:00:30
591,2015-04-27 08:00:30,"I'm closing this issue as resolved then.

Feel free to reopen it if you can reproduce the problem using the latest Node Inspector version (0.10 as of today).
",bajtos,2015-04-27 08:00:30
590,2015-03-20 15:20:35,"Clicking save doesn't do anything:

![screenshot 2015-03-20 16 17 42](https://cloud.githubusercontent.com/assets/193923/6754448/e1f4d8ce-cf1c-11e4-9ff2-d47122fd0014.png)

Node Inspector v0.9.2
Node v0.11.13
",salomvary,2015-04-24 17:50:50
590,2015-04-24 17:50:50,"Fixed in `0.10.0` release. Reopen this bug if the problem still persists for you.
",3y3,2015-04-24 17:50:50
589,2015-03-19 19:57:50,"The node-inspector always stop at this line, instead of stopping at the place where I put the breakpoint.

![captura de tela 2015-03-19 as 16 50 15](https://cloud.githubusercontent.com/assets/3612098/6739725/7f6e12ec-ce59-11e4-8e47-7aaeb1f94e04.png)

I'm at Mac OSx Yosemite with node 0.12.0
",joaom182,2015-05-13 21:28:15
589,2015-03-19 20:39:29,"Yup same problem here, I'm on node 0.12.0 and OSX 10.9.5
",brian-mann,2015-05-13 21:28:15
589,2015-03-19 20:54:00,"Some small example of code?
",3y3,2015-05-13 21:28:15
589,2015-03-19 22:18:07,"This is my server.js

<S_CODE_TOKEN>
",joaom182,2015-05-13 21:28:15
589,2015-03-20 12:39:05,"Same here, stops on the same line instead of the very first one. Debugger statements also don't work. Node 0.12.0.
",salomvary,2015-05-13 21:28:15
589,2015-03-22 16:19:23,"I installed nvm and the iojs via nvm, and now everything is back to normal operation.
",joaom182,2015-05-13 21:28:15
589,2015-03-23 20:16:07,"Same here. Node 0.12.0 and node-inspector 0.9.2 on MacOS

I'm getting used to using node with debug option ('node debug filename.js'). It's not as nice as node-inspector (when it works), but it works.

Colin G
",colingoldberg,2015-05-13 21:28:15
589,2015-03-31 06:35:23,"I have the same problem on windows 7 with node-inspector 0.9.2 and nodw 0.12.0
",lyenliang,2015-05-13 21:28:15
589,2015-04-01 03:47:46,"similiar probelm here #598  
",BenBBear,2015-05-13 21:28:15
589,2015-05-02 23:08:20,"I'm experiencing the same problem when trying to debug my gulp tasks.  Breakpoint in chrome and `debugger;` line in code both result in breakpoints getting hit in other files (like gulp.js instead of my gulpfile.js).

Windows `8.1`
Node Inspector `0.10.0`
Node `0.12.1`
Gulp `3.8.11`
",MicahZoltu,2015-05-13 21:28:15
589,2015-05-07 22:40:05,"https://github.com/node-inspector/node-inspector/pull/637
",3y3,2015-05-13 21:28:15
589,2015-05-13 21:28:15,"Fixed in 0.10.1
",3y3,2015-05-13 21:28:15
588,2015-03-15 06:49:37,"I'm trying to set breakpoint on first line, but neither --debug-brk neither setting break point in DevTools helps. It still executing script without breaking on first line. Is there any custom function to stop execution for debugging like xdebug_break() in PHP?

<S_CODE_TOKEN>

OS: Windows 7
nodejs: v0.12.0
node-inspector: v0.9.2
",rafis,2015-03-15 12:41:16
588,2015-03-15 12:42:06,"Running separately `node-inspector.cmd` and `node --debug-brk app.js` and two `debugger;` instructions at the top of app.js helped.
",rafis,2015-03-15 12:41:16
587,2015-03-13 16:35:04,"**I'm opening this issue for reference (maybe someone will face the same problem soon - feel free to close it immediately)**

I followed the advice from README on debugging mocha - I run `node-debug _mocha` for that

However there was a really weird issue happening for me (I used node 0.10.37 or 0.12 via nodist, npm 1.4.6, Windows 7)

Node Inspector works with mocha 2.1.0 but not 2.2.0 and it's really strange.
##  **TL;DR if you're on Windows, update npm (using cmd, not git bash!) with `npm install -g npm`** 

With 2.2.0 I get the following error:

<S_CODE_TOKEN>

Let's run the following commands to see the difference:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<pre><b>
@IF EXIST ""%~dp0\node.exe"" (
  ""%~dp0\node.exe""  ""%~dp0\node_modules\mocha\bin\_mocha"" %*
) ELSE (
  node  ""%~dp0\node_modules\mocha\bin\_mocha"" %*
)
</b></pre>


<S_CODE_TOKEN>

<pre><b>
""%~dp0\node_modules\mocha\bin\_mocha""   %*
</b></pre>


It seems to be a weird bug of old npm versions in work. I updated to latest as of today, reinstalled mocha and it solved the issue.
",jakub-g,2015-04-24 17:12:13
587,2015-04-24 17:12:13,"Thanks for sharing the problem and the solution. I am closing the issue as resolved.

Feel free to submit a patch if you think it will be useful to include some part of this info in README too.
",bajtos,2015-04-24 17:12:13
586,2015-03-13 13:32:02,"The glob module now has options to return realpaths and follow symlinks. With glob v5.0.3. this feature is usable with node-inspector.

Preloaded scripts in symlinked directories now show up properly in the inspector source tree and breakpoints work, fixing issue #370.

f.w.i.w. i also added a little debug tracing in ScriptFileStorage. e.g. to trace during tests do:

<S_CODE_TOKEN>

Fix #370
",jldec,2015-04-27 07:13:00
586,2015-04-24 17:07:04,"Thank you for the pull request, sorry for taking so long to review it.

Can you please rebase it on top of the current master and address my comment above?
",bajtos,2015-04-27 07:13:00
586,2015-04-24 18:22:25,"rebased and comment addressed.
I also moved to the latest glob version which has updated absolute-path polyfill.
https://github.com/isaacs/node-glob/commit/855230118851fb7d4a6cd7616851f03bca12ad06
Hopefully this will improve things under windows. (i don't have a test setup for windows) 
",jldec,2015-04-27 07:13:00
586,2015-04-27 07:13:43,"Landed via 5e368e8. I have improved the README text a bit, squashed the commits and added more details to the commit message.

Thank you for the contribution!
",bajtos,2015-04-27 07:13:00
585,2015-03-12 21:19:15,"After upgrading to 0.9.2 i can no longer generate heap snapshots. i get stuck on ""building postorder index"". 

Using node 0.11.16

![node-inspector-bug](https://cloud.githubusercontent.com/assets/1712244/6628423/42a53b86-c96a-11e4-9ded-ae6a7b6cf84b.png)
",Zysen,2015-04-24 17:01:27
585,2015-04-24 17:01:27,"Node Inspector did not support versions newer than v0.11.13 until recently. Please install from the latest master and reopen this bug if the problem still persists.

<S_CODE_TOKEN>
",bajtos,2015-04-24 17:01:27
585,2015-04-24 17:45:27,"0.10.0 released. Try it.
",3y3,2015-04-24 17:01:27
584,2015-03-12 08:31:26,"Env:

Windows 7
Chrome 41.0.2272.89 m
Node-inspector v0.9.2

Error:

Uncaught TypeError: undefined is not a function treeoutline.js:943 TreeElement.isEventWithinDisclosureTriangle treeoutline.js:643 TreeElement.treeElementToggled
",aovchinnikov,2015-04-24 18:00:41
584,2015-03-23 19:32:36,"same error on

MacOS 10.10.2
Chrome 41.0.2272.101 (64bits)
Node-inspectore v0.9.2
",F4b1n0u,2015-04-24 18:00:41
584,2015-04-02 08:40:17,"Same on Chrome Version 41.0.2272.89 on Ubuntu 14.04.2 LTS 
uname --all says: 
Linux tim-lap-051 3.13.0-39-generic #66-Ubuntu SMP Tue Oct 28 13:31:23 UTC 2014 i686 i686 i686 GNU/Linux
",fjurcovici,2015-04-24 18:00:41
584,2015-04-02 09:17:40,"Got it working by replacing the first two lines in the function TreeElement.prototype.isEventWithinDisclosureTriangle in the file node_modules/node-inspector/front-end/treeoutline.js, right below the comment:

<S_CODE_TOKEN>

 with:

<S_CODE_TOKEN>

Apparently, Chrome doesn't support all the W3C specs required by node-inspector's UI.

To find the file, look into the global node_modules.

I don't have time to create a fork and a pull request, and I think the fix I did locally is too dirty to pull into master anyway. But it should give devs a pretty good hint, IMO, where they need to do what. And it should help ppl having the same problem fix their local setup.
",fjurcovici,2015-04-24 18:00:41
584,2015-04-10 15:57:10,"Same here (Win 7 x64). It worked fine in my previous version of chrome (36 I think), but since updating to 41 it's pretty broken. Right now with repeated clicks I can sometimes get a tree to expand, but I can't get them to collapse. (This is with node inspector v0.7.4 running on linux.)
",jmm,2015-04-24 18:00:41
584,2015-04-12 04:40:14,"+1 on OS X and Chrome latest. 
",Chris911,2015-04-24 18:00:41
584,2015-04-24 17:51:48,"Fixed in `0.10.0` release. Reopen this bug if the problem still persists for you.
",3y3,2015-04-24 18:00:41
584,2015-04-24 18:54:46,"Awesome, thanks @3y3! I just updated and tried it real quick (in Chrome 42 now) and so far so good. (To get the ball rolling I did have to pass a `--web-host` option when starting it that I didn't have to before.)
",jmm,2015-04-24 18:00:41
584,2015-05-22 12:11:57,"works great for me now, big thanks :)
",F4b1n0u,2015-04-24 18:00:41
583,2015-03-12 02:48:07,"Hi,

I'm trying to install latest with npm, but I keep getting error related to lodash.repeat:

<S_CODE_TOKEN>
",rochal,2015-05-20 15:52:00
583,2015-04-24 16:58:57,"Weird, the module is on npm: https://www.npmjs.com/package/lodash.repeat 

Please try `npm cache clean` and then install again. Do you use any proxy or a caching registry?
",bajtos,2015-05-20 15:52:00
583,2015-05-20 15:52:00,"No activity by long time. Feel free to reopen it, if issue doesn't solved.
Issue looks like resolved.
",3y3,2015-05-20 15:52:00
583,2015-06-16 19:16:17,"I am having this issue as well
",rbaprado,2015-05-20 15:52:00
583,2015-06-16 19:48:37,"@rbaprado , have you tried `npm cache clean`?
",3y3,2015-05-20 15:52:00
583,2015-06-16 20:55:04,"Yep
",rbaprado,2015-05-20 15:52:00
583,2015-12-15 09:20:32,"I've tried  <code>npm cache clean</code>, install lodash.repeat both and global and local, uninstall and install npm

But it keeps on  loading these errors.
Please help  :)

<code>
$ ionic start myApp tabs

Error: Cannot find module 'lodash.repeat'
    at Function.Module._resolveFilename (module.js:337:15)
    at Function.Module._load (module.js:287:25)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at Object.<anonymous> (C:\Users\Rose Ann\AppData\Roaming\npm\node_modules\io
nic\node_modules\ionic-app-lib\node_modules\ionic-cordova-lib\node_modules\npm\n
ode_modules\npmlog\node_modules\gauge\node_modules\lodash.pad\node_modules\lodas
h._createpadding\index.js:9:14)
    at Module._compile (module.js:425:26)
    at Object.Module._extensions..js (module.js:432:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:311:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)

Cannot find module 'lodash.repeat' (CLI v1.7.12)

Your system information:
Cordova CLI: Not installed
Gulp version:  CLI version 3.9.0
Gulp local:   Local version 3.9.0
Ionic CLI Version: 1.7.12
Ionic App Lib Version: 0.6.5
OS: Windows 8.1
Node Version: v5.0.0
</code>

<code>
$ cordova -v

module.js:339
    throw err;
    ^
Error: Cannot find module 'path-is-absolute'
    at Function.Module._resolveFilename (module.js:337:15)
    at Function.Module._load (module.js:287:25)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
    at Object.<anonymous> (C:\Users\Rose Ann\AppData\Roaming\npm\node_modules\co
rdova\node_modules\cordova-lib\node_modules\cordova-common\node_modules\glob\glo
b.js:50:18)
    at Module._compile (module.js:425:26)
    at Object.Module._extensions..js (module.js:432:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:311:12)
    at Module.require (module.js:366:17)
    at require (module.js:385:17)
</code>
",roseanngabon,2015-05-20 15:52:00
583,2015-12-15 11:19:06,"I just now solved the issue. This is what I did
1. Go to Control Panel > System and Security > System > Environment Variables. 
2. Add to PATH this: <code>%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\; </code>
3. <code>npm i lodash -g</code>
4. <code>npm i lodash.repeat -g</code>
5. <code>npm i lodash._basetostring -g</code>
6. <code>npm i lodash._createpadding -g</code>

Note: I use to install this required module for cordova setup
",roseanngabon,2015-05-20 15:52:00
582,2015-03-09 17:39:42,"Hi there,
I added ECMAScript 6/7 experimental support through https://github.com/babel/babel project (@sebmck).

To enable it, append &babel=7 to the node-inspector URL. The babel param value can be 5, 6 or 7 to enable specific ECMAScript version.

The code is transpiled only if babel param is >5 and only whether ECMAScript 6 or 7 code is detected. ECMAScript detection is carried out through acorn-babel parsing exceptions.

It requires to manually load babel/polyfill with require('babel/polyfill').

TODO: automatic build/loading from latest babel and acorn-babel, proper handling of Promise returned values (resolve to console/reject to error), automatically inject babel/polyfill, write documentation, choose to migrate transformation back to the backend (prior versions)
",marcominetti,2015-03-22 08:49:07
582,2015-03-09 17:47:03,"Just to try it.

test.js file:

<S_CODE_TOKEN>

Environment start:

<S_CODE_TOKEN>

Launch node-inspector and open http://127.0.0.1:8080/debug?port=5858&babel=7

Execute in the node-inspector console:

<S_CODE_TOKEN>

Then try:

<S_CODE_TOKEN>

To avoid console errors just pause execution through debugger, but await (and promises) will be paused too.
",marcominetti,2015-03-22 08:49:07
582,2015-03-10 11:09:43,"Hello, @marcominetti . I'm not sure that making `babel` a part of `node-inspector` is a right thing.
But this is a good point to start extended discussion about plugins.
For example, we have [one other](https://github.com/node-inspector/node-inspector/issues/502) feature issue, about highlighting `debug` module colors in console, but this is useful only for users that use `debug` module in their projects, so this can't be implemented as main part of node-inspector.

I'd like to provide to users simple way to extend `ni` by plugins.
This is a work on two-three fronts:
1. frontend extension
2. inspector backend extension
3. [app extension]

Your current pr takes only first part. So, how I see frontend extension mechanism:
1. We can store all plugins in subdirectory with same name. Example:

<S_CODE_TOKEN>
1. Each plugin has name in npm `node-inspector-<plugin name>`. Example `node-inspector-babel`
2. Each plugin has `module.json`, like [this](https://github.com/3y3/node-inspector/blob/frontend/front-end-node/module.json), [inspector.json](https://github.com/3y3/node-inspector/blob/frontend/front-end-node/inspector.json) and optionally [protocol.json](https://github.com/3y3/node-inspector/blob/frontend/front-end-node/protocol.json). We need to compile extension structure on node-inspector startup, or for each new [ws session](https://github.com/node-inspector/node-inspector/blob/master/lib/debug-server.js#L20-L23)
3. Add new paths to [express router](https://github.com/3y3/node-inspector/blob/frontend/lib/debug-server.js#L61-L64), like

<S_CODE_TOKEN>

Where `compiled_in_memory_inspectorjson` is the result of something like this:

<S_CODE_TOKEN>

So for example if we have `babel` plugin:
`cd node-inspector/plugins/babel`
`echo module.json`

<S_CODE_TOKEN>

`BabelPlugin.js` is your current diff for overrides.

`echo inspector.json`

<S_CODE_TOKEN>

`echo protocol.json`

<S_CODE_TOKEN>

And `compiled_in_memory_inspectorjson` is equal to:

<S_CODE_TOKEN>

We need to compile same way `protocol.json`.

So, @marcominetti , are you ready to implement plugin system? This work is relative to `frontend` pr. Unfortunately in current time I work on other `ni` issues, and can't finish `frontend` pr at soon, but I'm ready to review prs relative to it.
So keep in mind that this is a discussion about plugins, and your thoughts are important.
Welcome to discussion on [gitter](https://gitter.im/node-inspector/node-inspector)

/cc @bajtos 
",3y3,2015-03-22 08:49:07
582,2015-03-10 14:18:39,"@metaford , shut up fucking bot.
",3y3,2015-03-22 08:49:07
582,2015-03-10 16:08:24,"> @metaford , shut up fucking bot.

@3y3 you can report an abuse using this link: https://github.com/contact?report=metaford I already did that myself.
",bajtos,2015-03-22 08:49:07
582,2015-03-10 16:09:39,"> @3y3 you can report an abuse

Already reported
",3y3,2015-03-22 08:49:07
582,2015-03-10 22:14:48,"Interesting, I need to review your frontend branch to get some thoughts... btw, why are you defining npm naming convention? Is it related to your next startup system proposal (ni install)? Or... are u thinking about a ""build"" phase that merges code from /node_modules/node-inspector-xxx folders into /node-inspector/plugins/?
",marcominetti,2015-03-22 08:49:07
582,2015-03-11 10:17:25,"Ok @3y3, with the node-inspector-<plugin_name> convention you meant defining naming for the custom ni distribution with embedded plugins, did you? Ok, I can do develop the plugin system. Do you want to create a Feature request issue or can continue here?
",marcominetti,2015-03-22 08:49:07
582,2015-03-11 11:21:42,"> Ok, I can do develop the plugin system.

@marcominetti , good news!

Feature request already exists (#180). I'll update information.

> why are you defining npm naming convention?
> 
> Is it related to your next startup system proposal (ni install)?

Yes. But it's out of scope of current feature. 
Current `install` solution - clone repo into plugins folder =)
",3y3,2015-03-22 08:49:07
582,2015-03-11 18:12:30,"> Yes. But it's out of scope of current feature. 
> Current install solution - clone repo into plugins folder =)

IMO that pretty much sucks, as users have to find the place where Node Inspector is installed and they also can't use tagged releases. We really need to find a better solution before we can call plugin implementation as done.
",bajtos,2015-03-22 08:49:07
582,2015-03-11 19:26:56,"> Current install solution - clone repo into plugins folder =)
> 
> > IMO that pretty much sucks

@bajtos , I'm agree. Please read my thoughts in `install` part of #578
",3y3,2015-03-22 08:49:07
582,2015-03-12 17:20:48,"@3y3 @bajtos ...a solution could be integrate npm (through npm link instead of having it in ni deps) and just look for every node module - installed locally (cwd) and globally - that matches node-inspector-plugin-xxx name.

IMO the naming convention could be:
- node-inspector-xxx: custom inspector bundled with plugins (out of scope for the plugin system feature
- node-inspector-plugin-xxx: plugin that extends ni and contains the module.json, protocol.json and inspector.json and related files

At load time, ni will find the matching node-inspector-plugin-xxx modules, read jsons and create proper static express paths for frontend files. In this case I would suggest to define a dedicated frontend/backend folders within the xxx plugin to avoid security concers of serving backend files to the frontend.

To sum up:

<S_CODE_TOKEN>

The same for npm installed modules:

<S_CODE_TOKEN>

In case of naming conflicts (same plugin embedded in ni /plugins folder and available as npm installed pkg), the ni embedded wins (cause npm installed pkg could update and break currently installed ni).

In module.json could be useful to add - by specification - a property for supported ni version(s). This property could be checked with semver during load phase.

Any thoughts? 
",marcominetti,2015-03-22 08:49:07
582,2015-03-12 20:32:25,"> node-inspector-plugin-xxx

That's a super long name. How about `ni-xxx` and using npm keywords like ""node-inspector"" + ""plugin"" for discoverability?
",bajtos,2015-03-22 08:49:07
582,2015-03-12 20:59:51,"@bajtos mmm... is it really reliable to use keywords for discoverability? I mean composition of node-inspector and plugin could be not directly related to the plugin system of node-inspector...

What about

> ni-plugin-xxx

Could be shorter then loopback-connector-xxx... ;)

Is node-inspector already published as ""ni""?
",marcominetti,2015-03-22 08:49:07
582,2015-03-12 21:07:00,"Use keywors for discoverability on npmjs.org.

The way how node-inspector discovers plugins should be based entirely on module name patter, either `ni-xxx` or `ni-plugin-xxx`. 

> Is node-inspector already published as ""ni""?

No, and I don't think it will ever be.
",bajtos,2015-03-22 08:49:07
582,2015-03-12 22:51:05,"Ok, got it. Next monday I'll start working on the plugin system. :+1: 
",marcominetti,2015-03-22 08:49:07
581,2015-03-09 16:02:21,"Node-inspector uses the method ServerResponse.sendFile, which does not exist in versions of Express prior to 4.8.0. However, package.json depends on ^4.0.

Closes https://github.com/node-inspector/node-inspector/issues/541 (theoretically ^^)
",alarre,2015-03-10 09:37:46
581,2015-03-10 09:38:34,"Landed via 00ee378, I have fixed the commit message to follow the [50/72 rule](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html). Thank you for the contribution.
",bajtos,2015-03-10 09:37:46
580,2015-03-09 08:37:00,"It seems that when the filename extension is not .es6, inline source maps are not taken into account. I have two files:
test.js

<S_CODE_TOKEN>

and 
test2.es6

<S_CODE_TOKEN>

`test2.es6` produces an inline source map but it is not used by `node-inspector`. If I rename it to `test2.js`, the source map works as expected.
",jfaissolle,2015-06-14 21:50:33
580,2015-04-24 16:46:52,"I am afraid I don't have enough time to investigate this issue in detail,I suspect the problem may be related to what I have found in coffee-script transpiler - see https://github.com/node-inspector/node-inspector/issues/224#issuecomment-38785891. Here is the behaviour I would expect:
- The transpiled javascript source has the source map embedded via data url (per rfc2397, see also strong-data-uri). No test2.map file is created.
- The transpiled source is executed, the script file name is set to test2.js (must be a different file name!)
- The source map points to test2.es6 as the original source.

Possibly related: https://github.com/node-inspector/node-inspector/issues/100#issuecomment-31475540 and https://github.com/babel/babel/issues/306
",bajtos,2015-06-14 21:50:33
580,2015-06-14 21:50:33,"Fixed in 0.10.2.
Feel free to reopen this issue, if I'm wrong here.
",3y3,2015-06-14 21:50:33
579,2015-03-08 09:48:50,"In utilities.js
------------------------------->
function importScript(scriptName)
{
    if (_importedScripts[scriptName])
        return;
    var xhr = new XMLHttpRequest();
    _importedScripts[scriptName] = true;
    xhr.open(""GET"", scriptName, false);   --> Line No. 1297
<----------------------------------------

Chrome 40.0.2214.111 m, OS: windows xp
On my chrome's console, it shows:
utilities.js:1297 Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check http://xhr.spec.whatwg.org/.

So, I got a problem.
UI doesn't load or doesn't work and refresh didn't help.
Yeah, i'm sure that i do have adblock disabled as well as any other content blocking scripts and plugins.
Does it matter?
",zhoukekestar,2015-04-24 16:38:34
579,2015-04-24 16:38:34,"I believe the problem was already fixed on the master branch via #492. Please try `npm install -g node-inspector/node-inspector` and reopen the issue if the problem persists.
",bajtos,2015-04-24 16:38:34
578,2015-03-06 12:22:26,"This is very subjective description of some features related with `node-inspector` startup, what I'd like to see in next versions.
I'm not sure that all of this is realisable, or described correctly.
### `ni` shortcut

To start node-inspector use

<S_CODE_TOKEN>
### Documented `--config` option

<S_CODE_TOKEN>
#### Multy config sources

<S_CODE_TOKEN>
### Subcommands
#### `debug` subcommand

Like `node-debug` command

<S_CODE_TOKEN>
#### `config` subcommand

Like `git config`, but with some special features.

<S_CODE_TOKEN>

So, will be useful to search `.node-inspectorrc` in app folder (Or maybe `.nirc`. I'd like `.nirc`:+1:)
#### `url` subcommand

<S_CODE_TOKEN>
#### `install` command

For future extensions system.
It's not simple alias for npm install. We well need to integrate subpackages to `node-inspector` structure

<S_CODE_TOKEN>
#### `target` command

Some people have more that one version of nodejs on their machines. In this case they need to reinstall node-inspector for changing prebuilt binaries target.

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/9263098-my-vision-of-next-node-inspector-startup-system?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",3y3,
578,2015-03-07 14:54:19,"I like the short `ni` keyword, and the overall simpler grouping of commands. 

:+1: 
",auchenberg,
578,2015-03-09 14:53:48,":+1: Please just think about programmatic node-inspector startup. The implementation of the next startup system could be implemented through a exportable interface to load node-inspector as a module.

var ni = require('node-inspector');
ni.debug([target][,options]); < in case of missing target the ni could be started within the current process
ni.config = f(options[,global:false][,cb]);
ni.url = f([options][,cb]);
ni.install(modules[,options][,cb]) < similar to npm

The return values could be Promise in case of missing cb, and sync implementation could be separated the node way (exec,execSync).

I currently launch node-inspector spawning process (maybe good for exception isolation?).
",marcominetti,
578,2015-03-12 16:04:02,"Sounds good :+1: 
",bajtos,
578,2015-04-19 18:02:47,"I think ""node-inspector"" is a far better name than ""ni"".  ""nodejs-debugger"" would have been even better (but best not to change it now).  If someone is running node-inspector from the command line so often that the extra keystrokes are a burden, they can define an alias in their shell init file.
",greaber,
577,2015-03-04 03:50:23,"Please see joyent/node#9322

There's a possible issue with using node-inspector and node v0.12 to debug gulp. It's not yet clear where exactly the issue is and I wanted to check here before digging in too far.
",jasnell,2015-03-04 09:04:01
577,2015-03-04 09:04:01,"Closing as a duplicate of #534.
",bajtos,2015-03-04 09:04:01
576,2015-03-03 22:03:26,"I have this running with node v0.12 and things look great so far. So glad to see that it is now compatible with ES6 Proxies!

I set up public access to the Debugger UI from a subdomain. The first time I access it, no problems. However, each time I reload the page or access from another browser, it appears to duplicate the session, and report all of them in each window. So if I loaded the UI three times, everything that my app logs to the console will appear 3 times. Along with the duplicate logs, I get these errors:

From the node inspector console:

<S_CODE_TOKEN>

From Chromes developer tools console:

<S_CODE_TOKEN>

These error codes are reported for each duplicate session. So, if I loaded the inspector UI 3 times, the above messages would appear 2 times. These errors are reported in intervals, but I have not yet figured out how their timing relates to my code. Will look into further, but wanted to create an issue in the meantime in case someone has a better idea of what's happening.
",MeanwhileMedia,2015-05-14 07:19:23
576,2015-03-04 10:21:07,"What is your node-inspector version?
",3y3,2015-05-14 07:19:23
576,2015-03-04 20:21:30,"Hi @3y3 - v0.9.1
",MeanwhileMedia,2015-05-14 07:19:23
576,2015-05-14 07:11:31,"Way to fix this:
1. Deprecate multi connection system in node 0.12+ debugger.
2. Emulate `disconnect` message on client connection closing.

Also can be helpful to send real `disconnect` command from `node-inspector`.
But anyway regression in nodejs needs to be fixed.
",3y3,2015-05-14 07:19:23
576,2015-05-14 07:19:23,"Duplication of https://github.com/node-inspector/node-inspector/issues/543
",3y3,2015-05-14 07:19:23
575,2015-03-01 06:10:41,,hansrwindhoff,
575,2015-03-04 09:06:08,"@3y3 you are running on Windows, could you please review?
",bajtos,
575,2015-03-15 04:03:09,"Here is a screen shot of the four involved windows: 
- the command prompt that starts the three processes, 
- the iojs or node window running the app, 
- the node-inspector (here running in iojs)
- and the chrome dev tools sitting on a break point and showing some info in the watch window
  ![image](https://cloud.githubusercontent.com/assets/2334281/6654626/a176c540-ca95-11e4-9222-b97dedf197ca.png)

this is under windows 8.1 64bit
",hansrwindhoff,
575,2015-03-15 04:05:04,"... the same windows running in node (0.12.0):

![image](https://cloud.githubusercontent.com/assets/2334281/6654685/672334b0-ca99-11e4-91e2-13296f84414e.png)
",hansrwindhoff,
574,2015-02-28 20:56:06,"Apparent with node versions 0.12.0, 0.11.16, and 0.10.29

I also tried various versions of node-inspector back to v0.8.3

Steps to reproduce:
- start node-inspector
- start node --debug app (my web app)
- open node inspector in the browser
- start CPU profiler
- hit a couple endpoints on my api

After a few (<10) requests, my app hangs with the cpu at 100%

Don't know if it's helpful, but I sampled the process in activity monitor, which you can see in [this gist](https://gist.github.com/dillonkrug/ca7dad3482d48e146adc)

(edit: I should point out that I sampled many times, repeating the whole process, and it always looked the same - __psynch_mutexwait seems to have something to do with... something)

I did some very unscientific testing, and it appears that this problem happens even when the only thing the app is doing is serving a static file.
",dillonkrug,2015-12-06 21:06:00
574,2015-03-04 09:17:18,"Can anybody else reproduce this problem?
",bajtos,2015-12-06 21:06:00
574,2015-03-12 11:29:07,"I have seen the same behaviour with node 0.12. I put it down to a v8-profiler not supporting the latest version of v8 used in node 0.12.
",rcrichton,2015-12-06 21:06:00
574,2015-04-24 18:01:34,"Fixed in `0.10.0` release. Reopen this bug if the problem still persists for you.
",3y3,2015-12-06 21:06:00
574,2015-04-24 19:47:14,"I'm on node `v0.12.2` using node-inspector `v0.10.0` and I can start profiling, but after stopping it continues to say ""recording..."" underneath the profile icon and node-inspector freezes.
",allthetime,2015-12-06 21:06:00
574,2015-04-27 09:32:20,"@allthetime  , can you completely reinstall node-inspector

<S_CODE_TOKEN>

Say me if it will help you.
",3y3,2015-12-06 21:06:00
574,2015-06-05 13:10:19,"Same issue here, using node 0.12.4, node-inspector 0.10.1 (tried to reinstall aswell) and v8-profiler 5.2.9 on OS X.

Most of the time, profiling will hang on ""recording..."" after stopping manually using the inspector.

Profiles started/stopped via profiler.startProfiling('name') will not appear in the inspector at all.
",carlhopf,2015-12-06 21:06:00
574,2015-06-08 08:13:54,"I also hit this problem ~every time when doing more than 5-10 concurrent requests to my express app. node 0.12.2, node-inspector 0.10.1
",kimmobrunfeldt,2015-12-06 21:06:00
574,2015-06-12 17:06:28,"Not sure if it's the same issue but, when start profiling code that's stopped in a breakpoint, source tab is disabled and there is no way to run the code.

node-inspector v0.10.1
node v0.12.4
chrome v43

See attached image:
![screen shot 2015-06-12 at 2 02 03 pm](https://cloud.githubusercontent.com/assets/223235/8135242/1be268ae-110c-11e5-994b-333a0e9b4d8a.png)
",elmasse,2015-12-06 21:06:00
574,2015-06-16 08:59:58,"I think I hit the same snag on node-inspector 0.10.2 with node 0.12.2.
",frontierpsycho,2015-12-06 21:06:00
574,2015-06-16 21:14:02,"Same here. Used to work file on .10. When I went to .12 the CPU profiler just freezes my process.
",eabovsky,2015-12-06 21:06:00
574,2015-06-17 18:10:17,"Getting the same as @elmasse.

Reproduced with `node-debug gulp` using:
- Mac OS X v10.10.3 (Yosemite)
- Chrome 42.0.2311.90 (64-bit)
- `node-inspector` - v0.10.2
- `node` - v0.12.2, v0.12.4

If it helps, I noticed that if you refresh the page you can continue debugging and the ""Profiles"" page goes back to it's original state.
",KylePDavis,2015-12-06 21:06:00
574,2015-06-17 19:03:34,"+1. Same setup as @KylePDavis 
",docksteaderluke,2015-12-06 21:06:00
574,2015-06-26 19:48:53,"Also +1, same setup as @KylePDavis. 
",tysonstewart,2015-12-06 21:06:00
574,2015-06-26 19:57:54,"@tysonstewart , can you please confirm issue on node 0.12.5?
",3y3,2015-12-06 21:06:00
574,2015-07-03 00:19:35,"on a Mac (Yosemite, node 0.12.2, newly installed node-inspector) I see:
Error: Cannot find module '/opt/local/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.4.6/node-v14-darwin-x64/debug.node'
",JeffML,2015-12-06 21:06:00
574,2015-07-03 01:35:39,"@3y3 Apologies; missed your reply. Confirmed, it still happens on 0.12.5. I'm using Chrome 43 now.
",tysonstewart,2015-12-06 21:06:00
574,2015-07-05 09:50:19,"I have the same problem under node 0.12.5, node-inspector 0.10.2.
",sebastian-nowak,2015-12-06 21:06:00
574,2015-07-05 13:46:40,"Maybe anyone can provide small example of code?
",3y3,2015-12-06 21:06:00
574,2015-07-22 18:52:05,"I'm guessing this may be related: https://github.com/joyent/node/issues/14576

Upgrading Node from v0.12.0 to v0.12.7 appears to have fixed the problem completely
",dillonkrug,2015-12-06 21:06:00
574,2015-07-22 22:52:24,"@dillonkrug , thank you for information!
Waiting feedback from issue starter or other subscribers.
",3y3,2015-12-06 21:06:00
574,2015-07-22 23:24:39,"Tested with: 
node v0.12.7 
node-inspector v0.11.1
OSX 10.10.4

Issue still there for me. 
Steps:
- `node-debug index.js` (with debugger statement line 1) - or `node-debug --debug-brk index.js`
- go to profiles
- Select 'Collect JavaScript CPU Profile'
- press start

Source tab is disabled (as all other tabs except Profile). No way to keep running the program without stoping the profile.

My 2 cents.
Max
",elmasse,2015-12-06 21:06:00
574,2015-07-23 00:13:22,"I used the profiler pretty heavily today and, after upgrading node, everything seemed fine.

The source tab being disabled during profiling is unrelated to the original issue, so I would be fine closing this particular ticket, and then others who are concerned about that can open a new one for that problem.
",dillonkrug,2015-12-06 21:06:00
574,2015-09-04 22:12:03,"@elmasse have you found a way to collect a cpu profile? I'm running into the same issues as you, I assumed collecting the profile would start the script but I just get profiling data related to node-inspector, nothing about my script
",mbroadst,2015-12-06 21:06:00
574,2015-09-04 23:28:01,"@mbroadst I have been using the v8-profiler and save it to a file manually, then load it on chrome. Still, it doesn't work well all the time. 

This seems to be related to Chrome Dev Tools. I tried iron-node and experiencing the exact same issue.
",elmasse,2015-12-06 21:06:00
574,2015-09-11 15:48:34,"On Mac OS X I was having this problem on node v0.12.4. Just updated to v0.12.7 and it fixed the problem. Using node-inspector 0.12.3 in both cases.
",felipou,2015-12-06 21:06:00
574,2016-01-18 20:02:14,"Seeing this issue on node 5.1.0. 
No problems on 0.12.7
",gebrits,2015-12-06 21:06:00
574,2016-05-09 18:32:29,"I also had the hanging problem, with Node 0.12.2.  Switching to 4.2.3 has solved the problem for me.
",robertjd,2015-12-06 21:06:00
573,2015-02-28 20:07:21,"When clicking ""New issue"" button, GitHub presents a link
to `CONTRIBUTING.md` file if it's present. Let's leverage this
and remind users of the best practices.

(see https://github.com/blog/1184-contributing-guidelines)
",jakub-g,2015-03-04 09:54:46
573,2015-02-28 22:10:24,"I vote up for this!
@bajtos , thoughts?

P.S. for last month I also want to add big banner on top of readme.md. Something like

## PLEASE DON'T SEND ME EMAIL IF NODE-INSPECTOR DOESN'T WORK FOR YOU!!!
",3y3,2015-03-04 09:54:46
573,2015-03-04 09:54:46,"Landed as 88fb962, thank you for the contribution.

I had to fix line endings to unix style. @jakub-g please consider configuring your GIT client to convert Windows EOLs to Unix EOLs for you automatically - see https://help.github.com/articles/dealing-with-line-endings/#platform-windows

@3y3 Yeah, I did not appreciate the direct emails either. I guess you can always ignore them if you or setup a (spam) filter to delete them automatically. I'd rather keep the README in a positive tone.
",bajtos,2015-03-04 09:54:46
573,2015-03-04 10:18:50,"@bajtos , it was a joke =)
",3y3,2015-03-04 09:54:46
572,2015-02-27 14:06:42,"![node-inspector error](https://cloud.githubusercontent.com/assets/7827525/6413671/48c78676-bed5-11e4-9f09-f8997f585bfa.png)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/9015550-pre-built-v8-debug-binary-for-x86-linux?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",digerati73,
572,2015-02-27 14:09:56,"i install this at intel edison yocto linux
",digerati73,
572,2015-02-27 18:00:34,"Unfortunately, we don't have prebuild binaries for x86 Linux.
You have two ways to solve this problem:
1. Install full building environment (read in node-gyp readme)
2. Contribute to `v8-debug` and `v8-profiler` projects to add x86 Linux prebuild binaries.
Informative tutorial:
http://cylonjs.com/blog/2014/11/19/creating-multiplatform-precompiled-binaries-for-node-modules/#.VHM_3dKsVI0
",3y3,
572,2015-02-28 09:21:03,"could you explain more easily ?? it is so difficult to me...
",digerati73,
572,2015-02-28 09:50:26,"I got the same problem
",alvinhui,
571,2015-02-27 13:55:02,"i find node-inspector , it can be used to debug node.js code at chrome ,

is it possible too at edison ?? if so, how can i debug edison at chrome browser, 

at first node --debug server.js

and then run one more terminal . = > how can i? there is only one serial port in edison....

and then run node-inspector...
",digerati73,2015-05-20 15:53:30
571,2015-03-04 09:19:37,"I am not familiar with Intel Edison. Did you try `node-debug server.js`? Also note that Node Inspector does not work over serial port, it requires TCP protocol (HTTP+WebSocket).
",bajtos,2015-05-20 15:53:30
571,2015-05-20 15:53:30,"No activity by long time. Feel free to reopen it, if issue doesn't solved.
",3y3,2015-05-20 15:53:30
570,2015-02-26 22:55:05,"If I start a script using `node --debug-brk` I see that it is paused with the message `debugger listening on port 5858`. As soon as I load the node-inspector page at `http://127.0.0.1:8080/debug?port=5858` the script continues immediately.

This makes it impossible to debug script startup, tests, etc.

When I switch back to node 0.10.33, loading the node-inspector page does not cause the script to continue and I can debug correctly.

Any ideas on how to get node-inspector working with node 0.12.0?

Version details:
node: 0.12.0
v8: 3.28.73
node-inspector: 0.9.1

OS: OSX Yosemite (10.10.2)
",briandela,2015-03-04 09:03:04
570,2015-02-26 22:55:35,"+1
",tmacie,2015-03-04 09:03:04
570,2015-02-26 23:02:35,"This may be similar to #534
",briandela,2015-03-04 09:03:04
570,2015-03-03 08:50:34,"@briandela I had the exact same problem. I can't debug with node v0.12 and node-inspector v0.9.1.
However node v0.10.x and node-inspector v0.9.1 works well.

+1
",arielschiavoni,2015-03-04 09:03:04
570,2015-03-04 09:03:04,"Closing as a duplicate of #534.
",bajtos,2015-03-04 09:03:04
570,2015-03-06 23:24:42,"+1
",castasamu,2015-03-04 09:03:04
569,2015-02-25 13:38:15,"The code of `biased-opener` didn't properly check for error of `x-default-browser` and broke `node-debug` in case where checking for default browser failed for some reason, as in #567

(the fixing commit is https://github.com/jakub-g/biased-opener/commit/72229d498b0aa3716018f449d625413c8b147b05)
",jakub-g,2015-03-04 14:36:27
569,2015-03-04 09:20:39,"@jakub-g what is the status of this issue? I can see that the linked commit has been already released, can we close this issue as resolved?
",bajtos,2015-03-04 14:36:27
569,2015-03-04 10:43:17,"I released a new version of `biased-opener` and this is a PR bumping the version in `package.json` of node inspector. 

In fact this is not needed AFAIU since `package.json` says `""biased-opener"": ""~0.2.2"",` so npm should take `0.2.3` when someone does `npm install`. But I always prefer to be explicit about dependencies hence I opened this PR.

Feel free to merge this PR or close it.
",jakub-g,2015-03-04 14:36:27
569,2015-03-04 14:36:27,"I'd rather close this unmerged to keep the git history shorter.
",bajtos,2015-03-04 14:36:27
568,2015-02-24 04:09:33,"Command ran:
node-debug --web-port=8090 myfile.js

This returned following:

> Node Inspector is now available from http://127.0.0.1:8090/debug?port=5858
> Debugging `myfile.js`
> 
> debugger listening on port 5858
> Command failed: [971:971:0223/200200:ERROR:browser_main_loop.cc(210)] Gtk: cannot open display: :0
> Error: cannot open display: :0
> /usr/bin/xdg-open: 461: /usr/bin/xdg-open: mozilla: not found
> /usr/bin/xdg-open: 461: /usr/bin/xdg-open: epiphany: not found
> /usr/bin/xdg-open: 461: /usr/bin/xdg-open: konqueror: not found
> /usr/bin/xdg-open: 461: /usr/bin/xdg-open: chromium-browser: not found
> [1005:1005:0223/200201:ERROR:browser_main_loop.cc(210)] Gtk: cannot open display: :0
> /usr/bin/xdg-open: 461: /usr/bin/xdg-open: links2: not found
> /usr/bin/xdg-open: 461: /usr/bin/xdg-open: links: not found
> /usr/bin/xdg-open: 461: /usr/bin/xdg-open: lynx: not found
> /usr/bin/xdg-open: 461: /usr/bin/xdg-open: w3m: not found
> xdg-open: no method available for opening 'http://127.0.0.1:8090/debug?port=5858'
> 
> Please open the URL manually in Chrome/Chromium/Opera or similar browser

Visiting http://127.0.0.1:8090/debug?port=5858, however, returns, ""Connection Refused"" error.
",usmanajmal,2015-05-20 15:53:43
568,2015-02-24 08:34:28,"Can you please check if there's a difference when using node inspector 0.8.3 vs 0.9.1?
What version of node do you run?
",jakub-g,2015-05-20 15:53:43
568,2015-02-24 08:36:26,"Right now running: Node Inspector v0.9.0. I will try with the versions you mentioned.
",usmanajmal,2015-05-20 15:53:43
568,2015-02-25 13:42:21,"You can install old version with this command:

`npm install -g node-inspector@0.8.3`

Also, what OS and which version do you run?

Does this command work for you:

`xdg-open http://www.example.org`

It should open the website in your default browser
",jakub-g,2015-05-20 15:53:43
568,2015-05-15 20:45:27,"Is this issue solved?
",3y3,2015-05-20 15:53:43
568,2015-05-20 15:53:43,"No activity by long time. Feel free to reopen it, if issue doesn't solved.
",3y3,2015-05-20 15:53:43
568,2015-05-20 17:21:38,"I couldn't resolve the exact issue but I managed to do a workaround i.e. use following two commands separately to run make the inspector work reliably:

$ /node-v0.10.26-linux-x64/bin/node --debug <JS FILE> --restgw REST-PORT --port PORT -m eth0

$ /node-v0.10.26-linux-x64/bin/node-inspector --web-port=WEB-PORT

I am find with the ticket as closed. Thanks.
",usmanajmal,2015-05-20 15:53:43
567,2015-02-23 22:29:43,"debugger listening on port 5858
Node Inspector is now available from http://127.0.0.1:8080/debug?port=5858
Debugging `server/app.js`

Failed to open socket on port 5858, waiting 1000 ms before retrying

/usr/lib/node_modules/node-inspector/node_modules/biased-opener/index.js:97
        var goodEnough = isDefaultBrowserGoodEnough(browserInfo.commonName, pr
                                                               ^
TypeError: Cannot read property 'commonName' of undefined
    at /usr/lib/node_modules/node-inspector/node_modules/biased-opener/index.js:97:64
    at /usr/lib/node_modules/node-inspector/node_modules/biased-opener/node_modules/x-default-browser/lib/detect-linux.js:9:13
    at ChildProcess.exithandler (child_process.js:662:7)
    at ChildProcess.emit (events.js:98:17)
    at maybeClose (child_process.js:766:16)
    at Socket.<anonymous> (child_process.js:979:11)
    at Socket.emit (events.js:95:17)
    at Pipe.close (net.js:466:12)
",roysG,2015-03-04 09:14:55
567,2015-02-23 23:27:25,"This is bug in `biased-opener`
/cc @jakub-g 
",3y3,2015-03-04 09:14:55
567,2015-02-24 07:03:29,"I will investigate ASAP.

@roysG can you tell the following:
1. Version of ubuntu
2. Version of node
3. What is your default web browser?

For 3 it would be actually useful if you run this in the console and tell the output:

<S_CODE_TOKEN>
",jakub-g,2015-03-04 09:14:55
567,2015-02-24 12:10:06,"Distributor ID: Ubuntu
Description:    Ubuntu 14.04.1 LTS
Release:    14.04
Codename:   trusty

node version: v0.10.36

i am using mac as my private computer and i am using chrome

node.js:838
    var cwd = process.cwd();
                      ^
Error: ENOENT, no such file or directory
    at Function.startup.resolveArgv0 (node.js:838:23)
    at startup (node.js:58:13)
    at node.js:929:3
",roysG,2015-03-04 09:14:55
567,2015-02-25 08:26:01,"Well the issue in biased-opener is  silly one, simply that I didn't check for an error and assumed there would be no error.

@roysG I opened a follow-up issue on my own repo to not clutter here too much
https://github.com/jakub-g/x-default-browser/issues/1
can you please have a look to help me understand the issue better?
",jakub-g,2015-03-04 09:14:55
567,2015-03-04 09:14:55,"Closing as a duplicate of https://github.com/jakub-g/x-default-browser/issues/1. Thank you @jakub-g for taking care of this.
",bajtos,2015-03-04 09:14:55
566,2015-02-23 16:29:54,"A very handy feature would be that during debugging in Chrome, the browser automatically can activate the tab where node-inspector is running when e.g. a breakpoint is encountered in the code.

I found something to do this using a chromium extension:
https://groups.google.com/a/chromium.org/forum/#!topic/chromium-extensions/x36zW3QsF0g

Or from the docs in the Chrome tabs API:
https://developer.chrome.com/extensions/tabs#method-update

Do you think this would be possible to implement in node-inspector without a lot of coding?
",wdbacker,2015-06-10 11:41:27
566,2015-03-04 09:23:12,"Hi @wdbacker, I am not familiar with Chrome extensions and tabs API enough to provide any meaningful advice. I am willing to accept this feature if somebody contributes the implementation though.
",bajtos,2015-06-10 11:41:27
566,2015-03-04 10:35:25,"Hi @bajtos, I just tried out some possible solutions for this feature. I came across a very obvious solution: if the node-inspector page encounters an active breakpoint, the node-inspector's javascript code can just do an alert('breakpoint encountered'); in the javascript code, and the Chrome browser will automatically switch to the node-inspector tab!

Btw, it would be handy if you can enable/disable this alert with a config option e.g. in the settings.
",wdbacker,2015-06-10 11:41:27
566,2015-03-04 10:43:50,"> If the node-inspector page encounters an active breakpoint, the node-inspector's javascript code can just do an alert('breakpoint encountered'); in the javascript code, and the Chrome browser will automatically switch to the node-inspector tab!

But then you have to close the alert window before you can continue your work, right? In my opinion, this would be very annoying, especially if the alert is raised even while the debugger tab is active.
",bajtos,2015-06-10 11:41:27
566,2015-03-04 11:45:56,"Yes, you'll have to press ""Enter"" on the alert once. But you're right, we need one more thing - checking if the debugging window is hidden:

if (document.visibilityState && (document.visibilityState === 'hidden'))
  alert('breakpoint encountered');

Now the alert is triggered only once and will not be annoying anymore.

Btw, the visibility API is supported starting from Chrome 13:
https://developers.google.com/chrome/whitepapers/pagevisibility
",wdbacker,2015-06-10 11:41:27
566,2015-03-04 14:31:43,"ok, the proposal looks reasonable now.

@3y3 what do you think?
",bajtos,2015-06-10 11:41:27
566,2015-03-04 16:47:31,"Be carefull - this realisation stuns websocket connection.
At first glance on current stage of our debugging protocol this will work safely.

The other thing  - this needs to be a configurable behavior.
",3y3,2015-06-10 11:41:27
566,2015-03-05 10:06:47,"Hi @bajtos @3y3, I found a much more elegant solution. As node-inspector needs only works on Chrome or Opera, we can use the new desktop notification API.

See https://developer.mozilla.org/en-US/docs/Web/API/Notification/Using_Web_Notifications

Advantages:
- notification is much more discrete (no alert neede anymore)
- the old alert() blocks the javascript event loop, the new notification doesn't
- no configuration needed in node-inspector, user can simply (dis)allow notification once in node-inspector

I made a small demo page with script code that can be used immediately for node-inspector too.

To see how this works, go to http://srm.stabe.be/ and click on the button. After 5 seconds, Chrome will ask once if you want to allow desktop notifications for this ""website"". If you press ""allow"", the notification will be displayed bottom-right.

Now push the same button a second time and immediately switch to another window/tab in Chrome. After 5 seconds, you'll see the notification bottom-right and you can click on it. You'll be taken immediately to the node-inspector tab!

Btw, the notification script on the demo page is browser independent (the script uses feature checking). You just need Chrome 32 or later, Opera 25 or later for this new feature to work seamlessly, see 
https://developer.mozilla.org/en-US/docs/Web/API/Notification#Browser_compatibility

You'll see the code needed for node-inspector in the page source of my demo page.
What do you think?
",wdbacker,2015-06-10 11:41:27
566,2015-03-05 10:26:14,"Notification API will be best solution! :+1: 

I saw it in work on Gitter - it's very useful.

@bajtos ?
",3y3,2015-06-10 11:41:27
566,2015-03-06 17:58:26,"Sounds good.
",bajtos,2015-06-10 11:41:27
566,2015-03-12 13:03:42,"@bajtos @3y3 Can you point me in the right direction in the Node Inspector's source code so that I can prepare a pull request for this notification functionality? Thx!
",wdbacker,2015-06-10 11:41:27
566,2015-05-14 22:22:31,"Can I throw in a :+1: on this?
",johnrnelson,2015-06-10 11:41:27
566,2015-06-10 11:41:27,"Fixed in ca58013de3579665812dbeef403aae461ce7c08b

Well be released in 0.11.0
",3y3,2015-06-10 11:41:27
565,2015-02-19 22:51:41,"When building a tool that builds itself, I've set up symlinks from `$/node_modules/name` to `$`. This, means that I have infinite recursion in my filesystem. It all works fine and dandy, until I launch `node-debug name`. I've identified that the problem originates in `findAllApplicationScripts`, because by modifying that to always take the `_noPreload` path, the problem goes away (I just changed the `if` to `if (this._noPreload || true)`). For some reason, I'm unable to set this flag from the command line (tried `--no-preload`, `--preload=false` and others).

Anyways, my point is that the directory scanner should probably make sure that symlinks doesn't point back to a already scanned directory.
",Alxandr,2015-03-04 09:25:01
565,2015-03-04 09:25:01,"This should have been fixed by https://github.com/node-inspector/node-inspector/pull/551 (released in v0.9.0).

Please reopen if the problem persists in the latest version.
",bajtos,2015-03-04 09:25:01
564,2015-02-19 12:32:32,"This PR will most likely fail the build, we have two options: either land it to make it clear that Node Inspector is not supported on these versions yet, or keep the PR open until support for io.js & Node v0.12 is landed.

@3y3 Thoughts?
",bajtos,2015-02-19 12:57:53
564,2015-02-19 12:57:56,"Cool, landed.
",bajtos,2015-02-19 12:57:53
563,2015-02-17 16:30:53,"Fixes #523.
",jimthedev,2015-02-23 18:01:03
563,2015-02-19 18:23:05,"@3y3 PTAL
",bajtos,2015-02-23 18:01:03
563,2015-02-19 18:29:51,"As I noted here: https://github.com/node-inspector/v8-debug/pull/12#issuecomment-75100634

I need to update this PR once both my debug and profiler prs are merged to see if tests finish in CI. They do finish locally when both v8 deps use at least node-pre-gyp 0.6.4
",jimthedev,2015-02-23 18:01:03
563,2015-02-19 20:42:21,"`v8-debug 0.4.1` and `v8-profiler 5.2.4` released.
I'll ready to merge this pr, after updating it.
",3y3,2015-02-23 18:01:03
563,2015-02-20 19:46:53,"I'm having trouble figuring out why the startProfiler test is failing. Is seems like everything is properly set up. Can anyone else have a look?
",jimthedev,2015-02-23 18:01:03
563,2015-02-22 12:56:12,"> I'm having trouble figuring out why the startProfiler test is failing. Is seems like everything is properly set up. Can anyone else have a look?

This is out of scope of this commit. I work on this issue in current time. In `v8-debug 0.4.2` I fixed completely main blocking issue for Node Inspector's new features (https://github.com/joyent/node/issues/9156).

I don't understand why tests  doesn't pass for Profiler and HeapProfiler API after v8-debug 0.4.2, but it's not so important now.

Please update v8-debug to 0.4.2 in commit.
Also we don't use dirty merging in node-inspector - please use rebase for clean commit history.
",3y3,2015-02-23 18:01:03
563,2015-02-23 17:39:00,"Ok @3y3 cleaned up my history and changed the version to 0.4.2. Will wait for you on the profiler test failures. 
",jimthedev,2015-02-23 18:01:03
563,2015-02-23 18:00:57,"Landed as 08001e1a37a6e375ff56ee6d71ac2d8560d5cb25
Thank you!
",3y3,2015-02-23 18:01:03
562,2015-02-16 16:41:21,"### node-inspector/node-inspector now has a Chat Room on Gitter

@3y3 has just created a chat room. You can visit it here: [https://gitter.im/node-inspector/node-inspector](https://gitter.im/node-inspector/node-inspector?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/node-inspector/node-inspector?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

If my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.
",gitter-badger,2015-02-23 18:42:31
562,2015-02-19 13:51:52,"@bajtos, how about this?
",3y3,2015-02-23 18:42:31
562,2015-02-19 16:09:27,"Sure, let's do it! :+1: :shipit: 
",bajtos,2015-02-23 18:42:31
562,2015-02-23 18:42:31,"Landed
",3y3,2015-02-23 18:42:31
561,2015-02-16 01:13:14,"Fix typos for words: available, environment.
",wendy,2015-02-23 18:04:59
561,2015-02-23 18:04:57,"Landed as f8fd5b81806a46fdd9430be1a300779ee910eac1
Thank you!
",3y3,2015-02-23 18:04:59
560,2015-02-15 18:13:31,"We are not full compatible, but can use old features.

@bajtos , please review.
",3y3,2015-04-21 13:00:50
560,2015-02-15 20:38:04,"Sorry, not ready to review
",3y3,2015-04-21 13:00:50
560,2015-02-17 15:43:39,"> Sorry, not ready to review

No worries, please leave a comment when it's ready.
",bajtos,2015-04-21 13:00:50
560,2015-04-14 07:07:50,"@bajtos , this partially ready to review.

Strategy of this pr:
1. Refactor session module. Inherit it from EventEmitter.
2. Restructure all modules to receive `session` object instead of `debuggerClient, frontendClient etc.`
3. Fix test after refactoring
4. Fix test for 0.12 - to be sure that we work on 0.12 with new changes (there are some speculative changes. I need help to understand how they work)
5. Emit `resource-tree` event from session instead of PageAgent. Rename to `resource-tree-resolved`
6. Add new tests for `resource-tree-resolved` feature

About fixes for 0.12:
Ok, I can understand why we need to resume debugger after injections [like there](https://github.com/3y3/node-inspector/commit/c95736904bdf37987c4115710bbb381ac17937c0#diff-78792a5f176ac27c2f69d3b51e9c0b1bR200) - this is related to new isolated debugger with his own event loop.
But that happens [here](https://github.com/3y3/node-inspector/commit/c95736904bdf37987c4115710bbb381ac17937c0#diff-e26d3be456d1f6213df7d90212089743R165), how it's possible what `fn` is undefined?
I inspect this situation long time:
- If you try to pass all tests without this change - failure any time
- If you try to pass only tests for InjectorClient without this change - failure some time
- If you try to pass only failing test without this change - all works. WTF?!

It may be that we need help of core node developers here. Unfortunately I can't reproduce this problem in isolated sample.
",3y3,2015-04-21 13:00:50
560,2015-04-14 08:46:59,"I like the idea of moving the different object instances to a single session object. My initial dependency-injection approach did not worked well. Can you please make `SessionStub` more feature complete, so that it can be used as a drop-in replacement for a real `Session` object in as many tests as possible?

The changes made in the production code (`lib/*`) look good to me.

> About fixes for 0.12:
> Ok, I can understand why we need to resume debugger after injections like there - this is related to new isolated debugger with his own event loop.
> But that happens here, how it's possible what fn is undefined?

Perhaps `debug-brk` stops the process before `console.log` is defined?
",bajtos,2015-04-21 13:00:50
560,2015-04-14 09:43:23,"> Can you please make SessionStub more feature complete, so that it can be used as a drop-in replacement for a real Session object in as many tests as possible

Can you, please, describe more verbose this part?
",3y3,2015-04-21 13:00:50
560,2015-04-14 13:48:42,"> > Can you please make SessionStub more feature complete, so that it can be used as a drop-in replacement for a real Session object in as many tests as possible
> 
> Can you, please, describe more verbose this part?

Sure, see https://github.com/node-inspector/node-inspector/pull/560#discussion_r28327413
",bajtos,2015-04-21 13:00:50
560,2015-04-21 08:02:19,"Added description for tests. Rebased to master.
Ready to review.
",3y3,2015-04-21 13:00:50
560,2015-04-21 10:38:05,"I'll change names on next fix step.
Waiting resolution about `FrontendCommandHandler` test.
",3y3,2015-04-21 13:00:50
560,2015-04-21 10:44:07,"No more comments. I'd really like to see `waitResourceTree` renamed because it does not follow English grammar IMHO, but I can live with the current version too.
",bajtos,2015-04-21 13:00:50
560,2015-04-21 10:52:16,"@bajtos , I'm really sorry for my English =) You feel free to correct me any time.
",3y3,2015-04-21 13:00:50
560,2015-04-21 10:52:57,"Ok. I'll make last fixes and merge this.
",3y3,2015-04-21 13:00:50
559,2015-02-12 23:21:36,"Hello,

I'm trying to install node-inspector since an hour on my Win 8.1 x64 machine, but I'm getting all sorts of errors when doing `npm install node-inspector`. Every time I fix an error, a new one appears. I didn't see any special steps for Windows installations, like external dependencies in the documentation so I thought it should be pretty much a single npm command.

I should mention that I'm new to the node and npm world, so it's possible that I'm doing something completely wrong

I'm currently using node version `0.11.9` and I'll try to explain every issue I had so far trying to install node-inspector, because I think it's not just a node-inspector problem and I think you guys could clarify the one or other thing. (I was able to fix most issues on my own but now I'm stuck).

First issue:
Installation failed because the dependent `semver` package could not be installed because the `make` command could not be found. Huh? Ok I tried `npm install semver` to see if that works but it still complained about missing make. I then installed make for Windows, added it to my PATH variable and tried again. But still no luck, this time make was giving me some cryptical error output. At this point I remembered that I had troubles installing gulp at work a couple of days ago, and the solution to that problem kinda baffled me. It also solved my issue here! The thing is that `node 0.11.9` ships with `npm 1.3.14`, but the current version of npm is `2.5.1`! Even the 1.x version is at `1.4.26`, so why is such an old version shipped with node? Once I updated npm to 2.5.1 I was able to install gulp, as well as semver without issues. This totally makes no sense.

Second issue:
Now that semver was installing fine, I tried to install node-inspector again. But this time node-gyp was complaining: Command 'python' not found... Well ok then, I installed latest Python 3.x, tried again, and this  time I got: Error: Python 3.x is not supported... you got to be kidding me. I checked the node-gyp homepage and there is written that I need some old 2.x version. And when running on Windows Visual Studio 2012/2013 is additionally required to run node-gyp. Luckily I already have VS 2013 installed, otherwise I'd probably have given up by now. Maybe it should be mentioned somewhere that python 2.x and VS 2012/2013 is required in order to install node-inspector on Windows.

Third issue:
Okay so I installed python 2.x and tried once again. This time no more python errors, but instead a wall of red text, which seem to be C++ compiler errors. That's where I'm stuck now because I have no clue what to do.

I redirected console output to a file and it's 300kb of text, the npm-debug.log is 845kb, but I guess the last few lines are the most important ones so I will post them here. Let me know if the debug.log is required and I will upload it somewhere.

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8533654-unable-to-install-on-windows-node-0-12?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",simonvizzini,
559,2015-02-13 20:58:12,"I have problems to simon's above. I was using node 10.33 and node-inspector 0.83 and decided (as is often the case) to update to the latest and (greatest?). 
",Charlesjwilliams2,
559,2015-02-17 02:20:51,"install python 2.7.9
https://www.python.org/downloads/release/python-279/
",bORm,
559,2015-02-17 08:02:56,"I changed my node version back to 0.10.36, then node-inspector can be installed correctly. Maybe we can focus on the changes made between node 0.11.9 and node 0.10.36
",lyenliang,
559,2015-02-17 08:47:22,"Why 0.11.9? This is unstable version. We can't support all unstable subversions. From 0.11.9 to 0.11.13 debugging API was changed dramatically.
In current time we support unstable 0.11.13 (maybe 0.11.14) version.
0.11.15-16 reimplements big part of debugger, now I work on supporting this changes.
",3y3,
559,2015-02-17 18:21:09,"I just updated from node v0.10.36 to v0.12.0 on Windows 7 x64 and was unable to install node-inspector (v0.8.3) via npm.  I am using npm v2.5.1.  I tried installing python-2.7.9 per the suggestion above and this solved the installation issue (python v3.4.2 did not solve the issue, you must install 2.7.9).

Although the installation appears to be successful, debugging doesn't appear to be functioning properly.  When starting node-inspector, I see the following console message in Chrome browser:

<S_CODE_TOKEN>

The debugger then steps into node.js' function _tickCallback() {...} and debugging hangs.
",cookch10,
559,2015-02-18 10:20:49,"same problem here :(
",valtido,
559,2015-03-24 03:48:37,"same problem described by @cookch10
",ghsamm,
559,2015-04-24 17:16:27,"Is the problem still present on the latest Node 0.12 version using the Node Inspector version from github master branch?
",bajtos,
559,2015-07-04 23:44:35,"Updating to the latest version of iojs worked for me, the culprit was when building v8-profiler. I still got errors, but some optional dependencies fail to build.
",nevi-me,
559,2015-07-30 11:39:08,"@simonvizzini I'm getting similar errors on my machine.

> This time no more python errors, but instead a wall of red text, which seem to be C++ compiler errors.

<S_CODE_TOKEN>

Regardless the errors **node-inspector** seems to be working fine.

---

<S_CODE_TOKEN>
",stefek99,
559,2015-07-31 18:27:00,"For me node-inspector with node 0.12.7 seems to work fine now on Windows, I also still got some errors while installing, but apparently nothing critical (didn't pay too much attention and haven't saved any logs), So far node-inspector seems to work fine! Really awesome tool :) I don't have the other problems mentioned in the issue. Not sure if this issue can be closed, or if others are still unable to install on Windows?
",simonvizzini,
559,2015-08-25 01:14:09,".. so... ignore the original version of this comment completely. The solution to installing this on windows -- at least for me -- is the same as many packages that have trouble with windows:

<S_CODE_TOKEN>

Apparently one of the optional dependencies kills the install script, ignoring them works swimmingly.
",jamietre,
559,2015-09-20 02:38:06,"@jamietre: passing `--no-optional` alone didn't work. I had also installed Python 2.7.10.

The error included this:

> Building the projects in this solution one at a time. To enable parallel build, please add the ""/m"" switch.
> MSBUILD : error MSB3428: Could not load the Visual C++ component ""VCBuild.exe"". To fix this, 1) install the .NET Framework 2.0 SD K, 2) install Microsoft Visual Studio 2005 or 3) add the location of the component to the system path if it is installed elsewher e.  [C:\Users\A\AppData\Roaming\npm\node_modules\node-inspector\node_modules\ws\node_modules\bufferutil\build\binding.sln]

and

> npm ERR! Failed at the v8-profiler@5.3.1 install script 'node-pre-gyp install --fallback-to-build'.

Hey @node-inspector, what are the actual prerequisites for Windows? That should be listed in the README.
",dandv,
559,2015-09-20 12:30:57,"@dandv I was getting the same error.  Installing VS should fix that one.  In addition I had to install node-gyp, python and a C++ compiler (I didn't have one.)  Following post from a fellow user described the steps to install all the necessary requisites.  Hope it helps.

> Please see the [node-gyp installation](https://github.com/nodejs/node-gyp#installation). Some other helpful resources include [this comment](https://github.com/nodejs/node-gyp/issues/736#issuecomment-141640079) and [this comment](https://github.com/ncb000gt/node.bcrypt.js/issues/340#issuecomment-141660762). Also, if you install VS, you may not have a C++ compiler, in which case you may get an error about ""CL.exe"" not being found. To fix that, open VS, create a ""New Project"", choose something under the Visual C++ category, and then you'll see options to install a C++ compiler (which you should go with). After all of that, you might as well just do a full reboot, and then it should all work like a charm.
",maityarkodeb,
558,2015-02-11 18:51:21,"With Node v0.11.x and Node v12 using node-debug or node-inspector as a separate process, --debug-brk doesn't break before the first statement, it starts running the node process immediately.
",jaslo,2015-02-17 08:49:06
558,2015-02-12 08:19:49,"Got the same issue, for me, it seems that the breakpoint works until the node-inspector GUI is opened. Once the GUI is opened, the code is automatically continued.
My environment:
Node.js 0.12.0, node-inspector 0.8.3, CentOS 6.5 x64, browser is chromium 40 x64.
",compcj,2015-02-17 08:49:06
558,2015-02-12 13:55:45,"I think this might be a change in node causing the problem. ""node debug [script]"" works OK with a REPL.
",dazhazit,2015-02-17 08:49:06
558,2015-02-14 22:07:55,"**+1** – I'm experiencing the same issue.
",JoshuaToenyes,2015-02-17 08:49:06
558,2015-02-16 17:59:14,"+1 
",Wandalen,2015-02-17 08:49:06
558,2015-02-16 22:59:46,"+1
",sundeepnarang,2015-02-17 08:49:06
558,2015-02-17 08:49:06,"Duplication of https://github.com/node-inspector/node-inspector/issues/534
",3y3,2015-02-17 08:49:06
557,2015-02-10 22:56:04,"In windows under the ""file://"" tree their is a ""C:"" folder with all the loaded sub-folders and their is also a ""c:"" (lowercase c) folder with all the loaded sub-folders.

If you open a file in ""c:"" you cannot set break points.  If you open a file in ""C:"" live-editing does not work.

Windows 8.1

<S_CODE_TOKEN>

node-inspector compiled from latest git.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8470868-in-sources-tab-there-is-a-folder-redundancy-with-features-not-working?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",MetaMemoryT,
557,2015-03-04 09:28:06,"Can you reproduce this issue using the latest Node v0.12 and/or io.js 1.x version?
",bajtos,
557,2015-03-04 09:28:17,"(and also using the latest Node Inspector version)
",bajtos,
557,2015-03-05 16:50:43,"<S_CODE_TOKEN>

<S_CODE_TOKEN>

Now breakpoints do not work at ALL.

inspecting node-inspector reveals:

<S_CODE_TOKEN>
",MetaMemoryT,
557,2015-03-21 09:18:53,"<S_CODE_TOKEN>

Same here on Linux (Arch). After updating node and node-inspector I have the same issue. Test repo is https://github.com/hoschi/sweetp-service-project-context-manager with `mocha --debug --debug-brk`.
",hoschi,
557,2015-03-24 11:13:47,"> Same here on Linux (Arch). After updating node and node-inspector I have the same issue. Test repo is https://github.com/hoschi/sweetp-service-project-context-manager with `mocha --debug --debug-brk`.

What redundant files are your seeing?
",bajtos,
557,2015-03-27 16:29:56,"Oh sorry, I didn't used the quote feature ... I only have the same problem that no breakpoints work with the latest version of node-inspector and node. I edit my comment above to make this clearer.
",hoschi,
557,2015-06-15 02:21:23,"Please, confirm this issue on ni 0.10.2
",3y3,
556,2015-02-10 21:53:35,"Alright.  This is a weird thing.  I'm using nvm, and it seems like any version of node installed with nvm > 0.10.32 has the same problem.

To demonstrate the problem, this:

<S_CODE_TOKEN>

that script when run using `node-debug test.js`  writes 'ok' to stdout, and then breaks inexplicably on  line 461 of node core's module.js.  there is no exception that has been generated, there's no breakpoint in place,  it's just breaking to indicate that `Module.prototype._compile` has finished execution

any ideas on what's going on?  This is making development kind of hard
",lostinplace,2015-02-19 16:28:27
556,2015-02-19 16:28:21,"This was fixed by moving to iojs
",lostinplace,2015-02-19 16:28:27
555,2015-02-09 23:28:31,"Chrome Version 40.0.2214.111 (64-bit)

---

Chrome dev tools lacks ability to black box scripts I don't wish to step through. Not sure if this is a flag lacking in the dev tools instance that node inspector invokes, however this is an inconvenience.
",bmcminn,2015-03-04 09:29:31
555,2015-03-04 09:29:31,"Use the config option `--hidden`, see [README](https://github.com/node-inspector/node-inspector/blob/master/README.md#how-do-i-specify-files-to-hide) for more details.
",bajtos,2015-03-04 09:29:31
554,2015-02-08 16:59:40,"My system is windows 8.1 x64 and the node-inspector installed fine on node 0.10.30.

I upgraded to node 0.12.0 and the installation now fails with the message
""Failed at the v8-profiler@5.2.3 install script 'node-pre-gyp install --fallback-to-build'""

I see from other posts that similar issues have existed before(https://github.com/node-inspector/node-inspector/issues/483) , and it seems to me you guys knows what it is an how to quickly fix it.

Let me know if you need further info.
",jornare,2015-06-10 13:16:25
554,2015-02-09 16:59:49,":+1: 
",futurechan,2015-06-10 13:16:25
554,2015-02-11 10:39:18,"I have exactly  the same issue on OSX Yosemite running node 0.12
",alanhortz,2015-06-10 13:16:25
554,2015-02-11 17:13:46,"I seem have the sam problem in centos 7 && node 0.12
node-pre-gyp install --fallback-to-build
",MichaelIT,2015-06-10 13:16:25
554,2015-02-18 08:06:39,"Experiencing the same issue on both Win 8.1 and OSX Yosemite
",burmisov,2015-06-10 13:16:25
554,2015-02-18 19:41:33,"+1 on Debian (wheezy) attempting to configure joyent/node#v0.12.0-released + node-inspector/node-inspector#master

extract from npm-debug.log:

10763 info install express@4.11.2
10764 info postinstall express@4.11.2
10765 verbose unlock done using /root/.npm/_locks/express-6c41b0b03b8365ce.lock for /usr/local/lib/node_modules/node-inspector/node_modules/express
10766 verbose unsafe-perm in lifecycle false
10767 info postinstall ws@0.4.32
10768 verbose unlock done using /root/.npm/_locks/ws-198654e8e668eb7b.lock for /usr/local/lib/node_modules/node-inspector/node_modules/ws
10769 info v8-profiler@5.2.3 Failed to exec install script
10770 verbose unsafe-perm in lifecycle false
10771 verbose unlock done using /root/.npm/_locks/v8-profiler-28e1233ba4356e59.lock for /usr/local/lib/node_modules/node-inspector/node_modules/v8-profiler
10772 info postinstall v8-debug@0.3.5
10773 verbose unlock done using /root/.npm/_locks/v8-debug-228c9e2afaa20658.lock for /usr/local/lib/node_modules/node-inspector/node_modules/v8-debug
10774 verbose about to build /usr/local/lib/node_modules/node-inspector
10775 verbose unlock done using /root/.npm/_locks/node-inspector-885d0a05b8e6718d.lock for /usr/local/lib/node_modules/node-inspector
10776 verbose stack Error: v8-profiler@5.2.3 install: `node-pre-gyp install --fallback-to-build`
10776 verbose stack Exit status 1
10776 verbose stack     at EventEmitter.<anonymous> (/usr/local/lib/node_modules/npm/lib/utils/lifecycle.js:213:16)
10776 verbose stack     at EventEmitter.emit (events.js:110:17)
10776 verbose stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/npm/lib/utils/spawn.js:14:12)
10776 verbose stack     at ChildProcess.emit (events.js:110:17)
10776 verbose stack     at maybeClose (child_process.js:1008:16)
10776 verbose stack     at Process.ChildProcess._handle.onexit (child_process.js:1080:5)
10777 verbose pkgid v8-profiler@5.2.3
10778 verbose cwd /home/cdr/devenv
10779 error Linux 3.2.0-4-amd64
10780 error argv ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""./node-inspector""
10781 error node v0.12.0
10782 error npm  v2.5.1
10783 error code ELIFECYCLE
10784 error v8-profiler@5.2.3 install: `node-pre-gyp install --fallback-to-build`
10784 error Exit status 1
10785 error Failed at the v8-profiler@5.2.3 install script 'node-pre-gyp install --fallback-to-build'.
10785 error This is most likely a problem with the v8-profiler package,
10785 error not with npm itself.
10785 error Tell the author that this fails on your system:
10785 error     node-pre-gyp install --fallback-to-build
10785 error You can get their info via:
10785 error     npm owner ls v8-profiler
10785 error There is likely additional logging output above.
10786 verbose exit [ 1, true ]
10787 verbose unbuild lib/node_modules/node-inspector/node_modules/v8-profiler
10788 info preuninstall v8-profiler@5.2.3
10789 info uninstall v8-profiler@5.2.3

I have the full log if useful. Thanks, Chris
",ChrisRus,2015-06-10 13:16:25
554,2015-02-19 13:28:31,"A possible workaround: downgrade to 0.7.x.

<S_CODE_TOKEN>
",bajtos,2015-06-10 13:16:25
554,2015-02-20 06:45:40,"Edit: no so great. hangs while trying to navigate sources, stack and locals windows are not responsive. Dropping back on Node.js version to find a stable combo.
fwiw node 0.11.3 + node-inspector@0.7 seems to be working well for me. thanks!
",ChrisRus,2015-06-10 13:16:25
554,2015-03-07 16:45:24,"Wasn't that fixed for 0.9?
",iliakan,2015-06-10 13:16:25
554,2015-03-20 19:01:31,"This worked for me (logged in as root):
npm install -g --unsafe-perm node-inspector

For me, the issue seems to be build step of ws library done by node-gyp
",geekf,2015-06-10 13:16:25
554,2015-04-15 18:52:34,"Node v0.12.0 and Windows 8.1 here, also hanged when building ws. `npm install -g --unsafe-perm node-inspector` did the trick, thanks.
",joyeecheung,2015-06-10 13:16:25
554,2015-05-13 21:31:35,"Please try to reproduce this on node-inspector 0.10.1
",3y3,2015-06-10 13:16:25
554,2015-06-10 13:16:25,"This issue is very outdated and I think it was solved by lot of commits in node, v8-debug, v8-profiler and node-inspector.
If there still exist problems with node-inspector installation, please open new issue.
",3y3,2015-06-10 13:16:25
553,2015-02-07 11:29:43,"The source links in console and profiler were opening in a new blank window (attempt to load them from filesystem).
This partial fix enables node-inspector to open supported links through embedded CodeMirror (at correct line if detected).

TODO: support sourcemaps, intercepting link creation before linkify function is called to extract data in a proper manner.
",marcominetti,2015-03-09 17:14:55
553,2015-03-04 09:39:12,"Thank you for the pull request, this is a good thing to have in Node Inspector. I am afraid both me and @3y3 are busy working on other things and don't have time to review this now :( There is also a pending pull request #492 to update the front-end, I am afraid it will invalidate your work made here.

I am proposing to wait until #492 is landed and then kindly ask you to rework your pull request on top of that. @3y3 thoughts?

I know this is not great for you @marcominetti, I am sorry.
",bajtos,2015-03-09 17:14:55
553,2015-03-04 19:09:20,"Hi @bajtos , sounds perfect. I keep my fork continously updated with the master branch here so reworking my pr is not a problem (it's an opportunity to refactor the pr ;) and merge directly on top of the @3y3 pr).

Out of scope: I've planned to implement support for cluster too and I've seen you did the same, are you still on that? (I've seen some commits based on iframes, in terms of UX I'd try to hack the protocol/frontend internals).
",marcominetti,2015-03-09 17:14:55
553,2015-03-06 10:01:54,"> Out of scope: I've planned to implement support for cluster too and I've seen you did the same, are you still on that? (I've seen some commits based on iframes, in terms of UX I'd try to hack the protocol/frontend internals).

That was just a spike to show what can be achieved in short amount of time. I haven't looked at it since then.
",bajtos,2015-03-09 17:14:55
553,2015-03-06 14:00:12,"> Out of scope: I've planned to implement support for cluster too and I've seen you did the same, are you still on that? (I've seen some commits based on iframes, in terms of UX I'd try to hack the protocol/frontend internals).

I think with new frontend, will be more reasonable to use Threads
![threads](https://cloud.githubusercontent.com/assets/3931155/6526368/270e1a3e-c422-11e4-82ce-9f53db28b2b4.png)
",3y3,2015-03-09 17:14:55
553,2015-03-09 10:39:28,"Cool @3y3 , is the new inspector already within your ""frontend"" branch?
",marcominetti,2015-03-09 17:14:55
552,2015-02-06 23:58:32,"This occurs while I am running a pretty intense test script against my code, so a _lot_ of stuff is happening quite quickly.

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8362402-injectorserver-typeerror-cannot-read-property-handle-of-undefined?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",dillonkrug,
552,2015-02-07 00:04:22,"Hm... Are you using `--harmony` flag in test?
",3y3,
552,2015-02-07 01:01:26,"Nope
",dillonkrug,
552,2015-03-04 09:40:46,"@dillonkrug can you reproduce the problem using the latest Node Inspector version on Node v0.12 or io.js 1.x?
",bajtos,
551,2015-02-06 14:08:34,"because of #370 symlinked directories don't work in NI.
this change at least prevents massive delays when there are circular symlinks. (like #498)

further discussion in #550
",jldec,2015-02-12 03:21:37
551,2015-02-11 23:51:16,"@jldec Thank you for the new pull request. Could you please also include a short note in the README explaining the situation? ""No"" is an acceptable answer ;-)
",bajtos,2015-02-12 03:21:37
551,2015-02-12 01:01:23,"@bajtos 
README note added. hth

(b.t.w. i think the Travis CI failure is the same timeout you tried to mitigate before)
",jldec,2015-02-12 03:21:37
551,2015-02-12 03:21:58,"Landed, thank you for the contribution and especially the docs part. :bow: 
",bajtos,2015-02-12 03:21:37
551,2015-02-12 03:25:40,"Released as `node-inspector@0.9.0`.
",bajtos,2015-02-12 03:21:37
550,2015-02-05 00:37:50,"see issue #498 
when there are symlinked directories debugger may take minutes to load

the latest version of glob does not search symlinked directories but allowing this is sometimes desireable
( https://github.com/isaacs/node-glob/issues/134 )

using the `*/**/**` pattern, makes at least one extra level of symlinked directories accessible for debugging but is quite a lot slower, so i added a config option to turn this on only when required.

tests are passing, and delays on deep symlinked projects are now acceptable (~5s instead of ~5min).

refs:
- https://github.com/adgad/express-handlebars/commit/803129ed9b325640cc527aefdb5096dda7661355
- https://github.com/ericf/express-handlebars/pull/98
",jldec,2015-02-06 13:54:26
550,2015-02-05 09:03:08,"Hi @jldec, thank you for the pull request. 

In https://github.com/node-inspector/node-inspector/issues/498#issuecomment-72928660, you write:

> The issue in my case came from giant glob results (cost ~40s) and subseqent filtering (cost ~2 min!) on the backend.

And here you say

> delays on deep symlinked projects are now acceptable (~5s instead of ~5min).

I'd like to understand better how did we arrive at 5 seconds. Is it because you run node-debug with symlinks disabled? Or is it because the new glob version with `**/**/*` is faster than the old glob version following all symlinks?

What is the breakdown of glob + filtering times in your project with this patch applied and when symlinks are and are not followed?

In general, I try to make Node Inspector work out of the box for as many projects as possible and keep the number of configuration options low. If we can get a similar improvement by fixing the filtering algorithm instead of disabling symlink follows, then I would much more prefer that solution.

---

Another important fact related to symlinks and `findAllApplicationScripts`: The only reason why we try to find all scripts at the beginning is to allow NI users to set breakpoints in files that are not loaded in V8. However, when you have symlinks in your project, these breakpoints don't work anyway, because UI shows a symlink while V8 uses the resolved real path - see #370.

If you don't need to set breakpoints in files that are not loaded in V8 yet, then you can run Node Inspector with `--no-preload`: it disables `findAllApplicationScripts` and thus the startup should be pretty quick.
",bajtos,2015-02-06 13:54:26
550,2015-02-05 13:35:25,"Hi @bajtos 
simply using the latest 'glob' module stops symlink exploration and there is no way to re-enable it. This is probably fine for most users of NI. With just that change i am able to start NI in under a second on my project, but i can't see files in directories below modules which are local via `npm link`. 

the `/**/**/*` pattern is a slightly hackish solution which tells glob to search one extra level of directories (even inside symlinked modules) but it does slow things down. Most NI users won't need it, so i thought it would be best to make it optional with the `-s` option.

this PR also adds a little debug instrumentation under the name `node-inspector:ScriptFileStorage`. Here is a example of the output without `-s`.

<S_CODE_TOKEN>

The glob took ~614ms and the filter ~135ms

With `-s` the output looks like this:

<S_CODE_TOKEN>

In this case the glob took ~4s and the filter 279ms
",jldec,2015-02-06 13:54:26
550,2015-02-05 14:37:04,"for comparison, here are the timings with the older 'glob' module (v3.2.11) which recurses symlink directories.

<S_CODE_TOKEN>

In this case the glob took ~1min and the filter 4min ... largely because of a cycle of symlinks not handled by this version of glob. When i remove this cycle by deleting the offending symlink, the timings are more reasonable.

<S_CODE_TOKEN>

Overall, i still recommend upgrading to the new glob and allowing the new `-s` option because it prevents users from falling into this trap.
",jldec,2015-02-06 13:54:26
550,2015-02-06 00:14:28,"Regarding how this relates to #370

I concede that allowing debugger access to directories in symlinked modules is not that useful if breakpoints won't work for js files in those directories. 

So until #370 is fixed, i would suggest simply updating NI to use the latest glob and leave it at that. This would at least protect against the circular symlink trap.
",jldec,2015-02-06 13:54:26
550,2015-02-06 08:49:33,"@jldec I am still not convinced that the root cause is in symlinks. In my opinion, the problem is in the high number of files in node_modules dependencies.

What happens if you `npm pack && npm install` your dependencies instead of `npm link`? Will this pull request fix the startup time for you? My guess is that it won't.

I would like to improve the current `--preload`/`--no-preload` config option to take a glob pattern specifying which files to preload. This pattern can be `!node_modules/**/**/*` by default.

> So until #370 is fixed, i would suggest simply updating NI to use the latest glob and leave it at that. This would at least protect against the circular symlink trap.

Circular symlink trap - is that the reason why the current version of `glob` takes so long in your project?

Let's implement your proposal then - update to the latest glob and stop following symlinks. While I am concerned that such solution may bite us in the future, it is improving the situation in the short term, thus it's worth the risk.

Just make sure the commit message clearly describes the breaking change it introduces.
",bajtos,2015-02-06 13:54:26
550,2015-02-06 13:54:26,"@bajtos - Yes, circular symlinks was the main cause of the long delays in my case.

I agree that given #370, bumping the glob version which disables symlink following is the right solution for now. I will post a separate PR for that.

Hopefully having an up-to-date glob version is another small incentive for some NI user to contribute fixes (a) to enable glob to return realpaths  and (b) to enable symlink following in glob (with cycle detection)

I also like your suggestion of using a glob pattern for the NI preload option
",jldec,2015-02-06 13:54:26
549,2015-02-04 20:31:59,"<S_CODE_TOKEN>

built latest node-inspector from github against:

<S_CODE_TOKEN>

helloworld.js

<S_CODE_TOKEN>

The assertion failure happens when the tab is closed.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8293145-assertion-failed-err-0-file-src-agent-cc-line-164?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",MetaMemoryT,
549,2015-02-07 01:36:14,"I think this is an issue with node v0.11.16, rather than node-inspector. I've seen the same behavior using the Webstorm debugger. I reported it here https://github.com/joyent/node/issues/9155
",ben-page,
549,2015-02-16 11:12:24,"It's a Node issue. On Winx64 with node0.10.36, node-inspector0.8.3 works fine. On Node0.12 there's node-gyp error
",maxto,
549,2015-02-17 08:53:32,"I think it's relative to https://github.com/iojs/io.js/issues/781
",3y3,
549,2015-03-06 19:47:22,"still in latest, checked today:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",MetaMemoryT,
549,2015-03-20 19:44:03,"I have that problem
",commodus,
549,2015-03-29 19:10:42,"I can confirm the issue using IntelliJ debugger on Node project.  Debugger starts and executes fine, but when the debugger is stopped this exception is emitted.
",gconz,
548,2015-02-03 14:48:53,"`Node Inspector v0.8.3` crashes on breakpoints or when it reaches that breakpoint I think hard to say.

Started with `node-inspector --debug-port=5859 --web-port=1337 --web-host=192.168.10.10 --no-preload`.

<S_CODE_TOKEN>
",EloB,2015-05-20 15:55:28
548,2015-02-03 14:49:30,"The inspector starts and runs for a while but when it reaches that breakpoint it crashes.
",EloB,2015-05-20 15:55:28
548,2015-02-03 14:50:21,"I've cleaned my cache and localstorage. Nothing works...
",EloB,2015-05-20 15:55:28
548,2015-02-17 09:29:00,"Looks like changes in debugger protocol.
Can you confirm this issue on 0.10.33?
Do you can reproduce this bug on all your scripts or only on a one special?
",3y3,2015-05-20 15:55:28
548,2015-02-17 09:35:59,"Everything started to break at 0.10.35 (https://github.com/joyent/node/issues/8948) then upgraded to 0.10.36. The debugger runs and after awhile it crashes on breakpoints. Have only had the problem in our code and I don't really know how to reproduce it.
",EloB,2015-05-20 15:55:28
548,2015-02-17 09:45:00,"Thanks for fast feedback.
So, it doesn't happen on all breakpoints, only on some special?
(For example I've tested my scripts last two weeks on 0.10.36 and I can't reproduce this error)
",3y3,2015-05-20 15:55:28
548,2015-02-17 09:48:07,"Yes that is correct.
",EloB,2015-05-20 15:55:28
548,2015-02-17 09:50:03,"I don't remember were in my code this happens.
",EloB,2015-05-20 15:55:28
548,2015-03-03 10:36:43,"I have also faced same issue. It seems, Node inspector doesnt work properly on Node 0.10 version
",sudhir-jabong,2015-05-20 15:55:28
548,2015-03-03 18:28:45,"@sudhir-jabong , any example of code?
",3y3,2015-05-20 15:55:28
548,2015-05-20 15:55:28,"Fixed in 0.10.\* . Feel free to reopen it, if issue doesn't solved.
",3y3,2015-05-20 15:55:28
547,2015-02-02 20:44:03,"I managed to integrate the DebugServer into an  existing process, as described [here](https://github.com/node-inspector/node-inspector/blob/master/docs/embedding.md#2-running-in-an-existing-process) and [here (inspector.js)](https://github.com/node-inspector/node-inspector/blob/master/bin/inspector.js).

But I'm still wondering how to trigger the 'close' event. Killing the process is not an option, since it’s hosted in the same process. Is there somewhere a button or hidden feature in the front-end to close the server?

Thanks,
Johannes
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/8231072-feature-request-a-way-to-close-the-debugserver?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",JohannesHoppe,
547,2015-03-04 09:43:35,"Is there any reason why you cannot fork a new process for Node Inspector? That way a problem in Node Inspector won't bring down your whole app.

Other than that, I am ok to add a `close` method similar to the method provided by Node's http server ([docs](http://nodejs.org/api/http.html#http_server_close_callback)).

Can you contribute the implementation yourself?
",bajtos,
547,2015-03-04 10:42:50,"I’m sorry that I expressed myself in an unclearly way.
Closing the DebugServer via code is not a problem at all, this closes DebugServer and the script can end nicely:

<S_CODE_TOKEN>

Of course, If I would fork the process that I can just kill the process, but this seems to be really brute.

I’m wondering if there should be a UI element (e.g. a button) that the user can press to let the closing process start. How can I tell node-inspector that I’m now done with my work?! (without using the shotgun)
",JohannesHoppe,
547,2015-03-04 10:48:50,"... and: There was no special reason to use DebugServer class instead of forking a new process. It somehow looks nicer to use the exposed API.
",JohannesHoppe,
547,2015-03-04 14:35:22,"> If I would fork the process that I can just kill the process, but this seems to be really brute.

That's perfectly fine IMO, we do the same in `node-debug`.

> Closing the DebugServer via code is not a problem at all (...) I’m wondering if there should be a UI element (e.g. a button) that the user can press to let the closing process start. How can I tell node-inspector that I’m now done with my work?! 

We were discussing the option of stopping the server when the users closes the tab (when the websocket connection is dropped), see #472. Perhaps that's what you want/need?
",bajtos,
547,2015-03-04 16:13:25,"Please correct me if I’m wrong, but https://github.com/node-inspector/node-inspector/pull/489 which addresses https://github.com/node-inspector/node-inspector/issues/472 is concerned about closing the chrome window. So if debugged process ends, then webInspector gets detached and now (because of 489) front-end chrome also closes. So as far as I see, this pull request and this issue are not “stopping the server when the users closes the tab“ (which would be exactly the feature I’m asking for.) 
",JohannesHoppe,
547,2015-03-10 17:05:53,"> So as far as I see, this pull request and this issue are not “stopping the server when the users closes the tab“ (which would be exactly the feature I’m asking for.)

Makes sense now, thanks for explaining.

I don't now about any such feature in the UI. In general, we try to keep the amount of UI changes as low as possible to make it easier to pull down front-end changes from Blink/Chromium.
",bajtos,
546,2015-02-02 09:59:53,"Hi, 

I was wondering if node-inspector would also work with io.js?

Regards,
Gevik.
",blendsdk,2015-03-04 09:16:35
546,2015-02-03 06:02:00,"Hello, yes it is very necessary!
",cowabunga1,2015-03-04 09:16:35
546,2015-02-03 06:08:23,"I tried to install install it but it breaks on OSX!
",blendsdk,2015-03-04 09:16:35
546,2015-02-05 02:10:14,"+1 breaks on OSX , does your guys have plan to support iojs
",Pana,2015-03-04 09:16:35
546,2015-02-07 00:39:43,"The build error is in v8-debug. See https://github.com/node-inspector/v8-debug/issues/10.
",ide,2015-03-04 09:16:35
546,2015-02-11 20:53:43,":+1: would love to have that for io.js

Possible duplicate of #523
",krnlde,2015-03-04 09:16:35
546,2015-02-15 14:08:42,"@ide What about the very old (0.4.32 vs 0.7.1) version of `websocket` (ws)? The build errors I'm getting are related to it when I try to install `node-inspector`. I guess it's only the first error in the chain of things that needs to be fixed (and you manually changed that dependency in your package.json)?
",tomzx,2015-03-04 09:16:35
546,2015-02-15 15:52:31,"just reporting that with v8-debug `0.4.0` (just released) I can compile `node-inspector` correctly on linux

Still awaiting for a release because compiling on windows is a PITA :astonished: 
",colthreepv,2015-03-04 09:16:35
546,2015-02-15 16:07:49,"Works with `v8-debug` @ `v0.4.0` for me too on Windows :+1: 
",tomzx,2015-03-04 09:16:35
546,2015-02-15 16:45:45,"@mrgamer , @tomzx , hey wait sometime =) I prepare the release pr.
",3y3,2015-03-04 09:16:35
546,2015-02-17 18:29:23,"+1
",mahnunchik,2015-03-04 09:16:35
546,2015-02-25 02:29:15,"So, the current version of node-inspector now installs with iojs and runs but some features don't work if I am seeing this properly. I'm using nvm to switch between node and iojs and am blowing away my node_modules in between to force a rebuild. 

There are still about 20 tests that seem to be failing when using iojs. 

Specifically it seems like the number 14 and 15 are confusing to me.

I am running the following commands to get my test results:

<S_CODE_TOKEN>

And here are the results:

<S_CODE_TOKEN>
",jimthedev,2015-03-04 09:16:35
546,2015-03-04 09:16:35,"Closing as a duplicate of #546. You can downgrade to `node-inspector@0.7` as a workaround until the full support is implemented.
",bajtos,2015-03-04 09:16:35
546,2015-03-04 23:01:01,"@bajtos I'm assuming you mean duplicate of #523?
",jimthedev,2015-03-04 09:16:35
546,2015-03-06 10:00:54,"@jimthedev Of course, thank you for correcting me!
",bajtos,2015-03-04 09:16:35
545,2015-02-01 16:33:55,"When I run node-debug it does not start as usual.
The inspector brings up the source code of run-repl.js instead of the code I issued on the command line.

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Latest node-inspector from github pulled and built today.

Windows 8.1

Suspect it might be incompatibility with very recent version of nodejs.
",MetaMemoryT,2015-02-02 17:41:33
545,2015-02-02 17:41:33,"using wrong syntax, should be:

<S_CODE_TOKEN>
",MetaMemoryT,2015-02-02 17:41:33
545,2015-10-27 19:10:54,"Having the same issue, and the syntax suggested by @MetaMemoryT  doesn't fix it.

<S_CODE_TOKEN>
",chuckweinberger,2015-02-02 17:41:33
545,2016-06-03 07:04:14,"@chuckweinberger  - Did you find a fix?!
",jamesone,2015-02-02 17:41:33
545,2016-06-06 16:48:14,"@jamesone.  Nope.
",chuckweinberger,2015-02-02 17:41:33
545,2016-07-05 18:42:42,"Having same issue
",KevGary,2015-02-02 17:41:33
544,2015-01-31 21:10:46,"I have two files
`test.js` :

<S_CODE_TOKEN>

and `test2.js` :

<S_CODE_TOKEN>

To my understanding, when I type

<S_CODE_TOKEN>

it should not show any of the code excuted in `test2.js` in the debugger, but it does.

Am I missing something?
",zwhitchcox,2015-06-10 13:09:51
544,2015-02-17 09:30:50,"Please submit that this issue fixed in 0.9.0
",3y3,2015-06-10 13:09:51
544,2015-03-04 09:26:54,"Closing this issue as fixed, feel free to reopen if you can reproduce the problem using the latest version of Node Inspector.
",bajtos,2015-06-10 13:09:51
544,2015-03-13 17:14:04,"Can you reference the commit that resolved this? I am still seeing issues using the rc file.

0.9.2
",nmccready,2015-06-10 13:09:51
544,2015-03-16 14:28:38,"@3y3, @bajtos, I can confirm this issue exists using 0.9.2.  Do you want to reopen this issue, or should I create a new issue?

I am currently using node v0.10.32.  I created test.js and test2.js as below for an easier test:

## test.js

<S_CODE_TOKEN>

## test2.js

<S_CODE_TOKEN>

Then I run `node-debug test.js --hidden 'test2'`.  The debugger loads with script execution paused, I switch to test2.js, add a breakpoint on the console.log line, resume execution, and the debugger breaks on my breakpoint in test2.js, even though that file should be ignored because of `--hidden`.
",zacronos,2015-06-10 13:09:51
544,2015-03-16 15:28:11,"@zacronos Can you reproduce the problem on 0.7.x version too? What is your platform?
",bajtos,2015-06-10 13:09:51
544,2015-03-16 15:40:06,"@bajtos, I see the same behavior on 0.7.4 of node-inspector.

I am using node v0.10.32 on OS X 10.9.5 with Chrome 41.0.2272.89 (64-bit).  If there is any other information you'd like or scenarios you'd like me to test, let me know.

Thanks for the fast response!
",zacronos,2015-06-10 13:09:51
544,2015-06-10 13:08:25,"@zacronos , you start debugger with wrong command line:
your - `node-debug test.js --hidden 'test2'`
expected - `node-debug --hidden 'test2' test.js`

With correct commant line I can't reproduce your issue.
",3y3,2015-06-10 13:09:51
544,2015-06-10 13:09:51,"@zwhitchcox , same as @zacronos 

I close this issue. You feel free to reopen it if I'm wrong here.
",3y3,2015-06-10 13:09:51
543,2015-01-31 08:01:44,"Hi,

So far I've got no problem with debugging. But this error is always shown in chrome and terminal.

It's clearly not from my code: **`V8Debug.addListener`**

<S_CODE_TOKEN>

node v0.11.16, npm v2.4.1, osx 10.10.2
",terrybleger,2015-06-29 15:32:10
543,2015-01-31 12:27:45,"This happens after first debugger attachment?
",3y3,2015-06-29 15:32:10
543,2015-01-31 15:41:44,"@3y3 

Since the only way that breakpoint can work is I have to refresh the browser that point to debugger url (127.0.0.1:8080) after I added the breakpoint or every time I added new breakpoint.

I have a code that uses `EventEmitter`, and that code already listen to more than the default node's maxListeners, in my code I've already call the `setMaxListeners()`, so I won't get any crash/error.

The error message will show after I refresh the browser the second time, the first time is to make the breakpoint work, the second time (after the code being executed), because every time I add new breakpoint I have to refresh it. And the error only shown once. The only way I can reproduce it is by restarting my server, and doing the thing that I said before.

But I've no problem on debugging my code anyway.

Then I've got the error shown sometime even when not using the case above. Just after I refresh the browser (to make breakpoint works) the error shown again.

**EDIT**:
OK, forget all the case above. The way I reproduce it is just by refreshing the browser so that breakpoints will works. The error/warning message only shown once.
",terrybleger,2015-06-29 15:32:10
543,2015-01-31 20:13:02,"> The way I reproduce it is just by refreshing the browser

Thanks, now I know where to search.
",3y3,2015-06-29 15:32:10
543,2015-05-14 07:19:09,"Way to fix this:
1. Deprecate multi connection system in node 0.12+ debugger.
2. Emulate disconnect message on client connection closing.

Also can be helpful to send real disconnect command from node-inspector.
But anyway regression in nodejs needs to be fixed.
",3y3,2015-06-29 15:32:10
543,2015-06-29 15:32:10,"Fixed in 0.11.0
",3y3,2015-06-29 15:32:10
543,2016-04-15 06:36:56,"Still not fixed (

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",amurchick,2015-06-29 15:32:10
542,2015-01-30 18:16:55,"<S_CODE_TOKEN>

At this point the process hangs forever.

I've tried with npm 2.4.1 - same. It works fine with Node 0.11.15.
",mgol,2015-03-04 09:45:32
542,2015-01-30 18:35:15,"What?! I missed 0.11.16 release! Any way I've planned to close all compatibility questions (also io.js) on this weekend. 
",3y3,2015-03-04 09:45:32
542,2015-02-02 18:10:18," hi 3y3, what about io.js support?
",cowabunga1,2015-03-04 09:45:32
542,2015-03-04 09:45:32,"io.js support: #523
Node v0.12 support: #554
Both platforms need #534 

I am closing this issue as a duplicate.
",bajtos,2015-03-04 09:45:32
541,2015-01-30 16:04:34,"Hi,

node-inspector depends on Express **""^4.0""**.

However, it really should be **""^4.8.0""** because it uses the method **_ServerResponse.sendFile**_, which does not exist in previous versions of Express. For example, I'm using Express 4.6.0 and when I try to start node-inspector I get:

<S_CODE_TOKEN>

npm install checks if a compatible version of Express is already installed in the ""parent"" node_modules (which it is: **_4.6.0 ~= ^4.0**_) and does not install the correct version under node-inspector/node_modules

Any thoughts?
",alarre,2015-03-10 09:37:47
541,2015-01-30 16:06:27,"I think the problem was introduced in #514, which fixed the deprecation message of ""sendfile"" method but did not take into account the dependency resolution for apps using older version of Express...
",alarre,2015-03-10 09:37:47
541,2015-03-04 09:34:15,"@alarre could you please submit a pull request fixing the issue?
",bajtos,2015-03-10 09:37:47
541,2015-03-09 15:18:00,"Is this fixed yet?
",anoopknayak,2015-03-10 09:37:47
541,2015-03-09 16:02:49,"https://github.com/node-inspector/node-inspector/pull/581 should fix it!
",alarre,2015-03-10 09:37:47
541,2015-03-10 09:40:11,"Released as `node-inspector@0.9.2`
",bajtos,2015-03-10 09:37:47
540,2015-01-29 19:34:50,"I apologize ahead of time, since this post will be rather long due to me trying to be as thorough as possible. As it stands, this bug has been reproduced a handful of times by my team and I with 3 different laptops running windows 7, 8, and 8.1 respectively. We are all running the latest stable version of node-inspector (0.8.3) on an instance of the git shell for windows (MING32/bash), as well as node 0.10.36.

If you go ahead and download this simple [nodeshell app](https://github.com/sedge/nodeshell) that only tests a simple `GET` request from the localhost route, you can follow the steps below to reproduce this issue:

1) Follow the instructions in the repo's README up to the 6th step to quickly set up the environment for use
2) Run `node-inspector` from one cmd shell instance, and `mocha --debug-brk test/test.js` from a second cmd shell (both should be located inside the project directory)
3) After opening node-inspector in Chrome, set a breakpoint at the declaration of the describe block in line 82 of `test.js`. Hit play, and wait for the mocha files to load and it will reach this breakpoint shortly thereafter.
4) Go ahead and set a breakpoint inside of `function startServer(done)`, the function being called inside of the `before` hook. Logically, this simple invokes a ""forked"" instance of our backend server environment in order for us to run api route tests against it. You can try placing the breakpoint at any of the function/event listener declarations, but you will immediately notice that you:

<S_CODE_TOKEN>

That's the last place it ever touches our code. You can obviously circumvent the specific breakpoints I've mentioned and just run the test to achieve the same result that ends up occuring in the screenshots below:

![nodeins1](https://cloud.githubusercontent.com/assets/2465960/5964596/716c3eba-a7c3-11e4-8cd5-ae69fa60c24f.png)
![console2](https://cloud.githubusercontent.com/assets/2465960/5964595/716a9560-a7c3-11e4-8f23-69e028c894d5.png)

Occasionally the console output will also include an `Error 0` or `Error 10054` in the log after the tests hang.
",yoavgurevich,2015-03-04 09:33:32
540,2015-03-04 09:33:32,"Node Inspector does not support debugging child processes. See https://github.com/node-inspector/node-inspector/issues/130#issuecomment-47950758 and https://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/ for possible workarounds.
",bajtos,2015-03-04 09:33:32
540,2015-03-13 19:36:45,"When did this happen? I was able to debug child processes the last time I tried this (a year and half ago?)
",sedge,2015-03-04 09:33:32
540,2015-03-13 19:39:10,"Anyway, some good resources here.
",sedge,2015-03-04 09:33:32
539,2015-01-29 15:51:56,"There are a few commits, on master right now that I would love to use, however I do not want to have to `npm i node-inspector/node-inspector#SHA` due to them being more transient than tags.

Would you consider doing a release to include the latest work?

<bountysource-plugin>

---

Want to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/8131148-bug-level-release?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",samccone,2015-02-17 09:31:54
539,2015-02-17 09:31:54,"Released as 0.9.0
",3y3,2015-02-17 09:31:54
538,2015-01-28 06:45:57,"I am running my app inside a docker container. The Dockerfile is installing node-inspector. If I try and start my app using the following command:

<S_CODE_TOKEN>

I get the following response

<S_CODE_TOKEN>

If I try using any other IP it works just fine.
",duro,2015-03-04 09:30:35
538,2015-01-28 07:47:58,"This is expected behavior for `node-debug` command
If you want to listen on `0.0.0.0` use `node-inspector` command [(uses `0.0.0.0` by default)](https://github.com/node-inspector/node-inspector#options).

<S_CODE_TOKEN>
",3y3,2015-03-04 09:30:35
538,2016-02-16 19:56:14,"<S_CODE_TOKEN>

maybe im doing something wrong? still says 127.0.0.1
",tejasmanohar,2015-03-04 09:30:35
538,2016-02-16 22:10:22,"We can't propose to visit `http://0.0.0.0:8080/?port=5858` because it's an incorrect url for some (or all) browsers. But inspector should listen on `0.0.0.0` at this moment.
",3y3,2015-03-04 09:30:35
538,2016-02-16 22:35:04,"@3y3 Is it possible to bind the web server to 0.0.0.0 host even if we don't suggest the user to go there? In my case, this runs in a VM, and 0.0.0.0 inside the VM is exposed at a public IP of the box so that I can access the server from my host machine, but the web server keeps binding to localhost- not 0.0.0.0 so this doesn't work.
",tejasmanohar,2015-03-04 09:30:35
538,2016-02-16 22:39:28,"To clarify, I'm fine with the node-inspector server binding to any port, but I'd like to bind the web server to 0.0.0.0 so that I can access it as it's exposed through the VM.
",tejasmanohar,2015-03-04 09:30:35
538,2016-02-16 23:42:34,"@tejasmanohar , listening on 0.0.0.0 should work by design. Maybe it breaks somewhere in latest releases.
Can you submit that when you use

<S_CODE_TOKEN>

Node Inspector is not accessible on any host?
Can you also log for me `port` and `host` here https://github.com/node-inspector/node-inspector/blob/master/lib/debug-server.js#L135 ?
",3y3,2015-03-04 09:30:35
537,2015-01-27 16:05:18,"Node v0.10.36 has fixed the debugger regression from 34 & 35, we can start tracking the latest version again.

Note that Node v0.11.15 still does not pass the tests yet.

/cc @3y3 FYI
",bajtos,2015-01-27 16:12:16
536,2015-01-26 10:26:56,"I am using 
- Node : v0.11.15 
- node-inspector : v0.8.3
  on windows

I start my application as follows :

> node --debug bin\www.js
> Then start node inspector
> node-inspector --web-port=8081

When I open the debugger interface
http://127.0.0.1:8081/debug?port=5858
I see no application files and after a few seconds it crashes node-inspector with :

$HOME\AppData\Roaming\npm\node_modules\node-inspector\node_modules\ws\lib\WebSocket.js:181
    else throw new Error('not opened');
               ^
Error: not opened
    at WebSocket.send ($HOME\AppData\Roaming\npm\node_modules\node-inspector\node_modules\ws\lib\WebSocket.js:181:16)
    at FrontendClient._sendMessage ($HOME\AppData\Roaming\npm\node_modules\node-inspector\lib\FrontendClient.js:62:20)
    at FrontendClient.sendEvent ($HOME\AppData\Roaming\npm\node_modules\node-inspector\lib\FrontendClient.js:114:10)
    at EventEmitter.notifyFrontEnd ($HOME\AppData\Roaming\npm\node_modules\node-inspector\lib\ScriptManager.js:134:30)
    at EventEmitter.Object.create.addScript.value ($HOME\AppData\Roaming\npm\node_modules\node-inspector\lib\ScriptManager.js:110:24)
    at Array.forEach (native)
    at Object.handleScriptsResponse ($HOME\AppData\Roaming\npm\node_modules\node-inspector\lib\DebuggerAgent.js:119:16)
    at $HOME\AppData\Roaming\npm\node_modules\node-inspector\lib\DebuggerClient.js:122:7
    at Object.create.processResponse.value ($HOME\AppData\Roaming\npm\node_modules\node-inspector\lib\callback.js:23:20)
    at Debugger._processResponse ($HOME\AppData\Roaming\npm\node_modules\node-inspector\lib\debugger.js:92:21)

The application I am debugging also crashes with :

events.js:85
      throw er; // Unhandled 'error' event
            ^
Error: read ECONNRESET
    at exports._errnoException (util.js:746:11)
    at TCP.onread (net.js:550:26)
",leonidasKap,2015-05-20 15:56:01
536,2015-03-04 09:07:30,"Can you reproduce the issue using the latest Node Inspector version (0.9.x at the moment) and either Node v0.12 or io.js 1.x?
",bajtos,2015-05-20 15:56:01
536,2015-03-17 12:12:58,"I tried it with node v0.12 and I can see the exact same issue
",leonidasKap,2015-05-20 15:56:01
536,2015-05-14 07:20:25,"Please try to reproduce this issue with node-inspector 0.10.1
",3y3,2015-05-20 15:56:01
536,2015-05-20 15:56:00,"No activity by long time. Feel free to reopen it, if issue doesn't solved.
",3y3,2015-05-20 15:56:01
536,2017-03-03 20:50:27,"@leonidasKap and @3y3, I was able to reproduce this with node-inspector 0.12.8 and NodeJS v6.3.1. I was connected via devtools and when I closed the Chrome tab, the Node application I was profiling died with the following exception -
<S_CODE_TOKEN>

Can we re-open this?",eyz,2015-05-20 15:56:01
535,2015-01-24 06:22:20,"Hi,

When I debug an application with the latest Node.js 0.11.15, I got the following warning in the browser console:
`
Your Node version (undefined) has a partial support of profiler.
The stack frames tree doesn't show all stack frames due to low sampling rate.
The profiling data is incomplete and may show misleading results.
Update Node to 0.11.13 or newer to get full support.
`

Is it caused by V8 version upgrade in this release?
And another issue with  0.11.15 is once the node-inspector browser window is opened, the debugged script will automatically resume, but actually in the previous version, it will break in the first line that give you a chance to set breakpoint.

This behavior is correct when using 0.11.13 (0.11.14 is broken).
",oliverzy,2015-04-24 17:57:10
535,2015-01-29 15:58:33,"i cant debug the app using inspector. Same issue ... once browser window is opened, the debugged script resumes automatically!
Additional info is that node-inspector gives following output on console:
Warning: ignored V8 debugger error. Error: Unknown command ""Console.enable"" in request

Update: I see that this issue already is discussed on other thread.
",amit-handa,2015-04-24 17:57:10
535,2015-02-08 04:04:43,"same message with 0.12 (Your Node version (undefined) has a partial support of profiler...)
",DaSpawn,2015-04-24 17:57:10
535,2015-02-08 15:12:05,"Same message in windows 7 with 0.12 from ""chocolatey.org""
",reyx,2015-04-24 17:57:10
535,2015-02-13 07:15:12,"Same here with 0.12
",radubrehar,2015-04-24 17:57:10
535,2015-02-14 16:39:08,"same message here, using mac os x yosemite, node 0.12. Used to have same error on windows, but error disappeared once I restarted the computer.
",martinpinto,2015-04-24 17:57:10
535,2015-02-17 13:43:41,"+1
",alirezaDavid,2015-04-24 17:57:10
535,2015-02-20 01:39:18,"same message on windows7 SP1 with Node v0.12.0 & Node Inspector v0.8.3
Your Node version (undefined) has a partial support of profiler.
The stack frames tree doesn't show all stack frames due to low sampling rate.
The profiling data is incomplete and may show misleading results.
Update Node to 0.11.13 or newer to get full support.

> > Error: Cannot find module 'C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.3.5\node-v14-win32-ia32\debug.node''
> > Current file is C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8-debug\build\debug\v0.3.5\node-v11-win32-ia32\debug.node
",domisa54,2015-04-24 17:57:10
535,2015-02-20 09:54:26,"Same here on my ubuntu, I just upgraded my nodejs to latest stable, 
    ""Your Node version (undefined) has a partial support of profiler.
The stack frames tree doesn't show all stack frames due to low sampling rate.
The profiling data is incomplete and may show misleading results.
Update Node to 0.11.13 or newer to get full support.
Error: Cannot find module '/usr/lib/node_modules/node-inspector/node_modules/v8-debug/build/debug/v0.3.5/node-v14-linux-x64/debug.node'""
",brijrajsingh,2015-04-24 17:57:10
535,2015-02-20 19:35:34,"I get the same warning on the browser on Windows 7 SP1, Node.js 0.12.0 and Node Inspector v0.9.0.

<S_CODE_TOKEN>

However, I can successfully debug and set/view breakpoints. No warnings from command line either.
",lebolo,2015-04-24 17:57:10
535,2015-02-20 22:47:21,"I get the exact same output as @brijrajsingh

![image](https://cloud.githubusercontent.com/assets/1049204/6310805/7ee6b8f6-b928-11e4-8c9c-e8c030b1ab24.png)
",slang800,2015-04-24 17:57:10
535,2015-02-20 23:03:50,"...and downgrading to 0.11.13 doesn't seem to fix it:

![image](https://cloud.githubusercontent.com/assets/1049204/6311012/d22f1f60-b92a-11e4-84bf-c82f93188948.png)
",slang800,2015-04-24 17:57:10
535,2015-02-20 23:40:03,"Ok, removing node-inspector, reinstalling it (a couple times until the version number reported by `node-inspector --version` is `v0.9.0`... apparently something went wrong the first time), and restarting it got rid of the ""Cannot find module..."" part of the error. So now the only problem is the node version in the message says `undefined`.
",slang800,2015-04-24 17:57:10
535,2015-02-22 19:17:26,"Had exactly the same problem as in @slang800 's screenshot. So I uninstalled node-inspector, cleared the cache and installed again. Now I don't get any warnings or errors.

However, the other problem still persists - not being able to debug the first time - but after setting breakpoints, and restarting it works perfectly.
",mrotaru,2015-04-24 17:57:10
535,2015-02-26 16:28:03,"@mrotaru how did you clear the cache? Thanks!
",mikemaccana,2015-04-24 17:57:10
535,2015-02-26 19:56:14,"@mikemaccana just `npm cache clean`
",mrotaru,2015-04-24 17:57:10
535,2015-02-26 21:05:39,"Thanks @mrotaru 
",mikemaccana,2015-04-24 17:57:10
535,2015-02-26 22:44:31,"Also having this issue. As soon as you try to load the inspector in the browser the script resumes immediately. Makes it impossible to debug tests or program entry points.

Any known work arounds?

Versions (on OSX Yosemite 10.10.2):
node: 0.12.0
node-inspector: 0.9.1
",briandela,2015-04-24 17:57:10
535,2015-02-26 22:56:24,"@briandela since breakpoints are persisted across debugging sessions and the issue seems to be only with the initial (automatic) break, you can manually place a breakpoint at the start of the script on the first run, and then re-start node-inspector, and it sould break.
",mrotaru,2015-04-24 17:57:10
535,2015-02-28 23:04:56,"I running into the same thing as well.
Windows 8
Node v0.12
Node Inspector v0.9.1
",Xiot,2015-04-24 17:57:10
535,2015-03-04 09:13:51,"> And another issue with 0.11.15 is once the node-inspector browser window is opened, the debugged script will automatically resume, but actually in the previous version, it will break in the first line that give you a chance to set breakpoint.

See #534 

> When I debug an application with the latest Node.js 0.11.15, I got the following warning in the browser console:
> 
> <S_CODE_TOKEN>

Can anybody reproduce this issue using the latest 0.9.x version of Node Inspector?
",bajtos,2015-04-24 17:57:10
535,2015-03-05 02:51:47,"@bajtos Yes i am still seeing this issue.
I have tried with node versions: 0.11.13, 0.11.16 and 0.12

$ node-debug --version
Node Inspector v0.9.1

$ node --version
v0.11.16

Javascript console output:
Your Node version (undefined) has a partial support of profiler.
The stack frames tree doesn't show all stack frames due to low sampling rate.
The profiling data is incomplete and may show misleading results.
Update Node to 0.11.13 or newer to get full support.
",Zysen,2015-04-24 17:57:10
535,2015-03-05 05:10:35,"@bajtos , this issue can be reproduced on machines with low and medium performance.
This is inconsistency of debugger's connection states.

If anybody wants to fix this issue, look at `DebuggerClient.isConnected` option.
",3y3,2015-04-24 17:57:10
535,2015-03-13 02:44:25,"Same here

Error:
Your Node version (undefined) has a partial support of profiler.
The stack frames tree doesn't show all stack frames due to low sampling rate.
The profiling data is incomplete and may show misleading results.
Update Node to 0.11.13 or newer to get full support.

$ node-debug --version
Node Inspector v0.9.2
$ node --version
v0.11.15
",digihaven,2015-04-24 17:57:10
535,2015-03-22 05:32:13,"same issue with node.js version 0.12.0
",segmentationfaulter,2015-04-24 17:57:10
535,2015-03-29 09:13:31,"same issue with node.js version 0.12.1
",poinsetty,2015-04-24 17:57:10
535,2015-03-30 21:33:04,"Fixed in #594.
You fill free to test it. Issue will be closed in 0.9.3 release.
",3y3,2015-04-24 17:57:10
535,2015-04-01 21:01:47,"When do you expect 0.9.3 to be released?
",benbscholz,2015-04-24 17:57:10
535,2015-04-03 18:54:37,"Tested and the warning no longer appears with latest source.
OS X Yosemite 10.10.2
Node v0.12.0
Still not able to break into any source with this version of node, but that is a separate issue: https://github.com/node-inspector/node-inspector/issues/534
",dpwolfe,2015-04-24 17:57:10
535,2015-04-07 12:26:49,"There appear to be two issues mentioned here. The version warning check everyone mentions, and the error loading a module that @brijrajsingh @slang800 @mrotaru mention, this seems to be the issue here https://github.com/node-inspector/node-inspector/issues/603. Do we have a known workaround or fix coming for this?
",kureus,2015-04-24 17:57:10
535,2015-04-24 17:56:41,"Fixed in `0.10.0` release. Reopen this bug if the problem still persists for you.
",3y3,2015-04-24 17:57:10
535,2015-05-11 15:32:52,"Fresh installation of node-inspector today and getting the same below error:
![image](https://cloud.githubusercontent.com/assets/4610831/7568523/e8c13436-f820-11e4-894f-985bade7f723.png)

And the interesting part is: it is looking for ""node-v11-win32-ia32"", (32-bit) where as the machine is 64-bit and I can see folder with name ""node-v14-win32-x64""
",KrishnaPG,2015-04-24 17:57:10
535,2015-05-11 16:37:54,"@KrishnaPG , move to #631, and look at discussion. I wonder to see information about your 

<S_CODE_TOKEN>
",3y3,2015-04-24 17:57:10
535,2015-05-11 16:40:47,"Thanks @3y3 . Will follow #631 . Meanwhile, here is my npm version output:

<S_CODE_TOKEN>

Its 64 bit Windows.
",KrishnaPG,2015-04-24 17:57:10
535,2015-05-11 16:42:44,"@KrishnaPG , what about debugged process? Is it possible that it uses other version of node?
",3y3,2015-04-24 17:57:10
535,2015-05-11 16:45:55,"It is a meteor project I was trying to debug (started with node debug options). It started on port 5858 and shows something like below:

<S_CODE_TOKEN>

And the output of node-inspector -v is: `Node Inspector v0.10.0`
",KrishnaPG,2015-04-24 17:57:10
535,2015-05-11 16:52:23,"Nice! You need to take a recipe what described in #631. So you need to use `npm install -g node-inspector --target=0.11.13`.
Replace 0.11.13 on node version used in meteor.
Keep in mind what after this step you'll need to reinstall node-inspactor for debugging `0.12` node scripts.

This is a workaround.
",3y3,2015-04-24 17:57:10
535,2015-05-12 00:38:50,"Thank you @3y3 It is almost close. With the target option, I can see ""node-v11-win32-x64"" directory built successfully but still the ""node-v11-win32-ia32"" directory missing (32-bit version).

So, the node-inspector still complained with same error. Is it possible to also specify the target platform option for `npm install` something like `npm install --platform=ia32 --target=`

I manually built the ia32 version from Visual Studio and put it in that directory. Then it complained about some missing function
![image](https://cloud.githubusercontent.com/assets/4610831/7578040/feee40e0-f86c-11e4-8067-2a1d90a0ffe1.png)
",KrishnaPG,2015-04-24 17:57:10
535,2015-05-12 06:36:42,"@KrishnaPG , `--target_arch=ia32`. For other options look at `node-pre-gyp` project.
",3y3,2015-04-24 17:57:10
535,2015-11-02 06:45:45,"My file is loading on below port but not able to start debug / Hit break point 
http://localhost:8080/?ws=localhost:8080&port=5858

and my App is running @ http://localhost:5001/

IN console getting ""No frames""  Error 
",sudeepdk,2015-04-24 17:57:10
534,2015-01-23 09:47:26,"I'm launching my program with `--debug-brk`. Execution is immediately paused. However, as soon as I load up `node-inspector`'s page in Chrome, the script resumes, and immediately crashes (with the error I'm trying to debug). This gives me no time to set, say, a breakpoint. (Incidentally, `debugger;` statements don't help.)

---

**Affects node v0.11.14 and higher. Use an earlier version of node to unblock yourself**
- v0.11.13 (Last compatible Unstable) - http://nodejs.org/dist/v0.11.13/
- v0.10.38 (Last compatible Stable) - http://nodejs.org/dist/v0.10.38/

Node v0.10.38 will give you the profiler 'partial support' warning which you can ignore if you do not use the profiler. Use v0.11.13 as the warning suggests if you need the profiler.

---

I'm not sure what other information I can share, here. My own code is fairly complex; if you'd like to try and reproduce this on your end, the following should approximately duplicate the environment where I'm seeing this:

<S_CODE_TOKEN>
",ELLIOTTCABLE,2015-05-13 21:39:53
534,2015-01-23 10:09:19,"Please share also error message.
",3y3,2015-05-13 21:39:53
534,2015-01-23 10:11:05,"Can you reproduce this behavior on some siple app? (for example [node-debug-samples](https://github.com/node-inspector/node-debug-samples))
",3y3,2015-05-13 21:39:53
534,2015-01-23 10:11:37,"@3y3 from what? There's no error, it just opens, flashes the inspector for a moment, and then my code resumes-fails-exits, returning the inspector to the “Hit Cmd+O to open a file” view.
",ELLIOTTCABLE,2015-05-13 21:39:53
534,2015-01-23 10:12:07,"re: simpler codebase, I'll try that right now. (Wasn't expecting this quick of a reply at 4AM Chicago time, heh; about to crash soon. FYI.)
",ELLIOTTCABLE,2015-05-13 21:39:53
534,2015-01-23 10:15:39,"Works fine on `node-debug-samples/sourcemap`. I don't think it's a general problem with NI, I suspect it's the peculiarities of my codebase surfacing some weird edge-case. Problem is, I haven't the _slightest_ idea where to start looking, because I don't … actually know how node-inspector works. >,>
",ELLIOTTCABLE,2015-05-13 21:39:53
534,2015-01-23 10:35:36,"> Wasn't expecting this quick of a reply at 4AM Chicago time

I work by Russia's Moscow time =)

> Works fine on node-debug-samples/sourcemap

That's nice! Now we need to find that is special in your app. Some cases for test:
1. Run node-inspector without `&` this way we can confirm, that ni don't throw errors by himself (looking at his console log)
2. Run node-inspector with `--no-inject` flag, this prevents ni from modify your app code (now we wrap all console functions to trace them to frontend)
3. Try to reproduce this behavior on v0.7.4
",3y3,2015-05-13 21:39:53
534,2015-01-24 04:57:00,"I also have this problem but only with Node.js 0.11.15.
0.11.14 doesn't work, 0.11.13 is good
",oliverzy,2015-05-13 21:39:53
534,2015-01-25 09:25:34,"I confirm the problem with 0.11.15 & node-inspector. 0.8.3.
",iliakan,2015-05-13 21:39:53
534,2015-01-25 16:23:14,"Thanks for targetting node version. I can confirm the probem with 0.11.15.

To @bajtos :
The current problem - now we receive `debug` event when app started with `--debug-brk` flag, previously we only check that the application is paused. But the initial problem - we can receive a `debug` event before all sources have been downloaded, in this situation [BreakEventHandler._onBreak](https://github.com/node-inspector/node-inspector/blob/master/lib/BreakEventHandler.js#L66-L68) works incorrectly.

I see two ways to fix this problem:
1) Cache all incoming events from app, before all sources will loaded in ScriptManager. We already do same thing with all incoming from frontend. In this way I prefer to emit `resource-tree` event not from `PageAgent` but from `process`.
2) Make `BreakEventHandler._onBreak` async and try to request source from app on the fly (with caching the response)

Are you see the third?
",3y3,2015-05-13 21:39:53
534,2015-01-25 17:15:08,"Both ways look sane. Which one is easier to implement?
",iliakan,2015-05-13 21:39:53
534,2015-01-27 10:53:02,"Option 1) looks reasonable to me. It will probably fix also https://github.com/node-inspector/node-inspector/issues/314 which has been around for quite some time.
",bajtos,2015-05-13 21:39:53
534,2015-01-27 10:55:03,"> Option 1) looks reasonable to me. It will probably fix also #314 which has been around for quite some time.

On the second look, the fix of this issue will most likely not fix #314. However, we should take #314 into consideration while working on the patch, so that we don't make the situation even worse.
",bajtos,2015-05-13 21:39:53
534,2015-01-27 15:10:06,"Ok. We selected first way.

@ELLIOTTCABLE , @oliverzy , @iliakan , are you want to fix this or this is job for me?
",3y3,2015-05-13 21:39:53
534,2015-01-27 15:52:23,"I don't think it is that easy, I'll try to get some time to work on this myself. Unfortunately that won't be sooner than in 2-3 weeks. So if there is anybody else willing to take up the challenge, then go for it!
",bajtos,2015-05-13 21:39:53
534,2015-01-27 17:41:09,"Please don't treat that as a lack of support, I'm a really a user, not a developer here. Other projects eat 146% of my time.
",iliakan,2015-05-13 21:39:53
534,2015-01-27 18:48:32,"P.S. Thank you for what you're doing.
",iliakan,2015-05-13 21:39:53
534,2015-02-02 10:08:48,":+1: 
",mightyiam,2015-05-13 21:39:53
534,2015-02-09 21:20:55,"+1, just updated to node 0.12.0 and this issue came up.
",jonathandelgado,2015-05-13 21:39:53
534,2015-02-17 20:25:06,"Thanks I reported #558, and I'm glad to know someone's looking at it. At some point, I may have time to help, but not now unfortunately.
",jaslo,2015-05-13 21:39:53
534,2015-02-19 01:16:31,"I'm going back to 11.3 node until this sorts out. I'm dead in the water w/0.12.0 and latest node-inspector that I can't get to install due to v8-profiler issues on Debian (wheezy).
",ChrisRus,2015-05-13 21:39:53
534,2015-02-19 12:38:23,"@ChrisRus Try `npm install -g node-inspector@0.7`. That version has less native dependencies at the cost of missing profiler tabs.
",bajtos,2015-05-13 21:39:53
534,2015-02-25 15:38:07,"I'm in the same boat, using node 0.12 and node-inspector 0.9.1. I can confirm this issue exists with node-inspector 0.7.4 as well.

In case you need any further examples, I've reproduced with a very simple script. [Screencast here](http://youtu.be/qXNe3t1f5cE).
",fiznool,2015-05-13 21:39:53
534,2015-03-02 21:44:36,"I am having the same issue, with node 0.12.0, node-inspector 0.9.1. Typically I use node-debug for convenience, but the same thing happens running node-inspector plus the --debug-brk option.

I have been experiencing this issue with a fairly complex script. In light of the suggestions above, I have just tried it with a simple script I used to test the mathjs published module. It does not break at the first line, and runs through to completion without any ability to set a breakpoint.

ie.
node-debug test_mathjs.js

The test_mathjs.js script is below:

var math = require('/path/to/node_modules/mathjs');

var parser = math.parser();

var minutes = 1000 \* 60;
var hours = minutes \* 60;
var days = hours \* 24;
var years = days \* 365;

var str = 'now()-startTime';
var match = str.match(/[+-]/gi);
console.log(match);
if (match.length > 0) {
    var strArray = str.split(match[0]);
    console.log(strArray);
    if (strArray[0] == 'now()') {
        var expr_term1 = Date.now();
    }
    else {
        var expr_term1 = 1111111111111111;
    }
    if (strArray[1] == 'now()') {
        var expr_term2 = Date.now();
    }
    else {
        var expr_term2 = Date.parse('2015-01-28T19:18:48Z');
    }

<S_CODE_TOKEN>

}

parser.eval('x = 7 / 2');
var x = parser.get('x');
console.log(x);

var d= Date.parse('2015-01-28T19:18:48Z');

var y = Math.round(d / years);
console.log(y);

var n = Date.now();
var diff = n - d;
console.log(diff);
var y = Math.round(diff / days);
console.log(y);


Colin G
",colingoldberg,2015-05-13 21:39:53
534,2015-03-06 14:55:11,"So, in order to implement:

> 1) Cache all incoming events from app, before all sources will loaded in ScriptManager. We already do same thing with all incoming from frontend. In this way I prefer to emit resource-tree event not from PageAgent but from process.

I am trying to make these events:

<S_CODE_TOKEN>

...

appear before which events?

I think it is these events:

<S_CODE_TOKEN>

Currently ""command"":""continue"" is happening before addScript(s) are completed, correct?

Will the frontend have to notify node-inspector ""I am done downloading all scripts now, ready to run [BreakEventHandler._onBreak](https://github.com/node-inspector/node-inspector/blob/90973b4fb9c2b3fc9d86b069d13d60ca7ac91d9a/lib/BreakEventHandler.js#L47).""?

[resource-tree](https://github.com/node-inspector/node-inspector/blob/23a502171bf8cf255fcccc4fc9570bafaa4e96b2/lib/PageAgent.js#L46)
",MetaMemoryT,2015-05-13 21:39:53
534,2015-03-06 17:50:10,"@MetaMemoryT , look at my pr https://github.com/3y3/node-inspector/commit/702542e7dbf3f05439a07760a2f37e6d59f77360
",3y3,2015-05-13 21:39:53
534,2015-03-06 17:56:20,"Nice, I am pulling and testing your more-iojs branch.
",MetaMemoryT,2015-05-13 21:39:53
534,2015-03-06 18:08:03,"@MetaMemoryT , feedback will be useful, thanks =)
",3y3,2015-05-13 21:39:53
534,2015-03-06 20:48:27,"so I pulled more-iojs

ran:

<S_CODE_TOKEN>

(from [node-debug-samples](https://github.com/node-inspector/node-debug-samples))

seems like another third party error?

then I ran:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

and still got the same problem this issue is about, and got this message in the inspector console:

<S_CODE_TOKEN>

But I never got a stack-trace in the terminal.
",MetaMemoryT,2015-05-13 21:39:53
534,2015-03-10 14:00:36,"FYI; The NodeJS Tools for Visual Studio ran into this exact same issue: https://nodejstools.codeplex.com/workitem/1808

According to information from that issue, it seems that NodeJS 0.12 now signals the initial break as an actual breakpoint, and if you treat that as an unknown breakpoint and just instruct the debugger to continue, then the app immediately resumes and runs to completion.

If I'm reading this correctly, their fix is to treat unknown breakpoints differently (basically; not instruct the debugger to continue on) while the debugger hasn't finished attaching itself.
",rjgotten,2015-05-13 21:39:53
534,2015-03-10 14:41:51,"Great information, @rjgotten 

Trying to find the code handling unknown breakpoints:

https://nodejstools.codeplex.com/SourceControl/latest#Nodejs/Product/Nodejs/Debugger/DebugEngine/AD7MemoryAddress.cs

https://nodejstools.codeplex.com/SourceControl/latest#Nodejs/Product/Nodejs/Debugger/DebugEngine/AD7BreakpointResolution.cs

Would this require changes to https://github.com/node-inspector/v8-debug ?
",MetaMemoryT,2015-05-13 21:39:53
534,2015-03-20 05:21:40,"I have tried downgrading to node v0.11.16 and node-inspector v0.7.4 and node-inspector v0.8.3 - still can't break on first line.
",rafis,2015-05-13 21:39:53
534,2015-03-21 11:09:43,"@rafis node-inspector 0.9.1 and node 0.11.13 is working for me.
",aparajita,2015-05-13 21:39:53
534,2015-03-21 11:50:46,"Do I get it right that this bug totally screws up debugging with `--debug-brk` for all recent iojs and node versions?
",iliakan,2015-05-13 21:39:53
534,2015-03-21 13:58:54,"yes，0.11.13 is the last version that works
",oliverzy,2015-05-13 21:39:53
534,2015-03-21 19:41:19,"Eh, node-inspector has been my most used instrument for so so long :(  
Guess, there is a pause fixing this, because of refactorings.

Any node-inspector replacement if I still want to debug with `--debug-brk` ?
",iliakan,2015-05-13 21:39:53
534,2015-03-21 20:04:58,"@iliakan , you can try to fork from #560 
",3y3,2015-05-13 21:39:53
534,2015-03-21 20:06:50,"@iliakan , so if you'll do it, send me email, if this pr doesn't work for you correctly.
",3y3,2015-05-13 21:39:53
534,2015-03-21 20:28:43,"@3y3 I can live without `--debug-brk` (and without `--debug` at all! And without any dev tools! I'm an old programmer motherf*cker :rocket: )

Just tracking the situation to jump on something when it's production ready.
",iliakan,2015-05-13 21:39:53
534,2015-03-22 14:16:13,"it seems this bug is related to https://github.com/iojs/io.js/issues/877 
",Ndrou,2015-05-13 21:39:53
534,2015-03-24 21:01:34,"Experiencing the same issue. `--debug-brk` works, but as soon as I attach `node-inspector`, the code resumes running and finishes. `debugger` statements do not help, and actually segfault the process (see below). Using `node-debug` gives the same result. Figured I'd add my two cents, in case there's any useful information in it - I have a simple testcase, in any case.

I use CoffeeScript, but I am compiling with sourcemaps and then running the `.js` file instead, so the issue shouldn't be with CoffeeScript here. Exact commands run are `coffee -c -m test-leak.coffee` and `node --debug-brk test-leak.js`.

<S_CODE_TOKEN>

CoffeeScript source:

<S_CODE_TOKEN>

Compiled JS:

<S_CODE_TOKEN>

---

Adding a `debugger` statement will segfault the process, upon attaching `node-inspector`.

<S_CODE_TOKEN>

CoffeeScript source:

<S_CODE_TOKEN>

Compiled JS:

<S_CODE_TOKEN>
",joepie91,2015-05-13 21:39:53
534,2015-03-30 20:52:21,"I'm experiencing the issue (debugger / breakpoints have no effect) with Node `v0.12.0` and Node Inspector `v0.9.1`
",zedd45,2015-05-13 21:39:53
534,2015-03-31 19:08:02,"I'm also experiencing this issue, with Node v0.12.0 and Node Inspector v0.9.2
",marchaase,2015-05-13 21:39:53
534,2015-03-31 22:24:37,"i just spent a couple of hours working on this. it seems like a pretty widespread problem. something should be mentioned in the readme until its fixed.
",mattkime,2015-05-13 21:39:53
534,2015-04-02 13:53:51,"Why is all the related tickets for the same issue closed? was this fixed? I'm encountering the same issue. Please help
",harindaka,2015-05-13 21:39:53
534,2015-04-02 14:02:48,"+1 @harindaka 
",mattkime,2015-05-13 21:39:53
534,2015-04-02 15:49:03,"> Why is all the related tickets for the same issue closed? 

Because there is no point in having multiple issues open for the same problem, they are just cluttering the issue list.

> was this fixed? I'm encountering the same issue. Please help

Not yet, watch this issue to track any progress.
",bajtos,2015-05-13 21:39:53
534,2015-04-02 20:13:13,"Thanks for the clarification. I confused this ticket with an already closed one. Will wait for a fix and hope for the best :D 
",harindaka,2015-05-13 21:39:53
534,2015-04-02 20:24:12,"Please don't confirm the issue here. There're enough confirmations.

If another `debug-brk` related issue is suddenly closed by devs, that's probably a dupe. 

When you write something here, all subscribed people get an email. 

The issue is important, many people are subscribed.
",iliakan,2015-05-13 21:39:53
534,2015-04-03 20:33:27,"Quick summary for those who land here needing a workaround (like me):

**Affects node v0.11.14 and higher.  Use an earlier version of node to unblock yourself**
- v0.11.13 (Last compatible Unstable) - http://nodejs.org/dist/v0.11.13/
- v0.10.38 (Last compatible Stable) - http://nodejs.org/dist/v0.10.38/

Node v0.10.38 will give you the profiler 'partial support' warning which you can ignore if you do not use the profiler.  Use v0.11.13 as the warning suggests if you need the profiler.
",dpwolfe,2015-05-13 21:39:53
534,2015-04-03 20:58:11,"@dpwolfe if your statement is accurate then it should be added to README.md

@bajtos can you weigh in?
",mattkime,2015-05-13 21:39:53
534,2015-04-08 06:32:19,"I am ok with adding the summary to README, can somebody please submit a pull request?
",bajtos,2015-05-13 21:39:53
534,2015-04-11 01:58:56,"+1 :( also thanks for the work around @dpwolfe
",williscool,2015-05-13 21:39:53
534,2015-04-24 17:56:57,"Fixed in `0.10.0` release. Reopen this bug if the problem still persists for you.
",3y3,2015-05-13 21:39:53
534,2015-04-24 18:15:53,"Wow! holy dude, I'll start using node-inspector once again!
It even installed on my io.js!
",iliakan,2015-05-13 21:39:53
534,2015-04-25 07:23:27,":joy:
",mightyiam,2015-05-13 21:39:53
534,2015-04-25 07:43:18,"Thank you! Will give it a try tomorrow!
",jaslo,2015-05-13 21:39:53
534,2015-05-06 21:17:36,"Still experiencing the issue with node v0.12.2 and node-inspector 0.10.0. Placed breakpoint in the Express 4 app and it wasn't hit. The code just runs to completion.
",DaHoopster,2015-05-13 21:39:53
534,2015-05-06 22:29:41,"In my case it stopped at the first line as --debug-brk should do, but then did not stop at any breakpoints.
",aparajita,2015-05-13 21:39:53
534,2015-05-07 01:48:50,"Seems to work for me now. 

I use it in cases when I'm running unit tests with `mocha --debug` and somehow it decides to skip past a breakpoint.

if I run `mocha --debug-brk` I'm now consistently getting stops using `debugger;` lines in my code.

using node v0.12.2 and node-inspector 0.10.0 with nvm 0.13.1

I will say the most consistent cases skips over debugger lines happen when running with `mocha --debug` is in a class like object instantiation with the `new` keyword.

Maybe it has something to do with jit / hotloading type of code if that helps at all.

Summary: works for me now thanks. hopefully those cases where `--debug` break for me helps you track stuff down
",williscool,2015-05-13 21:39:53
534,2015-05-13 21:39:53,"Fixed in 0.10.1
",3y3,2015-05-13 21:39:53
534,2015-05-14 07:24:35,"Thank you!
",mightyiam,2015-05-13 21:39:53
534,2015-06-12 13:56:52,"I am facing same problem ..i installed Ni vesion is 0.10.1
i tried with --debug-brk also
",SujitKumbhar,2015-05-13 21:39:53
534,2015-07-11 05:53:47,"--debug-brk not running my code, node version 0.12.2 and ni 0.11.1 here. but working with --debug
",imamtauhid,2015-05-13 21:39:53
534,2015-08-25 04:51:27,"windows 10 not working. It says listening but whenever I try to visit : http://127.0.0.1:8080/debug?port=5858. says connection refused.
",Alex-Nabu,2015-05-13 21:39:53
534,2015-08-25 15:33:24,"@Alex-Nabu When you say Windows 10, I'm assuming you are using the new IE Edge browser.  Is that correct?  If so, have you tried IE (not Edge) in Windows 10 or any other browsers and had different results?
",dpwolfe,2015-05-13 21:39:53
534,2015-08-26 22:07:19,"@dpwolfe No I meant chome. I actually have to downgrade my nodejs version to get it working again. downgraded to 0.12.4
",Alex-Nabu,2015-05-13 21:39:53
534,2015-09-07 23:09:58,"`--debug-brk` isn't working for me at all on `Mac OS X 10.10.5` + `Node.js 0.12.7 (64-bit)` + `Chrome 45.0.2454.85 (64-bit)`.  My startup.js script is very simple:

<S_CODE_TOKEN>

This lands me in the weeds in `module.js`.  Hitting run doesn't stop at `debugger`.

I'm running with `node --debug-brk startup.js`.  startup.js is definitely loaded in the debugger.  It doesn't stop if I put a manual breakpoint there either.
",sanfords,2015-05-13 21:39:53
534,2015-10-07 14:28:18,"node --debug-brk    doesn't work (nothing is shown in node-inspector)

% node-inspector --web-port=9000         # 130 17:26 ~/dev/react-starter/node_modules/bootstrap
Node Inspector v0.12.3
Visit http://127.0.0.1:9000/?ws=127.0.0.1:9000&port=5858 to start debugging.

% node --debug-brk ./test.js                                    # 130 17:26 ~/dev/react-starter
Debugger listening on port 5858

test.js: 
console.log(1)
console.log(2)

node v0.12.2
Node Inspector v0.12.3
Description:    Ubuntu 14.04.3 LTS  Release:        14.04
chrome: 45.0.2454.85 (64-bit)
",AlexYegupov,2015-05-13 21:39:53
533,2015-01-23 06:38:01,"Wrong test + wrong realisation = breakpoints doesn't work on windows in main file.
Issue fixed. One test fixed.
",3y3,2015-01-23 10:37:15
533,2015-01-23 10:25:55,"Looks good, thanks for fixing it :bow: 

:shipit: 
",bajtos,2015-01-23 10:37:15
532,2015-01-22 07:00:41,"- Use v0.10.33 to prevent debugger-related regressions in .34 and .35
- Use v0.11.13 because v0.11.14 is not supported by v8-debug yet.

/to @3y3 thoughts?

> To fix all tests we need to use 0.10.33 and 0.11.13 (current 0.11.14 config downloads prebuild binaries for 0.11.13 and fails. I'll fix this issue in next v8-debug version. So we can't publish prebuild binaries for 0.11.14 - there is node-pre-gyp issue with Win x64 build)

[v0.11.15](http://nodejs.org/dist/v0.11.15/) has been released on 20.1., it may be best to skip 0.11.14 and update v8-debug for 0.11.15. BTW the rumours say that v0.11.15 will become v0.12.0 in two weeks or so.
",bajtos,2015-01-22 09:16:14
532,2015-01-22 07:13:35,"The CI passes on both v0.10 and v0.11 with this patch in place.
",bajtos,2015-01-22 09:16:14
532,2015-01-22 07:49:27,"I reviewed some changes in 0.11.15 yesterday. Best news for me - new debugger agent in this release.
I already updated `nan` version to 1.5.\* and `node-pre-gyp` to 0.6.\* in v8-debug, now I need to do it in v8-profiler and we'll be compatible with 0.11.15.

io.js issue in `nvm` was closed. So now we can try to add io to CI testing in subprojects and after this in node-inspector.
",3y3,2015-01-22 09:16:14
532,2015-01-22 07:53:36,"Oh, sure - LGTM! Please merge also my fix.
",3y3,2015-01-22 09:16:14
532,2015-01-22 09:16:10,"> io.js issue in nvm was closed. So now we can try to add io to CI testing in subprojects and after this in node-inspector.

IMO we need to wait until the Travis part https://github.com/travis-ci/travis-ci/issues/3108 is implemented too.
",bajtos,2015-01-22 09:16:14
532,2015-01-22 09:55:57,"Dirty merge =(
",3y3,2015-01-22 09:16:14
532,2015-01-22 10:08:33,"Yeah, I forgot that we don't use the merge button in Node Inspector. Sorry for that, I'll be more careful in the future.
",bajtos,2015-01-22 09:16:14
531,2015-01-22 03:32:48,"There was a small typo in config.js. I changed `directoty` to `directory`.
",sethkrasnianski,2015-01-23 06:47:52
531,2015-01-23 06:47:52,"Landed as 8ca4c051c411e434e19eab58b13a55456652471e.
Thanks for contribution.
",3y3,2015-01-23 06:47:52
531,2015-01-23 16:26:06,":+1: 
",sethkrasnianski,2015-01-23 06:47:52
530,2015-01-18 15:19:13,"fixes #498
",3y3,2015-01-23 06:47:05
530,2015-01-19 09:43:12,"The change LGTM. Could you please check why the tests are failing on Travis? I had restarted v0.10 job to see if it was a timing issue only.
",bajtos,2015-01-23 06:47:05
530,2015-01-19 10:20:06,"Travis uses 0.10.35 with corrupted debugger
",3y3,2015-01-23 06:47:05
530,2015-01-19 10:31:48,"Oh, I see. Is it worth chaning `.travis.yml` to force Node v0.10.33 and thus fix the build?
",bajtos,2015-01-23 06:47:05
530,2015-01-19 11:11:47,"> Oh, I see. Is it worth chaning .travis.yml to force Node v0.10.33 and thus fix the build?

To fix all tests we need to use 0.10.33 and 0.11.13 (current 0.11.14 config downloads prebuild binaries for 0.11.13 and fails. I'll fix this issue in next `v8-debug` version. So we can't publish prebuild binaries for 0.11.14 - there is node-pre-gyp issue with Win x64 build)
",3y3,2015-01-23 06:47:05
530,2015-01-19 12:50:27,"I am more concerned about v0.10. I am ok with ignoring failing 0.11 tests for now, as long as we have at least single platform that is passing...
",bajtos,2015-01-23 06:47:05
530,2015-01-19 12:51:55,"BTW we should probably deprioritize support for v0.11 and focus more on io.js (a.k.a node 1.0). Unfortunately Travis does not support it OOTB, see https://github.com/iojs/io.js/issues/364 and https://github.com/creationix/nvm/issues/590
",bajtos,2015-01-23 06:47:05
530,2015-01-21 21:16:28,":+1: this fixes #498

---

I manually tested this branch and it resolved the issue :clap: 
",samccone,2015-01-23 06:47:05
530,2015-01-22 06:56:16,"@3y3 let's not worry about the CI in this PR and ship the fix to the users. Do you have time to land & release this PR, or shall I do it myself?
",bajtos,2015-01-23 06:47:05
530,2015-01-22 07:09:06,"The CI build will be fixed by #532.
",bajtos,2015-01-23 06:47:05
529,2015-01-17 10:34:51,"Add exclusive include to make sure people know how they can include only certain files. This is extremely useful if you're trying to debug a certain file.

I also changed one of the examples on line 340, because the options have to be specific before the main script, or they will not be included.

And I added a line to the troubleshooting file to make sure users don't make the same mistake.

close #527
",zwhitchcox,
529,2015-01-18 14:41:26,"Hello, @zwhitchcox , are you sure that you don't have any problems with `node-debug ... --hidden=... app` ?
This question is relative to #498
",3y3,
529,2015-01-18 14:47:47,"Actually, it has stopped working since the last commit, I believe
",zwhitchcox,
529,2015-01-18 15:20:57,"I opened a PR #530 
Can you please confirm, that it fixes a bug.
",3y3,
529,2015-01-18 15:36:45,"runnin' like a dream!
",zwhitchcox,
528,2015-01-16 18:34:27,"[commit message]

`opener` always opens the URL in the default browser of the user.
It might be annoying for a user whose default browser is Firefox
to have Node Inspector start in Firefox.

This PR makes sure that the Node Inspector URL is opened
either in Chrome, Chromium or Opera (if one of them is the default
browsers, it gets priority). If we can't do that for some reason
(e.g. user has none of them installed), we just display an error
message in the console but do not open the URL in any browser.

---

Hello guys,

This PR is quite small but takes advantage of a couple of modules for detecting available browsers [4, 5], default browser [2, 3], and launching them [1, 4]. I wrote [1] and [2] myself because I couldn't find any module doing the thing that was cross-platform.

Known issues with [1] for now are the following:
- unable to close the opened browser (but you didn't do it before either)
- it doesn't detect when Chromium is installed on Windows (because it depends on [4] which depends on old version of [5]; the bug is fixed in [5]) - but detects Opera and Chrome.

Let me know what do you think about this PR!

Also, I'm looking forward to the reports from as many Linuxes as possible whether

<S_CODE_TOKEN>

correctly reports the default browser (it might not report some exotic browsers, PRs welcome).

Probably it's not a big deal for most of you who have Chrome as a default browser, but it's pretty annoying for me having Firefox as a default :)

[1] https://github.com/jakub-g/biased-opener
[2] https://github.com/jakub-g/x-default-browser
[3] https://github.com/sindresorhus/default-browser-id
[4] https://github.com/benderjs/browser-launcher2
[5] https://github.com/vweevers/win-detect-browsers
",jakub-g,2015-01-26 04:54:34
528,2015-01-23 06:59:09,"Sorry for delay in review.
This is a good stuff, I want to see it in node-inspector. I'm worried about stability of `biased-opener`, but how I can see `opener` itself also hasn't test coverage, so this replacement is equivalent in this context.

/cc @bajtos 
",3y3,2015-01-26 04:54:34
528,2015-01-23 07:21:35,"This is awesome :star2: :heart:  :star2: 

@3y3 I don't see any major problems in this patch, I'll leave the review up to you.
",bajtos,2015-01-26 04:54:34
528,2015-01-23 07:22:51,"Once the patch is landed, we can probably close the following issue: https://github.com/node-inspector/node-inspector/issues/346

BTW what happens when none of the preferred browsers was found?
",bajtos,2015-01-26 04:54:34
528,2015-01-23 07:23:27,"> BTW what happens when none of the preferred browsers was found?

NVM, you have already answered that in the PR description:

> If we can't do that for some reason
> (e.g. user has none of them installed), we just display an error
> message in the console but do not open the URL in any browser.
",bajtos,2015-01-26 04:54:34
528,2015-01-23 09:18:30,"Hi, thanks for initial review; I'll come back to this later today or over the weekend; I'll probably also need to do some changes to accomodate for issue reported in #345 when running as sudo
",jakub-g,2015-01-26 04:54:34
528,2015-01-23 17:43:46,"Regarding #345: As far as I understand, the issue reported there would not happen here, since when run with `sudo`, I would first query as the root for the default browser, if this returns safari, I would then query for all browsers to see if there's opera/chrome/chromium installed.

Edit: I rebased on top of master and added reference to 346 in commit message
",jakub-g,2015-01-26 04:54:34
528,2015-01-25 20:34:21,"Updated the PR, regarding the `okMsg` I thought it's always better to have some more logs, which can be useful in case of bug reports, but it's fine for me to skip it.
",jakub-g,2015-01-26 04:54:34
528,2015-01-26 04:55:52,"LGTM. Merged.
Thanks for this pr!
",3y3,2015-01-26 04:54:34
527,2015-01-16 11:03:28,"I try to hide all files except the ones in the directory ""meanio"" like this:

<S_CODE_TOKEN>

But I get this error: 

<S_CODE_TOKEN>

Side note, no regular expressions work, not just this one. It's just usually, it blatantly ignores my regex, and doesn't even give me an error.

I'm on yosemite with node version 0.10.35
",zwhitchcox,2015-05-14 07:23:53
527,2015-01-17 10:11:45,"Ok, I've debugged the two reasons why my code wasn't working.

Forgive my newbiness, and I hope this helps someone else!

First of all, the options aren't included unless you place them before the main script. So, that's why my regex's weren't registering. that's probably a common thing here with unix commands, but as I said, I'm a noob, but I'm always learning!

Second of all, you have to escape your regular expression on the command line.

So, if you want to only include certain files or directories, you need do do a negative lookahead and escape the regular expression.

So, say you only wanted files with the word jacket or cake in the file. You could do that like this:

<S_CODE_TOKEN>

If you just wanted files with the word jacket in them, you could do this:

<S_CODE_TOKEN>

Hope this helps someone else too!
",zwhitchcox,2015-05-14 07:23:53
527,2015-01-23 06:09:09,"A simpler way how to escape the regular expression argument is to use single quotes:

<S_CODE_TOKEN>
",bajtos,2015-05-14 07:23:53
527,2015-02-17 09:33:34,"@zwhitchcox , can this issue to be closed?
",3y3,2015-05-14 07:23:53
527,2015-05-14 07:23:53,"No activity by long time. Feel free to reopen it, if issue doesn't solved.
",3y3,2015-05-14 07:23:53
526,2015-01-15 22:22:29,"If you dynamically add a stream to a logger using addStream, it does not reset haveNonRawStreams.  The result is if previously you only had raw streams, undefined is written to the new stream.

Work around is to add this after each call to addStream: logger.haveNonRawStreams = undefined; 

but would be nice if the logger did it automatically
",msamblanet,2015-01-26 08:03:37
526,2015-01-26 08:03:36,"I'm not sure that this is node-inspector issue. Call me to reopen it, if I wrong here.
",3y3,2015-01-26 08:03:37
526,2015-01-26 13:04:27,"I'm sorry - I somehow posted this to the wrong git-hub repo...
",msamblanet,2015-01-26 08:03:37
525,2015-01-15 16:14:16,"Does node-inspector already support iojs?

<S_CODE_TOKEN>
",JiangJie,2015-01-23 06:56:12
525,2015-01-23 06:07:31,"@3y3 This looks like a problem in v8-debug and/or v8-profiler, PTAL.
",bajtos,2015-01-23 06:56:12
525,2015-01-23 06:27:58,"Yes, this is a problem with our submodules. For me this is a duplication of #523 
",3y3,2015-01-23 06:56:12
525,2015-01-23 06:56:12,"Makes sense, I am closing this as a duplicate then.
",bajtos,2015-01-23 06:56:12
524,2015-01-15 13:21:17,"After launching the program hangs - app initialization logging statements are not executed (or at least not displayed).

% node-inspector app.js 
Node Inspector v0.8.1
Visit http://127.0.0.1:8080/debug?port=5858 to start debugging.

When you connect the browser (it is not automatically invoked as before) you get the message

express deprecated res.sendfile: Use res.sendFile instead ../../../../../../../usr/local/lib/node_modules/node-inspector/lib/debug-server.js:17:7

Then nothing.

Same on two different systems:

Darwin Evelyn.local 14.0.0 Darwin Kernel Version 14.0.0: Fri Sep 19 00:26:44 PDT 2014; root:xnu-2782.1.97~2/RELEASE_X86_64 x86_64

Linux ip-172-31-35-98 3.14.26-24.46.amzn1.x86_64 #1 SMP Wed Dec 10 10:02:43 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux

node v0.10.34

% npm list
├─┬ amazon-product-api@0.1.2
│ ├── es6-promise@1.0.0
│ └─┬ xml2js@0.4.4
│   ├── sax@0.6.1
│   └─┬ xmlbuilder@2.4.5
│     └── lodash-node@2.4.1
├─┬ async-replace@1.0.0
│ └── async@0.1.22
├─┬ bcrypt@0.8.0
│ ├── bindings@1.0.0
│ └── nan@1.3.0
├─┬ body-parser@1.10.0
│ ├── bytes@1.0.0
│ ├── depd@1.0.0
│ ├── iconv-lite@0.4.5
│ ├── media-typer@0.3.0
│ ├─┬ on-finished@2.1.1
│ │ └── ee-first@1.1.0
│ ├── qs@2.3.3
│ ├── raw-body@1.3.1
│ └─┬ type-is@1.5.4
│   └─┬ mime-types@2.0.4
│     └── mime-db@1.3.1
├── bootstrap@3.3.1 (git+https://github.com/twbs/bootstrap.git#6fe9cd9fef3e0960d0ef8484dea7aecd0880de84)
├── bufferlist@0.1.0
├─┬ compression@1.2.2
│ ├─┬ accepts@1.1.4
│ │ ├─┬ mime-types@2.0.4
│ │ │ └── mime-db@1.3.1
│ │ └── negotiator@0.4.9
│ ├── bytes@1.0.0
│ ├─┬ compressible@2.0.1
│ │ └── mime-db@1.3.1
│ ├─┬ debug@2.1.0
│ │ └── ms@0.6.2
│ ├── on-headers@1.0.0
│ └── vary@1.0.0
├── connect-flash@0.1.1
├── connect-logger@0.0.1
├─┬ connect-redis@2.1.0
│ └─┬ debug@1.0.4
│   └── ms@0.6.2
├─┬ cookie-parser@1.3.3
│ ├── cookie@0.1.2
│ └── cookie-signature@1.0.5
├─┬ emailjs@0.3.12
│ ├── bufferjs@1.1.0
│ ├─┬ mimelib@0.2.14
│ │ ├── addressparser@0.2.1
│ │ └─┬ encoding@0.1.11
│ │   └── iconv-lite@0.4.5
│ ├── moment@1.7.0
│ └── starttls@0.2.1
├─┬ errorhandler@1.3.0
│ ├─┬ accepts@1.1.4
│ │ ├─┬ mime-types@2.0.4
│ │ │ └── mime-db@1.3.1
│ │ └── negotiator@0.4.9
│ └── escape-html@1.0.1
├─┬ express@4.10.6
│ ├─┬ accepts@1.1.4
│ │ ├─┬ mime-types@2.0.4
│ │ │ └── mime-db@1.3.1
│ │ └── negotiator@0.4.9
│ ├── content-disposition@0.5.0
│ ├── cookie@0.1.2
│ ├── cookie-signature@1.0.5
│ ├─┬ debug@2.1.0
│ │ └── ms@0.6.2
│ ├── depd@1.0.0
│ ├── escape-html@1.0.1
│ ├─┬ etag@1.5.1
│ │ └── crc@3.2.1
│ ├── finalhandler@0.3.2
│ ├── fresh@0.2.4
│ ├── media-typer@0.3.0
│ ├── merge-descriptors@0.0.2
│ ├── methods@1.1.0
│ ├─┬ on-finished@2.1.1
│ │ └── ee-first@1.1.0
│ ├── parseurl@1.3.0
│ ├── path-to-regexp@0.1.3
│ ├─┬ proxy-addr@1.0.4
│ │ ├── forwarded@0.1.0
│ │ └── ipaddr.js@0.1.5
│ ├── qs@2.3.3
│ ├── range-parser@1.0.2
│ ├─┬ send@0.10.1
│ │ ├── destroy@1.0.3
│ │ └── ms@0.6.2
│ ├── serve-static@1.7.1
│ ├─┬ type-is@1.5.4
│ │ └─┬ mime-types@2.0.4
│ │   └── mime-db@1.3.1
│ ├── utils-merge@1.0.0
│ └── vary@1.0.0
├── express-cluster@0.0.3 extraneous
├─┬ express-session@1.9.3
│ ├── cookie@0.1.2
│ ├── cookie-signature@1.0.5
│ ├── crc@3.2.1
│ ├─┬ debug@2.1.0
│ │ └── ms@0.6.2
│ ├── depd@1.0.0
│ ├── on-headers@1.0.0
│ ├── parseurl@1.3.0
│ ├─┬ uid-safe@1.0.1
│ │ ├── base64-url@1.0.0
│ │ └─┬ mz@1.1.0
│ │   └── native-or-bluebird@1.1.2
│ └── utils-merge@1.0.0
├─┬ fbgraph@0.3.0
│ ├── qs@1.2.2
│ └─┬ request@2.40.0
│   ├── aws-sign2@0.5.0
│   ├── forever-agent@0.5.2
│   ├─┬ form-data@0.1.4
│   │ ├── async@0.9.0
│   │ ├─┬ combined-stream@0.0.7
│   │ │ └── delayed-stream@0.0.5
│   │ └── mime@1.2.11
│   ├─┬ hawk@1.1.1
│   │ ├── boom@0.4.2
│   │ ├── cryptiles@0.2.2
│   │ ├── hoek@0.9.1
│   │ └── sntp@0.2.4
│   ├─┬ http-signature@0.10.0
│   │ ├── asn1@0.1.11
│   │ ├── assert-plus@0.1.2
│   │ └── ctype@0.5.2
│   ├── json-stringify-safe@5.0.0
│   ├── mime-types@1.0.2
│   ├── node-uuid@1.4.2
│   ├── oauth-sign@0.3.0
│   ├── qs@1.0.2
│   ├── stringstream@0.0.4
│   ├─┬ tough-cookie@0.12.1
│   │ └── punycode@1.3.2
│   └── tunnel-agent@0.4.0
├─┬ goodreads@0.0.2
│ ├─┬ coffee-script@1.8.0
│ │ └── mkdirp@0.3.5
│ ├── oauth@0.9.12
│ └─┬ xml2js@0.4.4
│   ├── sax@0.6.1
│   └─┬ xmlbuilder@2.4.5
│     └── lodash-node@2.4.1
├─┬ grunt@0.4.5
│ ├── async@0.1.22
│ ├── coffee-script@1.3.3
│ ├── colors@0.6.2
│ ├── dateformat@1.0.2-1.2.3
│ ├── eventemitter2@0.4.14
│ ├── exit@0.1.2
│ ├─┬ findup-sync@0.1.3
│ │ ├─┬ glob@3.2.11
│ │ │ ├── inherits@2.0.1
│ │ │ └─┬ minimatch@0.3.0
│ │ │   ├── lru-cache@2.5.0
│ │ │   └── sigmund@1.0.0
│ │ └── lodash@2.4.1
│ ├── getobject@0.1.0
│ ├─┬ glob@3.1.21
│ │ ├── graceful-fs@1.2.3
│ │ └── inherits@1.0.0
│ ├─┬ grunt-legacy-log@0.1.1
│ │ ├── colors@0.6.2
│ │ ├── lodash@2.4.1
│ │ └── underscore.string@2.3.3
│ ├─┬ grunt-legacy-util@0.2.0
│ │ ├── async@0.1.22
│ │ ├── lodash@0.9.2
│ │ └── underscore.string@2.2.1
│ ├── hooker@0.2.3
│ ├── iconv-lite@0.2.11
│ ├─┬ js-yaml@2.0.5
│ │ ├─┬ argparse@0.1.16
│ │ │ ├── underscore@1.7.0
│ │ │ └── underscore.string@2.4.0
│ │ └── esprima@1.0.4
│ ├── lodash@0.9.2
│ ├─┬ minimatch@0.2.14
│ │ ├── lru-cache@2.5.0
│ │ └── sigmund@1.0.0
│ ├─┬ nopt@1.0.10
│ │ └── abbrev@1.0.5
│ ├── rimraf@2.2.8
│ ├── underscore.string@2.2.1
│ └── which@1.0.8
├─┬ grunt-contrib-concat@0.5.0
│ ├─┬ chalk@0.5.1
│ │ ├── ansi-styles@1.1.0
│ │ ├── escape-string-regexp@1.0.2
│ │ ├─┬ has-ansi@0.1.0
│ │ │ └── ansi-regex@0.2.1
│ │ ├─┬ strip-ansi@0.3.0
│ │ │ └── ansi-regex@0.2.1
│ │ └── supports-color@0.2.0
│ └─┬ source-map@0.1.40
│   └── amdefine@0.1.0
├─┬ grunt-contrib-copy@0.7.0
│ └─┬ chalk@0.5.1
│   ├── ansi-styles@1.1.0
│   ├── escape-string-regexp@1.0.2
│   ├─┬ has-ansi@0.1.0
│   │ └── ansi-regex@0.2.1
│   ├─┬ strip-ansi@0.3.0
│   │ └── ansi-regex@0.2.1
│   └── supports-color@0.2.0
├─┬ grunt-contrib-cssmin@0.10.0
│ ├─┬ chalk@0.4.0
│ │ ├── ansi-styles@1.0.0
│ │ ├── has-color@0.1.7
│ │ └── strip-ansi@0.1.1
│ ├─┬ clean-css@2.2.22
│ │ └── commander@2.2.0
│ └─┬ maxmin@0.2.2
│   ├─┬ chalk@0.5.1
│   │ ├── ansi-styles@1.1.0
│   │ ├── escape-string-regexp@1.0.2
│   │ ├─┬ has-ansi@0.1.0
│   │ │ └── ansi-regex@0.2.1
│   │ ├─┬ strip-ansi@0.3.0
│   │ │ └── ansi-regex@0.2.1
│   │ └── supports-color@0.2.0
│   ├── figures@1.3.5
│   ├─┬ gzip-size@0.2.0
│   │ ├─┬ browserify-zlib@0.1.4
│   │ │ └── pako@0.2.5
│   │ └─┬ concat-stream@1.4.7
│   │   ├── inherits@2.0.1
│   │   ├─┬ readable-stream@1.1.13
│   │   │ ├── core-util-is@1.0.1
│   │   │ ├── isarray@0.0.1
│   │   │ └── string_decoder@0.10.31
│   │   └── typedarray@0.0.6
│   └── pretty-bytes@0.1.2
├─┬ grunt-contrib-less@0.12.0
│ ├── async@0.2.10
│ ├─┬ chalk@0.5.1
│ │ ├── ansi-styles@1.1.0
│ │ ├── escape-string-regexp@1.0.2
│ │ ├─┬ has-ansi@0.1.0
│ │ │ └── ansi-regex@0.2.1
│ │ ├─┬ strip-ansi@0.3.0
│ │ │ └── ansi-regex@0.2.1
│ │ └── supports-color@0.2.0
│ ├─┬ less@1.7.5
│ │ ├─┬ clean-css@2.2.22
│ │ │ └── commander@2.2.0
│ │ ├── graceful-fs@3.0.5
│ │ ├── mime@1.2.11
│ │ ├─┬ mkdirp@0.5.0
│ │ │ └── minimist@0.0.8
│ │ ├─┬ request@2.40.0
│ │ │ ├── aws-sign2@0.5.0
│ │ │ ├── forever-agent@0.5.2
│ │ │ ├─┬ form-data@0.1.4
│ │ │ │ ├── async@0.9.0
│ │ │ │ └─┬ combined-stream@0.0.7
│ │ │ │   └── delayed-stream@0.0.5
│ │ │ ├─┬ hawk@1.1.1
│ │ │ │ ├── boom@0.4.2
│ │ │ │ ├── cryptiles@0.2.2
│ │ │ │ ├── hoek@0.9.1
│ │ │ │ └── sntp@0.2.4
│ │ │ ├─┬ http-signature@0.10.0
│ │ │ │ ├── asn1@0.1.11
│ │ │ │ ├── assert-plus@0.1.2
│ │ │ │ └── ctype@0.5.2
│ │ │ ├── json-stringify-safe@5.0.0
│ │ │ ├── mime-types@1.0.2
│ │ │ ├── node-uuid@1.4.2
│ │ │ ├── oauth-sign@0.3.0
│ │ │ ├── qs@1.0.2
│ │ │ ├── stringstream@0.0.4
│ │ │ ├─┬ tough-cookie@0.12.1
│ │ │ │ └── punycode@1.3.2
│ │ │ └── tunnel-agent@0.4.0
│ │ └─┬ source-map@0.1.40
│ │   └── amdefine@0.1.0
│ ├── lodash@2.4.1
│ └─┬ maxmin@0.1.0
│   ├─┬ chalk@0.4.0
│   │ ├── ansi-styles@1.0.0
│   │ ├── has-color@0.1.7
│   │ └── strip-ansi@0.1.1
│   ├─┬ gzip-size@0.1.1
│   │ ├─┬ concat-stream@1.4.7
│   │ │ ├── inherits@2.0.1
│   │ │ ├─┬ readable-stream@1.1.13
│   │ │ │ ├── core-util-is@1.0.1
│   │ │ │ ├── isarray@0.0.1
│   │ │ │ └── string_decoder@0.10.31
│   │ │ └── typedarray@0.0.6
│   │ └─┬ zlib-browserify@0.0.3
│   │   └─┬ tape@0.2.2
│   │     ├── deep-equal@0.0.0
│   │     ├── defined@0.0.0
│   │     └── jsonify@0.0.0
│   └── pretty-bytes@0.1.2
├─┬ grunt-contrib-stylus@0.20.0
│ ├── async@0.9.0
│ ├─┬ chalk@0.5.1
│ │ ├── ansi-styles@1.1.0
│ │ ├── escape-string-regexp@1.0.2
│ │ ├─┬ has-ansi@0.1.0
│ │ │ └── ansi-regex@0.2.1
│ │ ├─┬ strip-ansi@0.3.0
│ │ │ └── ansi-regex@0.2.1
│ │ └── supports-color@0.2.0
│ ├── lodash@2.4.1
│ └─┬ nib@1.0.4
│   └─┬ stylus@0.45.1
│     ├── css-parse@1.7.0
│     ├─┬ debug@2.1.0
│     │ └── ms@0.6.2
│     ├─┬ glob@3.2.11
│     │ ├── inherits@2.0.1
│     │ └─┬ minimatch@0.3.0
│     │   ├── lru-cache@2.5.0
│     │   └── sigmund@1.0.0
│     ├── mkdirp@0.3.5
│     └── sax@0.5.8
├─┬ grunt-contrib-uglify@0.6.0
│ ├─┬ chalk@0.5.1
│ │ ├── ansi-styles@1.1.0
│ │ ├── escape-string-regexp@1.0.2
│ │ ├─┬ has-ansi@0.1.0
│ │ │ └── ansi-regex@0.2.1
│ │ ├─┬ strip-ansi@0.3.0
│ │ │ └── ansi-regex@0.2.1
│ │ └── supports-color@0.2.0
│ ├── lodash@2.4.1
│ ├─┬ maxmin@1.0.0
│ │ ├── figures@1.3.5
│ │ ├─┬ gzip-size@1.0.0
│ │ │ ├─┬ browserify-zlib@0.1.4
│ │ │ │ └── pako@0.2.5
│ │ │ └─┬ concat-stream@1.4.7
│ │ │   ├── inherits@2.0.1
│ │ │   ├─┬ readable-stream@1.1.13
│ │ │   │ ├── core-util-is@1.0.1
│ │ │   │ ├── isarray@0.0.1
│ │ │   │ └── string_decoder@0.10.31
│ │ │   └── typedarray@0.0.6
│ │ └─┬ pretty-bytes@1.0.2
│ │   └── get-stdin@1.0.0
│ ├─┬ uglify-js@2.4.16
│ │ ├── async@0.2.10
│ │ ├─┬ optimist@0.3.7
│ │ │ └── wordwrap@0.0.2
│ │ ├─┬ source-map@0.1.34
│ │ │ └── amdefine@0.1.0
│ │ └── uglify-to-browserify@1.0.2
│ └── uri-path@0.0.2
├─┬ grunt-contrib-watch@0.6.1
│ ├── async@0.2.10
│ ├─┬ gaze@0.5.1
│ │ └─┬ globule@0.1.0
│ │   ├─┬ glob@3.1.21
│ │   │ ├── graceful-fs@1.2.3
│ │   │ └── inherits@1.0.0
│ │   ├── lodash@1.0.1
│ │   └─┬ minimatch@0.2.14
│ │     ├── lru-cache@2.5.0
│ │     └── sigmund@1.0.0
│ ├── lodash@2.4.1
│ └─┬ tiny-lr-fork@0.0.5
│   ├── debug@0.7.4
│   ├── faye-websocket@0.4.4
│   ├─┬ noptify@0.0.3
│   │ └─┬ nopt@2.0.0
│   │   └── abbrev@1.0.5
│   └── qs@0.5.6
├── imagemagick@0.1.3
├── isbn@0.2.0
├─┬ jade@1.8.2
│ ├── character-parser@1.2.1
│ ├── commander@2.5.1
│ ├─┬ constantinople@3.0.1
│ │ └─┬ acorn-globals@1.0.1
│ │   └── acorn@0.8.0
│ ├─┬ mkdirp@0.5.0
│ │ └── minimist@0.0.8
│ ├─┬ transformers@2.1.0
│ │ ├─┬ css@1.0.8
│ │ │ ├── css-parse@1.0.4
│ │ │ └── css-stringify@1.0.5
│ │ ├─┬ promise@2.0.0
│ │ │ └── is-promise@1.0.1
│ │ └─┬ uglify-js@2.2.5
│ │   ├─┬ optimist@0.3.7
│ │   │ └── wordwrap@0.0.2
│ │   └─┬ source-map@0.1.40
│ │     └── amdefine@0.1.0
│ ├── void-elements@1.0.0
│ └─┬ with@4.0.0
│   ├── acorn@0.8.0
│   └─┬ acorn-globals@1.0.1
│     └── acorn@0.8.0
├─┬ mailchimp@1.1.0
│ └── qs@0.5.6
├─┬ method-override@2.3.0
│ ├─┬ debug@2.1.0
│ │ └── ms@0.6.2
│ ├── methods@1.1.0
│ ├── parseurl@1.3.0
│ └── vary@1.0.0
├── mime@1.2.11
├── moment@2.8.4
├─┬ morgan@1.5.0
│ ├── basic-auth@1.0.0
│ ├─┬ debug@2.1.0
│ │ └── ms@0.6.2
│ ├── depd@1.0.0
│ └─┬ on-finished@2.1.1
│   └── ee-first@1.1.0
├─┬ multer@0.1.6
│ ├─┬ busboy@0.2.9
│ │ ├─┬ dicer@0.2.3
│ │ │ ├─┬ readable-stream@1.1.13
│ │ │ │ ├── core-util-is@1.0.1
│ │ │ │ ├── inherits@2.0.1
│ │ │ │ ├── isarray@0.0.1
│ │ │ │ └── string_decoder@0.10.31
│ │ │ └── streamsearch@0.1.2
│ │ └─┬ readable-stream@1.1.13
│ │   ├── core-util-is@1.0.1
│ │   ├── inherits@2.0.1
│ │   ├── isarray@0.0.1
│ │   └── string_decoder@0.10.31
│ ├── mkdirp@0.3.5
│ └── qs@1.2.2
├─┬ node-linkedin@0.3.4
│ ├── lodash@2.4.1
│ ├── oauth@0.9.12
│ └─┬ request@2.31.0
│   ├── aws-sign2@0.5.0
│   ├── forever-agent@0.5.2
│   ├─┬ form-data@0.1.4
│   │ ├── async@0.9.0
│   │ └─┬ combined-stream@0.0.7
│   │   └── delayed-stream@0.0.5
│   ├─┬ hawk@1.0.0
│   │ ├── boom@0.4.2
│   │ ├── cryptiles@0.2.2
│   │ ├── hoek@0.9.1
│   │ └── sntp@0.2.4
│   ├─┬ http-signature@0.10.0
│   │ ├── asn1@0.1.11
│   │ ├── assert-plus@0.1.2
│   │ └── ctype@0.5.2
│   ├── json-stringify-safe@5.0.0
│   ├── mime@1.2.11
│   ├── node-uuid@1.4.2
│   ├── oauth-sign@0.3.0
│   ├── qs@0.6.6
│   ├─┬ tough-cookie@0.9.15
│   │ └── punycode@1.3.2
│   └── tunnel-agent@0.3.0
├── node-uuid@1.4.2
├─┬ passport@0.2.1
│ ├── passport-strategy@1.0.0
│ └── pause@0.0.1
├─┬ passport-facebook@1.0.3
│ └─┬ passport-oauth2@1.1.2
│   ├── oauth@0.9.12
│   ├── passport-strategy@1.0.0
│   └── uid2@0.0.3
├─┬ passport-goodreads@0.1.2
│ ├─┬ passport-oauth@0.1.15
│ │ ├── oauth@0.9.12
│ │ └─┬ passport@0.1.18
│ │   └── pause@0.0.1
│ ├── pkginfo@0.2.3
│ └─┬ xml2js@0.1.14
│   └── sax@0.6.1
├─┬ passport-google-oauth@0.1.5
│ ├─┬ passport-oauth@0.1.15
│ │ ├── oauth@0.9.12
│ │ └─┬ passport@0.1.18
│ │   └── pause@0.0.1
│ └── pkginfo@0.2.3
├─┬ passport-linkedin-oauth2@1.2.1
│ ├─┬ passport-oauth2@1.1.2
│ │ ├── oauth@0.9.12
│ │ ├── passport-strategy@1.0.0
│ │ └── uid2@0.0.3
│ └── underscore@1.7.0
├─┬ passport-local@1.0.0
│ └── passport-strategy@1.0.0
├─┬ passport-twitter@1.0.2
│ ├─┬ passport-oauth1@1.0.1
│ │ ├── oauth@0.9.12
│ │ ├── passport-strategy@1.0.0
│ │ └── utils-merge@1.0.0
│ └─┬ xtraverse@0.1.0
│   └── xmldom@0.1.19
├─┬ qr@0.2.3
│ ├── benchmark@1.0.0
│ └─┬ vows@0.8.1
│   ├── diff@1.0.8
│   ├── eyes@0.1.8
│   └─┬ glob@4.0.6
│     ├── graceful-fs@3.0.5
│     ├── inherits@2.0.1
│     ├─┬ minimatch@1.0.0
│     │ ├── lru-cache@2.5.0
│     │ └── sigmund@1.0.0
│     └─┬ once@1.3.1
│       └── wrappy@1.0.1
├── redis@0.12.1
├─┬ request@2.51.0
│ ├── aws-sign2@0.5.0
│ ├─┬ bl@0.9.3
│ │ └─┬ readable-stream@1.0.33
│ │   ├── core-util-is@1.0.1
│ │   ├── inherits@2.0.1
│ │   ├── isarray@0.0.1
│ │   └── string_decoder@0.10.31
│ ├── caseless@0.8.0
│ ├─┬ combined-stream@0.0.7
│ │ └── delayed-stream@0.0.5
│ ├── forever-agent@0.5.2
│ ├─┬ form-data@0.2.0
│ │ ├── async@0.9.0
│ │ └─┬ mime-types@2.0.4
│ │   └── mime-db@1.3.1
│ ├─┬ hawk@1.1.1
│ │ ├── boom@0.4.2
│ │ ├── cryptiles@0.2.2
│ │ ├── hoek@0.9.1
│ │ └── sntp@0.2.4
│ ├─┬ http-signature@0.10.0
│ │ ├── asn1@0.1.11
│ │ ├── assert-plus@0.1.2
│ │ └── ctype@0.5.2
│ ├── json-stringify-safe@5.0.0
│ ├── mime-types@1.0.2
│ ├── oauth-sign@0.5.0
│ ├── qs@2.3.3
│ ├── stringstream@0.0.4
│ ├─┬ tough-cookie@0.12.1
│ │ └── punycode@1.3.2
│ └── tunnel-agent@0.4.0
├─┬ serve-favicon@2.1.7
│ ├─┬ etag@1.5.1
│ │ └── crc@3.2.1
│ ├── fresh@0.2.4
│ └── ms@0.6.2
├─┬ serve-static@1.7.1
│ ├── escape-html@1.0.1
│ ├── parseurl@1.3.0
│ ├─┬ send@0.10.1
│ │ ├── debug@2.1.0
│ │ ├── depd@1.0.0
│ │ ├── destroy@1.0.3
│ │ ├─┬ etag@1.5.1
│ │ │ └── crc@3.2.1
│ │ ├── fresh@0.2.4
│ │ ├── ms@0.6.2
│ │ ├─┬ on-finished@2.1.1
│ │ │ └── ee-first@1.1.0
│ │ └── range-parser@1.0.2
│ └── utils-merge@1.0.0
├─┬ stripe@3.0.2
│ ├── lodash@2.4.1
│ ├── qs@2.3.3
│ └── when@3.1.0
├─┬ stylus@0.49.3
│ ├── css-parse@1.7.0
│ ├─┬ debug@2.1.0
│ │ └── ms@0.6.2
│ ├─┬ glob@3.2.11
│ │ ├── inherits@2.0.1
│ │ └─┬ minimatch@0.3.0
│ │   ├── lru-cache@2.5.0
│ │   └── sigmund@1.0.0
│ ├── mkdirp@0.3.5
│ ├── sax@0.5.8
│ └─┬ source-map@0.1.40
│   └── amdefine@0.1.0
├─┬ twit@1.1.18
│ └── oauth@0.9.9
└─┬ uploadfs@1.1.8
  ├── async@0.2.10
  ├─┬ gm@1.9.2
  │ ├── array-parallel@0.1.3
  │ ├── array-series@0.1.5
  │ ├── debug@0.7.0
  │ ├── stream-to-buffer@0.0.1
  │ └── through@2.3.6
  ├─┬ knox@0.8.10
  │ ├── debug@0.7.4
  │ ├── mime@1.2.11
  │ ├─┬ stream-counter@0.1.0
  │ │ └─┬ readable-stream@1.0.33
  │ │   ├── core-util-is@1.0.1
  │ │   ├── inherits@2.0.1
  │ │   ├── isarray@0.0.1
  │ │   └── string_decoder@0.10.31
  │ └─┬ xml2js@0.2.8
  │   └── sax@0.5.8
  ├── lodash@2.4.1
  ├── mkdirp@0.3.5
  ├─┬ request@2.12.0
  │ ├─┬ form-data@0.0.3
  │ │ ├── async@0.1.9
  │ │ └─┬ combined-stream@0.0.3
  │ │   └── delayed-stream@0.0.5
  │ └── mime@1.2.7
  └─┬ rimraf@2.0.3
    └── graceful-fs@1.1.14
",bajan64,2015-03-04 09:09:48
524,2015-01-15 14:34:10,"Use `node-debug app.js` instead of `node-inspector app.js`.
I recommend also to update to 0.8.3 (not related with your question)
",3y3,2015-03-04 09:09:48
524,2015-03-04 09:09:48,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide any new information to help us with resolving the issue.
",bajtos,2015-03-04 09:09:48
523,2015-01-14 06:05:44,"I installed iojs 1.0.1 x64 on windows 7 and I want to debug the code, I can not install the node-inspector successfully. How can I do with this?

The error is as follows:

<S_CODE_TOKEN>
",geforcesong,2015-12-06 21:04:52
523,2015-01-14 06:48:25,"Good question. So for now I'm not sure in the response, but I think 90% that it is  ""No"".

First problem is [nan uncompatibility issue](https://github.com/rvagg/nan/pull/224) - we wait v1.5 for updating v8-debug and v8-profiler modules.

Second problem - prebuild binaries. We build them in cloud CI (TravisCI and AppVeyor), so we need to update building matrix for iojs.

### BUT! You can try to continue installation:

How I can see you don't have globally installed `node-gyp`, which is needed to build some submodules of Node Inspector (`v8-debug`, `v8-profiler`). Look at [node-gyp installation info](https://github.com/TooTallNate/node-gyp#installation)
",3y3,2015-12-06 21:04:52
523,2015-01-15 23:18:21,"https://github.com/iojs/io.js/issues/456
",timoxley,2015-12-06 21:04:52
523,2015-01-22 09:38:32,"nan 1.5 has been released now
",ponychicken,2015-12-06 21:04:52
523,2015-01-28 16:14:28,"@3y3 any updates on this?
",bajtos,2015-12-06 21:04:52
523,2015-01-29 03:18:13,"Still not installed successfully.
",geforcesong,2015-12-06 21:04:52
523,2015-01-30 00:45:02,"+1 Can't wait to get it working with io.js
",andyhu,2015-12-06 21:04:52
523,2015-02-09 16:47:12,"+1
",ChrisGciso,2015-12-06 21:04:52
523,2015-02-15 02:54:19,"+1 
",Pana,2015-12-06 21:04:52
523,2015-02-19 13:28:53,"A possible workaround: downgrade to 0.7.x.

<S_CODE_TOKEN>
",bajtos,2015-12-06 21:04:52
523,2015-02-20 11:28:20,"thanks @bajtos, works like a charm until everything is fixed
",colthreepv,2015-12-06 21:04:52
523,2015-03-11 06:29:12,"+1 would more than love to see this work for io.js!
",clintwood,2015-12-06 21:04:52
523,2015-03-30 13:40:41,"I can't see the content of arrays or objects using the old version. Any idea why?
",jlukanta,2015-12-06 21:04:52
523,2015-04-01 09:22:15,"> @jlukanta I can't see the content of arrays or objects using the old version. Any idea why?

See https://github.com/node-inspector/node-inspector/pull/492#issuecomment-87848516
",bajtos,2015-12-06 21:04:52
523,2015-04-05 14:42:01,":+1: 
",ericmdantas,2015-12-06 21:04:52
523,2015-04-22 21:19:17,"node-inspector@0.9.2 seems to work with iojs@1.8.1, have tested `--debug-brk` and also can see the contents of objects.
",JLHwung,2015-12-06 21:04:52
522,2015-01-13 14:36:19,"I've been using node-inspector for quite a while and it's always worked pretty well, until the most recent update. Now when I debug, all my objects say they have no properties (both on hover and in the watch window). In the node-inspector console I see the error `Runtime.getProperties` failed. The error occurs when I'm trying to view an object's properties so it seems pretty clear it's related.

If I try to manually navigate the object graph in the console I can do that just fine. I just have to know that the property is there first, which kind of defeats the purpose.

There's also a `ReferenceError: frame_index is not defined` and `ReferenceError: includeSource is not defined` that shows up periodically in the console. Not sure if that one is related to this issue or not though.

![image](https://cloud.githubusercontent.com/assets/874394/5722128/cbb7cfee-9af6-11e4-99d0-33dc4d5d9add.png)

You can see above when I type `req.url` in the console I am able to see the value. But the properties popover claims there are no properties on `req` and the console is filled with errors.
",chevex,2015-01-13 14:48:51
522,2015-01-13 14:48:51,"Duplicate #461. Use node <=0.10.33 or wait 0.10.36
",3y3,2015-01-13 14:48:51
522,2015-01-13 14:51:37,"Sorry, I thought I searched the issue list well enough but apparently not. Thanks for the link.
",chevex,2015-01-13 14:48:51
522,2015-05-13 11:30:07,"v0.10.35 有问题
",i5ting,2015-01-13 14:48:51
521,2015-01-12 17:46:27,"Like many other NPMs (apparently) node-inspector bin-script contains a CRLF. This breaks usage in linux/unix/mac.

On my mac with a freshly installed node-inspector, v0.8.2:

<S_CODE_TOKEN>

On a linux box, same version:

<S_CODE_TOKEN>

Saving the files as unix fileformat fixes this (vim :set ff=unix). Not sure if that will break usage on windows though.
",aars,2015-01-13 08:29:13
521,2015-01-12 17:49:04,"It seems to happen a lot. https://github.com/npm/npm/issues/4607
",aars,2015-01-13 08:29:13
521,2015-01-12 17:56:38,"This is a very reasonable issue. Last version ewlwased from my Windows machine. I will work on 0.8.3 to fix this. I will wait your feedback after 0.8.3 release
",3y3,2015-01-13 08:29:13
521,2015-01-12 18:04:12,"@3y3 you should configure your git to always use LF in the files - set `core.autocrlf=true` ([explanation](http://stackoverflow.com/a/1967986/69868)).
",bajtos,2015-01-13 08:29:13
521,2015-01-12 18:07:51,"Thanks!
",aars,2015-01-13 08:29:13
521,2015-01-12 19:11:06,"@bajtos , I prefer to also add `.gitattributes` file to project with `* text eol=lf`
",3y3,2015-01-13 08:29:13
521,2015-01-12 20:17:11,"@aars , can you check 0.8.3 please
",3y3,2015-01-13 08:29:13
521,2015-01-13 08:29:12,"<S_CODE_TOKEN>

Works! Thanks!
",aars,2015-01-13 08:29:13
520,2015-01-12 17:17:03,"after installing 0.8.2 this simple command fails

<S_CODE_TOKEN>

node version: v0.10.33
node-inspector version: 0.8.2
",neonstalwart,2015-01-12 17:44:36
520,2015-01-12 17:26:23,"Please try to reinstall. For me 0.8.2 was installed succesefully.

@bajtos , please confirm.
",3y3,2015-01-12 17:44:36
520,2015-01-12 17:30:37,"it definitely doesn't work for me, i just spun up a fresh ubuntu VM and tried it and same thing as on my osx laptop.  0.8.2 fails but 0.8.1 works.

<S_CODE_TOKEN>
",neonstalwart,2015-01-12 17:44:36
520,2015-01-12 17:31:41,"Any errors during the installation?
",3y3,2015-01-12 17:44:36
520,2015-01-12 17:33:55,"nothing

<S_CODE_TOKEN>
",neonstalwart,2015-01-12 17:44:36
520,2015-01-12 17:38:44,"How about downgrade to 0.8.1 (or 0.7.4) and confirm that it works correctly?
",3y3,2015-01-12 17:44:36
520,2015-01-12 17:44:36,"yeah, i did both times.

i also just tried installing via every SHA between 0.8.1 and 0.8.2 to see which one introduced the issue and they all worked and now it works with `npm install -g node-inspector`.

very strange but i'll let it go.  thanks for the help.
",neonstalwart,2015-01-12 17:44:36
520,2015-01-12 17:57:16,"I think your issue is relative to #521
",3y3,2015-01-12 17:44:36
520,2015-01-12 17:59:51,"yes, that's it!
",neonstalwart,2015-01-12 17:44:36
520,2015-01-12 20:51:27,"@neonstalwart , please submit that 0.8.3 will work correctly.
Preferrable to use 

<S_CODE_TOKEN>
",3y3,2015-01-12 17:44:36
520,2015-01-12 20:56:30,":+1: thanks
",neonstalwart,2015-01-12 17:44:36
519,2015-01-12 16:10:18,"I'm running:
- Node.js 0.11.14
- node-inspector 0.8.1
- OS X Yosemite (10.10.1)

When I try to run my script with `node-debug`, I get the following error, and node-inspector exits immediately:

<S_CODE_TOKEN>
",hegemonic,2015-01-12 21:31:58
519,2015-01-12 16:25:36,"I'm getting the same error after installing Node.js from the official 0.11.14 package and reinstalling node-inspector.
",hegemonic,2015-01-12 21:31:58
519,2015-01-12 16:51:32,"This error is relative to prebuild binaries for unstable version.
Node Inspector doesn't have prebuild binaries for 0.11.14, only for 0.11.13 (reason - 0.11.14 have only nightly version for Win x64)

To resolve problem today you have some options for your selection:
1. Downgrade to 0.11.13
2. Reinstall manually `v8-debug` and `v8-profiler` like this:

<S_CODE_TOKEN>

The second option is useful only if you have correct build enviroment (Visual C++, Python, etc.)
",3y3,2015-01-12 21:31:58
519,2015-01-12 19:39:08,"Downgrading to Node.js 0.11.13 fixed the problem. But Node.js 0.11.14 was released in September, so I think it's time to upgrade the prebuilt binaries. It looks like there's an official Win x64 build: http://nodejs.org/dist/v0.11.14/x64/
",hegemonic,2015-01-12 21:31:58
519,2015-01-12 20:56:10,"> It looks like there's an official Win x64 build: http://nodejs.org/dist/v0.11.14/x64/

This dist was builded incorrectly, or specially marked as nightly. [node-pre-gyp issues](https://github.com/mapbox/node-pre-gyp/issues?q=v0.11.14+)
",3y3,2015-01-12 21:31:58
519,2015-01-12 21:31:11,"What fun. :/ Thanks for the added context!
",hegemonic,2015-01-12 21:31:58
519,2015-01-12 21:31:58,"Closing this issue, since it sounds like there's not a good solution until 0.11.15 is released.
",hegemonic,2015-01-12 21:31:58
518,2015-01-12 03:10:51,"I found a long-running process that was run with node-inspector had crashed with this stacktrace:

<S_CODE_TOKEN>

node-inspector 0.8.1
",AgentME,2015-01-12 17:46:46
518,2015-01-12 04:29:40,"Will be fixed in 0.8.2 release
",3y3,2015-01-12 17:46:46
518,2015-01-12 17:46:46,"0.8.2 released
",3y3,2015-01-12 17:46:46
517,2015-01-10 03:32:15,"This was first discovered in here https://github.com/nodeschool/austin/issues/4#.

Reproduced on:-
- Node v0.11.13
- Node Inspector v0.8.1
- Chrome 39.02(64bit)
- Ubuntu 14.04
- More env tested on the [above link](https://github.com/nodeschool/austin/issues/4#issuecomment-65733435) by @dcbartlett 

From my first impression I initially thought this had to do with `lodash` not playing well with `node-inspector` but upon my further investigation I could reproduce this issue on simple `forEach` as well. e.g.

<S_CODE_TOKEN>

So basically, node-inspector crashes whenever it sees `console` in a callback.
I also did the following to keep the code simple with no logics and loops.

<S_CODE_TOKEN>

At the moment using `util.log` is an alternative solution as discussed in the original issue tracker but would love for this to be resolved too. 
",shri3k,2015-01-10 04:32:08
517,2015-01-10 04:18:55,"@sinkingshriek , I commited fixup just now. You can fork master HEAD or wait for releasing 0.8.2
",3y3,2015-01-10 04:32:08
517,2015-01-10 04:32:08,"Wow, that was quick. :laughing: 
Tested with your recent check-in. Works like a charm.
Thanks for the quick fix. :+1: 
",shri3k,2015-01-10 04:32:08
516,2015-01-08 01:45:48,"npm ERR! v8-profiler@5.2.1 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-profiler@5.2.1 install script.
npm ERR! This is most likely a problem with the v8-profiler package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get their info via:
npm ERR!     npm owner ls v8-profiler
npm ERR! There is likely additional logging output above.
npm ERR! System Linux 2.6.32-504.el6.x86_64
npm ERR! command ""/home/node/v0.10.35/bin/node"" ""/home/node/v0.10.35/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd /home/Mages
",robinxc,2015-01-12 17:47:15
516,2015-01-08 02:51:31,"I couldn't install it on my OSX too, tried 2 times :(

Install command: sudo npm install -g node-inspector

Got following errors at the end of installing process:

npm ERR! v8-debug@0.3.1 install: `node-pre-gyp install --fallback-to-build`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the v8-debug@0.3.1 install script.
npm ERR! This is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-pre-gyp install --fallback-to-build
npm ERR! You can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.
npm ERR! System Darwin 13.4.0
npm ERR! command ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd /Users/tiendq/Temp/test
npm ERR! node -v v0.10.35
npm ERR! npm -v 1.4.28
npm ERR! code ELIFECYCLE
npm ERR! not ok code 0
",Tiendq,2015-01-12 17:47:15
516,2015-01-08 10:56:47,"Hey guys, apparently starting from v0.8.0 node-inspector added few additional dependencies. Could you try installing different version and see how it goes (see https://github.com/node-inspector/node-inspector/issues/484#issuecomment-69052229)?
",ekulabuhov,2015-01-12 17:47:15
516,2015-01-08 11:19:23,"FYI, I just installed it successfully with v0.7.4
",Tiendq,2015-01-12 17:47:15
516,2015-01-09 06:08:50,"I added some fixes to v8-profiler and v8-debug. Also I added prebuild binaries for Linux and OSX.
Please try to reinstall node-inspector now.
",3y3,2015-01-12 17:47:15
516,2015-01-10 02:18:06,"@3y3 I got another error.

npm ERR! Error: shasum check failed for /tmp/npm-19331-IyJ-YIOw/registry.npmjs.org/v8-debug/-/v8-debug-0.3.2.tgz
npm ERR! Expected: d9a1fc3871aed1064b39c65a5a8c9b76eb23803e
npm ERR! Actual:   48f3ebba48073df23874c58b92af316a233efed0
npm ERR! From:     https://registry.npmjs.org/v8-debug/-/v8-debug-0.3.2.tgz
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/sha/index.js:38:8
npm ERR!     at ReadStream.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/sha/index.js:85:7)
npm ERR!     at ReadStream.emit (events.js:117:20)
npm ERR!     at _stream_readable.js:944:16
npm ERR!     at process._tickCallback (node.js:442:13)
npm ERR! If you need help, you may report this _entire_ log,
npm ERR! including the npm and node versions, at:
npm ERR!     http://github.com/npm/npm/issues

npm ERR! System Darwin 13.4.0
npm ERR! command ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd /Users/tiendq/Temp/test
npm ERR! node -v v0.10.35
npm ERR! npm -v 1.4.28
npm ERR! not ok code 0
",Tiendq,2015-01-12 17:47:15
516,2015-01-10 04:27:26,"try `npm cache clean`
",3y3,2015-01-12 17:47:15
516,2015-01-10 13:15:30,"Got same error :)
",Tiendq,2015-01-12 17:47:15
516,2015-01-10 13:29:15,"@Tiendq , google says that this is not a problem only of `v8-debug`.

#### Update:

I missed a [link](https://www.google.ru/#newwindow=1&q=npm+shasum+check+failed)
",3y3,2015-01-12 17:47:15
516,2015-01-12 17:47:15,"Original error resolver
",3y3,2015-01-12 17:47:15
515,2015-01-05 14:57:02,"This PR makes it possible for external tools like [chrome-devtools-app](https://github.com/auchenberg/chrome-devtools-app/), to discover an instance of node-inspector as a ""RemoteDebug-endpoint"" over mDNS/Bonjour, as a follow up on https://github.com/node-inspector/node-inspector/issues/506. 

The idea here is to enable discovery of [RemoteDebug](http://remotedebug.org)-compliant endpoints over MDNS. The metadata is based upon the existing Chrome Remote Debug HTTP API. I'm planning to write a little spec for RemoteDebug Endpoint MDNS functionality too. 

![bonjour browser](https://cloud.githubusercontent.com/assets/173559/5614605/05fe966a-94f3-11e4-846a-298f1e854c38.png)
### Changes:
- [x] New utility methods has been added to generate URL's.
- [x] Added remoteDebugService to register the service over MDNS.
- [x] Change default web-host to local detected IP instead of 127.0.0.1
### Questions:

1) I had to change the default web-host to the local IP instead of 127.0.0.1, as the IP is needed in order to enable other clients to connect. Does this open up a security risk? Is there any reason why 127.0.0.1/0.0.0.0 currently is used?
",auchenberg,
515,2015-01-06 05:40:04,"@bajtos , please join to discussion.

@auchenberg , thanks for contribution. This is interesting feature.

>  Is there any reason why 127.0.0.1/0.0.0.0 currently is used?

From time to time I know why we use `0.0.0.0` in `NODE_INSPECTOR_MODE` and `127.0.0.1` in `NODE_DEBUG_MODE`, but unfortunately now I can't remember this.

> I had to change the default web-host to the local IP instead of 127.0.0.1, as the IP is needed in order to enable other clients to connect.

Can you explain me more verbose this part. At first glance new IP detecting opens weak security risk. I prefer to have minimal network area in default configuration, but it's discussable.
",3y3,
515,2015-01-06 06:53:31,"> I had to change the default web-host to the local IP instead of 127.0.0.1, as the IP is needed in order to enable other clients to connect. Does this open up a security risk? Is there any reason why 127.0.0.1/0.0.0.0 currently is used?

127.0.0.1 is used in node-debug mode, as it is the most sensible value. The user is loading the frontend in a local browser, thus a local loopback address is good enough for making the connection, and there is no need to open the debugger server to the whole network.

When running `node-inspector` in a standalone mode, 0.0.0.0 is used mostly for historical reasons. I don't mind changing it to 127.0.0.1, as that is more secure. However, I am opposed to changing it to network IP address as proposed here.

IIUC mDNS/Bonjour correctly, ""it provides a general method to discover services on a local area network"" ([wikipedia](http://en.wikipedia.org/wiki/Bonjour_%28software%29)), which means that we need to register with an IP address visible from the local network.

I am proposing the following changes to your patch:
- Keep the configuration of listening address intact, i.e. 127.0.0.1/0.0.0.0.
- Modify the code registering with mDNS and make it smarter. Detect the situation when the server is listening on 0.0.0.0 and replace 0.0.0.0 with the local network address.
",bajtos,
515,2015-01-06 16:19:21,"Good points @bajtos. 

My intention is to enable the MDNS broadcasting out of the box, in order to minimize the workflow, but I understand the added security risk of binding to a addressable IP. 

Alternatively we could add a command-line flag that would enable MDNS broadcasting, the user could flip when running `node-debug` and `node-inspector`? That way it's explicit. 

Flag enabled: `web-host` is set to the local addressable IP, and MDNS broadcasting is enabled
",auchenberg,
515,2015-01-06 17:15:23,"I am ok with enabling MDNS broadcasting always, or alternatively when Node Inspector is listening on a public address.

Here is what I am proposing:
- `node-debug app.js` keeps listening on 127.0.0.1, this command is not intended for debugging via chrome-devtools-app.
- `node-inspector app.js` keeps listening on 0.0.0.0, a public address is registered with MDNS.
",bajtos,
515,2015-01-08 23:04:44,"Changes implemented:
- [x] node-debug app.js keeps listening on `127.0.0.1`, and there' no additional changes to node-debug
- [x] When `web-host` is set to `0.0.0.0`, the local addressable IP is detected, and used for websocket, inspector and frontend URL generation, plus MDNS broadcast is enabled. 

I still have 3 tests failing, but these are also failing for me in mester. Any cure?
",auchenberg,
515,2015-01-08 23:20:35,"Are you using node v0.10.35?
",3y3,
515,2015-01-09 01:16:04,"I had 3 tests failing on v0.10.33, and now with 0.10.35, 29 tests are failing. 
",auchenberg,
515,2015-01-09 09:05:22,"Apparently the mdns module does not build on vanilla Linux box, see Travis' [log](https://travis-ci.org/node-inspector/node-inspector/jobs/46382591).

<S_CODE_TOKEN>

It seems that MDNS does support non-Mac platforms, but it requires installing extra stuff.

> On Linux and other systems using the avahi daemon the avahi dns_sd compat library and its header files are required. On debianesque systems the package name is libavahi-compat-libdnssd-dev. On other platforms Apples mDNSResponder is recommended. Care should be taken not to install more than one mDNS stack on a system.
> 
> On Windows you are going to need Apples “Bonjour SDK for Windows”. You can download it either from Apple (registration required) or various unofficial sources. Take your pick. After installing the SDK restart your shell or command prompt and make sure the BONJOUR_SDK_HOME environment variable is set. You’ll also need a compiler. Microsoft Visual Studio Express will do. On Windows node >=0.7.9 is required.

I am proposing to make `mdns` an optional dependency and modify the code to handle the case when `require('mdns')` fails.

That way Node Inspector will keep working even for users that don't want to install Avahi/Bonjour on their machine.
",bajtos,
515,2015-01-22 10:01:30,"I'm holding on this PR, until I find a suitable replacement for `mdns`, as we can't add such a dependency to the project. 
",auchenberg,
514,2015-01-05 11:49:00,"Fixes #501
",DeTeam,2015-01-09 02:04:45
514,2015-01-06 05:47:16,"@DeTeam , thanks for contribution. 
LGTM.
I'll merge this pr in my next merge phase.
",3y3,2015-01-09 02:04:45
513,2015-01-04 04:19:32,"I have a setup where I have a server I'm trying to debug, which is on a private network, and behind a loadbalancer. Everything starts alright, and I've tried setting up an ssh tunnel to get into that particular server.

I set up an SSH tunnel like so:

<S_CODE_TOKEN>

which definitely gets me into my server correctly, however, I get this error:

<S_CODE_TOKEN>

Any ideas on possible ways to get around this?
",seiyria,2015-01-13 19:15:49
513,2015-01-13 18:47:34,"What is the URL you entered into your browser?
",bajtos,2015-01-13 19:15:49
513,2015-01-13 18:51:20,"Am I assuming correctly that `http://localhost:8080/debug?port=5858` loads the node-inspector front-end in your browser, but then the websocket connection fails?
",bajtos,2015-01-13 19:15:49
513,2015-01-13 19:15:49,"What you said was correct, @bajtos - I was trying to access it over an SSH tunnel, and I think that was the URL. 

I actually eventually came to a way to get in without using an SSH tunnel, so I think I could close this issue now. I had to forward some ports on each level and I forgot to do it on one of them, so I was unsure of why the connection was failing, seemingly at random.

Sorry to open an issue over something silly!
",seiyria,2015-01-13 19:15:49
513,2015-01-14 13:59:03,"No worries, I am glad you managed to get it working and thank you for letting us know.
",bajtos,2015-01-13 19:15:49
512,2015-01-01 00:27:01,"Closes #509
Closes #500
Closes #497
",3y3,2015-01-10 04:16:59
512,2015-01-01 00:27:56,"Review blocked by #511
",3y3,2015-01-10 04:16:59
512,2015-01-05 08:55:13,"Is it worth adding a unit test?
",bajtos,2015-01-10 04:16:59
512,2015-01-09 17:26:44,"Test added. Hard Coded handle indexes look badly, but I prefer to not overcomplicate test logic now.
",3y3,2015-01-10 04:16:59
512,2015-01-09 18:21:20,"LGTM. :shipit: 
",bajtos,2015-01-10 04:16:59
512,2015-01-12 15:19:20,"I'd like to release this as 0.8.2, any objections?
",bajtos,2015-01-10 04:16:59
512,2015-01-12 15:22:25,"> I'd like to release this as 0.8.2, any objections?

NVM, I see that you are working on a new release in #510.
",bajtos,2015-01-10 04:16:59
511,2014-12-31 23:26:01,"Oooops! I previous commit we prefer to don't test this part, and I did everything I could properly.
Fixed wrong line.
Added covering test.
",3y3,2015-01-09 03:21:08
511,2015-01-05 08:51:56,"LGTM, :shipit: 
",bajtos,2015-01-09 03:21:08
510,2014-12-31 23:22:18,"Previous version doesn't work correctly (it miss first commit message in changelog list).
I can't understand this behavior, but this commit fix it.
",3y3,2015-01-12 16:55:14
510,2015-01-10 06:17:34,"@bajtos , I'm ready to merge this one and release 0.8.2

Also I'm glad to notice that now we have prebuild binaries for Linux and OSX x64 (I'm ready to add x32 atoreleasing if it's needed)
",3y3,2015-01-12 16:55:14
510,2015-01-12 16:27:00,"> First .gitignore rule is ._*, I get the name relative to this rule. Correct me if understand incorrect this mask.

Oh, I did not realise we have such rule in `.gitignore`.

Let's not dwell on details and ship this patch then.

LGTM.
",bajtos,2015-01-12 16:55:14
509,2014-12-30 16:41:12,"I've recently upgraded my node-inspector version, and it appears that console output is now logged in the inspector. Nice!

However, this particular use-case — involving `console.time` and `console.timeEnd` — crashes node-inspector:

<S_CODE_TOKEN>

Complete stack trace:

<S_CODE_TOKEN>

I'm using node `0.10.33` and node-inspector `0.8.1`.
",gillesdemey,2015-01-10 04:16:58
509,2014-12-31 15:09:48,"Same problem here, although I am not sure which console command crashes my process.

/cc @3y3 
",bajtos,2015-01-10 04:16:58
509,2015-01-01 00:30:43,"@bajtos , I added a pr that fixes this bug (#512)
",3y3,2015-01-10 04:16:58
508,2014-12-29 18:16:35,"Hello, I've got this error while while trying to install node-inspector on CentOS 6.3:

<S_CODE_TOKEN>

NodeJs - v0.10.35
NPM - v1.4.28
",iJoyCode,2015-01-14 07:09:32
508,2014-12-30 00:04:05,"Having the same problem.
",bajan64,2015-01-14 07:09:32
508,2014-12-30 08:41:30,"https://node-inspector.s3.amazonaws.com/profiler/v5.2.1/node-v11-linux-x64.tar.gz

Above URL is broken. So actually https://github.com/node-inspector/v8-profiler is broken.

According to https://node-inspector.s3.amazonaws.com/ There are tarballs for Windows only.
",hanjukim,2015-01-14 07:09:32
508,2014-12-30 15:12:39,"> Above URL is broken. So actually https://github.com/node-inspector/v8-profiler is broken.

Thanks, now I see that build is broken. =(
",iJoyCode,2015-01-14 07:09:32
508,2014-12-30 16:14:31,"I'll be glad if someone help me to understand, why autoreleasing for Linux is not working.
[Current progress](https://github.com/3y3/v8-debug/blob/master/.travis.yml) 
[Travis error log](https://travis-ci.org/3y3/v8-debug/jobs/45109962)
Any ideas?
",3y3,2015-01-14 07:09:32
508,2014-12-30 16:16:43,"The publishing for v8-debug and v8-profiler are equivalent. So, when I'll finish v8-debug publishing, I'll copy it to profiler.
",3y3,2015-01-14 07:09:32
508,2014-12-30 16:19:54,"There is also [this interesting issue](https://github.com/node-inspector/v8-profiler/issues/48).
",3y3,2015-01-14 07:09:32
508,2014-12-31 20:05:14,"I don't know if this helps, but

<S_CODE_TOKEN>
",bajan64,2015-01-14 07:09:32
508,2015-01-03 12:39:45,"Any progress with build failing?
",iJoyCode,2015-01-14 07:09:32
508,2015-01-07 08:54:23,"I'm facing the same issue on CentOS 6.6, any updates greatly appreciated.

<S_CODE_TOKEN>
",singh1469,2015-01-14 07:09:32
508,2015-01-09 06:09:09,"I added some fixes to v8-profiler and v8-debug. Also I added prebuild binaries for Linux and OSX.
Please try to reinstall node-inspector now.
",3y3,2015-01-14 07:09:32
508,2015-01-12 17:48:16,"Please confirm that problem solved in 0.8.2
",3y3,2015-01-14 07:09:32
508,2015-01-12 19:00:50,"Builds cleanly now.

But I'm not getting past the initial startup message:

Node Inspector v0.8.1
Visit http://127.0.0.1:8080/debug?port=5858 to start debugging.
express deprecated res.sendfile: Use res.sendFile instead ../../../../usr/lib/node_modules/node-inspector/lib/debug-server.js:17:7

Then it hangs - or at least doesn't display the console messages at the start of my application indicating that it has started to run.

I am able to connect via the browser and the default screen comes up but with no sources or other information specific to my application.
",bajan64,2015-01-14 07:09:32
508,2015-01-14 07:09:32,"I close this issue, because now it builds clearly. For other problems, I think, opening new issue will be better.
",iJoyCode,2015-01-14 07:09:32
507,2014-12-29 07:07:05,"This appears on the console when I hover a variable

  Runtime.getProperties failed.
  ReferenceError: includeSource is not defined

Also, the scope variables only contains a this -> object 
",thedug,2014-12-29 15:24:15
507,2014-12-29 15:24:15,"Closing a duplicate

https://github.com/node-inspector/node-inspector/issues/461
",thedug,2014-12-29 15:24:15
506,2014-12-28 12:54:42,"I just released [Chrome DevTools app](https://github.com/auchenberg/chrome-devtools-app), which is a standalone version of Chrome DevTools, independent of Chrome.

![Intro](https://raw.githubusercontent.com/auchenberg/chrome-devtools-app/master/readme/app-intro.png)

I imagine we could make it possible for node-inspector to use [Chrome DevTools app](https://github.com/auchenberg/chrome-devtools-app), as the front-end instead of hosting it's own version?

We could also explore how to broadcast the node-inspector endpoint via mDNS, similar to how [PonyDebugger](https://github.com/square/PonyDebugger) is making endpoints discoverable by the front-end. 

How about that?
## <bountysource-plugin>

There is a **[$200 open bounty](https://www.bountysource.com/issues/7322808-use-separate-front-end-like-chrome-devtools-app-instead-of-including-own?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** on this issue. Add to the bounty at [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",auchenberg,
506,2015-01-06 05:32:56,"Are you propose to completely deprecate `frontend` folder in Node Inspector project?
If it's so, then it's impossible, because Inspector's frontend has some specials.
",3y3,
506,2015-01-06 06:37:40,"Also keep in mind that the frontend is tightly coupled with the protocol version implemented by the backend. For example, the current Node Inspector version implements protocol from 09/2013. Recent versions of dev-tools frontend may require new commands and/or different response format, depending on the changes made to the protocol in the past.

Having said that, I am open to experimentation as long as the integration with Node Inspector is lightweight and don't add extra maintenance for us.
",bajtos,
506,2015-01-06 15:51:51,"@3y3 Yes I'm proposing to have a ""generic"" DevTool app, that is able to work with multiple targets, ex. chrome, firefox, node-inspector, PonyDebugger, etc.  The point here is that each ""back-end provider"" shouldn't include their own front-end, but focus on providing a backend that is compliant to the Chrome Remote Debugging protocol.

What are the special needs of the node-inspector front-end? It's my understanding that you are using a pull of DevTools from blink, where you are overriding a few configurations, like toggling certain tabs. We should be able to find a way to avoid these overrides.

@bajtos That's a good point. With the latest pull of DevTools from blink master, I'm seeing a few ""unsupported errors"" exceptions being thrown, but that should be solvable too.
",auchenberg,
506,2015-01-12 21:18:06,"I would have postponed the issue for at least six months.
Before this discussion I prefer to update frontend, inject DevTools protocol in app, make Node Inspector more extensible, add gui configuration.

If after this steps will be possible to use external frontend, I will be glad to exclude front-end folder and will vote +1 on this issue.
",3y3,
506,2015-01-13 08:41:08,"@3y3 I think you misunderstood the intent of this issue. AFAIU, @auchenberg wants to allow both usages: to run the UI shipped inside Node Inspector, but also to use chrome-devtools-app as the front-end. Nobody is asking to remove the front-end folder from Node Inspector, at least not yet.
",bajtos,
506,2015-01-13 14:27:43,"@bajtos , on my question

> Are you propose to completely deprecate frontend folder in Node Inspector project?

response

> @3y3 Yes I'm proposing to have a ""generic"" DevTool app, that is able to work with multiple targets, ex. chrome, firefox, node-inspector, PonyDebugger, etc. The point here is that each ""back-end provider"" shouldn't include their own front-end, but focus on providing a backend that is compliant to the Chrome Remote Debugging protocol.

This misinformed me.

So, looking on some parts of `chrome-devtools-app` I think we can be fully compatible, but it needs to introduce extending API. @auchenberg please look at #492 in folder `front-end-node`. Here are some changes that we need to dinamically inject in `chrome-devtools-app` to be compatible.
",3y3,
506,2015-01-14 16:05:30,"Ah, it seems I misunderstood @auchenberg intent. @3y3 you were right in your previous [comment](#issuecomment-69647731). I agree with you that the time to remove front-end from Node Inspector has not come yet.

However, until that time comes, I am personally ok with landing small tweaks that will allow chrome-devtools-app to debug Node apps via Node Inspector backend. That way @auchenberg can explore the concept and refine the implementation, so that when we decide to make the switch, the new solution will be already battle-tested.
",bajtos,
506,2015-01-17 22:00:16,"I'm glad to hear you are open to `Chrome Devtools app`. I'm going to explore the concept more, and dive into the adjustments/overrides you have been making to the Blink Devtools. Thanks for the pointer @3y3. 

My hope is that we, maybe, someday could have a unified DevTool working with node, browsers etc.
",auchenberg,
506,2016-01-06 14:38:13,"Has there been any movement on this?
",knownasilya,
505,2014-12-23 21:43:37,"Double-clicking opens a directory hierarchy in the file explorer.  Double-clicking again does not close the opened directory.  This is definitely a nice to have... would come in handy when a project has a large directory structure.

This was seen on Chrome - 39.0.2171.95 m.
",stonstad,2015-01-13 18:55:51
505,2015-01-13 18:55:51,"I am afraid this is a bug in Chrome Dev Tools, the version shipped in  39.0.2171.95 exhibits the same behaviour. Please report the issue in the Chromium project: http://crbug.com/
",bajtos,2015-01-13 18:55:51
504,2014-12-23 21:39:16,"I can't seem to pinpoint why this stops working.  I am running node-inspector with --save-life-edit.  My files have no special ANSI characters that I am aware of...  The behavior is the same as #382.   Strangely, it worked for me at the beginning of the day and failed by midafternoon.

When it worked correctly node inspector displayed a warning if save-live-edit was not specified.  Now, with live saveLiveEdit specified it does not show a warning and it does not save the file.  The Save As option becomes a no-op.   

Lastly, I confirmed that these are files within the directory hierarchy where my project's node.js files live.

command line syntax:
node-inspector --save-live-edit true

node-inspector version: v0.8.1
node.js version: 0.10.30

Thanks,
Shaun
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7226828-saving-files-stops-working?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",stonstad,
504,2014-12-30 15:56:04,"It appears that server files (i.e. top level node .js file ) is modifiable but others are not.  Is there a limitation around loading files that are loaded by the JVM?
",stonstad,
504,2014-12-30 16:07:17,"Can you reproduce this issue on Node Inspector 0.7.4?
",3y3,
504,2016-02-17 19:09:38,"Let me know if I should create a new issue, but it looks like this is still happening with latest. If I start a Node program under `node-debug`, only files that have been loaded (_not_ those that have been pre-loaded) are editable.

Is this intended?
",Schoonology,
503,2014-12-20 23:23:07,"I hope I'm not bothering you, but I have a question about the source code.  I'm trying to find how the debugger knows the current line number when it connects to a target that is not running.  I see how it finds the file and finds whether it is running.

I'm writing a node debugger to run in the Atom editor.  Thanks in advance ...
",mark-hahn,2014-12-22 06:07:27
503,2014-12-21 00:22:31,"You can find all location info in `frame` response of [v8-debugger-protocol](https://code.google.com/p/v8-wiki/wiki/DebuggerProtocol).
If you want to release your own debugger, I can recommend you to start from this protocol, also this two files are important ([one](https://github.com/joyent/node/blob/master/deps/v8/src/debug-debugger.js), [two](https://github.com/joyent/node/blob/master/deps/v8/src/mirror-debugger.js))
",3y3,2014-12-22 06:07:27
503,2014-12-21 01:17:00,"Thanks very much.  That will get me started nicely.

Can I bug you with one last question?  At the moment I'm connecting to a
running vm and then issuing a suspend.  On that result I'm issuing a frame
request but the results say there are no frames.  Have you seen this before?

On Sat, Dec 20, 2014 at 4:22 PM, 3y3 notifications@github.com wrote:

> You can find all location info in frame response of v8-debugger-protocol
> https://code.google.com/p/v8-wiki/wiki/DebuggerProtocol.
> If you want to release your own debugger, I can recommend you to start
> from this protocol, also this two files are important (one
> https://github.com/joyent/node/blob/master/deps/v8/src/debug-debugger.js,
> two
> https://github.com/joyent/node/blob/master/deps/v8/src/mirror-debugger.js
> )
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/503#issuecomment-67755287
> .
",mark-hahn,2014-12-22 06:07:27
503,2014-12-21 01:50:56,"I should mention that this only happens if the vm was running when I connected and then I did a suspend.  

I shouldn't be wasting your time.  I'll try other commands than suspend.
",mark-hahn,2014-12-22 06:07:27
503,2014-12-22 06:07:27,"For anyone stumbling upon this thread I thought I'd explain what my problem was.  

If the node event loop has nothing to do then stopping execution leaves the debugger with no frames to look at.  In my case I had nothing running but a setTimeout that ran every 2 seconds for less than 1 millisecond.  This means that whenever I stopped it there was nothing to see.

I don't know how to fix this yet but at least I know what is going on.
",mark-hahn,2014-12-22 06:07:27
502,2014-12-20 21:56:18,"Using node-inspector with a debug module like debug makes debug in the node-inspector console output look like:
`[96mapp [36m[90mHEAP USAGE: {""num_full_gc"":8,""num_inc_gc"":5,""heap_compactions"":8,""usage_trend"":0,""estimated_... (length: 149)[36m +3s[0m`

vs:

`app HEAP USAGE: {""num_full_gc"":8,""num_inc_gc"":5,""heap_compactions"":8,""usage_trend"":0,""estimated_base"":19313048,""current_base"":19313048,""min"":16572648,""max"":19313048} +3s`

ANSI support isn't necessary, but maybe eat non ASCII charatcers?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/7166302-support-ansi-console-output?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",nikmartin,
502,2014-12-28 17:42:18,"I think that preprocessing of console strings on the app level is a bad strategy. I prefer to pass all console messages as is, to be compatible with next node debugging protocol (will be backported from webkit).
But I'm agree that output for `debug` module, is unreadable.
So I propose to wait when we'll update frontend to more extensible version, and realize this feature as plugin.
",3y3,
502,2015-04-27 07:37:48,"Cross posting my comment from #595:

> AFAIK, [debug](https://www.npmjs.com/package/debug) supports color output in browser console too, it may be a good source of inspiration.

IMHO, Node Inspector should provide at least very basic ANSI support out of the box. Perhaps we can discard all ANSI control codes by default, and then allow a user plugin to override this behaviour? But then converting ANSI control codes to HTML is a solved problem (see [ansi-to-html](https://www.npmjs.com/package/ansi-to-html)), thus it may be pretty easy to implement full support too.
",bajtos,
502,2015-07-18 10:16:47,":+1: I'm using `bunyan`+`chalk` for nice console colored output, and log messages are unfortunately barely readable with node-inspector. I do agree with @bajtos, Striping ANSI control codes would be at least a good start (eg. drop coloring output).
",mgcrea,
501,2014-12-20 04:00:02,"node-inspector@0.8.1 is prints:

<S_CODE_TOKEN>

when run on the following simple server

<S_CODE_TOKEN>
",maxgurewitz,2015-01-09 02:04:45
501,2014-12-28 17:48:23,"@maxgurewitz , thank for targeting this issue.
This is an easy to pick, so I prefer to wait the pr from someone.
Are you ready to implement it?
",3y3,2015-01-09 02:04:45
501,2015-01-05 11:49:22,"@3y3, @maxgurewitz  check out a PR please: https://github.com/node-inspector/node-inspector/pull/514
",DeTeam,2015-01-09 02:04:45
500,2014-12-18 16:41:02,"Now, to receive message location, we throw error to receive call stack.

This is a bad strategy, because debugger stops on each console.log, if `pause on uncaught error` is enabled.
Also here is an error #497

So we can silently pause execution on console.log receive call stack from `exec_state` and resume execution.
### One problem, I can't imagine how to resume execution =(
",3y3,2015-01-10 04:16:58
500,2014-12-18 16:58:35,"@3y3 can you share the current code you are using to receive message location? Note that you don't need to throw an error, the stack trace is create at the time you call `new Error`:

<S_CODE_TOKEN>

See also [JavaScriptStackTraceApi](https://code.google.com/p/v8-wiki/wiki/JavaScriptStackTraceApi) in V8 docs.
",bajtos,2015-01-10 04:16:58
500,2014-12-18 17:09:27,"> @3y3 can you share the current code you are using to receive message location?

<S_CODE_TOKEN>

[location](https://github.com/node-inspector/node-inspector/blob/master/lib/ConsoleAgent.js#L137-L150)

> Note that you don't need to throw an error, the stack trace is create at the time you call new Error

Wow! I missed this important point. So it will be easy to fix.
And #497 `Case 3` requires a separate investigation.
",3y3,2015-01-10 04:16:58
500,2015-01-06 16:23:30,"Note that this change also fixes a bug where console.log() from inside an anonymous function throws an exception inside this function.  Root cause was because the old regexp didn't work in that case-- the URL was not surrounded by parens.
",asselin,2015-01-10 04:16:58
500,2015-05-04 22:20:36,"> location.url = _location[1];

I was using old version and searching for error message got me here.

<S_CODE_TOKEN>

Thank you for fixing that bug.
",stefek99,2015-01-10 04:16:58
499,2014-12-18 06:15:24,"Trying to install node-inspector on Windows 7, with NodeJS version 0.10.34 and NPM version 1.4.28:
`npm install -g node-inspector`

I get:

<S_CODE_TOKEN>

I think I can [ignore the Visual Studio related error messages](https://github.com/node-inspector/node-inspector/issues/456), but the installation is still blocked by the ""v8-debug package"" error(s).
",adonomay,2014-12-18 21:23:40
499,2014-12-18 07:12:40,"I'm discouraged by your building phase - `v8-debug` and `v8-profiler` have prebuilt binaries for Windows. So first that I can't understand - why pre-build phase was broken, or, in other words, why you can't download pre built binaries from Amazon S3...
Are you using any proxy, which blocks https?
Do you have direct access to this [link](https://node-inspector.s3.amazonaws.com/)?
Do you have globally installed `node-pre-gyp`? (this is not recommended)
",3y3,2014-12-18 21:23:40
499,2014-12-18 17:56:18,"I can get to that link just fine. I am behind a corporate firewall during the day, but the log above is from an attempt last night at home. Don't have node-pre-gyp installed globally.
",adonomay,2014-12-18 21:23:40
499,2014-12-18 20:01:17,"@adonomay for windows node-gyp stuff you will want to do this
https://github.com/TooTallNate/node-gyp/issues/506#issuecomment-56591221

but like @3y3 said it should default you to use the prebuild bins ... building v8 take hours just FYI
",samccone,2014-12-18 21:23:40
499,2014-12-18 21:11:47,"Thanks @samccone . I've got Visual Studio 2013 Professional, with Update 3, but I'm a node amateur. Where should I run `npm i --msvs_version=2013` from? When I run it from C:\ (trying to install node-inspector globally) it complains that there's no `package.json` file in that directory.  I also don't see a package.json file at `C:\Users\adonome\node-gyp\0.10.34`
",adonomay,2014-12-18 21:23:40
499,2014-12-18 21:18:24,"After several restarts and incantations, I'm now failing at the v8-profiler install script:

<S_CODE_TOKEN>

Starting to think this is some problem with my PC, and not an issue with node-inspector.
",adonomay,2014-12-18 21:23:40
499,2014-12-18 21:23:40,"Have moved this to an issue on v8-profiler: https://github.com/node-inspector/v8-profiler/issues/47
",adonomay,2014-12-18 21:23:40
499,2014-12-23 22:40:20,"Found the fix in another NPM-on-windows issue: https://github.com/brianmcd/contextify/issues/129#issuecomment-58168568.  Thanks @blowsie!
",adonomay,2014-12-18 21:23:40
498,2014-12-17 21:57:58,"I am running node-inspector 0.8.1

The command I am running is
`node-debug --hidden='[\""node_modules\""]' -–no-preload --debug-brk=0`

After around 2 min the sources tab fills in with my files.

Even though I specify node_modules as hidden the node_modules are still showing in the sources.

![screen shot 2014-12-17 at 4 54 52 pm](https://cloud.githubusercontent.com/assets/883126/5479683/8741144a-860d-11e4-9450-bb02844fa464.png)

I suspect this is the real cause of the slow boot up time. Any insight would be greatly appreciated, and thanks so much for this great tool!
",samccone,2016-02-10 12:00:41
498,2014-12-18 06:45:26,"How about `node-debug --hidden=""node_modules/"" -–no-preload --debug-brk=0` ?
",3y3,2016-02-10 12:00:41
498,2014-12-18 18:18:33,"just as slow @3y3 

Here is the full command

`/usr/local/lib/node_modules/.bin/node-debug --hidden='node_modules/' -–no-preload --debug-brk=0 --web-host=0.0.0.0 --cli app.js`

Is there anything else I can do to help debug this?
",samccone,2016-02-10 12:00:41
498,2014-12-18 18:23:23,"So looking into the ws frames it looks like it is dumping all of the scripts at once, and that does not seem to be an issue, rather generating that list of scripts is the time consuming part (happening within node-inspector)

![screen shot 2014-12-18 at 1 21 28 pm](https://cloud.githubusercontent.com/assets/883126/5493455/ff8e8120-86b8-11e4-8526-cfe78f97384a.png)
",samccone,2016-02-10 12:00:41
498,2015-01-13 18:45:54,"It seems like `node-debug` is not correctly forwarding `--hidden` option to Node Inspector.
",bajtos,2016-02-10 12:00:41
498,2015-01-13 19:19:38,"awesome! Let me know if I can help out at all in debugging 
",samccone,2016-02-10 12:00:41
498,2015-01-22 15:34:33,"Alright after using the work done in #530 it seems like this problem is still around

![screen shot 2015-01-22 at 10 33 08 am](https://cloud.githubusercontent.com/assets/883126/5858566/2c773ea0-a222-11e4-88c5-beb237c0b6b5.png)

As you can see it takes around 2 min for the UI with my files to load!

After looking around a bit... this line seems highly suspicious 

https://github.com/node-inspector/node-inspector/blame/813354c66e1fee70012aae94863ead0d3eb68abe/front-end/utilities.js#L1297

thoughts?
",samccone,2016-02-10 12:00:41
498,2015-01-22 18:48:22,"My take is that the line 1297 is where the front-end is loading the content of all source files in your project. I guess Chrome developers assume that the files (scripts) are already loaded in the browser, thus its cheap and fast to get them from the backend. Unfortunately that's not the case of Node Inspector, which has to load all of them from the filesystem.

I see two ways how to work around that:
- reduce the number of files served to front-end (e.g. via `--hidden=""node_modules""`)
- contribute a change to Chromium DevTools front-end and make it load files lazily, only after the user asked front-end to open the file
",bajtos,2016-02-10 12:00:41
498,2015-02-04 20:07:52,"I had a similar problem (2-5 minute delays on debugger startup) and did a little digging.

The issue in my case came from giant glob results (cost ~40s) and subseqent filtering (cost ~2 min!) on the backend.

A quick fix for me was to update to the latest version of glob (which stops symlink exploration - my project has quite a few local npm packages linked via `npm link`). But since i do need to debug to one level of symlinks i changed the glob patterns from `**/*`to `**/**/*` in ScriptFileStorage.js which exposes what i needed for debugging. 

<S_CODE_TOKEN>

Now i get everything i need in about 5s... much better. Not sure it's a universal fix, but h.t.h.

refs:
- https://github.com/isaacs/node-glob/issues/134
- https://github.com/ericf/express-handlebars/pull/98
- https://github.com/adgad/express-handlebars/commit/803129ed9b325640cc527aefdb5096dda7661355

PS - There are definitely ways to speed up the filtering as well in `findAllApplicationScripts()`

---

(added Feb 5.) it turns out that because of #370, exposing symlinked directories is not that useful right now. i suggest simply bumping the glob version for now, thereby avoiding traps caused by circular symlink refs.
",jldec,2016-02-10 12:00:41
498,2015-02-05 09:06:40,"One of the root causes is inefficient filtering algorithm in [ScriptFileStorage.findAllApplicationScripts()](https://github.com/node-inspector/node-inspector/blob/7d1f207e922a6bf427d25066bf956c4cb6d247cd/lib/ScriptFileStorage.js#L229-L231):

<S_CODE_TOKEN>

Combination of `files.filter` and `arr.indexOf(elem)` has speed complexity of `O(n^2)`, which scales poorly and explains why the filtering can take several minutes.
",bajtos,2016-02-10 12:00:41
498,2015-11-11 07:51:54,"For me, adding preload and hidden helped.

(Gruntfile.js)

<S_CODE_TOKEN>
",yoshiokatsuneo,2016-02-10 12:00:41
498,2016-02-10 12:00:38,"Should be fixed in 0.12.6
",3y3,2016-02-10 12:00:41
498,2016-02-10 16:18:01,"awesome thanks @3y3 !
",samccone,2016-02-10 12:00:41
497,2014-12-17 16:58:37,"When set up break point on line 11(line after request.on('data'..)  and line 20 of the following code, it hit line 11, watch and step not working. when ""continue"", it hangs about 90+ seconds and pause on line 11 on with some data.

Node inspector version : 0.8.1
Node version: 0.10.32
Tried on Mac and Ubuntu 14.04

Sample application that can be tested with any http post.

<S_CODE_TOKEN>
",goodjius,2015-01-10 04:16:58
497,2014-12-18 07:30:15,"I extend you code example by comments. Please confirm that you don't have problems in `Case 2`.
`Case 1` will be fixed after merging of #450.
",3y3,2015-01-10 04:16:58
497,2014-12-18 16:10:50,"Today, when I run the above example, it's fast and does not have any delay when hitting breakpoints. However,  it throw an exception at Case 3. (see below for details). This exception looks very much like the exception I saw when I tested domain + promises + node-inspector.  
Is there some way to reset node-inspector to clean state?  

undefined:63
      location.url = _location[1];
                              ^
TypeError: Cannot read property '1' of null
    at getCallerFuncLocation (eval at WRAPPED_BY_NODE_INSPECTOR (/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/v8-debug.js:86:15), <anonymous>:63:31)
    at new ConsoleMessage (eval at WRAPPED_BY_NODE_INSPECTOR (/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/v8-debug.js:86:15), <anonymous>:10:20)
    at Console.debug.register.messageId [as log](eval at WRAPPED_BY_NODE_INSPECTOR %28/usr/local/lib/node_modules/node-inspector/node_modules/v8-debug/v8-debug.js:86:15%29, <anonymous>:103:21)
    at /test/plain2.js:40:21
    at IncomingMessage.<anonymous> (/test/plain2.js:28:13)
    at IncomingMessage.emit (events.js:92:17)
    at _stream_readable.js:943:16
    at process._tickCallback (node.js:419:13)

Another problem I have not mention yesterday is at Case 1 point, if I click on files of the stacktrace, 
the source shows blank.  If I manually load those files before sending the request,  source code tab activated properly however setting breakpoint takes very long time to show the line as highlighted.
",goodjius,2015-01-10 04:16:58
497,2014-12-18 16:27:30,"WOW! `Case 3` is very interesting for me! Is't part of my last commit. I will test it. Great thanks for feedback.
",3y3,2015-01-10 04:16:58
497,2014-12-18 17:27:51,"I'll reopen the issue, as `Case 3` looks to me like a bug we should fix.
",bajtos,2015-01-10 04:16:58
496,2014-12-15 11:57:50,"'<node-gyp rebuild 2 > builderror.log  > || <exit 0>'
this error is coming constantly.

<bountysource-plugin>

---

Want to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/7024824-installation-on-windows-7?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",aashishiiita,2015-02-17 10:29:08
496,2014-12-15 13:22:16,"Please provide a full err log. See also #484, this may be a duplicate.
",bajtos,2015-02-17 10:29:08
496,2014-12-15 14:06:55,"![untitled](https://cloud.githubusercontent.com/assets/10194805/5436926/a86d87e8-8491-11e4-8533-47b2b5d6580b.png)

this is coming on installation command
",aashishiiita,2015-02-17 10:29:08
496,2014-12-20 03:03:20,"I have the same issue with Ubuntu 14.04 x64

<S_CODE_TOKEN>
",arbixy,2015-02-17 10:29:08
496,2014-12-29 18:18:37,"Got the same error on CentOS (https://github.com/node-inspector/node-inspector/issues/508)
",iJoyCode,2015-02-17 10:29:08
496,2015-01-01 16:49:51,"See my explanation on #484, maybe it will help.
",cihadturhan,2015-02-17 10:29:08
496,2015-01-12 17:49:31,"Can anybody confirm error on 0.8.2?
",3y3,2015-02-17 10:29:08
496,2015-01-13 23:20:00,"Installed 0.8.3 under (node: 0.10.33, npm: 1.4.28)  Ubuntu 14.04 x64 and under (node: 0.10.35 ) win10 x64 Preview. Worked like a charm.
",arbixy,2015-02-17 10:29:08
496,2015-01-23 06:01:37,"@arbixy thanks for verifying the fix, I am closing this issue as resolved.
",bajtos,2015-02-17 10:29:08
495,2014-12-12 11:39:00,"See issue #494
",tobiasviehweger,2014-12-16 12:58:41
495,2014-12-15 13:21:27,"@3y3 I am fine with landing this patch, do you have any objections? How is this fix related to your work on upgrading the front-end?
",bajtos,2014-12-16 12:58:41
495,2014-12-15 13:58:09,"@bajtos , I ignore all current fixes in frontend. You are free to land it any time.
",3y3,2014-12-16 12:58:41
495,2014-12-16 12:59:05,"Landed via 92c35ed, thank you for the contribution.
",bajtos,2014-12-16 12:58:41
494,2014-12-12 11:38:42,"Hi all,

this is regarding issue #478 and #479. The fix (https://github.com/3y3/node-inspector/commit/326b05eabe6d49af88af7dae1609872892d4dc75) actually did not fix the problem for me, it just made the error different:
![wrong_concat](https://cloud.githubusercontent.com/assets/2111803/5410984/a630a570-81fb-11e4-87b2-726e9fb76dfb.png)

The problem is that this is added as a string in my setup, as the paddingLeftValue is ""14px"".
I've created a pull-request, that solves the issue for me.

Thanks,
Tobi
",tobiasviehweger,2014-12-16 12:58:41
493,2014-12-11 14:42:41,"Fixed bad versioning in ChangeLog.md
Fixed incompatibility with Windows
",3y3,2014-12-15 07:47:51
493,2014-12-11 14:45:27,"@bajtos , please review.
",3y3,2014-12-15 07:47:51
493,2014-12-12 07:40:07,"Please look at new version.
",3y3,2014-12-15 07:47:51
493,2014-12-12 11:04:23,"One more comment.
",bajtos,2014-12-15 07:47:51
493,2014-12-12 11:29:21,"Comment added.
If it's ready, I will wait #490, merge all and release 0.8.2 (reason is #491)
",3y3,2014-12-15 07:47:51
493,2014-12-12 11:46:41,"LGTM.

> If it's ready, I will wait #490, merge all and release 0.8.2 (reason is #491)

Sounds good.
",bajtos,2014-12-15 07:47:51
493,2014-12-15 07:47:51,"Landed as 8cbc6de510755006c58b166c5079055905b2dbd7
",3y3,2014-12-15 07:47:51
492,2014-12-10 10:17:44,,3y3,2015-04-17 11:34:40
492,2015-01-10 14:56:26,"@bajtos , tt's ready to test and review. I added `for tests` commit, because travis switch to 0.11.14 version by default, and we have prebuild binaries only for uncompatible 0.11.13 (I can't publish binaries for 0.11.14 automatically, because there is no win x64 release version). Also we wait 0.10.36.
",3y3,2015-04-17 11:34:40
492,2015-01-19 09:40:54,"@3y3 What's the best way how to review this patch? What are the important things to check?

The last time I was upgrading front-end, I reviewed the diff of the old and the new version to catch any code changes that may affect the front-end. Have you done the same? If not, how did you verify that no regression is introduced by the upgrade?
",bajtos,2015-04-17 11:34:40
492,2015-01-19 11:06:23,"> The last time I was upgrading front-end, I reviewed the diff of the old and the new version to catch any code changes that may affect the front-end. Have you done the same?

This is impossible - big part of files removed, other part renamed and replaced. I only tested that existed interface works correctly.

So I was digging each problem, that I found.

One important thing in this path - I don't use overrides for web socket.
(Look at `Use default web socket to connect to inspector backend` (38e3b43)).

There used default socket connection, therefore old way to open console was deprecated.
(Look at`Extend protocol by Console.showConsole`(4fd2ad3))

Profiling API converted to async style (I also updated `v8-debug` API with `registerCommandAsync`)

Each other commit adds new implementation of existed overriding and removes old impl.
Last commit (`Deprecate unuseful front-end changes`) removes all changes that are not useful for new frontend, in other words I can't find how to use this changes. 

Finally now we need to send main context info to frontend (now devTools works with some contexts in one window (main + workers))
(Look at `Send page context to frontend` (e231659))

Please check that SaveLiveEdit works correctly for you. This is one of very problematic places.
",3y3,2015-04-17 11:34:40
492,2015-01-27 15:49:26,"I reviewed all commits except the front-end update itself, you did a great job!

See my comments above, most of them are concerned about coding style.

I did not test the new version yet, I'll try to do that ASAP, ideally today/tomorrow.
",bajtos,2015-04-17 11:34:40
492,2015-01-28 16:21:41,"> Please check that SaveLiveEdit works correctly for you. This is one of very problematic places.

It does not work :(

Also the page title is wrong, I see `Developer Tools - file://<path-to-app.js>`
",bajtos,2015-04-17 11:34:40
492,2015-03-05 13:14:31,"Rebased to master.

@jakub-g , can you please look at this pr. There exists bug for you.
Now our inspector link is `http://examlpe.com:8080/debug?port=5858&ws=example.com:8080`
This link doesn't work on Windows with `node-debug` command for reason of unescaped `&`.
Original issue in `opener` https://github.com/domenic/opener/issues/9 (It will be nice, if you fix also this issue)

But current issue for you - unhandled error event:

<S_CODE_TOKEN>

@bajtos , now I will work on `saveLiveEdit`. Will be nice if you provide me some failure test.
(But in current time I can live without it)

@marcominetti, @auchenberg , I see that you already rebased to this pr. Any thoughts about `saveLiveEdit`?
",3y3,2015-04-17 11:34:40
492,2015-03-05 13:21:25,"@3y3 what's wrong with saveLiveEdit? I've never tested it. I usually disable inspector's liveedit cause I'm implementing live coding at application server layer in my project.
",marcominetti,2015-04-17 11:34:40
492,2015-03-06 07:58:25,"@3y3 I haven't had a look at `saveLiveEdit` yet. 
",auchenberg,2015-04-17 11:34:40
492,2015-03-06 08:17:55,"@3y3 I will try to find some time and have a look soon
",jakub-g,2015-04-17 11:34:40
492,2015-03-09 11:21:31,"Hi there, I've just spend a few time onbuilding awareness of the saveLiveEdit related stuff.

It seems to me that the live edit triggers (within the backend lib):
1. generate a request for the debugger client of type ""changelive"" through DebuggerAgent.setScriptSource
1.1. try to update call frames for breakpoints/frontend through DebuggerAgent._handleChangeLiveOrRestartFrameResponse
1.2. flush new source code to disk through DebuggerAgent._persistScriptChanges

But where is or should be implemented 'changelive' request handler in debugger? Is it ""changelive"" a V8 debugger feature?
",marcominetti,2015-04-17 11:34:40
492,2015-03-09 13:06:45,"> Is it ""changelive"" a V8 debugger feature?

Yes. Look at [debug-debugger](https://github.com/joyent/node/blob/master/deps/v8/src/debug-debugger.js#L2324-L2369)
",3y3,2015-04-17 11:34:40
492,2015-03-09 14:39:32,"Cool. Great. I'll delve into it... 
",marcominetti,2015-04-17 11:34:40
492,2015-03-10 16:59:02,"@3y3 I am not sure what do you need from me at this point. Do you need me to test the updated front-end and especially live edit? Review the modified code? Something else?
",bajtos,2015-04-17 11:34:40
492,2015-03-10 17:00:06,"@3y3 could you also squash ""fixup"" commits? It will make my review easier.
",bajtos,2015-04-17 11:34:40
492,2015-03-18 08:42:21,"Hi there, to start working on the plugin system #582 I'm reviewing the @3y3 pulled front-end branch. Is there anyone working on that or an updated fork? I started working on cleaning the UI from useless and not-working stuff (and fixed two leftovers causing exceptions).
",marcominetti,2015-04-17 11:34:40
492,2015-03-19 20:50:33,"Ok. I finish inspection of live edit. There is no new problems with this feature, i.e. it works for me on some scripts. But for some other (for example `periodicConsoleLog`) it doesn't work correctly (I can reproduce this behavior on 0.7.4), so this problem is out of scope of this pr (and maybe out of scope of node-inspector).

So, I rebased pr to master. I also added fix for `repeatMessageCounter`.

@bajtos , please review.

> I started working on cleaning the UI from useless and not-working stuff

@marcominetti , you can prepare this as next pr after frontend will be merged.
So I think that `frontend` is ready to merge and we'll do it soon.
",3y3,2015-04-17 11:34:40
492,2015-03-24 12:43:18,"@3y3 new versions of `opener` and `biased-opener` were released, you will get them after `npm install`. I keep in mind unhandled error, will come back to it when I have a spare minute.
",jakub-g,2015-04-17 11:34:40
492,2015-03-24 12:45:51,"@jakub-g , good news thank you!
",3y3,2015-04-17 11:34:40
492,2015-03-30 09:54:14,"I reviewed again. Unfortunately my previous comments were lost, so I did only a quick check for obvious issues. 

Note that I don't have enough time to test that the new front-end is working well, especially in edge cases, I'll leave that out to other volunteers (probably after the change has landed on master).

For posterity, I am cross-posting my new comments below.

> front-end-node/NodeInspectorOverrides.js in 33b5709

Is it worth adding a new method for this? IMO it's ok to define these overrides directly in the constructor.

<S_CODE_TOKEN>

>  tools/generate-front-end.js in ea513f0

This is very weird. `extedModulesBy` is reading `./front-end/inspector.json` and here you are overwriting that file.

Can we keep the auto-generated files in `./front-end-node` please? It will also make it easier to compare our version with the original version (IMO).

>  lib/ConsoleAgent.js in 39329bf

AFAICT, this commit is making two changes:
1. Same messages are no longer grouped together. Is this because the front-end performs grouping now?
2. `clearMessages` is no longer cleaning the cache. I am wondering why we cannot clear the cache? Is there a way how to access a cleared message from the UI? My concern is that the cache can grow too much during a longer debugging session.
",bajtos,2015-04-17 11:34:40
492,2015-03-30 22:03:15,"I see this message when I first load node-inspector in chrome. (I'm using iojs 1.6.2.)

<S_CODE_TOKEN>

Sometimes when I stop on a break point and ""Resume execution with F8"" it hops to the console tab but doesn't always go back when it hits another breakpoint, I then see this message 

<S_CODE_TOKEN>

but I can continue to debug so its not major issue.

Finally, CPU profiling is recording data but you cant leave the profile tab because all tabs become disabled once recording has started.

Otherwise everything is working great, I can hover over arrays + strings and they are shown correctly in the popup and I can also work in the console.
I'm going to keep using this version and will report anything else I find here. 

Thanks doing the work on this, so far so great ;)
",pflannery,2015-04-17 11:34:40
492,2015-04-07 15:50:40,"hi @3y3, any news on latest feedback from @bajtos? 
",marcominetti,2015-04-17 11:34:40
492,2015-04-12 21:29:16,"@bajtos , so I rebased lot of commits for

> This is very weird. extedModulesBy is reading ./front-end/inspector.json and here you are overwriting that file.

All other changes I maked in fixups:

> 1. Same messages are no longer grouped together. Is this because the front-end performs grouping now?
> 2. clearMessages is no longer cleaning the cache. I am wondering why we cannot clear the cache? Is there a way how to access a cleared message from the UI? My concern is that the cache can grow too much during a longer debugging session.

The second case was a bug - fixed in 71cb859

Last two fixups is for

> Is it worth adding a new method for this? IMO it's ok to define these overrides directly in the constructor.

I'll squash fixups after review (or, if you want, before it).
",3y3,2015-04-17 11:34:40
492,2015-04-14 06:39:30,"@3y3 great! This patch is good to be landed, please don't forget to squash the fixup commits before merging.
",bajtos,2015-04-17 11:34:40
492,2015-04-14 06:41:08,"@3y3 Could you please also check why the build is failing? I cannot tell whether the failures are related to this pull request or not. I am fine with landing this patch as it is and investigating build failures later.
",bajtos,2015-04-17 11:34:40
492,2015-04-14 07:13:57,"@bajtos , ok I'll fix test for console API and merge this pr.
",3y3,2015-04-17 11:34:40
492,2015-04-17 11:39:45,"Great! I'll pull request all fixes...

@3y3 my fix/xxx branches are not anymore in sync with master but they were synced with your frontend branch? how can i resync against master? (sorry but i'm still new in prs... oops)  
",marcominetti,2015-04-17 11:34:40
492,2015-04-17 11:42:09,"@marcominetti , I merged this pr. You are free to open your prs now! Please start from smaller =)
",3y3,2015-04-17 11:34:40
492,2015-04-17 11:51:47,"@marcominetti , you can try next:
If `node-inspector/node-inspector` is your `upstream` remote

<S_CODE_TOKEN>

There you receive a list of your commits ahead of master. Comment all that is not a part of your changes

<S_CODE_TOKEN>

So, you are synced with my outdated `frontend` and there can be some small conflicts during rebase that you'll need to fix manually.
",3y3,2015-04-17 11:34:40
492,2015-04-17 14:36:27,"Ok, quite standard way then... ;)
",marcominetti,2015-04-17 11:34:40
491,2014-12-10 10:13:03,"Current serialization algorithm don't support internal properties refs.
So we can't inspect in console something like this:
`console.log(console)` (tested on 0.11.13)
",3y3,2014-12-11 10:04:50
491,2014-12-10 10:13:26,"@bajtos , please review.
",3y3,2014-12-11 10:04:50
491,2014-12-10 10:33:35,"How difficult is it to write a unit-test for this, e.g. test that `console.log(console)` don't crash?
",bajtos,2014-12-11 10:04:50
491,2014-12-10 11:56:05,"Test added
",3y3,2014-12-11 10:04:50
491,2014-12-10 14:18:15,"One more comment. Other than that, the patch LGTM. You can land it once you fix the typos, there's no need to review it again.
",bajtos,2014-12-11 10:04:50
490,2014-12-10 10:00:59,"On Windows if we run `node-debug app` and real file name is App.js,
we have two identical files in resources tree (app.js and App.js),
but we can't set breakpoints in App.js.
",3y3,2014-12-15 07:43:47
490,2014-12-10 10:06:26,"![after](https://cloud.githubusercontent.com/assets/3931155/5374089/570e5ab2-806d-11e4-81f6-ecbbe37877ab.GIF)
",3y3,2014-12-15 07:43:47
490,2014-12-10 10:09:03,"@bajtos , please review
",3y3,2014-12-15 07:43:47
490,2014-12-10 10:32:29,"Please add unit-tests verifying this fix. `ScriptManager` is pretty easy to test, there is no reason why to not write a unit test for that part of the patch. Testing the change in DebuggerAgent may not be worth the effort, however if you move the work to `convert.inspectorUrlToV8Name` as I suggested, then it should be pretty easy to test this method instead.
",bajtos,2014-12-15 07:43:47
490,2014-12-11 12:04:38,"@bajtos , all fixed.
",3y3,2014-12-15 07:43:47
490,2014-12-11 17:12:52,"Reviewed.
",bajtos,2014-12-15 07:43:47
490,2014-12-12 08:01:01,"All fixed
",3y3,2014-12-15 07:43:47
490,2014-12-12 11:49:04,"One more comment, feel free to ignore it.

LGTM, please squash the commits before landing the patch.
",bajtos,2014-12-15 07:43:47
489,2014-12-09 23:20:41,"... instead of trying to reconnect.

Also, node-debug sets autoclose=true on the url.

addresses #472 
",bblack,
489,2014-12-10 08:54:30,"Test fails in `test/index.js`
",3y3,
489,2014-12-10 22:25:21,"tests pass now.
",bblack,
489,2014-12-11 18:35:10,"Well, I swear it was working, but now I'm seeing this in the console:

<S_CODE_TOKEN>

So that pretty much does it for this, I think.
",bblack,
489,2014-12-11 20:44:04,"Use this method `window.open('','_self').close();`
",3y3,
489,2014-12-11 20:57:57,"Removed the leftover `autoclose: autoclose` line.

Even with `window.open('','_self').close();` I get the error.
",bblack,
489,2014-12-11 21:32:12,"> Even with window.open('','_self').close(); I get the error.

I can confirm, it doesn't work now.
",3y3,
489,2014-12-11 21:33:55,"So I found this one `window.open(window.location, '_self').close();`  =)
",3y3,
489,2014-12-11 21:45:52,"> So I found this one window.open(window.location, '_self').close(); =)

I test it 10 minutes ago, and it works for one of my tabs, but now it doesn't work =( I need to sleep to understand this
",3y3,
489,2014-12-12 11:00:25,"I found a problem here: `opener` module doesn't work correctly with & symbol.
So `http://127.0.0.1:8080/debug?port=5858&autoclose=true` will be replaced with `http://127.0.0.1:8080/debug?port=5858`

@bajtos, please check this.
",3y3,
489,2014-12-12 11:10:21,"@3y3 

> I found a problem here: opener module doesn't work correctly with & symbol.
> So http://127.0.0.1:8080/debug?port=5858&autoclose=true will be replaced with http://127.0.0.1:8080/debug?port=5858

Unix shell typically interprets `&` as ""run in background"",  for example

<S_CODE_TOKEN>

I am not able to reproduce the problem you are describing on my machine (OSX Yosemite):

<S_CODE_TOKEN>
",bajtos,
489,2014-12-12 11:22:19,"> I am not able to reproduce the problem you are describing on my machine (OSX Yosemite):
> 
> <S_CODE_TOKEN>

So, for me this test snippet opens `http://127.0.0.1:8080/debug?port=5858`

Is there any way to escape `&` character, or we need to modify `opener`?  Any alternatives to `opener`?
",3y3,
489,2014-12-12 11:46:41,"Ok. We need to escape `&` by `^`

<S_CODE_TOKEN>

@bblack , please replace this part in `bin/node-debug`:

<S_CODE_TOKEN>
",3y3,
489,2014-12-12 12:07:23,"> Ok. We need to escape `&` by `^`

Err, this seems rather brittle to me. I would rather fix this problem in opener.

Consider what will happen to your proposed implementation when opener fixes the problem in the future: it will silently break.
",bajtos,
488,2014-12-09 23:14:52,"I think the expected outcome is that when using `node-debug`, when the debugged process ends, the frontend is supposed to be made aware of that, show an error message, and attempt to reconnect. However, on latest master I see no error message or reconnect attempt in the frontend.
",bblack,2014-12-15 13:19:24
488,2014-12-15 13:19:24,"At the moment, the expected outcome is that `node-debug` ends. It would be nice if the browser window was closed too - see #472 for that.
",bajtos,2014-12-15 13:19:24
487,2014-12-09 21:01:11,"<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",blainesch,2014-12-10 13:52:43
487,2014-12-10 09:14:46,"From your logs I see that installation finished successfully with some warnings.

So I can conclude that node-inspector was installed, but don't works.

<S_CODE_TOKEN>

Is this part expected for you?
",3y3,2014-12-10 13:52:43
487,2014-12-10 13:52:43,"You're right, those are just warning. I reinstalled the newest versions, and if I ignore the warnings it appears to be working. However when installing globally I don't get the test directory so I can't confirm the unit tests are working.
",blainesch,2014-12-10 13:52:43
486,2014-12-08 06:56:50,"I'd like to bump up Node Inspector's version to v1.0 soon, basically after 0.8.0 was tested in the wild for few weeks and all major issues in the new Profiler/Heap/Console components were fixed.

I have created a milestone to track progress: https://github.com/node-inspector/node-inspector/milestones/v1.0

@3y3 thoughts?
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6847031-v1-0?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",bajtos,
486,2014-12-08 08:04:34,"I agree with this strategy. Will be nice to release on 18.12.2014.
Please check some fixes for profilers API #485.

My next step is ""Update frontend"". I'm already finish updating, but need to fix one small bag.
My work line:
- **Update frontend** _(will be ready to review on this week)_
- **Inject InjectedScript.js from webkit** _(WIP blocked by Update frontend)_
- **Redesign agents relative to InjectedScript API** _(WIP blocked by Update frontend)_
- **Add async call stack feature**
- **Make Inspector more extensible**
- **Add GUI for Inspector customisation** (replace general options tab)
",3y3,
486,2014-12-08 10:03:51,"> I agree with this strategy. Will be nice to release on 18.12.2014.

Why on 18.12.2014 in particular?

> My next step is ""Update frontend"". I'm already finish updating, but need to fix one small bag.
> My work line:

I am proposing to split the work as follows:

> Update frontend (will be ready to review on this week)

Land this as part of 1.0, as it will probably change a lot of things, since the UI was not updated for more than a year. Also the 1.0 release will probably get more attention from users, so it will be best to give them a relatively recent UI.

Since the update of UI usually introduces a bug or two, it will be better to release `1.0.0-rc` with the new UI first, and few weeks later release `1.0.0`.

The remaining items can be IMO deferred for post-1.0 releases:

> Inject InjectedScript.js from webkit (WIP blocked by Update frontend)
> Redesign agents relative to InjectedScript API (WIP blocked by Update frontend)
> Add async call stack feature
> Make Inspector more extensible
> Add GUI for Inspector customisation (replace general options tab)

Thoughts?
",bajtos,
485,2014-12-07 20:40:33,,3y3,2014-12-08 12:08:10
485,2014-12-07 23:11:31,"@bajtos , I added windows prebuild binaries in v8-profiler 5.2.1.
We need to update this dependency and release node-inspector 0.8.1
",3y3,2014-12-08 12:08:10
485,2014-12-08 09:55:09,"Is it worth to write unit-tests for the new NaN handling code? If not, then the patch LGTM.

> We need to update this dependency and release node-inspector 0.8.1

Can you make the release yourself, or do you want me to do it?
",bajtos,2014-12-08 12:08:10
485,2014-12-08 10:01:31,"> Is it worth to write unit-tests for the new NaN handling code?

Unfortunately, receiving any variables from HEAP in tests not supported now, because I can't get target objectId (problem with 0.10.\* API). After releasing #450, it will be realisable.

I'll release 0.8.1 by myself
",3y3,2014-12-08 12:08:10
485,2014-12-08 10:08:26,":+1: 
",bajtos,2014-12-08 12:08:10
485,2014-12-08 12:46:23,"@bajtos , Hm... Releasing fails for me on `git-changelog`

<S_CODE_TOKEN>

How I can see, the script don't create `/tmp/changelog`

I use `tools/release.sh 0.8.1` from windows git-bash
",3y3,2014-12-08 12:08:10
485,2014-12-08 13:01:01,"Do you have `/tmp` folder? `/tmp/changelog` is created by `tools/git-changelog`, you can run in standalone to ensure it works.
",bajtos,2014-12-08 12:08:10
485,2014-12-08 13:06:32,"> Do you have /tmp folder?

No, `tmp` folder was not created. (I need to create tmp folder anywhere?)

I run `tools/git-changelog` -> same error
",3y3,2014-12-08 12:08:10
485,2014-12-08 13:19:27,"The tool expects a standard UNIX filesystem which has `/tmp` by default. Feel free to change `tools/git-changelog` to use a different location for the temp file, e.g. `$TMPDIR` instead of `/tmp`, or you can even place the file in the current working directory. Please send this change as a PR so that I can review & test on my Mac.
",bajtos,2014-12-08 12:08:10
485,2014-12-08 14:01:37,"@bajtos , please make this release. I see in `git-changelog` also `/dev/null`.. I'm not ready to replace it now =)
",3y3,2014-12-08 12:08:10
485,2014-12-08 14:59:43,"Released.
",bajtos,2014-12-08 12:08:10
484,2014-12-06 10:45:38,"Hello,

node v0.10.31
npm 1.4.23

When I do : 

<S_CODE_TOKEN>

I get the following error : 

<S_CODE_TOKEN>

Any clue ?
",abenhamdine,2015-06-10 13:14:43
484,2014-12-06 10:47:33,"+1
",Volox,2015-06-10 13:14:43
484,2014-12-06 11:12:08,"with node v0.10.33 and npm 2.1.11 : 

C:\Mes Sites\RM_Web\RM_WEB_WEB\libs\covelys>npm install -g npm
C:\Users\Arnaud\AppData\Roaming\npm\npm -> C:\Users\Arnaud\AppData\Roaming\npm\n
ode_modules\npm\bin\npm-cli.js
npm@2.1.11 C:\Users\Arnaud\AppData\Roaming\npm\node_modules\npm

C:\Mes Sites\RM_Web\RM_WEB_WEB\libs\covelys>npm -v
2.1.11

C:\Mes Sites\RM_Web\RM_WEB_WEB\libs\covelys>npm install -g node-inspector
npm ERR! tar.unpack untar error C:\Users\Arnaud\AppData\Roaming\npm-cache\node-i
nspector\0.8.0\package.tgz
npm ERR! Windows_NT 6.2.9200
npm ERR! argv ""node"" ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\np
m\bin\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v0.10.33
npm ERR! npm  v2.1.11
npm ERR! path C:\Program Files\nodejs\node_modules\node-inspector
npm ERR! code EPERM
npm ERR! errno 50

npm ERR! Error: EPERM, mkdir 'C:\Program Files\nodejs\node_modules\node-inspecto
r'
npm ERR!  { [Error: EPERM, mkdir 'C:\Program Files\nodejs\node_modules\node-insp
ector']
npm ERR!   errno: 50,
npm ERR!   code: 'EPERM',
npm ERR!   path: 'C:\Program Files\nodejs\node_modules\node-inspector',
npm ERR!   fstream_type: 'Directory',
npm ERR!   fstream_path: 'C:\Program Files\nodejs\node_modules\node-inspecto
r',
npm ERR!   fstream_class: 'DirWriter',
npm ERR!   fstream_stack:
npm ERR!    [ 'C:\Users\Arnaud\AppData\Roaming\npm\node_modules\npm\node
_modules\fstream\lib\dir-writer.js:36:23',
npm ERR!      'C:\Users\Arnaud\AppData\Roaming\npm\node_modules\npm\node
_modules\mkdirp\index.js:46:53',
npm ERR!      'Object.oncomplete (fs.js:107:15)' ] }
npm ERR!
npm ERR! Please try running this command again as root/Administrator.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Mes Sites\RM_Web\RM_WEB_WEB\libs\covelys\npm-debug.log
",abenhamdine,2015-06-10 13:14:43
484,2014-12-06 23:54:29,"After installed python 2.7 et VS Express C++, as mentionned in #405, still got errors :  

Your environment has been set up for using Node.js 0.10.33 (x64) and npm.

C:\Windows\System32>npm install -g node-inspector

> v8-debug@0.3.0 install C:\Program Files\nodejs\node_modules\node-inspector\nod
> e_modules\v8-debug
> node-gyp rebuild

C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8-debug>node ""
C:\Users\Arnaud\AppData\Roaming\npm\node_modules\npm\bin\node-gyp-bin\....\nod
e_modules\node-gyp\bin\node-gyp.js"" rebuild
Building the projects in this solution one at a time. To enable parallel build,
please add the ""/m"" switch.
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\Microsoft.Cpp.InvalidPlatform
.Targets(23,7): error MSB8007: The Platform for project 'debug.vcxproj' is inva
lid.  Platform='x64'. You may be seeing this message because you are trying to
build a project without a solution file, and have specified a non-default Platf
orm that doesn't exist for this project. [C:\Program Files\nodejs\node_modules\
node-inspector\node_modules\v8-debug\build\debug.vcxproj]
gyp ERR! build error
gyp ERR! stack Error: `C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe
` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onExit (C:\Users\Arnaud\AppData\Roaming\npm\n
ode_modules\npm\node_modules\node-gyp\lib\build.js:267:23)
gyp ERR! stack     at ChildProcess.emit (events.js:98:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:810:
12)
gyp ERR! System Windows_NT 6.2.9200
gyp ERR! command ""node"" ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\
\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8
-debug
gyp ERR! node -v v0.10.33
gyp ERR! node-gyp -v v1.0.2
gyp ERR! not ok

> v8-profiler@5.1.1 install C:\Program Files\nodejs\node_modules\node-inspector\
> node_modules\v8-profiler
> node-gyp rebuild

C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8-profiler>nod
e ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\npm\bin\node-gyp-bin\....\
node_modules\node-gyp\bin\node-gyp.js"" rebuild
Building the projects in this solution one at a time. To enable parallel build,
please add the ""/m"" switch.
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\Microsoft.Cpp.InvalidPlatform
.Targets(23,7): error MSB8007: The Platform for project 'profiler.vcxproj' is i
nvalid.  Platform='x64'. You may be seeing this message because you are trying
to build a project without a solution file, and have specified a non-default Pl
atform that doesn't exist for this project. [C:\Program Files\nodejs\node_modul
es\node-inspector\node_modules\v8-profiler\build\profiler.vcxproj]
gyp ERR! build error
gyp ERR! stack Error: `C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe
` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onExit (C:\Users\Arnaud\AppData\Roaming\npm\n
ode_modules\npm\node_modules\node-gyp\lib\build.js:267:23)
gyp ERR! stack     at ChildProcess.emit (events.js:98:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:810:
12)
gyp ERR! System Windows_NT 6.2.9200
gyp ERR! command ""node"" ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\
\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8
-profiler
gyp ERR! node -v v0.10.33
gyp ERR! node-gyp -v v1.0.2
gyp ERR! not ok

> ws@0.4.32 install C:\Program Files\nodejs\node_modules\node-inspector\node_mod
> ules\ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

C:\Program Files\nodejs\node_modules\node-inspector\node_modules\ws>node ""C:\Use
rs\Arnaud\AppData\Roaming\npm\node_modules\npm\bin\node-gyp-bin\....\node_modu
les\node-gyp\bin\node-gyp.js"" rebuild
Building the projects in this solution one at a time. To enable parallel build,
please add the ""/m"" switch.
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\Microsoft.Cpp.InvalidPlatform
.Targets(23,7): error MSB8007: The Platform for project 'bufferutil.vcxproj' is
 invalid.  Platform='x64'. You may be seeing this message because you are tryin
g to build a project without a solution file, and have specified a non-default
Platform that doesn't exist for this project. [C:\Program Files\nodejs\node_mod
ules\node-inspector\node_modules\ws\build\bufferutil.vcxproj]
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\Microsoft.Cpp.InvalidPlatform
.Targets(23,7): error MSB8007: The Platform for project 'validation.vcxproj' is
 invalid.  Platform='x64'. You may be seeing this message because you are tryin
g to build a project without a solution file, and have specified a non-default
Platform that doesn't exist for this project. [C:\Program Files\nodejs\node_mod
ules\node-inspector\node_modules\ws\build\validation.vcxproj]
npm ERR! Windows_NT 6.2.9200
npm ERR! argv ""node"" ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\np
m\bin\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v0.10.33
npm ERR! npm  v2.1.11
npm ERR! code ELIFECYCLE

npm ERR! v8-debug@0.3.0 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-debug@0.3.0 install script 'node-gyp rebuild'.
npm ERR! This is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-gyp rebuild
npm ERR! You can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Windows\System32\npm-debug.log
",abenhamdine,2015-06-10 13:14:43
484,2014-12-07 01:19:34,"@abenhamdine , @Volox , I work on prebuild binaries for Windows. YOu can wait some time (one or two days) instead of trying to install full build enviroment.
",3y3,2015-06-10 13:14:43
484,2014-12-07 01:26:20,"@abenhamdine , if you are interesting to install build enviroment you can also try https://github.com/TooTallNate/node-gyp/wiki/Visual-Studio-2010-Setup
",3y3,2015-06-10 13:14:43
484,2014-12-07 12:50:44,"@3y3 thank you for your proposal !

Nethertheless, I m still trying. After installed Visual Express C++ 2013 (instead of VS Express 2010), and run node.cmd as administrator, I'm a bit forward, but still errors : 

Your environment has been set up for using Node.js 0.10.33 (x64) and npm.

C:\Windows\System32>npm install -g node-inspector
/

> v8-profiler@5.1.1 install C:\Program Files\nodejs\node_modules\node-inspector\
> node_modules\v8-profiler
> node-gyp rebuild

## 

C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8-profiler>nod
e ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\npm\bin\node-gyp-bin\....\
node_modules\node-gyp\bin\node-gyp.js"" rebuild
Building the projects in this solution one at a time. To enable parallel build,
please add the ""/m"" switch.
  profiler.cc
  cpu_profiler.cc
  cpu_profile.cc
  cpu_profile_node.cc
  heap_profiler.cc
  heap_snapshot.cc
  heap_output_stream.cc
  heap_graph_node.cc
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\pr
ofiler.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8
-profiler\build\profiler.vcxproj]
  heap_graph_edge.cc
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\cp
u_profiler.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_module
s\v8-profiler\build\profiler.vcxproj]
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\cp
u_profile_node.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_mo
dules\v8-profiler\build\profiler.vcxproj]
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\he
ap_graph_node.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_mod
ules\v8-profiler\build\profiler.vcxproj]
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\he
ap_snapshot.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_modul
es\v8-profiler\build\profiler.vcxproj]
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\he
ap_output_stream.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_
modules\v8-profiler\build\profiler.vcxproj]
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\cp
u_profile.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_modules
\v8-profiler\build\profiler.vcxproj]
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\he
ap_profiler.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_modul
es\v8-profiler\build\profiler.vcxproj]
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory (..\src\he
ap_graph_edge.cc) [C:\Program Files\nodejs\node_modules\node-inspector\node_mod
ules\v8-profiler\build\profiler.vcxproj]
gyp ERR! build error
gyp ERR! stack Error: `C:\Program Files (x86)\MSBuild\12.0\bin\msbuild.exe` fail
ed with exit code: 1
gyp ERR! stack     at ChildProcess.onExit (C:\Users\Arnaud\AppData\Roaming\npm\n
ode_modules\npm\node_modules\node-gyp\lib\build.js:267:23)
gyp ERR! stack     at ChildProcess.emit (events.js:98:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:810:
12)
gyp ERR! System Windows_NT 6.2.9200
gyp ERR! command ""node"" ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\
\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8
-profiler
gyp ERR! node -v v0.10.33
gyp ERR! node-gyp -v v1.0.2
gyp ERR! not ok

> v8-debug@0.3.0 install C:\Program Files\nodejs\node_modules\node-inspector\nod
> e_modules\v8-debug
> node-gyp rebuild

C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8-debug>node ""
C:\Users\Arnaud\AppData\Roaming\npm\node_modules\npm\bin\node-gyp-bin\....\nod
e_modules\node-gyp\bin\node-gyp.js"" rebuild
Building the projects in this solution one at a time. To enable parallel build,
please add the ""/m"" switch.
  debug.cc
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory [C:\Progra
m Files\nodejs\node_modules\node-inspector\node_modules\v8-debug\build\debug.vc
xproj]
gyp ERR! build error
gyp ERR! stack Error: `C:\Program Files (x86)\MSBuild\12.0\bin\msbuild.exe` fail
ed with exit code: 1
gyp ERR! stack     at ChildProcess.onExit (C:\Users\Arnaud\AppData\Roaming\npm\n
ode_modules\npm\node_modules\node-gyp\lib\build.js:267:23)
gyp ERR! stack     at ChildProcess.emit (events.js:98:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:810:
12)
gyp ERR! System Windows_NT 6.2.9200
gyp ERR! command ""node"" ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\
\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:\Program Files\nodejs\node_modules\node-inspector\node_modules\v8
-debug
gyp ERR! node -v v0.10.33
gyp ERR! node-gyp -v v1.0.2
gyp ERR! not ok

> ws@0.4.32 install C:\Program Files\nodejs\node_modules\node-inspector\node_mod
> ules\ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

C:\Program Files\nodejs\node_modules\node-inspector\node_modules\ws>node ""C:\Use
rs\Arnaud\AppData\Roaming\npm\node_modules\npm\bin\node-gyp-bin\....\node_modu
les\node-gyp\bin\node-gyp.js"" rebuild
Building the projects in this solution one at a time. To enable parallel build,
please add the ""/m"" switch.
  bufferutil.cc
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory [C:\Progra
m Files\nodejs\node_modules\node-inspector\node_modules\ws\build\bufferutil.vcx
proj]
  validation.cc
C:\Program Files (x86)\Windows Kits\8.1\Include\um\winsock2.h(882): fatal error
 C1083: Cannot open include file: 'qos.h': No such file or directory [C:\Progra
m Files\nodejs\node_modules\node-inspector\node_modules\ws\build\validation.vcx
proj]
npm ERR! Windows_NT 6.2.9200
npm ERR! argv ""node"" ""C:\Users\Arnaud\AppData\Roaming\npm\node_modules\np
m\bin\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
npm ERR! node v0.10.33
npm ERR! npm  v2.1.11
npm ERR! code ELIFECYCLE

npm ERR! v8-profiler@5.1.1 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-profiler@5.1.1 install script 'node-gyp rebuild'.
npm ERR! This is most likely a problem with the v8-profiler package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-gyp rebuild
npm ERR! You can get their info via:
npm ERR!     npm owner ls v8-profiler
npm ERR! There is likely additional logging output above.

npm ERR! Please include the following file with any support request:
npm ERR!     C:\Windows\System32\npm-debug.log

C:\Windows\System32>
",abenhamdine,2015-06-10 13:14:43
484,2014-12-07 14:37:04,"@abenhamdine , can you please reinstall node-inspector now. I think we ready to test prebuild binaries.
I will wait your result.
",3y3,2015-06-10 13:14:43
484,2014-12-07 14:41:36,"> @abenhamdine , can you please reinstall node-inspector now. I think we ready to test prebuild binaries.
> I will wait your result.

@Volox , you are also welcome to test.
",3y3,2015-06-10 13:14:43
484,2014-12-07 19:52:22,"I just tried to install it with no luck :(

[Here](https://gist.github.com/Volox/b43ddf68d1938110fce5) is my console log and npm log.
",Volox,2015-06-10 13:14:43
484,2014-12-07 20:44:50,"@Volox , ok. I see that the problem is in outdated v8-profiler dependency. If you need node-inspector 0.8.0 at soon, I can recomend to fork it, fix package.json like in #485 and after this run `npm install`.
Or, you can wait 0.8.1 release.
",3y3,2015-06-10 13:14:43
484,2014-12-07 23:57:43,"@3y3, just reinstalled, seem to be the same problem as @volox,

Here the console [log](https://gist.github.com/abenhamdine/0997aa784df939c707de) 
",abenhamdine,2015-06-10 13:14:43
484,2014-12-08 06:57:49,"@Volox , @abenhamdine , thanks for feedback. I like to see in your logs this part:

> v8-debug@0.3.1 install C:\Program Files\nodejs\node_modules\node-inspector\nod
> e_modules\v8-debug
> node-pre-gyp install --fallback-to-build
> [v8-debug] Success: ""C:\Program Files\nodejs\node_modules\node-inspector\node_mo
> dules\v8-debug\build\debug\v0.3.1\node-v11-win32-x64\debug.node"" is installed vi
> a remote

So, after releasing of 0.8.1 the problem with v8-profiler also will be resolved.
",3y3,2015-06-10 13:14:43
484,2014-12-08 15:18:38,"@Volox , @abenhamdine , released 0.8.1. Please try to install it.
",3y3,2015-06-10 13:14:43
484,2014-12-08 21:36:00,"@3y3, looks better !
still some errors on finding file qos.h, but it seems to be installed :  

[Here the log](https://gist.github.com/abenhamdine/4ae7698a817627dd2900#file-console-log)
",abenhamdine,2015-06-10 13:14:43
484,2014-12-09 04:48:50,"Good! Are you tried to debug something? (I see an error in `ws` module, sometimes in this situation debugger can't load front-end. So you can try to install latest ws version in this situation, but I'm not sure that this will be helpful)
",3y3,2015-06-10 13:14:43
484,2015-01-01 16:48:49,"Hi, thanks for all the comments here. I've installed node-inspector 3 times without problems, but this time, I had the similar error log posted above. 

As you suggested, I've installed python 2.7.x and Visual Studio Express 2010 and now it's working but be aware that python and node doesn't add it's executable to path by default so you should click the checkbox during installation or add them to path manually after.

BTW, I've faced another issue after running `node-debug server.js`. It didn't serve correctly which I thought it was about firewall. It turns out it was about node-inspector  and I resolved it by installing `npm install node-debug` so now it's working flawlessly. 
- Node version: 0.10.34-x86
- Python version: 2.7.9-x86

Hope these help someone. 

Cheers
",cihadturhan,2015-06-10 13:14:43
484,2015-01-07 16:55:39,"Hi, had to reinstall node-inspector recently & faced the problem with Python missing (v8-profiler dependency?). Since I never had Python installed before and node-inspector was running fine, I was left scratching my head. 

Figured out that the problem exists with v0.8.0 & 0.8.1 of node-inspector, so tried running `npm install node-inspector@0.7.4 -g` which worked like a charm. I know it's a temp solution and prevents me from upgrading, but it might help somebody looking for a solution now.

Thanks.
",ekulabuhov,2015-06-10 13:14:43
484,2015-01-08 09:03:14,"@ekulabuhov it works!  thanks a lot!
",josietam,2015-06-10 13:14:43
484,2015-01-23 06:02:45,"@ekulabuhov could you please try to install the latest v0.8 version (v0.8.3 or later)? The comments in #496 makes me believe that the issue should be resolved there.
",bajtos,2015-06-10 13:14:43
484,2015-06-10 12:20:48,"I've got same error as @abenhamdine, so installed python27 and now I got error message according to VCBuild.
Installing with ""npm install node-inspector --save"" command

gyp ERR! build error
gyp ERR! stack Error: `C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe
` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onExit (C:\Program Files\nodejs\node_modules\
npm\node_modules\node-gyp\lib\build.js:269:23)
gyp ERR! stack     at ChildProcess.emit (events.js:110:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:1074
:12)
gyp ERR! System Windows_NT 6.3.9600
gyp ERR! command ""node"" ""C:\Program Files\nodejs\node_modules\npm\node_modu
les\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:\Users\me\WebstormProjects\iphonic\node_modules\node-inspector\
node_modules\ws\node_modules\bufferutil
gyp ERR! node -v v0.12.2
gyp ERR! node-gyp -v v1.0.3
gyp ERR! not ok
npm WARN optional dep failed, continuing utf-8-validate@1.1.0

> v8-profiler@5.2.9 install C:\Users\me\WebstormProjects\iphonic\node_modules\
> node-inspector\node_modules\v8-profiler
> node-pre-gyp install --fallback-to-build

[v8-profiler] Success: ""C:\Users\me\WebstormProjects\iphonic\node_modules\node
-inspector\node_modules\v8-profiler\build\profiler\v5.2.9\node-v14-win32-x64\pro
filer.node"" is installed via remote
npm WARN optional dep failed, continuing bufferutil@1.1.0

> v8-debug@0.4.6 install C:\Users\me\WebstormProjects\iphonic\node_modules\nod
> e-inspector\node_modules\v8-debug
> node-pre-gyp install --fallback-to-build

[v8-debug] Success: ""C:\Users\me\WebstormProjects\iphonic\node_modules\node-in
spector\node_modules\v8-debug\build\debug\v0.4.6\node-v14-win32-x64\debug.node""
is installed via remote
node-inspector@0.10.1 node_modules\node-inspector
├── async@0.9.2
├── semver@4.3.6
├── rc@1.0.3 (ini@1.3.4, strip-json-comments@0.1.3, deep-extend@0.2.11, minim
ist@0.0.10)
├── strong-data-uri@1.0.1 (truncate@1.0.4)
├── which@1.1.1 (is-absolute@0.1.7)
├── glob@5.0.10 (path-is-absolute@1.0.0, inherits@2.0.1, inflight@1.0.4, once
@1.3.2, minimatch@2.0.8)
├── yargs@3.10.0 (decamelize@1.0.0, camelcase@1.1.0, window-size@0.1.0, cliui
@2.1.0)
├── biased-opener@0.2.6 (minimist@1.1.0, x-default-browser@0.3.0, browser-lau
ncher2@0.4.5)
├── ws@0.7.2 (options@0.0.6, ultron@1.0.1)
├── v8-profiler@5.2.9 (nan@1.8.4, node-pre-gyp@0.6.7)
└── v8-debug@0.4.6 (nan@1.8.4, node-pre-gyp@0.6.7)
",verybigdog,2015-06-10 13:14:43
484,2015-06-10 12:40:34,"@verybigdog , but from your log I see what you have succesefully installed node-inspector (ignore unimportant error from ws module)
",3y3,2015-06-10 13:14:43
484,2015-06-10 12:50:27,"@3y3 Oh.. sorry i confused. Thanks
",verybigdog,2015-06-10 13:14:43
484,2015-06-10 13:14:42,"This issue is very outdated and I think it was solved by lot of commits in node, v8-debug, v8-profiler and node-inspector.
If there still exist problems with node-inspector installation, please open new issue.
",3y3,2015-06-10 13:14:43
483,2014-12-06 05:00:59,"my npm version is 1.4.21
node v0.10.33

I have two machines that I use to be able to install on.  One has visual studio 2013 pro and the other one doesnt have visual studio at all

Just for kicks I installed VS 2012 on the machine that didn't have VS in it.  But the errors is the same
Ive never had problems installing node-inspector on either machines.  But today I ran it just to see if their is any new updates and I get this error:

c:\WinSDKEnv\sdk\nodejs\node_modules\node-inspector\node_modules\v8-debug>node ""C:\WinSDKEnv\sdk\nodejs\node_modules\npm\bin\node-gyp-bin\
gyp ERR! configure error
gyp ERR! stack Error: spawn ENOENT
gyp ERR! stack     at errnoException (child_process.js:1001:11)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:792:34)
gyp ERR! System Windows_NT 6.1.7601
gyp ERR! command ""node"" ""C:\WinSDKEnv\sdk\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd c:\WinSDKEnv\sdk\nodejs\node_modules\node-inspector\node_modules\v8-debug
gyp ERR! node -v v0.10.33
gyp ERR! node-gyp -v v1.0.1
gyp ERR! not ok
|

> v8-profiler@5.1.1 install c:\WinSDKEnv\sdk\nodejs\node_modules\node-inspector\node_modules\v8-profiler
> node-gyp rebuild

/
c:\WinSDKEnv\sdk\nodejs\node_modules\node-inspector\node_modules\v8-profiler>node ""C:\WinSDKEnv\sdk\nodejs\node_modules\npm\bin\node-gyp-bi
gyp ERR! configure error
gyp ERR! stack Error: spawn ENOENT
gyp ERR! stack     at errnoException (child_process.js:1001:11)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:792:34)
gyp ERR! System Windows_NT 6.1.7601
gyp ERR! command ""node"" ""C:\WinSDKEnv\sdk\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd c:\WinSDKEnv\sdk\nodejs\node_modules\node-inspector\node_modules\v8-profiler
gyp ERR! node -v v0.10.33
gyp ERR! node-gyp -v v1.0.1
gyp ERR! not ok

> ws@0.4.32 install c:\WinSDKEnv\sdk\nodejs\node_modules\node-inspector\node_modules\ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

c:\WinSDKEnv\sdk\nodejs\node_modules\node-inspector\node_modules\ws>node ""C:\WinSDKEnv\sdk\nodejs\node_modules\npm\bin\node-gyp-bin\....\
npm ERR! v8-debug@0.3.0 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the v8-debug@0.3.0 install script.
npm ERR! This is most likely a problem with the v8-debug package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-gyp rebuild
npm ERR! You can get their info via:
npm ERR!     npm owner ls v8-debug
npm ERR! There is likely additional logging output above.

npm ERR! System Windows_NT 6.1.7601
npm ERR! command ""C:\WinSDKEnv\sdk\nodejs\\node.exe"" ""C:\WinSDKEnv\sdk\nodejs\node_modules\npm\bin\npm-cli.js"" ""install"" ""node-
npm ERR! cwd c:\WinSDKEnv\sdk\nodejs\node_modules
npm ERR! node -v v0.10.33
npm ERR! npm -v 1.4.21
npm ERR! code ELIFECYCLE
npm ERR! not ok code 0
",adviner,2014-12-08 18:44:30
483,2014-12-06 06:03:26,"It looks like the version that did work is version 0.7.4 and the current version that is failing is version 0.8.0 and i noticed that this version has v8-debug.
So my question is do I need to also install the node source code.  Since the debug.cc is including:
#include ""nan.h""
#include ""v8-debug.h""
",adviner,2014-12-08 18:44:30
483,2014-12-06 10:47:27,"+1
",Volox,2014-12-08 18:44:30
483,2014-12-06 22:14:22,"I just set up an virtual box environment using this guide lines
https://github.com/TooTallNate/node-gyp/wiki/Visual-Studio-2010-Setup

and it build with no problems
",adviner,2014-12-08 18:44:30
483,2014-12-07 14:57:14,"@adviner , try to reinstall node-inspector now. I added prebuild binaries for v8-profiler and v8-debug. So, now you can yse node-inspector without building tools.
",3y3,2014-12-08 18:44:30
483,2014-12-07 15:16:23,"Awesome. Thank you 

Thanks
Eric Advincula

-------- Original Message --------
From: 3y3 notifications@github.com
Sent: Sunday, December 7, 2014 07:57 AM
To: node-inspector/node-inspector node-inspector@noreply.github.com
Subject: Re: [node-inspector] Installing on windows 7 (#483)
CC: adviner eric.advincula@gmail.com

> @adviner , try to reinstall node-inspector now. I added prebuild binaries for v8-profiler and v8-debug. So, now you can yse node-inspector without building tools.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/node-inspector/node-inspector/issues/483#issuecomment-65939770
",adviner,2014-12-08 18:44:30
483,2014-12-08 18:44:29,"I am closing the issue as resolved. Feel free to reopen if the problem persists.
",bajtos,2014-12-08 18:44:30
482,2014-12-05 07:51:46,"Is there possible to use `node-inspector` installed without `sudo`rights  to local `node_modules` folder of Node.js server app?

Or I should _always_ install  this package globallay with `sudo` rights?
",hellboy81,2014-12-05 18:39:36
482,2014-12-05 18:39:36,"First of all, you should configure `/usr/local` so that you can install packages globally without `sudo`. For example, if you install node on OSX via `brew install node`, it is set up for you that way.

However, you can install Node Inspector locally too, in that case `node-debug` and `node-inspector` are available in `./node-modules/.bin/node-debug` and `./node-modules/.bin/node-inspector`.
",bajtos,2014-12-05 18:39:36
481,2014-12-03 10:29:32,"**tools/release.sh**
- Fix the command pushing the rel tag.
- Fix the TAG name. Before this commit, the version number was
  incorrectly surrounded by curly braces, e.g. `v{0.8.0}`.
- Use the list of changes as a tag message.

**tools/git-changelog**

Modify the changelog generator to always print the header, even when
running with `-l` parameter.

This way the output of `git-changelog -l` makes a proper git commit
message with summary (the header) and a body.

@3y3 please review.
",bajtos,2014-12-04 08:20:11
481,2014-12-03 22:04:10,"LGTM.

L34 one space (not important)
",3y3,2014-12-04 08:20:11
481,2014-12-03 22:17:35,"One more thing:
New version was not published on npm - is this for reason of bad tag name?
",3y3,2014-12-04 08:20:11
481,2014-12-04 08:18:48,"> New version was not published on npm - is this for reason of bad tag name?

My mistake. I publish by default to my local registry and I forgot to promote the package to npmjs.org. I have fixed it now.
",bajtos,2014-12-04 08:20:11
481,2014-12-04 08:20:05,"> L34 one space (not important)

Fixed.
",bajtos,2014-12-04 08:20:11
480,2014-12-03 05:37:11,"When I try to expand an object.
",jtremback,2014-12-04 16:37:42
480,2014-12-04 16:37:42,"A duplicate of #478. Please upgrade your Node Inspector to v0.8.0, the bug should be fixed there.
",bajtos,2014-12-04 16:37:42
479,2014-12-01 11:45:48,"Confirmed working on osx 10.10 with latest Chrome canary.
",coodoo,2014-12-01 16:08:02
479,2014-12-01 16:07:59,"Landed as 326b05eabe6d49af88af7dae1609872892d4dc75

Thank you for contribution.
",3y3,2014-12-01 16:08:02
479,2014-12-02 22:44:13,"Can we get node-inspector updated on npm with this fix? I currently cannot expand any nodes in variable hover overs, watch expressions, or property nodes after typing an object reference into the console. Without being able to expand watch expressions I pretty much can't use node-inspector.
",chevex,2014-12-01 16:08:02
479,2014-12-03 00:41:49,"@chevex  I know that's such a total pain right? :wink: 

For a quick fix, you could replace your local `treeoutline.js` with the latest one from the repo. On mac it should be located under `/usr/local/lib/node_modules`
",coodoo,2014-12-01 16:08:02
479,2014-12-03 02:19:06,"For a quick fix I just installed this repository globally.

> npm install -g node-inspector/node-inspector
",chevex,2014-12-01 16:08:02
478,2014-12-01 04:16:02,"After pausing the app, seems all triangles won't respond to mouse click, see attachment below, hence, I can't see inside the variable for debugging, any idea why this is happening?

![screen shot 2014-12-01 at 12 10 55 pm](https://cloud.githubusercontent.com/assets/325936/5241235/7a4ef76e-7953-11e4-940f-2fdf485ab4f1.png)

There should be two more levels down in `c`.

![screen shot 2014-12-01 at 12 11 05 pm](https://cloud.githubusercontent.com/assets/325936/5241248/9094c01c-7953-11e4-8cf4-975791357c9f.png)
",coodoo,2014-12-01 16:06:39
478,2014-12-01 10:07:02,"@coodoo , please open Dev Tools in `node-inspector` frontend and check any errors in console.

If console don't contains errors, we will switch to next step.
",3y3,2014-12-01 16:06:39
478,2014-12-01 11:20:29,"Just tried `node-debug index.js` and see these errors in the console, any idea?

<S_CODE_TOKEN>

and when I tried to click a triangle, saw this error:

<S_CODE_TOKEN>
",coodoo,2014-12-01 16:06:39
478,2014-12-01 11:26:32,"and after further debugging, the root cause lies in DevTools itself at `treeloutline.js`,

<S_CODE_TOKEN>

Seems `getPropertyCSSValue` function is not there hence the error.
",coodoo,2014-12-01 16:06:39
478,2014-12-01 11:29:32,"Seems this is a known issue, details here #463

This is really a huge deal break, any plan to get it fixed any time soon? Thanks. 
",coodoo,2014-12-01 16:06:39
478,2014-12-01 11:46:23,"I went ahead and fixed the issue, see pull request, thanks.
",coodoo,2014-12-01 16:06:39
478,2014-12-01 16:06:38,"Fixed by #479
",3y3,2014-12-01 16:06:39
477,2014-11-30 17:25:37,"According to the documentation, I should be able to set the `web-port` configuration option via the `.node-inspectorrc` file in `./`, but I cannot. Here is my file structure:

<S_CODE_TOKEN>

The contents of .node-inspectorrc:

<S_CODE_TOKEN>

The command I'm running:

<S_CODE_TOKEN>

Ultimately, the inspector starts, but is using the default `web-port` of `8080`, then exits immediately since my application uses `8080` itself.
",Fauntleroy,2014-12-04 16:34:45
477,2014-11-30 17:26:26,"This is the same problem the https://github.com/node-inspector/node-inspector/pull/436 pull req aimed to solve.
",Fauntleroy,2014-12-04 16:34:45
477,2014-11-30 18:48:28,"What version of node-inspector are you using?
",3y3,2014-12-04 16:34:45
477,2014-11-30 18:52:37,"<S_CODE_TOKEN>
",Fauntleroy,2014-12-04 16:34:45
477,2014-12-04 16:34:45," #436 was released in 0.8.0 yesterday or so. Please upgrade your node inspector and try again.

I am closing this issue, feel free to reopen it if the problem is present in 0.8.0 too.
",bajtos,2014-12-04 16:34:45
476,2014-11-29 11:13:11,"See #474
",3y3,2014-12-01 16:00:08
476,2014-12-01 14:43:42,"Hey @3y3, you forgot to mention my name so I didn't get any notification. It seems to me that this patch overlaps with #475, or is it based on top of that?
",bajtos,2014-12-01 16:00:08
476,2014-12-01 14:54:44,"Yes, it is based on top of #475
",3y3,2014-12-01 16:00:08
476,2014-12-01 14:58:07,"The third commit LGTM, but let's wait with merging until #475 is landed.
",bajtos,2014-12-01 16:00:08
475,2014-11-29 10:23:34,"Closes #473

Serializing and caching of logic moved from consoleAgent to injectorServer to be available from heapProfilerAgent.
",3y3,2014-12-01 16:00:08
475,2014-11-29 10:29:56,"Unfortunately I can't add test for `_lookupHeapObjectId` because I can't find in snapshot heapObjectId targetted to real object with properties.

@bajtos , please review
",3y3,2014-12-01 16:00:08
475,2014-12-01 14:41:11,"I don't understand this code enough to be able to do detailed review. I read through the changes and found out one issue (see the comment above). Everything else looks sensible to me.
",bajtos,2014-12-01 16:00:08
475,2014-12-01 15:21:14,"@bajtos , fixed. I'm ready to merging it and releasing.
",3y3,2014-12-01 16:00:08
475,2014-12-01 15:36:47,":+1: 
",bajtos,2014-12-01 16:00:08
475,2014-12-01 15:37:00,"Please check why the build is failing on Travis.
",bajtos,2014-12-01 16:00:08
475,2014-12-01 15:40:57,"> Please check why the build is failing on Travis.

Uhm... Timeouts
",3y3,2014-12-01 16:00:08
474,2014-11-28 21:32:47,"I need to fix it before 0.8.0
",3y3,2014-12-01 16:00:08
474,2014-11-29 10:51:55,"![default](https://cloud.githubusercontent.com/assets/3931155/5234243/bede92c6-77ce-11e4-9368-f160b63cda57.png)
",3y3,2014-12-01 16:00:08
474,2014-12-01 14:45:56,"FWIW, there's no need to create issues you are going to fix yourself - just submit a pull request and describe the problem there.

Also I am using the label ""Easy pick"" to mark items that are suitable for people that want to start contributing to Node Inspector. I suspect this one is not so easy.
",bajtos,2014-12-01 16:00:08
473,2014-11-27 13:04:23,"This is an expected behavior. For fix I need to reuse [part of ConsoleAgent](https://github.com/node-inspector/node-inspector/blob/master/lib/ConsoleAgent.js#L207-L254) also I need to add HeapProfilerClient with `isHeapObjectId` func, that will be deprecated after #450.
",3y3,2014-12-01 16:00:07
472,2014-11-25 21:57:50,"It would be convenient, if the debugger was automatically opened in the browser by invoking `node-debug`, to have the debugger automatically `window.close()` when it is detached from the debugger.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6527591-feature-request-auto-close-if-auto-opened?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",bblack,
472,2014-11-25 22:10:43,"`window.open('','_self').close();`

Nice idea, I will think about realization. We need to have a choice between auto closing and reconnecting
",3y3,
472,2014-11-28 16:12:46,"I think it makes sense to close the window when it was opened via `node-debug` and reconnect when the window was opened manually by the user.

A relatively easy solution is to modify `node-debug` to append a custom parameter to the URL it opens. The front-end can detect this parameter and close the window after detach in such case.
",bajtos,
472,2014-11-28 16:13:11,"@bblack would you mind contributing this feature yourself?
",bajtos,
472,2014-11-30 02:50:59,"I will try to get a PR in next week.
",bblack,
472,2014-12-09 22:39:00,"It seems that reconnecting doesn't even happen for me currently, because of this code in `bin/node-debug.js` that's killing the inspector process before the frontend can get any indication that the debugged process is stopped:

<S_CODE_TOKEN>

which is caused by these lines

<S_CODE_TOKEN>

Maybe this is worth opening a separate issue?

edit: opened #488 
",bblack,
472,2014-12-10 07:31:18,"> It seems that reconnecting doesn't even happen for me currently, because of this code in bin/node-debug.js that's killing the inspector process before the frontend can get any indication that the debugged process is stopped.

That's intentional. If you want auto-reconnect then you have to keep node inspector running in background and start your process manually via `node --debug` or `node --debug-brk`.
",bajtos,
471,2014-11-24 22:44:59,"Given the script

<S_CODE_TOKEN>

When the debugger breaks on the `debugger;` line, the value of `arguments.length` is 0.
However, `arguments.length` shows as `2` if the script is altered in either of these ways:
- The first line is changed to `var foo = function(a) {`
- A line is inserted after the first line: `console.log(arguments[0]);`

This might be the result of a runtime optimization on the part of the js engine, not node-inspector, but I'm not sure how to check (or disable it).
",bblack,2014-11-28 16:09:45
471,2014-11-28 16:09:45,"The same problem can be reproduced using the built-in `node debug`:

<S_CODE_TOKEN>

This is a problem of V8, it seems to be fixed in node `v0.11.14`:

<S_CODE_TOKEN>
",bajtos,2014-11-28 16:09:45
470,2014-11-24 13:26:40,"-- Problem reproduced with release 0.7.4 and 0.8 (which needs a git tag btw).

Starting Nodemon --debug & Inspector together works fine but it seems that the ability to refresh Inspector on server restart breaks Nodemon reload system — like if it put the server on hold until further notice (which ends with a couchbase timeout in my case).

Commenting the line [279 of InspectorFrontendHostStub](https://github.com/node-inspector/node-inspector/blob/master/front-end/InspectorFrontendHostStub.js#L279) prevents Inspector to reload (the browser must then be reload by hand) and lets Nodemon start the server normally.

Have any of you encounter this same problem?
Is there a way to slow/stop this auto reloading (maybe a timer in config) to prevent the problem?

ps. this may not be easily reproduce because it may needs the server to take some time to start (~30sec in my case) — and some db, external systems to connect to — to append.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/6481340-nodemon-fails-to-restart?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",yamsellem,
470,2014-11-25 15:01:26,"I'm not sure that commented line resolves problem correctly.
Can you play with this fragment of code [Overrides.js](https://github.com/node-inspector/node-inspector/blob/master/front-end-node/Overrides.js#L188-L194)? If commenting of some parts (maybe L192)  here resolves your problem, we can go to next step...
",3y3,
470,2014-11-25 15:43:33,"Commenting the line does not solve anything at all: it just prevent Inspector to auto refresh.

I was more looking for something to configure the auto refresh timer or fix the problem with another approach.

Thanks ;-).
",yamsellem,
470,2016-12-10 10:52:20,"@yamsellem 

How do you run `node-inspector` with `nodemon`? 
Doesn't work in my machine. `node-inspector` is running ok, but doesn't display anything in Devtool. Screenshot:

![127 0 0 1_8088__port 5859 - google chrome 2016-12-10 18 32 30](https://cloud.githubusercontent.com/assets/3880497/21072730/5d73cb6e-bf07-11e6-98dc-cb9749760152.png)

My steps how I start them both:
1. At first I start `node-inspector` in a separate terminal window:
<S_CODE_TOKEN>
2. Then I start `nodemon` with `--debug` option in a separate terminal window:
<S_CODE_TOKEN>

3. Then I open UI for `node-inspector` in Chrome `http://127.0.0.1:8088/?port=5859`. 
And there is nothing in Chrome console. Devtools are empty, see a screenshot above.

My config for `nodemon`:
<S_CODE_TOKEN>

Config for `node-inspector`:
<S_CODE_TOKEN>
",wzup,
469,2014-11-21 13:48:53,"Hi, I'm having problems installing node-inspector using the below command:

-$ sudo npm install -g node-inspector

I'm using Mac OSX Yosemite. NPM version 1.4.3.  
Please see error message below:

---

npm ERR! peerinvalid The package generator-mocha does not satisfy its siblings' peerDependencies requirements!
npm ERR! peerinvalid Peer generator-polymer@0.5.1 wants generator-mocha@>=0.1.3
npm ERR! peerinvalid Peer generator-webapp@0.4.3 wants generator-mocha@~0.1.1

npm ERR! System Darwin 14.0.0
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd /Users/willem/Projects/www/node/sense-auth-app
npm ERR! node -v v0.10.26
npm ERR! npm -v 1.4.3
npm ERR! code EPEERINVALID

---

I'm still able to run my app using the ""node-debug"" command, however the breakpoints I am setting do not seem to be working. 

I've included below the full installation logs incase it is useful..

---

$ sudo npm install -g node-inspector
Password:

npm http GET https://registry.npmjs.org/node-inspector
npm http 200 https://registry.npmjs.org/node-inspector
npm http GET https://registry.npmjs.org/node-inspector/-/node-inspector-0.7.4.tgz
npm http 200 https://registry.npmjs.org/node-inspector/-/node-inspector-0.7.4.tgz
npm http GET https://registry.npmjs.org/glob
npm http GET https://registry.npmjs.org/debug
npm http GET https://registry.npmjs.org/yargs
npm http GET https://registry.npmjs.org/opener
npm http GET https://registry.npmjs.org/strong-data-uri
npm http GET https://registry.npmjs.org/ws
npm http GET https://registry.npmjs.org/rc
npm http GET https://registry.npmjs.org/which
npm http GET https://registry.npmjs.org/express
npm http GET https://registry.npmjs.org/async
npm http 200 https://registry.npmjs.org/opener
npm http 200 https://registry.npmjs.org/strong-data-uri
npm http 200 https://registry.npmjs.org/debug
npm http 304 https://registry.npmjs.org/which
npm http 200 https://registry.npmjs.org/yargs
npm http 200 https://registry.npmjs.org/glob
npm http GET https://registry.npmjs.org/yargs/-/yargs-1.2.6.tgz
npm http 200 https://registry.npmjs.org/ws
npm http 200 https://registry.npmjs.org/rc
npm http GET https://registry.npmjs.org/ws/-/ws-0.4.32.tgz
npm http 200 https://registry.npmjs.org/async
npm http 200 https://registry.npmjs.org/yargs/-/yargs-1.2.6.tgz
npm http 200 https://registry.npmjs.org/ws/-/ws-0.4.32.tgz
npm http 200 https://registry.npmjs.org/express
npm http GET https://registry.npmjs.org/minimist
npm http GET https://registry.npmjs.org/ini
npm http GET https://registry.npmjs.org/deep-extend
npm http 304 https://registry.npmjs.org/ini
npm http 304 https://registry.npmjs.org/deep-extend
npm http 200 https://registry.npmjs.org/minimist
npm http GET https://registry.npmjs.org/truncate
npm http 200 https://registry.npmjs.org/truncate
npm http GET https://registry.npmjs.org/inherits
npm http GET https://registry.npmjs.org/minimatch
npm http GET https://registry.npmjs.org/commander
npm http 304 https://registry.npmjs.org/minimatch
npm http 304 https://registry.npmjs.org/inherits
npm http 200 https://registry.npmjs.org/commander
npm http GET https://registry.npmjs.org/options
npm http GET https://registry.npmjs.org/tinycolor
npm http GET https://registry.npmjs.org/nan
npm http GET https://registry.npmjs.org/buffer-crc32/0.2.1
npm http GET https://registry.npmjs.org/methods/0.1.0
npm http GET https://registry.npmjs.org/fresh/0.2.2
npm http 200 https://registry.npmjs.org/options
npm http 200 https://registry.npmjs.org/tinycolor
npm http 304 https://registry.npmjs.org/buffer-crc32/0.2.1
npm http GET https://registry.npmjs.org/send/0.2.0
npm http GET https://registry.npmjs.org/escape-html/1.0.1
npm http GET https://registry.npmjs.org/cookie-signature/1.0.3
npm http GET https://registry.npmjs.org/parseurl/1.0.1
npm http GET https://registry.npmjs.org/serve-static/1.0.1
npm http GET https://registry.npmjs.org/path-to-regexp/0.1.2
npm http GET https://registry.npmjs.org/accepts/1.0.0
npm http GET https://registry.npmjs.org/merge-descriptors/0.0.2
npm http 200 https://registry.npmjs.org/nan
npm http GET https://registry.npmjs.org/type-is/1.0.0
npm http GET https://registry.npmjs.org/qs/0.6.6
npm http GET https://registry.npmjs.org/truncate/-/truncate-1.0.4.tgz
npm http GET https://registry.npmjs.org/range-parser/1.0.0
npm http GET https://registry.npmjs.org/utils-merge/1.0.0
npm http 200 https://registry.npmjs.org/methods/0.1.0
npm http 200 https://registry.npmjs.org/send/0.2.0
npm http 304 https://registry.npmjs.org/cookie-signature/1.0.3
npm http 304 https://registry.npmjs.org/escape-html/1.0.1
npm http 200 https://registry.npmjs.org/serve-static/1.0.1
npm http GET https://registry.npmjs.org/cookie/0.1.0
npm http 200 https://registry.npmjs.org/path-to-regexp/0.1.2
npm http 200 https://registry.npmjs.org/accepts/1.0.0
npm http 200 https://registry.npmjs.org/type-is/1.0.0
npm http 200 https://registry.npmjs.org/truncate/-/truncate-1.0.4.tgz
npm http 200 https://registry.npmjs.org/qs/0.6.6
npm http 200 https://registry.npmjs.org/range-parser/1.0.0
npm http 200 https://registry.npmjs.org/cookie/0.1.0
npm http 304 https://registry.npmjs.org/parseurl/1.0.1
npm http GET https://registry.npmjs.org/options/-/options-0.0.6.tgz
npm http 304 https://registry.npmjs.org/utils-merge/1.0.0
npm http GET https://registry.npmjs.org/send/-/send-0.2.0.tgz
npm http GET https://registry.npmjs.org/methods/-/methods-0.1.0.tgz
npm http GET https://registry.npmjs.org/serve-static/-/serve-static-1.0.1.tgz
npm http GET https://registry.npmjs.org/nan/-/nan-1.0.0.tgz
npm http GET https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.2.tgz
npm http GET https://registry.npmjs.org/accepts/-/accepts-1.0.0.tgz
npm http 304 https://registry.npmjs.org/fresh/0.2.2
npm http 200 https://registry.npmjs.org/options/-/options-0.0.6.tgz
npm http 200 https://registry.npmjs.org/send/-/send-0.2.0.tgz
npm http 200 https://registry.npmjs.org/serve-static/-/serve-static-1.0.1.tgz
npm http 200 https://registry.npmjs.org/methods/-/methods-0.1.0.tgz
npm http 200 https://registry.npmjs.org/nan/-/nan-1.0.0.tgz
npm http GET https://registry.npmjs.org/type-is/-/type-is-1.0.0.tgz
npm http GET https://registry.npmjs.org/qs/-/qs-0.6.6.tgz
npm http GET https://registry.npmjs.org/range-parser/-/range-parser-1.0.0.tgz
npm http GET https://registry.npmjs.org/cookie/-/cookie-0.1.0.tgz
npm http 200 https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.2.tgz
npm http 200 https://registry.npmjs.org/accepts/-/accepts-1.0.0.tgz
npm http 200 https://registry.npmjs.org/range-parser/-/range-parser-1.0.0.tgz
npm http 200 https://registry.npmjs.org/cookie/-/cookie-0.1.0.tgz
npm http 200 https://registry.npmjs.org/merge-descriptors/0.0.2
npm http 200 https://registry.npmjs.org/type-is/-/type-is-1.0.0.tgz
npm http 200 https://registry.npmjs.org/qs/-/qs-0.6.6.tgz
npm http GET https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-0.0.2.tgz
npm http 200 https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-0.0.2.tgz
npm http GET https://registry.npmjs.org/lru-cache
npm http GET https://registry.npmjs.org/sigmund
npm http 304 https://registry.npmjs.org/lru-cache
npm http 304 https://registry.npmjs.org/sigmund
npm http GET https://registry.npmjs.org/mime
npm http GET https://registry.npmjs.org/send/0.1.4
npm http GET https://registry.npmjs.org/mime
npm http GET https://registry.npmjs.org/negotiator
npm http 304 https://registry.npmjs.org/mime
npm http 200 https://registry.npmjs.org/send/0.1.4
npm http 304 https://registry.npmjs.org/mime
npm http GET https://registry.npmjs.org/send/-/send-0.1.4.tgz
npm http 200 https://registry.npmjs.org/negotiator
npm http 200 https://registry.npmjs.org/send/-/send-0.1.4.tgz

> ws@0.4.32 install /usr/local/lib/node_modules/node-inspector/node_modules/ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

  CXX(target) Release/obj.target/bufferutil/src/bufferutil.o
  SOLINK_MODULE(target) Release/bufferutil.node
  SOLINK_MODULE(target) Release/bufferutil.node: Finished
  CXX(target) Release/obj.target/validation/src/validation.o
  SOLINK_MODULE(target) Release/validation.node
  SOLINK_MODULE(target) Release/validation.node: Finished
npm http GET https://registry.npmjs.org/fresh/0.2.0
npm http GET https://registry.npmjs.org/range-parser/0.0.4
npm http 200 https://registry.npmjs.org/fresh/0.2.0
npm http GET https://registry.npmjs.org/fresh/-/fresh-0.2.0.tgz
npm http 200 https://registry.npmjs.org/range-parser/0.0.4
npm http GET https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz
npm http 200 https://registry.npmjs.org/fresh/-/fresh-0.2.0.tgz
npm http 200 https://registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz
/usr/local/bin/node-inspector -> /usr/local/lib/node_modules/node-inspector/bin/inspector.js
/usr/local/bin/node-debug -> /usr/local/lib/node_modules/node-inspector/bin/node-debug.js
npm ERR! peerinvalid The package generator-mocha does not satisfy its siblings' peerDependencies requirements!
npm ERR! peerinvalid Peer generator-polymer@0.5.1 wants generator-mocha@>=0.1.3
npm ERR! peerinvalid Peer generator-webapp@0.4.3 wants generator-mocha@~0.1.1

npm ERR! System Darwin 14.0.0
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd /Users/willem/Projects/www/node/sense-auth-app
npm ERR! node -v v0.10.26
npm ERR! npm -v 1.4.3
npm ERR! code EPEERINVALID
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /Users/willem/Projects/www/node/sense-auth-app/npm-debug.log
npm ERR! not ok code 0
",fabritw,2014-11-21 14:42:54
469,2014-11-21 14:42:54,"Ok so I got the same error when installing the ""grunt-cli"" package so obviously this is in the wrong place!
",fabritw,2014-11-21 14:42:54
469,2014-11-28 15:40:30,"> npm ERR! peerinvalid Peer generator-polymer@0.5.1 wants generator-mocha@>=0.1.3
> npm ERR! peerinvalid Peer generator-webapp@0.4.3 wants generator-mocha@~0.1.1

This is a common problem with peer dependencies. generator-webapp should not use such strict version spec for peer dependencies.
",bajtos,2014-11-21 14:42:54
468,2014-11-17 05:35:36,"When I run node-inspector, it runs as expected. It opens new tab in Chrome and stops on first breakpoint. I resume the first breakpoint. After about 10 seconds, the node-inspector stops and throws an error:

<S_CODE_TOKEN>

I've tried different ports, I run for example:

<S_CODE_TOKEN>

but it didn't help.
",Olgagr,2014-11-28 15:37:19
468,2014-11-28 15:37:19,"As you can see from the stack trace, this error is thrown from the code of your application:

<S_CODE_TOKEN>

I suspect you have another process listening on the same port. You can verify this assumption by running `node server.js`, I am almost sure it will fail with the same error too.
",bajtos,2014-11-28 15:37:19
468,2015-09-09 19:09:34,"I have the same problem. I didn't get the error when running node server.js
",xiangpenpende,2014-11-28 15:37:19
467,2014-11-14 16:11:31,"In most cases, this command just can be copied and run, and it will work without modifications.
",thorn0,2014-11-28 15:34:42
467,2014-11-28 15:35:20,"I have improved the commit message to follow the [50/72 rule](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html) and landed the patch.

Thank you for the contribution!
",bajtos,2014-11-28 15:34:42
466,2014-11-14 09:52:05,"Use the new style as introduced by 9c19bacc

This is a follow-up for #465

/cc @3y3 
",bajtos,2014-11-14 09:52:31
465,2014-11-10 09:49:35,"Stop increasing the version in `package.json` after a release, do the change just before the next release.

Add a shell script for making the release in one step.

/to @3y3 please review
/cc @sam-github This is addressing your [comment from Jun 19](https://github.com/node-inspector/node-inspector/commit/79b1d60270e8b2364c2b45510928c442c4c41b78#commitcomment-6737390).
",bajtos,2014-11-14 09:51:24
465,2014-11-12 15:04:06,"I don't have other comments
",3y3,2014-11-14 09:51:24
465,2014-11-12 16:28:24,"> I don't have other comments

Good. I'll rework the PR to address our discussion above and let you know when it's ready for your final approval.
",bajtos,2014-11-14 09:51:24
465,2014-11-13 14:11:23,"@3y3 ready for your review.

I have amended the release script per our discussion.

Additionally, I have modified the change-log generator to produce markdown format and renamed `ChangeLog` to `ChangeLog.md`. I'll reformat the content of `ChangeLog.md` in a new commit once this PR is landed.
",bajtos,2014-11-14 09:51:24
465,2014-11-14 07:58:26,"LGTM.

Markdown syntax is allowed now in commit messages or is preferred to use common style?
",3y3,2014-11-14 09:51:24
465,2014-11-14 09:48:52,"> Markdown syntax is allowed now in commit messages or is preferred to use common style?

The ChangeLog picks only the first line of the commit message, which should be at most 50 characters, so it does not really matter.

As for the commit message body, it does not really matter, use whatever works best for you. I tend to use markdown. AFAIK GitHub does not interpret commit messages and renders them as plain text.
",bajtos,2014-11-14 09:51:24
464,2014-11-07 11:53:55,"Fixed broken link
",marcelo-rocha,2014-11-10 08:30:41
464,2014-11-10 08:30:41,"Landed as 608d52e, I have slightly improved the commit message - we use imperative form instead of past tense.

Thank you for the contribution.
",bajtos,2014-11-10 08:30:41
463,2014-11-05 11:45:23,"As of today I am seeing Google Chrome (Version 40.0.2209.0 dev-m (64-bit)) and Canary (Version 40.0.2210.0 canary (64-bit)) do no longer expose `CSSStyleDeclaration.getPropertyCSSValue(propertyName)` as per [Intent to Remove: getPropertyCSSValue, CSSValue and friends](https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/3VmxWFzcyJc/GFOnJxnWBN0J) .

This function [is used in `treeoutline.js` here](https://github.com/node-inspector/node-inspector/blob/master/front-end/treeoutline.js#L943). 
",clintwood,2014-12-01 16:08:47
463,2014-11-06 05:46:58,"Also see:
[Issue 690893002: Don't use getPropertyCSSValue in treeoutline.js](https://codereview.chromium.org/690893002) and
[Side by Side Diff: Source/devtools/front_end/ui/treeoutline.js](https://codereview.chromium.org/690893002/diff/1/Source/devtools/front_end/ui/treeoutline.js) which has a patch to resolve this.
",clintwood,2014-12-01 16:08:47
463,2014-11-14 08:15:22,"@clintwood , thanks for information.

How I can understand, the new version of DevTools frontend not contains this code, so when we start to update frontend, it will be fixed
",3y3,2014-12-01 16:08:47
463,2014-11-16 14:15:48,"@3y3, thanks, for now I have patched my version...
",clintwood,2014-12-01 16:08:47
463,2014-12-01 16:08:47,"Fixed in #479
",3y3,2014-12-01 16:08:47
462,2014-10-28 17:35:57,"My main problem with inspector is that, when uncaught error occurs, the debugger disconnects instead of catching it and displaying it. Honestly, when I open debugger, I encourter an error and I'm trying to solve it, by crashing on it, I'm not much more smarter. So, I would recommend to put whole file to try / catch block and display the errors instead of crashing.
",Anagmate,2014-10-31 16:17:59
462,2014-10-31 16:17:42,"Pausing on uncaught exception is a Node feature that was implemented in Node v0.11 - see https://github.com/joyent/node/pull/5713.
",bajtos,2014-10-31 16:17:59
461,2014-10-28 15:34:18,"I want to see the contents of `global` in the inspector. However, entering `global` in the console, it returns:

![screen shot 2014-10-28 at 16 32 51](https://cloud.githubusercontent.com/assets/319873/4811043/b67874f6-5eb7-11e4-80cc-8d8a83dd6ff3.png)

Entering `console.log(global)` returns undefined, but I see the contents of `global` in the terminal window that started the node process.

---

**This is a regression in Node.js v0.10.35, you should downgrade to v0.10.33.**

<bountysource-plugin>

---

Want to back this issue? **[Place a bounty on it!](https://www.bountysource.com/issues/5579313-global-runtime-getproperties-failed-object-0-not-found?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",WeeJeWel,2015-02-17 10:29:56
461,2014-10-31 16:15:51,"You cannot inspect variables while the debugging process is running, you have to pause it first, e.g. on a breakpoint. Was your process paused when you made the screenshot above?
",bajtos,2015-02-17 10:29:56
461,2014-11-14 08:17:45,"@WeeJeWel , this is a known issue.
You can watch the progress here #450
",3y3,2015-02-17 10:29:56
461,2014-12-20 07:07:13,"I have the same issue when paused and hovering over any object (strings work ok though)

<S_CODE_TOKEN>
",pflannery,2015-02-17 10:29:56
461,2014-12-20 13:03:35,"@pflannery , this is a completely different issue, can you post small example of code to reproduce this?
",3y3,2015-02-17 10:29:56
461,2014-12-21 00:21:37,"I have the same problem when hovering objects:

<S_CODE_TOKEN>

I tried with older version like 0.7.1, 0.7.0 ... and still get the same error. I'm using Ubuntu 14.04, before that i used Ubuntu 12.04 and there was no error like this...
",line23,2015-02-17 10:29:56
461,2014-12-23 09:03:19,"same problem with inspecting code:

<S_CODE_TOKEN>

error:

<S_CODE_TOKEN>
",ASh-Yezz,2015-02-17 10:29:56
461,2014-12-24 10:41:50,"Also having this issue with node v0.10.34 and node-inspector v0.8.1
",Malet,2015-02-17 10:29:56
461,2014-12-24 15:33:10,"I am seeing the same issue with node v0.10.34 and Node Inspector v0.8.1

<S_CODE_TOKEN>
",jkmuka,2015-02-17 10:29:56
461,2014-12-25 01:24:20,"I am also seeing this issue with node v0.10.34 and node-inspector v0.8.1.

<S_CODE_TOKEN>
",acarl,2015-02-17 10:29:56
461,2014-12-26 22:43:29,"Same issue on node v0.10.35 and node-inspector v0.8.1.

<S_CODE_TOKEN>

EDIT: That is, can't see the contents of any objects anymore. 
EDIT2: Doesn't happen in node v0.11.14.
",ekmartin,2015-02-17 10:29:56
461,2014-12-27 10:12:34,"+1
",dotnetCarpenter,2015-02-17 10:29:56
461,2014-12-27 13:04:03,"Ok. This is a problem in latest Node JS version, [related issue](https://github.com/joyent/node/issues/8948)
",3y3,2015-02-17 10:29:56
461,2014-12-29 15:25:33,"+1
",thedug,2015-02-17 10:29:56
461,2014-12-29 21:24:50,"+1
",sbrinkmann,2015-02-17 10:29:56
461,2014-12-29 22:09:51,"@sbrinkmann , @thedug , @dotnetCarpenter , @ekmartin , @acarl , @jkmuka , @Malet , @line23 , @ASh-Yezz , @pflannery please subscribe on [related node issue](https://github.com/joyent/node/issues/8948) to push up his priority.
",3y3,2015-02-17 10:29:56
461,2014-12-30 11:51:46,"+1
",ramusus,2015-02-17 10:29:56
461,2015-01-03 15:34:46,"+1
",anagorsky,2015-02-17 10:29:56
461,2015-01-05 07:44:19,"+1
",justsml,2015-02-17 10:29:56
461,2015-01-05 09:37:06,"FWIW, I have submitted a pull request to fix the problem in Node: https://github.com/joyent/node/pull/8973
",bajtos,2015-02-17 10:29:56
461,2015-01-06 00:57:01,"+1
",MWalid,2015-02-17 10:29:56
461,2015-01-06 03:42:02,"+1
",anatolpa,2015-02-17 10:29:56
461,2015-01-06 09:44:40,"+1
",dab00,2015-02-17 10:29:56
461,2015-01-06 12:59:35,"+1
",nvlbg,2015-02-17 10:29:56
461,2015-01-06 13:15:26,"Adding +1 in this thread is not helpful. Please bug the maintainers of Node and/or V8:
- PR fixing the issue in node:  joyent/node#8973
- Node issue reporting the problem: https://github.com/joyent/node/issues/8948
- V8 issue: https://code.google.com/p/v8/issues/detail?id=3790

I am locking this thread to prevent comment spam.
",bajtos,2015-02-17 10:29:56
461,2015-01-09 11:32:50,"The fix should be landed to Node core soon, see https://github.com/joyent/node/pull/8999.

They are asking us to help with verifying that the patch solves the issue. Any volunteers? Please leave a comment https://github.com/joyent/node/pull/8999 if the patch fixes the problem for you.
",bajtos,2015-02-17 10:29:56
461,2015-02-17 10:29:56,"Fixed in 0.10.36
",3y3,2015-02-17 10:29:56
460,2014-10-25 17:01:07,"I have a Vagrant VM (created with puphpet). This is my node-inspector grunt task config:

<S_CODE_TOKEN>

I start Grunt, I get: 

<S_CODE_TOKEN>

But when I try to either curl or visit my domain with this port parameters, I get connection refused.

<S_CODE_TOKEN>

Here's my VM port-forwarding setup:

<S_CODE_TOKEN>

The normal mode works:

<S_CODE_TOKEN>
",gkatsanos,2014-10-26 17:01:06
460,2014-10-25 17:51:50,"Can you try at first to set web-host to `192.168.56.102` instead of `localhost`
",3y3,2014-10-26 17:01:06
460,2014-10-25 17:59:31,"Thanks, that worked!
",gkatsanos,2014-10-26 17:01:06
459,2014-10-23 09:06:15,"auto open  http://127.0.0.1:8080/debug?port=5858 in browser
",i5ting,2014-10-23 09:16:24
459,2014-10-23 09:16:24,"i am sorry
",i5ting,2014-10-23 09:16:24
458,2014-10-23 07:34:13,"![image](https://cloud.githubusercontent.com/assets/2148448/4749593/84248a1a-5a86-11e4-9f9a-c0eb86b07c24.png)

I run ""node-inspector"" from the command line as I did above. 

The problem:

When open Chrome to http://localhost:8080/debug?port=5858, I get only a flicker of hope before something crashes, and developer tools and debugging console won't completely load (it appears to partially load). Node-inspector works on my other machine, but this problem occurs on my current machine which is a Windows 7 64 bit (node is installed as 64 bit version).

As you can see in the image below, you can see the horizontal bar of chrome debugger trying to load, but then it stops, and that's it.

![image](https://cloud.githubusercontent.com/assets/2148448/4749615/c8ee078e-5a86-11e4-8dae-1bc2c5169866.png)

Is this a known issue? Thanks -alex
",the1mills,2015-05-20 15:58:30
458,2014-10-23 09:21:20,"@the1mills , you have a problem with your building environment. 
`ws` module, that has some native parts, fails on build. 
By documentation `ws` module can work without building, but in current time this is not true. We need to inspect this question and to open issue [here](https://github.com/einaros/ws/issues).

I'm very interesting to figure out this issue and describe it with your help.
",3y3,2015-05-20 15:58:30
458,2014-10-23 19:17:32,"Ok thanks, so what is the next step?

Alex

On Thu, Oct 23, 2014 at 2:21 AM, 3y3 notifications@github.com wrote:

> @the1mills https://github.com/the1mills , you have a problem with your
> building environment.
> ws module, that has some native parts, fails on build.
> By documentation ws module can work without building, but in current time
> this is not true. We need to inspect this question and to open issue here
> https://github.com/einaros/ws/issues.
> 
> I'm very interesting to figure out this issue and describe it with your
> help.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/458#issuecomment-60212902
> .

## 

Alexander D. Mills
(650)269-9502
preferred email address: alexander.d.mills@gmail.com
- www.linkedin.com/pub/alexander-mills/b/7a5/418/
",the1mills,2015-05-20 15:58:30
458,2014-10-24 07:05:02,"- [ ] Reinstall Node Inspector and put install log here.
- [ ] Fork `ws` git project, `npm install` it and run tests. (I think that tests will fail). Put test log to here.
- [ ] Try to use examples from `ws` documentation
- [ ] Open new issue in `ws` project

<S_CODE_TOKEN>

If you don't have installed `Make` you can try something like this:

<S_CODE_TOKEN>
",3y3,2015-05-20 15:58:30
458,2014-10-30 06:28:31,"hi thanks for your help
I tried to run the tests, but it failed as you suspected.
the error log is attached.

here is a screenshot of the errors I got when I ran ""npm install .""

[image: Inline image 1]

What can I do next? Should I open up an issue in the issue tracker?

Thanks

-Alex
",the1mills,2015-05-20 15:58:30
458,2014-10-30 06:41:39,"I also got this error when I re-installed strongloop

> npm uninstall -g strongloop

then I ran

> npm install -g strongloop

I got these errors:

[image: Inline image 1]

On Wed, Oct 29, 2014 at 11:28 PM, Alkzandr Denmanm1 <alexmillsmail@gmail.com

> wrote:
> 
> hi thanks for your help
> I tried to run the tests, but it failed as you suspected.
> the error log is attached.
> 
> here is a screenshot of the errors I got when I ran ""npm install .""
> 
> [image: Inline image 1]
> 
> What can I do next? Should I open up an issue in the issue tracker?
> 
> Thanks
> 
> -Alex

## 

Alexander D. Mills
(650)269-9502
preferred email address: alexander.d.mills@gmail.com
- www.linkedin.com/pub/alexander-mills/b/7a5/418/
",the1mills,2015-05-20 15:58:30
458,2014-10-31 20:06:52,"please help!
alex

On Wed, Oct 29, 2014 at 11:41 PM, Alkzandr Denmanm1 <alexmillsmail@gmail.com

> wrote:
> 
> I also got this error when I re-installed strongloop
> 
> > npm uninstall -g strongloop
> 
> then I ran
> 
> > npm install -g strongloop
> 
> I got these errors:
> 
> [image: Inline image 1]
> 
> On Wed, Oct 29, 2014 at 11:28 PM, Alkzandr Denmanm1 <
> alexmillsmail@gmail.com> wrote:
> 
> > hi thanks for your help
> > I tried to run the tests, but it failed as you suspected.
> > the error log is attached.
> > 
> > here is a screenshot of the errors I got when I ran ""npm install .""
> > 
> > [image: Inline image 1]
> > 
> > What can I do next? Should I open up an issue in the issue tracker?
> > 
> > Thanks
> > 
> > -Alex
> 
> ## 
> 
> Alexander D. Mills
> (650)269-9502
> preferred email address: alexander.d.mills@gmail.com
> - www.linkedin.com/pub/alexander-mills/b/7a5/418/

## 

Alexander D. Mills
(650)269-9502
preferred email address: alexander.d.mills@gmail.com
- www.linkedin.com/pub/alexander-mills/b/7a5/418/
",the1mills,2015-05-20 15:58:30
458,2014-12-18 17:36:43,"@the1mills your comments are missing images (screenshots), please re-attach them via the web interface.
",bajtos,2015-05-20 15:58:30
458,2014-12-21 03:04:19,"Hi Bajitos, thanks, I will attach the logs as text files below, or will copy and past them below. I still have the same problem in the original ticket.
",the1mills,2015-05-20 15:58:30
458,2014-12-21 03:05:28,"According to your instructions above,

---

cd --TEST-DIRECTORY--
git clone https://github.com/einaros/ws
npm install .

## npm test

here is npm install log:

C:\Users\denman\Desktop\test_dir\ws>npm install .

> ws@0.6.3 install C:\Users\denman\Desktop\test_dir\ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)

C:\Users\denman\Desktop\test_dir\ws>node ""C:\Program Files\nodejs\node_modules\n
pm\bin\node-gyp-bin\....\node_modules\node-gyp\bin\node-gyp.js"" rebuild
Building the projects in this solution one at a time. To enable parallel build,
please add the ""/m"" switch.
  bufferutil.cc
..\src\bufferutil.cc(32): warning C4996: 'NanSymbol': was declared deprecated [
C:\Users\denman\Desktop\test_dir\ws\build\bufferutil.vcxproj]
          C:\Users\denman\Desktop\test_dir\ws\node_modules\nan\nan.h(1043) : se
  e declaration of 'NanSymbol'
C:\Users\denman.node-gyp\0.10.34\deps\v8\include\v8.h(179): warning C4506: no
definition for inline function 'v8::Persistentv8::Object v8::Persistent<v8::O
bject>::New(v8::Handlev8::Object)' [C:\Users\denman\Desktop\test_dir\ws\build
\bufferutil.vcxproj]
     Creating library C:\Users\denman\Desktop\test_dir\ws\build\Release\bufferu
  til.lib and object C:\Users\denman\Desktop\test_dir\ws\build\Release\bufferut
  il.exp
  Generating code
  Finished generating code
  bufferutil.vcxproj -> C:\Users\denman\Desktop\test_dir\ws\build\Release\buff
  erutil.node
  validation.cc
..\src\validation.cc(112): warning C4996: 'NanSymbol': was declared deprecated
[C:\Users\denman\Desktop\test_dir\ws\build\validation.vcxproj]
          C:\Users\denman\Desktop\test_dir\ws\node_modules\nan\nan.h(1043) : se
  e declaration of 'NanSymbol'
C:\Users\denman.node-gyp\0.10.34\deps\v8\include\v8.h(179): warning C4506: no
definition for inline function 'v8::Persistentv8::Object v8::Persistent<v8::O
bject>::New(v8::Handlev8::Object)' [C:\Users\denman\Desktop\test_dir\ws\build
\validation.vcxproj]
     Creating library C:\Users\denman\Desktop\test_dir\ws\build\Release\validat
  ion.lib and object C:\Users\denman\Desktop\test_dir\ws\build\Release\validati
  on.exp
  Generating code
  Finished generating code
  validation.vcxproj -> C:\Users\denman\Desktop\test_dir\ws\build\Release\vali
  dation.node
tinycolor@0.0.1 node_modules\tinycolor

options@0.0.6 node_modules\options

ultron@1.0.1 node_modules\ultron

expect.js@0.3.1 node_modules\expect.js

ansi@0.3.0 node_modules\ansi

nan@1.4.1 node_modules\nan

benchmark@0.3.0 node_modules\benchmark

mocha@2.0.1 node_modules\mocha
├── escape-string-regexp@1.0.2
├── diff@1.0.8
├── commander@2.3.0
├── growl@1.8.1
├── debug@2.0.0 (ms@0.6.2)
├── mkdirp@0.5.0 (minimist@0.0.8)
├── jade@0.26.3 (commander@0.6.1, mkdirp@0.3.0)
└── glob@3.2.3 (inherits@2.0.1, graceful-fs@2.0.3, minimatch@0.2.14)

should@4.3.1 node_modules\should
├── should-equal@0.1.0 (should-type@0.0.1)
└── should-format@0.0.2 (should-type@0.0.1)

C:\Users\denman\Desktop\test_dir\ws>
",the1mills,2015-05-20 15:58:30
458,2014-12-21 03:17:28,"and here are the test logs:

> ws@0.6.3 test C:\Users\denman\Desktop\test_dir\ws
> make test

![screenshot 2014-12-20 19 17 26](https://cloud.githubusercontent.com/assets/2148448/5517061/d35a89da-887c-11e4-9360-39dac06a027c.png)
",the1mills,2015-05-20 15:58:30
458,2015-05-20 15:58:30,"Fixed in 0.10.1. (ws module updated)
",3y3,2015-05-20 15:58:30
458,2015-05-21 06:25:30,"thx it worked
On May 20, 2015 8:59 AM, ""Yury Puzynya"" notifications@github.com wrote:

> Closed #458 https://github.com/node-inspector/node-inspector/issues/458.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/node-inspector/node-inspector/issues/458#event-309675242
> .
",the1mills,2015-05-20 15:58:30
457,2014-10-20 15:22:51,"I have several background node processes on the same machine, each one with different debug port, as expected(?)

<S_CODE_TOKEN>

I'm want to debug them all with single node-inspector instance as described here:  
https://github.com/node-inspector/node-inspector#advanced-use
But on node-inspector config you can set only one debug port.

Am i missing something? 
",Bnaya,2014-10-20 18:46:06
457,2014-10-20 18:46:04,"Just change the port value in the URL you open in your browser, e.g. `http://127.0.0.1:8080/debug?port=3951X`. The CLI option is just a shorthand.
",bajtos,2014-10-20 18:46:06
456,2014-10-18 16:33:51,"I have Visual Studio 2013 installed and do regular development

<S_CODE_TOKEN>
",togakangaroo,2014-10-20 14:29:46
456,2014-10-18 22:11:47,"Turns out it installed fine and I can use it - but the above error is still scary and I'm not sure what it means.
",togakangaroo,2014-10-20 14:29:46
456,2014-10-20 14:29:46,"I don't know enough about node-gyp internals to be able to help you here. Feel free to open an issue in node-gyp project: https://github.com/TooTallNate/node-gyp/issues
",bajtos,2014-10-20 14:29:46
455,2014-10-17 07:03:23,"for some reason, node-inspector stopped working on me, so I tried reinstalling, this is what I got:

<S_CODE_TOKEN>

what should I do? I tried installing 'rc' as global package, and it worked properly.
",Bugari,2015-05-14 07:25:44
455,2014-10-20 14:27:47,"This looks like a bug in npm. Try to downgrade npm to `1.x` or the version shipped with your node. If the problem goes away then you know it was a bug in npm.
",bajtos,2015-05-14 07:25:44
455,2015-05-14 07:25:44,"No activity by long time. Feel free to reopen it, if issue doesn't solved.
",3y3,2015-05-14 07:25:44
454,2014-10-11 08:29:25,"I wrote a piece of code to detect a free port and assign it as node-debug port to a new child process by `node --debug=<port>`. From the child process view, although it can get the debug port by `process.execArgv`, can I get the info about ""whether I'm in debug mode"" & ""what's my debug port is""?
",scaret,2014-10-15 12:41:14
454,2014-10-15 12:41:14,"This question is not specific to Node Inspector, it is a general Node.js question. Please post it to Node mailing list: https://groups.google.com/forum/#!forum/nodejs
",bajtos,2014-10-15 12:41:14
453,2014-10-09 15:26:48,"I have node-debug v0.7.4, node v0.10.32 installed on ubuntu 14.04 64bit. Every time I try to debug any script, from the most simple one to the complex one, node-debug starts browser and loads nothing, just like in the image I posted here 
![node-debut](https://cloud.githubusercontent.com/assets/7090457/4578928/71eb0130-4fc8-11e4-8290-756f65628390.png)

If I attempt to do the same thing on a iOS environment then the debug starts ok and I can actually see breakpoints, variables values and everything else.

Can anyone help? Thanks
",lucadv,2014-10-10 09:10:29
453,2014-10-09 15:58:50,"Please open DevTools in Node Inspector frontend. Is there any errors?
",3y3,2014-10-10 09:10:29
453,2014-10-10 09:10:24,"I was using firefox, when opened with chrome it started working fine. So I guess it's a browser issue. Anyway thanks .
",lucadv,2014-10-10 09:10:29
452,2014-10-06 18:44:37,"I'm currently building an app very similar to node-inspector, only does not open a browser window and also hooks to the shell.

https://github.com/stevenvachon/nodecon

![](http://oi57.tinypic.com/zvevtg.jpg)

It currently uses [weinre](http://people.apache.org/~pmuellr/weinre-docs/latest/) and am thinking that this library might be better suited. I'm digging through the code, but it seems very tightly knit to the CLI. Would it better to use your [v8-debug](https://npmjs.org/v8-debug) library instead?

Any assistance would be appreciated.
",stevenvachon,2014-12-18 17:35:03
452,2014-10-06 20:43:02,"Hello @stevenvachon , I'm currently work on implementation of console tracing #219. This pr is very outdated now, but it is a milestone for Node Inspector 0.8.0 release. Also here exist other pr, that grant the access to one important part of webkit (not v8) protocol - serialization and caching of objects #450. 
So, I need to finish second pr to update `Console API`.

If you want to joke with WebKit DevTools protocol, I can recomend you latest v8-debug version, that contains `runInDebugContext` method. In 450 pr I use it to inject some parts of webkit sources to debugging process.
",3y3,2014-12-18 17:35:03
452,2014-10-06 20:56:40,"I just found out today that Node is working on changing over to V8's new debugger protocol. While it probably won't make it into Node 0.12.0, but perhaps 0.12.1, it will cause some problems with node-inspector. Is that what #450 is regarding?
",stevenvachon,2014-12-18 17:35:03
452,2014-10-08 07:17:58,"#450 is only first step. The main strategy - reimplement all Node Inspector requests to use WebKit protocol, inject this protocol in current version of NodeJS, avoid injecting in future versions.
",3y3,2014-12-18 17:35:03
452,2014-12-18 17:35:03,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if there is anything else to discuss here.
",bajtos,2014-12-18 17:35:03
452,2014-12-19 20:33:55,"Please reopen. This issue is waiting for the Node 0.12 release of node-inspector
",stevenvachon,2014-12-18 17:35:03
452,2015-01-05 09:52:37,"@stevenvachon AFAIK, we there isn't going to be any ""Node 0.12 release of node-inspector"".

The discussion above seems to have two threads:
- a request for assistance with using node-inspector in nodecon
- a question about changes in Node debugger protocol

Your comment makes me believe you are referring to the debugger protocol changes.

First of all, there are no concrete plans for the new debugger protocol as far as I know. The development in joyent/node is pretty stale, most of the new stuff is happening in [iojs/io.js](https://github.com/iojs/io.js). You can read TC meeting minutes [here](https://github.com/iojs/io.js/tree/261706e2ef9f12131ddcf8ff40fd4c7823693e8d/doc/tc-meetings), there is no mention about reworking the debugger protocol.

Until there is a concrete plan for replacing the current V8 debugger protocol with something else, I am reluctant to worry about that in Node Inspector.
",bajtos,2014-12-18 17:35:03
451,2014-10-02 16:18:10,"I just started using node-inspector with no previous experience.

In the profiler tab, when I hit the ""Take Heap Snapshot"" button, I get this error:
HeapProfiler.takeHeapSnapshot failed. Error: Not implemented.

I am running Nodejs v0.11.4. 

---

In my code, I have added v8-profiler at the very beginning of my server:
var profiler = require('v8-profiler');

I tried with both v8-profiler 5.1.1 and 5.2.0. And I am using the latest node-inspector commit which is v0.8.0 (00e0d20a5dcdf3f1d56efb10b9630721b2e72c52) because in v0.7.4 the Profile tab does not even show up.

I also went to the node-inspector installed on my machine and replaced its v8-profiler 5.1.1 with 5.2.0, hoping that it is a API name change or something in two different versions. But it did not help. Though, I just  replaced the library, I am not sure it I need to recompile node-inspector after replacing it, and how to do that!

![screen shot 2014-10-02 at 9 58 33 am](https://cloud.githubusercontent.com/assets/8131683/4493879/170de186-4a4d-11e4-9059-4f1a1ca3a813.png)

---

One more thing, when inspector loads in the browser, at the beginning an error happens constantly, which seems to be to source of these problems: 
ProfileHeaders is undefined in line 250 of ProfilesPanel.js (populateCallback() function).

![screen shot 2014-10-02 at 10 10 49 am](https://cloud.githubusercontent.com/assets/8131683/4494100/dda81a04-4a4e-11e4-9ea2-89e67c718551.png)

---

Lastly, Node Inspector takes about 70 seconds to load in my browser. Is this how it should be or am I missing something?
",Actimator,2014-12-18 17:33:44
451,2014-10-02 18:22:22,"@Actimator , Heap Profiler is not a part of node-inspector now. Work in progress here #338. This pr is stable and needs some last reviews to merge in master, you can fork it and test, if you need heap profiler now.

About high delay. Where you store your project? (Are you trying start node-inspector with `--no-preload` option?)
",3y3,2014-12-18 17:33:44
451,2014-10-02 18:32:26,"> Lastly, Node Inspector takes about 70 seconds to load in my browser. Is this how it should be or am I missing something?

Also how many files do you have in your project?
",bajtos,2014-12-18 17:33:44
451,2014-12-18 17:33:44,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide any new information to help us with resolving the issue.
",bajtos,2014-12-18 17:33:44
450,2014-10-02 09:28:20,"@bajtos , please look at this. This is not ready to review, but I need a discussion here.

What happens here:
- I copy `InjectedScriptSource` and `DebuggerScript` from Blink sources (branch 1625).
  This is two main files which implements debugging protocol.
- I add `InjectedScriptHost.js`, this is implementation of some functions stored in `V8InjectedScriptHostCustom.cpp` and used by `injectedScript`
- Next step - I reimplement Runtime agent and some functions in Debugger agent to fix some issues:
  - Now we can inspect:
    - global variables when process not paused
    - get/set properties
    - big arrays (I don't test buffers)
    - function raw scopes
  - RegExp inspection info show `/abc/g` instead of `/abc/`

I use something like this to debug this all:

<S_CODE_TOKEN>
# ...but this commit has two problems
## 1. It is very big

I can try to divide it on parts like `Implemented Debugger.getBacktrace`, `Implemented Runtime.callFunctionOn`, `...`. But I'm not sure about that.
## 2. It deprecates big part of tests

This is a first in big series of pull requests, where I'll reimplement all agents to use WebKit protocol (this is relative to mail discussion, where Brandon Meck promises to implement this protocol in node)
How you can see I deleted some incompatible tests, I would like to see on their place autogenerated tests based on `tools/protocol.json`

Is there something with which you are disagree? Any ideas about changing structure of this commit, which can help you in review?
",3y3,2016-02-07 17:23:28
450,2014-10-16 07:08:10,"Hey, I am busy working on other stuff, I'l try to set aside some time to review this in next two weeks.

I notices you are changing `protocol.json`, that looks wrong. That file is tied to the front-end version shipped in Node Inspector. The correct way of updating that file is to pull a more recent front-end version from Blink (see `tools/update-front-end.sh`).
",bajtos,2016-02-07 17:23:28
450,2014-10-16 10:27:06,"I can avoid changes in protocol.json (this will make code more verbose). I already tried to update frontend, but it has so big difference with latest version, what I prefer to finish this pr before I'll start updating frontend.

This pr is important for Console API, because I need stable instrument to free memory (`releaseObject` and `releaseObjectGroup`).
",3y3,2016-02-07 17:23:28
450,2014-10-16 11:33:21,"> This pr is important for Console API, because I need stable instrument to free memory (`releaseObject` and `releaseObjectGroup`).

I am mostly interested in the ability to forward console logs to Node Inspector. Does it require `releaseObject` too?
",bajtos,2016-02-07 17:23:28
450,2014-10-16 12:33:32,"The problem of Console API - I need to cache somewhere all serialized console messages (this cache can contain, for example, multiple serialized `global` objects with all refs). From time to time I need to clear this cache. For the first time I can realise custom caching system, without webkit sources to fastly finish Console API pr. In future (when this pr will be merged) I'll need to deprecate custom caching system. Also I'll deprecate serializing to v8 ObjectMirror, because this pr implement direct serializing to Inspector ObjectMirror.
So, about your question `how much work is needed to get this PR (Console API) done` - I can push fixed version today for your tomorrow review. Then on weekend I'll make fixup for review issues.
HeapProfiler API ready to review.
",3y3,2016-02-07 17:23:28
450,2014-10-16 12:57:11,"If you don't mind the extra work needed to rework the object cache used by Console API later, then this will be the best solution for the short term.
",bajtos,2016-02-07 17:23:28
450,2014-11-10 09:18:41,"I quickly glanced at the changes, the approach look reasonable. I don't have enough time for a detailed review, I'll trust you tested the basic things and they still keep working. Let me know if there is anything specific I should review in more detail or help you to test.

One thing to fix: Please add an automated script for updating `lib/InjectedScript`.

I assume that the injected script running in the debugged process must have the same version as the DevTools UI running in the browser, is that correct? In that case there should be a single script to update both frontend and backend.

Feel free to rewrite `tools/update-front-end.sh` in Node.js if it makes the update process easier for you. It's actually pretty easy - see [strong-studio:build-tasks/pull-devtools.js](https://github.com/strongloop/strong-studio/blob/master/build-tasks/pull-devtools.js) for inspiration.

To keep the review easier, can you send these changes in a new PR? The idea is to land that PR first, so that this one (#450) can build on top of that.

> But this commit has two problems: It is very big

Don't worry about that. As I said, I am not going to review this in details. If it's easier to land the change in one big PR, then do it that way.

> It deprecates big part of tests

That's ok, it is common to remove tests when a major refactoring make them obsolete.

>  I would like to see on their place autogenerated tests based on tools/protocol.json

That sounds like a good idea to me.

I feel the current approach where we are mixing integration-test approach (running against real debugger) and unit-test approach (running in isolation and mocking out dependencies) does not work well. It would be awesome if your auto-generated tests could use the DevTools Protocol API to call Node Inspector code that is being tested.
",bajtos,2016-02-07 17:23:28
450,2015-03-02 20:36:57,":+1: 
",esco,2016-02-07 17:23:28
450,2016-02-07 17:23:28,"I continue work on this pr #808
",3y3,2016-02-07 17:23:28
449,2014-09-29 18:32:08,"The unit-tests are failing on Travis CI:

<S_CODE_TOKEN>

@3y3 I tried to run the test several times to ensure it is not a timing issue. Could you please look into this? It may be enough to increase the test timeout to something like 10s.
",bajtos,2015-06-14 22:45:18
449,2014-09-29 18:32:28,"Here is the failing job: https://travis-ci.org/node-inspector/node-inspector/jobs/36580054
",bajtos,2015-06-14 22:45:18
449,2014-09-29 20:29:25,"@bajtos , unfortunately this is a timing issue - I restarted test and now it passed.
I'm very interesting why 5 seconds are not enough to pass this test...
What application does after printing `debugger listening on port ...` and before responding on `evaluate 'process.version'` event for 5 seconds and above?!
",3y3,2015-06-14 22:45:18
449,2014-09-30 11:32:03,"From what I heard, Travis CI build machines are under extremely heavy load. Many weird things can happen in such case. 

Could you increase the timeout from 5 to 10 seconds to prevent the timeouts?
",bajtos,2015-06-14 22:45:18
449,2015-06-14 22:45:18,"Unit test are fixed for ios.
Some timeouts was increased
",3y3,2015-06-14 22:45:18
448,2014-09-29 15:36:08,"Adds documentation on how to debug Gulp tasks.

Solves #447 and #348.

**Unix:**

<S_CODE_TOKEN>

**Window:**

<S_CODE_TOKEN>
",MadLittleMods,2014-09-29 16:15:35
448,2014-09-29 16:00:43,"I fixed the convention mistakes. **Should I try to squash?** I have not successfully rebased and squashed so I am not sure how well it will go if I need to.
",MadLittleMods,2014-09-29 16:15:35
448,2014-09-29 16:17:21,"No worries, I did the squash myself. I have fixed few more details along the way:
- we are moving towards present tense in the commit messages these days (see [50/72 rule](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)
- there was one more line longer than 80 chars, I have wrapped it
- and also removed a trailing space from one line

Landed as 90d6992, thank you for the contribution!
",bajtos,2014-09-29 16:15:35
447,2014-09-26 03:15:09,"How do I debug a gulp task?

How do I debug a global CLI command like `gulp` or `gulp task`?

This does not work: `node-debug gulp`

I saw the [documentation on Mocha](https://github.com/node-inspector/node-inspector#how-do-i-debug-mocha-unit-tests) but I am not sure if there is a similar thing for Gulp. There is also [another issue about Gulp](https://github.com/node-inspector/node-inspector/issues/348) but the solution given uses `which` and not sure it even works.

**Update:**
I figured out that the `node-debug $(which gulp) task` command suggested in the [other issue about gulp](https://github.com/node-inspector/node-inspector/issues/348) uses a unix only $(which) statement that gets replaced with the full path to the gulp-cli.

In Windows you would have to get the full path of gulp to make an equivalent command:
`node-debug ""C:\Users\user\AppData\Roaming\npm\node_modules\gulp\bin\gulp.js"" task`
_You can omit the `task` part to run the `default` task._

I misunderstood Node Inspector's capabilities and thought `console.log` calls showed up in the node-inspector console. I now know that it is only a REPL client and doesn't output the CMD prints.
",MadLittleMods,2014-09-26 15:29:37
447,2014-09-29 11:34:38,"Hi @MadLittleMods, I am glad you figured it out yourself. Would you mind submitting a patch to update the documentation in README.md and describe how to debug `gulp` builds?

> I misunderstood Node Inspector's capabilities and thought `console.log` calls showed up in the node-inspector console. I now now that it is only a REPL client and doesn't output the CMD prints.

Redirecting `console.log` messages to the GUI is actually in our backlog - see #219.
",bajtos,2014-09-26 15:29:37
447,2014-09-29 15:39:11,"Made a [pull request](https://github.com/node-inspector/node-inspector/pull/448) to add the documentation for Gulp. @bajtos 

I can't wait for the `console.log` messages to be added! I would be highly interested in contributing to get this working as well but seeing that you have not done it yet, I am not sure on the complexity (`STDOUT` and `STDERR`, :P) - Edit: It looks like the pull you linked covers it already.
",MadLittleMods,2014-09-26 15:29:37
447,2015-03-14 11:29:39,"I don't get how to debug anything form gulp.
When I run `node-debug /usr/local/bin/gulp task`, I can't set a working breakpoint anywhere.
If I add 'debugger;' line in gulpfilejs, debugger doesn't stop at it, instead it opens up some random file (module.js)  - https://sc-cdn.scaleengine.net/i/063ef970096a12501c4569595b4a23bf.png in a random line.

Please, can you _describe_ how to use you debugger?

Also I tried passing `--debug-brk` which is ignored. I expected with it the debugger would stop at the first line of gulpfile.js or /usr/local/bin/gulp, but nothing happens.

Versions:

Ubuntu 12.04
Node Inspector v0.9.2
Node v0.12.0
",OnkelTem,2014-09-26 15:29:37
447,2015-03-14 11:47:54,"This is what I also tried.

(1)

<S_CODE_TOKEN>

I open the url and see empty UI. 

(2)

<S_CODE_TOKEN>

Both processes are suspended, I see no output either in node-inspector (1) or node (2) stdouts.
UI is not updated either and is empty.
Since I have no other options, I reload UI with Ctrl-R, after that:
- UI start showing some files (similar to what is on the screenshot I posted before)
- (2) resumes till the end - i.e. 'jade' task runs w/o any breakpoints or visualization in UI

Now when I open gulpfile.js in UI, I can't set any breakpoint as clicking on left margin makes nothing:
https://sc-cdn.scaleengine.net/i/c53d0a35a7e61a4f9961e537314748ca.png

I'm out of ideas. 
",OnkelTem,2014-09-26 15:29:37
446,2014-09-25 18:06:13,"Hy,

i have troubles debugging a simple express-app written in coffeescript.

Here is the source:
![app coffee screentshot](https://cloud.githubusercontent.com/assets/3163807/4409515/13a1c50e-44de-11e4-8906-f1b220b7900e.png)

I start the script with **coffee --nodejs --debug app.coffee** and i can see the script in node-inspector, but the start of the script is different. It is not possible to set a break-point!

![app coffee in node inspector](https://cloud.githubusercontent.com/assets/3163807/4409521/1b2bcba8-44de-11e4-8187-5944b790dd5d.png)

If i compile the coffeescript to javascript with following command **coffee -c -m app.coffee** and start the generated js file with **node --debug app.js** everything works just fine.

Does anybody has the same problem? Or is that an limitation of node-inspector.

OS: Mac OS X Mavericks
node 0.10.30
node-inspector 0.7.4
coffee-script 1.8.0
express 4.0.0
body-parser 1.0.1

Greetings
Tonka
",tonka3000,2014-09-29 11:36:28
446,2014-09-29 11:36:28,"This is a duplicate of #224, see also #308.
",bajtos,2014-09-29 11:36:28
446,2015-01-04 03:01:07,"@bajtos ,Hi , I can not debug too, It just said: `$ debugger listening on port 5858`, but actually nothing happened and the chrome not opened when I run `$ coffee --nodejs --debug app.coffee`

<S_CODE_TOKEN>

I use Node Inspector v0.8.1, Nodejs v0.10.35, CoffeeScript version 1.8.0.
",TangMonk,2014-09-29 11:36:28
446,2015-01-05 11:02:39,"@TangMonk of course the chrome was not opened.

Steps to debug:
1. `$ node-inspector &`
2. `$ coffee --nodejs --debug app.coffee`
3. Manually load `http://127.0.0.1:8080/debug?port=5858` in your Chrome browser.

Note that you will see the transpiled javascript, not the original coffeescript sources - see #224.
",bajtos,2014-09-29 11:36:28
446,2015-01-05 11:20:07,"@bajtos thanks ! :+1: 
",TangMonk,2014-09-29 11:36:28
446,2015-03-15 19:08:08,"@bajtos thanks a lot!
",webzepter,2014-09-29 11:36:28
445,2014-09-23 12:49:03,"TL;DR it's impossible to step into the function / method whose name is dynamically evaluated (not an identifier / string literal) using F11 or ""step into"" button. It's possible to do it though when one explicitly puts a breakpoint in that function.

MWE:

Let's consider this simple file `test.js`:

<S_CODE_TOKEN>
# KO scenario
- Run `node --debug-brk test.js`
- Launch `node-inspector` in a separate shell, open it in Chrome
- Press F8 to go to the line with ""debugger"" statement.
- Press F11, you go to the next line
- Press F11. 

**Expected**: breaking in the first line of ""myfunc""
**Actual**: the debugger goes deep through ""myfunc"" and ""printHello"" until Console.log!
# OK1 scenario:
- Run `node --debug-brk test.js`
- Put breakpoint on the line containing `console.log(""Hello"")` and continue the scenario. Now everything is fine.
# OK2 scenario
- Change `this[""my"" + ""func""]` to `this[""myfunc""]` and run the scenario. Everything is fine.
# Debugging info

<S_CODE_TOKEN>

Running Windows 7 / MINGW.

Also, when tested the code in question in Chrome37@Win7, it worked fine.
",jakub-g,2014-09-24 09:05:05
445,2014-09-23 16:56:02,"Can you try with v0.11? It may be an issue of the V8 version shipped in v0.10.
",bajtos,2014-09-24 09:05:05
445,2014-09-24 08:27:52,"@bajtos you were right, the problem is gone as of node v0.11.13.

Do you think we should close this bug or keep it open for reference until 0.11 becomes stable?
",jakub-g,2014-09-24 09:05:05
445,2014-09-24 09:05:04,"I am afraid nobody is going to back-port the necessary V8 changes to Node v0.10, there is no point in keeping the issue open.
",bajtos,2014-09-24 09:05:05
444,2014-09-18 06:51:06,"Hi ,
I am facing this issue while debugging my application through node-inspector (Node Inspector v0.6.2)
I get error in command prompt - ""Received request for a method not implemented: DOMDebugger.setXHRBreakpoint"" and google chrome ""DOMDebugger.setXHRBreakpoint failed.
Error: Not implemented.""

Please can any one help me to sort out this issue?
",shirsatsandeep,2014-12-18 13:06:30
444,2014-09-18 07:22:23,"Hello @shirsatsandeep ,
this is a known issue and it was fixed in last version (not released yet). I recommend you to ignore this error message, because it's not related to your application code - this error was thrown and was caught by node-inspector itself.
",3y3,2014-12-18 13:06:30
444,2014-12-18 12:37:25,"@3y3 I believe this issue can be closed now, can you please confirm?
",bajtos,2014-12-18 13:06:30
443,2014-09-17 23:32:19,"It throws an error during installation:

npm http 304 http://registry.npmjs.org/cookie-signature/1.0.3
npm ERR! error rolling back Error: ENOTEMPTY, rmdir '/usr/local/lib/node_modules/node-inspector/node_modules'
npm ERR! error rolling back  node-inspector@0.7.4 { [Error: ENOTEMPTY, rmdir '/usr/local/lib/node_modules/node-inspector/node_modules']
npm ERR! error rolling back   errno: 53,
npm ERR! error rolling back   code: 'ENOTEMPTY',
npm ERR! error rolling back   path: '/usr/local/lib/node_modules/node-inspector/node_modules' }
npm ERR! Error: No compatible version found: minimist@'^0.1.0'
npm ERR! Valid install targets:
npm ERR! [""0.0.0"",""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.0.7"",""0.0.8"",""0.0.9"",""0.0.10"",""0.1.0"",""0.2.0"",""1.0.0"",""1.1.0""]
npm ERR!     at installTargetsError (/usr/local/lib/node_modules/npm/lib/cache.js:564:10)
npm ERR!     at /usr/local/lib/node_modules/npm/lib/cache.js:479:10
npm ERR!     at saved (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/get.js:138:7)
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:218:7
npm ERR!     at Object.oncomplete (fs.js:297:15)
npm ERR! If you need help, you may report this log at:
npm ERR!     http://github.com/isaacs/npm/issues
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com

npm ERR! System Darwin 13.2.0
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
",igorpavlov,2014-12-18 17:29:39
443,2014-09-17 23:54:07,"What is your npm version? Looks like it does not support `^` in semver specifiers. Please update to the latest one (e.g. via `npm install -g npm`)
",bajtos,2014-12-18 17:29:39
443,2014-12-18 17:29:39,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can reproduce it using the latest version.
",bajtos,2014-12-18 17:29:39
442,2014-09-15 12:09:36,"in Previous versions it took 3-4 secs to console.log() the value of the variable. 
But now it takes more than minute in the same app. 
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/4377246-too-slow-to-inspect-the-value-via-the-console?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",Lujaw,
442,2014-09-15 12:50:43,"What is your enviroment (OS, Node version, Node Inspector version)
How you use `console.log`? You print it in Inspector console and then switch to terminal to show result?
Or you don't use `console.log` but only inspect variable in Inspector console?
",3y3,
442,2014-09-21 11:02:50,"OS -> Ubuntu 14.04
Node.js -> v0.10.26
Node-inspector -> v0.7.4
I inspect the variable in the inspector console, no terminal involved.
Even when inspecting object, its shows the name ""Object"" but the values within it takes >6s 
to show..
",Lujaw,
442,2014-09-22 11:56:16,"Is it possible that this ""Object"" contains large buffer or array as one of properties? (3-4 secs is also big delay, that is not normal)
",3y3,
442,2014-09-23 16:20:19,"@3y3 the object contains 10 items and one of them contains array having 5 item. Can it be considered to be  large ?
",Lujaw,
442,2014-12-18 17:30:51,"@Lujaw could you please provide us with a simple app to reproduce the problem on our machines? That would help us a lot to identify the problem, which is the first step towards getting it fixed.
",bajtos,
442,2015-08-24 03:34:40,"For reference: The grouping logic seems to be triggered by `description: ""Buffer[${length}]""`. https://github.com/buggerjs/bugger-agents/commit/6a0694a4353d5305626f6b786828c5ad3f4376d1#diff-249ef35c3e7a5d187be7b65c39c5abd2R35

After ensuring that description, the grouping works as expected for `Buffer` variables:

<img width=""334"" alt=""screen shot 2015-08-23 at 8 30 11 pm"" src=""https://cloud.githubusercontent.com/assets/567540/9432339/5e2b551a-49d6-11e5-9cad-de82b63ca160.png"">
",jkrems,
441,2014-09-09 21:20:51,"Both a key and cert must be specified for the node-inspector. If they are specified, the server will startup listening on https rather than http.
",aikimcr,2014-09-22 21:58:31
441,2014-09-10 07:18:52,"Ok, passing tests is a good news.
How you can see your pr has a dirty commit history. 6 commits instead of one. At first glance you can solve this problem by using

<S_CODE_TOKEN>

Please check the commit message. It needs to follow next rules:
- First line 50 chars
- Second line empty
- Third and below - 70 chars

See also inline comments
",3y3,2014-09-22 21:58:31
441,2014-09-10 07:53:45,"@bajtos , please confirm that you are ready to approve https support
",3y3,2014-09-22 21:58:31
441,2014-09-18 16:39:58,"> @bajtos , please confirm that you are ready to approve https support

Sure, no problem with that. It's probably better to wait with landing this PR until the config-changes are done (#436).
",bajtos,2014-09-22 21:58:31
441,2014-09-18 16:42:31,"I’ll incorporate the requested changes and recommit.  I have one day every two weeks to work on stuff like this.  Tomorrow is the day.

On Sep 18, 2014, at 9:40 AM, Miroslav Bajtoš notifications@github.com wrote:

> @bajtos , please confirm that you are ready to approve https support
> 
> Sure, no problem with that. It's probably better to wait with landing this PR until the config-changes are done (#436).
> 
> —
> Reply to this email directly or view it on GitHub.
",aikimcr,2014-09-22 21:58:31
441,2014-09-19 08:10:24,"> Sure, no problem with that. It's probably better to wait with landing this PR until the config-changes are done (#436).

If this pr will be ready today, I prefer to merge it before config restructurisation.
",3y3,2014-09-22 21:58:31
441,2014-09-19 13:40:47,"I believe this pull request is ready to go.  If there's anything else you need me to do, let me know.
",aikimcr,2014-09-22 21:58:31
441,2014-09-22 12:04:59,"@aikimcr , I merge your commit with #436 with some fixes. Now I wait last reviews for my pr to merge this all to the master.
",3y3,2014-09-22 21:58:31
441,2014-09-22 16:43:48,"@3y3 in order to keep the amount of unmerged code as low as possible, it's better to merge this pull request and don't wait for #436.
",bajtos,2014-09-22 21:58:31
441,2014-09-22 20:27:21,"Here exists some cosmetic problems that I resolved in process of merging. I can point to them to fix in this pr, but how I can understand we need to wait two weeks for fixes
",3y3,2014-09-22 21:58:31
441,2014-09-22 20:56:30,"How big are the fixes.  If they are really cosmetic, I can probably squeeze in the changes today.
",aikimcr,2014-09-22 21:58:31
441,2014-09-22 21:19:07,"I added inline comments, you can check them or my [final version](https://github.com/3y3/node-inspector/commit/604a24ad2eb98e71436b5df0eabca135ea931d73)
",3y3,2014-09-22 21:58:31
441,2014-09-22 21:35:26,"I committed and rebased per the suggestions from 3y3.  Tests failed on Node 11, but I don't think the failure is related to my changes.
",aikimcr,2014-09-22 21:58:31
441,2014-09-22 21:56:08,"Now it's claiming there are conflicts, but I don't see them in the diff.
",aikimcr,2014-09-22 21:58:31
441,2014-09-22 21:56:33,"Landed as e73332b4138980a6e0c9e4a663478446ea10abe3

@aikimcr , great thanks for contribution.
",3y3,2014-09-22 21:58:31
441,2014-09-22 21:57:46,"> Now it's claiming there are conflicts, but I don't see them in the diff.

Don't worry about this.
",3y3,2014-09-22 21:58:31
441,2014-09-22 22:00:16,"Also, this addresses https://github.com/node-inspector/node-inspector/issues/439 completely.
",aikimcr,2014-09-22 21:58:31
440,2014-09-05 22:23:24,"Add the capability for the inspector.js to listen on https by giving a
server-key and server-cert.  These are expected to be files containing the
text of the key and cert respectively.
",aikimcr,2014-09-09 21:17:47
440,2014-09-05 22:24:04,"This pull request addresses issue number 439.
",aikimcr,2014-09-09 21:17:47
440,2014-09-09 18:52:14,"Hello, @aikimcr , thanks for your contribution.
Before I can start to review your commit, you need to fix some problems:
1. Leave only related changes
2. Fix test passing
3. In your case I also recommend to squash the changes to one commit
",3y3,2014-09-09 21:17:47
440,2014-09-09 18:54:36,"@aikimcr , I miss one important detail: in current time I work on config refactoring in #436
",3y3,2014-09-09 21:17:47
440,2014-09-09 18:58:24,"Thanks. In point of fact, I think I need to refactor my change.  The change as it exists works functionally, but I was unable to get the tests to pass.  My fumbling with it was because test I thought were running were not in fact running.  I’m seeing some test failures on my machine that are unrelated to my changes.  I don’t know what’s wrong with my environment, but I’ll need to get these things taken care of before I can finish the pull request.

At this point, it would probably be best for you to simply reject the existing pull request and I’ll create new one when I actually have it working with passing tests.

On Sep 9, 2014, at 11:54 AM, 3y3 notifications@github.com wrote:

> @aikimcr , I miss one important detail: in current time I work on config refactoring in #436
> 
> —
> Reply to this email directly or view it on GitHub.
",aikimcr,2014-09-09 21:17:47
440,2014-09-09 20:02:17,"@aikimcr , we have some problems with test on machines with low performance (or slow hard drive for example). On my machine the tests go to failure when I switch to energy saving mode.
I recomend you to enable `only` (`describe.only('test')`) syntax for mocha in your debugging process. After pushing commit, check that all tests pass in Travis on v0.10
",3y3,2014-09-09 21:17:47
440,2014-09-09 21:17:47,"The original pull request had a number of problems (my fault) with tests.  I wound up having to start over.  So this pull request really isn't useful.
",aikimcr,2014-09-09 21:17:47
439,2014-09-05 18:14:45,"My browser is getting put into a state where it insists on everything from the host be over https.  Chrome responds to this be redirecting:

http://<hostname>:8080/debug?port=5858

to

https://<hosname>:8080/debug?port=5858

The only way to make this stop is to clear my cookies. But once I go to any  other page on that server, the automatic redirect is back until I clear my cookies again.  It would be very convenient if I could tell node-inspector to listen on HTTPS using the same certificate that the rest of the server uses, even if this required a separate port.
",aikimcr,2014-09-22 22:01:07
439,2014-09-22 22:01:07,"Closed by #441
",3y3,2014-09-22 22:01:07
438,2014-09-05 15:50:17,"I have a parse.com script application running in node and its taking very long on some save operations (XHR). is there a way to really see what my app is sending to parse.com? The request and the reponsse?

thanks. 
",otmezger,2014-09-05 17:47:03
438,2014-09-05 17:47:03,"It's not implemented yet. Watch #341
",3y3,2014-09-05 17:47:03
437,2014-09-05 08:24:05,,3y3,2014-09-05 08:34:48
437,2014-09-05 08:35:22,"@bajtos , I'll merge this without review.
",3y3,2014-09-05 08:34:48
437,2014-09-05 11:36:16,":thumbsup: 
",bajtos,2014-09-05 08:34:48
436,2014-09-03 16:00:53,"Configuration logic from node-debug.js moved to config.js
node-debug receive configuration from rc now
config uses yargs argv preprocessor now
Removed conversion part of config.js
Fixed hight priority of node-debug hardcoded defaults
Fixed default web host for node-debug
  (`127.0.0.1` instead of `localhost`)
Fixed null value of web host
  (default web host is empty string now)
Added script option
Added list of avaible options as default help info
",3y3,2014-09-24 20:53:02
436,2014-09-03 21:19:21,"@bajtos , ready to review
",3y3,2014-09-24 20:53:02
436,2014-09-05 12:00:35,"Uff, there are too many changes in this pull request. Can you come up with a way how to split this big patch into multiple smaller steps/pull requests? E.g. ""config uses yargs argv preprocessor now"" can be a standalone change, ""Removed conversion part of config.js"" too. It will help me to review the patches more quickly and ultimately landing them sooner.

On the general note, there I two thinks I don't like:
- `node-inspector` accepts the same options as `node-debug` now, even though some of them are used by `node-debug` only.
- Before this change, `node-debug` added some extra text to the help message (`The [script] argument is resolved relative to the current working directory (etc.)`). It is important to preserve it.
",bajtos,2014-09-24 20:53:02
436,2014-09-05 13:28:37,"@bajtos ,

> `node-inspector` accepts the same options as node-debug now, even though some of them are used by node-debug only.

I can solve this by using [Config.filterNodeDebugOptions](https://github.com/3y3/node-inspector/blob/config/lib/config.js#L188-L201), but I specially allow to node-inspector to see full configuration, bacause now I work on GUI configuration system (I'll add new tab to Settings Screen) that needs to know about all options. I'll open discussion pr about GUI configuration on weekend with start small example.

> Before this change, node-debug added some extra text to the help message (The [script] argument is resolved relative to the current working directory (etc.)). It is important to preserve it.

It is preserved. Help information [is different for node-debug and node-inspector](https://github.com/3y3/node-inspector/blob/config/lib/config.js#L264-L276)

I will try to divide it on parts on weekend, but I'm not sure what it's possible:

Main target of commit ""Collect configuration in one place"", this place is `config.js`, therefore I removed configuration part from `node-debug`. Sinchronously I need to add this part to `config` and handle this options. [I need to collect script options for `node-debug` in one place](https://github.com/3y3/node-inspector/blob/config/bin/node-debug.js#L72), for this reason I add [script](https://github.com/3y3/node-inspector/blob/config/lib/config.js#L109-L119) option to configuration. Also for reason ""I need handle optins of `node-debug`"" I uses `yargs` in `config` and check the defaults for `node-debug`.

Only `new help` can be excluded.

I can divide it only on no working but logically isolated parts.
",3y3,2014-09-24 20:53:02
436,2014-09-06 12:59:22,"> I can divide it only on no working but logically isolated parts.

That's not good, each commit should leave the repo in a working state.

> It is preserved. Help information is different for node-debug and node-inspector

Ok, this is rather ugly. Here is a better solution: modify `Config` constructor to accept another parameter, which will be either `node-inspector` or `node-debug`. That way you don't need to hack the module system in the tests.

> I will try to divide it on parts on weekend, but I'm not sure what it's possible

Let's do it this way: 
- step 1: refactor the file `lib/config.js` to export `Config`, rework the way how configuration options are parsed and processes. Use this new config system in `node-inspector` only, keep `node-debug` unchanged. The goal is to preserve current functionality (no changes), but rework the code (implementation) so that it will be easier to extend in the next step.
- step 2: modify `node-debug` to use this new config system, modify `Config` to support `node-debug`. Add extra command-line arguments, add the second parameter to `Config` constructor, etc.
",bajtos,2014-09-24 20:53:02
436,2014-09-16 13:39:54,"@bajtos , it's ready to review
",3y3,2014-09-24 20:53:02
436,2014-09-19 09:51:53,"All fixed and rebased.
`README.MD` needs to be updated
Also I can rebase this to #441 - this will save @aikimcr from inspecting new changes in config system
",3y3,2014-09-24 20:53:02
436,2014-09-19 16:54:23,"> Also I can rebase this to #441 - this will save @aikimcr from inspecting new changes in config system

Sure, that's a good idea. Please leave a comment when it is done, I'll wait with my final review until then.
",bajtos,2014-09-24 20:53:02
436,2014-09-22 10:11:20,"@bajtos , it's ready to review.
",3y3,2014-09-24 20:53:02
436,2014-09-22 16:45:29,"> @bajtos , it's ready to review.

What have you changed since the last review? I can't afford to review the whole patch after every change. In the future, could you please fix things in new commits and defer rebase/squash until the very end?
",bajtos,2014-09-24 20:53:02
436,2014-09-22 20:34:33,"> I can't afford to review the whole patch after every change.

Sorry for this. I promise not to do so more.

I rebased this pr to #441 with some cosmetic changes in it.
Added backward compatibility for all uncompatible changes (but I missed to return previous state for test for `hidden` option)
Updated `README.MD`
",3y3,2014-09-24 20:53:02
436,2014-09-24 03:56:30,"All fixed
",3y3,2014-09-24 20:53:02
436,2014-09-24 10:47:37,"Rebased to master
",3y3,2014-09-24 20:53:02
436,2014-09-24 17:00:03,"Two more details to fix.

Other than that, the patch LGTM.

Please clean up the git history before landing.
",bajtos,2014-09-24 20:53:02
436,2014-09-24 17:53:57,"Ready
",3y3,2014-09-24 20:53:02
436,2014-09-24 18:35:19,"I'll trust you that you did the git fu correctly, please land the patch yourself.
",bajtos,2014-09-24 20:53:02
435,2014-09-02 16:10:44,"Fix `WebInspector.UIString` to correctly pass all arguments to the original method.

Before this patch, `WebInspector.UIString('%.1f', 0.11)` incorrectly called `UIString('%.1f', [0.11])`.

@3y3 please review
",bajtos,2014-09-02 21:38:33
435,2014-09-02 21:40:15,"Landed .
",3y3,2014-09-02 21:38:33
434,2014-08-28 06:52:26,"The test setup takes more than 2 seconds in Travis CI, which caused the
build to fail. The timeout is 5 seconds now, which seems to be enough.

See also #428

/cc @3y3 this patch is IMHO not worth reviewing
",bajtos,2014-08-28 07:00:25
433,2014-08-26 13:28:47,"Closes #431
",3y3,2014-08-28 06:49:45
433,2014-08-27 17:23:39,"LGTM.

Is this based on the latest master? I am wondering why the tests are failing on Node v0.12. I thought the timeout was increased from 2000ms?

https://travis-ci.org/node-inspector/node-inspector/jobs/33588982
",bajtos,2014-08-28 06:49:45
433,2014-08-27 17:24:32,"Indeed, the timeout was increased in #428.

Please rebase on top of the current master and check that the tests are passing on Travis.
",bajtos,2014-08-28 06:49:45
433,2014-08-28 05:34:14,"This is based on the latest master, but tests are failing.
",3y3,2014-08-28 06:49:45
433,2014-08-28 06:49:08,"Oh, I see. I forgot to add the timeout to all `setupInjector` functions. I'll do that in a different PR then.
",bajtos,2014-08-28 06:49:45
433,2014-08-28 06:50:58,"Landed.
",bajtos,2014-08-28 06:49:45
432,2014-08-26 13:09:40,"Hello @dannycoates , please change logo of Node Inspector organization to

![favicon](https://cloud.githubusercontent.com/assets/3931155/4044569/e0b3d3e0-2d21-11e4-99fd-e0ff631934f7.png)
",3y3,2014-08-26 16:53:53
432,2014-08-26 16:53:53,"Looks great!
",dannycoates,2014-08-26 16:53:53
432,2014-08-26 17:46:31,":+1: 
",pflannery,2014-08-26 16:53:53
432,2014-08-26 18:35:26,"Damage! I used 4pt line instead of 8pt.
@dannycoates , @bajtos, please look that is best:
![favicon](https://cloud.githubusercontent.com/assets/3931155/4049660/9f3795f4-2d4f-11e4-888d-a02ec328160d.png)

![](https://cloud.githubusercontent.com/assets/3931155/4044569/e0b3d3e0-2d21-11e4-99fd-e0ff631934f7.png)
",3y3,2014-08-26 16:53:53
432,2014-08-27 06:32:51,"Yeah, I like the version with thicker line better. It's just a detail though.

![logo](https://cloud.githubusercontent.com/assets/3931155/4049660/9f3795f4-2d4f-11e4-888d-a02ec328160d.png)
",bajtos,2014-08-26 16:53:53
432,2014-08-28 09:42:07,"@dannycoates , I also vote for version with thicker line. Sorry to trouble you, but could you switch the logo again.
",3y3,2014-08-26 16:53:53
432,2014-08-28 18:49:32,"done :)
",dannycoates,2014-08-26 16:53:53
431,2014-08-26 09:15:20,"The problem is [here](https://github.com/node-inspector/node-inspector/blob/master/lib/session.js#L62)

@bajtos, at first sight this is a small fix, but I can't imagine the regression test.
",3y3,2014-08-28 06:49:45
431,2014-08-26 13:19:06,"> at first sight this is a small fix, but I can't imagine the regression test.

I suppose it's not worth writing a test for this part.
",bajtos,2014-08-28 06:49:45
430,2014-08-24 21:07:31,"I keep getting this message in any panel script I type in:

<S_CODE_TOKEN>
",L2L2L,2014-12-18 17:24:25
430,2014-08-27 18:26:18,"The most likely cause is that your application is running a native Node cluster. See the following article for information how to fix the issue: http://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/
",bajtos,2014-12-18 17:24:25
430,2014-12-18 17:24:25,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide any new information to help us with resolving the issue.
",bajtos,2014-12-18 17:24:25
429,2014-08-23 03:56:33,"`node -v`
`v0.10.1`

`npm -v`
`1.2.15`

`npm install -g node-inspector`

`[...]`

<S_CODE_TOKEN>

`[...]`

<S_CODE_TOKEN>
",AdrianTP,2014-09-02 17:37:02
429,2014-08-23 10:33:23,"Please, update your npm to latest version
",3y3,2014-09-02 17:37:02
429,2014-09-02 17:37:02,"That did it, thanks.
",AdrianTP,2014-09-02 17:37:02
428,2014-08-22 18:23:31,,bajtos,2014-08-22 18:38:35
428,2014-08-22 18:38:16,"@3y3 FYI, I'll land this without waiting for your approval.
",bajtos,2014-08-22 18:38:35
427,2014-08-18 20:22:53,,3y3,2014-08-22 17:25:00
427,2014-08-22 17:25:25,"Landed. I have improved the grammar of the comment in `lib/DebuggerAgent` before merging.
",bajtos,2014-08-22 17:25:00
426,2014-08-17 12:16:42,"Changed link and way to loading overrides
",3y3,2014-08-26 06:49:15
426,2014-08-17 12:42:23,"Welcome to discussion
",3y3,2014-08-26 06:49:15
426,2014-08-22 17:34:43,"I like the favicon a lot.

I am not very comfortable with the big logo. Joyent has a trademark on the Node logo, I am not sure what are the rules for using it in derived work.

Would you mind removing the logo and keeping the favicon only? The favicon can be displayed next to the title in README.
",bajtos,2014-08-26 06:49:15
426,2014-08-22 18:54:12,"Yes - big logo is a problem. I have in plans to target Joyent to this commit, after your approvement (we can divide it in two - Node label linked to Node site and our bottom part), but I can live without big logo. I'll fix it in soon.
",3y3,2014-08-26 06:49:15
426,2014-08-25 16:21:07,"All fixed and rebased
",3y3,2014-08-26 06:49:15
426,2014-08-25 18:43:12,"Ok. Fixed.
",3y3,2014-08-26 06:49:15
426,2014-08-26 06:49:27,"Landed, thanks.
",bajtos,2014-08-26 06:49:15
426,2014-08-26 08:31:37,"Thanks. How about add icon to Node Inspector organisation?
",3y3,2014-08-26 06:49:15
426,2014-08-26 08:39:08,"> Thanks. How about add icon to Node Inspector organisation?

That would be great. Can you make a larger version (420x420 pixels) of the logo?

Please open a new issue and assign it to @dannycoates, as only organization owners can change the logo.
",bajtos,2014-08-26 06:49:15
425,2014-08-17 12:04:31,,3y3,2014-08-28 09:02:31
425,2014-08-25 18:39:27,"All fixed. Rebased.
",3y3,2014-08-28 09:02:31
425,2014-08-27 17:26:43,"Please amend the commit message `front-end: rename ""(no domain)"" to ""(node natives)""` with the correct text used in the code and rebase on top of the current master. I'd like to see Travis tests passing.
",bajtos,2014-08-28 09:02:31
425,2014-08-28 05:35:27,"This is also on top of master, but tests are failing.
",3y3,2014-08-28 09:02:31
425,2014-08-28 06:59:36,"Before rebase, tests on v0.10 were failing. Since they almost always pass, I was worried there may be a breaking change. After your update, they are timing out on v0.11 only, it will be fixed in #434.

This patch LGTM.

As for ""hide DOM and Event Listener breakpoints"", does it makes sense to hide ""XHR Breakpoints"" too?
",bajtos,2014-08-28 09:02:31
425,2014-08-28 07:44:41,"> As for ""hide DOM and Event Listener breakpoints"", does it makes sense to hide ""XHR Breakpoints"" too?

Yes, it is reasonable (some times I think about Network API, but the realisation will be difficult - we need two new tabs ""Network Client"" and ""Network Server"" instead of current ""Network"", and I'm not sure, that I'll start this feature at soon, therefore I prefer to hide XHR now)
",3y3,2014-08-28 09:02:31
425,2014-08-28 08:21:47,"> therefore I prefer to hide XHR now

I agree. Would you mind amending the last commit to hide XHR too?
",bajtos,2014-08-28 09:02:31
425,2014-08-28 08:26:29,"Ready. Rebased to master.
",3y3,2014-08-28 09:02:31
425,2014-08-28 08:28:42,"Arrr..! Test failure!
",3y3,2014-08-28 09:02:31
425,2014-08-28 09:00:56,"I have restarted the Travis job. These timeout failures usually go away on the second or third run. It would be better if the tests were less fragile and timing dependent, but oh well.
",bajtos,2014-08-28 09:02:31
425,2014-08-28 09:02:36,"Landed.
",bajtos,2014-08-28 09:02:31
424,2014-08-15 21:08:45,"According to the documentation, I can set a configuration file in the current directory to override default settings:

> a local .node-inspectorrc or the first found looking in ./ ../ ../../ ../../../ etc.

I created `.node-inspectorrc` and placed the following configuration inside:

<S_CODE_TOKEN>

However, when running `node-debug app.js` the port still defaults to 8080.  It appears as if the debugger is not in fact checking inside `./` for the file.  Hope this helps and thank you for developing/maintaining this great tool.
",jamesmortensen,2014-09-25 07:17:55
424,2014-08-22 18:07:59,"Hi @jamesmortensen, I am afraid `node-debug` specifies the port explicitly and thus overrides any setting in `.node-inspectorrc`.

You can change the port using `--web-port`, `--port` or `-p` option on the command line, e.g.

<S_CODE_TOKEN>

Here is what can be done here:
- improve the documentation in README to mention which options are overridden by `node-debug`
- and/or modify `node-debug` to get default values from `.node-inspectorrc` files (they are hard-coded at the moment).
",bajtos,2014-09-25 07:17:55
424,2014-08-22 19:44:39,"Thanks for the explanation, @bajtos. If I have time I may take a look at the code and see if this is something I can do as a pull request.
",jamesmortensen,2014-09-25 07:17:55
424,2014-08-28 09:16:31,"I'll start to fix it. I prefer to have unified configuration system, that uses rc module with yargs argv parser
",3y3,2014-09-25 07:17:55
424,2014-09-25 07:17:55,"Fixed by #436
",3y3,2014-09-25 07:17:55
423,2014-08-14 12:38:45,"- minor README improvements
- update package dependencies
- fix tests failing on Travis & Node v0.11 due to a race condition
- fix #411
",bajtos,2014-08-14 18:16:02
423,2014-08-14 13:32:21,"@3y3 please review
",bajtos,2014-08-14 18:16:02
423,2014-08-14 18:01:49,"LGTM
",3y3,2014-08-14 18:16:02
422,2014-08-12 22:10:12,"This is what I get when trying to use console:
![screenshot 2014-08-12 20 07 53](https://cloud.githubusercontent.com/assets/703551/3898536/4e29829a-226d-11e4-80fa-5c0a40bf66be.png)
",ilyador,2014-12-08 06:57:56
422,2014-08-13 05:44:41,"Are you trying to use console when application is not paused? (#222)
",3y3,2014-12-08 06:57:56
422,2014-08-13 10:06:53,"Yes. Also, the logged data appears in the terminal where I run node.
Maybe I am mistaken, but I was expecting to `console.log` an object in the app.js and see it in the debugger like in chrome, where you get a nice collapsable presentation. 
",ilyador,2014-12-08 06:57:56
422,2014-08-13 10:27:06,"For inspect any object in console you need:
1. Pause application.
2. Write in console object variable name.

Don't use `console.dir({""asd"": ""123""});`, tracing console to debugger is not implemented now. (Work in progress #219)
",3y3,2014-12-08 06:57:56
422,2014-12-08 06:57:56,"Should be fixed in 0.8.0. Please reopen the issue if the problem persists.
",bajtos,2014-12-08 06:57:56
421,2014-08-12 19:30:10,"First what we can do - copy part of [InjectedScriptSource](http://src.chromium.org/blink/branches/chromium/1625/Source/core/inspector/InjectedScriptSource.js).
This will help to resolve;
- #197 (Forward `console.log` to Node Inspector console)
- #222 (Expand object in console while the process is running)
- #225 (Object values are not shown while hovering in Chrome Dev Tools)
- #327 (Hover on parent shows child undefined but on it self shows object)
- #334 ((local) variable view takes very long time to open, if the variable list contains large arrays/hashes)
- #396 (RegExp modificators not displayed)
- #400 (Application crashes when trying to inspect global.process)

This only first step. I can't describe other injectables because I can't immagine all issues in one time =)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/3689289-move-more-code-to-application?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",3y3,2016-04-08 22:13:12
421,2014-12-01 16:13:42,"Previously we need to update frontend.

I'm start the work on that. I'll get 2234 branch.
",3y3,2016-04-08 22:13:12
420,2014-08-12 18:53:10,"Config.js was deprecated, but exists in project and README
",3y3,2014-08-14 21:43:37
420,2014-08-14 12:36:44,"LGTM, please merge the patch yourself.

I realised I forgot to mention how pull requests are merged. We don't use the button ""merge pull request"", as that creates non-linear history that's difficult to inspect. Instead we do a fast-forward merge. Start by configuring git short-cut for pull request branches per these [instructions](https://gist.github.com/piscisaureus/3342247).

Assuming you have ""origin"" configured as node-inspector/node-inspector, run the following steps to perform the fast-forward merge:

<S_CODE_TOKEN>
",bajtos,2014-08-14 21:43:37
420,2014-08-14 12:38:15,"Hang on, the change broke the build on v0.10 which is otherwise passing on master. Please fix it before landing this patch.

https://travis-ci.org/node-inspector/node-inspector/jobs/32364863

<S_CODE_TOKEN>
",bajtos,2014-08-14 21:43:37
420,2014-08-14 18:03:13,"Fixed. I'll wait #423 to be merged before it.
",3y3,2014-08-14 21:43:37
419,2014-08-12 00:09:08,"Hi!

After searching for about 18 hours, Node Inspector is the first tool which actually helped me found why our node application got ""randomly"" stuck. It looks like it's stuck in some kind of infinite loop around `listOnTimeout` in timer.js.

Basically we stop execution when we find that the process is stuck and that's where we end up:

We also issue a `console.trace` and here is the output:

<S_CODE_TOKEN>

From there, any idea how we climb further to understand why this loop happens?
",julien51,2014-08-12 07:20:53
419,2014-08-12 05:42:53,"Unfortunately now you don't have a potention to see [async call stack](http://www.html5rocks.com/en/tutorials/developertools/async-call-stack), what can help you in this situation.
Your current issue is ""Who registers a timeout?"" - in this situation I can propose you only randomly pause in your code and if you are lucky you'll find this place.
Other way - use some node tools for logging async stack ([list of some tools](https://github.com/node-inspector/node-inspector/issues/340#issuecomment-40885997))
",3y3,2014-08-12 07:20:53
419,2014-08-12 06:13:32,"Thanks @3y3, this is quite interesting. I had installed `long-stack-traces` in hopes that it would yield interesting results, but it seems to not show anything. I'll check with `longjohn` then. 
I am really not sure how to use `trycatch` or `hookit`, not what they do exactly... but I'll try that as well.
",julien51,2014-08-12 07:20:53
419,2014-08-12 06:51:50,"I'm making progress. From what I understand, our code is sometimes stuck in this area:

[timers.js:91](https://github.com/joyent/node/blob/master/lib/timers.js#L94):

<S_CODE_TOKEN>

the `if (diff < msecs) {` [line](https://github.com/joyent/node/blob/master/lib/timers.js#L106) is exactly where the problem happens.
When things are stuck, we have values like this
- diff: 7945
- msecs: 7945.79153158702
  which means, that diff is _just bellow_ msecs... 
  On the next iterations, the values are the _same_ and I believe they should be different! Actually, `var now = Timer.now();` yields the same result... which is _odd_ because, obviously some time has passed.
  If I manually set `diff` to something greater than `msecs` execution continues as expected.
",julien51,2014-08-12 07:20:53
419,2014-08-12 07:12:54,"Ha! It like somebody else had the [exact same issue](https://github.com/joyent/node/issues/8094) and that [a fix was provided](https://github.com/joyent/node/commit/6f043940bdcbfb5272be8ae959cd74b9fb5cf4f8)... Let's hope it gets merged real soon!
",julien51,2014-08-12 07:20:53
419,2014-08-12 18:23:56,"Wow! Nice issue =)
",3y3,2014-08-12 07:20:53
418,2014-08-11 13:01:36,"- Fix a bug where `TypeError: undefined is not a function` was ignored
  in ""break on uncaught exceptions"" mode.
- debugger: fix protocol debug log

Close #344.

@3y3 please review
",bajtos,2014-08-11 14:58:49
418,2014-08-11 14:45:50,"I think - it's a good point, that we don't need to see `native` sources. My proposition was over complicated in this context.

LGTM
",3y3,2014-08-11 14:58:49
417,2014-08-11 08:44:06,"Is it possible to use this with debugging generators as it seems to throw not recognising \* `SyntaxError: Unexpected token *`
",jchannon,2014-08-11 08:50:59
417,2014-08-11 08:50:59,"Just found it does via `node-debug --nodejs --harmony app.js`
",jchannon,2014-08-11 08:50:59
416,2014-08-03 18:50:17,"Installed 0.7.4 via npm on Windows 8.1 for Chrome 36.0.1985.125. Will not break on a breakpoint set within a module loaded with require via web page client. Will pause and resume though.

Started node-inspector: 
$ node-inspector
Node Inspector v0.7.4
Visit http://127.0.0.1:8080/debug?port=5858 to start debugging.

Started my node application:
node --debug test.js

Opened debugger link in Chrome. Navigated to my module source and created a breakpoint and script would not break on the selected line. Even tried restarting application to break on first line and then add breakpoint in module.

Downgraded to 0.1.10
npm uninstall -g node-inspector
npm install -g node-inspector@0.1.10

Started node application to break on first line
node --debug-brk test.js

Then navigated to module source and added breakpoint. Works!
",vytronics,2015-05-13 21:40:42
416,2014-08-04 11:07:04,"Can you post the simple example, that demonstrates your problem?
Can you reproduse the problem on [simplest server](https://github.com/node-inspector/node-debug-samples)?
",3y3,2015-05-13 21:40:42
416,2014-11-06 22:34:03,"I have this problem too and I am running on Linux. It seems like sometimes in order to get a breakpoint to work it's necessary to step into the file. Otherwise it can mean that when you try to step into a method it just steps over it. I haven't tried downgrading the version yet.
",sonewman,2015-05-13 21:40:42
416,2014-11-21 02:35:39,"me too, code is:

<S_CODE_TOKEN>

when i step into the console.log method just steps over it.
",sunyuyangg555,2015-05-13 21:40:42
416,2014-11-28 15:38:57,"The file where you are trying to set breakpoint, is it inside your project, or is it in a symlinked location? See #370.
",bajtos,2015-05-13 21:40:42
416,2014-11-28 15:45:34,"For me I have had issues with files directly in the folder. I'm not aware of any occasions when using symlinks. Like I said if i step into the require or add additional breakpoints further up the code I can eventually catch it on the breakpoint I want. But it is still strange it that completely skips it. Perhaps I will see if I can create a simple program to reproduce the issue.
",sonewman,2015-05-13 21:40:42
416,2014-12-12 22:37:51,"mac osx, same problem.
",cristiano-belloni,2015-05-13 21:40:42
416,2014-12-15 08:27:59,"We need a sample program to reproduce the issue on our machine.

Also try a recent Node v0.11 version and/or [io.js v0.12 from github](https://github.com/iojs/io.js/archive/v0.12.zip). It is very likely that the problem is V8-related and that it has been fixed in newer versions of V8.
",bajtos,2015-05-13 21:40:42
416,2014-12-23 09:40:32,"@bajtos 

> > We need a sample program to reproduce the issue on our machine.

Any program does

> > Also try a recent Node v0.11 version and/or io.js v0.12 from github. It is very likely that the problem is V8-related and that it has been fixed in newer versions of V8.

It worked in previous node-inspector versions, so it seems not V8-related?
",cristiano-belloni,2015-05-13 21:40:42
416,2014-12-28 11:09:15,"Previous discussions suggest the issue may be related to symlink paths not being resolved to their full path. I was going to investigate this but have not had time to look into this. But it does not explain why the same behaviour would be present in windows. I guess the way to track this would be to run node-inspector on node-inspector (assuming that is possible). I do not have windows 8, could someone confirm if this happens on windows7?
",sonewman,2015-05-13 21:40:42
416,2015-01-05 09:58:43,"> Any program does

I have very little time to work on Node Inspector these days. By providing the simplest possible program that reproduces your issue, you allow me to immediately start investigating the problem, instead of spending extra time trying to write such program myself.

> It worked in previous node-inspector versions, so it seems not V8-related?

What is the latest node-inspector version that works as expected? What is the first version that does not work?
",bajtos,2015-05-13 21:40:42
416,2015-04-25 05:40:54,"I had the same problem using node v0.12.2. downgraded to node v0.10.38 and the issue is fixed.
",yeonhoyoon,2015-05-13 21:40:42
416,2015-05-07 00:56:48,"+1

Node inspector in use is v0.10.0 with node v0.12.2.

How to reproduce:
1. Clone https://github.com/durz/node-inspector-416
2. Start the project in debug mode (`node --debug-brk index.js`)
3. Start node-inspector (`node-inspector`)
4. Browse to node-inspector UI in Chrome (http://127.0.0.1:8080/debug?ws=127.0.0.1:8080&port=5858)
5. Set a breakpoint on line 3 of `index.js` (on `var result = thing.doSomething();`)
6. Resume execution.
7. When the breakpoint on line 3 is hit, do a step into.
8. The debugger skips straight to line 4 (`console.log(result);`) instead of going into `thing.js`.

Workaround as suggested above is to downgrade to node v0.10.38.
",durz,2015-05-13 21:40:42
416,2015-05-13 21:40:37,"Fixed in 0.10.1
",3y3,2015-05-13 21:40:42
415,2014-08-01 00:51:37,"Is a dark theme such as:

  https://github.com/mauricecruz/chrome-devtools-zerodarkmatrix-theme

available for node-inspector, or if not, how would one go about creating a theme for node-inspector ?
",nottoseethesun,2014-10-05 22:35:22
415,2014-08-01 13:21:39,"Hm... Node Inspector don't support styling, but his interface is a common web page, and you can use something like [stylish](https://www.google.ru/#newwindow=1&q=stylish+chrome) (or other customizing tool) to enable this style on localhost/debug

I marked this issue as enhancement, because, if you or someone else will be ready to do research about ""Node Inspector + Stylish"", will be useful to create description tag ""Customising Node Inspector interface"" in Node Inspector readme.

If you are ready to write this description, you are welcome to create new commit. Or you can post tutorial in this issue and I'll add it to project in next version.
",3y3,2014-10-05 22:35:22
415,2014-08-02 20:42:08,"Sounds good - the Node Inspector seems to be the same interface as the regular Chrome debugger, except that in its ""Settings"" (developer tools settings) dialog, it lacks this option: ""Experiments ▶ [✔] Allow custom UI themes.""

That option is required to enable themes such as the zerodarkmatrix-theme that I mention above.  

Is there any reason why this option is not present?  Because if all other things are the same, then providing this option should provide this enhancement.
",nottoseethesun,2014-10-05 22:35:22
415,2014-08-22 18:10:23,"FWIW, Node Inspector's front-end is about one year behind Chrome dev tools. More likely than not, custom UI themes were added after our last front-end update.
",bajtos,2014-10-05 22:35:22
415,2014-10-03 05:45:55,"Hey all,
It's still possible to inject css via the devtools inspector's inspector. I wrote a snippet awhile ago to inject themes after they removed the ability to theme via custom.css and before they introduce themes via extensions.

Seems to work well with an older version of Zero Dark Matrix, but I didn't do much digging.

You'll still have to run the snippet everytime you run node inspector, but at least it'll be themed =).

https://gist.github.com/mauricecruz/d20345b25b5c3ca0a4d7

![image](https://cloud.githubusercontent.com/assets/1640686/4502177/4208978c-4ac0-11e4-86b1-2ce8b4223e0c.png)
",mauricecruz,2014-10-05 22:35:22
415,2014-10-05 22:35:22,"Good to know!
",nottoseethesun,2014-10-05 22:35:22
415,2015-11-04 22:48:13,"this is updated CSS for newer version of node-inspector https://raw.githubusercontent.com/vycb/redtreeoflife/test/blackdev.css
",vycb,2014-10-05 22:35:22
414,2014-07-30 15:52:56,,Fodi69,2014-08-22 17:20:53
414,2014-08-18 20:26:27,"@Fodi69 , thanks for commit, it is reasonable. I'll merge at soon.
",3y3,2014-08-22 17:20:53
414,2014-08-22 17:20:53,"Landed as 42ed6544, thank you for the contribution.
",bajtos,2014-08-22 17:20:53
413,2014-07-29 17:50:06,"I'm using node-inspector for node 0.11.13

I start `node --debug-brk ...`, open node-inspector and enter the code in Chrome. Everything's fine.

Then I press 'Continue' in Chrome and, after some time, in console: 

<S_CODE_TOKEN>

There is no stack at all.

Is there a way to trace communication with v8 to see at which stage it happened? It looks like a node-inspector bug.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/3386005-internal-error-illegal-access-debugging-es6-proxy?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",iliakan,
413,2014-07-31 07:36:05,"What is your node-inspector version?
",3y3,
413,2014-07-31 07:38:13,"node-inspector -v
v0.7.4
",iliakan,
413,2014-07-31 07:48:23,"Is ""pause on uncaught errors"" enabled?
",3y3,
413,2014-07-31 08:31:53,"Not enabled.
",iliakan,
413,2014-07-31 10:08:53,"Ok, how I explain current situation:
Application was loaded and paused on first line. After that you start execution and application terminates with error `Internal error: illegal access`.
Are you think that reason for this error is attached inspector?
Or problem is in not displayed error stack?
You can't see stack trace bacause this is `Uncaught error`.
You can try to enable ""pause on uncaught errors"" - is this helpful?

---

А вообще я бы предпочел разобраться с этим на русском языке через почту 3y3@bk.ru
",3y3,
413,2014-07-31 10:48:43,"The application does not terminate.
Web interface of Node Inspector terminates.

And yes, there is no stack.

P.S. Right now the code has changed quite a bit, when I see the problem the next time, I can try pause on uncaught errors or do something else if you recommend.
",iliakan,
413,2014-08-05 17:55:24,"@3y3 I made the commit for you: https://github.com/iliakan/javascript-nodejs/commit/d539f298644bfd0eaaa75e9cb8cd1d86843110c3

Probably, the project can be cleared off most stuff to demonstrate the error, but I believe you can easily run it as it is.

To see the error:
1) Install and run the project, see https://github.com/iliakan/javascript-nodejs/blob/master/Install.md (in Russian).
2) Run node-inspector, open node-inspector browser window.
3) Go http://127.0.0.1:3000/

You should see the error like this: http://ilyakantor.ru/screen/2014-08-05_2155.png
",iliakan,
413,2014-08-09 11:57:42,"I having the same issue. I already figured out that there is related to harmony proxies. If I place a breakpoint to a position where the current scope is behind a proxy call, in the call stack I can see many ""Illegal access"" lines. I think this issue is not related to node-inscpector, because I cannot debug my harmony Proxy based code in JetBrains Web Storm also, the above error happens,
",unbornchikken,
413,2014-08-09 12:00:59,"The `Illegal access` is indeed coming from proxies. On my codepath though, there seem to be no proxies.
",iliakan,
413,2014-08-09 12:43:01,"@unbornchikken , can you post example of code?
",3y3,
413,2014-08-09 12:44:10,"@iliakan , I forked you commit and try to find the problem.
",3y3,
413,2014-08-10 11:51:21,"Hello,

Of course, here it goes: http://1drv.ms/XSR4Qc

I've created a simple mocha unit test to reproduce this issue.

steps to reproduce:

npm install -g mocha
unarchive my repro project to a folder
npm install
launch node-inspector
mocha --debug-brk --harmony index
switch to node-inspector, refresh page, put a breakpoint to index.js line 11
launch debugging
nothing happens, debugging hangs up (except there should be an error message in the node.js console that says: illegal access buff)
pause debugging
red Internal error: Illegal access will appear in the node-inspector console

Cheers,
chikk
",unbornchikken,
413,2014-08-10 11:58:54,"Almost forgot: node version is 0.11.13
",unbornchikken,
413,2014-08-13 06:40:24,"It seems it's a v8 issue. I've opened it there: 

https://code.google.com/p/v8/issues/detail?id=3510
",unbornchikken,
413,2014-08-29 16:35:17,"The V8 team is not going to fix that any time soon (https://code.google.com/p/v8/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Type%20Status%20Priority%20Owner%20Summary%20HW%20OS%20Area%20Stars&groupby=&sort=&id=3510)

Proxy breaks node-inspector, making things non-debuggable, so I'd suggest to evade Proxy in code now. That's mostly possible. And there's something node-inspector could do here, better than just diy with a strange error.

I'd suggest that node-inspector should catch this kind of error (is it possible)? And console.log a descriptive message, something like 'ES6 Proxy are not debuggable in V8 yet', and, if possible saying where the offending Proxy is (to get rid of it).

Doable?
",iliakan,
413,2014-09-01 10:44:31,"@iliakan , can you confirm, that your project also has problems by reason of `Proxy`? (I forked your commit, but I can't start it - npm install fails on `javascript-parser`, but I see what you use `--harmony` flag)

About fixing: I have in plans switch to Blink object serialization algorithm, in other words - rewrite current place that emit this error. But it's not a small fix - is's a big job.
Also Node Inspector current target is ""work same as Blink Dev Tools"", but not ""work better than Blink Dev Tools"", therefore this fix has low priority for me.
",3y3,
413,2014-09-01 11:29:15,"I would guess so. The error message looks like Proxy error.
I've reported an issue to koa-passport, that's the only place in the project which uses Proxy, hopefully @rkusa will fix it.
",iliakan,
413,2014-12-21 19:31:11,"Thanks, this issue shed some light on my mystery problem. Have subscribed. Fingers crossed for some future compatibility fixes.
",MeanwhileMedia,
413,2015-01-13 18:53:38,"FWIW, the upcoming io.js 1.0.0 release should ship a much more recent version of V8, you should give it a try and see if the issue has been fixed. https://iojs.org/
",bajtos,
413,2015-02-26 21:50:16,"This is a V8 problem (in its runtime debugger/reflection APIs), not a node-inspector problem per se.

For a project I work on, we patched the following functions in V8: `Runtime_GetLocalPropertyNames`, `Runtime_GetLocalElementNames`, `Runtime_DebugGetProperty`, `Runtime_DebugConstructedBy` to deal better with JSProxy, then rebuilt node from the patched source.

Those are the V8 3.14 (node 0.10.x) functions and they don't exist under those names in V8 3.28 (node 0.12.0), but I don't think the issue has actually been fixed as of V8 3.28. I haven't tried io.js. I did just try a quick test of node 0.12.0 with Proxy and node-inspector and still see `Illegal access` exceptions.
",metamatt,
413,2015-03-12 01:33:23,"Thanks for that info @metamatt 
I guess our only hope is to wait for a V8 fix. However, even when that happens, we will need node-inspector to support io.js so we can get at the newest v8. Looks like that may come just in time (https://github.com/node-inspector/node-inspector/issues/523)!
",MeanwhileMedia,
413,2016-05-31 04:56:48,"I just ran into this problem... Is there any fix yet?
",benmarten,
413,2016-06-06 19:00:33,"Was also seeing this error, but based on [this node-inspector issue thread](https://github.com/node-inspector/node-inspector/issues/864), I upgraded to node 6.2.1 and the issue was resolved.

If you have the ability to upgrade to 6.2.1, it might be worth a try.  Not sure how related the 2 issues are.
",egalpin,
413,2016-08-05 15:26:43,"same problem. 
node version v6.2.0
",huanghaiyang,
413,2016-08-17 13:03:52,"This happens on Chrome browser's debugger! with Proxy Object.
",mhcho-dev,
412,2014-07-29 17:04:41,"Hi guys,
I've trouble while debugging with node-inspector.
I use Windows 7, node-inspector 0.7.4, Express:  4.8.3

I've this problem on two different machines.

Ok, what I could find out:
#### 1

Error came up at this point:

<S_CODE_TOKEN>
#### 2

The first line shows the path the debugger is looking for..
The second line shows the right path
Debugger - `C:\Nodeapp\git bpr 23052014\bpr\node_modules\express.js`
Real Path - `C:\Nodeapp\git bpr 23052014\bpr\node_modules\express\lib\express.js`
#### 3

He founds this pathes
module.js
paths: request = express

<S_CODE_TOKEN>
#### 4

and brings this path up. ---> is okay! 
`c:\Nodeapp\git bpr 23052014\bpr\node_modules\express`
#### 5

// given a path check 
function tryExtensions

<S_CODE_TOKEN>
#### 6

and brings this path up, but there is no file with this extension 
// check if the file exists and is not a directory function tryFile(requestPath) 
{ ""c:\Nodeapp\git bpr 23052014\bpr\node_modules\express.js"" 
--> But there is not such a file! 
The file is here: C:\Nodeapp\git bpr 23052014\bpr\node_modules\express\lib\express.js

Is there a possibility to skip this error?
Best regards,
Dirk
",draschke,2014-08-18 11:53:26
412,2014-08-13 15:25:18,"Hi guys,
is it possible to install an older version of node-inspector 0.7.4?
I was looking for it, but couldn't find anything.

Would like to check, if the problem could be fixes with an older version.
(Found people with the same problem of this version)

Thanks a lot!
",draschke,2014-08-18 11:53:26
412,2014-08-13 15:52:43,"Use `npm install node-inspector@0.7.3` to install oldest version.
Please format your messages. I started to format your issue message but it's not helpful - I understand what Node Inspector not found the requested path to `express` and I see that this path is wrong for you, but I can't reproduce your situation. 
First that I can recommend you - reinstall `express`
Can you reproduce this situation by extending [simple server](https://github.com/node-inspector/node-debug-samples) ?
",3y3,2014-08-18 11:53:26
412,2014-08-13 16:11:41,"I tried at first ""npm install node-inspector@0.7.3"" 
and than ""npm install -g node-inspector@0.7.3"",
but I'm still on version 7.4 (says the version check ""npm info node-inspector version"")
???
",draschke,2014-08-18 11:53:26
412,2014-08-13 16:22:48,"""Can you reproduce this situation by extending simple server ?""
No, this simple server works fine with version 7.4.
",draschke,2014-08-18 11:53:26
412,2014-08-13 16:33:58,"""First that I can recommend you - reinstall express""
I think I'll do that, but at the moment I don't know how?
",draschke,2014-08-18 11:53:26
412,2014-08-13 16:39:27,"okay, i get two different results: 

$ node-inspector --version
v0.7.3

$ npm info node-inspector version
npm http GET https://registry.npmjs.org/node-inspector
npm http 304 https://registry.npmjs.org/node-inspector
0.7.4
",draschke,2014-08-18 11:53:26
412,2014-08-17 11:06:37,"I get this same issue. It was repeatedly running in the debugger, without changing any source code or anything. I had just honed into the place the bug I was originally trying to find, and then the next time I run with the inspector it came up with this for express. I reinstalled this inspector, and recloned my node js server from github. And this time it was the same error as here except instead of express it was colors.

EDIT: Turning off break on all exceptions (pause-like button in bottom left) makes this go away. But doesn't explain why it suddenly started nor why it suddenly was ok with express and then had a problem with colors.
",Jon889,2014-08-18 11:53:26
412,2014-08-17 17:32:39,"i deleted all express files and reinstalled it. but there is no difference, still the same trouble.
also moved the project to c:\project

I forgot to say, that I've the problem on two different computers... and it came up to different times.
Tell me, if you need more informations. 
",draschke,2014-08-18 11:53:26
412,2014-08-18 06:53:07,"@Jon889 , can I see example of failing code anywhere?
",3y3,2014-08-18 11:53:26
412,2014-08-18 06:54:03,"@draschke , have you other projects without this error, but with installed express?
",3y3,2014-08-18 11:53:26
412,2014-08-18 08:19:36,"@3y3, No. 
Today I tried another very simple express project, there is almost no further logic inside.
But exactly the same problem. The project works fine, but if I try to debug it, I get an exception.
exception: Error: ENOENT, no such file or directory
c:\nodeapps\express\express_example\node_modules\express.js 

The path is here:
c:\nodeapps\express\express_example\node_modules\express\lib\express.js 
",draschke,2014-08-18 11:53:26
412,2014-08-18 09:13:45,"@draschke,  Are you working with this [express_example](https://github.com/shapeshed/express_example)?
",3y3,2014-08-18 11:53:26
412,2014-08-18 09:24:36,"No, but almost the same project. 

But I installed it  (""express_example"") right now and checked, if the behavior is the same.
The same problem: 

exception: Error: ENOENT, no such file or directory
c:\nodeapps\express_example-master\node_modules\express.js

The right path is here:
C:\nodeapps\express_example-master\node_modules\express\lib\express.js
",draschke,2014-08-18 11:53:26
412,2014-08-18 09:37:30,"Ok, it's a good point. Now I can try to reproduce problem in real example. See you later =)
Can you also post the list of global installed packets?
",3y3,2014-08-18 11:53:26
412,2014-08-18 10:12:51,"$ npm list -g --depth=0

express@4.8.4
express-generator@3.0.0
gulp@3.8.7
mocha@1.21.4
node-inspector@0.7.4
nodemon@1.2.1

gulp and mocha are not important. they were installed after the error came up.

express-generator@3.0.0 is also unnecessary. I installed the generator to get the problem fixed.
",draschke,2014-08-18 11:53:26
412,2014-08-18 11:14:48,"![error](https://cloud.githubusercontent.com/assets/3931155/3950624/adcae022-26c8-11e4-831d-e037c3b8267e.PNG)

Are you say about this? Or you see error message in other place of debugger (console for example, or terminal...)?
",3y3,2014-08-18 11:53:26
412,2014-08-18 11:18:23,"Yes, thats it! 
Here is my screenshot: 
![image](https://cloud.githubusercontent.com/assets/4199123/3950663/415abb00-26c9-11e4-9c4b-d1a56cab7362.png)
",draschke,2014-08-18 11:53:26
412,2014-08-18 11:28:29,"It seems that it tries to look for a file called express.js instead or before looking for the express module. Perhaps that's how node decides whether what you're requiring a file or module. As in if there's an exception when looking for express.js then it must be a module called express?
",Jon889,2014-08-18 11:53:26
412,2014-08-18 11:32:21,"Uhm, why I don't ask screenshot at first...!
It's a normal behavior. This is not real error, but an algorithm of fs module - it try to find target file in some places, each place, where it not found, calls the exception.
If you do not want to see this error, disable ""Pause on uncaught errors""
",3y3,2014-08-18 11:53:26
412,2014-08-18 11:33:12,"@Jon889 , have you same problem or different?
",3y3,2014-08-18 11:53:26
412,2014-08-18 11:34:06,"If you do not want to see this error, disable ""Pause on uncaught errors"" --> where? 
",draschke,2014-08-18 11:53:26
412,2014-08-18 11:37:20,"![error](https://cloud.githubusercontent.com/assets/3931155/3950802/0156b844-26cc-11e4-8aa8-ca4152cda943.PNG)
",3y3,2014-08-18 11:53:26
412,2014-08-18 11:42:40,"Oh, no!  I don't believe it! ---> It works!!! :)
(I was struggling 2 month with this problem and couldn't really work.) 

Big thanks to you!!! 
",draschke,2014-08-18 11:53:26
412,2014-08-18 11:45:44,"Really sorry for wasting your time, but I checked the whole internet and couldn't find an answer.
",draschke,2014-08-18 11:53:26
412,2014-08-18 13:05:40,"No problem =)
",3y3,2014-08-18 11:53:26
411,2014-07-27 02:49:33,"From README: 

Documentation specific to Node Inspector provided by StrongLoop: Running Node Inspector http://docs.strongloop.com/display/DOC/Running+Node+Inspector

This link requires a login, which I (and many others) don't have
",basarat,2014-08-14 18:16:02
411,2014-08-14 13:39:18,"Hi @basarat, thank you for reporting the issue, the new URL is http://docs.strongloop.com/display/SLC/Debugging+with+Node+Inspector
",bajtos,2014-08-14 18:16:02
410,2014-07-24 08:29:41,"Hi guys,
I've trouble while debugging with node-inspector.
I use Windows 7, node-inspector 0.7.4, node --version v0.10.26

I've this problem on two different machines. 

Ok what I could find out:
1. 
Error came up at this point:
fs.statSync = function(path) {
  nullCheck(path);
  return binding.stat(pathModule._makeLong(path));
};
2: 
The first line shows the path the debugger is looking for..
The second line shows the right path
C:\Nodeapp\git bpr 23052014\bpr\node_modules\express.js         Debugger
C:\Nodeapp\git bpr 23052014\bpr\node_modules\express\lib\express.js Real Path
1. He founds this pathes
   module.js
   paths: request = express
   0: ""c:\Nodeapp\git bpr 23052014\bpr\node_modules""
   1: ""c:\Nodeapp\git bpr 23052014\node_modules""
   2: ""c:\Nodeapp\node_modules""
   3: ""c:\node_modules""
   4: ""C:\Users\diraschk.node_modules""
   5: ""C:\Users\diraschk.node_libraries""
   6: ""c:\Program Files (x86)\lib\node""
2. and brings this path up. ---> is okay! 
   c:\Nodeapp\git bpr 23052014\bpr\node_modules\express

5.
// given a path check 
function tryExtensions
0: "".js""
1: "".json""
2: "".node""
1.  
   and brings this path up, but there is no file with this extension
   // check if the file exists and is not a directory
   function tryFile(requestPath) {
   ""c:\Nodeapp\git bpr 23052014\bpr\node_modules\express.js""
   --> But there is not such a file!
   The file is here:
   C:\Nodeapp\git bpr 23052014\bpr\node_modules\express\lib\express.js

Is there a possibility to skip this error?
Best regards,
Dirk
",draschke,2014-07-29 17:03:04
410,2014-07-24 08:37:32,"Sorry, but the format was broken: 

Hi guys,
I've trouble while debugging with node-inspector.
I use Windows 7, node-inspector 0.7.4

I've this problem on two different machines.

Ok what I could find out:
1. 
Error came up at this point:
fs.statSync = function(path) {
nullCheck(path);
return binding.stat(pathModule._makeLong(path));
};
2: 
The first line shows the path the debugger is looking for..
The second line shows the right path
C:\Nodeapp\git bpr 23052014\bpr\node_modules\express.js Debugger
C:\Nodeapp\git bpr 23052014\bpr\node_modules\express\lib\express.js Real Path

3.
He founds this pathes
module.js
paths: request = express
0: ""c:\Nodeapp\git bpr 23052014\bpr\node_modules""
1: ""c:\Nodeapp\git bpr 23052014\node_modules""
2: ""c:\Nodeapp\node_modules""
3: ""c:\node_modules""
4: ""C:\Users\diraschk.node_modules""
5: ""C:\Users\diraschk.node_libraries""
6: ""c:\Program Files (x86)\lib\node""

4.
and brings this path up. ---> is okay! 
c:\Nodeapp\git bpr 23052014\bpr\node_modules\express

5.
// given a path check 
function tryExtensions
0: "".js""
1: "".json""
2: "".node""

6.
and brings this path up, but there is no file with this extension 
// check if the file exists and is not a directory function tryFile(requestPath) { ""c:\Nodeapp\git bpr 23052014\bpr\node_modules\express.js"" --> But there is not such a file! The file is here: C:\Nodeapp\git bpr 23052014\bpr\node_modules\express\lib\express.js

Is there a possibility to skip this error?
Best regards,
Dirk
",draschke,2014-07-29 17:03:04
409,2014-07-15 14:02:25,"If I have hidden enabled in config then none of the coffee files show up and if I leave it empty some coffee files show up and some don't it is so random
",cooolbasha,2014-12-18 12:41:05
409,2014-07-15 18:31:08,"Are you able to reproduce the problem using the [sample app](https://github.com/node-inspector/node-debug-samples/tree/master/sourcemap)?
",bajtos,2014-12-18 12:41:05
409,2014-07-16 01:28:15,"I think when I hide the node_modules and the appjs requires some of them and I think that might be reason..I brought back node_modules and it is starting to show up most of the coffee files..but still even some js..don't show up.. and I am able to get the sample app..and I add more files to it ..some show up and some don't with the same code on it.
",cooolbasha,2014-12-18 12:41:05
409,2014-07-16 05:49:12,">  I am able to get the sample app..and I add more files to it ..some show up and some don't with the same code on it.

I need a test case where I can reliably reproduce the problem. Please fork the sample app repo, add more files needed for the issue to start occurring and post a link to the repo here.
",bajtos,2014-12-18 12:41:05
409,2014-12-18 12:41:05,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide an example for reproducing the issue on our machines using the latest Node Inspector version.
",bajtos,2014-12-18 12:41:05
408,2014-07-14 17:20:04,"I tried putting that to true...
""no-preload"": true,
but it doesn' help loading node-inspector faster.
",cooolbasha,2014-07-14 19:06:00
408,2014-07-14 17:51:14,"config.json was deprecated. Please use `.node-inspectorrc` file to store your options
",3y3,2014-07-14 19:06:00
407,2014-07-14 17:18:41,"why doesn't the normal chrome extension do not show in node inspector.

![image](https://cloud.githubusercontent.com/assets/1131747/3574162/e1a42d40-0b7a-11e4-9ee0-bb0749f4f0bc.png)
",cooolbasha,2014-12-18 17:18:37
407,2014-07-14 17:54:42,"Are you want to see `profiler`, `audit` etc.?
",3y3,2014-12-18 17:18:37
407,2014-07-14 19:07:07,"yes..and there are some more custom ones as well...
",cooolbasha,2014-12-18 17:18:37
407,2014-07-15 18:34:40,"Node Inspector does not support DevTools extensions - see #180.

As for the built-in tabs, profiler & heap are in development.
",bajtos,2014-12-18 17:18:37
407,2014-12-18 17:18:37,"Profiler and Heap were released in v0.8.0.
",bajtos,2014-12-18 17:18:37
406,2014-07-13 19:10:37,"is live edit possible for coffee files. If not atleast make it sync with the file system to compile and come back as js from file system.
",cooolbasha,2014-12-18 17:17:34
406,2014-07-14 17:16:05,"Regular F12/Debugger in chrome would allow coffee/any file to be synched to the file system..is node-inspector putting some restrictions...

In Node-inspector it allows me to sync only the js files..So I had to make change to the js of coffee which get synced to the fs ...but the coffee files are out of sync
",cooolbasha,2014-12-18 17:17:34
406,2014-07-14 17:22:36,"also changing coffee file in regular debugger would compile it into js file ..is there a restriction in node-inspector not to do it.
",cooolbasha,2014-12-18 17:17:34
406,2014-12-18 17:17:34,"I am closing this issue, since there were not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 17:17:34
405,2014-07-11 20:52:32,"C:\wamp\www\nodemongoblog>tail npm-debug.log
2955 error     http://github.com/npm/npm/issues
2956 error System Windows_NT 6.1.7601
2957 error command ""C:\Program Files\nodejs\\node.exe"" ""C:\Program F
odejs\node_modules\npm\bin\npm-cli.js"" ""install"" ""node-inspector""
2958 error cwd C:\wamp\www\nodemongoblog
2959 error node -v v0.10.29
2960 error npm -v 1.4.14
2961 error syscall spawn
2962 error code ENOENT
2963 error errno ENOENT
2964 verbose exit [ 1, true ]
",markl17,2014-12-18 17:20:02
405,2014-07-15 18:31:40,"What are the steps to reproduce the issue on my machine?
",bajtos,2014-12-18 17:20:02
405,2014-07-15 22:19:51,"i simply type npm -g install node-inspector

> ws@0.4.31 install C:\Users\moshe\AppData\Roaming\npm\node_modules\node-inspect
> or\node_modules\ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)
> when i try npm -g install ws i get 
> npm http GET http://registry.npmjs.org/commander
> npm http GET http://registry.npmjs.org/tinycolor
> npm http GET http://registry.npmjs.org/nan
> npm http GET http://registry.npmjs.org/options
> npm http 304 http://registry.npmjs.org/tinycolor
> npm http 304 http://registry.npmjs.org/commander
> npm http 304 http://registry.npmjs.org/nan
> npm http 304 http://registry.npmjs.org/options
> C:\Users\moshe\AppData\Roaming\npm\wscat -> C:\Users\moshe\AppData\Roaming\npm\n
> ode_modules\ws\bin\wscat
> 
> ws@0.4.31 install C:\Users\moshe\AppData\Roaming\npm\node_modules\ws
> (node-gyp rebuild 2> builderror.log) || (exit 0)
",markl17,2014-12-18 17:20:02
405,2014-07-16 05:51:35,"Do you have node-gyp build configured correctly? See this page for instructions: http://docs.strongloop.com/display/SOPS/Installing+compiler+tools
",bajtos,2014-12-18 17:20:02
405,2014-07-16 14:39:36,"gyp info spawn args   '--no-parallel',
gyp info spawn args   '--generator-output',
gyp info spawn args   'C:\Users\moshe\node_modules\ws\build',
gyp info spawn args   '-Goutput_dir=.' ]
Traceback (most recent call last):
  File ""c:\Users\moshe\AppData\Roaming\npm\node_modules\node-gyp\gyp\gyp_main.py
"", line 11, in <module>
    import gyp
  File ""c:\Users\moshe\AppData\Roaming\npm\node_modules\node-gyp\gyp\pylib\gyp_
_init__.py"", line 8, in <module>
    import gyp.input
  File ""c:\Users\moshe\AppData\Roaming\npm\node_modules\node-gyp\gyp\pylib\gyp\i
nput.py"", line 15, in <module>
    import multiprocessing
  File ""c:\python34\lib\multiprocessing__init__.py"", line 65, in <module>
    from multiprocessing.util import SUBDEBUG, SUBWARNING
  File ""c:\python34\lib\multiprocessing\util.py"", line 39, in <module>
    import threading        # we want threading to install it's
  File ""c:\python34\lib\threading.py"", line 13, in <module>
    from collections import deque as _deque
  File ""c:\python34\lib\collections__init__.py"", line 366
    exec(class_definition, namespace)
SyntaxError: unqualified exec is not allowed in function 'namedtuple' it contain
s a nested function with free variables
gyp ERR! configure error
gyp ERR! stack Error: `gyp` failed with exit code: 1
",markl17,2014-12-18 17:20:02
405,2014-07-16 15:15:13,"when i type node-gyp --debug configure i get the error
gyp info spawn args   '--no-parallel',
gyp info spawn args   '--generator-output',
gyp info spawn args   'C:\Users\moshe\node_modules\ws\build',
gyp info spawn args   '-Goutput_dir=.' ]
Traceback (most recent call last):
  File ""C:\Users\moshe\AppData\Roaming\npm\node_modules\node-gyp\gyp\gyp_main.py
"", line 11, in <module>
    import gyp
  File ""C:\Users\moshe\AppData\Roaming\npm\node_modules\node-gyp\gyp\pylib\gyp_
_init__.py"", line 8, in <module>
    import gyp.input
  File ""C:\Users\moshe\AppData\Roaming\npm\node_modules\node-gyp\gyp\pylib\gyp\i
nput.py"", line 15, in <module>
    import multiprocessing
  File ""c:\python34\lib\multiprocessing__init__.py"", line 65, in <module>
    from multiprocessing.util import SUBDEBUG, SUBWARNING
  File ""c:\python34\lib\multiprocessing\util.py"", line 39, in <module>
    import threading        # we want threading to install it's
  File ""c:\python34\lib\threading.py"", line 13, in <module>
    from collections import deque as _deque
  File ""c:\python34\lib\collections__init__.py"", line 366
    exec(class_definition, namespace)
SyntaxError: unqualified exec is not allowed in function 'namedtuple' it contain
s a nested function with free variables
gyp ERR! configure error
gyp ERR! stack Error: `gyp` failed with exit code: 1
",markl17,2014-12-18 17:20:02
405,2014-07-17 13:08:41,"I think that problem is in python. Are you have installed python 2.*? 
",3y3,2014-12-18 17:20:02
405,2014-07-17 16:29:05,"it only works with version 2
",markl17,2014-12-18 17:20:02
405,2014-12-18 17:20:02,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide any new information to help us to resolve the problem.
",bajtos,2014-12-18 17:20:02
404,2014-07-11 10:16:23,"Trying to install `node-inspector` using NodeJS v0.8.5 and npm v1.1.46 gives me `No compatible version found: minimist@'^0.1.0'`. See log:

<S_CODE_TOKEN>
",franza,2014-07-15 18:31:56
404,2014-07-11 16:59:01,"You need at least `npm v1.4.3` because it supports the caret `^` operator used in npm package versions. See [here](http://stackoverflow.com/questions/22137778/what-does-mean-in-package-json-versioning) for more information.
",ryanseys,2014-07-15 18:31:56
404,2014-07-13 04:57:41,"Was struggling with the same issue, thankes @ryanseys 
",fforres,2014-07-15 18:31:56
403,2014-07-07 14:30:57,"Hi, 

I have version v0.7.4 of node-inspector. I am trying to debug expressjs app with the same. When I fire up node-inspector via command:

node-debug app.js, 

My debug tab in chrome gets stuck between

fs.statSync = function(path) {
  nullCheck(path);
  return binding.stat(pathModule._makeLong(path));
};

and 

fs.openSync = function(path, flags, mode) {
  mode = modeNum(mode, 438 /_=0666_/);
  nullCheck(path);
  return binding.open(pathModule._makeLong(path), stringToFlags(flags), mode);
};

in file fs.js. It never gets out of there. Am I doing something wrong? Any help would be appreciated. 

Thanks
",Nidhi123,2014-12-18 17:37:25
403,2014-07-09 16:18:55,"Could you please provide a full code example that I can use to reproduce the issue?
",bajtos,2014-12-18 17:37:25
403,2014-09-10 15:16:51,"Same thing here.
",svileng,2014-12-18 17:37:25
403,2014-10-03 19:16:21,"I'm hitting this issue too, and as a workaround you need to reload or reopen the tab
",tinchogob,2014-12-18 17:37:25
403,2014-10-29 14:08:21,"Same thing here!
",Epotignano,2014-12-18 17:37:25
403,2014-11-04 07:55:04,"I'm facing same issue.
By copy then paste the code where your debugger stalled, I found **some missing files**. Just add it and everything should be works. Hope it can help, at least it works in my problem
",absyah,2014-12-18 17:37:25
403,2014-12-18 17:37:25,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 17:37:25
402,2014-07-03 01:21:15,"Hi,
Nodejs app are running as follows:
main app(pid = 1)
       sub_app1(pid= 11)
       sub_app2(pid= 12)
Steps:
1. sudo kill -s USR1 11 
2. sudo node-inspector & 
3. set break point a code at 27.0.0.1:8080/debug?port=5858 
4. When I ran the sub_app1 to hit the break point, it doesn't break it.

I can debug the main_app(pid=1) without any issue. 

Thank you!

Env: nodejs(0.10.26), node-inspector(0.7.3), os(ubuntu), client(w7)
",chi-e,2014-07-03 08:52:19
402,2014-07-03 07:06:57,"Are you sure you don't have other processes, that listen on 5858?
",3y3,2014-07-03 08:52:19
402,2014-07-03 08:52:19,"@chi-e I your main process has debug enabled (listening on port 5858), the child process will not be able to listen on the port 5858 too. 

See [Debugging Clustered Apps with Node-Inspector](http://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/) for more information. The most important part is the code snippet showing how to tell your Node child process to use a different debug port:

<S_CODE_TOKEN>
",bajtos,2014-07-03 08:52:19
401,2014-07-02 00:16:12,"I'm not sure if this is a node-inspector issue, or a Webkit issue. I couldn't get node-inspector to work with inline source maps (using the `sourceMappingURL=data:application/json;base64,...` syntax)

Here's my test. The test file (_test.coffee_): 

<S_CODE_TOKEN>

From that, generate a map using...

<S_CODE_TOKEN>

This makes a map that looks like

<S_CODE_TOKEN>

So the compiled file, with the base64 encoded sourceMappingURL looks like

<S_CODE_TOKEN>

Then run

<S_CODE_TOKEN>

Sadly, there is no test.coffee anywhere to be found in the debugger.

![inline sourcemap broken](https://www.evernote.com/shard/s3/sh/890ab33d-c5a8-44df-b5e4-cc7c3f914d46/af0e55ebbc6bf5c08ce552f3179f8e36/res/11b4f845-311b-474d-90ad-45c516dfbbb6/skitch.png)

I'll commit this test code over here: https://github.com/adamloving/coffeescript-sourcemap-demo
",adamloving,2015-10-01 08:46:34
401,2014-07-03 08:59:02,"What happens when you reference your generated js file from an `index.html` and run it in Chrome Dev Tools? Is the inline source map picked up?

<S_CODE_TOKEN>

AFAIK source maps inlined in a data URL works. The problem is probably in the fact that the coffee script source is inlined in the source map.

Possibly related: #224.
",bajtos,2015-10-01 08:46:34
401,2014-11-06 01:30:38,"I'm having a similar issue. My setup is a bit different but ultimately, the output is the same.
I put up a minimal test case there: https://github.com/geekingfrog/nodeInspectorIssue401
Source maps are picked up with chrome but not with node-inspector. Same bug for inline and external source maps.
",geekingfrog,2015-10-01 08:46:34
401,2014-11-13 19:30:59,"IMO the `sourceMappingURL` is not a valid data URL per [RFC2397](http://www.ietf.org/rfc/rfc2397.txt), as it is missing schema and other metadata.

The correct URL should look like this:

<S_CODE_TOKEN>

~~You can use [strong-data-uri](https://github.com/strongloop/strong-data-uri) to generate a correct data URL from a node application.~~
",bajtos,2015-10-01 08:46:34
401,2014-11-13 19:37:37,"See also #207 which implemented support for embedded source maps as requested in #204.

I suppose we need to relax the parser to treat any non-http(s) url as a data url. The change should be fairly trivial to implement, start by looking at the code added by #207.
",bajtos,2015-10-01 08:46:34
401,2015-05-30 16:15:24,"+1 running into this issue using babel with inline source maps. 
",michaelBenin,2015-10-01 08:46:34
401,2015-06-13 08:26:33,":+1: also babel with inline source maps, e.g.,
`//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW...`
",mgmorcos,2015-10-01 08:46:34
401,2015-09-17 23:32:54,"I am using `node-inspector@0.12.3` and the inline source maps generated by `tsc` (i.e., TypeScript compiler) appear to work.  I also tested with `babel` and node-inspector is able to pick up the source map just fine.

`//# sourceMappingURL=data:application/json;base64,...` is what is generated for both `tsc` and `babel`.
",ericvw,2015-10-01 08:46:34
401,2015-09-27 05:02:30,"https://github.com/jashkenas/coffeescript/pull/4111 would allow inline sourcemaps natively in coffeescript. I tested this with node inspector and it seems to work so this could probably be closed.
",DylanPiercey,2015-10-01 08:46:34
401,2015-09-27 05:13:50,"@michaelBenin inline sourcemaps are already in babel and @ericvw has said that this works with node-inspector.

Unless i'm missing your meaning?
",DylanPiercey,2015-10-01 08:46:34
401,2015-09-29 14:14:59,"This can probably be closed.  There are some other issues with babel's inline sourcemap merging (i.e., babel/babel#2336), but I have been using inline sourcemaps for the past month now with no problems.
",ericvw,2015-10-01 08:46:34
401,2015-10-01 08:46:34,"Cool, I am glad inline source maps work for you folks. I am closing this issue per the comment above.
",bajtos,2015-10-01 08:46:34
401,2015-11-06 18:55:21,"![screen shot 2015-10-16 at 1 32 32 pm](https://cloud.githubusercontent.com/assets/521971/11005801/0378a9ae-848e-11e5-9fbe-c93052b657b0.png)
",michaelBenin,2015-10-01 08:46:34
401,2015-12-02 13:17:57,"I am also encountering the same (similar) issue as @michaelBenin i.e. the above image is exactly the same for me. Node Inspector 0.12.3, same result for Babel 5 and Babel 6.

The only thing I can think of is that the code is using `babel-core/register` rather than generating ES5 files. Is this likely to make a difference?
",damonmcminn,2015-10-01 08:46:34
401,2015-12-22 14:01:53,"@damonmcminn I get the same thing running a similar setup.
",amcdnl,2015-10-01 08:46:34
401,2016-01-04 15:38:17,"I've found that on my personal computer which is 5 years old I have this issue. On my work computer which was issued last year it works fine. 
",michaelBenin,2015-10-01 08:46:34
400,2014-07-01 20:06:33,"Application crashes when trying to inspect global.process.
win8.1 x64, node 0.11.13 (for 0.10.\* all works fine)
@bajtos , can you confirm this for Linux?
",3y3,2015-06-14 22:50:21
400,2014-07-02 08:06:58,"It crashes the process on Mac OSX.
",bajtos,2015-06-14 22:50:21
400,2014-07-02 09:09:28,"Ok. This blocks my work on `HeapProfiler.getObjectByHeapObjectId` (I finish it, but prefer to exclude to new pr, what will be blocked by this issue). I'll inspect it and open issue in node.
",3y3,2015-06-14 22:50:21
400,2014-12-18 12:42:18,"@3y3 what's the status of this issue? Is it still a problem?
",bajtos,2015-06-14 22:50:21
400,2015-06-14 22:50:21,"Can't confirm on 0.12.0
",3y3,2015-06-14 22:50:21
399,2014-07-01 19:42:44,"Hi,

I'm current running everything on a Mac.  I've noticed that node inspector doesn't work sometimes and won't stop at the break points that I set.

I start node using: node --debug node-js/app.js

I start node inspector using: node-debug node-js/app.js

Using this command I get an error message ""Failed to open socket on port 5858, waiting 1000 ms before retrying""

This exact command worked yesterday (after I shut everything down and restarted them) so there is something I'm not getting here.

I have also tried starting node inspector using: node-inspector
This doesn't give me the ""Failed to open  socket error..."" but still doesn't stop at the break points.
",yizhao,2014-07-03 08:54:40
399,2014-07-03 08:54:40,"> Failed to open socket on port 5858, waiting 1000 ms before retrying

This means there is another Node process being already debugged.

> I start node using: node --debug node-js/app.js
> I start node inspector using: node-debug node-js/app.js

Both of the commands are starting a new node process in debug mode. Run `node-debug node-js/app.js` only, it will run `node --debug node-js/app.js` for you.
",bajtos,2014-07-03 08:54:40
398,2014-06-26 12:14:24,"Injector API:
- Removed socket connection
- Added dynamic API for injections (injection is allowed in all time
  after Injector was injected)
- Debugger protocol is extensible now!

Added v8-debug dependence
(Small binary API what allow to extend debugger protocol)
",3y3,2014-07-19 14:52:47
398,2014-06-26 12:53:58,"@bajtos , it's a very important pr, I need to finish cleanup at soon, but I have one problem - after I moved [v8-debug]() to node-inspector namespace, I missed potention to manegi it, I can't understand how it's happem ;-( Can you help me please.
",3y3,2014-07-19 14:52:47
398,2014-06-26 13:08:13,"> after I moved v8-debug to node-inspector namespace, I missed potention to manegi it, I can't understand how it's happem ;-( Can you help me please.

That happens when you move the repo between github org. I am not an owner of node-inspector org thus I can't fix the permissions for you.

@dannycoates could you please look into this? If I remember correctly, it's necessary to either fix security settings of `node-inspector` organization, or the `v8-debug` repository.
",bajtos,2014-07-19 14:52:47
398,2014-06-26 13:56:09,"Ok, my local v8-debug branch was builded on Linux.
I wait permissions and comments.
Now I start big cleanup of Profiler API -> HEAP Profiler API -> Console API.
Thanks to this changes will be possibe to get heap snapshot when debugger is stopped.
",3y3,2014-07-19 14:52:47
398,2014-06-26 15:32:11,"@3y3 repo permissions should be fixed now
",dannycoates,2014-07-19 14:52:47
398,2014-06-26 18:35:26,"@dannycoates , thank you!
",3y3,2014-07-19 14:52:47
398,2014-06-27 05:32:32,"Woohoo! All tests passing.
It's ready to review.
",3y3,2014-07-19 14:52:47
398,2014-06-27 06:07:56,"@bajtos , updating start delay for child processes to 500 makes tests more stable.
",3y3,2014-07-19 14:52:47
398,2014-06-27 07:59:06,"@3y3 I'll try to review the patch next week. There is too much work on my plate these days :(
",bajtos,2014-07-19 14:52:47
398,2014-06-27 08:37:21,"@bajtos , Ok. Can I notify watchers of #126 for testing full stack (Injector + Profiler + Heap Profiler) after I'll finish it, but before your review? (Is this good idea?)
",3y3,2014-07-19 14:52:47
398,2014-06-27 09:11:09,">  Can I notify watchers of #126 for testing full stack (Injector + Profiler + Heap Profiler) after I'll finish it, but before your review?

sure, no problem.

> Is this good idea?

As long as you make it clear that they are testing alpha-version that did not passed code review yet, then it should be fine.

My intention is to keep these changes in master for some time before releasing a new version, so that people can beta-test.
",bajtos,2014-07-19 14:52:47
398,2014-06-30 07:48:34,"Ok. My progress for this weekend:
1. Injector API is stable, it works fine in Profiler API pr
2. Profiler API pr is also ready to a review
3. HeapProfiler API works fine, but here is not implemented `getObjectByHeapObjectId`.
(This command works as `lookup` in context of heap snapshot).
HeapProfiler can work without this command, but I prefer to implement it.
Simplest implementation of this command can crash node process if HeapObjectId is link to internal v8 structure, therefor I need to inspect all valid value types that can be returned.
After this pr will be done.
4. @bajtos , if you understand that is `objectGroup` in terminology of V8, can you explain me? 
If no - I need to start big research for this issue. 
Next version of `v8-debug` will contain `mirror` method. It's a very simple way to get mirror object (70% of Console API will be deleted).
In other words I solve one problem of Console pr, but get other one - `releaseObject` and `releaseObjectGroup` needs to be implemented, because now it needs to store objects in app scope instead of inspector scope.
5. `v8-debug` works fine when app is paused, and have very simple API. It allow to resolve #396, #341, #340, (Maybe) #327, #222
",3y3,2014-07-19 14:52:47
398,2014-07-09 16:00:25,"> 1. @bajtos , if you understand that is objectGroup in terminology of V8, can you explain me? 
>    If no - I need to start big research for this issue. 
>    Next version of v8-debug will contain mirror method. It's a very simple way to get mirror object (70% of Console API will be deleted).

This is my understanding: to work around the mirror cache being cleared every time the debugger resumes execution, the front-end is manually keeping track of which mirror objects are used by the front-end. When you dump DevTools protocol communication in Chrome, you'll see messages like `releaseObjectGroup` - that's a signal to the back-end to release all mirror objects associated with the given object group. Requests like `evaluate` and `evaluateOnCallFrame` include an option `objectGroup` to indicate which object group should be used to store the mirror objects from the response. The object group is a sort of an instance of mirror cache, except there can be multiple instances and their life-time is managed by front-end.

There is also `releaseObject` method that can be used to release an individual object that is not associated with any object group.

Does it makes sense? Let me know if you have more questions.
",bajtos,2014-07-19 14:52:47
398,2014-07-13 13:19:53,"> This is my understanding: to work around the mirror cache being cleared every time the debugger resumes execution, the front-end is manually keeping track of which mirror objects are used by the front-end. When you dump DevTools protocol communication in Chrome, you'll see messages like releaseObjectGroup - that's a signal to the back-end to release all mirror objects associated with the given object group. Requests like evaluate and evaluateOnCallFrame include an option objectGroup to indicate which object group should be used to store the mirror objects from the response. The object group is a sort of an instance of mirror cache, except there can be multiple instances and their life-time is managed by front-end.

@bajtos , thanks for response, I also inspected this question and now I have a crazy idea to add to the project `InjectedScript` from webkit. But this is very complex issue, it deprecate the big part of code of current node-inspector `DebuggerClient` and `DebuggerAgent`. I'll open the new issue for this discussion. In any cases, after this commit, Profler API and HEAPProfiler API will ready to review.
",3y3,2014-07-19 14:52:47
398,2014-07-15 08:22:55,"Thanks for the updates. This week is crazy, I have way too much work to finish. I'll hope to get back to this next week. Sorry that it takes so long to land this.
",bajtos,2014-07-19 14:52:47
398,2014-07-19 14:53:01,"Landed!
",bajtos,2014-07-19 14:52:47
397,2014-06-25 02:44:51,"When recording a request from superagent, the querystring is ignored.

I believe this is the ""reverse"" case of: https://github.com/pgte/nock/issues/130

<S_CODE_TOKEN>

Outputs:

<S_CODE_TOKEN>

Expected:

<S_CODE_TOKEN>
",jeffsmale90,2014-06-25 03:55:37
397,2014-06-25 03:56:22,"Oops. Wrong project.
",jeffsmale90,2014-06-25 03:55:37
396,2014-06-24 10:04:41,"after evaluation:

<S_CODE_TOKEN>

console returns:

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/2796217-regexp-modificators-not-displayed?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",ghost,
396,2014-06-24 11:00:45,"It's a known behavior for current version. 
I marked it [here](https://github.com/node-inspector/node-inspector/blob/master/lib/convert.js#L99-L102). @bajtos ,are you ready to complicate `convert.v8RefToInspectorObject`?
@junecoder , if you are ready to create pr, I can post here small guide.
",3y3,
396,2014-06-24 13:16:49,"> @bajtos ,are you ready to complicate convert.v8RefToInspectorObject?

The answer is most likely yes, unless the code would be too difficult to understand and maintain. It's hard to tell without seeing the code/patch.
",bajtos,
396,2014-12-18 17:39:56,"@3y3 is this feature easy enough for new contributors? If it is, then please add ""Easy Pick"" label.
",bajtos,
396,2014-12-18 19:40:13,"@bajtos, this will be fixed in #450
",3y3,
396,2014-12-19 07:55:48,"@3y3 cool. Please assign issues that you are working on to yourself to make it clear there is work in progress.
",bajtos,
395,2014-06-23 18:02:59,"This was working OK on Friday and broken today on Chromium 34.0 on Ubuntu 14.04 and Chrome 35.0 on Win7 64.

I have a node program that uses readFileSync (because it's a test script and can't be async)

When I run this in node-inspector, it can step to the line that contains

<S_CODE_TOKEN>

then suddenly the Scope Variables section goes blank and the next step causes the inspector to freeze, leaving the node script hanging.

Node version is 0.10.25,  node-inspector 0.7.4
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/2786819-node-inspector-stalls-if-the-debugged-script-contains-large-buffer-variable-in-scope?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",NickTulett,
395,2014-08-18 15:07:44,"Have you any watch expression? (For example `weatherActuals`)
",3y3,
395,2014-09-11 13:07:47,"I am experiencing the same issue.

After the line `var bufIn = fs.readFileSync(path.join(__dirname, './bin/image1.jpg'));` node-inspector hangs on any breakpoint and all the closures are empty. The buffer itself is also not shown.

Moreover, other readers from file behave similarly. E.g. if I use `fs.readFile` and wrap it in a promise, it hangs at breakpoints too. If I remove the reading code and substitute it for just an empty buffer, everything seems to work fine.

It occasionally unhangs in 10 minutes after I press `continue` button.

My node version is 0.10.28, node-inspector version is 0.7.4. I am on Ubuntu 12.10.
",strelga,
395,2014-09-11 13:39:47,"> After the string var bufIn = fs.readFileSync(path.join(__dirname, './bin/image1.jpg')); node-inspector hangs on any breakpoint and all the closures are empty.

Is this true for ALL lines or only for lines in function that contains `readFileSync`?
(Your problem looks like first from ""Known issues"" - ""Be careful about viewing the contents of Buffer objects, each byte is displayed as an individual array element; for most Buffers this will take too long to render."")
",3y3,
395,2014-09-11 13:41:41,"No, for all lines after that line. Even if the breakpoint is further in the code.
",strelga,
395,2014-09-11 13:43:20,"Can you give me small example of code?
",3y3,
395,2014-09-11 13:47:55,"Here it is.

<S_CODE_TOKEN>

Even when I'm inspecting the function `resizePicMin`, node-inspector hangs.
",strelga,
395,2014-09-17 17:38:00,"I agree with @3y3, this looks like a problem with a large Buffer variable. Can you reproduce the problem with a smaller file, e.g. with an image size 1x1 pixels?
",bajtos,
395,2014-09-18 08:27:33,"@bajtos Yes, with 1x1 picture node-inspector works well.

This means, that the problem is in large Buffer variable. It hangs even when I am not trying to inspect the Buffer's internals, but when I only have this Buffer in the current scope. Is it the expected behaviour of node-inspector?
",strelga,
395,2014-09-18 15:39:24,"> Is it the expected behaviour of node-inspector?

Yes, it is :(

There may be a way how to change Node Inspector to not return grouped version of the array (i.e. instead of `[0,...,10000]`, return `[0,1000,2000,...10000]` where each element expands into a range).
",bajtos,
395,2014-09-18 15:55:30,"Is there a way not to render the buffer at all, unless the user wants to see its internals?
",strelga,
395,2014-09-18 16:02:27,"> Is there a way not to render the buffer at all, unless the user wants to see its internals?

Well, that's sort of what I proposed. Node Inspector has to return different data to the front-end, building up a virtual object-like structure that hides the Buffer data.
",bajtos,
395,2015-08-21 21:10:31,"I just got tripped up by this issue.  Some small test code to reproduce:

<S_CODE_TOKEN>

You are able to step through to 'console.log(test)' but I think node-inspector is still trying to sync up ""local""  variables on the ui so if you try to inspect test it takes a long time and it makes it look like it's not working but if you stay at this line long enough it will eventually ""catch up"".

I looked for a way to disable sync'ing of 'local' in the ui but didn't see it.  

I wouldn't say this is a bug bit it's just confusing the first time you run into it.
",ashelley,
395,2016-08-02 05:57:45,"A large array (not necessarily even buffer) would trigger the same symptom.
",summivox,
394,2014-06-22 12:58:16,"<S_CODE_TOKEN>

Can't install on windows.

npm -v:
1.4.3

node -v:
v0.10.26

Update (not even in the last version works):
npm -v
1.4.28
node -v
v0.10.32
",totty90,2014-07-01 17:49:16
394,2014-06-22 13:47:31,"This is full install log?
",3y3,2014-07-01 17:49:16
394,2014-06-22 17:48:28,"Yes
",totty90,2014-07-01 17:49:16
394,2014-07-01 17:49:16,"I am afraid this is an issue in npm, not node-inspector.

Upgrade to the latest Node and/or npm (`npm install -g npm`). If the problem persists, then fill an issue in https://github.com/npm/npm.
",bajtos,2014-07-01 17:49:16
394,2014-10-15 11:25:29,"There is still an issue... I can't use ni on windows
",totty90,2014-07-01 17:49:16
394,2014-10-15 13:13:38,"A temporary solution:
- Grab last version from https://github.com/node-inspector/node-inspector/releases
- Unzip the folder in your npm global modules, in my case is: ""C:\Users\Totty.js\AppData\Roaming\npm\node_modules\""
- Create a file in ""C:\Users\Totty.js\AppData\Roaming\npm\"" named ""node-inspector.cmd"" and fill it with this data:
  
  @IF EXIST ""%~dp0\node.exe"" (
    ""%~dp0\node.exe""  ""%~dp0\node_modules\node-inspector\bin\inspector.js"" %*
  ) ELSE (
    node  ""%~dp0\node_modules\node-inspector\bin\inspector.js"" %*
  )
- Cd into the node-inspector folder ""C:\Users\Totty.js\AppData\Roaming\npm\node_modules\node-inspector"" and run `npm install`. It should install all the deps of node-inspector.
- Run `node-inspector` now works!
",totty90,2014-07-01 17:49:16
393,2014-06-18 12:54:33,"It's not clear how you should use `node-inspector` to debug other globally installed modules.
",adaptabi,2014-12-18 12:43:50
393,2014-07-01 17:53:51,"As long as the globally-installed script is in the PATH, then you should be able to start you debugging session via

<S_CODE_TOKEN>

If you are running on windows, then you need to grab the latest master (`npm install node-inspector/node-inspector`) as the fix in da4585a28 was not released yet.
",bajtos,2014-12-18 12:43:50
393,2014-12-18 12:43:50,"da4585a was released long time ago, I am closing this issue as resolved.
",bajtos,2014-12-18 12:43:50
392,2014-06-16 19:40:06,"Because you have some open bounties, we thought you might want to display this badge in your README!
",bountysource-support,2014-06-17 15:13:39
392,2014-06-17 15:13:39,"That's a great idea! Landed as 60f349e0d, thank you.
",bajtos,2014-06-17 15:13:39
391,2014-06-16 09:18:07,"Closes #390
",3y3,2014-06-17 07:58:53
391,2014-06-16 15:32:09,"@3y3 is there a reasonably easy way how to write unit-test for this?
",bajtos,2014-06-17 07:58:53
391,2014-06-17 07:03:42,"I don't see an easy way. I try to watch unexpected exit from child process and throw error for aborting tests, but this is not works as expected.
",3y3,2014-06-17 07:58:53
391,2014-06-17 07:56:31,"I suppose you could create an instance of InjectorServer directly in the unit-test and test it in isolation without the debugger.

The fix LGTM, you can look into the idea presented above later if you have time and will.
",bajtos,2014-06-17 07:58:53
391,2014-06-17 07:58:52,"Landed as 25cba37, thank you.
",bajtos,2014-06-17 07:58:53
390,2014-06-16 07:34:31,"Steps to reproduce:
1. Checkout the current master branch (f06600a).
2. Get the simple HTTP server from [node-debug-samples](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js)
3. Run
   
   <S_CODE_TOKEN>
4. Wait for the browser to load the inspector UI and close the tab.
5. Back in the terminal,  an error is printed.

<S_CODE_TOKEN>

@3y3: could you please check what's going on? I presume `socket.end()` or `socket.destroy()` should have been called instead?
",bajtos,2014-06-17 07:58:23
390,2014-06-16 08:08:04,"I think `socket.destroy()` is needed
",3y3,2014-06-17 07:58:23
389,2014-06-16 03:38:58,"I can't get --hidden to work, this is really problematic since I use Q promises which make stepping tricky without the ability to black box q.js itself.

Q is a direct dependency at `node_modules/q/q.js`.

I've tried running node-inspector like:

<S_CODE_TOKEN>

I've even tried creating a `.node-inspectorrc` in my project folder:

<S_CODE_TOKEN>

No matter what I use when I breakpoint and step through my project I still end up stepping into q.js.
",dantman,2014-08-28 08:44:13
389,2014-06-16 12:59:31,"What is your OS, Node Inspector version, Node version?
Can you fork last Node Inspector version and use `npm test` (is it passing or failure?)
",3y3,2014-08-28 08:44:13
389,2014-06-16 20:39:25,"OSX 10.9.3
node v0.10.28
npm 1.4.15
node-inspector v0.7.4

<S_CODE_TOKEN>
",dantman,2014-08-28 08:44:13
389,2014-06-17 08:58:55,"How about `--hidden='[\""q.js\""]'`
",3y3,2014-08-28 08:44:13
389,2014-06-17 18:18:23,"<S_CODE_TOKEN>
",dantman,2014-08-28 08:44:13
389,2014-06-17 19:11:30,"@bajtos , I need help here - I can't test this in OSX shell (is there other parsing rules for args?)
",3y3,2014-08-28 08:44:13
389,2014-06-17 19:55:08,"I don't think this has to do with escaping, `--hidden '[""q.js""]'` doesn't generate a JSON error. The JSON error only happens for `--hidden ""node_modules/q""` and `--hidden='[\""q.js\""]'`, the rest just don't hide it.
",dantman,2014-08-28 08:44:13
389,2014-06-17 20:01:49,"For me `node-inspector --hidden='[\""q.js\""]'` works fine - and this is a problem (I use Power Shell).
",3y3,2014-08-28 08:44:13
389,2014-07-02 05:36:49,"I went into the code and started shoving console.log()s till I found the problem.

In lib/session.js config.isScriptHidden is passed to ScriptManager.
https://github.com/node-inspector/node-inspector/blob/master/lib/session.js#L62

However isScriptHidden does not exist as part of config so it becomes undefined.
ScriptManager expects config as a first argument which it looks for .hidden on.
As a result when it comes for ScriptManager to decide what is hidden all it has is an empty list to compare against.

Changing `config.isScriptHidden` to `config` makes --hidden start working for me.
((Though personally it doesn't seem to help much, besides not being able to hide (no domain) stuff, the nextTick nature of Q promises doesn't appear to suit itself well to stepping through.))
",dantman,2014-08-28 08:44:13
389,2014-07-02 06:17:36,"@dantman , thanks for this research. I'll fix it in soon.
",3y3,2014-08-28 08:44:13
389,2014-08-28 08:44:10,"Closed in #433
",3y3,2014-08-28 08:44:13
389,2016-01-07 18:18:23,"Still happens for me... node_modules appear in the sidebar in the inspector.
latest OS X
node v5.3.0
node-inspector: ""0.12.5""

**.node-inspectorrc**

<S_CODE_TOKEN>

![screen shot 2016-01-07 at 8 28 06 pm](https://cloud.githubusercontent.com/assets/608669/12179010/37f1ae90-b57d-11e5-826a-5b5ac079a2f0.png)
",eyalw,2014-08-28 08:44:13
388,2014-06-15 21:16:38,"Having the following files structure node-inspector fails to resolve the source path ""aaa/a.coffee"" found in the source map ""aaa/a.map"".

<S_CODE_TOKEN>

Instead of showing ""aaa/coffee"" in the files inspector, it shows ""aaa/../aaa/a.coffee"".
![screen shot 2014-06-15 at 1 52 56 pm](https://cloud.githubusercontent.com/assets/2608446/3282029/52f9271c-f4d2-11e3-81ed-399beddf7847.png)

See this [repo](https://github.com/Slava/node-inspector-issue-388) for reproduction. Steps to reproduce:

<S_CODE_TOKEN>
",Slava,2014-12-18 12:44:26
388,2014-06-15 21:32:09,"Looks like the ""sourceRoot"" property of the sourcemap is not applied correctly. It is concatenated and is not applied as a relative path.
",Slava,2014-12-18 12:44:26
388,2014-06-16 15:34:07,"Hi @Slava, thank you for reporting the issue.

Could you please try and reproduce the problem in Chrome DevTools? I suspect it's the front-end that is suppose to resolve the paths and merge `aaa/../aaa` to `aaa`.
",bajtos,2014-12-18 12:44:26
388,2014-12-18 12:44:26,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide any new details.
",bajtos,2014-12-18 12:44:26
387,2014-06-14 03:47:26,"I use mocha to run tests using it's `--watch` argument so that I can keep a node-debugger session open as I make changes to the code. When the code changes, mocha reloads and reruns the tests. When it hits a breakpoint node-inspector shows the file that changed in a new tab with a label that starts with ""[VM]"" (eg. ""[VM] BaseController.js 497""). This works great, except for the fact that I can't set breakpoints in this new tab.

Is this expected behaviour? Is there any way we can avoid this, because it makes debugging quite cumbersome.

I should add as well that we're using Traceur to transpile our source code when it's `require()`ed.
",aexmachina,2014-12-18 12:44:46
387,2014-06-16 13:32:05,"This is in enhancement list - #187
",3y3,2014-12-18 12:44:46
387,2014-12-18 12:44:46,"Closing as a duplicate of #187 
",bajtos,2014-12-18 12:44:46
386,2014-06-13 13:23:08,"Hey everyone,

I built a webserver from scratch and the architecture waits for **process.stdin** input with event listeners, using it as a wrapper for ^C, ^E etc. to correctly support the **init.d** behaviour on Linux. When debugging it with _node-debug ./sorbet/init.js_, it runs through fine for one time, boots up everything and is then exited directly.

How can I fix that?

Also, is there a way to route console.log() calls to the node-inspectors console?
",cookiengineer,2014-12-18 17:07:53
386,2014-06-16 13:23:42,"> When debugging it with node-debug ./sorbet/init.js, it runs through fine for one time, boots up everything and is then exited directly.

What is the expected behavior? Are you mean, that your app should not exit after some input dialogs, for reason of working server socket? Or you discouraged remaining tab in Chrome?

About console log - work in progress, watch #219
",3y3,2014-12-18 17:07:53
386,2014-06-16 15:28:23,"Hi @martensms, I don't understand what you are asking for. Can you provide a simple example and instructions to reproduce the problem on my computer?
",bajtos,2014-12-18 17:07:53
386,2014-12-18 17:07:53,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 17:07:53
385,2014-06-12 23:15:01,"To keep consistency across all platforms, my projects use `\n` line breaks for all files.

I've just ran node-inspector with the `save-live-edit` option in a Windows machine and whenever I save a file, it replaces all of its line breaks with `\r\n`. Needless to say, Git diff highlights all lines in the file as modified then.

Would there be a way to auto-detect the line break style of the file, or at least have an option to override the default OS line break when saving through the `save-live-edit` feature?

Thanks.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/2633466-detect-choose-line-break-style-when-saving-changes-to-disk-with-the-save-live-edit-option?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",UltCombo,
385,2014-06-16 15:37:12,"Hi @UltCombo, thank you for creating the issue, I can see how annoying this must be.

I'd say the auto-detection would be better than configuration, I can imagine different projects use different line endings.

If you can find some time to contribute this feature, here is the place to start: [lib/ScriptFileStorage.js](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js)
",bajtos,
385,2014-06-16 17:35:34,"@bajtos Thanks for the pointer!

I'm not familiar with the project but I'll take a look once I finish reading the wiki pages and have some more free time.
",UltCombo,
385,2014-06-17 14:13:47,"<S_CODE_TOKEN>

Something like this?
",3y3,
385,2014-06-17 19:49:37,"@3y3 thanks, that looks great. `:)`

The only issue I can see is when the `oldContent` doesn't contain any line separators, it will fall into the `else` expression of the ternary operator (`\n`). I've never seen a node.js script without line separators in the wild, so it might not be worth supporting such a rare corner case. But if you guys would like to support it, it might be smarter to fallback to [`os.EOL`](http://nodejs.org/api/os.html#os_os_eol) when line separator style can't be detected with your method.

Also, I was thinking about files with mixed line separators, I don't know how real that use case is or whether you would care about it.

It might be worth to add a conditional check `if (oldLineSeparator !== currentLineSeparator)` in order to avoid an unnecessary replace operation, but that is mostly micro-optimization.
",UltCombo,
385,2014-06-20 00:31:07,"My thoughts:
- Should not give much thought about inconsistent line separators, they will have to be normalized as it is impossible to map each line separator between old source and new source code, seeing as line separators can be inserted and deleted via node inspector editor.
- When the line separator style can't be determined (e.g. no line separators in old content or mixed line separators), Could default to [`os.EOL`](http://nodejs.org/api/os.html#os_os_eol). Another (slightly crazy) idea would be to use an [EditorConfig](http://editorconfig.org/) file's `end_of_line` setting, though supporting only a single property of EditorConfig seems rather unorthodox, and I wouldn't consider node inspector as an actual code editor. It would be more plausible to have a RC option which overrides the auto-detection.
- Side-effects of taking an approach similar to @3y3's: I can't think of any possible side-effect seeing as literal line separators cannot appear inside string/regex literals (and [CR/LF/CRLF are normalized to LF in ES6 template strings](https://github.com/rwaldron/tc39-notes/blob/d5ac441f29812ee269c173c277ea34be88efa02a/es6/2013-09/sept-17.md#58-line-terminators-in-template-strings-should-they-be-normalized)). Correct me if I'm wrong.

I would opt to not overcomplicate this, @3y3's solution seems sufficiently good for most use cases. Any thoughts, @bajtos?
",UltCombo,
385,2014-06-23 16:28:24,"> I would opt to not overcomplicate this

:+1: 
",bajtos,
385,2014-12-18 17:09:07,"@UltCombo @3y3 what's the status of this issue? Are any of you willing to contribute the fix?
",bajtos,
385,2014-12-18 17:15:53,"@bajtos I'm on a late deadline working nearly 24/7 atm. Looks like I won't have time to contribute on GitHub until finishing this project.
",UltCombo,
385,2014-12-18 17:16:06,"Please leave it opened. Now I debug `save-live-edit` for new frontend, and this feature is reasonable for me.
I can fix it by myself before or after releasing of 1.0.0
",3y3,
385,2014-12-18 17:28:45,"@3y3 

> I can fix it by myself before or after releasing of 1.0.0

Let's land the new frontend first, and then implement this in a new pull request.
",bajtos,
384,2014-06-11 09:22:35,"When require a user define module, If the path which ""require"" statement try first is not the right path, inspector always break on fs.statSync->binding.stat. 
",xazeng,2014-12-18 17:23:07
384,2014-06-11 10:35:09,"[This](https://github.com/node-inspector/node-inspector#how-can-i-selectively-delete-debug-session-metadata)  is not solves your problem?
",3y3,2014-12-18 17:23:07
384,2014-06-12 03:32:11,"Didn't work. I saw below info in ""Scope Variables->Local"".  It might be caused by breaking on exceptions.

# 

 <exception>: Error: ENOENT, no such file or directory '/usr/local/lib/node_modules/pomelo/bin/node_modules/cliff'
arguments: undefined
code: ""ENOENT""
errno: 34
message: ""ENOENT, no such file or directory '/usr/local/lib/node_modules/pomelo/bin/node_modules/cliff'""
path: ""/usr/local/lib/node_modules/pomelo/bin/node_modules/cliff""
stack: undefined
syscall: ""stat""
type: undefined
",xazeng,2014-12-18 17:23:07
384,2014-08-12 19:36:30,"@xazeng , can you confirm this on v0.7.4?
",3y3,2014-12-18 17:23:07
384,2014-12-18 17:23:07,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 17:23:07
383,2014-06-05 13:44:30,"I'm generating source maps using my [broccoli-jstranform](https://github.com/aexmachina/broccoli-jstransform) module, and it looks like they're being loaded - (it shows errors in the console when I try different relative/absolute paths, but not when I specify the path correctly) but node-inspector is still showing the generated code, not the source.

Here's the source code being shown for `tmp/output/src/models/Role.js`:

<S_CODE_TOKEN>

Here's the source map in `tmp/output/src/models/Role.js.map`:

<S_CODE_TOKEN>

Any help would be greatly appreciated, pretty sure I'm not doing anything stupid.
",aexmachina,2014-09-17 19:25:13
383,2014-09-02 05:32:33,"I've just run into the same problem: it appears that the sourcemaps are being loaded because if i change the path to a non-existent file, I see errors in the console.  However, the source is not being shown.

EDIT: It started working for me, so nevermind.
",cspotcode,2014-09-17 19:25:13
383,2014-09-17 17:32:17,"While I am not very familiar with the source-map file format, this looks suspicious to me:

<S_CODE_TOKEN>

It says that `Role.js` was generated from `Role.js`, i.e. from the same file. IMO the second value should be a relative path to your original source file.
",bajtos,2014-09-17 19:25:13
383,2014-09-17 19:16:22,"Sourcemaps started working for me.  I'm not sure why or how, but until the problem happens again, I'm retracting my previous comment.
",cspotcode,2014-09-17 19:25:13
383,2014-09-17 19:25:13,"Good to hear that it works for you.

I am closing the issue, feel free to reopen if the problem happens again.
",bajtos,2014-09-17 19:25:13
382,2014-06-04 15:30:31,"Clean up of #359.

/to @3y3 please review
/cc @junecoder 

Close #214.
",bajtos,2014-06-05 13:42:27
382,2014-06-05 06:04:23,"I addressed the first comment - see the new commit.

Regarding `request` vs `changelive request` - the test is checking that `DebuggerClient.request` method works correctly, therefore the name `request`. The test could use any other request that has user data, e.g. evalute or set variable value.

LGTY now?
",bajtos,2014-06-05 13:42:27
382,2014-06-05 06:50:19,"LGTY
",3y3,2014-06-05 13:42:27
382,2014-06-05 06:53:58,"Landed as 82a8f8e and f84ffbe.
",bajtos,2014-06-05 13:42:27
381,2014-06-02 21:51:07,"I have a few directory branches off my main, but they are not shown in the sources in the Chrome interface.  So I can make my main ""app.js"" file debug but nothing in any other directory.

Oddly, under sources in the Chrome interaface I do see and can access the ""node_modules""  But none others directories of mine such as 
/src

All directories have drwxr-xr-x permissions, so I doubt that's the issue.

Maybe I'm doing something wrong?
",zstew,2014-12-18 12:45:12
381,2014-06-04 08:24:05,"Node Inspector adds the following files to the file explorer:
- all files loaded by Node.js
- all .js files in the directory where the main script is
- all .js files in the `cwd` directory of the debugged process

Does your `src` fall into one of those categories?

See also #370.
",bajtos,2014-12-18 12:45:12
381,2014-12-18 12:45:12,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide any new information.
",bajtos,2014-12-18 12:45:12
380,2014-06-01 19:14:34,"this has gone to being a useful tool to a major source of frustration -- it just doesn't work for me anymore.  Not just slow loading, it seems like it never loads.  I've tried using --no-preload, but that doesn't help.  I think this started happening at some point after I updated to the latest version of node and rebuild node-inspector.  I'm running on mac os x.  I'll take any pointers as to how I can hack things to get this thing working again.

Here is my log...just hangs after spitting this out

<S_CODE_TOKEN>
",davehorton,2015-05-14 07:27:51
380,2014-12-18 17:07:12,"Hi @davehorton, can you reproduce the problem using the latest version of Node Inspector?

Can you reproduce it using the [simple server app](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js)? If not, can you share a (minimal) app that will allow me to reproduce your problem on my machine?
",bajtos,2015-05-14 07:27:51
380,2015-05-14 07:27:51,"No activity by long time. Feel free to reopen it, if issue doesn't solved.
",3y3,2015-05-14 07:27:51
379,2014-05-29 14:14:04,"How about use two frontend versions - one for stable v0.10.\* and one for latest release of v0.11.\* . It simplify using of future profiler API.
",3y3,2014-05-30 08:21:06
379,2014-05-29 15:02:07,"I don't like that idea at all, in the future we would have to support another front-end version for v0.13/14 and so on.

What are the incompatibilities between what's provided by v0.10 and v0.11? If it is too much work to implement some kind of a conversion layer that would convert data from v0.10 to the structure expected by the front-end, then I would rather disable the profiler for v0.10.
",bajtos,2014-05-30 08:21:06
379,2014-05-30 07:42:13,"The problem in v0.11, it has very unstable API. This is a structure table of Cpu from version to version:

| Function | 10.28 | 11.1 | 11.3 | 11.9 | 11.13 |
| --: | :-: | :-: | :-: | :-: | :-: |
| **ProfileNode** |  |  |  |  |  |
| GetFunctionName | + | + | + | + | + |
| GetScriptId | - | - | - | + | + |
| GetScriptResourceName | + | + | + | + | + |
| GetLineNumber | + | + | + | + | + |
| GetColumnNumber | - | - | - | **NEW** | + |
| GetBailoutReason | - | - | - | **NEW** | + |
| GetHitCount | - | - | - | **NEW** | + |
| GetTotalTime | + | + | + | **DEPRECATED** | - |
| GetSelfTime | + | + | + | **DEPRECATED** | - |
| GetTotalSamplesCount | + | + | + | **DEPRECATED** | - |
| GetSelfSamplesCount | + | + | + | **DEPRECATED** | - |
| GetCallUid | + | + | + | + | + |
| GetNodeId | - | + | + | + | + |
| GetChildrenCount | + | + | + | + | + |
| GetChild | + | + | + | + | + |
| **Profile** |  |  |  |  |  |
| GetUid | + | + | + | **DEPRECATED** | - |
| GetTitle | + | + | + | + | + |
| GetBottomUpRoot | + | **-** | - | - | - |
| GetTopDownRoot | + | + | + | + | + |
| GetSamplesCount | - | + | + | + | + |
| GetSample | - | + | + | + | + |
| GetStartTime | - | - | - | **NEW** | + |
| GetEndTime | - | - | - | **NEW** | + |
| Delete | + | + | + | + | + |
| **Profiler** |  |  |  |  |  |
| GetProfilesCount | + | + | **RENAMED** | **DEPRECATED** | - |
| GetProfile | + | + | **RENAMED** | **DEPRECATED** | - |
| FindProfile | + | + | **RENAMED** | **DEPRECATED** | - |
| SetSamplingInterval | - | - | - | **NEW** | + |
| StartProfiling | + | + | **RENAMED** | + | **RENAMED** |
| StopProfiling | + | + | **RENAMED** | + | **RENAMED** |
| SetIdle | - | - | - | **NEW** | + |
| DeleteAllProfiles | + | + | **RENAMED** | **DEPRECATED** | - |

Of course each new version has compatible frontend, but we need to update it after each unstable release. Also this structure is uncompatible with 0.10. (I think this situation will repeated with 0.12 and 0.13 )
Stable 0.10 community is a main part of users that will use profiler.

If some of this points are reasonable, then I'm ready to continue discussion,
otherwise, I will focus on support 0.11-0.12
",3y3,2014-05-30 08:21:06
379,2014-05-30 07:58:49,"I see. Basically until Node v0.11/v0.12 decides on which V8 version they will be based on, and thus stabilise the profiler API, we can't implement the conversion from v0.10, since there is no stable API to target.

In that light, I would suggest the following plan:
1. Pick a single Node v0.11 version.
2. Implement the first version of the profiler to work with this version only.
3. Report an error when the debugged process is using an unsupported version of Node. This is useful in general (think of people profiling Node v0.8 apps).

Once we have the profiler working with a single Node v0.11 version, we can decide on what to do next. With a bit of luck the V8 API will stabilise by that time.
",bajtos,2014-05-30 08:21:06
379,2014-05-30 08:21:06,"Ok. I'll follow this plan.
",3y3,2014-05-30 08:21:06
378,2014-05-26 13:13:07,"EXTENSION LOAD ERROR

<S_CODE_TOKEN>

I got the above when I tried to add the extension on chrome any help ?
",valtido,2014-12-18 12:45:44
378,2014-05-26 14:25:14,"Node Inspector is not a Chrome extension.

Could you please post the steps describing how to reproduce the problem?
",bajtos,2014-12-18 12:45:44
378,2014-12-18 12:45:44,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide an example for reproducing the issue on our machines using the latest Node Inspector version.
",bajtos,2014-12-18 12:45:44
377,2014-05-21 15:53:49,"same function defined twice, on line 74 and line 231
now node-inspector working on safari flawless
",apla,2014-06-04 14:52:27
377,2014-05-22 12:40:02,"Hi @apla, thank you for the pull request.

I run your patch on my machine and it fixes one of the problems in Safari. However, Node Inspector still does not work, I am getting the following errors in the console:

<S_CODE_TOKEN>

What version of Safari do you have? Do you have any plugins or extensions that can explain this difference?
",bajtos,2014-06-04 14:52:27
377,2014-05-22 12:48:37,"tested on Safari:
Version 7.0.4 (9537.76.4)
Version 6.1.3 (8537.75.14)

installed via npm:

<S_CODE_TOKEN>

and patched locally
",apla,2014-06-04 14:52:27
377,2014-05-22 12:56:23,"just installed node-inpector from master, patched it and no issues.

i have no extensions installed
",apla,2014-06-04 14:52:27
377,2014-06-04 14:52:27,"Strangely enough, your patch works for me now too.

Landed as 320f124, thank you!
",bajtos,2014-06-04 14:52:27
376,2014-05-20 12:42:38,"Steps to reproduce:

<S_CODE_TOKEN>

NOTE: things seem to run as expected using these steps instead:
in terminal #1, type node-inspector, to launch debug server
in terminal #2, node --debug bin/www
",dpouliot,2014-05-21 14:26:20
376,2014-05-20 15:46:05,"1. When you run `node-debug --no-debug-brk app.js`, does your application start?
2. Can you reproduce the problem using the simple http server [example](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js) and running `node-debug index.js`?
",bajtos,2014-05-21 14:26:20
376,2014-05-20 15:55:33,"1) the debugger starts, the app does not.
2) I cannot reproduce the problem using the simple http server. everything behaves as expected. 

I also update my original bug noting if I launch node-inspector in 1 terminal, then launch my express app in a separate terminal using node --debug bin/www, everything behaves as expected, both the debugger and the application.
",dpouliot,2014-05-21 14:26:20
376,2014-05-21 07:44:47,"Having an example where I can reproduce the problem would be very helpful. Can you simplify your debugged application to the extend where you can share the source code with us? 
",bajtos,2014-05-21 14:26:20
376,2014-05-21 11:51:37,"hmmm. did you try the steps to reproduce from the original comment? because the issue occurs with a freshly installed express app. if you want I can zip one up for you.
",dpouliot,2014-05-21 14:26:20
376,2014-05-21 13:19:36,"Sorry, I did not realize the description contained steps to reproduce. I have edited the text to make it more clear.

I run the steps you have described and could not reproduce the problem. Is there anything special about your environment?
",bajtos,2014-05-21 14:26:20
376,2014-05-21 13:40:06,"not that I know of, but I'm also a newbie at this, so I wouldn't be surprised if the issue was operator error. Since I can run the inspector just fine using the alternate steps I noted in my original comment, I will continue doing it that way. Feel free to close this bug if you want, and thanks for your awesome tool!
",dpouliot,2014-05-21 14:26:20
375,2014-05-19 13:59:05,"I believe I saw something about a v8 bug (maybe related to websockets?) being the cause of this, but I'd like to make sure it isn't something in my own environment before dismissing it as that.

Thanks to all for your hard work on node-inspectorand thanks in advance for any help.
",codygman,2014-05-19 14:03:52
375,2014-05-19 14:03:52,"Duplication of #334
",3y3,2014-05-19 14:03:52
374,2014-05-17 18:58:51,"Long time user, first time issue poster. Thanks very much for this wonderful application.

Lately I've not been able to evaluate expressions on the console during a breakpoint. I've been aware of and understand similar-feeling `Buffer`-related issues for some time, but lately I've not been able to evaluate any expression at all. The problem is similar in feel to the `Buffer` slowness, except the expressions never turn up at all, yet are available for inspection by hovering over the symbol in the code and in `Scope Variables` on the right:

![screen shot 2014-05-17 at 2 52 43 pm](https://cloud.githubusercontent.com/assets/218725/3005822/07b34efc-ddf5-11e3-9223-c770487cca37.png)

You see evaluating `path` in this screenshot did not produce any results. It's a primitive `string`.

Not sure at all how to debug this or what information I could provide to assist. I tried downgrading with no luck (0.7.3 -> 0.7.2). Searched this issue tracker and Google with no results.

Thank you.
",dminkovsky,2014-05-19 17:06:12
374,2014-05-18 19:02:39,"I think I'm seeing a similar problem. I have code similar to below, and when I inspect the foo variable, I get undefined. When I console.log it, or its type (typeof foo), I get the correct value. I've also tried re-assigning foo to a local var, bar, but inspection of bar still produces undefined. What's stranger is that I have two additional variable, baz and qux, in the method definition that I _can_ properly inspect. I'm baffled.

<S_CODE_TOKEN>

For what it's worth, I'm observing this within an NPM linked module, so this may be a similar to #370?
",shortstuffsushi,2014-05-19 17:06:12
374,2014-05-19 14:14:26,"@dminkovsky , I unsuccessfully try to reproduce your problem.
First of all you can help me by describing your enviroment (OS, node version...)
The second that you can do - try reproduce this problem on [simple server](https://github.com/node-inspector/node-debug-samples)
The third that can help is research - [debugging protocol](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide#reverse-engineering-the-front-end)

For me third point is very interesting
",3y3,2014-05-19 17:06:12
374,2014-05-19 16:01:19,"Stupid me—I was filtering log level in the console status bar. Sorry to bother :D. Thanks for thinking this through with me and helping me find out the problem.
",dminkovsky,2014-05-19 17:06:12
374,2014-05-19 16:07:58,"Re-opening because @shortstuffsushi's comment is still not addressed.
",dminkovsky,2014-05-19 17:06:12
374,2014-05-19 16:32:38,"Go ahead and close it out. I was able to work around it, and I don't have a good set of reproduction steps. If I see it happen again, I'll try to spin up a full working example.
",shortstuffsushi,2014-05-19 17:06:12
374,2014-05-19 17:06:12,"Cool, sounds good. Thanks.
",dminkovsky,2014-05-19 17:06:12
373,2014-05-15 14:24:34,"At first, I was trying to use JetBrains WebStorm to debug cucumber-js step definitions, however when I added a breakpoint on javascripts with Chinese file names, the debugger crashes.

I think the WebStorm utilizes node-inspector to debug node applications, so I tried directly call 'node-debug' to debug my tests. The node-inspector crashes too when I add the same breakpoint.

Because we use Chinese to define our cucumber features, in order to match the feature file names, we must use Chinese for our javascript file names as well.

I think that would be an encoding issue, can anyone help me with this?

Thanks.
",shuai-zh,2014-06-16 14:11:59
373,2014-05-15 15:11:36,"Hi @chocstarfish, thank you for reporting the issue.

First of all, WebStorm does not use Node Inspector, you should fill an issue in their bug tracker: 
http://youtrack.jetbrains.com/issues/WEB

The crash is most likely caused by #214. You can try the code in #359 to see if that pull request fixes your problem.
",bajtos,2014-06-16 14:11:59
373,2014-06-16 13:36:20,"@chocstarfish , can you submit this issue with latest version of Node Inspector?
",3y3,2014-06-16 14:11:59
373,2014-06-16 14:11:59,"@3y3 I tried the latest version, it works like a charm now, thanks!
",shuai-zh,2014-06-16 14:11:59
373,2014-10-09 14:38:36,"Hi can you describe how you managed to debug cucumber js steps with webstorm?
",johnman,2014-06-16 14:11:59
373,2014-12-09 11:10:15,"Hi - likewise I would love to know how to debug cucumberjs in webstorm!
",andrewccadman,2014-06-16 14:11:59
373,2015-08-18 14:25:56,"Is [this](https://www.jetbrains.com/webstorm/help/run-debug-configuration-cucumber-js.html) what you're looking for?
",JimiHFord,2014-06-16 14:11:59
372,2014-05-14 18:27:40,"From v0.11.13 order of script loading was changed again.
Missed test's compatibility for v0.11.(< 13)

Close #369
",3y3,2014-05-14 18:47:19
372,2014-05-14 18:48:04,"The commit was not based on the current master, I have cherry-picked it and landed in 8378efb. Thanks.
",bajtos,2014-05-14 18:47:19
371,2014-05-12 22:23:08,"I'm using the Live Edit feature of node-inspector. When I save after editing the line that the current breakpoint is on, while Paused in devtools, node-inspector exits back to the terminal. It doesn't give any errors messages but a copy of Node is still running afterwards which I have to force quite else it gives me the error `Failed to open socket on port 5858, waiting 1000 ms before retrying` when I try again. The command I'm running is `node-debug --no-debug-brk --save-live-edit=true app.js`

node-inspector v0.7.3
Node v0.10.22
Chrome 34.0.1847.132
Ubuntu 12.04
",Patrick64,2014-08-18 11:39:44
371,2014-05-13 05:58:38,"Can you reproduce this issue with [simple app](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js)?
",3y3,2014-08-18 11:39:44
371,2014-05-13 22:57:51,"Hi 3y3. I can't reproduce it in simple app. It must be something to do with my code or the framework (sails) I'm using. I'll post back if I find out anything else. Cheers.
",Patrick64,2014-08-18 11:39:44
371,2014-05-14 06:03:31,"Check that you don't use non ASCII characters.
",3y3,2014-08-18 11:39:44
371,2014-06-02 23:14:23,"I changed the encoding to US-ASCII but it still had the same problem, although other files in the project may be using UTF8 characters. I was able to recreate it by hitting a breakpoint and then adding a new line with a comment above the breakpoint line and then saving it. It would then exit and the following appears in Chrome's console. Hope that helps.

GET http://localhost:8080/helpScreen.css  View.js:348
Uncaught NetworkError: Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'http://localhost:8080/helpScreen.css'. View.js:348
WebInspector.View._doLoadCSS View.js:348
WebInspector.View._loadCSSIfNeeded View.js:328
WebInspector.View._processWillShow View.js:110
WebInspector.View.show View.js:206
WebInspector.HelpScreen.showModal HelpScreen.js:91
WebInspector.detached inspector.js:1023
WebInspector.detached Overrides.js:190
InspectorBackendClass.dispatch InspectorBackend.js:262
onWebSocketMessage Overrides.js:49

WebSocket is already in CLOSING or CLOSED state. InspectorBackend.js:176
InspectorBackendClass.sendMessageObjectToBackend InspectorBackend.js:176
InspectorBackendClass._wrapCallbackAndSendMessageObject InspectorBackend.js:170
InspectorBackendClass._sendMessageToBackend InspectorBackend.js:155
WebInspector.DebuggerModel.CallFrame.evaluate DebuggerModel.js:812
WebInspector.JavaScriptSourceFrame._resolveObjectForPopover JavaScriptSourceFrame.js:324
WebInspector.ObjectPopoverHelper._showObjectPopover ObjectPopoverHelper.js:142
WebInspector.PopoverHelper._mouseHover Popover.js:366
",Patrick64,2014-08-18 11:39:44
371,2014-06-03 08:00:52,"Here exists [pull request](https://github.com/node-inspector/node-inspector/pull/359), that can fix your problem. Can you test it?
",3y3,2014-08-18 11:39:44
371,2014-06-05 07:01:22,"@Patrick64 , try v0.7.4, this can solve your problem
",3y3,2014-08-18 11:39:44
371,2014-06-16 13:37:28,"@Patrick64 , can you submit issue with latest Node Inspector version?
",3y3,2014-08-18 11:39:44
371,2014-06-16 14:11:41,"@3y3 Sorry for the delay. I tried v0.7.4 but it was still giving me the same problem with quitting when I saved on a breakpoint. I haven't tried the pull request though. 
",Patrick64,2014-08-18 11:39:44
371,2014-06-16 14:16:25,"@Patrick64 , pull request is outdatet (now it is a part of 0.7.4). Ok... Please read Node Inspector wiki about ""debugging the debugger"", will be very helpful to get debug log for this issue.
",3y3,2014-08-18 11:39:44
371,2014-06-16 14:52:58,"Thanks @y3y I'll give it a go and see if anything pops up.
",Patrick64,2014-08-18 11:39:44
371,2014-08-12 19:18:12,"@Patrick64 , is this resolved?
",3y3,2014-08-18 11:39:44
371,2014-08-18 10:55:53,"Hi @3y3 . I gave it a go and it seems to work ok when using node-inspector from source. I must have something wrong the version I got from npm. I'll let you know if it crops up again. Thanks for your help.
",Patrick64,2014-08-18 11:39:44
371,2014-08-18 11:39:44,"Good news
",3y3,2014-08-18 11:39:44
370,2014-05-12 17:21:24,"I'm developing a module which sits in a folder outside of the application that I'm debugging. i.e.:
Application is at `/work/the-app/`
Module is at `/work/modules/the-module/`

I include the module into the app using `npm link`, which creates a symlink from `/work/modules/the-module/` to `/work/the-app/node_modules/the-module/`

When debugging with node-inspector, breakpoints set in the linked module are skipped over. Is it possible to debug the module like this?

Mac OS X Mountain Lion 10.8.5, node v0.10.26, node-inspector v0.7.3
",overlookmotel,2015-04-27 07:13:00
370,2014-05-14 14:56:00,"This is my impression:
- Node Inspector does not follow symlinks when searching for project files, thus it will populate the file tree with items from `/work/the-app/node_modules/the-module`.
- Node.js module loader does follow symlinks, thus it loads the module files with paths pointing to `/work/modules/the-module/`.

To fix the problem, the method `ScriptFileStorage.listScripts` ([source](https://github.com/node-inspector/node-inspector/blob/28560d8b0e6c571d8578a78544769c5118f1c3c5/lib/ScriptFileStorage.js#L136)) should be fixed to resolve symlinks. Unfortunately the [glob](https://www.npmjs.org/package/glob) does not provide support for that out of the box.
",bajtos,2015-04-27 07:13:00
370,2014-06-11 16:57:10,"Got the same issue with a symbolic link. Are there workarounds?
Thanks
",TomKremer,2015-04-27 07:13:00
370,2014-08-11 22:57:50,"Same issue here... (Windows)
",clintwood,2015-04-27 07:13:00
370,2014-11-29 01:14:55,"looks like this is on the road to be fixed, see: https://github.com/isaacs/node-glob/issues/135 & subsequently https://github.com/isaacs/node-glob/issues/139
",sonewman,2015-04-27 07:13:00
370,2014-11-29 09:13:30,"@sonewman thank you for linking to related glob issues. I don't think isaacs/node-glob#139 is going to solve our problem, this is what we need instead: https://github.com/isaacs/node-glob/issues/142.

Note that node-inspector is still using glob 3.x, therefore we are not affected by isaacs/node-glob#135.
",bajtos,2015-04-27 07:13:00
370,2014-11-29 13:00:37,"Ahh, I think I understand now. Basically in this case we need glob to return the resolved symlink paths, which would need to be an additional setting for Glob as it is veers from any expected behaviour. I guess this needs to be added as an option and added as a feature in `Glob.prototype._readdirInGlobStar` https://github.com/isaacs/node-glob/blob/master/glob.js#L395-L421 although in the worse case Glob could be inherited and the method over written.
",sonewman,2015-04-27 07:13:00
370,2014-12-01 09:51:34,"> @sonewman Basically in this case we need glob to return the resolved symlink paths, which would need to be an additional setting for Glob as it is veers from any expected behaviour.

Exactly.

Could you contribute the feature to glob? Issacs says in isaacs/node-glob#142 that such patch is welcome. I am afraid I won't have time to work on this anytime soon.
",bajtos,2015-04-27 07:13:00
370,2014-12-01 11:33:02,"I too am very busy. But I will see what I can come up with :)
",sonewman,2015-04-27 07:13:00
370,2015-03-06 09:58:04,"FWIW, the glob module can follow symlinks since v4.5.0 and v5.0.0, see https://github.com/isaacs/node-glob/pull/148.
",bajtos,2015-04-27 07:13:00
370,2015-03-06 14:14:40,"Nice :+1: 
",sonewman,2015-04-27 07:13:00
370,2017-02-17 02:42:24,"This is still an issue, I am not able to debug a node module that was npm link'd into the project, the project is run from docker containers. Am able to debug node.js app running in docker container with vscode and WebStorm, but not able to set a breakpoint in code that is npm link'd into the project. Let me know if you need an example dockerfile, I can write one up for you. This issue should still be open because it's still an issue. If I step into some code I set a breakpoint in the project I can get it to flow into the module code, but it is not enough. Really would be nice to set breakpoints in modules and they would hit.",gxela,2015-04-27 07:13:00
369,2014-05-12 13:03:17,"Travis CI build failed. Problem placed [here](https://github.com/node-inspector/node-inspector/blob/master/test/CallFramesProvider.js#L19)

We need to extend this expression. I propose to add [semver](https://www.npmjs.org/doc/misc/semver.html) as dependency and fix some places, where we check node version, to use semver.

The hot fix - replace `32` to `36`
",3y3,2014-05-14 18:53:42
369,2014-05-14 14:47:05,"> We need to extend this expression. I propose to add semver as dependency and fix some places, where we check node version, to use semver.

Well, the correct solution is to not depend on hard-coded script ids. We should list all scripts and find the id by the script name.

> The hot fix - replace 32 to 36

That's a good short-term fix, could you please submit a pull request?
",bajtos,2014-05-14 18:53:42
369,2014-05-14 18:53:42,"Closed by #372.
",bajtos,2014-05-14 18:53:42
368,2014-05-12 12:08:10,,3y3,2014-05-22 12:11:10
368,2014-05-22 10:52:29,"@bajtos , 
All fixed.
Rebased to HEAD.
I get `/[A-Z].test(key)` reccomendation, `process.argv.indexOf(key)` don't work as expected
I refactored `--nodejs`, but also add [Issue](https://github.com/chevex/yargs/issues/17) to yargs.

Any comments about `Detecting Windows CMD files` ?
",3y3,2014-05-22 12:11:10
368,2014-05-22 11:14:03,"@3y3 few more comments, the patch is almost good to go.

Add `Detecting Windows CMD files`: I am little bit worried about maintenance costs of keeping WIN_CMD_LINK_MATCHER up to date with whatever changes `npm` may decide to implement in the future. On the other hand, any solution is better than the current situation, where `cmd` scripts don't work at all. So as long as your solution works for you, I am happy to accept it.
",bajtos,2014-05-22 12:11:10
368,2014-05-22 11:41:47,"@bajtos , all fixed.
",3y3,2014-05-22 12:11:10
368,2014-05-22 12:11:16,"Landed, thank you.
",bajtos,2014-05-22 12:11:10
367,2014-05-11 19:57:46,"I attempted to run a script using 'node-debug test.js'

it notified tme that node-inspector was launching
it raised chrome
chrome navigated to http://localhost:8080/debug?port=5858
but received an empty response.

the console contains no information/indication that something has gone wrong.

what's up?
",lostinplace,2014-09-24 20:53:02
367,2014-05-11 19:58:26,"nevermind, localhost does not automatically map to 127.0.0.1 in OSX
",lostinplace,2014-09-24 20:53:02
367,2014-05-12 05:58:51,"Are you saying that `http://127.0.0.1:8080/debug?port=5858` resolves the problem for you?
",3y3,2014-09-24 20:53:02
367,2014-05-12 12:39:17,"that is correct.  node-debug opens chrome and directs it to localhost:8080 which renders no response, but if I manually navigate to 127.0.0.1:8080 everything works as expected
",lostinplace,2014-09-24 20:53:02
367,2014-05-12 13:04:09,"@bajtos , please mark it as bug or not. I'm ready to fix it in one minute in [this](https://github.com/node-inspector/node-inspector/pull/368) pr (Travis CI build fails - see the [reason](https://github.com/node-inspector/node-inspector/issues/369))
",3y3,2014-09-24 20:53:02
367,2014-05-21 07:27:49,"@3y3 please submit the fix in a new pull request, so that it does not have to wait until the comments in #368 are resolved.
",bajtos,2014-09-24 20:53:02
366,2014-05-06 20:30:46,"I've ran into several situations where it would be really useful to have a complete dump of what what executed within the application.  Something like:

<S_CODE_TOKEN>

I know it would create massive dumps in many cases, but there are some situations (callbacks being called twice) that are really hard to debug even with step that become much easier to debug if you have a full dump.

Thought of creating a PR for this, but honestly I don't understand enough about the debugger and how it works to do it :(.
",jdarling,2014-05-09 18:12:14
366,2014-05-09 18:12:14,"Hi @jdarling, I am afraid this is completely out of scope of Node Inspector. To be honest, I don't know myself where to start if I wanted to implement this feature. Try to ask in node mailing list: https://groups.google.com/forum/#!forum/nodejs
",bajtos,2014-05-09 18:12:14
366,2014-05-09 18:27:24,"Figured it might be, but also figured this was a good starting point.  I'll try the Node and V8 groups next time I have some free time on my hands :)
",jdarling,2014-05-09 18:12:14
365,2014-05-05 16:15:17,"Every time I start a new node-inspector I have to go in and re-enter the breakpoints.
Issue is here and it seems no solution:
https://github.com/node-inspector/node-inspector/issues/41

I use Eclipse. Maybe  there is a way that the debug breakpoints can be read from the eclipse project files?
",wyattbiker,2014-12-18 17:05:13
365,2014-05-09 18:22:42,"Can you reproduce the issue with this [simple app](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js) too?

<S_CODE_TOKEN>
",bajtos,2014-12-18 17:05:13
365,2014-12-18 17:05:13,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 17:05:13
364,2014-05-05 14:02:20,"Example of running two applications at same time:

node <path-to-node-inspector>\node-debug.js -d=6868 -p8181 appsrv.js
node <path-to-node-inspector>\node-debug.js -d=5858 -p80 appclient.js

Both open up in Chrome. Is there a way to display in the browser's tabs the app names so makes it easy to distinguish when debugging? Right now they say node-inspector.

Would be nice to have an optional -title=<title> or if no title use the app name as the title.

I already located the opener.js as the file that opens up Chrome. I wonder if Chrome has a command line option to force a title.
",wyattbiker,2014-05-05 14:09:46
364,2014-05-05 14:09:46,"Duplication #189.
",3y3,2014-05-05 14:09:46
363,2014-05-01 16:49:13,"I can debug CoffeeScript when compiled with -c-m and run in node. 

When I use the 'coffee' command the debugger recognizes the coffeescript file, but I can't do anything with it because the coffeescript is compiled on-the-fly and running in a node sandbox.

I have found a work-around: if I put a callback i containing a `debugger` statement in the file, I can force the debugger to recognize the file. From then on everything works fine and the rest of the file is debuggable:

<S_CODE_TOKEN>

The `global.stopInDebugger` switch is needed to force it to stop the first time. After that I can reset the switch.

Is there some other way to get the compiled code to become visible?
",EmbeddedMike,2014-05-09 18:17:31
363,2014-05-02 21:47:58,"I'm novice in coffe script, but I think I can help you if you post full tutorial (include shell commands and simple example source) of your problem. Are you overview other issues targetted by `coffescript` or `sourcemap`?
",3y3,2014-05-09 18:17:31
363,2014-05-09 18:17:31,"This is a duplicate of #224.
",bajtos,2014-05-09 18:17:31
362,2014-05-01 16:40:13,,EmbeddedMike,2014-05-01 16:40:50
361,2014-04-24 09:38:15,"node-inspector 0.7.3 on both Ubuntu and Windows 7.

Evaluating process.env in the Watches or in the Console shows `undefined` as the value for each environment variable.

![image](https://cloud.githubusercontent.com/assets/33569/2788007/08a61420-cb94-11e3-98c3-11603804e0d4.png)
",dandv,2014-04-24 13:09:44
361,2014-04-24 10:21:38,"At this moment node-inspector cannot display get/set properties, it's an issue of node, subscribe on [Issue 7139](https://github.com/joyent/node/issues/7139)
",3y3,2014-04-24 13:09:44
361,2014-04-24 10:22:52,"@bajtos , possible duplication of #327
",3y3,2014-04-24 13:09:44
361,2014-04-24 11:32:41,"@dandv , you can inspect `process.env.HOME` to see the result
",3y3,2014-04-24 13:09:44
361,2014-04-24 13:09:44,"Closing as a duplicate of #327. Thank you @3y3 for triaging the bug.
",bajtos,2014-04-24 13:09:44
360,2014-04-23 13:58:54,"Removed backward compatibility with config.json
Default web-host changed to '127.0.0.1'
Function config.isScriptHidden moved to ScriptManager.js
Added dependency to ScriptManager in ScriptFileStorage
",3y3,2014-05-21 13:08:02
360,2014-04-24 11:15:01,"@bajtos , Ready to review
",3y3,2014-05-21 13:08:02
360,2014-05-21 11:26:05,"@bajtos , 
default `web-host` changes removed.
Indentation fixed.
`createScriptFileStorage` added
rebased to HEAD
",3y3,2014-05-21 13:08:02
360,2014-05-21 13:08:08,"Landed, thank you.
",bajtos,2014-05-21 13:08:02
359,2014-04-22 13:59:32,"Before saving string on disc (which probably work very well), we
send it in node with ""Content-Length"" header. Probably "".length"" operator 
gives wrong number if string contains non-ascii chars (smaller, than it must be).
#214
",ghost,2014-06-04 15:31:19
359,2014-04-22 14:15:48,"Please don't open a new pull request every time you rewrite git history. See [Contributing wiki](https://github.com/node-inspector/node-inspector/wiki/Contributing#addressing-code-review-issues)  for a description of the workflow.
",bajtos,2014-06-04 15:31:19
359,2014-05-06 15:26:50,"@junecoder what's the status of this pull request? do you have bandwidth to address my comments and finish it?
",bajtos,2014-06-04 15:31:19
359,2014-05-08 11:33:30,"I don't looked on yet, but I want ^_^
",ghost,2014-06-04 15:31:19
359,2014-06-04 15:31:19,"Superseded by #382.
",bajtos,2014-06-04 15:31:19
358,2014-04-18 23:15:16,"Breakpoints don't appear to work at all for me. I can set a breakpoint in the UI (blue arrow appears), but even though execution runs through the code in question, the breakpoint is never hit. 

My environment:
- node-inspector 0.7.3
- Node 0.10.26
- Windows 7/Git Bash

To reproduce:

<S_CODE_TOKEN>

Try to set a breakpoint after that (it's an Express app), and it never hits that breakpoint.

The last version I could find that works correctly is node-inspector v0.6.2.
",nzakas,2014-12-18 12:46:19
358,2014-04-22 07:23:00,"Hi @nzakas, thank you for reporting the issue.

> To reproduce:
> 
> <S_CODE_TOKEN>

Where can I find the Express app to reproduce the problem?

Are you able to reproduce the problem with the [sample server](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js) too?
",bajtos,2014-12-18 12:46:19
358,2014-04-28 19:21:09,"I came here looking for this very issue. I am using node-inspector 0.7.3, node 0.10.26, ubuntu 14.04, and git 1.9.1.

Breakpoints with the sample server appear to work fine with both default and user defined debugger ports.

That said, I am using restify 2.6.1.
",davidgwking,2014-12-18 12:46:19
358,2014-12-18 12:46:19,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide an example for reproducing the issue on our machines using the latest Node Inspector version.
",bajtos,2014-12-18 12:46:19
357,2014-04-16 22:24:14,"I'd like to ask for a simple enhancement: 

I'm running `node-inspector` in the foreground, and in another session, I'm sending a USR1 signal to a node process I want to debug. It would help if node-inspector displayed a message confirming that it attached to the debugger, and maybe instructing the user to reload the debugger UI in the browser.
",dandv,2014-12-18 17:02:54
357,2014-04-17 13:53:31,"Is this somehow related to #289?
",bajtos,2014-12-18 17:02:54
357,2014-12-18 17:02:54,"I am closing this issue, since there were not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 17:02:54
356,2014-04-16 15:25:13,"I believe it would be nice to set the code displayed in codemirror to readonly, when --save-live-edit is set to false. If not - at least add a command-line option for setting the code editor to be readonly.
",dininski,2014-12-18 12:47:15
356,2014-04-17 13:55:14,"IMO it's ok to edit the code without saving the changes to disk. Which leaves us with the second solution - add a command-line/configuration option.
",bajtos,2014-12-18 12:47:15
356,2014-12-18 12:47:15,"I am closing this issue, since there was not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 12:47:15
355,2014-04-15 17:35:40,"I searched but didn't see this. 

I get high CPU usage from the node process when I access an array via the console when using node-inspector. Ubuntu 12.04. CPU will hit 100% for 2-5 minutes. I typically kill the process and start over. I'm working with an array that has 200 elements in it. If I access that array in the console the CPU spikes up and the debugger becomes unusable. If I actually wait and then try to expand the array, I'll get the values but only after another very long wait. 

I'm using the chrome console. 
",jcollum-hcg,2014-04-15 19:02:58
355,2014-04-15 19:02:58,"Closing this issue as a duplicate of #334. It is unfortunately a bug in V8 :(
",bajtos,2014-04-15 19:02:58
354,2014-04-15 06:50:15,"Fixes #214
",ghost,2014-04-22 14:16:41
354,2014-04-15 08:48:16,"Hi @junecoder, thank you for the pull request.
1. Add a unit-test verifying that non-ascii characters are saved correctly. Look at [ScriptFileStorage saves new content without node.js module wrapper](https://github.com/node-inspector/node-inspector/blob/a7c4fa23a46af15cf265ec4662f6340ccb40f337/test/ScriptFileStorage.js#L21-L31) for inspiration.
2. Improve the commit message to follow the 50/72 format per our [Contributing guideline](https://github.com/node-inspector/node-inspector/wiki/Contributing#git-commitspatches).
",bajtos,2014-04-22 14:16:41
354,2014-04-17 06:57:16,"okay
",ghost,2014-04-22 14:16:41
354,2014-04-22 14:16:41,"Closing in favour of #359.
",bajtos,2014-04-22 14:16:41
353,2014-04-11 16:09:13,,machty,2014-04-15 14:05:18
353,2014-04-11 19:26:29,"Readme isn't wrong see [L128](https://github.com/node-inspector/node-inspector/blob/master/bin/node-debug.js#L128)
",3y3,2014-04-15 14:05:18
353,2014-04-11 19:57:47,"@3y3 I believe that's setting up args for some subprocess; the line before demonstrates that it reads `--debug-port` from the command line.
",machty,2014-04-15 14:05:18
353,2014-04-15 14:05:18,"Well, both options are correct - you can use `node --debug={port}` or `node --debug-port={port} --debug`. Since `node --debug-port` was introduced in Node v0.11 AFAIK, I'd rather use the more widespread option `--debug` in the README.

> @machty 
> I believe that's setting up args for some subprocess; the line before demonstrates that it reads --debug-port from the command line.

I am afraid I don't understand you. The README describes an option you can pass to Node Inspector (`--debug-port={port}`) and hints that you should pass it the same value you would pass to `node --debug={port}`. Does it make sense now? If you can come up with a way how to make this more clear in the README, I am happy to accept another pull request.
",bajtos,2014-04-15 14:05:18
353,2014-04-15 14:08:23,"Let me rephrase the previous comment, I got confused into thinking this is about node-inspector part of the README, while you are changing node-debug part.

@3y3 is correct, the code he pointed to is exactly what is being executed when you run `node-debug`. It means that `node-debug --debug-port={port}` translates to node-debug executing `node --debug={port}`, which is exactly what README says.
",bajtos,2014-04-15 14:05:18
353,2014-04-15 14:15:51,"Ah, I see my confusion; I didn't realize that the `node-debug` commands were essentially translating to their equivalents on the right and I thought someone had copy-pasted incorrectly.
",machty,2014-04-15 14:05:18
352,2014-04-11 13:28:09,"https://github.com/node-inspector/node-inspector/issues/214

while problem is in v8 () I found a fix for what : 
if we remove all non-ascii characters before sending it to V8 - its give us no error and everything persist to disk normally
problem here is what V8 think like there is no ascii symbols, and after reloading it show as replacing '#'

Links:
http://dougal.gunters.org/blog/2012/03/14/dealing-with-utf-in-node-js/
https://code.google.com/p/v8/issues/detail?id=761
",ghost,2014-04-15 06:58:17
352,2014-04-11 21:17:03,"Great thanks from russian developers for this pull request ;-). It works nice.
While PR waits @bajtos review, you can do some changes:
1. Run `npm test` and you see alert about code style. Check it please.
2. Create new test that checks new changes, see [this](https://github.com/node-inspector/node-inspector/blob/master/test/ScriptFileStorage.js#L21) for inspiration.
",3y3,2014-04-15 06:58:17
352,2014-04-14 07:51:21,"@junecoder I am afraid this pull request is not fixing the underlying problem, just adding a partial workaround.

I suspect the problem is the way how we serialize requests ([code](https://github.com/node-inspector/node-inspector/blob/a7c4fa23a46af15cf265ec4662f6340ccb40f337/lib/debugger.js#L112)):

<S_CODE_TOKEN>

`data.length` returns a number of characters. However, non-ASCII characters (like Azbuka) are encoded using multiple bytes in UTF-8 encoding, therefore the real body is longer.

A quick fix is to use `Buffer.byteLength(data, 'utf8')` instead of `data.length`:

<S_CODE_TOKEN>

A better solution is to use `Protocol.prototype.serialize` (we are already using `Protocol` for parsing incoming messages):

<S_CODE_TOKEN>

Thank you @3y3 for chiming in and pointing out missing unit tests.
",bajtos,2014-04-15 06:58:17
351,2014-04-11 11:58:42,"Added new option 'nw' to node-debug. It allow to open node-inspector
with help of Node Webkit
",3y3,2014-09-19 16:52:40
351,2014-04-11 12:08:42,"Place `node-webkit` folder to `node-inspector` folder and run
`node bin/node-debug --nw text/fixtures/LiveEdit`
",3y3,2014-09-19 16:52:40
351,2014-04-18 13:47:36,"@bajtos , any comments?
",3y3,2014-09-19 16:52:40
351,2014-04-18 16:08:37,"Sorry, I didn't have enough time to look at this. Is there a reason why you depend on manual install of node-webkit? Isn't there a npm module providing node-webkit executable?
",bajtos,2014-09-19 16:52:40
351,2014-04-18 16:59:21,"Hm. If you want to set `node-webkit` as default browser, I can propose [shama/nodewebkit](https://github.com/shama/nodewebkit) (I don't see other packages)
",3y3,2014-09-19 16:52:40
351,2014-04-18 17:16:37,"I mean node-inspector should have node-webkit as a dependency.

The integration should be tighter:
1. when you close the nw window, the debugging session ends (debugged process and node inspecor are killed)
2. when the debugged process exits, the debugging session ends (nw and node inspector are killed)

I didn't run this myself yet. If the user experience in nw is pleasant, we can change node-debug to always use node-webkit as the browser. People that want to use browser can always run node-inspector in background.
",bajtos,2014-09-19 16:52:40
351,2014-04-18 18:17:45,"> when the debugged process exits, the debugging session ends (nw and node inspector are killed)

[Some](https://github.com/node-inspector/node-inspector/issues/344) exceptions can be missed
",3y3,2014-09-19 16:52:40
351,2014-04-18 19:25:52,"It works as you want now ;-)
",3y3,2014-09-19 16:52:40
351,2014-04-19 14:16:23,"@bajtos , please see the build history on travis for this PR. It's very unstable.
",3y3,2014-09-19 16:52:40
351,2014-04-22 12:08:23,"> @bajtos , please see the build history on travis for this PR. It's very unstable.

It takes quite long time to download the nodewebkit binary, that's probably the reason why the build sometimes fails.

Few more thoughts:
1. It seems the debugged process is not correctly terminated when node-webkit executable is not found. When I run node-debug multiple times, I started to get `Failed to open socket on port 5858, waiting 1000 ms before retrying`, which means there was another node process already listening on 5858.
2. The path to node-webkit executable is wrong. This is what works for me: 
   
   <S_CODE_TOKEN>
3. Command-line option `-nw` is not user friendly. node-debug should either:
   1. Always use node webkit when it is present. Use `open` when it was not found and print a warning, so that user knows there is a problem.
   2. Or provide a configuration file where the user can set what browser he wants to use (`open`, `nw`, path-to-Opera, etc.)
4. Since the nodewebkit is such a big module, it seems like a bad idea to make it a required dependency. Perhaps we can check if there is `nodewebkit` or `nw` executable available and print instructions how to install node webkit if it is not?

What's your opinion? What looks like the best solution to _you_?
",bajtos,2014-09-19 16:52:40
351,2014-04-22 12:16:50,"One more thing to consider: node-webkit starts with a rather small sized window by default, which is annoying when you restart the debugged process often. A much better solution is to preserve window size on restart ([docs](https://github.com/rogerwang/node-webkit/wiki/Preserve-window-state-between-sessions)) or at least started maximised.

The code to maximise the window should be pretty easy (see [Window docs](https://github.com/rogerwang/node-webkit/wiki/Window)):

<S_CODE_TOKEN>

The drawback of this solution is that people who want different size will be still annoyed. Example:  keep the editor on the left half of the screen and the debugger on the right half.
",bajtos,2014-09-19 16:52:40
351,2014-04-23 10:26:03,"@bajtos , please see this implementation.
I deleted `nodewebkit` from dependencies and added dialog to install it to default directory.
",3y3,2014-09-19 16:52:40
351,2014-04-25 10:45:52,"I think Node-Webkit window should remain open when node-inspector finish the session. Also it would be nice to have there a button to start it again re-using the same Node-Webkit window and maybe also to have the option to launch Node-Webkit directly and select from there the executable and params to test and start from it, but maybe it would be really a diferent project/app build on top of Node-Inspector...?
",piranna,2014-09-19 16:52:40
351,2014-04-25 11:32:22,"@ piranna, thanks for checking this pr. 
I think that your suggestion is not a part of this pr. For me re-using of browser page or node-webkit with new node debugging instance looks like nice, but I'll prefer to finish [Reload Inspector after detach](https://github.com/node-inspector/node-inspector / pull/289) before work on it. 

> option to launch Node-Webkit directly 

If I understand, you want to be able to change path to node-webkit executable and to external node-webkit config? The first is [realised](https://github.com/3y3/node-inspector/blob/bc89c2a92a46a8dca37bfed5a45b2d90506e5930/bin/node-debug.js#L49-L52), the second will be next part of discussion in this pr. 

I will be glad to additional comments.
",3y3,2014-09-19 16:52:40
351,2014-04-25 13:09:53,"> @ piranna, thanks for checking this pr.
> I think that your suggestion is not a part of this pr. For me re-using of
> browser page or node-webkit with new node debugging instance looks like
> nice, but I'll prefer to finish Reload Inspector after detachhttps://github.com/node-inspector/node-inspector%20/%20pull/289before work on it.

 Agree on that, after that is fixed it would be a good time to review this.

> option to launch Node-Webkit directly
> 
> If I understand, you want to be able to change path to node-webkit
> executable and to external node-webkit config? The first is [realised](https://github.com/3y3/node-inspector/blob/bc89c2a92a46a8dca37bfed5a45b2d90506e5930/bin/node-debug.js#L49-L52),
> the second will be next part of discussion in this pr.

I'm saying about the posibility of Node-Webkit + Node-Inspector to be
launch as an autonomous gui app (Node-Debugger?) and select there the
executable and arguments to test. Maybe should be this an external,
independent project build on top of both projects?
",piranna,2014-09-19 16:52:40
351,2014-04-25 13:53:47,"> I'm saying about the posibility of Node-Webkit + Node-Inspector to be
> launch as an autonomous gui app (Node-Debugger?) and select there the
> executable and arguments to test. Maybe should be this an external,
> independent project build on top of both projects?

Moving such advanced features to an independent project is very reasonable.
",bajtos,2014-09-19 16:52:40
351,2014-05-22 14:13:19,"@bajtos , please see current realisation.
I don't include `nodewebkit` as dependence, instead of this I added `npm` dependence.
If user want it can install `nodewebkit` with help of node-inspector.
If this is good way, I will continue to work on it.
",3y3,2014-09-19 16:52:40
351,2014-09-06 12:51:06,"Hey @3y3, I think launching node-webkit instead of the default browser is not a good idea. The node-webkit behaves differently than browsers (e.g. it always starts with a medium-sized window).

I am proposing to provide a configuration option where user can specify path to the exectutable to use instead of the default browser. That way it will be possible to use whatever browser user wants, or even a globally installed node-webkit binary.

The implementation will depend on #436 though.
",bajtos,2014-09-19 16:52:40
351,2014-09-19 08:20:12,"> I am proposing to provide a configuration option where user can specify path to the exectutable to use instead of the default browser. That way it will be possible to use whatever browser user wants, or even a globally installed node-webkit binary.

I'm agree - it's more simple and userfriendly. I'll can release it after #436 or as part of #436
",3y3,2014-09-19 16:52:40
351,2014-09-19 16:52:34,"> I'll can release it after #436 or as part of #436

It's better to keep the pull request small and focused. Let's do it in a new PR after #436 is landed.
",bajtos,2014-09-19 16:52:40
350,2014-04-10 23:01:15,"Put this code in a js file and node-inspector it.

<S_CODE_TOKEN>

Hit F8 to run until the `debugger` line and go to the console. Type `stuff.length` and see that it takes quite a few seconds to finish. If you have an array of 10K objects it'll be a minute-long delay. This was my first time using node-inspector and I was certain that the whole thing was just not working at all until I came back to an old tab and got the answer to something I asked a while ago.
",ubershmekel,2014-04-11 07:46:48
350,2014-04-11 07:46:47,"Hello @ubershmekel, thank you for reporting the issue. There is already an older issue reported for you problem - see #334. I am closing this one as a duplicate.
",bajtos,2014-04-11 07:46:48
349,2014-04-10 15:32:28,"Unable to run node-inspector on a brand new mac laptop using Chrome 34 and Safari.  Always returns back the following error:

WebSocket connection to 'ws://localhost:8080/ws' failed: Error during WebSocket handshake: Status line contains embedded null 
Overrides.js:12
",ben-powers,2014-06-16 15:47:19
349,2014-04-10 15:33:54,"Node version v0.10.25
Node inspector v0.7.1
",ben-powers,2014-06-16 15:47:19
349,2014-04-22 17:30:26,"Hi @ben-powers, thank you for reporting the issue.

I am afraid I am not able to reproduce your problem (Chrome 34, Mac OSX 10.9, Node v0.10.25). Is there anything special about your local environment?
",bajtos,2014-06-16 15:47:19
349,2014-06-16 13:34:14,"@ben-powers , have you any firewall?
",3y3,2014-06-16 15:47:19
349,2014-06-16 15:46:24,"@3y3 @bajtos Thanks for bringing this to mind to me gentleman.  Looks like it is related to software on my machine (x3watch).  
",benawabe896,2014-06-16 15:47:19
348,2014-04-10 10:56:37,"I have a huge gulpfile with complex logic and gulp fails on some of watch tasks. Is there any way to debug gulp's build process using node-inspector? 
",chicoxyzzy,2014-04-15 08:49:16
348,2014-04-10 18:33:39,"You can see [this](http://vimeo.com/77870960) tutorial, where in last part Miroslav show how to debug `mocha` tests. I think it will be helpful in debugging gulp.
Send me result.
",3y3,2014-04-15 08:49:16
348,2014-04-14 12:19:06,"@3y3 did not see tutorial yet but this works well:
`node-debug $(which gulp) task`
together with putting `debugger;` line in task to set the breakpoint
",chicoxyzzy,2014-04-15 08:49:16
348,2014-04-15 08:49:16,"I am closing the issue as the problem seems resolved.
",bajtos,2014-04-15 08:49:16
348,2016-01-15 05:37:03,"@chicoxyzzy's solution works for me. Thanks for that!
",aroc,2014-04-15 08:49:16
348,2016-07-29 02:20:51,"@chicoxyzzy's solution works for me as well, but unfortunately if I `ctrl-c` while the browser was still at a breakpoint, the gulp process will hang _forever_ and I'll have to `ps aux | grep gulp` `kill -9 <p_id>`
",k-funk,2014-04-15 08:49:16
347,2014-04-09 23:55:02,"When i am sending request on https i am gettin ssl error:ERR_SSL_PROTOCOL_ERROR.i was tried a lot of solutions but its not working
",veyselsahin,2014-12-18 12:48:01
347,2014-04-10 07:28:49,"Hi @veyselsahin, what version of Node Inspector are you running? How can I recreate your setup on my local machine and reproduce the issue?
",bajtos,2014-12-18 12:48:01
347,2014-04-11 23:27:47,"Hi @bajtos 
node-inspector@0.7.3
Thanks
",veyselsahin,2014-12-18 12:48:01
347,2014-04-22 18:02:57,"Node Inspector does not run with HTTPS by default, how did you enable it? Again, I need specific steps how I can recreate your setup on my local machine. Without that, I am not able to help you.
",bajtos,2014-12-18 12:48:01
347,2014-12-18 12:48:01,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 12:48:01
346,2014-04-09 17:55:48,"If the user has set Firefox as their ""default"" browser, then your use of opener in node-debug to open the browser is a bad choice, since node-inspector doesn't work in Firefox.  It should be smart enough to choose Safari instead, or better yet, check try running Chrome, and if that fails, then run Safari, and if that fails then print an error message saying it couldn't find and run Chrome or Safari.
",rick-kilgore,2015-01-26 04:54:34
346,2014-04-09 18:15:48,"Node Inspector runs in Chrome and Opera only.

I agree it should not use the default browser but try to find one of the supported browsers. Unfortunately that's not an easy task, as the browser can be installed in different locations (e.g. Chrome vs. Chrome Canary), not to mention different platforms (Windows, Linux, OSX).

I suppose the most reasonable approach would be to add a configuration option (that can be stored in ~/.node-debugrc) allowing the user to specify a full path to the browser to run. Alternatively using an environment variable instead of an rc file.
",bajtos,2015-01-26 04:54:34
346,2014-04-09 18:22:54,"@bajtos , also there is third way - integrate node-inspector with node-webkit ;-)
",3y3,2015-01-26 04:54:34
346,2014-04-09 18:27:09,"> integrate node-inspector with node-webkit

Good point, that would be awesome. Not sure how much time it would take?
",bajtos,2015-01-26 04:54:34
346,2014-04-09 18:56:17,"> Good point, that would be awesome. Not sure how much time it would take?

I'll check this question on the weekends.
",3y3,2015-01-26 04:54:34
346,2014-05-27 05:40:56,"Hi, is this feature implemented? For some reasons, I need to set IE as default browser, but `node-debug` always open IE is annoyed - IE is not supported.
",lijunle,2015-01-26 04:54:34
346,2014-05-27 06:06:01,"@lijunle not yet. We we most likely change node-debug to use node-webkit instead - see #351.
",bajtos,2015-01-26 04:54:34
346,2014-07-22 15:36:04,"Hi there, I would to see this as well. I don't want to use Chrome as my default browser. I tried the -nw arg as a workaround but got nowhere. ;=)
",broonage,2015-01-26 04:54:34
346,2014-12-18 17:16:38,"The experiment with node-wekbit did not go very well. I am proposing to implement the simplest option - add a configuration option that can be stored in ~/.node-debugrc or ~/.node-inspectorrc and that would specify what browser should be opened.

I won't have time to work on this myself, are there any volunteers to contribute this feature?

Pointers:
- Config loader: https://github.com/node-inspector/node-inspector/blob/92c35ed9fd7e4abdc3a0a8dd818b63d40a9f85e4/lib/config.js
- The code opening the browser: https://github.com/node-inspector/node-inspector/blob/92c35ed9fd7e4abdc3a0a8dd818b63d40a9f85e4/bin/node-debug.js#L196-L198
",bajtos,2015-01-26 04:54:34
346,2015-01-23 10:25:02,"See #528 for a better implementation (in progress).
",bajtos,2015-01-26 04:54:34
345,2014-04-09 09:08:40,"Regardless of what is your default browser `node-debug` always open the inspector page on safari :-1: 
That sucks
",adaptabi,2014-12-18 17:26:06
345,2014-04-09 14:44:33,"Hi @dotnetwise, thank you for reporting the issue.

Could you please try the following?
1. Open your terminal app
2. Run `open https://github.com`

If the URL is opened in Chrome, then there is indeed a problem in Node Inspector. We are using the [opener](https://github.com/domenic/opener) module for launching the browser, please fill an issue there.

If the URL is opened in Safari, then I am afraid Chrome is not correctly configured as the default browser.
",bajtos,2014-12-18 17:26:06
345,2014-04-09 16:35:10,"It is opening in Chrome.
I think the problem is that I am running `node-debug` under `sudo`, so not loading user's default browser preferences
",adaptabi,2014-12-18 17:26:06
345,2014-04-09 16:45:17,"> I think the problem is that I am running node-debug under sudo, so not loading user's default browser preferences.

That would explain why it is happening. I am afraid there isn't much Node Inspector or opener can do to fix that.
",bajtos,2014-12-18 17:26:06
345,2014-04-09 20:02:59,"Yes you can, if you'd use [`node-open`](https://github.com/pwnall/node-open) package and apply this [`pull request`](https://github.com/pwnall/node-open/pull/15)
",adaptabi,2014-12-18 17:26:06
345,2014-04-10 08:31:28,"[opn](https://www.npmjs.org/package/opn) may be a better choice than node-open.
",bajtos,2014-12-18 17:26:06
345,2014-09-01 09:14:00,"Hi,
I had the same problem and it is the root users default browser is safari

opening chrome via terminal as follows
sudo -u root /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome

then selecting chrome as default browser when prompted sets the default for root.

from:
http://apple.stackexchange.com/questions/89599/how-would-i-set-the-default-web-browser-for-the-root-user

Ian
",loonytoon,2014-12-18 17:26:06
345,2014-09-01 09:52:16,"@loonytoon thanks for sharing the solution :thumbsup: here
",bajtos,2014-12-18 17:26:06
345,2014-09-01 09:53:25,"you're welcome
",loonytoon,2014-12-18 17:26:06
345,2014-12-18 17:26:06,"I am closing this issue as a duplicate of #346.
",bajtos,2014-12-18 17:26:06
344,2014-04-08 16:13:42,"While using node-inspector and having ""Pause on uncaught exception"" option activates, the debugger won't stop at an exception of type ""TypeError: undefined is not a function"".
### How to reproduce:
1. Start node-inspector
2. Create a code that will cause a ""TypeError: undefined is not a function"" exception.
3. Start debugging the code
4. Activate the ""Pause on uncaught exceptions"" option
5. Run the whole code
### Expected result:

The debugger pauses at the line where the exception is going to occur.
### Actual result:

The debugger doesn't pause at the line where the exception occurs. The terminal shows that the exception occurred.
### Tested under:

node v0.11.12
node-inspector v0.7.3
mac os x v10.8.5
chrome v33.0.1750.152
### Code used for my tests:

<S_CODE_TOKEN>
### Notes:

I tested with another type of uncaught exception and the debugger did pause. It was a ""TypeError: Cannot read property 'prop' of undefined"" exception caused by code: `var undef; undef.prop;`

I'm not sure if this is a node-inspector bug or node bug.
",tgirardi,2014-08-11 14:58:49
344,2014-04-08 17:33:42,"Could you try to reproduce the problem with Node v0.11.3? That's the version where my fix for uncaught exceptions landed.
",bajtos,2014-08-11 14:58:49
344,2014-04-08 19:21:09,"Yes. It's also present in v0.11.3
",tgirardi,2014-08-11 14:58:49
344,2014-04-09 07:53:15,"I can reproduce the problem too.

I tested the same script in Chrome, the execution stops on the exception correctly:

<S_CODE_TOKEN>

It looks more like a node bug, feel free to fill an issue in joyent/node project. I am afraid I don't have enough time to investigate the problem more.
",bajtos,2014-08-11 14:58:49
344,2014-04-09 16:38:01,"I'll report the issue on node project. Thanks for your help
",tgirardi,2014-08-11 14:58:49
344,2014-08-09 07:10:15,"@bajtos It would be great if you had some time to review my comments in https://github.com/joyent/node/issues/7439 about this problem. Thank you!
",misterdjules,2014-08-11 14:58:49
344,2014-08-09 18:25:33,"> @bajtos It would be great if you had some time to review my comments in
> joyent/node#7439 about this problem.

I'm on vacation now, I will review your comments early next week. Thank you
for looking into this issue!
",bajtos,2014-08-11 14:58:49
344,2014-08-09 20:57:12,"The issue reason is:

<S_CODE_TOKEN>

in [lib/BreakEventHandler](https://github.com/node-inspector/node-inspector/blob/master/lib/BreakEventHandler.js#L63-L66). We don't have this source (`natives runtime.js`), therefor we call continue.

I think that the best way to resolve this issue is a new strategy for receiving a scripts:
After debuggerClient connection we call

<S_CODE_TOKEN>

Now we have scripts list without sources. When frontend will request source of any script, we will send to app:

<S_CODE_TOKEN>

This way is reasonable for #289.
@misterdjules , are you ready to release it, or you leave it for me?
",3y3,2014-08-11 14:58:49
344,2014-08-10 06:31:41,"@bajtos Sorry for that and enjoy your vacation :) There's no hurry, I just wanted to make sure that the result of my investigation don't get lost in another issue. Thank you!
",misterdjules,2014-08-11 14:58:49
344,2014-08-11 13:07:50,"@3y3 a simpler solution works well for me - see #418.

The reason why my solution works: the stack trace included in `Debugger.paused` event sent to the front-end contains `scriptType` flag for every script on the stack. The internal script `native runtime.js` has `scriptType: 0`, while regular scripts have `scriptType: 2`. Apparently the front-end filters out frames with `scriptType: 0` and thus everything works well even with the current implementation.
",bajtos,2014-08-11 14:58:49
343,2014-04-08 13:03:42,"I can't seem to get node-inspector to work on windows
I'm trying to debug this script:

app.js

<S_CODE_TOKEN>

I tried following things, with and without elevated permissions:

<S_CODE_TOKEN>

In any event, 
If I navigate in chrome to `http://localhost:8080/debug?port=5858`  
I  just get a blank screen with an empty toolbar above and a grey toolbar below.

If I look into the devtools, it seems like chrome is waiting for the websocket to establish, the `ws://localhost:8080/ws?port=5858` keeps 'pending'

Versions:

<S_CODE_TOKEN>

I'm running chrome with `--disable-extensions` 

I can't seem to find any error logs, so I'm not sure where to go from here.
How I can fix / debug this ?

Copy from:
http://stackoverflow.com/questions/22932748/node-inspector-blank-screen-on-windows
",helmus,2014-04-08 16:38:15
343,2014-04-08 13:16:57,"Hm... Can you run tests in node-inspector folder?
",3y3,2014-04-08 16:38:15
343,2014-04-08 13:22:25,"`v0.7.4` : here is the output, looks like we might have a winner? :

<S_CODE_TOKEN>

I ran them again and now they pass...
",helmus,2014-04-08 16:38:15
343,2014-04-08 13:33:35,"Sorry, but I need more information =). Please use this [instruction](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide#reverse-engineering-the-front-end) to collect more logs.
",3y3,2014-04-08 16:38:15
343,2014-04-08 13:36:47,"Here is a .har file 
https://drive.google.com/file/d/0B6_mev-E_K2QdHY5OXJWaTFmeDA/edit?usp=sharing

You can import that in fiddler or an other tool to visualize all the network traffic. 
I'll take a look at those instructions now.
",helmus,2014-04-08 16:38:15
343,2014-04-08 13:44:30,"Ok so i enabled `dumpInspectorProtocolMessages`
I get this singular message in the console:

`frontend: {""method"":""Worker.canInspectWorkers"",""id"":1}`
",helmus,2014-04-08 16:38:15
343,2014-04-08 13:47:25,"Try close fiddler, before connecting to node-inspector.
I was able to reproduce your error after start Fiddler
",3y3,2014-04-08 16:38:15
343,2014-04-08 13:47:51,"I'm not running with fiddler, that .har log is from the dev tools. :)
",helmus,2014-04-08 16:38:15
343,2014-04-08 14:02:22,"Uhm! Have you any other http or tcp sniffers enabled? Are you have problems with other applications, that uses web-sockets?
(I reproduce blank screen each time that fiddler is enabled)
",3y3,2014-04-08 16:38:15
343,2014-04-08 14:41:04,"> <S_CODE_TOKEN>

A common reason for Node Inspector UI not showing up is when there are many files in the project being debugged, as the inspector backend is crawling the file system to list all files where you might want to set a breakpoint even before they are loaded.

Try to run node-inspector with `--no-preload` option. Does it make any difference?

However: since the problem seems to be in the websocket connection, `--no-preload` probably won't help here. Do you have any plugins and or system services (antivirus, firewall) that could be intercepting websocket connections?
",bajtos,2014-04-08 16:38:15
343,2014-04-08 16:21:08,"I uninstalled ""Ad-Aware, Free Antivirus+"", and now it works, sorry guys, I feel really dumb, can be closed.
",helmus,2014-04-08 16:38:15
343,2014-04-08 16:38:15,"No problem, I am glad you have figured it out.
",bajtos,2014-04-08 16:38:15
343,2015-04-07 02:12:31,"Getting same issue. don't have any funky plugins installed...
",rochal,2014-04-08 16:38:15
342,2014-04-08 06:55:12,"Pass the fs.readFile encoding as a string instead in an options object.

The options object was introduced by Node v0.10 and is not available in
Node v0.8. When called with the options object, Node v0.8 calls the
callback with a Buffer instead of a string, which causes type error
`content has no method 'replace'`.

/to @3y3 please review

Close #335.
",bajtos,2014-04-08 07:23:04
342,2014-04-08 07:22:04,"@bajtos , ready to merge.
",3y3,2014-04-08 07:23:04
341,2014-04-05 21:17:29,"Not sure how realistic this is as I'm not familiar with the internal structure of node.js wrt http requests.

But if it were possible for node-inspector to implement something like Chrome's Network tab for the debugging of outgoing/incoming http requests this would be very powerful.
",go1dfish,2015-06-28 11:33:51
341,2014-04-07 08:40:07,"It is doable, two things are needed:
1. Scaffolding for injecting code to the debugged process and maintaining a data connection between the injected code and Node Inspector backend. The work is already in progress - see #336.
2. The injected code that will intercept HTTP requests and send them to Node Inspector backend. Plus a bit of code in the Node Inspector backend to convert & forward the data to frontend. See the implementation in [bugger/lib/probes/network.js](https://github.com/jkrems/bugger/blob/master/lib/bug-script/probes/network.js) for inspiration.
",bajtos,2015-06-28 11:33:51
341,2014-06-16 13:41:50,"#336 is closed - it's ready to developing. See #337 for inspiration.
",3y3,2015-06-28 11:33:51
341,2014-09-05 17:48:35,"+1
",otmezger,2015-06-28 11:33:51
341,2014-09-09 05:58:36,"+1
",francisbyrne,2015-06-28 11:33:51
341,2014-12-18 15:58:33,"+1
",roadmanfong,2015-06-28 11:33:51
341,2015-01-06 16:33:19,"+1
",hshepherd,2015-06-28 11:33:51
341,2015-02-05 17:20:29,"+1
",petercsoka,2015-06-28 11:33:51
341,2015-03-10 21:38:07,"Some older implementation open for grabs/porting:
- The injected code: https://github.com/jkrems/bugger/blob/master/src/bug-script/probes/network.coffee
- The inspector/agent side: https://github.com/jkrems/bugger/blob/master/src/domains/Network.coffee
",jkrems,2015-06-28 11:33:51
341,2015-03-10 21:52:22,":+1: 
",marcominetti,2015-06-28 11:33:51
341,2015-03-10 21:53:12,"(Sorry, didn't see that the file was actually already linked above.)
",jkrems,2015-06-28 11:33:51
341,2015-05-27 04:15:23,"The newer / nicer version is here: https://github.com/buggerjs/bugger-agents/blob/master/lib/agents/network.probe.js

Working on porting it now. But just in case I get distracted and someone else wants to take this on.
",jkrems,2015-06-28 11:33:51
341,2015-06-01 08:46:09,":+1: 
",marcominetti,2015-06-28 11:33:51
341,2015-06-02 10:33:24,"Hi @jkrems,

I was building a web scraper and I have a read world scenario to try this out. Can you please help me how to merge your code with my copy of module to try this? (I'm assuming I can't do a git cherry-pick or something like that because the module itself is not a git repo)

Alternatively, the repo where I want to try this is here (I know my code sucks) https://github.com/atif089/RandomActsOfTech/tree/master/InstaUserScraper
",atif089,2015-06-28 11:33:51
341,2015-06-28 11:33:49,"Closed in #677
",3y3,2015-06-28 11:33:51
340,2014-04-04 13:43:08,"Since launching my article on HTML5Rocks on [Debugging Asynchronous JavaScript with Chrome DevTools](http://www.html5rocks.com/en/tutorials/developertools/async-call-stack), I've had more than a few people ask me if node-inspector will support it.

So a heads up about this new feature in Canary. I poked around node-inspector code and it looks like if you update from upstream that Node folks may also benefit from full async call stacks.

Let me know if you have an answer on whether it'll work or not.
## <bountysource-plugin>

There is a **[$200 open bounty](https://www.bountysource.com/issues/1472391-support-for-async-js?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** on this issue. Add to the bounty at [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",pearlchen-old,
340,2014-04-04 14:09:27,"Hi @pearlchen, thank you for opening the issue. Your article was great, I shared it myself too :)

For the record, here are the two Chrome pull requests implementing the feature in DevTools:

  https://codereview.chromium.org/74063002/
  https://codereview.chromium.org/80383004/

There are two tasks needed to get this working in Node Inspector:
1. Pull front-end changes from Chromium, that should be easy.
2. Collect async (long) stack traces in the debugged Node.js process and send them to the Node Inspector process on break event. I looked at the DevTools changes and don't see how to reuse their code in Node Inspector. There are Node modules like [longjohn](https://github.com/mattinsler/longjohn) that can collect long stack traces, which is good. The hard part is getting the long stack trace from the debugged process, I don't think the V8 debugger protocol can be extended to do this.

Since I won't have bandwidth to implement this anytime soon, the answer is this: the feature should be doable, but won't be implemented in the near feature.
",bajtos,
340,2014-04-04 14:13:02,"Thanks for the quick response. I'll tell anyone curious to keep an eye on this space or try to make a PR. Cheers!
",pearlchen-old,
340,2014-04-07 10:28:10,"I think, at first it's a enhancement for NodeJS not for Node Inspector
",3y3,
340,2014-04-19 12:43:12,"If you guys don't mind, I'll be working on this. I'm gonna follow bajtos comment. I'll look for an easy way to get the long stack traces from the node process. If I don't find anything I'll just use the repl to create a new error and get the stack trace.
",alFReD-NSH,
340,2014-04-19 14:19:15,"@alFReD-NSH , good luck. Are you ready to work with C++? :-)
",3y3,
340,2014-04-19 14:36:17,"I don't think I would need to. Although I know C++, but a little rusty.
",alFReD-NSH,
340,2014-04-19 16:39:28,"@alFReD-NSH , How I can understand your plan B is `c` function of this small example?

<S_CODE_TOKEN>
",3y3,
340,2014-04-20 02:21:54,"Well you should see how [longjohn](https://github.com/mattinsler/longjohn/blob/master/lib/longjohn.coffee) does it. Whenever an async function is queued, I create an error and keep the stack trace of it(or the call site array). Whenever an error is created after when the callback of that async function is called, I'll attach previous stack trace to that error.

There's couple of different tools that can help me achieving this beside longjohn:
- [trycatch](https://github.com/CrabDude/trycatch)
- [hookit](https://github.com/CrabDude/hookit)
- [continuation-local-storage](https://github.com/othiym23/node-continuation-local-storage)
- [node v0.11.12 Async Listener](http://nodejs.org/docs/v0.11.12/api/tracing.html#tracing_async_listeners) and it's [polyfill](https://github.com/othiym23/async-listener)

I'll most probably use continuation-local-storage or async-listener, but I'll check other modules for possible issues and bugs.
",alFReD-NSH,
340,2014-04-22 05:57:54,"@alFReD-NSH 

> If you guys don't mind, I'll be working on this.

Great! Don't hesitate to ask for help if you get stuck.

> Whenever an error is created after when the callback of that async function is called, I'll attach previous stack trace to that error.

Beware:

> The stack trace mechanism used for built-in errors is implemented using a general stack trace collection API that is also available to user scripts. The function
> 
> <S_CODE_TOKEN>
> 
> adds a stack property to the given error object that will yield the stack trace at the time captureStackTrace was called. **The reason for not just returning the formatted stack trace directly is that this way we can postpone the formatting of the stack trace until the stack property is accessed and avoid formatting completely if it never is.**

Source: https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi. Emphasis is mine.

I remember reading somewhere that formatting of the stack trace is rather expensive. You should probably keep a list of errors instead of a list of stack traces.
",bajtos,
340,2014-05-24 17:20:11,"Sorry this this is taking long. I'm in the middle of my exams. But soon they will finish I will get back on this. Anyway, I realized stacktraces are useless, because we need more than just file name, column and function. We need the scriptId and the scopes. We can't use v8 api doesn't for the past events to fix this. So I what I think will is to make our own backend for getting all the stuff we need using `v8::Debug` api, same as the backend in webkit. This will include getting the backtraces and the variables, scopes, evaluation.  This means a lot of work. Though webkit already has a lot of javascript for it's backend that we can copy and some C++ that is easy to port. We can also fix #334 and #146 on the way.

Now to communicate with our backend, we can't use the node net module, because it won't be accessible when javascript running or paused. We either have to have a C++ server that remains responsive and somehow works when javascript is running/paused(which i have no idea how to implement it) or we can use `debuggerClient.evaluateGlobal` to call our backend function.
",alFReD-NSH,
340,2014-05-25 14:37:29,"Possibly related:
- #336 a communication bridge between app and debugger.
- joyent/node#7473 debugger: overview and improve. ""we will be using a separate Isolate / thread for JS debugger extension.""
",bajtos,
340,2014-05-25 15:47:58,"Separate thread will definitely fix communicating with the injected debugger back-end. I assume #336 also suffers from not working when javascript is running or it is paused right?
",alFReD-NSH,
340,2014-05-26 06:52:21,"> I assume #336 also suffers from not working when javascript is running or it is paused right?

Yes, that's a good point.

/cc @3y3 
",bajtos,
340,2014-05-26 08:15:18,"#366 not working when debugger is paused - I don't need this feature in injector now.

**About discussion**
I think that custom debugger is a good idea - for example it's only way to realise getting random free port on `SIGUSR1` and `process._debugProcess` (it will be very useful for debugging child_processes, joyent/node#7404). Other important feature - extensible debugger protocol (new commands and events, like `profile`, `snapshot`, `console`). **BUT!** I don't think that this is good idea to create this debugger as part on Node Inspector, I think this is a part of Node (not of joyent/node#7473). 

**About Webkit sources**
In context of Node JS it's a bad idea to translate C++ from webkit. Webkit sources can give some experience, but have big scope of incompatible classes (we need to translate all webkit runtime in this way).

**For conclusion**
IMHO new customisable gebugger for Node JS is a good idea - it allow me to miss Injector API dependence in Node v0.12 - in other words I'm ready to collaborate on this question, if it will be approved by Node community

PS: can you give me link, where I can read that is `/cc`
",3y3,
340,2014-11-19 13:47:25,"So many months after, and still no support?
",adaptabi,
340,2015-01-16 09:32:22,"Hey, guys, I was just wondering what was going on with this feature?

If this is not going to be implemented soon, does anyone know how I could get node-debugger to work with [q](https://github.com/kriskowal/q)? Would I just have to set a break point at every line of code, or is there an easier way? And would that way even work?
",zwhitchcox,
340,2015-05-10 22:28:05,"Bump. Any news on this? 
",Chris911,
340,2016-08-06 10:48:15,"+1, this would be awesome!
",aogriffiths,
340,2016-09-12 09:59:23,"Is this already implemented? we can see the 'async' in debugger in node-inspector, but that doesn't seem to work
",AnandNidamanuru,
340,2016-09-14 14:45:04,"FWIW, if you are using a recent Node v6 versions, you can run `node --inspect` to launch a new built-in debugger based on DevTools-backend from Chromium. I think that one supports async stack traces.
",bajtos,
339,2014-04-02 18:24:55,"Attempted to update my install of node-inspector from 0.7.0 to 0.7.2 and the install faild with a dependency error:

<S_CODE_TOKEN>

Same error happens when installing (vs. updating). Command used to install was: `sudo npm install -g node-inspector`

Attempted to re-install v0.7.0 and have the same problem. I currently do not have, nor can install node-inspector.

Full install log is below:

<S_CODE_TOKEN>
",rickhuizinga,2014-04-02 20:05:47
339,2014-04-02 18:33:33,"Please update your Node and/or npm to a more recent version.
",bajtos,2014-04-02 20:05:47
339,2014-04-02 18:38:51,"@bajtos Thanks. I'm updating right now after finding the cause of the issue: https://github.com/npm/npm/issues/4587#issuecomment-39183795

I'll close this issue in a few moments, once I have confirmed that updating `node >= v.0.10.16` & `npm > v1.3.6` fixes the problem.
",rickhuizinga,2014-04-02 20:05:47
339,2014-04-02 20:05:47,"Confirmed that updating node to `v0.10.26` and npm to `v1.4.3` fixes this problem, as described here: https://github.com/npm/npm/issues/4587#issuecomment-39183795
",rickhuizinga,2014-04-02 20:05:47
338,2014-04-02 10:51:54,"Not finished (needs HeapGraph, GarbageCollector)
Implemented:
HeapProfiler.getProfileHeaders
HeapProfiler.startTrackingHeapObjects
HeapProfiler.stopTrackingHeapObjects
HeapProfiler.getHeapSnapshot
HeapProfiler.removeProfile
HeapProfiler.clearProfiles
HeapProfiler.takeHeapSnapshot
HeapProfiler.addProfileHeader
HeapProfiler.addHeapSnapshotChunk
HeapProfiler.finishHeapSnapshot
HeapProfiler.reportHeapSnapshotProgress
HeapProfiler.lastSeenObjectId
HeapProfiler.heapStatsUpdate

Related: #185
",3y3,2014-11-27 12:00:47
338,2014-04-02 13:38:36,"Thank you for the pull request. Where is the native code in heap_profiler coming from?

I would prefer to keep most of the (cpu & heap) profiler implementation in an external module, there are already few of them:
- https://github.com/bnoordhuis/node-profiler
- https://github.com/dannycoates/v8-profiler and the forks https://github.com/c4milo/v8-profiler, https://github.com/strongloop/strong-cpu-profiler
- https://github.com/lloyd/node-memwatch

It's always better to improve an existing module than to start a new one. That way there is a single well-maintained module with many contributors, as opposed to many one-man projects that quickly outdate.

If none of the modules are suitable and/or the maintainers are not willing to accept your patches, then we can create a new module project in node-inspector organisation, e.g. github.com/node-inspector/v8-profiler.

Then the code in Node Inspector should be a thin wrapper around that module, injecting the module into the debugged app and sending back the snapshots created by the profiler.
",bajtos,2014-11-27 12:00:47
338,2014-04-02 13:52:22,"> It's always better to improve an existing module than to start a new one. That way there is a single well-maintained module with many contributors, as opposed to many one-man projects that quickly outdate.

I've seen them all, but they do not work as it should:
`node-memwatch` and `node-profiler` not what we need
`strong-cpu-profiler` is only cpu.
`v8-profilers` very outdated.

Binaries in PR collect expirience of `strong-cpu-profiler`, `v8-profilers` and all their forks.

> If none of the modules are suitable and/or the maintainers are not willing to accept your patches, then we can create a new module project in node-inspector organisation, e.g. github.com/node-inspector/v8-profiler.

I was waiting for this proposal. Please create this project and I'll create PR for him.
",3y3,2014-11-27 12:00:47
338,2014-04-02 13:59:10,"AFAIK c4milo/v8-profiler was updated for Node v0.10 and is used by [bugger](https://github.com/jkrems/bugger), thus it shouldn't be that much outdated.

Let's ask c4milo to move c4milo/v8-profiler to node-inspector/v8-profiler and ask Danny Coates to give us permissions to publish it as https://www.npmjs.org/package/v8-profiler. I can send the e-mails. Any objections?
",bajtos,2014-11-27 12:00:47
338,2014-04-02 14:00:39,"> Let's ask c4milo to move c4milo/v8-profiler to node-inspector/v8-profiler and ask Danny Coates to give us permissions to publish it as https://www.npmjs.org/package/v8-profiler. I can send the e-mails. Any objections?

I will wait the result.
",3y3,2014-11-27 12:00:47
338,2014-04-02 14:03:33,"@bajtos , Keep in mind what v8-profiler has js API and PR needs only .cc files from him.
",3y3,2014-11-27 12:00:47
338,2014-04-02 14:12:17,"@bajtos , also is important:
V8 less that v3.22 has uncompatible API with node-inspector front-end. This stops me from support NodeJS v0.10
",3y3,2014-11-27 12:00:47
338,2014-04-02 14:14:34,"> V8 less that v3.22 has uncompatible API with node-inspector front-end. This stops me from support NodeJS v0.10

That's rather unfortunate. I would hope it is possible to implement conversion of v0.10 snapshots to v0.12 snapshots, but let's not worry about that now.
",bajtos,2014-11-27 12:00:47
338,2014-10-16 12:33:28,"@bajtos , ready to review
",3y3,2014-11-27 12:00:47
338,2014-11-10 08:57:06,"I tried out the heap profiling, it seems to mostly work ok even in Node `v0.10`.

Few issues I encountered:

<S_CODE_TOKEN>

This is reported when I hover my mouse over an entry in the object tree. Note that the same entry can be expanded and UI show all data.

![screen shot 2014-11-10 at 9 54 00](https://cloud.githubusercontent.com/assets/1140553/4973177/2aed8e26-68b7-11e4-9348-3703a3c6bb2f.png)

<S_CODE_TOKEN>

This is reported when I double-click on the node `Buffer @2751595108`.

---

To speed things up, I am ok with landing this pull request without those two issues fixed (but please address my line comments first). We should fix them before releasing v0.8 though.
",bajtos,2014-11-27 12:00:47
338,2014-11-25 21:49:04,"All fixed (also console and error message)
",3y3,2014-11-27 12:00:47
338,2014-11-26 08:44:16,"The code LGTM, please squash the commits and update the commit message before landing.

When I hover my mouse over an entry in the object tree, a new error is reported:

<S_CODE_TOKEN>

It's a minor thing. Please land this PR first and address the problem in a follow-up PR. It will make it easier for me to review the changes.
",bajtos,2014-11-27 12:00:47
337,2014-04-02 10:46:55,"Realisation of Profiler agent.
Implemented:
Profiler.enable
Profiler.disable
Profiler.star
Profiler.stop
Profiler.getProfileHeaders
Profiler.getCPUProfile
Profiler.removeProfile
Profiler.clearProfiles
Profiler.addProfileHeader
Profiler.setRecordingProfile
Profiler.resetProfiles

Related: #185
",3y3,2014-09-06 18:27:03
337,2014-04-02 10:54:11,"@bajtos , I missed one correction - it works on v 0.11.
I add checker at soon.
",3y3,2014-09-06 18:27:03
337,2014-06-13 13:28:40,"What's the state here? I would love to see his contributions in.
",cookiengineer,2014-09-06 18:27:03
337,2014-06-14 07:48:45,"Hi @martensms, this patch depends on #336 ""Injector API"", which is rather large change and I did not manage to find time to finish the review :( I would like to see this landed too, I'll try to get #336 reviewed soon.
",bajtos,2014-09-06 18:27:03
337,2014-06-16 10:24:58,"@bajtos , ready to review.
",3y3,2014-09-06 18:27:03
337,2014-06-17 09:51:02,"Ok... Rebased.
@bajtos , I restarted Travis testing 4 times and now it pass - this discouraging. (previous commit I restarted over 20 times)
This is ready.
",3y3,2014-09-06 18:27:03
337,2014-07-19 15:10:19,"Please rebase on top of current master. When I cherry-picked and run the second commit, I got an error message:

<S_CODE_TOKEN>
",bajtos,2014-09-06 18:27:03
337,2014-07-19 15:16:00,"The profiler itself seems to work. However, all functions show `0%` for both ""self"" and ""total"", that does not seem right. @3y3 what code did you run to verify that the profiler actually returns sensible profiling data?
",bajtos,2014-09-06 18:27:03
337,2014-07-19 21:07:41,"@bajtos , the problem is in node version. I need to fix v8-profiler for node 0.10.*
",3y3,2014-09-06 18:27:03
337,2014-07-20 14:40:06,"Ok, I fixed v8-profiler, and now you can see ""self"" and ""total"" values. But now I see other problem - all commands (for 0.10.*) evaluate in other isolate, therefor profiler don't checks calling of functions in main process, it only checks debugger functions calling. I start to fix it, but i'm not sure that I'll win in this research.
",3y3,2014-09-06 18:27:03
337,2014-07-20 16:17:28,"@3y3 Oh, I forgot the profiler works in v0.11 only. Well, if we can't make it work in 0.10, I am fine with that, as long as we let the user know about the problem when Node Inspector is debugging a v0.10 app. We have to solve this anyway since I doubt that you will want to port the profiler ancient versions like v0.8.
",bajtos,2014-09-06 18:27:03
337,2014-07-21 00:16:26,"@bajtos , all rebased. Fixed error message. Some small cleanups. Ready to next step of review.

In any cases full supporting of 0.10.\* is an issue of v8-profiler, but not of this commit. Now I don't know can I fix this problem or not. I prefer to find answer in future if it is possible, because 0.10.\* is a great part of node community and also because the next version of node debugger will be moved to another isolate, and this issue maybe will block profiling in 0.13.*. 
I tried to manually switch to related Isolate, but it does not give me positive result. After some other small researches I'll start to search more experienced v8 developer for solving this issue or for closing it as unresolved.
",3y3,2014-09-06 18:27:03
337,2014-07-21 08:13:35,"> In any cases full supporting of 0.10.\* is an issue of v8-profiler, but not of this commit.

Here is the trouble with that: as a user of Node Inspector, I don't know what versions of Node are supported by the profiler. When I start profiling and my Node version is not (fully) supported, Node Inspector must notify me about the problem. Otherwise I will be confused about the result, perhaps try to investigate what's wrong and waste a lot of time just to find out the profiler does not work for my Node version.

Thus the patch adding the profiler tab has to include mechanism to tell user when he is using an unsupported Node version (e.g. v0.8) or what are the limitations in partially-supported versions (v0.10?).

> I tried to manually switch to related Isolate, but it does not give me positive result. After some other small researches I'll start to search more experienced v8 developer for solving this issue or for closing it as unresolved.

Is there a GH issue with more details and perhaps steps to reproduce? I can ask my colleague Ben if he has some spare time to help you.
",bajtos,2014-09-06 18:27:03
337,2014-08-12 18:07:19,"@bajtos ,
I inspected v0.10 issue and can concluse what it's a v8 or node specific:

This is a simple test. Here I start profiling, do something in timeout loop, stop profiling and print resulted profiling tree. I don't use debug (other isolate) here, but tree is different for v0.11, v0.10 and **v0.10 with different start parameters (SAMPLING_RATE=10, REPEAT_COUNT=100)**

#### TEST

<S_CODE_TOKEN>

#### v0.10 OUTPUT

<S_CODE_TOKEN>

#### v0.10 OUTPUT (WITH SAMPLING_RATE=10, REPEAT_COUNT=100)

<S_CODE_TOKEN>

#### v0.11 OUTPUT

<S_CODE_TOKEN>

I think we need to add something like this to README:

---

## Profiling

Node Inspector support profiling for node version at least 0.10.
Be careful, node v0.10.\* can miss part of profiling information. See (issue with description here).

---

Also we can call node team to help us describe this problem.
",3y3,2014-09-06 18:27:03
337,2014-08-15 06:43:55,"I've been told by colleagues working on StrongOps profiler that the data format changed significantly between v0.10 and v0.11 and it is not possible to convert v0.10 data without losing some precision.

Since v0.12 is going to be released very soon ([the release branch was already created](http://strongloop.com/strongblog/node-v0-12-release-branch/)), I am proposing to remove support for v0.10 completely and print an error message instead.

We already have a version check for other features. It would be great to refactor version-checking code, so that the version is fetched at the beginning of the debugging session and stored in a place where all Agents can access it synchronously, without the need to send `evaluate` requests to the debugged process.
",bajtos,2014-09-06 18:27:03
337,2014-08-15 08:31:40,"> place where all Agents can access it synchronously

`config` object?

> Since v0.12 is going to be released very soon (the release branch was already created), I am proposing to remove support for v0.10 completely and print an error message instead.

Ok, then I'll do last fixes for version checking and we wait 0.12 release to merge this.

> It would be great to refactor version-checking code

How about using semver?
",3y3,2014-09-06 18:27:03
337,2014-08-15 09:18:27,"> > place where all Agents can access it synchronously
> > config object?

The config object is a static configuration coming from the file system & command-line arguments, it is not the right place for that. How about `DebuggerClient.targetNodeVersion`? The client is already sending a 'version' request when the connection is open, it can send `evaluate` node version instead.

> How about using semver?

Yes, that would make the code checking for version match much cleaner.
",bajtos,2014-09-06 18:27:03
337,2014-08-25 20:34:44,"Rebased to head. Ready to review.
",3y3,2014-09-06 18:27:03
337,2014-08-27 17:40:39,"The tests are failing on Node v0.10 on Travis.
",bajtos,2014-09-06 18:27:03
337,2014-09-05 07:53:05,"@bajtos, which is a correct style for single line `if` statement in node-inspector:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

?
",3y3,2014-09-06 18:27:03
337,2014-09-05 08:43:44,"I usually prefer the first variant:

<S_CODE_TOKEN>
",bajtos,2014-09-06 18:27:03
337,2014-09-05 09:13:12,"All fixed. Rebased to master
",3y3,2014-09-06 18:27:03
337,2014-09-05 11:48:56,"One more small thing to fix, see the comment above.

Other than that, the patch LGTM. Please squash the commits before merging to master.
",bajtos,2014-09-06 18:27:03
337,2014-09-05 11:49:55,"This is a great contribution btw, thank you very much!
",bajtos,2014-09-06 18:27:03
337,2014-09-05 14:18:39,"Fixed and rebased. I like to work on this project =)
",3y3,2014-09-06 18:27:03
336,2014-04-02 10:39:06,"Injector presents a communication bridge between app and debugger.
It provide the access to:
1. 'require' function (that isn't global and rarely scoped)
2. socket connection (that used V8 debugger protocol in messages)
   as main communication channel between app and debugger.
   It will be useful for injection of plugins and extentions.
   It is first part of 'Console API', 'Profiler API', 'HeapProfiler API' extensions.
",3y3,2014-06-16 06:47:02
336,2014-04-02 10:43:30,"@bajtos , how you can see, I pushed some commits. Please start review from this, the second - Profiler API, and finally HeapProfiler API. Also you can review Console API. After first review and fixes I add tests.
",3y3,2014-06-16 06:47:02
336,2014-04-02 13:26:42,"Hi @3y3, the design looks promising at the first sight. I'll try to get this patch reviewed this week.
",bajtos,2014-06-16 06:47:02
336,2014-04-04 07:38:34,"I'm done with the first round of review.
",bajtos,2014-06-16 06:47:02
336,2014-04-04 09:00:52,"Thanks for review. I'll fix it in soon
",3y3,2014-06-16 06:47:02
336,2014-04-07 14:13:41,"@bajtos , I add fixes. Please see [BreakEventHandler L52](https://github.com/3y3/node-inspector/blob/94d97c4c9b44aa7993deec7172416f5d9ef98f5c/lib/BreakEventHandler.js#L52)
I think this part is a big problem, I'll prefer to create something like this:

<S_CODE_TOKEN>
",3y3,2014-06-16 06:47:02
336,2014-04-09 15:02:45,"Ad BreakEventHandler L52, I don't understand why is it a big problem, could you please explain? Is it because the `tryHandleBreakEvent` must be async? If that's the case, why it has to be async?

My concern is that if the break event handler waits until the injected server is set up, then the GUI will be unresponsive for a noticeable duration and there may be other front-end requests or even debugger events handled in the meantime.
",bajtos,2014-06-16 06:47:02
336,2014-04-09 16:59:39,"We can be stopped by two reasons:
- breakpoint, exception, debug-brk ...
- injected breaking expression

In the first point I try to check that frame contains `require`. I can do it only in async mode.
When I found `require` I try to inject server, if in this moment node-inspector will change state of program (stepout for example), injection will fail and I'll start injecting only on next break (I dont know, when it will stop in next time). Therefor I try to finish injection before all user actions.
",3y3,2014-06-16 06:47:02
336,2014-04-09 17:27:23,"Hmm, I don't think there is an (easy) way to to ensure the injection is finished before all user actions. I am worried that if we go down this route, we will have to add more and more patches to fix all kinds of edge cases and timing/race conditions.

I have had an alternative idea for some time: how about asking users to put a single line on top of their main node file to enable injections:

<S_CODE_TOKEN>

That way the `require` symbols is always available. (If you run with --debug-brk, then `require` is available in the local scope as a function parameter. Otherwise it is available via `process.require`.) That will allow you to focus on implementing the injection itself, forwarding of console logs, profilers, and not to worry about how to access `require` function.

In the meantime, we can push a patch for Node.js core to get the require symbol available globally. If it doesn't work out, then we can worry about how to expose it in a way similar to what you are building in this pull request.

What do you think?
",bajtos,2014-06-16 06:47:02
336,2014-04-09 18:18:10,"`require` is local by multiple reasons, I'll list them if the next point will not be important:
You missed `repl` situation.
",3y3,2014-06-16 06:47:02
336,2014-04-09 18:20:12,"I don't understand, how is ""repl"" related to this?

The only difference I am aware of is that when you run the default REPL, `global.require` is available even via V8 debugger protocol.
",bajtos,2014-06-16 06:47:02
336,2014-04-09 18:52:48,"Ok.
At the first - then you run REPL you can't set `process.require` before start.
How can I understand you propose `process.require` as a temporary solution, but all temporary is permanent. 
I do not like the idea to ask the user to prepare the code for the debugger. Node Inspector can works as DevTools - can works without depends to user code.

For conclusion:
I can ignore `break` event.
When we start with `debug-brk` I'll check `debuggerClient.isRunning == false` and start injecting.
In other situation I'll evaluate `PAUSE_STRING` 
",3y3,2014-06-16 06:47:02
336,2014-04-16 14:14:44,"@bajtos , Is there a progress in discussion with Bradley Meck?
",3y3,2014-06-16 06:47:02
336,2014-04-16 16:35:17,"@3y3 see joyent/node#7473. It may take a month or so to get it implemented. I would not expect the patch to get back-ported to v0.10, i.e. it would be most likely available in v0.11/v0.12 only.
",bajtos,2014-06-16 06:47:02
336,2014-04-21 07:49:08,"@bajtos , all was fixed. We wait for 7473 or continue this review without node changes?
I added small changes in `BreakEventHandler` part - now I do not see a way to get the indeterminate state.
",3y3,2014-06-16 06:47:02
336,2014-04-22 13:13:16,"The code uses `noInject` in many places. If my understanding is correct, it should be replaced with `inject`.
",bajtos,2014-06-16 06:47:02
336,2014-04-22 13:50:24,"> @bajtos , all was fixed. We wait for 7473 or continue this review without node changes?

I'd rather not wait for Node core changes, as it may take long time until they are landed.
",bajtos,2014-06-16 06:47:02
336,2014-04-22 22:09:13,"@bajtos , all fixed and ready to next round
",3y3,2014-06-16 06:47:02
336,2014-06-14 09:11:58,"The way how `InjectorClient.prototype.connect` reports the result is still too complex and difficult to get right, see my comments above.
",bajtos,2014-06-16 06:47:02
336,2014-06-16 06:13:41,"I agree with all comments - fixed. Also I repaired error handling in `InjectorClient._injectServer`

<S_CODE_TOKEN>

Rebased and squased
",3y3,2014-06-16 06:47:02
336,2014-06-16 06:49:50,"Landed, thank you for being patient we me. I am looking forward to the next related work (console logs, profilers) - please leave a comment in pull requests when they are ready.
",bajtos,2014-06-16 06:47:02
336,2014-06-16 07:10:05,"Oh... I'm really happy that we finished this commit.
I created v5.0.0 of v8-profiler and now write test for `Profiler API` pr
",3y3,2014-06-16 06:47:02
335,2014-03-31 21:30:26,"this commit breaks node-inspector on Windows 7 SP1
commit 5f95f5b201c679887baa08c85b1b7f6db8db90c0
causes `content has no method 'replace'`

<S_CODE_TOKEN>

Commenting the line allows debugger to run. Running with `node --debug-brk file.js`
",csbrandt,2014-04-08 07:23:04
335,2014-04-01 07:24:27,"Hello @csbrandt, thank you for reporting the issue.

If content has not method `replace` then it is not a string, which means `fs.readFile` returned an unexpected result. 

Could you please add a log statement and post the output here?

<S_CODE_TOKEN>
",bajtos,2014-04-08 07:23:04
335,2014-04-07 21:36:45,"I think I'm getting this same error on Node 0.8 on OSX 10.9.  I tried adding a console log but I'm having issues with console (unrelated to this issue).  So can someone else add this log and get some info for @bajtos ?
",dmgreene,2014-04-08 07:23:04
335,2014-04-07 21:59:27,"<S_CODE_TOKEN>

here is the output from the error log.

<S_CODE_TOKEN>
",csbrandt,2014-04-08 07:23:04
335,2014-04-07 22:03:45,"@dmgreene if you comment out line 67 in ScriptFileStorage.js where node-inspector is installed globally on your system, that resolved the issue for me.

<S_CODE_TOKEN>
",csbrandt,2014-04-08 07:23:04
335,2014-04-07 22:06:22,"Thanks @csbrandt but that seems like a temporary fix.
",dmgreene,2014-04-08 07:23:04
335,2014-04-08 06:56:22,"Thank you @csbrandt for the log, it helped me to track down the problem. The fix is waiting for code review - see #342.
",bajtos,2014-04-08 07:23:04
335,2014-04-08 07:26:06,"The fix was released in v0.7.3
",bajtos,2014-04-08 07:23:04
334,2014-03-27 12:36:01,"![node-inspector-bug](https://cloud.githubusercontent.com/assets/1069456/2537136/2e4fa7e4-b5ab-11e3-89c2-a7d811b27428.png)

In the example, the local varlable view took >10 minutes time to open, this makes debugging practically useless when dealing with large objects/arrays.  This problem is not present in the chrome devtools.

I'm using node-inspector 0.7.2.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/1449378-local-variable-view-takes-very-long-time-to-open-if-the-variable-list-contains-large-arrays-hashes?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",derMart,
334,2014-03-27 18:03:40,"I am afraid this is a problem of V8 debugger. Here is the request Node Inspector is sending (the handle -2 is referring to the local scope).

<S_CODE_TOKEN>

When you type `a` to console, the request hangs too:

<S_CODE_TOKEN>

A possible reason why this problem is not present in chrome devtools is that they don't use the V8 request `lookup` and use different means that are not available to Node Inspector. (Like injecting a mixture of javascript + c++ native code in the debugged page that provides introspection capabilities.)

There isn't much Node Inspector can do. Please fill a V8 issue here: [form](https://code.google.com/p/v8/issues/entry).
",bajtos,
334,2014-03-27 18:45:42,"Thanks alot for your detailed answer.
I found an already opened v8 issue, see: https://code.google.com/p/v8/issues/detail?id=2006
",derMart,
334,2014-12-18 17:21:43,"Now that we are replacing the V8 debugger protocol with injected debugger scripts, this is something we can fix directly in Node Inspector.

/cc @3y3 
",bajtos,
333,2014-03-27 04:20:07,"## I wrote Stack Overflow

 http://stackoverflow.com/questions/22650491/node-inspector-repeating-error
## I try Node Inspector Versions.

Node Inspector v0.6.2
Node Inspector v0.7.0
Node Inspector v0.7.2
and
Node Inspector v0.7.3
## I try node.js versions

v0.10.26
v0.11.10
## OS

OSX Version10.9.2
## Chrome

Version 33.0.1750.152
## node --debug

<S_CODE_TOKEN>
## node-inspector

<S_CODE_TOKEN>
## chrome

<S_CODE_TOKEN>
",shingo-nakanishi,2014-08-19 14:28:44
333,2014-03-27 09:41:11,"Thank you @shingo-nakanishi for reporting the issue.

Are you able to reproduce it using the [sample server](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js)? (I am not.)

Please start the node-inspector using the following command:

<S_CODE_TOKEN>

This will tell node-inspector to dump all communication to stderr. Please post the last twenty-thirty messages here, hopefully they will contain enough information to pin down the source of the problem.
",bajtos,2014-08-19 14:28:44
333,2014-03-28 02:05:00,"Thank you share how to debug.

I found this problem occur by Japanese word directory

I try two pattern.

<S_CODE_TOKEN>

is OK.

and

<S_CODE_TOKEN>

is

<S_CODE_TOKEN>

the problem is my carelessness, Japanese word direcotry.
Thank you your help.

## Debug Print

<S_CODE_TOKEN>
",shingo-nakanishi,2014-08-19 14:28:44
333,2014-04-16 10:59:32,"This issue is probably related to #214. #354 may fix the problem.
",bajtos,2014-08-19 14:28:44
333,2014-04-20 16:40:30,"Hi,
i have the same problem over here. I use some german umlauts in my path and the debugger is always crashing. 
",patrickhempel,2014-08-19 14:28:44
333,2014-06-05 07:10:20,"@patrickhempel , @shingo-nakanishi , please test 0.7.4, it can fix your problem
",3y3,2014-08-19 14:28:44
333,2014-08-19 14:28:44,"Closing reason - no feedback. I'll reopen this if problem is not resolved.
",3y3,2014-08-19 14:28:44
333,2016-07-21 07:27:08,"Hi,

I am not sure I should be commenting here, since this thread is pretty old, however, I get the same error.

I am using:
- Windows 7
- Node 6.2.1
- Node Inspector v0.12.8
- Google Chrome 51.0.2704.103 m

I start my application with `node --debug server.js` or `node --debug-brk server.js`  and in another window `node-debug server.js`. and chrome opens, I get the same error reported here. The debug command did not work for me, as I am on windows.
",musahaidari,2014-08-19 14:28:44
333,2016-08-22 16:13:45,"Same issue. Using the latest. Stack trace 

<S_CODE_TOKEN>

I am running in a separate window `npm start` on port `8080`
",gotoAndBliss,2014-08-19 14:28:44
333,2016-09-01 15:11:35,"Same issue here:

`$node-inspector --web-port=3031`

<S_CODE_TOKEN>

Using following environment:
`uname -a`  > `Linux 
documentdb-node 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux`
`node -v` > `v6.4.0`
`node -e 'console.log(process.versions.v8)'` > `5.0.71.60`
`npm -v` > `3.10.3`

Google Chrome version `Version 52.0.2743.116 (64-bit)`
",njappboy,2014-08-19 14:28:44
333,2016-09-01 16:07:30,"@njappboy You need to downgrade your node to 6.3, and it should work. 
",gotoAndBliss,2014-08-19 14:28:44
333,2016-10-12 09:44:42,"Same issue.
- `node -v` > `v6.6.0`
- `node -e 'console.log(process.versions.v8)'` > 5.1.281.83
",yangjiqiao86,2014-08-19 14:28:44
333,2016-11-04 06:51:46,"I am facing the same problem, is there any solution? 
",YahyaElharony,2014-08-19 14:28:44
333,2017-02-17 13:07:34,Is there any solution for this problem with Node version 6.9 ?,abhgangwar,2014-08-19 14:28:44
332,2014-03-24 09:44:48,"I was trying to install eclipse orion, which has a dependency on node-inspector ~0.2.0-beta3. As a result it tried to install the latest beta: 0.2.0-beta4. This resulted in the following stack trace:

npm ERR! Error: invalid version: 0.2.0beta4
npm ERR!     at validVersion (/usr/lib/nodejs/read-package-json/read-json.js:573:40)
npm ERR!     at final (/usr/lib/nodejs/read-package-json/read-json.js:323:23)
npm ERR!     at /usr/lib/nodejs/read-package-json/read-json.js:139:33
npm ERR!     at cb (/usr/lib/nodejs/slide/lib/async-map.js:48:11)
npm ERR!     at /usr/lib/nodejs/read-package-json/read-json.js:251:40
npm ERR!     at fs.js:268:14
npm ERR!     at /usr/lib/nodejs/graceful-fs/graceful-fs.js:103:5
npm ERR!     at Object.oncomplete (fs.js:107:15)

I've been digging a bit and found an issue with the tar ball at http://registry.npmjs.org/node-inspector/-/node-inspector-0.2.0beta4.tgz:
The version property in the package.json in the tar says 0.2.0beta4.

To solve my issue I changed the version in pacakge.json to 0.2.0-beta4 (note the additional '-') and recreated package.tgz to make the install succeed.
",bbroeksema,2014-03-24 13:00:42
332,2014-03-24 10:22:41,"Hi @bbroeksema, thank you for reporting the issue.

First of all, 0.2.0 betas are over a year old now and no longer supported. Please open an issue in eclipse orion to upgrade to a more recent version.

When I inspected data in the public registry, there are both ""0.2.0-beta4"" and ""0.2.0beta4"" versions, seems that ""0.2.0beta4"" is automatically redirected to ""0.2.0-beta4"". 

I tried to install the Node Inspector myself and it worked well:

<S_CODE_TOKEN>

What version is your npm client? Mine is `1.4.6`.

<S_CODE_TOKEN>
",bajtos,2014-03-24 13:00:42
332,2014-03-24 13:00:42,"Hi @bajtos, thanks for the quick heads up. I looked up my npm version and it was at 1.2.18 on ubuntu (no more recent version provided). After upgrading it using npm install -g npm and removing the ubuntu provided one I didn't get this issue anymore. So it seemed to have been an npm issue.

After updating npm I was able to install orion with any manual fiddling or other problems. Closing the issue.
",bbroeksema,2014-03-24 13:00:42
332,2014-04-06 15:00:55,"I've logged the bug at Orion to address the out of date module 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=432107
",kenwalker,2014-03-24 13:00:42
331,2014-03-21 07:21:02,"debugger.js rewrited as a class 'Debugger'.
Now Debugger's connection parses messages with help of `_ debugger.Protocol.execute`
",3y3,2014-03-21 17:06:53
331,2014-03-21 15:40:04,"The change looks great. Could you please improve the commit message to explain that `_debugger.Protocol` is comming from Node.js internals? It took me few moments to realise where to look for it.

FYI, there was an attempt to deprecate the CLI debugger recently: joyent/node#6507. I suppose there is no need to worry until it happens (which may be never).
",bajtos,2014-03-21 17:06:53
331,2014-03-21 16:44:51,"@bajtos , updated. Anything else?
",3y3,2014-03-21 17:06:53
331,2014-03-21 17:06:53,"Landed as 7214048, I have improved the message little bit more. I hope you don't mind.

Thank you for the contribution.
",bajtos,2014-03-21 17:06:53
330,2014-03-20 14:05:30,"Fixed a possible race condition by adding the port as a query parameter
for the websocket connection. If port number is not provided the
connection falls back to the last provided port number just as before 

closes #329
",dininski,2014-03-21 16:56:18
330,2014-03-20 19:30:25,"Hi @dininski, thank you for the bug report and the pull request.

The patch is going in the right direction, please see my line comments above for issues to fix.
",bajtos,2014-03-21 16:56:18
330,2014-03-21 08:55:10,"I have updated the code following your guidelines. If there is something else I will try to fix it ASAP.
",dininski,2014-03-21 16:56:18
330,2014-03-21 14:37:06,"Excellent. Please squash all your changes into a single commit and make sure the commit message follows the [50/72 format](https://github.com/node-inspector/node-inspector/wiki/Contributing#git-commitspatches).

In case you are note familiar with git history rewriting, the commands are `git rebase -i` and `git push -f`.
",bajtos,2014-03-21 16:56:18
330,2014-03-21 16:25:46,"I think this should look good now. Cheers.
",dininski,2014-03-21 16:56:18
330,2014-03-21 16:56:31,"Landed. Thank you for the contribution!
",bajtos,2014-03-21 16:56:18
330,2014-03-21 17:00:12,"Please leave an empty line between the commit summary and the description next time.

<S_CODE_TOKEN>

It plays more nicely with tools like changelog generator.
",bajtos,2014-03-21 16:56:18
330,2014-03-21 17:01:58,"Released in v0.7.2
",bajtos,2014-03-21 16:56:18
329,2014-03-20 13:39:53,"I think I might have identified a race condition in debug-server.js:

When hitting the `/debug` endpoint the `config.debugPort` is set. Afterwards it is kept in memory and eventually a new Session is created when a WebSocket upgrade request is received. However if the `/debug` endpoint is hit again, with a different port as query parameter before the WebSocket upgrade request is received the `config.debugPort` will be overriden and the two websocket requests will create sessions with the same port.

I believe that adding a port query parameter to the WebSocket upgrade request and passing it to `_createSession()` would solve this. I could send a PR later today if you think this is worth looking into.
",dininski,2014-03-21 16:56:18
329,2014-03-20 15:25:35,"A simple example would be two or more people trying to debug different applications on a shared environment with the same node-inspector instance.
",dininski,2014-03-21 16:56:18
328,2014-03-16 14:12:18,"When I debug [co](https://github.com/visionmedia/co) example which requires node 0.11 or uppper, if I input `node-debug test.js`, it outputs: 

<S_CODE_TOKEN>

If I type `node-debug --harmony test.js`, this time there is no error, but the debugger window in chrome  displays `run-repl.js` instead of  `test.js`.

The code in `test.js` is from co homepage:

<S_CODE_TOKEN>
",wentingliu,2014-05-22 12:11:11
328,2014-03-16 16:18:55,"What you mean?
",3y3,2014-05-22 12:11:11
328,2014-03-17 06:31:24,"@3y3 I'm not quite sure what harmony feature of node is as I'm new to node, but if I use `--harmony` flag like `node --harmony`, some advanced features like generators will be available.
",wentingliu,2014-05-22 12:11:11
328,2014-03-17 06:41:54,"@wentingliu , it will be available after Blink Developer Tools starts to support ECMAScript 6
",3y3,2014-05-22 12:11:11
328,2014-03-17 07:14:01,"@3y3 , thanks for your response.
",wentingliu,2014-05-22 12:11:11
328,2014-03-17 09:17:13,"> If I type `node-debug --harmony test.js`, this time there is no error, but the debugger window in chrome displays run-repl.js instead of test.js.

`node-debug` does not support arbitrary Node flags (like `--harmony`) at the moment. I can imagine adding a `--nodejs` flag similar to what CoffeeScript has, thus allowing

<S_CODE_TOKEN>

For now, you can debug your ES6 application by starting all components manually:

<S_CODE_TOKEN>
",bajtos,2014-05-22 12:11:11
328,2014-03-17 09:24:59,"> For now, you can debug your ES6 application by starting all components manually:

@bajtos , And frontend will parse scripts?
",3y3,2014-05-22 12:11:11
328,2014-03-17 09:27:59,"`node-debug test.js --harmony`
The same construction is not working?
",3y3,2014-05-22 12:11:11
328,2014-03-17 09:38:34,"> > For now, you can debug your ES6 application by starting all components manually:
> 
> @bajtos , And frontend will parse scripts?

It looks so. At least the `let` keyword works fine in the DevTools in the latest stable version of the Chrome browser.

> `node-debug test.js --harmony`
> The same construction is not working?

No, it does not work. Options after the script are passed as script arguments, not node arguments.

Your code is will execute `node --debug=5858 --debug-brk test.js --harmony`.

See the implementation of [node-debug](https://github.com/node-inspector/node-inspector/blob/bbf989ca5cf9bc8e979d4af4a0df3155553f8253/bin/node-debug.js) for more details.
",bajtos,2014-05-22 12:11:11
328,2014-03-17 10:10:58,"@bajtos , if you start to create PR please see also this [typo](https://github.com/node-inspector/node-inspector/blob/master/bin/node-debug.js#L187-L189)
",3y3,2014-05-22 12:11:11
328,2014-05-06 15:01:39,"+1
",mlegenhausen,2014-05-22 12:11:11
327,2014-03-16 06:12:21,"So i hover over the request object and it shows sessions_state is undefined. But when i hover over sessions_state it self, it shows the object properply. Here is my code and screen shot
Hover on the request object
![not undefined](https://f.cloud.github.com/assets/6089207/2430326/dd0f0ae6-acd1-11e3-950a-9b0aa730d810.PNG)

 Hover on session_state object
![shows-undefined](https://f.cloud.github.com/assets/6089207/2430325/c775b162-acd1-11e3-96a3-679e22542a22.PNG)
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/1440238-hover-on-parent-shows-child-undefined-but-on-it-self-shows-object?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",MurWade,
327,2014-03-16 10:05:44,"Can you create simple example of code?
",3y3,
327,2014-03-16 10:07:49,"Is `session_state` a get/set property?
",3y3,
327,2014-03-16 20:50:36,"I am uysing client https://github.com/mozilla/node-client-sessions

The sessions_state property comes from that. I dont know what the difference between get and set property is sorry. 

By creating example of code you mean client side also? or you want the general express configuration code also. Please let me know anything you need anything.

Thank YOU! 
",MurWade,
327,2014-03-16 21:35:46,"@MurWade , the [get/set properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters)

The project reference was enough.

`session_state` creates as `get/set` [here](https://github.com/mozilla/node-client-sessions/blob/dd7bd46007ea71bcfe96580310288d7ef84c89d3/lib/client-sessions.js#L582)
At this moment node-inspector cannot display get/set properties, it's an issue of node, see [Issue 7139](https://github.com/joyent/node/issues/7139)
",3y3,
326,2014-03-15 22:32:08,"RC module switch to use minimist.
Minimist parse 'no-option' as 'option=false'. Now it checked.

Close #325.
",3y3,2014-04-23 12:39:44
326,2014-03-17 08:01:43,"What problem is this change addressing? In other words, what command-line does not work correctly?
",bajtos,2014-04-23 12:39:44
326,2014-03-17 08:09:01,"The implementation is difficult to understand as the logic is in multiple places. The name `keyToFixedKey` is confusing, as `fixed` can mean anything.

How about creating a `no-` copy of every option instead?

<S_CODE_TOKEN>
",bajtos,2014-04-23 12:39:44
326,2014-03-17 08:10:02,"Oh. Creating a copy won't work, since you are converting `no-flag = true` to `flag = false`, is that correct?
",bajtos,2014-04-23 12:39:44
326,2014-03-17 08:14:45,"This looks like a better approach: create our own instance of optimist (or yargs, since optimist is no longer supported) and pass it to rc as the custom argv parser - see [rc docs](https://github.com/dominictarr/rc#pass-in-your-own-argv).

That way you can configure the argv parser with all know options and make it aware which options are boolean (and should support `--no-flag` version).

---

I am also worried how much logic in `config.js` is not covered by unit-tests. It's time to fix that too.
",bajtos,2014-04-23 12:39:44
326,2014-03-17 08:51:50,"> This looks like a better approach: create our own instance of optimist (or yargs, since optimist is no longer supported) and pass it to rc as the custom argv parser - see rc docs.

It's a good point, I don't saw this part of RC documentation. I'd like `yargs` support, because it already contains in dependencies. I got this soon.

Second commit will be `tests`
",3y3,2014-04-23 12:39:44
326,2014-03-21 08:24:04,"@bajtos , Hm... Usage of yargs don't help in this situation. `rc` and `yargs` uses `minimist` as args parser and `--no` prefix is his feature.
How about replace `--no-preload` to `preload` and etc. And update the documentation (describe usage of `no` prefix) and files that uses this options?
Also I can add `yargs` as args parser this provide an access to aliases.
What you think?
",3y3,2014-04-23 12:39:44
326,2014-03-21 15:31:07,"I am not sure if I follow you correctly.

Defining a `preload` option (boolean, true by default) to get a `--no-preload` command-line switch is reasonable. I would keep the documentation as it is - Node Inspector users need to know about `--no-preload`, I don't think anybody would care about `--preload=false`.
",bajtos,2014-04-23 12:39:44
326,2014-03-22 13:59:24,"> Defining a preload option (boolean, true by default) to get a --no-preload command-line switch is reasonable. 

If we leave only `preload` option, this will work fine whenever users uses command line, but when they will try to configure node-inspector with help of env variables etc.,  it will not work.
But if we leave `preload` and `no-preload` we need to have point where we will convert `preload: false` to `noPreload: true` in future also for `no-inject` for console implementation.
",3y3,2014-04-23 12:39:44
326,2014-04-07 13:18:32,"@bajtos , The problem with current documentation and new config option `preload=true`:
- terminal `node-inspector no-preload` works fine. Configuration is `{preload: false}`
- .rcconfig or ENV variable `no-preload=true` bad. Configuration is `{noPreload: true}`
",3y3,2014-04-23 12:39:44
326,2014-04-09 09:00:18,"> @bajtos , The problem with current documentation and new config option `preload=true`:
> - terminal `node-inspector no-preload` works fine. Configuration is `{preload: false}`
> - .rcconfig or ENV variable `no-preload=true` bad. Configuration is `{noPreload: true}`

I see your point. Let's rename `no-preload` to `preload` completely, as you suggested earlier.

The rc file should still support `noPreload` or `no-preload` for backwards compatibility (I am not sure which one is used). A warning could be printed when old key is encountered, to let users know they should use `preload` instead. That will allow us to remove the support of the old key (`no-preload` or `noPreload`) at some point in the future.

It would be nice to describe the possibility of using `--no-preload` instead of `--preload=false` in the help, but I can live without that.

Is this a reasonable solution?
",bajtos,2014-04-23 12:39:44
326,2014-04-09 18:57:59,"It's a very reasonable solution. Now I'll write some tests anp push it.
",3y3,2014-04-23 12:39:44
326,2014-04-10 19:59:53,"@bajtos , PR was updated. Please review.
Also I see one strange point - why we need `config.isScriptHidden` but not `ScriptFileStorage.prototype.isScriptHidden`?
",3y3,2014-04-23 12:39:44
326,2014-04-11 07:57:41,"> Also I see one strange point - why we need `config.isScriptHidden` but not `ScriptFileStorage.prototype.isScriptHidden`?

Are you asking why the implementation of the logic determining whether a script is hidden is inside config? It makes writing unit-tests easier. ScriptFileStorage tests can pass an arbitrary function and don't have to cover the implementation of the algorithm checking whether a file matches the configured pattern. Then the config tests (not written yet) can test that config.isScriptHidden matches only the files that were hidden by whatever config options are controlling this, without the need to setup ScriptFileStorage.
",bajtos,2014-04-23 12:39:44
326,2014-04-11 12:04:42,"Ok, I start next round of fixes, and you are welcome to [test](https://github.com/node-inspector/node-inspector/pull/351) `nv` option  ;-)
",3y3,2014-04-23 12:39:44
326,2014-04-13 10:02:58,"@bajtos , I removed all unrelated changes and changed tests.
The next PR will be 'config cleanup'.
",3y3,2014-04-23 12:39:44
326,2014-04-22 14:02:51,"The current implementation of `definition.deprecated` needs changes in too many places and does not handle deprecated option gracefully (i.e. emit a warning and convert the deprecated option to the new option).

This is what I have in mind:

<S_CODE_TOKEN>
",bajtos,2014-04-23 12:39:44
326,2014-04-22 14:04:05,"The tests look much better now :+1: 

Two more comments to address, the patch is almost ready for merge.
",bajtos,2014-04-23 12:39:44
326,2014-04-22 20:20:28,"@bajtos , I checked your comments. Also I updated `README.md` and squashed all.
",3y3,2014-04-23 12:39:44
326,2014-04-23 11:55:01,"I don't understand. Why is this still needed? `no-preload: { deprecated: true }` and the two checks `if (definition.deprecated) return`
",bajtos,2014-04-23 12:39:44
326,2014-04-23 12:07:03,"Ah! Now I see what you mean. Fixed.
",3y3,2014-04-23 12:39:44
326,2014-04-23 12:08:56,"Seems you have pushed a wrong commit. Please check out the diff here on github to make sure the code looks as intended. It will save the time of both of us.

https://github.com/node-inspector/node-inspector/pull/326/files
",bajtos,2014-04-23 12:39:44
326,2014-04-23 12:22:31,"Link looks right. Where you see the problem?
",3y3,2014-04-23 12:39:44
326,2014-04-23 12:32:41,"Weird, it looks right on my machine now too.
",bajtos,2014-04-23 12:39:44
326,2014-04-23 12:39:44,"Landed as 28560d8, thank you.
",bajtos,2014-04-23 12:39:44
326,2014-04-23 12:42:27,"Thanks. I start create `config cleanup`
",3y3,2014-04-23 12:39:44
325,2014-03-15 17:40:09,"When I run `node-inspector --no-preload`, I got the `config.noPreload` is false.

But I see the help  from `node-inspector -h` that `--no-preload` don't need arguments.

<S_CODE_TOKEN>

Does it need arguments? (version: v0.7.1)

PS: worked by  `node-inspector --no-preload=true`, same as `--save-live-edit`
",popomore,2014-04-23 12:39:18
325,2014-03-15 22:32:45,"Thanks for report!
I created a Pull Request.
",3y3,2014-04-23 12:39:18
324,2014-03-14 07:37:13,"Add jshint configuration, configure npm to run jshint in ""pretest"".

Fix existing issues to make jshint pass.

@3y3 please review

The most annoying change is replacing checks like `to.be.false` with `to.equal(false)`. Perhaps we could use [must](https://github.com/moll/js-must) instead of chai. Do you have any opinion on that?
",bajtos,2014-03-14 16:16:22
324,2014-03-14 09:20:00,"> The most annoying change is replacing checks like to.be.false with to.equal(false). Perhaps we could use must instead of chai. Do you have any opinion on that?

I am novice in test frameworks, for me doesn't matter what will be used.

How about `quotemark: true` ?
",3y3,2014-03-14 16:16:22
324,2014-03-14 10:19:22,"> I am novice in test frameworks, for me doesn't matter what will be used.

Fair enough, let's stick to chai for now.

> How about `quotemark: true` ?

That would allow people to use double quotes, which I'd like to avoid. The algorithm used by jshint to detect ""consistency"" is unfortunately not good enough yet.
",bajtos,2014-03-14 16:16:22
324,2014-03-14 12:20:28,"> The algorithm used by jshint to detect ""consistency"" is unfortunately not good enough yet.

It grieves.

Is there an instrument like `fixjsstyle` for jshint? (Would be good to have automatic fixing tool, it increase the likelihood of the connection of new maintainers)

Update:
How can I see [fixmyjs](https://github.com/jshint/fixmyjs) useful for us.
",3y3,2014-03-14 16:16:22
324,2014-03-14 14:56:23,"Yeah, I found fixmyjs too. Let me know how well it works for you.

How about this pull request, may I merge?
",bajtos,2014-03-14 16:16:22
324,2014-03-14 15:03:01,"Yes, is's ready to merge.
",3y3,2014-03-14 16:16:22
323,2014-03-13 12:59:00,"I'm trying to debug my tests but get the following output and was wondering if someone could point me in the right direction

<S_CODE_TOKEN>
",jchannon,2014-05-22 12:11:11
323,2014-03-13 14:05:09,"You trying to debug `_mocha.CMD`.
Try set a valid path to `mocha.js` file.
",3y3,2014-05-22 12:11:11
323,2014-03-13 14:08:14,"Using `node-debug mocha.js /C/Projects/Test/NodeOMatic4000/src/MMS.Tests.Unit/MMSProcessorTests.js` starts debugging mocha not my test
",jchannon,2014-05-22 12:11:11
323,2014-03-13 14:11:36,"Please see [How to Debug Node Apps with Node Inspector](https://vimeo.com/77870960)
The last part of this video contains information about debugging mocha tests.
",3y3,2014-05-22 12:11:11
323,2014-03-13 14:12:17,"@bajtos, how about add `.cmd` execution to node-debug?
",3y3,2014-05-22 12:11:11
323,2014-03-13 14:13:32,"@bajtos , L189 of node-debug.js is a typo?
",3y3,2014-05-22 12:11:11
323,2014-03-13 14:14:45,"What I ended up having to do:

Run node-inspector
Run mocha --debug-brk
Launch http://127.0.0.1:8080/debug?port=5858 in Chrome.
Debugger is paused on the first line automatically. Go to the end of that file, set a breakpoint at the end.
Hit F8 to continue to that last breakpoint.
When the breakpoint is hit, all my test files are now loaded.
",jchannon,2014-05-22 12:11:11
323,2014-03-13 15:00:16,"Hi @jchannon,

Thank you for reporting the issue, I am glad you found a workaround.

On Unix, the `_mocha` script file starts with a [shebang](http://en.wikipedia.org/wiki/Shebang_%28Unix%29) that is ignored by Node and thus you can execute the file as if it was a regular javascript file.

On Windows, the `_mocha` script is apparently not a valid javascript, thus it cannot be started via `node _mocha`.

I suppose we need to fix the part of `startDebuggedProcess` that handles the case when the script is not a local javascript and make it detect Windows CMD files: https://github.com/node-inspector/node-inspector/blob/4a8b957435bf8d7e8cfefcef96b14e7d72bb1125/bin/node-debug.js#L243-L249
",bajtos,2014-05-22 12:11:11
322,2014-03-13 11:32:47,,3y3,2014-03-14 06:48:46
322,2014-03-13 15:19:03,"It's a bad idea to fix coding style after the patches were landed as it clutters history and complicates code archaeology.

In the long term, I'd like to move away from Google Closure Linter and use jhint + [jscs](https://github.com/mdevils/node-jscs) instead. Using pure js linter will allow us to run the linting as part of the CI build on Travis and catch style violations at the time when a pull request is submitted.

Anyway, I'll accept your pull request this time, please address the line comment above.

---

If you feel like contribution the linter change:
- start with the 
  [.jshintrc](https://github.com/strongloop/loopback-angular/blob/master/.jshintrc) from loopback-angular project, increase max line width to 105, remove unnecessary globals like `expect`.
- add `.jshintingore` listing files like `front-end`. The goal is to make `jshint .` check only the files we want to check.
- add a `pretest` script to `package.json`, it should run run `jshint .`

Alternatively, you can look how to use the upcoming JSHint 3.0 and JSCS.
",bajtos,2014-03-14 06:48:46
322,2014-03-14 06:40:49,"@bajtos , I planned that this will be my last commit before updating information on the 'Console Implementation' PR, but I think that JSHint is important. On next week you can wait first update for 'Console Implementation' and also for 'JSHint'.

PR updated.
",3y3,2014-03-14 06:48:46
322,2014-03-14 06:50:28,"Landed.

> I planned that this will be my last commit before updating information on the 'Console Implementation' PR, but I think that JSHint is important. On next week you can wait first update for 'Console Implementation' and also for 'JSHint'.

I'll add the jshint today, don't worry about that.
",bajtos,2014-03-14 06:48:46
321,2014-03-12 10:16:48,"Update isRunning state on 'break' and 'exception' command event.
Update isRunning state on 'connect' event with help of 'gc' command.
",3y3,2014-03-13 09:36:31
321,2014-03-13 07:32:52,"@bajtos , updated. Travis fails 1st test on npm install.
",3y3,2014-03-13 09:36:31
321,2014-03-13 09:36:39,"Landed, thank you.
",bajtos,2014-03-13 09:36:31
320,2014-03-11 08:38:54,"Environment loads showing 'Hit Ctrl+O to open a file' but no scripts are loaded.

Working in Chrome 32 on same machine.

Opera 20.0.1387.64
Windows 7
",dizzib,2014-03-11 10:27:00
320,2014-03-11 08:59:35,"Can you reproduce the problem with the [simple-server](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js) from node-debug-samples?
",bajtos,2014-03-11 10:27:00
320,2014-03-11 10:27:00,"Solved: I had NI open in Chrome whilst trying to open another instance in Opera (perhaps a warning message would be appropriate here?). Cheers!
",dizzib,2014-03-11 10:27:00
319,2014-03-10 16:55:36,"hi, 

I apologize if this may overlap with past issues, but I have tried to played around with proposed solutions for a similar issue without any luck. I just installed node-inspector in a AWS Ubuntu 12.04.2 instance and node v0.10.12. After running:

$node-debug index.js
debugger listening on port 5858
Node Inspector is now available from http://localhost:8080/debug?port=5858
Debugging `index.js`

and check chrome (v33.0.1750.146) for http://myinstance-amazonaws-url:8080/debug?port=5858
the result is an empty page with the following source code including
body class=""detached"" id=""-webkit-web-inspector""  

 The result is exactly the same if I run node --debug-brk index.js and node-inspector in separate terminals. The problem persists with safari Version 6.0.2 (7536.26.17) and 
firefox (v22.0). In chrome, I have also tried to disable any extensions.
",jibietr,2014-03-10 17:06:56
319,2014-03-10 17:06:56,"This is a duplicate of #318 
",bajtos,2014-03-10 17:06:56
318,2014-03-10 16:54:21,"hi, 

I apologize if this may overlap with past issues, but I have tried to played around with proposed solutions for a similar issue without any luck. I just installed node-inspector in a AWS Ubuntu 12.04.2 instance and node v0.10.12. After running:

$node-debug index.js
debugger listening on port 5858
Node Inspector is now available from http://localhost:8080/debug?port=5858
Debugging `index.js`

and check chrome (v33.0.1750.146) for http://myinstance-amazonaws-url:8080/debug?port=5858
the result is an empty page with the following source code:
<body class=""detached"" id=""-webkit-web-inspector""> ...</body>

 The result is exactly the same if I run node --debug-brk index.js and node-inspector in separate terminals. The problem persists with safari Version 6.0.2 (7536.26.17) and 
firefox (v22.0). In chrome, I have also tried to disable any extensions.
",jibietr,2014-03-11 07:53:39
318,2014-03-10 17:06:15,"By default node-inspector listen on local IP
try: 

<S_CODE_TOKEN>
",3y3,2014-03-11 07:53:39
318,2014-03-10 21:04:44,"Thanks! It does work!
",jibietr,2014-03-11 07:53:39
317,2014-03-06 16:26:21,"I am struggling to find a way to refresh a file that was changed on the filesystem. Is there a way to do this?
",dininski,2014-03-07 15:42:56
317,2014-03-07 15:42:48,"Restart the debugged process and reload the Node Inspector web page.
",bajtos,2014-03-07 15:42:56
317,2014-03-07 16:03:03,"The thing is that the code is dynamically loaded and might have been updated at runtime. Is it possible to refresh the contents without restarting the process and refreshing?
",dininski,2014-03-07 15:42:56
317,2014-03-07 16:25:08,"Node Inspector should be always showing the content loaded in V8 (Node). Is this a speculative question, or do you have an example where the contents is not refreshed as you would expect?
",bajtos,2014-03-07 15:42:56
317,2014-03-10 08:58:06,"I am talking about using node's 'vm' module. To be more specific - a javascript file is read from the file system and executed using vm. If the file contents are changed V8 correctly executes the new script, however the new code is not updated in node-inspector. Is there an easy way for node-inspector to get and refresh the file contents?
",dininski,2014-03-07 15:42:56
317,2014-03-10 09:18:36,"AFAIK every time the file contents is updated (i.e. you run `vm.runInContext`), V8 creates and executes a new `script` object. 

I would hope that when both the old and the new script have the same `filename` parameter (see #284), DevTools front-end would update the mapping URL-to-scriptId and update the code.

If I understand you correctly, you are saying that's not the case and the code is not updated. To my best knowledge, this problem can't be fixed in Node Inspector. You have to ask the developers of Google Developer Tools to support such use case.
",bajtos,2014-03-07 15:42:56
317,2014-03-10 13:22:21,"Yeah, that's exactly the case. Thanks a lot for the quick replies.
",dininski,2014-03-07 15:42:56
316,2014-02-26 19:53:20,"Before this change, ScriptFileStorage.load was returning source code
including shebang (#!/usr/bin/node). This prevented the front-end
from matching the file on disk with the script loaded in Node/V8.
As a result, `node-debug _mocha` did not show the breakpoint in
the _mocha file.

ScriptFileStorage.save is preserving shebang when saving the updated
file now, so that live edit works as expected.

@3y3 could you please review?
",bajtos,2014-02-28 16:37:16
316,2014-02-28 10:17:22,"@3y3 Thanks for the review. Is the patch good to merge now?
",bajtos,2014-02-28 16:37:16
316,2014-02-28 11:06:46,"I think it's ready.
",3y3,2014-02-28 16:37:16
315,2014-02-25 23:23:59,"Implement the action as no-op for skipped=false. This argument value
is sent by the front-end when pausing program execution.
",bajtos,2014-02-25 23:24:34
314,2014-02-21 17:20:02,"v0.7.0

It's breaking on old breakpoints that are no longer in the Breakpoints list.  These breakpoints are actually from previous instantiations of both NI and the process being debugged.  As they aren't in the list, I cannot disable them using the checkbox method. It does populate the Breakpoints section with some older breakpoints, but these points don't necessarily seem to work, even if they start checked, although some do.

I've tried toggling breakpoints on the phantom lines but no joy.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/1421836-phantom-breakpoints?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",MannyC,
314,2014-02-21 17:43:01,"See [How can I (selectively) delete debug session metadata](https://github.com/node-inspector/node-inspector#how-can-i-selectively-delete-debug-session-metadata) in README.

Before you delete the data, could you please post the content of `window.localStorage` here, so that I can try to reproduce your problem?
",bajtos,
314,2014-02-21 18:52:26,"If you bear with me while I fail to give you the information you've requested :)

window.localStorage.breakpoints all look well formed, and the phantoms are in there.

Now that I've looked at the console, I see that there's a stack trace.

<S_CODE_TOKEN>

This error appears for each of the broken breakpoints.  I did a little bit more digging and it appears that 

<S_CODE_TOKEN>

 is still being populated while this _didSetBreakpointInDebugger method is being run.  More scripts appear between invocations and if I check the array manually a little later all the missing scripts are there.
",MannyC,
314,2014-02-21 19:32:55,"Thank you for the details, it looks like a race condition. If you can afford to spend some more time on this: could you please run `DEBUG=node-inspector:protocol:* node-inspector` to enable dump of the communication and see if there is any more information in the protocol messages exchanged? Things to look for: `Debugger.scriptParsed`, `Debugger.setBreakpointByUrl`.
",bajtos,
314,2014-02-21 20:17:38,"okay, I haven't looked at the node-inspector source at all but this is what I'm seeing in the log:

devtools is the front end, ni is the node inspector process and v8 is the process being debugged.

ni requests scripts from v8
devtools sends the breakpoints to ni.
ni immediately relays the breakpoints to v8
ni recieves scripts from v8 in single message
from here there are many ""devtools backend"" ""Debugger.scriptParsed"" messages
in the middle of them ni receives successful ""setexceptionbreak"" responses from v8
ni immediately sends the setexceptionbreak messages to devtools with the scriptid from the v8 message
scriptParsed messages for the relevant scripts come later.
some of the successful setexceptionbreak responses from v8  come in later, which explains why some work and some don't.

So I guess ni should hold back on relaying the setexceptionbreak message to devtools until it has sent the scriptParsed message for that script.  
",MannyC,
314,2014-02-23 17:41:48,"This issue appears to stem from https://github.com/node-inspector/node-inspector/commit/95b68becab2f0e2ae90c0f5e806b8e47dc608df5#diff-b5057ff30170333370f865bfd603e734 when _getSourceMapUrl was introduced with an async.waterfall to allow source maps be retrieved from the process being debugged.  Even though in my case the script contents are already in memory, the use of async.waterfall allows the setbreakpoint events to come before the scriptParsed event.
",MannyC,
314,2015-06-04 16:42:34,"As a workaround, you can select ""Remove all breakpoints"" from the right-click menu in the breakpoints section. (If there are no breakpoints in the list you have to create one first.)
",david-knipe-hp,
313,2014-02-20 17:37:11,"Move the sections around, put a Quick Start via `node-debug` on the top.

Clean up the content, update links.
",bajtos,2014-02-20 17:37:31
312,2014-02-20 10:18:30,"DevTools front-end expects to receive Page.getResourceTree response
before any ""scriptParsed"" events. When ""scriptParsed"" arrives first,
the source-map handler throws an exception.

Add FrontendClient methods pauseEvents() and resumeEvents().

Change PageAgent to EventEmitter, add a ""resource-tree"" event that
is emitted at the time when the Page.getResourceTree response is sent.

FrontendCommandHandler uses these two features to pause events on start
and resume them on ""resource-tree"".

Close #271.

/to @3y3 could you please review?
",bajtos,2014-02-20 16:03:58
312,2014-02-20 12:24:22,"@3y3 thanks for the review. Is there anything else to fix/improve before I land the patch?
",bajtos,2014-02-20 16:03:58
311,2014-02-19 18:51:14,"- Reword so lines are closer to 80 chars wide (yargs does not wrap
  option descriptions).
- Use basename of $0 as command name, so full path
  (/usr/local/bin/node-debug) isn't printed in the usage.

Note that this syntax does not work:

<S_CODE_TOKEN>

This is basically a design error in optimist. The author assumes its possible to parse argv with no configuration, this is wrong. You need to know difference between flags (no argument) and options (have argument). In above, script.js is assumed to be argument to --debug-brk, so node-debug just does a require(.) and starts a repl.

In one case, luckily, optimist knows a flag is a flag: --no-debug-brk is treated as identical to --debug-brk=false, so the typical usage (now that debug brk is default), DOES work.
",sam-github,2014-02-19 18:59:19
311,2014-02-19 18:57:32,"> Note that this syntax does not work:
> 
> <S_CODE_TOKEN>
> 
> This is basically a design error in optimist. The author assumes its possible to parse argv with no configuration, this is wrong. You need to know difference between flags (no argument) and options (have argument). In above, script.js is assumed to be argument to --debug-brk, so node-debug just does a require(.) and starts a repl.

This used to work when `debug-brk` was defined with `type: 'boolean'`. However, I was not able to get both `type: 'boolean'` and `default: true` working together, so I simply removed the `type` property. I'll look into this problem later.

The patch LGTM, I'll merge it. Thank you!
",bajtos,2014-02-19 18:59:19
311,2014-02-19 18:59:19,"Landed as b3ac18d8a.
",bajtos,2014-02-19 18:59:19
311,2014-02-19 19:03:07,"Thanks, Miroslav. And since the important usage is --no-debug-brk, which works, I think the odd behaviour isn't worth spending time on, there are more valuable things to work on.
",sam-github,2014-02-19 18:59:19
311,2014-02-20 08:23:20,"I have filled a bug for the odd behaviour: chevex/yargs#7
",bajtos,2014-02-19 18:59:19
310,2014-02-19 14:15:43,"Refactor lib/config and bin/inspector, split printHelpAndExit into
two parts. The first part is building the help message and stays in
lib/config as `config._describeOptions`. The second part (print and
exit) is moved to bin/inspector.

/to @sam-github Please review. Node Inspector uses ""rc"" for argv parsing, therefore we can't use optimist's ""alias"".
/cc @3y3
",bajtos,2014-02-19 18:13:29
309,2014-02-18 20:41:20,,3y3,2014-03-11 09:23:33
309,2014-02-19 11:55:36,"Hm, after some changes if fails tests. I fix it soon.
",3y3,2014-03-11 09:23:33
309,2014-02-19 12:28:05,"Please extend the test [returns object properties with metadata](https://github.com/node-inspector/node-inspector/blob/master/test/RuntimeAgent.js#L66) to test the newly added property ""configurable.
",bajtos,2014-03-11 09:23:33
309,2014-02-19 18:34:10,"@bajtos , now this is a complex PR for #218.
",3y3,2014-03-11 09:23:33
309,2014-02-20 08:25:28,"What is this patch fixing? In what situation will Node Inspector behave differently before and after the change?
",bajtos,2014-03-11 09:23:33
309,2014-02-20 08:36:50,"First it fix displaying of `__proto__` properties (what was not displaying before)
After this it checks `ownProperties` option to filter `__proto__` in the `scope` object.

In other words it describes correct work with `ownProperties` and `accessorPropertiesOnly`
",3y3,2014-03-11 09:23:33
309,2014-02-20 10:31:52,"Can you post a sample code where I can observe the difference? Screenshots of the new inspector in action on the sample code would be nice too.

My concern is that this patch is a partial fix only, you still don't handle `ownProperties: false`. I am very reluctant to merge this patch if there are no improvements observable by Node Inspector users.
",bajtos,2014-03-11 09:23:33
309,2014-02-20 10:38:18,"To clarify: if this patch is only code cleanup, then it's replacing one bad solution with another bad one, so it does not make much sense to apply the change.

If the patch is fixing a bug, then I need to understand what bug it is, how can I reproduce it and how to verify your fix.
",bajtos,2014-03-11 09:23:33
309,2014-02-20 15:14:19,"#### Before

![before](https://f.cloud.github.com/assets/3931155/2219461/e44fd888-9a40-11e3-9fa6-f14d07c8cab9.PNG)

#### After

![after](https://f.cloud.github.com/assets/3931155/2219466/f642f390-9a40-11e3-8e3f-0e888081e491.PNG)
",3y3,2014-03-11 09:23:33
309,2014-02-20 15:26:35,"#### Also there are prevented same situation:

![scope proto](https://f.cloud.github.com/assets/3931155/2219608/204380fe-9a43-11e3-809b-0ede6e800a51.PNG)
",3y3,2014-03-11 09:23:33
309,2014-02-20 15:29:30,"@bajtos , how can i handle `ownProperties: false`.
I use [this solution](http://src.chromium.org/blink/branches/chromium/1625/Source/core/inspector/InjectedScriptSource.js) for realisation. Where i go out of algorithm in context of node-inspector
",3y3,2014-03-11 09:23:33
309,2014-02-20 15:56:10,"Thanks for the screenshots, it makes more sense now.

> how can i handle ownProperties: false.

That's the thing. AFAIK the V8 debugger protocol does not support filtering own/all properties, which is the reason why the DevTools team come up with the InjectedScriptSource thing. The best long-term solution is to inject that script into the debugged process and use that instead of V8 debugger protocol. But that's a lot of work and potentially a lots of bugs to introduce.

The V8 debugger protocol is implemented by [src/debug-debugger.js](https://github.com/joyent/node/blob/master/deps/v8/src/debug-debugger.js). That's the place where I start looking when I need more information about the protocol.

To make my review easier, could you please rewrite your commits as follows:
1. The first commit is only moving code to `convert.v8ObjectToInspectorProperties` without any changes in functionality or implementation of `getProperties`.
2. The second commit adds `enumerable` flag and tests.
3. The third commit contains the remaining changes. Don't pass `params` from the front-end request around, convert it to a flags object as soon as possible.
   
   <S_CODE_TOKEN>
",bajtos,2014-03-11 09:23:33
309,2014-02-21 11:25:53,"@bajtos , all is ready, I also add some fixes.
Subtype used to autoformatting in DevTools. Now in console arrays displayed inline.
",3y3,2014-03-11 09:23:33
309,2014-03-03 07:51:58,"@bajtos , can I wait review on this week?
",3y3,2014-03-11 09:23:33
309,2014-03-03 09:35:47,"Please amend the commit message of 2747483e and add an empty line after the summary (the first line).
",bajtos,2014-03-11 09:23:33
309,2014-03-03 09:47:04,"Add tests verifying the fixes:
- object properties include **proto**
- the __proto__descriptor has expected properties (writable, enumerable, configurable, isOwn)
- `undefined` and `null` prototype is handled correctly (3rd screenshot)
- scope prototype is handled correctly (3rd screenshot)
- invalid date value is handled well.

How is it possible for the Date value returned by V8 to be an invalid date?
",bajtos,2014-03-11 09:23:33
309,2014-03-03 09:53:07,"Reviewed, see the comments above. Sorry for the delay.
",bajtos,2014-03-11 09:23:33
309,2014-03-03 12:05:22,"Thanks, I start to fix.
",3y3,2014-03-11 09:23:33
309,2014-03-03 12:06:37,"> Is there also undefined type? Should we handle it too?

No, 'undefined' subtype not exist.
",3y3,2014-03-11 09:23:33
309,2014-03-03 12:10:03,"> How is it possible for the Date value returned by V8 to be an invalid date?

Only a Date prototype is 'Invalid Date'.
",3y3,2014-03-11 09:23:33
309,2014-03-03 12:46:51,"> It's ok to add subtype: undefined, it will be discarded during JSON serialisation.

@bajtos , It was my first solution, but it needs to multiple changes of tests where used `deep.equal`. If you are ready to approve this solution, I will change the tests and code.
",3y3,2014-03-11 09:23:33
309,2014-03-03 14:30:42,"> > How is it possible for the Date value returned by V8 to be an invalid date?
> 
> Only a Date prototype is 'Invalid Date'.

How can I reproduce that in the GUI?
",bajtos,2014-03-11 09:23:33
309,2014-03-03 14:33:02,"> > It's ok to add subtype: undefined, it will be discarded during JSON serialisation.
> 
> @bajtos , It was my first solution, but it needs to multiple changes of tests where used `deep.equal`. If you are ready to approve this solution, I will change the tests and code.

That's fine, at least it's clear that the subtype property is expected to exist (even if `undefined`).
",bajtos,2014-03-11 09:23:33
309,2014-03-03 18:42:48,"> How is it possible for the Date value returned by V8 to be an invalid date?
> 
> > Only a Date prototype is 'Invalid Date'.
> > 
> > > How can I reproduce that in the GUI?

Inspect the Date in scope section, expand his properties and look at the proto.
",3y3,2014-03-11 09:23:33
309,2014-03-04 13:54:06,"Mistaken closing
",3y3,2014-03-11 09:23:33
309,2014-03-04 13:54:32,"@bajtos , all fixed and ready to next review.
",3y3,2014-03-11 09:23:33
309,2014-03-05 18:15:28,"> > > > How is it possible for the Date value returned by V8 to be an invalid date?
> > 
> > Only a Date prototype is 'Invalid Date'.
> > 
> > How can I reproduce that in the GUI?
> 
> Inspect the Date in scope section, expand his properties and look at the proto.

I see. While Chrome DevTools do the same (display Invalid Date), it looks really weird. How about displaying the prototype as a regular object? That way you can expand it and see all Date methods, etc.

<S_CODE_TOKEN>

Could you extract the Date related changes to a new pull request? (""No"" is an acceptable answer.)
",bajtos,2014-03-11 09:23:33
309,2014-03-05 18:16:20,"Other than the Date issue mentioned above, the patch looks good. Please rebase it on top of current master.
",bajtos,2014-03-11 09:23:33
309,2014-03-05 19:46:56,"> How about displaying the prototype as a regular object? That way you can expand it and see all Date methods, etc. In the future will work `console.dir`

@bajtos , I prefer to leave it as is. We can expand it in scope or watch window.

Rebased.
",3y3,2014-03-11 09:23:33
309,2014-03-06 07:58:03,"This is how Date prototype looks with your patch:
![screen shot 2014-03-06 at 8 50 49](https://f.cloud.github.com/assets/1140553/2342949/2d57f6be-a504-11e3-9ff5-3a9c791fa694.png)

And this is what I am proposing:
![screen shot 2014-03-06 at 8 54 08](https://f.cloud.github.com/assets/1140553/2342970/898649ea-a504-11e3-8caa-632bf362fd23.png)

Showing the prototype as ""Invalid Date"" is in my opinion misleading and confusing. What is your reason for preferring ""Invalid Date"" over ""Date""?
",bajtos,2014-03-11 09:23:33
309,2014-03-06 11:44:06,"> Showing the prototype as ""Invalid Date"" is in my opinion misleading and confusing. What is your reason for preferring ""Invalid Date"" over ""Date""?

Ok, then I propose to display this prototype as ""Object"" because it isn't instance of Date
",3y3,2014-03-11 09:23:33
309,2014-03-06 13:56:26,"> > Showing the prototype as ""Invalid Date"" is in my opinion misleading and confusing. What is your reason for preferring ""Invalid Date"" over ""Date""?
> 
> Ok, then I propose to display this prototype as ""Object"" because it isn't instance of Date

The prototype is not an ""Object"" either. This is the prototype chain:

<S_CODE_TOKEN>

You can use node REPL to verify:

<S_CODE_TOKEN>

Anyways, this problem is apparently pretty deep in V8. Given that, I am happy with any of these three options:
- ""Invalid Date""
- ""Date""
- ""Date.prototype""

Let me know your final opinion.

Please fix the two issues mentioned in the line comments too (missing break, filtering of **proto** properties).
",bajtos,2014-03-11 09:23:33
309,2014-03-06 13:58:19,"BTW:

<S_CODE_TOKEN>
",bajtos,2014-03-11 09:23:33
309,2014-03-06 16:41:48,"1. Regexp fixed.
2. Please, see my new solution for Date.
3. I can't imagine that i need to test this? (filtering was deleted, the situation when proto is undefined is possible only if it is get/set - I need to write this test?)
",3y3,2014-03-11 09:23:33
309,2014-03-07 15:55:39,"> I can't imagine that i need to test this? (filtering was deleted, the situation when proto is undefined is possible only if it is get/set - I need to write this test?)

It would be better to have a test for that, to make sure this behaviour will not get unintentionally broken by future commits. But I can live without it.

Please rewrite the history and move the fixes from the last commit into appropriate older commits, so that each commit makes sense on its own and there is no ""fixes"" commit.

Also remove trailing spaces - see the output of 

<S_CODE_TOKEN>
",bajtos,2014-03-11 09:23:33
309,2014-03-10 17:09:14,"@bajtos , is it ready, or anything else
",3y3,2014-03-11 09:23:33
309,2014-03-11 09:23:38,"Landed, thank you.
",bajtos,2014-03-11 09:23:33
309,2014-03-11 09:28:32,"Released in v0.7.1
",bajtos,2014-03-11 09:23:33
308,2014-02-18 18:54:51,"Follow-up for the conversation started in #305.

It would be nice to have a way how to start a debugging session of coffee-script application, i.e. to use `coffee --nodejs` instead of `node` to start the debugged process.

A possible solution:
- refactor `bin/node-debug` to allow customisation of `startDebuggedProcess`
- add a new script `coffee-debug` that will change `startDebuggedProcess` to execute `coffee --nodejs` instead of `node`

/cc @sidorares
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/1415824-coffee-debug?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",bajtos,
308,2014-11-13 19:03:58,"According to #224, `coffee --nodejs` breaks source map support.
",bajtos,
308,2014-11-14 08:07:47,"What about file extensions? (`node-debug app.coffee` will start debugged process as `coffee --debug ...`)
",3y3,
308,2014-11-14 09:54:38,"> @3y3 What about file extensions?

Good idea, that should work too.
",bajtos,
308,2016-04-01 19:47:02,"What about this? :) Easy way to debug coffee?
",antonmedv,
307,2014-02-18 17:38:13,"Closes #253:
- The file traversal ignores directories that can't be accessed. Node Inspector still prints a message to stderr, so that it's easier to detect this problem.
- If the project root does not contain package.json, only well-known subdirectories are listed:
  `./*.js, ./lib/**/*.js, ./node_modules/**/*.js, ./test/**/*.js`

Closes #237
- Add caching of the last file traversal result to prevent redundant traversals. Note we can't use glob's cache/statCache because it uses relative paths.
- Optimise parsing of source map URLs from the initial set of scripts - get rid of extra V8 requests.

@3y3 could you please review?
",bajtos,2014-02-19 17:24:43
307,2014-02-19 12:15:45,"@3y3 Thank you for the review. I have addressed all your comments, see the new commit. Is there anything else to improve?
",bajtos,2014-02-19 17:24:43
307,2014-02-19 17:12:53,"I have no significant remarks, only one small fix for autodocumentation `listParams` (if it is important)
",3y3,2014-02-19 17:24:43
307,2014-02-19 17:25:21,"> I have no significant remarks, only one small fix for autodocumentation listParams (if it is important)

I have fixed that too. Thank you for the review, it was valuable.
",bajtos,2014-02-19 17:24:43
306,2014-02-18 08:59:56,"Fix a bug where object values `{ objectId: '<id>' }` were not correctly
translated to V8 references `{ handle: <id>}`.

Close #273.

@3y3 would you like to review the change?
",bajtos,2014-02-18 17:26:39
306,2014-02-18 13:10:57,"Looks like good. 
During testing, I found a new problem:

<S_CODE_TOKEN>

In default debugger it works normal.
",3y3,2014-02-18 17:26:39
306,2014-02-18 14:36:20,"Please, ignore previous comment. DevTools works the same. For good result we need to evaluate `o = ({a:1})`
",3y3,2014-02-18 17:26:39
305,2014-02-17 19:06:15,"Add a CLI script `node-debug` that:
1. Runs node-inspector.
2. Runs the supplied script in debug mode or starts a REPL session
3. Opens the user's browser, pointing it at the inspector.

Add a CLI script `run-repl` (used by `node-debug`) that will load
the module in CWD and start a REPL session.

The script `node-debug` is friendly to embedders, error messages use the value of the env variable ""CMD"" when referring to $0.

/to: @sam-github please review. I'll submit the documentation changes in a standalone pull request.

The file node-debug.js is based on [strong-cli/lib/commands/debug.js](https://github.com/strongloop/strong-cli/blob/master/lib/commands/debug.js). The most notable difference is the naming of command-line arguments. I have decided to use the names that are already used by Node and Node Inspector (e.g. `--web-port` instead of `--port`, `--debug-brk` instead of `--suspend`). I have added aliases to keep backwards compatibility with `slc debug`.

/cc: @sidorares @Krxtopher @jfirebaugh
The script `node-debug` added by this pull request is replacing your modules [ni](https://github.com/sidorares/ni), [node-ndebug](https://github.com/resource/node-ndebug) and [node-debug](https://github.com/jfirebaugh/node-debug). Is there any feature that is implemented in your module and missing in node-inspector's node-debug?
",bajtos,2014-02-18 19:16:04
305,2014-02-17 19:52:00,":+1: Would love to see this built in.
",jfirebaugh,2014-02-18 19:16:04
305,2014-02-17 20:39:21,":+1: 
I don't have this functionality in my script, but really like to see coffescript and mocha integration - right now it's easier for me to use command-line debugger with `coffee --nodejs debug` and `mocha debug`
",sidorares,2014-02-18 19:16:04
305,2014-02-18 08:21:32,"@sidorares Debugging mocha tests is easy:

<S_CODE_TOKEN>

Supporting coffee script is more difficult, definitely out of scope of this pull request. Can you use `coffee -c -w` as a workaround for now?

@sam-github Thanks for review. I have added a couple of commits and replied to the rest of the comments. Anything else to improve?
",bajtos,2014-02-18 19:16:04
305,2014-02-18 12:05:49,"we currently do not pre-compile coffee in our project ( server.coffee + require('stuff.coffee') ) so `coffee -c -w` is not an option - I'd rather have `coffee --nodejs --debug-brk server.coffee` saved as npm script
",sidorares,2014-02-18 19:16:04
305,2014-02-18 18:55:00,"Some small tweaks for your consideration, but looks got to me, thank you.
",sam-github,2014-02-18 19:16:04
305,2014-02-18 18:55:27,"@sidorares let's move the coffee-script conversation to a new GH issue: #308.
",bajtos,2014-02-18 19:16:04
304,2014-02-17 18:39:13,"WebSocketServer emits the errors raised by the underlying http.Server,
thus we have to detect and prevent the situation when a single error
is reported twice.
",bajtos,2014-02-17 18:39:39
303,2014-02-17 09:51:06,"Error: write EPIPE
Error: write EPIPE
Debugger.setPauseOnExceptions failed.
ErrorNotConnected: Error: write EPIPE
",linjianzao,2014-02-18 09:02:50
303,2014-02-17 10:02:27,"Hi @linjianzao, thank you for the bug report. How can I reproduce the issue on my machine? Please provide more details.
",bajtos,2014-02-18 09:02:50
303,2014-02-17 11:21:37,"first:
[linjianzao@localhost helloworld]$ node debug app.js 
< debugger listening on port 5858
connecting... ok
break in app.js:6
  4  */
  5 
  6 var express = require('express');
  7 var routes = require('./routes');
  8 var user = require('./routes/user');
debug> 
than:
[linjianzao@localhost helloworld]$ node-inspector 
Node Inspector v0.7.0-2
   info  - socket.io started
Visit http://127.0.0.1:8080/debug?port=5858 to start debugging.

than: use chrome visit the url .

The chrome console show :
Error: write EPIPE
Error: write EPIPE
Debugger.setPauseOnExceptions failed.
ErrorNotConnected: Error: write EPIPE

My OS is  fedora 20 . 64bit
node  v0.10.24
Node Inspector v0.7.0-2
The app.js   is  express's example

sorry , my english is so bad. 
thank you  very much
",linjianzao,2014-02-18 09:02:50
303,2014-02-17 12:20:00,"use `--debug` instead of `debug`. Last command opens the standart debugger that holds 5858 port
",3y3,2014-02-18 09:02:50
303,2014-02-17 12:41:08," when i --debug by port 8585 it show me error.so ,i think that is wrong. now,i instead of port 3000 it  work. thank you  very much .
",linjianzao,2014-02-18 09:02:50
303,2014-02-18 09:02:50,"@3y3 is correct, you should run `node --debug app.js`.

<S_CODE_TOKEN>

Make sure you use the correct port value - it's 5858, not 8585.
",bajtos,2014-02-18 09:02:50
302,2014-02-16 16:17:33,"I :heart: this project! :smile: 
",IonicaBizau,2014-02-17 08:09:50
302,2014-02-17 08:09:50,"Landed as e7e7e97d8, thank you!
",bajtos,2014-02-17 08:09:50
301,2014-02-13 20:36:25,,branderbrett,2014-02-20 17:52:38
301,2014-02-20 17:52:38,"The title is incomplete and there is no description. Closing as invalid.
",bajtos,2014-02-20 17:52:38
300,2014-02-11 07:40:31,"Convert V8 object with type='error' to DevTools object with
type='object'. This fixes the problem where Error values
were displayed as ""undefined"" in the front-end.

Close #299.
",bajtos,2014-02-11 07:40:56
299,2014-02-10 19:40:55,"<S_CODE_TOKEN>

In the node-inspector /debug page, 
![screenshot 2014-02-10 at 11 40 25 am](https://f.cloud.github.com/assets/158352/2129762/357fe2f6-928b-11e3-8e74-9d649c1e0984.png)

<S_CODE_TOKEN>

node v0.10.24
Node Inspector v0.7.0-2
chrome 32.0.1700.103
",kzahel,2014-02-11 07:40:56
299,2014-02-10 19:42:09,"It would be cool if these basic error types supported introspection (i.e. clicking to expand properties and such), but maybe this is out of scope of this project, I am not sure.
",kzahel,2014-02-11 07:40:56
299,2014-02-11 07:43:29,"Hi @kzahel, thank you for the bug report.

The issue is fixed, please install node-inspector from master until a new version is published to npmjs:

<S_CODE_TOKEN>
",bajtos,2014-02-11 07:40:56
298,2014-02-05 23:26:52,"wrong github. whoops.
",bugs181,2014-02-05 23:30:16
297,2014-02-05 10:10:09,,3y3,2014-02-05 14:01:56
297,2014-02-05 14:02:07,":+1: 

Landed, thanks.
",bajtos,2014-02-05 14:01:56
296,2014-01-30 12:03:05,"This is a replacement of socket.io as the server-transport with websockets using WS instead.

Should be fixing #290 and #274.
#### Consequences:
- Re-gained compatibility with Chrome DevTools.
-  Re-gained compatibility with current version of the RemoteDebug protocol.
#### Potential enhancements:
- There should probably be added a few tests to test the connection itself.
#### Tests:
- Tested in Chrome 32.
- All unit tests are passing. 
",auchenberg,2014-02-10 06:23:14
296,2014-01-30 14:03:56,"@pritambaral Could you please check that this pull request is not breaking your use case?

@gcochard @gdw2 Could you please check if this pull request fixes your problem?
",bajtos,2014-02-10 06:23:14
296,2014-01-30 14:05:15,"@auchenberg Thank you for the pull request. The change looks generally good, see my line comment about a possible regression.
",bajtos,2014-02-10 06:23:14
296,2014-01-30 18:33:47,"@bajitos It fixes my problem. Thanks!
",gcochard,2014-02-10 06:23:14
296,2014-01-30 18:45:03,"> It fixes my problem. Thanks!

Now that's cool :)
",bajtos,2014-02-10 06:23:14
296,2014-01-31 12:36:32,"Updated the pull request with the proper relative path handling for the websocket url, and squashed commits to keep the history clean. 

Changes: ce5bd4869f22f98b9b0ca5970a99a3a4a7b2c648
",auchenberg,2014-02-10 06:23:14
296,2014-01-31 14:00:24,"Thanks for the update. One more detail to fix - see my line comment.

Please squash all commits into a single one. The application won't work without all of the commits applied, so I don't see value in keeping the changes split into multiple commits. Feel free to provide more details in the commit description though (perhaps based on the messages of the small commits).
",bajtos,2014-02-10 06:23:14
296,2014-02-02 11:59:27,"Squashed.

Personally I prefer smaller individual commits, and one merge commit as the atomic-comment, but there you go :)
",auchenberg,2014-02-10 06:23:14
296,2014-02-03 08:15:26,"Thanks. As I tested the change before merging, I discovered a bug. When you reload the Node-Inspector page in the browser, the new session reports EPIPE errors.

The problem is in [lib/FrontendClient.js#L30](https://github.com/node-inspector/node-inspector/blob/4f6bc0b43fb525acf0d420874e80c4be0aa9538e/lib/FrontendClient.js#L30) which expects `disconnect` event, while ws emits `close` event.
",bajtos,2014-02-10 06:23:14
296,2014-02-04 13:48:44,"Aha. I wonder if we should add some test to capture these regressions? 
",auchenberg,2014-02-10 06:23:14
296,2014-02-04 14:47:18,"> Aha. I wonder if we should add some test to capture these regressions?

Tests would be nice, but since we don't have any tests for the browser-facing code yet, I feel it would be too much to ask you to start them.

Perhaps it's enough to refactor the code, so that all socket.i/ws specific code stays in single place?

I'll leave the decision up to you, I will accept the pull request even if you only replace `disconnect` with `close`.
",bajtos,2014-02-10 06:23:14
296,2014-02-07 18:00:40,"I would make sense to refactor the code, so the socket/connection logic is contained within one place.

However I don't have the time to make the refactor now, so I have just pushed the renaming of the `disconnect`-event to `close`.
",auchenberg,2014-02-10 06:23:14
296,2014-02-10 06:23:11,"Landed as a00f36d, thank you.
",bajtos,2014-02-10 06:23:14
296,2014-02-10 06:42:08,":+1: 
",auchenberg,2014-02-10 06:23:14
295,2014-01-28 11:23:08,"Hi,

last couple of days i have came across a weird debugging behavior while debugging the node.js code instead of hitting the break point the debugger just kept on breaking on all the modules it gets his hands on :(

wonder if anyone encounter similar glitch??? any quick work around how to suppress this behavior

Thanks
",burhanfarooq,2014-12-18 17:01:21
295,2014-01-28 16:12:11,"What version of Node Inspector and Node are you using?

Can you reproduce the problem on the [simple-server application](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js) from [node-debug-samples](https://github.com/node-inspector/node-debug-samples)?
",bajtos,2014-12-18 17:01:21
295,2014-01-29 06:11:03,"@bajtos  actually this happen just after updating to the latest version of node inspector prior to that it was working fine.
wonder if the latest update break something causing this as this issue not happening on other instances.
",burhanfarooq,2014-12-18 17:01:21
295,2014-01-29 11:43:14,"> wonder if the latest update break something causing this as this issue not happening on other instances.

It's possible. #272 seems to have unintended side effects, I have already fixed one problem in #292.

I can't help you more without an example allowing me to reproduce the problem on my machine.
",bajtos,2014-12-18 17:01:21
295,2014-12-18 17:01:21,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 17:01:21
294,2014-01-28 05:31:10,"I've read through all the other issues related to blank screens.
Did all that was suggested. git clone, npm install, etc.

**Then I noticed it was working when I didn't have fiddler up.**
_Closing fiddler solved the problem._

I monitored all socket communication in Fiddler and it seemed fine. To my knowledge all fiddler does is redirect the system proxy to itself.

Any reason why node-inspector doesn't work with fiddler?
",anlawande,2014-12-18 12:49:07
294,2014-02-20 17:53:35,"Does Fiddler support websockets?

Please try with the recently released v0.7.0 - we ditched socket.io and use plain websockets instead. It may help.
",bajtos,2014-12-18 12:49:07
294,2014-03-03 07:13:46,"@bajtos tried with v0.7.0 . Still nothing. Don't think this is a node-inspector issue though...
",anlawande,2014-12-18 12:49:07
294,2014-03-03 07:19:02,"There is one more thing you can try: run node inspector with protocol tracing:

<S_CODE_TOKEN>

Check if there are ""devtools backend"" and ""v8-debug"" messages in the stderr output.
",bajtos,2014-12-18 12:49:07
294,2014-12-18 12:49:07,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 12:49:07
293,2014-01-24 09:25:31,"Allows hosting with a reverse-proxy, like Nginx, on any domain/subfolder/subfolder2 level.

Also, when the app in the main domain (http://example.com/) is already a socket.io app, node-inspector's socket.io, which was hardcoded to <domain>/socket.io/, used to conflict.
",pritambaral,2014-01-27 13:13:18
293,2014-01-24 09:46:51,"Hello @pritambaral, thank you for the pull request. Please simplify the code in front-end-node/Overrides.js per my comment above and reword the commit message to follow [50/72 rule](https://github.com/node-inspector/node-inspector/wiki/Contributing#git-commitspatches). Note you should not create a new pull request for these changes, keep them in the current one instead (see [Addressing code review issues](https://github.com/node-inspector/node-inspector/wiki/Contributing#addressing-code-review-issues)).
",bajtos,2014-01-27 13:13:18
293,2014-01-24 10:10:30,"I have reworded the commit and addressed your comment, (my [response comment](https://github.com/node-inspector/node-inspector/pull/293/files#r9143713) ) might get buried under ""outdated diff.""

Is the ternary operator allowed or should I convert that into if ... else blocks?
",pritambaral,2014-01-27 13:13:18
293,2014-01-24 10:32:42,"> The obective here isn't to modify the URL; that logic works just fine.
> The objective is to make socket.io adhere to a subdomain, if any; since socket.io insists on extracting the domain: handshake, io.connect

Thanks for the pointers to socket.io docs, I was not aware that the path should be passed as a `resource` option.

> Is the ternary operator allowed or should I convert that into if ... else blocks?

The ternary operator is fine, but the way how you used it makes it difficult to understand the code.

I also don't like the dependency on `/debug` in the URL, using a relative URL is IMO safer. The `a` dom element contains properties for different parts of the URL, you can e.g. get only `pathname`:

<S_CODE_TOKEN>

See also https://gist.github.com/jlong/2428561.
",bajtos,2014-01-27 13:13:18
293,2014-01-24 10:40:36,"> I also don't like the dependency on /debug in the URL, using a relative URL is IMO safer. The a dom element contains properties for different parts of the URL, you can e.g. get only pathname

Neither do I, but it seems the a condition check is necessary. socket.io craps out if resource is set to ""/socket.io"" when it should be ""socket.io"" (source: manually tested in browser).

I'm gonna comment this^ in the code.

Is there a variable/template for the ""/debug"" part, to make it future proof?

Btw, I believe a dom elements {`href`,`pathname`,etc.} behave the same as `window.location`'s
",pritambaral,2014-01-27 13:13:18
293,2014-01-24 10:49:28,"> Neither do I, but it seems the a condition check is necessary. socket.io craps out if resource is set to ""/socket.io"" when it should be ""socket.io"" (source: manually tested in browser).

I see, here is the [code building the url](https://github.com/LearnBoost/socket.io-client/blob/0.9/dist/socket.io.js#L1470-L1473).

So it should be enough to drop the leading '/'?

<S_CODE_TOKEN>

BTW I think your comment is not entirely correct, the resource should not start with slash in both cases. The difference is in how double slash is handled by nginx (`http://host:port//subfolder/socket.io`) and express (`http://host:port//socket.io`). Nginx treates two slashes as a one, while express does not.
",bajtos,2014-01-27 13:13:18
293,2014-01-24 10:59:35,"> So it should be enough to drop the leading '/'?

Oh! Of course! Why didn't I think of that!?

> BTW I think your comment is not entirely correct, the resource should not start with slash in both cases.

Ah, my comment only remarks on the ""no subfolder"" case. Although, 

> Nginx treates two slashes as a one, while express does not.

^is perfectly correct.

I'll update the PR with resolveRelativePath
",pritambaral,2014-01-27 13:13:18
293,2014-01-27 13:13:59,"Landed, thank you for the contribution!
",bajtos,2014-01-27 13:13:18
292,2014-01-23 13:15:42,"Fixed the code adding maxStringLength to V8 requests, so that it no longer creates a new args object when the caller did not provide one.
",bajtos,2014-01-23 13:16:09
291,2014-01-22 07:49:46,"socket.io uses its own fancy handshake handling which makes node-inspector incompatible with other implementations of the debugger protocol. Since I don't think the UI is supposed to be compatible with older browsers, it should be safe to just switch to ""normal"" `WebSocket`s.
",jkrems,2014-01-22 07:50:14
291,2014-01-22 07:50:14,"Sorry, duplicate.
",jkrems,2014-01-22 07:50:14
290,2014-01-22 07:49:22,"socket.io uses its own fancy handshake handling which makes node-inspector incompatible with other implementations of the debugger protocol. Since I don't think the UI is supposed to be compatible with older browsers, it should be safe to just switch to ""normal"" `WebSocket`s.
",jkrems,2014-02-19 17:29:51
290,2014-01-22 08:06:49,"Hello @jkrems, thank you for submitting the issue. I don't mind dropping socket.io in favour of plain websockets, as long as it doesn't break anything. (Related issue: #274 Websockets connection not working.)

Honestly, this has a very low priority for me. Node Inspector is shipping it's own snapshot of DevTools front-end and I don't plan to support other front-ends, thus the communication protocol is an implementation detail. At least until [RemoteDebug](http://remotedebug.org/) gets more traction, but that's a different story.
",bajtos,2014-02-19 17:29:51
290,2014-01-22 08:09:31,"Having said that, feel free to send a pull request. If the folks experiencing #274 will be able to use Node Inspector with your patch applied (or have an easy workaround solution), I am happy to accept it.
",bajtos,2014-02-19 17:29:51
290,2014-01-29 14:16:16,"I'm using the [ws](http://einaros.github.io/ws/) WebSocket server in my [emotedebug-firefox-bridge](https://github.com/auchenberg/remotedebug-firefox-bridge/blob/master/lib/server.js#L52) prototype, and it's fully compliant with the web socket implementation in Chrome.

By looking at commit https://github.com/node-inspector/node-inspector/commit/ecc268efdcb2ea5717b9c22f14a026770ee0e947, when socket.io was added, it looks relatively easy to use `ws` over `websocket-server` in order to get rid of socket.io and gain websocket compatibility. 
",auchenberg,2014-02-19 17:29:51
290,2014-02-19 17:29:51,"Implemented by #296.
",bajtos,2014-02-19 17:29:51
289,2014-01-21 22:21:59,"Now, if app was closed, Inspector waits to reconnects.
Added new error type 'ErrorTargetCrashed'.
Added new frontend command 'reloadInspector'.
Realised frontend command 'targetCrashed'.
",3y3,2015-01-30 18:37:14
289,2014-01-22 10:16:03,"@bajtos , I know that this realisation isn't so simple how described in #266, but this leaves opportunity to create in future a new dialog with list of processes able to connect 
",3y3,2015-01-30 18:37:14
289,2014-01-22 10:29:33,"I am rather tight on schedule these days, I can't promise when I will have time to review such complex change.

> this leaves opportunity to create in future a new dialog with list of processes able to connect

Honestly, unless you are going to submit a pull request for this feature in the next few weeks, it's better to stick with a simpler solution and don't worry too much about features that may or may not be implemented in the future. More often than not, ""in the future"" is same as ""never"".
",bajtos,2015-01-30 18:37:14
289,2014-02-04 06:57:13,"I have landed #286 first, as it involves less code.

However, the constant reloading of browser page is not very nice, I'll try to review your PR and get it ready for merge too.
",bajtos,2015-01-30 18:37:14
289,2014-02-13 10:13:38,"1) I would like to keep the behaviour same in all disconnected cases and always sent the same inspector event - either `Inspector.targetCrashed` or `Inspector.targetDetached`. The `targetDetached` event is IMO better, because it's possible to include the reason and hit the user to check if the process has debugger listening on the right port.

Unless there is a reason why we can't use the same event everywhere, you can ignore the two line comments about `createFailingConnection` changes, revert that part of your patch and keep using ErrorNotConnected everywhere.

2) While Node Inspector is trying to connect to the debugged process, it prints a lot of ""Error: connect ECONNREFUSED\nIs node running with --debug port 5858?"" to front-end console (most likely one message for every attempt). There should be only one message printed.

3) You current implementation breaks `--debug-brk`:
- backend connects to the new process, which is stopped at line 1
- backend sends reload command to front-end
- while reloading the page, front-end closes websocket
- backend detects closed websocket and detaches from the debugger
- the debugged process resumes execution
- front-end loads the page, opens a new websocket
- backend reconnects to the debugged process

I tried to figure out how to reset DevTools front-end without reloading a page, since that's what the help for `targetCrashed` says, but I did not find anything.
",bajtos,2015-01-30 18:37:14
289,2014-02-13 10:31:36,"I killed and reloaded page in Chrome canary while having the DevTools opened, here is the part of the communication between front-end and back-end that looks relevant for us: 

<S_CODE_TOKEN>

I would expect that one of the `Page.frameNavigated` or `Page.frameStartedLoading` is triggering the refresh of inspector's internal state.

It would be great if Node Inspector could reload the debugging session while staying on the same page, i.e. by sending correct events from the backend instead of reloading the whole front-end page. 
",bajtos,2015-01-30 18:37:14
289,2014-02-13 11:42:34,"> It would be great if Node Inspector could reload the debugging session while staying on the same page, i.e. by sending correct events from the backend instead of reloading the whole front-end page.

Yes, it wold be great way.
I'm glad that you're ready to take another method of reloading. I'm start to modify PR.
",3y3,2015-01-30 18:37:14
289,2014-02-20 15:24:04,"I have investigated how the Chrome DevTools handle page change/reload/reattach.

The front-end doesn't send `Debugger.enable` and `Page.getResourceTree` again. Instead, it changes the internal state when certain events are received:
- `Page.frameNavigated` resets the resource tree
- `Debugger.globalObjectCleared` resets debugger scripts
- `Network.responseReceived` and `Network.loadingFinished` adds a new item to the resource tree (probably)
- `Debugger.scriptParsed` registers a new script with the debugger (this is already used by Node Inspector)

These are the possible ways how to continue with the pull request:
1. Do not send `Page.frameNavigated` and `Network.responseReceived` events on reload, send `Debugger.globalObjectCleared` only. This way it won't be possible to set breakpoints in files that were added after restart before they are loaded by V8. (Example: a new mocha unit-test file.) We might discover more similar problems, since this is not the intended usage of the protocol.
2. Refactor PageAgent and file listing so that it's easy to send the list via `Network.responseReceived/Network.loadingFinished` events
3. Keep reloading the whole front-end web page when the debugged process was restarted. Implement reuse of the same DebuggerClient between websocket sessions to fix the issue with `--debug-brk`. The tricky part is how to detect the situation when the expected websocket connection did not arrive (e.g. user cancelled the reload), so that we can close the debuger connection.

I would prefer the second option, unfortunately it will take quite some time to implement. For the time being, I am going to increase the timeout in front-end-node/Overrides.js to reduce the frequency of page reloads.
",bajtos,2015-01-30 18:37:14
289,2015-01-29 07:57:01,"@3y3 what is the status of this PR? It seems like a lot of work to get little benefits, are you still keen to finish it? If not, then I am proposing to close it.
",bajtos,2015-01-30 18:37:14
289,2015-01-30 18:37:09,"I prefer to close this pr now. When I'll ready to fix this issue I'll make new pr.
",3y3,2015-01-30 18:37:14
288,2014-01-21 15:12:29,"ws@0.4.31 install C:\Documents and Settings\Administrator.ZY-201012121303\Application Data\npm\node_modules\node-inspector\node_modules\socket.io\node
\socket.io-client\node_modules\ws

> (node-gyp rebuild 2> builderror.log) || (exit 0)

C:\Documents and Settings\Administrator.ZY-201012121303\Application Data\npm\node_modules\node-inspector\node_modules\socket.io\node_modules\socket.io-c
de_modules\ws>node ""E:\nodejs\node_modules\npm\bin\node-gyp-bin\....\node_modules\node-gyp\bin\node-gyp.js"" rebuild
cl : Command line error D8004: '/MP' requires an argument [C:\Documents and Settings\Administrator.ZY-201012121303\Application Data\npm\node_modules\nod
ctor\node_modules\socket.io\node_modules\socket.io-client\node_modules\ws\build\binding.sln]
Project : warning PRJ0018: The following environment variables were not found: [C:\Documents and Settings\Administrator.ZY-201012121303\Application Data
de_modules\node-inspector\node_modules\socket.io\node_modules\socket.io-client\node_modules\ws\build\binding.sln]
![Uploading npm install  inspector info.PNG . . .]()
",websailor,2014-01-21 16:28:07
288,2014-01-21 16:28:07,"Hello @websailor, thank you for reporting the issue here.

The error messages says that npm was not able to compile the native module `ws`. This could be a bug in the `ws` module, or a misconfiguration of your machine.

Either way, please fill an issue in the ws project: https://github.com/einaros/ws
",bajtos,2014-01-21 16:28:07
287,2014-01-20 16:04:22,"docs/embedding.md had a misspelled word
",focusaurus,2014-01-20 19:55:52
287,2014-01-20 19:57:04,"Landed, thank you for the contribution.

Please don't create new pull requests when you need to change the commit message next time. Use `git commit --amend` and `git push -f` instead.
",bajtos,2014-01-20 19:55:52
286,2014-01-19 05:04:33,"This is a very simple solution to fix #266 and reload the browser when the inspected node script restarts. I am wondering if this should be an option in the cli otherwise it will do this every time node-inspector detaches. Any thoughts?
",ChrisWren,2014-02-04 06:54:54
286,2014-01-20 10:02:45,"Hi @ChrisWren,

Thank you for the pull request.
1. Files in front-end/ directory are coming from Chrome Developer Tools and they are completely replaced every time we upgrade to a newer version. All front-end patches are kept in a special file - [front-end-node/Overrides.js](https://github.com/node-inspector/node-inspector/blob/master/front-end-node/Overrides.js). You need to find a way how to implemented the reload there.
2. Please add a short timeout before calling `location.reload()` to give the debugged application some time to (re)start. I would go for a value between 50ms to 200ms.
",bajtos,2014-02-04 06:54:54
286,2014-01-21 05:09:48,"I updated the PR to poll every 100ms for a detach then wait 100ms before reload.
",ChrisWren,2014-02-04 06:54:54
286,2014-01-21 06:29:34,"> I think that checking of DOMElement is a bad practice. How about overriding the Inspector.detached protocol event?

:+1: that's the right way
",bajtos,2014-02-04 06:54:54
286,2014-01-29 05:21:05,"Agreed, thanks for the tip. I am not too familiar with the project so I just followed the stack overflow implementation.

How about the amended commit?
",ChrisWren,2014-02-04 06:54:54
286,2014-01-29 08:19:52,"@ChrisWren , you can also test #289 - it realises other solution of reloading:
1) Backend waits to reconnecting of app
2) Backend sends to frontend 'reloadInspector'
In other words we don't have infinite reloading of page.
",3y3,2014-02-04 06:54:54
286,2014-01-30 08:06:46,"@ChrisWren the new commit looks better. There is one more thing to improve - your new `WebInspector.detached` should call he original function, so that the black overlay informing user about the problem is displayed until the page is reloaded.
",bajtos,2014-02-04 06:54:54
286,2014-02-04 04:51:40,"Ok, updated the commit.
",ChrisWren,2014-02-04 06:54:54
286,2014-02-04 06:54:54,"Landed as 10fef67, thank you for the contribution.
",bajtos,2014-02-04 06:54:54
285,2014-01-18 16:53:25,,focusaurus,2014-01-20 16:03:31
285,2014-01-20 09:56:37,"Hello @focusaurus, thank you for the pull request. Please improve the commit message to better describe the change, e.g. `Fixed typo in docs/embedding.md`.

See also [Contributing Guide](https://github.com/node-inspector/node-inspector/wiki/Contributing#git-commitspatches).
",bajtos,2014-01-20 16:03:31
285,2014-01-20 16:03:30,"OK
",focusaurus,2014-01-20 16:03:31
284,2014-01-17 10:19:21,"I am having the following issue - I am attempting to debug/set a breakpoint in code that is run using the vm module. The only way that I have found to accomplish this is by putting a debugger statement:

<S_CODE_TOKEN>

Is there any other way to accomplish this?
",dininski,2014-01-17 14:21:41
284,2014-01-17 11:00:26,"What is the ""vm module""? Can you send me a list of steps how to reproduce the problem on my machine?
",bajtos,2014-01-17 14:21:41
284,2014-01-17 11:32:42,"An example using Node's vm:

<S_CODE_TOKEN>

The following allows me to put a breakpoint anywhere in context object, but the only way to get a breakpoint in the `unsafe` code is by putting a debugger statement.
",dininski,2014-01-17 14:21:41
284,2014-01-17 12:45:16,"Thank you for the full example.

So what is happening under the hood: `vm.runInContext` loads your script as a new source file. Unless you pass `filename` parameter, it gets assigned the name `evalmachine.<anonymous>`.

Once this ""file"" is loaded, you can set breakpoints and they are triggered correctly. Node Inspector restores breakpoints in files it has seen, so your breakpoint will be restored when you load this file again.

However, there is a timing issue: the interval between the time when V8 reports a new script file was added, and the time when the code in this new file is run, is so small, that Node Inspector does not manage to enable breakpoints fast enough.

Regular source files have the same problem too, e.g. when debugging mocha unit tests. There is a way how to get around this problem - Node Inspector has to send a list of all project files to the front-end at the beginning of the debugging session, even before these files are loaded by V8. Breakpoints are then set in sort of a forward way, in files that will be loaded later.

So, what you can do:
- Keep the code executed by `vm` module in files, the files must be inside the directory where the package.json of your project is. E.g. if you have `~/src/my-project/package.json`, then the unsafe scripts can be in `~/src/my-project/unsafe/script1.js`.
- These script files must exist at the time when you load Node Inspector webpage.
- In your application code, always pass the full path of the script file when calling `vm.runInContext` or `vm.createScript` (there is a parameter `filename` for that).

This approach won't work if you are executing a short-living script from a snippet that you obtain at runtime. I don't know any solution for that use case, other than adding `debugger;` statements.

I hope my answer makes sense, let me know if you need more clarification.
",bajtos,2014-01-17 14:21:41
284,2014-01-17 13:21:27,"That worked like a charm! IMHO the `filename` parameter was not documented well enough in vm's official documentation. 
I think you can safely close this issue.
Thanks again!
",dininski,2014-01-17 14:21:41
284,2014-01-20 07:53:10,"What exactly do you mean by short-living script from a snippet?  I made a simple app which loads an ""unsafe"" code example every 3 seconds and occasionally I get ""Cannot call method 'lineEndings' of undefined "" when opening node inspector and I get an empty file. Is there a reason for this to happen? 
",dininski,2014-01-17 14:21:41
284,2014-01-20 13:12:11,"By a short-living script I mean a piece of code that returns almost immediately. As opposed to a long-living script, that starts some kind of an event loop (e.g. http server).

""Script from snippet"" meant that the code is coming from a user, i.e. there is no physical file. More specifically, there is no filename, thus you have to generate the filename parameter yourself. The approach outlined above does no work if you can't keep the same filename for the same script, e.g. because you always generate a new unique filename every time you evaluate the snippet.

I haven't encountered  ""Cannot call method 'lineEndings' of undefined "" myself, feel free to open a new issue. Just make sure to include source file & line of the error in the issue description.
",bajtos,2014-01-17 14:21:41
283,2014-01-12 15:25:56,"http 304 https://registry.npmjs.org/strong-data-uri
npm http GET https://registry.npmjs.org/strong-data-uri/-/strong-data-uri-0.1.0.tgz
npm http 200 https://registry.npmjs.org/strong-data-uri/-/strong-data-uri-0.1.0.tgz
npm ERR! TypeError: Object #<Object> has no method 'match'
npm ERR!     at Object.scriptpath_ (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:138:23)
npm ERR!     at Array.forEach (native)
npm ERR!     at scriptpath (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:132:19)
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:119:33
npm ERR!     at Array.forEach (native)
npm ERR!     at extras (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:118:21)
npm ERR!     at parseJson (/usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:87:17)
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/read-package-json/read-json.js:59:33
npm ERR!     at fs.js:266:14
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/read-installed/node_modules/read-package-json/node_modules/graceful-fs/graceful-fs.js:103:5
npm ERR! If you need help, you may report this _entire_ log,
npm ERR! including the npm and node versions, at:
npm ERR!     http://github.com/isaacs/npm/issues

npm ERR! System Linux 2.6.39-400.212.1.el6uek.x86_64
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""node-inspector""
npm ERR! cwd /u01/inetjIdeaUltimate/idea-IU-133.331/bin
npm ERR! node -v v0.10.24
npm ERR! npm -v 1.3.23
npm ERR! type undefined_method
http 200 https://registry.npmjs.org/async
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /u01/inetjIdeaUltimate/idea-IU-133.331/bin/npm-debug.log
npm ERR! not ok code 0
",olegator1,2014-01-13 19:12:40
283,2014-01-13 19:12:40,"This looks like a problem with npmjs.org, I can't reproduce on my machine. Please report the issue to npmjs bug tracker: https://github.com/npm/npm-www/issues

You can try to install from the European mirror: http://npmjs.eu/
",bajtos,2014-01-13 19:12:40
283,2014-01-16 14:47:56,"https://github.com/npm/npm/issues/4468#issuecomment-32168324
",olegator1,2014-01-13 19:12:40
283,2014-01-16 15:12:48,"Looks like a duplicate of strongloop/strong-data-uri#1. The user was able to fix the problem by reinstalling npm.
",bajtos,2014-01-13 19:12:40
282,2014-01-11 22:49:04,"Close #281
",3y3,2014-01-17 13:18:16
282,2014-01-16 09:56:38,"I have run your version locally and could not see any difference in the GUI - the inspector front-end still displays `Date: Thu Jan 16 2014 10:51:13 GMT+0100 (CET)`. Is that intented?

In other words, it means your pull request is not changing the behaviour observable by users, it just fixes the implementation. Is that correct?
",bajtos,2014-01-17 13:18:16
282,2014-01-16 10:19:57,"> I have run your version locally and could not see any difference in the GUI - the inspector front-end still displays Date: Thu Jan 16 2014 10:51:13 GMT+0100 (CET). Is that intented?

Please ignore that comment, I was running a different version of Node Inspector.
",bajtos,2014-01-17 13:18:16
282,2014-01-16 10:21:33,"@bajtos, no, isn't correct - how you can see in chnges, I removed `'Date: '` prefix .
In last commit I update test
",3y3,2014-01-17 13:18:16
282,2014-01-16 10:27:16,"Please make the commit message more descriptive - explain how was the Date format changed. Don't forget to use the past tense.
",bajtos,2014-01-17 13:18:16
282,2014-01-16 10:27:52,"Few formal details to fix, the patch is otherwise ready for merge.
",bajtos,2014-01-17 13:18:16
282,2014-01-17 13:01:29,"Rebase to last commit is needed?
",3y3,2014-01-17 13:18:16
282,2014-01-17 13:18:16,"> Rebase to last commit is needed?

It's nice to have, but not necessary.

I have landed your changes as 9b1a156f97, thank you for the contribution!
",bajtos,2014-01-17 13:18:16
281,2014-01-11 22:26:57,"When we inspect objects, we wait to see his lookup or his string representation.

Now when we inspect the Date object, I see `""Date: ""` + Date object string representation.

What is the reason for prefix ""Date""? 
Also it displays as object (we can expand him)
",3y3,2014-01-17 13:18:27
281,2014-01-13 17:34:00,"See #261 and #269 for the rationale.
",bajtos,2014-01-17 13:18:27
281,2014-01-14 03:26:33,"Yes, I saw it, but I think that this format is incorrect.
In some cases user can decide to parse Date with regexps same as `/Date\:\s(w+).*/` etc.

In this pull request I fix format and also fix color of message (when set type as `date`).
I think this is enough to distinguish date and string
",3y3,2014-01-17 13:18:27
280,2014-01-10 17:35:43,,3y3,2014-02-05 06:56:27
280,2014-01-13 19:52:02,"It seems to me that the current format of the help message does not scale well. How about getting rid of table-based layout and switching to a simple list?

<S_CODE_TOKEN>

Taking this to a next level, the first line could be completely auto-generated from the option definition, as we already know the type and the default value. But that's probably out of scope of this pull request.
",bajtos,2014-02-05 06:56:27
280,2014-01-14 03:17:58,"I can create new pull request in the near future or modify this pull request.
",3y3,2014-02-05 06:56:27
280,2014-01-14 07:47:43,"Please keep the changes in this pull request, don't open a new one.
",bajtos,2014-02-05 06:56:27
280,2014-01-16 10:53:58,"@bajtos Sorry for unrelated changes but this is work of gjslint.
",3y3,2014-02-05 06:56:27
280,2014-01-16 13:33:04,"It looks much better now. Could you at least split the commit into two, the first one fixing spacing, the second on implementing the new help message?

In case you haven't done that before - `git reset` and `git add -p` are the tools.
",bajtos,2014-02-05 06:56:27
280,2014-01-17 13:41:49,"Now there only related changes. I wait closing this pull-request and #279 and then I will start to create pull request with indentation changes (is a good idea to change indentation in places same as [FrontendCommandHandler.js#L43](https://github.com/node-inspector/node-inspector/blob/master/lib/FrontendCommandHandler.js#L43)?)
",3y3,2014-02-05 06:56:27
280,2014-02-04 14:54:59,"The ANSI code used for the option description sets color to white instead of the default text color, see the screenshot:

![screen shot 2014-02-04 at 15 51 06](https://f.cloud.github.com/assets/1140553/2077062/35aba118-8dac-11e3-8bde-b0f890b76b93.png)

Is it possible to use the default text color?
",bajtos,2014-02-05 06:56:27
280,2014-02-05 06:19:35,"About colors: I fixed color by default. Useful link [wiki/ANSI_escape_code](http://en.wikipedia.org/wiki/ANSI_escape_code)
About \r\n: In this situation is not necessary to use it. I use it by default because it's a standart for web protocols.
PR rebased.
",3y3,2014-02-05 06:56:27
280,2014-02-05 06:56:54,"Landed, thank you.
",bajtos,2014-02-05 06:56:27
279,2014-01-10 17:26:12,"Closes #278.
",3y3,2014-01-23 13:21:19
279,2014-01-13 19:43:48,"Thank you for the pull request. Please add a simple unit-test, see the existing tests for `v8RefToInspectorObject` in `test/convert.js` for inspiration.
",bajtos,2014-01-23 13:21:19
279,2014-01-17 13:33:52,"Added test. Is it ready ti pull request?
",3y3,2014-01-23 13:21:19
279,2014-01-23 13:21:19,"Landed as 4f6bc0b43, thank you!
",bajtos,2014-01-23 13:21:19
278,2014-01-10 17:23:30,"In debugger all objects typeof regexp displays as undefined.

Example:
evaluate in console `a = /asdf/g` //output -> undefined
evaluate in console `typeof a` //output -> object
",3y3,2014-02-13 11:29:03
278,2014-02-13 11:29:27,"Fixed in #279
",3y3,2014-02-13 11:29:03
277,2014-01-08 01:14:16,"This is a crash for a common use case in current master. I belive it should be fixed if #276 is merged in  :+1: . Else it should be fixed with  #275.

Related to #29 #272  #277 
<b>Reproduction:</b>

Using master 127955f6005c8cbd1c872d01e69149d54b9863ad
1. Set a breakpoint somewhere in the Sources section of the debugger client.
2. In the debugged application, do something that traverses the breakpoint
   --> AUT execution pauses, debugger client shows paused.
3. Open the console in the debugger client.
4. Click the button to resume execution.

<b>Result:</b>

Error / crash:

<S_CODE_TOKEN>
",bf0,2014-01-16 07:04:52
277,2014-01-16 07:04:52,"Fixed by #275.
",bajtos,2014-01-16 07:04:52
276,2014-01-08 00:41:22,"max-string-length property added
",3y3,2014-01-09 09:29:51
276,2014-01-08 01:04:29,"With 02c7f6d passing I prefer this fix to #272 + #275. Also assuming the steps mentioned in #275 are good here too (looks like it). I prefer this.

:smiley: 
",bf0,2014-01-09 09:29:51
276,2014-01-09 09:29:51,"I don't like the idea of adding unnecessary configuration options. The current max 10k was chosen to support 99% of cases while not slowing down the Node Inspector too much. (See [Avoid Preferences](See also http://gettingreal.37signals.com/ch06_Avoid_Preferences.php)).

Inspecting very long strings is cumbersome on its own, you should consider using a different approach than dumping >10k of text in Node Inspector console (e.g. inspect only the relevant substring).

Not to mention that the GUI displaying values of object properties are truncating the string at approx 1k regardless of Node Inspector's configuration.
",bajtos,2014-01-09 09:29:51
276,2014-01-09 12:39:29,"10000 is a problem if we works with templates of html...
Yes, I now that limitation by default is needed, but I (not only) would have preferred to switch this limitation in some cases.
May be is needed to add this to FAQ?
",3y3,2014-01-09 09:29:51
275,2014-01-08 00:20:44,"Related to #29 #272  #277 
<b>Reproduction:</b>

Using master 127955f6005c8cbd1c872d01e69149d54b9863ad
1. Set a breakpoint somewhere in the Sources section of the debugger client.
2. In the debugged application, do something that traverses the breakpoint
   --> AUT execution pauses, debugger client shows paused.
3. Open the console in the debugger client.
4. Click the button to resume execution.

<b>Result:</b>

Error / crash:

<S_CODE_TOKEN>

:zap: : I'm not sure how / if the test should be updated.
",bf0,2014-01-16 07:03:55
275,2014-01-08 00:42:45,"@pflannery can you advise on your test ? Having trouble understanding why it passed previously and now fails because the string gets a ""...(length: 9999)"" suffix. https://travis-ci.org/node-inspector/node-inspector/builds/16561627

Unless there was something else added to master the only difference should be 

<S_CODE_TOKEN>
",bf0,2014-01-16 07:03:55
275,2014-01-08 01:01:14,"Here is other implementation #276
",3y3,2014-01-16 07:03:55
275,2014-01-08 01:06:47,"@3y3 Awesome, will reopen if that doesn't merge. :+1: 
",bf0,2014-01-16 07:03:55
275,2014-01-09 09:39:01,"As I commented in the other pull request, I don't want to introduce another config option. Your patch is better as it fixes the problem without adding new features.

In addition to the line comments above, please change the commit message to follow [50/72 rule](https://github.com/node-inspector/node-inspector/wiki/Contributing#git-commitspatches), note that Node Inspector uses past tense.

In case you are not familiar with rewriting git history - you don't have to create new pull request. Use `git commit --amend` to update the single commit in this branch, or `git rebase -i` to merge multiple commits and `git push -f` to rewrite the history in your branch. Github handles rewrites very well.
",bajtos,2014-01-16 07:03:55
275,2014-01-09 10:01:53,"Regarding unit-tests: 
1. The error is triggered when `DebuggerAgent.resume()` is called (i.e. when you click on Resume button in the GUI). Please add a new unit-test checking that `DebuggerAgent.resume()` is not throwing.
2. The existing test is failing due to a bug in your implementation. You are setting `maxStringLength` only if it was already defined. Try this instead:
   
   <S_CODE_TOKEN>
",bajtos,2014-01-16 07:03:55
275,2014-01-10 19:29:31,"Ok excellent :)  Adjusted
",bf0,2014-01-16 07:03:55
275,2014-01-15 16:10:18,"Adjusted, thanks for your patience.
",bf0,2014-01-16 07:03:55
275,2014-01-16 07:03:55,"There were trailing spaces on two lines, I have fixed it myself and landed your patch as bb0f19c.

Thank you for the contribution!
",bajtos,2014-01-16 07:03:55
274,2014-01-03 23:16:50,"I could not get this working on some hosts, so I edited the socket.io transports in lib/debug-server.js. Changing to ['htmlfile', 'xhr-polling', 'jsonp-polling'] fixed the issue. I got no error messages in the chrome inspector, but noticed that the onWebSocketConnected callback was never being hit. Removing the websocket transport so it falls back to something else fixes the issue. Looks to be working well with xhr-polling transport.
",gcochard,2014-02-20 17:54:01
274,2014-01-07 09:14:50,"Thank you for reporting the issue. Could you please elaborate a little bit more on what kind of hosts don't support websockets?

Also when you open Developer Tools on a Node Inspector page and select the tab Network, what is the result of the websocket request? 

How can I reproduce this issue on my local machine?

I would prefer to figure out why websockets don't work and try to fix the underlying issue first. Only if that does not work out, then I suppose a new config option for socket.io settings could be added.
",bajtos,2014-02-20 17:54:01
274,2014-01-07 16:46:45,"I have a CentOS 6.4 VM in VMware workstation, it is using a NAT network config. No firewalls or ""advanced"" settings, just a static local IP. I am trying to access the inspector page via the host that is running VMware.

When I check the Network tab, it shows a pending request with these request and response headers:
Request:
GET ws://192.168.48.8:8080/socket.io/1/websocket/fiAhAqACVaPDGZFvY1t4 HTTP/1.1
Pragma: no-cache
Origin: http://192.168.48.8:8080
Host: 192.168.48.8:8080
Sec-WebSocket-Key: MR8i2lUd46U2DUCi6euq6A==
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36
Upgrade: websocket
Sec-WebSocket-Extensions: x-webkit-deflate-frame
Cache-Control: no-cache
Connection: Upgrade
Sec-WebSocket-Version: 13

Response:
HTTP/1.1 101 Switching Protocols
Connection: Upgrade
Sec-WebSocket-Accept: rd4DiiTHijk0f36E65wl+TrirmM=
Upgrade: websocket

I am on a Windows 7 Enterprise box. I am using Trend Micro OfficeScan AV.

The only odd thing I can think of is the AV, I don't see that AV in Socket.IO's list.

Here's a recent websockets test result from this machine: http://websocketstest.com/result/283594
",gcochard,2014-02-20 17:54:01
274,2014-01-10 21:23:09,"@gcochard . I was having the same problem and the fix you suggested in your first post worked.  Interestingly enough, node-inspector used to work for me, and then my company switched to Trend Micro OfficeScan from McAfee.

My websockets test seems fine: http://websocketstest.com/result/285252

I'm using Chrome on Windows to access node-inspector running on an Archlinux VM configured with a host-only adapter (so I access it on 192.168.56.101).
",gdw2,2014-02-20 17:54:01
274,2014-01-21 17:03:27,"Seems like Trend Micro OfficeScan is an issue. Not sure if I can change any of the settings. I'll continue with this workaround for the time being.
",gcochard,2014-02-20 17:54:01
274,2014-02-20 17:54:01,"Closed by #296.
",bajtos,2014-02-20 17:54:01
273,2014-01-03 22:30:25,"Thanks for the great recent work on node-inspector. I'm happily debugging my large coffeescript app with breakpoints in .coffee files.

I noticed that I can use the node-inspector console to inspect objects, call methods and assign values to object properties, but cannot reassign a variable in scope to a new value.

For example, assuming I am at a breakpoint with an existing variable reference `obj` in scope, I can assign `obj.foo = 'bar'` and see that I have changed the `foo` property of `obj` but if I enter `obj = { foo: 'bar'}` the value of `obj` does not change.

I'm using v0.7.0-1. This is different to the normal console behavior in Chrome. Is it the expected behavior?
",asalant,2014-02-18 17:26:39
273,2014-01-07 09:08:56,"Thank you for reporting the issue, it is indeed a bug in Node Inspector.

[DebuggerAgent. _doSetVariableValue](https://github.com/node-inspector/node-inspector/blob/01cb658ce253bfbc4bedd8e72dc1ffe9c13ffa05/lib/DebuggerAgent.js#L425-L445) is sending incorrect parameters for the V8 request `setVariableValue`:

<S_CODE_TOKEN>

Seems that `newValue.objectId` should be renamed to `newValue.handle` (see [DebugCommandProcessor.resolveValue_](https://github.com/joyent/node/blob/f230a1cf749e984439b5bb9729d9db9f48472827/deps/v8/src/debug-debugger.js#L2046-L2073)).

I am afraid I won't have time to fix this bug soon, but I am happy to help anybody wishing to contribute a patch (pull request).
",bajtos,2014-02-18 17:26:39
273,2014-01-09 20:52:44,"@bajtos Looking at this now... DebuggerAgent. _doSetVariableValue in master no longer makes the call to `setVariable` that you reference in your comment. I see:

<S_CODE_TOKEN>

Has this been fixed in master?
",asalant,2014-02-18 17:26:39
273,2014-01-09 22:50:18,"Sorry, just checked and the code I reference is the same in master and in v0.7.0-1 so clearly not fixed. Any pointers based on the current implementation.
",asalant,2014-02-18 17:26:39
273,2014-01-10 08:02:18,"The `value` argument of `_doSetVariableValue` comes directly from DevTools front-end. You need to convert it to the format understood by V8 debugger. 

I.e. something along the lines

<S_CODE_TOKEN>

Thinking about it from the big picture point of view, the code for converting front-end value object to a V8 value object should live in lib/convert.js, e.g. as `convert.inspectorObjectToV8Ref`. See also the existing counter-part called `convert.v8RefToInspectorObject`.
",bajtos,2014-02-18 17:26:39
273,2014-01-10 21:37:29,"I think that problem is not over there.
I try to break in some function that contains local object `o = {a:1}`, and evaluate `o = {}` that return `{}`, **BUT...**
after this I try evaluate `o` and have `{a:1}`
In this situation we use `evaluateOnCallFrame` instead of `_doSetVariableValue`
",3y3,2014-02-18 17:26:39
273,2014-01-13 19:37:33,"> I try to break in some function that contains local object o = {a:1}, and evaluate o = {} that return {}, BUT...
> after this I try evaluate o and have {a:1}
> In this situation we use evaluateOnCallFrame instead of _doSetVariableValue

That's interesting. Does this scenario work correctly in Chrome Developer Tools? (I mean in a browser when debugging a HTML page.)
",bajtos,2014-02-18 17:26:39
273,2014-02-06 01:21:34,"So I've run into this same issue and came here looking for some more information.  I also did some poking around in the same places, to no avail.  However I can comment on the behavior of Chrome Dev-Tools.

To summarize, when debugging you can get and set variables for the local scope from the console and those changes take effect and modify their values moving forward.  So what I did was create a few simple vars (test / test2) and set their value, then set a breakpoint and modify test's value before continuing on to output the values of those vars.  Here's the code and results:

Code:

<S_CODE_TOKEN>

Result in Chrome Dev Tools:

<S_CODE_TOKEN>

Result in node-inspector:

<S_CODE_TOKEN>

Here's a simple jsfiddle i made it illustrate the point in chrome:
http://jsfiddle.net/aldenpotamus/QSD5j/

And here's a screenshot of the behavior in Chrome with dev-tools open:
https://connectsolutions.box.com/shared/static/k0vf777svdt74tl96w8e.png

And a screenshot of the behavior in node-inspector:
https://connectsolutions.box.com/shared/static/ikgw831hk9q0o87rw13y.png

One final note, that I think is particularly interesting... when you follow the example provided by rather than trying to do that variable assignment in the console you edit the variable's value in the ""Scope Variables"" section of node-inspector the change does actually work and the console output from the app is (as expected):

<S_CODE_TOKEN>

Hope this helps!
",aldencs,2014-02-18 17:26:39
273,2014-02-06 07:58:18,"@aldencs,  

> One final note, that I think is particularly interesting... when you follow the example provided by rather than trying to do that variable assignment in the console you edit the variable's value in the ""Scope Variables"" section of node-inspector the change does actually work...

Good note, I will start to create pull-request in soon.
",3y3,2014-02-18 17:26:39
273,2014-02-06 17:35:52,"@3y3 Great, thanks!

PS - Really enjoying using node-inspector, great work!
",aldencs,2014-02-18 17:26:39
273,2014-02-13 11:36:14,"Ok, now, when I did the complex overview of problem, I can say that in node.js 0.11.11 all works fine.
In current releas version we can't to close this issue. (It works in ""Scope Variables"" because there we use ""setLocalVariable"" command instead of ""evaluate"")
",3y3,2014-02-18 17:26:39
273,2014-02-14 18:04:17,"Thanks @3y3, I can confirm that this is fixed with node v0.11.11, everything works as expected.
",aldencs,2014-02-18 17:26:39
273,2014-02-18 08:39:52,"There are two things in play here:
1. The V8 version shipped in Node 0.10.x does not support changing variable values via ""evaluate"" commands. This has been fixed the V8 version shipped in Node v0.11.9 (or sooner).
2. Changing variable values via ""setVariableValue"" from the right sidebar works as of Node v0.10.12 and v0.11.2, Node Inspector prints a [helpful error](https://github.com/node-inspector/node-inspector/blob/01cb658ce253bfbc4bedd8e72dc1ffe9c13ffa05/lib/DebuggerAgent.js#L415-L418) for older versions. However, there is a bug which means you can set only scalar values like string and number, not objects. See my [comment](#issuecomment-32009404) for more details.
",bajtos,2014-02-18 17:26:39
272,2014-01-03 03:53:00,"Related to #29

Set the max string length to be 100k in evaluateOnCallFrame

Added a unit test ""canGetStringValuesLargerThan80Chars"" to check 100k strings are received from the debugger

Extracted shared code in to a function called v8ResultToInspectorResultLarge in lib/convert.js
",pflannery,2014-01-07 14:38:40
272,2014-01-03 10:29:36,"Thank you for the pull request, see my inline comments above. The patch should include fix for RuntimeAgent too, see the [issue comment](https://github.com/node-inspector/node-inspector/issues/29#issuecomment-31393782).

> This issue affects `RuntimeAgent` methods calling `evaluate` request too, the pull request should fix those too. Please consider extracting the shared code into a new method in `DebuggerClient` to prevent further code duplication.

Seems we misunderstood each other, I was referring to the duplication of `maxStringLength: 100000` that will emerge after RuntimeAgent is fixed. The solution to consider is creating a new method in DebuggerClient for sending ""evaluate"" request. This new method then can add maxStringLength to all ""evaluate"" request and it can be used by both ""DebuggerAgent"" and ""RuntimeAgent"", so that these Agents don't need to deal with this detail.
",bajtos,2014-01-07 14:38:40
272,2014-01-03 18:01:02,"Yeah seems there is a misunderstanding.

What is the reason for these other methods in RuntimeAgent to have `maxStringLength: 100000` ? 

From what I see this is the only change we need to make which resolves the console evaluation and the popup evaluation for String lengths
",pflannery,2014-01-07 14:38:40
272,2014-01-06 15:57:10,"> What is the reason for these other methods in RuntimeAgent to have maxStringLength: 100000 ?

Try this:
1. Open Node Inspector and debug any application
2. While the application is running (not stopped on any breakpoint), run this code in the Console: 
   
   <S_CODE_TOKEN>
3. `RuntimeAgent.evaluate()` is called and since it's not fixed yet, the result is
   
   <S_CODE_TOKEN>

Another example - I found it by accident, it is a different V8 request:
1. Open Node Inspector and debug any application
2. Stop on a break point
3. Run this code in the Console:
   
   <S_CODE_TOKEN>
4. Expand the returned object
5. `RuntimeAgent.getProperties()` is called and the property value is truncated to 80 characters:
   
   <S_CODE_TOKEN>

In the light of the above, perhaps the best solution is to modify `DebuggerClient.prototype.request` to add `maxStringLength` to all requests sent to the V8 debugger?
",bajtos,2014-01-07 14:38:40
272,2014-01-06 16:15:41,"Yeah good idea lets put it in to `DebuggerClient.prototype.request` function.

I get quite a delay when printing out a 100000 length string to the console. Shall I reduce it to say 10000 or do you want to keep it at 100000?
",pflannery,2014-01-07 14:38:40
272,2014-01-06 16:23:52,"> I get quite a delay when printing out a 100000 length string to the console. Shall I reduce it to say 10000 or do you want to keep it at 100000?

It seems to me that Chrome DevTools are truncating the string at about 1k characters, maybe it is good enough? If not, then 10k is fine with me too.
",bajtos,2014-01-07 14:38:40
272,2014-01-07 09:50:23,"Nice.

Please remove the extra empty line pointed out in the line comment above and squash all commits in to a single one.  Other than that, the patch is ready for merge.

P.S. Please add a comment when you push changes, github does not send any notification about new commits.
",bajtos,2014-01-07 14:38:40
272,2014-01-07 13:55:52,"changes done ;)
",pflannery,2014-01-07 14:38:40
272,2014-01-07 14:39:02,"Landed. Thank you!
",bajtos,2014-01-07 14:38:40
272,2014-01-07 19:59:57,"Hm... How about add this as config option `maxStringLength` with default value -1 (from v8 sources I see that this value allow to get full string)?
Or `truncateStrings` with default `false` and optional number of symbols? (`truncateStrings = 100000`)
",3y3,2014-01-07 14:38:40
272,2014-01-07 23:28:55,"@pflannery @bajtos  I've been anticipating this fix for a bit so I patched the files manually on my local by looking at pflannery's commit. (Thanks for the fix :) )
1. npm installed the latest v0.7.0-1 
2. added the 1 line in lib/DebuggerClient.js and the 1 change in lib/Convert.js. based on 127955f6005c8cbd1c872d01e69149d54b9863ad

It was running great (showing longer strings on the console) and then 30 min or so later I noticed it crashed with:

<S_CODE_TOKEN>

So apparently there are situation(s) where args is not passed to DebuggerClient.prototype.request?
will update if I can encounter this again. Perhaps we need:

<S_CODE_TOKEN>

But I'm not running master, I'm running npm's v0.7.0-1 hand patched with 127955f, if that could make a difference. (looks probably the same to me)
",bf0,2014-01-07 14:38:40
272,2014-01-08 01:01:43,"here is other implementation #276
",3y3,2014-01-07 14:38:40
271,2014-01-02 16:01:11,"I have the coffee files under routes directory. It is being picked up the node inspector. But not all,the app.coffee. It shows up only as app.js, though there is  a comment at the bottom. So it is very irregular. Is there a way to debug. I tried regenerating it. And still the same. Any insight would be nice.

Duplicates: #241 
",cooolbasha,2014-02-20 16:03:58
271,2014-01-02 19:05:54,"As I have commented in #100, source-maps are applied only to files that are already loaded inside V8/Node. Node Inspector displays files not (yet) loaded too, which allows setting breakpoints in these files. 

Is this explaining the situation you are experiencing?
",bajtos,2014-02-20 16:03:58
271,2014-01-02 21:27:00,"No this is for app.js which is the main file. This is loaded into V8/Node. It shows the directory of the files and for some of them it pull the .cofffee files based on the comment at the end of the .js file

Yes.
",cooolbasha,2014-02-20 16:03:58
271,2014-01-03 02:19:42,"You can see the index.coffee under the routes directory . but not for app.js ( it is there in the file system though)
![image](https://f.cloud.github.com/assets/1131747/1837120/d7d00d60-741d-11e3-8fa2-354d7fb86ba5.png)
",cooolbasha,2014-02-20 16:03:58
271,2014-01-03 10:09:28,"It could be a windows-specific issue. Is it possible to reproduce the problem with the sample project [node-debug-samples/sourcemap](https://github.com/node-inspector/node-debug-samples/tree/master/sourcemap)? If not, could you please create your own sample that I can use to reproduce the problem?
",bajtos,2014-02-20 16:03:58
271,2014-01-04 17:22:00,"It works. But the moment you add node-modules it would not pull the coffee file for the same code/ not sure why it is working once, and next time it would not. it is very flaky. 
",cooolbasha,2014-02-20 16:03:58
271,2014-01-07 09:39:32,"I managed to reproduce the problem on my machine, both OSX and Windows.

The problem is in the order in which the response to `Page.getResourceTree` and events `Debugger.scriptParsed` are sent to DevTools front-end. When `scriptParsed` arrives before `getResourceTree`, front-end chokes with `Uncaught TypeError: Cannot read property 'id' of undefined`.
",bajtos,2014-02-20 16:03:58
270,2013-12-23 02:52:54,"I'm new to Ubuntu/Linux so I'm not sure I'll explain this correctly but here goes...

There are two node packages. One has to do with radio and the other is nodejs. When I tried to install node, it installed the radio package. To install nodejs I had to install the nodejs package. The problem is node-inspector looks for node not nodejs, so it doesn't run for me. 

To get around this I could have edited the js scripts I think. Or what I did was remove the non js node and then sym link nodejs to node.
",scirelli,2013-12-26 09:58:40
270,2013-12-26 09:58:40,"I am afraid this is a problem of Debian/Ubuntu that affects all globally installed Node.js modules. See the discussion in [Node.js mailing list](https://groups.google.com/forum/#!searchin/nodejs/debian/nodejs/Z8F8uDXY8XE/cQowZWkkPLgJ).

Both solutions you mentioned as correct, I would personally symlink nodejs to node, because that fixes the problem for all packages and it is a permanent fix, meaning it will survive updates of the globally installed packages.
",bajtos,2013-12-26 09:58:40
269,2013-12-21 19:41:52,"Proposed fix for issue #261.

This calls Date.toString and appends it to the description. This is similar to what Chrome does: https://bugs.webkit.org/show_bug.cgi?id=71605

Result:

![fix](https://f.cloud.github.com/assets/766698/1796579/556a3260-6a77-11e3-8f25-61897e80f1b7.png)
",sergkr,2013-12-26 09:36:46
269,2013-12-26 09:36:46,"Landed as 1d6aba5, thank you for your contribution!
",bajtos,2013-12-26 09:36:46
268,2013-12-18 07:37:30,"What do these pictures tell you
### serrver

![untitled](https://f.cloud.github.com/assets/6089207/1771446/a97ba5fe-67b7-11e3-82ef-d4fe69a77e49.png)
### client

![untitled](https://f.cloud.github.com/assets/6089207/1771433/02bee4e2-67b7-11e3-9f5b-6f034b9b5afe.png)

So on the server i am getting error from mysql insert and when i hover over the error object, it just shows the message but when i send that error object to the client, it has properties.  Something i dont understand or is this really an issue? or enchantment
",MurWade,2014-02-20 18:02:06
268,2013-12-18 10:49:54,"Hi @MurWade, thank you for reporting the issue.

It looks like a bug in Node Inspector to me, the first screen shot should have looked same as the second one.

Please provide a minimal sample where the problem can be reproduced. What version of Node are you running? What platform (Linux/Mac/Windows/etc.)?
",bajtos,2014-02-20 18:02:06
268,2013-12-19 02:20:07,"No problem mate
I am using windows 8... version of node i am running is current version(v0.10.23)

When i start testing my product and come across the same issue i will take snapshot again and post it here.
",MurWade,2014-02-20 18:02:06
268,2013-12-19 09:53:44,"> When i start testing my product and come across the same issue i will take snapshot again and post it here.

I need a code that I can run (debug) on my computer and that will trigger the same issue.
",bajtos,2014-02-20 18:02:06
268,2014-02-20 18:02:06,"The problem was most likely caused by incorrect conversion of error objects received from V8 and should have been fixed by 739a578.

@MurWade please upgrade to v0.7.0. Feel free to reopen the issue if you encounter the problem again.
",bajtos,2014-02-20 18:02:06
268,2014-02-21 09:27:18,"Related: #299 and #300
",bajtos,2014-02-20 18:02:06
267,2013-12-18 00:23:52,"Hi there,

I have node-inspector installed and connected to a node.js process.  However, when I trigger some activity in that process (e.g. make an http request of it) the following happens:
- the node-inspector gui begins to create some tabs in Sources, loading the files that are being used by the process
- some time goes by (~15 seconds)
- I get this error in the chrome console:

<S_CODE_TOKEN>
- my process is unresponsive (http request is stalled)

If I kill the node-inspector process my process will come alive again and respond to the http request.

Any clues on this one?

Thanks,
Robert
",robertjd,2014-12-18 17:01:33
267,2013-12-18 09:47:11,"Hello Robert, thank you for reporting the issue.

From the information you send, it seems that `NetworkAgent.loadResourceForFrontend` returns an invalid response (see [SourceMap.js:87](https://github.com/node-inspector/node-inspector/blob/147371d6527f0d2dbffa5295c43dc4b3f5ec59bd/front-end/SourceMap.js#L87)).

Could you please enable protocol dumps and post me the relevant part of the output?
1. Start Node Inspector using this command line
   
   <S_CODE_TOKEN>
2. Reproduce the problem you mentioned.
3. Look for `loadResourceForFrontend` in the console output of Node Inspector.
4. Post the full request & response here.
",bajtos,2014-12-18 17:01:33
267,2014-12-18 17:01:33,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 17:01:33
267,2014-12-18 17:49:39,"+1 for triaging
",robertjd,2014-12-18 17:01:33
266,2013-12-17 10:33:05,"Add a custom hook inside `front-end-node/Overrides.js` that will intercept `Detached from the targed` error and automatically reload the webpage in such case.
See this [StackOverflow answer](http://stackoverflow.com/a/19930899/69868) for more details.

If it's possible, then the restart should have a timeout that is getting larger with the number of unsuccessful attempts (i.e. the first restart is done immediately, the second one after 1s, all subsequent restarts after 2s).
",bajtos,2014-02-20 17:50:10
266,2013-12-17 10:33:31,"Possibly related to #265.
",bajtos,2014-02-20 17:50:10
266,2014-01-15 05:29:10,"I would start to implement the solution but I checked that it is already implemented. However the progressive reloading was not implemented so I think I can help on it.

I did a briefly search for the commit that had added the change but I didn't find it. Can you please refer me to the commit?
",pmariano,2014-02-20 17:50:10
266,2014-01-15 07:53:52,">  I checked that it is already implemented. However the progressive reloading was not implemented so I think I can help on it.

I am afraid I don't understand here. Where did you see this feature already implemented?

> I did a briefly search for the commit that had added the change but I didn't find it. Can you please refer me to the commit?

I don't know what change you are referring to. Is it possible there is no such commit because there was no such change made yet?
",bajtos,2014-02-20 17:50:10
266,2014-01-15 13:52:01,"Sorry, my mistake, I forgot to stop the reloading script on tampermonkey. This led me to think that the feature was implemented by someone else. 

I will try to implement as soon as possible and then send a pull request.
",pmariano,2014-02-20 17:50:10
266,2014-01-17 20:06:53,"Would love to see this implemented. @pmariano let me know if you don't have time to implement, otherwise I will watch this thread.
",ChrisWren,2014-02-20 17:50:10
266,2014-01-19 03:50:32,"This is gonna be such a huge time saver, anyone up to have it implemented?
",coodoo,2014-02-20 17:50:10
266,2014-01-19 05:09:28,"See the PR in #286. It is a very simple solution and it may make sense as a cli option instead of auto-refreshing on every detach. For my personal use case, I don't mind the refresh on detach, because I would just close the tab if I am done debugging.
",ChrisWren,2014-02-20 17:50:10
266,2014-01-20 13:15:28,"> See the PR in #286. It is a very simple solution and it may make sense as a cli option instead of auto-refreshing on every detach.

I'd prefer to keep the number of configuration options at minimum. Let's make a solution that works out-of-the-box for 80% of the users without any config/cli options.
",bajtos,2014-02-20 17:50:10
266,2014-01-20 20:33:06,"> Would love to see this implemented. @pmariano let me know if you don't have time to implement, otherwise I will watch this thread.

@ChrisWren I'm kind o busy this week, so I'll just have some time to implement on next week. Feel free to implement it, just let me know if you get the task.
",pmariano,2014-02-20 17:50:10
266,2014-01-23 11:43:23,"@pmariano,  @coodoo , if you have time you can test one of pull requests that fixes this issue (#289, #286) 
",3y3,2014-02-20 17:50:10
266,2014-02-04 06:59:03,"#286 landed on master. I'll review #289 too, it would be nice to get rid of the flicking caused by frequent reloading of the inspector page.
",bajtos,2014-02-20 17:50:10
266,2014-02-11 13:08:04,"+1
",devilankur18,2014-02-20 17:50:10
266,2014-02-20 17:49:39,"I have increased the timeout to 400ms for v0.7.0. The better solution started in 289 needs more time and effort to get completed.
",bajtos,2014-02-20 17:50:10
266,2014-02-20 17:50:10,"I am closing this issue as resolved.
",bajtos,2014-02-20 17:50:10
266,2014-02-20 17:50:50,"Looking forward to this getting published to npm, thanks!—
Sent from Mailbox for iPhone

On Thu, Feb 20, 2014 at 9:50 AM, Miroslav Bajtoš notifications@github.com
wrote:

> ## Closed #266.
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/node-inspector/node-inspector/issues/266
",ChrisWren,2014-02-20 17:50:10
266,2014-02-20 18:05:13,"It's already published as v0.7.0. Enjoy :)
",bajtos,2014-02-20 17:50:10
266,2014-02-20 18:10:42,"Oh, cool, I'll update grunt-node-inspector then.—
Sent from Mailbox for iPhone

On Thu, Feb 20, 2014 at 10:05 AM, Miroslav Bajtoš
notifications@github.com wrote:

> ## It's already published as v0.7.0. Enjoy :)
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/node-inspector/node-inspector/issues/266#issuecomment-35650618
",ChrisWren,2014-02-20 17:50:10
266,2014-02-20 18:11:35,"good news. nice
",pmariano,2014-02-20 17:50:10
265,2013-12-17 04:08:31,"I want to lanch a new process after current debug passed, then I just refresh the page and debug again.

but I have no solution to get that event.
",popomore,2013-12-17 10:28:41
265,2013-12-17 10:12:56,"Hello @popomore, I am afraid I don't understand what you are asking for.

If you would like to automatically restart the debugged process, then you have to use another tool for that, e.g. forever, nodemon, etc. (see our [blog post](http://strongloop.com/strongblog/comparison-tools-to-automate-restarting-node-js-server-after-code-changes-forever-nodemon-nodesupervisor-nodedev/) comparing the alternatives).

If you would like to automatically reload the browser GUI after the process is restarted, checkout the following StackOverflow entry: http://stackoverflow.com/q/18853443/69868.

I am closing this issue, feel free to reopen if you have more questions.
",bajtos,2013-12-17 10:28:41
265,2013-12-17 10:56:28,"Thank you for your advise, but what I want is more complex.

I'm using node-inspector to debug command line tool using --debug-brk argument, Then I lanch a process and debug using browser GUI. But when I reload the GUI, it won't goin to breakpoint, so I must restart the process and reload.

What I want is just restart the process automatically after previous debugging complete.
",popomore,2013-12-17 10:28:41
265,2013-12-17 11:45:22,"I am not sure if I understand your workflow correctly.

So you start your app with --debug-brk, open Node Inspector in the browser and do some debugging.

Now when your debugging is complete: Is your application still running (e.g. a web server)? Has it already exited (e.g. a command-line tool like a unit-test runner)?

Depending on your answer to these questions:

If the answer is ""the application is still running"", then my understanding is that you want to restart the application by reloading the Node Inspector web-page. This can be done, although the implementation won't be trivial.

If the answer is ""the application is not running anymore"", then my understanding is that you want a tool that would automatically restart the application and reload the Node Inspector page for your. This can be already solved 
forever + the greasemonkey/tampermonkey script pointed above (or #266).
",bajtos,2013-12-17 10:28:41
265,2013-12-17 11:57:35,"yeah, you got it.

My application is a command line tool, and it's not running after debugging complete, but I want to restart automatically.

Can forever be restarted without any change of the files, or How does it know when to restart?
",popomore,2013-12-17 10:28:41
265,2013-12-18 08:51:32,"By default, forever restarts the program after it finished (or crashed). There is a command-line option to enable restart on file changes. See [project homepage](https://github.com/nodejitsu/forever) for more details.
",bajtos,2013-12-17 10:28:41
265,2013-12-18 09:04:19,"That's good, thank you for your patience.
",popomore,2013-12-17 10:28:41
264,2013-12-16 19:28:22,"fixes slow load when lots of *.js files on drive

partially improves #237 
",dickhardt,2013-12-26 09:31:37
264,2013-12-16 19:44:52,"Hi @dickhardt, 

regarding unit-tests - what have you tried so far? Look at `it('excludes files to hide')`, you want to write a very similar test - just pass your new config option instead of the hidden files filter.

See also [Contributing wiki](https://github.com/node-inspector/node-inspector/wiki/Contributing#testing).

BTW, please don't open multiple pull requests for the same feature/patch. It's ok to add more commits and comments to the same pull request.
",bajtos,2013-12-26 09:31:37
264,2013-12-16 19:51:04,"Thanks for the guidance.
",dickhardt,2013-12-26 09:31:37
264,2013-12-17 09:10:37,"You are welcome. One more suggestion: since the option only disables loading of files that are not loaded by V8 yet, can you rename it to `--no-preload`?

I am thinking about adding an option to specify which directories to preload at some point in the future. Having your option called `--no-preload`, the new feature could use `--preload=[list-of-globs]` as it will be a nice complement. In a similar way, source maps can be disabled by another option, let's say `--no-source-maps`. And perhaps enabled on per-directory basis via `--source-maps-filter` or something similar. 

Anyway, that are my thoughts for the future. If you believe `--fast-load` is a better name, I'll accept that too.
",bajtos,2013-12-26 09:31:37
264,2013-12-17 09:36:24,"--no-preload works fine, better name, thanks

I was thinking that limiting preloading the files up to the first parent
with a .git repo and ignoring node_modules directory might be a popular
option. Thoughts?

On Tue, Dec 17, 2013 at 1:10 AM, Miroslav Bajtoš
notifications@github.comwrote:

> You are welcome. One more suggestion: since the option only disables
> loading of files that are not loaded by V8 yet, can you rename it to
> --no-preload?
> 
> I am thinking about adding an option to specify which directories to
> preload at some point in the future. Having your option called
> --no-preload, the new feature could use --preload=[list-of-globs] as it
> will be a nice complement. In a similar way, source maps can be disabled by
> another option, let's say --no-source-maps. And perhaps enabled on
> per-directory basis via --source-maps-filter or something similar.
> 
> Anyway, that are my thoughts for the future. If you believe --fast-loadis a better name, I'll accept that too.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/264#issuecomment-30735786
> .
",dickhardt,2013-12-26 09:31:37
264,2013-12-17 11:33:39,"> I was thinking that limiting preloading the files up to the first parent with a .git repo and ignoring node_modules directory might be a popular option. Thoughts?

Up to the first parent - this IMO doesn't make much sense. At the moment, Node Inspector goes at most on level up when finding the project root and checks for a presence of `package.json` to decide if a directory looks like a root of a Node.js project. I suppose we could change this algorithm to check for `.git` folder in addition to `package.json`. See [ScriptFileStorage. _findApplicationRootForRealFile](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L92).

Ignoring node_modules - that looks useful. I'd rather have an option with a more general usage, e.g. 

<S_CODE_TOKEN>

Or perhaps modify `--no-preload` to accept either an alias or a list of things to ignore:

<S_CODE_TOKEN>
",bajtos,2013-12-26 09:31:37
264,2013-12-17 16:50:33,"From the looks of it now, Node Inspector started walking my entire drive a
version or two ago. I have a fast SSD and it now takes a few minutes and
the process grows to over 1G of memory. Is that not what *_/_.\* does? I
have little knowledge of these things, I only submitted the patch as that
seemed to be what solved my own slow load problem.

On Tue, Dec 17, 2013 at 3:33 AM, Miroslav Bajtoš
notifications@github.comwrote:

> I was thinking that limiting preloading the files up to the first parent
> with a .git repo and ignoring node_modules directory might be a popular
> option. Thoughts?
> 
> Up to the first parent - this IMO doesn't make much sense. At the moment,
> Node Inspector goes at most on level up when finding the project root and
> checks for a presence of package.json to decide if a directory looks like
> a root of a Node.js project. I suppose we could change this algorithm to
> check for .git folder in addition to package.json. See ScriptFileStorage.
> _findApplicationRootForRealFilehttps://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L92
> .
> 
> Ignoring node_modules - that looks useful. I'd rather have an option with
> a more general usage, e.g.
> 
> --no-preload-list=./node_modules/*_/_.*
> 
> Or perhaps modify --no-preload to accept either an alias or a list of
> things to ignore:
> 
> --no-preload=all  # alias for **/_._
> --no-preload=node_modules # alias for **/node_modules/**/_._
> --no-preload=./node_modules/express/**/_._:./node_modules/foobar/**/_._
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/264#issuecomment-30744022
> .
",dickhardt,2013-12-26 09:31:37
264,2013-12-17 18:09:54,"@dickhardt I apologise for confusing you. The point of my comments was to show some possible future directions, not adding more ""requirements"".

What I am asking from you before accepting this pull request:
1. Rename `--fast-load` to `--no-preload`, you seem to agree it's a good idea.
2. Add a unit-test for this new feature as discussed earlier. The automated tests prevent regressions in the future (among other benefits).

I truly appreciate the effort you have made by submitting this pull request. Let me know if you need more help on writing the unit-test.
",bajtos,2013-12-26 09:31:37
264,2013-12-17 18:15:19,"I was not confused. I was wondering if I was fixing the right problem, or
if there is an issue in how Node Inspector is preloading files. Is crawling
my entire drive for *.js the desired behavior?

On Tue, Dec 17, 2013 at 10:10 AM, Miroslav Bajtoš
notifications@github.comwrote:

> @dickhardt https://github.com/dickhardt I apologise for confusing you.
> The point of my comments was to show some possible future directions, not
> adding more ""requirements"".
> 
> What I am asking from you before accepting this pull request:
> 1. Rename --fast-load to --no-preload, you seem to agree it's a good idea.
> 2. Add a unit-test for this new feature as discussed earlier. The
> automated tests prevent regressions in the future (among other benefits).
> 
> I truly appreciate the effort you have made by submitting this pull
> request. Let me know if you need more help on writing the unit-test.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/264#issuecomment-30775322
> .
",dickhardt,2013-12-26 09:31:37
264,2013-12-17 18:50:49,"> I was not confused. I was wondering if I was fixing the right problem, or if there is an issue in how Node Inspector is preloading files. Is crawling my entire drive for *.js the desired behavior?

It is desired that Node Inspector crawls a part of your hard drive to find project-related files. This allows you to set breakpoints in files that are not loaded by the V8 engine yet.

From the nature of the task, it's difficult to know which directories should be crawled and which should not. Node Inspector is applying some heuristics to guess where to look, there is plenty of space to improve it once we have more data on which scenarios cause low performance. See #237 and #253 for related discussions.

Your patch provides a great workaround solution for cases where the heuristic fails badly. It is something I had in my mind for some time, as you can see from the comments in the other issues. So yes, you are fixing the right problem.
",bajtos,2013-12-26 09:31:37
264,2013-12-19 20:10:43,"I'm having problems getting the test suite to run on my machine. I get a few of these errors:

  1) CallFramesProvider gets stack trace:
     Uncaught Error: Debugger connection error: Error: connect ECONNREFUSED
      at DebuggerClient.<anonymous> (/Users/dch/github/node-inspector/test/helpers/launcher.js:34:15)
      at DebuggerClient.EventEmitter.emit (events.js:96:17)
      at EventEmitter.emit (events.js:96:17)
      at Socket.exports.attachDebugger.conn.on.connected (/Users/dch/github/node-inspector/lib/debugger.js:144:12)
      at Socket.EventEmitter.emit (events.js:96:17)
      at Socket._destroy.self.errorEmitted (net.js:329:14)
      at process.startup.processNextTick.process._tickCallback (node.js:244:9)

Suggestions on where to look?
",dickhardt,2013-12-26 09:31:37
264,2013-12-20 10:09:53,"What version of Node are you running?

The tests are unfortunately vulnerable to timing issues. Look at the code in test/helpers/launcher.js, there is a 200ms delay before connecting to the child node process. Try to increase that value to 500ms or even 1000ms. Let me know if it solved the problem, please don't commit that change. (The long delay makes the test suite very slow. The correct solution is to implement a retry scheme with an exponential back-off, but that's out of scope of your pull request.)

You could temporarily disable the tests failing due to ECONNREFUSED, so that they don't get in your way. We have a Travis job configured for Node Inspector and every time you push a new commit to this pull request, Travis runs all tests on Node v0.10 and v0.11 and updates pull request with the result and link to details. If the tests are passing on Travis then I am happy to merge.
",bajtos,2013-12-26 09:31:37
264,2013-12-20 18:20:13,"I'm running 0.8. I'll try your suggestions and get back to you.

On Fri, Dec 20, 2013 at 2:10 AM, Miroslav Bajtoš
notifications@github.comwrote:

> What version of Node are you running?
> 
> The tests are unfortunately vulnerable to timing issues. Look at the code
> in test/helpers/launcher.js, there is a 200ms delay before connecting to
> the child node process. Try to increase that value to 500ms or even 1000ms.
> Let me know if it solved the problem, please don't commit that change. (The
> long delay makes the test suite very slow. The correct solution is to
> implement a retry scheme with an exponential back-off, but that's out of
> scope of your pull request.)
> 
> You could temporarily disable the tests failing due to ECONNREFUSED, so
> that they don't get in your way. We have a Travis job configured for Node
> Inspector and every time you push a new commit to this pull request, Travis
> runs all tests on Node v0.10 and v0.11 and updates pull request with the
> result and link to details. If the tests are passing on Travis then I am
> happy to merge.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/264#issuecomment-31000046
> .
",dickhardt,2013-12-26 09:31:37
264,2013-12-20 18:25:49,"Yeah, Node v0.8 is failing at my machine too. Can you use v0.10 to run Node Inspector unit-tests?

P.S. If you don't have a tool for switching between Node versions yet, I can highly recommend http://github.com/creationix/nvm
",bajtos,2013-12-26 09:31:37
264,2013-12-20 18:42:18,"switched to 0.10, tests run, fixed the tests, and they all pass now. Travis
build is not completed yet. Anything else?

btw: I use homebrew, so use 'brew switch' to change node versions

On Fri, Dec 20, 2013 at 10:26 AM, Miroslav Bajtoš
notifications@github.comwrote:

> Yeah, Node v0.8 is failing at my machine too. Can you use v0.10 to run
> Node Inspector unit-tests?
> 
> P.S. If you don't have a tool for switching between Node versions yet, I
> can highly recommend http://github.com/creationix/nvmhttps://github.com/creationix/nvm
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/264#issuecomment-31030421
> .
",dickhardt,2013-12-26 09:31:37
264,2013-12-20 18:43:53,"Passing on Travis now.

On Fri, Dec 20, 2013 at 10:41 AM, Dick Hardt dick.hardt@gmail.com wrote:

> switched to 0.10, tests run, fixed the tests, and they all pass now.
> Travis build is not completed yet. Anything else?
> 
> btw: I use homebrew, so use 'brew switch' to change node versions
> 
> On Fri, Dec 20, 2013 at 10:26 AM, Miroslav Bajtoš <
> notifications@github.com> wrote:
> 
> > Yeah, Node v0.8 is failing at my machine too. Can you use v0.10 to run
> > Node Inspector unit-tests?
> > 
> > P.S. If you don't have a tool for switching between Node versions yet, I
> > can highly recommend http://github.com/creationix/nvmhttps://github.com/creationix/nvm
> > 
> > —
> > Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/264#issuecomment-31030421
> > .
",dickhardt,2013-12-26 09:31:37
264,2013-12-20 19:05:57,"Few more details to improve, almost ready to merge :+1: 
",bajtos,2013-12-26 09:31:37
264,2013-12-24 02:10:52,"Anything else to finish this off?
",dickhardt,2013-12-26 09:31:37
264,2013-12-26 09:31:37,"Landed as 01cb658, thank you!
",bajtos,2013-12-26 09:31:37
264,2013-12-26 09:44:34,"Released in v0.7.0-1.
",bajtos,2013-12-26 09:31:37
263,2013-12-16 18:39:53,"When there are lots of *.js files, loading Node Inspector can take minutes. This option disables the crawl of the root drive.
",dickhardt,2013-12-16 19:26:26
263,2013-12-16 19:26:26,"missed a constructor and will fix merge
",dickhardt,2013-12-16 19:26:26
262,2013-12-16 00:44:23,"Fix for #237
",dickhardt,2013-12-16 18:35:38
262,2013-12-16 15:14:02,"Please add unit-tests for the new behaviour, there is already an existing test suite covering `findAllApplicationScripts` in `test/ScriptFileStorage.js`.

The help text for `--fast-load` says the option disables sourcemap processing, but I don't see the implementation of that.
",bajtos,2013-12-16 18:35:38
262,2013-12-16 18:34:42,"Changed to only talk about the file glob

On Mon, Dec 16, 2013 at 7:14 AM, Miroslav Bajtoš
notifications@github.comwrote:

> Please add unit-tests for the new behaviour, there is already an existing
> test suite covering findAllApplicationScripts in test/ScriptFileStorage.js
> .
> 
> The help text for --fast-load says the option disables sourcemap
> processing, but I don't see the implementation of that.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/262#issuecomment-30667711
> .
",dickhardt,2013-12-16 18:35:38
262,2013-12-16 18:35:42,"Will need some more guidance on the unit test, pointers would be greatly
appreciated.

On Mon, Dec 16, 2013 at 7:14 AM, Miroslav Bajtoš
notifications@github.comwrote:

> Please add unit-tests for the new behaviour, there is already an existing
> test suite covering findAllApplicationScripts in test/ScriptFileStorage.js
> .
> 
> The help text for --fast-load says the option disables sourcemap
> processing, but I don't see the implementation of that.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/262#issuecomment-30667711
> .
",dickhardt,2013-12-16 18:35:38
261,2013-12-15 23:32:28,"The debugger/console are not terribly helpful when inspecting dates:

![tooltip](https://f.cloud.github.com/assets/766698/1751359/a7dc8e76-65e0-11e3-941f-aa2db7900861.png)

![console](https://f.cloud.github.com/assets/766698/1751360/ac8f3ec8-65e0-11e3-9bc4-86eb6162082e.png)

The only way you can see the full date is if you explicitly call toString() on the date object in the console.

On the other hand, Chrome DevTools automatically expand the date for you:

![chrome](https://f.cloud.github.com/assets/766698/1751362/d64ab134-65e0-11e3-8556-ad7cbfc77761.png)

It would be great if node-inspector did something similar.

Note: I am using node-inspector v0.6.2 with Node v0.10.22.  As for Chrome, I'm using 31.0.1650.63 m.  I'm running on Windows 7.
",sergkr,2013-12-26 09:37:07
261,2013-12-16 14:55:10,"Hello @sergkr, thank you for reporting the issue.

If you feel like hacking on this yourself, you can start by looking at `convert.v8RefToInspectorObject` in [lib/convert.js](https://github.com/node-inspector/node-inspector/blob/master/lib/convert.js#L69) to see if there is enough information coming from the V8 debugger.
",bajtos,2013-12-26 09:37:07
261,2013-12-17 04:44:24,"@bajtos, I'll be happy to contribute, but I need a bit of help getting set up.

I was able to clone the repo and get it up and running (and I verified that all existing tests pass).  Now I'd like to figure out how I can use node-inspector to debug node-inspector (so that ideally, I could set a breakpoint in the convert.v8RefToInspectorObject function and investigate what information I have available to me when converting a Date).

I'm going through the [Debugging the Debugger](https://github.com/node-inspector/node-inspector/wiki/Debugging-the-debugger) wiki article, which is generally great, but I'm having trouble with some of the steps in the ""Debugging the back-end"" section - and ultimately, I wasn't able to get the second node-inspector instance up and running.  I'm confused where some of those port numbers are coming from, and suspect the article might be a little out of date.

Here are the parts I'm confused about:

> 1. browse to (1) http://localhost:8124

I'm assuming port 8124 is the port that test/hello.js is running on?  So this step is basically just running the original app, correct?  If so, I'm good so far.

> 1. browse to (2) http://localhost:8080

If I go to localhost:8000 directly, I just see a message that says ""Cannot GET /"".  Should this actually be: `localhost:8080/debug?port=5858`?  If so, I'm good so far.

> 1. browse to (3) http://localhost:9090

All right, so this is where I'm stuck.  Again, going to localhost:9090 just gets me ""Cannot GET /"", so I'm again assuming that should be `localhost:9090/debug?port=5858`.  However, when I go there, I get this:

![9090](https://f.cloud.github.com/assets/766698/1761552/4bd78740-66d3-11e3-97c7-4232c6a08543.png)

Well, there _is_ in fact another debugger client attached to port 5858 - that would be (2), which was started in step 3.  I thought I might try running (3) on another port instead, using the `--debug-port` command line option, so I tried doing a revised version of step 5:

<S_CODE_TOKEN>

However, that doesn't seem to work - going to `http://127.0.0.1:9090/debug?port=5959` results in this:

![5959](https://f.cloud.github.com/assets/766698/1761570/99893b22-66d4-11e3-808e-584f2de03677.png)

What am I doing wrong?
",sergkr,2013-12-26 09:37:07
261,2013-12-17 11:14:20,"The easiest way is to dump the protocol messages is to enable debug logs. Just start the Node Inspector using the following command-line and continue as usually. Node Inspector will dump all message to stdout/stderr.

<S_CODE_TOKEN>

The wiki page you mentioned is outdated, this one should be more accurate: [Developer's Guide](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide). I would be super grateful if you could update/merge/link/whatever both pages to make it more useful for new developers, using your on-boarding experience as an indicator of what needs to get improved.

To answer your questions:

> >  browse to (1) http://localhost:8124
> 
> I'm assuming port 8124 is the port that test/hello.js is running on? So this step is basically just running the original app, correct? If so, I'm good so far.

Yes. The instructions assume you are debugging a HTTP application. In other words, the tab (1) is sending a request to you app to exercise the code you want to debug.

> > browse to (2) http://localhost:8080
> 
> If I go to localhost:8000 directly, I just see a message that says ""Cannot GET /"". Should this actually be: localhost:8080/debug?port=5858? If so, I'm good so far.

Yes, `http://localhost:8080/debug?port=5858`. In other words, the tab (2) contains the usual debugging session.

> > browse to (3) http://localhost:9090
> 
> All right, so this is where I'm stuck. Again, going to localhost:9090 just gets me ""Cannot GET /"", so I'm again assuming that should be localhost:9090/debug?port=5858. However, when I go there, I get this:

This third part is tricky.
1. You need to start the first instance of Node Inspector in a debug mode and assign it a debug port different from the default 5858, which is already taken by your original app. The instructions in the wiki use debug port 7878 (`node --debug=7878 bin/inspector.js`)
2. For the second Node Inspector instance (used to debug the first instance), the important part is to give it a different web port to listen on - you did that correctly using `--web-port 9090`. You also need to point Node Inspector to the correct V8 debugger port, which is 7878 in this case. So the command line should contain `--debug-port 7878`, not `--debug-port 5859`.

Please let me know if this helped to get you set up and if there is anything else I can help you with. I would personally start with the DEBUG dump to see what data are coming from V8. You should be able to get pretty far even without the ""debug the debugger"" setup.
",bajtos,2013-12-26 09:37:07
261,2013-12-18 05:24:18,"Thanks Miroslav!  I got it to work.  I updated the [Debugging the debugger](https://github.com/node-inspector/node-inspector/wiki/Debugging-the-debugger) with more detailed instructions, and also added a link to it from the Wiki home page so it's easier to find.

I also got the command to dump protocol messages to work - at least in Linux.  That method didn't work on Windows (after changing the command syntax appropriately to reflect how environment variables are set in Windows), but no big deal.

I should be ready to work on the actual issue now, but I'll leave that for tomorrow.
",sergkr,2013-12-26 09:37:07
261,2013-12-18 10:22:20,"> I updated the Debugging the debugger with more detailed instructions, and also added a link to it from the Wiki home page so it's easier to find.

Awesome, thank you very much!
",bajtos,2013-12-26 09:37:07
261,2013-12-26 09:44:06,"Fix is available in v0.7.0-1.
",bajtos,2013-12-26 09:37:07
260,2013-12-14 06:13:16,"node-inspector 6.2
node 10.23

> start node-inspector &
> node --debug-brk x.js
> start chrome.exe http://127.0.0.1:8080/debug?port=5858

in console:

debugger listening on port 5858
ue}}Content-Length: 101

in chrome console:

Error: read ECONNRESET
...
Debugger.geScriptSource failed
...

Debugging is not possible!
I tried to reboot, change the port, etc.
x.js contains 'debugger;'  or any other .js
",aplib,2014-08-19 16:34:43
260,2013-12-14 08:25:56,"I found the cause of failures.
In Chrome browser, in window Watch Expressions the names of non-existent variables. Example:
xxx &lt;not available&gt;
As a result, debugging is impossible.
",aplib,2014-08-19 16:34:43
260,2013-12-16 14:50:56,"Please remove the watch using the instructions in question 6 of [FAQ](https://github.com/node-inspector/node-inspector#faq--wtf), that should make Node Inspector working again.

I am keeping this issue open. We should fix the underlying problem, so that the workaround is no longer necessary.
",bajtos,2014-08-19 16:34:43
260,2014-08-12 19:15:29,"@aplib, is this resolved?
",3y3,2014-08-19 16:34:43
260,2014-08-19 14:40:39,"> debugger listening on port 5858
> ue}}Content-Length: 101

@bajtos , looks like ""Non ASCII characters problem"", I think this is resolved...
",3y3,2014-08-19 16:34:43
260,2014-08-19 16:34:43,"@3y3 makes sense, let's close this issue as resolved.

@aplib please reopen if you are encountering the problem in the latest version too.
",bajtos,2014-08-19 16:34:43
259,2013-12-11 02:13:46,"I spent a fair deal of time hunting down where might node-inspector be storing my metadata (breakpoints, watch variables and such). This would be good to have in FAQs.

Feedback?
",charandas,2013-12-11 15:18:28
259,2013-12-11 08:37:47,"Hello @kbdaitch, thank you very much for the pull request.

Could you please extend the answer with instructions on how to clear all local settings with the tools already available in Chrome? Feel free to reword the text below to fit into the answer.

> You can clear all settings saved by Node Inspector in the HTML5 local storage by running the following command in Developer Tools Console:
> 
> <S_CODE_TOKEN>
> 
> After you have removed the local settings, reload the page to apply the change.
",bajtos,2013-12-11 15:18:28
259,2013-12-11 14:23:06,"@bajtos Thanks for pointing out the native browser API to me. I added details about both `localStorage.clear()` and `localStorage.removeItem(item)`.
",charandas,2013-12-11 15:18:28
259,2013-12-11 14:41:36,"I like the examples showing how to remove watches and breakpoints :+1: 

Please clean up the grammar/tone as suggested in the comments above.
",bajtos,2013-12-11 15:18:28
259,2013-12-11 14:57:17,"@bajtos Travis build failed on my last commit. The [log](https://travis-ci.org/node-inspector/node-inspector/jobs/15287071) doesn't show anything interesting related to the readme changes?
",charandas,2013-12-11 15:18:28
259,2013-12-11 15:16:08,"> Travis build failed on my last commit. The log doesn't show anything interesting related to the readme changes?

It seems like the Travis is overloaded at the moment and/or npm registry is misbehaving again. I'll restart the build to see if the problem was temporary/external.

But you are right, your changes have nothing to do with the build failures. Consider the changes as accepted, I'll wait with the merge for a while to see if I can get the build green first.
",bajtos,2013-12-11 15:18:28
259,2013-12-11 15:18:28,"Landed as 5946ecc. Thank you!
",bajtos,2013-12-11 15:18:28
258,2013-12-02 14:45:47,"Added a simple algorithm to decide what scriptId is expected depending
on Node version.

@Schoonology please review.
",bajtos,2013-12-04 18:13:02
258,2013-12-04 18:10:45,"Approved. :shipit:
",Schoonology,2013-12-04 18:13:02
257,2013-12-02 14:05:09,,CatTail,2013-12-04 13:03:24
257,2013-12-04 13:03:24,"Landed as 727c5c2. Thank you!
",bajtos,2013-12-04 13:03:24
256,2013-12-02 13:48:21,,CatTail,2013-12-02 13:52:28
256,2013-12-02 13:50:49,"That was fast :) Please start the sentence with a capital letter (`Command-line arguments...`), other than that the patch looks great.
",bajtos,2013-12-02 13:52:28
256,2013-12-02 13:52:10,"Ok, wait a minute, I will add a example.
",CatTail,2013-12-02 13:52:28
256,2013-12-02 14:23:53,"BTW, there is no need to create a new pull request when you need to rework the patch. It's better to amend the previous commit and force-push the changes to the same pull request. GitHub will correctly pick that up and show only a single (the most recent) commit.

<S_CODE_TOKEN>

See also http://blog.mozilla.org/webdev/2011/11/21/git-using-topic-branches-and-interactive-rebasing-effectively/.
",bajtos,2013-12-02 13:52:28
256,2013-12-03 01:31:41,"Thanks! @bajtos 
",CatTail,2013-12-02 13:52:28
255,2013-11-29 17:22:29,"Similar Issues Without Valid Answer:
https://github.com/node-inspector/node-inspector/issues/74
https://github.com/node-inspector/node-inspector/issues/181

I tested the same code with chrome debugger via a HTML file, and node-inspector via a simple node script.
## **Web Screenshot**

![web-working](https://f.cloud.github.com/assets/2992789/1646410/4def679e-591a-11e3-9e63-60131e661ecb.png)
## **Node-Inspector Screenshot**

![node-inspector-broken](https://f.cloud.github.com/assets/2992789/1646412/58308774-591a-11e3-8a93-1146eaa003e0.png)

The issue is that in web, `x` returns it's value, `5`. In node-inspector, `x` returns `undefined`.

I would expect that the behavior would be identical for both scripts, but it is not.

This issue prevents me from using node-inspector at all, though I would love to make it a part of my debugging workflow. 
",andrewjmead,2013-11-29 19:23:06
255,2013-11-29 19:23:06,"When you declare a variable inside `<script>` tag, it's defined in global scope (see this [StackOverflow answer](http://stackoverflow.com/questions/5786851/define-global-variable-in-a-javascript-function/5786899#5786899)). You can verify that yourself - expand the ""Global"" scope in DevTools.

Now when you wrap all your javascript code in a wrapper function, you get the same behaviour as in Node.

<S_CODE_TOKEN>
",bajtos,2013-11-29 19:23:06
255,2013-11-29 19:39:57,"@bajtos It's confusing because If I were to console.log `x` inside of `setTimeout`, it would print 5 because of the lexical scope.

Why would the debugger also not traverse into the functions containing context when looking for a variable?
",andrewjmead,2013-11-29 19:23:06
255,2013-11-29 19:54:43,"Ah okay, I finally understand. **If a variable is not referenced within the function, it will no be added to the closure, and it won't be accessible via the debugger.**

## **With Reference to `x` in function**

![example-closure](https://f.cloud.github.com/assets/2992789/1647031/eec2e028-592f-11e3-8fd6-d511419caf6a.png)

## **Without Reference to `x` in function**

![example-no-closure](https://f.cloud.github.com/assets/2992789/1647034/f865eb84-592f-11e3-80df-99c5bea35e90.png)
",andrewjmead,2013-11-29 19:23:06
255,2013-11-29 19:55:31,"Exactly :)
",bajtos,2013-11-29 19:23:06
255,2013-11-29 19:59:03,"Thanks for making me think about it a little more! Time to debug!
",andrewjmead,2013-11-29 19:23:06
254,2013-11-29 14:42:04,"Project config.js file will be import as dash key style and when
`rcToInnerConfig` runs with `Object.keys`, the order of key appear is
unknow and I experience that my own configuration file in $HOME will be
override by the global one.
",CatTail,2013-12-02 13:40:09
254,2013-11-29 16:31:38,"Hello @CatTail, thank you for reporting a problem and submitting a fix. I am afraid the fix is not solving the root cause, possibly even creating new problems.

First of all, take a look at the discussion in #191, especially this [comment](https://github.com/node-inspector/node-inspector/pull/191#discussion_r5660174):

> (the naming scheme)
> - config.json uses camel-case names only (this preserves compatibility with older installations)
> - command-line arguments and RC files use dashed names only (this is the new way for the future)

Looking at the current implementation, it seems like you should change `collectDefaultsFromDefinitions` to use dash-style keys, which is the style returned by `collectDefaultsFromJSONConfig()` and expected down the line in `rc()` defaults. Instead of changing `collectDefaultsFromJSONConfig()` to return camel-case keys.

Back to your issue:

> the order of key appear is unknow and I experience that my own configuration file in $HOME will be override by the global one.

If I understand your change correctly, then your change will completely disable default values from config.json. It fixes the problem only because there will be no merging anymore.

It would be very helpful if you could describe how to reproduce your problem. An automated unit-test would be even better.
",bajtos,2013-12-02 13:40:09
254,2013-12-02 13:40:09,"Sorry, I don't know rc configuration file also need to use dashed names. I try camel-case and experience problem.

> command-line arguments and RC files use dashed names only (this is the new way for the future)
",CatTail,2013-12-02 13:40:09
254,2013-12-02 13:47:43,"> Sorry, I don't know rc configuration file also need to use dashed names. I try camel-case and experience problem.

I see. Could you advise how to improve the documentation (README.md?) to make this more obvious for new users?
",bajtos,2013-12-02 13:40:09
254,2013-12-02 13:48:52,"@bajtos Yeah, I just send another pull request :)
",CatTail,2013-12-02 13:40:09
253,2013-11-28 19:34:59,"My funky.js looks as follows:

console.log(""foobar"");
1. Open a Command Prompt and type:
   node --debug-brk c:\funky.js
2. Open another Command Prompt and type
   node-inspector
3. Open Chrome and type
   http://127.0.0.1:8080/debug?port=5858
4. node-inspector in Command Prompt 2 starts spewing scores of messages such as
   
   errno: 50,
   code: 'EPERM',
   path: 'c:\Users\MSSQL$SQLEXPRESS\Documents\My Music' }
   glob error { [Error: EPERM, readdir c:\Users\MSSQL$SQLEXPRESS\Documents\My Pict ures']
5. After a five-minute wait, Chrome finally shows buttons Source, Console, etc. Under the ""funky.js"" tab, there is no javascript code. In the Console window at the bottom, there is an error message saying:
   Page.getResourceTree failed. Error: EPERM, readdir 'c:\Documents and Settings'
6. NodeJs in Command Prompt 1 shows ""Error 0.""

What gives?

---

What should be fixed:
- When Node Inspector iterates all project files (see [ScriptFileStorage.listScripts()](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L117)), it should silently skip files it cannot read/access.
- The heuristics used to guess what directory is the project root should be enhanced to prevent the above issue from happening at all. There are several possible solutions:
  - Ignore certain locations like windows drive root and `C:\Users`
  - List files only if the project contains package.json
  - If the project root does not contain package.json, list only well-known subdirectories: `./*.js, ./lib/**/*.js, ./node_modules/**/*.js`.
",clementis,2014-02-19 17:24:43
253,2013-11-29 09:29:07,"When you start a debugging session, Node Inspector tries to guess what files belongs to the application you are debugging, so that they can be loaded in the GUI even before they are require()d in the app. This way it's possible to set breakpoints in files that will be loaded later (usually when running via `node --debug-brk`).

Because your script file is in `C:\`, Node Inspector is trying to list all files on your hard-drive. That takes some time, which was already reported as #237. Eventually Node Inspector gets to directories which it does not have access to, and then it crashes - that's a bug that should be fixed. I have changed the title of this github issue accordingly.

A workaround is to move your sources to a subdirectory and run node from that directory too.

<S_CODE_TOKEN>
",bajtos,2014-02-19 17:24:43
252,2013-11-28 06:18:42,"Win 7 x64, node 0.10.22.

<S_CODE_TOKEN>
",ghost,2013-11-28 08:00:28
252,2013-11-28 08:00:28,"This is a general Node.js problem, please ask in [Node.js mailing list](https://groups.google.com/forum/#!forum/nodejs) or fill an issue in [Node](https://github.com/joyent/node/issues).
",bajtos,2013-11-28 08:00:28
252,2013-11-28 08:02:08,"Ok, but why did you put in the readme if it is crashing? Is it crashing for you also? Is there another way to use node-inspector?
",ghost,2013-11-28 08:00:28
252,2013-11-28 08:17:31,"> Ok, but why did you put in the readme if it is crashing? Is it crashing for you also? 

Read #106. Try to run `_debugProcess(pid)` as an administrator and make sure you pass an id of a running Node process in the first parameter. I suspect the error is telling you there is no Node process with that PID.

> Is there another way to use node-inspector?

To use Node Inspector (or any other Node debugger), you need to enable the debug mode in your Node.js application. See [readme](https://github.com/node-inspector/node-inspector#enable-debug-mode) and `--debug`.
",bajtos,2013-11-28 08:00:28
251,2013-11-25 22:31:12,"Simple request for apps using a lot of async or compiled JS code (in my case NoDent), which is to add a new button which is ""Step to next (executable) line"". I imagine this could be done by using the ""continue to here"" functionality where ""here"" is the next line with executable code on it as specified by the raw JS or source map if enabled
",MatAtBread,2014-12-18 17:10:47
251,2013-11-26 07:42:17,"Hello @MatAtBread, could you please add a sample code? I have difficulties to understand what you are asking for. How is the feature different from ""Step Over""?
",bajtos,2014-12-18 17:10:47
251,2013-11-26 10:01:55,"Sure. NoDent (https://github.com/MatAtBread/nodent) compiles to JS and ""hides"" return statements and nested functions to make sync code easier to write and maintain. It is only two semantic JS extensions.

A line such as:

<S_CODE_TOKEN>

Actually generates the code:

<S_CODE_TOKEN>

The code is generated with a sourcemap for debugging. I'm looking to handle the case where when on ""Line 1"", I want to break at ""Line 2"". What actually happens with ""Step Over"" is after ""Line A"", the return takes you somewhere else.

The asynchronous/sourcemap issue is a bit of a red-herring, the same situation occurs at the end or a loop (step through once and break on the first line after the loop), with returns, breaks and continues.

If you want to give me a quick intro to where in the code to start looking, I'm happy to have a go myself and let you merge the result.
",MatAtBread,2014-12-18 17:10:47
251,2013-11-26 11:53:02,"Now I see what you mean. I can imagine this would be cool for regular Node.js code too:

<S_CODE_TOKEN>

Now the bad news: this will require quite a lot of effort.
- The feature will be implemented mostly in the frontend. Backend does not understand sourcemaps, it deals with the transpiled javascript only.
- Node Inspector is using frontend from Chrome Developer Tools. Therefore the first step is to implement your change there.
- Once the change has landed there, we need to update the frontend snapshot it Node Inspector (easy) and implement missing backend functions (probably easy; if needed at all).

Check out this page on how to contribute to DevTools: [Contributing to Chrome DevTools](https://developers.google.com/chrome-developer-tools/docs/contributing)
",bajtos,2014-12-18 17:10:47
251,2013-11-26 16:07:32,"Thanks - I'll take a look
",MatAtBread,2014-12-18 17:10:47
251,2013-11-28 13:33:00,"It looks more work to contribute than I have time for, so I submitted a feature request, but it didn't go down too well (https://code.google.com/p/chromium/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Pri%20M%20Iteration%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified&groupby=&sort=&id=323694). If you want to add a comment to see if you can explain it better than me, feel free.
",MatAtBread,2014-12-18 17:10:47
251,2014-12-18 17:10:47,"I am closing this issue, as it is out of scope of Node Inspector, plus there was no activity here for a year. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 17:10:47
250,2013-11-25 22:26:21,,MatAtBread,2013-11-25 22:31:47
249,2013-11-20 11:31:32,"I'm running [meteor](http://meteor.com) 0.6.6.3, node v0.10.8, and Node Inspector v0.6.1 on Ubuntu. Debugging remotely with Chrome 30.

Here's a [sample meteor app](https://github.com/dandv/node-inspector-meteor-bug).

To reproduce the bug:
1. run `NODE_OPTIONS='--debug-brk' meteor`.
2. Navigate in the Sources panel to `programs` / `server` / `app/server` / `server.js`
3. Right click on Line 3 (`var result = HTTP....`) and choose ""Continue to here"".

What happens is that `node-inspector` crashes with the error message below, and the meteor app continues running without stopping at that line (or at [any breakpoints I had set](https://github.com/meteor/meteor/issues/1411)):

<S_CODE_TOKEN>
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/1329280-continue-to-here-crashes-node-inspector-when-debugging-meteor-app?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",dandv,
249,2013-11-28 05:44:08,"SAME ISSUE for me .. 
ENV : chrome, ubuntu, AMD 64 bit machine
",shravansing,
249,2013-11-29 19:52:15,"Hello @dandv, thank you for the bug report and great instructions for reproducing the issue.

The problem can be rephrased like this: ""Continue to here"" does not work for scripts that are not loaded into the V8 runtime yet. It can be reproduced in the latest Canary version of Chrome Developer Tools too.

I have filled a Chromium [bug #324524](https://code.google.com/p/chromium/issues/detail?id=324524), since Node Inspector GUI is a copy of DevTools front-end.
",bajtos,
249,2013-11-29 19:54:53,"Workaround: Instead of clicking ""Continue to here"", set a breakpoint on the first line in the source file. When the breakpoint is hit, you can click ""Continue to here"" and it should work as expected.
",bajtos,
249,2014-12-18 17:12:31,"This may get fixed by the front-end update #249.
/cc @3y3 
",bajtos,
248,2013-11-18 15:17:53,"Hello.
I'm brand new to node-inspector having downloaded it for the first time today.

I got version 0.6.1 which is running under node version 0.10.21.

Having followed the instructions (about 10 times now)
`node-inspector` gives me

<S_CODE_TOKEN>

I then ran: 

<S_CODE_TOKEN>

if I then open Chrome version 31.0.1650.57
I just get the error message

<S_CODE_TOKEN>

I don't really know where to start here.
I've tried reversing the order for `node-inspector` and `--debug app.js`
I've tried killing all the processes and starting again.
I've tried `node-inspector --web-port={port}`  to run it under a a different port.
Same error message all the time.
Would someone mind pointing me in the right direction please.
",magwitch,2014-08-13 11:05:35
248,2013-11-18 16:27:39,"Hi @magwitch, thank you for reporting the issue.

Is your node-inspector running on the same machine as the process you are debugging? You can connect to Node Inspector from a browser running on a different computer, but Node Inspector and the debugged process must be on the same machine.
",bajtos,2014-08-13 11:05:35
248,2013-11-18 18:43:24,"Thank you for replying bajtos.
Yes, I'm just running everything on my MacBook Pro under Mac OS X 10.7.5
",magwitch,2014-08-13 11:05:35
248,2013-12-10 03:36:57,"I also meet this problem, and don't know how to solve? anybody resolved it? 
I'm running on Windows 7 64 bit.
I try to remove and re-install, but It still does not work, it took me three days.
",nbhuy89,2014-08-13 11:05:35
248,2013-12-10 09:15:23,"Is the built-in node debugger able to connect to the debugged process?

<S_CODE_TOKEN>

Can you reproduce the problem with this [simple program](https://raw.github.com/node-inspector/node-debug-samples/master/simple-server/index.js)?

<S_CODE_TOKEN>
",bajtos,2014-08-13 11:05:35
248,2013-12-11 02:03:08,"Thank you for your reply, i found the reason, It looks like #253 , because i put my debug file in root of D:\ , so it works fine  if i move to sub-directory. I can debug now, thanks. 
",nbhuy89,2014-08-13 11:05:35
248,2013-12-22 08:49:33,"Same issue
",TangMonk,2014-08-13 11:05:35
248,2013-12-26 09:54:45,"Please check #260 too.
",bajtos,2014-08-13 11:05:35
248,2014-08-12 19:34:55,"@magwitch , please confirm this issue on v0.7.4. I think it was fixed by 39fe73b
",3y3,2014-08-13 11:05:35
248,2014-08-13 11:05:35,"@3y3 I'm happy to close this issue. I confess I have no idea if it's fixed as I gave up struggling to get node-inspector running. Life's too short and if I can't get something working as expected and I can find an alternative method then I just go with the alternative.  Perhaps one day I'll come back and investigate node-inspector again.
Many thanks.
",magwitch,2014-08-13 11:05:35
248,2014-08-13 16:45:29,"@magwitch 

> I can find an alternative method then I just go with the alternative.

I am curious, what alternative did you choose?
",bajtos,2014-08-13 11:05:35
248,2015-07-14 02:37:33,"I'm getting this problem with the latest version.

<S_CODE_TOKEN>

And in chrome I get this error:

<S_CODE_TOKEN>
",sadtaco,2014-08-13 11:05:35
248,2015-07-14 02:50:16,"It's not letting me edit, but I wanted to add that just using ""node-debug app.js"" has the app running, but it doesn't seem reachable.  The app doesn't behave correctly (can't connect), and I can't access the inspector, getting ERR_CONNECTION_REFUSED

<S_CODE_TOKEN>
",sadtaco,2014-08-13 11:05:35
248,2015-09-05 00:34:35,"Hey i am founding this error on my Node

D:\howrah>ionic start project1 sidemenu
Creating Ionic app in folder D:\howrah\project1 based on sidemenu project
Downloading: https://github.com/driftyco/ionic-app-base/archive/master.zip
Error Initializing app:  Error: tunneling socket could not be established, cause
=connect ECONNREFUSED
    at ClientRequest.onError (C:\Users\riturajcse\AppData\Roaming\npm\node_modul
es\ionic\node_modules\request\node_modules\tunnel-agent\index.js:174:17)
    at ClientRequest.g (events.js:199:16)
    at ClientRequest.emit (events.js:107:17)
    at Socket.socketErrorListener (_http_client.js:271:9)
    at Socket.emit (events.js:107:17)
    at net.js:459:14
    at process._tickCallback (node.js:355:11)

Error: tunneling socket could not be established, cause=connect ECONNREFUSED
    at ClientRequest.onError (C:\Users\riturajcse\AppData\Roaming\npm\node_modul
es\ionic\node_modules\request\node_modules\tunnel-agent\index.js:174:17)
    at ClientRequest.g (events.js:199:16)
    at ClientRequest.emit (events.js:107:17)
    at Socket.socketErrorListener (_http_client.js:271:9)
    at Socket.emit (events.js:107:17)
    at net.js:459:14
    at process._tickCallback (node.js:355:11)

tunneling socket could not be established, cause=connect ECONNREFUSED (CLI v1.6.
4)

Your system information:

Cordova CLI: 5.2.0
Ionic CLI Version: 1.6.4
Ionic App Lib Version: 0.3.8
OS: Windows 8
Node Version: v0.12.7
",Riturajcse,2014-08-13 11:05:35
248,2015-10-30 17:40:43,"start request failed { [Error: connect ECONNREFUSED] 

I found my firewall is blocking this to run. Can somebody tell me how to allow this through firewall?

its blocking my jasmine test to run, 
",praveenrawat,2014-08-13 11:05:35
248,2016-06-16 09:19:38,"I have the same problem can some help please..??

Thanks in Advance.
",soujanyamypala,2014-08-13 11:05:35
248,2016-06-16 09:24:59,"[npm-debug.zip](https://github.com/node-inspector/node-inspector/files/318064/npm-debug.zip)
",soujanyamypala,2014-08-13 11:05:35
247,2013-11-15 23:57:25,"Feature request for CoffeeScript support for this awesome functionality.
I've seen it work in pure JS projects; however, in CoffeeScript projects the files aren't available until they're required.

If it should be working with .coffee files consider this a bug report and I can add repro instructions / details, just let me know!

Thanks for the excellent debugging tool!
",ElliotChong,2013-11-28 23:43:31
247,2013-11-28 18:46:00,"Hi @ElliotChong, I am glad you find Node Inspector as a useful tool.

As for setting breakpoints in coffee script files that are not loaded yet, it's a limitation of Chrome Developer Tools we are using for the front-end. The sourcemap information (which is needed to find coffee files) is passed to DevTools when a script is loaded into V8. AFAIK the protocol does not support passing this info sooner.

You should be able to reproduce this issue in Chrome browser too (create index.html referencing mod.js transpiled from mod.coffee).

Fortunately for you, there is a workaround: you can set the breakpoint in the transpiled javascript file (that is not loaded yet). When the breakpoint is hit, Node Inspector will open the coffee script source on the correct line.

I am afraid we can't fix the problem in Node Inspector at the moment, but feel free to report it to Chrome DevTools team (see [Contributing to Chrome DevTools](https://developers.google.com/chrome-developer-tools/docs/contributing))
",bajtos,2013-11-28 23:43:31
247,2013-11-28 23:43:31,"Much appreciated for the detailed response and workaround!

Thanks again for the continued node-inspector support, it's a crucial part of the Node ecosystem. Cheers!
",ElliotChong,2013-11-28 23:43:31
246,2013-11-15 20:34:09,"Its surprising that I have not found a solution with many other similar issues. But all of the other threads were closed before any actual solution was found. Does anybody know why the line ""Failed to open socket on port 5858, waiting 1000 ms before retrying"" logs over and over when I run node --debug app.js?
",awiss,2014-02-20 17:56:30
246,2013-12-26 09:22:44,"Hi @awiss, thank you for reporting the issue.

Could you please provide links to the issues you mean by ""all other threads""?

Most likely you have another process listening on port 5858. Try to run `node --debug=5000 app.js` instead (try to pick another port if 5000 is taken too).

Once you get your process running, you have to change the port used by Node Inspector too (see `debug-port` in [docs](https://github.com/node-inspector/node-inspector#inspector-options)).
",bajtos,2014-02-20 17:56:30
246,2014-01-15 14:33:08,"Hello there. I also get this error when I try to run two instances of node-inspector and two node processes. I tried other ports, but I keep getting this error. I also posted a question on stackoverflow.com:
http://stackoverflow.com/questions/21139957/is-it-possible-to-run-two-instances-of-node-inspector-when-i-have-two-node-proce
Have you found out why it is doing this?
",faniepotgieter,2014-02-20 17:56:30
246,2014-01-15 15:00:58,"Hi @fpotgieter, could you please post the command lines you used to start the debugged applications, the command line you used to start Node Inspector, and the two URLs you are loading in the browser?

Example:

<S_CODE_TOKEN>

Can you reproduce the same problem using the [example server](https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js)? Note you have to change the port number to something else than 3300 for the second server instance.
",bajtos,2014-02-20 17:56:30
246,2014-01-15 15:22:44,"Hi.

Thanks for the quick reply. And great work on node-inspector.

It looks like it is not necessarily when I run two instances, but it always happens with my one command and node server.

node --debug=5000 index.js --type ""web"" --database_url postgres://xxx:xxx@1.1.1.1:5432/xxx
debugger listening on port 5000

node-inspector --debug-port=5000 --web-port=8081
Node Inspector v0.7.0-1
   info  - socket.io started
Visit http://127.0.0.1:8081/debug?port=5000 to start debugging.

when i use 8080:
Node Inspector v0.7.0-1
   info  - socket.io started
   warn  - error raised: Error: listen EADDRINUSE
Cannot start the server at 0.0.0.0:8080. Error: listen EADDRINUSE.
There is another process already listening at this address.
Run `node-inspector --web-port={port}` to use a different port.

url: http://127.0.0.1:8081/debug?port=5000

The debugger runs on that url, but it just doesn't show all folders and files in the sources on the left. 

I have to run now, but will try and reproduce it on your example server tomorrow when I get back to my computer.

Thank you.
",faniepotgieter,2014-02-20 17:56:30
246,2014-01-15 15:30:04,"Your setup looks correct to me. Is it possible that you are experiencing #237? Try to disable pre-loading of all javascript files:

<S_CODE_TOKEN>
",bajtos,2014-02-20 17:56:30
246,2014-01-16 07:28:13,"Good morning.

No. I am not experiencing slow start up. And I tested it on the example server in the link you provided yesterday and it works perfectly. Node-inspector runs fine when I get that error, it just does not load all my files into the sources tab in node-inspector.

I saw this now:
https://github.com/node-inspector/node-inspector/issues/199
It looks like the same issue or very similar to the one I have and @techmachine wrote that is was a problem in a run.js file. So do you think it is something in my index.js file? If it is do you have any idea what might cause this?

Thank you.
",faniepotgieter,2014-02-20 17:56:30
246,2014-01-16 08:49:52,"I believe #199 is a different problem, you are not getting the error message ""Failed to open socket on port 5858, waiting 1000 ms before retrying"".

> I am not experiencing slow start up.

How long did you wait for the files to show up? ;-) Can you confirm that you run Node Inspector with `--no-preload` and the issue was still present?

How many files do you have in your application, including the npm modules? (You can get that number by running `find . -name '*.js' | wc -l` in your project root.)

To be honest, I am running out of ideas of what to try. I suppose the last resort is to dump the communication between front-end, back-end and the V8 debugger by starting Node Inspector using the following command-line:

<S_CODE_TOKEN>

Open the inspector in the browser, wait for few seconds, then stop the inspector process and upload the dump file somewhere to cloud.

Note: the dump will most likely include full source of all scripts loaded in V8, you might want to strip them. Search for `""type"":""response"",""command"":""scripts""` .
",bajtos,2014-02-20 17:56:30
246,2014-01-16 09:19:45,"Sorry. I think I wasted your time. I don't think it is a problem with node-inspector, because I got this error just now using the node command line debugger as well.
I am getting this: 
""Failed to open socket on port 5858, waiting 1000 ms before retrying"" 
when starting my app with --debug or with debug.
Thanks for the help.
",faniepotgieter,2014-02-20 17:56:30
246,2014-01-16 09:38:07,"@fpotgieter at least we are getting somewhere :)

Let's move the discussion to #199 then.
",bajtos,2014-02-20 17:56:30
246,2014-02-20 17:56:30,"Closing as duplicate of #199.
",bajtos,2014-02-20 17:56:30
246,2015-10-01 16:22:15,"In my case the same error was caused by nginx (running in background). `sudo nginx -s stop`
",skozz,2014-02-20 17:56:30
245,2013-11-15 15:12:47,"Hi:
    when I run `node-inspector &` and open my chrome, devtools can be seen, but a dispointed error says

<S_CODE_TOKEN>

I change the port in `..\AppData\Roaming\npm\node_modules\node-inspector\config.json`, and there is no help....
",freestyle21,2013-11-15 18:39:26
245,2013-11-15 17:39:02,"The value `12023` is coming from the URL in your browser, `node-inspector\config.json` is just a default value if there is no port specified.

Assuming your Node Inspector instance runs on the default port 8080 and your Node.js process has debugger listening on 5858, you should open this URL: `http://localhost:8080/debug?port=5858`.

The error message you pasted is telling me that your URL was `http://localhost:8080/debug?port=12023` instead.
",bajtos,2013-11-15 18:39:26
245,2013-11-16 02:17:54,"@bajtos  Thanks for you reply...

I had opened the URL `http://localhost:8080/debug?port=5858`  for the first time. and my chrome says `Error: connect ECONNREFUSED. Is node running with --debug port 5858?`

then I change the default port in  `node-inspector\config.json` into `12023` (random number), but it make no sense.

so I don't know where is my mistake.
",freestyle21,2013-11-15 18:39:26
244,2013-11-14 10:06:11,"When I open the browser to the node-inspector page I refresh the page for 2 minutes before it shows my code.

I'm starting node with --debug-brk.

In the previous version of node-inspector v0.1.10 is faster, like 1-5 seconds.

Using google chrome on win 7 32bit

What is my problem?
thanks
",totty90,2014-02-20 18:04:33
244,2013-11-14 13:41:23,"you may check if it's the same issue of #237 #238
",toedook,2014-02-20 18:04:33
244,2014-02-20 18:04:33,"Please try v0.7.0 and reopen the issue the problem persists.

Possible workaround: `node-inspector --no-preload`
",bajtos,2014-02-20 18:04:33
243,2013-11-13 08:09:18,"Added debug logs for devtools protocol and V8 debugger protocol.

Set DEBUG=node-inspector:protocol:\* to enable.

@Schoonology Please review. I am going to use these logs in my talk about internal architecture of Node Inspector.
",bajtos,2013-11-13 17:34:52
243,2013-11-13 15:08:49,"@bajtos Approved.
",Schoonology,2013-11-13 17:34:52
242,2013-11-13 05:31:34,"I need this property in order to resolve the location of the node-inspector main file for ChrisWren/grunt-node-inspector#4.
",ChrisWren,2013-11-13 19:30:30
242,2013-11-13 19:30:30,"Hi @ChrisWren,

thank you for submitting a pull request. Unfortunately your change breaks existing code that is using functions exported in `index.js`.

To run a Node Inspector instance in a new process, use

<S_CODE_TOKEN>

The main file (`index.js`) is reserved for people that want to embed Node Inspector inside an existing Node process or access utility functions like URL builder. (Support for the former is not implemented yet, the idea is to export `lib/debug-server.js` and possibly `lib/config.js` too.)
",bajtos,2013-11-13 19:30:30
242,2013-11-14 04:35:31,"Thanks for educating me, I assumed that the `node-inspector/bin/inspector` was the entry point.
",ChrisWren,2013-11-13 19:30:30
241,2013-11-12 00:51:46,"It appears that node-inspector is wrapping all source files in functions defined as:

(function (exports, require, module, __filename, __dirname)
{
... code
})();

I believe this behavior is killing source maps, because the source map comment is now inside this function, rather than at the end of the file as it's supposed to be.

Either way, source maps are not working, even when stripped down to a simple ""Hello world"" test case.

Running the latest build.
",Back-io,2014-02-19 17:27:58
241,2013-11-12 09:30:21,"Hello @bunnycode, thank you for reporting the problem.

> It appears that node-inspector is wrapping all source files in functions defined as:
> 
> <S_CODE_TOKEN>

To clarify: source files are wrapped by Node.js module system, not by Node Inspector. Node Inspector is aware of this and un-wraps the content in some places like live-edit. Sourcemap support should not be affected by wrapping - see [lib/ScriptManager.js#L6](https://github.com/node-inspector/node-inspector/blob/bc1834a8120d92bce8972f729ab5b170222b47fc/lib/ScriptManager.js#L6) and [lib/ScriptManager.js#L157](https://github.com/node-inspector/node-inspector/blob/bc1834a8120d92bce8972f729ab5b170222b47fc/lib/ScriptManager.js#L157).

I am using this simple application to test sourcemap support: [node-inspector/node-debug-samples > sourcemap](https://github.com/node-inspector/node-debug-samples/tree/master/sourcemap). 

Are you able to reproduce your problem with my sample application too?

What does it mean ""source maps are not working""? Please be more specific, describe what you have expected and what happened instead. How did you start your application in debug mode?

See also #224, the person may be experiencing the the same problem as you are.
",bajtos,2014-02-19 17:27:58
241,2013-11-12 14:32:55,"#224 looks like a similar issue.

By ""not working"", I mean that it's as if source maps are an unsupported feature. There are no .ts files (or .coffee files) in the file listing, and I'm debugging the compiled .js files.

With the sample server application you posted, I tried the following, without any luck:
- Upgraded from Node 0.8 to 0.10.21
- Changed the source map comment in the compiled JS to use the //# format, as well as the //@ format, as well as removing the /\* */ wrapper around the sourcemap comment that coffeescript outputs.
- Tried running node through sudo and non-sudo using both --debug and --debug-brk
- Tried running node-inspector as a background and a foreground process (not that this would do anything)

No errors in the node inspector console.

Running OS X Mountain Lion.
",Back-io,2014-02-19 17:27:58
241,2013-11-12 16:42:58,"Some more discoveries:

I'm running a separate HTTP server to serve my static content (https://github.com/nodeapps/http-server), as well as Vogue (http://aboutcode.net/vogue/) for CSS updating. Both are node processes. When turning them off, and kicking off node-inspector again, a TypeError is reported when trying to load the source maps:

![screen shot 2013-11-12 at 11 37 04 am](https://f.cloud.github.com/assets/2212259/1523650/29a8cdf8-4bb9-11e3-852a-8c60fa1d2fa5.png)

The actual error is that WebInspector.resourceTreeModel.mainFrame is undefined, so access to the .id property is throwing.
",Back-io,2014-02-19 17:27:58
241,2014-01-23 17:48:35,"This is most likely a duplicate of #271.
",bajtos,2014-02-19 17:27:58
241,2014-02-19 17:27:58,"Closing as a duplicate.
",bajtos,2014-02-19 17:27:58
240,2013-11-11 23:51:17,"Not sure whether this is a node or a node-inspector request, but it's tedious having to run using `--debug-brk` in order to establish the node-inspector connection, then click Resume to be able to pause at a `debugger` statement. I'd like to be able to run using `--debug`, connect node-inspector and have it come up paused at that statement.
",aexmachina,2014-12-18 17:00:46
240,2013-11-12 09:47:28,"Hello @aexmachina, thanks for submitting your request.

I can see two possible ways how to implement this:
1. Modify Node core and/or V8 engine to support what you are asking for. Beware that the current behaviour, where `debugger;` statements are skipped when there is no debugger connected, is most likely intentional and there may be good reasons why it should stay that way.
2. Modify Node Inspector to resume execution of the debugged process. This will require a new flag, probably as a URL query parameter. You will still have to run your application using `--debug-brk`, but instead of clicking on resume button, you will modify the URL the first time you open debugger, and then reload this modified URL every time you restart your application (which you have to do anyway).

While I am not opposed to have this feature implemented, it's has a very low priority for me and thus I won't have time to implement it. However, I am happy to help you if you decided to work on it yourself.
",bajtos,2014-12-18 17:00:46
240,2013-11-13 00:32:24,"Okay, I'm interested in implementing the second option. A few questions to get me started:
- Where would be a good entry point to handle checking the query parameter?
- How should I tell the debugger to resume?

Thanks!
",aexmachina,2014-12-18 17:00:46
240,2013-11-15 11:49:35,"> Where would be a good entry point to handle checking the query parameter?

You can use the same approach as for `port=5858` - see [lib/debug-server.js#L12](https://github.com/node-inspector/node-inspector/blob/6fa63fe0fdae38bcab1b6c6875a55f9d74e3b10e/lib/debug-server.js#L12) and [lib/debug-server.js#L66](https://github.com/node-inspector/node-inspector/blob/6fa63fe0fdae38bcab1b6c6875a55f9d74e3b10e/lib/debug-server.js#L66)

> How should I tell the debugger to resume?

In [DebuggerAgent._onDebuggerConnect()](https://github.com/node-inspector/node-inspector/blob/6fa63fe0fdae38bcab1b6c6875a55f9d74e3b10e/lib/DebuggerAgent.js#L54), add a call to `this.resume`. It's important to call it after all old breakpoints were removed by `_removeAllBreakpoints`, but before `_sendBacktraceIfPaused`.
",bajtos,2014-12-18 17:00:46
240,2014-12-18 17:00:46,"I am closing this issue, since there was not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 17:00:46
239,2013-10-30 16:17:44,"I'm running node-inspector 0.5.0, installed via npm 1.3.11 with node 0.10.21. It's running on an Ubuntu VM hosted on a Mac. 

I start my script with --debug-brk, then switch over to Chrome on the Mac and visit the debugger address, and everything looks fine. However, if I click the settings gear in the lower right, and then check any box (eg, ""Disable cache'), I get an error in the debugger window: `Received request for a method not implemented: Network.setCacheDisabled`

In the node-inspector console within Chrome, I see:

<S_CODE_TOKEN>

And in the Chrome developer tools console I see:

<S_CODE_TOKEN>

The same thing happens if I run Chrome under Ubuntu and connect to the debugger on 127.0.0.1. I get similar errors when I attempt to use many other features. For instance, if I press pause, I get this error:

<S_CODE_TOKEN>

Any thoughts? Thank you. Please note I have disabled all extensions in the Mac version of Chrome, and the Ubuntu version is a clean install with no extensions. 
",kenficara,2014-08-28 09:02:31
239,2013-10-30 16:38:32,"The behaviour you are seeing is sort of expected. There are too many requests in Developer Tools Protocol to get them implemented all at one go, plus not all of them are usable in Node Inspector context. The error messages are serving as an indicator of what is missing.

`Network.setCacheDisabled` can be probably implemented as no-op in Node Inspector - see [FrontendCommandHandler](https://github.com/node-inspector/node-inspector/blob/master/lib/FrontendCommandHandler.js#L46).

I am not sure about `Debugger.setSkipAllPauses`. Does the ""pause"" works for you? If it does, then we can probably safely ignore this command. If not, then we need to find out how is it implemented in Blink (Chrome) and do the same in Node Inspector.
",bajtos,2014-08-28 09:02:31
239,2013-10-31 16:34:28,"Ah, I get it. I got this error once when hitting the ""Pause"" button but so far haven't been able to reproduce it. If I can I will post the details. Thanks for the quick response, and a very useful and well-documented project.
",kenficara,2014-08-28 09:02:31
239,2013-11-01 08:54:42,"I'd rather keep this issue open - at least `Network.setCacheDisabled` should be added to the list of no-op commands.
",bajtos,2014-08-28 09:02:31
238,2013-10-30 14:32:38,"I have installed the latest version of node inspector (v0.5.0) from npm and when I attempt to connect with Chrome 30.0.1599.101 the page never finishes loading. I receive no errors, it just gets stuck until I kill node-inspector. 

I checked out the git repo and ran a git bisect to try and find where the problem occurred, since a coworker could successfully use a previous version of node-inspector. Bisect points to commit 08a27407217ef37520486f23f11c48ad893d865c as the failing point.

My project has several node_modules inside it that are symlinks to other node projects being developed, and all of these projects are inside of a nodeenv. None of these things should be an issue, but after I removed the node_modules folder in my project, the node-inspector began working for the project. Of course, I can't test it now, since none of the dependencies are available.

This leads me to suspect some sort of infinite loop during the source walk through the node_modules, or at least a very long, very slow walk into the entire nodeenv source. The ""global"" npm directory weighs in at 138M of stuff without counting any of my stuff.
",srathbun,2013-11-13 19:06:48
238,2013-10-30 15:08:42,"This issue seems similar to #237. See my [comment](https://github.com/node-inspector/node-inspector/issues/237#issuecomment-27286308) on how to disable the source walk in your local copy.

If the workaround solves your issue, we can add a configuration/command-line option for enabling/disabling source walk.
",bajtos,2013-11-13 19:06:48
238,2013-10-30 16:55:40,"So I tried this fix on the master branch: 

<S_CODE_TOKEN>

The node-inspector still hangs for me. Per your comment about checking in the chrome inspector for slow downs, I'm afraid I cannot check. It hangs so bad that the chrome inspector will not come up until after I kill node-inspector.
",srathbun,2013-11-13 19:06:48
238,2013-10-30 17:05:20,"Hmm. Can you enable `dumpInspectorProtocolMessages` in [InspectorBackend.js](https://github.com/node-inspector/node-inspector/blob/master/front-end/InspectorBackend.js#L45) and see what requests are pending? Each request and response logged to DevTools console has an id that is used to match them together.
",bajtos,2013-11-13 19:06:48
238,2013-10-30 19:44:01,"After letting it run for several minutes, I've got this on the console:

<S_CODE_TOKEN>
",srathbun,2013-11-13 19:06:48
238,2013-10-31 15:38:27,"The response to this request has not arrived:

<S_CODE_TOKEN>

Modifying `$class.findAllApplicationScripts` to immediately return an empty list should fix this problem, as the source file crawl is by far the most expensive in `Page.getResourceTree`.

You can add debug logging to [PageAgent](https://github.com/node-inspector/node-inspector/blob/master/lib/PageAgent.js).getResourceTree() to see where it is spending most of the time.
",bajtos,2013-11-13 19:06:48
238,2013-10-31 20:51:52,"Isn't that what I tried previously?
",srathbun,2013-11-13 19:06:48
238,2013-11-01 09:16:19,"> Isn't that what I tried previously?

Well, the console log suggests that you didn't do that. If `Page.getResourceTree` is still slow even with the modified `findAllApplicationScripts`, can you please add debug logging to `PageAgent.getResourceTree` per my comment above?

Alternatively, if you have a public GitHub repo where the problem can be reproduced, I can try to debug the problem myself.
",bajtos,2013-11-13 19:06:48
238,2013-11-01 12:30:18,"Hmm, I must have not started the modified version last time I changed the `findAllApplicationScripts` function. Updating it to immediately call the callback with an empty list lets the page load, as you suspected. 
",srathbun,2013-11-13 19:06:48
238,2013-11-13 19:06:48,"I am closing the bug as duplicate.
",bajtos,2013-11-13 19:06:48
237,2013-10-28 12:34:52,"Hi there, 

i am working on a big node.js application, currently the debugger requires about one Minute to finish loading. To improve the startup time i sometimes clear local caches but this helps only a little.

Is there any way to improve speed ? Maybe exclude files or something ? 

Thx 

---

What needs to be implemented to resolve this issue:
1. Modify ScriptFileStorage to cache results of glob searches by reusing the glob cache object (see https://npmjs.org/package/glob for details).
2. Add a new config option to disable findAllApplicationScripts - see [lib/ScriptFileStorage.js](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L174)
3. Add a new config option to disable sourceMap detection - see [lib/ScriptManager.js](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptManager.js#L144)
",agebrock,2014-02-19 17:24:43
237,2013-10-29 08:52:35,"Node Inspector is crawling your local file system to get all js source files. Can you try to disable this feature by modifying `ScriptFileStorage.findAllApplicationScripts`?

See https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L174

<S_CODE_TOKEN>

Another thing to try: open [front-end/InspectorBackend.js](https://github.com/node-inspector/node-inspector/blob/master/front-end/InspectorBackend.js#L44) and change the values on lines 44 and 45 to true. While waiting for the debugger to load, open Chrome Developer Tools on Console tab and inspect messages printed. Try to figure out where is the most time spent. It could be Node Inspector backend taking too long to respond to a request/command (this will happen when a response arrives long after the request), or the frontend having too much work with processing the response (I believe this would show in the timing logs).

Alternatively, if you have a publicly available project where the issue can be reproduced, I can try to analyse the low performance myself.
",bajtos,2014-02-19 17:24:43
237,2013-10-30 11:18:55,"Getting better. 
I hacked  https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L174 
StartUP is quite fast now. I understand what the changes did, and i can work with it. 

The filetree is fast generated but it still takes about 30sec to use the frontend. 
It looks like there are still a lot of parsing activity within the frontend.

I used your second option to analyse the problem, there is no long process, it looks like there are simply to much files within the project.

time-stats: Debugger.scriptParsed = 0 or 1  
is called 733 times. 
",agebrock,2014-02-19 17:24:43
237,2013-10-30 11:36:43,"I excluded the node_modules with the following code but there the parsing still takes a while.

<S_CODE_TOKEN>

This worked as well but i still slow on parsing, here are the results:

time-stats: Page.getResourceContent = 107 + 100 InspectorBackend.js:227

=> time-stats: Debugger.getScriptSource = 20321 + 1 InspectorBackend.js:227

time-stats: Debugger.setBreakpointByUrl = 17248 + 10 InspectorBackend.js:227
time-stats: Debugger.setBreakpointByUrl = 13285 + 1 InspectorBackend.js:227
time-stats: Debugger.setBreakpointByUrl = 6430 + 1 InspectorBackend.js:227
time-stats: Debugger.removeBreakpoint = 108 + 0 InspectorBackend.js:227
time-stats: Debugger.removeBreakpoint = 40 + 0 InspectorBackend.js:227
time-stats: Debugger.removeBreakpoint = 4 + 0 

Currently running out of ideas :( 
",agebrock,2014-02-19 17:24:43
237,2013-10-30 15:26:42,"Hey @agebrock, thank you for spending the time & effort investigating the problem.

Few thoughts & questions:
1. When you hacked `findAllApplicationScripts` to return an empty list, was the performance of Node Inspector good enough? There is another person having a similar problem (see #238). Perhaps adding a config option for disabling  `findAllApplicationScripts` would be a good start?
2. `Debugger.scriptParsed` is called for every source file loaded into V8/Node via `require()`.  Do I understand correctly that when you disabled dispatch of this event in the front-end, the performance was good enough?
3. There is a concept of hidden scripts that are ignored by the debugger, maybe we can change [ScriptManager](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptManager.js#L86) to not send hidden files to the UI. There is a drawback in using hidden scripts - you won't be able to set breakpoints in such hidden scripts.
4. Another possible reason for the slowness of `Debugger.scriptParsed` is parsing of source-maps URLs - Node Inspector requests content of every script loaded in V8 to look for a source-map URL - see  [ScriptManager. _getSourceMapUrl()](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptManager.js#L148)
5. I am surprised that `Debugger.getScriptSource` and `Debugger.setBreakpointByUrl` take so much time. Maybe there is a performance issue in Chrome Developer Tools? If you can afford to spend some more time on this issue, you can create a HTML page including similar amount of dummy script files as you have in your application and open this page in Chrome Developer Tools (ideally in the latest [Canary](https://www.google.com/intl/en/chrome/browser/canary.html) build). This way we will know whether the issue is in Node Inspector backend or Developer Tools frontend.
",bajtos,2014-02-19 17:24:43
237,2013-10-30 17:18:40,"Setting the callback to callback(null,[]) in 3. helped ! 

<S_CODE_TOKEN>
",agebrock,2014-02-19 17:24:43
237,2013-10-30 17:50:00,"Cool.

My conclusion is that we need two new config options: disable findAllApplicationScripts and disable sourceMap detection. Will that solve your problem?

In the long term, it would be nice to improve the performance of those two operations so that there is no need to disable them.
",bajtos,2014-02-19 17:24:43
237,2013-10-31 11:29:57,"That would be perfect. 
",agebrock,2014-02-19 17:24:43
237,2013-10-31 12:12:45,"I checkt the filecrawler again since, there are some files missing without that feature.
I found out that 
    $class.listScripts
is called twice with the same parameters in my case. I fixed the problem using a simple Cache.

I pushed that version an my fork to explain better what i did. 

https://github.com/agebrock/node-inspector/commit/10944d9b848acd78535cc0cbe613325565411466

I hope that will help you in some way.
",agebrock,2014-02-19 17:24:43
237,2013-11-15 11:55:41,"> I checkt the filecrawler again since, there are some files missing without that feature.
> I found out that 
> $class.listScripts
> is called twice with the same parameters in my case. I fixed the problem using a simple Cache.

Even better solution would be to use glob cache - see https://npmjs.org/package/glob. That way the results are cached even when the paths are not same, but one is a subdirectory inside the other.
",bajtos,2014-02-19 17:24:43
237,2013-11-19 18:29:32,"Clearly reworking findAllApplicationScripts fixed the perf issues on my side. Now the startup is fast as a rocket. 
Now some scripts take a bit long to come up on the front end though. But hiding node_modules fixes that issue.
",getvega,2014-02-19 17:24:43
237,2013-12-03 04:34:40,"Is there a clear workaround for now?  Reading through the comments I am confused on exactly what I need to change...
",newmanw,2014-02-19 17:24:43
237,2013-12-03 09:00:04,"@newmanw Not sure if this is a _clear_ workaround, but at least it is something...
1. disable findAllApplicationScripts - modify [lib/ScriptFileStorage.js](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L174)
   
   <S_CODE_TOKEN>
2. disable sourceMap detection - modify [lib/ScriptManager.js](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptManager.js#L144)
   
   <S_CODE_TOKEN>
",bajtos,2014-02-19 17:24:43
237,2013-12-03 09:13:02,"We are still working with a glob cache and disabled sourceMaps. 
I skipped the first point because i missed some files within the project. 

First load of the inspector is about 5 secs every reload is about 1 sec. Love it .. 
",agebrock,2014-02-19 17:24:43
237,2014-03-13 23:17:03,"Is still slow as hell  in the newest version, almost doesn't work... (Only on windows)
",totty90,2014-02-19 17:24:43
237,2014-03-14 06:16:26,"@totty90 Is it still slow with `--no-preload`? 

Can you provide me with an example where I can reproduce the problem?

If not, then please enable protocol logging (`set DEBUG=node-inspector:protocol*`) before starting the Node Inspector, start debugging and upload the debug log as gist or file somewhere, so that I can investigate timing. Note: some of the protocol messages contain full source of the debugged app, you may want to strip the source text out.
",bajtos,2014-02-19 17:24:43
237,2014-03-14 11:30:35,"Hello

I've just installed node-inspector: ""npm install -g node-inspector""
The run it: ""node-inspector""
Start the node app with --debug or --debug-brk;
Go to the debug url and wait a long time until it shows something.

I will post the results with set DEBUG=node-inspector:protocol\* later ;)

Thanks for support
",totty90,2014-02-19 17:24:43
237,2014-03-14 14:54:01,"@totty90 you are welcome. Please create a new github issue and post the results there.
",bajtos,2014-02-19 17:24:43
237,2014-03-15 06:34:59,"Getting really slow startup as well. On OSX. Debugging Coffescript app.
",pdufour,2014-02-19 17:24:43
237,2014-03-15 23:05:17,"@pdufour , please try `--no-preload=true` see #325 
Send if it will be helpful.
",3y3,2014-02-19 17:24:43
237,2014-03-16 19:18:15,"Hello!

--no-preload=true didn't speed up, is almost the same. 
Can you explain how to show the log? I run the command ""myapp>node-inspector  --no-preload=true  set DEBUG=node-inspector:protocol*"" Is that correct?
",totty90,2014-02-19 17:24:43
237,2014-03-16 19:23:17,"""--no-preload=true"" doesnt' help.

How to run the ""set DEBUG=node-inspector:protocol_""? ""node-inspector set DEBUG=node-inspector:protocol_""? Where is the log?
",totty90,2014-02-19 17:24:43
237,2014-03-16 19:34:57,"@totty90 , `set DEBUG=node-ispector:protocol*` sets enviroment variable.
try:
`> set DEBUG=node-ispector:protocol*`
`> node-inspector --no-preload`
",3y3,2014-02-19 17:24:43
237,2014-03-17 08:44:09,"I added a [wiki page](https://github.com/node-inspector/node-inspector/wiki/Debug-logs) describing how to enable debug logs.
",bajtos,2014-02-19 17:24:43
237,2014-05-21 05:02:58,"Out of nowhere my node-inspector starting going from 20 second load times to at least a minute on OSX using **v0.7.2**

Here's my grunt config

<S_CODE_TOKEN>
",maruf89,2014-02-19 17:24:43
237,2015-02-13 03:18:43," Try reload `http://127.0.0.1:8080/debug?port=5858`
After.
`node-debug <appname.js>`
Then the debugger starts instantly, on my system.
",voidcode,2014-02-19 17:24:43
237,2015-02-18 09:54:24,"@voidcode doesn't help much, I also use that trick, but is still not as fast as I like.
",totty90,2014-02-19 17:24:43
237,2015-02-20 09:24:19,"@3y3 and then what? where are the logs? no file is created nor the cli program outputs anything.
",totty90,2014-02-19 17:24:43
237,2015-09-01 19:09:52,"@bajtos 
With `node-inspector@0.12.2` / `node@0.10.32` on Linux, it takes a long time to load initially, then takes _forever_ to proceed (after resuming from being paused on the first line), while logging these entries:

<S_CODE_TOKEN>

(To get that output I had to hack one of the files as described in https://github.com/node-inspector/node-inspector/issues/671#issuecomment-114200212.)

How do I:

> [[disable] dispatch of this event in the front-end](https://github.com/node-inspector/node-inspector/issues/237#issuecomment-27399120)

? And what consequences will that have?

Is that what this [reference to `front-end/InspectorBackend.js`](https://github.com/node-inspector/node-inspector/issues/237#issuecomment-27286308) line 44 and 45 relates to? Please always make links like that to the permalink URL.
",jmm,2014-02-19 17:24:43
237,2015-09-02 08:52:35,"> How do I [disable] dispatch of this event in the front-end

You need to modify the code in `front-end` directory, most likely [front-end/sdk/InspectorBackend.js](https://github.com/node-inspector/node-inspector/blob/abc1d621473ca41563f7ddbc1f69422457f41784/front-end/sdk/InspectorBackend.js). I don't have enough time to try this myself now, sorry for that :(

> what consequences will that have?

IIRC, when you disable `Debugger.scriptParsed` events, the front-end will not know about your source files. I am not sure about the exact behaviour, in the worst case you won't be able to debug at all, because there will be no source code in the UI to show.
",bajtos,2014-02-19 17:24:43
237,2015-09-24 00:37:04,"@bajtos Thanks, sorry for the delay replying. I'll have to poke around sometime. So that's probably just going to identify a bottleneck, but not actually work around it I guess.
",jmm,2014-02-19 17:24:43
237,2015-09-29 21:38:05,"I am debugging a grunt task with node-inspector, and because my project contains a lot of dependencies, startup time is about 4-5 mins. 
Adding `--no-preload` boosts the startup time to 2-3 s, but my breakpoint is not hit. I guess that script finishes before node-inspector gets a chance to break it.

Fortunately, I found a solution for this: add in your script `debugger;` and node-inspector will stop there.
",danielmanesku,2014-02-19 17:24:43
237,2015-09-29 22:10:13,"@danielmanesku , how about `--debug-brk` option?
",3y3,2014-02-19 17:24:43
237,2015-09-29 22:48:45,"@3y3 If I run into one shell `node-inspector` and in another `node --debug-brk /usr/local/bin/grunt myTask`, startup time is long, about 4-5 min. Am I missing something?
",danielmanesku,2014-02-19 17:24:43
237,2016-01-19 19:28:04,"Try preload:false instead of no-preload:true if using a rc file or similar:

<S_CODE_TOKEN>
",moander,2014-02-19 17:24:43
237,2016-07-02 02:42:17,"It's unusably slow for me in Node Inspector v0.12.8 using `node-inspector --preload=false` (or with no optional arguments).
",ericelliott,2014-02-19 17:24:43
236,2013-10-24 20:14:59,"Added a check for whether callback is defined.  Fixed crash when quickly reloading the debugger.

Also added a throttle for no front-end connection errors.
",badave,2013-12-02 14:17:21
236,2013-10-29 08:34:51,"Hi @badave, thank you for submitting a pull request. Please reword your commit messages to past tense - that's the style we use in Node Inspector.
",bajtos,2013-12-02 14:17:21
236,2013-12-02 14:17:21,"Landed as ef87549b, I reworded the commit message to fit into 50 characters (see [Contributing](https://github.com/node-inspector/node-inspector/wiki/Contributing#git-commitspatches) for more details). I hope you don't mind.

Please add a comment next time you add a commit to your pull request, GitHub is not sending notifications about new commits.

Thank you for your contribution!
",bajtos,2013-12-02 14:17:21
236,2013-12-02 19:49:35,"Sorry about that.  Thanks!

On Mon, Dec 2, 2013 at 6:17 AM, Miroslav Bajtoš notifications@github.comwrote:

> Closed #236 https://github.com/node-inspector/node-inspector/pull/236.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/pull/236
> .
",badave,2013-12-02 14:17:21
236,2013-12-05 01:17:40,"Don't know if you'll check this, but you might be right about the .bind syntax.  It gets in the way less.
",badave,2013-12-02 14:17:21
236,2013-12-05 07:15:20,"> you might be right about the .bind syntax. It gets in the way less.

:)

Using `.bind()` has a downside too, it is slower that using `self` from a closure. In performance-critical code, it is sometimes better to avoid `.bind()`. See [jsPerf](http://bit.ly/1gGer3C) and this [StackOverflow answer](http://stackoverflow.com/a/17638540/69868).
",bajtos,2013-12-02 14:17:21
235,2013-10-23 18:52:33,"Fixed debugger launcher to ignore ECONNRESET error when shutting down the
session.

@Schoonology  please review.
",bajtos,2013-10-29 08:31:56
235,2013-10-25 17:13:07,"Looks fine to me.
",Schoonology,2013-10-29 08:31:56
234,2013-10-21 11:10:10,"When you debug an application with node version 0.10.20 and node-inspector 0.5.0, and you press Ctrl+Shift+F to search in all files, after entering the search string and pressing Enter, you get a string of errors such as the following:

<S_CODE_TOKEN>

The fact that the Debugger object is the one that does not implement the functions lead me to not be sure if this pertains to node-inspector or to node itself. I'll file an issue against node as well, in case node-inspector has its part implemented.
",gabrielschulhof,2014-12-18 16:59:48
234,2013-10-21 11:10:41,"Here's the node issue: https://github.com/joyent/node/issues/6388
",gabrielschulhof,2014-12-18 16:59:48
234,2013-10-23 22:54:49,"This is a missing feature of Node Inspector, it has nothing to do with Node.js core. I am afraid I won't have bandwidth to implement it any time soon.
",bajtos,2014-12-18 16:59:48
234,2014-12-18 16:59:48,"I am closing this issue, since there was not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 16:59:48
234,2015-03-05 21:45:19,"I'd definitely find this useful.
",francisbyrne,2014-12-18 16:59:48
234,2015-03-10 10:23:46,"Hi @bajtos, I can definitely implement it in my weekends. :+1: 
",marcominetti,2014-12-18 16:59:48
234,2015-05-11 04:29:37,"@marcominetti Is this already implemented ? I'm getting the same error message.
",yoshiokatsuneo,2014-12-18 16:59:48
234,2015-05-11 05:11:51,"@yoshiokatsuneo yep but it's not yet landed in master branch... You can try it from pr #621... 
",marcominetti,2014-12-18 16:59:48
234,2015-05-11 05:20:20,"@marcominetti Ah, I see. I'm looking forward to be merged to master.
",yoshiokatsuneo,2014-12-18 16:59:48
234,2015-07-01 10:53:15,"yesssss we need this!
",a7madgamal,2014-12-18 16:59:48
234,2016-01-21 08:18:35,"Very useful feature. Please merge...
",alex-georgiou,2014-12-18 16:59:48
234,2016-01-23 03:28:18,"I definitely need this feature. Please merge!
",johnreitano,2014-12-18 16:59:48
234,2016-03-31 01:53:07,"I'll second this!
",kristopolous,2014-12-18 16:59:48
233,2013-10-18 16:57:56,"I am having an issue on 64 bit Linux. I'm running node 10.20 and node-inspector 0.5.0. My browser is Chrome Version 30.0.1599.66. Maybe one time in 30 my app will stop at a breakpoint, then shortly after I'll see ""Error 0"" in the node console and no more breakpoints. I've cleared my cache, cleaned up browser history, reinstalled node-inspector, all to no avail. I'm running node and node-inspector and the browser on the same machine.  If I hit refresh in my node browser,I see ""Error 0"" in my node console, and the debug window appears to reload fine, showing my code and breakpoints.  NOde inspector HAS worked in the past on this same app.  
",nikmartin,2014-12-18 17:22:53
233,2013-10-23 20:32:18,"""Error 0"" is reported in the node console when the debugger client like Node Inspector disconnects from the debugged node process.

I am afraid I don't know how to help you more at this point.
",bajtos,2014-12-18 17:22:53
233,2013-10-24 14:53:35,"Interesting... I'm having a similar issue with node v0.10.21 and node-inspector v0.5.0. I wonder if there is some change in node >= v0.10.20 or V8 that's causing this issue...?
",Siyfion,2014-12-18 17:22:53
233,2013-10-24 15:50:36,"This looks like a bug in node, which is most likely the V8 engine, since it hosts the debugger, not node.  This also happens in Webstorm IDE.  When it happens, and I then try to connect to the port with an app like nc, I get a message that the port is in use.  This tells me the tcp host stack in the V8 engine may be the culprit. 
",nikmartin,2014-12-18 17:22:53
233,2013-11-20 11:32:22,"Another setup where node-inspector v0.6.1 doesn't stop at breakpoints: #249 
",dandv,2014-12-18 17:22:53
233,2014-08-19 14:16:39,"@nikmartin , @Siyfion , is this actually for v0.7.4 and Node v0.10.30?
Or I can close this?
",3y3,2014-12-18 17:22:53
233,2014-12-18 17:22:53,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 17:22:53
232,2013-10-16 10:27:02,"Google Chrome Version 30.0.1599.66
Node version 0.10.20
node-inspector version 0.5.0

Steps to reproduce:
1. Build and install node (./configure --prefix=/usr; make; make install)
2. Install node-inspector (npm install -g node-inspector)
3. mkdir test-cordova-cli; cd test-cordova-cli; npm install cordova
4. cordova create hello com.example.hello ""Hello World""
5. cd hello
6. node debug ../node_modules/cordova/bin/cordova add platform tizen
7. node-inspector (in a different terminal)
8. Visit http://127.0.0.1:8080/debug?port=5858 in Chrome

At this point I get the following:
![node-inspector-issue](https://f.cloud.github.com/assets/976081/1341595/6a08b362-364d-11e3-8d80-98b0f0f420d1.png)
",gabrielschulhof,2013-10-16 10:33:43
232,2013-10-16 10:33:43,"NM. Fixed with node --debug --debug-brk.
",gabrielschulhof,2013-10-16 10:33:43
231,2013-10-15 21:57:39,"similar to Issue #230, but I cannot ever use node-inspector on this machine till I figure out were the variables are stored and delete them.

Issue: 
I added a watch variable and it caused the node-inspector to no longer operate. it was:

var v = { tablename: "" ""...

This object has created situation were I cannot use node-inspectoron this machine.
I cannot figure out where the watch variables are stored.

David
",DavidandTracyWhittington,2014-12-18 17:22:12
231,2013-10-16 09:15:03,"I am not able to reproduce your problem. I typed the following string to ""add watch"" inputbox:

<S_CODE_TOKEN>

What version of Node Inspector and Node.js are you using?

Instructions for clearing Node Inspector's settings stored in your browser:
1. Open Chrome Developer Tools, select the Console tab
2. Run this piece of javascript:
   
   <S_CODE_TOKEN>
3. Reload the Node Inspector page.
",bajtos,2014-12-18 17:22:12
231,2013-10-16 14:34:16,"did you see #230 he has the same problem.
Looks like a variable space collision  use var v = { tablename: "" "" };
This is a variable in the code that is getting overwritten.

On Wed, Oct 16, 2013 at 5:15 AM, Miroslav Bajtoš
notifications@github.comwrote:

> I am not able to reproduce your problem. I typed the following string to
> ""add watch"" inputbox:
> 
> var v = { tablename: "" ""...
> 
> What version of Node Inspector and Node.js are you using?
> 
> Instructions for clearing Node Inspector's settings stored in your browser:
> 
>    1.
> 
>    Open Chrome Developer Tools, select the Console tab
>    2.
> 
>    Run this piece of javascript:
> 
>    window.localStorage.clear()
> 
> <S_CODE_TOKEN>
> 
>    Reload the Node Inspector page.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/issues/231#issuecomment-26403178
> .
",DavidandTracyWhittington,2014-12-18 17:22:12
231,2013-10-23 20:29:31,"@DavidandTracyWhittington I am still not able to reproduce your problem. 

This is what I did:
1. Run https://github.com/node-inspector/node-debug-samples/blob/master/simple-server/index.js
2. Set a breakpoint in http request handler 
3. Set watch to `var v = { tablename: "" "" };`
4. The watch reports an `undefined` value, Node Inspector works without any problems.

Please provide us an example and step-by-step instructions that will allow us reproduce the problem. Otherwise I'll have to close this issue.
",bajtos,2014-12-18 17:22:12
231,2014-08-12 19:37:16,"@DavidandTracyWhittington , any progress here?
",3y3,2014-12-18 17:22:12
231,2014-12-18 17:22:12,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 17:22:12
230,2013-10-14 09:01:57,"(I've been asked to file a bug by Miroslav Bajtoš from http://stackoverflow.com/questions/19321217/node-inspector-cant-set-local-variables-is-node-inspector-broken )

I'm using node-inspector. I have run debugger, and the console is paused where the debugger has started. Setting a local variable simply fails:

> var z = 1
> undefined
> 
> z
> ReferenceError: z is not defined

It seems quite reasonable for this to work - eg, this normally works in browser devtools itself, and there's no error message shown.
",mikemaccana,2014-08-12 19:40:52
230,2014-08-12 19:40:42,"V8 specific. Read joyent/node#7102
",3y3,2014-08-12 19:40:52
229,2013-10-12 17:41:49,,ChrisWren,2013-10-13 08:11:03
229,2013-10-13 08:11:03,"Hi @ChrisWren, thank you for submitting your pull request.

I like your Grunt module, it looks like a useful addition to Grunt workflow.

However, Node Inspector's README is not the right place for documenting other modules like grunt-node-inspector. I would suggest you to copy the relevant part of Node Inspector's README to grunt-node-inspector's README and make the change there.

As far as my understanding of Grunt and grunt-node-inspector goes, users cannot use commad-line arguments to configure Node Inspector started by grunt-node-inspector, they have to use grunt config object instead. In which case your proposed change would result in an misleading documentation.
",bajtos,2013-10-13 08:11:03
228,2013-10-11 23:31:11,"I wasn't able to get node-inspect to actually run in the browser because of a security exception with one of the included javascript files.

The error I was getting was:

Refused to load the script 'http://www.superfish.com/ws/sf_preloader.jsp?dlsource=wxpifdx&CTID=cool3_measure&userId=ODNGOTU0NzYtMkREMS00OE&ver=12.2.14.62' because it violates the following Content Security Policy directive: ""script-src 'self' 'unsafe-eval'"".
 View.js:495
Element.appendChild View.js:495
superfish.b.inj sf_main.jsp:67
loadApp sf_main.jsp:122
run sf_main.jsp:131
(anonymous function) sf_main.jsp:141
(anonymous function)

I was able to get around this by commenting out a line in the html file, https://github.com/node-inspector/node-inspector/blob/master/front-end/inspector.html#L32

I'm sure there is a correct setting to be secure but not cause an error, but I don't know what it should be.

Environment:
  red hat linux enterprise 6
  chrome 25
",pete-the-pete,2014-02-20 17:57:27
228,2013-10-13 10:08:14,"Hi @pete-the-pete, thank you for reporting the issue.

How did the superfish.com script get included to your Node Inspector page? It looks like you have a chrome extension that is messing up the content of inspector.html. Can you try to run node-inspector will all chrome extensions disabled to verify this assumption?

This is possibly related to #220.
",bajtos,2014-02-20 17:57:27
228,2014-02-20 17:57:27,"Closing due to inactivity.
",bajtos,2014-02-20 17:57:27
228,2014-10-07 06:53:38,"@pete-the-pete it is a PC virus. Run some antivirus software will fix this.
",nilveryboring,2014-02-20 17:57:27
227,2013-10-10 00:59:51,"My OS is 64bit Windows 2003. node-inspector was working fine on my computer when I had Node V0.8.16 installed. I upgraded to Node V0.10.10 this morning and node-inspector stopped working. I ran ""npm install -g node-inspector "" in command prompt, but got build errors.

ws@0.4.31 install C:\Documents and Settings\plian
(node-gyp rebuild 2> builderror.log) || (exit 0)
The following is what's in builderror.log:

gyp ERR! build error 
gyp ERR! stack Error: Can't find ""msbuild.exe"". Do you have Microsoft Visual Studio C++ 2008+ installed?
gyp ERR! stack at findMsbuild (C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\build.js:121:23)
gyp ERR! stack at C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\build.js:103:11
gyp ERR! stack at F (C:\Program Files\nodejs\node_modules\npm\node_modules\which\which.js:43:25)
gyp ERR! stack at E (C:\Program Files\nodejs\node_modules\npm\node_modules\which\which.js:46:29)
gyp ERR! stack at C:\Program Files\nodejs\node_modules\npm\node_modules\which\which.js:57:16
gyp ERR! stack at Object.oncomplete (fs.js:107:15)
gyp ERR! System Windows_NT 5.2.3790
gyp ERR! command ""node"" ""C:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js"" ""rebuild""
gyp ERR! cwd C:\Documents and Settings\pliang\Application Data\npm\node_modules\node-inspector\node_modules\socket.io\node_modules\socket.io-client\node_modules\ws
gyp ERR! node -v v0.10.10
gyp ERR! node-gyp -v v0.9.6
gyp ERR! not ok

I have both Visual Studio 2010 and Visual Studio 2008 installed on my computer. I added both C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\ and C:\WINDOWS\Microsoft.NET\Framework\v3.5\ to Path Environment Variable, but that didn't solve the problem.

Can somebody please help!

Thank you.
",ping-liang,2013-12-02 13:57:28
227,2013-10-10 08:52:08,"Hello @ping-liang, thank you for reporting the issue.

My impression is that the problem is caused by one of the modules that node-inspector depends on.
Please try to run `npm install which`, if it works then `npm install socket.io`. I suspect one of these commands will fail, in which case is better to ask authors of the failing module.

Probably the best option is to ask on [Node.js mailing list](https://groups.google.com/forum/#!forum/nodejs), as this looks like a general ""cannot build native modules on windows"" problem. If you get the solution from the mailing list, please do cross-post it here.
",bajtos,2013-12-02 13:57:28
226,2013-10-01 20:30:37,"Thanks to issue #220, I noticed that adblock can cause problems for node-inspector. I'm adding a note to the readme because it's a nicer place to see this rather than needing to search in issues.
",gkatsev,2013-10-03 18:17:57
226,2013-10-02 18:37:33,"Hi @gkatsev, thank you for submitting your pull request. 

Note we use past tense in commit messages, please fix your commit.

Other than that, the change looks good.
",bajtos,2013-10-03 18:17:57
226,2013-10-02 18:52:32,"Must've missed that in the contrib guide. Updated.
",gkatsev,2013-10-03 18:17:57
226,2013-10-03 18:17:55,"Landed as 82ae00dbb8, thank you for your contribution.
",bajtos,2013-10-03 18:17:57
226,2013-10-03 18:18:44,"Awesome. Great work.
",gkatsev,2013-10-03 18:17:57
225,2013-10-01 10:02:28,"When a break point is set and when the mouse is hovered over the variable with a value, the tooltip shows the name of the variable as string. But the scope variable tab shows the actual value of the object.

Attached is a screenshot showing the issue. 

![node-inspector-bug](https://f.cloud.github.com/assets/3541310/1244289/8658d67e-2a80-11e3-94e8-9c9d63b17404.png)
",sowdri,2014-12-18 12:54:31
225,2013-10-01 10:38:15,"+1 same issue here. 
",arunkjn,2014-12-18 12:54:31
225,2013-10-09 08:31:27,"Hello @sowdri, thank you for reporting the issue.

I am afraid I can't reproduce this myself. Please send me a sample project (ideally a URL to public github repo) with instructions on how to reproduce the issue.
",bajtos,2014-12-18 12:54:31
225,2013-10-09 10:58:40,"Hi,

This works for me in windows. This is happening for all projects in Linux. 

I've given some information about the environment. 

Chrome - Latest.

sowdri@sowdri-Inspiron-7520:~/repo/aiq-bi$ node -v
**v0.10.18**
sowdri@sowdri-Inspiron-7520:~/repo/aiq-bi$ uname -a
**Linux sowdri-Inspiron-7520 3.8.0-31-generic #46-Ubuntu SMP Tue Sep 10 20:03:44 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux**
sowdri@sowdri-Inspiron-7520:~/repo/aiq-bi$ node-inspector -v
**Node Inspector v0.5.0**

This is such a crucial feature for debugging all of our node projects. Without this we are forced to go back to windows for debugging. 

Thanks, 
",sowdri,2014-12-18 12:54:31
225,2013-10-09 14:06:45,"Please try to debug `simple-server` from [node-debug-samples](https://github.com/node-inspector/node-debug-samples):
1. start node-inspector as usually
2. run `node --debug simple-server`
3. set a breakpoint on the line 4 in the file index.js
4. open `http://localhost:3000/` in a new tab/window
5. check the values of `arg1` and `arg2`.

On my Linux box, I can see `arg1` is `""string""` and `arg2` is `42`.
",bajtos,2014-12-18 12:54:31
225,2014-12-18 12:54:31,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 12:54:31
224,2013-09-29 02:49:06,"Hi guys,

This is maybe more just a question than a bug. Sorry to ask in the form of an issue; I just didn't see any other better way (e.g. mailing list).

I love that node-inspector now has source map support — great work. I'm just unsure on what exactly triggers it, and what the pre-reqs are.

What I mean is, if I have the following files:
- `app.coffee`
- `app.js`
- `app.map`

Where `app.js` ends with:

<S_CODE_TOKEN>

If I run the _source_ CoffeeScript file (which just compiles it to JS on the fly via a `require()` hook):

<S_CODE_TOKEN>

Then I'm successfully able to debug the original CoffeeScript source — amazing!

But if run the JS file directly:

<S_CODE_TOKEN>

Then I see only the compiled JS — even though it clearly has the source map declaration at the bottom.

Is that expected? If so, how come? If not, is there something I might be doing wrong? Or is there anything I can do to help you guys debug?

<S_CODE_TOKEN>

Thanks much!
",aseemk,2014-12-18 17:33:02
224,2013-09-29 02:52:55,"Btw, I've noticed other source map declarations of the form:

<S_CODE_TOKEN>

(Is one right and the other wrong? Or are they both valid?)

And just as an experiment I tried editing the .js file to use that instead. Didn't work either.
",aseemk,2014-12-18 17:33:02
224,2013-10-09 08:37:18,"Hi @aseemk, it's okay to ask here on Github.

> Btw, I've noticed other source map declarations of the form:
> 
> <S_CODE_TOKEN>
> 
>  (Is one right and the other wrong? Or are they both valid?)

`//#` is valid per sourcemap specification, however Node Inspector support both forms.

I am not able to reproduce your problem, source-maps work well for me. Please send a sample project (ideally as a URL to a public github repo) where the issue can be reproduced.
",bajtos,2014-12-18 17:33:02
224,2013-10-09 08:38:22,"Also please open Chrome Developer Toolbars on the page with Node Inspector and check the Console tab for possible errors/warnings.
",bajtos,2014-12-18 17:33:02
224,2014-02-19 17:28:45,"@aseemk are you still experiencing this problem? Could this be a duplicate of #271?
",bajtos,2014-12-18 17:33:02
224,2014-02-19 17:31:34,"Sorry, this slipped, but I will take a look soon and get back to you! Thanks for checking! =)
",aseemk,2014-12-18 17:33:02
224,2014-03-24 21:57:52,"I'm also experiencing this issue. It shows the compiled js instead of the original source, eventhough it shows the filename with the .coffee extension. I'm debugging with `coffee --nodejs --debug-brk file.coffee`.
",jansegre,2014-12-18 17:33:02
224,2014-03-25 07:53:46,"@jansegre can you reproduce the problem with the [sample app](https://github.com/node-inspector/node-debug-samples/tree/master/sourcemap)? What version of Node Inspector are you running?
",bajtos,2014-12-18 17:33:02
224,2014-03-25 10:13:24,"@bajtos, yes. This is what I get:

![screen shot 2014-03-25 at 07 06 58](https://f.cloud.github.com/assets/729870/2510341/52751f8e-b405-11e3-9876-6d2db7ec25b4.png)

These info might help:

<S_CODE_TOKEN>
",jansegre,2014-12-18 17:33:02
224,2014-03-27 10:08:41,"I am afraid this looks like a coffee-script issue. I am assuming it tricks Node.js/V8 into thinking that 'app.coffee' contains the transpiled source instead of the coffee script code.

Anyhow, to debug the coffee script source, the transpiler has to generate source map files. When I  run `coffee --map --nodejs --debug app.coffee`, the process immediately exits. I debugged it a little, seems `--map` disables `o.run` option, thus the main script is compiled in memory but not executed. Strangely enough, the source-map file is created on the disk.

My advice is to fill an issue in the coffee script project. This is what I would expect when running `coffee --map app.coffee`: 
- The transpiled javascript source has the source map embedded via data url (per [rfc2397](http://www.ietf.org/rfc/rfc2397.txt), see also [strong-data-uri](https://github.com/strongloop/strong-data-uri)). No `app.map` file is created.
- The transpiled source is executed, the script file name is set to `app.js`.
- The source map points to `app.coffee` as the original source.
",bajtos,2014-12-18 17:33:02
224,2014-03-27 10:37:39,"I'll take a look into it, thanks.
",jansegre,2014-12-18 17:33:02
224,2014-12-18 17:33:02,"There isn't much we can do about this problem in Node Inspector, I am closing the issue.
",bajtos,2014-12-18 17:33:02
223,2013-09-24 05:35:08,"In the Chrome Inspector, the max stack frame count is incredibly huge, so I set the default 9999 - which is probably actually lower than the Chrome Inspector, which was still showing all the frames when I tested a simple recursive function at depth 10000.

Updated readme to match.

Fixes #96.

**Edit** for reference: default was set to `50` after short discussion to prevent potential jank in the UI.
",ssafejava,2013-11-12 09:01:33
223,2013-09-24 07:42:21,"Hi @ssafejava, thank you for the pull request.

Your implementation goes in the right direction. There are few things to improve, see my comments above.

Please update the commit message to the 50/72 format and use a past tense (see [wiki](https://github.com/node-inspector/node-inspector/wiki/Contributing#git-commitspatches) for details).

Also add a unit-test verifying the new behaviour (hint: start by looking at `test/CallFramesProvider.js`). You can run the tests via `npm test`.
",bajtos,2013-11-12 09:01:33
223,2013-09-24 08:04:48,"@bajtos Thanks for the pointers, I removed the `config` import & passed it down the chain to the CallFramesProvider. An extra test is in `CallFramesProvider.js`.
",ssafejava,2013-11-12 09:01:33
223,2013-09-24 17:22:39,"@ssafejava Thanks for addressing my comments. I am afraid I won't be able to finish the review until next week. Sorry for the delay.
",bajtos,2013-11-12 09:01:33
223,2013-10-03 15:13:25,"The Google Closure Linter revealed few missing JSDoc comments (see my comments above). I am happy to merge the pull request once you fix them.
",bajtos,2013-11-12 09:01:33
223,2013-11-12 07:44:45,"Updated to pass gjslint, should be ready to go.
",ssafejava,2013-11-12 09:01:33
223,2013-11-12 09:01:33,"Landed as 21e8230, thank you!
",bajtos,2013-11-12 09:01:33
222,2013-09-23 07:45:43,"When the debugged process is running (not stopped at a breakpoint), it's not possible to expand result of an expression evaluated in the Console panel.

The reason why it doesn't work:
- `Runtime.evaluate` temporarily breaks the process, evaluates the expression, stores the result in Mirror cache and resumes the process.
- Mirror cache is always cleared when the process is resumed.
- Thus `Runtime.getProperties` cannot find the object in Mirror cache.

The front-end uses a concept of Object Groups to tell the back-end when to release which Mirrors.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/979916-expand-object-in-console-while-the-process-is-running?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",bajtos,
222,2013-09-23 09:23:22,"it can be realised as part of pull request #219
",3y3,
222,2013-09-23 13:30:43,"@3y3 I'd rather keep things simple and incremental, i.e. have one pull request for each issue.
",bajtos,
222,2014-04-18 13:46:11,"@bajtos , I saw [this question](http://stackoverflow.com/questions/22360652/can-node-inspector-debug-an-app-without-pausing-it) on StackOverflow - can you target me to source file of webkit, where it injects this custom javascript code?
",3y3,
222,2014-04-22 14:29:21,"You can start in [InjectedScriptManager.cpp](http://src.chromium.org/blink/branches/chromium/1925/Source/core/inspector/InjectedScriptManager.cpp), look for `InjectedScriptSource`.
",bajtos,
221,2013-09-23 07:34:36,"Modify the front-end to work in Safari browser too.
",bajtos,2014-04-09 18:24:07
221,2014-04-09 18:24:07,"It's impossible to debug Node Inspector running in the Safari. It seems like the Node Inspector's front-end is clashing with the code of Safari DevTools.

I am closing this issue as ""won't fix"".
",bajtos,2014-04-09 18:24:07
220,2013-09-20 23:50:50,"hi
i just tried out to debug the hello world program but nothing seems to work. could it be that node v0.10 is not supported?
i tried the npm version.

i would love to integrate node-inspector into node-mirror. but so far i cant seem to get it to work.

best wishes for your awesome attempt.
sol
",soliton4,2014-12-18 12:53:53
220,2013-09-23 06:41:00,"Hi @soliton4, Node Inspector works well with node v0.10.

Please provide more details on what does it mean ""nothing seems to work"". Check Developer Toolbar's Console in Chrome for error messages.

Note that Node Inspector works in Chrome and Opera at the moment, other browsers like Safari or Firefox are not supported.
",bajtos,2014-12-18 12:53:53
220,2013-09-23 20:23:37,"i start a simple app (the hello world example) in node with --debug.
i start node-inspector and browse to the according http address.
i see a press ctrl-o message. when i do i can not select any file.
i also see my server.js file in the left side bar. but i can not open it by click / dblclick or enter
if i create a debugger statement, nothing happens.
i am running chrome 29 on kubuntu 13.04. and node 0.10.18
",soliton4,2014-12-18 12:53:53
220,2013-09-24 03:42:17,"May be you use AdBlock or other plugin that blocks content?
",3y3,2014-12-18 12:53:53
220,2013-09-24 03:59:14,"good point. turning off adblock did the trick.
maybe this should be a more prominent information since adblock is a commonly used tool.
why would adblock block the node-inspector anyway? are you placing ads inside the debugger ;p
thx again
",soliton4,2014-12-18 12:53:53
220,2013-09-24 07:56:25,"Thanks @3y3 for helping out!

> turning off adblock did the trick.

Now that's interesting. I don't know why adblock interferes with Node Inspector.

> maybe this should be a more prominent information since adblock is a commonly used tool.

There is a FAQ/WTF section in README.md, that's the right place for such info.
",bajtos,2014-12-18 12:53:53
220,2013-10-01 18:49:07,"I just had a similar problem with adblock. It was failing to run properly and then when I turned adblock off, it ran without any problem.
",gkatsev,2014-12-18 12:53:53
220,2014-08-12 19:43:43,"@bajtos , we can fix it by renaming `front-end/Popover.js` to `front-end/Popovers.js`. But I don't like to do changes in frontend...
",3y3,2014-12-18 12:53:53
220,2014-08-13 06:44:28,"@3y3 now that's interesting. What adblock did you test with?

@soliton4 @gkatsev could you confirm that renaming solves the issue?

> But I don't like to do changes in frontend...

I don't like that either. But it's not that bad since it is only a file rename. If we keep it documented to make sure we don't forget to do the rename when we upgrade the front-end the next time, then I can live with that.
",bajtos,2014-12-18 12:53:53
220,2014-12-18 12:53:53,"I am closing this issue, since there was not enough people asking for this change. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 12:53:53
219,2013-09-20 19:26:09,"Description in `./lib/ConsoleBridge.js`
- [x] simple implementation
- [x] unit-tests
- [x] config option to disable the feature
- [x] transmit all message details to the front-end
- [ ] control memory cleanup
",3y3,2014-11-27 12:55:08
219,2013-09-23 14:27:35,"Thank you for submitting the pull requests.

I noticed few high-level problems that you need to fix before we look into specifics.
1. Your code does not pass unit-tests. Run `npm test` to see for yourself.
2. There are no unit-tests for your new functionality. Take a look at existing unit-tests to get started.
3. Please start with a simpler version that forwards only the log message as a string, there is enough complex stuff to worry about even without the complexity of forwarding arguments as objects. One of the issues I can see now is clean up of references (cache expiration). Anyway, let's solve this in a second pull request please.
",bajtos,2014-11-27 12:55:08
219,2013-09-23 15:54:02,"I can't pass unit-tests in master branch that is synchronized with `/node-inspector master`. What I do wrong?
",3y3,2014-11-27 12:55:08
219,2013-09-23 16:05:20,"Are you sure your master branch is up to date? Node Inspector has a Travis project configured for Continuous Integration, you can see the master branch is passing there ([build 59](https://travis-ci.org/node-inspector/node-inspector/builds/11583317)), while your pull request fails ([build 60](https://travis-ci.org/node-inspector/node-inspector/builds/11607370)).

What OS are you running?
",bajtos,2014-11-27 12:55:08
219,2013-09-23 17:54:23,"Yes, I am sure. (win8 x64; node v 0.10.9)

<S_CODE_TOKEN>
",3y3,2014-11-27 12:55:08
219,2013-09-24 08:21:21,"> (win8 x64; node v 0.10.9)

I am afraid unit-tests are broken on Windows, I haven't had time to fix them. Plus there isn't a Windows build server that will keep an eye on them and report when they break again. Sorry for that :(

I guess if you don't feel like fixing tests that you didn't broke (i.e. current master), you can either install Linux in a virtual machine and run the tests there, or use Travis-CI to run the tests for you. Every time you update your pull request by adding a new commit or amending an existing one, Travis will pick up your changes and re-run the tests.
",bajtos,2014-11-27 12:55:08
219,2013-09-24 17:24:39,"FYI: I won't be able to continue with the review until the end of next week. Sorry for that.
",bajtos,2014-11-27 12:55:08
219,2013-10-23 18:53:36,"Pull request #235 fixes windows unit-tests failures.
",bajtos,2014-11-27 12:55:08
219,2014-01-03 04:09:08,"@bajtos, sorry for long absence.
This is a simplest version.
I'm ready to discussion. If this method of injection will be approved, I will fix issues in complex version. Then I will commit for new overview and finally I will write tests for pull request
",3y3,2014-11-27 12:55:08
219,2014-01-06 15:38:56,"> sorry for long absence.

No worries, that's sort of normal in the OSS world.

> This is a simplest version. I'm ready to discussion. If this method of injection will be approved, I will fix issues in complex version. Then I will commit for new overview and finally I will write tests for pull request.

The code looks much better now.

Besides the line comments above, I have one more request. I am not 100% confident that the code injection mechanism is bug free, as it is too complex to consider all possible complications. If there is a bug, then Node Inspector may become totally unusable.

I would like to you to add a new config option for disabling injections, so that in case of a problem there is a workaround already available. I am proposing to name this option in such way that it can be re-used for the future features too  (e.g. injecting V8 profiler module) - how about `--no-inject`?
",bajtos,2014-11-27 12:55:08
219,2014-03-14 15:17:15,"@bajtos , now simple implimentation is one of unei tests of this commit ('Connect in debug-brk mode').
You can start to overview this or wait some time. On weekend I will commit second part.
Injector will be useful also in realisation of Heap profiler.
",3y3,2014-11-27 12:55:08
219,2014-07-19 20:02:43,"Please don't review Console API. This commit needs a refactoring.
",3y3,2014-11-27 12:55:08
219,2014-10-16 07:09:38,"@3y3 how much work is needed to get this PR done? It would be great to finish up this one and #338; so that we can release v0.8 and make your new features available to all users...
",bajtos,2014-11-27 12:55:08
219,2014-11-15 16:14:49,"@bajtos , ready to review.

For memory cleanup use `clearMessages` button. Can you propose other way to control memory?
",3y3,2014-11-27 12:55:08
219,2014-11-18 12:45:29,"Unrelated note: `npm install v8-debug` reports a compilator warning:

<S_CODE_TOKEN>

Possible fix:

<S_CODE_TOKEN>
",bajtos,2014-11-27 12:55:08
219,2014-11-18 12:48:38,"> @bajtos , ready to review.

Cool. I did a superficial review, the code looks good. Feel free to land it as it is.

>  For memory cleanup use `clearMessages` button. Can you propose other way to control memory?

You can limit the size of the cache to let's say 100 last items, but I don't think it's worth the effort.

Is the cache cleared when Node Inspector detaches from the running process?
",bajtos,2014-11-27 12:55:08
219,2014-11-18 13:45:54,"> Is the cache cleared when Node Inspector detaches from the running process?

Yes, [here](https://github.com/3y3/node-inspector/blob/console-bridge/lib/ConsoleAgent.js#L174)

One other think:
Now, after wrap, console has next structure:

<S_CODE_TOKEN>

I can avoid extending of console by `_functions`. `_function` was useful on step of feature debugging, but now I can create internal closule:

<S_CODE_TOKEN>

### Update:

Updated link in 

> Yes, [here](https://github.com/3y3/node-inspector/blob/console-bridge/lib/ConsoleAgent.js#L174)
",3y3,2014-11-27 12:55:08
218,2013-09-19 16:49:17,"The upgraded front-end sends two requests to get a list of object properties, each request asking for a different set of variables. The current implementation returns an empty response for the second request. 

We should reimplement both `getProperties()` and `getInternalProperties()` from the original DevTools backend instead. See [InjectedScriptSource.js](http://src.chromium.org/blink/branches/chromium/1625/Source/core/inspector/InjectedScriptSource.js) for more details.

Related commit: a721b84f
",bajtos,2014-06-16 13:28:21
218,2014-02-13 11:57:39,"Now when I work with console PR I try to understand that I need to do for fix this bug.
Is needed to send only part of properties list in some cases?
",3y3,2014-06-16 13:28:21
218,2014-02-13 12:36:33,"Ok, now I understand the logic. I need to create this PR before proceeding ""Console Implementation""
",3y3,2014-06-16 13:28:21
218,2014-02-13 13:50:20,"This is not a bug, I don't see why your would need to fix this before working on ""Console Implementation"" (assuming you mean #219).
",bajtos,2014-06-16 13:28:21
218,2014-06-16 13:28:45,"Closed by #309
",3y3,2014-06-16 13:28:21
217,2013-09-19 15:43:48,"I'm running node 0.4.12 (don't ask) and current version of node inspector (just downloaded from github). Trying to debug a script ends up with following error in the console:

<S_CODE_TOKEN>
",mrkafk,2013-10-24 00:18:13
217,2013-09-19 16:02:22,"Hello @mrkafk, thank you for reporting the issue. I am afraid Node Inspector does not officially support Node versions older than 0.8. I'l try to check how much work it would require to support v0.4, but it's not a priority.
",bajtos,2013-10-24 00:18:13
217,2013-09-19 16:14:07,"-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

OK I understand. Thanks!

Regards,
Marcin Krol

W dniu 2013-09-19 18:02, Miroslav Bajtoš pisze:

> Hello @mrkafk https://github.com/mrkafk, thank you for reporting
> the issue. I am afraid Node Inspector does not officially support
> Node versions older than 0.8. I'l try to check how much work it
> would require to support v0.4, but it's not a priority.
> 
> — Reply to this email directly or view it on GitHub 
> https://github.com/node-inspector/node-inspector/issues/217#issuecomment-24750745.
> 
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.20 (MingW32)
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJSOyLIAAoJEFMgHzhQQ7hOmjYH+wUNIX3i9lPQo8SeLEKbJzjP
3B3vNm5sYIFHfpZRD/clGMuxi4I6BlokLmM/egFXiLsyZOwITute11Q0z8r+EZfG
i0Fkvt+SxFc6HGqNJRCKxwD9rDa/Irlt4BqoucIwAhjGCqKGKe6+Juwz91PenYSP
X2n/DfmfUrtTL1OG774cV8wfbFiGJITOCMWk/Jxd0J+SKd7Rt+Y00JHw5Nmdpqb0
1Aodhfn2cJH3LFiJCjEc7Ssm8M7Xo1tHjqo+KX2wtSlJDz19k3CxSPMFN7sNQU8d
h0XV2Di738QTnCiWVke2EKie3VkF9maVCXWnTgwH7MhLoZw3JQ6G8r4pYmnootM=
=MEUV
-----END PGP SIGNATURE-----
",mrkafk,2013-10-24 00:18:13
217,2013-10-24 00:18:13,"The V8 shipped inside Node v0.4 uses a different debugger protocol than the recent versions of Node. Supporting this old protocol version would require too much effort.

I am closing the issue as ""won't fix"".
",bajtos,2013-10-24 00:18:13
216,2013-09-19 15:28:23,"The upgraded front-end sends two requests to get a list of object properties,
each request asking for a different set of variables. Because our back-end was
ignoring request parameters, the same set of variables was returned twice.

This commit fixes the immediate problem, without providing the full
implementation of the new front-end feature.

See node-inspector/node-inspector#213.

@Schoonology please review. I'll fill a new issue (Enhancement) to get the proper implementation of getProperties & getInternalProperties.
",bajtos,2013-09-19 16:44:17
216,2013-09-19 15:35:49,"Looks good.
",Schoonology,2013-09-19 16:44:17
216,2013-09-19 16:00:00,"Thanks for a quick review. Unfortunately I forgot there are unit-tests for this functionality, my commit broke them. See the fixup commit for remedy.
",bajtos,2013-09-19 16:44:17
216,2013-09-19 16:27:12,"Fixup makes sense. Thanks for the quick fix!
",Schoonology,2013-09-19 16:44:17
215,2013-09-19 12:32:09,"favicon
",ghost,2013-09-19 13:16:47
215,2013-09-19 13:16:47,"Hi @junecoder, 

No offense, but I don't see how is the picture of a dog related to Node Inspector. 

I was pondering the idea of an icon for Node Inspector for some time, I have an idea of a magnifying glass (inspector) above a hexagon (for Node). I am happy to consider other ideas too, as long as they express what is Node Inspector about (i.e. inspecting/debugging Node applications).
",bajtos,2013-09-19 13:16:47
215,2013-09-19 13:48:30,"but the dog is so cute
",ghost,2013-09-19 13:16:47
214,2013-09-19 11:33:06,"Saving does not work when the script contains non-ASCII characters, e.g.

<S_CODE_TOKEN>
",ghost,2014-08-12 19:05:58
214,2013-09-19 12:21:03,"Hi @junecoder, thank you for reporting the issue. What version of Node Inspector are you using? How are you saving your changes and what happens when you do that?

Node Inspector does not work with DevTools Workspaces, it is expected that you cannot configure the directories there.
",bajtos,2014-08-12 19:05:58
214,2013-09-19 12:35:57,"last 0.4.0, I'm editing file, push <C-s> and file not changing
",ghost,2014-08-12 19:05:58
214,2013-09-19 13:24:55,"> I'm editing file, push and file not changing

What does it mean to ""push""? Are you using ""Save"" action in the context menu, or Ctrl+S/Cmd+S shortcut?

Also with `saveLiveEdit` turned off, you should get a warning saying the changes won't be persisted. Is Node Inspector showing you that message?

The best thing to do:
1. Turn of `saveLiveEdit`. Make sure you are using the right action to save your changes (i.e. you will get the warning message).
2. Turn on `saveLiveEdit`. Either you will still get the warning message (in which case you did not use the correct config option) or the changes are saved (in which case we have fixed the problem). If the changes are not saved and no message is displayed, then there is indeed a bug to investigate.
",bajtos,2014-08-12 19:05:58
214,2013-09-19 13:53:34,"Im trying like you say, but its do not work, also my node version v0.10.12
",ghost,2014-08-12 19:05:58
214,2013-09-20 05:26:07,"ok I made some investigation, first we need to change in   ""lib/DebuggerAgent.js""

21:  this._saveLiveEdit = config.saveLiveEdit; 
to
this._saveLiveEdit = true;

second - it can save files only from directory its running
",ghost,2014-08-12 19:05:58
214,2013-09-20 07:08:03,"> first we need to change in ""lib/DebuggerAgent.js""
> 
> 21: this._saveLiveEdit = config.saveLiveEdit; 
> to
> this._saveLiveEdit = true;

You have probably hit an issue fixed by 5115a33, please upgrade to 0.5.0 first. Please post the full command line you use to start Node Inspector with saveLiveEdit enabled if the problem still persists in 0.5.0.

> second - it can save files only from directory its running

Can you give me a sample where I can reproduce the problem? Pointer to a public repo would be the best.

(EDIT: I have updated the commit sha, it pointed to a different commit before.)
",bajtos,2014-08-12 19:05:58
214,2013-09-20 10:38:21,"for example if we require files from another upper directory like here

require('../other_project/middleware/module.js');

then we see these files (module.js), but can't change them
",ghost,2014-08-12 19:05:58
214,2013-09-28 18:15:40,"hellow, I just stumble again on this bug > Live-saving only works for files in ROOT directory where nodejs process starts (files in other directories, including contained in ROOT, not saved)
",ghost,2014-08-12 19:05:58
214,2013-10-09 09:10:37,"@junecoder Please give me a sample where I can reproduce the problem. Pointer to a public repo would be the best. I cannot fix an issue that I am not able to reproduce.

Also note that you can edit/save only files that are already loaded into V8 via `require()`. Node Inspector lists all files in ROOT directory, even the files that were not loaded (yet).
",bajtos,2014-08-12 19:05:58
214,2013-12-04 17:17:05,"If you want to edit other files that are not node.js files, you cannot add the directory to the workspace as you can normally do when using devTools on websites.  In node inspector, open sources tab. You see file:// with all the node.js files you can edit. But I would like to edit my jade files as well. So I right click and hit Add Folder To Workspace. I would expect a System File Chooser dialog to come up where I can select a directory. The dialog does not come up at all, nothing happens. Doing the same thing in devTools not using node-inspector works fine. I am using Mac OS X Mavericks. I am using chrome Version 31.0.1650.57
",mmoussamob,2014-08-12 19:05:58
214,2013-12-04 17:31:34,"@mmoussamob Please fill a new github issue for that, as it is a feature request.
",bajtos,2014-08-12 19:05:58
214,2014-01-21 09:32:48,"found it, saving doesn't go if file contains non-english letters
",ghost,2014-08-12 19:05:58
214,2014-01-21 09:50:22,"> found it, saving doesn't go if file contains non-english letters

Great. Could you please provide few examples of non-english letters that do not work?
",bajtos,2014-08-12 19:05:58
214,2014-01-21 09:55:55,"// тест
",ghost,2014-08-12 19:05:58
214,2014-01-21 13:31:54,"I managed to reproduce the issue, but don't know what's the cause.

Node Inspector sends a correct request:

<S_CODE_TOKEN>

The V8 debugger returns a weird response (the type is ""event"" instead of ""response""):

<S_CODE_TOKEN>

I was not able to reproduce the problem in Chrome DevTools. We need to find out what is Node Inspector doing differently than DevTools. I am afraid I don't have time now to investigate this issue further.
",bajtos,2014-08-12 19:05:58
214,2014-04-11 12:20:42,"Looks like problem is in the node (or maybe in V8)
",ghost,2014-08-12 19:05:58
214,2014-05-02 09:48:37,"I'm running v0.7.3 and getting this warning at console:

`Cannot save changes to disk. Error: The new content is not a valid node.js script.`

is this for the same reason? 
",NKjoep,2014-08-12 19:05:58
214,2014-05-02 11:05:08,"@NKjoep , Can you post small example of code that thrown this error?
(for now I think that the reason is different)
",3y3,2014-08-12 19:05:58
214,2014-08-12 19:05:58,"Closed by #382
",3y3,2014-08-12 19:05:58
213,2013-09-18 14:42:34,"In the latest version of the debugger (0.5.0) all properties of objects prints twice
",3y3,2013-09-19 16:45:04
213,2013-09-18 14:52:40,"Thanks for spotting this problem before the version was released.
",bajtos,2013-09-19 16:45:04
213,2013-09-19 16:45:04,"Fixed.
",bajtos,2013-09-19 16:45:04
212,2013-09-18 14:04:56,"Added a short description how to enable debugger in a running process
on Windows.

Related issue: #106

@Schoonology please review.
",bajtos,2013-10-03 15:03:48
212,2013-09-20 22:14:36,":shipit: 
",Schoonology,2013-10-03 15:03:48
211,2013-09-18 13:50:32,"Fixed `config.hidden` that was not working correctly.

See also #206.

@Schoonology please review.
",bajtos,2013-09-19 07:09:54
211,2013-09-18 17:44:43,"Approved. Fun stuff.
",Schoonology,2013-09-19 07:09:54
211,2013-09-19 07:10:32,"Landed as aa1bea37, bc1834a8 and 5115a337
",bajtos,2013-09-19 07:09:54
210,2013-09-17 02:39:17,"Here, the message should be:

<S_CODE_TOKEN>

not

<S_CODE_TOKEN>

in this error message

<S_CODE_TOKEN>
",rngadam,2013-09-17 16:07:44
210,2013-09-17 16:07:44,"Fixed in #209.
",bajtos,2013-09-17 16:07:44
210,2013-12-17 17:50:51,"Thanks for fixing this, it helps. 
",jcollum-hcg,2013-09-17 16:07:44
209,2013-09-15 16:03:21,,ah01,2013-09-16 07:48:28
209,2013-09-16 07:48:51,"Merged, thank you for the contribution.
",bajtos,2013-09-16 07:48:28
208,2013-09-14 20:51:28,"Hi,
      I am on OSX 10.8.4, using node 0.10.18 and node-inspector 0.4.0. When I start node-inspector I have no error, all looks good:

Node Inspector v0.4.0
   info  - socket.io started
Visit http://127.0.0.1:8080/debug?port=5858 to start debugging.

This error occurs when I load the http://127.0.0.1:8080/debug?port=5858 in chrome (30.0.1599.37). I can see that node-inspector communicate with my node (obviously started in --debug mode) but the source does not load and the user interface of the debugger does not load entirely either (see screen shot). I have the error ""Received request for a method not implemented: DOMDebugger"" at load time appearing in the console of node-inspector. 

Received request for a method not implemented: DOMDebugger.setEventListenerBreakpoint

Does this ring a bell to anyone? 
Many thanks for your help,
MP

![screen shot 2013-09-14 at 4 35 48 pm](https://f.cloud.github.com/assets/5384179/1144222/6e999452-1d7d-11e3-99a2-7efa80bf77f7.png)
",mproy007,2014-08-28 09:10:35
208,2013-09-16 07:56:08,"Hello @mproy007, thank you for reporting the issue.

Please open Developer Tools, select tab Console and post the messages displayed there (there should be two messages according to your screenshot - see bottom right part).

Also try to clear settings saved by Node Inspector in the HTML5 local storage by running the following command in Developer Tools Console:

<S_CODE_TOKEN>

After you have removed the local settings, reload the page to see if the problem persists.
",bajtos,2014-08-28 09:10:35
208,2013-09-17 02:40:35,"Hello,
   Here are the the snapshots of my console as well as the error displayed in the terminal window of node-inspector. Many thanks for your help.

<S_CODE_TOKEN>

Cheers,
MP

![screen shot 2013-09-16 at 10 34 31 pm](https://f.cloud.github.com/assets/5384179/1154374/0bcd734a-1f42-11e3-84f4-a1d0032d9d2f.png)
![screen shot 2013-09-16 at 10 36 46 pm](https://f.cloud.github.com/assets/5384179/1154375/0bc95d82-1f42-11e3-90e1-1e8dd8bd3596.png)
",mproy007,2014-08-28 09:10:35
208,2013-09-18 14:11:44,"Thanks for the additional screenshots. I am puzzled, I don't know where are the errors coming from. Do you have any DevTools plugin/extension installed in your browser? If you do have, can you disable them and check if that solved the problem?
",bajtos,2014-08-28 09:10:35
208,2014-01-20 17:32:30,"I was having the same problem, and i was not able to debug,
But instead I opened Incognate version of Google Chrome, and the Debugger now works without displaying this error

Received request for a method not implemented: DOMDebugger.setEventListenerBreakpoint
",Mancy,2014-08-28 09:10:35
208,2014-08-28 09:10:33,"Closed by #425
",3y3,2014-08-28 09:10:35
207,2013-09-12 10:12:03,"Implemented support for data scheme URLs. This allows sourcemap files to be embedded in the sourceMappingURL in the generated js file.

Fixes #204.

@Schoonology Please review.
",bajtos,2013-09-12 17:51:59
207,2013-09-12 17:37:43,"Approved.
",Schoonology,2013-09-12 17:51:59
206,2013-09-12 04:40:38,"Can't figure out how to use the --hidden flag. I tried the following commands with no luck:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>

Has anyone ever configured this flag? 

Thanks.
",ChrisWren,2013-09-19 07:11:55
206,2013-09-12 17:13:21,"I checked the problem and the `--hidden` flag does not work as expected.

First of all, the value is must be JSON-encoded array. Because shell processes `""` characters, you have to escape the value:

<S_CODE_TOKEN>

However, there is a bug in Node Inspector, even the corrected command-line will not do give the desired result.

I am working on a fix.
",bajtos,2013-09-19 07:11:55
206,2013-09-12 19:41:59,"is `--hidden` like the [frameworks debugging support](http://www.divshot.com/blog/tips-and-tricks/ignoring-library-code-while-debugging-in-chrome/) or should i open another issue for that as a feature request?  it would be good to be able to ignore some of node's libs (as well as others).
",neonstalwart,2013-09-19 07:11:55
206,2013-09-14 02:58:08,"@bajtos Thanks for the input, I will wait for your fix before supporting --hidden in [grunt-node-inspector](https://github.com/ChrisWren/grunt-node-inspector)!
",ChrisWren,2013-09-19 07:11:55
206,2013-09-19 07:11:55,"Fixed. Note that I have to fix #213 before releasing a new version with these changes.
",bajtos,2013-09-19 07:11:55
205,2013-09-11 18:11:17,"The new front-end version introduces a new shortcut ""Ctrl+Shift+E"" to evaluate the selected code in Console.

The GUI is slightly redesigned, e.g. breakpoint markers are larger now.
",bajtos,2013-09-11 18:11:59
204,2013-09-05 21:53:12,"Hey, trying to use the source map feature - when I look at my source file (which shows up under (no domain)/index.sjs), it starts with this line:

<S_CODE_TOKEN>

But... I can see that line, and it most definitely is not displaying the source map.  What might be wrong?

Thanks!
",wwoods,2013-09-12 17:51:59
204,2013-09-06 17:18:03,"Hello @wwoods, thank you for reporting the issue.

I probably won't have time to investigate it in the next week or so. If you feel like taking a look yourself: start with 95b68be and look at `ScriptManager. _parseSourceMapUrlFromScriptSource`. Find out whether your `data:` URL is parsed and forwarded to front-end.
",bajtos,2013-09-12 17:51:59
204,2013-09-08 08:29:13,"This is a bug of Blink Developer Tools, I managed to reproduce the problem with HTML app too. See the [Blink issue #287259](https://code.google.com/p/chromium/issues/detail?id=287259) for follow-up.
",bajtos,2013-09-12 17:51:59
204,2013-09-09 02:44:13,"Thanks a lot for looking into this - I'll follow that bug.
",wwoods,2013-09-12 17:51:59
204,2013-09-10 21:58:39,"this temporary (dirty) workaround patch works for me, if you really don't want to wait.
https://gist.github.com/6516316
",silver83,2013-09-12 17:51:59
204,2013-09-12 15:17:45,"FYI: Loading source map from data uri works fine in DevTools. The data uri itself is not correct in this case.
Please let me know if you have any problems with the correct data uri though.
",vsevik,2013-09-12 17:51:59
204,2013-09-12 17:58:41,"After I have updated the DevTools front-end used by Node Inspector to a recent version, I managed to get the issue fixed by implementing data schema URL parser in `NetworkAgent.loadResourceForFrontend`.
",bajtos,2013-09-12 17:51:59
203,2013-08-26 20:57:04,"I don't see anyway to set a break point on the initial step of the program. In order for me to launch node-inspect the program must already be running. Therefore, I cannot set a breakpoint as soon as the program loads.
",samholmes,2013-08-27 06:22:08
203,2013-08-27 06:21:48,"+1. The v8 classical `debugger;` statement does not seem to work.
",asnowfix,2013-08-27 06:22:08
203,2013-08-27 06:22:08,"You have to start your program with `--debug-brk`, i.e.

<S_CODE_TOKEN>

This will start your application and break (stop) on the first line. 
",bajtos,2013-08-27 06:22:08
202,2013-08-24 18:50:17,"When visiting the debugger page, node-inspector crashes, with the following error:

<S_CODE_TOKEN>
",StrictlySkyler,2013-09-03 19:05:15
202,2013-08-26 07:14:54,"@StrictlySkyler What version of Node Inspector are you using? Can you reproduce the issue with the latest version v0.3.4? 

What is your OS and Node.js version?
",bajtos,2013-09-03 19:05:15
202,2013-09-02 20:52:51,"Yes, I can reliably reproduce it.  I'm using node-inspector version 0.3.4, node version 10.5, and Mac OS 10.8.4.
",StrictlySkyler,2013-09-03 19:05:15
202,2013-09-03 08:30:49,"This seems like a problem of your local installation to me.
1. When you run Node Inspector v0.3.4, it reports version number on the first output line. The output you pasted does not include that line.
   
   <S_CODE_TOKEN>
2. This line in the error stack trace is very suspicious:
   
   <S_CODE_TOKEN>
   
   Node Inspector is using express, therefore connect should be in `node-inspector/node_modules/express/node_modules/connect`. Have you run `npm dedup` in node-inspector directory?
   
   Also the `static.js` in connect v2.8.8, that is installed these days when you run `npm install node-inspector`, has only 95 lines, while the error is reported on line 168.

Please reinstall the node-inspector to get the latest version of all modules and post the new error trace if the problem is not fixed.

<S_CODE_TOKEN>
",bajtos,2013-09-03 19:05:15
202,2013-09-03 18:52:02,"That looks like it solved it – the local directory directory for
node-inspector didn't seem to be updated when I upgraded from an older
version.

Thanks!  Feel free to close this now.

On Tue, Sep 3, 2013 at 1:30 AM, Miroslav Bajtoš notifications@github.comwrote:

> This seems like a problem of your local installation to me.
> 
>    1.
> 
>    When you run Node Inspector v0.3.4, it reports version number on the
>    first output line. The output you pasted does not include that line.
> 
>    $ node-inspector
>    Node Inspector v0.3.4
>       info  - socket.io started
>    Visit http://127.0.0.1:8080/debug?port=5858 to start debugging.
> 
> <S_CODE_TOKEN>
> 
>    This line in the error stack trace is very suspicious:
> 
>    /usr/local/lib/node_modules/node-inspector/node_modules/connect/lib/middleware/static.js:168:11
> 
>    Node Inspector is using express, therefore connect should be in
>    node-inspector/node_modules/express/node_modules/connect. Have you run npm
>    dedup in node-inspector directory?
> 
>    Also the static.js in connect v2.8.8, that is installed these days
>    when you run npm install node-inspector, has only 95 lines, while the
>    error is reported on line 168.
> 
> Please reinstall the node-inspector to get the latest version of all
> modules and post the new error trace if the problem is not fixed.
> 
> $ npm uninstall -g node-inspector
> 
> # check that /usr/local/lib/node_modules/node-inspector was deleted
> 
> $ npm install -g node-inspector
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/node-inspector/node-inspector/issues/202#issuecomment-23697021
> .
",StrictlySkyler,2013-09-03 19:05:15
201,2013-08-20 13:32:24,"![evaluatein](https://f.cloud.github.com/assets/4627445/993560/ff4e9f46-099c-11e3-8da9-75bbbc73d711.png)
Is this a new bug because previously i was able to see long string in console???
",burhanfarooq,2014-01-16 08:10:36
201,2013-08-20 14:05:23,"> previously i was able to see long string in console

What is the version where the long values were not truncated? AFAIK the truncation is a ""feature"" of V8 debugger.

A possible solution is to serialize the string result and split it to an array of chunk, see  [DebuggerClient.evaluateGlobal](https://github.com/node-inspector/node-inspector/blob/fa4b0a351493f9a059caf1c46bbeeddb76e4ff8f/lib/DebuggerClient.js#L126).

Note that front-end expects a descriptor of the result, the result could be anything (string, number, object, undefined, etc.) The implementation must carefully choose which values to convert. Also it's questionable whether this conversion should be performed recursively, so that long values of nested properties are not truncated.

I am labelling this issue as Enhancement, since the current behaviour is by design.
",bajtos,2014-01-16 08:10:36
201,2013-12-15 23:23:10,"Ideally, this behavior should either be configurable via a setting, or there should be an easy way to expand the full string in the UI.  Most of the time, I'm fine with long strings being truncated, but I was recently trying to debug a long and complicated command line that I was generating within my app (call ImageMagick to run some transformations on a user-uploaded image file) and had to jump through hoops to get the full command line as a string so I could investigate where the issue was.
",sergkr,2014-01-16 08:10:36
201,2014-01-15 23:29:48,":thumbsup: as @sergkr describes
",doublerebel,2014-01-16 08:10:36
201,2014-01-16 08:10:36,"Please try the latest version from master, the limit was raised to 10.000 characters in #272.

<S_CODE_TOKEN>

I am closing this issue as a duplicate of #29.
",bajtos,2014-01-16 08:10:36
200,2013-08-20 11:21:57,"Fixed the bug #198 where Node Inspector crashed when a breakpoint was hit in a code
run by eval(). This is happening in two cases:
- Node Inspector calls eval() to get more information about the debugged
  process. In certain circumstances it was possible that the debugger stopped
  inside this code.
- User types `debugger;` in the console panel.

BreakEventHandler was changed to resume the execution in both cases, as if
the sources were hidden.

@Schoonology please review.
",bajtos,2013-08-21 07:27:21
200,2013-08-20 23:40:03,"Approved!
",Schoonology,2013-08-21 07:27:21
199,2013-08-18 10:58:54,"![screenshot from 2013-08-18 16 31 13](https://f.cloud.github.com/assets/5001683/982475/bbf1b240-07f5-11e3-83e9-7b7ba2776980.png)
![screenshot from 2013-08-18 16 31 33](https://f.cloud.github.com/assets/5001683/982476/bc20131a-07f5-11e3-9c88-f5af80f2807b.png)
![screenshot from 2013-08-18 16 32 37](https://f.cloud.github.com/assets/5001683/982477/bc4cfab0-07f5-11e3-962b-f32def07d36b.png)

I am not able to launch the debugging in ubuntu 12.04. 
When ""netstat -l"" command issued before launching app in debug mode, i don't see port 5858 is opened
But once after launching the application in debug mode, I do see the socket listening on port 5858 but in console it says ""Failed to open socket on port 5858, waiting 1000 ms before retrying""
When ""http://127.0.0.1:8080/debug?port=5858"" opened it shows the js files but breakpoint never hits. 
",vjsrinath,2013-08-18 11:09:57
199,2013-08-18 11:09:57,"Issue resolved, as the problem was with run.js. Thanks
",vjsrinath,2013-08-18 11:09:57
199,2014-01-16 07:33:10,"Hi there @techmachine.

Can you remember what in your run.js file caused this error?

Thank you.
",faniepotgieter,2013-08-18 11:09:57
199,2014-01-16 09:39:43,"@fpotgieter 

The message ""Failed to open socket on port 5858, waiting 1000 ms before retrying"" usually means there is another node process having the debugger listening on the same port. You can verify this assumption by running `ps ax | grep node`.

Such situation typically happens when you start a child node process and forward all command-line arguments to it. As the result, there are multiple node instances started via `node --debug` and only one of them is lucky enough to grab the debugger port. Node's cluster API used to be vulnerable to this problem too, until my patch (joyent/node#5397) was landed.
",bajtos,2013-08-18 11:09:57
199,2014-01-16 09:51:35,"Yes. I just confirmed.

I found code in one of our project files that used the node cluster module to create new processes that use the same port and that is what caused the error.

I just tried using only one process for debugging and node-inspector now loads all the files and works perfectly.

Wow. I was just about to go back to using console.log.

Sorry about the false alarm and thanks for the help.
",faniepotgieter,2013-08-18 11:09:57
199,2014-01-16 10:29:26,"No problem, I am glad your issue was resolved. Good luck in debugging!
",bajtos,2013-08-18 11:09:57
199,2014-08-24 21:04:38,"I'm having the same problem and don't understand. It's happening in all script panels. No matter what I do I get the same error message

<S_CODE_TOKEN>
",L2L2L,2013-08-18 11:09:57
199,2014-08-25 07:12:31,"See also http://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/
",bajtos,2013-08-18 11:09:57
199,2014-12-30 22:58:28,"+1 for `ps ax | grep node`
",brianfeister,2013-08-18 11:09:57
199,2015-01-27 14:14:20,"I'm using `mocha --debug-brk` and was running into this issue. Killed the process and things seem to be working. :+1: 
",andrewjmead,2013-08-18 11:09:57
199,2015-07-21 10:27:59,"Also using mocha, keep getting this when running `meteor debug` for long enough.
",kidsil,2013-08-18 11:09:57
199,2015-08-05 08:15:43,"I also got the error ""Failed to open socket on port 5858, waiting 1000 ms before retrying"" with my cluster model  app.      I run app with this  ""node --debug app.js"".  

my node version: v0.10.21
//=====================================
function start() {
    var cluster = require('cluster');
    var numCPUs = require('os').cpus().length;
    if (cluster.isMaster) {
        // Fork workers.
        for (var i = 0; i < numCPUs; i++) {
            cluster.fork();
        }

<S_CODE_TOKEN>

};
",HelloKevinTian,2013-08-18 11:09:57
199,2015-08-05 16:58:04,"> I also got the error ""Failed to open socket on port 5858, waiting 1000 ms before retrying"" with my cluster model app. I run app with this ""node --debug app.js"".
> my node version: v0.10.21

This is a known problem of Node v0.10, see the following blog post for more details (and a solution):
https://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/
",bajtos,2013-08-18 11:09:57
198,2013-08-17 18:17:03,"If I start node-inspector as a background process, `node-inspector &`, then it works fine.
If I leave off the `&`, however, then when the web UI loads, the inspector crashes with the error:

<S_CODE_TOKEN>

I've never seen a program before that _had_ to be run as a background process to work at all. Is that by design?
What it means also, is that a node process can't `child_process.spawn()` node-inspector to debug itself. It would be nice if that were possible... is that limitation by design or a bug?
Thanks!
",benbuckman,2013-08-21 07:31:55
198,2013-08-19 08:41:55,"Hi @newleafdigital, the issue you are seeing is not caused by running Node Inspector in background.

The exception is caused by a breakpoint being hit before Node Inspector was notified about the source file where the debugger stopped. (It's possible that running Node Inspector in background changes the timing, which may cause the issue to disappear.)
1. What version of Node Inspector and node are you running? (If you are using different node version for Node Inspector and the debugged process then report both of them.)
2. Can you post a sample project where the issue can be reproduced?
",bajtos,2013-08-21 07:31:55
198,2013-08-20 03:15:49,"I believe I'm seeing the same issue when trying to use `child_process.fork`.
I've created a [small test repo](https://github.com/jasonrm/node-inspector-issue-198) that duplicates what I'm seeing in my larger app.

Running `node ./server.js` will let the primary process turn on debug via the signal. This is the case where node-inspector fails with the `TypeError` as originally reported.
Running `node --debug ./server.js` will have Node start debugging very early on, however it carries over to the forked process so it complains about being unable to open the node debug port. In this case, node-inspector appears to work correctly.

node v0.10.15, node-inspector v0.3.3
",jasonrm,2013-08-21 07:31:55
198,2013-08-20 11:23:41,"The test repo was incredibly helpful, thank you @jasonrm! I was able to reproduce the problem, the pull request with the bug-fix is waiting for a review by my colleague.
",bajtos,2013-08-21 07:31:55
198,2013-08-21 07:31:55,"Fixed in v0.3.4.
",bajtos,2013-08-21 07:31:55
198,2014-05-31 16:50:57,"I am experiencing similar issue when trying to debug this public node project.
https://github.com/sahat/hackathon-starter

I get the error when trying to signup (.postSignup), ""CREATE ACCOUNT""
using:
node v0.10.26
node-inpector v0.7.3
error:

<S_CODE_TOKEN>
",edroch,2013-08-21 07:31:55
197,2013-08-15 06:12:26,"Node Inspector should monkey-patch `console.log` and friends so that a copy of every message is forwarded to Node Inspector front-end and displayed in the Console panel.

See also #134 and strongloop/node-inspector#29.
",bajtos,2014-12-04 17:02:16
197,2013-08-15 09:07:38,"A related project: [node-codein](https://github.com/ketamynx/node-codein)
",bajtos,2014-12-04 17:02:16
197,2013-08-15 09:44:58,"Realisation of node-codein needs to include module in project.
Hou about inject some code (wrapper for the global.console) in debugging project (with help of RuntimeAgent.evaluate) instead of include?
",3y3,2014-12-04 17:02:16
197,2013-08-15 09:55:01,"> Hou about inject some code (wrapper for the global.console) in debugging project (with help of RuntimeAgent.evaluate) instead of include?

Yes, injecting the wrapper code is the best approach for node-inspector.
",bajtos,2014-12-04 17:02:16
197,2014-01-23 17:51:17,"Another related project: https://github.com/jwarkentin/node-monkey
",bajtos,2014-12-04 17:02:16
197,2014-12-04 16:32:36,"@3y3 can we close this issue as implemented?
",bajtos,2014-12-04 17:02:16
197,2014-12-04 17:02:16,"Yes! =)
",3y3,2014-12-04 17:02:16
197,2014-12-09 13:54:10,"HI
Thanks for the great feature.

But I wished to know how can we prevent this.
Its making node-inspector very slow and impossible to use its console
Thanks
",abhay-github,2014-12-04 17:02:16
197,2014-12-09 14:24:12,"@abhay-github , can you describe your situation more verbose, bacause I don't see any problems with performance on my machine
",3y3,2014-12-04 17:02:16
197,2014-12-09 16:11:59,"@3y3 IIRC `--noinject` can be used as a quick workaround, is that still true?

Having said that, it would be still nice to find out what's the problem and fix any performance issue(s). @abhay-github please provide steps how to reproduce your problem. Also what is your OS (Win/Linux/Mac) and what Node version do you use?
",bajtos,2014-12-04 17:02:16
197,2014-12-10 08:58:40,"> @3y3 IIRC --noinject can be used as a quick workaround, is that still true?

Yes, it's correct. I prefer to redesign this option to something like:

<S_CODE_TOKEN>

`node-debug --no-inject=console --no-inject='heap-profiler' app`
",3y3,2014-12-04 17:02:16
197,2014-12-10 10:04:48,"Hi
Thanks for your replies.
The --no-inject options works perfectly and node-inspector has become smooth again.

Earlier it used to become non-responsive as soon as one tried to open console.
If you would like these are my system details
OS: windows 8.1
node: 0.10.33
I dont know what detail I should give to reproduce the problem, but I am using grunt and here is the grunt task which is running. Pls tell me if you need something else/ more details etc.:

//-------------------------------------------------------------------------------------------------

grunt.registerTask('serve', function (target) {
    if (target === 'dist') {
      return grunt.task.run(['build', 'env:all', 'env:prod', 'express:prod', 'wait', 'open', 'express-keepalive']);
    }

<S_CODE_TOKEN>

  });
",abhay-github,2014-12-04 17:02:16
197,2014-12-10 12:15:13,"Are you printing something in console?
",3y3,2014-12-04 17:02:16
197,2014-12-11 10:24:33,"yes. Many things like:

[undefined:undefined] DISCONNECTED                             //from socketio
GET /styles/ng-tags-input.css 304 44ms                             // from express  
GET /styles/style.css 304 48ms
dataaaaaaaaaaaaaaaa                                                       //user console print
GET /api/participants/me 304 8ms
[undefined:undefined] CONNECTED

My console is filled with these, and it goes on printing. But the browser console is not able to handle it
",abhay-github,2014-12-04 17:02:16
197,2014-12-11 11:19:58,"@3y3 I guess we may need to improve the code forwarding the messages to batch them? I.e. send a batch of all captured console messages once every 50ms, instead of sending individual messages immediately.

@abhay-github could you please open a new github issue to track this problem? It would be even better if you could include a simple program to reproduce the issue.
",bajtos,2014-12-04 17:02:16
197,2014-12-12 08:21:37,"yes sure.
Thanks
",abhay-github,2014-12-04 17:02:16
196,2013-08-13 12:59:58,"Hello, 
when I run my app like : 
forever -w -c node --debug app.js

I get : 
Error: connect ECONNREFUSED Is node running with --debug port 5858
",daslicht,2013-08-14 17:52:25
196,2013-08-14 17:52:25,"Check the output of `ps`:

<S_CODE_TOKEN>

You can see that forever did not start the node process with `--debug` option.

This command-line seems to fix the problem for me:

<S_CODE_TOKEN>

It is IMO a problem of forever. If my advice does not work for you, please fill an issue in forever project.
",bajtos,2013-08-14 17:52:25
195,2013-08-13 04:55:09,"--debug is unavailable in these instances. How can I access the inspector in these cases? Is there a way to ""manually"" start the debugger without ""node --debug""? 
",quinn,2013-08-13 05:12:14
195,2013-08-13 05:12:14,"You can enable debugger in a running application by sending `SIGUSR1` to the process (this does not work on Windows).

Alternatively, you can use the undocumented Node API `process._debugProcess(pid)`, which works on all platforms.

In both cases you must know id of the node process you are going to debug.
",bajtos,2013-08-13 05:12:14
194,2013-08-11 14:51:54,"Related to issue #184
",pflannery,2013-08-12 09:17:34
194,2013-08-12 09:17:34,"Landed as e48cca3 (I had to remove extra whitespace). Thank you for your contribution!
",bajtos,2013-08-12 09:17:34
193,2013-08-08 16:20:49,"Hi, 
I have a linux vm with node installed (and node-inspector) 
when I run the chrom browser from my Mac (hosting the VM) with the right URL, I can see the source which is great but when I put a breakpoint nothing heppen, when the code reach that point it just continue 
I have --web_host and port configured

what am I doing wrong ?
",nirmelamoud,2014-12-18 12:52:50
193,2013-08-14 17:42:55,"Hi @nirmelamoud, thank you for reporting the problem. I am afraid I can't tell what might be the problem based on your description.

Please try the following three things and let me know the results.
1. Run your node application on your Mac. Does the problem persist?
2. Trigger the break explicitly by adding `debugger;` statement to your code. (Run the application inside the Linux VM).
3. Debug this simple application instead, try to set a breakpoint and also watch for breaking on `debugger;` statement. (Note you have to open http://localhost:3000/ in your browser to have the request handler executed.)

<S_CODE_TOKEN>
",bajtos,2014-12-18 12:52:50
193,2013-09-11 00:12:06,"Would like to note that I've just started experiencing this issue as well on an app running on an ubuntu 12.08 server deployed on AWS with node 0.10.15 and using Google Chrome Version 29.0.1547.65 on MacOS X 10.8.4 as the node-inspector front-end client.

Was working fine after I updated to node-inspector release 0.4.0 about 3 days ago and just started acting up today.

Currently the only way I can get the debugger to stop for me is to put an in-line 'debugger;' breakpoint or start the node instance with --debug-brk and step thru.

Going to investigate my Chrome update release log to see if there were code inspector changes that could have affected this.  

May also give a down grade or full remove/re-install a shot too and let you know what I find over here.

-Etienne
",JELaVallee,2014-12-18 12:52:50
193,2013-09-11 00:28:18,"As a followup, just did a full remove of node-inspector 0.4.0 and npm install'd it again and seeing same behavior.

My release of Chrome was from 2013/09/02 so that doesn't seem as suspect...
",JELaVallee,2014-12-18 12:52:50
193,2013-09-11 00:53:58,"Okay, this is a bit phantom-tastic, but here's how I fixed this on my stack...

1) Remove node-inspector 0.4.0 on the server
2) In Chrome go to the History panel (cmd-Y), search for the url of your server's node-inspector instance
3) Check all of the history items and click the 'Remove All Selected' button to flush them out of cache
4) Re-install node-inspector 0.4.0 on the server
5) Re-run your server stack with --debug(-brk) and the re-installed node-inspector 0.4.0
6) Hit your node-inspector URL and wait for it to fully reload
7) Option-Menu over an existing breakpoint in the Breakpoint accordion view on the right panel and choose 'Remove All Breakpoints""
8) Add breakpoints back in and they start working again...

Sucks if you have a big stack of breakpoints, but does get debugging working again.

I sifted through a few logs and saw that sometime earlier today there was an error reported with the following:

<S_CODE_TOKEN>

In my node instance's std-out log... not sure what exactly was going on when those fired but thought I'd mention them as they occurred right around when I started experiencing this zombie-breakpoint issue.

@nirmelamoud, could you give the above process a shot and see if it resolves the issue for you?

If I experience this again, I be more diligent about seeing I can capture an err.log on the server side.

Cheers,
Etienne
",JELaVallee,2014-12-18 12:52:50
193,2013-09-11 15:01:51,"Thank you @JELaVallee for investigating the problem more.

I am still not sure what's the source of the problem, but I have few ideas to try:
1. If the problem is in the way how node-inspector front-end files are cached by the browser, then it should be enough to flush the cache and reload Node Inspector's page (i.e. do the steps steps 2, 3, 5 and 6 only).
2. On the other hand, if the problem is caused by data stored locally in the browser, it should be enough to clear the local HTML5 storage (this makes Node Inspector forget all breakpoints), restart the debugged process and reload Node Inspector's page.

How to clear the local storage: Load Node Inspector page, Open Developer Tools Console and run the following command:

<S_CODE_TOKEN>

In any case, it should be possible to fix the problem without reinstalling Node Inspector.
",bajtos,2014-12-18 12:52:50
193,2013-09-11 15:04:05,"> I sifted through a few logs and saw that sometime earlier today there was an error reported with the following:
> 
> <S_CODE_TOKEN>

`Error 0` is reported by Node or V8 debugger when Node Inspector disconnects from the debugged process. I don't know what does `Error 104` mean as I haven't encountered it myself.
",bajtos,2014-12-18 12:52:50
193,2013-09-11 15:37:11,"@bajtos: No problem, glad to give a hand for such a valuable tool!

I'll definitely give window.localStorage a look the next this should happen.  A friend suggested that this might occur if two browsers were simultaneously hitting the node-inspector server at the same time for the same running node instance when I mentioned the 104 Error message to him.  But I haven't been able to reproduce the behavior from such.

Keep up the great work!
",JELaVallee,2014-12-18 12:52:50
193,2014-10-06 22:07:49,"I think I'm up against this also now. Just tried for the first time to debug an app using ""node --debug server.js"" then firing up node-inspector and browsing to http://127.0.0.1:8080/debug?port=5858 which gives me the node-inspector UI (though I have to Ctrl-F5 once to get it to render fully), but then I cannot see my sources and after perhaps 10 seconds, my app logs ""Error 0"" and I never get anywhere with the debugging in node-inspector. Running Node.js v0.10.31 and Node Inspector v0.7.4.
",rainabba,2014-12-18 12:52:50
193,2014-10-07 11:35:53,"@rainabba how can I reproduce your problem on my machine?
",bajtos,2014-12-18 12:52:50
193,2014-10-07 18:59:02,"Good question and that got me thinking down the path I should have to begin with. Apparently the issue is a particular project because I was able to get connected on another. Are there any known issues that could cause a project to not play nicely with node-inspector? Below are my dependencies for this project in case something there hints at the issue:

  ""dependencies"": {
    ""angular-ui-router"": ""^0.2.11"",
    ""es6-shim"": ""^0.18.0"",
    ""hapi"": ""^6.7.1"",
    ""hapi-mongodb"": ""^2.2.0"",
    ""imagemin-gifsicle"": ""^2.0.0"",
    ""joi"": ""^4.6.2"",
    ""mandrill"": ""^0.1.0"",
    ""mandrill-api"": ""^1.0.40"",
    ""mongoose"": ""^3.8.15"",
    ""newrelic"": ""^1.10.3"",
    ""node-uuid"": ""^1.4.1"",
    ""socket.io"": ""^1.0.6"",
    ""wreck"": ""^5.0.1""
  },
",rainabba,2014-12-18 12:52:50
193,2014-10-08 09:00:27,"You can try to run Node Inspector as `node-inspector --no-preload`, but I don't think that will fix the problem for you.

The last resort is to look at the communication between node inspector and the debugged process.
1. Start Node Inspector using the following command line:
   
   <S_CODE_TOKEN>
2. Debug the problematic app. When you see `Error 0` in console, you can stop Node Inspector and the app.
3. Create a GitHub Gist with the contents of `debug.log`. Leave a comment here with a link to the gist created.
",bajtos,2014-12-18 12:52:50
193,2014-12-18 12:52:50,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide more information or even better full instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 12:52:50
192,2013-08-07 01:51:18,"when i want to debug grunt task with node-inspector, i failed。
do as follow:
1.node --debug-brk  {grunt-cli base dir}\grunt build-task
2. node-inspector &
3.open url:http://127.0.0.1:8080/debug?port=5858in chrome
I receive a error ""no such file or directory in grunt-cli\bin\node_modules\findup-sync.js "" 
",chenjie-cnooc,2014-12-18 12:51:51
192,2013-08-07 07:43:04,"Hi @chenjie-cnooc,

Could you please post the full error (stack-trace) you received? Also where was the error reported - was it in node-inspector process output, in node-inspector console tab, or in Developer Toolbars console tab?

What happens when you run grunt without node-inspector, do you get the same error?

<S_CODE_TOKEN>
",bajtos,2014-12-18 12:51:51
192,2013-08-09 10:21:09,"1.create grunt-task with grunt-init gruntplugin 
2.node --debug-brk d:\nodejs\node-global\node_modules\grunt-cli\bin\grunt build-task
3.open other cmd window and node-inspector &
4. chrome :http://127.0.0.1:8080/debug?port=5858
debug stop at:
 fs.statSync = function(path) {
  nullCheck(path);
  return binding.stat(pathModule._makeLong(path));// point this line
};

error:
<exception>: Error: ENOENT, no such file or directory 'd:\nodejs\node-global\node_modules\grunt-cli\node_modules\…
arguments: undefined
code: ""ENOENT""
errno: 34
message: ""ENOENT, no such file or directory 'd:\nodejs\node-global\node_modules\grunt-cli... (length: 138)""
path: ""d:\nodejs\node-global\node_modules\grunt-cli\node_modules\findup-sync\lib\node_m... (length: 102)""
stack: undefined
syscall: ""stat""
type: undefined
path: ""d:\nodejs\node-global\node_modules\grunt-cli\node_modules\findup-sync\lib\node_m... (length: 102)""
this: Object
",chenjie-cnooc,2014-12-18 12:51:51
192,2013-08-11 08:50:46,"I am not able to reproduce your problem. The error stack trace suggest there might be a problem in you grunt installation, since node cannot load a module file:

> d:\nodejs\node-global\node_modules\grunt-cli\node_modules\findup-sync\lib\node_m... (length: 102)

Please re-install grunt-cli and try again.

What happens when you run grunt without the debugger? Do you see the same error?
",bajtos,2014-12-18 12:51:51
192,2013-08-12 01:43:08,"thanks a lot for you help.
firstly, my node have been setup at d:\nodejs with npm config set prefix  command line, so I did not  install it at default path,Is it the reason of this error? 
secondly, My grunt can work well now. but  I  want  to use  node-inspector or the other  tool to debug my grunt code.because now I always debug the code with console.log, it is so difficult to do a complexed and bigger task.
",chenjie-cnooc,2014-12-18 12:51:51
192,2013-08-12 15:22:41,"I am afraid I can't help here, since I am not able to reproduce your problem. You can try to install node on C: drive and/or run your debugging session in a virtual machine running Linux.
",bajtos,2014-12-18 12:51:51
192,2013-08-16 20:01:23,"I'm having the same problem when trying to debug an express application.

It's really weird because it seems as the problem lies in the fact that the path get's truncated as can be seen in the posts above with the ""... (length: 102)"" because that seems to be the actual string value rather than just a display thing.

Whats even weirder is that the very same project runs fine on another machine using node-inspector, and without node-inspector running I have no problem at all running the application on any machine.
",ghost,2014-12-18 12:51:51
192,2013-11-28 22:35:11,"How about using this command: 

<S_CODE_TOKEN>

You can also use [grunt-node-inspector](https://github.com/ChrisWren/grunt-node-inspector) to start node-inspector and your grunt task concurrently. [Here](https://github.com/CabinJS/Cabin/blob/master/Gruntfile.js#L44-L77) is a sample grunt config I use to debug a grunt task.
",ChrisWren,2014-12-18 12:51:51
192,2013-11-29 09:22:30,"> Whats even weirder is that the very same project runs fine on another machine using node-inspector, and without node-inspector running I have no problem at all running the application on any machine.

@bagge666 Could you try one thing for me please? 
1. Modify your local copy of Node Inspector:  Open [lib/ScriptFileStorage.js](https://github.com/node-inspector/node-inspector/blob/master/lib/ScriptFileStorage.js#L174) and replace the implementation of `$class.findAllApplicationScripts` with
   
   <S_CODE_TOKEN>
2.  Run the debugging session again on the machine where it is not working now.
3. What was logged to the console? Is the problem still there?

---

Node Inspector tries to guess what is the project root of the application you are debugging and load all javascript files from the project. This way it's possible to set breakpoints in files that are not loaded (were not require()ed) yet. My suspicion is that there's a bug in this algorithm.
",bajtos,2014-12-18 12:51:51
192,2014-05-23 13:23:17,"I've the same problem. 

@bagge666 
I tried your proposal, but it didn't help me. :(
",draschke,2014-12-18 12:51:51
192,2014-12-18 12:51:51,"As part of our issue triage process, we are closing items that have been inactive for an extended period of time. Feel free to reopen this issue if you can provide instructions allowing us to reproduce the problem on our machines using the latest version.
",bajtos,2014-12-18 12:51:51
191,2013-08-04 12:11:01,"Here is used rc module.
Also was created section with description and conversion of options
",3y3,2013-09-03 09:21:28
191,2013-08-05 07:43:36,"The indentation problems are caused by using tabs instead of spaces. We use spaces in Node Inspector, please do use them too.

Also please remove trailing whitespace at the end of line, there are three such lines (run `git diff --check` to find them).
",bajtos,2013-09-03 09:21:28
191,2013-08-06 14:27:14,"You are on the right path, the general concept is good. Most of my objections are style-related, plus you need to add backwards compatibility. I am looking forward to accept your PR once you do the changes.
",bajtos,2013-09-03 09:21:28
191,2013-08-07 08:54:18,"Ohhh... Indentation problems!
Is there a script or options list for jsLint/jsHint, that describes all syntax rules?
",3y3,2013-09-03 09:21:28
191,2013-08-07 09:11:38,"> Is there a script or options list for jsLint/jsHint, that describes all syntax rules?

I am afraid there isn't :( I thought Google Closure Linter will do the check, but apparently you have to turn in on first and most of the current code does not pass it's rules.
",bajtos,2013-09-03 09:21:28
191,2013-08-07 12:11:38,"Now (without indentation errors) I'm ready to continue discuss
",3y3,2013-09-03 09:21:28
191,2013-08-26 10:17:39,"Previous discussion fixed. Is there another problems?
",3y3,2013-09-03 09:21:28
191,2013-08-27 08:40:18,"@3y3 Thanks for simplifying the code, it's almost ready to be accepted.
1. There are few more stylistic issues - see my comments above.
2. Please document this new way of configuring Node Inspector in README.md.
3. I am afraid there is a bug in the current implementation, because Node Inspector prints this warning on start:
   
   <S_CODE_TOKEN>
   
   I suspect it's because `config` definition is missing a `convert` entry.
",bajtos,2013-09-03 09:21:28
191,2013-08-27 19:31:37,"## Inspector options

Node-inspector uses [rc](https://npmjs.org/package/rc) [[github]](https://github.com/dominictarr/rc) module to collect options.

Places for configuration:
- command line arguments (parsed by optimist)
- enviroment variables prefixed with `node-inspector_`
- if you passed an option `--config file` then from that file
- a local `.node-inspectorrc` or the first found looking in `./ ../ ../../ ../../../` etc.
- `$HOME/.node-inspectorrc`
- `$HOME/.node-inspector/config`
- `$HOME/.config/node-inspector`
- `$HOME/.config/node-inspector/config`
- `/etc/node-inspectorrc`
- `/etc/node-inspector/config`
- options from `config.json` for backward compatibility
- defaults described in Node Inspector`s [./lib/config.js](https://github.com/node-inspector/node-inspector/blob/master/lib/config.js).

All configuration sources that where found will be flattened into one object, so that sources earlier in this list override later ones.

List of predefined options:

<S_CODE_TOKEN>
",3y3,2013-09-03 09:21:28
191,2013-08-27 19:32:32,"how about this description
",3y3,2013-09-03 09:21:28
191,2013-08-28 08:38:57,"The description is great. Few comments:

> defaults discribed in node-inspector ./lib/config.js.

should be ""described"" and ""Node Inspector's""

> Options from config.json was imported for backward compatibility (with priority of defaults).

It would be best to add this as a new item into the list of config sources, i.e.
- `/etc/node-inspector/config`
- options from `config.json` for backward compatibility
- defaults described in Node Inspector's lib/config.js. 

Note: lib/config.js should be a link to the source file

BTW I will be probably offline for next few days and won't be able to reply to your comments in a timely manner.
",bajtos,2013-09-03 09:21:28
191,2013-08-28 08:42:52,"> Enable local saving of live source`s changes

Save live edit changes to disk (update the edited files).

> Array of hidden files

Array of files to hide from the UI. Breakpoints in these files will be ignored.
",bajtos,2013-09-03 09:21:28
191,2013-09-02 12:56:33,"Thanks for the new commit. There are few details to fix in README, hopefully there won't be any more changes necessary.

Please squash all your commit into a single one and make sure the commit message follows [50/72 format](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html), i.e.
- First line is 50 characters or less and summarises the commit
- Then a blank line
- Remaining text should be wrapped at 72 characters and provide longer/additional information.

Also note that we use past tense in commit messages (as opposed to what is used by other git projects).
",bajtos,2013-09-03 09:21:28
191,2013-09-03 05:35:07,"> Please squash all your commit into a single one

Sorry for stupid question, but how to do this? Create new branch? Where I can read about this? (I am novice in git)
",3y3,2013-09-03 09:21:28
191,2013-09-03 08:01:45,"> > Please squash all your commit into a single one
> 
> Sorry for stupid question, but how to do this? Create new branch? Where I can read about this? (I am novice in git)

No problem, I am happy to help.
1. In your `devel` branch, run an interactive rebase on top of the master branch
   
   <S_CODE_TOKEN>
2. Git opens your editor with a list of commits in your branch that are not in the master
   
   <S_CODE_TOKEN>
3. Change the action from `pick` to `squash` in all commits except the first one. I.e. the actions will be `pick`, `squash`, `squash`, etc.
4. Save the file and exit your editor.
5. Git squashes all commits into a single one and opens the editor where you can edit the commit message of the resulting commit.
6. Edit the message, follow the 52/72 format.
7. Save the file and exit your editor.
8. Once the rebase is done (hopefully there won't be any merge conflicts), you have to do a force-push to get your changes to github.
   
   <S_CODE_TOKEN>
   
   Note: it's a good practice to limit force-push to feature branches, because it requires [extra work](http://stackoverflow.com/questions/9813816/git-pull-after-forced-update) to pull force-pushed changes to other people's local clones.

See this article for more details: https://help.github.com/articles/interactive-rebase.
",bajtos,2013-09-03 09:21:28
191,2013-09-03 08:46:51,"Great thanks for advices.
",3y3,2013-09-03 09:21:28
191,2013-09-03 09:21:28,"Landed as 5e78ed4, thank you for your contribution!

I have amended your commit to fix few more issues I found to save another round-trip of commenting & fixing.
- You forgot to add an empty line between the summary and the body in the commit message.
- Few lines in README had trailing white-space.
- bin/inspector.js used tabs instead of spaces for indentation.
  I hope you don't mind.
",bajtos,2013-09-03 09:21:28
190,2013-08-04 08:47:11,"I created a file e.js with a single line:

<S_CODE_TOKEN>

Now I run node 0.10.15 & latest node-inspector

<S_CODE_TOKEN>

Then I go to Chrome, see that the execution is stopped and enable the violet(not blue!) ""stop on error"" button below http://screencast.com/t/ayFC8O31lVWg 

Then I click ""continue"" and the script dies. 

Expected behavior: stop execution on error.
Previous version of node-inspector: works as expected
Chrome built-in: works as expected
Node-inspector 0.3.2: fails.

Important stuff for debugging, it seems.
",iliakan,2013-08-05 19:39:54
190,2013-08-04 10:08:32,"I debugged the issue for a while with node-inspector from github, in an attempt to fix it.

1) node-inspector backend sends the correct message to V8 and it seems to respond correctly, so the flag is set.
2) when an error occurs while loading a module, it looks to be really outside of any try..catch. There are try..finally blocks in node.js js, but no catch, so there is really an exception, which must be caught.
3) there's no 'break' event from V8 (logging conn.on('data')). I tried 0.10.15, 0.10.12, 0.8.x, no such event coming at all! Hence, no break at frontent.

That was with the git version.

Then I installed npm i -g node-inspector@0.2, and everything works fine.

I can debug it further, but I believe you know better what has changed and can fix it more easily.
",iliakan,2013-08-05 19:39:54
190,2013-08-05 07:22:11,"It is not possible to stop on uncaught exception in Node.js before version 0.11.3. This feature requires a non-trivial change in Node (see joyent/node@c16963b).

In the previous versions of Node Inspector, ""stop on uncaught exceptions"" was stopping on all exceptions (both caught and uncaught).

We could change Node Inspector to detect Node version and warn the user that ""stop on uncaught exceptions"" does not work in Node v0.10. We are already doing a similar check for ""set variable value"" (see `DebuggerAgent.setVariableValue()`).

I don't consider this a high priority and thus won't fix it anytime soon,
",bajtos,2013-08-05 19:39:54
190,2013-08-05 14:24:10,"I tried node-inspector from git with node 0.11.4. Didn't work.

There's an error in console:
http://screencast.com/t/sfdjGtTWdNBt

Should it work?
",iliakan,2013-08-05 19:39:54
190,2013-08-05 14:35:48,"> Should it work?

Probably yes. Could you please post the source code so that I can reproduce the problem? Also what OS and browser version are you using?

> There's an error in console:
> http://screencast.com/t/sfdjGtTWdNBt

That's a weird error, the filename has no extension. Can you click on the error line to expand it for more details?
",bajtos,2013-08-05 19:39:54
190,2013-08-05 15:01:59,"Hi,

I'm using a single-line file 1.js

<S_CODE_TOKEN>

Then I run node 0.11.4

<S_CODE_TOKEN>

In another terminal node-inspector from git:

<S_CODE_TOKEN>

Then I go to latest Chrome 30.0.1581.2 dev under latest stable MacOS and see the error.
The url is provided by node-inspector.

When I click on the error, it seems that the file is empty. 
Please try to reproduce it.
",iliakan,2013-08-05 19:39:54
190,2013-08-05 15:18:58,"@iliakan I was able to reproduce the problem. Running this command in DevTools console should fix it:

<S_CODE_TOKEN>

I suspect this is related to #188.
",bajtos,2013-08-05 19:39:54
190,2013-08-05 19:33:23,"Thank you, it starts debugging now.
",iliakan,2013-08-05 19:39:54
190,2015-07-18 19:20:26,"Sorry to use a closed issue, but I can't find anyting on HOW to made node-inspector stop on unhanded exceptions, only talk about it happening and the README saying it can. Do I need to enable an option or take other steps? Using Node 12.0 and can otherwise debug.
",rainabba,2013-08-05 19:39:54
190,2015-08-22 07:30:50,"@rainabba IIRC, the support for stopping on unhandled exceptions in Node.js is rather fragile and may be broken in certain versions. Also keep in mind that unhandled exception = exception that crashes your process. If you catch unhandled exceptions e.g. via domains, they are no longer considered as uncaught (IIRC).

In order to help you more, I need an example app reproducing the problem that I can run on my machine.
",bajtos,2013-08-05 19:39:54
189,2013-08-01 14:58:35,"- Include the name of the debugged application (we already know the main script file)
- Change the title when the debugger stopped on a breakpoint
",bajtos,2014-12-18 12:50:56
189,2014-05-05 14:40:04,"Hi @wyattbiker, you post #364 Issue, please switch to #189 for discussion.

> Would be nice to have an optional -title=
> or if no title use the app name as the title.

I think that best strategy will be grab name from package.json

> I already located the opener.js as the file that opens up Chrome. I wonder if Chrome has a command line option to force a title.

Opener is only one of ways to open Node Inspector. 
For example I use the old style way `node-inspector app.js`. For this reason I think that best solution:
- Add new command to [FrontendClient](https://github.com/node-inspector/node-inspector/blob/master/lib/FrontendClient.js) (like `updateTitle`)
- Add handler for this command to [Overrides](https://github.com/node-inspector/node-inspector/blob/master/front-end-node/Overrides.js)

How you can see it's not a difficult problem. I leave it for novice in Node Inspector. Are you want to be this novice and fix this issue? ;-)

In any cases @bajtos is boss and you can wait his extended comment, but how I understand, it went on vacation.
",3y3,2014-12-18 12:50:56
189,2014-05-09 18:15:29,"We are already sending the full file name of the main app script in `Page.getResourceTree` response, it should be possible to get it from there. If that turns out to be too difficult, then the `updateTitle` command suggested by @3y3 is a reasonable solution too.
",bajtos,2014-12-18 12:50:56
189,2014-12-18 12:50:56,"I am closing this issue, since there was not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 12:50:56
188,2013-08-01 14:55:27,"We should change the local storage used by WebInspector.Settings to be per-debugged-application, so that we do not restore breakpoints from application A when debugging application B.

We could either clear localStorage when switching to a new application (does not support parallel debugging of multiple applications) or override window.localStorage in WebInspector.Settings.prototype.createSetting to use keyed storage (key = application id, probably path to the main js file).
",bajtos,2014-12-18 12:50:32
188,2013-08-19 18:35:58,"A workaround when things get weird after switching debugged applications: run the following command in DevTools console.

<S_CODE_TOKEN>
",bajtos,2014-12-18 12:50:32
188,2014-12-18 12:50:32,"I am closing this issue, since there was not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 12:50:32
187,2013-08-01 14:53:28,"Add support for setting breakpoints in code that was loaded via `eval();` as opposed to loading it from a file via `require()`.

It should be enough to implement `DebuggerAgent.setBreakpoint()` in a similar way to `DebuggerAgent.setBreakpointByUrl()`.

See issue #171 for a test-case.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/737899-set-breakpoint-in-eval-ed-code?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",bajtos,
187,2014-06-18 04:53:08,"Wow, big +1 to this.  How hard would this be to do? Maybe I could do it myself?
",aexmachina,
187,2014-06-30 15:33:04,"@aexmachina not too difficult, that's why there is the `easy pick` label on this issue :)

Take a look at our [Developer's Guide](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide) to get started.
",bajtos,
187,2014-11-06 00:52:38,"I'm interested in working on this. @bajtos, Any suggestions on where to start?
",fakewaffle,
187,2014-11-06 07:22:38,"@fakewaffle see [DebuggerAgent.setBreakpointByUrl](https://github.com/node-inspector/node-inspector/blob/90d699202dc2d5dc44c9493e89da1bea3e1c3671/lib/DebuggerAgent.js#L322-L349) and V8's [setbreakpoint](https://code.google.com/p/v8-wiki/wiki/DebuggerProtocol#Request_setbreakpoint).
",bajtos,
187,2015-07-08 11:01:18,"Is this still an easy pick with the current code? If nobody is working on it, I would maybe have a peek into it, as I think it could be a very usefull feature.
",EricSmekens,
187,2015-07-08 11:30:22,"@EricSmekens I think it is still an easy pick, the code in `DebuggerAgent.setBreakpointByUrl` hasn't changed much.
",bajtos,
187,2016-08-07 18:41:58,"not able to step F10 into the eval code .. 
// could do eval stepping in the browser js [javascript on client side, no nodejs involved]
but not in node inspector with nodejs 

any workarounds ,, real blocker for us 

Thanks
",navinSing,
186,2013-08-01 14:49:56,"Polish GUI and remove or change elements that have no use in node.
- Rename 'no domain' in source tree to something more sensible, e.g. 'node.js'
- Remove setting options that are not applicable to node-inspector
- Remove XHR, DOM and event breakpoints from right sidebar
",bajtos,2014-08-28 09:02:31
186,2013-11-20 11:16:49,"+1. Also, the Settings button/panel should be revisited.
",dandv,2014-08-28 09:02:31
185,2013-08-01 14:47:51,"Implement support for profiling CPU and Heap usage. See [c4milo/node-webkit-agent](https://github.com/c4milo/node-webkit-agent) and [c4milo/v8-profiler](https://github.com/c4milo/v8-profiler) for inspiration.

These commands were implemented in the old version:
- enableProfiler
- disableProfiler
- startProfiling
- stopProfiling
- getProfileHeaders
- getProfile
- removeProfile
- clearProfiles
- takeHeapSnapshot

Note that node v0.11 brings a breaking change of API for native modules, v8-profiler needs an update. It would be nice to merge c4milo's and Danny's forks of v8-profiler, give the project a new home in node-inspector organization and start publishing the versions to npmjs.org again.
",bajtos,2014-12-04 17:03:08
185,2013-09-26 01:48:25,"Hey @bajtos, what could I do to start work on this apart from just digging into all the prior art? 
",ThisIsMissEm,2014-12-04 17:03:08
185,2013-09-27 15:22:33,"Hey @miksago, thanks for reaching out. I'd start with the CPU profiler, here are some resources you may find helpful:
- Node Inspector's [Developer's Guide](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide)
- Node API for V8 CPU profiler: [strong-cpu-profiler](https://github.com/strongloop/strong-cpu-profiler)
- Implementation in the old version of Node Inspector: start at [lib/session.js line 784](https://github.com/node-inspector/node-inspector/blob/v0.1.10/lib/session.js#L784).
- Bugger's implementation: [Profiler.js](https://github.com/jkrems/bugger/blob/master/lib/domains/Profiler.js) and [probes/profiler.js](https://github.com/jkrems/bugger/blob/master/lib/bug-script/probes/profiler.js), alternatively CoffeeScript sources [Profiler.coffee](https://github.com/jkrems/bugger/blob/master/src/domains/Profiler.coffee) and [probes/profiler.js](https://github.com/jkrems/bugger/blob/master/src/bug-script/probes/profiler.coffee)

FYI: I'll be mostly offline until end of next week and won't be responding on comments/e-mails until I get back.
",bajtos,2014-12-04 17:03:08
185,2013-09-27 15:27:33,"Alright, cool. I'll start looking at it shortly — CPU Profiler was actually were I was thinking of starting.

Side thought: Would it be cool to be able to capture DTrace probes in the Timeline View?
",ThisIsMissEm,2014-12-04 17:03:08
185,2013-10-03 18:19:51,"> Would it be cool to be able to capture DTrace probes in the Timeline View?

Sure, that sounds like a useful feature. It would be even better if it worked on non-Solaris platforms too.
",bajtos,2014-12-04 17:03:08
185,2013-11-06 20:47:38,"@miksago has there been any progress here? A profiler would make my life a lot easier, and having to juggle between node-inspector for debugging, and the less-convenient node-webkit-agent is frustrating. I can probably shake loose some time to help, if you need it.
",shepheb,2014-12-04 17:03:08
185,2013-11-07 09:45:50,"@shepheb It makes me sad to say this, but anyway. Until the profiler is implemented, you can try [bugger](https://npmjs.org/package/bugger). It should have both the debugger and the profiler.
",bajtos,2014-12-04 17:03:08
185,2013-11-07 10:42:57,"I've not had any progress here; The code isn't as clear cut as I'd thought it'd be and my time has been limited whilst changing jobs.
",ThisIsMissEm,2014-12-04 17:03:08
185,2013-11-07 10:54:49,"> The code isn't as clear cut as I'd thought it'd be

I am sorry for that. Could you please provide more details, so that I can make the code better?
",bajtos,2014-12-04 17:03:08
185,2013-11-07 10:58:45,"It's been a while since I've had a chance to look, but the way in which everything ties together. It might just be artifact of how the webkit inspector is built, I'm not sure.
",ThisIsMissEm,2014-12-04 17:03:08
185,2014-12-04 16:32:30,"@3y3 can we close this issue as implemented?
",bajtos,2014-12-04 17:03:08
185,2014-12-04 17:03:08,"Yes!
",3y3,2014-12-04 17:03:08
184,2013-07-30 15:00:19,"When a sourcemap contains windows path separators then a forbidden error message is shown in the node inspector console and the script file in chrome is blank.

This is the error from the node inspector console

<S_CODE_TOKEN>

I always have my coffee-script source files in {project-root}/src
and the javascript files compiled to {project-root}/out

Example paths in source map

<S_CODE_TOKEN>

if I manually change the paths in my source maps to use a unix separator then it works fine.
",pflannery,2013-08-12 09:18:03
184,2013-07-30 15:10:46,"or am I right that sourceRoot and source paths should be relative URL locators. Meaning that coffee-script is outputting invalid source maps on windows?
",pflannery,2013-08-12 09:18:03
184,2013-07-30 16:35:08,"Hi @pflannery, thanks for a bug report.

I don't have bandwidth to deal with it now, I'll look at the issue later this week or next week.

Miroslav
",bajtos,2013-08-12 09:18:03
184,2013-08-05 09:37:51,"> or am I right that sourceRoot and source paths should be relative URL locators. Meaning that coffee-script is outputting invalid source maps on windows?

The [specification](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit) does not explicitly describe the format of ""sourceRoot"" and ""source"" paths, but it is said in other places that locators must be a valid URL.

Could you test whether the native DevTools in Chrome have the same problem? (Include your transpiled .js file from a HTML page, open the page in Chrome and check whether your CoffeeScript source is displayed.)

If Chrome is able to handle Windows paths in source maps, then we should modify Node Inspector to handle them too.
",bajtos,2013-08-12 09:18:03
184,2013-08-06 15:07:53,"I tested using a html page as you suggested and it works so it must be a node inspector bug.

Node can inspect the toplevel file fine but it's once it goes to sub levels is when the issue occurs.

I have uploaded source files with maps to help recreate the problem http://www.speedyshare.com/z674F/ni-recreate-win-bug.zip (the link is at the very top, to the right of the five stars)
",pflannery,2013-08-12 09:18:03
184,2013-08-06 18:04:21,"Thanks for testing it in Chrome with a HTML page. I marked the issue as a bug, I can't promise when I'll have time to fix it.
",bajtos,2013-08-12 09:18:03
184,2013-08-11 09:17:42,"The URL contains a mix of `/` and `\` characters

<S_CODE_TOKEN>

The fix will probably require a change in this [code](https://github.com/node-inspector/node-inspector/blob/master/lib/debug-server.js#L30):

<S_CODE_TOKEN>
",bajtos,2013-08-12 09:18:03
184,2013-08-11 14:35:28,"Yeah its because the ..\.. part of the formatted path is not getting resolved and thus a forbidden error message is thrown.

I've tested the code below and it works. I will make a pull request with the amended code

<S_CODE_TOKEN>
",pflannery,2013-08-12 09:18:03
183,2013-07-29 18:07:09,"See https://github.com/dresende/node-orm2/issues/247
",ChrisCinelli,2013-12-02 13:54:09
183,2013-07-30 16:38:13,"Hi @ChrisCinelli,

thank you for a bug report. Could you please provide a complete (and minimal) source code to reproduce the problem?

Thanks,
Miroslav
",bajtos,2013-12-02 13:54:09
183,2013-12-02 13:54:09,"I am closing the bug as there was no reply for four months.
",bajtos,2013-12-02 13:54:09
182,2013-07-29 09:40:31,"no chance to get this working on win 8 / 64. 

setup 64 runs fine.

localhost/node returns 404

add url rewrite 
localhost/node returns 404

try to repair node-inspector
""you need to install ii7 first""
",thulka,2013-07-29 21:46:44
182,2013-07-29 21:46:44,"poseted this to the wrong project, should go to issnode.
",thulka,2013-07-29 21:46:44
181,2013-07-28 06:07:52,"I am working with node v0.8.4 and node-inspector@0.3.2. Starting with `node --debug-brk myApp.js`

I have some Coffescript compiled in js that I am debugging. When I put a breakpoint some of the variables are not visible when the debugger stop. 

Is it some optimization of node.js (ex: moving the variable outside of a loop)? Can I turn it off in some way?

This is the code : 

<S_CODE_TOKEN>

If I have a breakpoint on `if (err) {` the variable `link` is not visible (either in local variables or in console)
",ChrisCinelli,2013-08-01 07:27:27
181,2013-07-29 05:42:00,"There isn't any optimization making `link` not visible here, since the breakpoint is in the callback of `Search.create` the variable `link` is not in scope at that point, because its a different function. Only variables explicitly captured (or global) are visible. If `Search.create` is synchronous, you can look at ""lower"" frames in the call stack to find the one with `link`, but if its asynchronous it won't be in the call stack anymore. If you'd like to know the `link` that was involved with an `err` I'd recommend capturing it inside the callback; something like:

<S_CODE_TOKEN>
",dannycoates,2013-08-01 07:27:27
181,2013-07-29 09:23:33,"Interesting...

So what I get from your comment and what I tested in this code:

<S_CODE_TOKEN>

If I put a breakpoint on console.log, I am not be able to inspect the value of c
But if I use:

<S_CODE_TOKEN>

Now when I am stopped on console.log, I can magically inspect the value of c.

I expected that I can always see the value of a variable used outside of the current closure.

This behavior means that at debug time if I want to check what is a value of a variable in an external closure I need to go to change the code. It feels a little inconvenient...
",ChrisCinelli,2013-08-01 07:27:27
181,2013-08-01 07:27:27,"@ChrisCinelli I am afraid this is the way how Javascript is designed (see e.g. [this article on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures)) and we can't do anything about it in node-inspector.

I am closing the issue.
",bajtos,2013-08-01 07:27:27
181,2013-08-01 08:07:45,"I tested with Chrome and it behaves the same. But on Safari, I can actually see the content of c if I put a breakpoint on console in: 

<S_CODE_TOKEN>

It may be an optimization of V8.
From a functional point of view there is no difference to have or not c accessible in the function if c is not used. But it makes a difference in debug. I guess I usually had been using console.log(variable) that make it visible so I did not notice it before. Well anyway, not a lot that you can do without changing V8... 
",ChrisCinelli,2013-08-01 07:27:27
180,2013-07-26 12:37:14,"Is there any way to provide extensions?  From memory, there's enough extension goop in web inspector that something could be cobbled together.  It doesn't need to work like Chrome - no need to only support inspector extensions only as Chrome extensions - I should be able to add an extension as a node package, I guess.

I'd like to add some profiling, like [nodprof](https://github.com/pmuellr/nodprof).  And a module explorer.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/993536-add-support-for-extensions-plugins?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F195817&utm_medium=issues&utm_source=github).
</bountysource-plugin>
",pmuellr,
180,2013-07-26 12:51:46,"Node Inspector doesn't support extensions at the moment. Adding back a profiler tab is definitely on our radar. DevTools already have a nice UI for profiling, all we need is to implement backend.

I don't think it makes sense to add support for extensions only because of missing profiler. Do you have any other extensions in mind?
",bajtos,
180,2013-07-26 15:50:29,"> Do you have any other extensions in mind?

module explorer

My understanding is that there are a number of interesting extensions for Chrome Dev Tools.  Which are likely browser-based, and not of interest in a node debugger.  But that at least points out there is are people willing to extend the debugger.
",pmuellr,
180,2013-07-26 15:53:38,"> module explorer

Could you please go into more detail? What will that module do, what will it help you with?
",bajtos,
180,2013-07-26 16:09:50,"Rather than try to explain and elaborate on an idea I haven't fully thought out, here are some examples of extensions for Chrome Dev Tools out in the wild, to give you a flavor of how folks have extended Web Inspector today.

http://addyosmani.com/blog/devtools-extensions-for-webapp-developers/
",pmuellr,
180,2014-12-18 12:49:57,"I am closing this issue, since there was not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,
180,2014-12-18 12:51:54,"This is an active issue for me. I will work on the implementation.
",3y3,
180,2015-03-27 18:28:21,"Ok guys, as soon as the new frontend #492 is merged, I'll start working on the plugin system as described by @3y3 in #582.
",marcominetti,
180,2016-01-21 19:50:35,"I'm looking to extend node-inspector by building my own DevTool extensions. Are we any closer to this? It looks like since 3 years ago the Profiles tab found it's way in.
",nascarjake,
179,2013-07-26 12:32:12,"You should add a new panel, at the end of the panel list, for links to this project.  And maybe some hints/tips/etc.
",pmuellr,2014-12-18 12:49:49
179,2014-12-18 12:49:49,"I am closing this issue, since there was not enough people asking for this enhancement. We can reopen it again later when there is more demand and/or there is a person willing to contribute the implementation.
",bajtos,2014-12-18 12:49:49
178,2013-07-25 15:45:05,"The new update to node-inspector looks fantastic. One issue I noticed is that if I bring up the ""search by filename"" dialog using cmd-O, then hitting ESC doesn't dismiss the dialog as it does on the Chrome dev tools. It deactivates the dialog and switches focus away from it, but the dialog stays there in the foreground. 
",kevindente,2013-07-26 15:52:31
178,2013-07-26 12:27:13,"I am not able to reproduce the problem on my machine. What browser & version are you running? 

Could you please check DevTools console after hitting ESC for any (error) messages that could bring more light into the issue?
",bajtos,2013-07-26 15:52:31
178,2013-07-26 15:52:31,"My bad - looks like it was Vimium interfering with it. 
",kevindente,2013-07-26 15:52:31
177,2013-07-25 06:29:37,"Add a chain of configuration files, so that it's possible to e.g. enable saveLiveEdit without touching the global config file.

We should implement at least these options/locations:
- $HOME directory (~/.node-inspector.json or ~/.node-inpectorrc)
- command-line arguments

A nice to have option is to support per-debugged-project configuration (when debugging ~/src/myapp/bin/app.js, node-inspector will check for ~/src/myapp/.node-inspector.json).

The implementation can be based on [rc module](https://npmjs.org/package/rc).
",bajtos,2013-09-03 09:30:46
177,2013-07-26 12:17:42,"I tend to plan for the future by having ~/.fooBlatz directories, and then maybe a config.json or so in there.  So, I'd likely do ~/.node-inspector/config.json has a global config file.

${PWD}/.node-inspector.json as a per-directory config file sounds good
",pmuellr,2013-09-03 09:30:46
177,2013-07-30 05:09:23,"+1 for command line arguments. I already have too many (*.json) config files.
",dmmalam,2013-09-03 09:30:46
177,2013-08-01 14:39:41,"@3y3 Please send a pull request with the proposed change, so that we can mode the discussion there. My first objection is that I don't like to have all this command-line vs. config-file logic inside node-inspector, I am sure there is a module that can handle that for us (e.g. rc mentioned above).
",bajtos,2013-09-03 09:30:46
177,2013-09-03 09:30:31,"Fixed by @3y3 in 5e78ed4.

> A nice to have option is to support per-debugged-project configuration (when debugging ~/src/myapp/bin/app.js, node-inspector will check for ~/src/myapp/.node-inspector.json).

Per-project configuration was not implemented. 

However, one can put .node-inspectorrc in the project root and start Node Inspector from the project directory to get the same behaviour.
",bajtos,2013-09-03 09:30:46
176,2013-07-24 22:52:45,"This may be related to https://github.com/node-inspector/node-inspector/issues/161, but I expect it may be related to installing non-globally.

The debug interface comes up empty. The structure is there, e.g., `<body class=""detached inactive"" id=""-webkit-web-inspector"">...</body>`, but no content. There are also no errors in the console.

I'm using the inspector on a cross-compiled node deployment so I can't install globally (I need the files in the target filesystem not the host filesystem and I can't compile on the target directly--nor can I use npm on the target.)

So I install with 
    npm install --arch=arm node-inspector

It seems to install fine, with just one warning:
    npm WARN prefer global node-inspector@0.3.2 should be installed with -g
    node-inspector@0.3.2 node_modules/node-inspector
    ├── async@0.2.9
    ├── glob@3.2.6 (inherits@2.0.0, minimatch@0.2.12)
    └── express@3.2.6 (methods@0.0.1, fresh@0.1.0, range-parser@0.0.4, cookie-signature@1.0.1, buffer-crc32@0.2.1, cookie@0.1.0, debug@0.7.2, commander@0.6.1, mkdirp@0.3.4, send@0.1.0, connect@2.7.11)

And it seems to run fine:
    node/node_modules/node-inspector/bin # node inspector.js --web-host=192.168.0.101 &
    node/node_modules/node-inspector/bin # Node Inspector v0.3.2
    info  - socket.io started
    Visit http://192.168.0.101:8080/debug?port=5858 to start debugging.

But, as mentioned, the UI is empty with no obvious way to trigger anything. FWIW, the network queries all load, except for ws://192.168.0.101:8080/socket.io/1/websocket which never responds. Which seems odd because socket.io reports starting correctly when I run node inspector.
",jandrieu,2014-02-20 17:59:03
176,2013-07-25 04:51:28,"> FWIW, the network queries all load, except for ws://192.168.0.101:8080/socket.io/1/websocket which never responds. Which seems odd because socket.io reports starting correctly when I run node inspector.

This probably means that websockets are not working correctly on your ARM platform. Please try to run a simple websocket demo (e.g. [this one](http://psitsmike.com/2011/09/node-js-and-socket-io-chat-tutorial/)) to verify the assumption.

As a temporary workaround, try to change the transport configured for socket.io to something else:

<S_CODE_TOKEN>
",bajtos,2014-02-20 17:59:03
176,2013-07-26 01:36:21,"I have websockets working in the app I'm debugging (using sockets.io), so I'm wondering what's different in the configuration. I'll try the work around you mention.
",jandrieu,2014-02-20 17:59:03
176,2013-08-14 18:02:39,"@jandrieu Have you had any success with my work-around?
",bajtos,2014-02-20 17:59:03
176,2014-02-20 17:59:03,"Closing due to inactivity.
",bajtos,2014-02-20 17:59:03
175,2013-07-24 04:47:25,"I am using node-inspector to debug coffeescript.
I can edit and save javascript files 
(after setting ""saveLiveEdit"": true, in config.json)

Is it possible to do the same with coffeescript?

also, is there a better place to set saveLiveEdit to true other
than the global file for node-inspector?
",jots,2013-07-25 06:31:45
175,2013-07-24 05:41:00,"Hi @jots,

Thank you for your feedback.

> I can edit and save javascript files 
> (after setting ""saveLiveEdit"": true, in config.json). Is it possible to do the same with coffeescript?

It is not possible to save non-javascript sources, it's a limitation of Google's DevTools front-end :(

> also, is there a better place to set saveLiveEdit to true other than the global file for node-inspector?

Not yet. What location would work well for you? I am thinking about adding a command-line option or perhaps adding local config files: per-user (`~/.node-inspector.json`) or even per-project (`src/myapp/.node-inspector.json`).
",bajtos,2013-07-25 06:31:45
175,2013-07-24 06:44:55,"Thanks for the info @bajtos .
I like ~/node-inspector.json overridden by src/myapp/.node-inspector.json overridden by command line.

hopefully devtools front-end will allow for saving of non .js in the near future.

speaking of which, I had an idea which i'm guessing you already have had:
it would be neat if chrome devtools had a ""tab"" for node-inspector, so don't have
to open up a new window.  just shift-ctrl-j and there is the node inspector ""tab"" in
the devtools, similar to how gruntjs devtools tab works:
https://github.com/vladikoff/grunt-devtools

thanks again for your work on node-inspector, it's awesome.
",jots,2013-07-25 06:31:45
175,2013-07-24 08:10:34,"> it would be neat if chrome devtools had a ""tab"" for node-inspector, so don't have
> to open up a new window. just shift-ctrl-j and there is the node inspector ""tab"" in
> the devtools, similar to how gruntjs devtools tab works:
> https://github.com/vladikoff/grunt-devtools

The current node-inspector's philosophy is to serve the front-end as an HTML page, which potentially allows you to run node-inspector in other browsers or even embed it in another web application. Nonetheless other node debuggers prefer to reuse DevTools in the browser, so I am considering to support that in node-inspector too. In which case a new node-inspector tab would be great.

I am very grateful for the link on grunt-devtools, as I am already pondering an idea of adding a tab for node-specific things like the length of event-loop queue, etc.
",bajtos,2013-07-25 06:31:45
175,2013-07-24 08:31:04,"BTW if you'd like to automate the process of starting a debugging session, you could check out our node distro [1]. It comes with a swiss-army tool called `slnode` [2], which allows you to setup debugging session using a single command:

<S_CODE_TOKEN>

It will:
- Start the application in debug mode.
- Start node-inspector.
- Open node-inspector page in your default browser.

[1] http://strongloop.com/products/resources#?t=getting-started
[2] http://strongloop.com/products/resources#?t=cli
",bajtos,2013-07-25 06:31:45
175,2013-07-24 08:56:02,"I will check out slnode for sure.

In the meantime, I made a proof of concept devtools extension that has a node-inspector iframe:
https://github.com/jots/devtools-extension

of course your node-inspector has to be running already.

I made panel.html an options page as well, so you can debug it with normal devtools.
When viewing your list of extensions, you should see ""options"" under DevToolsPanel click it
and you will be viewing the page and can inspect elements etc...
I found that trick here; http://codemadesimple.wordpress.com/2012/11/15/debug-chrome-dev-tools-panel/
",jots,2013-07-25 06:31:45
175,2013-07-25 06:31:45,"I have created issue #177 for the local configuration feature.

I am afraid I won't have time to look at the custom node-inspector tab anytime soon.
",bajtos,2013-07-25 06:31:45
174,2013-07-23 08:50:58,"Fixed the way how we detect the main application file for two cases:
  `node .` (run the local application)
  `node --debug` (start an interactive REPL session)

Fixed also other issues that prevented debugging of REPL sessions.

@Schoonology please review
",bajtos,2013-07-24 09:07:35
174,2013-07-23 21:09:19,"Approved.
",Schoonology,2013-07-24 09:07:35
173,2013-07-22 13:02:06,"I manage to run the node.js and the browser but I cant see the js files
I see only two tabs, Sources and console (no scripts)

I'm using safari.

I can pause, continue, even step but it wont show me any files, and the call stack control is empty 

please help  - thanks

here is the script I'm using
# !/bin/bash

_TCP_PORT=`jot -r 1 10000 65000`
while :
do
    # Check to see if this port is allocated
    lsof -i 4TCP:$_TCP_PORT || break
    _TCP_PORT=`jot -r 1 10000 65000`
done
node-inspector --web-port=$_TCP_PORT &
python -c ""import webbrowser ; webbrowser.open('http://localhost:$_TCP_PORT/debug?port=5858')""
# node --debug-brk $@

node --debug  $@
# I recommend putting this in your ~ or ~/scripts directory (however you organize your homedir) and aliasing it a la
# alias inspect=""~/inspect.sh $@""
# Then you can run commands like this:
# inspect server.js --arg1 --arg2

and running it 

./inspect.sh aaa/bbb/main.js

don’t see any errors

can someone help me ?
",nirmelamoud,2013-07-22 18:15:43
173,2013-07-22 13:44:19,"Hello @nirmelamoud,

What version of node-inspector are you running? Make sure you have a recent one (0.3.x).

Can you open ""file navigator"" sidebar? You should see at least node.js internal files there (e.g. `module.js`, `node.js`, etc.). Please see [the manual from Google](https://developers.google.com/chrome-developer-tools/docs/javascript-debugging#sources-panel) for a screenshot describing various UI controls. File navigator is the first button from the left.

You can also try to run your node with `--debug-brk` option to make it stop at the first line. Does it make any difference?

Are there any (error) messages logged to console? Check also console of Chrome Developers Tool (you have to open Developer Tools from your browser to access that console).
",bajtos,2013-07-22 18:15:43
173,2013-07-22 14:57:09,"thank you for answering so promptly 

I installed it today so I have the latest one (0.3)

yes I can see the node.js internal files (at least names I see nothing on the left side (source) - only when run with debug-brk

I can open the file navigator see the sources / content etc tabs but no file appear on the sources tab it is just empty 

I started with debug-brk and  it stop somewhere,  in module.js but I see an empty file on the left side

no errors on the console (terminal)

I'm working with safari, how do I access the console from the browser or do I have to use chrom to make node inspector work ?

thanks

From: Miroslav Bajtoš [mailto:notifications@github.com] 
Sent: Monday, July 22, 2013 9:44 AM
To: node-inspector/node-inspector
Cc: nirmelamoud
Subject: Re: [node-inspector] cant see any js code on MacOS (#173)

Hello @nirmelamoud https://github.com/nirmelamoud ,

What version of node-inspector are you running? Make sure you have a recent one (0.3.x).

Can you open ""file navigator"" sidebar? You should see at least node.js internal files there (e.g. module.js, node.js, etc.). Please see the manual from Google https://developers.google.com/chrome-developer-tools/docs/javascript-debugging#sources-panel  for a screenshot describing various UI controls. File navigator is the first button from the left.

You can also try to run your node with --debug-brk option to make it stop at the first line. Does it make any difference?

Are there any (error) messages logged to console? Check also console of Chrome Developers Tool (you have to open Developer Tools from your browser to access that console).

—
Reply to this email directly or view it on GitHub https://github.com/node-inspector/node-inspector/issues/173#issuecomment-21344643 .  https://github.com/notifications/beacon/zgJeLf2qNSX-HU-CsjNSIj1fGTe62fC-BlvIDZ_q_xZlURp97VHWiknw_Lg-WH3H.gif 
",nirmelamoud,2013-07-22 18:15:43
173,2013-07-22 15:33:41,"> I'm working with safari, how do I access the console from the browser or do I have to use chrom to make node inspector work.

I am afraid Safari is no longer supported after we upgraded to Google's Blink, you have to use Chrome.

I hope I'll be able to find some time to investigate and fix the inspector so that it works in Safari again.
",bajtos,2013-07-22 18:15:43
173,2013-07-22 16:51:24,"thank you, I installed chrom, and now all is working,

Someone should update the supported browsers page.

thank you !

From: Miroslav Bajtoš [mailto:notifications@github.com] 
Sent: Monday, July 22, 2013 11:34 AM
To: node-inspector/node-inspector
Cc: nirmelamoud
Subject: Re: [node-inspector] cant see any js code on MacOS (#173)

I'm working with safari, how do I access the console from the browser or do I have to use chrom to make node inspector work.

I am afraid Safari is no longer supported after we upgraded to Google's Blink, you have to use Chrome.

I hope I'll be able to find some time to investigate and fix the inspector so that it works in Safari again.

—
Reply to this email directly or view it on GitHub https://github.com/node-inspector/node-inspector/issues/173#issuecomment-21352437 .  https://github.com/notifications/beacon/zgJeLf2qNSX-HU-CsjNSIj1fGTe62fC-BlvIDZ_q_xZlURp97VHWiknw_Lg-WH3H.gif 
",nirmelamoud,2013-07-22 18:15:43
173,2013-07-22 18:15:30,"Good point, I forgot about the wiki page. It is up to date now.
",bajtos,2013-07-22 18:15:43
172,2013-07-22 08:01:06,"Added a startup hook that shows the main application file in case no files are opened.

Created a public API for embedders, added function buildInspectorUrl().

/cc: @Schoonology please review.

Note: the first implementation was based on `#show={fileUrl}` parameter, therefore it was highly desirable to add a public API for embedders. After I have reworked the feature to always open the main file, the API is not that important, but it's still nice to have it.
",bajtos,2013-07-22 16:20:09
172,2013-07-22 16:02:09,"Awesome stuff. Approved.
",Schoonology,2013-07-22 16:20:09
171,2013-07-18 06:53:56,"I'm reading in a file for a test framework, and at the top of one of my tests I have the `debugger;` keyword.  Node inspector stops on the `eval(code)` line, but stepping into the function fails to show the code being evaluated.
",jsdevel,2013-07-19 06:15:32
171,2013-07-18 08:29:40,"@jsdevel: Could you please attach a (minimal) test-case that I can run myself to reproduce the problem?
",bajtos,2013-07-19 06:15:32
171,2013-07-19 06:00:32,"Absolutely!

I'm able to reproduce with the following:

In a directory, save the following to a file named `test-eval.js`:

<S_CODE_TOKEN>

As a sibling in the same directory, save the following to a file named `codeToEval.js`:

<S_CODE_TOKEN>

Follow these steps:
1. `node --debug-brk test-eval.js` in one terminal window
2. `node-inspector &` in another terminal window
3. View the specified url in chrome.
4. Step through the code until you reach the eval statement.
5. Now attempt to step into the `eval(code)` call.

The interesting part, is that the `debugger;` statements are reached in the evalled code, as the console pauses on each step when clicking run; however, I'm unable to view the source of the evalled code.

I did find something from the chrome dev tools documentation that seemed promising:
_""Note: Notice the ""//@ sourceURL=dynamicScript.js"" line at the end of dynamicScript.js file. This technique gives a name to a script created with eval, and will be discussed in more detail in the Source Maps section. Breakpoints can be set in dynamic JavaScript only if it has a user supplied name.""_[source](https://developers.google.com/chrome-developer-tools/docs/javascript-debugging)

This doesn't seem to be too helpful however, if the evalled code is created dynamically which is often the case.
",jsdevel,2013-07-19 06:15:32
171,2013-07-19 06:04:13,"Wait,  Freaking Ureeka!!  Doing exactly that _fixed_ the issue to some degree.

`codeToEval.js` now looks like this:

<S_CODE_TOKEN>

However,  there are still issues.  The evalled code _does_ appear as a new script tab in the window, however, it's fairly sketchy and I can't step through it.
",jsdevel,2013-07-19 06:15:32
171,2013-07-19 06:08:47,"Made a bit of progress, but seeing the following error in the window where I started node-inspector as soon as I get to the evalled code:

<S_CODE_TOKEN>
",jsdevel,2013-07-19 06:15:32
171,2013-07-19 06:15:31,"OK.  Sorry for all the comments.  I got it to work reasonably well!!

The trick appears to be to just wait for a while.  I've attached a screenshot with a successful session where I was able to step through the evalled code appropriately by stepping into the eval statement once, and then waiting for about 10 seconds or so.
![2013-07-18-231114_1280x900_scrot](https://f.cloud.github.com/assets/2605980/824147/89320120-f03a-11e2-9aa1-3e516d4d3d03.png)
",jsdevel,2013-07-19 06:15:32
171,2013-07-23 08:40:44,"Hi @jsdevel, thank you for investigating the issue and describing a solution. 

I like the idea of using source maps to let V8 know what file you are debugging, it's very elegant.

Still, you should be able to debug eval-ed code out of the box, even without source maps.

In the screenshot below, you can see how my node-inspector looks like after stepping into `eval(code)`. Notice the yellow background - it's a sign that the code has no file associated with it and it lives in V8 VM only.

![image](https://f.cloud.github.com/assets/1140553/840440/b92f863c-f372-11e2-8ad1-a8d0b5aec3cf.png)

In both cases (with and without sourceMap), the debugger and inspector remained very responsive, I didn't have to wait at all.

What version of node are you running? Is there anything else in your setup/environment that could explain the difference?
",bajtos,2013-07-19 06:15:32
170,2013-07-09 20:51:17,"Hi,

Thanks for the great tool. I was wondering if it is possible to view node.js source files while stepping through the code. Is there a particular location to put them so that node-inspector can pick them up, or do I have to build node from source for it to work?
",ashimaathri,2013-07-23 06:20:35
170,2013-07-18 09:39:11,"Hi @ashimaathri, 

Internal node.js source files have to be loaded into V8 (via `require()`) before node-inspector can display them. Once they are loaded, you will find them listed in the Navigator panel in `(no domain)` section.

Please let me know if works for you so that I can close the issue.

Miroslav

P.S. There was a new version released this week, make sure you are not using an older version from 0.2.x series.
",bajtos,2013-07-23 06:20:35
170,2013-07-22 23:50:48,"Now I'm able to step through node.js source files, but I didn't explicitly require them and I don't know where node-inspector is picking it up from. 
",ashimaathri,2013-07-23 06:20:35
170,2013-07-23 06:20:35,"@ashimaathri Node uses it's internal modules for starting your application (`module.js`, `fs.js`, etc.). So even if you don't require any module, some of them are loaded during startup.

The internal modules are compiled into the node executable and loaded into V8 engine at runtime. Node Inspector is picking the source code from V8 engine. This way we have always the correct version of the code.
",bajtos,2013-07-23 06:20:35
170,2013-07-23 12:53:51,"@bajtos Thanks for the information.
",ashimaathri,2013-07-23 06:20:35
169,2013-07-05 21:09:24,"Addresses issue #168.

I made the changes directly in devtools.js. I'm not sure what is happening with the update-ui branch, but it appears to represent what is out on the node repositories as the latest version (0.2.0beta4). All of the individual files from the master branch have been collapsed down to just devtools.js for some reason… Hopefully this pull request makes sense, please let me know if there is something I should be doing differently.
",mpderbec,2013-07-17 17:18:43
169,2013-07-17 17:18:43,"front-end was upgraded to the lastest DevTools version, Ctrl+B works out of the box now.
",bajtos,2013-07-17 17:18:43
168,2013-07-05 20:50:44,"Unlike the Chrome debugger, you can't toggling a breakpoint on the current line using the Ctrl+B keyboard shortcut.
",mpderbec,2013-07-17 15:20:32
168,2013-07-17 08:07:31,"Hi @mpderbec,

Thank you for the pull requests, I appreciate your effort.

We have updated node-inspector to use the latest DevTools front-end from Blink (Google's fork of WebKit), Ctrl+B now works out-of-the-box.

Please upgrade to the latest version (0.3.1) and let me know if it works correctly for you.

Miroslav
",bajtos,2013-07-17 15:20:32
168,2013-07-17 15:20:32,"Okay great, will do.
",mpderbec,2013-07-17 15:20:32
167,2013-06-20 21:11:23,"I am trying to step through code in the passportjs module, I can set a breakpoint but when I  hit the step into or step over button I lose any ability to continue or step further.
",newmanw,2013-08-14 18:01:26
167,2013-06-20 21:24:31,"Scratch that I cannot step in any function.  Running version 0.10 of node, I have updated node-inspector.  Running in Chrome, and Safari.
",newmanw,2013-08-14 18:01:26
167,2013-07-18 09:40:40,"Please upgrade to the latest version of node-inspector. If the issue still persists, send us a test-case (full source code) where we can reproduce the problem.
",bajtos,2013-08-14 18:01:26
166,2013-06-10 16:36:23,"Is there a setting to configure how the editor expands tab characters? I see single tab characters expanded to 8 space characters when I use node-inspector in chrome or safari.
",glennschler,2013-07-18 09:42:34
166,2013-07-18 09:42:33,"You should be able to configure tab with in the latest version published this week. Open Settings by clicking on the gear icon in the bottom-right corner and modify ""Indentation"" item. You can choose between 2, 4, 8 spaces and tabs. 
",bajtos,2013-07-18 09:42:34
165,2013-06-10 09:10:13,"If I run a coumpounJS application, the controller files are not loaded in debugger. 

Please let me know how to load it. 
",rkvsraman,2013-07-24 17:58:46
165,2013-06-11 11:20:15,"+1.  I have the same problem.
",judsonmitchell,2013-07-24 17:58:46
165,2013-06-11 11:27:47,"The files load if you create the app and the scaffold with --noeval switch. 
",rkvsraman,2013-07-24 17:58:46
165,2013-07-24 17:58:46,"Node-inspector can't do much when the files are loaded via `eval()`.

You should fill an issue to compoundjs and ask them to append a `sourceURL` line at the end the evaluated code:

<S_CODE_TOKEN>

See this blogpost for more details: http://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/
",bajtos,2013-07-24 17:58:46
164,2013-06-06 18:27:29,"I can't get node-inspector to stop at debugger statements in a spec file that's being executed by Mocha (running in --debug-brk mode).

I have a [simple test case](https://github.com/tjlahr/node-debug-demo) that demonstrates this.

I'm not 100% positive that the problem is happening in node-inspector and not Mocha. Does anybody have some tips on how to isolate what's going on here?
",tjlahr,2013-07-18 09:43:24
164,2013-06-07 06:59:33,"Hi @tjlahr,

I am working on a new version of node-inspector that uses the latest front-end from Google Blink (clone of WebKit). Your test-case works correctly in my version. Could you please try it yourself and let me know if it works for you too?

Link to my node-inspector version: [strongloop/node-inspector](/strongloop/node-inspector)
",bajtos,2013-07-18 09:43:24
164,2013-06-10 15:39:18,"@bajtos node-inspector pauses normally for me in your fork
",tjlahr,2013-07-18 09:43:24
164,2013-07-18 09:43:24,"Our fork was merged back and released as 0.3, I am closing the issue.
",bajtos,2013-07-18 09:43:24
163,2013-05-03 20:24:27,"the parsing in https://github.com/dannycoates/node-inspector/blob/master/bin/inspector.js#L10-L24 doesn't complain in the use case

<S_CODE_TOKEN>

It doesn't complain and it doesn't do the Right Thing (neither the if nor the else if clause triggers). 

May I suggest using a proper getopt library or something like `commander`?
",Niggler,2013-09-03 09:25:42
163,2013-08-14 18:04:41,"This issue might get fixed as a side effect of #191.
",bajtos,2013-09-03 09:25:42
163,2013-09-03 09:25:42,"Fixed by 5e78ed4 (pull request #191).
",bajtos,2013-09-03 09:25:42
162,2013-05-03 07:53:36,"When the debugged application is restarted, node-inspector restores all
breakpoints from the debugging session.

When a new script is loaded, the browser GUI is updated and the new script is added to the list of scripts.

These two changes enable debugging of module-loading process:
1. Start debugged application and node-inspector.
2. Set breakpoint in the module you want to debug.
3. Restart the application with `node --debug-brk` while keeping node-inspector running.
4. Reload node-inspector GUI in browser - this step restores breakpoints in modules-to-be-loaded
5. Resume execution and wait until your breakpoint is hit
",bajtos,2013-06-14 11:25:56
161,2013-05-02 13:56:49,"Hi,

Node-inspector is not working in node v0.10.x. So I had to move back to 0.8.x. Has anybody had any such issues.

Thanks
",cooolbasha,2013-08-05 06:43:53
161,2013-05-03 20:08:32,"Not working for me with 0.10.x either
",monteslu,2013-08-05 06:43:53
161,2013-05-09 16:29:19,"Same here. Running `node --debug` shows:

<S_CODE_TOKEN>

Then launching the latest node-inspector shows:

<S_CODE_TOKEN>

Scripts and Console tabs are empty when opening in chrome 28.0.1500.3.

node 0.10.4
",dizzib,2013-08-05 06:43:53
161,2013-05-09 18:17:22,"Actually it's working! I didn't realise you had to click the tiny 'show navigator' arrow in chrome to load the scripts :)

Still not sure why the console shows 0.0.0.0 and not 127.0.0.1.
",dizzib,2013-08-05 06:43:53
161,2013-05-09 19:01:39,"I get the following in my console (web inspector on the web inspector) when trying to load the debug page.

<S_CODE_TOKEN>

I'm guessing it's teh Uncaught Type Errors that are causing the process to bomb. Here are the stack traces:

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",luv2code,2013-08-05 06:43:53
161,2013-05-28 18:56:06,"Not working for me if I start with `--debug-brk`, I see my script wrapped in:

<S_CODE_TOKEN>

with the current point of execution at the first line, hitting `continue` does nothing...
",eahutchins,2013-08-05 06:43:53
161,2013-05-28 23:13:09,"@luv2code - Also getting this. Profiling/heap snapshots don't work at all because of them
",contra,2013-08-05 06:43:53
161,2013-05-30 16:33:50,"You must update node-inspector (to update its deps) after updating to node 0.10

<S_CODE_TOKEN>
",glennschler,2013-08-05 06:43:53
161,2013-06-27 13:39:00,"I'm getting same errors as luv2code. Linux, with updated node-inspector:

<S_CODE_TOKEN>
",scottsd,2013-08-05 06:43:53
161,2013-07-03 20:31:08,"Got the same error.

Node v0.10.11 
Mac OS 10.7.5
",LoicMahieu,2013-08-05 06:43:53
161,2013-07-11 15:54:30,"Hi,

I'm pretty new to node-inspector. I have upgraded to v0.10.13 and the latest node-inspector. I do the following in two different terminals:

<S_CODE_TOKEN>

I can setup breakpoints in my code, then click continue (button with the => symbol). When I issue an HTTP request, I see this in the response:

<S_CODE_TOKEN>

I'm not sure if I'm doing something wrong, but after trying several options, I'm at a loss. I just can't get the breakpoints to work. Any ideas? Thanks!
",tciuro,2013-08-05 06:43:53
161,2013-07-24 18:00:27,"Please upgrade to the latest 0.3 version and let me know if the issue persists.
",bajtos,2013-08-05 06:43:53
161,2013-08-01 22:37:26,"On 0.10.15 (OS X) getting crash on start with fresh node-inspector install / update from npm:

<S_CODE_TOKEN>
",jezell,2013-08-05 06:43:53
161,2013-08-02 06:19:36,"@jezell It seems that your install/update have not installed the latest (0.3.x) version of node-inspector. The stack trace shown above contains code that does not exist in the current version.

<S_CODE_TOKEN>
",bajtos,2013-08-05 06:43:53
161,2013-08-04 07:50:51,"You're right. Thanks. Somehow had a really old version in /usr/local/bin that was executing instead of the one I installed via npm.
",jezell,2013-08-05 06:43:53
161,2013-11-12 18:03:48,"same with me 
breakpoints do not work in chrome
everything shows up 

just can't set breakpoint 

i get an error 0 on node --debug app.js console
",huntw999,2013-08-05 06:43:53
161,2013-11-13 19:13:49,"@huntw999 Please fill a new issue and include following details:
- What version of Node Inspector are you using? 
- Can you reproduce the issue in Node v0.8 or with Node Inspector v0.3.x?
",bajtos,2013-08-05 06:43:53
160,2013-05-02 13:55:20,"Hi,

Is there plan for coffeescript support

Thanks
",cooolbasha,2013-07-24 18:04:20
160,2013-07-24 18:04:20,"The latest 0.3 version supports source maps.
",bajtos,2013-07-24 18:04:20
159,2013-04-29 16:24:02,"I have an up to date copy of node-inspector and I'm using chrome v26.0.1410.64. When I hit ctrl + o, chrome opens a ""select file"" dialog, rather than the autocomplete window like the normal chrome debugging tools do.
",pjschmidt3,2013-07-24 18:08:38
159,2013-07-24 18:08:38,"Please upgrade to the latest 0.3 version, the issue should be fixed there.
",bajtos,2013-07-24 18:08:38
158,2013-04-14 04:27:17,"http://quickpeople.wordpress.com/2013/04/14/a-plea-for-better-open-source-etiquette/

(I hope it isn't ""won't fix"")
",Ivanca,2013-04-15 00:05:41
157,2013-04-07 20:59:56,"I've updated nodejs and node-inspector to the latest version. When I try to access the landing page of the node-inspector the browser loads only the headline partially and the rest of the page stays white. The log file shows that node inspector crashed with the following error message:

<S_CODE_TOKEN>

**I use the follwing setup:**
- Ubuntu 12.04
- Node Js  v0.10.3
- node inspector 0.2.0beta4 from npm repository
- Google Chrome 23.0.1271.95
",sbrinkmann,2013-08-09 14:18:58
157,2013-07-24 17:46:21,"Please upgrade to the latest 0.3.x version and let me know if the issue is still there.
",bajtos,2013-08-09 14:18:58
157,2013-09-03 11:26:46,"I am having the same issue:
- ubuntu 12.04
- node 0.10.12
- node inspector 0.3.4
- Google Crhome 28.0.1500,52

$ node-inspector 
   info  - socket.io started
visit http://0.0.0.0:8080/debug?port=5858 to start debugging
^[[19~
http.js:704
    throw new Error('Can\'t set headers after they are sent.');
          ^
Error: Can't set headers after they are sent.
    at ServerResponse.OutgoingMessage.setHeader (http.js:704:11)
    at ServerResponse.res.setHeader (/usr/lib/node_modules/node-inspector/node_modules/connect/lib/patch.js:62:20)
    at /usr/lib/node_modules/node-inspector/node_modules/connect/lib/middleware/static.js:168:11
    at Object.oncomplete (fs.js:107:15)
",cesarob,2013-08-09 14:18:58
157,2013-09-03 13:23:49,"See issue #202 for more info.
",bajtos,2013-08-09 14:18:58
156,2013-04-05 21:27:27,"Got a debugger line at the top of a function. NI is hitting it, but I have to F10 to see the line of code or scroll through the scripts pane to find it. 

Ideally NI would show the current line whenever a debugger line is hit. 
",jcollum,2013-07-26 10:52:54
156,2013-07-24 17:45:10,"Can you reproduce the issue with the latest 0.3.x version of node-inspector?
",bajtos,2013-07-26 10:52:54
155,2013-04-04 16:17:37,"node-inspector 0.2.0beta4
node v0.10.2
osx 10.8.3
Chrome Canary Version 28.0.1464.0 canary

There seems to be no gutter where breakpoints can be added. Also, navigating to different files has a rendering overlay issue.

![Screen Shot 2013-04-04 at 10 16 04 AM](https://f.cloud.github.com/assets/482377/339958/261b982a-9d43-11e2-8182-dbe259d225f8.png)
",focusaurus,2013-04-04 16:22:37
155,2013-04-04 16:22:37,"Seems to work OK in regular Chrome though. Version 26.0.1410.43
",focusaurus,2013-04-04 16:22:37
154,2013-04-03 11:42:10,"Here are some suggestions I think will make this work even better:
1. One command to start node app with node-inspector. ex; node-inspector start myserver.js
This will automatically start the app with attached debugger and navigate current browser to dev tools.
2. Another cool thing will be if there is a way to restart the node app straight from the browser so that when I edit code I do not need to restart the server manually.

Just suggestion.
",Zammy,2013-07-24 17:51:36
154,2013-04-03 15:06:49,"I just found https://github.com/remy/nodemon which does something similar but only restarts the app which kills the node-inspector. Maybe if node-inspector can be made to run like a deamon and watch for node processes?
",Zammy,2013-07-24 17:51:36
154,2013-04-04 12:27:29,"Ok I found nodev which is what I want: https://npmjs.org/package/nodev
",Zammy,2013-07-24 17:51:36
154,2013-04-09 16:42:08,"Is this project alive?
",williamxhero,2013-07-24 17:51:36
154,2013-07-24 17:51:36,"@Zammy 
You should be able to restart the debugged process without restarting node-inspector in the new 0.3 version.

As you mentioned in other comments, there are already modules that implements your suggestions. I believe it's better to have multiple smaller modules; each module doing one thing and doing it well. It's better to leave the (re)starting job to them.

> @williamxhero Is this project alive?

Yes :)

StrongLoop took up the challenge and got Danny's permission to maintain the project further on.

Our first contribution was an upgrade to the latest Blink version of Developer Tools. See our blogpost for more information on the new features.
",bajtos,2013-07-24 17:51:36
153,2013-03-29 04:28:17,"node-inspector cannot be used to debug node v0.10.x anymore as breakpoints are not trapped. Upgrading to latest socket.io fixes the problem.
",raymondfeng,2013-03-30 17:51:08
153,2013-03-29 21:52:49,"Thanks, I'll get this merged this weekend
",dannycoates,2013-03-30 17:51:08
153,2013-03-30 17:51:08,"I ended up fixing it another way on the `update-ui` branch, but your code made it quicker for me to find the problem. Thank you!

The latest npm version should work with node 0.10 now (0.2.0beta4)
",dannycoates,2013-03-30 17:51:08
152,2013-03-22 15:32:13,"The version of node-inspector in NPM is broken, if you try to step-into / over any function it simply locks-up. It seems the problem is in the update-ui branch.

To get around this:
Clone the `master` branch from git, do an `npm install` and then `node .\bin\inspector.js` and you might find it starts working again.
",Siyfion,2013-03-30 17:43:40
152,2013-03-22 22:04:52,"This work-around worked for me. Thanks!
",gaygenius,2013-03-30 17:43:40
152,2013-03-28 04:44:59,"I'm new to node.js and try to debug my helloworld program. But after following your suggession, still I didn't get rid of this problem. pls help..
",Bijender,2013-03-30 17:43:40
152,2013-03-28 16:20:34,"@Bijender What version of NodeJS are you using (`node --version` will tell you) and then which version of node-inspector?
",Siyfion,2013-03-30 17:43:40
152,2013-03-28 18:35:41,"Hi Siyfion, I have NodoJS version=v0.10.0 and node-inspector is 0.2.0beta3.
These are the steps I followed
1. I'm using windows 7 and Install the latest version of NodeJS and then created the ""e:\NodeProgramming"" folder where I'm saving my HelloWorld.js program.
2. then I ran the command ""e:\NodeProgramming> npm install -g node-inspector"" and try to debug the HelloWorld.js program where I encountered this problem.
3. Then I took the master branch and saved in  ""e:\NodeProgramming"" folder and try to ran the ""npm install"" which gave me error ""Install could not read dependencies"".
4. Then I ran  ""e:\NodeProgramming> npm install -g node-inspector"" command, which ran successfully.
5. But again I'm facing the same debugging issue.
Please suggest and correct me.
",Bijender,2013-03-30 17:43:40
152,2013-03-28 20:33:01,"@Bijender Okay, you've got a little muddled up.. 

Go to a directory that you are happy to install node-inspector in, then call:
`git clone https://github.com/dannycoates/node-inspector.git`

then to debug you `cd .\node-inspector` and then `node .\bin\inspector.js`
",Siyfion,2013-03-30 17:43:40
152,2013-03-28 21:16:20,"Thanks a lot Siyfion, it's working now.
",Bijender,2013-03-30 17:43:40
152,2013-03-28 21:37:45,"@Bijender No problem, glad I could help.
",Siyfion,2013-03-30 17:43:40
152,2013-03-30 17:43:40,"This should be fixed now, in 0.2.0beta4 on npm
",dannycoates,2013-03-30 17:43:40
151,2013-03-19 18:39:43,"<S_CODE_TOKEN>

Every single time, regardless of the node process run under debug, under the procedure:
1. run `node --debug myscript.js`
2. in separate window, `pgrep -l node | while read x y; do kill -s USR1 $x; done` 
3. `node-inspector --web-port=xxxx` for various xxxx ports
4. go to the http://127.0.0.1:xxxx/debug?port=5858
",Niggler,2013-04-04 16:40:09
151,2013-04-04 15:59:46,"@Niggler skip step 2. If you pass `--debug`, node will run in debug mode and listen for connections on port 5858. USR1 is only needed if you start node _without_ `--debug` and want to have a running node process start debug mode without restarting the process. On my machine if I send USR1 to a node process already in debug mode, the process exits, thus your error.
",focusaurus,2013-04-04 16:40:09
151,2013-04-04 16:40:09,"Ah that appears to work @focusaurus 
",Niggler,2013-04-04 16:40:09
150,2013-03-02 20:37:43,"Doesn't seem to be any activity. Or, am I wrong?
",fakewaffle,2013-03-30 17:31:02
150,2013-03-04 01:05:45,"+1
",aseemk,2013-03-30 17:31:02
150,2013-03-06 10:55:57,"+1
",ZheFeng,2013-03-30 17:31:02
150,2013-03-06 11:35:19,"I have the same question.
",denys,2013-03-30 17:31:02
150,2013-03-07 19:54:32,"+1
",evro,2013-03-30 17:31:02
150,2013-03-15 05:50:57,"+10086
",chongzhi,2013-03-30 17:31:02
150,2013-03-15 20:57:32,"(+1)
",DavidSouther,2013-03-30 17:31:02
150,2013-03-21 04:07:26,"The author did a note on his activity here a month a go: https://github.com/dannycoates/node-inspector/issues/126#issuecomment-13118592

There's also a list of alternatives here: https://gist.github.com/balupton/3944017
",balupton,2013-03-30 17:31:02
150,2013-03-30 17:30:32,"It's not dead, but I'm probably not going to be adding any features or updating the interface anymore. I'm making it work with node 0.10 this weekend. Again, sorry for my absence... life, ya know.
",dannycoates,2013-03-30 17:31:02
150,2013-07-24 09:50:32,"StrongLoop took up the challenge and got Danny's permission to maintain the project further on.

Our first contribution was an upgrade to the latest Blink version of Developer Tools, please checkout the new version (0.3.x) to try the new UI yourself. See [our blogpost](http://blog.strongloop.com/announcing-a-new-and-improved-node-js-debugger/) for more information on the new features.
",bajtos,2013-03-30 17:31:02
150,2013-07-24 10:04:21,"@bajtos, great news! Thank you.
",denys,2013-03-30 17:31:02
150,2013-07-24 13:06:59,"@bajtos, thank you!
",sylvain-hamel,2013-03-30 17:31:02
150,2013-07-24 14:51:15,"@bajtos: agreed, freaking awesome, thank you!!
",aseemk,2013-03-30 17:31:02
150,2013-07-25 15:31:58,"Awesome!
",fakewaffle,2013-03-30 17:31:02
149,2013-03-02 13:15:43,"After update chrome to the latest version, cannot use node-inspector to see root script. 

Previous chrome versions work fine. node-inspector is really helpful, thanks for your great works. :+1: 
",eihero,2013-08-09 14:18:36
149,2013-03-14 04:53:30,"同样的情况。
+1, exactly, also thank you for author's great work.
",EchoFUN,2013-08-09 14:18:36
149,2013-04-20 22:25:06,"I can fix the problem with these simple steps:

Go to a directory that you want to install node-inspector and run:

git clone https://github.com/dannycoates/node-inspector.git

cd .\node-inspector 

node .\bin\inspector.js
",pabloalmunia,2013-08-09 14:18:36
149,2013-07-24 18:05:15,"Please upgrade to the latest 0.3 version and let me know if the problem persists.
",bajtos,2013-08-09 14:18:36
148,2013-02-18 20:23:32,"I guess this is an ongoing issue, but I too can't install this module due to the connect dependency version.

Just for completeness, here's my error output.

% sudo npm install -g node-inspector
Password:
npm http GET https://registry.npmjs.org/node-inspector
npm http 304 https://registry.npmjs.org/node-inspector
npm http GET https://registry.npmjs.org/socket.io
npm http GET https://registry.npmjs.org/async
npm http GET https://registry.npmjs.org/connect
npm http 304 https://registry.npmjs.org/async
npm http 304 https://registry.npmjs.org/connect

npm ERR! Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2"",""2.3.8"",""2.3.9"",""2.4.0"",""2.4.1"",""2.4.2"",""2.4.3"",""2.4.4"",""2.4.5"",""2.4.6"",""2.5.0"",""2.6.0"",""2.6.1"",""2.6.2"",""2.7.0"",""2.7.1"",""2.7.2""]
npm ERR!     at installTargetsError (/usr/local/lib/node_modules/npm/lib/cache.js:486:10)
npm ERR!     at next_ (/usr/local/lib/node_modules/npm/lib/cache.js:436:17)
npm ERR!     at next (/usr/local/lib/node_modules/npm/lib/cache.js:413:44)
npm ERR!     at /usr/local/lib/node_modules/npm/lib/cache.js:406:5
npm ERR!     at saved (/usr/local/lib/node_modules/npm/lib/utils/npm-registry-client/get.js:150:7)
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:230:7
npm ERR!     at Object.oncomplete (fs.js:297:15)
npm ERR! You may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com
npm ERR! 
npm ERR! System Darwin 12.2.0
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd /Users/michael
npm ERR! node -v v0.8.20
npm ERR! npm -v 1.1.12
npm ERR! message No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! message Valid install targets:
npm ERR! message [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2"",""2.3.8"",""2.3.9"",""2.4.0"",""2.4.1"",""2.4.2"",""2.4.3"",""2.4.4"",""2.4.5"",""2.4.6"",""2.5.0"",""2.6.0"",""2.6.1"",""2.6.2"",""2.7.0"",""2.7.1"",""2.7.2""]
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /Users/michael/npm-debug.log
npm not ok

and that log file: 

info it worked if it ends with ok
verbose cli [ 'node', '/usr/local/bin/npm', 'install', '-g', 'node-inspector' ]
info using npm@1.1.12
info using node@v0.8.20
verbose config file /Users/michael/.npmrc
verbose config file /opt/local/etc/npmrc
verbose config file /usr/local/lib/node_modules/npm/npmrc
silly exec /opt/local/bin/node ""/usr/local/lib/node_modules/npm/bin/npm-get-uid-gid.js"" ""nobody"" 20
silly spawning [ '/opt/local/bin/node',
silly spawning   [ '/usr/local/lib/node_modules/npm/bin/npm-get-uid-gid.js',
silly spawning     'nobody',
silly spawning     20 ],
silly spawning   null ]
silly output from getuid/gid {""uid"":-2,""gid"":20}
silly output from getuid/gid 
verbose cache add [ 'node-inspector', null ]
silly cache add: name, spec, args [ undefined, 'node-inspector', [ 'node-inspector', null ] ]
verbose parsed url { pathname: 'node-inspector',
verbose parsed url   path: 'node-inspector',
verbose parsed url   href: 'node-inspector' }
verbose addNamed [ 'node-inspector', '' ]
verbose addNamed [ null, '' ]
silly name, range, hasData [ 'node-inspector', '', false ]
verbose raw, before any munging node-inspector
verbose url resolving [ 'https://registry.npmjs.org/', './node-inspector' ]
verbose url resolved https://registry.npmjs.org/node-inspector
verbose etag ""BGCOVMG94NL7DY63FOUE4BCVG""
http GET https://registry.npmjs.org/node-inspector
http 304 https://registry.npmjs.org/node-inspector
silly get cb [ 304,
silly get cb   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
silly get cb     etag: '""BGCOVMG94NL7DY63FOUE4BCVG""',
silly get cb     date: 'Mon, 18 Feb 2013 20:14:41 GMT',
silly get cb     'content-length': '0' } ]
verbose etag node-inspector from cache
silly name, range, hasData 2 [ 'node-inspector', '', true ]
silly versions [ 'node-inspector',
silly versions   [ '0.0.1',
silly versions     '0.0.2',
silly versions     '0.0.3',
silly versions     '0.0.4',
silly versions     '0.1.0',
silly versions     '0.1.1',
silly versions     '0.1.2',
silly versions     '0.1.3',
silly versions     '0.1.4',
silly versions     '0.1.5',
silly versions     '0.1.6',
silly versions     '0.1.7',
silly versions     '0.1.8',
silly versions     '0.1.9',
silly versions     '0.1.10',
silly versions     '0.2.0beta1',
silly versions     '0.2.0beta2',
silly versions     '0.2.0beta3' ] ]
verbose bin dist [ '0.8-ares1.7.5-DEV-evundefined-openssl1.0.1e-v83.11.10.25-darwin-x64-12.2.0',
verbose bin dist   { shasum: '2adb552da7757ff3d4ec549f5570799355952d20',
verbose bin dist     tarball: 'http://registry.npmjs.org/node-inspector/-/node-inspector-0.2.0beta3.tgz' } ]
verbose caching /Users/michael/.npm/node-inspector/0.2.0beta3/package/package.json
verbose loadDefaults node-inspector@0.2.0beta3
silly resolved [ { name: 'node-inspector',
silly resolved     version: '0.2.0beta3',
silly resolved     description: 'Web Inspector based nodeJS debugger',
silly resolved     homepage: 'http://github.com/dannycoates/node-inspector',
silly resolved     author: { name: 'Danny Coates', email: 'dannycoates@gmail.com' },
silly resolved     keywords: [ 'debug', 'debugger', 'inspector', 'profiler' ],
silly resolved     repository: 
silly resolved      { type: 'git',
silly resolved        url: 'git://github.com/dannycoates/node-inspector.git' },
silly resolved     engines: { node: '>=0.6.0' },
silly resolved     bin: { 'node-inspector': './bin/inspector.js' },
silly resolved     dependencies: { 'socket.io': '~0.9', connect: '~1.8.5', async: '~0.1' },
silly resolved     preferGlobal: true,
silly resolved     _id: 'node-inspector@0.2.0beta3',
silly resolved     devDependencies: {},
silly resolved     optionalDependencies: {},
silly resolved     _engineSupported: true,
silly resolved     _npmVersion: '1.1.12',
silly resolved     _nodeVersion: 'v0.8.20',
silly resolved     _defaultsLoaded: true,
silly resolved     _from: 'node-inspector',
silly resolved     scripts: {} } ]
info into /opt/local/lib node-inspector@0.2.0beta3
info installOne node-inspector@0.2.0beta3
verbose from cache /Users/michael/.npm/node-inspector/0.2.0beta3/package/package.json
info unbuild /opt/local/lib/node_modules/node-inspector
verbose mkdir (expected) error ENOENT, stat '/opt/local/lib/node_modules/node-inspector'
verbose mkdir done: /opt/local/lib/node_modules/node-inspector 755
verbose unpack_ uid, gid [ -2, 20 ]
verbose unpackTarget /opt/local/lib/node_modules/node-inspector
silly gunzTarPerm modes [ '755', '644' ]
verbose gunzed /opt/local/lib/node_modules/node-inspector
verbose caching /opt/local/lib/node_modules/node-inspector/package.json
verbose loadDefaults node-inspector@0.2.0beta3
info preinstall node-inspector@0.2.0beta3
verbose from cache /opt/local/lib/node_modules/node-inspector/package.json
verbose readDependencies: using package.json deps
verbose from cache /opt/local/lib/node_modules/node-inspector/package.json
verbose readDependencies: using package.json deps
verbose cache add [ 'socket.io@~0.9', null ]
silly cache add: name, spec, args [ undefined, 'socket.io@~0.9', [ 'socket.io@~0.9', null ] ]
verbose parsed url { pathname: 'socket.io@~0.9',
verbose parsed url   path: 'socket.io@~0.9',
verbose parsed url   href: 'socket.io@~0.9' }
silly cache add: name, spec, args [ 'socket.io', '~0.9', [ 'socket.io', '~0.9' ] ]
verbose parsed url { pathname: '~0.9', path: '~0.9', href: '~0.9' }
verbose addNamed [ 'socket.io', '~0.9' ]
verbose addNamed [ null, '>=0.9.0- <0.10.0-' ]
silly name, range, hasData [ 'socket.io', '>=0.9.0- <0.10.0-', false ]
verbose cache add [ 'connect@~1.8.5', null ]
silly cache add: name, spec, args [ undefined, 'connect@~1.8.5', [ 'connect@~1.8.5', null ] ]
verbose parsed url { pathname: 'connect@~1.8.5',
verbose parsed url   path: 'connect@~1.8.5',
verbose parsed url   href: 'connect@~1.8.5' }
silly cache add: name, spec, args [ 'connect', '~1.8.5', [ 'connect', '~1.8.5' ] ]
verbose parsed url { pathname: '~1.8.5', path: '~1.8.5', href: '~1.8.5' }
verbose addNamed [ 'connect', '~1.8.5' ]
verbose addNamed [ null, '>=1.8.5- <1.9.0-' ]
silly name, range, hasData [ 'connect', '>=1.8.5- <1.9.0-', false ]
verbose cache add [ 'async@~0.1', null ]
silly cache add: name, spec, args [ undefined, 'async@~0.1', [ 'async@~0.1', null ] ]
verbose parsed url { pathname: 'async@~0.1',
verbose parsed url   path: 'async@~0.1',
verbose parsed url   href: 'async@~0.1' }
silly cache add: name, spec, args [ 'async', '~0.1', [ 'async', '~0.1' ] ]
verbose parsed url { pathname: '~0.1', path: '~0.1', href: '~0.1' }
verbose addNamed [ 'async', '~0.1' ]
verbose addNamed [ null, '>=0.1.0- <0.2.0-' ]
silly name, range, hasData [ 'async', '>=0.1.0- <0.2.0-', false ]
verbose raw, before any munging socket.io
verbose url resolving [ 'https://registry.npmjs.org/', './socket.io' ]
verbose url resolved https://registry.npmjs.org/socket.io
verbose etag ""37WMPQLBFXOQQAMBLT3G6G7SD""
http GET https://registry.npmjs.org/socket.io
verbose raw, before any munging async
verbose url resolving [ 'https://registry.npmjs.org/', './async' ]
verbose url resolved https://registry.npmjs.org/async
verbose etag ""46KJDQ5G12NE7ZO6Y3YLG3GH3""
http GET https://registry.npmjs.org/async
verbose raw, before any munging connect
verbose url resolving [ 'https://registry.npmjs.org/', './connect' ]
verbose url resolved https://registry.npmjs.org/connect
verbose etag ""E1GCUUCR5OTN2JSC7O41NLCVX""
http GET https://registry.npmjs.org/connect
http 304 https://registry.npmjs.org/async
silly get cb [ 304,
silly get cb   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
silly get cb     etag: '""46KJDQ5G12NE7ZO6Y3YLG3GH3""',
silly get cb     date: 'Mon, 18 Feb 2013 20:14:43 GMT',
silly get cb     'content-length': '0' } ]
verbose etag async from cache
silly name, range, hasData 2 [ 'async', '>=0.1.0- <0.2.0-', true ]
silly versions [ 'async',
silly versions   [ '0.1.0',
silly versions     '0.1.1',
silly versions     '0.1.2',
silly versions     '0.1.3',
silly versions     '0.1.4',
silly versions     '0.1.5',
silly versions     '0.1.6',
silly versions     '0.1.7',
silly versions     '0.1.8',
silly versions     '0.1.9',
silly versions     '0.1.10',
silly versions     '0.1.11',
silly versions     '0.1.12',
silly versions     '0.1.13',
silly versions     '0.1.14',
silly versions     '0.1.15',
silly versions     '0.1.16',
silly versions     '0.1.17',
silly versions     '0.1.18',
silly versions     '0.1.19',
silly versions     '0.1.20',
silly versions     '0.1.21',
silly versions     '0.1.22',
silly versions     '0.2.0',
silly versions     '0.2.1',
silly versions     '0.2.2',
silly versions     '0.2.3',
silly versions     '0.2.4',
silly versions     '0.2.5' ] ]
verbose bin dist [ '0.8-ares1.7.5-DEV-evundefined-openssl1.0.1e-v83.11.10.25-darwin-x64-12.2.0',
verbose bin dist   { shasum: '0fc1aaa088a0e3ef0ebe2d8831bab0dcf8845061',
verbose bin dist     tarball: 'http://registry.npmjs.org/async/-/async-0.1.22.tgz' } ]
verbose caching /Users/michael/.npm/async/0.1.22/package/package.json
verbose loadDefaults async@0.1.22
http 304 https://registry.npmjs.org/connect
silly get cb [ 304,
silly get cb   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
silly get cb     etag: '""E1GCUUCR5OTN2JSC7O41NLCVX""',
silly get cb     date: 'Mon, 18 Feb 2013 20:14:43 GMT',
silly get cb     'content-length': '0' } ]
verbose etag connect from cache
silly name, range, hasData 2 [ 'connect', '>=1.8.5- <1.9.0-', true ]
silly versions [ 'connect',
silly versions   [ '0.0.1',
silly versions     '0.0.2',
silly versions     '0.0.3',
silly versions     '0.0.4',
silly versions     '0.0.5',
silly versions     '0.0.6',
silly versions     '0.1.0',
silly versions     '0.2.0',
silly versions     '0.2.1',
silly versions     '0.2.2',
silly versions     '0.2.3',
silly versions     '0.2.4',
silly versions     '0.2.5',
silly versions     '0.2.6',
silly versions     '0.2.7',
silly versions     '0.3.0',
silly versions     '0.4.0',
silly versions     '0.5.0',
silly versions     '0.5.1',
silly versions     '0.5.2',
silly versions     '0.5.3',
silly versions     '0.5.4',
silly versions     '0.5.5',
silly versions     '0.5.6',
silly versions     '0.5.7',
silly versions     '0.5.8',
silly versions     '0.5.9',
silly versions     '0.5.10',
silly versions     '1.0.0',
silly versions     '1.0.1',
silly versions     '2.2.2',
silly versions     '2.3.0',
silly versions     '2.3.1',
silly versions     '2.3.2',
silly versions     '2.3.3',
silly versions     '1.9.1',
silly versions     '2.3.4',
silly versions     '2.3.5',
silly versions     '2.3.6',
silly versions     '2.3.7',
silly versions     '1.9.2',
silly versions     '2.3.8',
silly versions     '2.3.9',
silly versions     '2.4.0',
silly versions     '2.4.1',
silly versions     '2.4.2',
silly versions     '2.4.3',
silly versions     '2.4.4',
silly versions     '2.4.5',
silly versions     '2.4.6',
silly versions     '2.5.0',
silly versions     '2.6.0',
silly versions     '2.6.1',
silly versions     '2.6.2',
silly versions     '2.7.0',
silly versions     '2.7.1',
silly versions     '2.7.2' ] ]
verbose about to build /opt/local/lib/node_modules/node-inspector
info unbuild /opt/local/lib/node_modules/node-inspector
verbose from cache /opt/local/lib/node_modules/node-inspector/package.json
info preuninstall node-inspector@0.2.0beta3
info uninstall node-inspector@0.2.0beta3
verbose unbuild node-inspector@0.2.0beta3 [ true,
verbose unbuild node-inspector@0.2.0beta3   '/opt/local/lib/node_modules',
verbose unbuild node-inspector@0.2.0beta3   '/opt/local/lib/node_modules' ]
verbose binRoot [ '/opt/local/bin', { 'node-inspector': './bin/inspector.js' } ]
info postuninstall node-inspector@0.2.0beta3
ERR! Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
ERR! Valid install targets:
ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2"",""2.3.8"",""2.3.9"",""2.4.0"",""2.4.1"",""2.4.2"",""2.4.3"",""2.4.4"",""2.4.5"",""2.4.6"",""2.5.0"",""2.6.0"",""2.6.1"",""2.6.2"",""2.7.0"",""2.7.1"",""2.7.2""]
ERR!     at installTargetsError (/usr/local/lib/node_modules/npm/lib/cache.js:486:10)
ERR!     at next_ (/usr/local/lib/node_modules/npm/lib/cache.js:436:17)
ERR!     at next (/usr/local/lib/node_modules/npm/lib/cache.js:413:44)
ERR!     at /usr/local/lib/node_modules/npm/lib/cache.js:406:5
ERR!     at saved (/usr/local/lib/node_modules/npm/lib/utils/npm-registry-client/get.js:150:7)
ERR!     at /usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:230:7
ERR!     at Object.oncomplete (fs.js:297:15)
ERR! You may report this log at:
ERR!     <http://github.com/isaacs/npm/issues>
ERR! or email it to:
ERR!     npm-@googlegroups.com
ERR! 
ERR! System Darwin 12.2.0
ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
ERR! cwd /Users/michael
ERR! node -v v0.8.20
ERR! npm -v 1.1.12
ERR! message No compatible version found: connect@'>=1.8.5- <1.9.0-'
ERR! message Valid install targets:
ERR! message [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2"",""2.3.8"",""2.3.9"",""2.4.0"",""2.4.1"",""2.4.2"",""2.4.3"",""2.4.4"",""2.4.5"",""2.4.6"",""2.5.0"",""2.6.0"",""2.6.1"",""2.6.2"",""2.7.0"",""2.7.1"",""2.7.2""]
verbose exit [ 1, true ]
",michaelhodgins,2013-03-30 17:45:04
148,2013-03-30 17:45:04,"This should be fixed now, in 0.2.0beta4 on npm
",dannycoates,2013-03-30 17:45:04
147,2013-02-15 15:14:31,"I've got my server running, start node-inspector.  Server continues to work.  I set a break point, node-inspector intercepts server, pauses correctly at break point, but then when I try to continue in the debugger or step to the next line, nothing happens.  If I kill the debugger, the server (usually) resumes working.  If I reload the debugger, it goes immediately back to the line of code it paused on.

I'm using flatiron, union, ecstatic -- but, essentially, no code of my own yet, just testing a simple ecstatic example trying to serve pages and directory listings.
",Sigfried,2013-03-30 17:45:28
147,2013-03-14 11:36:49,"I've started experiencing the exact same issue, since upgrading to node v0.10.0. Were you using the pre-release version per-chance?
",Siyfion,2013-03-30 17:45:28
147,2013-03-17 02:21:55,"I'm seeing the same thing as well after upgrading to v0.10.0. Anyone found anything?
",freshwinded,2013-03-30 17:45:28
147,2013-03-18 18:25:02,"Started encountering the same problem after upgrading to Node 0.10.0
",philidem,2013-03-30 17:45:28
147,2013-03-19 05:15:13,"Same thing here with Node 0.10.0
",huyz,2013-03-30 17:45:28
147,2013-03-19 13:43:22,"Same here. I would have voted for this issue instead of just posting a +1 but there is no such option on github (or I can't find it).
",qraynaud,2013-03-30 17:45:28
147,2013-03-20 12:31:59,"+1
",codeiain,2013-03-30 17:45:28
147,2013-03-21 20:42:20,"Anyone tested this in v0.10.1?
",Siyfion,2013-03-30 17:45:28
147,2013-03-21 21:07:52,"+1.
",cappslock,2013-03-30 17:45:28
147,2013-03-21 21:12:47,"Tested in 0.10.1, same problem. Not exactly surprised...

Anyone recommended _debugging_ alternatives?
",cappslock,2013-03-30 17:45:28
147,2013-03-22 15:27:33,"For those that are having issues... Clone the MASTER branch from git, do an `npm install` and then `node .\bin\inspector.js` and you might find it starts working again.
It seems the problem is in the `update-ui` branch (the one published to NPM).
",Siyfion,2013-03-30 17:45:28
147,2013-03-22 15:39:38,"Awesome - that worked for me.
By the way, you don't need to run the script directly. I just replaced my global node-inspector with the MASTER branch and my existing start-up scripts with node-inspector work like usual.
",freshwinded,2013-03-30 17:45:28
147,2013-03-22 15:54:12,"See #152 
",Siyfion,2013-03-30 17:45:28
147,2013-03-30 17:45:28,"This should be fixed now, in 0.2.0beta4 on npm
",dannycoates,2013-03-30 17:45:28
146,2013-02-12 12:00:54,"First, sorry for my bad english. Basically, if I'm on a breakpoint and, for example, type global in the console, the whole global object is shown, and I can see its properties. However, if the script isn't paused (no breakpoint), props of objects does not appear, but ints and strings for example does appear.
",nvlbg,2013-03-30 17:39:56
146,2013-07-24 09:53:58,"@nvlbg This is a know problem that's rather difficult to solve, because it requires support from V8 debugger. Is it a major obstacle in your debugging workflow?
",bajtos,2013-03-30 17:39:56
146,2015-11-24 02:26:24,"It looks like this still isn't resolved, is there a plan to eventually tackle this?
",eplawless,2013-03-30 17:39:56
145,2013-01-11 16:19:32,"I am running meteor on Windows, I modified the meteor.bat file under C:\Program Files (x86)\Meteor to included --debug as mentioned in other posts:

@echo off&&""%METEOR_PATH%\bin\node.exe"" --debug ""%METEOR_PATH%\app\meteor\meteor.js"" %*
I started my node-inspector and received an instruction to visit http://0.0.0.0:8080/debug?port=5858 to start debugging

I then started my meteor application, but when I go to http://127.0.0.1:8080/debug?port=5858 I saw two squares: one for Scripts, and one for console. Nothing came up when selecting Scripts.

When I brought up meteor I can see that node-inspector attached to it correctly, ""debugger listening on port 5858"" and confirmed that I brought up Meteor in the debugger mode. I noticed that when I started meteor it started two processes as well, just like in Linux. When I killed the second process it automatically started it again. When I killed the first process the application just exited. But unlike in Linux by killing the second process doesn't make it to show the server side scripts in node-inspector. I am using Firefox.
",jghuang6038,2013-03-30 17:39:56
145,2013-01-11 17:12:00,"By switching to Chrome now I see all Meteor scripts but not my own. It's an improvement from running with Firefox but not helping me with the debugging.
",jghuang6038,2013-03-30 17:39:56
144,2012-12-24 13:19:03,"Hi ,

I am getting error when trying to install Node-inspector.. Please suggest the solution.
Is there any way to install it staying offline (not connected to internet due to firewall)
",csingh9146,2013-03-30 17:39:56
144,2012-12-31 00:03:04,"are you root? Try `sudo npm install -g node-inspector`
to install offline download the package and use `sudo npm install /link/to/node-inspector/folder`
",csicar,2013-03-30 17:39:56
144,2013-01-14 05:13:27,"Thanks for the reply .. but i am using Windows server 2008 r2 as operating system.
Is there any way to nstall the modules offline on windows.
",csingh9146,2013-03-30 17:39:56
143,2012-12-22 09:35:20,"Hi..
First of all, thanks a lot for such a nice tool to debug node app..!!
I am using node-inspector to debug my app. I have configured it correctly and it is working fine in chrome..!!
But in firefox, it not listing files in script section.! 
I have read other forum post for the same issues, refreshing or clearing cache/history doesn't  solve the issue.. Please  Guide ..!
",mayurdabhi,2013-03-30 17:39:56
143,2013-07-24 09:59:25,"@mayurdabhi Firefox is not supported, you have to use a Blink browser like Chrome or Opera.
",bajtos,2013-03-30 17:39:56
142,2012-11-17 14:53:03,"Local Cloud Foundry (VCAP) compatibility
Shorten friendly scripts path
Fixed object undefined bug
",mongris,2013-12-04 18:05:54
142,2013-07-24 17:40:02,"Hi @mongris, thank you for submitting a pull request.

First of all, most of node-inspector's code was rewritten in 0.3 after upgrading to Blink fork of WebKit. I am afraid you will have to port your changes to the new codebase.

Secondly, I don't really like the idea of adding such vendor-specific features into node-inspector. However I am happy to add few customisation hooks that will allow you to bend node-inspector for your needs.

This is how I envision you can integrate node-inspector into CloudFoundry:
1. Create a new application, put `app.js` and `manifest.yml` into this application.
2. Add `node-inspector` as an npm dependency (`npm install --save node-inspector`).
3. Node-inspector's `index.js` (the file that is loaded when you require node-inspector from your code) should export methods for starting up a node-inspector server/back-end. The method should accept an options object with all settings. `bin/inspector.js` should fill this options object from command-line arguments, your application can fill whatever values make sense for CloudFoundry.
",bajtos,2013-12-04 18:05:54
142,2013-07-26 12:29:05,"What would actually be more useful, would be a way to debug a node program where instead of just using node --debug, you go in the other direction and have node connect to the debugger.  Reason for this is, in a PaaS like CloudFoundry/Heroku/etc, you are typically limited to having just a single web port open for your ""app"" - essentially port 80.  Use of node --debug opens another port (eg, 5858), which may not be accessible to anyone.  If you could instead have node CONNECT TO a debugger, that is more likely to work, as it's more likely your app can connect to other things than expose a new server port.

It may be possible to do this with a small node program that you exec() connect back to the debug port, and have it proxy the port out to the debugger.

Another option, is to use the v8 option --expose-debug-as flag to run the debugger in-process, and have it manage or at least start up the connection to the debugger.  Getting ""pause at breakpoints"" to work is a bit of a hurdle.
",pmuellr,2013-12-04 18:05:54
142,2013-12-04 18:05:54,"Closing as there was no activity for several months.
",bajtos,2013-12-04 18:05:54
141,2012-11-15 15:29:02,"On OSX running, v0.9.0-pre. 

Everything loads fine, however, I don't hit any breakpoints. Ideas?
",jrgleason,2013-03-30 17:32:25
141,2012-11-15 15:47:07,"On Chromium/OSX, I restart the browser to fix this issue when I face it. 
",asnowfix,2013-03-30 17:32:25
140,2012-10-23 15:30:07,,mattheworiordan,2013-10-04 12:49:52
140,2013-10-04 09:02:06,"> Good point, I suspect // would do, however I am not familiar with the implementation details of that io object. I do know my solution works though ;)

Fair enough. Please rebase your change on the latest master so that I can merge the pull request.
",bajtos,2013-10-04 12:49:52
140,2013-10-04 09:53:33,"Ok, this pull request has now been rebased.
",mattheworiordan,2013-10-04 12:49:52
140,2013-10-04 12:50:15,"Landed, thank you for your contribution.
",bajtos,2013-10-04 12:49:52
139,2012-10-23 15:19:38,"I am using an stunnel to node-inspector to secure it and ensure no one else can access the debugger whilst I am debugging production apps.  Unfortunately, when I spint up node-inspector through stunnel, I get errors saying that node-inspector is trying to access non-secure content.

Here are the logs and stack trace of the errors as they come up:

<S_CODE_TOKEN>

Do you think perhaps somewhere there is a reference to a javascript file over http?  It seems that whatever references `/socket.io/1/?t=1351005348629` is the offending bit of code.
",mattheworiordan,2012-10-23 15:30:32
139,2012-10-23 15:30:32,"Closing this ticket as I have fixed this with a pull request
",mattheworiordan,2012-10-23 15:30:32
139,2012-10-23 15:30:41,"Sorry, pull request is here, https://github.com/dannycoates/node-inspector/pull/140
",mattheworiordan,2012-10-23 15:30:32
138,2012-10-17 01:54:32,,draco2003,2013-07-24 10:14:40
138,2013-07-24 10:14:40,"@draco2003 Thank you for your pull request. I have already made the change in 85871680 before I learned about this request. Sorry for that.
",bajtos,2013-07-24 10:14:40
137,2012-10-16 14:09:37,"Version:  v0.8.12
OS : Windows Vista

Problem : Can't installed node-inspector via npm

Stack trace:

info it worked if it ends with ok
verbose cli [ 'C:\node\\node.exe',
verbose cli   'C:\node\node_modules\npm\bin\npm-cli.js',
verbose cli   'install',
verbose cli   '-g',
verbose cli   'node-inspector' ]
info using npm@1.1.9
info using node@v0.8.12
verbose C:\node\node.exe node symlink
verbose config file C:\Users\tmnuwan12.npmrc
verbose config file C:\node\etc\npmrc
verbose config file C:\node\node_modules\npm\npmrc
verbose mkdir done: C:\node 755
verbose cache add [ 'node-inspector', null ]
silly cache add: name, spec, args [ undefined, 'node-inspector', [ 'node-inspector', null ] ]
verbose parsed url { pathname: 'node-inspector',
verbose parsed url   path: 'node-inspector',
verbose parsed url   href: 'node-inspector' }
verbose addNamed [ 'node-inspector', '' ]
verbose addNamed [ null, '' ]
silly name, range, hasData [ 'node-inspector', '', false ]
verbose raw, before any munging node-inspector
verbose url resolving [ 'https://registry.npmjs.org/', './node-inspector' ]
verbose url resolved https://registry.npmjs.org/node-inspector
verbose etag ""APU3VT6Z43RTVQFALL1NN988Z""
http GET https://registry.npmjs.org/node-inspector
http 304 https://registry.npmjs.org/node-inspector
silly get cb [ 304,
silly get cb   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
silly get cb     etag: '""APU3VT6Z43RTVQFALL1NN988Z""',
silly get cb     date: 'Tue, 16 Oct 2012 14:01:12 GMT',
silly get cb     'content-length': '0' } ]
verbose etag node-inspector from cache
verbose mkdir done: C:\Users\tmnuwan12\AppData\Roaming\npm-cache\node-inspector 755
silly name, range, hasData 2 [ 'node-inspector', '', true ]
silly versions [ 'node-inspector',
silly versions   [ '0.0.1',
silly versions     '0.0.2',
silly versions     '0.0.3',
silly versions     '0.0.4',
silly versions     '0.1.0',
silly versions     '0.1.1',
silly versions     '0.1.2',
silly versions     '0.1.3',
silly versions     '0.1.4',
silly versions     '0.1.5',
silly versions     '0.1.6',
silly versions     '0.1.7',
silly versions     '0.1.8',
silly versions     '0.1.9',
silly versions     '0.1.10',
silly versions     '0.2.0beta1',
silly versions     '0.2.0beta2',
silly versions     '0.2.0beta3' ] ]
verbose bin dist [ '0.8-ares1.7.5-DEV-evundefined-openssl1.0.0f-v83.11.10.22-win32-ia32-6.0.6001',
verbose bin dist   { shasum: '2adb552da7757ff3d4ec549f5570799355952d20',
verbose bin dist     tarball: 'http://registry.npmjs.org/node-inspector/-/node-inspector-0.2.0beta3.tgz' } ]
verbose caching C:\Users\tmnuwan12\AppData\Roaming\npm-cache\node-inspector\0.2.0beta3\package\package.json
verbose loadDefaults node-inspector@0.2.0beta3
silly resolved [ { name: 'node-inspector',
silly resolved     version: '0.2.0beta3',
silly resolved     description: 'Web Inspector based nodeJS debugger',
silly resolved     homepage: 'http://github.com/dannycoates/node-inspector',
silly resolved     author: { name: 'Danny Coates', email: 'dannycoates@gmail.com' },
silly resolved     keywords: [ 'debug', 'debugger', 'inspector', 'profiler' ],
silly resolved     repository: 
silly resolved      { type: 'git',
silly resolved        url: 'git://github.com/dannycoates/node-inspector.git' },
silly resolved     engines: { node: '>=0.6.0' },
silly resolved     bin: { 'node-inspector': './bin/inspector.js' },
silly resolved     dependencies: { 'socket.io': '~0.9', connect: '~1.8.5', async: '~0.1' },
silly resolved     preferGlobal: true,
silly resolved     _id: 'node-inspector@0.2.0beta3',
silly resolved     devDependencies: {},
silly resolved     optionalDependencies: {},
silly resolved     _engineSupported: true,
silly resolved     _npmVersion: '1.1.9',
silly resolved     _nodeVersion: 'v0.8.12',
silly resolved     _defaultsLoaded: true,
silly resolved     _from: 'node-inspector',
silly resolved     scripts: {} } ]
info into C:\node node-inspector@0.2.0beta3
info installOne node-inspector@0.2.0beta3
verbose from cache C:\Users\tmnuwan12\AppData\Roaming\npm-cache\node-inspector\0.2.0beta3\package\package.json
info unbuild C:\node\node_modules\node-inspector
verbose mkdir (expected) error ENOENT, stat 'C:\node\node_modules\node-inspector'
verbose mkdir done: C:\node\node_modules\node-inspector 755
verbose unpack_ uid, gid [ undefined, undefined ]
verbose unpackTarget C:\node\node_modules\node-inspector
silly gunzTarPerm modes [ '755', '644' ]
silly modified mode [ '.npmignore', 438, 420 ]
silly modified mode [ 'bin/', 438, 493 ]
silly modified mode [ 'bin/inspector.js', 438, 420 ]
silly modified mode [ 'ChangeLog', 438, 420 ]
silly modified mode [ 'config.json', 438, 420 ]
silly modified mode [ 'front-end/', 438, 493 ]
silly modified mode [ 'front-end/devtools.css', 438, 420 ]
silly modified mode [ 'front-end/devtools.js', 438, 420 ]
silly modified mode [ 'front-end/helpScreen.css', 438, 420 ]
silly modified mode [ 'front-end/Images/', 438, 493 ]
silly modified mode [ 'front-end/Images/applicationCache.png', 438, 420 ]
silly modified mode [ 'front-end/Images/auditsIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/back.png', 438, 420 ]
silly modified mode [ 'front-end/Images/breakpointBorder.png', 438, 420 ]
silly modified mode [ 'front-end/Images/breakpointConditionalBorder.png', 438, 420 ]
silly modified mode [ 'front-end/Images/breakpointConditionalCounterBorder.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/breakpointCounterBorder.png', 438, 420 ]
silly modified mode [ 'front-end/Images/breakpointsActivateButtonGlyph.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/breakpointsDeactivateButtonGlyph.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/checker.png', 438, 420 ]
silly modified mode [ 'front-end/Images/clearConsoleButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/closeButtons.png', 438, 420 ]
silly modified mode [ 'front-end/Images/consoleButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/consoleIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/cookie.png', 438, 420 ]
silly modified mode [ 'front-end/Images/database.png', 438, 420 ]
silly modified mode [ 'front-end/Images/databaseTable.png', 438, 420 ]
silly modified mode [ 'front-end/Images/debuggerContinue.png', 438, 420 ]
silly modified mode [ 'front-end/Images/debuggerPause.png', 438, 420 ]
silly modified mode [ 'front-end/Images/debuggerStepInto.png', 438, 420 ]
silly modified mode [ 'front-end/Images/debuggerStepOut.png', 438, 420 ]
silly modified mode [ 'front-end/Images/debuggerStepOver.png', 438, 420 ]
silly modified mode [ 'front-end/Images/deleteIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallDown.png', 438, 420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallDownBlack.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallDownWhite.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallRight.png', 438, 420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallRightBlack.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallRightDown.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallRightDownBlack.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallRightDownWhite.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/disclosureTriangleSmallRightWhite.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/dockButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/elementsIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/enableOutlineButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/enableSolidButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/errorIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/errorMediumIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/errorRedDot.png', 438, 420 ]
silly modified mode [ 'front-end/Images/excludeButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/focusButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/forward.png', 438, 420 ]
silly modified mode [ 'front-end/Images/frame.png', 438, 420 ]
silly modified mode [ 'front-end/Images/gearButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/glossyHeader.png', 438, 420 ]
silly modified mode [ 'front-end/Images/glossyHeaderPressed.png', 438, 420 ]
silly modified mode [ 'front-end/Images/glossyHeaderSelected.png', 438, 420 ]
silly modified mode [ 'front-end/Images/glossyHeaderSelectedPressed.png', 438, 420 ]
silly modified mode [ 'front-end/Images/goArrow.png', 438, 420 ]
silly modified mode [ 'front-end/Images/graphLabelCalloutLeft.png', 438, 420 ]
silly modified mode [ 'front-end/Images/graphLabelCalloutRight.png', 438, 420 ]
silly modified mode [ 'front-end/Images/largerResourcesButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/localStorage.png', 438, 420 ]
silly modified mode [ 'front-end/Images/navigatorShowHideButton.png', 438, 420 ]
silly modified mode [ 'front-end/Images/networkIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/nodeSearchButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/paneAddButtons.png', 438, 420 ]
silly modified mode [ 'front-end/Images/paneBottomGrow.png', 438, 420 ]
silly modified mode [ 'front-end/Images/paneBottomGrowActive.png', 438, 420 ]
silly modified mode [ 'front-end/Images/paneElementStateButtons.png', 438, 420 ]
silly modified mode [ 'front-end/Images/paneFilterButtons.png', 438, 420 ]
silly modified mode [ 'front-end/Images/paneGrowHandleLine.png', 438, 420 ]
silly modified mode [ 'front-end/Images/paneRefreshButtons.png', 438, 420 ]
silly modified mode [ 'front-end/Images/paneSettingsButtons.png', 438, 420 ]
silly modified mode [ 'front-end/Images/pauseOnExceptionButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/percentButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/popoverArrows.png', 438, 420 ]
silly modified mode [ 'front-end/Images/popoverBackground.png', 438, 420 ]
silly modified mode [ 'front-end/Images/profileGroupIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/profileIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/profilesIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/profileSmallIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/profilesSilhouette.png', 438, 420 ]
silly modified mode [ 'front-end/Images/programCounterBorder.png', 438, 420 ]
silly modified mode [ 'front-end/Images/radioDot.png', 438, 420 ]
silly modified mode [ 'front-end/Images/recordButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/recordToggledButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/reloadButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourceCSSIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourceDocumentIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourceDocumentIconSmall.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourceJSIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourcePlainIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourcePlainIconSmall.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourcesIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourcesSizeGraphIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/resourcesTimeGraphIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/scriptsIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/scriptsSilhouette.png', 438, 420 ]
silly modified mode [ 'front-end/Images/searchSmallBlue.png', 438, 420 ]
silly modified mode [ 'front-end/Images/searchSmallBrightBlue.png', 438, 420 ]
silly modified mode [ 'front-end/Images/searchSmallGray.png', 438, 420 ]
silly modified mode [ 'front-end/Images/searchSmallWhite.png', 438, 420 ]
silly modified mode [ 'front-end/Images/segment.png', 438, 420 ]
silly modified mode [ 'front-end/Images/segmentEnd.png', 438, 420 ]
silly modified mode [ 'front-end/Images/segmentHover.png', 438, 420 ]
silly modified mode [ 'front-end/Images/segmentHoverEnd.png', 438, 420 ]
silly modified mode [ 'front-end/Images/segmentSelected.png', 438, 420 ]
silly modified mode [ 'front-end/Images/segmentSelectedEnd.png', 438, 420 ]
silly modified mode [ 'front-end/Images/sessionStorage.png', 438, 420 ]
silly modified mode [ 'front-end/Images/spinner.gif', 438, 420 ]
silly modified mode [ 'front-end/Images/spinnerActive.gif', 438, 420 ]
silly modified mode [ 'front-end/Images/spinnerActiveSelected.gif', 438, 420 ]
silly modified mode [ 'front-end/Images/spinnerInactive.gif', 438, 420 ]
silly modified mode [ 'front-end/Images/spinnerInactiveSelected.gif', 438, 420 ]
silly modified mode [ 'front-end/Images/splitviewDimple.png', 438, 420 ]
silly modified mode [ 'front-end/Images/splitviewDividerBackground.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarBackground.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarBackgroundChromium.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarBottomBackground.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarBottomBackgroundChromium.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/statusbarButtonGlyphs.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarButtons.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarButtonsChromium.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarMenuButton.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarMenuButtonChromium.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarMenuButtonSelected.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarMenuButtonSelectedChromium.png',
silly modified mode   438,
silly modified mode   420 ]
silly modified mode [ 'front-end/Images/statusbarResizerHorizontal.png', 438, 420 ]
silly modified mode [ 'front-end/Images/statusbarResizerVertical.png', 438, 420 ]
silly modified mode [ 'front-end/Images/successGreenDot.png', 438, 420 ]
silly modified mode [ 'front-end/Images/thumbActiveHoriz.png', 438, 420 ]
silly modified mode [ 'front-end/Images/thumbActiveVert.png', 438, 420 ]
silly modified mode [ 'front-end/Images/thumbHoriz.png', 438, 420 ]
silly modified mode [ 'front-end/Images/thumbHoverHoriz.png', 438, 420 ]
silly modified mode [ 'front-end/Images/thumbHoverVert.png', 438, 420 ]
silly modified mode [ 'front-end/Images/thumbVert.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineBarBlue.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineBarGray.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineBarGreen.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineBarOrange.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineBarPurple.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineBarRed.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineBarYellow.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineCheckmarks.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineDots.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineHollowPillBlue.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineHollowPillGray.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineHollowPillGreen.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineHollowPillOrange.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineHollowPillPurple.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineHollowPillRed.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineHollowPillYellow.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelineIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelinePillBlue.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelinePillGray.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelinePillGreen.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelinePillOrange.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelinePillPurple.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelinePillRed.png', 438, 420 ]
silly modified mode [ 'front-end/Images/timelinePillYellow.png', 438, 420 ]
silly modified mode [ 'front-end/Images/toolbarIcons.png', 438, 420 ]
silly modified mode [ 'front-end/Images/toolbarIconsSmall.png', 438, 420 ]
silly modified mode [ 'front-end/Images/toolbarItemSelected.png', 438, 420 ]
silly modified mode [ 'front-end/Images/trackHoriz.png', 438, 420 ]
silly modified mode [ 'front-end/Images/trackVert.png', 438, 420 ]
silly modified mode [ 'front-end/Images/treeDownTriangleBlack.png', 438, 420 ]
silly modified mode [ 'front-end/Images/treeDownTriangleWhite.png', 438, 420 ]
silly modified mode [ 'front-end/Images/treeRightTriangleBlack.png', 438, 420 ]
silly modified mode [ 'front-end/Images/treeRightTriangleWhite.png', 438, 420 ]
silly modified mode [ 'front-end/Images/treeUpTriangleBlack.png', 438, 420 ]
silly modified mode [ 'front-end/Images/treeUpTriangleWhite.png', 438, 420 ]
silly modified mode [ 'front-end/Images/undockButtonGlyph.png', 438, 420 ]
silly modified mode [ 'front-end/Images/userInputIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/userInputPreviousIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/userInputResultIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/warningIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/warningMediumIcon.png', 438, 420 ]
silly modified mode [ 'front-end/Images/warningOrangeDot.png', 438, 420 ]
silly modified mode [ 'front-end/Images/warningsErrors.png', 438, 420 ]
silly modified mode [ 'front-end/index.html', 438, 420 ]
silly modified mode [ 'front-end/navigatorView.css', 438, 420 ]
silly modified mode [ 'front-end/node/', 438, 493 ]
silly modified mode [ 'front-end/node/InspectorBackendStub.js', 438, 420 ]
silly modified mode [ 'front-end/node/InspectorFrontendHostStub.js', 438, 420 ]
silly modified mode [ 'front-end/node/Overrides.js', 438, 420 ]
silly modified mode [ 'front-end/scriptsPanel.css', 438, 420 ]
silly modified mode [ 'front-end/splitView.css', 438, 420 ]
silly modified mode [ 'front-end/tabbedPane.css', 438, 420 ]
silly modified mode [ 'front-end/textPrompt.css', 438, 420 ]
silly modified mode [ 'front-end/textViewer.css', 438, 420 ]
silly modified mode [ 'lib/', 438, 493 ]
silly modified mode [ 'lib/callback.js', 438, 420 ]
silly modified mode [ 'lib/client.js', 438, 420 ]
silly modified mode [ 'lib/debug-server.js', 438, 420 ]
silly modified mode [ 'lib/front-end/', 438, 493 ]
silly modified mode [ 'lib/front-end/browser.js', 438, 420 ]
silly modified mode [ 'lib/front-end/callframe.js', 438, 420 ]
silly modified mode [ 'lib/front-end/console.js', 438, 420 ]
silly modified mode [ 'lib/front-end/debugger.js', 438, 420 ]
silly modified mode [ 'lib/front-end/location.js', 438, 420 ]
silly modified mode [ 'lib/front-end/remote-object.js', 438, 420 ]
silly modified mode [ 'lib/front-end/runtime.js', 438, 420 ]
silly modified mode [ 'lib/front-end/scope.js', 438, 420 ]
silly modified mode [ 'lib/protocol.js', 438, 420 ]
silly modified mode [ 'lib/session2.js', 438, 420 ]
silly modified mode [ 'lib/v2w.js', 438, 420 ]
silly modified mode [ 'LICENSE', 438, 420 ]
silly modified mode [ 'package.json', 438, 420 ]
silly modified mode [ 'readme.md', 438, 420 ]
silly modified mode [ 'test/', 438, 493 ]
silly modified mode [ 'test/hello.js', 438, 420 ]
verbose gunzed C:\node\node_modules\node-inspector
verbose caching C:\node\node_modules\node-inspector\package.json
verbose loadDefaults node-inspector@0.2.0beta3
info preinstall node-inspector@0.2.0beta3
verbose from cache C:\node\node_modules\node-inspector\package.json
verbose readDependencies: using package.json deps
verbose from cache C:\node\node_modules\node-inspector\package.json
verbose readDependencies: using package.json deps
verbose cache add [ 'socket.io@~0.9', null ]
silly cache add: name, spec, args [ undefined, 'socket.io@~0.9', [ 'socket.io@~0.9', null ] ]
verbose parsed url { pathname: 'socket.io@~0.9',
verbose parsed url   path: 'socket.io@~0.9',
verbose parsed url   href: 'socket.io@~0.9' }
silly cache add: name, spec, args [ 'socket.io', '~0.9', [ 'socket.io', '~0.9' ] ]
verbose parsed url { pathname: '~0.9', path: '~0.9', href: '~0.9' }
verbose addNamed [ 'socket.io', '~0.9' ]
verbose addNamed [ null, '>=0.9.0- <0.10.0-' ]
silly name, range, hasData [ 'socket.io', '>=0.9.0- <0.10.0-', false ]
verbose cache add [ 'connect@~1.8.5', null ]
silly cache add: name, spec, args [ undefined, 'connect@~1.8.5', [ 'connect@~1.8.5', null ] ]
verbose parsed url { pathname: 'connect@~1.8.5',
verbose parsed url   path: 'connect@~1.8.5',
verbose parsed url   href: 'connect@~1.8.5' }
silly cache add: name, spec, args [ 'connect', '~1.8.5', [ 'connect', '~1.8.5' ] ]
verbose parsed url { pathname: '~1.8.5', path: '~1.8.5', href: '~1.8.5' }
verbose addNamed [ 'connect', '~1.8.5' ]
verbose addNamed [ null, '>=1.8.5- <1.9.0-' ]
silly name, range, hasData [ 'connect', '>=1.8.5- <1.9.0-', false ]
verbose cache add [ 'async@~0.1', null ]
silly cache add: name, spec, args [ undefined, 'async@~0.1', [ 'async@~0.1', null ] ]
verbose parsed url { pathname: 'async@~0.1',
verbose parsed url   path: 'async@~0.1',
verbose parsed url   href: 'async@~0.1' }
silly cache add: name, spec, args [ 'async', '~0.1', [ 'async', '~0.1' ] ]
verbose parsed url { pathname: '~0.1', path: '~0.1', href: '~0.1' }
verbose addNamed [ 'async', '~0.1' ]
verbose addNamed [ null, '>=0.1.0- <0.2.0-' ]
silly name, range, hasData [ 'async', '>=0.1.0- <0.2.0-', false ]
verbose raw, before any munging async
verbose url resolving [ 'https://registry.npmjs.org/', './async' ]
verbose url resolved https://registry.npmjs.org/async
http GET https://registry.npmjs.org/async
verbose raw, before any munging connect
verbose url resolving [ 'https://registry.npmjs.org/', './connect' ]
verbose url resolved https://registry.npmjs.org/connect
verbose etag ""DLU4RWIBQ5VB1HYSEOGG521JP""
http GET https://registry.npmjs.org/connect
verbose raw, before any munging socket.io
verbose url resolving [ 'https://registry.npmjs.org/', './socket.io' ]
verbose url resolved https://registry.npmjs.org/socket.io
verbose etag ""1LBMLXQFNNK4Y979ZKCV65760""
http GET https://registry.npmjs.org/socket.io
http 304 https://registry.npmjs.org/socket.io
silly get cb [ 304,
silly get cb   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
silly get cb     etag: '""1LBMLXQFNNK4Y979ZKCV65760""',
silly get cb     date: 'Tue, 16 Oct 2012 14:01:19 GMT',
silly get cb     'content-length': '0' } ]
verbose etag socket.io from cache
verbose mkdir done: C:\Users\tmnuwan12\AppData\Roaming\npm-cache\socket.io 755
http 304 https://registry.npmjs.org/connect
silly get cb [ 304,
silly get cb   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
silly get cb     etag: '""DLU4RWIBQ5VB1HYSEOGG521JP""',
silly get cb     date: 'Tue, 16 Oct 2012 14:01:19 GMT',
silly get cb     'content-length': '0' } ]
verbose etag connect from cache
verbose mkdir done: C:\Users\tmnuwan12\AppData\Roaming\npm-cache\connect 755
silly name, range, hasData 2 [ 'socket.io', '>=0.9.0- <0.10.0-', true ]
silly versions [ 'socket.io',
silly versions   [ '0.3.8',
silly versions     '0.4.0',
silly versions     '0.4.1',
silly versions     '0.5.1',
silly versions     '0.5.3',
silly versions     '0.6.0',
silly versions     '0.6.1',
silly versions     '0.6.3',
silly versions     '0.6.4',
silly versions     '0.6.5',
silly versions     '0.6.6',
silly versions     '0.6.7',
silly versions     '0.6.8',
silly versions     '0.6.9',
silly versions     '0.6.10',
silly versions     '0.6.11',
silly versions     '0.6.12',
silly versions     '0.6.14',
silly versions     '0.6.15',
silly versions     '0.6.16',
silly versions     '0.6.17',
silly versions     '0.6.18',
silly versions     '0.7.0',
silly versions     '0.7.1',
silly versions     '0.7.2',
silly versions     '0.7.3',
silly versions     '0.7.4',
silly versions     '0.7.5',
silly versions     '0.7.6',
silly versions     '0.7.7',
silly versions     '0.7.8',
silly versions     '0.7.9',
silly versions     '0.7.10',
silly versions     '0.7.11',
silly versions     '0.8.0',
silly versions     '0.8.1',
silly versions     '0.8.2',
silly versions     '0.8.3',
silly versions     '0.8.4',
silly versions     '0.8.5',
silly versions     '0.8.6',
silly versions     '0.8.7',
silly versions     '0.9.0',
silly versions     '0.9.1',
silly versions     '0.9.1-1',
silly versions     '0.9.2',
silly versions     '0.9.3',
silly versions     '0.9.4',
silly versions     '0.9.5',
silly versions     '0.9.6',
silly versions     '0.9.7',
silly versions     '0.9.8',
silly versions     '0.9.9',
silly versions     '0.9.10' ] ]
verbose bin dist [ '0.8-ares1.7.5-DEV-evundefined-openssl1.0.0f-v83.11.10.22-win32-ia32-6.0.6001',
verbose bin dist   { shasum: '20aff51bdfd33066aacdd5df7a44f244e7d2cc6a',
verbose bin dist     tarball: 'http://registry.npmjs.org/socket.io/-/socket.io-0.9.10.tgz' } ]
verbose addRemoteTarball [ 'https://registry.npmjs.org/socket.io/-/socket.io-0.9.10.tgz',
verbose addRemoteTarball   '20aff51bdfd33066aacdd5df7a44f244e7d2cc6a' ]
silly name, range, hasData 2 [ 'connect', '>=1.8.5- <1.9.0-', true ]
silly versions [ 'connect',
silly versions   [ '0.0.1',
silly versions     '0.0.2',
silly versions     '0.0.3',
silly versions     '0.0.4',
silly versions     '0.0.5',
silly versions     '0.0.6',
silly versions     '0.1.0',
silly versions     '0.2.0',
silly versions     '0.2.1',
silly versions     '0.2.2',
silly versions     '0.2.3',
silly versions     '0.2.4',
silly versions     '0.2.5',
silly versions     '0.2.6',
silly versions     '0.2.7',
silly versions     '0.3.0',
silly versions     '0.4.0',
silly versions     '0.5.0',
silly versions     '0.5.1',
silly versions     '0.5.2',
silly versions     '0.5.3',
silly versions     '0.5.4',
silly versions     '0.5.5',
silly versions     '0.5.6',
silly versions     '0.5.7',
silly versions     '0.5.8',
silly versions     '0.5.9',
silly versions     '0.5.10',
silly versions     '1.0.0',
silly versions     '1.0.1',
silly versions     '2.2.2',
silly versions     '2.3.0',
silly versions     '2.3.1',
silly versions     '2.3.2',
silly versions     '2.3.3',
silly versions     '1.9.1',
silly versions     '2.3.4',
silly versions     '2.3.5',
silly versions     '2.3.6',
silly versions     '2.3.7',
silly versions     '1.9.2',
silly versions     '2.3.8',
silly versions     '2.3.9',
silly versions     '2.4.0',
silly versions     '2.4.1',
silly versions     '2.4.2',
silly versions     '2.4.3',
silly versions     '2.4.4',
silly versions     '2.4.5',
silly versions     '2.4.6',
silly versions     '2.5.0',
silly versions     '2.6.0' ] ]
verbose about to build C:\node\node_modules\node-inspector
info unbuild C:\node\node_modules\node-inspector
verbose from cache C:\node\node_modules\node-inspector\package.json
info preuninstall node-inspector@0.2.0beta3
info uninstall node-inspector@0.2.0beta3
verbose unbuild node-inspector@0.2.0beta3 [ true, 'C:\\node\\node_modules', 'C:\\node\\node_modules' ]
verbose binRoot [ 'C:\\node', { 'node-inspector': './bin/inspector.js' } ]
info postuninstall node-inspector@0.2.0beta3
verbose mkdir (expected) error ENOENT, stat 'C:\Users\TMNUWA~1\AppData\Local\Temp\npm-1350396038472'
verbose mkdir (expected) error ENOENT, stat 'C:\Users\TMNUWA~1\AppData\Local\Temp\npm-1350396038472\1350396038472-0.1267407638952136'
verbose mkdir done: C:\Users\TMNUWA~1\AppData\Local\Temp\npm-1350396038472\1350396038472-0.1267407638952136 755
verbose fetch to C:\Users\TMNUWA~1\AppData\Local\Temp\npm-1350396038472\1350396038472-0.1267407638952136\tmp.tgz
verbose mkdir done: C:\Users\TMNUWA~1\AppData\Local\Temp\npm-1350396038472\1350396038472-0.1267407638952136 755
http GET https://registry.npmjs.org/socket.io/-/socket.io-0.9.10.tgz
ERR! Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
ERR! Valid install targets:
ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2"",""2.3.8"",""2.3.9"",""2.4.0"",""2.4.1"",""2.4.2"",""2.4.3"",""2.4.4"",""2.4.5"",""2.4.6"",""2.5.0"",""2.6.0""]
ERR!     at installTargetsError (C:\node\node_modules\npm\lib\cache.js:488:10)
ERR!     at next_ (C:\node\node_modules\npm\lib\cache.js:438:17)
ERR!     at next (C:\node\node_modules\npm\lib\cache.js:415:44)
ERR!     at C:\node\node_modules\npm\lib\cache.js:408:5
ERR!     at saved (C:\node\node_modules\npm\lib\utils\npm-registry-client\get.js:150:7)
ERR!     at C:\node\node_modules\npm\node_modules\graceful-fs\graceful-fs.js:231:7
ERR!     at Object.oncomplete (fs.js:297:15)
ERR! You may report this log at:
ERR!     <http://github.com/isaacs/npm/issues>
ERR! or email it to:
ERR!     npm-@googlegroups.com
ERR! 
ERR! System Windows_NT 6.0.6001
ERR! command ""C:\node\\node.exe"" ""C:\node\node_modules\npm\bin\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
ERR! cwd C:\node\dev
ERR! node -v v0.8.12
ERR! npm -v 1.1.9
ERR! message No compatible version found: connect@'>=1.8.5- <1.9.0-'
ERR! message Valid install targets:
ERR! message [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2"",""2.3.8"",""2.3.9"",""2.4.0"",""2.4.1"",""2.4.2"",""2.4.3"",""2.4.4"",""2.4.5"",""2.4.6"",""2.5.0"",""2.6.0""]
verbose exit [ 1, true ]
",tmnuwan12,2013-03-30 17:33:11
136,2012-10-13 19:42:50,"I have an express project with the server file being app.js.

I run node app.js
I run pgrep -l node in another window
I see 14084 node
I run kill -s USR1 14084
I run node-inspector in another window
I go to http://127.0.0.1:8080/debug?port=5858 and I see no scripts

I did notice this looks a little funny....
   visit http://0.0.0.0:8080/debug?port=5858 to start debugging

But I see the UI fine.
",jrgleason,2013-03-30 17:39:56
136,2012-10-13 19:46:18,"Never mind issue was resolved by dropping the /debug*
",jrgleason,2013-03-30 17:39:56
135,2012-10-10 08:00:09,"I have node-inspector all working perfectly apart from it does not show scripts at the root level.  

I see all scripts in my node_modules folders and other sub folders but not the ones at the root of my application. 

I do see however, scripts such as assert.js, http.js, url.js at the root level however these are not in the root folder of my application.

My app is built with node.js and express.js

Here is a video showing it - http://www.youtube.com/watch?v=olhqZOhWo0g
",jchannon,2013-03-30 17:39:55
135,2013-01-18 17:05:30,"Had the same issue until updated to latest version of nodejs
",HongKilDong,2013-03-30 17:39:55
135,2013-02-20 06:39:05,"Exact same problem here.. node 0.8.20, node-inspector@0.2.0beta3 on Mac OS X. I can see sub-directory files, but no main script(in my case, server.js on my project root.)
",hansanghoon,2013-03-30 17:39:55
135,2013-07-24 10:02:11,"Can you reproduce the problem in the latest 0.3.x version?
",bajtos,2013-03-30 17:39:55
134,2012-09-27 00:02:43,"In Chrome Inspector, you can view web page objects in a collapsible/expandable tree view by console.log()'ing them... With node, the output goes to the terminal... How do I see the tree view instead so I can easily browse objects?
",trusktr,2013-03-30 17:39:55
134,2013-07-24 10:04:52,"@trusktr This feature is not implemented. See strongloop/node-inspector#29 for a related discussion.
",bajtos,2013-03-30 17:39:55
134,2013-08-15 04:02:30,"@bajtos Such a feature would be extremely nice (i've no time to code it though). Just on my wish list. Maybe something exists since posting this...
",trusktr,2013-03-30 17:39:55
133,2012-09-14 09:01:48,"node-inspector displays absolute path of files containing user code & non-built-in node modules. This makes the ""Scripts"" window hardly readable when having a deep directory structure.

Would it be possible to have the file path given only relatively to the containing folder? This is the chrome inspector default behaviour. Ideally, the containing folder displayed path would be relative either to the node cwd() or to the node-inspector cwd().

![Screenshot](http://static.inky.ws/image/2817/image.jpg)
",asnowfix,2013-03-30 17:39:55
133,2012-11-04 15:00:40,"Definitely the node `cwd`, as the cwd for where node-inspector gets launched has nothing to do with whatever node program is running.

+1 for this feature.
",DavidSouther,2013-03-30 17:39:55
133,2012-11-17 16:42:55,"+1
",brandonramirez,2013-03-30 17:39:55
133,2012-11-17 16:49:48,"I committed for the requirement
Before the code is merged, you can update your code by yourself
https://github.com/mongris/node-inspector/commit/824322f1a7bb2eafbe6edb58a4e88833d19898cb
",mongris,2013-03-30 17:39:55
133,2012-11-23 15:03:25,"+1
",jsilveira,2013-03-30 17:39:55
133,2012-12-22 09:30:12,"Is this feature is implemented?? 
Just downloaded fresh module, but I am still getting the long list of file in script section..!!
",mayurdabhi,2013-03-30 17:39:55
133,2013-02-20 06:40:32,"+1 for this feature. definitely.
0.2.0beta3 doesn't contain this feature yet. 
",hansanghoon,2013-03-30 17:39:55
133,2013-03-30 21:59:14,"Any comment on why are you closing it? Thx
",jsilveira,2013-03-30 17:39:55
133,2013-07-24 10:08:41,"Check out the latest 0.3.x version, there is a nice tree-view file navigator and you can also use Cmd+O/Ctrl+O to open a ""jump to a file with search"" dialog.

![image](https://f.cloud.github.com/assets/1140553/847815/f9c58116-f448-11e2-8298-5822f26e33a1.png)

See [our blogpost](http://blog.strongloop.com/announcing-a-new-and-improved-node-js-debugger/) for other cool features added in the 0.3 version.
",bajtos,2013-03-30 17:39:55
132,2012-09-03 04:54:30,"# SORRY: this issue belongs to ""nodev""

node-inspector can't spawn ""node-inspector"", with stderr.out ""CreateProcessW: No such file or directory"", Error=127. Here is my environment:
Windows XP SP3, node.js 0.6.8 with globally installed node-inspector 0.2.0beta3
after debugging nodev.js I found the problem and finally fixed it:
in file ""nodev.js"" Line 201:

function startNode(){
.
//inspector = spawn('node-inspector', ['--web-port=5801']); //bug 
inspector = spawn('node-inspector' + (isWindows ? '.cmd' : ''), ['--web-port=5801']); //fixed for Windows, just add "".cmd"" extension

}
",jim4node,2013-03-30 17:39:55
132,2012-09-16 11:53:13,"Getting ECONNREFUSED with this fix but at least it seems to run.
",MisterY,2013-03-30 17:39:55
131,2012-09-03 04:31:42,"Hello, I get the following error when I try to access the node-inspector remotely:

http.js:644
    throw new Error('Can\'t set headers after they are sent.');
          ^
Error: Can't set headers after they are sent.
    at ServerResponse.OutgoingMessage.setHeader (http.js:644:11)
    at ServerResponse.res.setHeader (/usr/local/lib/node_modules/node-inspector/node_modules/connect/lib/patch.js:62:20)
    at exports.send (/usr/local/lib/node_modules/node-inspector/node_modules/connect/lib/middleware/static.js:168:11)
    at Object.oncomplete (fs.js:308:15)
    at process.startup.processMakeCallback.process._makeCallback (node.js:248:20)

I'm running Ubuntu 10.10 on my server, and accessing the <server's IP address>:8080 using Chrome 21.0.1180.83 m on Windows 7.

This happens no matter what node app I'm trying to debug, whether hand-rolled ones or test/sample scripts. Any advice would be great.

edit: Using Nodejs version 0.9.2-pre (I'm going to try an older version)
edit-on-the-edit: When I reverted to stable v0.8.8, it works like a charm! Must be something hinky in the latest build. Closing the issue
",Skeletoneyes,2012-09-03 08:02:07
131,2012-10-16 14:58:13,"I'm having the same issue. I think it's still a valid issue since NodeJS will continue to move forward. It is important for this project to keep up with changes there. Though, it doesn't look like anybody's working on this stuff anymore.
",jwarkentin,2012-09-03 08:02:07
130,2012-09-03 02:25:03,"The cluster (http://nodejs.org/api/cluster.html) node feature spawn child processes, normally one per CPU.
Without using cluster, node-inspector works like a charm; however, with cluster, node-inspector doesn't allow debugging of child processes' code.
In the example below, if you put a breakpoint at the ""for"" statement and another one at the ""var app"" statement, you will see that only the ""for"" one breaks.
If there are files being require()d for the child processes (as almost always is the case), node-inspector will not list those files. 

If cannot be fixed, probably worth mentioning in the Known Issues section of the md (I don't mind adding this).

Example: 

<S_CODE_TOKEN>
",myok12,2013-03-30 17:39:55
130,2012-10-12 18:17:29,"I've been having the same problem, nice to see I'm not alone here.
",srathbun,2013-03-30 17:39:55
130,2012-11-16 11:47:45,"I have the same problem too. Looks like the child processes that are forked are not in debug mode, If there is a way to fork them with the debug argument maybe it will work.
",pavele,2013-03-30 17:39:55
130,2012-11-28 21:44:33,"+1
",mexpolk,2013-03-30 17:39:55
130,2012-12-02 07:27:56,"+1
",meltzerj,2013-03-30 17:39:55
130,2013-01-25 01:31:17,"FWIW: The reason I suspect is that the `node` debugger needs to bind to the debug port (default: 5858). If you are using Cluster, I am guessing the master/controller binds first, and succeeds, causing the bind in the children/workers to fail. While a port can be supplied to `node --debug=N` there seems to be no easy way to do this when node is invoked within Cluster for the worker (it might be possible to programmatically set `process.debug_port` and then enable debugging, but I haven't got that working yet). Which leaves a bunch of options: 1) start `node` without the `--debug` option, and once it is running, find the _pid_ for the worker process you want to debug/profile, and send it a USR1 signal to enable debugging. Another option is to write a wrapper for node that calls the real node binary with  `--debug` set to a unique port each time. There are possibly options in Cluster that let you pass such as arg as well.
",ravi,2013-03-30 17:39:55
130,2013-02-28 11:40:05,"+1
",miktam,2013-03-30 17:39:55
130,2013-03-21 17:12:39,"Has there been any developments on this?
",9point6,2013-03-30 17:39:55
130,2013-03-30 20:50:12,"Hi @dannycoates,

Why this issue is closed now? is there a fix for this already? 

@ravi sending the USR1 signal does not work, that was my first guess. Option #2 really not an option.
",mexpolk,2013-03-30 17:39:55
130,2013-03-30 21:08:48,"Sorry, this isn't fixed, and probably won't ever be. I closed a bunch of issues without comment because I needed to declare ""issue bankruptcy"".

I've seen @ravi's suggestion work, but it's fragile. There certainly should be an easy way to debug child processes, but I think its out of scope for node-inspector.
",dannycoates,2013-03-30 17:39:55
130,2013-03-30 21:17:18,"IMHO, this is more of a Cluster issue: given that `node` takes the debug port on the command-line, Cluster needs to provide a way to specify separate debug ports per instance/worker.
",ravi,2013-03-30 17:39:55
130,2013-04-17 15:41:08,"I've opened issue in node.js
https://github.com/joyent/node/issues/5318
",pavele,2013-03-30 17:39:55
130,2014-05-02 04:13:03,"In which, @bnoordhuis posted a temporary workaround: https://github.com/joyent/node/issues/5318#issuecomment-16702390
",jpillora,2013-03-30 17:39:55
130,2014-05-09 18:07:23,"[Our blog post](http://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/) describes how to debug clustered node apps.
",bajtos,2013-03-30 17:39:55
130,2014-07-03 15:04:13,"May I know where to set ""process._debugPort = 5858 + cluster.worker.id""?

After running ""http://127.0.0.1:8080/debug?port=5858"", do i need to set it from console?
Regards,
",chi-e,2013-03-30 17:39:55
130,2014-07-03 16:13:29,"@chi-e You have to put that line in the source code of your child process.

Example:

<S_CODE_TOKEN>
",bajtos,2013-03-30 17:39:55
129,2012-08-30 04:36:21,"Not an issue but a suggestion. In the FAQ/WTF section ""I don't see one of my script files in the file list."", refreshing did not actually help for me.

I found the reason was that I had undead (?) node processes hanging around in the background. killall node fixed the problem and the inspector went back to working beautifully.

Thanks for this incredible tool! Keep up the great work.
",simon-lang,2013-03-30 17:39:55
128,2012-08-22 15:00:16,"When using node-inspector for debugging, setting a breakpoint in the function body of a callback function of sql.open(...)  (or conn.queryRaw(...)) causes the node process to terminate.

You can reproduce this by setting a breakpoint anywhere in the body of the callback function as indicated below.

<S_CODE_TOKEN>

I'm not convinced that this is a node-sqlserver issue per se but I see a SO question on the same thing.  I have also cross-posted the issue on windowsazure/node-sqlserver. 

Any pointers on how to get this working would be great!
",clintwood,2013-03-30 17:39:55
127,2012-08-16 15:22:29,"Hello,

i updated node-inspector to the latest version via npm in Windows with this solution (due to dependency bug of socket.io):
http://stackoverflow.com/questions/11695739/installing-node-inspector-on-windows

Using Chrome as Frontend (21.0.1180.79 m).
The Script Content Panel is somehow broken,
like all open tabs are visible in parallel and line numbers are below the content, see this screenshot:
http://www.picvalley.net/v.php?p=u/1953/4808737154318058931345130446Nq04b5n0Njmw031HssZD.PNG 
",derMart,2013-03-30 17:36:13
126,2012-08-10 06:27:51,"node: 0.6.19
node-inspect: 0.2.0beta3
chrome: 21.0.1180.75

I can see script and console tabs, but can't see profile tab. 
How can I open the profile tab?
",helloliuchen,2013-02-05 08:03:54
126,2012-08-14 10:46:17,"Same here. node: 0.6.19, node-inspector: 0.2.0beta3, different browsers.
",adrianheine,2013-02-05 08:03:54
126,2012-08-14 13:59:55,"Chiming in, same problem. 

Node 0.8.6
node-inspect 0.2.0beta3
Chromium (linux-x64) 18.0.1025.168
",rhoot,2013-02-05 08:03:54
126,2012-08-17 10:45:20,"+1 I know its experimental and all, but followed instructions, and same here, no profiles tab/button anywhere
",christopherdebeer,2013-02-05 08:03:54
126,2012-08-21 10:24:39,"Same problem. Tried downgrading to 0.1.10 and now I see the tab.
",kangax,2013-02-05 08:03:54
126,2012-09-12 21:49:45,"I tried using 0.1.10 and don't see the profile tab.
node version: v0.6.12
Chrome: 18.0.1025.168 (Developer Build 134367 Linux) Ubuntu 12.04

I also updated to chrome: Version 21.0.1180.89 Ubuntu 12.04 (154005)
and there is no profile button there either.

To see if I could find it, I opened up the console and there are many errors reported:

Request with id = 3 failed. Profiler.causesRecompilation not implemented devtools.js:4151
Request with id = 4 failed. Profiler.isSampling not implemented devtools.js:4151
Request with id = 5 failed. Profiler.hasHeapProfiler not implemented devtools.js:4151
Request with id = 6 failed. Timeline.supportsFrameInstrumentation not implemented devtools.js:4151
Request with id = 7 failed. Page.canOverrideDeviceMetrics not implemented devtools.js:4151
Request with id = 8 failed. Network.setCacheDisabled not implemented devtools.js:4151
Request with id = 9 failed. Network.enable not implemented devtools.js:4151
Request with id = 10 failed. Page.enable not implemented devtools.js:4151
Request with id = 11 failed. Network.enable not implemented devtools.js:4151
Request with id = 12 failed. Page.getResourceTree not implemented devtools.js:4151
Uncaught TypeError: Cannot read property 'frame' of undefined devtools.js:14739
Request with id = 13 failed. CSS.enable not implemented devtools.js:4151
Request with id = 14 failed. CSS.getSupportedCSSProperties not implemented devtools.js:4151
Uncaught TypeError: Cannot call method 'slice' of undefined devtools.js:27624
Request with id = 15 failed. Worker.setWorkerInspectionEnabled not implemented devtools.js:4151
Request with id = 18 failed. Console.setMonitoringXHREnabled not implemented devtools.js:4151
Request with id = 20 failed. Inspector.enable not implemented devtools.js:4151
Request with id = 21 failed. Database.enable not implemented devtools.js:4151
Request with id = 22 failed. DOMStorage.enable not implemented devtools.js:4151
Request with id = 23 failed. DOM.setTouchEmulationEnabled not implemented 
",seth4618,2013-02-05 08:03:54
126,2012-09-22 20:44:10,"Same for me with chrome version 21.0.1180.89, errors in chrome console and when I hit F5 I get errors from node-inspector itself:

http.js:644
    throw new Error('Can\'t set headers after they are sent.');
          ^
Error: Can't set headers after they are sent.
    at ServerResponse.OutgoingMessage.setHeader (http.js:644:11)
    at ServerResponse.res.setHeader (/usr/local/lib/node_modules/node-inspector/node_modules/connect/lib/patch.js:62:20)
    at exports.send (/usr/local/lib/node_modules/node-inspector/node_modules/connect/lib/middleware/static.js:168:11)
    at Object.oncomplete (fs.js:308:15)
    at process.startup.processMakeCallback.process._makeCallback (node.js:248:20)

Mind you during install there were issues, can list if its useful but switching back to 0.1.10 did the job anyway.
",colin-jack,2013-02-05 08:03:54
126,2012-10-04 15:43:08,"Same issue with chrome 22.0.1229.79, can't see `Profiles` tab with current version of `node-inspector`. I can see the Profile tab only if I downgrade to version `0.1.10`.
",ttezel,2013-02-05 08:03:54
126,2012-10-16 02:02:21,"Same issue on node 0.8.11. Downgrading to version 0.1.10, I get the following error when I try and take a heap snapshot as well:

dyld: lazy symbol binding failed: Symbol not found: __ZNK2v813HeapGraphNode16GetDominatorNodeEv
  Referenced from: /Users/jmarrama/verbling/verbling-main/back/node_modules/v8-profiler/build/Release/profiler.node
  Expected in: dynamic lookup

dyld: Symbol not found: __ZNK2v813HeapGraphNode16GetDominatorNodeEv
  Referenced from: /Users/jmarrama/verbling/verbling-main/back/node_modules/v8-profiler/build/Release/profiler.node
  Expected in: dynamic lookup
",jmarrama,2013-02-05 08:03:54
126,2012-10-28 08:35:53,"+1 on node v0.8.14 
",changeYi,2013-02-05 08:03:54
126,2012-10-30 10:49:47,"The lack of commits/activity makes me think this project is dead?
",colin-jack,2013-02-05 08:03:54
126,2012-10-31 19:53:36,"+1, yeap, looks like it's dead, we would have to find another tools to debug leaks it seems
",andrusha,2013-02-05 08:03:54
126,2012-11-13 00:11:39,"+1
",corpix,2013-02-05 08:03:54
126,2012-11-27 20:22:20,"Chrome: 23.0.1271.64
Node: 0.8.14
node-inspector: 0.2.0beta3
Ubuntu 12.04.1 LTS
",kevireilly,2013-02-05 08:03:54
126,2012-11-29 09:37:50,"Any comments? @dannycoates
",corpix,2013-02-05 08:03:54
126,2012-12-05 10:57:07,"+1

Details:
Chrome: 23.0.1271.95
Node: v0.8.14
node-inspector: 0.2.0beta3
Mac OSX Mountain Lion

I'm also getting the errors in the Chrome console:
Request with id = 3 failed. Profiler.causesRecompilation not implemented devtools.js:4151
Request with id = 4 failed. Profiler.isSampling not implemented devtools.js:4151
Request with id = 5 failed. Profiler.hasHeapProfiler not implemented devtools.js:4151
Request with id = 6 failed. Timeline.supportsFrameInstrumentation not implemented devtools.js:4151
Request with id = 7 failed. Page.canOverrideDeviceMetrics not implemented devtools.js:4151
Request with id = 8 failed. Network.enable not implemented devtools.js:4151
Request with id = 9 failed. Page.enable not implemented devtools.js:4151
Request with id = 10 failed. Network.enable not implemented devtools.js:4151
Request with id = 11 failed. Page.getResourceTree not implemented devtools.js:4151
Uncaught TypeError: Cannot read property 'frame' of undefined devtools.js:14739
Request with id = 12 failed. CSS.enable not implemented devtools.js:4151
Request with id = 13 failed. CSS.getSupportedCSSProperties not implemented devtools.js:4151
Uncaught TypeError: Cannot call method 'slice' of undefined devtools.js:27624
Request with id = 14 failed. Worker.setWorkerInspectionEnabled not implemented devtools.js:4151
Request with id = 18 failed. Inspector.enable not implemented devtools.js:4151
XHR finished loading: ""http://0.0.0.0:8080/scriptsPanel.css"". devtools.js:5294
XHR finished loading: ""http://0.0.0.0:8080/splitView.css"". devtools.js:5294
XHR finished loading: ""http://0.0.0.0:8080/tabbedPane.css"". devtools.js:5294
Request with id = 19 failed. Database.enable not implemented devtools.js:4151
Request with id = 20 failed. DOMStorage.enable not implemented devtools.js:4151
Request with id = 21 failed. DOM.setTouchEmulationEnabled not implemented devtools.js:4151
3
Uncaught TypeError: Cannot call method 'match' of undefined devtools.js:15218
XHR finished loading: ""http://0.0.0.0:8080/textViewer.css"". devtools.js:5294
18
Uncaught TypeError: Cannot call method 'match' of undefined devtools.js:15218
",suprememoocow,2013-02-05 08:03:54
126,2012-12-26 09:34:03,"+1.

:unamused:
",ELLIOTTCABLE,2013-02-05 08:03:54
126,2013-01-09 22:19:47,"+1
",flyswatter,2013-02-05 08:03:54
126,2013-01-11 17:25:28,"+1
",svasva,2013-02-05 08:03:54
126,2013-01-12 23:44:40,"+1
",mjpuser,2013-02-05 08:03:54
126,2013-01-13 14:55:48,"+1
",smile21,2013-02-05 08:03:54
126,2013-01-24 19:22:21,"+1 (sadness)
",j03m,2013-02-05 08:03:54
126,2013-01-30 15:38:47,"+1 :(
",chiefy,2013-02-05 08:03:54
126,2013-02-01 16:15:13,"+1 Ah well.
",jasonmadigan,2013-02-05 08:03:54
126,2013-02-01 16:17:22,"This project seem to be dead now. Anyone figured out how to make it work?
",andrusha,2013-02-05 08:03:54
126,2013-02-04 14:46:28,"+1 :(
",StErMi,2013-02-05 08:03:54
126,2013-02-04 19:06:49,"+1
",molnarg,2013-02-05 08:03:54
126,2013-02-05 08:03:54,"Yes, I'm afraid the profile tab here is dead. I've not been able to get the performance or stability to a useful level for anything beyond a trivial program, and I don't have the time to invest to get it working to my satisfaction.

I also apologize for being so unresponsive to this thread, and all the other ones for that matter. I've been grievously derelict in my maintainer duties. You know when you want to just ignore something and hope it just goes away? It **never** works on the internet! Now, 6 months later(!), what can I say? Sorry, I'm an ass. It doesn't make _me_ feel any better, but hopefully you can empathize and we can all move on and still be friends.

On that note I resolve to at least tidy up the rest of these issues, pull requests and the code before I decide what to do with this project in the longer term. If you're at all interested in contributing to the project, please let me know.

Thanks
",dannycoates,2013-02-05 08:03:54
126,2013-02-05 10:15:42,"Alternatives? Anyone?

Nodetime http://nodetime.com/ is not an option for me.
",fdomig,2013-02-05 08:03:54
126,2013-02-05 10:42:19,"I've heard that some people use valgrind, but to be honest, this seem to be dead-end to me
",andrusha,2013-02-05 08:03:54
126,2013-02-07 21:30:23,"[c4milo/node-webkit-agent](https://github.com/c4milo/node-webkit-agent) helped me track down a nasty leak this week, seems like a good fork of this project.
",chiefy,2013-02-05 08:03:54
126,2013-03-21 04:03:58,"I've done up a list of alternatives here for those interested: https://gist.github.com/balupton/3944017
",balupton,2013-02-05 08:03:54
126,2013-03-22 09:36:02,"I wonder whether @isaacs or @piscisaureus might be able to think of someone that could take the project over; this is one of the best debugging tools for NodeJS, it'd be a massive shame to see it die.
",Siyfion,2013-02-05 08:03:54
126,2013-03-25 17:23:40,"There are forks that work - check my comment above.
",chiefy,2013-02-05 08:03:54
126,2013-04-01 09:26:24,"Danny, could you please let me know how to contribute to this project? Any terms?  Thanks.
",librah,2013-02-05 08:03:54
126,2013-04-09 20:53:03,"You can still use node-inspector by downgrading as noted in some of the comments here. That is as easy as running ""npm install node-inspector@0.1.10 -g"". Prefix that with sudo as needed.
",markboydcode,2013-02-05 08:03:54
126,2013-05-01 13:21:22,"Hey @dannycoates, how much money do you need to continue to support this project? If you setup a crowd-sourcing campaign I'd happily chip in. https://www.bountysource.com/ seems to work great for coding projects.

For rewards you could do something like:
- $50 get your name in the Backers.md file
- $150 get your name in the Backers.md file, plus a shirt
- $250 get your name and url in the Backers.md file, plus a shirt
- $500 get your name, url, and a 140 char description in the Backers.md file, plus a shirt
- $1000 get your logo as a link in the Backers.md file, plus a shirt

Just spit-balling with the rewards, whatever works.
",balupton,2013-02-05 08:03:54
126,2013-05-17 18:10:58,"@dannycoates :+1: not a bad idea! I'm from the Bountysource team, we also offer merchandise fulfillment. If you went with @balupton's reward suggestions, we could print the shirts and mail em for you too.
",ccverg,2013-02-05 08:03:54
126,2013-05-17 18:20:05,"+1

On Fri, May 17, 2013 at 1:10 PM, ccvergara notifications@github.com wrote:

> @dannycoates https://github.com/dannycoates [image: :+1:] not a bad
> idea! I'm from the Bountysource team, we also offer merchandise
> fulfillment. If you went with @balupton https://github.com/balupton's
> reward suggestions, we could print the shirts and mail em for you too.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/dannycoates/node-inspector/issues/126#issuecomment-18077319
> .

## 

Martin Murphy
Whiteboard-IT
http://whiteboard-it.com
w: (205) 588-7102
",soitgoes,2013-02-05 08:03:54
126,2013-05-20 10:46:51,"+1
",JeffreyZksun,2013-02-05 08:03:54
126,2013-05-21 06:57:45,"Chiefly commented: ""c4milo/node-webkit-agent ...seems like a good fork of this project.""
",flyswatter,2013-02-05 08:03:54
126,2013-06-18 18:09:33,"+1
",Broham,2013-02-05 08:03:54
126,2013-07-24 09:50:14,"StrongLoop took up the challenge and got Danny's permission to maintain the project further on.

Our first contribution was an upgrade to the latest Blink version of Developer Tools, please checkout the new version (0.3.x) to try the new UI yourself. See [our blogpost](http://blog.strongloop.com/announcing-a-new-and-improved-node-js-debugger/) for more information on the new features.
",bajtos,2013-02-05 08:03:54
126,2013-07-24 11:19:58,"@bajtos I've just taken a look and it looks awesome what you guys have done.. My only question is, why not release it on NPM? I have nothing against StrongLoop, but I definitely don't want to use their pre-packaged version of node.js, sorry!

EDIT: I stand corrected; you have updated the NPM version! Gratz! :smile: 
",Siyfion,2013-02-05 08:03:54
126,2013-11-26 11:56:12,"the leak.js is crashed when i click the ""take heap snapshot"" button.
Expected in: dynamic lookup
",xiaoji121,2013-02-05 08:03:54
126,2013-11-26 12:07:29,"I am afraid profiling is still not supported. See #185.
",bajtos,2013-02-05 08:03:54
126,2014-04-11 13:26:58,"+1
",palominoz,2013-02-05 08:03:54
126,2014-05-27 08:18:06,"+1
",abdula,2013-02-05 08:03:54
126,2014-06-08 14:39:21,"+1
",andrewjmead,2013-02-05 08:03:54
126,2014-07-15 15:06:58,"+1, also can't see the profile tab, with chrome 31.0.1650.63, node-inspector 0.7.4, node 0.10.26
",Serlight,2013-02-05 08:03:54
126,2014-07-17 22:53:22,"+1, node-inspector 0.7.4, node 0.10.29, chrome 36.0

Is there a known working configuration?
",naholyr,2013-02-05 08:03:54
126,2014-07-19 14:36:06,"> Is there a known working configuration?

No. See #185 and related pull requests for the current work in progress.
",bajtos,2013-02-05 08:03:54
126,2014-11-04 17:32:45,"+1
",michaelbpaulson,2013-02-05 08:03:54
126,2014-12-30 09:03:22,"+1
Chrome 39.0.2171.95 m
Node v0.10.35
node-inspector 0.7.4
v8-profiler 4.0.1
",hanjukim,2013-02-05 08:03:54
126,2014-12-30 12:58:25,"Please update to node-inspector 0.8.\* to see profile tab.
",3y3,2013-02-05 08:03:54
125,2012-08-02 03:31:12,"I'm trying to update node-inspector, but I keep getting this error message about hiredis:

<S_CODE_TOKEN>

I'm using PowerShell, but I tried it in Git Bash and GitHub Shell which are both MinGW, and they still give me this error.

What gives?
",samholmes,2013-03-30 17:39:55
125,2012-08-07 04:10:58,"Does node-inspector still support Windows? It's definitely not working in windows, and I have all of the requirements listed in the README.
",samholmes,2013-03-30 17:39:55
125,2012-08-08 10:53:14,"Sam,

You got an error saying: ""'make' is not recognized as an internal or external command,
operable program or batch file.""

go to http://gnuwin32.sourceforge.net/packages/make.htm and download and install make for windows.
after that add the make.exe to PATH variable in environment vairiables.

that should get you pass that problem.
",elishkov,2013-03-30 17:39:55
125,2012-08-10 18:31:20,"Installed make like elishkov said, and now I get an error on hiredis:

<S_CODE_TOKEN>
",samholmes,2013-03-30 17:39:55
124,2012-08-01 14:36:10,"Trying to test node-inspector on a remote dev server(linux box) and when I start up node-inspector nothing happens.  When I browse to ""server:8080/debug?port=5858"" there is no code on the screen.  The UI is there with the console and script buttons but no code.  When I kill the node server I get ""FAILED TO OPEN SOCKET ON PORT 5858, WAITING 1000 MS BEFORE RETRYING"".  
I verified that there is no other process binding to 5858 or 8080.  Any suggestions??  I installed node-inspector via NPM so socket.io was installed as a dependency, but the package.json dependencies for the NPM install and the GIT repository on this page are different.  NPM has ""socket.io, connect, and async"", but the GIT repository has ""socket.io and paperboy""  not sure if this has anything to do with the problem.  Need some help!
",dusts66,2013-03-30 17:39:55
124,2012-09-25 19:17:54,"+1 having same problem
",juzerali,2013-03-30 17:39:55
124,2012-10-28 14:37:46,"+1 , please ?
",alvarolm,2013-03-30 17:39:55
124,2012-10-29 18:48:27,"I found some program was running on my port. May be that is why node-inspector was not working.
",juzerali,2013-03-30 17:39:55
123,2012-07-31 20:51:32,"Happened upon this while I had another issue.  I am trying to run on a remote server, but the debug listener can't connect a socket to the 5858 port.  I tried changing the port to 5859 using ""node --debug=5859 app.js"", but that didn't work.  My app is listening on port 80(not sure if that has anything to do with it).  The node server starts fine and I can browse through routes.  I then run ""node-inspector"" and get the ""visit http://0.0.0.0:8080/debug?port=5858 to start debugging"".  When I go ""server:8080/debug?port=5858"", the UI loads but no code is on the screen and when I stop the node server I get ""Failed to open socket on port 5858, waiting 1000 ms before retrying"". 

So I was looking through the dependencies install through NPM and noticed that NPM used:

""dependencies"": {
    ""socket.io"": ""~0.9"",
    ""connect"": ""~1.8.5"",
    ""async"": ""~0.1""
  }

The package.json file on GitHub is: 

""dependencies"": {
      ""socket.io"": ""~0.8.2"",
      ""paperboy"": ""~0.0.2""
    }

Might this be related to my Issue above???
",dusts66,2013-03-30 17:39:55
123,2012-08-01 20:13:14,"I'm only able to use node-inspector with master, not npm installed version on win7 with newest node.
",polidore,2013-03-30 17:39:55
122,2012-07-28 22:10:33,"Today I posted a question on [stackoverflow](http://stackoverflow.com/questions/11704292/output-to-chrome-console-from-node-js) reguarding `console.log()` and the browser. Which led me to [node-inspector](https://github.com/dannycoates/node-inspector/) as well as [node-codein](https://github.com/ketamynx/node-codein). I just used both of these tools do not work as they should. I wanted to offer a different approach the one used by the [php-consle](http://code.google.com/p/php-console/) for chrome.

There is no reason we should have 2 windows open and different ports, we need a way to intercept `console.log()` and its friends (`.error()`,`.warning()`, etc.) and put it in the normal chrome window's console. The look and feel of the console should be the exact same as the chrome browser! Also I'm interesting in having a [Chrome Extention](https://chrome.google.com/webstore/detail/nfhmhhlpfleoednkpnnnkolmclajemef) simular to php-console. Neither implementations do this and I'm wondering why?

It bothers me that PHP's chrome console for server-side scripting is nicer, more intuitive, easier to use than node's. I want this not to be an issue anymore, I want it to be simple for people to learn node.js and output variables in the brower, speeding up their learning and development times. This was the joy of using `console.log()` on the client side avoiding using archaic methods of output like `document.write()` and `alert()`.

I want to see this built, and I am ready and willing to make that a goal of mine, I have limited node.js knowledge, but that will change over time. I would appreciate any and all feedback on the pitfalls of using a method closer to the php-console's. And why their is no debugger that utilizes the main window's console. I am posting this as an issue both under [node-inspector](https://github.com/dannycoates/node-inspector/issues/122) and [node-codein](https://github.com/ketamynx/node-codein/issues/2) github repo's. Feel free to delete this because it is not really an issue.

You can email me at `thomas@reggi.com`.
",reggi,2013-03-30 17:35:34
121,2012-07-24 15:54:05,"Hello,
I installed the debugger package as instructed. 
I start my application and get the listening message as expected:

[swright@swright-dev node_mongo_test]$ node --debug-brk main.js
debugger listening on port 5858

However nothing is listening on port 8080. I'm not sure where I went wrong:

Thanks for any help you can give me.
",rhythmicdevil,2013-03-30 17:34:15
121,2012-07-24 16:11:56,"Should say that I am using:

[swright@swright-dev node_mongo_test]$ node -v
v0.6.10
[swright@swright-dev node_mongo_test]$ npm -v
1.1.0-3
",rhythmicdevil,2013-03-30 17:34:15
121,2012-07-26 09:48:37,"Actually node-inspector will listen on port 8080. Try to run node-inspector as well, and connect to port 8080.
Hope this would help.
",bhnatt,2013-03-30 17:34:15
121,2012-07-26 11:05:07,"I'm confused. 

Doesnt this start node inspector?

[swright@swright-dev node_mongo_test]$ node --debug-brk main.js
debugger listening on port 5858
",rhythmicdevil,2013-03-30 17:34:15
121,2012-07-26 12:32:38,"@rhythmicdevil No, it starts the node debugger that node-inspector will connect to.
",drudge,2013-03-30 17:34:15
121,2012-07-26 12:49:46,"Aha! Thank you :)
",rhythmicdevil,2013-03-30 17:34:15
120,2012-07-14 16:46:48,"Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR!  
          [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2"",""2.3.8""]

npm is offering me node-inspector 0.1.10

silly versions [ 'node-inspector',
silly versions   [ '0.0.1',
silly versions     '0.0.2',
silly versions     '0.0.3',
silly versions     '0.0.4',
silly versions     '0.1.0',
silly versions     '0.1.1',
silly versions     '0.1.2',
silly versions     '0.1.3',
silly versions     '0.1.4',
silly versions     '0.1.5',
silly versions     '0.1.6',
silly versions     '0.1.7',
silly versions     '0.1.8',
silly versions     '0.1.9',
silly versions     '0.1.10',
silly versions     '0.2.0beta1',
silly versions     '0.2.0beta2',
silly versions     '0.2.0beta3' ] ]

maybe I should just the beta from github

info using npm@1.1.23
info using node@v0.7.10-pre
",crucialfelix,2012-07-14 17:00:06
120,2012-07-14 17:00:06,"updated to node 0.8.2

it succeeds now but with this warning:

npm WARN engine connect@1.8.7: wanted: {""node"":"">= 0.4.1 < 0.7.0""} (current: {""node"":""0.8.2"",""npm"":""1.1.36""})
",crucialfelix,2012-07-14 17:00:06
119,2012-07-12 15:56:41,"Since a recent version, node-inspector quits when node quits, meaning I have to restart it every time I restart node. Is this intentional? Either way, it's quite annoying, given that I now have to restart two processes each time I make a change in my application (restarting node is already annoying enough).
",emilecantin,2013-03-30 17:39:55
119,2012-11-04 15:04:25,"I used to see this problem (about 4 months ago), but it seems to have gone away. 

node 0.8.8
node-inspector 0.2.0beta3
",DavidSouther,2013-03-30 17:39:55
118,2012-07-12 12:27:35,"Hi,
I added an option for node-inspector since I found it useful when I work with other engineers in a same machine.
With --debug-port specified, mutiple node-inspector instances can run at the same time which enables multiple developers to debug their codes simultaneously and independently on a single server.
To use this option, specify debug port in node command as well.
Ex)
$ node --debug-brk=5859 server.js
$ node-inspector --debug-port=5859 --web-port=8080

Thanks.
",bhnatt,2012-07-16 08:13:43
118,2012-07-16 08:10:43,"After testing on changing web-port and debug-port, I have realized that it is already possible to change the debug-port at run time. That is by adding debug?port=5859, for example, at the end of the url, I can use debug port on 5859, which means I don't need to specifiy --debug-port option in node-inspector command explicitly.
ex) 
$ node --debug-brk=5859 server.js
$ node-inspector --web-port=8080
http://myserver:8080/debug?port=5859

Simple. So, I close this pull request.
And, I think it would be good if the manual includes this kind of usage.
Anyway, node-inspector is just great for node programmers.

Thanks.
",bhnatt,2012-07-16 08:13:43
117,2012-07-10 10:30:03,"Hi!

I know that this change isn't relevant, but I think that printing 127.0.0.1 is much better than 0.0.0.0 in the ""visit to start debugging"" message. 

The reasons? 0.0.0.0 makes sense to get the node-inspector binded to all interfaces, yes, but for browsing local resources the most common practice is by using the ""localhost"" or the ""127.0.0.1"" address.

Kind regards!
",javihernandez,2013-03-30 18:00:32
117,2012-10-10 17:59:46,"Agree!
",jchannon,2013-03-30 18:00:32
116,2012-07-03 21:17:16,"Hi Danny, 

Added a Q to the FAQ about saved breakpoints with the debugger statement.  Thanks for your help.  

-George
",georgesnelling,2013-12-02 13:53:02
116,2013-07-24 17:26:37,"@georgesnelling Hi George, thank you for the pull request. The new version (0.3.x) of node inspector saves breakpoints in browser's local storage and restores them automatically.

Please let me know if this feature solves your problem. If you still need to put `debugger;` statements into your code, then it makes sense to update FAQ. However, the answer should state when the breakpoints are restored by node inspector and in which cases it's necessary to use `debugger;` statement.
",bajtos,2013-12-02 13:53:02
116,2013-12-02 13:53:02,"I am closing the issue as there was no reply in 4 months.
",bajtos,2013-12-02 13:53:02
115,2012-06-30 18:00:32,"Can't get scripts to display or anything working with recent version of node
",claytongulick,2013-03-30 17:39:55
115,2012-07-01 09:09:16,"I'm using node 0.8.1 and everything working correctly, so maybe you'll need to be more specific.

Are you using a WebKit based browser? If you're not, that's the issue.
",Arcnor,2013-03-30 17:39:55
115,2012-07-02 06:18:19,"Same problem here, node 0.8.1 and Chrome Stable Channel v20.0.1132.47
",imcotton,2013-03-30 17:39:55
115,2012-07-02 07:25:00,"@sdolard I've tried with `sudo npm install -g connect async`, but got no luck, the debug page just shows nothing, however that node thread seems stay as been hooked up.
",imcotton,2013-03-30 17:39:55
115,2012-07-02 07:53:12,"@sdolard That's exactly the order I've been following, I think it's might be caused by this new version of Chrome? Right now the debugging page only shows blank with one odd search bar on top of it.
",imcotton,2013-03-30 17:39:55
115,2012-07-02 11:22:49,"It's happens on my side with win7 x64 and Chrome 20.0.1132.47, just tried on Ubuntu 12.04 x64 with same version of Chrome, and it's goes well.

So it's appear that caused by Chrome on Windows?
",imcotton,2013-03-30 17:39:55
115,2012-07-02 19:59:49,"Sorry, I should have provided more information in the original post. Using:
Windows 7 x64
Chrome 19.0.1084.56
Node 0.8.1
Most recent node-inspector from npm.
",claytongulick,2013-03-30 17:39:55
115,2012-07-09 22:03:57,"Not working on Ubuntu 10.04, gives the following:
npm http GET https://registry.npmjs.org/node-inspector
npm http 200 https://registry.npmjs.org/node-inspector
npm http GET https://registry.npmjs.org/node-inspector/-/node-inspector-0.2.0beta3.tgz
npm http GET https://registry.npmjs.org/connect
npm http GET https://registry.npmjs.org/async
npm http GET https://registry.npmjs.org/socket.io
npm http 304 https://registry.npmjs.org/connect
npm http 304 https://registry.npmjs.org/async
npm ERR! Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2""]
npm ERR!     at installTargetsError (/usr/local/lib/node_modules/npm/lib/cache.js:506:10)
npm ERR!     at next_ (/usr/local/lib/node_modules/npm/lib/cache.js:452:17)
npm ERR!     at next (/usr/local/lib/node_modules/npm/lib/cache.js:427:44)
npm ERR!     at /usr/local/lib/node_modules/npm/lib/cache.js:419:5
npm ERR!     at saved (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/get.js:136:7)
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:230:7
npm ERR!     at Object.oncomplete (fs.js:297:15)
npm ERR!  [Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2""]]
npm ERR! You may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com

npm ERR! System Linux 3.0.0-16-virtual
npm ERR! command ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""node-inspector""
npm ERR! cwd /portico/node/mqtt-broker
npm ERR! node -v v0.8.0
npm ERR! npm -v 1.1.32
npm ERR! message No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! message Valid install targets:
npm ERR! message [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2""]
npm http 200 https://registry.npmjs.org/socket.io
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /portico/node/mqtt-broker/npm-debug.log
npm ERR! not ok code 0
ubuntu@ip-10-226-90-239:/portico/node/mqtt-broker$ sudo npm install -g node-inspector
npm http GET https://registry.npmjs.org/node-inspector
npm http 304 https://registry.npmjs.org/node-inspector
npm http GET https://registry.npmjs.org/socket.io
npm http GET https://registry.npmjs.org/connect
npm http GET https://registry.npmjs.org/async
npm http 304 https://registry.npmjs.org/socket.io
npm http 304 https://registry.npmjs.org/connect
npm http 304 https://registry.npmjs.org/async
npm ERR! Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2""]
npm ERR!     at installTargetsError (/usr/local/lib/node_modules/npm/lib/cache.js:506:10)
npm ERR!     at next_ (/usr/local/lib/node_modules/npm/lib/cache.js:452:17)
npm ERR!     at next (/usr/local/lib/node_modules/npm/lib/cache.js:427:44)
npm ERR!     at /usr/local/lib/node_modules/npm/lib/cache.js:419:5
npm ERR!     at saved (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/get.js:136:7)
npm ERR!     at /usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:230:7
npm ERR!     at Object.oncomplete (fs.js:297:15)
npm ERR!  [Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2""]]
npm ERR! You may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com

npm ERR! System Linux 3.0.0-16-virtual
npm ERR! command ""/usr/local/bin/node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd /portico/node/mqtt-broker
npm ERR! node -v v0.8.0
npm ERR! npm -v 1.1.32
npm ERR! message No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! message Valid install targets:
npm ERR! message [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.5"",""2.3.6"",""2.3.7"",""1.9.2""]
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /portico/node/mqtt-broker/npm-debug.log
npm ERR! not ok code 0
",radekg,2013-03-30 17:39:55
115,2012-07-09 22:27:38,"Interesting, I've done this
curl http://npmjs.org/install.sh | sudo sh
and it suddenly installed not problem.
",radekg,2013-03-30 17:39:55
115,2012-07-11 02:54:35,"Yes, I had pretty much the same problem; updating npm (which you can also do via npm update npm -g) and then installing node-inspector work.
",jimmcslim,2013-03-30 17:39:55
115,2012-07-11 20:50:59,"i've got node 0.8.2 and it's not installing on win7 64bit. :(  Anyone find a way around?
",traviscooper,2013-03-30 17:39:55
115,2012-08-26 01:40:12,"I'm having the same problem on OSX 10.7.4 with Chrome 21.0.1180.82 and Node 0.8.3. I tried in Safari 6.0 (7536.25) too. I also tried installing async and connect globally and that didn't work either. I even updated to the latest version from the git repo. 

I still cannot see any scripts listed in the drop down.
",craigmaslowski,2013-03-30 17:39:55
115,2012-08-26 19:56:31,"Restarting Chromium/Chrome fixed my problems so far.
",asnowfix,2013-03-30 17:39:55
115,2012-09-03 01:32:39,"I have the same problem with Node v0.8.0 in Win7 64Bits :(
Here is the Error:

npm ERR! message No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! message Valid install targets:
npm ERR! message [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0
"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0
"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.1
0"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4"",""2.3.
5"",""2.3.6"",""2.3.7"",""1.9.2"",""2.3.8"",""2.3.9"",""2.4.0"",""2.4.1"",""2.4.2"",""2.4.3"",""2.4.
4""]

:(
",mzalazar,2013-03-30 17:39:55
115,2012-10-16 15:38:36,"I updated npm with command; npm update npm -g
That fixed the issue.
Hope this would be helpful.
Thanks
",tmnuwan12,2013-03-30 17:39:55
114,2012-06-29 10:51:13,"I'm on OSX lion, running

sudo npm install -g node-inspector

but i get this:

<S_CODE_TOKEN>

I've tried setting permissions and group on /usr/loca like this:

<S_CODE_TOKEN>

but i still get the same error. 

Am I asking for help in the right place?

Thanks,

George
",dayglo,2012-06-29 11:49:58
114,2012-06-29 11:50:31,"I've realised that this same thing happens when i try to install socket.io on its own.

Will try elsewhere, sorry to bother.
",dayglo,2012-06-29 11:49:58
114,2012-07-09 20:57:54,"Did you figure this out? I'm having the same problem on Lion. 
",JoshuaGross,2012-06-29 11:49:58
114,2012-07-09 23:13:53,"I had to completely trash /usr/local and reinstall homebrew, node,
everything. Didnt take long.

On 9 July 2012 21:57, Joshua Gross <
reply@reply.github.com

> wrote:
> 
> Did you figure this out? I'm having the same problem on Lion.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> 
> https://github.com/dannycoates/node-inspector/issues/114#issuecomment-6859406
",dayglo,2012-06-29 11:49:58
113,2012-06-28 11:21:31,"c:\Program Files\nodejs>npm install -g node-inspector
npm http GET https://registry.npmjs.org/node-inspector
npm http 200 https://registry.npmjs.org/node-inspector
npm http GET https://registry.npmjs.org/node-inspector/-/node-inspector-0.2.0bet
a3.tgz
npm http GET https://registry.npmjs.org/socket.io
npm http GET https://registry.npmjs.org/async
npm http GET https://registry.npmjs.org/connect
npm http 304 https://registry.npmjs.org/connect
npm ERR! Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1
"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1
"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.
0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4""]
npm ERR!     at installTargetsError (c:\Program Files\nodejs\node_modules\npm\li
b\cache.js:506:10)
npm ERR!     at next_ (c:\Program Files\nodejs\node_modules\npm\lib\cache.js:452
:17)
npm ERR!     at next (c:\Program Files\nodejs\node_modules\npm\lib\cache.js:427:
44)
npm ERR!     at c:\Program Files\nodejs\node_modules\npm\lib\cache.js:419:5
npm ERR!     at saved (c:\Program Files\nodejs\node_modules\npm\node_modules\npm
-registry-client\lib\get.js:136:7)
npm ERR!     at c:\Program Files\nodejs\node_modules\npm\node_modules\graceful-f
s\graceful-fs.js:230:7
npm ERR!     at Object.oncomplete (fs.js:297:15)
npm ERR!  [Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1
"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1
"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.
0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4""]]
npm ERR! You may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com

npm ERR! System Windows_NT 6.1.7600
npm ERR! command ""c:\Program Files\nodejs\\node.exe"" ""c:\Program Files\nod
ejs\node_modules\npm\bin\npm-cli.js"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd c:\Program Files\nodejs
npm ERR! node -v v0.8.0
npm ERR! npm -v 1.1.32
npm ERR! message No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! message Valid install targets:
npm ERR! message [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0
"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0
"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.1
0"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3"",""1.9.1"",""2.3.4""]
npm http 200 https://registry.npmjs.org/socket.io
npm http GET https://registry.npmjs.org/socket.io/-/socket.io-0.9.6.tgz
npm http 200 https://registry.npmjs.org/async
npm http GET https://registry.npmjs.org/async/-/async-0.1.22.tgz
npm ERR!
npm ERR! Additional logging details can be found in:
npm ERR!     c:\Program Files\nodejs\npm-debug.log
npm ERR! not ok code 0

c:\Program Files\nodejs>

I'm using node version ""0.8.0"" on windows box.
",Mirodil,2012-09-18 06:54:59
113,2012-06-28 13:54:11,"Same here. Seems like a problem with connect not being available?
",radekg,2012-09-18 06:54:59
113,2012-06-28 14:03:27,"Actually, seems like the version of connect has to be bumped up for node 0.8.0?
",radekg,2012-09-18 06:54:59
113,2012-06-28 14:07:27,"i have installed latest version of connect module, version 2.3.4. I think so.
",Mirodil,2012-09-18 06:54:59
113,2012-06-28 15:26:47,"In the meantime I have installed (on Mac, but for Windows must be something like this) on node 0.8.0:

connect 2.3.4 normally, from the repository

and

node_inspector 0.2.0beta3

from the cache (where must be stored a module copy despite the failed installation). I changed dependencies in 'node_inspector 0.2.0beta3' package.json to ""connect"": "">=1.8.5""

and so installed with the command:

.../src/cache/node-inspector/0.2.0beta3/$ npm install -g package

(I have a path like: .../src/cache/node-inspector/0.2.0beta3/package and the source code is in the 'package' folder)

node-inspector starts normally but I have not tested it yet.
",massimiliano-giroldi,2012-09-18 06:54:59
113,2012-06-29 07:13:31,"Experiencing this issue on Ubuntu - installing via npm using node version ""0.8.0"". Possible (temporary) work-around: Fork and update the package.json file to reference a newer Connect module dependency. I'm fairly new to github/nodejs/npm so this may not be proper procedure. Here's an installation command that uses an updated package.json, nonetheless. It appears to be working on my system.

npm install -g git://github.com/memcap/node-inspector.git
",memcap,2012-09-18 06:54:59
113,2012-06-29 11:17:07,"if i use command 

npm install -g git://github.com/memcap/node-inspector.git

 than i get the following:

C:\Program Files\nodejs>npm install -g git://github.com/memcap/node-inspector.gi
t
npm ERR! git clone git://github.com/memcap/node-inspector.git CreateProcessW: ??
 ??????? ????? ????????? ????.
npm ERR! Error: `git ""clone"" ""git://github.com/memcap/node-inspector.git"" ""C:\\U
sers\\JSERVER2\\AppData\\Local\\Temp\\npm-1340968555875\\1340968555875-0.0164812
39814311266""` failed with 127
npm ERR!     at ChildProcess.<anonymous> (C:\Program Files\nodejs\node_modules\n
pm\lib\utils\exec.js:56:20)
npm ERR!     at ChildProcess.EventEmitter.emit (events.js:91:17)
npm ERR!     at Process._handle.onexit (child_process.js:674:10)
npm ERR!  [Error: `git ""clone"" ""git://github.com/memcap/node-inspector.git"" ""C:\
\Users\\JSERVER2\\AppData\\Local\\Temp\\npm-1340968555875\\1340968555875-0.01648
1239814311266""` failed with 127]
npm ERR! You may report this log at:
npm ERR!     http://github.com/isaacs/npm/issues
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com

npm ERR! System Windows_NT 6.1.7600
npm ERR! command ""C:\Program Files\nodejs\\node.exe"" ""C:\Program Files\nod
ejs\node_modules\npm\bin\npm-cli.js"" ""install"" ""-g"" ""git://github.com/memcap
/node-inspector.git""
npm ERR! cwd C:\Program Files\nodejs
npm ERR! node -v v0.8.0
npm ERR! npm -v 1.1.32
npm ERR! message `git ""clone"" ""git://github.com/memcap/node-inspector.git"" ""C:\\
Users\\JSERVER2\\AppData\\Local\\Temp\\npm-1340968555875\\1340968555875-0.016481
239814311266""` failed with 127
npm ERR!
npm ERR! Additional logging details can be found in:
npm ERR!     C:\Program Files\nodejs\npm-debug.log
npm ERR! not ok code 0

C:\Program Files\nodejs>
",Mirodil,2012-09-18 06:54:59
113,2012-06-29 16:16:50,"@Mirodil Your latest error might be Windows/NPM specific. As suggested in the following thread, maybe using Git Bash will help?

https://github.com/isaacs/npm/pull/2479

Possibly related:

https://github.com/isaacs/npm/issues/search?q=CreateProcessW:
",memcap,2012-09-18 06:54:59
113,2012-06-30 08:28:25,"@memcap i did not think so. when i tried to install with node version 0.6 it worked, but when i tried to install node version 0.8 it could not be installed.
",Mirodil,2012-09-18 06:54:59
113,2012-07-03 22:20:55,"This install error is repeatable on CentOS 6.2, node 0.8.1, with connect 2.3.6. FYI. 
",bayareahank,2012-09-18 06:54:59
113,2012-09-18 06:45:53,"thank you, @memcap , your fork worked for me
",adamschmideg,2012-09-18 06:54:59
112,2012-06-25 14:11:57,"I've just updated node to 0.8.0 (stable) and I've installed node-inspector. Then, when I run node-inspector, I get this:

$
module.js:340
    throw err;
          ^
Error: Cannot find module 'connect'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:280:25)
    at Module.require (module.js:362:17)
    at require (module.js:378:17)
    at Object.<anonymous> (c:\Users\lonsw18\AppData\Roaming\npm\node_modules\nod
e-inspector\lib\debug-server.js:4:12)
    at Module._compile (module.js:449:26)
    at Object.Module._extensions..js (module.js:467:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Module.require (module.js:362:17)

It looks like an install on top of node-inspector 0.1.10 doesn't download connect.
If I remove node-inspector and install 0.2b3 from fresh then it doesn't install at all.
",steveworkman,2013-03-30 17:39:55
112,2012-06-26 14:51:22,"i'm having the same issue... any ideas?
",zertosh,2013-03-30 17:39:55
112,2012-06-26 16:24:04,"i had the same issue, installing latest version from git worked for me: sudo npm install -g git://github.com/dannycoates/node-inspector.git
",alanclarke,2013-03-30 17:39:55
111,2012-06-23 04:22:01,"if launch use 'node-inspector &'
when debug end, and CTRL+C stop it, the port 8080 will still listen by node
then if I want launch again, I need 'lsof -i:8080' and get pid of node listen to 8080 and kill it.
or get warn 'warn  - error raised: Error: listen EADDRINUSE'

if launch use 'node-inspector' without '&', it's ok.
I can launch it again after CTRL+C immediately, with no warn.

why need '&' ?
",siemenliu,2012-06-25 13:47:00
111,2012-06-23 05:18:45,"`&` puts it in the background. You dont _need_ it.
",icholy,2012-06-25 13:47:00
111,2012-06-24 00:22:49,"thank you^_^
",siemenliu,2012-06-25 13:47:00
111,2012-06-24 11:43:54,"usefull commands

<S_CODE_TOKEN>

Example:

<S_CODE_TOKEN>
",icholy,2012-06-25 13:47:00
111,2012-06-25 08:32:13,"very useful
",siemenliu,2012-06-25 13:47:00
111,2012-06-25 13:08:46,"you should close this issue if you feel it's been resolved.
",icholy,2012-06-25 13:47:00
111,2012-06-25 13:47:00,"ok
",siemenliu,2012-06-25 13:47:00
110,2012-06-20 17:45:39,"Relevant error as follows

npm ERR! Error: No compatible version found: connect@'>=1.8.5- <1.9.0-'
npm ERR! Valid install targets:
npm ERR! [""0.0.1"",""0.0.2"",""0.0.3"",""0.0.4"",""0.0.5"",""0.0.6"",""0.1.0"",""0.2.0"",""0.2.1"",""0.2.2"",""0.2.3"",""0.2.4"",""0.2.5"",""0.2.6"",""0.2.7"",""0.3.0"",""0.4.0"",""0.5.0"",""0.5.1"",""0.5.2"",""0.5.3"",""0.5.4"",""0.5.5"",""0.5.6"",""0.5.7"",""0.5.8"",""0.5.9"",""0.5.10"",""1.0.0"",""1.0.1"",""2.2.2"",""2.3.0"",""2.3.1"",""2.3.2"",""2.3.3""]
",JosephMoniz,2012-06-22 23:30:19
110,2012-06-22 22:22:43,"More specifically this isn't directly an error, this is related to the connect.js lib.  It's merely telling you there is a system requirement to have connect at one of those versions between 1.8.5 and 1.9.0, so:

npm install -g connect@1.9.0

BUT since there are plenty of newer versions out there, they should definitely update to 2.2.2 ;)
",mrmowgli,2012-06-22 23:30:19
110,2012-06-22 23:30:19,"Thank you much
",JosephMoniz,2012-06-22 23:30:19
109,2012-06-19 09:30:39,"npm http 304 https://registry.npmjs.org/zeparser/0.0.5
    npm http 304 https://registry.npmjs.org/commander
    npm http 304 https://registry.npmjs.org/options
    npm http GET https://registry.npmjs.org/options/-/options-0.0.3.tgz
    npm http 304 https://registry.npmjs.org/tinycolor
    npm http GET https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz
    npm ERR! TypeError: Cannot call method 'trim' of undefined
    npm ERR!     at readmeDescription (/usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:217:42)
    npm ERR!     at final (/usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:297:33)
    npm ERR!     at /usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:115:33
    npm ERR!     at cb (/usr/lib/node_modules/npm/node_modules/slide/lib/async-map.js:48:11)
    npm ERR!     at /usr/lib/node_modules/npm/node_modules/read-package-json/read-json.js:234:40
    npm ERR!     at [object Object].<anonymous> (fs.js:123:5)
    npm ERR!     at [object Object].emit (events.js:64:17)
    npm ERR!     at fs.js:1190:12
    npm ERR!     at Object.oncomplete (/usr/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:94:5)
    npm ERR!  [TypeError: Cannot call method 'trim' of undefined]
    npm ERR! You may report this log at:
    npm ERR!     http://github.com/isaacs/npm/issues
    npm ERR! or email it to:
    npm ERR!     npm-@googlegroups.com

<S_CODE_TOKEN>
",ijse,2012-06-19 18:42:19
109,2012-06-19 18:42:19,"This looks like an npm issue. It appears to have gotten stuck while downloading one of socket.io's dependencies. I suggest trying again with sudo if you haven't already. If the problem persists, please raise an issue with npm.

Thanks,
Danny
",dannycoates,2012-06-19 18:42:19
108,2012-06-15 00:07:14,"So node-inspector works fine if I run:

`node-inspector`

then in another terminal tab:

`node --debug app`

But if I restart the server, the scripts panel is empty and the node-inspector terminal tab logs 'not connected'. Is this normal behaviour? I would like to run node-inspector once and then restart my app every time I make a change (preferably automatically using a service like nodemon).

Is this possible with node-inspector? If so, any clue on what I'm doing wrong?
",wilsonpage,2013-03-30 17:39:55
108,2012-06-21 16:41:43,"This has been a problem for me as well. 
",stevenleeg,2013-03-30 17:39:55
108,2013-09-02 09:34:21,"@dannycoates in the case where the server has crashed and is brought back up, is there a way for `node-inspector` to detect that the server has been restarted and resume debugging, so you don't have to reload the page to start debugging again?
",spikebrehm,2013-03-30 17:39:55
108,2013-09-02 12:43:56,"@spikebrehm node-inspector cannot detect that the server was restarted. AFAIK Blink Developer Tools do not support that either, which means it's very unlikely we are going to implement this feature.

Note that it's not necessary to restart node-inspector to attach to a new process, all you need to do is to reload the page in the browser.

What's the problem with reloading the page? As of v0.3.x, node-inspector preserves most settings in browser's local storage and restores them when you reload the page.
",bajtos,2013-03-30 17:39:55
108,2013-09-02 12:59:42,"The problem for me with reloading the browser is that 1) it takes several seconds to initialize, and 2) it doesn't preserve the fact that the console drawer has been opened (see attached screenshot with console drawer open).

![screen shot 2013-09-02 at 1 57 52 pm](https://f.cloud.github.com/assets/133937/1067434/6ea4de3c-13cf-11e3-9550-a69c09f4a3d8.png)
",spikebrehm,2013-03-30 17:39:55
108,2013-09-02 13:29:49,"Thanks for a quick reply, now I understand what problem you are facing and I agree the situation is not ideal.

> 1) it takes several seconds to initialize

Can you find out which requests are slowest? 
- Check Network Tab in Chrome DevTools to check HTTP resource requests. Most of the requests should be served from the cache. If they are not then we have an easy target to improve.
- Set `dumpInspectorProtocolMessages = true` in [front-end/InspectorBackend.js](https://github.com/node-inspector/node-inspector/blob/master/front-end/InspectorBackend.js) and add timing info to the logged messages. This will allow you to find out which DevTools Protocol requests are the slowest.

> 2) it doesn't preserve the fact that the console drawer has been opened

This setting could be probably implemented by monkey-patching the front-end, we are already overriding certain functions in [front-end-node/Overrides.js](https://github.com/node-inspector/node-inspector/blob/master/front-end-node/Overrides.js)

3)
As I was looking at the code, I realised that DevTools actually support reloading the inspected page/process while keeping the front-end open. By default, key shortcuts Ctrl+R/Cmd+R and F5 used to reload the inspected page instead of the DevTools page. There is a patch in node-inspector which changes this behaviour back to reloading the front-end page.

In other words, it should be possible to reload the debugging session at the server (reconnect to debugged process) without reloading the front-end. I estimate that several days of effort are required to get this implemented: we need to understand what messages are exchanged between front-end and back-end during reload, how is the list of source files refreshed, etc.

---

IMO each of these points is an issue on its own. If somebody decides to investigate possible solutions, a new issue should be opened.
",bajtos,2013-03-30 17:39:55
108,2013-09-03 11:14:47,"Thanks for your quick reply! 

Interesting, I just looked at all the requests coming through, and I see that there are many unminified JS files being downloaded.  I imagine that if these were all concatenated and minified into one, it may speed things up a bit, even though it's being requested from a local server.

It seems like some portion of the loading time is blocked by JS evaluation and execution, which would be CPU-bound.
",spikebrehm,2013-03-30 17:39:55
107,2012-06-14 21:12:01,"I'm not seeing any scripts in windows with 0.2.0beta2 and Chrome 20.0.1132.34 on Windows XP.

I'm wondering if its a file mapping issue. Is there any simple way to turn on logging in node-inspector, specifically of the scripts files so I can troubleshoot and report back?

Also, I saw issue #62 which said windows file mapping could be fixed in paperboy, but in c498964f8b20f2 it seems you stopped using paperboy so perhaps windows support was broken with that switch?
",studgeek,2013-03-30 17:39:54
107,2012-07-19 17:31:01,"I've got the same issue using node 0.8.2 on ubuntu
Here's chrome's console output :

Request with id = 3 failed. Profiler.causesRecompilation not implemented devtools.js:4151
Request with id = 4 failed. Profiler.isSampling not implemented devtools.js:4151
Request with id = 5 failed. Profiler.hasHeapProfiler not implemented devtools.js:4151
Request with id = 6 failed. Timeline.supportsFrameInstrumentation not implemented devtools.js:4151
Request with id = 7 failed. Page.canOverrideDeviceMetrics not implemented devtools.js:4151
Request with id = 8 failed. Network.enable not implemented devtools.js:4151
Request with id = 9 failed. Page.enable not implemented devtools.js:4151
Request with id = 10 failed. Network.enable not implemented devtools.js:4151
Request with id = 11 failed. Page.getResourceTree not implemented devtools.js:4151
Uncaught TypeError: Cannot read property 'frame' of undefined devtools.js:14739
Request with id = 12 failed. CSS.enable not implemented devtools.js:4151
Request with id = 13 failed. CSS.getSupportedCSSProperties not implemented devtools.js:4151
Uncaught TypeError: Cannot call method 'slice' of undefined devtools.js:27624
Request with id = 14 failed. Worker.setWorkerInspectionEnabled not implemented devtools.js:4151
Request with id = 18 failed. Inspector.enable not implemented devtools.js:4151
Request with id = 19 failed. Database.enable not implemented devtools.js:4151
Request with id = 20 failed. DOMStorage.enable not implemented devtools.js:4151
Request with id = 21 failed. DOM.setTouchEmulationEnabled not implemented devtools.js:4151
",elcoyot,2013-03-30 17:39:54
107,2012-08-17 11:47:35,"Same problem using Node-0.8.4 (also tested with 0.8.6, 0.8.7) with Chromium 22.0.1229.0 (Developer Build 150307) on Mac OSX 10.8 (Mountain Lion).  Last time I checked with the same Node0.8.4 & the same Browser on Mac OSX 10.7 (Lion), it worked fine. Sadly I can no longer check on Lion now...
",asnowfix,2013-03-30 17:39:54
107,2012-08-17 12:28:35,"I even reverted to Node 0.6.21, just to make sure that I was not hitting another issue Not working with node 0.8.x[](https://github.com/dannycoates/node-inspector/issues/115). Same issue. I tend to think that the issue is OSX 10.8. Will do more tests on Linux to verify this.
",asnowfix,2013-03-30 17:39:54
107,2012-08-17 12:45:39,"No problem on Linux... but restarting Chromium on OSX also fixed the problem. Seems like a Browser caching issue more than a node-inspector compatibility issue.
",asnowfix,2013-03-30 17:39:54
106,2012-06-08 12:09:21,"Hello,
Is there a way to attach node-inspector to a running node process on a windows machine?
Thanks
",fredweppes,2013-03-30 17:39:54
106,2013-09-17 18:02:33,"I found that I was able to run node-inspector on Windows7 without needing to know the PID via the following (after a successful install):

`node --debug-brk <file.js>` in one shell
`node-inspector&` in ANOTHER shell

then browsing to `localhost:8080/debug?port=5858` in Chrome

One or both of my shells may have been run as administrator; do not know if this is required or not (it was for installation)
",MichaelPaulukonis,2013-03-30 17:39:54
106,2013-09-17 18:50:54,"If your process is not running in debug mode (i.e. it was not started via `node --debug` or `node --debug-brk`), you can use the undocumented node function `process._debugProcess(pid)` to enable the V8 debugger. This function is a platform independent version of SIGUSR1 signal (SIGUSR1 works on Unix only).
",bajtos,2013-03-30 17:39:54
106,2013-09-17 21:02:04,"@bajtos could you expand on usage?

I believe I've gotten the PID of a running node process (started without debug) via:

`tasklist /FI ""IMAGENAME eq node.exe""`

which returns , say `8196`

I then launch the node REPL, and issue `process._debugProcess(8196)`

I exit the REPL (can node-inspector be run from w/in the REPL? I haven't used the REPL enough to get it to work) and launch `node-inspector &`

Then, launch Chrome with the URL.

Is there an easier list of steps (the write-up could be shorter).
",MichaelPaulukonis,2013-03-30 17:39:54
106,2013-09-18 14:08:23,"@MichaelPaulukonis The only shortcut I can think of is to call

<S_CODE_TOKEN>

instead of launching a REPL session.

I have updated the README file (see pull request #212). Does the README make it clear now how to start a debugging session of a running process?
",bajtos,2013-03-30 17:39:54
106,2013-09-18 14:19:34,"Thanks. This is how we build open-source software and documentation!
",MichaelPaulukonis,2013-03-30 17:39:54
105,2012-06-07 08:00:30,"Env : Windows / node 0.6.18

child = cp.fork(
        __dirname + '/child.js',
        [JSON.stringify(opts)],
        {env: process.env}
    );

How I can follow the fork with the node-inspector ?

Thanks for your ligths
",migounette,2013-03-30 17:39:54
105,2012-06-07 13:06:03,"I found a way to do it with Linux but not for Windows

In fact you need to use SIGUSR1 in your child code in order to invoke the V8 debugger.
Use the processNextTick to be sure that the SIGUSR1 is thrown and wait by inoking periodicaly the debugger.
The processScript is where you want to continue after the debugger has been hooked

function waitms(msToWait) 
{
    var date = new Date();
    var curDate = null;

<S_CODE_TOKEN>

} 

process.kill(process.pid, 'SIGUSR1');

// Now it's time to set a breakpoint
process.nextTick(function () {
    waitms(5000);  
    processScript();
});                 
",migounette,2013-03-30 17:39:54
104,2012-06-04 14:12:22,"Hi,

I'm using node-inspector 0.2.0beta2, installed through npm on Ubuntu 12.04 machine. Node version is 0.6.18, npm version is 1.1.21.

I'm able to start the inspector, yet cannot use it. When its called on localhost, a few fragments of the gui (search field in the upper right corner) are loaded, yet node-inspector shutsdown with the message: ""connect ECONNREFUSED""

I reproduced this problem on other Linux Machines (ZevenOS 4.0). I also tried version 0.2.0beta1 of the inespector which didn't work either.

cu
Roman
",ghost,2012-06-05 05:46:04
104,2012-06-04 17:42:59,"This will be fixed in the next release, until then make sure you start you processes in this order:
1. the debuggee (with --debug or --debug-brk)
2. node-inspector
3. the browser page

If you connect the browser to node-inspector before the debuggee is waiting you will get ECONREFUSED
",dannycoates,2012-06-05 05:46:04
104,2012-06-05 05:46:04,"Works like a charm now. Thanks a lot for your help.

cu
Roman
",ghost,2012-06-05 05:46:04
104,2012-07-11 05:18:26,"Having the same problem on same version of Node. And, unfortunately, starting the processes in the order above doesn't solve it.
",kendagriff,2012-06-05 05:46:04
104,2012-08-19 15:22:24,"Hi,

   I recently found node-inspector and I faced the same problem described in this issue.
I tried with the given sequence and it worked like a charm.

But if I do not start it in the sequence, we have a trouble.
",jaydeepw,2012-06-05 05:46:04
104,2012-09-21 21:57:04,"Just a quick tip for anyone else having this issue from someone who just spent the past 5 minutes scratching his head. Make sure when you run your node app, it tells you that your ""debugger [is] listening on port 5858"". I was running   `node app --debug` instead of the correct `node --debug app`. And of course, it wasn't debugging. Bonehead move for sure ;) Hope this helps.
",don-smith,2012-06-05 05:46:04
104,2012-09-28 05:38:14,"@locksmithdon Thanks a lot for that heads up. I was placing the --debug flag in the wrong place and got that error. Putting it right after 'node' as you pointed out fixed my problem.
",wallslide,2012-06-05 05:46:04
104,2012-12-04 06:28:27,"locksmithdon - thank you!!
",adambreen,2012-06-05 05:46:04
104,2013-02-11 19:16:31,"I am getting this problem when I try to use this with meteor V0.5.4 on windows. I know I'm definitely in the minority here, but any help would be awesome!
",zbright,2012-06-05 05:46:04
104,2013-02-17 12:28:07,"@locksmithdon eh.. did the same thing, thank you!
",paprikka,2012-06-05 05:46:04
104,2013-04-17 04:56:30,"I had same issue when I was going to `http://localhost:8080/debug?port=5850` instead of going to `http://localhost:8080/` directly.
",mohsen1,2012-06-05 05:46:04
104,2013-05-16 19:07:09,"Thank you @locksmithdon 

:+1: DO `node --debug app.js`
:-1: DON'T `node app.js --debug`

Sorry needed something more visual. I can't fall a third time into this trap, wasting my time comparing Procfiles :hurtrealbad:
",nrako,2012-06-05 05:46:04
104,2013-05-30 14:38:15,"@locksmithdon thanks :+1: 
",eladmoshe,2012-06-05 05:46:04
103,2012-06-04 07:50:20,"http://stackoverflow.com/questions/10877607/can-somebody-help-me-to-debug-my-nodejs-application-in-iis-express-webmatrix-thr
http://stackoverflow.com/questions/10861408/how-to-debug-nodejs-apps-in-iisnode-with-rewriteurl-inside-iisexpress

I am using node-inspector and it's not worked for me. I have tried the tom's iisnode's sample code and it's work fine but not able to do same with my express code with routing.

When I run node-inspector  I got error 0. Can someone help to solve it.

Thanks
",ghost,2013-03-30 17:39:54
102,2012-06-04 00:40:23,"Traditional function declarations (`function functionName(){}`) are labeled as anonymous is the call stack despite being named.

Anonymous functions assigned to a variable are given the variable name as the function, but if the function also has a name then it also incorrectly appears as anonymous.

Code below illustrates the issue:

<S_CODE_TOKEN>
",brenmar,2013-03-30 17:38:22
101,2012-06-01 10:52:30,"The requirements should probably mention that older versions of WebKit browsers like Chromium 18 don't work. Chromium 18 is currently the latest in Ubuntu universe repository, for instance. I tried node-inspector with it, and inspecting objects doesn't work, and the breakpoint debugger was getting stuck.
",slikts,2013-03-30 17:38:22
100,2012-05-30 06:42:17,"I would love to see support for source mapping in `node-inspector`.

I currently have a file compiled with a source map. (Map file generated by [Haxe](http://haxe.org)). Source mapping works fine in my browser if I embed the JavaScript into a HTML page, but does not work if I using `node-inspector`.

Any plan to support source maps? If you need more informations or an example, please comment on this issue.
",TheHippo,2013-03-30 17:38:22
100,2012-06-03 14:18:31,"Me too - this feature would be awesome.
",ccapndave,2013-03-30 17:38:22
100,2012-10-03 01:35:39,"+1

First of all, thanks so much for your work.

Currently I am using node-inspector to debug Titanium Mobile applications, and source maps would be invaluable for CoffeeScript debugging.  I would update node-inspector myself, but I don't know how far it is from the WebKit inspector trunk...  Would like to keep this discussion alive.
",doublerebel,2013-03-30 17:38:22
100,2012-10-18 08:46:24,"+1

Huge respect!  Building nodejs apps without the inspector would be... well, not fun!

Now with TypeScript and other code generation languages source map support would be extremely sweet!

Thanks
",clintwood,2013-03-30 17:38:22
100,2012-11-18 01:59:50,"+1, this would be great.
",bonnici,2013-03-30 17:38:22
100,2012-12-02 14:43:38,"+1 because of TypeScript and CoffeeScript

This project makes node apps debugging so much nicer and accessible.

Thanks!
",TobiaszCudnik,2013-03-30 17:38:22
100,2012-12-13 12:13:13,"+1 

It would be great with TypeScript
",p8Orion,2013-03-30 17:38:22
100,2013-01-31 13:00:44,"+1!
",laktak,2013-03-30 17:38:22
100,2013-03-01 08:32:39,"+1
",Shumkov,2013-03-30 17:38:22
100,2013-03-13 11:54:26,"+1
",tarruda,2013-03-30 17:38:22
100,2013-04-04 12:15:39,"+1

Why has this issue been closed? 
",kpko,2013-03-30 17:38:22
100,2013-04-08 13:18:02,"Is this fixed in node-inspector@0.2.0beta4? If yes, how do I set it up?

Just clicking the checkbox in options changes nothing. Only the js files are listed in sources.
",laktak,2013-03-30 17:38:22
100,2013-05-10 19:55:42,"Really, why this issue has been closed?
And it's not working with checked ""Enable source map""
",darky,2013-03-30 17:38:22
100,2013-05-10 21:00:19,"+1 for this feature, and +1 for why was this issue closed ?
",prettymuchbryce,2013-03-30 17:38:22
100,2013-06-17 16:46:46,"+1
",pedronasser,2013-03-30 17:38:22
100,2013-06-22 01:23:53,"+1
",dgbeck,2013-03-30 17:38:22
100,2013-07-24 18:04:08,"The latest 0.3 version supports source maps.
",bajtos,2013-03-30 17:38:22
100,2013-08-10 12:43:46,"@bajtos and its working flawless, thank you for this feature!

If anyone is interested in a quick-start project that uses source maps with node-inspector(optionally with coffeescript files), checkout this [grunt task](https://github.com/tarruda/grunt-coffee-build) I just wrote.
",tarruda,2013-03-30 17:38:22
100,2014-01-02 15:57:02,"I don't know if it is chrome. Some times some files don't pick up the source map/coffee files
",cooolbasha,2013-03-30 17:38:22
100,2014-01-02 19:04:02,"> I don't know if it is chrome. Some times some files don't pick up the source map/coffee files

Source-maps are applied only to files that are already loaded inside V8/Node. Node Inspector displays files not (yet) loaded too, which allows setting breakpoints in these files.
",bajtos,2013-03-30 17:38:22
100,2014-01-09 17:42:18,"+1
",nmehta6,2013-03-30 17:38:22
99,2012-05-21 19:14:23,"Is certainly... an issue. 
Maybe an user out there with enough reputation can fork this project and we all continue the development there.
",Ivanca,2012-05-21 21:50:00
99,2012-12-11 05:42:37,"This seems to be still and issue.
",Ivanca,2012-05-21 21:50:00
98,2012-05-21 17:59:46,"I changes the port just so there was no confusion that the port is already used.

I run inspector in command line:

<S_CODE_TOKEN>

Then when I go to http://127.0.0.1:9111/debug?port=5858 the page fails to load and the console shows:

<S_CODE_TOKEN>

I must be missing something.

System Windows_NT 6.1.7601
node -v v0.7.8
npm -v 1.1.21
",mspisars,2013-03-30 17:38:22
97,2012-05-20 01:31:25,"window.copy() in the regular webkit inspector allows the debugger to copy code to clipboard. Possible to implement? thanks!
",ericjang,2013-03-30 17:38:22
96,2012-05-18 18:33:55,"Even if I increase the stack trace size shown in node tracebacks using

Error.stackTraceLimit = 100;

I still can only ever see 10 stack frames in node-inspector. If this is a limitation within node itself, please let me know and I will report there.
",amb26,2013-11-12 09:01:14
96,2013-08-26 21:19:35,"Can someone please comment on what the resolution is? I need to increase the stack trace limit as well. Thanks!
",jdl2007,2013-11-12 09:01:14
96,2013-08-27 06:37:48,"The problem is still present, I have reopened the issue.
- 10 call frames is the default setting of [V8 debugger protocol](https://code.google.com/p/v8/wiki/DebuggerProtocol) (see the request `backtrace`). 
- It should be fairly easy to request more than 10 frames.
- The number of frames requested should be a config option (defaulting to 10).
- We need to check whether the front-end supports more than 10 frames too.
",bajtos,2013-11-12 09:01:14
96,2013-08-27 08:49:03,"I had this issue with old version, and found debugger unusable without ability to shift stack trace limit.

Do new version still has that?
",medikoo,2013-11-12 09:01:14
96,2013-08-27 08:56:58,"> Do new version still has that?

Yes.
",bajtos,2013-11-12 09:01:14
96,2013-08-27 08:58:25,"@bajtos it means it's still not really usable. I hope there's a way to fix it.
",medikoo,2013-11-12 09:01:14
96,2013-09-05 18:48:16,"+1 this seems invaluable.
",ghempton,2013-11-12 09:01:14
96,2013-11-12 09:19:25,"Looks like great news. Is this already published? Thanks!
",medikoo,2013-11-12 09:01:14
96,2013-11-12 09:58:14,"Published in v0.6.0.
",bajtos,2013-11-12 09:01:14
95,2012-05-07 14:55:15,"![Console](http://i.imgur.com/jlcXB.jpg)

Looks like the normal node.js console can display an object with all its properties but for some reason the node-inspector console can not. 
",Ivanca,2013-03-30 17:38:22
95,2012-05-10 04:25:13,"When you reference `console.dir`, you're referencing Node's `console` object.  Thus the value is output to the debuggee's stdout.

Perhaps node-inspector should expose an alternative `console` object within the local scope of inspector's console?
",cspotcode,2013-03-30 17:38:22
95,2012-05-10 05:17:05,"Actually it should intercept it.

<S_CODE_TOKEN>

But if is not possible, yeah; it should have an alternative console.

PD: Is worth mentioning that this does not explain why the global object looks empty on the console.
",Ivanca,2013-03-30 17:38:22
95,2012-05-10 06:15:37,"Oh yeah, intercepting sounds good.

""global object looks empty on the console""

Are you referring to when you click the triangle to expand the console object and are shown only a blank line?  I was wondering about that, too.  Since it seems like the console already has a reference to the object, why can't it iterate over the properties?
",cspotcode,2013-03-30 17:38:22
95,2012-05-10 07:30:02,"Yeah, i was talking about that.
After a little more testing looks like is a visualization problem because it happens with everything else as well.

![empty](http://i.imgur.com/lL0kL.jpg)
",Ivanca,2013-03-30 17:38:22
95,2012-06-29 17:26:15,"You can use this as a console. https://github.com/ketamynx/node-codein
",Silviu-Marian,2013-03-30 17:38:22
94,2012-05-07 00:02:05,"When I enter non-ASCII characters into Watch Expressions panel debugging session crashes. After that I have to clear browser Local Storage as node-inspector saves all watch expressions there.

The problem with non-ASCII characters is that V8 remote debugger expects the length of the whole message to be sent in Content-Length header. But simple data.length works for ASCII characters only. So the Content-Length should be calculated through Buffer class.

Nodejs v0.6.17 on Windows 7 x64
",vadimi,2013-03-30 17:58:31
93,2012-05-04 21:02:27,"Hey danny, how about an option to open the webbrowser window for me instead of making me copy/paste the url. Yes, I am that lazy.
",lookfirst,2013-03-30 17:38:21
93,2012-06-21 07:38:00,"big :+1:  

Plus, this is super easy with https://github.com/jjrdn/node-open

I think it'd have to be opt-in with a `--open` option, but that seems easy enough.
",paulirish,2013-03-30 17:38:21
92,2012-05-02 09:15:43,"Hello dannycoates! 
    when I ran ""node-inspector &"", it was Ok
    Then ""node --debug myapp.js"", it said""debugger listening on port 5858"", it was Ok too

   Then I opened the chrome15 and input ""127.0.0.1:8080"", it said ""Is node running with --debug port 5858?""
   When I went to script panel, it display ""you need to enable debugging before you can use scripts panel ""  
    I don't known Why?

<S_CODE_TOKEN>
",yipingshui,2013-03-30 17:38:21
92,2012-05-09 11:48:17,"Is your app (myapp.js) listening to 8080 port?
",fabianonunes,2013-03-30 17:38:21
92,2012-05-10 01:17:38,"no, myapp.js listening 5858. 
",yipingshui,2013-03-30 17:38:21
92,2012-05-10 01:22:15,"your debugger is on 5858. and your http server?
",fabianonunes,2013-03-30 17:38:21
91,2012-04-17 02:21:14,"I'd like to be able to reload my program if it changes on disk and re-run it. It would also be nice to have a button to restart the program. Are these reasonable goals to have? Could you point me in the right direction of how to implement this on my fork? 
",jacoblyles,2013-03-30 17:38:21
91,2012-07-12 00:20:13,"I'd recommend looking at nodemon - https://github.com/remy/nodemon
I've been using both of these projects at the same time. Nodemon reloads it in debug mode and ""refreshing"" the browser window with the debugger brings up the latest version.

> > nodemon --debug app.js
",wshaver,2013-03-30 17:38:21
90,2012-03-31 22:19:13,"<S_CODE_TOKEN>
",kilianc,2013-03-30 17:38:21
90,2012-04-02 06:28:55,"Duplicate of https://github.com/dannycoates/node-inspector/issues/83
",bluesmoon,2013-03-30 17:38:21
89,2012-03-21 02:19:32,"node inspector version 1.10
node 06.13
npm list pack shows that socket.io and socket.io-client  087 are part of the inspector package
installing socket.io and client 092 on top does not help the problem 

all this in the windows environment
",alnoor,2013-03-30 17:38:21
89,2012-03-21 02:40:51,"uninstalled node inspector 
reinstalled with -g 
""gripe on""
 cannot find node inspector under node modules - what changed
""gripe off""
found node inspector under .bin 
node node-inspector --web-port=9999 & 
node-inspector:2
if [ -x ""'dirname  ""$0""' /node""]; the 
unexpected token [
",alnoor,2013-03-30 17:38:21
89,2012-03-21 02:58:39,"found the node modules under ....\AppData\Roaming\npm\node-module\node-inspector 
went to bin lib as per instructions 
node inspector.js --web-port=9999&
once again socket.io-client not found 
yet again
npm -g list shows the socket.io-client 087
",alnoor,2013-03-30 17:38:21
89,2012-03-21 12:20:30,"looking for clues here 
the socket.io stated by node-inspector is 087
the ones that come with it are 087 (check)
the package.json say 082 <----  could this be the issue
",alnoor,2013-03-30 17:38:21
88,2012-03-13 22:51:37,"Cant copy text from a selection either using CTRL+C or the context menu.

Linux KDE,  chrome inspector runs fine.
",TobiaszCudnik,2013-03-30 17:38:21
87,2012-03-05 04:45:21,"When debugging an app that has multiple modules you are forced to step through to where an object in a related file is first uses in order to step into the file. For example stepping in to Express from an express app.

It would be nice to be able to browse directly to a js file and then add the breakpoint.
",glennblock,2013-03-30 17:38:21
87,2012-03-15 05:09:18,"I'm having the same problem. Maybe this is more of an underlying fault with the node debugger, but it would be nice to make the inspector ignore files in node_modules by default, or something like that. (or pass in an argument to open a specific file in the currently debugged app.)
",arnorhs,2013-03-30 17:38:21
87,2012-03-15 07:09:25,"+1 on being able to specify files to open potentially a single file, a list of files, or even a match expression.
",glennblock,2013-03-30 17:38:21
87,2012-04-13 21:32:08,"I would also love this change.
",jergason,2013-03-30 17:38:21
86,2012-02-27 18:33:31,"Debugging breakpoints are not persisted in between debugging sessions - this is particularly an issue when the node.js app crashes and needs to be re-started; all the breakpoints are lost. 
",oveddan,2012-02-27 20:49:23
86,2012-02-27 20:50:00,"Didn't realize this issue already exists at #41
",oveddan,2012-02-27 20:49:23
85,2012-02-20 00:02:15,,shimondoodkin,2013-03-30 17:38:21
85,2012-03-16 23:06:19,"+1
",henryoswald,2013-03-30 17:38:21
85,2012-03-18 02:55:24,"+1 (not working on 0.6.13 either)
",jplock,2013-03-30 17:38:21
85,2012-03-21 22:00:18,"#83 is, I think, about the profiler not working on large profiles (either CPU profiles or Heap Snapshots, I guess) (fixable with the maxLength fix mentioned in that issue for most people), and is an issue that exists on all node versions.  This one is about heap snapshots specifically being broken on new versions of node (or, more specifically, new versions of V8).  The new version of V8 which node v0.6+ is linking against drastically changed how its debugger reports heap snapshots, so I'm guessing this is non-trivial to fix.  CPU profiles still seem to work fine in the new V8 versions though.
",Jimbly,2013-03-30 17:38:21
85,2012-03-22 02:24:36,"indeed. Thanks for the clarification.
",c4milo,2013-03-30 17:38:21
85,2012-03-31 22:18:27,"+1
",kilianc,2013-03-30 17:38:21
85,2012-04-13 08:56:25,"+1
",jenner,2013-03-30 17:38:21
85,2012-04-13 12:37:42,"@kilianc @jenner @Jimbly check out https://github.com/c4milo/node-webkit-agent I've got working cpu and heap profiling.
",c4milo,2013-03-30 17:38:21
85,2012-04-13 19:21:04,"@c4milo awesome, thanks
",jenner,2013-03-30 17:38:21
85,2012-06-29 14:34:25,"This is a shame. Progress on this would be great this tool is far from redundant and unique; node-webkit-agent looks good, but the architecture of node-inspector makes it trivial to integrate it into non-Node applications. 
",lttlrck,2013-03-30 17:38:21
85,2012-06-29 15:46:08,"Yes, but that architecture also make it really difficult to keep up with
webkit development pace. And that's ultimately what has this project almost
useless right now.

On Fri, Jun 29, 2012 at 11:40 AM, Stuart <
reply@reply.github.com

> wrote:
> 
> This is a shame. Progress on this would be great this tool is far from
> redundant and unique; node-webkit-agent looks good, but the architecture of
> node-inspector makes it trivial to integrate it into non-Node applications.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> 
> https://github.com/dannycoates/node-inspector/issues/85#issuecomment-6662133

## 

_Camilo Aguilar_
Software Engineer
",c4milo,2013-03-30 17:38:21
85,2012-07-02 13:52:14,"Well life is full of compromises.

For me this is still useful because the console, live edit and debugging work fine. 
",lttlrck,2013-03-30 17:38:21
84,2012-02-17 09:57:52,"NPM install for node-inspector does not work. It gives error unable to find in registry. Log attached 

npm http GET https://registry.npmjs.org/node-inspector

npm ERR! Error: failed to fetch from registry: node-inspector
npm ERR!     at /usr/local/lib/node_modules/npm/lib/utils/npm-registry-client/get.js:139:12
npm ERR!     at cb (/usr/local/lib/node_modules/npm/lib/utils/npm-registry-client/request.js:32:9)
npm ERR!     at Request._callback (/usr/local/lib/node_modules/npm/lib/utils/npm-registry-client/request.js:137:18)
npm ERR!     at Request.callback (/usr/local/lib/node_modules/npm/node_modules/request/main.js:109:22)
npm ERR!     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/main.js:198:58)
npm ERR!     at Request.emit (events.js:88:20)
npm ERR!     at ClientRequest.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/main.js:195:10)
npm ERR!     at ClientRequest.emit (events.js:67:17)
npm ERR!     at CleartextStream.<anonymous> (http.js:1134:11)
npm ERR!     at CleartextStream.emit (events.js:67:17)
npm ERR! You may report this log at:
npm ERR!     http://github.com/isaacs/npm/issues
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com
npm ERR! 
npm ERR! System Linux 3.0.0-14-generic
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""-g"" ""node-inspector""
npm ERR! cwd /home/SERILOCAL/habib.virji/node
npm ERR! node -v v0.6.9
npm ERR! npm -v 1.1.0-3
npm ERR! message failed to fetch from registry: node-inspector
",habibvirji,2012-02-18 02:27:02
84,2012-02-18 02:27:02,"This is likely a temporary issue with connectivity to the npm database. I've verified that it installs from several locations
",dannycoates,2012-02-18 02:27:02
83,2012-02-13 18:33:02,"this is what I get:

<S_CODE_TOKEN>
",bluesmoon,2013-03-30 17:38:21
83,2012-02-13 23:45:11,"I'm seeing the same thing.
",goldfire,2013-03-30 17:38:21
83,2012-02-14 09:38:40,"For me too. 
",Selvatico,2013-03-30 17:38:21
83,2012-02-17 11:45:02,"Getting the same.

Node-inspector v0.1.10
Node v0.6.6
v8-profiler 3.6.2beta2
",byrion,2013-03-30 17:38:21
83,2012-02-18 19:59:32,"I get this problem too, I think I found the offending line in V8, which truncates string values http://code.google.com/codesearch#W9JxUuHYyMg/trunk/src/mirror-debugger.js&q=length:%20package:http://v8%5C.googlecode%5C.com&l=555

node-inspector 0.1.10
node 0.6.11
v8-profiler 3.6.2beta2
OS X
",jahewson,2013-03-30 17:38:21
83,2012-02-25 16:39:27,"Anyone know exactly when this problem began?  I'd like to fall back to the last working version of node/node-inspector if possible so that I can get some profiling done.
",cscott,2013-03-30 17:38:21
83,2012-03-02 19:29:49,"This problem has always existed for me, but only exhibits itself when the profile or heap snapshot is larger than the max length node-inspector is requesting (100k).  Modifying node-inspector/lib/session.js(123) to have a maxStringLength with a couple more zeroes on the end alleviates the problem.
",Jimbly,2013-03-30 17:38:21
83,2012-03-03 17:56:46,"How many more zeroes are we talking? I added all the way up to 5 more zeros to the end with no luck.

Edit: Okay so now it seems to not be giving the error, but the profiles still don't show anything.
",goldfire,2013-03-30 17:38:21
83,2012-03-03 18:19:04,"I added 2 (so, 10MB max buffer size), which has worked for everything.  The original reporter's error was a 600k string getting truncated.  If you're not getting any profiles showing up though, then I don't know what the issue is :(.  Things work for us with node v0.6.10, master branch of node-inspector (+ increased maxStringLength), 3.6.2 branch of v8-profiler.
",Jimbly,2013-03-30 17:38:21
83,2012-03-16 19:09:16,"+1 for any help. Can get it to not crash by increasing maxStringLength but am not getting any data. 
",henryoswald,2013-03-30 17:38:21
83,2012-03-21 10:03:27,"+1 Also applied the change to maxStringLength which helps node-inspector not to crash on retrieving the data from v8, but then the display of the profile breaks at HeapSnapshotView.js at line 411: cannot read property 'retainers' of undefined. It seems that every entry it tries to process there is undefined. This may well be related to dannycoates telling that the internal format of the profile has changed with later versions of v8.
",mauritslamers,2013-03-30 17:38:21
83,2012-03-21 18:02:30,"I have exactly the same problem with ""cannot read property 'retainers' of undefined"" after increasing maxStringLength . I downgraded back to node 0.4.12 and got node-inspector working, so it's definitely a problem due to a newer version of node.
",mguillemot,2013-03-30 17:38:21
83,2012-03-22 07:05:53,"I tried to get things running, but no luck so far. I did manage to speak to some people of the web inspector team on the webkit channel yesterday, and they suggested that it would be much easier to have node.js contain the same kind of bindings WebKit has for the web inspector. You would then be able to just point the browser at the debug port directly and use the web inspector 'remotely' (as is already possible for things like mobile devices running webkit based browsers). 

I sent a mail to the node.js mailing list about this, waiting for response.
",mauritslamers,2013-03-30 17:38:21
83,2012-03-28 02:49:58,"I'm seeing the same thing. How to solve the problem?

Node-inspector v0.1.10
Node v0.6.5
v8-profiler 3.6.2beta2
",liuyao,2013-03-30 17:38:21
83,2012-03-28 23:32:44,"I'm also experiencing the same problem. :(
",ianpogi5,2013-03-30 17:38:21
83,2012-03-29 01:48:16,"This is version Node v0.4.9 no problem.
",liuyao,2013-03-30 17:38:21
83,2012-03-29 08:36:13,"There are efforts underway to integrate the WebKit inspector API directly into node, meaning that things work similarly as with remote debugging. (http://code.google.com/intl/nl-NL/chrome/devtools/docs/remote-debugging.html)
",mauritslamers,2013-03-30 17:38:21
83,2012-04-09 21:08:48,"+1
",samccone,2013-03-30 17:38:21
83,2012-04-09 21:26:59,"Hey I created a new module to do heap and cpu profiling for those that are desperately looking to profile their applications as I was 2 weeks ago. Check it out https://github.com/c4milo/node-webkit-agent
",c4milo,2013-03-30 17:38:21
83,2012-04-10 13:51:15,"adding zeros remove the SyntaxError, but I don't have any data.

node --version
v0.6.14
",Filirom1,2013-03-30 17:38:21
83,2012-05-18 09:38:40,"The same goes for me using v0.6.17.  Added the zeros to avoid the unexpected end of input, but
I do not get any profile information in chrome.
",aklt,2013-03-30 17:38:21
83,2012-05-30 16:15:59,"I have the same issue as others (`node@0.6.18`, `v8-profiler@3.6.2beta2`, `node-inspector@0.1.10`). The funny thing is that almost every app I try to profile, fails (i.e., almost all of them are larger than 10k). Extremely frustrating.
",pooriaazimi,2013-03-30 17:38:21
83,2012-05-30 16:22:05,"Profile your heap with https://github.com/c4milo/node-webkit-agent
",Filirom1,2013-03-30 17:38:21
83,2012-05-30 16:44:44,"@Filirom1: Thanks. I actually _read_ this thread, but I don't know how I missed c4milo's comment! A bit tired, maybe...
",pooriaazimi,2013-03-30 17:38:21
83,2012-05-31 16:03:16,"Or, if you prefer a command line interface, you can try https://github.com/seth4618/nodeheap
",seth4618,2013-03-30 17:38:21
82,2012-02-13 18:09:39,"tell node-inspector to bind only to a particular network interface so that we don't open it up to the world unless needed.
",bluesmoon,2012-05-30 03:49:26
82,2012-05-30 03:49:21,"Hey, sorry it took me so long to look at this. It will be part of the next release
",dannycoates,2012-05-30 03:49:26
81,2012-02-06 20:14:21,"Hello,

I am working from a headless VM on my laptop and have needed to serve the debugger from another address besides localhost. I am sure that other people have needed to do this also ( This is in fact the 2nd time I hacked this in ) ! 

I am sure that there is a much cleaner way to do what I did. I am not exactly a programmer, actually I am a cartoonist go easy on me, so I threw this together. 

I wanted though to still submit this because it seems like something that is useful to other people and is in other debuggers like Weinre and I hope that it works its way in.

Thank you for your work on this project! 

::cheers::
",ghost,2013-07-24 10:11:13
81,2012-06-09 15:15:58,":+1: for this pull request to finally be accepted. Don't want to always manually fix the package.
",valscion,2013-07-24 10:11:13
81,2013-07-24 10:11:11,"I am closing the pull request since there is already a command-line option `--web-host` for this.
",bajtos,2013-07-24 10:11:13
80,2012-01-27 03:57:56,"Trying to connect remotely to a Redhat instance on the Amazon cloud. I pretty much followed your example verbatim except I am connecting remotely. I get the segfault when I try to access the debugger URL. 

I tried reversing the process by starting the app and then the debugger but this segfaulted right away. The log of the console is down below. I know this isn't a lot to go with so if I can provide you more info let me know.

[root@ipaddress]# node-inspector --web-port=80 &
[2] 13879
[root@ipaddress]#    info  - socket.io started
visit http://0.0.0.0:80/debug?port=5858 to start debugging
node --debug-brk server.js
debugger listening on port 5858
Segmentation fault
",Lull3rSkat3r,2012-01-27 17:44:55
80,2012-01-27 05:23:57,"What version of node are you using?
",dannycoates,2012-01-27 17:44:55
80,2012-01-27 17:44:57,"I am using v0.7.0-pre and looking back at the log the segfault happens in node and not in the inspector. Also, I noticed the ip address being used by the debugger is 0.0.0.0. I am assuming Amazon set ipconfig to set the ip address to this. Either way the segfault resides in node so the bug doesn't belong here.
",Lull3rSkat3r,2012-01-27 17:44:55
79,2012-01-14 18:26:54,"I'd need an ability to specify which IP to listen to. I use the `--web-port` option but I need to pair it with a custom IP.

The reason for this is that I'm serving this debugger behind a proxy so that I'd get some extra privacy. I'd like to attach node-inspector for a local IP that is not visible to the outer world - and so it'd only be visible through that proxy.
",valscion,2013-03-30 17:38:21
79,2012-02-13 18:10:24,"There are two pull requests that currently support this feature.
",bluesmoon,2013-03-30 17:38:21
78,2012-01-14 07:13:58,"I am currently on Node 0.6.4, latest stable head node-inspector. 

When you visit the ""Scripts"" section you can't see anything. Even though the breakpoint is correctly displayed on the right, there is absolutely nothing shown in the scripts section. 

I looked up past issues but it seems you have closed it. I am referring to issue 60 on https://github.com/dannycoates/node-inspector/issues/60

Please look at screenshot at http://imgur.com/7NGX4
",vicngtor,2012-01-14 07:19:07
78,2012-01-14 07:19:07,"Turns out Better Popup Blocker was the culprit.
",vicngtor,2012-01-14 07:19:07
77,2012-01-13 16:25:47,"Hi. I using node-inspector only as 'node --debug-brk index.js', because when I trying use it as 'node --debug', after refresh 'http://0.0.0.0:8080/debug?port=5858' in chromium my app-server died with next error:

FATAL ERROR: v8::HandleScope::CreateHandle() Cannot create a handle without a HandleScope

Using kill -s USR1 6851 node dont fix this problem. I think this problem may be issued by using fibers with sync ( https://github.com/0ctave/node-sync ).

Sorry for my bad english :)
",faiwer,2012-01-13 16:59:26
77,2012-01-13 16:59:22,"Hm, I checked this problem in PHPStorm nodeJS debugger - phpstorm debugger have this problem too. It's not node-inspector bug, its sync or fibers or engine of node bug.
",faiwer,2012-01-13 16:59:26
76,2012-01-06 18:18:48,"The inspector stopped working for me, and the only thing I'm aware that changed was the recent upgrade to Node 0.6.5. 

My server code is no longer appearing in the browser.  

Some things that I've noticed that seem to be different...

(1) I'm forced to specify the web-port when I start the inspector. If I don't, the inspector complains with ""Error: listen EADDRINUSE""
(2) I don't recall having to run the inspector on 5858 and also specifying the port=5858 in the query string. That's what the inspector is instructing me to do, which feels different from before. Am I mistaken?

The following is my work flow... (using Chrome 16.0.912.75)

> node --debug app.js  (app is running on port 8080)
> node-inspector --web-port=5858

In the browser, http://0.0.0.0:5858/debug?port=5858  renders the following in the browser:

Type: connect
V8-Version: 3.6.6.11
Protocol-Version: 1
Embedding-Host: node v0.6.5
Content-Length: 0

My node console displays the following when I navigate to the debug page:

Error 0
GET /debug?port=5858 HTTP/1.1: (no value)
Host: 0.0.0.0:5858
Connection: keep-alive
Cache-Control: max-age=0
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/535.7 (
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,_/_;q=0.8
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Accept-Charset: ISO-8859-1,utf-8;q=0.7,_;q=0.3
Cookie: connect.sid=LegwgnPJM20iw5q8qS9K0N29.2zGKS%2BCIFtQSvS54DmCaVu2Drf%2FcL
GET /favicon.ico HTTP/1.1: (no value)
Host: 0.0.0.0:5858
Connection: keep-alive
Accept: */_
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/535.7 (
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
Cookie: connect.sid=LegwgnPJM20iw5q8qS9K0N29.2zGKS%2BCIFtQSvS54DmCaVu2Drf%2FcL
",gtracy,2012-05-25 07:03:18
76,2012-01-07 23:51:48,"Same problem here, node 0.5.9
",JCMais,2012-05-25 07:03:18
76,2012-01-25 03:33:07,"exact same problem for me as well, node 0.6.7
",arjunup,2012-05-25 07:03:18
76,2012-02-28 07:53:08,"Well node-inspector by defaults, it LISTENS on 8080 for the browser access and CONNECTS to 5858 port by the node process,  to send the debugging commands to it. When you do `node --debug app.js`, by default it listens on port 5858, to receive debugging commands. So in this case, if you do `node-inspector --web-port=5858` , it will make node-inspector to run LISTEN on port 5858, not to connect to it. But node is already listening to 5858, so your OS doesn't allow this, then node-inspector will crash. So when you go to here( `http://0.0.0.0:5858/debug?port=5858` ) on browser, you essentially connect to node debugger which was listening on port 5858. The browser will send the http request, but node doesn't understad it, so it just shows the error.

What you should do in this case to run node-inspector on a different port that is not being listened by anything else:

<S_CODE_TOKEN>

Then open the following URL in browser: 
 `http://0.0.0.0:1945/debug?port=5858`

This should work.
",alFReD-NSH,2012-05-25 07:03:18
76,2012-03-12 19:35:55,"yes! thank you.
",gtracy,2012-05-25 07:03:18
76,2012-06-08 21:32:11,"I've got kind of a similar problem, but not exactly, and I've been googling around with no success so far.
I know this issue is closed, but hopefully someone can help me on this.

What happens is that I start node-inspector on port 8080 for example, then start my nodejs script in --debug-brk mode and then point my browser to localhost:8080/debug?port=5858
Everything works fine then for the debugging session, until my script exits, at which point I'm unable to restart any subsequent debugging.
If I let node-inspector running in the background and I just try to --debug-brk again, I'm getting the following error: `not connected` and my webkit debugger doesn't show the code.
If I exit node-inspector and try to run it again, I get `warn  - error raised: Error: listen EADDRINUSE`.
The only kind of work around I've found is to exit node-inspector and start it again on a different port. So if I was running it first on 8080, I'd now run in on 8181, etc... everytime blocking a port.

So, what seems to be happening is that node-inspector starts to listen to port 8080 (or whichever one I configure) and never stops, even when I kill the process.

For info, I'm on Mac 10.7.4 and node 0.6.7, don't know if that's of any help.
",captainbrosset,2012-05-25 07:03:18
76,2012-06-08 21:36:25,"Me again, in fact I just opened Activity Monitor on my mac and realized that I had several `node` processes running.
I killed them all and restarted node-inspector on one of the ports I was using before, and it worked!
I got this in the logs too:

<S_CODE_TOKEN>
",captainbrosset,2012-05-25 07:03:18
75,2011-12-19 22:16:37,"Dear Danny,

I would like to kindly ask Your help regarding (might) my installation issue.

Here You can see the required resources:
1. UUBUNTU 11.10 64-bit-Server
2. Google Chrome 16.0.912.63
3. user@ubuntu:/home$ node -v
      v0.6.6
4. user@ubuntu:/home$ npm -v
      1.0.106

Installation steps:

user@ubuntu:/home$ sudo su

root@ubuntu:/home# npm install -g node-inspector
/usr/local/bin/node-inspector -> /usr/local/lib/node_modules/node-inspector/bin/inspector.js
node-inspector@0.1.10 /usr/local/lib/node_modules/node-inspector 
├── paperboy@0.0.3
└── socket.io@0.8.7
root@ubuntu:/home#

I""m not sure that the installation was success because no confirmation by the process.
I just tried the attached example but
Google Chrome could not connect to 127.0.0.1:8080 

I would be grateful for You recommendation. Thank You!

Best regards,
Bela
",bhevesi,2011-12-20 12:45:18
75,2011-12-20 12:45:18,"Solution is great, documentation should be a bit better. Merry XMAS!
",bhevesi,2011-12-20 12:45:18
74,2011-11-29 04:58:33,"I have a point in my code where a nested anonymous function appears to have lost about half the vars in a closure scope.  I saw this using node-inspector and tried to chase my problem.  Then on a hunch I put away node-inspector and placed console.log statements around that point.  There was no such problem according to stdout.

So either V8 or node-inspector had a problem.  Has anyone else seen something like this?  I don't think I could easily boil this down to a test-case.  It is in the middle of some thick hairy code.

I hate to lose faith in such a useful tool as node-inspector but I wasted a lot of time on this.
",mark-hahn,2013-03-30 17:38:21
74,2011-12-22 13:55:47,"same here, I was debugging some stuff within the http module (in the ondata callback in line 1374) and have no access to any variables... 
",dudemeister,2013-03-30 17:38:21
74,2011-12-23 00:49:43,"Wild-ass-guess:  Maybe it happens when there are data connection problems?
",mark-hahn,2013-03-30 17:38:21
73,2011-11-14 14:36:45,"<S_CODE_TOKEN>

In chrome I can see the source and set breakpoints. However, when it hits a breakpoint I get the ""You need to enable debugging before you can use the Scripts panel"" message and execution just continues. Whichever option I choose (""Only enable for this session"" or ""Always enable""), the same thing happens on the next breakpoint.

Chrome 15.0.874.120
Node 0.4.11
",OrangeDog,2013-03-30 17:38:21
73,2011-11-30 04:48:25,"Having the same issue. Every session requires ""Enable Debugging"" although it's been set before.
",brandonhall,2013-03-30 17:38:21
73,2012-03-20 04:01:10,"I am also having this issue:
chrome 17
node 6.13

The issue seems similar to #2 but using 127.0.0.1 instead of localhost makes no difference.
",sethwoodworth,2013-03-30 17:38:21
73,2012-04-15 21:32:05,"I have no issues, but I'd like to clarify:

Are @brandonhall and @OrangeDog having the same issue? @OrangeDog talks about breakpoints not working at all and redirecting to the ""enable debugging"" notice, @brandonhall mentions ""sessions"" having the ""enable debugging"" window by default. Doesn't sound like the same issue to me. @sethwoodworth doesn't provide enough detail to describe any issue in particular.

@brandonhall: If you refresh your browser after seeing the ""enable debugging"" notice (using the refresh button, keyboard shortcut doesn't work for me), do you have any issues debugging? Do your breakpoints magically redirect you to the ""enable debugging page""?

Just trying to sort out whether this is the same issue. :)

I do see the ""enable debugging"" window, every time my server restarts, but I don't expect the chrome dev tools to maintain a debugging session with my server while the server restarts. A simple page refresh using the refresh button ""solves"" this.
",rdrey,2013-03-30 17:38:21
73,2012-04-16 03:59:32,"@rdrey Technically, they are separate issues but with the same error message. Thankfully, I haven't seen the message in a long time now. It was incredibly hard to repro then because it would happen randomly. I suspect it was due to an older version of Chrome. I have no data to support that, but it's my only guess. 
",brandonhall,2013-03-30 17:38:21
73,2012-04-30 10:44:53,"Using Chrome 18 now and my issue no longer presents itself.
I see the same behaviour as @rdrey describes.
",OrangeDog,2013-03-30 17:38:21
73,2012-05-03 09:07:45,"Except today, with the exact same set-up (but trying to debug different code) I'm back to my original problem. Using 127.0.0.1 instead of localhost makes no difference.
",OrangeDog,2013-03-30 17:38:21
73,2012-09-30 13:29:28,"I have the same issue here with Chrome Version 23.0.1271.10 dev-m, on Windows 7 x64. 
Basically every single debugging action leads to this ""enable debugging"". 
",summivox,2013-03-30 17:38:21
73,2012-10-16 08:42:47,"I've been having lots of issues with chrome but based on lack of feedback and commits I'm now wondering, is this project possibly dead?
",colin-jack,2013-03-30 17:38:21
73,2012-10-16 12:27:41,"Using up-to-date Chromium (from Example from http://download-chromium.appspot.com) and restarting it when breakpoint-related issues happen usually render node-inspector usable again. That being said, I am also observing more usage than development on this project.
",asnowfix,2013-03-30 17:38:21
73,2012-10-18 09:50:53,"Not to mention it's quite irresponsive(compared to debugging html-based scripts). Wonder who would pick this up...
",summivox,2013-03-30 17:38:21
72,2011-11-08 08:24:43,"When I run:

> node --debug myapp.js

The app starts ok but navigating chrome to the debugger brings up error 404: Oops! Google Chrome could not connect to localhost:8080

I probably messed up something in my Ubuntu npm packages, I don't know what because it used to work great!

I found a workaround on http://codebetter.com/glennblock/2011/10/13/using-node-inspector-to-debug-node-js-applications-including-on-windows-and-using-ryppi-for-modules/

I can make the debugger work by starting it in the background:

> node-inspector &

and then running my app:

> node --debug myapp.js

Now I can navigate to http://localhost:8080/ and enjoy the awesome debugger once again - thank you!

My question is: do you know what went wrong? How can I fix this?
",amih,2012-05-25 07:00:58
72,2012-02-28 07:56:11,"It's not a workaround, it's not a bug. This is the way that it should work. You need to start node-inspector first to use it!
",alFReD-NSH,2012-05-25 07:00:58
71,2011-11-01 22:06:37,"I'm using Mac OS X Lion and Chrome, I setup node-inspector I can see the files of my node project in the browser (localhost:8080) and all, but I put some breakpoints then I access the node app from the browser and nothing happens.
",rafmagana,2013-03-30 17:38:21
70,2011-10-27 03:35:11,"Added the required meta tag to front-end/index.html to allow support for Chrome Frame.
",glennblock,2011-10-27 04:38:38
70,2011-10-27 04:38:56,"Thanks!
",dannycoates,2011-10-27 04:38:38
69,2011-10-03 13:28:23,"/home/gschwab/node_modules/node-inspector/lib/session.js:258
                    url: sourceIDs[bp.script_id].url,
                                                ^
TypeError: Cannot read property 'url' of undefined
    at /home/greg/node_modules/node-inspector/lib/session.js:258:49
    at Array.forEach (native)
    at /home/greg/node_modules/node-inspector/lib/session.js:253:36
    at Object.<anonymous> (/home/greg/node_modules/node-inspector/lib/callback.js:22:18)
    at parse (/home/greg/node_modules/node-inspector/lib/debugger.js:38:29)
    at parse (/home/greg/node_modules/node-inspector/lib/debugger.js:65:7)
    at Socket.<anonymous> (/home/greg/node_modules/node-inspector/lib/debugger.js:114:5)
    at Socket.emit (events.js:64:17)
    at Socket._onReadable (net.js:673:31)
    at IOWatcher.onReadable [as callback](net.js:177:10)
",greg-turbulenz,2013-03-30 17:38:21
68,2011-09-19 13:18:27,"Few days ago I have updated Google Chrome to version  14.0.835.163 and since that moment I cannot work with this debugger in Google Chrome. There are no buttons in bottom menu. In debug console of google chrome I see one message:
Error during WebSocket handshake: 'Sec-WebSocket-Accept' header is missing

In Safari everything works fine.
",agnek,2011-09-29 03:59:07
68,2011-09-21 19:27:14,"Same thing here.  Looks like they changed the WebSocket API in Chrome 14.  I don't guess this is going to be trivial to fix…
",humanchimp,2011-09-29 03:59:07
68,2011-09-21 19:30:48,"n/m looks like it has been fixed already.
",humanchimp,2011-09-29 03:59:07
68,2011-09-22 02:14:33,"I has the same behavior.

Google Chrome 14.0.835.186
node v0.4.9
node-inspector 0.1.10

error message: Error during WebSocket handshake: 'Sec-WebSocket-Accept' header is missing

The Chrome 14, it is necessary to support the hybi10.
",fkei,2011-09-29 03:59:07
68,2011-09-24 17:16:20,"Ditto. I get a ""Socket is not writable"" and node-inspector crashes.
",elliottwilliams,2011-09-29 03:59:07
68,2011-09-26 20:34:08,"The same here.

Google Chrome 14.0.835.186
node 0.5.3
node-inspector 0.1.10

error message: 
Error during WebSocket handshake: 'Sec-WebSocket-Accept' header is missing

I'm wondering when it will be fixed?
",semanticprogrammer,2011-09-29 03:59:07
68,2011-09-28 21:30:39,"same here. the server side throw:

Socket is not writable.

Works in Safari tho
",murvinlai,2011-09-29 03:59:07
68,2011-09-28 21:37:03,"Works in Chromium 12.0.742.112 (90304) Ubuntu 11.04
",semanticprogrammer,2011-09-29 03:59:07
68,2011-09-29 03:59:07,"version 0.1.10 _does_ work with chrome 14.0.835.186 and supports hybi10

when you run `node-inspector` you should see it print this line:

<S_CODE_TOKEN>

If you don't see that, you aren't running 0.1.10

Running `npm -g list` you should see something like:

<S_CODE_TOKEN>

You may also have conflicting versions of node-inspector installed locally and globally.
",dannycoates,2011-09-29 03:59:07
68,2011-09-29 07:25:36,"Worked fine. Thank you.
",fkei,2011-09-29 03:59:07
68,2011-09-30 03:19:34,"I have found another more older version of node-inspector on my system.
Installing node-inspector with global option fixed the problem.
Thank you very much for the great product! 
",semanticprogrammer,2011-09-29 03:59:07
68,2011-09-30 20:43:32,"Looks like a local/global problem for me as well. Many thanks!
",elliottwilliams,2011-09-29 03:59:07
68,2011-09-30 20:58:25,"The next node-inspector npm release will have a ""prefer global"" attribute to try mitigating the local/global problem. Its confusing, I've gotten bitten by it myself.
",dannycoates,2011-09-29 03:59:07
67,2011-09-18 13:33:28,"(BTW, thanks once again for such an awesome tool!)

node-inspector appears to have trouble crossing the boundary between the scripts loaded normally, (e.g. via require()) and scripts run using one of the runIn*Context() methods.  For example if I try to step into a vm.runInNewContext() call, the debugger just steps over it.

Conversely, I can get the debugger to break on a statement inside a script I'm trying to run in this fashion, using a `debugger` statement, but when I try to step into a function provided by the outer context (i.e. a function the main program passes in via the context object), again, the debugger just steps over it.

Is this expected behavior?  Is there a workaround or fix that might address this?  Definitely makes debugging ""plugin"" oriented code difficult.
",broofa,2013-03-30 17:38:21
67,2011-09-18 19:49:30,"This is tricky, and honestly I haven't done much with new contexts myself. If you could gist up a ""hello world""ish example it would help me see if I can get it working.
",dannycoates,2013-03-30 17:38:21
67,2011-09-20 14:34:49,"Hey Danny, I've put together a test script (below) to play around with this.  The primary test case I was looking at was this:
1. Start test.js in a shell (`node --debug-brk test.js`)
2. Start node-inspector in another shell (`node-inspector`)
3. Set a breakpoint on the `ctx.ping()` line
4. 'continue' to get debugger to stop at breakpoint
5. Try to step into the ping() call
6. Note the debugger just steps over the line rather than stepping into it.

The problem is (and this is a general issue with node-inspector, I believe) that it doesn't immediately recognize dynamically loaded scripts and so doesn't step into them.  The workaround here is to simply refresh the node-inspector page after your breakpoint hits.  Doing that gets it to recognize the 'new_script.js' that we've loaded with the vm.runInNewContext() call and, because it's recognized, the 'step in' action now works as expected. 

You can test the runInThisContext similarly with this script, but it acts the same.

One final little gotcha is that devs need to be careful not to mistake the source of the code _string_ they're running with the actual evaluated source.  E.g. in the script below, setting a breakpoint inside the ""src ="" function is pointless.  That function is just a container for the code string that is later evaluated.  I made a similar mistake in the code I was working on before that led me to report this issue.

Anyhow, yeah, I think the only issue here is that node-inspector (or, really, web inspector I guess) should be better about detecting new scripts that are dynamically loaded.

(Feel free to close this, btw.  Leaving open just in case you have any comments or actions you want to add.)

<S_CODE_TOKEN>
",broofa,2013-03-30 17:38:21
67,2011-09-26 02:17:11,"I’m having odd problems as well, in my `vm`-module-using-library. Unfortunately, the code is way too complex to easily isolate exactly what is crashing node-inspector, but I can’t imagine it being related to anything _other_ than the `vm` stuff.

Just wanted to +1 the issue.

**Edit**: Here’s what I _see_ when I set a breakpoint at any one of several separate places within my code that exist along a particular “code-path” involving `vm` compilations (this is _not only inside_ the compiled code from other files, but at various places along the code-path _involving the calls to `vm`_.) http://ell.io/AW7Z

Also, here’s the error that `node-inspector` itself spits out on the command line when I try to ‘continue’ up to those breakpoints:

<S_CODE_TOKEN>
",ELLIOTTCABLE,2013-03-30 17:38:21
67,2011-09-26 13:16:47,"Eliot, you may want to file this as a separate issue - as I noted in my last comment my issue was more user error than anything else.  I certainly wasn't seeing exceptions like this.
",broofa,2013-03-30 17:38:21
66,2011-09-08 09:07:58,"When I debug output to stdout using either `console.log` or `require('util').log` this does not appear in Node Inspector's console.
",tommedema,2011-09-09 02:15:25
66,2011-09-09 02:15:25,"This feature was removed in 0.1. It's pretty nice so it may return in a future release.
",dannycoates,2011-09-09 02:15:25
66,2011-10-21 05:23:55,"I'd love to see this as well, it's much easier to examine objects in the console
",dcbarans,2011-09-09 02:15:25
66,2011-10-21 14:49:53,"I would really love this feature to return too. But for now, please could you let your new users know that it's not available?

The video and accompanying text <a href=""http://howtonode.org/debugging-with-node-inspector"">here</a> (howtonode.org) made me think I was doing something wrong for a long time.

I couldn't find any documentation or explanation for any of the options in this line of code:
<code>$ node ../node-inspector/bin/inspector.js --start-brk=server.js --forward-io --profile</code>

I've just wasted hours. Admittedly I should have read the bug reports much sooner, but being new to node.js, I assumed to problem would be with me.
",sofaraslant,2011-09-09 02:15:25
66,2012-04-09 15:42:24,"I'd love to be able to log to the webkit console(especially objects).
",emattias,2011-09-09 02:15:25
66,2012-04-09 22:05:07,"+1
",sebastianhoitz,2011-09-09 02:15:25
66,2012-07-18 04:36:09,"+1
",diatech,2011-09-09 02:15:25
66,2012-08-01 15:09:17,"+1
",Gahen,2011-09-09 02:15:25
66,2012-08-01 19:44:42,"+1
",younes200,2011-09-09 02:15:25
66,2012-08-09 10:44:10,"+1
",jedrichards,2011-09-09 02:15:25
66,2012-08-26 12:45:12,"+1
",ojingo,2011-09-09 02:15:25
66,2012-10-17 17:34:12,"For those wanting this feature, I've created a new project called [Node Monkey](https://github.com/jwarkentin/node-monkey) which will allow you to log to the Firefox or Webkit console from your node app. It's super easy to use. Check it out and give feedback!
",jwarkentin,2011-09-09 02:15:25
66,2013-03-12 16:04:27,"+1
",derekdreery,2011-09-09 02:15:25
66,2013-04-25 08:42:17,"Still no news on this? I was really hoping I could debug a background application.
",jbrooksuk,2011-09-09 02:15:25
66,2013-04-25 14:33:10,"@jbrooksuk You really should check out [Node Monkey](https://github.com/jwarkentin/node-monkey) if you want this feature. Just do `npm install node-monkey` and then in your app:

<S_CODE_TOKEN>

Go to `http://0.0.0.0:50500` in your web browser and open the javascript console to see console output.
",jwarkentin,2011-09-09 02:15:25
66,2014-01-09 01:21:22,"+1
",iwoj,2011-09-09 02:15:25
66,2014-01-09 08:53:41,"Thanks @jwarkentin!
",jbrooksuk,2011-09-09 02:15:25
66,2014-01-23 17:50:31,"See #197.
",bajtos,2011-09-09 02:15:25
65,2011-09-05 11:15:49,,fprijate,2011-09-07 12:07:24
65,2011-09-05 11:18:20,"Hi

Today (5.9.2011 ) node-inspector works also on Windows XP (node v0.5.6-pre MSVC build).
It works only with  change to filepath function in paperboy.

<S_CODE_TOKEN>
",fprijate,2011-09-07 12:07:24
64,2011-09-03 13:32:19,"I absolutely love node-inspector. However, I'm working with a very modularized application architecture resulting in quite a lot of modules. The application I am working on right now has about 60 modules on the server side. These are all properly namespaced using simple folders.

For example there is a configurator.js inside a csio folder (client-server io) as well as a configurator.js inside a http server folder. At the moment, these show up with the same name in the scripts list. I'd like to see an option for the folder structure to be preserved, so that they will show up as `csio/configurator.js` and `server/configurator.js`.

If some people do not like to see the folder structure then it would be nice to have a switch to toggle this on and off.

Thanks.
",tommedema,2013-03-30 17:38:21
64,2011-09-03 18:52:19,"hmm. The behavior you want is what should be happening. This is a bug.
",dannycoates,2013-03-30 17:38:21
64,2011-10-31 12:33:51,"The paths displayed appear to be the paths the modules are `require()`d as, rather than relative to a common root (such as the entry-point and/or NODE_PATH).
",OrangeDog,2013-03-30 17:38:21
63,2011-09-03 10:00:53,"syntax highlighting.
",akzhan,2011-09-03 18:49:46
63,2011-09-03 18:49:40,"cool, thanks :)
",dannycoates,2011-09-03 18:49:46
62,2011-08-24 12:23:58,"Node-inspector was started by: node ./bin/inspector
returning: visit http://0.0.0.0:8080/debug?port=5858 to start debugging

Server to debug was started by: node --debug server
returning: debugger listening on port 5858

Chrome: http://127.0.0.1:8080/debug?port=5858
returning: html page with content ""HTTP 403"" == forbidden

Versions:
node.exe Version 0.5.4  
Google Chrome 13.0.782.215.
node-inspector: actual

On Linux it's working fine (but I need it on Windows)
",SongPing,2011-09-07 19:20:14
62,2011-08-26 06:23:08,"I don't have a Windows machine to test this on. The only thing I can think to try is using a different port?

<S_CODE_TOKEN>

Or maybe try using `localhost` instead of `127.0.0.1`?

It feels like a networking issue, but it could be something different about how the node on Windows handles http.

If that doesn't work, maybe you could find out more by using the Developer Tools, Network tab on the inspector page to see the request/response headers.
",dannycoates,2011-09-07 19:20:14
62,2011-09-02 21:15:15,"I have exactly same problem with node-inspector on node.exe. Changing ports doesn't help. It may be related to use of compiled node.exe, not the one under cygwin.

<S_CODE_TOKEN>
",bubersson,2011-09-07 19:20:14
62,2011-09-02 22:10:42,"I'll fire up a Windows VM this weekend and have a look
",dannycoates,2011-09-07 19:20:14
62,2011-09-03 01:56:01,"Ok, I was able to get inspector ""working"" on windows 7 with node.exe 0.5.5 and Chrome 13, but it did take some screwing around and is **very unstable**. I used the `test\hello.js` and this is what I found:
1. The firewall was initially blocking ports 5858 and 8080
2. Using `--debug` caused an `Error 10054` on hello.js and
   
   <S_CODE_TOKEN>
   
   on the inspector.js (I don't know what is causing these. Something internal to node or v8)

---

So this is how I got it ""working"".
1. Turned off the firewall
2. Started the process with `--debug-brk` i.e. `node --debug-brk test\hello.js`
   This will cause hello.js to pause on the first line.
3. Started `node bin\inspector.js`
4. When I pulled up `http://localhost:8080` the UI was kinda screwy. I had to click between 'Scripts' and 'Console' tabs a few times, and then the 'hide console' button in the lower right corner.
5. **I can set breakpoints, hit them and examine variables for a minute or so, then everything either crashes or freezes**

I think node on windows isn't stable enough for debugging yet. I'll keep this open until the official release of node on windows and try again.
",dannycoates,2011-09-07 19:20:14
62,2011-09-03 07:16:19,"Ok, thanks for your help. It seems there's still a lot of problems with node.exe on windows.
I've tried your steps, but I still got 403 (with firewall turned off - I will fiddle around that a little bit more).  I guess I will have to wait few more months to expect node.exe to work fully on windows... 
",bubersson,2011-09-07 19:20:14
62,2011-09-05 10:17:12,"Thanks for the suggestions.
But neither changing the port, changing 127.0.0.1 -> localhost or disabling the windows firewall make any difference.
Also an update from node.js 0.5.4 to 0.5.5 (http://nodejs.org/dist/v0.5.5/node.exe) does not help.

In my experience node on windows is pretty stable !
Unfortunately I can't debug at all ;-)
",SongPing,2011-09-07 19:20:14
62,2011-09-05 10:18:05,"I closed the issue by mistake.
",SongPing,2011-09-07 19:20:14
62,2011-09-05 11:20:29,"Hi

Today (5.9.2011 ) node-inspector works also on Windows XP (node v0.5.6-pre MSVC build).
It works only with change to filepath function in paperboy.

<S_CODE_TOKEN>
",fprijate,2011-09-07 19:20:14
62,2011-09-07 10:32:08,"With the change in paperboy the debugging is working now on Windows (also with node 0.5.5).
Thank you for the help!

By the way how to get (node v0.5.6-pre MSVC build).
",SongPing,2011-09-07 19:20:14
62,2011-09-07 11:51:32,"I am building it myself from Git.
",fprijate,2011-09-07 19:20:14
62,2011-09-07 19:20:14,"@fprijate awesome thanks! Hopefully @felixge will land your patch from https://github.com/felixge/node-paperboy/pull/13#issuecomment-1990519
",dannycoates,2011-09-07 19:20:14
61,2011-08-23 06:53:35,,ligaard,2011-08-23 17:41:13
61,2011-08-23 17:41:28,"Cool, thanks :)
",dannycoates,2011-08-23 17:41:13
60,2011-08-18 20:23:25,"When I try to get the content of an object the inspector returns a empty object (whitespace).
Could not figure out why.
",moritzha,2011-08-29 07:11:14
60,2011-08-18 21:19:39,"Yup, I see this problem too. Chrome 12/Linux + node 0.5.5 (git current)  + node-inspector 0.1.9 console.log(object) correctly shows all members
",vrodic,2011-08-29 07:11:14
60,2011-08-20 04:26:43,"Are you not seeing all Objects or just some? In the 'Scope Variables', tooltips, console? I'm having a hard time reproducing this. Sample code, screenshots, or anything would be helpful.

Thanks
",dannycoates,2011-08-29 07:11:14
60,2011-08-20 15:07:07,"I cant expand any objects. Even On current stable node.js 0.4.11. 

To reproduce on  Linux: 

node --debug
Open Chrome 12
open node inspector url
go to console
type in console, press enter
an ""Object"" with a right triangle appears
when i try to expand this Object, just an empty line appears. 

Its like that for every other object for me. 
",vrodic,2011-08-29 07:11:14
60,2011-08-21 12:11:43,"It's exactly the same in my browser / inspector
",moritzha,2011-08-29 07:11:14
60,2011-08-21 19:08:57,"**Is the debugger paused on a breakpoint when you try to inspect the object?**

If you are paused, this is a bug, but I haven't been able to reproduce it yet.

If you are not paused, below is the explanation:

The node-inspector console doesn't run in the same context as the node event loop you are debugging. When you aren't stopped at a breakpoint, each evaluation of the console basically lives in it's own transient context. References to the return values are destroyed immediately. Since evaluating the console doesn't do a deep inspection of the result, the members of the Object returned exist but are unreachable by the time you want to view them. For example:

<S_CODE_TOKEN>

The members of console are already out of context. But you could do something like:

<S_CODE_TOKEN>

Basically, the node-inspector console is no good when **not** stopped at a breakpoint. Use a node REPL for that.

Thanks for creating the issue and the feedback :)
",dannycoates,2011-08-29 07:11:14
60,2011-08-29 07:11:13,"reopen this if this is a bug
",dannycoates,2011-08-29 07:11:14
59,2011-08-18 01:15:16,"I got nailed by the Chrome 14 websocket problem so I tried to switch to FireFox.  I can't get it to work.  I'm getting the error ""WebSocket is not defined"" at this point in the code ...

<S_CODE_TOKEN>

I'm using FF 5.0.

Can anyone help?
",mark-hahn,2011-08-20 06:45:46
59,2011-08-20 06:45:46,"Last time I tried to get it working on FF was a disaster. There's just too much webkit specific code. I'm working on getting the websocket library working with Chrome 14 again. For now at least, FF is a wontfix
",dannycoates,2011-08-20 06:45:46
59,2011-08-20 07:31:00,"No problem at all.  I always use chrome for everything, not firefox.  I was just in a jam and couldn't use node-inspector.  You don't realize how much you rely on something until it is gone.  :-)

Thanks for a great tool ....
",mark-hahn,2011-08-20 06:45:46
58,2011-08-12 23:41:49,"Are there any plans on adding coffeescript support?
",contra,2011-08-15 02:32:06
58,2011-08-15 02:32:06,"Not likely till upstream web inspector gets it. I don't have a need for it, but it would certainly be cool.
Here's the webkit ticket to track: https://bugs.webkit.org/show_bug.cgi?id=63940
",dannycoates,2011-08-15 02:32:06
58,2011-09-16 20:01:18,"To inspect the compiled JavaScript in node-inspector, you can always run `coffee -c *.coffee && node --debug server.coffee`, alternatively `coffee -cw *.coffee & nodemon --debug` or whatever Node watcher daemon you're using.
",jacobrask,2011-08-15 02:32:06
58,2011-10-11 07:54:59,"I'm just toying with node-inspector for the first time, so maybe I'm doing something wrong. But this seems to work just fine to me.

In shell 1:

<S_CODE_TOKEN>

And this in shell 2:

<S_CODE_TOKEN>

And opened my browser to this:

<S_CODE_TOKEN>

My server.coffee file is listed in the files, but inside of it is javascript, not coffeescript. But that's fine by me. I didn't have to compile the CS first, it just works.
",tauren,2011-08-15 02:32:06
58,2012-10-05 00:39:27,"I am doing what tauren described above and can see the compiled JS in the browser. The problem is that the code doesn't actually break in the break points I set. Is anyone else having this problem?
",gsouza75,2011-08-15 02:32:06
58,2012-10-05 01:14:40,"The root of the problem above was that I was forking workers with node's cluster module. The breakpoints do work if I don't fork any workers.
",gsouza75,2011-08-15 02:32:06
58,2012-10-05 02:39:53,"If you need to test a worker code (maybe cause it is different than the main process) you can always fork only 1 worker and send a debug signal to it, that is how I actually debug our app at my office.
",eruizdechavez,2011-08-15 02:32:06
57,2011-08-12 12:44:50,"I edit my code, restart the node server in debug mode, node-inspect and the chrome instance connected to it both report that nodejs isn't running anymore. I refresh the browser and it stops working. No files are sourced in the debugger in Chrome. I have to restart node-inspect for it to work. So every code change I now have to restart my appserver, restart node-inspect, refresh in Chrome for node-inspect and refresh another tab in Chrome for generating a request. Where did ctrl-s, f5 development go :(?
",Industrial,2011-08-12 16:36:29
57,2011-08-12 16:36:29,"this should be fixed in the master branch. I'll be pushing to npm soon.
",dannycoates,2011-08-12 16:36:29
57,2011-08-12 16:44:55,"cheers! :)
",Industrial,2011-08-12 16:36:29
56,2011-08-05 00:56:26,"the new websocket spec doesn't work with current websocket library
",dannycoates,2011-09-03 03:37:40
56,2011-08-15 05:48:24,"Seems to be in socket.io or websocket-server.  Hopefully fixes to those packages will resolve things for node-inspector as they are rolled in.
",akumpf,2011-09-03 03:37:40
56,2011-08-24 02:26:10,"Would this websocket change be causing an error like this:

<S_CODE_TOKEN>
",bentruyman,2011-09-03 03:37:40
56,2011-08-24 05:13:47,"This looks like a problem with your project, not the debugger. Is using the debugger _causing_ the exception? It looks like faye is trying to slice with an out of bound (oob) index. I don't know enough about faye to help if its not the debugger's fault.

Maybe stick a breakpoint on line 1422 of faye-node.js to see what's going on.
",dannycoates,2011-09-03 03:37:40
56,2011-08-24 12:46:36,"I tried sticking a breakpoint on line 1422 but the local variables weren't showing up. I think this is a bug in node-inspector.

Just a note, this same exact code works fine when browsing with Chrome 12, but not in Chrome 15. This is what led me to believe it was related to the spec changes. I'll see if I can't dig any deeper (or just stick some log messages in).

EDIT: To reproduce the error, all I did was throw a bunch of messages at the server and it eventually choked. It wasn't necessarily consistent on _when_ it choked, but it did every time when browsing with Chrome 15.
",bentruyman,2011-09-03 03:37:40
56,2011-09-02 14:51:07,"Socket.IO supports the latest chrome web socket specification (which is the reason why it's broken atm) btw. 
",3rd-Eden,2011-09-03 03:37:40
56,2011-09-02 22:12:27,"cool, thanks. I'll look at switching to socket.io this weekend
",dannycoates,2011-09-03 03:37:40
55,2011-08-04 16:46:21,"i often want to traverse objects form the console, i just type a var in and click the twirl-down arrow. In my case this is not revealing anything at all, just some whitespace.
",andrewluetgers,2011-08-29 07:12:16
55,2011-08-21 02:47:47,"are you doing this while paused on a breakpoint?
",dannycoates,2011-08-29 07:12:16
55,2011-08-29 07:12:16,"see #60
",dannycoates,2011-08-29 07:12:16
54,2011-07-26 13:13:00,"I a larger program I have, most of the time I do not get all the loaded files shown in the dropdown. I tried creating a minimal example, but haven't been able to do that yet. I create this issue to gauge if other experience this and I will follow up, when I (hopefully) get a minimal example working.
",ligaard,2011-09-10 01:18:24
54,2011-09-07 17:32:36,"I find that it loads files in as it needs them, you need to keep refreshing the node-inspector page every time you venture deeper into your app
",cjroebuck,2011-09-10 01:18:24
54,2011-09-10 01:18:24,"reopen this if this is still broken
",dannycoates,2011-09-10 01:18:24
54,2011-09-19 13:15:16,"Yes, this can be closed. I have tried a couple of times to reproduce. The only times where I haven't had all the files in the drop-down, I just needed to reload the page (which is now mentionend in the documentation, great).
",ligaard,2011-09-10 01:18:24
53,2011-07-22 11:27:56,"please.
",fhemberger,2011-07-22 13:07:27
52,2011-07-21 13:25:51,"I saw in issue #16 that it apparently wasn't possible to 'Pause on uncaught' exceptions (because Node catches them). Tiem has passed, and if it has become possible it would be a great feature for newbies to Node like myself :-)

PS: Just close this issue if it doesn't make sense.
",ligaard,2011-07-24 02:19:57
52,2011-07-24 02:19:57,"I think the best you can do for now is add your own event listener for uncaught exceptions with a debugger statement in it. like:

<S_CODE_TOKEN>

http://nodejs.org/docs/v0.5.2/api/all.html#event_uncaughtException_

As soon as its possible, I'll add the pause on uncaught to inspector :)
",dannycoates,2011-07-24 02:19:57
52,2014-05-04 18:19:30,"Is this still impossible? It's _really_ annoying to be unable to debug exceptions in the debugger. )'=
",ELLIOTTCABLE,2011-07-24 02:19:57
52,2014-05-09 18:10:12,"It used to work in Node v0.11.3 (here is my pull request: joyent/node#5713). It did not work in all cases the last time I tested. Feel free to give it a try.
",bajtos,2011-07-24 02:19:57
51,2011-07-21 13:13:46,"If I insert a 'debugger;' statement in my program, I would expect node-inspector to pause on that, but that apparently does not happen. At least not if the statement is in a require'd module.
",ligaard,2011-07-24 02:11:03
51,2011-07-24 02:11:03,"should be fixed as of ca61c4d733441f57dbdba87c8c86bde0d0ad2b9c

I'll reopen if not.
",dannycoates,2011-07-24 02:11:03
51,2011-07-26 12:47:25,"Yep, this seems fixed :-)
",ligaard,2011-07-24 02:11:03
51,2012-10-29 13:01:18,"It's not working at my computer too. - I've downloaded the newest version of node-inspector and I'm using node v0.7.6 - Does anyone know why this happens?
",fridojet,2011-07-24 02:11:03
50,2011-07-19 20:01:01,"Hello,
I am trying to debug a problematic function in my node.js script which connects to mongodb using the node-mongodb-native driver, and gets a collection.  If I put a breakpoint on the following line and step into, it stops executing:
client.collection('_pm_offers', function (err, collection_impressions) {

Any ideas??

Thank you,
Igor Ganapolsky
",IgorGanapolsky,2011-07-24 03:26:49
50,2011-07-24 03:26:49,"sorry, I can't reproduce this. I just released an update (v0.1.8) which might fix it
",dannycoates,2011-07-24 03:26:49
49,2011-07-09 20:26:30,"Hi there,

As soon as I double-click on any source code (to edit it) the debugger stops working. That is to say, it will no longer stop at any break-points, etc.

I'm using Chrome 12.0.742.112; node-inspector 0.1.6; node 0.4.9; Ubuntu 11.04.

Please let me know how I can help to debug this problem!

Thanks,
Mike
",cronnelly,2013-03-30 17:38:21
48,2011-07-01 16:10:20,"npm install -g node-inspector
npm info it worked if it ends with ok
npm info using npm@0.3.18
npm info using node@v0.4.8
npm ERR! couldn't read package.json in .
npm ERR! Error installing .
npm ERR! Error: ENOENT, No such file or directory 'package.json'
npm ERR! Report this _entire_ log at http://github.com/isaacs/npm/issues
npm ERR! or email it to npm-@googlegroups.com
npm ERR! Just tweeting a tiny part of the error will not be helpful.
npm ERR! System Darwin 10.7.0
npm ERR! argv { remain: [],
npm ERR! argv   cooked: 
npm ERR! argv    [ 'install',
npm ERR! argv      '-g',
npm ERR! argv      'node-inspector' ],
npm ERR! argv   original: 
npm ERR! argv    [ 'install',
npm ERR! argv      '-g',
npm ERR! argv      'node-inspector' ] }
npm not ok
",ryonlife,2011-07-02 00:26:10
48,2011-07-02 00:26:10,"I can't reproduce this. It looks like you could be using a pretty old version of npm. What happens if you use the latest npm version?
",dannycoates,2011-07-02 00:26:10
48,2011-07-02 01:17:08,"I'm using npm 0.3.18.
",ryonlife,2011-07-02 00:26:10
47,2011-06-22 15:39:37,"Using node version v0.5.0-pre and node-inspector 0.1.6

<S_CODE_TOKEN>

<S_CODE_TOKEN>

From a google search it looks to be something with the web-socket-server related to http://stackoverflow.com/questions/6341510/node-js-connection-error-missing-property
",luke-john,2011-07-23 23:20:07
47,2011-06-24 03:33:21,"moving this week, I'll look at it as soon as I get settled. thanks :)
",dannycoates,2011-07-23 23:20:07
47,2011-07-10 08:17:35,"I confirm:

gritzko@ubuntu:~/Projects/node-inspector$ node bin/inspector.js &
[1] 2476
gritzko@ubuntu:~/Projects/node-inspector$ visit http://0.0.0.0:8080/debug?port=5858 to start debugging

gritzko@ubuntu:~/Projects/node-inspector$ node --debug test/hello.js 
debugger listening on port 5858Server running at http://127.0.0.1:8124/

_linklist.js:65
  item._idleNext = list._idleNext;
                       ^
TypeError: Cannot read property '_idleNext' of undefined
    at Object.append (_linklist.js:65:24)
    at Object.active (timers.js:136:9)
    at Socket._onReadable (net_legacy.js:663:12)
    at IOWatcher.onReadable [as callback](net_legacy.js:177:10)
^C[1]+  Exit 1                  node bin/inspector.js
gritzko@ubuntu:~/Projects/node-inspector$ git log -1
commit 791815ad213ea0b91e14762aa28a4b5828374974
Author: Ionuț G. Stan ionut.g.stan@gmail.com
Date:   Sat Apr 23 19:00:49 2011 +0300

<S_CODE_TOKEN>

gritzko@ubuntu:~/Projects/node-inspector$ node -v
v0.5.0-pre
gritzko@ubuntu:~/Projects/node-inspector$ 
",gritzko,2011-07-23 23:20:07
47,2011-07-23 23:20:07,"should be fixed as of 7f5b6de4175e36eea4d7ffe78318ccbf3932a75b
",dannycoates,2011-07-23 23:20:07
46,2011-06-03 14:49:50,"When I try ""node-inspector &"", I have the answer : ""bash: node-inspector: command not found""

(node-inspector had been installed with npm without errors).

Thanks for your help,
Philippe
",Philmod,2011-06-04 09:12:55
46,2011-06-03 17:23:10,"Maybe package was installed locally and binary in not in the PATH variable. Try running `./node_modules/node-inspector/bin/inspector.js &` in your project directory.
",Stanley,2011-06-04 09:12:55
46,2011-06-03 17:29:55,"If you are using npm 1.0+ and want to use node-inspector globally try: `npm install -g node-inspector`

Lemme know if you still have problems.
",dannycoates,2011-06-04 09:12:55
46,2011-06-04 09:12:55,"It works, thanks a lot!!
",Philmod,2011-06-04 09:12:55
46,2011-11-30 20:26:14,"I had the same problem.  For me it was caused by not having root permission to create the node-inspector link when I installed with npm.

Try the following:

<S_CODE_TOKEN>
",mindjuice,2011-06-04 09:12:55
45,2011-05-31 06:49:42,"I'm unable to start debugging with nodeunit and wonder if it's possible to do so.
Thank you
",ochawin,2011-08-21 02:49:47
45,2011-06-01 06:08:14,"Recent versions of node (after 0.4.1 i think) sort of break node-inspector. I've created issue #43 to track it, but have been really busy recently. I hope to have time to fix it this week.  After that debugging tests should work. Sorry for the inconvenience.
",dannycoates,2011-08-21 02:49:47
44,2011-05-30 01:48:10,"If I start node with, say, `--debug-brk`, and step past some `require()`s at the top of the file in node-inspector, the newly-in-scope files aren’t loaded. Later, if I step into a function loaded from one of these requires, I lose the program counter and the debugger controls become disabled; there’s nothing more I can do.

Has anyone run into a workaround for this kind of situation? Some way to make `node-inspector` load more files?
",s4y,2011-07-24 02:07:25
44,2011-07-21 12:16:51,"I see the same thing. I have noticed that if I stop node-inspector and then starts it again (so it reattaches to the node process I was debugging), then it shows some other files.

It seems there is some problem with requires :-(
",ligaard,2011-07-24 02:07:25
43,2011-05-14 05:19:31,"Seriously, get off you ass and fix this shit!
",dannycoates,2011-08-05 00:54:19
43,2011-05-31 17:50:27,"Haha, I was like man what an unappreciative asshole, then i saw its you project  :)
",onedayitwillmake,2011-08-05 00:54:19
43,2011-07-21 10:23:39,"I can confirm that node 0.4.0 do remember breakpoints across debugger page reloads, and v0.4.10 does not.

Don't know if this has anything to do with this. I noticed that after having reloaded the debugger page, and thus node-inspector does not work, then when I stop the node-inspector process the server I was debugging writes 'Error 0' in its log.
",ligaard,2011-08-05 00:54:19
43,2011-07-23 23:17:02,"mostly fixed as of 7f5b6de4175e36eea4d7ffe78318ccbf3932a75b

still broken when the process under debug is not running before opening the page.
",dannycoates,2011-08-05 00:54:19
43,2011-07-26 08:04:24,"I can confirm that: Refresh works when process under debug is running, when opening page; otherwise it won't work.
",ligaard,2011-08-05 00:54:19
43,2011-08-05 00:54:19,"fixed enough by 41922a7266f533a20da46e419b6a7e13cb9b7324 to close this issue. vNext will fix the ugliness
",dannycoates,2011-08-05 00:54:19
42,2011-05-12 18:44:26,"I'm trying to debug an application that's on a Rackspace cloud server and I only have SSH access. I can load `host:8080/debug?port=5858` and I see my code and everything, but I can't break. Break buttons are grayed out.

When I go to `host:8124` as per instructions , Chrome 11 shows ""This webpage is not available"".

Does this mean node-inspector can only debug locally?
",diversario,2011-07-24 02:25:51
42,2011-07-21 12:20:17,"I have the same problem, but locally. I can see the code and set breakpoints, but the debugger won't break on them. Almost all of my program is modules which are fetch through require(). It seems to confuse the debugger.
",ligaard,2011-07-24 02:25:51
42,2011-07-24 02:25:51,"Could this be a firewall issue? I'm able to use a remote browser, but both node-inspector and the process you're debugging must be run on the same machine.

@ligaard yes, thats a separate issue
",dannycoates,2011-07-24 02:25:51
41,2011-05-12 08:46:46,"I really need node-inspector remember breakpoints.
",guileen,2013-03-30 17:38:21
41,2011-05-26 01:12:41,"issue++
",fakewaffle,2013-03-30 17:38:21
41,2011-07-21 12:34:29,"Yes it is really a pain. Using node 0.4.0 it will remember breakpoints across debugger page reloads, but not across restart. Node 0.4.1 and later won't remember breakpoints at all.

The node 0.4.1+ is issue #43.
",ligaard,2013-03-30 17:38:21
41,2011-07-26 12:42:11,"As of node-inspector 0.1.8, it again remembers breakpoints across page refreshes and closing/opening window, as long as it is the same node process reattaches to.

Remembering across node processes would be neat, but Chrome Dev Tools debugger for Eclipse doesn't do that either. I guess this issue could be closed.
",ligaard,2013-03-30 17:38:21
41,2011-10-27 21:38:55,"This would solve a huge pain point. It sucks debugging a program with multiple breakpoints to have to restart it and find out that your break points are gone. I'd imagine this could be accomplished with localStorage?
",jprichardson,2013-03-30 17:38:21
41,2012-01-27 16:26:25,"I think this is fixable, as is the issue with the constant 'prompt' about ""enabling debugging on the scripts panel"" - in fact, you should never, ever see this prompter.  What else are you doing with node-inspector!!! :-)

The basic idea is to save this info in localStorage associated with the browser session.  eg, localStorage for origin ""http://0.0.0.0:8080"".  Now, if it turns out that I decide I want to start running on port 8081, all my ""settings"" are gone, but ... not a huge issue.
",pmuellr,2013-03-30 17:38:21
41,2012-02-27 21:06:48,"I think this would be feasible through a chrome extension that opens the debugger, hooks into the event when a breakpoint is set, and saves it in offline storage.
",oveddan,2013-03-30 17:38:21
41,2012-07-23 11:21:04,"Oh... I just found out that writing in node could be a bigger pain than I initially anticipated... :|
",jayarjo,2013-03-30 17:38:21
40,2011-05-06 19:55:57,"is it MIT?
",murvinlai,2011-10-23 02:40:48
40,2011-10-18 17:37:17,"Danny, could you clarify what the license terms for node-inspector are?
",tjanczuk,2011-10-23 02:40:48
40,2011-10-23 02:40:48,"BSD
",dannycoates,2011-10-23 02:40:48
39,2011-04-23 16:12:27,"Currently WebKit based browsers only support _global_ user stylesheets.
That means the rules you put in the stylesheet will be used for _all_
websites you visit, and even more, for the browser's chrome itself.

Until an equivalent @-moz-document rule is implemented, the only solution
seems to be CSS class namespacing.

By providing a `node-inspector` class on the `html` element, users can
now tweak the UI of node-inspector without messing up the browser's chrome.
For example, in order to increase the font size of code blocks, you'd put
this in your user stylesheet:

  html.node-inspector body.platform-mac .monospace,
  html.node-inspector body.platform-mac .source-code {
    font-size: 13px !important;
  }

See also:
- http://code.google.com/p/chromium/issues/detail?id=2393
- https://bugs.webkit.org/show_bug.cgi?id=51172
",igstan,2011-04-23 19:01:43
39,2011-04-23 19:01:43,"LGTM, thanks!
",dannycoates,2011-04-23 19:01:43
38,2011-04-13 10:15:17,"node-inspector --web-port=8125
visit http://0.0.0.0:8125/debug?port=5858 to start debugging
connection closed*

Node: 
Server running at http://127.0.0.1:8124/
Error 0*

*after going to http://0.0.0.0:8125/debug?port=5858 in Chrome. Node 0.4.5
",Meai,2011-11-09 16:11:29
38,2011-04-24 22:48:27,"I'm also having this issue, but only when attempting to enable profiling.
",kirbysayshi,2011-11-09 16:11:29
38,2011-08-05 14:44:50,"I'm also having the same issue.

The error I get from node-inspector is:

<S_CODE_TOKEN>

The error from my script is:
""Error 0"".

I'm using node 0.4.7 and the latest node-inspector.

Any help would be appreciated.

Thanks.
",andyuk,2011-11-09 16:11:29
38,2011-09-02 17:15:23,"I can only second this, I have the same problem with node0.5.5. as Meai, are there any news about it?

Thanks a lot.
",ladariha,2011-11-09 16:11:29
38,2011-10-02 10:00:22,"I'm having the same issue as described here. Any news? 
Thanks
",JanVanRyswyck,2011-11-09 16:11:29
38,2011-10-08 22:07:32,"And I'm having this issue too. Any comments please.
",igorzoriy,2011-11-09 16:11:29
38,2011-11-08 20:34:38,"Same issue.  node v0.4.12.  Happy to provide more info as needed.
",cpsubrian,2011-11-09 16:11:29
38,2011-11-08 20:38:43,"Fixed my issue by making sure I had the latest version of everything.  I'm using NVM and apparently when you switch node versions with it, you need to reinstall all your global node modules.
",cpsubrian,2011-11-09 16:11:29
38,2011-11-09 13:07:31,"I can also confirm that updating to the latest versions fixes this issue.
",andyuk,2011-11-09 16:11:29
38,2012-02-15 22:22:10,"I had the same problem and it turned out I had duplicate places for node_modules:
 /usr/local/lib/node_modules/
and
 /usr/lib/node_modules/

Deleting one of these dirs (outdated) solved this problem for me.
",AlexBravo,2011-11-09 16:11:29
38,2014-06-23 20:24:49,"For me the problem was just Firefox. Once I tried it in Chrome, it worked fine
",JeremyCraigMartinez,2011-11-09 16:11:29
37,2011-04-03 09:20:14,"When running with the --debug-brk option, scripts imported with require() don't show up in the scripts popup. Works fine with the --debug option.

Is there some way to get the scripts list to refresh after require()?
",pgreyson,2011-04-03 19:22:38
37,2011-04-03 19:22:38,"Right now there isn't an automatic way, but you can refresh the page in the browser and the new scripts will get picked up. I'll add an automatic refresh to the feature list for the next version.

Thanks,
Danny
",dannycoates,2011-04-03 19:22:38
37,2011-04-03 23:47:44,"When I refresh the page the process continues from where it's stopped in the
debugger. So I don't seem to be able to debug initialization code that runs
after a require. Does that make sense?

Btw, nice work. You're ""alpha"" quality code is holding up very well.
- Paul

On Sun, Apr 3, 2011 at 12:22 PM, dannycoates <
reply@reply.github.com>wrote:

> Right now there isn't an automatic way, but you can refresh the page in the
> browser and the new scripts will get picked up. I'll add an automatic
> refresh to the feature list for the next version.
> 
> Thanks,
> Danny
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/dannycoates/node-inspector/issues/37#comment_951749
",pgreyson,2011-04-03 19:22:38
36,2011-03-27 00:39:46,"I get the following when trying to run node-inspector

diego@diego-Ubuntu:~/Node.js applications/Blog$ 
events.js:45
        throw arguments[1]; // Unhandled 'error' event
                       ^
Error: EADDRINUSE, Address already in use
    at Server._doListen (net.js:1088:5)
    at net.js:1059:14
    at Object.lookup (dns.js:153:45)
    at Server.listen (net.js:1053:20)
    at Server.listen (/usr/local/lib/node/.npm/node-inspector/0.1.6/package/vendor/ws.js:108:22)
    at Object.create (/usr/local/lib/node/.npm/node-inspector/0.1.6/package/lib/debug-server.js:44:12)
    at /usr/local/lib/node/.npm/node-inspector/0.1.6/package/bin/inspector.js:52:11
    at [object Object].<anonymous> (fs.js:107:5)
    at [object Object].emit (events.js:61:17)
    at afterRead (fs.js:903:12)
",diegovar,2011-04-03 19:23:10
36,2011-03-27 04:56:40,"It looks like the default port (8080) node-inspector listens on is already in use. Try running something like: `node-inspector --web-port=8989`
",dannycoates,2011-04-03 19:23:10
36,2011-04-09 18:56:05,"That did the trick, thanks!
",diegovar,2011-04-03 19:23:10
36,2016-11-21 10:05:08,in one shell i fired node --debug-brk app.js  in second   node-inspector --web-port=8989 still giving error  Unhandled 'error' event. How to resolve issue,akhilesh009,2011-04-03 19:23:10
35,2011-03-10 16:55:07,"Would be nice if we could have a line of code which says:

debugger.break();

Then node-inspector runs the code to this point and breaks.

I had a look around in the other issues looking for any mentions of this but couldn't find anything.

Thanks
",leetreveil,2011-03-11 02:48:16
35,2011-03-10 18:48:16,"you should be able to use `debugger;` in your code to cause node-inspector to break. It won't show up in your breakpoint list though.

If that doesn't work let me know because that would be a bug.

Thanks!
",dannycoates,2011-03-11 02:48:16
35,2011-03-10 19:27:44,"Doesn't work. Running node --debug myscript.js with a debugger; set on it just exits.

I can use node debug myscript.js then 'run' to get to the debugger; statement but node-inspector complains with: Error: ECONNABORTED, Software caused connection abort.
",leetreveil,2011-03-11 02:48:16
35,2011-03-10 21:09:22,"if its a short running script, try `node --debug-brk myscript.js`

The `debugger;` statement won't fire if no debugger is attached; `--debug-brk` stops node on the first line of myscript.js so node-inspector has time to attach. 
",dannycoates,2011-03-11 02:48:16
35,2011-03-10 23:01:21,"Doh why didn't I do that. Thanks, works.
",leetreveil,2011-03-11 02:48:16
34,2011-03-03 03:37:50,"I followed the instructions from https://github.com/dannycoates/node-inspector/wiki/Getting-Started---from-scratch. Both node.js and node-inspector are of the latest version from github.
The only difference is that I am accessing the inspector from another machine.

I can see the javascript list and it contains all required module but the startup script itself.

Is it required to debug locally?

Thanks,
Weiwei
",shiweiwei97,2011-07-24 02:48:41
34,2011-07-24 02:48:41,"you should be able to debug with a remote browser as long as node-inspector and the node process you are debugging are running on the same machine, and the webPort (default 8080) is allowed through the firewall.

If you have problems with the latest version, please file another issue with details about your scenario.
",dannycoates,2011-07-24 02:48:41
33,2011-02-19 18:20:07,"can you update web-kit front end? :)
",arestov,2013-03-30 17:38:21
33,2011-02-19 18:20:41,"i mean chrome dev tools :)
",arestov,2013-03-30 17:38:21
33,2011-02-19 19:32:44,"is there a particular feature or bug fix of the front-end that you are requesting?
",dannycoates,2013-03-30 17:38:21
33,2011-04-08 13:09:17,"Having fine-grained heap snapshots would be awesome:
https://bugs.webkit.org/show_bug.cgi?id=55563
",fgnass,2013-03-30 17:38:21
33,2011-07-21 12:50:11,"@fngass: Sounds great. Could you add a pull request?
",ligaard,2013-03-30 17:38:21
33,2012-01-20 14:29:06,"Any chance this could happen?
",maritz,2013-03-30 17:38:21
33,2012-06-12 08:07:42,"Any progress on this?
",arikon,2013-03-30 17:38:21
33,2012-08-23 13:50:11,"There's a zillion improvements in the webkit debugger - the one that ships with node-inspector is very old and kinda buggy.

Any hints towards how to upgrade the debugger?
",wmertens,2013-03-30 17:38:21
33,2012-08-23 20:02:29,"bump
",coolaj86,2013-03-30 17:38:21
32,2011-02-09 15:25:56,"I'm running node-inspector, and the browser page opens fine.

Running the app via node --debug works as well, and the node-inspector page shows the files from the app and lets me insert a breakpoint.  However, as soon as the application reaches a breakpoint, the application seg-faults and node-inspector disconnects.

Running the application via --debug-brk causes it to output ""debugger listening on port 5858"", but as soon as node-inspector tries to connect I get the segfault.  What's happening?
",vanwaril,2011-02-11 12:24:50
32,2011-02-09 19:55:54,"if you are using node 0.2.x have you tried https://github.com/dannycoates/node-inspector/wiki/Troubleshooting ?

node 0.3.x should not have this problem
",dannycoates,2011-02-11 12:24:50
32,2011-02-10 18:00:10,"I'm running node 0.2.5, GCC version 4.4.5.  I tried 
export GCC_VERSION=44

and then rebuilt node, but the same error remains.
",vanwaril,2011-02-11 12:24:50
32,2011-02-11 02:27:50,"just to be sure, did you do a `make distclean` before rebuilding? I'm not aware of any other segfault bugs in 0.2.5 so could you provide a stack trace from gdb of the crash? And if possible, the same with node_g (you'll need to `configure --debug` for a debug build of node), OS version, etc.

I'll do my best to help resolve this, but I need some more information to try to reproduce it.
",dannycoates,2011-02-11 12:24:50
32,2011-02-11 12:24:50,"Ahh, my bad, that was the problem :)  I hadn't cleaned out so it wasn't re-making it after all.
",vanwaril,2011-02-11 12:24:50
31,2011-01-31 13:43:24,"I added some quick documentation on the `--debug-brk` option.
",xavi-,2011-07-24 03:24:34
31,2011-07-24 03:24:35,"this is a node flag, not an inspector flag. I added a small note to the readme.
",dannycoates,2011-07-24 03:24:34
30,2011-01-30 23:46:42,"This might be a known issue, but the debugger doesn't auto-break on lines with the keyword `debugger`.
",xavi-,2011-01-31 10:16:46
30,2011-01-31 00:45:18,"I'm not able to reproduce this. Are you running the target with `--debug`? Can you provide the steps to reproduce?
",dannycoates,2011-01-31 10:16:46
30,2011-01-31 01:28:33,"It's working now.  Sorry for the trouble.

The only way I can reproduce it is with a fast running script.  Here's an example:

<S_CODE_TOKEN>

Running the script above does not trigger the debugger, but that's understandable.  Feel free to close this ticket.
",xavi-,2011-01-31 10:16:46
30,2011-01-31 02:16:46,"If you start a short script with `--debug-brk` it will pause on line 1 and should also hit the `debugger` statements. With `--debug` node will skip them until a debugger is attached.
",dannycoates,2011-01-31 10:16:46
30,2011-01-31 02:44:19,"I'm lucky I finaly found the ticket here. Was searching for hours and almost gave up. I propose to add the ""debugger;"" breakpoint-statement to readme.md https://github.com/dannycoates/node-inspector/blob/master/readme.md
",janmentzel,2011-01-31 10:16:46
30,2011-01-31 13:34:50,"@dannycoates Ahh, thanks for the tips!  You've built a wonderful debugging tool.  I can't thank you enough.
",xavi-,2011-01-31 10:16:46
30,2012-11-30 16:15:43,"I thought I was experiencing the same issue but it turned out to be a GUI glitch instead. I'm writing it here since this is where I ended up googling for the issue.

When I put the debugger keyword in a file that is required then the node-inspector GUI doesn't update to reflect this if the required file hasn't been loaded already.

It looks like I'm still in the file that was selected when I clicked play (to continue from a previous breakpoint or --debug-brk). However when I click next or if I reload the debugger then I can clearly see that I'm in the right spot.

If I put a debugger keyword in the code after the require so that the debugger has time to load the required file with the other debugger keyword then the breakpoint is properly highlighted from the start.
",gabrielf,2011-01-31 10:16:46
29,2010-12-30 23:45:22,"can't view long strings it is always 'foo ...(253)' everywhere
",shimondoodkin,2014-01-07 14:39:34
29,2011-06-28 15:24:44,"Yeah! node-inspector is really cool and saving lots of time, but it feels like there is no way to see long strings.
Would be nice to get long strings, even if they have to be requested, when needed. (in the console for example)
",chrisgl,2014-01-07 14:39:34
29,2012-03-21 18:29:59,"There are lots of creative ways to view long strings.  I usually just use console.log(foo) and look at the actual console (not node-inspector console) to see the string.  You can also slice the strings as desired in the console to look at part, or go crazy and auto-slice a big string into an array of lines and display multi-line with entering something like

<S_CODE_TOKEN>

into the console.

That being said, +1 on some node-inspector enhancement to allow expanding the truncated strings into long ones somehow.
",Jimbly,2014-01-07 14:39:34
29,2012-04-03 00:52:05,"This annoyed me to death so I was able to track this down to a method in lib/sessions.js.  The fix is in my gist at https://gist.github.com/2288365

I increased the size to 1000 characters (it was limited to strings of 80 characters).

Edit: As a side note I noticed the update-ui branch does have a similar fix.
",dbainbridge,2014-01-07 14:39:34
29,2013-12-21 00:06:41,"Why was this closed? This is still an issue in 0.6.1.
",STRML,2014-01-07 14:39:34
29,2013-12-26 09:52:38,"Reopening. 

See [lib/convert.js](https://github.com/node-inspector/node-inspector/blob/1d6aba52365630431f726a23e806447ba0b3c473/lib/convert.js#L97) for the code performing the truncation. The fix should be pretty straightforward, I will be very happy to accept a patch/pull request. Don't forget to add a screenshot demonstrating that the front-end (web UI) can handle long values well.
",bajtos,2014-01-07 14:39:34
29,2013-12-26 18:13:22,"Thanks for the pointer. Before I send a PR, are you opposed to removing the limit entirely? The Chrome inspector does not enforce any such limit and while it can be slow, it will print strings even of massive (>100k) length.
",STRML,2014-01-07 14:39:34
29,2013-12-27 03:58:38,"I'm very much in favor of removing the limit. Is it there to prevent large memory consumption or slowness from long strings? I hope 80 char is not the right limit to achieve that goal. Please let's make it something reasonable, if it's there at all. 1500 minimum? Only having the ability to display a low number of characters of string is quite the limitation for a debugger.
",bf0,2014-01-07 14:39:34
29,2013-12-27 08:01:50,"@STRML Node Inspector tries to match the behaviour of Chrome Developer Tools in most cases. If the GUI can handle long values (which seems to be the case), then removing the limit entirely is a very good solution indeed.
",bajtos,2014-01-07 14:39:34
29,2013-12-30 21:52:47,"@bajtos It appears that the code in `/lib/convert.js` actually has nothing to do with it. After changing the limit to 1000 and generating a long string:

![truncation](http://i.imgur.com/Po2dwM7.png)

The same result occurs when removing the limit entirely.

It appears as though some code deep inside the inspector itself is performing the truncation at 80 characters. I found [some reference to this in DebuggerClient](https://github.com/node-inspector/node-inspector/blob/master/lib/DebuggerClient.js#L127) when using `JSON.stringify`. Perhaps somebody who knows more about the inspector could help.
",STRML,2014-01-07 14:39:34
29,2013-12-31 05:48:54,"It looks like this is due to a default limitation in the v8 debugger. The default max string length is defined [here](https://github.com/v8/v8/blob/a3216d885fcfcb38a6eae301fe9680b82ccc3269/src/mirror-debugger.js#L164) which limits all String type response messages to 80 characters. The formatted message we see in the console is produced by v8 [here](https://github.com/v8/v8/blob/a3216d885fcfcb38a6eae301fe9680b82ccc3269/src/mirror-debugger.js#L564)

Luckily there is a way to pass an option in the request message which can extend the message response length for Strings.

I believe the change in Node inspector requires two things 
1. We need to add a maxStringLength property value to this [object](https://github.com/node-inspector/node-inspector/blob/01cb658ce253bfbc4bedd8e72dc1ffe9c13ffa05/lib/DebuggerAgent.js#L366-L369)
   ( V8 side of things handles this [here](https://github.com/v8/v8/blob/a3216d885fcfcb38a6eae301fe9680b82ccc3269/src/debug-debugger.js#L1429) )
   Not sure what the max length should be set to but something like 1000 would be good enough and maybe a option in the config?
2. we also need to change this [line](https://github.com/node-inspector/node-inspector/blob/01cb658ce253bfbc4bedd8e72dc1ffe9c13ffa05/lib/convert.js#L137) to become `description: String(result.value)` otherwise it will still output the limited text

I tested this with my local node inspector and it worked :) 

@bajtos I wanted to discuss point 2 above as I'm not sure what impact on other dependencies that change will have?
",pflannery,2014-01-07 14:39:34
29,2013-12-31 12:51:50,"@pflannery Thanks for your deep investigation. The proposed solutions looks good, I'd prefer to set maxStringLength to a higher value (10k or 100k) and do not add a new config option for now.

As for the second point, the change should be fine. Just verify that the content of `result.value` indicates that the value is incomplete when V8 truncates the string, ideally in a new unit-test.

This issue affects `RuntimeAgent` methods calling `evaluate` request too, the pull request should fix those too. Please consider extracting the shared code into a new method in `DebuggerClient` to prevent further code duplication.
",bajtos,2014-01-07 14:39:34
29,2014-01-07 14:39:34,"Fixed by #272.
",bajtos,2014-01-07 14:39:34
28,2010-12-30 22:34:21,"is there an option to move the next executed line cursor
",shimondoodkin,2011-07-24 02:42:55
28,2011-07-21 12:55:48,"@shimondoodkin: What does mean? Do you want the oppertunity to pause the program and then click on some line and then when you un-pause, the program should (try to) continue execution from the line you chose..?

PS: Out of curiosity, which use cases did you have for requireing this feature?
",ligaard,2011-07-24 02:42:55
28,2011-07-22 03:30:47,"emm how to explain this.. i mean like in visual basic(probably any normal ide has it) when you stop a program in debugger 
it shows a yellow arrow on the side of the current line of the code and you could drag it up or down and it will skip lines.
if you move it two lines up it makes the program repeat the last two lines .

when a program interacts with external data, you change the external data, and you want to re-run the last few lines of code without doing all the initiation again, to validate correct reading.

or for example a condition is incorrect, then you edit the if and re run the code , iterate it several times until correct.
",shimondoodkin,2011-07-24 02:42:55
28,2011-07-24 02:42:55,"the v8 api doesn't provide this capability
",dannycoates,2011-07-24 02:42:55
28,2011-07-24 07:33:22,"i think there is a way to do it, but i am not sure if it will work.

http://code.google.com/p/v8/wiki/DebuggerProtocol

as i understand with my limited knowledge it is like you set a breakpoint and then you do continue.

<S_CODE_TOKEN>
",shimondoodkin,2011-07-24 02:42:55
28,2011-07-24 07:47:29,"yes, its possible to do a ""run to cursor"" type operation that sets a hidden one time breakpoint. I can add that as a right-click option or something. But rolling back to _previous_ lines and re-running the code is not possible yet in v8 to my knowledge.

I'll add the ""run to cursor"" to the todo list.
",dannycoates,2011-07-24 02:42:55
28,2011-07-24 10:37:51,"i'm sorry
i think you right about it
there is no way to do what i wanted.

run until here is not what i wanted.

 i have confused it with the future i wanted.

thanks:)
",shimondoodkin,2011-07-24 02:42:55
27,2010-12-26 22:02:02,"hi dannycoates,

tried to re-connect to node after navigating away or closing the debugger tab and reconnecting results in the following crash message:

/usr/local/lib/node/.npm/node-inspector/0.1.4/package/lib/session.js:163
        path: s.name.split('/')
                     ^
TypeError: Cannot call method 'split' of undefined
    at /usr/local/lib/node/.npm/node-inspector/0.1.4/package/lib/session.js:163:22
    at Array.map (native)
    at parsedScripts (/usr/local/lib/node/.npm/node-inspector/0.1.4/package/lib/session.js:156:28)
    at /usr/local/lib/node/.npm/node-inspector/0.1.4/package/lib/session.js:245:13
    at Object.<anonymous> (/usr/local/lib/node/.npm/node-inspector/0.1.4/package/lib/callback.js:16:18)
    at parse (/usr/local/lib/node/.npm/node-inspector/0.1.4/package/lib/debugger.js:38:29)
    at Stream.<anonymous> (/usr/local/lib/node/.npm/node-inspector/0.1.4/package/lib/debugger.js:114:5)
    at Stream.emit (events.js:31:17)
    at Stream._onReadable (net.js:563:31)
    at IOWatcher.onReadable [as callback](net.js:156:10)
Error 0
",dotmaster,2010-12-27 16:43:40
27,2010-12-27 08:43:40,"This should be fixed in the latest version 0.1.6

Thanks,
Danny
",dannycoates,2010-12-27 16:43:40
27,2010-12-27 13:14:39,"great thx, could have tried a new version myself but was quite busy yesterday..

regards

Gregor
",dotmaster,2010-12-27 16:43:40
26,2010-12-22 06:02:00,"Hi Danny,

Will it be possible to support conditional breakpoints like in the Chrome web inspector (by creating a break-point, right clicking on it and editing it).

On a side note great work on this debugger, wasn't really a fan of the eclipse plugin
",edbo,2010-12-22 14:46:11
26,2010-12-22 06:46:11,"Thanks!

Yes you can set conditional breakpoints today, but not with right-click. Use control+click and you'll get the condition dialog. The binding is a bit awkward on mac since control+click emulates a right-click, so I might change the binding for mac in the future.
",dannycoates,2010-12-22 14:46:11
26,2010-12-22 08:56:35,"Awesome, thanks for the help.
",edbo,2010-12-22 14:46:11
26,2014-07-25 21:23:28,"@dannycoates is there no way to set a conditional breakpoint then, without the user changing their os bindings so that control key doesn't cause a right-click in OSX?
",laurelnaiad,2010-12-22 14:46:11
25,2010-12-14 21:30:22,"When I try to connect node's debugger up to node-inspector I get this stack trace:

/home/nfeger/.node_libraries/.npm/node-inspector/0.1.5/package/lib/session.js:129
    debug.request(
          ^
TypeError: Cannot call method 'request' of null
    at evaluate (/home/nfeger/.node_libraries/.npm/node-inspector/0.1.5/package/lib/session.js:129:11)
    at EventEmitter.<anonymous> (/home/nfeger/.node_libraries/.npm/node-inspector/0.1.5/package/lib/session.js:460:26)
    at EventEmitter.<anonymous> (/home/nfeger/.node_libraries/.npm/node-inspector/0.1.5/package/lib/session.js:935:19)
    at Connection.<anonymous> (/home/nfeger/.node_libraries/.npm/node-inspector/0.1.5/package/lib/debug-server.js:36:15)
    at Connection.emit (events.js:27:15)
    at [object Object].write (/home/nfeger/.node_libraries/.npm/node-inspector/0.1.5/package/vendor/ws/connection.js:434:21)
    at Stream.<anonymous> (/home/nfeger/.node_libraries/.npm/node-inspector/0.1.5/package/vendor/ws/connection.js:79:16)
    at Stream.emit (events.js:27:15)
    at Stream._onReadable (net.js:757:14)
    at IOWatcher.onReadable [as callback](net.js:276:10)

node version: 0.3.1-pre
",nafeger,2010-12-15 09:31:20
25,2010-12-14 22:16:32,"I'm having the identical problem with the identical error message.  Please help, I can't live without this.  Life is over as I know it.
",ghost,2010-12-15 09:31:20
25,2010-12-15 00:35:40,"Ok, I've found the cause. If you have been using the watch expressions they are saved to the browser's local storage. Upon returning to the page, it will try to evaluate those watches before connecting to the debugger, and crash. 

I'll get this fixed ASAP, but in the meantime to get back to a usable state, open node-inspector in the browser (it will crash the server process) and open the developer tools window of the browser. Go to the Resources panel, find localhost in the Local Storage and delete the watchExpressions key. You should then be able to restart the node-inspector process and not crash.

I hadn't noticed this since i almost never use watches. Sorry for the inconvenience, and thanks for reporting the issue :)
",dannycoates,2010-12-15 09:31:20
25,2010-12-15 01:18:10,"Thanks for the quick response.  I can resume my life now.  You should have a donation.
",ghost,2010-12-15 09:31:20
25,2010-12-15 01:31:20,"version 0.1.6 - closed by d0deaacf9b8198a37f532dea93f31ef12b4edaa0
",dannycoates,2010-12-15 09:31:20
25,2010-12-15 13:56:32,"Thanks for the quick turn around.
",nafeger,2010-12-15 09:31:20
25,2010-12-16 19:53:26,"Works great now, Thanks!
",nafeger,2010-12-15 09:31:20
24,2010-12-07 09:37:47,"<S_CODE_TOKEN>
",shimondoodkin,2010-12-08 11:02:01
24,2010-12-08 03:02:01,"test if connected before enabling profiler. closed by 9b25788d72290caf56db81f3c17cbcf32090984f
",dannycoates,2010-12-08 11:02:01
24,2010-12-10 19:55:17,":)
",shimondoodkin,2010-12-08 11:02:01
23,2010-12-03 16:37:38,"Hi!

Turned out I cannot debug child processes. I use multinode technique to span all CPU cores, so multiple node instances (children of master instance) are listening to the same socket which is created by master process (which is run under node-inspector) which itself doesn't listen to the socket. So the execution point never reaches where I can set breakpoints.

Any kludge for debugging such setups?

TIA,
--Vladimir
",dvv,2010-12-04 07:05:48
23,2010-12-04 01:49:40,"add --debug=otherport
to your node process creation command line.
manage the other port.
maybe you can detect if it is in a debug mode by your multinode app
",shimondoodkin,2010-12-04 07:05:48
23,2010-12-04 07:05:48,"Well. Children are just fork()ed so they inherit debugging port.
I reduced so far multinode to onenode during debug.

Excellent tool! (already pinged a couple of developers about packages polluting global namespace)

Thanks
--Vladimir
",dvv,2010-12-04 07:05:48
22,2010-12-02 20:05:23,"<S_CODE_TOKEN>
",shimondoodkin,2013-03-30 17:38:21
22,2011-07-21 12:57:45,"@shimondoodkin: Please explain the problem a bit further :-)
",ligaard,2013-03-30 17:38:21
22,2011-07-22 03:34:41,"it was long ago , i think i have set alots of brake points like 10 or 20 one after another and then when it stopped i clicked step-into very rapidly with mouse.
",shimondoodkin,2013-03-30 17:38:21
21,2010-11-19 12:40:12,"hi Danny, 
is there a way to prevent some specific source files to be visible in the inspector?

If I have a file I want to debug, say hello.js, that in turns depends (via ""require"") on several ""library"" files, I would like to find a way so that the library files will be hidden by the user that is debugging. 
This feature is very useful if you want to create a scripting environment and you want users to be able to run and debug their scripts in the environment without being able to see the ""core"" libraries..
",saveriocastellano,2010-11-27 07:06:56
21,2010-11-22 03:06:27,"I'm not sure I like hiding code from users, but I understand that it can be useful.

This commit 62dccc42cec1a7f335994f89d4e41ecc05419f9a is an experiment of such a feature. Any files listed in ""hidden"" in the config.json file will not display, and references to them in the call stack will show (internal script)

Try it out, and let me know what you think.
",dannycoates,2010-11-27 07:06:56
21,2010-11-22 11:00:08,"hello Danny, 
thank you for your new commit. 

I had already found a way to hide sources, my way was rather ""hacky"" though, I just filtered the list of scripts from the ""handleRequest"" method in session.js .. 
I like your way better of course, it's very clean. 

However the reason why I submitted this issue to you, is because I was struggling to find a solution that would not prevent sources of specific files to be sent to the inspector, but also prevent the user to ""step-in"" hidden code. 

When we hide files from the inspector, if the user is stepping the code in the inspector, when he is stepping through the visible code and he tries to step-in into a call that runs code from one of the hidden scripts, it is rather painful to get back to the visible script...at the moment the user either has to click ""step over next function call"" or he has to step-in several times, without knowing what is happening or where in the code he is going. 
Instead it would be cool if we could find a way so that anytime the user steps into the hidden code, the execution continue up to the first statement within the visible code...what do you think? 
To achieve that, we could, everytime there is a ""step-in"" into a hidden source, manually send a step-out command to the debugger, this will cause execution to get out of the hidden file... what do you think? 
",saveriocastellano,2010-11-27 07:06:56
21,2010-11-23 01:17:54,"couple new changes in a72e303023cfd8f2694735b3f98ca68ed99f961d
1. config.hidden strings are now regexp strings which should make scripts that follow a pattern easier to hide, like all files in a given directory.
2. hitting a break in a hidden script will automatically step out
",dannycoates,2010-11-27 07:06:56
21,2010-11-27 07:06:56,"Calling this done as of v0.1.2

Feel free to open another issue for more features :)
",dannycoates,2010-11-27 07:06:56
21,2015-01-18 14:01:56,"Sorry, but how do you hide the core modules?
",zwhitchcox,2010-11-27 07:06:56
21,2015-03-04 09:11:12,"> @zwhitchcox how do you hide the core modules?

Please open a new issue to discuss that.
",bajtos,2010-11-27 07:06:56
20,2010-11-19 05:59:04,"Refreshing the inspector crashes node-inspector.

/usr/local/lib/node/.npm/node-inspector/0.1.0/package/vendor/ws/connection.js:190
  client._req.socket.flush();
                     ^
TypeError: Object #<a Stream> has no method 'flush'
    at /usr/local/lib/node/.npm/node-inspector/0.1.0/package/vendor/ws/connection.js:190:22
    at Connection.close (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/vendor/ws/connection.js:312:3)
    at Connection.<anonymous> (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/vendor/ws/connection.js:123:20)
    at Connection.emit (events.js:27:15)
    at Connection.state (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/vendor/ws/connection.js:268:10)
    at Stream.<anonymous> (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/vendor/ws/connection.js:89:18)
    at Stream.emit (events.js:27:15)
    at Stream._onReadable (net.js:444:51)
    at IOWatcher.onReadable [as callback](net.js:153:10)
",dannycoates,2010-11-21 05:29:38
20,2010-11-21 05:29:38,"fixed in 6f48e62958facc3b05f059e137b2436b86274e2e
",dannycoates,2010-11-21 05:29:38
19,2010-11-19 05:54:32,"Since node 0.3.1 https://github.com/ry/node/commit/c7b24efd21f5c02a519c429180245ed8c3c320f1

Pausing with the pause button is likely to crash node-inspector since loop was moved out of javascript.

/usr/local/lib/node/.npm/node-inspector/0.1.0/package/lib/session.js:61
      return bt.body.frames.map(function(frame) {
                            ^
TypeError: Cannot call method 'map' of undefined
    at callFrames (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/lib/session.js:61:29)
    at /usr/local/lib/node/.npm/node-inspector/0.1.0/package/lib/session.js:116:60
    at Object.<anonymous> (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/lib/callback.js:16:18)
    at parse (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/lib/debugger.js:37:22)
    at parse (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/lib/debugger.js:64:7)
    at Stream.<anonymous> (/usr/local/lib/node/.npm/node-inspector/0.1.0/package/lib/debugger.js:115:5)
    at Stream.emit (events.js:27:15)
    at Stream._onReadable (net.js:457:31)
    at IOWatcher.onReadable [as callback](net.js:153:10)
",dannycoates,2010-11-21 01:46:25
19,2010-11-21 01:46:24,"Fix pause with no call frames. Closed by 12ad7d35138658dd27707db20e5350f4df72012c
",dannycoates,2010-11-21 01:46:25
18,2010-11-16 02:20:46,"From Floby:

I'm currently debugging a somewhat heavy application using a lot of express and connect.
The problem is that the scripts list is long and won't scroll. Moreover, file names aren't displayed entirely and since they're in a deep hierarchy (connect and express installed via npm) I can't differenciate them.

I would suggest that file names are displayed entirely or a mangled version of it, that libraries installed in the .node_libraries be displayed at the end of the list or not at all and of course that the list DOES scroll =) but I'm sure that this last one is a minor bug.
",dannycoates,2010-11-27 07:08:36
18,2010-11-21 06:07:31,"Latest commit 6ac58ae8a70d0398f27b8bb56bdfe5352e813b28 uses the shortest unique file path starting at the ends of the file structure. So /some/long/path/to/hello.js and /some/long/path/to/another/hello.js will be displayed as 'hello.js' and 'another/hello.js'.

What browser and os do not scroll, and how many files? I'm not able to reproduce this with 100 files in chrome 7 on ubuntu or osx.

I'd like to be sure scrolling works before I push a new npm release.
",dannycoates,2010-11-27 07:08:36
18,2010-11-27 07:08:36,"Calling this done as of v0.1.2

Open another issue if you still have problems
",dannycoates,2010-11-27 07:08:36
17,2010-11-05 09:03:32,"Hi,

is it possible to add an extra parameter like

--web-ip 

so one can specify other than 127.0.0.1 IPs?

Thanks
",ArtS,2010-11-27 07:09:11
17,2010-11-06 17:16:50,"node-inspector binds to INADDR_ANY. You should be able to reach it on any of your IP addresses as long as they aren't firewalled.

To verify this you can run `lsof -i -P | grep node` while node-inspector is running. You should see a line with something like `TCP *:8080 (LISTEN)` with the \* indicating any IP.

If you'd like the option to bind to a _specific_ IP I could add your proposed `--web-ip` flag. Otherwise I'd like to keep the flag list as short as possible.

Thanks,
Danny
",dannycoates,2010-11-27 07:09:11
17,2010-11-07 00:36:27,"Thanks for that!

I wonder if copy 'visit http://127.0.0.1:8080/debug?port=5858 to start debugging' can be improved to suggest that it's in fact 0.0.0.0 address, i.e. as you said, INADDR_ANY

Art
",ArtS,2010-11-27 07:09:11
17,2016-04-11 05:51:36,"For anyone else looking for an updated answer on this, it seems that the default is now `127.0.0.1` (and the parameter is named `--web-host`).  The documentation is ambiguous, as noted here:  https://github.com/node-inspector/node-inspector/issues/852
",bradisbell,2010-11-27 07:09:11
16,2010-10-02 14:08:48,"I haven't been able to find a way to break on exeception.  Is this a feature or in the roadmap?
",soitgoes,2010-10-03 11:17:33
16,2010-10-03 04:12:44,"I'll add 'pause on all exceptions' functionality in the next push. I can't easily do only uncaught exceptions because node catches all exceptions from v8. But you can already use process.on('uncaughtException', ...) for those.

Pause on all exceptions will only work with the most recent node version since it requires v8 2.4.7. It will be the 'pause' button in the lower left part of the window.
",dannycoates,2010-10-03 11:17:33
16,2010-10-03 04:17:32,"added 'pause on all exceptions' functionality. requires node with v8
2.4.7 or higher
Closed by 040ad38c65f88a0e8ad43693392a77e3f8138c1b
",dannycoates,2010-10-03 11:17:33
16,2010-10-03 19:09:21,"Confirmed that the feature worked.  Thanks so much for jumping on this.  You're doing a great service to the community.
",soitgoes,2010-10-03 11:17:33
16,2015-07-21 23:49:53,"How do we use this feature? I see reference to setPauseOnExceptions and the enums, but not how to set this (environment, command-line, in the debugger interface, etc).
",rainabba,2010-10-03 11:17:33
15,2010-09-24 19:54:58,"Identifies itself as 0.0.2 but throws unexpected token ILLEGAL on starting the debugger.
",NickTulett,2010-09-25 04:09:43
15,2010-09-25 04:09:43,"new npm package version. Closed by 82136528c8b34a5a2ab0f36e5c4f1c28fbb43028
",dannycoates,2010-09-25 04:09:43
14,2010-09-14 02:57:39,"Is there some special magic to get the stdout/err forwarded to the web debugger like you do in your video and screenshots? I've tried to no avail, calling `node-inspector --forward-io --profile` and calling `node --forward-io --profile server.js` and calling `node server.js --forward-io --profile` etc etc - but nothing seems to work.
",zzen,2010-09-14 03:09:03
14,2010-09-14 03:09:03,"This feature was removed after 0.0.1. Its nice to have so it may return soon. If you need it now you can clone the v0.0.1 tag.
",dannycoates,2010-09-14 03:09:03
13,2010-09-13 23:28:32,"Hi Danny, here's the readme.md patch you requested.

This has got to be one of the most useful `node` modules... ever. Thanks for putting it together.
",markc,2010-09-14 01:08:17
13,2010-09-14 01:08:17,"Thanks!
",dannycoates,2010-09-14 01:08:17
12,2010-09-13 18:45:35,"When using nodejs-yui3 and running the following script, node-inspector throws a parse error (see below the script).

<pre>
var sys = require('sys'),
    YUI = require(""yui3"").YUI,
    http = require('http');

YUI({
    filter: 'debug',
    _logExclude: {
        'attribute': true,
        'base': true,
        'get': true,
        'loader': true,
        'yui': true,
        'widget': true,
        'event': true
    },
    debug: true
}).use('nodejs-dom', 'event', 'node', function(Y) {

    document = Y.Browser.document;
    navigator = Y.Browser.navigator;
    window = Y.Browser.window;
    

    var docType = '<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01//EN"" ""http://www.w3.org/TR/html4/strict.dtd"">' + ""\n"";

    http.createServer(function (req, res) {
        YUI().use('nodejs-dom', 'event', 'node', function(Y) {
            var document = Y.Browser.document;
            document.title = 'This is a test';
            var i = Y.Node.create('<i id=""test"">Test This</i>');
            i.addClass('foo');
            Y.one('body').append(i);

            var test = Y.Node.create('<script>document.getElementById(""test"").innerHTML = ""test"";</script>');
            Y.one('body').append(test);

            var div = document.createElement('div');
            div.id = 'foo';
            div.innerHTML = '<em id=""foo"">Test</em> this <strong id=""bax"">awesome!</strong>';
            document.body.appendChild(div);
            //document.body.appendChild('<script>alert(""hello"");</script>');
            

            
            var foo = Y.one('#foo');
            foo.addClass('bar');
            sys.puts(document.outerHTML);

            res.writeHead(200, {'Content-Type': 'text/html'});
            var out = docType + document.outerHTML; //Page.one('doc').get('outerHTML');
            res.write(out);
            res.close();

    })}).listen(8000);

    Y.log('Server running at http://127.0.0.1:8000/');

});
</pre>


The error:

<pre>
undefined:1
running"":true}Co
              ^^
SyntaxError: Unexpected token ILLEGAL
    at Object.parse (native)
    at parse (/home/pflueger/lib/node/.npm/node-inspector/0.0.2-1-LINK-5ec80e92/package/lib/debugger.js:33:26)
    at Stream.<anonymous> (/home/pflueger/lib/node/.npm/node-inspector/0.0.2-1-LINK-5ec80e92/package/lib/debugger.js:89:5)
    at Stream.emit (events:26:26)
    at IOWatcher.callback (net:484:33)
    at node.js:769:9
</pre>


I put a try/catch around the problem just see what was going on.  This is what I got:

<pre>
13 Sep 14:44:50 - Caught error { message: [Getter/Setter]
, stack: [Getter/Setter]
, type: 'unexpected_token'
, arguments: [ 'ILLEGAL' ]
} parsing: {""seq"":0,""request_seq"":862349515314,""type"":""response"",""command"":""scripts"",""success"":true,""body"":[{""handle"":1,""type"":""script"",""name"":""/home/pflueger/lib/node/.npm/jsdom/0.1.9/package/lib/jsdom/browser/htmltodom.js"",""id"":46,""lineOffset"":0,""columnOffset"":0,""lineCount"":135,""source"":""(function (exports, require, module, __filename, __dirname) { var HtmlToDom = function(parser){\n  \n  if(parser && parser.write) {\n    // sax parser\n    \n    this.appendHtmlToElement = function(html, element){\n\n      var currentElement = element, currentLevel = 0;\n\n      parser.onerror = function (e) {};\n\n      parser.ontext = function (t) {\n        var ownerDocument = currentElement.ownerDocument || currentElement;\n        var newText = ownerDocument.createTextNode(t);\n        currentElement.appendChild(newText);\n      };\n\n      parser.onopentag = function (node) {\n        var nodeName  = node.name.toLowerCase(),\n            document   = currentElement.ownerDocument || currentElement,\n            newElement = document.createElement(nodeName),\n            i          = 0,\n            length     = (node.attributes && node.attributes.length) ? \n                          node.attributes.length                     :\n                          0;\n        for (i in node.attributes)\n        {\n          if (node.attributes.hasOwnProperty(i)) {\n            newElement.setAttribute(i, node.attributes[i]);\n          }\n        }\n        currentElement.appendChild(newElement);\n        currentElement = newElement;\n      };\n\n      parser.onclosetag = function(node) {\n        currentElement = currentElement.parentNode;\n      }\n\n      parser.write(html).close();\n\n      return element;\n    }\n    \n  } else if(parser && (parser.ParseHtml || parser.DefaultHandler)) {\n    \n    // Forgiving HTML parser\n    \n    if(parser.ParseHtml){\n      // davglass/node-htmlparser\n    } else if(parser.DefaultHandler){\n      // tautologistics/node-htmlparser\n      parser.ParseHtml = function(rawHtml){\n        var handler = new this.DefaultHandler();\n        var parser = new this.Parser(handler);\n        parser.parseComplete(rawHtml);\n        return handler.dom;\n      }\n    }\n    \n    this.appendHtmlToElement = function(html, element){\n\n      if (typeof html !== 'string') {\n          html +='';\n      }\n      \n      var parsed = parser.ParseHtml(html);\n\n      for (var i = 0; i < parsed.length; i++) {\n          setChild.call(element, parsed[i]);\n      }\n\n      return element;\n      \n    }\n    \n  } else if(parser && parser.moduleName == 'HTML5') { /* HTML5 parser */\n    this.appendHtmlToElement = function(html, element) {\n      if(typeof html !== 'string') html += '';\n      var p = new parser.Parser({document: element.ownerDocument});\n      var tree = p.parse_fragment(html, element);\n      throw new Error(\""Fixme!\"");\n    }\n  } else {\n    \n    this.appendHtmlToElement = function(){\n      var sys = require('sys');\n      sys.puts('');\n      sys.puts('###########################################################');\n      sys.puts('#  WARNING: node-htmlparser could not be found.');\n      sys.puts('#  Element.innerHTML setter support has been disabled');\n      sys.puts('#  Element.innerHTML getter support will still function');\n      sys.puts('#  Download: http://github.com/tautologistics/node-htmlparser');\n      sys.puts('###########################################################');\n      sys.puts('');\n\n    }\n\n  } \n}\n\n// utility function for forgiving parser\nvar setChild = function(node) {\n\n    var newNode, currentDocument = this._ownerDocument || this;\n    \n    if (node.type == 'tag' || node.type == 'script' || node.type == 'style') {\n        newNode = currentDocument.createElement(node.name);\n    }\n    if (node.type == 'text') {\n        newNode = currentDocument.createTextNode(node.data);\n    }\n    if (node.type == 'comment') {\n        newNode = currentDocument.createComment(node.data);\n    }\n    if (node.attribs && newNode) {\n        for (var c in node.attribs) {\n            newNode.setAttribute(c, node.attribs[c]);\n        }\n    }\n    if (node.children && newNode) {\n        for (var c = 0; c < node.children.length; c++) {\n            setChild.call(newNode, node.children[c]);\n        }\n    }\n    if (newNode) {\n        return this.appendChild(newNode);\n    } else {\n        return null;\n    }\n};\n\nexports.HtmlToDom = HtmlToDom;\n\n});"",""sourceLength"":4054,""scriptType"":2,""compilationType"":0,""context"":{""ref"":0},""text"":""/home/pflueger/lib/node/.npm/jsdom/0.1.9/package/lib/jsdom/browser/htmltodom.js (lines: 135)""},{""handle"":3,""type"":""script"",""name"":""buffer"",""id"":17,""lineOffset"":0,""columnOffset"":0,""lineCount"":335,""source"":""(function (exports, require, module, __filename, __dirname) { var SlowBuffer = process.binding('buffer').SlowBuffer;\n\n\nfunction toHex (n) {\n  if (n < 16) return \""0\"" + n.toString(16);\n  return n.toString(16);\n}\n\n\nSlowBuffer.prototype.inspect = function () {\n  var out = [],\n      len = this.length;\n  for (var i = 0; i < len; i++) {\n    out[i] = toHex(this[i]);\n  }\n  return \""<SlowBuffer \"" + out.join(\"" \"") + \"">\"";\n};\n\n\nSlowBuffer.prototype.toString = function (encoding, start, end) {\n  encoding = String(encoding || 'utf8').toLowerCase();\n  start = +start || 0;\n  if (typeof end == \""undefined\"") end = this.length;\n\n  // Fastpath empty strings\n  if (+end == start) {\n    return '';\n  }\n\n  switch (encoding) {\n    case 'utf8':\n    case 'utf-8':\n      return this.utf8Slice(start, end);\n\n    case 'ascii':\n      return this.asciiSlice(start, end);\n\n    case 'binary':\n      return this.binarySlice(start, end);\n\n    case 'base64':\n      return this.base64Slice(start, end);\n\n    default:\n      throw new Error('Unknown encoding');\n  }\n};\n\n\nSlowBuffer.prototype.write = function (string, offset, encoding) {\n  // Support both (string, offset, encoding)\n  // and the legacy (string, encoding, offset)\n  if (!isFinite(offset)) {\n    var swap = encoding;\n    encoding = offset;\n    offset = swap;\n  }\n\n  offset = +offset || 0;\n  encoding = String(encoding || 'utf8').toLowerCase();\n\n  switch (encoding) {\n    case 'utf8':\n    case 'utf-8':\n      return this.utf8Write(string, offset);\n\n    case 'ascii':\n      return this.asciiWrite(string, offset);\n\n    case 'binary':\n      return this.binaryWrite(string, offset);\n\n    case 'base64':\n      return this.base64Write(string, offset);\n\n    default:\n      throw new Error('Unknown encoding');\n  }\n};\n\n\n// slice(start, end)\nSlowBuffer.prototype.slice = function (start, end) {\n  if (end > this.length) {\n    throw new Error(\""oob\"");\n  }\n  if (start > end) {\n    throw new Error(\""oob\"");\n  }\n\n  return new Buffer(this, end - start, +start);\n};\n\n\n// Buffer\n\nfunction Buffer (subject, encoding, offset) {\n  if (!(this instanceof Buffer)) {\n    return new Buffer(subject, encoding, offset);\n  }\n\n  var type;\n\n  // Are we slicing?\n  if (typeof offset === 'number') {\n    this.length = encoding;\n    this.parent = subject;\n    this.offset = offset;\n  } else {\n    // Find the length\n    switch (type = typeof subject) {\n      case 'number':\n        this.length = subject;\n        break;\n\n      case 'string':\n        this.length = Buffer.byteLength(subject, encoding);\n        break;\n\n      case 'object': // Assume object is an array\n        this.length = subject.length;\n        break;\n\n      default:\n        throw new Error(\""First argument need to be an number, array or string.\"");\n    }\n\n    if (this.length > Buffer.poolSize) {\n      // Big buffer, just alloc one.\n      this.parent = new SlowBuffer(this.length);\n      this.offset = 0;\n\n    }TypeError: Cannot read property '1' of null
    at parse (/home/pflueger/lib/node/.npm/node-inspector/0.0.2-1-LINK-5ec80e92/package/lib/debugger.js:54:12)
    at parse (/home/pflueger/lib/node/.npm/node-inspector/0.0.2-1-LINK-5ec80e92/package/lib/debugger.js:41:9)
    at Stream.<anonymous> (/home/pflueger/lib/node/.npm/node-inspector/0.0.2-1-LINK-5ec80e92/package/lib/debugger.js:93:5)
    at Stream.emit (events:26:26)
    at IOWatcher.callback (net:484:33)
    at node.js:769:9
</pre>

",matthewpflueger,2010-09-14 02:57:46
12,2010-09-14 01:04:58,"thanks, I'm able to reproduce it. I'll look at it tonight.
",dannycoates,2010-09-14 02:57:46
12,2010-09-14 02:57:46,"handle multi-byte characters from node. Closed by 5efcf0ea0c774941548cfda33a78ac1d6931567a
",dannycoates,2010-09-14 02:57:46
11,2010-09-06 15:30:48,"This would help users of node-inspector get it installed. On a more personal note, it would also simplify the installation instructions for users of the nodify IDE that depends on node-inspector.
",past,2010-09-07 03:37:15
11,2010-09-06 20:38:54,"This is very helpful, thank you!
",dannycoates,2010-09-07 03:37:15
10,2010-08-27 23:10:21,"...code...
debugger;
...code...

this stops the inspector, and is much more useful than --debug-brk switch in node !
",kapouer,2010-09-10 05:53:45
10,2010-09-10 05:53:45,"I'm not sure of the best place for this. feel free to add to the wiki or send me a patch
",dannycoates,2010-09-10 05:53:45
9,2010-08-27 23:08:47,"It might also help potential packagers (me) to know from which version
of webkit you got the original front-end files, ideally with a short description
of how you modified them.
",kapouer,2010-11-27 07:09:11
9,2010-09-10 05:51:54,"I'm using the git mirror as my source, and im currently on commit 6e7b8ab569e6fa654217ecacd091f36a6c851aaa

I make no direct modifications to the WebKit code. I override what I must in the front-end/node directory and use my own front-end/index.html file.
",dannycoates,2010-11-27 07:09:11
8,2010-08-27 23:05:46,"The reason being node_g is not necessarily available, while node certainly is :)
",kapouer,2010-09-10 05:47:32
8,2010-08-28 15:14:12,"the node_g requirement will be gone in the next push :)

Originally there was to a bug in v8 on linux that segfaulted node but not node_g during debugging. This has since been fixed.

In the interim if you don't have node_g you can start your process separately with --debug and no --start flag for the inspector.
",dannycoates,2010-09-10 05:47:32
8,2010-08-28 15:19:04,"i'm fully aware of that bug, it struk me in the face since i'm co-maintaining libv8 for debian :)
thank you for the fix.
Actually i'm investigating wether i can package node-inspector for debian
",kapouer,2010-09-10 05:47:32
8,2010-09-10 05:47:32,"I've completely removed the --start flag, so no more node_g. It has been the biggest trip up for most new users. The web interface has been updated to make connecting to other processes more friendly. Hopefully --start won't have to return again.
",dannycoates,2010-09-10 05:47:32
7,2010-08-24 15:49:20,,NV,2010-10-30 19:44:35
7,2010-08-25 02:55:34,"This will take some time. I'm gonna consider this an enhancement
",dannycoates,2010-10-30 19:44:35
7,2010-10-30 19:44:35,"Sorry this took 2 months :/ 
it's now working in v0.1 9eeebdbd11c03dc00cc555d998e517efe1da9d0f
",dannycoates,2010-10-30 19:44:35
6,2010-08-24 15:37:22,"[![__proto__ not shown](http://elv1s.ru/i/node-inspector-proto-not-shown.png)](http://elv1s.ru/i/node-inspector-proto-not-shown.png)

node-inspector does not show `__proto__` in the Scope Variables pane. In-browser Web Inspector does.
",NV,2010-08-25 02:53:45
6,2010-08-25 02:53:45,"added in 390020a5f1ee1fd0ab68de8f0e235f752a973764
",dannycoates,2010-08-25 02:53:45
5,2010-08-17 16:50:23,"Since those two files are not called directly,
should they not better be in lib/ ?
",kapouer,2010-08-18 16:56:44
5,2010-08-18 16:56:43,"you are correct. I will move them to lib in the next commit :)
",dannycoates,2010-08-18 16:56:44
4,2010-08-09 10:15:11,"When I click “Add” under the “Watch Expressions” section of the debugger sidebar in WebKit Nightlies or release-Safari v5, a new row appears, but there is no text entry box in it to type an expression in. It works fine in Chrome, dev channel.
",ELLIOTTCABLE,2010-08-11 23:47:10
4,2010-08-10 03:36:47,"safari transmits the space character used for new watch expressions differently than chrome, which v8 doesn't seem to like. I've put in a kludge fix until I can figure out what's wrong with v8. Try this commit: a7e32cbd202b1bbb4cedee793c0dd958aad1f3e8
",dannycoates,2010-08-11 23:47:10
3,2010-08-02 05:40:17,"FWIW I am getting this following the first lot of instructions. Linux x86_64, node from git compiled with --debug using gcc 4.5.0.

<S_CODE_TOKEN>
",markc,2010-08-12 06:47:10
3,2010-08-02 05:56:42,"Exit code 127 indicates a 'command not found error'.

could you try running hello.js separately? I suspect the sudo is causing problems since the child process for hello.js won't also start under sudo. Try something like:

~/nodejs/node-inspector sudo node_g --debug test/hello.js &

~/nodejs/node-inspector sudo node bin/inspector.js

If that doesn't work could you provide more details on your environment and distro?
",dannycoates,2010-08-12 06:47:10
3,2010-08-02 06:39:35,"It's the same without sudo, I just tried it for the sake of a different test. I'm doing some more testing and will try gdb. My distro is x86_64 Archlinux with chromium nightly 6.0.483.0 (54513), gcc 4.5 and glibc 2.12 and a daily build of node from git.

I don't have a node_g but I do use `./configure --prefix=/usr --debug`

<S_CODE_TOKEN>

Ah, your suggestion above seems to work, at least it runs. I'm unfamiliar with what to expect but setting breakpoints does not enable the top RHS step over/in/out buttons. No doubt I need to rtfm.

If I get this working I'd like to include it with by binary node packages as a default module.
",markc,2010-08-12 06:47:10
3,2010-08-02 06:45:03,"There we go, another few minutes of fiddling around and...

<S_CODE_TOKEN>
",markc,2010-08-12 06:47:10
3,2010-08-02 07:40:10,"Unfortunately I'm not having much luck with a decent backtrace...

<S_CODE_TOKEN>
",markc,2010-08-12 06:47:10
3,2010-08-02 15:17:22,"node_g is required for debugging node on linux (at least for now). See http://github.com/ry/node/issues/issue/212

I don't know why you don't have a node_g when you configure --debug. I haven't had any problems with building node so I haven't waded through the build scripts. If you can get node_g to build, you should be able to use node-inspector. Maybe `make distclean` ??
",dannycoates,2010-08-12 06:47:10
3,2010-08-19 12:49:04,"I had the same problem. Node was installed via [homebrew](http://github.com/mxcl/homebrew). Mac OS X 10.5.8.

<pre>node-inspector ➤ node bin/inspector.js test/hello.js
visit http://127.0.0.1:8080 to start debugging

events:12
        throw arguments[1];
                       ^
Error: ECONNREFUSED, Connection refused
    at IOWatcher.callback (net:871:22)
    at node.js:773:9
node-inspector ➤ node --version 
v0.1.104</pre>


I googled for ""node_g"" and found:

> `node_g` is the debug build of node, which can built with `configure --debug; make; make install`

http://nodejs.org/docs/v0.1.12/api.html#_extension_api

So I built it. Then node-inspector worked well.

<pre>node-inspector ➤ node_g --debug test/hello.js &
[1] 29140
debugger listening on port 5858
Server running at http://127.0.0.1:8124/
node-inspector ➤ node bin/inspector.js
visit http://127.0.0.1:8080 to start debugging</pre>


After all, why do I need `node_g`?
",NV,2010-08-12 06:47:10
3,2010-08-19 14:32:21,"There was a bug in v8 that would segfault node on linux during debugging and node_g was just a workaround. It has recently been fixed, and I will be removing the node_g requirement once node (0.1.105?) has the latest v8. Here's the v8 issue: http://code.google.com/p/v8/issues/detail?id=830
",dannycoates,2010-08-12 06:47:10
2,2010-07-26 09:43:16,"Your instructions on github go well for me, but when I open http://localhost:8080 in chrome (& chromium) It just says 

""You need to enable debugging before you can use the Scripts panel""

So I click on the Enable Debugging icon in the bottom left, but nothing appears to happen..

Thanks!
",nhemsley,2010-07-26 22:33:00
2,2010-07-26 14:24:04,"For chrome 5 you must use 127.0.0.1 instead of localhost. It appears to be a bug in their websocket code. It is fixed in chrome 6, http://www.chromium.org/getting-involved/dev-channel

If that works please close the issue.

Thanks :)
",dannycoates,2010-07-26 22:33:00
2,2010-07-26 15:32:59,"Yes, sorry. I didnt read the docs carefully enough.
",nhemsley,2010-07-26 22:33:00
2,2010-07-26 16:09:59,"no problem, it's not obvious that localhost and 127.0.0.1 aren't the same in chrome 5, they certainly should be. I'll updated the readme to note chrome 5 explicitly
",dannycoates,2010-07-26 22:33:00
1,2010-07-21 15:37:02,"Inspector should automatically continue the debugged process when a break event occurs and no gui is attached. This mimics the behavior of the client side debugger.

Or if breakpoints are saved by the gui with web sql, remove all breakpoints on disconnect and restore on reconnect.
",dannycoates,2010-07-22 02:17:13
1,2010-07-22 02:17:13,"took the easy way for now and just continue from inspector.js when no ui is attached. commit a37a27f52edafd2d7220
",dannycoates,2010-07-22 02:17:13
1,2011-03-30 00:38:55,"Is there an option to bypass that behaviour?
I have some network-related init code, and I simply can't refresh the browser quickly enough to hit the breakpoint.
",vsviridov,2010-07-22 02:17:13
1,2011-03-30 03:34:26,"Maybe starting your node process with `--debug-brk` could work. It will pause your program on the first line so that you'll have time to attach the debugger. Let me know if this doesn't work for you.

Thanks,
Danny
",dannycoates,2010-07-22 02:17:13
1,2011-03-30 03:54:46,"Okay, I did not try to pass that parameter to node executable. I was passing it directly to the node-inspector binary, and that was not working out properly.

Thanks.
",vsviridov,2010-07-22 02:17:13
