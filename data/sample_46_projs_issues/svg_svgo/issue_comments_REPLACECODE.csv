issue_num,datetime,body,login,close_date
689,2017-03-27 10:46:21,"I have error when start `""*.svg"": ""imgmin""` in lint-staged. Only if more than one svg file has been uncommitted.

Running tasks for *.svg
→ Unknown argument: ~\mySvgFolder\attention.svg",BrRenat,2017-03-27 17:54:30
689,2017-03-27 17:54:30,"SVGO has syntax
<S_CODE_TOKEN>
",GreLI,2017-03-27 17:54:30
689,2017-03-28 05:50:25,"`
""scripts"": {
    ""imgmin"": ""svgo -f mySvgFolder"",
}
`
Ok, if my syntax wrong. How i should add svgo task to lint-staged?
I wrote that the error appears only if more than one svg file has been uncommitted. With one svg file everything works.",BrRenat,2017-03-27 17:54:30
688,2017-03-23 16:47:39,addresses https://github.com/svg/svgo/issues/395,pklingem,2017-03-25 19:17:23
688,2017-03-25 19:17:27,Thanks!,GreLI,2017-03-25 19:17:23
688,2017-03-27 14:59:24,@GreLI any chance you could cut a release for us now that this has been merged? ,pklingem,2017-03-25 19:17:23
688,2017-03-27 17:55:39,It's not ready yet. There are plans for major release.,GreLI,2017-03-25 19:17:23
688,2017-03-27 18:33:11,"thanks for the quick response, we'll lock to the sha for the time being.",pklingem,2017-03-25 19:17:23
687,2017-03-23 13:24:43,"@caub thanks for catching it
@GreLI Why tests were green? ",Yeti-or,2017-03-23 17:45:39
687,2017-03-23 17:45:30,This plugin isn't covered. Actually it's quite outdated and I'm going to remove it.,GreLI,2017-03-23 17:45:39
686,2017-03-22 18:45:43,"This is a simple plugin that allows you to add height and width dimensions based off the viewbox. It was made to deal with browser issues with rendering SVGs by default with 0x0 dimensions. This can be solved alternatively by giving the SVG a height / width through CSS. Setting a width/height in the SVG may not be desired.

Definitely open to thoughts and improvements! This was based off other plugins, removeDimensions and addAttributesToSVGElement.
",nym,2017-03-25 18:40:03
686,2017-03-23 09:59:54,"it's fun because I'm doing the opposite, removing width and height when there's a viewBox. Width/height are really not necessary, like for jpeg/png, it's stylable in css",caub,2017-03-25 18:40:03
686,2017-03-23 15:43:42,"@caub Totally width/height are not typically necessary. In my case, it allowed for just updating assets instead of deploying a new version of the app I'm working on.  Had I not been time / deployment constrained, I would have used removeDimensions and set the dimensions in CSS ;-)",nym,2017-03-25 18:40:03
686,2017-03-25 07:55:35,"@nym for doing something simple like this, I would do that: 
https://github.com/caub/svgo/blob/browser/test/browser.js#L38-L45

I've added .js2svg in lib/svgo.js then I can modify the result tree, remove attributes on svg, then stringify again

<S_CODE_TOKEN>
and result2 is 25 chars shorter as expected

You want to do the opposite, remove viewBox, but it's similar",caub,2017-03-25 18:40:03
686,2017-03-25 18:40:03,"Thanks for commitment! However, this plugin has nothing to do with optimizing and thus I cannot accept it.

Unfortunately, SVGO is already somewhat bloated with such plugins, so it needs to focus on its main purpose to keep things as simple as possible. Feel free to use it by yourself, the plugin system was done to be easy to extend like this. Best wishes!",GreLI,2017-03-25 18:40:03
685,2017-03-22 06:11:44,,Yeti-or,2017-03-22 08:51:49
685,2017-03-22 08:51:59,Thanks!,GreLI,2017-03-22 08:51:49
685,2017-03-23 13:16:28,@caub could you explain where is the typo ?,Yeti-or,2017-03-22 08:51:49
685,2017-03-23 13:21:14,https://github.com/svg/svgo/commit/4495a34f55560b2bc05cf837ba9dd01ca20cd479#diff-e2a39016bf512698d27bb1591c306096  so in plugins/transformsWithOnePath.js l:38 it should be `_path.relative2absolute`,caub,2017-03-22 08:51:49
685,2017-03-23 13:27:02,fixed it here: https://github.com/svg/svgo/pull/687,Yeti-or,2017-03-22 08:51:49
684,2017-03-15 17:06:00,"Is it possible with any combination of settings to prevent `aria-*` attributes from being remove from the `<svg>` tag when optimising? 

I have tried all options that seem relevant to this but have had no luck so far:
<S_CODE_TOKEN>

This is quite important as the `aria-labelledby` and `aria-describedby` attributes allow screen readers to interpret the content of inline SVG's.",MrFirthy,
684,2017-03-15 18:56:14,"I believe they're removed by `removeUnknownsAndDefaults` as unknowns. But your config is set incorrect, there should be an array of plugins in `plugins` param.",GreLI,
683,2017-03-13 13:38:25,,dpanchenko,2017-03-25 19:15:35
683,2017-03-25 19:15:35,"Since this plugin doesn't correctly parse CSS, it can break images in unexpected ways. You may be interested in the effort being done in #592.",GreLI,2017-03-25 19:15:35
682,2017-03-11 23:35:24,"The <defs> and <use> elements are great for code reuse. However, theoretically there are some cases in which getting rid of them would result in a smaller SVG file size. For example, currently plugins like ""mergePaths"" have no effect on SVG elements referenced by <use> tags. If the <use> tag were to be replaced with a deep clone of the content it references, the ""mergePaths"" plugin would potentially be able to simplify things even further (depending on the referenced content, of course).

Anyway, I'm just wondering if this has ever been suggested/proposed before. :)",alexjlockwood,
682,2017-03-21 22:05:17,I second the need for this!,peternowell,
681,2017-03-10 23:07:42,"Feature Req: Add Option to export groups as separate indipendent svg files

Rationale: Almost all artists draw their svg icons in a single svg document, so they can make global modifications or just compare on the same layout the various icon styles. 
It is a bother and a waste of time to have to save each icon separatedly after every update to such master svg file.
A very useful feature of svgo would then be the option to load an svg and export all groups (only those that are children of the root node, of course) as separate svg files.

The requisites are:

1 - The name of each exported svg file should be the group id.
2 - The coordinates should be transformed to be relative to the group bounding box (similar to the inkscape option 'resize the page to fit selected elements')
3 - The viewport and the viewBox of each svg should also be generated to fit the group bounding box
4 - Each svg should carry the definitions of the original file that it needs and discards the others
5 - All the resulting svg files should be valid svg v1.1 files, and when viewed in browsers they should have the exact size of the original group bounding box, only translated to 0,0




",Emasoft,2017-03-11 08:38:23
681,2017-03-11 08:38:23,"Unfortunately, it's an image editing request, not optimizing one, so it's out of scope.",GreLI,2017-03-11 08:38:23
680,2017-03-10 22:23:34,"SVGs exported from Adobe Illustrator make often extensive use of clipPath and mask elements. Sometimes those clipped or masked elements are as big as the image even if the part displayed in the end is very small. Those are very slow because of multiple layers redraw and also tend to bloat the code. A clipPath applied on a closed curve or a polygon can be easily replaced by a single curve with a simple boolean operation.

 In my tests with Inkscape I've found that an svg file with 5-6 layers of complex closed curves + clipPaths exported from Adobe Illustrator can be flattened with boolean operations and resulting in a single merged element made of closed paths with no loss of quality.
 Masks can be also transformed in flat shapes using alpha colors and bezier curves.

The result is identical to the original svg image, only flattened and with reduced overdraw.",Emasoft,
680,2017-03-11 08:40:26,Path merging and computation is a complex topic. Can you suggest an effective algorithm (i.e. better then O(n²))?,GreLI,
679,2017-03-10 17:20:05,"I'm trying to minify an svg I think is from Illustrator which contains lots of unused style classes but minifyStyles doesn't actually remove them... is this expected?

<S_CODE_TOKEN>

After it's just removed the spaces/new lines.

Thanks!
",ianchadwick,2017-03-11 08:43:07
679,2017-03-11 08:43:07,"Yep, SVGO can't parse styles for now. That would bring a significant code complication. There is an effort in #592, though I doubt in its performance.",GreLI,2017-03-11 08:43:07
679,2017-03-14 16:28:25,"@GreLI but it does, not directly but via CSSO.
@ianchadwick By default minifyStyles should remove unused styles based on usage data. There are few exceptions:
- SVG contains `<script>` element
- some elements have an `on*` attribute (event handler)

If something from the list is found in SVG, minifyStyles decides that style removal is unsafe. You can force removal by setting `usage.force` option to `true` (see [example](https://raw.githubusercontent.com/svg/svgo/master/test/plugins/minifyStyles.09.svg)).
I admit a problem with minifyStyles. Let me know if you found cause of the problem.",lahmatiy,2017-03-11 08:43:07
679,2017-03-16 08:34:38,"I understood the problem. Unused styles removal feature were introduced in PR #640. But it's not released yet.
@GreLI When are you planning publish a new version?",lahmatiy,2017-03-11 08:43:07
679,2017-03-16 09:00:10,"@lahmatiy thanks for the extra info.

Neithier of those exceptions are true for the SVG i'm attempting to minify. 

Here's what I've tried:

`svgo 1.svg 1.min.svg --pretty --enable=minifyStyles --config '{""plugins"":[{""minifyStyles"":{""usage"":{""force"":true}}}]}'`

Here are the before and after shots.

Before: [Fat file](http://pastebin.com/raw/6Znrpmp0)
After: [Minified(ish)](http://pastebin.com/raw/F1p6q2we)

The SVG only needs 9/10 of the first classes the rest are not used.

@GreLI If by performance you mean speed of conversion this is a complete non issue for me. I'd much rather spend 1 minute making a file 90% smaller than extra ms & bandwidth on every single request :)

Thanks!",ianchadwick,2017-03-11 08:43:07
679,2017-03-16 09:12:24,"@ianchadwick Do you use version from npm or github master? Version on npm hasn't unused style removal feature. Wait for upcoming release or try version from master.

> If by performance you mean speed of conversion this is a complete non issue for me.

I guess @GreLI misunderstood you, because mentioned issued #592 doesn't relate to your problem.",lahmatiy,2017-03-11 08:43:07
679,2017-03-16 09:26:38,@lahmatiy npm... just tried from master and it's working as expected. Thank you!!!,ianchadwick,2017-03-11 08:43:07
678,2017-03-09 14:46:46,"if you have svgs with unquoted attributes such as:
`xmlns=""http://www.w3.org/2000/svg"" width=20px height=20px`

The error: `Error in parsing SVG: Unquoted attribute value` is emitted.

I've created a loader to temporary fix this in webpack:
https://www.npmjs.com/package/xml-fix-loader

<S_CODE_TOKEN>",vzaidman,
677,2017-03-09 13:48:15,"I'm trying to run a few plugins over a folder of svgs and none of them are working. Can you enable more than one plugin at a time via the CLI?

Example command:
`svgo -f INPUT -o OUTPUT -p 1 --enable='removeTitle, removeDesc, removeDimensions'`",mrmohtas,2017-03-11 08:44:47
677,2017-03-10 12:53:17,"After some investigation I've found out the way to use multiple plugins

`svgo -f INPUT -o OUTPUT -p 1 --enable=removeTitle --enable=removeDesc --enable=removeDimensions`

Not the best way to do it and not well documented... Failing silently isn't helpful either",mrmohtas,2017-03-11 08:44:47
677,2017-03-11 08:44:47,"Well, that's a standard command-line syntax. In bash you can use curly brackets like
<S_CODE_TOKEN>
Can't say about other terminals.",GreLI,2017-03-11 08:44:47
676,2017-03-07 09:13:25,"<S_CODE_TOKEN>

I've checked v0.7.1, it has `.svgo.yml` at the root dir.",e-cloud,2017-03-07 09:16:32
676,2017-03-07 09:16:32,"sorry, I find out it's broken by yarn's clean command.",e-cloud,2017-03-07 09:16:32
675,2017-03-02 16:52:02,"## Problem

Removing the xml processing instruction breaks mime type detection using `file`.  I've tested this with both:

- file-5.22 on Debian 8 (jessie)
- file-5.04 on OSX 10.11.6

A number of other programs depend on file's mime type detection to avoid mime type spoofing.  (In my case, I ran across it with the ruby gem Paperclip.)

## Steps to reproduce

Using svgo 0.7.2 and node v6.9.5:

<S_CODE_TOKEN>

## Suggested resolution

Make `removeXMLProcInst` a non-default option.",posgarou,2017-03-11 08:46:08
675,2017-03-11 08:46:08,"See #306. MIME-detection is broken, use correct tools for your tasks.",GreLI,2017-03-11 08:46:08
674,2017-03-02 15:09:58,"This is a feature request.

There's a plugin for minifying IDs but this is basically useless when inlining SVGs in HTML because it is guaranteed to cause problems (i.e. when inlining at least two SVGs that contain IDs you're guaranteed to have a conflict on ID ""a"").

It would be very useful if SVGO allowed prefixing IDs with a configurable key. This would allow tooling like `react-svg-loader` to generate a unique prefix and pass it to SVGO to guarantee the IDs don't break when the SVGs are inlined.

A problem is that the IDs can be referenced with `xlink:href` attributes and `url()` values but this is already addressed by the `cleanupIDs` plugin.",pluma,
674,2017-03-02 16:09:33,"Actually, cleanupIDs has `prefix` option (works only with minifying).",GreLI,
674,2017-03-10 19:25:42,"I, too, need this feature.

the cleanupIDs `prefix` option is not a solution to this problem.  Consider two svg files both of which have a defined id `""id1""`.  When using the two separate svgs inline, these two ids will conflict, since they exist in the same document.  Using the `prefix` option only moves this problem from having two conflicting `""id1""` ids to having two conflicting `""prefix_id1""` ids.",Kraxxis,
674,2017-03-10 22:08:49,"The prefix should be the name of the file. For example: 

 IconOfACar.svg -> iconofacar_id1
IconOfABeer.svg -> iconofabeer_id1",Emasoft,
674,2017-03-10 22:21:24,Being able to supply the prefix should suffice. Seems more versatile than having SVGO pick one automagically.,pluma,
674,2017-03-10 22:38:37,"I don't think that is versatile for batch processing. I usually process thousands of svg files with a script at every site update, and I surely don't want to manually enter a prefix for each one.",Emasoft,
674,2017-03-20 22:18:56,Similar issue?: https://github.com/svg/svgo/issues/673,strarsis,
673,2017-03-01 21:41:18,"Not all styles can be inlined, like those in At-Rules.
For even further scoping the left over CSS one could rename all selectors in a way that makes collisions with ones from other SVGs highly unlikely - by prefixing them with a manually passed string, by the basename of the SVG file or randomly generated.",strarsis,
672,2017-02-28 23:18:57,"It would be great if the default config file would not be a `.svgo.yml` hidden dotfile. Talking about this:

https://github.com/svg/svgo/blob/4822a44f37bbbe803b710511f3b038cf9e21970d/lib/svgo/config.js#L31

This is causing issues with yarn (https://github.com/yarnpkg/yarn/issues/1051) and in a roundabout way other modules, like extract-text-webpack-plugin (https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/352#issuecomment-283191548).",tehnomaag,
672,2017-02-28 23:21:08,Also was covered a bit in #622 without resolving it.,tehnomaag,
672,2017-03-11 08:49:10,"Dotfiles for configs is a like common convention. I believe, yarn should work with such a files properly.",GreLI,
671,2017-02-27 18:36:35,"If I run the following SVG through `svgo` the resulting cleaned code actually has the wrong width/height values.

original:
<S_CODE_TOKEN>

conversion result:
<S_CODE_TOKEN>

While the `viewbox` and `width` values remain the same, the height has gone from `12pt` to `16` without any unit associated with it whatsoever, which breaks any build chain that relies on an SVG being able to correctly specify what it's content width and height should be for preallocating that space (such as on a webpage, so that there is a correctly sized empty ""box"" for content to flow around, without reflowing the content once the image loads)
",Pomax,
671,2017-03-11 08:53:08,"12pt is strictly equal to 16px (px is a default unit) by [standard](https://www.w3.org/TR/css3-values/#absolute-lengths), so it's quite unclear what is broken.",GreLI,
671,2017-03-11 18:49:51,"It's not a matter of ""broken"", it's a matter of ""svgo can do something better here than what it currently does"". 

Preserving units in values so that they can be interpreted by other tools is excellent practice, so that'd be reason alone to address this, but a second thing to consider is that turning `height=""12pt""` into `height=16` but then leaving `weight=""83pt""` as is, is inconsistent behaviour, and code with inconsistent behaviour is almost guaranteed to have esoteric bugs.

Removing the unit can be an optimization in that it can saves up to 6 bytes (3 as max CSS unit length, twice because of the two attributes) on the total size of an SVG file, but that's not a value that makes an appreciable difference, even when added up over thousands or hundreds of thousands of files (you'd need millions of files to start saving MBs). That said, it's still an optimization and so it's good that svgo does it, but it's equally good to have a way to (through a runtime flag maybe?) make sure that the height and width both consistently specify their units (even when they're `px`) so that build chains in which svgo is but one of the manys steps are guaranteed to have values with units, instead of values without. If the input to further tools can come from more than just svgo, and ""bare numbers"" mean different things to different tools, that's a problem in which svgo need not be involved.",Pomax,
671,2017-03-12 08:34:38,"Well, “better” is different for different people. SVGO main purpose is reducing file size, so it tries to write content in the shortest possible form (and not breaking the image).

There is a plugin system to customize behavior. If you don't like converting values you can disable plugin `cleanupNumericValues` or its parameter `convertToPx`.",GreLI,
671,2017-03-12 20:25:51,"but will that kick in for ""everything"" or just for the top level width/height? The reasoning here is that those are two very different thigns: one is content, which should absolutely be cleaned up as aggressively as possible (lots of elements with units that can be left as implicit pixel values = lots of space saving) whereas the top level widht/height are document metadata, and should ideally have a separately configurable behaviour.",Pomax,
671,2017-03-13 10:56:14,"Yep, for everything.

Well, recently I usually modified and transformed width/height/viewBox as well as part of CSS/SVG opitmization.

I don't think that your point about “metadata” is really common. You can make an option if you wish.",GreLI,
671,2017-03-13 15:30:38,"I would love to have an option for this.

Especially given that the world is a huge place with millions of svgo installs a month: ""uncommon"" on 3.7 million installations is probably still thousands and thousands of people/projects that would probably benefit =)",Pomax,
670,2017-02-26 15:58:32,"I ran into exported svg's that use a lot of unnecessary defs, and decided to take matters into my own hands...

This plugin:
- loops through the svg to first find all `<defs>` element definitions. It then finds all `<use>` items.
(In hindsight, this should have been done in a single loop.)
- Filters out the element definitions that are only used once (by default, but optional)
- Converts `<use>` to `<g>` and inserts a clone of the definition.
- Removes the definitions that have been inlined.

This plugin does not remove unused definitions or collapse the resulting groups, leaving that for `removeUselessDefs` and `collapseGroups`.

I believe this plugin would cover the request in https://github.com/svg/svgo/issues/563

[edit: now removes the definitions that have been inlined]",nikparo,
670,2017-02-26 16:16:47,"~~May have created the request a bit too early, noticed that there are some problems with at least masks and clip paths.~~

[Edit: My test was faulty.]",nikparo,
670,2017-03-11 13:03:06,There are several caveats in your code.,GreLI,
670,2017-03-12 00:35:27,"I don't think this PR handles CSS cascades correctly. According to the SVG spec, CSS cascade is applied to the referenced elements, not the (conceptually) cloned elements that make up the shadow DOM. What I think you would have to do is:

1. Run some sort of inlineStyles plugin (i.e. #592) on the SVG so that all of the elements that are descendants of a `<defs>` element are assigned their styled attributes.
2. Then run this plugin (i.e. find the `<use>` tags and replace them with the deeply cloned elements).
3. Make sure that any property-inheritance-related plugins are run *after* step (2).

Also I would take a look at the [SVG spec](https://www.w3.org/TR/SVG/struct.html#UseElement) on the `<use>` and `<defs>` tags since I also saw some things that were missing. For example, the plugin doesn't handle cases where `x`, `y`, `width`, and/or `height` attributes are specified on the `<use>` tag, etc.

Also this plugin doesn't handle the case where the `<use>` tag references another `<use>` tag, which apparently is possible.",alexjlockwood,
670,2017-03-12 09:51:43,"Well, SVGO doesn't handle CSS almost at all.",GreLI,
670,2017-03-24 16:27:56,"A Window.getComputedStyle() implementation would be useful here. It is quite similar to inlineStyles plugin and style related API, an extra lookup table or property would be required because it would be too slow otherwise.",strarsis,
669,2017-02-25 19:04:58,"First svg is the original, second and third are generated from svgo current master branch, and last one from 
[browser](https://github.com/svg/svgo/pull/633) branch

Last 3 are similar, and have this weird unwanted black arc shape.

The test/browser.html script is in [browser](https://github.com/svg/svgo/pull/633) pull request branch

![image](https://cloud.githubusercontent.com/assets/3134574/23333960/69284f50-fb95-11e6-854e-6cb4155d3edd.png)

### The first path triggers the issue:
![image](https://cloud.githubusercontent.com/assets/3134574/23334110/794642d6-fb98-11e6-9c70-4536230159f9.png)

left original svg: 
<S_CODE_TOKEN>
(on the right, processed by SVGO)

### Shrinking more I get: 
![image](https://cloud.githubusercontent.com/assets/3134574/23334299/040e5fea-fb9c-11e6-9902-0f9991bac1f7.png)
on the left: 
`<svg viewBox=""0 0 16 16"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg""><g><path d=""M4.635,4.039c0.515,0.447 0.911,1.019 1.189,1.638c0.087,0.192 0.162,0.389 0.226,0.59c0.024,0.079 0.047,0.157 0.068,0.237c0.01,0.041 0.02,0.083 0.029,0.125c0.004,0.011 0.004,0.011 0.008,0.023c0.008,0.173 0.009,0.346 0.007,0.52c-0.021,0.33 -0.053,0.66 -0.097,0.987c-0.044,0.331 -0.1,0.66 -0.17,0.987c-0.062,0.29 -0.135,0.577 -0.223,0.86c-0.013,0.042 -0.027,0.085 -0.041,0.127c0.064,0.163 0.115,0.33 0.15,0.502c0.043,0.209 0.063,0.423 0.055,0.636c-0.008,0.21 -0.042,0.419 -0.102,0.621Z"" style=""fill:#433231;""/></g></svg>`

SVGO output on the right:
`<svg viewBox=""0 0 16 16"" xmlns=""http://www.w3.org/2000/svg""><path d=""M4.63 4.04a4.72 4.72 0 0 1 1.52 2.59 2.52 2.52 0 0 1-.41 5.26z"" fill=""#433231""></path></svg>`",caub,
669,2017-03-11 11:37:28,Cannot reproduce on v0.7.2.,GreLI,
669,2017-03-11 11:38:39,"Ok, reproduced with `--precision 2`.",GreLI,
668,2017-02-25 17:38:05,"For example, it looks like the applyTransformsStroked param is never used, so it probably shouldn't be declared:

https://github.com/svg/svgo/blob/master/plugins/convertPathData.js#L11

(At least it is never used inside the file... not sure if it is possible for it to be used elsewhere as well.).

There are a couple other params that aren't used as well.",alexjlockwood,2017-02-26 09:51:05
668,2017-02-26 09:51:05,"Nope, it's being used [in _path.js](https://github.com/svg/svgo/blob/a55dc255c25f4d72a4d209e5b1c880e7a83141b2/plugins/_path.js#L191). This is not an issue.",GreLI,2017-02-26 09:51:05
667,2017-02-22 17:25:48,"Hi I can't see if there's a SVGO plugin which I can use to stop attributes which =""0"" from being removed. e.g. x=""0"". An error is thrown in dev tools when trying to animate that attribute. Is there one/parameter to stop this from happening?",petebarr,2017-03-11 11:39:47
667,2017-03-11 11:39:47,"Well, `x=""0""` is a default value and thus removed by `removeUnknownsAndDefaults` plugin.",GreLI,2017-03-11 11:39:47
667,2017-03-11 12:39:53,Thanks for the heads up! :-),petebarr,2017-03-11 11:39:47
666,2017-02-21 16:20:41,"For a project of mine I need just parts of a larger svg image, I did implement the functionality as a plugin for svgo.

I'm happy to share the bit of work I did by taking the https://github.com/w8r/martinez algorithm and applying it to svgo's plugin system.

Thanks for svgo!",lordnox,2017-03-25 19:10:18
666,2017-03-25 19:10:18,"Thanks for your interest in SVGO! However, this plugin is about very specific and limited image manipulation, so its quite out of scope of SVGO. Thus I cannot accept it.",GreLI,2017-03-25 19:10:18
665,2017-02-17 06:53:14,"I want to resize below svg with `gulp-svgmin`

<S_CODE_TOKEN>

`fulpfile.js` config

<S_CODE_TOKEN>

It didn't work unless i delete the title and desc in the svg file. Then I read the source code and i find there has a condition in the `transformsWithOnePath` plugin code.

<S_CODE_TOKEN>

 I realized that the problem is because of the default plugin list which defined in the `.svgo.yml`, so i change the file to make sure the `transformsWithOnePath` after the `removeDesc` and `removeTitle` , and it did work.

so i suggest  adjust the `.svgo.yml` file to make sure `transformsWithOnePath` plugin can work well.",sunshiner,2017-03-11 11:41:36
665,2017-03-11 11:41:36,"`transformsWithOnePath` is working only when there is only one path, what is described by its name. Actually, it's an obsolete plugin out of scope of SVGO, so I'm going to remove it.",GreLI,2017-03-11 11:41:36
664,2017-02-17 00:28:31,"The spec says that each term in viewBox is ""separated by whitespace and/or a comma"", but the regex here does not allow a comma.

This updated regex allows a comma. It is, however, still more strict that the spec, in that it requires a space (AFTER the comma, if it exists).",i80and,2017-03-25 19:07:02
664,2017-03-25 19:07:02,Done in faabeff4f4b12527e334c4b338ae7eef5a41aca2.,GreLI,2017-03-25 19:07:02
663,2017-02-15 20:20:52,"<S_CODE_TOKEN>
become
<S_CODE_TOKEN>",ganlanyuan,2017-03-11 11:42:38
663,2017-03-11 11:42:38,"No, there is no such a plugin now. You can [write your own](https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md) by yourself if you wish.",GreLI,2017-03-11 11:42:38
662,2017-02-14 17:25:02,"config:
<S_CODE_TOKEN>

input:
<S_CODE_TOKEN>

output:
<S_CODE_TOKEN>

expected:

<S_CODE_TOKEN>",kevinkace,2017-02-16 22:14:48
662,2017-02-16 22:14:48,"Turns out I wasn't using `plugins` correctly, should be:

<S_CODE_TOKEN>",kevinkace,2017-02-16 22:14:48
661,2017-02-13 23:35:39,"Hi, I have the following basic SVG:

<S_CODE_TOKEN>

If I run it through svgo with default options, it turns into this:

<S_CODE_TOKEN>

Note that the `<polygon>` is now a path, and the `fill=` attribute is gone. I would like to keep the `fill=` attribute.

I've tried adding `--disable removeUselessStrokeAndFill` but I still get the same result. Which plugin is responsible for the `fill=` attribute being removed?",ProdigySim,2017-03-11 11:44:46
661,2017-02-26 19:34:33,"Try:

    svgo --pretty --disable=convertColors -o - default-color.svg ",nikparo,2017-03-11 11:44:46
661,2017-03-11 11:44:46,"`fill=""#000000""` is the default color value (figures are being filled by black by default), so it's being removed as redundant. This is done by `removeUnknownsAndDefaults` plugin.",GreLI,2017-03-11 11:44:46
660,2017-02-13 20:06:19,"This PR adds the usedChars plugin which adds a list of used characters in the text of a SVG document as 
style comment which is helpful for adding/embedding tailored fonts with 
reduced character set (e.g. Google Fonts text parameter or by a local font optimization technique).

E.g. a SVG document that contains the texts `I love SVG!` and `Test.` 
would result in a list of used characters like so:
<S_CODE_TOKEN>`

Then e.g. a font can be added using the Google Fonts API and 
the API additional text parameter (`&` escaped to `&amp;`) for a reduced, tailored character set:
<S_CODE_TOKEN>`
Note that for usage in a parameter like this escaping may be necessary in some cases and 
be wary of hidden/less obvious unicode characters and that the space character is also important.

Fonts in SVGs are supported by browser when the SVG document is embedded as `<object>` on page, 
see https://github.com/marians/test-webfonts-in-svg/pull/1 .

It doesn't work when just inlining the whole SVG into the HTML page.

Alternatively, font-face is also interpreted when the font file has 
been embedded into the CSS (using base64 encoding). - This seems to be also a candidate for a plugin.

TODO:
- Also look for text in styles (notably content: """").
- Group used text by their font (family, weight, variant).",strarsis,
659,2017-02-10 14:43:26,"<S_CODE_TOKEN>

The class names are duplicated on the SVG.",Matt-Butler,
659,2017-02-11 14:36:18,"Yep, multipass literally runs SVGO several times with all its plugins. Probably, it worth consider for class duplication checking before applying. /cc @AprilArcus.",GreLI,
659,2017-02-11 18:12:54,"Thanks, I'll take this issue.",AprilArcus,
659,2017-02-13 16:04:48,Thanks @AprilArcus @GreLI ,Matt-Butler,
658,2017-02-05 18:06:46,,Zearin,2017-02-05 18:07:34
658,2017-02-05 18:21:07,:D,Zearin,2017-02-05 18:07:34
657,2017-01-29 22:47:26,"Layer IDs exported from Adobe Illustrator are corrected, allowing .class or #id attributes to be specified as layer names.

Signed-off-by: Daniel Bayley <daniel.bayley@me.com>",danielbayley,2017-01-31 21:04:12
657,2017-01-31 21:04:12,I've never saw `_x23_` or `_x2E_` in real SVGs. The code looks really hackish to merge it.,GreLI,2017-01-31 21:04:12
657,2017-01-31 23:58:23,"@GreLI The ""hackish""ness is what gets introduced by [surprise] Adobe! Both tests pass though.

If you specify a `.class` (i.e. a layer name beginning with a `.` or an `#id` [layer name beginning with a `#`]), then once that SVG is exported from Illustrator, for some reason these become `_x2E_` instead of `.`, and `_x23_` in place of `#`…

The idea here is that it's useful to be able to specify which attribute you are targeting (with CSS say) just by naming the layers accordingly.

I suppose you could take the view as with #648, and say that this possibly falls outside of the scope of SVGO if it is focussed _purely_ on optimisation, but it is useful to be able to add plugins that solve problems like this into the build step, so I guess this is another argument for #564… along with other ideas for useful plugins such as adding an `<?xml-stylesheet` instead of inline `<style>`s, and/or adding `xlink`s to SVGs.",danielbayley,2017-01-31 21:04:12
657,2017-02-20 17:51:33,"@danielbayley yeah i could see this being quite useful for developers working with SVGs exported from Adobe Illustrator.

It would be great if we could write plugins like #564 describes that could hook into the `svgo` functionality without needing to fork the entire repo. if someone made progress on #564 that might help our PR's find a home that makes more sense",baldwmic,2017-01-31 21:04:12
656,2017-01-29 10:40:09,"I just noticed that `svgo` is taking a font file and removing *all* information from the file.

To verify this I just installed the latest version from npm and ran `svgo` on the file `PTSans-Regular.svg` which I cannot attach to this issue (no svg support).

I end up with a file that contains just six bytes (`<svg/>`).

<S_CODE_TOKEN>

Any idea what I need to do to fix this issue?
",tmpfs,2017-01-30 01:15:43
656,2017-01-29 17:12:58,"Probably, it's being cleaned by `removeUselessDefs`. It removes all non-used referenced, which is an entire content of a font file. You just need to disable it.

However, in general I don't recommend using SVG fonts—they're deprecated, have no actual use and pretty limited.",GreLI,2017-01-30 01:15:43
656,2017-01-30 01:15:43,Thanks for the info :) Closing as not an issue.,tmpfs,2017-01-30 01:15:43
655,2017-01-27 21:51:57,"…isible shapes

Tell me if it makes sense

#638 ",caub,2017-03-11 11:48:54
655,2017-01-29 17:09:08,It looks like an idea for a separate plugin.,GreLI,2017-03-11 11:48:54
655,2017-01-30 19:16:25,Also better results may be achieved using `computedAttr` which considers inheritance.,GreLI,2017-03-11 11:48:54
655,2017-01-30 19:29:57,"I know, but I use fill and stroke that already use computedAttr, I did it in the same plugin for perf, avoiding to do the same thing (item.computedAttr('stroke'), !item.computedAttr('fill', 'none')) in another plugin

I check the attr in item, that's probably not necessary indeed",caub,2017-03-11 11:48:54
655,2017-02-19 15:32:04,"note: https://github.com/svg/svgo/blob/master/plugins/removeUselessStrokeAndFill.js#L18 is really bad, because this module is required, then this global variable can be changed when running SVGO on one svg, then will keep that value for a next svg.

I feel like this problem is not only on this plugin

How to initialize those variables everytime you run .optimize? is there an event/hook for that?",caub,2017-03-11 11:48:54
655,2017-02-25 20:44:27,"@GreLI by putting hasStyleOrScript in the config, it allows to make sure a new one is there when running a new instance of SVGO. Without this change, the flag is really global even with a new instance of SVGO

https://github.com/svg/svgo/pull/655/commits/bcd908691f41b9e300e499d25967d3bb3e2a453f#diff-2b80c20a2dbfb8e48fe3a26d26111ddaR13

it could be possible to make this plugin in full mode like cleanIDs, instead of per element, but I think that's fine like that",caub,2017-03-11 11:48:54
655,2017-03-12 00:24:22,"I think @caub is right that the usage of global variables may be problematic elsewhere as well. For example, in the ""removeUselessDefs"" plugin, a global 'defs' variable is reassigned various times throughout the plugin's execution. When the plugin exits, the variable will continue to hold a reference to its current value. In this case, I don't think there will be any behavior changes... however, it does seem like at the very least there will be a temporary memory leak (i.e. the referenced element won't be garbage collected until the next time SVGO is run).

Link: https://github.com/svg/svgo/blob/master/plugins/removeUselessDefs.js#L10",alexjlockwood,2017-03-11 11:48:54
655,2017-03-12 09:49:44,"In `removeUselessDefs` global variable is used for recursion because of external function. It always will have actual value, so nothing to worry there.",GreLI,2017-03-11 11:48:54
654,2017-01-27 17:53:55,,Zearin,2017-01-29 16:34:55
654,2017-01-29 16:35:00,"Nice, thanks!",GreLI,2017-01-29 16:34:55
653,2017-01-25 14:07:34,"The [node module example](https://github.com/svg/svgo/blob/master/examples/test.js) has the line `/*{ custom config object }*/`, but there is no reference to what the config object should look like. Could we get an example of that?",ohmfox,
653,2017-01-29 16:19:04,"Well, it's same as [in docs](https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#1-config), just in a form of JSON.",GreLI,
653,2017-02-26 19:47:17,"Here's part of one of mine. I use `full: true`, behaviour may be different with it off.

<S_CODE_TOKEN>",nikparo,
652,2017-01-24 15:01:27,"This is basically just the code from @dnewcome that he've tried to merge long time ago (#368).

This feature was asked a few times (#629, #65, #406, #362, ...), so I thought you could add it as a plugin. Especially because the icon-font-trend get's replaced by the just-SVG-trend:

- https://css-tricks.com/icon-fonts-vs-svg/
- https://www.sitepoint.com/icon-fonts-vs-svg-debate/
- https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4#.8mi0fg1rd
- https://cloudfour.com/thinks/seriously-dont-use-icon-fonts/
",gopeter,
652,2017-01-24 15:03:51,"Oh, maybe we should disable this plugin by default :-)",gopeter,
652,2017-01-29 16:17:34,Why not just to add it to `convertShapeToPath`? As disabled by default option.,GreLI,
652,2017-01-30 11:18:25,"Because you already told @dnewcome that you don't want to include `circleToPath` conversions into `convertShapeToPath` because it doesn't optimize SVG code but makes the files bigger. 

To quote you: *Paths are ok, they are just written with more bytes which is opposite to purpose of optimization.*

That's why I thought that this should go into an extra plugin.",gopeter,
652,2017-01-30 19:15:10,"Well, circles *may* be optimized, *if* resulting path will be merged with another path. So the option does make sense. It's just not guaranteed, that's why I preferred no to spend time writing it.",GreLI,
652,2017-01-31 07:22:59,"OK, so I'll add it to `convertShapeToPath` and you would be fine with it? :)",gopeter,
652,2017-01-31 21:00:07,Yep,GreLI,
651,2017-01-21 19:49:02,"It may be useful for an addtional plugin to inline fills (notably gradients), too. 
SVGs exported from Illustrator extensively use them and 
they could collide with gradients of same ID in other SVGs.",strarsis,
651,2017-02-02 11:54:14,"It would be much easier if the new css selection features from https://github.com/svg/svgo/pull/592 could be used, 
querying for (linear)Gradient element by ID for its corresponding element fill attribute/style.",strarsis,
650,2017-01-20 21:10:50,"cc @GreLI @steveoriol similar but different to #373
found in [v0.6.6](https://github.com/svg/svgo/releases/tag/v0.6.6)

I'm building a loading icon that animates endlessly by starting at 0 and continue when the last animation is complete. However the optimization seems to 

-  ignore the second value in the begin 
-  doesn't consider the id as being used
-  the id is dropped from the last animation

Example:
<S_CODE_TOKEN>

Output (minified with new lines for easier reading):
<S_CODE_TOKEN>

Expected:
<S_CODE_TOKEN>",swilliamset,
650,2017-01-29 16:15:56,"Yeah, animations aren't supported well. Also, it's not that easy to fix in the current codebasee, so it will not be fixed in near future.",GreLI,
649,2017-01-19 16:04:04,"This is mostly notable because SVGs created with [potrace](https://en.wikipedia.org/wiki/Potrace) have `version=""1.0""`.

Instead, svgo appears to round the attribute to `version=""1""`.

SVG’s `version` attribute has never been used by browsers, so it should be safe to omit any value it contains.",tigt,
649,2017-01-30 13:24:55,"I use svgo to preproces a SVG for a google AMP project. Stripping `version` to `1` causes `ampvalidator` to throw following error:

<S_CODE_TOKEN>

`1.0` should not be shortened to `1`.",pmb0,
648,2017-01-19 05:31:37,"Initial implementation of #494 

Please let me know if there are improvements to make. Perhaps there are more edge cases to handle and/or tests to write.",baldwmic,2017-03-25 18:41:24
648,2017-01-29 15:50:44,"There are many considerations, but the main question is: what does it have with optimization? I can't accept it, if it's out of scope of SVGO's purpose. You can freely use it by yourself, of course.",GreLI,2017-03-25 18:41:24
648,2017-01-30 01:31:11,"Thanks for taking a look @GreLI 

## Motivation
The purpose of submitting this PR is to clean up id attributes in SVG files by converting those id attributes to class attributes. If you include an SVG file with an id attribute more than once into an HTML file, that file has become invalidated because an id attribute needs to be unique. 

## Application
Design tools like [Sketch](https://www.sketchapp.com/) and [Adobe Illustrator](https://www.adobe.com/illustrator) automatically generate SVG files when exporting the designs. When a designer exports these SVG files, the design layers in the application append an id attribute of that layer name to the SVG. Therefore, the idea is to use `svgo` to clean up or optimize SVG files automatically generated by design tools for use in web applications. #494 is an example of this.

## Future Work
Let me know if this is something you are interested in pursuing. I understand if it does not align with the goals of `svgo` and we can close the PR.

## Gratitude
Thank you for your work on `svgo`! We are using this fork at my company, and it was easy to get started with `svgo` thanks to the good documentation. My only advice is that it would be nice to be able to write a command line plugin without needing to fork the repo as described in #564",baldwmic,2017-03-25 18:41:24
647,2017-01-18 17:15:05,"I've found a *huge* file that is bloated by a base64-encoded embedded `<image>`, *which isn't even visible*, because its `x` position is outside of the viewport.

https://github.com/alecive/FlatWoken/blob/fd7d026fcbf455d42dc87aa9e43d44bfc4013cf4/FlatWoken/scalable/apps/bad-piggies.svg",pornel,
647,2017-01-18 17:16:17,"Well, that's nice, but in SVG 2 images will not be cropped by default :(. But yeah, it's possible.",GreLI,
646,2017-01-18 13:53:01,"I'm adding SVGO to [ImageOptim](https://github.com/ImageOptim/ImageOptim). https://github.com/ImageOptim/ImageOptim/blob/master/svgo/index.js

* Do you have a recommended set of plugins to use? 
* Are there any mutually-exclusive plugins? (I could run multiple optimizations in parallel with different settings to find the best approach for each file).
* Which plugins are safest to run? I'm worried that some changes could change how the image looks, or break scripts if SVG's DOM is manipulated by JS.
",pornel,2017-01-18 16:33:53
646,2017-01-18 15:50:39,"* Generally, I recommend all enabled by default plugins. However, some plugins like `removeTitle` are currently disabled by default because of some considerations, which I think is not the preferrable choice of most users. I'm planning to enable them, but after some rearranging of things. Also, `mergePaths` has O(n·log(n)) complexity (against number of points in paths) which is slow for large pictures (like many megabytes).
* `removeViewBox` and `removeDimensions` are somewhat exclusive, one most likely will not want to run both at the same time. Both they are disabled by default. Also there are some image manipulation plugins which are not recommended to run unless you know what you're doing.
*  `cleanupAttrs`, `removeDoctype`, `removeXMLProcInst`, `removeComments`, `removeMetadata`, `removeTitle`, `removeDesc`,  ` removeEditorsNSData`, `removeEmptyAttrs`, `removeHiddenElems`, `removeEmptyText`, `removeEmptyContainers`, `convertStyleToAttrs`, `convertColors`, `removeNonInheritableGroupAttrs`, `cleanupNumericValues`, `cleanupListOfValues`, `moveElemsAttrsToGroup`, `collapseGroups` are quite safe, until styles or JS is relied on something removed or changed (which can be everything). Regarding some other plugins:
	* `removeUselessDefs` is good in removing non-used (hidden) parts, but it may destroy images like sprites or icon libraries where everything is hidden.
	* `minifyStyles` minifies CSS in SVG, depends on CSSO. Should be fine, but can't guarantee. (SVGO by itself can't parse CSS.)
	* `convertPathData` is the path processing plugin, applies transforms and optimizes path data. However, it's rounds the values and sometimes it may produce a notable change, especially with low precision. One should balance through size and quality.
	* `convertTransform` manipulates transforms and rounds values, which can also can be notable due to nature of transformations.
	* `removeUnknownsAndDefaults` is good in removing defaults, but JS or third-party may rely on it. Also, can be unsafe since SVGO don't understand CSS styles (SVGO processes only `style` attributes).
	* Same for `removeUselessStrokeAndFill`.
	* `removeUnusedNS` generally should be fine, but can remove `xlink` namespace if there is no `xlink:href` attribute while JS can rely on that.
	* `cleanupIDs` removes unused and minifies used IDs, which is unsafe in case of external CSS or JS. It checks for presence of `<script>` and `<style>` inside the SVG.
	* `moveGroupAttrsToElems` is a naive approach to pass transforms to children elements which is useful for later run of `convertPathData` and `collapseGroups`, but pretty useless without `convertPathData` applying transformations.
	* `convertShapeToPath` converts `polygon` and `polyline` to `path` but may break the image due to styles or JS.

Some plugins have additional settings, e.g. you can turn off minifying IDs in `cleanupIDs` or don't apply transformations in `convertPathData`.",GreLI,2017-01-18 16:33:53
646,2017-01-18 16:33:53,That's very helpful. Thank you.,pornel,2017-01-18 16:33:53
646,2017-01-18 16:35:37,You're welcome.,GreLI,2017-01-18 16:33:53
645,2017-01-16 15:13:55,"This test-case gives an error
<S_CODE_TOKEN>

error:
<S_CODE_TOKEN>

I guess there must be some global dirty side-effect, I'll try to see and fix maybe, but not urgent",caub,2017-02-25 20:41:08
645,2017-02-19 15:44:43,related to https://github.com/svg/svgo/pull/655#issuecomment-280926406 probably,caub,2017-02-25 20:41:08
645,2017-02-25 20:41:08,Fixed by https://github.com/svg/svgo/pull/655,caub,2017-02-25 20:41:08
644,2017-01-16 14:34:30,"if there are many inline styles, style version will become shorter than the second one with attributes:
<S_CODE_TOKEN>
Yet SVGO returns the version with attributes

Not easy to put that as a plugin, it could be done in JS2SVG I guess",caub,
643,2017-01-13 12:29:38,"how can i prevent the SVG id attribute from being removed ?? (i am usin imagemin with svgo plugin..) 

the following options do not work: 

<S_CODE_TOKEN>

<S_CODE_TOKEN>",koraysels,
643,2017-01-13 14:18:23,With CLI `--disable=cleanupIDs` should work. What about imagemin I'd suggest to ask its authors. Try to spell it as `cleanupIDs` for starting point.,GreLI,
643,2017-01-15 22:45:05,I tried spelling it ``cleanupIDs`` to no avail.. looks like the options do not pass on to the actual imagemin process...,koraysels,
642,2017-01-12 21:54:15,"I created a GUI app that uses SVGO internally after noticing SVGO-GUI isn’t maintained anymore.

[**Spritebot**](https://github.com/thomasjbradley/spritebot)

It does optimization as well as prettification of code. I was inspired by SVGO-GUI & SVGOMG.
The new features that it adds over those two apps are: batch processing, which SVGOMG doesn’t do & the ability to generate SVG sprite sheets for use with the SVG `<use>` tag.

I’d like to submit it for inclusion in the README—can I create a pull request?",thomasjbradley,
642,2017-01-16 03:32:17,Just used the tool--very nice! Well done!,jadchaar,
641,2017-01-12 11:42:15,"Add the missed possibility to pass a `JSON` string to `--config` argument

solves #636 ",elrumordelaluz,2017-01-12 16:49:53
641,2017-01-12 15:26:53,"Nicely done, @elrumordelaluz! This would also address #598 :)",waldyrious,2017-01-12 16:49:53
640,2017-01-09 11:05:37,"It's initial implementation of `removeUnusedStyles` plugin ([feature request](https://twitter.com/SaraSoueidan/status/817820467067293696)). Plugin collects usage data and removes styles from `<style>` having selectors that contain id, tag or class name never used in document. [CSSO usage data](https://github.com/css/csso#usage-data) filtering feature is using.

Plugin can be disabled through settings:

<S_CODE_TOKEN>

or disable a part of filtering

<S_CODE_TOKEN>

Issues for discussion:
- should this plugin to be merged with `minifyStyles` or separate plugin is better?
- default settings:
  - should be active by default?
  - should we enable or disable (like now) filter options
- should plugin detects dangerous situations when filtering might to be unsafe and warn about it (i.e. `<script>` elements or `on*` attributes in document)?
- naming",lahmatiy,2017-01-31 20:59:43
640,2017-01-10 12:14:11,"That's a very nice proposal!

Regarding your questions:
* Yes, both plugins are quite similar and using CSSO. This plugin will also minify styles, as I far as I see, even if the other one is disabled, so no sense in making them separate.
* I don't see a reason to not make it enabled by default, so yes, I think it should be enabled as well, as all current options.
* The only point is the presence of the scripts. Probably it worth to check if there are some `<script>` and disable in a such case. Also, add an option that can force removing anyway. Not sure about `on*` attributes. I think they could be skipped just to make things simpler.
* I don't see any problems with naming except `walk` functions.",GreLI,2017-01-31 20:59:43
640,2017-01-12 12:01:54,"@GreLI 
- Plugins are merged
- Enabled by default
- Doesn't remove unused styles when document has a <script> element or on* attribute. `usage.force` option to force removal
- Now it's ok. Feel free to make up a code style and related after merge ;)",lahmatiy,2017-01-31 20:59:43
640,2017-01-18 19:22:06,Any comments? Why not to merge?,lahmatiy,2017-01-31 20:59:43
639,2016-12-30 08:08:46,"I have had great use of your script. This is my last challenge. Some of the icons have a lot of code like this. Can I do something with your script to get rid of this?
![problem](https://cloud.githubusercontent.com/assets/10594806/21561653/bea6abc8-ce6f-11e6-99d1-f72429674445.jpg)

<text x=""729.64"" y=""231.36"">
  
 </text>
 <text x=""1310.91"" y=""151.36"">
  
 </text>
 <text x=""239.33"" y=""-29.9"">
  
 </text>
 <text x=""1337.38"" y=""-246.37"">
  
 </text>
 <text x=""1918.65"" y=""-326.38"">
  
 </text>
 <text x=""1529.53"" y=""-798.78"">
  
 </text>
 <text x=""2110.79"" y=""-878.78"">
  
 </text>
 <text x=""277.99"" y=""535.94"">
  
 </text>",erikdubois,2017-01-11 12:57:06
639,2017-01-09 11:11:29,@erikdubois [`removeEmptyText`](https://github.com/svg/svgo/blob/master/plugins/removeEmptyText.js) (_active_ by default) didn't work for you?,elrumordelaluz,2017-01-11 12:57:06
639,2017-01-11 12:57:06,close for now - Upon next cleaning cycle I will get back to you if this is still relevant,erikdubois,2017-01-11 12:57:06
638,2016-12-22 17:04:38,"I have this config:
<S_CODE_TOKEN>
shouldn't this clean an invisible path like: 
`<svg viewBox=""0 0 16 16"" xmlns=""http://www.w3.org/2000/svg"" fill-rule=""evenodd"" clip-rule=""evenodd"" stroke-linejoin=""round"" stroke-miterlimit=""1.41""><path fill=""none"" d=""M-107.52-76.8h407.25V32.84h-407.25z""/></svg>`

It doesn't",caub,2017-01-09 12:59:00
638,2017-01-09 11:25:19,"@caub the fact that there is a `<path>` with attribute `fill` and the value `none` doesn't means is useless, since `fill=none` is useful to show the `stroke` and so on.
I think because of this, the author (@deepsweet) checks if there is an attribute `fill` but with value different than `none` [here](https://github.com/svg/svgo/blob/master/plugins/removeUselessStrokeAndFill.js#L38)",elrumordelaluz,2017-01-09 12:59:00
638,2017-01-09 12:59:00,"ok, thanks much, I see",caub,2017-01-09 12:59:00
637,2016-12-19 11:20:57,"In addition to the current behavior, the following options were added:
1) Set a color that should be replaced to `currentColor`, for example `convertColors: { currentColor: '#030303' }`, so all fills and strokes with `#030303` color value will be replaced to `currentColor`.
2) Set a color(s) to be replaced using a regexp, for example `convertColors: { currentColor: /#FF.{4}/ }`, so all colors with the red value of `FF` will be replaced to `currentColor`.",AlimovSV,2016-12-20 06:36:48
637,2016-12-28 17:47:27,"Hi,
I have a file:
<S_CODE_TOKEN>
After `convertColors`, it also convert `fill=""white""` to `fill=""currentColor""`.
The output is
<S_CODE_TOKEN>
I use gulp with the option:
<S_CODE_TOKEN>
Could you help with this?",ganlanyuan,2016-12-20 06:36:48
637,2016-12-29 05:08:33,"Looks like you use svgo version without this commit (old behaviour was exactly what you described, just `#000000` treated as `true`). I tested your file locally, the result is as expected - `fill` color stay unmodified, `stroke` replaced with `currentColor`.",AlimovSV,2016-12-20 06:36:48
637,2016-12-29 12:14:24,"@AlimovSV thanks, waiting for SVGO new version to be released",ganlanyuan,2016-12-20 06:36:48
636,2016-12-19 10:35:51,"I can't seem to figure out how to pass a param to a plugin when using the command line.

Specifically I want to tell `convertColors` to set `currentColor` to `true`.

The only way I found to do this is to create a config-file. But I'm hoping that there's a simpler inline-way of doing it?",jkelstrup,2017-01-12 14:00:20
636,2017-01-12 11:29:42,"@jkelstrup looking at the `coa` code seems that there's a way to pass a _config_ String `JSON` formatted. Something like (tested and it works for me):
<S_CODE_TOKEN>`

I think could be added into CLI helps.",elrumordelaluz,2017-01-12 14:00:20
636,2017-01-12 14:00:20,"Thanks a lot @elrumordelaluz ! This might not be the prettiest of CLI-interactions, but it does exactly what I was looking for!

I'm gonna close this issue. If others could find it useful to see this improved, I think a new issue should be opened for that.",jkelstrup,2017-01-12 14:00:20
636,2017-01-12 14:23:01,"yes @jkelstrup, absolutely agree about
> might not be the prettiest

and

> new issue should be opened for that. 

",elrumordelaluz,2017-01-12 14:00:20
635,2016-12-15 20:41:20,"A SVG exported from an Illustrator document (Illustrator CC 2017) uses `<image/>` elements.
Each `<image/>` element is inside a `<g></g>` element with a `clip-path` property by css class.

When the collapseGroups plugins collapse the group, 
the `<image/>` element inside gets the `clip-path` of that group assigned.
This results in the `<image/>` elements not being visible anymore 
(its dimensions + position is still there according to Chrome Developer Tools, but it is not actually shown).",strarsis,
634,2016-12-15 02:10:39,"A SVG exported from an Illustrator document (Illustrator CC 2017) 
uses the `xml:space=""preserve""` attribute on a `tspan`-element.

svgo plugin 'removeUnknownsAndDefaults' removes this attribute.
This results in a visual change, the extra white space that is intentionally there isn't shown anymore.
Chrome, Firefox and Internet Explorer 11 show no whitespaces anymore.

In [plugins/_collections.js](https://github.com/svg/svgo/blob/master/plugins/_collections.js#L108) which is used by the plugin 
it seems that `xml:space=""preserve""` is assumed to be the default value.
<S_CODE_TOKEN>`
Apparently it isn't, because setting it explicitly for 
the `tspan`-element as in the original SVG restores the original visual effect.


Edit: The svgo core (not a plugin) seems to remove whitespace that comes before the text. 
The text content of the elements in svgo ast already got the whitespace before the text stripped.",strarsis,
633,2016-12-13 22:10:10,"- browser bundle
- promise api:

<S_CODE_TOKEN>",caub,2017-03-25 18:47:58
633,2017-03-21 18:56:26,"added below a commit to round viewBox to floatPrecision too, simplified removeViewBox plugin, I can make it a separate PR later when more time

Also we should use this to Math.round to round values:
<S_CODE_TOKEN>
it's faster than toFixed, and I can't think of a reason to keep trailing zeros? (2.30 instead of 2.3)",caub,2017-03-25 18:47:58
633,2017-03-25 18:47:58,"I'm afraid it's too much change to accept. I don't want to stick to webpack or any compiler to keep code base as simple, compact and effective as possible. Lazy plugins requiring, when plugins are loaded only when needed, also follows this goal.

Unfortunately, I don't know a graceful way to make it compatible with non-Node.js environment. Hopefully, there'll be a solution in future like new module system.",GreLI,2017-03-25 18:47:58
632,2016-12-07 11:33:32,"I make `svgo --enable convertStyleToAttrs -f . -o ./opt` , 
but to see the output folder files tagged with `style` and` class` at `paths`
what am I doing wrong? ))",nicothin,2017-01-09 12:04:04
632,2017-01-09 11:01:32,"@nicothin`convertStyleToAttrs` plugin converts the `style` attribute form each node, not the classes referenced from `<style>` ~  [Example](https://github.com/svg/svgo/blob/master/plugins/convertStyleToAttrs.js#L34-L51)",elrumordelaluz,2017-01-09 12:04:04
631,2016-12-07 09:49:24,"Hi, I need some help with the multipass and precision command in grunt:
There are any way to use multipass and precision options?

I tryed:

<S_CODE_TOKEN>
without sucess... any tips?

Reference: https://github.com/sindresorhus/grunt-svgmin/issues/55",kellerkichel,
631,2016-12-07 11:29:20,"Hum, I think this is really usefull. 
If i use ""https://jakearchibald.github.io/svgomg/"", the svg gets smaller, but if i use svgmin at grunt, gets bigger than ""https://jakearchibald.github.io/svgomg/"".

There's a way to set Multipass and Precision on it?",romuloinnocencio,
630,2016-12-03 01:01:34,"Every time Refreshing the project, the array `buildSteps.itemsToProcess` value in config.codekit3 changes silently — all the elements in this array is re-ordered.

![Diff of config.codekit3](https://cloud.githubusercontent.com/assets/3247876/20855302/e4a1b3ac-b936-11e6-8083-21ade645b3ff.png)
",realfish,2016-12-03 01:04:41
630,2016-12-03 01:04:41,Sorry for mistaking a repo.,realfish,2016-12-03 01:04:41
629,2016-12-01 11:23:05,,pfan123,
628,2016-11-30 19:16:54,"It would be nice if _cleanupListOfValues_ could work on `rgba()` values... removing unnecessary spaces and leading zeros. Not sure if rounding to the specified precision would be necessary, but it would be nice if `rgba(10, 20, 30, 0.4)` could turn into `rgba(10,20,30,.4)` .",peternowell,
627,2016-11-29 12:26:40,"Hi there.

I need a SVG without any classes. The reason for this is that I'd like to change for example colors (stroke) of some elements via JavaScript (snap.svg). However when a stroke is defined via a class for this element it has a higher priority than the elements attribute.

So the best way would be if I can somehow apply the class attributes to the corresponding element and delete the class completely.

Does something like this exists for svgo already? I've had a look at ""inlineStyles"" and tried with the inlineStyles branch but it's probably not doing exactly what I need.

Thanks for any help.",erazor83,
627,2016-11-30 17:30:00,"Unfortunately, svgo doesn't parse styles for now (except inlining `style` attribute).",GreLI,
627,2017-03-21 13:06:38,Related PR: https://github.com/svg/svgo/pull/592,strarsis,
626,2016-11-29 07:23:04,,ehmicky,2016-11-30 17:28:23
625,2016-11-23 09:20:36,"Adding the plugin with this spelling to the config file caused a case sensitive file system to trip.

Took a while to figure this out ;)",s0meone,2016-11-23 18:58:33
625,2016-11-23 18:58:44,Nice catch!,GreLI,2016-11-23 18:58:33
624,2016-11-20 18:16:32,"""**Flatten Transforms**"" option is available in SVG editors like _Affinity Designer_ (~$40 / Mac) and it is very useful. It also improve performances of SVG rendering because coordinate transforms are precalculated.

<img width=""144"" alt=""ppg1q"" src=""https://cloud.githubusercontent.com/assets/713559/20465075/6b55e404-af55-11e6-97e5-0d0766561538.png"">

Please add this option to SVGO.",Emasoft,
624,2016-11-20 18:18:31,"What does it do? If you mean applying transforms to paths then SVGO already does that when it possible.
",GreLI,
624,2016-11-20 18:30:07,"It flattens the transforms of all elements (including elliptical arcs, gradients, text and tspan) concatenating the cumulative transforms of all parents since the root node and applying the resulting matrix to the leaf elements (rects are converted to polygons to allow that). When not possible to completely eliminate the transform (for edge cases like some filters on groups), the  children element is left with a transform matrix that includes all transformations of the parents, so that the matrix multiplications required to get the the element local coordinates are minimized.
",Emasoft,
624,2016-11-20 18:31:13,"Well, SVGO does something of that.
",GreLI,
624,2016-11-20 18:34:10,"It does a very little of this, actually. Transforms in the output file are still too many compared to Affinity Designer exported svg file.
",Emasoft,
624,2016-11-20 19:12:06,"It'd be more helpful if you provide such examples. Also, there was a bunch of bugs with incorrectly moved transforms, so one need to be careful with them.
",GreLI,
624,2016-12-06 19:14:35,"Here's some examples of what I think @Emasoft is talking about:

Input:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

Should be:

<S_CODE_TOKEN>

Input:

<S_CODE_TOKEN>

Output:
<S_CODE_TOKEN>

Should be:

<S_CODE_TOKEN>
",steadicat,
624,2017-03-10 22:45:22,"Any update on this? 
This is a much needed feature because it allows to copy paste any xml node from an svg file to inline html without having to copy all parents nodes.",Emasoft,
624,2017-03-11 16:48:38,"I'm planning such an operation, but no updates yet.",GreLI,
623,2016-11-15 10:07:42,"Is there any way to pass in the filename of the current svg into a plugin ?

The reason why i need this is because a lot of our svgs are exported from illustrator and have style tags with class names like `.st0 {} .st1 {}`. This causes a issues when we use a lot of svgs in a single page, as the styles get overriden.

An easy way to solve this would be to replace a class like `.st0` to `.svgName0`..which is why i need the file name. I'd also appreciate other ideas on solving this.",harrisjose,
623,2017-02-21 10:02:10,"+1. I recently added an auto prefixing feature for `defs` to https://github.com/BohemianCoding/svgo-compressor, based on the SVG filename, and was considering sending a pull request to make it ""native"" to SVGO.",bomberstudios,
623,2017-02-22 06:07:23,"Even though I mostly don't have this issue these days ( we just started using attributes or inline styles when exporting svgs ), I'd still love to see this being natively supported in svgo.",harrisjose,
622,2016-11-10 23:37:31,"Warning: Error: ENOENT: no such file or directory, open 'F:\Source\node_modules\svgo\.svgo.yml'

getting the error when installed with yarn package manager.",bonesoul,2016-11-20 17:12:44
622,2016-11-12 19:17:39,"`svgo/lib/svgo/config.js` [reeds](https://github.com/svg/svgo/blob/master/lib/svgo/config.js#L31) `${__dirname}/../../.svgo.yml`, so the target file should be `svgo/.svgo.yml`. It seems like something went wrong.
",GreLI,2016-11-20 17:12:44
622,2016-11-16 20:39:40,"I noticed this problem with Yarn after someone had run `yarn clean`. Deleting the `.yarnclean` file, deleting `node_modules`, then re-running `yarn` fixed it.
",chrisvfritz,2016-11-20 17:12:44
622,2016-11-17 19:28:44,"Confirming @chrisvfritz fix.  Thanks.
",pcwa-ahendricks,2016-11-20 17:12:44
622,2016-12-05 23:18:24,@chrisvfritz confirming as well.  thank you kindly.,aap82,2016-11-20 17:12:44
622,2016-12-29 21:33:43,@chrisvfritz Confirmed! I faced this issue unexpectedly when trying to use css-loader with webpack....,teonik,2016-11-20 17:12:44
622,2017-01-19 09:05:01,@chrisvfritz Thanks !,valotvince,2016-11-20 17:12:44
622,2017-02-05 23:32:56,For whatever reason this fix doesn’t work for me.,brandondurham,2016-11-20 17:12:44
622,2017-02-08 17:20:57,Is there a way that we can make this library more compatible with Yarn so that this fix is not needed? ,damassi,2016-11-20 17:12:44
622,2017-02-24 14:23:55,There's an open issue regarding `*.yml` files in `.yarnclean` at yarnpkg/yarn#2276,zrrtcs,2016-11-20 17:12:44
622,2017-03-04 19:44:07,"@chrisvfritz Worked for me, too. Thanks!",khzaw,2016-11-20 17:12:44
622,2017-03-05 12:21:58,Thanks for the fix @chrisvfritz ! Just saved me a lot of trouble.,matthieusb,2016-11-20 17:12:44
622,2017-03-23 17:06:32,Thanks @chrisvfritz and @zrrtcs. Removing `*.yml` and ` .*.yml` (and any other entries that should not be deleted) from my `.yarnclean` file fixed my issues.,pearman,2016-11-20 17:12:44
622,2017-03-26 05:09:27,@chrisvfritz  Thanks！,bytedaring,2016-11-20 17:12:44
621,2016-11-03 23:02:54,"### The Problem:
If you use the CLI to provide an output path for the optimized file, but the folder where that output file is to be created does not exist, SVGO will exit normally (code 0) but no output is created.


### Expected Result:
1. SVGO should create the folder where the output file is to be written if that folder does not exist.
2. If creation of that folder fails, SVGO should exit with a `non-zero` code; it should NOT indicate success.


### Actual Result:
SVGO fails to create an output file, then exits normally so the user can't tell anything went wrong.


",bdkjones,
621,2016-11-03 23:03:22,"This one is related to #618. 
",bdkjones,
620,2016-11-02 19:24:35,"I had to look in GitHub issues to see how others were able to pass plugins for programmatic usage. Maybe you could add another example to examples folder showing plugins usage.

<S_CODE_TOKEN>",niftylettuce,
620,2016-11-20 17:12:03,"Have you more concrete suggestions?
",GreLI,
620,2016-11-22 14:32:17,"I've got a similar question ...
**How do you enable plug-ins via command line?**
Everything I tried didn't work
I'm particularly interested in 
- **removeAttrs**
- removeTitle
- cleanupIDs
- collapseGroups
- removeStyleElement
- mergePaths

What I'm trying to do is cleaing up Illustrator asset SVGs as good as possible.
However, I couldn't find any examples online.
Maybe you could add some more examples for the plug-ins to the documentation?",emkayy,
619,2016-11-02 18:31:05,"I looked at the example here <https://github.com/svg/svgo/blob/master/examples/test.js#L15> and I didn't see an error argument available in the callback, nor did I find any documentation on this.  Can you please elaborate and update the docs?",niftylettuce,
619,2016-11-03 07:55:49,"I was experimenting with `svgo` in case I wanted to use it for this package I just released https://github.com/crocodilejs/custom-fonts-in-emails.
",niftylettuce,
618,2016-10-23 20:53:07,"When svgo encounters a SVG parse error, it does not exit with an error code. 

<S_CODE_TOKEN>
",engina,
618,2016-10-23 23:27:55,"+1. 

I just wasted a lot of time trying to figure out what was going on before I realized SVGO incorrectly returns `0` when the option parsing fails. Any chance this can be addressed soon?
",bdkjones,
617,2016-10-19 21:58:49,"This makes SVG smaller when urlencoded - https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
",techtonik,
616,2016-10-17 15:54:07,"Hey! I've created Telegram Bot for SVGO. I think that Telegram is a great platform for infinite number of useful tools. This one is among them.
",maksugr,2016-11-13 09:43:49
615,2016-10-17 09:35:12,"Did you see this bug on FF?
http://stackoverflow.com/questions/24806913/how-can-i-refer-to-an-internal-gradient-definition-inside-an-svg-sprite-symbol
Have you some options or issue for this?
",Muskos,
615,2016-10-17 18:38:27,"No, I didn't encountered it.

Is it actual? Firefox is gradually updating including graphical stuff like this.
",GreLI,
615,2016-10-18 08:06:42,"It's actual.
You can try:
http://codepen.io/Muskos/pen/dpjvvj bad
http://codepen.io/Muskos/pen/WGaGmN good
Or mb you have another solution?
",Muskos,
614,2016-10-14 18:23:53,"This fixes #504. There are definitely pros and cons to doing this, and am interested to hear your thoughts on what is best for the svgo project. My opinion, of course, is that this the pros outweigh the cons, but I can see the other side too.

**Pros:**
1. This makes svgo compatible with JSPM. Up until now, anybody who uses jspm and depends on svgo (directly or indirectly) has to create a configuration file in the jspm registry for _each version of svgo_. @MeoMix did this for svgo@0.6.1, and now I [have a pull request to do so for 0.7.1](https://github.com/jspm/registry/pull/987). Merging this svgo pull request will make it so that there will be no need anymore to create a configuration file in the jspm registry for each version of svgo.
2. This will make upgrading svgo to es6 modules (instead of commonjs) easier. I don't know if there are plans to do that or not, but once you switch to `import`, `System.import()`, or `import()`, you can no longer synchronously load dynamic plugin code like you can with `require`. Instead, you can either import all of the plugins upfront (similar to what I've done in this pull request) or you can change the [preparePluginsArray](https://github.com/svg/svgo/compare/master...joeldenning:issue-504?expand=1#diff-8f58d3f133adabc0050efa4a28cc5457R104) function to be an asynchronous function that returns a System.import() promise.

**Cons:**
1. The `pluginMap` is sort of an annoying manifesty thing that introduces one more step to the process of writing a new svgo plugin.
",joeldenning,2016-11-13 09:43:15
614,2016-10-14 18:35:27,"Looks like the [build is failing](https://travis-ci.org/svg/svgo/jobs/167721725#L647) only in node 6. The tests passed but after the tests coverall failed and I'm not sure exactly why. Any ideas on why I'm getting `Bad response: 422 {""message"":""Couldn't find a repository matching this job."",""error"":true}` from the node 6 build?
",joeldenning,2016-11-13 09:43:15
614,2016-10-15 16:52:10,"That happens sometime. Dont't worry, it should be ok.
",GreLI,2016-11-13 09:43:15
614,2016-11-13 09:43:15,"I don't like the implementation since it loads all plugins including non-used one. It'll certainly slow down svgo execution for all users which I cannot accept.

Also I cannot verify that it solves the issue. Is there a less kludgy solution?
",GreLI,2016-11-13 09:43:15
613,2016-10-13 22:48:02,"expected behavior: `{` and `}` are encoded as `%7B` and `%7D`
actual behavior: `{` and `}` are not encoded at all and are included raw.
#### Example:

This file is already encoded and has style rules that includes `{` (`%7B`):

<S_CODE_TOKEN>

running cssnano with svgo enabled, the `{` character gets decoded from `%7B`

<S_CODE_TOKEN>

but disabling svgo, the  `{` character stays encoded, as it should

<S_CODE_TOKEN>
",pabo,
613,2016-11-26 01:49:37,Could this module be useful for safe url-escaping?: [inline-urlescape](https://github.com/strarsis/inline-urlescape),strarsis,
612,2016-10-12 02:36:41,"This adds a plugin that transforms a given SVG to make it accessible. It allows passing `title` and/or `desc` and references them via `aria-labelledby` in the SVG element.

<S_CODE_TOKEN>

with the plugin and a setting of

<S_CODE_TOKEN>

becomes:

<S_CODE_TOKEN>

More info, see:
- https://www.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/
- https://www.sitepoint.com/tips-accessible-svg/
- https://css-tricks.com/accessible-svgs/
",joscha,2016-11-12 18:38:39
612,2016-11-04 00:52:10,"@GreLI is there anything I can do to get this merged?
",joscha,2016-11-12 18:38:39
612,2016-11-11 04:05:33,"Hmm, I'd really like to get this in - is there anyone here that is willing to start a conversation about it?
",joscha,2016-11-12 18:38:39
612,2016-11-12 18:38:39,"Sorry, I'm rather busy lately. However, I have to say that your PR doesn't have anything related to the purpose of optimization SVGs. People mostly removing titles, etc. There is already too many plugins polluting the scope.

Fell free to use it on your own I just can't accept it since it's off the way.
",GreLI,2016-11-12 18:38:39
612,2016-11-12 22:00:49,"It does a very special optimization which is not related to size, correct,
but makes the SVG itself accessible when used within a web context (e.g. as
an inline icon for example), but I understand what you mean - too bad -
anyway this plugin and a few more related to using SVGs in an inline
context can be found here then:
https://bitbucket.org/atlassian/atlaskit/src/3eaaa649f0b644a36f451ceed82409dab9639abe/packages/ak-icon/bin/svgo/plugins/?at=master

Cheers,
Joscha

On 13 Nov. 2016 05:38, ""Lev Solntsev"" notifications@github.com wrote:

> Sorry, I'm rather busy lately. However, I have to say that your PR doesn't
> have anything related to the purpose of optimization SVGs. People mostly
> removing titles, etc. There is already too many plugins polluting the scope.
> 
> Fell free to use it on your own I just can't accept it since it's off the
> way.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/svg/svgo/pull/612#issuecomment-260140082, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AALehpokjJ4w5X-50zwb12ITYbF6gg5Dks5q9geygaJpZM4KUTfQ
> .
",joscha,2016-11-12 18:38:39
611,2016-10-10 09:05:03,"I tried to test my plugin with the old docs and it was not working so after I had a look into some other plugins I decided to update the docs here a little bit.
",JonathanStoye,2016-10-11 15:22:10
611,2016-10-11 15:22:25,"Nice gotcha! Thanks!
",GreLI,2016-10-11 15:22:10
610,2016-10-08 19:57:57,"When processing svg files that make use of [svg-stacks](http://xn--dahlstrm-t4a.net/svg/structure/svgstack-usage.html) or [view elements](https://betravis.github.io/icon-methods/svg-sprite-sheets#with-a-custom-view) cleanupIDs plugin would either leave the file untouched (when `<style>` is present) or delete all ids from `<view>` elements.

I have added **force** (false by default) parameter to **cleanupIDs** config that allows to ignore the presence of `<style>` and `<script>` and clean up anyway. In case of **force = true** the onus would be on the user not to reference elements by id in those tags. Or to include ids not to be cleaned in **except** parameter.

**except**, which can be a single id or an Array of ids, allows to keep user-specified ids from being removed or minified. This would make possible referencing them externally as part of `<view id=""#id"">` or an **svg-stack**. For example,

`<img src=""image.svg#figure"">`

**except**ing ids in `<symbol>` would also allow to use **cleanupIDs** with such svg files (still need to disable **removeUselessDefs** though).
",Velenir,2017-01-31 20:58:26
609,2016-09-30 18:57:16,"I was wondering if you were open to me rewriting the argument parsing logic using a library other than coa? It's unlicensed, which makes using it in our (Google's) tooling impossible. I have opened an issue on their repo (veged/coa#64), but it doesn't seem likely to be resolved quickly based on their level of activity.

Ideally I'd like to depend on a library that already exists in your transitive dependencies, like argparse.

What do you think?
",shyndman,
609,2016-10-01 08:49:20,"Well, [package.json](https://github.com/veged/coa/blob/master/package.json) there says it has MIT license.
",GreLI,
608,2016-09-30 10:05:11,"So that is a plugin that removes style tags and adds their content to the elements via their classes according to the parameters as inline style or as attributes.

In addition I updated the testing part in the docs.
",JonathanStoye,2016-11-13 09:39:22
608,2016-10-01 08:50:28,"Seems like it duplicates #592 
",GreLI,2016-11-13 09:39:22
608,2016-10-04 12:40:58,"@GreLI: didn't looked into the pull requests first. We needed it, so I wrote it and thought I should wrap things up and make a PR here. 

So if you don't need the plugin, should I create a separate PR for the docs update only?
",JonathanStoye,2016-11-13 09:39:22
608,2016-10-06 16:22:54,"@strarsis are you still working on #592?
",katspaugh,2016-11-13 09:39:22
608,2016-10-06 18:55:28,"@katspaugh:
The plugin should also inline only when the selector matches once, otherwise not.
This part is not completely implemented yet in the [localStyles](https://github.com/svg/svgo/pull/592) plugin.

[juice](https://github.com/Automattic/juice/) is used internally because it already solved the inlining complexities and is well tested for this.
Adding the feature to inline only when selector matches once to juice is discussed here (https://github.com/Automattic/juice/issues/232).
A PR has been proposed now, hopefully this feature will be implemented or merged in soon.

Edit: There are also version issues with juice module.
Until these are fixed, a ""light"" implementation is used now in [localStyles](https://github.com/svg/svgo/pull/592) plugin.
",strarsis,2016-11-13 09:39:22
608,2016-11-13 09:39:22,"Certainly this is not fully-fledged plugin, so it can be accepted.
",GreLI,2016-11-13 09:39:22
607,2016-09-28 13:43:52,"It would be great if unchanged files would stay untouched. it is really a pain to work with git up to now because every svg in the directory gets touched regardless if there where any changes to it or not. I am never certain if only the right ones got changed.

Really loving svgo though.
",JonathanStoye,2016-11-16 13:25:59
607,2016-11-16 13:27:55,"I seems like under some circumstances the attributes just get reordered which is a change even thought it is not really changing the svg.
",JonathanStoye,2016-11-16 13:25:59
606,2016-09-27 13:19:02,"I have a plugin that uses `.createContentItem` - I expected `this` to be the `SVGO` object instance, but it is not. As a workaround I create an additional SVGO instance in the plugin itself, but I think ideally the `fn` function would be bound to the SVGO instance it runs on. Any reason this is currently not done?
",joscha,2016-09-27 14:19:50
606,2016-09-27 14:00:18,"Well, SVGO is for optimizing, thus creating items contradicts its purpose. `.createContentItem` method was exposed for external usage.

You can workaround by using `constructor` property:

<S_CODE_TOKEN>

Also there is `clone` method (used by SVGOMG).
",GreLI,2016-09-27 14:19:50
606,2016-09-27 14:19:50,"ah, great, that works, thanks! I have an optimization step that makes an SVG accessible (it creates an `aria-labelledby` attribute and adds a `<title>` and `<description>` element. Not necessarily a performance optimization, but still an optimization in a sense.
",joscha,2016-09-27 14:19:50
605,2016-09-27 10:11:25,"I am using the grunt-svgmin 4.0.0 plugin to compress my svg sprites, and for some reason, when I compress only certain files, it deletes everything but a single `<svg />`.

I have no Idea what is happening and how I can fix it. I have tried using different options or using no options whatsoever, and it all workes for some files, but for certain it doesn't. Could it have something to do with my svg files?
",nachtfunke,2016-09-28 08:02:59
605,2016-09-27 12:21:49,"Perhaps, you have some misconfiguration. E.g. someone thoughtlessly enables all plugins, most of which are destructive and used for their very own purpose.

Maybe you have not SVG pictures, but some sort of sprite/image library where all elements are hidden and used elsewhere. Such elements are removed by default by plugins like `removeUselessDefs`. In such a case it must be disabled (see `--disable` option or configuration settings).
",GreLI,2016-09-28 08:02:59
605,2016-09-28 08:02:59,"Thanks! In the Grunt Task I defined `removeUselessDefs: true`, and with svg-store I applied a class `hidden`to the svg-element, it seems as if in some cases that led to that problem.
",nachtfunke,2016-09-28 08:02:59
604,2016-09-27 00:58:32,"If I have my own plugin, like:

<S_CODE_TOKEN>

how can I pass a parameter (the callback) at runtime in a clean way?
Currently I am doing this:

<S_CODE_TOKEN>

but that doesn't seem to be too sane - ideally I would pull in the plugin but not alter the class instance itself, but only the plugin that I actually pass to the SVGO object. I can't find how to do this in the docs - any hints?
",joscha,2016-09-27 13:04:25
604,2016-09-27 09:22:22,"I guess this should work:

<S_CODE_TOKEN>
",GreLI,2016-09-27 13:04:25
604,2016-09-27 09:49:30,"@GreLI this works only for built-in plugins - how do I load/add my custom one with a predefined name like `callbackOnDefinedFill`?
",joscha,2016-09-27 13:04:25
604,2016-09-27 09:58:21,"There is no difference of defining custom and predefined plugin. I've skipped part before `const` in my example—it's same as yours.
",GreLI,2016-09-27 13:04:25
604,2016-09-27 10:15:06,"mine is es6 short notation, which makes it a:

<S_CODE_TOKEN>

meaning that the key is a string `'callbackOnDefinedFill'` and the value is the plugin object.

Yours is only a string key with a JSON object. The plugin is not part of the equation any more and hence can not be picked up unless I tell SVGO somehow that behind the name `'callbackOnDefinedFill'` there is the plugin `callbackOnDefinedFill` - and I am not sure how.
",joscha,2016-09-27 13:04:25
604,2016-09-27 12:08:17,"That object contains params that are passed to the plugin. I don't understand your question.
",GreLI,2016-09-27 13:04:25
604,2016-09-27 12:14:46,"Your sample has a defined key in the JSON object. How does svgo know where to get the according plugin code?
",joscha,2016-09-27 13:04:25
604,2016-09-27 12:23:00,"It's being passed through `fn` option.
",GreLI,2016-09-27 13:04:25
604,2016-09-27 12:44:09,"@GreLI Yes, sure, but your code:

<S_CODE_TOKEN>

does not pass the plugin in anywhere - apart from the `plugins` array not even taking a named key like that. If I assume you meant:

<S_CODE_TOKEN>

which would be allowed by SVGO, it still would just be a plain JSON object with a key named `callbackOnDefinedFill`, but the plugin has not been loaded.
",joscha,2016-09-27 13:04:25
604,2016-09-27 12:54:13,"I suppose

<S_CODE_TOKEN>

would work without altering the required plugin, I think I was just hoping for something like:

<S_CODE_TOKEN>

or similar.
",joscha,2016-09-27 13:04:25
604,2016-09-27 13:02:15,"> Yes, sure, but your code:… does not pass the plugin in anywhere

Yep, forgot it.

I'm afraid there is no another way.
",GreLI,2016-09-27 13:04:25
604,2016-09-27 13:04:22,"OK, I will just use `Object.assign` for now then, thank you @GreLI!
",joscha,2016-09-27 13:04:25
603,2016-09-23 03:57:34,"Translate to Korean
",primeiros,2016-09-27 08:30:08
603,2016-09-23 03:59:45,"[![Coverage Status](https://coveralls.io/builds/8016903/badge)](https://coveralls.io/builds/8016903)

Coverage remained the same at 89.005% when pulling **e136a72b448f100fd0920d58bd6cacfdf67cfce1 on primeiros:patch-1** into **04fa1d5e8364d404b4772552805e3f2610c87b71 on svg:master**.
",coveralls,2016-09-27 08:30:08
602,2016-09-20 22:13:14,"Requiring a different Node engine should be considering a breaking change. An environment where this package worked without issue and now has an issue should be considered a major version upgrade.

Please republish the latest release as a major, not minor release. 
",leifdalan,2016-09-27 08:26:03
602,2016-09-21 05:09:15,"This broke our builds. `css-loader` uses `cssnano` uses `postcss-svgo` uses `svgo`. And we did not even changed the version of `css-loader` as we are using strict version numbers[*](https://github.com/koding/koding/blob/master/client/package.json#L122)

Not sure what is the best solution.
",usirin,2016-09-27 08:26:03
602,2016-09-21 06:20:56,"Versions below 0 don't follow semver. Why not just use modern environment? Node 0.10 is waaay outdated and buggy.
",GreLI,2016-09-27 08:26:03
602,2016-09-21 07:57:01,"Btw, Node 0.10 will be officially completely unsupported in 10 days.
",GreLI,2016-09-27 08:26:03
602,2016-09-21 16:06:23,"@GreLI Some of us are not afforded the opportunity to use .12+. A build server I am required to use is locked in at .10 for instance. A change from .10 for a lot of people is just not feasible whereas bumping this package by a major release so that we can be stuck in our archaic ways would not require much effort.
",pmwisdom,2016-09-27 08:26:03
602,2016-09-21 18:18:54,"What is blocking svgo's usage of semver at this point? Bumping to v1.0.0 would be a very welcome change as modules like https://github.com/ben-eb/gulp-svgmin, https://github.com/ben-eb/metalsmith-svgo & https://github.com/ben-eb/postcss-svgo (and a ton of others) could benefit from new features without requiring manual version bumps.

It's been 4 years since the initial release, after all. 😄 
",ben-eb,2016-09-27 08:26:03
602,2016-09-22 15:02:48,"@GreLI so let's use semver? every breaking change is a major bump (positive integers are still free), every new feature is a minor and every fix is a patch. well, 4 years ago this was not so popular :) v1.0.0 FTW.
",deepsweet,2016-09-27 08:26:03
602,2016-09-22 15:51:53,"Yep broke our builds too
",palmerj3,2016-09-27 08:26:03
602,2016-09-22 18:02:54,"@deepsweet, was thinking about it too. I think yeah, it's mature enough. Most bugs fixed, but what disturbs me is that SVGO still doesn't understand CSS.
",GreLI,2016-09-27 08:26:03
602,2016-09-22 18:17:22,"@GreLI supporting CSS in its basic form could be v1.1 or whatever minor version bump if it doesn't break backward compatibility or something. so imo it's time for 1.0 for sure.
",deepsweet,2016-09-27 08:26:03
602,2016-09-22 18:19:47,"@deepsweet right.
",GreLI,2016-09-27 08:26:03
602,2016-09-26 16:06:59,"Ditto. We don't have the ability to upgrade our Node version yet. Builds for ANYONE using Node 0.10.x and css-loader are broken now.
",orbiteleven,2016-09-27 08:26:03
602,2016-09-26 17:33:09,"Guys, how hard can it be to make another release and fix 0.10.x users' problems as well?
",usirin,2016-09-27 08:26:03
602,2016-09-26 17:50:08,"btw why all your builds are broken if there was a minor version bump while a major number is still zero?

> Major version zero (0.y.z) is for initial development. Anything may change at any time.
> http://semver.org/

this is why we have that special behaviour of `^`-range:

> Caret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice.
> https://docs.npmjs.com/misc/semver#caret-ranges-123-025-004

so you had to use something like `""svgo"": ""^0.6.6""` to follow semver from your side. so... have you been using `*` or `0.x`?

it's a different kind of question why there is still no `svgo@1.0.0`.
",deepsweet,2016-09-27 08:26:03
602,2016-09-26 17:55:34,"in other words: dropping Node.js 0.10 was a breaking change for sure, no doubt about it. but it's totally allowed to make that only with minor version number while major one is zero.
",deepsweet,2016-09-27 08:26:03
602,2016-09-26 18:06:27,"It looks like at least for my build, it is due to `postcss-svgo`'s recent version bump:

https://github.com/ben-eb/postcss-svgo/commit/12c10e7ae173fb5c0a3c730d61d5592d2fc154cb

Perhaps I should follow up with them.
",leifdalan,2016-09-27 08:26:03
602,2016-09-26 18:19:10,"greenkeeper has been working hard :) builds are so green now.

@GreLI could you please revert a part of commits prior to Node.js version dropping, then publish `0.7.1` (this will fix builds), then apply ""breaking changes"" again and publish it as `1.0.0`? it seems like we still have to do something regardless the semver discussion.
",deepsweet,2016-09-27 08:26:03
602,2016-09-26 18:25:52,"but greenkeeper could bump it again for you guys. or for your dependencies. and if your dependency maintainer will not bump a major version of that dependency too then things will become bad again.
",deepsweet,2016-09-27 08:26:03
602,2016-09-26 18:26:15,"> btw why all your builds are broken if there was a minor version bump while a major number is still zero?

Problem of `npm` maybe, I haven't upgraded our `css-loader` dependency at all, and it was a fixed version (e.g doesn't include any wildchar `^`, `~`, `*`, or you name it), but still got this problem and i fixed it with forking `css-loader` to use a working version of `postcss-svgo`.

Basically what i did was removing `cssnano` dependency of `css-loader`.

Here is the result: https://github.com/usirin/css-loader/commit/f1e39932ff71cc316a328bbf786e3b22a5ce937c
",usirin,2016-09-27 08:26:03
602,2016-09-26 19:13:52,"@deepsweet, yep, will do.
",GreLI,2016-09-27 08:26:03
602,2016-09-27 08:48:15,"Well, v0.7.1 with the fix has been just released.
",GreLI,2016-09-27 08:26:03
601,2016-09-20 13:42:20,"for...of was first defined in ECMAScript 2015. This pull request replaces calls to for...of with calls to Map.prototype.forEach().
",cravesoft,2016-09-21 09:43:12
601,2016-09-20 13:44:13,"[![Coverage Status](https://coveralls.io/builds/7967240/badge)](https://coveralls.io/builds/7967240)

Coverage remained the same at 89.005% when pulling **87f073feb793a93872242ee5554aaf9fa2f6df97 on cravesoft:master** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,2016-09-21 09:43:12
601,2016-09-20 17:45:39,"The main reason of bumping dependencies to 0.12 is Map/Set, which are also not supported in 0.10. And I don't want to add polyfills useless for almost all.

`for-of` is just syntactic sugar for better readability.
",GreLI,2016-09-21 09:43:12
601,2016-09-21 09:43:12,"OK, thanks for your answer. We now ask our users to install the latest nodejs from the nodesource binary repository.
",cravesoft,2016-09-21 09:43:12
601,2016-09-27 08:27:48,"It's been reverted (but I managed keep the fix for the original issue) in 8abdef7742e67d45ed39f677f8e808062563eb25.
",GreLI,2016-09-21 09:43:12
601,2016-09-28 13:58:43,"Thank you very much for keeping me informed. It does indeed work with node v0.10.29 now.
",cravesoft,2016-09-21 09:43:12
600,2016-09-19 11:13:38,"If a path contains elliptical arc curves (""A"" or ""a"" SVG instruction), these segments won't be used to calculate the real path bounds. This leads to incorrect vcenter results and probably also to wrong scaling.
",bummzack,
600,2016-11-20 17:10:31,":disappointed: 
",GreLI,
599,2016-09-16 08:24:28,"<S_CODE_TOKEN>

config:

<S_CODE_TOKEN>

output:

<S_CODE_TOKEN>

In addition, viewbox is not resized. https://github.com/svg/svgo/issues/547
",breeswish,
599,2016-09-18 19:12:13,"Yes, the plugin is a bit outdated since it relies on the fact that paths use only relative commands, which is no true for a long ago.
",GreLI,
598,2016-09-14 12:52:55,"This could be implemented with an option (one that says that we only want to use the explicitly enabled plugins), but I think it would make more sense to be a preset (#312).

For now, the workaround that I've found is to create an empty config file, and use it in conjunction with `--enable`:

`echo ""plugins:"" > c && svgo --config=c --enable=<plugin_name> test.svg`
",waldyrious,
598,2016-09-14 16:17:35,"I would also like this. Sometimes I don't want _all_ the optimizations.
",kevva,
598,2016-09-14 17:54:03,"There is config with `full: true` option exists for such a purpose.
",GreLI,
598,2016-09-14 18:16:00,"I see, that info can be found in [docs/how-it-works/en.md#1-config](https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#1-config). However, that still requires the creation of a config file, so it doesn't change the current situation much:

`echo ""full: true"" > c && svgo --config=c --enable=<plugin_name> test.svg`

It would be nice to be able to do this in a single command.

(by the way, `full: true` is very unintuitive; I'd never guess it did that if I saw a config file with it, and hadn't read the ""how it works"" document previously)
",waldyrious,
598,2016-09-27 09:28:28,"@waldyrious, you can pass config in a form of JSON in cli:

<S_CODE_TOKEN>

but yeah, I agree it's clumsy. Suggestions are welcome!
",GreLI,
598,2016-09-27 10:45:44,"Uh. I was pretty sure I had tried passing a config string, but maybe the syntax was wrong and the error message led me to think that the problem was that it expected a file. I'll do some more experiments and will get back to you.
",waldyrious,
598,2016-09-27 14:31:33,"I guess I just took the documentation's word and didn't even try a string xD

I would suggest the documentation to be changed from

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

And maybe renaming the ""full:true"" feature to something else, since if you hadn't told me, I'd have assumed it did the opposite...
",waldyrious,
597,2016-09-14 10:08:22,"Here's a diff: https://www.diffchecker.com/oofyWgas
",waldyrious,
596,2016-09-11 20:44:04,"I think we could skip writing explicitly the the `--pretty` when `--indent=4` is used..

<S_CODE_TOKEN>

Thas is also very clear that the intention is to prettify the file with 4 spaces

<S_CODE_TOKEN>
",lipis,
596,2017-02-02 13:23:50,"I suppose it is bad idea, because it will break code like this

js2svg : { 
    pretty: config.isDevelopment,
    indent: 2 
}",Nejik,
596,2017-02-06 11:22:00,What about doing so only in command line?,GreLI,
595,2016-09-08 19:34:30,"First off, thank you to everyone is working on this great tool. It makes working with SVGs so much better!

I'm currently trying to run a directory of icons through a gulp routine (using [gulp-svgmin](https://www.npmjs.com/package/gulp-svgmin)), and for the life of me, I cannot get the 'prefix' feature of cleanupIDs to work. My ultimate goal is to dynamically prefix IDs for all of the files.

I simply _can't get prefix to work, at all_. I'm stumped. This doesn't seem to be related to the gulp plugin, though. Let's set the gulp plugin aside for a moment.

I've tried a lot of different things, and have a reduced case that demonstrates my problem:

I have [globally installed SVGO](https://github.com/svg/svgo#how-to-use)

svgo -v: 0.7.0
node -v: 6.3.0

I made the following config file (called `svgo.yaml`):

<S_CODE_TOKEN>

(I'm including `addClassesToSVGElement` just to demonstrate that other options work)

Here is my test.svg file:

<S_CODE_TOKEN>

Now I run `svgo --config=svgo.yaml --pretty  test.svg`

Here is my output:

<S_CODE_TOKEN>

My _expected_ output would be

<S_CODE_TOKEN>
- Am I missing something with how the prefix option is supposed to be configured? 
- Is there anything else I can try?
- The `remove` option seems to be working, as the IDs remain, just not prefixed.

Any help/insight is greatly appreciated. Thank you!!
",chipcullen,
595,2016-09-08 19:50:07,"`prefix` option [is being used](https://github.com/svg/svgo/blob/master/plugins/cleanupIDs.js#L195) only with `minify: true`. E.g. in yours test.svg it would be “foo-a”.
",GreLI,
595,2016-09-08 20:03:17,"Hrm - when I change my config file to:

<S_CODE_TOKEN>

My output is still:

<S_CODE_TOKEN>

So, neither option has taken. Am I misunderstanding something? Based on what you say, I would expect

<S_CODE_TOKEN>
",chipcullen,
595,2016-09-08 20:12:24,"> Based on what you say, I would expect...

Well, that's what I get myself with your config. Have you applied it properly?
",GreLI,
595,2016-09-08 20:18:19,"> Have you applied it properly?

Besides the creation of the config file, and passing it via `--congfig=` in the command, is there anything else one needs to do?
",chipcullen,
595,2016-09-08 20:22:28,"If this helps, this is what I'm seeing:

![9sdtpjgjll](https://cloud.githubusercontent.com/assets/60903/18365359/63c58450-75e0-11e6-8fd4-88371043349c.gif)
",chipcullen,
595,2016-11-20 14:46:00,"Oh, I got it. Only used IDs are being minified.
",GreLI,
595,2017-01-16 20:37:04,"I'd like to have this applied to unused IDs as well.  I often reference IDs from outside the svg file, and would like to prefix these ids to avoid collisions.  

Until such a feature is available, what's a clean way to make my own custom plugin for svgmin?",jaafit,
594,2016-09-08 15:47:30,"<S_CODE_TOKEN>

In an SVG like this, the `translate` transform could be applied to the `x` and `y` coordinates, and output it as:

<S_CODE_TOKEN>

Edit: it was also suggested here: https://github.com/svg/svgo/issues/419#issuecomment-137070165, so I'd add ""it can be done where `x` and `y` are supported, like `image` tags.""
",bfred-it,
593,2016-09-08 02:44:11,"svgo 0.7.0 fails with the following error message on my Ubuntu 14.04.2 installation:

<S_CODE_TOKEN>

Usage/help shows properly when calling svgo without arguments.
Installation was done with ""npm install -g svgo""
I tried with two different files, one created with Inkscape and the other from https://en.wikipedia.org/wiki/Scalable_Vector_Graphics - same error.

Please advise what I can do :-)
",alentsch,2016-09-11 08:03:20
593,2016-09-08 08:07:36,"SVGO requires Node.js 0.12 or higher. Unfortunately, Ubuntu has outdated version of Node.js, so you have to upgrade it. See https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions for instructions.
",GreLI,2016-09-11 08:03:20
593,2016-09-11 06:16:26,"Thank you GreLI, this solved my problem!!!
",alentsch,2016-09-11 08:03:20
593,2016-09-11 08:03:20,"You're welcome.
",GreLI,2016-09-11 08:03:20
592,2016-09-06 13:40:36,"This pull request adds the inlineStyles plugin for inlining styles, 
also correctly handling selector specificity, cascading, etc and cleaning up matched selectors.

Additionally, direct CSS selector support (powered by [css-select](https://github.com/fb55/css-select), [csstree](https://github.com/csstree/csstree) and [csso](https://github.com/css/csso)) is added to the svgo jsAPI 
which is used by this plugin ([`querySelectorAll(selector)`](https://developer.mozilla.org/en/docs/Web/API/Document/querySelectorAll), [`querySelector(selector)`](https://developer.mozilla.org/en/docs/Web/API/Document/querySelector), [`matches(selector)`](https://developer.mozilla.org/en/docs/Web/API/Element/matches)).
Furthermore, the [CSSStyleDeclaration interface](https://developer.mozilla.org/en/docs/Web/API/CSSStyleDeclaration) is added to svgo jsAPI for handling element styles.",strarsis,
592,2016-09-06 14:18:04,"[![Coverage Status](https://coveralls.io/builds/7762721/badge)](https://coveralls.io/builds/7762721)

Coverage remained the same at 89.005% when pulling **b68892bf182414589a923bc0e3778470220e9217 on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 14:22:59,"[![Coverage Status](https://coveralls.io/builds/7762826/badge)](https://coveralls.io/builds/7762826)

Coverage remained the same at 89.005% when pulling **bf29ceb9469fa06cff06dde24da8099fb516acbf on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 14:44:05,"[![Coverage Status](https://coveralls.io/builds/7763205/badge)](https://coveralls.io/builds/7763205)

Coverage remained the same at 89.005% when pulling **fe759cb2ac65ea2264bc32f648611caa108b172d on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 14:48:37,"[![Coverage Status](https://coveralls.io/builds/7763284/badge)](https://coveralls.io/builds/7763284)

Coverage remained the same at 89.005% when pulling **8ef17ee4d6c6501ddeea93fe57dc39c703aa2d21 on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 14:53:50,"Coming back to the discussion in https://github.com/svg/svgo/pull/447.

Should this plugin now remove all classes that 
a) matched some elements and have been inlined and 
b) aren't used multiple times among elements?

Or should this go into a separate plugin just for this task, 
which means that this plugin only inlines, 
but doesn't change the style elements content and element class attributes?
",strarsis,
592,2016-09-06 14:54:15,"[![Coverage Status](https://coveralls.io/builds/7763393/badge)](https://coveralls.io/builds/7763393)

Coverage remained the same at 89.005% when pulling **5bfd49821b03271a0fa2a4cc9f49a44c1ea35e47 on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 15:01:29,"I think the pugin should remove inlined classes (as well as emptied `<style>` elements). There is no reason to keep them. However, if a class is used many times, probably it's better to leave it as is without inlining.

If the plugin will allways inline classes, I don't think it's a good idea to make it run by default.
",GreLI,
592,2016-09-06 15:02:40,"OK, so I will adjust the plugin to use csso ast instead and modify the css class removal logic.
",strarsis,
592,2016-09-06 22:50:53,"[![Coverage Status](https://coveralls.io/builds/7771061/badge)](https://coveralls.io/builds/7771061)

Coverage remained the same at 89.005% when pulling **46aeebedd2cd5b5d5f8b8e4fd3da26392bac0dd3 on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 22:50:54,"[![Coverage Status](https://coveralls.io/builds/7771061/badge)](https://coveralls.io/builds/7771061)

Coverage remained the same at 89.005% when pulling **46aeebedd2cd5b5d5f8b8e4fd3da26392bac0dd3 on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 22:58:15,"[![Coverage Status](https://coveralls.io/builds/7771218/badge)](https://coveralls.io/builds/7771218)

Coverage remained the same at 89.005% when pulling **814369dfcd7bf7d440cb7eaea9bb4157894f6970 on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 23:00:30,"So the plugin will now remove selectors that matched once but 
preserve selectors that matched multiple times in the SVG style elements content.
Also, style elements which content became empty after optimization will be removed, too.
",strarsis,
592,2016-09-06 23:01:08,"[![Coverage Status](https://coveralls.io/builds/7771257/badge)](https://coveralls.io/builds/7771257)

Coverage remained the same at 89.005% when pulling **a3cec049e2baf82400c566f578a3df03cfa23d4f on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-06 23:01:09,"[![Coverage Status](https://coveralls.io/builds/7771257/badge)](https://coveralls.io/builds/7771257)

Coverage remained the same at 89.005% when pulling **a3cec049e2baf82400c566f578a3df03cfa23d4f on strarsis:inlineStyles** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,
592,2016-09-09 12:12:30,"Edit: Comment doesn't apply anymore, css-select + plugin feature used instead.

Tests are passing, but there may be one thing left: 
Selectors (including classes) of classes that match multiple times are spared by this plugin - but still inlined.
I assume that it makes sense that multiple times matching selectors aren't only spared but also not inlined.
For this I would have to add an issue/PR for [juice](https://github.com/Automattic/juice/issues) that is used for the inlining.",strarsis,
592,2016-10-05 23:15:27,"Not sure the status of this PR, I came across it because I want to avoid the class/id style leakage mentioned here: https://github.com/svg/svgo/issues/296#issuecomment-127957035.

It seems this plugin as currently designed would not solve the leakage problem because it does not inline selectors that match multiple times. To solve leakage it would have to always inline and always remove the `<style>` blocks. Do I understand this correctly?

Thanks for putting the effort into this plugin!
",zakness,
592,2016-10-06 13:11:52,"Edit: @zakness:
There is now an option in this plugin with which you can toggle whether 
it should inline everything or only selectors that match once, 
so you can use it now for your purposes, too:
<S_CODE_TOKEN>`",strarsis,
592,2016-10-06 14:34:02,"Ah okay, thanks for the quick response @strarsis :)
",zakness,
592,2016-10-10 17:16:23,"@strarsis there is one caveat with the PR to juice. Since version 3 it requires Node.js >= 4, while svgo works on 0.10 and higher (and there were complains recently when it was bumped to 0.12, so I've reverted changes). If you update dependency on juice you will not able to use the plugin on lower Node.js versions.
",GreLI,
592,2016-10-10 23:03:46,Edit: This comment doesn't apply anymore as cheerio has been replaced.,strarsis,
592,2016-11-03 07:16:02,"Are there any updates on this plugin? 
",diedsmiling,
592,2016-11-18 16:21:18,"In this plugin, juice has been replaced now with css-select which can 
use the svgo AST directly and gives svgo native CSS selection capabilities.",strarsis,
592,2016-12-05 13:03:46,"Whats the current status on this? I'm in the need for moving styles declared in a <style> tag into every corresponding <path> tag, which this plugin seems to handle, right?

Will this be merged into the main repo?",martinjuhasz,
592,2016-12-05 15:59:57,"@martinjuhasz @diedsmiling @raphael22: You could use/try out this plugin already, 
but for it to be merged to svgo master, recent css-select has to be [released to npm](https://github.com/fb55/css-select/issues/72) first.

For installing from this PR branch:
<S_CODE_TOKEN>`


Available plugin options:
<S_CODE_TOKEN>`

It is recommended to also run the minify Styles plugin after this one in order to flatten all inlined styles.
!important is preserved inside inline styles because of specificity on styles from the outside.
It could be removed with a simple extra plugin.",strarsis,
592,2016-12-09 16:09:32,"Edit: Currently this plugin can also filter for mediaqueries (at-rules) 
(it uses 'screen' and 'normal' styles by default).",strarsis,
592,2016-12-12 01:57:16,"Hi there,

I'm not certain if this is still a work in progress but just wanted to let you know in case you weren't aware... I tried forking your branch and ran your plugin using svgo and saw unexpected results with your plugin enabled vs. disabled.

Here is a gist containing the SVGs I used/generated: https://gist.github.com/alexjlockwood/f5d65651f2357f2fc9b4781c6e124778

I ran the following commands:

<S_CODE_TOKEN>

As you can see in the gist, the third kid's hat is missing its fill color when the plugin is enabled.

The style tag for the source SVG looks like:

<S_CODE_TOKEN>

Interestingly, if I change the lines beginning with `cls-1,` and `cls-7,` using the code below, the plugin works fine:

<S_CODE_TOKEN>

Let me know if you are seeing the same thing!",alexjlockwood,
592,2016-12-12 05:43:52,"@alexjlockwood: Yes, I have the same issue and created a test now for this.
Apparently csso ast list modifications leak into previously referenced declarations.
When invoking `csso.translate(...)`, declarations are incorrectly used for selectors that come afterwards.

Edit: Fixed!",strarsis,
592,2016-12-12 18:13:30,"that's great! thanks again for this... it's going to make my life a lot easier when dealing with UXers giving me SVGs that were exported by adobe illustrator. :D 

btw, do you have a ball park estimate of when this will be ready to be merged?",alexjlockwood,
592,2016-12-12 19:45:05,"@alexjlockwood: The recent css-select has to be [released to npm](https://github.com/fb55/css-select/issues/72).
Also @GreLI has to review and possibly remark/fix things.
My own guess is that this is merged quite soon after css-select has been released.",strarsis,
592,2017-01-14 16:29:35,Any updates on this?,alexjlockwood,
592,2017-01-14 16:57:57,"@alexjlockwood: Current css-select changes have to be released as package to npm yet. 
You can already use this plugin though by installing svgo from this PR branch (instructions above).",strarsis,
592,2017-01-18 18:09:52,Great work people! Really looking forward to this becoming a default svgo plugin. What's the usual procedure and timeline for these kinds of PRs to become merged and published?,laurentvd,
592,2017-01-18 18:22:45,"@laurentvd: You can already use it by installing svgo from this PR branch (see instructions further above).
Currently not the latest [css-select](https://github.com/fb55/css-select/issues/72) release is used but a newer commit because of features/API 
that are required for its usage in svgo.

@GreLI: This PR can't/shouldn't be merged into svgo with a [github commit](https://github.com/strarsis/svgo/blob/inlineStyles/package.json#L53) as package dependency, right?",strarsis,
592,2017-01-19 10:42:26,"@strarsis thanks and yes I read those instructions (which work fine). The thing is - however - that I'm using a package which uses a package which uses `svgo` ;-) You probably see my problem there. I'll wait for it to be merged, was just curious on the timeline for this.",laurentvd,
592,2017-01-19 10:58:14,There is no timeline. Just when @fb55 decides to release a new version of `css-select`,martinjuhasz,
592,2017-01-19 11:05:25,@martinjuhasz I've released the current state as `1.3.0-rc0`. Does that work for you?,fb55,
592,2017-01-19 14:52:01,@fb55 : Thanks! Now a normal npm package can be used for css-select.,strarsis,
592,2017-01-21 19:33:57,"Support for pseudo classes added (previously issues with styles that use pseudo classes).
Styles in pseudo classes can now be optionally selectively inlined for special purposes (e.g. ':link' + ':hover').",strarsis,
592,2017-02-05 16:58:30,"@GreLI : Now this could be merged, any changes required?",strarsis,
592,2017-02-05 17:41:22,It's a complicated topic. Thorough review is needed.,GreLI,
592,2017-02-06 00:08:21,@GreLI: I can separate the code for _css selection_ and for the _inline styles plugin_ in two PRs if necessary?,strarsis,
592,2017-02-08 10:47:22,"strarsis, thank you very much for your work, your plugin is indeed what we need! 
Hope GreLI will merge it soon",Nejik,
592,2017-02-09 21:22:19,"I'm in desperate need of this to be merged so that I can fully automate my webpack config in conjuction with an external svg sprite.

👍 ",satazor,
592,2017-02-09 21:33:27,"Agree, this would be super awesome to have in svgo. Software like Adobe Illustrator outputs huge/spammy SVG files, and this plugin is necessary in order to reduce the size.",alexjlockwood,
592,2017-02-24 23:26:14,"Hey, just wanted to let you know that I got an error when I tried to process the following svg using your plugin:

https://gist.github.com/alexjlockwood/0db6f64f81eb1eb54434636155463615

The SVG has a ton of unused stuff in the `<style>` tag so I assume it has something to do with that.",alexjlockwood,
592,2017-02-25 00:36:13,"@alexjlockwood: The issue is caused by the [deep combinator selectors](https://www.w3.org/TR/css-scoping-1/#deep-combinator) from the CSS Scoping Module used in the styles of that SVG. css-select/css-what apparently don't support this yet (issue https://github.com/fb55/css-select/issues/81).
The plugin skips now all selectors that cause issues, leaving them in for further inspection/removal.",strarsis,
592,2017-02-25 00:56:15,"Ahh interesting... and I figured I would also ask... does this affect the minifyStyles SVGO plugin in any way?

One thing I noticed was that the inlineStyles plugin took a *very* long time to finish. This does not surprise me at all considering how many selectors are in the `<style>` tag. But I also wonder if the minifyStyles plugin could have saved a bunch of time by removing the un-used selectors in there. Is that possible? (I noticed you wrote that plugin too :P).",alexjlockwood,
592,2017-02-25 01:20:42,"I just made a little benchmark, take it with a grain of salt - compare the numbers relatively to each other.

Running svgo **only** with the **inlineStyles** plugin against that particular SVG (https://gist.github.com/alexjlockwood/0db6f64f81eb1eb54434636155463615) takes about **1.3 s**econds.
**minifyStyles** **before inlineStyles** actually increases the required time to about **3.5 s**econds.
**First inlineStyles**, **then minifyStyles** (as in .svgo.yml for this PR) requires also about **3.5 s**econds.
Running **minifyStyles** **before** and **after** **inlineStyles** increases required time to about **5 s**econds.
**Without inlineStyles and minifyStyles** plugins it takes only about **150 ms**.

So using minifyStyles in its current implementation before inlineStyles (and afterwards, because one wants everything minified) doesn't speed up but slows down the process.

But besides this, inlineStyles could be of course also further optimized in some places like in the loop where external style declarations are merged with already inlined styles.

Edit: A little node profiling indicates that the specificity module is taking a great fraction of required time.

Edit: Now the built-in csso specificity calculation method is used instead and time went down from 1.3s to 500ms (measured when using inlineStyles plugin only).",strarsis,
592,2017-02-27 02:13:18,"@alexjlockwood: Normally node can only utilise a single logical cpu core, so by using a suitable task runner one could make it utilise all available logical cores. For a system with 8 logical cores that could result in 8x speed up because each core can process a SVG at the same time.

The minifyStyles plugin has been modified recently and extra logic added that cleans up classes that aren't used in the SVG. This increases required time and it may be a good idea restoring the previous behaviour and moving the classes cleanup to a separate plugin that is usually not used after inlining all styles.",strarsis,
592,2017-03-14 13:45:14,"This is nice, latest csso supports also latest css-tree which allows to use new AST walking methods.
In order to use latest csso, css-tree has to be released with a fix for https://github.com/csstree/csstree/issues/39.",strarsis,
592,2017-03-18 19:41:01,"inlineStyles plugin has now been rewritten for using latest csstree for handling the AST.

Furthermore, [CSSStyleDeclaration interface](https://developer.mozilla.org/en/docs/Web/API/CSSStyleDeclaration) has been implemented for svgo jsAPI, 
it is possible to set/get styles on each node now with intelligent AST translation.

- setProperty(propertyName, value, priority)
- getPropertyValue(propertyName)
- getPropertyPriority(propertyName)
- removeProperty(propertyName)
- getCssText()
- item(index)

inlineStyles plugin alone now requires about 450ms for the large SVG test file, 
76% improvement over tests with the previous inlineStyles implementation.

Edit: Some tests fail now because of incompatibilities in some other plugins with the new CSSStyleDeclaration interface.",strarsis,
592,2017-03-20 22:17:07,@GreLI All tests are passing.,strarsis,
592,2017-03-21 15:52:40,Awesome to hear about the performance improvements! Going to try this out for myself right now. :D,alexjlockwood,
592,2017-03-21 16:21:18,"Hmm... first of all, I should mention that I'm working with a fork of this plugin right now, so this issue may or may not affect svgo. But I figured I'd point it out since I've forked the code and dependencies exactly and am still having trouble building in my local setup with the following error:

<S_CODE_TOKEN>

Any idea what might be going on here?",alexjlockwood,
592,2017-03-21 16:40:57,@alexjlockwood I suggest some kind of transpiler is used and it doesn't support for `require('./file.json')`. ,lahmatiy,
592,2017-03-21 17:31:24,"I closed+re-opened the PR for triggering a re-build, there was an issue with the coveralls web service.",strarsis,
592,2017-03-21 17:38:52,"@lahmatiy: I am not sure whether this is really worth the performance improvements, but one could try to pass the css-tree parsed selector tokens directly to css-select instead first translating it to a string and letting css-select parse it back to its own tokens (https://github.com/fb55/css-select/blob/e109d4b3668354542c806a6b652410f135d679ae/lib/compile.js#L33 and https://www.npmjs.com/package/css-what).",strarsis,
592,2017-03-21 18:12:04,@strarsis It's not clear to me what you're asking for. Question about the performance gain? I don't think it's a bottleneck. And converting to `css-what` format is overengineering.,lahmatiy,
591,2016-09-03 16:07:33,"I'm having an issue very similar to #522 with the most recent version and all plugins disabled.
Input:

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>
",MacX19,
590,2016-09-02 18:26:00,"Hi there,

I got the use case today that we used linked SVG (SVG with PNG linked to it) and I wanted to pack everything in the SVG. I do not think it is currently possible with the lib but I wrote a small script for it. I'd be glad to include it in the lib if it helps 😄  

Could it be an interesting feature for SVGO?

To summary: you have a folder with PNGs and one SVG which refers to all these PNGs and SVGO compresses everything in a big optimised SVG with Base64 Strings instead of links (which makes it easier for web 😉 👍 )
",lolobosse,2016-11-20 14:33:13
590,2016-09-05 20:00:14,"Hi! Thanks for your interest!
Regarding your question, it's a bit out of scope of SVGO, more like a sprite builder. SVG allows to do many crazy things, but here we're focusing on optimizing images.
",GreLI,2016-11-20 14:33:13
590,2016-09-08 13:43:31,"Also, there are cases where is strictly important to preserve linked images. It's up to you, when importing your PNGs in your design tool, to decide if your imported image will be linked or embedded.
",paulocoghi,2016-11-20 14:33:13
590,2016-09-08 13:47:28,"@paulocoghi Yeah of course, I wanted to give it as an option only (not to force the user to use embedded images).

The use case was that I wanted really small pictures so I took my PNGs and minified them, then I minified my SVGs and I wanted to put them back together not to create 2 HTTP Requests.

But ok, I can understand that this could be out of scope 😄 👍 
",lolobosse,2016-11-20 14:33:13
590,2016-09-08 13:51:23,"@lolobosse Now I understand you better! And, now, I think this would be interesting :smiley: 
",paulocoghi,2016-11-20 14:33:13
590,2016-09-08 13:51:59,"For automation purposes, +1
",paulocoghi,2016-11-20 14:33:13
590,2016-09-08 13:53:08,"Cool, I just need to learn how the lib is structured. 😆 

Let's see what I can get done in the next days. 🚀 
",lolobosse,2016-11-20 14:33:13
590,2016-11-20 14:33:13,"Feel free to write a plugin if you want.
",GreLI,2016-11-20 14:33:13
589,2016-09-01 20:04:20,"Just curious if there's any way to control the execution order of plugins... I ran into a conflict where one plugin was trying target elements by `id` but the `removeAttrs` plugin had already been run—and it was configured to remove the `id` attribute!  Obviously, the order the plugins are executed would make a difference in this case...
",elidupuis,2016-11-20 12:54:38
589,2016-09-02 07:59:53,"Plugins are being run in order they're defined in [config](https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#1-config). By default it's defined in [.svgo.yml](/svg/svgo/blob/master/.svgo.yml).
",GreLI,2016-11-20 12:54:38
589,2016-09-02 15:01:23,"Thanks for clarifying, @GreLI. Turns out that my issue was actually the `cleanupIDs` plugin running before the `removeElementsByAttr`—which I had configured to remove an element by ID but by that time the ID had already been removed.

Easy fix was to explicitly declare the `cleanupIDs` plugin in my config _after_ the `removeElementsByAttr` plugin.

I wonder if it's worth giving `removeElementsByAttr` a little more priority in the order of execution... Seems like there could definitely be conflicts with `cleanupAttrs` and `cleanupIDs`.
",elidupuis,2016-11-20 12:54:38
588,2016-09-01 17:20:49,"In some cases, adjacent gradient `<stop>`s with the same color value can be safely removed:

<S_CODE_TOKEN>
",silverwind,
587,2016-08-31 08:36:29,,vkhv,2017-01-31 20:01:00
587,2016-08-31 10:47:18,"[![Coverage Status](https://coveralls.io/builds/7685633/badge)](https://coveralls.io/builds/7685633)

Coverage remained the same at 89.005% when pulling **25d3f017a178f34429135771342006ac26f1248e on vkhv:master** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,2017-01-31 20:01:00
587,2017-01-31 20:01:00,Many things are wrong here.,GreLI,2017-01-31 20:01:00
586,2016-08-31 08:33:25,,vkhv,2016-08-31 08:33:49
586,2016-08-31 08:41:19,"[![Coverage Status](https://coveralls.io/builds/7683766/badge)](https://coveralls.io/builds/7683766)

Coverage remained the same at 89.005% when pulling **1cf0341d917e8e8bfaee5175cfedc986f30c09bb on vkhv:patch-2** into **4822a44f37bbbe803b710511f3b038cf9e21970d on svg:master**.
",coveralls,2016-08-31 08:33:49
585,2016-08-29 22:43:36,"I'd like to run all of the optimizations except for removing white-space (for readability on large SVG files) but I can't figure out how to do this. I though that `svgo --disable cleanupAttrs test.svg` would work, but whitespace is still removed. Is whitespace removed in a different plugin?
",axelson,2016-08-31 20:22:06
585,2016-08-30 08:16:53,"Whitespace is removed during parsing and there is no way to preserve it. There is option `--pretty` to format output svg.
",GreLI,2016-08-31 20:22:06
585,2016-08-31 20:22:06,"Cool, thanks! That works.
",axelson,2016-08-31 20:22:06
584,2016-08-27 14:21:49,"It would be great if async usage would be optional

So far forceful usage of async in SVGO causes a lot of pain in libraries, which can't handle natively async calls. For example, some templates language doesn't play well with it at all.

Any chances for optional sync implementation?
",ArmorDarks,2016-11-20 12:54:01
584,2016-08-28 16:01:49,"I see some efforts have been made here https://github.com/svg/svgo/issues/580, though, they didn't succeed.
",ArmorDarks,2016-11-20 12:54:01
584,2016-11-20 12:54:01,"I'm afraid the only option use it sync is to wait for execution in command prompt.
",GreLI,2016-11-20 12:54:01
584,2016-11-20 15:00:26,"`<irony>`10 out of 10 solution`</irony>`
",ArmorDarks,2016-11-20 12:54:01
584,2016-12-09 09:00:08,"@ArmorDarks It's maybe a bit ugly but you can make a hack using [deasync](https://github.com/abbr/deasync)

<S_CODE_TOKEN>

PS: I've made a [gist of it](https://gist.github.com/yvele/41690372d8bebe5070349a31f1e15784)",yvele,2016-11-20 12:54:01
583,2016-08-26 13:11:44,"The addAttributesToSVGElement plugin will not function without first being defined in the .svgo.yml defaults file.

This should just need to be added to the default plugins config to be allowed for use.
",gjjones,2016-11-20 12:52:29
583,2016-10-17 14:01:11,"Any update on this? It does not work and I have no idea where to find the .svgo.yml file.
",stephan-v,2016-11-20 12:52:29
583,2016-10-17 15:22:31,"What svgo version are you using? The plugin is available as of 7.0.1. There is a file named `.svgo.yml` in the base directory of your svgo installation. Near the bottom of that file is a line that reads `- addAttributesToSVGElement`. I'd be curious to know if it' there.
",gjjones,2016-11-20 12:52:29
583,2016-10-17 18:29:49,"You can also enable it in your own config file or through `--enable` option (as of v0.7.1).
",GreLI,2016-11-20 12:52:29
583,2016-10-18 08:33:50,"I pulled it in via imagemin and imagemin grabs imagemin-svgo: 5.1.0 which in turns grabbed svgo 0.7.0.

I guess that's where the problem is. 

I've added it myself to the file but it does not work properly though.

If I try this:

<S_CODE_TOKEN>

I will get an error:
`Error in parsing SVG: Invalid attribute name`

If I try this:

<S_CODE_TOKEN>

I will get an error:
`Error in parsing SVG: Attribute without value`

Am I using it wrongly here?
",stephan-v,2016-11-20 12:52:29
583,2016-10-18 12:30:51,"Are you able to put this up as a minimal example in a gist or repo? I'll happily take a look to see what's going on, but I'm having trouble understanding from what you've said.

Also, the first example of `attribute` expects a single string. `attributes` will accept and array and add all of them.
",gjjones,2016-11-20 12:52:29
583,2016-10-18 12:54:03,"Nevermind, easy enough to repro.
",gjjones,2016-11-20 12:52:29
583,2016-10-18 14:05:01,"Yes I thought so as well with the single string for a single attribute and I tried that as well but it does not work. This is repo where my gulpfile is located:

https://github.com/stephan-v/svg-workflow

You can take a look if you want. I will try to see why it is not working.
",stephan-v,2016-11-20 12:52:29
583,2017-01-29 19:54:53,I am also getting this issue. What was the resolution to using the addAttributes plugin?,Matt-Butler,2016-11-20 12:52:29
583,2017-01-29 20:01:44,"<S_CODE_TOKEN>
The code above works, but I am unable to add an attribute without a value.",Matt-Butler,2016-11-20 12:52:29
583,2017-01-30 09:39:05,This was never resolved since I used this for a research project. I am afraid that the current implementation is broken/unfinished.,stephan-v,2016-11-20 12:52:29
582,2016-08-26 13:10:47,"Allows use of the addAttributesToSVGElement by adding to defaults plugins list.
",gjjones,2016-08-26 18:46:26
582,2016-08-26 13:12:02,"Addresses #583
",gjjones,2016-08-26 18:46:26
582,2016-08-26 13:12:37,"[![Coverage Status](https://coveralls.io/builds/7623705/badge)](https://coveralls.io/builds/7623705)

Coverage remained the same at 89.005% when pulling **1e7306f570aaadafd9e7433fb0cb27a4535e9670 on gjjones:allows-use-of-addAttributes-plugin** into **975a9ff223b562a440ccd919715092275024c950 on svg:master**.
",coveralls,2016-08-26 18:46:26
581,2016-08-26 12:48:37,"Hello,

Is it possible to add dimensions as attributes from viewbox values? If not, how can I write my own plugin to do it? I wrote one, put it in plugins/ and .svgo.yaml, but nothing changes. I use it through gulp-svgmin though, I don't know if that makes a difference.

Thanks in advance for your help,
François
",fr-olivier,2016-11-20 12:52:15
581,2016-08-26 18:04:33,"IIRC, there is no such a plugin currently,
",GreLI,2016-11-20 12:52:15
581,2016-11-20 12:52:15,"To use a plugin you have to put a plugin into svgo `plugins` directory and then add it through a config. Alternately, you can pass it as a function in a JSON config (as were discussed in #564).
",GreLI,2016-11-20 12:52:15
580,2016-08-25 13:16:11,"Would be nice. Just saying...
",MaKleSoft,2016-08-25 15:59:19
580,2016-08-25 13:58:37,"Since the core of SVGO is inherently asynchronous, that would be difficult to pull of.

If you tell me how you want to use it, I'd be glad to help you.
",derhuerst,2016-08-25 15:59:19
580,2016-08-25 15:59:19,"I'm integrating the optimizer into another tool that until now is working synchronously. I was just hoping adding a synchronous method would be possible without too much hassle so I didn't have to change my api 😊 other than this is exactly what I was looking for! Thanks for the quick answer, I guess I'll close the issue now.
",MaKleSoft,2016-08-25 15:59:19
580,2016-08-25 16:12:32,"> I'm integrating the optimizer into another tool that until now is working synchronously. I was just hoping adding a synchronous method would be possible without too much hassle so I didn't have to change my api

This is by definition impossible. Since JavaScript runtimes execute blocks until they finish (without pausing and switching to another context), you can not possibly ""wait"" synchronously for another asynchronous context.
",derhuerst,2016-08-25 15:59:19
580,2016-08-25 16:16:59,"I know... I was just thinking many packages (including the core node
packages) have synchronous as well asynchronous versions of most functions
so maybe your dependecies offer that choice, too.
On Do., 25. Aug. 2016 at 18:12, Jannis Redmann notifications@github.com
wrote:

> I'm integrating the optimizer into another tool that until now is working
> synchronously. I was just hoping adding a synchronous method would be
> possible without too much hassle so I didn't have to change my api
> 
> This is by definition impossible. Since JavaScript runtimes execute blocks
> until they finish (without pausing and switching to another context), you
> can not possible ""wait"" synchronously for another asynchronous context.
> 
> —
> You are receiving this because you modified the open/close state.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/svg/svgo/issues/580#issuecomment-242446250, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/ABNknD0WEUGWeEnVXh8QeCMHfjTiKOr9ks5qjb71gaJpZM4JtDhM
> .
",MaKleSoft,2016-08-25 15:59:19
580,2016-08-25 16:42:09,"SVGO relies on at least one async library ([sax](https://github.com/isaacs/sax-js#readme)).
",derhuerst,2016-08-25 15:59:19
580,2016-08-26 07:24:28,"@derhuerst I see. Anyway, thanks so much for the clarification!
",MaKleSoft,2016-08-25 15:59:19
579,2016-08-24 23:11:37,"This fixes some annoyances with sortAttrs:
- Attributes such as `stroke-linejoin` were not included with `stroke-width`, `stroke-miterlimit` etc.. Now all attributes that begin with `stroke-` are sorted alphabetically immediately after `stroke`. Same for fill and marker attributes.
- Prefixed attributes are moved to the end of the list, except `xmlns`, which is still at the start.
- Any attributes not listed in the order are sorted alphabetically.
",darktrojan,2016-08-25 19:31:03
579,2016-08-24 23:23:07,"[![Coverage Status](https://coveralls.io/builds/7596702/badge)](https://coveralls.io/builds/7596702)

Coverage remained the same at 88.947% when pulling **24f7b5908b34cb222991cd96a132a0137e0ed63d on darktrojan:sortAttrs** into **6e9854a046e1dffda0cc55caf4593191ce197d90 on svg:master**.
",coveralls,2016-08-25 19:31:03
579,2016-08-24 23:25:54,"[![Coverage Status](https://coveralls.io/builds/7596742/badge)](https://coveralls.io/builds/7596742)

Coverage remained the same at 88.947% when pulling **24f7b5908b34cb222991cd96a132a0137e0ed63d on darktrojan:sortAttrs** into **6e9854a046e1dffda0cc55caf4593191ce197d90 on svg:master**.
",coveralls,2016-08-25 19:31:03
578,2016-08-24 13:17:21,"Since`yml` is not as well known as`JSON` and also opens a lot more potential issues I think it would be nice to offer an option to define config in a JSON file instead.

IMHO the yml syntax is irritating and results in issues e.g. #558 
",pixelass,2016-11-20 12:48:19
578,2016-08-24 14:54:11,"I think JS files are the most straightforward, since you can put inline functions etc.
",derhuerst,2016-11-20 12:48:19
578,2016-08-24 16:07:13,"@derhuerst I don't disagree ;)

JSON is the main format for a lot of tools (.eslintrc, .babelrc ...) hence the suggestion.

IMHO `js` and `json` are better than `yml`  at least when working in a node environment
",pixelass,2016-11-20 12:48:19
578,2016-11-20 12:48:19,"Actually, one can pass a json file as a config.
",GreLI,2016-11-20 12:48:19
577,2016-08-19 15:40:34,"added a pull request that fixes the issue
https://github.com/svg/svgo/pull/576
",tombigel,2016-08-19 15:48:47
577,2016-08-19 15:48:47,"PR itself would be enough. Thanks!
",GreLI,2016-08-19 15:48:47
576,2016-08-19 15:39:19,"when running cleanupIds with minify:false option it does not save a reference to all ids and removes ids that shouldn't be removed.
This fix adds a var that keeps a ref to the original id even if minify is not defined
",tombigel,2016-08-19 15:45:34
576,2016-08-19 15:41:02,"[![Coverage Status](https://coveralls.io/builds/7525368/badge)](https://coveralls.io/builds/7525368)

Coverage remained the same at 88.947% when pulling **4865892f6ec358369651fbbbdeeb0211822788b1 on tombigel:patch-1** into **7302d4d8ccf62bd4f5e2690d64bce246c9f60be1 on svg:master**.
",coveralls,2016-08-19 15:45:34
576,2016-08-19 15:45:30,"Nice! Thanks!
",GreLI,2016-08-19 15:45:34
575,2016-08-17 16:04:28,"We are using svgo with [image-webpack-loader](https://github.com/tcoopman/image-webpack-loader) to compile our webapp. Compilation produces client assets and server assets. The same source SVG file gets minified to two different versions on client and server.

The problem has been removed by setting `{ ""removeUselessStrokeAndFill"": false }`. There are no other settings (using defaults).

Please see [files.zip](https://github.com/svg/svgo/files/422986/files.zip) which contains 3 files - two with hashed names are minified version of the third file.

Please, where could be the problem?
",zdila,2016-11-20 12:47:14
575,2016-08-21 20:02:51,"Well, I don't see any difference in browser. The only difference in hashed files is that the first element

<S_CODE_TOKEN>

is converted by `removeUselessStrokeAndFill` to

<S_CODE_TOKEN>

So what the problem? Is there one?
",GreLI,2016-11-20 12:47:14
575,2016-08-24 10:41:46,"The problem is that two different results were produced with the same arguments. I'll do some more testing and inform you if I find some more details.
",zdila,2016-11-20 12:47:14
574,2016-08-16 10:55:13,"If you try to use SVGO as nodejs module in tests, where you have mock-fs for any targets you will see this error:

<S_CODE_TOKEN>

node `v6.2.1`
npm `3.9.3`
svgo `0.6.6`
",awinogradov,2016-08-21 10:46:36
574,2016-08-20 17:38:48,"SVGO fails to read the default config.
",GreLI,2016-08-21 10:46:36
574,2016-08-20 17:39:36,"yep
",awinogradov,2016-08-21 10:46:36
574,2016-08-20 18:31:20,"So what the point of the issue?
",GreLI,2016-08-21 10:46:36
574,2016-08-20 19:11:19,"So, svgo doesn't work if u try to use it with mock-fs. I think it's necessary in general and for me, because many users use mock-fs in tests. Now I can't use svgo and I need to find another tool, but I don't want to do it. I like svgo and I think u can solve this problem. I think problem can be in yml parser, but I'm not sure.

Sent from my iPhone

> On 20 Aug 2016, at 21:31, Lev Solntsev notifications@github.com wrote:
> 
> So what the point of the issue?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
",awinogradov,2016-08-21 10:46:36
574,2016-08-20 19:12:21,"@awinogradov have you manually confirmed the file exists?
",derhuerst,2016-08-21 10:46:36
574,2016-08-20 19:20:00,"It's not yml parser, it's [svgo/lib/svgo/config.js:31:48](/svg/svgo/blob/1162dac878a36bfe317040283b4777c62ab600ea/lib/svgo/config.js#L31) as stack trace says. It tries to read the default config file as I said above.
",GreLI,2016-08-21 10:46:36
574,2016-08-20 20:09:38,"> It's not yml parser, it's svgo/lib/svgo/config.js:31:48 as stack trace says. It tries to read the default config file as I said above.

Yeah, but why can't it read `.svgo.yml`? Is that because of `mock-fs` or because of something else? That's why I asked @awinogradov wether he can confirm manually that the file exists.
",derhuerst,2016-08-21 10:46:36
574,2016-08-20 22:05:48,"@derhuerst I'm absolutely sure. I've made example for exception demo https://github.com/awinogradov/svgo-ex. You can repeat it:

<S_CODE_TOKEN>
",awinogradov,2016-08-21 10:46:36
574,2016-08-20 22:17:34,"Your example doesn't seem to ""copy"" the files into the mock fs:

<S_CODE_TOKEN>

Also, svgo loads the yaml file relative to the _current file_, not to the current working directory. This looks like it might be another reason it fails.
",derhuerst,2016-08-21 10:46:36
574,2016-08-20 22:20:05,"U can do any operations with mock-fs. SVGO fails anyway :(

Sent from my iPhone

> On 21 Aug 2016, at 01:17, Jannis Redmann notifications@github.com wrote:
> 
> Your example doesn't seem to ""copy"" the files into the mock fs:
> 
> const mock = require('mock-fs');
> const SVGO = require('svgo');
> 
> mock({[process.cwd()]: mock.directory()});
> 
> const svgo = new SVGO();
> Also, svgo loads the yaml file relative to the current file, not to the current working directory. This looks like it might be another reason it fails.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
",awinogradov,2016-08-21 10:46:36
574,2016-08-21 01:05:17,"@awinogradov 

I think this issue isn't related to SVGO.

You first have to tell mock-fs which files should be available in the mocked fs. The following code fails (even though it doesn't even use SVGO):

<S_CODE_TOKEN>
",derhuerst,2016-08-21 10:46:36
574,2016-08-21 10:43:18,"@derhuerst yep. I'm going to mock-fs issues)
",awinogradov,2016-08-21 10:46:36
574,2016-08-21 10:46:36,"https://github.com/tschaub/mock-fs/issues/158
",awinogradov,2016-08-21 10:46:36
574,2016-11-24 11:01:27,"@adamdicarlo 

It might be caused by .yarnclean file.
This file include `.*.yml`, when you yarn install, match files will be ignore.",blade254353074,2016-08-21 10:46:36
574,2016-11-24 11:01:44,https://yarnpkg.com/en/docs/cli/clean,blade254353074,2016-08-21 10:46:36
574,2016-12-21 01:45:51,"To get rid of this problem temporarily, edit  ./node_modules/svgo/lib/svgo/config.js
Line 31, set defaults var:
defaults = { plugins: [] }
Yarn is fast, but f*ks up sometimes.",athlite,2016-08-21 10:46:36
573,2016-08-10 21:07:17,"i wrote below command but it did not work , please help me with correct syntax

`svgo removeStylement  1.svg 2.svg`
",myselfgaurav,2016-11-20 12:46:45
573,2016-08-21 20:05:51,"See “[How to use](https://github.com/svg/svgo#how-to-use)” (or cli output) about basic usage and “[config](https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#1-config)” about configuring plugins. The config is passed by `--config` command line option.
",GreLI,2016-11-20 12:46:45
572,2016-08-04 22:02:27,"running with `collapseGroups` removes half of the image but running with `--disable collapseGroups` works. original image follows:

<S_CODE_TOKEN>
",modosc,2016-08-24 19:02:24
572,2016-08-07 17:26:00,"Seems like another transform moved around mask issue.
",GreLI,2016-08-24 19:02:24
572,2016-08-16 13:16:01,"I have a similar problem on another image : 

### Original

<S_CODE_TOKEN>

<img width=""995"" alt=""capture d ecran 2016-08-16 a 15 14 30"" src=""https://cloud.githubusercontent.com/assets/928701/17699991/3229eaf4-63c4-11e6-9105-8a2b10a16ecd.png"">

### optimized ko

<S_CODE_TOKEN>

<img width=""1018"" alt=""capture d ecran 2016-08-16 a 15 14 42"" src=""https://cloud.githubusercontent.com/assets/928701/17699993/3591c482-63c4-11e6-8dae-7a759eb3f951.png"">
",abarre,2016-08-24 19:02:24
572,2016-08-25 08:20:21,"Thank you for the fix. Will you make a new release with the fix ?
",abarre,2016-08-24 19:02:24
572,2016-08-25 20:26:18,"v0.7.0 has been just released.
",GreLI,2016-08-24 19:02:24
571,2016-07-27 22:58:07,"As noted in #570 synced [README](https://github.com/svg/svgo/blob/master/README.md) with `svgo -h` command
",elrumordelaluz,2016-07-28 18:36:01
571,2016-07-27 23:00:16,"[![Coverage Status](https://coveralls.io/builds/7194155/badge)](https://coveralls.io/builds/7194155)

Coverage remained the same at 88.947% when pulling **46d604b10e5b33e101f1d96bf839f31b4e3b6043 on elrumordelaluz:readme-elrumordelaluz** into **4dcef5e31a89f903ccd90724d65a2e44063aff60 on svg:master**.
",coveralls,2016-07-28 18:36:01
570,2016-07-27 17:43:22,"Seems that the _plugin_ (`active` by default) doesn't work in some cases leaving an empty `<g>` without attributes and with only one `<path>` inside.

I am using this `svg` code as **test.svg** 

<S_CODE_TOKEN>

and with a simple test like the one below

<S_CODE_TOKEN>

the result is:

<S_CODE_TOKEN>

---

Here fast visual explanation thanks to [svgomg](https://jakearchibald.github.io/svgomg/) 

![svgo](https://cloud.githubusercontent.com/assets/784056/17185692/4f71eca2-5432-11e6-9e68-b9dfd1eb1953.gif)
",elrumordelaluz,2016-07-27 20:54:15
570,2016-07-27 20:02:51,"Sometimes some optimizations need to be applied after ones that was made later. That why`--multipass` was introduced.
",GreLI,2016-07-27 20:54:15
570,2016-07-27 20:19:16,"great @GreLI, thanks for the reply. 
Is there any _doc_ about  `--multipass` (didn't foud in README) or at least how to use in node (no CLI)?

thanks again,
",elrumordelaluz,2016-07-27 20:54:15
570,2016-07-27 20:42:55,"@elrumordelaluz Check [the `svgo` executable](https://github.com/svg/svgo/blob/9f545d2/lib/svgo/coa.js#L215-L219), although that's not docs.
",derhuerst,2016-07-27 20:54:15
570,2016-07-27 20:54:15,"Thank you @derhuerst 
",elrumordelaluz,2016-07-27 20:54:15
569,2016-07-25 07:56:28,"`removeEmptyContainers` is handy plugin, but it might a bit tricky to enable it by default. One issue could be ""empty pattern"" container. According to `removeEmptyContainers` it is empty, but in fact it serves as holder that can be filled by `css`. Here is an actual example:

**Unminified file:**
[plunker for the svg demonstration](https://plnkr.co/edit/YoXcSKgbJsbNdW92oeub?p=preview)

<img width=""295"" alt=""screen shot 2016-07-25 at 12 34 41"" src=""https://cloud.githubusercontent.com/assets/4527650/17093706/3e926602-5264-11e6-882e-8bd0284efae9.png"">

**Minified with `removeEmptyContainers`:** 
[plunker for the svg demonstration](https://plnkr.co/edit/ZNYys3Z9IzOtQGYMCmvm?p=preview)
<img width=""289"" alt=""screen shot 2016-07-25 at 12 34 45"" src=""https://cloud.githubusercontent.com/assets/4527650/17093697/3421d2fc-5264-11e6-9ac8-c11b038c661d.png"">

**Minified without `removeEmptyContainers`:**
[plunker for the svg demonstration](https://plnkr.co/edit/swbAEk4mxVWPaB56R607?p=preview)

<img width=""295"" alt=""screen shot 2016-07-25 at 12 34 41"" src=""https://cloud.githubusercontent.com/assets/4527650/17093706/3e926602-5264-11e6-882e-8bd0284efae9.png"">

As you may have noticed the:

<S_CODE_TOKEN>

is considered empty and therefore removed. 
",maksad,2016-07-27 08:21:09
569,2016-07-26 10:44:02,"Have you tried it in latest version? Work fine for me in 0.6.6.
",GreLI,2016-07-27 08:21:09
569,2016-07-27 08:20:55,"You are right. seems that the versions above `^0.6.0` solves this issue. 👍 
",maksad,2016-07-27 08:21:09
568,2016-07-22 11:25:58,"Inkscape uses one-stop gradients by default instead of solid fills when creating swatches. It would be nice to have them replaced with solid fills.
",hlg,
567,2016-07-21 14:14:05,"Any of the SVG font files within;

https://github.com/igaro/app/tree/master/src/cp/cdn/fonts
",andrewcharnley,2016-08-21 20:32:43
567,2016-07-21 17:32:12,"Have you disabled `removeUselessDefs` plugin? It removes non-referenced `<defs>` like fonts.
",GreLI,2016-08-21 20:32:43
567,2016-07-21 18:00:03,"Not done a thing, shouldn't this plugin be disabled by default then?
",andrewcharnley,2016-08-21 20:32:43
567,2016-07-21 18:04:26,"Nope, SVG fonts aren't usual images and, frankly, obsolete by now. I'd strongly recommend using modern font formats like WOFF. All modern and widespread browsers support it, often with additional font features, while SVG fonts even don't have base things like kerning. It's just a set of glyphs outline.
",GreLI,2016-08-21 20:32:43
567,2016-07-21 18:45:55,"I'm using otf, woff etc, the svg is a fallback for older browsers. 

I still thing the role of svgo should be to clean and not destroy. ;)
",andrewcharnley,2016-08-21 20:32:43
566,2016-07-19 10:15:27,"Example file: https://cdn.rawgit.com/PrivateBin/assets/96208cd24ca1c5d2dbf819fe3f101a34b58dc800/images/preview/icon.svg

Now minify it and you get this file with ~1,9KB:
https://gist.github.com/rugk/cd91d31eb7871f2f129ab158f93c60a7

In browsers this looks gode, but in the GNOME image viewer of LMDE it looks broken:
![brokensvg](https://cloud.githubusercontent.com/assets/11966684/16946642/e97cb8a6-4daa-11e6-831f-4d847b3ac86c.png)

GNOME image viewer version:
![gnomeversion 3.10.1](https://cloud.githubusercontent.com/assets/11966684/16946762/7e37ca8a-4dab-11e6-963c-c3fa54ee7564.png)

SVGO used with [atom-svgo](https://github.com/1000ch/atom-svgo) (uses SVGO v0.6.6).
",rugk,2016-07-21 19:27:50
566,2016-07-19 10:16:46,"Can you give an example, with both the SVG you optimized and which plugins were enabled?
",derhuerst,2016-07-21 19:27:50
566,2016-07-19 10:25:06,"See edit...
",rugk,2016-07-21 19:27:50
566,2016-07-19 12:19:01,"I guess, GNOME viewer is somewhat broken. IIRC, colleague of mine has encountered the problem as well.
",GreLI,2016-07-21 19:27:50
566,2016-07-19 12:20:25,"Okay, that's good to hear (as it means the SVG is valid).

If it is already a known bug: Is there a bug report for this opened in the GNOME issue tracker somewhere?
",rugk,2016-07-21 19:27:50
566,2016-07-21 18:06:15,"Not I'm aware of.
",GreLI,2016-07-21 19:27:50
566,2016-07-21 19:27:50,"Okay, reported: https://bugzilla.gnome.org/show_bug.cgi?id=769052
",rugk,2016-07-21 19:27:50
565,2016-07-06 19:58:05,"This is a simple plugin that allows you to remove certain elements based on their `id` attributes.

We need this for a specific workflow in one of our projects where SVGs are exported from Photoshop with a `rect` to set the specifically to set the `viewBox` dimensions—but that `rect` needs to be removed before the SVGs are rendered in our app.

Definitely open to thoughts and improvements!
",elidupuis,2016-07-21 07:17:04
565,2016-07-06 20:02:51,"[![Coverage Status](https://coveralls.io/builds/6895323/badge)](https://coveralls.io/builds/6895323)

Coverage remained the same at 88.947% when pulling **f4b455a65d50537027942b06e46690e7e60b39ca on elidupuis:remove-elements** into **e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master**.
",coveralls,2016-07-21 07:17:04
565,2016-07-06 20:12:52,"No doubts in content, but the name `removeElements` is too vague. It's hard to understand that the plugin removes elements with certain ids by the name.
Also, is some extensibility being supposed? E.g. removing by classes or other attributes.
",GreLI,2016-07-21 07:17:04
565,2016-07-06 20:18:06,"Yeah, ideally this would accept more than just `id` attributes but I haven't wrapped my head around how to make it work yet 😉  
",elidupuis,2016-07-21 07:17:04
565,2016-07-07 22:58:13,"@GreLI Any suggestions on a configuration format for allowing more flexible element selectors? Are there other plugins that use a CSS-like selector format?
",elidupuis,2016-07-21 07:17:04
565,2016-07-08 03:33:34,"How about `removeElementsByAttr` with config similar to `removeAttrs`?

<S_CODE_TOKEN>

This plugin config would remove elements with `id=""foo""` or `class=""bar""`. 
",elidupuis,2016-07-21 07:17:04
565,2016-07-08 17:33:22,"> Any suggestions on a configuration format for allowing more flexible element selectors? Are there other plugins that use a CSS-like selector format?

No, there is no such plugins. And I don't think that it's really needed. It's somewhat out of SVGOs scope. However, since this plugin is removing stuff, it could be useful. Could you add removing elements by classes as well? Then it'll be worth enough.

> How about `removeElementsByAttr` with config similar to `removeAttrs`?

Yeah, something like that would be good. I'd like to suggest to have separate `ids`, `classes`, and `attrs` properties.

Optionally, for classes it worth to allow inner arrays for class intersections like `.foo.bar`. But it's not required.

Perhaps, in a future a separate property for set of requierements like “with class `figure` without `fill` (`attrs: fill: false`). But that's a whole new world.
",GreLI,2016-07-21 07:17:04
565,2016-07-21 04:49:17,"[![Coverage Status](https://coveralls.io/builds/7097972/badge)](https://coveralls.io/builds/7097972)

Coverage remained the same at 88.947% when pulling **d60c5c18da01b6538bd568ac47439cb0cfa435ee on elidupuis:remove-elements** into **e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master**.
",coveralls,2016-07-21 07:17:04
565,2016-07-21 07:17:00,":+1:
",GreLI,2016-07-21 07:17:04
564,2016-07-06 19:23:10,"Is there a way to add custom plugins to SVGO? I have a small plugin I'd like to include as a build step in a project.

For example, I'd like to run `svgo` with a command line option pointing to a directory that contains custom plugins. Or point to said directory in my `.svgo.yml` configuration file. Is this possible?
",elidupuis,2016-11-20 12:45:38
564,2016-07-06 19:24:12,"No, it's not possible for now.
",GreLI,2016-11-20 12:45:38
564,2016-08-22 11:15:02,"@GreLI would you be happy for a contribution adding this ability?
",gampleman,2016-11-20 12:45:38
564,2016-08-22 12:43:49,"Yes
",GreLI,2016-11-20 12:45:38
564,2016-08-22 16:25:34,"So looking at the source I think something like this is already supported. When I pass in a configuration looking like this:

<S_CODE_TOKEN>

I get to execute my code in a custom manner. 

It seems that the only limitation is:
- Only supports inline code, so you have to invoke SVGO via the API rather than using command line or YAML.
",gampleman,2016-11-20 12:45:38
564,2016-08-22 17:01:54,"Oh sweet! Thanks for looking into this @gampleman!

In my opinion it would be ideal to have a config (or command line) option that points to a local directory of custom plugins that following the conventions of the plugins bundled inside SVGO. This directory would essentially be merged with bundled plugins. 

I peeked at the source when I created this issue but didn't have time to investigate further.
",elidupuis,2016-11-20 12:45:38
563,2016-07-01 16:55:43,"Since ids are mangled by default, they hardly can be referenced reliably outside.
So it's worth inlining if we detect they're used only once (after removing invisible and other parts).
Such references might happen pretty often even in hand-written code.
",kirilloid,
563,2016-07-01 18:04:22,"Yep, but I don't understand your point. What's next?
",GreLI,
563,2016-07-01 18:52:53,"Sorry, I don't understand what you don't understand.
I'm suggesting a feature for the tool.
",kirilloid,
563,2016-11-11 19:52:34,"Consider this example @GreLI.

This defs/mask/use structure is typical of some graphics programs output like Illustrator or Sketch.

With IDs:

<S_CODE_TOKEN>

Optimized by inlining referenced element:

<S_CODE_TOKEN>
",themadcreator,
563,2016-12-06 19:24:49,"@themadcreator I like this idea a lot, but are you sure your example is correct? I believe Sketch uses the shape-with-mask pattern to recreate the stroke-position: inside setting which is not available in SVG. The mask is supposed to hide the part of the stroke that falls outside the shape. By removing the mask you are breaking this and effectively doubling the width stroke.

Here's a screenshot of the before and after:

![image](https://cloud.githubusercontent.com/assets/6031/20940127/830b096e-bba6-11e6-8caf-66fa3e534eb7.png)

",steadicat,
563,2017-01-25 21:31:21,"Though that example was not great, this feature would still be neat for cases where the referenced element is truly only used once within the SVG.

Here's a snippet from one of mine:
<S_CODE_TOKEN>`

Can easily become 

<S_CODE_TOKEN>`

I'm just starting to use SVGO and SVGs in my workflow, but I'm seeing a number of examples like this exported from Sketch with `<mask>`, `<clipPath>` and other elements.",ProdigySim,
562,2016-07-01 01:08:11,"Heads up for the great work.

I found pretty strange edge-case when id's are not correctly minified. I really tried to make test example as simple as possible, but the bug is reproduced only in very specific conditions.

[files.zip](https://github.com/svg/svgo/files/342633/files.zip)

Attachment includes index.html file with original as well as minified SVGs.
The problem is with `mid-line` id, which is minified incorrectly. And the end result is that some parts are missing from minified version.

_variations_
- reduce the number of references to `mid-line` (by removing `line-circle` and all it's usages) - bug disappears
- replace `mid-line` with `mid-line-1` or `mid-l` - bug remains
- replace `mid-line` with `midline` or `super-line` - bug disappears

_technical details:_
minified version is created with `svgo test.svg test.min.svg` command, i.e. with default options.

svgo v0.6.6
node v4.4.5
win10 x64
",kirilloid,2016-08-25 19:15:15
562,2016-08-26 00:55:37,"Wow, cool. Thanks for the fix.
",kirilloid,2016-08-25 19:15:15
561,2016-06-27 20:44:47,"Might be a useful plugin. 
",kevinSuttle,2016-07-01 19:04:50
561,2016-07-01 19:04:50,"I believe #521 is right about this. (Released in 0.6.4.)
",GreLI,2016-07-01 19:04:50
560,2016-06-26 08:58:26,"I'm trying to use this comment with svgo `find img -name ""*.svg"" | xargs svgo`

and it is giving me an `Unknown argument: img/centers/icons/peace-of-mind.svg` error.

is there something I'm misunderstanding here or is this a bug of svgo?
",lifeiscontent,2016-11-20 12:44:20
560,2016-06-26 09:01:51,"I also tried `svgo -f img/**`

and `svgo -f img/**/*.svg` but no luck
",lifeiscontent,2016-11-20 12:44:20
560,2016-06-26 09:23:11,"`svgo` accepts only two filenames — one for input and one for output. So, `xargs` isn't suitable for bunch of files. You need to use `for` loop or folder syntax that is `svgo -f img` (without `**`).
",GreLI,2016-11-20 12:44:20
560,2016-08-19 18:14:32,"My workaround: `find . | grep ""\.svg$"" | xargs -Iz -n 1 -P <number of CPUs> svgo z`. The `-n 1` argument tells xargs to only use one file at a time. With `-P` you can run it in parallel.
",marcopashkov,2016-11-20 12:44:20
560,2016-09-16 05:24:53,"@marcopashkov this is awesome, thanks
",lifeiscontent,2016-11-20 12:44:20
559,2016-06-16 14:54:58,"This is probably right on the line of what's appropriate to bring up here rather than on some svg forum, but on the off chance that it is a place svgo could be improved:

I was surprised when svgo (well, svgomg - if this is something specific to that implementation, I apologize, you can just ignore me) gave me this output

<S_CODE_TOKEN>

Is there a reason the `text` and `textspan` weren't merged into this?

<S_CODE_TOKEN>
",olets,
559,2016-06-17 11:33:05,"Not bad idea for a plugin! However, the case is somewhat rare and some details like positioning (`x`, `y` attributes and so on) should be considered.
",GreLI,
558,2016-06-16 12:27:17,"<S_CODE_TOKEN>

input 

<S_CODE_TOKEN>

output 

<S_CODE_TOKEN>

expected output 

<S_CODE_TOKEN>

I tested the config file with other plugins and they work separately and in combiation with this one, though `removeAttrs` does no change the code in any way
",pixelass,2016-08-25 19:24:53
558,2016-08-16 14:50:54,"I had the same problem.

The yml should be:

<S_CODE_TOKEN>
",jonrimmer,2016-08-25 19:24:53
558,2016-08-16 15:53:31,"@jonrimmer thx.

Not sure why people can't just agree upon using json for settings.  It would probably solve/prevent a lot of issues

Since nobody ever responded to this issue I actually built my own parser to handle issues that svgo has.

Closing this for now.
",pixelass,2016-08-25 19:24:53
558,2016-08-25 19:24:53,"Actually, one can use json. It was json initially and will be correctly parsed now.
",GreLI,2016-08-25 19:24:53
557,2016-06-09 09:48:07,"How do I remove: `xmlns:xlink=""http://www.w3.org/1999/xlink""` from the SVG?

As using: `{removeAttrs: { attrs: ['svg:xmlns', 'svg:xmlns:xlink'] }},` doesn't work... only the `xmlns` is removed.
",iamdriz,
557,2016-06-17 11:35:03,"Why not `xmlns:xlink`? What do you mean by “only the `xmlns` is removed”?
",GreLI,
557,2016-06-27 20:43:33,"Was wondering about the same thing. 
",kevinSuttle,
557,2016-06-29 09:33:46,"@GreLI @kevinSuttle Because the `:` is used by this script as an element search it conflicts with attributes that have `:` in them. So for example I want to remove the attribute: `xmlns:xlink` from the `svg` element but because it sees that `:` it tries to remove `xlink` from the `xmls` element which doesn't exist. That make sense?
",iamdriz,
557,2016-07-01 19:22:48,"No. What did you have? What did you do? And what did you get in result? My guess is that you should run SVGO with `{removeAttrs: { attrs: ['xmlns:xlink'] }},` in config.
",GreLI,
557,2016-07-05 10:00:04,"@GreLI That causes it to try and remove an `xlink` attribute from an `<xmlns>` element (which doesn't exist!). The problem is that the `:` colon is used as a prefix to choose which element to apply the search and in this case the attribute itself contains the prefix so confuses SVGO.
",iamdriz,
557,2016-07-09 15:55:43,"Got it. The plugin API isn't that good really. Any ideas or suggestions?
",GreLI,
557,2016-07-30 21:02:45,"`removeAttrs: {attrs: '(stroke|xmlns)'},` works
",anaibol,
557,2016-07-30 21:13:17,"I wonder if you can escape the : or maybe process them as template literals with backticks.
",kevinSuttle,
557,2016-09-27 12:51:00,"Found this thread because I had the same problem when transforming an SVG to vdom calls.
The following plugin removes all namespaced attributes:

<S_CODE_TOKEN>
",joscha,
556,2016-06-06 01:11:46,"I need to strip down a SVG file as to make working with it easier, any suggestions right now there is too much data to work with ?
",SheepDomination,2016-11-20 12:42:43
556,2016-08-25 19:22:36,"Well, SVGO makes svg code cleaner. However, you might want to turn off some optimizations.
",GreLI,2016-11-20 12:42:43
555,2016-06-01 11:10:54,"So I'm trying to svgo in a project which does not, and will not have node.
The project has its own require function, etc.

Note:
 I'm trying to use svgo similar to this:
 https://github.com/svg/svgo/blob/master/examples/test.js
 Except I already have the svg file as a string... in fact there is no svg file on the filesystem.

svgo has a bunch of npm dependancies, some of which may be easy to remove.

Here are some guesses from me:
- fs, and js-yaml are only used to load configuration from a yml file,
  Instead I want to pass in config as a js data structure, so then those two would no longer be required, yes?
- coa and mkdir are only used when svgo is run from the command line, and since I want to use svgo as a js library, I don't need that?
- colors is only used when using the convertcolor plugin, which I don't need.

Perhaps svgo needs to be modularized into even more packages?
",ComLock,2016-11-20 12:42:18
555,2016-07-02 21:16:01,"If you bundle svgo using [Broserify](http://browserify.org/), it will only bundle the dependencies `require`d by the entrypoint. Thus, the CLI dependencies won't be included.
",derhuerst,2016-11-20 12:42:18
555,2016-07-09 15:46:05,"Hello! Sorry for the late response.

> fs, and js-yaml are only used to load configuration from a yml file,

Yes, but `fs` is also used to load and save files (full folders). So, yes, if you pass in everything they aren't needed, that's true.

> coa and mkdir are only used when svgo is run from the command line, and since I want to use svgo as a js library, I don't need that?

Yep.

> colors is only used when using the convertcolor plugin, which I don't need.

Are you talking about `require('colors');` in `coa.js`? It's being used for coloring CLI. Quick search in the repo shows, that's there no other `colors`.
",GreLI,2016-11-20 12:42:18
555,2016-07-09 15:48:24,"It seems as if svgo could be easily split into `svgo` and `svgo-cli`.
",derhuerst,2016-11-20 12:42:18
555,2016-07-09 15:51:33,"Yeah, but people got used to `npm install svgo` for the CLI utility, so I don't think it's a good idea to change this for sake of backward compatibility. It can break many CI-processes.
",GreLI,2016-11-20 12:42:18
555,2016-07-09 16:55:32,"What about `svgo-core` and `svgo`?
",derhuerst,2016-11-20 12:42:18
555,2016-07-09 16:56:16,"Maybe. But it's not on top of priorities.
",GreLI,2016-11-20 12:42:18
555,2016-09-20 14:40:44,"@derhuerst See also https://github.com/svg/svgo/issues/436
",ben-eb,2016-11-20 12:42:18
555,2016-09-20 16:01:04,"@ben-eb Thanks!

Let's close this in favor of #436 because that issue fits better.
",derhuerst,2016-11-20 12:42:18
554,2016-05-27 13:07:22,"We're going to be using SVGO in a project of ours, we were planning on showing the logo.

As a designer, I'm aching to make a couple of improvements. Would anyone mind? I plan on keeping the same general shape, colours, and concept. Just refresh the style a little bit.
",cjdowner,
554,2016-05-30 00:02:04,"Personally, I think that SVGO needs a brand new modern logo. I doubt that current one is well-known.
",GreLI,
554,2016-06-05 16:49:36,"👍 
",deepsweet,
553,2016-05-27 12:20:27,"Hi,

I'm running the following gulp task. I already post on 'gulp-imagemin' project page, but they recommend to post it here, since they are using this package.

<S_CODE_TOKEN>

Original file

<S_CODE_TOKEN>

And it returns an empty SVG file after compression.

<S_CODE_TOKEN>

Any help?

Thanks,
Bruno
",bpalermo,2016-11-20 12:37:17
553,2016-06-03 09:18:04,"I guess this essentially the same issue as #467 . You need to disable certain plugins: disabling `cleanupIDs` and `removeUselessDefs` (in this particular order) fixed the similar issue for me.
",harriha,2016-11-20 12:37:17
553,2016-06-08 20:58:19,"Works!
",bpalermo,2016-11-20 12:37:17
553,2016-06-18 05:58:25,"Same issue (using gulp-svgmin)

<S_CODE_TOKEN>

Converts to: 

<S_CODE_TOKEN>

But if one of icons has not empty `defs`:

<S_CODE_TOKEN>

it works.

In config:

<S_CODE_TOKEN>
",andrey-hohlov,2016-11-20 12:37:17
553,2016-06-23 11:48:44,"@andrey-hohlov, `<symbol>` is considered empty by itself, because it's not rendered. That's why it's being removed by default. You need to turn off `removeUselessDefs` as suggested above.
",GreLI,2016-11-20 12:37:17
553,2016-11-20 12:37:17,"I guess that should be clear for now.
",GreLI,2016-11-20 12:37:17
552,2016-05-26 22:58:52,"I am unable to get datauri to properly encode either a single file or a directory of files. Commands I tried are below. The files processed but without encoding and without throwing an error that the encoding failed. 

<S_CODE_TOKEN>
",tingzilla,2016-11-20 12:36:14
552,2016-11-20 12:36:14,"datauri doesn't work for folders. I hardly imagine how it could do so. See #340
",GreLI,2016-11-20 12:36:14
551,2016-05-25 07:56:24,"The optimised SVG produces errors in Chrome browser.

Happens with 0.6.3 and 0.6.6, but not with 0.5.6 (only tested with those 3 versions).
### Console Errors:

Error: `<path>` attribute d: Expected number, ""`…1148l-48.0187187-e-7z`"".
Error: `<path>` attribute d: Expected number, ""`…5294 5.01352941ce-7 -e-8-.031930…`"".
### Command:

`svgo -p 8`
### Optimised SVG:

<S_CODE_TOKEN>
### Source SVG:

<S_CODE_TOKEN>
",betabong,2016-11-20 12:34:03
551,2016-11-20 12:34:03,"That was function to remove leading zero that was not expected to see exponential notation.
",GreLI,2016-11-20 12:34:03
550,2016-05-24 08:59:48,"Hey,

didn't see this issue, I hope it's no duplicate: The option ""collapseGroups"" removes group-elements, which contain a `data-bind`. So my code

<S_CODE_TOKEN>

Gets reduced to `<rect ... data-bind=""..."" />` and the important group is gone.

I know about the intention to merge down the attributes down to the single element, but this doesn't work in this case (and will never work, because the group data-bind will generate new child elements).

Is there a way to remove the empty `<g>` elements, but every group with at least one attribute is remained (or at least the ones with data-\* attributes)? Maybe there is and I don't get the option?
",sateffen,2016-11-20 11:22:39
550,2016-11-20 11:22:39,"Thanks for reporting, that was a nasty bug!
",GreLI,2016-11-20 11:22:39
549,2016-05-23 02:38:51,"We tried to use svgo for SVG images displaying of mathematical formulae generated by MathJax. 
While this leads go good results in many cases, it fails for at least one [case](https://github.com/mathjax/MathJax-node/issues/235).
Thus, we need to understand in which cases svgo guarantees to keep the spatial alignment of the glyphs used in the formulae and in which cases, this cannot be guaranteed.

_Disclaimer: I'm aware that SVGs are not a good format for mathematical formulae and MathML should be used instead. However, the svg fallback images are required at the moment since not all browsers support MathML reasonably well._
",physikerwelt,2016-11-20 10:58:05
549,2016-11-20 10:58:05,"Quite a bug! Thanks for reporting!
",GreLI,2016-11-20 10:58:05
548,2016-05-20 08:55:31,"Would something like this be possible? If you look at the octicons on github, they are cropped to fit the artwork bounds.
I know that illustrator and inkscape have these options, but I was wondering if such a task could be automated using npm scripts.
",ivancuric,
548,2016-05-20 10:14:08,"It's totally possible. Actually ‘[transformsWithOnePath](https://github.com/svg/svgo/blob/master/plugins/transformsWithOnePath.js)’ plugin computes BBox of the path (but for scaling). You need only to translate and resize the image (can be done jusy by amending `viewBox`). However, the plugin supports only relative coordinates commands (e.g. “l” but not “L”) and the task itself is not a SVGOs purpose.
",GreLI,
548,2016-05-20 10:43:48,"Yea, it's not really in SVGOs domain. What would be the best way to go about the problem in your opinion?
",ivancuric,
548,2016-05-20 10:45:46,"Developing own SVGO plugin is totally fine I think.
",GreLI,
548,2016-05-27 10:49:23,"I'll try. Still trying to understand how this all works :) Could use some help.
",ivancuric,
548,2016-05-30 00:04:03,"General information is in “[How it works](https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md)” doc.
",GreLI,
548,2016-08-27 14:46:35,"That would be nice addition :+1: 

I agree it's indeed seems to be a bit out of scope for svgo, however, from another perspective, it can be named as kind of optimization too.
",ArmorDarks,
547,2016-05-13 07:04:22,"I need to scale all svg icons to 40x40 with transformsWithOnePath plugin, this works. but viewBox is not changed. How can i do this? 

original:

<S_CODE_TOKEN>

result expected:

<S_CODE_TOKEN>

but i got:

<S_CODE_TOKEN>
",hh9527,
547,2016-05-13 08:02:35,"Yeah it [seems so](https://github.com/svg/svgo/blob/master/plugins/transformsWithOnePath.js#L218). No `viewBox` amending. You can remove it with `removeViewBox` plugin though :wink:.
",GreLI,
546,2016-05-12 12:16:04,"Allows adding valueless attributes to the svg element.
",gjjones,2016-08-25 19:34:09
546,2016-05-12 12:17:15,"This PR is meant to address #543
",gjjones,2016-08-25 19:34:09
546,2016-05-12 12:17:40,"[![Coverage Status](https://coveralls.io/builds/6152292/badge)](https://coveralls.io/builds/6152292)

Coverage increased (+0.06%) to 89.005% when pulling **34d9500844bfe3dc944ce71e538ddf0f2a879623 on gjjones:master** into **e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master**.
",coveralls,2016-08-25 19:34:09
546,2016-05-26 09:26:25,"+1
",mattyod,2016-08-25 19:34:09
546,2016-10-29 08:37:42,"Hi!
Am I right that it convert svg code to one jsx-sutable ?
if it so could you, please, give a short example how to use it finally?
",UsulPro,2016-08-25 19:34:09
546,2016-11-02 18:40:03,"@UsulPro, here is an example of how I used it for a plugin to convert SVGs to React components:
https://gitlab.com/gjjones/svg-to-react/blob/master/src/utilities.js#L6
",gjjones,2016-08-25 19:34:09
545,2016-05-12 10:37:41,"on svg file 24x24

<S_CODE_TOKEN>

svgo renders 32x32 svg:

<S_CODE_TOKEN>
",a-x-,2016-05-12 10:38:22
545,2016-05-12 10:38:51,"it's my mistake: `pt` unit
",a-x-,2016-05-12 10:38:22
544,2016-05-10 19:33:47,"When using just the removeUnknownsAndDefaults option, some of my &lt;animate&gt;s are disappearing. Perhaps it's just the ones with attributeName=""offset"". For example:

<S_CODE_TOKEN>

the &lt;animate&gt; disappears. In another SVG of mine, however, the attributeName=""stop-opacity"" ones survive. My apologies if I'm misunderstanding that this is somehow intended behavior, or is actually being caused by svgomg (whose developer didn't get back to me).
",maxstarkenburg,2016-11-20 09:04:14
544,2016-11-20 09:04:14,"That was an error data. Fixed.
",GreLI,2016-11-20 09:04:14
543,2016-05-05 14:33:50,"I'm currently outputting SVGO to a generated JSX file for our React icons library. We're looking to use the JSX hooks as part of the base element's attributes.

That would look like the following:

<S_CODE_TOKEN>

Since I need the attribute value to not have wrapping quotes, I decided to make a plugin to add `className={className}` as the attribute key, and provide an empty value. This does not work, as SVGO expects attributes to have a value, and assigns an empty string when value is empty. 

The following logic is what sets that:

<S_CODE_TOKEN>

What are you thoughts on allowing attributes to be valueless? I can create a PR to allow undefined in the addAttrs helper. And here we could check that value before adding the start/value/end series to the attrs string.

I understand that allowing users to specify an attribute without a valid could result in invalid xml and would love to hear alternatives if you have them.
",gjjones,2016-11-20 08:00:40
543,2016-05-07 17:13:30,"Well, while SVG has not such attributes (at least I'm aware of), some content in `<foreignObject>` may have it, so it's worth to consider.

Note that [JSAPI.prototype.addAttr](https://github.com/svg/svgo/blob/a7624a0c438cc6ee9a1d29b4ecba0bd1ec510f0a/lib/svgo/jsAPI.js#L247) currently doesn't support adding valueless attributes either.
",GreLI,2016-11-20 08:00:40
543,2016-05-07 17:37:58,"I'm open to making a PR if it'd be useful to see
",gjjones,2016-11-20 08:00:40
543,2016-05-07 17:48:27,"You're welcome.
",GreLI,2016-11-20 08:00:40
542,2016-05-04 18:05:13,,flehoux,
542,2016-05-04 18:14:45,"I guess it should. IIRC there was some related bug.
",GreLI,
542,2016-05-04 18:28:41,"This one SVG is an example of the transform being applied to path's `d` attribute but not to the values within it's animate.

<S_CODE_TOKEN>

Which plugin should be doing the above work?
",flehoux,
542,2016-05-07 17:06:34,"It's beeing done in [plugins/convertPathData.js](https://github.com/svg/svgo/blob/master/plugins/convertPathData.js#L75)
",GreLI,
541,2016-05-02 23:44:47,"I have an element with a transform set as follow : 

<S_CODE_TOKEN>

and using svgo with convertTransform enabled breaks the transform. Problem come from the function responsible of the matrix decomposition ( `matrixToTransform()` ). 

The _wrong_ output from `matrixToTransform()` is : 

<S_CODE_TOKEN>

Unfortunately the matrix output was generated by a software so I don't know what's the real composition of it.
",ghetolay,2016-11-20 07:57:32
541,2016-11-20 07:57:32,"Actually, the current result is `scale(1 -1) rotate(60.505 293.421 -60.682)` which is right. There were related fixes, probably, you've used not the latest version of svgo.
",GreLI,2016-11-20 07:57:32
541,2016-11-21 10:14:47,"Well, my issue was submitted 6 month ago.
I can confirm it works now with the latest version `0.7.1`.

Thank You.",ghetolay,2016-11-20 07:57:32
540,2016-05-01 16:14:05,"Addition of a plugin that scans elements for `data-name` or `id` attributes and copies the value to the `class` attribute.

This is intended to be used with the Adobe Illustrator export option ""Object IDs: Layer Names"" to make it easier to get meaningful class names exported into SVGs from Illustrator.

I have a blog post that explains the intended use case: https://codingwithspike.wordpress.com/2016/05/01/css-styling-illustrator-svgs/

Since this is intended to be used with Illustrator exported SVGs, the plugin is disabled by default.

I updated the README.ru.md file with a Google translation from my english. Feel free to re-translate.
",rally25rs,2016-11-13 09:37:28
540,2016-05-01 16:15:50,"[![Coverage Status](https://coveralls.io/builds/6003512/badge)](https://coveralls.io/builds/6003512)

Coverage remained the same at 88.947% when pulling **aa5358cd31c3ba4da72c1493f4dce705ec6e27ca on rally25rs:illustratorLayerIdsToClasses** into **e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master**.
",coveralls,2016-11-13 09:37:28
540,2016-05-02 02:23:08,"[![Coverage Status](https://coveralls.io/builds/6006663/badge)](https://coveralls.io/builds/6006663)

Coverage remained the same at 88.947% when pulling **24b38aa6557f46b065f579ff2487bdd151276b70 on rally25rs:illustratorLayerIdsToClasses** into **e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master**.
",coveralls,2016-11-13 09:37:28
540,2016-08-11 18:31:09,"Can anyone comment on why some PRs (like this one) are being left open for months without any comments, but other PRs are being accepted/merged?
",rally25rs,2016-11-13 09:37:28
540,2016-08-11 19:20:54,"Yes, sorry for the delay. Unfortunately, your PR is out of scope of SVGO, and thus I cannot accept it. It just have nothing with optimization which is the purpose of SVGO.
",GreLI,2016-11-13 09:37:28
540,2016-08-11 19:35:29,"> Unfortunately, your PR is out of scope of SVGO, and thus I cannot accept it.

I think that's up for discussion if it's out of scope. (Personally, I don't really have an opinion on this.)

But since this is a plugin that can be disabled by default, I don't see a reason why it shouldn't be included if it's a reasonably common use case.
",derhuerst,2016-11-13 09:37:28
540,2016-08-11 19:40:49,"I doubt its a common use case, but it let me clean up my illustrator exported SVGs in one pass through SVGO. I can certainly find another more general SVG manipulating package and move my plugin there and pass images through 2 applications.
",rally25rs,2016-11-13 09:37:28
540,2016-08-11 19:49:00,"I think the SVGO plugin setup is a bit more complicated than necessary, but as far as I could see it, bundling SVGO for in-browser won't include unsused plugins. Therefore, I don't see a reason not to include this plugin.
",derhuerst,2016-11-13 09:37:28
540,2016-11-13 09:37:28,"Closing it since it doesn't have any relation to optimization.
",GreLI,2016-11-13 09:37:28
539,2016-04-28 08:11:54,"This PR adds a new precision scaling plugin to SVGO. This plugin scales decimal values by powers of ten to remove the decimal point from the SVG source.

The plugin accepts a single boolean parameter, `applyViewBox`. If set to `true` (and the image has with/height attributes), a viewBox will be added to the root SVG element and the original width/height values will not be scaled. This allows a client to render the scaled image at the original size. If `false` the viewBox will be omitted and SVG clients will render the image at the scaled size.

Depending on the SVG, this plugin can shave up to 10% off the compressed output, resulting in an average 2-5% reduction of SVG when gzip'd. In some files, scaling precision can lead to a larger compressed image so this plugin is deactivated by default.

| Image | Original | Compressed | Compressed (scalePrecision) | Gzip | Gzip (scalePrecision) |
| --- | --: | --: | --: | --: | --: |
| [gallardo.svg](https://dev.w3.org/SVG/tools/svgweb/samples/svg-files/gallardo.svg) | 340873 | 130918 | **124607** | 32071 | **31510** |
| [svgo.svg](https://github.com/svg/svgo/blob/master/logo.svg) | 25791 | 21679 | **21534** | 3657 | **3573** |
| [car.svg](https://dev.w3.org/SVG/tools/svgweb/samples/svg-files/car.svg) | 527014 | 200945 | **186465** | 49849 | **48909** |
## TODO:
### General
- [ ] Handle non-pixel values better in `getPrecision`/`scalePrecision`
- [ ] Finalise the list of attributes that can be scaled
### Enhancements
- [ ] Only add scaled `stroke-width` to the root element if shape/text elements use the default width
",keithclark,2016-04-28 08:13:52
539,2016-04-28 08:13:52,"Ooops! I raised this to the wrong repo. It's not ready for the main project yet.
",keithclark,2016-04-28 08:13:52
539,2016-04-28 08:13:53,"[![Coverage Status](https://coveralls.io/builds/5966562/badge)](https://coveralls.io/builds/5966562)

Coverage remained the same at 88.947% when pulling **d6ca18bf7476cc1e0156a2337560067a3d0dd1f5 on keithclark:scale-precision-plugin** into **e0ca3f09efe343b0c8c8e9df16e65f796a8ab81e on svg:master**.
",coveralls,2016-04-28 08:13:52
538,2016-04-27 13:39:20,"After running `npm test` from a fresh clone I have 137 failing tests. These are all due to the test expecting line endings to be `\r\n` yet, in my case, the compressed output appears to be returning `\n`:

<S_CODE_TOKEN>

Is this a configuration issue or does the [test script](https://github.com/svg/svgo/blob/master/test/plugins/_index.js#L30-L31) need to tidy line endings before asserting equality?
",keithclark,2016-08-20 17:42:00
537,2016-04-26 19:23:01,"I'm writing a plugin that, among other things, makes changes to transform values. I've found that my plugin throws an error when used with `moveGroupAttrsToElems`.

moveGroupAttrsToElems is correctly copying transforms from a group to each child element, but it's assigning the ""new"" attribute to the element by referencing the original instead of creating a new copy of it. This results in my plugin making changes to the same referenced transform for each element.

This PR ensures a new version of the attribute is created, fixing the issue.
",keithclark,2016-04-27 12:58:11
536,2016-04-25 12:34:20,"Hi,

I recently got this error while trying to compile 120+ SVGs. SVGO closes after 40+ with an error.
",visualcookie,2016-11-19 16:03:46
536,2016-04-25 14:19:18,"Probably, there is some error on processing one of those files. Could you find the erroneous file and report about it?
",GreLI,2016-11-19 16:03:46
536,2016-04-26 10:16:11,"Nope, it was not in the logs, sadly.
",visualcookie,2016-11-19 16:03:46
536,2016-04-26 12:46:51,"Probably reduce it to the file by binary search?
",GreLI,2016-11-19 16:03:46
536,2016-11-19 16:03:46,"Can't do anything without data. Probably there is some invalid content.
",GreLI,2016-11-19 16:03:46
535,2016-04-22 09:51:42,"Some SVGs require a license header, it'd be nice if svgo could automate the process of adding one if specified.
",nt1m,
535,2016-11-19 16:02:36,"Could you provide some information about what format it should be?
",GreLI,
535,2016-11-20 10:28:50,"@GreLI 

An example:

<S_CODE_TOKEN>

A parameter that accepts a string or a text file to append as header would fit my needs.
",nt1m,
535,2016-11-20 10:31:35,"Well, you can write a plugin for that. However, there is no sign that the comment is a license to preserve it. Like an exclamation mark in JS (`/*! some license text */`).
",GreLI,
535,2016-11-20 10:35:07,"@GreLI I'd be fine with having to regenerate the header every time SVGs are cleaned. The exclamation point is a good idea though.
",nt1m,
534,2016-04-21 13:52:25,"Source:

<S_CODE_TOKEN>

Output (with --pretty):

<S_CODE_TOKEN>

Works with `--disable=collapseGroups`, but I'd prefer not to have to use that.

Might be related to #214.
",glen-84,2016-04-25 11:03:57
534,2016-04-25 11:31:50,"v0.6.6 with the fix is out.
",GreLI,2016-04-25 11:03:57
534,2016-04-26 18:42:32,"Thank you! =)
",glen-84,2016-04-25 11:03:57
533,2016-04-19 16:09:24,"I have this image that is generated by Adobe Illustrator with the option ""preserve illustrator editing capabilities"" : https://gist.github.com/abarre/21a60e4277bde17d7807af4ba1edebb4 (input.svg)

After optimizing with SVGO, the image is corrupted : https://gist.github.com/abarre/21a60e4277bde17d7807af4ba1edebb4 (output-broker.svg)

The error is `error on line 10 at column 113: Namespace prefix i on pgfRef is not defined`

If I remove this part, it works : 

<S_CODE_TOKEN>

Note : Problem seens on svgo 0.6.3
",abarre,2016-04-24 18:29:32
533,2016-04-20 08:34:26,"Detail of the problem : https://commons.wikimedia.org/wiki/User:Quibik/Cleaning_up_SVG_files_manually
",abarre,2016-04-24 18:29:32
533,2016-04-25 11:31:35,"v0.6.6 with the fix is out.
",GreLI,2016-04-24 18:29:32
533,2016-04-25 20:35:03,"Thank you for your fix.
",abarre,2016-04-24 18:29:32
532,2016-04-14 14:14:31,"When I'm trying to optimize this flag: https://github.com/lipis/flag-icon-css/blob/master/flags/4x3/tj.svg I'm getting this as a result: https://dl.dropboxusercontent.com/u/15234/tj-svgo.svg
",lipis,2016-04-25 10:36:33
532,2016-04-25 10:37:04,"Thanks for reporting! Just another issue about passing transform and having references.
",GreLI,2016-04-25 10:36:33
532,2016-04-25 10:42:45,"Awesome! 💯 
",lipis,2016-04-25 10:36:33
532,2016-04-25 11:31:45,"v0.6.6 with the fix is out.
",GreLI,2016-04-25 10:36:33
531,2016-04-06 19:04:15,"Converting tags type (like changing `rect` to `path`), can break embedded CSS. For example: 
**Original File**

<S_CODE_TOKEN>

**Optimized File**

<S_CODE_TOKEN>

In this file the original `rect` has been changed to a `path`, consequently the style is not applied.

**Screen Shot**
![capture1](https://cloud.githubusercontent.com/assets/744035/14329291/5e351e2e-fc00-11e5-9805-409267b796ee.png)
",ben-page,2016-11-19 16:01:35
531,2016-04-06 20:41:48,"Thinking on this, I don't think the optimization should be turned off if there is are embedded styles defined for tags. Or at least not by default, an config option would be nice.

However, a warning (on the command line, when optimizing) would be very helpful. With [reworkss](https://github.com/reworkcss/css) is should be pretty easy to parse the CSS and identify if there are problematic styles defined.
",ben-page,2016-11-19 16:01:35
531,2016-11-19 16:01:35,"Actually, a lot of optimizations can break embedded styles since there can be any selector. It's a known issue that svgo doesn't understand css—parsing and applying it is a complex thing to implement.
",GreLI,2016-11-19 16:01:35
530,2016-04-05 17:27:05,"Previously seen in #409.

This is useful for cases where you are inlining `<svg>` elements - [HTML5 does not support namespaces](https://www.w3.org/TR/html5/syntax.html#foreign-elements).
",ricardobeat,2016-08-25 19:53:36
530,2016-04-05 17:43:17,"[![Coverage Status](https://coveralls.io/builds/5671689/badge)](https://coveralls.io/builds/5671689)

Coverage remained the same at 89.474% when pulling **768107b33deb6a6e8c06ad3ed372e75b680a2e00 on ricardobeat:master** into **b35d828d49e2608d889df8ccebd9d499ede37583 on svg:master**.
",coveralls,2016-08-25 19:53:36
529,2016-04-05 17:22:40,"If you run `svgo` repeatedly over a set of files it will continue to add the same class over and over:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

This commit changes `addClassesToSVGElement` to only add classes that are not already present.
",ricardobeat,2016-08-25 19:52:55
529,2016-04-05 17:41:30,"[![Coverage Status](https://coveralls.io/builds/5671614/badge)](https://coveralls.io/builds/5671614)

Coverage remained the same at 89.474% when pulling **dd8e385695fd1f5eecd234edbd4e7c6acc7cd7d6 on ricardobeat:addClassesNoRepeat** into **b35d828d49e2608d889df8ccebd9d499ede37583 on svg:master**.
",coveralls,2016-08-25 19:52:55
529,2016-04-05 17:42:13,"[![Coverage Status](https://coveralls.io/builds/5671635/badge)](https://coveralls.io/builds/5671635)

Coverage remained the same at 89.474% when pulling **dd8e385695fd1f5eecd234edbd4e7c6acc7cd7d6 on ricardobeat:addClassesNoRepeat** into **b35d828d49e2608d889df8ccebd9d499ede37583 on svg:master**.
",coveralls,2016-08-25 19:52:55
528,2016-04-05 14:14:42,"<S_CODE_TOKEN>
",vithar,2016-04-05 14:34:11
528,2016-04-05 14:33:59,"Good catch!
`font` has been moved from styling property to incorrect attribute and thus removed by `removeUnknownsAndDefaults`.
",GreLI,2016-04-05 14:34:11
527,2016-03-29 22:02:57,"Hi there,

I am using Iconic svg icons, which have ""smart"" svgs that contain `<script>` tags inside them. I need help figuring out which setting to disable. I have pasted the code below.

<S_CODE_TOKEN>

The offending code seems to come in here: `e&&i(e)`. When the .svgs are minified, that code is converted to `e&amp;&amp;i(e)`.

Thank you very much for any help you can provide!
",ethanmay,2016-11-19 15:35:03
527,2016-03-30 10:59:35,"Are you using latest SVGO version? I couldn't reproduce this behavior. Have you tried removing `//` comments before `<![CDATA[` since they're totally useless?
",GreLI,2016-11-19 15:35:03
527,2016-03-30 15:07:50,"Thanks for the quick reply. I did try removing those `//` and unfortunately it made no difference. I am gulp-imagemin, so it's possible that this is not an issue related to SVGO. Gulp-imagemin includes `imagemin-svgo@4.2.1`, which includes `svgo@0.6.3`. So it does appear to be the latest version. If it makes a difference, the `<script>` tag I mentioned above is located right before the closing `</svg>` tag.
",ethanmay,2016-11-19 15:35:03
527,2016-05-10 22:45:39,"The comments are not useless. When you use the `<script>` tag, 2 different parsers are working at the same time: the XML parser, and the JavaScript parser. Because the JavaScript parser is active, we need to hide the cdata sections from the JavaScript parser.
",hellol11,2016-11-19 15:35:03
527,2016-11-19 15:35:03,"As I said I can't reproduce this behavior and CDATA sections are preserved as is. Please provide a reduced test case if you can reproduce the behavior.
",GreLI,2016-11-19 15:35:03
526,2016-03-27 03:13:27,"I took a stab at adding an option to indent svgs for #465 
##### CLI

<S_CODE_TOKEN>
##### JS API

<S_CODE_TOKEN>

It defaults to 4 to stick with the existing convention, but hopefully provides a little more flexibility to those who are looking to have different indention settings.
",scurker,2016-03-27 07:24:32
526,2016-03-27 03:15:01,"[![Coverage Status](https://coveralls.io/builds/5559876/badge)](https://coveralls.io/builds/5559876)

Coverage increased (+0.05%) to 89.894% when pulling **3d8496033cfb94fd366612b8e2c656bedc266a9a on scurker:pretty-print-indent** into **b80944cb825036314758020926dfdb54c602e181 on svg:master**.
",coveralls,2016-03-27 07:24:32
526,2016-03-27 07:24:30,"Very nice. thanks!
",GreLI,2016-03-27 07:24:32
526,2016-04-05 15:21:10,"[v0.6.4](https://github.com/svg/svgo/releases/tag/v0.6.4) with the option has been just released.
",GreLI,2016-03-27 07:24:32
525,2016-03-24 22:33:35,,waldyrious,2016-03-27 07:26:57
525,2016-03-24 22:35:27,"[![Coverage Status](https://coveralls.io/builds/5541397/badge)](https://coveralls.io/builds/5541397)

Coverage remained the same at 89.84% when pulling **b0598a226821715c4f80c5b2747be88f7dccb3c1 on waldyrious:patch-1** into **b80944cb825036314758020926dfdb54c602e181 on svg:master**.
",coveralls,2016-03-27 07:26:57
524,2016-03-24 19:56:53,"I have several groups with paths that all contain attrs and to get as I want I have to set `Collapse Unless groups` to false (so the id on the group). When I select `move attr to parent group` it adds the fill (but not stroke) to the parent group of the first group but on the rest of the groups the fill attr remains on the paths.
",dottodot,2016-11-19 15:23:44
524,2016-03-24 20:30:29,"Sorry, I don't fully understand your issue. Could you provide some more details and examples?
",GreLI,2016-11-19 15:23:44
524,2016-03-25 08:53:06,"OK so my svg from AI is like below (path values have been remove to keep it easy to folllow

<S_CODE_TOKEN>

I make clean ids false so the groups keep there ids, make collaspe unless groups false, then select `Move attrs to parent group` which results in the following.

<S_CODE_TOKEN>

As you can see the fill attr has moved to the group for the undershorts group but on all the other paths within groups they remain on the path. So it seems that it only works if the group contains more than 1 path
",dottodot,2016-11-19 15:23:44
524,2016-04-03 16:24:08,"Ah, I understand now. `plugins/moveElemsAttrsToGroup.js` is moving attributes only of there is more than one element. I guess, because there is no profit in moving attributes if there is only one element. Probably, it's best not to move them, because if that group is empty it can be removed. So, it works as expected.
",GreLI,2016-11-19 15:23:44
523,2016-03-24 18:58:26,,lahmatiy,2016-03-24 19:04:01
523,2016-03-24 19:00:25,"[![Coverage Status](https://coveralls.io/builds/5538316/badge)](https://coveralls.io/builds/5538316)

Coverage remained the same at 89.84% when pulling **df9cd399c0bd25f6597f36c13bbd3a530c08a93b on lahmatiy:master** into **e69f0a27bea0b5dc258a42167d20009d0c21c209 on svg:master**.
",coveralls,2016-03-24 19:04:01
522,2016-03-22 14:32:59,"I'm having an issue very similar to #299 with the most recent version and it's causing me some serious issues.

The only difference is I'm using `white-space:pre` styling as well, so if there's no fix to stop the white-space removal directly, maybe you can make a rule specifically for elements with the `white-space:pre` styling?

Here's an example:

**Input**

<S_CODE_TOKEN>

**Output**

<S_CODE_TOKEN>
",shaneparsons,
522,2016-03-22 14:45:04,"It behaves the same with the ""proper"" SVG 1.1 method as well, i.e. `xml:space='preserve'`.
",shaneparsons,
522,2016-04-03 16:28:10,"Unfortunately, it's parsing time issue and thus quite complicated at the moment to solve.
",GreLI,
521,2016-03-21 17:19:02,"This is related to #497, but instead of creating a new plugin it adds an additional param to the existing `convertColors` plugin. 

Part of the issue that this addresses, if a color is defined within an SVG you can't override the color easily in CSS without manually editing the SVG. With this new param, you can automatically convert colors to `currentColor` allowing CSS overrides.

The only downside of it being a param within `convertColors`, is that it will override any other params when set to true. That's why initially `currentColor` defaults to `false`.

The only other potential change I could see is to take into account `transparent` values. I'm not sure if transparent values should or should not be converted. For my use case, if a color value is transparent we don't need it changed, but I could see it being different for someone else.
",scurker,2016-03-27 07:26:00
521,2016-03-21 17:21:48,"[![Coverage Status](https://coveralls.io/builds/5492228/badge)](https://coveralls.io/builds/5492228)

Coverage remained the same at 89.84% when pulling **97ab6c2a6e68c7bcde5cc4c66a6d4f02cbf8797b on scurker:master** into **e69f0a27bea0b5dc258a42167d20009d0c21c209 on svg:master**.
",coveralls,2016-03-27 07:26:00
521,2016-03-21 18:17:29,"@doot0 @CodeTheory Would this still help resolve your issue with currentColor in #497?
",scurker,2016-03-27 07:26:00
521,2016-03-21 18:25:49,"That's a nice one! However, it will convert not only `fill` but `stroke` as well. May be there is need in more control over the properties.
",GreLI,2016-03-27 07:26:00
521,2016-03-21 18:48:48,"@scurker Seems like it would, thank you! Hope this gets merged in.
",doot0,2016-03-27 07:26:00
521,2016-03-21 19:24:30,"@GreLI Correct, it'll convert both allowing you to convert colors for everything within css:

<S_CODE_TOKEN>

However, I could see potentially wanting more granular control over paths vs strokes. Are there any other examples of plugins that allow you to pass in an array of options?
",scurker,2016-03-27 07:26:00
521,2016-03-22 08:14:07,"I don't have strong opinion, personally. If it's ok for @doot0, I guess it's fine. From the other point view, one can have full control through the image itself by setting certaing properties

 Anyway, it's not the main svgo purpose, just a sideeffect, that can be achievied almost for nothing.
",GreLI,2016-03-27 07:26:00
521,2016-03-22 13:35:12,"[![Coverage Status](https://coveralls.io/builds/5503792/badge)](https://coveralls.io/builds/5503792)

Coverage remained the same at 89.84% when pulling **8e5706485e993267f1be7e72048e69649317c5ff on scurker:master** into **e69f0a27bea0b5dc258a42167d20009d0c21c209 on svg:master**.
",coveralls,2016-03-27 07:26:00
521,2016-07-01 19:12:35,"Nice!
",kevinSuttle,2016-03-27 07:26:00
520,2016-03-19 14:51:21,"I manually compressed file to achieve smaller file size.

Was:

<S_CODE_TOKEN>

After compression:

<S_CODE_TOKEN>

May be it is possible to write such plugin(s):

1) Remove IDs unused in this file (via option --self-contain or something similar)
2) Remove unused `<g>` after IDs removal
3) Minimize classnames or move properties from `<style>` to attrs if it would result smaller file size

Was 4411 bytes, after optimization — 2147 bytes.
",vithar,2016-11-19 15:22:16
520,2016-04-06 19:20:06,"Removing unused IDs and minifing class names would be bad. They can be referenced in external CSS or JavaScript.
",ben-page,2016-11-19 15:22:16
520,2016-04-09 14:53:31,"We can do it in plug-in disabled by default.
",vithar,2016-11-19 15:22:16
520,2016-11-19 15:22:16,"Need to teach svgo parse and understand styles for that. Quite a task, but there is some effort in #592.
",GreLI,2016-11-19 15:22:16
519,2016-03-17 16:12:56,"I am getting the message in the title when processing a folder where there are webfont.svg-files, example:  
**OpenSans-BoldItalic-webfont.svg: The file contains data of an unknown image type**

Is this because it isn't exactly an image, or do you have any information as to why this might occur? If you need any more information just ask me, and I'll try my best :)
",Torkiliuz,2016-11-19 15:19:41
519,2016-11-19 15:19:41,"Sorry, I've missed the issue. It's a complicated topic. See discussion about file type detection in #306.
",GreLI,2016-11-19 15:19:41
518,2016-03-14 11:00:15,"Hi I have spent quite nice week with SVGO and minifying SVGs. 

Firstly I have created command line tool (no problem at all)

Then I wanted to create webpage with this functionality and I have succeeded but I needed to rewrite some parts of SVGo. There was only one issue with default configuration `.svgo.yml` which is loaded by `fs` which is not in browser. 

I am asking you if you will be interested to get PR which enables SVGo to be runned in browser without issues?
",ondrejbartas,2016-11-19 15:18:01
518,2016-03-14 16:24:01,"I'm totally ok as long as it doesn't break something.
",GreLI,2016-11-19 15:18:01
518,2016-03-17 10:55:47,"it depends on how you will implement this.
",deepsweet,2016-11-19 15:18:01
518,2016-12-13 01:38:30,"+1, I still think this is a valid feature request. I've been having trouble with this myself.",alexjlockwood,2016-11-19 15:18:01
517,2016-03-14 01:17:43,"![svgo-convertpathdata](https://cloud.githubusercontent.com/assets/1940215/13732698/7f6ef26c-e9dc-11e5-8485-a107186b0986.jpg)

This SVG is a stroked donut shape:

<S_CODE_TOKEN>

Running through svgo version 0.6.1 preserves the original shape:

<S_CODE_TOKEN>

Whereas 0.6.2 loses the hole in the middle of the donut:

<S_CODE_TOKEN>

It seems to be commit 044fc3b1684fc2148fe7286adfa9ce12a0e5a479 that introduced the problem.

[bullseye.zip](https://github.com/svg/svgo/files/171303/bullseye.zip)
",felthy,2016-03-20 09:30:11
517,2016-03-16 20:29:47,"We ran into this same exact problem on my team, via gulp-svgmin. Forcing v 0.6.1 for now.
",techtolentino,2016-03-20 09:30:11
517,2016-03-20 09:31:07,"Thanks for reporting! There was an error in relative coordinates calculations.
",GreLI,2016-03-20 09:30:11
517,2016-03-20 18:21:20,"[v0.6.3](https://github.com/svg/svgo/releases/tag/v0.6.3) with the fix has been just released.
",GreLI,2016-03-20 09:30:11
516,2016-03-12 18:14:35,"Currently, I cannot use removeAttrs plugin with RegExp that match or exclude certain classes, or smth specific other then tag name. Would be really useful to be able to somehow exclude from rule certain svg  files.

I'd like to use smth like this:
'removeAttrs': {
  attrs: '._path(?!._class=""filled"").*:fill'
}
",fr-ench,
516,2016-03-20 08:50:14,"Technically, it's quite complicated and since the plugin is a byproduct by a third-party committer it's unlikely that someone will improve it.
",GreLI,
515,2016-03-11 14:33:53,"I've been testing it on the Breeze icons.

Example of svg file that breaks:
https://quickgit.kde.org/?p=breeze-icons.git&a=blob&h=3dd55bcaa991d5d159b88a9ad6aba243afcfbdd7&f=icons%2Fapps%2F32%2Fpreferences-desktop-emoticons.svg&o=plain
",aleixpol,2016-03-12 12:27:50
515,2016-03-12 12:28:33,"It wasn't expected, that someone will keep properties in `style`.
",GreLI,2016-03-12 12:27:50
515,2016-03-20 18:21:11,"[v0.6.3](https://github.com/svg/svgo/releases/tag/v0.6.3) with the fix has been just released.
",GreLI,2016-03-12 12:27:50
514,2016-03-07 20:39:26,"Calling `svgo --show-plugins` currently returns the list of available plugins in a seemingly random order; in order for users to quickly find the plugin they need, it would be great if this list was `sort()`ed alphabetically.
",Pomax,2016-03-08 13:57:52
514,2016-03-08 06:57:28,"Well, actually it's the order in which they're being applied.
",GreLI,2016-03-08 13:57:52
514,2016-03-08 13:57:24,"Not sure it's the best solution, but probably it's a little less messy indeed.
",GreLI,2016-03-08 13:57:52
514,2016-03-08 13:57:52,"Done in 57dc9aedc4a39325a22125d258d668b156e56812.
",GreLI,2016-03-08 13:57:52
513,2016-03-07 18:35:28,"I'm trying to clean up some SVG generated through MathJax, and svgo seems to rewrite essential transform and clipping information, leading to completely wrong SVGs. 

For instance, here's an original SVG:

![screenshot 186](https://cloud.githubusercontent.com/assets/177243/13579132/911331a4-e450-11e5-9972-103c295a3b52.png)

<S_CODE_TOKEN>

And here is its SVGO-cleaned version, which looks both flipped and clipped:

![screenshot 187](https://cloud.githubusercontent.com/assets/177243/13579047/47998866-e450-11e5-8cdb-9943eca60b8b.png)

<S_CODE_TOKEN>

Something's going very wrong here.
",Pomax,2016-03-08 06:55:12
513,2016-03-07 20:04:35,"While it's odd that SVGO is removing the `transform=""matrix(1 0 0 -1 0 0)""` (the part flipping the image) I'd be curious why MathJax writes everything upside down and then flips it after the fact... I'm not faimilar, perhaps their coordinate system is like Inkscape's? 
",vagari,2016-03-08 06:55:12
513,2016-03-07 20:07:55,"Yes, it's an error in `convertTransform` in the part where matrix is being decomposed (lost the sign of y-scale, therefore the error). I've got a solution, but not sure it's complete.
",GreLI,2016-03-08 06:55:12
513,2016-03-07 20:27:37,"presumably because it extracts glyphs from OpenType fonts (it doesn't render text, it does glyph composition, LaTeX style), and font coordinates are ""flipped"" compared to virtually every other graphics context. positive Y values in font units ""go up"", like on paper, rather than ""go down"" like in a Canvas2D context.
",Pomax,2016-03-08 06:55:12
513,2016-03-07 20:30:45,"Playing with the image on [SVGOMG](https://jakearchibald.github.io/svgomg/) and unchecking the ""Round/rewrite tranforms"" (`convertTransform` I presume) the transform is retained and the image is properly rendered (at least when you download the result, in my web browser nothing is displayed on SVGOMG). 
",vagari,2016-03-08 06:55:12
513,2016-03-07 20:31:22,"I'm using svgo as CLI tool, what would that option be on the command line?
",Pomax,2016-03-08 06:55:12
513,2016-03-08 06:27:32,"`--disable=convertTransform`
",GreLI,2016-03-08 06:55:12
513,2016-03-08 17:04:10,"thanks! looking forward to the new version on npm
",Pomax,2016-03-08 06:55:12
513,2016-03-08 18:12:46,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with the fix is out.
",GreLI,2016-03-08 06:55:12
513,2016-03-08 18:42:54,"awesome!
",Pomax,2016-03-08 06:55:12
512,2016-03-06 10:41:35,"Run diff on source rendered svg and resulted rendered svg After optimization.
Cancel next dangerous optimization step if diff failed
Repeat iteration opt --> diff
Return proof lossless optimized svg

Cool?
",a-x-,2016-11-19 15:16:31
512,2016-03-06 10:46:20,"Perhaps, but rendering is a heavy optimization, and it also requires heavy dependencies. Also, it doesn't guarantee that image isn't worse, since SVG rendering depends on scale. If it's not sufficient enough then some small details can be loosen. Again, too large scale still is heavy.
",GreLI,2016-11-19 15:16:31
512,2016-03-06 10:58:15,"there isn't happy in the world :) есть ещё мысль
just run special gemini cases on website after icons optimization with high sensitivity settings (targets on icons, better on only immediately oprimized icons)
It 'll be check in `real world` 

Let's automate this (svgo running then run gemini on automaticaly generated icon test cases)
",a-x-,2016-11-19 15:16:31
512,2016-11-19 15:16:31,"I believe it goes beyond the scope of SVGO. It can a script or whatever.
",GreLI,2016-11-19 15:16:31
511,2016-03-04 19:48:27,"The issue is caused because the code does a lowercase check if the color exists, but then doesn't lowercase the value when it's looked up. So an uppercase color name such as `Black` breaks the plugin.

<S_CODE_TOKEN>

Something like the following would resolve it:

<S_CODE_TOKEN>

Found using error handling improvements #510 
",daniellmb,2016-03-08 13:34:48
511,2016-03-08 13:34:59,"Thanks for catching this!
",GreLI,2016-03-08 13:34:48
511,2016-03-08 18:12:38,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with the fix is out.
",GreLI,2016-03-08 13:34:48
511,2016-03-08 18:25:00,":+1: 
",daniellmb,2016-03-08 13:34:48
510,2016-03-04 19:29:41,"When I recently tried to optimize an SVG file I got the following completely useless error.

![screen shot 2016-03-04 at 11 15 48 am](https://cloud.githubusercontent.com/assets/108018/13537599/919ab55a-e1fa-11e5-8939-93af76f60af3.png)

Currently, the plugins are run like this:

<S_CODE_TOKEN>

I propose wrapping the code with a try catch block and log useful information about failures. Perhaps something like this:

<S_CODE_TOKEN>

This would provide two enhancements. First it would display useful information for debugging/reporting issues. Secondly is would allow the process to continue and gracefully ignore failing plugins as shown below.

![screen shot 2016-03-04 at 11 23 11 am](https://cloud.githubusercontent.com/assets/108018/13537771/938acaa2-e1fb-11e5-9022-ebbf5d2c1c2d.png)

Using this information I was able to quickly find the problem in the convert colors plugin #511.

If this error handling change seems like a useful addition I can create a pull request.
",daniellmb,
510,2016-03-08 13:42:25,"Nice idea, but `group[0]` isn't the actual name of the current plugin. Each group can contain several plugins, so it's a bit more complicated then that.
",GreLI,
510,2016-03-08 16:07:16,"Right, this was more pseudo code to get the idea across... even just the stack trace would be helpful. That's what I actually used to track down what happend.
",daniellmb,
509,2016-03-04 09:37:03,"Когда обрабатываем большое кол-во файлов при помощи SVGO то иногда получаем испорченный результат. (сломанные иконки)

Подскажите список безопасных опций, которые не влияют на результат.

---

When processed a large number of files using SVGO we sometimes get spoiled result. (broken icons)

Tell me the list of safe options that do not affect the result.

[](https://github.com/CSSSR/csssr-project-template/issues/112)
",jt3k,2016-03-04 21:15:16
509,2016-03-04 18:11:51,"Да все плагины что-то делают, и в этом плане небезопасны :smiley:. Но опаснее те, что делают что-то более сложное. Вообще я стараюсь все баги чинить (и многое уже починино), так что если что-то реально портится, лучше про это сообщать.

Из последнего, что было исправлено, но ещё на выпущено в релиз: превращение в дуги в `convertPathData` #477 и некорректные переносы трансформаций, если есть маски, в `moveElemsAttrsToGroup`. Также ещё сильное округление может дать погрешности в случаях с дугами, но это редкость в «дикой природе» SVG.
",GreLI,2016-03-04 21:15:16
509,2016-03-04 21:15:16,"Спасибо за ответ :+1: 
Я тогда пофлудю в ишьюсы если наберу достаточное количество проблемных файлов.
",jt3k,2016-03-04 21:15:16
508,2016-03-01 19:30:12,"I cannot say exactly what they are, but they are referenced in #387 
",stevenvachon,2016-03-20 17:52:46
508,2016-03-20 17:56:24,"Done. It seems that «smart» rounding brought odd results sometimes, so I make it to apply only when the rounding is needed. So, in subsequent passes in `--multipass` already rounded numbers will not be modified further.
",GreLI,2016-03-20 17:52:46
508,2016-03-20 18:21:32,"[v0.6.3](https://github.com/svg/svgo/releases/tag/v0.6.3) with the fix has been just released.
",GreLI,2016-03-20 17:52:46
507,2016-02-29 01:24:49,"As a suggestion, `--pretty` should respect [`.editorconfig`](http://editorconfig.org) for formatting, particularly in regards to indentation.

`.editorconfig` is a centralized place to configure encoding and formatting for all text files in a repo, so you don't have to separately configure tools.

Often, I will `--pretty` optimize files and then open them in Atom to make manual edits. Atom conveniently respects my established SVG formatting config but SVGO doesn't, resulting in inconsistent formatting.

A benefit to respecting the config, other members from the team can jump in and start optimizing without having to ask anyone about the formatting. I don't trust everyone to laboriously follow up SVGO optimizations with manual reformatting to conform to our standards.

Ideally there would also be formatting options for the CLI that would take precedent, like how ESLint works.
",jaydenseric,
507,2016-11-19 15:13:41,"FYI, there is new option `--indent` added in 0.6.4 which allows to set number of spaces to `--pretty`.
",GreLI,
506,2016-02-26 15:00:44,"Hi,

We are having a problem with an SVG file minified with gulp-svg-min. The minified version of the file changes between running it on a Mac and running it on Windows. Not exactly sure what information is relevant here so please ask if you are wondering anything.

The file in question is here: http://pastebin.com/LY9NHtcx

We are running svgmin like this:

<S_CODE_TOKEN>

We have other SVG files that don't show this behaviour. What is common among the two files that do exhibit this behaviour is that they both have text converted to outlines. None of the other files have this. All our SVG files are created with Sketch on a Mac.

It's a bit hard to see exactly what is different between them, but they show up as changed in Git and there is more than just line endings changed. I see at least a couple different numbers in the SVG.
",terje,2016-11-19 15:12:17
506,2016-02-26 18:28:12,"Hmm, I see no problems when I'm passing this file through svgo.
",GreLI,2016-11-19 15:12:17
506,2016-02-27 07:30:43,"Ok, give me a couple days and I'll set up a reduced test for you.

## 

Terje

> On 26 Feb 2016, at 19:28, Lev Solntsev notifications@github.com wrote:
> 
> Hmm, I see no problems when I'm passing this file through svgo.
> 
> —
> Reply to this email directly or view it on GitHub.
",terje,2016-11-19 15:12:17
506,2016-02-28 14:03:03,"It would be nice of you.
",GreLI,2016-11-19 15:12:17
506,2016-02-29 10:57:34,"Sorry, I am unable to reproduce it outside of our bigger project now. Test case here: https://github.com/terje/svgo-bug-reduction

Feel free to close this issue, I will reopen or submit another if I am able to reproduce it.
",terje,2016-11-19 15:12:17
506,2016-03-08 18:07:39,"Still couldn't reproduce. However, v0.6.2 is out and there are some fixes that may help.
",GreLI,2016-11-19 15:12:17
505,2016-02-25 12:17:53,"I use [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) to optimize svg files. But everytime the viewBox gets deleted even if I explicit define that they shouldnt be removed, like seen below.

imagemin({ svgoPlugins: [{removeViewBox: false}] })
",innodeta,2016-11-19 15:11:39
505,2016-02-25 15:46:37,"`viewBox` isn't removed by SVGO by default, so it's some sort of settings error in imagemin.
",GreLI,2016-11-19 15:11:39
505,2016-04-14 11:39:56,"@GreLI got the same issue with [gulp-svgmin](https://github.com/ben-eb/gulp-svgmin). My config looks like:

<S_CODE_TOKEN>
",bm2u,2016-11-19 15:11:39
505,2016-11-15 17:20:45,"For those experiencing this issue, make sure that the `viewBox` property has proper camel-casing on the source SVG file, otherwise it will get stripped out by svgo.
",joaocunha,2016-11-19 15:11:39
505,2016-11-19 15:11:38,"Sorry, I cannot reproduce. If problem still persist try reduce to minimal test case. E.g.

<S_CODE_TOKEN>

doesn't remove `viewBox`, while changing to `""removeViewBox"": true` removes.
",GreLI,2016-11-19 15:11:39
504,2016-02-23 05:43:58,"Hey there,

We're working on getting JSPM's CSS loader all hooked up into PostCSS plugins. We would like to (easily) use CSSNano as our CSS minification plugin. CSSNano has a dependency on svgo.

Currently, JSPM does not have support for dynamic require statements (see here: https://github.com/jspm/registry/issues/221). As such, [this bit of code](https://github.com/svg/svgo/blob/master/lib/svgo/config.js#L99) is causing us some headache (discussed here: https://github.com/MeoMix/jspm-loader-css/pull/2)

It's possible to workaround this issue in a couple of ways. More than likely I'll end up forking svgo, creating static requires, and overriding the dependency, but that's not ideal nor very maintainable.

I can appreciate the appeal of using dynamic require statements, but I'd be very happy if you'd consider replacing it with the alternative.

Thanks
",MeoMix,2016-11-19 14:46:44
504,2016-02-23 08:16:52,"What are dynamic declaration and how it differs from static? How would you use plugins in that case?
",GreLI,2016-11-19 14:46:44
504,2016-02-23 15:04:26,"Hey,

Thanks for the response.

Essentially, instead of dynamically building a string which points to an unknown-until-runtime location in the `plugins` folder, all plugins which could potentially be needed should be required upfront and then only worked upon if needed.

I might be able to provide a PR at some point, but need to do some reading to make sure it works as expected. I'll end up doing that on my own fork hopefully sometime this week.

Talking to @guybedford about the issue he said:

> @MeoMix dynamic CommonJS requires are not supported because they are sync and the browser is async. Typically for these plugin patterns you want to ensure the module is already loaded by creating an async layer around it. Eg how we handle Babel plugin loading in the system-babel plugin, by first System.import'ing the plugins ourselves, then running Babel.

You can see that file here: https://github.com/systemjs/plugin-babel/blob/master/plugin-babel.js
",MeoMix,2016-11-19 14:46:44
504,2016-11-19 14:46:42,"See #614
",GreLI,2016-11-19 14:46:44
503,2016-02-23 05:30:42,,MeoMix,2016-02-23 07:55:19
502,2016-02-23 05:29:50,,MeoMix,2016-02-23 07:55:15
501,2016-02-23 05:28:32,"It's good practice to declare the file type being required. This will help svgo play nice with JSPM. Additionally, one of the requires was already declaring its file type. So, this PR adds consistency, too.
",MeoMix,2016-02-23 07:55:11
500,2016-02-20 13:29:02,"Ref: #478 

Before:

<S_CODE_TOKEN>

After:

<S_CODE_TOKEN>
",joafeldmann,2016-03-09 09:21:37
500,2016-03-08 17:02:11,"What the point of the issue? Have you tried `--multipass`?
",GreLI,2016-03-09 09:21:37
500,2016-03-08 17:16:59,"The styles

<S_CODE_TOKEN>

 should be translated to a path/fill attribute. (See ""after"" above) I tried `svgo --enable=convertStyleToAttrs file.svg`
",joafeldmann,2016-03-09 09:21:37
500,2016-03-08 17:41:50,"`convertStyleToAttrs` converts `style` attribute to separate style attributes. You likely want something like #454 which I haven't dealt with yet.
",GreLI,2016-03-09 09:21:37
500,2016-03-09 09:21:37,"That's it! Closing this as dup of #454
",joafeldmann,2016-03-09 09:21:37
499,2016-02-19 14:47:08,"Change sentence structure to make it more readable
",pra85,2016-02-19 19:03:21
499,2016-02-19 19:04:15,"Thank you for committing!
",GreLI,2016-02-19 19:03:21
498,2016-02-12 12:31:05,"I am having a problem optimizing a specific SVG. As seen in the screenshot in the lower image part there are two paths (read circles) missing:

![loosing elements](https://cloud.githubusercontent.com/assets/582546/13006746/57f00d20-d18b-11e5-8da1-9d5eee0c04e3.png)

When disabling the _convertPathData_ plugin the result is correct. See the attached zip file for before/after SVG files.

[icons.zip](https://github.com/svg/svgo/files/127976/icons.zip)
",darkv,2016-03-08 17:01:00
498,2016-03-08 17:00:35,"Fixed along with #477.
",GreLI,2016-03-08 17:01:00
498,2016-03-08 18:12:31,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with the fix is out.
",GreLI,2016-03-08 17:01:00
498,2016-03-09 13:05:57,"Cool, thanks!
",darkv,2016-03-08 17:01:00
497,2016-02-12 11:48:59,"…tyle the compiled SVGs with CSS color property
",doot0,2016-03-27 07:27:38
497,2016-02-12 11:50:02,":+1: This would be very useful for me. I currently do this manually. 
",CodeTheory,2016-03-27 07:27:38
497,2016-02-12 18:40:26,"Not sure, this plugin should be in SVGO. Besides, it has quite odd parsing and doesn't follow the code-style. (You can somewhat check it with `make jshint` command.)

However, there is a plugin [convertColors.js](https://github.com/svg/svgo/blob/master/plugins/convertColors.js). It already has color parsing (while I'm not sure you're really need it) and you can just add an option to convert `fill` to `currentColor`. I think it's the best way.
",GreLI,2016-03-27 07:27:38
497,2016-03-27 07:27:37,"#521 done it.
",GreLI,2016-03-27 07:27:38
496,2016-02-09 17:37:29,"When minifying SVGs the compound circle with cross inside is being inverted and leaves only cross visible.

I'm using:
- SVGO version: `0.6.0`
- grunt-svgmin version: `3.1.2`

Following plugins are disabled (should I disable any other?):

<S_CODE_TOKEN>

[Original SVG](https://gist.github.com/skmasq/c7a18a91da3f17458f8d) (File is compatible with Illustrator)
[Minified using SVGO](https://gist.github.com/skmasq/524f1ede47c1b4bfc23a)
",skmasq,2016-02-09 17:47:47
496,2016-02-09 17:47:47,"Fixed issue adding: `{convertPathData: false}`
",skmasq,2016-02-09 17:47:47
496,2016-03-08 16:24:02,"Definitely a bug in v0.6.1 which is already fixed.
",GreLI,2016-02-09 17:47:47
496,2016-03-08 18:12:22,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with the fix is out.
",GreLI,2016-02-09 17:47:47
495,2016-02-08 22:42:51,"Looking through the code I did not find a way to add a custom plugin without wrapping the svgo command in my own command line tool. I tried to use a YAML config file and JSON config file but the parser never saw my fn: declaration as a JS function. Is there a way to easily tell svgo here is my custom plugin JS file?

Thanks
",supercodepoet,2016-02-28 22:07:28
495,2016-02-09 14:01:14,"Well, the plugin should be in a `plugins` folder of SVGO and has to be listed in `plugins` option. That's how it works for now.
",GreLI,2016-02-28 22:07:28
494,2016-02-08 18:37:25,"is it possible to add a plugin that would remove the id attr from an element and map it to a class with an optional prefix and / or postfix?
#### For example

<S_CODE_TOKEN>

would map:

<S_CODE_TOKEN>

to:

<S_CODE_TOKEN>
#### Additionally:

This:

<S_CODE_TOKEN>

would map to:

<S_CODE_TOKEN>

My reason is that Group and path names in Adobe Illustrator come out as IDs when you save as an SVG but if you insert the resulting SVG into an HTML doc more than once it will invalidate the document because it will have more than one element with the same ID 

Thoughts?
",infn8,
494,2016-02-09 13:58:04,"Well, it's totally possilble. Couple of caveats though:
1. `cleanupIDs` will remove unused IDs. So, the plugin should run before it, or `cleanupIDs` needs to be disabled, if these IDs aren't being referenced. If they are, references should also be updated of course.
2. SVGO cannot parse CSS for now. So, replacing IDs there requires some additional managing.

May be it's better just to update `cleanupIDs` to work in a such manner through option.
",GreLI,
494,2016-02-09 15:30:57,"It would for sure need to run before `cleanupIDs` but after it does run `cleanupIDs` would have no IDs to cleanup.  

Re: CSS, I was thinking a little more brute force in that each element would only care about itself.

<S_CODE_TOKEN>

Then remove id attribute and that's it.  No need to parse CSS.  But if we can add elegance or intelligently extend another function that would be boss.  Adding it as a param to `cleanupIDs` would ensure it ran first!  

Thoughts?
",infn8,
494,2016-02-09 18:38:21,"No doubts about `class` content. I was talking about selectors in possible `<style>` declarations that can use IDs.
",GreLI,
494,2016-02-09 19:34:16,"Great point!  I had not thought of that.  It could just be a documented shortfall of that option.  Are there any other features you're considering that might need, or benefit from, CSS parsing?  

This doesn't seem like the cost benefit is there with this one feature on its own.
",infn8,
494,2016-02-09 21:00:58,"Yeah, CSS parsing is desirable feature. At least for checking styles. It's important to know in some places whether there is `fill` or `stroke` property for example. [There is already a method](https://github.com/svg/svgo/blob/master/lib/svgo/jsAPI.js) `computedAttr` but it checks only for (perhaps inherited) attributes for now.

Of course, there could be some optimizations. E.g. remove useless styles, move styles used only once to corresponding element (it should be shorter usually) — there is already PR #454, or if there a bunch of repeated styles assign it to a class.

Unfortunately, it requires some work which I have no time for. Parse CSS, construct AST, bind with DOM, etc…
",GreLI,
494,2017-02-02 21:36:06,"If you remove IDs, how do you use a `<use xlink:href=""#arrow-right"" />` type of reference?",dangayle,
494,2017-02-04 03:41:51,@dangayle I don't think you could but the reason i want to strip ids is because i plan on using the same svg in the dom in several places and best practices say that your ids should all be unique. You would have to decide whether or not you would need to use references like that before stripping the ids.,infn8,
493,2016-01-26 17:55:30,"When **`convertShapeToPath`** plugin was disabled, SVGO did not perform rounding for points in `<polygon>` objects.

I guess this is because the polygon object doesn't get converted to `<path>`, then the plugin `convertPathData` failed to pick it up.

Is `convertShapeToPath` required for all kind of floating point rounding? It should be clarified at homepage to reduce confusion.
",kevinlaw91,2016-09-13 08:56:26
493,2016-01-26 18:42:38,"Actually, there is [/plugins/cleanupNumericValues.js](https://github.com/svg/svgo/blob/master/plugins/cleanupNumericValues.js), but it doesn't process `points`, yes. I guess, it's good place for enhancing.
",GreLI,2016-09-13 08:56:26
493,2016-01-26 18:51:58,"Yes this is important. This is affecting not just `points`, but other attributes like `viewBox` too.
",kevinlaw91,2016-09-13 08:56:26
493,2016-09-13 08:56:26,"Unable to reproduce this any more. Closing this.
",kevinlaw91,2016-09-13 08:56:26
492,2016-01-26 09:52:53,"While building my site with Foundation 6 which uses imagemin plugin I noticed that my svg-defs.svg file was broken. I have used [svgstore](https://github.com/w0rm/gulp-svgstore) to create the file in question.

The source file:
`<svg xmlns=""http://www.w3.org/2000/svg""><symbol viewBox=""0 0 28.6 36"" id=""shape-mr-symbol""><title>mr-symbol</title><path d=""M1.4 13.3c1.3 2.2 2.8 4.2 4.5 6.1.1.2 1.3.2 1.2.1C6 15.7 4.7 12.1 5.3 8.1l-1.2.3c2.3 2.6 3.5 5.8 4.5 9.1 0 .1 1.2-.3 1.2-.6-.5-5.3-1.6-13 3.3-16.6l-.9.4c4.9 10.9.6 23.9 0 35.3l1.1-.7c-1.8-4.8-.5-10.9.6-15.8S19 1.3 26 7.3c5.3 4.6-4.1 9.7-7.8 10.9-5.6 1.7-11.9 3.4-17.7 3.1L0 22.6c2.1 0 4.1-.6 6.1-1 2.7-.5 5.7.2 8.3 1.1 4.5 1.5 8.3 5.9 9.6 10.3l.4-1.3c-.7.3-1.4.4-2.1.3-.3-1.3.1-2.1 1.2-2.4 1.2-.7 2.8-1 4.2-1.5.2-.1 1-.8.9-.8-2.6.1-6.5.7-7.5 3.6-.8 2.3 1 2.6 3 2.2.3-.1.4-1.1.4-1.3-1.2-4.1-4.1-7.2-7.7-9.5-2.3-1.4-4.9-1.9-7.5-2.1-3-.3-5.8 1-8.8 1-.3 0-.5 1.3-.4 1.3 5.1.3 9.7-1.3 14.6-2.3 2.9-.6 5.7-1.4 8.2-3C26.4 15 30.7 8.7 26 5.7c-4.3-2.8-8.8 2.5-10.4 5.8-2.1 4.4-3.1 9.5-3.8 14.3-.4 3.2-.8 7 .4 10.2 0 .1 1.1-.5 1.1-.7.7-11.3 4.9-24.4.1-35.3-.1-.2-.8.3-.9.4-5.3 3.9-4.4 11.3-3.9 17.1l1.2-.6c-1-3.3-2.2-6.3-4.5-8.9-.1-.1-1.2.1-1.2.4-.6 3.9.5 7.3 1.8 11 .4 0 .8.1 1.2.1-1.9-1.7-3.6-3.6-5-5.7-.1-.2-.9-.9-.7-.5z""/></symbol><symbol viewBox=""12 -12 48 48"" id=""shape-point-current""><title>point-current</title><circle id=""point-current-outer"" fill=""currentColor"" class=""point-current-outer"" cx=""36"" cy=""12"" r=""18""/><circle id=""point-current-iner"" class=""point-current-iner"" cx=""36"" cy=""12"" r=""12""/></symbol><symbol viewBox=""12 -12 48 48"" id=""shape-point""><title>point</title><circle class=""st0"" cx=""36"" cy=""12"" r=""12""/></symbol></svg>`

Resulting file: `<svg xmlns=""http://www.w3.org/2000/svg"">`
",markorosic,2016-01-27 17:27:22
492,2016-01-26 16:28:29,"The problem is SVGO doesn't keep unused symbol in file. Try disable `cleanupIDs` plugin and try again.
",kevinlaw91,2016-01-27 17:27:22
492,2016-01-26 17:33:52,"Thanks, it did the trick.
",markorosic,2016-01-27 17:27:22
491,2016-01-20 22:13:45,"Is it possible to calculate viewbox similar to getBBox() with SVGO, if it not exists in svg input file and write it back?
",iskiselev,2016-02-28 22:05:48
491,2016-01-21 09:25:35,"Well, there is some implementation for `path` in [plugins/transformsWithOnePath.js](https://github.com/svg/svgo/blob/master/plugins/transformsWithOnePath.js). However, it works only with relative commands (turn off `utilizeAbsolute` in `plugins/convertPathData.js`). For other basic shapes I believe implementation is trivial.

But write it back to where? If you mean `viewBox` attribute it has default value `0 0 width height`.
",GreLI,2016-02-28 22:05:48
491,2016-08-27 14:47:49,"Just for a note, that question seems to be relative to https://github.com/svg/svgo/issues/548
",ArmorDarks,2016-02-28 22:05:48
490,2016-01-19 22:50:16,"Optimized version of [1] doesn't show gradients.
An inspection using inkscape, shows the gradient vector far away from where it should be.

Passing `--disable=convertPathData` displays as expected.

[1] http://quickgit.kde.org/?p=plasma-framework.git&a=blob&h=21776986ff19cd9ce6ad35ccec2dca9f43547e20&f=src%2Fdesktoptheme%2Fbreeze%2Ftranslucent%2Fdialogs%2Fbackground.svgz&o=plain
",aleixpol,2016-03-08 16:55:17
490,2016-01-20 13:12:31,"Actually, I don't see a difference in any browser.
",GreLI,2016-03-08 16:55:17
490,2016-01-20 14:00:55,"Correct, this is only happens after I pass `--disable=convertStyleToAttrs`, that I need to enable to ensure #489 doesn't affect.
",aleixpol,2016-03-08 16:55:17
490,2016-03-08 16:55:10,"Doesn't reproduce after fixing #489.
",GreLI,2016-03-08 16:55:17
489,2016-01-19 17:59:48,"I've found that the optimization process has some issues when converting the style. We've experienced this issue in a couple of places.

Here's an example: http://quickgit.kde.org/?p=plasma-framework.git&a=blob&h=29e74c0f31838fc123fc4a30eddd9d4d7acd61b1&f=src%2Fdesktoptheme%2Fbreeze%2Fwidgets%2Ftasks.svgz&o=plain

When optimizing this one, some components will apply the following change:

<S_CODE_TOKEN>

into

<S_CODE_TOKEN>

With these changes, we lose the fill: currentColor property, leaving the element color-less.

Passing `--disable=convertStyleToAttrs` fixes the issue.
",aleixpol,2016-03-08 16:51:40
489,2016-01-20 13:15:23,"I see `fill=""currentColor""` (right after `opacity="".3""`) in your example as well as in the test file.
",GreLI,2016-03-08 16:51:40
489,2016-01-20 13:57:23,"You are right, my assessment was wrong. Nevertheless, the representation is still different:

![](http://i.imgur.com/cOS0OW5.png)
",aleixpol,2016-03-08 16:51:40
489,2016-03-08 16:52:09,"Well, SVGO doesn't support embedded styles in SVG for now.
",GreLI,2016-03-08 16:51:40
489,2016-03-08 18:11:59,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with the fix is out.
",GreLI,2016-03-08 16:51:40
488,2016-01-18 17:03:12,"See https://medium.com/@larsenwork/598815d74f9c for reference - the author saved a lot of space by scaling the SVG paths up until he had round numbers (with a loss of n% accuracy) and increasing the scale of the viewBox accordingly.

It should be possible to automate this process.
",atk,2016-01-20 13:16:57
488,2016-01-18 17:08:43,"Related/duplicate of https://github.com/svg/svgo/issues/293.
",paperboyo,2016-01-20 13:16:57
488,2016-01-20 13:16:57,"Yep, it is.
",GreLI,2016-01-20 13:16:57
487,2016-01-18 13:38:50,"You can validate this by adding a counter to the optimize method:

<S_CODE_TOKEN>

And passing erroneous input (such as some Ruby code):

<S_CODE_TOKEN>

Here is some code that can reproduce this error:

<S_CODE_TOKEN>

Ideally the module should return immediately upon encountering an error and refuse to parse any more input.
",ben-eb,2016-02-28 22:04:37
487,2016-02-28 22:04:37,"There were recent improvements on error handling, so it seems to me to be called once.
",GreLI,2016-02-28 22:04:37
486,2016-01-16 12:46:46,"Handle data URI scheme containing optional charset field like `data:image/svg+xml;charset=US-ASCII,%3C%3Fxml%20...` .
",holymonson,2016-01-16 13:10:59
485,2016-01-12 18:25:31,"I'd love to see js2svg and svg2js exposed as API, ideally as own module. As far as I can see this has been done with some work on [svgp](https://github.com/svg/svgp), although it seems to have stalled. This would yield the possibility to enable other offspring, say a type of `svglint`.

I'd be interested in helping to get this off the ground, if this is seen as the way forward for svgo.
",marionebl,2016-11-19 14:58:30
485,2016-01-13 14:38:33,"Yeah, it of course planned to do so and rewrite svgo architecture completely. However, it requires a bunch of work, and I don't like API in svgp in the current state.
",GreLI,2016-11-19 14:58:30
485,2016-01-13 17:47:55,"If you outline the work that is planned for svgp i'd be more than happy to help!
",marionebl,2016-11-19 14:58:30
485,2016-11-19 14:58:30,"It's not the current problem but certainly will be considered when (and if) there'll be a rewrite.
",GreLI,2016-11-19 14:58:30
484,2016-01-12 01:52:30,"Hi, I'm using gulp-svgmin, which uses svgo, and when I run an svg through `cleanupIDs` with the `prefix` option, it prefixes the `id`s on `mask` elements, but not the `id`s on `path` or `g` elements. I've attached an example of input and output. 

I'd really appreciate a fix. Let me know if there's anyway I can help debug it.

svgo version: `0.5.6`
gulp-svgmin version: `1.2.0`
node version: `0.12.7`

options (passed to gulp-svgmin):

<S_CODE_TOKEN>

[svgo-cleanup-ids-bug-example.zip](https://github.com/svg/svgo/files/86666/svgo-cleanup-ids-bug-example.zip)
",mxdubois,2016-11-19 14:55:49
484,2016-03-08 16:18:26,"It seems, that you have provided wrong config. `plugins` in config is an array of objects which define every plugin separately. E.g.:

<S_CODE_TOKEN>
",GreLI,2016-11-19 14:55:49
484,2016-03-08 16:19:10,"However, I don't exactly know how gulp-svgmin works with config.
",GreLI,2016-11-19 14:55:49
483,2016-01-10 22:03:05,"Here's a screenshot what happens to the attached .svg file when I run `svgo` with default options:

![svgo-bug](https://cloud.githubusercontent.com/assets/189964/12224284/5e26d8fe-b7f5-11e5-846e-a2f5dc5cf5c1.png)

Note that the text is not `<text>`, just paths.

If I disable `convertPathData`, everything is ok. I assume the problem has something to do with the `scale` transform in the paths. There is no stroke width specified, but scaling should affect the default, too.

The original file has items such as:

<S_CODE_TOKEN>

[Here's the original and minified SVG file.](https://github.com/svg/svgo/files/85196/svg-files.zip)
",tuomassalo,2016-03-08 16:14:43
483,2016-03-08 18:11:32,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with the fix is out.
",GreLI,2016-03-08 16:14:43
482,2016-01-09 15:10:18,"Would be useful if parse errors included line number (column too if possible).

It's currently hard to debug errors in large SVG files as there's no indication of where the parse error is.
## 

https://github.com/sindresorhus/grunt-svgmin/blob/0a71db372f1e77fbc5d565e60310fdc18a8af061/tasks/svgmin.js#L20
",sindresorhus,2016-02-07 21:40:13
482,2016-03-08 18:11:22,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) now shows parser error. Enjoy!
",GreLI,2016-02-07 21:40:13
481,2016-01-08 00:15:01,"SVGO v0.6.1 fails to completely draw this box-shaped path - note the missing piece in the upper-left corner.

![screenshot 2016-01-07 19 11 46](https://cloud.githubusercontent.com/assets/283842/12186648/dd609b76-b572-11e5-9a7d-60b2def1f8ee.png)

SVGs to reproduce:

Input:

<S_CODE_TOKEN>

(Incorrect) output:

<S_CODE_TOKEN>

(Manually) corrected output:

<S_CODE_TOKEN>

I simply ran `svgo` from the command line, no extra options.

(Note that in the corrected version, I changed `164z` to `168.5z`.)
",nolanlawson,2016-11-19 14:55:27
481,2016-01-13 14:35:56,"That's interesting case, because, if you remove `v-164` (`z` will do the job) or replace it with `L130.395 74.133` (like the first `M`)–then it would be like the original one. However, the relative `lineto` command gives such a result. It seems that it's a particularity (or even a bug) of an edge case of stroke drawing.

I don't have a solution for this except removing that last line segment which would be completed by `z` anyway. But there are cases when a path ends not with a straight line.
",GreLI,2016-11-19 14:55:27
481,2016-01-15 02:04:27,"Interesting; just thought I would let you know. :) It's not too hard to manually correct.
",nolanlawson,2016-11-19 14:55:27
480,2016-01-06 23:02:26,"I added the fix, and a test to reproduce this issue.

When you call SVGO with a precision value different than 0, and then (in the same script) you call it with precision 0, an error like this is thrown:

<S_CODE_TOKEN>

This little thing might seem pointless (why anyone would do that, right?), but is preventing SVGOMG to use `""floatPrecision=0""` in its UI.

Please tell me if I missed anything.

Cheers!
",DanReyLop,2016-01-13 14:18:10
480,2016-01-06 23:10:05,"On a side note, Travis is configured to run against Node `0.10` and `0.12`. Is there any specific reason for that? Can we bump it to `0.12`, `4` and `stable`?
",DanReyLop,2016-01-13 14:18:10
480,2016-01-07 07:56:06,"Probably, it's again some incorrectly preserved settings like I fixed in 614bc00d77eee6c0ebdc4b118c9c77ccbae1d901. Have you used recent version of svgo?
",GreLI,2016-01-13 14:18:10
480,2016-01-07 10:34:30,"I've cloned the last commit on `master`, it's still happening.
",DanReyLop,2016-01-13 14:18:10
480,2016-01-13 14:18:36,"Thanks for the test case! Fixed it a bit differently.
",GreLI,2016-01-13 14:18:10
480,2016-01-13 21:53:29,"Fine for me.
I still think that the difference in performance is negligible, but your solution is also cleaner :)
",DanReyLop,2016-01-13 14:18:10
479,2016-01-06 18:23:02,"Using [this as input](http://kaspar.h1x.com/arduino-original.svg) with this config:

<S_CODE_TOKEN>

`svgo arduino-original.svg --config=config.yaml -o -` will output nothing and give an exit status of 0. 
`svgo arduino-original.svg --disable=addClassesToSVGElement  --config=config.yaml -o -` will work fine.
",kasbah,2016-03-08 15:30:33
479,2016-03-08 15:31:49,"Well, you should look what are you using. `addClassesToSVGElement` needs to get somewhere a class name to add.
",GreLI,2016-03-08 15:30:33
479,2016-03-08 19:57:40,"Fair enough, my issue was with the exit status but it looks like you fixed that (though I haven't tested it).
Cheers!
",kasbah,2016-03-08 15:30:33
478,2016-01-06 18:16:41,"- [original](http://kaspar.h1x.com/arduino-original.svg)
- [without moveElemsAttrsToGroup](http://kaspar.h1x.com/arduino-noElemAttrToGroups.svg)
- [with moveElemsAttrsToGroup](http://kaspar.h1x.com/arduino-ElemAttrToGroups.svg)

Config used: 

<S_CODE_TOKEN>
",kasbah,2016-11-19 14:54:57
478,2016-01-07 07:57:45,"There are `<style>` tags, svgo doesn't understand them unfortunately for now.
",GreLI,2016-11-19 14:54:57
478,2016-11-19 14:54:57,"Actually, as of version 0.7.1 I see no differences with the original. Turning the plugin on and off makes no difference.
",GreLI,2016-11-19 14:54:57
477,2016-01-05 21:34:21,"Original icon:
<img width=""423"" alt=""2016-01-05 3 31 57"" src=""https://cloud.githubusercontent.com/assets/2639151/12128250/a89688cc-b3c1-11e5-8842-e726181d306d.png"">

<S_CODE_TOKEN>

After compressed (using 0.6.1):
<img width=""419"" alt=""2016-01-05 3 33 00"" src=""https://cloud.githubusercontent.com/assets/2639151/12128259/b4ffb49e-b3c1-11e5-9816-a75c787c79a3.png"">

<S_CODE_TOKEN>

But after I added parameter `--disable=convertPathData` everything is good now.
If anyone can help with this issue would be great!
",jackycute,2016-01-06 10:57:27
477,2016-01-06 11:02:03,"Thanks for reporting! That was a nasty NaN with unexpected output result.
",GreLI,2016-01-06 10:57:27
477,2016-01-06 14:34:03,"Such quick response!
Thx a lot, I like svgo very much.
",jackycute,2016-01-06 10:57:27
477,2016-03-08 18:10:24,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with the fix is out.
",GreLI,2016-01-06 10:57:27
476,2016-01-04 14:41:31,"Makes external entities declared in doctype known to the sax parser in svgo. This allows the source file to be saved in illustrator with preserved editing capabilities. Added a very basic test to check and sample file to check whether the parser runs through. Shouldn't have too many side effects. 

Note: there are activities around entity parsing going on in the sax parser itself, see https://github.com/isaacs/sax-js/pull/162. But it doesn't seem to have high priority. I think putting a (maybe temporary) fix in svgo is useful because the workflow Illustrator -> SVG -> SVGO -> Grunt Webfont is quite common.
",kaij,2016-01-04 17:22:25
476,2016-01-04 17:23:24,"Thanks for contribution! I was simultaneously thinking in the same direction.
",GreLI,2016-01-04 17:22:25
475,2015-12-29 04:09:51,,yandavid,2016-01-04 16:45:05
475,2016-03-04 18:04:04,"I don't know, actually what this test for. I've reworked some issues with errors and parsing errors now just show error instead of throwing (not released yet). However, `error` attribute is still being passed to callback.
",GreLI,2016-01-04 16:45:05
474,2015-12-28 09:05:08,,yandavid,2015-12-28 11:59:19
473,2015-12-28 01:31:59,,yandavid,2015-12-28 07:29:38
473,2015-12-28 07:30:01,"Thanks for catching this!
",GreLI,2015-12-28 07:29:38
472,2015-12-24 14:47:41,"[#What it can do](https://github.com/svg/svgo#what-it-can-do) expose all the plugins currently available. As a first-time users, I want to know was what is on/off at normal usage `$ svgo <file.svg>`. The current section deserves to be more clean on this side.
",hugolpz,
472,2016-02-04 07:58:05,"+1
",defaude,
472,2016-04-14 19:36:13,"+1
",bm2u,
471,2015-12-14 17:54:29,"I'm using gulp-imagemin to optimize images in our application. 
Until recently we didn't have problems with the optimization of SVG, but now we are seeing that we have problems with the gradients in our SVG files when they are optimized.

I've submitted the original and optimized files below. But I've narrowed the problem to the `transform2js()` function in `_transforms.js`. In fact the problem is the transformation of the `gradientTransform` attribute that is represented with `matrix(a, b, c, d, e, f)` into basic transformations (`scale()`, `translate()`, `rotate()`) .
## Files
### --- Original SVG ---

<S_CODE_TOKEN>
### --- Optimized SVG ---

<S_CODE_TOKEN>
",Nightcreap,2016-03-08 14:49:18
471,2016-03-08 14:49:18,"It's the same issue as #513.
",GreLI,2016-03-08 14:49:18
471,2016-03-08 18:10:10,"[v0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with the fix is out.
",GreLI,2016-03-08 14:49:18
470,2015-12-08 14:53:41,"I know this has been discussed before and you didn't like it, but I would also be interested to have a requirejs / browserify support. 

For a single page application built with gulp and browserify the plugins are not included. I guess the problem araises in Config, where the plugins are loaded with a parameter, which browserify is blind for... 

EXTEND({}, require('../../plugins/' + item));

I would love to see a dedicated Config that supports loading with browserify. 

Last and absolutely not least: The library you wrote, is just amazing! Good work, go on :-)
",wauwau0977,2016-11-19 14:46:52
470,2016-11-19 14:46:52,"See #614.
",GreLI,2016-11-19 14:46:52
469,2015-12-04 13:10:42,"I'm using `svgmin` with the `svgo` plugin `removeAttrs`.

The [documentation](https://github.com/svg/svgo/blob/master/plugins/removeAttrs.js) seems to suggest that this should work:

<S_CODE_TOKEN>

But for some reason the script doesn't run at all when it's formatted like that. It works if I format it like this:

<S_CODE_TOKEN>

Am I reading the documentation wrong, or is there an issue in the script? In case of the former, it might be good to include the above working example verbatim. 

Thanks! Love svgo!
",jasmussen,2016-02-28 20:53:18
469,2015-12-04 15:35:05,"There is `attrs` option, that you forgot. E.g. not

<S_CODE_TOKEN>

but

<S_CODE_TOKEN>
",GreLI,2016-02-28 20:53:18
469,2015-12-04 18:56:40,"Correct. And like I mentioned, it works when I write `{ removeAttrs: { attrs: 'fill' } }`, but that's not mentioned in the documentation anywhere. May I offer a PR to update the documentation? Right now `{ removeAttrs: 'fill' },` doesn't work at all, though that's what seems to be the suggested use.
",jasmussen,2016-02-28 20:53:18
469,2015-12-04 18:58:53,"I didn't noticed where is the error, but if you found it, it would be nice of you to make PR.
",GreLI,2016-02-28 20:53:18
469,2015-12-07 12:39:37,"Tried making a PR, but seems I don't have permissions to push PRs. In any case, the change to the documentation is very small. Here's an updated file:

https://cloudup.com/czB43eIAPOH
",jasmussen,2016-02-28 20:53:18
468,2015-12-03 19:00:50,"Input SVG:

<S_CODE_TOKEN>

(The above svg is the [Appuri, Inc](http://www.appuri.com/) logo and copyrighted thereof)

Result:

<S_CODE_TOKEN>

The `<mask>` tag is getting stripped, changing how the SVG looks.
",nathanboktae,2015-12-03 21:01:48
468,2015-12-03 19:09:36,"Well, the actual output is

<S_CODE_TOKEN>

and I see no difference there. And there is no `<symbol>`, btw.

Regarding  the mask, it's being stripped since it's not used, and thus stripping can has no effect.
",GreLI,2015-12-03 21:01:48
468,2015-12-03 21:01:48,"Ah yes, it's not referenced, so you are right, it has no effect (my mistake). The `symbol` was there because I was using `svg-sprite`. Thanks for the quick response.
",nathanboktae,2015-12-03 21:01:48
467,2015-11-30 13:46:02,"Not sure if this isn't by design, but:

<S_CODE_TOKEN>

This is a common trick (http://stackoverflow.com/a/12025098/530394) to emulate `filter: blur` in Firefox <35.

I'm sure there is a rationale behind this behaviour, but can it be disabled by enabling one of the plugins?
",Flackus,2015-11-30 16:56:38
467,2015-11-30 16:08:09,"Filter is not used, that's why it's being removed. Disable `removeUselessDefs` plugin to prevent this.
",GreLI,2015-11-30 16:56:38
467,2015-11-30 16:22:11,"Thanks :+1: 
It was rather obvious :flushed: 
",Flackus,2015-11-30 16:56:38
466,2015-11-26 23:45:00,"I was attempting to pass JSON for the `config` option because JSON is much easier to create/parse than yml. Before I found the example in #361, I tried passing this:

<S_CODE_TOKEN>

SVGO silently failed. Nothing was returned by the CLI: no error message, no warnings, etc. That should probably not be the case. If SVGO doesn't like the config file, it should tell you so.
",bdkjones,2016-02-07 21:00:24
466,2016-03-08 18:09:29,"[0.6.2](https://github.com/svg/svgo/releases/tag/v0.6.2) with some improvements is out.
",GreLI,2016-02-07 21:00:24
466,2016-03-08 18:13:44,"Thanks!
",bdkjones,2016-02-07 21:00:24
465,2015-11-26 18:48:50,"Fixes #424 (almost 6K saved from the tests :dancer:)
",lipis,2016-03-27 07:25:03
465,2015-11-26 19:07:21,"Not sure how to resolve this test: https://travis-ci.org/svg/svgo/jobs/93412457
",lipis,2016-03-27 07:25:03
465,2015-11-26 19:13:06,"I think it should be an option, not the hardcoded change.
",GreLI,2016-03-27 07:25:03
465,2015-11-26 19:20:54,"I thought about it as an option.. but then again it doesn't make much sense :) It's still pretty and smaller.. Let's sleep on and see tomorrow.. :night_with_stars: 
",lipis,2016-03-27 07:25:03
465,2015-12-17 04:57:50,"Would love to see this as an option. I'd love for 2 spaces, though I'm sure there's people who prefer actual tab characters or 4 spaces. :ok_hand: 
",levibuzolic,2016-03-27 07:25:03
465,2015-12-17 09:07:35,"I'm not sure how to add it as an option (not much time for it), but my opinion is that there is no much need for it to add the extra complexity.. having said that if anyone want's to contribute.. please do so! I just want to be able to use the 2 spaces :)
",lipis,2016-03-27 07:25:03
465,2015-12-17 09:08:06,"If we are about to merge this one though... let me know how can I fix the last test..
",lipis,2016-03-27 07:25:03
465,2016-01-13 14:23:28,"I'd also love the change the indent level to 2
",febLey,2016-03-27 07:25:03
465,2016-01-24 14:06:25,"shall we merge that one?
",lipis,2016-03-27 07:25:03
465,2016-01-24 15:50:58,"See https://github.com/svg/svgo/pull/465#issuecomment-159978721:

> I think it should be an option, not the hardcoded change.
",GreLI,2016-03-27 07:25:03
465,2016-01-24 16:04:17,"Can someone implement this then if anyone with spare time? 
",lipis,2016-03-27 07:25:03
465,2016-03-27 03:25:54,"With #526, I added the ability to pretty print svgs with an optional indent level. There really wasn't an existing (good) place to write the test for this, but I wanted to at least implement something.
",scurker,2016-03-27 07:25:03
465,2016-03-27 07:25:03,"Closed in favor of #526.
",GreLI,2016-03-27 07:25:03
465,2016-04-05 15:21:26,"[v0.6.4](https://github.com/svg/svgo/releases/tag/v0.6.4) with `--indent` option has been just released.
",GreLI,2016-03-27 07:25:03
465,2016-04-05 18:39:25,":+1:
",lipis,2016-03-27 07:25:03
464,2015-11-25 04:06:06,"When you run the `-v` command on SVGO from the command line, the version string is printed to `stderr` instead of `stdout`. That's not expected; the version command ran successfully so the output should go to `stdout`. 

This matters for folks trying to integrate SVGO into other processes/build-tools/apps. Thanks.
",bdkjones,2015-12-28 11:59:20
463,2015-11-24 17:47:15,"Is it possible to process more than one file? If so how can it be done?  Or how about whole directories?

this doesn't seem to work...
 files: {  
                'dist/wonkhe-main-logo.svg':'assets/img/wonkhe-main-logo.svg',
                'dist/wonkhe-site-icons.svg':'assets/img/wonkhe-site-icons.svg'
            }
",v3nt,
463,2015-11-24 18:55:44,"Pull requests are always welcome :wink:.
",GreLI,
463,2016-01-15 19:56:35,"Processing multiple files at the same time would be a real time saver.
",pauldraper,
462,2015-11-23 18:10:37,,lencioni,2015-11-23 18:50:57
461,2015-11-20 20:21:48,"Since updating to 0.6.0 svgo seems to ignore some of my svg files. When executing something like ""svgo test.svg test.min.svg"" there's no output at all. Optimizing still works with other files, but I can see no pattern here. When reverting to 0.5.6 everything works fine again.
Is there any debug option to figure out what goes wrong?
",mcfly83,2015-11-21 10:53:24
461,2015-11-21 08:53:05,"It's likely some error. Could you provide a sample file?
",GreLI,2015-11-21 10:53:24
461,2015-11-21 09:59:51,"This is one of the files that fail with v0.6.0: http://dropcanvas.com/d2vq6
",mcfly83,2015-11-21 10:53:24
461,2015-11-21 10:53:20,"It's `CDATA` in `<style>`, same as #456.
",GreLI,2015-11-21 10:53:24
460,2015-11-20 03:04:31,"I'm not sure if this is by intention, but the convertTransform plugin removes the gradient transformations:
Gist with before and after:
https://gist.github.com/matbech/541687f496976fa23b9e

The relevant markup:
Before:
`gradientTransform=""matrix(.8738 0 0-.8738-112.82 718.94)""`

After
`gradientTransform=""scale(NaN NaN)""`
",matbech,2015-11-20 12:34:20
460,2015-11-20 12:15:18,"SVG syntax doesn't allow absence of space before minus sign in transformation. Where did you get such a file?
",GreLI,2015-11-20 12:34:20
460,2015-11-20 12:20:38,"The file was exported from Adobe Illustrator and then ""pre-cleaned"" by svg cleaner. Apparently the bug is in svg cleaner. I apologize for the false alarm.

But it would be better if svgo would complain about the syntax error instead of silently ignoring it.
",matbech,2015-11-20 12:34:20
460,2015-11-20 19:21:51,"It requires rewriting of transform attribute parser, which is not that trivial or somewhat prioritized task.
",GreLI,2015-11-20 12:34:20
460,2015-11-21 11:07:11,"Made it so in v0.6.1. No more errors, yay!
",GreLI,2015-11-20 12:34:20
459,2015-11-19 17:21:14,"I'm calling svgo with the following option:
--multipass --disable=convertTransform

For this particular .svg the result is a file with all the markup aside from svg element removed:
https://gist.github.com/matbech/0629e2ab460af94f9339
",matbech,2015-11-21 09:38:43
459,2015-11-19 18:31:55,"Wow! It's the type of error that shouldn't occur.
",GreLI,2015-11-21 09:38:43
459,2015-11-21 09:35:02,"Your error is due to `transform=""translate(.5-89.26)""`. SVG syntax doesn't allow omitting the separator between numbers in transform functions. Did you use SVG Cleaner or such?
",GreLI,2015-11-21 09:38:43
459,2015-11-21 09:38:43,"That was most likely the case. Thank you for pointing it out.
",matbech,2015-11-21 09:38:43
459,2015-11-21 11:07:52,"Just released v0.6.1 which should work well now.
",GreLI,2015-11-21 09:38:43
458,2015-11-19 04:12:59,"I'm using it with [webpack-svgo-loader](https://github.com/rpominov/svgo-loader) with the latest svgo library.

Module build failed: TypeError: Cannot use 'in' operator to search for 'floatPrecision' in 

<S_CODE_TOKEN>

  at module.exports (/Users/Kebot/Codes/bragi/node_modules/svgo/lib/svgo/config.js:32:29)
  at Object.module.exports (/Users/Kebot/Codes/bragi/node_modules/svgo/lib/svgo.js:21:19)
 @ ./assets/icons ^.\/icon-.*.svg$
",kebot,2016-02-07 17:36:44
458,2015-11-21 09:47:25,"It seems that there is some problem with config. Something odd is passed to svgo.
",GreLI,2016-02-07 17:36:44
458,2015-11-22 13:21:38,"@kebot I think you use 

<S_CODE_TOKEN>

instead of 

<S_CODE_TOKEN>
",lgordey,2016-02-07 17:36:44
458,2016-01-14 23:47:14,"I get the same error with this seemingly trivial example (click ""run""):

https://tonicdev.com/569830dcfca1b10c00b4f7db/569830dcfca1b10c00b4f7dc
",pygy,2016-02-07 17:36:44
458,2016-01-14 23:52:12,"Oooh, my bad, I didn't read the example carefully, I was trying to call `svgo` when I should have called `svgo().optimize`...

Sorry for the noise.
",pygy,2016-02-07 17:36:44
457,2015-11-18 13:54:31,"Program API shows `--config=CONFIG : Config file to extend or replace default` can be used to configure `svgo` program. But there is no example of the config file in the docs.
",gajus,2015-11-18 13:54:52
457,2015-11-18 13:54:52,"Found it. https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#1-config
",gajus,2015-11-18 13:54:52
457,2015-11-18 19:24:16,"Yeah, not the best location.
",GreLI,2015-11-18 13:54:52
456,2015-11-17 09:22:06,"<S_CODE_TOKEN>

Ошибка возникает при наличие в svg такой конструкции:

<S_CODE_TOKEN>

соответственно CLI тоже вылетает без ошибки
",ne3Vubeki,2015-11-21 10:00:36
456,2015-11-18 00:56:51,"I can confirm the same error happening with the addition of this plugin.  We are wrapping our SVG style content with CDATA (recommended by the w3c), which breaks the plugin and causes build errors:

<S_CODE_TOKEN>

Taken from the standard .... http://www.w3.org/TR/SVG/styling.html

_Note how the CSS style sheet is placed within a CDATA construct (i.e., <![CDATA[ ... ]]>). Placing internal CSS style sheets within CDATA blocks is sometimes necessary since CSS style sheets can include characters, such as "">"", which conflict with XML parsers. Even if a given style sheet does not use characters that conflict with XML parsing, it is highly recommended that internal style sheets be placed inside CDATA blocks._
",dishs,2015-11-21 10:00:36
455,2015-11-16 17:12:49,"I am using svgo version 0.6.0 (through gulp-imagemin). And was getting an error after upgrading to node 5.

I had an svg with this block, after removing it, imagemin is working again.

<S_CODE_TOKEN>
",AgDude,2015-11-21 10:00:36
454,2015-11-13 22:18:54,"This PR adds the local styles plugin.
It is a complete rewrite of previous PR, to make the code simpler and more efficient.

With best regards
",strarsis,2016-09-06 13:41:15
454,2015-11-14 01:09:18,"Hm, jshint fails with build using nodejs release v0.10.40, but with othe plugins than this one.
Should I base off from a different commit than current master?

With best regards
",strarsis,2016-09-06 13:41:15
454,2015-11-14 09:36:38,"Also, I'd like if styles were transfered just if there is only one match, not if two or more (non-adjanced, adjanced can be grouped). It seems it can be done easy enough in the current implementation.
",GreLI,2016-09-06 13:41:15
454,2015-11-14 16:16:27,"""Also, I'd like if styles were transfered just if there is only one match, not if two or more (non-adjanced, adjanced can be grouped). It seems it can be done easy enough in the current implementation.""

So this means that when a CSS rule with multiple selectors 
is selected because _one_ selector matched /not all of them), 
then the whole CSS rule should be cleaned?

Like for example using this rule in input:

<S_CODE_TOKEN>

The rule is cleaned up completely because .test1 matched?:

<S_CODE_TOKEN>

With best regards
",strarsis,2016-09-06 13:41:15
454,2015-11-17 12:12:24,"The jshint fails with other files for this PR, should I base it off a different commit that passes the tests?
https://travis-ci.org/svg/svgo/jobs/91121264#L176

With best regards
",strarsis,2016-09-06 13:41:15
454,2015-11-17 12:57:00,"No, I don't think it's required. Do it if you want.

It's odd that other builds including master branch passed it.
",GreLI,2016-09-06 13:41:15
454,2015-11-17 13:41:52,"OK, so the last thing that needs to be clarified is how matched CSS rules are handled.
So a CSS rule should be cleaned up when any of its selectors matched, right?

With best regards
",strarsis,2016-09-06 13:41:15
454,2015-11-17 17:52:52,"I mean remove a rule only if there only one corresponding class in document. E.g.

<S_CODE_TOKEN>

but not then there are several classes here and there:

<S_CODE_TOKEN>
",GreLI,2016-09-06 13:41:15
454,2015-11-21 03:56:52,"Yes, I fixed/changed the loop code now.

Preserving selectors/rules when they are used multiple times is a bit tricky, 
the current (not pushed yet) implementation is a bit bloated, I have to simplify it a bit.
I also try to get rid of the global variables and add some further tests for edge cases.

With best regards
",strarsis,2016-09-06 13:41:15
454,2015-11-21 10:20:33,"Don't forget to check with «CDATA», empty `<style/>` tag, complex selectors, etc. Just fixed a couple of issues: fc174aa9f0412061a427ab592b7784f63c6ed170.
",GreLI,2016-09-06 13:41:15
454,2016-09-05 09:57:46,"Do you guys have any update on this?
",LeZuse,2016-09-06 13:41:15
454,2016-09-05 11:58:50,"Yes, I rewrote the plugin so that it can use the svgo ast as cheerio ast and juice for cleaning up the styles.
cheerio ast back to svgo ast is not fully working yet, hence no new PR has been created yet.

Edit: The reason why I use juice now in this svgo plugin is that it already solved the quite complicated handling of style cascadation, selectors, etc and comes with tests included.
",strarsis,2016-09-06 13:41:15
454,2016-09-06 13:41:15,"OK, the rewrite has been finished: https://github.com/svg/svgo/pull/592
",strarsis,2016-09-06 13:41:15
453,2015-11-08 18:00:03,,TrySound,2015-11-08 18:09:40
452,2015-11-06 20:14:12,"I can't find a way to use the `--pretty` option when using it as a node module. I see how you can pass in config values, but to my knowledge that only works for plugins, not built-in functionality like `--pretty` or `--datauri`

Maybe I'm missing something easy and small. Any help?
",tay1orjones,2016-03-08 14:36:26
452,2015-11-08 15:28:39,"I guess this should work:

<S_CODE_TOKEN>

This is not obvious, yes.
`datauri` works only in certain output as of current state of things.
",GreLI,2016-03-08 14:36:26
452,2016-03-08 14:36:26,"I guess, I answered your question. For data:uri there is related issue #340.
",GreLI,2016-03-08 14:36:26
451,2015-11-01 23:36:04,"This PR adds the minifyStyles plugin.

It minifies styles in style elements and style attribute of the elements using CSSO.
CSSO related options can be passed through using the csso option key of that plugin.

With best regards
",strarsis,2015-11-02 18:52:33
451,2015-11-08 17:40:37,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the plugin have been just released.
",GreLI,2015-11-02 18:52:33
450,2015-11-01 21:35:40,,nt1m,2016-02-28 20:47:45
450,2015-11-02 10:16:03,"Yes, please! :+1: 
",waldyrious,2016-02-28 20:47:45
450,2015-11-24 02:10:06,"+1 we work with 2 spaces, not 4.
",jaydenseric,2016-02-28 20:47:45
450,2016-02-28 20:47:45,"Duplicates #424.
",GreLI,2016-02-28 20:47:45
450,2016-02-29 01:30:49,"@GreLI #242 is about changing the hardcoded indentation value (to 2 spaces from 4), not making indentation configurable as with this issue/suggestion.

Ultimately I would like to see configurable `--pretty` indentation via a CLI argument, defaulting to `.editorconfig` and finally falling back to 2 spaces. See https://github.com/svg/svgo/issues/507.
",jaydenseric,2016-02-28 20:47:45
450,2016-02-29 12:29:12,"Hardcoded indentation isn't an option ofc.
",GreLI,2016-02-28 20:47:45
449,2015-11-01 20:25:49,"In ./test/plugins/ svg ""diffs"" can be placed with @@@ as separator.
The plugin is tested automatically.
But how can I add tests with different options passed to the plugin?
Can I add ""annotations"" for the options to the svg test file?",strarsis,2016-02-07 12:14:06
449,2015-11-02 18:28:33,"You can place JSON like parameters after the second separator. See for example [test/plugins/removeAttrs.01.svg](https://raw.githubusercontent.com/svg/svgo/master/test/plugins/removeAttrs.01.svg).
",GreLI,2016-02-07 12:14:06
448,2015-10-30 10:18:08,,Sokol-ua,2015-10-30 14:20:08
448,2015-10-30 14:20:08,"See #296
",GreLI,2015-10-30 14:20:08
448,2015-11-03 16:28:36,"Thanks=)
",Sokol-ua,2015-10-30 14:20:08
447,2015-10-28 23:08:53,"This PR adds the localStyles plugin which copies styles from style element to style attribute of the selected elements.
- run this plugin before the removeStyleElement plugin
- this plugin won't remove the style element, use removeStyleElement after this plugin
- run convertStyleToAttrs after this plugin
- minify styles in style element if necessary before this plugin (minified = ""computed"" styles)
- this plugin currently works only with class and id selectors, advanced css selectors (e.g. :nth-child) aren't currently supported
- inline styles will be written after the styles from style element
- classes are inlined by the order of their names in class element attribute
",strarsis,2015-11-13 22:11:34
447,2015-10-28 23:25:03,"+1!
",Joeynoh,2015-11-13 22:11:34
447,2015-10-29 09:33:28,"Why there are styles both in attribute and `<style>` tag?
What about media queries?
Also, code style check fails.
",GreLI,2015-11-13 22:11:34
447,2015-10-29 14:43:32,"I ran npm test which doesn't invoke make travis, so jshint was ommited, 
hence the build errors, fixed that now.

As mediaqueries and other nested structures cannot be added to style attribute, 
they would be preserved in style element in any case for further possible usage.

Initially the styles element was intended to be preserved by this plugin 
and removed by removeStyleElement plugin instead. 
However, there may be mediaqueries and orphaned selectors left in style element. 
What kind of modi would make sense (passed as plugin option)?:
- Preserve style element completely (current mode).
- Remove matching selectors, preserve everything else.
- Remove all selectors except nested structures that cannot be copied to style attribute at all (e.g. mediaqueries).

What should happen to the class attributes/classe names inside that matched?
cleanupAttrs plugin afterwards?

With best regards
",strarsis,2015-11-13 22:11:34
447,2015-10-29 15:52:23,"Just my two cents: It makes sense that this plugin does not remove the style element, considering there is already a plugin that does. You can simply run them in sequence. Optionally, this plugin can perhaps call removeStyleElement, but should be set to false by default.

Calling cleanupAttrs afterwards makes sense as well.
",Joeynoh,2015-11-13 22:11:34
447,2015-10-29 15:59:40,"When there are mediaquery styles, the svgo end user would disable removeStyleElement anyway, so this shouldn't cause trouble either.

Maybe an extra plugin that just removes styles that aren't used by the classes/ids inside before this one, so there are no leftover styles?
",strarsis,2015-11-13 22:11:34
447,2015-10-30 14:29:02,"I added style element clean up which will strip any selectors/rules 
that matched the elements (by class/id) (and which declarations were copied to style attribute).

The following rules apply to style element clean up now:
- Preserve nested structures (e.g. media queries) in any case (cannot be inlined).
- Remove selectors that matched.
- Remove rules where all its selectors matched.

With best regards

P.S.: Maybe later, when it is stable enough, it could be worth it 
moving the clean up part into an extra plugin (cleanupStyles.js)?
",strarsis,2015-11-13 22:11:34
447,2015-10-30 14:40:33,"Ready to merge?
",strarsis,2015-11-13 22:11:34
447,2015-10-30 15:05:39,"I haven't looked into it closely yet.
Also, we're using indentation of 4 spaces mostly.
",GreLI,2015-11-13 22:11:34
447,2015-11-01 20:16:33,"There seems to be more issues posted concerning styles in svgo.
- Remove styles with display: none; (hidden layers)
- Remove styles element when not needed (similar to this plugin)
- Minify styles element (and inline styles?)

To improve selector support, using a XML parser like cheerio would help 
because it offers $(...) which can evaluate more complex selectors.
",strarsis,2015-11-13 22:11:34
447,2015-11-02 18:58:52,"I'm sorry, still don't have much time to look into it. Quite a big pull-request.
",GreLI,2015-11-13 22:11:34
447,2015-11-13 22:11:34,"I did a full rewrite and rebranch and will create a new PR instead.
",strarsis,2015-11-13 22:11:34
446,2015-10-26 13:22:35,"With `svgo` version 0.5.6. Using the `moveElemsAttrsToGroup` plugin on a svg 'hide' some text entries node. (The node is here but we can't see the content)

Here is my test config:

<S_CODE_TOKEN>

The cmd:

<S_CODE_TOKEN>

The plugin move a `translate` attributes (You can easily see this on the node with id `g150`) from a group to another one. But this seems to change the result of the svg.

This as probably nothing to do with the issue but the result file size is bigger than the original. (74 vs 78 ko)

[Original File (jsfiddle link)](http://jsfiddle.net/b2hpr7pb/)
[Result File (jsfiddle link)](http://jsfiddle.net/9q5bmqps/)

(click on run to see the svg :eyes: )
",cduez,2015-11-08 16:10:54
446,2015-11-08 16:11:11,"Another `clip-path` issue. Thanks for reporting!
",GreLI,2015-11-08 16:10:54
446,2015-11-08 17:40:47,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-11-08 16:10:54
445,2015-10-19 06:14:09,"I trust that svgo works, and the output of my build process is overly long as it is. Add a `-q` / `--quiet` option to suppress all the chatter and only show important / error messages.
",phihag,2015-11-19 09:49:05
445,2015-11-18 13:14:44,"@GreLI Is there something wrong with this pull request? Any opinion?
",phihag,2015-11-19 09:49:05
445,2015-11-18 18:56:01,"Just forgot it.
",GreLI,2015-11-19 09:49:05
445,2015-11-19 09:49:15,"Nice. Thanks!
",GreLI,2015-11-19 09:49:05
444,2015-10-15 14:49:19,"Dear Developers,
ill like that gulp Plugin and write my first plugin for SVG optimisation.
But my problem is that i cannot bring it to my gulp.

Ill override the ""addClassesToSVGElement"" file and than it works, but wanne have my own file - maybe for github.
I am very new to this. Ill read the manual here:
https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md
but it doesnt work, do you have any glue ?

Thanks very much!
Sorry for my bad english.
",jolution,2016-02-07 12:14:14
444,2015-10-18 07:25:37,"Well, when you have your own file, you need to add to the plugins list in config. Also, if it's disabled by default (`exports.active = false`), you have to set it to true.
",GreLI,2016-02-07 12:14:14
443,2015-10-14 08:32:03,"Hullo, before I disable each SVG plugin one by one, I thought I'd check if anyone has come across the SVG compressor translating stroke badly? It seems to make it too thin. 
Here are the before and after
https://gist.github.com/sebastianthomas/f68fc465c63b26bc3bae
https://gist.github.com/sebastianthomas/79e80064145be1b03ab5

This is my current gulp task:

<S_CODE_TOKEN>

As per: https://www.npmjs.com/package/generator-gulp-less-jade
Which is using `""gulp-imagemin"": ""^1.0.1""`, so maybe that's just a really old version.. 

Any ideas? Thanks!
",plonko,2016-02-28 20:46:56
443,2015-10-20 14:38:27,"You know, I couldn't reproduce the case with and without these plugins in any version of 0.5 in command line. `stroke-width` is correctly preserved by svgo.
",GreLI,2016-02-28 20:46:56
442,2015-10-14 05:45:41,"$ svgo -v

<S_CODE_TOKEN>

$ cat bulb.svg

<S_CODE_TOKEN>

$ svgo bulb.svg

<S_CODE_TOKEN>

$ cat bulb.svg

<S_CODE_TOKEN>

$ svgo bulb.svg

<S_CODE_TOKEN>

In fact it produces malformed xml.
",vbarbarosh,2015-10-20 15:41:38
442,2015-10-20 15:42:13,"Thanks for reporting! Added the namespace.
",GreLI,2015-10-20 15:41:38
442,2015-11-08 17:40:28,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-10-20 15:41:38
442,2015-11-11 17:01:00,"Thanks for making this! Awesome savings on so many of my SVG's.

But are you sure this issue hass been fixed? I just installed SVGO for the first time and tried it on an illustrator file that had lots of sodpodi's. 

`<g id=""g9856"" transform=""matrix(0.02682851,0,0,0.02682851,118.68105,942.83463)"">
    <g id=""path9858"" sodipodi:rx=""16.428572"" sodipodi:type=""arc"" sodipodi:cy=""472.36218"" sodipodi:ry=""16.428572"" sodipodi:cx=""430"">
        <circle fill=""#A9F0F7"" cx=""-9892.9"" cy=""13567.6"" r=""1.7""/>
    </g>`

$ npm show svgo version
0.6.0

`Error in parsing: Unbound namespace prefix: ""sodipodi""`
",birchcode,2015-10-20 15:41:38
442,2015-11-11 19:53:06,"Since the error in parsing, your file is already broken. SVGO can't do anything until it parse file.
",GreLI,2015-10-20 15:41:38
442,2016-01-11 12:00:08,"I have same error with `Error in parsing: Unbound namespace prefix: «sketch»`
",eden-lane,2015-10-20 15:41:38
442,2016-01-11 19:46:38,"`Error in parsing` — it's parse time error, you will get same in the browser.
",GreLI,2015-10-20 15:41:38
442,2016-01-12 08:29:11,"I hadn't this error when I used same svg without svgo. Anyway, removing prefixes solved this problem.
",eden-lane,2015-10-20 15:41:38
442,2016-09-08 17:50:42,"@GreLI AFAIK a namespace prefix is only valid if the svg has a xmlns binding that prefix to a unique DTD. So if svgo removes the xmlns, it should also remove the corresponding prefix from the elements/attributes, otherwise the svg file is invalid (I'm not 100% sure on this, but that's my understanding).

In any case, according to the [inkscape wiki](http://wiki.inkscape.org/wiki/index.php/Inkscape_SVG_vs._plain_SVG), sodipodi-prefixed attributes and elements are metadata, rather than graphical information needed to render the image, so svgo should remove not just the prefix, but the whole attribute/element as well.
",waldyrious,2015-10-20 15:41:38
441,2015-10-11 23:35:26,"Here's a simple star:

<S_CODE_TOKEN>

But the path isnt closed when its converted:

<S_CODE_TOKEN>

it needs a z at the end
",ccorcos,2015-11-08 16:13:43
441,2015-10-11 23:52:03,"Seems like it should always be a closed path if its a polygon:

https://github.com/svg/svgo/blob/master/plugins/convertShapeToPath.js#L90
",ccorcos,2015-11-08 16:13:43
441,2015-10-11 23:52:16,"Also, this isn't stopping the conversion:       {  convertShapeToPath: false },
",ccorcos,2015-11-08 16:13:43
441,2015-10-12 14:38:53,"Actually there is no need in closing if you have no stroke. It's absolutely same. 
",GreLI,2015-11-08 16:13:43
441,2015-10-12 17:37:32,"Without the Z

<S_CODE_TOKEN>

![screen shot 2015-10-12 at 10 36 10 am](https://cloud.githubusercontent.com/assets/1794527/10434230/27c8f464-70cd-11e5-90fa-9b6c50e24e32.png)

With the Z

<S_CODE_TOKEN>

![screen shot 2015-10-12 at 10 36 28 am](https://cloud.githubusercontent.com/assets/1794527/10434243/371d6c6a-70cd-11e5-95f4-173b0a22416e.png)
",ccorcos,2015-11-08 16:13:43
441,2015-10-12 21:05:26,"Ah, you have stroke in styles. Yes, svgo can't parse styles for now.
",GreLI,2015-11-08 16:13:43
441,2015-10-13 06:00:01,"the styles aren't within the SVG file. its within the html page. at the top is the SVG file thats input. The first example in the last comment is the compiled version. And the second is what I think it should be, with the Z appended.
",ccorcos,2015-11-08 16:13:43
441,2015-10-13 06:00:11,"All polygons are closed. Thats my point.
",ccorcos,2015-11-08 16:13:43
441,2015-10-13 20:40:58,"Yeah, but svgo can't know about it. Consider tuning the configuration.
",GreLI,2015-11-08 16:13:43
441,2015-10-13 20:57:29,"Thats my point about this line:

https://github.com/svg/svgo/blob/master/plugins/convertShapeToPath.js#L90

I think closePath should always be true for polygons.
",ccorcos,2015-11-08 16:13:43
441,2015-11-08 17:40:52,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-11-08 16:13:43
440,2015-10-11 23:03:44,"when I'm styling my SVG's with CSS its nice to strip all the inline colors so I can style them myself. This challenging when colors are set with inline styles.  So I strip them out:

<S_CODE_TOKEN>

But then there are circles that are filled in when they shouldnt be. So it would be aweosme if you could strip all the stroke and fill attributes so long are they're not none. Unless you've found a better way of dealing with this...
",ccorcos,2015-10-13 06:00:47
440,2015-10-11 23:52:43,"`{ removeAttrs: {attrs: '(stroke|fill)'} },` is also removing stroke-width
",ccorcos,2015-10-13 06:00:47
440,2015-10-12 14:41:38,"Sorry, I don't understand your first statement.

> `{ removeAttrs: {attrs: '(stroke|fill)'} },` is also removing stroke-width

It's likely that `removeUselessStrokeAndFill` removes `stroke-width` since there is no stroke. Just disable it.
",GreLI,2015-10-13 06:00:47
440,2015-10-12 17:40:34,"Ah. I'll try that.

Let me reiterate my first statement:

When using these svg's inline an styling with CSS, its nice to be able to set the stroke and fill colors. Thus, I want to remove the stroke and fill colors. However I want to preserve all styles where fill is set to none -- that is, I want to preserve hallow regions. Stripping all fill attributes will cause icons to look wrong. 
",ccorcos,2015-10-13 06:00:47
440,2015-10-12 21:10:24,"Well, `removeAttrs` takes only style attributes names. You can extend it if you want, but this is not main svgo purpose.
",GreLI,2015-10-13 06:00:47
440,2015-10-13 06:00:46,"ok. I see. SVG's are kind of a pain.... :/
",ccorcos,2015-10-13 06:00:47
439,2015-10-11 07:23:04,"Its not clear how to specify the config in Node.js. Here's what I have, but its not entirely working -- especially the removeAttrs

<S_CODE_TOKEN>
",ccorcos,2015-10-11 23:01:12
439,2015-10-11 09:37:29,"See [how it works](https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#how-it-works). There must be an array of plugins under the `plugins` key.
",GreLI,2015-10-11 23:01:12
439,2015-10-11 23:01:12,"Ah. I see. A little awkward, but it works :)

<S_CODE_TOKEN>
",ccorcos,2015-10-11 23:01:12
439,2015-10-12 21:12:44,"An order of plugins execution is important, that's why an array is needed.
",GreLI,2015-10-11 23:01:12
439,2015-10-13 06:02:39,"oh, interesting. I never thought of that. I'm building a plugin for meteor to do this stuff. It would be great if you're README has some examples of a standard set of optimizers.
",ccorcos,2015-10-11 23:01:12
439,2016-06-09 01:09:42,"👍 this thread helped me after a long long search for how to configure SVGO
",DavidWells,2015-10-11 23:01:12
439,2016-06-09 11:27:09,"@DavidWells, where did you search in the first place? Do you have any suggestions?
",GreLI,2015-10-11 23:01:12
439,2016-06-09 16:55:07,"I was searching around in these issues and inside https://github.com/mrsum/webpack-svgstore-plugin but this thread helped me get the config working.

What @ccorcos posted worked and altering the config option he provided actually changes my sprite output now! =)

I'm using svgo via the 'webpack-svgstore-plugin' package.

My webpack now looks like:

<S_CODE_TOKEN>
",DavidWells,2015-10-11 23:01:12
438,2015-10-10 11:07:14,"Example

<S_CODE_TOKEN>

It's after Optimizing

Why is ids not cleanup?
# 

Код вверху. IDs не удаляются. Почему?
",vruzin,2016-02-28 20:34:01
438,2015-10-10 11:10:41,"svgo doesn't parse <style>, so it can't say whether the id is used.

# 

svgo не умеет парсить отдельные стили, поэтому не знает, используется ли id.
",GreLI,2016-02-28 20:34:01
438,2015-10-10 11:33:16,"Может в CleanupIDs стоит сделать опцию ""all:true/false"" чтоб удалять все ID?
Они редко используются.Иконки, например, маленькие картинки где ID вообще не нужны.

Про style. Думаю стоит сделать опцию ""Style"" с опциями:
- Удалить
- Оставить как есть
- Сжать (Оптимизировать)
- Вынести в отдельный файл (указать его). Это будет супер удобно при работе с большим числом иконок. В них удобно выносить стили в один файл, потому что они имеют одни и те же значения стилей. и плодить стили от иконки к иконке нет смысла.
",vruzin,2016-02-28 20:34:01
438,2015-10-10 14:50:18,"На самом деле, как раз в недавнем пулл-реквесте #427 сделали плагин для удаления `<style>`, но он ещё не попал в релиз.
",GreLI,2016-02-28 20:34:01
437,2015-10-09 09:28:16,"https://github.com/jakearchibald/svgomg/issues/32
",s10wen,
437,2015-10-09 10:13:54,"As far as I understand your request, you want to parse styles. SVGO cannot parse styles for now, only the `style` attribute.
",GreLI,
436,2015-10-06 09:23:00,"SVGO has a lot of [dependents](https://www.npmjs.com/browse/depended/svgo) - it would be nice to extract the CLI into a separate module so that consumers of the JS API don't have to download coa, mkdirp et al. :smile:
",ben-eb,2016-11-19 14:44:13
436,2015-10-06 09:23:30,":+1: 
",TrySound,2016-11-19 14:44:13
436,2015-10-07 06:49:54,"Can you provide an example of such a package? How to provide CLI in such a way?
",GreLI,2016-11-19 14:44:13
436,2015-10-07 07:29:04,"https://github.com/ben-eb/cssnano-cli
https://github.com/ai/autoprefixer-cli
https://github.com/code42day/postcss-cli
",TrySound,2016-11-19 14:44:13
436,2015-10-07 16:31:14,"Essentially it means removing the binary and associated dependencies/code from this module, out to a new module, say svgo-cli. Then svgo-cli would depend on svgo, and be its own package with its own tests etc.

https://github.com/ben-eb/cssnano/commit/8f4db2268e57c2adfddbfd21420e5d0943342c8f
",ben-eb,2016-11-19 14:44:13
436,2015-10-23 13:55:06,"@GreLI Any thoughts?
",TrySound,2016-11-19 14:44:13
436,2015-10-23 15:33:54,"That's a major change, and I'm not sure, that it really worth it.
",GreLI,2016-11-19 14:44:13
436,2015-10-23 15:37:18,"@GreLI You can firstly just make svgo-cli which will be dependent on svgo. Dependencies will be deduped.
",TrySound,2016-11-19 14:44:13
436,2015-10-23 21:24:52,"Why do you think that dependendecies are such a big problem? Perhaps, svgo will reutilize them in the future :stuck_out_tongue_winking_eye:.
Besides, users are got used to just do `npm install svgo` and I don't think that breaking this pattern is a good idea either.
",GreLI,2016-11-19 14:44:13
436,2015-10-23 21:45:38,"After reading @sindresorhus' reasoning on this (https://github.com/sindresorhus/ama/issues/17#issuecomment-117860283) I thought it was a good practice to have a separate CLI. It makes sense for those wrapper modules that will not make use of the command line, and therefore don't need the dependencies. This way the package is leaner overall. :smile:

The why is simple; extra calls to npm & more to download means slower build times. Less is more.
",ben-eb,2016-11-19 14:44:13
436,2015-10-24 08:13:46,":+1: In addition, it makes the readmes neater, as you don't have to fit both CLI and API docs into one readme.
",sindresorhus,2016-11-19 14:44:13
436,2015-10-24 10:53:05,"Is it a **big** issue? I don't think so.
",GreLI,2016-11-19 14:44:13
436,2015-10-24 11:08:58,"@GreLI For you it's not a big issue. For us yes. Web should be small in every ways.
",TrySound,2016-11-19 14:44:13
436,2016-10-27 04:06:03,"Would you accept a PR for this?
",wtgtybhertgeghgtwtg,2016-11-19 14:44:13
436,2016-10-27 06:24:21,"I afraid this goes beyond a simple PR.
",GreLI,2016-11-19 14:44:13
436,2016-10-27 06:29:37,"Sorry, a PR and an `svgo-cli` repository.  Or a PR and an `svgo-core` repository.  Whichever way it would be.
",wtgtybhertgeghgtwtg,2016-11-19 14:44:13
436,2016-11-19 14:44:13,"I'm hardly imagine such a request, but you can try make so.
",GreLI,2016-11-19 14:44:13
435,2015-10-06 07:24:43,"Plugin removeUnknownsAndDefaults.

If an element is encountered that doesn't exist in collections.elems, unhandled exception occurs as there is no existence check.

Encountered with this xml block (Illustrator export)

<S_CODE_TOKEN>
",thiakil,2015-10-09 10:12:01
435,2015-10-07 06:48:33,"It would be nice to add a test in test/plugins.
",GreLI,2015-10-09 10:12:01
435,2015-10-08 01:09:20,"Added test. NB: End result is that the unknown elements are NOT removed.

Should this be changed to filter elements not in the Collection?
",thiakil,2015-10-09 10:12:01
435,2015-10-08 08:41:50,"I guess it should, that's what the plugin do.
",GreLI,2015-10-09 10:12:01
435,2015-10-08 13:53:37,"Updated to enable checking children of elements without a content property in the collections file. If the child itself is not listed in the elems collection, we delete it.
",thiakil,2015-10-09 10:12:01
435,2015-10-09 10:12:10,"Ok, thanks for the good job!
",GreLI,2015-10-09 10:12:01
435,2015-11-08 17:40:20,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-10-09 10:12:01
434,2015-09-30 17:45:17,"I have php tags in my svg, for dynamic colouring reasons, and svgo destroys my php tags by converting the `<` and `>` to `&lt;` and `&gt;`

I've looked to see if there was a setting to disable this ""functionality"", but there doesn't seem to be.
",shaneparsons,2015-10-12 14:23:59
434,2015-10-08 15:59:35,"Any ideas?
",shaneparsons,2015-10-12 14:23:59
434,2015-10-08 20:29:40,"No ideas, sorry.
",GreLI,2015-10-12 14:23:59
434,2015-10-12 02:39:59,"If you really want to have PHP tags in an SVG file, you will need to run it through some kind of preprocessor before it hits svgo, as your file is invalid.

A better approach would likely be not running SVG as PHP on your server; use XML valid placeholders instead and process in separate PHP script. That would allow you to use vanilla svgo on the command line.
",thiakil,2015-10-12 14:23:59
434,2015-10-12 14:23:59,"Yeaa it took some reworking but I ended up just swapping out the php with classes and using php on the other end
",shaneparsons,2015-10-12 14:23:59
433,2015-09-26 09:01:59,"Hello.

Thank you for your work on svgo!

I have a suggestion to change the approach to default configuration.

Now, to use svgo one must read through all the plugins, figure our which one of them applies by default, then examine default configuration and disable plugins if necessary.

More importantly, it is not possible to make a future-proof configuration: each svgo update might possibly bring new default plugin which may or may not break existing application which use svgo.

I suggest you to clear default plugin list, or at least make a it possible with public API to do so.

I encountered a number of posts over the internet with people describing how they found that they need to disable certain svgo plugins to make svgo work for them. I think that is a proof of my point.

Thank you.
",senotrusov,2015-09-26 10:37:29
433,2015-09-26 10:37:29,"I'm sorry, I guess config option `full: true` serves exactly for that purpose.
",senotrusov,2015-09-26 10:37:29
432,2015-09-24 20:10:47,"Hi there,

Hopefully this is the right place to post this. I'm getting an error that I've never had before and randomly mid-way through a project:

<S_CODE_TOKEN>

I've not changed anything or update any files. Can anyone point me in the right direction?
",vdecree,2016-02-28 20:44:57
432,2015-09-25 17:48:08,"That's odd. Content of any element should be an array, so no such an error should appear. It's hard to say anything without config and files. Probably there is some bad plugin. May be you're using old node.js or svgo version.
",GreLI,2016-02-28 20:44:57
432,2015-11-21 11:29:48,"Does it reproduce with latest svgo version. If so, can you provide a sample file?
",GreLI,2016-02-28 20:44:57
432,2016-01-05 07:40:27,"For information the problem comes when one of the SVG files is corrupted
",arnogues,2016-02-28 20:44:57
432,2016-02-28 20:44:57,"It's hard to say without further info, but it probably have been fixed by #435 or other error handling measures.
",GreLI,2016-02-28 20:44:57
431,2015-09-20 13:25:01,"I know most SVG editors leave in blank and useless metadata, but stripping Creator/Rights/Licence information by default makes this a cracking tool, not an optimizer.
",scruss,2016-02-28 20:42:40
431,2015-09-21 12:00:30,"Removing comments doesn't remove rights for the image. If a license doesn't allow removing legal info, then the user must preserve it, e.g. by disabling appropriate plugins. But usually there is nonsense stuff like “generated by our awesome editor” which worth nothing.

Do you have a reliable way of detecting such a legal information? We'd like to see a pull-request.
",GreLI,2016-02-28 20:42:40
431,2015-09-21 12:49:39,"I'm not a javascript programmer, so a pull request is unlikely. Any RDF section that would ultimately resolve to a non-empty string should be preserved. RDF isn't just comments; it's provenance. While removing it doesn't remove rights, it makes the job of proving rights harder for the creator.
",scruss,2016-02-28 20:42:40
431,2015-09-22 09:27:12,"Sorry, it contradicts the purpose of optimization which is in priority here. That's why I'm asking for technical details. SVGO is a tool and it's assumed that user knows how to use it.
",GreLI,2016-02-28 20:42:40
431,2015-10-12 02:47:16,"Please provide an example metadata section and I might be able to look into it.

Although, agreed that this is really a user issue. Calling it a cracking tool is fear mongering... You could call Notepad a cracking tool by that definition. The creator would likely have original files that would easily prove their rights.
",thiakil,2016-02-28 20:42:40
431,2015-10-14 12:28:07,"Thanks! I put a small file with example metadata here: http://scruss.com/wordpress/wp-content/uploads/2015/10/kite.svg

One unrelated thing I've noticed (with 0.5.6) and this particular example file is that the output is massively scaled up. The original is ~ 9 mm wide, but it ends roughly 9½ m wide when run through svgo.
",scruss,2016-02-28 20:42:40
431,2015-10-16 04:43:58,"So, by default, the removeMetadata plugin is enabled. This quite obviously will remove the whole metadata section - something I can guarantee most other image optimisers will do.

My personal opinion is that this is your responsibility to disable. `--disable=removeMetadata`
IANAL, but from my studies I know that the absence of licence info does not affect copyright claims, so the default option is unlikely to be changed.

Therein also lies another issue; what metadata to save, what to get rid of? What metadata does this program add, what does that program add?

The scaling issue: this appears to be a quirk with how your image is saved; width and height are in mm, but the DPI info is inside an Inkscape XMLNS, something I doubt SVGo understands. Nothing but Inkscape would be able to convert that properly.
",thiakil,2016-02-28 20:42:40
431,2016-02-28 20:42:40,"Well, may be it'll be considered with the new architecture implementation, but for now `--disable=removeMetadata` is the best option to keep legal info.
",GreLI,2016-02-28 20:42:40
430,2015-09-11 20:54:10,"got some warnings when installing other deps, does it hurt to bump this dep?
",pgherveou,2015-11-08 17:37:44
430,2015-11-08 17:37:44,"Dependencies have been updated in [v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0)
",GreLI,2015-11-08 17:37:44
429,2015-09-11 15:15:06,"We have a problem with this svg it contains NaN after optimization. We run svgo with the default settings like `$ svgo paper.svg`. 

Before:

<S_CODE_TOKEN>

After:

<S_CODE_TOKEN>
",danez,2015-11-21 11:30:34
429,2015-09-18 13:33:58,"Wrong SVG, `translate()` doesn't allow omitting space between values while you have `transform=""translate(-621-124)""` (no separator before `-124`). See [the syntax](http://www.w3.org/TR/SVG/coords.html#TransformAttributeEffectOnSiblingAttributes):

<S_CODE_TOKEN>

`comma-wsp` means that there must be comma or whitespace character between numbers. Where did you get such an image?
",GreLI,2015-11-21 11:30:34
429,2015-11-21 11:30:34,"v0.6.1 now deals with such cases.
",GreLI,2015-11-21 11:30:34
428,2015-09-10 20:45:18,"I was looking at the cleanupID plugin to add functionality and noticed it could be cleaned up a little.

The main change is using `Object.create(null)` instead of `{}` to create the ID maps. This lets us remove the ID prefixing everywhere. The change mostly improves readability, but making less strings will result in faster garbage collection and runtime.

Other changes include cleaning up whitespace and inverting `if` statements to decrease nesting and improve readability. 
",blopker,2015-09-13 01:43:02
428,2015-09-10 21:07:56,"Yes, `Object.create(null)` is nice, but there is a problem with `id=""__proto__""` that it doesn't resolve. See the [failing test](https://travis-ci.org/svg/svgo/jobs/79736146).
",GreLI,2015-09-13 01:43:02
428,2015-09-10 21:26:43,"Yeah, it looks like it works on newer JS engines (nodejs 0.11+, but not 0.10). Are you against using a polyfill to get es6 `Map` support in older engines? If not I'll just toss this change.
",blopker,2015-09-13 01:43:02
428,2015-09-10 21:31:55,"Not that I'm opposite to it, but svgo is a performance tool, so the less dependencies and starting time the better it would be.
",GreLI,2015-09-13 01:43:02
428,2015-09-10 21:38:37,"I hear you. I'll give it a try, but I'll probably just submit a PR with the other changes.
",blopker,2015-09-13 01:43:02
428,2015-09-10 21:47:31,"Yeah, thanks! You're welcome. Actually, there are plans about building svgo on the new architecture. So, the `cleanupIDs` will just clean unused ids. References will be collected in the parsing time, since they are needed for some other optimisations as well (e.g. can we transform a gradient or it's being used elsewhere). So, the plugins will be likely rewritten at some point.

Also, there are some optimizations that can be done already and are waiting for implemetation. So, minor code improvements aren't in top of priorities. Unfortunately, there is not so much time to implement all these plans. But pull requests are welcome.
",GreLI,2015-09-13 01:43:02
428,2015-09-10 22:06:48,"Ah, good to know about the re-architecture. I've been using SVGs and by extension svgo a lot recently. I mostly just wanted to get familiar with the codebase so I could eventually add features.

I modified the PR to add back the ID prefixes. I think the other changes are still good though and will help with refactoring (note the added test for **proto**).

Looks like CI passes now, so I'll leave it at this. Cheers! :beers: 
",blopker,2015-09-13 01:43:02
428,2015-09-13 02:57:57,"What's up? Why did you closed it?
",GreLI,2015-09-13 01:43:02
428,2015-09-13 03:01:42,"Oh, I just don't like having PRs sitting around for too long (OCD maybe :) ) . If you'd like to merge it then cool, but if you want to wait for the rearchitecture that's cool too.
",blopker,2015-09-13 01:43:02
428,2015-09-13 12:30:45,"Yeah, merged it manually (176d0329a475b70ad8b593f3c9f8e7a62c345c14).
",GreLI,2015-09-13 01:43:02
427,2015-09-08 14:46:53,"I'm going ahead with recreating. Hopefully this is the right place.
",betsydupuis,2015-09-08 16:40:06
427,2015-09-08 16:40:07,"Good job!
",GreLI,2015-09-08 16:40:06
427,2015-11-08 17:39:55,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the plugin have been just released.
",GreLI,2015-09-08 16:40:06
426,2015-09-07 22:58:58,,betsydupuis,2015-09-07 22:59:37
425,2015-09-04 14:55:50,"Illustrator is including a base64 of fonts during an scripted export in a style tag. A plugin  for that would be helpful.

<style type=""text/css"">
<![CDATA[
@font-face{font-family:'SourceSansPro-Regular';src:url(""data:;base64,\
",betsydupuis,2015-10-20 16:18:04
425,2015-09-04 18:24:34,"It's not that difficult, but obviously should be disabled by default.
",GreLI,2015-10-20 16:18:04
425,2015-09-04 19:59:57,"I can try to work on it this weekend and submit pull request. Would that help?
",betsydupuis,2015-10-20 16:18:04
425,2015-09-04 20:02:10,"It would be nice.
",GreLI,2015-10-20 16:18:04
425,2015-09-07 23:00:58,"I have a commit ready to make a pull request. Should I create the request to the 'next' branch?
",betsydupuis,2015-10-20 16:18:04
425,2015-09-08 06:01:00,"No, it's far for completion.
",GreLI,2015-10-20 16:18:04
425,2015-09-08 06:01:33,"Why you've closed it?
",GreLI,2015-10-20 16:18:04
425,2015-09-08 14:23:29,"I wasn't sure which branch to go to. So, I make the request to master?
",betsydupuis,2015-10-20 16:18:04
425,2015-09-08 15:57:52,"Yep
",GreLI,2015-10-20 16:18:04
425,2015-09-09 15:23:38,"Thanks for the merge, that was kind of a quick fix for my problem, but I could see where this might be a pain point for others in the future it they still want the rest of the styles. 

For my purposes, I'm just building a single color sprite, so the fewer attributes and styles the better.

When using scripts to export SVGs, I couldn't get illustrator to stop exporting that base 64 font. I tried making an action to outline fonts and change other export settings. 

What are your thoughts? 
",betsydupuis,2015-10-20 16:18:04
425,2015-09-09 16:21:35,"Sorry, I can't say anything
",GreLI,2015-10-20 16:18:04
425,2015-09-15 13:23:15,"I can do some research on this and get back to you. 
",betsydupuis,2015-10-20 16:18:04
425,2015-10-20 16:18:04,"Closed, due to #427
",GreLI,2015-10-20 16:18:04
424,2015-09-04 11:35:26,"So it could be pretty and a bit smaller :) 2 is the new 4 anyway :dancer: 
",lipis,2016-04-14 13:49:03
424,2015-09-04 14:54:07,"Thats why tabs where invented, so you can make the editor decide. 
",nathanuphoff,2016-04-14 13:49:03
424,2015-09-04 14:59:26,"@nathanuphoff tabs were invented to save physical space.. something that is not applicable anymore.. tabs should die :)
",lipis,2016-04-14 13:49:03
424,2015-09-04 15:00:18,"http://blog.codinghorror.com/death-to-the-space-infidels/
",lipis,2016-04-14 13:49:03
424,2015-09-06 17:10:11,"@lipis Tabs have the advantage that every developer can set their preferred tab width and they’re done with it. Spaces can’t do that, so you prefer two, and someone else will want four which depicts exactly where spaces suck. You can argue over why two spaces is better than four but with tabs you don’t need to. No arguing, no reformatting wars, no bullshit trivial sh- but code without forcing your amazing superior style on everyone.

There you are, and there’s a complimentary link: http://images6.fanpop.com/image/photos/35100000/Norman-leon-35112912-245-150.gif
",nathanuphoff,2016-04-14 13:49:03
424,2015-11-26 11:06:44,"@GreLI What's your stance on that one? Would it make sense if not by default, being able to pass an argument for it?
",lipis,2016-04-14 13:49:03
424,2015-11-26 18:02:16,"I don't mind. It's not hard to do, PRs are always welcome ;-)>
",GreLI,2016-04-14 13:49:03
424,2016-02-28 23:15:47,"It would be really cool if SVGO would either accept an indentation CLI option or default to respect the [`.editorconfig`](http://editorconfig.org) file, if present.
",jaydenseric,2016-04-14 13:49:03
424,2016-02-28 23:19:57,"@jaydenseric Not sure why would SVGO even think about using or respecting `.editorconfig`.. :confused: `.editorconfig` is for editor's configurations :) open the `.svg` in your editor and it will be respected..
",lipis,2016-04-14 13:49:03
424,2016-02-28 23:37:44,"`.editorconfig` is a centralized place to set encoding and formatting for all text files, so that you don't have to manually configure all your tools separately for consistency. SVGO is editing the SVG files, it is an editor.

Often, I will open the `--pretty` optimized files in Atom to make manual edits. Problem is, Atom conveniently respects my established SVG formatting config but SVGO doesn't and the files end up inconsistent.

Another benefit to respecting the config, other members from the team can jump in and start optimizing without having to ask anyone about the formatting. I don't trust everyone to laboriously follow up SVGO optimizations with manual reformatting to conform to our standards.
",jaydenseric,2016-04-14 13:49:03
424,2016-02-28 23:50:33,"I know exactly what editorconfig is.. but last time I checked SVGO is not editor.. it's a command line tool..
",lipis,2016-04-14 13:49:03
424,2016-03-16 12:40:15,"@jaydenseric I for one would be really confused if SVGO behaved differently on different machines, depending on editorconfig settings.

This whole issue seems a bit pointless anyway. Can't you just run the outputted files through a prettifier with settings for your team?
",vaughandroid,2016-04-14 13:49:03
424,2016-04-14 13:49:03,"You can change it with `--indent 2` option since v0.6.4.
",GreLI,2016-04-14 13:49:03
424,2016-04-14 14:08:27,":+1: 
",lipis,2016-04-14 13:49:03
424,2016-04-14 14:10:21,"Thank you for that! https://github.com/lipis/flag-icon-css/pull/220
",lipis,2016-04-14 13:49:03
423,2015-09-02 15:25:09,"Adds a setDimensions plugin that allows users to specify a width and height for their svg.
",allypalanzi,2016-11-13 09:36:02
423,2015-09-02 18:25:20,"Since the plugin needs only an outer `<svg>` it's better not to run it against every element, but use `var svg = data.content[0]` with `exports.type = 'full'` like it's done in [plugins/addClassesToSVGElement.js](/svg/svgo/blob/master/plugins/addClassesToSVGElement.js) (XML-prolog and doctype should be normally removed by corresponding plugins executed before).

Also, the value “50” of `width` and `height` seems to be too arbitrarily. It's better to set to common icon size like 16×16.
",GreLI,2016-11-13 09:36:02
423,2015-09-02 18:29:22,"Good point! I'll make that update. 50 was totally arbitrary – the idea was that it could be configured. 
",allypalanzi,2016-11-13 09:36:02
423,2016-11-13 09:36:02,"The plugin is trivial, so I'm closing it until a more elaborated version will come.
",GreLI,2016-11-13 09:36:02
422,2015-09-02 13:04:47,"The precision option currently sets the number of digits in the fractional part, as this is an obvious choice - you end up with less characters - yet it’s a rather dumbed down version of what the name suggests. Precision should account for the amount of increments per point/pixel. 

An example, 8.68285322 will currently cut off numbers until the preference is matched and will probably round the last fraction to preserve optical integrity. What would make more sense is divide a point and snap the fractional part to it’s nearest neighbor:

-p 1 rounds to 1/1 (.0) points, the example becomes 9
-p 2 rounds to 1/2 (.5) points, the example becomes 8.5
-p 3 rounds to 1/3 a third of (.333) points, the example becomes 8.666

Etcetera:
-p 4 becomes 8.75
-p 5 becomes 8.8
-p 6 becomes 8.666
-p 7 becomes 8.714
-p 8 becomes 8.625
-p 9 becomes 8.666
-p 10 becomes 8.7

This works both in terms of precision and in terms of saving bandwidth, the fraction would never have to rise above 3 fraction digits. The values for this preference remain the same, so no additional effort there. 

Feedback is welcome. 
",nathanuphoff,2016-02-28 20:38:02
422,2015-09-02 13:21:29,"Every digit after a point adds a byte, that's why setting of number of digits influences the file size significally. Considering web graphics, 3 digits is enough almost every time, often it can be reduced to 2 or even 1 digit, but that's requires handling (svgo doesn't know how do one uses an image).

But for transformations, 3 digits is not enough due to fact their are being multiplied, so there is separate property which defaults to 5.

I don't see any sense in rounding to 1/3. It makes quality worse and brings nothing about optimizing. The only approach I may think of: multiply SVG units with corresponding ajust of `viewBox` to get rid of fraction parts. But in such a case one can just scale content and only then perfom rounding.
",GreLI,2016-02-28 20:38:02
422,2015-09-02 13:46:43,"I see your point, I guess it comes from just about any svg drawing application somehow getting their rounding messed up: whole points get values like 0.01245423. This off course has nothing to do with SVGO yet is annoying the life out of me all the same.

A precision setting for 0 (round to point), and .5/.25 (half/quarter point) would be amazing either way, despite it having not much to to with size optimization. Cheers.
",nathanuphoff,2016-02-28 20:38:02
421,2015-09-02 07:08:00,"<S_CODE_TOKEN>

Original file:
![original](https://cloud.githubusercontent.com/assets/432211/9624913/8adeb296-5151-11e5-8f3e-0bae8c673619.png)

Distorted file after running `svgo linkedin.svg`:
![distorted](https://cloud.githubusercontent.com/assets/432211/9624919/94897cea-5151-11e5-82cf-2c2b0e15e8b9.png)

Source of the original SVG:

<S_CODE_TOKEN>
",xeraa,2015-09-02 09:24:47
421,2015-09-02 09:27:02,"Thanks for reporting! That was a sophisticated bug.
",GreLI,2015-09-02 09:24:47
421,2015-09-02 09:44:06,"Thank you for the quick fix!
",xeraa,2015-09-02 09:24:47
421,2015-11-08 17:39:26,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-09-02 09:24:47
421,2015-11-09 16:42:21,"Thanks a lot! Looks much better now :)
",xeraa,2015-09-02 09:24:47
420,2015-09-02 06:39:02,"per investigation, a bogus `height` gets added/mutated file.  here is my `zia` svg!  note that the svg does have a `height` on it, but after running `svgo myfile.svg` that height ==> `height=""857470.148""` from `height=""226.87231mm""`.

Thanks.  cool package!

<S_CODE_TOKEN>
",cdaringe,2015-09-02 12:53:31
420,2015-11-08 17:39:39,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-09-02 12:53:31
419,2015-09-01 18:20:45,"If a g tag only has one child, apply the styles and attributes on the child then remove the <g> tag.
",nt1m,2016-11-19 14:42:23
419,2015-09-02 13:09:43,"Furthermore, change translate=""transform(10,10)""  to x=""10"" y=""10"" (shorter). And better yet, (optionally) inline styles to style=""properties:here"" which is in anmost any case the shorter syntax. Cheers.
",nathanuphoff,2016-11-19 14:42:23
419,2015-09-02 13:12:14,"`x` and `y` work only on limited set of tags. `style=` adds 6 bytes by itself and can be compensated also by more than 6 rules, which is rare, actually.
",GreLI,2016-11-19 14:42:23
419,2015-09-02 13:21:13,"Actually four is the threshold after which style becomes the more efficient option. Not worth it I would say: http://d.pr/i/1jB6A

I did not know about the x and y’s limitations in that regard. Thanks.
",nathanuphoff,2016-11-19 14:42:23
419,2015-09-02 13:26:07,"@nathanuphoff I think the W3C recommends inline attributes instead of inline styles. In fact, some CSS properties act differently than their SVG equivalents (transforms for example).
",nt1m,2016-11-19 14:42:23
419,2015-09-02 13:52:14,"@nt1m Clear. I’m pretty fresh to svg outside Sketch.app until some things annoyed me and I had to take a look below the surface. Consider me a newbie to the matter. It’s like learning html all over again, including all the quirks. 
",nathanuphoff,2016-11-19 14:42:23
419,2016-11-19 14:42:23,"Regarding the subject, `collapseGroups` plugin already does the job. Sometimes it can be missed because group is empty after later executed plugins, but the second run will optimize that. There's `--multipass` to run multiple times (10 times or until there's nothing can be optimized).
",GreLI,2016-11-19 14:42:23
418,2015-08-26 03:18:31,"I have been using `svgo --precision 7` to cleanup SVGs created in Sketch and today came across one that broke after optimisation. Chrome opens the result with an error in the console about an invalid path but Illustrator crashed every time I tried to open it.

Also, if I run with `--multipass` it adds NaN to the path (after the second or third pass I think).

Using `--precision 6` or any lower precision (e.g. default settings) doesn't have the same issue.

Original File

<S_CODE_TOKEN>

First Pass

<S_CODE_TOKEN>

Multiple Passes

<S_CODE_TOKEN>

Precision 6 (valid)

<S_CODE_TOKEN>
",breams,2015-08-26 08:01:12
418,2015-08-26 08:01:26,"Interesting case, thanks!
",GreLI,2015-08-26 08:01:12
418,2015-11-08 17:39:19,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-08-26 08:01:12
417,2015-08-25 15:48:14,"No breaking changes. Fix my big dependency tree where js-yaml isn't small one.
",TrySound,2015-11-08 17:37:33
417,2015-09-06 22:15:07,"/cc @GreLI
",TrySound,2015-11-08 17:37:33
417,2015-09-07 08:33:17,"Yeah, I've seen it. Usually, I update dependencies when releasing a new version.
",GreLI,2015-11-08 17:37:33
417,2015-11-08 17:37:33,"Dependencies have been updated in [v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0).
",GreLI,2015-11-08 17:37:33
417,2015-11-08 17:54:02,"@GreLI Thanks!
",TrySound,2015-11-08 17:37:33
416,2015-08-24 16:21:15,"Hi

SVGO simply empties my file:

<S_CODE_TOKEN>

Thanks
",crybat,2015-08-25 11:31:05
416,2015-08-24 19:32:31,"Yep, `symbol` isn't rendered and since there is no reference to it, it's being removed. You need to disable `removeUselessDefs` plugin.
",GreLI,2015-08-25 11:31:05
416,2015-08-25 11:27:14,"Thank you for answering.

I tried running `$ svgo --disable=removeUselessDefs svg.svg` with the same result.

`removeUselessDefs` doesn't even show up when I run `svgo --show-plugins`.

<S_CODE_TOKEN>

---

Edit: Nevermind, it worked. However, it's strange the plugin doesn't show. Is this expected behaviour?
",crybat,2015-08-25 11:31:05
416,2015-08-25 16:08:31,"I see it there right after `cleanupIDs` and `removeRasterImages`. Don't you?
",GreLI,2015-08-25 11:31:05
416,2015-08-26 09:09:55,"Oh wow. I do. Must have had a brain fart or something. Sorry.
",crybat,2015-08-25 11:31:05
416,2015-08-26 22:03:37,"I just thought, that it's better to disable `cleanupIDs` since you're referrencing to these symbols, right? And then items with IDs shouldn't be removed.
",GreLI,2015-08-25 11:31:05
416,2015-08-27 08:12:58,"Yea, I figured that out. Thanks.
",crybat,2015-08-25 11:31:05
415,2015-08-19 20:06:15,"I'm seeing path distortion in the upper left and lower right of the following image, using the default settings:

<S_CODE_TOKEN>

Original:
![screen shot 2015-08-19 at 10 05 09 pm](https://cloud.githubusercontent.com/assets/115237/9367567/6eb4277e-46be-11e5-9f11-e27629d0e833.png)
Optimized:
![screen shot 2015-08-19 at 10 05 17 pm](https://cloud.githubusercontent.com/assets/115237/9367569/6ef10d2e-46be-11e5-9cfa-01bbf96dd0da.png)
",silverwind,2015-09-18 16:18:28
415,2015-09-18 16:17:40,"Well,

<S_CODE_TOKEN>

helps with such an issue.
",GreLI,2015-09-18 16:18:28
415,2015-11-08 17:40:04,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-09-18 16:18:28
415,2015-11-08 21:32:28,"Awesome, thanks!
",silverwind,2015-09-18 16:18:28
414,2015-08-08 08:43:03,"See for example:

  http://bost.ocks.org/mike/simplify/
  http://stackoverflow.com/questions/13730062/simplifying-svg-path-strings-by-reducing-number-of-nodes

We need to be smarter with curves.

I need this, to optimize flag SVGs in https://github.com/behdad/region-flags/tree/master/svg
Currently some of the flags are over 200kb.   That's a bit on the excessive side. :)

cc @jamesgk
",behdad,2015-08-08 11:40:54
414,2015-08-08 11:31:58,"See #411
",GreLI,2015-08-08 11:40:54
414,2015-08-08 11:40:54,"Awesome.  Lets follow up there.
",behdad,2015-08-08 11:40:54
413,2015-08-07 19:37:32,"As of `v0.5.4`/`v0.5.5`, the path of the below SVG is invalidated due to the new regex (created to fix #405), and the `<path>` is removed completely.

<S_CODE_TOKEN>

This happened as of `v0.5.4`/`v0.5.5` due to [this commit](https://github.com/svg/svgo/commit/8ec45b7251c71d171597a8bc97cb609f918ac686). [Old regex](http://rubular.com/r/3HIdyQVfHc) validated the path fine (used in `v0.5.3`), but the [new regex](http://rubular.com/r/r55OTzrrFS) doesn't.
",cdl,2015-08-13 16:19:51
413,2015-08-08 13:37:46,"extra dot in `(?![\de.])`, my bad
",GreLI,2015-08-13 16:19:51
412,2015-08-07 12:42:58,"Add description to eliminate ugly `undefined` in `--show-plugins` output
",cy6erskunk,2015-08-08 11:32:35
412,2015-08-08 11:32:30,"Ah, forgot that part.
",GreLI,2015-08-08 11:32:35
412,2015-09-09 10:15:57,"Is it possible to pass a pattern while running this plugin in cli? Something like `svgo ... --enable removeAttrs=attr`?
",evenfrost,2015-08-08 11:32:35
412,2015-09-09 10:18:38,"Found it in #361, sorry for bothering.
",evenfrost,2015-08-08 11:32:35
411,2015-08-03 21:44:57,"Maybe a curve could be approximated (so that optionally you loose some detail?). 

svgo already did an amazing job minimizing a test svg of mine (170kb => 22kb), but hey you can always ask for more ;) 
",Quentie,
411,2015-08-03 22:01:21,"Yep, I was thinking about it, but haven't got to it yet. Many plans, but very little time.
",GreLI,
411,2015-08-03 22:22:40,"I suppose this is at least related to Inkscape's ""simplify"", right?
",waldyrious,
411,2015-08-03 22:29:04,"@waldyrious Yes this looks like what I was thinking off ...  
",Quentie,
411,2015-08-04 13:38:06,"May be you were meant Illustrator? Inkscape is quite bad here.
",GreLI,
411,2015-08-04 13:46:01,"I have not tested inkscape's 'simplify' (just had a look at their user manual to see what waldyrious was talking about...). 
Just wanted to say that this is generally what I was thinking about (no clue, if it is implemented in a good or bad way).
",Quentie,
411,2015-12-24 14:41:22,"You have http://bost.ocks.org/mike/simplify/ which has some witty js code for line simplification.
",hugolpz,
411,2015-12-25 06:18:30,"Line simplification isn't an issue, actually. Lines takes only 1 pair coordinates, while curves takes 3. Sometimes, it only takes one number (horizontal or vertical line). So one curve is 3 times larger. And there are rarely images which actually needs line simplification, while there are image that may have too many curves and can be simplified without a notable loss.
",GreLI,
411,2016-02-10 03:58:16,"Here's paper.js's curve simplify in action:

http://paperjs.org/examples/path-simplification/
https://github.com/paperjs/paper.js/blob/develop/src/path/PathFitter.js
http://paperjs.org/reference/path/#simplify

Should be rather trivial to integrate into a plugin.
",behdad,
411,2016-09-14 11:20:18,"@GreLI a single curve is 3 times larger than a single line, but to get even an approximation to such a curve, one would need multiple lines, not 1. So for similar geometry, whether it's represented as curves or lines, actually the lines version occupies much more space.

Of course, simplifying curves (which can at least make a reasonable attempt at preserving the shape of the curve while using less nodes) will generally produce more visually appealing results than simplifying the equivalent sequence of lines into a sequence with less nodes. The ideal approach would be to simplify sequences of lines into _curves_, which can then try to trace the original path by clever usage of the curve parameters.
",waldyrious,
411,2017-03-08 16:51:28,"for reference, this module seem to also approximate a linestring with bezier curves - https://www.npmjs.com/package/turf-bezier

",jeromew,
411,2017-03-09 11:30:36,"I post this in case someone wants to work on this for svgo (I only discovered svgo via this github issue).

Here is the smallest (server-side + canvas-less) sequence I could find to use the PathFitter of paper.js mentioned by @behdad  in order to approximate a path with curves. The compression results are indeed impressive even for complex linestrings and high tolerance.

<S_CODE_TOKEN>
",jeromew,
410,2015-08-03 21:01:46,"Replace please colors with [chalk](https://github.com/chalk/chalk). It more safe, because do not modify prototypes.
",TrySound,2015-08-25 17:25:23
410,2015-08-25 16:01:02,"There is nothing bad in modifying prototypes in controlled environments (e.g. not in browsers). And I see nothing worthy in creating extra dependency for the functionality that's already present.
",GreLI,2015-08-25 17:25:23
409,2015-07-31 18:25:29,"For example, this svg:

<S_CODE_TOKEN>

would be converted to:

<S_CODE_TOKEN>

I tried looking through the documentation and couldn't find anything about the xmlns attribute. Thanks in advance.
",drw158,2015-07-31 21:25:15
409,2015-07-31 20:23:39,"Ironically, the `xmlns` attribute is the _only_ thing required to produce a valid svg file. See https://github.com/mathiasbynens/small/blob/master/svg.svg?short_path=5fda422 (or try validating the second code snippet as SVG in http://validator.nu)
",waldyrious,2015-07-31 21:25:15
409,2015-07-31 21:25:13,"Thank you! I'll leave the attribute in.
",drw158,2015-07-31 21:25:15
409,2015-08-04 13:35:28,"You can write a [simple plugin](https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#3-plugins). When there are several SVGs inlined in HTML there is no real need to keep `xmlns` in each one.
",GreLI,2015-07-31 21:25:15
408,2015-07-31 14:13:10,"The following svg has no path anymore after running svgmin:

<S_CODE_TOKEN>

becomes

<S_CODE_TOKEN>

Running from `grunt-svgmin` with the following options:

<S_CODE_TOKEN>

Export of the SVG was done with Inkscape.
",gustavpursche,2015-08-13 16:24:04
408,2015-08-04 13:28:30,"Same bug as in #405.
",GreLI,2015-08-13 16:24:04
408,2015-08-13 16:24:04,"Fixed in the latest version.
",GreLI,2015-08-13 16:24:04
407,2015-07-20 18:03:53,"<S_CODE_TOKEN>

outputs

<S_CODE_TOKEN>
",GreLI,2015-08-05 13:42:45
406,2015-07-20 14:55:53,"See working example here: https://github.com/mailzwj/sstp/blob/master/svg-shape-to-path.js
",onlymega,2016-02-28 20:36:44
406,2015-07-20 18:01:01,"Circle and ellipse hasn't been added because they're have less bytes in a form of `circle` and `ellipse` tags instead of `path`.
",GreLI,2016-02-28 20:36:44
406,2015-07-21 11:49:50,"But when there are a lot of circles it is better to convert them to path and merge. You can add ellipse and shapes conversion and and add a flag for those who want convert them. 
",onlymega,2016-02-28 20:36:44
406,2015-07-21 14:07:16,"It may be so, but there is no such a logic for now. It requires sophisticated algo that doesn't fit in current design. May be in future, when there'll be much better architecture (it's in early planning stage).
",GreLI,2016-02-28 20:36:44
405,2015-07-18 17:11:23,"In reference to #151 I seem to be experiencing similar issues when optimizing an .svg exported with Sketch. Below are the details of the output. One note, I have enabled a compact svg export from Sketch with the following setting:

<S_CODE_TOKEN>

Initial (pre-svgo optimized) export from Sketch provides the following:

<S_CODE_TOKEN>

The resulting image:

![screen shot 2015-07-18 at 1 06 21 pm](https://cloud.githubusercontent.com/assets/794809/8762667/d7386fa6-2d4d-11e5-9343-a55a48b5eb8b.png)

After svgo optimization:

<S_CODE_TOKEN>

And resulting image:

![screen shot 2015-07-18 at 1 08 53 pm](https://cloud.githubusercontent.com/assets/794809/8762680/35d16d10-2d4e-11e5-9dce-699640c97244.png)

**Note**: I changed `id=FileExtension fill=""#000""` in the last line to show the text is in fact there

Any help is greatly appreciated! Thanks.

Ping @GreLI 
",pruett,2015-07-18 17:37:50
404,2015-07-16 17:29:47,"Is it possible to use svgo for fonts? I've tried to run version 0.5.3 on OpenSans.svg and it transformed the following:

<S_CODE_TOKEN>

Into this:

<S_CODE_TOKEN>
",olegskl,2015-10-20 16:18:59
404,2015-08-04 13:14:24,"Was having the same problems via image-webpack-loader. 

You might want to set removeUselessDefs to false. 

Webpack config

<S_CODE_TOKEN>
",snorripall,2015-10-20 16:18:59
404,2015-08-04 13:38:45,"Have you tried disabling `removeUselessDefs`?
",GreLI,2015-10-20 16:18:59
404,2015-08-04 17:55:28,"@GreLI we (@snorripall and myself) did that and our iconmoon fonts work — it's because all the content of svg fonts is in `<defs>`. 
",ThisIsMissEm,2015-10-20 16:18:59
404,2015-08-24 08:31:20,"Seems to be working with `removeUselessDefs: false`.
",olegskl,2015-10-20 16:18:59
404,2015-11-16 12:31:13,"How can I use 'removeUselessDefs: false' in console? I normally do something like:

`$ svgo -f ../path/to/svg/image.svg -o ../path/to/svg/image.min.svg`
",HoBi,2015-10-20 16:18:59
404,2015-11-16 13:00:01,"<S_CODE_TOKEN>
",GreLI,2015-10-20 16:18:59
403,2015-07-15 04:30:51,"Programs like Illustrator never export SVGs with elemets like `<linearGradient>` within a `<defs>` tag. It's not a requirement according to the spec, but along the lines of SVG sprites used in HTML, there are situations where gradients have to be defined in a `<defs>` instead of in a `<g>` or `<symbol>`. Is there a plugin to do this automatically? Would it be hard to make one?
",Jakobud,2016-02-28 20:36:10
403,2015-07-15 17:05:54,"No, there is no such a plugin I'm aware of. But the requirement is strange. The only purpose of `defs` is to prevent rendering reference elements. It's perfectly safe to use non-rendering elements like `linearGradient` without `defs`. Also, you can refer to other elements that aren't in `defs` as well.

Images can be even optimized in a such way, because you anyway using those elements somewhere, right? So, no, there is no such a plugin. Of couse, you can write it's by yourself, but currently there is no good API to moving elements around, just adding it to one content and removing from the old one.
",GreLI,2016-02-28 20:36:10
403,2015-07-15 19:18:17,"I will dig up an example of the situation I'm referring to and get back to you.
",Jakobud,2016-02-28 20:36:10
402,2015-07-14 08:45:49,"I want to resize an svg icon with one path:

<S_CODE_TOKEN>

and the results contains _some_ NaN values in the path:

<S_CODE_TOKEN>

Obvious the svg image is broken. I' ve used gulp-svgmin for that but it uses svgo for manipulating svg images. Here are the params for the plugin:

<S_CODE_TOKEN>

I' ve played around with the params. It gets better with these options:

<S_CODE_TOKEN>

The result:

<S_CODE_TOKEN>

Did I something wrong?
",snej51,
402,2015-08-05 13:54:02,"I guess `transformWithOnePath` just doesn't handle absolute coordinate commands.
",GreLI,
402,2016-05-11 10:58:01,"Any progress to this issue?
",hh9527,
402,2016-05-11 13:31:46,"No, but if you run it with `convertPathData` plugin with `utilizeAbsolute: false`, it'd do the job.
",GreLI,
401,2015-07-10 23:00:15,,jdforrester,2015-07-11 10:44:27
400,2015-07-10 20:07:48,"I'm using webpack and svgo-loader. Some svgs seem to result in this exception:

![out](https://cloud.githubusercontent.com/assets/4250234/8628055/90a699ae-271d-11e5-93bd-dfcc0141c9d8.png)

Here's what `cam.svg` looks like:

<S_CODE_TOKEN>

Any idea what might be causing this?
",colindresj,2015-07-10 22:40:55
400,2015-07-10 20:18:55,"Yeah, it's bug fixed in #394, it occurs when svgo optimize transform to empty state. In your case `translate(-6.000000, -8.000000)` and `translate(6.000000, 8.000000)` mutually cancel. As a workaround for the moment you can temporary disable `convertTransform`, then it should optimize normally.
",GreLI,2015-07-10 22:40:55
400,2015-07-10 22:40:55,"Cool thanks. I'll give that a shot for now
",colindresj,2015-07-10 22:40:55
399,2015-07-10 13:51:28,"First of all, thank you of this wonderful piece of software! :sparkles: 

Currently I use svgo to optimize a set of various svg files. 
I've noticed some of them still have `<style type=""text/css"">` blocks and `<g id=""foo"">` wrapper after processing with svgo. I tried all possible combinations, played with [SVGOMG](https://jakearchibald.github.io/svgomg/) but couldn't manage to get these pieces removed.

The SVG's were created with _Adobe Illustrator 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)_ as you see in the samples. The path btw is a simple circle for demo purposes.

**raw svg**

<S_CODE_TOKEN>

**optimized svgo output**

<S_CODE_TOKEN>

In the optimized svg output you see the unnecessary `<style>.st0{display:none;}</style>` block as well as the `<g id=""debit"">` wrapper. Is there a way to get these blocks removed by any current plugin. Or could this be a possible request for a feature plugin.

**expected optimized output**

<S_CODE_TOKEN>
",m5o,2016-02-28 20:35:14
399,2015-07-10 19:06:57,"Unfortunately, svgo now doesn't parse `style` tags and thus it's not supported. svgo can't understand the meaning of stylesheets for now. Of course this is subject to work on in future.

Regarding empty `g`, it should be removed in the second run or with `--multipass` comand-line option. Again, with the current architecture there are always cases in which plugins runned one by one aren't fully efficient, and there are plans for improvement. But it requires a lot of coding, so it'll be done not soon.
",GreLI,2016-02-28 20:35:14
399,2015-08-14 16:30:18,"+1 quick export to svg from photoshop CC add style,

It could be cool to remove it :)
",stephanedemotte,2016-02-28 20:35:14
399,2015-09-09 09:27:37," :+1: Came here right for this. Would be nice to have option to remove redundant tags like `<style>`.
",evenfrost,2016-02-28 20:35:14
399,2015-09-09 16:19:52,"Actually, it was done recently in #427.
",GreLI,2016-02-28 20:35:14
399,2015-10-07 13:08:38,"I also have a use case where I need to copy the contents of CSS classes in `<style>` blocks outputted by Illustrator/Photoshop into attributes to make them work with SVG Symbol sprite sheets.

The plugin @GreLI mentions (convertStyleToAttrs #427) makes it a lot easier, but there is still a manual step of copying the classes in the `<style>` blocks into style attributes.

Would it make sense if there was a separate plugin for this or for it to be rolled into convertStyleToAttrs or as part of the proposed 'remove `<style>`' plugin?
",ianmcgregor,2016-02-28 20:35:14
399,2015-10-07 16:41:24,"It needs a CSS parser which svgo doesn't have yet.

Also, CSS may have interesting things like media-queries, and it's an open question to pass styles from those.
",GreLI,2016-02-28 20:35:14
399,2015-10-13 03:29:15,"Also came here for this.
",rachelnabors,2016-02-28 20:35:14
399,2015-10-14 08:37:25,"@GreLI Thank you for your answer. 

Do you also have some infos about the unnecessary `<g id=""foo"">` wrapper?
",m5o,2016-02-28 20:35:14
399,2015-10-14 18:45:38,"@m5o, it's the same story. Normally, `cleanupIds` wipes unused ids and than empty group is collapsed. But since there is `<style>` element, `cleanupIds` can't tell anymore that id is unused.
",GreLI,2016-02-28 20:35:14
398,2015-07-09 22:07:17,"There is opportunity to reduce file size by using a smart resize feature.

Below are 2 scenarios that are simplifications. Imagine this applying to paths with 100s of anchors; the file savings could be huge!

I'm not sure how to execute this feature other than a script that multiplies everything by a number (10 in scenario 1) and seeing if the file size is smaller than the original, then run it again until all the file size doesn't get smaller.
## Scenario 1 - Decimal Location

Adjust size in multiples of ten to reduce unnecessary zeros after decimals.

Before

<S_CODE_TOKEN>

After:

<S_CODE_TOKEN>
## Scenario 2 - Common Multiple

Adjust size in intervals (in this case multiples of 2) to reduce unnecessary numbers.
Before:

<S_CODE_TOKEN>

After:

<S_CODE_TOKEN>
",philbar,2015-07-09 22:12:41
398,2015-07-09 22:12:41,"See #293
",GreLI,2015-07-09 22:12:41
397,2015-07-06 12:29:10,"### Void Elements

See [W3 HTML Syntax - Elements](http://www.w3.org/TR/html-markup/syntax.html#syntax-elements)

There's a shortlist of elements in HTML5 that are considered void elements. Void elements do not need a closing tag and are instead terminated with `/>`.

For e.g. `<hr />`
### svgo (js2svg) short tags

[Here](https://github.com/svg/svgo/blob/master/lib/svgo/js2svg.js#L236) you implement the closing `/>` for any element that has no content (empty elements and short tags). I assume this is an optimisation strategy.
### SVG in HTML

When the SVG resulting from svgo is put into an HTML document and served into a browser, many browsers will autocorrect the markup. They will find tags that are not permitted to use `/>`, and will automatically insert a closing tag. 

E.g. `<path d=""M4 14l20 20 20-20""/>` becomes `<path d=""M4 14l20 20 20-20""><path>` when loaded in an HTML page in Google Chrome.
### Issue

Aside from the fact that it's technically valid (since it's SVG not HTML), 

> A non-void element must have an end tag, unless the subsection for that element in the HTML elements section of this reference indicates that its end tag can be omitted.

this has caused me issue in an isomorphic ReactJS application. The server responds with markup including the `/>`, which Chrome replaces with `</path>`. Then, the ReactJS client side application attempts to reuse markup but finds an incosistency between the new markup to be injected (which again contains the `/>` and the markup already in the DOM `</path>`. ReactJS therefore throws a warning.
### Solution (PR)

I've implemented a simple config option to be forwarded to js2svg to decide between using short or full closing tags:

https://github.com/svg/svgo/pull/396
",bradbarrow,2016-01-04 17:16:22
397,2016-01-04 17:16:20,"I guess the issue is obsolete since the PR is merged.
",GreLI,2016-01-04 17:16:22
396,2015-07-06 12:13:19,"Allow config to specify `useShortTags` (default true).

When `useShortTags` is true, empty elements are terminated with />

When `useShortTags` is false, empty elements are closed with a full closing tag
e.g. < / path >
",bradbarrow,2015-07-06 18:48:32
396,2015-07-06 18:48:33,"Nice job!
",GreLI,2015-07-06 18:48:32
396,2015-07-07 01:07:10,"Thanks @GreLI - I noticed the build has broken on this change - I was intending to fix that error this morning. Is that something you can fix easily?
",bradbarrow,2015-07-06 18:48:32
396,2015-07-07 12:09:12,"No, it's my previos commit. Don't worry.
",GreLI,2015-07-06 18:48:32
396,2015-07-08 21:56:23,"FIxed it today.
",GreLI,2015-07-06 18:48:32
396,2015-08-06 01:39:58,"Hey @GreLI what's the plan looking like for this change?
",bradbarrow,2015-07-06 18:48:32
396,2015-08-06 01:40:53,"Ah, I see a release just recently! Thanks :+1: 
",bradbarrow,2015-07-06 18:48:32
395,2015-07-03 04:39:18,"I've noticed that this project doesn't do any sanitization to the inputted svg—i.e. if someone throws a `<script>` tag in the `<svg></svg>` it won't be stripped.

If I'm using the node module version of this project, where users input their own svgs which other users can later load in their browser, are there security vulnerabilities? My guess would be yes, since a user could just add a `</svg>` into the evaluated textarea and then put any script they wanted in after that. 
",nikkwong,2015-07-03 21:52:24
395,2015-07-03 13:43:59,"Well, svgo isn't a security tool. You can write a plugin that removes script tags.
",GreLI,2015-07-03 21:52:24
394,2015-07-01 15:09:22,"This SVG file [here](https://gist.githubusercontent.com/jedrichards/093f32739c40e4fa1a1d/raw/f121ea0f1290c47fad4d4e4ab8219010209ee36a/icons.svg) fails to optimise using the latest version of svgo 0.5.3.

Just running the simplest possible command,

<S_CODE_TOKEN>

Fails to optimise the file, yet also produces no error messages.

The exact same file works fine on svgo 0.5.0 so there's been some sort of regression maybe?

Since 0.5.0 > 0.5.3 is just a semver patch number increase this caused our build process to upgrade the module, but since no errors are produced it means we've been serving unoptimised svg spritesheets to production for some time :O

Thanks!
",jedrichards,2015-07-05 10:11:33
394,2015-07-05 10:15:10,"Curios that you can workaround this by optimizing one time with disabled `convertTransform` or `convertPathData` and then it'll be processed normally.
",GreLI,2015-07-05 10:11:33
393,2015-06-27 06:58:43,"Origin element:

<S_CODE_TOKEN>

Element after optimization:

<S_CODE_TOKEN>

Result skewed ellipse larger then origin:
![Incorrect skew transform](https://monosnap.com/file/xlEJNkVEj73dsuwwWCIrZbJLBa1VKF.png)
If we convert arc path to beizer using svgpath@2.0.0, we have correct transformation resulting path:

<S_CODE_TOKEN>

I think that skew transformation algorithm for path with arcs have a some error.
",betula,
393,2016-02-28 20:30:27,"Unfortunately, (transformed) arcs are very fragile. Replace `4.58` with `4.5786` and you'll get it very close to the original. Even `4.579` isn't so bad, but `4.578` is even better and still very close, though not strictly mathematically correct. Probably, there should be a better rounding operation for such cases.
",GreLI,
392,2015-06-26 20:55:48,"Origin SVG path:
M12 10h16a2 5 0 0 1 2 5v10a2 5 0 0 1-2 5H12a2 5 0 0 1-2-5V15a2 5 0 0 1 2-5z
Using: 
transform: rotate(1)
Result for native browser rotation:
![Native rotation](https://monosnap.com/file/xhqvOD5HhRfMDe2zb8JgBZGFH8w4wV.png)
Result path for optimized transformation:
M11.824 10.208l15.997.28a2 5 1 0 1 1.914 5.033l-.175 10a2 5 1 0 1-2.088 4.964l-15.997-.28a2 5 1 0 1-1.913-5.033l.175-9.998a2 5 1 0 1 2.087-4.964z
Result in browser:
![Optimized rotation](https://monosnap.com/file/NywLMKnTZoVpVhmXamapaiGDUDiVve.png)

Environment:
os x 10.9.5
Chrome 43.0.2357.124 (64-bit)
",betula,2016-11-13 10:46:52
392,2015-06-28 06:15:35,"Sorry, I added stroke after the transformation, but it is not correct.
Everything works fine paths with stroke not apply transformation.
Thank you for a great tool!
",betula,2016-11-13 10:46:52
392,2016-02-28 16:57:35,"That's because of ending `z`. Looks like a browser bug in rendering.
",GreLI,2016-11-13 10:46:52
391,2015-06-23 18:57:52,"Noticed a typo in the readme when trying to use the convertStyleToAttrs plugin.
",magnus-bergman,2015-06-23 19:25:46
390,2015-06-22 14:11:25,"Added option ""dontUseDefaults"" which allows to not load default configuration.
It is usefull if you want to control what's going on with your SVG and don't want to list all available packages in your config.
",Kreozot,2015-09-21 11:49:58
390,2015-06-22 15:20:22,"How it differs from `full: true` in config?
",GreLI,2015-09-21 11:49:58
390,2015-06-22 15:29:16,"I'm glad you asked. Because first i was thinking that ""full"" flag is what i wanted. But with it ""floatPrecision"" parameter doesn't work. And also it is not documentated (so I don't figured out what is this for).
If you say that ""full"" flag is for ignoring the default config, so it still needs some code and documentation changes.
",Kreozot,2015-09-21 11:49:58
390,2015-07-05 06:27:56,"So, @GreLI, what's your decision?
",Kreozot,2015-09-21 11:49:58
390,2015-07-05 09:21:04,"I believe, problems must be solved, not workarounded.
",GreLI,2015-09-21 11:49:58
390,2015-07-06 12:07:19,"Can I speak with you on russian? Because i don't follow you.
Twitter/mail? What do you prefer?
",Kreozot,2015-09-21 11:49:58
390,2015-08-18 07:42:57,"Hello!  @GreLI! Anybody!
",Kreozot,2015-09-21 11:49:58
390,2015-08-19 20:59:54,"Haven't looked into the problem yet.
",GreLI,2015-09-21 11:49:58
390,2015-11-08 17:40:11,"[v0.6.0](https://github.com/svg/svgo/releases/tag/v0.6.0) with the fix have been just released.
",GreLI,2015-09-21 11:49:58
390,2015-11-09 07:52:48,":+1: Thanks
",Kreozot,2015-09-21 11:49:58
389,2015-06-20 12:13:57,"When using the node.js config, having removeMetaData instead of removeMetadata will crash (can't find the plugin)
",eXon,2015-06-20 12:15:07
388,2015-06-17 14:18:25,"Hi,
I'm trying to use this library to optimize a SVG font file.

I have an attribute `unicode=""&#xE800;""` that is transformed into `unicode=""""`

There is any way to maintain the previous value?

Thanks,
Paul
",devel-pa,2016-02-28 16:46:58
388,2015-06-17 14:22:16,"Not for now.
",GreLI,2016-02-28 16:46:58
387,2015-06-16 16:05:51,"I'm currently able to consistently run it with `--multipass` multiple times (like 5 or 6) until it finally says that there were 0% savings.
",stevenvachon,2016-02-28 16:44:49
387,2015-06-21 14:00:43,"It's already doing so, but just limited to 10 times.
",GreLI,2016-02-28 16:44:49
387,2015-06-21 23:59:25,"It runs multipass a max of 10 times, but not until 0% changes.
",stevenvachon,2016-02-28 16:44:49
387,2015-06-22 15:18:28,"Yes, that's the point of the limit. Not to run for too long.
",GreLI,2016-02-28 16:44:49
387,2015-06-22 15:29:19,"Yeah, but is it checking ""if 0% change on last run, end"", or simply ""run 10 times""? I'm having to run multipass multiple times to achieve this. I understand the desire to avoid lagging the system by running it 400 times, but there should at least be an option to run until it technically does not need to be ran again (`maxPasses:Infinity`).
",stevenvachon,2016-02-28 16:44:49
387,2015-07-20 23:33:53,"This feature would be nice. I assume it would have to stop eventually, right? :)

I want it ""optimized"", not just smaller. :)
",collinanderson,2016-02-28 16:44:49
387,2015-10-24 08:10:39,":+1: I have to manually run it multiple times because it always manages to optimize more even with `--multipass`.
",sindresorhus,2016-02-28 16:44:49
387,2015-10-24 19:05:06,"Actually, there is some weird stuff happens, it may give a little profit by the quality decrease. May be a lesser precision option will give you much more.
",GreLI,2016-02-28 16:44:49
387,2016-01-09 12:47:39,"How about an optimization level (like optipng) where it runs until it meets a threshold. My biggest concern is that running it a second time shouldn't change the file at all. When you're keeping your SVGs in version control, SVGO is a nice way to normalize them, but not if it modifies the file on every invocation.
",jimlamb,2016-02-28 16:44:49
387,2016-01-09 22:11:46,"I don't think that the authors care. It's been 7 months.
",stevenvachon,2016-02-28 16:44:49
387,2016-02-28 22:35:14,"Has this been fixed?
",stevenvachon,2016-02-28 16:44:49
387,2016-02-29 08:22:33,"Wouldn't fix.
",GreLI,2016-02-28 16:44:49
387,2016-02-29 16:31:45,"Not a good decision, in my opinion (as well as others).
",stevenvachon,2016-02-28 16:44:49
387,2016-03-01 11:55:49,"It'd just spend time for nothing. Ideally, there should be no changes after few iterations, but there are some rounding issues. It's not an optimization, just a picture little worse. If it's ok to you just decrease precision.
",GreLI,2016-02-28 16:44:49
387,2016-03-01 14:36:38,"Ok. Is there an issue created for correcting the rounding issues? With that fixed, it'd nullify our thoughts on needing this issue's feature.
",stevenvachon,2016-02-28 16:44:49
387,2016-03-01 18:49:44,"Only in my head :smiley:.
",GreLI,2016-02-28 16:44:49
387,2016-03-01 19:30:46,"Ah, then I've created an issue for it. Not that I think you'll forget, but we need a place to nag :wink:
",stevenvachon,2016-02-28 16:44:49
386,2015-06-12 19:23:41,"Readme says to run `svgo --show-plugins` to view available plugins to enable/disable. 

Running that results in `Unknown option: --show-plugins`. 

SVGO version 0.5.2
",jaepage,2015-06-21 19:25:17
386,2015-06-14 18:04:32,"Yes, it has been recently added in #380 after the release of v0.5.2.
",GreLI,2015-06-21 19:25:17
386,2015-06-14 18:11:32,"![pic 2015-06-14 at 11 09 46](https://cloud.githubusercontent.com/assets/4712441/8149798/0ff42f98-1286-11e5-9288-5ffd358d0175.png)
",jaepage,2015-06-21 19:25:17
386,2015-06-21 19:25:17,"[v0.5.3](/svg/svgo/releases/tag/v0.5.3) with this option has been just released.
",GreLI,2015-06-21 19:25:17
386,2015-06-21 19:40:16,"Confirmed. Thank you. 
",jaepage,2015-06-21 19:25:17
385,2015-06-12 19:19:19,"If an SVG is specified as the background-image of a DOM element in CSS, and if the SVG doesn't have a width and height in its code (on the SVG tag), the SVG background-image will display at the wrong size (at a really, really small size) in Internet Explorer 9. Unsure about IE10 & 11. 

The SVGO script preserves the viewbox attribute on the SVG element, but that's not enough for IE9. Adjusting the background-size in CSS can compensate, but that causes incorrect sizing on all other browsers. 
",jaepage,2015-06-14 19:18:31
385,2015-06-14 18:26:58,"So, what's the point?
",GreLI,2015-06-14 19:18:31
385,2015-06-14 18:32:16,"It is unexpected behavior for SVGO to strip width and height from the SVG element, as these are necessary for correct display in Internet Explorer when SVGs are used as background images. 

SVGO should not strip width and height from the SVG tag by default. If removal of width and height is desired for some cases, that should be an option for users to choose in such cases. 
",jaepage,2015-06-14 19:18:31
385,2015-06-14 18:58:54,"svgo doesn't strip width and height since a long time ago. Have you a recent version?
",GreLI,2015-06-14 19:18:31
385,2015-06-14 19:18:31,"Aha. You are correct. It was Adobe Illustrator that had stripped them before SVGO was even run. Thank you. 
",jaepage,2015-06-14 19:18:31
384,2015-06-11 12:56:23,"During a normal run of svgo it outputs something like

<S_CODE_TOKEN>

During a normal build that output really is not needed, only when I want to now more verbose what is going on.

Enhancement idea: Introduce a `--verbose` option and do the output above only if the option is given. Errors should of course always be output, regardless of the flag.
",datenreisender,2016-11-13 10:46:34
384,2016-02-28 16:31:30,"There was a `--quiet` option added in #445.
",GreLI,2016-11-13 10:46:34
383,2015-06-10 09:30:55,"Hi,

It seems that the toFixed function is called with a value of '-1' which is not between 0 and 20:
https://github.com/svg/svgo/blob/v0.5.2/plugins/convertTransform.js#L307

This is because the default value of the 'degPrecision' is zero:
https://github.com/svg/svgo/blob/v0.5.2/plugins/convertTransform.js#L89

Possible solution might be changing the default value to 1 instead of zero or not lessen the value when calling the toFixed function.
",BjornRombaut,2015-06-21 19:25:58
383,2015-06-10 13:30:25,"Yeah, thanks, e9d00c5c5704d6a3fad64f17c8e8c838ec273ffc adresses this.
",GreLI,2015-06-21 19:25:58
383,2015-06-12 14:48:00,"Hello, I confirm that @GreLI 's commit solves the fix, but doesn't seem to be released yet. when do you think it will be ? thanks
",swisstofu,2015-06-21 19:25:58
383,2015-06-19 19:01:14,"Hey I'm also having this problem -- can you please cut another release with this patch? 

there's no tag for it in npm at the moment. Thanks! 
",teeeg,2015-06-21 19:25:58
383,2015-06-21 19:25:58,"[v0.5.3](/svg/svgo/releases/tag/v0.5.3) with the fix has been just released.
",GreLI,2015-06-21 19:25:58
383,2015-06-22 12:56:28,"Works well, thanks.
",swisstofu,2015-06-21 19:25:58
383,2015-06-22 16:47:31,"Thank you!
",teeeg,2015-06-21 19:25:58
382,2015-06-09 05:12:55,"Hi,

I refactored to pass jshint check. I believe nothing's changed by this change.

I also set `jshint` target as a part of travis ci process, which should notify collabolators if lint is broken.

Thanks,
",kt3k,2015-06-21 15:41:43
382,2015-06-10 13:29:26,"jshint is just a hint. And actually replacing `""'""` with `'\''` makes code just worse. Robots for humans not vice versa.
",GreLI,2015-06-21 15:41:43
382,2015-06-10 14:56:05,"But enforcing the consistent style to every contributer is a good way to keep the quality of codebase, especially in open collaborative environment. Nobody wants to see code in broken style and discusions over style tend to be fruitless.
Anyway I reverted the quotmark modification and turned off quotmark checking in `coa.js`.
",kt3k,2015-06-21 15:41:43
382,2015-06-10 15:15:42,"Well, there are other points too. Like triple equality is totally dumb (I have encountered only bugs caused by it, not double). Actually, I've [corrected](/svg/svgo/commit/5e7caa49dcfcf08b4a2f284c4f3a85a53dd709f1) some real errors in code with jshint some time ago, and remaining has been left intentionally. 
",GreLI,2015-06-21 15:41:43
382,2015-06-11 16:41:11,"I reverted changes of equality operators and set `-W041` option to false in  `.jshintrc` (this is necessary to stop warnings of use of `==`).
But in general `==` operator is not a good thing because it invokes implicit coercion and could be a bug prone...

http://www.codeproject.com/Articles/182416/A-Collection-of-JavaScript-Gotchas#double-eq
",kt3k,2015-06-21 15:41:43
382,2015-06-11 19:02:24,"> But in general == operator is not a good thing because it invokes implicit coercion and could be a bug prone...

If you are using odd comparisons, yes it can, but nobody says you to write weird code.
“[You Don't Know JS](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20&%20grammar/ch4.md#loose-equals-vs-strict-equals)” excellent describes the topic.
",GreLI,2015-06-21 15:41:43
382,2015-06-11 19:20:07,"About the remaining. See, there is semicolon before closing “}” which is not necessary–it only adds noise to `if`s with array methods like `arr.some(function(){ foo; })`. Removing var in `for` loop can blow if the another `for`, where the `var` is declared, is gone. Absence of `0` before a dot can be confusing only for a very novice.

Rounding function in `convertPathData.js` is actually broken–it's intentionally replaces itself with the corresponding function in the first execution (we know precision only from passed parameter).

Probably, I'll drop `a2c` function in the future–it's been borrowed from Snap.svg, but I've made direct arcs transformation since then.

After that there is actually nothing left.
",GreLI,2015-06-21 15:41:43
382,2015-06-13 09:53:32,"I turned on `lastsemic` option, which suppresses the warnings of omitted semicolon only in the one-liner functions, and turned `W008` option off, which suppresses the warnings about the omission of leading decimal 0.

> Removing var in for loop can blow if the another for, where the var is declared, is gone.

I turned off warnings of double definition of vars in convexHull. (`-W004`)

> Rounding function in convertPathData.js is actually broken–it's intentionally replaces itself with the corresponding function in the first execution (we know precision only from passed parameter).

OK, I reverted this part. jshint doesn't seem to have the option to suppress this warning, so I turned off lint for this line.

And finally I reverted a2c's change as well (and made jshint ignore it.)

jshint is not only for styles but also can detect simple errors like spelling mistakes or scope errors, and basically it reduces human efforts around writing source code, and therefore I recommend keeping .jshintrc in this repo.
",kt3k,2015-06-21 15:41:43
381,2015-06-08 18:13:13,,tcoopman,2015-06-21 17:46:58
380,2015-06-07 10:49:44,"Hi,

I tried to add `--show-plugins` option to show the available plugins in cli. It would be convenient when the user forget the plugin names and he's offline.

I took the description of each plugin from `README.md` (Some are missing in README, then I took the first line of documentation in source code in those cases.)

Thanks,
",kt3k,2015-06-07 11:23:35
380,2015-06-07 11:23:33,"Looks nice!
",GreLI,2015-06-07 11:23:35
379,2015-06-06 23:11:38,"I have this:
http://imgh.us/bK.svg
But I get:
http://imgh.us/1bf27fed.bK.svg

What option can be used to keep the image detail?
",juangl,2015-06-08 16:42:20
379,2015-06-07 08:06:03,"Do you use the latest version—0.5.2? Looks like `mergePaths` bug, but it was reworked in the last 2 versions.
",GreLI,2015-06-08 16:42:20
379,2015-06-08 16:42:12,"Thank you. That solves the problem.
",juangl,2015-06-08 16:42:20
378,2015-06-04 23:28:19,"I have version 0.5.2. I used the svgo command with different variations of --multipass, --disable=removeUselessStrokeAndFill, --disable=convertPathData but none of them worked for me and I got image loss in all cases.

Before:
![screen shot 2015-06-04 at 4 00 26 pm](https://cloud.githubusercontent.com/assets/1175122/7996585/95374698-0ad6-11e5-9544-5a55194d20a0.png)

After: The BO in box is removed
![screen shot 2015-06-04 at 4 28 08 pm](https://cloud.githubusercontent.com/assets/1175122/7996588/9df0df24-0ad6-11e5-8d5c-de87426c9f05.png)

Here is the original file:
https://drive.google.com/file/d/0B8l8dIuxBRvKR3BBRzdiN3lJTUU/view?usp=sharing
",bbjunaid,2015-06-21 15:33:01
378,2015-06-05 12:27:56,"Well, the problem is triggered by `cleanupIDs`, but the file is illegal–it uses same id several times, and one of it is empty.
",GreLI,2015-06-21 15:33:01
378,2015-06-05 16:36:19,"Thanks for figuring out what the problem was! This file was generated automatically by Sketch and obviously can be rendered properly even though it has errors. To me this means `cleanupIDs` should be improved to handle this case to not silently remove stuff that actually renders okay. Maybe svgo could run a SVG validation on the input file and warn the user if the file is violating SVG standards? Right now we had no idea this was the case when running the tool :/
",pierrei,2015-06-21 15:33:01
378,2015-06-07 17:42:52,"Well, then it's a bug of Sketch in the first place. Report there for start.
",GreLI,2015-06-21 15:33:01
378,2015-06-21 19:26:44,"[v0.5.3](/svg/svgo/releases/tag/v0.5.3) with the fix has been just released.
",GreLI,2015-06-21 15:33:01
377,2015-06-04 17:39:20,"Illustrator svgs add an uncessary viewbox and then everything is shifted to the site. 
My goal was to use SVGO to clean up the SVG removing the viewbox and re-aligning all the paths. 
If i remove the viewbox manually (by editing) then the SVG gets cropped. 

If i use the node command i sitll have the viewbox. 

<S_CODE_TOKEN>

Here is the SVG straight from illustrator. 

<S_CODE_TOKEN>
",villanus,2016-02-28 16:30:48
377,2015-06-05 14:05:54,"`removeViewbox` is the very straightforward plugin that removes viewbox only if the sizes correspond. I.e. viewbox is equal to `""0 0 width height""`. If it doesn't correspond, the plugin leaves it as is.
",GreLI,2016-02-28 16:30:48
377,2015-06-15 06:34:43,"so its useless =)
",villanus,2016-02-28 16:30:48
377,2015-10-29 15:48:23,"No, it removes it if it is the default. Viewbox allows for scaling (like any sane person who's using SVG does).
",leo60228,2016-02-28 16:30:48
377,2015-11-17 09:00:35,"You can scale a SVG without viewbox
",villanus,2016-02-28 16:30:48
376,2015-06-04 16:49:23,"Is there a way to run this in the browser?
I am trying to remove the viewbox x, y cordinates that illustrator puts in all my svgs, but would rather do it directly in the browser, versus uploading to my Node Sever, processing and then downloading. 

Thanks
",villanus,2016-02-28 16:26:34
376,2015-06-04 16:50:16,"Well, there is nice online tool: [SVGOMG](https://jakearchibald.github.io/svgomg/).
",GreLI,2016-02-28 16:26:34
376,2015-06-04 16:52:28,"Thanks!  exactly what I needed.   Does it require node or just any http server?
",villanus,2016-02-28 16:26:34
376,2015-06-04 16:53:56,"It just works. I haven't look into it closely, but there is some info in “[about](https://github.com/jakearchibald/svgomg/blob/master/README.md)” section and it's open sourced.
",GreLI,2016-02-28 16:26:34
376,2015-06-04 17:37:03,"I couldnt make it work int he browser so went back to the node version.   I am going to open a different issue, as I cannot get the remove viewbox to do anything. 
",villanus,2016-02-28 16:26:34
375,2015-06-02 10:56:05,"When experimenting with a new plugin, or just doing custom things in my app, it's a pain to have to fork SVGO and add a plugin there then keep the fork up to date. It would be great to just be able to pass a custom plugin into the plugins list.

This pull request adds that functionality, so you can do something like:

<S_CODE_TOKEN>
",rlivsey,2015-06-05 14:15:47
375,2015-06-05 14:15:45,"Tests seem to be little excessive (you're actually testing how the config works in the second part), but ok.
",GreLI,2015-06-05 14:15:47
374,2015-06-02 10:09:46,"I run `svgo image.svg` and it breaks the image

Before
![02-06-2015 13-08-08](https://cloud.githubusercontent.com/assets/963212/7933543/6ec4aed8-0928-11e5-9c05-7518284c8bdb.png)

<S_CODE_TOKEN>

After
![02-06-2015 13-07-43](https://cloud.githubusercontent.com/assets/963212/7933538/61a3eca0-0928-11e5-93ce-ca032b69524c.png)

<S_CODE_TOKEN>
",aTei,2015-06-06 19:43:22
374,2015-06-02 10:48:33,"Try to use option ""convertPathData""

<S_CODE_TOKEN>
",steveoriol,2015-06-06 19:43:22
374,2015-06-02 11:18:48,"Didn't help. Played with other plugins. Disabling `removeUselessStrokeAndFill` helped.

So looks like this plugin has bug.
",aTei,2015-06-06 19:43:22
374,2015-06-05 15:43:04,"Are you using the latest version—0.5.2? It works fine for me.
",GreLI,2015-06-06 19:43:22
374,2015-06-06 19:43:22,"Oh, you are right. I was using 0.4.4. After update to 0.5.2 it works nice. :+1: 
",aTei,2015-06-06 19:43:22
373,2015-05-29 09:46:57,"for example : 

<S_CODE_TOKEN>

I get : 

<S_CODE_TOKEN>

and I should get :

<S_CODE_TOKEN>
",steveoriol,2015-06-21 15:20:54
373,2015-06-21 19:27:00,"[v0.5.3](/svg/svgo/releases/tag/v0.5.3) with the fix has been just released.
",GreLI,2015-06-21 15:20:54
372,2015-05-27 16:09:58,"This one works as expected:

<S_CODE_TOKEN>

This one removes the gradient:

<S_CODE_TOKEN>

The only difference is that `fill` attribute uses `url('…')` instead of `url(…)`.
",frzng,2015-06-21 14:17:12
372,2015-06-21 19:27:15,"[v0.5.3](/svg/svgo/releases/tag/v0.5.3) with the fix has been just released.
",GreLI,2015-06-21 14:17:12
371,2015-05-26 21:53:37,"Some image that got converted via imagemin (using svgo) ended up with call of precision <0 when optimizing:

Made sure it can never happen so we can build them.

Stack was:
ERROR in ./www/apps/rabbit/client/assets/img/emoticons/flowers.svg
Module build failed: RangeError: toFixed() digits argument must be between 0 and 20
    at Number.toFixed (native)
    at smartRound (/Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/plugins/convertTransform.js:310:32)
    at roundTransform (/Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/plugins/convertTransform.js:273:30)
    at /Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/plugins/convertTransform.js:256:21
    at Array.forEach (native)
    at js2transform (/Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/plugins/convertTransform.js:255:17)
    at convertToShorts (/Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/plugins/convertTransform.js:131:17)
    at convertTransform (/Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/plugins/convertTransform.js:97:16)
    at Object.exports.fn (/Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/plugins/convertTransform.js:47:13)
    at /Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/node_modules/imagemin/node_modules/imagemin-svgo/node_modules/svgo/lib/svgo/plugins.js:59:45
 @ ./~/css-loader?disableStructuralMinification&root=/Users/Feel/Dev/letsplay/rabbit/rabbit-node/coco/site/www/apps/rabbit!./~/less-loader!./www/apps/rabbit/client/desktop/desktop.less 2:288305-288425
",feel,2015-06-05 14:51:59
371,2015-05-27 15:02:31,"That's odd, `smartRound` shouldn't be called if precision less then zero, see function selection at the top of `roundTransform`.
",GreLI,2015-06-05 14:51:59
371,2015-06-03 21:52:11,":+1: i'm also seeing this exception
",booleanbetrayal,2015-06-05 14:51:59
371,2015-06-05 14:53:27,"It's hard to find the issue without sample image, but I hope that my changes should fix it anyway.
",GreLI,2015-06-05 14:51:59
371,2015-06-23 11:47:44,"JFYI: [v0.5.3](/svg/svgo/releases/tag/v0.5.3) with the fix has been released.
",GreLI,2015-06-05 14:51:59
371,2015-07-01 18:44:49,"Cool thanks (and late ;))
",feel,2015-06-05 14:51:59
370,2015-05-26 20:20:04,"Hi there!

I've run svgo v.0.5.2 with the default options on a file generated by IcoMoon, and it returns a new file without any content on it (0kb). The original SVG is as follow:

<S_CODE_TOKEN>

What am I doing wrong?

Thanks!
",icunioli,2015-05-27 10:41:42
370,2015-05-27 10:41:42,"OK, found it. I had to disable some plugins (removeHiddenElems & cleanupIDs) to make it work.
Sorry to bother you!

Thanks!
",icunioli,2015-05-27 10:41:42
370,2015-05-27 15:11:36,"Well, it should work only with disabled `cleanupIDs`. May need a special case for files like this.
",GreLI,2015-05-27 10:41:42
370,2015-05-27 15:18:04,"Might it be because of the `display: none` attribute on the `<svg>` element?
",icunioli,2015-05-27 10:41:42
370,2015-05-27 17:19:21,"No, it's likely `removeUselessDefs` removes symbols without ids, which are cleaned by `cleanupIDs` since they aren't used.
On the other side, yes, `removeHiddenElems` removes elems with `display: none`.
",GreLI,2015-05-27 10:41:42
370,2015-08-01 08:22:25,"I had the same problem, and had to disable both plugins to fix it

<S_CODE_TOKEN>
",olizilla,2015-05-27 10:41:42
369,2015-05-23 02:32:16,"I can see the cli docs but I can't find the programmatic api docs. Is there any?
",stevemao,
369,2015-05-23 08:59:31,"No docs, afaik, only [lib/svgo/jsAPI.js](/svg/svgo/blob/master/lib/svgo/jsAPI.js).
",GreLI,
369,2015-05-23 11:22:27,"Should probably add this link in README if you don't want to put programmatic api in the docs?
",stevemao,
369,2015-05-23 14:12:23,"Well, there is plans of new architecture of svgo and I find current API not ideal to say the least. So, it's not on the top of priorities.
",GreLI,
369,2015-05-24 22:46:58,"Sounds good. Thanks for the information @GreLI :D
",stevemao,
369,2016-03-17 13:51:51,"The funny thing is, in this repo i can't find out how to config the plugins via programatic API, but I just find out how to use from [here](https://www.npmjs.com/package/gulp-svgmin)
",e-cloud,
368,2015-05-23 00:25:48,"Uses two arcs technique for representing a circle as a path.
http://stackoverflow.com/questions/5737975/circle-drawing-with-svgs-arc-path/10477334#10477334
",dnewcome,2015-05-28 09:05:40
368,2015-05-23 09:03:16,"As you can see in tests, these paths are longer than circles, that's why I didn't added it when I wrote the plugin. So, probably it's worth only under the option like `convertCircles` (or ellipses if you'd add ellipses as well).
",GreLI,2015-05-28 09:05:40
368,2015-05-24 02:54:35,"Thanks for taking a look at this PR. I will fix the code styling. However I'm not understanding where the paths differ from the circle. If I look at a subset of my test case here with exaggerated semi-transparent strokes they appear coincident. Intuitively there should be some programmatic way of handling the difference in any case.

Here is what I'm looking at:

<S_CODE_TOKEN>
",dnewcome,2015-05-28 09:05:40
368,2015-05-24 08:55:37,"Paths are ok, they are just written with more bytes which is opposite to purpose of optimization.
",GreLI,2015-05-28 09:05:40
368,2015-05-25 23:43:45,"Ah, I understand what you are saying now - I had interpreted ""longer"" as geometrically longer. 

In my use case I normalize a set of svg files for use as icons where I can only handle pure path data. So I use svgo as part of a build process to normalize everything to paths, not necessarily to optimize 100% for size (although svgo does a very good job of getting rid of all Adobe-related junk, which I also need as part of the process).

If you don't think that converting circles lies within the domain of this plugin or svgo in general I fully understand. If you would accept it as a separate plugin I will change the pull request.
",dnewcome,2015-05-28 09:05:40
368,2016-11-16 20:16:57,"@GreLI @dnewcome I'd be interested in seeing this functionality supported, if not in the `convertShapeToPath` plugin then some other plugin.  (It seems to make sense in this plugin however, based on the name.)  Any chance we could resurrect this somewhere?
",src-code,2015-05-28 09:05:40
368,2017-03-12 21:52:02,"@GreLI as someone starting to write a program with both ""svg"" and ""optimize"" in the name and considering attempting to implement it as a svgo plugin, I want to comment here that ""file size"" is not the only thing that might be optimized. ""more bytes which is opposite to purpose of optimization"" is a very narrow interpretation.",sparr,2015-05-28 09:05:40
367,2015-05-22 15:36:28,"After optimizing (SVGO 5.0.1, all defaults) [Maki](https://github.com/mapbox/maki) icons many of them has been crashed. (Each icon has been optimized separately, before building icon set.)

![](https://cdn.rawgit.com/icons8/svg-sets/f1ae6dcea1f2d9e60575f7715fbbc0f434cb0007/libs/maki/0.4.5/maki-12.min.svg)

[SVG set from original SVG files](https://cdn.rawgit.com/icons8/svg-sets/f1ae6dcea1f2d9e60575f7715fbbc0f434cb0007/libs/maki/0.4.5/maki-12.svg) (SVG set created only with nodes manipulation without any transformation)
",betula,2015-05-24 19:23:52
367,2015-05-24 19:23:52,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:23:52
367,2015-05-25 07:52:20,"It's awesome! Thank you very much!
",betula,2015-05-24 19:23:52
366,2015-05-22 12:11:30,"I'am use SVGO(5.0.1, all defaults) for SVG in [SVG set file](https://cdn.rawgit.com/icons8/svg-sets/9896b4d4651024569384248180de05a75e458fca/libs/flat-color-icons/1.0.2/flat-color-icons.min.svg) and result has several error on ""camcorder_pro"", ""left_up2"", ""positive_dynamic"", ""process"", ""refresh"", ""right_up2"", ""workflow"" icons. (Each icon has been optimized separately, before building icon set.)

![Broken SVG set file](https://cdn.rawgit.com/icons8/svg-sets/9896b4d4651024569384248180de05a75e458fca/libs/flat-color-icons/1.0.2/flat-color-icons.min.svg)  
[SVG set from original SVG files](https://cdn.rawgit.com/icons8/svg-sets/9896b4d4651024569384248180de05a75e458fca/libs/flat-color-icons/1.0.2/flat-color-icons.svg) (SVG set created only with nodes manipulation without any transformation)
",betula,2015-05-24 19:23:45
366,2015-05-24 19:23:45,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:23:45
366,2015-05-25 07:52:29,"Thank you very much!
",betula,2015-05-24 19:23:45
365,2015-05-22 00:28:48,"I don't know why, but I have to place removeHiddenElems after convertPathData in order to optimize [test.svg](https://files.zenhub.io/555e778dcff2eb104a4c289f) correctly. [faulty.svg](https://files.zenhub.io/555e778dcff2eb104a4c289d)  has been optimized with the default config and some black lines on the umbrella are missing.

[test.yml | Working config file](https://files.zenhub.io/555e778dcff2eb104a4c289e)
",fsalomon,2015-05-24 19:23:38
365,2015-05-22 00:29:48,"<S_CODE_TOKEN>
",fsalomon,2015-05-24 19:23:38
365,2015-05-24 19:23:38,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:23:38
364,2015-05-21 21:24:16,"Hi, guys,

i want to use svgo in git pre-commit hook, and interrupt commit then immediately fix svg

If exist something like dry-run option, i can compare combed file with source and detect necessity of commit interrupting

Excuse my beginner's English and thank you
",a-x-,2015-06-05 16:52:04
364,2015-05-23 09:06:22,"Yes, it's known request. I just don't know how to present results. What output it shoud be?
",GreLI,2015-06-05 16:52:04
364,2015-05-26 12:40:38,"Optimized svg to stdout instead of modifying in place, may be?
Like inverted `sed -i` option.
",a-x-,2015-06-05 16:52:04
364,2015-05-26 13:06:21,"alternatively, a diff output option would be nice too
",waldyrious,2015-06-05 16:52:04
364,2015-05-26 13:10:02,"or even a verbal summary; something like:
- x styles converted to attributes
- y unused IDs removed
- ...
- total bytes saved: z
",waldyrious,2015-06-05 16:52:04
364,2015-05-26 16:08:51,"> Optimized svg to stdout instead of modifying in place, may be?

Well, there is already `--output -` (`-o -`).
",GreLI,2015-06-05 16:52:04
364,2015-06-05 16:45:36,"Cool, thank you!

`svgo -o - path/to/file.svg`
",a-x-,2015-06-05 16:52:04
364,2015-06-05 16:51:13,"For @waldyrious:

<S_CODE_TOKEN>
",a-x-,2015-06-05 16:52:04
364,2015-06-05 19:37:14,"What about the human-readable summary? That'd be pretty neat.
",waldyrious,2015-06-05 16:52:04
363,2015-05-19 08:28:48,"Hey there,

I've just got the bug, fixed with b3ee51c7bcf20ded13d547f81de37e5cd353c4bd, so I wanted to create an issue report. But now I see, this is fixed for over 1 month now, but there is no new release yet.

Is it possible to get v0.5.2 out, so the automatic installation of svg ""~0.5.0"" with NPM leads to a fixed version for our build servers? I think we're not the only team that would be grateful for such bug fix release.

In general I think it's a good idea to provide a faster bugfix-version release (if you follow the semver convention), to help out guys like us with such fixes.

All in all, great work, I love this project!

Cheers
",sateffen,2015-05-24 19:08:28
363,2015-05-19 10:12:22,"Yeah, I know. It's coming soon.
",GreLI,2015-05-24 19:08:28
363,2015-05-24 19:08:28,"Done.
",GreLI,2015-05-24 19:08:28
362,2015-05-19 06:37:46,"[ > ] convert some basic shapes to path
https://github.com/svg/svgo/blob/master/plugins/convertShapeToPath.js

i can not find the code to trans shapes like  Circle and Ellipse.

why?
",purplebamboo,2016-02-28 16:26:14
362,2015-05-19 10:11:38,"Because svgo is optimizer and generally circles and ellipses are shorter as their own tags. I know the only exception with the transformed (rotated) ellipse
",GreLI,2016-02-28 16:26:14
361,2015-05-18 17:42:18,"Hey,

I'm trying to use the ""prefix"" option of the cleanupIDs plugin:
https://github.com/svg/svgo/blob/master/plugins/cleanupIDs.js#L10

Apparently it's not stated anywhere on how to provide options to plugins like this.

How do I do it using a config file?
How do I do it using the command line?

Thanks.
",dhardtke,2016-02-28 16:25:59
361,2015-05-19 10:09:55,"See about [config](/svg/svgo/blob/master/docs/how-it-works/en.md#1-config).
",GreLI,2016-02-28 16:25:59
361,2015-05-19 10:25:52,"So you need to provide your config in .yml file with content like this:

<S_CODE_TOKEN>

and run svgo with it like

<S_CODE_TOKEN>

You can also provide a config in a command line like json:

<S_CODE_TOKEN>

Note: `cleanupIDs` doesn't work with SVG files containing `<style>` or `<script>` since svgo can't parse them.
",GreLI,2016-02-28 16:25:59
360,2015-05-18 02:00:50,"Hi. Great project, I love it. 

I fixed a very small typo for you that was annoying me. :)
",aidansteele,2015-05-19 16:23:00
360,2015-05-19 10:08:27,"It depends on how you read it: one path intersects another, or two paths intersect.
",GreLI,2015-05-19 16:23:00
360,2015-05-19 10:21:45,"Hi,

Thanks for the response. The change isn't to the ""s"" at the end, but the extraneous ""e"" in the middle. :)
",aidansteele,2015-05-19 16:23:00
360,2015-05-19 16:22:38,"Oh, my bad!
",GreLI,2015-05-19 16:23:00
359,2015-05-16 22:48:09,"#### Example SVG:
##### Throw error

<S_CODE_TOKEN>
##### Does not throw error

(remark no whitespaces)

<S_CODE_TOKEN>

Both documents are considered valid by validators.
Tested on v0.5.1
",LoicMahieu,2015-05-24 19:23:20
359,2015-05-17 09:22:09,"Yeah, it's been fixed after v0.5.1
",GreLI,2015-05-24 19:23:20
359,2015-05-18 10:25:25,"In fact this does not throw an exception on v0.5.1 cause to CLI seems ignore errors.

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>
",LoicMahieu,2015-05-24 19:23:20
359,2015-05-24 19:23:20,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:23:20
358,2015-05-16 16:00:47,"I've changed the readme files according to #327, so the users can see exactly which plugin does what, and which to turn on/off.
",sateffen,2015-05-24 08:52:28
357,2015-05-15 14:40:03,"Had to resort reading the source to find out that the datauri accepts 'base64', 'enc' or 'unenc' as parameters.
The readme says base64, URI encoded and unencoded
",pocesar,
356,2015-05-15 13:40:39,"Note: I don't know much about SVGs.

We're using SVGs with `<defs>` and `<use>`s. The IDs in the `<defs>` were minfiied to `a`, `b`, etc. but the references (the  ID in `<use xlink:href=""#id"">`) wasn't changed to match. It works when the `cleanupIDs` plugin is disabled.

I found this while using [gulp-svgmin](https://github.com/ben-eb/gulp-svgmin),
",adam-lynch,2016-02-28 20:34:25
356,2015-05-24 18:06:41,"It's better with provided examples and svgo version. There was such a bug in v0.5.0 which's been fixed in v0.5.1.
",GreLI,2016-02-28 20:34:25
356,2015-06-25 05:32:09,"I've just seen the same thing with an inkscape SVG :(

Using `--disable=cleanupIDs` provided a cleaned up output that looked as expected.
",DamonOehlman,2016-02-28 20:34:25
356,2015-06-25 07:34:49,"Could you provide a sample file?
",GreLI,2016-02-28 20:34:25
356,2015-06-25 08:18:51,"I'll see if I can.  Unfortunately the SVG files that failed are not mine, but let me see if I can create something similar that reproduces the problem...
",DamonOehlman,2016-02-28 20:34:25
355,2015-05-15 05:02:38,"Its more like a node way

<S_CODE_TOKEN>
",stevemao,2016-11-13 10:41:21
355,2015-07-26 11:40:38,"Or even use promises right away ;-)
",soswow,2016-11-13 10:41:21
355,2015-07-26 11:42:47,"Just wonder, why it's asynchronous in the first place? :smile: 
",rpominov,2016-11-13 10:41:21
355,2016-11-13 10:41:21,"That's a major change, that will be changed only on rewriting. Anyway it'll be considered then.
",GreLI,2016-11-13 10:41:21
354,2015-05-15 04:54:38,"Its faster
",stevemao,2016-11-13 10:39:41
354,2015-05-16 13:08:11,"Can you explain?
",GreLI,2016-11-13 10:39:41
354,2015-05-16 23:20:28,"https://github.com/imagemin/imagemin-svgo/blob/master/index.js#L32
The buffer has to be converted to a string.
https://github.com/imagemin/imagemin-svgo/blob/master/index.js#L39
The string has to be converted back to a buffer.

These make things much slower when working with stream. 
https://github.com/creationix/jsonparse/blob/master/jsonparse.js is a streaming JSON parser and it might be a good example of working with stream.
",stevemao,2016-11-13 10:39:41
354,2015-05-17 09:26:12,"So, you're proposing to make streaming SVG parser or what? BTW, imagemin is a slightly different project.
",GreLI,2016-11-13 10:39:41
354,2015-05-17 09:48:27,"Yup
",stevemao,2016-11-13 10:39:41
354,2015-05-17 14:01:35,"There is actually an effort on writing parser–[SVGP](/svg/svgp). But I haven't look closely into it whether it possible to adapt streaming.
",GreLI,2016-11-13 10:39:41
354,2016-11-13 10:39:41,"Closing since no action can be done by now.
",GreLI,2016-11-13 10:39:41
353,2015-05-08 14:51:10,"Sample file here: https://github.com/geoffyuen/geoffyuen.github.io/blob/master/test.svg

I batch optimized a bunch of svgs and noticed that pattern fills are being taken out. Is there no support for it?
",geoffyuen,2015-05-24 19:22:49
353,2015-05-08 15:57:41,"I guess it's an issue with inherited pattern which has been fixed recently. (Not released yet.)
",GreLI,2015-05-24 19:22:49
353,2015-05-24 19:22:49,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:22:49
352,2015-05-07 10:45:47,"svgo 0.5.1 breaks on the following image created in Inkscape: https://mega.co.nz/#!JAIwiZJT!K3GB7tUl2X9CF5zTGr_9eTs78CUKMB3z4VA07XFOpLY

<S_CODE_TOKEN>
",vmarkovtsev,2015-05-24 19:22:39
352,2015-05-08 16:00:22,"Likely it was fixed in 1151e44c5af4aee5ab44f3cef20e401b66a734e2.
",GreLI,2015-05-24 19:22:39
352,2015-05-08 17:07:45,"Still doesn't work for me ... Same issue as mentioned here https://github.com/sindresorhus/grunt-svgmin/issues/38

<S_CODE_TOKEN>
",jimniels,2015-05-24 19:22:39
352,2015-05-08 18:39:50,"Hi,

Could this https://github.com/jakearchibald/svgomg/issues/20 be possibly related?

Regards
m.
",paperboyo,2015-05-24 19:22:39
352,2015-05-08 19:30:00,"That appears to have worked! Disabling mergePaths in my grunt config seems to have solved the issue:

<S_CODE_TOKEN>

With this, my svgmin task ran through all the files and optimized them just fine.
",jimniels,2015-05-24 19:22:39
352,2015-05-09 08:48:49,"Odd, it's totally fine to me.
",GreLI,2015-05-24 19:22:39
352,2015-05-09 08:54:35,"Oh, I see. You are using the latest released version, while there were some fixes since then, including the one I've mentioned.
",GreLI,2015-05-24 19:22:39
352,2015-05-24 19:22:39,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:22:39
352,2015-05-25 06:12:02,"Thanks!
",vmarkovtsev,2015-05-24 19:22:39
351,2015-04-29 11:28:43,"Fixes #341.
",dennari,2015-05-24 08:52:12
351,2015-05-04 06:50:34,"Until #296 becomes a thing, this should really be merged.
",A1bi,2015-05-24 08:52:12
350,2015-04-28 04:37:37,,AprilArcus,2015-05-24 08:53:37
350,2015-05-03 16:57:04,"Is this looking ok?
",AprilArcus,2015-05-24 08:53:37
350,2015-05-07 11:01:21,"Yes, but I'm not sure that it should be in SVGO. It's an _optimizer_, not image editor.
",GreLI,2015-05-24 08:53:37
350,2015-05-08 18:40:44,"I totally respect your desire to avoid scope creep. I do feel feel that this plugin falls within the domain of optimization - by applying a CSS class with appropriate styles, we are able to move style information that must be repetitively specified on a per-SVG basis into a stylesheet, reducing the aggregate size of our assets.
",AprilArcus,2015-05-24 08:53:37
350,2015-05-24 08:53:35,"Well, guess it's ok since svgo doesn't handle classes yet.
",GreLI,2015-05-24 08:53:37
349,2015-04-23 23:53:31,,revolunet,2015-04-23 23:53:49
349,2015-04-23 23:54:02,"sorry
",revolunet,2015-04-23 23:53:49
348,2015-04-23 19:33:23,"Hello GreLI,

i drawed a logo with Inkscape and optimized it with the grunt-svgmin plugin. When i set the option removeHiddenElems: true, i missed some lines, but in the original the lines aren´t hidden. Here are my testfiles:

http://beam2web.com/removeHiddenElems/compare.png
http://beam2web.com/removeHiddenElems/before.svg
http://beam2web.com/removeHiddenElems/after.svg

Maybe the trouble comes from the kind of drawing the logo, but i'm not sure, what i should change.
",beam2web,2015-05-24 19:22:31
348,2015-05-24 19:22:30,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:22:31
347,2015-04-21 14:00:04,"I was using it but at some point recently (I nuked my node_modules folder for the first time in about a month) it stopped. I think it may be this commit: https://github.com/svg/svgo/commit/f651fd8de181c00ba21a023629f47aa22d9d3422

Image here https://gist.github.com/cooperaj/966c6a34ce6d391c74d7
",cooperaj,2015-05-24 19:22:15
347,2015-04-22 16:10:22,"What do you mean by breaking?
",GreLI,2015-05-24 19:22:15
347,2015-04-22 17:53:13,"Missing elements. In this case two missing letters (whilst the others are
fine) and a missing laser beam type affair. I’ve since disabled the plugin
and rebuilt so don’t have the broken image around. I can rebuild if you
like but the image linked in the gist above is the one that breaks.

On Wed, 22 Apr 2015 at 17:10 Lev Solntsev notifications@github.com wrote:

> What do you mean by breaking?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/svg/svgo/issues/347#issuecomment-95250854.
",cooperaj,2015-05-24 19:22:15
347,2015-05-24 19:22:15,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:22:15
346,2015-04-20 16:42:06,"I am having an issue with paths (#path551#path552 #path556 #path557) being removed from the following. I am using defaults with no changes to the config.

<S_CODE_TOKEN>

So my question is what setting is causing this so I can turn it off in the config.
",AntiFish03,2015-05-24 19:21:46
346,2015-04-20 16:59:16,"same issue as #339
",AntiFish03,2015-05-24 19:21:46
346,2015-05-24 19:21:35,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:21:46
345,2015-04-20 02:22:30,"I'm on Windows 7, Node.js v0.10.38, svgo v0.5.1, I installed `svgo` globally with: `npm install -g svgo`

Here is my svgo command:

`svgo C:\_projects\_test\car.svg C:\_projects\_test\car.min.svg`

Here is what I experience:
- When I execute the above command via Windows command prompt (CMD.exe) it works fine.
- When I execute it from my Python script like this:<br/>
  subprocess.call(['svgo', 'C:\_projects\_test\car.svg', 'C:\_projects\_test\car.min.svg'], shell=True)<br/>
  then it still works fine.
- But I want to capture the STDERR output (if any) so I try to execute it like this from my Python script:<br/>
  p = subprocess.Popen(['svgo', 'C:\_projects\_test\car.svg', 'C:\_projects\_test\car.min.svg'], stderr=subprocess.PIPE, shell=True)
  err = p.communicate()[1]
  result = p.returncode<br/>
  then it does not work! svgo starts to run that's for sure but the created output file is 0 bytes long!

I have no idea why `svgo` fails this way (creates a 0 bytes long output file) when its STDERR output is redirected (PIPE'd) to my Python program. I do run other Node.js CLI programs the very same way such as `uglifyjs`, `cleancss`, `html-minifier` but those other programs work fine even when I launch them from Python via the subprocess.Popen method. Only `svgo` fails this way.

Note: The same issue is present with svgo 0.5.0, I did not test it with older versions.
",tssajo,2015-04-23 18:24:38
345,2015-04-20 20:17:16,"I have no idea, svgo uses standard `console.error()` method, so if it doens't go to STDERR, I guess it should be addressed to node.js.
",GreLI,2015-04-23 18:24:38
345,2015-04-20 22:46:08,"Yeah, but the main problem is that the resulting minified(!) file is 0 bytes long. (Not talking about the STDERR output here.)

So I'm guessing here, maybe svgo somehow detects that STDERR is being PIPEd then in turn it may try to get the input (original svg data) from STDIN as well?? This would explain the 0 bytes long minified file output.

Again, the other minifier CLI tools (e.g. `uglifyjs`, etc.) are also written in node.js and they work just fine when I run them from Python's subprocess.Popen method. Only `svgo` fails, it does not minify the specified input file, it creates a 0 bytes long minified file instead. Which I would say is a major problem.
",tssajo,2015-04-23 18:24:38
345,2015-04-22 16:09:32,"> So I'm guessing here, maybe svgo somehow detects that STDERR is being PIPEd then in turn it may try to get the input (original svg data) from STDIN as well?

No, svgo does nothing of that.

Btw, have you tried node 0.12? Or io.js. node.js may have some issues.
",GreLI,2015-04-23 18:24:38
345,2015-04-22 18:01:54,"No, it is not realated to node version.

I've made really good progress on this issue, here are my findings:

By entering the following command into a Windows command prompt (CMD.exe) :

`svgo car.svg car.min.svg 2 > null`

I get the zero bytes long minified file as a result and I can see an error message on the screen which is coming from `svgo` I assume:

`Unknown argument: 2`

But if I run this:

`svgo car.svg car.min.svg 2> null`

then it works fine.
Notice the difference: there is no space between `2` and `>` !

So maybe on Windows, when `shell=True` is set for the pOpen function then Python places a space there between the `2` and the `>` characters? I'm not sure about this, but this would be a reasonable explanation.

Another thing which I found out is this:
If I do redirect both STDOUT and STDERR like this:

`p = subprocess.Popen(['svgo', 'C:\_projects\_test\car.svg', 'C:\_projects\_test\car.min.svg'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)`

then I do not encounter the problem!
I do not exactly know why, but at least it gives me a workaround solution.
",tssajo,2015-04-23 18:24:38
345,2015-04-23 16:07:50,"Well, it looks like Windows' peculiarities.
",GreLI,2015-04-23 18:24:38
345,2015-04-23 18:24:38,"Because I found a workaround, I close this.
",tssajo,2015-04-23 18:24:38
344,2015-04-15 21:51:46,"see also: https://gist.github.com/timo22345/9413158

Found that Chrome 40+ leak on SVG images that contain complex transforms. Would be nice to support the flattening into path from the gist above, if it proves reliable.
",booleanbetrayal,2016-11-13 10:37:53
344,2015-04-16 15:25:24,"I'd recomment [svgpath](https://github.com/fontello/svgpath) for applying transforms.
",puzrin,2016-11-13 10:37:53
344,2015-04-16 16:28:05,"@puzrin - I'm not familiar enough with SVG paths and transforms to be comfortable implementing this feature with svgpath. Would you want to take the lead on this? I've verified that the logic in the gist above seem reliable for every use case I could throw at it, but if svgpath provides a cleaner implementation, I'm all for it!
",booleanbetrayal,2016-11-13 10:37:53
344,2015-04-16 16:34:47,"That's just for info, if someone decide to implement. I have enougth another projects to care about. SVGO has https://github.com/svg/svgo/blob/master/plugins/transformsWithOnePath.js, wich can flatten transforms somehow. But i didn't used it for a long time and don't remember details.
",puzrin,2016-11-13 10:37:53
344,2015-04-16 16:47:30,"Know how that is, @puzrin . No worries! The difference between this and `transformsWithOnePath` is that this would completely bake transform offsets, etc into the path data, while the other consolidates multiple transforms into a single matrix (I think?).

Will try to get familiar with SVGO plugin expectations, but if someone else can knock this out in no-time, feel free!  =]
",booleanbetrayal,2016-11-13 10:37:53
344,2015-04-16 19:55:45,"I don't understand the requests. svgo passes transformations to paths in `moveGroupAttrsToElems` and applies transformations to paths in `convertPathData`. Probably, there will be a more sophisticated algo in future.

Could you provide examples what do you have and what do you want to achieve?
",GreLI,2016-11-13 10:37:53
344,2015-04-16 20:32:36,"@GreLI - Here's one of the more simplistic examples of what I'm trying to achieve. If there's already a pre-existing plugin combination that will produce this, please let me know!

## Original

<S_CODE_TOKEN>

## Flattened (no `transform` on `concept_badge_complete` group)

<S_CODE_TOKEN>
",booleanbetrayal,2016-11-13 10:37:53
344,2015-05-24 18:01:46,"Hmm, in your example svgo doesn't apply transform because of filter. Generally, transforms influence on filters and other linked content (like gradients) and svgo doesn't handle this influence. It's a complex topic (filters etc can be applied to other elements) which requires sophisticated manipulation.
",GreLI,2016-11-13 10:37:53
344,2015-05-29 19:32:10,"Hmm ... the gist I had linked seems to process everything i've thrown at it, as expected. If it isn't theoretically reliable 100% of the time, could an experimental plugin be made that is disabled by default?
",booleanbetrayal,2016-11-13 10:37:53
344,2016-05-23 21:35:57,"I'd find this feature useful as well if it was able to flatten matrix transforms.
",apexskier,2016-11-13 10:37:53
344,2016-06-01 14:25:33,"+1 for adding this feature
",aagd,2016-11-13 10:37:53
344,2016-11-13 10:37:53,"Closing since the subject is unclear.
",GreLI,2016-11-13 10:37:53
343,2015-04-15 18:17:47,"Reasons:
- Gzipping is more efficient with consistent, repeated character case.
- There are some <a href=""https://github.com/uxebu/bonsai/issues/226"">browser bugs</a> in which uppercase attribute values throw errors.
- All lowercase is a <a href=""https://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml#Capitalization"">strong convention</a> for most markup and css.
- It would make find-and-replace operations consistent.
",albell,
343,2015-04-15 19:01:09,"Well, all these reasons are debatable, but as an option it may be.
",GreLI,
343,2015-04-15 19:39:42,"Well, there's no debate about gzipping. Compressors get more string matches when case is consistent. Some data:

http://www.websiteoptimization.com/speed/tweak/lowercase/

And in terms of the overall web ecosystem the bias seems to be strongly towards lower case. If you disagree or have conflicting data on this I'd love to see it. I can't find a single CSS styleguide on the web that recommends upper case anything.
",albell,
343,2015-04-15 19:42:57,"Sure, but most values are in lowercase already. Will it give any significant profit? 7-zip or zopfli can give much more. That's why I say it debatable.
",GreLI,
342,2015-04-14 06:20:29,"I keep getting this warning, even though the SVG does not have any multiple attriibutes. Any idea what's wrong?

<S_CODE_TOKEN>

On calling grunt svgmin, it stops working after the first path...

<S_CODE_TOKEN>
",rowild,2015-04-14 07:14:15
342,2015-04-14 07:14:15,"Stupid me - the error was in the next file, not the one I posted. Sorry for this useless post!

Any chance to tell grunt to spit out the file name along with the error?
",rowild,2015-04-14 07:14:15
342,2015-04-14 07:39:17,"Sorry, can't say nothing about grunt.
",GreLI,2015-04-14 07:14:15
341,2015-04-14 00:11:30,"Of course one can assign an id as a workaround but as that is rather unusual **it would be nice if the plugin kept the <style> section** or at least offered an option.

Thank you!
",efficientbaxter,2015-05-24 08:52:12
341,2015-05-24 19:19:09,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 08:52:12
340,2015-04-02 21:16:34,"Unlike inputing a single file, base64 encoding doesn't work for folders.
",kirillbunin,
340,2016-02-18 21:58:10,"+1
",owenhoskins,
340,2016-02-19 12:40:19,"I wonder, how do such base64 files look like?
",GreLI,
340,2016-09-14 11:12:57,"@kirillbunin @owenhoskins can you provide more details on what it failing? This seems related to #552, so some commands like the ones there would be very helpful.
",waldyrious,
339,2015-04-02 10:02:17,"After apdating svgo to the latest version we noticed that at least in one scenario we loose a path node in svg after its minimisation. With version of svgo 0.5.0 everything works correctly.

This is an example of svg where for some reason svgo removes the path node:

https://drive.google.com/file/d/0B5-9CLbdcvLNWERwV2d4S2VvNEk/view?usp=sharing

Is there any known reason why this might happen? 

Thanks,
Olena
",anelook,2015-05-24 19:20:48
339,2015-04-02 13:50:31,"I don't understand what's the problem. The file you've provided is being optimized correctly (only removing redundant transform).
",GreLI,2015-05-24 19:20:48
339,2015-04-14 13:54:35,"same problem with 0.5.1

<S_CODE_TOKEN>

optimized into

<S_CODE_TOKEN>

in 0.5.0 it was

<S_CODE_TOKEN>
",rmaksim,2015-05-24 19:20:48
339,2015-04-14 19:28:32,"Yeah, that's one fixed in b3ee51c7bcf20ded13d547f81de37e5cd353c4bd.
",GreLI,2015-05-24 19:20:48
339,2015-04-24 09:30:05,"Will it fix same problem with this svg?
`<svg xmlns=""http://www.w3.org/2000/svg"" width=""11"" height=""15""><path d=""M 4,1 2,13 9,13 7,1 4,1 Z""/></svg>`
after svgo 0.5.1:
`<svg xmlns=""http://www.w3.org/2000/svg"" width=""11"" height=""15""/>`
",insane-developer,2015-05-24 19:20:48
339,2015-04-25 09:23:24,"Yes
",GreLI,2015-05-24 19:20:48
339,2015-05-24 19:20:48,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-05-24 19:20:48
338,2015-04-01 16:33:43,"The new version is much better, but it still breaks files sometimes.

I have 3 broken files, probably the reason is the same, because they are similar.

Github does not support SVG uploading, so I zipped both sources and originals and put'em here https://www.dropbox.com/s/i1brbfjbl30enw2/svg.opt.zip?dl=0

Great to see the progress!
",iliakan,2015-04-06 13:39:47
338,2015-04-03 00:57:13,"I can also show you one which gets broken when minified with v0.5.1 while it did look fine when processed with v0.5.0
You can download the original and the broken SVG files from http://www.tssajo.com/github/svg_got_broken.zip
",tssajo,2015-04-06 13:39:47
338,2015-04-06 11:51:14,"Fixed in 97a260bbf3a75764f250a56422b97719b9768a63 (rotate() optional parameters)  and in f68b310c1ea43b476e6fcf1aae6bdfc2d2b4d7f6 (the car)
",GreLI,2015-04-06 13:39:47
338,2015-04-06 11:57:04,"@GreLI please release a new version when you feel like it's ready :) 
I'll retest immediately.
",iliakan,2015-04-06 13:39:47
338,2015-04-06 12:25:42,"I've tried with the latest version (https://github.com/svg/svgo/commit/97a260bbf3a75764f250a56422b97719b9768a63) but the following image is still broken: https://drive.google.com/file/d/0BwW_lFF0AAQZNHVJdXQwSEZEY0E/view?usp=sharing
",andrei1089,2015-04-06 13:39:47
338,2015-05-24 19:18:53,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-04-06 13:39:47
337,2015-03-31 14:58:15,"Failing example companion to: https://github.com/svg/svgo/issues/336
",nhusher,2015-04-12 18:36:48
337,2015-03-31 15:34:59,"[![Coverage Status](https://coveralls.io/builds/2233119/badge)](https://coveralls.io/builds/2233119)

Coverage remained the same at 87.76% when pulling **3f002cb187b171fdfa7a29102ab8f1f5db262b77 on nhusher:failing-test** into **5c08d7bc49be9c8c6494d4743b9579365389031d on svg:master**.
",coveralls,2015-04-12 18:36:48
337,2015-04-12 18:36:48,"Fixed in ae2981cdea6696124587e9c39906ea90312aaf83.
",GreLI,2015-04-12 18:36:48
337,2015-04-13 17:25:54,"Thank you!
",nhusher,2015-04-12 18:36:48
336,2015-03-31 14:57:56,"Running the path merging minifcation step on certain images fail.

_Expected result:_ minified svg data.
_Actual result:_ `{ error: 'Error in parsing: Cannot read property '0' of undefined' }`

See: https://github.com/svg/svgo/pull/337 for an example image that causes it to fail, and a test case to cause it.
",nhusher,2015-04-12 18:36:14
336,2015-04-12 18:36:14,"Fixed in ae2981cdea6696124587e9c39906ea90312aaf83.
",GreLI,2015-04-12 18:36:14
336,2015-05-24 19:18:36,"[v0.5.2](/svg/svgo/releases/tag/v0.5.2) with the fix has been just released.
",GreLI,2015-04-12 18:36:14
335,2015-03-31 08:16:51,"I made `parentNode` enumerable again, breaking `JSON.stringify(node)`. If being able to convert a node to JSON is useful, a custom `.toJSON` would fix that, but as far as I can tell it was only used for cloning.
",jakearchibald,2015-03-31 14:54:55
335,2015-03-31 08:24:29,"[![Coverage Status](https://coveralls.io/builds/2230299/badge)](https://coveralls.io/builds/2230299)

Coverage decreased (-3.55%) to 87.72% when pulling **9b91154ae594ffd0e8da74df14fa7c7a76ae9d1d on jakearchibald:master** into **23d617d389a93e0193d031e1fa423053c7c02036 on svg:master**.
",coveralls,2015-03-31 14:54:55
335,2015-03-31 11:34:27,"LGFM, but why you made it Non-enumerable again?

> If being able to convert a node to JSON is useful

It's somewhat useful for debugging.
",GreLI,2015-03-31 14:54:55
335,2015-03-31 14:44:32,"Made it non-enumerable again
",jakearchibald,2015-03-31 14:54:55
334,2015-03-30 18:39:29,"I tried this for SVGOMG, but found that it [broke appearance too much](https://github.com/jakearchibald/svgomg/blob/master/src/js/svgo-worker/main.js#L127). Rounding transforms seems to have a far greater effect than on other properties.

I haven't tried it, but maybe the precision for `convertTransform` could be +1 or +2 of the value passed to `--precision`.
",jakearchibald,2015-04-12 19:39:20
334,2015-04-12 19:41:54,"I've made `transformPrecision` parameter with default value is 5. Since transformations are multiplying on values, something 5 digits seems to be a good choice to meet 2+3 (or 3+2) usual coordinates digits
",GreLI,2015-04-12 19:39:20
334,2015-05-24 19:18:10,"I've greatly reworked transformation–it makes sense to split matrix into simple transforms, and deployed in [v0.5.2](/svg/svgo/releases/tag/v0.5.2). Enjoy!
",GreLI,2015-04-12 19:39:20
333,2015-03-30 17:16:24,"http://jakearchibald.github.io/svgomg/test-svgs/car-lite.svg

The number plate and front grill disappear.

I've disabled the plugin by default https://github.com/jakearchibald/svgomg/commit/13b9934ffc6abeea61e437483edca28b72445a41
",jakearchibald,2015-03-30 17:33:23
333,2015-03-30 18:33:47,"Wow that was fast, thanks!
",jakearchibald,2015-03-30 17:33:23
333,2015-03-30 18:49:36,"Just seen you had errors in svgomg's commits, so I found the error and fixed it. Unfortunately, I forgot about this multiple 'M' data trick in SVG when I made this check.
",GreLI,2015-03-30 17:33:23
333,2015-04-18 09:44:18,"Hello GreLI,

i drawed a logo with Inkscape and optimized it with the grunt-svgmin plugin. When i set the option removeHiddenElems: true, i missed some lines, but in the original the lines aren´t hidden. Here are my testfiles:

http://beam2web.com/removeHiddenElems/compare.png
http://beam2web.com/removeHiddenElems/before.svg
http://beam2web.com/removeHiddenElems/after.svg

Maybe the trouble comes from the kind of drawing the logo, but i'm not sure, what i should change.
",beam2web,2015-03-30 17:33:23
333,2015-05-24 19:14:33,"@beam2web, v0.5.2 has been just released–it should be fixed there.
",GreLI,2015-03-30 17:33:23
332,2015-03-30 13:54:07,"I have been using `svgo` through [imagemin](https://github.com/imagemin/imagemin) and [gulp-imagemin](https://github.com/sindresorhus/gulp-imagemin) for the past several weeks.

This morning, I found that my build process is failing, and based on the stack trace, it looks like svgo is the root cause.

<S_CODE_TOKEN>

If I can provide additional information to help you diagnose the issue, please let me know what to provide.
",kaldrenon,2015-04-12 18:38:39
332,2015-03-30 15:34:11,"It would be nice if you provide a sample image. Is there an empty `<text></text>`?
",GreLI,2015-04-12 18:38:39
332,2015-04-07 14:53:08,"Same as #336, whicheas has a test case.
",bastnic,2015-04-12 18:38:39
332,2015-04-12 18:35:20,"#336 is definitely different case which was fixed in ae2981cdea6696124587e9c39906ea90312aaf83
",GreLI,2015-04-12 18:38:39
332,2015-04-12 18:39:10,"Please, check if this fixes your issue.
",GreLI,2015-04-12 18:38:39
331,2015-03-28 11:21:22,"svgo 0.5.0 corrupts following image http://cdn.weblab.pro/wZf1tOz4.svg
When I disabled ""merge paths"" or ""collapse useless groups"" my image looks fine.
",sc0rp10,2015-03-30 12:13:19
331,2015-03-28 11:22:43,"Yeah, `mergePaths` was fixed recently in e1060df7dc4b4afc63d6cc86fc41748a4940918d.
",GreLI,2015-03-30 12:13:19
331,2015-03-28 11:28:07,"Lev, i'm newbie witn npm. How can i update globally installed svgo with npm?
",sc0rp10,2015-03-30 12:13:19
331,2015-03-28 11:50:10,"You can do it, when the new version will be published. Hope, this will be soon.
",GreLI,2015-03-30 12:13:19
331,2015-03-30 12:13:19,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) has just been released. Now you can update in npm:

<S_CODE_TOKEN>
",GreLI,2015-03-30 12:13:19
330,2015-03-26 17:56:22,"Version 0.5 corrupts the following svg.

<S_CODE_TOKEN>

results in an acceptable file

<S_CODE_TOKEN>

Here's the base64 of the initial scale.svg image:

<S_CODE_TOKEN>
",facchione,2015-03-30 12:13:50
330,2015-03-28 18:29:52,"Hmm, couldn't reproduce neither with v0.5.0 nor current version. It only breaks the shadow in v0.4.5. Are you sure you're using v0.5.0?
",GreLI,2015-03-30 12:13:50
330,2015-03-30 12:13:49,"Check this out in [v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1).
",GreLI,2015-03-30 12:13:50
329,2015-03-22 16:59:52,"<S_CODE_TOKEN>

Original image:

![orig](https://cloud.githubusercontent.com/assets/328125/6770325/d9b23c8a-d0cd-11e4-8de5-47089b773880.png)

<S_CODE_TOKEN>

After:

![min](https://cloud.githubusercontent.com/assets/328125/6770327/e05ef47e-d0cd-11e4-9e8b-4d45473e326d.png)

<S_CODE_TOKEN>
",ikokostya,2015-03-22 18:47:35
329,2015-03-22 17:28:08,"Disabling `mergePaths` plugin resolves this issue.
",ikokostya,2015-03-22 18:47:35
329,2015-03-22 18:47:35,"Fixed in e1060df.
",GreLI,2015-03-22 18:47:35
329,2015-03-30 12:14:59,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with this fix has been just published.
",GreLI,2015-03-22 18:47:35
328,2015-03-21 19:31:53,"`util.puts` and `util.error` have been deprecated in io.js and node.js 0.12 and print ugly deprecation warnings on the CLI. This commit replaces them with console equivalents.

Also there were two cases where errors weren't printed to stderr, which I changed to do so.
",silverwind,2015-03-21 20:08:52
328,2015-03-21 19:34:56,"[![Coverage Status](https://coveralls.io/builds/2165410/badge)](https://coveralls.io/builds/2165410)

Coverage remained the same at 91.8% when pulling **cec64ee78a8df4a766034b21f5c9c65b14bed464 on silverwind:remove-util-puts** into **84220ce1dc80da6ff0ff8b59bdd0416cdd4348a9 on svg:master**.
",coveralls,2015-03-21 20:08:52
328,2015-03-21 20:06:22,"Thanks, but I've made such a commit, actually. Just didn't pushed yet.
",GreLI,2015-03-21 20:08:52
328,2015-03-21 20:08:52,"Damn. Well I hope you get this fixed soon :)
",silverwind,2015-03-21 20:08:52
328,2015-03-21 20:09:26,"Yes, the new version is coming out! Just polishing it.
",GreLI,2015-03-21 20:08:52
327,2015-03-13 19:17:36,"Since the user needs the exact plugin names to enable/disable at the CLI, wouldn't it be nice to have those as text in the docs? :neckbeard: 
",albell,2015-05-24 19:20:31
327,2015-03-30 13:44:50,"You can see all plugin-names in the config file: [.svgo.yml](https://github.com/svg/svgo/blob/master/.svgo.yml) 

Otherwise one could argue that this:
- [ [>](https://github.com/svg/svgo/blob/master/plugins/cleanupAttrs.js) ] cleanup attributes from newlines, trailing and repeating spaces

could turn into this
- [ [cleanupAttrs](https://github.com/svg/svgo/blob/master/plugins/cleanupAttrs.js) ] cleanup attributes from newlines, trailing and repeating spaces

So it contains the name itself with a description. Do you think this would help?
",sateffen,2015-05-24 19:20:31
327,2015-03-30 19:20:13,"Right, but the YML doesn't tell what each plugin actually does. I like your formatting suggestion. That's what I had in mind. The single closing bracket as a link is pretty rough stuff. People want to be able to scan the docs quickly.
",albell,2015-05-24 19:20:31
327,2015-04-24 17:25:44,"+1

In addition to documenting the available plugins, it would be helpful if each of their configuration options was documented. At present it's not at all easy to figure out what a plugin does and what options are available for it.
",jrunning,2015-05-24 19:20:31
326,2015-03-13 19:14:07,"For a purpose like svg-as-img, these are often unnecessary cruft. Would be nice to be able to remove entirely.
",albell,2016-11-13 10:27:36
326,2015-03-13 21:24:01,"Well, unused ids are already being stripped. For classes svgo just don't understand CSS in ‘style’ tag, unfortunately.
",GreLI,2016-11-13 10:27:36
326,2016-11-13 10:27:36,"[`removeAttrs`](https://github.com/svg/svgo/blob/master/plugins/removeAttrs.js) plugin should do the job.
",GreLI,2016-11-13 10:27:36
325,2015-03-13 19:11:28,"First: thanks, this is _awesome_.

Stripping height and width would be super-useful for responsive design, where you don't want to declare any fixed dimensions, and set dimensions instead using CSS. Note however that nested svgs should keep their explicit dims, because they get calculated within the parent viewBox. So it should just be on the rootmost.

You could call it ""responsive.js"" or something like that?
",albell,2015-03-23 18:22:27
325,2015-03-22 19:45:55,"Well it has a long history. Initially svgo did something like this, but it was considered bad practice and it can break expectations: e.g. someone might expect icon to have fixed size in CSS background. There is even a pull-request #196, but it needs some checks.
",GreLI,2015-03-23 18:22:27
325,2015-03-23 18:22:27,"Thanks, I didn't that. I will comment there.
",albell,2015-03-23 18:22:27
324,2015-03-11 22:33:25,"This two icons cannot be optimized using svgo:
https://dl.dropboxusercontent.com/u/1730358/svgo_issue_15939.svg
https://dl.dropboxusercontent.com/u/1730358/svgo_issue_76248.svg
",onlymega,2015-03-14 22:16:48
324,2015-03-14 22:12:03,"I don't see any problems with the first image (with car). But the second one quite interesting. Looks like `<g>` should be preserved inside `<switch>` (useless in this particular image, but whatever).
",GreLI,2015-03-14 22:16:48
324,2015-03-30 12:15:39,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with this fix has been just published.
",GreLI,2015-03-14 22:16:48
323,2015-03-11 20:22:33,"With this svg the vector effect is removed causing the stroke to scale. http://www.w3.org/TR/SVGTiny12/painting.html#NonScalingStroke

<S_CODE_TOKEN>
",moneal,2015-03-28 20:28:59
323,2015-03-11 20:29:36,"It's an unknown attribute for svgo because it's not in SVG 1.1, so I guess that it's being removed by `removeUnknownsAndDefaults` plugin.
",GreLI,2015-03-28 20:28:59
323,2015-03-12 11:33:20,"Note that vector-effect=""non-scaling-stroke"" is also part of SVG 2, if that influences anything. I think 'non-scaling-stroke' has been supported by most browsers for a while now.

See https://svgwg.org/svg2-draft/painting.html#VectorEffectProperty.
",erikdahlstrom,2015-03-28 20:28:59
323,2015-03-12 17:41:16,"Yeah, but it's not a standard yet, and can be changed in any moment.
",GreLI,2015-03-28 20:28:59
323,2015-03-30 12:16:08,"Added in [v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1).
",GreLI,2015-03-28 20:28:59
322,2015-03-11 12:01:30,"Some of our icons are breaking when enabling these two options: collapseGroups and removeNonInheritableGroupAttrs

Please test it yourselves with this file:
https://gist.github.com/Fuffi/f6e039071d21e3f2f88c
",Fuffi,2015-03-22 18:06:34
322,2015-03-11 20:26:18,"What do you mean by saying “when enabling”? These plugins are enabled by default and I don't see any breaking in v0.5.0
",GreLI,2015-03-22 18:06:34
322,2015-03-11 20:29:05,"I use a custom config file that enables everything except for those tu, when I enable them they corrupt the image (the lens disappears making the vector basically in the shape of a rectangle.

I reproduced this problem on two different machines, tomorrow I will double check the versions installed.
",Fuffi,2015-03-22 18:06:34
322,2015-03-11 20:29:32,"Have you tested the file I linked? It breaks even using svgomg website.
",Fuffi,2015-03-22 18:06:34
322,2015-03-11 20:31:04,"I tried with `disable={collapseGroups,removeNonInheritableGroupAttrs}` and this didn't have any effect except slightly increase in file size. Are you using the latest version?
",GreLI,2015-03-22 18:06:34
322,2015-03-11 20:33:25,"Probably, you've enabled some plugins disabled by default. There is an image manipulation plugin that shouldn't be enabled 'til you are know what are ou doing.
",GreLI,2015-03-22 18:06:34
322,2015-03-11 21:39:16,"It works with all options except these two
",Fuffi,2015-03-22 18:06:34
322,2015-03-12 17:40:09,"What do you mean? Can you describe steps which you've done?
",GreLI,2015-03-22 18:06:34
322,2015-03-12 17:44:47,"First bug:
1) Open https://jakearchibald.github.io/svgomg/
2) Upload the file I linked earlier: https://gist.github.com/Fuffi/f6e039071d21e3f2f88c
3) Enable ""Remove useless stroke & fill""
4) Notice how part of the original image disappeared
",Fuffi,2015-03-22 18:06:34
322,2015-03-12 17:47:02,"Second bug:
1) Open https://jakearchibald.github.io/svgomg/
2) Upload the file I linked earlier: https://gist.github.com/Fuffi/f6e039071d21e3f2f88c
3) Enable multipass
4) Enable ""Collapse useless groups""
5) Notice how part of the original image disappeared
",Fuffi,2015-03-22 18:06:34
322,2015-03-12 17:47:16,"> 3) Enable ""Remove useless stroke & fill""

Ah, it's totally differrent plugin. It's been fixed recently in d3e4f63ae51ca62377b8fd8a1e9adf5781ceee19. It was disabled because of buggy behavior. Will be in new version soon.
",GreLI,2015-03-22 18:06:34
322,2015-03-12 17:49:41,"> Second bug:

Don't see any bugs. ""Collapse useless groups"" is enabled by default as I mention earlier.
",GreLI,2015-03-22 18:06:34
322,2015-03-12 17:52:47,"> 3) Enable multipass

Multipass also had some fixes.
",GreLI,2015-03-22 18:06:34
322,2015-03-12 17:59:44,"Good news, and now you have a couple of good reproduction cases if you wanna test your next release
",Fuffi,2015-03-22 18:06:34
322,2015-03-30 12:16:39,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) has been just published.
",GreLI,2015-03-22 18:06:34
321,2015-03-08 21:49:31,"This file (indicator.svg):

<S_CODE_TOKEN>

Is being run through `svgo -i indicator.svg -o i.svg` ...and it comes out like this (i.svg):

<S_CODE_TOKEN>

Which renders as a much different image.
",blakelapierre,2015-03-22 15:15:39
321,2015-03-30 12:17:09,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with fix has been just published.
",GreLI,2015-03-22 15:15:39
321,2015-12-02 17:19:27,"Apparently it's again broken in v0.6.1.
Ran the file @blakelapierre submitted. The outcome is a bit different than his initial result, but still broken.
",elessar-ch,2015-03-22 15:15:39
321,2015-12-03 19:42:58,"No, that's another issue. Path is being correctly transformed, but not path data in animations.
",GreLI,2015-03-22 15:15:39
320,2015-03-05 15:22:45,"SVGO seems to remove all `fill` attributes from the `mask` element. As you can see in http://jsbin.com/noroca/2/ this produces some different image. The background is not applied to the mask so the mask is not used for the elements.

With the help of https://jakearchibald.github.io/svgomg/ I was able to find the plugin that removes this attribute: Remove unknowns & defaults.

I tried to find the correct location to add this feature to https://github.com/svg/svgo/blob/master/plugins/removeUnknownsAndDefaults.js but did not find the correct spot. Adding the mask attribute to https://github.com/svg/svgo/blob/64304f3a4d3ca28b244fa7112bc2708138dba62e/plugins/_collections.js#L1387 does not seem to be enough. :)
",tobiastom,2015-03-06 11:23:35
320,2015-03-06 11:11:47,"Yeah, it's been already fixed in #217, that's why you couldn't locate it.

> Adding the mask attribute to _collections.js#L1387 does not seem to be enough. :)

Yes, because it's already there under the 'presentation' group. (That was the fix.)
",GreLI,2015-03-06 11:23:35
320,2015-03-06 11:23:35,"Great, thank you for the info. I'll close this one.
",tobiastom,2015-03-06 11:23:35
319,2015-02-19 18:01:04,"Hello,
Thanks for your great job!
I have a question: which file ( and where is this file ) should I modify to change the default setting?
I install it by 

<S_CODE_TOKEN>

Thanks
",ganlanyuan,2015-05-24 19:20:10
319,2015-02-20 14:18:15,"Default settings are in [svgo.yml](/svg/svgo/blob/master/.svgo.yml). You may create your own YAML (or JSON) config file to extend the config with `--config` command-line key:

<S_CODE_TOKEN>

See https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#1-config
",GreLI,2015-05-24 19:20:10
319,2015-02-20 15:12:01,"Hi, thanks for your help.

I run 

<S_CODE_TOKEN>

on Terminal, but I didn't see this .yml file been created.
I also found `.svgo.yml` in package folder. And I changed 

<S_CODE_TOKEN>

to 

<S_CODE_TOKEN>

but when I run `svgo`, it didn't cleanup the `title` and `desc`.
Do you know why?

Thanks
",ganlanyuan,2015-05-24 19:20:10
319,2015-03-11 11:30:00,"I have the same problem, removeTitle and removeDesc do not work
",Fuffi,2015-05-24 19:20:10
319,2015-03-11 11:55:46,"@ganlanyuan can you try to add --multipass to your command line? It fixed the issue for me!
",Fuffi,2015-05-24 19:20:10
319,2015-03-11 13:12:14,"You mean?

<S_CODE_TOKEN>
",ganlanyuan,2015-05-24 19:20:10
319,2015-03-11 13:14:38,"Yes, clearly I added more parameters for input and output files...

More specifically I used --config=""custom.yml"", with quotes
",Fuffi,2015-05-24 19:20:10
319,2015-03-11 14:08:31,"I still can't get this done.
But thanks a lot!
I can use `svgo -f /Users/path/svg --enable removeTitle --enable removeDesc` manually.
",ganlanyuan,2015-05-24 19:20:10
319,2015-03-11 14:44:00,"FYI I also have put all the options in the : false and : true format
",Fuffi,2015-05-24 19:20:10
319,2015-03-22 20:17:41,"Do you have

<S_CODE_TOKEN>

string at the beginning of your YAML config file?
It's essential for setting plugin parameters.
",GreLI,2015-05-24 19:20:10
319,2015-03-30 12:18:04,"Check out if the problem persists in [v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1).
",GreLI,2015-05-24 19:20:10
318,2015-02-19 15:11:17,"I've encountered issues with gulp-svgmin stripping out id's even though I have set `cleanupIDs: false`. 

So, I used the svgo CLI and run

<S_CODE_TOKEN>

on the following file

<S_CODE_TOKEN>

However, the ids are still being stripped from the svg element.

I am using the most up to date version of svgo, and my version of node is 0.10.26.
",beckdavies,2015-03-29 17:45:20
318,2015-02-20 14:13:51,"I believe it's case-sensitive. I.e you have to write

<S_CODE_TOKEN>
",GreLI,2015-03-29 17:45:20
318,2015-02-20 15:56:55,"Thanks, I've just tried your suggestion and the ID's are still being removed. 

I've tested ID's on path as well as svg tags - both are removed.
",beckdavies,2015-03-29 17:45:20
318,2015-03-05 15:17:33,"Hi,
I'm having the same issue. I'm using it through gulp svgmin wrapper.
I've also tried these 2 formats:

<S_CODE_TOKEN>

I've also tried to add the `full: true` line to the options object with no luck.
",photoart-mtlwebdev,2015-03-29 17:45:20
318,2015-03-06 05:30:26,"I found that disabling the **removeUnknownsAndDefaults** plugin fixes this issue for me (removing the id of the root svg element).

It's not ideal though, because that also disables some desired minification, and the behaviour is definitely not very intuitive.
",dbdr,2015-03-29 17:45:20
318,2015-03-06 08:01:26,"Oh, I haven't noticed that it was the root <svg> tag. I'll look into this. Thanks for the input!
",GreLI,2015-03-29 17:45:20
318,2015-03-14 22:46:37,"Well, there is a special option to keep SVG id named ‘SVGid’, so it's not a bug, just disable it:

<S_CODE_TOKEN>
",GreLI,2015-03-29 17:45:20
318,2015-03-21 06:09:10,"Thanks for the info, great if it's possible to do. The naming of the options is still confusing though. Would it be reasonable to make removeUnknownsAndDefaults not touch the SVGid, and move that task to cleanupIDs?
",dbdr,2015-03-29 17:45:20
318,2015-03-21 11:47:24,"I guess so, but I haven't find out why cleanupIDs doesn't remove it itself. There is no special exception.
",GreLI,2015-03-29 17:45:20
318,2015-03-29 17:45:21,"I was wrong, `cleanupIDs` removes the id, so it's double work, thus removing redundant code.
",GreLI,2015-03-29 17:45:20
318,2015-03-30 12:18:37,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-29 17:45:20
317,2015-02-18 10:37:07,,subzey,2015-02-18 19:29:43
317,2015-02-18 10:40:58,"[![Coverage Status](https://coveralls.io/builds/1947658/badge)](https://coveralls.io/builds/1947658)

Coverage remained the same at 91.75% when pulling **8c4c197534992c93ad5e75c677d35f493f520df8 on subzey:colorname-typo** into **d668a10d144fbf7958b275950acc07402702bdd8 on svg:master**.
",coveralls,2015-02-18 19:29:43
317,2015-02-18 11:06:23,"LGTM
",shinnn,2015-02-18 19:29:43
316,2015-02-13 17:16:40,"I'm am trying to run a hexagon in the form of a `<polygon/>` element through SVGO using SVGmin for Grunt.

**This is the SVG I am using in the form of hexagon.svg**

<S_CODE_TOKEN>

**This is the console output from the grunt task**

<S_CODE_TOKEN>

**Removing the polygon produces a .length error**

<S_CODE_TOKEN>

This makes sense with no data to read.

**Removing the file allows `<path/>`, `<clipPath/>`, `<circle/>` and  others to run as expected.**
",betsydupuis,2015-05-24 19:19:50
316,2015-02-15 10:57:54,"Sorry, but I cannot find what's wrong with svgo.
",GreLI,2015-05-24 19:19:50
316,2015-02-17 15:03:36,"Do you mean that you can't duplicate, or you are unsure of what is causing the issue?
",betsydupuis,2015-05-24 19:19:50
316,2015-02-18 19:52:12,"Yeah, it looks good to me, I have no errors, and this error looks odd to me. Does disabling `convertShapeToPath` plugin solves the issue?

<S_CODE_TOKEN>

May be you should check your node.js version.
",GreLI,2015-05-24 19:19:50
316,2015-03-30 12:19:02,"Please, check out if the problem persists in [v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1).
",GreLI,2015-05-24 19:19:50
316,2017-03-14 12:46:36,"I get the same error when using @betsydupuis' code, but it works when you add the width and height attributes like this:
<S_CODE_TOKEN>",TadWohlrapp,2015-05-24 19:19:50
316,2017-03-14 15:07:31,"@TadWohlrapp, I see no errors with the latest SVGO version with or without widht/height.",GreLI,2015-05-24 19:19:50
316,2017-03-14 15:48:10,"@GreLI, you're right. I confused it with https://jakearchibald.github.io/svgomg/ where the error currently occurres. Sorry for the mixup, I might have had too many tabs open at once.",TadWohlrapp,2015-05-24 19:19:50
315,2015-02-10 09:51:54,"It seems regardless of what entries I have in my config file the file size remains the same. And takes pretty much the same amount of time to process.

How could I verify that my config file is being processed correctly?

In addition when I have a comment in my config file the following is output:

<S_CODE_TOKEN>

Is this a syntax error being reported? 
",chrissound,2015-03-22 18:01:51
315,2015-02-11 16:28:01,"It's been fixed already in the current version in the repo (a2f77ef, see line 130).
",GreLI,2015-03-22 18:01:51
315,2015-03-30 12:19:22,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-22 18:01:51
314,2015-02-09 18:51:14,"I get the following error:

<S_CODE_TOKEN>

When my Illustrator save has the following options:

![screen shot 2015-02-09 at 10 48 50 am](https://cloud.githubusercontent.com/assets/241963/6113045/3eb3e624-b049-11e4-8e61-827f670f1bd4.png)

I want to retain the Illustrator editing capabilities, but it seems to be the setting causing errors. I am happy to pass the file thru any gulp filter prior to using `gulp-svgmin`, but none seem to work. I’ve tried `gulp-svg-sprite` and `gulp-svgstore` prior to `gulp-svgmin` to no avail.
",kirkstrobeck,2016-01-04 17:22:25
314,2015-02-09 19:59:44,"Probably, it's duplicate of #272.
",GreLI,2016-01-04 17:22:25
314,2015-03-22 18:01:12,"Yes, it is. I can only suggest you to turn off «Preserve Illustrator Editing Capabilities» and don't include XMP — they are useless anyway, since svgo wipe them out anyway.
",GreLI,2016-01-04 17:22:25
313,2015-02-08 10:22:06,"I happen to use SVGs for animations and HTML clipping, among other things, so I rely on certain elements not being changed. Sometimes I just needs the `id`s to be there, other times paths shouldn't be merged, etc. 

In-file settings overrides would help, perhaps:

<S_CODE_TOKEN>

For more complex SVGs you could just enable the [`nonDestructive`](https://github.com/svg/svgo/issues/312) plugin like so:

<S_CODE_TOKEN>
",bfred-it,
313,2015-06-10 11:29:44,":+1: to this feature. It could also be a flag within the tag itself to skip optimization of that particular svg. i.e. an svgo or optimize property:

<S_CODE_TOKEN>
",una,
313,2015-06-10 13:31:46,"> i.e. an svgo or optimize property:

Sorry, I don't get it.
",GreLI,
313,2015-06-10 16:22:15,"like in the svg tag: `svgo=""false""` <-- because sometimes optimizing SVG's breaks added (hand-coded) functionality. In most cases, I want the majority of my SVG's optimized, but not all of them.
",una,
313,2015-06-11 19:31:49,"Oh, I didn't noticed it. Why not a comment? Say, right after `<svg>` tag. It could also prevent optimisation of nested svgs for some purpose. (I plan to incorporate them in the host svg document, since sprites are sometimes made in a such way.)
",GreLI,
313,2015-06-11 22:59:01,"Yeah I prefer comments inside tags. They don't get lost among other attributes.
",bfred-it,
312,2015-02-08 10:20:51,"Sometimes it makes sense to apply non-destructive changes only, so if there was a `--non-destructive` flag or a `nonDestructive` _plugin_ that when enabled, destructive plugins will be disabled and only the whitespace and comments will be removed.

Other plugin groups could follow the same structure
",bfred-it,2015-02-08 12:42:38
312,2015-02-08 10:43:30,"It's hard to say what is non-destructive. Is number rounding is non-destructive enough? Or changing XML structure? If yes what about whitespaces? Either of this is essential for effective optimizing.
I think there could be presets one if which is more careful.
",GreLI,2015-02-08 12:42:38
312,2015-02-08 12:40:41,"Non-destructive means that no content and struction should changed, essentially comments, whitespace, doctype, [xml](https://github.com/svg/svgo/blob/master/plugins/removeXMLProcInst.js) — basically the standard behavior of _HTML_ minifiers
",bfred-it,2015-02-08 12:42:38
312,2015-02-08 12:42:38,"An image cannot be optimized and be untouched in the same time. Don't touch it with svgo if you don't want changes.
",GreLI,2015-02-08 12:42:38
312,2015-02-09 09:31:53,"Do we agree that these two SVGs have the same content but one is lighter?

<S_CODE_TOKEN>

<S_CODE_TOKEN>

No attributes were touched, but by removing comments, doctype and whitespace it was reduced by 43%

I **need** svgo but sometimes I also need the integrity of the minified content to make it interactive or animated.

---

**This issue is about presets,** more than anything else. With presets one could easily disable/enable multiple plugins at once and get _what's best for the situation_ without finding and listing all the necessary plugins by hand.
",bfred-it,2015-02-08 12:42:38
312,2015-02-09 10:12:49,"You've changed whitespace (line-breaks) and doctype there, while you've sad that it should not change.
",GreLI,2015-02-08 12:42:38
312,2015-02-09 10:17:47,"No, no, there was a misunderstanding. That was an ambiguous phrasing of mine.
I meant to say _**only** comments, whitespace, doctype, <?xml **should be removed.**_
",bfred-it,2015-02-08 12:42:38
312,2015-02-09 10:25:24,"Ok, this can be a careful preset as I said earlier. But there is no presets currently. Maybe somewhere in future.
",GreLI,2015-02-08 12:42:38
311,2015-02-04 23:02:25,"Please add the api for duplicating the element with all it's content or simply add a solution to create the svg element from JSON:

exports.fn = function(data, params) {
      return JSON.parse(JSON.stringify(data)); //not working right now
}
",onlymega,2015-03-31 14:54:56
311,2015-03-30 17:22:22,"This would help with SVGOMG, where I keep a clone to avoid having to reparse the SVG per settings change. I'm currently doing really hacky things & the `parentNode` change [broke the hack](https://github.com/jakearchibald/svgomg/blob/master/src/js/svgo-worker/main.js#L66).

I'm happy to create `JsAPI.prototype.clone` for this - any objections @GreLI?
",jakearchibald,2015-03-31 14:54:56
311,2015-03-30 17:30:58,"No objections. Pull-requests are welcome.
",GreLI,2015-03-31 14:54:56
310,2015-02-01 23:28:23,"If item is defined in <defs> but not used in <use> it must be removed.
In the example below <g id=""shape2""> need to be removed because it is not used anywhere:

<S_CODE_TOKEN>
",onlymega,2015-03-28 21:32:40
310,2015-02-01 23:48:57,"There is no such a plugin in `svgo` for now. Also, one may have an [icon system](http://tympanus.net/codrops/2013/11/27/svg-icons-ftw/) with source file inlined in html and then icons used within that html code later.
Perhaps the easiest way to implement it is to extend `cleanupIDs` plugin by removing the whole unused element in `<defs>` instead of just an `id` attribute.
",GreLI,2015-03-28 21:32:40
310,2015-03-30 12:20:06,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the new plugin has been just published.
",GreLI,2015-03-28 21:32:40
309,2015-02-01 07:22:03,"Here's the image:
https://gist.github.com/b9b2f5b7222be4dff803

What I'm doing is:

<S_CODE_TOKEN>
",iliakan,2015-02-01 12:40:08
309,2015-02-01 12:24:59,"That happens because svgo keeps IDs values in an object dictionary, and '__proto__' id rewrites prototype of the internal svg representation, thus breaking svgo work.
",GreLI,2015-02-01 12:40:08
309,2015-03-05 10:02:39,"Maybe release a new version with this fix?
",iliakan,2015-02-01 12:40:08
309,2015-03-05 11:47:52,"Yes, the new version is coming. Need to fix some other bugs too.
",GreLI,2015-02-01 12:40:08
309,2015-03-05 14:42:59,"Looking forward to test it on my svgs :)
",iliakan,2015-02-01 12:40:08
309,2015-03-30 12:20:25,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-02-01 12:40:08
308,2015-01-31 13:15:21,"I'm trying to install svgo but I'm getting warnings and errors. Here is the _npm-debug.log_ 

https://gist.github.com/siddhion/90dc2146598f1ce414f9

and here is what terminal spit out

<S_CODE_TOKEN>
",siddhion,2016-02-23 16:24:14
308,2015-02-03 08:37:16,"This looks like ionic has similar dependencies, but for different versions. But the problem is npm I guess.

Try:

<S_CODE_TOKEN>

This cleans your npm cache, and often times this fixes the ""unmet dependency"" thing.
",sateffen,2016-02-23 16:24:14
308,2015-02-03 13:44:40,"I see but I still get the errors. 

<S_CODE_TOKEN>
",siddhion,2016-02-23 16:24:14
308,2016-02-23 16:24:14,"Seems like it's not an issue anymore with newer version of npm/ionic/svgo.
",GreLI,2016-02-23 16:24:14
307,2015-01-30 15:36:31,"SVGO now successfully removes Sketch namespaces, elements and attributes https://github.com/svg/svgo/pull/152

But we stumbled upon a case where [our svg file](https://gist.github.com/kizu/898304c5f02d741548e1) had `xmlns:sketch` removed by Illustrator effectively making the whole file invalid.
![](http://i.imgur.com/5075gDJ.png)

We could use some external find and replace tool to remove those attrs, but since SVGO successfully handles removal of all Sketch stuff _together_, it would be great to have a feature to _remove all attributes with undeclared namespaces_. Or maybe even all invalid attributes.
",arteg,2016-11-13 10:25:56
307,2015-02-15 11:03:14,"It's an invalid XML, unfortunately. svgo can't process such a file, since parser declines it.
",GreLI,2016-11-13 10:25:56
306,2015-01-28 15:09:02,"SVG files that initially have a MIME type of `image/svg+xml` become `text/plain` after being touched by SVGO. This kinda throws a bug in scripts I’ve written which need to access MIME type for various purposes such as base64 encoding for web.
",dangodev,2015-02-15 11:04:56
306,2015-01-31 18:39:10,"I guess it's not svgo issue, it's an OS responsible for this. Usually, `.svg` extension has `image/svg+xml` MIME type, so you should write svgo output with it.
",GreLI,2015-02-15 11:04:56
306,2015-02-02 03:00:23,"@GreLI I don’t really understand your comment; could you please explain?

I was saying that svgo changes the MIME types for SVGs on my machine with the `svgo` command. I don’t understand how this is an OS issue.
",dangodev,2015-02-15 11:04:56
306,2015-02-02 19:35:52,"I have no idea how a program can _change_ MIME type a single file.
",GreLI,2015-02-15 11:04:56
306,2015-02-02 19:43:45,"![screen shot 2015-02-02 at 2 42 34 pm](https://cloud.githubusercontent.com/assets/1369770/6007649/cbd16ae6-aae9-11e4-9663-0b5e4b855840.png)

`logo.svg` is an SVG saved straight out of Illustrator.
",dangodev,2015-02-15 11:04:56
306,2015-02-02 19:56:51,"Ok, got it. I guess your OS follows linux way and makes a guess about MIME type by looking into the file content. Since svgo removes doctype and xml prolog, that checks no longer work. Try for example disabling `removeDoctype` plugin:

<S_CODE_TOKEN>

But if you want to have maximum compression (doctype is totally useless in all other cases and even [isn't recommended](http://www.w3.org/TR/SVG/intro#NamespaceAndDTDIdentifiers) in the spec itself) you'd prefer to change how MIME type detection works (e.g. by .svg extension) or amend scripts depending on it. Unfortunately, I can't help you with that.
",GreLI,2015-02-15 11:04:56
306,2015-02-02 20:01:05,"Ah—I understand now. I didn’t understand that MIME was a result of file contents, in this case the `<?xml ...>` doctype like you specified. I guess that makes sense—I can’t imagine where else the MIME would exist other than file contents, but that hadn’t occurred to me.

Might I suggest adding this as a line in the README? It might be useful to other users as well—I searched the README before making this issue and MIME didn’t appear. Many others may be in the same boat: they may not know that MIME and doctype are one and the same.
",dangodev,2015-02-15 11:04:56
306,2015-02-03 08:48:27,"The issue with the mimetype is not a thing with other tools. If you use

<S_CODE_TOKEN>

this should print ""image/svg-xml"", because this tool uses the mime-type database of your OS instead of the file content.

So depending on the tool, you should get the correct mime-type. This could confuse some people as well, if you tell them ""the mime-type changes"".
",sateffen,2015-02-15 11:04:56
306,2015-02-03 14:53:05,"Well, then.

Thank you for educating me and sorry for opening up a non-issue. :) (no, seriously—thank both of you guys!)
",dangodev,2015-02-15 11:04:56
306,2015-02-15 11:04:55,"I'm glad, it's been settled.
",GreLI,2015-02-15 11:04:56
306,2016-10-21 08:41:39,"@dangodev How did you fix it finally ? This : `svgo --disable=removeDoctype` is not working for me but after adding that xml you mentioned manually it worked.
Would be handy if I can get the above command to word.
",PezCoder,2015-02-15 11:04:56
306,2016-10-21 13:42:36,"@PezCoder I didn’t really “fix” it; I just stopped relying on MIME type because it’s dependent on the contents of the file. It’s metadata, and technically unnecessary which is why I guess SVGO removes it by default—it kind of exists to strip unnecessary metadata from the file to compress it. In other words, I’m now aware that MIME type is volatile and unpredictable based on a number of factors.

As for which SVGO flag keeps the MIME type metadata in the file, I can’t say. But for my purposes I just rely on file extension now rather than MIME type.
",dangodev,2015-02-15 11:04:56
305,2015-01-27 12:17:51,"This is disabled by default in sax-js, and [by their own admission](https://github.com/isaacs/sax-js) makes sax-js a jerk. Having it enabled also causes bugs like [#225](https://github.com/svg/svgo/issues/225) and [#272](https://github.com/svg/svgo/issues/272) - breaking svgo entirely for SVG exported from Illustrator with certain settings. Seems more prudent to let some things 'slip by' with strict mode disabled rather than fail entirely.
",mhoffmeyerDC,2015-01-28 03:51:10
305,2015-02-14 05:14:05,"Why was this closed?
",aidansteele,2015-01-28 03:51:10
305,2015-02-14 05:22:47,"Disabling strict mode broke many of the tests, I think it caused some rounding errors in the SVG.
",mhoffmeyerDC,2015-01-28 03:51:10
305,2015-02-14 05:24:20,"Thanks for such a quick response. Is there a solution on the horizon for the issues linked in the PR?
",aidansteele,2015-01-28 03:51:10
305,2015-02-14 05:30:34,"The original issue I was having was svgo failing over an SVG with the Adobe Illustrator ""preserve editing capabilities"" mode enabled . It had some weird namespace convention or character that made sax-js, in strict mode, fail. I guess another solution would be to use a regex to check for that string that sax doesn't like and replace it or delete it.
",mhoffmeyerDC,2015-01-28 03:51:10
305,2015-02-14 05:35:18,"I would suggest that such a regex-stripping solution could be implemented as a plugin, but plugins appear to be executed after sax-js rejects the file. 

Given the ""hackiness"" of a such a regex solution, it still seems like it should be a plugin rather than core functionality - maybe the plugin architecture could be enhanced to support plugins running earlier in the pipeline? I'd be happy to write a plugin to fix this issue, but changing the plugin architecture might be better suited to someone more familiar with the codebase.
",aidansteele,2015-01-28 03:51:10
305,2015-04-13 08:14:56,"+1
I am trying to optimize SVGs created wihj Adobe illustrator and the entity references cause sax to fail, i.e. <path style=""&st0;"" .../>.
Is there any workaround?
",eitanp461,2015-01-28 03:51:10
305,2015-04-13 10:29:58,"The workaround is to save images in Illustrator with disabled options like “Preserve editing capabilities” (they don't make sense anyway if you are passing that images to svgo). Or it's possible to replace entities with their value manually, but it's suits better if you have only one or few images.
",GreLI,2015-01-28 03:51:10
304,2015-01-26 11:28:32,"…if you think it's useful. Also interested in any changes/suggestions you might have to the app, where's the best place to chat/email?
",jakearchibald,2015-01-26 12:09:17
304,2015-01-26 11:29:53,"[![Coverage Status](https://coveralls.io/builds/1805675/badge)](https://coveralls.io/builds/1805675)

Coverage remained the same at 92.62% when pulling **cd2f0b682b7bdded8240297955f984ab3629b84e on jakearchibald:patch-1** into **bada6b2a8c5ac9d3bc06f1ad631e14a9157f4a5f on svg:master**.
",coveralls,2015-01-26 12:09:17
304,2015-01-26 12:09:21,"Ok
",GreLI,2015-01-26 12:09:17
303,2015-01-26 03:33:48,"svgo with the --multipass option breaks this image.

<S_CODE_TOKEN>

The result is a black outline of the image.

Any ideas what is happening?
",GICodeWarrior,2015-03-30 12:21:00
303,2015-01-26 11:18:31,"I don't see a difference with the current version in the repo. Probably, you should wait for a new version. There was a bug fixed related to multipass, but it isn't released yet.
",GreLI,2015-03-30 12:21:00
303,2015-03-30 12:21:00,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-30 12:21:00
302,2015-01-24 10:09:31,"OS X app [Sketch](http://bohemiancoding.com/sketch/) saves its useless signature in every exported SVG file.

<S_CODE_TOKEN>

I think it's safe to assume nobody really wants to have that in their minified file. Maybe this should be in the [removeEditorsNSData plugin](https://github.com/svg/svgo/blob/master/plugins/removeEditorsNSData.js). AI and Inkscape seem to only leave a simple comment.
",bfred-it,2015-03-22 15:15:39
302,2015-03-22 20:24:07,"No?
",bfred-it,2015-03-22 15:15:39
302,2015-03-23 11:40:43,"See the commit, I've added a check and enabled a plugin. Will work in the coming next version.
",GreLI,2015-03-22 15:15:39
302,2015-03-23 15:00:25,"Aaah, sorry, I didn't see the commit in the [CodeHub](https://itunes.apple.com/us/app/codehub-github-for-ios/id707173885?mt=8), I only saw that it was closed
",bfred-it,2015-03-22 15:15:39
302,2015-03-30 12:21:13,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-22 15:15:39
302,2015-03-30 17:23:40,"Thank you!
",bfred-it,2015-03-22 15:15:39
302,2015-03-30 17:31:28,"Though I've forgot to mention it in the list of changes.
",GreLI,2015-03-22 15:15:39
301,2015-01-20 11:54:30,"Hi there,

in my project I'm using SVG as part of my templates, and want to optimize them with SVGO, but it removes important attributes.

I'm using knockout to bind behaviour to elements, so I'm using the ""data-bind=..."" attribute, but this gets removed.

Is it possible to configure a list of attributes, that should not get removed?
",sateffen,2015-02-15 12:14:19
301,2015-01-20 12:09:28,"There is `removeUnknownsAndDefaults` which can be disabled, like this:

<S_CODE_TOKEN>
",GreLI,2015-02-15 12:14:19
301,2015-01-20 12:54:12,"Would this disable all removing?

If yes this would just be not a really cool thing, because other attributes should get removed.

I just think about it, maybe a knockout sensitive plugin would make sense.

Is there a possibility to load plugins from npm modules? Then I would write an external plugin, load it via npm in our CI, connect it with grunt (grunt-svgmin maybe?) and could use it this way.
",sateffen,2015-02-15 12:14:19
301,2015-01-20 13:44:52,"Yes, this plugin is responsible of removing of all unknown elements and attributes, also it removes attributes with default values.
The list of attributes is in [plugins/_collections.js](//github.com/svg/svgo/blob/master/plugins/_collections.js). You can add there your own.
Probably, it's a good idea not to remove data-\* attributes.
",GreLI,2015-02-15 12:14:19
301,2015-01-20 15:00:04,"Removing data-bind=""..."" prevents knockout from working correctly^^

With other frameworks you define this binding-attributes by yourself, just like the names. It is a good way starting them with ""data-_"", but not all people do this. Think about angular or rivets together with SVG. So exluding patterns would be cool, for my case not removing ""data-_"" would be cool as well.

What do you think about that? Or what are your plans about this?
",sateffen,2015-02-15 12:14:19
301,2015-01-21 12:46:48,"No short-term plans (I just don't have time), but in long-term yes, it should be done.
",GreLI,2015-02-15 12:14:19
301,2015-01-21 17:59:38,"+1!
",cibulka,2015-02-15 12:14:19
301,2015-03-30 12:21:30,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-02-15 12:14:19
300,2015-01-17 22:13:08,"Is this bug or feature?

<S_CODE_TOKEN>
",isqua,2015-01-19 15:22:53
300,2015-01-18 08:42:41,"This happens because optimisations are simple enough and done in one pass. Sometimes in complex cases several passes produce best result. There is recently added `--multipass` command-line key which does multipass optimisations (limited by 10 times).
",GreLI,2015-01-19 15:22:53
300,2015-01-19 11:32:42,"@GreLI, ok, thank you.
",isqua,2015-01-19 15:22:53
299,2015-01-09 15:01:44,"The spaces here are meaningful (spaces in the sentence) and should not be trimmed.
## Input:

<S_CODE_TOKEN>
## SVGO Output (indented for readablity):

<S_CODE_TOKEN>
",timkelty,2015-02-15 19:40:17
299,2015-01-31 18:35:31,"It's a parser bug, unfortunately.
",GreLI,2015-02-15 19:40:17
299,2015-03-30 12:21:58,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-02-15 19:40:17
298,2015-01-09 13:49:43,"Here's the input and output:

![original](https://cloud.githubusercontent.com/assets/1402241/5680526/3292bfe4-97c3-11e4-9232-6a325f1a6d6a.png) ![output](https://cloud.githubusercontent.com/assets/1402241/5680527/32962ba2-97c3-11e4-9e41-9c4a83487b50.png)

[SVGs download](http://cl.ly/ZEsx)
",bfred-it,2015-03-22 15:15:38
298,2015-01-09 13:51:16,"Yeah, it's a known issue with `mergPaths` plugin.
",GreLI,2015-03-22 15:15:38
298,2015-01-09 14:06:18,"Gotcha. I _solved_ by preventively merging the paths with Illustrator ""Unite paths"" command (Sketch's has a similar issue)
",bfred-it,2015-03-22 15:15:38
298,2015-01-12 17:27:13,"+1
",rinatio,2015-03-22 15:15:38
298,2015-01-12 18:11:13,"+1
",paperboyo,2015-03-22 15:15:38
298,2015-03-30 12:22:06,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-22 15:15:38
297,2015-01-07 08:43:51,"`type=""translate""` is removed in this example by the plugin `removeUnknownsAndDefaults`.

This causes the animation to don't work on the svg.

<S_CODE_TOKEN>
",laurent-le-graverend,2015-03-22 17:56:53
297,2015-02-15 12:21:00,"`type=""translate""` is the default value, and thus correctly being removed. Are you sure that it's the real source of problem? Probably it's a bug in your software, or some other reason.
",GreLI,2015-03-22 17:56:53
297,2015-02-27 12:48:21,"I have the same issue, removing type ruins the way animation works.
",khashayar,2015-03-22 17:56:53
297,2015-03-16 12:12:45,"Sorry, without an example file there is nothing I can do.
",GreLI,2015-03-22 17:56:53
297,2015-03-30 12:22:25,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-22 17:56:53
296,2015-01-06 17:00:10,"Is anybody interested in this?
",ionutzp,
296,2015-01-06 17:05:55,"Well, we'll be always glad to review a pull request. Actually, svgo now do nothing with styles, and optimizations suffer from that. Not sure though that the plugin like this should be enabled by default.
",GreLI,
296,2015-08-05 11:12:36,"I'd be keen to see this. I'm struggling with the way in which Illustrator outputs SVGs. I can either have IDs on paths and inline styles or IDs and classes on paths with a `<style>` block... But not both. 

This means that I duplicate IDs across the document when the same SVG is used or the `<style>` blocks leak and end up affecting paths in other SVGs on the page that have the same class.

It would be great if SVGO could inline the styles and then remove the `<style>` element altogether. On reading your comment on another issue, #399, this might not be possible?
",shooftie,
296,2015-08-06 22:09:11,"+1

Example file:

<S_CODE_TOKEN>

With best regards
",strarsis,
296,2015-10-28 13:03:27,"+1
",Joeynoh,
296,2015-10-28 23:09:49,"PR has been prepared for a plugin: https://github.com/svg/svgo/pull/447

It doesn't support CSS selectors beyond class/id yet, but this isn't very usual with SVG yet 
and it would propably require additions to the AST API passed to the plugins.
",strarsis,
296,2015-10-29 15:04:14,"How to handle styles and classes processed by this plugin? See PR discussion.
",strarsis,
296,2016-07-18 16:45:16,"Adding a +1 to this. I've got two SVGs from Illustrator that have conflicting classes/styles and would love an easy way to prevent this.
",chrisblakley,
295,2014-12-29 20:58:41,"How can I do this? Looking in the source of `convertPathData.js` there's a argument (`curveSmoothShorthands`) but that convert curves into smooth shorthands I want this in the opposite order.

I want this for my Android project which includes [this](https://github.com/romannurik/muzei/blob/master/main/src/main/java/com/google/android/apps/muzei/util/SvgPathParser.java) SVG parser but that doesn't support smooth shorthands (S/s) yet.

I hope what I have requested is possible.

SVG:

<S_CODE_TOKEN>
",GerritHoekstra,2014-12-30 19:01:06
295,2014-12-30 11:31:16,"If I try to add this code:

<S_CODE_TOKEN>

on [line 489](https://github.com/svg/svgo/blob/master/plugins/convertPathData.js#L489) in convertPathData.js and set `curveSmoothShorthands` to false, and add `smoothShorthandsCurve: true,` to  `exports.params`.

Then this happens:
![Before - After](https://cloud.githubusercontent.com/assets/3610345/5578025/ae8494b2-901e-11e4-926b-67b4e4f4af2b.png)
(Before - After)

SVG after:

<S_CODE_TOKEN>

The smooth shorthands are gone, but I'm not satisfied with the result. Is this because when you try to convert smooth curves to curves the 'smooth' is gone?
",GerritHoekstra,2014-12-30 19:01:06
295,2014-12-30 18:49:51,"Note, that by the spec „The first control point is assumed to be the reflection of the second control point on the _previous_ command relative to the current point.“
Actually, there is variable `sdata` that is enhanced `data` like `data` in `c`. You can just change `instruction` to `c` and `data` to `sdata`.
",GreLI,2014-12-30 19:01:06
295,2014-12-30 19:01:06,"Thanks, when I changed `instruction` to `c` and `data` to `sdata` it worked perfectly.

Also thanks for amazing tool!
",GerritHoekstra,2014-12-30 19:01:06
294,2014-12-23 16:01:46,"I find that the `convertTransforms` plugin does more harm than good often. For instance, it converts [this](data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%22-100%20-100%20200%20200%22%3E%0D%0A%20%20%20%20%3Cpath%20d%3D%22M12.6%208.6l-3.1-3.2-3.1%203.2-.8-.7%203.9-3.9%203.9%203.9zM9%205h1v10h-1z%22%20transform%3D%22rotate%28-90%209.5%209.5%29%22%20%3E%3C%2Fpath%3E%0D%0A%3C%2Fsvg%3E):

<S_CODE_TOKEN>

into [this](data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%22-100%20-100%20200%20200%22%3E%0D%0A%20%20%20%20%3Cpath%20d%3D%22M8.6-12.6L5.4-9.5l3.2%203.1-.7.8L4-9.5l3.9-3.9zm.4%2024.8v-1h10v1z%22%2F%3E%0D%0A%3C%2Fsvg%3E)

<S_CODE_TOKEN>

This is a complety different image.

I'm guessing the math is off somewhere.
",romeovs,2015-03-22 15:15:39
294,2014-12-23 18:42:19,"Well, actually it's not the result of `convertTransforms` plugin, but `convertPathData`. It just doesn't take in account optional `cx` and `cy` parameters of `rotate()`.
",GreLI,2015-03-22 15:15:39
294,2015-03-30 12:22:44,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-22 15:15:39
293,2014-12-19 19:05:52,"One possible optimization comes by scaling/multiplying each point by a power of 10 - matching the (most common ?) point of precision.

This could/would effect the width/height of the SVG, but it should still be equally useable in most situations.

**Example:**

Facebook logo (optimized 216 bytes - gzipped 197 bytes):

<S_CODE_TOKEN>

Facebook logo multiplied by 10 (optimized 191 bytes - gzipped 186 bytes):

<S_CODE_TOKEN>

11.5% savings without gzip, 5.9% savings with gzip.
",joeyhoer,2016-11-13 10:24:51
293,2015-03-18 21:23:05,"By simply truncating or rounding decimal points, there is an assumption about the user space in which the values are defined is both consistent within the document and already optimal. Its explicitly the value of SVG that this is not necessarily the case. 

As a result, the optimization is not likely to be optimal in many cases. Consider the following example from MDN:

<S_CODE_TOKEN>

The optimization of this SVG should be:

<S_CODE_TOKEN>

Ideally the concept of ""precision"" should be replaced with the concept of ""maximum significant digits"".
",littlefyr,2016-11-13 10:24:51
293,2015-03-18 21:59:17,"Well, it's really rare when you meet such a file which have numbers ending with zeroes. Or have a GCD. Most likely you'll see an image with paths which contains Bezier curves with fractions in numbers (6 for each segment, sometimes 4). Moreover, rounding this numbers have considerable effect on image. E.g. rounding to one digit instead of two.

Also, you need to add `viewBox` attribute if an image didn't have it, to check if default values like `stroke-width=""1""` used and add them too, appropriately scaled. Be sure that the profit will be more than the side effects. And so on.
",GreLI,2016-11-13 10:24:51
293,2015-03-19 21:55:59,"The problem is that SVG is a mathematical construct. If you don't take that into account when processing SVG, you're going to break something. 

Here are non-trivial (ok only slightly non-trivial) SVG images using paths. I copied the first from MDN and modified it. Yes, I'm too lazy to do more than divide by 10, but you get the point. 

These image are, by definition, identical in every way except lexically (which I realize may not be the right word). However, the precision reducing algo will produce radically different results on each for the exact same parameters. 

<S_CODE_TOKEN>

It strikes me as definitely wrong that rounding to 1 decimal place would result in two totally different results for two identical images. Not in terms of filesize, but the images could not longer be said to be identical. 

Now i could have chosen to do more complex math and set the viewbox to `0 0 10 10` but who wants to do that? The point, I think, is clear.

That one might get a 4-6 decimal points from a drawing program has little bearing on the precision of those curve points. 4-6 decimal points on an image that has a total dimension of 10000x10000 is going to be a lot different than 4-6 decimal points on an image 10x10. 

The reason I think this is important is that without taking the math into account, you can't, for example, have a directory full of SVGs that you expect to compress well _unless you enforce that they're all created identically_ which is going to be impossible unless you are also the source of all those SVGs. 

I get that this is hard. But because it breaks some fundamental properties of SVG, you either have to account for it or clearly outline the limitations.
",littlefyr,2016-11-13 10:24:51
293,2015-03-19 22:46:06,"@littlefyr I do like your point of ""maximum significant digits"", but as @GreLI pointed out, a GCD is very infrequent in most realistic applications.

I'm having some difficulty understanding the relevance of your comments as it pertains to this particular feature request. While I understand and agree that modifying values is a delicate procedure, and that extra care must be taken to ensure that all values are scaled equally, neither of your examples appear to demonstrate the optimal markup using the suggested transformation, which would be:

<S_CODE_TOKEN>

This is 5.5% smaller than the example using the tenths place and 10.7% smaller than the example using the ten thousandths place. When gzipped, thats 1.3% and 4.2% smaller, respectively.

Of course, there are further optimizations that could be applied to the given example, but I'm hoping the simplicity of your examples will further illustrate the point.

I think you may be confusing some other optimization (rounding?) with the optimization I am suggesting; perhaps my use of the word ""precision"" in the title is the source of the confusion.
",joeyhoer,2016-11-13 10:24:51
293,2015-03-20 10:24:32,"+1

I've successfully used this technique manually to optimise SVGs. See e.g. https://github.com/guardian/frontend/pull/5041#issuecomment-48520340 for (a bit muddled) explanation/example. Maybe SVGO could produce several differently scaled images and then choose the one that optimises to the smallest file?

Regards
m.
",paperboyo,2016-11-13 10:24:51
293,2015-03-20 16:49:18,"@joeyhoer I'm piggy backing on your issue because what I am suggesting is effectively the same. 

While its true, as @GreLI says, that you would need to have a viewBox in order to do that, the viewBox only defines the coordinate of the viewport. If no viewBox is defined, you can use `viewbox=""0 0 width height""`.

One way to do this is to divide by a sufficient power of 10 that makes all the values between 0 and 1 (ok +1 and -1) round the value, to say 6 decimal places, and multiply by 10^6 (in this case).

The biggest problems are (and I'm not sure its not a problem) may be with some path constructs like Arcs. I've never used them, but when I tried building one of my examples, i naively tried multiplying all the values by 10, but the arcs broke. 

Also using different units like mm or cm would be challenging. 
",littlefyr,2016-11-13 10:24:51
293,2015-03-20 18:43:30,"> The biggest problems are (and I'm not sure its not a problem) may be with some path constructs like Arcs. I've never used them, but when I tried building one of my examples, i naively tried multiplying all the values by 10, but the arcs broke.

Yeah, that's because three of 7 parameters there: one is rotation angle (often 0, but if present shouldn't be modified) and two flags (0 or 1, spec says they can be set by any non-zero value, but no sense in doing so).
",GreLI,2016-11-13 10:24:51
293,2015-07-09 23:50:30,"I'm not sure how to approach this mathematically, but we could also reduce file size by multiples of 2 and 5, in addition to 10.

In the example from [Mar 19](#issuecomment-83773767) we could save an additional 8.8% by multiplying everything by 5 (which gets rid of all the .2s). We could do the same with multiples of 2 if there are a large number of .5s.

<S_CODE_TOKEN>
",philbar,2016-11-13 10:24:51
293,2016-01-18 19:33:05,"You already round to the third digit after the dot. So you can try to find the least common multiple of all node numbers (to a deviation of n% - that the user could specify) and multiply everything with that.
",atk,2016-11-13 10:24:51
293,2016-04-28 08:24:56,"I started working on something like this a while ago for a tool I was building. My approach was to scale out precision by raising values by a power of ten. I've created a plugin for SVGO and raised a work-in-progress [PR on my fork](https://github.com/keithclark/svgo/pull/1) if you'd like to take a look.
",keithclark,2016-11-13 10:24:51
293,2016-04-28 16:59:47,"How about this. 
1. The user passes in the number of significant digits (`sd`). 
2. Get the rounding factor (bad term) `var rounding = Math.pow(10,sd);`
3. Get all the values to be scaled into an array (`allValues`). 
4. Get the absolute value of each value to be scaled: `var absValues = allValues.map( (v) => Math.abs(v));`
5. Get the minimum value and multiply by our rounding factor: `var scaling = Math.min.apply(null, absValues) * rounding;`
6. Scale our original values: `var newValues = allValues.map( (v) => Math.round(v / scaling));`
7. Find the greatest common divisor in `newValues` (use mathjs.org, or similar): `var gcd = math.gcd.apply(null, newValues);`
8. Scale all the values by the GCD: `if (gcd !=1) { newValues = newValues.map( (v) => v/gcd); }

Now I'm sceptical that you'd ever likely do that last step. Yet, i think there is another level of optimization here. 

If you _really_ wanted to go a step further, You could divide `newValues` by every prime number between 1 and 10<sup>`sd`</sup> (there are 168 for `sd=3`) and find the prime that leaves you with the most integer values. You can then find the GCD of those whole numbers and use that as your final scaling factor. 

Or something like that. 
",littlefyr,2016-11-13 10:24:51
293,2016-11-13 10:24:51,"There is an article about such an optimization: [Understanding and Manually Improving SVG Optimization](https://css-tricks.com/understanding-and-manually-improving-svg-optimization/). The key part is making decision about does the image breaks. I'm afraid that cannot be automated.
",GreLI,2016-11-13 10:24:51
292,2014-12-18 05:33:42,"### Distribution build failing for Web Starter Kit

![Terminal failure screenshot](http://f.cl.ly/items/122h183n2F2r162d3O1m/Screen%20Shot%202014-12-18%20at%2010.58.23%20am.png)

Just wanted to check if we can add this sanity check here?

After adding this sanity, the build was smooth.

![Terminal success screenshot](http://f.cl.ly/items/2K2y1v1v19442U1n0L0M/Screen%20Shot%202014-12-18%20at%2011.07.00%20am.png)
",samarpanda,2014-12-18 07:46:47
292,2014-12-18 05:34:48,"[![Coverage Status](https://coveralls.io/builds/1628950/badge)](https://coveralls.io/builds/1628950)

Coverage remained the same when pulling **1ccdc0d76be937ea52993a7ec46ea2f23a74c1f8 on samarpanda:wsk_build_error** into **259ae7e7d9dfd59161669495ec1ac43f6e677544 on svg:master**.
",coveralls,2014-12-18 07:46:47
292,2014-12-18 05:42:26,"https://github.com/google/web-starter-kit/issues/577
",samarpanda,2014-12-18 07:46:47
291,2014-12-17 11:13:49,,4exova,2014-12-18 07:48:14
290,2014-12-12 10:41:43,"An SVG like this one:

<S_CODE_TOKEN>

…will be compressed into:

<S_CODE_TOKEN>

… which, if svgoed again, will be optimized further:

<S_CODE_TOKEN>

This is due to `collapseGroups` running before `mergePaths`, therefore not catching the newly-unnecessary `<g fill=""#AC162C"">`

Test SVG file: http://cl.ly/Yw2Y
",bfred-it,2015-02-08 10:39:48
290,2014-12-12 10:43:52,"[![Coverage Status](https://coveralls.io/builds/1601712/badge)](https://coveralls.io/builds/1601712)

Coverage remained the same when pulling **81d7a08a5fa19850592d9c0a6ab860de15354d16 on bfred-it:master** into **259ae7e7d9dfd59161669495ec1ac43f6e677544 on svg:master**.
",coveralls,2015-02-08 10:39:48
290,2014-12-12 19:10:10,"There is a catch. Consider the example:

<S_CODE_TOKEN>

Right now it'll be transformed into

<S_CODE_TOKEN>

after `colapseGroups` and then merged with `mergePath`.
But it will not happen after your changes. A more generic solution is needed.
For now there is `--multipass` key to account such cases as yours.
",GreLI,2015-02-08 10:39:48
289,2014-12-10 07:29:45,"When I try to run `gulp` in a cloned folder of [google/web-starter-kit](https://github.com/google/web-starter-kit) it prompt me with:

<S_CODE_TOKEN>
",subtik,2015-03-30 12:23:03
289,2014-12-10 14:37:56,"Duplicates #277, I guess
",GreLI,2015-03-30 12:23:03
289,2014-12-15 19:21:27,"I am having the same issue with gulp-imagemin which uses this package (gulp-imagemin>imagemin>imagemin-svgo>svgo).
",xsegrity,2015-03-30 12:23:03
289,2014-12-16 08:02:02,"The error is thrown from https://github.com/google/web-starter-kit/blob/master/app/images/hamburger.svg in google/web-starter-kit for me. It contains `<path d=""z"" fill=""none""/>` throwing the error.
",MariusRumpf,2015-03-30 12:23:03
289,2014-12-16 16:12:40,"@MariusRumpf that was indeed the issue for me as well - good find. I had the gulp-imagemin wrapped in a gulp-cache which is what was throwing me off.

@GreLI feel free to close this issue as a problem with ""idiot user"" :)
",xsegrity,2015-03-30 12:23:03
289,2014-12-16 18:37:43,"I believe that software shouldn't fail even with with incorrect data, so I will take a look eventually.
",GreLI,2015-03-30 12:23:03
289,2015-03-30 12:23:03,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-30 12:23:03
288,2014-12-08 12:41:57,"svgo will remove the `<g class=""st0"">` from the following snippet, which results in a clipping error in the minified output.

<S_CODE_TOKEN>
",bfanger,2015-03-15 10:02:02
288,2014-12-08 19:28:10,"Yes, svgo currently doesn't work with classes and styles well.
",GreLI,2015-03-15 10:02:02
288,2015-03-15 08:11:20,"But here `collapseGroups` is responsible for the error.
",GreLI,2015-03-15 10:02:02
288,2015-03-30 12:23:21,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-15 10:02:02
288,2015-03-30 15:23:00,"It works like charm, Thanks!
",bfanger,2015-03-15 10:02:02
287,2014-12-07 11:31:49,"Although I can round numeric values to the fixed precision, cannot do list of values(such as `points`, `viewport`, `enable-background`).

ISSUE:
On the default order of `.svgo.yml`, 
`cleanupNumericvalue` works before `cleanupEnableBackground`, so default `enable-background` come to be no longer equal to `width`&`height`.

<S_CODE_TOKEN>

Besides, 
this is useful for `polygon` morphing animation(without convert to `path`, because path morphing is difficult).
like this: http://jsfiddle.net/m0jpfL5b/1/
",kiyopikko,2014-12-07 13:11:37
287,2014-12-07 11:32:48,"[![Coverage Status](https://coveralls.io/builds/1575200/badge)](https://coveralls.io/builds/1575200)

Coverage remained the same when pulling **385d6534d2de5c6337aa3e619d22e21218fd0ce2 on kiyopikko:20141207_kiyopikko** into **71b010db088b0525970b81e95b396d099daedfcc on svg:master**.
",coveralls,2014-12-07 13:11:37
287,2014-12-07 11:41:22,"Good job, but it lacks tests.
",GreLI,2014-12-07 13:11:37
287,2014-12-07 12:49:25,"[![Coverage Status](https://coveralls.io/builds/1575313/badge)](https://coveralls.io/builds/1575313)

Coverage remained the same when pulling **8222f41cd4878cf76b4ff53ebe565e2daf3b1d49 on kiyopikko:20141207_kiyopikko** into **71b010db088b0525970b81e95b396d099daedfcc on svg:master**.
",coveralls,2014-12-07 13:11:37
287,2014-12-07 12:51:15,"Sorry... I added test files.
",kiyopikko,2014-12-07 13:11:37
287,2014-12-07 13:11:35,"Excellent!
",GreLI,2014-12-07 13:11:37
286,2014-12-05 20:52:34,"some color names are shorter than hex
",Yeti-or,2014-12-06 10:34:31
286,2014-12-05 20:55:13,"[![Coverage Status](https://coveralls.io/builds/1570665/badge)](https://coveralls.io/builds/1570665)

Coverage remained the same when pulling **ccd05417125a2c8420cd60b0846e8da935d0eb09 on YetiOr:colors-short-names** into **59ab38ea8e51a298124bcc839deba67136bd4821 on svg:master**.
",coveralls,2014-12-06 10:34:31
286,2014-12-06 07:41:07,"Nice!
",GreLI,2014-12-06 10:34:31
285,2014-12-05 19:19:32,"After compressing [this](https://www.dropbox.com/s/epaxeyjsa90ty1f/stepic_logo_christmas_full.svg?dl=1) file white color changed to black.

P.S. by compressing I mean running SVGO 20+ time with `--multipass`. See #284
",H1D,2014-12-10 15:07:48
285,2014-12-09 14:34:51,"Are you sure that it's because of svgo work? I couldn't reproduce this.
",GreLI,2014-12-10 15:07:48
285,2014-12-09 15:09:36,"@GreLI pretty sure http://www.youtube.com/watch?v=BTUbrcVd10U
to repreat (OS X):

<S_CODE_TOKEN>
",H1D,2014-12-10 15:07:48
285,2014-12-10 03:34:28,"I think this pr https://github.com/svg/svgo/pull/263 fix it
@H1D try svgo from master on your file
",Yeti-or,2014-12-10 15:07:48
285,2014-12-10 15:07:48,"@YetiOr you are right!
However #284 still relevant
",H1D,2014-12-10 15:07:48
285,2015-03-30 12:23:43,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2014-12-10 15:07:48
285,2015-03-30 13:05:47,":+1: 
",H1D,2014-12-10 15:07:48
284,2014-12-05 19:10:10,"As I understand `--multipass` should compress till result incompressible 
![image](https://cloud.githubusercontent.com/assets/697625/5321242/6f42caec-7cca-11e4-99ac-883f71f3a222.png)

Here is the file https://www.dropbox.com/s/epaxeyjsa90ty1f/stepic_logo_christmas_full.svg?dl=1
",H1D,2016-03-20 17:52:46
284,2014-12-12 13:34:55,"/cc @dfilatov 
",GreLI,2016-03-20 17:52:46
284,2014-12-12 13:39:12,"@GreLI I've improved `--multipass` in #263, but there's no released version with it yet
",dfilatov,2016-03-20 17:52:46
284,2014-12-12 16:02:14,"@dfilatov #263 didn't solve this issue
",H1D,2016-03-20 17:52:46
284,2014-12-14 09:15:25,"@H1D The number of passes with enabled `--multipass` option is limited to 10 times.
",dfilatov,2016-03-20 17:52:46
284,2016-03-20 18:01:03,"I've changed the way rounding works, so a lot of minor changes with each pass are gone, thus `--multipass` gives final result in a few passes, just as it should be.
",GreLI,2016-03-20 17:52:46
284,2016-03-20 18:21:48,"[v0.6.3](https://github.com/svg/svgo/releases/tag/v0.6.3) with the change has been just released.
",GreLI,2016-03-20 17:52:46
283,2014-12-05 12:17:05,"Can anybody tell me to option to process a folder of svg files with the grunt task? Or do I have to specify each file separate a files array?
",skullcrasher,2014-12-05 12:35:02
283,2014-12-05 12:35:02,"Ok got it. with some docu searching :)

Link for those who need it
http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically

Sry for any inconvenience.
",skullcrasher,2014-12-05 12:35:02
283,2015-02-10 00:59:54,"I tried the _**/_*.svg method, but it doesn't seem to work. 

I'm currently listing the files individually. Please tell me you were you able to get it working.
",alex-martinez,2014-12-05 12:35:02
283,2015-02-10 09:17:03,"This is what my files array looks like. It only handles svgs directly in the icons folder (no deeper steps)

<S_CODE_TOKEN>
",skullcrasher,2014-12-05 12:35:02
283,2015-10-05 13:54:37,"Hi,

What is your config file ? don't work for me :(

<S_CODE_TOKEN>

I've this error : Warning: config.plugins.forEach is not a function Use --force to continue.

Thank you :)
",LeG3nDz,2014-12-05 12:35:02
283,2015-10-05 14:32:04,"@LeG3nDz, you have to write an array of plugins:

<S_CODE_TOKEN>
",GreLI,2014-12-05 12:35:02
283,2015-10-05 14:37:12,"@GreLI Thank you, it's okay :)
",LeG3nDz,2014-12-05 12:35:02
282,2014-12-04 19:49:20,,Yeti-or,2014-12-06 10:34:45
282,2014-12-04 19:52:42,"[![Coverage Status](https://coveralls.io/builds/1564955/badge)](https://coveralls.io/builds/1564955)

Coverage remained the same when pulling **4d83c314206873bb441385a82801a001461648ee on YetiOr:yeti-or.pre-optimize-colors** into **59ab38ea8e51a298124bcc839deba67136bd4821 on svg:master**.
",coveralls,2014-12-06 10:34:45
281,2014-12-03 03:08:51,"<S_CODE_TOKEN>
",ponyfleisch,2015-01-19 15:25:47
281,2014-12-03 16:03:14,"Yep, that's why there is `--multipass` option added recently.
",GreLI,2015-01-19 15:25:47
281,2014-12-05 18:55:39,"heh.. not only twice! Have some files where SVGO still reduces after 15+ runs =))
",H1D,2015-01-19 15:25:47
280,2014-12-03 01:53:55,,Yeti-or,2014-12-03 16:03:37
280,2014-12-03 01:55:40,"[![Coverage Status](https://coveralls.io/builds/1557992/badge)](https://coveralls.io/builds/1557992)

Coverage remained the same when pulling **d1ef377f17f5b2adcf19c631b4e4ff76ede3a420 on YetiOr:yeti-or.TRIVIAL** into **0d42fd3d39cc4e4038abc606f444e37a12536f88 on svg:master**.
",coveralls,2014-12-03 16:03:37
279,2014-12-02 20:13:44,"I'm trying to compile some svg with a `<foreignObject>` tag and it trows an error when compiling. I'm using gulp plugin imagemin, and I'm not sure if is an svgo or a imagemin issue.

the svg:
`<svg xmlns=""http://www.w3.org/2000/svg"" x=""0px"" y=""0px""
     width=""24px"" height=""24px"" viewBox=""0 0 24 24"" enable-background=""new 0 0 24 24"" xml:space=""preserve"">
<path d=""M24,2.2v19.6c0,1.2-1,2.2-2.2,2.2H16V14h3.5l0.5-3h-4V8.7C16,7.8,16.8,7,17.7,7H19V4h-3c-3,0-4,1.5-4,4v3H9v3h3v10H2.2
    C1,24,0,23,0,21.8V2.2C0,1,1,0,2.2,0h19.6C23,0,24,1,24,2.2z""/>
    <foreignObject>
         <div class='test'>fallback test</div>
     </foreignObject>
</svg>`

and the error log:

[18:09:28] Starting 'images'...
Possibly unhandled TypeError: Cannot read property 'content' of undefined
    at Object.exports.fn (C:\xampp\htdocs\crea\node_modules\gulp-imagemin\node_modules\imagemin\node_modules\imagemin-svgo\node_modules\svgo\plugins\removeUnknownsAndDefaults.js:83:24)
    at C:\xampp\htdocs\crea\node_modules\gulp-imagemin\node_modules\imagemin\node_modules\imagemin-svgo\node_modules\svgo\lib\svgo\plugins.js:61:45
    at Array.filter (native)
    at monkeys (C:\xampp\htdocs\crea\node_modules\gulp-imagemin\node_modules\imagemin\node_modules\imagemin-svgo\node_modules\svgo\lib\svgo\plugins.js:46:39)
    at C:\xampp\htdocs\crea\node_modules\gulp-imagemin\node_modules\imagemin\node_modules\imagemin-svgo\node_modules\svgo\lib\svgo\plugins.js:70:17
    at Array.filter (native)
    at monkeys (C:\xampp\htdocs\crea\node_modules\gulp-imagemin\node_modules\imagemin\node_modules\imagemin-svgo\node_modules\svgo\lib\svgo\plugins.js:46:39)
    at C:\xampp\htdocs\crea\node_modules\gulp-imagemin\node_modules\imagemin\node_modules\imagemin-svgo\node_modules\svgo\lib\svgo\plugins.js:70:17
    at Array.filter (native)
    at monkeys (C:\xampp\htdocs\crea\node_modules\gulp-imagemin\node_modules\imagemin\node_modules\imagemin-svgo\node_modules\svgo\lib\svgo\plugins.js:46:39)

thanks for any help!
",Eduruiz,2015-02-15 15:46:09
279,2014-12-03 15:35:43,"It's problem with `removeUnknownsAndDefaults plugin`, it doesn't handle `foreignObject` content right.
You can disable it in config: 

<S_CODE_TOKEN>

or you can remove `foreignObject` proccess svgo and then merge it back :smile: 
",Yeti-or,2015-02-15 15:46:09
279,2014-12-03 15:44:23,"I think this need to be fixed by excluding `foreignObject` while traversing svg tree not in plugins. @GreLI what do u think?
",Yeti-or,2015-02-15 15:46:09
279,2014-12-03 16:02:40,"Sounds reasonable.
",GreLI,2015-02-15 15:46:09
279,2015-03-30 12:24:17,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-02-15 15:46:09
278,2014-11-26 20:15:31,"Reduce file size drastically on complex polylines. Especially useful with maps.

Supports simplifying `<polygon>`, `<polyline>` point series, as well as simplifying sequential line instructions in path syntax on `<path>`, `<glyph>`, `<animate>`, and `<animateMotion>`.

Uses the Simplify.js library. Demo: http://mourner.github.io/simplify-js/

cc svg/svgo/issues/240 & svg/svgo/issues/9
cc @cheeaun
",sebdeckers,2015-06-05 14:56:38
278,2014-11-26 20:21:32,"@deepsweet Looks like Simplify.js is not supported on Node 0.8. Any chance of dropping that old version?
",sebdeckers,2015-06-05 14:56:38
278,2014-11-27 03:14:18,"yeah, I think that we can drop v0.8.

@GreLI if you'll decide to merge this plugin please drop 0.8 [here](https://github.com/svg/svgo/blob/master/package.json#L56) and [here](https://github.com/svg/svgo/blob/master/.travis.yml#L4).
",deepsweet,2015-06-05 14:56:38
278,2015-02-09 18:15:57,"Seeing as this hasn't been merged in, is there a way I can get a copy of this branch? 
I'm guessing I would then just need to install this 'package' via npm?
",chrissound,2015-06-05 14:56:38
278,2015-02-11 15:34:58,"@GreLI @deepsweet Any reason why this hasn't been accepted yet?
",sebdeckers,2015-06-05 14:56:38
278,2015-02-11 16:35:30,"Just lack of time and hands.
Also it'll be good to mention a license of the embedded code and verify that it is compatible with svgo's MIT license. I'm not sure that code under BSD license can be embedded in a such way. Probably, you have at least to paste BSD license into the plugin.
Btw, I'm not sure that it'll give much effect.
",GreLI,2015-06-05 14:56:38
278,2015-02-19 06:38:56,"I'm also disagree about such a license violation. Why doesn't this PR use the [npm package](https://www.npmjs.com/package/simplify-js)?
",shinnn,2015-06-05 14:56:38
278,2015-02-28 12:17:55,"The merge conflict needs to be fixed.
",sindresorhus,2015-06-05 14:56:38
278,2015-06-05 14:56:37,"Closing, since it should be done in other way.
Also, it's not that useful. It's much more effective to simplify curves. E.g. like Paper.js does.
",GreLI,2015-06-05 14:56:38
277,2014-11-25 18:06:45,"I noticed the error ""Fatal error: Cannot read property 'coords' of undefined"" when using grunt-svgmin which calls out to svgo.optimize.

I started writing up a test case for that library, when I noticed that svgo itself silently fails on the same file.  No error, no new file created, and the `<metadata>` tag I stuck in the file doesn't get removed.

<S_CODE_TOKEN>

Here's the run with grunt-svgmin

<S_CODE_TOKEN>

I'm on OS X, 10.10.1

The SVG passes validation: http://validator.w3.org/check?uri=http%3A%2F%2Fcl.ly%2F1Z2Y3k2o1Q0H%2Feditwheelscroll.svg&charset=%28detect+automatically%29&doctype=Inline&group=0

Example files are here: http://cl.ly/1V26152x3h3v
",jmhobbs,2015-03-22 16:23:28
277,2014-12-16 16:14:26,"Similar issue with the SVG fonts from https://01.org/clear-sans/downloads which fails with a “Cannot read property 'content' of undefined” if used via [gulp-imagemin](https://www.npmjs.com/package/gulp-imagemin). Here is the complete output:

<S_CODE_TOKEN>
",Fleshgrinder,2015-03-22 16:23:28
277,2015-03-22 16:23:28,"I guess the reason is in `<path fill=""none"" d=""z""/>`, it was fixed recently.
",GreLI,2015-03-22 16:23:28
277,2015-03-30 12:24:26,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-22 16:23:28
277,2015-03-30 14:53:31,"Thanks!
",jmhobbs,2015-03-22 16:23:28
276,2014-11-20 09:32:59,,4exova,2014-11-20 12:15:59
276,2014-11-20 12:16:03,"Good catch!
",GreLI,2014-11-20 12:15:59
276,2014-11-20 12:17:35,"Oops, merged in wrong branch.
",GreLI,2014-11-20 12:15:59
276,2014-11-20 12:28:32,"It was fixes for 'beminfo' branch. I can send PR for the main branch too. 
",4exova,2014-11-20 12:15:59
275,2014-11-19 08:35:44,"I'm using the `grunt-svgmin` plugin, with the following plugins, but disabling all of them results in the same problem:

<S_CODE_TOKEN>

The following file gets corrupted:
Source Image: [source.svg](https://gist.github.com/gustavpursche/3f626012f36b9d78853f#file-source-svg)
![screenshot from 2014-11-19 09 32 07](https://cloud.githubusercontent.com/assets/2244375/5102712/f583b282-6fce-11e4-9315-265315f9f848.png)

Minified Image: [minified.svg](https://gist.github.com/gustavpursche/3f626012f36b9d78853f#file-minified-svg)
![screenshot from 2014-11-19 09 31 52](https://cloud.githubusercontent.com/assets/2244375/5102714/fd865b38-6fce-11e4-9a5c-ab481ead0d64.png)

Used versions:

<S_CODE_TOKEN>
",gustavpursche,2014-11-20 10:14:04
275,2014-11-19 15:02:14,"Hmm, tried with v0.5.0 and saw no problems. Try to update dependencies: there a bunch of bugfixes in v0.5.0.
",GreLI,2014-11-20 10:14:04
275,2014-11-20 10:14:04,"True - it's fine with 0.5. Good work!
",gustavpursche,2014-11-20 10:14:04
274,2014-11-18 17:13:18,"No other overrides specified, calling through via `gulp-svgmin`. The end result is a completely blank (no visible strokes / fills) output image.

Disabling the `removeUnknownsAndDefaults` plugin fixes the issue. Presumable there's an ""unknown unknown"" in there somewhere.  =]

Here's a gist with the source image data - https://gist.github.com/booleanbetrayal/fa7b19ed5c4bfc39cb36

Hope this helps!
",booleanbetrayal,2015-02-15 11:49:01
274,2015-03-30 12:25:07,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-02-15 11:49:01
274,2015-03-31 15:26:58,"just verified! thanks @GreLI !
",booleanbetrayal,2015-02-15 11:49:01
273,2014-11-16 11:34:04,"It can be useful for normalizing svg files or for fixing this bug https://stackoverflow.com/questions/26263550/css-svg-background-strange-transparent-line-around
",mahnunchik,2014-11-16 12:11:42
273,2014-11-16 12:11:42,"I'm afraid it has nothing to do with image optimization. It's a task for an editor.

In case like this it's better to use a little overlap like 1px to prevent such edge effects. There is a lot of such issues when page is zoomed in desktop browsers.
",GreLI,2014-11-16 12:11:42
273,2016-09-08 09:06:22,"It's not just for that. `preserveAspectRatio` can be used to align the SVG content, regardless of how wide the outer canvas is. Let's say I have an SVG with content that's 64x64 pixels, but the outer element (in this case the `<svg>`-tag containing the `<use>`-tag) is 100px wide. I can then use preserveAspectRatio to align the SVG content top left, so I can resize the outer element (using CSS) without worring about flow. Right now, the content is centered no matter what I do, and this is not really great for my current use-case.

It's not just an editor-thing, because SVGO strips the tag off the incoming SVG-files, and there's currently no way to add them again (also, `addAttributesToSVGElement` doesn't seem to let me add values, and even if it did, I'd want to control this on a per-SVG basis instead of adding a blanket-statement, which would be a lot easier in the source file than in the setup for SVGO); nor is there a way to control this with styling from a browser.

So I would say this is a needed feature.
",DonGissel,2014-11-16 12:11:42
273,2017-01-14 04:48:31,"Turns out, effectively:

    viewBox := fmt.Sprintf(`viewBox=""%d %d %d %d""`,
		vbMinX, vbMinY, (vbMaxX - vbMinX), (vbMaxY - vbMinY))
    aspect := `preserveAspectRatio=""none""`
    canvas.Start(width, height, viewBox, aspect)",jfinken,2014-11-16 12:11:42
272,2014-11-14 01:03:55,"Sample input file: https://dl.dropboxusercontent.com/u/49423508/windowpiece-18.svg

This error happens always on every file I've tried.

<S_CODE_TOKEN>
",keithkml,2016-01-04 17:22:25
272,2014-11-14 01:15:45,"Well, without any further information it tend to be is status “Cannot reproduce” (assuming you're working with correct XML-files).
",GreLI,2016-01-04 17:22:25
272,2014-11-14 01:16:19,"Hi @GreLI - the sample file is not enough information? You cannot reproduce?
",keithkml,2016-01-04 17:22:25
272,2014-11-14 01:31:26,"Sorry, didn't see you edited the post. Well, it seems that xml-entities like `&ns_ai;` make parser mad. You are using Adobe Illustrator, isn't it?
Try saving files without Adobe extenstions or even use “save for web”
",GreLI,2016-01-04 17:22:25
272,2014-11-14 01:35:52,"Actually, it isn't a true SVG, it's a couple of shapes and a big Illustrator object in SVG container.
",GreLI,2016-01-04 17:22:25
272,2014-11-14 16:57:58,"Yes, I was hoping svgo would remove the illustrator object.
",keithkml,2016-01-04 17:22:25
272,2014-12-09 12:36:17,"How to upvote this issue? :)
I think this is real SVG with same problem: https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B9%D0%BB:Firefox-logo.svg
",homm,2016-01-04 17:22:25
272,2014-12-12 09:18:18,"that's because provided SVGs contains `<!ENTITY ...>` declarations and our sax-js is in strict mode. I'll fix it in the next major version.
",deepsweet,2016-01-04 17:22:25
272,2014-12-17 23:01:43,"Same issue for me. I can only process SVGs with SVGO if I save them without Illustrator editing capabilities. So I guess ideally, SVGO would just strip any Adobe Illustrator code before processing the remaining native SVG code.
",danielbayley,2016-01-04 17:22:25
272,2015-03-31 14:24:21,"As a temporary solution I recommend to turn off «Preserve Illustrator Editing Capabilities» and some other advanced options, like including XMP, in Illustrator SVG saving dialog. These options make no sense—any extra will be stripped by svgo anyway.
",GreLI,2016-01-04 17:22:25
271,2014-11-13 05:44:14,"@GreLI  We don't need `enable-background` if we have no <filter>'s
what do you think?
",Yeti-or,2014-11-13 22:04:07
271,2014-11-13 05:54:50,"[![Coverage Status](https://coveralls.io/builds/1467962/badge)](https://coveralls.io/builds/1467962)

Coverage remained the same when pulling **da5c339076e5d4535fdce878683145cd4b4d40c0 on YetiOr:yeti-or.no-filter-no-enable-b** into **f42d118a13fba710355162273737a38243b4ee4b on svg:master**.
",coveralls,2014-11-13 22:04:07
271,2014-11-13 22:04:02,":cool:
",GreLI,2014-11-13 22:04:07
270,2014-11-12 13:48:30,,SamHerbert,2014-11-13 23:34:30
270,2014-11-12 13:50:29,"[![Coverage Status](https://coveralls.io/builds/1463977/badge)](https://coveralls.io/builds/1463977)

Coverage remained the same when pulling **e9dd99f267f41a1ff967a14a04e09bc9ff668558 on SamHerbert:master** into **f42d118a13fba710355162273737a38243b4ee4b on svg:master**.
",coveralls,2014-11-13 23:34:30
269,2014-11-12 02:24:50,"- I updated [should.js](https://github.com/shouldjs/should.js) to v4.3.0.
- I chaged image format of the badges in readme from PNG to SVG. SVG badges look beautiful on retina displays.
",shinnn,2014-11-13 23:35:08
269,2014-11-12 02:26:09,"[![Coverage Status](https://coveralls.io/builds/1462001/badge)](https://coveralls.io/builds/1462001)

Coverage remained the same when pulling **18212e717af34f08eb2a2009160cd658a02238ec on shinnn:master** into **f42d118a13fba710355162273737a38243b4ee4b on svg:master**.
",coveralls,2014-11-13 23:35:08
268,2014-11-11 21:30:20,"I was testing SVGO for Twitter's twemoji's.  Using a screen shot of in-browser small rendering of over 100 SVG files, I XOR the [before & after of using SVGO via defaults](https://github.com/twitter/twemoji/pull/14#issuecomment-62618628).  I would say they are about 98% the same, which is excellent, and acceptable for many applications.  Even where there is only a single pixel off here & there, I would not worry.  But there are a few places where there is more than a tiny difference.

Should the defaults be a bit more 'safer' please?
",tomByrer,2015-03-30 12:26:46
268,2014-11-11 21:35:05,"It's hard to say something without details. E.g. what scale did you use, which images are the most different, is the renderer correct.
Defaults are pretty strong actually: 3 digits after the point, but there may be some bugs which are shawn as tiny differents due to small sized details.
",GreLI,2015-03-30 12:26:46
268,2014-11-11 22:40:20,"I used [this test HTML](https://github.com/twitter/twemoji/blob/gh-pages/preview-svg.html) & took screenshots before & after.  I assume that if I made the icons larger, they'll become more pronounced.
",tomByrer,2015-03-30 12:26:46
268,2014-11-11 22:41:41,"That's something, thanks!
",GreLI,2015-03-30 12:26:46
268,2015-03-30 12:26:46,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) has been just published. While I haven't seen errors in the v0.5.0, it helped a lot in a development. Thanks again!
",GreLI,2015-03-30 12:26:46
267,2014-11-10 11:52:11,"When processing a perfectly valid SVG image with encoded ampersands (`&amp;`) they get replaced with raw ones which makes the image unrenderable.

We had to circumvent this using a regex to replace them https://github.com/imagemin/imagemin-svgo/blob/master/index.js#L37. Would be nice if svgo kept images valid when optimizing.
",kevva,2015-02-08 21:05:06
267,2015-02-08 21:05:53,"Actually, they were already encoded, but I've slightly improved it.
",GreLI,2015-02-08 21:05:06
266,2014-11-07 16:58:10,"I've had a search, but haven't found a post on this, I'm sure I can't be the first.  

In attempting to make the SVGs i'm using responsive, I've removed the `width` and `height` attributes and just rely on the `viewBox`.  In minifying down these files using SVGO, using the `removeViewBox: false` flag, the `viewBox` attribute fails to persist as i've not declared a width and height which i'm not interested in.

Is there another way around this, another plugin i'm unaware of?
",oller,2015-03-22 16:20:26
266,2014-11-07 17:06:21,"Here's the description of the removeViewBox plugin:

<S_CODE_TOKEN>

I've written a plugin to achieve what you want : https://github.com/raphdg/svgo/blob/master/plugins/cleanSvgTag.js

This would keep the `viewBox` attribute and get rid of `width`, `height`, `x` and `y` attributes in the `svg` element.
",raphdg,2015-03-22 16:20:26
266,2014-11-07 20:32:58,"@raphdg, note that SVG allows inner `svg` elements, so if you remove `x` and `y` coordinates of them, you'll break an image. Also, it worth to check if viewBox numbers correspond the sizes, and if not may be transorm the SVG.Yeah, it's not so simple task.
",GreLI,2015-03-22 16:20:26
266,2014-11-10 08:31:42,"Thanks for your input @GreLI.

In my case, I have to clean those attributes whatsoever, but it's a good thing to remember !
",raphdg,2015-03-22 16:20:26
266,2014-11-10 09:49:14,"Thanks @raphdg, so is the use-case I've described a valid one, is it worth me putting a plugin together and a PR?  In this case I'd be looking to clear width and height, but retain their values in the viewBox.  
",oller,2015-03-22 16:20:26
265,2014-11-06 16:59:18,"I'm writing a plugin to wrap an existing `<text>` element into a `<g>` that doesn't exist yet.

Say I got this:

<S_CODE_TOKEN>

And I'd like to replace it with:

<S_CODE_TOKEN>

How can I ""create"" this `<g>` item ?

I assume I should use `exports.type = 'full';` and iterate over the text elements, but I cannot find how to create this `<g>` element to wrap my `<text>` element, and then, putting it in the same position in my svg.
",raphdg,2016-11-13 10:17:51
265,2015-01-19 15:42:19,"Sorry for late response.
Actually, current [API](https://github.com/svg/svgo/blob/master/lib/svgo/jsAPI.js) isn't supposed to create elements. SVGO is created to remove extra, not to add.
",GreLI,2016-11-13 10:17:51
265,2016-11-13 10:17:51,"One can workaround by using `constructor` property:

<S_CODE_TOKEN>
",GreLI,2016-11-13 10:17:51
264,2014-11-05 21:46:00,"SVG is case sensitive, but SVGO transforms the tag name `radialGradient` to `radialgradient` which prevents the gradient from rendering. Could be due to this line: https://github.com/svg/svgo/blob/master/lib/svgo/svg2js.js#L10
",necolas,2014-11-06 01:53:15
264,2014-11-05 21:47:57,"That's odd. I have tested with some images with `radialGradient` and it was ok. Could you provide sample image?
",GreLI,2014-11-06 01:53:15
264,2014-11-06 01:53:15,"Ah, so I looked into this more and it was because I was inserting the SVG using `innerHTML` which lowercased the tags. No issue with the library, sorry about that!
",necolas,2014-11-06 01:53:15
263,2014-11-05 14:00:03,,dfilatov,2014-11-10 18:07:38
263,2014-11-05 14:01:57,"[![Coverage Status](https://coveralls.io/builds/1431126/badge)](https://coveralls.io/builds/1431126)

Coverage decreased (-1.37%) when pulling **30237018ef9c9f3d3bb9c2047624c523dfaaec18 on dfilatov:master** into **b11840ccc8f3efc47ba52493661049bc168811f6 on svg:master**.
",coveralls,2014-11-10 18:07:38
263,2014-11-07 08:19:10,"Ping
",dfilatov,2014-11-10 18:07:38
263,2014-11-11 08:51:52,"Wouldn't you like to release a new version SVGO with these changes? )
",dfilatov,2014-11-10 18:07:38
263,2014-11-11 20:18:51,"Haven't planned yet.
",GreLI,2014-11-10 18:07:38
263,2014-12-17 18:50:40,"just FYI
We have to use SVGO#master because of this PR probably. Got loads of broken SVG with 0.5.0
",H1D,2014-11-10 18:07:38
263,2014-12-24 09:04:15,"@GreLI What stops you from release a minor version with this fix?
",dfilatov,2014-11-10 18:07:38
263,2014-12-24 19:23:15,"Just being busy.
",GreLI,2014-11-10 18:07:38
263,2015-02-17 14:55:34,"It's time to release a new version, isn't it? :)
",dfilatov,2014-11-10 18:07:38
263,2015-02-18 19:53:21,"Almost. I'm hoping to fix the most annoying bug for now with merging overlapping paths.
",GreLI,2014-11-10 18:07:38
263,2015-02-18 20:00:46,"@GreLI how about (help wanted) Label in issues ?
",Yeti-or,2014-11-10 18:07:38
262,2014-11-03 22:31:34,"This is related to (or a byproduct of) #253 where two paths overlapping with each other results in their union becoming a transparent stroke, as shown below. Notice the monitor and the left ear of the alarm clock (the right ear is fine). 

![screen shot 2014-11-03 at 4 41 25 pm](https://cloud.githubusercontent.com/assets/5407481/4891500/980a116e-63a8-11e4-9445-8ac562b88e48.png)

This is more noticeable with the image below, where the strokes' intersection is rendered the same color as their background, rather than being stacked on top of each other.

![screen shot 2014-11-03 at 5 30 03 pm](https://cloud.githubusercontent.com/assets/5407481/4891546/29a46354-63a9-11e4-80a8-ae690a246fce.png)
",selipso,2015-03-15 20:27:04
262,2015-02-08 20:42:09,"Could you provide some sample images? (Github converts loaded images to PNG.)
",GreLI,2015-03-15 20:27:04
262,2015-02-08 23:44:30,"Hello,

This - and things disappearing completely - is the single most dangerous thing about SVGO that makes it impossible to be used without human supervision, IMHO. Here is a graphic that exhibits the problem with default SVGO config (I am really sorry for the lengthy piece of code):

<S_CODE_TOKEN>

Thanks for looking into this!

Regards
Mateusz
",paperboyo,2015-03-15 20:27:04
262,2015-03-15 20:27:04,"Issue with strokes was fixed in the recent commits, other than that it's a duplicat.
",GreLI,2015-03-15 20:27:04
262,2015-03-30 12:27:52,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-15 20:27:04
261,2014-11-03 20:06:30,"I get the following error on output:

<S_CODE_TOKEN>
",ghost,2015-01-19 15:43:15
261,2014-11-04 15:07:27,"Does the image open in browser? XML is a strict format. If it does, then could you provide the sample image?
",GreLI,2015-01-19 15:43:15
260,2014-11-03 16:04:39,"This is probably related to #257 

http://webconverger.org/img/2014/pushing-up-daisies.svg once minified has a missing petal on each of the flowers. I'm using 0.4.4 and I did also try `--disable=cleanupIDs`. Cheers!
",kaihendry,2015-03-22 15:15:38
260,2014-11-04 15:05:06,"Unfortunately, there is no image behind provided link.
",GreLI,2015-03-22 15:15:38
260,2014-11-04 15:08:51,"Whoops, just corrected the URL to http://webconverger.org/img/2014/pushing-up-daisies.svg
",kaihendry,2015-03-22 15:15:38
260,2015-03-30 12:28:20,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-03-22 15:15:38
259,2014-11-02 00:15:28,"I can optimize individual files but if I do something like: `svgo -f ./svg` it just says `C:\current\path\svg:`.

If I do `svgo -f ./svg -o min` it runs through all the files and says it has optimized each one, but there is no output folder and no output files.

I have also tried variations on input and output folder like `svg`, `/svg`, `/svg/`, `./svg/`, and `svg/`. And I have tried back slashes as well. I am using Windows 7 64-bit.
",Lomacar,2015-01-31 18:48:21
259,2014-11-04 22:21:54,"Have you tried `svgo -f ./svg -o min` with existing `min` folder?
",GreLI,2015-01-31 18:48:21
259,2014-11-07 00:21:40,"Aha! Thanks. I was imagining it would create the folder for me. Silly me. Overall I find that SVGO is pretty silent about errors.
",Lomacar,2015-01-31 18:48:21
259,2015-03-30 12:28:57,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) with the fix has been just published.
",GreLI,2015-01-31 18:48:21
258,2014-10-31 21:21:32,"This PR add ability to enable multipass in SVGO via `--multipass` option. With this flag optimization will be applied until the result differs from the one obtained in the previous step.

Let's take a concrete example:

<S_CODE_TOKEN>

The result with the current version SVGO (all the plugins are enabled):

<S_CODE_TOKEN>

As you can see, the result it's not optimal. There're redundant `<g>` and redundant attribute `id` in the first `<path>`. And you aren't able to improve this result by changing the order of the plugins.

The result with `--multipass` option:

<S_CODE_TOKEN>

The result is much better.
",dfilatov,2014-10-31 21:32:12
258,2014-10-31 21:24:08,"[![Coverage Status](https://coveralls.io/builds/1412456/badge)](https://coveralls.io/builds/1412456)

Coverage increased (+0.15%) when pulling **943f5fab5717687280a0d2b0ece6ef48fff541a2 on dfilatov:master** into **0fac67ee54aaa633b548175a962bece310ba144c on svg:master**.
",coveralls,2014-10-31 21:32:12
258,2014-10-31 21:32:16,"Nice!
",GreLI,2014-10-31 21:32:12
258,2014-11-04 11:48:20,"@GreLI Could you release a version with this option?
",dfilatov,2014-10-31 21:32:12
258,2014-11-04 11:57:17,"Yep, I'm planning to release soon with bugfixes and, probably, some new features.
",GreLI,2014-10-31 21:32:12
258,2014-11-04 21:36:40,"Version 0.5.0 is released.
",GreLI,2014-10-31 21:32:12
258,2014-11-04 21:55:48,"Thanks!
",dfilatov,2014-10-31 21:32:12
257,2014-10-27 18:37:25,"I used SVGO to minify a LinkedIn icon (svg below) and the dot for the ""i"" was not visible after being processed. Scour was able minify it but the file wasn't quite as small as SVGO.

Here is the content of the pre and post processed files:
### linkedin.svgo.svg

<S_CODE_TOKEN>
### linkedin.svg

<S_CODE_TOKEN>
",pseudosavant,2015-03-15 20:24:16
257,2014-10-29 16:57:18,"I can repro this as well in 0.4.5. I used `--disable=cleanupIDs` when optimizing. Below is the troublesome group in the original and optimized SVGs.

When I inspect the paths in the optimized file in Chrome, their bounding boxes look correct, but they are invisible.

### Original

<S_CODE_TOKEN>

### Optimized (whitespace added)

<S_CODE_TOKEN>
",PatrickNausha,2015-03-15 20:24:16
257,2014-12-16 20:23:26,"After exporting svg paths from AI CC, the code looks something like: 
`<svg>...
<path...../>
<path...../>
</svg>`
If there are multiple paths the svg breaks when svgmin runs via `grunt build`, as the `paths` need to have a closing tag. Cannot be self-closing `path` tag with multiple `paths`
",fishermanswharff,2015-03-15 20:24:16
257,2015-01-15 11:34:29,"same here
",christianhaller,2015-03-15 20:24:16
257,2015-03-15 20:24:16,"Closing, because ‘linkedin’ icon is ok in v0.5.0 and other comments don't have essential information.
",GreLI,2015-03-15 20:24:16
257,2015-03-30 12:29:38,"You should probably check in the new version [v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1).
",GreLI,2015-03-15 20:24:16
256,2014-10-22 14:38:12,,alrra,2014-10-22 15:15:52
255,2014-10-18 14:19:02,"With ""convertPathData: false"" the following path for a letter O is generated which is ""hollow"" on the inside as its supposed to be

<S_CODE_TOKEN>

WITH the ""convertPathData"" NOT disabled, the following path is outputted

<S_CODE_TOKEN>

This show a solid O and and the centerpart that is supposed to be hollow displayed as solid to the left, see image

![14-10-18 16-12-13](https://cloud.githubusercontent.com/assets/3484222/4689882/8d534f12-56d1-11e4-8eb9-53d0301a28b6.jpg)
",marcodings,2015-01-19 15:45:03
255,2014-11-02 22:33:39,"Seems to be ok with current version in the repo. I've fixed a couple of bugs.
",GreLI,2015-01-19 15:45:03
255,2015-01-19 15:45:03,"[v0.5.0](https://github.com/svg/svgo/releases/tag/v0.5.0) should have fixed it. If not, please reopen.
",GreLI,2015-01-19 15:45:03
254,2014-10-09 16:30:15,"_This is a possible duplicate of #101, but this may be a different issue._

I am still having issues with this happening on a very simple file with a clipped image. Not exactly sure what is happening here, but after using SVGO, the image no longer appears (probably because the clip-path isn't clipping at the right coordinates or something.

With collapseGroups enabled, the clip-path is added directly to the `<image>` element. Simply wrapping the `<image>` with a Group and adding the clip-path back to the group makes it appear correctly without modifying the clip-path definition.

**Example SVGs**
[Original](https://jumpshare.com/v/enrU0KTEvEstefZSYqD0?b=bgXIgrlzJUimNJh3NlNF)
[Optimized](https://jumpshare.com/v/2BFg6TZHUEffSjoZo6S4?b=bgXIgrlzJUimNJh3NlNF)
[Optimized (collapseGroups disabled)](https://jumpshare.com/v/I4HaFaklrLmTxuAXatix?b=bgXIgrlzJUimNJh3NlNF) **<-- appears correctly**

Does this have something to do with relative clip-path positioning?
",docmars,2014-11-04 18:39:23
253,2014-09-29 13:59:04,"mergePaths merges transparent paths, which leads to undesirable results. the easy solution is to disable the plugin, but a more permanent solution would be to detect if a path is transparent and exclude it from mergePaths. For an even more complete solution, use transparency and stacking order to determine if a path is visible or eligible from mergePaths.

[Source file](http://cl.ly/XlbG/download/transparent-mergepath.svg)

![transparent-mergepaths](https://cloud.githubusercontent.com/assets/739656/4442469/8b49f4a6-47df-11e4-8ffe-91c7a7609155.png)
",joeyhoer,2015-03-22 15:15:38
253,2015-01-31 10:01:39,"It's a known issue with `mergePaths` plugin. It should check overlapping, but it's not that simple problem. You can disable it (`svgo --disable=mergePaths`) for a temporary solution.
",GreLI,2015-03-22 15:15:38
252,2014-09-26 19:26:30,,dwabyick,2014-09-26 21:17:22
252,2014-09-26 19:28:29,"[![Coverage Status](https://coveralls.io/builds/1262045/badge)](https://coveralls.io/builds/1262045)

Coverage remained the same when pulling **06f084d8e79d008dcbdb7f0866b59ab9d89b1465 on dwabyick:feature/remove-desc** into **c351ab0de846ebfbe9cc82b050c366b4a7955aae on svg:master**.
",coveralls,2014-09-26 21:17:22
252,2014-09-26 21:17:33,":cool: 
",GreLI,2014-09-26 21:17:22
251,2014-09-23 23:30:18,"I have a need to remove `desc` and `title` tags. (e.g.`<desc>My desc.</desc>`) ...  I'm happy to contribute a plugin for this if you'd take the contribution.   This also makes me wonder if we could pass in a config with an arbitrary set of nodes to filter out.   removeNodes: ['desc','title'].
",dwabyick,2014-09-26 21:17:23
251,2014-09-24 19:47:58,"Just make a pull request.
",GreLI,2014-09-26 21:17:23
250,2014-09-15 09:36:14,"I've run into a case where the `moveGroupAttrsToElems` plugin is emitting SVG that does not render correctly in Firefox 32 and Inkscape 0.91pre2. I don't know why; I just disabled different plugins and narrowed it down.

I've [posted a test case on Gist](https://gist.github.com/argv-minus-one/78778110f41a7d6e6788). There are three files:
- `input.svg` is the input SVG, as saved by Inkscape 0.91pre2.
- `broken.svg` is the optimized SVG, generated by svgo 0.4.5 with no special options. Some gradients are deformed, and some are not visible at all (replaced with solid colors). A filter effect (the blur on the shadow at the bottom) appears to be distorted, too.
- `not-broken.svg` is the optimized SVG, generated by svgo 0.4.5 with `--disable=moveGroupAttrsToElems`. Everything looks correct.
",argv-minus-one,2014-11-04 20:26:22
250,2014-10-02 18:42:58,"I'm running into this problem too.

It looks like the attributes from group elements **only** get transferred to children that are path elements :(
I would've expected children that are group elements to get the attributes too.  
",rasmusfl0e,2014-11-04 20:26:22
250,2014-11-04 20:26:22,"Works with the current version in the repo.
",GreLI,2014-11-04 20:26:22
249,2014-09-13 07:20:26,,netsi1964,2016-11-13 10:14:43
249,2016-11-13 10:14:43,"It's an extension making for the editor, you should make a request there.
",GreLI,2016-11-13 10:14:43
248,2014-09-10 12:26:00,"When using `gulp-imagemin` I got the following error:

<S_CODE_TOKEN>

My project also uses a more recent version of `js-yaml` which conflicted with the version used in svgo.  
So, I replaced the deprecated `require` as described in https://github.com/nodeca/js-yaml#breaking-changes-in-2xx---3xx and updated `js-yaml`.

Should also fix #245.
",normanrz,2014-09-17 14:57:59
247,2014-09-09 01:06:10,"It seems like svgo removes masks from svg sources? Here's an example file for which this happens, if it helps at all :grinning: 

http://cl.ly/XQXV
",jescalan,2014-11-04 20:27:49
247,2014-11-04 20:27:49,"Well, I fixed some related bugs and it seems ok to me now.
",GreLI,2014-11-04 20:27:49
246,2014-09-07 21:57:35,"The current `removeUselessStrokeAndFill` plugin removes any `fill-rule` if `fill` is set to none or `fill-opacity` is set to 0. Nested paths require `fill-rule` to determine whether or not they should render inside a shape - this is why svgo has previously broken/collapsed some images, especially those assembled with [boolean operations](http://bohemiancoding.com/sketch/support/documentation/04-shapes/2-boolean-operations.html).

This PR checks if the current attr up for removal is `fill-rule`, and if so, whether or not its value differs from the default `nonzero`; if it does, it leaves it intact.

This should fix the following issues: [#151](https://github.com/svg/svgo/issues/151), [#161](https://github.com/svg/svgo/issues/161), [#191](https://github.com/svg/svgo/issues/191), [#201](https://github.com/svg/svgo/issues/201), [#217](https://github.com/svg/svgo/issues/217)

Updated tests to verify `fill-rule=""evenodd""` does not get removed by svgo, as it is a [non-default value](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule).
",bradcerasani,2015-01-12 04:28:36
246,2014-09-17 15:12:02,"Would you mind to combine two `if` conditions into one? Generally, it's just first condition conjuncted with the second.
",GreLI,2015-01-12 04:28:36
246,2014-10-30 15:42:58,"[![Coverage Status](https://coveralls.io/builds/1405289/badge)](https://coveralls.io/builds/1405289)

Coverage remained the same when pulling **5cc9d486e61ced03439be3b2f860cd7b2642b8ea on bradcerasani:master** into **0fac67ee54aaa633b548175a962bece310ba144c on svg:master**.
",coveralls,2015-01-12 04:28:36
246,2014-10-30 15:50:54,"How's this?
",bradcerasani,2015-01-12 04:28:36
246,2014-10-30 15:59:09,"That's better, but I'd like to indent condition in parentheses. Also you don't have to parenthise «&&» condition—it has higher priority.
Btw, I'm thinking of disabling this plugin by default anyway, since it need to take in account inherited properties (and possible styles), see #145.
Oh, and it would be nice if you could rebase over actual version.
",GreLI,2015-01-12 04:28:36
246,2014-10-30 15:59:14,"[![Coverage Status](https://coveralls.io/builds/1405376/badge)](https://coveralls.io/builds/1405376)

Coverage remained the same when pulling **7df4b360b2f28613f40cfcc311d4db975fa00850 on bradcerasani:master** into **0fac67ee54aaa633b548175a962bece310ba144c on svg:master**.
",coveralls,2015-01-12 04:28:36
246,2014-10-30 16:25:12,"Not sure if I did that rebase correctly - I appreciate your patience and assistance.
",bradcerasani,2015-01-12 04:28:36
246,2014-10-30 16:28:47,"Yeah, it seems you left a conflict in `plugins/removeUselessStrokeAndFill.js`.
Judging by commits you have merged, not rebased. Check “[How to update GitHub forked repository?](http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository)” topic on SO.
",GreLI,2015-01-12 04:28:36
246,2014-10-30 17:04:30,"[![Coverage Status](https://coveralls.io/builds/1405793/badge)](https://coveralls.io/builds/1405793)

Coverage remained the same when pulling **e16295818f5b10329b3961b658a08ca90e44e2e0 on bradcerasani:master** into **0fac67ee54aaa633b548175a962bece310ba144c on svg:master**.
",coveralls,2015-01-12 04:28:36
246,2014-10-30 17:04:32,"[![Coverage Status](https://coveralls.io/builds/1405793/badge)](https://coveralls.io/builds/1405793)

Coverage remained the same when pulling **e16295818f5b10329b3961b658a08ca90e44e2e0 on bradcerasani:master** into **0fac67ee54aaa633b548175a962bece310ba144c on svg:master**.
",coveralls,2015-01-12 04:28:36
245,2014-09-05 22:15:25,"I'm getting the following error when running my grunt task

<S_CODE_TOKEN>

 This is my grunt setup:

<S_CODE_TOKEN>

If you need any more info please let me know.
",tommaton,2014-09-17 14:57:59
244,2014-09-01 09:49:58,"These examples were produced with default options:

before:
![screen shot 2014-09-01 at 10 48 44](https://cloud.githubusercontent.com/assets/6661966/4106718/30c0a468-31bd-11e4-89ff-480c4a06baa0.png)
after:
![screen shot 2014-09-01 at 10 48 49](https://cloud.githubusercontent.com/assets/6661966/4106719/32ac9d90-31bd-11e4-843e-07ff06661013.png)

---

before: 
![screen shot 2014-09-01 at 10 49 10](https://cloud.githubusercontent.com/assets/6661966/4106723/3f161a70-31bd-11e4-9433-482a43b4f341.png)
after:
![screen shot 2014-09-01 at 10 49 16](https://cloud.githubusercontent.com/assets/6661966/4106725/42749070-31bd-11e4-9222-01b80f80fb67.png)

Is this by design? Which plugins should be disabled, if so?
Test images available here: https://dropr.in/936hm/
",samdaltonmaag,2014-11-04 19:28:40
244,2014-09-04 15:12:00,":+1: 

This seems to be a 0.4.5 issue, and related to both `utilizeAbsolute` and `floatPrecision` options in the `convertPathData` plugin. Switching those options to false is the only way I've found to fix my problem SVGs.
",diurnalist,2014-11-04 19:28:40
244,2014-09-26 15:30:20,"Tried the tool out this morning and also found several inputs were messed up after optimization. 

Input:
![download-orig](https://cloud.githubusercontent.com/assets/838736/4422651/3d105ea4-458e-11e4-9d63-c460231f7de3.png)

Output:
![download-min](https://cloud.githubusercontent.com/assets/838736/4422663/4a3cf60a-458e-11e4-8d95-0021cb291f1e.png)
",jelbourn,2014-11-04 19:28:40
244,2014-10-24 23:37:30,"Noticed a failed optimization today on my [Creative Commons Slim](https://creativecommons.org/about/downloads) svg. Downgrading to 0.4.2 fixed the problem, 0.4.3 breaks.

![screenshot_2014-10-24_18_33_072](https://cloud.githubusercontent.com/assets/1010488/4777743/6e52a2ac-5bd6-11e4-8426-533d614e7b18.png)
",sscotth,2014-11-04 19:28:40
244,2014-11-04 19:28:40,"Now works, after d9ad4183fac1010a6a03ad674699c168fb316dce.
",GreLI,2014-11-04 19:28:40
243,2014-08-31 13:11:16,"[Here's](https://github.com/StylishThemes/GitHub-Dark/blob/master/images/octocat-spinner-smil.svg) my source. Running svgo with default options removes all but one `<animate>` node (even thought all of them are necessary) and distorts paths heavily.
",silverwind,2015-03-22 15:15:39
243,2015-03-22 15:42:26,"Nice :+1: 
",silverwind,2015-03-22 15:15:39
242,2014-08-31 07:19:50,"The `transformsWithOnePath` plugin is very useful. It simplifies shapes in a way that I cannot visually notice the change, but the amount of markup and the file size is reduced.

While optimising an image, I noticed that I could re-optimise the same image repeatedly, using `transformsWithOnePath` around 20 times and each time the image would be simplified more. After this many repetitions, the image was not simplified any further.

I was thinking that the plugin could automatically re-optimise images until no further changes occur, to achieve the smallest possible image. I'm not sure if this should be the default behaviour or if it should be available as an optional flag.
",premasagar,2015-01-19 16:04:00
242,2015-01-19 15:47:14,"There is a `--multipass` command-line option were introduced in [v0.5.0](https://github.com/svg/svgo/releases/tag/v0.5.0). I guess it should help.
",GreLI,2015-01-19 16:04:00
242,2015-01-19 16:04:00,"Yes, thanks. I saw that had been added. Closing....
",premasagar,2015-01-19 16:04:00
241,2014-08-31 07:14:16,"e.g. currently, this:

<S_CODE_TOKEN>

is pretty-printed to:

<S_CODE_TOKEN>

This adds excess whitespace to the tooltips that appear in the browser for title elements. I presume this is also a problem for `<text>` and other text nodes.
",premasagar,2015-01-31 12:16:05
241,2015-02-15 19:31:24,"Actually, it's a browser bug. The specification says to trim whitespace.
",GreLI,2015-01-31 12:16:05
240,2014-08-30 16:26:09,"https://github.com/mourner/simplify-js
",tadatuta,2015-01-19 15:50:58
240,2015-01-19 15:50:58,"Yeah, it's nice, but I slightly doubt that it would be very useful. The most superfluous part in paths are curves.
",GreLI,2015-01-19 15:50:58
239,2014-08-29 09:34:57,"Related to: https://github.com/Hiswe/gulp-svg-symbols/issues/9
",kud,2015-01-19 15:52:26
239,2014-08-29 09:35:43,"My designer ain't happy at all because lots of their svg don't work with `svgo`. He tried Sketch and Illustrator.

Do you have any idea?
",kud,2015-01-19 15:52:26
239,2014-08-29 10:04:20,"It seems to be `fill=""none""` which breaks the task. I removed it in my svg and it works like a charm.
",kud,2015-01-19 15:52:26
239,2014-11-04 20:29:50,"It's quite strange. Could you provide a file which breaks svgo?
",GreLI,2015-01-19 15:52:26
239,2015-01-19 15:52:26,"No info has been provided.
",GreLI,2015-01-19 15:52:26
238,2014-08-28 15:14:05,"Hello.

I would like to use SVGO as a pipeline for optimization and transformation with my own plugins. All content items must be instances of the JSAPI class to not break the chain of the existing plugins. Unfortunately, consumers of the SVGO module don’t have direct access to that class.

So, I propose to add new `createContentItem` method to the public SVGO API. It allows to create new items without exposing inner class.
",mistakster,2014-09-17 14:48:06
237,2014-08-27 05:29:52,"I was wondering if anyone has an idea on how the text to path works in apps like Illustrator or inkscape? And is it easy to make a plugin for svgo?
",Melaga,2016-11-13 10:13:36
237,2014-10-26 10:47:43,"I'm looking for a similar plugin as I'm currently [using Inkscape to manipulate SVG files](https://github.com/edouard-lopez/Hanzi-Pinyin-Font/blob/98a7fe3d7dbf0a5e492658feec28e6a513a89b17/bin/svg-text2svg-font.bash) and it really slooow.
",edouard-lopez,2016-11-13 10:13:36
237,2016-11-13 10:13:36,"It's an editing feature, not an optimization. Also it heavily depends on fonts, you basically need to render them, which is far out of scope.
",GreLI,2016-11-13 10:13:36
237,2016-11-15 10:04:32,"@Melaga might have a look at [text-to-svg](https://github.com/shrhdk/text-to-svg)
",edouard-lopez,2016-11-13 10:13:36
236,2014-08-26 14:57:01,"Otherwise, certain situations will cause a silent error. Specifically, this allows you to use `svg -f` without a config file.

I _highly_ recommend logging errors somewhere to avoid confusion – if you can point me to the code which is catching uncaught exceptions I'll happily submit a pull request to fix :)
",hughsk,2014-09-17 14:39:53
235,2014-08-21 19:52:17,"Update line : 379 from undefined 'config' when -f and not config output
",terg,2015-03-22 19:43:29
235,2015-03-22 19:43:29,"I've added some checks in a2f77efa531e174af8ce86903831e51ec8661808.
",GreLI,2015-03-22 19:43:29
234,2014-08-20 00:44:03,"You really shouldn't throw errors (https://github.com/svg/svgo/blob/master/lib/svgo/svg2js.js#L121) causing modules that consumes this module to break. Make use of callbacks (the right way) instead. What I mean by _i right way_ is that returning errors and actual data inside the same param isn't good practice. Ideally you would return it the ""node way"" with the error param first and actual stuff after, e.g (err, data, ...).

Currently you are doing it like [this](https://github.com/svg/svgo/blob/master/lib/svgo/svg2js.js#L120) and [this](https://github.com/svg/svgo/blob/master/lib/svgo/svg2js.js#L127). It would be nice if it were done like this instead:

<S_CODE_TOKEN>
",kevva,2015-03-22 15:15:39
234,2015-02-08 19:58:56,"Actually, without throwing, `sax.onend` will be executed just as `sax.onerror`, so callback would be executed twice, second time like normal. `return` in your example does nothing.
",GreLI,2015-03-22 15:15:39
233,2014-08-19 19:34:28,"Is It possible to optimize a SVG file without merging paths with SVGO? 
",isaacalves,2014-08-19 20:27:26
232,2014-08-16 16:59:53,"I use symbol with id in my svg as it is described in the following link:
http://css-tricks.com/svg-symbol-good-choice-icons/

After magnifications all of my ids are removed from my svg file.
",Homa,2014-08-17 14:22:33
232,2014-08-17 03:02:49,"Keep ID attribute by declare option `cleanupIDs: false`
",olragon,2014-08-17 14:22:33
232,2015-01-19 17:38:54,"This doesn't work in the `svgo` cli. 
`svgo --cleanupids=false deploy/btn.svg`

Is there an equivalent in `svgo`?
",kevinSuttle,2014-08-17 14:22:33
232,2015-01-19 20:34:04,"Plugins can be disabled with `disable` CLI: `--disable=cleanupIDs` as it written in “[How to use](https://github.com/svg/svgo#how-to-use)”.
",GreLI,2014-08-17 14:22:33
231,2014-08-14 12:55:59,"Here's what I did:

(A) Create the simplest of all plots, using matplotlib

<S_CODE_TOKEN>

(B) Run svgo (I used today's HEAD)

`$ svgo -i test.svg -o test.new.svg`

The tools I have available do not seem to like the file test.new.svg very much:
- Chromium 34.0.1847.137, e.g., does not display the vertical black line.
- `convert` from ImageMagick 6.7.7-10 2014-03-08 Q16 does something weird with the label 0.6 (in both places).

![chromium_test](https://cloud.githubusercontent.com/assets/61962/3920068/244483f8-23b2-11e4-88d1-b0b1a6087f23.png)
![chromium_test new](https://cloud.githubusercontent.com/assets/61962/3920067/2443ba90-23b2-11e4-8326-e85e792423ba.png)
![convert_test](https://cloud.githubusercontent.com/assets/61962/3920066/24413626-23b2-11e4-8eb4-a92e9798b14b.png)
![convert_test new](https://cloud.githubusercontent.com/assets/61962/3920069/24452ace-23b2-11e4-92a3-acc659fb4338.png)

Is this a problem with svgo or chromium and imagemagick?
",pipping,2015-02-08 20:40:09
231,2014-08-15 21:31:34,"I didn't realise that github converts my svg files to png. For now. I've put the original and the optimised version here: http://dev.exherbo.org/~pipping/svgo/
",pipping,2015-02-08 20:40:09
230,2014-08-11 15:16:05,"I'm having two issues with svgo,
first the output is adding (or not removing) the CR char.

The other is the doctype, which is not being removed.

Processed file:

<S_CODE_TOKEN>

Original file:

<S_CODE_TOKEN>

Expected:

<S_CODE_TOKEN>
",enapupe,2014-08-27 12:01:44
230,2014-08-26 04:12:26,"Hello.

Processed file is correct. SVGO doesn’t remove `<!DOCTYPE>` if there are any ENTITY declarations exist.
",mistakster,2014-08-27 12:01:44
230,2014-08-26 12:12:13,"So, should I extend the plugin to do it? I don't like these extra bytes.
",enapupe,2014-08-27 12:01:44
230,2014-08-27 04:43:40,"If you are 100% sure that you don’t need these entities, you may create additional Grunt task to cut them off using any “text replace” plugin.

I don’t know any straight way to extend existing SVGO plugin. However, you are able to add your own plugin into the processing queue when creating new instance of the SVGO module.

Something like this:

<S_CODE_TOKEN>

Please, bear in mind that, it’s just a sample script.
",mistakster,2014-08-27 12:01:44
230,2014-08-27 12:01:44,"Thanks for that. Thinking a bit more about that bytes, since they are inlined in a css file and served with compression (gzip), I think these bytes won't make a difference..
I'm gonna make a test and if necessary apply the replace.
Many thanks for your attention.
",enapupe,2014-08-27 12:01:44
229,2014-07-31 15:58:43,"Writes absolute coordinates if it's shorter. Fixes #79 and #95
Relative coordinates rounding now takes in account accumulating error. Points will be closer to original values.
Rounding is smarter like 2.49 to 2.5.
Fixed bug with straightening curves (which have been passing tests because of another bug) #144
Also fixes #158 #205 #210
",GreLI,2014-08-02 12:05:40
228,2014-07-28 14:09:47,"let output work with folder, allow folder option to continue after it encounters a non-svg file
",mako-taco,2014-08-02 12:01:02
228,2014-07-28 14:11:31,"Fixes #174 
",mako-taco,2014-08-02 12:01:02
228,2014-08-02 12:05:04,"Well, it doesn't seem that it really fixes #174 unless you specify an output folder.
",GreLI,2014-08-02 12:01:02
227,2014-07-17 03:23:24,"<S_CODE_TOKEN>

causes this:

<S_CODE_TOKEN>

The array produced by [line 43](https://github.com/svg/svgo/blob/v0.4.4/plugins/convertStyleToAttrs.js#L43) is:

<S_CODE_TOKEN>

which on its second run has no `[1]`.

Perhaps SVGO could benefit from a CSS parser? This one is good: https://github.com/reworkcss/css-parse
",stevenvachon,2015-02-08 19:40:09
226,2014-07-10 16:04:34,"I am running into a problem in Chrome where when a SVG is technically malformed according to http://validator.w3.org/check by not having the closing font-face tag.  This causes the missing-glyph element to be deleted out of the optimized SVG. This causes the font to not be recognized by the browser. 
",thegoldentoilet,2015-01-19 15:57:16
226,2014-07-10 16:11:27,"Before optimization:

<S_CODE_TOKEN>

After Optimization:

<S_CODE_TOKEN>

When this optimized svg is then added into the DOM in chrome, it renders the closing </font> tag before all the <glyph> elements.
",thegoldentoilet,2015-01-19 15:57:16
226,2014-07-10 19:21:57,"I've found that by disabling the removeEmptyContainers plugin, this stops happening. 
",thegoldentoilet,2015-01-19 15:57:16
226,2015-01-19 15:57:16,"Well, it's not a bug. Self-closing tags are perfectly legal in XML, it's more like a Chrome bug.
",GreLI,2015-01-19 15:57:16
225,2014-07-09 18:05:56,"### Problem

SVG file generated by Adobe Illustrator uses references to XML entities when declaring name spaces. See the following excerpt:

<S_CODE_TOKEN>

**This is due to the limitation of https://github.com/isaacs/sax-js** (not a bug).
### Solutions
- Turn off strict mode in svgo: it works for above cases, but it may allow other cases passed without any error
- Make sax-js to support DTD
- Use other parser library
### Resource

See related inkscape bugs: [1093433](https://bugs.launchpad.net/inkscape/+bug/1093433) and [166371](https://bugs.launchpad.net/inkscape/+bug/166371)
",chulkilee,2016-01-04 17:22:25
225,2014-07-30 10:35:47,"Just encountered this, how would you turn off strict mode?
",SebCorbin,2016-01-04 17:22:25
225,2014-07-30 20:31:58,"Change this line https://github.com/svg/svgo/blob/v0.4.4/lib/svgo/svg2js.js#L7

<S_CODE_TOKEN>
",chulkilee,2016-01-04 17:22:25
224,2014-07-06 05:02:51,"_prefixIds_
I'm often dealing with multiple inline SVGs in a HTML document. In order to avoid elements in these SVGs to have the same IDs I found it helpful to use a different prefix for every SVG.

_removeById_
removes specific element

_removeAttr_
removes specific attributes
",poezn,2014-07-09 17:16:30
224,2014-07-09 17:21:16,"I'm realizing that my use case is slightly different from the one svgo was written for. Beyond just cleaning up  SVG code, for which svgo is great, I need to prepare SVG for further manipulation with libraries like D3. 

Closed this pull request for now. I'm happy to contribute back all the plugins, but I don't want to flood the plugin list for now.

As a side note, most of my plugins have parameters. Testing is not really possible using custom parameters under this setup. It looks like https://github.com/svg/svgo/pull/197 addresses this, so once this is merged, I might open this pull request again.
",poezn,2014-07-09 17:16:30
223,2014-07-03 21:09:35,"All of a sudden I started getting the following error from the svgo:

<S_CODE_TOKEN>

I've done a simple research and found out that the credit goes to line 29 of lib/svgo/config.js:

<S_CODE_TOKEN>

For some reason `require('../../.svgo.yml')` returns an array with one element with index ""0"" instead of returning the YML file directly. So the quick fix would be like this:

<S_CODE_TOKEN>

But I am not sure I'm getting all this right. Maybe it is my environment to blame or something. Please advise.
",brykov,2015-03-22 16:09:29
223,2014-10-30 11:28:04,"Came across this as well. The only way out I see is setting `config.full` to true so it doesn't load the yaml file. Did you finally solve it?
",freezy,2015-03-22 16:09:29
223,2014-11-21 13:36:50,"Parsing of config file is evidently broken, it doesn’t work even with the default config:

<S_CODE_TOKEN>

When I remove all comments, then it doesn’t print any error, but configuration is still ignored.
",jirutka,2015-03-22 16:09:29
223,2014-11-22 10:01:16,"Well, it actually works: see “Done in … ms”, but yeah, there is something odd, while nothing changed except updated dependicies.
",GreLI,2015-03-22 16:09:29
223,2014-11-23 14:22:13,"Nope, it uses the default config and ignores the one specified with `--config` option (I’ve removed some plugins from it).
",jirutka,2015-03-22 16:09:29
223,2015-03-22 16:09:29,"Should be fixed by a2f77efa531e174af8ce86903831e51ec8661808.
",GreLI,2015-03-22 16:09:29
222,2014-06-20 18:02:52,"Hi!
Is there a way to do all the minifying processing, while still keeping the newlines and tabulations? Just for savind readability and ease to apply small edits to the resulting files?

I am almost sure there is an option and I am just not thorough enogh looking for it - so I'd like to apologize in advance if it's the case.

One remark: the tool I am using is _grung-svgmin_.
",bonfish,2015-01-19 15:59:19
222,2014-11-02 22:22:03,"There is an command-line option `--pretty` which formats output code.
",GreLI,2015-01-19 15:59:19
221,2014-06-17 08:33:40,"Per the SVG 1.1 spec, on a `linearGradient`, the default value of `y1` is 0. svgo is therefore correct to strip such an attribute.

Unfortunately, however, some browser engines (I tested recent-ish versions of Firefox and Chromium) seem to think the default value of `y1` should be 1, not 0. As a result, optimized SVGs with such a gradient will render wrong in these browsers.

This trivial change just makes svgo not strip a default `y1` from a `linearGradient`, thus avoiding the problem.
",argv-minus-one,2015-03-28 18:44:47
221,2014-07-25 11:23:38,"@argv-minus-one please open a ticket on Firefox and Chrome and link them back here, so it can be fixed in future.
",sindresorhus,2015-03-28 18:44:47
221,2014-08-02 11:53:27,"Instead of silent removing i'd recommend to comment out this string with reason of removing. Otherwise, someone in future may think that it's a bug.
",GreLI,2015-03-28 18:44:47
221,2015-03-28 18:44:47,"Actually, I couldn't reproduce such a bug. Either Chrome or Firefox worked with my tests correctly. Since these browser is being updated on regular basis I don't think it's any more actual.
",GreLI,2015-03-28 18:44:47
220,2014-06-07 14:18:38,"I created a plugin to remove all the attributes added by [Sketch](http://www.bohemiancoding.com/sketch/) a very popular vector design application for Mac. I'm not really sure that this is the best way to implement this but it works and tests are passing.

Is this something you might want to have out of the box? If not what is the best way to distribute and use plugins from the community?
",gcollazo,2014-08-02 11:25:49
220,2014-07-16 15:22:51,"Hi, I made PR #211 generally to have Sketch in mind and I suppose my solution is more universal :). 

<S_CODE_TOKEN>
",roadhump,2014-08-02 11:25:49
220,2014-08-02 11:25:49,"Yeah, I guess @roadhump is right — there is no need in additional plugin.
",GreLI,2014-08-02 11:25:49
219,2014-06-06 09:47:14,"There is some changes in master not published as new version for a long time now. What about to publish them? I need this https://github.com/svg/svgo/commit/36caca2fbe11997feed51975760747e86d09905e very much, for example.
",rpominov,2014-10-10 12:02:47
219,2014-07-02 10:28:42,"Yes please! I can't use gulp-svgmin right now because it can't use the latest version of the collections plugin. :+1: 
",Eworm,2014-10-10 12:02:47
218,2014-06-05 23:23:38,,lonormaly,2014-11-04 22:15:45
218,2014-11-04 22:15:45,"Done in [v0.5.0](https://github.com/svg/svgo/releases/tag/v0.5.0).
",GreLI,2014-11-04 22:15:45
217,2014-06-04 13:54:07,"When running svgo on an input, the fill attribute for the sketch attribute was dropped, causing the SVG file to render as blank.

Original file:

<S_CODE_TOKEN>

Optimized file 

<S_CODE_TOKEN>

The object appears correctly once I manually add `fill=""white""` back after the sketch name.
",lwatiker,2015-02-08 16:32:23
217,2014-10-10 11:34:17,"I am having the same issue. SVGO removes `fill=""white""` from `<mask>` which causing result image to be blank in a browser.

Quick fix is to disable the `removeUnknownsAndDefaults` plugin.
",rpominov,2015-02-08 16:32:23
217,2015-01-19 15:55:47,"The plugin has been disabled by default in [v0.5.0](https://github.com/svg/svgo/releases/tag/v0.5.0).
",GreLI,2015-02-08 16:32:23
217,2015-02-05 10:39:26,"Looks like v0.5.0 actually disables `removeUselessStrokeAndFill` but this issue relates to `removeUnknownsAndDefaults`.
",jameshoward,2015-02-08 16:32:23
217,2015-02-05 17:27:07,"Really? My bad. Anyway, I have a solution now.
",GreLI,2015-02-08 16:32:23
217,2015-03-06 11:27:37,"Any idea when there might be a new released version with this fix?
",tobiastom,2015-02-08 16:32:23
217,2015-03-06 12:21:06,"I'm going to release soon, but a couple of bugs need to be fixed before that.
",GreLI,2015-02-08 16:32:23
217,2015-03-06 13:21:43,"Thanks for the info. Looking forward to the update.
",tobiastom,2015-02-08 16:32:23
217,2015-03-30 12:17:41,"[v0.5.1](https://github.com/svg/svgo/releases/tag/v0.5.1) has been just published.
",GreLI,2015-02-08 16:32:23
217,2015-04-01 09:30:09,"Seems to work very well now. Thank you.
",tobiastom,2015-02-08 16:32:23
216,2014-05-23 01:50:28,"Hey there,

SVGO is removing IDs from my svg tags, although I am supplying `{ cleanupIDs: false }`. Any thoughts here?
",briangonzalez,2014-05-23 06:08:13
216,2014-05-23 06:08:12,"Looks like I wanted to disable the plugin `removeUnknownsAndDefaults`
",briangonzalez,2014-05-23 06:08:13
215,2014-05-21 17:06:23,"I didn't manage to make this plugin work
is this the right syntax?

<S_CODE_TOKEN>
",pgherveou,2014-11-02 22:20:06
215,2014-06-04 09:33:35,"Yes, it's the right syntax.

But there's a bug, so to make it work you need to apply this PR https://github.com/svg/svgo/pull/179
which basically add removeTitle to the .svgo.yml plugins list.
",Delapouite,2014-11-02 22:20:06
215,2014-11-02 22:20:06,"The PR has been merged.
",GreLI,2014-11-02 22:20:06
215,2016-03-21 17:29:28,"why the `removeTitle` is disabled by default?
",a-x-,2014-11-02 22:20:06
215,2016-03-21 18:18:11,"For accessibility reasons–there could be description that helps people to understand an image.
",GreLI,2014-11-02 22:20:06
214,2014-05-16 00:29:42,"<S_CODE_TOKEN>

becomes

<S_CODE_TOKEN>

which breaks the animation.
",stevenvachon,2015-03-22 15:15:38
214,2014-10-02 19:00:23,"FWIW it's the `collapseGroups` plugin that removes the `<g>` elements: https://github.com/svg/svgo/blob/master/plugins/collapseGroups.js
",rasmusfl0e,2015-03-22 15:15:38
214,2014-10-02 20:02:02,"Yep, that's how I worked around it; by disabling the `collapseGroups` plugin. It'd be great if SVGO could detect this automatically, though.
",stevenvachon,2015-03-22 15:15:38
214,2014-11-11 21:13:26,"> It'd be great if SVGO could detect this automatically

Maybe by default only collapsing groups with a single child node?  That way, only the `<g>` tags that are actually grouping remain.
",tomByrer,2015-03-22 15:15:38
213,2014-05-12 08:50:12,"Not sure if there's something wrong with my svg, but it gets almost entirely removed after running it through svgo.

Input (https://gist.github.com/nikaspran/c64bd0a1628f59d17ab2):

<S_CODE_TOKEN>

Output: 

<S_CODE_TOKEN>
",nikaspran,2015-03-22 15:15:39
213,2014-10-10 14:29:21,"I can confirm this is still an issue.
",btpoe,2015-03-22 15:15:39
213,2014-12-15 10:26:04,"I have the same problem. I think it's caused by [`removeHiddenElems`](https://github.com/svg/svgo/blob/master/plugins/removeHiddenElems.js).
Try to run svgo with the plugin disabled:
`> svgo file.svg --disable=removeHiddenElems`
",moretti,2015-03-22 15:15:39
213,2014-12-15 13:38:11,"Yeah, from `removeHiddenElems`:

> Remove hidden elements with disabled rendering:
> - circle with zero radius

It doesn't understand that the inner animation will eventually expand the radius :-)
",moretti,2015-03-22 15:15:39
213,2014-12-15 19:34:38,"Makes sense. Thanks for the heads up.
",btpoe,2015-03-22 15:15:39
213,2014-12-23 14:53:00,"I have a similar animated svg and I could not get svgo to accept the removeHiddenElems plugin parameter when run through gulp-imagemin, but I could when running svgo directly in the CLI.

Luckily I found a work around, just set the `r` attrs to 1. The transform still takes over and because of the `begin` attr it doesn't even matter that the radii are initially set. Hope that saves anyone else having the same issue.
",jimmynotjim,2015-03-22 15:15:39
212,2014-05-08 14:22:04,"Создал файл в Скетч3. Похоше svgo пока не умеет работать с его данными

<S_CODE_TOKEN>
",voischev,2015-03-15 20:13:30
212,2014-05-13 10:07:10,"Latest version strips `xmlns:sketch=""http://www.bohemiancoding.com/sketch/ns""` namespace and any attrs starting with `sketch:type=""""`.
",dhoulb,2015-03-15 20:13:30
212,2014-05-17 15:23:00,"Can you say when this will be available on NPM?
",shakyShane,2015-03-15 20:13:30
212,2014-06-20 12:51:11,"Any movement on this?
",chrisrowe,2015-03-15 20:13:30
212,2014-07-02 11:54:57,":+1: 
",Eworm,2015-03-15 20:13:30
212,2014-09-25 12:26:20,"My grunt is still returning errors regarding this issue..
Any news on this?
",mariendries,2015-03-15 20:13:30
212,2015-03-15 20:13:30,"Landed in [v0.5.0](https://github.com/svg/svgo/releases/tag/v0.5.0)
",GreLI,2015-03-15 20:13:30
211,2014-05-06 14:31:52,"It would be nice to give user an opportunity to set additional editors namespaces and not to wait when they will be added to `_collections.js`
",roadhump,2014-08-02 11:50:09
211,2014-05-17 15:23:30,"+1
",shakyShane,2014-08-02 11:50:09
210,2014-04-28 22:53:53,"SVGO affects these:

<S_CODE_TOKEN>

<S_CODE_TOKEN>

<S_CODE_TOKEN>
",aristov,2014-08-02 14:23:19
210,2014-07-10 14:09:01,"It seems that a problem in the convertPathData plugin. Images looks good, if it's disabled.
",aristov,2014-08-02 14:23:19
209,2014-04-28 11:23:38,"`<path ... />` sometimes breaks proper parsing in Internet Explorer 8. Would be awesome if that would be optional. Using `<path></path>` works nicely.

Keep up the great work!
",saschamt,2016-02-23 16:13:18
209,2014-10-29 20:58:49,"Dug around and it looks like this can be solved via CSS like so:
`svg * {
    display:block;
  }`
or you can be specific with ""path"". Basically, this is aping HTML5 explicit declarations.
",jessekeyes,2016-02-23 16:13:18
209,2014-10-29 21:08:35,"Unfortunately, IE isn't the only issue. I had bug in Safari with `<use />` tag as well. (`<use></use>` was ok).
",GreLI,2016-02-23 16:13:18
209,2016-02-23 16:13:18,"#396 addresses this issue.
",GreLI,2016-02-23 16:13:18
208,2014-04-28 11:17:46,"I am using svgo 0.4.4.

In an SVG image that I created with Inkscape 0.48.4 r, the `<g>` element was translated by `translate(0,-924.36218)` and each of the `<path>`s were translated back by `translate(0,924.36218)`:

<S_CODE_TOKEN>

svgo produced:

<S_CODE_TOKEN>

The translation transforms should be combined, and then eliminated if the end result is no translation, as in this case.
",dtrebbien,2015-03-22 19:35:10
208,2015-01-19 16:04:08,"Well, in [v0.5.0](https://github.com/svg/svgo/releases/tag/v0.5.0) svgo doesn't combine transforms, but applies them to paths with `arc` command, so it's somewhat better.
",GreLI,2015-03-22 19:35:10
207,2014-04-23 08:28:56,"There are a total of 4 plugins disabled by default, where the documentation only indicated that for 1 plugin (removeRasterImages).

I updated the `readme.md` so one does not have to look in the source of _all the plugins_ to see what's the default configuration.

I also listed the missing plugins (removeUselessStrokeAndFill and sortAttrs).
",branneman,2014-08-02 11:49:42
206,2014-04-16 21:52:57,"The coordinate system seems to be broken with some images:
![bees](http://cl.ly/V2dM/download/bees.svg)
**Before/After:**
![bees](https://cloud.githubusercontent.com/assets/739656/2725802/28775b26-c5b1-11e3-891b-a03d928aed3c.png)
",joeyhoer,2014-11-04 15:08:42
206,2014-05-17 20:57:14,"Same for me, I used Inkscape to download (using the internal OCL import) this http://openclipart.org/download/people/Pippi2011/Superhero-girl-in-purple.svg file. I ungrouped it and changed the colour on the leotard/bodysuit part. Saved and performed ""svgo Superhero-girl-in-purple.svg"". On opening the file several elements are now misplaced.

Actually running svgo without altering the original image file leads to some of the image elements being deleted.
",pbhj,2014-11-04 15:08:42
206,2014-11-02 22:30:04,"Fixed issue with “flies” image in #189.
",GreLI,2014-11-04 15:08:42
205,2014-04-15 07:17:37,"<S_CODE_TOKEN>
",arikon,2014-08-02 14:22:51
204,2014-04-12 12:20:05,"I use _svgo_ through _grunt-svgmin_ and have the following piece of config:

<S_CODE_TOKEN>

So, it uses the default _svgo_ configuration, except enabling _transformsWithOnePath_.
Everything works fine with source SVG files containing one path only. However, if there more than one path in source SVG:

<S_CODE_TOKEN>

The resulting SVG loses all paths other than the first:

<S_CODE_TOKEN>

If I disable _transformsWithOnePath_, all the paths in the resulting SVG are OK and successfully merged with _mergePaths_:

<S_CODE_TOKEN>

So the issue is that _transformsWithOnePath_ loses paths even if they merged by _mergePaths_. After some debugging, I found the reason.

_transformsWithOnePath_ uses JS-path data converted by _path2js_ in _convertPathData_. But _convertPathData_ runs before _mergePaths_, so _path2js_ converts the first path only and all other paths are lost.

The solution is to move _mergePaths_ before _convertPathData_ in _.svgo.yml_:

<S_CODE_TOKEN>

The resulting SVG:

<S_CODE_TOKEN>

Please review this simple fix.
",izwerg,2015-03-22 15:15:38
204,2015-02-25 21:30:36,"There is one important feature—convertPathData applies transformations to paths. So, if paths have different transformation normally they wouldn't be merged, but after applying transformations, merging becomes possible.
",GreLI,2015-03-22 15:15:38
203,2014-04-07 08:02:05,"Probably i missed a parameter but I cant find that how can I minify like convert fills to css classes.

Like here:
http://petercollingridge.appspot.com/svg-optimiser

Thanks
",PeterMK85,2016-11-13 10:11:52
203,2014-11-04 14:44:33,"Not in SVGO for now. Some elements can be merged in groups `<g>` though.
",GreLI,2016-11-13 10:11:52
202,2014-04-06 17:08:01,"added ""prefix"" parameter to solve problem of combining multiple svg into one svg or html file
",DanielMazurkiewicz,2014-08-02 11:42:43
202,2016-09-23 22:20:57,"@DanielMazurkiewicz @GreLI 

How to specify prefix using bash console?
",NeXTs,2014-08-02 11:42:43
202,2016-09-28 14:36:18,"@NeXTs 
Check if this works:
--config {""plugins"":[{""cleanupIDs"":{""remove"":true,""minify"":true,""prefix"":""yourPrefix_""}}]}
",DanielMazurkiewicz,2014-08-02 11:42:43
201,2014-04-04 12:09:30,"Original file:

<S_CODE_TOKEN>

Optimized:

<S_CODE_TOKEN>

![image](https://cloud.githubusercontent.com/assets/825702/2614957/b5f81400-bbf1-11e3-8d0d-79409d012c28.png)

It happens when group has `fill=""none""` and child path has `fill=""#000000""`.
",rpominov,2015-01-19 16:05:42
201,2014-04-28 11:21:25,":+1:
A fix would be awesome.
",saschamt,2015-01-19 16:05:42
201,2014-11-04 20:34:57,"Yeah, I disabled the plugin by default for now.
",GreLI,2015-01-19 16:05:42
200,2014-04-04 09:21:46,"Plugin `removeEditorsNSData` do not removes Sketch.app (http://www.bohemiancoding.com/sketch/) meta data. This pr fix that.
",rpominov,2014-04-10 16:45:21
200,2014-04-10 16:38:29,"Already done in latest version.

Duplicate of https://github.com/svg/svgo/commit/36caca2fbe11997feed51975760747e86d09905e
",dhoulb,2014-04-10 16:45:21
200,2014-04-10 16:45:21,"Sorry, didn't check that I use latest version. Thank you for clarification.
",rpominov,2014-04-10 16:45:21
199,2014-03-28 17:12:06,"If you want to see a pretty awful svg try to export one from [openstreetmap](http://www.openstreetmap.org/)

I [uploaded an example at jsfiddl](http://jsfiddle.net/ZM37s/)

You will see lines like this:

<S_CODE_TOKEN>

its just the exactly same object 97 times. These 97 objects could be compared and merged into one. Replaced by references and so on. I'm sure this alone would reduce the file size to around 99%
",fuddl,
199,2014-11-04 20:37:37,"Actually, you can't merge such objects. SVG allows to reuse the with the `<use>` tag. But still in many quantities it's the same repetition, just somewhat shorter.
",GreLI,
198,2014-03-28 08:13:02,"When input tags have attributes with embedded &quote's, this causes an issue when output is generated with &quote's converted to "". Witness the following:

Input:

<text style=""color:black;"" font-size=""12px"" zIndex=""1"" y=""13"" x=""0"" font-family='&quot;Lucida Grande&quot;, &quot;Lucida Sans Unicode&quot;, Verdana, Arial, Helvetica, sans-serif' fill=""black""/>

Output:

<text font-size=""16"" text-anchor=""middle"" y=""25"" x=""858"" font-family=""""Lucida Grande"", ""Lucida Sans Unicode"", Verdana, Arial, Helvetica, sans-serif"" class=""highcharts-title"" fill=""#274b6d"" color=""#274b6d"">

Expected output:

<text font-size=""16"" text-anchor=""middle"" y=""25"" x=""858"" font-family=""&quot;Lucida Grande&quot;, &quot;Lucida Sans Unicode&quot;, Verdana, Arial, Helvetica, sans-serif"" class=""highcharts-title"" fill=""#274b6d"" color=""#274b6d"">

This patch fixes this issue.
",ditesh,2014-08-02 11:42:02
197,2014-03-27 14:05:16,"Hey

I've added a removeAttrs plugin that basically can be configured to filter out attributes that match a certain regexp pattern.

I use this basically to remove ""fill"" & ""stroke"" attributes so the can be styled with css. However I thought it make sense to give an option to filter out any particular attribute.

By this I took the chance to refactor the way plugins are tested a bit and added the option to specify plugin parameters in JSON form. This would help to test the plugins with various configurations.

Many thanks!
Ben
",bennyschudel,2015-06-21 18:50:01
197,2014-07-16 16:05:07,":+1: this looks neat, and would help a lot with styling embedded svgs.
",nelsonpecora,2015-06-21 18:50:01
197,2014-08-02 11:41:32,"Franky, I doubt that svgo should have editing options, except for its main purpose.
",GreLI,2015-06-21 18:50:01
197,2014-11-14 13:19:32,"What's the status of this? If it is not going to get merged I have a question: Is it possible to use a custom plugin from the local file system while using svgo via the command line?
",stravid,2015-06-21 18:50:01
197,2014-11-14 19:00:15,"While it's interesting, it can’t be automatically merged. Need to rebase, also it would be nice to squash to commits: de073e9 and 8a693e7.
",GreLI,2015-06-21 18:50:01
197,2014-11-14 19:43:13,"I don't know how to accomplish this. Help from anyone? 
",bennyschudel,2015-06-21 18:50:01
197,2014-11-14 19:52:11,"See the answer in «[How to update GitHub forked repository?](http://stackoverflow.com/questions/7244321/how-to-update-github-forked-repository)».
",GreLI,2015-06-21 18:50:01
197,2014-11-19 08:47:37,"@GreLI Is it possible to use custom plugins that are not in svgo included?

I need to run very specific plugins and wonder how I can accomplish this.
",stravid,2015-06-21 18:50:01
197,2014-11-19 15:03:16,"Sure, you can. You don't have to contribute, contributing just makes yours and others life easier.
",GreLI,2015-06-21 18:50:01
197,2014-11-19 15:04:42,"Regarding plugins see https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#3-plugins
",GreLI,2015-06-21 18:50:01
197,2014-12-16 21:01:57,"From your link it looks like you have to add custom plugins directly to the plugins directory and then edit the default config file. Is this the only way, or are you currently able to extend plugins without altering the original repo? It seems like that would be the best way to do it.
",rufus2021,2015-06-21 18:50:01
196,2014-03-27 14:00:11,"Hey

I've added a plugin that removes the width / height attribute in case there is a viewBox attribute specified. This helps with scaling svgs to its container.

Because I do not speak russia, I've included the english translation for the README.md.ru file. Could you fix that?

Many thanks!
Ben
",bennyschudel,2015-06-21 16:29:57
196,2014-07-04 12:16:22,"+1 on this pull request.
I was about to code my own, but this was way better. It worked wonderfully. It would be nice to have in the main repo.
",baamenabar,2015-06-21 16:29:57
196,2014-07-14 19:19:04,"+1

Very useful.
",nikoskip,2015-06-21 16:29:57
196,2014-08-02 11:37:45,"Hi! Could you rebase and squash commits?
",GreLI,2015-06-21 16:29:57
196,2014-08-22 19:50:45,"+1
",silenceisgolden,2015-06-21 16:29:57
196,2014-08-22 21:14:24,"Only issue with this is that the call to grab the width and height in js2svg.js gets undefined because the width and height are missing. It would be great to have a way to preserve that.
",silenceisgolden,2015-06-21 16:29:57
196,2014-12-16 00:53:43,"+1
",GeoffreyBooth,2015-06-21 16:29:57
196,2014-12-16 01:16:05,"Is there a way to include this plugin when running `svgo`, without saving it directly into `/usr/local/lib/node_modules/svgo/plugins`?
",GeoffreyBooth,2015-06-21 16:29:57
196,2015-03-23 18:36:29,"@bennyschudel Nice, thanks. But I think there needs to be a check so that nested svgs do not lose their dimension attributes.

E.g.

<S_CODE_TOKEN>

Nested svg is well-provided for in the spec and sometimes essential:

http://www.w3.org/TR/SVG/coords.html#EstablishingANewViewport

@GreLI how to check that an `<svg>` is rootmost within the syntax tree?

Lastly, I think we should consider renaming this to something like ""responsive"", to make it clear that we are not removing all dimensions. I would :heart: to see this land.
",albell,2015-06-21 16:29:57
196,2015-03-24 11:42:56,"> @GreLI how to check that an <svg> is rootmost within the syntax tree?

For now it'd be something like `item.parentNode.elem == '#document'`. May be it would be better to add a method to API.
",GreLI,2015-06-21 16:29:57
196,2015-03-25 01:06:24,"Ok, are there other situations where you only want to operate on rootmost `<svg>`? If so, +1 to adding a `isRootmost()` or whatever method to the API. Otherwise I can submit a PR along the lines above.
",albell,2015-06-21 16:29:57
195,2014-03-26 15:51:38,"Hey

I've added a plugin that removes the width / height attribute in case there is a viewBox attribute specified. This helps with scaling svgs to its container.

Because I do not speak russia, I've included the english translation for the README.md.ru file. Could you fix that?

Many thanks!
Ben
",bennyschudel,2014-03-27 13:57:40
195,2014-03-27 13:58:00,"I'll do a new one for this from another branch
",bennyschudel,2014-03-27 13:57:40
194,2014-03-06 02:20:53,"https://github.com/petercollingridge/SVG-Optimiser

In case you didn't already know about it, it could be helpful.
",stevenvachon,2014-12-04 05:01:33
194,2014-12-04 05:01:33,"thanks
",deepsweet,2014-12-04 05:01:33
193,2014-03-03 12:03:03,"While using Node.js version 0.11.11, I get the error mentioned in the subject. 
With 0.10.x this does not occur.
",paazmaya,2015-03-22 15:15:39
193,2015-02-25 10:34:56,"There are two errors:

<S_CODE_TOKEN>

This are thrown on every invocation, which gets quite annoying:

<S_CODE_TOKEN>
",apfelbox,2015-03-22 15:15:39
192,2014-03-02 18:36:42,"Executing ""npm docs svgo"" or ""npm home svgo"" should open the right URL in the browser -> https://github.com/svg/svgo.

See also https://www.npmjs.org/doc/cli/npm-docs.html
",ghost,2014-08-02 11:31:29
191,2014-02-27 17:29:17,"I'm not sure if this is already know so forgive me for asking, but is it possible to fix svgo removing the fill-mode attribute from shapes?

For my SVG files that become corrupted usually the _fill-rule=""evenodd""_ is removed. This makes sure substractions work for shapes.

An example would be a wheel:

<S_CODE_TOKEN>

that svgo optimizes to

<S_CODE_TOKEN>

After this it does not show the center cut-out untill I manually add `fill-rule=""evenodd""` back.

Thanks
",ghost,2014-11-04 19:33:07
191,2014-09-07 19:29:36,"Did you ever find a way to reconcile this? Running into the same issue
",bradcerasani,2014-11-04 19:33:07
191,2014-10-29 20:00:25,"I have the same issue. Seems kind of silly.
",VinSpee,2014-11-04 19:33:07
191,2014-11-02 23:27:00,"+1
",poying,2014-11-04 19:33:07
191,2014-11-04 19:33:06,"Disabled the plugin in 84f105b76b81c3c8425b4507366e19a09117ac1b.
",GreLI,2014-11-04 19:33:07
190,2014-02-26 13:36:13,,sipayRT,2014-02-26 13:37:04
189,2014-02-25 04:48:53,"I'd previously left a detailed comment at pull request #187 , thinking that that pull request should fix my problem, but problem was instead in function collapseRepeated().

Once past the beginning move of a path, consecutive move commands get mistakenly changed to a move command followed by implicit line commands.  e.g.

>  M200,0 m -200,0 400,0 

will get changed to 

> m-200-400 -200 0 h400 

The coder missed the important detail about move commands in section

> 8.3.2 The ""moveto"" commands
> http://www.w3.org/TR/SVG11/paths.html#PathDataMovetoCommands

which is that additional coordinate pairs following a move command are understood to be implicit line commands.  While for all other repeated commands you can drop the repeated command letter, you cannot drop the 'm' from ""M x1,y1 m x2,y2"".  If you do then ""M x1,y1 x2,y2"" is interpreted as if ""M x1,y1 L x2,y2"" was written.

Fix that works for my case is:

<S_CODE_TOKEN>

I'll go look to see if there is a CLA to fill out.  Don't have time right now to do a real pull request, sorry.
",tshinnic,2014-11-02 22:28:27
189,2014-02-25 04:58:05,"2 BTW's

I had tested that enabling/disabling plugin convertPartData toggled the problem, and then more specifically that param collapseRepeated toggled the problem, e.g. 

> <S_CODE_TOKEN>

And I'm wondering why ""m50 400m-50 0"" isn't collapsed into one move command?  Should become ""m0 400"", yes?
",tshinnic,2014-11-02 22:28:27
188,2014-02-24 13:32:20,"Afraid I don't know ""module"" in Russian, so stuck with the copy paste of task. =)

Thanks!!!
",dbashford,2014-03-07 11:05:04
187,2014-02-21 08:45:07,"Fixes svg/svgo#158
",bhoule,2014-08-02 12:07:41
187,2014-02-25 01:16:53,"I must have applied your change wrong.  Was glad to see somebody already saw a problem, but I'll look at this more closely later, because it didn't fix my problem output.

<S_CODE_TOKEN>

The  original 'M' then 'm' then implied 'l'  

> <S_CODE_TOKEN>

is converted to  'm' then implied 'l' then 'h':

> <S_CODE_TOKEN>

The 'h' is perfectly correct.  The 'M' then 'm' should have been collapsed into just one 'm' command.  Is that possible?  Certainly the added implied 'l' makes interesting pictures!  :-)

I've got a process that outputs a lot of absolute moves, then relative adjustments, and then real drawing commands.  svgo makes 'oops' out of that.

BTW: svgo compresses spaces in arc commands, which is fine for all browsers, but Inkscape rejects path commands like this: ""a50 50 0 0 1 100 0   50 50 0 0 1-100 0""   It liked everything up until the ""1-100"". Changed to ""1 -100"" that was accepted.  Obviously Inkscape thinks the boolean sweep flag isn't a number that can have another number butt up against it.  I'm having such a good time...  :-/
",tshinnic,2014-08-02 12:07:41
187,2014-02-25 04:50:22,"Sorry for the confusion, my problem was completely different.  See above reference issue.
",tshinnic,2014-08-02 12:07:41
187,2014-08-02 12:07:41,"Obsoleted by #229.
",GreLI,2014-08-02 12:07:41
186,2014-02-21 00:36:41,,bhoule,2014-08-02 12:08:50
186,2014-02-21 08:33:18,"[![Coverage Status](https://coveralls.io/builds/537378/badge)](https://coveralls.io/builds/537378)

Coverage remained the same when pulling **aa15348578256b8dce75c592bfca826321146661 on bhoule:master** into **00b94d94a99a90aa009ca89b8c829fd524d42957 on svg:master**.
",coveralls,2014-08-02 12:08:50
186,2014-08-02 12:08:50,"Actually, trailing commas are perfectly valid in ECMAScript 5 and so in Node.js.
",GreLI,2014-08-02 12:08:50
185,2014-02-13 08:56:25,"Hi guys,

First off, congrats for this magnificent project ;-)

My name is Germán Toro del Valle (https://github.com/gtorodelvalle/) and I work for Telefónica R&D in the development of Firefox OS (http://www.mozilla.org/en-US/firefox/os/) with Mozilla.

We are currently considering using SVGO to optimize the SVG images used not only in the so called Building Blocks (http://buildingfirefoxos.com/building-blocks/action-menu.html) but also in the core apps we are currently implementing.

To optimize our SVG files we would like to include some content in these files, more concretely:

<S_CODE_TOKEN>

as the first child of the <svg> element.

We tried to create a plugin to do it but it seems that SVGO does not currently support this kind of preprocessing so we end up creating a little Node.js app to do it. As a second option, we decided to fork https://github.com/svg/svgo-gui and include this preprocessing directly in the app, you can see it at https://github.com/gtorodelvalle/svgo-gui/tree/add-defs-preprocessing . The changes are as simple as https://github.com/gtorodelvalle/svgo-gui/compare/add-defs-preprocessing?expand=1 ;-)

Another option we have is of course creating Grunt or Gulp tasks to automate this 2 step process, of course.

After all this introduction, our question is: do you plan to include the possibility of inserting content (elements with additional content) in SVGO at some time via the API, probably via an addElement() or addContent() function such as the addAttr() one? :-)

Thank you  very much and congrats once again! ;-)
",gtorodelvalle,2016-02-23 16:03:42
185,2016-02-23 16:03:42,"Hi! Sorry for the late answer, I've missed somehow this issue.
Regarding the question, you're right, there is no such a method. It's not planned in short term, but probably will be added with reworked API. Unfortunately, the latter requires a lot of work, which we don't have enough time for.
",GreLI,2016-02-23 16:03:42
184,2014-02-12 10:12:18,"SVGo does not produce an output (not even an error!) for SVGs containing a trailing comment, such as:

<S_CODE_TOKEN>
",rodneyrehm,2015-01-25 20:27:39
183,2014-02-09 10:03:09,"- I updated [js-yaml](https://github.com/nodeca/js-yaml), [mocha](hub.com/visionmedia/mocha), [should](https://github.com/visionmedia/should.js/) and [istanbul](https://github.com/gotwarlost/istanbul).
  - js-yaml v2.1.x uses `require.extensions` to load YAML files via `require()`, which is [the _deprecated_ part of Node](http://nodejs.org/api/globals.html#globals_require_extensions). From [js-yaml v3.1.0](https://github.com/nodeca/js-yaml/blob/master/HISTORY.md#310--2014-07-07), this feature is removed.
- I updated the links in the banner comment of lib/svgo.js.
",shinnn,2014-11-04 21:49:25
183,2014-08-02 11:29:38,"Hi! What the point in updating dependecies? Is there a bug?
",GreLI,2014-11-04 21:49:25
183,2014-08-02 14:21:42,"Hi, @GreLI. I updated [the comment](https://github.com/svg/svgo/pull/183#issue-27220049) to explain this PR in detail.
",shinnn,2014-11-04 21:49:25
183,2014-11-04 21:49:25,"Thanks for bringing attention! Unfortunately, pull-request cannot be merged, so I incorporated it in the latest version commit.
",GreLI,2014-11-04 21:49:25
182,2014-02-08 14:01:46,"Transforms are applied only to the first subpaths of a multipart path.

Testcase: [before](https://git.wikimedia.org/blob/mediawiki%2Fcore/13acd41515b2579f4d1cc2503e966d85ed968d7c/skins%2Fvector%2Fimages%2Fdocument-icon.svg) – [after (broken)](https://git.wikimedia.org/blob/mediawiki%2Fcore/047c2b45e6feecb185f0a6ec7870bf57a13994b9/skins%2Fvector%2Fimages%2Fdocument-icon.svg). Note how the values of '789.086' and '693.486' were preserved in spite of the 'translate(-783.57141,-687.36218)' transform supposedly being applied.
",MatmaRex,2014-11-04 14:41:19
182,2014-11-04 14:41:19,"Fixed in https://github.com/svg/svgo/commit/10146b5498e0cfd16f51eb28cb9963e064703235
",GreLI,2014-11-04 14:41:19
181,2014-02-06 00:28:05,"The following SVG:

<S_CODE_TOKEN>

is converted to:

<S_CODE_TOKEN>

`stroke-width` in the first path (1pt) is converted to `NaN`. 1px stroke-width is converted to 0.4.
",jgonera,2014-11-02 22:15:13
181,2014-10-08 18:54:26,"Get this same issue.
",brunowego,2014-11-02 22:15:13
180,2014-01-31 05:14:04,"Added Sketch for Mac's namespace to the list of xmlns that get expunged by removeEditorsNSData plugin.

Thanks!
",dhoulb,2014-01-31 11:32:59
180,2014-05-21 16:32:12,"@deepsweet could you push a new version of svgo on npm that integrates these changes?
",pgherveou,2014-01-31 11:32:59
180,2014-06-25 14:57:46,"@deepsweet Bump. I would appreciate this getting on npm greatly too :) 
",rasmusfl0e,2014-01-31 11:32:59
179,2014-01-29 02:51:44,"This seem to be missing from d8cf17d.
",AluisioASG,2014-08-02 11:28:04
179,2014-03-26 15:28:03,"hey @deepsweet 

is it possible to merge that into the next release?
otherwise the removeTitle plugin is not working properly
",bennyschudel,2014-08-02 11:28:04
179,2014-07-16 16:04:21,"I would actually argue against removing titles by default, [for accessibility reasons](http://www.sitepoint.com/tips-accessible-svg/).
",nelsonpecora,2014-08-02 11:28:04
179,2014-07-16 16:13:54,"@yoshokatana: It's already [disabled by default](https://github.com/svg/svgo/blob/master/plugins/removeTitle.js#L5).  But without this, one can't even enable it manually (see #215).
",AluisioASG,2014-08-02 11:28:04
179,2014-07-17 20:50:04,"Ahhh, roger. In that case, :+1: 
",nelsonpecora,2014-08-02 11:28:04
178,2014-01-28 19:02:17,"<S_CODE_TOKEN>

Though you picked the second fastest function in the universe, [Acen's is slightly faster](http://jsperf.com/rgbtohex/8), &[works perfectly](http://jsbin.com/UPUmaGOc/2/edit).

Normally I would make a PR, but seems you are already [playing](https://github.com/svg/svgo/issues/175#issuecomment-33474981) with that code.
",tomByrer,2015-03-22 15:52:30
177,2014-01-28 15:37:47,"I have large file with about 44000 lines and 9.1mb in total size.

iMac:frontendEngine voronchuk$ svgo coolfarmers.svg 
iMac:frontendEngine voronchuk$ svgo coolfarmers.svg 

It just quits without any errors... any suggestions how to resolve that?

Small SVG files are converted without troubles.
",Voronchuk,2016-02-23 15:59:39
177,2014-02-19 18:04:29,"Same issue here , have an SVG with about 6,878 lines and it just quits without any errors. 
![test svg change](https://f.cloud.github.com/assets/2736635/2209753/2726ae86-9990-11e3-8e7e-a52d72ab1981.png) . Please change png extension back to svg. Github doesn't allow you yo upload a file with svg extension :+1: 
",bitclaw,2016-02-23 15:59:39
177,2016-01-03 09:47:50,"It would be helpful if you could provide such example files. Please, don't attach images to Github, since it doesn't support SVG.
",GreLI,2016-02-23 15:59:39
177,2016-10-28 04:15:32,"Hi @GreLI 
I'm also struggling with large SVG files. Previously I used 0.5.0 which was able to handle my large SVG files (30-40MB) in 30-50 seconds. However, later versions (since 0.5.1) it would be just stuck there. It took too long to wait so I didn't see any error. On the other hand, the release notes of 0.5.1 is missing. Would you please point out what have been changed since 0.5.0?
",huantingchen,2016-02-23 15:59:39
177,2016-10-28 14:57:04,"@huantingchen you can see the changelog for v0.5.1 in [CHANGELOG.md](https://github.com/svg/svgo/blob/master/CHANGELOG.md#---051--30032015). There was added a check for intersections in `mergePaths` plugin and since it has O(n·log(n)) complexity it could slow down the process. Try disabling it.
",GreLI,2016-02-23 15:59:39
177,2016-10-28 15:13:29,"@GreLI Thanks for pointing it out. Just tried and it worked well.
",huantingchen,2016-02-23 15:59:39
176,2014-01-24 19:20:26,"By default any double quotes `""` withing a `<script>` element are converted to `&quot;`, increasing the size of the resulting file.
",Tyriar,
176,2015-09-16 13:53:55,"Same for `<style>` element and for single quote `'` which is encoded as `&apos;`
",icek,
176,2015-09-17 21:05:05,":+1: I have the same problem as @icek with single quote mangling in `<style>` :

<S_CODE_TOKEN>
",MadLittleMods,
176,2016-03-22 18:16:36,"+1 this is happening with quotes in a `tspan` as well.
e.g.

**input**

<S_CODE_TOKEN>

**output**

<S_CODE_TOKEN>
",shaneparsons,
175,2014-01-21 14:01:14,"I expect the following colors to be converted to a more concise form:
- `rgb(86.27451%,86.666667%,87.058824%)` to `#DCDDDE`
- `rgb(100%,100%,100%)` to `#FFF`
- etc.

This is the SVG output from Cairo (and in turn RSVG library). Right now I'm handling it with a regular expression; not as pretty as it could be:

<S_CODE_TOKEN>
",walling,2015-03-22 15:52:30
175,2014-01-28 10:16:48,"Improving on great idea: shorter, not too slower due to removing divide, only [semi-tested](https://github.com/GoalSmashers/clean-css/blob/master/lib/colors/long-to-short-hex.js)

<S_CODE_TOKEN>
",tomByrer,2015-03-22 15:52:30
175,2014-01-28 12:40:35,"@tomByrer, thanks for the improvements. I'll use it.

I hope it can be implemented directly in the SVGO optimizations.
",walling,2015-03-22 15:52:30
175,2014-01-28 12:45:54,"thanks, I'll take a look.
",deepsweet,2015-03-22 15:52:30
175,2014-01-28 17:22:57,"> I hope it can be implemented directly in the SVGO optimizations.

Needs editing to conform to [existing function](https://github.com/svg/svgo/blob/master/plugins/convertColors.js), or else I would have sent in PR already. :)
",tomByrer,2015-03-22 15:52:30
175,2015-03-22 15:53:03,"Actually, specification defines only integers in `rgb()` function, but done.
",GreLI,2015-03-22 15:52:30
174,2014-01-18 23:04:42,"I'm trying the following command but it looks like it doesn't do anything :(

<S_CODE_TOKEN>

I remember some versions behind it was working normally, but not anymore..
",lipis,2015-06-21 15:34:19
174,2014-01-18 23:40:55,":scream_cat: 
",deepsweet,2015-06-21 15:34:19
174,2014-07-20 09:52:40,"+1 I don't know what I'm doing wrong...
",jaydenseric,2015-06-21 15:34:19
174,2014-10-03 18:42:05,"Doesn't work for me, either, in Windows:

`svgo --folder src\content\svg`

It then lists the full folder path, then nothing.
",nicholashead,2015-06-21 15:34:19
174,2014-10-17 20:17:07,"This option as of 10/17 using v0.4.5 on Mac OS X 10.9.5 is broken using all the following commands above.
",grayghostvisuals,2015-06-21 15:34:19
174,2014-10-17 20:19:04,"Note that thanks to #228 when you specify the output folder it works.
",GreLI,2015-06-21 15:34:19
174,2014-10-17 20:34:19,"@GreLI 
Mind showing me what this command looks like?
",grayghostvisuals,2015-06-21 15:34:19
174,2014-10-17 20:37:16,"just as simple as

<S_CODE_TOKEN>
",GreLI,2015-06-21 15:34:19
174,2014-10-17 20:44:11,"@GreLI You get all the beers good sir! :beers:
",grayghostvisuals,2015-06-21 15:34:19
174,2014-10-18 09:47:29,"@GreLI Yes.. but it used to work without specifying the output folder.. as it works with a single file and it overrides if you don't specify the output..
",lipis,2015-06-21 15:34:19
174,2015-06-21 15:34:19,"Looks fine for now. Try the latest version of svgo and may be node.js.
",GreLI,2015-06-21 15:34:19
173,2014-01-13 20:44:24,"Been working on _gulp-svgmin_ for people to use as part of a gulp build process, this just adds a link to the repository in the README.

http://gulpjs.com/
",ben-eb,2014-01-13 20:48:37
173,2014-01-13 20:48:31,"wow, thanks!
especially for the russian one :)
",deepsweet,2014-01-13 20:48:37
172,2014-01-11 17:16:32,"Fixing default attribute values remove check for deep inheritance.
And removing useless overrides with the same value as inherited, for example:

<S_CODE_TOKEN>

->

<S_CODE_TOKEN>
",silentroach,2014-01-11 18:18:39
172,2014-01-11 17:17:28,"[![Coverage Status](https://coveralls.io/builds/433551/badge)](https://coveralls.io/builds/433551)

Coverage remained the same when pulling **7053bea6961be2b888984dba84a76cf23b3e05db on silentroach:feature-inheritance-analyzis** into **a4de9886afcc37d2b76d76cf62b67f920ef31ce8 on svg:master**.
",coveralls,2014-01-11 18:18:39
171,2014-01-11 00:13:41,"Hello, first of all thank you for this great tool! Second, and kinda newbie question, but how does one create a config file?
I created config.yml file:

<S_CODE_TOKEN>

and put it beside my .svg images, and run in terminal:

<S_CODE_TOKEN>

and can't get decimal rounding to 1 point. Am I missing something obvious, or completely missed the point? Can someone point me in the right direction?
",vedranjaic,2015-01-19 16:11:11
171,2014-11-05 17:25:32,"I'd also be interested in understanding how to set the floatPrecision. Thanks!

Update: There should be a colon after cleanupNumericValues.
",BlakePetersen,2015-01-19 16:11:11
171,2014-11-05 20:11:42,"Take a look on [.svgo.yml](https://github.com/svg/svgo/blob/master/.svgo.yml). To set float precision you need to change from

<S_CODE_TOKEN>

to

<S_CODE_TOKEN>

Note, that there is several plugins that have this option.
",GreLI,2015-01-19 16:11:11
171,2014-11-05 23:23:45,"@GreLI Thanks so much for the quick response! After taking a look at the docs, things made much more sense and I was able to get everything working correctly. 

To your point that several plugins use this option, my issue was actually with the convertPathData plugin, so good call on keeping an eye out for that.
",BlakePetersen,2015-01-19 16:11:11
171,2014-11-05 23:26:23,"No problem! There is an issue about cli-option #99, but no progress yet.
",GreLI,2015-01-19 16:11:11
171,2016-07-27 08:52:16,"Thanks @GreLI, you saved my time. List of all related plugins in my config here:

<S_CODE_TOKEN>
",hayatbiralem,2015-01-19 16:11:11
171,2016-07-27 12:58:39,"FYI, there is `--precision` option that does the same added in v.0.5.1. The only exceptions are transforms—because multiplication requires more presision.
",GreLI,2015-01-19 16:11:11
171,2016-07-27 13:24:45,"Thanks again! Somehow I missed it but also I have trouble with it :(

I try to use global precision param as 2 with [gulp-svgmin](https://github.com/ben-eb/gulp-svgmin) and [gulp-svgo](https://github.com/corneliusio/gulp-svgo) but both uses with default precision 3 in process. My config after your advice is here:

<S_CODE_TOKEN>

What am I doing wrong?
",hayatbiralem,2015-01-19 16:11:11
171,2016-07-27 13:26:29,"Actually [default config file](https://github.com/svg/svgo/blob/master/.svgo.yml) has no global precision param, that's interesting.
",hayatbiralem,2015-01-19 16:11:11
171,2016-07-27 14:36:44,"It's actually `floatPrecision` in config like plugins parameter.
",GreLI,2015-01-19 16:11:11
171,2016-07-27 14:42:13,"It's alive! Thank you very much for your time :)
",hayatbiralem,2015-01-19 16:11:11
171,2016-08-15 15:24:33,"Can you please add this to the readme? Took me a while to find it 🐌 
",axe312ger,2015-01-19 16:11:11
170,2014-01-09 07:28:28,"Found a bug in my last pull-request, sorry :[
",silentroach,2014-01-11 17:18:31
170,2014-01-09 07:29:37,"[![Coverage Status](https://coveralls.io/builds/427680/badge)](https://coveralls.io/builds/427680)

Coverage remained the same when pulling **e3dc7844bcac8da05fa65ee1f8fc2f00dcc00d09 on silentroach:bugfix-inheritance-check** into **a4de9886afcc37d2b76d76cf62b67f920ef31ce8 on svg:master**.
",coveralls,2014-01-11 17:18:31
170,2014-01-11 17:18:31,"Rewritten in #172 
",silentroach,2014-01-11 17:18:31
169,2014-01-09 07:21:25,"Found a bug in my last pull-request, sorry :(
",silentroach,2014-01-09 07:22:03
169,2014-01-09 07:22:03,"Етитская вошь, лишнего запуллреквестил
",silentroach,2014-01-09 07:22:03
168,2014-01-08 19:48:38,"Reproducible with the following code.

<S_CODE_TOKEN>

Output:

<S_CODE_TOKEN>

Desired output:

<S_CODE_TOKEN>

In that case, the fill shadows the fill performed by the `<g>`, which has the effect of making the text invisible, when it should be black.

(Obviously, this is a contrived example given as the reduced test-case of a larger image.)
",espadrine,2014-01-08 20:15:40
168,2014-01-08 19:54:06,"@silentroach, is this was fixed in #165/#166 as well? if so, it will be available in the next patch version.
",deepsweet,2014-01-08 20:15:40
168,2014-01-08 19:57:33,"@deepsweet That's great news! (The above test case is on the latest v0.4.3.)
",espadrine,2014-01-08 20:15:40
168,2014-01-08 19:58:57,"Maybe it would nevertheless make sense to add a unit test for the above request
",staabm,2014-01-08 20:15:40
168,2014-01-08 20:04:21,"@deepsweet yep, didn't see this issue
@staabm added in  #165 
",silentroach,2014-01-08 20:15:40
168,2014-01-08 20:15:40,"ok :) v0.4.4 is coming soon.
",deepsweet,2014-01-08 20:15:40
167,2014-01-08 19:13:06,,silentroach,2014-01-08 19:15:17
166,2014-01-08 19:09:27,,silentroach,2014-01-08 19:14:53
166,2014-01-08 19:09:53,"Previous pull-request improved :}
",silentroach,2014-01-08 19:14:53
165,2014-01-08 18:51:26,"Overriden attributes in group content may have default values and it is not great to remove them.
",silentroach,2014-01-08 19:02:53
165,2014-01-08 18:52:32,"but removeUnknownsAndDefaults will be a little bit slower
",silentroach,2014-01-08 19:02:53
165,2014-01-08 19:00:54,"[![Coverage Status](https://coveralls.io/builds/426468/badge)](https://coveralls.io/builds/426468)

Coverage remained the same when pulling **97678a730466b5dcf7fa3881da454ea270266302 on silentroach:bugfix-remove-inherited-defaults** into **2428fcd7fc4bd8c06ef9b801d226a78d3fd9bc5c on svg:master**.
",coveralls,2014-01-08 19:02:53
164,2014-01-08 17:30:17,,silentroach,2014-01-08 17:35:25
163,2014-01-02 19:05:44,"Example path part:

<S_CODE_TOKEN>

It will be stripped to:

<S_CODE_TOKEN>

So it will be crashed (with no output) in convertPathData.js::collapseRepeated:

<S_CODE_TOKEN>

Full example to reproduce:

<S_CODE_TOKEN>
",silentroach,2014-01-02 19:54:40
163,2014-01-02 19:07:01,"[![Coverage Status](https://coveralls.io/builds/413728/badge)](https://coveralls.io/builds/413728)

Coverage remained the same when pulling **4c4ced858d2506c95b88c04cc885d34d74e34b0f on silentroach:bugfix-collapseRepeated-z** into **6f13d62796a25e97c817020de55ebe39863db52a on svg:master**.
",coveralls,2014-01-02 19:54:40
163,2014-01-02 19:54:58,":+1: 
",deepsweet,2014-01-02 19:54:40
163,2014-01-02 20:00:44,"Thanks :}
",silentroach,2014-01-02 19:54:40
162,2013-12-23 23:19:13,"So I was trying to normalise this collection of flags and by running the `svgo` on them got a few broken ones... https://github.com/lipis/flag-icon-css

Here are some obvious examples that you can simply verify (but more likely there are more errors):

https://github.com/lipis/flag-icon-css/blob/master/flags/4x3/cn.svg
https://github.com/lipis/flag-icon-css/blob/master/flags/4x3/gr.svg
https://github.com/lipis/flag-icon-css/blob/master/flags/4x3/cn.svg
https://github.com/lipis/flag-icon-css/blob/master/flags/4x3/bj.svg
https://github.com/lipis/flag-icon-css/blob/master/flags/4x3/uy.svg

Maybe the original ones are totally screwed but the `svgo` should be able to remove the crap without destroying the file.. :D
",lipis,2015-01-25 20:27:39
162,2014-04-07 13:49:46,"I've noticed some other SVG files I d/l from Wikipedia are broken after the default SVGO conversion.  IIRC I got a more usable result after turning off some of the optimizations.
",tomByrer,2015-01-25 20:27:39
162,2014-11-02 21:49:59,"Unfortunately, links are dead.
",GreLI,2015-01-25 20:27:39
162,2014-11-02 21:55:27,"I'll update with the working one..
",lipis,2015-01-25 20:27:39
162,2014-11-02 21:57:39,"@GreLI The original repo was deleted but the actual flags are in one of my repos now.. I updated the links
",lipis,2015-01-25 20:27:39
162,2014-11-04 18:21:53,"So this is fixed?! Looking forward to test it... did you make a new release?!
",lipis,2015-01-25 20:27:39
162,2014-11-04 21:35:49,"Just made a release. Enjoy!
",GreLI,2015-01-25 20:27:39
162,2014-11-04 21:57:10,"For most of the flags it worked perfectly.. for now I just found this:

Here is the original:
https://dl.dropboxusercontent.com/u/15234/va-orig.svg

and after pretty optimising it became like this:
https://dl.dropboxusercontent.com/u/15234/va.svg
",lipis,2015-01-25 20:27:39
162,2014-11-04 21:58:12,"Nothing is perfect. I'll look on this later.
",GreLI,2015-01-25 20:27:39
162,2014-11-04 21:59:18,"Also this one is breaking:
https://github.com/lipis/flag-icon-css/blob/master/flags/4x3/py.svg
",lipis,2015-01-25 20:27:39
162,2014-11-04 22:03:50,"@GreLi sure man... and I really appreciate the responses.. just trying to help :) most of them are perfect... finally they will be optimised...!!!
",lipis,2015-01-25 20:27:39
162,2014-11-04 22:11:26,"Yes, thank you! It really helps to hunt bugs.
",GreLI,2015-01-25 20:27:39
162,2015-04-22 12:11:29,"Some minor issues are still present when optimizing flags `py.svg` and `va.svg`.
",flekschas,2015-01-25 20:27:39
162,2015-04-22 16:11:40,"Probably, transforms precision issue. See #334.
",GreLI,2015-01-25 20:27:39
161,2013-12-23 12:41:58,"Hi there!

I have a file `safe.svg` listed below
`<svg width=""14px"" height=""16px"" xmlns=""http://www.w3.org/2000/svg""><g fill=""none"" fill-rule=""evenodd""><path fill=""#000000"" d=""M7.00314928,16 C0.489889272,13.3604037 0.036994394,8.51753475 0.0055026725,4.00506592 L0,2 C6.07067871,2 6.05371094,0.802368164 7,0 C8.02197266,0.802368191 8.02526855,2 14,2 L14,4.00506592 C13.9661701,8.51753475 13.513479,13.3604037 7.00314928,16 Z M6.15,9.1596 L11.1,4 L12,4.9 L6.15,12 L3,7.5 L3.9,6.6 L6.15,9.1596 Z""></path></g></svg>`

its a shield with checked icon on it.

`svgo safe.svg` produced junk svg file, updated svgo to the last version and tried one more time, nothing changed.

Could you please fix this
",shuhrat,2015-01-19 16:13:16
161,2014-01-08 18:53:28,"This pull-request will fix just a part of your problem
",silentroach,2015-01-19 16:13:16
161,2014-01-13 15:54:31,"+1 just got a broken file.
",ericdfields,2015-01-19 16:13:16
161,2014-01-13 15:56:01,"Seems like it is cause of fill-rule evenodd stripped.
",silentroach,2015-01-19 16:13:16
161,2015-01-19 16:13:16,"Fixed in [v0.5.0](https://github.com/svg/svgo/releases/tag/v0.5.0) by disabling `removeUselessStrokeAndFill` by default.
",GreLI,2015-01-19 16:13:16
160,2013-12-19 11:59:56,"`node -v v0.10.22` `svgo -v 0.4.1`

<S_CODE_TOKEN>
",azproduction,2013-12-19 12:02:40
160,2013-12-19 12:00:41,"#157 
",deepsweet,2013-12-19 12:02:40
159,2013-12-19 11:55:54,"`0.4.1`

Original

<S_CODE_TOKEN>

Actual

<S_CODE_TOKEN>

Expected

<S_CODE_TOKEN>
",azproduction,2014-01-08 17:35:26
159,2014-01-08 17:24:52,"What about accessibility and blind people? It is for accessibility, though.
",silentroach,2014-01-08 17:35:26
159,2014-01-08 17:29:01,"Some SVG elements are inaccessible or decorative. This feature can be optional.
",azproduction,2014-01-08 17:35:26
158,2013-12-18 21:52:40,"Below are visually identical SVGs. The top one is two paths, and looks the same both before and after `svgo`. The second has the two paths combined using Inkscape's ""Combine Paths"" option, and it comes out of `svgo` very different than it goes in.

_This was the simplest test case I could get to work, boiled down from a larger logo._
### Two separate paths: svgo works correctly

<S_CODE_TOKEN>
### One combined path: svgo does not work correctly

<S_CODE_TOKEN>
",bryanburgers,2014-08-02 12:05:40
158,2013-12-31 15:10:59,"Follow up: here's an even more simplified example. It seems to distort if there's an unclosed (no `z`) curve, and then a path that uses absolute positions.

### Closed curve, absolute positions: _correct_

<S_CODE_TOKEN>

### Unclosed curve, absolute positions: _FAIL_

<S_CODE_TOKEN>

### Unclosed curve, relative positions: _correct_

<S_CODE_TOKEN>
",bryanburgers,2014-08-02 12:05:40
157,2013-12-16 21:55:46,"Set version on js-yaml to suppress deprecation warning output.

https://github.com/svg/svgo/issues/156
",okize,2013-12-19 12:02:40
157,2013-12-16 22:01:35,"[![Coverage Status](https://coveralls.io/builds/386195/badge)](https://coveralls.io/builds/386195)

Coverage remained the same when pulling **d4288218a4c2be71cd181bbb8801affb5c52aeac on okize:patch-1** into **518fcbf23ef78e6920a10925a0d92faded01b7c0 on svg:master**.
",coveralls,2013-12-19 12:02:40
157,2013-12-19 11:49:28,"+1 just had to do this manually myself
",Enideo,2013-12-19 12:02:40
156,2013-12-16 21:45:45,"When running SVGO in a terminal (or requiring svgo as a module in a node cli app) the following deprecation warning is being displayed:

""Direct yaml files load via require() is deprecated! Use safeLoad() instead.""

This is the result of the recent release of js-yaml v3.0:

https://github.com/nodeca/js-yaml/commit/9c10316ddf68c686f396a9c8680db048d423245d#diff-168726dbe96b3ce427e7fedce31bb0bc

the SVGO package.json doesn't have a version specified for js-yaml so the quickest fix for this would be to use ""js-yaml"": ""2.1.x"", until the deprecation instructions can be met.
",okize,2014-01-02 18:24:42
155,2013-12-03 02:28:42,"lcov.info's presence (in the npm package) confuses Drupal 7, which interprets any .info file inside of a Drupal theme or Drupal module to be a Drupal sub-theme or Drupal sub-module.

Drupal themes are increasingly using grunt and grunt plugins, and this npm package is used by at least grunt-grunticon.

This issue manifests itself in Drupal as a menu rebuild failing when clearing caches; e.g. ""PDOException: SQLSTATE[23000]: Integrity constraint violation: 1048 Column 'title' cannot be null: INSERT INTO {menu_router} ....""
",adamdicarlo,2013-12-11 18:14:13
155,2013-12-03 02:29:35,"[![Coverage Status](https://coveralls.io/builds/354481/badge)](https://coveralls.io/builds/354481)

Coverage remained the same when pulling **a6ba68d46188eb61f9ec7e3ea445cc3b4f35e93e on adamdicarlo:ignore-lcov.info** into **c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master**.
",coveralls,2013-12-11 18:14:13
154,2013-11-29 11:42:20,"for bem.info
",sipayRT,2013-11-29 11:43:18
153,2013-11-29 10:25:37,"The plugin converts some basic shapes to path. It's not only shorter, but paths can be further optimized with merging to other paths and other techniques.
",GreLI,2014-01-02 18:23:54
153,2013-11-29 10:26:36,"[![Coverage Status](https://coveralls.io/builds/348433/badge)](https://coveralls.io/builds/348433)

Coverage remained the same when pulling **389368c2c9fc314b47ac58fb78b3682bf747ecca on GreLI:master** into **c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master**.
",coveralls,2014-01-02 18:23:54
153,2014-01-13 18:17:39,"Yep, it doesn't make sense to convert circles or rectangles with rounded  
corners — it will only become larger.
",GreLI,2014-01-02 18:23:54
153,2014-01-13 18:19:18,"@GreLI Thanks for the answer I found out myself so I deleted my comment. In case anybody is wondering it was ""Is it correct to assume circles to get converted to paths?""
",Enome,2014-01-02 18:23:54
153,2014-01-13 18:27:46,"I don't get the question. It's possible to get circles converted to paths. E.g. if you combine it with other shape in editor (they don't have to intersect). But usually it makes sense to separate circles from paths for optimization. Unfortunately, it's complex enough task to do automatically in case if a shape consists not only of circle.
",GreLI,2014-01-02 18:23:54
153,2014-01-13 18:38:50,"@GreLI argh, I meant ""don't get converted to paths"". My svg knowledge is a bit limited but I thought at first this plugin would convert my complex icons into one path. After checking the source code of the plugin I now understand that it's converting each shape into a path to create a smaller svg file. Sorry for the confusion.

The reason why I wanted one path is is because the MVC framework I am using makes it cumbersome to insert multiple shapes and paths.
",Enome,2014-01-02 18:23:54
153,2014-01-13 18:47:11,"@Enome, well, then yes, svgo will not convert circles or ellipses to anything else (at the current state at least) and unlikely will do. I can only suggest you to use an editor for combining shapes into one path.
",GreLI,2014-01-02 18:23:54
152,2013-11-26 13:06:20,,ikokostya,2013-11-26 14:05:46
152,2013-11-26 14:05:53,"thanks.
",deepsweet,2013-11-26 14:05:46
152,2014-01-15 14:44:19,"This is now merged into the beminfo branch, could you merge it into master too?
",leonderijke,2013-11-26 14:05:46
152,2014-01-15 14:55:00,"oops.
ok.
",deepsweet,2013-11-26 14:05:46
151,2013-11-26 10:24:16,"<S_CODE_TOKEN>

Original:
![slice 1](https://f.cloud.github.com/assets/328125/1621035/d8ee58a2-5684-11e3-84d6-9cbb5f46ff98.png)

<S_CODE_TOKEN>

After svgo:
![new](https://f.cloud.github.com/assets/328125/1621037/e20cd15c-5684-11e3-88c2-ca0083654151.png)
",ikokostya,2015-02-15 14:33:13
151,2014-01-24 19:17:09,"I think svgo is expected to break many images by default, you need to disable certain plugins that are breaking the image. I found `mergePaths` particularly destructive on my handmade SVGs so I disabled it. Inspecting the optimized file with a text editor or Chrome should give hints as to why it broke.
",Tyriar,2015-02-15 14:33:13
151,2015-02-15 14:33:13,"Actually it's ok now.
",GreLI,2015-02-15 14:33:13
151,2015-07-17 22:18:54,"i'm experiencing similar issues with sketch exported .svg files, sorry if i misunderstand, but what exactly is `ok now`?
",pruett,2015-02-15 14:33:13
151,2015-07-17 22:20:43,"Yes, such a bugs were fixed in v0.5.1. Are you using a recent version?
",GreLI,2015-02-15 14:33:13
151,2015-07-18 17:00:31,"i am, i'll open another ticket and provide detailed information and reference this issue. thanks @GreLI 
",pruett,2015-02-15 14:33:13
150,2013-11-21 15:19:48,,sipayRT,2013-11-21 16:12:01
149,2013-11-21 14:58:43,,sipayRT,2013-11-21 15:19:58
149,2013-11-21 15:00:43,"[![Coverage Status](https://coveralls.io/builds/332271/badge)](https://coveralls.io/builds/332271)

Coverage remained the same when pulling **f3454a094581bbab489f17407505576789e0140b on sipayRT:bem-info-data** into **c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master**.
",coveralls,2013-11-21 15:19:58
149,2013-11-21 15:13:41,"[![Coverage Status](https://coveralls.io/builds/332296/badge)](https://coveralls.io/builds/332296)

Coverage remained the same when pulling **433bbe6da2f12e0af586fc43ae66bbadadd3b139 on sipayRT:bem-info-data** into **c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master**.
",coveralls,2013-11-21 15:19:58
149,2013-11-21 15:18:09,"[![Coverage Status](https://coveralls.io/builds/332310/badge)](https://coveralls.io/builds/332310)

Coverage remained the same when pulling **2ac3f9fa905699c18358d473db5e0d4089e9be3d on sipayRT:bem-info-data** into **c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master**.
",coveralls,2013-11-21 15:19:58
149,2013-11-21 15:21:15,"[![Coverage Status](https://coveralls.io/builds/332317/badge)](https://coveralls.io/builds/332317)

Coverage remained the same when pulling **222151772d8a6eef2f384a1889303b7af915436f on sipayRT:bem-info-data** into **c7968c0b506acf2bfceb491a1a22ee017c5485c8 on svg:master**.
",coveralls,2013-11-21 15:19:58
148,2013-11-18 19:45:56,"I have noticed that SVGs loose their dashed borders or borders with more than 1px weight when they are run through svgo.

![comparison png 2013-11-18 13-43-56](https://f.cloud.github.com/assets/446260/1566119/c5348ac6-5089-11e3-85cb-1babf639353a.png)

You can use [this](https://dl.dropboxusercontent.com/u/9288909/downloads/border-svg.svg.zip) SVG to test with.

Please let me know if you need an other detail from me.
",manovotny,2014-11-04 20:40:52
148,2013-11-18 19:46:55,"I am certainly no expert in SVGs, but I wonder if these issues / pull requests (#135 and #145) could be related.
",manovotny,2014-11-04 20:40:52
148,2014-11-02 12:35:48,"I think the problem here is that the [removeUselessStrokeAndFill plugin](https://github.com/svg/svgo/blob/master/plugins/removeUselessStrokeAndFill.js) is not taking into account the fact that ['stroke'](http://www.w3.org/TR/SVG/painting.html#StrokeProperty) is inherited.

removeUselessStrokeAndFill iterates through all elements and removes the stroke if `!item.hasAttr('stroke') || item.hasAttr('stroke-opacity', '0') || item.hasAttr('stroke-width', '0')` (in other words ""if there isn't a 'stroke' attribute, the stroke opacity is 0, or the stroke width is 0"").  The initial value of 'stroke' is none, so this condition would make sense as long as the inherited 'stroke' value is properly propagated from parents to children or is otherwise considered.

In Michael's test case, the stroke on the two inner white circles is inherited from the `g`#borders element.

Here is another test case:

<S_CODE_TOKEN>

The two `path` elements' 'stroke' attribute value is inherited from the enclosing `g` element.

Disabling the removeUselessStrokeAndFill plugin via a `--disable=removeUselessStrokeAndFill` command-line argument fixes the problem for Michael's and my test cases.
",dtrebbien,2014-11-04 20:40:52
148,2014-11-02 15:45:39,"Yep, you are totally right. 
",GreLI,2014-11-04 20:40:52
148,2014-11-04 20:40:52,"I've disabled the plugin by default.
",GreLI,2014-11-04 20:40:52
148,2014-11-05 12:08:27,"Is there a different ticket for fixing the removeUselessStrokeAndFill plugin?
",dtrebbien,2014-11-04 20:40:52
148,2014-11-05 12:15:17,"Nope, I keep it in my mind.
",GreLI,2014-11-04 20:40:52
147,2013-11-18 09:37:17,"In lint mode SVGO should not modify source file, only exit with non-zero code if file is not optimized.
",mishanga,
146,2013-11-17 17:03:31,"I'm guessing this might be some problem with my permissions/setup but after installing svgo `$ sudo npm install -g svgo` im getting the following:

<S_CODE_TOKEN>
",blg002,2013-11-18 15:07:18
146,2013-11-17 18:15:21,"this is definitelly problem with your setup, you must have a path to NPM's binaries in your system `PATH` so bash might find them.
",deepsweet,2013-11-18 15:07:18
146,2013-11-18 15:07:18,"Yeah, i guess i had installed node some time ago with homebrew and that was causing issues (according to issues i found on stackoverflow)? For posterities sake: doing a `brew uninstall node` then using the installer at nodejs.org fixed all my woes. 
",blg002,2013-11-18 15:07:18
145,2013-11-14 21:46:35,"After applying svgo to an svg, I noticed my polylines no longer contained the `stroke-dasharray` attribute.
",dgouldin,2014-11-04 20:41:11
145,2014-10-28 22:33:04,"Same issue here, disabling removeUselessStrokeAndFill plugin helped.
",marszall87,2014-11-04 20:41:11
145,2014-10-28 22:35:20,"Yep, it doesn't take in account when stroke attribute is inherited. I think, I'll disable it by default until the issue can be resolved.
",GreLI,2014-11-04 20:41:11
145,2014-11-04 20:41:11,"I've disable the plugin by default.
",GreLI,2014-11-04 20:41:11
144,2013-10-18 13:10:05,"Using svgo with default settings on eye.svg produces broken image (see attachment).
![svgo-fail](https://f.cloud.github.com/assets/407352/1360459/57188a8e-37f6-11e3-8cb1-130955f06f54.png)

Original `eye.svg`:

<S_CODE_TOKEN>
",i2r,2014-08-02 14:24:16
144,2013-10-18 13:13:22,"SVGO converts `S0,6.62,0,6.62` to line assuming that first control point coincide with starting point, but it's not true.
",alexeyten,2014-08-02 14:24:16
144,2013-10-30 18:17:22,"Here's how I fixed it:
https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md

You have to comment-out the plugin causing the issue (convertPathData):

------------------/usr/local/lib/node_modules/svgo/.svgo.yml--------------------
...
- moveElemsAttrsToGroup
- collapseGroups
- moveGroupAttrsToElems
- #convertPathData
- convertTransform
- removeEmptyAttrs
- removeEmptyContainers
- mergePaths
- cleanupIDs
- removeUnusedNS
- transformsWithOnePath
- sortAttrs
",athanclark,2014-08-02 14:24:16
144,2013-10-30 19:02:44,"It's possible to disable only converting curves into lines in order to benefit from other path transformations.
",alexeyten,2014-08-02 14:24:16
144,2014-01-29 00:25:06,"I'm seeing this behaviour as well. Removing convertPathData (as @athanclark notes) does resolve this issue for us as well, however at the cost of that optimization obviously, which 90% of the time does a great job.

### Before

<S_CODE_TOKEN>

### After (Defaults - truncated)

<S_CODE_TOKEN>
",LeeGDavis,2014-08-02 14:24:16
144,2014-02-03 17:10:12,"For the case that I was running into disabling `straightCurves` of `convertPathData` works around the issue. 
",LeeGDavis,2014-08-02 14:24:16
143,2013-10-10 02:18:50,"the difference before and after call svgo(with default config) is here:
http://wgjtyu.github.io/svgo-issues/
",wgjtyu,2014-11-04 15:08:42
142,2013-10-09 18:02:32,"Was getting the following error when encountering an SVG containing a font:

Warning: Cannot read property 'attrs' of undefined Use --force to continue.

Have now configured task to skip files in font folder, but might be nice to fail gracefully by skipping the file and moving on to the next
",benedfit,2015-02-05 19:12:34
142,2013-10-23 22:55:58,"[The other issue I raised](https://github.com/svg/svgo/issues/140) may or may not be directly related. It was observed when attempting to compress an SVG font file.
",joeyhoer,2015-02-05 19:12:34
142,2015-02-05 19:12:34,"Closing as haven't hit this issue in a while
",benedfit,2015-02-05 19:12:34
141,2013-10-03 23:58:09,"for clarity, because that seems to be all it does.
",waldyrious,
140,2013-09-24 20:42:10,"While optimizing [an SVG font file](https://github.com/roots/roots/blob/master/assets/fonts/glyphicons-halflings-regular.svg), I ran across an interesting issue with the encoding of hex entities.

All of the hex entities were converted to their unicode counterpart (a great optimization), however they were incorrectly encoded. For example, the hex entity `&#x1f525;` should have been converted to :fire:, but instead it was converted to ``. Upon further inspection, I concluded that the hex entity for the resulting character was `&#xf525;`.

It appears the the `1` has been stripped from the hex entity before it was converted, leading to an incorrect conversion.

Here is a test: `svgo -s ""<svg>&#x1f525;</svg>"" -o -`
",joeyhoer,2014-01-02 18:28:19
140,2014-01-02 15:20:34,"Astral plane chars are going to fail because it's calling String.fromCharCode on the parsed int, which only looks at the two right-most bytes.  What you want is for the string to be ""\ud83d\udd25"", with the surrogate pair split up.

I'd accept a patch that properly split up surrogate pairs before calling String.fromCharCode().

For example:

<S_CODE_TOKEN>
",isaacs,2014-01-02 18:28:19
140,2014-01-02 16:12:00,"Seems as if we both came to the same conclusion, you may want to move your comment over to [the other issue (in the sax project)](https://github.com/isaacs/sax-js/issues/97) since it's a little more pertinent there. I think the best solution would be to use the `String.fromCodePoint` method, which will need to be shimmed.

Anyhow, this seems to be an issue in [the XML/SVG parser](https://github.com/isaacs/sax-js), that is manifesting in some cases within SVGO.
",joeyhoer,2014-01-02 18:28:19
140,2014-01-02 16:23:23,"Oh, whoops, I commented on the wrong place :)  Will repost over there.
",isaacs,2014-01-02 18:28:19
140,2014-01-02 16:36:07,"Fixed by sax 0.6.0.  Thanks to @mathiasbynens for writing a String.fromCodePoint shim. 
",isaacs,2014-01-02 18:28:19
140,2014-01-02 16:38:48,"ok, thank you guys!
i'll update svgo soon.
",deepsweet,2014-01-02 18:28:19
139,2013-09-23 13:55:48,"When displaying a SVG inside an `<img>` tag inside IE9 & 10 and resizing it using CSS `width` & `height`, it is clipped instead of correctly resized. The [removeViewBox plugin](https://github.com/svg/svgo/blob/master/plugins/removeViewBox.js) causes this issue.

After optimization (broken):

<S_CODE_TOKEN>

Working in IE9/10 after restoring the `viewBox`:

<S_CODE_TOKEN>
#19 and #124 seem related.
",samuelvogel,2014-01-14 14:18:34
138,2013-09-10 14:56:17,,Beetle-ru,2016-08-25 19:51:43
138,2013-09-10 14:58:15,"[![Coverage Status](https://coveralls.io/builds/203197/badge)](https://coveralls.io/builds/203197)

Coverage increased (+1.13%) when pulling **8daeb086173c2915071e9c6807151c44c598185c on Beetle-ru:synchronousCall** into **6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master**.
",coveralls,2016-08-25 19:51:43
138,2013-09-13 07:47:28,"But why? O.o
It is better to make other things async. No?
",silentroach,2016-08-25 19:51:43
138,2013-09-13 10:05:19,"actually there is nothing async in svgo parts, so current async version is almost a fake async.
",deepsweet,2016-08-25 19:51:43
138,2013-09-13 10:07:58,"Tis not the reason to make it sync :)
",silentroach,2016-08-25 19:51:43
138,2016-08-25 19:51:43,"Way too outdated.
",GreLI,2016-08-25 19:51:43
137,2013-08-27 00:05:25,"Cases where there are multiple levels of groups with transforms would not push down to lower paths.

Made 'moveGroupAttrsToElems' also push transforms to 'group' and 'text' elements.

Admittedly 'text' should be optional (as it just drops the transform attribute on to the element).. may make a configurable list of elements to push transforms to.
",nathan-muir,2013-11-18 20:53:51
137,2013-08-27 00:06:37,"[![Coverage Status](https://coveralls.io/builds/179829/badge)](https://coveralls.io/builds/179829)

Coverage remained the same when pulling **402716a4b2d7e7683836ca66e1eecdcb6b88a16e on nathan-muir:moveGroupAttrsToElems-toSubgroups** into **6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master**.
",coveralls,2013-11-18 20:53:51
136,2013-08-26 23:59:34,"Quick test and fix for convertPathData when a path has movements in h or v in opposite directions-

eg:

<S_CODE_TOKEN>

would produce

<S_CODE_TOKEN>
",nathan-muir,2013-11-18 20:53:48
136,2013-08-27 00:00:44,"[![Coverage Status](https://coveralls.io/builds/179820/badge)](https://coveralls.io/builds/179820)

Coverage remained the same when pulling **d5a89f940a7874e3722ec4d539fb515be1a44cf4 on nathan-muir:convertPathData-isuse** into **6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master**.
",coveralls,2013-11-18 20:53:48
135,2013-08-26 23:55:45,"Tries to apply transforms to paths, even if they have a stroke.

Only applies the transform if:
- the transform does not affect scale
- OR the scale is uniform in both X & Y; ie, will not apply if skewed.

Probably a little naive (doesn't account for other stroke attributes), but useful in a lot of cases.
",nathan-muir,2013-11-18 20:53:44
135,2013-08-26 23:56:34,"[![Coverage Status](https://coveralls.io/builds/179813/badge)](https://coveralls.io/builds/179813)

Coverage remained the same when pulling **fbc58c75a37914663c2c8f4daa0d19ea121e3aab on nathan-muir:applyTransformToPathWithStroke** into **6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master**.
",coveralls,2013-11-18 20:53:44
134,2013-08-26 23:51:22,"Updated merge paths to join paths with all attributes the same (except ""d"").

Also joins paths that aren't closed (if both paths aren't closed).
",nathan-muir,2013-11-18 20:53:41
134,2013-08-26 23:52:16,"[![Coverage Status](https://coveralls.io/builds/179802/badge)](https://coveralls.io/builds/179802)

Coverage remained the same when pulling **35239bf83e094f7820a7a28812c0a21c8a91d251 on nathan-muir:mergPathsWithSameAttributes** into **6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master**.
",coveralls,2013-11-18 20:53:41
133,2013-08-26 03:01:36,"collapse group would merge transforms without respect for clipPath.
",nathan-muir,2013-11-18 20:53:37
133,2013-08-26 03:02:33,"[![Coverage Status](https://coveralls.io/builds/178079/badge)](https://coveralls.io/builds/178079)

Coverage remained the same when pulling **52ad6618103e9747e34a21b62c1c672fc113bf77 on nathan-muir:issue-132-collapseGroup-clipPath** into **6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master**.
",coveralls,2013-11-18 20:53:37
133,2013-11-18 20:53:37,"thank you.
",deepsweet,2013-11-18 20:53:37
132,2013-08-26 02:59:15,"Having an issue with clip-path & transforms on group level elements.

Merging transforms together from a child-group breaks the svg, eg:

<S_CODE_TOKEN>

yeilds an incorrect result as clip path #a does not have the scale transform applied

<S_CODE_TOKEN>

A possible solution, is to not merge groups in these cases:

<S_CODE_TOKEN>

Another possible solution, it could apply the transform to the clipPath as if it were a sub-element of the parent element:

<S_CODE_TOKEN>
",nathan-muir,2014-11-04 20:42:25
132,2013-08-26 03:02:59,"Created separate pull request as it only addresses the first possible solution; not merging groups in those conditions
",nathan-muir,2014-11-04 20:42:25
132,2013-10-03 18:56:20,":+1:  Running into this issue as well with this plugin. Would be nice to see this merged in.
",loginx,2014-11-04 20:42:25
131,2013-08-17 14:44:48,"Bohemian Coding’s Sketch (and maybe other software) adds an unnecessary moveTo command at the end of path definitions when exporting to SVG, which can be safely removed.
",iclanzan,2015-03-17 20:40:23
131,2013-09-19 09:02:15,"+1

I'm always manually removing these.
",peteboere,2015-03-17 20:40:23
131,2015-03-17 20:40:23,"Done in v0.5.0. It caused some bugs.
",GreLI,2015-03-17 20:40:23
130,2013-08-05 22:53:54,"The error thrown is >> ""TypeError: Cannot read property 'content' of undefined""

Ran into this while working on: https://github.com/filamentgroup/grunticon/issues/44

The linked restaurant.svg is a good example.

Thanks!
",jefflembeck,2015-01-27 13:10:02
130,2015-01-19 16:17:37,"Sorry, but I couldn't reproduce.
",GreLI,2015-01-27 13:10:02
129,2013-08-04 22:26:35,"Example path part:

<S_CODE_TOKEN>

It will be stripped to:

<S_CODE_TOKEN>

So it will be crashed (with no output) in convertPathData.js::collapseRepeated:

<S_CODE_TOKEN>

Full example to reproduce:

<S_CODE_TOKEN>
",silentroach,2014-01-02 18:29:31
129,2014-01-02 18:31:08,"чёрт, я вдруг решил удалить ветку `dev`, PR сам закрылся :) можешь переделать в `master`?
",deepsweet,2014-01-02 18:29:31
129,2014-01-02 18:32:32,"Я уж думал ты решил забить :)
Вечером сделаю пулл-реквест в мастер, спасиба
",silentroach,2014-01-02 18:29:31
129,2014-01-02 18:33:31,"и ещё, сделай по возможности тест какой-нибудь покороче, с path'ом не на пару экранов в ширину.
",deepsweet,2014-01-02 18:29:31
129,2014-01-02 18:34:43,"Окей, я просто на реальном примере сделал, чтобы показать что такие случаи существуют в реальной жизни
",silentroach,2014-01-02 18:29:31
128,2013-08-04 21:53:10,"Example path part:

<S_CODE_TOKEN>

It will be stripped to:

<S_CODE_TOKEN>

So it will be crashed (with no output) in convertPathData.js::collapseRepeated:

<S_CODE_TOKEN>

Full example to reproduce:

<S_CODE_TOKEN>
",silentroach,2013-08-04 22:26:31
128,2013-08-04 22:26:31,"Will squash it :]
",silentroach,2013-08-04 22:26:31
127,2013-08-04 21:24:07,"Example path part:

<S_CODE_TOKEN>

It will be stripped to:

<S_CODE_TOKEN>

So it will be crashed (with no output) in convertPathData.js::collapseRepeated:

<S_CODE_TOKEN>

Full example to reproduce:

<S_CODE_TOKEN>
",silentroach,2013-08-04 21:53:06
127,2013-08-04 21:26:31,"[![Coverage Status](https://coveralls.io/builds/144277/badge)](https://coveralls.io/builds/144277)

Coverage remained the same when pulling **5202de337d8d81c4d1374ae5752336ef260d8fe4 on silentroach:bugfix-collapseRepeated-closePath** into **6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master**.
",coveralls,2013-08-04 21:53:06
127,2013-08-04 21:32:46,"[![Coverage Status](https://coveralls.io/builds/144285/badge)](https://coveralls.io/builds/144285)

Coverage remained the same when pulling **f791b28ba0913a9f6824ee1f439c43eabab1532c on silentroach:bugfix-collapseRepeated-closePath** into **6fa07040eaa4e4de70efa2478e0c1af9bf16d165 on svg:master**.
",coveralls,2013-08-04 21:53:06
127,2013-08-04 21:53:06,"Wrong branch, sorry
",silentroach,2013-08-04 21:53:06
126,2013-08-04 20:41:09,"'Tis too dangerous to write xml data unescaped.
Why js2svg::defaults? It makes it even harder to fix it :)

Example input:

<S_CODE_TOKEN>

Wrong optimized output:

<S_CODE_TOKEN>
",silentroach,2015-01-19 16:21:05
126,2015-01-19 16:21:05,"Fixed in #198.
",GreLI,2015-01-19 16:21:05
125,2013-07-23 19:54:09,"Original:

https://github.com/filamentgroup/grunticon/blob/master/example/source/fishing-hook.svg

Output:

http://grunticon.fgte.st/preview.html under .icon-fishing-hook

Where we're using SVGO:

https://github.com/filamentgroup/grunticon/blob/master/tasks/grunticon.js#L53

Thanks!
",jefflembeck,2014-01-11 20:36:42
125,2014-01-09 07:21:06,"Already was fixed in master (but found my bug while checking :)
",silentroach,2014-01-11 20:36:42
125,2014-01-09 07:28:59,"Awesome! Thanks!
",jefflembeck,2014-01-11 20:36:42
125,2014-01-11 18:33:24,"Fixed in #172
",silentroach,2014-01-11 20:36:42
125,2014-01-11 20:36:42,"coming soon.
",deepsweet,2014-01-11 20:36:42
124,2013-07-22 16:14:57,"Can this be looked at again now Opera has moved to webkit or at least possibly a seperate plugin that removes width & height while maintaining viewbox. Ref #19 
",jamesscholeyweb,2014-11-04 20:45:16
124,2014-11-04 20:45:16,"As I wrote in #19, it would be wrong to do this by default, since authors may rely on intrinsic sizes (e.g. in css background). But it's ok for an optional plugin, you are welcome.
",GreLI,2014-11-04 20:45:16
123,2013-06-25 18:43:33,"did $ svgo logo.svg 
got Non-whitespace before first tag

Did not find any info anywhere about this error msg. Can somebody give me a clue? 
Thanks.
",mahish,2013-06-25 19:24:58
123,2013-06-25 18:49:22,"this is a [sax parser](https://github.com/isaacs/sax-js) error, looks like you have an invalid-non-well-formed SVG (XML) file.
i have nothing to do with it because this error is not directly related to svgo.

please try to validate your file with [XML Validator](http://www.w3schools.com/xml/xml_validator.asp).
if all else fails then write here again with the link to your file.
",deepsweet,2013-06-25 19:24:58
123,2013-06-25 19:22:06,"Syntax-check was ok.

So I thought the export from Illustrator is wrong somehow.

This was my original export settings from Illustrator: 
![screen shot 2013-06-25 at 21 02 26 pm](https://f.cloud.github.com/assets/3687943/704893/133ae1e4-ddca-11e2-9b2a-f5ae1828b2ec.png) 
 ( settings based on http://stackoverflow.com/questions/13236365/optimal-settings-for-exporting-svgs-for-the-web-from-illustrator )

I tried different export settings and it is working now.

My new settings:
![screen shot 2013-06-25 at 21 18 48 pm](https://f.cloud.github.com/assets/3687943/704986/5c4b412e-ddcc-11e2-852a-42def89a65fd.png)

Thank you for your help (and the tool) and sorry for being out-of-topic.
",mahish,2013-06-25 19:24:58
123,2013-06-25 19:24:58,"glad you figured it out :)
",deepsweet,2013-06-25 19:24:58
123,2013-07-18 18:56:52,"I have also had this issue.  For me it was caused by the SVG file starting with a BOM symbol (https://en.wikipedia.org/wiki/Byte_order_mark) as it was a UTF-8 file.  If you open the file and change the encoding and resave (e.g. with notepad2) it should remove the symbol and then the file should work.
",PedroNorte,2013-06-25 19:24:58
123,2013-07-18 20:05:54,"thanks for the report.
i think that we should create an issue in [sax-js](https://github.com/isaacs/sax-js)
",deepsweet,2013-06-25 19:24:58
123,2014-05-15 13:31:29,"I'm a bit late to the party but had the same issue as @PedroNorte. In PhpStorm theres a context menu item called _Remove BOM_ which solved the problem for me.
",deniaz,2013-06-25 19:24:58
122,2013-06-24 15:13:17,"I use a drop shadow filter:

<S_CODE_TOKEN>

SVGO mangles it:

<S_CODE_TOKEN>

If there's any way I can make SVGO's version work, I'd love to hear it. Awesome work, going around and shaving large chunks off my web SVGs.
",zwaldowski,2013-06-24 16:11:51
121,2013-06-24 07:49:22,"Previously SVGO would stop traversing files in a folder if it encountered a non-SVG file, this patch fixes this behavior
",simenbrekken,2013-06-24 08:46:32
121,2013-06-24 08:46:32,"thank you!
re-merged to the `dev` branch and will take look at it a bit later.
",deepsweet,2013-06-24 08:46:32
121,2013-06-24 09:58:27,"I still think the whole command line is bit cumbersome, ideally you'd be able to specify multiple inputs regardless of type and only use options to specify outputs:

<S_CODE_TOKEN>

Single file input (overwrite):

<S_CODE_TOKEN>

Single file input with STDOUT output:

<S_CODE_TOKEN>

Single file STDIN input with STDOUT output:

<S_CODE_TOKEN>

Multiple inputs (overwrite):

<S_CODE_TOKEN>

It''s a lot simpler and you'll only require a loop when you're dealing with multiple outputs.
",simenbrekken,2013-06-24 08:46:32
120,2013-06-19 10:37:17,"Look for config file in current dir, not `coa.js`'s dir.

Also remove superfluous `process.cwd()`
",alexeyten,2013-06-24 08:17:38
119,2013-06-18 16:01:43,"New lines in path leads to `NaN`'s or `undefined` in result.

<S_CODE_TOKEN>
",alexeyten,2013-06-24 16:11:51
119,2013-06-18 16:10:01,"wow.
",deepsweet,2013-06-24 16:11:51
119,2013-06-18 16:15:21,"stupid bug, got it.
will be in the next minor version, thanks for the issue reporting.
",deepsweet,2013-06-24 16:11:51
118,2013-05-20 18:41:29,"Hi! 
I've found SVGO removing the ""id"" attribute from <filter /> elements and ""filter"" attribute from <g /> elements. I think this is tactless behavior.
",oleggromov,2013-06-06 10:07:05
118,2013-05-20 18:54:15,"please provide a before/after example because SVGO should not remove these attrs for no reason.
",deepsweet,2013-06-06 10:07:05
118,2013-05-20 20:08:46,"before.svg

<S_CODE_TOKEN>

after.svg

<S_CODE_TOKEN>
",oleggromov,2013-06-06 10:07:05
117,2013-05-18 17:52:04,"https://github.com/kriskowal/q-fs. Noticed because Q-fs and its dependencies throw errors when installing svgo.

I don't see any actual references to q-fs in the source code either.
",robwierzbowski,2013-05-30 12:58:10
117,2013-05-30 08:33:54,"are you sure?

I don't see any errors while installing svgo from npm.
",deepsweet,2013-05-30 12:58:10
117,2013-05-30 12:58:10,"Huh, I'm getting no errors now too. Maybe it was a cache problem, or something updated somewhere else to fix it. Thanks. 
",robwierzbowski,2013-05-30 12:58:10
116,2013-05-10 18:36:34,"This is the original SVG:

<S_CODE_TOKEN>

Which looks like this:
![dot-ok](https://f.cloud.github.com/assets/186325/489594/72b20786-b9a0-11e2-80ba-be4b65eb2d0c.png)

When I run `svgo` with all the plugins, it loses the blue half-cirlce:

<S_CODE_TOKEN>

Which looks like this:
![dot-bad](https://f.cloud.github.com/assets/186325/489596/7f25f892-b9a0-11e2-9d81-f77aee093cff.png)

When I run it with `--disable=removeNonInheritableGroupAttrs`, it looks correct:

<S_CODE_TOKEN>
",davidlwarner,2013-06-06 10:07:06
116,2013-05-10 18:40:16,"I should mention that this is with 0.3.1.
",davidlwarner,2013-06-06 10:07:06
115,2013-05-10 11:09:07,"I have an svg file with some monochromatic symbol. 

Original file:

<S_CODE_TOKEN>

After converting with SVGO using command line `svgo -i ~/Desktop/svgs/test.svg -o  ~/Desktop/svgs/test-opt.svg` i get this: 

<S_CODE_TOKEN>

You can see that the `fill=""#000000""` was converted to `fill=""none""`. Because of this i can't see the shape when viewing the converted file. Is that some kind of a bug or is it intended? 
",fmal,2015-01-19 16:25:19
115,2013-09-16 11:14:40,"I'm also seeing this issue. Although not ideal, converting the fill to ""#00000.1"" (minus the period) temporarily fixes the problem.
",sambowler,2015-01-19 16:25:19
115,2013-11-18 19:48:16,"+1 for fixing this!

I have some black icons that would love to be seen.
",manovotny,2015-01-19 16:25:19
115,2015-01-19 16:25:19,"Apparently, it was fixed eventually.
",GreLI,2015-01-19 16:25:19
114,2013-05-08 12:51:39,"*nix systems usually have limit of 1000 open files per process. When SVGO process folder with > 1000 files, it fails with error ""cant open file XXXX"".
",puzrin,2013-06-06 10:07:06
113,2013-05-06 14:19:16,"Addind `transform=""scale(1,1)""` to path crash SVGO.

Example:

<S_CODE_TOKEN>

Looks like macosx not affected.
",puzrin,2015-03-21 14:29:13
113,2015-03-21 14:13:23,"Hmm, couldn't reproduce with the current svgo version.
",GreLI,2015-03-21 14:29:13
113,2015-03-21 14:29:13,"Let's drop is. I used SVGO for path transforms apply, and switched to `svgpath` pkg long time ago. Don't know status of this issue.
",puzrin,2015-03-21 14:29:13
112,2013-05-03 18:03:38,"SVG gets mutated if transform is applied.
###### Before

<S_CODE_TOKEN>

![diamond-svgo](https://f.cloud.github.com/assets/676569/460295/9777e648-b41a-11e2-9db3-6b72f5771c25.png)
###### After

<S_CODE_TOKEN>

![diamond-svgo-bad](https://f.cloud.github.com/assets/676569/460294/9743dfd8-b41a-11e2-8c5e-1cfcb12cbefe.png)

It ends up some weird sort of skewed.
",mindless2112,2013-05-05 12:31:22
112,2013-05-03 18:05:51,"nice :)

thanks, i'll take a look.
",deepsweet,2013-05-05 12:31:22
112,2013-05-03 18:12:40,"I should have mentioned that this was with v0.3.1 -- I haven't tested anything newer.
",mindless2112,2013-05-05 12:31:22
111,2013-05-03 17:35:40,,deepsweet,2013-05-03 18:04:13
110,2013-05-02 21:26:41,"On big images (1000x1000) there are no needs to have fractional part in paths. But SVGO allow only 1 digit minimum after dot.

I did a quick test with regexp:

<S_CODE_TOKEN>

~20% profit.
",puzrin,2013-05-03 18:04:14
110,2013-05-02 22:10:30,"hm... tested this super-optimizer on 300 glyphs, and found 2, where curves change direction. See attached originals (not passed svgo)

<S_CODE_TOKEN>

<S_CODE_TOKEN>

changed algorythm, but result is less impressive (10%)

<S_CODE_TOKEN>

Seems, curves should be rounded more intelegently. Note, that original source was optimized by fonrtforge, and gives bette results, than SVGO now.
",puzrin,2013-05-03 18:04:14
109,2013-05-02 18:33:08,"Currently you must create a sparse array to be able to toggle a plugin. This is very suboptimal and a bad pattern.

https://github.com/felthy/grunt-svgmin/blob/2ccd6fca7e41000369690e2476d50bc8242b2ab6/Gruntfile.js#L4-L7

If placement is important then have an position property on the object or something.
",sindresorhus,2013-05-03 07:35:49
109,2013-05-02 21:31:06,"I'll take a look, but if

<S_CODE_TOKEN>

is true, then this is a svgo bug, because plugin's turn off should not depend on the order.
",deepsweet,2013-05-03 07:35:49
109,2013-05-02 23:57:59,"grunt-svgmin was using version ~0.2.3 of svgo. I've just tried porting to the current version, 0.3.1, and this is no longer an issue. The following configuration works in 0.3.1: 

<S_CODE_TOKEN>

So I think this issue can be closed.
",felthy,2013-05-03 07:35:49
108,2013-04-23 15:47:08,"Base implementation (params.order array needed to be filled with more attrs) of sorting attributes for elements.

Improving readability of SVG-files! ;-)
",Shutnik,2013-04-23 15:53:06
108,2013-04-23 15:59:14,"wow, you're the first person other than me who made svgo plugin :)
thanks, I'll take a look for some improvements later before going to master.
",deepsweet,2013-04-23 15:53:06
107,2013-04-07 23:17:45,"To save space and bandwidth.
",sindresorhus,2013-05-03 18:08:41
107,2013-05-03 18:08:41,"done.
",deepsweet,2013-05-03 18:08:41
106,2013-04-05 19:47:36,"I was trying to use both ""disable"" and ""config"", and my custom config would never get applied when the enable/disable options were used.  This is because the config.js file was returning and not letting the rest of the config do its thing.  I left the `return` statements there just in case someone needs to see them in the future.  I'm not sure what egde case this may break, but so far it works with all of my testing and I can't see any reason why they should have been there in the first place.
",DesignByOnyx,2013-04-12 11:19:39
106,2013-04-12 11:19:39,"it will be fixed in the next v0.3, which is a total refactoring.

thank you for the report :)
",deepsweet,2013-04-12 11:19:39
105,2013-04-01 22:21:00,"URI encoded data URIs seem to be a bit more widely supported than Base 64 encoded data URIs, so it would be handy to have it as an optional output.

Some info:
http://rod.vagg.org/2012/05/data-uri-svg/#comment-308
",premasagar,2013-04-12 12:21:41
105,2013-04-12 12:34:30,"input `--string` will be parsed automatically, output with `---datauri`:
`--datauri base64`
`--datauri enc`
`--datauri unenc`
",deepsweet,2013-04-12 12:21:41
104,2013-03-23 10:58:24,"SVG file: http://openclipart.org/people/carlitos/carlitos_Balloons.svg

Fails (""looks different""): svgo --pretty -i balloons.svg -o balloons-1.svg
Works: svgo --pretty --disable=convertPathData -i balloons.svg -o balloons-2.svg
",steffenweber,2014-11-04 15:08:42
104,2014-07-31 16:00:47,"Partly (the path, but not gradients) fixed in https://github.com/svg/svgo/pull/229
",GreLI,2014-11-04 15:08:42
103,2013-02-22 14:38:50,,deepsweet,2013-02-22 21:25:10
102,2013-02-21 12:15:50,"This is perhaps a little out of scope. However, it would be have ability to alter width and height attributes within all SVGs. For example, given a folder (called 'test') full of SVGs, here is the pseudo code I was thinking of:

<S_CODE_TOKEN>

Would that be possible? 

Extending this idea further (although obviously more complicated to implement), how feasible would it be to generate one dimension when the other is defined. Perhaps the ratio could be retained to work out the other (e.g. if width given, height is created relative to it):

<S_CODE_TOKEN>

Perhaps by using width/height attributes first and if not available, the viewbox??? 
",benfrain,2016-11-13 10:08:28
102,2013-05-10 10:56:54,"+1
",fmal,2016-11-13 10:08:28
102,2013-06-15 06:16:55,"I've been playing around with an SVG tool that allows you to perform arbitrary processing of SVGs by including an inline script in the SVG file itself (https://github.com/papandreou/node-svgfilter). Haven't used it a lot yet, but it could be a way to handle very specialized operations like this one, where exposing a specific command line option might be over the top.
",papandreou,2016-11-13 10:08:28
102,2014-01-05 14:01:45,"You can just add or amend `width` and `height` attributes in the root `<svg>` tag.
",GreLI,2016-11-13 10:08:28
102,2014-01-05 14:15:59,"@GregLi I'm aware of that. The point of this is to automate it for a whole bunch ;)
",benfrain,2016-11-13 10:08:28
102,2014-08-26 15:31:39,"In addition I would like to be able to entirely remove the width and height attributes, OR replace them with ""100%"" to allow for responsive SVGs. Removing width/height is far more useful for SVGs than removing viewbox.
",mattaningram,2016-11-13 10:08:28
102,2015-08-02 07:10:29,"@mattaningram @benfrain just in case you are still looking for a solution for your use case: https://github.com/svg/svgo/blob/master/plugins/removeDimensions.js
",jraoult,2016-11-13 10:08:28
102,2015-08-02 16:47:48,"@jraoult Oh nice, thanks!
",mattaningram,2016-11-13 10:08:28
102,2015-08-02 18:47:38,"Great, thanks

> On 2 Aug 2015, at 08:10, Jonathan Raoult notifications@github.com wrote:
> 
> @mattaningram @benfrain just in case you are still looking for a solution for your use case: https://github.com/svg/svgo/blob/master/plugins/removeDimensions.js
> 
> —
> Reply to this email directly or view it on GitHub.
",benfrain,2016-11-13 10:08:28
102,2016-11-13 10:08:28,"Yes, it's out of scope, and there are a lot of issues with `viewBox`, resizing etc, so it isn't clear what to do in different cases.
",GreLI,2016-11-13 10:08:28
101,2013-02-16 19:42:19,"Firstly, I just wanted to congratulate you on a great project! I have done some initial testing and it looks like you've done some great progress already!

I have found a bug related to clip-path and how collapseGroups is working. 
Original:
&lt;clipPath id=&quot;clip2&quot;&gt;
  &lt;path d=&quot;M 0 0 L 0 670.671875 L 759.160156 832.039062 L 765.355469 802.894531 L 765.355469 0 Z &quot;/&gt;
&lt;/clipPath&gt;
&lt;image id=&quot;image5&quot; width=&quot;1305&quot; height=&quot;1411&quot; xlink:href=&quot;data:image/ ....&quot; /&gt;

&lt;g clip-path=&quot;url(#clip2)&quot; clip-rule=&quot;nonzero&quot;&gt;
&lt;use xlink:href=&quot;#image5&quot; transform=&quot;matrix(0.703976,0.149635,-0.149676,0.70417,51.664047,-356.818891)&quot;/&gt;
&lt;/g&gt;

Result with collapseGroups active:
&lt;clipPath id=&quot;b&quot;&gt;&lt;path d=&quot;M0 0v670.672l759.16 161.367 6.195-29.145v-802.895z&quot;/&gt;&lt;/clipPath&gt;&lt;image id=&quot;c&quot; width=&quot;1305&quot; height=&quot;1411&quot; xlink:href=&quot;data:image/...: /&gt;

<use xlink:href=""#c"" transform=""matrix(.704 .15 -.15 .704 51.664 -356.819)"" clip-path=""url(#b)""/>

This causes images to be incorrectly clipped as in the screenshot attached
![Screen Shot 2013-02-17 at 8 41 53 AM](https://f.cloud.github.com/assets/232264/164045/f0fc2d18-7870-11e2-9b7f-dfee43af5285.png)
",flexpaper,2013-02-22 21:25:10
101,2013-02-16 19:45:05,"grab the original SVG from here:

https://dl.dropbox.com/u/13295266/Monash_Magazine_1.svg
",flexpaper,2013-02-22 21:25:10
101,2013-02-16 19:46:27,"ok, i got it :)
thank you, I'll try to fix it in the minor version next week.
",deepsweet,2013-02-22 21:25:10
101,2013-02-16 20:46:27,"the problem is a bit ambiguous because `clip-path` property is [not inheritable](http://www.w3.org/TR/SVG/masking.html#ClipPathProperty), so in our case `<g clip-path=""...""><use .../></g>` doesn't make any sense.

i think that i should to correct `removeUnknownsAndDefaults` plugin to strip out such cases before `collapseGroups` will try to move the group's attributes to the content element.
",deepsweet,2013-02-22 21:25:10
101,2013-02-16 22:41:56,"sounds like a good idea
",flexpaper,2013-02-22 21:25:10
101,2013-02-16 22:42:29,"By the way; this SVG was created using pdftocairo (poppler utility)
",flexpaper,2013-02-22 21:25:10
101,2014-10-09 16:27:29,"I am still having issues with this happening on a very simple file with a clipped image. Not exactly sure what is happening here, but after using SVGO, the image no longer appears (probably because the clip-path isn't clipping at the right coordinates or something.

With collapseGroups enabled, the clip-path is added directly to the `<image>` element. Simply wrapping the `<image>` with a Group and adding the clip-path back to the group makes it appear correctly without modifying the clip-path definition.

**Example SVGs**
[Original](https://jumpshare.com/v/enrU0KTEvEstefZSYqD0?b=bgXIgrlzJUimNJh3NlNF)
[Optimized](https://jumpshare.com/v/2BFg6TZHUEffSjoZo6S4?b=bgXIgrlzJUimNJh3NlNF)
[Optimized (collapseGroups disabled)](https://jumpshare.com/v/I4HaFaklrLmTxuAXatix?b=bgXIgrlzJUimNJh3NlNF) **<-- appears correctly**

Does this have something to do with relative clip-path positioning?
",docmars,2013-02-22 21:25:10
100,2013-02-15 12:20:07,"Is it possible to set an output folder?

e.g. `svgo -f ../path/to/folder/with/svg/files -o outputfolder/`

Where `outputfolder` is relative to the input.
",benfrain,2014-10-23 11:54:24
100,2013-02-16 12:46:17,"i got it, thank you :) will be in the next minor versions.
",deepsweet,2014-10-23 11:54:24
100,2014-10-23 11:54:24,"It's been done.
",GreLI,2014-10-23 11:54:24
99,2013-02-13 16:44:08,,deepsweet,2015-03-30 11:25:31
98,2013-02-12 17:16:05,"SVG <image> elements allow you to embed raster images inside of SVG. WebKit ignores these on non-inline SVG—IE and Firefox work fine.

https://bugs.webkit.org/show_bug.cgi?id=63548

When Illustrator exports SVG it uses these <image> elements for shadows. It would be nice to have a non-default option to strip these <image> elements out, since they won't be shown on WebKit anyway.
",zachleat,2013-02-22 21:25:09
98,2013-02-12 17:56:52,"ok, i got it.
",deepsweet,2013-02-22 21:25:09
98,2013-02-12 17:58:07,"Thanks!
",zachleat,2013-02-22 21:25:09
97,2013-02-10 17:41:57,"Now:
c0 -1.4 1.1 -2 2.5 -2
I think:
c0-1.4 1.1-2 2.5-2
",redscorpix,2013-02-10 19:40:11
97,2013-02-10 18:15:58,"it's already works as it should:

<S_CODE_TOKEN>

if you are sure that it's not please send me the original file.
",deepsweet,2013-02-10 19:40:11
97,2013-02-10 19:23:31,"Ups, my config file was
- name: convertPathData
  active: true
  type: perItem
  params:
    straightCurves: false
    lineShorthands: false
    curveSmoothShorthands: false
    floatPrecision: 1
    removeUseless: false
    collapseRepeated: false
    leadingZero: false
    negativeExtraSpace: false

My mistake
",redscorpix,2013-02-10 19:40:11
96,2013-02-10 17:33:43,"Input:
&lt;rect x=""2"" y=""2"" fill=""#FFFFFF"" width=""2"" height=""2""/&gt;
&lt;rect x=""2"" y=""6"" fill=""#FFFFFF"" width=""2"" height=""2""/&gt;
&lt;rect x=""2"" y=""10"" fill=""#FFFFFF"" width=""2"" height=""2""/&gt;
Paths:
&lt;path fill=""#fff"" d=""M2,2 h2 v2 h-2z""/&gt;
&lt;path fill=""#fff"" d=""M2,6 h2 v2 h-2z""/&gt;
&lt;path fill=""#fff"" d=""M2,10 h2 v2 h-2z""/&gt;
Output:
&lt;path fill=""#fff"" d=""M2,2 h2 v2 h-2z M2,6 h2 v2 h-2z M2,10 h2 v2 h-2z""/&gt;
",redscorpix,2014-01-02 18:23:55
96,2013-05-16 00:38:58,"I joint to this request. Especially interested in polyline conversion - this type of content happens sometime in sources, provided to fontello project.
",puzrin,2014-01-02 18:23:55
96,2013-11-29 13:15:17,"There's a related pull request: #153
There's also some code to get inspiration: https://github.com/JFXtras/jfxtras-labs/blob/2.2/src/main/java/jfxtras/labs/util/ShapeConverter.java

http://harmoniccode.blogspot.com/2012/11/shapes-shapes-shapes.html
",ivanvotti,2014-01-02 18:23:55
96,2014-05-19 05:01:14,"@deepsweet is this actually fixed? running through the default 0.4.4 config,

input:

<S_CODE_TOKEN>

output:

<S_CODE_TOKEN>

or is svg unable to rewrite + merge the second path?
",bcherny,2014-01-02 18:23:55
96,2016-07-18 19:40:21,"Is it possible to turn this feature off?
",vedran-milic,2014-01-02 18:23:55
96,2016-07-18 20:06:11,"@vedran-milic Run svgo with `--disable convertShapeToPath`.
",derhuerst,2014-01-02 18:23:55
96,2016-07-18 21:34:40,"@derhuerst Thanks
",vedran-milic,2014-01-02 18:23:55
95,2013-02-08 18:40:36,"Source:
&lt;path d=""M0,0 H1000 V1000 H-1000 V-1000z""/&gt;
Now in SVGO:
&lt;path d=""M0,0 h1000 v1000 h-1000 v-1000z""/&gt;
I think:
&lt;path d=""M0,0 h1000 v1000 H0 V0z""/&gt;
",redscorpix,2014-08-02 14:22:27
95,2013-02-08 18:53:13,"thanks, I'll think about it.
looks interesting.
",deepsweet,2014-08-02 14:22:27
94,2013-02-06 08:47:42,"I did nothing but install `svgo` through `npm` and run

<S_CODE_TOKEN>

in the minimized version the Google Plus icon is translated to the top. Here is my [original Inkscape file](http://relaunch.comforts.de/static/img/icons.svg) (GitHub doesn't allow to append svg files)
",maccesch,2013-02-09 11:08:24
94,2013-02-06 10:31:03,"I got it, thank you.
trying to fix asap.
",deepsweet,2013-02-09 11:08:24
94,2013-02-06 16:50:47,"Great thanks!
",maccesch,2013-02-09 11:08:24
93,2013-02-05 21:53:06,"When I try to optimize this file, optimized result is not same picture. Zip with original and optimized files is here: http://zalil.ru/34234982 (maybe link isn’t best way, but I didn’t know what way is preferred here).

I use last (0.2.1) `svgo` from npm.
",ai,2013-02-05 22:59:07
93,2013-02-05 22:56:36,"I checked this in Chrome, Safari, Firefox and Opera and didn't see any problems :-/
",deepsweet,2013-02-05 22:59:07
93,2013-02-05 22:59:07,"Hm. I see problems in `eog` (standard viewer in Ubuntu).
![ 2013-02-06 02:58:29](https://f.cloud.github.com/assets/19343/129682/97d66c8a-6fe7-11e2-970f-2c23d9bc4dfd.png)

OK. Problem in `eog` isn’t so actual.
",ai,2013-02-05 22:59:07
93,2013-02-05 23:01:11,"But Inkscape optimize SVG to 8.2 KB, better than `svgo`. Do you need file from Inkscape to investigate it optimize methods?
",ai,2013-02-05 22:59:07
93,2013-02-05 23:14:26,"yes, that would be nice.
thanks!
",deepsweet,2013-02-05 22:59:07
93,2013-02-05 23:41:08,"From Inkscape: http://zalil.ru/34235148 (I manually delete `<metadata>` block, but it was not so big, just few strings)
",ai,2013-02-05 22:59:07
93,2013-02-13 16:45:51,"Inkskape has a floating number precision ""2"" by default, while svgo - ""3"".
we can already change this in `svgo.yml` at `convertPathData.params.floatPrecision` and get even smaller size, but I think that there should be a cli-option.

#99.
",deepsweet,2013-02-05 22:59:07
92,2013-01-18 13:36:13,,deepsweet,2013-01-18 14:01:27
91,2013-01-08 02:11:26,"стилизация русского языка, улучшение языковых конструкций, правка ошибок
",Grawl,2013-01-08 08:23:43
91,2013-01-08 08:18:20,"спасибо! :)

смёрджил в `dev`, закроется и поедет с ближайшей минорной версией.
",deepsweet,2013-01-08 08:23:43
90,2012-12-27 15:04:06,"Example, https://dl.dropbox.com/u/2195638/fontcustom.svg and compressed version https://dl.dropbox.com/u/2195638/fontcustom.min.svg

I think something wrong :)
",meritt,2013-01-18 14:01:28
90,2013-01-21 11:13:48,"В целом всё стало хорошо, но есть один момент. fontcustom.com вставляет шрифт в CSS таким образом

<S_CODE_TOKEN>

А оптимизатор вырезает id. Конечно, нет проблем убрать id из CSS, но это будет не всем очевидно.
",meritt,2013-01-18 14:01:28
90,2013-01-21 11:16:24,"этот момент лучше регулировать через `--disable cleanupIDs`, т.к. автоматически угадать что ID используется где-то во внешних технологиях практически нереально
",deepsweet,2013-01-18 14:01:28
90,2013-01-21 11:18:10,"Согласен, спасибо за багфикс!
",meritt,2013-01-18 14:01:28
89,2012-12-25 11:08:04,,deepsweet,2013-01-18 14:01:27
88,2012-12-25 11:07:45,,deepsweet,2013-01-18 14:01:27
87,2012-12-23 13:08:44,,deepsweet,2013-05-30 09:15:11
87,2016-09-01 02:44:24,"hi: do you implement it ?
",atwood-cai,2013-05-30 09:15:11
87,2016-09-05 20:03:00,"@atwood-cai, there is `mergePaths`, which merges adjacent paths with same attributes into one after checking for their possible intersection (by comparing convex hulls for performance reasons).
",GreLI,2013-05-30 09:15:11
87,2016-09-09 08:25:31,"bingo. @GreLI , 
",atwood-cai,2013-05-30 09:15:11
87,2016-12-23 22:13:47,"Hi, is there a way to prevent this behavior?
I tried:
<S_CODE_TOKEN>
But it didn't work?",ganlanyuan,2013-05-30 09:15:11
87,2016-12-23 22:16:26,"<S_CODE_TOKEN>
This works.
Thanks",ganlanyuan,2013-05-30 09:15:11
86,2012-12-23 13:07:12,,deepsweet,2013-01-18 14:01:27
85,2012-12-21 14:27:54,,deepsweet,2012-12-21 15:00:29
84,2012-12-19 13:49:27,,deepsweet,2012-12-23 13:18:38
83,2012-12-19 12:56:04,,deepsweet,2012-12-23 13:18:37
82,2012-12-17 14:00:35,"Hi.

It seem that the svg version number in the root svg element changes from ""1.0"" to ""1"" and, in my case, Apache Batik refuses to process it.
",chiccorusso,2012-12-19 11:10:03
82,2012-12-17 20:49:33,"thank you for reporting, it's a funny bug.
I probably will make a special list of attributes to `cleanupNumericValues` them.
",deepsweet,2012-12-19 11:10:03
81,2012-12-14 08:11:44,"Hi. This is for #80.

I added a new config option passed to js2svg: ""html"" that forces all the < > & ' "" characters that appear in text to be substituted with their HTML entity.

I'm sorry, I didn't know that pull requests open issues.

Thank-you for your work!

Federico
",chiccorusso,2012-12-14 11:21:29
81,2012-12-14 11:21:29,"thank you!

refactored it a bit and pushed out to the dev branch, will be in the next stable version.
",deepsweet,2012-12-14 11:21:29
80,2012-12-14 08:06:12,"Hi. I have SVG files in which tspans contain text with HTML entities, for example:

<S_CODE_TOKEN>

Optimized SVG substitute the HTML entities with their char:

<S_CODE_TOKEN>

It seems that sax does the conversion, so the text is already broken before passing through the plugins.
",chiccorusso,2012-12-14 11:19:00
79,2012-12-12 11:04:45,"On some cases changing relative moveto to absolute can save some bytes!

relative.svg:

<S_CODE_TOKEN>

absolute.svg:

<S_CODE_TOKEN>
",Shutnik,2014-08-02 12:05:40
79,2012-12-12 13:45:29,"thanks!
looks like a rare case, but I'll take a look anyway.
",deepsweet,2014-08-02 12:05:40
78,2012-12-12 10:03:54,"A simple closed path(*) terminated with a single `z` (the logic gets hairier when you have multiple `z`s) such as

<S_CODE_TOKEN>

…can be rotated around until its `z` close-path segment (here used in place of a short `h 10` segment) replaces the most space-consuming of the line segments (here `l -10 -10`):

<S_CODE_TOKEN>

(*) the example is a synonym to `<polygon points=""0,10 10,10 0,0"">` – but the optimization can be applied to any path with curves, arcs and other things in it, as long as there is at least a line segment in there too
",johan,
78,2012-12-12 10:30:12,"looks interesting :) but I still can not catch how to automate it...

(*) yeah, I thought about path -> polygon (or polyline) conversion if only line segments are present.
",deepsweet,
78,2012-12-12 10:58:55,"While I might miss which part poses the problem, I think it might not be all that hard if you have an SVG DOM (which I assume you do?). [@Phrogz' convertToAbsolute example](http://stackoverflow.com/a/9677915/1130377) shows how to iterate around a segment at a time.

Figuring out if it's worth doing the optimization on a given part should be easy (probably even regexpable, if you like; `/^[^Z]*L[^Z]*Z\s*$/i` matching the `d` attribute, perhaps).

Tweaking `convertToAbsolute` to convert the `Z` into the `H`, `V` or `L` command it amounts to to get back to the first `M` should be pretty straight-forward.

Only line segments (`l` and `L`) are candidates to replace the `z`, so narrowing down the list to test to those candidates (including the replaced `Z`) and what they would serialize to in minimal form should pinpoint which of them is the longest.

Save the index `i` of that segment, absolutize the path, rotate it (rotating back the first `i` segments to the tail of the path instead), replace the last segment with a `z` and re-relativize the path, and it should now have its minimal form.
",johan,
77,2012-12-12 09:11:11,,deepsweet,2012-12-13 18:23:34
76,2012-12-11 14:09:18,,deepsweet,2012-12-11 14:55:15
75,2012-12-11 10:22:33,,deepsweet,2012-12-11 11:08:33
74,2012-12-10 17:35:59,"I love this tool but unless I'm missing an option, sometimes a given conversion to #RGB from #RRGGBB loses enough precision on that colour that it now looks wrong.  I would think it might be helpful to have an option to only optimize a colour when the compressed format is sufficiently close to the original.  I guess it could be done as some kind of error tolerance...if the resulting error is too high, output the uncompressed #RRGGBB color?
",jdischler,2015-03-21 20:26:26
74,2012-12-10 17:41:47,"you can run svgo with the `--disable convertColors` param, but could you please provide an examples of wrong colors conversion?
",deepsweet,2015-03-21 20:26:26
74,2012-12-10 18:05:55,"I guess I should clarify.  I wouldn't say the color conversion is wrong, per se - it does exactly what I would expect.  But here's an example that hilites why I would want to conditionally collapse a color (which is what I was hoping the color plugin had an option for):

A reasonable conversion:

#34FE12 -> (as collapsed) #3F1  -> (is equivalent to) #33FF11

I say ""reasonable"" because the collapsed color ends up being almost identical to what the original color was.  It's unlikely that anyone will notice this kind of color collapse.  This is a good thing so just collapse the color.

A less good conversion:

#39F216 -> (could be collapsed a variety of ways, such as) -> #4F1, #3E2, etc -> (which are equivalent to) #44FF11, #33EE22

And I say ""less good"" because even a non-artist might say that the collapsed colors have been modified enough that the colour doesn't look right. The problem can be worse when you have two collapsed colors next to each other.   In this latter case, I would probably like the option of saying the converted color is too far from the original, just leave the original colour.

Or does this seem like an unnecessary complication?
",jdischler,2015-03-21 20:26:26
74,2012-12-10 18:16:11,"I think that there are not so many colors definitions in svg files to make such ""lossy"" optimizations and get any significant profit.
but if you really want this feature... implementation may not be so simple, I need to think more about it.
",deepsweet,2015-03-21 20:26:26
74,2012-12-10 18:22:05,"Hmmmm, I think you are right that compressing colours is not a huge optimization for many SVGs to start with so adding an option that makes it even less likely to compress a color might not be worth very much.  

I guess I'll just disable color compression while converting specific files if I feel like it compromises a given file too much.

Thanks for the input and thanks for making such a great tool.
",jdischler,2015-03-21 20:26:26
74,2015-03-21 20:26:26,"It was eventually made, I guest [`convertColors`](/svg/svgo/blob/master/plugins/convertColors.js) plugin now fully satisfies this request.
",GreLI,2015-03-21 20:26:26
73,2012-12-10 14:34:01,"Original :
![original.png](https://f.cloud.github.com/assets/710188/3583/562c2f6a-42d6-11e2-8339-9b803a3f1d12.png)

<S_CODE_TOKEN>

Optimized:
![optimized.png](https://f.cloud.github.com/assets/710188/3586/6bac0b26-42d6-11e2-8233-9bea89ef8c6a.png)

<S_CODE_TOKEN>
",samuelvogel,2012-12-10 15:11:32
73,2012-12-10 15:12:54,"fixed, will be released in the next patch version tomorrow.
thank you ;)
",deepsweet,2012-12-10 15:11:32
73,2012-12-11 17:45:06,"Works in 0.1.8!
",samuelvogel,2012-12-10 15:11:32
73,2012-12-11 20:04:31,"great ;)
feel free to send me any bugs you've found.
",deepsweet,2012-12-10 15:11:32
73,2012-12-11 20:16:21,"Sure, great tool BTW, searched for something like this a couple of months ago, but couldn't find anything!
",samuelvogel,2012-12-10 15:11:32
72,2012-12-09 02:51:43,"I noticed my particular SVG has PNG files embedded in it. Could these be detected and pngcrushed?
http://pmt.sourceforge.net/

That's IFF pngcrush was detected on the system, which I have :}
",kaihendry,2016-11-13 10:06:11
72,2012-12-09 19:35:44,"yes, it's a good idea, any type of non-svg data can be determined and replaced quite easily.
I also thought about [CSSO](https://github.com/css/csso) for embedded CSS.
",deepsweet,2016-11-13 10:06:11
72,2014-02-21 07:06:13,"Any progress on embedded images and CSS?
",stevenvachon,2016-11-13 10:06:11
72,2016-11-13 10:06:11,"Compressing PNGs is a very complex topic. There are a lot of tools, many of them aren't cross-platform. pngcrush isn't a best one. Also, it can be time consuming depending on compression method (e.g. zopfli to optimize deflate compression isn't a fast algorithm).

I believe there should be a modular structure that allows to connect external compressors, but as for now SVGO is far from that.

As for CSSO—it's already included, so I'm closing this.
",GreLI,2016-11-13 10:06:11
71,2012-12-08 13:35:19,"Right now I'm working from a SVG, which has a lot of Text converted into Paths which bulks up the image size to almost a megabyte.  http://s.natalian.org/2012-12-02/1354431225_1366x768.png

We decided to split up the SVG and try manually replace the paths with text.
https://github.com/kaihendry/smrt/tree/gh-pages/split-lines

Any tips would be great to help us finish this optimisation!

Many thanks,
",kaihendry,2013-06-24 21:09:42
71,2012-12-10 03:43:51,"<S_CODE_TOKEN>
",kaihendry,2013-06-24 21:09:42
71,2012-12-12 09:48:22,"While really hard to make automated tools for, if you want to have a go at generating an embedded font from whatever SVG data you have, [here's what an inline svg font looks like](https://github.com/johan/kilobyte-svg-challenge/commit/e6f68780dbc49dc2c48fdf73e2f2bb4f31e8365b) (font definition marked in red).

If you know what the external font is and already have a WOFF url, it's even easier; just link it:

<S_CODE_TOKEN>

…and then reference it from your text tags, for instance like this:

<S_CODE_TOKEN>

A bonus of linking an external font is that you get Firefox support too (Firefox doesn't intend to support SVG fonts, since they find its lack of hinting support too inferior to other font standards), and much very smaller SVG files still. If it's not crucial what font you use, grab anything you like at http://www.google.com/webfonts for instance.

(Having svgo do all this, just given an input svg is a challenge similar to making an Optical Character Reader, but with the addition of reproducing the font, and then using the font to layout text as text, at the original coordinates. Awesome, if someone implements it, but I wouldn't hold my breath. :-)
",johan,2013-06-24 21:09:42
71,2012-12-12 10:02:58,"Ewww, https://github.com/johan/kilobyte-svg-challenge/commit/e6f68780dbc49dc2c48fdf73e2f2bb4f31e8365b looks really awful to me because the text is 'webplatform' is spread across those elements. :(

Cameron McCormack over IRC was telling me he wants to propose:

<S_CODE_TOKEN>

Which would be far better. I'm familiar with the external font approach, here is my demo here: http://neon.webconverger.com/logo/

It's a pity that I haven't found any SVG creation tools that do this. Have you? Text to Path conversion is absolutely evil. :(

Yes it would be really hard for `svgo` to do this, agreed. But the alternative, is doing it by hand, which is EXTREMELY time consuming. :( Have a look at http://github.com/kaihendry/smrt and share my pain!
",kaihendry,2013-06-24 21:09:42
71,2012-12-12 10:32:09,"Not sure I followed what was so bad about that part of the [webplatform.org logo](http://bl.ocks.org/3853405) (it looks neither worse nor better than equivalent HTML doing `<p>webplatform<span>.org</span></p>` with some style or class to apply the colour change that logo requires – unless you reacted to the demonstration of a lot of useful inline attributes better stowed away in a stylesheet?), though I guess it's pretty off topic for this issue anyway.
",johan,2013-06-24 21:09:42
71,2012-12-12 10:49:06,"I agreed that Path -> Text conversion is almost impossible...
really, maybe try a real OCR tool? but i have no idea how to link the resulting text with the SVG data.
",deepsweet,2013-06-24 21:09:42
71,2012-12-12 11:09:58,"@deepsweet  Tbh reading the text is easy. It's just that quickly replacing a path mess is a PITA, at least in Inkscape it is. Tedious deluxe.

@johan sorry that diff looked like the text was split. Looking on the Webpage, it looks fine:

<S_CODE_TOKEN>
",kaihendry,2013-06-24 21:09:42
71,2014-04-03 21:23:25,"I tried to map the SVG-Glyphes back to text, every letter is converted to a defined ""glyph"". Since the glyphs are always containing the same ""path-primitivies"" it is basically possible to recreate the text. If you want to go this painful way you might like to take a look at this java program as ""Proof-Of-Concept"": https://github.com/vennekamp/SVGPath2Text 
",vennekamp,2013-06-24 21:09:42
70,2012-12-08 13:32:50,"Using http://smrt.dabase.com/map.svg and svgo 0.1.7

<S_CODE_TOKEN>
",kaihendry,2012-12-14 01:57:25
69,2012-12-08 08:29:52,"Hi there, I'm maintaining a little side project to try make a local transport map small and sane.
https://github.com/kaihendry/smrt

I ran it over http://smrt.dabase.com/map.svg and it created http://smrt.dabase.com/map.min.svg which is unreadable.

I know this original http://smrt.dabase.com/map.svg is a bit CRAZY. But this is what real world institutions can churn out and hence the effort to to split it up and redo it in https://github.com/kaihendry/smrt/tree/gh-pages/split-lines

I hope you can advise. Thanks!
",kaihendry,2012-12-08 11:18:21
69,2012-12-08 10:46:51,"hi.

I figured out what is the problem, fix coming soon. thanks for the report!
",deepsweet,2012-12-08 11:18:21
69,2012-12-08 11:23:27,"out in v0.1.7
",deepsweet,2012-12-08 11:18:21
68,2012-12-07 16:14:53,,deepsweet,2012-12-07 16:15:27
67,2012-12-07 15:21:57,"This could be achieved in the original graphics program, but I find I often have a SVG files that have surplus whitespace around them and I want them trimmed, so that I have more flexibility in their display.

Currently, the way I manually achieve this is by pasting in the SVG to a new document in [SVG Edit](https://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html), then group all the elements, align them to top and bottom, then ungroup them again and copy the generated output. This avoids unnecessary translate transforms and recalculates all the correct coordinates.

No worries if this is beyond the scope of SVGO, but it would be handy.
",premasagar,2016-11-13 09:54:06
67,2015-01-19 16:29:14,"Not sure what you are asking for, but svgo writes output in compact form by default. This happens because the input file is translated to internal representation and then it serialized back in XML. There is `--pretty` command-line option, if one wants to pretty-printed output format.
",GreLI,2016-11-13 09:54:06
67,2015-01-19 16:37:38,"I didn't explain it so clearly. It wasn't about the XML output. The request was for an option to crop an image such that any visual whitespace outside of the shapes in the image is removed. The dimensions of the image will be smaller. This would be done by changing the path/point/x/y coordinates and not by applying an overall transform the elements.

It's not really a file optimization feature. It's an image manipulation feature. I noticed that trying to achieve this in Inkscape results in a transform being applied, which is what I wanted to avoid.
",premasagar,2016-11-13 09:54:06
67,2015-01-19 20:28:32,"Not sure that svgo should do image editing (except simple cases with manipulations which done anyway). But probably in future it will crop path elements outside viewport.
",GreLI,2016-11-13 09:54:06
67,2015-01-19 21:12:50,"> But probably in future it will crop path elements outside viewport.

Hi,

That, along with removing elements that are invisible/hidden behing opaque elements, would be heaven indeed!

Thanks for all your great work, @GreLI!

Regards
Mateusz
",paperboyo,2016-11-13 09:54:06
67,2015-02-06 02:57:45,"Yes +1 for this feature!
",scottyu2012,2016-11-13 09:54:06
67,2015-05-08 11:00:48,"+1
",peterjaap,2016-11-13 09:54:06
67,2015-07-22 10:16:57,"+1
",onlymega,2016-11-13 09:54:06
67,2015-09-01 16:40:23,"+1 would be great!
",Awem,2016-11-13 09:54:06
67,2015-09-28 12:21:24,"+1 this would be awesome for people using svgo to generate icon fonts
",SebT,2016-11-13 09:54:06
67,2015-10-01 21:18:21,"+1
",davidgoli,2016-11-13 09:54:06
67,2015-11-02 13:56:32,"+1. This would be the desired behaviour to produce SVG sprites. If there is whitespace around the paths (viewport > actual path area) it's a bit cumbersome to declare image sizes since you have to account for this inner padding.
",ricardobeat,2016-11-13 09:54:06
67,2016-03-01 11:01:41,"+1
",nOji,2016-11-13 09:54:06
67,2016-06-09 08:48:53,"+1
",AGresvig,2016-11-13 09:54:06
67,2016-10-15 06:51:20,"+1
",berkaey,2016-11-13 09:54:06
67,2016-11-02 21:43:39,"+1
",niftylettuce,2016-11-13 09:54:06
67,2016-11-13 09:54:06,"> But probably in future it will crop path elements outside viewport.

Seems like it wouldn't. In SVG 2 “SVG root and foreignObject are no longer overflow:hidden in User Agent style sheet.” (as per [Changes](https://www.w3.org/TR/2016/CR-SVG2-20160915/changes.html#rendering) section).

Also, I don't think SVGO will crop an image since it's not an image editing tool. However, there is a `transformsWithOnePath` plugin that can do it. It works only for one path and only with relative coordinates (set `utilizeAbsolute: false` option to `convertPathData`).
",GreLI,2016-11-13 09:54:06
66,2012-12-07 14:33:08,"e.g. `--namespace=""myapp-""`

This may be too niche, but anyway I'll share, in case there is a wider use fo this.

I'm experimenting with loading SVG files into a document (not via an SVG `<image>` element, but by importing them from iframes). When they are all in the same document, there can be id collisions. Unfortunately, SVG links for clip-paths, gradients, etc all require IDs to be used. It'd be handy to be able to supply a namespace prefix that will be applied to all elements with IDs, and any other elements, CSS or event references that link to them.

This is potentially fraught, since there may be a `<script>` inside the SVG that references the IDs. (Maybe I just talked myself out of it - anyway, it'd be useful for my purposes!).
",premasagar,2015-03-15 20:09:47
66,2012-12-07 14:38:32,"it may be part of a simple editor (with #60 tasks), I'll look at it later.

everything is going to `svge` - svg editor :)
",deepsweet,2015-03-15 20:09:47
66,2015-03-15 20:09:47,"Actually, it was done in #202 with prefix option in `cleanupIDs`.
",GreLI,2015-03-15 20:09:47
65,2012-12-07 14:15:08,"When exported as SVG, Illustrator expresses circles as full-blown paths. These paths could be more succinctly expressed as simple `<circle>` elements.
",premasagar,2016-11-13 09:48:03
65,2012-12-07 14:16:14,"could you please provide me an example?
",deepsweet,2016-11-13 09:48:03
65,2012-12-07 14:24:05,"Here's the [Dharmafly](http://dharmafly.com) [logo](http://dharmafly.com/images/logo/2012/dharmafly-sq.svg), as exported from Illustrator:
[![](http://dharmafly.com/images/logo/2012/dharmafly-sq.svg)](http://dharmafly.com/images/logo/2012/dharmafly-sq.svg)

Notice the last three paths - they are all in fact circles (the small green circles that overlay the ends of the 'stalks'). E.g.

<S_CODE_TOKEN>

In fact, the white hollow circle effect has been achieved by overlaying a green circle over a white circle. Instead, they should have been created as white circles with no fill. Anyway, that's a different matter.

I also note that the three white 'stalks' could be expressed more succinctly as path lines with a fat stroke. As it is, the coordinates for both sides of each 'stalk' is drawn. But that too is a separate issue.
",premasagar,2016-11-13 09:48:03
65,2012-12-07 14:35:28,"oh... ok, I'll think about how to mathematically understand that path curve is a circle.
thank you :)
",deepsweet,2016-11-13 09:48:03
65,2012-12-07 15:16:17,"Great. Cheers.
",premasagar,2016-11-13 09:48:03
65,2012-12-12 03:42:56,"Feel free to borrow my research for the same feature request for Scour: https://blueprints.launchpad.net/scour/+spec/automatic-circle-creation

Essentially, pattern match paths like this (an optional redundant ""c"" would be allowed between each section, too):

<S_CODE_TOKEN>

…and optimize them to:

<S_CODE_TOKEN>

…where `r` is any circle radius to pattern match against, `x` and `y` some arbitrary coordinate in the page for the top center of the circle (assuming one drawn from there, which IIRC Illustrator tends to), and `X` is `(Math.sqrt(2) - 1) * 4/3` (or anything up to 0.000501 less – for more details on the math, see http://www.tinaja.com/glib/ellipse4.pdf)

This assumes perfect circles drawn in unit circle order with the minimal four bèziers, which may not always be the case, but probably often will when the base primitive used to create the path in the generator was a circle tool.
",johan,2016-11-13 09:48:03
65,2012-12-12 08:47:33,"excellent! thank you for researching.
looks like it's not so hard, and I'll implement it asap as a part of convertPathData plugin.
",deepsweet,2016-11-13 09:48:03
65,2012-12-12 09:06:16,"It'll probably take a little tweaking before it gets good; you might want some configurable `epsilon` parameter for the pattern matching, so an off-by-less-than-epsilon still counts as a circle, given float rounding of things.

Flipping the sign of the first column's coords also makes a circle, though clockwise. You might want to verify these by playing a bit with using the recipe backwards (or forwards, I suppose) to actually make some circles with it; it's getting a little late here, and I have been tinkering with https://github.com/johan/kilobyte-svg-challenge stuff all evening. :-)
",johan,2016-11-13 09:48:03
65,2013-11-19 15:56:13,"any updates on this?  I am very interested in this to clean up `R` base graphics exports.  Will be happy to help.

+1
",timelyportfolio,2016-11-13 09:48:03
65,2013-11-29 17:19:03,"To achieve this, one target would be to detect this kind of pattern in a
circular arced path: http://stackoverflow.com/a/10477334/165716
",premasagar,2016-11-13 09:48:03
65,2015-03-02 12:37:32,"+1
",konclave,2016-11-13 09:48:03
65,2015-03-02 19:45:01,"Actually, you can note that the path segment like `a5,5 0 1,0 10,0 5,5 0 1,0-10,0` has shorter length then `<circle cx=""10"" cy=""10"" r=""5""/>`. So, there is no profit in making it circle. Moreover, you can make it even shorter without notable difference in a way like `a5,5 0 1,0 .1,0`
",GreLI,2016-11-13 09:48:03
65,2015-03-02 19:54:37,"Strange apples and oranges comparison.

<S_CODE_TOKEN>

Size isn't the only metric by which this cleanup is useful, though; if you want to hand edit the file to tweak things, a `<circle>` is orders of magnitude more hackable than the arc syntax.
",johan,2016-11-13 09:48:03
65,2015-03-02 20:07:38,"Well, it's unlikely that you'll find ‘arcto’ (‘a’) command in the wild. More likely that you find arcs within complex paths (that's why I compare only the command) expressed with bezier curves which are written with 6 coordinates pairs. Converting these curves to arcs gives much more, especially when one arc is expressed with few curves. That usually happens when an arc takes more than one quadrant of a circle.
I have a [prototype](https://github.com/GreLI/svgo/tree/arcs) of such an optimization, but it's imperfect (rounding errors make effect) and a little bit outdated. (Also, beware of force pushes.) Currently, I'm buzy with fixing main bugs of svgo to ensure its correct work, and I've almost finished with it.
",GreLI,2016-11-13 09:48:03
65,2015-03-03 00:30:58,"> if you want to hand edit the file to tweak things, a `<circle>` is orders of magnitude more hackable

:+1: I'd prefer the circle markup too, or at least have that as an option.
",waldyrious,2016-11-13 09:48:03
65,2016-01-03 09:40:41,"FYI version 0.6 of svgo recognizes arcs in curves and converts them correspondingly. Arcs path commands like `a5.07 5.07 0 1 0-2.8-9.72 5.07 5.07 0 0 0 2.8 9.72` (with precision=2) in your example are shorter as an part of an path then a separate `<circle>`.
",GreLI,2016-11-13 09:48:03
64,2012-12-07 11:49:49,,deepsweet,2012-12-07 11:51:09
63,2012-12-06 16:43:43,"I have files with e -numbers in them that are getting mangled:

<S_CODE_TOKEN>

becomes:

<S_CODE_TOKEN>

see: http://www.w3.org/TR/SVG/types.html#DataTypeNumber

<S_CODE_TOKEN>
",sambeau,2012-12-06 20:20:37
63,2012-12-06 16:49:54,"Here's the problem, I think!

https://github.com/svg/svgo/blob/master/plugins/cleanupNumericValues.js

<S_CODE_TOKEN>
",sambeau,2012-12-06 20:20:37
63,2012-12-06 16:55:51,"i got it, thank you! trying to fix.
",deepsweet,2012-12-06 20:20:37
63,2012-12-06 20:32:13,"appeared in v0.1.5, please update.
",deepsweet,2012-12-06 20:20:37
63,2012-12-07 10:08:50,"That seems to have fixed everything, thanks!

Here are my results:
 ~40% reduction on my bigger files. Very impressive.

tall.svg:
0.366 KiB - 3.2% = 0.354 KiB

test_1.svg:
1 KiB - 39.1% = 0.609 KiB

test_10.svg:
16.464 KiB - 30% = 11.526 KiB

test_11.svg:
6.816 KiB - 41.7% = 3.976 KiB

test_12.svg:
2.434 KiB - 34.3% = 1.6 KiB

test_13.svg:
2.283 KiB - 39.6% = 1.379 KiB

test_14.svg:
1.168 KiB - 40.4% = 0.696 KiB

test_15.svg:
1.52 KiB - 37.6% = 0.948 KiB

test_16.svg:
1.145 KiB - 38.8% = 0.7 KiB

test_17.svg:
5.179 KiB - 43.7% = 2.916 KiB

test_19.svg:
8.062 KiB - 33.2% = 5.383 KiB

test_2.svg:
1.084 KiB - 40.8% = 0.642 KiB

test_20.svg:
2.192 KiB - 56.3% = 0.957 KiB

test_21.svg:
1.995 KiB - 46.7% = 1.063 KiB

test_22.svg:
3.914 KiB - 35.5% = 2.524 KiB

test_3.svg:
8.688 KiB - 52% = 4.171 KiB

test_4.svg:
3.184 KiB - 36.1% = 2.034 KiB

test_5.svg:
5.287 KiB - 33.4% = 3.523 KiB

test_6.svg:
7.733 KiB - 52.3% = 3.687 KiB

test_7.svg:
2.738 KiB - 39.3% = 1.662 KiB

wide.svg:
0.367 KiB - 3.2% = 0.355 KiB

test_9.svg:
12.55 KiB - 34.8% = 8.188 KiB

test_0.svg:
101.75 KiB - 41.2% = 59.837 KiB

test_18.svg:
109.01 KiB - 40.8% = 64.538 KiB

test_8.svg:
850.881 KiB - 46.3% = 457.088 KiB
",sambeau,2012-12-06 20:20:37
63,2012-12-07 10:11:00,"![](http://netmaiki.ru/image/cache/data/products/face/35036/pad/futbolka-like-a-boss-white-250x250.jpg)
",deepsweet,2012-12-06 20:20:37
62,2012-12-06 15:57:38,"something like this: `svgo *.svg` ;-)
",mdesantis,
62,2012-12-06 16:00:39,"you can already use `--folder` ;)
",deepsweet,
62,2012-12-06 16:06:45,"Right! but what if I would select just some files? maybe it can be resolved allowing more `-i`, like this: `svgo -i add_vc_off.svg -i add_vc_on.svg`?
",mdesantis,
62,2012-12-06 16:08:58,"ok, i understand you :) and will try to do something in this direction soon.
",deepsweet,
62,2012-12-06 16:13:03,";-) oh, congratulations for the great tool! It's very useful, I couldn't take Illustrator verbosity anymore!
",mdesantis,
62,2015-08-04 17:45:19,"Is recursive folders an option? Something glob-ish like `svgo -f img\svg\**\*.svg`?
",shooftie,
62,2015-09-15 09:24:27,"Looking forward to this as well.
",evenfrost,
62,2015-09-17 11:05:19,"It's a major change, so it would likely be in a brand new svgo version. Unfortunately, it will not be soon. 
",GreLI,
62,2016-04-24 13:14:26,"BTW, for recursive stuff you can just do;

<S_CODE_TOKEN>

Would be great if it was built in though :)
",eknkc,
62,2016-05-12 15:17:41,"For copying over the svg files first we ended up an extended version using this in npm scripts.

<S_CODE_TOKEN>

Just to share another solution. :)
",stefanjudis,
61,2012-12-06 13:53:56,,deepsweet,2012-12-07 12:04:16
60,2012-12-05 23:42:29,"Sometime it's useful to add transformation for source images. For example, when you attach svgs from external project via git submodule, but wish to fit image size for your needs.

That can be outlier for SVGO, but looks convenient - just one more section in config, instead of separate tools.

PS. That can be strange, but i don't know good SVG transform utility. We use kludge with raphael & phantomjs.
",puzrin,2015-01-19 16:31:34
60,2012-12-06 11:06:02,"you're not the first person who asks for this ;)
it will definitely be implemented, but I can't say the exact date right now.
",deepsweet,2015-01-19 16:31:34
60,2015-01-19 16:31:34,"Well, there is `transformsWithOnePath` plugin. Also, check up great [Snap.svg](http://snapsvg.io/).
",GreLI,2015-01-19 16:31:34
60,2015-01-19 16:59:49,"@GreLI that plugin was done by [my request](https://github.com/svg/svgo/blob/master/plugins/transformsWithOnePath.js#L4) and is not as flexible, as suggested in this ticket. Snapsvg also is not related to this ticket anyhow.

Anyway, there is [svgpath](https://github.com/fontello/svgpath) to do this job.
",puzrin,2015-01-19 16:31:34
59,2012-11-29 20:07:31,,deepsweet,2012-11-30 15:35:11
58,2012-11-29 19:55:08,,deepsweet,2012-11-29 19:56:06
57,2012-11-26 17:38:47,,deepsweet,2012-11-26 17:43:53
56,2012-11-26 12:52:25,,deepsweet,2012-11-26 17:43:53
55,2012-11-24 05:25:25,,deepsweet,2012-11-24 06:40:49
54,2012-11-23 20:27:46,,deepsweet,2012-11-23 20:28:23
53,2012-11-23 19:50:20,,deepsweet,2012-11-23 19:56:41
52,2012-11-23 19:44:55,,deepsweet,2012-11-23 19:45:27
51,2012-11-23 19:31:32,,deepsweet,2012-11-23 19:43:40
50,2012-11-23 14:36:27,,deepsweet,2012-11-23 14:56:46
49,2012-11-23 14:28:03,,deepsweet,2012-11-23 14:28:55
48,2012-11-23 14:16:04,,deepsweet,2012-11-23 14:19:46
47,2012-11-23 14:10:47,,deepsweet,2012-11-23 14:11:33
46,2012-11-18 17:55:39,,deepsweet,2012-11-18 18:05:47
45,2012-11-18 16:05:50,,deepsweet,2012-11-18 16:08:58
44,2012-11-18 16:03:51,,deepsweet,2012-11-18 16:05:06
43,2012-11-17 18:14:44,,deepsweet,2012-11-18 16:18:37
42,2012-11-16 22:01:27,,deepsweet,2012-11-29 16:59:24
42,2012-11-29 16:59:24,"will not fix at this time.
",deepsweet,2012-11-29 16:59:24
41,2012-11-16 20:58:20,,deepsweet,2012-11-16 21:48:06
40,2012-11-15 16:33:29,,deepsweet,2012-11-15 16:34:29
39,2012-11-09 17:12:02,,deepsweet,2012-11-23 14:12:01
38,2012-11-09 15:17:17,"> …because after absolute → relative path data transformation all browsers except Firefox have an internal rounding errors while calculating and rendering relative path :-/ and almost in all cases phantomjs test fails because WebKit has an almost invisible differences in a few pixels.
",deepsweet,2012-11-09 16:54:19
37,2012-11-09 15:13:07,,deepsweet,2012-11-09 16:54:19
36,2012-11-08 12:50:10,"1. It would be convenient to have SVGO api, without need to export each plugin file separetely.
2. You use `node.exand`, that has absolutely useless `fs` dependency - not good for browserification. Better to replace with patched source.

Finally, it would be nice to  have:
1. Node library, to use from another projects
2. Browser library, to optimize SVGz in single-page apps.
",puzrin,2014-12-04 04:58:14
36,2012-11-08 13:01:48,"1. SVGO as library already exists and has always been, I just have not written a separate example for it.
   You can take a look at `lib/svgo.js`, but there will be a big refactoring of this part before v0.1
2. browserification - why?.. I find it totally useless.
",deepsweet,2014-12-04 04:58:14
36,2012-11-08 13:15:22,"1. Shame on me. Missed `main` in package.json, when specially looked for it :) . Will try to use it.
2. I write svg fonts/images importer here https://fontello.com/ . It's convenient to do all in browser. Simple bundler + es5-shims do the job. I don't insist on supporting browserified version by you. Just ask to remove heavy dependencies from the core. It's a bit strange to leave `fs` dependency, just because `node.expand` use it to show version number.
",puzrin,2014-12-04 04:58:14
36,2012-11-08 13:21:32,"1. you can try it now, but it's better to wait for 0.1 refactoring and ""official"" usage examples :)
2. ok, i understand you :) I will see what I can do except `fs` dependencies to simplify a browserification process.
",deepsweet,2014-12-04 04:58:14
35,2012-11-08 12:34:34,"We use this dependency, to avoid manual phantomjs installation install: https://github.com/Obvious/phantomjs
",puzrin,2012-11-09 17:09:01
35,2012-11-08 12:42:35,"I'm thinking to remove phantomjs and `--test` at all, because after absolute → relative path data transformation all browsers except Firefox have an internal rounding errors while calculating and rendering relative path :-/ and almost in all cases phantomjs test fails because WebKit has an almost invisible differences in a few pixels.
",deepsweet,2012-11-09 17:09:01
35,2012-11-09 17:09:01,"so, I removed it, at least for the next couple of minor versions.
",deepsweet,2012-11-09 17:09:01
34,2012-11-08 12:24:22,"JSON in config is brain killer. Please, consider use yaml. https://github.com/nodeca/js-yaml
",puzrin,2012-11-08 14:56:14
34,2012-11-08 12:26:22,"oook :)
",deepsweet,2012-11-08 14:56:14
34,2012-11-08 14:49:08,"`require('js-yaml').load(data)` takes about the same time as the whole SVGO optimization.

This is not so critical at this time and I'm not a speed paranoic, but I'll try [some another parser](http://eirikb.github.com/nipster/#yaml) :)

Idea is great, I really like YAML now.
",deepsweet,2012-11-08 14:56:14
34,2012-11-08 14:57:36,"JFYI, https://github.com/jeremyfa/yaml.js is a way faster (~x5 with SVGO default config).
",deepsweet,2012-11-08 14:56:14
34,2012-11-08 15:36:10,"May be, but js-yaml was written by us :) , lol, and supports some JS extentions, coordinated with yaml authors.

When speed will matter, we'll try to improve it.
",puzrin,2012-11-08 14:56:14
33,2012-11-06 16:56:18,"This optimization is useful, if you like to generate SVG fonts without FontForge. Source image can have multiple paths + transformation rules. Result should be a single path. What needed:
1. Apply transformations ""inline"" (recalculate paths)
2. Join paths (chaining works fine)

Example:
- source image: https://github.com/fontello/brandico.font/blob/master/src/svg/blogger-rect.svg#L81
- result in font: https://github.com/fontello/brandico.font/blob/master/font/brandico.svg#L105

Also, it would be nice to know how to calculate path bounding box (that's useful, if you like to crop or center image)
",puzrin,2012-12-23 13:18:37
33,2012-11-06 17:08:46,"Joining (chaining) paths seems to be a very simple task, but applying tricky transforms like `rotate` or `skew` by recalculating path data sounds scary :) I'll take a look at it later, very interesting and not so trivial exercise.

Maybe I'll do it step by step.
",deepsweet,2012-12-23 13:18:37
33,2012-11-06 19:35:39,"https://github.com/DmitryBaranovskiy/raphael/blob/master/raphael.core.js#L294

Seems, Raphael has matrix transformation mapping.
",puzrin,2012-12-23 13:18:37
33,2012-11-06 20:29:51,"I got it! Thank you.
",deepsweet,2012-12-23 13:18:37
33,2012-11-08 12:21:49,"It works! Example https://github.com/fontello/font-builder/blob/1e8af5db26708777ae8d6cd4407b7c2dc6f463ea/lib/font-dump-phantom.js#L99 (from our font dumper tool).

**Important!!!** Current Raphael release has serious bug https://github.com/DmitryBaranovskiy/raphael/issues/629 . It breaks paths, but can be fixed. That's working code https://github.com/fontello/font-builder/commit/b470a52e255045825b9f74fd6c51e2de5bf3ffbb (a bit dirty, but tested)

Finally, i can confirm, that transformation math not only exists, but also can be extracted and used :)
",puzrin,2012-12-23 13:18:37
33,2012-11-08 19:50:17,"http://www.ia.hiof.no/~borres/cgraph/math/twod/p-twod.html

will be ready soon ;)
",deepsweet,2012-12-23 13:18:37
33,2012-12-14 02:03:34,"sorry for a long delay :)
I get to the issue at v0.2.0
",deepsweet,2012-12-23 13:18:37
33,2012-12-20 09:30:31,"there is a big problem with some transformations applying and `stroke` (and probably something else).

for example if we are trying to replace:

<S_CODE_TOKEN>

with the:

<S_CODE_TOKEN>

then 10px stroke is not distorted.

also i'm not sure if it possible to convert `scale(2)` to the `stroke-width=""10*2""` if input transform is a complex matrix like `matrix(1.732, 1, -1, 1.732, 0, 0)` which is equal to `scale(2) rotate(30)`.

so Path with strokes will be ignored.
",deepsweet,2012-12-23 13:18:37
33,2012-12-20 09:51:04,"IMHO it would be more correct to leave path, but rip stroke attributes.
",puzrin,2012-12-23 13:18:37
33,2012-12-23 13:08:56,"- #86 
- #87
",deepsweet,2012-12-23 13:18:37
32,2012-11-05 19:02:13,"http://www.w3.org/TR/SVG/paths.html#PathDataMovetoCommands

> If a moveto is followed by multiple pairs of coordinates, the subsequent pairs are treated as implicit lineto commands.
",deepsweet,
31,2012-11-01 17:58:27,,deepsweet,2012-11-05 13:36:59
30,2012-11-01 17:57:20,,deepsweet,2012-11-05 12:55:32
29,2012-10-29 21:26:22,,deepsweet,2012-11-10 17:53:49
28,2012-10-29 21:16:05,"<S_CODE_TOKEN>

and

<S_CODE_TOKEN>

should be identical.
",deepsweet,2012-10-29 21:19:03
28,2012-10-29 21:18:01,"and even

<S_CODE_TOKEN>

should works.
",deepsweet,2012-10-29 21:19:03
27,2012-10-27 21:55:27,,deepsweet,2012-10-28 22:49:00
26,2012-10-26 20:45:20,,deepsweet,2012-10-27 21:52:13
25,2012-10-25 06:41:37,,deepsweet,2012-10-26 20:46:20
24,2012-10-23 08:20:52,,deepsweet,2012-10-23 18:51:41
23,2012-10-22 19:43:28,,deepsweet,2012-10-22 19:45:16
22,2012-10-22 11:25:44,,deepsweet,2012-10-22 19:45:15
21,2012-10-22 09:51:05,,deepsweet,2012-10-22 11:12:10
20,2012-10-22 09:26:09,,deepsweet,2012-10-22 20:23:04
19,2012-10-22 09:23:36,,deepsweet,2012-10-27 21:35:10
19,2012-10-23 12:57:01,"Is it a really needed conversion? For now omitting viewBox, while width and height are present, is the only way to prevent SVG on background scaling bugs in Opera on zooming in.
",GreLI,2012-10-27 21:35:10
19,2012-10-23 12:59:54,"can you please explain this bug?
",deepsweet,2012-10-27 21:35:10
19,2012-10-23 19:00:07,"Try to zoom page with SVG on background, like pepelsbey.net. You'll see a strange behavior like scaling is applied twice to images. But when there is width and height set but no viewBox all is ok when you zoom it in. It still bugs on zoom out but how many people do this?
",GreLI,2012-10-27 21:35:10
19,2012-10-23 19:02:24,"@pepelsbey, ололо :)
",deepsweet,2012-10-27 21:35:10
19,2012-10-23 19:03:15,"He is aware of this.
",GreLI,2012-10-27 21:35:10
19,2012-10-23 19:31:58,"@deepsweet, please handle `viewBox` carefuly and remove it only when its values are equal to `width` and `height` ones. But you're probably aware of this.

@GreLI, could you please provide test cases with viewBox and scaling relations?
",pepelsbey,2012-10-27 21:35:10
19,2012-10-23 19:36:15,"@pepelsbey, sure, see http://jsfiddle.net/GreLI/f3YS6/1/
",GreLI,2012-10-27 21:35:10
19,2012-10-23 19:48:46,"@pepelsbey, a little bit more specific test: http://jsfiddle.net/GreLI/f3YS6/2/
",GreLI,2012-10-27 21:35:10
19,2012-10-27 21:35:10,"wontfix.
",deepsweet,2012-10-27 21:35:10
19,2013-07-22 16:13:16,"Can this be revisited? Now Opera has moved to Webkit? or at least a seperate plugin that allows us to remove width and height and preserve viewbox? thanks
",jamesscholeyweb,2012-10-27 21:35:10
19,2014-08-26 15:17:16,"This is still a problem for me since proper responsive SVG has no width/height and only viewbox attribute. How do I achieve that?
",mattaningram,2012-10-27 21:35:10
19,2014-08-26 18:33:27,"I believe, that SVGO cannot just remove `width` and `height` attributes because it can lead to unespected behavior. E.g. one can rely on dimensions of svg image in background set by a css rule. Without sizes a backgound image size will be dependent on size of the element.

But it's ok for an optional parameter or plugin.
",GreLI,2012-10-27 21:35:10
19,2014-09-02 00:33:30,"It would be great as an optional parameter. When using SVGs in responsive design it can be useful to simply remove their width and height attributes because they then default to 100%. It would also be useful if you could overwrite the existing width/height with a consistent new one (sized proportionately of course).
",mattaningram,2012-10-27 21:35:10
18,2012-10-22 09:18:39,,deepsweet,2012-12-14 03:49:15
18,2012-12-14 03:40:33,"svg2svgz:

<S_CODE_TOKEN>

svgz2svg:

<S_CODE_TOKEN>
",deepsweet,2012-12-14 03:49:15
17,2012-10-21 20:14:07,,deepsweet,2012-11-04 21:06:05
16,2012-10-21 19:41:34,,deepsweet,2012-10-22 11:18:33
16,2012-10-22 11:18:33,"already ""fixed"" by matrixToTransform()
",deepsweet,2012-10-22 11:18:33
15,2012-10-21 19:39:25,,deepsweet,2012-10-22 20:25:46
14,2012-10-21 09:21:47,,deepsweet,2012-10-27 21:28:57
13,2012-10-21 09:06:14,"<S_CODE_TOKEN>

should become a

<S_CODE_TOKEN>
",deepsweet,2012-10-21 09:17:07
12,2012-10-21 08:39:01,"http://old.nabble.com/Negative-values-in-polygon-polyline-points-td27993375.html

so we can do

<S_CODE_TOKEN>

instead of

<S_CODE_TOKEN>

but can't

<S_CODE_TOKEN>

instead of

<S_CODE_TOKEN>
",deepsweet,2012-10-21 08:57:39
11,2012-10-19 11:04:09,"There is another SVG-related library called «[SVGo: A Go library for SVG generation](http://github.github.com/github-flavored-markdown/)». Apparently, it brings the name conflict and make it hard it find this tool, since that library goes to the first position in the search results. Id recommend to rename this tool to a some non-occupied name like «SVGopt».
",GreLI,2012-10-19 12:00:46
11,2012-10-19 12:00:46,"i know, but at least now I do not want to do anything in this direction.
in our organization we are developing [csso](https://github.com/css/csso) (css optimizer) and [imgo](https://github.com/imgo/imgo) (image optimizer), so i want to promote svgo with the same way naming convention ""technology name + 'o'"".

anyway, thanks for your attention on this issue.
",deepsweet,2012-10-19 12:00:46
10,2012-10-17 19:40:00,,deepsweet,2012-10-20 18:41:28
9,2012-10-17 19:30:09,"http://bost.ocks.org/mike/simplify/
",deepsweet,
9,2016-02-10 03:59:20,"Duplicate of https://github.com/svg/svgo/issues/411
",behdad,
9,2016-02-10 16:34:28,"Not quite so, it's about lines simplification. Still, it's not that useful, IMHO.
",GreLI,
8,2012-10-17 19:28:51,"like in convertPathData plugin but at least for polyline and polygon data.

but if the default width/height are very small then increase the accuracy or do something else to reduce distortion.
",deepsweet,2012-11-29 16:24:16
8,2012-10-19 10:57:18,"SVG allows relative coordinates, so it's important to avoid a systematic error by accumulation rounding errors from the every coordinate. I believe the rounding procedure should work with absolute coordinates. So, the conversion must be done before the rounding.
",GreLI,2012-11-29 16:24:16
8,2012-10-19 11:50:58,"you're right, and that's how it happens in the existing convertPathData plugin.
first - convert absolute to relative, and only then - floating-point numbers rouding.

but there is a problem with the absolute->relative convertion that is not dependent on svgo own rounding - some browsers rounds relative coordinates calculation in their own way, and as a result it's impossible to get a ""pixel lossless"" optimization.
",deepsweet,2012-11-29 16:24:16
8,2012-10-19 16:48:46,"No, no, no. I was saying quite opposite: first, convert to _absolute_ if needed, then round the values, and then you can convert back to the relative. Otherwise the error will be accumulated on each path step.
",GreLI,2012-11-29 16:24:16
8,2012-10-19 16:52:49,"oh, now i understand.

thank you, i'll keep it in mind :)
",deepsweet,2012-11-29 16:24:16
7,2012-10-17 19:25:12,,deepsweet,2012-12-17 20:41:04
7,2012-10-18 22:06:30,"I can see it be not that safe: if someone would try to use [SVG Stacks](http://simurai.com/post/20251013889/svg-stacks) one day, the obfuscated IDs could break things up, 'cause author would no longer know what IDs are there.

However, if there are some common ID patterns used by SVG-producing software, it would be not that unsafe to reduce them.

However, I can see how an external Stylesheet could use those IDs. However, there can be a lot of other problems with external CSS, so I don't think it'd be a problem there :)
",kizu,2012-12-17 20:41:04
7,2012-10-19 09:28:27,"yes, I thought about this issue, and probably it will be the first plugin disabled by default.
even is there are a lot of autogenerated ID like ""SVG001"" or ""G57"" there is no any guarantee that they are not used outside.

maybe svgo should ask questions like ""do you use SVG id attrs somewhere? [y/n]"" :)
",deepsweet,2012-12-17 20:41:04
6,2012-10-17 19:21:51,,deepsweet,2012-11-22 16:57:52
5,2012-10-17 19:18:59,,deepsweet,2012-10-20 11:13:47
4,2012-10-16 18:32:41,,deepsweet,2012-10-16 18:33:32
3,2012-10-15 18:13:25,"![before-after](http://funkyimg.com/u2/2213/548/327315svgo-bug.png)
",deepsweet,2012-10-15 20:45:50
2,2012-10-15 15:13:13,"@pepelsbey
",deepsweet,2012-10-15 15:40:11
2,2012-10-15 15:46:51,"hotfixed :) svgo@0.0.7-1
",deepsweet,2012-10-15 15:40:11
1,2012-09-27 22:37:55,"не запускается после установки, требует этот модуль
",gurugray,2012-09-28 00:03:09
1,2012-09-28 00:03:45,"он пока вообще не нужен, старый артефакт.
спасибо.
",deepsweet,2012-09-28 00:03:09
