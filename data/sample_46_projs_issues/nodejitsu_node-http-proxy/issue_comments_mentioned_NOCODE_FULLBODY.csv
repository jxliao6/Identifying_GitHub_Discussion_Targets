issue_num,datetime,body,login,mention_login
1152,2017-03-14 14:58:02,@leearmstrong try using something like `wrk` rather than apache bench. apache bench doesnt support http 1.1. See if that makes a difference in your benchmarks. I would also suggest using an [`Agent`](https://nodejs.org/api/http.html#http_class_http_agent) for this case so there is better socket reuse. ,jcrugzz,leearmstrong
1137,2017-02-02 08:05:07,"@Nw-Fig you can not proxy https in transparent mode. You need SSL certs but if you want to use as a browsing proxy, you have to let https pass directly.",brugnara,Nw-Fig
1137,2017-02-02 12:46:21,"@Nw-Fig recently I was figuring something similar, but there is a different kind of http proxies like this, focused on listen same domain and passing through its requests to another server with some changes like headers or kind of, and another ones catching al http petitions, caching on any domain request like Squid... something where https://www.npmjs.com/package/proxy code could help you better on what you want to reproduce... I just checked with https and worked. The difference on both kinds is described here https://en.wikipedia.org/wiki/Proxy_server#Types",sposmen,Nw-Fig
1126,2016-12-30 15:11:44,"@mbret its because for your `web` proxy requests, you specify your target, you do not do the same for the `ws` proxy requests on the upgrade event. Add a 4th argument to the function that is an object that specifies `{ target: req.app.locals.system.config.sharedApiUrl })`

Your example should look like:

",jcrugzz,mbret
1126,2016-12-30 15:41:22,"Of course I did not -_-

Thanks a lot @jcrugzz. To be honest I'm a bit stupid because some of my socket request pass through http and so inside the req.app.locals.proxy.web. So I naively thought that my app.locals.proxy.ws was okay like this. Don't know if you get what I mean but whatever, thank you :)",mbret,jcrugzz
1122,2016-12-26 18:37:28,@ivannieto can you rebase your changes off `origin/master`? you are still based on your previous git tree before your changes were merged. That is why there are so many extra commits above,jcrugzz,ivannieto
1122,2016-12-27 13:43:59,sure @jcrugzz my bad! ,ivannieto,jcrugzz
1119,2016-12-24 18:27:52,@ivannieto Thanks for adding this!,jcrugzz,ivannieto
1119,2016-12-24 18:28:18,"@ivannieto i realized i merged to fast, would you mind adding a link to this in the README?",jcrugzz,ivannieto
1119,2016-12-24 18:29:45,@jcrugzz do you want to say adding the link to this file in the repo? or to the default Covenant?,ivannieto,jcrugzz
1119,2016-12-24 18:30:52,@ivannieto add a link to the code of conduct file in this repo to our README so people have a direct link. ,jcrugzz,ivannieto
1118,2016-12-24 14:00:56,"@SET001 this technically doesnt have anything to do with `node-http-proxy`. This has to do with handling multiple SSL certs from a single `https` server. You are correct in that using `SNICallback` is the right approach. You should search for more examples and try it out yourself. I found [this](http://blog.sammauldin.com/configuring-https-with-node-js-startssl-and-sni/) blog post and improved their example below.


",jcrugzz,SET001
1118,2016-12-24 16:23:35,"@jcrugzz , thanx for you respond. I think it has to do with `node-http-proxy` because I need to proxy multiple sub-domain calls to multiple servers running each on different ports. Something like this:

https://a.foo.com -> 127.0.0.1:3000
https://b.foo.com -> 127.0.0.1:3001
https://c.foo.com -> 127.0.0.1:3002

also I have a certificates for each of this domain.

`SNICallback` will be called each time new connection to any of this sub-domains appears and I don't get how to proxy that connection to appropriate local server.
Also I'm lucking experience with express and node.js so I may miss something obvious here",SET001,jcrugzz
1118,2016-12-24 18:26:39,"A * based cert would make this easier ;) but doesnt matter either way. @SET001 check out the documentation as it gives examples of this. The proper cert will be handled by the SNICallback. You need to then proxy to a different `target` based on the `req.headers.host`. You can store a them similar to the certs above.



If you have anymore questions please ask on Stackoverflow or somewhere similar. If you find a bug or issue with `http-proxy` please feel free to open a new issue. Have fun :)",jcrugzz,SET001
1110,2017-01-12 23:59:00,@BernhardRode can you provide an example for my case please?,wiliame,BernhardRode
1109,2016-12-16 17:28:47,Thanks @lpinca ,jcrugzz,lpinca
1107,2016-12-16 15:01:04,@mixxen thanks for your PR! I left my comments in the PR üëç ,pachirel,mixxen
1104,2016-12-06 14:50:59,"@pachirel ill push this out now, submit a follow up PR with any additional changes you wanted to make so we can get this fixed.",jcrugzz,pachirel
1103,2016-12-05 18:25:39,@apalchys could you give some more information on whats not working? what changed in the expectations? I apologize if all the conditions were not covered but the same logic is being run but is the value of the header not what is expected?,jcrugzz,apalchys
1103,2016-12-06 10:40:34,@jcrugzz you can find more details in a PR opened by @pachirel https://github.com/nodejitsu/node-http-proxy/pull/1104,apalchys,jcrugzz
1103,2016-12-06 10:55:44,@pachirel  your PR looks good and should fix autoRewrite because it doesn't overwrite header value. thanks.,apalchys,pachirel
1103,2016-12-07 00:45:57,@apalchys 1.16.2 is available. please update and check your app. thanks to @jcrugzz.,pachirel,apalchys
1103,2016-12-07 00:45:57,@apalchys 1.16.2 is available. please update and check your app. thanks to @jcrugzz.,pachirel,jcrugzz
1103,2016-12-08 14:11:34,@pachirel it works now. thanks a lot!,apalchys,pachirel
1102,2016-12-06 05:13:08,@kriswill Thanks to fix this issue. and sorry for any inconvenience.,pachirel,kriswill
1101,2016-12-04 17:58:40,"@jcrugzz @tomlagier this should be fixed now, please retest!",kriswill,tomlagier
1101,2016-12-04 19:01:52,Yes this should be fixed with the changes made by @kriswill. Will reopen if this is still a problem. My apologies for the trouble.,jcrugzz,kriswill
1100,2016-12-02 14:09:09,@maartenth We are both at fault here as I missed it too ;). Thanks for contributing! Please let me know if the forward proxy is working as expected as im not sure if it was originally written to spec. ,jcrugzz,maartenth
1091,2016-12-02 14:31:23,@Jeremy-iCars @rick-kilgore in this case why not just pass the headers in? I guess we could be more defensive in this case and not fire the event on post requests if it can have this type of unexpected consequences. I just think adding more options isnt the right solution. ,jcrugzz,rick-kilgore
1091,2016-12-02 14:31:23,@Jeremy-iCars @rick-kilgore in this case why not just pass the headers in? I guess we could be more defensive in this case and not fire the event on post requests if it can have this type of unexpected consequences. I just think adding more options isnt the right solution. ,jcrugzz,Jeremy-iCars
1091,2016-12-03 01:33:15,"@jcrugzz Pass the headers in where?  In my case, I need to dynamically choose what to send in the way of headers based on the request.  Specifically, I'm supplying a default header value only if the original request does not contain the header.",rick-kilgore,jcrugzz
1091,2016-12-03 18:05:16,@rick-kilgore before you call `proxy.web` with the `req` and `res` you can optionally pass in headers as options. You can see it in the docs [here](https://github.com/nodejitsu/node-http-proxy#options) and in the code [here](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/common.js#L46-L48).,jcrugzz,rick-kilgore
1091,2016-12-08 00:19:13,"@jcrugzz - now I see what you mean.  I somehow got the mistaken impression that the function I pass into http.createServer() was being called only once at startup, instead of once for every request.

I think my confusion was partly reinforced by the example for setting headers, though.  You might want to change the example in the README to do it the way you're suggesting, since it won't work for POST requests the way it is.",rick-kilgore,jcrugzz
1091,2017-03-22 17:03:13,"What if the header to be set is conditional?

For instance, I have a post request that should be ""If this header `foo` is set on the incoming request, then also add header `bar`

@jcrugzz Is this currently supported?",aleclerc,jcrugzz
1087,2016-11-08 15:46:21,"@gavvvr Would definitely take a PR that updates readme and accepts 0
",jcrugzz,gavvvr
1080,2016-10-24 13:21:40,"@philios33 Could you inspect whats coming back from the response by logging on the `proxyRes` event? `proxy.on('proxyRes', function (res) { console.log(res.statusCode) });`
",jcrugzz,philios33
1076,2016-10-04 13:54:26,"@lolychee this is not the proper fix for this problem. Reverting this commit breaks other projects and the root of the cause in this issue is `union`. The fix belongs in there as the problem is with it writing bad headers.
",jcrugzz,lolychee
1064,2016-10-22 18:00:53,"@ducklord the fix should be in union. @reykjavikingur could you post some code, a stacktrace and the version of express this is associated with? 
",jcrugzz,reykjavikingur
1064,2016-10-22 18:00:53,"@ducklord the fix should be in union. @reykjavikingur could you post some code, a stacktrace and the version of express this is associated with? 
",jcrugzz,ducklord
1064,2016-10-22 18:48:30,"This should be fixed with latest union which would be installed with latest `http-server`. @reykjavikingur would love to see a test for your failure case added to this project. It doesn't seem clear to me why this would be happening with standard `express`
",jcrugzz,reykjavikingur
1061,2016-09-14 21:12:05,"@briman0094 @No9 would love a harmon test so this type of breakage could be prevented in the future. Thanks for the contribution!
",jcrugzz,briman0094
1058,2016-09-10 19:26:20,"@manast @dtjohnson Have you taken a look at #614? Providing node-http-proxy an https agent and setting maxScockets may help. There also appears to be potential slowdown from DNS when setting target other than ip address. May not make a difference in Node v4+
",eezing,dtjohnson
1058,2016-09-10 19:26:20,"@manast @dtjohnson Have you taken a look at #614? Providing node-http-proxy an https agent and setting maxScockets may help. There also appears to be potential slowdown from DNS when setting target other than ip address. May not make a difference in Node v4+
",eezing,manast
1058,2016-09-12 12:27:33,"@eezing, yeah, I tried a variety of options. See my first post on this thread. Keep-alive performance was definitely the worst option, but I need it for server-sent events (though I do have an alternative idea for that).

So I went ahead and automated the full benchmark process:
https://github.com/dtjohnson/proxy-benchmark
The code spins up 3 AWS EC2 servers on-demand (one for the upstream, one for the proxies, and one for wrk). It then runs through a suite of benchmarks. The results are viewable here:
https://dtjohnson.github.io/proxy-benchmark/

Here's an image, which is fairly consistent with the one above:
![image](https://cloud.githubusercontent.com/assets/218771/18435525/cc2da66a-78c1-11e6-85f5-68afd9477158.png)

This tool should make it easy to iterate on the Node proxy and see relatively quickly the performance implications of various configurations.

A number of next steps to try:
- Proxying headers (the current Node piping just sends the status code, no headers). I expect this will hurt performance.
- SSL
- Gzip
- No keep-alive
- Piping the sockets. There is an intriguing looking piece of code showing piping the underlying sockets here: https://nodejs.org/api/http.html#http_event_connect. I'm curious how that will perform.
",dtjohnson,eezing
1058,2016-10-18 11:44:56,"@dtjohnson strange that having content-length prevented node from using chunked transfer, this needs to be verified somewhere, does not makes complete sense to me :/.
",manast,dtjohnson
1058,2016-10-19 18:26:27,"@dtjohnson It does not seem that the http-proxy team has done any serious performance benchmarks, and that they have just assumed it is not possible to compete to other standardised solutions such as nginx or haproxy. I think benchmark should be a part of the development process of this module. It is paramount. Lets not give up in being faster than nginx until proved that it is not possible.
",manast,dtjohnson
1058,2016-12-22 10:14:13,"@dtjohnson thanks for the results. We could then conclude that node-http-proxy is as fast as what is currently possible with node. The dev team should use a test like this to always verify that the proxy has not been degraded in performance between releases, and that it always is kept at the same level as what plain nodejs can offer as maximum throughput.",manast,dtjohnson
1058,2017-01-12 12:16:35,"Apologies for the late response. Things have been hectic.

@manast, fair point about SSL. I'll work on getting that benchmark in place. I just need to chase down all of the SSL configs for the various proxies.

@acanimal, nope, but I'm happy to add it if you want to give me a Docker container and config. Pull requests are welcome: https://github.com/dtjohnson/proxy-benchmark",dtjohnson,manast
1058,2017-01-12 12:16:35,"Apologies for the late response. Things have been hectic.

@manast, fair point about SSL. I'll work on getting that benchmark in place. I just need to chase down all of the SSL configs for the various proxies.

@acanimal, nope, but I'm happy to add it if you want to give me a Docker container and config. Pull requests are welcome: https://github.com/dtjohnson/proxy-benchmark",dtjohnson,acanimal
1058,2017-01-12 12:56:10,"@dtjohnson a simple test would be to use AWS HTTPS for all the proxies, and compare results. If my theory is true there will almost no difference in performance between all of them...",manast,dtjohnson
1058,2017-01-12 13:11:19,@dtjohnson There is an official docker image for zuul: https://hub.docker.com/r/netflixoss/zuul/,acanimal,dtjohnson
1058,2017-01-13 12:21:36,"@manast, is your theory that the latency introduced by the ELB would outweigh the proxy latencies? I'd have to test that but I would guess it would just add the same additional latency to each. ELBs are also a little tough to test because AWS will add/remove nodes as the load demands so it's a bit tough to control the test.

I went ahead and added SSL support to the various proxies so we can compare SSL directly. I'll kick off the benchmarking soon, but it will take some time to complete.

@acanimal, the docs on zuul are pretty light. Could you provide a sample config for the proxy that includes SSL and Gzip support? If zuul can read environmental vars for the upstream settings that would be great too.",dtjohnson,manast
1058,2017-01-13 12:21:36,"@manast, is your theory that the latency introduced by the ELB would outweigh the proxy latencies? I'd have to test that but I would guess it would just add the same additional latency to each. ELBs are also a little tough to test because AWS will add/remove nodes as the load demands so it's a bit tough to control the test.

I went ahead and added SSL support to the various proxies so we can compare SSL directly. I'll kick off the benchmarking soon, but it will take some time to complete.

@acanimal, the docs on zuul are pretty light. Could you provide a sample config for the proxy that includes SSL and Gzip support? If zuul can read environmental vars for the upstream settings that would be great too.",dtjohnson,acanimal
1058,2017-01-22 21:32:35,"@dtjohnson @manast Thanks for spending so much time looking into this, really useful thread.",mikestead,manast
1058,2017-01-22 21:32:35,"@dtjohnson @manast Thanks for spending so much time looking into this, really useful thread.",mikestead,dtjohnson
1051,2016-09-13 22:19:47,"@cchamberlain sorry it took so long. Thanks!
",jcrugzz,cchamberlain
1051,2016-09-15 13:55:09,"@briman0094 - I considered that solution as well but being unaware of harmon's dependency, went with this one since it seemed lighter weight (setting the fields directly has less of this to worry about) - 

![image](https://cloud.githubusercontent.com/assets/424694/18552319/c06d2eb2-7b10-11e6-9657-f09bdb3c7f6b.png)

I can modify / open a new PR? Should we implement the `headers` parameter to allow upstream headers to be passed through or is this already implemented elsewhere?
",cchamberlain,briman0094
1051,2016-09-19 16:00:50,"@cchamberlain I don't think we need to implement `headers` because the previous version of http-proxy that called writeHead didn't implement it. There's another pass in web-outgoing.js that writes the headers from `proxyRes.headers` into the response by calling `res.setHeader(...)`. I had a PR that got merged in a few days ago which fixes the issue and it seems to be working fine.
",briman0094,cchamberlain
1051,2016-09-19 18:07:22,"@briman0094 - Awesome, guess my work here is done!
",cchamberlain,briman0094
1039,2016-10-22 14:38:25,"@sorenvind , are you saying my patch breaks some other module ? (or are you waiting for this to be merged ?)
[edit : nw, i got it]
",131,sorenvind
1039,2016-10-22 17:58:50,"@twhid @sorenvind no problem. I would love to see the real fix in `node-resolve` but it seems that package needs some love.
",jcrugzz,sorenvind
1039,2016-10-22 17:58:50,"@twhid @sorenvind no problem. I would love to see the real fix in `node-resolve` but it seems that package needs some love.
",jcrugzz,twhid
1030,2016-10-18 13:30:02,"@patrickroberts

I'm also trying to route to a 301 redirect with http-proxy and so far I'm only seeing reverse proxy behavior. Even when I look at your example, there's no parameter that would specify a 301 response. The client should be sent an endpoint url to make a new request against, similar to Express' `res.redirect(301, redirectUrl);` which has the returns the response headers:



 `protocalRewrite: true` has no effect on the action of the`web({})` method. 

Also, can you please print the request + headers that you are using because I'm not able to reproduce the `TypeError` exception above.

Thanks,
John
",dancingfrog,patrickroberts
1027,2016-08-11 16:37:39,"Thanks! good looks @matibek 
",jcrugzz,matibek
1024,2016-08-11 16:22:01,"@gabrielboucher seems reasonable to me if its in the spec. Thanks for the contribution! Would you mind adding a test for the `201` case just so we are covered? :)
",jcrugzz,gabrielboucher
1021,2016-06-11 04:02:25,"@kittBoy If you need to deal with html, you can try [harmon](https://github.com/No9/harmon). If you only deal with json, you can try [node-http-proxy-json](https://github.com/langjt/node-http-proxy-json)
",langjt,kittBoy
1015,2016-06-04 15:59:35," @DictumMortuum Hi, you can try this [node-http-proxy-json](https://github.com/langjt/node-http-proxy-json)
",langjt,DictumMortuum
1015,2016-08-25 05:29:10,"@langjt is it possible to read proxy's response if the response is in chunked, gzipped and eventually the buffer will be html.
",ravitadi,langjt
1015,2016-09-11 12:00:54,"@ravitadi If you need to deal with html, you can try [harmon](https://github.com/No9/harmon). If you only deal with json, you can try [node-http-proxy-json](https://github.com/langjt/node-http-proxy-json)
",langjt,ravitadi
1009,2016-08-10 12:33:48,"@Volune Overall this looks good. I would like to see some more documentation for this option in the README, similar to what you have in this PR in your initial proposal. The only thing that kind of bothers me is having `''` remove all domains. Would it be more intuitive to use an explicit `null` as removal? I'm really not sure what the right answer is but is there something that semantically makes more sense for that implication?
",jcrugzz,Volune
1009,2016-08-11 10:11:57,"@jcrugzz The first reason of using `''` is that it would transform `Domain=some.domain` to `Domain=`, which has the meaning of no domain, but (as far as I understand RFC 6265) is not a valid value. So I used it to remove the domain.

Also, it adds some meaning to the type of the option:
- boolean `false`: disable the option
- object: advanced configuration
- string: shorthand for `{ '*': value }` configuration

I'm not against using explicit `null` and/or explicit `undefined` to remove the domain, and document it.
Let me know what's your opinion, decision.
",Volune,jcrugzz
1009,2016-08-11 16:18:57,"@Volune Thats reasonable, i think its ok. Lets just document all the options for this option in the readme, take care of that one nit i have so that we are a bit more performant so we arent creating the regex everytime and we cache it in a variable at the top of `common.js` (with the other one thats there. Then we will get this merged :). Thanks for bearing with me
",jcrugzz,Volune
1009,2016-12-21 22:39:48,@isaachinman I am faced with this same issue as well.  Perhaps it would be good to open up a separate issue for this feature.,joeskeen,isaachinman
1009,2016-12-29 08:12:30,"@isaachinman Just information, node-proxy-middleware has this implemented. It can't be hard to implement this in node-http-proxy

https://github.com/gonzalocasas/node-proxy-middleware/blob/master/index.js#L113

[edit] I added this `onProxyRes`-function to solve the problem temporary.
",eonlepapillon,isaachinman
1006,2016-05-16 03:22:15,"Im sorry you think a missing feature equates to the module being useless. This module is meant to be a building block not a ""do it all"" nginx/haproxy replacement. @acanimal has the right idea :). 
",jcrugzz,acanimal
1006,2016-07-13 00:40:47,"@Dillybob92 next time, dig deep and try to find some basic human empathy. Starting a conversation with an inflammatory and insulting title like ""This module is worthless"" only hurts. [Why do that?](https://speakerdeck.com/indexzero/keeping-important-code-alive-seattlejs-march-2015)

I am locking this issue. @jcrugzz we should use this as an opportunity to adopt a code of conduct since this kind of behavior is obviously not welcome. 
",indexzero,Dillybob92
1006,2016-07-13 00:40:47,"@Dillybob92 next time, dig deep and try to find some basic human empathy. Starting a conversation with an inflammatory and insulting title like ""This module is worthless"" only hurts. [Why do that?](https://speakerdeck.com/indexzero/keeping-important-code-alive-seattlejs-march-2015)

I am locking this issue. @jcrugzz we should use this as an opportunity to adopt a code of conduct since this kind of behavior is obviously not welcome. 
",indexzero,jcrugzz
993,2016-05-11 22:50:20,"I'm having trouble with the same issue, did you find a work around? The set-cookie header comes back with the JSESSIONID, but the browser doesnt retain it. 

@adi518
",whampop,adi518
988,2016-04-12 22:06:12,"@roccomuso yes, we've used this in production for many years.
",jcrugzz,roccomuso
988,2016-04-12 22:45:34,"@jcrugzz even as load balancer? a lot of people suggest tools like HAProxy or nginx.. But i'd like to have a full node.js stack.
",roccomuso,jcrugzz
988,2016-04-13 00:34:22,"@roccomuso HAProxy or nginx will be a more performant load balancer. HAProxy being the most performant. The advantage you get with `node-http-proxy` is the ability to write a dynamic load balancer very quickly that performs well. It wont be the fastest as previously stated but it depends if that matters for your application.
",jcrugzz,roccomuso
988,2016-04-13 14:41:36,"@jcrugzz Thank you for pointing this out. ;) What i need is in fact a dynamic load balancer. Speed is not an essential requirement for my app.
",roccomuso,jcrugzz
988,2016-04-14 16:03:44,"@jcrugzz going to mark this issue as resolved since @roccomuso's original question appears to have been answered. 

@tomcanham have you tried other targets besides `localhost`? Like `127.0.0.1`? You are getting a DNS lookup error for `localhost` (that's what `Error: getaddrinfo ENOTFOUND localhost` indicates) so it may be configured in a non-standard way on your development machine.

On standard setups in production you'd be using a DNS target that is known to be valid and/or proxying directly to an IP address depending on how you choose to configure the actors in your proxy-based system. I confirmed that the simple example in the `README`:



Works just fine on my machine (it also works in Travis and in a few VMs). All of which are running the latest Node LTS version.



Hope that helps! A PR to our docs outlining what was different about your system so that others can avoid this pitfall in the future would be most welcome. 
",indexzero,tomcanham
988,2016-04-14 16:03:44,"@jcrugzz going to mark this issue as resolved since @roccomuso's original question appears to have been answered. 

@tomcanham have you tried other targets besides `localhost`? Like `127.0.0.1`? You are getting a DNS lookup error for `localhost` (that's what `Error: getaddrinfo ENOTFOUND localhost` indicates) so it may be configured in a non-standard way on your development machine.

On standard setups in production you'd be using a DNS target that is known to be valid and/or proxying directly to an IP address depending on how you choose to configure the actors in your proxy-based system. I confirmed that the simple example in the `README`:



Works just fine on my machine (it also works in Travis and in a few VMs). All of which are running the latest Node LTS version.



Hope that helps! A PR to our docs outlining what was different about your system so that others can avoid this pitfall in the future would be most welcome. 
",indexzero,roccomuso
988,2016-04-14 16:03:44,"@jcrugzz going to mark this issue as resolved since @roccomuso's original question appears to have been answered. 

@tomcanham have you tried other targets besides `localhost`? Like `127.0.0.1`? You are getting a DNS lookup error for `localhost` (that's what `Error: getaddrinfo ENOTFOUND localhost` indicates) so it may be configured in a non-standard way on your development machine.

On standard setups in production you'd be using a DNS target that is known to be valid and/or proxying directly to an IP address depending on how you choose to configure the actors in your proxy-based system. I confirmed that the simple example in the `README`:



Works just fine on my machine (it also works in Travis and in a few VMs). All of which are running the latest Node LTS version.



Hope that helps! A PR to our docs outlining what was different about your system so that others can avoid this pitfall in the future would be most welcome. 
",indexzero,jcrugzz
973,2016-04-11 17:43:10,"@KamMo the link is dead.
",miensol,KamMo
972,2016-09-14 16:30:21,"@johngeorgewright we ended up restructuring our code and didn't need this.
",Lull3rSkat3r,johngeorgewright
967,2016-02-27 16:06:22,"@jbacklund @jcrugzz 

With this change, the `xfwd` behavior for `web` is slightly different from `ws`.

https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L65-L83
https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/ws-incoming.js#L54-L69

Would be good to keep the API consistent; By applying the same change to [WebSockets](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/ws-incoming.js#L54-L69) as well, instead of just the [Web](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L65-L83) part.
",chimurai,jbacklund
967,2016-02-27 16:06:22,"@jbacklund @jcrugzz 

With this change, the `xfwd` behavior for `web` is slightly different from `ws`.

https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L65-L83
https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/ws-incoming.js#L54-L69

Would be good to keep the API consistent; By applying the same change to [WebSockets](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/ws-incoming.js#L54-L69) as well, instead of just the [Web](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L65-L83) part.
",chimurai,jcrugzz
966,2016-02-25 00:33:08,"@Deividy thanks for the contribution! I saw you did some investigation on removing the `req.on('error')` listener. The proxyReq error event was still triggered when the client disconnected when removing it still? I can see this can still be an issue when the client request itself timed out but was curious :). Will comment
",jcrugzz,Deividy
966,2016-04-08 07:31:02,"@jcrugzz good to go?
",JSteunou,jcrugzz
966,2016-06-03 17:39:34,"@Deividy thank you for your work. Will merge this. id like to rebase the branch that removes teh `req.on('error')` listener and see how it behaves.
",jcrugzz,Deividy
964,2016-02-22 15:54:58,"@fjakobs what strings are causing this to throw? Could you log the headers that are being set here? Would love a test case for this
",jcrugzz,fjakobs
964,2016-02-22 16:58:41,"@jcrugzz I found this in the wild:

`content-type: ""ÔøΩ?@""`

Not sure why someone would do this but is certainly should not crash the app.
",fjakobs,jcrugzz
964,2016-02-22 22:23:25,"@fjakobs hmm yea thats kind of unfortunate that we are receiving invalid headers. I'd almost rather do this check ourselves to prevent the need for a `try..catch`. Ill look at this later but would definitely take a PR that fixed this.
",jcrugzz,fjakobs
964,2016-02-22 22:34:42,"@fjakobs how do you feel about the behavior of ignoring bad headers? I guess we could make it an option to receive it as an error but I dont think the proxy server should have to care if its receiving bad headers from a client, it just doesnt pass them along since they are not spec compliant. 

What im thinking about is using that internal check they added to node core and using that as a signal to ignore the header.
",jcrugzz,fjakobs
964,2016-06-14 15:41:18,"@fjakobs @jcrugzz 

I am using latest Meteor and hitting something with the same signature.  I am trying to figure out a workaround and you guys seem to have the best handle on this.

Here is the stack dump:



A couple questions, this looks like an inbound request which crashes the server?

I wanted to simply comment the throw but it appears that the respective code gets compiled into the node elf executable?

Thanks in advance!
",ppotoplyak,jcrugzz
964,2016-06-14 15:41:18,"@fjakobs @jcrugzz 

I am using latest Meteor and hitting something with the same signature.  I am trying to figure out a workaround and you guys seem to have the best handle on this.

Here is the stack dump:



A couple questions, this looks like an inbound request which crashes the server?

I wanted to simply comment the throw but it appears that the respective code gets compiled into the node elf executable?

Thanks in advance!
",ppotoplyak,fjakobs
964,2016-06-14 19:17:41,"@ppotoplyak if you want to rebase from this branch https://github.com/nodejitsu/node-http-proxy/pull/965 id merge it until we can figure out a better way that doesnt de-opt from the try catch.
",jcrugzz,ppotoplyak
964,2016-06-15 02:57:37,"@jcrugzz sure, if you are okay waiting until next week

There is a worse problem on the incoming side.  A similarly crafted request brings the node/Meteor process down.

This is my workaround to prevent the process from terminating:



The malformed request will take an ""Error: socket hang up"" but the server will stay up.
",ppotoplyak,jcrugzz
964,2016-11-10 11:26:05,"@jcrugzz @fjakobs, is there any estimate on when you are thinking of releasing a fix? This issue is affecting us in production. Is there any easy workaround we can apply other than monkey patching the code?
",dlaha21,fjakobs
964,2016-11-10 11:26:05,"@jcrugzz @fjakobs, is there any estimate on when you are thinking of releasing a fix? This issue is affecting us in production. Is there any easy workaround we can apply other than monkey patching the code?
",dlaha21,jcrugzz
963,2016-03-28 21:50:18,"@DominicTobias I know this is closed, but there is a setting for that.  If you set ‚ÄúchangeOrigin‚Äù to true it will automatically change the host header to the upstream servers for you.
",pyper,DominicTobias
963,2016-03-28 21:58:53,"@pyper ah that's nice thanks
",DominicTobias,pyper
960,2016-02-13 23:32:52,"@Turbo87 looks like this was lost in translation when the rewrite happened. I'd love PR for this :+1:. Definitely a good first contributor issue :)
",jcrugzz,Turbo87
955,2016-04-29 16:02:14,"@karthikus How did you work around the issue?
",narciero,karthikus
954,2016-02-09 19:46:48,"@Osmosis311 What was the issue?
",pyper,Osmosis311
952,2016-02-08 22:40:45,"@ohenepee Are you trying to modify the response depending on the domain?
",pyper,ohenepee
952,2016-02-10 16:29:28,"@ohenepee There is two ways.  One you can use something called Harmon to modify the stream as it passes through.  Just use some logic on the incoming request to see what the domain is.  However, Harmon is slow.  The other way is to override the out-going response methods, and buffer and manipulate the content there to capture it.   There is a good example in this thread:

https://github.com/nodejitsu/node-http-proxy/issues/796

Also, try searching for ‚ÄúFAQ‚Äù tag under issues.  Many of the common pitfalls you will likely run into are usually there.
",pyper,ohenepee
951,2016-02-03 22:31:00,"@pyper a word `callback` in Node.js world always means only one thing: a function that will be called when the action is finished, whose first parameter is `error`, if any, and the rest parameters are the results.

The current `proxy.web()` is clearly not a ""callback API"".
",halt-hammerzeit,pyper
951,2016-02-04 15:30:48,"@halt-hammerzeit I understand that, but I am just pointing out that is the behaviour as per the docs.  As well, the way node-proxy is built it is all streams.  If there was a callback for when there is no error, you wouldn‚Äôt be able to do much with it since response.end() would have been called on the response object between the end-user and proxy by the time the call was complete.
",pyper,halt-hammerzeit
951,2016-02-04 15:31:48,"@halt-hammerzeit What are you trying to do?
",pyper,halt-hammerzeit
951,2016-02-04 15:37:15,"@pyper 

> I am just pointing out that is the behaviour as per the docs

And I am pointing out that behaviour is not as per the docs because ""the callback API"" means ""call back"" when it's either done or aborted.
If you aren't interested in correcting that mistake in the README and renaming that word into something  more appropriate like ""error handler"" then I don't care.

> you wouldn‚Äôt be able to do much with it

I am able to do much with it.

Anyway, I have my solution and this issue is not for helping me do something, it's for pointing out the mistake in your documentation/api-design.

The workaround for those who are interested:
https://github.com/halt-hammerzeit/webapp/blob/80f2c37596e878895eaa129dc7666133e472443f/code/common/web%20server.js#L747-L766
",halt-hammerzeit,pyper
951,2016-08-03 00:36:12,"Cheers @halt-hammerzeit! Link was much appreciated!
",jpstrikesback,halt-hammerzeit
950,2016-02-15 15:36:28,"Thanks @caioquirino 
",jcrugzz,caioquirino
947,2016-01-28 19:02:35,"@coderaiser could you add a test for the case you pointed out in #946 
",jcrugzz,coderaiser
947,2016-01-29 07:49:25,"@jcrugzz done
",coderaiser,jcrugzz
946,2016-01-28 15:36:44,"@coderaiser its meant to handle cases where `http://whatever.com` turns into `http:/whatever.com`. This is a naive urlJoin since it fails on this case, it should be more specific to the post `http`. I would love a PR to fix this if you can turn this into a test case :)
",jcrugzz,coderaiser
946,2016-01-28 17:49:33,"@coderaiser Yes I understand. I was mentioning thats why it exists, Im not saying its correct. The code here needs to be smarter to handle the case you are mentioning.
",jcrugzz,coderaiser
944,2016-01-27 03:28:26,"Latest verion has this fix. thanks for the reminder. @pradeep122 
",jcrugzz,pradeep122
938,2016-01-21 22:31:48,"@merpnderp i do find this very strange that this is happening but i would take a PR that adds that safety `if` clause
",jcrugzz,merpnderp
931,2016-02-02 05:00:47,"@kaven276 this sounds interesting, is it possible to test case? Is this a standard header?
",jcrugzz,kaven276
929,2016-01-05 11:10:35,"@kar1m what version of node are you using? Can you compare your results against `0.10`, `0.12`, and `4.2`? 
",indexzero,kar1m
929,2016-01-05 18:03:40,"I just ran @kar1m example and I am seeing the same issue here.  Requests per second drop by a factor of 10-20x when using the proxy.  @indexzero I tested on versions v0.10.36 and v5.2.0.
",pyper,kar1m
929,2016-01-05 18:03:40,"I just ran @kar1m example and I am seeing the same issue here.  Requests per second drop by a factor of 10-20x when using the proxy.  @indexzero I tested on versions v0.10.36 and v5.2.0.
",pyper,indexzero
929,2016-01-05 18:39:41,"Thanks @indexzero, that made a huge difference.  @kar1m You need to create an agent with keepAlive set to true and pass it the agent option when you create the server.  You might need to play with some of the other agent options too.
",pyper,kar1m
929,2016-01-05 18:39:41,"Thanks @indexzero, that made a huge difference.  @kar1m You need to create an agent with keepAlive set to true and pass it the agent option when you create the server.  You might need to play with some of the other agent options too.
",pyper,indexzero
929,2016-01-05 18:52:09,"Thanks @indexzero and @pyper, It made a huge difference (10x previous performance), although it's still much slower than HAProxy. I'll try playing with the agent options and let you know if I can get a better performance.
",kar1m,indexzero
929,2016-01-05 18:52:09,"Thanks @indexzero and @pyper, It made a huge difference (10x previous performance), although it's still much slower than HAProxy. I'll try playing with the agent options and let you know if I can get a better performance.
",kar1m,pyper
929,2016-03-02 15:58:05,"@indexzero, what do you mean by shared Agent?

Can you link to some resources?
",ronaldocpontes,indexzero
929,2016-03-02 18:36:46,"@ronaldocpontes you'd want to pass in an `http.Agent` or `https.Agent` on a per request basis based on the `target` URL. Check out the node docs [here](https://nodejs.org/api/http.html#http_new_agent_options)
",jcrugzz,ronaldocpontes
924,2016-03-17 05:24:53,"@pyper this adds another option which does handle a case where we want to pass it in explicitly which is great, but I dont think this fully solves the problem discussed. Could you see if you can fix the bug where the port in the `target` URL itself is properly used? Thanks for your help!
",jcrugzz,pyper
922,2015-12-07 20:58:19,"Awesome thank you @aaronmaturen 
",jcrugzz,aaronmaturen
921,2015-12-03 23:13:00,"@davej would love to have a test case for this. Can you reproduce in a node only test so we could add that to our test suite? Thanks!
",jcrugzz,davej
921,2015-12-07 01:33:38,"@aaronmaturen: Thanks for that.

I was able to figure out what the issue is. node-http-proxy is timing out the response after 2 minutes of inactivity.

If you change the connection handler on line 57 of the sse example to the code below then you should be able to recreate it:



On the proxy (8003), it times out after about 2 minutes (Chrome 46), with `net::ERR_INCOMPLETE_CHUNKED_ENCODING` and the second message is **not** received.

On the raw SSE server (9003), it doesn't time out and the second message **is** received.

Is there a way to get the proxy to respect the timeout characteristics of the SSE server
",davej,aaronmaturen
920,2015-12-02 17:57:56,"@indexzero @m1stegmann i had an exchange with @indutny that it just requires passing an agent from his `spdy` module which supports `http2` for this to work
",jcrugzz,indexzero
920,2015-12-02 17:57:56,"@indexzero @m1stegmann i had an exchange with @indutny that it just requires passing an agent from his `spdy` module which supports `http2` for this to work
",jcrugzz,m1stegmann
919,2015-12-08 17:58:49,"@indexzero @aaronmaturen the reason I'm hesitant on this is due to the conversation I had with @indutny where `http2` based on his implementation in [`node-spdy`](https://github.com/indutny/node-spdy) only requires the proper `agent` to be passed in to enable proxying via `http2`. So this really has to do with what we want to support. 

Personally, I'm not a fan of of actually spinning up a server as part of `http-proxy` since that makes us biased on implementation in this case. But in terms of the actual bit that is proxying, I like @indutny's approach because it leverages the `agent` rather than requiring a separate `http` like library in order to make the request.
",jcrugzz,indexzero
919,2015-12-08 17:58:49,"@indexzero @aaronmaturen the reason I'm hesitant on this is due to the conversation I had with @indutny where `http2` based on his implementation in [`node-spdy`](https://github.com/indutny/node-spdy) only requires the proper `agent` to be passed in to enable proxying via `http2`. So this really has to do with what we want to support. 

Personally, I'm not a fan of of actually spinning up a server as part of `http-proxy` since that makes us biased on implementation in this case. But in terms of the actual bit that is proxying, I like @indutny's approach because it leverages the `agent` rather than requiring a separate `http` like library in order to make the request.
",jcrugzz,aaronmaturen
919,2015-12-09 06:16:18,"@indexzero ah, calling @dmai doesn't work on public git

Hm, I don't think it would be that bad if we supported the `http2` library since the docs for that library saids that `http2` has an api very similar to that of `https` and we support passing in options to `https`

I can see @jcrugzz 's point about not using a particular userland `http2` module though, and those who have read up on HTTP2 already would most likely know how to use our provided interface to spin up a `http2` web server w/o createProxyServer().listen() using the mentioned userland library or `spdy`
",donasaur,indexzero
919,2015-12-09 06:16:18,"@indexzero ah, calling @dmai doesn't work on public git

Hm, I don't think it would be that bad if we supported the `http2` library since the docs for that library saids that `http2` has an api very similar to that of `https` and we support passing in options to `https`

I can see @jcrugzz 's point about not using a particular userland `http2` module though, and those who have read up on HTTP2 already would most likely know how to use our provided interface to spin up a `http2` web server w/o createProxyServer().listen() using the mentioned userland library or `spdy`
",donasaur,jcrugzz
919,2016-03-25 23:00:54,"Hi Friends, 

@jcrugzz suggested that the node-spdy module by @indutny is a better way to spin up a new HTTP2 server. It made sense to me at the time, and it's fairly easy to get setup if you actually have an SSL cert to get past the browser security... 

Here is a small example for HTTP2 -> HTTP proxying without any changes to http-proxy.



![screenshot 2016-03-25 18 23 24](https://cloud.githubusercontent.com/assets/507070/14055864/bd5f27c6-f2bb-11e5-9027-b2052855aeb0.png)
",aaronmaturen,jcrugzz
919,2016-04-21 14:53:21,"@tomByrer please see the [last response](https://github.com/nodejitsu/node-http-proxy/pull/919#issuecomment-201569021), there is nothing preventing you from using `http2` using the `node-spdy` module which is a better way to do this.
",jcrugzz,tomByrer
919,2016-09-18 08:35:06,"@aaronmaturen I am new to http2 so please indulge me. How would your example code work if the target server is also HTTP2, and what about things like push streams, would they also work? In other words, would be able to get all of the http2 features without loosing any? 
",manast,aaronmaturen
915,2015-12-09 22:44:00,"Oh I see what you mean @pyper. Because the port number is hardcoded in there to be either 80 or 443 to determine if it is encrypted or not it does not work with any other user given port to listen to. It doesn't know what to do with them? I see what you're saying. If that is the case, could that be reported as a bug? Implying I have to have root access to test run node code? I was actually hoping to have it listen for https on port 8009 then have an iptables rule on 443 to route it to 8009.

I'll try to change it and test it when I get home. Also something I had to run by to clarify, did you say to have the proxy listen on 8009 and the 3000 one to 443? because 8009 was my https port and the 3000 was my http port. I guess I'll try.
",BadBoy21,pyper
915,2015-12-09 23:00:37,"This looks like a bug. We should only default to `443` or `80` if we do not have a port in the target as well. Seems like this is not handling all cases since we only use the port if its in the header. Would love a PR to clean this up. @pyper seems like you are already on the right track if you want to take a stab at it :)
",jcrugzz,pyper
915,2015-12-10 21:49:46,"@jcrugzz So your last name is Cruger and you want me to stab something? :)

I will give it a shot hopefully soon, cheers.
",pyper,jcrugzz
912,2015-11-23 18:12:33,"This is great. Thanks @donasaur!
",indexzero,donasaur
911,2015-11-23 16:54:21,"@piranna this is no longer `http-proxy`ing at that point so it is out of the scope of this module. you are better off using something like [`hyperquest`]('https://github.com/substack/hyperquest) and piping that directly to `stdin` of the child process. I wrote [`strong-parent`](https://github.com/jcrugzz/strong-parent) and [`strong-child`](https://github.com/jcrugzz/strong-child) to deal with situations similar to this.
",jcrugzz,piranna
911,2015-11-23 21:48:21,"> @piranna this is no longer http-proxying at that point so it is out of
> the scope of this module.

Are you talking about the fact of using stdin, isn't? I have been thinking
that maybe this would be a somewhat complicated solution, so I'm going the
web server to start on a random port and notify it to the proxy, so I can
be able to still using http-proxy while being secure since the port is
unpredictable. Do you think is it a good idea?
",piranna,piranna
910,2015-11-21 01:48:22,"@donasaur could you add some code samples as well? I think that will help a lot of users better understand what they are getting from `proxy-rules`.

_Related:_ we should do a pass at updating the `README.md` sometime in the next few cycles. For starters: a Table of Contents that highlights this feature more prevalently would help a lot of users as well.
",indexzero,donasaur
910,2015-11-22 04:22:47,"@donasaur yeah that sounds good. 
",indexzero,donasaur
910,2015-11-22 17:42:38,"@indexzero Kk, I updated the README with a link to the relevant portion of the test, and made that portion readable with comments and a little name refactoring. See [here](https://github.com/donasaur/http-proxy-rules/commit/16d60201a929d6a3a8ffa3a5ef9f856490b7a272)
",donasaur,indexzero
909,2015-11-20 16:15:10,"@mario56 please see [here](https://github.com/jcrugzz/proxy-server/blob/master/index.js#L55-L66) for an example of how to prevent this. You cannot assume you can run `res.redirect` for every `error` that occurs because headers from the server you a proxying to may have been sent already.
",jcrugzz,mario56
908,2015-11-16 23:45:30,"@cdl what node version does this happen in? Could you write a reproducible test case? I want to establish if this is a deterministic issue and if not what conditions FULLY create it. Thanks!
",jcrugzz,cdl
908,2015-11-16 23:57:45,"@jcrugzz Happens in node `4.2.1`. Will see about stubbing out a reproducible test case for it for sure.
",cdl,jcrugzz
908,2015-11-17 00:22:13,"@cdl can you upgrade to `node@4.2.2` there was an `http` bug in `4.2.1` that was resolved in the patch version. See if upgrading resolves this one as well. Let me know either way! Thanks
",jcrugzz,cdl
908,2015-11-17 17:18:41,"@jcrugzz Just tested in `node@4.2.2`, issue still persists. Will write up a gist demonstrating the issue shortly.
",cdl,jcrugzz
908,2015-11-17 17:53:32,"@cdl sounds good, and if you can encapsulate it into a test that you can PR to this project that would get us closer to a solution :). Thanks for the update!
",jcrugzz,cdl
908,2015-11-21 18:08:30,"@stickystyle could you post a sample of the code that you use for `http-proxy`? This doesn't seem like a bug in `http-proxy` since its part of the `http` semantic so this is very curious as nothing changed around [this code](https://github.com/nodejitsu/node-http-proxy/compare/1.11.3...master). 
",jcrugzz,stickystyle
908,2015-11-21 22:14:28,"@jcrugzz I've just made a scrubbed gist of the `app.js` and `package.json` that I'm using. It's a simple proxy that serves to layer JWT and caching on top of a RESTful API.
I too did a compare of the tag to master and didn't see anything that stood out, so it makes me think that one of the `http-proxy` dependencies that got updated is triggering it. I'm on `node@4.2.2` as well.

https://gist.github.com/stickystyle/a35fa8bc7461018aad83
",stickystyle,jcrugzz
906,2015-11-13 17:25:57,"@Wikunia for proxying webscokets you also need to listen to the `upgrade` event on your `httpServer` and call `proxy.ws`. The documentation has an outline for how this can be done.
",jcrugzz,Wikunia
906,2015-11-13 17:35:14,"@Wikunia you also need to add the `target` in this case as well, similar to what you do for the `proxy.web`
",jcrugzz,Wikunia
906,2015-11-13 17:48:02,"Ah okay now everything makes sense.
I have to add the following lines inside the upgrade function



Thanks @jcrugzz 
",Wikunia,jcrugzz
905,2015-11-12 20:08:02,"@zorro765 this would be accomplished by using an http/https Agent. I haven't tried it but try using [`node-proxy-agent`](https://github.com/TooTallNate/node-proxy-agent). I'd love to have a test using this agent to validate.
",jcrugzz,zorro765
900,2015-10-28 18:13:22,"@super-cache-money an error event wont fire because the backend express server was able to respond correctly. An error only happens when we are unable to proxy to the backend server.
",jcrugzz,super-cache-money
898,2015-10-29 20:09:25,"I'm seeing this too.  @jdmaurer why do you say this is a weird use-case?  I have the same use-case, seems like the ""meat and potatoes"" of what a proxy would do?

@jcrugzz is this likely to be fixed soon?  Thanks!
",philcockfield,jcrugzz
898,2015-10-29 21:45:23,"@philcockfield I said it was a weird use-case cause I thought the error may be tied to a single client refreshing over and over causing the connection to not properly close--not because of many clients requesting at once. That seems to be the case.
",jsonmaur,philcockfield
898,2016-08-04 18:55:59,"@bubenshchykov can we confirm this still happens with `1.14.0`?
",jcrugzz,bubenshchykov
898,2016-08-05 12:49:42,"@jcrugzz this original issue (when client interrupts a request, eg by refreshing the page) is not reproducible on latest http-proxy - I think you can close this one! :)

PS I'm receiving {[Error: socket hang up] code: 'ECONNRESET' } when request times out - different story. Easy to reproduce by setting low proxyTimeout value. Dunno, is it by design? I would prefer some different error message for that, but that's not a big deal :)
",bubenshchykov,jcrugzz
897,2015-10-22 14:29:54,"@lbrucher Looks good, will get it in a release later today :+1: 
",jcrugzz,lbrucher
892,2015-10-18 14:45:30,"@donasaur yea a its been on my list to make a module to replicate some of the features that were lost in the `1.0.0` simplication so if you decide to write one, definitely send a PR to add it to the README. :+1:.

Thanks for the reference here!
",jcrugzz,donasaur
891,2015-12-19 14:48:01,"@that1guy Did you see the example in the readme, that listens on ""upgrade""?
",kevinsimper,that1guy
887,2015-11-26 02:18:13,":+1: Just ran into this too.

@borNfreee Find a suitable workaround since you posted this?
",joeyespo,borNfreee
887,2015-11-26 02:27:00,"@borNfreee you may need use http-proxy with middleware like express.js or connect.js
",sequoiar,borNfreee
887,2015-12-02 20:42:27,"@borNfreee's question has been answered in: https://github.com/chimurai/http-proxy-middleware/issues/31#issuecomment-143770591
",chimurai,borNfreee
887,2015-12-03 07:03:44,"Thanks @chimurai You are right
",borNfreee,chimurai
887,2016-01-22 09:03:03,"I have the same problem, but I can't use the @chimurai's solution because I don't use the middleware. I use the [webpack dev server](https://webpack.github.io/docs/webpack-dev-server.html).

Would this be possible with just `node-http-proxy` options? Or do I need to request the feature from webpack guys?
",mik01aj,chimurai
887,2016-01-22 09:34:26,"@mik01aj 
`node-http-proxy` doesn't offer path rewrite through options;
It's some sugar added by `http-proxy-middleware`.

Good news for you perhaps, HPM is now being used by `webpack-dev-server`.
https://github.com/webpack/webpack-dev-server/pull/359

It is not push to npm yet, so you'll have to wait a bit...
`pathRewrite` option will be available there too (soon).
",chimurai,mik01aj
884,2015-10-15 01:04:38,"@morrismukiri @sylido the meteor package using this is not handling errros. They must listen on the `error` event or use the callback api to handle errors. See [here](https://github.com/jcrugzz/proxy-server/blob/master/index.js#L29-L29) for an example.
",jcrugzz,sylido
884,2015-10-15 01:04:38,"@morrismukiri @sylido the meteor package using this is not handling errros. They must listen on the `error` event or use the callback api to handle errors. See [here](https://github.com/jcrugzz/proxy-server/blob/master/index.js#L29-L29) for an example.
",jcrugzz,morrismukiri
884,2015-10-15 01:50:19,"@sylido socket hangup is something node emits internally when a socket is no longer usable or something happens. Could be a symptom of a single server handling too much but its hard to say. Best you can do when it happens is just tell the caller it errored
",jcrugzz,sylido
883,2015-11-05 06:44:51,"@donasaur it's actually not about the Websocket handshake itself. It is mirroring similar `proxyRes` functionality which I am fine with. See https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L147

@jcrugzz thoughts? 
",indexzero,donasaur
883,2015-11-05 09:37:14,"ah ok @indexzero , actually it looks like jarrett already merged in a similar PR already:
https://github.com/nodejitsu/node-http-proxy/pull/897/files

can you double check?
",donasaur,indexzero
883,2015-11-05 09:42:51,"@donasaur excellent. Then this is a duplicate of #897. Closing :100: 
",indexzero,donasaur
881,2015-10-28 18:02:50,"@pepone @jedverity seems like it. Could you provide a complete console output of what you're seeing? Is there a reproducible test case that you've found? This will help us narrow down the problem.
",indexzero,pepone
881,2015-10-28 18:14:10,"Thanks @indexzero @jcrugzz - we're working on putting together a reproducible test case for you right now. Stay tuned.
",glortho,indexzero
881,2015-10-28 18:14:10,"Thanks @indexzero @jcrugzz - we're working on putting together a reproducible test case for you right now. Stay tuned.
",glortho,jcrugzz
881,2015-10-28 19:22:31,"@jcrugzz I'll see what I can do about a failing test. In the meantime, here is a reproducible set-up: https://github.com/jedverity/http-proxy-test
",glortho,jcrugzz
881,2015-10-28 19:40:53,"Think I have a (kludgy) test for you @jcrugzz @indexzero . Coming in 5 mins.
",glortho,indexzero
881,2015-10-28 19:40:53,"Think I have a (kludgy) test for you @jcrugzz @indexzero . Coming in 5 mins.
",glortho,jcrugzz
881,2015-10-30 14:14:19,"@indexzero @jcrugzz @pepone I've confirmed this is fixed in node v5. See http fixes section here: http://nodejs.org/en/blog/release/v5.0.0/
",glortho,pepone
881,2015-10-30 14:14:19,"@indexzero @jcrugzz @pepone I've confirmed this is fixed in node v5. See http fixes section here: http://nodejs.org/en/blog/release/v5.0.0/
",glortho,indexzero
881,2015-10-30 14:14:19,"@indexzero @jcrugzz @pepone I've confirmed this is fixed in node v5. See http fixes section here: http://nodejs.org/en/blog/release/v5.0.0/
",glortho,jcrugzz
881,2015-10-30 17:03:48,"@jcrugzz I did try it in 4.2.1 and no dice. Same results as other 4.x versions. I assumed this was the fix but haven't evaluated closely: https://github.com/nodejs/node/pull/3342
",glortho,jcrugzz
881,2015-11-05 18:35:16,"@jcrugzz Confirmed 4.2.2 works
",glortho,jcrugzz
876,2015-09-10 00:19:57,"@ro31337 interesting, im curious as to what header caused this type of error? Could you `console.dir(proxyRes.headers)` for me?
",jcrugzz,ro31337
876,2015-09-10 18:13:48,"@jcrugzz I'll try, but it's hard to catch. I'll modify my code to catch that, and we'll wait
",ro31337,jcrugzz
876,2015-10-23 20:20:14,"@VarunBatraIT will start testing on `node 4`, I'd love to have a PR for a failing test case though if one doesn't exist already. Thanks for the heads up
",jcrugzz,VarunBatraIT
873,2015-12-25 01:43:27,"I hit the same issue when benchmarking http-proxy. Does anyone know if the same will happen in a real life production environment with a high request volume or if this issue is tied to the fact that the connections are created from the same client?
I tested with nginx and the npm module 'loadbalancer', no problem there.

@tyrchen @jcrugzz
",kar1m,tyrchen
871,2015-08-30 21:28:54,"@ArGGu cherry-picked :). Thanks!
",jcrugzz,ArGGu
867,2015-08-23 17:54:09,"@abarre could you show me the full code where this happens? This shouldn't happen to you as the consumer but I'm guessing you are writing your own headers in a non error case?
",jcrugzz,abarre
867,2015-08-24 05:40:24,"@abarre so this happens in a case where both `response` and `error` events get emit? Does it throw specifically on `res.writeHead(globals.TIMEOUT_ERROR, ""socket hang up);`?
",jcrugzz,abarre
867,2016-11-17 00:31:30,"I forked this project into https://github.com/HBOCodeLabs/node-http-proxy and created a synchronous callback hook like @giuliopaci described.  Here is the PR:  https://github.com/nodejitsu/node-http-proxy/issues/1091
",rick-kilgore,giuliopaci
866,2015-08-20 02:40:42,"@Marc477 pull-requests very much welcome
",jcrugzz,Marc477
866,2016-07-28 12:36:14,"I created a pull request here: https://github.com/nodejitsu/node-http-proxy/pull/1042

Forgive me as I am unfamiliar with the projects setup, but this change I can assert fixes the problem that @Marc477 originally reported. I was encountering the same issue when using HTTPS to HTTPS with `secure: true`. 
",predhme,Marc477
864,2015-08-19 09:02:05,"Thanks @acanimal !

For anyone coming back to this issue, I was able to achieve this with the following:


",iMerica,acanimal
857,2015-07-24 18:25:41,"Sweet, thank you so much @keithmo! 
",alansouzati,keithmo
857,2015-07-24 20:47:08,"Hi @alansouzati 
see the `strict` property in the router configuration on Express http://expressjs.com/api.html#router

By default `/sample-app/` and `/sample-app` are handled as different resources.
",acanimal,alansouzati
857,2015-07-24 22:21:40,"Thanks for the info, @acanimal -- I was not aware of the strict property on the router. 
",keithmo,acanimal
857,2015-07-27 18:10:53,"Thanks for the insight @acanimal !

I haven't had a chance to test this entirely, but adding strict option in my server did not work. Maybe it is also necessary to add strict option inside proxy server as well?

I will try this soon and will update you guys!
",alansouzati,acanimal
851,2015-11-05 06:41:40,"@bdefore @kdepp that is not the purpose of this issue. It should have been closed with #852. If you feel strongly about `changeOrigin` please open a new issue if one does not exist. 

I am not opposed to it.
",indexzero,kdepp
851,2015-11-05 06:41:40,"@bdefore @kdepp that is not the purpose of this issue. It should have been closed with #852. If you feel strongly about `changeOrigin` please open a new issue if one does not exist. 

I am not opposed to it.
",indexzero,bdefore
850,2016-07-24 09:01:31,"@euprogramador I don't know if it is exactly what you need, but some time ago I was working on ClydeIO project (now stopped due I have no free time to spent on it) which allows to configure a set of middlewares before/after sending request to http-proxy. See image: https://github.com/clydeio/clydeio/wiki/Data-Workflow
",acanimal,euprogramador
848,2015-07-07 19:42:23,"For future reference, this is why this module was written [`create-servers`](https://github.com/indexzero/create-servers). @Jmlevick word of advice, don't get too attached to your stack but it seems like you are more comfortable with ruby so I understand why you might go that route. :).

For anyone else looking for ways to do websockets that could integrate with `http-proxy`, checkout [`primus`](https://github.com/primus/primus)

Cheers to all!
",jcrugzz,Jmlevick
843,2015-07-16 09:13:17,"Hey @prashantbaid! I tried what you suggested. Removed both the body-parser and cookie-parser. It still doesn't work. It still fails without any error. Any idea why? Here's the exact code that I'm using:


",tarkeshwars,prashantbaid
843,2015-07-16 12:07:47,"Got it to work. For others facing the same issue, the 'changeOrigin' option must be set to true. And @prashantbaid was right about the body-parser. On adding it, http-proxy doesn't work.
",tarkeshwars,prashantbaid
842,2015-06-23 16:54:45,"@h2non theres nothing stopping you from making a proxy instance on a per request basis if you wanted to have different handlers based on those particular requests. 
",jcrugzz,h2non
842,2015-06-23 17:13:25,"@h2non to be more clear, you would have to instantiate a proxy instance on each request. e.g.


",jcrugzz,h2non
841,2015-06-24 15:29:55,"@benjick im not sure exactly what apache `ProxyPass` does but you can implement a reverse proxy using `http-proxy` without issue. You should also make sure you are sending the `host` header you think you are sending. Usually host headers do not correspond to a `/routeName`. Just add some console.logs, an error handler and see what you can do.
",jcrugzz,benjick
840,2015-06-21 17:48:54,"@motymichaely So there is a couple of problems with this currently.
1. There's no way to parse the response body before the stream is finished proxying.
2. The parsing of the response body in order to grab the value to set on the header will inherently impact response time.

While I'm still looking at a way to be able to inject in a transform/duplex stream into the post proxy response, I haven't had the time to explore that territory which could potentially be a solution to my first point. There is no solution for the second point.

The current solution for this is do manually proxy and parse your response stream without using this module, until i figure out a way to do the modification streams.
",jcrugzz,motymichaely
840,2015-06-21 18:20:42,"@jcrugzz - I've created a gist to explain what I am trying to achieve. I've been using JSONStream to try to address the performance hit you mentioned:

https://gist.github.com/motymichaely/0b0982522d8b9da1200d

Now what I am missing is the ability to set the headers after I get the required info out of the body.

Any idea?
",motymichaely,jcrugzz
839,2015-08-05 23:11:36,"thanks @mereghost i was looking for just this. to prepend, you can do i.e. `proxyReq.path = '/api/' + proxyReq.path`. certainly would be nicer if `ignorePath` was better documented.
",bdefore,mereghost
839,2015-08-19 23:55:08,"Thanks @mereghost - just ran into this issue myself, but it didn't surface until dealing with proxying requests with query parameters. Glad to see I'm not going insane. :+1:
",cdl,mereghost
839,2016-01-28 19:58:35,"@niclic should be, thanks :)
",jcrugzz,niclic
837,2015-06-29 19:40:04,"@alfonso-presa worked like a charm, thanks so much for your help!

FYI, I removed the args.url and args.host, nonetheless, works perfectly.

Closing!
",danazkari,alfonso-presa
836,2015-06-09 05:48:08,"@whatknight I'm with @matthauck, make it an explicit behavior
",jcrugzz,matthauck
836,2015-06-09 05:48:08,"@whatknight I'm with @matthauck, make it an explicit behavior
",jcrugzz,whatknight
836,2015-06-09 19:01:39,"@matthauck The issue I take with with your change is that you are viewing this proxy just like `mod-proxy`. The ability to create custom server logic means that there's no longer a 1-1 mapping of frontend-backend. A developer has the flexibility to build the backend target on the fly (as we have done).

I also take issue with the fact that your change A) silently fails and B) is completely undocumented (same with `autoRewrite`, but that's outside this scope).

I think our use case and the issues we are seeing are getting lost in translation.

@whatknight and I are on a team that's developing a single-page application. During development, the app is served on `localhost`. As we need to interact with backend APIs on different domains, we are using this proxy on the server side to proxy XHR calls out to the various APIs. Custom proxy logic allows us to extract the intended endpoint via a parameter and set that as the proxy target.

As `Host` is `localhost` for these requests, we were manually building the correct `redirectHost` and utilizing the `hostRewrite` functionality to ensure things stayed in line.

We can solve this problem by rewriting the `Host` header to the `target` host. This is reasonable enough, except that you are technically supposed to set `X-Forwarded-Host` to the original `Host` value. Frameworks like Rails, however, will default to using `X-Forwarded-Host` as the base for the `Location` header, which leaves us back at square 1.
",wingrunr21,matthauck
836,2015-06-09 19:01:39,"@matthauck The issue I take with with your change is that you are viewing this proxy just like `mod-proxy`. The ability to create custom server logic means that there's no longer a 1-1 mapping of frontend-backend. A developer has the flexibility to build the backend target on the fly (as we have done).

I also take issue with the fact that your change A) silently fails and B) is completely undocumented (same with `autoRewrite`, but that's outside this scope).

I think our use case and the issues we are seeing are getting lost in translation.

@whatknight and I are on a team that's developing a single-page application. During development, the app is served on `localhost`. As we need to interact with backend APIs on different domains, we are using this proxy on the server side to proxy XHR calls out to the various APIs. Custom proxy logic allows us to extract the intended endpoint via a parameter and set that as the proxy target.

As `Host` is `localhost` for these requests, we were manually building the correct `redirectHost` and utilizing the `hostRewrite` functionality to ensure things stayed in line.

We can solve this problem by rewriting the `Host` header to the `target` host. This is reasonable enough, except that you are technically supposed to set `X-Forwarded-Host` to the original `Host` value. Frameworks like Rails, however, will default to using `X-Forwarded-Host` as the base for the `Location` header, which leaves us back at square 1.
",wingrunr21,whatknight
834,2015-06-01 15:41:49,"@acanimal why do you need to call the next function after the proxy has finished? Middleware is only supposed to be used as a series of functions to execute on a single request. When you proxy a request, the proxy takes over the responsibility of the request and calling the response. You don't want to continue the middleware chain in these cases as it will most likely have unintended side effects. What are you trying to accomplish?
",jcrugzz,acanimal
834,2015-06-01 19:48:49,"Hi @jcrugzz,
my idea is to execute a chain of middlewares where http-proxy is within them, so I want, once the proxy has make the request and get a response, continue to the next middleware, for example, to change some response headers or body content.

I think I have achieved what I want listening for `finish` on the `res` object, similar to this:



Do you think is this fine or can have side effect? Thanks in advance.
",acanimal,jcrugzz
834,2015-06-03 14:38:37,"@acanimal at that point it might be too late to change headers but see if it works for you. The reason I suggest against this is because any of the middlewares after the proxy completes will have to know that the response has already been returned and there is not much you can do at that point.
",jcrugzz,acanimal
833,2015-05-29 05:17:33,"@efokschaner thanks for this! Could you provide a test case so we can defend against this?
",jcrugzz,efokschaner
833,2015-06-13 04:31:59,"@jcrugzz Sorry for taking a while to get back to you. I cannot commit to adding tests for this as it is low priority for me and a non-trivial investment of my time given my lack of familiarity with node and javascript.

If I can, I will look at submitting some tests at a later date, but for now, please consider this PR for merge as is.
",efokschaner,jcrugzz
825,2015-12-30 04:53:39,"@TKMacmillan no since it relies on node libraries, not `XMLHttpRequest`.
",indexzero,TKMacmillan
821,2015-05-11 16:56:45,"@kspiridonov This version of `http-proxy` (post `1.0.0`) only works with node versions `0.10.x` and above. 
",jcrugzz,kspiridonov
821,2015-05-11 18:36:06,"@kspiridonov [`net.Socket`](https://github.com/joyent/node/blob/v0.10.38-release/lib/net.js#L151) is a [`stream.Duplex`](https://github.com/joyent/node/blob/v0.10.38-release/lib/_stream_duplex.js#L32-L44) which has an [`unshift`](https://github.com/joyent/node/blob/v0.10.38-release/lib/_stream_readable.js#L132) method.
",jcrugzz,kspiridonov
821,2015-05-11 18:36:48,"@kspiridonov please provide a reproducible test case which displays this as an issue
",jcrugzz,kspiridonov
814,2015-04-28 09:31:06,"@BonsaiDen that happens in **old** and **out of date** versions of the http-proxy. Update to the latest version and it will work as intended. 

Duplicate of #810 
",3rd-Eden,BonsaiDen
813,2015-12-02 08:37:34,"Merci @vvo ;) Will try that asap
",JSteunou,vvo
813,2015-12-02 09:48:39,"It works very fine, thank you again @vvo 

@jcrugzz should I let this issue open? Maybe http-proxy should filter those error inside the library, or maybe it's better to let it unopinionated...
",JSteunou,vvo
813,2015-12-02 15:06:50,"@JSteunou To put it simply, your workaround here should be handled within `http-proxy` for the `req.on('error')`
",jcrugzz,JSteunou
813,2015-12-02 15:38:12,"@JSteunou Pull requests always welcome if you want to take a stab at it! :)
",jcrugzz,JSteunou
813,2015-12-02 15:43:50,"also @vvo if you want the error handled, you could handle the error directly on `req.on('error')`. Im of the opinion that we need to cleanup our `proxyReq` regardless and if you want it as an error in your code the error can be handled there. Does this seem reasonable?
",jcrugzz,vvo
813,2015-12-02 17:28:10,"@jcrugzz I'm afraid I have the necessary solution and motivation but not the time to do it.
",JSteunou,jcrugzz
813,2015-12-02 18:01:01,"@JSteunou it would be a simple change right around [here](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L130-L132). You may be overestimating the time :). It would be a good opportunity for first contribution
",jcrugzz,JSteunou
812,2016-03-31 15:07:08,"@theDude30 hey man did you ever fix this? I appear to be having the same issue.
The below block works as intended and I'm seeing the console logs as expected. However, in the browser console I get a 404 error on the request that the proxy should kick in on. http://localhost:4000 is the url, when it should be http://dolly.testing.com as per my proxy setup below.
Proxy setup



proxy middleware function each request passes through:



Thanks,
Dave
",beazergood,theDude30
812,2016-04-01 10:29:09,"@jcrugzz sorry for lack of detail, a bit out of my depth with all this. I will give that a go, thanks.
",beazergood,jcrugzz
810,2015-04-24 17:42:38,"@cthorner update to newest version which has this fix and has no breaking changes :)
",jcrugzz,cthorner
809,2015-04-22 15:36:02,"@jondubois this is how semver is supposed to work! :smile: 
",jcrugzz,jondubois
809,2015-04-29 18:47:38,"@joe-spanning this is currently the case. A point in the past it was not properly versioned which caused this issue.
",jcrugzz,joe-spanning
802,2015-04-07 18:07:53,"@kovacspeter Since node `0.10.x` buffering is built into streams so this is no longer necessary. You can do any async call before calling `proxy.web` as long as you don't need to read data from the `req` itself.
",jcrugzz,kovacspeter
802,2016-05-04 09:50:05,"@kovacspeter  i am in a similar situation can you please post working code , i didn't quite understood restreaming it again part . Any help would be greatly appreciated
",gvp-adityapraveen,kovacspeter
800,2015-04-06 18:44:49,"@efkan It's possible the source of your woes is `options.target` being an object that maps `target` string to `forward` string. The comment says it expects a string:
https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L33 
",damonmcminn,efkan
800,2015-04-07 08:51:46,"@efkan It's necessary for you to write the logic yourself. For example:



I have had a similar use case, but using a single domain and the first path to identify where to proxy requests. You can read it here: https://github.com/damonmcminn/api-proxy
",damonmcminn,efkan
800,2015-04-07 09:29:42,"Really thanks @damonmcminn :star2: !

I understood `http-proxy` module now conceptually. 
And your API-Proxy application will be a guide for me.

Thank you again for your helps..

**ps:** I got an error as `Must provide a proper URL as target` :sob: however _really it is not important_ now 
",efkan,damonmcminn
800,2015-04-07 09:37:13,"@efkan No problem!

The error is because `targets` do not have a protocol. Woops!
Change them for example: `process.localhost:2443 -> http://process.localhost:2443`
",damonmcminn,efkan
799,2015-04-02 16:05:01,"@Volune this LGTM. Thanks for the thorough fix :+1: 
",jcrugzz,Volune
798,2015-04-01 15:07:30,"@damonmcminn whats the use case of making req.url an empty string out of curiosity? Thanks for the fix!
",jcrugzz,damonmcminn
798,2015-04-02 09:06:03,"@jcrugzz No problem! I don't believe there is a use case for an empty string... It was an accidental discovery when I changed a regex that is used to strip the first path from `req.url`:
https://github.com/damonmcminn/api-proxy/commit/7dda2413535c5d5c1be0f574dde8ee69cd827fa7

The stripped path is used to identify what server to proxy the request to (so I can serve multiple APIs off a single validated domain i.e. api.damonmcminn.com) e.g.:
`api.damonmcminn.com/nutrition/green-turtle => localhost:50000/green-turtle`

The original regex only matched when a trailing slash was present, so `req.url` would be rewritten thus `'/path/' => '/'` but as I wanted to match regardless of trailing slash, I was erroneously rewriting `'/path' => ''`.

I am no longer rewriting `req.url` to an empty string but provided the fix in case someone else inadvertently does (or wants to).
",damonmcminn,jcrugzz
795,2015-03-20 20:12:45,"@requiredfield This is fascinating that this is only when `changeOrigin: true` option is used. Could you submit your example as a failing test so we can get started in finding the proper fix? 
",jcrugzz,requiredfield
795,2015-03-21 01:57:30,"@jcrugzz  This only happens to some of our sites ,e.g.  set $origin = http://fw.m.pingfan.pw/ , only when set changeOrigin to true and enabled gzip encoding. The gzipped output body has been prepended  three  garbage bytes e.g. ""22f"" and ""\r\n"",total five bytes,that caused decoding error.If I strip these five bytes then it can be decoded correctly but missed the last five bytes,usually are ""html>"" .

PS: I've found `xfwd` option also affects the gzip output. When switch xfwd between true and false,the three garbage bytes varies.
",Behemouth,jcrugzz
795,2015-03-21 04:30:59,"@Behemouth hmm it has to be because the headers are changing, its not able to correctly gzip the entire request. This is something that I would definitely need to dig deeper into but would love some help. What node/io.js version are you using?
",jcrugzz,Behemouth
795,2015-03-21 04:50:43,"Using latest release of Node (0.12.0) and latest release of node-http-proxy. Would it help if we tried older versions?

> On Mar 21, 2015, at 00:31, Jarrett Cruger notifications@github.com wrote:
> 
> @Behemouth hmm it has to be because the headers are changing, its not able to correctly gzip the entire request. This is something that I would definitely need to dig deeper into but would love some help. What node/io.js version are you using?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",requiredfield,Behemouth
795,2015-03-21 05:11:15,"@requiredfield yes I'd be interested to see if it represents the same behavior in `0.10.37` and I would also test [`io.js@1.6.1`](https://iojs.org/en/index.html) if you have the chance. I just know that node `0.12.0` has bugs so I want to eliminate that as a variable.
",jcrugzz,requiredfield
795,2015-03-21 05:51:21,"@jcrugzz  

My Node.js version has this bug too:


",Behemouth,jcrugzz
793,2015-03-14 17:02:43,"@zalow517 code always helps with comments to explain the exact semantics you expect :). If you have a request come in to the proxy server, you will proxy the request to whatever target you specifiy. The proxy itself is always a mitm. I need more specifics to see whats going wrong and understand what you are trying to accomplish.
",jcrugzz,zalow517
789,2015-03-12 01:07:36,"@feross awesome thanks! :)
",jcrugzz,feross
782,2015-12-07 20:47:11,"@jcrugzz there are two options for `tls.connect`: `hostname` and `host`. Former one specifies TLS hostname, and the latter one DNS host to connect to. I suppose that `hostname` should be `mydomain.com` and `host` should be that IP address.
",indutny,jcrugzz
782,2015-12-07 20:54:13,"Thanks for the quick reply @indutny :), that makes a lot of sense. I'm guessing this check wasn't happening in 0.10 for whatever reason. I know you were optimizing a lot of TLS between then. Does this fix the issue you all are seeing? cc @coolaj86 @russellballestrini 
",jcrugzz,russellballestrini
782,2015-12-07 20:54:13,"Thanks for the quick reply @indutny :), that makes a lot of sense. I'm guessing this check wasn't happening in 0.10 for whatever reason. I know you were optimizing a lot of TLS between then. Does this fix the issue you all are seeing? cc @coolaj86 @russellballestrini 
",jcrugzz,coolaj86
782,2015-12-07 20:54:13,"Thanks for the quick reply @indutny :), that makes a lot of sense. I'm guessing this check wasn't happening in 0.10 for whatever reason. I know you were optimizing a lot of TLS between then. Does this fix the issue you all are seeing? cc @coolaj86 @russellballestrini 
",jcrugzz,indutny
782,2015-12-07 23:24:52,"@dhm116 The suggestion is that you may want to use the object form of `target` so you can specify the specific `host` as well as the `hostname` since the mismatch has to do with the `hostname`. When you `url.parse()` a string `target`, the host and hostname are derived from each other. 

If this does not work I would follow the suggestion of making sure you have the entire chain of `ca`'s necessary
",jcrugzz,dhm116
782,2015-12-08 01:20:20,"Thanks @jcrugzz, we'll try that out in the morning and follow up!
",dhm116,jcrugzz
782,2015-12-09 14:36:23,"@jcrugzz We were able to confirm that modifying the original request Host header value fixed our issue - changes to the target seemed to have no impact. :+1: Thanks!
",dhm116,jcrugzz
782,2016-08-16 23:28:06,"I'm having the same issue with http-proxy 1.14.0 and nodejs 6.3.1. It appears to be checking the hostname of the proxy (localhost) against the certificate of the proxy target (secure.gravatar.com)





Any ideas?

@russellballestrini
@indutny 
@jcrugzz 

Much appreciated :)
",aianus,russellballestrini
782,2016-08-16 23:28:06,"I'm having the same issue with http-proxy 1.14.0 and nodejs 6.3.1. It appears to be checking the hostname of the proxy (localhost) against the certificate of the proxy target (secure.gravatar.com)





Any ideas?

@russellballestrini
@indutny 
@jcrugzz 

Much appreciated :)
",aianus,indutny
782,2016-08-16 23:28:06,"I'm having the same issue with http-proxy 1.14.0 and nodejs 6.3.1. It appears to be checking the hostname of the proxy (localhost) against the certificate of the proxy target (secure.gravatar.com)





Any ideas?

@russellballestrini
@indutny 
@jcrugzz 

Much appreciated :)
",aianus,jcrugzz
782,2016-08-17 00:11:59,"@aianus - sorry you are having trouble - @jplock and I opt'd to terminate TLS on our reverse proxy instead (nginx). Thus we no longer have this issue because we are no longer using NodeJS to deal with TLS.

As a result we were also able to gain an A+ on some TLS checkers.
",russellballestrini,aianus
782,2016-08-17 00:11:59,"@aianus - sorry you are having trouble - @jplock and I opt'd to terminate TLS on our reverse proxy instead (nginx). Thus we no longer have this issue because we are no longer using NodeJS to deal with TLS.

As a result we were also able to gain an A+ on some TLS checkers.
",russellballestrini,jplock
782,2016-11-01 07:51:18,"Thanks @aianus  - That did it for me
",shaialon,aianus
780,2015-03-21 04:24:33,"@coolaj86 Sure. Again a PR is more than welcome :). Closing as `docs`
",jcrugzz,coolaj86
778,2015-02-24 07:03:18,"@swogger Could you show me code to reproduce what you are talking about? There shouldn't be any problem proxying to any website.
",jcrugzz,swogger
776,2015-02-17 22:01:34,"@mike-aungsan this is not a bug, the endpoint you were proxying to timed out and it was logged exactly how you expected in the code. You may want to handle the error in these cases to your client via something like [this](https://github.com/jcrugzz/proxy-server/blob/master/index.js#L53-L65).

If you have an actual question or concern please note that when you submit an issue.
",jcrugzz,mike-aungsan
776,2015-02-17 23:34:18,"@mike-aungsan Can you answer these questions for me?
1. What version did you update from?
2. What dependencies did you update?

`http-proxy` does not read anything from the environment when making its proxy decisions. You provide the target to it explicitly. If there are cases that require http_proxy env variable, you will need to use something like [`node-tunnel`](https://github.com/koichik/node-tunnel), but if it worked before, idk what to tell you with the information you have given.
",jcrugzz,mike-aungsan
775,2015-02-17 17:36:40,"@luke- There are some old issues where we had a lot of people complaining about double slashes which is why the urlJoin method was created. Could you give me the example your using which currently fails? I'd like to cover all the cases as cleanly as possible. Showing me in the form of a test case would be great :smile: 
",jcrugzz,luke-
775,2015-02-19 14:14:36,"@jcrugzz Imo the the proxy itself shouldn't modify the url, also when it's strange :-) My problem was related to a web app which uses path style parameters e.g.http://example.com/controller/action/param1/value1/param2/value2 if value1 is empty in a special case the produced url was http://example.com/controller/action/param1//param2/value2 which couldn't proxied.
",luke-,jcrugzz
775,2015-06-25 16:48:52,"@parente if you can wire up a failing test for me in the tests ill take a stab at making this work for all cases
",jcrugzz,parente
774,2016-01-20 20:51:12,"> If you don't want to merge my branch, then perhaps you should at least document the fact that a line like the one I mentioned will make the proxy behave like a web cache

+1 for closing this PR and making it clearer in the docs that `target` is optional in the `createProxyServer()` options and that it can be passed in to `proxy.web()`. Like @gagern, I thought `target` was required; it took me a while to discover it could be generated dynamically and passed to `proxy.web()` for each request.
",prust,gagern
774,2016-01-20 22:21:15,"@prust Would happily accept a PR with updated Docs :+1: 
",jcrugzz,prust
772,2015-02-11 05:27:45,"@jphaas Ill see what the right thing to do is now and start testing on 0.12 so we can see that status. Thanks for the report
",jcrugzz,jphaas
771,2015-02-10 02:26:50,"@btmdave I'm not sure if I understand your question, could you give an example ideally with code? You can proxy to a local IP address (usually localhost) listening on a different port with no issue. If you are trying to proxy over a protocol that is not `http`, you have found the wrong module.
",jcrugzz,btmdave
769,2017-02-10 15:36:24,Did you figure out how to do this @carlskii ,Jonovono,carlskii
768,2015-02-02 14:23:15,"Excellent thank you @jcrugzz .
",glortho,jcrugzz
767,2015-01-27 17:42:37,"@voronianski use something like [`keep-alive-agent`](https://github.com/ceejbot/keep-alive-agent) or [`agentkeepalive`](https://github.com/node-modules/agentkeepalive) or even the standard `http.Agent`. Just make sure you pass in `maxSockets: 100(+)`

For a why explanation...

We default to `connection: close` when there is no `agent` passed in to work around a bug in node core when we set `agent: false`. We default to setting `agent: false` to begin with as it enables the operating system itself to handle the number of sockets that get opened.
",jcrugzz,voronianski
767,2015-01-27 20:00:24,"@jcrugzz could you help with the right place to add the agent? 

From the docs I see that it's used in `http.request` options, but how it could be passed on http create server?


",voronianski,jcrugzz
767,2015-01-27 20:23:56,"@voronianski its one of the options you pass into the `http-proxy` constructor. So you would change the above to...


",jcrugzz,voronianski
767,2015-01-27 21:58:47,"@jcrugzz thanks!
",voronianski,jcrugzz
767,2015-02-26 04:04:26,"@jcrugzz, I'm trying to wrap my head around why one would want to specify `maxSockets`? It seems that it is not a `maxSockets` value which is making connection to change to 'keep-alive'. It is enough to just have http.Agent instance. I tried to debug core http module, but stuck on what exactly is causing it to pick keepAlive setting even when it is not set to true on the agent instance. Can you please give me a hint? Thanks.
",szarouski,jcrugzz
767,2015-02-27 01:01:09,"@szarouski this is because the default `maxSockets` value is `5` which is insanely low and not recommended for production use at all. The agent itself is in charge of handling `keep-alive`
",jcrugzz,szarouski
766,2015-01-27 15:06:55,"@Mewte hmm this might be something specific to websocket proxying but this still seems odd. @goldfire have you seen anything like this? @3rd-Eden do you have any ideas? Could socket.io somehow cause a leak on the proxy level? Im very interested to see where the issue lies. Could you also list what node version you are using? I'd recommend the latest `0.10.35`.
",jcrugzz,Mewte
766,2015-01-27 15:28:13,"@jcrugzz Thanks for the response, after further running for 10 hours, the memory usage has stabilized at around 135-150mb. Previously I was doing 



inside the proxyServer web request, which I think was causing the memory leak. After moving it to the proxyReq event (as seen in my first post) it seems to be fine. (I must have forgot to git pull on the server I was testing on) Thanks for your help!
",Mewte,jcrugzz
766,2015-01-27 15:57:40,"@Mewte glad to hear it and no problem!
",jcrugzz,Mewte
765,2015-01-22 21:27:30,"@faridz88 are you using version `1.x.x`?
",jcrugzz,faridz88
765,2015-01-23 20:09:48,"@faridz88 your first error was from using  `http-stale-cache-proxy` which uses an old version of `node-http-proxy` that does not work on `0.10.x` properly. The second error is related to the remote server you are proxying to breaking the socket connection. An example of how to handle errors in these cases is [here](https://github.com/jcrugzz/proxy-server/blob/master/index.js#L53-L65)
",jcrugzz,faridz88
765,2015-01-27 06:24:22,"@jcrugzz You are right. I'l discuss the first error on `http-stale-cache-proxy`'s  page and the second error has been handled properly.
Thanks a lot.
",faridz88,jcrugzz
765,2015-01-29 19:32:45,"@faridz88 its using an OLD version of `http-proxy` that does not run on `node 0.10.x` or later. it can only be used on `0.8.x`.
",jcrugzz,faridz88
764,2015-01-20 17:34:36,"@xiaok can you turn this into a failing test? it should not matter if you are doing anything asynchronous before proxying if you are running on `0.10.x`+. 
",jcrugzz,xiaok
764,2015-01-21 03:11:27,"@jcrugzz very strange, when I removed ""server.use(express.limit('5mb'))"" , the proxy worked well.
",xiaok,jcrugzz
764,2015-01-21 16:29:24,"@xiaok this is due to the middleware in question buffering the entire stream into memory in order to assess the length. This breaks the proxy as the request stream you are trying to proxy no longer has any data in it.
",jcrugzz,xiaok
760,2015-01-02 16:21:16,"@todkap 
1. Check the node [docs](http://nodejs.org/api/http.html#http_event_checkcontinue)
2. If the server you are proxying to is handling the actual form data (not your proxy server), you only need to parse it with that destination server. You can avoid the dance with the multi-part parser in the proxy itself
3. If 2 is true, then there would be no need for `connect-restreamer`. 

Otherwise the code looks like it would behave appropriately but your test case did not even test if it did.
",jcrugzz,todkap
760,2015-01-02 16:29:05,"Let me simplify this scenario a bit then since I think we are headed in 
the right direction (note i layered in multer and connect-restreamer after 
hitting many issues).

Here is the updated code.  I have removed the checks for the continue 
since as you note, Node should be handling this for me.  The moment I try 
to do this with a request that has an expect header, I get an immediate 
exception about unable to set headers.   There must be some strange timing 
window here (note this is just a single command line client so no 
threading issues should exist).

Console Output
Example app listening at http://0.0.0.0:3000
Logging inbound request PUT /todkap%40us.ibm.com/cam_espn5.jpg
request body undefined
request files undefined
RAW request headers from client {
  ""user-agent"": ""curl/7.37.1"",
  ""host"": ""127.0.0.1:3000"",
  ""accept"": ""_/_"",
  ""content-length"": ""197616"",
  ""expect"": ""100-continue""
}

http.js:689
    throw new Error('Can\'t set headers after they are sent.');
          ^
Error: Can't set headers after they are sent.
    at ClientRequest.OutgoingMessage.setHeader (http.js:689:11)
    at ProxyServer.app.use.proxyURL 
(/Users/todd/Documents/workspace/mobilecloudsamples/bluemix_objectstorage_bug/app.js:17:13)
    at ProxyServer.emit 
(/Users/todd/Documents/workspace/mobilecloudsamples/bluemix_objectstorage_bug/node_modules/http-proxy/node_modules/eventemitter3/index.js:75:35)
    at ClientRequest.<anonymous> 
(/Users/todd/Documents/workspace/mobilecloudsamples/bluemix_objectstorage_bug/node_modules/http-proxy/lib/http-proxy/passes/web-incoming.js:113:27)
    at ClientRequest.emit (events.js:117:20)
    at http.js:1762:9
    at process._tickCallback (node.js:419:13)

thanks!
todd

todd kaplinger
STSM, Mobile Cloud Platform Architect (IBM MobileFirst for iOS)
ibm master inventor

From:   Jarrett Cruger notifications@github.com
To:     nodejitsu/node-http-proxy node-http-proxy@noreply.github.com
Cc:     Todd Kaplinger/Durham/IBM@IBMUS
Date:   01/02/2015 11:21 AM
Subject:        Re: [node-http-proxy] Unable to proxy multi-part form 
(#760)

@todkap 
1.      Check the node docs 
2.      If the server you are proxying to is handling the actual form data 
(not your proxy server), you only need to parse it with that destination 
server. You can avoid the dance with the multi-part parser in the proxy 
itself
3.      If 2 is true, then there would be no need for connect-restreamer. 
Otherwise the code looks like it would behave appropriately but your test 
case did not even test if it did.
‚Äî
Reply to this email directly or view it on GitHub.
",todkap,todkap
760,2015-01-02 17:29:44,"@todkap Ahh ok. So it seems that when you don't handle the `write-continue` case when the client sends a 100 request, it must fast-laned even when proxied where the .`on('socket')` event doesn't even allow headers to be set. Im looking to see where this happens in node core as this is kind of interesting. 

But my recommendation here is to put back the logic you had detecting the expect 100 request which was the problem I was inferring previously. I mistakenly made you change the code so that the 100 request was being proxied (because of how middleware works I guess or the writeContinue not happening automatically). You want to proxy just the payload and have your proxy-app tell the client to send the payload so that it can be proxied to the proper destination. I believe that is what is causing the setHeader error. 
",jcrugzz,todkap
758,2014-12-22 16:28:59,"@yleemj use the [`prependPath`](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L41) and set it to `false`. Then just provide the path you want to proxy to in the target URL.
",jcrugzz,yleemj
758,2014-12-23 17:22:08,"@yleemj Just for posterity, `req.originalUrl` and `req.baseUrl` have zero impact on how the request is proxied. `http-proxy` only cares about the `req.url`, the options you give it and the `target`. Now I'm still unsure why manually setting the req.url to `/` changes other behavior but I have provided an `ignorePath` option which will ignore the path that is given by the incoming request. Will this solve your use case? Your latest description honestly made your use case less clear.
",jcrugzz,yleemj
758,2015-04-19 22:22:29,"ignorePath is currently an unmerged PR. @ferozed did you use that branch? Let me merge the pull-request and bump the version and see if this fixes the issue you guys are having.
",jcrugzz,ferozed
757,2014-12-22 17:00:41,"@minrk Since you were doing a bunch of testing here, any ideas? The two commits that were made only seem to properly close sockets in cases where they were bad. I don't see it causing issues.

@goldfire What node version are you running on? I'm curious if an upgrade there had anything to do with it or just the upgrade of the `http-proxy` dep. 
",jcrugzz,goldfire
757,2014-12-22 17:12:12,"@goldfire did you try, `1.5.2` at all? I'd like to narrow it down to one of these commits.
",jcrugzz,goldfire
757,2014-12-22 17:20:57,"@goldfire awesome, thanks for the work here, I appreciate it :). I'd like to do what I can to help you get on the newest version with full stability.
",jcrugzz,goldfire
757,2014-12-22 21:10:38,"@goldfire sorry for causing you trouble, since it seems like these were my changes. One difference appears to be that `socket.end()`  is called in the error callback, which you do as well, so I think `socket.end()` is called twice. I'm not sure if that would be an issue, though. Can you see any other details about the circumstances of the failure? Does it disconnect when failover is happening, or during normal working operation? Can you find any commonality among users seeing the issue (e.g. browser or OS)?

It's definitely possible that one or more of the conditions under which sockets are closed is too general. My guess is that it would be bcd8a564a802512c90df20353ca341a1d8c84501, since you already had the change in c62766391e54069c7cf82f0135536aeabad7cd90 in your own error callback. I can't think of circumstances where that would be the wrong decision, but you might instrument the code (read: console.log) to see which of these is causing your disconnects, and then maybe we can figure out why the disconnects are incorrect.
",minrk,goldfire
757,2014-12-30 22:36:14,"@goldfire thanks for the update. It looks like that is the commit we can get revert. I understand what you were going for there @minrk but it seems there are some edge cases where that isn't set yet it is still successfully used for websocket handshakes. Could be a browser related thing I suppose, but anyways this is super weird. Please let us know if you get anymore insight into when this happens, I'd love to understand the why :). 
",jcrugzz,goldfire
757,2014-12-30 22:36:14,"@goldfire thanks for the update. It looks like that is the commit we can get revert. I understand what you were going for there @minrk but it seems there are some edge cases where that isn't set yet it is still successfully used for websocket handshakes. Could be a browser related thing I suppose, but anyways this is super weird. Please let us know if you get anymore insight into when this happens, I'd love to understand the why :). 
",jcrugzz,minrk
757,2014-12-31 18:45:54,"@goldfire hmm it may have to do with just listening to the response event in general but thats still kind of weird. Socket hang up usually has to do with a forced disconnection on the destination server
",jcrugzz,goldfire
757,2015-01-03 00:20:01,"@goldfire thanks for confirming my thought. I'll see what node core has to say about those cases in `http.js` Just to confirm, are you running on `0.10.35`? (just for reference when I go to look at the internals)
",jcrugzz,goldfire
757,2015-01-03 05:03:54,"@goldfire no worries, theres probably no big changes there. thanks for the reference.
",jcrugzz,goldfire
754,2014-12-16 17:26:10,"@Tarang would love a PR for an update :)
",jcrugzz,Tarang
750,2014-12-08 19:52:32,"@magicalhobo thanks for the contribution! Unfortunately we cannot make this assumption because the host property itself can include the port. (see how the [`url`](http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost) module behaves.) There will need to be something that better fits the type of inputs we get from a user.
",jcrugzz,magicalhobo
750,2014-12-08 21:15:42,"@magicalhobo you can see the fix I made above, just want to make sure it works as expected in all cases
",jcrugzz,magicalhobo
747,2014-11-30 23:08:42,"@Rush can you pinpoint whats being passed in? There should be a test here to prevent these types of failures and I would love to add one.
",jcrugzz,Rush
747,2014-12-01 21:23:37,"@Rush hmmm thats weird, could you turn this into a failing test case. That would be amazing <3 
",jcrugzz,Rush
747,2014-12-01 22:08:39,"Hmm, not really cause that's how I use `node-http-proxy`, as in I don't
want to pass a string as a target since I need to parse the url first
myself.

2014-12-01 22:23 GMT+01:00 Jarrett Cruger notifications@github.com:

> @Rush https://github.com/Rush hmmm thats weird, could you turn this
> into a failing test case. That would be amazing <3
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/nodejitsu/node-http-proxy/issues/747#issuecomment-65137006
> .
",Rush,Rush
747,2014-12-01 23:03:31,"@Rush Im not saying that you should be passing a string as the `common.setupOutgoing` function accepts `target` as an object. It gets preparsed before this function. What I don't understand is how this object is causing your tests to fail because nothing should be `null` which is why I'd love for you to take this object and any other aspects of your test that are contextually relevant and produce a failing test so we can get to the bottom of this.

It seems to center around [this](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/common.js#L61-L74) logic which to me seems impossible to be `null` but I'd love to be proved wrong :).
",jcrugzz,Rush
747,2014-12-08 20:31:11,"@Rush are you still experiencing this? Im looking to make the data input validation a bit more robust but I'd really like to see the full test case here :)
",jcrugzz,Rush
747,2015-04-06 14:19:48,"Hey @Rush , 

Did this fixing solve your problem?
Despite `common.js` file had fixed I get same error.

Is there any one in my case?
",efkan,Rush
747,2015-04-06 14:41:09,"@efkan can you give more information?
",damonmcminn,efkan
747,2015-04-06 15:58:58,"Thanks @damonmcminn ,

I've opened a new issue;
https://github.com/nodejitsu/node-http-proxy/issues/800
",efkan,damonmcminn
746,2014-12-01 15:21:46,"@koolc he meant to put this test case in the same PR as your fixes to show that both the test case and the changes made pass. Just makes for cleaner merging but its not a huge deal.
",jcrugzz,koolc
745,2014-12-01 03:27:02,"@codeuniquely For the first point, that is correct. The path of the incoming request will be used.

it seems like what you want here is to conditionally use the `bodyParser` rather than on EVERY request that comes through your express server. When the body of a request gets parsed, its no longer contained in the `req` stream object so that data does not get passed along when you proxy the request. Try avoiding using the `bodyParser` and `connect-restreamer` at all and see if you can successfully proxy the request as you intend.
",jcrugzz,codeuniquely
744,2014-11-25 16:12:20,"@koolc is there a failing test this is compensating for? To be fair this logic is still not 100% correct but this change doesn't look like the right fix.
",jcrugzz,koolc
744,2014-11-26 07:17:28,"@jcrugzz @samccone 
This is a online url 'http://g.tbcdn.cn/??kissy/k/1.4.0/seed-min.js,kissy/k/1.4.0/base-min.js,kissy/k/1.4.0/json-min.js,kissy/k/1.4.0/dom/base-min.js,kissy/k/1.4.0/event/base-min.js,kissy/k/1.4.0/event/custom-min.js,kissy/k/1.4.0/event/dom/base-min.js,kissy/k/1.4.0/event/dom/focusin-min.js' on the Alibaba CDNs.  You can take it
for test.

This is a combo url(This is a technical measures that multiple requests will be merged into one in order to reduce the number of requests), and '??' is a combo tag.

I mainly think of this case, so maybe the changed logic is still not 100% correct, hope you can revise it. 
",koolc,jcrugzz
744,2014-11-26 12:49:10,"@koolc could you write a test case using this type of URL? I will look closer at the logic
",jcrugzz,koolc
744,2014-11-27 03:56:22,"@koolc In terms of a test case, could you add a test case to test of the `common.setupOutgoing` function in [here](https://github.com/nodejitsu/node-http-proxy/blob/master/test/lib-http-proxy-common-test.js)
",jcrugzz,koolc
744,2014-12-01 03:28:26,"@koolc sorry for the late reply, once that change you already suggested is done, this should be merged. If you have anymore URL test cases for this function, it would be awesome to get more tests around this.
",jcrugzz,koolc
744,2014-12-01 15:18:51,"@koolc test cases are not required, I was just curious if you had anymore crazy URLs that could be sueful for testing ;). Just make the change for `retSegs.push.apply(retSegs, lastSegs);` and I will merge.
",jcrugzz,koolc
744,2014-12-02 04:22:07,"@koolc replied
",jcrugzz,koolc
743,2014-11-25 16:14:19,"@jleal52 i like this as an idea but it should have a different name. as there is `start` and `end` events for regular http proxying.
",jcrugzz,jleal52
743,2014-12-09 03:43:12,"@bruce-one that seems reasonable. Maybe `open` `close` to complete the pairing?
",jcrugzz,bruce-one
741,2014-11-21 17:08:56,"@samccone this looks good! Could you add a test for this and update the docs related to this option? Thanks for the contribution!
",jcrugzz,samccone
741,2014-11-23 18:31:46,"hey @jcrugzz specs and docs are all added. 

thanks again for your time, and work on this handy lib.
",samccone,jcrugzz
741,2014-11-23 22:58:43,"@samccone looks great. I forgot the only one nit here that I will post on the code. Will merge once thats done. Thanks!
",jcrugzz,samccone
741,2014-11-24 00:22:29,"all updated @jcrugzz :tanabata_tree: 
",samccone,jcrugzz
741,2014-11-25 14:41:31,"Hey @jcrugzz was there anything else you needed from me?
",samccone,jcrugzz
741,2014-11-25 22:08:50,"@samccone sorry got caught up with things so I didn't get to it. LGTM. Ill post back here with some style nits that I make for next time :). Thanks!

 Im also curious about the use of a `context` function as i dont see it anywhere in the mocha docs.
",jcrugzz,samccone
737,2014-11-15 15:20:43,"@erupenkman hmm, this is something I'd consider. You mind adding a test? @indexzero you have any thoughts on this?
",jcrugzz,erupenkman
737,2014-11-17 10:58:38,"@jcrugzz yes, tests are definitely a must. There are a lot of error cases in this scenario that could leak fds I think.
",indexzero,jcrugzz
737,2015-07-04 22:59:54,"i'm in need of this myself.  i wish there were a way to just do something like this below.  

didn't dive too deeply into the code but it looks like by the time proxyRes emits res is already sent/sending? (headers at least)

if proxyRes events fired sync before res sending started it should be possible to do this without leakage since the original proxyRes is torn down prior to creating the followup proxied request.

this would also address @DesignByOnyx 's usecase since you could abort the original proxyRes and then just pipe your stream directly to the original http res.



if i can't find a hackaround i might take a crack at it if that solution sounds acceptable in theory.
",cmawhorter,DesignByOnyx
736,2014-11-12 21:46:06,"@richardkazuomiller yea essentially, good find! That should just be linked somewhere. @indexzero just hasn't formalized a [`jscs`](https://github.com/jscs-dev/node-jscs) for it yet. 
",jcrugzz,richardkazuomiller
735,2014-11-12 18:05:02,"@jleal52 awesome thank you! :).
",jcrugzz,jleal52
734,2014-11-12 18:22:25,"Thanks @jcrugzz, I appreciate the suggestion.  I actually have keep-alive disabled between the proxy and the origin server intentionally due to the current architecture and some issues with the origin server but would like to have keep-alive between clients and the proxy server for efficiency.

My current workaround is to listen for the `proxyRes` event and set `Connection: keep-alive` on the proxy response (so it will be copied to the client response) when possible.  Overwriting the `Connection` header in the client request had caused my checks for client compatibility to fail (since it always appeared that the client was sending `Connection: close`), but after discovering this issue I just set another property on the request with the original value of the `Connection` header which I can test in the `proxyRes` listener.  It seems to work well.

So I'm set, but it may take users with less debugging and HTTP experience a while to figure out what is going on, or to even realize that they are not getting HTTP keep-alive to clients.
",kevinoid,jcrugzz
733,2014-11-11 03:29:15,"@richardkazuomiller this is a good start. I think this function still needs some more love to handle the other edge cases but thank you very much! I'll merge and fix the stylings. Just not that we like less `var` statements ;)
",jcrugzz,richardkazuomiller
732,2014-11-07 18:03:33,"@indexzero I apologize if I am not describing this properly.

I am really trying to do something simple, I just want to proxy a request to the website ""http://bing.com"" as well as ""https://bing.com"". I can get the ""http://bing.com"" to work, but I cannot get a request to work for ""https://bing.com"".

I don't need the actual nodejs proxy server to be HTTPS, unless that is required.

I am just trying to put together a simple reverse proxy.

If I configure Firefox with the IP and PORTS for the code above, a request to ""https://bing.com"" does not succeed. I don't see the request in the nodejs logs, and Firefox never receives a response.
",odmarkj,indexzero
732,2014-11-07 18:39:25,"@indexzero Thank you for your patience with this. I understand why that would be necessary, but I still cannot get it to work. When the website is ""https://bing.com"", my script does not see the request. If I use ""http://bing.com"", it works as expected with the code below.



I should also note that the request appears to hang indefinitely until I control+c to kill it in the terminal request when I try to visit ""https://bing.com"" with this nodejs proxy configured in Firefox.
",odmarkj,indexzero
732,2014-11-07 19:02:05,"@indexzero i think the confusion here is related to HOW a proxy is used by a browser and what changes in those situations. This is why I made the toProxy option because I was able to confirm that by not cutting the path in those cases, it worked. There is definitely some other complexity associated with properly using this as THIS type of proxy and proxying https traffic, especially when the server being created is HTTP.
",jcrugzz,indexzero
732,2014-11-07 19:06:23,"@jcrugzz Now we're talking.

Do you have any examples of that?

When I add the toProxy option, it doesn't seem to change anything.


",odmarkj,jcrugzz
732,2014-11-07 19:16:08,"@odmarkj this is the other complexity im unsure of when proxying https. I believe you may have to tunnel the request like i suggested in the other issue #700. Do some more investigation on how this is supposed to work because your http server cannot sign for `https://bing.com` obviously since it does not have authority.
",jcrugzz,odmarkj
732,2014-11-07 19:26:20,"I really just want to forward the request, I don't want to do anything with it. I am just trying to setup a dead simple reverse proxy, but it seems this library was not designed to handle that, or at least, not when a majority of the traffic is to HTTPS websites.

I really wanted to make nodejs work for this, but it looks like I will just have to go back to more robust and well supported software such as Squid.

Thanks for your time. @jcrugzz If you would be interested in helping me fix this, I would be more than willing to pay. I am in a real tight bind. Thanks.
",odmarkj,jcrugzz
732,2015-05-18 23:19:02,"Hi @odmarkj, I'd a similar issue and I could make it work. I've created a gist with a https capable reverse proxy: https://gist.github.com/pose/397be6f20433a1346004 . Hope that helps!
",pose,odmarkj
732,2016-09-26 15:37:44,"Hi @odmarkj,

Were you able to accomplish this eventually?  

@pose your example will work for one proxy, but not in case of a chain as @odmarkj specified.
",pronskiy,pose
732,2016-09-26 15:37:44,"Hi @odmarkj,

Were you able to accomplish this eventually?  

@pose your example will work for one proxy, but not in case of a chain as @odmarkj specified.
",pronskiy,odmarkj
731,2014-11-07 17:26:59,"@zhang-ning need more information to go on. Could you provide a complete code sample?
",indexzero,zhang-ning
727,2014-10-31 22:43:06,"@mburbea you can listen for the `proxyReq` event and modify/add headers before the request is sent. 
",jcrugzz,mburbea
727,2014-11-06 17:06:59,"@mburbea I realized you do want `proxyRes` as the event is emitted right before we go through the function you have modified in the PR. So while not elegant, the solution would be as follows.



The rest is taken care of by the exact function you modified since you were able to touch the headers before hand. I will still consider your PR if this use case is large enough, I just dislike the custom logic bit as it seems niche to me.
",jcrugzz,mburbea
727,2014-11-07 17:21:57,"@mburbea I still believe there should be no agent by default but we should be clear in the documentation that this disables keepalive and to suggest using this module for that particular case. I'd definitely take a PR for the documentation :smile: 
",jcrugzz,mburbea
723,2014-10-29 02:52:48,"@whitecolor awesome thanks!
",jcrugzz,whitecolor
722,2014-10-28 15:25:58,"@whitecolor LGTM. If you could add a simple test and some docs around this it would be great :).
",jcrugzz,whitecolor
721,2014-10-29 20:17:38,"@whitecolor what do you mean? the event is emit before anything happens. The only caveat here is that you must be using the event emitter interface and not passing a callback. this should be fixed in later versions.
",jcrugzz,whitecolor
721,2014-11-08 18:44:59,"@whitecolor The `proxyReq` event (or any event for that matter) will not be emitted if you provide an error callback to either the `proxy.web` or `proxy.ws` methods.

This behavior is not documented anywhere, to my knowledge. I had to read the code to figure it out.
",hgwood,whitecolor
721,2014-11-09 03:40:19,"@hgwood yes its remanent of when the callback use case used to not be an event emitter. This will be changed, if you want to take a stab at it, go for it :).
",jcrugzz,hgwood
718,2014-10-21 15:22:21,"@juliendangers the `error.code` should tell you. it should be `ETIMEDOUT` in timeout cases. Hmm if that code block is pulled from the code, we should technically let the proper error propagate instead of aborting in these cases. Play around with this if you can until I have time to look at it.
",jcrugzz,juliendangers
718,2014-10-21 15:50:53,"@jcrugzz the above code is from web-incoming.js and this is the reason why the error code is ECONNRESET
",juliendangers,jcrugzz
718,2014-10-21 18:00:06,"@juliendangers if you could add a failing test for this, that would be super helpful! 
",jcrugzz,juliendangers
718,2014-10-22 12:25:55,"@jcrugzz there is already a test, which ensures that error code is ECONNRESET : 


",juliendangers,jcrugzz
718,2014-10-22 12:47:07,"@juliendangers thanks for doing the legwork for me. Fix will be out momentarily
",jcrugzz,juliendangers
716,2014-11-28 17:02:47,"Thanks @No9 sorry for the wait!
",jcrugzz,No9
713,2014-12-01 18:58:10,"@runspired `proxyReq.headers` will be null because headers are stored in a ""private property"" (_headers) of the [`OutgoingMessage`](https://github.com/joyent/node/blob/v0.10.33-release/lib/http.js#L683-L697). I agree that we need more documentation here and I would love a pull request to help this along :).
",jcrugzz,runspired
713,2014-12-01 19:06:35,"@jcrugzz I know the order of events, specifically I've got an issue where a photo upload that was proxied to our API was working before a server migration but not after.  The API returns ""method not allowed"" when sending through the proxy but sending the POST request directly works.  Suspect it's something to do with an added or altered header, so trying to see the final state of the request just before it's proxied and the unmodified response before it's send back.

is the private property ""private"" (meaning OutgoingMessage._headers) or is it a scoped var I'm not going to be able to get access to?
",runspired,jcrugzz
713,2014-12-01 19:11:52,"@runspired there shouldn't be any reason you cannot output the headers when specifying the `proxyReq._headers` variable
",jcrugzz,runspired
713,2014-12-01 20:23:17,"@jcrugzz when I log `proxyReq._headers` I see the `host` is the location of the proxy, not the location being proxied to.  Is this changed later, or is this mistakenly not updated?
",runspired,jcrugzz
713,2014-12-01 21:24:09,"@jcrugzz that in fact turned out to be my issue.  The ""host"" header is not updated to match the host of the host the proxy is pointing to.
",runspired,jcrugzz
713,2014-12-01 23:05:28,"@runspired that is expected, it seems you may be looking for the [`changeOrigin`](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L43) option if you want to modify the host of the request based on the `target` you get it. Or you can manually set it on the request itself as it is copied over.
",jcrugzz,runspired
712,2014-10-09 09:56:49,":+1: thank you for your contribution @zhudan. What are your thoughts @jcrugzz? You've been looking this over most recently.
",indexzero,zhudan
712,2014-10-09 13:24:40,"@zhudan LGTM. My only question is why the custom re-streamer rather than using `connect-restreamer`. Just curious as it is the same logic.
",jcrugzz,zhudan
712,2014-10-09 13:33:18,"@jcrugzz yes, same logic, but just for json body.  his code has bug, https://github.com/dominictarr/connect-restreamer/blob/master/index.js#L15  should be: req.emit('data', req[options.property]).
when the body is xml, it can not use JSON.stringify(req.body), because it will be escaped, then the content-length (https://github.com/nodejitsu/node-http-proxy/issues/704#issuecomment-56791176)

Forgive my bad English .
",zhudan,jcrugzz
712,2014-10-09 13:48:06,"@zhudan gotcha, it looks like you would have to pass it a no-op stringify function for that particular case.
",jcrugzz,zhudan
711,2014-10-09 00:45:43,"@javadoug we expect to receive a full URL string or an object that has been parsed by [`url.parse()`](http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost). This is why I just deal with URL strings when it comes to config as it simplifies it infinitely.
",jcrugzz,javadoug
711,2014-10-09 03:02:17,"@jcrugzz thanks for getting back. pls consider an alternative, perhaps, checking with regex /^https:?/.test(protocol). And if the code construct urls from the parts, the url class supports protocol with and without the colon.
",javadoug,jcrugzz
711,2014-10-09 13:23:12,"@javadoug I'd take a PR with a proper regex :). I'd export a protocol regex from `common` so it can be used in both places. Should be something like `exports.protocolRegex = /^https|wss/`. This also makes sure its precompiled.
",jcrugzz,javadoug
711,2014-12-09 04:05:19,"@javadoug implemented in 1.7.3
",jcrugzz,javadoug
711,2014-12-09 14:29:42,"thank you.

On Dec 8, 2014, at 11:05 PM, Jarrett Cruger notifications@github.com wrote:

> @javadoug implemented in 1.7.3
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",javadoug,javadoug
709,2014-10-01 11:10:20,"@minrk good looks! Thanks again.
",jcrugzz,minrk
708,2014-10-01 00:55:34,"@minrk based on what i understand [here](https://github.com/joyent/node/blob/v0.10.32-release/lib/http.js#L1608-L1621) this looks like the correct behavior. Awesome job!
",jcrugzz,minrk
708,2014-10-01 00:58:27,"@minrk my only question is if we should do something about the response as well in the case where it is not an upgrade request.
",jcrugzz,minrk
707,2014-09-30 19:27:35,"@minrk whoops, fixed this before i saw the PR. Thanks!
",jcrugzz,minrk
706,2014-09-29 20:38:06,"@thlorenz what if we emit the proxySocket in an event on the `httpProxy` instance to be handled separately. It seems like that could work.
",jcrugzz,thlorenz
706,2014-09-29 20:48:21,"@jcrugzz that'd be even better cause then I'd know when I can subscribe to its event instead of having to test if its there yet or not.

Do you want me to update the PR to do that? Only question is what's our event emitter? The only one I see inside `ws-incoming.js` is the `server`. That'd also be hacky to emit things on the server I guess.

Any other emitters you see?
",thlorenz,jcrugzz
706,2014-09-29 21:28:17,"@thlorenz naming is just terrible here. The `server` object thats passed in is the actual proxy instance.
",jcrugzz,thlorenz
706,2014-09-29 21:42:30,"@thlorenz make it `proxySocket` for consistency with other events. Other than that, just document the event in the readme and I'll merge when ready :).
",jcrugzz,thlorenz
706,2014-09-30 02:34:11,"@thlorenz thanks!
",jcrugzz,thlorenz
706,2014-12-30 14:56:07,"@glasser id be ok with emitting multiple arguments on that event. Submit a PR with an ordering that makes sense.
",jcrugzz,glasser
705,2014-09-26 04:01:35,"@Jimbly Thanks!
",jcrugzz,Jimbly
704,2014-09-24 07:53:12,"@zhudan those are probably out of date to begin with. We could really use your help updating them :)
",indexzero,zhudan
704,2014-09-25 08:53:34,"@indexzero  when i post a xml body, i want modify this body, but the proxy post the xml is escaped ("""""" become ""\""""), so the content-length header is smaller than the length of body. it's can not post all xml.

the code is this line, https://github.com/nodejitsu/node-http-proxy/blob/caronte/lib/http-proxy/passes/web-incoming.js#L117 ; i modified this line to proxyReq.end(req.rawbody), it's work, but it can not work in all environment.

i really want to  know why ? can you tell me? thank you~
",zhudan,indexzero
704,2014-10-08 09:07:51,"@indexzero Ok, i will update later.
",zhudan,indexzero
703,2014-09-23 14:12:06,"@samcday could you submit this in the form of a broken test case? It must be too simplistic. It may be fixed by [`url-join`](http://browsenpm.org/package/url-join) if you want to submit a fix with that broken test case. Otherwise I'll give it a look later today
",jcrugzz,samcday
703,2014-09-25 13:16:06,"@jcrugzz not sure I'll have time to look into this further. I think the information I set out in the original issue description is enough to reliably reproduce the problem.

I ended up just rolling my own proxying using `mikeal/request`, since it handles client proxying pretty elegantly, and I didn't really need any of the other bells-and-whistles from `http-proxy`.
",samcday,jcrugzz
703,2014-11-04 13:21:10,"@yulesyu will take a pull request with added test!
",jcrugzz,yulesyu
700,2014-09-16 18:28:01,"@earroyoron could you give some code and maybe be more specific on the issue? If there is another proxy in the mix that is being tunneled through, you probably want to pass in something like [`tunnel`](http://browsenpm.org/package/tunnel) as an agent. This is common for corporate proxies. Otherwise I'm not quite sure what you are trying to do so more info would help :)
",jcrugzz,earroyoron
700,2014-09-18 04:02:16,"@jcrugzz Trying to be more specific:

I have the below code working; in that scenario:
CLIENT --> PROXY --> TARGET (https://somewhere.com)
But I need that proxy do not connect to target. My proxy has a list of operative proxies and I have to use a different one for each client request so:
CLIENT --> PROXY --> PROXY2 --> TARGET 
Here I cannot manage that proxy will forward the client, I think due to the connect (proxies are http but final target is ssl)

This is my code working for the first scenario:

// Create an HTTP tunneling proxy
var proxy = http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('okay');
});

proxy.on('connect', function(req, cltSocket, head) {
  // connect to an origin server
  var srvUrl = url.parse('https://' + req.url);
  console.log(JSON.stringify(srvUrl) + "";""+srvUrl.port +  'host'+srvUrl.hostname
);
  var srvSocket = net.connect({'port': srvUrl.port, 'host':srvUrl.hostname}, function() {
    cltSocket.write('HTTP/1.1 200\r\n' +'Proxy-agent: Node-Proxy\r\n' + '\r\n');
    srvSocket.write(head);
    srvSocket.pipe(cltSocket);
    cltSocket.pipe(srvSocket);
  });
});
",earroyoron,jcrugzz
700,2014-10-21 20:14:39,"@gm112 I tried to email you, but it looks like your domain is down.

Can you give an example of what that would look like? A forwarded request using http.request?
",odmarkj,gm112
699,2014-09-12 16:57:14,"@STRML Could you add test so @jcrugzz doesn't break it again ;-)?
",3rd-Eden,STRML
699,2014-09-12 16:57:59,"Yep - working on that right now, just figured I should get the fix in ASAP.

On Sep 12, 2014, at 12:57 PM, Arnout Kazemier notifications@github.com wrote:

> @STRML Could you add test so @jcrugzz doesn't break it again ;-)?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",STRML,STRML
699,2014-09-12 20:24:31,"@STRML thanks a ton for the fix. I go and try and fix a windows bug and I do something terrible xD. Im very curious of the case that caused the path to be prefixed with `/`. Would you mind sharing?
",jcrugzz,STRML
699,2014-09-12 20:56:53,"@jcrugzz It could happen two ways, possibly resulting in `///`. It is suggested, but not documented as a requirement, that there should be no trailing slash in the target or leading slash in the proxied path.

I had been using a target as a deep path, something like `http://localhost:3000/api/`, and my proxied paths were read from `req.url` so they were often something like `/user/login`. While `path.join()` handled this properly, your code would create `http://localhost:3000/api///user/login`.

Understandably there shouldn't be a trailing slash in the target, but it is very common for there to be a leading slash in the proxied path (from req.url), and this commit broke that case as well with a double slash.
",STRML,jcrugzz
698,2014-09-15 16:51:37,"@bbarni this was fixed in `1.4.3`
",jcrugzz,bbarni
696,2014-09-12 01:32:32,"@solidspark looking at that functionality, we can totally add that as an option with it defaulted to false. I will most definitely take a pull request :smile: 
",jcrugzz,solidspark
696,2014-10-28 05:07:02,"@whitecolor could you submit a simple pull request?
",indexzero,whitecolor
693,2014-09-08 21:32:02,"@EndangeredMassa One thing I would do though is also support forward requests. Follow the convention we use of `options[forward || 'target']`. Otherwise this is great, thanks for the effort!
",jcrugzz,EndangeredMassa
693,2014-09-08 22:23:39,"@EndangeredMassa its passed in as a variable so it does an undefined check relying on the `||` operator to default to `'target'` if its not a forward request. See [here](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L101).

And this looks great, thanks!
",jcrugzz,EndangeredMassa
693,2014-09-10 16:57:02,"Im realizing that this shouldnt necessarily be default behavior. This should be configured in some way. @EndangeredMassa naming suggestions? Seems like a boolean option is the best way to deal with this.
",jcrugzz,EndangeredMassa
693,2014-09-10 20:23:18,"@EndangeredMassa Yea that's understandable. Im guessing our case at nodejitsu is the special case as it is more specific to how couchdb interprets the request. We currently proxy to couchdb instances with [`smart-private-npm`](https://github.com/nodejitsu/smart-private-npm) by setting the `host` to `registry.nodejitsu.com` for example and the URL is `https://myCouchdb.com/registry`. This change currently breaks the way we have been proxying. Ill think of a good option for this I suppose as that seems like it will be what is necessary.
",jcrugzz,EndangeredMassa
693,2014-11-11 20:20:07,"@manast it does not break backwards compatibility. It introduces a new feature that allows for the path to be part of the `target` when creating `HttpProxy` instances.
",indexzero,manast
693,2014-11-11 21:00:38,"@indexzero in my opinion that is not really the case, because even if not supported before, if you happen to have a path in the target, the new behaviour would break things. It is a bit in the grey zone, but I think the safest bet would have been to have it disabled by default, users wanting to use the new feature would have been forced to enable it manually. For instance, before this feature existed, many people created its own third party code for adding it, this code usually left the target with the complete path since it was not necessary to parse it just to remove it.
Anyway, it is too late now for anything so pointless discussion other than flagging that since http-proxy is so critical in many deployments, maintaining backwards compatibility should be taking very seriously.
",manast,indexzero
692,2014-09-08 02:42:02,"@hynese use the `xfwd` option as seen [here](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L38). With that set to true you can check the `x-forwarded-for` header to see the original IP address.
",jcrugzz,hynese
691,2014-09-16 18:25:00,"@minrk only problem I have here is that we will probably leak a socket with `keep-alive` true and having agent = false but firefox will be the only case. 

In regards to the regex, I think you might want `.test` to get a proper truthy value and to call it on the regex itself. Could you also add a test for this? Appreciate the contribution! :)
",jcrugzz,minrk
691,2014-09-16 19:42:39,"@minrk excellent, thank you!
",jcrugzz,minrk
690,2014-08-29 19:21:57,"@minrk this feels like a bug in firefox's websocket implementation as the tests pass with the `ws` library that we use for testing. Browsers are notorious for having broken websocket implementations. @3rd-Eden what does this look like to you? (@3rd-Eden is realtime web expert)
",jcrugzz,minrk
690,2014-08-29 19:47:31,"@minrk @jcrugzz Firefox should implement the latest specification of the WebSocket protocol, so I don't see anything obvious that should be wrong here. 
",3rd-Eden,minrk
690,2014-08-29 19:47:31,"@minrk @jcrugzz Firefox should implement the latest specification of the WebSocket protocol, so I don't see anything obvious that should be wrong here. 
",3rd-Eden,jcrugzz
690,2014-08-29 19:49:03,"@minrk Are you running firefox without any plugins?
",3rd-Eden,minrk
687,2014-09-30 19:29:08,"Closing as a duplicate of #527. Thanks @jondubois!
",indexzero,jondubois
686,2014-08-21 23:50:54,"@joeyespo thanks!
",jcrugzz,joeyespo
685,2014-08-23 19:09:34,"@brod the example you found uses `http-proxy` `0.10.x` which had a different api. If you modify it to work with the new conventions, it seems like it should work. Checkout the readme.

@philippotto also has a good idea
",jcrugzz,brod
685,2014-08-23 19:09:34,"@brod the example you found uses `http-proxy` `0.10.x` which had a different api. If you modify it to work with the new conventions, it seems like it should work. Checkout the readme.

@philippotto also has a good idea
",jcrugzz,philippotto
684,2014-08-21 14:51:18,"@anweiss looks like a DNS lookup error. Could be based around your connection or the dns service you are using.
",jcrugzz,anweiss
682,2014-10-07 04:19:49,"Thanks @kadishmal :grinning: 
",indexzero,kadishmal
681,2014-08-18 14:46:54,"@lfrankqy You are correct, this is flashsocket causing this issue. You don't have access to configuring socket.io in your code? This shouldn't be possible
",jcrugzz,lfrankqy
680,2014-08-15 20:07:43,"@banduk could you give me an example of how you are using it?
",jcrugzz,banduk
680,2014-08-15 20:47:26,"@banduk in this case its the app that you are proxying to that would have already written the headers, not `http-proxy` itself. [This](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L144-L160) is all we do. `http-proxy` is just finishing the reverse proxy while you attempt to hijack it in the `proxyRes` event. What you are trying to do is not currently possible with the api. Its currently not possible to intercept the stream before its piped into the original response but this is something I have thought about.

Would allowing it to be possible to inject a transform stream before returning the response solve your problem?
",jcrugzz,banduk
680,2014-08-15 21:17:45,"@jcrugzz, that's what thought; that this is not what  `http-proxy` do...

I'm using `http-proxy` as an OAuth Proxy, So I need to verify from the `req` and sign `res`. If the transformation your suggesting are like [this](https://github.com/nodejitsu/node-http-proxy/pull/660#issuecomment-46013477), I don't think it would be useful as it would not allow me to modify the header (am I right?)
",banduk,jcrugzz
680,2014-08-16 15:04:04,"@banduk well what i realized is that any of these custom transform streams would need to also inherit from an actual request and response object and automatically pass along headers on('pipe'). There needs to be a module around this to make it possible. I believe it would allow you to modify the header as there wouldn't be a race condition on whether they were sent already or not.
",jcrugzz,banduk
680,2014-08-18 14:46:44,"@jcrugzz So I'm sure this solves my problem, yes..
I'm just starting to code on node and I'm not yet coding fluently. Could you please gimme some hints on how to make it work before this 'after hooks' are implemented into master branch?
",mbanduk,jcrugzz
680,2014-08-18 14:52:08,"@mbanduk there is no way to do that currently using this module since we strictly do a reverse proxy and thats it. You'd have to replicate the logic that you need in the reverse proxy until these hooks exist. 
",jcrugzz,mbanduk
680,2014-08-19 17:24:53,"@jcrugzz , this code allow me to do what I want. Would it be a good alternative?



and then calling:


",banduk,jcrugzz
679,2014-08-14 17:40:01,"@unilaterus Thanks for the contribution! This looks good, the only thing I see potentially dangerous here is us nulling out the server object before the callback is executed (if one was passed in). I believe there should be a `server.once('close')` event that can be listened to to null the server after its fully closed or we could just wrap the callback and null the server before responding to the original callback that is passed in. 
",jcrugzz,unilaterus
679,2014-08-14 20:00:33,"@jcrugzz Nice catch there. I hadn't thought of that. I pushed up a revision to correct that issue. I chose to go with the `wrap the callback` option because I'm not entirely sure if listening for close event will work since I think the callback passed in replaces the standard close event.
",unilaterus,jcrugzz
679,2014-08-14 21:12:48,"@unilaterus thanks!
",jcrugzz,unilaterus
678,2014-08-14 16:16:39,"@EskelCz you have to do your own error checking or setup a regular expression matcher to handle `*.example.com` if thats what you want handled. If you pass in undefined as the target this error does occur, I will change it to emit a proper error in this case though.
",jcrugzz,EskelCz
677,2014-08-05 21:27:42,"@xtphty thought i published it, available as `1.2.0`
",jcrugzz,xtphty
675,2014-07-24 15:53:06,"@anilgulecha sure, seems reasonable if the server exists. I would take a PR :).
",jcrugzz,anilgulecha
673,2014-07-20 19:15:46,"@msporny thanks for making the changes! LGTM. Regarding the potential issue #2, this would need to be a transform stream of sorts that automatically modified headers and passed it along to the proxy. I haven't figured out how this would be done generically yet but its something I have in mind.
",jcrugzz,msporny
673,2014-07-20 20:02:49,"Thanks for the merge @jcrugzz :).

@dlongley any thoughts on addressing issue #2 generically since we're probably going to need to do this at some point in the near future?
",msporny,jcrugzz
673,2014-07-22 16:12:09,"@msporny, well, from a quick glance at the code it seems like there are several options now just after this approach, for addressing number 2:
1. For producing something like a digest on message bodies that are too long to buffer into memory, you could attach an event listener to `proxyReq` and then attach a `data` event listener to the incoming request that will digest the data and, when finished, call `proxyReq.addTrailers` with the appropriate digest header.
2. For message bodies that can be buffered, you could do the same -- except set `options.buffer` in the `proxyReq` handler to some stream that also gets populated by listening to events from `req`. There may be a nicer API that could be exposed for this, but it seems like it would work as is if you needed this behavior. But again, that's just from a quick glance, I didn't write any code to test this.

Edit: Actually, it looks like some tweaking would need to happen to allow `options.buffer` to be set in the event handler. Maybe something similar to what @jcrugzz suggested could be added to allow a transform stream to be inserted between `options.buffer` or `req` and the `proxyReq` -- or this stream could always be present and, by default, it performs no transformation.
",dlongley,msporny
673,2014-07-22 16:12:09,"@msporny, well, from a quick glance at the code it seems like there are several options now just after this approach, for addressing number 2:
1. For producing something like a digest on message bodies that are too long to buffer into memory, you could attach an event listener to `proxyReq` and then attach a `data` event listener to the incoming request that will digest the data and, when finished, call `proxyReq.addTrailers` with the appropriate digest header.
2. For message bodies that can be buffered, you could do the same -- except set `options.buffer` in the `proxyReq` handler to some stream that also gets populated by listening to events from `req`. There may be a nicer API that could be exposed for this, but it seems like it would work as is if you needed this behavior. But again, that's just from a quick glance, I didn't write any code to test this.

Edit: Actually, it looks like some tweaking would need to happen to allow `options.buffer` to be set in the event handler. Maybe something similar to what @jcrugzz suggested could be added to allow a transform stream to be inserted between `options.buffer` or `req` and the `proxyReq` -- or this stream could always be present and, by default, it performs no transformation.
",dlongley,jcrugzz
670,2014-07-12 19:42:58,"@soyjavi That is not the latest example. See [here](https://github.com/nodejitsu/node-http-proxy/blob/master/examples/balancer/simple-balancer.js)
",jcrugzz,soyjavi
670,2014-07-17 06:15:45,"Hi :)

@jcrugzz but ... is possible set different IP address (range)?

Best
",soyjavi,jcrugzz
668,2014-12-22 17:07:10,"@george-dragnea If I'm understanding you correctly you would have to implement this ""algorithm"" of yours using `http-proxy` and send a `forward` request in the specific cases that you desire. 

In any case, this is not an issue pertaining to `node-http-proxy`, I would take the question to stackoverflow where you may get some help! Cheers.
",jcrugzz,george-dragnea
667,2014-08-16 21:36:53,"@jcrugzz Can you elaborate on how you can use the buffer stream to accomplish the task of grabbing the POST body in the response?
",seglo,jcrugzz
667,2014-08-18 14:55:06,"@seglo let me try and put together a working example today.
",jcrugzz,seglo
667,2014-10-26 16:01:51,"@jcrugzz As you've probably noticed my project relies on this sort of functionality.  Right now it's a bit of a hack, so if you could share an example of how this might work it would be appreciated.  Thanks!
",seglo,jcrugzz
667,2014-11-06 18:50:42,"Thanks for pointing everyone to the correct existing example @gdw2. I'm going to close this issue.
",indexzero,gdw2
667,2016-01-25 12:50:23,"@seglo I tried the `buffer` option suggested by @jcrugzz and it works like a charm. Idea is to retrieve the body by consuming the request stream, and to store the buffered result on a stream that we will pass to the `buffer` property when calling `proxy.web()`.

Example here, first with a middleware to retrieve the body (you will recognize part of your code as I work with connect-prism):



Then, when calling the proxy, just pass this stream:


",mrblackus,seglo
667,2016-01-25 12:50:23,"@seglo I tried the `buffer` option suggested by @jcrugzz and it works like a charm. Idea is to retrieve the body by consuming the request stream, and to store the buffered result on a stream that we will pass to the `buffer` property when calling `proxy.web()`.

Example here, first with a middleware to retrieve the body (you will recognize part of your code as I work with connect-prism):



Then, when calling the proxy, just pass this stream:


",mrblackus,jcrugzz
665,2014-07-08 21:35:12,"@msporny I think this is doable but i think it should be implemented as an event people can hook into rather than an option. Maybe have a `proxyReq` event to accompany `proxyRes`. Thoughts?
",jcrugzz,msporny
665,2014-09-01 12:48:44,"@msporny Did you ever fully implement the solution for this? I'm looking to use it for Digest Auth.
",jenmak,msporny
665,2014-09-02 13:50:16,"@jenmak there is now a `proxyReq` event you can listen on to handle the case that this PR was going to solve
",jcrugzz,jenmak
665,2014-09-15 00:55:00,"@jenmak see this commit: https://github.com/nodejitsu/node-http-proxy/commit/db5f2954b2b325818f7e52ed3cd68dab31d370ed

Feature is documented here: https://github.com/nodejitsu/node-http-proxy/blob/master/README.md#setup-a-stand-alone-proxy-server-with-proxy-request-header-re-writing
",msporny,jenmak
662,2014-11-13 09:49:49,"@nodesocket I'm running into the same issue with requestbin - getting a 404 - did to manage to resolve this?
",97-109-107,nodesocket
662,2014-11-13 14:42:09,"@jcrugzz thanks for the tip, I tackled this problem by writing an express server that makes a POST on behaf of the client, copying the POST body.


",97-109-107,jcrugzz
662,2014-11-13 22:59:21,"@nodesocket thanks for the response! This is effectively the same as setting the `changeOrigin` option to true for anyone who comes here and wants reference.
",jcrugzz,nodesocket
662,2014-11-13 23:00:44,"@jcrugzz is `changeOrigin` documented? Just doing a quick search on the README I don't see it.
",nodesocket,jcrugzz
662,2014-11-13 23:02:56,"@nodesocket gah looks like its NOT. its only documented [here](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L34-L51). Im always happy to take documentation PRs :)
",jcrugzz,nodesocket
660,2014-06-12 14:47:17,"@wangzheng422 why is this useful for your use case? This could result in huge performance problems 
",jcrugzz,wangzheng422
660,2014-06-13 08:11:51,"@jcrugzz I want to analyze the http traffic goes through the proxy, especially the POST case. Now I add a dump flag into the option, which will not turn on the dump function in normal case.
",wangzheng422,jcrugzz
660,2014-06-13 13:53:41,"@wangzheng422 i still dont like this. This should be done with an optional stream that you can pass so we arent adding an arbitrary property to the request and you can do with the data what you want. For what you want to do, you would pass in something like this.



Now this is just speculative but this is the way that we would make this type of functionality work. This allows custom transformations of any type on the data which should be allowed. @RushPL this would satisfy your requirements correct?
",jcrugzz,wangzheng422
659,2014-06-10 20:22:57,"@goldfire ok so based on your example you are actually trying to do HTTP -> HTTPS. Is this what you are actually intending on doing?
",jcrugzz,goldfire
656,2014-06-19 17:25:10,"@Domiii It used to be that you could create a proxy that was not an event emitter when a callback was passed in. Now it is always an event emitter now but this piece obviously has not been changed yet. Our of curiosity, could you post your use case for the callback argument? Personally I've just never used it and purely handle the errors and anything else through the event emitter interface
",jcrugzz,Domiii
656,2014-06-19 20:07:19,"@jcrugzz  I simply did not know that error handling without that callback was possible. I started writing my app and was plagued by ""socket hang up"" exceptions, that I finally (thanks to [longjohn](https://github.com/mattinsler/longjohn)) found to be caused by http-proxy. I then must have seen a code snippet that passed the error handler as fifth argument to `web` (but can't quite find it right now). You are saying, errors should simply be handled through the `clientError` event?
",Domiii,jcrugzz
656,2014-06-19 20:30:13,"@Domiii listen on the `error` event on the proxy. See [here](https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events)
",jcrugzz,Domiii
655,2014-09-05 21:31:38,"@javruben id love to see a failing test for this in general. this was a terrible hack for node having broken http
",jcrugzz,javruben
654,2014-07-23 13:41:08,"@trygve-lie great answer, I'd love to have this better documented if you'd like to submit the PR :)
",jcrugzz,trygve-lie
654,2014-07-23 14:53:23,"@trygve-lie yea that would be awesome :). Thanks!
",jcrugzz,trygve-lie
652,2014-06-07 22:41:40,"@cmpsoares91 these are examples of using the old `http-proxy` api that only works with node `0.8.x`.

If you would like to learn more about the new API, please checkout the readme or the blogpost found [here](http://blog.nodejitsu.com/node-http-proxy-1dot0/). 

Since we removed this particular functionality from `http-proxy`, this either needs to be done manually with an actual router or if you are looking for something that will do this out of the box, checkout @RushPL's [`http-master`](https://github.com/CodeCharmLtd/http-master)
",jcrugzz,cmpsoares91
652,2014-06-07 23:55:16,"@cmpsoares91 When i refer to a router I mean something like [`mapleTree`](https://github.com/saambarati/mapleTree) or [`director`](https://github.com/flatiron/director). If you can run `node-http-proxy` on the server there shouldn't be an issue :).

The feature was removed due to simplicity. It belongs in a separate module and not in `http-proxy` itself as `http-proxy` is just responsible for the proxying bit. Its on my list to write this module I just haven't been able to get to it yet.
",jcrugzz,cmpsoares91
650,2014-06-06 17:52:20,"@stanzhai If you can figure out why the tests are failing I will consider this. I'm still not convinced we can make the assumption that this is ALAWYS a bad thing.

We currently manually set the host header as seen [here](https://github.com/nodejitsu/smart-private-npm/blob/master/lib/npm-proxy.js#L176-L184) so we would still need a way to set a custom host as well if I were to merge this. I'll think about what that might look like.
",jcrugzz,stanzhai
649,2014-06-10 16:49:09,"@mdirolf I like this, could you just change the `proxy_timeout` to `proxyTimeout`. My OCD wants camelCase ;). Otherwise LGTM
",jcrugzz,mdirolf
645,2014-05-31 19:02:41,"@Domiii I can see this being valid but you need to handle the case where path is not defined. See the failing tests under `0.10.x`.
",jcrugzz,Domiii
645,2014-06-03 17:10:03,"@Domiii well it needs to be ignored in the case where the path is `undefined`
",jcrugzz,Domiii
645,2014-08-05 21:36:41,"@greaterweb thanks for the example! I just modified your comment to have the correct api :).
",jcrugzz,greaterweb
645,2014-08-05 22:00:24,"Thanks for the fix, @jcrugzz 

Copy and paste fail on my end :-) I coupled things from the ProxyTable example and my project (which uses express and does a few other things).
",greaterweb,jcrugzz
645,2014-09-08 19:50:08,"@EndangeredMassa yes it needs to be able to pass the current tests and there should be tests for the use case that this is a fix for.
",jcrugzz,EndangeredMassa
645,2014-09-08 19:51:46,"@Domiii do you plan on fixing up the tests for this? If not, I could take a look.
",EndangeredMassa,Domiii
642,2014-05-11 23:01:41,"@bruce-one its really the only way to do it. Also feel free to submit one with some docs around this :).
",jcrugzz,bruce-one
640,2014-05-10 02:35:22,"@jayharris mind adding a test case for this? But thanks for the contribution!
",jcrugzz,jayharris
640,2014-05-10 02:52:41,"@jcrugzz Done.
",jayharris,jcrugzz
640,2014-05-10 03:25:37,"@jayharris awesome thanks! Tests are failing due to SSL things on `0.11.x`.
",jcrugzz,jayharris
639,2014-05-08 16:10:09,"@lichenhao i would need to see some kind of reproducible example in order to even consider that this is a bug in `http-proxy`. It is more likely it is a bug in safari mobile browser on whatever iOS version you are running if it is not reproducible in other browsers.
",jcrugzz,lichenhao
637,2014-05-03 21:29:27,"@volkovasystems yes, it just fails HTTPS tests based on changes in the TLS implementation in `0.11.x`. Nothing to worry about
",jcrugzz,volkovasystems
635,2014-05-11 21:40:04,"@bruce-one id take an updated PR on this :)
",jcrugzz,bruce-one
634,2014-05-01 15:11:22,"@kurteknikk See https://github.com/nodejitsu/node-http-proxy#proxying-websockets.

For proxying websockets you need to listen on the upgrade event where you have access to the socket when it receives the correct request. The web requests still need to be properly proxied as well (due to how the initialization works).
",jcrugzz,kurteknikk
634,2014-05-01 20:35:53,"@jcrugzz I read all the documentation on that page. I just couldn't find any documentation about how to proxy websocket requests using a dynamic target.

Could you please confirm that it's possible to proxy websocket requests dynamically ? And maybe direct me to an example or any other documentation somewhere ?
",kurteknikk,jcrugzz
634,2014-05-02 02:19:47,"@kurteknikk you have access to the same request that you do in a normal web proxy. You can proxy in the exact same way except you handle it in the `upgrade` event
",jcrugzz,kurteknikk
634,2014-05-02 13:51:05,"@jcrugzz first of all thanks for your help, i really think that i'm missing some here.

Could you please confirm that the below code should work ?
(assuming I have a socket listener setup on that port number of course)


",kurteknikk,jcrugzz
634,2014-05-02 16:10:26,"@kurteknikk yes that should work. It could also be `http://localhost:9999` as well
",jcrugzz,kurteknikk
634,2014-05-05 17:43:05,"@kurteknikk Ahh that could make sense older versions of nginx did not support websockets. Open a new issue if you are still running into problems
",jcrugzz,kurteknikk
631,2014-04-30 23:56:15,"@rodrigopolo you still have access to the `req` object so you can do the same exact thing. except with the `proxy.ws` function
",jcrugzz,rodrigopolo
630,2014-04-25 15:59:57,"@walterhiggins yea that line exists because of current bugs in how node core handles leaving sockets open. Glad this edge case works in the latest!
",jcrugzz,walterhiggins
629,2014-04-25 09:11:18,"@kd128 please see the [`xfwd` option](https://github.com/nodejitsu/node-http-proxy#options).

Code can be seen [here](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/ws-incoming.js#L54-L69)
",jcrugzz,kd128
628,2014-05-08 17:00:15,"@Lewuathe It is not optimal to do something like this as you need to read the whole request into memory before proxying (makes proxying much less efficient). When I have time I can try and write up an example of how this is done. To explain briefly, you need to use something like my [`buffr`](https://github.com/jcrugzz/buffr) module in order to duplicate all the data since you will be parsing the whole request. An example of how this is used in a retry situation can be found [here](https://github.com/jcrugzz/buffr/blob/master/test/request-test.js)
",jcrugzz,Lewuathe
628,2015-11-16 00:16:51,"@macscripter As I described before, I passed my routing parameter on HTTP header, not POST parameter. Even end event is emitted on proxy server side, we can read the items in HTTP header. 
This was the solution that I took. 



But I don't know whether latest node-http-proxy could resolve this issue or not even in POST parameter. So please check it.

Thank you.
",Lewuathe,macscripter
628,2015-11-16 10:13:47,"Thank you!
I understand this solution but I could not change the request from my
front, so I really need to get the parameter from the POST using the
req.on('data') or req.on('end') envent.
Anyway, I really appreciate your feedback regarding to this issue.

Thank you!

Warmest regards

2015-11-16 0:17 GMT+00:00 Kai Sasaki notifications@github.com:

> @macscripter https://github.com/macscripter As I described before, I
> passed my routing parameter on HTTP header, not POST parameter. Even end
> event is emitted on proxy server side, we can read the items in HTTP
> header.
> This was the solution that I took.
> But I don't know whether latest node-http-proxy could resolve this issue
> or not even in POST parameter. So please check it.
> 
> Thank you.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/nodejitsu/node-http-proxy/issues/628#issuecomment-156878273
> .
",macscripter,macscripter
627,2014-04-25 08:21:35,"@kd128 Can you see if running a `socket.destroy()` rather than a `socket.end()` behaves differently? But it is possible this is a bug. If you can add a fully working, minimal test case, this would expedite the process :). And ideally in the form of a pull request ;)
",jcrugzz,kd128
624,2014-04-21 02:24:16,"@iamzfj can you show me an example of this case? More test cases always help :)
",jcrugzz,iamzfj
623,2014-04-16 18:30:19,"@bminer hmm interesting, is there anyway you could add a minimal failing test that reproduces this? That would be the easiest way to see where the potential bug might be.
",jcrugzz,bminer
623,2014-04-21 16:04:55,"@jcrugzz Sure. I'll try to post back here by Thurs. next week.
",bminer,jcrugzz
623,2014-05-08 17:02:26,"@bminer was this able to be resolved?
",jcrugzz,bminer
623,2014-05-11 04:27:45,"@bminer its safe to say you should be able to upgrade to `v0.10.28` without any problem. Let me know.
",jcrugzz,bminer
623,2014-05-13 01:06:26,"@bminer Has your problem gone away since upgrading to 0.10.26? I started seeing this on straight http (no https). If I serve a web page straight from node.js its fine, but if I put it in front of hipache (which uses node-http-proxy) I start getting these ERR_CONTENT_LENGTH_MISMATCH errors for some of my assets. I originally experienced this on 0.10.25, but upgrading to both 0.10.26 and 0.10.28 didn't fix the issue.
",jkingyens,bminer
623,2014-05-13 02:37:12,"@jkingyens if you can get a small reproducible example using the latest version of `node-http-proxy`, I would love to help figure out why might be happening! Failing tests are always a good addition to find a subtle problem :)
",jcrugzz,jkingyens
623,2014-05-15 23:43:12,"@jcrugzz Understandable :) I couldn't isolate it to `node-http-proxy`. The best I could do was show the problem occurred behind hipache. Without hipache everything was fine. I was using an older version of hipache so I decided to try the latest release and the problem disappeared. But thanks anyway :) 
",jkingyens,jcrugzz
622,2014-04-10 21:22:35,"@mtharrison this is a problem with `npm`. Try upgrading your `npm` client `npm install -g npm` and if the bug persists, post an issue on the project. 
",jcrugzz,mtharrison
620,2015-01-19 01:05:44,"@cliftonc I'm confused as to why this was closed?
",pdf,cliftonc
619,2014-04-09 18:26:31,"@jcrugzz what if i don't know target? i'm trying to implement simple proxy http server (anonymizer)
",stpdenis,jcrugzz
616,2014-04-06 06:41:25,"@hipstern thanks!
",jcrugzz,hipstern
614,2014-04-04 19:44:32,"@sgerace Could you provide a reproducible test case that is not reliant on EC2? It is also quite plausible it is your internet provider's latency to amazon and you only have a minimal sample size that possibly consists of spurious results. I would try and test this from an EC2 machine to another EC2 machine to see if you get the same behavior. 

We run this in production on [joyent](https://joyent.com) with substantial traffic and see no latency issues.
",jcrugzz,sgerace
614,2014-04-04 19:59:46,"@jcrugzz The issue at the moment is that I'm only seeing it when going to EC2 (though the only other scenario I've tested against is a local server and I'm not sure that is a fair comparison to anything over the internet). I don't _believe_ that it is my internet since the response performance is fine both from my browser as well as node when I'm using http.get calls. To illustrate, when I run code like this:



The time reported is consistently between 50 and 100ms (same as if I make the request in my browser)

However, as soon as do something like this:



OR



The response time is always > 1s.

After further searching, it sounds awfully like [this Stack Overflow post](http://stackoverflow.com/questions/19844594/node-js-pipe-to-a-http-response-results-in-slow-response-time-on-ubuntu).
",sgerace,jcrugzz
614,2014-04-07 14:45:45,"@jcrugzz So here is where I'm at after messing with this over the weekend; I've placed the following server code up onto a public EC2 instance so you can test it yourself (to rule out the possibility of internet effects):



The public ip address of the server is 54.209.167.233

When I request http://54.209.167.233:3000/ in my browser (I'm using the [Advanced REST Client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=en-US) for chrome), I consistently get a response between 60-120ms. 

If I run the following code, both cases respond for me in roughly the same amount of time (about 100ms each):



However, if I run the following example, and then request the response from localhost, I get times in the 800-2000ms range:



For good measure, and it illustrate that I don't think the root cause is necessarily _specific_ to http-proxy (though certainly something it is doing is causing the delay over the base http implementation), I provide the following additional example which uses [mikeal/request](https://github.com/mikeal/request) to the same effect:



This is as simple as I can make the cases and still illustrate the problem. Clearly it has something to do with EC2, but the fact that the http requests come back in a reasonable amount of time makes me think that it also has something to do with the way http-proxy (and [mikeal/request](https://github.com/mikeal/request) for that matter) are handling requests at the Node.js level.

I'm going to go ahead and bring this up in the mikeal/request forum as well, to see if any others might have an idea what might be going on. I'll keep the server up and running as long as necessary to troubleshoot the issue.

Thanks!
",sgerace,jcrugzz
614,2014-04-07 18:53:28,"@sgerace This is very interesting. One test I think will be useful is to try it on `0.11.x` just to see if it is associated with the `http` fixes that will exist in `0.12.x`. 
",jcrugzz,sgerace
612,2014-04-01 19:48:30,"@olingerc are you positive that is the only thing that has changed? No other dependencies could have updated their version? The ONLY possible relevant change is [here](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/common.js#L49-L56) but I cannot see how that would effect websockets.

Can you take your example and turn it into a minimal failing test case? It should be reproducible by a simple node server using `socket.io` as well.
",jcrugzz,olingerc
612,2014-04-02 10:10:47,"@jcrugzz 
Thanks for the reply. I have tested some more. If I stay in a complete node environment as you  suggested, v1.0.3 works fine [(here)](https://github.com/olingerc/http-proxy-testcase) . So thats already a good thing, except I need a python backend :-/

As soon as I switch to the python socket.io backend, keeping the frontend the same, v1.0.3 gives the errors. The server switches to polling over socket.io after a few seconds, but the websocket itself is not setup. Reverting to v1.0.2 on the frontend, without changing anything on the backend, makes everything work again with the python backend. I simply use `npm install http-proxy@1.0.3` and `npm install http-proxy@1.0.2` to switch between versions. All other dependencies are fixed.

So I conclude:
- The frontend setup is ok
- Since all dependency versions except http-proxy do not change, it sort of has to be http-proxy, sorry
- The python backend works correctly with http-proxy v1.0.2
- The python backend can not setup a websocket with v1.0.3, but successfully switches to polling. Maybe incomplete headers somewhere?

I can not exclude an error in the python backend which maybe became apparent due to v1.0.3 being more strict? I'll investigate more and post some minimal python code. FYI, the backend is based on Flask and  [(Flask-SocketIO)](https://github.com/miguelgrinberg/Flask-SocketIO).
",olingerc,jcrugzz
612,2014-04-02 10:16:44,"@jcrugzz 
I can confirm that [this line](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/common.js#L55) is the culprit. Commenting it out makes v1.0.3 work fine.
",olingerc,jcrugzz
612,2014-04-02 10:51:35,"@olingerc super weird, there shouldnt be any reason the python backend just doesn't accept a request with `connection: close`. The problem with reverting this change is that it can cause sockets to leak since in the default case we do not use an [`agent`](http://nodejs.org/api/http.html#http_class_http_agent) and node core http is broken in this regard.

So we have two possible solutions here. The first one is that I want you to see if a change on line 54-55 to the following makes a difference.



If it does not, I would try using an [`agent`](http://nodejs.org/api/http.html#http_class_http_agent) with your proxy so that it properly keeps the socket alive and is managed by node versus the OS. I would just recommend increasing the `maxSockets` value to a good sized number so you don't get throttled by socket pooling.

Let me know what you come up with.
",jcrugzz,olingerc
612,2014-04-02 16:35:22,"@olingerc the reason this ""fix"" is in place is due to node core not properly closing sockets in some cases when there was no agent. Hopefully there will be no others with python backends as it was necessary for others.

To answer your above question, the second one is better and there is no downside to increasing the # of sockets. It prevents you from limiting the # of sockets you rotate through and potentially block the ability to proxy depending on your traffic. (it will block pretty quickly with only 5 which is the default on the global agent)
",jcrugzz,olingerc
607,2014-03-27 05:20:04,"@JoeIsCool should be fixed in 1.0.3

Feel free to ping me here if this is not the case and give me a gist :)
",jcrugzz,JoeIsCool
605,2014-03-23 19:20:56,"@rinobilla why not submit a PR? ;)
",jcrugzz,rinobilla
603,2014-03-26 18:43:54,"@jcrugzz - hey, thanks for responding.
please refer to https://gist.github.com/KetanSpeaketh/9790240 while i explain the situation. also, to run these snippets, start the node scripts, connect your browser to the internet via proxy (localhost:3010) and navigate to, say, www.amazon.com

gist#1: simple proxy. works as expected.
gist#2: i first connect to proxy on port 3010, which then routes my request to amazon via another proxy on port 9010. this should work, but doesn't. things work if i make the change suggested in my previous comment.
",2w1x2elz,jcrugzz
603,2014-09-11 13:06:59,"Hi @jcrugzz,
I can't seem to get this right. I want to proxy all request made to `localhost:3000` to an api server `someserver.com:port`and this works fine from home. At my office, we have a corporate proxy which makes everything harder. I figure the toProxy attribute is what I want, but I cannot get it to work. This had happened for the ¬¥mikeal/request`library where the fix was to use



How would I configure your lib to do the same? The following gists show how this works from outside the corporate proxy and also how routing to local addresses works fine behind the proxy.
https://gist.github.com/avilaton/3b72861a75eb31fa6dd3
Any clues?
",avilaton,jcrugzz
603,2014-09-23 07:38:51,"@avilaton it looks like the `toProxy` option is broken in latest http-proxy. I've raised #703
",samcday,avilaton
600,2014-03-21 08:56:26,"@cha0s looks quite interesting. Do you also support websockets? This is very crucial to me.
",deradam,cha0s
600,2014-03-21 09:31:51,"@cha0s okay I see it can handle websockets. I switched our configuration from the script above to kiss-proxy and it works like a charm! Thanks for the hint and the good work :+1: 
",deradam,cha0s
596,2015-02-17 17:47:58,"@lsvx i believe this issue is around the old API usage. My recommendation here is to create a standard HTTPS server (which uses SNI callback) and create a separate `http-proxy` instance to proxy the requests within the handler.



 Please create a new issue if this does not work out for you as this issue itself is dated. Thanks!
",jcrugzz,lsvx
596,2015-02-18 00:47:53,"@jcrugzz,

Thanks for your example! I was able to get SNI working perfectly.
",lsvx,jcrugzz
596,2015-02-18 07:21:44,"@jcrugzz Minor and clever solution!
",lekojson,jcrugzz
594,2014-03-01 02:50:14,"@djpimp2010 I have not seen this at all, could you please provide reproducible test case for this so we can get to the bottom of why this could be happening? Thanks! :)
",jcrugzz,djpimp2010
594,2014-03-01 14:29:05,"@jcrugzz 

Yes, of course... I have a basic node-js install, default locations...

Here is my code, I have the extra libraries 'node-mysql' , 'fs' and 'util' installed for custom actions:



This works perfectly, for HTTP connections (except status codes always being 200), although I cannot get it working for HTTPS (name based with SNI) - Thats a different problem!
",djpimp2010,jcrugzz
594,2014-08-28 19:29:58,"@jcrugzz 

We are running into this same issue. All requests return a 200 status code. 

Included an example below, we can print out the correct status code, however, writeHead doesn't appear to be actually sending the header.


",derekschultz,jcrugzz
594,2016-06-17 14:06:38,"@mars - Did you figure out how to resolve this for the webpack dev server case? If so, can you provide your solution.
",nikhilbaradwaj,mars
594,2016-06-17 19:29:52,"@jcrugzz - On further investigation, it does work as expected for me. The response status was set incorrectly on my server code, the proxy was just returning that incorrect status of 200. Sorry for the false alarm.
",nikhilbaradwaj,jcrugzz
593,2014-05-16 17:12:27,"@pabalvar can you provide me with a reproducible test case so we can work from there? Thanks!
",jcrugzz,pabalvar
592,2014-03-11 21:58:28,"@SkeLLLa thanks for the contribution! 
",jcrugzz,SkeLLLa
590,2014-12-17 17:12:07,"@apcj cherry-picked, sorry this took so long
",jcrugzz,apcj
586,2014-07-08 16:13:01,"@pepmartinez [`proxyTimeout`](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L112-L118) is an option that exists it is just very poorly documented. Would happily take a pull request :).
",jcrugzz,pepmartinez
586,2014-07-08 16:15:25,"@jcrugzz Just to clarify, the last commit message is ""Change name targetTimeout to proxyTimeout"", so the property is `proxyTimeout` right?
",samlecuyer,jcrugzz
586,2014-07-08 16:22:51,"@samlecuyer yes you are correct, editing that comment xD. Brain must not be in optimal form yet ;)
",jcrugzz,samlecuyer
582,2014-12-19 16:09:01,"@cheddar could you rebase the PR and rename to outgoingHeaders? This seems reasonable, sorry it took so long
",jcrugzz,cheddar
579,2014-02-09 22:45:37,"@HugoMag could you please gist a reproducible example of this behavior? If you are listening on the `error` handler, this should not happen. 
",jcrugzz,HugoMag
579,2014-02-26 05:22:09,"@baer try to apply this fix https://github.com/nodejitsu/node-http-proxy/pull/488
",whitecolor,baer
577,2014-02-07 18:20:43,"@rere16 you also have to proxy the web requests in the `proxyServer` as websockets is initialized by a couple POST requests iirc
",jcrugzz,rere16
577,2014-02-09 21:01:40,"@rere16 well lets start with why do you want to proxy the websocket connection to another server when you already have an http server that you can then attach the websocket server to as well?
",jcrugzz,rere16
577,2014-02-09 22:43:03,"@rere16 ahh ok, I guess my argument is why are they two separate applications? The tricky part here is that you will have to custom proxy based on the particular requests that initialize the websocket connection. 
",jcrugzz,rere16
577,2014-07-29 14:42:17,"@rere16 I am also in this situation. I have websocket server written in c++ and generating some data and I want to use node-http-proxy.
 I am wondering whether you are able to find the solution for this or not. 

Please let me know if you did this already
Thanks
",gara-MI,rere16
576,2014-02-07 18:23:04,"@ColinEberhardt try forcing a websocket connection in the `socket.io` config. If the `upgrade` event is not being called, that has to do with the library not initializing the handshake. 
",jcrugzz,ColinEberhardt
576,2014-02-13 11:50:36,"@jcrugzz thanks for your comment, although I can see that the upgrade event is being sent from the browser. Without the proxy in place, the upgrade event occurs and the protocol switches to websockets:

![websocketssuccess](https://f.cloud.github.com/assets/1098110/2159398/7c02613e-94a4-11e3-8312-da13d24ca05c.PNG)

With the proxy code above, the upgrade request is sent, but there is no response, so after ~5 seconds socket.io falls back to XHR polling:

![image](https://f.cloud.github.com/assets/1098110/2159397/6ec64a08-94a4-11e3-8725-c935c642f333.png)

I have tried forcing socket.io to just use websockets:



But as you can probably guess, it just hangs on the upgrade request
",ColinEberhardt,jcrugzz
576,2014-02-19 04:33:39,"@ColinEberhardt yes what @richardkazuomiller said. I totally missed that previously. You should be using a regular `var server = http.createServer(app); server.listen(8080);` where the `app` is your same express `app` but you now have a proper server to listen for an upgrade request. Everything else should be able to stay the same.
",jcrugzz,ColinEberhardt
576,2014-02-19 04:33:39,"@ColinEberhardt yes what @richardkazuomiller said. I totally missed that previously. You should be using a regular `var server = http.createServer(app); server.listen(8080);` where the `app` is your same express `app` but you now have a proper server to listen for an upgrade request. Everything else should be able to stay the same.
",jcrugzz,richardkazuomiller
576,2014-02-19 05:28:22,"@jcrugzz It might be helpful to include something about the upgrade event in the documentation. I, like a lot of people, use Express for my web stuff and Socket.io or SockJS for my websocket stuff so I'm not very used to working directly with the HTTP servers and I had to do a bit of digging to figure it out. I just found that you include that in UPGRADING.md but I missed that because I says in the readme ""Looking to Upgrade from 0.8.x?"" and I was upgrading from 0.1.1 or something like that. People who are using it for the first time are probably going to miss that too.
",richardkazuomiller,jcrugzz
576,2014-02-20 10:01:18,"@richardkazuomiller thank you **very** much, that works just perfectly. 
",ColinEberhardt,richardkazuomiller
576,2014-02-22 02:55:21,"@richardkazuomiller this sounds like an awesome idea, would definitely take a pull request :)
",jcrugzz,richardkazuomiller
574,2014-08-14 15:24:03,"@EskelCz post the example in a new issue if it is not solved by using a FULL url as a proxy target. If its crashing the host header is probably not what you expect it to be.
",jcrugzz,EskelCz
574,2014-08-14 15:44:09,"@jcrugzz Thanks for a quick reply! Here: https://github.com/nodejitsu/node-http-proxy/issues/678
",EskelCz,jcrugzz
573,2014-02-07 22:27:55,"@jwalton This is something I can jive with. We haven't seen issues with this currently but it does make sense as we need to tell the operating system in SOME WAY to close the FD. Have you been able to test that this still works appropriately with `0.11.x`? I cannot see why not, I'd just like to be sure :). Thanks for the contributions!
",jcrugzz,jwalton
573,2014-02-07 23:13:00,"I can't say for sure that I did try it, so I'll try it again to be extra
sure.  :)

-Jason
On Feb 7, 2014 5:28 PM, ""Jarrett Cruger"" notifications@github.com wrote:

> @jwalton https://github.com/jwalton This is something I can jive with.
> We haven't seen issues with this currently but it does make sense as we
> need to tell the operating system in SOME WAY to close the FD. Have you
> been able to test that this still works appropriately with 0.11.x? I
> cannot see why not, I'd just like to be sure :). Thanks for the
> contributions!
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/pull/573#issuecomment-34514464
> .
",jwalton,jwalton
573,2014-02-08 00:31:43,"Arg.  Tonight I'm seeing this problem happen in node 0.10 and node 0.11,
both with and without my fix.  :(  This'll have to wait until Monday I'm
afraid.

On Fri, Feb 7, 2014 at 6:12 PM, Jason Walton jason@thedreaming.org wrote:

> I can't say for sure that I did try it, so I'll try it again to be extra
> sure.  :)
> 
> -Jason
> On Feb 7, 2014 5:28 PM, ""Jarrett Cruger"" notifications@github.com wrote:
> 
> > @jwalton https://github.com/jwalton This is something I can jive with.
> > We haven't seen issues with this currently but it does make sense as we
> > need to tell the operating system in SOME WAY to close the FD. Have you
> > been able to test that this still works appropriately with 0.11.x? I
> > cannot see why not, I'd just like to be sure :). Thanks for the
> > contributions!
> > 
> > ## 
> > 
> > Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/pull/573#issuecomment-34514464
> > .
",jwalton,jwalton
573,2014-02-11 04:54:03,"@jwalton Looks like we should be fine in [`0.10.25`](https://github.com/joyent/node/blob/v0.10.25-release/lib/http.js#L1404-L1433). 
",jcrugzz,jwalton
572,2014-02-03 20:05:18,"@jwalton if you plan to receive heavy load, you should be specifying an agent with a large amount of sockets (enough where you wont run into the case where you run out of file handles). Regardless, if you get to this point, it is an indicator you should probably scale to multiple servers. At nodejitsu we use an agent for our load balancers and specify around `320,000` for `maxSockets` in the agent. 

One thing we cannot assume here is that it will be an `http` agent and the reason the default is set to false is because we do not want people just getting started to hit the caveat of having a default socket pool of 5. The `agent: false` covers the widest range of use cases and we will be in the proper situation when `node 0.12.x` hits.
",jcrugzz,jwalton
572,2014-02-03 20:39:00,"@jcrugzz Well, allow me to define ""heavy load"".  On OS/X Mavericks, http-proxy will currently stop processing new requests after two minutes if you exceed a sustained 2 requests/second, assuming you haven't bumped up your max file handle count.  :P
",jwalton,jcrugzz
571,2014-02-08 05:15:12,"@trusktr pull requests accepted :)
",jcrugzz,trusktr
571,2014-02-08 09:36:46,"@jcrugzz mmmmm. good opportunity... will try to make one.
",trusktr,jcrugzz
571,2014-05-15 02:54:19,"@trusktr ive been meaning to write an external routing table module but havent had the time. And the advantage is being able to take advantage of node `0.10.x` and above where there is built in buffering to streams so they are easier to deal with. But if you are comfortable with `0.8.x` that is your choice.
",jcrugzz,trusktr
570,2014-01-31 21:18:16,"@jwalton wow really? the changes between `1.0.1` and `1.0.2` don't touch the web proxy implementation. Are you positive this doesn't happen with `1.0.1`? Ill do some testing myself
",jcrugzz,jwalton
569,2014-04-03 18:35:28,"@lobo78 that api is no longer valid. Please check the new docs and let me know if you have any questions :).
",jcrugzz,lobo78
568,2014-01-30 23:46:18,"@srossross You should be able to proxy https -> https if there is a need. if this is not exposed or documented well I'll look into clarifying that
",jcrugzz,srossross
568,2014-01-31 00:26:33,"@srossross to clarify, please checkout my answer in #563 
",jcrugzz,srossross
567,2014-01-30 23:49:14,"@stockholmux this probably has to do with your machine's `ulimit` which handles the number of file descriptors your computer will allow you to open. Make that `infinity` or a larger number and you should be fine. you can see how we set this for most of our production machines [here](https://github.com/opsmezzo/composer-systems/blob/master/base/smartos-base/files/limits)
",jcrugzz,stockholmux
564,2014-01-28 23:44:06,"Thanks @jcrugzz 
The post answers my questions perfectly
:)
",purepear,jcrugzz
563,2014-01-31 00:23:37,"@glasser see [here](http://nodejs.org/api/https.html#https_https_request_options_callback) and scroll to the options that are passed in. A request can take the same options as the server but thats assuming the same cert is used for making the request (when as i think about it may be a false assumption but IMO whoever is creating an `https` server and `https` proxy should be doing them separately).

I think the main use case is not using the `options.ssl` in for the listen function (which is not called when you are just using it as a proxy), but exactly where you noticed it in `common.setupOutgoing`. This allows us to correctly make `https` requests using those same options. This also works with self signed certs if we pass in a custom agent. In this case you just need to set maxSockets to a reasonably high number so you aren't blocked by socket pooling 5 sockets as per default. 

I hope this covers everything, let me know if you have any questions!
",jcrugzz,glasser
563,2014-01-31 18:27:55,"@glasser agreed, it should clarify that this is used for client proxying as well, IF you define an agent.
",jcrugzz,glasser
561,2014-01-23 18:16:07,"@glasser besides my comment, LGTM. Good find!
",jcrugzz,glasser
561,2014-01-23 18:39:23,"@glasser Well lets think of what we can do in these failure cases. Correct me if I'm wrong here, but in the case where the `socket` errors, we cannot re-proxy with that same socket. So it would make sense to have a different error function in that case that just returns the request if thats even useful? Cause it seems the connection is just FUBAR if we hit that case and we just need to kill the things and let someone know. So I'm thinking we may even want to destroy the socket when the socket errors as well if my assumption here is correct

thoughts @yawnt?
",jcrugzz,glasser
561,2014-01-28 18:52:49,"@glasser I'm going to cherry pick part of this since the other PR was merged. And until I have a better idea of how the errors should be handled from messing around with the fail cases, I think we'll just emit the `error` event without a socket in the case that it errors since it will of course be dead in that case.
",jcrugzz,glasser
559,2014-01-22 20:44:10,"@glasser thanks for your thorough report. This definitely seems fixable and I will try and give it a look later today. If you are able to dig deeper into a possible solution please post here :)

cc @yawnt
",jcrugzz,glasser
559,2014-01-22 21:49:02,"@jcrugzz @yawnt 

Here's my thought.  There are two ways we could go.  Either http-proxy should itself take care of this, by reacting to 'error' on `socket` by ending `proxySocket`... or http-proxy should give the end user access to `proxySocket` and let it do its own error handling.

I think the former is probably the way to go. First of all, it's more or less necessary to do this error handling, and we shouldn't make it easy for users to accidentally cause a leak.  Secondly, it's already the case that the ws `stream` phase doesn't give much control over the way that `socket` and `proxySocket` are connected (eg, it doesn't let you interpose some sort of transformation).  If we add an API for that later (or the user overrides the `stream` phase entirely) then sure, it would make sense to also give the user control over the error handling semantics. But because http-proxy doesn't offer that control, then it makes sense to do the automatic right thing.

Working on a PR now.  One thing that confuses me: it looks like there's a straight-up bug in the stream pass: it takes its server and head arguments in a different order from how they are passed in!  Is there a test suite that should be catching this?  (Our current production use of http-proxy/caronte is based on an old commit from back when caronte used EventEmitter2 which doesn't have this issue.)
",glasser,jcrugzz
547,2014-01-11 18:53:33,"@indexzero running `httpProxy.createServer()` actually just creates a proxy. The only thing that makes it a ""server"" is by calling the `.listen()` method. This is one of the reasons I exposed the ""server"" on the main `module.exports` so you can just do..



This allowed my OCD to calm down because it is now semantically correct in what you are creating. 
",jcrugzz,indexzero
547,2014-01-16 13:58:36,"@jcrugzz Thanks, but still want this.

@yawnt ping?
",indexzero,jcrugzz
547,2014-01-16 14:20:27,"@yawnt Sold. Lets do the damn thing :-D
",indexzero,yawnt
544,2014-01-07 02:30:52,"@marmor can you provide a test case for this? I do not believe your implementation is correct in the general case as it breaks 8 of the tests.
",jcrugzz,marmor
544,2014-01-07 06:05:57,"@marmor look at the travis-ci [build](https://travis-ci.org/nodejitsu/node-http-proxy/builds/16499169). Also an actual failing test case would be best that can be easily used to prove your point but a gist of a runnable example of this is second best :). 
",jcrugzz,marmor
544,2014-01-07 18:42:08,"@marmor I'll try this week to replicate but without code to try is difficult to understand what is really the problem, if I found some trouble I'll make a test the reproduce the issue.
",cronopio,marmor
544,2014-01-29 21:14:10,"@marmor Having just patched this on top of master, this is definitely having some unintended behavior as it consistently breaks the tests locally as well. I'll try and give it a look later this week.
",jcrugzz,marmor
544,2014-06-29 23:34:37,"@marmor any update on this? Your fix works for me too.
",ndreckshage,marmor
544,2014-07-02 06:35:13,"I would love to apply it.

However, I was disappointed to find out how hard it is to check-in anything
in this project (maybe it's true for all the other projects, I don't know).
I have a list of dozens of fixes and improvements, and this is only the
first of them, and the easiest and most self evident.

It's great that there is a proxy module for Node, and it was very kind and
generous of its developers to develop it for us.
But based on my own experience with other proxies (especially Apache's
mod_proxy, which I'm familiar with its source code very well), the current
status is very preliminary, it still has to pass light-years to become even
just close to mod_proxy, and it's despaired that even the easiest and clear
fix is so hard to apply.

And even now, after convincing the maintainers that this specific patch is
OK, I'm still puzzled what exactly I should do (from the technical point).
People said ""what's the problem? do this and that, and that's all"", but for
a Git newbie I'm afraid, especially when it's not my own project and I
don't want to do things that I wasn't suppose to do, and when my name will
be put on it forever in GitHub archives. I'm not even sure that this
specific message is personal to you or it shows to anybody else...

I don't want anybody else to apply it for me, so I just asked a friend,
living near me, to sit with me 10 minutes and do it with me (so the next
time I'll have the confidence to do it alone), but I must apologize that it
will take several days till we meet. He is a GitHub guru, maintaining many
projects there.

Regarding a fork: no, I don't want to do it. I have my honor and
appreciation to the developers of this project, and I want this project to
succeed, together with them. I was involved in many other Open-Source
projects in the past (but not in GitHub), and have never forked.

Thanks a lot for your trust!

On Mon, Jun 30, 2014 at 2:34 AM, ndreckshage notifications@github.com
wrote:

> @marmor https://github.com/marmor any update on this? Your fix works
> for me too.
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/nodejitsu/node-http-proxy/pull/544#issuecomment-47483274
> .
",marmor,marmor
544,2014-07-02 13:39:50,"@marmor the issue is that it breaks a bunch of the [tests](https://travis-ci.org/nodejitsu/node-http-proxy/jobs/16499170) on `0.10.x` (`0.11.x` tests are broken due to ssl changes). If you can fix these to confirm it does not cause any regressions with other use cases, I would be happy to accept it :). I just haven't had the time to dig into them personally so any help here is definitely appreciated. 
",jcrugzz,marmor
537,2014-01-08 13:06:55,"@jcrugzz yeah sure I'll take care asap
",cronopio,jcrugzz
535,2013-12-27 05:49:44,"@yawnt I use `http-proxy` npm module, version `0.10.3`.
In my use case:



run the proxy server, and then visit `localhost:9001` in browser, it will be response `An error has occurred: {}`.
and you remove the comment of `process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';`,
you can visit the website success.
",switer,yawnt
535,2013-12-27 09:28:32,"Ok, thanks @yawnt, but why don't you publish `caronte` to npm ?
",switer,yawnt
535,2014-01-28 19:27:12,"@switer it is currently published. Open a new issue if you have the same problem
",jcrugzz,switer
532,2013-12-18 12:40:17,"@cosjef I am guessing that your inquiry has pertains to this within `README.md` on master:

> - Uses event buffering to support application latency in proxied requests

The question of ""What is buffering in node.js?"" is a big one. Within `http-proxy` the above statement referred [to this](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L204-L257) implementation to work-around lack of buffering in node.js core before `0.10.x`

In `http-proxy@1.x.x` the statement is no longer in `README.md` because we assume `node@0.10.x` by default and thus all buffering is handled there.
",indexzero,cosjef
529,2013-12-10 01:44:18,"@fabiosantoscode Thanks for that simple solution, it should have occurred to me since I'm doing custom proxying with proxy.web too.

Here's a better regexp that should not experience false positives:

req.url = req.url.replace(/^\w+:\/\/.*?\//, '/');
",boutell,fabiosantoscode
529,2013-12-10 05:36:32,"@boutell and @fabiosantoscode if you haven't already, check out the [`caronte`](https://github.com/nodejitsu/node-http-proxy/tree/caronte) branch as that will be `node-http-proxy` 1.0 in the near future.
",jcrugzz,fabiosantoscode
529,2013-12-10 05:36:32,"@boutell and @fabiosantoscode if you haven't already, check out the [`caronte`](https://github.com/nodejitsu/node-http-proxy/tree/caronte) branch as that will be `node-http-proxy` 1.0 in the near future.
",jcrugzz,boutell
529,2013-12-10 11:37:08,"Jarrett, I'm experiencing this with the caronte branch. It is a serious
enough bug (and easy enough to fix) to be worth holding 1.0 just a minute
longer I think.

On Tue, Dec 10, 2013 at 12:36 AM, Jarrett Cruger
notifications@github.comwrote:

> @boutell https://github.com/boutell and @fabiosantoscodehttps://github.com/fabiosantoscodeif you haven't already, check out the
> caronte https://github.com/nodejitsu/node-http-proxy/tree/carontebranch as that will be
> node-http-proxy 1.0 in the near future.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/issues/529#issuecomment-30201042
> .

## 

Tom Boutell
P'unk Avenue
215 755 1330
punkave.com
window.punkave.com
",boutell,boutell
529,2013-12-10 13:28:42,"@boutell that was not my implication, I just wanted to make sure you guys were trying the newest code :). Im sure @yawnt will be on it. If you can post a gist of the smallest reproducible case, this will be extremely helpful in developing a test and figuring out a solution!
",jcrugzz,boutell
529,2013-12-18 11:49:52,"apologies for the delay, should be fixed in 9e74a63

@fabiosantoscode i used the test case you provided and now it's correctly sending ""/"" instead of the full path :)
",yawnt,fabiosantoscode
527,2014-09-24 17:36:44,"@jondubois You should listen on the error event for the proxy so that you can handle the errors and return proper responses when hitting this case. It is most likely triggered because there are not anymore sockets to be used and there is no socket pooling by default.
",jcrugzz,jondubois
527,2014-09-30 16:56:19,"@seglo in `0.10.x` there was a `proxyError` event that was emit when something happened with the conenction so there could be a response sent to the client. This is now an `error` event. For example usage, see [here](https://github.com/jcrugzz/proxy-server/blob/master/index.js#L53-L65). The error event should not go unhandled, its the default behavior of the EventEmitter to throw when it has no listeners.
",jcrugzz,seglo
527,2014-09-30 18:56:20,"@jcrugzz I see, OK I'll start handling that.  Are you saying that with `0.10.x` a proxyError event would be raised, but is internally handled?
",seglo,jcrugzz
527,2014-09-30 19:25:50,"@seglo in `0.10.x` a `proxyError` event would be raised but it wouldn't crash the server if it wasn't handled. You just wouldn't properly respond to clients who disconnect if you didn't handle the event
",jcrugzz,seglo
527,2014-10-01 00:37:16,"@jcrugzz Thanks for the example.  I've made the appropriate updates to my project.
",seglo,jcrugzz
527,2014-10-01 00:42:33,"@jondubois my explanation was how the `error` event in general should be handled. In node the semantics in various libraries are never consistent. Socket hangups don't only happen with that particular edge case you ran into. Do you have a gist of that consistent reproducible case? Im curious how its hitting the code paths in node core. 
",jcrugzz,jondubois
527,2014-12-01 03:39:00,"@ashu-daffodil can you specify what your code is doing? There was nothing in the latest release that affects how errors are handled. To me, both you and @WooDzu seem to not be handling errors when the destination you are proxying to kills the socket for whatever reason. I cannot really reason about this without a small reproducible code sample.

I general, the expectation should be to get these types of errors when there are legitimate network failures or the server you are proxying to goes down. Errors need to be handled in these cases. Please see my example [`proxy-server`](https://github.com/jcrugzz/proxy-server/blob/master/index.js#L53-L65) to see how errors are handled. This ensures clients are responded to when the destination is having issues.
",jcrugzz,ashu-daffodil
527,2014-12-01 03:39:00,"@ashu-daffodil can you specify what your code is doing? There was nothing in the latest release that affects how errors are handled. To me, both you and @WooDzu seem to not be handling errors when the destination you are proxying to kills the socket for whatever reason. I cannot really reason about this without a small reproducible code sample.

I general, the expectation should be to get these types of errors when there are legitimate network failures or the server you are proxying to goes down. Errors need to be handled in these cases. Please see my example [`proxy-server`](https://github.com/jcrugzz/proxy-server/blob/master/index.js#L53-L65) to see how errors are handled. This ensures clients are responded to when the destination is having issues.
",jcrugzz,WooDzu
527,2014-12-01 05:28:34,"@jcrugzz 
I'm even getting hangups while loading images and css besides queries and other services.

REQUESTS :
req >> /images/user.png
req >> /js/lib/text-angular.min.js

ERROR :
Error: socket hang up at createHangUpError (http.js:1472:15) at Socket.socketCloseListener (http.js:1522:23) at Socket.EventEmitter.emit (events.js:95:17) at TCP.close (net.js:465:12)

Error handling CODE :

var proxy = httpProxy.createProxyServer({});
proxy.on('error', function (err, req, res) {
    maintainErrorLogs(err, req, res);
});
process.on('uncaughtException', function (err) {
    maintainErrorLogs(err);
});
function maintainErrorLogs(error, req, resp) {
    var reqInfo = """";
    if(req){
        reqInfo = ""req >> ""+req.url+"">>>host>>>""+req.headers.host;
    }
    getCollection(Config.LOGTABLE, Config.LOG_DB, function (err, logCollection) {
        if (err) {
            printError(error, err, reqInfo,req, resp);
        } else {
            logCollection.insert({""errorTime"": new Date(),reqInfo:reqInfo, error: error.stack || error.message || error}, function (err) {
                printError(error, err, reqInfo,req, resp);
            })
        }
    })
}
function printError(mainError, dbError, reqInfo,req, resp) {
    if(reqInfo && req){
        console.error(reqInfo);
    }
    if (mainError) {
        console.error(""Error in ProxyServer : "" + mainError.stack || mainError.message || mainError);
    }
    if (dbError) {
        console.error(""Error in ProxyServer (DB): "" + dbError.stack || dbError.message || dbError);
    }
    if(resp){
        resp.writeHead(500, {
            'Content-Type': 'text/plain'
        });
        resp.end('Something went wrong during redirection. We are reporting an error message.');
    }
}
",ashu-daffodil,jcrugzz
527,2014-12-01 15:20:42,"@ashu-daffodil this is most likely a path issue, you should log the path that is trying to be requested through the proxy and debug backwards from there. This is not a bug with `http-proxy` itself. Closing this issue as there is no bug related, errors just need to be handled.
",jcrugzz,ashu-daffodil
520,2013-12-18 11:06:22,"@cronopio looks good but i the travis CI build is failing, if you fix that we can merge :)
",yawnt,cronopio
520,2013-12-18 14:30:46,"@yawnt Thank you. Seems that there is a trouble running the coveralls script. Can I drop it from the `.travis.yml` and just set the `npm test` script?
",cronopio,yawnt
520,2014-01-07 18:36:35,"@risacher Oh thanks! that is helpful, I'll take a deep look in a few hours, maybe you can format it like the examples I made and then open a pull request :wink: 
",cronopio,risacher
517,2014-01-31 00:24:43,"@cstockton this is available in the new master branch. See my response in #563 
",jcrugzz,cstockton
516,2013-11-12 22:55:09,"@shermozle you must be using the wrong branch or not the right code. You can install it with `npm install ""git://github.com/nodejitsu/node-http-proxy#caronte""`. The api is not the same so the code you have posted will not work. See the new [readme](https://github.com/nodejitsu/node-http-proxy/tree/caronte#core-concept)
",jcrugzz,shermozle
516,2013-11-12 23:18:18,"Okay done that. Now trying to make some sense of the examples. I don't see
how I can specify the destination server depending on the request. i.e.,
how to create a standard HTTP proxy, not an application reverse proxy.

On 13 November 2013 09:55, Jarrett Cruger notifications@github.com wrote:

> @shermozle https://github.com/shermozle you must be using the wrong
> branch or not the right code. You can install it with npm install ""git://
> github.com/nodejitsu/node-http-proxy#caronte"". The api is not the same so
> the code you have posted will not work. See the new readmehttps://github.com/nodejitsu/node-http-proxy/tree/caronte#core-concept
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/issues/516#issuecomment-28342350
> .

## 

Simon Rumble simon@simonrumble.com
www.simonrumble.com
",shermozle,shermozle
516,2014-01-22 20:27:19,"@shermozle sorry for the late response. Check out the ProxyTable API example in our [blog post](https://blog.nodejitsu.com/node-http-proxy-1dot0/). Let me know if you have anymore questions!
",jcrugzz,shermozle
515,2013-11-12 06:57:07,"@shermozle hey, the current master of `node-http-proxy` does not work with `node 0.10.x`. We recommend checking out the [`caronte`](https://github.com/nodejitsu/node-http-proxy/tree/caronte) branch which will be `node-http-proxy 1.0` very soon :). Please open another issue if you run into any troubles!
",jcrugzz,shermozle
515,2013-11-12 22:38:30,"@shermozle yea open a new issue with the new code snippets, ill tag it appopriately :)
",jcrugzz,shermozle
510,2014-02-01 19:04:12,"@pmalek can you show me a `gist` of a reproducing test case?
",jcrugzz,pmalek
510,2014-02-01 19:08:28,"@jcrugzz something like this https://gist.github.com/pmalek/8756997 although I have tried many more options to pass in there but all the time I get the same issue


",pmalek,jcrugzz
510,2014-02-01 19:25:36,"@pmalek look at the [`httpProxy.createServer(options)`](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L33-L55) function. It only takes an options argument and expects a full URL to proxy to. See the examples in the readme to see that a `target` is always a string to be parsed with the `url` module.
",jcrugzz,pmalek
510,2014-02-01 19:42:26,"@jcrugzz I have changed my options to look like this : 



and my `createServer` to 



( I have tried to remove the `ws`, `secure` and `xfwd` options) and now I do not get the aforementioned error but the page on `localhost:80` keeps loading as in an infinite loop ( I have my server listening on port `443` and I can see the http-proxy being created on port `80`)
",pmalek,jcrugzz
510,2014-02-01 20:01:33,"@pmalek Got it so there is a slight caveat here because of how the `ssl` options are used. See my response in #563. They are used as the server cert information in this case AND used as a client cert when trying to proxy. This is obviously not what you want as you are just running it as an `https` server that you want to proxy via http. This is not how it behaves. You may also want `secure` set to false as I'm assuming this is a self signed cert (but I'm not positive in how it behaves in regards to localhost so it may not throw an error).

Since I have not figured out a clean way to make this more clear without making `sslServer` and `sslClient` options. I would just create a standard `https` server and use `httpProxy` as just a proxy (so you dont call the listen function).
",jcrugzz,pmalek
510,2014-02-01 20:32:04,"@jcrugzz Can you provide a `gist` how should I use it as I do not really understand what would be there for me if I throw away `.listen(80);` from it ?

BTW: I already have an https server, that's what I need this proxy to redirect all of the clients to go from `localhost:80` to `localhost:443`.
",pmalek,jcrugzz
510,2014-02-01 21:24:25,"@pmalek ok lets back up a second, I misunderstood the use case. I thought you were proxying the other way around for whatever reason. What is the exact purpose of your proxy in this case? Until then I'll take a stab at what you MIGHT want.


",jcrugzz,pmalek
510,2014-02-01 21:53:48,"@jcrugzz My exact intentions are as follows: 

I have a working sails web server on port `443` using https. I would like to make a proxy (redirect clients coming on port `80`) to force usage of https at port `443`. 

So I thought using a `node-httpp-proxy` which would redirect all traffic from port `80` to `443` is a good idea. 

I have tried your solution and I have the following error : 



After that I have tried to change `secure: true` to `secure: false` and now it works but! on `http`. So I can access my server on both `http` (port `80`) and `https` (port `443`).

Yet still I would like to redirect clients to `https` while connecting to port `80`.

I have found this connected case https://github.com/mikeal/request/issues/418 and SO question https://stackoverflow.com/questions/14088787/hostname-ip-doesnt-match-certificates-altname which suggest to use 



or 



while passing arguments to tls server but those didn't work for me (still the error).
",pmalek,jcrugzz
510,2014-02-01 22:09:06,"@pmalek the problem is what I outlined in #563 regarding self signed certs. Since you were supplying the ssl credentials I thought this wouldn't be an issue but I was wrong ;). You need an agent in order for `secure: false` to work (as it uses `rejectUnauthorized: false` under the hood).


",jcrugzz,pmalek
510,2014-02-01 22:19:41,"@jcrugzz I get this ""loop"" (no response/timeout) again on port `80`.

So let's summarize: 
- with `secure: false` I can access the website both on port `80` (using `http`) and `443` (using `https`),
- using `secure: true` I get `Error: DEPTH_ZERO_SELF_SIGNED_CERT` on port `80` but can access website through `https` on port `443` without any problems
- with `agent: new Agent({ maxSockets: Infinity })` and no matter what `secure` is set to I get loop on port `80` and service ok on `443`
",pmalek,jcrugzz
510,2014-02-01 22:59:05,"@pmalek hmm ok, my mistake here is that this agent should be an `require('https').Agent` not an `http.Agent in this case. Give that a try but you should be at a point where this is debuggable.
",jcrugzz,pmalek
510,2014-02-02 00:29:34,"@jcrugzz This still gave me the same result (or `DEPTH_ZERO_SELF_SIGNED_CERT`) and I have decided to use https://npmjs.org/package/express-force-ssl for this purpose but still I would like to  get that running (for different ports etc.)

Maybe some other time.
",pmalek,jcrugzz
510,2014-02-02 01:33:50,"@pmalek Ensure you still have `secure: false`. There is some odd behavior in this area which is why `0.12.x` will have a refactored `http`. Unless Im misunderstanding something about the behavior of HTTP -> HTTPS proxying, this should work. That module looks like your best bet for now. 
",jcrugzz,pmalek
510,2014-02-10 07:23:15,"@blairn you are using an old api. And please create a new issue if you are having a problem using the new api :).
",jcrugzz,blairn
509,2013-11-07 18:17:46,"hi @jvonmitchell ,
you should check out the `caronte` branch in this repo, it's the refactoring of `http-proxy`. 
in the soon-to-be http-proxy@1.0 we dropped  support for `proxy-table` but it's really easy to create a tiny module on the top that works the same way :) !

feel free to reopen the issue if you have problems with that branch :)
",yawnt,jvonmitchell
508,2013-11-04 19:14:34,"Hi @Analogreality We're working in a total refactor to support node v0.10.x at the [caronte branch](https://github.com/nodejitsu/node-http-proxy/tree/caronte) please take a look of the new way of hook up your own logic, we called ""passes"", by now there is a `xfwd` option that you can set to true to set the x-forward-\* headers [here](https://github.com/nodejitsu/node-http-proxy/blob/caronte/lib/http-proxy/passes/web-incoming.js#L63-L78), also you can set your own ""pass"" and make what you want before pipe the request/response.

Hope this help, I'll keep this open until you resolve your doubt
",cronopio,Analogreality
508,2014-02-11 18:30:40,"@cronopio I'm trying to do something similar (specifically, I want to be able to add CORS headers on the outgoing responses) and I see the passes, but I'm not seeing the proper method to use to add things to the passes?

I'd like to add it after `web-outgoing.writeHeaders` and before `web-outgoing.writeStatusCode`.  Is there any example available somewhere that shows how to do that?
",cheddar,cronopio
506,2015-02-04 01:49:19,"@jtremback open a new issue with some code and a more descriptive depiction of what you are doing
",jcrugzz,jtremback
503,2013-10-21 19:02:50,"I was working on fixing this some hours ago, thank you so much. I did a test case with an error event handler but I miss the callback test, thanks for add it, follow the patter that @yawnt suggest and we'll merge this asap
",cronopio,yawnt
503,2013-10-21 20:56:45,"@yawnt @cronopio I have moved the tests into a single file. Let me know if there is anything else you would like to see. Thanks!
",mmoulton,yawnt
503,2013-10-21 20:56:45,"@yawnt @cronopio I have moved the tests into a single file. Let me know if there is anything else you would like to see. Thanks!
",mmoulton,cronopio
503,2013-10-21 21:54:23,"Got ya. I was assuming that since I was testing from the `createProxyServer` method down and not just the changes I made to web-incoming that you would want them in that file. I can move them if you would like.

On Oct 21, 2013, at 2:48 PM, yawnt notifications@github.com wrote:

> hey @mmoulton, thanks for doing this, although you got the wrong file xD.. i need them to be in https://github.com/nodejitsu/node-http-proxy/blob/caronte/test/lib-http-proxy-passes-web-incoming-test.js since it's where you modified the code :)
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",mmoulton,mmoulton
501,2013-10-18 07:34:26,"@vishr `npm install ""git://github.com/nodejitsu/node-http-proxy#caronte""`
",jcrugzz,vishr
499,2014-07-16 16:51:35,"@theak can you post a new issue and give an example of the code you are using? This shouldn't be happening
",jcrugzz,theak
499,2014-07-29 01:45:55,"@qmacro hey there was a typo in the blog post unfortunately that I just fixed. It should be a full URL prefixed with `http://` or `https://` if it will be a string passed in as target. We should have a check for this though.
",jcrugzz,qmacro
499,2014-08-07 21:13:05,"@qmacro Hi I was playing with the similar issue you came across.  In my case when I entered my IP address the proxy generated the very same error.  Than I included the my IPaddress in target options and redirected the request to some error server. 


",webduvet,qmacro
499,2014-11-10 09:34:55,"@webduvet That IP address issue took me some time to figure out. That was as tough one.
",rjsteinert,webduvet
496,2015-03-05 22:49:41,"@djmccormick I will be closing this as it is an old issue but the answer has to do with having any middleware that buffers the request data when attempting to proxy. The solution is to create a separate a proxy middleware to handle the intended routes before hitting that middlware OR create a separate router altogether that has its own middleware chain that does not parse the request.

Hope this helps. If you cannot figure it out, open a new issue with a complete reproducible code sample
",jcrugzz,djmccormick
493,2013-11-07 17:58:20,"hi @grantkl,

`target` and `forward` reciprocally exclude one another.. that is because if one request comes in, one has to come out.. not many (**imho**)

the way you could solve this is by creating an http server and a proxy server and dynamically proxy


",yawnt,grantkl
491,2013-09-27 12:47:35,"I keep trying to benchmark `caronte` branch (@indexzero: branch `v1.0.0-dev` does not exist), yet I keep getting:



Target server stays up all the time, `ulimit` is set to reasonable values. @yawnt any idea?
",mmalecki,indexzero
491,2013-09-27 19:08:27,"@mmalecki error handling needs to be refactored as there is no easy way to handle the errors with how they are namespaced. See #462 
",jcrugzz,mmalecki
491,2013-10-18 05:06:41,"After some improve from @yawnt I ran again the benchmark and this what I got in my humble laptop.

Node: v0.10.20
Last commit at caronte branch: 86750c7e594c419dfae957aaf7e44e61e1d480e8
wrk: wrk 3.0.1 [epoll] Copyright (C) 2012 Will Glozer



I would love to see what numbers show at @indexzero's laptop because my humble laptop show some improve.
",cronopio,indexzero
488,2013-09-24 21:53:06,"hey @glasser,
i think your solution is a bit too brutal as a workaround to be implemented without significant sacrifices.. we should, imho,  post this on [joyent/node](https://github.com/joyent/node/issues) and see what they say there about it

could you do it since you uncovered this bug and know more about it? if not, i can handle this

thanks for submitting the PR anyway :)

regarding @RushPL 's comment i think he's referring to the performance that `ab` shows when tested against caronte.. there are a couple of things that make `ab` behave weirdly (most noticeably the fact that it's `HTTP1/0` and node allows only `HTTP1/1` requests, thus preventing me from sending a content length which `ab` requires).. using other `HTTP/1.1` perf suites hasn't shown, so far, significant penalties in using agents except the usual slow-down due to pooling
",yawnt,glasser
488,2013-09-24 21:56:36,"I am actually referring to a situation where many outgoing connections need
to be made and a pool (by its nature) is limited. Hence the problem.

2013/9/24 yawnt notifications@github.com

> hey @glasser https://github.com/glasser,
> i think your solution is a bit too brutal as a workaround to be
> implemented without significant sacrifices.. we should, imho, post this on
> joyent/node https://github.com/joyent/node/issues and see what they say
> there about it
> 
> could you do it since you uncovered this bug and know more about it? if
> not, i can handle this
> 
> thanks for submitting the PR anyway :)
> 
> regarding @RushPL https://github.com/RushPL 's comment i think he's
> referring to the performance that ab shows when tested against caronte..
> there are a couple of things that make ab behave weirdly (most noticeably
> the fact that it's HTTP1/0 and node allows only HTTP1/1 requests, thus
> preventing me from sending a content length which ab requires).. using
> other HTTP/1.1 perf suites hasn't shown, so far, significant penalties in
> using agents except the usual slow-down due to pooling
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/pull/488#issuecomment-25045764
> .
",Rush,glasser
488,2013-12-08 22:37:49,"@boutell Yes, it would be great if Node's http server had a way to flip the socket timeout value between one value for ""during a request"" and one for ""between requests"".  Or a more usable event for ""socket is now awaiting another request"".

We did something in Meteor recently to try to simulate this but it's hacky: https://github.com/meteor/meteor/blob/devel/packages/webapp/webapp_server.js#L209  https://github.com/meteor/meteor/blob/devel/packages/webapp/webapp_server.js#L448
",glasser,boutell
488,2013-12-08 23:51:12,"Nice, this is what I was suggesting... I think you could build that as a
generic npm module, though it no doubt belongs in core.

On Sun, Dec 8, 2013 at 5:37 PM, David Glasser notifications@github.comwrote:

> @boutell https://github.com/boutell Yes, it would be great if Node's
> http server had a way to flip the socket timeout value between one value
> for ""during a request"" and one for ""between requests"". Or a more usable
> event for ""socket is now awaiting another request"".
> 
> We did something in Meteor recently to try to simulate this but it's
> hacky:
> https://github.com/meteor/meteor/blob/devel/packages/webapp/webapp_server.js#L209
> https://github.com/meteor/meteor/blob/devel/packages/webapp/webapp_server.js#L448
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/pull/488#issuecomment-30095063
> .

## 

Tom Boutell
P'unk Avenue
215 755 1330
punkave.com
window.punkave.com
",boutell,boutell
488,2013-12-21 11:42:47,"i also tried completely without specifying an agent and it didn't leak as well.. waiting to hear from @glasser 
",yawnt,glasser
488,2014-05-09 23:14:23,"@jayharris id buy that. It seems that in that case it shouldnt leak sockets as it will only be making one request of that nature. I haven't run into this problem personally since we use an agent in our proxy that is handling sockets. I'd accept that patch.
",jcrugzz,jayharris
482,2013-09-17 20:28:11,"@yawnt thanks for the review.  I opened this PR as a discussion. I am happy to follow your `CONTRIBUTING.md` guidelines and add tests. 

As for the use case, my goal was to make the options object consistent between the global `caronte.createProxyServer` and the per request `proxyServer.web|ws` calls. What do you think? 

Let me know if you think this it is the right direction and I will modify and add tests. 
",srossross,yawnt
482,2013-09-21 00:25:21,"@yawnt let me know what you need to pull this in.
",srossross,yawnt
481,2013-09-17 17:36:26,"@muffs I would encourage you to look at the `caronte` branch and see if it can be used to meet your needs. It is a complete refactor done by @yawnt and takes a much simpler approach. Let us know what you think!
",jcrugzz,muffs
481,2013-09-17 18:45:00,"@jcrugzz thanks for the quick response ;)

I'm assuming `caronte` can proxy to multiple targets right? I'll have to mess around with it. Thanks for the recommendation.
",muffs,jcrugzz
479,2013-09-17 17:31:02,"Yea its hard to be _exactly_ clear with this as it is all a matter of perspective. `web-outgoing` does make sense to me as the requests are being modified as they come in from the issuer with `web-incoming` (which is then proxied to the remote server) and when you send the response back to the issuer with `web-outgoing`, completing the reverse proxy. @yawnt maybe have it as `web-reverse` if that would make it more clear? What do you think @RushPL?
",jcrugzz,yawnt
475,2013-09-17 00:04:27,"@srossross good looks, thanks!
",jcrugzz,srossross
473,2013-09-17 03:08:07,"Hi @glasser thanks for take some time in reading the `caronte` branch.

I just fixed the test suite in the `caronte-tests` according to the new changes, so, if you can propose a test case where we can reflect the behaivor that you said, would be very useful.

More info on https://github.com/nodejitsu/node-http-proxy/pull/476

Thanks!!
",cronopio,glasser
473,2013-09-17 08:34:17,"sounds about right.. fixed.. thanks
also what @cronopio said.. it would be real useful :)
",yawnt,cronopio
471,2013-09-16 15:57:15,"Duplicate of #444, there are known issues with `node-http-proxy` running on `node v0.10.x`. @OmShiv Please test out the `caronte` branch and try to break it :). cc @yawnt 
",jcrugzz,OmShiv
468,2013-09-16 20:09:55,"@srossross hey, i saw you added to the PR auto-url parsing, so i'm closing this.. feel free to reopen should you have any more doubts :) 
",yawnt,srossross
463,2013-09-19 14:51:52,"The following [example](https://gist.github.com/jcrugzz/6624625) results in...



For one the error should be handled if the `EventEmitter2` wildcards are working properly so I have not yet determined if the client will receive the `end` event (which it should) upon the server being destroyed due to the proxy crashing the process. 

cc @yawnt
",jcrugzz,yawnt
463,2013-09-20 23:33:15,"Ok, @jcrugzz by now there are tests for `ws` and `socket.io` and not for `primus`, I'll try to write it
",cronopio,jcrugzz
463,2013-09-20 23:54:10,"@cronopio thanks! and make sure the test cases handle when the server closes and the proxy errors. Keep up the good work :)
",jcrugzz,cronopio
462,2013-09-21 07:01:24,"The root of the problem is that listening on a wildcard error listener (`ee.on('*:error', function (err) {}`) does not get picked up with this [check](https://github.com/nodejitsu/node-http-proxy/blob/caronte/lib/caronte/passes/web-incoming.js#L111-L113) so we will always throw an error in this use case. We should hae 

@yawnt you think we could simplify the error listener in some manner (maybe to a simple `ee.on('error', function (err) {}`)? I feel like most use cases will only need this.
",jcrugzz,yawnt
462,2013-09-23 00:23:38,"As @srossross confirmed, we cannot use a single wildcard to cover multiple delimited sections. So if we are to continue to namespace the error handling in some way, we should choose something simpler. 

So we should think about what distinctions are important when handling errors. The `web:error` and `ws:error` idea seems reasonable as we may want to handle those cases differently for cleaning up connections. @yawnt what are your thoughts?
",jcrugzz,yawnt
462,2013-09-27 19:33:57,"@yawnt EE3 works as intended, differences between normal EE and EE3 are explained in the README: https://github.com/3rd-Eden/EventEmitter3 ( also, it doesn't have namespaces ;-), never found them useful enough to implement )
",3rd-Eden,yawnt
462,2013-09-27 19:49:34,"@yawnt @3rd-Eden this sounds like a win. \o\
",jcrugzz,yawnt
462,2014-02-04 17:30:28,"@srossross yea i have been thinking how these should be separated. `wsError` is the best I've come up with for segmenting the two but still subideal. For now just do a check for `res.statusCode` or something of the sort. Messy I know but I'd love your thoughts on what you think works :)
",jcrugzz,srossross
456,2013-12-09 17:18:20,"Hi @aaronshaf 
We're doing a rewrite of the proxy to work with node `0.10.x`, also Im working on improve the examples for the new proxy.

I got [an example](https://github.com/nodejitsu/node-http-proxy/blob/better-examples/examples/middleware/modifyResponse-middleware.js) for what you need here https://github.com/nodejitsu/node-http-proxy/blob/better-examples/examples/middleware/modifyResponse-middleware.js

If you got troubles or questions about that example, the [discuss is here](https://github.com/nodejitsu/node-http-proxy/pull/520) #520 

I'm goona close this, if you got further doubts please open a new issue
",cronopio,aaronshaf
453,2013-12-18 11:04:49,"@kalebdf please check out the branch `caronte` in this repo, master is not compatible with 0.10.x
",yawnt,kalebdf
453,2014-01-06 06:10:48,"@damiga looks like examples now live here https://github.com/nodejitsu/node-http-proxy/tree/caronte/examples/http
",runk,damiga
453,2016-05-12 18:20:28,"hi @runk. Looked at your code but quick question: do I understand correctly that I need an external proxy server running (as identified by `mitmSocketPath`) ? I hoped this was a self-containing https forward proxy. Any help much appreciated
",gebrits,runk
453,2016-05-13 04:29:28,"@gebrits nope, it's just an option to set a path where internal https server keeps its spocket.
",runk,gebrits
452,2015-07-17 17:14:23,"Hey @fabiosantoscode! How did you handle the static resources? For me only the main html file gets loaded. Here's a quick example of my code:


",tarkeshwars,fabiosantoscode
448,2013-10-01 04:45:55,"@joshontheweb did you solve this ? or find something ?
",matthiasg,joshontheweb
448,2013-10-01 05:12:03,"@joshontheweb @matthiasg I would encourage both of you to test out the `caronte` branch of `node-http-proxy` as that will be the replacement for `0.10.x` and beyond. Please open any issues if you find anything!
",jcrugzz,joshontheweb
448,2013-10-01 05:12:03,"@joshontheweb @matthiasg I would encourage both of you to test out the `caronte` branch of `node-http-proxy` as that will be the replacement for `0.10.x` and beyond. Please open any issues if you find anything!
",jcrugzz,matthiasg
445,2016-04-24 09:14:58,"@aiboy, I tried your solution on a recent boilerplate (since that was written in 2013) and while I'm able to modify/override any header property, I can't get a cookie to save under resources, jessionid in particular.
",adi518,aiboy
444,2013-08-21 15:42:22,"@indexzero, @yawnt, thanks for the response.  One issue that I noticed is that `node-http-proxy` does not proxy websockets (at all) to tornado servers as of `node>=v0.8`

To test this - Try proxying to an `IPython notebook`
Use `*nix` OS (works on mac osx) download and install the anaconda Python Distribution http://continuum.io/downloads
Run:



Click `create notebook` to get to a page with a web-socket.
",srossross,indexzero
444,2013-08-22 13:15:56,"@srossross simpler than that, the `http-proxy` test-case for websocket just does the trick (ie: fails with node 0.10.x) : https://github.com/nodejitsu/node-http-proxy/tree/master/test/ws
",jokesterfr,srossross
444,2013-09-09 16:49:32,"@srossross i'm working on another repo that is going to be eventually merged into node-http-proxy
",yawnt,srossross
444,2013-09-09 20:13:06,"@yawnt: Is there a way to help? Is it your branch 10.x specifically?
",Rush,yawnt
444,2013-09-15 10:19:43,"@RushPL @srossross I believe Yawnt is working on https://github.com/yawnt/caronte.git
",robertjpayne,srossross
444,2013-12-18 18:04:51,"@risacher caronte is the new master, the current `master` branch is deprecated and is just there until the migration is complete (since it's a complete refactor and not a bugfix) :)
",yawnt,risacher
438,2013-07-02 15:22:48,"This is how `node` module works. @ruquay is right here.
",mmalecki,ruquay
426,2013-05-23 18:47:06,"@TrevorBurnham Try removing the `process.nextTick`. You want to ensure that the socket of the response has not already closed in order to be able to retry the proxy. I believe you can check `res.connection.destroyed`. 

I am guessing that the wait time of `process.nextTick` is too long so the underlying TCP socket is already closed. Reopen the issue if you can't get it to work :).
",jcrugzz,TrevorBurnham
417,2013-12-18 11:07:30,"@kadishmal the `master` branch isn't 0.10 compatible, for a compatible version check out the branch `caronte` which is a new refactor :)
",yawnt,kadishmal
416,2013-10-30 12:06:05,"@mmalecki Do you want more informations ?
",MiLk,mmalecki
416,2013-10-30 15:41:09,"@MiLk We are in the process of a complete rewrite of `node-http-proxy`. Can you try out the `caronte` branch and see if this resolves your problem?
",indexzero,MiLk
416,2013-10-30 16:13:36,"@mwilliamson the fix should be

outgoing.path       = req.url.match(/^(https?:)/gi)? url.parse(req.url).path : req.url;
",sequoiar,mwilliamson
416,2013-10-30 16:16:53,"@sequoiar: I think the fix originally given by @MiLk suffices, and has the benefit of being slightly simpler.
",mwilliamson,MiLk
416,2013-10-30 16:16:53,"@sequoiar: I think the fix originally given by @MiLk suffices, and has the benefit of being slightly simpler.
",mwilliamson,sequoiar
413,2013-09-20 04:02:18,"@chiragsanghvi If you are talking about updating the routes dynamically after starting the proxy server, it can be achieved by adding routes as a json file. http-proxy listens to the file changes and updates the routes.  



Contents of routes.json will be   


",gisripa,chiragsanghvi
408,2015-07-09 14:53:53,"@jcrugzz I am unable to get https to work in `node-http-proxy`, here's the code example https://gist.github.com/steelbrain/b24f795fe92ec229ddb9#comment-1489331
",steelbrain,jcrugzz
407,2013-04-21 20:25:30,"@GUI If all PRs were this good the world would be a better place. You sir, are a hero.
",indexzero,GUI
406,2013-08-22 14:56:09,"@NachoSoto this bug is probably fixed in v0.11.x. See https://github.com/joyent/node/issues/6107. Can you test by running http-proxy on v0.11.x?
",tuomassalo,NachoSoto
404,2013-12-27 07:29:17,"No updates from @celer. Closing.
",indexzero,celer
402,2013-04-10 04:38:35,"thank you @pkarc! just lost 5 hours on this one. works for us.

+1 
",breck7,pkarc
402,2013-04-10 05:37:14,"@pkarc Thanks for this. Can you confirm the fix is backwards compatible with node@0.8.x? 
",indexzero,pkarc
402,2013-04-17 22:30:20,"This also is helping us a bit, but not quite a full fix--still getting weird behavior. Haven't quite dived down into the details as much as @glasser, but I can second that this is not quite a full fix.
",breck7,glasser
402,2013-07-20 16:39:44,"Awesome, thanks @indexzero , @cronopio !
",breck7,indexzero
395,2015-10-16 16:25:53,"I'm also trying to proxy a youtube video, based on @indexzero 's example, I tried:



and



but when I'm connecting to the new server, i'm getting:



The `.googlevideo.com` link works fine if I load it in the browser thought (it's the direct video link from a random youtube video)

Any hints on how I might get this working?
",jaruba,indexzero
395,2015-10-16 21:47:59,"@jaruba Please read the updated readme as this module has changed since this issue has been closed and has a different API
",jcrugzz,jaruba
395,2015-10-16 22:03:55,"@jcrugzz thanks for answering, my first issue was that I indeed did not read the readme carefully the first time.. I had to proxy an entire website (not just a page), I got it working with:


",jaruba,jcrugzz
395,2015-10-16 22:20:03,"@jcrugzz @indexzero I seem to have a different sort of problem now though, the proxy seems to be created successfully, so these links both work:





but when I change the server ip to my LAN ip, it just gives me a blank page (even from the same PC that creates the server, no errors in the console):



what could cause this?
",jaruba,indexzero
395,2015-10-16 22:20:03,"@jcrugzz @indexzero I seem to have a different sort of problem now though, the proxy seems to be created successfully, so these links both work:





but when I change the server ip to my LAN ip, it just gives me a blank page (even from the same PC that creates the server, no errors in the console):



what could cause this?
",jaruba,jcrugzz
390,2013-03-23 15:31:46,"@mmalecki  which exact example you mean?
",sequoiar,mmalecki
388,2013-03-22 01:16:52,"@samalba Could you add a test case for this?
",indexzero,samalba
388,2013-05-23 07:58:08,"@bwaters @bfx81 We will merge when there is a test for this.
",indexzero,bwaters
388,2013-05-23 07:58:08,"@bwaters @bfx81 We will merge when there is a test for this.
",indexzero,bfx81
388,2013-12-12 11:58:36,"@achselschweisz checkout the [`caronte`](https://github.com/nodejitsu/node-http-proxy/tree/caronte) branch. It is a complete refactor that will become `node-http-proxy` 1.0. Please open a new issue if you find this to be the case
",jcrugzz,achselschweisz
388,2013-12-12 17:49:19,"Nice! @jcrugzz any ETA for this 1.0 release?
",samalba,jcrugzz
388,2013-12-27 07:46:40,"Despite @samalba _never_ submitting a test for this I'm going to roll this into the last `0.10.x` maintenance release because the logic is sound. 

@samalba write moar tests!
",indexzero,samalba
387,2013-04-02 15:31:21,"@jcrugzz is the issue reproducible for you? I have found the same problem. 
",desunit,jcrugzz
387,2013-04-22 21:01:02,"@indexzero  Can you reopen the issue at least, since the fix is buggy as described in https://github.com/nodejitsu/node-http-proxy/pull/402#issuecomment-16539748  ?  (It sometimes double-sends the first chunk of the post-headers part of the proxied websocket data).  I know that you said you're planning to do a full rewrite of this code for the 0.10 API but it might be worth keeping open the record of the fact that the current code is buggy...
",glasser,indexzero
386,2013-10-20 12:14:49,"hey @mcollina, the new branch (caronte) does't have proxytable support (i think it would make more sense to distribute it as a on-the-top module instead of directly with the proxy) so i don't think this one is going to land any time soon.. i'm sorry 
",yawnt,mcollina
386,2013-10-20 16:20:54,"@yawnt I agree with a separate module.
People are you using this in production, so provide an alternative for the new release.

Even if you are not going to release it with 'caronte', having a very simple routing table example for 'caronte' will be very helpful!
",mcollina,yawnt
384,2014-03-04 21:20:06,"@indexzero @No9 This merge/code has been lost to later merges. This is a very useful information, and should be in the README!

Please re-pull this.
",gurjeet,No9
384,2014-03-04 21:56:27,"@gurjeet while this is an awesome plugin it is no longer compatible with the newest implementation as `node-http-proxy` has been simplified. 
",jcrugzz,gurjeet
384,2014-03-04 21:59:24,"@jcrugzz Thanks for letting me know! I was planning on using it, but you saved me some head-banging :)

Are there any alternatives packages available?
",gurjeet,jcrugzz
384,2014-03-10 15:09:05,"@gurjeet harmon is OPEN open source.
If you make an accepted pull request to upgrade to 1.0.0 http-proxy I will add you as an administrator
",No9,gurjeet
384,2014-04-16 22:12:32,"@jcrugzz Thanks for your kind words!  

So i have updated the harmon docs and tests to reflect the 1.x release version of http-proxy and we have upgraded trumpet. Can you let me know if you would accept a pull request on the README again or are you putting it somewhere else now? 
cc @gurjeet @indexzero  
",No9,gurjeet
384,2014-04-16 22:12:32,"@jcrugzz Thanks for your kind words!  

So i have updated the harmon docs and tests to reflect the 1.x release version of http-proxy and we have upgraded trumpet. Can you let me know if you would accept a pull request on the README again or are you putting it somewhere else now? 
cc @gurjeet @indexzero  
",No9,jcrugzz
384,2014-04-17 00:25:13,"@No9 I would totally accept a PR to put that in the docs :). 
",jcrugzz,No9
382,2013-03-14 09:29:24,"@PhilHongKong Harmon is designed to plug into node-http-proxy https://github.com/No9/harmon 
It uses trumpet and so is stream based to work around the buffering problem that @indexzero mentions. It uses an element and attribute selector to enable manipulation of a response. 
",No9,indexzero
382,2013-03-14 10:18:41,"Nice. @No9 could you make a pull-request to README.md about this? We get this question a lot.
",indexzero,No9
382,2015-04-11 22:49:35,"Hi @akshayl  
https://github.com/No9/harmon/blob/master/examples/rotate.js 
Demonstrates adding an additional style tag in the head without replacing. 

Does this fit your use case? 
",No9,akshayl
382,2015-04-11 23:52:42,"Thanks for your reply @No9 
That example seems to replace the entire head tag including the script tag which outputs the message ""The piece of javascript also inside the head tag wasn't touched :)""

Before:
`<html><head><script>window.onload = function () {document.getElementById(""message"").innerHTML = ""The piece of javascript also inside the head tag wasn't touched :)"";}</script></head><body><h3>A simple example of injecting some css to rotate an image into a page before it is rendered.</h3><image src=""http://i.imgur.com/fpMGL.png"" /><div id=""message""></div></body></html>`

After:
`<html><head><style type=""text/css""> img { -webkit-transform: rotate(-90deg); -moz-transform: rotate(-90deg); filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);}</style></head><body><h3>A simple example of injecting some css to rotate an image into a page before it is rendered.</h3><image src=""http://i.imgur.com/fpMGL.png"" /><div id=""message""></div></body></html>`
",akshayl,No9
382,2015-04-12 00:13:15,"@akshayl ah now I get you. 
So https://github.com/No9/harmon/blob/master/examples/doge.js#L22 
Shows how you can hold the content of the node and then use it afterwards. 
The sample just logs it to console but I think this might be what you are looking for?
",No9,akshayl
378,2013-03-10 19:32:50,"@indexzero You actually supports header rewriting of the `Host` header. And thats probably all @colmsjo needs.

@colmsjo It should be as simple as setting `changeOrigin: true` in the `options` object.

If you need more advanced header rewriting, it can easily be implemented by a middleware which changes `req.headers`.
",tellnes,colmsjo
378,2013-03-10 19:32:50,"@indexzero You actually supports header rewriting of the `Host` header. And thats probably all @colmsjo needs.

@colmsjo It should be as simple as setting `changeOrigin: true` in the `options` object.

If you need more advanced header rewriting, it can easily be implemented by a middleware which changes `req.headers`.
",tellnes,indexzero
376,2013-03-26 08:14:22,"@sequoiar 

I've spent a couple hours writing this patch with full test coverage, it's been used by quite a few people and it should merge in cleanly. Yet still no word (good or bad) from nodejitsu in almost 6 months, if you want this fix I guess you're on your own.
",jayv,sequoiar
370,2013-03-22 16:09:52,"@jmatthewsr-ms I'm reopening after @3rd-Eden bought it to my attention because because it appears the fix for underlying issue in node core was not resolve. Is this correct?
",indexzero,jmatthewsr-ms
370,2013-04-09 07:39:01,"@indexzero @mmalecki 

I'd advise us to accept this pull request. I've been doing a lot of WebSocket proxy tests lately because I was interested in to seeing how our proxy solution compares to other proxies such as `nginx` and `haproxy`.

I've deployed the proxy on a 512mb joyent virtual machine running the latest ubuntu and hit it using [observing/thor](/observing/thor) with: 



I saw a peak memory of `280mb` before this patch. After applying this patch and re-running the command it saw a maximum of `102mb` which is significant decrease. So even if this is going to be fixed in later version of Node. It makes sense to pull this asap.
",3rd-Eden,indexzero
370,2013-04-09 16:36:48,"@jmatthewsr-ms yes, it's being worked on but it would only be made available in node 0.12, which still another stable release away and as we have no idea how long it will take before 0.12 is released, it makes sense to merge this in IMHO (as well as in all other projects).
",3rd-Eden,jmatthewsr-ms
362,2013-03-21 13:32:17,"I'm seeing the same problem - without @terrancesnyder's patch (which I put in at https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy/http-proxy.js#L262 ) there was no prompt for username and password, but I still see a new source port number for each part of the negotiation, which means NTLM doesn't work.
",GraemeF,terrancesnyder
362,2013-05-23 14:39:31,"@GraemeF, did you actually get any further with this? I'm trying to run NTLM authentication over an HTTPS-to-HTTP reverse proxy and see similar results. I have included the abovementioned patch but would probably need a hint on how to include the keep-alive-agent you mention. Are there any other choices to proxy NTLM authenticated calls? (have tried SQUID which didn't help, contrasting to what @terrancesnyder reports above) I just need to get _one_ single call through that doesn't even have any content, it just authenticates a user and returns a token/cookie, and subsequent requests are normal http requests that use this token/cookie for authentication...
",HelgeL,GraemeF
362,2013-05-23 14:39:31,"@GraemeF, did you actually get any further with this? I'm trying to run NTLM authentication over an HTTPS-to-HTTP reverse proxy and see similar results. I have included the abovementioned patch but would probably need a hint on how to include the keep-alive-agent you mention. Are there any other choices to proxy NTLM authenticated calls? (have tried SQUID which didn't help, contrasting to what @terrancesnyder reports above) I just need to get _one_ single call through that doesn't even have any content, it just authenticates a user and returns a token/cookie, and subsequent requests are normal http requests that use this token/cookie for authentication...
",HelgeL,terrancesnyder
356,2013-01-08 13:27:30,"@colinmollenhour Can you add tests for this? 
",indexzero,colinmollenhour
356,2013-07-09 08:18:42,"Hi @colinmollenhour, @indexzero 

I'm trying to leverage proxyResponse event to modify response headers that get setted up by the proxied server. 
This means that the server behind the proxy put some data in an ""x-cust-field"" on the `res` object so and Proxy can read and process it on proxyResponse. Now I dont want this info to be sent to the client, options are: 
removing the field or just edit it removing sensible data.



I'm not sure if I should act on `res`  or `response` (the latter has no setHeader methods), this seems possible so what am I missing?
Thanks
",Giuliano84,colinmollenhour
356,2013-07-09 08:18:42,"Hi @colinmollenhour, @indexzero 

I'm trying to leverage proxyResponse event to modify response headers that get setted up by the proxied server. 
This means that the server behind the proxy put some data in an ""x-cust-field"" on the `res` object so and Proxy can read and process it on proxyResponse. Now I dont want this info to be sent to the client, options are: 
removing the field or just edit it removing sensible data.



I'm not sure if I should act on `res`  or `response` (the latter has no setHeader methods), this seems possible so what am I missing?
Thanks
",Giuliano84,indexzero
355,2013-01-31 08:47:26,"@breck7 That's a good idea. I think changing the router functionality so that regex can be used would be very nice. Or maybe something like Google Chrome's settings where you can add domain exceptions to various settings like [*.]foobar.com which matches anything.foobar.com or whatever.foobar.com.
",trusktr,breck7
353,2012-12-26 16:29:55,"@indexzero I followed [this example](https://github.com/nodejitsu/node-http-proxy/blob/master/examples/middleware/url-middleware.js#L40-L43) and it seemed to work after using [proxy-by-url](https://github.com/dominictarr/proxy-by-url). I am trying to understand how proxy-by-url does it differently. Is [setting the headers](https://github.com/dominictarr/proxy-by-url/blob/master/index.js#L49-L53) making it work?
",jingweno,indexzero
353,2013-03-09 14:13:14,"@indexzero I tried `0.9.1` with the following:



curl with the following:

`curl http://127.0.0.1:8001/path` still routes to the home page of pow instead of foo.dev. As I mentioned earlier, I think the problem is due to the url and the host name are not set. With `porxy-by-url`, stuff works (https://github.com/dominictarr/proxy-by-url/blob/master/index.js#L49-L51). 

Is this expected behaviour? Otherwise how can I help?

Cheers,
Owen 
",jingweno,indexzero
353,2014-08-12 17:30:47,"@mattbeedle this issue is not relevant to the current issue of http-proxy. Please checkover the readme as the api has change significantly.
",jcrugzz,mattbeedle
353,2014-08-13 11:15:16,"@jcrugzz The api has changed, but I am still not able to proxy to a pow domain. I haven't looked into exactly what is causing the issue, but this seemed like a relevant place to post.
",mattbeedle,jcrugzz
352,2012-12-20 03:33:34,"@mrryanjohnston What version of node-http-proxy are you using? I think I may have saw something from an old version and gotten confused. Or maybe I was really too tired that night, I was sure I saw a `""/"" +` somewhere. That wouldn't be the first mistake I realized I made that night. :laughing: 

In any case, if you want to come into #nodejitsu again we can try to debug it some more.
",coderarity,mrryanjohnston
352,2012-12-20 03:48:04,"@mrryanjohnston I think I know the problem. Try using 'dev.example.com/test/' in the proxy table.

@indexzero The test prefix makes sense. He's requesting the 'dev.example.com/test' thing, so if he doesn't use the '/test/' prefix, it won't route to that express server, thereby not finding that path. The fact that he got that express error shows that it's connecting to the express server, like he wants. It's just due to the way I wrote the URL replacement code. I think we can fix this by adding a '/' at the end of the origin URL if the user didn't add it, or removing the first '/' in the request URL, and adding it back in if it's not there at the end of that transformation process. I think the latter is a better idea.
",coderarity,indexzero
352,2012-12-20 03:48:04,"@mrryanjohnston I think I know the problem. Try using 'dev.example.com/test/' in the proxy table.

@indexzero The test prefix makes sense. He's requesting the 'dev.example.com/test' thing, so if he doesn't use the '/test/' prefix, it won't route to that express server, thereby not finding that path. The fact that he got that express error shows that it's connecting to the express server, like he wants. It's just due to the way I wrote the URL replacement code. I think we can fix this by adding a '/' at the end of the origin URL if the user didn't add it, or removing the first '/' in the request URL, and adding it back in if it's not there at the end of that transformation process. I think the latter is a better idea.
",coderarity,mrryanjohnston
352,2012-12-23 05:17:36,"@mrryanjohnston Can you please try it without the `router` option when calling `httpProxy.createServer()`? 
",indexzero,mrryanjohnston
352,2012-12-27 18:29:35,"Sorry about the delay on this one, guys. Holidays and whatnot :)

@coderarity package.json says `""version"": ""0.8.5""`. I did try using dev.example.com/test in the routing table, but to no avail. I'll pop back in irc when I'm back from holiday related festivities. Thank you for your patience, once again.

@indexzero If I change the line to the following, the socket.io script is placed at localhost:8080/socket.io/socket.io.js as expected: `var proxyServer = httpProxy.createServer(9000, 'localhost').listen(8080);`
",mrryanjohnston,coderarity
352,2012-12-27 18:29:35,"Sorry about the delay on this one, guys. Holidays and whatnot :)

@coderarity package.json says `""version"": ""0.8.5""`. I did try using dev.example.com/test in the routing table, but to no avail. I'll pop back in irc when I'm back from holiday related festivities. Thank you for your patience, once again.

@indexzero If I change the line to the following, the socket.io script is placed at localhost:8080/socket.io/socket.io.js as expected: `var proxyServer = httpProxy.createServer(9000, 'localhost').listen(8080);`
",mrryanjohnston,indexzero
352,2012-12-27 19:47:05,"@mrryanjohnston I suspect this is related to the ProxyTable somewhere. I'll leave this open to investigate, but I won't lie the `ProxyTable` is not high on my list of priorities.
",indexzero,mrryanjohnston
352,2012-12-28 05:45:46,"@mrryanjohnston Heh, that's not the URL I suggested, yo. You've got to use ""dev.example.com/test/"" (note the ending /). :D
",coderarity,mrryanjohnston
352,2013-01-04 00:46:36,"@coderarity So this does two things:
1. You can no longer go to dev.example.com/test in a browser window; only dev.example.com/test/ will work.
2. This produces an error that seems to be on part of socket.io: `GET http://dev.example.com/socket.io/1/?t=1357260316641 404 (Not Found)`. This occurs in socket.io.js on line 1659. Correct me if I'm wrong, but this seems to be an error on part of socket.io.
",mrryanjohnston,coderarity
352,2013-01-04 04:14:38,"How are you connecting to socket.io? I think that might be where the
problem is from here.

About #1, that's part of fixing the proxy table issues.

On Thursday, January 3, 2013, Ryan Johnston wrote:

> @coderarity https://github.com/coderarity So this does two things:
> 1. You can no longer go to dev.example.com/test in a browser window; only
> dev.example.com/test/ will work.
> 2. This produces an error that seems to be on part of socket.io: GET
> http://dev.example.com/socket.io/1/?t=1357260316641 404 (Not Found). This
> occurs in socket.io.js on line 1659. Correct me if I'm wrong, but this
> seems to be an error on part of socket.io.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/issues/352#issuecomment-11867985.

## 

Christian Howe (coderarity)
",coderarity,coderarity
352,2013-01-29 00:20:10,"@coderarity Sorry for the delay on this. Haven't had a chance for fun side-projects for a while :)

I'm currently connecting with an absolute link: `var socket = io.connect('http://dev.example.com/test/');`

I understand it's not a super high-priority thing for this project. All the same, thanks for all of your help on this. 
",mrryanjohnston,coderarity
349,2013-02-22 04:11:14,"@jamie-stackhouse @aeosynth A documentation pull-request would be welcomed.
",indexzero,aeosynth
347,2012-12-19 14:30:35,"@jcheng5 we've seen this in production a few days ago. I'm not really comfortable with admitting that the fix was:



I think that on 0.9.x this is related to `process.nextTick` refactor which makes next tick happen before I/O, but no idea on the cause in 0.8.x.

@isaacs opinions?
",mmalecki,jcheng5
347,2012-12-21 01:30:48,"@mmalecki Great news, thanks! Looking forward to v0.8.17!
",jcheng5,mmalecki
347,2012-12-21 01:44:50,"@jcheng5 I just pushed a [custom build branch](https://github.com/mmalecki/node/compare/joyent:v0.8.16...mmalecki:v0.8.16-http-parse-error), in case you wanted to use it.
",mmalecki,jcheng5
347,2012-12-22 05:00:57,"Great, thank you @mmalecki, much appreciated!
",jcheng5,mmalecki
344,2012-12-22 20:26:23,"@indexzero is correct. Do you have a reproducible example of such behavior?
",mmalecki,indexzero
344,2013-01-08 23:47:07,"@luolonghao can you reproduce this behavior? What source are those requests coming from?
",mmalecki,luolonghao
343,2012-11-29 11:16:55,"@kennydude So how should I test this is working? Is there a spdy client you're requesting with?
",indexzero,kennydude
343,2012-11-29 11:46:32,"Chrome Extension that detects SPDY by putting a lightning bolt in the
address bar. It's on the chrome webstore
On 29 Nov 2012 11:16, ""Charlie Robbins"" notifications@github.com wrote:

> @kennydude https://github.com/kennydude So how should I test this is
> working? Is there a spdy client you're requesting with?
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/pull/343#issuecomment-10843403.
",kennydude,kennydude
343,2012-11-29 12:50:36,"@indutny It's hard to merge this without some kind of reproducible test.
",indexzero,indutny
343,2015-10-12 13:59:13,"@indexzero: SPDY/HTTP2 is becoming more widespread, is it still out of scope for this project? I'd greatly appreciate it if you'd reconsider.
",JakeHedman,indexzero
341,2013-01-02 07:22:18,"+1
I have used x-forwarded-port with nginx; the expected value of the header is the port of the original request before it was proxied.

Say my node server is running on 3000 and is proxied by node-http-proxy on 3001.
I would like to know when crafting URLs for the original client that the public port is 3001.
At the moment node-http-proxy would give me something like 62112.

I have tested @blahed's patch and it works for me.
",hmalphettes,blahed
341,2013-12-18 11:34:41,"@fideloper fixed in 97e4600 :)
",yawnt,fideloper
339,2012-11-29 11:40:34,"@oost Nice. Will try to get this merged in soon. Thanks for the example!
",indexzero,oost
338,2013-02-14 12:53:03,"Actually, now that I think about it, a `DELETE` request can have a body. We happen to use such requests ourselves in production.
We should check if a `Content-Length` is already defined, I think.
@indexzero @ian7 opinions?
",mmalecki,ian7
338,2013-02-14 12:53:03,"Actually, now that I think about it, a `DELETE` request can have a body. We happen to use such requests ourselves in production.
We should check if a `Content-Length` is already defined, I think.
@indexzero @ian7 opinions?
",mmalecki,indexzero
337,2012-11-29 11:51:39,"Good catch @indutny 
",indexzero,indutny
334,2013-01-21 16:30:18,"hi @KimSchneider, 

Finally, did you fix the performance problem when the requests are in SSL with node 0.8?

What was the cause of the problem?
",abarre,KimSchneider
334,2013-01-22 22:03:20,"Meh. If you're into that sort of masochism go for it. This is an issue related to SSL performance in node that @indutny is working hard on.

In the meantime you can just put [stud](https://github.com/bumptech/stud) in front of node-http-proxy. But I'm pretty sure @KimSchneider is not interested in our advice as he has not provided any demostrable data for us to help debug the problem with besides node versions. 
",indexzero,KimSchneider
334,2013-01-23 08:38:58,"@indexzero, do you have the reference to the issue related to the SSL performance in node?
",abarre,indexzero
327,2013-03-09 06:04:03,"@jpetazzo This looks good. I'll cherry-pick it. Been looking at hipache the last few days; nice work.
",indexzero,jpetazzo
326,2012-11-29 11:54:06,"@sirganya Thousands of `express` based apps run on nodejitsu which uses this library to proxy. There is no incompatibility between `express` and `http-proxy`
",indexzero,sirganya
318,2013-02-21 10:54:50,"Would also like to +1 this, especially if someone has a potential fix already (@jayv ?). I came across this issue when using Testacular which relies on http-proxy for http forwarding.
",amirhhz,jayv
318,2013-02-24 17:23:28,"@Dignifiedquire @amirhhz I've submitted a pull request that I wrote a couple months ago:

https://github.com/nodejitsu/node-http-proxy/pull/376

You can install my node-http-proxy fork and link to that one from Testacular, it's how we currently run our tests.

https://github.com/jayv/node-http-proxy
",jayv,amirhhz
316,2012-10-22 07:45:56,"@dougwilson is right, it is a problem in connect itself: https://github.com/senchalabs/connect/pull/524
",fmarier,dougwilson
311,2012-11-29 12:40:17,"@valette This is correct, but it only fixes your issue. What about users who want a timeout? The solution is (of course) to make this configurable as an option passed around.

Please implement it as an option and add tests.
",indexzero,valette
306,2012-11-29 12:41:23,"@shatsar Are you referring to `node@0.8.2` or `node-http-proxy@0.8.2`?
",indexzero,shatsar
306,2012-11-29 18:07:18,"I was referring to `node-http-proxy@0.8.2`, so yeah, it should be fixed (we'll give it a try asap)

Thanks @indexzero 
",shatsar,indexzero
305,2014-05-16 16:55:11,"@zlaoz That looks similar to the 200ms fixed overhead from small requests I saw in anything greater than Node v0.10.15. 
",grantkl,zlaoz
305,2014-05-16 17:02:42,"@grantkl so in an older node version this delay does not took place? which version? (i am on v0.10.28)
",zlaoz,grantkl
305,2014-05-16 17:31:07,"@zlaoz i would personally try using `wrk` to benchmark as `ab` sends `http 1.0` requests rather than `http 1.1` iirc. See if the issue is reproducible there. Otherwise I would try passing in an agent to `http-proxy` as it does not use the global agent by default, it uses no agent. 
",jcrugzz,zlaoz
305,2014-05-16 17:47:40,"@jcrugzz thanks for the hints. with wrk the results are the same:

Running 10s test @ http://10.10.10.1:9003/ (direct)
  1 threads and 100 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    40.56ms    2.25ms  62.01ms   88.99%
    Req/Sec     2.47k    99.67     2.54k    87.34%
  24376 requests in 10.00s, 4.95MB read
Requests/sec:   2437.32
Transfer/sec:    506.56KB

Running 10s test @ http://10.10.10.1:8003/ (http-proxy)
  1 threads and 100 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   256.17ms   20.93ms 297.68ms   65.28%
    Req/Sec   390.72     44.85   500.00     72.22%
  3900 requests in 10.01s, 0.86MB read
Requests/sec:    389.60
Transfer/sec:     88.27KB

passing an agent to http-proxy is the next thing... hold on
",zlaoz,jcrugzz
305,2014-05-16 17:51:40,"@zlaoz and when passing in an agent make sure it has maxSockets set reasonably high as well.
",jcrugzz,zlaoz
305,2014-05-16 18:45:29,"@zlaoz hmm and this is on ubuntu only? Do you have the code that reproduces this that i can grab and test myself? I want to see if its reproducible on OS X. I would also try and run this on `0.11.x` to see if this issue may be fixed already for the next version (as it seems to be core related).

Paste the `wrk` command you are using as well if you could :).
",jcrugzz,zlaoz
305,2014-05-17 11:11:07,"@jcrugzz i created a gist with all required code-snippets and infos: https://gist.github.com/zlaoz/4a730bfe7f322f6442fd#file-node-http-proxy-slow-performance
",zlaoz,jcrugzz
305,2014-05-22 16:45:42,"@zlaoz ive tested your same code locally on my macbook and it shows an overhead of 60ms of latency with the proxy (7ms -> 60ms). Have you been able to try this on `0.11.13` and see if you get the same performance?
",jcrugzz,zlaoz
305,2014-07-16 13:47:18,"@jcrugzz sry for the late response! tried it using `0.11.13` i got 50ms (direct) and 200ms (proxied). i tried it locally too and i got 12ms (direct) and 90ms (proxied).
",zlaoz,jcrugzz
303,2012-10-17 22:37:56,"@omares by default http-proxy doesn't change the `Host` header to the targeted hostname, so Nginx doesn't know which host to match to.
You can force it by setting the `changeOrigin` option to true.
",1stvamp,omares
299,2014-08-15 17:12:38,"@baradas. What was the fix for this? Trying to do something similar...
",tybenz,baradas
299,2014-08-15 17:14:53,"@tybenz open a new issue if you cant figure out how to get it to work. Node automatially buffers requests for you so there is no need to do manual buffering in this case when doing an async lookup for a host. Checkout the readme for the latest API 
",jcrugzz,tybenz
297,2012-08-17 03:38:41,"@thefosk That's not true, we don't actually pause the `req` in `.buffer` (see: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L202-255) So your `req.on('data' ...` statements should work. 

Perhaps the data has already been emitted before you add the listener?
",indexzero,thefosk
296,2012-08-10 01:06:51,"@AvianFlu thanks! updating `node` and `npm` helped find the real issue: My network filesystem (VirtualBox's shared folders) doesn't support creating symlinks apparently.

It's not very common for filesystems to not to support symlinks, so I'll let someone else decide if it's worth supporting. I can workaround it by moving to a different filesystem.
",pixelcort,AvianFlu
294,2013-03-09 05:52:45,"@gilad61 @mmalecki This is a subtle but good fix; we should be setting header names consistently. `res._renderHeaders()` is still case sensitive even in the latest stable versions of node:
- `v0.8.22`: https://github.com/joyent/node/blob/v0.8.22/lib/http.js#L713-L727
- `master`: https://github.com/joyent/node/blob/master/lib/http.js#L740-L754
",indexzero,mmalecki
294,2013-03-09 05:52:45,"@gilad61 @mmalecki This is a subtle but good fix; we should be setting header names consistently. `res._renderHeaders()` is still case sensitive even in the latest stable versions of node:
- `v0.8.22`: https://github.com/joyent/node/blob/v0.8.22/lib/http.js#L713-L727
- `master`: https://github.com/joyent/node/blob/master/lib/http.js#L740-L754
",indexzero,gilad61
289,2012-07-30 19:22:32,"@ashaffer Copying all data into a single buffer makes this particular problem go away, but it doesn't solve the underlying cause. Making two write calls should just work. So I'm curious what kind of ""corruption"" you're seeing, e.g. are buffers truncated, are bytes changed, do packets arrive in the wrong order?
",piscisaureus,ashaffer
289,2012-07-30 19:37:45,"@ashaffer Unless your backend service is very poorly written, response splitting should never be a problem. Remember that tcp is a stream-oriented protocol. If this is _really_ the cause then you probably want to fix your backend. What I would advice you to look into however is whether the handshake entirely makes it to the backend. If you see a tcp FIN or RST packet (an 'end' or 'error' event, in node terms) before the handshake is done, then that could be caused by a node-http-proxy bug.
",piscisaureus,ashaffer
289,2012-07-30 21:09:13,"Bjorn Stromberg:

> @ashaffer It sounds like your backend isn't handling things well. Looking at SockJS, this isn't very pretty:
> 
> 

Yeah, that looks wrong. Maybe file an issue with SockJS ?
",piscisaureus,ashaffer
289,2012-08-09 00:35:52,"@ashaffer Can you condense this to a reproducible test case? Nodejitsu uses `node-http-proxy` in production, load-balancing websockets on a very large scale, and we have never seen this problem.

Your infrastructure is very complex, you haven't described the exact nature of the handshake corruption, and there isn't a simple, standalone reproduction of the problem.

We're happy to help, but there isn't really a lot to go on, here.
",AvianFlu,ashaffer
286,2012-07-26 07:50:36,"@Almad Thanks. I'll make a pass at updating the examples soon. We completely refactored tests in `0.8.2` and the examples got over-looked. We should add tests to ensure all examples run correctly. 
",indexzero,Almad
284,2012-07-22 19:53:16,"@mikl Yes, that's basically it. I'm not against it, but there are other things that are much higher priority than this. If you'd like to implement it and send a PR you'd make my day :)
",indexzero,mikl
279,2012-07-22 06:41:43,"@fbuchinger Yes. You can do this with node-http-proxy. Checkout some of the examples.
",indexzero,fbuchinger
266,2012-07-18 19:18:51,"@cronopio sounds great! Thanks. :)
",jfhbrook,cronopio
266,2012-07-24 14:39:57,"@bkw Hi, this fix come in the version `0.8.2` recently published.
",cronopio,bkw
265,2012-11-07 19:12:12,"@indexzero wow, I wish you said that on the homepage. I've been struggling to find that out for hours now.
",lookfirst,indexzero
264,2013-07-16 13:17:24,"@alum this is expected. When you start proxying and the backend server sends the headers and _then_ breaks the connections, the headers were already proxied back to the client. You have to catch the `""Can't render headers after they are sent to the client.""` error.
",mmalecki,alum
264,2014-02-19 18:00:03,"@arjunrp 
You probably want to set up one proxy per backend server. That way you will always know which server failed and you will have a nice separation between proxies.
",alum,arjunrp
264,2014-02-20 04:59:03,"@alum thanks for the reply, i have got another solution
proxy.web(req, res, target, function (e) {
      // check the error object and mark the target as down 
    });
is this the correct way to do this?
",arjunrp,alum
258,2013-03-09 11:39:48,"@indexzero tested and ran with no problems
This issue is resolved.
Thanks
",No9,indexzero
251,2012-05-22 19:59:38,"@ryanstevens nice catch.
",indexzero,ryanstevens
251,2012-06-19 01:08:06,"@rampr Interesting. If you'd like to make another pull request I will gladly accept. :)
",jfhbrook,rampr
250,2012-05-22 19:32:11,"@ryanstevens Wanna PR us this change? I'll pull it. :D
",jfhbrook,ryanstevens
250,2014-12-16 17:27:49,"@grabbou make sure you are using the 1.x.x version of http-proxy
",jcrugzz,grabbou
250,2014-12-17 14:07:20,"@jcrugzz thanks for the response, how can I check/change that on nodejitsu? Command line / packages.json settings?

For now I only have node engine specified. Actually, I think that forcing SSL's should be done by default if one specified SSL certificates in Nodejitsu dashboard (as it's the only reasonable approach to be honest)
",grabbou,jcrugzz
250,2014-12-17 16:56:37,"@grabbou if this is about the nodejitsu product please open a support ticket, this is the wrong context for this conversation.
",jcrugzz,grabbou
247,2012-05-22 09:44:15,"@indexzero I can see your point, although I would argue that supporting a standard method for HTTP stream aggregation, even in most ""transparent"" proxies is worth bending the rules.

Would this be perhaps acceptable as an option?
Alternatively I might have a go at making this work with the start event, but for some reason I couldn't make it work when I tried it.
",1stvamp,indexzero
247,2012-05-31 00:33:41,"Yeah, @indexzero is right, we shouldn't add headers by default. Maybe only set it when the `changeOrigin` option is set, as in nodejitsu/node-http-proxy#247.
",coderarity,indexzero
236,2012-08-19 01:50:42,"+1 but @jrolfs, I just installed from your fork and you have some conflict markers checked in.

https://github.com/jrolfs/node-http-proxy/blob/master/lib/node-http-proxy/http-proxy.js#L292
",jshirley,jrolfs
233,2012-04-19 21:00:12,"I'm also stuck on this.  I'm using npm version 1.1.18.  @Marak is there something socket.io 0.6.18 provides that socket.io 0.6.17 does not?
",gordoncww,Marak
232,2012-06-05 23:19:04,"@rigolepe 0.8.1 is out, can you test it again to see if still its an issue. Thanks
",cronopio,rigolepe
224,2012-05-31 14:28:42,"@rthais Works this lib for you?

@rthais @CodeRarity can we close this?
",cronopio,rthais
224,2015-02-23 00:19:25,"@konklone I followed your instructions for policyfile but I get an error that the address is in use. I have been going in circles with this for a bit. Any help would be greatly appreaciated


",dvideby0,konklone
224,2015-02-23 00:35:22,"@dvideby0 It sounds like you might already have an instance of the server running in some other terminal?
",konklone,dvideby0
224,2015-02-23 02:35:58,"@konklone Unfortunately no and the code I put above fails all on its own (without any other logic). Not sure if there is something additional I am supposed to add but I should probably point this issue to the author. Thank you for the help sir! 
",dvideby0,konklone
219,2012-03-29 20:24:40,"Awesome suggestion @vvo 

Thanks! i will try this tomorrow.
",kul,vvo
219,2013-02-20 14:55:43,"@kul how did you get this to work? I can see how using the `connect-cache` middleware allowed the cache to handle it if it is already stored. But if it is not (cache miss), then it just passes through to the proxy, so the results of the proxy do not get cached. How did you ever populate the cache?
",deitch,kul
219,2013-09-10 15:37:20,"@deitch Did you happen to work out how to intercept a response?
",philjackson,deitch
219,2013-09-10 17:14:28,"Thanks, @deitch.
",philjackson,deitch
217,2012-07-22 06:44:25,"Looks like this should be fixed from the PR from @coderarity  
",indexzero,coderarity
217,2013-04-02 03:48:18,"@indexzero I'm not quite sure how this was fixed, I still can't get a similar proxy usecase to run:


",pulkitsinghal,indexzero
215,2012-06-05 23:10:50,"The 0.8.1 version is out, @kul can you test again please?
",cronopio,kul
214,2012-03-28 03:42:20,"@thefosk You should say that in the pull request =D
",coderarity,thefosk
211,2012-04-06 14:49:41,"@vicngtor I had the exact same issue and @CodeRarity's solution fixed it immediately.
",mhseiden,vicngtor
211,2012-04-09 23:09:05,"@mhseiden I see. 

Do you by any chance have that code available for me to use as a guide? 

Thanks
",vicngtor,mhseiden
209,2012-03-14 23:50:03,"@outaTiME I can replicate your issue but it seems to only occur with sites that use https, which is expected.

Try connecting to a site that doesn't attempt to use ssl, such as `google.com` and it'll work fine.

In your use case (convenience?), not using the proxy and instead responding with 302 redirects, may be enough.
",jfhbrook,outaTiME
206,2012-03-03 08:04:44,"@quartzjer This looks good. So good that I would ask that you update other places you see `flushed = *.write(...`  with this pattern.
",indexzero,quartzjer
203,2012-07-23 20:43:59,"@indexzero thanks, that would be great.
",niallo,indexzero
202,2012-06-05 22:56:02,"@Jxck still an issue for you?, can we close it?
",cronopio,Jxck
197,2012-07-10 13:18:57,"I have the same question as you and I am keeping trying now. So far as I concerned, I doubt that it does NOT support **standalone https proxy**, which is a quite common use, since there is no reason for not being mentioned in all passages one could reach  in examples or even in Google. The two demos about **https** only work in **reverse** proxy scenario. @coderarity 
",kainliu,coderarity
197,2012-07-11 06:06:23,"With patience worn out I am leaving this module as a unsuccessful trial, and if anyone who is looking for **standalone proxy supports HTTPS** my suggestion is to traditional long-time-tested proxy software as **squid** . However, this module works stable in HTTP. @penkween 
",kainliu,penkween
196,2012-02-15 06:11:11,"Hi @penkween ,

In the example you linked, they are able to modify the response by monkey punching res.write inside the middleware. By using a similar technique with res.writeHead and/or res.setHeader (you'll have to do some research to figure out all the relevant methods) you should be able to make this work. That said, monkey-punching is kind of a hack and the proxy module was designed more for quick transparent proxying than it was for arbitrarily modifying the http request and response.
",jfhbrook,penkween
196,2015-02-19 15:55:16,"@penkween thanks man!
",swogger,penkween
195,2012-03-02 07:01:02,"@indexzero could we get an update on this?
",AndreasMadsen,indexzero
195,2012-03-04 07:36:18,"@indexzero @Marak hearing crickets here ...
",tglines,indexzero
193,2012-02-12 03:01:36,"@astronouth7303 Have you tried a simple HTTPs server in node.js with the same certs? It could be a node.js core issue. @indutny would know more.
",indexzero,astronouth7303
193,2012-02-13 20:56:43,"@astronouth7303 It's relatively simple: http://nodejs.org/docs/latest/api/https.html#https.createServer
",indexzero,astronouth7303
192,2012-02-12 02:45:28,"@quartzjer How would you go about fixing it? Honestly I'm not sure I follow what's wrong.
",indexzero,quartzjer
192,2012-03-15 21:59:00,"+1

@quartzjer -> You could create a clean pull request from that fork to accelerate the fix.
",ovaillancourt,quartzjer
192,2012-03-15 22:37:36,"I would, but I don't know what the problem is actually being solved so
I just commented it out :)

On Thu, Mar 15, 2012 at 4:59 PM, Olivier Vaillancourt
reply@reply.github.com
wrote:

> +1
> 
> @quartzjer -> You could create a clean fix + pull request from that fork to accelerate the fix.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nodejitsu/node-http-proxy/issues/192#issuecomment-4529924
",quartzjer,quartzjer
191,2012-02-12 02:48:46,"@nanha I'm not sure I understand. Can you please provide the code you are seeing a memory leak with? 
",indexzero,nanha
190,2012-02-12 02:30:54,"@fjakobs We do not use JSLint. We use JSHint with these settings: https://gist.github.com/1263182. We've been a bit lax on enforcing since we were waiting on `laxcomma` to his `jshint:master` which landed a couple weeks ago
",indexzero,fjakobs
190,2012-07-25 04:48:03,"@fjakobs Thanks anyway. FYI. The code base it pretty much JSHint compliant now. I did some work on it over the weekend.
",indexzero,fjakobs
183,2012-01-30 10:23:47,"Thanks guys for the pointers. I guess what I'm trying to do is ""do this request and then do something to the returned stuff and THEN send it back"" as @jesusabdullah has pointed out. @elfsternberg: thanks for the code pointer. I'm actually using that code as a basis to my proxy server, but I'm having lots of trouble getting all to work. Seeing as this isn't related to issues with this project, I'll just try stackoverflow.com. Thanks guys.
",hynese,elfsternberg
183,2012-03-22 16:43:15,"It's actually not that hard @hynese, just not built-in in node-http-proxy. You can quickly gleam that the proxy is only calling `writeHead()`, `write()` and `end()` methods of the `res` object. Since `res` is already an `EventEmitter`, you can use it to broadcast your custom events. Code example here: http://stackoverflow.com/questions/9741607/how-to-listen-to-node-http-proxy-traffic/9826701
",zzen,hynese
183,2012-10-06 06:42:48,"@zzen your example on SO is really helpful. But I'm not clear how to modify the data stream before it gets sent back to the client. 

I need to rewrite a specific header if the response contains that header. I'm checking the headers for a `set-cookie` header, and if one of the cookies matches a value, then I update the `Path` of that cookie to `/`. 

Your code enables me to listen to the data stream for headers, but I'm not clear how to change that data and pass the changed value back to the client. 
",tauren,zzen
183,2012-10-06 10:49:07,"@tauren - thanks, responded on SO as appropriate.
",zzen,tauren
181,2013-06-06 04:07:33,"@pedramp Hey, did you get something working? Trying to do something similar. 
",zkhalapyan,pedramp
181,2013-06-06 08:06:43,"@zkhalapyan nothing! I had problem in secure websites.
",pedramp,zkhalapyan
180,2012-01-26 21:39:08,"@AvianFlu: Thanks for the buffer pointer, but this ended up being caused by express's body-parsing.

Instead of declaring the API route (for proxying) within express routes, I configured it as middleware and `use`d it _before_ `express.bodyParser()`.

Some coffeescript of the solution:


",joeyAghion,AvianFlu
180,2014-02-06 18:16:22,"@andyfischer 

Man, you saved my life!
",fonini,andyfischer
180,2015-04-14 15:11:35,"The example from [bodyDecoder](https://github.com/nodejitsu/node-http-proxy/blob/master/examples/middleware/bodyDecoder-middleware.js) pointed out by @gdw2 does not work for me. I get 



Using `connect-restreamer` results in the request continuing to hang.

I am using express instead of connect. 



This may related to [this issue however](https://github.com/nodejitsu/node-http-proxy/issues/777).
",FoxxMD,gdw2
180,2015-04-20 15:49:38,"@FoxxMD same behavior here
",franck34,FoxxMD
180,2015-05-19 13:18:06,"@schumacher-m thanks for that snippet...works for me
",darrinholst,schumacher-m
180,2015-07-28 23:33:54,"@schumacher-m BIG thanks for your tips. It works around the hang issue finally - after a whole day of debugging.
",aidanbon,schumacher-m
180,2015-11-03 16:43:27,"Thanks @schumacher-m . There's actually also an example in the repo itself that handles the same issue: https://github.com/nodejitsu/node-http-proxy/blob/master/examples/middleware/bodyDecoder-middleware.js
",dmkc,schumacher-m
180,2016-04-19 20:12:30,"@vvpvvp,Can i modify/add `req.newkey = 'a'` and send it to the proxy
",tomalex0,vvpvvp
180,2016-06-20 06:39:52,"@vvpvvp big thinks for your tips
",gutenye,vvpvvp
180,2016-07-03 17:39:54,"@narciero I am also getting same error. Did you find any workaround for this ?
",akprats33,narciero
179,2012-03-31 01:35:09,"@vvo have you tried Union? `node-http-proxy` lets you use your own http server to route requests, see ""Setup a stand-alone proxy server with custom server logic"" in the readme. Union can fill the job of http.createServer for you.
",coderarity,vvo
179,2012-11-05 09:29:33,"@vvo As a hackish workaround, some connect middleware seem to invade the request object. See https://github.com/senchalabs/connect/blob/master/lib/middleware/logger.js#L136 for an example.
",tuomassalo,vvo
178,2012-06-05 22:42:57,"@twhid can you check if this still its an issue? use the 0.8.1 version.
",cronopio,twhid
177,2012-01-24 10:08:34,"@indexzero 
Do node-http-proxy actually set headers as a client or as a server? I think nginx is sending headers as a client.
",inspiredjw,indexzero
174,2012-01-08 07:43:01,"@metahack Seem to be several bad merges in this commit, e.g. https://github.com/metahack/node-http-proxy/commit/1d51b7897f4cc05e8387a12a03b8c5a1f0140b0a#L1R37
",indexzero,metahack
172,2012-06-11 02:37:22,"@MathieuTurcotte -> Thx for the closing notification, wouldn't have found about that commit otherwise. Appreciated.
",ovaillancourt,MathieuTurcotte
171,2012-02-14 18:28:20,"Awesome. Good to know it's not our fault. Thanks for heads up guys! @Marak, you won internets for finding it!
",mmalecki,Marak
167,2012-03-30 02:15:38,"@jch does your example not work for you? If you don't call `next` in your middleware, it won't pass it on to the default handler anyways (next is a function passed into the third parameter in the middleware).
",coderarity,jch
167,2015-04-07 08:56:57,"Hi @jch ,

Could you tell me how did you overcome this issue?
Me too need implement a conditional proxy. 
",efkan,jch
166,2011-12-05 03:32:52,"@alnoor this applies to any node app, not just Express, but you have to think about what is happening when you do a database query while you have an incoming request. The request body ""data"" events wont stop for you, they will still fire while the database query is processing, so when the query is complete you may have potentially ""missed"" several if not all of the body.
",tj,alnoor
161,2011-11-26 21:00:14,"Thanks for the heads up @mmalecki, I'll switch over to 0.4.12 to run node-proxy for now, glad I'm not crazy :)
",wavded,mmalecki
159,2011-11-23 18:59:48,"@AvianFlu: Would these issues be related to how, under 0.6.2, I've never seen and 'end' or 'close' event from the proxy?  
",elfsternberg,AvianFlu
159,2011-11-24 03:14:38,"@AvianFlu: Never mind.  That seems to be an oddity related to Chromium.  I get 'end' events when I use Lynx.  Weird.  Worrisome?
",elfsternberg,AvianFlu
152,2011-11-10 15:27:05,"@ctide I'm pretty sure websocket support won't work in node@0.6.x until the `http2` branch is merged in. This updates the internal HTTP api that was rewritten by @mikeal. 

@mmalecki could you take a look at merging that in and then push a version of node-http-proxy that works on node >= 0.6.0

_To reiterate: there are breaking and incompatible changes between the 0.4.0 and 0.6.0 internal HTTP APIs that by definition make it impossible for node-http-proxy to work on both._
",indexzero,ctide
151,2012-03-31 02:07:52,"@manobi is this still a problem for you?
",coderarity,manobi
150,2011-11-10 23:45:59,"good catch @gotwarlost I think that should be the default behavior. I can't think of a reasonable situation where it should be otherwise.
",dominictarr,gotwarlost
150,2011-11-11 01:30:26,"this is fixed in https://github.com/nodejitsu/node-http-proxy/commit/b4d41c3628ade82792eb361b095ab014a88d537a
(`npm install http-proxy@0.7.5`)



then



...the real page...

can you check this works for you @jmonster ?
",dominictarr,jmonster
150,2011-11-11 14:54:17,"@dominictarr, you rock! Works perfectly now
",gotwarlost,dominictarr
150,2012-01-02 20:00:00,"@jmonster can you test this against `http-proxy@0.8.0`?  I'm fairly certain that we fixed this while doing the 0.6.x migration stuff.
",AvianFlu,jmonster
141,2011-11-04 11:11:07,"@c4milo is this still an issue?
",dominictarr,c4milo
141,2012-03-31 02:11:10,"@c4milo have you tested this yet (see AvianFlu's comment)? is it still an issue?
",coderarity,c4milo
141,2012-03-31 02:19:06,"Oh, not really. I ended up using haproxy.
On Mar 30, 2012 10:11 PM, ""Christian Howe"" <
reply@reply.github.com>
wrote:

> @c4milo have you tested this yet? is it still an issue?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> 
> https://github.com/nodejitsu/node-http-proxy/issues/141#issuecomment-4854153
",c4milo,c4milo
141,2012-06-05 22:30:36,"@c4milo 0.8.1 is out, please test it for reproduce this issue or close it. Thanks!
",cronopio,c4milo
139,2012-06-05 22:32:39,"@gonzaloruizdevilla @desaintmartin can you test it again against the 0.8.1 version just released today. Should works now.
",cronopio,gonzaloruizdevilla
139,2012-06-05 22:32:39,"@gonzaloruizdevilla @desaintmartin can you test it again against the 0.8.1 version just released today. Should works now.
",cronopio,desaintmartin
133,2011-10-18 20:41:03,"@manast the test harness starts a separate single-use proxy for each entry in the proxytable and each proxy must have a unique port as per the way the test harness is implemented
",maxogden,manast
133,2011-10-19 07:16:22,"@maxogden well, that was what I thought, but it seems as I never manage to find any port that is not already busy, because it keeps failing :/
",manast,maxogden
131,2011-10-17 15:29:08,"@zelkin. Looks like the port you have there (port `7`) is wrong. In the example (https://github.com/nodejitsu/node-http-proxy/blob/master/examples/websocket/websocket-proxy.js#L76), we are listening on 8081.
",indexzero,zelkin
131,2011-10-18 16:58:23,"What @indexzero says. Trying to listen on port 7 makes no sense anyway. Try to set up a web server on this port. Browsers refuse to connect to it (at least so do FF and Chrome on Linux).
",mmalecki,indexzero
129,2011-10-17 12:27:13,"@manast if you use node-http-proxy at 4d50915373b6afaafc7857a3e9366e8e77315683 then that is the behavior that you will get, is that what you want?

the first type of proxying could be useful for sharding your app, but foo.com/db: host:port could be useful for sidestepping the single origin policy... which is probably much more useful.
",dominictarr,manast
129,2011-10-17 14:05:21,"@dominictarr

The reporter is complaining that pizza.com/taco/muffins is proxied to 127.0.0.1:8099/taco instead of to 127.0.0.1:8099/muffins/taco, which according to the documentation are both wrong behaviors, or at least thats my interpretation of what I read. But besides that I think that proxying just to  127.0.0.1:8099 should be the most common use case, i.e., you have several servers and you want to place them under different sub routes (to avoid for instance cross-browser scripting problems, etc). If we keep the subroutes in the proxied request, then we are creating a coupling between the proxy and the servers, both need to be always in sync, which I dont think is a good idea. Every server should be agnostic of where the proxy configurator has placed it...
Wouldnt it be better to support this kind of routes if we really want to keep subroutes:



?
",manast,dominictarr
129,2011-10-17 18:58:08,"@manast I like the subroutes API you defined, it seems more robust than my solution, which is more robust than what used to be in node-http-proxy. If you make a pull request to support your suggestion then I'd be happy to use it.
",maxogden,manast
129,2011-10-17 20:55:15,"@manast, your description is better. it would probably only be a small change from what @maxogden has done to get that behavior.
",dominictarr,maxogden
129,2011-10-17 20:55:15,"@manast, your description is better. it would probably only be a small change from what @maxogden has done to get that behavior.
",dominictarr,manast
127,2011-10-10 21:01:34,"+1 for @substack's being a lib
",tj,substack
127,2011-10-11 05:30:18,"The `.hasOwnProperty()` is just to see whether `opts` has those fields since if you set them to falsey values they aren't sent.

@indutny: https://gist.github.com/1275259 and https://github.com/substack/bouncy/tree/master/bench
",substack,indutny
127,2011-10-11 06:34:49,"@substack `.hasOwnProperty()` might not be the best way to do that http://jsperf.com/hasownpropvsbool #maxPerf! >=)
",0x00A,substack
125,2011-10-07 17:33:20,"@koichik This does not seem to completely fix issue #59 because the `HTTP/1.1` status line is still returned. Not `HTTP/1.0`
",indexzero,koichik
123,2012-02-12 00:07:34,"@bearnard I'm not sure there is a workable solution here. The `proxyError` event may be raised after the `response` has been partially written to or closed. 

Consider the scenario when the first backend fails midway through the response. It is impossible for the proxy to know at what point of the response the reverse proxy request errored.

My suggestion would be to pass a mock response object to `proxy.proxyRequest` which buffers the response into memory and when it ends then writes it back to the actualy `res`. This way you can discard the entirety of the data returned from the backend that failed and try all over again.
",indexzero,bearnard
122,2011-10-03 23:55:34,"@temsa Thanks. Cherry-picked in b7adf866b595f0d64a3ef6bde19271276450e723 and published in `node-http-proxy@0.7.3`
",indexzero,temsa
116,2012-04-02 14:42:07,"@isaacs with 0.6.0 out would it make sense to look at this again?
",coderarity,isaacs
116,2012-07-22 06:38:30,"From what I've heard from @isaacs this doesn't make sense until `node@0.10.0` has a stable domains API
",indexzero,isaacs
116,2012-07-31 13:49:04,"How are domains involved here? I'm down with maintaining our code to make it match current API.

Also, looks like `.write()` shouldn't throw anymore. @isaacs, is that correct?
",mmalecki,isaacs
116,2013-04-24 08:19:29,"Since 0.10 is released, can we consider this refactoring again?

I see that @mmalecki has prepared a branch https://github.com/nodejitsu/node-http-proxy/tree/refactor with the pipe implementation a few month ago.

The code would be far easier to maintain and also it would simplify a lot the modification of the HTML response going back to the user.
",abarre,mmalecki
112,2011-09-29 20:22:01,"@manast I need a bigger code sample to understand what you are referring to. If you are trying to proxy WebSockets, why are you not calling `.proxyWebSocketRequest()`?
",indexzero,manast
112,2011-09-30 07:55:00,"Hello,

I will update with more code. But the reason I am not using proxyWebsocketRequest is because I did not need to do it before, and it worked well. Its after the API change that this has stop working.

regards.

On Sep 29, 2011, at 10:22 PM, Charlie Robbins wrote:

> @manast I need a bigger code sample to understand what you are referring to. If you are trying to proxy WebSockets, why are you not calling `.proxyWebSocketRequest()`?
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nodejitsu/node-http-proxy/issues/112#issuecomment-2242780
",manast,manast
112,2011-09-30 08:20:40,"@manast I need a full code sample to give you any help.
",indexzero,manast
112,2011-10-11 14:49:11,"@indexzero

any news on this issue? :)
",manast,indexzero
104,2011-09-08 13:02:56,"I had the same problem. I was expecting this to work since it works seamlessly in node core. Anyway, @jimisaacs solution is working right now.
",Floby,jimisaacs
104,2011-09-08 15:41:24,"@jimisaacs +1, just ports too, defaulting the host would be nice & a very common use-case for people just wanting cheap vhost-like behaviour



etc
",tj,jimisaacs
104,2011-09-08 21:01:40,"@Floby How does your [pull request](https://github.com/nodejitsu/node-http-proxy/pull/105) support UNIX sockets? 
",indexzero,Floby
104,2011-09-09 00:04:48,"@Floby I want to accept your pull request, but there is a big set of changes coming down the pipeline for `v0.7.x` which optimizes the hot-paths by ~10%. I will most likely do sometime similar once that refactor is done.

I will leave this open as a reminder to do so.
",indexzero,Floby
104,2012-05-11 08:23:27,"@brianloveswords I would like you to implement it ;)
",indexzero,brianloveswords
104,2012-05-11 12:26:31,"@indexzero I'll see if I can start throwing together a patch today!
",brianloveswords,indexzero
104,2012-05-29 11:32:53,"@indexzero @brianloveswords Hey, guys. I don't want to be a party-crasher but this neat bug still isn't fixed yet.If you don't want to or can't fix it could you please point me to the lines of codes, that probably cause the problem? I'd then try to fix it myself and make a pull request.

Thanks!
",buschtoens,brianloveswords
104,2012-05-29 11:32:53,"@indexzero @brianloveswords Hey, guys. I don't want to be a party-crasher but this neat bug still isn't fixed yet.If you don't want to or can't fix it could you please point me to the lines of codes, that probably cause the problem? I'd then try to fix it myself and make a pull request.

Thanks!
",buschtoens,indexzero
100,2011-09-02 15:16:24,"I'll merge and push this out tonight.

+1 to refactoring this with BufferedStream and Stream.pipe. The big changes are in the `v0.7.x` branch which I hope on finishing sometime in the next few weeks. @isaacs I'm porting over your changes as they come in to this branch. 
",indexzero,isaacs
98,2011-08-30 22:43:58,"Thanks for all the patches @isaacs! 

I had a feeling we might run into issues like this once we patched those last errors. We'll get someone to review and merge shortly.
",Marak,isaacs
97,2011-08-30 19:37:56,"@indexzero I don't know if it's a core bug, I don't know enough of the node-http-proxy module to debug it further. I might have missed something obvious.
",3rd-Eden,indexzero
97,2011-09-11 05:16:35,"@ry Firefox 7 Websocket Requests. Seems to be consistent across Firefox 6 (draft7), Firefox 7 (draft10) and (reportedly) Chrome 14 (draft10).

More info in this comment: https://github.com/nodejitsu/node-http-proxy/issues/97#issuecomment-2058654
",indexzero,ry
97,2011-09-21 19:27:42,"@mmalecki Thanks for the information, but @3rdeden has confirmed that `socket.io@latest` works on node stand-alone, but not behind node-http-proxy. 

So the binary frames may be a red herring, but I will look into it.
",indexzero,mmalecki
97,2011-09-29 23:18:10,"The request gets stuck, as @mmalecki said, and then, since there's no error status, eventually https://github.com/joyent/node/blob/v0.4.12/lib/http.js#L1284-1293 is reached and the ""socket hang up"" message is received.  The real key to fixing this lies in figuring out how to make it past https://github.com/joyent/node/blob/v0.4.12/lib/http.js#L753 to the socket.write() call at the end of that method.
",AvianFlu,mmalecki
97,2011-09-29 23:55:40,"@ry There really isn't a fully programmatic test case. Is that what you mean by a ""simple test case"". No node.js library (node-websocket-client, websocket-node, etc) correctly emulates how browsers have implemented WebSockets.

The easiest way to reproduce this right now is to 
1. Write anything that uses socket.io (we have some simple test cases if you'd like to talk offline)
2. Put node-http-proxy in front of them
3. Open it in Firefox 7+ or Chrome 14+
",indexzero,ry
97,2011-10-01 16:52:08,"@indexzero fix confirmed
",3rd-Eden,indexzero
93,2011-08-28 05:51:57,"@isaacs Merged and published as `http-proxy@0.6.3`. Point of question about testability: do you know a good way to reproduce `res.write()` throwing? 

Would like to add this to the test suite.
",indexzero,isaacs
93,2011-08-28 22:23:22,"@indexzero I can't figure out how to reproduce it, either.  It shouldn't be possible.
",isaacs,indexzero
92,2011-08-28 05:44:07,"@bnoguchi I think you are mistaken about how the tests are setup:
1. `web-socket-proxy-test.js` calls `TestRunner.prototype.webSocketTestWithTable` https://github.com/nodejitsu/node-http-proxy/blob/master/test/web-socket-proxy-test.js#L58
2. `TestRunner.prototype.webSocketTestWithTable` calls `TestRunner.prototype.startProxyServerWithTable` https://github.com/nodejitsu/node-http-proxy/blob/master/test/helpers.js#L175-194
3. `TestRunner.prototype.startProxyServerWithTable` calls `httpProxy.createServer` with a merged object literal (no callback) https://github.com/nodejitsu/node-http-proxy/blob/master/test/helpers.js#L238

In addition: 
1. This pull request uses the logic from `.proxyRequest()` with works with `http.Response` instances, not `net.Socket` instances. 
2. There is support for `ProxyTable` instances in `.proxyWebSocketRequest()` already: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L641-650

Happy to discuss whatever problems you're running into, but won't be merging this in as it seems like a false-positive.
",indexzero,bnoguchi
91,2011-08-13 02:19:35,"@newshorts Actually no, it is not. You are probably confused because we are using `socket.io@0.6.18`, not `socket.io@0.7.x` which has significant refactoring to various paths:

https://github.com/nodejitsu/node-http-proxy/blob/master/test/web-socket-proxy-test.js#L41-42
",indexzero,newshorts
89,2011-09-05 10:31:23,"@digitalrinaldo can you answer my questions so that we can move forward with this issue?
",dominictarr,digitalrinaldo
89,2011-09-08 15:54:41,"@digitalrinaldo I think I see where you are going with this.

I think it's something that would allow this module to wrap itself around an express application.
All the logic is in place in the this module, it would just have to be reworked a little to be able to use that logic as express middleware.
",jimisaacs,digitalrinaldo
85,2011-08-03 16:20:10,"@AvianFlu i am implementing a proxy that simulate a ipad request, and iam trying to remove flash element in response body, how can i do that? thanks
",raphaelcosta,AvianFlu
84,2011-08-02 18:27:58,"@drjackal @KimSchneider is actually correct here. @dominictarr +1 to merge this
",indexzero,KimSchneider
84,2011-08-02 18:27:58,"@drjackal @KimSchneider is actually correct here. @dominictarr +1 to merge this
",indexzero,dominictarr
82,2011-07-29 18:30:56,"@AvianFlu, thanks for the reply!

The example you posted shows how to connect to a target server/website that has multiple IPs/domains. So each request is routed to a different address of the target server.

I have a different need. I have a machine with multiple IPs attached to its network interface. I want to use a different IP for each request I do to a website. This will avoid the target server to track the users who make the requests.

I believe this is achievable by programming the net.Socket connection and would like to know if this project already support it in any way.

Thanks
",barbolo,AvianFlu
82,2011-07-31 20:02:20,"Thanks, @tralamazza.

I'm looking for the Ruby EventMachine as well. It seems that its implementation allows to bind the address before making the requests.

I'll still be looking for a solution with node.js.
",barbolo,tralamazza
82,2011-08-03 13:27:40,"Thanks so much, @tralamazza!
",barbolo,tralamazza
78,2012-04-02 14:28:49,"@tralamazza is this still a problem from you? I tried your user-case and I did get a `content-length` header back. (I guess that's an old API key, but you should probably keep that to yourself.)
",coderarity,tralamazza
75,2011-07-22 01:36:29,"@nodesocket This is actually by design in node.js core and has nothing to do with `node-http-proxy`. Here's a quick sample repro'ing the problem with the `http` module:



It's actually good that the server does this because you want to keep serving all of your connections and not abruptly cut them off. What would be nice is if the `close` event didn't fire on the `http.Server` instance until all of the connections had closed gracefully. I've talked to @ry and opened an issue on node.js core: https://github.com/joyent/node/issues/1383
",indexzero,nodesocket
74,2011-07-21 15:45:09,"@dominictarr Can we push forward on all of these refactor issues in a `v0.6.x` branch?
",indexzero,dominictarr
70,2011-07-18 09:07:47,"good work.

I can see it work in firefox (note, firebug must be installed - to get console.log) 
If you request localhost:6666/xhr (bypass proxy) it works correctly.
If you request localhost:6060/xhr (through proxy) it does not work.

the same behaviour occurs with curl. 

I will tag this as confirmed bug, migrate this test to vows, then fix.

thanks @fjakobs, good hunting! 
",dominictarr,fjakobs
68,2011-07-05 16:30:48,"I agree with @indutny.  This will most likely go away if you upgrade npm.  
",AvianFlu,indutny
66,2011-07-18 00:06:33,"@dominictarr @bmeck - Read what he is asking. He's not having an issue with basic proxying. 

_But how to set it up so that content is actually served from the proxy server? I want to analyse the traffic before sending it through._

@hynese - Can you be more clear as to what your issue is? Are you trying to do custom proxy logic? Check out the examples folder and this file: https://github.com/nodejitsu/node-http-proxy/blob/master/examples/standalone-proxy.js
",Marak,bmeck
66,2011-07-18 00:06:33,"@dominictarr @bmeck - Read what he is asking. He's not having an issue with basic proxying. 

_But how to set it up so that content is actually served from the proxy server? I want to analyse the traffic before sending it through._

@hynese - Can you be more clear as to what your issue is? Are you trying to do custom proxy logic? Check out the examples folder and this file: https://github.com/nodejitsu/node-http-proxy/blob/master/examples/standalone-proxy.js
",Marak,dominictarr
66,2011-07-18 00:06:33,"@dominictarr @bmeck - Read what he is asking. He's not having an issue with basic proxying. 

_But how to set it up so that content is actually served from the proxy server? I want to analyse the traffic before sending it through._

@hynese - Can you be more clear as to what your issue is? Are you trying to do custom proxy logic? Check out the examples folder and this file: https://github.com/nodejitsu/node-http-proxy/blob/master/examples/standalone-proxy.js
",Marak,hynese
66,2011-07-18 07:42:47,"yeah it does look like @hynese is trying to log the response, which is issue #58
",dominictarr,hynese
66,2011-08-28 06:02:41,"@hynese @marak @dominictarr @bmeck This is now resolve in the latest version of `node-http-proxy`. Check out some of the examples around ""middleware"" in: https://github.com/nodejitsu/node-http-proxy/tree/master/examples
",indexzero,hynese
66,2011-08-28 06:02:41,"@hynese @marak @dominictarr @bmeck This is now resolve in the latest version of `node-http-proxy`. Check out some of the examples around ""middleware"" in: https://github.com/nodejitsu/node-http-proxy/tree/master/examples
",indexzero,bmeck
66,2011-08-28 06:02:41,"@hynese @marak @dominictarr @bmeck This is now resolve in the latest version of `node-http-proxy`. Check out some of the examples around ""middleware"" in: https://github.com/nodejitsu/node-http-proxy/tree/master/examples
",indexzero,dominictarr
63,2011-06-21 20:34:24,"@daemon-byte -

For the most part, you should be able to fix your code to achieve the functionality you want. Your code is just not structured correctly at all, see my previous comments. I can't help you fix it without rewriting it, you've coupled too many things too closely together. Is your coding background in C or PHP? You should think about trying to write more modular code, especially when dealing with Node.js

I've read through your requirements a little bit. I think there would be utility in having generic whitelist / blacklist functionality. We've opened up a ticket for this @ https://github.com/nodejitsu/node-http-proxy/issues/2 last year. I'm going to circle around and see if we can get this functionality built this week.
",Marak,daemon-byte
62,2011-06-14 04:38:11,"@qzaidi The hostNameOnly was a contributed feature, so additional information about this issue (such as a stack trace or some sample code that reproduces the issue) would be quite helpful. 

What version of node, npm, and node-http-proxy are you currently using?
",indexzero,qzaidi
62,2011-06-26 15:20:18,"@daemon-byte, are you using HTTPS? I do think that there are some cases in which HTTPS can cause a socket wake up and become unwriteable.
",indexzero,daemon-byte
62,2011-06-26 17:03:03,"@daemon-byte So I'm going to close this as `wont fix`. I made a fix (which you can see here: https://gist.github.com/1047764), but after running the benchmarks with this applied the additional overhead of the `try/catch` logic seems to be degrading performance by `10-15%`.

My suggestion would be to use a standalone instance of the `HttpProxy` object and wrap the entire call to `.proxyRequest()` in a `try/catch`.
",indexzero,daemon-byte
62,2011-07-25 20:54:49,"@daemon-byte @bpierre  - To my understanding this issue only affects hostNameOnly mode. If you want a more robust proxy, you should be using the lower level APIs we expose ( like @indexzero has suggested ). 
",Marak,daemon-byte
62,2011-07-25 20:54:49,"@daemon-byte @bpierre  - To my understanding this issue only affects hostNameOnly mode. If you want a more robust proxy, you should be using the lower level APIs we expose ( like @indexzero has suggested ). 
",Marak,indexzero
62,2011-07-25 20:54:49,"@daemon-byte @bpierre  - To my understanding this issue only affects hostNameOnly mode. If you want a more robust proxy, you should be using the lower level APIs we expose ( like @indexzero has suggested ). 
",Marak,bpierre
62,2011-07-25 21:53:26,"@daemon-byte @bpierre @coolbloke1324 This issue is marked `wont-fix` because there is nothing we can do to fix it in the node-http-proxy project itself; it is blocked by a core node.js bug which is not scheduled for fix until `0.6.x`. 

In the meantime, a recent feature has been added which may allow you work around this issue if you don't use the `x-forwarded-*` headers. You can now pass in `enableXForwarded: false` in the options to `HttpProxy` instances and `.createServer()` and this will bypass the check which is throwing the exception: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L385

You will of course not get the `x-forwarded-*` headers in your target application, but if that's not a concern for you this do the trick.
",indexzero,daemon-byte
62,2011-07-25 21:53:26,"@daemon-byte @bpierre @coolbloke1324 This issue is marked `wont-fix` because there is nothing we can do to fix it in the node-http-proxy project itself; it is blocked by a core node.js bug which is not scheduled for fix until `0.6.x`. 

In the meantime, a recent feature has been added which may allow you work around this issue if you don't use the `x-forwarded-*` headers. You can now pass in `enableXForwarded: false` in the options to `HttpProxy` instances and `.createServer()` and this will bypass the check which is throwing the exception: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L385

You will of course not get the `x-forwarded-*` headers in your target application, but if that's not a concern for you this do the trick.
",indexzero,bpierre
62,2011-07-25 23:05:56,"@indexzero thanks for the details. Don't suppose you know the node.js bug tracker url do you? Interested to know what is going on under the hood with this one!
",Irrelon,indexzero
62,2011-07-26 01:29:46,"@daemon-byte @bpierre @coolbloke1324 @indexzero

the feature indexzero refers to in

> In the meantime, a recent feature has been added which may allow you work around this issue if you don't use the x-forwarded-\* headers. You can now pass in enableXForwarded: false in the options to HttpProxy instances and .createServer() and this will bypass the check which is throwing the exception: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L385
> 
> You will of course not get the x-forwarded-\* headers in your target application, but if that's not a concern for you this do the trick.

is now available on npm in http-proxy@0.6.0
",dominictarr,daemon-byte
62,2011-07-26 01:29:46,"@daemon-byte @bpierre @coolbloke1324 @indexzero

the feature indexzero refers to in

> In the meantime, a recent feature has been added which may allow you work around this issue if you don't use the x-forwarded-\* headers. You can now pass in enableXForwarded: false in the options to HttpProxy instances and .createServer() and this will bypass the check which is throwing the exception: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L385
> 
> You will of course not get the x-forwarded-\* headers in your target application, but if that's not a concern for you this do the trick.

is now available on npm in http-proxy@0.6.0
",dominictarr,indexzero
62,2011-07-26 01:29:46,"@daemon-byte @bpierre @coolbloke1324 @indexzero

the feature indexzero refers to in

> In the meantime, a recent feature has been added which may allow you work around this issue if you don't use the x-forwarded-\* headers. You can now pass in enableXForwarded: false in the options to HttpProxy instances and .createServer() and this will bypass the check which is throwing the exception: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L385
> 
> You will of course not get the x-forwarded-\* headers in your target application, but if that's not a concern for you this do the trick.

is now available on npm in http-proxy@0.6.0
",dominictarr,bpierre
61,2011-06-16 04:13:29,"^ hah
@indexzero - that sounds like an old aesop song, but i haven't heard that one...but he has that quote tattooed on his forearm(s?)
",dtan,indexzero
61,2011-06-16 17:54:10,"@dtan Yup It is an old aesop song, It's also what he has tattooed on his forearms: http://lightsleepers.net/wakeup/wp-content/uploads/2009/01/aesoprocktat.jpg
",indexzero,dtan
59,2011-06-11 21:35:00,"@fidian Can you provide a complete repro including the PHP script that I should use to reproduce the issue? 
",indexzero,fidian
59,2011-06-26 15:16:59,"@fidian here is the simplest repro for this issue:



Unfortunately, it seems that this is by design in node.js core. This is the status line written to **every** `ServerResponse` object in core: https://github.com/joyent/node/blob/v0.4.8/lib/http.js#L833-834, which doesn't seem to be configurable anywhere. 

Maybe @ry or @felixge can comment on if outgoing `HTTP/1.0` requests are going to be supported in core.
",indexzero,fidian
59,2011-06-26 19:43:19,"@felixge Thank you for clarifying. I am going to close this as `wont-fix`.
",indexzero,felixge
59,2011-06-26 20:07:14,"@ry Thanks. I'll reopen this. I've opened an associated bug on node here: https://github.com/joyent/node/issues/1234
",indexzero,ry
59,2011-06-26 21:07:33,"@felixge the response can be terminated by closing the connection
",ry,felixge
58,2011-06-08 22:03:17,"@vvo @marak It depends on the level of introspection into the data stream that you're looking to get. For example, gzip works because afaik it's a binary encoding algorithm and can process the raw stream. Rewriting HTTP headers requires a good HTTPParser like the one ryan wrote. It's really a question of exactly what you're trying to hack in there.

A generic stream rewriter could be possible, but everything would have to be capable of parsing streams.
",indexzero,vvo
55,2011-05-23 06:22:09,"@bluescreen303 This should be fixed in a86d18bc7f93d013df715d1f4d88e651846f645d and published in `v0.5.9`. Can you confirm?
",indexzero,bluescreen303
54,2011-06-08 18:24:18,"I believe this issue has been resolved? @bluescreen303 can you confirm? If not, let's get @olauzon on it!

:-)
",Marak,bluescreen303
50,2011-05-13 19:42:21,"@dazagrohovaz Yes, I saw it once I realized that the agent has an eventemitter leak. The problem here is that the proper multiplexing of request-response data doesn't seem possible in the current http.Agent API design because there is no way to map the closure scoped data on the `upgrade` event to the incoming http request. 

I am going to start seriously considering looking at using a raw TCP proxy for this with my own instantiated HTTPParser.
",indexzero,dazagrohovaz
50,2011-05-13 21:56:32,"@dazagrohovaz @jfis Can you take a look at these repros again after my latest commit? I think I've fixed the event emitter leak by managing the containing the request used to the closure scope of the `upgrade` event. It's a little tricky, but I think it will solve some of these problems.

Will still have to look into the origin mismatch problem
",indexzero,dazagrohovaz
50,2011-05-13 21:56:32,"@dazagrohovaz @jfis Can you take a look at these repros again after my latest commit? I think I've fixed the event emitter leak by managing the containing the request used to the closure scope of the `upgrade` event. It's a little tricky, but I think it will solve some of these problems.

Will still have to look into the origin mismatch problem
",indexzero,jfis
50,2011-05-13 22:36:16,"@indexzero looks good and works for me after getting around the origin mismatch.
very nice.
",jfis,indexzero
50,2011-05-13 23:02:47,"w000!!!! Ok, I'm going to make the origin mismatch thing an option and write some more robust tests here. @dazagrohovaz is that map application on your personal site open source? Seems like a great websocket demo to help benchmark / test against node-http-proxy.
",indexzero,dazagrohovaz
50,2011-05-14 01:30:39,"@dazagrohovaz Thanks! I will try this out later tonight to see if I've fully resolved the issue
",indexzero,dazagrohovaz
50,2011-05-18 01:39:02,"This should be resolved as of v0.5.3. Let me know if you run into any issues. @dazagrohovaz I couldn't get your maptail working ... if you want to try running your site with node-http-proxy instead of squid that would be appreciated.
",indexzero,dazagrohovaz
48,2011-05-10 22:35:01,"@mikeal Thanks for clarifying. In master now there is a backwards compatible change that checks the type of the arguments passed to `.getAgent()`. Would love to see a hotfix version pushed out from @ry, but now that I've reverted it's not a big deal. 
",indexzero,mikeal
42,2011-04-28 02:16:49,"@straps isn't that a warning and not an error?

Either way, now that you have updated, can you try running http-proxy's unit tests?
",Marak,straps
41,2011-06-08 18:24:53,"@indexzero is this ticket still relevant? If so, should we get @olauzon to investigate? 
",Marak,indexzero
41,2011-06-11 21:34:13,"@fidian Do you know if there is a workaround for the node core issue that we could use in `node-http-proxy`? 
",indexzero,fidian
40,2016-06-13 19:54:59,"Is there a way to 'fix' headers on a proxyReq event? I have the same problem where the server I am connecting to cares about the case sensitivity of the headers so need to correct node's tampering.

@d11wtq did you ever find out where the original header names were store? It would be good if I could get node-http-proxy to forward the original case-preserved headers rather than it using the lower-cased versions from node.
",djskinner,d11wtq
38,2011-05-22 18:55:53,"This seems to be something (still) going on in Node.js core. The code in questions claims that it is backwards compatible: https://github.com/joyent/node/blob/master/lib/http.js#L1427

Perhaps @ry or @mikeal could shed some light on why this is popping up again. Host is still being passed as a string in node-http-proxy (i.e. ""legacy"" arguments) https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L48

I think that this may be a bug in core related to `options instanceof String`. This syntax doesn't seem to be the correct way to identify the type of the argument. Here's a quick sample from the REPL:



Should be a quick fix. Reasonbly sure this has nothing to do with node-http-proxy.
",indexzero,mikeal
37,2014-06-18 21:47:40,"here's a generic one - modified from @francoislaberge example - I use as the first piece of middleware in my express app:



You could reverse it just as easily making sure that host always starts with `www.`
",pajtai,francoislaberge
37,2014-08-18 20:31:11,"@q2dg i think you are mistaking terminology. Your code correctly proxies any request to the server to google.com. This is not the same as redirecting to google as the traffic is still going through your server.
",jcrugzz,q2dg
37,2014-08-19 02:49:29,"@q2dg ok well this does seem plausible. This is something that should be handled in some manner. If you can come up with a good failing test case (integrated into the actual tests) I can take a stab at implementing it
",jcrugzz,q2dg
36,2011-05-17 22:52:52,"@johnae please let us know how it goes.
",olauzon,johnae
36,2011-05-17 23:05:47,"@johnae Can you please supply some sample code? Now that we've established that this is not a node.js core issue (since all of the HTTPS tests are passing) we need to try to reproduce it locally to fix it.
",indexzero,johnae
36,2011-05-18 23:22:05,"@johnae in addition to what @indexzero said, could you try with v0.5.3?
",olauzon,johnae
36,2011-05-18 23:22:05,"@johnae in addition to what @indexzero said, could you try with v0.5.3?
",olauzon,indexzero
36,2011-05-19 01:14:21,"@johnae Thanks for bearing with us on this! This was actually a nuance in the API that @olauzon picked up on. You are trying to proxy HTTPS to HTTP which before the version we just released, `v0.5.4`, was not possible from the `httpProxy.createServer()` API. 

No changes need to be made to your code, but if you're interested in how to proxy HTTPS to HTTPS (as opposed to HTTPS to HTTP) checkout our examples:

https://github.com/nodejitsu/node-http-proxy/blob/master/examples/proxy-https-to-https.js
https://github.com/nodejitsu/node-http-proxy/blob/master/examples/proxy-https-to-http.js
",indexzero,johnae
36,2011-05-19 01:14:21,"@johnae Thanks for bearing with us on this! This was actually a nuance in the API that @olauzon picked up on. You are trying to proxy HTTPS to HTTP which before the version we just released, `v0.5.4`, was not possible from the `httpProxy.createServer()` API. 

No changes need to be made to your code, but if you're interested in how to proxy HTTPS to HTTPS (as opposed to HTTPS to HTTP) checkout our examples:

https://github.com/nodejitsu/node-http-proxy/blob/master/examples/proxy-https-to-https.js
https://github.com/nodejitsu/node-http-proxy/blob/master/examples/proxy-https-to-http.js
",indexzero,olauzon
35,2011-07-08 12:53:20,"@eladb What messages are you trying to proxy that are not getting through? We have extensive test coverage for websockets that are all passing

I think the correct approach here would be to make the encoding of the data being sent across the websocket configurable. 

Can you please provide a full code sample that reproduces the issue?
",indexzero,eladb
35,2011-07-08 18:56:51,"Yes. I will get a repro.

--Elad.

On Fri, Jul 8, 2011 at 5:53 AM, indexzero
reply@reply.github.com
wrote:

> @eladb What messages are you trying to proxy that are not getting through? We have extensive test coverage for websockets that are all passing
> 
> I think the correct approach here would be to make the encoding of the data being sent across the websocket configurable.
> 
> Can you please provide a full code sample that reproduces the issue?
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nodejitsu/node-http-proxy/issues/35#issuecomment-1532178

## 

Elad.
",eladb,eladb
35,2011-07-09 15:44:06,"see attached.

1) run ""node test.js"" and open a browser on http://localhost:8000.
then show the console and you will see echo only from the direct
connection.

2) run ""node test-patched.js"" and you will be able to see echo from
both proxied and direct connections.

could be:
1) socket.io that you are using in your test.
2) the websocket library you refer under 'vendor'.

let me know if you want me to try and repro via unit test.

thanks
elad.

On Fri, Jul 8, 2011 at 11:56 AM, Elad Ben-Israel
elad.benisrael@gmail.com wrote:

> Yes. I will get a repro.
> 
> --Elad.
> 
> On Fri, Jul 8, 2011 at 5:53 AM, indexzero
> reply@reply.github.com
> wrote:
> 
> > @eladb What messages are you trying to proxy that are not getting through? We have extensive test coverage for websockets that are all passing
> > 
> > I think the correct approach here would be to make the encoding of the data being sent across the websocket configurable.
> > 
> > Can you please provide a full code sample that reproduces the issue?
> > 
> > ## 
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/nodejitsu/node-http-proxy/issues/35#issuecomment-1532178
> 
> ## 
> 
> Elad.

## 

Elad.
",eladb,eladb
35,2011-07-09 19:36:39,"@eladb I might be missing something but where can I find `test.js` and `test-patched.js`?? Will try later this evening.
",indexzero,eladb
35,2011-07-09 20:51:25,"extract the zip file and you will see both files under 'node-proxy-repro'.
10x,
elad.

On Sat, Jul 9, 2011 at 12:36 PM, indexzero
reply@reply.github.com
wrote:

> @eladb I might be missing something but where can I find `test.js` and `test-patched.js`?? Will try later this evening.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nodejitsu/node-http-proxy/issues/35#issuecomment-1539625

## 

Elad.
",eladb,eladb
35,2011-07-09 21:05:30,"@eladb Can you provide a link to the zip file?
",ironchefpython,eladb
34,2011-04-22 02:43:29,"@indexzero - I think I'm running into a related issue here without websockets. 

I think the disconnect is in the fact that http-proxy acts as a proxy server by default. This means that the receiving server can tell the request has been proxied. In other words, it's not transparent. The proxy should act in this mode by default, but we should probably expose an API option to enable ""transparent"" proxying. I'm not sure if there is a better name for that.

Here is a more clear illustration of the problem:



Does that make any sense?
",Marak,indexzero
34,2011-04-26 21:24:02,"The websocket support was originally written by @donnerjack13589 and later updated by @davglass. Maybe they can chime in on the reasoning behind changing the outgoing headers.

I will kill those lines in `v0.5.1` (coming this week) if there are no objections since both @flashfan and @andyichr have seen this fix their problems.
",indexzero,andyichr
34,2011-05-11 20:34:07,"@Marak definitely, will investigate.
",olauzon,Marak
34,2011-05-11 20:36:31,"Thanks @olauzon! Feel free to post your status in this thread.
",Marak,olauzon
34,2011-05-13 20:49:31,"@jfis Again, this is a symptom of a larger problem. I am working on something in the experimental branch, but I'm not sure if we can actually write a websocket proxy on top of the existing http.Agent APIs without event emitter leaks.
",indexzero,jfis
34,2011-05-13 20:55:11,"@indexzero i don't see how changing the headers and replacing host and origin in the handshake relates to http.Agent but I'll take your word for it. 

I do see the problem with http.Agent in the other thread (#50) though.
",jfis,indexzero
34,2011-05-13 21:00:31,"@jfis They are only related in that they both have to do with websockets. If this gets fixed, that is still a problem and websockets is still broken.
",indexzero,jfis
34,2011-05-13 21:02:21,"@indexzero :) ok gotcha.
",jfis,indexzero
34,2011-05-23 05:26:25,"@frank06 Can you provide sample code to reproduce the problem? 
",indexzero,frank06
34,2011-05-23 06:20:58,"@frank06 @jfis This is fixed in 028d2044e71d70b7bc21d339de29e2275c3be5c2 and published in `v0.5.9`. Let me know if you run into any issues with this. 
",indexzero,frank06
34,2011-05-23 06:20:58,"@frank06 @jfis This is fixed in 028d2044e71d70b7bc21d339de29e2275c3be5c2 and published in `v0.5.9`. Let me know if you run into any issues with this. 
",indexzero,jfis
34,2011-05-25 06:56:00,"@olauzon ... Any progress on this issue today? Ping me if you're blocked.
",indexzero,olauzon
34,2011-06-08 18:56:41,"Yes. @olauzon do you want to take a look? 
",indexzero,olauzon
20,2011-05-18 00:23:41,"@focusaurus If you buffer and parse the incoming request of the body before you proxy the request, you can't proxy the original request anymore. 
",Marak,focusaurus
1132,2017-01-19 13:07:50,"As mentioned by @bdefore and @kdepp in #851, changeOrigin should be set to true by default.

The very first reason is simply to be compatible with the HTTP 1.1 specifications that **requires** a _Host_ header. If a proxy listen on foobar.com and proxies request to bargee.net, then every requests sent to bargee.net must have a _Host_ header set: `Host: bargee.net`.
In turns, by fixing the inconsistencies generated by `changeOrigin=false`, it will enable all virtual host environment to serve request correctly. This is the case for example when using _http-proxy_ via _grunt-connect-proxy_ that even dropped support for changeOrigin and requires injecting forcefully the host header.

IMHO, it would even be better to get rid of that option completely and consider it is always true.",patrickallaert,kdepp
1132,2017-01-19 13:07:50,"As mentioned by @bdefore and @kdepp in #851, changeOrigin should be set to true by default.

The very first reason is simply to be compatible with the HTTP 1.1 specifications that **requires** a _Host_ header. If a proxy listen on foobar.com and proxies request to bargee.net, then every requests sent to bargee.net must have a _Host_ header set: `Host: bargee.net`.
In turns, by fixing the inconsistencies generated by `changeOrigin=false`, it will enable all virtual host environment to serve request correctly. This is the case for example when using _http-proxy_ via _grunt-connect-proxy_ that even dropped support for changeOrigin and requires injecting forcefully the host header.

IMHO, it would even be better to get rid of that option completely and consider it is always true.",patrickallaert,bdefore
1120,2016-12-25 10:37:16,"Thanks @jcrugzz ! üëç üòÑ 

",ivannieto,jcrugzz
1113,2016-12-19 21:51:35,"Hi!

I've found an issue allowing long running proxied connections to stay open. In this case, it's something we've seen related to the [webpack dev server](https://github.com/webpack/webpack-dev-server) which has this http-proxy package as its dependency via [http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware).

In practise what we've seen is that long running proxied requests are being closed after 2 minutes, even though we specify a longer timeout with the **proxyTimeout** option. That in turn may make some browser automatically retry the request which failed, which is absolutely not wanted in some scenarios -- the latter isn't really this package's fault, so feel free to ignore that part.

After [digging for a while](https://github.com/webpack/webpack-dev-server/issues/369#issuecomment-266251977) I found the root cause to be in this package's request handler ([lib/http-proxy/index.js](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/index.js#L31)). By not setting a timeout on the incoming HTTP socket with [request.setTimeout()](https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_message_settimeout_msecs_callback), Node.js core sets 2 minutes by default.

Ideally we'd like to be able to set **proxyTimeout** to whatever number we want and be sure that's respected. That possibly means using the same value in `request.setTimeout()`.

Does this sound okey to you? Any other thoughts?

Refs https://github.com/webpack/webpack-dev-server/issues/369#issuecomment-266251977

/cc @Martin-Wegner",phillipj,Martin-Wegner
1107,2016-12-15 21:23:34,@pachirel I think you are the author of . Could you take a look at this issue and pull request?,mixxen,pachirel
1104,2016-12-06 07:23:44,"My change (#1098) has side effect because of the header values of `rawHeaders` are not always same with the values of `headers`. ( #1101, #1102, #1103) üôá 

This PR includes these changes to solve it:

1. Overwrite only key, not value.
2. Overwrite key if raw header key is available.
3. Add `preserveHeaderKeyCase` option (default: false).

@jcrugzz  I'd like to hear your thought. üç£ 

I have to add specs before marge this.
Sorry for any inconvenience, and thanks to all.",pachirel,jcrugzz
1103,2016-12-06 10:40:34,@jcrugzz you can find more details in a PR opened by @pachirel https://github.com/nodejitsu/node-http-proxy/pull/1104,apalchys,pachirel
1101,2016-12-04 17:58:40,"@jcrugzz @tomlagier this should be fixed now, please retest!",kriswill,jcrugzz
1098,2016-12-02 00:54:20,@jcrugzz Thank you for your quick response üòÑ  I fixed.,pachirel,jcrugzz
1091,2016-11-14 22:44:28,"Fix for https://github.com/nodejitsu/node-http-proxy/issues/867, and possibly these others: https://github.com/nodejitsu/node-http-proxy/issues/908, https://github.com/nodejitsu/node-http-proxy/issues/930, https://github.com/nodejitsu/node-http-proxy/issues/889, https://github.com/nodejitsu/node-http-proxy/issues/680.

This solution was suggested by @giuliopaci in https://github.com/nodejitsu/node-http-proxy/issues/867.  The problem with the header re-writing example in the README is that when you do a POST, the headers are sent before the 'proxyReq' event is fired.  So you really have to add the headers before calling request().  This patch allows the user to register a synchronous callback that gets called in setupOutgoing() in which the caller can setup headers, or alter the outgoing request() options in whatever way desired.
",rick-kilgore,giuliopaci
1074,2017-01-16 00:06:06,"@jcrugzz or anyone else, any reason not to get this merged?",efokschaner,jcrugzz
1074,2017-02-12 05:01:56,Bump for great justice? @jcrugzz,efokschaner,jcrugzz
1061,2016-09-14 21:12:05,"@briman0094 @No9 would love a harmon test so this type of breakage could be prevented in the future. Thanks for the contribution!
",jcrugzz,No9
1058,2017-01-21 11:11:52,"@adjohnson916 really good job!, I wonder if somebody else has made such a comprehensive benchmark on node just yet? Maybe even the core developers of node do not really know where we are in terms of performance. It seems also that some people, authors of node-http-proxy included, have given up on competing with other servers because they believe V8 is not capable of deliver as efficiently as a C/Asm optimized solution, which is a pity.
",manast,adjohnson916
1051,2016-09-09 19:53:35,"@jcrugzz - Any time frame on  when / if this will get merged? Not trying to rush, I just got some prod dependencies going out this week that are reliant on the status reason being passed through so I will have to fork if it does not get accepted soon.
",cchamberlain,jcrugzz
1018,2017-01-06 13:25:35,"Hello, I'm closing this as result of doing cleanup of my PRs. I believe this feature was already implemented by @pachirel so this patch is not required anymore.

Thanks",diegonc,pachirel
1011,2016-05-25 16:12:18,"### nodejitsu/node-http-proxy now has a Chat Room on Gitter

@jcrugzz has just created a chat room. You can visit it here: [https://gitter.im/nodejitsu/node-http-proxy](https://gitter.im/nodejitsu/node-http-proxy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).

This pull-request adds this badge to your README.md:

[![Gitter](https://badges.gitter.im/nodejitsu/node-http-proxy.svg)](https://gitter.im/nodejitsu/node-http-proxy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)

If my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).

Happy chatting.

PS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.
",gitter-badger,jcrugzz
993,2016-05-12 01:29:58,"Thanks!

 For anyone else who stumbles across this issue, I didn't have the same setup,

 -> http://localhost -> proxy -> https://realserver.com, 

In my case the cookie had the Secure flag, so although JSESSIONID was stored @localhost, it was not being sent in subsequent requests because I didnt use the https:// by setting the https property on the webpack-dev-server config. 
",whampop,localhost
988,2016-04-13 00:36:04,"For more context, we used it in production at nodejitsu for 5+ years, and it is used in a production application @godaddy as well. Figure out if its the right tool. Its at least a good place to start for getting things up and running. 
",jcrugzz,godaddy
967,2016-02-26 12:30:00,"Reasoning: Rack's request class [makes use of](https://github.com/rack/rack/blob/master/lib/rack/request.rb#L243) this HTTP header. Certain edge-case scenarios (proxying from ember-cli to a Rails backend) can be problematic without this header being present.

/cc @perlun, @jesjos
",jbacklund,jesjos
967,2016-02-26 12:30:00,"Reasoning: Rack's request class [makes use of](https://github.com/rack/rack/blob/master/lib/rack/request.rb#L243) this HTTP header. Certain edge-case scenarios (proxying from ember-cli to a Rails backend) can be problematic without this header being present.

/cc @perlun, @jesjos
",jbacklund,perlun
957,2016-02-10 16:42:27,"So the caveat here is that this is a breaking change, but i think it provides more useful context to the `error` as the `error` should be the actual `proxyReq` and not the `req` itself. In most cases (or at least using the `callback` api, you already have access to `req` and `res` so providing these ends up being useless. We were also previously capturing errors from client requests which I believe was creating false positives for people.

Thoughts @donasaur @indexzero 
",jcrugzz,indexzero
957,2016-02-10 16:42:27,"So the caveat here is that this is a breaking change, but i think it provides more useful context to the `error` as the `error` should be the actual `proxyReq` and not the `req` itself. In most cases (or at least using the `callback` api, you already have access to `req` and `res` so providing these ends up being useless. We were also previously capturing errors from client requests which I believe was creating false positives for people.

Thoughts @donasaur @indexzero 
",jcrugzz,donasaur
949,2016-02-02 04:58:29,"@niallo great find! Would love a quick fix PR :). 
",jcrugzz,niallo
924,2015-12-11 17:28:08,"Hey everyone,

This is in regards to an issue I brought up in #915 yesterday.  I was having an issue with incorrect port selection and assumed @BadBoy20 might be having the issue too.  Anyhow, the problem for me was explicit declaration of the port was not taking precedence over the port implied by the protocol.  The unit test I created was failing before I made the fix.  Also, I did not check the getPort() function in common.js as it‚Äôs only purpose is setting ‚Äúx-forwarded‚Äù headers in web-incoming.js and ws-incoming.js so it seemed out of scope for this issue.

Cheers.
",pyper,BadBoy20
923,2016-01-04 13:58:44,"@yjm  Thanks for your help. I find the problem that I add body parser  js
file  in `ROOT` folder. :(

2015-12-31 17:29 GMT+08:00 yjm notifications@github.com:

> also I have similar error, but not related to POST data
> Here if user redirect frequently, e.g. click back button frequently in a
> 302 redirected page, error below:
> 
> /root/node-proxy/node_modules/http-proxy/lib/http-proxy/index.js:119
>     throw err;
>     ^
> 
> Error: socket hang up
>     at createHangUpError (_http_client.js:209:15)
>     at Socket.socketCloseListener (_http_client.js:241:23)
>     at emitOne (events.js:82:20)
>     at Socket.emit (events.js:169:7)
>     at TCP._onclose (net.js:469:12)
> 
> ‚Äî
> Reply to this email directly or view it on GitHub
> https://github.com/nodejitsu/node-http-proxy/issues/923#issuecomment-168156405
> .
",PanYuntao,yjm
920,2015-12-02 17:51:51,"Using http/2 is not currently possible. Pull-request for this support would be welcome. I believe the SPDY module from @indutny might support http/2 now.
",indexzero,indutny
920,2015-12-02 17:57:56,"@indexzero @m1stegmann i had an exchange with @indutny that it just requires passing an agent from his `spdy` module which supports `http2` for this to work
",jcrugzz,indutny
919,2015-12-08 05:51:46,"This actually looks pretty interesting. @dmai or @jcrugzz: comments?
",indexzero,dmai
919,2015-12-08 05:51:46,"This actually looks pretty interesting. @dmai or @jcrugzz: comments?
",indexzero,jcrugzz
919,2015-12-08 17:58:49,"@indexzero @aaronmaturen the reason I'm hesitant on this is due to the conversation I had with @indutny where `http2` based on his implementation in [`node-spdy`](https://github.com/indutny/node-spdy) only requires the proper `agent` to be passed in to enable proxying via `http2`. So this really has to do with what we want to support. 

Personally, I'm not a fan of of actually spinning up a server as part of `http-proxy` since that makes us biased on implementation in this case. But in terms of the actual bit that is proxying, I like @indutny's approach because it leverages the `agent` rather than requiring a separate `http` like library in order to make the request.
",jcrugzz,indutny
919,2015-12-09 06:16:18,"@indexzero ah, calling @dmai doesn't work on public git

Hm, I don't think it would be that bad if we supported the `http2` library since the docs for that library saids that `http2` has an api very similar to that of `https` and we support passing in options to `https`

I can see @jcrugzz 's point about not using a particular userland `http2` module though, and those who have read up on HTTP2 already would most likely know how to use our provided interface to spin up a `http2` web server w/o createProxyServer().listen() using the mentioned userland library or `spdy`
",donasaur,dmai
919,2016-03-25 23:00:54,"Hi Friends, 

@jcrugzz suggested that the node-spdy module by @indutny is a better way to spin up a new HTTP2 server. It made sense to me at the time, and it's fairly easy to get setup if you actually have an SSL cert to get past the browser security... 

Here is a small example for HTTP2 -> HTTP proxying without any changes to http-proxy.



![screenshot 2016-03-25 18 23 24](https://cloud.githubusercontent.com/assets/507070/14055864/bd5f27c6-f2bb-11e5-9027-b2052855aeb0.png)
",aaronmaturen,indutny
915,2015-12-09 22:24:29,"@BadBoy20 I think it is the port.  I had all kinds of issues trying to get it to connect ports that weren‚Äôt 80 or 443.  Once I switched to those it worked fine.  You can have your proxy listening on 8009, just trying changing your test server upstream from 3000 to 443.

If it fixes it, it looks the issue is under:

https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/common.js

Selection of port seems to be in multiple places and inconsistent.
",pyper,BadBoy20
915,2015-12-10 21:39:31,"@BadBoy20 Yes change 3000 to 443 or 80.  You could also confirm it further by trying it without any encryption.
",pyper,BadBoy20
898,2015-10-23 19:13:13,"@jdmaurer yea this is something id like to fix. The reason this happens in THIS specific case is because we don't disambiguate ""client-side"" request errors from ""proxy"" request errors. Errors that happen on the request that we receive as the proxy should be ignored because its something we have no control over. We cant even reply to it. This is a bug that needs to be fixed
",jcrugzz,jdmaurer
898,2015-10-29 20:09:25,"I'm seeing this too.  @jdmaurer why do you say this is a weird use-case?  I have the same use-case, seems like the ""meat and potatoes"" of what a proxy would do?

@jcrugzz is this likely to be fixed soon?  Thanks!
",philcockfield,jdmaurer
883,2015-11-05 04:54:45,"@donasaur @jcrugzz thoughts on this?
",indexzero,donasaur
883,2015-11-05 04:54:45,"@donasaur @jcrugzz thoughts on this?
",indexzero,jcrugzz
883,2015-11-05 06:44:51,"@donasaur it's actually not about the Websocket handshake itself. It is mirroring similar `proxyRes` functionality which I am fine with. See https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L147

@jcrugzz thoughts? 
",indexzero,jcrugzz
881,2015-10-28 18:02:50,"@pepone @jedverity seems like it. Could you provide a complete console output of what you're seeing? Is there a reproducible test case that you've found? This will help us narrow down the problem.
",indexzero,jedverity
881,2015-10-28 18:39:31,"@jedverity awesome :). A failing test PR is my favorite thing
",jcrugzz,jedverity
881,2015-10-30 17:00:01,"@jedverity hmm well we should see if whatever fix can be backported if it is not a breaking change. Have you tried it in `4.2.1`? That is the LTS release so we should get this fixed in that release
",jcrugzz,jedverity
881,2015-10-30 17:54:54,"@jedverity i think you might be right, looks like its on target for `4.2.2` if you are correct. See if you can test the `4.2.2` release candidate for confirmation. Either way your tests are still good :). Will add them anyway
",jcrugzz,jedverity
873,2015-12-25 01:43:27,"I hit the same issue when benchmarking http-proxy. Does anyone know if the same will happen in a real life production environment with a high request volume or if this issue is tied to the fact that the connections are created from the same client?
I tested with nginx and the npm module 'loadbalancer', no problem there.

@tyrchen @jcrugzz
",kar1m,jcrugzz
850,2016-01-20 22:28:42,"@indexzero, @jcrugzz: I can rebase this on the latest master if you guys are open to merging it. 
",prust,indexzero
850,2016-01-20 22:28:42,"@indexzero, @jcrugzz: I can rebase this on the latest master if you guys are open to merging it. 
",prust,jcrugzz
836,2015-06-02 16:41:00,"@matthauck could you provide clarification for the commit here https://github.com/nodejitsu/node-http-proxy/commit/26029ba7ac948b5dc0befb2091cc9a5862d0641c? I personally don't have a strong opinion either way I just don't want to break it again and would like to find a way for this to work for both your cases
",jcrugzz,matthauck
813,2015-12-02 09:48:39,"It works very fine, thank you again @vvo 

@jcrugzz should I let this issue open? Maybe http-proxy should filter those error inside the library, or maybe it's better to let it unopinionated...
",JSteunou,jcrugzz
806,2016-01-22 14:21:00,"@jcrugzz @indexzero 
Any plans to merge this PR?
",chimurai,indexzero
806,2016-01-22 14:21:00,"@jcrugzz @indexzero 
Any plans to merge this PR?
",chimurai,jcrugzz
782,2015-12-07 20:42:58,"@indutny any idea what could have caused this? Would love to know if its a bug in `http-proxy` that im not accounting for based on a node core change.
",jcrugzz,indutny
768,2015-01-31 03:04:09,"@jedverity you can use the [`changeOrigin`](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L43) that is passed when you instantiate the proxy
",jcrugzz,jedverity
766,2015-01-27 15:06:55,"@Mewte hmm this might be something specific to websocket proxying but this still seems odd. @goldfire have you seen anything like this? @3rd-Eden do you have any ideas? Could socket.io somehow cause a leak on the proxy level? Im very interested to see where the issue lies. Could you also list what node version you are using? I'd recommend the latest `0.10.35`.
",jcrugzz,goldfire
761,2015-04-01 15:11:17,"@Karan is there a `bodyParser` in the middleware chain somewhere? the proxy needs to happen before that if there is. See if thats the issue first. My only other thought is that it has to do with how heroku does their host based routing
",jcrugzz,Karan
759,2014-12-23 18:25:33,"...incoming request when proxying to the target server

cc @yleemj
",jcrugzz,yleemj
757,2014-12-22 17:00:41,"@minrk Since you were doing a bunch of testing here, any ideas? The two commits that were made only seem to properly close sockets in cases where they were bad. I don't see it causing issues.

@goldfire What node version are you running on? I'm curious if an upgrade there had anything to do with it or just the upgrade of the `http-proxy` dep. 
",jcrugzz,minrk
748,2014-12-03 00:20:32,"ah sorry for the delay @jcrugzz I was traveling for the last 24 hours but it looks like this was resolved :+1: 
",samccone,jcrugzz
744,2014-11-26 07:17:28,"@jcrugzz @samccone 
This is a online url 'http://g.tbcdn.cn/??kissy/k/1.4.0/seed-min.js,kissy/k/1.4.0/base-min.js,kissy/k/1.4.0/json-min.js,kissy/k/1.4.0/dom/base-min.js,kissy/k/1.4.0/event/base-min.js,kissy/k/1.4.0/event/custom-min.js,kissy/k/1.4.0/event/dom/base-min.js,kissy/k/1.4.0/event/dom/focusin-min.js' on the Alibaba CDNs.  You can take it
for test.

This is a combo url(This is a technical measures that multiple requests will be merged into one in order to reduce the number of requests), and '??' is a combo tag.

I mainly think of this case, so maybe the changed logic is still not 100% correct, hope you can revise it. 
",koolc,samccone
737,2014-11-15 15:20:43,"@erupenkman hmm, this is something I'd consider. You mind adding a test? @indexzero you have any thoughts on this?
",jcrugzz,indexzero
736,2014-11-12 21:46:06,"@richardkazuomiller yea essentially, good find! That should just be linked somewhere. @indexzero just hasn't formalized a [`jscs`](https://github.com/jscs-dev/node-jscs) for it yet. 
",jcrugzz,indexzero
733,2014-11-08 23:52:05,"Fix the issue of multiple consecutive slashes being replaced by a single slash referenced in #703 and #710 by separating the query string from the rest of the URL in `common.urlJoin`. I tried removing trailing slashes as suggested by @yulesyu in #703 but that still caused issues if the query string ended in `//`
",richardkazuomiller,yulesyu
733,2014-11-10 00:33:25,"Except for minor style things this lgtm @jcrugzz. It even has a new test :+1:
",indexzero,jcrugzz
729,2014-11-04 23:00:04,"@lightblade LGTM. Mind if you implement it like the one above? just makes it a bit shorter and cleaner :)

e.g `~['https:', 'wss:'].indexOf(options[forward || 'target'].protocol` will be true if we are dealing with SSL
",jcrugzz,lightblade
729,2014-11-04 23:21:46,"@lightblade published as 1.6.1
",jcrugzz,lightblade
712,2014-10-09 09:56:49,":+1: thank you for your contribution @zhudan. What are your thoughts @jcrugzz? You've been looking this over most recently.
",indexzero,jcrugzz
699,2014-09-12 16:57:14,"@STRML Could you add test so @jcrugzz doesn't break it again ;-)?
",3rd-Eden,jcrugzz
699,2014-09-12 16:57:59,"Yep - working on that right now, just figured I should get the fix in ASAP.

On Sep 12, 2014, at 12:57 PM, Arnout Kazemier notifications@github.com wrote:

> @STRML Could you add test so @jcrugzz doesn't break it again ;-)?
> 
> ‚Äî
> Reply to this email directly or view it on GitHub.
",STRML,jcrugzz
673,2014-07-20 20:02:49,"Thanks for the merge @jcrugzz :).

@dlongley any thoughts on addressing issue #2 generically since we're probably going to need to do this at some point in the near future?
",msporny,dlongley
660,2014-06-12 16:49:05,"@RushPL yea this is the reason I have an issue with this api as there is no good way to hook into the streams themselves with any kind of transform. Its something I've been thinking about but haven't found the right way to do yet.
",jcrugzz,RushPL
660,2014-06-12 17:55:27,"@RushPL we can pass in two different transform streams in some manner. There may be a better api then just adding them to the options object. But yea its doable its just not as clean as I'd like it.
",jcrugzz,RushPL
660,2014-06-13 13:53:41,"@wangzheng422 i still dont like this. This should be done with an optional stream that you can pass so we arent adding an arbitrary property to the request and you can do with the data what you want. For what you want to do, you would pass in something like this.



Now this is just speculative but this is the way that we would make this type of functionality work. This allows custom transformations of any type on the data which should be allowed. @RushPL this would satisfy your requirements correct?
",jcrugzz,RushPL
658,2014-06-10 17:06:35,"@jcrugzz Changed the naming according to your comment.
",Rush,jcrugzz
658,2014-06-10 17:11:09,"@RushPL thanks!
",jcrugzz,RushPL
657,2014-06-10 06:05:00,"@RushPL the devDeps are \* depped so that was the root cause.
",jcrugzz,RushPL
657,2014-06-10 17:02:05,"@RushPL we might as well ensure our tests are up to date so lets keep living dangerously ;).
",jcrugzz,RushPL
652,2014-06-07 22:41:40,"@cmpsoares91 these are examples of using the old `http-proxy` api that only works with node `0.8.x`.

If you would like to learn more about the new API, please checkout the readme or the blogpost found [here](http://blog.nodejitsu.com/node-http-proxy-1dot0/). 

Since we removed this particular functionality from `http-proxy`, this either needs to be done manually with an actual router or if you are looking for something that will do this out of the box, checkout @RushPL's [`http-master`](https://github.com/CodeCharmLtd/http-master)
",jcrugzz,RushPL
651,2014-06-06 18:31:37,"@RushPL yea the tests for `0.11.x` have been consistently failing here for a while. I haven't spent time investigating this yet as I still considered it too unstable but thanks for the work you've done! Ill give it a read and see where the bug might lie. 

Its more likely a bug in node or we have to change our handling in some way based on their changes. Not sure what we would have to change here though as we are simply just using the `https` module. and piping the request.
",jcrugzz,RushPL
651,2014-06-06 18:35:34,"The weird thing is that I was unable to reproduce the problem locally (adding setTimeout in weird places) but it is consistently failing remotely. Also 0.11.10 is rock solid on production servers (viva forward secrecy) but it is a pain to maintain native dependencies for it. I am praying for our friend @indutny to chime in at some point with a brilliant idea. :-)
",Rush,indutny
651,2014-06-06 22:41:41,"@RushPL smells like a race condition of sorts ;). And I'm sure fedor has his hands deep in it and will pull out some gold. I havent checked out the implementation since some of it was moved down into libuv land.
",jcrugzz,RushPL
649,2014-06-10 17:01:25,"@RushPL yes i still wanted to steal your tests :). It all comes down to the naming so I will pull whatever PR that uses a `proxyTimeout` naming as they do accomplish the same thing.
",jcrugzz,RushPL
645,2014-09-08 20:01:58,"@endangeredmassa that would be huge. 
",indexzero,endangeredmassa
642,2014-05-11 22:56:36,"Further to the pull request by @Domiii - #635 - this pull request adds the res object to the proxyRes event as well.

Also adding a test for the proxyRes event.

I wasn't about the specifics of updating other people's pull request, so just thought a new one might be a good option...
Apologies if that's less ideal :-s
",bruce-one,Domiii
640,2014-05-10 15:38:34,"Sweet! Any chance of this PR warranting a push to NPM? I have a few issues on @LinemanJS that I'm trying to get closed up.
",jayharris,LinemanJS
636,2014-05-08 16:30:06,"@gadr this particular example does not require a proxy of any kind. All you need to do is have your `http` server return the proper redirect. you can do this in express with something like [`force-secure`](https://github.com/nathan7/force-secure)
",jcrugzz,gadr
619,2014-04-08 16:06:32,"@st-denis you need to give a host and a port as target in that object or make target a full URL string
",jcrugzz,st-denis
619,2014-04-09 19:51:07,"@st-denis you cannot proxy anything if you don't know the target. You have to grab a hostname or URL string from somewhere. Even if you are anonymizing, you need to have a pool of servers to pull from
",jcrugzz,st-denis
606,2014-03-25 00:18:43,"@yawnt pretty simple fix here. We lost backwards compatibility hard.

https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L11-L16
",indexzero,yawnt
603,2014-03-25 14:20:05,"@KetanSpeaketh could you give me a gist that I can run that fails? in the specific case you listed with the new api there is no server running that would be able to receive requests in order to proxy appropriately. 



Both of these should work as expected, otherwise please elaborate on the issue you have.
",jcrugzz,KetanSpeaketh
603,2014-03-26 23:59:10,"So this is actually interesting as it made me go back and read why this is in place. @KetanSpeaketh I recommend giving #529 a read. it seems that this is ONLY the case when you proxy to ANOTHER proxy. For this specific use case, I can add an option (something like `toProxy`) that when `truthy`, keeps the absolute URI instead of making it relative. How does that sound as a solution to this?
",jcrugzz,KetanSpeaketh
600,2014-03-21 19:11:54,"@RushPL thanks for the hint. I had a quick look and it really looks very powerful and feature rich. I really would like to see an overview of all these solutions with pros and cons. Currently I don't need SSL and the richer features, so kiss-proxy is just perfect for me. But I already recommended http-master to a colleague who will give it a try in the next days.
",deradam,RushPL
578,2014-02-07 22:16:00,"@xtreme-topher-bullock thanks for the contribution! Would you mind changing it to look like...



After that I'll merge it right in :). It makes it display correctly on npmjs.org
",jcrugzz,xtreme-topher-bullock
578,2014-02-11 04:47:45,"@xtreme-topher-bullock thanks :)
",jcrugzz,xtreme-topher-bullock
571,2014-02-08 05:13:55,"@yawnt Could you add the example from https://blog.nodejitsu.com/node-http-proxy-1dot0/ to the documentation to help users who will miss the ProxyTable API?
",trusktr,yawnt
570,2014-01-31 21:27:34,"My coworker @goffrie discovered that this seems to fix things:



Setting `connection = 'Close'` means the back-end server is going to close the connection right after we make a request, which suggests this problem has to do with not reusing backend connections.
",jwalton,goffrie
568,2014-01-30 17:44:16,"@RushPL thanks that works for now.  If anyone else has an encrypted solution that would be great, thanks. Perhaps there is a way to do this with a self signed cert?
",srossross,RushPL
561,2014-01-23 18:39:23,"@glasser Well lets think of what we can do in these failure cases. Correct me if I'm wrong here, but in the case where the `socket` errors, we cannot re-proxy with that same socket. So it would make sense to have a different error function in that case that just returns the request if thats even useful? Cause it seems the connection is just FUBAR if we hit that case and we just need to kill the things and let someone know. So I'm thinking we may even want to destroy the socket when the socket errors as well if my assumption here is correct

thoughts @yawnt?
",jcrugzz,yawnt
559,2014-01-22 20:44:10,"@glasser thanks for your thorough report. This definitely seems fixable and I will try and give it a look later today. If you are able to dig deeper into a possible solution please post here :)

cc @yawnt
",jcrugzz,yawnt
559,2014-01-22 21:49:02,"@jcrugzz @yawnt 

Here's my thought.  There are two ways we could go.  Either http-proxy should itself take care of this, by reacting to 'error' on `socket` by ending `proxySocket`... or http-proxy should give the end user access to `proxySocket` and let it do its own error handling.

I think the former is probably the way to go. First of all, it's more or less necessary to do this error handling, and we shouldn't make it easy for users to accidentally cause a leak.  Secondly, it's already the case that the ws `stream` phase doesn't give much control over the way that `socket` and `proxySocket` are connected (eg, it doesn't let you interpose some sort of transformation).  If we add an API for that later (or the user overrides the `stream` phase entirely) then sure, it would make sense to also give the user control over the error handling semantics. But because http-proxy doesn't offer that control, then it makes sense to do the automatic right thing.

Working on a PR now.  One thing that confuses me: it looks like there's a straight-up bug in the stream pass: it takes its server and head arguments in a different order from how they are passed in!  Is there a test suite that should be catching this?  (Our current production use of http-proxy/caronte is based on an old commit from back when caronte used EventEmitter2 which doesn't have this issue.)
",glasser,yawnt
554,2014-01-17 22:49:38,"@droppedonjapan the instance of `proxy` is does not require a callback when it is an `EventEmitter`, but you need to listen on the `error` event ;). It is only an `EventEmitter` in the following cases... see the code [here](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/http-proxy.js#L6-L54)



The `var proxy = HttpProxy.createProxy()` api requires the callback as it is the simpler implementation. 

Regardless the proxy has the chance of error so how you choose to handle that is up to you!
",jcrugzz,droppedonjapan
550,2014-01-31 07:24:22,"@RushPL completely legit.  `http-proxy` encourages these kind of modules ;)
",yawnt,RushPL
547,2014-01-11 12:43:43,"@yawnt found a few minor things when I was using this extensively:
- **EventEmitter3 will not throw on an unhandled `error`:** but without any default handler it's very confusing to debug when your proxy logic is just plain wrong. _We should have a default logger if there are no `error` handlers._ cc/ @3rd-Eden 
- **We should have a simple(r) `.createProxy()` method:** which is basically just exposing `createRightProxy`. A lot of our users don't even bother with `httpProxy.createServer`, they just use `new httpProxy.RoutingProxy()`. Forcing them to create a server that they will never use feels very awkward. 
- **Remove all (soon to be old) caronte links:** The README.md and a few other doc links still have hrefs to the `caronte` branch
",indexzero,yawnt
547,2014-01-16 13:58:36,"@jcrugzz Thanks, but still want this.

@yawnt ping?
",indexzero,yawnt
542,2014-01-31 00:27:01,"@RushPL thanks :)
",jcrugzz,RushPL
541,2014-01-01 19:04:18,"I am using express behind enterprise corporate proxy/firewall. 
I am struggling because because I just don't know where to set proxy for node.js

I usually export http_proxy=""http://<username>:<password>@myproxy.com:8080 at prompt. This is just sufficient. 

But this setting is not working for node.js. 
Please help.
Should I use node-http-proxy if yes then please give a simple code sample for my code request. 
Else just give a sample node.js to do this. 

Thanks in advance. 
",wabmca,myproxy
539,2013-12-29 21:01:57,"@cronopio we could probably use some tests for adding functions before/after any of the passes. 

cc @yawnt
",jcrugzz,yawnt
539,2013-12-29 21:01:57,"@cronopio we could probably use some tests for adding functions before/after any of the passes. 

cc @yawnt
",jcrugzz,cronopio
537,2013-12-28 17:02:43,"@yawnt there is no way to currently splice in before or after functions currently as there is no general [`this.passes`](https://github.com/nodejitsu/node-http-proxy/blob/caronte/lib/http-proxy/index.js#L120-L139). We have passes for either web or ws which needs to be specified in some manner. 

What do you think is the cleanest way to do so? We could pass a `type` parameter to the `before` and `after` functions as the first argument but that seems suboptimal.

Thoughts?
",jcrugzz,yawnt
537,2014-01-08 05:37:31,"fixed in c47adac391ca2f80ac1adad52e4fd652d85ac2a4. @cronopio this could definitely use some tests though!
",jcrugzz,cronopio
536,2013-12-28 00:07:20,"@yawnt thoughts? I think it adds a nice semantic when you aren't actually creating the proxy as a server. It also eases elements of my OCD.
",jcrugzz,yawnt
533,2013-12-22 19:34:49,"@RushPL can you gist the full example you are using to test this? I'm not sure where you are running into issues as we have our staging balancers running this code and we proxy to multiple targets. Could help us see if we missed something with in our testing! 
",jcrugzz,RushPL
529,2013-12-10 11:37:08,"Jarrett, I'm experiencing this with the caronte branch. It is a serious
enough bug (and easy enough to fix) to be worth holding 1.0 just a minute
longer I think.

On Tue, Dec 10, 2013 at 12:36 AM, Jarrett Cruger
notifications@github.comwrote:

> @boutell https://github.com/boutell and @fabiosantoscodehttps://github.com/fabiosantoscodeif you haven't already, check out the
> caronte https://github.com/nodejitsu/node-http-proxy/tree/carontebranch as that will be
> node-http-proxy 1.0 in the near future.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/issues/529#issuecomment-30201042
> .

## 

Tom Boutell
P'unk Avenue
215 755 1330
punkave.com
window.punkave.com
",boutell,fabiosantoscodehttps
529,2013-12-10 13:28:42,"@boutell that was not my implication, I just wanted to make sure you guys were trying the newest code :). Im sure @yawnt will be on it. If you can post a gist of the smallest reproducible case, this will be extremely helpful in developing a test and figuring out a solution!
",jcrugzz,yawnt
520,2013-11-19 17:34:25,"I just rewrite the examples, just using as base the old examples, so I updated all this examples according to the new improvements and the new api of node-http-proxy.

Review and merge

CC: @yawnt 
",cronopio,yawnt
520,2013-12-09 19:59:59,"Ready for review and merge

cc: @yawnt @indexzero 
",cronopio,yawnt
520,2013-12-09 19:59:59,"Ready for review and merge

cc: @yawnt @indexzero 
",cronopio,indexzero
516,2013-11-12 22:43:57,"As instructed by @jcrugzz I tried this against the caronte branch. Same code, same result.

Using the proxy as a straight HTTP proxy works fine for most URLs but I find I'm getting 400 Bad Request from one particular server.

This pattern of using the proxy, a standard client proxy, isn't that easy to work out from the examples. I don't want to proxy an internal server, I want to proxy requests going to outbound servers, look at the requests and either log them or potentially change them on the way through. Though I'm not doing any of this in the test stub below.

Is there something I'm doing wrong with the proxy setup? It's strange that it works everywhere else except this one server.

Test stub I'm using:



Using curl I get a 500 server error:



Oddly, with Firefox I get a 400 Bad Request error:


",shermozle,jcrugzz
513,2013-11-08 20:16:42,"`node-http-proxy@1.0.0` is has a number of features removed and a (few) breaking changes. It makes the library leaner and more ""node-like"" but we _have to make sure to ensure the same high quality examples and documentation._
## Examples

We either need a working example file or a reason why we're dropping this example for all of these files:
- [x] examples/balancer/simple-balancer-with-websockets.js
- [x] examples/balancer/simple-balancer.js
- [x] examples/http/basic-proxy.js
- [x] examples/http/concurrent-proxy.js
- [x] examples/http/custom-proxy-error.js
- [x] examples/http/forward-proxy.js
- [x] examples/http/latent-proxy.js
- [x] examples/http/proxy-https-to-http.js
- [x] examples/http/proxy-https-to-https.js
- [ ] examples/http/proxy-table.js
- [x] examples/http/standalone-proxy.js
- [x] examples/middleware/bodyDecoder-middleware.js
- [x] examples/middleware/gzip-middleware-proxytable.js **_(wont fix)_**
- [x] examples/middleware/gzip-middleware.js
- [x] examples/middleware/jsonp-middleware.js **_(wont fix)_**
- [x] examples/middleware/modifyResponse-middleware.js
- [x] examples/middleware/url-middleware.js **_(wont fix)_**
- [x] examples/middleware/url-middleware2.js **_(wont fix)_**
- [x] examples/websocket/latent-websocket-proxy.js
- [x] examples/websocket/standalone-websocket-proxy.js
- [x] examples/websocket/websocket-proxy.js
## Documentation
- [x] Setup a basic stand-alone proxy server
- [x] Setup a stand-alone proxy server with custom server logic
- [x] Setup a stand-alone proxy server with latency (e.g. IO, etc)
- [x] Proxy requests within another http server
- [x] Listening for proxy events
- [x] Using HTTPS
- [x] Proxying to HTTP from HTTPS
- [x] Using two certificates
- [x] Proxying to HTTPS from HTTPS
- [x] Proxying WebSockets
- [x] with custom server logic
- [x] Configuring your Socket limits
- [x] POST requests and buffering
- [x] Double check API & method documentation in code
#### Dropped
- Proxy requests using a ProxyTable
- Proxy requests using a 'Hostname Only' ProxyTable
- Proxy requests using a 'Pathname Only' ProxyTable
- Middleware
## Upgrade Guide
- [x] No more `ProxyTable`
- [x] No more middleware

cc/ @cronopio @yawnt
",indexzero,yawnt
513,2013-11-08 20:16:42,"`node-http-proxy@1.0.0` is has a number of features removed and a (few) breaking changes. It makes the library leaner and more ""node-like"" but we _have to make sure to ensure the same high quality examples and documentation._
## Examples

We either need a working example file or a reason why we're dropping this example for all of these files:
- [x] examples/balancer/simple-balancer-with-websockets.js
- [x] examples/balancer/simple-balancer.js
- [x] examples/http/basic-proxy.js
- [x] examples/http/concurrent-proxy.js
- [x] examples/http/custom-proxy-error.js
- [x] examples/http/forward-proxy.js
- [x] examples/http/latent-proxy.js
- [x] examples/http/proxy-https-to-http.js
- [x] examples/http/proxy-https-to-https.js
- [ ] examples/http/proxy-table.js
- [x] examples/http/standalone-proxy.js
- [x] examples/middleware/bodyDecoder-middleware.js
- [x] examples/middleware/gzip-middleware-proxytable.js **_(wont fix)_**
- [x] examples/middleware/gzip-middleware.js
- [x] examples/middleware/jsonp-middleware.js **_(wont fix)_**
- [x] examples/middleware/modifyResponse-middleware.js
- [x] examples/middleware/url-middleware.js **_(wont fix)_**
- [x] examples/middleware/url-middleware2.js **_(wont fix)_**
- [x] examples/websocket/latent-websocket-proxy.js
- [x] examples/websocket/standalone-websocket-proxy.js
- [x] examples/websocket/websocket-proxy.js
## Documentation
- [x] Setup a basic stand-alone proxy server
- [x] Setup a stand-alone proxy server with custom server logic
- [x] Setup a stand-alone proxy server with latency (e.g. IO, etc)
- [x] Proxy requests within another http server
- [x] Listening for proxy events
- [x] Using HTTPS
- [x] Proxying to HTTP from HTTPS
- [x] Using two certificates
- [x] Proxying to HTTPS from HTTPS
- [x] Proxying WebSockets
- [x] with custom server logic
- [x] Configuring your Socket limits
- [x] POST requests and buffering
- [x] Double check API & method documentation in code
#### Dropped
- Proxy requests using a ProxyTable
- Proxy requests using a 'Hostname Only' ProxyTable
- Proxy requests using a 'Pathname Only' ProxyTable
- Middleware
## Upgrade Guide
- [x] No more `ProxyTable`
- [x] No more middleware

cc/ @cronopio @yawnt
",indexzero,cronopio
513,2014-01-11 12:39:50,"This is done. Good work @yawnt @cronopio 
",indexzero,yawnt
513,2014-01-11 12:39:50,"This is done. Good work @yawnt @cronopio 
",indexzero,cronopio
511,2013-11-05 21:34:21,"@cronopio Running `npm test` gives me the following failures.. Let me know if Im doing something wrong.


",jcrugzz,cronopio
510,2013-11-05 21:06:09,"All of this options parsing that is found [here](https://github.com/nodejitsu/node-http-proxy/blob/caronte/lib/http-proxy/index.js#L43-L64) is not being utilized. We are extending the global `this.options` but not passing them into any of the `passes`. I will see if the fix is as trivial as it seems otherwise I'll let you handle it @yawnt.
",jcrugzz,yawnt
506,2013-10-28 20:24:18,"Hi @Evster88 I just ran your example and works fine. I changed the destiny to something testable to me like `www.nodejs.org` and worked fine.



If you experiment some additional issue feel free to reopen this.
",cronopio,Evster88
504,2013-10-23 07:00:54,"right now we pass just a single agent... but we actually need two.. one for http and one for https 

@cronopio 
",yawnt,cronopio
491,2013-09-26 07:56:56,"@yawnt I added some baseline benchmark scripts that we can use in the `1.0.0-dev` branch (they are also in the `caronte` branch, but that's behind now). **These benchmarks exposed what appear to be (at first glance) serious performance issues in the 1.0.0-dev branch.**
## node: v0.8.25 | http-proxy: v0.10.3

I am using the [benchmark branch](https://github.com/nodejitsu/node-http-proxy/compare/benchmark). The documentation on how to run these benchmarks is in [benchmark/README.md](https://github.com/nodejitsu/node-http-proxy/tree/benchmark/benchmark). **On average I am seeing just under 3000 request / second.** 

**$ wrk -c 20 -r 2000 -t 4 http://127.0.0.1:8000**



**$ wrk -c 20 -r 10000 -t 4 http://127.0.0.1:8000**



The highest I pushed it was _100k total requests across 8 threads with a concurrency of 20 per thread:_

$ wrk -c 20 -r 100k -t 8 http://127.0.0.1:8000


## node: v0.10.19 | http-proxy: v1.0.0-dev

I am using the [1.0.0-dev branch](https://github.com/nodejitsu/node-http-proxy/compare/caronte...1.0.0-dev). Again, the documentation on how to run these benchmarks is in [benchmark/README.md](https://github.com/nodejitsu/node-http-proxy/tree/1.0.0-dev/benchmark). There are two main problems here:
#### 1. **A 50% performance degradation**

This could be a number of things (such as changes to node core itself), but right now I'm seeing _**a 50% performance hit.**_


#### 2. **Proxies fall over with ETIMEOUT**

Increasing the number of total requests beyond ~6k _without raising the concurrency or threads of the wrk process_ causes `node benchmark/scripts/proxy.js` to fall over with `ETIMEOUT`.

**$ wrk -c 20 -r 10000 -t 4 http://127.0.0.1:8000**



This happens consistently and in a reproducible fashion. _**This is a show stopping bug and needs to be fixed:**_


",indexzero,yawnt
491,2013-09-27 12:47:35,"I keep trying to benchmark `caronte` branch (@indexzero: branch `v1.0.0-dev` does not exist), yet I keep getting:



Target server stays up all the time, `ulimit` is set to reasonable values. @yawnt any idea?
",mmalecki,yawnt
491,2013-10-18 05:06:41,"After some improve from @yawnt I ran again the benchmark and this what I got in my humble laptop.

Node: v0.10.20
Last commit at caronte branch: 86750c7e594c419dfae957aaf7e44e61e1d480e8
wrk: wrk 3.0.1 [epoll] Copyright (C) 2012 Will Glozer



I would love to see what numbers show at @indexzero's laptop because my humble laptop show some improve.
",cronopio,yawnt
488,2013-09-24 21:53:06,"hey @glasser,
i think your solution is a bit too brutal as a workaround to be implemented without significant sacrifices.. we should, imho,  post this on [joyent/node](https://github.com/joyent/node/issues) and see what they say there about it

could you do it since you uncovered this bug and know more about it? if not, i can handle this

thanks for submitting the PR anyway :)

regarding @RushPL 's comment i think he's referring to the performance that `ab` shows when tested against caronte.. there are a couple of things that make `ab` behave weirdly (most noticeably the fact that it's `HTTP1/0` and node allows only `HTTP1/1` requests, thus preventing me from sending a content length which `ab` requires).. using other `HTTP/1.1` perf suites hasn't shown, so far, significant penalties in using agents except the usual slow-down due to pooling
",yawnt,RushPL
488,2013-09-24 21:56:36,"I am actually referring to a situation where many outgoing connections need
to be made and a pool (by its nature) is limited. Hence the problem.

2013/9/24 yawnt notifications@github.com

> hey @glasser https://github.com/glasser,
> i think your solution is a bit too brutal as a workaround to be
> implemented without significant sacrifices.. we should, imho, post this on
> joyent/node https://github.com/joyent/node/issues and see what they say
> there about it
> 
> could you do it since you uncovered this bug and know more about it? if
> not, i can handle this
> 
> thanks for submitting the PR anyway :)
> 
> regarding @RushPL https://github.com/RushPL 's comment i think he's
> referring to the performance that ab shows when tested against caronte..
> there are a couple of things that make ab behave weirdly (most noticeably
> the fact that it's HTTP1/0 and node allows only HTTP1/1 requests, thus
> preventing me from sending a content length which ab requires).. using
> other HTTP/1.1 perf suites hasn't shown, so far, significant penalties in
> using agents except the usual slow-down due to pooling
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/pull/488#issuecomment-25045764
> .
",Rush,RushPL
488,2013-12-08 02:49:45,"The problem seems entirely resolved by adding the default agent:

var proxy = httpProxy.createProxyServer({ agent: http.globalAgent });

I did see @RushPL's comment that the use of any agent at all is a performance-killer. I haven't attempted any measurements of my that, but leaking sockets and not really leveraging keepalive as a result can't be good either.
",boutell,RushPL
484,2013-09-21 20:24:06,"@yawnt @jcrugzz, the reason that your wildcard error handler `ee.on('*:error', function (err) {}` does not get picked up is because it does not match the event emitted. you could use `ee.on('*:*:*:error', function (err) {}`

I do agree that the number of namespaces does seem a bit much. perhaps `ws:error` and `web:error` would be sufficient. 

Issues #462 #470 
",srossross,yawnt
484,2013-09-21 20:24:06,"@yawnt @jcrugzz, the reason that your wildcard error handler `ee.on('*:error', function (err) {}` does not get picked up is because it does not match the event emitted. you could use `ee.on('*:*:*:error', function (err) {}`

I do agree that the number of namespaces does seem a bit much. perhaps `ws:error` and `web:error` would be sufficient. 

Issues #462 #470 
",srossross,jcrugzz
483,2013-09-21 00:44:06,"Badges should link to the web service they build on not the direct image file ;). 

cc @yawnt 
",jcrugzz,yawnt
481,2013-09-17 17:36:26,"@muffs I would encourage you to look at the `caronte` branch and see if it can be used to meet your needs. It is a complete refactor done by @yawnt and takes a much simpler approach. Let us know what you think!
",jcrugzz,yawnt
479,2013-09-17 14:30:52,"mmm, kinda makes sense.. @jcrugzz opinion about this one?
",yawnt,jcrugzz
479,2013-09-17 17:31:02,"Yea its hard to be _exactly_ clear with this as it is all a matter of perspective. `web-outgoing` does make sense to me as the requests are being modified as they come in from the issuer with `web-incoming` (which is then proxied to the remote server) and when you send the response back to the issuer with `web-outgoing`, completing the reverse proxy. @yawnt maybe have it as `web-reverse` if that would make it more clear? What do you think @RushPL?
",jcrugzz,RushPL
479,2013-09-17 18:22:31,"none of the names here strucks me honestly.. the only thing i might want to do is invert is to follow the node convention about IncomingMessage and ServerResponse.. if anyone has a better name i'd be glad to take that into consideration.. it has to be short and make sense (so no client2proxy.. sorry @RushPL :P)
",yawnt,RushPL
476,2013-09-17 02:56:14,"I fixed all the test suite according to the last refactor.

Accordign to the `cov/coverage.html` file created with `npm run-script test-cov` we got a 92% of the code covered.

Run the test suite and tell me any error/comment/feedback you got

Cheers!

cc: @yawnt 
",cronopio,yawnt
475,2013-09-16 23:46:25,"@yawnt, I just found this bug in my code right after you merged #470
",srossross,yawnt
471,2013-09-16 15:57:15,"Duplicate of #444, there are known issues with `node-http-proxy` running on `node v0.10.x`. @OmShiv Please test out the `caronte` branch and try to break it :). cc @yawnt 
",jcrugzz,yawnt
470,2013-09-16 16:19:13,"@yawnt forgot to tag you
",srossross,yawnt
468,2013-09-15 20:12:18,"@RushPL i think so? honestly, i'm not sure.. i don't see why not since headers are copied.. 

if i were you and i needed such feature, i'd test it out and if it breaks open an issue :)
",yawnt,RushPL
463,2013-09-17 11:50:37,"this should be fixed since error handling is now implemented.. @jcrugzz feel free to reopen if it's not the case
",yawnt,jcrugzz
463,2013-09-19 15:31:31,"@cronopio also we should have tests for cases like this for all the various transports as I believe we will hit some edge cases with various disconnects being triggered. 
",jcrugzz,cronopio
462,2013-09-23 00:23:38,"As @srossross confirmed, we cannot use a single wildcard to cover multiple delimited sections. So if we are to continue to namespace the error handling in some way, we should choose something simpler. 

So we should think about what distinctions are important when handling errors. The `web:error` and `ws:error` idea seems reasonable as we may want to handle those cases differently for cleaning up connections. @yawnt what are your thoughts?
",jcrugzz,srossross
461,2013-09-15 13:45:38,"@cronopio status?
",yawnt,cronopio
460,2013-09-15 09:39:45,"[RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) Section 14.23 specifies that the port argument in the Host header is optional if connecting to default port (80 on HTTP f.e.). At the moment we always add the port, but I've encountered a website (10 mio pageviews a day) running IIS 7 that doesn't accept this host header and wants one without the port specified. See http://www.funda.nl. At the moment node-http-proxy doesn't work with this site if changeOrigin is enabled. Chrome f.e. doesn't add the port if doing a request for HTTP on port 80.

I saw only integration tests, no unit tests who cover this code, that's why there aren't any attached.

/cc @nathan7 
",janjongboom,nathan7
448,2013-10-03 20:12:15,"@mattiasg sorry, no I never found a solution so i ripped out the load balancer.  I haven't tried the caronte branch though.
",joshontheweb,mattiasg
448,2013-10-10 10:24:43,"will try it again then

On Thu, Oct 3, 2013 at 10:12 PM, Josh Nielsen notifications@github.comwrote:

> @mattiasg https://github.com/mattiasg sorry, no I never found a
> solution so i ripped out the load balancer. I haven't tried the caronte
> branch though.
> 
> ‚Äî
> Reply to this email directly or view it on GitHubhttps://github.com/nodejitsu/node-http-proxy/issues/448#issuecomment-25653870
> .
",matthiasg,mattiasg
444,2013-08-21 05:43:10,"@yawnt Is working on the updates for `node@0.10.x`. We are aware of this issue and are working on a solution, but the implementation around `streams2` is non-trivial as `node-http-proxy` is one of the oldest node libraries.
",indexzero,yawnt
444,2013-08-21 15:42:22,"@indexzero, @yawnt, thanks for the response.  One issue that I noticed is that `node-http-proxy` does not proxy websockets (at all) to tornado servers as of `node>=v0.8`

To test this - Try proxying to an `IPython notebook`
Use `*nix` OS (works on mac osx) download and install the anaconda Python Distribution http://continuum.io/downloads
Run:



Click `create notebook` to get to a page with a web-socket.
",srossross,yawnt
444,2013-09-09 16:39:15,"@yawnt I noticed that you have not committed to the 10.x branch for a month.  I am sorry for being persistent, but this is very important to me.  I am also trying to evaluate whether I should just jump in and start finding my own solution or wait for the 10.x branch to be completed.
May I ask what your timeline is? What is blocking you from completing it?  Are you waiting on improvements in stream2? 

Sorry and thank you for your patience
",srossross,yawnt
444,2013-09-15 10:19:43,"@RushPL @srossross I believe Yawnt is working on https://github.com/yawnt/caronte.git
",robertjpayne,RushPL
444,2013-09-15 10:41:06,"@RushPL No idea how they plan to merry them up and integrate, I simply was just pointing towards the other repository incase you wanted to have a look. I have no idea how stable or ready it may be, only testing could show.
",robertjpayne,RushPL
444,2013-09-15 18:52:09,"@RushPL Thanks, I'm looking at caronte. 
",srossross,RushPL
421,2013-09-03 10:01:43,"Hey @RushPL I found that the only solution **atm** is to use nginx to proxy stuff.
WebSockets work just fine.
If you need further help just ask
",christian-fei,RushPL
421,2013-12-18 11:13:02,"hi!
@RushPL 
if you're having other issues with the `caronte` branch and websockets, you can open up an issue and i'll have a look!
please provide a test case as well :)

closing this issue since it refers to a dropped component (router) and the 0.8.x branch
",yawnt,RushPL
420,2013-05-11 22:48:42,"@vovan22 `node-http-proxy` is not a load balancer replacement itself but it can be used to create your own load balancer. (this is what we do @nodejitsu).
",jcrugzz,nodejitsu
420,2013-05-11 22:48:42,"@vovan22 `node-http-proxy` is not a load balancer replacement itself but it can be used to create your own load balancer. (this is what we do @nodejitsu).
",jcrugzz,vovan22
402,2013-07-19 18:36:05,"We are working on a complete rewrite for `streams2`. See the work from @cronopio on the [0.10.x](https://github.com/nodejitsu/node-http-proxy/tree/0.10.x) branch.
",indexzero,cronopio
402,2013-07-20 16:39:44,"Awesome, thanks @indexzero , @cronopio !
",breck7,cronopio
399,2013-04-02 19:44:24,"No idea. Haven't played with `v0.10.x` yet much. @isaacs or @indutny?
",indexzero,isaacs
399,2013-04-02 19:44:24,"No idea. Haven't played with `v0.10.x` yet much. @isaacs or @indutny?
",indexzero,indutny
399,2013-04-11 04:06:34,"have same issue as @andysavage anyone have a solution?
",niftylettuce,andysavage
396,2013-09-28 09:00:18,"We're almost done with a major rewrite that has been under way for several months. Check it out on the `caronte` branch. We haven't decided what to do with pull-request maintenance before that. 

We will likely publish `0.10.99` with most open pull-requests before publishings `1.0.0`. cc/ @yawnt 
",indexzero,yawnt
393,2013-03-29 10:41:05,"@indexzero 

Does anyone have plan to support HTTP to CoAP proxy? 

CoAP is RESTful http-like protocol for Internet of Things.

http://en.wikipedia.org/wiki/Constrained_Application_Protocol
",sequoiar,indexzero
384,2013-03-16 12:22:43,"As requested by @indexzero https://github.com/nodejitsu/node-http-proxy/issues/382 
Not sure exactly where I should put the text but middleware seemed to be the best section to me. 
",No9,indexzero
384,2014-03-04 21:20:06,"@indexzero @No9 This merge/code has been lost to later merges. This is a very useful information, and should be in the README!

Please re-pull this.
",gurjeet,indexzero
384,2014-04-16 22:12:32,"@jcrugzz Thanks for your kind words!  

So i have updated the harmon docs and tests to reflect the 1.x release version of http-proxy and we have upgraded trumpet. Can you let me know if you would accept a pull request on the README again or are you putting it somewhere else now? 
cc @gurjeet @indexzero  
",No9,indexzero
382,2013-03-14 09:29:24,"@PhilHongKong Harmon is designed to plug into node-http-proxy https://github.com/No9/harmon 
It uses trumpet and so is stream based to work around the buffering problem that @indexzero mentions. It uses an element and attribute selector to enable manipulation of a response. 
",No9,PhilHongKong
376,2013-04-07 21:11:16,"@indexzero @dscape Any updates on this ?
",vojtajina,indexzero
376,2013-04-07 21:11:16,"@indexzero @dscape Any updates on this ?
",vojtajina,dscape
376,2013-05-09 01:13:41,":+1:  @indexzero @nodejitsu Any word on getting this merged in?
",stickel,indexzero
376,2013-05-09 01:13:41,":+1:  @indexzero @nodejitsu Any word on getting this merged in?
",stickel,nodejitsu
376,2013-12-19 12:45:49,"@nodejitsu +1
",rsboarder,nodejitsu
370,2013-04-09 07:39:01,"@indexzero @mmalecki 

I'd advise us to accept this pull request. I've been doing a lot of WebSocket proxy tests lately because I was interested in to seeing how our proxy solution compares to other proxies such as `nginx` and `haproxy`.

I've deployed the proxy on a 512mb joyent virtual machine running the latest ubuntu and hit it using [observing/thor](/observing/thor) with: 



I saw a peak memory of `280mb` before this patch. After applying this patch and re-running the command it saw a maximum of `102mb` which is significant decrease. So even if this is going to be fixed in later version of Node. It makes sense to pull this asap.
",3rd-Eden,mmalecki
362,2013-02-17 15:30:48,"Sounds awesome. Thanks for clarifying.

My point was that ssh performance in node is a far more understood topic. @indutny has a repo called tls-snappy that tackles it, but to the best of my knowledge nothing beats putting a tls terminal in front of node yet :(

I think you saw some discussion from @mranney and @mikeal on the topic on a request issue. Not entirely sure how voxer is currently dealing with this though.
",dscape,mikeal
362,2013-02-17 15:30:48,"Sounds awesome. Thanks for clarifying.

My point was that ssh performance in node is a far more understood topic. @indutny has a repo called tls-snappy that tackles it, but to the best of my knowledge nothing beats putting a tls terminal in front of node yet :(

I think you saw some discussion from @mranney and @mikeal on the topic on a request issue. Not entirely sure how voxer is currently dealing with this though.
",dscape,mranney
362,2013-02-17 15:30:48,"Sounds awesome. Thanks for clarifying.

My point was that ssh performance in node is a far more understood topic. @indutny has a repo called tls-snappy that tackles it, but to the best of my knowledge nothing beats putting a tls terminal in front of node yet :(

I think you saw some discussion from @mranney and @mikeal on the topic on a request issue. Not entirely sure how voxer is currently dealing with this though.
",dscape,indutny
353,2012-12-25 03:19:56,"I have no idea how pow works so I have no idea why this wouldn't work. @sstephenson do you have any thoughts on why this wouldn't work? We transparently proxy headers, etc.
",indexzero,sstephenson
349,2013-02-22 04:11:14,"@jamie-stackhouse @aeosynth A documentation pull-request would be welcomed.
",indexzero,jamie-stackhouse
347,2012-12-19 02:55:17,"Seems reasonable. Wondering what @isaacs thinks about this.
",indexzero,isaacs
347,2012-12-19 14:30:35,"@jcheng5 we've seen this in production a few days ago. I'm not really comfortable with admitting that the fix was:



I think that on 0.9.x this is related to `process.nextTick` refactor which makes next tick happen before I/O, but no idea on the cause in 0.8.x.

@isaacs opinions?
",mmalecki,isaacs
337,2012-11-21 08:22:49,"/cc @mmalecki
",indutny,mmalecki
334,2013-01-22 22:03:20,"Meh. If you're into that sort of masochism go for it. This is an issue related to SSL performance in node that @indutny is working hard on.

In the meantime you can just put [stud](https://github.com/bumptech/stud) in front of node-http-proxy. But I'm pretty sure @KimSchneider is not interested in our advice as he has not provided any demostrable data for us to help debug the problem with besides node versions. 
",indexzero,indutny
327,2013-01-29 22:55:43,"@mmalecki Any plan to merge this one?
",samalba,mmalecki
323,2012-10-25 21:41:57,"@mmalecki.

eafdc744 has introduced really unexpected behaviour, please process it as soon as you will get this message :) Otherwise I'll pull it by myself :)
",indutny,mmalecki
322,2012-11-04 22:37:11,"@mmalecki any hope of getting this in? As it stands, a 304 response will not emit an end event, unlike all other responses.
",smh,mmalecki
320,2012-10-23 19:55:41,"- http-proxy: emit websocket:start
- routing-proxy: allow listening for websocket:\* event

/cc @mmalecki
",indutny,mmalecki
318,2012-12-08 11:07:57,"@nodejitsu Any input on this?
",dignifiedquire,nodejitsu
318,2013-02-24 17:23:28,"@Dignifiedquire @amirhhz I've submitted a pull request that I wrote a couple months ago:

https://github.com/nodejitsu/node-http-proxy/pull/376

You can install my node-http-proxy fork and link to that one from Testacular, it's how we currently run our tests.

https://github.com/jayv/node-http-proxy
",jayv,Dignifiedquire
294,2013-03-09 05:57:51,"I spoke with @isaacs, this behavior is not going to change even in 0.10.0, but likely in 0.12.0. So going to pull this in if all the tests pass.
",indexzero,isaacs
289,2012-07-30 18:50:58,"@piscisaureus @AvianFlu @mmalecki Thoughts? This is clearly your realm of expertise. 
",indexzero,AvianFlu
289,2012-07-30 18:50:58,"@piscisaureus @AvianFlu @mmalecki Thoughts? This is clearly your realm of expertise. 
",indexzero,piscisaureus
289,2012-07-30 18:50:58,"@piscisaureus @AvianFlu @mmalecki Thoughts? This is clearly your realm of expertise. 
",indexzero,mmalecki
270,2012-06-25 12:28:23,"Nice! Thanks @blakmatrix.
",mmalecki,blakmatrix
266,2012-07-18 10:05:48,"Good question. @cronopio Do you feel comfortable coordinating a release of the http-proxy? I see you're on the publisher's list.
",jfhbrook,cronopio
265,2012-07-22 06:41:07,"@lucisferre We don't currently emit the data from the proxy target. We could do this although I'm unsure of the implications. 
",indexzero,lucisferre
259,2012-06-06 17:27:33,"@CodeRarity knows more about this. Any light on this are welcome. ;)
",cronopio,CodeRarity
257,2012-06-05 15:37:54,"@silvinci Sorry my example was a little misleading. I have hostnameOnly off for a reason. I also use the proxy to route to a static-file server. Thanks though.

@CodeRarity Appending '^' to the beginning of the keys solves my issue. Thanks for the hint - I have a better idea of how http-proxy operates now, which has helped me simplify much of the routing list.

Might as well update the initial example to reflect my new proxy:


",danielfay,CodeRarity
257,2012-06-05 15:37:54,"@silvinci Sorry my example was a little misleading. I have hostnameOnly off for a reason. I also use the proxy to route to a static-file server. Thanks though.

@CodeRarity Appending '^' to the beginning of the keys solves my issue. Thanks for the hint - I have a better idea of how http-proxy operates now, which has helped me simplify much of the routing list.

Might as well update the initial example to reflect my new proxy:


",danielfay,silvinci
248,2012-05-21 17:44:26,"So the immutability of the `options` object is preserved for every call to `RoutingProxy.prototype.proxyRequest` and `RoutingProxy.prototype.proxyWebSocketRequest` **except the first one.** With that in mind the following:

https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy/routing-proxy.js#L205-207 
(and)
https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy/routing-proxy.js#L242-244

should be:



@chjj I'd prefer not to bring the entire `utile` dependency for a single method which we could better implement specifically for this task.
",indexzero,chjj
247,2012-06-09 19:57:41,"Closing in favour of previously unnoticed pull req by @CodeRarity #231
",1stvamp,CodeRarity
244,2012-05-13 22:33:14,"Thanks, @CodeRarity. Any idea what it would look like with an HTTPS proxy?
",bloudermilk,CodeRarity
243,2012-05-11 14:57:55,"@CodeRarity Awesome dude. You want me to try to tackle `request` or are you handling that as well?
",brianloveswords,CodeRarity
242,2012-05-09 21:27:00,"@CodeRarity Can you tackle this?
",indexzero,CodeRarity
231,2012-04-23 20:06:43,"+1

I'm writing a simple Node+CouchDB backend for a client-side single-page webapp (a learning game).

One of the backend's jobs is to reverse-proxy two legacy services we provide via Apache name-based virtual hosts. Without @CodeRarity's patch, the name based virtual hosts will not respond. Setting X-Forwarded-For is not sufficient. 

Thanks...
",rklancer,CodeRarity
230,2012-12-30 16:51:37,"@mogrify: This was really helpful. Thank you! I guess the connect module changed because now the 'connect' event works but 'upgrade' does not.
",rbdixon,mogrify
228,2012-05-09 20:48:43,"I don't think that applies anymore in node v0.6, that's why this pull request was made. @AvianFlu do you know more about this?
",coderarity,AvianFlu
228,2012-05-11 07:54:21,"Maybe I'm wrong. @isaacs is the man to summon here if you want a more detailed explaination. He put in the `try {} catch (ex) {}` blocks after some dilligent production debugging.
",indexzero,isaacs
228,2012-05-21 17:28:09,"@naked That's a good point. We should remove the event listeners when these things emit `end` or `close` events.
",indexzero,naked
224,2012-05-31 14:28:42,"@rthais Works this lib for you?

@rthais @CodeRarity can we close this?
",cronopio,CodeRarity
218,2012-06-02 11:06:27,"Hey @CodeRarity do you know if this is this going in or not?
",No9,CodeRarity
218,2012-06-02 11:46:58,"Not yet.

On Saturday, June 2, 2012 at 7:06 AM, Anton Whalley wrote:

> Hey @CodeRarity do you know if this is this going in or not?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nodejitsu/node-http-proxy/pull/218#issuecomment-6076663
",coderarity,CodeRarity
216,2012-05-10 05:16:48,"@CodeRarity Looks good to me. Merge at will.
",indexzero,CodeRarity
211,2012-03-25 02:26:38,"@jesusabdullah fyi https://github.com/LearnBoost/socket.io/wiki/Nginx-and-Socket.io

I kind of gave up on http-proxy already sorry. 
",vicngtor,jesusabdullah
211,2012-04-06 14:49:41,"@vicngtor I had the exact same issue and @CodeRarity's solution fixed it immediately.
",mhseiden,CodeRarity
206,2012-03-10 23:23:16,"Ok, I honestly tried to fix this elsewhere, but I got in the weeds quickly on knowing what kind of larger impact it would have, I don't know the internals of http-proxy well enough to have any confidence in twiddling these bits.  It seems that for all the instances of tracking flushed, paused, and attaching drain listeners, that there needs to be some way to check if the drain listener is attached _for-the-specific-paired-socket_, and using a paused variable could actually result in some edge cases of a full standstill.

I'm not sure how to do this properly in all the other places with my relatively shallow understanding of http-proxy, and may not have the time to do a deep dive and learn it all any time soon :(

cc @temas
",quartzjer,temas
200,2012-02-20 08:45:27,"Yep, that did it!  Thanks @jesusabdullah 
",uglymunky,jesusabdullah
196,2012-02-16 06:20:53,"Hi @jesusabdullah,

<p>Thank you for your reply, for the res.setHeader or res.removeHeader is not effective of modifying the ultimate response header to client because the proxy.proxyRequest will basically append its own response header to form the ultimate response header back to client.<br /><br />

   
</p>

",penkween,jesusabdullah
195,2012-03-04 07:36:18,"@indexzero @Marak hearing crickets here ...
",tglines,Marak
193,2012-02-12 03:01:36,"@astronouth7303 Have you tried a simple HTTPs server in node.js with the same certs? It could be a node.js core issue. @indutny would know more.
",indexzero,indutny
184,2012-03-29 19:24:32,"@wuhaocn2008 are you still having an issue with this?
",coderarity,wuhaocn2008
183,2012-01-30 10:23:47,"Thanks guys for the pointers. I guess what I'm trying to do is ""do this request and then do something to the returned stuff and THEN send it back"" as @jesusabdullah has pointed out. @elfsternberg: thanks for the code pointer. I'm actually using that code as a basis to my proxy server, but I'm having lots of trouble getting all to work. Seeing as this isn't related to issues with this project, I'll just try stackoverflow.com. Thanks guys.
",hynese,jesusabdullah
171,2012-02-13 18:44:37,"@marak, yep. First request does a forced dns lookup, subsequent use cache.
",einaros,marak
167,2012-03-30 13:39:14,"@CodeRarity I ended up with a different architecture, so I no longer needed to proxy requests. It was more trouble than it was worth, so now I have my API and static web endpoints mounted together at the same place.
",jch,CodeRarity
166,2011-12-05 02:50:13,"Express is probably buffering your request and doing all sorts of other things that break streaming. You'd need to hook into `express` and do something like https://github.com/nodejitsu/node-http-proxy/blob/master/examples/http/latent-proxy.js

@visionmedia - Is there a `node-http-proxy` and `express` example floating around? People ask us about this all the time.
",Marak,visionmedia
159,2012-01-04 22:34:52,"Hi, 

I just tried ""npm install http-proxy"", but I still have the same error : 

npm ERR! Error: No compatible version found: http-proxy
npm ERR! No valid targets found.
npm ERR! Perhaps not compatible with your version of node?
npm ERR!     at installTargetsError (/usr/local/lib/node_modules/npm/lib/cache.js:424:10)
npm ERR!     at /usr/local/lib/node_modules/npm/lib/cache.js:406:17
npm ERR!     at saved (/usr/local/lib/node_modules/npm/lib/utils/npm-registry-client/get.js:136:7)
npm ERR!     at Object.cb [as oncomplete](/usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:36:9)
npm ERR! Report this _entire_ log at:
npm ERR!     http://github.com/isaacs/npm/issues
npm ERR! or email it to:
npm ERR!     npm-@googlegroups.com
npm ERR! 
npm ERR! System Linux 3.0.0-14-generic
npm ERR! command ""node"" ""/usr/local/bin/npm"" ""install"" ""http-proxy""
npm ERR! cwd /home/mod/modygo/trunk
npm ERR! node -v v0.6.1
npm ERR! npm -v 1.0.105
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /home/mod/modygo/trunk/npm-debug.log
npm not ok

Can you please help me?
",Philmod,googlegroups
158,2011-11-16 03:14:06,"lol, @github doesn't get rid of these references. 
",c4milo,github
156,2011-11-14 18:02:05,"This looks good to me. @dominictarr can you explain why you're rewriting `outgoing.headers.host` here? https://github.com/nodejitsu/node-http-proxy/commit/65b7872e6ad433deae4de823c63629cb341bd649#commitcomment-719213
",indexzero,dominictarr
152,2011-11-10 15:27:05,"@ctide I'm pretty sure websocket support won't work in node@0.6.x until the `http2` branch is merged in. This updates the internal HTTP api that was rewritten by @mikeal. 

@mmalecki could you take a look at merging that in and then push a version of node-http-proxy that works on node >= 0.6.0

_To reiterate: there are breaking and incompatible changes between the 0.4.0 and 0.6.0 internal HTTP APIs that by definition make it impossible for node-http-proxy to work on both._
",indexzero,mikeal
152,2011-11-10 15:27:05,"@ctide I'm pretty sure websocket support won't work in node@0.6.x until the `http2` branch is merged in. This updates the internal HTTP api that was rewritten by @mikeal. 

@mmalecki could you take a look at merging that in and then push a version of node-http-proxy that works on node >= 0.6.0

_To reiterate: there are breaking and incompatible changes between the 0.4.0 and 0.6.0 internal HTTP APIs that by definition make it impossible for node-http-proxy to work on both._
",indexzero,mmalecki
151,2012-03-31 03:22:34,"@CodeRarity  no more, my current solution is not different from the described here. 
",manobi,CodeRarity
149,2011-11-08 16:08:58,"Yes, you can do this with middlewares. [This awesome article](http://blog.nodejitsu.com/http-proxy-middlewares) by @AvianFlu should explain more.

Also, I added some hand-crafted middleware in `examples/middleware`: https://github.com/nodejitsu/node-http-proxy/blob/master/examples/middleware/modifyResponse-middleware.js
It's not perfect, in reality it would need some kind of output buffering, etc.

I'm closing this as it's not a real issue, but feel free to ask questions. You can also reach as at #nodejitsu IRC channel on Freenode.
",mmalecki,AvianFlu
145,2011-11-17 01:09:43,"If memory serves, that was added in a patch from @isaacs.  He may be able to comment.
",AvianFlu,isaacs
145,2011-11-17 02:04:13,"it was @isaacs .

https://github.com/nodejitsu/node-http-proxy/commit/84be9f2c3a244c7dbfe2c6320fa26d85cf80ec31
",dominictarr,isaacs
131,2011-10-18 15:01:32,"Port 7 is reserved; I'm not quite sure if it is possible to use for websocket traffic. Maybe @avianflu or @jesusabdullah would know.
",indexzero,avianflu
131,2011-10-18 15:01:32,"Port 7 is reserved; I'm not quite sure if it is possible to use for websocket traffic. Maybe @avianflu or @jesusabdullah would know.
",indexzero,jesusabdullah
127,2011-10-10 20:40:06,"It look's like @substack implemented a first pass at doing the tcp/net based http proxying ( which calls ry's http parser directly).

We should pull this in or use it as a reference for implementing the fast proxying scenarios we were discussing ( not needing the whole request, but just enough to route it ).

https://github.com/substack/bouncy/blob/master/index.js
",Marak,substack
127,2011-10-11 05:14:25,"@visionmedia agreed, there is a time and place for hasOwnProperty
",0x00A,visionmedia
127,2011-10-11 19:46:45,"We will not be taking `bouncy` as a dependency. The approach of using a TCP proxy has its merits, which I have discussed with @mikeal at length. 

There is an experimental branch of node-http-proxy which exposes a transparent balancing proxy that uses this approach. I started work on this back in April I think: https://github.com/nodejitsu/node-http-proxy/blob/experimental/lib/balancing-proxy.js

Doing things on a TCP level breaks many of the existing HTTP-level APIs which users rely on in connect and/or express, so this won't be an all or nothing change. 

I would welcome pull requests on the experimental branch which also allow for `x-forwarded-*` headers and `sec-websocket-*` header rewriting.
",indexzero,mikeal
125,2011-10-07 17:58:40,"It is right behavior.

[RFC2145](http://www.ietf.org/rfc/rfc2145.txt) - 2.3 Which version number to send in a message

>   An HTTP server SHOULD send a response version equal to the highest
>   version for which the server is at least conditionally compliant, and
>   whose major version is less than or equal to the one received in the
>   request.  

Also, please refer to [the comment](https://github.com/joyent/node/issues/1234#issuecomment-1537745) from @mnot.
",koichik,mnot
119,2011-09-29 22:44:57,"@indexzero - please review this.
",indutny,indexzero
119,2011-09-29 23:15:51,"+1, The testing that @mmalecki and I have been doing confirms that this works.  We tried a similar version of this fix this morning, but it was in Node's `lib/http.js` and we didn't quite get it right.  

The problem lies in an extremely convoluted message-sending bug in Node's `http.Agent`.  Issue #97 Has more info.
",AvianFlu,mmalecki
116,2011-09-22 14:05:50,"Pipe is not ready for this kind of operation. @mikeal could probably speak to why that is
",indexzero,mikeal
116,2011-09-22 14:49:45,"The problem is really with the optimism of the current pipe implementation:

https://github.com/joyent/node/blob/master/lib/stream.js

There are no guards (i.e. `try/catch`) around calls to `.write()` (which can throw). Also the `source.readable` around `stream.resume()` are apparently not enough:
https://github.com/joyent/node/blob/master/lib/stream.js#L127
https://github.com/joyent/node/blob/master/lib/stream.js#L34-38

Recent commits have been added by @isaacs to fix problems regarding calls to those two methods throwing `uncaughtException` events:

https://github.com/nodejitsu/node-http-proxy/commit/7bda25b1c60d082f0f2fd12fc61b45a33b74f13d
https://github.com/nodejitsu/node-http-proxy/commit/558a8a4f79716496dbdee13759c8641606458c05

If we can solve these problems within the existing `.pipe()` implementation then it is probably fine, but I suspect it won't work because there are a couple of special cases for HTTP streams that we handle in `node-http-proxy`:

https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy/http-proxy.js#L214-218

In short, I think `.pipe()` is awesome and when you have a little information around the HTTP stream you are trying to pipe, it works like a charm. As a generic silver bullet though, it still has a little way to go.
",indexzero,isaacs
116,2011-09-22 15:10:19,"When I spoke with @isaacs about finding these throwing cases he said they were very difficult to reproduce which makes sense to me given the brow-beating both Nodejitsu and Joyent put node-http-proxy thru in production. 

I agree with you that the `.pipe()` method in core shouldn't have this many guards for performance reasons, and that misalignment of goals is probably why `.pipe()` isn't appropriate here. Keeping the process alive is paramount to avoid dropped WebSocket connections.
",indexzero,isaacs
107,2011-09-12 20:10:28,"@dominictarr Can you create a sample app which attempts to reproduce this issue? 
",indexzero,dominictarr
105,2011-09-08 16:24:15,"(no default value)
you can specify the target (hostnameOnly must be true) as an array of
this sort:
`[<port:integer>, <host:string>]`

this pull request is my attempt at the solution proposed by @jimisaacs in [this issue](https://github.com/nodejitsu/node-http-proxy/issues/104)

this is not a definitive work, I still need some advice on how to do things in node-http-proxy.
",Floby,jimisaacs
104,2011-09-08 16:30:00,"By the way I +1 @visionmedia proposal too.
",Floby,visionmedia
97,2011-09-10 10:08:19,"@3rd-Eden Did further investigation here. This may be a bug in node.js core (or more specifically the response parsing in [http-parser](https://github.com/ry/http-parser) so I'm going to attempt to summon @ry. 

I can confirm deep in the tendrils of node (https://github.com/joyent/node/blob/v0.4.11/lib/http.js#L1230-1265), the `upgrade` event is not being fired for outgoing HTTP requests in the `draft-07` protocol.

I'm no expert of the HttpParser used by node.js here, but it seems like the `request` and `response` parsing may be different code paths. Clearly the parser is in a different state:

""Request"" mode (working): https://github.com/joyent/node/blob/v0.4.11/lib/http.js#L1020
""Response"" mode (no working): https://github.com/joyent/node/blob/v0.4.11/lib/http.js#L1203

I'm building `v0.5.5` now to see if this is fixed in HEAD.
",indexzero,ry
97,2011-09-10 10:17:20,"But the odd thing is that If we attach socket.io to a normal HTTP server it does work. So it's not a fundamental flaw on the node core, it might just be related to http client

On 10 sep. 2011, at 12:08, Charlie Robbins wrote:

> @3rd-Eden Did further investigation here. This may be a bug in node.js core (or more specifically the response parsing in [http-parser](https://github.com/ry/http-parser) so I'm going to attempt to summon @ry. 
> 
> I can confirm deep in the tendrils of node (https://github.com/joyent/node/blob/v0.4.11/lib/http.js#L1230-1265), the `upgrade` event is not being fired for outgoing HTTP requests in the `draft-07` protocol.
> 
> I'm no expert of the HttpParser used by node.js here, but it seems like the `request` and `response` parsing may be different code paths. Clearly the parser is in a different state:
> 
> ""Request"" mode (working): https://github.com/joyent/node/blob/v0.4.11/lib/http.js#L1020
> ""Response"" mode (no working): https://github.com/joyent/node/blob/v0.4.11/lib/http.js#L1203
> 
> I'm building `v0.5.5` now to see if this is fixed in HEAD.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nodejitsu/node-http-proxy/issues/97#issuecomment-2058794
",3rd-Eden,ry
97,2011-09-10 10:40:25,"@3rd-eden @ry I can confirm that this still isn't working in Firefox 6 and Chrome 14 upon upgrading to `http2` from @mikeal in `v0.5.5`. 

I would like to make note for @mikeal that `http2` is going to simplify the implementation quite a bit because the `upgrade` event is fired on the `ClientRequest` object and not the `Agent`. 

However, the `upgrade` event is still not firing and I'm starting to think that this is a problem with `http-parser` since it seems to hold the necessary and sufficient state for the event to be fired: https://github.com/joyent/node/blob/v0.5.5/lib/http2.js#L1107

@ry @mikeal Any thoughts here? I'm stumped.
",indexzero,mikeal
97,2011-09-10 10:40:25,"@3rd-eden @ry I can confirm that this still isn't working in Firefox 6 and Chrome 14 upon upgrading to `http2` from @mikeal in `v0.5.5`. 

I would like to make note for @mikeal that `http2` is going to simplify the implementation quite a bit because the `upgrade` event is fired on the `ClientRequest` object and not the `Agent`. 

However, the `upgrade` event is still not firing and I'm starting to think that this is a problem with `http-parser` since it seems to hold the necessary and sufficient state for the event to be fired: https://github.com/joyent/node/blob/v0.5.5/lib/http2.js#L1107

@ry @mikeal Any thoughts here? I'm stumped.
",indexzero,ry
97,2011-09-11 03:42:24,"@3rd-eden @ry 

I spent some time reading the `http-parser` code with help from @bmeck and it seems that this is indeed a problem with the `connection` header parsing not detecting the ""Upgrade"" state because in Firefox 7 it sends



where as in Chrome 13 and older versions of the spec the header is:



Based on our first pass it seems like the parser enters the `h_connection_keep_alive` greedily (https://github.com/ry/http-parser/blob/master/http_parser.c#L1367-1377) and does not continue to check the contents of the header. 

Not sure how simple a fix this is, but @bmeck will be putting together a low-level parser repro next week.
",indexzero,ry
97,2011-09-11 03:42:24,"@3rd-eden @ry 

I spent some time reading the `http-parser` code with help from @bmeck and it seems that this is indeed a problem with the `connection` header parsing not detecting the ""Upgrade"" state because in Firefox 7 it sends



where as in Chrome 13 and older versions of the spec the header is:



Based on our first pass it seems like the parser enters the `h_connection_keep_alive` greedily (https://github.com/ry/http-parser/blob/master/http_parser.c#L1367-1377) and does not continue to check the contents of the header. 

Not sure how simple a fix this is, but @bmeck will be putting together a low-level parser repro next week.
",indexzero,bmeck
97,2011-09-29 02:11:28,"After some further investigation with @AvianFlu:

Parser doesn't seem to be a problem. It detects upgrades just fine (and fires [this callback](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L189)). Proxy receives http requests like:



But fails to pass them further. [This callback doesn't get executed at all](https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy/http-proxy.js#L591).

[Comparison between direct and proxied request](https://gist.github.com/44c77df7f64cda18e664) - forwarded requests have their headers all in lower case. No forwarded request has an `Upgrade` header.

I'll investigate it further, but it's 4 AM and it's basically a brain dump.
",mmalecki,AvianFlu
97,2011-09-30 00:48:54,"I can confirm that the fix from @indutny resolves this issue in his pull request. In both Firefox 7 and Chrome 14. I'm merging this into master.
",indexzero,indutny
89,2011-08-28 05:59:22,"@dominictarr Can you help @digialrinaldo with his question?
",indexzero,dominictarr
89,2011-08-28 05:59:22,"@dominictarr Can you help @digialrinaldo with his question?
",indexzero,digialrinaldo
84,2011-08-01 19:04:52,"this is actually is a feature of node.js core.

https://github.com/joyent/node/blob/v0.4.10/lib/http.js#L1139-1147

unless this is something that would be useful? @dominictarr
",jamesonjlee,dominictarr
84,2011-08-02 18:27:58,"@drjackal @KimSchneider is actually correct here. @dominictarr +1 to merge this
",indexzero,drjackal
78,2012-04-02 14:33:52,"@CodeRarity not sure this key still works, I haven't touched the src code in months. I just want to forget rapleaf honestly. Anyway thanks for testing/answering.
",tralamazza,CodeRarity
75,2011-07-22 01:36:29,"@nodesocket This is actually by design in node.js core and has nothing to do with `node-http-proxy`. Here's a quick sample repro'ing the problem with the `http` module:



It's actually good that the server does this because you want to keep serving all of your connections and not abruptly cut them off. What would be nice is if the `close` event didn't fire on the `http.Server` instance until all of the connections had closed gracefully. I've talked to @ry and opened an issue on node.js core: https://github.com/joyent/node/issues/1383
",indexzero,ry
70,2011-07-18 02:27:04,"@marak in @jakobs script he sets socket.io to use xhr-multipart, so socket.io falls back to that instead of websockets.

https://gist.github.com/1075579#L7
",dominictarr,marak
70,2011-07-18 02:27:04,"@marak in @jakobs script he sets socket.io to use xhr-multipart, so socket.io falls back to that instead of websockets.

https://gist.github.com/1075579#L7
",dominictarr,jakobs
66,2011-08-28 06:02:41,"@hynese @marak @dominictarr @bmeck This is now resolve in the latest version of `node-http-proxy`. Check out some of the examples around ""middleware"" in: https://github.com/nodejitsu/node-http-proxy/tree/master/examples
",indexzero,marak
62,2011-07-25 21:53:26,"@daemon-byte @bpierre @coolbloke1324 This issue is marked `wont-fix` because there is nothing we can do to fix it in the node-http-proxy project itself; it is blocked by a core node.js bug which is not scheduled for fix until `0.6.x`. 

In the meantime, a recent feature has been added which may allow you work around this issue if you don't use the `x-forwarded-*` headers. You can now pass in `enableXForwarded: false` in the options to `HttpProxy` instances and `.createServer()` and this will bypass the check which is throwing the exception: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L385

You will of course not get the `x-forwarded-*` headers in your target application, but if that's not a concern for you this do the trick.
",indexzero,coolbloke1324
62,2011-07-25 21:54:35,"@dominictarr can shed some light on whether this is pushed in the latest version of `node-http-proxy` on npm
",indexzero,dominictarr
62,2011-07-25 21:57:24,"@dominictarr FYI:


",indexzero,dominictarr
62,2011-07-25 23:11:28,"@coolbloke1324 Very busy preparing for upcoming releases, don't have the time to dig around to find it. Try searching for HTTPS releated bugs in the nodejs issues: http://github.com/joyent/node/issues
",indexzero,coolbloke1324
62,2011-07-26 01:29:46,"@daemon-byte @bpierre @coolbloke1324 @indexzero

the feature indexzero refers to in

> In the meantime, a recent feature has been added which may allow you work around this issue if you don't use the x-forwarded-\* headers. You can now pass in enableXForwarded: false in the options to HttpProxy instances and .createServer() and this will bypass the check which is throwing the exception: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L385
> 
> You will of course not get the x-forwarded-\* headers in your target application, but if that's not a concern for you this do the trick.

is now available on npm in http-proxy@0.6.0
",dominictarr,coolbloke1324
60,2011-06-10 19:33:13,"@qard I think it might make the most sense to use the custom logic mode for now. 

If you do really like this sugar sytnax, I think we would accept a pull request for it. You want to try a few commits to get it started?
",Marak,qard
59,2011-06-26 15:16:59,"@fidian here is the simplest repro for this issue:



Unfortunately, it seems that this is by design in node.js core. This is the status line written to **every** `ServerResponse` object in core: https://github.com/joyent/node/blob/v0.4.8/lib/http.js#L833-834, which doesn't seem to be configurable anywhere. 

Maybe @ry or @felixge can comment on if outgoing `HTTP/1.0` requests are going to be supported in core.
",indexzero,ry
59,2011-06-26 15:16:59,"@fidian here is the simplest repro for this issue:



Unfortunately, it seems that this is by design in node.js core. This is the status line written to **every** `ServerResponse` object in core: https://github.com/joyent/node/blob/v0.4.8/lib/http.js#L833-834, which doesn't seem to be configurable anywhere. 

Maybe @ry or @felixge can comment on if outgoing `HTTP/1.0` requests are going to be supported in core.
",indexzero,felixge
58,2011-06-08 22:03:17,"@vvo @marak It depends on the level of introspection into the data stream that you're looking to get. For example, gzip works because afaik it's a binary encoding algorithm and can process the raw stream. Rewriting HTTP headers requires a good HTTPParser like the one ryan wrote. It's really a question of exactly what you're trying to hack in there.

A generic stream rewriter could be possible, but everything would have to be capable of parsing streams.
",indexzero,marak
58,2011-07-25 04:46:33,"I think @dominictarr is close to getting proper middle-wares enabled. Will be reviewing all this in the upcoming weeks.

Thanks!
",Marak,dominictarr
56,2011-05-19 18:13:02,"I'm not sure if this is the best place, but I wanted to get a dialog going regarding the new branch of http-proxy which is intended to use the net module.

I know that @ry and @mikeal both have a lot of thoughts about this, so if either of you guys feel like bike shedding, please post whatever information you can that could help direct @indexzero and @olauzon 

:-)
",Marak,mikeal
56,2011-05-19 18:13:02,"I'm not sure if this is the best place, but I wanted to get a dialog going regarding the new branch of http-proxy which is intended to use the net module.

I know that @ry and @mikeal both have a lot of thoughts about this, so if either of you guys feel like bike shedding, please post whatever information you can that could help direct @indexzero and @olauzon 

:-)
",Marak,ry
56,2011-05-19 18:13:02,"I'm not sure if this is the best place, but I wanted to get a dialog going regarding the new branch of http-proxy which is intended to use the net module.

I know that @ry and @mikeal both have a lot of thoughts about this, so if either of you guys feel like bike shedding, please post whatever information you can that could help direct @indexzero and @olauzon 

:-)
",Marak,indexzero
56,2011-05-19 18:13:02,"I'm not sure if this is the best place, but I wanted to get a dialog going regarding the new branch of http-proxy which is intended to use the net module.

I know that @ry and @mikeal both have a lot of thoughts about this, so if either of you guys feel like bike shedding, please post whatever information you can that could help direct @indexzero and @olauzon 

:-)
",Marak,olauzon
56,2011-05-19 18:15:43,"Yes. This is not the correct venue for this. Closing this issue

I have been discussing this in-depth with @mikeal, should have something worth looking at soon.
",indexzero,mikeal
55,2011-05-19 17:27:44,"I suppose this is a dirty little secret of node.js: https://github.com/joyent/node/blob/v0.4.7/lib/http.js#L1315

The keep-alive support in core written by @mikeal was temporarily disabled when @ry introduced the http.Agent API in 0.3.6+. Hopefully we'll see this back in sometime soon, but until then I don't think that this issue can be resolved. 
",indexzero,mikeal
55,2011-05-19 17:27:44,"I suppose this is a dirty little secret of node.js: https://github.com/joyent/node/blob/v0.4.7/lib/http.js#L1315

The keep-alive support in core written by @mikeal was temporarily disabled when @ry introduced the http.Agent API in 0.3.6+. Hopefully we'll see this back in sometime soon, but until then I don't think that this issue can be resolved. 
",indexzero,ry
54,2011-06-08 18:24:18,"I believe this issue has been resolved? @bluescreen303 can you confirm? If not, let's get @olauzon on it!

:-)
",Marak,olauzon
53,2011-05-19 06:29:54,"**(Reported by @bluescreen303)**

While you are at it, can you please add the 'x-forwarded-proto' header as well (http, https).
In my case, I let the proxy do ssl, and use plain http backend servers.
This works very well, but my backend servers need to know what urls to generate for internal links.
This header does the trick. I'm not sure if it's standard in any way, but at least rails uses it.

Also, see https://forums.aws.amazon.com/ann.jspa?annID=805 for more information about these headers.
",indexzero,bluescreen303
51,2011-05-16 03:18:39,"**(Reported by @bluescreen303)**

I noticed x-forwarded-for was set to 'undefined' when proxying https.
It seems someone else was hit by this too.
http://stackoverflow.com/questions/5999379/how-to-find-out-the-remote-address-in-node-js-if-it-is-https-request

I'm not sure if this is a node bug, but as a workaround, would you please change

req.headers['x-forwarded-for'] = req.connection.remoteAddress;

into

req.headers['x-forwarded-for'] = req.connection.remoteAddress || req.connection.socket.remoteAddress;

Or maybe there's some other way around this problem.
",indexzero,bluescreen303
49,2011-05-10 21:22:12,"I'm not sure these two things are related. @BigWookie can you elaborate a little more on what you mean by _""the answer is 127.0.0.1:3000/path""_. Do you mean the URL bar in the browser reflects this? Or that the HTTP Host header reflects this? 
",indexzero,BigWookie
48,2011-05-10 18:08:02,"ECONNREFUSED is a generic node.js error message when a socket cannot make a connection. It usually indicates that the listening server isn't infact listening, or the outgoing request you made to the server could not find its target. 

With that being said, I'm not entirely sure what your issue is. Could it be possible you are already running services on the port http-proxy is trying to use for it's tests? Maybe you could change the port number in the test files?

@indexzero - Do you have any ideas why this could be happening? 
",Marak,indexzero
48,2011-05-10 22:05:58,"Something is wrong in core. The method signature you suggest is not the correct method signature. This may be the result of a bad rebase on behalf of @ry. 

In `master` both `https.js` and `http.js` indicate that both `.getAgent()` methods take an options hash, not a `host, port` pair, but in `v0.4.7` it is still inconsistent. However, there is a commit from @mikeal rebased into _February_ that actually fixes this. 

_Old commit that fixes this_
https://github.com/joyent/node/commit/2b03ba59177fee8ad28b5be0bebd149b06f3c2a2#lib/http.js

_v0.4.7_
`https.js`: https://github.com/joyent/node/blob/v0.4.7/lib/https.js#L70
`http.js`: https://github.com/joyent/node/blob/v0.4.7/lib/http.js#L1408

_master_
`http.js`: https://github.com/joyent/node/blob/master/lib/http.js#L1418
`https.js`: https://github.com/joyent/node/blob/master/lib/https.js#L80

I would like to suggest a hotfix release for nodejs as `v0.4.7-1` or `v0.4.8` to resolve this inconsistency. If that's not a good plan I can always just revert node-http-proxy to the original code under v0.5.0 that works around this inconsistency.

This issue should also be closed: https://github.com/joyent/node/issues/943 and is discussed more: https://github.com/nodejitsu/node-http-proxy/issues/38
",indexzero,mikeal
48,2011-05-10 22:05:58,"Something is wrong in core. The method signature you suggest is not the correct method signature. This may be the result of a bad rebase on behalf of @ry. 

In `master` both `https.js` and `http.js` indicate that both `.getAgent()` methods take an options hash, not a `host, port` pair, but in `v0.4.7` it is still inconsistent. However, there is a commit from @mikeal rebased into _February_ that actually fixes this. 

_Old commit that fixes this_
https://github.com/joyent/node/commit/2b03ba59177fee8ad28b5be0bebd149b06f3c2a2#lib/http.js

_v0.4.7_
`https.js`: https://github.com/joyent/node/blob/v0.4.7/lib/https.js#L70
`http.js`: https://github.com/joyent/node/blob/v0.4.7/lib/http.js#L1408

_master_
`http.js`: https://github.com/joyent/node/blob/master/lib/http.js#L1418
`https.js`: https://github.com/joyent/node/blob/master/lib/https.js#L80

I would like to suggest a hotfix release for nodejs as `v0.4.7-1` or `v0.4.8` to resolve this inconsistency. If that's not a good plan I can always just revert node-http-proxy to the original code under v0.5.0 that works around this inconsistency.

This issue should also be closed: https://github.com/joyent/node/issues/943 and is discussed more: https://github.com/nodejitsu/node-http-proxy/issues/38
",indexzero,ry
48,2011-05-10 22:35:01,"@mikeal Thanks for clarifying. In master now there is a backwards compatible change that checks the type of the arguments passed to `.getAgent()`. Would love to see a hotfix version pushed out from @ry, but now that I've reverted it's not a big deal. 
",indexzero,ry
42,2011-05-17 22:34:09,"This was actually not related to node.js core, but a typo in my test code. Thanks to @olauzon for finding this problem and fixing it in 1ee6beff6aa3087e332701fd3cfda70b4e968ce8. Will be pushed out in `v0.5.2`
",indexzero,olauzon
41,2011-06-08 18:24:53,"@indexzero is this ticket still relevant? If so, should we get @olauzon to investigate? 
",Marak,olauzon
41,2011-06-08 18:57:18,"@marak I have not investigated it at all, so it would be good to at least confirm it is no longer an issue.
",indexzero,marak
38,2011-04-26 21:20:13,"I will roll this into `v0.5.1`. This code was a workaround for a small bug in node.js core that @mikeal fixed this here https://github.com/joyent/node/commit/2b03ba59177fee8ad28b5be0bebd149b06f3c2a2#lib/http.js 

Although this commit claims it was made in February, when I released `0.5.0` it was not in the node.js source. Rebased perhaps? 
",indexzero,mikeal
38,2011-04-26 21:21:28,"Uh oh, looks like the clock on my VM may be off.  This could be bad...

Thanks for letting me know!

Tim

On 4/26/2011 5:20 PM, indexzero wrote:

> I will roll this into `v0.5.1`. This code was a workaround for a small bug in node.js core that @mikeal fixed this here https://github.com/joyent/node/commit/2b03ba59177fee8ad28b5be0bebd149b06f3c2a2#lib/http.js
> 
> Although this commit claims it was made in February, when I released `0.5.0` it was not in the node.js source. Rebased perhaps?
",timmattison,mikeal
38,2011-05-22 18:55:53,"This seems to be something (still) going on in Node.js core. The code in questions claims that it is backwards compatible: https://github.com/joyent/node/blob/master/lib/http.js#L1427

Perhaps @ry or @mikeal could shed some light on why this is popping up again. Host is still being passed as a string in node-http-proxy (i.e. ""legacy"" arguments) https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L48

I think that this may be a bug in core related to `options instanceof String`. This syntax doesn't seem to be the correct way to identify the type of the argument. Here's a quick sample from the REPL:



Should be a quick fix. Reasonbly sure this has nothing to do with node-http-proxy.
",indexzero,ry
36,2011-05-17 22:32:04,"This was actually not related to node.js core, but a typo in my test code. Thanks to @olauzon for finding this problem and fixing it in 1ee6beff6aa3087e332701fd3cfda70b4e968ce8. Will be pushed out in `v0.5.2`
",indexzero,olauzon
34,2011-04-26 21:24:02,"The websocket support was originally written by @donnerjack13589 and later updated by @davglass. Maybe they can chime in on the reasoning behind changing the outgoing headers.

I will kill those lines in `v0.5.1` (coming this week) if there are no objections since both @flashfan and @andyichr have seen this fix their problems.
",indexzero,davglass
34,2011-04-26 21:24:02,"The websocket support was originally written by @donnerjack13589 and later updated by @davglass. Maybe they can chime in on the reasoning behind changing the outgoing headers.

I will kill those lines in `v0.5.1` (coming this week) if there are no objections since both @flashfan and @andyichr have seen this fix their problems.
",indexzero,donnerjack13589
34,2011-04-26 21:24:02,"The websocket support was originally written by @donnerjack13589 and later updated by @davglass. Maybe they can chime in on the reasoning behind changing the outgoing headers.

I will kill those lines in `v0.5.1` (coming this week) if there are no objections since both @flashfan and @andyichr have seen this fix their problems.
",indexzero,flashfan
34,2011-05-11 20:24:32,"@olauzon can you take a look at this ticket? I'd like to get this resolved this week if possible. 
",Marak,olauzon
34,2011-05-11 21:23:55,"Great! Should be a pretty simple fix in there. Maybe we can summon @miksago or @donnerjack13589 to help shed some light on the underlying websocket spec and why these headers need to be changed (or don't)

@donnerjack13589 wrote the original implementation here, it's like 4am in Russia tho so he might not be around
",indexzero,donnerjack13589
34,2011-05-11 21:23:55,"Great! Should be a pretty simple fix in there. Maybe we can summon @miksago or @donnerjack13589 to help shed some light on the underlying websocket spec and why these headers need to be changed (or don't)

@donnerjack13589 wrote the original implementation here, it's like 4am in Russia tho so he might not be around
",indexzero,miksago
34,2011-05-11 21:40:54,"So what's the issue? Most websocket implementations will be reading the headers of origin and host, as well as the various sec- ones. If you're proxying websockets and adding, say, a ""x-"" to the front of these headers, then the websocket implementations will break. I think it's probably best not to modify headers on websocket requests. 

As for the specification, I don't think it defines as to how proxies should interact with headers, @donnerjack13589 may know otherwise. I might also ask the guys I work with as to whether they can shed light, but they're in BST / GMT timezone.
",ThisIsMissEm,donnerjack13589
34,2011-05-11 21:44:25,"@miksago Thanks. The problem is that currently `node-http-proxy` rewrites the `origin` and `host` headers for WebSocket requests. This is causing some unexpected behavior for users over HTTPS and in other cross-domain proxying scenarios. 

Based on what you said, I guess we should just not be rewriting these headers at all? 
Code: https://github.com/nodejitsu/node-http-proxy/blob/master/lib/node-http-proxy.js#L589
",indexzero,miksago
34,2011-06-26 15:23:55,"@lezhang If that code sample fixed your issue, this is not related to `node-http-proxy`, but how you were using it. That is, the fix was to manually set the header on the incoming request (i.e. the `IncomingRequest` was missing the `Host` header to begin with, and then`node-http-proxy` correctly proxied the request).
",indexzero,lezhang
